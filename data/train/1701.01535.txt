{
  "article_text": [
    "high - assurance systems require compelling evidences to show that their delivered services satisfy critical properties , e.g. security and safety @xcite .",
    "if high - assurance systems fail to meet their critical requirements , it could result in security breaches , loss of lives , or significant property damage .",
    "due to the criticality of such systems , it is highly desired that they are developed in a rigorous process .",
    "the avionics community has developed a set of guidelines for the rigorous development of safety - critical systems , e.g. , do-178b / c @xcite . whilst the common criteria ( cc ) @xcite provides guidelines for security - critical systems . in high - assurance systems ,",
    "trusted computing base ( tcb ) @xcite is defined as : `` a small amount of software and hardware that security depends on and that we distinguish from a much larger amount that can misbehave without affecting security @xcite '' .",
    "the concept of _ separation kernel _ is introduced @xcite to dissociate the kernel verification from the verification of trusted code belonging to separated components .",
    "the main purpose of separation kernels is to enforce the separation of all software components while reducing the size of the tcb .",
    "security is carried out partly by separating physically system components , and partly by means of trusted functionality accomplished within some of those components being separated .",
    "the concept of separation kernel originates the multiple independent levels of security / safety ( mils ) @xcite which is a high - assurance security / safety architecture based on separation @xcite and controlled information flow @xcite .",
    "separation kernels first came into use in the avionics domain , with the acceptance of integrated modular avionics ( i m a ) @xcite in this domain in the 1990s .",
    "a significant foundation of i m a is the separation of system resources into isolated computation spaces  called _",
    "partitions_. separation kernels are adopted as _ partitioning kernels _",
    "@xcite , which mainly concerns safety .",
    "separation kernels can be considered as a fundamental part of high - assurance systems . as a part of the tcb ,",
    "separation kernels are small enough to allow formal verification of their correctness .",
    "the increasing evidences show successful applications of formal methods on software development , not only as theoretical research in the academy , but also deployed in industrial applications @xcite .",
    "traditionally , certified security is achieved by cc evaluation @xcite , in which formal methods are mandated for highest assurance levels .",
    "it requires comprehensive security analysis using formal representations of the security model and functional specification as well as formal proofs of correspondence between them .",
    "in particular , the separation kernel protection profile ( skpp ) @xcite is an instantiated profile of cc for separation kernels .",
    "safety is usually governed by rtca do-178b @xcite whose successor do-178c @xcite published in 2011 includes a technology supplement of formal methods . due to the wide application of high - assurance systems ,",
    "applying formal methods on separation kernels has not only been a hot research topic since the concept emerged , but also attracted industrial concerns .",
    "although more than 20 implementations have been developed in industry or academia , and furthermore formal methods have been applied on some of them for the purpose of cc and do-178b / c certification , high - assurance separation kernels still face challenges @xcite .",
    "the approaches and techniques of formal methods for separation kernels are numerous , but the topic lacks a state of the art survey and a comprehensive taxonomy to ease the application of formal methods over them .",
    "it is therefore significant and urgent to have a thorough and comprehensive study on this topic to provide a useful reference for further research and industrial applications . to the best of our knowledge ,",
    "our work is the first to systematically overview , categorize , analyze and discuss formal methods application on separation kernels .",
    "this paper aims at distilling the landscape in the field of formal methods application on separation kernels by studying , classifying , comparing , and analyzing related work for the purpose of figuring out challenges and potential research directions in future . specifically , we present the following contributions in this paper :    \\(1 ) we propose an analytical framework to understand and classify related work . in the framework",
    ", we clarify a set of concepts related to separation kernels , define a reference architecture , compare implementations , study critical properties and related standards , and then identify an application schema of formal methods for separation kernels .",
    "the analytical framework is the foundation of this survey .",
    "\\(2 ) we propose a taxonomy of applying formal methods on separation kernels according to the analytical framework .",
    "the first level of the taxonomy is designed according to the application schema of formal methods .",
    "the lower levels are based on the reference architecture and critical properties .",
    "then , we group together the related work according to the taxonomy .",
    "\\(3 ) we present a detailed analysis and discussion of the related work .",
    "we compare formal methods and certifications used in a comprehensive set of implementations .",
    "the importance of functionalities in the reference architecture is identified in formal specifications and models .",
    "relations among critical properties are clarified .",
    "the verified properties , used approaches , and sizes of research works on formal verification are compared .",
    "then , we give an overall comparison of them according to the taxonomy .",
    "\\(4 ) we discuss the challenges of applying formal methods on separation kernels and figure out potential research directions in this field .",
    "we identify four challenges , i.e. , eliminating specification bottleneck , automating full formal verification , multicore and concurrency , and formal development and code generation .",
    "then , we propose technical directions to address each challenge in future .",
    "compared to our previous work @xcite , contributions ( 1 ) , ( 3 ) , ( 4 ) and the proposed taxonomy in contribution ( 2 ) in this paper are new . the detailed description of research works in @xcite is reorganized by the taxonomy and shortened to a brief overview of related work in contribution ( 2 ) . the previous work is also extended by the research works of two new categories under the taxonomy .",
    "the rest of this paper is organized as follows .",
    "section [ sec : analy_frm ] presents the analytical framework .",
    "section [ sec : tax ] presents the taxonomy and overview of research works in the literature . in section [ sec : analy_disc ] , we analyze and discuss the research works through comprehensive comparisons .",
    "section [ sec : chlg ] identifies challenges and potential technical directions in this field .",
    "finally , section [ sec : concl ] gives the conclusion of this survey .",
    "in this section , we present an analytical framework for separation kernels .",
    "the framework is the foundation of the taxonomy , analysis and discussion in the next sections .",
    "first , we clarify a set of related concepts and propose a reference architecture for separation kernels in which common and optional components are identified .",
    "second , we survey implementations from industry and academia .",
    "third , we classify critical properties of separation kernels and survey related standards . finally , we sketch out an application schema of formal methods for high - assurance separation kernels .",
    "we first clarify the relationship among concepts of security kernel , separation kernel , partitioning kernel , microkernel , and embedded hypervisor , which is shown in fig .",
    "[ fig : kernels ] .",
    "the _ security kernel _",
    "@xcite is the central part of systems to implement the basic security procedures for controlling access to system resources",
    ". security requirements of systems to be assured are specified as _",
    "security policies_. a reference monitor controls the access of _ subjects _ to _ resources _ according to the policies .",
    "separation kernels extend security kernels with _ partitions _ and map exported resources into partitions .",
    "separation kernels enforce partitions to have spatial and temporal separation , and allow subjects belonging to partitions to cause flow to transfer information among them .",
    "the _ partitioning kernel _",
    "@xcite is a variant of separation kernels in the domain of i m a and concerns safe separation largely based on an arinc 653 @xcite style separation scheme .",
    "partitioning kernels specialize and enhance the temporal and spatial separation with a static table - driven scheduling approach @xcite and static resource allocation for partitions .",
    "unlike traditional operating systems , separation kernels do not provide services such as device drivers and file systems , but a set of very specific functionalities to enforce security separation and information flow controls , in order to keep them small enough to allow formal verification of their correctness .",
    "the primary motivation of these kernels is also the one behind microkernels @xcite . in terms of the source code size",
    ", these kernels are usually sizing less than 10,000 lines of code , which is the code scale of microkernels . on the other hand , with the rise of more powerful multiprocessor",
    "embedded systems , virtualization provides a promising technique to improve functionalities of high - assurance systems @xcite .",
    "embedded hypervisors are consequently used to implement security kernels ( e.g. @xcite ) , separation kernels ( e.g. @xcite ) , and partitioning kernels ( e.g. @xcite ) .        due to the increasing complexity , scale , and mixed critical requirements of high - assurance systems , various techniques and approaches",
    "are integrated @xcite together .",
    "from now on , we use the term _ separation kernel _ to cover the concepts of security kernel , original separation kernel , partitioning kernel , and embedded hypervisor . based on the landscape of separation kernels ,",
    "we propose a reference architecture , as shown in fig .",
    "[ fig : sk_ra ] , for separation kernels to provide functionalities to analyze research works .",
    "we classify the functionalities into common and optional components . _",
    "common components _ represent a least set of functionalities to implement a separation kernel .",
    "_ optional components _ are usually supported for complex systems .",
    "hypervisor - based separation kernels usually manage partitions ( i.e. , vms ) and leave process management to guest oss .",
    "the communication mechanism supports inter- and intra - partition communication .",
    "policies may be security , safety , real - time , and fault - tolerance policies , etc .",
    "the configuration for separation , such as memory separation configuration and scheduling windows for partitions , can also be considered in the policies .",
    "management of hardware ( e.g. clock , timer , interrupt , and memory ) are necessary for hypervisor - based separation kernels . however , simple separation kernels manipulate the underlying hardware via _ hardware interface_.      due to the wide acceptance of separation kernels ,",
    "many implementations including industrial products and academic prototypes have been developed in recent years . in table",
    "[ tab : impls1 ] , we compare twenty implementations from industry and academia .",
    "the time line in the 3rd column shows the time they started and the time they stopped development of the separation kernels .",
    "the underlying instruction set architectures ( isa ) and whether they support multi - core processors are surveyed in columns 4 and 5 , respectively .",
    "we also survey the development languages , the line of the code ( loc ) , and whether they are open - source .    by comparing these implementations",
    ", we have the following findings .",
    "* most of the separation kernels are still in use and developing .",
    "very few open - source projects have stopped . * in order to provide safety / security critical solutions , various isas are supported by separation kernels , in particular arm , sparc , and powerpc .",
    "multicore processors are increasingly deployed in safety / security critical systems to fulfil the demand of processing power in integrated systems .",
    "therefore , multicore processors are supported by most of separation kernels regardless of in industry and academia . *",
    "the loc of separation kernels that we can find in the literature is less than ten thousand .",
    "most of implementations adopt microkernels as the foundation and shift out the complex services into system partitions . for the sake of portability and efficiency , separation kernels in particulars are written in the c programming language embedded with pieces of asm .",
    "moreover , separation kernels in academia are usually delivered in open - source projects . * with the trend of integrating applications on one computing platform ( e.g. , i m a ) , native interference provided by separation kernels is often not powerful for application development .",
    "the embedded hypervisor is currently a mainstream form of separation kernels in industry and academia .",
    "virtual machine management provides a straightforward approach for the spatial separation of resources . moreover , embedded hypervisors virtualize general - purpose operating systems ( e.g. , linux ) in partitions and permit the deployment of legacy applications .      traditionally , critical properties of high - assurance systems are safety , security , real - time , and fault - tolerance @xcite .",
    "different from the classical categories of critical properties , _ neat _ are well known properties considered in separation kernels , which stands for `` non - bypassable , evaluatable , always invoked and tamper '' proof @xcite .",
    "however these intuitive concepts are not easy to formalize nor to provide direct proofs . instead",
    ", separation kernels are normally verified by formally showing that they provide the right functionalities for mils systems according to the following critical properties @xcite , which is called _ didt _ in this survey .    *",
    "* data separation * : also known as ` data isolation' , each partition is deployed as a separated resource .",
    "applications in one partition can neither modify applications and private data in other partitions nor control private devices and actuators in other partitions . *",
    "* information flow security * : also known as `` control of information flow '' , information flow between partitions is defined from a source partition , which is authenticated , to a set of receivers as well authenticated ; additionally , the source is authenticated to the receivers . * * temporal separation * : it allows partitions to share physical resources across different time periods .",
    "a resource is assigned to one component for a slice of time , then sanitized and assigned to another component .",
    "services received from shared resources by applications in one partition can not be affected by other partitions . * * damage limitation * : damage is contained by restraining failures from propagating from one partition to others .",
    "the properties of data separation , information flow security , and damage limitation are all spatial properties .",
    "they are collectively called `` spatial separation '' properties .",
    "data separation requires memory address spaces / data of one partition to be independent of any other partition in the system .",
    "information flow security is a variation of data separation .",
    "pure data separation is not pragmatic , therefore separation kernels define authorized channels between partitions to provide inter - partition communication .",
    "pure data isolation is permitted to be violated only through these channels .",
    "damage limitation is achieved by other three properties since the damage to applications in one partition are limited .    due to criticality of high - assurance systems",
    ", there are mandatory verification and validation ( v&v ) activities in their design and analysis process to ensure that the systems fully meet their functional requirements .",
    "several specifications have been created to standardize activities in v&v processes by international organizations .",
    "cc @xcite , which is also the international standard iso / iec 15408 , and skpp @xcite are usually applied to security of separation kernels .",
    "although the skpp was sunset in 2011 , nsa still recommend separation kernels for security - critical systems .",
    "as for safety , has summarized a set of well - known safety standards for high - assurance systems .",
    "many of them have also been applied to separation kernels .",
    "another notable standard for separation kernels is the arinc 653 standard @xcite which is a set of specifications to guide manufacturers in avionic application software towards maximum standardization .",
    "it aims at providing a standardized interface between separation kernels and application software , as well as the system functionalities of separation kernels .    in table",
    "[ tab : props_stand ] , we overview the traditional critical properties of high - assurance systems , their related standards , and whether didt properties contribute to improve the assurance of traditional critical properties .      in software engineering , formal methods",
    "provides a set of mathematically based techniques and tools to specify , develop , and verify software systems @xcite .",
    "we depict an application schema of formal methods on separation kernels in fig .",
    "[ fig : fm_sw ] , in which the artefacts and techniques are identified .        *",
    "formal specification uses languages with a rigorous syntax and semantics to give a precise description of the system and its desired properties .",
    "informal requirements may be translated into properties of the system specification .",
    "the system specification would further have formal description of system behavior , which is translated from the informal design .",
    "formal specification can be used to validate the completeness and accuracy of the system requirements and to guide subsequent development activities .",
    "formal specification may be refined to high - level , low - level , and implementation models step by step and furthermore be used for formal synthesis of implementations . *",
    "formal verification is the act to ensure the correctness of intended systems with respect to a certain formal specification or property .",
    "one approach of formal verification is model checking , which systematically and exhaustively explores the mathematical model to check satisfaction of properties .",
    "another one is theorem proving , whose first step is to generate a collection of proof obligations from the system and its specifications .",
    "the truth of the proof obligations implies the conformance of the system to its specification . the second step is to discharge the proof obligations in an interactive or automated manner .",
    "* there are two approaches to formal verification of separation kernels at the implementation level : : theorem proving the implementation model by abstraction from source / binary code , and software model checking @xcite .",
    "many security and safety standards currently mandate the use of formal methods to certify correctness of separation kernels .",
    "the common criteria defines clear treatment of software artefacts for different evaluation levels , which is shown in table [ tab : cc_eal ] .",
    "the evaluation through cc defines evaluation assurance levels ( eal ) from eal 1 to eal 7 ( formally verified , designed and tested ) .",
    "the eal 7 mandates formal verification of the low - level design model using mathematical models and theorem proving . as a specific profile of cc ,",
    "skpp mandates formal methods on separation kernels too .",
    "do-178c has a formal methods supplement ( do-333 ) to address formal methods to complement testing .",
    "iec 61508 defines functional safety and methods for electronic systems .",
    "certification of safety integrity level ( sil ) 4 in this standard highly recommend the use of formal methods .",
    "we first propose a taxonomy of applying formal methods on separation kernels in this section .",
    "the taxonomy is to group together related work that share common objectives and characteristics to yield clear category formation and easier comparative analysis .",
    "then , we overview the related work using the proposed taxonomy .      the taxonomy is designed based on the analytical framework and is shown in fig . [",
    "fig : taxonomy ] .",
    "level 0 is the root element .",
    "level 1 of the taxonomy is designed according to the application schema of formal methods on separation kernels ( see fig . [",
    "fig : fm_sw ] ) .",
    "level 2 is designed considering the functionalities in the reference architecture ( see fig . [",
    "fig : sk_ra ] ) , critical properties , and implementations .",
    "the subcategories of `` formal specification and model of sks '' are designed by considering functionalities in the reference architecture .",
    "the subcategories of `` formalization of critical properties '' and `` formal verification of sks '' are designed using the critical properties of separation kernels . since the `` damage limitation '' property is enforced indirectly by the other three properties , there is no related work of formalization and formal verification of this property , and we omit it in our taxonomy . from the implementations of separation kernels",
    "( see table [ tab : impls1 ] ) , we could see that they are almost developed using the c programming language .",
    "thus , beside binary code we only consider code abstraction from the c language in the category `` code abstraction of sks '' .",
    "we discuss research works on each category in the following subsections .",
    "this subsection overviews research works about formal description of functionalities of separation kernels . except kernel interface and policies in fig .",
    "[ fig : sk_ra ] , we group research works of other functionalities into the category `` functional specification and model '' .      a formal policy is a kind of formal specification to describe what the system allows and prohibits .",
    "formal policies of separation kernels actually define the security / safety requirements and can be categorized according to the critical properties .",
    "the policies are usually configured during system built - time and loaded during initialization of separation kernels .",
    "_ data separation policy _ defines strict data separation that does not allow data exchange between partitions .",
    "these policies include memory separation , device separation , etc .",
    "for instance , arinc 653 defines a set of partitions and a static memory allocation policy for them @xcite .    the _ inter - partition flow policy _ ( ipfp )",
    "@xcite is a sort of information flow policy for separation kernels on mils .",
    "separation kernels map exported resources ( e.g. , communication objects ) into partitions by a function @xmath0 .",
    "ipfp is expressed abstractly in a partition flow matrix @xmath1 , whose entries indicate the mode of the flow .",
    "the mode indicates the direction of the flow , e.g. `` write '' and `` read '' .",
    "resources from a partition are addressed equivalently with respect to ipfp .",
    "one partition can be allowed to access all resources in another partition .",
    "another type of ipfp is port and channel based information flow used in arinc 653 . _",
    "partitioned information flow policy ( pifp ) _",
    "@xcite extends ipfp in skpp with two different granularities of requirements : partitions and subjects / resources this abstraction allows subjects from a partition to have different access privileges to resources allocated in the same partition or even in a different partition .",
    "_ fault policy _ is a type of damage limitation policy .",
    "a typical fault policy for separation kernels is the health monitoring ( hm ) in arinc 653 . the hm reports and responds to hardware , kernel , and application faults and failures .",
    "arinc 653 supports hm by providing a set of hierarchical hm configuration tables and application level error handlers .",
    "_ scheduling policy _ is a type of temporal separation policy .",
    "a typical scheduling policy for separation kernels is the partition time window configuration in arinc 653 .",
    "the scheduling specified in arinc 653 is a two - level scheduling .",
    "the partition scheduling is a fixed , cycle based scheduling and is strictly deterministic over time .",
    "this cyclic scheduling consists of a major time frame ( _ mtf _ ) that is split into partition time windows ( _ ptw _ ) . each _",
    "ptw _ has an offset and a duration , which is associated to a given partition .",
    "we overview a set of formal specifications and models of separation kernels here .",
    "refinement is often applied to create concrete models from abstract specifications in a step - wise manner .",
    "we categorize research works according to specification languages used , i.e. system / software specification languages , formal languages in theorem provers , and architecture description languages .",
    "[ [ using - systemsoftware - specification - languages ] ] using system / software specification languages + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    a specification language is a high - level language other than a programming language for system analysis and design and to produce executable code .",
    "many specification approaches use algebraic or model - theoretic structures to model systems step by step by refinement . in the following",
    "we describe related work using software specification languages , such as z notation , b method , and alley , to construct formal specifications of separation kernels .",
    "concerns entirely with the specification , design , and refinement of operating system kernels in z @xcite , one of which is a separation kernel .",
    "refinement goes down to a level where source code in programming languages ( e.g. , c and ada ) can be extracted from z specification .",
    "the specification and proofs are done by hand on paper .",
    "this work is upgraded in @xcite by taking into account separation kernel requirements in @xcite and skpp @xcite .",
    "craig s original specification is augmented using z notation @xcite mechanizing it using the z / eves theorem prover . as a consequent , syntax errors , missing invariants and new security properties to guarantee correct operations",
    "are found .",
    "the b method @xcite has been used to formally specify a secure partitioning kernel ( spk ) in @xcite .",
    "the high - level specification constitutes a complete architectural design of the system and is simulated and validated in prob @xcite .",
    "the pifp policy is refined to a level from which c code can be automatically generated . finally , an open source micro kernel , i.e. , prex , is adopted to integrate the pifp implementation .",
    "major functionalities of the os - k separation kernel @xcite , such as partition management , inter - partition communication , access control , are also designed in the b method .",
    "proof obligations are generated and checked using the b4free tool .",
    "almost the whole totality of the 2,700 proof obligations comprising the verification are automatically proven using b4free .",
    "aiming at least privilege separation kernel ( lpsk ) , develop a formal security policy model and a top - level specification in alloy @xcite .",
    "they utilize the alloy analyzer to verify the consistency of the specification .",
    "the top - level specification is a refinement of the pifp policy model and uses state transitions to model two separation subsystems of lpsk , system initialization and the system during runtime . in @xcite ,",
    "three levels of abstraction and refinement are used to formally develop the mask separation kernel in specware , which is an environment for formal specification and development .",
    "the abstract specification refines the mask policies and concerns the communication among _ cells _ using _ strands _ , which is a flow of instructions that are executed when a message is inserted into the strand of a cell .",
    "it is refined to the kernel specification primarily concerning the data structure .",
    "finally , the bottom layer specification is manually translated into c source code . for the purpose of information flow security of the xenon hypervisor @xcite ,",
    "use to formally model the hypercall interface behaviour of xenon .",
    "@xcite is a combination of z , csp and the refinement calculus .",
    "the whole model covers a subset of the hypercall interface and is over 4,500 pages of .",
    "[ [ using - theorem - provers ] ] using theorem provers + + + + + + + + + + + + + + + + + + + + +    theorem provers ( e.g. isabelle / hol , coq ) generally have a small logical kernel , provide powerful expressive languages for specification , and support reasoning about high - order logic .",
    "they have been applied for formal verification of operating system kernels , such as sel4 @xcite and certikos @xcite .",
    "inspired by successful application of theorem provers on general - purpose microkernels , they are adopted on kernels in recent years .    the formal verification of the sel4 microkernel has been done using isabelle / hol @xcite .",
    "the isabelle / hol specification of sel4 is extended in @xcite to formally verify information flow security of sel4 .",
    "in order to act as a separation kernel , sel4 is minimally extended by a static partition - based scheduler implementing a static round - robin scheduling between partitions , which are assigned fixe execution time slices .",
    "they also make small changes in the kernel apis and add the security policy .",
    "aiming at a precise model of pikeos and a precise formulation of the pikeos security policy , the euro - mils project @xcite creates a generic specification of separation kernels  controlled interruptible separation kernel ( cisk ) @xcite in isabelle / hol .",
    "this specification contains several facets that are useful to implement separation kernels , such as interrupts , context switches between domains , and control .",
    "the specification is rich in detail , making it suitable for formal verification of realistic and industrial systems .",
    "construct in isabelle / hol the functional and security model of a generic partitioning separation microkernel from a reference specification based on european space agency s i m a for space project @xcite .",
    "the specification uses arinc 653 for the functional requirements and skpp for the security requirements .",
    "aiming at implementations , the specification covers hardware virtualization , cpu timer , and memory management too .",
    "present a top - level specification of arinc 653 compliant separation kernels in isabelle / hol , in which partition management , partition scheduling and communication services of arinc 653 are considered .    the coq specification of certikos in @xcite is modified to disable all explicit inter - process communication and thus formed as a separation kernel without information flow among processes @xcite .",
    "use the concept of virtual machine for separation and provide a formal model of a multi - partition systems ( mps ) by acl2 @xcite .",
    "several different models of mps are presented , including a two - partition system without communication between partitions and an @xmath2-partition system with restricted communication .",
    "[ [ using - architecture - description - languages - adls ] ] using architecture description languages ( adls ) + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in general , adls concentrate on system level and are not fine - grained enough to formally specify separation kernels . however",
    ", formal models of separation kernels in adls could support model - driven development of applications . in @xcite , aadl (",
    "architecture analysis and design language ) and cheddar @xcite are applied to model an arinc 653 hierarchical scheduler and to analyze the schedulability of applications represented by aadl specifications , respectively .",
    "the kernel interface defines operating system services provided to applications .",
    "formalization of the kernel interface could support formally modelling and verification of application software on top of separation kernels .",
    "formalization and verification of arinc 653 has been conducted in recent years , such as a formal specification considering the architecture of arinc 653 systems @xcite , modeling arinc 653 for i m a applications @xcite , and verification of application software on top of arinc 653 @xcite .",
    "have formalized the system functionality and all of the 57 services specified in arinc 653 part 1 using event - b @xcite .",
    "they use the refinement structure in event - b to formalize arinc 653 step by step and a semi - automatic translation from service requirements of arinc 653 into the low level specification .",
    "the formal api specification of pikeos in isabelle / hol has been provided aiming at the certification of pikeos up to cc eal6 evaluation @xcite .",
    "their specification is based on cisk @xcite , which is instantiated to pikeos api in detail .",
    "the formal api specification covers inter - partition communication , memory , file provider , port , and event .      formal specification and model of separation kernels",
    "are verified with respect to critical properties .",
    "this subsection overviews the formal definition of critical properties and their sub - properties .",
    "data separation requires resources of a partition to be independent from resources from other partitions .",
    "pure data separation is too strong since it does not permit communications among partitions .",
    "this property is relaxed in mask @xcite and gwv @xcite . in the project of mathematically analyzed separation kernel ( mask )",
    "@xcite , communication between processes is regulated based on a separation policy , which is comprised of two separation axioms : a _ communication policy _ and an anonymous policy .",
    "the communication policy states that if a cell @xmath3 is modified as the result of performing a step on a cell @xmath4 , then there is an allowed communication between @xmath4 and @xmath3 .",
    "the second policy requires that the execution of an action in a cell @xmath4 modifies the state of the cell @xmath3 , then any modification in @xmath3 has to depend only on @xmath4 and @xmath3 .",
    "based on the mask data separation , propose the gwv property to model a separation kernel that enforces partitioning on applications running on mono - processors systems .",
    "the gwv property requires that the execution of a machine step modifying any arbitrary memory segment follows a mapping from the set of memory areas bound to the current partition and that are allowed to interact that memory segment .",
    "also define the _ exfiltration _ and _ inflitration _ properties for memory segments of partitions , which are special cases of the gwv property .",
    "the exfiltration and infiltration properties are similar to the communication policy and the second property of mask respectively .",
    "apply the two axioms of mask on the ed ( embedded device ) separation kernel and define the _ no - exfiltration _ and _ no - infiltration _",
    "properties for cc certification .",
    "the gwv property has been accepted in industry @xcite and formalized using the pvs theorem prover in @xcite .",
    "the original gwv is weakened by allowing to connect memory areas belonging to the same partition in @xcite .",
    "it is also extended by the concept of @xmath5 and adding a restriction considering partition names in @xcite .",
    "a subject is an element operating on memory areas of a partition .",
    "the gwv property has been applied in formal analysis for the integrity-178b separation kernel @xcite and aamp7 microprocessor @xcite .",
    "data separation of separation kernels at the hardware level is the separation of the system s memory . in @xcite ,",
    "the memory separation of the pikeos separation kernel is defined as `` all memory accesses in the kernel preserve an initial disjoint partitioning of memory , and obey a security policy where a thread is only allowed to access memory from its assigned partition . ''",
    "it is preserved by a set of assertions for function contracts .",
    "information flow security deals with the problem of preventing improper release and modification of information in complex systems .",
    "traditionally , language - based information flow security @xcite defines security policies of computer programs and ensures the data confidentiality by preventing information leakage from _ high _ variables to _ low _ ones .",
    "language - based information flow security is often not applicable for system - level security , because ( 1 ) in many cases it is impossible to classify _ high _ and _ low _ variables ; ( 2 ) data confidentiality is a weak property and is not enough for system - level security ; and ( 3 ) language - based ifs is not able to deal with intransitive policies straightforwardly .",
    "therefore , state - event based noninterference @xcite , which can deal with data confidentiality and secrecy of events together , is usually adopted in formal verification of separation kernels and microkernels @xcite .",
    "we focus on state - event based properties in this paper .",
    "the concept of noninterference was introduced in @xcite for the purpose of the specification and analysis of security policies .",
    "the system is configured by a set of _ domains _ and the allowed information flow between them are specified by an information flow policy @xmath6 , such that @xmath7 if information is allowed to flow from the domain @xmath8 to the domain @xmath9 .",
    "the intuitive meaning of noninterference is that a security domain @xmath8 can not interfere with a domain @xmath9 if no action performed by @xmath8 can affect the observation of @xmath9 to the system .",
    "transitive noninterference is too strong and not able to model channel - control policies .",
    "thus , intransitive noninterference is introduced in @xcite as a declassification of transitive one .",
    "based on noninterference in @xcite , proposes new notions , _ nonleakage _ and _ noninfluence_. nonleakage is a state - event representation of language - based information flow security for arbitrary multi - domain policies .",
    "noninfluence is the combination of nonleakage and intransitive noninterference .",
    "intransitive noninterference and its new forms are usually chosen to formally verify information flow security of general purpose operating systems @xcite and separation kernels @xcite .",
    "due to the scheduler in kernels , define special cases of nonleakage and noninfluence for operating systems .",
    "properties of information flow security have been formally verified on sel4 @xcite , prosper @xcite , pikeos @xcite , mcertikos @xcite , and arinc 653 @xcite .",
    "the standard proof of the noninterference property is discharged by examining a set of unwinding conditions @xcite on individual execution steps of the system .",
    "the unwinding theorem states if the system is _ output consistent _ , _ step consistent _ and _ locally respects _ the policy @xmath6 , the system is secure for @xmath6 . the three conditions are called _ unwinding conditions_. the unwinding theorem simplifies the security proofs by decomposing the global properties into unwinding conditions on each execution step .",
    "temporal separation usually includes sanitization / period processing and correct scheduling .",
    "define a sanitization property ( called _ temporal separation _ ) on the ed separation kernel .",
    "the property ensures that the data areas of a partition are cleaned when the system is switched to process data in other partitions . as for period processing , time partitioning used in formal verification of deos scheduler",
    "@xcite ensures that the access to cpu time budget by a partition can not be affected by the execution of other partitions .",
    "properties of correct scheduling are various according to different scheduling policies such as in @xcite .",
    "this subsection overviews research works about formal verification of separation kernels .",
    "we categorize the works by critical properties .      for the purpose of cc evaluation ,",
    "heitmeyer et al .",
    "provide a pragmatic solution to verify data separation of the ed separation kernel at the source code level .",
    "the kernel contains 3,000 lines of c and assembly code . to simplify the verification ,",
    "the code is annotated in advance using hoare and floyd pre - post conditions .",
    "a top - level state machine is formally verified by data separation in tame , which is a front end to the pvs theorem prover . then the source code is partitioned and demonstrated to conform to the state machine by refinement .",
    "the effort of code verification is remarkably reduced since more than 90 percent of the source code is not corresponding to any behavior defined by the top - level state machine .",
    "the aamp7 microprocessors in rockwell collins is a hardware implementation of separation kernels .",
    "their design is proven mathematically using the acl2 theorem prover to achieve cc eal 7 evaluation @xcite .",
    "the _ intrinsic partitioning _ in aamp7 is an instantiation of the gwv property @xcite .",
    "an abstract model meeting the gwv policy and a low - level model corresponding to the aamp7 microcode are created , and the refinement between them is also proved .    the integrity-178b separation kernel is formally analysed to obtain the eal 6 + cc certification @xcite .",
    "they adopt gwv @xcite as the security policy and create three levels of specification , i.e. , functional specification , high - level and low - level design , in acl2 . the functional specification is a formalization for the interfaces .",
    "the other two are semiformal representations of the system at different abstract levels .",
    "the low - level design has direct correspondence with the implementation , which simplifies the `` code - to - spec '' analysis during cc certification .    presents a modular approach in isabelle / hol to the formal verification of the gwv property on the two layers of pikeos . in the microkernel model , tasks and threads",
    "correspond to subjects and partitions in gwv respectively .",
    "a gwv _ segment _ is instantiated as a physical memory address .",
    "they add `` partitions '' to the model of the separation kernel to separate tasks and physical address .",
    "memory separation of the pikeos separation kernel has been formally verified on the source code level @xcite by breaking down high - level , non - functional requirements into functional properties of memory manager that can be presented as a set of assertions .      in the formal verification of the sel4 micro - kernel , to prove information flow security adopt the notions of _ nonleakage _ and _ noninfluence _ @xcite and define their variations for os kernels .",
    "the properties are formally verified on a revised specification of sel4 @xcite . because the properties are preserved by refinement ,",
    "it is possible to first prove the information flow security property on the abstract model and then conclude that it holds for sel4 s c source code due to the refinement relation .",
    "the verification applies to the total 8,830 lines of c code of the kernel implementation .",
    "have formally verified information flow security of a simple arm - based separation kernel  prosper at the binary code level using hol4 .",
    "they construct the top level specification , which satisfies noninterference , and a real model , which consists of two partitions being executed on two independent machines targeting an armv7 processor , and connected by an explicit communication channel .",
    "they use the bisimulation proof method to show that user observable traces of the specification are the same as those of the real model .",
    "the approach avoids reliance on the correctness of a c compiler and can transparently verify c code mixing with assembly .",
    "explicit inter - process communication of mcertikos is disabled to form a strict separation kernel in which information flow among processes is not allowed .",
    "the noninterference property is verified in @xcite .",
    "they use language - based information flow security and a well - designed observation function to express security at different abstract levels .",
    "a simulation preserves state indistinguishability between high and low levels .",
    "they develop a fully - formalized coq proof to guarantee security of the assembly execution of mcertikos .",
    "noninterference has also been formally verified on the pikeos api specification @xcite and a top - level specification of arinc 653 separation kernel @xcite using unwinding conditions .      here",
    ", we discuss research works about formal verification of two - level scheduler which implements the partition scheduling in separation kernels .    the honeywell deos is a real - time operating system supporting flexible separation .",
    "model checking and theorem proving approaches have been applied to the deos scheduler to check temporal separation @xcite .",
    "a major part of c++ source code of the deos scheduler is first translated into promela , which is the input language for the spin model checker @xcite .",
    "time partitioning is represented as a liveness property .",
    "the verification techniques are augmented in @xcite by verifying the absence of a livelock , which means that time is not elapsing in any cycle that does not contain a system tick event . due to its size and complexity ,",
    "state space explosion makes only possible to check one single configuration in each analysis .",
    "thus , they turn to theorem proving approach and use pvs to analyze the scheduler @xcite . to model the scheduler and the execution timeline in deos the authors use discrete time state - transition systems . additionally , time partitioning is expressed as a number of predicates that are proven to be true for any reachable states .    the real - time specification for java ( rtsj )",
    "is modified implementing a two - level scheduler .",
    "the first scheduling level is a priority scheduler to dispatch applications , while the second belongs to the applications @xcite .",
    "the verification of this two level scheduler is carry out using time automata in uppaal . from a total of five verified properties , three of them concern",
    "the model correctness and others are liveness and deadlock free properties . in @xcite ,",
    "a hierarchical scheduler for vxworks has been modelled using task automata ( timed automata with tasks ) @xcite and automatically checked using the times tool .",
    "they specify nine properties of the scheduler in tctl ( timed computation tree logic ) .",
    "formal verification of separation kernels down to their implementation or the binary code requires to provide a formal model for the semantics of the programming language or for the instruction set architecture ( isa ) of the target architecture , respectively . in this subsection",
    ", we overview the formal semantics and code abstraction of the c programming language and binary code .",
    "it is not until the end of the 1990 s that semantics covering a subset of c , large enough to make the verification of complex and large programs possible , have appeared . brings in _ cholera _",
    " an operational semantics for c89 including the c type system .",
    "_ cholera _ has been recently leveraged to construct the tools cparser and autocorres @xcite , which have been applied in the sel4 microkernel @xcite and separation kernel @xcite to abstract the implementation model from the sel4 source code",
    ".    develops a denotational semantics of c90 , which is based on monads implemented in haskell , and covers a large subset of c90 . in the formal verification of the nova hypervisor @xcite",
    ", they provide a denotational semantics for c++ which includes all the c++ primitive datatypes . as part of the verisoft project @xcite ,",
    "c0 which is a subset of the c language is formalized in isabell / hol .",
    "develop clight as part of the compcert project @xcite .",
    "clight accepts most of the c types and operators , although it does not support the use of control flow instruction goto and blocks .",
    "provide an executable semantics for c99 standard in the k - framework , which supports ltl model checking , and like the semantic model in @xcite , it is not mechanized .",
    "they provide a semantic model for almost all of the c functionalities . in the @xmath10 project ,",
    "provide a small step operational semantics and executable semantics model for c11 using the coq theorem prover .",
    "the semantic model is non - deterministic covering almost the totality of the c standard .",
    "the executable semantics is used for validation purposes .",
    "related work in this area includes formalization of some of the most popular architectures such as intel x86 , arm , and mips .",
    "here we cover only those mechanized formal semantics that can be used in the binary code verification of separation kernels .    for the intel architecture ,",
    "build in the model checker acl2 an executable semantics for the x86 - 64 architecture , providing a framework able to both formally analyze and simulate non - deterministic machine code programs intended to run on 64 bits intel processors .",
    "provide in hol4 an axiomatic and operational semantics for the intel multiprocessor architecture , including not only semantics for the set of instructions implemented by the architecture , but also a total order axiomatic semantic model of the memory , and machine registers .    on arm architectures ,",
    "the work in @xcite covers arm v7 including support for thumb-2 instructions through a monadic encoding of the architecture operations .",
    "validation is performed throughout random generation of instructions , and the execution of the instruction on a development board and in the semantic model .",
    "recently , arm v8 isa is also modeled in @xcite .",
    "the arm v7 isa model has been used in formal verification of sel4 @xcite and propsper @xcite at the binary code level .    within the compcert project @xcite",
    ", a subset of 90 instructions of the powerpc isa is modelled using the coq theorem - prover .",
    "this semantics is extended using the hol4 theorem - prover in @xcite with an axiomatic memory model for multiprocessor .",
    "an x86 machine model derived from compcert s model has been applied in formal verification of mcertikos @xcite .",
    "it is worth to mentioning the l3 language , introduced in @xcite aiming to support a generic framework for the specification of isas , and the reasoning on machine code programs . through specifying a next - step function for a subset of instructions for a given isa , and a definition of the state ,",
    "the framework is able to generate high - level functions in hol4 for machine code programs , and a set of theorems proving the correctness of the generated function w.r.t .",
    "the input machine code and the l3 specification for the isa .      formal synthesis @xcite translates formal , validated specifications into provably correct target code .",
    "automated formal software synthesis gives a high degree of confidence that the generated code is correct with respect to the specification .",
    "automatic code synthesis of operating systems can improve customizability @xcite and optimize the performance at run - time @xcite .",
    "it is time consuming and error prone when manually porting or configuring the operating systems on different target architectures , and this issue can be addressed by automatic generation of application - specific operating systems @xcite . but to the best of our knowledge , there are no research works on automatic code synthesis for separation kernels .",
    "the challenges are that the source code should be very efficient and usually embedded with assembly code .",
    "actually , separation kernels in industries are always verified by the post - development approach , i.e. , formal models are abstracted from the implementations of separation kernels and formally verified to provide the required proofs for critical properties .",
    "in this section , we analyze and discuss related work from the perspective of implementations , formal specification and model , critical properties , formal verification , and code abstraction and synthesis .",
    "then , we give an overall comparison .",
    "we have surveyed twenty implementations of separation kernels from industry and academia in table [ tab : impls1 ] . here",
    ", we compare their objectives , standard certifications / compliance , and formal methods applications in table [ tab : impls2 ] .",
    "the `` objective '' column presents the critical properties that implementations concern .",
    "although separation kernels contribute to improve fault - tolerance of systems , fault - tolerance is usually considered at system levels .",
    "therefore , we do not compare this property in the table .    by comparing these implementations",
    ", we have the following findings .    *",
    "traditionally , two kinds of separation kernels have been used to assure safety and security of critical systems .",
    "for instance , vxworks 653 was used to ensure safety - critical systems and vxworks mils to ensure security - critical systems .",
    "nevertheless , a new direction in this field is to unify safety and security into a single separation kernel .",
    "for instance , recent separation micro - kernel implementations such as pikeos and xtratum are designed to support both solutions @xcite . *",
    "the realtime property is mostly considered on separation kernels for safety - critical systems .",
    "due to the integration of safety and security , this property has been considered with security - critical systems .",
    "* industrial implementations aim at highest assurance levels of different security / safety certification , in particular cc and do-178b .",
    "open - source / academic implementations have emerged in recent years . however",
    ", many of them do not have certification evidence now .",
    "some of the open - source separation kernels are compliant with the arinc 653 standard .",
    "* from the aspect of formal methods application , formal specification and verification have been enforced on separation kernels in academia at source code and binary code levels .",
    "the objective of formal methods on industrial implementations is security / safety certification .",
    "we compare the research works of separation kernels on formal specification and model in tables [ tab : sk_spec_comp1 ] and [ tab : sk_spec_comp2 ] in the ascending order of time . in table",
    "[ tab : sk_spec_comp1 ] , we compare the formal languages they have used , the size of the specification , and whether refinement is used . in table [ tab : sk_spec_comp2 ] , we compare the functionalities in the reference architecture that are formalized by the research works . we calculate a total score for each functionality to identify its importance in the formal specification and model of separation kernels .",
    "a formal specification language has a mathematically defined syntax and semantics to give precise description of the artefacts used with formal methods . in the application of formal methods on separation kernels ,",
    "numerous specification languages are used ( see table [ tab : sk_spec_comp1 ] ) , such as classical b , event - b , z notation , isabelle / hol , acl2 , and model - driven architecture languages ( e.g. , aadl ) .",
    "specification languages are often used for system analysis , requirement analysis , and systems design at a much higher level , where expressiveness and refinement @xcite are the major considerations for separation kernels .",
    "specification languages used for separation kernels often support set theory and first - order logic as the fundamental data types .",
    "refinement is often used to create concrete models from abstract specifications in a step - wise manner . on the other hand , for the purpose of formal verification at low level or source code level , specification languages used to specify",
    "separation kernels are focused on first - order or high - order logic languages , such as isabelle / hol , acl2 , pvs , and hol4 .",
    "verification tools for these formalisms must have powerful engines for formal reasoning , supporting automatic theorem proving or providing proof assistants with a high degree of automation .",
    "presents a detailed comparison of seventeen theorem provers and the ability of their formal notations .",
    "we have proposed a reference architecture for separation kernels in fig .",
    "[ fig : sk_ra ] , in which we classify the functionalities into common and optional components . in table",
    "[ tab : sk_spec_comp2 ] , we count a total score for each functionality according to the level of abstraction at which they are formalized in research works .",
    "the importance of each functionality in the formal specification of separation kernels is thus shown by the total score .",
    "we divide the `` policies '' from `` functionalities '' in accordance with the taxonomy in subsection [ subsec : taxonomy ] . from table [",
    "tab : sk_spec_comp2 ] , we could see that common components have higher scores than optional components .",
    "it is in accordance with the classification of common and optional components in the reference architecture .",
    "an exception is the `` hardware interface '' which is at low level and necessary in implementations .",
    "however , it is usually omitted in formal specifications at abstract level .",
    "most of research works only consider the concept of `` partition '' and do not provide specification of `` partition management '' , because they use the `` partition '' as a mechanism to separate resources and do not manage the life cycle of partitions .",
    "although it is an optional component in the reference architecture , process management is often specified in research works because processes are importance resources in partitions .",
    "the pifp policy is the most adopted policy of separation kernels in research works due to the fine - grained controls on partitions , resources , and subjects .",
    "a notable observation is that different specification languages are used in the literature , but isabell / hol has become recently more popular than other formalisms .",
    "the first reason is its successful , large scale application in full formal verification of the sel4 microkernel at source code level .",
    "second , there is a big community of experts working actively on its development , with frequent updates . finally but not less important",
    ", it has a powerful development environment with many tools supporting automation .",
    "a detailed discussion about applying isabelle / hol in certification processes of separation kernels is in @xcite .",
    "in subsection [ ssec : sep_plcy ] , we have presented a set of critical properties , their sub - properties , and their formal definition .",
    "we sketch out their relationship in fig .",
    "[ fig : comp_props ] .",
    "the evidence of the relationship are from the literature as shown in table [ tab : evd_prop ] .",
    "gwv and mask are the two major groups of data separation properties .",
    "gwv is inspired by properties in mask and the relationship of these two groups of properties is discussed in @xcite .",
    "the infiltration , exfiltration , and mediation properties are actually instances of the gwv separation property .",
    "the first two are actually similar to the two properties of mask . the properties of gwv are applied on the ed separation kernel and redefined as ed no - infiltration and ed no - exfiltration @xcite .",
    "rushby s noninterference and its variants constitute the major group of information flow security . the definition and formal comparison of noninterference , nonleakage and noninfluence",
    "are studied in @xcite .",
    "the three unwinding conditions ( see subsection [ subsubsec : ifs ] ) imply noninterference by the unwinding theorem @xcite .",
    "noninfluence @xcite is proposed based on noninterference and considers both data confidentiality and secrecy of events .",
    "it is a stronger property and implies noninterference and nonleakage .",
    "these properties have been instantiated in sel4 @xcite and in arinc 653 separation kernels @xcite by extending the scheduler .",
    "different definitions and formal comparison of noninterference are available in @xcite .    the gwv property proposed in rockwell collins is adopted in industry as the security policy for cc certifications , such as aamp7 microprocessor @xcite , integrity-178b @xcite , and pikeos @xcite .",
    "meanwhile , noninterference is mostly applied in academia , such as in formal verification of sel4 @xcite , prosper @xcite , and mcertikos @xcite .",
    "a notable work is @xcite in which they formally compare gwv and rushby s noninterference and present a mapping between the elements of the two models .",
    "the conclusion is that gwv is stronger than rushby s noninterference .",
    "a similar conclusion is in @xcite , where they state that gwv is at least as strong as general noninterference and in addition it also provides intransitive noninterference .",
    "temporal separation has not attracted much attention in the literature and we therefore can not find a large number of works focusing on the verification of temporal separation .",
    "it is however worth mentioning the work @xcite where time partitioning is verified in the deos kernel .      in order to summarize formal verification of separation kernels , we compare the research works in tables [ tab : sk_verify_comp1 ] and [ tab : sk_verify_comp2 ] focusing on the verification targets ,",
    "verified properties and sub - properties , language used , sizes of specification and proofs , verification approaches and tools , and their cost .",
    "the verification targets are artefacts of formal methods in fig .",
    "[ fig : fm_sw ] , i.e. specification , high - level model , low - level model , and implementation model of source code and binary code . in table",
    "[ tab : sk_verify_comp1 ] , we refine the model into high - level design and low - level design models according to the levels of formal methods application in cc certification .",
    "the purpose of formal verification of separation kernels in industry is mainly safety / security certification , in particular cc security certification , such as integrity-178 , pikeos , aamp7 , and ed .",
    "the highest assurance level of cc certification ( eal 7 ) requires comprehensive security analysis using formal representations of the security model , functional specification , high - level design , and low - level design of separation kernels as well as formal proofs of correspondence among them .",
    "the implementation is not necessary for formal analysis .",
    "therefore , it is possible to observe from table [ tab : sk_verify_comp1 ] that formal verification of industrial separation kernels is often conducted on the low - level design model but not the implementation . however , in academia it often reaches the levels of source and binary code for the purpose of full formal verification . on the other hand , formal verification of separation kernels",
    "usually consider data separation and information flow security other than temporal separation since cc certification of separation kernels demands a security policy model of spatial separation . from the aspect of critical properties , formal verification in industry",
    "prefers data separation , in particular the gwv property , whilst rushby s noninterference is prefered in academia .",
    "we find that in recent five years , research works of formal verification have mostly focused on the noninterference .",
    "almost all of research works of formal verification on spatial separation have used theorem proving and refinement approaches .",
    "the reasons are as follows .    *",
    "the methodology of formal verification using theorem proving and refinement is compliant with cc eal 7 certification .",
    "security proof of separation kernels is produced by the methodology .",
    "however , model checking only produces the verification result , e.g. , correct or counterexamples . *",
    "separation kernels for safety and security critical systems often requires formal verification on low - level design or even source code . despite the relatively small size of separation kernels ,",
    "the model checking technique does not scale well to verify such complex systems due to the state space explosion problem .",
    "however , the theorem proving approach is applicable and full verification of separation kernels is therefore possible .",
    "* critical properties of separation kernels ( e.g. , gwv and information flow security ) are difficult to be represented using temporal logic .",
    "a notable recent work is that noninterference can be classified as a sort of hyperproperties @xcite and formulated by hyperltl @xcite . however , hyperltl model checkers currently do not scale up to 1,000 states and are not applicable even at the abstract level of separation kernels .",
    "on the other hand , temporal separation verification often uses model checking rather than theorem proving .",
    "_ time _ is hard to express using first order or high order logics , which are the mathematical artefacts used in theorem provers .",
    "however , it is possible to conveniently express _ time _ using temporal logics , e.g. , the timed automata in uppaal tools .",
    "a major obstacle of this approach is that the size and complexity of separation kernels limit the approach to analyze only one configuration at a time .",
    "honeywell has addressed this issue and turned into using the pvs theorem prover to formally verify deos @xcite .    from the aspect of the cost for formal verification ,",
    "there are not many evidences in the literature . from the result of sel4 @xcite",
    ", we could see that enormous man power is often needed for formal verification of separation kernels reaching at the source code level . a possible approach to this issue",
    "is provided in @xcite , where manual proof is enforced at abstract level and pre- and post - conditions annotated in the source code are used to automatically verify the conformance between the specification and the source code .",
    "table [ tab : sk_lang_semantics ] summarises state of the art for mechanized formal semantics of the c language .",
    "the table shows the formal language used , the version of the c language the semantics formalizes , whether the formal semantics is executable , and what separation kernels they have been applied on , if any .",
    "we include a field indicating whether a semantics is executable or not since executing the semantics is a desirable property for simulation purposes .",
    "similarly , table [ tab : isa_semantics ] comprises state of the art isas formalization .",
    "the table shows the formal method used , the target architecture , whether it supports multicore , whether the semantics is executable , and what separation kernels they have been applied on , if any .",
    "verification of separation kernels at source code and binary code level requires two fundamental tasks : to capture the language or isa behaviour and to prove that the provided semantic model is correct . due to the complexity of the c language ,",
    "it is difficult to capture its whole semantics .",
    "moreover , separation kernels are usually developed using c embedded with assembly .",
    "when it is formally verified at source code level , the kernel implementation is possible to be re - structured to make it compliant with the provided semantic model , such as in the sel4 microkernel verification @xcite .",
    "this raises a new discussion about the validity of the new version of the kernel .",
    "however , although the modified kernel may not have the same behaviour as the original one , by the verification of functional correctness , which is carried out on the modified kernel , we obtain an implementation with the same functionality as the original kernel , and preserving the desirable set of safety and security properties .    concerning the correctness of the c and isa model , the technique most commonly used",
    "is the validation of the provided semantic model w.r.t . the programming language or isa .",
    "a validation framework automatically executes single instructions , or sequences of them , in the semantic model and in the real architecture , and it compares the results of both execution to check whether they are correct . in case",
    "some mismatch is found , it is possible to refine the semantic model to correct a possible error on it .",
    "the validation of hundreds of thousands of instructions will provide enough confidence about the correctness of the semantic model .",
    "we give an overall comparison of formal methods application on separation kernels in this subsection .",
    "we compare the related work on aspects of the target of formal methods application , development processes covered by the formal methods used according to cc , verification approaches , estimated eal in cc according to table [ tab : cc_eal ] , and scale of formal methods application in table [ tab : overall_comp ] .",
    "in addition to the normative definitions of eals , the cc standard defines the possibility of intermediate levels of security when a requirement is evaluated at a higher level than that required by the target level .",
    "the addition of the symbol `` + '' represents this kind of evaluation .",
    "formal verification of ed , pikeos , and prosper does not have low - level design .",
    "they either prove the conformance between the high - level design and the implementation or use software model checking to analyze the implementation .",
    "the highest assurance level of cc ( eal 7 ) requires formal methods application on the low - level design but not on the implementation .",
    "aiming at security / safety of separation kernels as far as possible , a few research works have provided formal proof of refinement between the low - level design and the implementation , such as sel4 @xcite and mcertikos @xcite .",
    "targeting at the source code by formal methods always means that they are applied on the implementation , which has overstepped the demand of eal 7 in cc and estimated as eal 7 + in table [ tab : overall_comp ] .",
    "compared to the high cost of cc certification , formal verification on implementation is a low - cost way to provide more assurance of separation kernels as stated in @xcite .",
    "few work provides an estimation of time and cost of formal methods application on separation kernels .",
    "thus , we can not clearly compare them .",
    "a notable viewpoint is that the industry rules - of - thumb for cc eal 6 certification is of @xmath111k / loc , although it provides less assurance than formal verification @xcite .",
    "we now discuss the remaining challenges in formal methods application on separation kernels and possible research directions that may be taken by future work .      in formal methods ,",
    "formal specification is a bottleneck in functional verification @xcite .",
    "therefore , simpler verification methods are often used in practice including ( 1 ) lightweight verification methods for finding bugs , ( 2 ) combining verification and testing , and ( 3 ) verifying generic and uniform properties .",
    "due to high assurance of separation kernels and formal methods mandated by certification , the first method is obviously not sufficient .",
    "the second is always used in practice .",
    "the third is actually suitable for separation kernels .",
    "using generic or uniform specifications can reduce the cost to create requirement specifications . although lightweight properties , such as buffer overflows and null - pointer exceptions , are feasible in many cases , formal verification of relational properties , e.g. noninterference , is inevitable for separation kernels . the challenges and possible directions to eliminate specification bottleneck are shown as follows .",
    "\\(1 ) _ properties of temporal separation_. the gwv and noninterference are the major properties for data separation and information flow security that have been widely applied in industry and academia .",
    "however , properties of temporal separation have not been thoroughly studied in the literature .",
    "a set of properties to clarify temporal separation are highly desired for high - assurance separation kernels .",
    "\\(2 ) _ formal relations among properties_. we have figured out some formal relations in fig .",
    "[ fig : comp_props ] .",
    "others are not explored . in particular ,",
    "shared resources among partitions can affect the scheduling in separation kernels .",
    "but the relationship between spatial separation and temporal separation has not been studied in the literature and is not clear yet . on the other hand ,",
    "there does not exist a precise and global framework for the relationship of critical properties of separation kernels and it deserves further study .",
    "\\(3 ) _ generic formal specification_. for the purpose of the formal development , safety / security certification , and the study of formal relations between critical properties , it is highly necessary in the future to create a generic specification of separation kernels .",
    "this specification can be used to develop implementations using refinement and be revised gradually , and thus significantly alleviate the bottleneck .",
    "it has been attempted in the euro - mils project to deliver a generic specification for separation kernels @xcite .",
    "\\(4 ) _ reusability of formal specification_. formal specification is a foundation for formal verification .",
    "furthermore , it can also be applied to development , integration , and management of systems deployed on separation kernels @xcite .",
    "a direction is to integrate domain knowledge into formal specification of separation kernels ( e.g. , @xcite ) to improve its reusability .",
    "\\(5 ) _ flexibility of formal specification and proof_. although reusability of the specification partially relies on the formal notation used and its supported tool , a well designed specification can evidently improve it .",
    "on the other hand , proofs should address how to deal with changes of formal model due to upgrading of separation kernels .",
    "since re - verification is usually expensive for separation kernels , the proof change should be as small as possible when the uniform specification and design models are tailored or extended in real applications .",
    "a reusable design of the specification and its proof is a challenge for separation kernels .      full formal verification of systems means that the verification is enforced not only on the specification but also covers all the source code and even the binary code with machine checkable proof .",
    "formal verification at the implementation level can significantly improve the assurance of systems than other approaches , such as applying formal specification or lightweight properties over higher - level models @xcite .",
    "full formal verification of programs had rarely been conducted and was often considered to be highly expensive @xcite before successful practices of sel4 @xcite , compcert @xcite , and certikos @xcite .    full formal verification at the source code level is necessarily based on a set of assumptions , such as the correctness of the hardware and the compiler @xcite .",
    "whilst , formal verification at the binary code level overcomes assumptions on the correctness of the compiler .",
    "full correctness of separation kernels by formal verification could be assured by a formal pervasive verification approach covering the hardware , compiler , and kernel itself exactly as proposed in the verisoft xt project @xcite .",
    "a major obstacle of this objective is that full formal verification of operating system kernels is usually manpower intensive , e.g. , 20 person - years are invested in formal verification of sel4 .",
    "we summarize a set of challenges and potential directions in automating full formal verification of separation kernels to alleviate enormous efforts as follows .",
    "\\(1 ) _ automatic verification of critical properties_. as shown in table [ tab : sk_verify_comp2 ] , existing works usually apply theorem proving to verify spatial separation of separation kernels .",
    "automatic approaches at specification and design levels can enormously alleviate manual efforts and deserves further study .",
    "\\(2 ) _ automatic refinement checking and property preservation_. a promising way to the correctness of low - level models is refinement .",
    "however , from sel4 we could see that it is often a time - consuming work to find and prove the refinement relation between two levels of specification @xcite .",
    "automatic refinement checking is thus worth considering in formal verification of separation kernels .",
    "have illustrated high degree of automatic refinement checking using event - b .",
    "second , it is critical that properties could be preserved during refinement .",
    "refinement preservation of information flow security has been discussed in @xcite . for separation kernels , refinement preservation of critical properties needs systematical study .",
    "\\(3 ) _ proof generation during automatic verification_. traditional model checking approaches produce the verification result directly . for the purpose of safety and security certification , it is necessary that automatic approaches generate proofs for the correctness .",
    "\\(4 ) _ full formal verification at c source code level_. programming in c is not sufficient for implementing separation kernels and programmers have to manipulate hardware directly by embedding assembly code in c. the assembly code is often omitted in full formal verification ( e.g. , sel4 @xcite ) and not supported by code abstraction tools , such as cparser @xcite which translates a large subset of c-99 code into isabelle / hol .",
    "existing works have to be extended for full formal verification considering c and assembly code together .      in the domain of high - assurance systems ,",
    "an increasing trend is the adoption of multicore processor to fulfil demands of higher computing power @xcite .",
    "the overall performance of systems is improved by concurrent execution of instructions in multicore processors . the latest version of arinc 653 @xcite specifies the functionality and system services of multicore separation kernels . as summarized in table [ tab : impls1 ]",
    ", separation kernels from industry and academia mostly support multicore processors .",
    "multicore kernels are challenging formal verification and the safety / security certification @xcite .",
    "to the best of our knowledge , there is no research work on formal verification of multicore kernels in the literature .",
    "separation kernels are reactive systems whose execution is triggered by system calls and in - kernel events . in general , the execution of system calls of monocore kernels are non - preemptive .",
    "it is often assumed in formal verification that kernels do not have in - kernel concurrency and the execution of functions handling events is considered to be atomic , such as in @xcite . in such a case , formal verification of critical properties could be decomposed to examine individual execution steps , i.e. , atomic functions .",
    "this is the basic idea of the unwinding theorem @xcite to reason about noninterference .",
    "however , kernels are preemptive when processing other interruptions and thus in - kernel concurrency exists in practice . on the other hand , multicore introduces more complicated concurrency in separation kernels .",
    "the complexity increases greatly due to concurrent execution among cores and the shared resources .",
    "functions to handle events are shared - variable based parallel programs and are executed in an interleaved manner .",
    "a promising way of conquering this issue is compositional verification @xcite .",
    "rely - guarantee method @xcite is a fundamental approach for compositional reasoning of parallel programs with shared variables .",
    "we outline the challenges and potential directions in formal methods application on multicore separation kernels as follows .",
    "\\(1 ) _ formalization of critical properties_. the original critical properties for separation kernels are usually defined on a state machine in which a transition is a big - step action ( e.g. , a system call ) . in the case of multicore , non - atomicity of events",
    "requires new formalization of critical properties .",
    "\\(2 ) _ specification languages in theorem provers_. existing specification of separation kernels uses inherent _ functions _ of programming languages in theorem provers ( e.g. , isabelle / hol , coq ) to specify the atomic behavior of events . for multicore ,",
    "specification languages which can express interleaved semantics and deal with complexity are required in theorem provers .",
    "\\(3 ) _ compositional reasoning of critical properties_. although compositional reasoning of language - based information flow security has been studied @xcite , compositional reasoning of state - event based definitions , which are usually applied on operating system kernels , should be addressed in future .",
    "compositional reasoning of other critical properties also deserves further study .",
    "proof systems for compositional reasoning and their automation techniques are critical .",
    "\\(4 ) _ parallel refinement_. based on the specification languages , a refinement framework is certainly needed with considerations of concurrency and compositionality of refinement relation @xcite .",
    "the critical properties of separation kernels are necessary to be preserved during parallel refinement of multicore specification .",
    "separation kernels are always formally verified by the post - hoc approach , i.e. , formal verification on an existing implementation .",
    "one promise of formal methods is to develop formal models step by step and generate code automatically or manually from the model whose correctness and properties have been formally verified .",
    "the benefit of formal development for separation kernels is significant .",
    "first , the specification and the verification targets , i.e. implementations of separation kernel , are developed in tandem , the specification bottleneck can be greatly alleviated .",
    "second , formal proofs requested by safety / security certification can be generated during refinement - based development .",
    "third , developing source code is a time - consuming and error - prone process .",
    "automatic code generation via certified / verified tools can alleviate many efforts to design and implementation and provide rigorous arguments to validate the generated code .",
    "for this purpose , the following challenges need to be addressed in the future .",
    "\\(1 ) _ stepwise refinement for formal development supporting multicore_. in formal verification of sel4 @xcite and ed @xcite , refinement methods have been applied . due to the post - hoc verification objective of these projects ,",
    "refinement is not a technique to develop the specification in a stepwise manner , but to prove the conformance between formalizations at different levels .",
    "therefore , they have few levels of specification and the refinement is coarse - grained . for the purpose of formal development , a stepwise refinement framework , which is able to deal with additional design elements ( e.g. , new events and new state variables ) and concurrency ,",
    "is highly desired .",
    "\\(2 ) _ verified code generation and traceability_. formal synthesis of separation kernels is difficult since the code should be very efficient and embedded with assembly code to manipulate hardware .",
    "therefore , the machine model have to be considered in the formal synthesis .",
    "on the other hand , verified synthesis and traceability of the code to formal models are required for certifications .",
    "we have compared typical related work which have ( partially ) addressed the challenges and studied the potential directions mentioned in table [ tab : chall_comp ] . from the table",
    ", we could see that the challenge of specification bottleneck has been widely considered , in particular the generality and reusability of formal specification .",
    "full formal verification has attracted large efforts in recent years , e.g. , sel4 , mcertikos , and prosper , in which full formal verification of the source code or binary code has been done . as a new trend in high - assurance systems , multicore and concurrency issues in formal verification of separation kernels have not been addressed . to the best of our knowledge , except some efforts to preemptive and interruptable oss @xcite ,",
    "there is no research work on formal verification of multicore kernels .",
    "formal development and code generation for separation kernels has been partially considered in some research works .",
    "however , issues considering automatic code generation have not been addressed .",
    "we have surveyed , categorized and comparatively analyzed major research works in formal methods application on separation kernels .",
    "our analytical framework clarifies the scope of formal methods application on separation kernels and characterizes the separation kernels .",
    "the taxonomy and survey of research works have distilled existing efforts in this field to the current date .",
    "this survey additionally gives an overview and limitations of existing works by a detailed comparison and analysis .",
    "we also highlight the challenges and future directions . with this snapshot of the overall research landscape ,",
    "we thus hope the separation kernel community can better explore various potential opportunities to further improve the safety and security of separation kernel implementations and reduce the cost of development and certification by formal methods application .",
    "blasum15 holger blasum , sergey tverdyshev , bruno langenstein , werner stephan , abderrahmane feliachi , yakoub nemouchi , burkhart wolff , cyril proch , freek verbeek , and julien schmaltz .",
    "echnical report .",
    "euro - mils project .",
    "aamp7 g rockwell collins .",
    "advanced architecture microprocessor 7 government microprocessor ( aamp7 g ) .",
    "( 2015 ) .",
    "klein10 gerwin klein , june andronick , kevin elphinstone , gernot heiser , david cock , philip derrin , dhammika elkaduwe , kai engelhardt , rafal kolanski , michael norrish , and others . 2010 . . ,",
    "6 ( june 2010 ) , 107115 .",
    "klein09 gerwin klein , kevin elphinstone , gernot heiser , june andronick , david cock , philip derrin , dhammika elkaduwe , kai engelhardt , rafal kolanski , michael norrish , and others .",
    "2009 . . in _ proc",
    "of sosp09_. acm press , 207220 .",
    "sailer05a reiner sailer , trent jaeger , enriquillo valdez , ramon caceres , ronald perez , stefan berger , john  linwood griffin , and leendert van  doorn .",
    "in _ proc . of acsac05_. ieee press , 276  285 .",
    "sailer05b reiner sailer , enriquillo valdez , trent jaeger , ronald perez , leendert van  doorn , john  linwood griffin , stefan berger , leendert doorn , john linwood , and griffin  stefan berger .",
    "echnical report rc23511 .",
    "ibm .",
    "klaus15 freek verbeek , oto havle , julien schmaltz , sergey tverdyshev , holger blasum , bruno langenstein , werner stephan , burkhart wolff , and yakoub nemouchi .",
    "2015 . . in _ proc",
    "of nfm15_. springer , 375389 ."
  ],
  "abstract_text": [
    "<S> separation kernels provide temporal / spatial separation and controlled information flow to their hosted applications . </S>",
    "<S> they are introduced to decouple the analysis of applications in partitions from the analysis of the kernel itself . </S>",
    "<S> more than 20 implementations of separation kernels have been developed and widely applied in critical domains , e.g. , avionics / aerospace , military / defense , and medical devices . </S>",
    "<S> formal methods are mandated by the security / safety certification of separation kernels and have been carried out since this concept emerged . however </S>",
    "<S> , this field lacks a survey to systematically study , compare , and analyze related work . on the other hand </S>",
    "<S> , high - assurance separation kernels by formal methods still face big challenges . in this paper , </S>",
    "<S> an analytical framework is first proposed to clarify the functionalities , implementations , properties and standards , and formal methods application of separation kernels . </S>",
    "<S> based on the proposed analytical framework , a taxonomy is designed according to formal methods application , functionalities , and properties of separation kernels . </S>",
    "<S> research works in the literature are then categorized and overviewed by the taxonomy . in accordance with the analytical framework , a comprehensive analysis and discussion of related work are presented . finally , four challenges and their possible technical directions for future research are identified , e.g. specification bottleneck , multicore and concurrency , and automation of full formal verification .    </S>",
    "<S> < ccs2012 > < </S>",
    "<S> concept > < concept_id>10002978.10002986</concept_id > < concept_desc > security and privacy  formal methods and theory of security</concept_desc > < concept_significance>500</concept_significance > < /concept > < </S>",
    "<S> concept > < concept_id>10011007.10010940.10010941.10010949</concept_id > </S>",
    "<S> < concept_desc > software and its engineering  operating systems</concept_desc > < concept_significance>500</concept_significance > </S>",
    "<S> < /concept > < concept > < concept_id>10011007.10010940.10010992.10010998</concept_id > </S>",
    "<S> < concept_desc > software and its engineering  formal methods</concept_desc > < concept_significance>500</concept_significance > < /concept > < </S>",
    "<S> concept > < concept_id>10011007.10011074.10011099.10011692</concept_id > </S>",
    "<S> < concept_desc > software and its engineering  formal software verification</concept_desc > < concept_significance>500</concept_significance > </S>",
    "<S> < /concept > < concept > < concept_id>10011007.10010940.10010992.10010993</concept_id > < concept_desc > software and its engineering  correctness</concept_desc > < concept_significance>300</concept_significance > </S>",
    "<S> < /concept > < concept > < concept_id>10011007.10010940.10011003</concept_id > </S>",
    "<S> < concept_desc > software and its engineering  extra - functional properties</concept_desc > < concept_significance>300</concept_significance > < /concept > < </S>",
    "<S> concept > </S>",
    "<S> < concept_id>10010520.10010570.10010571</concept_id > < concept_desc > computer systems organization  real - time operating systems</concept_desc > < concept_significance>300</concept_significance > < /concept > < </S>",
    "<S> /ccs2012 >    this research is supported in part by the national research foundation , prime minister s office , singapore under its national cybersecurity r&d program ( award no . </S>",
    "<S> nrf2014ncr - ncr001 - 30 ) and administered by the national cybersecurity r&d directorate . </S>",
    "<S> a minor part of this paper was presented in @xcite .    </S>",
    "<S> author s addresses : y. zhao ( corresponding author ) , school of computer science and engineering , beihang university , haidian district , beijing 100191 , p. r. china ( email : zhaoyw@buaa.edu.cn ) ; d. sann , f. zhang , y. liu , school of computer science and engineering , nanyang technological university , 50 nanyang avenue , singapore 639798 ( email:\\{sanan,fuzh,yangliu}@ntu.edu.sg ) . </S>"
  ]
}