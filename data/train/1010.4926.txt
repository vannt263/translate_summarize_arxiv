{
  "article_text": [
    "we say a unitary operator acting an array of qubits has been compiled if it has been expressed as a sequence of elementary operations ( seo ) , where by elementary operations we mean few - qubit ( like 1 and 2-qubit ) operations such as cnots and single - qubit rotations .",
    "seo s are often represented as quantum circuits .",
    "this paper introduces qoperav v1.5 , a java application available for free .",
    "( source code included in the distribution . )",
    "the name  qoperav \" is an abbreviation of the phrase  quantum operator average \" , and is pronounced like the street ,  copper av . \" .",
    "qoperav is a  code generator \" for generating quantum circuits .",
    "the quantum circuits generated by qoperav can be used to evaluate with polynomial efficiency the average of @xmath0 for some simple ( that is , computable with polynomial efficiency ) function @xmath1 and a hermitian operator @xmath2 , provided that we know how to compile @xmath3 with polynomial efficiency .",
    "such averages arise , for example , in an algorithm described in ref.@xcite for evaluating partition functions with a quantum computer .",
    "apart from its usefulness as a code generator , qoperav is interesting in that it required very few lines of code to write , because it relies on classes that form part of a large class library that had been written previously .",
    "this class library has been used previously to construct many other applications ( for example , quansuite , qusann , multiplexor expander , and quibbs ) .",
    "qoperav implements an algorithm discussed in ref .",
    "the quantum circuit generated by qoperav includes some quantum multiplexors .",
    "the java application multiplexor expander ( see ref.@xcite ) allows the user to replace each of those multiplexors by a sequence of more elementary gates such as multiply controlled nots and qubit rotations .",
    "multiplexor expander is also available for free , including source code .",
    "the quantum circuit generated by qoperav is described in detail in ref.@xcite . using the notation of ref.@xcite , the circuit depends on the following inputs :    @xmath4 : : :    this is a positive integer .",
    "@xmath5 : : :    this is a positive integer .",
    "@xmath6 : : :    this is a positive real .",
    "@xmath7 : : :    this is a positive real . for @xmath8 , a quantum circuit for @xmath9 : : :    we call the unitary operator @xmath10 an  atom \"    and the @xmath4 qubits it acts on , the atom qubits . the    demonstration version of qoperav uses as an atom the circuit for an    @xmath4-qubit quantum fourier transform , and it raises the    atom to the @xmath11-th power by placing the atom inside a    loop that repeats @xmath11 times , but both this particular    atom and this method of raising the atom to a power can be changed    easily by subclassing the class of qoperav that defines this . in    particular , rather than raising the atom to a power by repeating the    atom circuit , the user could raise the atom to the    @xmath11-th power by replacing the parameter    @xmath7 by @xmath12 in the atom    circuit .   a quantum circuit for @xmath13 : : :    the unitary operator @xmath13 acts on the @xmath4    atom qubits . the demonstration version of qoperav uses for    @xmath13 the circuit for an @xmath4-qubit quantum    fourier transform , but this can be changed easily by subclassing the    class of qoperav that defines this .",
    "function @xmath14 : : :    the demonstration version of qoperav uses    @xmath15 , but this can be changed easily    by subclassing the class of qoperav that defines this .",
    "let @xmath16 and @xmath17 . the hermitian operator @xmath2 is assumed to have non - negative eigenvalues .",
    "furthermore , @xmath7 is assumed to be small enough that    a_x < for all eigenvalues @xmath18 of @xmath2 .",
    "furthermore , we assume that    0f ( ) 1 for @xmath19 .",
    "qoperav outputs 3 types of files : a log file , an english file and a picture file .",
    "a log file records all the input and output parameters that the user entered into the * control panel * ( see sec.[sec - control ] ) , so the user wo nt forget them .",
    "an english file gives an  in english \" description of a quantum circuit .",
    "it completely specifies the output seo .",
    "each line in it represents one elementary operation , and time increases as we move downwards in the file .",
    "a picture file partially specifies the output seo .",
    "it gives an ascii picture of the quantum circuit .",
    "each line in it represents one elementary operation , and time increases as we move downwards in the file .",
    "there is a one - to - one onto correspondence between the rows of corresponding english and picture files .",
    "english and picture files are used in many of my previous computer programs .",
    "i ve explained those files in detail in previous papers so i wo nt do so again here .",
    "see , for example , ref.@xcite for a detailed description of the content of those files and how to interpret that content .",
    "fig.[fig - qoper - av - main ] shows the * control panel * for qoperav .",
    "this is the main and only window of qoperav ( except for the occasional error message window ) .",
    "this window is open if and only if qoperav is running .",
    "file prefix : : :    prefix to the 3 output files that are written when the user presses    the * write files * button .",
    "for example , if the user inserts test in    this text field , the following 3 files will be written :    +    * test_qoa_log.txt this is a log file .",
    "* test_qoa_eng.txt this is an english file    * test_qoa_pic.txt this is a picture file .",
    "number of atom qubits : : :    this equals @xmath4 .",
    "number of probe qubits : : :    this equals @xmath5 .",
    "gamma : : :    this equals @xmath6 .",
    "delta t/(2*pi ) : : :    this equals @xmath20 .",
    "number of elementary operations : : :    this is the number of elementary operations in the output quantum    circuit .",
    "if there are no loops , this is the number of lines in the    english file , which equals the number of lines in the picture file .    for a loop ( assuming it is not nested inside a larger loop ) ,",
    "the  loop    k reps:@xmath21 \" and  next k \" lines are not counted , whereas    the lines between  loop k reps:@xmath21 \" and  next k \" are    counted @xmath21 times ( because reps:@xmath21 indicates    @xmath21 repetitions of the loop body ) .",
    "multiplexors expressed    as a single line are counted as a single elementary operation ( unless ,    of course , they are inside a loop , in which case they are counted as    many times as the loop body is repeated ) ."
  ],
  "abstract_text": [
    "<S> this paper introduces qoperav v1.5 , a java application available for free . </S>",
    "<S> ( source code included in the distribution . ) </S>",
    "<S> qoperav is a  code generator \" for generating quantum circuits . </S>",
    "<S> the quantum circuits generated by qoperav can be used to evaluate with polynomial efficiency the average of @xmath0 for some simple ( that is , computable with polynomial efficiency ) function @xmath1 and a hermitian operator @xmath2 , provided that we know how to compile @xmath3 with polynomial efficiency . </S>",
    "<S> qoperav implements an algorithm described in earlier papers , that combines various standard techniques such as quantum phase estimation and quantum multiplexors . </S>"
  ]
}