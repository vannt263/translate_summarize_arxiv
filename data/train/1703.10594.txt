{
  "article_text": [
    "we consider the dynamic version of the rank - maximal matching problem . in the rank - maximal matching problem",
    "we are given a bipartite graph @xmath5 , where @xmath6 is a set of applicants , @xmath7 is a set of posts and edges have ranks .",
    "an edge @xmath8 has rank @xmath9 if the post @xmath10 is one of the applicant @xmath11 s @xmath9th choices .",
    "a matching of the graph @xmath12 is said to be _ rank - maximal _ if it matches the maximum number of applicants to their rank one posts and subject to this condition , it matches the maximum number of applicants to their rank two posts , and so on . a rank - maximal matching can be computed in @xmath0 time , where @xmath1 denotes the number of applicants , @xmath2 the number of edges and @xmath3 the maximum rank of an edge in an optimal solution @xcite .    in the dynamic variant of the problem a new vertex",
    "may be added to the graph and we would like to maintain a rank - maximal matching .",
    "when the new vertex @xmath13 is added to the graph @xmath12 we assume that the graph @xmath12 itself does not change .",
    "in particular , if a new post @xmath10 arrives , the applicants of @xmath12 can not change their preferences over posts that are already included in @xmath12 .",
    "let us call the graph @xmath12 extended by @xmath13 and the edges incident to @xmath13 as the graph @xmath14 . in order to have a rank - maximal matching of @xmath14",
    ", we would like to be able to transform a rank - maximal matching @xmath15 of @xmath12 into a rank - maximal matching @xmath16 of @xmath14 , making only the smallest needed number of changes . in some cases a rank - maximal matching of @xmath12 is also rank - maximal in @xmath14 . if we have access to the reduced graphs @xmath17 of @xmath12 ( the notion is defined in @xcite and also recalled in section [ not ] ) and their edmonds - gallai decompositions , we show that we can always find a rank - maximal matching of @xmath14 in @xmath4 time . to be able to repeat the process when a yet new vertex arrives , we need to have the reduced graphs @xmath18 of @xmath14 and their edmonds - gallai decompositions .",
    "we show that we are able to update this information in @xmath4 time too .",
    "the reason for this being possible is that the reduced graphs of @xmath14 are in large part the same as the reduced graphs of @xmath12 and although the total size of the reduced graphs of @xmath12 is @xmath19 , the entire number of needed changes is @xmath4 .",
    "the construction of our algorithm requires a good grasp of the properties of the edmonds - gallai decomposition and a knowledge of the structure of rank - maximal matchings .",
    "the popular matching problem in the one - sided version is defined as follows .",
    "the input is the same as in the rank - maximal matching problem - we are given a bipartite graph @xmath12 , in which the vertices of one side of the graph express their preferences over the vertices of the other side .",
    "the goal is to find a _",
    "popular _ matching in @xmath12 , if it exists .",
    "a matching @xmath15 is said to popular if there exists no other matching @xmath20 such that @xmath20 is _ more popular _ than @xmath15 .",
    "a matching @xmath20 is more popular than @xmath15 if the number of applicants preferring @xmath20 to @xmath15 is greater than the number of applicants preferring @xmath15 to @xmath20 and an applicant @xmath11 prefers @xmath20 to @xmath20 if ( i ) he is matched in @xmath20 and unmatched in @xmath15 or ( ii ) he prefers the post @xmath10 assigned to him in @xmath20 to the one he gets in @xmath15 .",
    "not every instance of the problem admits a popular matching .",
    "nevertheless , abraham et al .",
    "@xcite gave an @xmath21 algorithm that computes a popular matching , if it exists .",
    "the algorithm is in a certain sense similar to the one computing a rank - maximal matching .",
    "it consists of two phases that are the same as in the algorithm for rank - maximal matchings , but the edges participating in the second phase are selected in some special way . to obtain a solution for a dynamic version of the popular matching problem , in which new vertices may be added to the graph",
    ", we can directly use the algorithm for the dynamic version of the rank - maximal matching by redefining appropriately rank two edges .",
    "thus we are able to update a popular matching in @xmath4 time after the arrival of a new vertex .",
    "we first state a few properties of maximum matchings in bipartite graphs .",
    "let @xmath22 be a bipartite graph and let @xmath15 be a maximum matching in @xmath12 . given a matching @xmath15 we can partition the vertex set of @xmath12 into three disjoint sets @xmath23 , @xmath24 and @xmath25 .",
    "nodes in @xmath23 , @xmath24 and @xmath25 are called _ even _ , _ odd _ and _ unreachable _ respectively and are defined as follows .",
    "a vertex @xmath26 is _ even _",
    "_ odd _ ) if there is an even ( resp .",
    "odd ) length alternating path in @xmath12 with respect to @xmath15 from an unmatched vertex to @xmath13 .",
    "a vertex @xmath26 is unreachable if there is no alternating path in @xmath12 with respect to @xmath15 from an unmatched vertex to @xmath13 . for vertex sets @xmath6 and @xmath27",
    ", we call an edge connecting a vertex in @xmath6 with a vertex in @xmath27 an @xmath28 edge . the following lemma is well - known in matching theory .    * edmonds - gallai decomposition ( eg - decomposition ) * @xcite [ eg ] + let @xmath15 be a maximum matching in @xmath12 and let @xmath23 , @xmath24 and @xmath25 be defined as above .    1",
    ".   the sets @xmath23 , @xmath24 , @xmath25 are pairwise disjoint 2 .",
    "let @xmath16 be any maximum matching in @xmath12 1 .",
    "@xmath16 defines the same sets @xmath23 , @xmath24 and @xmath25 2 .",
    "@xmath16 contains only @xmath29 and @xmath30 edges 3 .",
    "every vertex in @xmath24 and every vertex in @xmath25 is matched by @xmath16 4 .",
    "@xmath31 3 .",
    "there is no @xmath32 and no @xmath33 edge in @xmath12    throughout the paper we consider many graphs at once , thus to avoid confusion , for a given graph @xmath12 we denote the sets of even , odd and unreachable vertices as @xmath34 , @xmath35 and @xmath36 respectively .",
    "in this section we briefly recall known facts about rank - maximal matchings ( see @xcite for more details ) .",
    "an instance of the rank - maximal matching problem is a bipartite graph @xmath22 , where @xmath37 is a set of applicants , @xmath7 is a set of posts , and @xmath38 can be partitioned as @xmath39 . for each @xmath40",
    "the set @xmath41 consists of edges of rank @xmath9 and @xmath42 is a maximum rank any applicant assigns to a post .",
    "the * signature * of a matching @xmath15 is defined as an @xmath42-tuple @xmath43 where , for each @xmath44 , @xmath45 is the number of applicants @xmath46 such that @xmath47 .",
    "we define an ordering of matchings imposed by the lexicographical order of their signatures .",
    "let @xmath15 , @xmath20 be two matchings in @xmath12 .",
    "we denote @xmath48 if and only if @xmath49 .",
    "a matching @xmath15 in @xmath12 is * rank - maximal * if @xmath15 has the maximum signature under the ordering @xmath50 .",
    "the goal is to compute a rank - maximal matching of @xmath12 .",
    "below we recall irving et al.s algorithm @xcite for solving this problem .",
    "the pseudocode of the algorithm is denoted as algorithm [ alg1 ] . for the sake of convenience , for each applicant @xmath11 , we add a dummy last resort post @xmath51 of rank @xmath52 and refer to the modified instance as @xmath12 .",
    "note that every rank - maximal matching in a modified graph @xmath12 is applicant complete .",
    "denote @xmath53 for @xmath54 . on a high level the algorithm works as follows .",
    "we proceed iteratively and for @xmath55 compute a rank - maximal matching @xmath56 of @xmath57 . in order to do",
    "so we first build a reduced graph @xmath58 .",
    "the main idea is to construct @xmath58 so that every rank - maximal matching of @xmath57 is a maximum matching of @xmath58",
    ". then @xmath56 can be computed by augmenting @xmath59 in @xmath58 . in order to construct a reduced graph we first remove from @xmath60 all the edges which do not belong to any maximum matching of @xmath60 , afterwards we add @xmath41 to this graph , obtaining @xmath58 .",
    "the subset of edges to be removed from @xmath60 is identified with the help of lemma [ ? ] . once the reduced graph @xmath58",
    "is constructed we augment the matching @xmath59 in the graph @xmath58 and obtain @xmath56 , which can be proven to be a rank - maximal matching of @xmath57 .",
    "the algorithm proceeds in the iterative manner and eventually outputs a matching @xmath61 , which is rank - maximal in @xmath12 .",
    "@xcite algorithm [ alg1 ] computes a rank - maximal matching in @xmath62 time , where @xmath63 denotes a maximal - rank in the optimal solution .",
    "let @xmath65 be any maximum matching of @xmath66 determine a partition of the vertices of @xmath58 into the sets @xmath67 , @xmath68 and @xmath69 delete all edges in @xmath70 ( for @xmath71 ) which are incident on nodes in @xmath72 .",
    "these are the nodes that are matched by every maximum matching in @xmath58 .",
    "delete all @xmath73 and @xmath74 edges from @xmath58 .",
    "these are the edges that are not used by any maximum matching in @xmath58 .",
    "add the edges in @xmath75 and call the resulting graph @xmath76 .",
    "determine a maximum matching @xmath77 in @xmath76 by augmenting @xmath56 .",
    "@xmath61    the following invariants of algorithm [ alg1 ] are proven in @xcite .    1 .   for every @xmath44 , every rank maximal matching in @xmath57",
    "is contained in @xmath58 2 .",
    "the matching @xmath56 is rank - maximal of @xmath57 , and is a maximum matching in @xmath58 3 .",
    "if a rank - maximal matching in @xmath12 has signature @xmath78 then @xmath56 has signature @xmath79 4 .   the graphs @xmath58 ( @xmath54 ) constructed during the execution of algorithm [ alg1 ] are independent of the rank - maximal matching computed by the algorithm .",
    "let @xmath80 be an instance of the rank - maximal matching problem .",
    "we assume that we have already executed algorithm [ alg1 ] on @xmath12 and computed a rank - maximal matching in @xmath12 .",
    "additionally we assume that we store all the structures computed by the algorithm i.e. reduced graphs @xmath58 along with their eg - decompositions and matchings @xmath56 . at some point a new applicant @xmath81 arrives .",
    "let @xmath82 be a modified graph obtained by adding an applicant @xmath11 along with the information about his post preferences to @xmath12 .",
    "our goal in the dynamic version of the rank - maximal matching problem is to compute a rank - maximal matching in @xmath14 along with all the auxiliary structures that algorithm [ alg1 ] normally computes when it is executed on @xmath14 .",
    "we would like to refrain from executing algorithm [ alg1 ] on @xmath14 and solve the problem more efficiently .",
    "let us for each @xmath83 denote :    1 .",
    "@xmath84 2 .",
    "@xmath85 - reduced graphs computed by the algorithm [ alg1 ] given @xmath12 as an input 3",
    ".   @xmath56 - a rank maximal matching of @xmath57 4 .",
    "@xmath86 5 .",
    "@xmath87 - reduced graphs computed by the algorithm [ alg1 ] given @xmath14 as an input 6 .",
    "@xmath88 - a rank - maximal matching of @xmath89    note that reduced graphs @xmath58 and @xmath90 are uniquely defined for graphs @xmath12 , @xmath14 and do not depend on a particular execution of algorithm [ alg1 ] .    our goal is to compute graphs @xmath90 along with their eg - decompositions and matchings @xmath88 , assuming that we already have graphs @xmath58 , their decompositions and matchings @xmath56 without actually executing algorithm [ alg1 ] on @xmath14 .",
    "we call this problem the _ dynamic rank - maximal matching problem_.    in order to simplify the notation , from now on we are going to assume that the newly arriving applicant @xmath11 is already present in @xmath91 but it is isolated in @xmath12 ( incident only to his last resort post ) .",
    "before we describe our algorithm for the dynamic rank - maximal matching problem we would like to first introduce and solve a simplified variant of this problem .",
    "it will help us to build some intuition about the original problem .",
    "additionally the algorithm developed in this section will be used as a subroutine in the algorithm for dynamic rank - maximal matching problem .",
    "let @xmath22 be an instance of the rank - maximal matching problem and @xmath15 be a rank - maximal matching of @xmath12 .",
    "we assume that @xmath11 is an applicant which arrives to the graph and that @xmath14 is the new graph .",
    "our first simplifying assumption is that @xmath11 has only one edge incident on it ( excluding the edge to the last resort post ) .",
    "let @xmath92 be the neighbour of @xmath11 in @xmath14 and let @xmath93 .",
    "we further simplify the problem by slightly changing our goal . instead of computing a rank - maximal matching in @xmath14",
    "we are going to only determine if @xmath15 is a rank - maximal matching of @xmath14 .",
    "our goal is to solve this problem in @xmath94 time .",
    "seemingly this problem is far from the dynamic version described in the previous section , however it will be an important building block of an algorithm solving the original problem .",
    "the following is the main theorem of this section :    assume that we are given reduced graphs @xmath95 , their eg - decompositions and matchings @xmath65 , @xmath96 .",
    "there is an @xmath94 time algorithm to determine if @xmath15 is a rank - maximal matching of @xmath14 .",
    "before we give the proof of the above theorem we describe an important auxiliary lemma . in this lemma we examine how the maximum matching @xmath15 in a bipartite graph @xmath12 and its eg - decomposition change if we add one edge to @xmath12 .",
    "[ lemge ] let @xmath5 be a bipartite graph , @xmath15 a maximum matching of @xmath12 and @xmath97 and @xmath98 two vertices of @xmath12 such that @xmath99 and @xmath11 has type @xmath23 in the eg - decomposition of @xmath12 ( @xmath100 ) .",
    "then the graph @xmath101 has the following properties :    1 .",
    "if @xmath102 , then the edge @xmath8 belongs to every maximum matching of @xmath103 .",
    "a maximum matching of @xmath103 is of size @xmath104 .",
    "if @xmath105 , then the edge @xmath8 belongs to some maximum matching of @xmath103 but not to every one and @xmath15 remains a maximum matching of @xmath103 .",
    "additionally , the eg - decomposition of the graph @xmath103 is the same as that of @xmath12 .",
    "if @xmath106 , then the edge @xmath8 belongs to some maximum matching of @xmath103 but not to every one and @xmath15 remains a maximum matching of @xmath103 .",
    "additionally , the eg - decomposition of the graph @xmath103 is different from that of @xmath12 in the following way .",
    "a vertex @xmath107 belongs to @xmath108 ( respectively , @xmath109 ) if there exists an even - length ( corr .",
    ", odd - length ) alternating path starting with the edge @xmath8 and ending at @xmath13 .",
    "apart from this every vertex has the same type in the eg - decomposition of @xmath12 and @xmath103 , i.e. , if @xmath110 , then @xmath111 , where @xmath112 .",
    "note that the proof of property @xmath113 allows us to efficiently update the decomposition of the graph @xmath12 once the edge @xmath114 , where @xmath100 and @xmath106 is added to the graph .",
    "this can be done by a simple bfs search starting from @xmath10 .",
    "let @xmath115 , @xmath15 be a maximum matching of @xmath12 , @xmath116 and @xmath117 be a set of pairs @xmath118 none of which belongs to @xmath38 such that @xmath119 .",
    "then the @xmath120-decomposition of @xmath103 can be inferred from the @xmath120-decomposition of @xmath12 in time @xmath121 where @xmath122 .",
    "the above corollary is a straightforward consequence of lemma [ ? ] . in order to prove this corollary",
    "one can simply apply the lemma for each edge of the set @xmath117 . note that in order to update the decomposition we only need to perform one bfs search .",
    "below we describe the intuitions behind algorithm [ checkingalgorithm ] for solving the simplified version of the problem .",
    "recall that the original graph is denoted @xmath123 , the edge @xmath124 of rank @xmath125 is added and as a result we obtain @xmath126 .",
    "we will show that for each @xmath9 it is possible to efficiently deduce the structure of @xmath90 from the structure of @xmath58 without actually executing algorithm [ alg1 ] on the graph @xmath14 . from the pseudocode of algorithm [ alg1 ]",
    "we can easily see that for each @xmath9 such that @xmath127 we have @xmath128 , and that @xmath56 is a rank - maximal matching of @xmath89 .",
    "let us examine what happens in the phase @xmath125 of algorithm [ alg1 ] if we execute it on the graph @xmath14 .",
    "how do graphs @xmath129 and @xmath130 differ when we enter the loop @xmath131 in the line @xmath132 of the algorithm during phase @xmath125 ?",
    "one can easily see that either @xmath133 or @xmath134 holds .",
    "the latter case happens when the edge @xmath124 is removed from @xmath135 in some iteration @xmath136 as we can see in the following observation :    if @xmath137 , then @xmath138 does not belong to any rank - maximal matching of @xmath14 and each graph @xmath90 is the same as @xmath139 for every @xmath140 .    from now on",
    "we assume that @xmath141 .",
    "one can easily check that when we enter the loop @xmath131 in the line @xmath132 of algorithm [ alg1 ] we have @xmath133 ( it follows from the fact that @xmath11 is isolated in @xmath89 for @xmath142 , hence is even as well ) .",
    "we can use lemma [ lemge ] to obtain the information about the eg - decomposition of @xmath130 from the decomposition of @xmath129 .",
    "there are three cases depending on the type of @xmath92 in @xmath129 :    1 .",
    "if @xmath143 , then the edge @xmath124 belongs to every maximum matching of @xmath130 .",
    "one can deduce from invariants @xmath144 of the algorithm [ alg1 ] that in this case @xmath124 belongs to every rank - maximal matching of @xmath14 .",
    "if @xmath145 , then the eg - decomposition of @xmath130 is the same as that of @xmath129 .",
    "3 .   if @xmath146 , then the eg - decomposition of @xmath130 can be easily inferred from the eg - decomposition of @xmath129 .    note that if @xmath147 holds then we can halt the algorithm and claim that @xmath15 is not a rank - maximal matching of @xmath14 .",
    "the remaining two cases are slightly more complicated .",
    "consider the case @xmath113 first . from lemma [ lemge ]",
    "we can see that some vertices may belong to @xmath148 or @xmath149 . if a vertex @xmath150 ( resp .",
    "@xmath151 ) then we say that @xmath13 changes its type from @xmath25 to @xmath23 ( resp .",
    "@xmath24 ) in the phase @xmath125 .",
    "what implications does this fact have on the execution of algorithm [ alg1 ] on @xmath14 ?",
    "note that in lines @xmath152 and @xmath153 of algorithm [ alg1 ] we remove some edges incident to vertices of types @xmath24 and @xmath25 .",
    "if changes its type from @xmath25 to @xmath23 in phase @xmath125 then some edges incident to @xmath13 were deleted in the phase @xmath125 during the execution of algorithm [ alg1 ] on @xmath12 , but these edges should not be deleted in the phase @xmath125 during the execution of algorithm [ alg1 ] on @xmath14 .",
    "we call such edges _ activated _ edges .    the main idea behind",
    "this part of the algorithm is to maintain sets of activated edges so that in any phase @xmath154 a reduced graph @xmath155 is obtained from @xmath156 by adding to this graph a certain subset of edges activated in phases preceding the phase @xmath125 .",
    "the eg - decomposition of @xmath155 is then computed with the aid of decompositions of @xmath156 and @xmath157 .",
    "the main difference is that in the phase @xmath125 graphs @xmath129 and @xmath130 differ by exactly one edge , whereas in the phase @xmath158 the graph @xmath155 may potentially contain multiple activated edges .",
    "a suitable generalisation of lemma [ lemge ] allows us to determine the eg - decomposition of @xmath155 .",
    "[ lemge2 ] let @xmath5 be a bipartite graph , @xmath15 a maximum matching of @xmath12 and + @xmath159 the set of edges none of which belongs to the present set of edges @xmath38",
    ". additionally each @xmath160 belongs to @xmath6 , each @xmath161 belongs to @xmath7 and each @xmath160 belongs to @xmath34 in the eg - decomposition of @xmath12 .",
    "the edges in @xmath162 need not be vertex disjoint .",
    "let @xmath163 .",
    "there is an algorithm which can correctly distinguish between the following two situations :    1 .",
    "maximum matching of @xmath164 is of size at least @xmath165 .",
    "2 .   @xmath15 remains a maximum matching of @xmath164 .",
    "if @xmath166 occurs then the algorithm runs in @xmath94 time .",
    "if @xmath167 occurs then the algorithm additionally determines the eg - decomposition of @xmath164 and runs in time @xmath168 , where @xmath169 .",
    "it remains to consider the case @xmath170 .",
    "we already know from lemma [ lemge ] that the presence of @xmath124 in @xmath130 does not affect its eg - decomposition .",
    "it turns out however that if for some @xmath154 we have @xmath171 but @xmath172 then the presence of @xmath124 in @xmath14 might affect the eg - decomposition of @xmath155 , but will not have any impact on the decompositions of graphs @xmath173 for @xmath174 .",
    "such edges are called _ frozen _ edges . intuitively if an edge is frozen in the phase",
    "@xmath125 then it means that we can ignore it until some phase @xmath158 when it becomes activated and may potentially affect the decomposition of @xmath155 .    to summarize , in each phase",
    "@xmath175 the graph @xmath155 is obtained from @xmath156 and some subset of activated edges .",
    "then we use lemma [ lemge2 ] to obtain the eg - decomposition of @xmath155 . if we detect that the maximum matching of @xmath155 is larger than that of @xmath156 .",
    "then we halt the algorithm and claim that @xmath15 is not a rank - maximal matching in @xmath14 .",
    "if @xmath15 is still a maximum matching in @xmath155 then we activate a suitable subset of edges and proceed to the next phase .",
    "if we reach the phase @xmath52 then @xmath15 is a rank - maximal matching in @xmath14 .    in the following theorem",
    "we prove that algorithm [ checkingalgorithm ] correctly determines graphs @xmath176 and their eg - decompositions .    for each @xmath177 when we finish executing the line @xmath178 of the algorithm [ checkingalgorithm ] the following invariants hold :    1 .",
    "@xmath56 is a maximum matching of @xmath90 2 .",
    "@xmath179 and @xmath180 are the sets of vertices reachable by even ( resp .",
    "odd ) length @xmath181-alternating paths in @xmath182 from @xmath11 .",
    "@xmath183 , @xmath184 and @xmath185 4 .",
    "if there is an edge @xmath186 of rank @xmath71 such that @xmath187 and it is normally deleted from @xmath164 during the execution of algorithm [ alg1 ] in the phase @xmath9 then @xmath188    moreover if the algorithm returns @xmath189 either in line @xmath152 or @xmath190 then @xmath61 is not a rank - maximum matching of @xmath14 .",
    "@xmath191   ( a new vertex ) @xmath192  activated vertices @xmath193  activated edges @xmath194 @xmath195 @xmath196 @xmath197 @xmath198    @xmath199 @xmath200 @xmath201 @xmath202 @xmath203    @xmath204    @xmath205    @xmath206    return @xmath207 return `` @xmath207 is not a rank - maximal matching of @xmath14 ''",
    "in this section we want to look closer at the situation when a rank - maximal matching of @xmath12 is _ not _ a rank - maximal matching of @xmath14 .",
    "this happens when at some point algorithm [ checkingalgorithm ] in line 20 encounters an edge @xmath208 such that @xmath13 belongs to @xmath209 and @xmath210 belongs to @xmath67 and thus it executes line 21 and outputs as `` false '' . in other words , it is when the maximum matching in the reduced graph @xmath90 is larger by one than the maximum matching in the reduced graph @xmath58 .",
    "let us examine three such examples depicted in figure [ augfig ] . here",
    "the edge @xmath138 is of rank one and the edge @xmath211 of rank @xmath212 .",
    "vertex @xmath213 belongs to @xmath214 and @xmath215 belongs to @xmath216 - thus algorithm [ checkingalgorithm ] outputs the answer `` false '' .",
    "this means that in @xmath217 there exists an @xmath218-augmenting path containing the edges @xmath138 and @xmath211 .",
    "however , in order to obtain a rank - maximal matching @xmath16 of @xmath14 , we would like to carry out the augmentation as late as possible .",
    "in fact , once we know that a rank - maximal matching of @xmath12 is not a rank - maximal matching of @xmath14 and the augmentation in some phase @xmath9 is inevitable , we want to postpone augmenting @xmath88 and thus changing @xmath16 till the last phase .    in the first example of figure [ augfig ]",
    ", we can notice that the vertex @xmath215 belongs to @xmath67 for every @xmath9 such that @xmath219 and that the graph @xmath220 together with the edges @xmath138 and @xmath211 still contains an augmenting path containing @xmath138 and @xmath211 .",
    "what is more , this augmenting path was already present in the graph @xmath221 .",
    "we can check that after applying it we obtain a rank - maximal matching of @xmath222 .    in the second example of figure [ augfig ]",
    ", the vertex @xmath215 belongs to @xmath67 for every @xmath9 such that @xmath219 and it belongs to @xmath223 .",
    "thus @xmath224 does not contain any augmenting paths and we are stuck with a matching @xmath225 which is not rank - maximal in @xmath226 .",
    "we observe that if we had augmented @xmath227 in the graph @xmath228 obtaining a rank - maximal matching @xmath229 of @xmath222 , then one of the edges of rank @xmath230 would not be present in the maximum matching of @xmath224 if we computed it by augmenting @xmath229 .",
    "so , in order to get a rank - maximal matching of @xmath226 from @xmath225 we should `` undo '' one of the augmentations that was carried out in phase @xmath230 . using matching terminology",
    "we should apply any even length @xmath225-alternating path starting at @xmath11 and containing @xmath211 and one of the edges of rank @xmath230 belonging to @xmath225 .    in the third example of figure [ augfig ] , the vertex @xmath215 belongs to @xmath67 for every @xmath9 such that @xmath231 and it belongs to @xmath232 .",
    "so we wait until @xmath215 becomes unreachable . in the example",
    ", the vertex @xmath215 becomes unreachable in @xmath233 .",
    "now the scenario becomes similar to the second example .",
    "so we apply an alternating path of even length starting at @xmath11 and containing @xmath211 and one of the edges of rank @xmath230 .",
    "[ augfig ]    . ]    . ]    . ]",
    "we will now prove formally that in such two types of scenarios the described approach is correct , i.e. although we discover that @xmath15 is not a rank - maximal matching of @xmath14 already in some phase @xmath9 , we can afford to wait till some later phase @xmath234 and apply either an augmenting path or an even length alternating path in the graph @xmath235 .",
    "we say that a graph @xmath12 is _ reduced _ if it does not contain any edge @xmath236 such that either both @xmath237 and @xmath13 belong to @xmath35 or exactly one of the vertices belongs to @xmath36 and the other one to @xmath35 .",
    "the correctness of the approach consisting in applying one augmenting path or one even - length alternating path follows from the following two lemmas .",
    "[ biglemma ] let @xmath5 be a reduced bipartite graph and @xmath238 a connected component of @xmath12 that contains exactly one free vertex of @xmath6 in a maximum matching of @xmath12 .",
    "let @xmath239 and @xmath240 denote two new sets of edges such that each endpoint of a new edge belongs to @xmath34 .",
    "also , each edge of @xmath241 connects a vertex of @xmath242 with a vertex not contained in @xmath238 and each edge of @xmath240 connects two vertices not belonging to @xmath238 .",
    "let @xmath243 and @xmath14 denote respectively @xmath244 and @xmath245 .",
    "let @xmath246 denote the number of edges of a maximum matching of @xmath12 and @xmath247 the maximum number of edges of @xmath240 contained in a maximum matching of @xmath248 .",
    "then we have :    1 .   [ biglemma1 ] if there exists @xmath9 such that @xmath249 , then : 1 .   every maximum matching of @xmath14 contains @xmath246 edges of @xmath38 , @xmath247 edges of @xmath240 and one edge of @xmath241 .",
    "2 .   the edge @xmath250 such that @xmath249 belongs to some maximum matching of @xmath14 .",
    "no edge @xmath251 such that @xmath252 belongs to a maximum matching of @xmath14 .",
    "2 .   if there exists no @xmath9 such that @xmath249 , then : 1 .   [ biglemma4a ] every maximum matching of @xmath14 is either a maximum matching of @xmath248 or contains @xmath246 edges of @xmath38 , @xmath253 edges of @xmath240 and one edge of @xmath241 .",
    "[ biglemma4b ] every edge @xmath254 belongs to some maximum matching of @xmath14 .",
    "a maximum matching of @xmath14 that contains @xmath251 can be obtained from any maximum matching of @xmath248 by applying any even length alternating path in @xmath14 starting at a free vertex of @xmath180 , containing @xmath251 and an odd number of edges from @xmath240 . additionally , if @xmath255 , then it ends at a vertex @xmath256 .",
    "the endpoint of any such alternating path belongs to @xmath257 .",
    "3 .   let @xmath255 .",
    "then every alternating path in @xmath14 that starts at a free vertex of @xmath180 , contains @xmath258 and ends at a vertex @xmath256 , contains an odd number of edges from @xmath240 and has even length .",
    "[ corollary ] suppose that @xmath207 is a rank - maximal matching of @xmath259 and @xmath260 is a corresponding reduced graph .",
    "thus @xmath207 is a maximum matching of @xmath260 .",
    "let @xmath238 be a bipartite graph disjoint from @xmath12 that contains exactly one free vertex @xmath261 in a certain maximum matching @xmath262 of @xmath238 .",
    "let @xmath263 .",
    "let @xmath264 be an edge of rank @xmath42 such that @xmath265 , @xmath266 .",
    "assume also that for every @xmath262-alternating path @xmath267 beginning at @xmath261 and ending at @xmath11 the matching @xmath268 is a rank - maximal matching of @xmath238 .",
    "let @xmath14 denote the graph @xmath269 .",
    "then :    1 .",
    "if @xmath10 belongs to @xmath67 for each @xmath270 , then the rank - maximal matching of @xmath14 can be obtained from the rank - maximal matching of @xmath271 by applying an augmenting path containing @xmath186 in the graph @xmath272 .",
    "if @xmath10 belongs to @xmath67 for each @xmath273 and it belongs to @xmath274 , then the rank - maximal matching of @xmath14 can be obtained from the rank - maximal matching of @xmath271 by applying in the graph @xmath272 an even length alternating path starting at @xmath261 and containing the edge @xmath186 as well as an odd number of edges of rank @xmath275 contained in @xmath276 .",
    "in this section we present the algorithm for computing a rank - maximal matching of @xmath14 .",
    "it consists of subsequent phases that either correspond to a ",
    "non - augmentation ",
    "phase described in section [ not ] or to an  augmentation ",
    "phase from the previous section .",
    "@xmath277 denotes the set of vertices that are alive at the beginning of phase @xmath9 , i.e. @xmath278 iff @xmath279 .",
    "graphs @xmath280 denote sth in between @xmath89 and @xmath90 , i.e. @xmath281 . a matching @xmath56 denotes a rank - maximal matching of @xmath57 .",
    "also , for each @xmath282 the matching @xmath56 is contained in @xmath283 .",
    "@xmath284 , i.e. , @xmath285 are the edges of rank @xmath9 of @xmath14 .",
    "@xmath288 an @xmath207-alternating path in @xmath238 that starts at @xmath261 , ends at @xmath289 @xmath290 @xmath291  an @xmath56-augmenting path in @xmath292 that starts at @xmath261 , ends at @xmath293 and + contains @xmath186 @xmath291  an @xmath56-alternating path in @xmath292 that starts at @xmath261 , ends at @xmath294 and + contains @xmath186 @xmath295 ( a rank - maximal matching of @xmath296 ) return @xmath297"
  ],
  "abstract_text": [
    "<S> given a bipartite graph , where the two sets of vertices are applicants and posts and ranks on the edges represent preferences of applicants over posts , a _ </S>",
    "<S> rank - maximal _ matching is one in which the maximum number of applicants is matched to their rank one posts and subject to this condition , the maximum number of applicants is matched to their rank two posts , and so on . a rank - maximal matching can be computed in @xmath0 time , where @xmath1 denotes the number of applicants , @xmath2 the number of edges and @xmath3 the maximum rank of an edge in an optimal solution @xcite .    </S>",
    "<S> we study the dynamic version of the problem in which a new applicant or post may be added to the graph and we would like to maintain a rank - maximal matching . we show that after the arrival of one vertex , we are always able to update the existing rank - maximal matching in @xmath4 time . </S>",
    "<S> moreover , we are able to do that in such a way that the number of alterations is minimized . the time bound can be considered optimal under the circumstances , as improving it would imply a better running time for the rank - maximal matching problem .    as a by - product we show also the analogous result for the dynamic version of the ( one - sided ) popular matching problem . </S>"
  ]
}