{
  "article_text": [
    "this paper is an investigation into the semantics of imperative programs , using a style of model first proposed by reddy  @xcite .",
    "reddy s model was a significant development , because it was the first to model imperative programs without the use of an explicit semantic entity representing the store .",
    "instead , programs are interpreted as `` objects '' ( in reddy s terminology ) which exhibit history - sensitive behaviour .",
    "the store is not modelled explicitly ; instead one models the behaviour that results from the use of the store .",
    "this new approach turned out to be the key to finding models that are _ fully abstract _ : that is , models whose equational theory coincides with the operationally defined notion of program equivalence .",
    "the first such models for higher - order imperative programming languages to be discovered were based on game semantics  @xcite .",
    "although these models used several ideas from reddy s work , it was not known whether reddy s model was itself fully abstract for the language @xmath0 which it interprets .    in this paper ,",
    "some of which is a much extended exposition of work first presented in  @xcite , we show that reddy s model is indeed fully abstract .",
    "but more than this , we argue that it arises from a straightforward modification of scott s well - known @xmath1 graph - model of the @xmath2-calculus  @xcite .",
    "just as in scott s work , we develop a model in which every type - object appears as a retract of a universal object , and it turns out that these retractions are all definable in a slightly extended sci  language . thus the language has a _ universal type _ , which leads to a very cheap proof of full abstraction . with some additional effort",
    ", we show that the extensions required to establish this universal type are in fact conservative , that is , they do not alter the notion of program equivalence .",
    "therefore the original model is itself fully abstract .",
    "we should remark that the work required to establish conservativity of one of these extensions amounts to a partial definability result which would be enough to prove full abstraction of the original model directly ; indeed , that is what was done in  @xcite .",
    "nevertheless , we believe that the presentation in terms of conservativity is useful , not least because of the ease of establishing full abstraction for the extended language .      the utility of a universal type for establishing properties of a model is well - known , and",
    "was explained in detail by longley  @xcite .",
    "the central idea of this paper , of modifying scott s graph model to record slightly different information , has also been used by longley in  @xcite to obtain a model of fresh name generation .",
    "a similar model construction has been investigated by hyland et al .",
    "we shall remark further on the connections between these papers and our present work below , although we leave closer investigation for future work .",
    "the denotational semantics of @xmath0 was first treated by ohearn  @xcite using functor categories .",
    "reddy s model  @xcite was the first to avoid the explicit use of a store - component in the mathematical model , but as mentioned above this model was not known to be fully abstract until a preliminary version of the work being reported here appeared  @xcite .",
    "joint work of the present author and wall  @xcite developed a game semantics for @xmath0 and established a full abstraction result .",
    "laird  @xcite analysed the fully abstract relational model to show that equivalence of programs in a finitary fragment of @xmath0 is decidable , but observational approximation is not , and went on to construct a fully abstract games model of a version of @xmath0 with control operators , establishing decidability of both equivalence and approximation .",
    "the @xmath0 type system itself has been refined and extended in two ways : first by reynolds , using intersection types  @xcite , and then by ohearn et al .",
    "@xcite , using a novel system with two - zone type judgements .",
    "the author is very grateful to the many researchers with whom he has discussed this work , including martin churchill , jim laird , john longley , ana carolin martins , peter ohearn , john power and uday reddy .",
    "the comments of anonymous referees were very useful in the preparation of the final version of the paper .",
    "the author also benefitted from the support of two epsrc research grants during the development and preparation of this paper .",
    "we begin with a brief review of scott s _ @xmath1 graph model _ of the @xmath2-calculus , which appeared in the seminal paper _ data types as lattices",
    "_  @xcite .",
    "let @xmath1 denote the lattice of sets of natural numbers , ordered by inclusion .",
    "a continuous function @xmath3 is determined by its action on finite sets .",
    "therefore , such an @xmath4 is determined by the set @xmath5 conversely , let @xmath6 be a set of pairs @xmath7 with @xmath8 and @xmath9 .",
    "we can define a continuous function @xmath10 by @xmath11 and it is clear that for any continuous @xmath4 , @xmath12 .",
    "let @xmath13 be any injective encoding @xmath14 writing @xmath15 $ ] for the complete partial order of continuous functions from @xmath1 to itself , the mapping @xmath16 is a continuous function @xmath15 \\rightarrow { \\mathcal{p}\\omega}$ ] , and @xmath17 is a continuous function @xmath18 $ ] .",
    "these two mappings therefore form a retraction @xmath19 { \\unlhd}{\\mathcal{p}\\omega}\\ ] ] in the category of domains and continuous functions , so that @xmath1 is a reflexive object in this category , and thus a model of untyped @xmath2-calculus . for more details on how reflexive objects are used to model @xmath2-calculus , see barendregt  @xcite .",
    "scott in fact worked in the other direction : from the @xmath1 model he defined a category in which to work , using the _ karoubi envelope _ ( see for example  @xcite ) of the monoid of endomorphisms of @xmath1 .",
    "one way of presenting this monoid is as follows .",
    "its elements are graphs of continuous functions from @xmath1 to itself ; explicitly , an element @xmath20 is a set of pairs @xmath21 , where @xmath22 and @xmath9 , such that @xmath23 ( it is easy to verify that these are exactly the image of the @xmath24 function . ) the monoid operation is the graph representation of function composition , which can be defined by @xmath25 the karoubi envelope of this monoid is the category whose objects are idempotents , elements @xmath20 such that @xmath26 , and maps @xmath27 are elements of the monoid such that @xmath28 .",
    "scott shows that this is a cartesian closed category and notes that it is equivalent to the category of separable continuous lattices and continuous maps .",
    "a similar theory yielding a category of cpos was developed by plotkin  @xcite . in this paper",
    ", we will show that replacing the finite _ sets _ @xmath29 in the above construction with finite _ sequences _ yields a category appropriate for modelling imperative computation .",
    "the monoid in question has as its elements set of pairs @xmath30 where @xmath31 is a finite sequence of natural numbers and @xmath32 is a natural .",
    "multiplication is defined by @xmath33 where @xmath34 denotes the concatenation of the sequences @xmath35 and we identify singleton sequences with their unique elements .",
    "let us call this monoid @xmath36 and its karoubi envelope @xmath37 . concretely",
    ", the connection between @xmath36 and scott s monoid is very straightforward : sequences replace scott s finite sets , and concatenation replaces union .",
    "it seems obvious that the move from scott s construction to ours is nothing more than replacing one monad , the monad of finite powerset , with another , that of finite sequences , in some formal construction .",
    "in fact the situation is not quite so straightforward : in order to set things up in an axiomatic fashion , one appears to require a distributive law of the monad at hand over the powerset monad .",
    "while the monad of finite sequences does distribute over @xmath38 , @xmath39 does not .",
    "this situation has been studied by hyland et al .  in  @xcite , where models along the lines of scott s are built axiomatically , using a kleisli - category construction .",
    "their work only applies to commutative monads , and therefore not to the finite - sequence monad , so is not directly applicable here .",
    "moreover , for our purposes neither the category @xmath37 nor the kind of kleisli construction proposed by hyland et al . provides the most convenient setting in which to work .",
    "although our model of imperative computation can be seen as living entirely within these categories , we shall propose a somewhat different construction which yields additional structure useful in the analysis of the model .",
    "we note also that longley has recently shown how a similar category , built from an untyped graph - style model using the monad of finite multisets , as opposed to finite sets or finite sequences , provides a model of fresh name generation  @xcite . in future work , we plan to investigate the relationships between all these models in greater detail , and explore the constructions at the higher level of generality proposed by hyland et al .",
    "the imperative language we shall model is reynolds s _ syntactic control of interference _ ( sci )  @xcite , and this section is devoted to the presentation of its syntax , operational semantics and notion of program equivalence .",
    "the language was introduced by reynolds as an approach to the problem of establishing the non - interference properties of procedures and their arguments required by specification logic .",
    "reddy noticed that it was precisely this interference - free fragment of an algol - like language which his model could interpret .",
    "later , reddy and ohearn showed that the model could be extended to a full algol - like language by means of the yoneda embedding  @xcite , but it was not until the refinement of game semantics was discovered that a fully abstract model for such a language became available .",
    "the sci  language consists of a direct combination of the language of while - loops , local variable allocation and the simply - typed @xmath2-calculus with an affine type discipline .",
    "the types of sci   are given by the grammar @xmath40 where the base types are those of natural numbers ( @xmath41 ) , commands ( @xmath42 ) and assignable variables ( @xmath43 ) .",
    "the terms of the language are as follows .",
    "@xmath44 where @xmath32 ranges over the natural numbers , @xmath45 over a countable set of identifiers , and @xmath46 over the types of sci .",
    "we adopt the usual conventions with regard to binding of identifiers : @xmath47 binds @xmath45 in @xmath48 ; terms are identified up to @xmath49-equivalence ; and @xmath50 $ ] denotes the capture - avoiding substitution of @xmath51 for free occurrences of @xmath45 in @xmath48 .",
    "the type system of the language imposes an affine discipline on application : no function is allowed to share free identifiers with its arguments .",
    "typing judgments take the form @xmath52 where the @xmath53 are distinct identifiers , the @xmath54 and @xmath46 are types , and @xmath48 is a term .",
    "we use @xmath55 and @xmath56 to range over contexts , that is , lists @xmath57 of identifier - type pairs with all identifiers distinct .",
    "the well - typed terms are given by the following inductive definition , in which it is assumed that all judgments are well - formed .    1 .   -12",
    "pt**@xmath2-calculus:**@xmath58 + @xmath59 + @xmath60 2 .   -12",
    "pt**structural rules:**@xmath61 + @xmath62 3 .",
    "-12 pt**arithmetic:**@xmath63 4 .   -12",
    "pt**sequential composition:**@xmath64 5 .   -12",
    "pt**assignable variables:**@xmath65 6 .   -12",
    "pt**control structures:**@xmath66 + @xmath67 7 .   -12",
    "pt**local blocks:**@xmath68    in the exchange rule , @xmath69 denotes any permutation of the list @xmath55 . in the rule for application , the assumption that the conclusion is well - formed implies that @xmath55 and @xmath56 contain distinct identifiers",
    "this was key to reynolds s interference control agenda : in the absence of a contraction rule , the only source of identifier aliasing in the language is through procedure application , so by enforcing the constraint that procedures and their arguments have no identifiers in common , one eliminates all aliasing .",
    "it then follows that program phrases with no common identifiers can not interfere with one another .",
    "[ [ note ] ] note + + + +    our version of sci  allows side - effects at all base types : see the typing rule for sequential composition .",
    "we also include a conditional at all base types .",
    "variable allocation , however , is restricted to blocks of type @xmath42 and @xmath41 : terms such as @xmath70 are not permitted , because any sensible operational semantics for such terms would violate the stack discipline for allocation and deallocation of variables .",
    "the operational semantics of the language is given in terms of _ stores _ , that is , functions from identifiers to natural numbers .",
    "a store @xmath71 has as its domain a finite set of identifiers , @xmath72 .",
    "given a store @xmath71 , we write @xmath73 for the store with domain @xmath74 which maps @xmath45 to @xmath32 and is identical to @xmath71 on other identifiers .",
    "note that this operation may extend the domain of @xmath71 .",
    "operational semantic judgments take the form @xmath75 where    1 .",
    "@xmath55 is a context containing only @xmath43-type identifiers 2 .",
    "@xmath71 and @xmath76 are stores whose domain is exactly those identifiers in @xmath55 3 .   @xmath48 and @xmath77 are terms 4 .",
    "@xmath46 is a type 5 .",
    "@xmath78 and @xmath79 6 .",
    "@xmath77 is a _ value _ ,",
    "that is , a natural number , the constant @xmath80 , an identifier ( which must have type @xmath43 ) or a @xmath2-abstraction .    for the sake of brevity",
    "we omit the typing information from the inductive definition below , writing judgments of the form @xmath81 .    1 .",
    "-12 pt**values and functions:**@xmath82 { \\mathbin{\\downarrow}}\\sigma '' , v \\justifies \\sigma , mn { \\mathbin{\\downarrow}}\\sigma '' , v \\end{prooftree}\\ ] ] 2 .   -12 pt**operations:**@xmath83 3 .   -12 pt**variables:**@xmath84 4 .   -12 pt**control structures:**@xmath85 + @xmath86 + @xmath87 + @xmath88 @xmath89 5 .   -12",
    "pt**local blocks:**@xmath90    note that in the rule for local blocks , the well - formedness constraints on the conclusion @xmath91 mean that the domains of definition of @xmath71 and @xmath76 are the same , and do not include @xmath45 .",
    "therefore the variable @xmath45 is only available during the execution of the block @xmath48 .",
    "we remark that , though the operational semantics takes account of the possibility that evaluating a term of function - type could change the store , the fact that all the store - changing term constructs are confined to the base types means that this does not happen : whenever @xmath81 for some @xmath48 and @xmath77 of type @xmath92 , we have @xmath93 as a straightforward induction will establish .",
    "we now define a notion of _ contextual equivalence _ on programs in the usual way : given terms @xmath94 , we say that @xmath48 and @xmath51 are contextually equivalent , and write @xmath95 , if and only if for every context @xmath96 $ ] such that @xmath97 , c[n ] : b$ ] for @xmath98 , and every value @xmath99 ,",
    "@xmath100 { \\mathbin{\\downarrow}}v \\iff c[n]{\\mathbin{\\downarrow}}v.\\ ] ] ( we omit the unique store over no variables from the operational semantic judgments . )    one can also define a _ contextual preorder _ : given the same data as above , we write @xmath101 iff for all contexts @xmath96 $ ] and values @xmath77 , @xmath100 { \\mathbin{\\downarrow}}v \\longrightarrow c[n]{\\mathbin{\\downarrow}}v.\\ ] ]",
    "in this section we give a direct , concrete definition of a semantics for sci  which accords with the model given by reddy  @xcite . to begin with",
    "we define the model without imposing any structure on it , simply using sets and relations .",
    "later we go on to construct a category in which our modified graph model lives as a monoid of endomorphisms of a particular object , and show that the model of sci  inhabits that category .",
    "we shall then exploit the structure of the category to obtain a clean proof of the model s soundness .",
    "however , for pedagogical reasons we believe the concrete presentation of the model in this section is worthwhile . in particular , for the fragment of the language without abstraction and application ,",
    "the model is very simple and intuitively appealing , and its soundness is easy to establish .",
    "the key idea behind reddy s model is that computations are interpreted not as mappings from initial to final states ( _ state transformers _ ) , but using sequences of observable _ events_. a program will have as its denotation a set of tuples of such sequences .",
    "a type is interpreted as a set : the set of observable events at that type .",
    "we define the semantics of types as follows .",
    "@xmath102 where @xmath103 denotes the set of finite sequences over @xmath104 .    the basic event one can observe of a term of type @xmath41 is the production of a natural number , so @xmath105 is the interpretation of @xmath41 .",
    "a closed term of type @xmath42 can do nothing interesting apart from terminating when executed , so @xmath42 is interpreted as a singleton set : we will see later that it is the open terms of type @xmath42 which behave more like state - transformers . at the type @xmath43 , there are two kinds of event : @xmath106 events correspond to dereferencing a variable and receiving @xmath32 as the result , and @xmath107 events correspond to assigning @xmath32 to the variable , and observing termination of this operation .    for the function types ,",
    "the idea is that a single use of a function @xmath108 will result in a single observable output event from @xmath109 , but may give rise to a sequence of events in the argument of type @xmath46 . compare and contrast with scott s @xmath1 model : there functions are modelled as sets of pairs @xmath21 where @xmath29 is a set of input - observations and @xmath32 is an output , while here we have sets of pairs @xmath30 where the input observations form sequences rather than sets .",
    "the denotation of a term @xmath110 will be a set of tuples @xmath111 where each @xmath112 and @xmath113 .",
    "again the idea is that such a tuple records the ability of @xmath48 to produce observable event @xmath114 while itself observing the sequences @xmath115 of events in ( the terms bound to ) its free identifiers .",
    "note that , in this model , the observed behaviour in each variable is recorded separately ; that is , there is no record of how interactions with the various variables are interleaved .",
    "it is precisely this which means we can only model sci  rather than the full idealized algol language .",
    "the models based on game semantics refine the present model by breaking each event into two , a start and a finish , and recording the interleaving between actions , thereby overcoming this limitation .",
    "a little notation must be introduced before we give the definition of the semantics .",
    "we will abbreviate such tuples @xmath116 as @xmath117 , and semantic elements as above will become @xmath118 , or simply @xmath114 when @xmath119 .",
    "we use @xmath120 to denote the componentwise concatenation of the tuples of sequences @xmath116 and @xmath121 .",
    "we say that a sequence @xmath122 is a _ cell - trace _ iff every @xmath123 action in @xmath31 carries the same value as the most recent @xmath124 , if any , and zero if there has been no @xmath124 yet .",
    "( a formal definition appears later . )",
    "we now give the definition of the semantics by induction on the typing derivation of terms : for each typing rule , figure  [ fig : semantics ] gives an equation which defines the semantics of the term in the rule s conclusion by reference to the semantics of the terms in its hypotheses .",
    "@xmath125[l]{\\hspace{-15ex}$    \\ {      ( s_1 , \\ldots , s_n , ( s , b ) ) \\mid       ( s_1 , \\ldots , s_n , s , b ) \\in \\sem{\\gamma , x : a \\vdash m : b }    \\}$}\\\\    \\sem{\\gamma , \\delta \\vdash mn : b } & = & \\\\",
    "\\makebox[0pt][l]{\\hspace{-15ex}$    \\left\\ {      ( \\vec{s } , \\vec{t^1}\\ldots\\vec{t^k } ,   b ) \\left|      \\begin{array}{l }     \\exists a_1 , \\ldots , a_k .   ( \\vec{s } , ( a_1 \\ldots a_k , b ) ) \\in \\sem{\\gamma \\vdash",
    "m : a\\llto b}\\\\     \\land ( \\vec{t^i } , a_i )",
    "\\in \\sem{\\delta\\vdash n : a}~\\mbox{for}~i=1,\\ldots , k",
    "\\\\     \\end{array}\\right . \\right\\}$ } \\\\",
    "\\sem{\\gamma , x : a\\vdash m : b } & = & \\{(\\vec{s } , { \\varepsilon } , b ) \\mid    ( \\vec{s},b)\\in\\sem{\\gamma \\vdash m : b } \\}\\\\",
    "\\sem{\\widetilde{\\gamma } \\vdash m : a } & =   & \\ { ( \\widetilde{\\vec{s } } ,    a ) \\mid ( \\vec{s},a ) \\in",
    "\\sem{\\gamma \\vdash m : a } \\}\\\\    \\sem{\\vdash n:{\\mathtt{nat } } } & = & \\{n\\}\\\\    \\sem{\\gamma \\vdash m_1 \\odot m_2:{\\mathtt{nat } } } & = & \\\\ \\makebox[0pt][c]{\\hspace{35ex}$   \\ { ( \\vec{s } \\vec{s ' } , m_1 \\odot m_2 ) \\mid       ( \\vec{s } , m_1 ) \\in \\sem{\\gamma\\vdash m_1:{\\mathtt{nat } } } , ( \\vec{s ' } , m_2)\\in      \\sem{\\gamma \\vdash m_2:{\\mathtt{nat}}}\\}$ } \\\\    \\sem{\\vdash { \\mathtt{skip}}:{\\mathtt{comm } } } & = & \\{*\\}\\\\ \\sem{\\gamma \\vdash m { \\mathbin{;}}n : b } & = & \\\\ \\makebox[0pt][l]{\\hspace{-15ex}$   \\ { ( \\vec{s } \\vec{s ' } , b ) \\mid       ( \\vec{s } , * ) \\in \\sem{\\gamma \\vdash m:{\\mathtt{comm } } } , ( \\vec{s ' } , b ) \\in      \\sem{\\gamma \\vdash n : b}\\}$ } \\\\    \\sem{\\gamma \\vdash m { \\mathbin{:=}}n } & = & \\\\",
    "\\makebox[0pt][l]{\\hspace{-15ex}$   \\ { ( \\vec{s } \\vec{s ' } , * ) \\mid       ( \\vec{s } , n ) \\in \\sem{\\gamma \\vdash n:{\\mathtt{nat } } } , ( \\vec{s ' } ,      { \\mathsf{write}}(n ) ) \\in \\sem{\\gamma\\vdash m:{\\mathtt{var}}}\\}$ } \\\\    \\sem{\\gamma \\vdash { \\mathop{!}}m:{\\mathtt{nat } } } & = &    \\ { ( \\vec{s } , n ) \\mid       ( \\vec{s } , { \\mathsf{read}}(n ) ) \\in \\sem{\\gamma \\vdash m:{\\mathtt{var}}}\\ } \\\\    \\sem{\\gamma \\vdash { \\mathtt{while}~m~\\mathtt{do}~n}:{\\mathtt{comm } } } & = & \\\\ \\makebox[0pt][l]{\\hspace{-15ex}$   \\left\\ {      ( \\vec{s^1}\\vec{t^1}\\vec{s^2}\\vec{t^2}\\ldots\\vec{s^j}\\vec{t^j}\\vec{s } , * )        \\left|   \\begin{array}{l }      \\forall i. ( \\vec{s^i } , 0 ) \\in \\sem{\\gamma \\vdash m:{\\mathtt{nat}}}\\\\   \\land   ( \\vec{t^i } , * ) \\in \\sem{\\gamma \\vdash n:{\\mathtt{comm } } } \\\\    \\land \\exists m \\not = 0 .   ( \\vec{s } , m ) \\in \\sem{\\gamma \\vdash m:{\\mathtt{nat } } }   \\end{array}\\right",
    ".   \\right\\}$ } \\\\ \\sem{\\gamma \\vdash { \\mathtt{ifzero}~m~\\mathtt{then}~n_1~\\mathtt{else}~n_2}:b }   & = & \\\\",
    "\\makebox[0pt][l]{\\hspace{-15ex}$     \\ {       ( \\vec{s}\\vec{t } , b ) \\mid      ( \\vec{s } , 0 ) \\in \\sem{\\gamma \\vdash m:{\\mathtt{nat } } } ,       ( \\vec{t } , b ) \\in \\sem{\\gamma \\vdash n_1:b }     \\}$ } \\\\     &   \\cup & \\\\ \\makebox[0pt][l]{\\hspace{-15ex}$     \\ {       ( \\vec{s}\\vec{t } , b ) \\mid \\exists m \\not = 0 .       ( \\vec{s } , m ) \\in \\sem{\\gamma \\vdash m:{\\mathtt{nat } } } ,       ( \\vec{t } , b ) \\in \\sem{\\gamma \\vdash n_2:b }     \\}$ } \\\\    \\sem{\\gamma \\vdash { \\mathtt{new}~x~\\mathtt{in}~m}:b } & = &     \\left\\ {       ( \\vec{s } , b ) \\left|    \\begin{array}{l }       \\exists s. ( \\vec{s } , s , b ) \\in \\sem{\\gamma , x:{\\mathtt{var}}\\vdash m : b }   \\\\",
    "\\land~s~\\mbox{is a cell trace}.      \\end{array}\\right .",
    "\\right\\}\\end{aligned}\\ ] ]      1 .",
    "consider the program @xmath126 , defined by @xmath127 it is straightforward to compute that @xmath128 is the set @xmath129 the semantic definitions do not yet enforce variable - like behaviour , so that in particular @xmath32 and @xmath130 need not be equal .",
    "+ however , the semantics of @xmath131 selects just those entries in which @xmath132 behaves like a good variable , so that @xmath133 , and then hides the @xmath132-behaviour : @xmath134 thus the values in @xmath45 and @xmath135 are swapped , and the semantics does not record anything about the use of @xmath132 or the fact that @xmath45 was reassigned first .",
    "the type @xmath136 has as its elements all pairs of the form @xmath137 a deterministic program of this type will contain at most one such element in its denotation , corresponding to a `` for loop '' which executes its argument a fixed , finite number of times .",
    "there is also the empty set , corresponding to a program which never terminates regardless of its argument .",
    "we now prove that our model is sound with respect to the operational semantics for the fragment of the language excluding abstraction , application , and non - base types .",
    "we refer to this fragment as bsci ; it is essentially the language of while - programs plus block allocated variables .",
    "first let us introduce a little more notation .",
    "we define a notion of state transition . given a sequence @xmath138 , we define the transitions @xmath139 where @xmath32 and @xmath140 are natural numbers , as follows .",
    "@xmath141}}{\\longrightarrow } n } \\end{prooftree }   \\quad \\quad \\begin{prooftree }   \\justifies   { n \\stackrel{\\textstyle{[{\\mathsf{read}}(n)]}}{\\longrightarrow } n } \\end{prooftree}\\ ] ] @xmath142}}{\\longrightarrow } n ' } \\end{prooftree }   \\quad \\quad \\begin{prooftree }    { n \\stackrel{\\textstyle{s}}{\\longrightarrow } n ' } \\quad { n ' \\stackrel{\\textstyle{s'}}{\\longrightarrow } n '' }   \\justifies   { n \\stackrel{\\textstyle{ss'}}{\\longrightarrow } n '' } \\end{prooftree}\\ ] ] we write @xmath143 to mean that @xmath144 for some @xmath140 .",
    "we can now give a precise definition of cell - trace : a sequence @xmath122 is a cell - trace if and only if @xmath145 .",
    "note also that @xmath143 if and only if @xmath146 is a cell - trace .",
    "we extend this to traces involving more than one @xmath43 type as follows .",
    "given a context @xmath147 , an element @xmath148 , and stores @xmath71 and @xmath76 in variables @xmath149 , ",
    ", @xmath150 , we write @xmath151 iff @xmath152 for each @xmath153 .",
    "say that a term @xmath154 , where @xmath109 is a base type and @xmath55 contains only @xmath43-typed variables , is _ good _ if and only if :    1 .   -12",
    "pt**case @xmath155 : * * for all stores @xmath156 over @xmath55 , @xmath157 2 .   -12",
    "pt**case @xmath158 : * * for all stores @xmath156 over @xmath55 and all @xmath159 , @xmath160 3 .   -12",
    "pt**case @xmath161 : * * @xmath162 is good and for all @xmath159 , @xmath163 is good .    [",
    "lem : scim - good ] all terms @xmath164 of bsci , where @xmath109 is a base type and @xmath55 contains only @xmath43-typed variables , are good in the above sense .",
    "we proceed by induction on the structure of the term @xmath48 . for the constants @xmath80 and @xmath32 , the result is trivial . for variables",
    "@xmath165 , we must show that both @xmath166 and @xmath167 are good .",
    "unpacking the definitions , we have @xmath168 but @xmath169 if and only if @xmath93 and @xmath170 , which holds if and only if @xmath171 .    for the assignment part , we have @xmath172 and @xmath173 if and only if @xmath174 , which holds if and only if @xmath175 .    for @xmath176 , first note that @xmath177 if and only if there are sequences of stores @xmath178 and @xmath179 , for @xmath180 , such that @xmath181 , @xmath182 , @xmath183 for @xmath184 and @xmath185 for some @xmath186 .",
    "( this can be proved by induction on derivations in the operational semantics of @xmath187 . )",
    "therefore , applying the inductive hypothesis to @xmath48 and @xmath51 , we have that @xmath177 if and only if there are @xmath188 and @xmath189 such that @xmath190 for @xmath184 and @xmath191 for some @xmath192 , and moreover @xmath193 for @xmath184 and @xmath194 but then we have that @xmath195 and @xmath196 by definition .",
    "furthermore , all elements of @xmath197 with cell - traces in the @xmath55 part are of this form , which establishes the converse .",
    "the case of @xmath198 is similar to this one , and simpler .",
    "consider the case of @xmath199 . by definition of the operational semantics , @xmath200 if and only if there are @xmath201 , @xmath202 , @xmath45 and @xmath32 such that @xmath203 and @xmath204 .",
    "this is the same as saying @xmath205 by the inductive hypothesis , both @xmath51 and @xmath48 are good , and hence by definition of `` good '' for terms of type @xmath43 , @xmath206 is good , so  ( [ eq : assigns ] ) holds if and only if we have @xmath207 such that @xmath208 by definition of the semantics , @xmath209 so  ( [ eq : assignment ] ) holds if and only if @xmath210    the case of @xmath211 follows directly from the inductive hypothesis : since @xmath48 is good , so is @xmath211 .",
    "finally we consider @xmath212 ( the @xmath41 case is similar ) . by definition of the operational semantics , @xmath213 iff @xmath214 by the inductive hypothesis ,",
    "this is possible if and only if there is some @xmath215 with @xmath216 the second condition above is the definition of @xmath217 being a cell - trace , so this holds if and only if @xmath218 as required .",
    "the fact that all terms are good gives us the following soundness result for bsci .",
    "[ cor : scim - sound ] for any closed term @xmath219 of bsci , where @xmath109 is @xmath42 or @xmath41 , @xmath220 if and only if @xmath221 .",
    "before going on to establish the soundness of reddy s model for the whole of sci , we shall develop a categorical setting for the model , based on monoids and relations .",
    "our monoid @xmath36 appears as the monoid of endomorphisms of an object in this category , so the retracts of this object all live in the category @xmath37 .",
    "it happens that all the objects we use to interpret types of @xmath0 are indeed retracts of this object , so the graph construction does indeed yield a category suitable for modelling imperative computation . nevertheless it is useful to describe the larger category .",
    "not only is its construction straightforward , but also it possesses some structure beyond that of @xmath37 which makes the description of reddy s model more straightforward , and allows the soundness result above to be extended to the whole language using algebraic reasoning .",
    "we believe that there is a more general description of these constructions to be found , perhaps extending the work of  @xcite ; but we leave this for future work .",
    "to build our category , we will be making use of the category @xmath222 of monoids and homomorphisms , and exploiting the product , coproduct and powerset operations on monoids , and the notion of the free monoid over a set .",
    "for the sake of completeness , we review these constructions here .",
    "first some notation . for a monoid @xmath46",
    ", we use @xmath223 to denote the identity element , and write monoid multiplication as concatenation , or occasionally using the symbol @xmath224 .",
    "the underlying set of the monoid @xmath46 is written as @xmath225 .",
    "recall that for any set @xmath46 , the _ free monoid over @xmath46 _ is given by @xmath226 , the monoid of strings over @xmath46 , also known as the kleene monoid over @xmath46 .",
    "the operation taking @xmath46 to @xmath226 is left - adjoint to the forgetful functor @xmath227 .",
    "the category @xmath222 has products .",
    "the product of monoids @xmath46 and @xmath109 is a monoid with underlying set @xmath228 , the cartesian product of sets .",
    "the monoid operation is defined by @xmath229 the identity element is @xmath230 .",
    "projection and pairing maps in @xmath222 are given by the corresponding maps on the underlying sets .",
    "the terminal object is the one - element monoid .",
    "the construction given above generalizes to give all small products .",
    "the category @xmath222 also has finite coproducts .",
    "these are slightly awkward to define in general , and since we will not be making use of the general construction , we omit it here .",
    "the special case of the coproduct of two free monoids is easy to define . since the operation of building a free monoid from a set is left adjoint to the forgetful functor @xmath231 , it preserves colimits and in particular coproducts . for sets @xmath46 and @xmath109 ,",
    "the coproduct monoid @xmath232 is therefore given by @xmath233 , the monoid of strings over the disjoint union of @xmath46 and @xmath109 .",
    "the initial object is the one - element monoid .",
    "the familiar powerset construction on @xmath234 lifts to @xmath222 and retains much of its structure .",
    "given a monoid @xmath46 , define the monoid @xmath235 as follows .",
    "its underlying set is the powerset of @xmath225 , that is , the set of subsets of @xmath225 .",
    "monoid multiplication is defined by @xmath236 and the identity is the singleton set @xmath237 .",
    "we will make use of the kleisli category @xmath238 .",
    "this category can be defined concretely as follows .",
    "its objects are monoids , and a map from @xmath46 to @xmath109 is a monoid homomorphism from @xmath46 to @xmath239 .",
    "the identity on @xmath46 is the singleton map which takes each @xmath240 to @xmath241 .",
    "morphisms are composed as follows : given maps @xmath242 and @xmath243 , the composite @xmath244 is defined by @xmath245    the fact that powerset is a _ commutative monad _ on @xmath222 means that the product structure on @xmath222 lifts to a monoidal structure on @xmath238 as follows .",
    "we define @xmath246 to be the monoid @xmath247 . for the functorial action , we make use of the _ double strength _",
    "map @xmath248 defined by @xmath249 this is a homomorphism of monoids . with this in place , given maps @xmath242 and @xmath250 in @xmath238 , we can define @xmath251 as the homomorphism @xmath252 .",
    "see for example  @xcite for more details on this construction .",
    "the category we will use to model sci  is @xmath253 .",
    "this category can be seen as a category of `` monoids and relations '' of a certain kind , so we will call it @xmath254 .",
    "we now briefly explore some of the structure that @xmath254 possesses .      the monoidal structure on @xmath238 described above is directly inherited by @xmath254 .",
    "furthermore , since the unit @xmath255 of the monoidal structure is given by the one - element monoid , which is also an initial object in @xmath222 , @xmath255 is in fact a terminal object in @xmath254 , so the category has an _ affine _ structure .",
    "an important consequence of this is that projections exist : for any @xmath256 , ",
    ", @xmath257 there are canonical maps @xmath258      let @xmath46 and @xmath109 be any monoids , and @xmath259 be the free monoid over some set @xmath260 . consider the following sequence of natural isomorphisms and definitional equalities .",
    "similarly we can show that @xmath262 the exponential @xmath263 is therefore given by @xmath264 .",
    "it is important to note that the free monoids are closed under this operation , so that we can form @xmath265 for any @xmath256 ,  , @xmath257 .",
    "that is to say , the free monoids form an _ exponential ideal _ in @xmath254 .    given a map @xmath266 in @xmath254",
    ", we write @xmath267 for the curried map @xmath268 .",
    "the counit of the adjunction is written @xmath269      the coproduct in @xmath222 is inherited by the kleisli - category @xmath238 , and since @xmath254 is the opposite of this category , @xmath254 has products .",
    "we can also describe the category @xmath254 concretely , as follows .",
    "objects are monoids , and maps @xmath270 are relations @xmath271 between ( the underlying sets of ) @xmath46 and @xmath109 , with the following properties :    1 .",
    "-12 pt**homomorphism : * * @xmath272 , and if @xmath273 and @xmath274 , then @xmath275 2 .",
    "-12 pt**identity reflection : * * if @xmath276 then @xmath277 3 .   -12 pt**decomposition ] : * * if @xmath278 then there exist @xmath279 such that @xmath280 for @xmath281 and @xmath282 .",
    "identities and composition are as usual for relations .",
    "note that the property of `` identity reflection '' is merely the nullary case of the property of `` decomposition '' .",
    "it is routine to show that this definition yields a category isomorphic to @xmath253 .",
    "the action of the isomorphism is as follows .",
    "given a map @xmath270 in @xmath253 , that is to say , a homomorphism @xmath283 we can define a relation @xmath284 between @xmath46 and @xmath109 as the set of pairs @xmath285 .",
    "we remark that the monoid of endomorphisms of the object @xmath286 , the monoid of sequences of natural numbers , is exactly the monoid @xmath36 of section  [ sec : scott - pw ] . a map @xmath287 consists of a monoid homomorphism @xmath288 which is the same as an ordinary function @xmath289 .",
    "reversing the arrows and using the characterization of @xmath290 as the kleisli - category for @xmath38 on @xmath234 , this is just a subset of @xmath291 , and it is routine to check that the composition of these sets is as described in section  [ sec : scott - pw ] .",
    "it follows that the full subcategory of @xmath254 consisting of objects which are retracts of @xmath286 can also be seen a subcategory of the karoubi envelope @xmath37 , and it will turn out that all the types of sci   are modelled using objects of this subcategory .",
    "just as scott used the karoubi envelope of @xmath1 as a category for giving semantics , we can use @xmath37 .",
    "however , @xmath254 proves to be a more convenient category , because it possesses additional objects , in particular tensor products such as @xmath292 , which assist in the description and analysis of our model but do not belong to @xmath37 .",
    "it is perhaps worth remarking that reddy s original work struggled to find a satisfying categorical setting for the model , resorting to the use of multicategories in the absence of objects such as @xmath293 .",
    "we believe our new categorical setting paints a more convincing picture .",
    "we now show how reddy s model of sci  lives in @xmath254 .",
    "types are interpreted as objects of the category , that is , as monoids .",
    "indeed every type is interpreted as the free monoid over the set which we used for the direct presentation of the semantics given above .",
    "formally we can give an inductive definition of the semantics of types as follows .",
    "@xmath294 for the definition of @xmath295 to make sense it is essential that every @xmath296 is a free monoid .",
    "this is clear for the base types @xmath42 and @xmath41 .",
    "recalling that products in @xmath254 come from coproducts in @xmath222 , and that the coproduct of free monoids is again a free monoid , we see that @xmath297 is a free monoid , and therefore by induction every types is interpreted as the free monoid over some alphabet .",
    "let us write @xmath298 for the underlying alphabet of @xmath104 , and verify that for every type @xmath46 , @xmath298 is the set that was used in the direct presentation of the semantics above .    for @xmath42 and @xmath41 ,",
    "this is clear . to see that the same holds for @xmath43 , recall that products in @xmath254 come from coproducts in @xmath222 , which for free monoids are given by disjoint union of alphabets .",
    "so @xmath299 the single element of the @xmath32th summand of the left component corresponds to @xmath107 , and the element @xmath32 of the right component corresponds to @xmath106 ; indeed we will continue to use this notation below .",
    "our reason for giving the semantic definition in the above form will become clear when we come to the semantics of assignment and dereferencing .    finally , by the definition of exponential , @xmath300 which agrees with our previous definition .    for the semantics of terms ,",
    "we exploit the categorical structure of @xmath254 : the @xmath2-calculus part is interpreted using the monoidal and exponential structure of the category , while the constants are interpreted by defining particular maps in the category , making use of products for those constants which allow their operands to share variables .",
    "a term @xmath301 is interpreted as a map",
    "@xmath302 ( if @xmath55 is the context @xmath57 we will often abbreviate the object @xmath303 as @xmath304 ) .",
    "unpacking definitions , such a map is a homomorphism @xmath305 since all types are interpreted as free monoids , this is the same as an ordinary function @xmath306 which in turn corresponds to a subset of @xmath307 under this representation , the denotations of terms in @xmath254 have the same form as those in the direct presentation , and we will use the `` sets of tuples '' when we need to define morphisms explicitly .",
    "a variable is interpreted as the identity map : @xmath308 weakening is interepreted using projections : if @xmath309 then @xmath310 where @xmath311 is a projection map .",
    "exchange is interpreted using the symmetry isomorphisms : for any permutation on a context taking @xmath55 to @xmath69 there is a corresponding isomorphism @xmath312 , and then @xmath313    abstraction is interpreted using the currying part of the exponential adjunction : if @xmath314 then @xmath315    application is interpreted using @xmath316 : @xmath317    it is straightforward to check that these definitions agree with the concrete ones given earlier .    to interpret the basic imperative constructs , we define a collection of maps in the category . for instance , to interpret @xmath176 we use a map @xmath318 which we will define below , and set @xmath319 the object @xmath320 is the free monoid over the alphabet @xmath321 .",
    "we can therefore define @xmath322 as the set of tuples @xmath323 maps interpreting @xmath198 , @xmath211 and @xmath199 can be defined similarly and all yield interpretations which agree with the direct one .",
    "however , for assignment and dereferencing , the definition of @xmath297 as @xmath324 suggests a more abstract definition using projections : there are projections @xmath325 for each @xmath32 , and @xmath326 and these are indeed the maps we need .",
    "thus our interpretation of @xmath43 has the kind of `` object oriented '' flavour advocated by reynolds : a variable is an object with @xmath327-many write - methods and a read - method , and its semantics is given by the product of these .",
    "finally the semantics of @xmath328 is given by means of maps of type @xmath329 defined by the sets @xmath330 and @xmath331 respectively .",
    "we can now show that our model is sound for the whole of sci , extending the result of section  [ sec : ground - sound ] .    first a standard lemma which says that substitution is modelled by composition in the category .",
    "[ lem : sub ] if @xmath332 and @xmath333 are terms of sci , then so is @xmath334 : b$ ] , and furthermore @xmath335 } = { \\mathsf{id}}_{\\sem{\\gamma } } { \\lltensor}\\sem{n } ; \\sem{m}.$ ]    with this in place it is standard that @xmath336-reduction is soundly modelled , because of the naturality of currying .",
    "[ lem : beta ] if @xmath332 and @xmath333 , then @xmath337}. $ ]    both of these lemmas are proved by a straightforward induction on the structure of terms .",
    "they hold for standard reasons , because we are working in a symmetric monoidal category and using exponentials to model function spaces .",
    "we can now establish soundness for our model using purely algebraic reasoning : the fact that there is no recursion in the language makes this particularly straightforward .",
    "the key is to establish that every ground - type term of the full language has the same behaviour as a term of @xmath338 ; a property that is captured by the following definition .",
    "let @xmath339 be a term of sci , where @xmath55 contains only @xmath43-typed variables .",
    "we say that @xmath48 is _ bsci - expressive _ iff :    1 .",
    "@xmath46 is a ground type and there exists a term @xmath340 of bsci  such that @xmath341 and for all stores @xmath71 and values @xmath79 @xmath342 or 2 .",
    "@xmath343 is a function type and for all bsci - expressive terms @xmath344 , @xmath345 is bsci - expressive .",
    "note that the first case above implies that all ground - type terms of bsci  with only @xmath43-typed free variables are automatically bsci - expressive .",
    "[ lem : scim - expressive ] let @xmath346 be any term of sci , and let @xmath347 be bsci - expressive terms . then @xmath348 $ ] is bsci - expressive .    by induction on the structure of @xmath48 .    1 .",
    "-12 pt**variables : * *  this case is trivial . 2 .",
    "-12 pt**constants : * *  trivial since constant terms are themselves bsci - terms . 3 .",
    "-12 pt**term formers of bsci : * *  for terms such as @xmath349 , we must prove that @xmath350~\\mathtt{do}~m_2[\\vec{n}/\\vec{x}]}$ ] is bsci - expressive . +",
    "the subterms @xmath351 $ ] are bsci - expressive by inductive hypothesis , and hence there are terms @xmath352 and @xmath353 of bsci  such that @xmath354}\\ ] ] for @xmath355 , and for all stores @xmath71 and values @xmath77 , @xmath356 { \\mathbin{\\downarrow}}\\sigma ' , v.\\ ] ] by the definition of the operational semantics it follows that @xmath357 if and only if @xmath358~\\mathtt{do}~m_2[\\vec{n}/\\vec{x } ] } { \\mathbin{\\downarrow}}\\sigma ' , v.\\ ] ] by the compositionality of the denotational semantics , @xmath359~\\mathtt{do}~m_2[\\vec{n}/\\vec{x}]}}\\ ] ] and hence @xmath350~\\mathtt{do}~m_2[\\vec{n}/\\vec{x}]}$ ] is bsci - expressive , as required . + the cases of other term - formers which are included in @xmath338 , such as @xmath360 and @xmath328 , are similar .",
    "-12 pt**abstraction : * *  for a term @xmath361 , we must prove that @xmath362 $ ] is bsci - expressive .",
    "let us write @xmath363 for @xmath364 $ ] . by the definition of bsci - expressive",
    ", we must show that for all bsci - expressive terms @xmath365 , ",
    ", @xmath366 such that @xmath367 is of ground type , @xmath367 is bsci - expressive .",
    "+ by the inductive hypothesis , @xmath368 $ ] is bsci - expressive whenever @xmath51 is .",
    "hence by definition of bsci - expressivity , @xmath369 p_2 \\ldots p_k$ ] is bsci - expressive whenever the @xmath370 are .",
    "therefore there is a term @xmath371 of bsci  such that @xmath372 p_2 \\ldots p_k}$ ] and for all stores @xmath71 and values @xmath77 , @xmath373 p_2 \\ldots p_k { \\mathbin{\\downarrow}}\\sigma ' , v.\\ ] ] but by soundness of @xmath336-reduction , @xmath374 p_2 \\ldots p_k } = \\sem{m''}.\\ ] ] this is to say that @xmath367 is bsci - expressive whenever the @xmath370 are , so @xmath375 is bsci - expressive .",
    "-12 pt**application : * *  for a term @xmath376 , we must show that @xmath377 m_2[\\vec{n}/\\vec{x}]$ ] is bsci - expressive .",
    "but by inductive hypothesis , @xmath378\\ ] ] is bsci - expressive for @xmath379 and the result follows by definition of bsci - expressivity at function types .    [ lem : sound ] for any closed term @xmath48 of type @xmath41 or @xmath42 , @xmath380 iff @xmath381 .    by lemma  [ lem : scim - expressive ]",
    ", @xmath48 is bsci - expressive and hence there is a term @xmath363 of bsci  such that @xmath341 and @xmath380 if and only if @xmath382 . by the soundness for bsci - terms , corollary  [ cor : scim - sound ] , @xmath383 if and only if @xmath384 , and the result follows .",
    "[ thm : soundness ] if @xmath94 are terms such that @xmath385 , then @xmath48 and @xmath51 are contextually equivalent .",
    "since the semantics is compositional , for any context @xmath96 $ ] , we have @xmath386 } = \\sem{c[n]}$ ] . by lemma  [ lem : sound ] ,",
    "@xmath387{\\mathbin{\\downarrow}}v$ ] iff @xmath386 } = \\sem{v}$ ] iff @xmath388 } = \\sem{v}$ ] iff @xmath389 { \\mathbin{\\downarrow}}v$ ] as required .",
    "in the next section it will be useful to consider a version of sciextended with two new constructs : erratic choice and a `` bad variable '' constructor .",
    "it will turn out that in a certain sense these extensions add no new expressive power  in technical parlance , they are _ conservative _ extensions  but they do alter the character of the language at an intuitive level , and allow new programs to be written . more importantly for our purposes ,",
    "they give rise to the presence of a _ universal type _ in the language .",
    "there are several ways to add an erratic choice operation to the language .",
    "as long as we are interested only in the `` may - converge '' version of the @xmath390 predicate , recording what values are possible as the result of a computation without making any guarantee of termination , the simplest form of erratic choice is a random number generator .",
    "we add to the language a constant @xmath391 , with typing rule @xmath392 and operational semantics @xmath393 for any @xmath32 .",
    "the denotational semantics of @xmath391 in our model is @xmath394      note that if we were to treat the must - converge predicate , this unbounded nondeterminism would be very different from finite nondeterminism , and would lead to some technical difficulties in the semantics , cf .",
    "however , for may - convergence , adding @xmath391 to the language is equivalent to adding a mere binary nondeterministic choice operator .",
    "we alluded earlier to the `` object - oriented '' nature of our denotational semantics of the @xmath43 type : @xmath43 is seen as the product of countably many assignment methods of type @xmath42 and a dereferencing method of type @xmath41 .",
    "we can import this reading of the @xmath43 type into the syntax of the language by means of a bad - variable constructor @xmath395 , as follows .",
    "the typing rule is @xmath396 for operational semantics , there are three rules : @xmath397 @xmath398 @xmath399 the idea is that @xmath400 is a variable for which the assignment methods are given by the @xmath401 and the dereferencing method is given by @xmath51 . thus any genuine variable @xmath45 is equivalent to @xmath402 but many other kinds of variable are available , some with very un - variable - like behaviour , such as @xmath403 which always gives @xmath404 when dereferenced .",
    "the denotational semantics of @xmath395 is as follows .",
    "@xmath405 a somewhat more abstract presentation can be given .",
    "first note that the denotations of terms @xmath406 for each @xmath32 give us @xmath327-many maps @xmath407 and thus a map @xmath408 which `` flattens '' a function into a tuple . since @xmath409 we can then define @xmath410",
    "one might argue that the @xmath395 constructor is unnatural from a programmer s point of view .",
    "however , the ability to define one s own assignment and dereferencing operators is a useful programming technique which is frequently exploited in languages such as ruby , for example  @xcite .",
    "this constructor appears in the syntax of most algol - like languages which have been studied in the theoretical literature , and is available in most models of such languages too .",
    "our result , to follow , which shows that @xmath395 is a conservative extension of sci  is therefore somewhat comforting ; moreover this result can be extended to full idealized algol , arguing via a game - based model  @xcite .",
    "we shall refer to the language @xmath0 extended with @xmath395 as @xmath411 .",
    "the relation of contextual equivalence for this language , defined in the same way as for @xmath0 , will be denoted @xmath412 .",
    "note that this relation may distinguish more terms of the pure @xmath0 language than does @xmath413 , because contexts may now make use of @xmath395 ; in fact we shall see later that this is not the case , so that @xmath395 is a _ conservative extension _ of the language .",
    "similarly , the language extended with both @xmath395 and @xmath391 will be called @xmath414 and its notion of contextual equivalence will be written @xmath415 .",
    "we now show that the model of the extended language @xmath414 is sound .",
    "the proof is a straightforward extension of the arguments used to establish lemma  [ lem : sound ] . for the sake of completeness ( of the paper , not the model ! ) we give the formulation here .",
    "a term @xmath416 of @xmath414 is _ good _ iff    1 .",
    "@xmath46 is @xmath42 and for all @xmath71 , @xmath76 , @xmath417 if and only if @xmath418 2 .",
    "@xmath46 is @xmath41 and for all @xmath71 , @xmath76 , @xmath32 , @xmath419 if and only if @xmath420 3 .",
    "@xmath46 is @xmath43 and for all @xmath32 , @xmath206 is good and @xmath211 is good .",
    "4 .   @xmath46 is @xmath421 and for all good @xmath422 , @xmath423 is good .    [",
    "lem : scicm - good ] for any term @xmath424 of @xmath414 , if @xmath425 are good terms for @xmath180 , with the @xmath426 disjoint , then @xmath427 : b $ ] is good .    by induction on the structure of @xmath48 .",
    "we treat only the cases of @xmath391 and @xmath395 ; the arguments for the others are as in the proofs of lemmas  [ lem : scim - good ] and  [ lem : scim - expressive ] .    for @xmath391",
    ", the operational semantics says that @xmath428 for any @xmath71 and @xmath32 .",
    "but @xmath429 and @xmath430 by definition .",
    "conversely , if @xmath431 then @xmath93 , so both directions of the required implication hold .    for @xmath395 , we shall show that if @xmath432 and @xmath433 are good , then so is @xmath400 .",
    "we must show that @xmath434 and @xmath435 are good . by the definition of the operational semantics , @xmath436 if and only if @xmath437 since @xmath48 and @xmath32 are good , this happens if and only if @xmath438 by definition of the semantics of @xmath395 , this holds iff @xmath439 which in turn holds iff @xmath440 by definition of the semantics of assignment , which completes the argument .",
    "the case for dereferencing is proved similarly .",
    "[ cor : scicm - sound ] for any closed term @xmath48 of @xmath414 having type @xmath42 , @xmath441 and for any closed term @xmath48 of type @xmath41 , @xmath442    note that the statement of this result is a little different from the analogous result for sci , corollary  [ cor : scim - sound ] , because of the nondeterminism in the language .",
    "just as before , this result is enough to allow us to establish the soundness of our model .",
    "[ thm : scicm - soundness ] if @xmath48 and @xmath51 are terms of @xmath414 of the same type and @xmath443 , then @xmath444 .",
    "another simple corollary will prove useful for us later .",
    "[ cor : base - type - fa ] if @xmath48 and @xmath51 are closed terms of @xmath414 of type @xmath41 , then @xmath445 .    the right - to - left implication is theorem  [ thm : scicm - soundness ] .",
    "left - to - right holds because if @xmath48 and @xmath51 are equivalent , then @xmath446 if and only if @xmath447 for any @xmath32 , so by corollary  [ cor : scicm - sound ] , @xmath448 if and only if @xmath449 , that is , @xmath450 .",
    "we begin this section with the observation that every type - object @xmath104 in @xmath254 is a retract of @xmath451 , confirming our claim that the karoubi envelope of the monoid @xmath36 is an appropriate setting for modelling imperative computation .    this would be little more than an intriguing observation but for the fact that the maps involved in the retractions are _ definable _ by terms of @xmath414 .",
    "thus , not only is @xmath451 a universal object for the category of type - objects in @xmath254 , but also @xmath41 is a universal _ type _ in the language .",
    "this gives rise to a very simple proof of the full abstraction of the model of @xmath414 .",
    "we then show that this result restricts to the smaller language sci  by demonstrating that @xmath414 extends sci  conservatively .",
    "let @xmath46 be any countable set .",
    "the monoid @xmath226 is a retract of @xmath452 in @xmath254 .",
    "let @xmath453 be any injective function .",
    "we define maps @xmath454 in @xmath254 by the relations @xmath455 it is immediately clear that these are well - defined maps in @xmath254 and that @xmath456 .",
    "since every type object @xmath104 is a list - monoid over a countable set , every type - object is a retract of @xmath451 .",
    "we should remark , however , that not every object used to define the semantics of sci  is a retract of @xmath451 .",
    "for example one can show that the object @xmath457 does not have this property .",
    "the category @xmath254 therefore possesses some advantages over the category @xmath37 .",
    "we can go further in our description of type - objects as retracts of @xmath451 : the retractions at hand are denotations of terms of @xmath414 .",
    "a type @xmath46 of sci is a _",
    "definable retract _ of @xmath41 iff there are maps @xmath458 and @xmath459 in @xmath254 such that @xmath460 and furthermore there are terms @xmath461 and @xmath462 of @xmath414 such that @xmath463 and @xmath464 .    every type of @xmath0 is a definable retract of @xmath41 .    by induction on the structure of types .",
    "we shall give particular definable retractions for the types @xmath41 , @xmath42 , @xmath43 and @xmath465 .",
    "the case of a more general function type @xmath466 is then handled inductively , by defining @xmath467 the identity maps clearly make @xmath41 a definable retract of itself . for the type @xmath42 , we define @xmath468 where @xmath469 is any nonterminating program .",
    "it is trivial to verify that these terms have the required property .    for the type @xmath43",
    ", we make use of nondeterminism .",
    "we are going to encode the action of reading a value @xmath32 from a variable as the number @xmath470 , and writing @xmath32 to a variable as @xmath471 ( any effective encoding of a disjoint sum of naturals would do , of course ) .",
    "the @xmath472 term randomly assigns to or dereferences from the variable @xmath45 , and then returns the encoding of what it has done : @xmath473{l }    \\mathtt{then}~{2(!x)}\\\\    \\mathtt{else}~{(x : = r-1 ) ; 2r-1}. }    \\end{array}\\ ] ] the semantics of @xmath474 therefore consists of all pairs of the forms @xmath475,2n ) \\quad\\quad\\mbox{and}\\quad\\quad   ( [ { \\mathsf{write}}(n)],2n+1).\\ ] ]    the @xmath476 term makes use of @xmath395 to create a variable . both the reading and writing parts of this variable",
    "evaluate the natural number @xmath135 once .",
    "if @xmath135 is of the form @xmath470 , then the variable allows @xmath32 to be read from it ; if on the other hand @xmath135 is @xmath471 , then the variable allows @xmath32 to be written to it .",
    "no other actions are possible .",
    "@xmath477{l }    ( \\lambda      n:{\\mathtt{nat}}.\\mathtt{if}~y=2n+1~\\mathtt{then}~{\\mathtt{skip}}~\\mathtt{else}~\\omega)\\\\ ( { \\mathtt{new}~    z:=y~\\mathtt{in}~\\mathtt{if}~\\mathsf{even}(!z)~\\mathtt{then}~!z/2~\\mathtt{else}~\\omega } ) .",
    "\\end{array } \\ ] ] the semantics of this term therefore consists of all pairs of the forms @xmath478,{\\mathsf{read}}(n ) ) \\quad\\quad\\mbox{and}\\quad\\quad   ( [ 2n+1],{\\mathsf{write}}(n))\\ ] ] thus giving the required retraction .",
    "finally for @xmath465 , the term @xmath472 supplies the function with a randomly generated sequence of inputs , @xmath31 , observes the output , @xmath32 , and returns an encoding of the pair @xmath30 as a natural number .",
    "compare this with the @xmath13 function used to embed @xmath15 $ ] in @xmath1 in scott s model . to ease the notation we use a liberal dose of syntactic sugar .",
    "we assume that an encoding of sequences of natural numbers as naturals exists , and suppress mention of it , so it appears that the variable @xmath31 in the term below is used to store finite sequences directly .",
    "we write @xmath479 for the encoding of the empty sequence , @xmath480 $ ] for the encoding of the singleton sequence containing the element @xmath32 , and @xmath481 for the encoding of concatenation .",
    "if @xmath32 is a number encoding a sequence @xmath31 , @xmath482 denotes the length of sequence @xmath31 and @xmath483 denoting the @xmath153th element of @xmath31 .",
    "we also use pair notation @xmath484 for the encoding of this pair as a natural number , and @xmath485 and @xmath486 to compute the projections from such encoded pairs .",
    "finally we allow multiple variables to be allocated and initialized at once , so that @xmath487 means @xmath488 . with these abbreviations at our disposal , @xmath489 is defined as follows .",
    "@xmath490{l }        { s:={\\varepsilon } ; x : = 0}~\\mathtt{in}\\\\       { x : =   f({\\mathtt{new}~r:={\\mathtt{random}}~\\mathtt{in}~(s:= ! s\\cdot [",
    "! r ] ) ;   !",
    "r});}\\\\        \\langle ! s , !",
    "x\\rangle .",
    "\\end{array}\\ ] ] finally for @xmath491 , we take the value @xmath492 , decode it as a pair @xmath30 , and return a function which can return @xmath32 on observation of the input sequence @xmath31 , but can do nothing else .",
    "@xmath493{l } { y':= y ; z':= z ; s:=\\mathtt{fst}(!y ' ) ; n:=        \\mathtt{snd}(!y ' ) ; x:=0}~\\mathtt{in}\\\\ \\mathtt{while}~\\begin{array}[t]{l }          { ! x < |!s|}~\\mathtt{do}\\\\          { \\mathtt{if}~!z'_{!x}={!s}_{!x}~\\mathtt{then}~x:=!x+1~\\mathtt{else}~\\omega ; }                \\end{array}\\\\    !",
    "n               \\end{array}\\ ] ]    these definable retractions allow us to prove full abstraction for @xmath414 in a very straightforward fashion .",
    "[ thm : scicm - fa ] the model of @xmath414 in @xmath254 is fully abstract .",
    "that is , for any closed terms @xmath48 and @xmath51 of the same type , @xmath385 if and only if @xmath444 .",
    "the left - to - right implication is  theorem  [ thm : scicm - soundness ] . for the right - to - left , suppose @xmath48 and @xmath51 are equivalent terms .",
    "then by definition of equivalence , we also have @xmath494 { \\cong_{\\mathtt{mk},\\mathtt{ran}}}\\mathtt{in}[n / x].\\ ] ] these are closed terms of type @xmath41 , so by corollary  [ cor : base - type - fa ] , @xmath495}= \\sem{\\mathtt{in}[n / x]}$ ] . by compositionality of the semantics",
    "it follows that @xmath496/y ] }    = \\sem{\\mathtt{out}[\\mathtt{in}[n / x]/y]}$ ] . but",
    "@xmath496/y ] } = \\sem{m } ;    \\sem{\\mathtt{in } } ; \\sem{\\mathtt{out}}$ ] and similarly for @xmath51 , so we conclude that @xmath385 as required .",
    "we have established full abstraction of our model of @xmath414 , which admits both the @xmath497 construct and nondeterminism . before embarking on our proof that these additional constructs do not change the notion of equivalence in sci , we first develop a more constrained model in which @xmath391 can not be interpreted .",
    "reddy s original object - spaces model did not admit the nondeterministic construct @xmath391 .",
    "we use some of reddy s ideas to construct a variant of the category @xmath254 which contains the same model of @xmath411 but , like reddy s category , contains no nondeterministic elements .",
    "the idea is to introduce a relation of coherence , in the style of girard s coherence spaces  @xcite .    given a monoid @xmath46 , a _ coherence relation _",
    "@xmath498 on @xmath46 is a symmetric reflexive binary relation on the underlying set of @xmath46 such that    1 .",
    "-12 pt**prefix closure : * *  if @xmath499 then @xmath500 2 .",
    "-12 pt**extension : * *  if @xmath501 then @xmath502 .",
    "a useful intution is that elements @xmath20 and @xmath503 are coherent , @xmath504 , if they can coexist as possible observations to be made of a single deterministic computation at the same state .",
    "so , for instance , distinct natural numbers @xmath32 and @xmath140 will not be coherent in the denotation of @xmath41 , but @xmath107 and @xmath505 will be coherent in @xmath43 because a variable may allow any value to be written to it .    the category @xmath506 is defined as follows .",
    "objects are pairs @xmath507 consisting of a monoid @xmath46 together with a coherence relation on @xmath46 , and maps from @xmath508 to @xmath509 are relations @xmath271 such that @xmath271 is a map from @xmath46 to @xmath109 in @xmath254 and furthermore    1 .   if @xmath510 , @xmath511 and @xmath512 then @xmath513 2 .   if @xmath510 , @xmath514 and @xmath515 then @xmath516 .",
    "composition is the usual composition of relations .",
    "@xmath506 is a category .",
    "it is clear that the identity relations are valid maps in @xmath506 so we just need to show that composition preserves the two new constraints on maps .",
    "let @xmath517 and @xmath518 be maps in @xmath506 .",
    "suppose @xmath510 and that @xmath519 and @xmath520",
    ". then there exist @xmath521 such that @xmath511 , @xmath522 , @xmath523 and @xmath524 .",
    "since @xmath525 we have @xmath526 and hence @xmath527 as required .",
    "now suppose @xmath528 ; we shall show that @xmath516 . since @xmath29 is a valid map , we have @xmath529 and then since @xmath271 is valid , @xmath516 .",
    "hence @xmath530 is a valid map in @xmath506 .",
    "the following definition is due to reddy  @xcite .    given a set @xmath46 and a symmetric reflexive binary relation @xmath531 on @xmath46 , we define an object of @xmath506 called the _ object - space over @xmath46 _ consisting of the free monoid over @xmath46 with coherence relation defined by : @xmath532 if and only if @xmath533 that is to say , two sequences are coherent if either one is a prefix of the other , or at the first place they differ , the two differing elements are coherent .",
    "[ lem : monrelcoh - free ] let @xmath507 be a set with a coherence relation , and let @xmath226 be the object - space over this structure .",
    "let @xmath109 be any object of @xmath506 .",
    "let @xmath271 be a relation from @xmath534 to @xmath46 such that if @xmath535 and @xmath536 with @xmath537 then @xmath538 and if @xmath539 then @xmath529",
    ". then there is a unique map in @xmath506 from @xmath109 to @xmath226 which extends @xmath271 ; by abuse of notation we also write @xmath271 for this relation .",
    "the unique candidate for this map is the extension of @xmath271 to a map @xmath109 to @xmath226 in @xmath254 , exploiting the fact that @xmath226 is the free monoid over @xmath46 .",
    "we just need to show that it is a valid map in @xmath506 .",
    "we first show that if @xmath537 with @xmath540 and @xmath541 then @xmath542 .",
    "this requires demonstrating that at the first @xmath153 such that @xmath543 , we have @xmath544 , if such an @xmath153 exists",
    ". we proceed by induction on the minimum of @xmath545 . in the base case",
    "there is nothing to prove , so suppose both @xmath32 and @xmath140 are non - zero .    by the decomposition property , we can find @xmath546 such that @xmath547 and each @xmath548 , and similarly for @xmath549 and the @xmath550 . by the prefix - closure property in @xmath109 , @xmath551 and hence @xmath500 .",
    "thus if @xmath552 , we are done . otherwise , @xmath553 implies that @xmath554 and then by the extension property of coherence in @xmath109 , we have @xmath555 and of course @xmath556 and similarly for the @xmath557 and @xmath550 .",
    "then the inductive hypothesis gives us the result we require .",
    "we now show that if additionally @xmath558 then @xmath529 , again by induction on @xmath32 ( which is equal to @xmath140 ) . the base case is guaranteed by the identity reflection property of maps in @xmath254 . in the inductive step",
    ", we again decompose @xmath114 and @xmath549 as above , and note that since @xmath553 we have @xmath554 .",
    "then we also have @xmath559 and similarly for the @xmath557 , and conclude by the inductive hypothesis .",
    "the product , tensor and exponential constructions in @xmath254 all lift to @xmath506 . this can be expressed as follows .",
    "@xmath506 is a symmetric monoidal category with products , and the object - spaces form an exponential ideal in @xmath506 .",
    "moreover the forgetful functor to @xmath254 preserves all this structure on the nose .",
    "we just need to define the coherence - relation parts of the various constructions and show that they are well - defined and have the appropriate properties .",
    "for the monoidal structure , coherence is defined pointwise : @xmath560 ( to aid legibility in future we will drop the subscripts on the @xmath498 relations where no confusion will arise . )    it is clear that this definition makes @xmath561 into a bifunctor on @xmath506 and that the associativity , symmetry and unit maps from @xmath254 are well - defined maps in @xmath506 too .",
    "we now consider the exponentials .",
    "let @xmath508 be an object of @xmath506 , and let @xmath509 be a set equipped with a symmetric reflexive binary relation . in @xmath254",
    "the exponential @xmath562 is given by the free monoid over @xmath563 .",
    "we shall define a symmetric reflexive binary relation on this set and show that the object - space this defines is the required exponential in @xmath506 .",
    "the coherence relation on @xmath563 echoes the definition of map in @xmath506 : @xmath564 if and only if    1 .",
    "@xmath565 2 .",
    "@xmath566 .    by lemma  [ lem : monrelcoh - free ]",
    ", maps from an object @xmath260 into this object space are described by relations from @xmath567 to @xmath563 which satisfy the appropriate coherence constraints .",
    "that is , if @xmath568 and @xmath569 then we have    1",
    ".   @xmath570 2 .",
    "@xmath571 .",
    "on the other hand , maps from @xmath572 to @xmath573 are given by relations from @xmath574 to @xmath109 such that    1 .",
    "@xmath575 2 .   @xmath576 .",
    "it is straightforward to verify that these are the same constraints , so that we have a natural bijection of homsets : @xmath577 as required .",
    "a similar argument shows that products in @xmath254 lift to @xmath506 .",
    "for object - spaces , the construction is very straightforward : the product of object - spaces @xmath226 and @xmath573 is the object space over the disjoint union @xmath578 , equipped with the coherence relation which relates elements of @xmath46 if and only if they are related in the object space @xmath226 , and similarly for @xmath109 , but also relates all elements of @xmath46 to all elements of @xmath109 .",
    "@xmath506 therefore possesses all the structure we require to model @xmath0 . to lift our model to @xmath506 we just need to give interpretations of the base types and constants .",
    "the base types are all interpreted using object spaces , with underlying coherence relations as follows :    1 .   for @xmath41 , @xmath579 .",
    "2 .   for @xmath42 , @xmath580 .",
    "3 .   for @xmath43 , @xmath581 for all @xmath545",
    "; @xmath582 ; and @xmath583 for all @xmath545 .",
    "note that this makes @xmath43 the product object - space of @xmath41 with @xmath327-many copies of @xmath42 .",
    "it is easy to check that the constant maps used in the denotations of @xmath0 terms are maps of @xmath506 over the appropriate types .",
    "the same applies to @xmath395 , but not to @xmath391 : the map @xmath584 clearly violates the coherence constraints since it returns incoherent outputs from coherent ( empty ) inputs .",
    "the model of @xmath411 in @xmath254 lifts to @xmath506 .",
    "[ cor : coherence ] if @xmath585 is a closed term of @xmath411 and @xmath586 then @xmath538 .",
    "( here we blur the distinction between maps from the tensor unit into @xmath104 and subsets of @xmath104 . )",
    "thus the model of @xmath411 in @xmath506 captures @xmath411 s deterministic nature : for instance , closed terms of type @xmath41 contain at most one natural number in their denotation .",
    "in this section we show that the extensions of @xmath0 with the @xmath395 and @xmath391 operators are _ conservative _ , that is to say , they have no effect on the relation of contextual equivalence for terms of the original @xmath0 language .",
    "this means that the new contexts available when the language is extended have no additional discriminating power , and as a result , the full abstraction theorem for @xmath414 also applies to the smaller languages @xmath411 and @xmath0 .",
    "as explained in  @xcite , this work shows that reddy s object - spaces model  @xcite was the first example of a fully abstract semantics for a higher - order imperative language , though this was not known at the time .",
    "its full abstraction is remarkable since it contains a great many undefinable elements .",
    "however , the definable elements do suffice to distinguish any two different elements of the model , and it is this which leads to full abstraction .",
    "though we present our results in the form of conservativity theorems rather than direct full abstraction proofs , our arguments hinge on partial definability results which would be enough to establish full abstraction of the model for @xmath0 and @xmath411 directly , that is , without appealing to theorem  [ thm : scicm - fa ] , if desired .",
    "the proof of conservativity of @xmath395 in particular makes heavy use of our definability results , and is essentially the same as the direct proof of full abstraction given in  @xcite .",
    "nevertheless we believe that presenting the results as conservativity theorems is worthwhile , particularly in light of the relatively cheap proof of full abstraction for @xmath414 , and the limited use of definability in the proof of conservativity of @xmath391 .",
    "as explained above , our conservativity results are established by means of a partial definability result which demonstrates how certain elements of our model are found as the denotations of terms from @xmath0 and its extensions .",
    "let us first mention a curious fact .",
    "let @xmath96 $ ] be some context of @xmath0 , so that in particular @xmath96 $ ] does not employ @xmath395 . if @xmath587{\\mathord{\\downarrow}},\\ ] ]",
    "then it is also the case that @xmath588{\\mathord{\\downarrow}}.$ ] this inability of @xmath395-free contexts to distinguish completely between reading and writing into variables is the main obstacle to overcome in our definability proof .",
    "the presence of @xmath395 makes quite a difference , since for example a context binding @xmath589 to the term @xmath590 will make the first term above converge and the second diverge .",
    "this immediately tells us that the addition of @xmath395 is not conservative with respect to the contextual _",
    "preorder_. our work in this section will show that it is conservative with respect to contextual _ equivalence _ ; this came as a surprise .",
    "the following definition captures the relationship between sequences of observations which is at work in the above example .    for any sci type @xmath46",
    ", we define the _ positive and negative read - write orders _ @xmath591 and @xmath592 between elements of @xmath104 as follows .",
    "we give only the definitions for singleton elements ; the definitions are extended to sequences by requiring that the elements of the sequences are related pointwise .    1 .   at type @xmath42",
    ": @xmath593 2 .   at type @xmath41 : @xmath594 3 .   at type @xmath43 : @xmath595 4 .   at type @xmath92 : @xmath596    in general , @xmath597 iff @xmath598 can be obtained from @xmath31 by replacing some occurrences of @xmath106 actions in positive occurrences of the type @xmath43 by the corresponding @xmath107 actions .",
    "the order @xmath592 is the same but operates on actions in negative occurrences of @xmath43 .",
    "we are now in a position to state our definability result .    [",
    "lem : definability ] let @xmath46 be any type of @xmath0  and let @xmath599 be any element of the monoid interpreting @xmath46 .",
    "there exists a term @xmath600 of @xmath0 ( not including @xmath395 or @xmath391 ) such that @xmath601 iff @xmath602 .",
    "there also exists a context @xmath603 , @xmath55-stores @xmath604 and @xmath605 , and a term @xmath606 such that for all @xmath607 , @xmath608    we will prove the two parts of this lemma simultaneously by induction on the type @xmath46 .",
    "first note that any @xmath599 is a sequence of elements from a certain alphabet . before beginning the main induction ,",
    "we show that it suffices to consider the case when @xmath20 is a singleton sequence .",
    "the cases when @xmath20 is empty are trivial : @xmath609 ) = { \\mathtt{skip}}$ ] and @xmath610)$ ] is any divergent term , with @xmath611)}$ ] and @xmath612)}}$ ] both being the unique store on no variables .",
    "if @xmath613 $ ] , then we can define @xmath614 as @xmath615){\\mathbin{;}}{\\mathsf{test}(}[a_2 ] ) { \\mathbin{;}}\\ldots { \\mathbin{;}}{\\mathsf{test}(}[a_n]).\\ ] ] for the @xmath616 part , suppose that @xmath617 for some base type @xmath109 , and that the context @xmath55 contains all the variables needed to define the @xmath618 . for any store @xmath71 over variables @xmath619 , define @xmath620 to be the term @xmath621 define @xmath622 to be @xmath623    an appropriate term @xmath624 can then be defined as follows .",
    "@xmath625{l }     x:= ! x+1 { \\mathbin{;}}\\\\     \\mathtt{if}~(!x = 1)~\\mathtt{then}~{\\mathsf{produce}(}a_1)y_1 \\ldots y_k \\\\",
    "\\mathtt{else~if}~(!x = 2)~\\mathtt{then}~\\mathsf{check}({\\mathsf{final}{(a_1)}}){\\mathbin{;}}\\\\     \\phantom{\\mathtt{else~if}~(!x = 2)~\\mathtt{then}~ }                                        \\mathsf{set}({\\mathsf{init}(a_2)}){\\mathbin{;}}\\\\     \\phantom{\\mathtt{else~if}~(!x = 2)~\\mathtt{then}~ }                                         { \\mathsf{produce}(}a_2)y_1\\ldots y_k \\\\     \\ldots \\\\",
    "\\mathtt{else~if}~(!x = n)~\\mathtt{then}~\\mathsf{check}({\\mathsf{final}{(a_{n-1})}}){\\mathbin{;}}\\\\      \\phantom{\\mathtt{else~if}~(!x = n)~\\mathtt{then}~ }                       \\mathsf{set}({\\mathsf{init}(a_n)}){\\mathbin{;}}\\\\      \\phantom{\\mathtt{else~if}~(!x = n)~\\mathtt{then}~ }                       { \\mathsf{produce}(}a_n)y_1 \\ldots y_k\\\\     \\mathtt{else}~\\mathtt{diverge }   \\end{array}\\ ] ] the required initial state @xmath604 is @xmath626 , and the final state @xmath605 is @xmath627 .",
    "we now define @xmath614 and @xmath624 for the case when @xmath20 is a singleton , by induction on the structure of the type @xmath46 .    for the type @xmath42",
    ", we define @xmath628 note the way the initial and final states check that the command @xmath629 is used exactly once .",
    "the type @xmath41 is handled similarly : @xmath630    for @xmath43 , there are two kinds of action to consider : those for reading and those for writing . for writing",
    "we define : @xmath631 for @xmath632 , the variable @xmath135 checks that exactly one use is made , and the variable @xmath45 checks that the one use is a write - action assigning @xmath32 to the variable .",
    "reading is handled similarly : @xmath633 in @xmath634 , the variable @xmath45 holds @xmath32 so that if the expression @xmath635 is used for a read , the value @xmath32 is returned .",
    "the variable @xmath45 must also hold @xmath32 finally , so @xmath635 can not reach the state @xmath636 if it is used to write a value other than @xmath32 .",
    "however , it would admit a single @xmath107 action .",
    "this is the reason for introducing the @xmath637 relation : if a term of our language can engage in a @xmath106 action , then it can also engage in @xmath107 .",
    "the non - interference between function and argument allows us to define these terms very simply : for @xmath641 we supply the function @xmath45 with an argument which will produce the sequence @xmath31 , and check that the output from @xmath45 is @xmath114 . we must also check that the function @xmath45 uses its argument in the appropriate , @xmath31-producing way , which is done by means of the @xmath642 and @xmath643 states . for @xmath644",
    "we simply test that the argument @xmath45 is capable of producing @xmath31 , and then produce  @xmath114 .",
    "it is straightforward to check that these terms have the required properties .",
    "[ lem : conservativity - random ] let @xmath94 be terms of @xmath411 such that @xmath645",
    ". then @xmath444 .",
    "it suffices to consider _ closed _ terms , because in all the language fragments we consider , open terms @xmath48 and @xmath51 are equivalent if and only if their closures @xmath646 and @xmath647 are equivalent .",
    "so , let @xmath648 , suppose @xmath649 and let @xmath96 $ ] be a context , possibly employing @xmath391 , such that @xmath387{\\mathbin{\\downarrow}}{\\mathtt{skip}}$ ]",
    ". we shall show that @xmath389{\\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] by induction on the number of occurrences of @xmath391 in @xmath96 $ ] .",
    "the base case , where @xmath96 $ ] does not employ @xmath391 at all , is trivial : @xmath96 $ ] is a @xmath411 context , so since @xmath645 , we have @xmath389{\\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] .",
    "for the inductive step , let @xmath650 $ ] be the context obtained from @xmath96 $ ] by replacing one occurrence of @xmath391 with a fresh variable @xmath651 of type @xmath41 .",
    "then for any term @xmath652 , @xmath653 { \\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] if and only if @xmath654)({\\mathtt{random } } ) { \\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] .    since @xmath655)({\\mathtt{random } } ) { \\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] , corollary  [ cor : scicm - sound ] implies that @xmath656)({\\mathtt{random}})}.\\ ] ] by definition of @xmath584 and the semantics of application , there must exist a sequence @xmath31 of natural numbers such that @xmath657}$ ] .    by lemma  [ lem : definability ]",
    ", there is a term @xmath658 not involving @xmath391 , such that @xmath659 iff @xmath660 .",
    "we therefore have @xmath661)}$ ] and hence by corollary  [ cor : scicm - sound ] , @xmath662 ) { \\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] . but @xmath663)$ ] is a context involving the same number of occurrences of @xmath391 as does @xmath650 $ ] , so by inductive hypothesis we also have @xmath664 ) { \\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] .",
    "therefore @xmath665)}$ ] , which is only possible if @xmath666}$ ] .",
    "but then @xmath667)({\\mathtt{random}})}\\ ] ] and hence by corollary  [ cor : scicm - sound ] again , @xmath668)({\\mathtt{random } } )   { \\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] .",
    "finally we can conclude that @xmath389{\\mathbin{\\downarrow}}{\\mathtt{skip}}$ ] as required .",
    "the model of @xmath411 in @xmath254 is fully abstract .",
    "[ lem : coherence - and - order ] let @xmath226 be an object - space interpreting a type of @xmath0 in @xmath506 and let @xmath669 .    1 .   if @xmath670 and @xmath538 then @xmath516 .",
    "2 .   if @xmath671 then @xmath538 .",
    "by induction on type .",
    "we consider only the cases of singleton sequences ; the general cases follow easily .    for @xmath42 and @xmath41 ,",
    "both @xmath592 and @xmath591 are the identity relations , so the results hold trivially . for @xmath43",
    ", @xmath592 is again the identity relation completing this case . for @xmath591 ,",
    "the result follows from the fact that @xmath672 .    for the inductive step ,",
    "consider elements @xmath638 and @xmath673 of @xmath92 . if @xmath674 then @xmath675 and @xmath676 . by the inductive hypothesis on type @xmath46 ,",
    "@xmath677 so if @xmath678 then we also have @xmath537 .",
    "the inductive hypothesis on @xmath109 then gives us @xmath529 and hence @xmath679 as required .",
    "if @xmath680 then @xmath681 and @xmath682 . then if @xmath683 , the inductive hypothesis gives us @xmath679 .",
    "induction also tells us that @xmath537 , and hence @xmath678 as required .",
    "[ lem : conservativity - mkvar ] let @xmath94 be terms of @xmath0 such that @xmath684",
    ". then @xmath649 .    as in lemma",
    "[ lem : conservativity - random ] we consider only closed terms .",
    "suppose @xmath648 with @xmath685 and let @xmath686 be any element of the denotation of @xmath48 . by  lemma  [ lem : definability ] there is a term @xmath687 such that @xmath688 if and only if @xmath670 .",
    "we therefore have @xmath689 , and hence @xmath690 by corollary  [ cor : scim - sound ] . by hypothesis",
    "we have @xmath691 , so that @xmath692 .",
    "therefore there is some @xmath503 such that @xmath670 and @xmath693 .",
    "symmetrically we can find @xmath694 such that @xmath695 and @xmath696 .    by corollary  [ cor :",
    "coherence ] , @xmath697 and then by lemma  [ lem : coherence - and - order ] , @xmath698 and hence @xmath516 .",
    "it follows that @xmath385 and hence @xmath649 by theorem  [ thm : scicm - soundness ] .",
    "the model of @xmath0 in @xmath254 is fully abstract .",
    "we remark that reddy was not aware that his model was fully abstract ; indeed it was believed not to be .",
    "we have shown that a simple amendment of scott s @xmath1 graph - model gives rise to a model of imperative computation , in the event - based style of reddy s object - spaces model and later models based on game semantics .",
    "moreover we have shown that this model contains a universal type , thus yielding a very cheap proof of full abstraction for the language @xmath414 . with some additional work we have established full abstraction for the original sci  language via conservativity results ; this was not known prior to our work .",
    "we believe that the general approach of constructing models in this way is of interest and has the potential to give rise to a range of interesting concrete models and some useful insights at a more abstract level .",
    "we intend to develop an axiomatic presentation of our constructions , expanding on the work of hyland et al .  @xcite . at present",
    "it is not clear whether the more refined game - based models can be presented in this style ; this remains a topic for further investigation .",
    "s.  abramsky , k.  honda , and g.  mccusker . a fully abstract game semantics for general references . in _ proceedings , thirteenth annual ieee symposium on logic in computer science _ , pages 334344 .",
    "ieee computer society press , 1998 .",
    "s.  abramsky and g.  mccusker .",
    "linearity , sharing and state : a fully abstract game semantics for idealized algol with active expressions . in p.",
    "w. ohearn and r.  d. tennent , editors , _ algol - like languages _ , pages 297329 of volume 2 .",
    "birkhaser , 1997 .",
    "m.  hyland , m.  nagayama , j.  power , and g.  rosolini . a category - theoretic formulation of engeler - style models of the untyped @xmath2-calculus . in _ proc .",
    "mcfsit 2004 , electronic notes in theoretical computer science volume 161 _ , pages 4357 , 2006 .",
    "j.  longley .",
    "universal types and what they are good for . in _",
    "domain theory , logic and computation : proceedings of the 2nd international symposium on domain theory _",
    ", number  3 in semantic structures in computation , pages 2563 .",
    "kluwer , 2003 .",
    "j.  longley .",
    "interpreting localized computational effects using operators of higher type , extended abstract . in _ logic and theory of algorithms , fourth conference on computability in europe , cie 2008 , athens , proceedings",
    "_ , number 5028 in lecture notes in computer science .",
    "springer verlag , 2008 .",
    "g.  mccusker . a fully abstract relational model of syntactic control of interference .",
    "in _ proceedings , computer science logic ( csl ) 2002 _ , volume 2471 of _ lecture notes in computer science _ , pages 247261 .",
    "springer - verlag , 2002 .",
    "g.  mccusker . on the semantics of the bad variable constructor in algol - like languages . in s.",
    "brookes and p.  panangaden , editors , _ proceedings , nineteenth conference on the mathematical foundations of programming semantics , montreal 2003 _ , electronic notes in theoretical computer science .",
    "elsevier , 2003 .",
    "p.  w. ohearn and u.  reddy .",
    "objects , interference and the yoneda embedding . in m.",
    "main and s.  brookes , editors , _ mathematical foundations of programming semantics : proceedings of 11th international conference _ , electronic notes in theoretical computer science .",
    "elsevier science publishers b.v . , 1995 .",
    "j.  c. reynolds .",
    "syntactic control of inference , part 2 . in g.",
    "ausiello , m.  dezani - ciancaglini , and s.  r.  d. rocca , editors , _ automata , languages and programming , 16th international colloquium , icalp 89 , stresa , italy , july 11 - 15 , 1989 , proceedings _ ,",
    "volume 372 of _ lecture notes in computer science _ ,",
    "pages 704722 .",
    "springer , 1989 ."
  ],
  "abstract_text": [
    "<S> scott s graph model is a lambda - algebra based on the observation that continuous endofunctions on the lattice of sets of natural numbers can be represented via their graphs . </S>",
    "<S> a graph is a relation mapping finite sets of input values to output values .    </S>",
    "<S> we consider a similar model based on relations whose input values are finite sequences rather than sets . </S>",
    "<S> this alteration means that we are taking into account the order in which observations are made . </S>",
    "<S> this new notion of graph gives rise to a model of affine lambda - calculus that admits an interpretation of imperative constructs including variable assignment , dereferencing and allocation .    extending this untyped model </S>",
    "<S> , we construct a category that provides a model of typed higher - order imperative computation with an affine type system . </S>",
    "<S> an appropriate language of this kind is reynolds s syntactic control of interference . </S>",
    "<S> our model turns out to be fully abstract for this language . at a concrete level , it is the same as reddy s object spaces model , which was the first `` state - free '' model of a higher - order imperative programming language and an important precursor of games models . </S>",
    "<S> the graph model can therefore be seen as a universal domain for reddy s model . </S>"
  ]
}