{
  "article_text": [
    "the ( propositional ) planning problem has been the subject of intensive study in knowledge representation , artificial intelligence and control theory and is relevant for a large number of industrial applications  @xcite .",
    "the problem involves deciding whether an _ initial state_an @xmath0-vector over some domain @xmath1can be transformed into a _ goal state _ via the application of _ actions _ ( or _ operators _ ) each consisting of _ preconditions _ and _ post - conditions _ ( or _ effects _ ) stating the conditions that need to hold before the action can be applied and which conditions will hold after the application of the action , respectively .",
    "it is known that the problem of deciding whether a solution exists or not is -complete  @xcite .",
    "although various -complete and even tractable restrictions are known in the literature @xcite these are often considered not to coincide well with cases that are intersting in practice . in the authors",
    "experience , classical complexity analysis is often too coarse to give relevant results for planning , since most interesting restrictions seem to remain -complete . despite this",
    ", there has been very few attempts to use alternative analysis methods .",
    "the few exceptions include probabilistic analysis  @xcite , approximation  @xcite and padding  @xcite .",
    "another obvious alternative is to use the framework of parameterized complexity which offers the more relaxed notion of _ fixed - parameter tractability _ ( fpt ) .",
    "a problem is fixed - parameter tractable if it can be solved in time @xmath2 where @xmath3 is an arbitrary function of the parameter @xmath4 ( which measures some aspect of the input ) and @xmath0 is the input size .",
    "indeed , already in a 1999 paper , downey , fellows and stege @xcite initiated the parameterized analysis of planning , taking the minimum number of steps from the initial state to the goal state ( i.e. , the length of the solution plan ) as the parameter .",
    "however , the parameterized viewpoint did not immediately gain momentum for analysis of planning and it is only during the last few years that we have witnessed a strongly increased interest in this method , cf .",
    "@xcite .    in this article",
    ", we use the same parameter as downey et al . and provide a complete analysis of planning under various syntactical restrictions , in particular the restrictions considered by bylander  @xcite and by bckstrm and nebel  @xcite .",
    "these were among the first attempts to understand why and when planning is hard or easy and they have had a heavy influence on later theoretical research in planning .",
    "we complement these results by also considering bounds on problem kernels for those planning problems that we prove to be fixed - parameter tractable .",
    "it is known that a decidable problem is fixed - parameter tractable if and only if it admits a polynomial - time self - reduction where the size of the resulting instance is bounded by a function  @xmath3 of the parameter  @xcite .",
    "the function @xmath3 is called the _ kernel size_. by providing upper and lower bounds on the kernel size , one can rigorously establish the potential of polynomial - time preprocessing for the problem at hand .",
    "we provide a full parameterized complexity analysis of planning with respect to the length of the solution plan , under all combinations of the syntactical p , u , b , and s restrictions previously considered by bckstrm and nebel  @xcite as well as under the restrictions on the number of preconditions and effects previously considered by bylander  @xcite .",
    "our new parameterized results are summarized in table  [ table : bylander ] and figure  [ fig : pubs - lattice ] alongside the previously reported classical complexity results .",
    "we discuss our results more thoroughly in section  [ sec : class ] .",
    "in addition , we examine whether the fixed - parameter tractable subcases , which we obtain , admit polynomial kernels or not .",
    "our results on this are negative throughout  if any of these problems admit polynomial kernels , or even polynomial bi - kernels , then @xmath5 and the polynomial - time hierarchy collapses .",
    "the rest of the paper is laid out as follows .",
    "section 2 defines some concepts of parameterized complexity theory and section 3 defines the sas@xmath6  and strips  planning languages .",
    "the hardness results are collected in section 4 and the membership results in section 5 .",
    "section 6 is devoted to our tractability results and in section 7 we show that none of the tractable subcases admits a polynomial kernel .",
    "we summarize the results of the paper in section 8 and discuss some observations and consequences .",
    "the paper ends with an outlook in section  9 .",
    ".complexity of bounded sas@xmath6  planning when restricting the number of preconditions ( @xmath7 ) and effects ( @xmath8 ) .",
    "all parameterized results are shown in this paper and all classical results are from bylander  @xcite .",
    "the classical results apply to strips , while the parameterized results hold for sas@xmath6  ( the hardness results hold already for binary domains and the membership results hold for arbitrary domains ) .",
    "we also show that none of the problems that are in  admit polynomial kernels . [ cols=\"<,<,<,<,<\",options=\"header \" , ]     0cm0cm12cm8 cm    ( -8.0,-1.0)(-4.5,-1.0 ) ( -4.5,-1.0)(-4.0,-1.0)(-3.75,-1.0)(-3.0,-1.5 ) ( -3.0,-1.5)(1.5,-4.5 )    ( -8.0,3.0)(-4.0,3.0 ) ( -4.0,3.0)(-3.0,3.0)(-3.0,3.0)(-2.0,2.0 ) ( -2.0,2.0)(2.0,-2.0 ) ( 1.5,-1.5)(2.5,-2.5)(2.5,-2.5)(4.0,-2.5 ) ( 4.0,-2.5)(8.0,-2.5 ) ( -2.0,2.0)(-1.0,1.0)(1.0,1.0)(2.0,0.0 ) ( 2.0,0.0)(3.0,-1.0)(3.0,-1.0)(4.0,-1.0 ) ( 4.0,-1.0)(8.0,-1.0 )    ( -0.1,-0.1 ) ( -8.0,3.0)(-4.0,3.0 ) ( -4.0,3.0)(-3.0,3.0)(-3.0,3.0)(-2.0,2.0 ) ( -2.0,2.0)(2.5,-2.5 ) ( 2.5,-2.5)(3.5,-3.5)(3.5,-3.5)(4.5,-3.5 ) ( 4.5,-3.5)(8.0,-3.5 )    ( 0.0,0.0 ) ( -2.0,4.0)(0.0,2.0 ) ( 0.0,2.0)(2.0,0.0)(2.0,2.0)(4.0,0.0 ) ( 4.0,0.0)(4.5,-0.5)(4.5,-0.5)(5.5,-0.5 ) ( 5.5,-0.5)(8.0,-0.5 )",
    "we define the basic notions of parameterized complexity and refer to other sources  @xcite for an in - depth treatment .",
    "let @xmath9 be a finite alphabet and @xmath10 the set of natural numbers .",
    "parameterized decision problem _ or _ parameterized problem _ , for short , is a language @xmath11 .",
    "the _ instances _ of the problem are pairs on the form @xmath12 , where @xmath13 is a string over @xmath14 , which constitutes the main part , and @xmath4 is the _",
    "parameter_. a parameterized problem is _ fixed - parameter tractable ( fpt ) _ if there exists an algorithm that solves any instance @xmath12 in time @xmath15 where @xmath3 is an arbitrary computable function , @xmath16 , and @xmath17 is a constant independent of both @xmath0 and @xmath4 .",
    "is the class of all fixed - parameter tractable parameterized problems . since the emphasis in parameterized algorithms lies on the dependence of the running time on @xmath4 we will sometimes use the notation @xmath18 as a synonym for @xmath19 .",
    "parameterized complexity offers a completeness theory , similar to the theory of @xmath20-completeness , that supports the accumulation of strong theoretical evidence that certain parameterized problems are not fixed - parameter tractable .",
    "this theory is based on a hierarchy of complexity classes @xmath21 } } } \\subseteq { { { { { { \\mbox{\\textnormal{\\textbf{w}}}}}}}}{{[2 ] } } } \\subseteq { { { { { { \\mbox{\\textnormal{\\textbf{w}}}}}}}}{{[3 ] } } } \\subseteq \\cdots\\ ] ] where all inclusions are believed to be strict .",
    "each class @xmath22}}}$ ] contains all parameterized problems that can be reduced by a parameterized reduction to a certain canonical parameterized problem ( known as weighted @xmath23-normalized satisfiability ) under _ parameterized _ reductions .    a _ parameterized reduction _ or _ fpt - reduction _ from a parameterized problem @xmath24 to a parameterized problem @xmath25 is an algorithm that maps instances @xmath12 of @xmath24 to instances @xmath26 of @xmath25 such that :    1 .",
    "if and only if @xmath28 ; 2 .",
    "there is a computable function @xmath29 such that @xmath30 ; and 3 .",
    "there is a computable function @xmath3 and a constant @xmath17 such that @xmath12 is computed in time @xmath31 , where @xmath32 .",
    "a _ bi - kernelization _",
    "@xcite ( or _ generalized kernelization _",
    "@xcite ) for a parameterized problem  @xmath24 is a parameterized reduction from @xmath24 to a parameterized problem @xmath25 that maps instances @xmath12 of @xmath24 to instances @xmath26 of @xmath25 with the additional property that    1 .",
    "@xmath26 can be computed in time that is polynomial in @xmath33 , and 2 .",
    "@xmath34 and @xmath35 are both bounded by some function @xmath3  of  @xmath4 .    the output @xmath26 is called a _",
    "bi - kernel _ ( or a _ generalized kernel _ ) .",
    "we say that @xmath24 has a _ polynomial bi - kernel _ if @xmath3 is a polynomial .",
    "if @xmath36 , we call the bi - kernel a _ kernel_. every fixed - parameter tractable problem admits a bi - kernel , but not necessarily a polynomial bi - kernel  @xcite .",
    "a _ polynomial parameter reduction _ from a parameterized problem @xmath24 to a parameterized problem @xmath25 is a parameterized reduction from @xmath24 to @xmath25 that maps instances @xmath12 of @xmath24 to instances @xmath26 of @xmath25 with the additional property that    1 .",
    "@xmath26 can be computed in time that is polynomial in @xmath33 , and 2 .",
    "@xmath35 is bounded by some polynomial @xmath7  of  @xmath4 .",
    "the following result is an adaptation of a result by bodlaender  ( * ? ? ?",
    "* theorem  8) .",
    "[ pro : poly - par - reduction - bi ] let @xmath24 and @xmath25 be two parameterized problems such that there is a polynomial parameter reduction from @xmath24 to @xmath25 .",
    "then , if @xmath25 has a polynomial bi - kernel also @xmath24 has a polynomial bi - kernel .",
    "let @xmath37 be an instance of @xmath24 .",
    "we first apply the polynomial parameter reduction from @xmath24 to @xmath25 to the instance @xmath37 and obtain the instance @xmath38 of  @xmath25 .",
    "then the instance @xmath39 of some parameterized problem , say @xmath40 , that we obtain by applying the polynomial bi - kernelization algorithm for @xmath25 is also a polynomial bi - kernel for @xmath24 .",
    "this concludes the proof of the proposition .    for a parameterized problem @xmath41 , we define its _ unparameterized version _ @xmath42}$ ] as the corresponding classical problem with the parameter given in unary . that is , every instance @xmath12 of @xmath24 has a corresponding instance @xmath43}$ ] of @xmath42}$ ] such that @xmath43}$ ] is the string @xmath44 , where @xmath45 is a separator symbol and @xmath46 is an arbitrary symbol in @xmath9 .",
    "we note here that most researchers in kernelization talk about kernels instead of bi - kernels .",
    "it is however well known that the approaches to obtain lower bounds for kernels and bi - kernels , respectively , work in the same manner  @xcite .",
    "it is immediate from the definitions that if a problem does not admit a polynomial bi - kernel , then it can not admit a polynomial kernel either , so super - polynomial lower bounds for the size of bi - kernels imply super - polynomial lower bounds for the size of kernels . since we will be mostly concerned with lower bounds we will give all our results in terms of bi - kernels .",
    "an _ or - composition algorithm _ for a parameterized problem @xmath24 maps @xmath47 instances @xmath48 of @xmath24 to one instance @xmath26 of @xmath24 such that the algorithm runs in time polynomial in @xmath49 , the parameter @xmath35 is bounded by a polynomial in the parameter @xmath4 , and @xmath50 if and only if there is an @xmath23 , where @xmath51 , such that @xmath52 .",
    "[ pro : or - comp - no - poly - kernel ] if a parameterized problem @xmath24 has an orcomposition algorithm and its unparameterized version @xmath42}$ ] is -complete , then it has no polynomial bi - kernel unless @xmath5 .",
    "unfortunately , this proposition can only be applied to problems that are contained in , while membership in is not known for some of the problems that we consider in this article .",
    "furthermore , to the best of our knowledge , there is no consistent presentation of bi - kernel lower bounds for problems that may not be in .",
    "hence , we fill this gap by giving such a presentation from first principles , i.e. , in the following we will give an analogue of proposition  [ pro : or - comp - no - poly - kernel ] for problems that are not ( or not known to be ) in . a _ distillation algorithm _",
    "@xcite for a classical problem @xmath24 is an algorithm that takes @xmath47 instances @xmath53 of @xmath24 as the input , runs in time polynomial in @xmath54 , and outputs an instance @xmath13 of some problem @xmath25 such that : ( 1 ) @xmath55 if and only if there is an  @xmath23 , where @xmath51 , such that @xmath56 and ( 2 )  @xmath57 is polynomial in @xmath58 .",
    "[ pro : sat - no - distillation ] unless @xmath5 , the satisfiability problem for propositional formulas ( @xmath59 ) has no distillation algorithm .    using the fact that @xmath59 is complete and there are polynomial reductions from @xmath59 to any other hard problem",
    ", we immediately obtain the following corollary .",
    "[ cor : no - distillation ] unless @xmath5 , no hard problem has a distillation algorithm .",
    "below , we first introduce a stronger orcomposition concept and then prove generalizations to -hard problems of two results known from the literature .",
    "a _ strong orcomposition algorithm _ for a parameterized problem @xmath24 maps  @xmath47 instances @xmath60 , @xmath61 of @xmath24 to one instance @xmath12 of @xmath24 such that the algorithm runs in time polynomial in @xmath62 , the parameter @xmath4 is bounded by a polynomial in @xmath63 , and @xmath27 if and only if there is an @xmath23 , where @xmath51 , such that @xmath64 .",
    "the following result is an adaptation of proposition  [ pro : or - comp - no - poly - kernel ] , based on the original proof of this result  @xcite .",
    "[ pro : strong - or - comp - no - poly - kernel ] if a parameterized problem @xmath24 has a strong orcomposition algorithm and its unparameterized version @xmath42}$ ] is -hard , then it has no polynomial bi - kernel unless @xmath5 .",
    "we show that if @xmath24 satisfies the conditions of the proposition and @xmath24 has a polynomial bi - kernel , then @xmath42}$ ] has a distillation algorithm and it thus follows from corollary  [ cor : no - distillation ] that @xmath5 .",
    "let @xmath65 be instances of @xmath24 and @xmath66},\\dotsc,{[{{\\langle{{{{\\mathbb{i}}}}_t , k_t}\\rangle}}]}$ ] be the corresponding unparameterized instances of @xmath42}$ ] .",
    "we give a distillation algorithm for @xmath42}$ ] that consists of two steps .",
    "in the first step the algorithm runs the strong orcomposition algorithm for @xmath24 and obtains the instance @xmath12 from the instances @xmath65 . in the second step",
    "the algorithm runs the polynomial bi - kernelization algorithm on @xmath12 and obtains the instance @xmath26 of a parameterized problem  @xmath25 .",
    "the algorithm then outputs @xmath67}$ ] .    in the following",
    "we will show that the algorithm outlined above is indeed a distillation algorithm for @xmath42}$ ] .",
    "it is straightforward to verify that @xmath67 } \\in { [ { q}]}$ ] if and only if there is an @xmath23 , where @xmath51 , such that @xmath68 } \\in { [ { p}]}$ ] .",
    "the running time of the first step of our algorithm is polynomial in @xmath69 ( because of the properties of the strong orcomposition algorithm ) , which in turn is polynomial in @xmath70}|$ ] .",
    "the running time of the second step is polynomial in @xmath71}|$ ] , which is again polynomial in @xmath70}|$ ] .",
    "hence , the running time of the complete algorithm is polynomial in @xmath70}|$ ] , as required for a distillation algorithm .    furthermore ,",
    "since @xmath26 is a polynomial bi - kernel of @xmath12 , it follows that @xmath72}|$ ] is bounded by a polynomial function in @xmath35 , and hence in @xmath4 . because of the properties of the strong orcomposition algorithm we also obtain that @xmath4 is bounded by a polynomial in @xmath63 which in turn is bounded by @xmath73}|$ ] . putting all this together , we obtain that @xmath72}|$ ] is bounded by a polynomial function of @xmath73}|$ ] .",
    "this shows that our algorithm is a distillation algorithm for @xmath42}$ ] , which , because of corollary  [ cor : no - distillation ] , implies that @xmath5 .",
    "let @xmath74 be a finite set of _ variables _ over a finite _ domain _ @xmath75 .",
    "implicitly define @xmath76 , where @xmath77 is a special `` undefined '' value not present in @xmath75 .",
    "then @xmath78 is the set of _ total states _ and @xmath79 is the set of _ partial states _ over @xmath80 and @xmath75 , where @xmath81 .",
    "the value of a variable @xmath82 in a state @xmath83 is denoted @xmath84}}$ ] .",
    "sas@xmath6  instance _ is a tuple @xmath85 where @xmath80 is a set of variables , @xmath75 is a domain , @xmath86 is a set of _ actions _ , @xmath87 is the _ initial state _ and @xmath88 is the _ goal state_. each action @xmath89 has a _ precondition _ @xmath90 and an _ effect _ @xmath91 .",
    "we will frequently use the convention that a variable has value @xmath77 in a precondition / effect unless a value is explicitly specified .",
    "let @xmath92 and let @xmath93 .",
    "then @xmath94 is _ valid in @xmath95 _ if for all @xmath96 , either @xmath97 } } = { { s[{v}]}}$ ] or @xmath97 } } = { \\mathbf{u}}$ ] .",
    "furthermore , the _ result of @xmath94 in @xmath95 _ is a state @xmath98 defined such that for all @xmath99 , @xmath100 } } = { { { \\mathrm{eff}}(a)[{v}]}}$ ] if @xmath101 } } \\neq { \\mathbf{u}}$ ] and @xmath100 } } = { { s[{v}]}}$ ] otherwise .",
    "let @xmath102 and let @xmath103 be a sequence of actions .",
    "then @xmath104 is a _",
    "plan from @xmath105 to @xmath106 _ if either    * @xmath107 and @xmath108 or * there are states @xmath109 such that for all @xmath110 , @xmath111 is valid in @xmath112 and @xmath113 is the result of @xmath111 in @xmath112 .    a state @xmath114 is a _ goal state _ if for all @xmath96 , either @xmath115 } } = { { s[{v}]}}$ ] or @xmath115 } } = { \\mathbf{u}}$ ] .",
    "an action sequence @xmath104 is a _",
    "plan for @xmath116 _ if it is a plan from @xmath117 to some goal state .",
    "we will study the following problem :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ bounded sas@xmath6  planning + _ instance : _ a tuple @xmath118 where @xmath116 is a sas@xmath6  instance and @xmath4 is a positive integer .",
    "+ _ parameter : _ the integer @xmath4 .",
    "+ _ question : _ does @xmath116 have a plan of length at most @xmath4 ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the propositional version of the strips  planning language can be treated as the special case of sas@xmath6  satisfying restriction b. more precisely , propositional strips  is commonly used in two variants , differing in whether negative preconditions are allowed or not .",
    "both these variants as well as sas@xmath6  have been shown to be equivalent under a strong form of polynomial reduction that preserves solution length  @xcite .",
    "hence , we will not treat strips  explicitly .",
    "it should be noted , though , that while the equivalence holds in the general case , it often breaks down when further restrictions are imposed .",
    "we will mainly consider the following four restrictions , originally defined by bckstrm and klein @xcite .",
    "_ _ _ _ _ _",
post - unique ( p ) : : :    for each @xmath96 and each @xmath119    there is at most one @xmath89 such that    @xmath101 } } = x$ ] .",
    "unary ( u ) : : :    for each @xmath89 ,    @xmath101 } } \\neq { \\mathbf{u}}$ ] for exactly    one @xmath96 .",
    "binary ( b ) : : :    @xmath120 .",
    "single - valued ( s ) : : :    for all @xmath121 and all @xmath96 , if    @xmath97 } } \\neq { \\mathbf{u}}$ ] ,    @xmath122 } } \\neq { \\mathbf{u}}$ ] and    @xmath101 } } = { { { \\mathrm{eff}}(b)[{v } ] } } = { \\mathbf{u}}$ ] ,    then    @xmath97 } } = { { { \\mathrm{pre}}(b)[{v}]}}$ ] . _",
for any set @xmath123 of such restrictions",
    "we write to denote the restriction of bounded sas@xmath6  planning  to only instances satisfying the restrictions in @xmath123 .",
    "additionally we will consider restrictions on the number of preconditions and effects as previously considered by bylander  @xcite . for two",
    "non - negative integers @xmath7 and @xmath8 we write + to denote the restriction of bounded sas@xmath6  planning to only instances where every action has at most @xmath7 preconditions and at most @xmath8 effects . apart from doing a parameterized analysis",
    ", we also generalize bylander s results to sas@xmath6 ; all our membership results hold for arbitrary domain size while all our hardness results apply already for binary domains .",
    "all non - parameterized hardness results in table  [ table : bylander ] follow directly from bylander s classical complexity results for strips  ( * ? ? ? * fig .  1 and  2 ) .",
    "note that we use results both for bounded and unbounded plan existence , which is justified since the unbounded case is ( trivially ) polynomial - time reducible to the bounded case .",
    "the membership results for  are immediate since bounded @xmath124 planning is in .",
    "the membership results for  ( when @xmath125 ) follow from bylander s  @xcite theorem  3.9 , which says that every solvable strips  instance with @xmath125 has a plan of length @xmath126 where @xmath127 is the number of actions .",
    "it is easy to verify that the same bound holds for sas@xmath6instances .",
    "in this section we prove the three main hardness results of this paper .",
    "for the first proof we need the following problem , which is [ 2]-complete  @xcitehitting set + _ instance : _ a finite set @xmath128 , a collection @xmath129 of subsets of @xmath128 , and an integer  @xmath4 .",
    "+ _ parameter : _ the integer @xmath4 .",
    "+ _ question : _ does @xmath129 have a _ hitting set _ of cardinality at most @xmath4 , i.e. , is there a set @xmath130 with @xmath131 and @xmath132 for every @xmatharb - hard ] @xmath134-bounded sas@xmath6  planning   is @xmath135}}}$]-hard , even when the actions have no preconditions .",
    "we proceed by a parameterized reduction from hitting set .",
    "let @xmath136 be an instance of this problem .",
    "we construct an instance @xmath137 with @xmath138 of the @xmath134-bounded sas@xmath6  planning   problem such that @xmath13 has a hitting set of size at most @xmath4 if and only if there is a plan of length at most @xmath4 for @xmath139 as follows .",
    "let @xmath140 , let @xmath141 and let @xmath142 such that @xmath143}}=1 $ ] if @xmath144 .",
    "we set @xmath145 and @xmath146 .",
    "clearly , @xmath116 is binary ( b ) and no action has any preconditions .",
    "it follows trivially from the latter observation that @xmath116 is also single - valued ( s ) it remains to show that @xmath116 has a plan of length at most @xmath4 if and only if @xmath13 has a hitting set of size at most  @xmath4 .",
    "suppose that @xmath13 has a hitting set @xmath147 of size at most @xmath4 .",
    "then @xmath148 is a plan of length at most @xmath4 for @xmath116 .",
    "for the reverse direction suppose that there is a plan @xmath149 of length at most @xmath4 for @xmath116 .",
    "we will show that the set @xmath150 is a hitting set of size at most @xmath4 for @xmath13 .",
    "since @xmath151}}=0 $ ] and @xmath152}}=1 $ ] for every @xmath133 , it follows that for every @xmath133 there has to be an action @xmath153 with @xmath154 in @xmath104 .",
    "hence , @xmath155 is a hitting set for @xmath13 and because @xmath156 it follows that @xmath157 .",
    "we continue with the second result , using the following problem , which is [ 1]-complete  @xcite .",
multicolored clique + _ instance : _ a @xmath4-partite graph @xmath158 with a partition @xmath159 of @xmath160 such that @xmath161 .",
    "+ _ parameter : _ the integer @xmath4 .",
    "+ _ question : _ are there nodes @xmath162 such that @xmath163 for all @xmath164 and @xmath165 for all @xmath166 ( i.e. the subgraph of @xmath167 induced by @xmath168 is a clique of size @xmathunary - hard ] @xmath169-bounded sas@xmath6  planning   is @xmath170}}}$]-hard , even for binary instances where every action has at most @xmath46 precondition and @xmath46 effect .",
    "we proceed by a parameterized reduction from multicolored clique .",
    "let @xmath171 be a @xmath4-partite graph with partition @xmath159 of @xmath160 .",
    "let @xmath172 and @xmath173 , and define @xmath174 for every @xmath175 .    for the @xmath169-bounded sas@xmath6  planning  instance @xmath116",
    "we introduce four kinds of variables :    1 .   for every @xmath176",
    "we introduce an _ edge variable _ @xmath177 .",
    "2 .   for every @xmath164 and @xmath178",
    "we introduce @xmath179 _ vertex variables _",
    "@xmath180 where @xmath181 .",
    "3 .   for every @xmath182 and every @xmath183",
    "we introduce a _ checking variable _ @xmath184 .",
    "4 .   for every @xmath185",
    ", we introduce a _",
    "clean - up variable _ @xmath186 .",
    "we also introduce five kinds of actions :    1 .   for every @xmath176 we introduce an action @xmath187 such that @xmath188 } } = 1 $ ] .",
    "2 .   for every @xmath189",
    "where @xmath190 and @xmath191 , we introduce two actions @xmath192 and @xmath193 such that @xmath194 = 1 $ ] , @xmath195}}=1 $ ] , @xmath196 = 1 $ ] and @xmath197}}=1 $ ] .",
    "3 .   for every @xmath198 and @xmath183",
    ", we introduce an action @xmath199 such that @xmath200 = 1 $ ] and @xmath201 } } = 1 $ ] .",
    "4 .   for every @xmath202",
    ", we introduce an action @xmath203 such that @xmath204 } } = 1 $ ] .",
    "5 .   for every @xmath178 , for some @xmath164 , and @xmath183",
    ", we introduce an action @xmath205 such that @xmath206 = 1 $ ] and @xmath207 } } = 0 $ ] .",
    "let @xmath208 be sets of actions corresponding to these five groups , and let @xmath209 be the set of all actions .",
    "let @xmath145 and define @xmath210 such that all checking variables @xmath184 are @xmath46 , all vertex variables @xmath180 are @xmath211 and the rest are @xmath77 . clearly @xmath116 can be constructed from @xmath167 in polynomial time .",
    "furthermore , @xmath116 is binary and no action has more than @xmath46 precondition and @xmath46 effect",
    ". the theorem will follow after we have shown the following claim .",
    "@xmath167 has a @xmath4-clique if and only if @xmath116 has a plan of length at most @xmath35 .",
    "( @xmath212 ) assume @xmath167 has a @xmath4-clique @xmath213 where @xmath214 with @xmath163 for every @xmath215 .",
    "we construct a plan @xmath104 for @xmath116 as follows . for all @xmath216 ,",
    "we apply the actions @xmath217 , to select the edges of the clique , and @xmath218 , to set the corresponding connection information for the vertices of the clique .",
    "this gives @xmath219 actions .",
    "then for each checking variable @xmath184 , for every @xmath182 and @xmath183 , we apply @xmath220 to verify that the selected vertices do form a clique .",
    "this gives @xmath221 actions .",
    "now we have all checking variables set to the required value @xmath46 , but the vertex variables @xmath222 , for @xmath182 and @xmath183 , still bear the value @xmath46 which will have to be set back to @xmath211 in the goal state .",
    "so we need some actions to `` clean up '' the values of these vertex variables .",
    "first we set up a cleaner for each vertex @xmath223 by applying @xmath224 .",
    "this gives @xmath4 actions .",
    "then we use @xmath225 for all @xmath183 to set the vertex variables @xmath222 to @xmath211 .",
    "this requires @xmath221 actions .",
    "we observe that all the checking variables are now set to @xmath46 , and all the vertex variables are set to @xmath211 .",
    "the goal state is therefore reached from the initial state by the execution of exactly @xmath226 actions , as required .",
    "hence the forward direction of the claim is shown .",
    "( @xmath227 ) assume @xmath104 is a plan for @xmath116 of length at most @xmath35 . in the following , we use @xmath228 to denote the set of actions from @xmath229 that occur in the plan @xmath104 and we use @xmath230 to denote the set of all actions from @xmath231 that occur in @xmath104 . in the initial state",
    "all variables are set to @xmath211 and in the goal state all the @xmath221 checking variables must be set to @xmath46 , so it follows that @xmath232 since each action in @xmath233 sets exactly one checking variable to @xmath46 .",
    "each action in @xmath234 requires that a distinct vertex variable is set to @xmath46 first .",
    "this can only be accomplished by the execution of an action from @xmath235 , hence @xmath236 . in turn , to make sure that some action in @xmath237 can be executed , some edge variable must be set to @xmath46 first by an action in @xmath238 .",
    "however , one edge variable provides the precondition for at most two actions in @xmath237 .",
    "hence we require @xmath239 .",
    "the actions in @xmath240 set at least @xmath221 vertex variables to @xmath46 . in the goal state all vertex variables",
    "must have the value @xmath211 again , hence we need to apply at least @xmath221 actions from @xmath241 , and consequently @xmath242 . in order to apply an action in @xmath243",
    ", we first need to set a clean - up variable to @xmath46 with an action from @xmath244 .",
    "one clean - up variable provides the precondition for at most @xmath245 actions in @xmath243 , hence @xmath246 . in total",
    "we get @xmath247 .",
    "conversely , @xmath35 is an upper bound on the length of @xmath104 , and the length of @xmath104 is clearly an upper bound on the number of actions in @xmath230 , hence @xmath248 .",
    "thus @xmath249 and @xmath104 has exactly length @xmath35 .",
    "it follows that in all the above inequalities , equality holds , i.e. , we have @xmath250 , @xmath251 , and @xmath252 .",
    "we call a variable _ active _ if its value gets changed during the execution of  @xmath104 .",
    "all @xmath221 checking variables are active , and by the above considerations , there are exactly @xmath253 active edge variables , @xmath254 active vertex variables , and @xmath255 active clean - up variables .",
    "we conclude that each active clean - up variable @xmath186 , @xmath178 , must provide the precondition for actions in @xmath243 to set @xmath245 vertex variables to @xmath211 ( these vertex variables are active ) .",
    "this is only possible if these vertex variables are exactly the @xmath245 variables @xmath256 for @xmath183 . for each @xmath215 and @xmath183 the checking variable @xmath257 is active ,",
    "hence there must be some vertex @xmath178 such that the vertex variable @xmath256 is active , in order to provide the precondition for the action @xmath258 .",
    "we conclude that for each @xmath259 , the set @xmath260 contains exactly one vertex @xmath223 such that @xmath261 and @xmath262 , @xmath183 are all active .",
    "we show that these vertices @xmath162 induce a clique in @xmath167 .",
    "since we have @xmath263 active edge variables and @xmath221 active vertex variables , each edge variable @xmath177 must provide the precondition for two actions in @xmath237 that make two vertex variables active .",
    "this is only possible if @xmath264 for @xmath265 , and the two vertex variables are @xmath256 and @xmath266 .",
    "we conclude that the active edge variables are exactly the variables @xmath267 , @xmath216 . hence , indeed",
    ", the vertices @xmath162 induce a clique in  @xmath167 .",
    "this concludes the proof of the claim .",
    "the theorem follows .",
    "[ the:03-bpe - hard ] @xmath268-bounded sas@xmath6  planning is @xmath170}}}$]-hard , even for binary instances .    by parameterized reduction from multicolored clique .",
    "let @xmath269 be an instance of this problem where @xmath158 , @xmath159 is the partition of @xmath160 , @xmath270 and parameter @xmath4 .",
    "we construct a @xmath268-bounded sas@xmath6  planning instance @xmath271 with @xmath138 such that @xmath13 has a multicolored clique of size at most @xmath4 if and only if @xmath116 has a plan of length at most @xmath35 .",
    "we set @xmath272 , @xmath273 , @xmath145 , @xmath274}}=1 $ ] for every @xmath275 and @xmath115}}=0 $ ] for every @xmath276 .",
    "furthermore , the set @xmath86 contains the following actions :    * for every @xmath276 one action @xmath203 with @xmath277}}=0 $ ] ; * for every @xmath278 with @xmath279 and @xmath280 one action @xmath281 with @xmath282}}=1 $ ] , @xmath283}}=1 $ ] , and @xmath284}}=1 $ ] .    clearly , @xmath116 is binary and no action in @xmath86 has any precondition or more than @xmath285 effects",
    ". the theorem will follow after we have shown the following claim .",
    "[ claim : clique ] @xmath167 contains a @xmath4-clique if and only if @xmath116 has a plan of length at most @xmath286 .",
    "suppose that @xmath167 contains a @xmath4-clique with vertices @xmath162 and edges @xmath287 .",
    "then @xmath288 is a plan of length @xmath35 for  @xmath116 .",
    "for the reverse direction suppose that @xmath104 is a plan of length at most @xmath35 for @xmath116 .",
    "because @xmath289}}=0 \\neq    { { { g}[{p_{i , j}}]}}=1 $ ] the plan @xmath104 has to contain at least one action @xmath281 where @xmath8 is an edge between a vertex in @xmath260 and a vertex in @xmath290 for every @xmath166 . because @xmath291}}=1 \\neq { { { g}[{v_i}]}}=0 $ ] and @xmath292}}=1 \\neq { { { g}[{v_j}]}}=0 $ ] for every such edge @xmath8 it follows that @xmath104 has to contain at least one action @xmath293 with @xmath198 for every @xmath294 .",
    "because @xmath286 it follows that @xmath104 contains exactly @xmath295 actions of the form @xmath281 for some edge @xmath296 and exactly @xmath4 actions of the form @xmath203 for some vertex @xmath276 .",
    "it follows that the graph @xmath297 is a @xmath4-clique of  @xmath167 .",
    "our membership results are based on _ first - order logic ( fo ) model checking_. for a class @xmath298 of fo formulas we define the following parameterized problem .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath298-fo  model  checking + _ instance : _ a finite structure @xmath299 , an fo formula @xmath300 .",
    "+ _ parameter : _ the length of @xmath301 .",
    "+ _ question : _ does @xmath302 , i.e. , is @xmath299 a model for @xmath301 ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    let @xmath303 be the class of all fo formulas of the form @xmath304 where @xmath47 is arbitrary and @xmath301 is a quantifier - free fo formula .",
    "for every positive integer @xmath305 , let @xmath306 denote the class of all fo formulas of the form @xmath307 where @xmath47 is arbitrary and @xmath301 is a quantifier - free fo formula .",
    "the following connections between model checking and parameterized complexity classes are known .",
    "[ pro : fo - model - w1 ] [ pro : fo - model - w2 ] the problem @xmath303-fo  model  checking is @xmath170}}}$]-complete . for every positive integer @xmath305",
    "the problem @xmath306-fo  model  checking is @xmath135}}}$]-complete .",
    "we will reduce bounded sas@xmath6  planning to @xmath298-fo  model  checking .",
    "we start by defining a relational structure @xmath308 for an arbitrary bounded sas@xmath6  planning instance @xmath309 with @xmath138 as follows :    * the universe of @xmath308 is @xmath310 , where @xmath311 is a novel element that represents a `` dummy '' action ( which we need for technical reasons ) . * @xmath308 contains the unary relations @xmath312 , @xmath313 , @xmath314 , and @xmath315 together with the following relations of higher arity : * * @xmath316={x}\\se$ ] , * * @xmath317={x}\\neq { { \\mathbf{u}}}\\se$ ] , * * @xmath318 \\neq { { \\mathbf{u}}}\\se$ ] , * * @xmath319 } } \\neq { { \\mathbf{u}}}\\se$ ] , * * @xmath320 = { x}\\neq { { \\mathbf{u}}}\\se $ ] * * @xmath321}}={x}\\neq { { \\mathbf{u}}}\\se$ ] .    [ in - w2 ] bounded sas@xmath6  planning   is in @xmath135}}}$ ] .",
    "we procced by parameterized reduction to the problem @xmath322-fo  model  checking , which is @xmath135}}}$]-complete by proposition  [ pro : fo - model - w1 ] .",
    "let @xmath309 with @xmath138 ) be an instance of bounded sas@xmath6  planning .",
    "we construct an instance @xmath323 of @xmath322-fo  model  checking such that @xmath324 has a solution if and only if @xmath325 has a solution and the length of the formula @xmath301 is bounded by some function that only depends on the parameter @xmath4 . for the definition of @xmath301",
    "we need the following auxiliary formulas . in the following",
    "let @xmath326 .",
    "we define the formula @xmath327 , which holds if the variable @xmath82 has value @xmath328 after applying the actions @xmath329 to the initial state .",
    "this formula is inductively defined as follows .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath330    @xmath331    @xmath332 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we also define the formula @xmath333 which holds if the variable @xmath82 has the value @xmath328 after the actions @xmath334 have been applied to the initial state , whenever @xmath328 is the precondition of the action @xmath111 on the variable @xmath82 .",
    "the formula is defined as follows .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath335 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we further define the formula @xmath336 which holds if the formula @xmath337 holds for every @xmath326 .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath338 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    finally , we define the formula @xmath339 which holds if whenever @xmath328 is the goal on the variable @xmath82 , then the variable @xmath82 has the value @xmath328 after the actions @xmath340 have been applied to the initial state .",
    "the formula is defined as follows .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath341 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we can now define the formula @xmath301 itself as :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath342    @xmath343 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    evidently @xmath344 , the length of @xmath301 is bounded by some function that only depends on @xmath4 and @xmath345 if and only if @xmath116 has a plan of length at most @xmath4 .",
    "the `` dummy '' action ( @xmath311 ) guarantees that there is a plan of length exactly @xmath4 whenever there is a plan of length at most @xmath4 .",
    "our next results shows that if we restrict ourselves to unary planning instances then bounded sas@xmath6  planning  becomes easier ( at least from the parameterized point of view ) .",
    "we show @xmath170}}}$]membership of @xmath346-bounded sas@xmath6  planning  by reducing it to the @xmath303fo model checking problem . the basic idea behind the proof is fairly similar to the proof of theorem  [ in - w2 ] .",
    "however , we can not directly express within @xmath303 that all the preconditions of an action are satisfied , since we are not allowed to use universal quantifications within  @xmath347 .",
    "hence , we avoid the universal quantification with a trick : we observe that the preconditions only need to be checked with respect to at most @xmath4 `` important '' variables , that is , the variables in which the preconditions of an action differ from the initial state .",
    "since we only consider unary planning instances there can be at most @xmath4 such variables .",
    "hence , it becomes possible to guess the important variables using only existential quantifiers .",
    "it remains to check that all the important variables are among these guessed variables .",
    "we do this without universal quantification by adding dummy elements @xmath348 and a relation @xmath349 to the relational structure @xmath350 .",
    "the relation associates with each action exactly @xmath4 different elements .",
    "these elements consist of all the important variables of the action , say the number of these variables is @xmath35 , plus @xmath351 dummy elements . hence , by guessing these @xmath4 elements and eliminating the dummy elements , the formula knows all the important variables of the action and can check their preconditions without using universal quantification .    to accommodate the `` dummy '' elements we start by defining a new extended structure @xmath352 for an arbitrary bounded sas@xmath6  planning instance @xmath309 with @xmath138 . for a partial state @xmath353 and an action @xmath354 we define the following sets . @xmath355 } } \\neq    { { \\mathbf{u}}}\\textup { and } { { s[{v } ] } } \\neq { { { i}[{v } ] } } \\se\\\\     { \\textup{diff}}(a ) & { \\;=\\ ; } & { \\textup{diff}}({\\mathrm{pre}}(a)).\\end{aligned}\\ ] ] we define the structure @xmath356 as follows .    *",
    "the universe @xmath357 of @xmath356 consists of the elements of the universe of @xmath308 plus @xmath4 novel `` dummy '' elements @xmath358 .",
    "* @xmath356 contains all relations of @xmath308 and additionally the following relations .",
    "* * a unary relation @xmath359 . * * a binary relation @xmath360 . * * a unary relation @xmath361 .    before we show that @xmath346-bounded sas@xmath6  planning is in @xmath170}}}$ ] we need some simple observations about planning .",
    "let @xmath138 be a sas@xmath6  planning instance , @xmath362 , and @xmath353 .",
    "we denote by @xmath363 the state @xmath95 restricted to the variables in @xmath364 and by @xmath365 the set of actions obtained from the actions in @xmath86 after restricting the preconditions and effects of every such action to the variables in @xmath364 .",
    "furthermore , we denote by @xmath366 the sas@xmath6  planning instance @xmath367 .",
    "[ pro : checkx ] let @xmath368 be a sequence of actions from @xmath86 .",
    "then @xmath104 is a plan for @xmath116 if and only if @xmath104 is a plan for @xmath369 where @xmath370 } } \\neq { { \\mathbf{u}}}\\textup { and } 1 \\leq i \\leq l \\se$ ]    if @xmath104 is a plan for @xmath116 , then @xmath104 is a plan for @xmath366 whenever @xmath362 . in particular , @xmath104 is a plan for @xmath369 .    for the reverse direction assume for a contradiction that @xmath371 is",
    "a plan for @xmath369 but @xmath104 is not a plan for @xmath116 .",
    "there are two possible reasons for this : ( 1 ) a precondition of some action @xmath111 for @xmath372 , is not met or ( 2 ) the goal state is not reached after having completed the plan .    in the first case , consider the state @xmath95 that @xmath111 is applied in .",
    "then there is a variable @xmath96 such that @xmath84 } } \\neq { { { \\mathrm{pre}}(a_i)[{v } ] } } \\neq { { \\mathbf{u}}}$ ] .",
    "there are two cases to consider :    1 .",
    "@xmath373}}={x}\\neq { { \\mathbf{u}}}$ ] and @xmath374}}={x}$ ] . in this case",
    "an action @xmath375 for some @xmath376 has changed the variable @xmath82 and @xmath377 } } \\neq { { \\mathbf{u}}}\\textup { and } 1 \\leq i \\leq l \\se$ ] .",
    "2 .   @xmath373}}={x}$ ] , @xmath378}}={x } ' \\neq      { { \\mathbf{u}}}$ ] , and @xmath379 .",
    "this implies that @xmath380 .",
    "hence , in both cases we obtain that @xmath381 and that @xmath104 is a plan for @xmath116 .    in the second case , consider the state @xmath29 after applying @xmath104 to the initial state .",
    "then there is a variable @xmath96 such that @xmath84 } } \\neq { { { g}[{v } ] } } \\neq { { \\mathbf{u}}}$ ] .",
    "there are two cases to consider :    1 .",
    "@xmath373}}={x}\\neq { { \\mathbf{u}}}$ ] and @xmath115}}={x}$ ] . in this case",
    "an action @xmath375 for some @xmath382 has changed the variable @xmath82 and @xmath377 } } \\neq { { \\mathbf{u}}}\\textup { and } 1 \\leq i \\leq l \\se$ ] .",
    "2 .   @xmath373}}={x}$ ] , @xmath115}}={x } ' \\neq      { { \\mathbf{u}}}$ ] , and @xmath379 .",
    "this implies that @xmath383 .",
    "hence , in both cases we obtain that @xmath381 and that @xmath104 is a plan for @xmath116 .",
    "[ pro : diffinpost ] let @xmath368 be a plan for @xmath116",
    ". then @xmath384 } } \\neq",
    "{ { \\mathbf{u}}}\\textup { and } 1 \\leq i \\leq l \\se$ ] .",
    "first assume that @xmath383 , i.e. @xmath385 } } \\neq { { \\mathbf{u}}}\\textup { and } { { { g}[{v } ] } } \\neq { { { i}[{v}]}}\\}$ ] .",
    "since @xmath104 is a plan for  @xmath116 it follows that there is an action @xmath375 in @xmath104 , which changes the value of @xmath82 , as required .",
    "then assume that @xmath386 for some @xmath382 , i.e. , @xmath387 } } \\neq { { \\mathbf{u}}}\\textup { and    } { { { \\mathrm{pre}}(a_j)[{v } ] } } \\neq { { { i}[{v}]}}\\}$ ] .",
    "again , since @xmath104 is a plan it follows that there is an action @xmath388 , @xmath389 in @xmath104 , which changes the value of @xmath82 , as required .",
    "[ cor : restriction - plan ] let @xmath368 be a sequence of actions from @xmath86 and @xmath390 } } \\neq { { \\mathbf{u}}}\\textup { and } 1    \\leq i \\leq l \\se$ ] .",
    "then @xmath104 is a plan for @xmath116 if and only if @xmath391 and @xmath104 is a plan for @xmath369 .",
    "[ in - w1 ] @xmath346-bounded sas@xmath6  planning  is in @xmath170}}}$ ] .",
    "we proceed by a parameterized reduction to the @xmath170}}}$]-complete problem @xmath303-fo  model  checking .",
    "let @xmath309 with @xmath138 be an instance of @xmath346-bounded sas@xmath6  planning .",
    "we construct an instance @xmath392 of @xmath303-fo  model  checking such that @xmath324 has a solution if and only if @xmath325 has a solution and the length of the formula @xmath301 is bounded by some function that only depends on the parameter  @xmath4 .    the formula @xmath301 uses the following existentially quantified variables :    * the variables @xmath393 .",
    "the values of these variables correspond to the at most @xmath4 actions of a plan for @xmath116 . * the variables @xmath394 .",
    "the values of these variables correspond to the variables that are involved in the effects of the actions assigned to @xmath393 , i.e. , it holds that @xmath395 } } \\neq { { \\mathbf{u}}}$ ] for every @xmath396 . because @xmath116 is unary there is at most one such variable for each of the at most @xmath4 actions in a potential plan for @xmath116 .",
    "* the variables @xmath358 .",
    "these variables are so - called `` dummy '' variables that we use to check the maximality of certain sets . * the variables @xmath397 .",
    "these variables are used to check the preconditions of the actions @xmath393 . here",
    "@xmath398 represents @xmath399}}$ ] for every @xmath400 . * the variables @xmath401 .",
    "these variables are used to check whether all conditions of the goal state are met after the actions @xmath393 have been executed on the initial state . here",
    "@xmath402 represents @xmath403}}$ ] .",
    "we define @xmath301 in such a way that @xmath404 if and only if there is a sequence of actions @xmath393 and a set @xmath390 } } \\neq { { \\mathbf{u}}}\\textup { and } 1 \\leq",
    "i \\leq k \\se$ ] of variables with @xmath405 such that @xmath393 is a plan for @xmath369 .",
    "because of corollary  [ cor : restriction - plan ] it then follows that @xmath404 if and only if there is a plan of length at most @xmath4 for @xmath116 .",
    "consequently , the formula @xmath301 has to ensure the following properties :    1 .   for every @xmath175",
    "if the variable @xmath111 is assigned to an action other than the `` dummy '' action ( @xmath311 ) , then the variable @xmath223 is assigned to the unique variable @xmath406 with @xmath407 } } \\neq { { \\mathbf{u}}}$ ] . in the following",
    "we denote by @xmath408 the variables in @xmath80 that are assigned to the variables @xmath394 .",
    "2 .   for every @xmath175 it holds that @xmath409 .",
    "3 .   @xmath410 .",
    "4 .   for every @xmath396",
    "all preconditions of the action @xmath111 on the variables @xmath394 are met after the execution of the actions @xmath411 on the initial state .",
    "the goal state on the variables @xmath394 is reached after the execution of the actions @xmath393 on the initial state .",
    "observe that the properties p1p3 ensure that the variables @xmath394 are assigned to a set of variables @xmath408 with @xmath390 } } \\neq { { \\mathbf{u}}}\\textup {      and } 1 \\leq i \\leq k \\se$ ] ( or to the `` dummy '' action ) and @xmath405 .",
    "the properties p4p5 make sure that the sequence of actions @xmath412 is a plan for @xmath369 .    the formula @xmath301 is composed of several auxiliary formulas that we define next .",
    "we define a formula @xmath413 that ensures property p1 , i.e. , @xmath395 } }    = x_i$ ] or @xmath414 for every @xmath175 .    _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath415 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    for every @xmath175",
    "we define a formula @xmath416 that holds if @xmath417 . to check this ,",
    "the formula checks that all of the exactly @xmath4 tuples in @xmath349 that contain @xmath111 ( recall the definition of the relation @xmath349 in the structure @xmath352 ) are tuples of the form @xmath418 or @xmath419 for some @xmath420 .    _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath421    @xmath422 $ ] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we define a formula that ensures property p2 .    _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath423 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    similarly to @xmath424 above we define a formula @xmath425 that ensures property p3 , i.e. , @xmath410 .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath426    @xmath427 $ ] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    for every @xmath175 , we define a formula @xmath428 that holds if the variable  @xmath82 has value @xmath328 after the actions @xmath429 have been executed on the initial state .",
    "we define the formulas inductively as follows .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath430    @xmath431 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    for every @xmath175",
    "we define a formula @xmath432 that holds if all preconditions of the action @xmath111 defined on the variables @xmath394 are met after the actions @xmath411 have been executed on the initial state .    _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath433 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we define a formula @xmath434 that ensures property p4 , i.e. , @xmath435 for every @xmath175 .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath436 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    finally , we define a formula @xmath437 that ensure property p5 , i.e. , all conditions of the goal state on the variables @xmath394 are met after the actions @xmath393 have been executed on the initial state .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath438 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    now we can use the above formulas to define the required formula @xmath301 .",
    "the formula starts with existential quantifiers over the variables @xmath439 , @xmath398 , and @xmath440 for every @xmath441 , followed by the conjunction of the following quantifier - free formulas :    * @xmath442 + @xmath443 * @xmath444 * @xmath445 * @xmath446 * @xmath447 * @xmath448    evidently @xmath449 , the length of @xmath301 is bounded by some function that only depends on @xmath4 , and @xmath404 if and only if @xmath369 ( and hence @xmath116 according to corollary  [ cor : restriction - plan ] ) has a plan of length at most @xmath4 .",
    "in this section we show that @xmath450-bounded sas@xmath6  planning and @xmath451-bounded sas@xmath6  planning are fixed - parameter tractable .",
    "this subsection is devoted to a proof of the following theorem .",
    "[ the : pfpt ] @xmath450-bounded sas@xmath6  planning is fixed - parameter tractable .",
    "let @xmath452 with @xmath453 , be an instance of @xmath450-bounded sas@xmath6  planning .",
    "first , we introduce some terminology on sequences of actions . for @xmath454 ,",
    "let @xmath368 be a sequence of actions from @xmath86 .",
    "we define @xmath455 .",
    "let @xmath456 .",
    "for @xmath457 we say that @xmath458 is _ required in @xmath104 between positions @xmath23 and @xmath459 _ if the following two conditions hold :    1 .",
    "either @xmath460 and the @xmath459-th element of @xmath104 is an action @xmath94 with @xmath97}}={x}$ ] , or @xmath461 and @xmath115}}={x}$ ] .",
    "@xmath23 is the smallest integer such that @xmath84}}\\neq { x}$ ] where @xmath95 is the state obtained after applying the actions @xmath462 to the initial state ( with @xmath463 if @xmath373}}\\neq { x}$ ] ) .",
    "if @xmath464 is required in @xmath104 between positions @xmath23 and @xmath459 , and @xmath94 is an action which sets @xmath82 to @xmath328 , then we also say that @xmath94 is required in @xmath104 ( between positions @xmath23 and @xmath459 ) .",
    "note that there can be at most one such action since @xmath116 is post - unique .",
    "the following claim is immediate from the above definitions .",
    "[ claim : fpt1 ] @xmath104 is a plan for @xmath116 if and only if there is no pair @xmath456 which is required in @xmath104 between some positions @xmath457 .",
    "[ claim : fpt2 ] if @xmath104 is a subsequence of some plan @xmath465 for @xmath116 , and @xmath458 is required in @xmath104 between some positions @xmath23 and @xmath459 with @xmath466 .",
    "then the following holds :    1 .",
    "@xmath465 must contain the unique action @xmath94 with @xmath101}}={x}$ ] .",
    "2 .   for some @xmath467 ,",
    "the sequence @xmath468 is a subsequence of @xmath465 .    if @xmath460 , then clearly without an action @xmath94 that sets @xmath82 to @xmath328 we can not meet the precondition of the @xmath459-th action of @xmath104 .",
    "similarly , if @xmath461 , then without an action @xmath94 that sets @xmath82 to @xmath328 we can not reach the goal state .",
    "since @xmath116 is post - unique , there is at most one such action @xmath94 , hence the first statement of the claim follows .",
    "we further observe that @xmath465 can be obtained from @xmath104 by inserting actions , and one of these inserted actions must be @xmath94 , hence the second statement of the claim follows .",
    "the above considerations suggest that we can find a plan by starting with the empty sequence , and as long as there is a required action , guessing its position and insert it into the sequence .",
    "next we describe an algorithm that follows this general idea .",
    "it constructs a search tree , where every node of the tree is labeled with a sequence of actions .",
    "each leaf of the tree is marked either as a `` success node '' if its label is a plan of length at most @xmath4 , or as a `` failure node '' if its label is not a subsequence of a plan of length at most @xmath4 .",
    "the algorithm not only decides whether there exists a plan of length at most @xmath4 , but it even lists all minimal plans of length at most @xmath4 ( a plan is called _ minimal _ if none of its proper subsequences is a plan ) .",
    "we start with a trivial tree consisting of just a root , labeled with the empty sequence , and recursively extend this tree .",
    "assume that @xmath469 is the search tree constructed so far .",
    "consider a leaf @xmath0 of @xmath469 labeled with a sequence @xmath104 of length @xmath470 . if @xmath104 is a plan we can mark @xmath0 as a success node , and we do not need to extend the search tree below @xmath0 .",
    "otherwise , by claim  [ claim : fpt1 ] , there is some @xmath456 and some @xmath471 such that @xmath458 is required in @xmath104 between positions @xmath23 and @xmath459 ( clearly we can find @xmath472 in polynomial time ) .",
    "hence , some action needs to be added to make @xmath104 a plan . if @xmath473 or if @xmath86 does not contain an action which sets @xmath82 to @xmath328 , we know that @xmath104 is not a subsequence of any plan of length at most  @xmath4 , and we can mark @xmath0 as a failure node . we do not need to extend the search tree below @xmath0 .",
    "it remains to consider the case where @xmath474 and @xmath86 contains an action @xmath94 which sets @xmath82 to @xmath328 .",
    "since @xmath116 is post - unique , there is exactly one such  @xmath94 .",
    "we need to insert @xmath94 into @xmath104 between the positions @xmath23 and @xmath459 , but we do nt know where . however , there are only @xmath475 possibilities",
    ". therefore we add below @xmath0 a child @xmath476 for each possibility @xmath477 , and we label @xmath476 with the sequence @xmath478",
    ". eventually we arrive at a search tree @xmath469 where all its leaves are marked either as success or failure nodes .",
    "the depth of @xmath469 is at most @xmath4 , since each node of @xmath469 of depth @xmath479 is labeled with a sequence of length @xmath479 , and we do not add nodes with sequences of length greater than @xmath4 .",
    "each node has at most @xmath4 children .",
    "hence @xmath469 has @xmath480 many nodes . as the time required for each node",
    "is polynomial , building the search tree is fixed - parameter tractable for parameter @xmath4 .    [ claim : fpt3 ] let @xmath104 be a minimal plan of length @xmath470 .",
    "then for each @xmath481 the tree @xmath469 has a node @xmath482 of depth @xmath479 such that the label of @xmath482 is a subsequence of @xmath104 .",
    "we show the claim by induction on @xmath479 .",
    "the claim is evidently true for @xmath483 .",
    "let @xmath484 and assume the claim holds for @xmath485 .",
    "consequently , there is a tree node @xmath486 at depth @xmath485 which is labeled with a subsequence @xmath487 of @xmath104 . since @xmath487 is a proper subsequence of  @xmath104 , and since @xmath104 is assumed to be a minimal plan , @xmath487 is not a plan ; thus @xmath486 is not a success node .",
    "since @xmath487 is a subsequence of  @xmath104 , it is not a failure node either .",
    "hence @xmath486 must have children .",
    "consequently there is some pair @xmath456 which is required in @xmath487 between some positions @xmath488 , and @xmath486 has @xmath489 children , each labeled with a sequence @xmath490 , where @xmath94 is the unique action from @xmath86 that sets @xmath82 to  @xmath328 . by claim  [ claim : fpt2 ] ,",
    "at least one of the children of @xmath486 is labeled with a subsequence of @xmath104 , hence the induction step holds true , and claim  [ claim : fpt3 ] follows .",
    "claim  [ claim : fpt3 ] entails as the special case @xmath491 that @xmath104 appears as the label of a success node .",
    "we conclude that each minimal plan of @xmath116 of length at most @xmath4 appears as the label of some success node of @xmath469 .",
    "hence , once we have constructed the search tree @xmath469 , we can list all minimal plans of length at most @xmath4 .",
    "in particular , we can decide whether there exists a plan of length at most @xmath4 and theorem  [ the : pfpt ] follows .    in",
    "is interesting to note that the same result can be obtained by a slight adaption of the standard partial - ordering planning algorithm by mcallester and rosenblitt  @xcite .",
    "this suggests that many successful applications of planning might be cases where the problem is `` almost tractable '' and the algorithm used happens to implicitly exploit this .",
    "the details of how to modify this algorithm to obtain an fpt algorithm for @xmath450-bounded sas@xmath6  planning can be found in one of our previous papers  @xcite .",
    "before we show that @xmath451-bounded sas@xmath6  planning is fixed - parameter tractable we need to introduce some notions and prove some simple properties of @xmath451-bounded sas@xmath6  planning .",
    "let @xmath138 be an instance of bounded sas@xmath6  planning .",
    "we say an action @xmath89 has an effect on some variable @xmath96 if @xmath101}}\\neq { { \\mathbf{u}}}$ ] .",
    "we call this effect _ good _ if furthermore @xmath101}}={{{g}[{v}]}}$ ] or @xmath115}}={{\\mathbf{u}}}$ ] and we call the effect _ bad _ otherwise .",
    "we say an action @xmath89 is _ good _ if it has only good effects , _ bad _ if it has only bad effects , and _",
    "mixed _ if it has at least one good and at least one bad effect .",
    "note that if a valid plan contains a bad action then this action can always be removed without changing the validity of the plan .",
    "consequently , we only need to consider good and mixed actions .",
    "furthermore , we write @xmath492 to denote the set of variables @xmath96 such that @xmath115}}\\neq{{\\mathbf{u}}}$ ] and @xmath373 } } \\neq { { { g}[{v}]}}$ ] .",
    "the next lemma shows that we do not need to consider good actions with more than  @xmath46 effect for @xmath451-bounded sas@xmath6  planning .",
    "[ lem : nodoublegoodactions ] there is a parameterized reduction from @xmath451-bounded sas@xmath6  planning to @xmath451-bounded sas@xmath6  planning that maps an instance @xmath493 to an instance @xmath494 where @xmath495 and no good action of @xmath139 affects more than one variable .",
    "furthermore , if @xmath116 is binary , then also @xmath496 is binary .",
    "the required instance @xmath139 is constructed from @xmath13 as follows .",
    "@xmath364 contains the following variables :    * all variables in @xmath80 ; * one binary variable @xmath29 ; * for every action @xmath89 and every @xmath497 one binary variable @xmath498 ;    @xmath499 contains the following actions :    * for every mixed action @xmath89 that has a good effect on the variable @xmath82 and a bad effect on the variable @xmath500 , there is * * one action @xmath501 such that @xmath502}}={{{\\mathrm{eff}}(a)[{v'}]}}$ ] and + @xmath503}}=0 $ ] , * * one action @xmath504 for all @xmath505 such that @xmath506}}=1 $ ] + and @xmath507}}=0 $ ] , as well as * * one action @xmath508 such that @xmath509}}=1 $ ] and + @xmath510}}={{{\\mathrm{eff}}(a)[{v}]}}$ ] ; * for every good action @xmath89 that has only one effect on the variable @xmath82 , there is * * one action @xmath511 such that @xmath512}}=1 $ ] and + @xmath503}}=0 $ ] , * * one action @xmath504 for all @xmath505 such that @xmath506}}=1 $ ] + and @xmath507}}=0 $ ] , as well as * * one action @xmath508 such that @xmath509}}=1 $ ] and + @xmath510}}={{{\\mathrm{eff}}(a)[{v}]}}$ ] ; * for every good action @xmath89 that has two effects on the variables @xmath82 and @xmath500 , there is * * one action @xmath501 such that @xmath512}}=1 $ ] and @xmath503}}=0 $ ] , * * one action @xmath504 for all @xmath513 such that @xmath506}}=1 $ ] + and @xmath507}}=0 $ ] , * * one action @xmath514 such that @xmath515}}=1 $ ] and + @xmath516}}={{{\\mathrm{eff}}(a)[{v}]}}$ ] , as well as * * one action @xmath508 such that @xmath517}}=1 $ ] and + @xmath518}}={{{\\mathrm{eff}}(a)[{v'}]}}$ ] ; * one action @xmath519 with @xmath520}}=0 $ ] .",
    "we set @xmath521 , @xmath522}}={{{i}[{v}]}}$ ] for every @xmath96 , @xmath522}}=0 $ ] for every @xmath523 , @xmath524}}={{{g}[{v}]}}$ ] for every @xmath96 , @xmath524}}=0 $ ] for every @xmath523 , and @xmath525 .    the main idea of the reduction is to replace every action @xmath94 in @xmath116 with @xmath526 new actions that form a chain that has the same effect as @xmath94 if all its actions are included in the plan .",
    "( for an action with two good effects , it is possible to achieve only one of these by including @xmath527 actions ) . clearly , @xmath139 can be constructed from @xmath13 by an algorithm that is fixed - parameter tractable ( with respect to @xmath4 ) and @xmath139 is an instance of @xmath451-bounded sas@xmath6  planning where no good action affects more than @xmath46 variable .",
    "furthermore , all new variable domains introduced are binary so @xmath496 has the same maximum domain size as @xmath116 .",
    "it remains to show that @xmath139 is equivalent to @xmath13 .",
    "suppose that @xmath368 is a plan of length at most @xmath4 for @xmath116 .",
    "then + @xmath528 is a plan of length @xmath529 for @xmath496 .    to see the reverse direction suppose that @xmath530 is a minimal ( with respect to sub sequences ) plan of length at most @xmath35 for @xmath496 .",
    "we say that @xmath487 _ uses _ an action @xmath89 if @xmath531 for some @xmath532 .",
    "we also define an order of the actions used by @xmath487 in the natural way , i.e. , for two actions @xmath533 that are used by @xmath487 we say that @xmath94 is smaller than @xmath534 if the first occurrence of an action @xmath504 ( for some @xmath535 ) in @xmath487 is before the first occurrence of an action @xmath536 ( for some @xmath532 ) in @xmath487 .",
    "let @xmath537 be the ( unique ) sequence of actions in @xmath86 that are used by @xmath487 whose order corresponds to the order in which there are used by @xmath487 . clearly , @xmath104 is a plan for @xmath116 .",
    "it remains to show that @xmath470 for which we need the following claim .",
    "[ appendix - clm : many - or - no - actions ] if @xmath487 uses some action @xmath89 then @xmath487 contains at least @xmath527 actions from @xmath538 .",
    "let @xmath23 be the largest integer with @xmath539 such that @xmath504 occurs in @xmath487 .",
    "we first show by induction on @xmath23 that @xmath487 contains all actions in @xmath540 .",
    "clearly , if @xmath541 there is nothing to show , so assume that @xmath542 .",
    "the induction step follows from the fact that the action @xmath504 has a bad effect on the variable @xmath543 and the action @xmath544 is the only action of @xmath496 that has a good effect on @xmath543 and hence @xmath487 has to contain the action @xmath544 .",
    "it remains to show that @xmath545 .",
    "suppose for a contradiction that @xmath546 and consequently the action @xmath547 is not contained in @xmath487 . because the action @xmath547 is the only action of @xmath496 that has a bad effect on the variable @xmath498 it follows that the variable @xmath498 remains in the goal state over the whole execution of the plan @xmath487 .",
    "but then @xmath487 without the action @xmath548 would still be a plan for @xmath496 contradicting our assumption that @xmath496 is minimal with respect to sub sequences .",
    "it follows from claim  [ appendix - clm : many - or - no - actions ] that @xmath487 uses at most @xmath549 actions from @xmath86 . hence , @xmath156 proving the lemma .",
    "we are now ready to show that @xmath451-bounded sas@xmath6  planning is fixed - parameter tractable .",
    "[ the:02fpt ] @xmath451-bounded sas@xmath6  planning is fixed - parameter tractable .",
    "we show fixed - parameter tractability of @xmath451-bounded sas@xmath6  planning by reducing it to the following fixed - parameter tractable problem . the problem has originally been shown to be fixed - parameter tractable for undirected graphs  @xcite . later",
    "guo , niedermeier , and suchy mentioned that this result can be directly transferred to the directed case  @xcitedirected steiner tree + _ instance : _ a set of nodes @xmath550 , a weight function @xmath551 , a root node @xmath552 , a set @xmath553 of terminals , and a weight bound @xmath7 .",
    "+ _ parameter : _ @xmath554 .",
    "+ _ question : _ is there a set of arcs @xmath555 of weight @xmath556 ( where @xmath557 ) such that in the digraph @xmath558 for every @xmath559 there is a directed path from @xmath95 to @xmath47 ? we will call the digraph @xmath1 a _ directed steiner tree ( dst ) _ of weight @xmath560 . _",
let @xmath493 where @xmath138 be an instance of @xmath451-bounded sas@xmath6  planning . because of lemma  [ lem : nodoublegoodactions ] we can assume that @xmath86 contains no good actions with two effects .",
    "we construct an instance @xmath561 of directed steiner tree where @xmath562 such that @xmath116 has a plan of length at most @xmath4 if and only if @xmath139 has a directed steiner tree of weight at most @xmath7 . because @xmath562 this shows that @xmath451-bounded sas@xmath6  planning is fixed - parameter tractable .",
    "we are now ready to define the instance @xmath139 .",
    "the node set @xmath550 consists of the root vertex @xmath95 and one node for every variable in @xmath80 .",
    "the weight function @xmath563 is @xmath564 for all but the following arcs :    * for every good action @xmath89 the arc from @xmath95 to the unique variable @xmath96 that is affected by @xmath94 gets weight  @xmath46 .",
    "* for every mixed action @xmath89 with a good effect on some variable @xmath565 and a bad effect on some variable @xmath566 , the arc from @xmath567 to @xmath568 gets weight  @xmath46 .",
    "we identify the root @xmath95 from the instance @xmath13 with the node @xmath95 , we let @xmath469 be the set @xmath492 , and @xmath569 .    [ claim : dst ] @xmath116 has a plan of length at most @xmath4 if and only if @xmath139 has a dst of weight at most @xmath569 .",
    "suppose @xmath116 has a plan @xmath570 with @xmath571 . without losing generality",
    "we can assume that @xmath104 contains no bad actions .",
    "the arc set @xmath572 that corresponds to @xmath104 consists of the following arcs :    * for every good action @xmath573 that has its unique good effect on a variable @xmath96 , the set @xmath572 contains the arc from @xmath95 to @xmath82 . * for every mixed action @xmath573 with a good effect on some variable @xmath568 and a bad effect on some variable @xmath567 , the set @xmath572 contains an arc from @xmath567 to @xmath568 .    intuitively , for case ( ii ) , note that @xmath94 has a bad effect on @xmath567 , i.e. it sets @xmath567 to a different value than its goal value , so @xmath94 must be followed by some sequence @xmath574 of actions where only the last one is good and the others are mixed .",
    "this will provide a path in the dst from the root to @xmath567 .",
    "more formally , it follows that the weight of @xmath572 equals the number of actions in @xmath104 and hence is at most @xmath575 as required .",
    "it remains to show that the digraph @xmath576 is a dst , i.e. , @xmath1 contains a directed path from the vertex @xmath95 to every vertex in @xmath469 .",
    "suppose to the contrary that there is a terminal @xmath559 that is not reachable from @xmath95 in  @xmath1 .",
    "furthermore , let @xmath577 be the set of all arcs in @xmath572 such that @xmath1 contains a directed path from the tail of every arc in @xmath123 to @xmath47 .",
    "it follows that no arc in @xmath123 is incident to @xmath95 . hence , @xmath123 only consists of arcs that correspond to mixed actions in @xmath104 . if @xmath578 then the plan @xmath104 does not contain an action that affects the variable @xmath47 . but this contradicts our assumption that @xmath104 is a plan ( because @xmath579 ) .",
    "hence , @xmath580 . let @xmath94 be the mixed action corresponding to the arc in @xmath123 that occurs last in @xmath104 ( among all mixed actions that correspond to an arc in @xmath123 ) .",
    "furthermore , let @xmath96 be the variable that is badly affected by @xmath94",
    ". then @xmath104 can not be a plan because after the occurrence of @xmath94 in @xmath104 there is no action in @xmath104 that affects @xmath82 and hence @xmath82 can not be in the goal state after @xmath104 is executed .    to see the reverse direction , let @xmath555 be a solution of @xmath13 and let @xmath581 be the dst .",
    "without losing generality we can assume that @xmath1 is a directed acyclic tree rooted in @xmath95 ( this follows from the minimality of @xmath1 ) .",
    "we obtain a plan @xmath104 of length at most @xmath7 for @xmath116 by traversing the dst @xmath1 in a bottom - up manner .",
    "more formally , let @xmath479 be the maximum distance from @xmath95 to any node in @xmath469 , and for every @xmath582 let @xmath583 be the set of actions in @xmath86 that correspond to arcs in @xmath572 whose tail is at distance @xmath23 from the node @xmath95",
    ". then @xmath584 ( for every @xmath585 the actions contained in @xmath586 can be executed in an arbitrary order ) is a plan of length at most @xmath587 for @xmath116 .",
    "in the previous sections we have classified the parameterized complexity of bounded sas@xmath6  planning . it turned out that the problems fall into four categories ( see figure  [ fig : pubs - lattice ] ) :    * polynomial - time solvable , * np - hard but fixed - parameter tractable , * @xmath170}}}$]complete , and * @xmath135}}}$]complete .",
    "the aim of this section is to further refine this classification with respect to kernelization .",
    "the problems in category  ( i ) trivially admit a kernel of constant size , whereas the problems in categories  ( iii ) and ( iv ) do not admit a bi - kernel at all ( polynomial or not ) , unless @xmath170}}}={{{\\mbox{\\textnormal{\\textbf{fpt}}}}}}$ ] or @xmath135}}}={{{\\mbox{\\textnormal{\\textbf{fpt}}}}}}$ ] , respectively .",
    "hence it remains to consider the problems in category  ( ii ) , each of them could either admit a polynomial bi - kernel or not .",
    "we show that none of them does .      according to our classification so far , the only problems in category  ( ii ) with respect to the pubs - restrictions are the problems @xmath123-bounded sas@xmath6  planning , for @xmath588 such that @xmath589 and @xmath590 .",
    "[ thm : nopolykernel - p ] none of the problems @xmath123-bounded sas@xmath6  planning for @xmath588 such that @xmath589 and @xmath590 ( i.e. , the problems in category  ( ii ) ) admits a polynomial bi - kernel unless @xmath5 .",
    "the remainder of this section is devoted to establish the above theorem .",
    "the relationships between the problems as indicated in figure  [ fig : pubs - lattice ] greatly simplify the proof . instead of considering all six problems separately , we can focus on the two most restricted problems @xmath591-bounded sas@xmath6  planning and @xmath592-bounded sas@xmath6  planning . if any other problem in category  ( ii ) would have a polynomial bi - kernel , then",
    "at least one of these two problems would have one .",
    "this follows by proposition  [ pro : poly - par - reduction - bi ] and the following facts :    1 .",
    "the unparameterized versions of all the problems in category  ( ii ) are -hard .",
    "this holds since the corresponding classical problems are strongly -hard , i.e. , the problems remain -hard when @xmath4 is encoded in unary ( as shown by bckstrm and nebel @xcite ) ; 2 .   if @xmath593 then the identity function gives a polynomial parameter reduction from @xmath594-bounded sas@xmath6  planning to @xmath595-bounded sas@xmath6  planning .",
    "furthermore , the following result of bckstrm and nebel even provides a polynomial parameter reduction from @xmath591-bounded sas@xmath6  planning to @xmath592-bounded sas@xmath6  planning .",
    "consequently , @xmath591-bounded sas@xmath6  planning remains the only problem for which we need to establish a super - polynomial bi - kernel lower bound .",
    "[ pro : from - pb - to - pbs ] let @xmath493 be an instance of @xmath591-bounded sas@xmath6  planning . then @xmath13 can be transformed in polynomial time into an equivalent instance @xmath494 of @xmath592-bounded sas@xmath6  planning such that @xmath596 .    hence , in order to complete the proof of theorem  [ thm : nopolykernel - p ] it only remains to establish the next lemma .",
    "[ lem : nopolykernel - pub ] @xmath591-bounded sas@xmath6  planning has no polynomial bi - kernel unless @xmath5 .    because of proposition  [ pro : strong - or - comp - no - poly - kernel ] , it suffices to devise a strong or - composition algorithm for @xmath591-bounded sas@xmath6  planning .",
    "suppose we are given @xmath47 instances @xmath597 of @xmath591-bounded sas@xmath6  planning where @xmath598 for every @xmath599 .",
    "let @xmath600 . according to theorem  [ the : pfpt ] , @xmath591-bounded sas@xmath6  planning can be solved in time @xmath601 ( where @xmath602 and the @xmath603 notation suppresses polynomial factors ) .",
    "it follows that @xmath591-bounded sas@xmath6  planning can be solved in polynomial time with respect to @xmath49 if @xmath604 .",
    "hence , if @xmath604 this gives us a strong or - composition algorithm as follows .",
    "we first run the algorithm for @xmath591-bounded sas@xmath6  planning on each of the @xmath47 instances . if there is some @xmath23 , where @xmath51 , such that @xmath605 has a plan of length at most @xmath606 , then arbitrarily choose such an @xmath23 and output @xmath607 .",
    "otherwise , arbitrarily output any of the instances @xmath608 .",
    "this shows that @xmath591-bounded sas@xmath6  planning has a strong or - composition algorithm for the case where @xmath604 .",
    "hence , in the following we can assume that @xmath609 .",
    "given @xmath608 we will construct an instance @xmath610 of @xmath591-bounded sas@xmath6  planning as follows .",
    "for the construction of @xmath13 we need the following auxiliary gadget , which will be used to calculate the logical `` or '' of two binary variables .",
    "the construction of the gadget uses ideas from bckstrm and nebel  ( * ? ? ? * theorem 4.15 ) .",
    "assume that @xmath611 and @xmath612 are two binary variables .",
    "the gadget @xmath613 consists of the five binary variables @xmath614 , @xmath615 , @xmath616 , @xmath617 , and @xmath618 .",
    "furthermore , @xmath613 contains the following actions :    * the action @xmath619 with @xmath620}}={{{\\mathrm{pre}}(a_o)[{o_2}]}}=1 $ ] and @xmath621}}=1 $ ] ; * the action @xmath622 with @xmath623}}=1 $ ] ,",
    "@xmath624}}=0 $ ] and @xmath625}}=1 $ ] ; * the action @xmath626 with @xmath627}}=0 $ ] , @xmath628}}=1 $ ] and @xmath629}}=1 $ ] ; * the action @xmath630 with @xmath631}}=1 $ ] ; * the action @xmath632 with @xmath633}}=1 $ ] ; * the action @xmath634 with @xmath635}}=1 $ ] and @xmath636}}=0 $ ] ; * the action @xmath637 with @xmath638}}=1 $ ] and @xmath639}}=0 $ ] ;    we now show that @xmath613 can indeed be used to compute the logical `` or '' of the variables @xmath611 and @xmath612 .",
    "we need to show the following claim .",
    "[ clm : pub - nokernel-2or ] let @xmath640 be a @xmath591-bounded sas@xmath6  planning instance that consists of the two binary variables @xmath611 and @xmath612 , and the variables and actions of the gadget @xmath613 .",
    "furthermore , let the initial state of @xmath640 be any initial state that sets all variables of the gadget @xmath613 to @xmath211 but assigns the variables @xmath611 and @xmath612 arbitrarily , and let the goal state of @xmath640 be defined by @xmath641}}=1 $ ] .",
    "then @xmath640 has a plan if and only if its initial state sets at least one of the variables @xmath611 or @xmath612 to @xmath46 .",
    "furthermore , if there is such a plan then its length is @xmath642 .",
    "suppose that there is a plan @xmath104 for @xmath640 and assume for a contradiction that both variables @xmath611 and @xmath612 are initially set to @xmath211 .",
    "it is easy to see that the value of @xmath611 and @xmath612 can not change during the whole duration of the plan and that @xmath104 has to contain the actions @xmath622 and @xmath626 . without losing generality",
    "we can assume that @xmath104 contains @xmath622 before it contains @xmath626 .",
    "because of the preconditions of the actions @xmath622 and @xmath626 , the variable @xmath617 must have value @xmath46 before @xmath622 occurs in @xmath104 and it must have value @xmath211 before the action @xmath626 occurs in @xmath104 . hence , @xmath104 must contain an action that sets the variable @xmath617 to @xmath211",
    ". however , this can not be the case , since the only action setting @xmath617 to @xmath211 is the action @xmath634 which can not occur in @xmath104 because the variable @xmath611 is @xmath211 for the whole duration of @xmath104 .    to see the reverse direction suppose that one of the variables @xmath611 or @xmath612 is initially set to @xmath46 .",
    "if @xmath611 is initially set to one then @xmath643 is a plan of length @xmath642 for @xmath640 . on the other hand ,",
    "if @xmath612 is initially set to one then @xmath644 is a plan of length @xmath642 for @xmath640 .",
    "hence the claim is true .",
    "it should be noted that this is a use - once gadget ; when it has computed the disjunction of @xmath611 and @xmath612 it may not be possible to reset it to do this computation again .",
    "this is sufficient for our purpose , however .",
    "we continue by showing how we can use the gadget @xmath613 to construct a gadget @xmath645 such that there is a sequence of actions of @xmath645 that sets the variable @xmath616 to @xmath46 if and only if at least one of the external variables @xmath646 are initially set to @xmath46 . furthermore",
    ", if there is such a sequence of actions then its length is at most @xmath647 .",
    "let @xmath469 be a rooted binary tree with root @xmath95 that has @xmath648 leaves @xmath649 and is of smallest possible height .",
    "for every node @xmath650 we make a copy of our binary or - gadget such that the copy of a leave node @xmath651 is the gadget @xmath652 and the copy of an inner node @xmath650 with children @xmath653 and @xmath654 is the gadget @xmath655 ( clearly this needs to be adapted if @xmath648 is odd or an inner node has only one child ) .",
    "for the root node with children @xmath653 and @xmath654 the gadget becomes @xmath656 .",
    "this completes the construction of the gadget @xmath645 . using claim  [ clm : pub - nokernel-2or ] it is easy to verify that the gadget @xmath645 can indeed be used to compute the logical `` or '' or the variables @xmath657 .",
    "we are now ready to construct the instance @xmath13 .",
    "@xmath13 contains all the variables and actions from every instance @xmath608 and of the gadget @xmath658 .",
    "furthermore , for every @xmath659 and @xmath660 , the instance @xmath13 contains the binary variables @xmath661 and the actions @xmath662 such that :    * @xmath663 and @xmath664}}=1 $ ] , * @xmath665}}=1 $ ] and @xmath666}}=1 $ ] , for every @xmath667 .    note that the actions @xmath668 and the variables @xmath661 are used to `` pad '' the different parameter values of the instances @xmath53 to the value @xmath4 .    additionally , @xmath13 contains the binary variables @xmath669 and the actions @xmath670 with @xmath671}}=1 $ ] and @xmath395}}=1 $ ] .",
    "furthermore , the initial state @xmath117 of @xmath13 is defined as @xmath373}}={{{i}_i[{v}]}}$ ] if @xmath82 is a variable of @xmath607 and @xmath373}}=0 $ ] , otherwise .",
    "the goal state of @xmath13 is defined by @xmath641}}=1 $ ] and we set @xmath672 . clearly , @xmath13 can be constructed from @xmath608 in polynomial time and @xmath116 has a plan of length at most @xmath4 if and only if there is some @xmath23 , where @xmath51 , such that @xmath605 has a plan of length at most @xmath606 .",
    "furthermore , because @xmath673 , the parameter @xmath35 is polynomially bounded by the parameter @xmath4 .",
    "this concludes the proof of the lemma .      according to our classification so far",
    ", the only problem in category  ( ii ) with respect to restrictions on the number of preconditions and effects is @xmath451-bounded sas@xmath6  planning .",
    "the next theorem suggests that @xmath451-bounded sas@xmath6  planning has no polynomial bi - kernel .",
    "[ 02bpenokernel ] @xmath451-bounded sas@xmath6  planning has no polynomial bi - kernel unless @xmath5 .",
    "it is apparent from the -completeness proof for @xmath451-bounded sas@xmath6  planning ( * ? ? ?",
    "* theorem  4.6 ) that the problem is even strongly -complete , i.e. , the unparameterized version of it is -complete . according to proposition  [ pro : or - comp - no - poly - kernel ]",
    "it is thus sufficient to devise an or - composition algorithm for @xmath451-bounded sas@xmath6  planning to prove the theorem .",
    "suppose we are given @xmath47 instances @xmath674 of @xmath451-bounded sas@xmath6  planning where @xmath598 for every @xmath51 .",
    "we will now show how we can construct the required instance @xmath675 of @xmath451-bounded sas@xmath6  planning via an or - composition algorithm . without losing generality",
    ", we assume that @xmath676 have disjoint sets of variables and disjoint sets of actions . as a first step we compute the new instances @xmath677 from @xmath674 according to lemma  [ lem : nodoublegoodactions ] .",
    "then @xmath80 consists of the following variables :    * the variables @xmath678 ; * binary variables @xmath679 ; * for every @xmath51 and @xmath680 a binary variable @xmath681 ; * a binary variable @xmath648 .",
    "@xmath86 contains the action @xmath682 with @xmath683}}=0 $ ] and the following additional actions for every @xmath51 :    * the actions @xmath684 , where @xmath685 is the copy of the action @xmath519 for the instance @xmath686 ( recall the construction of @xmath686 given in lemma  [ lem : nodoublegoodactions ] ) ; * an action @xmath687 with @xmath688}}=1 $ ] and @xmath689}}=0 $ ] ; * for every @xmath690 an action @xmath691 with @xmath692}}=1 $ ] and @xmath693}}=0 $ ] ; * an action @xmath694 with @xmath695}}=1 $ ] and @xmath696}}=0 $ ] where @xmath697 is the copy of the variable @xmath29 for the instance @xmath686 ( recall the construction of @xmath686 given in lemma  [ lem : nodoublegoodactions ] ) ; * let @xmath657 for @xmath698 be an arbitrary ordering of the variables in @xmath699 ( recall the definition of @xmath699 from section  [ sec : res - fpt ] ) .",
    "then for every @xmath700 we introduce an action @xmath701 with @xmath702}}={{{i}_i'[{v_j}]}}$ ] and @xmath703}}=0 $ ] .",
    "furthermore , for every @xmath704 we introduce an action @xmath701 with @xmath705}}={{{i}_i'[{v_r}]}}$ ] and @xmath703}}=0 $ ] .",
    "we set @xmath706 , @xmath373}}={{{g}_i'[{v}]}}$ ] for every @xmath707 and @xmath51 , @xmath373}}=0 $ ] for every @xmath708 , @xmath373}}=1 $ ] for every @xmath709 , @xmath115}}={{{g}_i'[{v}]}}$ ] for every @xmath707 and @xmath51 , @xmath115}}=0 $ ] for every @xmath710 , and @xmath711 .",
    "we note that all the subinstances corresponding to @xmath712 already have their goals satisfied in the initial state @xmath117 .",
    "however , since the variables @xmath713 have the wrong value in @xmath117 it is necessary to include actions of type @xmath701 in the plan .",
    "this `` destroys the goal '' for at least one subinstance so the plan must include a subplan to solve also this subinstance .",
    "clearly , @xmath13 can be constructed from @xmath608 in polynomial time with respect to @xmath714 and the parameter @xmath715 is polynomially bounded by the parameter @xmath4 . by showing the following claim",
    "we conclude the proof of the theorem .",
    "[ clm : or ] @xmath116 has a plan of length at most @xmath4 if and only if at least one of @xmath676 has a plan of length at most @xmath4 .",
    "suppose that there is an @xmath51 such that @xmath605 has a plan of length at most @xmath4 .",
    "it follows from lemma  [ lem : nodoublegoodactions ] that @xmath716 has a plan @xmath487 of length at most @xmath35 .",
    "then it is straightforward to check that @xmath717 is a plan of length at most @xmath718 for @xmath116 .    for the reverse direction let @xmath104 be a plan of length at most @xmath719 for @xmath116 . without losing generality",
    "we can assume that for every @xmath720 the set @xmath699 is not empty and hence every plan for @xmath716 has to contain at least one action @xmath721 that corresponds to a good action in @xmath605 . because @xmath722 } } \\neq { i}_i'[g]={g}_i'[g]$ ] for every such good action @xmath94 ( recall the construction of @xmath686 according to lemma  [ lem : nodoublegoodactions ] ) it follows that there is an @xmath599 such that @xmath104 contains all the @xmath723 actions @xmath724 .",
    "furthermore , because @xmath725 there can be at most one such @xmath23 and hence @xmath726 . because @xmath727 the plan @xmath104 also has to contain the actions @xmath728 . because of the effects ( on the variables in @xmath729 ) of these actions it follows that @xmath104 has to contain a plan @xmath730 of length at most @xmath731 for @xmath716 .",
    "it now follows from lemma  [ lem : nodoublegoodactions ] that @xmath605 has a plan of length at most  @xmath4 .",
    "we have obtained a full classification of the parameterized complexity of planning with respect to the length of the solution plan , under all combinations of the syntactical p , u , b , and s restrictions previously considered by bckstrm and nebel  @xcite .",
    "the complexity results for the various combinations of restrictions p , u , b and s are displayed in figure  [ fig : pubs - lattice ] .",
    "solid lines denote separation results by bckstrm and nebel @xcite , using standard complexity analysis , while dashed lines denote separation results from our parameterized analysis .",
    "the @xmath135}}}$]-completeness results follow from theorems  [ arb - hard ]  and  [ in - w2 ] , the @xmath170}}}$]-completeness results follow from theorems  [ unary - hard ]  and  [ in - w1 ] , and the  results follow from theorems  [ the : pfpt ]  and  [ the:02fpt ] .",
    "finally , theorem  [ thm : nopolykernel - p ] shows that none of the variants of bounded sas@xmath6  planning , which are -hard and in , admit a polynomial bi - kernel .",
    "bylander  @xcite studied the complexity of strips  under varying numbers of preconditions and effects , which is natural to view as a relaxation of restriction u in sas@xmath6 .",
    "we provide a full classification of the parameterized complexity of planning under bylander s restrictions .",
    "table  [ table : bylander ] shows such results ( for arbitrary domain sizes @xmath732 ) under both parameterized and classical analysis .",
    "the parameterized results in table  [ table : bylander ] are derived as follows . for actions with an arbitrary number of effects ,",
    "the results follow from theorems  [ arb - hard ] and  [ in - w2 ] . for actions with at most one effect , we have two cases : with no preconditions the problem is trivially in .",
    "otherwise , the results follow from theorems  [ unary - hard ] and  [ in - w1 ] .",
    "the case where the number of effects is bounded by some constant @xmath733 can be reduced in polynomial time to the case with only one effect using a reduction by bckstrm  ( * ? ? ?",
    "* proof of theorem  6.7 ) . since this reduction is a parameterized reduction we have membership in [ 1 ] by theorem  [ in - w1 ] .",
    "when @xmath734 , then we also have [ 1]-hardness by theorem  [ unary - hard ] .",
    "for the final case ( @xmath125 ) , we obtain @xmath170}}}$]-hardness from theorem  [ the:03-bpe - hard ] and containment in [ 1 ] from theorem  [ in - w1 ] if the number of effects @xmath735 is at least @xmath285 . the case where also @xmath736 is fixed - parameter tractable according to theorem  [ the:02fpt ] , but theorem  [ 02bpenokernel ] excludes that it admits a polynomial bi - kernel .",
    "since [ 1 ] and [ 2 ] are not directly comparable to the standard complexity classes we get interesting separations from combining the two methods . for instance , we can single out restriction u as making planning easier than in the general case , which is not possible under standard analysis .",
    "since planning remains as hard as in the general case under restrictions b and s also for parameterized analysis , it seems that u is a more interesting and important restriction than the other two .",
    "furthermore , the results in table  [ table : bylander ] suggest that also the restriction to a fixed number of effects larger than one is an interesting case .",
    "even more interesting is that planning is in  under restriction p , making it easier than the combination restriction us , while it seems to be rather the other way around for standard analysis where restriction p is only known to be hard for .",
    "we have also provided a full classification of bi - kernel sizes for all the fixed - parameter tractable fragments .",
    "it turns out that none of the nontrivial problems ( where the unparameterized version is @xmath20-hard ) admits a polynomial bi - kernel unless the polynomial - time hierarchy collapses .",
    "this implies an interesting dichotomy concerning the bi - kernel size : we only have constant - size and super - polynomial bi - kernels , and polynomially bounded bi - kernels that are not of constant size are absent . in order to establish these results ,",
    "we had to adapt standard tools for kernel lower bounds to parameterized problems whose unparameterized versions are not ( or not known to be ) in @xmath20 .",
    "we think that our notion of a strong or - composition and the corresponding proposition  [ pro : strong - or - comp - no - poly - kernel ] could be useful for showing kernel lower bounds for other parameterized problems whose unparameterized versions are outside  @xmath20 .",
    "this work opens up several new research directions .",
    "we briefly discuss some of them below .",
    "the use of parameterized analysis in planning is by no means restricted to using plan length as parameter .",
    "for instance , very recently kronegger et  al .",
    "@xcite obtained parameterized results for several different parameters and combinations of them : one should note that the parameter need not be a single value , it can be a combination of two or more ` basic ' parameters .",
    "a second example is considered by downey et al .",
    "@xcite . they show that strips  planning can be recast as the signed digraph pebbling problem which is modeled as a special type of graph .",
    "they analyze the parameterized complexity of this problem considering also the treewidth of the graph as a parameter .",
    "a final example is the recent paper by de haan et al .",
    "@xcite who study the parameterized complexity of plan reuse , where the task is to modify an existing plan to obtain the solution for new planning instance by making a small modification .",
    "our observation that restriction u makes planning easier under parameterized analysis is interesting in the context of the literature on planning .",
    "although this case remains -complete under classical complexity analysis , it has been repeatedly stressed in the literature that unary actions are interesting for reasons of efficiency .",
    "for instance , williams and nayak  @xcite considered planning for spacecrafts and found that unary actions were often sufficient to model real - world problems in this domain .",
    "they noted that one consequence of having only unary actions is that the causal graph for a planning instance must be acyclic , a property which has often been exploited in the literature , both for theoretical results on planning complexity for various strucutures of the causal graph @xcite as well as for practical planning  @xcite .",
    "of particular interest is a result on causal graphs in general by chen and gimnez @xcite .",
    "it is a classical complexity result that is proven under an assumption from parameterized complexity .",
    "there are also close ties between model checking and planning and this connection deserves further study .",
    "for instance , model - checking traces can be viewed as plans and vice versa  @xcite , and methods and results have been transferred between the two areas in both directions @xcite .",
    "our reductions from planning to model - checking suggest that the problems are related also on a more fundamental level than just straightforward syntactical translations .",
    "the major motivation for our research is the need for alternative and complementary methods in complexity analysis of planning .",
    "however , planning is also an interesting problem per se .",
    "it is a very powerful modelling language since it is -complete in the general case , while it is also often simple to model other problems as planning problems . for instance , it would be interesting to identify various restrictions that make planning -complete but still allow for straightforward modelling of many common -complete problems , and analogously for other classes than .    like most other results on complexity analysis of planning in the literature ,",
    "our results apply to various restrictions of the actual planning language .",
    "however , the commonly studied language restrictions usually do not match the restrictions implied by applications .",
    "a complementary approach is thus to study the complexity of common benchmark problems for planning , e.g. the blocks world  @xcite and the problems used in the international planning competitions  @xcite .",
    "hence , it would be interesting to apply parameterized complexity analysis to these problems to see if it could help to explain the empirical results on which problems are hard and easy in practice . finding the right parameter(s ) would , of course , be crucial for achieving relevant results on this .",
    "christer bckstrm , yue chen , peter jonsson , sebastian ordyniak , and stefan szeider .",
    "the complexity of planning revisited - a parameterized analysis . in jrg hoffmann and bart selman , editors ,",
    "_ proceedings of the 26th aaai conference on artificial intelligence ( aaai 2012 ) , july 22 - 26 , 2012 , toronto , on , canada _ , pages 17351741 .",
    "aaai press , 2012 .",
    "christer bckstrm and peter jonsson .",
    "all pspace - complete planning problems are equal but some are more equal than others . in daniel borrajo , maxim likhachev , and carlos  linares lpez , editors , _ proceedings of the 4th annual symposium on combinatorial search ( socs 2011 ) , castell de cardona , barcelona , spain , july 15 - 16 , 2011 _ , pages 1017 .",
    "aaai press , 2011 .",
    "christer bckstrm , peter jonsson , and simon sthlberg .",
    "fast detection of unsolvable planning instances using local consistency . in _ proceedings of the 6th annual symposium on combinatorial search ( socs 2013 ) , leavenworth , wa , usa , july 11 - 13 , 2013 _ , pages 2937 , 2013 .",
    "christoph betz and malte helmert .",
    "planning with _ h_@xmath737 in theory and practice . in brbel",
    "mertsching , marcus hund , and muhammad  zaheer aziz , editors , _ proceedings of ki 2009 : advances in artificial intelligence , 32nd annual german conference on ai , paderborn , germany , september 15 - 18 , 2009 _ , volume 5803 of _ lecture notes in computer science _ , pages 916 .",
    "springer , 2009 .",
    "hans  l. bodlaender .",
    "kernelization : new upper and lower bound techniques . in jianer chen and fedor  v. fomin , editors ,",
    "_ parameterized and exact computation , 4th international workshop",
    "( iwpec 2009 ) , copenhagen , denmark , september 10 - 11 , 2009 , revised selected papers _ , volume 5917 of _ lecture notes in computer science _ , pages 1737 .",
    "springer , 2009 .",
    "ronald de  haan , anna roubckov , and stefan szeider .",
    "parameterized complexity results for plan reuse . in marie desjardins and michael  l. littman , editors ,",
    "_ proceedings of the 27th aaai conference on artificial intelligence ( aaai 2013 ) , bellevue , wa , usa , july 14 - 18 , 2013 _ , 2013 .",
    "r.  downey , m.  r. fellows , and u.  stege .",
    "parameterized complexity : a framework for systematically confronting computational intractability . in",
    "_ contemporary trends in discrete mathematics : from dimacs and dimatia to the future _ , volume  49 of _ ams - dimacs _ , pages 4999 .",
    "american mathematical society , 1999 .",
    "stefan edelkamp , mark kellershoff , and damian sulewski .",
    "program model checking via action planning . in ron van  der meyden and jan - georg smaus , editors ,",
    "_ model checking and artificial intelligence - 6th international workshop ( mochart 2010 ) , atlanta , ga , usa , july 11 , 2010 , revised selected and invited papers _ , volume 6572 of _ lecture notes in computer science _ , pages 3251 .",
    "springer , 2010 .",
    "stefan edelkamp , stefan leue , and willem visser , editors . ,",
    "volume 06172 of _ dagstuhl seminar proceedings_. internationales begegnungs- und forschungszentrum fr informatik ( ibfi ) , schloss dagstuhl , germany , 2007 .",
    "michael  r. fellows .",
    "the lost continent of polynomial time : preprocessing and kernelization . in _ proceedings of parameterized and exact computation , 2nd international workshop ( iwpec 2006 ) , zrich , switzerland ,",
    "september 13 - 15 , 2006 _ , volume 4169 of _ lecture notes in computer science _ , pages 276277 .",
    "springer , 2006 .",
    "fedor  v. fomin . kernelization . in farid",
    "m. ablayev and ernst  w. mayr , editors , _ proceedings of computer science - theory and applications , 5th international computer science symposium in russia ( csr 2010 ) , kazan , russia , june 16 - 20 , 2010 _ , volume 6072 of _ lecture notes in computer science _ , pages 107108 .",
    "springer , 2010 .",
    "lance fortnow and rahul santhanam .",
    "infeasibility of instance compression and succinct pcps for np . in cynthia dwork , editor , _ proceedings of the 40th annual acm symposium on theory of computing , victoria , bc , canada ,",
    "may 17 - 20 , 2008 _ , pages 133142 .",
    "acm , 2008 .",
    "malte helmert .",
    "a planning heuristic based on causal graph analysis . in shlomo zilberstein , jana koehler , and sven koenig , editors , _ proceedings of the 14th international conference on automated planning and scheduling ( icaps 2004 ) , whistler , bc , canada , june 3 - 7 2004 _ , pages 161170 .",
    "aaai , 2004 .",
    "malte helmert .",
    "new complexity results for classical planning benchmarks . in derek",
    "long , stephen  f. smith , daniel borrajo , and lee mccluskey , editors , _ proceedings of the 16th international conference on automated planning and scheduling ( icaps 2006 ) , cumbria , uk , june 6 - 10 , 2006 _ , pages 5262 .",
    "aaai , 2006 .",
    "martin kronegger , andreas pfandler , and reinhard pichler .",
    "parameterized complexity of optimal planning : a detailed map . in francesca",
    "rossi , editor , _ proceedings of the 23rd international joint conference on artificial intelligence ( ijcai 2013 ) , beijing , china , august 3 - 9 , 2013 _ , pages 954961 .",
    "ijcai / aaai , 2013 .",
    "david  a. mcallester and david rosenblitt .",
    "systematic nonlinear planning . in thomas",
    "l. dean and kathleen mckeown , editors , _ proceedings of the 9th national conference on artificial intelligence ( aaai 1991 ) , anaheim , ca , usa , july 14 - 19 , 1991 , volume 2 _ , pages 634639 . aaai press / the mit press , 1991 .",
    "martin wehrle and malte helmert .",
    "the causal graph revisited for directed model checking . in jens palsberg and zhendong su , editors , _ proceedings of static analysis , 16th international symposium ( sas 2009 ) , los angeles , ca , usa , august 9 - 11 , 2009 .",
    "_ , volume 5673 of _ lecture notes in computer science _ , pages 86101 .",
    "springer , 2009 .",
    "brian  c. williams and p.  pandurang nayak . a reactive planner for a model - based executive . in _ proceedings of the 15th international joint conference on artificial intelligence ( ijcai 1997 ) , nagoya , japan , august 23 - 29 , 1997 _ , pages 11781185 .",
    "morgan kaufmann , 1997 ."
  ],
  "abstract_text": [
    "<S> the _ propositional planning _ </S>",
    "<S> problem is a notoriously difficult computational problem , which remains hard even under strong syntactical and structural restrictions . given its difficulty it becomes natural to study planning in the context of parameterized complexity . </S>",
    "<S> in this paper we continue the work initiated by downey , fellows and stege on the parameterized complexity of planning with respect to the parameter `` length of the solution plan . '' </S>",
    "<S> we provide a complete classification of the parameterized complexity of the planning problem under two of the most prominent syntactical restrictions , i.e. , the so called pubs restrictions introduced by bckstrm and nebel and restrictions on the number of preconditions and effects as introduced by bylander . </S>",
    "<S> we also determine which of the considered fixed - parameter tractable problems admit a polynomial kernel and which do nt . </S>"
  ]
}