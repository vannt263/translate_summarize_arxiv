{
  "article_text": [
    "modern computing system contains multiple cores which enable many applications or tasks to execute concurrently .",
    "chip multiprocessor exploits the increasing device density in a single chip , so now a days we expects two or three order number of cores on a chip .",
    "also most of the applications by nature they are parallel and their run time characteristics exhibit time varying phase behavior @xcite .",
    "applications impose different performance metric values in different phases . during a phase an application",
    "have same value of performance metrics .",
    "in @xcite , banerjee @xmath0 used instruction per cycle ( ipc ) , instruction level parallelism ( ilp ) and l1 cache hits to detect phases of applications execution time . as different phases of application have different parallelism and memory access characteristics scheduling algorithm should consider this fact to improve the performance , otherwise system will be underutilized . in this work ,",
    "we have considered the parallelism characteristics of different phases of an application to schedule efficiently . without loss of generality",
    ", we can consider an application consist of a sequence of task or phase , where each task or phase exhibit different degree of parallelism .",
    "in this text , we have used task and phase interchangeably .",
    "tasks that require more than one processor at a time are called multiprocessor tasks .",
    "tasks requiring @xmath1 processors at a time are called @xmath1-width tasks .    in this paper",
    "we are concerned about scheduling of @xmath2 multi - phase applications ( chain of multiprocessor tasks , each of which have arbitrary number of phases or tasks ) onto @xmath3 processor system .",
    "each phase or task has two characteristics : one is execution time of phase and other is number of processors required for execution of that phase .",
    "a phase of an application can be scheduled on any subset of processors of given size ( given by phase ) .",
    "so this kind of application can be represented as collection of multiprocessor task with chain precedence constraints .",
    "interchangeably we say this as chain of multiprocessor task throughout this paper .",
    "if execution time of a multiprocessor task is 1 then we say it is a multiprocessor unit time task and for multiprocessor unit time task we do nt use pre - exemption .",
    "a task is splitable multiprocessor unit time task with k - width , means this task may be run in splitable in term of processor .",
    "suppose a task require @xmath4 unit time @xmath5 processor then this task may execute @xmath4 unit on @xmath6 processor in current time slot and remaining @xmath7 unit in any other time slots .",
    "if @xmath6 is integer then task is unit splitable otherwise continuous splitable task . in this paper",
    ", we have tried to link theoretical aspect of multiprocessor scheduling and efficient scheduling multi - phase application on to multiprocessors to cope up with modern days execution environment scenario ( parallel multi - phase application on large multi - processor system ) .",
    "non - preemptive scheduling of @xmath2 independent tasks ( uni - processor task ) on @xmath8 processors is np - complete .",
    "similarly , the problem of multiprocessor tasks scheduling is np - hard for non - preemptive case and independent tasks of arbitrary execution time @xcite .",
    "if the execution time of each phase is restricted to unit time then the problem is polynomially solvable for arbitrary but fixed number of processor requirement case @xcite . when preemption is allowed we can solve independent tasks of arbitrary execution time with arbitrary number of processors requirements in polynomial time @xcite . most of the cases , if we add precedence constraint between tasks difficulty increases .",
    "scheduling multiprocessor applications which have precedence constraint as directed acyclic graphs is np - complete .",
    "many heuristics are proposed to schedule them .",
    "we are considering precedence constraint chain in this paper which is simplest precedence constraint .",
    "the problem scheduling multiprocessor task with chain precedence is also strongly np - hard for than two processors and non pre - emptable tasks of arbitrary execution time @xcite . if execution time is restricted to unit for chained applications then also the problem is strongly np - hard for three processors with arbitrary processors requirement of multiprocessor task @xcite .    in this paper",
    "we are considering three types of chains of multiprocessor unit time task .",
    "these are ( a ) uniform chain , ( b ) monotonically increasing or decreasing chains and ( c ) arbitrary chains .",
    "we are considering two types of multiprocessor tasks also .",
    "these are ( a ) splitable tasks , and ( b ) non - splitable tasks .",
    "non - splitable task require all required processors simultaneously at a time means @xmath1-width task can not be scheduled on @xmath9 @xmath1 processors and splitable task can be processed by allocating partial number of processors at different times means @xmath1-width task can be scheduled on processors less than @xmath1 at a time and remaining can be given on next time .",
    "our result is stronger result as compared to blazewicz @xmath0 @xcite , where they consider scheduling of tasks requiring an arbitrary number of processors between @xmath4 and @xmath1 , where @xmath1 is fixed integer and unit time processing .",
    "also we have considered splitable and non - splitable version of the problem .",
    "rest of the paper is organized as follows : we have described the problem formulation and variation of problem in section [ problemfor ] .",
    "we have described previous work in section [ prevwork ] .",
    "we have described our proposed algorithm for scheduling of uniform chains of splitable and non - splitable multiprocessor unit time tasks in section [ unichain ] .",
    "similarly , we have described algorithm for scheduling of monotone chains of splitable and non - splitable multiprocessor unit time tasks in section [ monotone ] .",
    "section [ arbichain ] describes about compared three heuristics to solve the problem of scheduling arbitrary multiprocessor task chains and evaluates their performance on various scenarios for both splitable and non - splitable task chains .",
    "finally , we have concluded about paper and pointed future works in section [ concl ] .",
    "a collection of @xmath2 application @xmath10 = @xmath11,@xmath12, .... ,@xmath13 has to be executed by @xmath3 identical processors .",
    "each application or chain consists of @xmath14 phases or tasks where @xmath15 $ ] .",
    "the processors requirement of task @xmath16 is @xmath17 , where @xmath16 is @xmath18 phase or task of application @xmath19 and it satisfies @xmath20 .",
    "execution time @xmath21 of each tasks @xmath16 may be arbitrary .",
    "figure [ figure 1 ] shows an example of application system . in this example , we have 4 applications or chains ( @xmath11 , @xmath12 , @xmath22 and @xmath23 ) .",
    "application @xmath11 , @xmath12 , @xmath22 and @xmath23 have 4 phases , 3 phases , 5 phases and 4 phases respectively .",
    "a task of an application ca nt start execution before complete execution of its predecessor task of the same application .",
    "an optimization criterion of multiprocessor scheduling is minimizing makespan time @xmath24 .",
    "the makespan is defined as the total length of the schedule i.e. when all tasks of all applications are finished i.e. @xmath25 where @xmath26 is the finishing time of @xmath27chain or application .",
    "the problem of scheduling of multiprocessors arbitrary time tasks with chains is np - complete , so for simplicity we assume execution time of each tasks @xmath16 equal to unit length i.e. @xmath21 = @xmath4 where @xmath28 = @xmath4 to @xmath2 and @xmath29 = @xmath4 to @xmath30 , in this paper .",
    "we also assume that there is no communication delay between tasks of an application and among the applications . in the paper , we have used @xmath31 as total number of tasks ( which is different from @xmath14 , the number of phases of application @xmath19 ) and @xmath32 or @xmath3 as number of processor in the system .      in this paper ,",
    "we have assumed two types of tasks : ( a ) non - splitable tasks i.e. task can only be processed when all the required number of processor by task are allocated to task at a time and ( b ) splitable tasks i.e. task can be processed by allocating all required number of processor in pieces at different time .",
    "clearly , we can categorize the multiprocessor unit time tasks with chain precedence into three following cases :    1 .",
    "* uniform chains : * all the tasks of a chain have same number of processors requirement and tasks of different chains may have different processors requirement .",
    "example of this kind of task system is shown in figure [ figuniform ] . for a given chain ,",
    "all the task have same number of parallelism or processor requirement , but this may be different for different chain .",
    "* monotone chains : * all the tasks of a chain have non - increasing ( or non - decreasing ) processor requirement .",
    "all the chains of task system are one type of chain either non - increasing or non - decreasing .",
    "figure [ figdecreasing ] and [ figincreasing ] shows non - increasing and non - decreasing monotone chains of multiprocessor tasks respectively .",
    "considered monotone task system does not contain mix of both non - increasing and non - decreasing chain .",
    "* arbitrary chains : * in this case , tasks of a chain have any arbitrary processors requirement in arbitrary order as shown in figure [ figarbitrary ] .",
    "we have discussed scheduling approach of all three types of chains of multiprocessor tasks ( uniform , monotone and arbitrary ) and also with both types of multiprocessor tasks ( splitable and non - splitable ) .",
    "so it becomes in total six different types of chain of multiprocessor task system .",
    "we know that lower bound ( lb ) of makespan time of scheduling chains of multiprocessor task on multiprocessor can be calculated as @xcite @xmath33 where @xmath17 is processor requirement of @xmath18 task of @xmath34 application , @xmath2 is number of chain , @xmath3 is number of processor and @xmath14 is number of phase / task of @xmath34 chain .",
    "let us assume opt is optimal makespan time produced by an optimal algorithm .",
    "so makespan time of any arbitrary algorithm will be @xmath35 and it will satisfy the following relation .",
    "@xmath36 where @xmath37 is minimum average cpu time wastage .",
    "average cpu time wastage is calculated as ratio of total cpu time wastage and total number of processor ( @xmath3 ) .",
    "cpu time wastage at any time slot is the number of number of free processor at that time unit .",
    "wastage of cpu time happens because of these following reasons .    1",
    ".   some processors may be free at one time slot because the remaining processors are not sufficient for any ready task ( processor requirement of ready tasks is higher than the available free processors ) .",
    "2 .   some processors may be free if the total requirement of all ready tasks is less than the total available processors at any one of the time slot .",
    "as described in section 1 , non - preemptive scheduling of independent tasks on @xmath38 processors is np - complete . also , the problem of scheduling a finite set of tasks having some precedence constraint on finite set of multiprocessor with goal of minimizing makespan is np - complete for most of the cases except for a few simplified cases",
    ". many heuristics with polynomial - time complexity have been suggested based on their assumptions about the structure of the parallel program and the target parallel architecture @xcite .",
    "these assumptions includes ( a ) uniform task execution times , ( b ) zero inter - task communication times , ( c ) contention - free communication , ( d ) full connectivity of parallel processors , and ( e ) availability of unlimited number of processors .",
    "+ however these assumptions may not hold in real world for a number of reasons . even after making above assumptions ,",
    "scheduling problem is np - complete in these following cases @xcite : ( a ) scheduling tasks with uniform weights to an arbitrary number of processors and ( b ) scheduling tasks with weights equal to one or two units to two processors .    as stated in @xcite",
    "there are only three special cases for which there exist optimal polynomial time algorithms .",
    "these cases are ( a ) scheduling tree - structured task graphs with uniform node weights on arbitrary number of processors in linear time by hu s @xcite highest level first heuristics , ( b ) scheduling arbitrary task graphs with uniform node weights on two processors in quadratic time by graham et .",
    "@xcite , ( c ) scheduling an interval ordered task graph with uniform node weights to an arbitrary number of processors have been solved in linear time by papadimitriou et .",
    "al . @xcite .",
    "however , even in these cases , communication among tasks of the parallel program is assumed to take zero time . in @xcite",
    ", ullman proved that dag scheduling problems where considered dag s nodes have unit weights and system has @xmath32 processors are np - complete .",
    "he also proved that dag scheduling problem where nodes have either one or two as a weight value and system has two processors is also np - complete .",
    "figure [ table:1 ] , shows complexity of scheduling problems without communication time between tasks in tabular form .    [ cols=\"^,^,^,^,^,^,^ \" , ]     [ tab2 ]    among these three heuristics , no one gives best result for all the case .",
    "one heuristic may perform better as compared to other two in some specific case ( lower the @xmath24 value , better the result ) .",
    "as shown in figure [ fig : arbitrary ] , performance of lcmcf and lcmpf is better compare to mcf for application set 1 ( shown in figure [ fig : arbitrary](a ) ) , performance of mcf and lcmpf is better than lcmcf for applications set 2 ( shown in figure [ fig : arbitrary](b ) ) and performance of mcf and lcmcf is better than lcmpf for application set 3 ( shown in figure [ fig : arbitrary](c ) ) .",
    "figures [ fig : example1]a and [ fig : example1]b show the performance of mcf , lcmcf and lcmpf scheduling of 100 and 1000 applications respectively with different number of phases on 64 processor system .",
    "figures [ fig : example1]c and [ fig : example1]d show the performance of same scheduling approaches of same application set on 512 processors .",
    "we observed that :    1 .   for a fixed number of processors , when number of applications increase , the difference between lb and makespan time decreases i.e. efficiency in time increases .",
    "2 .   for fixed number of processors and applications , when upper limit of number of phases an application can have increase efficiency in time increases for all three heuristics .",
    "avgerage ratio of @xmath24 and @xmath39 will always be better in lcmpf .",
    "again figure [ fig : example2 ] shows the performance of mcf , lcmcf and lcmpf scheduling of application system with 10% and 50% variation of number of phases of applications with one another for 500 applications on 100 processors .",
    "our observation says that    1 .   for a fixed number of processors and applications , when phase variation , the difference between lb and makespan time varies i.e. efficiency in time increases or decreases .",
    "2 .   for fixed number of processors , applications and phase variation , when number of phases an application can have increase efficiency in time increases for all three heuristics .",
    "time complexity of mcf will be the complexity of 0 - 1 knapsack solution at each time slot .",
    "as problem of 0 - 1 knapsack can be solved in pseudo - polynomial time with respect to capacity of knapsack and total number of item , so in our case it will be @xmath40 , so total complexity of mcf is @xmath41 . as described in section 4 , complexity of lcmcf will be same as complexity of lcmpf .",
    "overall lcmpf will give better results than mcf and lcmcf for any set of applications having any number of phases and any number of applications .",
    "scheduling of arbitrary chains of splitable multiprocessor unit time tasks is an interesting problem . as of our knowledge",
    ", no one have found polynomial time solution and also no one has proved that this problem is np - complete . using processor as continuous medium which behaves like electrical charge passing from task to task in the dag ( instead of chain ) , author of paper @xcite , solve this in iterative ways with complexity is @xmath42 , where @xmath43 is the number of edges in the precedence graph and @xmath44 is the number of iterations in the algorithm .",
    "they use optimality conditions impose by a set of nonlinear equations on the flow of processing power ( processors ) and on the completion times of independent paths of execution which is analogous to kirchhoff s laws of electrical circuit theory .",
    "but our main aim is to solve in using discrete approach .",
    "we have also used the same mcf , lcmcf and lcmpf heuristics to schedule this kind of application on to multicore .",
    "as multiprocessor task are splitable , we use fractional knapsack in mcf heuristic .",
    "experiment shows all three heuristics produce exactly same result for randomly generated examples .",
    "we also observe that all three heuristics perform equally if sum of processor requirement of all the ready multiprocessor tasks is @xmath45 in all schedule time slot except the last time slot .",
    "if this condition is violated then lcmpf performed better than other two heuristics .",
    "scheduling with considering the phase behavior improve the system performance . our proposed approach lcmpf scheduling of uniform and monotone chain of multiprocessor unit time task",
    "is proved to optimal .",
    "if the multiprocessor task are non - splitable , then lcf approach is optimal , we do nt need to consider processor occupancy criteria of multiprocessor task .",
    "scheduling arbitrary chain of multiprocessor unit time task is in np - complete . in this case",
    "our proposed lcmpf based heuristics perform better as compared to mcf and lcmcf heuristics .",
    "we believe that scheduling of arbitrary chain of splitable multiprocessor unit time task is still an open problem . we have also compared performance of proposed lcmpf and other mcf and lcmcf heuristics for scheduling this kind of task . in future",
    ", we are planning to try to solve scheduling of arbitrary chain of splitable multiprocessor unit time task .",
    "also solve the same with other restrictive precedence constraints and or with some communication model .",
    "s. banerjee , g. surendra , and s. k. nandy , _ on the effectiveness of phase based regression models to trade power and performance using dynamic processor adaptation _",
    ", j. syst .",
    "54 , no . 8 , 2008 , pp . 797815 .",
    "jianzhong du and joseph y - t .",
    "leung , _ complexity of scheduling parallel task systems _ , siam j. on dis .",
    "math .. , vol .",
    "2 , no . 4 , 1989 ,",
    "473 - 487 .",
    "j. blazewicz , j. weglarz and m. drabowski , _ scheduling independent 2-processor tasks to minimize schedule length _ ,",
    "18 , no . 4 , 1984 , pp .",
    "267 - 273 j. bazewicz , m. drozdowski , g. schmidt and d. de werra , _ scheduling independent 2-processor tasks on a uniform duo - processor system _ , dis .",
    "28 , no . 1 , 1990 ,",
    "teofilo f. gonzalez and donald b. johnson , _ a new algorithm for preemptive scheduling of trees , j. of acm _",
    "27 , no . 2 , 1980 , pp .",
    "287 - 312 .",
    "j. blazewicz , j. weglarz and m. drabowski , _ scheduling multiprocessor tasks to minimize schedule length _ , ieee tran . on comp .",
    "c-35 , no . 5 , 1986 .",
    "c. h. papadimitriou and m. yannakakis , _ scheduling interval - ordered tasks _ , siam j. comput . , vol . 8 , no . 3 , 1987 , pp.405 - 409",
    "yu - kwong kwokand and ishfaq ahmad , _",
    "static scheduling algorithms for allocating directed task graphs to multiprocessors _ , acm comp . surveys ( csur ) , vol .",
    "31 , no . 4 , 1999 , pp .",
    "406 - 471 .",
    "qinghua li , youlin ruan , shidayang and tingyao jiang , _ an optimal scheduling algorithm for fork - join task graphs _ , par . and dist . comp . ,",
    "appl . and tech . , 2003 .",
    "e.g. coffman and r.l .",
    "graham , _ optimal scheduling for two - processor systems _ , acta informatica , vol . 1 , 1972 ,",
    "200 - 213 . t.c .",
    "parallel sequencing and assembly line problems _ , oper .",
    "19 , no . 6 , nov .",
    "1961 , pp .",
    "841 - 848 .",
    "garey and d.s .",
    "johnson , _ computers and intractability ; a guide to the theory of np - completeness _ , w.h .",
    "freeman and company , 1979",
    ". j. ullman , _ np - complete scheduling problems _ , j. of comp . and sys",
    ", vol . 10 , 1975 , pp . 384 - 393 .",
    "r. sethi , _ scheduling graphs on two processors _ , siam j. on computing , vol . 5 , no",
    ". 1 , mar .",
    "1976 , pp .",
    "j. blazewicz , et al , _ scheduling independent multiprocessor tasks on a uniform k - processor system _ , par . comp .",
    ", vol . 20 , 1994 , pp .",
    "j. blazewicz and zhen liu , _ linear and quadratic algorithm for scheduling chains and opposite chains _ ,",
    "j. of ope .",
    "137 , no . 2 , 2002 .",
    "j. blazewicz and daniel kobler , _ review of properties of different precedence graphs for scheduling problems _ , euro .",
    "j. of ope .",
    ", vol . 142 , 2002 .",
    "teofilo gonzalez and sartaj sahni , _ flowshop and jobshop schedules : complexity and operation _ , op .",
    "1 , jan - feb . 1978 .",
    "teofilo f. gonzalez and donald b. johnson , _ a new algorithm for preemptive scheduling of trees _",
    ", j. acm , vol .",
    "27 , 1980 , pp .",
    "287 - 312 .",
    "peter brucker , _ scheduling algorithms _ , fifth edition , springer , 2006 ."
  ],
  "abstract_text": [
    "<S> in this paper , we proposed an effective approach for scheduling of multiprocessor unit time tasks with chain precedence on to large multiprocessor system . </S>",
    "<S> the proposed longest chain maximum processor scheduling algorithm is proved to be optimal for uniform chains and monotone ( non - increasing / non - decreasing ) chains for both splitable and non - splitable multiprocessor unit time tasks chain . </S>",
    "<S> scheduling arbitrary chains of non - splitable multiprocessor unit time tasks is proved to be np - complete problem . but scheduling arbitrary chains of splitable multiprocessor unit time tasks is still an open problem to be proved whether it is np - complete or can be solved in polynomial time . </S>",
    "<S> we have used three heuristics ( a ) maximum criticality first , ( b ) longest chain maximum criticality first and ( c ) longest chain maximum processor first for scheduling of arbitrary chains . also compared performance of all three scheduling heuristics and found out that the proposed longest chain maximum processor first performs better in most of the cases . </S>"
  ]
}