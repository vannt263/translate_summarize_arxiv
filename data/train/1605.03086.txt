{
  "article_text": [
    "@xcite recently suggested the following problem : consider a factory that manufactures jigsaw puzzles .",
    "the factory aims to make sure that a unique assembly of the puzzle is guaranteed just from the way the pieces are cut , regardless of whether the images on the puzzle are informative ( e.g. , even if there is a large patch of sky ) .",
    "suppose that there are @xmath1 different type of jigs ( cut shapes between adjacent pieces ) , that the puzzle is of size @xmath8 , and that the type of jig between any two adjacent pieces is selected at random .",
    "_ how large should @xmath1 be so that a random puzzle drawn from this distribution has unique assembly ?",
    "_ this problem , which they called `` shotgun assembly of random jigsaw puzzle '' , is a two dimension variant of the well studied problem of shotgun assembly of dna sequences , which is extensively studied from both the combinatorial and probabilistic view points , see e.g. . ,",
    "@xcite , @xcite , and @xcite    let us present the above question in a formal manner where the puzzle will be defined as the @xmath9 by @xmath9 grid graph with a uniform @xmath1 coloring of the edges of the grid . from now on we will use the graph theoretic notion of color instead of jig ( cut shape , also referred to asknobs\",locks\",tabs \" ,  slots \" ,  indents \" etc . in the jigsaw puzzle terminology ) .",
    "the parameters for our model are two positive integers , @xmath9 and @xmath1 .",
    "we use the notation @xmath10 $ ] to denote the set of numbers @xmath11 , and @xmath12 $ ] to denote the set @xmath13 .",
    "a puzzle may be thought of as an @xmath9 by @xmath9 grid with colored edges .",
    "the building blocks of the puzzle are _ pieces _ - i.e. , vertices of the grid along with @xmath14 adjacent colored half edges .",
    "observe that every vertex not on the boundary of the grid is incident with exactly  4 edges .",
    "we assume for simplicity of the presentation ( this will not significantly effect the results in the current manuscript ) that also every vertex on the boundary is incident with  4 edges .",
    "this involves introducing boundary edges that lead out of the grid and do not have vertices at their other endpoint .",
    "we further assume for simplicity that at any given vertex @xmath15 , the edges incident with it are labeled by their orientation : up , down , right and left and denoted @xmath16 , @xmath17 , @xmath18 and @xmath19 .",
    "we denote by @xmath20 the coloring , so that the colors incident to @xmath15 are @xmath21 , @xmath22 , @xmath23 and @xmath24 . each edge ( including the boundary edges ) is given a random color in @xmath25 $ ] ( corresponding to the type of jig being used ) , uniformly at random and independently across edges .",
    "thereafter , the puzzle is disassembled , and its pieces are presented at a random order . at this point ,",
    "the input is @xmath26 pieces , where each piece is a vertex with  4 incident edges labeled as up , down , right and left , and colored by colors from @xmath25 $ ] .",
    "an _ assembly _ of the pieces is a placement of the vertices on an @xmath9 by @xmath9 grid , where for each vertex the edges are oriented in the direction of their labels .",
    "the assembly is _ feasible _ if for every two adjacent vertices the colors that they have for their common edge are the same .",
    "we refer to the assembly that gives back the original puzzle as the _ planted assembly_.    we say that a puzzle has _ unique vertex assembly _ if it has only one feasible assembly , namely , the planted assembly .",
    "we say that a puzzle has _ unique edge assembly _ if for every feasible assembly and for every edge location ( not including boundary edges ) , the color of the respective edge is the same as in the planted assembly .",
    "note that a puzzle with two identical pieces will not have unique vertex assembly , but it may have unique edge assembly .",
    "since the probability of having each type of piece is @xmath27 , it follows by the birthday paradox that two identical pieces exist with high probability as soon as @xmath28 , and in this case the puzzle does not have unique vertex assembly .",
    "it is further shown in  @xcite that if @xmath4 then with high probability a random puzzle will not have unique edge assembly .",
    "@xcite   further provided a linear time algorithm for unique vertex assembly when @xmath29 for a sufficiently large constant @xmath30 .",
    "one of the main open problem of  @xcite was to obtain more accurate bounds for the jigsaw assembly problem .",
    "here we improve the upper bound by proving the following :    [ thm : main ] for every @xmath5 , if @xmath6 then with high probability a random puzzle has unique vertex assembly .",
    "moreover , there is an algorithm running in time @xmath31 that with high probability finds the planted assembly .    here and elsewhere",
    ", the expression  with high probability \" means with probability going to @xmath32 as @xmath33 .",
    "we will write @xmath34 for a constant depending on @xmath35 only .",
    "the value of @xmath34 at different occurrences will be different .",
    "the proof of theorem  [ thm : main ] is based on the following principle . for a given integer parameter @xmath36 ( where @xmath35 is a constant independent of @xmath9 )",
    ", we refer to a @xmath37 by @xmath37 grid as a _ window _ , and index it by @xmath38 \\times [ -k , k]$ ] . given an input of @xmath26 pieces , for each piece @xmath15",
    ", we consider all possible sets of @xmath39 pieces ( including @xmath15 itself ) and check if they can be assembled as a feasible ( namely , legally colored ) window with @xmath15 at its center .",
    "a feasible assembly of a window with @xmath15 at its center will be referred to as a @xmath15-window . given a @xmath15-window , the neighborhood @xmath40 of @xmath15 in the @xmath15-window is considered to be a _ candidate neighborhood _ ( or in more details , an @xmath41 radius @xmath32 candidate neighborhood ) of @xmath15 in the puzzle .    for every vertex @xmath15",
    "there might be several different @xmath15-windows , and hence several candidate neighborhoods .",
    "nevertheless , for a choice of @xmath42 we show that with high probability for every vertex at distance at least @xmath43 from the boundary of the puzzle , its @xmath44 radius @xmath32 candidate neighborhood is unique .",
    "consequently , this rigidity allows us to assemble the part of the puzzle at distance @xmath45 from the boundaries of the puzzle .",
    "a simple algorithm then allows to assemble the rest of the puzzle .",
    "the paper is organized as follows . in section [ sec : loc ] , we formalize the above notion and state our main result on the @xmath15-window . in section [ sec :",
    "constraint ] , we translate in graphical terms the problem of feasibility of an assembly .",
    "section [ sec : iso ] contains our isoperimetric analysis and section [ sec : algo ] describes the reconstruction algorithm .",
    "finally , section [ sec : fin ] discusses the extension where jigs have shapes instead of colors and can be rotated .",
    "for vertex @xmath46 ^ 2 $ ] , let @xmath47 denote the set of injective maps @xmath48 ^ 2 \\to [ n]^2 $ ] such that    * @xmath49 and * @xmath50 is _ feasible _ , that is @xmath51 for all @xmath52 s.t .",
    "@xmath53 ^ 2 $ ] , and @xmath54 for all @xmath52 s.t .",
    "@xmath55 ^ 2 $ ]    note that @xmath47 may be empty if @xmath15 is of distance less than @xmath35 from the boundaries of the grid .",
    "otherwise , @xmath47 contains at least one element , namely the one given by @xmath56 for all @xmath57 ^ 2 $ ] .",
    "the main theorem we wish to prove is the following :    [ thm : k_bound ] there exists @xmath58 such that for all @xmath5 , if @xmath59 then the following holds : for every @xmath46 ^ 2 $ ] and for every @xmath60 @xmath61 \\leq c(k ) n^{-2-\\eps/2}.\\ ] ]    theorem  [ thm : k_bound ] is the main result needed to prove that with high probability all vertices at distance at most @xmath35 from the boundaries can be assembled correctly .",
    "a simple algorithm then allows to construct the reminder of the puzzle .",
    "this will allow us to establish theorem [ thm : main ] .",
    "the proof of theorem [ thm : k_bound ] is based on a detailed analysis of the constraints imposed by the condition that an injective function @xmath62 ^ 2 \\to [ n]^2 $ ] is feasible , along with isoperimetric reasoning in order to lower bound the number of constraints .    to simplify notation we write @xmath63 for the edge @xmath64 .",
    "similarly we write @xmath65 .",
    "note that by definition @xmath66    sometimes it would be more useful to analyze the constraints imposed by @xmath67 on a subset of @xmath38 ^ 2 $ ] .",
    "this leads to the following definitions :    for a given @xmath48 ^ 2 \\to [ n]^2 $ ] , and @xmath68 ^ 2 $ ] , the _ restriction of @xmath67 to @xmath69 _ , denoted @xmath70 , is the function @xmath71 ^ 2 $ ] defined by @xmath72 , for all @xmath73 .",
    "given @xmath48 ^ 2 \\to [ n]^2 $ ] and @xmath68 ^ 2 $ ] , the _ tiles _ of @xmath70 , denoted @xmath74 is the collection of connected components of the graph with vertex set @xmath75 and where vertices @xmath76 are adjacent if @xmath77 .",
    "we write @xmath78 for @xmath79 ^ 2})$ ] and call @xmath78 the tiles of @xmath67 .",
    "note that the tiles are defined in terms of the image of the map @xmath67 .",
    "the constraint graph @xmath80 of @xmath70 for @xmath48 ^ 2 \\to [ n]^2 $ ] is the graph whose whose edge set @xmath81 consists of @xmath82 the vertex set @xmath83 of @xmath84 is the set of all edges of @xmath85 ^ 2 $ ] spanned by @xmath81 .",
    "the constraint graph of @xmath67 is the constraint graph of @xmath70 for @xmath86 ^ 2 $ ] .",
    "we write @xmath87 for the number of connected components of @xmath88 and @xmath89 .",
    "we will omit the subscript @xmath69 when @xmath86 ^ 2 $ ] .    consider a candidate @xmath48 ^ 2 \\to [ n]^2 $ ] .",
    "we say that an edge @xmath90 of the constraint graph @xmath91 is _ satisfied _ if @xmath92 and similarly for an edge @xmath93 .",
    "we say that @xmath94 is _ satisfied _ if all of its edges are satisfied . to distinguish the vertices and edges of the grid from those of @xmath88 , we will sometime write explicitly @xmath88-vertices and @xmath88-edges and grid - vertices and grid - edges .",
    "[ lem : constraint ] @xmath70 is feasible iff @xmath94 is satisfied .",
    "moreover , for a fixed @xmath48 ^ 2 \\to [ n]$ ] and @xmath68 ^ 2 $ ] , the probability that @xmath70 is feasible for a random puzzle is @xmath95 .",
    "the first statement follows from the definitions .",
    "for the second statement we will compute the probability that @xmath94 is satisfied .",
    "for @xmath94 to be satisfied , it is required that the color of @xmath88-vertices of @xmath94 ( grid - edges ) in each connected component are identical .",
    "note that events for different components are independent and the probability that a certain component @xmath30 has all @xmath88-vertices of the same color is @xmath96 where @xmath97 is the number of @xmath88-vertices in @xmath30 .",
    "the conclusion follows .",
    "note that the degree of each @xmath88-vertex of is either @xmath32 or @xmath98 .",
    "therefore the connected components of @xmath94 are either paths or cycles .",
    "[ ex : local ] let @xmath99 \\times [ 1,2]$ ] and let @xmath100 be defined by @xmath101 in this case , the map @xmath70 has @xmath98 tiles , namely \\{(1,1),(1,2 ) } , \\{(3,1),(3,2)}. the constraint graph is the graph with the following edges : @xmath102 note that the first edge is a double edge as it is imposed both by the adjacencies of @xmath103 to the left of @xmath104 and of @xmath105 to the right of @xmath106 .",
    "the vertex set @xmath83 of @xmath91 consists of @xmath107 and is of size @xmath108 .",
    "the connected components of @xmath94 are given precisely by the @xmath109 edges .",
    "thus @xmath110 , the number of connect components is @xmath109 and the probability that @xmath70 is feasible is @xmath111 .",
    "see figure [ fig:2 ] ( right ) .",
    "[ prop : constraint ] let @xmath112 denote the number of constraints of @xmath94 containing a @xmath83-vertex that appears once in all constraints and let @xmath113 denote the total number of constraints",
    ". then @xmath114 .",
    "as noted earlier the degree of each vertex in @xmath83 is at most two .",
    "therefore the graph @xmath94 is a disjoint union of cycles and paths .",
    "moreover , @xmath115 and @xmath116 are all additive over disjoint components .",
    "therefore it suffices to check the claim for paths and cycles of length at least @xmath98 . for a path of length @xmath98 we have @xmath117 as needed and for a path of length @xmath118",
    ": @xmath119 so the inequality holds in this case as well .",
    "the case of cycles is even simpler since for a cycle of length @xmath120 we have : @xmath121    the proof of theorem [ thm : k_bound ] is based on isoperimetric results proved in the next section . for a subset @xmath122 of @xmath85",
    "^ 2 $ ] we let @xmath123 denote the _ edge boundary _ of @xmath122 and @xmath124 denote the length of the boundary , i.e. , the number of edges between @xmath122 and its complement .",
    "[ lem : iso_main ] let @xmath125 denote the subset of @xmath47 where there exists an @xmath126 with @xmath127 . for @xmath128 let @xmath129 be the collection of tiles in @xmath130 ^ 2 $ ] determined by @xmath67 .",
    "then for every @xmath5 if @xmath131 for a large enough @xmath97 then the following holds . for every @xmath128 ,",
    "there exists a @xmath69 such that @xmath132 ^ 2 $ ] with the following property .",
    ". then @xmath134 .",
    "we now prove theorem [ thm : k_bound ] assuming lemma  [ lem : iso_main ] .    .",
    "we want to bound the probability that there exists a feasible @xmath67 where @xmath48 ^ 2 \\to [ n]^2 $ ] with @xmath135 and @xmath136 for some @xmath137 . by lemma  [ lem : iso_main ]",
    "is suffices to bound for each @xmath68 ^ 2 $ ] with @xmath138 , the probability that there exists such @xmath67 where @xmath70 is feasible and moreover @xmath134 .",
    "note that the number of choices of @xmath69 is @xmath34 .",
    "given @xmath69 and the fact that @xmath135 , the number of choices of @xmath70 is at most @xmath139 .",
    "this follows since each tile @xmath140 is determined by one @xmath141 and a subset of @xmath142 ^ 2 $ ] .    by lemma  [ lem : constraint ]",
    ", the probability that @xmath70 is feasible is bounded above by @xmath95 which can be bounded by @xmath143 by lemma  [ lem : iso_main ] .    since @xmath144 it follows that the overall probability that such an @xmath67 exists with @xmath135 is upper bounded by @xmath145 as needed .",
    "in this section , we will prove the main isoperimetric lemma , i.e. lemma  [ lem : iso_main ] .",
    "we start by proving the following lemma :    [ lem : iso_simple ] let @xmath146 ^ 2 \\to [ n]^2 $ ] with the number of tiles in @xmath67 , @xmath147 .",
    "then @xmath148 where @xmath149 .",
    "moreover , if two tiles have more than @xmath150 pieces then @xmath151    our proof will be based on the following classical fact .",
    "[ lem : classic ] let @xmath152 be a set with boundary that is axis aligned .",
    "then the length of its boundary @xmath153 satisfies @xmath154 , where @xmath155 is the area of the set .",
    "a special case of the lemma above is the elementary exercise showing that the square minimizes the surface area among all rectangles of a given area .",
    "the more general case can be proved for example by looking at the minimal axis align rectangle containing the body @xmath156 and observing that its surface area must be smaller or equal to the surface area of @xmath156 .",
    "the following lemma will be used in the proof of lemma  [ lem : iso_simple ] .",
    "[ lem : iso2 ] if @xmath157 is an integer partition of @xmath158 , @xmath159 , let @xmath160 then @xmath161 moreover if @xmath162 then @xmath163    since @xmath164 is concave , the minimum of @xmath165 under the constraints that @xmath166 and each @xmath167 is obtained when all of the @xmath168 but one , satisfy @xmath169 .",
    "thus @xmath170 the first statement proof follows . when @xmath162 , utilizing the concavity of @xmath171 allows to obtain a better bound .",
    "consider the integer partition @xmath172 obtained by joining all the mass of @xmath173 to @xmath174 except one unit that is left separately : @xmath175 since @xmath176 we get @xmath177 this implies @xmath178 so taking square roots we see that @xmath179 hence , the first statement of the lemma gives @xmath180 as needed .",
    "we can now prove lemma  [ lem : iso_simple ]    note that except for the edges at the boundary of the grid @xmath38 ^ 2 $ ] , every edge at the boundary of one of the tiles @xmath181 is part of a constraint and appears uniquely .",
    "thus by proposition  [ prop : constraint ] it follows that @xmath182 where the second inequality follows from lemma  [ lem : classic ] .",
    "the lemma is then a consequence of lemma  [ lem : iso2 ]    we now prove lemma  [ lem : iso_main ] .",
    "we will take @xmath183",
    "so @xmath184 . we will consider a few cases .",
    "let @xmath185 be the number of tiles of @xmath67 .",
    "* @xmath186 . in this case",
    ", we set @xmath86 ^ 2 $ ] .",
    "then @xmath187 and lemma  [ lem : iso_simple ] implies that @xmath188 hence , the set @xmath69 satisfies the conclusion of lemma [ lem : iso_main ] . * we next consider the case where the second largest tile is of area at least @xmath189 .",
    "we may also take @xmath86 ^ 2 $ ] .",
    "then @xmath187 and by lemma  [ lem : iso2 ] , @xmath190 as needed .",
    "* we next consider the case where @xmath191 ^ 2)$ ] is all part of the same tile of @xmath67 . in this case , we set @xmath192 ^ 2 $ ] .",
    "since @xmath193 , it is sufficient to check that @xmath194 . to this end , consider the graph @xmath195 with vertex set @xmath69 obtained by joining , for @xmath196 , @xmath197 and @xmath198 if @xmath199 . in words , the edges of @xmath195 correspond to pairs of vertices that are adjacent both in @xmath69 and in the original puzzle .",
    "therefore , if @xmath197 and @xmath200 are in the same connected component of @xmath195 then @xmath201 ( this can be proven by induction on the length of the minimal path connecting @xmath197 and @xmath200 in @xmath195 ) .",
    "thus since @xmath202 it follows that @xmath203 is an edge of @xmath195 .",
    "hence , our assumption @xmath135 and @xmath204 for some @xmath205 , implies that @xmath206 and @xmath207 are not in the same connected component of @xmath195 . on the other hand",
    ", we observe that except for the edges in @xmath208 , every edge at the boundary of a connected component of @xmath195 is part of a constraint in @xmath94 . by inspecting the possible configurations of the connected component of @xmath207 in @xmath88",
    ", we see that has a at least @xmath14 edges on its boundary which are not in @xmath208 .",
    "it follows there are at least @xmath14 constraints . by lemma  [ prop :",
    "constraint ] , it implies that @xmath209 as needed . *",
    "the last case is where @xmath210 , all the parts but one are of area at most @xmath189 and there exist @xmath211 ^ 2 $ ] which belong to different tiles .",
    "let @xmath212 be the tile of @xmath67 with the maximal size .",
    "note that @xmath213 since @xmath214 and @xmath215 lie in different tiles , at least one of the two does nt belong to @xmath212 .",
    "wlog assume that @xmath216 where @xmath217 .",
    "let @xmath218 denote the connected component of @xmath197 in the subset @xmath38 ^ 2 \\setminus f^{-1}(t_0)$ ] .",
    "a key observation is that since @xmath219 , it follows that none of the elements of @xmath218 are adjacent to the boundary of the grid @xmath38 ^ 2 $ ] .",
    "in other words each edge in @xmath220 has one of its end point in @xmath221 .",
    "this implies that @xmath222 , where @xmath223 is the _ vertex boundary _ of @xmath218 .",
    "we set @xmath224 .",
    "+ define @xmath225 and let @xmath226 .",
    "we assume without loss of generality that @xmath227 for @xmath228 and @xmath229 is empty otherwise .",
    "in other words , the number of tiles of @xmath70 is @xmath230 .",
    "we wish to lower bound @xmath231 .",
    "note that every edge between different @xmath229 s defines a constraint .",
    "thus @xmath232 moreover , every edge in @xmath233 defines a constraint with a vertex that appears only once .",
    "thus @xmath234 thus by proposition  [ prop : constraint ] and the fact that the boundary of each set is at least @xmath14 it follows that @xmath235 if @xmath236 then @xmath237 and so @xmath238 .",
    "however since @xmath239 is integer we get @xmath240 and therefore @xmath241 as needed .",
    "so it remains to prove the claim when @xmath242 . in this case ,",
    "@xmath243 and @xmath244 as needed .",
    "the proof is complete .",
    "we now prove our main result theorem [ thm : main ] .",
    "we will describe a deterministic algorithm which reconstructs the planted assembly with high probability if @xmath245 .",
    "theorem [ thm : main ] will be a direct consequence of the forthcoming theorem [ thm : maincr ] and theorem [ thm : maincc ] which give respectively the correctness of the algorithm and its running time . throughout this section , we take @xmath246 , where @xmath183 is as in theorem [ thm : k_bound ] and @xmath9 large enough so that @xmath247 .    consider the original planted assembly of the puzzle . in this assembly",
    ", we refer to pieces located in @xmath248 \\times [ k+1 , n - k]$ ] as _ core _ pieces , and to other pieces as _ peripheral _ pieces .",
    "we further partition the periphery into @xmath35 concentric _ shells _",
    ", where shell  @xmath35 contains those pieces on the boundary of the puzzle , and shell @xmath249 for @xmath250 containing those pieces at distance @xmath251 from shell @xmath35 .",
    "shell @xmath206 is defined similarly , it is the inner boundary of the core .",
    "an edge is a peripheral edge if it is adjacent to a peripheral piece .",
    "a jig of a piece refers to an edge adjacent to a piece .",
    "recall that , for any piece @xmath15 , if @xmath67 is in @xmath252 the four pieces @xmath253 , @xmath254 , is called a candidate neighborhood of @xmath15 .",
    "let @xmath255 be a fixed constant .",
    "we say that a puzzle is _ typical _ if the following properties hold ,    a.   [ typ1]every core piece @xmath15 has a unique candidate neighborhood . b.   [ typ2 ] every peripheral piece @xmath15 either has no candidate neighborhood or a unique candidate neighborhood . in this last case , this candidate neighborhood is the neighborhood of the piece in the planted assembly .",
    "c.   [ typ4 ]",
    "the number of peripheral edges with a non - unique color among the peripheral edges is at most @xmath256 .",
    "d.   [ typ5 ] for every peripheral piece @xmath15 and two jigs of @xmath15 ( say @xmath257 and @xmath258 ) , no other peripheral piece @xmath259 has two jigs ( say @xmath260 and @xmath261 ) with matching colors .",
    "namely , @xmath262 and @xmath263 can not hold simultaneously .",
    "e.   [ typ6 ] for every two colors @xmath264 there are at most @xmath265 pieces with two jigs with these colors .",
    "if @xmath35 is as above and @xmath266 in property , with high probability , a random puzzle is typical .",
    "the first two properties are a consequence of theorem [ thm : k_bound ] .",
    "indeed , from the union bound , theorem [ thm : k_bound ] implies that with high probability , for any piece @xmath46^ 2 $ ] if @xmath267 then @xmath268 for all @xmath254 .",
    "let us call @xmath81 , the latter event . by definition ,",
    "if @xmath81 holds , any piece has at most one candidate neighborhood and this candidate neighborhood is the neighborhood of the piece in the planted assembly .",
    "however , if @xmath15 is a core piece , @xmath47 is non - empty , hence , if @xmath81 holds , @xmath15 has necessary a unique candidate neighborhood .",
    "this implies properties - .",
    "we check property .",
    "let @xmath269 be the number of peripheral edges and let @xmath270 be the number of peripheral edges which have a non - unique color among the peripheral edges .",
    "the probability that two different edges have the same color is @xmath271 .",
    "hence , the expectation of @xmath270 is at most @xmath272 . since @xmath273 , from markov inequality",
    ", it implies that with high probability , @xmath274 .",
    "we check property .",
    "let us say that pieces @xmath15 and @xmath259 have two colors in common , if we can find two jigs of @xmath15 ( say @xmath257 and @xmath258 ) , and two jigs of @xmath259 ( say @xmath260 and @xmath261 ) such that @xmath262 and @xmath263 .",
    "the probability that two distinct pieces have two colors in common is at most @xmath275 if these pieces are not adjacent in the planted puzzle and at most @xmath276 if they are adjacent .",
    "hence , the expected number of pairs of peripheral pieces which have two colors in common is at most @xmath277 . since @xmath273 ,",
    "the latter is @xmath278 , implying property .",
    "we finally check property .",
    "it suffices to prove the claim for pieces whose location @xmath279 ^ 2 $ ] satisfies that @xmath280 is odd ( even ) with @xmath281 instead of @xmath282 .",
    "we restrict ourselves to those pieces .",
    "note that no two such pieces share any edge .",
    "the probability that a specific piece will have two jigs with colors @xmath264 is at most @xmath283 .",
    "therefore , by independence , the probability that there are at least @xmath284 pieces with jigs with colors @xmath264 is at most @xmath285 we take the union bound over all @xmath286 pairs of colors .",
    "we find that the probability that there is a pair @xmath264 such that there are at least @xmath287 pieces with jigs with colors @xmath264 is at most @xmath288 for any integer @xmath289 , the latter goes to @xmath206 with @xmath9 .",
    "since @xmath290 , we can choose @xmath291 .",
    "it follows that there at most @xmath292 pieces with two jigs of a given colors .",
    "since @xmath183 , it implies property .",
    "we now describe a deterministic algorithm that will reconstruct the planted assembly whenever the underlying puzzle is typical .",
    "we describe successively each step of the algorithm on a general puzzle and explain how it proceeds on a typical puzzle .",
    "we will later explain how to implement it .    1 .   for each puzzle piece @xmath15 ,",
    "determine whether it has a candidate neighborhood .",
    "if there is no candidate neighborhood mark the piece @xmath15 as peripheral .",
    "if there is a unique candidate neighborhood note which pieces are the neighbors of @xmath15 .",
    "finally , if there is a piece with a non - unique candidate neighborhood , the algorithm stops here and fails to reconstruct the planted assembly .",
    "the properties - imply that the algorithm will not stop for a typical puzzle .",
    "observe also that property implies that all pieces marked as peripheral are indeed peripheral pieces .",
    "note however , that for the other pieces , we do not yet know whether they are peripheral or belong to the core .    1 .",
    "greedily join pairs of pieces that are neighbors of each other , as long as possible .",
    "if the largest connected component does not contain a @xmath293 by @xmath293 square , the algorithm stops and fails .    for a typical puzzle , property implies that all core pieces will belong to the same connected component .",
    "the condition @xmath247 implies that the largest connected component does necessarily contain the core .",
    "hence the algorithm will not stop here .",
    "importantly , properties - imply that the pieces are necessarily assembled as in the planted assembly .    1 .   from the largest connected component ,",
    "determine the boundaries of the core ( if only one @xmath294 by @xmath294 square fits ) , or guess the boundaries of the core if there is more than one option .",
    "( there are at most @xmath295 options for where to place the left boundary and at most @xmath295 options for where to place the bottom boundary , so altogether there at most @xmath296 possibilities and all of them can be tried . ) for simplicity of the presentation , once the core has been determined , disassemble all peripheral pieces and keep only the core .    for a typical puzzle , we will have to check that if the guess of the core was not correct then the remainder steps of the algorithm will detect it . on the contrary , if the guess was correct , then the algorithm should return the planted assembly .    1",
    ".   greedily assemble the shells of the periphery one by one , from the core towards the inner boundary as follows .",
    "shell @xmath206 is already assembled .",
    "for @xmath297 , suppose that shell @xmath249 was already assembled . to assemble shell @xmath298 find in each one of the four sides of shell @xmath249 one piece whose free edge ( leading out of the assembled part ) has a color that appears only once among the yet unassembled peripheral pieces .",
    "if no such edge exist for a side , the algorithm is stuck and moves to the next step . otherwise , find the unique yet unassembled peripheral piece that has an edge of the desired color and insert it in its location .",
    "thereafter , the rest of shell @xmath298 is greedily assembled as follows .",
    "consider an undetermined location next to an already assembled piece of shell @xmath298 which is not one of the four corners of shell @xmath298 .",
    "this undetermined location is neigbhor of two already assembled pieces , thus it specifies two free edges .",
    "if , among the yet unassembled pieces , there is a unique piece which has matching colors with these two free edges , we insert it here . if not , the algorithm is stuck and moves to the next step .",
    "when , all but the four corners of shell @xmath298 are assembled , the above procedure is applied to the four corners .",
    "assume that the puzzle is typical and that the guess of the core was correct .",
    "we should check that the algorithm finds the planted assembly .",
    "we prove by recursion on @xmath249 , @xmath297 , that the algorithm reconstructs correctly shell @xmath298 . to this end ,",
    "notice that property implies that for each side of shell @xmath249 , @xmath297 , there will be at least one free edge among the @xmath299 free edges with a color which appears once among the yet unassembled pieces .",
    "then , thanks to property , we will reconstruct unambiguously shell @xmath298 .",
    "assume that the puzzle is typical and the guess of the core was not correct .",
    "we should check that the algorithm is stuck at some point . as pointed earlier ,",
    "the guessed core is an @xmath294 by @xmath294 square in the planted assembly .",
    "if the algorithm has not been stuck earlier , it will reconstruct successive shells until one side of length @xmath300 of the assembled pieces is on the boundary of the planted assembly for some @xmath297 .",
    "then , by property at least one of the free edges on this side has a color which is not present among the yet unassembled pieces .",
    "hence , it will not be possible to assemble it and the algorithm will be stuck .    1 .",
    "if a properly colored assembly has been found , the algorithm returns this assembly .",
    "otherwise , try a new guess for the core and repeat stage 4 .",
    "if all guesses for the core have been tried , the algorithm stops and fails .",
    "the above analysis of the algorithm has proved its correctness on typical puzzles .",
    "( note that we have not used so far the property . )",
    "[ thm : maincr ] if the puzzle is typical then the above algorithm recovers the planted puzzle .",
    "we now analyze the complexity of the algorithm , this is where property will be used .",
    "[ thm : maincc ] if the puzzle is typical then the above algorithm can be implemented to run in time @xmath301 .",
    "there are most @xmath302 pairs of colors used in the puzzle . in time @xmath303 , we can build a table which to any such pair of colors returns the set of pieces which have matching colors .",
    "property implies that for all pairs of colors this set has cardinal at most @xmath304 .",
    "we perform step 1 of the algorithm by listing all the feasible assemblies of @xmath38 ^ 2 $ ] .",
    "this list can be computed in time @xmath301 in the following manner :    a.   enumerate over all possible pieces in the top row and left column of the square .",
    "that is , we enumerate all local assembly on @xmath305 ) \\cup ( [ -k , k ] \\times \\{k\\})$ ] . b.   for each feasible local assembly on @xmath69 , we enumerate all pieces that can be placed on the top and left corner of @xmath38 ^ 2 \\backslash w$ ] .",
    "it gives the set of feasible assembly on @xmath306 .",
    "c.   we repeat the previous step to @xmath218 and proceed sequentially from top to bottom and left to right .",
    "the output of the algorithm is the enumeration of all feasible assembly of @xmath38 ^ 2 $ ] . by exhaustive search ,",
    "the running time of part ( a ) is @xmath307 . for the part ( b)-(c ) , the running time to enumerate",
    "all feasible assembly whose restriction to @xmath69 is fixed is @xmath308 where @xmath270 is as above .",
    "it corresponds to the calls in the table which to any pair of colors return the set pieces which have matching colors .",
    "indeed , once the top row and left column are fixed , each new piece has two colors constrained .",
    "there are at most @xmath309 calls in this table .    in the process of computing this list of all feasible assemblies , when a new feasible assembly on @xmath38 ^ 2 $ ] is found ,",
    "we update in time @xmath310 , the candidate neighborhood of the central piece .",
    "it follows that step @xmath32 of the algorithm can be performed in time @xmath311 .",
    "step 2 is performed in time @xmath312 by a greedy exploration .",
    "the choice of possible cores in step 3 will require at most @xmath296 trials of the remainder steps . in step 4 , to reconstruct shell @xmath298",
    ", it first requires a time @xmath313 to find on each side , the free edge with unique color .",
    "then , the reconstruction of the shell will require a time @xmath314 , corresponding to the @xmath315 calls in the table which to any pair of colors return the set pieces which have matching colors . we obtain the claimed running time for the algorithm .",
    "the model that we have studied can be generalized to a model where the jigs have a shape and the pieces are allowed to be rotated .",
    "this could be formalized using ( oriented ) edges as follows .",
    "the set of edges @xmath316 of the grid such that @xmath317 ^ 2 $ ] is denoted by @xmath81 .",
    "the set @xmath318 is the subset of edges such that both @xmath197 and @xmath200 are in @xmath85 ^ 2 $ ] .",
    "it is stable under the involution @xmath319 defined for every @xmath316 by @xmath320 .",
    "the edges adjacent to @xmath321 are organized in counter - clockwise order ( right , up , left and down ) , we set @xmath322 where @xmath323 .",
    "now , each edge receives a _ jig _ according to a function @xmath324 $ ] .",
    "the set of jigs @xmath25 $ ] is equipped with an involution @xmath325 \\to [ q]$ ] .",
    "we interpret @xmath326 as the jigs @xmath327 and @xmath328 match together , see figure [ fig1 ] .",
    "puzzle _ is a then function @xmath20 such that for all @xmath329 , @xmath330 the case that we have treated previously corresponds to @xmath331 equal to the identity .",
    "we now define the way the pieces can be assembled . the _ cyclic group _",
    "@xmath332 is the subgroup of permutations generated by @xmath333 .",
    "below , if @xmath334 is a function on @xmath335 , @xmath336 and @xmath337 , we set @xmath338 and @xmath339 . an _ assembly _",
    "@xmath334 is a permutation on @xmath335 which satisfies :      in words , condition ( i ) says that piece @xmath200 is assigned a location @xmath344 ^ 2 $ ] and is rotated by an angle multiple of @xmath345 . by construction the map which to @xmath197 assigns @xmath200 is a bijection of @xmath85 ^ 2 $ ] .",
    "condition ( ii ) fixes a global orientation to the puzzle .",
    "we will say that an assembly is _ feasible _ if for all @xmath329 , @xmath346    a feasible assembly is a solution of the puzzle : all pieces are in a position where the jigs match .",
    "note that by definition , the identity is a feasible assembly : it gives back the pieces in their original position .",
    "we say that a puzzle has _",
    "unique vertex assembly _ if it has only one feasible assembly ( note that without condition ( ii ) , it would only be possible to uniquely assemble the puzzle up to a global rotation by a multiple of @xmath345 ) .    observe that , unlike in a usual jigsaw puzzle , the boundary pieces ( pieces in @xmath85 ^ 2 \\backslash [ 2,n-1]^2 $ ] ) can not be distinguished from the other pieces . to recover a usual jigsaw puzzle",
    ", we may simply consider the subset of assembly which satisfy the extra condition @xmath347 ( so that edges on the boundary remain on the boundary ) .",
    "in this new setting , a _ random puzzle _ is simply obtained by sampling the function @xmath20 uniformly on the set of puzzles ( functions @xmath20 which satisfies ) .",
    "hence , up to the constraint , the jigs are independent and uniformly distributed .",
    "theorem [ thm : main ] continues to hold on this extended setting .",
    "indeed , it is easy to check that the proof of theorem [ thm : main ] continues to work if we adapt the definition of the constraint graph ( to accommodate the involution ) .",
    "harary , f. ( 1974 ) .",
    "a survey of the reconstruction conjecture . in _",
    "graphs and combinatorics ( proc .",
    "capital conf . ,",
    "george washington univ . ,",
    "washington , d.c . , 1973 )",
    "_ , pages 1828",
    ". lecture notes in math .",
    ", vol , 406 .",
    "springer , berlin ."
  ],
  "abstract_text": [
    "<S> in a recent work , mossel and ross considered the shotgun assembly problem for a random jigsaw puzzle . </S>",
    "<S> their model consists of a puzzle - an @xmath0 grid , where each vertex is viewed as a center of a piece . </S>",
    "<S> they assume that each of the four edges adjacent to a vertex , is assigned one of @xmath1 colors ( corresponding to `` jigs '' , or cut shapes ) uniformly at random . </S>",
    "<S> mossel and ross asked : how large should @xmath2 be so that with high probability the puzzle can be assembled uniquely given the collection of individual tiles ? </S>",
    "<S> they showed that if @xmath3 , then the puzzle can be assembled uniquely with high probability , while if @xmath4 , then with high probability the puzzle can not be uniquely assembled . </S>",
    "<S> here we improve the upper bound and show that for any @xmath5 , the puzzle can be assembled uniquely with high probability if @xmath6 . </S>",
    "<S> the proof uses an algorithm of @xmath7 running time . </S>"
  ]
}