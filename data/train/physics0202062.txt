{
  "article_text": [
    "astrophysical applications related to the physics of the early universe , as well as challenges posed by the physics programs at new heavy ion accelerators , have triggered a renewed interest in the understanding of real time processes in the context of quantum field theory . with the advent of new computer technology and the recent success of new computational schemes , non - equilibrium phenomena which have been previously studied only in the framework mean - field theory  @xcite , are now being revisited , and more complex next to leading order approaches  @xcite are being used in an attempt to clarify the role played by the rescattering mechanism , which is responsible for driving an out of equilibrium system back to equilibrium . of particular interest is the study of the dynamics of phase transitions and particle production following a relativistic heavy - ion collision .",
    "one way of approaching this study is based on solving schwinger dyson equations within the closed time path ( ctp ) formulation  @xcite .",
    "this formalism has been recently shown to provide good approximations of the real time evolution of the system both in quantum mechanics and 1 + 1 dimensional classical field theory  @xcite , where direct comparisons with exact calculations can be performed .",
    "the key element in carrying out such studies is related to the calculation of the two - point green function , which is solved for self - consistently with the equations of motion for the fields .",
    "the two - point green function gives rise to volterra - type integral or integro - differential equations . in the process of extending our study to encompass a higher number of spatial dimensions , i.e. 2 + 1 and 3 + 1 field theory , we are faced with the challenge of coping with constraints dictated both by storage and time - related computational limits .",
    "thus our interest in designing algorithms which feature spectral convergence in order to achieve convergence with minimum storage requirements .",
    "in addition , we also desire these algorithms to scale when ported to massively multiprocessor ( mpp ) machines , so that solutions can be obtained in a reasonable amount of time .",
    "algorithms for volterra integral and integro - differential equations usually start out at the lower end of the domain , @xmath0 , and march out from @xmath1 , building up the solution as they go  @xcite .",
    "such methods are _ serial _ by nature , and are , in general , not suitable for parallel implementation on a mpp machine .",
    "even so , clever approaches to already existing methods can provide algorithms that take advantage of a parallel processing computer : shaw  @xcite has shown recently that once the starting values of the approximation are obtained , one can design a _ global _",
    "approach where successive approximations of the solution over the entire domain @xmath2 $ ] can be evaluated simultaneously .    in a recent paper  @xcite one of us",
    "has discussed a spectral method  @xcite of solving some types of equations of interest for the study of time - dependent nonequilibrium problems in quantum field theory .",
    "the gist of the method consists in expanding out the unknown function in terms of chebyshev polynomials on a suitable grid , thus reducing the problem to finding the numerical solution of a system of linear equations .",
    "the main advantage of this method over standard finite - difference type methods resides in the spectral character of its convergence .",
    "this is related in part to the fact that chebyshev type methods use a non - uniform grid , while finite - difference methods require a uniform grid .",
    "usually there is a trade - off between computational time and storage requirements , and a balanced solution must be reached on a case - by - case basis .",
    "spectral methods are more expensive per point as the matrices may be considerably denser than in the finite - difference case , but we require considerably fewer grid points in order to achieve the same degree of accuracy . by expanding the unknown function on a compact support in chebyshev polynomials and using a partition of the domain based either on the set of ( n+1 ) extrema or the set of  n zeros of @xmath3  the chebyshev polynomial of first kind of degree  n  we in fact replace a continuous problem by a discrete one . for non - singular functions",
    "the discrete orthogonality and completeness relations for chebyshev polynomials at the above grid points assure a _ defacto _ exact expansion for an _ arbitrary _ finite value @xmath4 .",
    "in practice however , one has to compute derivatives and integrals of the unknown function at the collocation points , and the chebyshev expansion provides only an approximation for these subsequent computations . these errors , together with the finite accuracy of numerical methods needed in conjunction with the chebyshev expansion , conspire in order to deteriorate the accuracy of the solution at very small values of  n.    the paper is organized as follows : in section  [ sec : finite ] , for comparison purposes , we start by reviewing a finite - difference approach for the numerical solution of volterra type integro - differential equations .",
    "we review the general framework of the chebyshev - expansion method in section  [ sec : cheby ] , and illustrate our approach for the case of volterra integro - differential equations . in section  [ sec : test ] we present a complete assessment of the convergence and computational cost of the proposed method for the case of a test problem , and compare with results obtained via the finite - difference method . in section  [ sec : ctp ] we discuss the relevant aspects of a large - scale calculation arising in the study of time - dependent quantum field theory , for which our numerical strategy is particularly suitable .",
    "we present our conclusions in section  [ sec : concl ] .",
    "the type of problems arising in the study of time - dependent nonequilibrium quantum field theory via a schwinger - dyson equation approach , can be formally reduced to the general case of a nonlinear volterra integro - differential equation .",
    "direct methods for solving nonlinear volterra integral and integro - differential equations are inherently serial and therefore have not received much attention for use on a parallel computer .",
    "it is worth mentioning here the work of crisci _ et al _",
    "@xcite , who concentrated on the stability aspects of parallel iteration of volterra - runge - kutta ( vrk ) methods for solving volterra integral equations on parallel computers .",
    "vrk methods are step - by - step methods and can take advantage of parallel architecture .",
    "@xcite covered the stability of parallel block methods for ordinary differential equations ( ode ) and included equations of the integro - differential type in their discussion .",
    "we summarize here a recent parallel algorithm  @xcite , which concentrates on modifying the algorithmic side of the numerical solution process for use on a parallel processor while consciously utilizing methods that are known to be stable .",
    "the algorithm is in effect an example of a higher - order finite - difference approach , and we use this approach to compare with the spectral method presented later in this paper .    for illustration , let us consider a first - order nonlinear volterra integro - differential equation of the form @xmath5     \\ > ,     \\quad x \\in [ a , b ] \\ > , \\label{eq : ode2_nlin}\\end{aligned}\\ ] ] with @xmath6 = \\int_{a}^x k[x , t;\\mathbf{y}(t ) ] \\mathrm{d}t     \\ > , \\label{eq : zz}\\end{aligned}\\ ] ] and subject to the initial condition @xmath7 let @xmath8 be a partition of i=[a , b ] , where @xmath9 . the problem is to find approximations @xmath10 to the solution @xmath11 of eqs .  ( [ eq : ode2_nlin][eq : bv_cond ] ) for each @xmath12 .",
    "a @xmath13-step method for an integro - differential equation of the form  ( [ eq : ode2_nlin ] ) is given by @xmath14 where @xmath15 the weights @xmath16 depend on the @xmath13-step method selected and the weights @xmath17 are those of a standard quadrature formula for integrating a function whose value is known at equally spaced steps , such as a newton - cotes or newton - gregory quadrature rule . for our multi - step ( @xmath18 ) method  @xcite",
    "we choose the fourth order adams - bashforth predictor @xmath19 \\>,\\end{aligned}\\ ] ] and the adams - moulton corrector @xmath20 \\>,\\end{aligned}\\ ] ] while the integral term  ( [ eq : zz ] ) is calculated based on the newton - gregory quadrature formula .",
    "we use a fourth order runge - kutta method in order to start out the calculation . in order to make the algorithm suitable for parallel processing , it is useful to recall that a standard quadrature method based on an uniform grid for the integral term  @xmath21 requires knowledge of the integrand function at the abscissas in the interval @xmath22 $ ] .",
    "this is obviously a serial process and not a good candidate for parallelization .",
    "it can be observed however , that once the starting values are obtained , _ all _ approximations @xmath21 with @xmath23 can simultaneously be evaluated up to and including @xmath24 .",
    "after that , once a value of @xmath25 corresponding to a new step @xmath26 is established via the predictor - corrector method , all values @xmath21 with @xmath27 can also be evaluated simultaneously .",
    "this observation makes the following algorithm possible :    1 .",
    "find the starting values @xmath28 with @xmath23 2 .",
    "@xmath29 + add contributions to @xmath21 corresponding to @xmath30 , where @xmath31 3 .",
    "@xmath29 1 .",
    "predict @xmath32 2 .",
    "estimate @xmath33 from @xmath34 3 .",
    "correct @xmath32 4 .",
    "@xmath35 + update @xmath36 by adding the contribution corresponding to @xmath34    the above numerical algorithm is implemented using the openmp style directives for the portland group s pgf77 fortran compiler , and reportedly shows good scalability on a shared - memory multiprocessor .",
    "the speedup of the finite difference method is best for a large number of grid points which , correspondingly , gives a better solution approximation .",
    "for example , with n=5120 and 4 processors the speedup is 3.86,a good measure of processor utilization .",
    "while the preceding algorithm performs well on a shared memory platform , it does not port easily to an mpp machine . before we comment on the efficiency of the algorithm ,",
    "let us make two general comments : firstly , we denote by @xmath37 and @xmath38 the time required to perform a floating - point operation and the time required to send a floating - point number , respectively .",
    "secondly , we will ignore for simplicity the effect of message sizes on communication costs , and assume throughout that the ratio @xmath39 is independent of @xmath4 .",
    "returning now , to our proposed algorithm , we remark that the communication cost for the corresponding implementation involves only the integral terms .",
    "even so , using the message - passing interface ( mpi ) protocol the communication cost is @xmath40 for the starting values and up to @xmath41 for the remainder of the algorithm which gives a total of @xmath42 .",
    "the total number of flops depends on the specific application but a reasonable measure is the number of function evaluations which is given by @xmath43 .",
    "the ratio of communication to computation @xmath44 approaches a _ constant _ value as @xmath4 gets larger .",
    "the communication overhead problem can be relaxed by employing a spectral method discussed in the following section , the improvement being especially significant for a multidimensional problem of the type required by our nonequilibrium quantum field theory calculations  @xcite .",
    "consider the @xmath45 extrema of the chebyshev polynomial of the first kind of degree  @xmath4 , @xmath3 .",
    "this set defines a non - uniform grid in the interval @xmath46 $ ] , as @xmath47 on this grid , the chebyshev polynomials of degree @xmath48 obey discrete orthogonality relations @xmath49 where the constants @xmath50 are @xmath51 here , the summation symbol with double primes denotes a sum with both the first and last terms halved .",
    "we approximate an arbitrary continuous function of bounded variation @xmath52 in the interval @xmath53 $ ] , as @xmath54 with @xmath55 eq .",
    "( [ eq : f_approx_b ] ) is exact at _ x _ equal to @xmath56 given by eq .",
    "( [ eq : tn_max ] ) . based on eq .",
    "( [ eq : f_approx_b ] ) , we can also approximate derivatives and integrals as @xmath57 and @xmath58 in matrix format , we have @xmath59     & \\approx &     \\tilde s \\",
    "\\left [ f \\right ]     \\",
    "> , \\label{eq : beqn_b }     \\\\     \\left [ f'(x ) \\right ]     & \\approx &     \\tilde d \\",
    "\\left [ f \\right ]     \\",
    "> , \\label{eq : bteqn_b}\\end{aligned}\\ ] ] the elements of the column matrix @xmath60 $ ] are given by @xmath61 .",
    "the right - hand side of eqs .",
    "( [ eq : beqn_b ] ) and  ( [ eq : bteqn_b ] ) give the values of the integral  @xmath62 and the derivative  @xmath63 at the corresponding grid points , respectively .",
    "the actual values of the elements of the matrices @xmath64 and @xmath65 can be derived using eqs .",
    "( [ eq : f_derivative_b ] , [ eq : f_int_b ] ) .",
    "in order to illustrate the chebyshev algorithm , we consider again the case of a first - order nonlinear volterra integro - differential equation of the form@xmath5     \\",
    "> ,     \\quad x \\in [ a , b ] \\ > ,     \\\\ & &     z[x;\\mathbf{y } ] = \\int_{a}^x k[x , t;\\mathbf{y}(t ) ] \\mathrm{d}t     \\>,\\end{aligned}\\ ] ] with the initial condition @xmath66 here we make no explicit restrictions on the actual form of the function @xmath67 $ ] , so both linear and nonlinear equations are included .",
    "we determine the unknown function @xmath68 using a perturbation approach : we start with an initial guess of the solution @xmath69 that satisfies the initial condition @xmath70 , and write @xmath71 with @xmath72 being a variation obeying the initial condition @xmath73 hence , the original problem reduces to finding the perturbation @xmath72 , and improving the initial guess in a iterative fashion .",
    "we use the taylor expansion of @xmath67 $ ] about @xmath74 and keep only the linear terms in @xmath72 to obtain an equation for the variation @xmath72",
    "@xmath75}{\\partial \\mathbf{y}(x ) }     \\right |_{\\mathbf{y}(x)=\\mathbf{y}_0(x ) }     \\epsilon(x )     \\nonumber \\\\     & - &     \\left .",
    "\\frac{\\partial f[x,\\mathbf{y},z[x;\\mathbf{y}]]}{\\partial z[x;\\mathbf{y } ] }     \\right |_{\\mathbf{y}(x)=\\mathbf{y}_0(x ) }     \\int_{a}^x         \\left .",
    "\\frac{\\partial k[x , t;\\mathbf{y}(t)]}{\\partial \\mathbf{y}(x ) }         \\right |_{\\mathbf{y}(x)=\\mathbf{y}_0(x ) }         \\epsilon(t ) \\mathrm{d}t     \\nonumber \\\\ & &     =     - \\mathbf{y}_0'(x ) + f[x,\\mathbf{y}_0(x),z[x;\\mathbf{y}_0(x ) ] ]     \\>. \\label{eq : eps_eqn}\\end{aligned}\\ ] ] equation  ( [ eq : eps_eqn ] ) is of the general form ( [ eq : ode2 ] ) @xmath76 + r(x )     \\",
    "> , \\label{eq : ode2}\\ ] ] where @xmath77     =     \\left .",
    "\\frac{\\partial f[x,\\mathbf{y},z[x;\\mathbf{y}]]}{\\partial \\mathbf{y}(x ) }     \\right |_{\\mathbf{y}(x)=\\mathbf{y}_0(x ) } \\epsilon(x )     \\\\",
    "\\qquad     +     \\left .",
    "\\frac{\\partial f[x,\\mathbf{y},z[x;\\mathbf{y}]]}{\\partial z[x;\\mathbf{y } ] }     \\right |_{\\mathbf{y}(x)=\\mathbf{y}_0(x ) }     \\int_{a}^x         \\left .",
    "\\frac{\\partial k[x , t;\\mathbf{y}(t)]}{\\partial \\mathbf{y}(x ) }         \\right |_{\\mathbf{y}(x)=\\mathbf{y}_0(x ) }         \\epsilon(t ) \\mathrm{d}t     \\>,\\end{aligned}\\ ] ] and @xmath78     \\ > , \\ ] ] together with the initial condition given by  ( [ eq : initial ] ) .",
    "we replace eqs .",
    "( [ eq : ode2 ] ) and  ( [ eq : initial ] ) by an integral equation , obtained by integrating eq .",
    "( [ eq : ode2 ] ) and using the initial condition  ( [ eq : initial ] ) to choose the lower bound of the integral",
    ". we obtain @xmath79 \\ \\mathrm{d}t     +     \\int_{a}^x r(t ) \\mathrm{d}t",
    "\\>,\\end{aligned}\\ ] ] which is in fact a _ linear _ volterra integral equation of the second kind . using the techniques developed in the previous section to calculate integrals , the integral equation  ( [ eq : int_ic ] ) can be transformed into a linear system of equations .",
    "a practical implementation of this algorithm is illustrated via a test problem in the following section .",
    "following shaw  @xcite , we consider the test problem @xmath80 \\>,\\end{aligned}\\ ] ] which has the exact solution @xmath81 we shall use the initial guess @xmath82 , so that @xmath83 .",
    "the equation for the variation @xmath72 is @xmath84 \\mathrm{d}t     - \\int_0^x \\mathrm{d}s \\int_0^s     \\frac{s e^{1 -\\mathbf{y}_0(t)}}{(1+t)^2 } \\mathrm{d}t     \\>.\\end{aligned}\\ ] ] in matrix format and using the chebyshev expansion presented above , the variation @xmath72 will be obtained as the solution of linear system of equations @xmath85 \\ = \\ c     \\ > , \\label{eq : sislin}\\ ] ] with matrices @xmath86 and @xmath87 given as @xmath88_j     \\nonumber \\\\ & &     +     \\tilde s_{i \\ , k } \\tilde x_k \\tilde s_{k \\ , j } \\left [ \\frac{e^{1 -\\mathbf{y}_0(t)}}{(1+t)^2 } \\right ] _",
    "j     \\ > ,     \\qquad     i , j = 0(1)\\,n     \\ > ,     \\nonumber \\\\",
    "c_i & = &     - [ \\mathbf{y}_0(t ) ] _ i + y_0     + \\tilde s_{i \\ , k }     \\left [ t e^{1 - \\mathbf{y}_0(t ) } - \\frac{1}{(1+t)^2 } - t     \\right ] _",
    "k     \\nonumber \\\\ & &     -     \\tilde s_{i \\ , k } \\tilde x_k \\tilde s_{k \\ , \\ell }            \\left [ \\frac{e^{1 -\\mathbf{y}_0(t)}}{(1+t)^2 } \\right ] _",
    "\\ell     \\>.\\end{aligned}\\ ] ]    from a computational point of view the computer time is spent initializing the matrix elements @xmath89 and @xmath90 on one hand , and finding the solution of ( [ eq : sislin ] ) on the other . on the first matter , the calculation decouples nicely , and once we have the vector @xmath91 $ ] , we can calculate @xmath92 in parallel for @xmath93 .",
    "the algorithm is as follows :    1 .",
    "calculate @xmath91 = [ y_0 ] + [ \\epsilon]$ ] ; 2 .",
    "broadcast @xmath91 $ ] ; 3 .",
    "_ do _ @xmath94 : 1 .",
    "master to slave : send @xmath95 ; 2 .   slave : compute @xmath96 ; 3 .",
    "slave to master : return @xmath96 .    regarding the second step , i.e. solving the linear system of equations , the best choice is to use the machine specific subroutines , which generally outperform hand - coded solutions .",
    "when such subroutines are not available , as in the case of a linux based pc cluster for instance , one can use one of the mpi implementations available on the market .",
    "we shall see that the efficiency of the equation solver is critical to the success of the parallel implementation of the chebyshev - expansion approach . in order to illustrate this aspect we perform two calculations , first using a lu factorization algorithm , and secondly using an iterative biconjugate gradient algorithm . these are standard algorithms  @xcite for solving systems of linear equations , but their impact on the general efficiency of the approach is quite different .",
    "figure  [ fig : time ] depicts the average cpu time required to complete the calculation for the various methods .",
    "figure  [ fig : conv ] illustrates the convergence of the two numerical methods .",
    "the spectral character of the method based on chebyshev polynomials allows for an excellent representation of the solution for @xmath97 .",
    "we base our findings on a @xmath98 criteria , where @xmath99 denotes the sum of all absolute departures of the calculated values from the exact ones , at the grid points .    the number of iterations required to achieve the desired accuracy in the chebyshev case is depicted in fig .",
    "[ fig : iter ] .",
    "the number of iterations becomes flat for @xmath97 , and stays constant ( 17 iterations ) even for very large values of n. the higher number of iterations corresponding to the lower values of n , represents an indication of a insufficient number of chebyshev grid points : the exact solution can not be accurately represented as polynomial of degree n for @xmath100 $ ] .",
    "it is interesting to note that for @xmath101 , a reasonable lower domain for the representation of the solution using chebyshev polynomials , the reported cpu time is so small that for our test problem there is no real justification for porting the algorithm to a mpp machine .",
    "this situation will change for multi - dimensional problems such as those encountered in our nonequilibrium quantum field theory studies .",
    "the lu factorization algorithm is an algorithm of order @xmath102 and consequently , most of the cpu time is spent solving the linear system of equations ( see fig .",
    "[ fig : time_lu ] ) . as a consequence ,",
    "a parallel implementation of the lu algorithm is very difficult .",
    "figure  [ fig : scale_lu ] shows how the average cpu time changes with the available number of processors .",
    "here we use a very simple mpi implementation of the lu algorithm as presented in reference  @xcite .",
    "even though we could certainly achieve better performance by employing a sophisticated lu equation solver , the results are typical .",
    "since the actual size of the matrices involved is small , the communication overhead is overwhelming and the execution time does not scale with the number of processors .",
    "fortunately , even for dense matrices and small values of the number of grid points  @xmath4 , one can achieve a good parallel efficiency . by employing an iterative method such as the iterative biconjugate gradient method",
    ", one can render the time required to solve the system of linear equations negligible compared with the time required to initialize the relevant matrices , which in turn is only slightly more expensive than the initialization process of the lu factorization algorithm .",
    "the initialization process can be parallelized using the algorithm presented above and the results are depicted in fig .",
    "[ fig : scale_cg ] .",
    "it appears that by using the biconjugate gradient method the efficiency of the parallel code has improved considerably . however , the average cpu time saturates to give an overall speedup of 3.5 .",
    "this can be understood by analyzing the computation and communication requirements for our particular problem .",
    "the calculation cost to initialize the matrices @xmath86 and @xmath87 is roughly given by the number of floating - point multiplications and additions @xmath103 , while the communication cost is given by @xmath104 . therefore , the ratio of communication to computation is @xmath105 as in the finite - difference case , this ratio approaches a _ constant _ value as @xmath4 gets larger and it becomes apparent that the communication overhead is still a problem .    however , multi - dimensional applications such as those presented in  @xcite require complicated matrix element calculation . in such cases , the process of initializing the matrices @xmath86 and @xmath87 is quite involved , and the ratio of the communication time relative to the computation time becomes favorable .",
    "in addition , the matrix @xmath86 becomes sparse and the size of the linear system of equations is substantially larger , thus one can also take advantage of existing parallel implementation of the iterative biconjugate gradient algorithm  @xcite .",
    "such problems benefit heavily from an adequate parallelization of the code .",
    "we will discuss such an example in the following section .",
    "schwinger , bakshi , mahanthappa , and keldysh  @xcite have established how to formulate an initial value problem in quantum field theory .",
    "the formalism is based on a generating functional , and the evolution of the density matrix requires both a forward evolution from zero to @xmath106 and a backward one from @xmath106 to zero .",
    "this involves  @xcite both positive and negative time ordered operators in the evolution of the observable operators and the introduction of two currents into the path integral for the generating functional .",
    "time integrals are then replaced by integrals along the closed time path ( ctp ) in the complex time plane shown in fig .",
    "[ fig : ctp ] .",
    "we have @xmath107 using the ctp contour , the full closed time path green function for the two point functions is : @xmath108 in terms of the wightman functions , @xmath109 , where the ctp step function @xmath110 is defined by : @xmath111 for complete details of this formalism and various applications , we refer the reader to the original literature  @xcite , and we confine ourselves to discussing how our chebyshev - expansion approach is applied to the computation of the two - point green function .    for simplicity",
    "we consider now the quantum mechanical limit of quantum field theory ( 0 + 1 dimensions ) . in this limit",
    ", we are generally faced with the problem of numerically finding the solution of equation @xmath112 here , the green functions , @xmath113 and @xmath114 , are symmetric in the sense that @xmath115 , and obey the additional condition @xmath116 the function @xmath117 obeys less stringent symmetries @xmath118 which is always the case when @xmath117 has the form @xmath119 where @xmath120 and @xmath121 satisfy  ( [ eq : asym ] ) .",
    "we can further write eq .",
    "( [ eq : asym ] ) as @xmath122 or @xmath123 hence , a green function @xmath113 is fully determined by the component @xmath124 , with @xmath125 .",
    "thus , in order to obtain the solution of eq .",
    "( [ eq : dqeqn ] ) , we only need to solve @xmath126 we separate the real and the imaginary part of ( [ eq : dqbig0 ] ) and obtain the system of integral equations @xmath127 the above system of equations must be solved for @xmath125 .",
    "the two equations are independent , which allows us to solve first for the real part of @xmath128 , and then use this result to derive the imaginary part of @xmath128 .    despite their somewhat unusual form ,",
    "the above equations are two - dimensional volterra - like integral equations and our general discussion regarding the chebyshev spectral method applies .",
    "we will perform a multi - step implementation of the formalism .",
    "let @xmath129 be the grid location corresponding to the collocation point  @xmath130 of the interval labelled  @xmath131 .",
    "then , the discrete correspondent of eq .",
    "( [ eq : dqbig0 ] ) is @xmath132       { \\mathcal{r}e}\\ { q_>(t_i , t_{k[=k_0(n-1 ) + k_1 ] } ) \\ } { \\mathcal{g}}_>(t_k , t_j )     \\nonumber \\\\ & &       - \\sum_{k_1=1}^n [ 2 \\tilde s_{i_1 k_1 } ]       { \\mathcal{r}e}\\ { q_>(t_i , t_{k[=i_0(n-1)+k_1 ] } ) \\ } \\ { \\mathcal{g}}_>(t_k , t_j )     \\nonumber \\\\ & &       + \\sum_{k_0=0}^{j_0 - 1 } \\sum_{k_1=1}^n [ 2 \\tilde s_{n k_1 } ]       q_>(t_i , t_{k[=k_0(n-1)+k_1 ] } ) { \\mathcal{r}e}\\ { { \\mathcal{g}}_>(t_k , t_j ) \\ }     \\nonumber \\\\ & &       + \\sum_{k_1=1}^n [ 2 \\tilde s_{j_1 k_1 } ]       q_>(t_i , t_{k[=j_0(n-1)+k_1 ] } ) { \\mathcal{r}e}\\ { { \\mathcal{g}}_>(t_k , t_j ) \\ }     \\ > ,     \\nonumber \\label{eq : cheby}\\end{aligned}\\ ] ] with @xmath133 .",
    "we will refer now to figs .",
    "[ fig : suma ] and [ fig : sumb ] .",
    "equation  ( [ eq : cheby ] ) involves values of @xmath134 , for which @xmath135 . in such cases",
    ", we use the symmetry @xmath136 , which relates to the values the two - point function located in the domain of interest . for the time interval",
    "@xmath137 the size of the linear system of equations we need to solve is @xmath138     -     \\frac{1}{2}i_0(n-1 ) [ i_0(n-1 ) + 1 ]     \\\\ & &     =     i_0 ( n-1)^2 + \\frac{1}{2 } n(n-1 )     \\>,\\end{aligned}\\ ] ] or of order @xmath139 . in practice",
    ", the value of @xmath4 is taken between 16 and 32 .",
    "tables [ tab : real ] and [ tab : imag ] summarize the number of floating - point operations performed in order to compute the non - vanishing matrix elements corresponding to a given  @xmath95 and  @xmath140 .",
    "we can now calculate the ratio of communication to computation time , by noticing that the numbers in the tables above get multiplied by n , corresponding to the number of collocation points in each time step and summing over the number of steps , i.e. we evaluate @xmath141           \\ + \\",
    "n \\sum_{j_0=1}^{i_0 } \\",
    "\\bigl [ \\textrm{if}\\ j \\le i_0 ( n-1 ) \\bigr ]     \\>.\\ ] ] in table  [ tab : totals ] we summarize all relevant estimates regarding the computation cost for a fixed value of @xmath95 .",
    "in order to estimate the _ total _ communication and computation cost , respectively , these numbers must be multiplied by an additional factor of @xmath4 , corresponding to the number of possible values of @xmath95 in a time step .",
    "this factor is not relevant for estimating the communication overhead , but it must be remembered when one infers the sparsity of the corresponding system of equations .    to conclude we observe that the communication to computation ratio approaches @xmath142 for large values of @xmath143 .",
    "therefore for this problem the communication overhead is reduced substantially in the later stages of the calculation . in practice , this ratio is actually much better , as we compute the functions @xmath114 and @xmath117 on the fly , and this adds considerably to the computational effort .",
    "finally the sparsity of the resulting systems of equations goes to @xmath144 for large values of @xmath143 and @xmath4 , which supports our choice for an iterative equation solver .",
    "we have presented a numerical method suitable for solving non - linear integral and integro - differential equations on a massively multiprocessor machine .",
    "our approach is essentially a standard perturbative approach , where one calculates corrections to an initial guess of the solution .",
    "the initial guess is designed to satisfy the boundary conditions , and corrections are expanded out in a complete basis of n chebyshev polynomials on the grid of ( n+1 ) extrema of @xmath3 , the chebyshev polynomial of first kind of degree  n. the spectral character of the convergence of the chebyshev - expansion approach is the key element in keeping low the number of grid points . from a computational point of view , each iteration involves two stages , namely initializing the relevant matrices and solving the linear system of equations . both stages can be rendered parallel in a suitable manner , and the efficiency of the code increases when applied to complicated multi - step , multi - dimensional problems .",
    "the algorithm discussed in this paper represents the backbone of current investigations of the equilibrium and nonequilibrium properties of various phenomenological lagrangeians .",
    "in particular we are interested in studying the properties of the chiral phase transition at finite density for a 2 + 1 dimensional four - fermion interaction as well as the dynamics od 2-dimensional qcd , with the ultimate goal of indirectly obtaining insights regarding the time evolution of a quark - gluon plasma produced following a relativistic heavy - ion collision .",
    "the work of b.m . was supported in part by the u.s .",
    "department of energy , nuclear physics division , under contract no .",
    "w-31 - 109-eng-38 .",
    "the work of r.s . was supported in part by the natural sciences and engineering research council of canada under grant no .",
    "parallel calculations are made possible by grants of time on the parallel computers of the mathematics and computer science division , argonne national laboratory .",
    "b.m . would like to acknowledge useful discussions with john dawson and fred cooper .",
    "99                                                                            vecchio a  1993 highly stable parallel volterra runge - kutta methods , rapp .",
    "tecnico n. 102 , istituto per applicazioni della matematica , consiglio nazionale delle ricerche , via p. castellino , 111 , 80131 napoli , italy"
  ],
  "abstract_text": [
    "<S> we discuss a numerical algorithm for solving nonlinear integro - differential equations , and illustrate our findings for the particular case of volterra type equations . </S>",
    "<S> the algorithm combines a perturbation approach meant to render a linearized version of the problem and a spectral method where unknown functions are expanded in terms of chebyshev polynomials ( el - gendi s method ) . </S>",
    "<S> this approach is shown to be suitable for the calculation of two - point green functions required in next to leading order studies of time - dependent quantum field theory . </S>"
  ]
}