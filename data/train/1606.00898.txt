{
  "article_text": [
    "let @xmath7 be a power of a an odd prime @xmath6 and let @xmath0 denote the finite field with @xmath7 elements .",
    "the univariate polynomial factorization problem over @xmath0 is , +    * polynomial factorization : _ given a monic square free @xmath8 $ ] of degree @xmath9 , write @xmath4 as a product of its monic irreducible factors . _",
    "+    a square free polynomial is one that does not contain a square of an irreducible polynomial as a factor .",
    "the square free input assumption is without loss of generality @xcite .",
    "berlekamp showed that polynomial factorization can be solved in randomized polynomial time @xcite and there is an extensive line of research @xcite leading to the fastest known algorithm @xcite with expected run time @xmath10 .",
    "the soft @xmath11 notation suppresses @xmath12 and @xmath13 terms for ease of exposition .",
    "+   + the use of drinfeld modules to factor polynomials over finite fields originated with panchishkin and potemine @xcite whose algorithm was rediscovered by van der heiden @xcite .",
    "these algorithms , along with the author s drinfeld module black box berlekamp algorithm @xcite are in spirit drinfeld module analogues of lenstra s elliptic curve method to factor integers @xcite .",
    "the drinfeld module degree estimation algorithm of @xcite uses euler - poincare charactersitics of drinfeld modules to estimate the factor degrees in distinct degree factorization .",
    "a feature common to the aforementioned algorithms is their use of random drinfeld modules , which typically do nt have complex multiplication .",
    "+   + our first algorithm for polynomial factorization is a randomized algorithm with @xmath14 expected run time .",
    "the novelty is the use of drinfeld modules with complex multiplication .",
    "+   + the algorithm constructs a random rank @xmath1 drinfeld module @xmath3 with complex multiplication by an imaginary quadratic extension of the rational function field @xmath15 with class number @xmath16 . at roughly half of the prime ideals",
    "@xmath17 in @xmath18 $ ] , @xmath3 has supersingular reduction .",
    "the hasse invariant of @xmath3 at a prime ideal @xmath17 vanishes if and only if @xmath3 has supersingular reduction at @xmath17 .",
    "a drinfeld module analogue of deligne s congruence , due to gekeler @xcite , allows us to compute a certain lift of hasse invariants modulo the polynomial @xmath4 we are attempting to factor . as a consequence ,",
    "this lift vanishes exactly modulo the irreducible factors of @xmath4 that correspond to the primes with supersingular reduction . in summary",
    ", we get to separate the irreducible factors corresponding to primes with supersingular reductions from those with ordinary reduction . +   +",
    "the algorithm itself is stated in a simple iterative form with no reference to drinfeld modules although drinfeld modules are critical in its conception and analysis .",
    "the run time complexity is identical to that of the commonly used cantor - zassenhaus @xcite algorithm .",
    "although slower than subquadratic time algorithms such as @xcite , unlike these subquadratic algorithms we do not rely on fast modular composition or fast matrix multiplication . this should make our algorithm easy to implement in practice .",
    "+   + the question of whether polynomial factorization is in deterministic polynomial time is a central outstanding open problem .",
    "berlekamp @xcite reduced polynomial factorization to finding roots of a polynomial in a prime order finite field and through this reduction proposed a deterministic algorithm .",
    "shoup was the first to prove rigorous unconditional run time bounds for berlekamp s deterministic algorithm and its variants @xcite .",
    "the most difficult and hence interesting setting for these deterministic algorithms is when the underlying field @xmath0 is of large prime order .",
    "that is @xmath19 is a large prime . in this case",
    ", shoup s bound establishes the best known unconditional deterministic run time bound of @xmath20 suppressing the dependence on the degree of the polynomial factored . assuming the generalized riemann hypothesis , quasi polynomial time algorithms ( c.f.@xcite ) and in certain special cases , polynomial time algorithms ( c.f .",
    "@xcite ) are known .",
    "+   + our second algorithm is an unconditional deterministic algorithm for polynomial factorization using drinfeld modules with complex multiplication . instead of picking drinfeld modules with complex multiplication at random",
    ", we fix a natural ordering .",
    "the rest of the algorithm is nearly identical to the earlier randomized version .",
    "remarkably , we were able to translate shoup s proof to apply to our algorithm .",
    "we prove a worst case running time of @xmath20 , again suppressing the dependence on the degree of the polynomial factored .",
    "+   + curiously , our deterministic algorithm applies directly to the equal degree factorization problem : that is to factor a given a monic square free polynomial all of whose irreducible factors are of the same degree .",
    "prior deterministic algorithms relied on reductions to the root finding problem , either through linear algebra or other means .",
    "+   + the paper is organized as follows . in",
    "  [ drinfeld_section ] , drinfeld modules are introduced and the general algorithmic strategy is outlined with emphasis on the role played by hasse invariants and deligne s congruence . in",
    "  [ randomized_section ] , the efficient construction of drinfeld modules with complex multiplication is presented followed by the description of our first algorithm .",
    "the randomized algorithm is then rigorously analyzed using function field arithmetic . in ",
    "[ deterministic_section ] , we present and analyze the deterministic version .",
    "let @xmath21 $ ] denote the polynomial ring in the indeterminate @xmath22 and let @xmath23 be a field with a non zero ring homomorphism @xmath24 .",
    "necessarily , @xmath23 contains @xmath0 as a subfield .",
    "fix an algebraic closure @xmath25 of @xmath23 and let @xmath26 denote the @xmath27 power frobenius endomorphism . the ring of endomorphisms of the additive group scheme @xmath28 over @xmath23 can be identified with the skew polynomial ring @xmath29 where @xmath30 satisfies the commutation rule @xmath31 .",
    "a rank-2 drinfeld module over @xmath23 is ( the @xmath32-module structure on @xmath28 given by ) a ring homomorphism @xmath33 @xmath34 for some @xmath35 and @xmath36 . for @xmath37 ,",
    "let @xmath38 denote the image of @xmath39 under @xmath3 .",
    "we will concern ourselves primarily with rank @xmath1 drinfeld modules and unless otherwise noted , a drinfeld module will mean a rank @xmath1 drinfeld module . +   + henceforth , we restrict our attention to drinfeld modules @xmath40 over @xmath15 ( with @xmath41 being the inclusion ( identity ) , @xmath42 and @xmath43 ) and their reductions",
    ". +   + for a prime ideal @xmath44 , if @xmath45 is non zero modulo @xmath17 , then the reduction @xmath46 of @xmath3 at @xmath17 is defined through the ring homomorphism @xmath47 @xmath48 and the image of @xmath37 under @xmath49 is denoted by @xmath50 . even if @xmath51 is zero modulo @xmath17 , one",
    "can still obtain the reduction @xmath52 of @xmath3 at @xmath17 through minimal models of @xmath3 ( c.f .",
    "we refrain from addressing this case since our algorithms do not require it .",
    "+   + for @xmath53 , denote by @xmath54 the ideal generated by @xmath4 and by @xmath55 the degree of @xmath4 . for a non zero ideal @xmath56 ,",
    "let @xmath57 denote the degree of its monic generator .",
    "for @xmath58 , by @xmath59 we mean the monic generator of the ideal generated by @xmath4 and @xmath60 . abusing notation , by @xmath61 for some @xmath62 we really mean the gcd of @xmath4 and a lift of @xmath63 to @xmath32",
    "let @xmath44 be a prime not dividing @xmath45 .",
    "let @xmath64 be the monic generator of @xmath17 .",
    "the hasse invariant @xmath65 of @xmath3 at @xmath17 is the coefficient of @xmath66 in the expansion @xmath67 the drinfeld module @xmath3 has supersingular reduction at @xmath17 if and only if @xmath17 divides @xmath68 @xcite .",
    "if the choice of @xmath3 is clear from context , we will call @xmath17 supersingular . +   + recursively define a sequence @xmath69 as @xmath70 , @xmath71 and for @xmath72 , @xmath73 gekeler ( c.f.@xcite[eq 3.6 , prop 3.7 ] ) showed that @xmath74 is the value of the normalized eisenstein series of weight @xmath75 on @xmath3 and established deligne s congruence for drinfeld modules , which ascertains for any @xmath17 of degree @xmath76 with @xmath77 that @xmath78 hence @xmath79 is in a sense a lift to @xmath32 of all the hasse invariants of @xmath3 at primes of degree @xmath80 . +   + in particular , if @xmath3 has supersingular reduction at a @xmath17 of degree @xmath80 , then @xmath81 . by deligne",
    "s congruence , @xmath82 . from the recurrence [ eisenstein_recurrence ]",
    ", it follows that @xmath83 since @xmath17 divides @xmath84 . plugging @xmath85 into the recurrence [ eisenstein_recurrence ] yields @xmath86 likewise , if @xmath3 does not have supersingular reduction at a @xmath17 of degree @xmath80 , then by @xcite[lem 2.3 ] @xmath87",
    "this suggests that we could use a drineld module @xmath3 in a polynomial factorization algorithm to separate supersingular primes from those that are not . for most drinfeld modules ,",
    "the density of supersingular primes is too small for this to work .",
    "however , for a special class , drinfeld modules with complex multiplication , the density of supersingular primes is @xmath88 .",
    "a drinfeld module @xmath3 is said to have complex multiplication by an imaginary quadratic extension @xmath89 if @xmath90 . by imaginary ,",
    "we mean the prime @xmath91 at infinity in @xmath15 does not split in @xmath92 . for a @xmath3 with complex multiplication by @xmath89 , a prime @xmath17 that is unramified in @xmath89",
    "is supersingular if and only if @xmath17 is inert in @xmath89 .",
    "+   + this suggests the following strategy to factor a monic square free polynomial @xmath53 .",
    "say @xmath4 factors into monic irreducibles as @xmath93 .",
    "pick a drinfeld module @xmath3 with complex multiplication by some imaginary quadratic extension @xmath89 .",
    "compute @xmath94 for some @xmath95 . by equations [ supersingular_zero ] and [ supersingular_nonzero ] ,",
    "@xmath96 is a factor of @xmath97 . since for every degree",
    ", roughly half the primes of that degree are inert in @xmath89 , the factorization thus obtained is likely to be non trivial .",
    "our strategy is to pick an @xmath98 at random and construct a drinfeld module @xmath3 with complex multiplication by the imaginary quadratic extension @xmath99 of discriminant @xmath100 . from @xcite , the drinfeld module @xmath101 with @xmath102",
    "has complex multiplication by @xmath99 . +   + however , @xmath101 has the disadvantage of not being defined over @xmath32 since @xmath103 .",
    "+   + we construct an alternate @xmath3 , that is isomorphic to @xmath101 but defined over @xmath32 .",
    "the @xmath104-invariant @xcite of @xmath101 is @xmath105 with the knowledge that two drinfeld modules with the same @xmath104-invariant are isomorphic , we construct the drinfeld module @xmath3 satisfying @xmath106 thereby ensuring @xmath107 further , this assures that @xmath3 is defined over @xmath32 since    @xmath108 in summary , @xmath3 has complex multiplication by @xmath99 ) and is defined over @xmath32 .",
    "we now state an iterative randomized algorithm to factor polynomials over finite fields using drinfeld modules with complex multiplication .",
    "curiously , it can be stated and implemented with no reference to drinfeld modules .",
    "monic square free @xmath53 , positive integer @xmath109monic irreducible factors of @xmath4 of degree at most @xmath110 .",
    "perform root finding and output ( and remove ) all linear factors of @xmath4 .",
    "pick @xmath98 uniformly at random and set @xmath100 . @xmath111 .",
    "initialize : @xmath113 . using multipoint evaluation , for @xmath114 compute @xmath115 set @xmath116 and @xmath117 . for @xmath118 to @xmath110 compute @xmath119 if @xmath120 has degree @xmath80 , mark it as an output . else ,",
    "@xmath121 and @xmath122 .",
    "if @xmath123 has degree @xmath80 , mark it as an output .",
    "else , @xmath124 and @xmath125 .",
    "recursively call @xmath126 and @xmath127 to factor @xmath128 and @xmath129 .",
    "the assumption @xmath130 in algorithm [ factoring_algorithm ] can be made without loss of generality . for if @xmath131 , we might choose to factor over a slightly larger field @xmath132 where @xmath133 is the smallest power of @xmath7 such that @xmath134 and still recover the factorization over @xmath0 ( c.f .",
    "* remark 3.2 ) ) .",
    "further , the running times are only affected by logarithmic factors . +   + in step @xmath16 , all the linear factors of @xmath4 are found and removed using a root finding algorithm .",
    "+   + in step @xmath1 , we choose @xmath98 at random and construct a drinfeld module @xmath3 with complex multiplication by @xmath135 .",
    "the primes that divide @xmath136 are precisely @xmath137 .",
    "we might run into issues of bad reduction if the polynomial @xmath4 to be factored had roots .",
    "it is to prevent this , we performed root finding in step @xmath16 .",
    "+   + in step @xmath138 , from the recurrence [ eisenstein_recurrence ] , it follows that the @xmath139 computed coincides with the degree @xmath80 hasse invariant lift @xmath79 .",
    "hence at iteration @xmath80 in step @xmath138 , by deligne s congruence [ deligne_congruence ] , a degree @xmath80 monic irreducible factor @xmath140 of @xmath4 divides @xmath139 if and only if @xmath141 is supersingular with respect to @xmath3 .",
    "in particular , @xmath142 is the product of all degree @xmath80 irreducible factors of @xmath4 that are supersingular with respect to @xmath3 .",
    "if there is only one such factor , we output it .",
    "else , the product is multiplied to @xmath128 to be split recursively later . likewise , at iteration @xmath80 in step @xmath138 , @xmath123 is the product of all degree @xmath80 irreducible factors of @xmath4 that are ordinary with respect to @xmath3 .",
    "if there is only one such factor , we output it .",
    "else , the product is multiplied to @xmath129 to be split recursively later .",
    "+   + the following lemma [ splitting_lemma ] states that any two distinct factors of @xmath4 of the same degree are neither both supersingular nor both ordinary with probability @xmath88 .",
    "this ensures that the splitting into supersingular and ordinary factors in step @xmath138 is random enough that the recursion depth of our algorithm is logarithmic in @xmath110 .",
    "the run time of our algorithm is dominated by the iteration in step @xmath138 and the multipoint evaluation ( c.f @xcite ) in step @xmath143 , both taking @xmath144 time .",
    "[ splitting_lemma ] let @xmath145 be two distinct monic irreducible polynomials of degree @xmath80 where @xmath146 .",
    "let @xmath3 be a drinfeld module with complex multiplication by the imaginary quadratic extension @xmath135 where @xmath98 is chosen at random . with probability close to @xmath88 ,",
    "exactly one of @xmath147 or @xmath148 is supersingular with respect to @xmath3 .    since @xmath149 neither @xmath147 nor @xmath148 ramify in @xmath135 .",
    "hence , the probability that exactly one of @xmath147 or @xmath148 is supersingular with respect to @xmath3 is precisely the probability that exactly one of @xmath150 splits in @xmath151 .",
    "+   + for @xmath152 , let @xmath153 be the hyperelliptic extension of @xmath154 obtained by adjoining a root @xmath155 of @xmath156 . by quadratic reciprocity over function fields @xcite ,",
    "since @xmath157 and @xmath158 have the same degree , exactly one of @xmath159 splits in @xmath135 if and only if @xmath160 is split in exactly one of @xmath161 .",
    "that is , @xmath162 is neither completely split nor completely inert in the composite @xmath163 . since @xmath157 and @xmath158 are distinct , @xmath164 and @xmath165 are linearly disjoint over @xmath15 .",
    "further , @xmath163 is galois over @xmath154 with @xmath166 for @xmath162 to be neither totally split nor totally inert , the artin symbol @xmath167 has to be either @xmath168 or @xmath169 under the isomorphism @xmath170 . applying chebotarev s density theorem ,",
    "the number @xmath171 of degree one primes @xmath172 that are neither totally inert nor totally split in @xmath163 is bounded by @xmath173 where @xmath174 is the genus of @xmath163 . by the riemann - hurwitz genus formula , @xmath175 .",
    "hence when @xmath98 is chosen at random , @xmath162 is neither totally inert nor totally split in @xmath163 with probability close to @xmath88 .    in summary",
    ", we have thus proven    algorithm [ factoring_algorithm ] factors degree @xmath9 polynomials over @xmath0 in expected time @xmath144 .",
    "in this section , we devise a deterministic algorithm for the equal degree factorization problem using drinfeld modules with complex multiplication . throughout this section , we assume that @xmath7 is a prime , the case most interesting to devise deterministic algorithms for .",
    "+   + as in algorithm [ factoring_algorithm ] , we run in to difficulties of bad reduction if the polynomial to be factored has roots . hence , as a preprocessing step",
    ", we extract and remove all the roots using a deterministic root finding algorithm @xcite . our run time dependence on @xmath7 is @xmath176 , matching the best known existing algorithm of shoup @xcite . our main result ( theorem [ deterministic_theorem ] ) in this section",
    "may thus be viewed as an alternative to theorem 1 of shoup @xcite , particularly when the polynomial to be factored has at most one root . +   + the proof techniques in this section were inspired by the proof of lemma 3.2 in shoup s deterministic algorithm @xcite .",
    "the likeness of our proof of lemma [ deterministic_lemma ] to lemma 5.2 in @xcite is noteworthy .        *",
    "input : * the input to our algorithm is a monic square free polynomial @xmath177 of degree @xmath9 all of whose monic irreducible factors are of degree @xmath178 . +   + * output : * monic irreducible factors of @xmath4 . +   + if @xmath4 is irreducible , output @xmath4 .",
    "else , iterate over @xmath98 in order @xmath179 . for each choice @xmath39 , construct a drinfeld module @xmath3 with complex multiplication by @xmath135 as in   [ drinfeld_construction_subsection ] . compute the degree @xmath80 hasse invariant lift @xmath79 using the recurrence [ eisenstein_recurrence ] as in algorithm [ factoring_algorithm ] . if @xmath180 is non trivial , split @xmath4 and recursively apply our algorithm to the resulting factors .",
    "each iteration in algorithm [ deterministic_algorithm ] takes @xmath144 time from an analysis identical to algorithm [ factoring_algorithm ] . to bound the total running time",
    ", it suffices to bound the number of choices of @xmath39 attempted before a splitting occurs . for a splitting to never occur for @xmath181 ,",
    "there must exist two distinct monic irreducible factors @xmath157 and @xmath158 of @xmath4 such that for each @xmath181 , both @xmath147 and @xmath148 are both always either split or inert in @xmath182 . for @xmath183 , @xmath184 splits in @xmath151 if and only if @xmath185 is a square .",
    "hence , if @xmath186 denotes the quadratic character on @xmath0 , for a splitting to never occur for @xmath181 , there must exist two distinct monic irreducible factors @xmath157 and @xmath158 of @xmath4 such that @xmath187 the following lemma [ deterministic_lemma ] proves that @xmath188 is at worst @xmath189 .",
    "knowing lemma [ deterministic_lemma ] , we can claim the following theorem since the total number of splittings required is at most @xmath190 .",
    "[ deterministic_lemma ] let @xmath7 be an odd prime and @xmath186 the quadratic character on @xmath0 .",
    "let @xmath192 $ ] be two monic irreducible polynomials of the same degree @xmath193 . if @xmath194 for some @xmath195 , then @xmath196    let @xmath192 $ ] be two monic irreducible polynomials of degree @xmath193 with @xmath197 for some @xmath198 and some positive integer @xmath188 .",
    "+   + let @xmath110 be a positive integer less than @xmath188 .",
    "let @xmath199 denote the affine @xmath0 variety in the @xmath200 variables @xmath201 defined by the system @xmath202 let @xmath203 be the set of @xmath0 rational points of @xmath199 and @xmath204 .",
    "+   + by equation [ quadratic_char_assumption ] , there is a point in @xmath203 with @xmath205 .",
    "in fact there are @xmath206 points in @xmath203 with @xmath205 .",
    "to see this , if @xmath207 is in @xmath203 , then so is @xmath208 .",
    "further , for all @xmath209 , @xmath210 , for otherwise @xmath157 or @xmath158 would have roots , contradicting their irreducibility .",
    "+   + more generally , by equation [ quadratic_char_assumption ] , for every @xmath211 , there are @xmath206 points in @xmath203 with @xmath212 .",
    "thereby , we have the bound @xmath213 our eventual objective is to bound @xmath188 . to this end",
    ", we next bound @xmath214 .",
    "+   + for a @xmath215 , the number of points in @xmath203 with @xmath216 is @xmath217 hence @xmath218 @xmath219 @xmath220 for @xmath221 , let @xmath222 denote @xmath223 and define @xmath224.\\ ] ] for @xmath225 , @xmath226 . for @xmath227 , since @xmath228 is not a square and has degree at most @xmath229 , by the weil bound @xcite , @xmath230 which when substituted in equation [ equation_bound_nm ] yields @xmath231 @xmath232 substituting this bound for @xmath214 in equation [ n_equation ] , we get @xmath233 we get to choose @xmath110 to optimize the bound on @xmath188 . setting @xmath234 , since @xmath193 and @xmath235 , @xmath236        p. camion , a deterministic algorithm for factorizing polynomials of fq[x ] , combinatorial mathematics , proceedings of the international colloquium on graph theory and combinatorics , volume 75 , 1983 , pages 149157 .",
    "d. r. dorman , on singular moduli for rank 2 drinfeld modules , compositio mathematica ( 1991 ) volume : 80 , issue : 3 , page 235 - 256 .",
    "s. evdokimov .",
    "factorization of polynomials over finite fields in subexponential time under grh , algorithmic number theory ( ants - i ) , 877 , springer  verlag , berlin ( 1994 ) , pp .",
    "209219      e - u gekeler , frobenius distributions of drinfeld modules over finite fields , trans .",
    "( 2008 ) , 1695 - 1721 .",
    "e - u gekeler , on finite drinfeld modules , journal of algebra , volume 141 , issue 1 , 1 august 1991 , pages 187 - 203 .",
    "a. panchishkin and i. potemine , an algorithm for the factorization of polynomials using elliptic modules , in proceedings of the conference constructive methods and algorithms in number theory , p. 117",
    ". mathematical institute of an bssr , minsk , 1989 ( russian ) ."
  ],
  "abstract_text": [
    "<S> we present novel algorithms to factor polynomials over a finite field @xmath0 of odd characteristic using rank @xmath1 drinfeld modules with complex multiplication . the main idea is to compute a lift of the hasse invariant ( modulo the polynomial @xmath2 $ ] to be factored ) with respect to a drinfeld module @xmath3 with complex multiplication . </S>",
    "<S> factors of @xmath4 supported on prime ideals with supersingular reduction at @xmath3 have vanishing hasse invariant and can be separated from the rest . a drinfeld module analogue of deligne s congruence plays a key role in computing the hasse invariant lift </S>",
    "<S> . +   + we present two algorithms based on this idea . </S>",
    "<S> the first algorithm chooses drinfeld modules with complex multiplication at random and has a quadratic expected run time . </S>",
    "<S> the second is a deterministic algorithm with @xmath5 run time dependence on the characteristic @xmath6 of @xmath0 . </S>"
  ]
}