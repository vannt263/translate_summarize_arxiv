{
  "article_text": [
    "a set - sharing analyser will usually also track freeness and linearity .",
    "this is because freeness and linearity are cheap to maintain and result in more accurate , that is smaller , sharing abstractions which in turn improve the efficiency of the sharing component of abstract unification .",
    "however , current abstract unification algorithms for sharing , freeness and linearity are suboptimal .",
    "this paper considers how to improve the precision of sharing with freeness and linearity by considering the interaction of these components .",
    "these refinements do not incur a significant computational overhead . to this end",
    "three optimisations are given , along with examples of where precision is gained .",
    "their cost is discussed and correctness proved .",
    "the first optimisation follows from the observation that the algorithms for pair - sharing with linearity can sometimes out perform set - sharing with linearity ( in terms of which pairs of variables may share ) .",
    "this is because of an independence check which pervades the set - sharing literature ( from early work @xcite to the most recent and comprehensive @xcite ) .",
    "this check is in fact redundant . by removing this ,",
    "the precision of abstract unification is improved , since linearity can be exploited more frequently .",
    "fil @xcite observed that freeness can be used to decompose a sharing abstraction into a set of sharing abstractions .",
    "for each component of the decomposition , the sharing groups of that component do not ( definitely ) arise from different computational paths .",
    "abstract unification can then be applied to each component and the resulting abstractions merged .",
    "this tactic has not been included in analysers owing to its prohibitive cost .",
    "the second optimisation is a lightweight refinement of abstract unification inspired by the decomposition .",
    "though not as precise as the full decomposition , it does achieve the necessary balance between cost and benefit .",
    "thirdly , an optimisation for pruning sharing groups is presented .",
    "this tactic demonstrates that sharing in combination with freeness can improve groundness which , in turn , can improve sharing ( even in the presence of rational trees ) . put another way , it means that any optimal algorithm for sharing , freeness and linearity will have to consider subtle interactions between sharing , freeness and groundness .",
    "one principle of set - sharing is that the number of sharing groups should be minimised .",
    "as well as increasing precision , this can improve efficiency and possibly avoid widening .",
    "a fourth technique is proposed which can prune the size of inputs to the abstract unification algorithm by considering the grounding behaviour of sets of equations .",
    "reducing the size of the inputs ( and intermediate abstractions ) simplifies abstract unification and can thereby improve performance .",
    "whilst the technique will not theoretically improve the precision of the overall result , in practice , a precision gain might be achieved if widening is avoided within the unification algorithm .",
    "correctness is expressed in terms of a novel concretisation map which characterises equations as their idempotent most general unifiers .",
    "this simplifies the correctness arguments and in particular enables the abstract unification algorithms to be proved correct for rational tree constraint solving ( as adopted by sicstus prolog and prolog - iii ) . to the best of the authors knowledge ,",
    "this is the first proof of correctness for a sharing , freeness and linearity analysis in the presence of rational trees .",
    "( previous work for rational tree unification has either focused on pair - sharing @xcite or set - sharing without freeness and linearity @xcite ) .    in summary",
    ", this paper provides the implementor with a number of low - cost techniques for improving the precision and efficiency of sharing analyses .",
    "let @xmath0 denote the empty sequence , @xmath1 denote sequence concatenation , and @xmath2 denote the length of a sequence @xmath3 . a tree ( or term ) over an alphabet of symbols @xmath4 is a partial map @xmath5 such that @xmath6 if @xmath7 , otherwise @xmath8 where @xmath9 and @xmath10 .",
    "let @xmath11 and @xmath12 denote the set of finite and possibly infinite trees over @xmath4 .",
    "let @xmath13 denote a ( denumerable ) universe of variables such that @xmath14 , and let @xmath15 = @xmath16 where @xmath17 .",
    "finally , @xmath18 denotes the cardinality of the set @xmath19 .",
    "a substitution is a ( total ) map @xmath20 such that @xmath21 = is finite .",
    "a substitution @xmath22 can be represented as a finite set @xmath23 .",
    "let @xmath24 = @xmath25 and let @xmath26 denote the set of substitutions . if @xmath27 then @xmath28 denotes the tree obtained by simultaneously replacing each occurrence of @xmath29 in @xmath30 with @xmath31 . for brevity ,",
    "let @xmath32 = @xmath33 where @xmath34 = @xmath30 .",
    "an equation @xmath35 is a pair @xmath36 where @xmath37 .",
    "a finite set of equations is denoted @xmath38 and @xmath39 denotes the set of finite sets of equations .",
    "also define @xmath40 = @xmath41 .",
    "the map @xmath42 is defined @xmath43 = @xmath44 . where @xmath45 , projection out and projection onto are respectively defined @xmath46 = @xmath47 and @xmath48 = @xmath49 .",
    "composition @xmath50 of two substitutions is defined so that @xmath51 for all @xmath52 .",
    "composition induces the ( more general than ) relation @xmath53 defined by @xmath54 iff there exists @xmath55 such that @xmath56 .",
    "a renaming is a substitution @xmath57 that has an inverse , that is , there exists @xmath58 such that @xmath59 .",
    "the set of renamings is denoted @xmath60 .",
    "a substitution @xmath22 is idempotent iff @xmath61 , or equivalently , iff @xmath62 .",
    "a substitution is in rational solved form iff it has no subset @xmath63 , @xmath64 , @xmath65 where @xmath66 .",
    "the subset of @xmath26 in rational solved form is denoted @xmath67 .",
    "the set of unifiers of @xmath38 is defined by : @xmath68 = @xmath69 .",
    "the set of most general unifiers ( mgus ) and the set of idempotent mgus ( imgus ) are defined : @xmath70 and @xmath71 .",
    "note that @xmath72 iff @xmath73 @xcite .",
    "an mgu can be renamed to obtain any other ( as can an imgu ) .    [ lemma - lassez ] let @xmath74 .",
    "then @xmath75 iff there exists @xmath76 such that @xmath77 .",
    "one way to obtain an imgu is by considering limits of substitutions .",
    "[ defn - limits ] let @xmath78 .",
    "then @xmath79 iff for all @xmath80 there exists @xmath81 such that for all @xmath82 and @xmath83 , @xmath84 .",
    "furthermore , if @xmath85 then @xmath86 .    note that @xmath87 exists iff @xmath88 @xcite .",
    "henceforth @xmath89 abbreviates @xmath87 . if @xmath88 then @xmath89 is idempotent whereas if @xmath22 is idempotent then @xmath90 .",
    "the following lemmas detail how limits of substitutions and composition of substitutions relate to an mgu .",
    "[ lemma - subs ]    1 .",
    "[ case - one ] @xmath91 if @xmath88 .",
    "[ case - two ] @xmath92 if @xmath93 .",
    "[ case - three ] @xmath94 if @xmath95 .",
    "variable multiplicity is defined in order to formalise linearity .",
    "the significance of linearity is that unification of linear terms enables sharing to be described by more precise sharing abstractions ( even in the presence of rational trees ) .",
    "the variable multiplicity map @xmath96 is defined : @xmath97 where @xmath98 .    if @xmath99 , @xmath30 is ground ; if @xmath100 , @xmath30 is linear ; and if @xmath101 , @xmath30 is non - linear .",
    "the next lemma details the forms of sharing barred by the unification of linear terms .",
    "[ lemma - original - linearity ] if @xmath102 , @xmath103 and @xmath104 then either : @xmath105 and @xmath106 ; or @xmath107 and @xmath108 ; or @xmath109 and @xmath110 ; or @xmath111 and @xmath112 .",
    "the correctness arguments for abstract unification require lemma  [ lemma - original - linearity ] to be augmented with a new result ",
    "lemma  [ lemma - new - linearity ] .",
    "the proof of this lemma is analogous to that of lemma  [ lemma - original - linearity ] detailed in @xcite .",
    "[ lemma - new - linearity ] if @xmath102 and @xmath113 then either : @xmath114 ; or @xmath115 and @xmath116 ; or @xmath105 and @xmath101 .      the abstract domains of interest in this paper are represented either as boolean functions , or as sets or as sets of sets .",
    "let @xmath117 denote a finite subset of @xmath13 .",
    "the set of propositional formulae over @xmath117 is denoted by @xmath118 and @xmath119 abbreviates the formula @xmath120 .",
    "the ( bijective ) map @xmath121 is defined by @xmath122 where @xmath123 .",
    "the groundness , sharing , freeness and linearity domains over @xmath117 are defined as follows :    @xmath124 = @xmath125 , @xmath126 = @xmath127 , @xmath128 = @xmath129 and @xmath130 = @xmath129 .    if @xmath131 , then each @xmath132 is referred to as a sharing group .",
    "these domains are connected to the concrete domain of sets of equations by galois connections induced by the concretisation maps .",
    "this approach leads to succinct statements of correctness .",
    "to obtain well defined concretisations , maps abstracting substitutions are introduced .",
    "it is then observed that the abstractions for equivalent idempotent substitutions are the same .",
    "the abstraction maps @xmath133 and @xmath134 are defined : @xmath135 = @xmath136 , @xmath137 = @xmath138 and @xmath139 .",
    "let @xmath140 .",
    "then @xmath141 , @xmath142 , @xmath143 iff @xmath144 and @xmath145 iff @xmath146 .    by lemma  [ lemma - lassez ]",
    "there exists @xmath76 such that @xmath147 where @xmath148 .    1 .",
    "let @xmath149 .",
    "observe that @xmath150 and @xmath151 iff @xmath152 , thus @xmath153 .",
    "hence @xmath154 .",
    "the other direction is similar .",
    "2 .   observe that @xmath155 , @xmath156 and @xmath157 = @xmath158 for all @xmath159 .",
    "hence @xmath160 .",
    "3 .   and 4 . immediate .    instead of defining concretisation in terms of a particular imgu ( the limit of a rational solved form @xcite ) , an arbitrary imgu is used .",
    "this new approach simplifies correctness proofs .",
    "[ defn - concrete ] the concretisation maps , , and are respectively defined by : @xmath161    each free variable is linear so that @xmath162 = @xmath163 . this paper is concerned with combined domains and the following combined concretisation maps will be useful : @xmath164 and @xmath165 = @xmath166 .",
    "a connection is established in @xcite which sheds light on the relationship between sharing and boolean functions .",
    "the corollary ( also observed in the long version of @xcite ) explains how this can be used to improve precision of combined domains .",
    "[ lemma - codish ] @xmath167 where @xmath22 is idempotent .",
    "[ cor - trim ] @xmath168 where @xmath169 .",
    "finally , the following auxiliary operations will be used throughout the paper .",
    "let @xmath170 .",
    "the relevance map is defined @xmath171 ; closure is defined @xmath172 ; and pair - wise union is defined @xmath173 .",
    "observe that if @xmath174 then @xmath175 for all @xmath74 and @xmath176 .",
    "thus the independence check @xmath174 can verify that two terms @xmath177 and @xmath30 do not share under @xmath22 ( or equivalently @xmath38 ) .",
    "the following example demonstrates that pair - sharing can sometimes detect independence when standard set - sharing unification algorithms can not .",
    "[ exam - independence ] let @xmath178 and consider @xmath179 where @xmath180 , @xmath181 , @xmath182 , @xmath183 , @xmath184 , @xmath185 and @xmath186 .",
    "let @xmath187 .",
    "the set - sharing unification algorithms of @xcite give the following abstraction @xmath188 for @xmath189 where @xmath190 and @xmath191 .",
    "observe that @xmath192 and @xmath193 and therefore @xmath194 does not assert the independence of @xmath195 and @xmath196 ( similarly @xmath197 and @xmath198 ) .",
    "however , if @xmath19 is interpreted as a set of pairs , then the pair - sharing abstract unification algorithms of @xcite both give the abstraction @xmath199 which states the independence of @xmath195 and @xmath196 ( and similarly @xmath197 and @xmath198 ) .",
    "note that this different does not stem from a difference in the set - sharing and pair - sharing _",
    "domains _ , but derives from the way in which linearity is exploited in the abstract unification _",
    "the crucial difference between pair - sharing and set - sharing algorithms is that the former does not require the terms in the equation to be independent to exploit linearity . put another way , to apply linearity the latter requires that @xmath174 when solving the equation @xmath200 in the context of the sharing abstraction @xmath19 .",
    "lemmas  [ lemma - original - linearity ] and [ lemma - new - linearity ] detail the forms of sharing that can arise in @xmath201 rational ( and finite ) tree unification where @xmath202 and @xmath203 are arbitrary terms . observe that @xmath202 and @xmath203 are not required to be independent .",
    "abstract unification algorithms with the independence check are safe .",
    "however , this check is not fundamental to combining sharing with linearity . by observing how to exploit linearity more fully",
    ", a more precise abstract unification algorithm can be obtained .",
    "this algorithm also explains why algorithms with the independence check are safe .",
    "the following abstract operator is used to approximate the multiplicity map in abstract unification .",
    "lemma  [ lemma - chi ] asserts its correctness .",
    "@xmath204    [ lemma - chi ] if @xmath205 and @xmath74 then @xmath206 .",
    "suppose @xmath207 .",
    "one of the following holds :    * there exists @xmath115 such that @xmath208 and @xmath209 .",
    "then so that @xmath210 .",
    "* there exists @xmath115 such that @xmath113",
    ". then @xmath211 and @xmath212 so that @xmath210 . *",
    "there exist @xmath107 such that @xmath103 and @xmath213 .",
    "then there exists @xmath132 such that @xmath214 so that @xmath215 .",
    "the revised abstract unification algorithm ( with the independence check removed ) is detailed in definition  [ defn - amgu ] , and theorem  [ theorem - amgu - correct ] establishes its correctness .",
    "[ defn - amgu ] abstract unification @xmath216 is defined : @xmath217 @xmath218 @xmath219 @xmath220    a precision gain over previous algorithms follows since a closure is avoided if @xmath177 is linear but not @xmath30 ( or vice versa ) and @xmath177 and @xmath30 are not independent .",
    "when both @xmath177 and @xmath30 are linear , but not independent , two closures are required ( as previously ) , but the resulting sharing abstraction may contain fewer elements owing to the pruning effect of intersection . when the independence check is satisfied , that is @xmath221 , it follows that @xmath222 = @xmath223 .",
    "this explains why algorithms with the independence check are safe .",
    "note that if @xmath177 and @xmath30 are both linear , but not independent , an implementor might trade precision for efficiency by computing @xmath224 if @xmath225 and @xmath226 otherwise .",
    "[ theorem - amgu - correct ] let @xmath227 , @xmath228 and @xmath229",
    ". then @xmath230 .    put @xmath231 .",
    "let @xmath74 and @xmath232 .",
    "observe that @xmath233 .",
    "thus let @xmath234 . by part  [ case - two ] of lemma  [ lemma - subs ] ,",
    "@xmath235 . since @xmath236 , @xmath237 .    1 .   to show @xmath238 , let @xmath239 and consider @xmath240 .",
    "suppose @xmath241 .",
    "suppose @xmath242 , that is , @xmath243 .",
    "thus @xmath244 and @xmath245 .",
    "suppose @xmath246 .",
    "then @xmath247 , thus @xmath248 which is a contradiction .",
    "therefore @xmath249 , giving @xmath250 and @xmath251 .",
    "1 .   suppose @xmath252 and @xmath253 .",
    "hence @xmath254 and , so that @xmath255 = @xmath256 . but @xmath257 and similarly @xmath258 , so that @xmath259 .",
    "2 .   suppose @xmath260 and @xmath253 .",
    "since @xmath251 , it follows that @xmath261 .",
    "suppose @xmath262 , then @xmath263 , hence @xmath264 which is a contradiction .",
    "therefore @xmath248 , thus @xmath265 which is a contradiction .",
    "3 .   suppose @xmath252 and @xmath265 .",
    "analogous to the previous case .",
    "4 .   suppose @xmath260 and @xmath265 .",
    "since @xmath266 = @xmath197 and @xmath241 , @xmath267 .",
    "thus @xmath268 and @xmath269 .",
    "since @xmath270 , it follows that @xmath271 , therefore @xmath272 .",
    "thus , @xmath273 . therefore @xmath274 since @xmath275 and @xmath276 since @xmath277 .",
    "thus @xmath259 .",
    "2 .   suppose @xmath278 . since @xmath241 , @xmath279 .",
    "2 .   suppose @xmath280 .",
    "then @xmath254 and @xmath248 so that @xmath281 .",
    "moreover , since @xmath282 it follows that @xmath283 .",
    "3 .   suppose @xmath284 . since @xmath285 , @xmath286 , where @xmath287 and @xmath288 . if @xmath289 , then @xmath290 , hence @xmath291 and @xmath292 .",
    "likewise @xmath292 if @xmath293 .",
    "thus suppose @xmath294 and @xmath295 . since @xmath296 , @xmath297 and since @xmath298 , @xmath299",
    "[ case - freeness ] suppose @xmath300 .",
    "thus @xmath301 , hence @xmath302 .",
    "thus there exists @xmath303 such that @xmath304 and @xmath305 .",
    "this contradicts lemma  [ lemma - original - linearity ] , hence @xmath306 .",
    "thus @xmath307 .",
    "2 .   suppose @xmath308 .",
    "analogous to the previous case .",
    "3 .   suppose @xmath309 . thus @xmath310 .",
    "as with case  [ case - freeness ] , it follows that @xmath306 .",
    "thus @xmath311 .",
    "4 .   suppose @xmath312 .",
    "analogous to the previous case .",
    "otherwise @xmath313 .",
    "2 .   it is straightforward to show @xmath314 for all @xmath315 .",
    "3 .   to show @xmath316 for all @xmath317 .",
    "observe @xmath318 if @xmath319 and @xmath320 if @xmath315 .",
    "hence , let @xmath321 and suppose @xmath322 .",
    "suppose @xmath309 . by lemma  [ lemma - chi ] , @xmath310 .",
    "suppose there exist @xmath323 , @xmath303 such that @xmath324 .",
    "by lemma  [ lemma - original - linearity ] either : 1 .   @xmath325 and @xmath326 , hence @xmath327 , and therefore @xmath328 .",
    "2 .   @xmath329 and @xmath330 , hence @xmath331 , and therefore @xmath328 .",
    "3 .   @xmath332 .",
    "hence @xmath331 , and thus @xmath328 .",
    "2 .   suppose there exists @xmath333 such that @xmath334 . by lemma  [ lemma - new - linearity ] , @xmath335 , thus @xmath336 and therefore @xmath328 .",
    "2 .   suppose @xmath312 .",
    "analogous to the previous case .",
    "3 .   otherwise observe that either : 1 .",
    "there exist @xmath323 , @xmath303 such that @xmath324 .",
    "thus and @xmath337 . hence @xmath328 .",
    "there exists @xmath333 such that @xmath334 . thus and @xmath338 .",
    "hence @xmath328 .",
    "consider again example  [ exam - independence ] .",
    "observe that @xmath339 where @xmath340 = @xmath341 , @xmath342 , @xmath343 , @xmath344 , @xmath345 , @xmath346 , @xmath347 , @xmath348 , @xmath349 , @xmath350 and @xmath351 .",
    "this asserts the independence of @xmath195 and @xmath196 ( similarly @xmath197 and @xmath198 ) , as required .",
    "the following example , adapted from @xcite , illustrates that closure can be required to abstract the unification of linear terms .",
    "[ exam - check ] let @xmath352 and observe @xmath353 where @xmath354 , @xmath355 , @xmath185 and @xmath356 .",
    "let @xmath357 and note that @xmath358 where @xmath359 .",
    "thus @xmath360 where @xmath361 , @xmath362 and @xmath363 .",
    "indeed , if @xmath364 and @xmath365 then @xmath366 = @xmath367 , @xmath368 , @xmath369 , @xmath348 , @xmath370 , @xmath371 , @xmath372 , thus @xmath373 , @xmath374 yields a safe , though conservative , abstraction .",
    "closure is required to construct the @xmath375 sharing group .",
    "fil @xcite observes that different sharing and freeness abstractions can represent the same equations , that is , @xmath376 does not imply that @xmath377 .",
    "therefore the relationship between @xmath378 and the concrete domain is a galois connection rather than an insertion .",
    "an insertion is constructed by using @xmath4 to decompose @xmath19 into a set of sharing abstractions @xmath379 such that each @xmath380 does not include sharing groups that definitely arise from different computational paths . the following definition and lemma from @xcite formalises this decomposition , henceforth referred to as the fil decomposition .",
    "the map @xmath381 is defined by : @xmath382    [ lemma - k ] @xmath383 .    using the above , abstract unification can be refined to @xmath384 .",
    "abstract unification computed in this way does not merge sharing groups arising from different computational paths , and thereby improves precision . calculating @xmath379 is expensive and the number of calls to @xmath385 is @xmath386 ( which is potentially exponential in @xmath18 ) .",
    "however , this tactic suggests lightweight refinements to closure ( @xmath387 ) and pair - wise union ( @xmath388 ) that recover some precision at little cost .",
    "since two distinct sharing groups which contain a common free variable must arise from different computational paths , they can not describe the same equation and therefore need not be combined .",
    "definition  [ defn - amgu2 ] details the refined abstract unification algorithm and theorem  [ cor - amgu2 ] builds on lemma  [ lemma - fiddly ] to establish correctness .",
    "[ defn - amgu2 ] abstract unification @xmath389 is defined : @xmath390 @xmath391 @xmath392 where @xmath194 , @xmath393 , @xmath394 , @xmath395 and @xmath396 are defined as in definition  [ defn - amgu ] .",
    "notice that the use of freeness is completely absorbed into @xmath397 and @xmath398 .",
    "the following lemma demonstrates that @xmath399 and @xmath400 coincide with @xmath388 and @xmath387 for each element of the fil decomposition .",
    "the correctness of abstract unification ( @xmath401 ) follows from this result .",
    "[ lemma - fiddly ]    1 .   if @xmath380 and @xmath402 , then @xmath403 .",
    "2 .   if @xmath380 and @xmath404 , then @xmath405 , @xmath406 , @xmath407 and @xmath408 .    1 .",
    "proof by induction .",
    ". then @xmath410 .",
    "2 .   suppose @xmath411 . by the hypothesis , @xmath412 .",
    "since @xmath402 , then for all @xmath413 , @xmath414 . hence @xmath403 .",
    "2 .   1 .   to show @xmath405 .",
    "let @xmath415 . if @xmath416 then @xmath417 .",
    "hence @xmath418 .",
    "2 .   to show @xmath419 .",
    "let @xmath420 and @xmath421 .",
    "then @xmath422 for some @xmath423 .",
    "put @xmath424 , @xmath425 and @xmath426 .",
    "observe that @xmath427 and @xmath428 .",
    "thus @xmath429 . since @xmath430 it follows that @xmath431 .",
    "3 .   to show @xmath432 .",
    "analogous to the previous case .",
    "4 .   to show @xmath433 .",
    "let @xmath420 and @xmath434 .",
    "then @xmath435 for some @xmath436 .",
    "put @xmath424 , @xmath437 and @xmath438 .",
    "observe that @xmath439 .",
    "1 .   suppose @xmath440 or @xmath441 .",
    "then @xmath442 , hence @xmath443 .",
    "2 .   suppose @xmath444 .",
    "hence @xmath445 , thus @xmath446 .",
    "since @xmath447 it follows that @xmath448 .",
    "[ cor - amgu2 ] let @xmath227 , @xmath228 and @xmath389",
    ". then @xmath230 .",
    "observe @xmath449 and @xmath450 . by lemma  [ lemma - k ]",
    ", there exists @xmath380 such that @xmath451 , hence @xmath452 .",
    "observe that if @xmath300 then @xmath453 ( and likewise for @xmath308 ) and hence by lemma  [ lemma - fiddly ] , @xmath454 . by theorem",
    "[ theorem - amgu - correct ] , @xmath455 = @xmath456 , thus @xmath457 .",
    "the proof explains why the standard freeness tactic is a specialised version of the fil decomposition .",
    "this refinement is only worthwhile if redundant sharing groups are introduced in analysis .",
    "although it can be shown that projection and join do not introduce redundancy , the following example indicates that redundant sharing groups can arise in abstract unification ( @xmath458 ) and that the refined abstract unification ( @xmath401 ) can avoid some of these redundant sharing groups .",
    "[ exam - redundant ] let @xmath459 , @xmath460 , @xmath461 and @xmath462 .",
    "suppose @xmath463 and @xmath464",
    ". then @xmath465 and @xmath466 so that @xmath467 .",
    "however @xmath468 and @xmath469 and in particular @xmath470 so that @xmath471 = @xmath472 .",
    "the following example demonstrates that @xmath401 is not as precise as the full fil decomposition .",
    "let @xmath473 , @xmath474 , @xmath475 and @xmath476 .",
    "suppose @xmath463 and @xmath464",
    ". then @xmath477 and @xmath478 , hence @xmath479 and @xmath480 .",
    "thus @xmath481 = @xmath482 .",
    "it follows that @xmath483 = @xmath484 .",
    "however , the fil decomposition gives @xmath485 where @xmath486 , @xmath487 , @xmath488 and @xmath489 .",
    "moreover , @xmath490 = @xmath491 = @xmath492 .",
    "since @xmath493 and @xmath494 , the fil leads to the sharing abstraction @xmath495 , which is more precise .",
    "pruning sharing groups is advantageous for efficiency and precision . by reducing the size of an abstraction , abstract unification works on smaller objects and is therefore faster , even if no precision is gained . of course",
    ", the benefit of pruning for efficiency needs to outweigh its cost .",
    "surprisingly , combined sharing and freeness information can improve groundness propagation and sharing even for rational tree unification .",
    "for example , the equation can be abstracted by @xmath496 if @xmath497 and @xmath197 are free variables that share .",
    "this is because , in this circumstance , finite tree unification fails for @xmath498 whereas rational tree unification binds @xmath497 and @xmath197 to @xmath499 .",
    "abstract unification can use the freeness of variables in the equation to extract hidden groundness information ( for distinct computational paths ) and thereby prune sharing groups and improve precision .",
    "the proof of theorem  [ cor - amgu3 ] again uses the fil decomposition .",
    "[ defn - amgu3 ] abstract unification @xmath500 is defined : @xmath501 where @xmath502 , @xmath503 , @xmath393 , @xmath394 , @xmath504 , @xmath395 and @xmath396 are defined as in definition  [ defn - amgu2 ] .",
    "[ cor - amgu3 ] let @xmath227 , @xmath228 and @xmath500",
    ". then @xmath230 .",
    "suppose @xmath300 . by lemma  [ lemma - k ]",
    ", there exists @xmath505 such that and by theorem  [ cor - amgu2 ] , @xmath506 where @xmath507 , @xmath508 and @xmath509 .",
    "let @xmath74 . since @xmath300 , @xmath510 for some @xmath511 .",
    "furthermore , @xmath512 for all @xmath513 .",
    "since @xmath300 , @xmath514 where @xmath515 .",
    "observe that @xmath516 for all @xmath517 . since @xmath518 , @xmath519 , hence @xmath520 .",
    "moreover , @xmath521 .",
    "thus @xmath522 .",
    "the result follows by corollary  [ cor - trim ] .",
    "the @xmath308 case is analogous and the otherwise case follows immediately from theorem  [ cor - amgu2 ] .",
    "the following example illustrates the gain of precision .",
    "note that even the fil decomposition can not match this level of precision .",
    "let @xmath459 , @xmath523 , @xmath524 and @xmath525 .",
    "suppose @xmath526 and @xmath527 .",
    "consider the fil decomposition , that is , @xmath528 where @xmath529 , @xmath530 , @xmath531 , @xmath532 . then @xmath533 = @xmath534 where @xmath535 , @xmath536 , @xmath537 . since @xmath538 for all @xmath539 , the decomposition results in the sharing abstraction @xmath194 .",
    "moreover , @xmath540 = @xmath541 . however , @xmath542",
    "= @xmath543 = @xmath544 which is more precise .",
    "[ exam - optimal ] let @xmath459 , @xmath460 , @xmath461 and @xmath545 .",
    "suppose @xmath463 and @xmath464 .",
    "since @xmath546 , @xmath547 = @xmath548 = @xmath549 whereas the fil decomposition produces @xmath550 ( see example  [ exam - redundant ] ) .",
    "example  [ exam - optimal ] shows that @xmath551 is not uniformly more precise than the fil decomposition , hence is sub - optimal .",
    "nevertheless , this pruning tactic suggests that any optimal abstract unification algorithm for sharing , freeness and linearity , in the presence of groundness , will have to consider subtle interactions between the components .",
    "sharing abstractions can always be pruned by removing sharing groups which contain ground variables .",
    "common practice is to schedule the solving of equations so as to first apply abstract unification to equations on ground terms @xcite .",
    "moreover , @xcite details a queueing / dequeueing mechanism for maximally propagating groundness among systems of equations .",
    "this can involve repeated searching .",
    "this section proposes a revision of this tactic that applies groundness to the complete set of equations ( without repeated searching ) and then uses the resulting groundness information to prune sharing before abstract unification is applied .",
    "the gain is that searching and scheduling are no longer required ( the mechanism is single pass ) and that the disjunctive groundness information captured by @xmath552 can be exploited so that abstract unification can potentially operate on smaller abstractions . observe that groundness information will normally be tracked by @xmath552 anyway , thus the computational overhead is negligible . to formulate this strategy ,",
    "abstract unification is lifted to sets of equations as follows :    the map @xmath553 is defined by the least relation @xmath554 such that @xmath555 .",
    "the following theorem states correctness of the early pruning using groundness for @xmath458 , @xmath401 and @xmath551 .",
    "[ theorem - ground - safety ] let @xmath556 , @xmath557 , , , , , @xmath558 and .",
    "then @xmath559 .",
    "let @xmath74 and @xmath232 .",
    "since @xmath560 , @xmath561 and there exists @xmath562 such that @xmath563 .",
    "since @xmath564 , @xmath565 so that @xmath566 .",
    "let @xmath567 . by part  [ case - two ] of lemma  [ lemma - subs ] ,",
    "thus there exists @xmath569 such that @xmath570 .",
    "now @xmath571 for all @xmath572 , hence @xmath573 for all @xmath572 .",
    "put @xmath574 , @xmath575 and @xmath576 .",
    "let @xmath577 .",
    "then there exists @xmath572 such that @xmath578 . but",
    "@xmath573 , hence @xmath579 and @xmath580 . thus @xmath581 and by lemma  [ lemma - subs ] part  [ case - three ] , @xmath582 . furthermore , @xmath583",
    "hence @xmath584 . since @xmath585 is idempotent , .",
    "by lemma  [ lemma - subs ] , part  [ case - two ] , @xmath586 . thus @xmath587 .    to show @xmath588 .",
    "let @xmath52 . if @xmath589 then @xmath590 trivially . if @xmath591 then @xmath592 since @xmath593 .",
    "thus @xmath590 . therefore @xmath594 . by lemma  [ lemma - subs ] ,",
    "part  [ case - two ] , @xmath595 . but",
    "@xmath596 and therefore there exists @xmath569 such that @xmath597 .",
    "thus @xmath598 .",
    "observe that if @xmath599 then @xmath600 hence @xmath601 . since @xmath602",
    ", it follows that @xmath603",
    ". therefore @xmath604 . by corollary",
    "[ cor - trim ] , @xmath588 .    to show @xmath605 for all @xmath315 .",
    "let @xmath606 and @xmath607 . since @xmath607 , @xmath608 or @xmath609 for all @xmath52 and @xmath572 .",
    "since @xmath610 and @xmath611 , @xmath612 for all @xmath572 .",
    "hence @xmath613 , thus @xmath614 , therefore @xmath605 .",
    "thus @xmath615 .    to show @xmath616 for all @xmath617 .",
    "since @xmath593 , @xmath616 for all @xmath618 .",
    "moreover , @xmath601 and therefore @xmath616 for all @xmath619 .",
    "thus @xmath620 .",
    "the result then follows by induction on @xmath38 and theorems  [ theorem - amgu - correct ] , [ cor - amgu2 ] and [ cor - amgu3 ] .",
    "the following example illustrates the computational advantages of early pruning .",
    "let @xmath621 , @xmath622 , @xmath185 , @xmath623 and @xmath624 .",
    "let @xmath625 so that @xmath626 = @xmath627 .",
    "then @xmath628 so that @xmath629 and @xmath630 = @xmath631 .",
    "hence @xmath632 reduces to @xmath633 = @xmath634 . without this tactic ,",
    "no equation of @xmath635 will possess a ground argument and both calls to @xmath551 will involve non - trivial sharing group manipulation .",
    "this paper has given correctness proofs for sharing analysis with freeness and linearity which hold in the presence of rational trees .",
    "the abstract unification algorithms are themselves novel  incorporating optimisations for both precision and efficiency .",
    "specifically , the independence check which can prevent linearity from being exploited has been removed .",
    "in addition , refined closure and pair - wise union operations have been derived from the fil decomposition .",
    "a further precision optimisation has been presented which exploits an interaction between sharing , freeness and groundness , which shows the subtlety that an optimal algorithm will need to address .",
    "these optimisations have been chosen to balance precision against efficiency whilst not changing the underlying representation of the abstract domains .",
    "they are ordered according to their anticipated degree of usefulness .",
    "this work provides the implementor with a suite of new optimisations for abstract unification algorithms for sharing , freeness and linearity ."
  ],
  "abstract_text": [
    "<S> in order to improve precision and efficiency sharing analysis should track both freeness and linearity . the abstract unification algorithms for these combined domains </S>",
    "<S> are suboptimal , hence there is scope for improving precision . </S>",
    "<S> this paper proposes three optimisations for tracing sharing in combination with freeness and linearity . </S>",
    "<S> a novel connection between equations and sharing abstractions is used to establish correctness of these optimisations even in the presence of rational trees . a method for pruning intermediate sharing abstractions to improve efficiency </S>",
    "<S> is also proposed . </S>",
    "<S> the optimisations are lightweight and therefore some , if not all , of these optimisations will be of interest to the implementor .    </S>",
    "<S> keywords : abstract interpretation , sharing analysis , freeness , linearity and rational trees .    </S>",
    "<S> [ section ] [ section ] [ section ] [ section ] [ section ] [ section ] </S>"
  ]
}