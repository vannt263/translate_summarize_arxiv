{
  "article_text": [
    "a stochastic differential equation of the form @xmath0 or its equivalent fokker - planck equation @xmath1p({\\bf x},t ) , \\label{fkp}\\ ] ] is used to describe a variety of physical and chemical processes@xcite . even in the langevin case , where the diffusion matrix @xmath2 is position",
    "independent , it is difficult to derive numerical algorithms for solving it beyond second order@xcite .",
    "a direct taylor expansion@xcite approach is laborious , giving no insight into the overall structure of the algorithm and requires an eight term expansion to achieve 4th order accuracy@xcite .",
    "heretofore , no fourth order langevin algorithm has been derived and applied to systems of more than one particle .",
    "the fokker - planck equation ( [ fkp ] ) can be formally integrated to give @xmath3^np({\\bf x},0 ) .",
    "\\label{evol}\\ ] ] this equation can be solved by factorizing the short time fokker - planck evolution operator @xmath4 into exactly solvable parts . in this work",
    ", we will take @xmath5 and define operators @xmath6 with implied summations .",
    "this idea of operator factorization is not new , and has been used to derive a number of second order langevin algorithms@xcite .",
    "we will briefly review the basic idea in section ii .",
    "however , it is only recently that one learns how to factorize operators of the form @xmath7 to fourth order with positive coefficients@xcite .",
    "all such fourth order factorizations require the evaluation of the double commutator @xmath8 $ ] , which is rather formidable at first sight .",
    "we will show in section iii , how this commutator can be implemented judiciously to yield a fourth order langevin algorithm .",
    "to demonstrate the high order convergence of this algorithm , we use it to simulate the brownian dynamics of 121 yukawa particles in two dimensions , a system that has been studied extensively by branka and heyes@xcite using second order algorithms .    to further demonstrate the utility of the factorization method for solving stochastic equations , we derive systematically a number of fourth order algorithms for solving the kramers equation in section iv .",
    "drozdov and brey@xcite have used a similar factorization method to solve this equation in one dimension using grid points .",
    "hershkovitz@xcite has also derived a fourth order algorithm by taylor expansion . in both cases , it is not obvious how their respective approaches can be generalized to the multivariable case .",
    "we give a detail comparison of all algorithms using monte carlo simulation , which can be easily generalized to any dimension .",
    "finally , we summarize our findings and present some conclusions in section v.",
    "when the operator @xmath9 acts on @xmath10 , it evolves the latter forward in time according to the _ diffusion _ equation @xmath11 if @xmath12 is a set of points distributed according to @xmath10 , then the distribution @xmath13 time later can be exactly simulated by updating each point according to @xmath14 where @xmath15 is a set of gaussian distributed random numbers with zero mean and unit variance . when the operator @xmath16 acts on @xmath10 , it evolves the latter forward in time according to the _ continuity _ equation @xmath17 , \\label{tdterm}\\ ] ] where @xmath18 is the probability current density with velocity field @xmath19",
    ". the continuity equation can also be exactly simulated by setting @xmath20 where @xmath21 is the exact trajectory determined by @xmath22 with initial condition @xmath23 .",
    "thus , if @xmath7 can be factorized into products of operators @xmath9 and @xmath16 , then each such factorization will give rise to an algorithm for evolving the system forward for time @xmath13 .",
    "for example , the second order factorization , @xmath24 , \\label{ta}\\ ] ] leads to a second order langevin algorithm@xcite @xmath25 where @xmath26 and @xmath27 are independent sets of zero mean , unit variance gaussian random numbers . for a second order algorithm , it is sufficient to solve for the trajectory @xmath28 correctly to second order in @xmath13 , _",
    "e.g. _ via a second order runge - kutta algorithm : @xmath29 alternatively , one has the factorization , @xmath30 , \\label{tb}\\ ] ] which yields the second order algorithm @xmath31 again , it is sufficient to solve the trajectory equations @xmath32 and @xmath33 correctly to second order via the runge - kutta algorithm . despite the appearance that this algorithm requires solving the trajectory equation ( [ traject ] ) twice , it can be shown@xcite that by expanding the two trajectories to second order and recollecting terms , one arrives at the second order runge - kutta langevin algorithm@xcite .",
    "however , the canonical form of ( [ altbs ] ) , with two evaluations of the trajectory , usually has a much smaller second order error coefficient .",
    "the method of operator factorization thus appears to provide a systematical way of generating higher order algorithms .",
    "unfortunately , suzuki@xcite proved in 1991 that , beyond second order , for any two operators , @xmath34 and @xmath35 , it is impossible to factorize the evolution operator as @xmath36 = \\prod_{i=1}^n\\exp[a_i\\epsilon t]\\exp[b_i\\epsilon d ]   \\label{facab}\\ ] ] for any finite @xmath37 , without having some coefficients @xmath38 and @xmath39 being negative . in the present context , since @xmath40 is the diffusion kernel , a negative @xmath38 would imply that one must simulate the diffusion process backward in time , which is impossible .",
    "thus factorizations of the form ( [ facab ] ) can not be used to derive higher order langevin algorithms .",
    "the essence of suzuki s proof is to note that in order to obtain a fourth order algorithm , one must eliminate third order error terms involving double commutators @xmath41 $ ] and @xmath8 $ ] . with purely positive coefficients",
    "@xmath38 and @xmath39 , one can eliminate either one or the other , but not both .",
    "thus to obtain a fourth order factorization with all positive coefficients , one must retain one of the two double commutators .",
    "recently , chin@xcite has derived three such factorization schemes , two of which were also found previously by suzuki@xcite .",
    "the form of the operators @xmath34 and @xmath35 , as given in ( [ tandd ] ) , dictates that one should keep only the commutator @xmath8 $ ] , which is at most a second order differential operator . since the velocity ( or force )",
    "field @xmath42 is usually given in terms of a potential function @xmath43 , @xmath44 the double commutator has the form @xmath45 = \\partial_i \\partial_j f_{i , j } + \\partial_i v_{i } , \\label{dcom}\\ ] ] where @xmath46 the indices on @xmath47 indicate corresponding partial derivatives . since the operator @xmath35 requires solving for the particle s trajectory , we must minimize its occurrence .",
    "this dictates that we use a variant of chin s scheme b@xcite to factorize @xmath48 & = & \\exp\\left [ { \\epsilon\\over 2}\\left(1-{1\\over\\sqrt{3}}\\right ) t \\right ] \\exp\\left ( { \\epsilon\\over 2 } d \\right ) \\exp\\left ( { \\epsilon\\over\\sqrt{3}}\\tilde{t } \\right ) \\nonumber \\\\ & \\times & \\exp\\left ( { \\epsilon\\over 2 } d \\right ) \\exp\\left [ { \\epsilon\\over 2 } \\left(1-{1\\over\\sqrt{3}}\\right ) t \\right ] + o(\\epsilon^5 ) , \\label{dmc4p2}\\end{aligned}\\ ] ] where we have included the double commutator in @xmath49 @xmath50 .",
    "\\label{ttid}\\ ] ] to obtain a fourth order algorithm , we must simulate this new term @xmath51 \\label{newt}\\ ] ] correctly to 4th order .",
    "if we simply took all @xmath52 dependent terms in this operator as fixed , evaluated at the starting point , this operator would describe a non - uniform gaussian random walk .",
    "however , this normal ordering would be correct only to third order . to implement it to fourth order , we first decompose it as @xmath53 \\exp\\left ( { \\epsilon\\over 2\\sqrt{3 } } t\\right)+o(\\epsilon^5).\\ ] ] if @xmath54 is positive definite , normal ordering the middle operator above , _",
    "i.e. _ interpreting it as a non - uniform gaussian random walk with @xmath54 evaluated at the starting point , would be correct to 4th order ( actually to 5th order ) .",
    "however , if some eigenvalues of @xmath54 were negative , we would not be able to sample the operator as a gaussian walk . to avoid this possibility",
    ", we implement the normal order process as follows : @xmath55 \\right\\ } \\exp\\left ( { \\epsilon\\over 2\\sqrt{3 } } t\\right ) \\nonumber\\\\ & & =                                                                      { \\cal n } \\left\\ { \\exp\\left [ { \\epsilon\\over 2\\sqrt{3 } }   \\left({1\\over 2 } \\partial_i \\partial_j \\delta_{i , j}\\right )   + { \\epsilon^3\\over 24}\\left(2 - \\sqrt{3}\\right ) \\left(\\partial_i \\partial_j f_{i , j } + \\partial_i v_i \\right ) \\right ] \\right\\ } \\exp\\left ( { \\epsilon\\over 2\\sqrt{3 } } t\\right),\\end{aligned}\\ ] ] where @xmath56 denotes the normal ordering of all derivative operators to the left .",
    "since the left ( and only the left ) operator @xmath57 is already normal ordered with respect to the position - dependent operators in the middle term , the two normal ordered exponentials can be combined to remove the restriction of a positive definite @xmath54 .",
    "now , only the full covariance matrix @xmath58 needs to be positive definite , which will always be the case for @xmath13 sufficiently small .",
    "the final normal ordered exponential describes a non - uniform gaussian random walk with mean @xmath59 and covariance matrix @xmath60 : @xmath61.\\end{aligned}\\ ] ] to sample this random distribution we need @xmath62 , which we can approximate correctly to fourth order as @xmath63.\\ ] ] thus the entire factorization ( [ dmc4p2 ] ) can be simulated by setting @xmath64     \\xi_j^{\\prime\\prime},\\nonumber\\\\ x_i^\\prime & = & z_i(\\epsilon/2 )         + \\xi^{\\prime\\prime\\prime}_i        \\sqrt{{\\epsilon\\over 2 } \\left(1-{1\\over\\sqrt{3}}\\right ) } , \\label{dmc4al } \\end{aligned}\\ ] ] where @xmath26 to @xmath65 are four sets of independent gaussian random numbers with zero mean and unit variance .    as a severe test of the fourth order convergence of this algorithm ,",
    "we use it to simulate the brownian dynamics of 121 colloidal particles in two dimensions , with dimensionless surface density @xmath66 , interacting via a pairwise strongly repulsive yukawa potential @xmath67,\\ ] ] with @xmath68 . this system has been described and simulated extensively via second order algorithms by branka and heyes@xcite",
    ". we will refer readers to this work for a detailed description of the system and their algorithms . in fig .",
    "we show the convergence of the potential energy at one parameter setting as a function of the time step - size used .",
    "( compare this figure to that of fig .",
    "6 of branka and heyes@xcite . )",
    "the linear and quadratic convergences are clearly evident .",
    "the two second order algorithms used are as described by ( [ altas ] ) and ( [ altbs ] ) .",
    "these are referred to in ref.@xcite as algorithms lgv2b and lgv2a respectively .",
    "when our fourth order langevin algorithm is implemented by using the standard fourth order runge - kutta algorithm to solve the trajectory equation ( [ traject ] ) we obtained results as shown by open circles in fig.1 .",
    "the variance of the potential energy increases abruptly at around @xmath69 and the algorithm becomes unstable at larger @xmath13 s .",
    "the problem can be traced to the instability of the runge - kutta algorithm itself in solving for the many - body dynamics . while the trajectory evolution @xmath70 should _ always _ decrease the potential energy , @xmath71 this is no longer respected by the runge - kutta algorithm at larger time steps .",
    "the failure is due to the fact that gaussian random walks can deposit particles so close together that the velocity field is changing too steeply for the runge - kutta algorithm to integrate accurately .",
    "each of these particles then gets placed chaotically somewhere in the periodic box , often again too near others , thus multiplying the number of particles that will be moved erratically in the next iteration . at time steps below but near @xmath69",
    ", the system can recover the regular behavior after several to hundreds of iterations , but only at the cost of increased variances and larger errors .",
    "thus the inaccuracy in the trajectory determination causes the langevin algorithm to fail prematurely .    to improve on this situation",
    ", we monitor the difference between the results of the standard fourth order runge - kutta and the embedded second order algorithm ( [ trk ] ) .",
    "we use the absolute value squared of this difference as a gauge of the fourth order method , even though it is strictly only an error estimate for the embedded second order algorithm .",
    "if the value of this difference is larger than some tolerance ( 0.01 in our case ) , we reject the result of the runge - kutta and recompute the trajectory more accurately by applying our trajectory algorithm twice at half the time step size . at small time steps , this incurs only a very small overhead . even at a time step of @xmath72 only @xmath73 of the trajectories have to be re - evaluated . with this improvement , our fourth order langevin algorithm gives results as shown by solid circles in fig .",
    "( we also applied similar monitoring processes to lgv2a and lgv2b by comparing the results of their first and second order runge - kutta algorithms . )",
    "the step - size dependence of the fourth order algorithm is remarkably flat , and yielded the converged results of the lower algorithms at step - sizes nearly 50 times as large .",
    "while we are not aware of other multivariable 4th order langevin algorithms , there are two fourth order algorithms in the literature for solving the kramers equation in one dimension@xcite . despite its more complicated appearance ,",
    "the kramers equation is actually simpler to solve than the langevin equation . to illustrate the versatility of our operator approach",
    ", we will derive systematically a number of fourth order algorithms for solving this equation .",
    "following hershkovitz@xcite , we write the kramers equations in the form @xmath74 where the force is derivable from a potential , @xmath75 .",
    "a key simplification follows from the hamilton form of the equation @xmath76 where @xmath77 is the zero - mean gaussian random noise vector with variance @xmath78 the advantage here is that the noise only affects the momentum , and classically , the momentum commutes with the position - dependent force term",
    ". we will study the case of the bistable potential @xmath79 at parameter value @xmath80 and @xmath81 .",
    "for each algorithm considered below , starting with @xmath82 and @xmath83 , we evolve the system to a finite time of @xmath84 . for comparison , we note that the total energy approaches the equilibrium limit of @xmath85 at infinite time .",
    "hershkovitz@xcite has formally derived a 4th order algorithm for solving ( [ heq ] ) using taylor expansion , but he has given an explicit implementation only for one dimension .",
    "in one dimension , each update of his algorithm requires one determination of the particle trajectory to 4th order , 4 gaussian random variables , and one evaluation of the derivative of the force .",
    "the results of using his algorithm to evolve the system energy as a function of the time step size @xmath13 is shown as solid squares in fig.2 .",
    "the standard 4th order runge - kutta algorithm , which requires four evaluations of the force , is used to solve for the particle s trajectory .",
    "to derive factorization algorithms in any dimension , we note that the probability density function evolves according to @xmath86 where @xmath87 to factorize the evolution operator @xmath88 for small @xmath13 , we decompose @xmath89 into exactly solvable parts @xmath34 plus @xmath35 and apply known fourth order factorization schemes@xcite .",
    "drozdov and brey@xcite have recently initiated such a study of the kramers equation . in this work ,",
    "we have done an exhaustive search of all possible choices of solvable @xmath34 and @xmath35 such that @xmath8 $ ] or @xmath90 $ ] is also solvable .",
    "we use the word  solvable \" here loosely to denote either analytical result or trajectory determination .",
    "for example , the effect of @xmath91 $ ] on the distribution function @xmath92 corresponds to evolving the particle _ trajectory _ forward in time with a linear friction .",
    "since this can be computed using any trajectory integration algorithm , we consider @xmath93 to be solvable . while there are many solvable choices for @xmath34 and @xmath35 , such as the sum of any two @xmath94",
    ", few resulting double commutators are simple .",
    "the possible choices for @xmath34 and @xmath35 are dramatically reduced if we insist that one of their double commutators is also structurally similar to the original @xmath34 or @xmath35 .",
    "there are then only three possibilities .",
    "the first possibility is to take @xmath95 which is the choice originally made by drozdov and brey@xcite .",
    "the green s function corresponding to @xmath96 is known analytically@xcite , and can be sampled via @xmath97 where corresponding to each pair of @xmath98 , @xmath99 is a pair of correlated gaussian random numbers given by @xmath100 here , @xmath26 and @xmath27 are again two independent gaussian random numbers with zero mean and unit variance .",
    "note that at a given step size @xmath13 , all the above functions involving @xmath101 , etc .",
    ", only need to be evaluated once at the beginning of the simulation",
    ". the operator @xmath70 can be exactly simulated by @xmath102 as we will see , this choice is clever because there is no trajectory equation to solve .",
    "the double commutator required for a fourth order factorization is @xmath45=[l_4,[l_3,l_4]]=-\\nabla_{\\bf q}|{\\bf f}|^2\\cdot\\nabla_{\\bf p }   \\label{dfour}\\ ] ] which is just @xmath35 but with a force @xmath103 . for each choice of @xmath34 and @xmath35",
    ", there are three generic schemes@xcite for factorizing the decomposed operator @xmath104 $ ] to fourth order with purely positive coefficients . for this choice of @xmath34 and @xmath35",
    ", we found that schemes a and b of ref.@xcite give rather similar results , so we will only present results for schemes a and c. scheme a and c are respectively , @xmath105 and @xmath106 where @xmath107 .",
    "\\label{tilded}\\ ] ] the results of these two algorithms are shown as solid and open circles in fig.2 .",
    "we will refer to these two as algorithms db ( drozdov and brey ) and k4a respectively .",
    "each algorithm evaluates the force three times and the derivative of the force once .",
    "drozdov and brey s algorithm uses 4 gaussian random numbers and k4a uses eight . for the extra effort ,",
    "algorithm k4a has a much flatter convergence curve .",
    "drozdov and brey solved their one dimensional problem on a grid .",
    "we used monte carlo simulation , which can be generalized to any dimension .",
    "the second possibility is to take @xmath108 the operator @xmath96 now corresponds to an ornstein - uhlenbeck process in @xmath109 , @xmath110 and @xmath70 evolves the particle trajectory forward in time without friction , @xmath111 in this case , the simpler double commutator is @xmath112=[l_2,[d , l_2]]=-\\gamma^2 d , \\label{bfour}\\ ] ] which _ does not _ require the derivative of the force . for this choice",
    ", we need to switch @xmath113 in scheme a and slightly modify it as follows : @xmath114 d } { \\rm e}^ { { 2\\over 3}\\epsilon t } { \\rm e}^ { { 1\\over 2}\\epsilon [ 1 - \\epsilon^2\\gamma^2/72 ] d } { \\rm e}^ { { 1\\over 6}\\epsilon t } + o(\\epsilon^5).\\ ] ] the effect of the double commutator simply reduces the time of the trajectory evolution .",
    "this algorithm , which will be referred to as k4b , requires two trajectory determinations but no derivative of the force and only three gaussian random numbers .",
    "the trajectory can be computed using the standard 4th order runge - kutta algorithm with four force evaluations , or the 4th order forest - ruth symplectic algorithm@xcite with three force evaluations .",
    "the results from these two cases are plotted as solid and open diamonds respectively in fig.2 . for this choice of @xmath35",
    ", we did not bother with factorization schemes b or c , since either would have required more than two trajectory determinations .",
    "the third possibility is to take @xmath115 where now @xmath96 is just a gaussian process in @xmath109 , @xmath116 and @xmath70 evolves the particle trajectory forward in time with friction . for this case",
    ", we have the simplest result , @xmath112=0 , \\label{cfour}\\ ] ] and a simplified fourth order factorization @xmath117 we shall refer to this as algorithm k4c .",
    "this algorithm is similar to k4b , with no force derivative necessary .",
    "if we solve the trajectory equation by the 4th order runge - kutta algorithm , we obtain results as shown by solid triangles in fig.2 .",
    "note that in contrast to previous algorithms , this algorithm does not converge monotonically .",
    "it overshoots and converges from the top .    in the course of our calculations , we find that for each algorithm , a more accurately determined particle trajectory will yield a flatter convergence curve .",
    "if we now further decompose @xmath118 in algorithm k4c , with @xmath119 the double commutator @xmath120=-\\gamma^2 d_2 $ ] is just a restatement of ( [ bfour ] ) .",
    "we can again factorize , @xmath121 d_2 } { \\rm e}^ { { 2\\over 3}\\epsilon d_1 } { \\rm e}^ { { 1\\over 2}\\epsilon [ 1 - \\epsilon^2\\gamma^2/72 ] d_2 } { \\rm e}^ { { 1\\over 6}\\epsilon d_1 } + o(\\epsilon^5).\\ ] ] the friction evolution @xmath122 rescales the momentum , @xmath123 and @xmath124 again evolves the trajectory forward for time @xmath13 .",
    "this way of solving the trajectory with friction doubles the number of trajectory calculations , but also further flattens the convergence curve . to minimize the number of force evaluations",
    ", we use the forest - ruth symplectic algorithm to calculate the trajectory .",
    "the results are shown as open triangles in fig.2 .    of the algorithms studied ,",
    "drozdov and brey s algorithm makes maximum use of analytical knowledge and is very efficient .",
    "the improvement we suggested , algorithm k4a , with twice the number of gaussian random numbers , seemed to double the range of the convergence .",
    "our new algorithms k4b and k4c , while requiring two trajectory determinations , have no need of evaluating the force derivative .",
    "all these algorithms serve to illustrate the power of the factorization method .",
    "while the diligence of hershkovitz is rewarded with just a single fourth order algorithm , we can survey the form of the evolution operator and derive many fourth order algorithms .",
    "in this work , we have shown how the method of operator factorization can be applied to the langevin equation to derive a practical fourth order algorithm .",
    "this method of factorizing an evolution operator of the form @xmath125 leads to _ unitary _ algorithms for solving the schr@xmath126dinger equation in quantum mechanics , _ symplectic _",
    "algorithms for solving hamilton s equations in classical mechanics , and _ norm preserving _ algorithms for solving the langevin equation in stochastical mechanics . a key step in deriving a fourth order langevin algorithm is our treatment of the double commutator term through successive use of normal ordering .",
    "the resulting algorithm ( [ dmc4al ] ) is computationally demanding , but one is rewarded by a very flat convergence curve , virtually eliminating the step - size dependent error .",
    "future use of this algorithm in other applications may lead to further simplifications and enhancements of its utility .",
    "we also derived a number of 4th order algorithms for solving the kramers equation .",
    "the freedom in decomposing the kernel operator and choosing a particular factorization scheme illustrates the power of this approach .",
    "it is difficult to see these global structures from just doing taylor expansions .",
    "one advantage of our simulation approach is that we are not restricted to solving the kramers equation in one dimension .",
    "we can solve it in any dimension .",
    "our use of the kramers equation is also only illustrative , one can apply this method of operator factorization to other stochastic equations of one s own interest",
    ".    it is observed in solving both equations that the step - size error is reduced by solving the trajectory more exactly .",
    "different fourth order algorithms for solving the trajectory equation can yield different convergence curves .",
    "one should therefore explore the effect of using fourth order algorithms other than runge - kutta in implementing any of the above stochastic algorithms ."
  ],
  "abstract_text": [
    "<S> we develop a fourth order simulation algorithm for solving the stochastic langevin equation . </S>",
    "<S> the method consists of identifying solvable operators in the fokker - planck equation , factorizing the evolution operator for small time steps to fourth order and implementing the factorization process numerically . a key contribution of this work is to show how certain double commutators in the factorization process can be simulated in practice . </S>",
    "<S> the method is general , applicable to the multivariable case , and systematic , with known procedures for doing fourth order factorizations . </S>",
    "<S> the fourth order convergence of the resulting algorithm allowed very large time steps to be used . in simulating the brownian dynamics of 121 yukawa particles in two dimensions , </S>",
    "<S> the converged result of a first order algorithm can be obtained by using time steps 50 times as large . to further demostrate the versatility of our method , we derive two new classes of fourth order algorithms for solving the simpler kramers equation without requiring the derivative of the force . </S>",
    "<S> the convergence of many fourth order algorithms for solving this equation are compared . </S>"
  ]
}