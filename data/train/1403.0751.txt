{
  "article_text": [
    "in most academic programmes students are usually required to take up individual or group projects offered by lecturers .",
    "students may be required to rank a subset of the projects they find acceptable in order of preference .",
    "each project is offered by a unique lecturer who may also be allowed to rank the projects she offers or the students who are interested in taking her projects in order of preference .",
    "each student can be assigned to at most one project and there are usually constraints on the maximum number of students that can be assigned to each project and lecturer .",
    "the problem then is to assign students to projects in a manner that satisfies these capacity constraints while taking into account the preferences of the students and lecturers involved .",
    "this problem has been described in the literature as the _ student - project allocation problem ( spa ) _",
    "variants of spa also exist in which _ lower quotas _ are assigned to projects and/or lecturers .",
    "these lower quotas indicate the minimum number of students to be assigned to each project and lecturer .    although described in an academic context , applications of spa need not be limited to assigning students to projects but may extend to other scenarios , such as the assignment of employees to posts in a company where",
    "available posts are offered by various departments .",
    "applications of spa in an academic context can be found at the university of glasgow @xcite , the university of york @xcite , the university of southampton @xcite and the geneva school of business administration @xcite .",
    "as previously stated , it is widely accepted that matching problems ( like spa ) are best solved by centralised matching schemes where agents submit their preferences and a central authority computes an optimal matching that satisfies all the specified criteria @xcite .",
    "moreover the potentially large number of students and projects involved in these schemes motivates the need to discover efficient algorithms for finding optimal matchings .      in spa",
    ", students are always required to provide preference lists over projects .",
    "however , variants of the problem may be defined depending on the presence and nature of lecturer preference lists",
    ". some variants of spa require both students and lecturers to provide preference lists .",
    "these variants include : ( i ) the _ student / project allocation problem with lecturer preferences over students ( spa - s ) _",
    "@xcite which requires each lecturer to rank the students who find at least one of her offered projects acceptable , in order of preference , ( ii ) the _ student / project allocation problem with lecturer preferences over projects ( spa - p ) _ @xcite which involves lecturers ranking the projects they offer in order of preference and ( iii ) the _ student / project allocation problem with lecturer preferences over student - project pairs ( spa-(s , p ) ) _ @xcite where lecturers rank student - project pairs in order of preference .",
    "these variants of spa have been studied in the context of the well - known _ stability _ solution criterion for matching problems @xcite .",
    "the general stability objective is to produce a matching @xmath1 in which no student - project pair that are not currently matched in @xmath1 can simultaneously improve by being paired together ( thus in the process potentially abandoning their partners in @xmath1 ) .",
    "a full description of the results relating to these spa variants can be found in @xcite .      in many practical spa applications",
    "it is considered appropriate to allow only students to submit preferences over projects .",
    "when preferences are specified by only one set of agents in a two - sided matching problem , the notion of stability becomes irrelevant .",
    "this motivates the need to adopt alternative solution criteria when lecturer preferences are not allowed . in this subsection",
    "we describe some of these solution criteria and briefly present results relating to them .",
    "these criteria consider the size of the matchings produced as well as the satisfaction of the students involved .",
    "when preference lists of lecturers are absent , the spa problem becomes a two - sided matching problem with one - sided preferences .",
    "we assume students preference lists can contain ties in these spa variants .",
    "various optimality criteria for such problems have been studied in the literature @xcite .",
    "some of these criteria depend on the _ profile _ or the _ cost _ of a matching . in the spa context ,",
    "the _ profile _ of a matching is a vector whose @xmath0th component indicates the number of students obtaining their @xmath0th - choice project in the matching .",
    "the _ cost _ of a matching ( w.r.t .",
    "the students ) is the sum of the ranks of the assigned projects in the students preference lists ( that is , the sum of @xmath2 taken over all components @xmath0 of the profile , where @xmath3 is the @xmath0th component value ) .",
    "a _ minimum cost maximum matching _ is a maximum cardinality matching with minimum cost .",
    "rank - maximal matching _ is a matching that has lexicographically maximum profile @xcite .",
    "that is the maximum number of students are assigned to their first - choice project and subject to this , the maximum number of students are assigned to their second choice project and so on .",
    "however a rank maximal matching need not be a maximum matching in the given instance ( see , e.g. , @xcite ) .",
    "since it is usually important to match as many students as possible , we may first optimise the size of the matching before considering student satisfaction .",
    "thus we define a _ greedy maximum matching _ @xcite to be a maximum matching that has lexicographically maximum profile .",
    "the intuition behind both rank - maximal and greedy maximum matchings is to maximize the number of students matched with higher ranked projects .",
    "this may lead to some students being matched to projects that are relatively low on their preference lists .",
    "an alternative approach is to find a _",
    "generous maximum matching _ which is a maximum matching in which the minimum number of students are matched to their @xmath4th - choice project ( where @xmath4 is the maximum length of any students preference list ) and subject to this , the minimum number of students are matched to their @xmath5th - choice project and so on .",
    "greedy and generous maximum matchings have been used to assign students to projects in the school of computing science , and students to elective courses in the school of medicine , both at the university of glasgow , since 2007 .",
    "figure [ spa_instance ] shows a sample spa instance with greedy and generous maximum matchings , namely @xmath6 and @xmath7 respectively .",
    "@xmath8    a special case of spa , where each project is offered by a unique lecturer with an infinite upper quota and zero lower quota , can be modelled as the _ capacitated house allocation problem with ties ( chat)_. this is a variant of the well - studied _ house allocation problem ( ha )",
    "_ @xcite which involves the allocation of a set of indivisible goods ( which we call houses ) to a set of applicants . in chat",
    ", each applicant is required to rank a subset of the houses in order of preference with the houses having no preference over applicants .",
    "the applicants play the role of students and the houses play the role of projects and lecturers . as in the case of spa",
    ", we seek to find a many - to - one matching comprising applicant - house pairs .",
    "efficient algorithms for finding profile - based optimal matchings in chat have been studied in the literature @xcite .",
    "the most efficient of these is the @xmath9 algorithm for finding rank - maximal , greedy maximum and generous maximum matchings in chat problems due to huang et al .",
    "@xcite where @xmath10 is the maximum rank of any applicant in the matching , @xmath11 is the sum of all the preference list lengths and @xmath12 is the total number of applicants and houses .",
    "these models however fail to address the issue of load balancing among lecturers . in order to keep the assignment of students fair each lecturer",
    "will typically have a minimum ( lower quota ) and maximum ( capacity / upper quota ) number of students they are expected to supervise .",
    "these numbers may vary for different lecturers according to other administrative and academic commitments .",
    "the chat algorithms mentioned above are based on modelling the problem in terms of a bipartite graph with the aim of finding a matching in the graph which satisfies the stated criteria .",
    "however a more flexible approach would be to model the problem as a network with the aim of finding a flow that can be converted to a matching which satisfies the stated criteria .",
    "spa has also been investigated in the network flow context @xcite where a _ minimum cost maximum flow algorithm _ is used to find a minimum cost maximum matching and other profile - based optimal matchings .",
    "the model presented in @xcite allows for lower quotas on lecturers and projects as well as alternative lecturers to supervise each project . by an appropriate assignment of edge weights in the network",
    "it is shown that a minimum cost maximum flow algorithm ( due to orlin @xcite ) can find rank maximal , generous maximum and greedy maximum matchings in a spa instance .",
    "this takes @xmath13 time in the worst case , where @xmath11 and @xmath12 are the number of vertices and edges in the network respectively . in the spa context",
    "this takes @xmath14 time where @xmath15 is the numbers of students and @xmath16 is the sum of all the students preference list lengths .",
    "however this approach involves assigning exponentially large edge weights ( see , e.g. , @xcite ) , which may be computationally infeasible for larger problem instances due to floating point inaccuracies in dealing with such high numbers .",
    "for example given a large spa instance involving say , @xmath17 students each ranking @xmath18 projects in order of preference , edge weights could potentially be of the order @xmath19 ( and arithmetic involving such weights could easily require more than the @xmath20-@xmath21 significant figures available in a @xmath22-bit double - precision floating representation ) . since the flow algorithms involve comparing these edge weights , floating point precision errors could easily cause them to fail in practice . moreover using the standard assumption",
    "that arithmetic on numbers of magnitude @xmath23 takes constant time , arithmetic on edge weights of magnitude @xmath24 would add an additional factor of @xmath25 onto the running time of orlin s algorithm .",
    "the variants of spa already discussed above have been motivated by both practical and theoretical interests .",
    "these variants are usually distinguished by the ( i ) feasibility and ( ii ) optimality criteria specific to them . in this section",
    ", we discuss some more spa models found in the literature as well as other approaches that have been used to solve these problems . the techniques employed include _ integer programming ( ip ) _",
    "@xcite , @xcite , _ constraint programming ( cp ) _",
    "@xcite , and others @xcite .    in @xcite , an ip model for spa was presented with the aim of optimising the overall satisfaction of the students and the lecturers offering the projects ( i.e. , minimising the overall cost on both sides ) . in @xcite",
    "an ip model was presented for spa problems involving individual and group projects .",
    "various objective functions were also employed ( often in a hierarchical manner ) .",
    "these include minimising the cost , balancing the work - load among lecturers , maximising the number of students assigned and maximising the number of first - choice assignments ( w.r.t .",
    "student preferences ) . in @xcite a more general ip model for spa which allows project lower quotas was also presented .",
    "however none of these models simultaneously consider profile - based optimality as well as upper and lower quota constraints .",
    "in section [ spa_defs ] we formally define the spa model . in section [ spa_greedy ]",
    "we present an @xmath26 time algorithm for finding a greedy maximum matching given a spa instance and prove its correctness .",
    "the algorithm takes lecturer upper quotas into consideration . in section [ generous ]",
    "we show how this algorithm can be modified in order to find a generous maximum matching .",
    "section [ lower - q ] introduces lecturer lower quotas to the spa model and shows how our algorithm can be modified to handle this variant . in section [ spa_impl ]",
    "we present results from an empirical evaluation of the algorithms described .",
    "we conclude the paper in section [ ch7_conclusion ] by presenting some open problems .",
    "an instance @xmath27 of the spa problem consists of a set @xmath28 of students , a set @xmath29 of projects and a set @xmath30 of lecturers .",
    "each student @xmath31 ranks a set @xmath32 of projects that she considers acceptable in order of preference .",
    "this _ preference list _ of projects may contain ties .",
    "each project @xmath33 has an upper quota @xmath34 indicating the maximum number of students that can be assigned to it .",
    "each lecturer @xmath35 offers a set of projects @xmath36 and has an upper quota @xmath37 indicating the maximum number of students that can be assigned to @xmath38 .",
    "unless explicitly mentioned , we assume that all lecturer lower quotas are equal to @xmath39 . the sets @xmath40 partition @xmath41 . if project @xmath42 , then we denote @xmath43 .",
    "an _ assignment _ @xmath1 in @xmath27 is a subset of @xmath44 such that :    1 .",
    "student - project pair @xmath45 implies @xmath46 .",
    "2 .   for each student @xmath47 .",
    "if @xmath45 we denote @xmath48 .",
    "for a project @xmath49 , @xmath50 is the set of students assigned to @xmath49 in @xmath1 . also if @xmath45 and @xmath42 we say student @xmath31 is assigned to project @xmath49 and to lecturer @xmath38 in @xmath1 .",
    "we denote the set of students assigned to a lecturer @xmath38 as @xmath51 .",
    "a _ matching _ in this problem is an assignment @xmath1 that satisfies the capacity constraints of the projects and lecturers .",
    "that is , @xmath52 for all projects @xmath33 and @xmath53 for all lecturers @xmath35 .",
    "given a student @xmath31 and a project @xmath46 , we define @xmath54 as @xmath55 the number of projects that @xmath31 prefers to @xmath49 .",
    "let @xmath4 be the maximum rank of a project in any student s preference list .",
    "we define the _ profile _ @xmath56 of a matching @xmath1 in @xmath27 as an @xmath4-tuple @xmath57 where for each @xmath0 ( @xmath58 ) , @xmath3 is the number of students @xmath31 assigned in @xmath1 to a project @xmath49 such that @xmath59 .",
    "let @xmath60 and @xmath61 be any two profiles .",
    "we define the _ empty profile _",
    "@xmath62 where @xmath63 for all @xmath64 .",
    "we also define the _ negative infinity profile _ @xmath65 where @xmath66 ( @xmath58 ) and the _ positive infinity profile _",
    "@xmath67 where @xmath68 ( @xmath58 ) .",
    "we define the sum of two profiles @xmath69 and @xmath70 as @xmath71 . given any @xmath72 ,",
    "we define @xmath73 .",
    "we define @xmath74 in a similar way .",
    "we define the total order @xmath75 on profiles as follows .",
    "we say @xmath69 _ left dominates _",
    "@xmath70 , denoted by @xmath76 if there exists some @xmath77 such that @xmath78 for @xmath79 and @xmath80 .",
    "we define _ weak left domination _ as follows .",
    "we say @xmath81 if @xmath82 or @xmath76 .",
    "we may also define an alternative total order @xmath83 on profiles as follows .",
    "we say @xmath69 _ right dominates _",
    "@xmath70 ( @xmath84 ) if there exists some @xmath77 such that @xmath78 for @xmath85 and @xmath86 .",
    "we also define _ weak right domination _ as follows .",
    "we say @xmath87 if @xmath82 or @xmath88 .",
    "the spa problem can be modelled as a network flow problem .",
    "given a spa instance @xmath27 , we construct a flow network @xmath89 where @xmath90 is a directed graph and @xmath91 is a non - negative capacity function @xmath92 defining the maximum flow allowed through each edge in @xmath93 .",
    "the network consists of a single source vertex @xmath94 and sink vertex @xmath95 and is constructed as follows .",
    "let @xmath96 and @xmath97 where @xmath98 , @xmath99 , @xmath100 and @xmath101 .",
    "we set the capacities as follows : @xmath102 for all @xmath103 , @xmath104 for all @xmath105 , @xmath106 for all @xmath107 and @xmath108 for all @xmath109 .",
    "we call a path @xmath110 from @xmath94 to some project @xmath49 a _ partial augmenting path _ if @xmath110 can be extended adding the edges @xmath111 and @xmath112 to form an augmenting path with respect to flow @xmath113 .",
    "given a partial augmenting path @xmath110 from @xmath94 to @xmath49 , we define the _ profile _ of @xmath110 , denoted @xmath114 , as follows : @xmath115 @xmath116 where additions are done with respect to the @xmath117 and @xmath118 operations on profiles . unlike the profile of a matching , the profile of an augmenting path may contain negative values .",
    "also if @xmath110 can be extended to a full augmenting path @xmath119 with respect to flow @xmath113 by adding the edges @xmath111 and @xmath112 where @xmath94 and @xmath49 are the endpoints of @xmath110 , then we define the profile of @xmath119 , denoted by @xmath120 , to be @xmath121 .",
    "multiple partial augmenting paths may exist from @xmath94 to @xmath49 , thus we define the _ maximum profile of a partial augmenting path _ from @xmath94 to @xmath49 with respect to @xmath75 , denoted @xmath122 , as follows : @xmath123 an augmenting path @xmath119 is called a _",
    "maximum profile augmenting path _",
    "if @xmath124    let @xmath113 be an integral flow in @xmath125 .",
    "we define the matching @xmath126 in @xmath27 induced by @xmath113 as follows : @xmath127 . clearly by construction of @xmath125 , @xmath126 is a matching in @xmath27 , such that @xmath128 .",
    "if @xmath113 is a flow and @xmath119 is an augmenting path with respect to @xmath113 then @xmath129 where @xmath130 and @xmath131 is the flow obtained by augmenting @xmath113 along @xmath119 .",
    "also given a matching @xmath1 in @xmath27 , we define a flow @xmath132 in @xmath125 corresponding to @xmath1 as follows : @xmath133 we define a student @xmath31 to be _ exposed _ if @xmath134 meaning that there is no flow through @xmath31 .",
    "similarly we define a project @xmath49 to be _ exposed _ if @xmath135 and @xmath136 where @xmath43 .",
    "let @xmath1 be a matching of size @xmath137 in @xmath27 .",
    "we say that @xmath1 is a _ greedy @xmath137-matching _ if there is no other matching @xmath138 such that @xmath139 and @xmath140 . if @xmath137 is the size of a maximum cardinality matching in @xmath27 , we call @xmath1 a _ greedy maximum matching _ in @xmath27 .",
    "also we say that @xmath1 is a _",
    "generous @xmath137-matching _ if there is no other matching @xmath138 such that @xmath141 and @xmath142 . if @xmath137 is the size of a maximum cardinality matching in @xmath27 , we call @xmath1 a _ generous maximum matching _ in @xmath27 .",
    "we also define the _ degree _ of a matching @xmath1 to be the rank of one of the worst - off students matched in @xmath1 or @xmath39 if @xmath1 is an empty set .",
    "in this section we present the algorithm greedy - max - spa for finding a greedy maximum matching given a spa instance .",
    "the algorithm is based on the general ford - fulkerson algorithm for finding a maximum flow in a network @xcite .",
    "we obtain maximum profile augmenting paths by adopting techniques used in the bipartite matching approach for finding a greedy maximum matching in ha @xcite and chat @xcite .",
    "the greedy - max - spa algorithm shown in algorithm [ gen - spa ] takes in a spa instance @xmath27 as input and returns a greedy maximum matching @xmath1 in @xmath27 . a flow network @xmath89 is constructed as described in section [ spa_defs ] .",
    "given a flow @xmath113 in @xmath143 that yields a greedy @xmath137-matching @xmath126 in @xmath27 , if @xmath137 is not the size of a maximum flow in @xmath143 , we seek to find a maximum profile augmenting path @xmath119 with respect to @xmath113 in @xmath143 such that the new flow @xmath131 obtained by augmenting @xmath113 along @xmath119 yields a greedy @xmath144-matching @xmath145 in @xmath27 .",
    "lemmas [ kwa1 ] and [ kwa2 ] show the correctness of this approach .",
    "we firstly show that if @xmath137 is smaller than the size of a maximum flow in @xmath143 then such a path is bound to exist .",
    "let @xmath27 be an instance of spa and let @xmath146 denote the size of a maximum matching in @xmath27 .",
    "let @xmath147 be given and suppose that @xmath148 is a greedy @xmath137-matching in @xmath27 .",
    "let @xmath149 and @xmath150 .",
    "then there exists an augmenting path @xmath119 with respect to @xmath113 in @xmath125 such that if @xmath131 is the result of augmenting @xmath113 along @xmath119 then @xmath151 is a greedy @xmath144-matching in @xmath27 .",
    "[ kwa1 ]    let @xmath152 be a new instance of spa obtained from @xmath27 as follows .",
    "firstly we add all students in @xmath27 to @xmath153 .",
    "next , for every project @xmath33 , we add @xmath34 clones @xmath154 to @xmath153 each of capacity @xmath155 .",
    "we then add all lecturers in @xmath27 to @xmath153 . if @xmath46 in @xmath27 , we add @xmath156 to @xmath153 for all @xmath157 . if @xmath42 is in @xmath27 , we add @xmath158 to @xmath153 for all @xmath157 . also if @xmath159 , we set @xmath160 for all @xmath157 .",
    "let @xmath161 be the underlying graph in @xmath153 involving only the student and project clones .",
    "with respect to the matching @xmath162 , we construct a cloned matching @xmath163 in @xmath153 as follows .",
    "if project @xmath49 is assigned @xmath164 students @xmath165 in @xmath148 we add @xmath166 to @xmath163 for all @xmath167 .",
    "hence @xmath163 is a greedy @xmath137-matching in @xmath153 .",
    "let @xmath168 be a greedy @xmath144-matching in @xmath27 ( this exists because @xmath169 ) .",
    "then @xmath170 is a greedy @xmath144-matching in @xmath153 .",
    "let @xmath171 .",
    "then each connected component of @xmath172 is either ( i ) an alternating cycle , ( ii ) an even - length alternating path or ( iii ) an odd - length alternating path in @xmath161 ( with no restrictions on which matching the end edges belong to ) .",
    "the aim is to show that , by eliminating a subset of @xmath172 , we are left with a set of connected components which can be transformed into a single augmenting path with respect to @xmath173 in @xmath174 and subsequently a single augmenting path with respect to @xmath175 in @xmath143 . + * eliminating connected components of @xmath172 : * suppose @xmath176 is a type ( i ) connected component of @xmath172 or a type ( ii ) connected component of @xmath172 whose end vertices are students ( we may call this a type ( ii)(a ) component ) .",
    "suppose also that @xmath177 .",
    "a new matching @xmath178 in @xmath161 of cardinality @xmath137 can be created from @xmath163 by replacing all the @xmath163-edges in @xmath179 with the @xmath170-edges in @xmath179 ( i.e. by augmenting @xmath163 along @xmath179 ) .",
    "since the upper quota constraints of the lecturers involved are not violated after creating @xmath178 from @xmath163 , it follows that @xmath178 is also a valid spa matching in @xmath153 .",
    "moreover @xmath180 which is a contradiction to the fact that @xmath163 is a greedy @xmath137-matching in @xmath153 . a similar contradiction ( to the fact that @xmath170 is a greedy @xmath144- matching in @xmath153 ) exists if we assume @xmath181",
    ". thus @xmath182 .",
    "form the argument above , no type ( i ) or type ( ii)(a ) connected component of @xmath172 contributes to a change in the size or profile as we augment from @xmath163 to @xmath170 or vice versa .",
    "in fact , this is true for any even - length connected component of @xmath172 which does not cause lecturer upper quota constraints to be violated as we augment from @xmath163 to @xmath170 or vice versa .",
    "the claim can further be extended to certain groups of connected components which , when considered together , ( i ) have equal numbers of @xmath163 and @xmath170 edges and ( ii ) do not cause lecturer upper quota constraints to be violated as we augment from @xmath163 to @xmath170 or vice versa . in all these cases , it is possible to _ eliminate _ such components ( or groups of components ) from consideration . using the above reasoning , we begin by eliminating all type ( i ) and type ( ii)(a ) connected components of @xmath172 .",
    "let @xmath183 be the union of all the edges in type ( i ) and type ( ii)(a ) connected components of @xmath172 .",
    "let @xmath184 .",
    "then it follows that @xmath185 for some greedy @xmath144-matching @xmath186 in @xmath153 which can be constructed by augmenting @xmath170 along all type ( i ) and type ( ii)(a ) components of @xmath172 . thus @xmath187 contains ( 1 ) even - length alternating paths whose end vertices are project clones ( we call these type ( ii)(b ) paths ) , ( 2 ) odd - length alternating paths whose end edges are in @xmath163 ( we call these type ( iii)(a ) paths ) and ( 3 ) odd - length alternating paths whose end edges are in @xmath186 ( we call these type ( iii)(b ) paths ) .",
    "although these alternating paths are vertex disjoint , there are special cases where two alternating paths in @xmath187 may be _ joined together _ by pairing their end project clone vertices .",
    "+ * joining alternating paths : * consider some lecturer @xmath188 and project @xmath189 .",
    "we extend the notation @xmath190 to include all clones of @xmath49 ( i.e. @xmath191 for all @xmath157 ) .",
    "let @xmath192 thus @xmath193 is the set of end edges incident to project clones belonging to a subset of the type ( ii)(b ) and type ( iii)(a ) paths in @xmath187 .",
    "let @xmath194 thus @xmath195 is the set of end edges incident to project clones belonging to a subset of the type ( ii)(b ) and type ( iii)(b ) paths in @xmath187 . also let @xmath196 thus @xmath197 and @xmath198 where @xmath199 and @xmath200 are the number of unassigned positions that @xmath188 has in @xmath163 and @xmath201 respectively .",
    "note that @xmath202 if and only if @xmath203 .",
    "if @xmath202 then all the paths with end edges in @xmath195 can be considered as valid alternating paths in @xmath163 ( i.e. if they are used to augment @xmath163 , @xmath188 s upper quota will not be violated in the resulting matching ) . since @xmath203 then all the paths with end edges in @xmath193 can be considered as valid alternating paths in @xmath201 ( i.e. if they are used to augment @xmath201 , @xmath188 s upper quota will not be violated in the resulting matching ) .",
    "on the other hand , assume @xmath204 .",
    "then @xmath205 . let @xmath206 be an arbitrary subset of @xmath195 of size @xmath199 and let @xmath207 be an arbitrary subset of @xmath193 of size @xmath200 . thus all paths with end edges in @xmath208 and @xmath209 can be considered as valid alternating paths in @xmath201 and @xmath210 respectively .",
    "also @xmath211 .",
    "we can thus form a @xmath212 correspondence between the edges in @xmath213 and those in @xmath214 .",
    "let @xmath215 and @xmath216 be the end edges of two alternating paths in @xmath187 .",
    "the paths can be joined together by _ pairing _ the clones of both end projects thus forming a _ project pair _ @xmath217 at @xmath188 .",
    "these project pairs can be formed from all edges in @xmath218 and @xmath219 .    in the cases where",
    "project pairs are formed , the resulting path ( which we call a _ compound path _ ) may be regarded as a single path along which @xmath163 or @xmath186 may be augmented . in some cases ,",
    "the two projects being paired may be end vertices of a single ( or compound ) alternating path .",
    "thus pairing them together will form a cycle . since the cycle is of even length and the lecturer s upper quota will not be violated if it is used to augment @xmath163 or @xmath201 it can be eliminated right away . for each lecturer @xmath220 , once the pairings between alternating paths in @xmath218 and @xmath219 have been carried out ( where applicable ) and any formed cycles have been eliminated , we are left with a set of single or compound alternating paths of the following types ( for simplicity we call all remaining alternating paths _",
    "compound paths _ even though they may consist of only one path ) .",
    "= [ draw , circle , fill = gray , minimum size=10pt , inner sep=0.3pt ] = [ draw , circle , fill = gray , minimum size=7pt ]    at ( 1,7 ) compound type ( ii)(a ) path ;    ( 0,6 ) node[every_node ] ( s1 ) [ label = left:@xmath221 ; ( 2,6 ) node[every_node ] ( p1 ) [ label = right:@xmath222 ; ( s1 ) edge[decorate ] ( p1 ) ; ( 0,5 ) node[every_node ] ( s2 ) [ label = left:@xmath223 ; ( 2,5 ) node[every_node ] ( p2 ) [ label = right:@xmath224 ; ( s2 ) edge[decorate ] ( p2 ) ; ( s2 ) edge ( p1 ) ;    ( 1,4 ) ",
    "( 1,4.5)[dashed ] ;    ( 2,3.5 ) node[every_node ] ( p3 ) [ label = right:@xmath225 ; ( 0,3 ) node[every_node ] ( s3 ) [ label = left:@xmath226 ; ( 2,2.5 ) node[every_node ] ( p4 ) [ label = right:@xmath227 ; ( s3 ) edge[decorate ] ( p4 ) ; ( s3 ) edge ( p3 ) ;    ( 1,1.5 )  ( 1,2)[dashed ] ;    ( 0,1 ) node[every_node ] ( s5 ) [ label = left:@xmath228 ; ( 2,1 ) node[every_node ] ( p5 ) [ label = right:@xmath229 ; ( s5 ) edge ( p5 ) ; ( 0,0 ) node[every_node ] ( s6 ) [ label = left:@xmath230 ; ( 2,0 ) node[every_node ] ( p6 ) [ label = right:@xmath231 ; ( s6 ) edge ( p6 ) ; ( s5 ) edge [ decorate ] ( p6 ) ; at ( 1,-1 ) ( a ) ;    = [ draw , circle , fill = gray , minimum size=10pt , inner sep=0.3pt ] = [ draw , circle , fill = gray , minimum size=7pt ]    at ( 1,7 ) compound type ( iii)(a ) path ;    ( 0,6 ) node[every_node ] ( s1 ) [ label = left:@xmath221 ; ( 2,6 ) node[every_node ] ( p1 ) [ label = right:@xmath222 ; ( s1 ) edge[decorate ] ( p1 ) ; ( 0,5 ) node[every_node ] ( s2 ) [ label = left:@xmath223 ; ( 2,5 ) node[every_node ] ( p2 ) [ label = right:@xmath224 ; ( s2 ) edge[decorate ] ( p2 ) ; ( s2 ) edge ( p1 ) ;    ( 1,4 ) ",
    "( 1,4.5)[dashed ] ;    ( 2,3.5 ) node[every_node ] ( p3 ) [ label = right:@xmath225 ; ( 0,3 ) node[every_node ] ( s3 ) [ label = left:@xmath226 ; ( 2,2.5 ) node[every_node ] ( p4 ) [ label = right:@xmath227 ; ( s3 ) edge[decorate ] ( p4 ) ; ( s3 ) edge ( p3 ) ;    ( 1,1.5 )  ( 1,2)[dashed ] ; at ( 1,-1 ) ( b ) ;    = [ draw , circle , fill = gray , minimum size=10pt , inner sep=0.3pt ] = [ draw , circle , fill = gray , minimum size=7pt ]    at ( 1,7 ) compound type ( iii)(b ) path ;    ( 0,6 ) node[every_node ] ( s1 ) [ label = left:@xmath221 ; ( 2,6 ) node[every_node ] ( p1 ) [ label = right:@xmath222 ; ( s1 ) edge ( p1 ) ; ( 0,5 ) node[every_node ] ( s2 ) [ label = left:@xmath223 ; ( 2,5 ) node[every_node ] ( p2 ) [ label = right:@xmath224 ; ( s2 ) edge ( p2 ) ; ( s2 ) edge[decorate ] ( p1 ) ;    ( 1,4 )  ( 1,4.5)[dashed ] ;    ( 2,3.5 ) node[every_node ] ( p3 ) [ label = right:@xmath225 ; ( 0,3 ) node[every_node ] ( s3 ) [ label = left:@xmath226 ; ( 2,2.5 ) node[every_node ] ( p4 ) [ label = right:@xmath227 ; ( s3 ) edge[decorate ] ( p3 ) ; ( s3 ) edge ( p4 ) ;    ( 1,1.5 )  ( 1,2)[dashed ] ; at ( 1,-1 ) ( c ) ;    ( 4,0 ) node ( x0 ) ; ( 5,0 ) node ( x ) [ label = right:@xmath232 ; ( x0 ) edge ( x ) ; ( 1,0 ) node ( y ) [ label = right:@xmath233 ; ( 0,0 ) node ( y0 ) ; ( y0 ) edge[decorate ] ( y ) ;    1 .",
    "a _ compound type ( ii)(a ) path _ - a compound path with an even number of edges with both end vertices being students .",
    "this path will contain a type ( iii)(a ) path at one end , and a type ( iii)(b ) path at the other end with zero or more type ( ii)(b ) paths in between ( see figure [ cp_paths](a ) ) .",
    "such a path can be eliminated from consideration .",
    "a _ compound type ( ii)(b ) path _ - a compound path with an even number of edges with both end vertices being project clones .",
    "this path will contain one or more type ( ii)(b ) paths joined together .",
    "such a path can also be eliminated from consideration as its end edges are incident to exposed project clones .",
    "a _ compound type ( iii)(a ) path _ - a compound path with an odd number of edges with both end edges being matched in @xmath163 .",
    "this path will contain a type ( iii)(a ) path at one end with zero or more type ( ii)(b ) paths joined to it ( see figure [ cp_paths](b ) ) .",
    "we will consider these paths for elimination later in this proof .",
    "a _ compound type ( iii)(b ) path _ - a compound path with an odd number of edges with both end edges being matched in @xmath201 .",
    "this path will contain a type ( iii)(b ) path at one end with zero or more type ( ii)(b ) paths joined to it ( see figure [ cp_paths](c ) ) .",
    "we will consider these paths for elimination later in this proof .    * eliminating compound paths : * at this stage we are left with only compound type ( iii)(a ) and compound type ( iii)(b ) paths in @xmath187 .",
    "these paths , if considered independently decrease and increase the size of @xmath163 by @xmath155 respectively . since @xmath234 then there are @xmath235 type ( iii)(a ) paths and @xmath236 type ( iii)(b ) paths .",
    "consider some compound type ( iii)(b ) path @xmath237 and some compound type ( iii)(a ) path @xmath238 .",
    "then we can consider the combined effect of augmenting @xmath163 or @xmath186 along @xmath239 .",
    "suppose that @xmath240 .",
    "a new matching @xmath241 in @xmath161 of cardinality @xmath137 can be created by augmenting @xmath163 along @xmath239 .",
    "since the upper quota constraints on the lecturers involved are not violated after creating @xmath241 from @xmath163 , then @xmath241 is also a valid spa matching in @xmath153 .",
    "thus @xmath242 which is a contradiction to the fact that @xmath163 is a greedy @xmath137-matching in @xmath153 . a similar contradiction ( to the fact that @xmath186 is a greedy @xmath144-matching in @xmath153 ) exists if we assume @xmath243 .",
    "thus @xmath244 .",
    "it follows that , considering @xmath237 and @xmath238 together , the size and profile of the matching is unaffected as augment from @xmath163 to @xmath186 or vice versa and so both @xmath237 and @xmath238 can be eliminated from consideration . +",
    "* generating an augmenting path in @xmath143 : * once all these eliminations have been done , since @xmath245 it is easy to see that there remains only one path @xmath110 left in @xmath187 which is a compound type ( iii)(b ) path .",
    "the path @xmath110 can then be transformed to a component @xmath179 in @xmath246 ( where @xmath246 is basically the undirected counterpart of @xmath143 without capacities ) by replacing all the project clones @xmath247 in @xmath110 with the original project @xmath49 and , for every joined pair of project clones ( @xmath248 ) , adding the lecturer @xmath249 in between them .",
    "thus a project may now appear more than once in @xmath179 .",
    "a lecturer may also appear more than once in @xmath179 .",
    "consider some project @xmath250 that appears more than once .",
    "then let @xmath251 be the path consisting of edges between the first and last occurrence of the @xmath49 clones in @xmath110 ( @xmath252 corresponds to a collection of cycles belonging to @xmath179 in @xmath246 involving @xmath49 ) .",
    "thus @xmath252 is of even length and both end projects of @xmath252 are clones of the same project . augmenting @xmath163 or @xmath186 along @xmath252 will not violate the lecturer upper quota constraints or affect the size or profile of the matching obtained ( again using the same arguments presented above ) .",
    "thus @xmath252 can be eliminated from consideration .",
    "although this potentially breaks @xmath110 into two separate paths in @xmath253 it still remains connected in @xmath246 . similarly consider some lecturer @xmath254 that appears more than once .",
    "then let @xmath255 be the path consisting of edges between the first and last occurrence of the @xmath38 clones in @xmath110 ( @xmath256 corresponds to a collection of type ( ii)(b ) paths with project clones offered by @xmath38 ) .",
    "thus augmenting @xmath163 or @xmath186 along @xmath256 will not violate the lecturer upper quota constraints or affect the size or profile of the matching obtained ( again using the same arguments presented above ) .",
    "thus @xmath256 can be eliminated from consideration . doing the above steps continually for all projects and lecturers that occur more than once in @xmath179 eventually yields a valid path in @xmath246 in which all nodes are visited only once .",
    "finally we describe how the path @xmath179 in @xmath246 , obtained after removing duplicate projects and lecturers , can be transformed to an augmenting path @xmath119 in @xmath143 ( i.e. we establish the direction of flow from @xmath94 to @xmath95 through @xmath119 in @xmath143 ) .",
    "firstly we add the edge @xmath257 to @xmath119 where @xmath31 is the exposed student in @xmath179 .",
    "next for every edge @xmath258 we add a forward edge @xmath259 to @xmath119 .",
    "also for every edge @xmath260 we add a backward edge @xmath261 to @xmath119 .",
    "finally we add the edges @xmath111 and @xmath112 to @xmath119 where @xmath262 is the end project vertex in @xmath179 .",
    "thus @xmath119 is an augmenting path with respect to @xmath150 in @xmath143 such that if @xmath131 is the flow obtained when @xmath113 is augmented along @xmath119 then @xmath145 is a greedy @xmath144-matching in @xmath143 .",
    "let @xmath113 be a flow in @xmath125 and let @xmath162 .",
    "suppose that @xmath148 is a greedy @xmath137-matching .",
    "let @xmath119 be a maximum profile augmenting path with respect to @xmath113 .",
    "let @xmath131 be the flow obtained by augmenting @xmath113 along @xmath119 .",
    "now let @xmath151 .",
    "then @xmath263 is a greedy @xmath144-matching .",
    "[ kwa2 ]    suppose for a contradiction that @xmath263 is not a greedy @xmath144-matching .",
    "by lemma [ kwa1 ] , there exists an augmenting path @xmath110 with respect to @xmath113 such that if @xmath131 is the result of augmenting @xmath113 along @xmath110 then @xmath264 is a greedy @xmath144-matching .",
    "hence @xmath265 .",
    "since @xmath266 and @xmath267 , it follows that @xmath268 , a contradiction to the assumption that @xmath119 is a maximum profile augmenting path .",
    "instance @xmath27 ; return matching @xmath1 ; define flow network @xmath89 ; define empty flow @xmath113 ; [ empty ] @xmath269 get - max - aug@xmath270 ; [ restart ] augment @xmath113 along @xmath119 ; return @xmath126 ;    the get - max - aug algorithm shown in algorithm [ get_auth ] accepts a flow network @xmath143 and flow @xmath113 as input and finds an augmenting path of maximum profile relative to @xmath113 or reports that none exists .",
    "the latter case implies that @xmath126 is already a greedy maximum matching .",
    "the method consists of three phases : an initialisation phase ( lines [ alg_init ] -[alg_init_end ] ) , the main phase which is a loop containing two other loops ( lines [ alg_main ] - [ alg_main_end ] ) and a final phase ( lines [ alg_final ] - [ alg_final_end ] ) where the augmenting path is generated and returned .",
    "for each project @xmath49 the get - max - aug method maintains a variable @xmath271 describing the profile of a partial augmenting path @xmath110 from some exposed student to @xmath49 .",
    "it also maintains , for every project @xmath33 , a pointer @xmath272 to the student or lecturer preceding @xmath49 in @xmath110 . for every lecturer @xmath35 a pointer @xmath273",
    "is also used to refer to any project preceding @xmath38 in @xmath110 .",
    "thus the final augmenting path produced will pass through each lecturer or project at most once .",
    "the initialisation phase of the method involves setting all @xmath274 pointers to * null * and @xmath275 profiles to @xmath276 .",
    "next , the method seeks to find , for each project @xmath49 , a partial augmenting path @xmath277 from the source , through an exposed student @xmath31 to @xmath49 should one exist . in the presence of multiple paths satisfying this criterion , the path with the best profile ( w.r.t .",
    "@xmath75 ) is selected .",
    "the variables @xmath272 and @xmath271 are updated accordingly .",
    "thus at the end of this phase @xmath271 indicates the maximum profile of an augmenting path of length @xmath278 via some exposed student to @xmath49 should one exist .",
    "if such a path does not exist then @xmath271 and @xmath272 remain @xmath276 and * null * respectively .    in the main phase",
    ", the algorithm then runs @xmath279 iterations , at each stage attempting to increase the quality ( w.r.t .",
    "@xmath75 ) of the augmenting paths described by the @xmath275 profiles .",
    "each iteration runs two loops .",
    "each loop identifies cases where the flow through one edge in the network can be reduced in order to allow the flow through another to be increased while improving the profile of the projects involved . in both loops ,",
    "the decision on whether to switch the flow between candidate edges is made based on an edge relaxation operation similar to that used in the bellman - ford algorithm for solving the single source shortest path problem in which edge weights may be negative . in the first loop ,",
    "we seek to evaluate the gain that may be derived from switching the flow through a student from one project to another .",
    "given an edge @xmath280 with a flow of @xmath155 in @xmath113 and edge @xmath281 with no flow in @xmath113 , we define @xmath70 to be the resulting profile of @xmath49 if the partial augmenting path ending at @xmath282 is to be extended ( via @xmath31 ) to @xmath49 .",
    "thus @xmath70 will become the new value of @xmath271 should this extension take place . if @xmath283 ( i.e. if the proposed profile is better than the current one ) , we extend the augmenting path to @xmath49 and update @xmath284 and @xmath285 .    in the second loop ,",
    "we seek to evaluate the gain that may be derived from switching flow to some lecturer from one project to another . given a lecturer @xmath38 ,",
    "let @xmath286 be the set of projects offered by @xmath38 with positive outgoing flow and @xmath287 be the set of projects offered by @xmath38 that are undersubscribed in @xmath126 .",
    "then we seek to determine if an improvement can be obtained by switching a unit of flow from some project @xmath288 to some other project @xmath289 .",
    "this is achieved by comparing the @xmath271 and @xmath290 profiles and updating @xmath291 , @xmath292 and @xmath293 if @xmath294 where @xmath290 represents the profile of a partial augmenting path that does not already pass through @xmath38 ( i.e. , @xmath295 ) .",
    "this means that the partial augmenting path ending at @xmath296 can be extended further ( via @xmath38 ) to @xmath49 while improving its profile .",
    "the intuition is that , after augmenting along such a path , @xmath296 gains an extra student while @xmath49 loses one .    during the final phase , we iterate through all exposed projects and find the one with the largest profile with respect to @xmath75 ( say @xmath297 ) .",
    "an augmenting path is then constructed through the network using the @xmath274 values of the projects and lecturers and the matched edges in @xmath126 starting from @xmath297 .",
    "the generated path is returned to the calling algorithm .",
    "if no exposed project exists , the method returns * null*. we next show that get - max - aug method produces such a maximum profile augmenting path in @xmath125 with respect to @xmath113 should one exist .",
    "flow network @xmath89 where @xmath298 , flow @xmath113 where @xmath126 is a greedy @xmath279-matching ; / * initialisation * / [ alg_init ] @xmath299 ; [ set_neg_profile ] @xmath300 ; @xmath301 ; @xmath284 ; @xmath285 ; @xmath302 ; [ alg_init_end ] / * main phase * / [ alg_main ] / * first loop * / @xmath303 ; @xmath284 ; @xmath285 ; / * second loop * / [ sec_loop ] @xmath304 ; @xmath305 ; [ extra_condition ] @xmath306 ; @xmath307 ; @xmath284 ; @xmath292 ; @xmath308 ; [ alg_main_end ]    / * final phase * / [ alg_final ] @xmath309 is exposed@xmath310 ; [ first_max ] @xmath311 arg @xmath312 is exposed@xmath310 ; [ second_max ] @xmath313 path obtained by following @xmath274 values and matched edges in @xmath126 from @xmath297 to an exposed student ; return @xmath314 + + @xmath315 + + @xmath316 ; /*++ denotes concatenation*/ return * null * ; [ alg_final_end ]    given a spa instance @xmath27 , let @xmath113 be a flow in @xmath317 where @xmath318 is not the size of a maximum matching in @xmath27 and @xmath126 is a greedy @xmath137-matching in @xmath27 .",
    "algorithm get - max - aug finds a maximum profile augmenting path in @xmath125 with respect to @xmath113 .",
    "[ kwa3 ]    consider some project @xmath49 in @xmath29 .",
    "for any @xmath319 and for any @xmath320 , we define @xmath321 to be the maximum profile of any partial augmenting path with respect to @xmath113 in @xmath125 that starts at an exposed student , ends at @xmath49 , and involves at most @xmath322 student - project edges and at most @xmath323 project - lecturer edges .",
    "we represent the length of such a path using the pair @xmath324 .",
    "thus @xmath325 gives the maximum profile of any partial augmenting path starting at an exposed student and ending at @xmath49 .",
    "if such a path does not exist then @xmath326 .",
    "firstly we seek to show that after @xmath235 iterations of the main loop of get - max - aug where @xmath327 , @xmath328 for every project @xmath33 where @xmath329 is the profile computed at @xmath49 after @xmath235 iterations of the main loop .",
    "we prove this inductively .",
    "for the base case , let @xmath330 .",
    "then @xmath331 is the maximum profile of any partial augmenting path of length @xmath332 from an exposed student to project @xmath296 .",
    "hence , from the initialisation phase of get - max - aug , @xmath333 and thus @xmath334 . for the inductive step ,",
    "assume @xmath335 and that the claim is true after the @xmath336 iteration ( i.e. @xmath337 for any @xmath338 ) .",
    "we will show that the claim is true for the @xmath339 iteration ( i.e. @xmath340 ) .",
    "for each project @xmath338 let @xmath341 and for each lecturer @xmath35 let @xmath342 .",
    "for each iteration of the main loop , we perform a relaxation step involving some student - project pair @xmath343 where @xmath344 and/or a relaxation step involving some project - lecturer pair @xmath345 where @xmath346 .",
    "consider some project @xmath296 . if there does not exist a partial augmenting path from an exposed student to @xmath296 , of length @xmath347 and with a better profile than @xmath348 , then @xmath349 .",
    "otherwise there exists a partial augmenting path from an exposed student to @xmath296 of length at least @xmath350 with a better profile than @xmath351 .",
    "such a path must contain a partial augmenting path from an exposed student to some project @xmath352 such that : @xmath353 where @xmath354 and @xmath355 .",
    "thus we note the following identity involving @xmath356 : @xmath357 let @xmath358 be the profile computed at @xmath296 after the first sub - loop during the @xmath339 iteration of the main loop of the get - max - aug algorithm ( i.e. at line [ sec_loop ] during the @xmath339 iteration ) .",
    "then @xmath359 by the induction hypothesis , @xmath360 .",
    "thus : @xmath361 therefore : @xmath362 again , if there does not exist a partial augmenting path from an exposed student to @xmath296 , of length @xmath363 and with a better profile than @xmath364 , then @xmath365 .",
    "otherwise there exists a partial augmenting path from an exposed student to @xmath296 of length @xmath366 with a better profile than @xmath356 .",
    "we can therefore note the following identity involving @xmath367 : @xmath368 after the @xmath339 iteration of the main loop has completed , we have : @xmath369 we observe that the extra condition ( @xmath295 ) in line [ extra_condition ] of the second loop , does not affect the correctness of equation [ lbl_e ] .",
    "suppose @xmath370 , then @xmath290 must have been updated during the @xmath339 iteration of the second loop ( or during a previous iteration and has remained unchanged ) by some project profile @xmath371 . thus setting @xmath291 and @xmath293 would be incorrect as @xmath372 is now the source of @xmath290 and not @xmath296 .",
    "moreover if indeed @xmath373 then @xmath372 would be encountered later on during the iteration of the second loop .",
    "@xmath374 therefore : @xmath375    but any partial augmenting path from an exposed student to @xmath49 with respect to flow @xmath113 can have length at most @xmath376 .",
    "thus @xmath377 after @xmath137 iterations of the main loop .",
    "finally we show that a partial augmenting path @xmath110 ( and subsequently a full augmenting path ) can be constructed by following the @xmath274 values of projects and lecturers and the matched edges in @xmath126 starting from some exposed project @xmath49 with the maximum @xmath271 profile , and ending at some exposed student ( i.e. we show that such a path is continuous and contains no cycle ) .",
    "suppose for a contradiction that such a path @xmath110 contained a cycle @xmath378 .",
    "then at some step @xmath172 during the execution of the algorithm , @xmath378 would have been formed when , for some project @xmath49 , either ( i ) @xmath272 was set to some student @xmath31 or ( ii ) @xmath272 was set to some lecturer @xmath38 .",
    "let @xmath252 be any path in @xmath143 .",
    "we may extend our definitions for the profile of a matching and a partial augmenting path to cover the profile of any path in @xmath143 as follows : @xmath379    considering case ( i ) let @xmath380 . also let @xmath381 and @xmath271 be the profiles of partial augmenting paths from some exposed student to @xmath49 before and after step @xmath172 respectively .",
    ". also @xmath383 , i.e. , @xmath384 where @xmath385 .",
    "since we can also trace a path through all the other projects in @xmath378 ( using @xmath274 values and matched edges ) from @xmath296 to @xmath49 , it follows that @xmath386 .",
    "thus @xmath387 .",
    "note that @xmath388 and @xmath389 is the set of edges in @xmath378 involving only students and projects .",
    "as @xmath382 , it follows that @xmath390 .",
    "but since @xmath391 , and lecturer capacities are clearly not violated by the algorithm , a new matching @xmath392 can be generated such that @xmath140 and @xmath393 , a contradiction to the fact that @xmath1 is a greedy @xmath279-matching in @xmath27 .",
    "considering case ( ii ) let @xmath394 . as before let @xmath381 and @xmath271 be the profiles of partial augmenting paths from some exposed student to @xmath49 before and after step @xmath172 respectively .",
    "then @xmath382 . also @xmath291 .",
    "since we can also trace a path through all the other projects in @xmath378 ( using @xmath274 values and matched edges ) from @xmath296 to @xmath49 , it follows that @xmath395 .",
    "thus @xmath387 .",
    "note that @xmath388 and @xmath389 is the set of edges in @xmath378 involving only students and projects .",
    "as @xmath382 , it follows that @xmath390 . a similar argument to the one presented above shows a contradiction to the fact that @xmath1 is a greedy @xmath279-matching in @xmath27 .",
    "from lemmas [ kwa1 ] , [ kwa2 ] and [ kwa3 ] , we can conclude that the algorithm greedy - max - spa finds a greedy maximum matching given a spa instance . concerning the complexity of the algorithm , the main loop calls get - max - aug @xmath146 times where @xmath146 is the size of a maximum cardinality matching in @xmath27 .",
    "the first phase of get - max - aug performs @xmath396 profile comparison operations and @xmath397 initialisation steps for the lecturer @xmath274 values where @xmath398 , @xmath399 , and each profile comparison step requires @xmath25 time .",
    "the loop in the main phase of get - max - aug runs @xmath137 times where @xmath137 is the value of the flow obtained at that time .",
    "the first and second loops perform @xmath396 and @xmath400 relaxation steps respectively where @xmath401 and each relaxation step requires @xmath25 time to compare profiles . the final phase of the algorithm performs @xmath400 profile comparisons , each also taking @xmath25 time .",
    "thus the overall time complexity of the get - max - aug method is @xmath402 .",
    "thus the overall time complexity of the greedy - max - spa algorithm is @xmath26 .",
    "when considering the additional factor of @xmath25 due to arithmetic on edge weights of @xmath24 size , orlin s algorithm runs in @xmath403 time .",
    "suppose @xmath404 .",
    "then orlin s algorithm runs in @xmath405 time .",
    "if the first term of orlin s runtime is larger than the second then our algorithm is slower by a factor of @xmath406 as @xmath407 .",
    "if the second term of orlin s runtime is larger than the first then our algorithm is slower by a factor of @xmath408 .",
    "now suppose @xmath409 .",
    "then orlin s algorithm runs in @xmath410 time .",
    "if the first term of orlin s runtime is larger than the second then our algorithm is slower by a factor of @xmath411 as @xmath407 and @xmath409 .",
    "if the second term of orlin s runtime is larger than the first then our algorithm is slower by a factor of @xmath412 as @xmath409 .",
    "so our algorithm is slower than orlin s by a factor of @xmath413 in all cases .",
    "a straightforward refinement of our algorithm can be made by observing that if no profile is updated during an iteration of the main loop , then no further profile improvements can be made and we can terminate the main loop at this point .",
    "we conclude with the following theorem .",
    "[ lec ] given a spa instance @xmath27 , a greedy maximum matching in @xmath27 can be obtained in @xmath26 time .",
    "analogous to the case for greedy maximum matchings , generous maximum matchings can also be found by modelling spa as a network flow problem . given a spa instance @xmath27 we define the following terms relating to partial augmenting paths in @xmath143 .",
    "for each project @xmath33 , we define the _ minimum profile of a partial augmenting path _ from @xmath94 through an exposed student to @xmath49 with respect to @xmath83 , denoted @xmath414 , as follows : @xmath415 if a partial augmenting path @xmath110 ending at project @xmath49 can be extended to an augmenting path @xmath119 by adding edges @xmath111 and @xmath112 then such an augmenting path is called a _ minimum profile augmenting path _ if @xmath416 . a similar approach to that used to find a greedy maximum matching",
    "can be adopted in order to find a generous maximum matching .",
    "the main greedy - max - spa algorithm will remain unchanged ( we will call it generous - max - spa for convenience ) as the intuition remains to successively find larger generous @xmath137-matchings until a generous maximum matching is obtained .",
    "we however make slight changes to the get - max - aug algorithm in order to find a minimum profile augmenting path in the network should one exist ( the resulting algorithm is then known as get - min - aug ) .",
    "the changes are as follows .",
    "( i ) we replace all occurrences of left domination @xmath75 with right domination @xmath83 .",
    "( ii ) we also replace all occurrences of negative infinity profile @xmath276 with a positive infinity profile @xmath417 .",
    "( iii ) finally we replace both @xmath418 functions ( in lines [ first_max ] and [ second_max ] ) with the @xmath419 function .",
    "analogous statements and proofs of lemmas [ kwa1 ] , [ kwa2 ] and [ kwa3 ] exist in this context .",
    "thus we may conclude with the following theorem concerning the generous - max - spa algorithm .",
    "[ lec2 ] given a spa instance @xmath27 , a generous maximum matching in @xmath27 can be obtained in @xmath26 time .",
    "in spa problems it is often required that the workload of supervising student projects is evenly spread across the lecturing staff ( i.e. , that project allocations are _ load - balanced _ with respect to lecturers ) .",
    "this is important because any project allocation should be seen by lecturers to be fair .",
    "moreover a lecturer s workload may have an effect on her performance in other academic and administrative duties .",
    "one way of achieving some notion of load - balancing with respect to lecturers is to introduce lower quotas .",
    "a lower quota on lecturer @xmath38 is the minimum number of students that must be assigned to @xmath38 in any feasible solution .",
    "we call this extension the _ student / project allocation problem with lecturer lower quotas ( spa - l)_. in an instance @xmath27 of spa - l , each lecturer @xmath38 has an upper quota @xmath420 and now additionally has a lower quota @xmath421 ( it will be helpful to indicate specific instances to which these lower quotas refer within the notation ) .",
    "we assume that @xmath422 and @xmath423 . in the spa - l context",
    ", our definition of a matching as presented in section [ spa_defs ] needs to be tightened slightly .",
    "a _ constrained matching _ is a matching @xmath1 in the spa context with the additional property that , for each lecturer @xmath38 , @xmath424 .",
    "a _ constrained maximum matching _ is a maximum matching taken over the set of constrained matchings in @xmath27 .",
    "suppose that @xmath425 is the sum of the lecturer lower quotas in @xmath27 ( i.e. @xmath426 ) and @xmath146 is the size of a maximum matching in @xmath27 is equal to the size of a maximum constrained matching in proposition [ eta_constrained ] ] .",
    "for some @xmath137 in @xmath427 ) , let @xmath428 denote the set of constrained matchings of size @xmath137 in @xmath27 .",
    "a matching @xmath429 is a _ constrained greedy @xmath137-matching _ if @xmath1 has lexicographically maximum profile , taken over all matchings in @xmath430 .",
    "an analogous definition for a _ constrained generous @xmath137-matching _ can be made .    due to the introduction of these lecturer lower quotas , instances of spa - l",
    "are not guaranteed to admit a feasible solution .",
    "thus given an instance @xmath27 of spa - l , we seek to find a constrained greedy or a constrained generous maximum matching should one exist .",
    "we therefore present results analogous to lemmas [ kwa1 ] , [ kwa2 ] and [ kwa3 ] .",
    "firstly however , we make the following observations .",
    "[ eta_constrained ] given an spa - l instance @xmath27 , the size of a constrained maximum matching ( should one exist ) in @xmath27 is equal to the size of a maximum matching in the underlying spa instance in @xmath27 .",
    "assume @xmath27 admits a constrained matching .",
    "then , by dropping the upper quota of each lecturer @xmath220 from @xmath431 to @xmath432 , and finding a saturating flow in the network obtained from the resulting instance , we can obtain a matching @xmath148 of size @xmath137 where @xmath433 . by returning the lecturer upper quotas to their original values and then successively finding and satisfying standard augmenting paths ( starting from @xmath175 )",
    "we are bound to obtain a constrained maximum matching as lecturers do not lose any assigned students in the process .",
    "the absence of an augmenting path relative to the final flow is proof that the flow ( and resulting constrained matching ) is maximum .",
    "@xmath434 @xmath435 , @xmath436 and @xmath437 + @xmath438 and @xmath439    we also observe that a constrained greedy @xmath137-matching @xmath148 in @xmath27 need not be a greedy @xmath137-matching in @xmath27 .",
    "that is , there may exist a matching @xmath440 of size @xmath137 in @xmath27 such that @xmath440 violates some of its lecturer lower quotas ( i.e. @xmath440 is not a constrained matching ) and @xmath441 .",
    "figure [ spal_instance ] shows a spa - l instance whose unique constrained greedy maximum matching is @xmath442 and a greedy maximum matching @xmath443 such that @xmath140 .",
    "however it is sufficient to show that , starting from @xmath148 , we can successively identify and augment ( w.r.t . the incumbent flow ) maximum profile augmenting paths in @xmath143 until a constrained greedy maximum matching is found . next we show that such augmenting paths exist .",
    "let @xmath27 be an instance of spa - l and let @xmath146 denote the size of a constrained maximum matching in @xmath27 .",
    "let @xmath147 be given and suppose that @xmath148 is a constrained greedy @xmath137-matching in @xmath27 .",
    "let @xmath149 and @xmath150 .",
    "then there exists an augmenting path @xmath119 with respect to @xmath113 in @xmath125 such that if @xmath131 is the result of augmenting @xmath113 along @xmath119 then @xmath151 is a constrained greedy @xmath144-matching in @xmath27 .",
    "[ greedy - l1 ]    the proof is analogous to that presented for lemma [ kwa1 ] .",
    "we show that considering constrained matchings does not affect most of the arguments presented in the proof of lemma [ kwa1 ] .",
    "we will deal with the cases where considering constrained matchings may affect the arguments presented in the proof of lemma [ kwa1 ] .",
    "firstly we observe that after cloning the projects in @xmath27 to form a spa - l instance @xmath152 , the process of converting matchings in @xmath27 to @xmath153 and vice versa is unaffected when the matchings considered are constrained .",
    "thus since @xmath148 is a constrained greedy @xmath137-matching in @xmath27 , @xmath163 is a constrained greedy @xmath137-matching in @xmath153 .",
    "let @xmath444 be a constrained greedy @xmath144-matching in @xmath27 ( this exists because @xmath169 ) .",
    "then @xmath445 is a constrained greedy @xmath144-matching in @xmath153 .",
    "let @xmath446 .",
    "then each connected component of @xmath172 is either ( i ) an alternating cycle , ( ii)(a ) an even - length alternating path whose end vertices are students , ( ii)(b ) an even - length alternating path whose end vertices are projects , ( iii)(a ) an odd - length alternating path whose end edges are in @xmath163 or ( iii)(b ) an odd - length alternating path whose end edges are in @xmath445 . we firstly show that the procedures used to `` join '' and `` eliminate '' these connected components in lemma [ kwa1 ] are unaffected when @xmath163 and @xmath445 are constrained matchings .",
    "the even - length components that we firstly consider are :    1 .   type ( i ) and type ( ii)(a ) alternating paths . 2 .",
    "compound type ( ii)(a ) paths .    when considering the elimination of these even - length components ( or compound paths ) , the requirement that the upper quotas of the lecturers involved must not be violated still holds even if the matchings considered are constrained .",
    "moreover the number of students assigned to each lecturer never drops when considering the elimination of these even - length components ( or compound paths ) .",
    "let @xmath201 be the constrained greedy @xmath144-matching obtained from augmenting @xmath445 along all these even - length paths .",
    "then @xmath447 consists of a set of compound type(ii)(b ) paths , compound type ( iii)(a ) and compound type ( iii)(b ) paths .",
    "these paths , if considered independently , may lead to some lecturer losing an assigned student when they are used to augment @xmath163 or @xmath201 .",
    "thus the elimination argument , as presented in the proof of lemma [ kwa1 ] , does not hold .",
    "we modify this argument slightly as follows in the case of constrained matchings .",
    "we firstly observe that @xmath163 and @xmath201 are constrained matchings . thus augmenting @xmath163 or @xmath201 along",
    "@xmath187 leads to a constrained matching .",
    "when all the elements in @xmath187 are considered together , no lecturer violates her lower quota .",
    "if some lecturer loses a student due to some component of @xmath187 and drops below her lower quota , the she must gain an extra student due to another component in @xmath187 .",
    "but since @xmath448 there are @xmath235 compound type ( iii)(a ) paths and @xmath236 compound type ( iii)(b ) paths in @xmath187 for some integer @xmath235 .",
    "compound type ( ii)(b ) components do not affect the size of the matchings .",
    "we claim that there exists some compound type ( iii)(b ) path @xmath110 in @xmath187 such that when considering all the other components in @xmath187 ( i.e. @xmath449 ) , lecturer upper and lower quotas are not violated and the size of the matchings are unchanged .",
    "thus the elimination arguments presented in the proof of lemma [ kwa1 ] can be applied to @xmath449 .",
    "@xmath110 can be extended to end with edge @xmath450 such that @xmath451 . if @xmath452 is the constrained greedy @xmath144-matching obtained from augmenting @xmath201 along @xmath449 , then @xmath453 . if such a path @xmath110 does not exist then @xmath454 for all @xmath455 , a contradiction .    the rest of the proof for lemma [ kwa1 ] , involving the generation of an augmenting path , follows through .",
    "let @xmath113 be a flow in @xmath125 and let @xmath162 .",
    "suppose that @xmath148 is a constrained greedy @xmath137-matching .",
    "let @xmath119 be a maximum profile augmenting path with respect to @xmath113 .",
    "let @xmath131 be the flow obtained by augmenting @xmath113 along @xmath119 .",
    "now let @xmath151 .",
    "then @xmath263 is a constrained greedy @xmath144-matching .",
    "[ greedy - l2 ]    the proof for lemma [ kwa2 ] holds even if @xmath126 and @xmath145 are constrained matchings as the number of students assigned to a lecturer never reduces as we augment @xmath113 along @xmath119 .",
    "given an spa - l instance @xmath27 , let @xmath113 be a flow in @xmath143 where @xmath318 is not the size of a constrained maximum matching in @xmath27 and @xmath126 is a constrained greedy @xmath137-matching in @xmath27 .",
    "algorithm get - max - aug finds a maximum profile augmenting path in @xmath143 with respect to @xmath113 .",
    "[ greedy - l3 ]    we observe that the proof presented for lemma [ kwa3 ] also holds in this case even if @xmath126 is a constrained greedy @xmath137-matching .",
    "the first part of the proof shows that after @xmath235 iterations of the main loop of get - max - aug where @xmath327 , @xmath456 for every project @xmath33 where @xmath457 is the maximum profile of any partial augmenting path of length @xmath458 from an exposed student to @xmath49 . by inspection",
    ", we observe that this argument remains unchanged even if @xmath126 is a constrained matching in @xmath27 .",
    "the second part of the proof shows that a partial augmenting path @xmath110 ( and subsequently a full augmenting path ) can be constructed by following the @xmath274 values of projects and lecturers and the matched edges in @xmath126 starting from some exposed project @xmath49 with the maximum @xmath271 profile going through some exposed student and ending at the source @xmath94 .",
    "that is , we show that such a path is continuous and contains no cycle .",
    "we prove this by demonstrating that , should a cycle @xmath378 exist , then augmenting @xmath113 along @xmath378 would yield a flow of the same size @xmath131 such that @xmath459 which is a contradiction to the fact that @xmath126 is a greedy @xmath460matching .",
    "this result also holds in the case where @xmath126 is a constrained matching as any cycle found will not cause a lecturer to lose any assigned students and so the above arguments can still be made .",
    "spa - l instance @xmath27 ; return a matching @xmath1 if one exists or * null * otherwise ; copy @xmath27 to from new instance @xmath153 ; set @xmath461 ; set @xmath462 ; \\{@xmath153 becomes a spa instance } @xmath463 greedy - max - spa(@xmath153 ) ; [ saturated_flow ] copy @xmath464 in @xmath174 into @xmath113 in @xmath143 ; @xmath269 get - max - aug@xmath270 ; [ saturated_flow2 ] augment @xmath113 along @xmath119 ; return @xmath126 ; return * null * ;    given lemmas [ greedy - l1 ] , [ greedy - l2 ] and [ greedy - l3 ] , the greedy - max - spa algorithm can be employed as part of an algorithm to find a constrained greedy maximum matching in a spa - l instance should one exist . this new algorithm ( which we call greedy - max - spa - l )",
    "is presented in algorithm [ gen - spa - l ] .",
    "the algorithm takes an spa - l instance @xmath27 as input and returns a constrained greedy maximum matching @xmath1 , should one exist , or * null * otherwise . a spa instance @xmath153",
    "is constructed from @xmath27 by setting @xmath462 and @xmath461 for each lecturer @xmath38 .",
    "next we find a greedy maximum matching @xmath138 in @xmath153 using the greedy - max - spa algorithm . if @xmath465 is not a saturating flow ( i.e. , one in which all edges @xmath109 are saturated ) , then @xmath27 admits no constrained matching and we return * null*. otherwise we augment flow @xmath113 in @xmath143 by calling the get - max - aug algorithm , where @xmath113 is the flow in @xmath143 obtained from cloning @xmath131 in @xmath174 .",
    "we continuously augment the flow until no augmenting path exists .",
    "the matching @xmath466 obtained from the resulting flow @xmath113 is a greedy maximum constrained matching in @xmath27 . constrained generous maximum matchings",
    "can also be found in a similar way .",
    "we conclude with the following theorem .    given a spa - l instance @xmath27 ,",
    "a constrained greedy maximum matching and a constrained generous maximum matching in @xmath27 can be obtained , should one exist , in @xmath26 time .",
    "firstly we show that the matching @xmath138 obtained in line [ saturated_flow ] of the greedy - max - spa - l algorithm is a constrained greedy @xmath279-matching in @xmath27 .",
    "suppose otherwise and some other constrained matching @xmath467 of the same size exists in @xmath27 such that @xmath468 .",
    "then since @xmath469 , every lecturer has exactly the same number of assigned students in @xmath138 and @xmath467 so @xmath467 is a valid matching in @xmath153 .",
    "this contradicts the fact that @xmath138 is a greedy maximum matching in @xmath153",
    ".    lemmas [ greedy - l1 ] , [ greedy - l2 ] and [ greedy - l3 ] prove that once we obtain a constrained greedy @xmath279-matching in @xmath27 ( should one exist ) , the rest of the algorithm finds a maximum constrained greedy maximum matching in @xmath27 .    for finding a constrained generous maximum matching we simply replace the call to greedymaxspa in line [ saturated_flow ] and the call to get - max - aug in line [ saturated_flow2 ] of the greedy - max - spa - l algorithm with a call to the generous - max - spa and the get - min - aug algorithms respectively as described in section [ generous ] .",
    "the greedy - max - spa and generous - max - spa algorithms were implemented in java and evaluated empirically . in this section ,",
    "we present results from empirical evaluations carried out on the algorithm implementations using both real - world and randomly - generated data .",
    "results from the implemented algorithms were compared with those produced by an ip model of spa in order to improve our confidence in the correctness of both implementations .",
    "we also investigate the feasibility issues that will be faced if a min - cost - max - flow ( mcmf ) approach ( as suggested in @xcite ) is to be used when solving instances of spa involving large numbers of students and projects or were students have long preference lists .",
    "other experiments carried out involve varying certain properties of the randomly - generated spa instances while measuring the runtime of the algorithms and the size , degree and cost of the matchings produced .",
    "an instance generator was used to construct random spa instances which served as input for the algorithm implementations .",
    "this generator can be configured to vary certain properties of the spa instances produced as follows :    1 .",
    "the number of students @xmath15 ( with a default value of @xmath470 ) .",
    "the number of projects and lecturers are set to @xmath471 and @xmath472 respectively .",
    "2 .   the minimum @xmath473 and maximum @xmath474 length of any student s preference list ( with default values @xmath475 ) .",
    "3 .   the popularity @xmath476 of the projects , as measured by the ratio between the number of students applying for one of the most popular projects and the number of students applying for one of the least popular projects ( default value of @xmath477 ) .",
    "4 .   the total capacity of the projects @xmath478 and lecturers @xmath479 .",
    "these capacities were not divided evenly amongst the projects and lecturers involved ( default values are @xmath480 and @xmath481 ) . 5 .   the tie density @xmath482 of the students preference list .",
    "this is the probability that some project is tied with the one preceding it on some student s preference list ( default value is @xmath483 ) .",
    ".   the total project and lecturer lower quotas @xmath484 and @xmath485 respectively .",
    "these lower quotas were divided evenly amongst the projects and lecturers involved ( default values are @xmath486 ) .",
    "we also created spa instances from anonymised data obtained from previous runs of the student - project allocation scheme at the school of computing science , university of glasgow and solved them using the implemented algorithms .",
    "we measured the runtime taken by the algorithms as well as the size , cost and degree of the matchings obtained .",
    "experiments were carried out on a windows machine with 4 intel(r ) core(r ) i5 - 2400 cpus at 3.1ghz and 8 gb ram .    in the following subsections we present results obtained from the empirical evaluations carried out . in section [ spa1_correctness ]",
    "we present the results of correctness tests carried out by comparing results obtained from ip models of spa and implemented algorithms . in section [ spa_feas ] we demonstrate when the mcmf approach becomes infeasible in practice . in section [ real_data ]",
    "we present results from running the algorithms against real - world spa instances . in section [ spa_random ]",
    "we vary certain properties of randomly generated spa instances while measuring the runtime of the algorithms and the size , degree and cost of the matchings produced .",
    "we make some concluding remarks in section [ emp_conclusions ] .",
    "although the greedy - max - spa and generous - max - spa algorithms have been proven to be correct ( see theorems [ lec ] and [ lec2 ] ) , bugs may still exist in the implementations . in order to improve our confidence in any empirical results obtained as part of an experimental evaluation of the algorithms performance",
    ", we compared results from the implemented algorithms with those obtained from ip models of spa . for each value of @xmath15 in the range @xmath487 ,",
    "@xmath488 random spa instances were generated and solved using both methods .",
    "for each spa instance generated , @xmath475 ( henceforth we refer to @xmath489 as @xmath4 ) .",
    "the profiles of the resulting matchings were then compared and observed to be identical for all the instances generated .",
    "the resulting matchings were also tested to ensure they obeyed all the upper quota constraints for lecturers and projects .",
    "these correctness tests show that our implementations are likely to be correct .",
    "we implemented an algorithm for finding a minimum cost maximum flow in a given network .",
    "as stated in @xcite , by the appropriate assignment of edge costs / weights in the underlying network @xmath143 of a spa instance @xmath27 , a minimum cost maximum flow algorithm can be used to find greedy and generous maximum matchings in @xmath27 .",
    "we argued that this approach ( as described in @xcite ) would be infeasible due to the floating - point inaccuracies caused by the assignment of exponentially large edge costs / weights in the network . in this section",
    "we investigate this claim experimentally and demonstrate the feasibility issues that arise when using various java data types to represent these edge weights .",
    "firstly we describe the cost functions required by a minimum cost maximum flow algorithm to find greedy and generous maximum matchings . for finding greedy maximum matchings we set the cost of an edge between a student @xmath31 and a project @xmath49 as @xmath490 where @xmath491 . for finding generous maximum matchings we set the cost of an edge between a student @xmath31 and a project @xmath49 as @xmath492 where @xmath491 .",
    "the cost for all other edges in the network are set to @xmath39 .    for the mcmf approach ,",
    "we define an instance as infeasible if the matching produced is not optimal with respect to the greedy or generous criteria ( when compared with optimal results produced by the greedy - max - spa and generous - max - spa algorithms and cplex ) .",
    "we also consider an instance infeasible if the jvm runs out of memory when using the mcmf algorithm but does not when using the greedy - max - spa and generous - max - spa algorithms .",
    "figure [ mcmf - feasibility ] shows the feasibility results using three java data types . for each value of @xmath15 ( number of students ) in the range @xmath493 and for each value of @xmath4 ( length of each student",
    "s preference list ) in the range @xmath494 , we generated @xmath495 random spa instances and solved them using the mcmf approach and the greedy - max - spa algorithm .",
    "the graph shows the value of @xmath4 at which infeasible solutions were first encountered . as expected , this number drops as we increase the instance size . due to their greater precision that the long and double data types ( when compared with int )",
    ", we see that they handle much larger instances before encountering infeasibility issues .",
    "all instances tested for @xmath496 when using long and @xmath497 when using double produced optimal matchings .",
    "this is probably because we do not yet encounter range errors ( in the case of long ) and precision errors ( in the case of double ) when solving these instances .",
    "the relatively low values of @xmath4 and @xmath15 observed where infeasibility prevails ( e.g. , @xmath498 for the int type ) reinforces our argument that approaches based on mcmf which employ these exponentially large edge weights are not scalable .",
    "spa instances derived from anonymised data obtained from previous runs of the student - project allocation scheme at the school of computing science , university of glasgow were created and solved using the greedy - max - spa algorithm .",
    "this section discusses some of the results obtained .",
    "table [ dcs - spa - ins ] shows the properties of the generated spa instances ( with lecturer capacities not being considered in the @xmath499 and @xmath500 sessions ) and table [ dcs - spa - res ] shows details of various profile - based optimal matchings found .",
    ".real - world spa instances [ cols=\"<,<,<,<,<,<,<\",options=\"header \" , ]     with greedy maximum matchings we increase the percentage of students that are _ happy _ with their assigned projects ( i.e. , obtain their first choice ) .",
    "a rough estimate of how much better a greedy maximum matching is compared with other profile - based optimal matchings is the difference in the number of first - choice projects .",
    "table [ tbl_vary_pref_3 ] shows that the percentage of students with their first - choice project is higher when compared with minimum cost maximum matchings ( by @xmath501 ) and significantly higher when compared with greedy maximum matchings ( by @xmath502 ) .",
    "however this is achieved at the risk of also increasing the percentage of students who are _ disappointed _ with their assigned projects ( we say a student @xmath31 is disappointed with @xmath503 if @xmath504 ) .    with generous maximum matchings we reduce the percentage of disappointed students .",
    "a rough estimate of how much better off a student is in a generous maximum matching compared with a greedy maximum matching , is the difference in the _ degree _ of the matchings .",
    "table [ tbl_vary_pref_3 ] shows a significant improvement in the degree as we move from greedy maximum matchings ( with some matchings having a degree of @xmath505 ) and generous maximum matchings ( with all matchings having a degree @xmath506 ) .",
    "although this is usually a very attractive property , this is achieved without considering the percentage of students who are happy with their assignments .",
    "interestingly the generous criterion will continue to attempt to minimise the number of students matched to their @xmath12th choice project even as @xmath12 tends to @xmath155 .",
    "this motivates a hybrid version of profile - based optimality where we initially adopt the generous criterion and , at some point ( say for @xmath0th choice projects where @xmath507 ) , switch to the greedy criterion .",
    "often the profile of a minimum cost maximum matching lies `` in between '' the two extremes given by a greedy maximum and generous maximum matching .",
    "this can be seen in terms of both the percentage of students with first - choice projects and the degree of the matchings . in terms of the percentage of students with first - choice projects ,",
    "the results show that minimum cost maximum matchings lie almost halfway between greedy and generous maximum matching percentages . in terms of the degree of the matchings , it seems that minimum cost maximum matchings are a lot closer to generous than greedy maximum matchings .",
    "this is usually seen as a desirable property .",
    "in this paper we investigates the student / project allocation problem in the context of profile - based optimality . we showed how greedy and generous maximum matchings can be found efficiently using network flow techniques .",
    "we also presented a range of empirical results obtained from evaluating these efficient algorithms .",
    "an obvious question to ask at this stage relates to which other extensions of spa of practical relevance or theoretical significance can be investigated .",
    "these include :    1 .",
    "can we improve on the @xmath26 algorithm for finding greedy and generous maximum matchings in spa ?",
    "one approach would be to determine whether there are faster ways of finding maximum profile augmenting paths in the underlying network than that presented in algorithm [ get_auth ] .",
    "another approach may be perhaps to abandon the network flow method and consider adopting other techniques used for solving similar problems in the chat context @xcite .",
    "the notion of _ pareto optimality _ has been well studied in the ha context @xcite .",
    "it is easy to see that the profile - based optimality criteria defined here imply pareto optimality .",
    "however studying pareto optimality in its own right is of theoretical interest . since pareto",
    "optimal matchings in chat can be of varying sizes , this extends to spa . given a spa instance",
    "we may seek to find a maximum pareto optimal matching in time faster than @xmath26 .",
    "d.  j. abraham , k.  cechlrov , d.  f. manlove , and k.  mehlhorn .",
    "pareto optimality in house allocation problems . in _ proceedings of isaac 2004 : the 15th annual international symposium on algorithms and computation _ , volume 3341 of _ lecture notes in computer science _ ,",
    "pages 315 .",
    "springer , 2004 .",
    "a.  h. abu el - atta and m.  i. moussa .",
    "student project allocation with preference lists over ( student , project ) pairs . in _ proceedings of iccee 09 : the second international conference on computer and electrical engineering _ , pages 375379 .",
    "ieee , 2009 .      j.  dye . a constraint logic programming approach to the stable marriage problem and its application to student - project allocation .",
    "bsc honours project dissertation , university of york , department of computer science , 2001 .",
    "huang , t.  kavitha , k.  mehlhorn , and d.  michail .",
    "fair matchings and related problems . in _ proceedings of fsttcs 2013 : the 33rd international conference on foundations of software technology and theoretical computer science _ , volume  24 , pages 339350 .",
    "schloss dagstuhl  leibniz - zentrum fuer informatik , 2013 .",
    "g.  han l.  pan , s. c.  chu and j.  z. huang .",
    "multi - criteria student project allocation : a case study of goal programming formulation with dss implementation . in _ proceedings of isora 2009 : the eighth international symposium on operations research and its applications , zhangjiajie , china _ ,",
    "pages 7582 , 2009 ."
  ],
  "abstract_text": [
    "<S> in the _ student / project allocation problem ( spa ) _ we seek to assign students to individual or group projects offered by lecturers . </S>",
    "<S> students provide a list of projects they find acceptable in order of preference . </S>",
    "<S> each student can be assigned to at most one project and there are constraints on the maximum number of students that can be assigned to each project and lecturer . </S>",
    "<S> we seek matchings of students to projects that are optimal with respect to _ profile _ , which is a vector whose @xmath0th component indicates how many students have their @xmath0th - choice project . </S>",
    "<S> we present an efficient algorithm for finding a _ greedy maximum matching _ in the spa context  this is a maximum matching whose profile is lexicographically maximum . </S>",
    "<S> we then show how to adapt this algorithm to find a _ </S>",
    "<S> generous maximum matching _  this is a matching whose reverse profile is lexicographically minimum . </S>",
    "<S> our algorithms involve finding optimal flows in networks . </S>",
    "<S> we demonstrate how this approach can allow for additional constraints , such as lecturer lower quotas , to be handled flexibly . </S>",
    "<S> finally we present results obtained from an empirical evaluation of the algorithms .    </S>",
    "<S> * keywords : * greedy maximum matching ; generous maximum matching ; matching profile ; augmenting path    [ ch_spa1 ] </S>"
  ]
}