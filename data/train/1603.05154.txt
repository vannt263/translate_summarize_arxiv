{
  "article_text": [
    "discrete fourier transform ( dft ) is a commonly used and vitally important function for a vast variety of applications including , but not limited to digital communication systems , image processing , and biomedical imaging .",
    "fourier image analysis simplifies computations by converting complex convolution operations in the spatial domain to simple multiplications in the frequency domain . due to their computational complexity",
    ", dfts often become a computational constraint for applications requiring high throughput and near real - time operations .",
    "the cooley - tukey fast fourier transform ( fft ) algorithm [ 1 ] , first proposed in 1965 , reduces the complexity of dfts from @xmath2 to @xmath3 for a 1d dft .",
    "however , in the case of 2d dfts , 1d ffts have to be computed in two - dimensions , increasing the complexity to @xmath4 , thereby making 2d dfts a significant bottleneck for real - time machine vision applications [ 2 ] .",
    "there are several resource - efficient , high - throughput implementations of 2d dfts .",
    "most fpga based 2d fft implementations rely upon repeated invocations of 1d ffts by row and column decomposition ( rcd ) with efficient use of external memory [ 2][3][4 ] .",
    "many of these achieve real - time or near real - time performance ( @xmath023 frames per second for a standard @xmath5 image ) .",
    "while calculating 2d dfts it is assumed that the image is periodic , which is usually not the case .",
    "the non - periodic nature of the image leads to artifacts in the fourier transform , usually known as edge artifacts or series termination errors .",
    "these artifacts appear as several crosses of high - amplitude coefficients in the frequency domain , as seen in [ 6 ] .",
    "such edge artifacts can be passed to subsequent stages of processing and in biomedical applications they may lead to critical misinterpretations of results .",
    "no current 2d fft fpga implementation addresses this problem directly .",
    "these artifacts may be removed during pre - processing , using mirroring , windowing , zero padding or post - processing , e.g. , filtering techniques ; however , these techniques are usually computationally intensive and often tend to modify the transform .",
    "the most common approach is by ramping the image at corner pixels to slowly attenuate the edges .",
    "ramping is usually accomplished by an apodization function such as a tukey ( tapered cosine ) or a hamming window , which smoothly reduces the intensity to zero .",
    "such an approach can be implemented on an fpga as a pre - processing operation by storing the window function in a look - up table ( lut ) and multiplying it with the image stream before calculating the fft [ 5 ] .",
    "although , this approach is not extremely computationally intensive for small images , it inadvertently removes necessary information from the image .",
    "loss of this information may have serious consequences if the image is being further processed with several other images to reconstruct a final image that is used for diagnostics or other decision - critical applications .",
    "another common method is by mirroring the image from @xmath6 to @xmath7 .",
    "doing so makes the image periodic , thereby removing edge artifacts .",
    "however , this not only increases the size of the image by 4x , but also makes the transform symmetric , which generates an inaccurate phase component .",
    "most rcd - based 2d fft fpga implementations have two major design challenges : 1 ) the 1d fft implementation needs to have a reasonably high - throughput and needs to be resource efficient .",
    "2 ) external dram needs to be efficiently addressed and have a high - bandwidth because images are usually large and intermediate storage is required between row and column 1d fft operations .    periodic plus smooth decomposition ( psd )",
    "[ 6 ] , described in section ii , provides an efficient solution for edge artifact removal from 2d dfts with minimal amputation of useful information from the image . in section iii , we describe an optimization of psd for fpga implementation , which reduces the number of 1d fft invocations and requires less frequent access to external dram . in section",
    "iv we further describe the hardware set - up and propose an architecture for optimized psd and suggest means for generalizing it .",
    "section v presents experimental results and conclusions .",
    "periodic plus smooth decomposition ( psd ) involves decomposing the image into a periodic and smooth component .",
    "the smooth component is calculated from the boundary of the image and is then subtracted from the image to derive the periodic component [ 6 ] .",
    "let us have discrete @xmath8 by @xmath9 gray - scale image @xmath10 on a finite domain @xmath11 .",
    "the discrete fourier transform ( dft ) of @xmath10 is defined as    @xmath12 this is equivalent to a matrix multiplication @xmath13 , where @xmath14 and @xmath15 @xmath16 has the same structure as @xmath17 but is m - dimensional . since @xmath18 has period @xmath8 which means that @xmath19 and therefore , @xmath20 since in general @xmath10 is not @xmath21-periodic , there will be high amplitude edge artifacts present in the dft stemming from sharp discontinuities between the opposing edges of the image as shown in figure 1b .",
    "moisan [ 6 ] proposed a decomposition of @xmath22 into a periodic component @xmath23 , that is periodic and captures the essence of the image with all high frequency details , and a smoothly varying background @xmath24 , that recreates the discontinuities at the borders .",
    "so , @xmath25 .",
    "periodic plus smooth decomposition can be computed by first constructing a border image @xmath26 , where @xmath27 represents the boundary discontinuities when transitioning row - wise and @xmath28 when going column - wise @xmath29 it is obvious that the structure of the border image @xmath30 is simple with nonzero values only in the edges as shown below : @xmath31 the dft of the smooth component @xmath24 can be then found by the following formula : @xmath32    the dft of the image @xmath10 with edge artifacts removed is then @xmath33 .",
    "figures 1c and 1d show the dft of the smooth and periodic components , respectively .",
    "in this section we optimize the original psd algorithm so that it can be effectively configured on an fpga .",
    "this is accomplished by using inherent symmetry between rows and columns to reduce the number of 1d fft invocations and minimizie utilization of external dram .",
    "on inspecting equation ( 6 ) we realize that the boundary image @xmath30 is symmetrical in the sense that boundary rows and columns are an algebraic negation of each other .",
    "an fft of a column vector @xmath34 with length @xmath8 is @xmath35 , where @xmath17 is given in eq .",
    "( [ matrix : w ] ) .",
    "the column - wise fft of the matrix @xmath30 is then @xmath36 it can be shown that the 1d fft of the column @xmath37 is @xmath38 the 1d fft of the last column @xmath39 is @xmath40 @xmath41 so , the column - wise fft of the matrix @xmath30 is @xmath42    to compute the column - by - column 1d fft of the matrix , @xmath30 , we only have to compute the fft of the first vector and then use the appropriately scaled vector , @xmath43 , to derive the remainder of the columns .",
    "the row - by - row fft has to be calculated normally . by reducing column - by - column 1d fft computations for the boundary image",
    ", this method can significantly reduce the number of 1d fft invocations and reduce dram access for an fpga - based implementation .",
    "this can be implemented by temporarily storing the initial vector @xmath44 and scaling factors @xmath45 in the block ram / register memory , drastically reducing dram access and lowering the number of required 1d fft invocations .    for a @xmath46 image ,",
    "this can reduce dram access from @xmath47 points to @xmath48 points and can reduce the number of 1d fft invocations from to 1 column vector rather than m column vectors while calculating the column - by - column component of the 2d fft .",
    "in other words , the number of dft points to be computed can be reduced from @xmath47 to @xmath49 .",
    "table i shows a comparison of mirroring , psd and our proposed optimized psd ( opsd ) with respect to dram access points and dft points .",
    "figure 2 graphically shows that our optimized psd method can significantly reduce reading from external memory and can reduce the overall number of dft computations required .",
    "kee , h. , bhattacharyya , s. s. , petersen , n. , & kornerup , j. _ resource - efficient acceleration of 2-dimensional fast fourier transform computations on fpgas .",
    "_ distributed smart cameras , 2009 .",
    "icdsc 2009 .",
    "third acm / ieee international conference on .",
    "ieee , 2009 .",
    "uzun , isa servan , abbes amira , and ahmed bouridane .",
    "_ fpga implementations of fast fourier transforms for real - time signal and image processing .",
    "_ vision , image and signal processing , iee proceedings- .",
    "3 . iet , 2005 .",
    "jung , hyunuk , and soonhoi ha .",
    "_ hardware synthesis from coarse - grained dataflow specification for fast hw / sw cosynthesis .",
    "_ proceedings of the 2nd ieee / acm / ifip international conference on hardware / software codesign and system synthesis .",
    "acm , 2004 ."
  ],
  "abstract_text": [
    "<S> two - dimensional ( 2d ) discrete fourier transform ( dft ) is a basic and computationally intensive algorithm , with a vast variety of applications . </S>",
    "<S> 2d images are , in general , non - periodic , but are assumed to be periodic while calculating their dfts . </S>",
    "<S> this leads to cross - shaped artifacts in the frequency domain due to spectral leakage . </S>",
    "<S> these artifacts can have critical consequences if the dfts are being used for further processing . in this paper </S>",
    "<S> we present a novel fpga - based design to calculate high - throughput 2d dfts with simultaneous edge artifact removal . </S>",
    "<S> standard approaches for removing these artifacts using apodization functions or mirroring , either involve removing critical frequencies or a surge in computation by increasing image size . </S>",
    "<S> we use a periodic - plus - smooth decomposition based artifact removal algorithm optimized for fpga implementation , while still achieving real - time ( @xmath023 frames per second ) performance for a 512@xmath1512 size image stream . </S>",
    "<S> our optimization approach leads to a significant decrease in external memory utilization thereby avoiding memory conflicts and simplifies the design . </S>",
    "<S> we have tested our design on a pxie based xilinx kintex 7 fpga system communicating with a host pc which gives us the advantage to further expand the design for industrial applications .    </S>",
    "<S> 2d fft , discrete fourier transform , fast fourier transform , edge artifact removal , fpga , high - level synthesis , boundary effect </S>"
  ]
}