{
  "article_text": [
    "the `` lund monte carlo '' family of event generators started in 1978 with the jetset program .",
    "pythia was begun a few years later , and the two eventually were joined under the pythia label . over the last 25 years the pythia / jetset program has been widely used to help understand the physics of high - energy collisions .",
    "the program was from the onset written in fortran 77 , up to the current version 6.4 @xcite .",
    "however , following the move of the experimental community to c++ , a corresponding restart and rewrite was made for pythia in 2004  2007 , with most aspects cleaned up and modernized .    the first production quality release , pythia  8.100 , appeared towards the end of 2007 @xcite .",
    "it was paced to arrive in time for lhc and therefore does not yet cover some physics topics .",
    "it has not yet caught on in the lhc experimental collaborations , however , and thus the older fortran code is still maintained , even if at a reduced level .",
    "here follows a brief summary of the key physics aspects of pythia  8.1 , by topic .",
    "* hard processes : * the built - in library contains many leading - order processes , for the standard model almost all @xmath0 and @xmath1 ones and a few @xmath2 , beyond it a sprinkling of different processes , but not yet supersymmetry or technicolor .",
    "parton - level events can also be input from external matrix - element - based generators , e.g. using les houches event files @xcite .",
    "also runtime interfaces are possible , and one such is provided to pythia  6.4 for the generation of legacy processes .",
    "resonance decays are included , often but not always with full angular correlations .",
    "* parton showers : * transverse - momentum - ordered showers are used both for initial- and final - state radiation , the former based on backwards evolution . implemented branchings are @xmath3 , @xmath4 , @xmath5 , @xmath6 ( @xmath7 is a quark or lepton ) and @xmath8 .",
    "recoils are handled in a dipole - style approach , but emissions are still associated with one emitting parton .",
    "many processes include matching to matrix elements for the first (= hardest ) emission ; this especially concerns gluon emission in resonance decays .    * underlying events and minimum - bias events : * pythia implements a formalism with multiple parton  parton interactions , based on the standard qcd matrix elements for @xmath1 processes , dampened in the @xmath9 limit .",
    "the collision rate is impact - parameter - dependent , and collisions are ordered in decreasing @xmath10 .",
    "multiple interactions ( mi ) are therefore combined with initial- and final - state radiation ( isr and fsr ) in one common sequence of decreasing transverse momenta @xmath11 , @xmath12 using the `` winner takes all '' monte carlo strategy .",
    "this leads to a competition , in particular between mi and isr , for beam momentum .",
    "the beam remnants are colour - connected to the interacting subsystems , with a detailed modelling of the flavour and momentum structure , also for the parton densities to be used at each successive step .",
    "the framework also contains a model for colour reconnection , likely the least well understood aspect of this physics area , and therefore one that may require further development .",
    "* hadronization : * the lund model for string fragmentation is used to describe the transition from coloured partons to colour singlet hadrons .",
    "subsequent hadronic decays are usually described isotropic in phase space , but in some cases matrix - element information is inserted .",
    "it is also possible to link to external decay packages , e.g. for @xmath13 or @xmath14 decays . a model for bose ",
    "einstein effects is included , but is off by default .",
    "the above physics description largely also applies to pythia  6.4 .",
    "there are some differences to be noted , however .",
    "many old features have been definitely removed .",
    "most notably this concerns the framework for independent fragmentation ( a strawman alternative to string fragmentation ) and the older mass - ordered showers ( that still are in use in many collaborations , but do not fit so well with the new interleaved mi / isr / fsr description ) .",
    "features that have been omitted so far , but should appear when time permits , include @xmath15 , @xmath16 and @xmath17 beam configurations and a set of susy and technicolor processes .",
    "new features , relative to pythia  6.4 include    * the interleaved mi / isr / fsr evolution ( 6.4 only interleaved mi and isr ) , * a richer mix of underlying - event processes , no longer only qcd jets but also prompt photons , low - mass lepton pairs and @xmath18 , * possibility to select two hard processes in an event , * possibility to use one pdf set for the hard process and another for mi / isr , and * updated decay data .",
    "major plans for the future include a new model for rescattering processes in the mi machinery , and new facilities to include matrix - element - to - parton - shower matching .",
    "in addition minor improvements are introduced with each new subversion . between the original 8.100 and the current 8.108 the list includes    * possibility to have acollinear beams , beam momentum spread and beam vertex spread , * updated interfaces to several external packages , * improved possibility to run several ` pythia ` instances simultaneously , * code modifications to compile under gcc 4.3.0 with the ` -wshadow ` option , and * some minor bug fixes .",
    "( 430,370)(-215,10 ) ( -215,350)(215,380)0.9 ( 0,365)[]the user ( @xmath19 main program ) ( -215,300)(215,330)0.9 ( 0,315)[]`pythia ` ( -215,250)(-170,280)0.9 ( -192.5,265)[]`info ` ( -130,250)(-20,280)0.9 ( -75,265)[]`event  process ` ( 20,250)(215,280)0.9 ( 105,265)[]`event  event ` ( -215,110)(-85,230)0.9(-215,200)(-85,200 ) ( -150,215)[]`processlevel ` ( -150,185)[]`processcontainer ` ( -150,165)[]`phasespace ` ( -150,145)[]`lhaup ` ( -150,125)[]`resonancedecays ` ( -67,110)(67,230)0.9(-67,200)(67,200 ) ( 0,215)[]`partonlevel ` ( 0,185)[]`timeshower ` ( 0,165)[]`spaceshower ` ( 0,145)[]`multipleinteractions ` ( 0,125)[]`beamremnants ` ( 85,110)(215,230)0.9(85,200)(215,200 ) ( 150,215)[]`hadronlevel ` ( 150,185)[]`stringfragmentation ` ( 150,165)[]`ministringfrag  ` ( 150,145)[]`particledecays ` ( 150,125)[]`boseeinstein ` ( -130,60)(-20,90)0.9 ( -75,75)[]`beamparticle ` ( 20,60)(200,90)0.9 ( 110,75)[]`sigmaprocess , sigmatotal ` ( -215,10)(215,40)0.9 ( 0,25)[]`vec4 , rndm , hist , settings , particledatatable , resonancewidths ` ( 0,350)(0,332 ) ( -150,300)(-150,232 ) ( 0,300)(0,232 ) ( 150,300)(150,280 ) ( 150,280)(150,250)4 ( 150,250)(150,232 ) ( -192.5,230)(-192.5,248 ) ( -192.5,280)(-192.5,300 ) ( -192.5,300)(-192.5,330)4 ( -192.5,330)(-192.5,348 ) ( -107.5,230)(-107.5,248 ) ( -42.5,250)(-42.5,232 ) ( -42.5,280)(-42.5,300 ) ( -42.5,300)(-42.5,330)4 ( -42.5,330)(-42.5,348 ) ( 42.5,230)(42.5,248 ) ( 107.5,250)(107.5,232 ) ( 182.5,230)(182.5,248 ) ( 182.5,280)(182.5,300 ) ( 182.5,300)(182.5,330)4 ( 182.5,330)(182.5,348 ) ( -107.5,100)(-107.5,108 ) ( -107.5,100)(-107.5,92 ) ( -42.5,100)(-42.5,108 ) ( -42.5,100)(-42.5,92 ) ( 42.5,100)(42.5,108 ) ( 42.5,100)(42.5,92 ) ( -160,50)(-160,108 ) ( -160,50)(0,50 ) ( 0,50)(19,59 )",
    "the structure of the pythia  8 generator is illustrated in fig .",
    "[ fig : generatorstructure ] .",
    "the main class for all user interaction is called ` pythia ` .",
    "it calls on the three classes    * ` processlevel ` , for the generation of the hard process , by sampling of built - in matrix elements or input from an external program , * ` partonlevel ` , for the additional partonic activity by mi , isr , fsr and beam remnants , and * ` hadronlevel ` , for the transition from partons to hadrons and the subsequent decays .",
    "each of these , in their turn , call on further classes that perform the separate kinds of physics tasks .",
    "information is flowing between the different program elements in various ways , the most important being the event record , represented by the ` event ` class . actually , there are two objects of this class , one called ` process ` , that only covers the few partons of the hard process above , and another called ` event ` , that covers the full story from the incoming beams to the final hadrons .",
    "a small ` info ` class keeps track of useful one - of - a - kind information , such as kinematical variables of the hard process .",
    "there are also two incoming ` beamparticle`s , that keep track of the partonic content left in the beams after a number of interactions and initial - state radiations , and rescales parton distributions accordingly .",
    "the process library , as well as parametrisations of total , elastic and diffractive cross sections , are used both by the hard - process selection machinery and the mi one .",
    "the ` settings ` database keeps track of all integer , double , boolean and string variables that can be changed by the user to steer the performance of pythia , except that ` particledatatable ` is its own separate database .",
    "finally , a number of utilities can be used just about anywhere , for lorentz four - vectors , random numbers , jet finding , simple histograms , and for a number of other `` minor '' tasks .",
    "when you want to use pythia  8 you are expected to provide the main program .",
    "at least the following commands should them be used :    * ` # include pythia.h ` to gain access to all the relevant classes and methods , * ` using namespace pythia8 ; ` to simplify typing , * ` pythia pythia ; ` to create an instance of the generator , * ` pythia.readstring(command ) ; ` ( repeated as required ) to modify the default behaviour of the generator ( see further below ) , or alternatively * ` pythia.readfile(filename ) ; ` to read in a whole file of commands , one per line , * ` pythia.init ( ) ; ` to initialize the generator , with different optional arguments to be used to set incoming beam particles and energies , * ` pythia.next ( ) ; ` to generate the next event , so this call would be placed inside the main event generation loop , * ` pythia.statistics ( ) ; ` to write out some summary information at the end of the run .",
    "the ` pythia.readstring ( ... ) ` and ` pythia.readfile ( ... ) ` methods are used to modify the values stored in the databases , and it is these that in turn govern the behaviour of the program .",
    "there are two main databases .",
    "* ` settings ` come in four kinds , boolean ` flag`s , integer ` mode`s , double - precision ` parm`s , and string ` word`s . in each case",
    "a change requires a statement of the form ` task : property = value ` , e.g.  ` timeshower : ptmin = 1.0 ` . * ` particledatatable ` stores particle properties and decay tables . to change",
    "the former requires a statement of the form ` id : property = value ` , where ` i d ` is the identity code of the particle , an integer .",
    "the latter instead requires the form ` id : channel : property = value ` , where ` channel ` is a consecutive numbering of the decay channels of a particle .",
    "commands to the two databases can be freely mixed .",
    "the structure with strings to be interpreted also allows some special tricks , like that one can write ` on ` instead of ` true ` and ` off ` instead of ` false ` , or that the matching to variable names in the databases is case - insensitive .",
    "information about all settings and particle data can be found in the online manual , which exists in three copies .",
    "the ` xml ` one is the master copy , which is read in when an instance of the generator is created , to set up the default values that subsequently can be modified .",
    "the same information is then also provided in a copy translated to more readable ` html ` format , and another copy in ` php ` format .",
    "the interactivity of the latter format allows a primitive graphical user interface , where a file of commands can be constructed by simple clicking and filling - in of boxes .",
    "the online manual contains more than 60 interlinked webpages , from a program overview to some reference material , and in between extensive descriptions how to set up run tasks , how to study the output , and how to link to other programs .",
    "in particular , all possible settings are fully explained .",
    "if you want to try out pythia  8 , here is how :    * download ` pythia8108.tgz ` ( or whatever is the current version when you read this ) from + ` http://www.thep.lu.se/`@xmath20`torbjorn/pythia.html ` * ` tar xvfz pythia8108.tgz ` to unzip and expand . * ` cd pythia8108 ` to move to the new directory . * ` ./configure ... ` is only needed to link to external libraries , or to use options for debug or shared libraries , so can be skipped in the first round .",
    "* ` make ` will compile in @xmath21 minutes ( for an archive library , same amount extra for a shared one ) .",
    "* the ` htmldoc / pythia8100.pdf ` file contains a brief introduction @xcite . * open ` htmldoc / welcome.html ` in a web browser for the full manual . *",
    "install the ` phpdoc/ ` directory on a webserver and open ` phpdoc / welcome.php ` in a web browser for an interactive manual . * the ` examples ` subdirectory contains @xmath22 sample main programs : standalone , link to libraries , semi - internal processes ,  * these can be run by ` make mainnn ` followed by ` ./mainnn.exe > outfile ` . * a ` worksheet ` contains step - by - step instructions and exercises how to write and run main programs .",
    "note that pythia is constructed so it can be run standalone , and this is the best way to learn how it works . for an experimental collaboration",
    "it would only be a piece in a larger software puzzle , and so a number of hooks has been prepared to allow various kinds of interfacing .",
    "the price to pay for using them is a more complex structure , where e.g.  the origin of any errors is less easy to hunt down .",
    "several aspects , such as the access to settings and particle data , should remain essentially unchanged , however .",
    "pythia  6.4 is still maintained , with a current version 6.418 that weighs in at over 77,000 lines of code ( including comments and blanks ) and has a 580 page manual @xcite , plus update notes and sample main programs .",
    "no further major upgrades will occur with this program , however , and we intend to let it gradually die .    instead pythia  8.1 should be taking over . currently it is smaller than its predecessor , with `` only '' 53,000 lines of code and a puny 27 page manual @xcite , but with much further online documentation and a big selection of sample main programs .",
    "it already contains several features not found in 6.4 , and will gradually become the obvious version to use .",
    "the lhc collaborations are strongly encouraged to accelerate the transition from 6.4 to 8.1 , e.g.  by serious tests with small production runs , to find any remaining flaws and limitations .",
    "the pythia  8 program was made possible by a three - year `` sabbatical '' with the sft group at cern / ep .",
    "this unwavering support is gratefully acknowledged .",
    "mikhail kirsanov and other members of the genser group has provided further help with makefiles and other technical tasks .",
    "the work was supported in part by the european union marie curie research training network mcnet under contract mrtn - ct-2006 - 035606 ."
  ],
  "abstract_text": [
    "<S> pythia  8 , the c++ rewrite of the commonly - used pythia event generator , is now available in a first full - fledged version 8.1 . </S>",
    "<S> the older pythia  6.4 generator in fortran 77 is still maintained , for now , but users are strongly recommended to try out and move to the new version as soon as feasible . </S>"
  ]
}