{
  "article_text": [
    "the lmvt problem deals with multiplexing videos simultaneously slot by slot over a wireless channel .",
    "each slot could be allocated to at most one video .",
    "the number of bits that can be transmitted to a particular video in a given slot is known .",
    "hence the videos receive variable number of bits over the various slots .",
    "the time of transmission is divided over a number of _",
    "each such epoch has a fixed number of slots ( say @xmath2 ) known beforehand .",
    "the goal is to allocate all the slots in an epoch to the @xmath3 videos in a manner which maximizes the minimum number of bits received by any video in that epoch .",
    "the _ lead _ of a video is defined as the amount of time it can be played without interruption .",
    "an interruption in the playing of a video occurs when there are no more frames left in the buffer to be played .",
    "the lead of any video is calculated at the end of an epoch using a function @xmath1 on the number of bits @xmath4 received by that video in that epoch .",
    "the motivation behind studying this problem is to develop a slot allocation algorithm to ensure the uninterrupted play of each video in the network",
    ". this problem has been well studied , and a number of papers have been published on it recently  @xcite ,  @xcite ,  @xcite ,  @xcite .",
    "in this section we present a theoretical formulation of the problem . for video @xmath5 and slot @xmath6",
    "we define the _ bit rate _ @xmath7 to be the maximum number of bits that can be transmitted to @xmath5 in @xmath6 .",
    "the _ decision _ version of the lmvt problem can be presented as follows .    in  @xcite",
    ", the lmvt problem has been shown to be @xmath0-hard for a specific function @xmath1 to calculate the lead based on the number of bits received . a natural greedy algorithm has been designed and has been shown to perform well in practice with experimental results . in this work , we show the problem to remain @xmath0-hard even for the case in which @xmath1 is linear .",
    "next we design an fptas for the problem .",
    "we assume a linear function @xmath1 to calculate the lead based on the number of received @xmath4 .",
    "let us consider a monotonic linear @xmath1 , such that @xmath8 .",
    "then the problem becomes of finding a slot allocation to maximize the minimum number of bits received by any video .",
    "we show the problem to remain @xmath9-hard even then .",
    "we reduce the partition problem , a known @xmath0-hard problem to lmvt .",
    "the partition problem can be presented as :    for the reduction , consider any instance of the partition problem with @xmath10 , @xmath11 , and @xmath12 .",
    "now consider an instance of lmvt where we have @xmath13 videos @xmath14 and @xmath15 , @xmath2 slots , and the bit rates @xmath16 , for each slot @xmath6 .",
    "note that @xmath17 _ of slots for the lmvt instance_. set @xmath18 .",
    "the above instance of the partition problem has a solution iff the instance of lmvt has a solution .",
    "we show that the instance of the partition problem has a solution iff we can find a slot allocation for the @xmath13 videos of the lmvt instance , such that the number of bits received by each video is exactly @xmath19 .",
    "suppose the partition problem has a solution .",
    "that is we have @xmath20 and @xmath21 such that @xmath22 .",
    "we find a slot allocation of the @xmath2 slots which allocates slot @xmath23 to video @xmath14 if @xmath24 .",
    "else @xmath23 is allocated to @xmath15 .",
    "we note that all the @xmath2 slots get allocated this way , since @xmath12 . now since @xmath22 , it is easy to see that the number of bits received by @xmath14 and @xmath15 is exactly equal to @xmath19 .",
    "for the other way , suppose we have a slot allocation such that number of bits received @xmath14 and @xmath15 @xmath25 @xmath19 .",
    "we partition @xmath26 in the following way :    1 .   if slot @xmath23 is allocated to @xmath14 , then @xmath24 .",
    "@xmath27 .",
    "since @xmath28 , we have @xmath22 , and hence a solution to the instance of partition problem .",
    "@xcite the lmvt problem is easy for a constant bit rate for all the @xmath3 videos and @xmath2 slots .    the partition problem has been reduced to lmvt . it is easy to see that an instance of partition problem where all the integers in @xmath26 are constant ( equal ) is easy to solve",
    ". analogously , the instance of lmvt with constant ( equal ) bit rates is also easy to solve .",
    "in  @xcite , an exact dynamic programming algorithm has been designed for lmvt .",
    "the runtime of the exact algorithm is pseudo - polynomial in terms of the inputs .",
    "here we describe the exact algorithm and then discretize the algorithm to design an fptas .",
    "define @xmath29 to be the maximum number of bits that video @xmath5 .",
    "in other words , @xmath30 , is the number of bits @xmath5 would receive , if _ all _ the @xmath2 slots are allocated to it .",
    "given @xmath31 slots @xmath3 videos , a @xmath32 ( transmission ) vector is an _ n - tuple _",
    "@xmath33 which tells us whether a slot allocation is possible such that video @xmath5 receives at least @xmath34 bits in the allocation .",
    "the length of the @xmath32 vector is the number of videos @xmath3 .",
    "we define the predicate @xmath35 for @xmath31 slots and @xmath32 vector @xmath36 .",
    "@xmath35 is true iff an allocation is possible to achieve @xmath32 . for two @xmath32 vectors @xmath37 , and @xmath38",
    ", we define @xmath39 iff @xmath40 \\leq t_2[i]$ ] , @xmath41 .",
    "it is easy to see , if @xmath42 , then @xmath43 . in the dynamic programming ,",
    "we generate @xmath44 possible @xmath32 vectors starting from @xmath45 till @xmath46 . for each video @xmath5",
    ", we have the values taken from the set @xmath47 .",
    "we maintain an @xmath44 by @xmath3 matrix of the vectors during the execution of the dynamic programming algorithm .",
    "also , we have a _ truth value _ vector of length @xmath44 .",
    "each cell in the true value vector corresponds to the value of @xmath35 for @xmath31 slots , and @xmath32 vector @xmath36 .",
    "we initialize the truth value of @xmath45 to @xmath48 and the rest to @xmath49 .",
    "this signifies that we can always achieve vector @xmath45 , even without any slot allocation .",
    "we then start from @xmath31 @xmath25 @xmath50 to the total number of slots @xmath2 , and evaluate the truth values .",
    "the truth values ( @xmath51 ) at the end tell us whether that vector @xmath36 was achievable by a slot allocation with the @xmath2 slots .",
    "we then choose the vector with the maximum minimum @xmath34 value as our solution , and have the corresponding slot allocation as the optimal answer .",
    "the way to evaluate @xmath35 is as follows :    1 .   if @xmath52 , then @xmath35 .",
    "else let @xmath53 be the vector where all the positions of @xmath53 except @xmath54 $ ] is equal to @xmath36 .",
    "@xmath54 $ ] @xmath25 @xmath55-r_{im})$ ] . for @xmath23 @xmath25 @xmath50 to @xmath3 ,",
    "if @xmath56 , then @xmath35 .      generate the @xmath44 vectors where @xmath30 construct the @xmath44 by @xmath3 matrix of the vectors have the truth value vector of length @xmath44 initialize the truth value of @xmath45 to @xmath48 and the rest to @xmath49          in the fptas , instead of considering all the values in the set @xmath47 for each video @xmath5 , we discretize the set to the powers of @xmath59 , where @xmath60 .",
    "we define the function @xmath61 .",
    "now we have the set for each video @xmath5 , as @xmath62 .",
    "clearly , we have at most @xmath63 values in the set .",
    "hence we would have only @xmath64 @xmath32 vectors to evaluate truth value for , in the fptas .",
    "in the evaluation of @xmath35 , instead of considering @xmath53 as in algorithm  [ algo - dyn - prog ] , we consider @xmath65 where @xmath65 is the vector where all the positions of @xmath65 except @xmath66 $ ] is equal to @xmath36 .",
    "@xmath66 $ ] @xmath25 @xmath67-r_{im}))$ ] .",
    "we present the fptas in algorithm  [ fptas ] .",
    "generate the @xmath64 vectors where @xmath30 construct the @xmath64 by @xmath3 matrix of the vectors have the truth value vector of length @xmath64 initialize the truth value of @xmath45 to @xmath48 and the rest to @xmath49          suppose we have @xmath33 @xmath70 @xmath71 from the @xmath35 evaluation step of algorithm  [ algo - dyn - prog ] .",
    "in other words @xmath43 for @xmath37 @xmath25 @xmath71 has been evaluated to @xmath48 because @xmath72 had been evaluated to be @xmath48 for @xmath38 @xmath25 @xmath33 .",
    "hence , @xmath73 $ ] , such that , @xmath74 = b_i = max(0 , c_i - r_{im})$ ] , and for all other positions , @xmath6 we have @xmath75 = t_1[j]$ ] .",
    "now suppose we have @xmath76 @xmath25 @xmath77 and @xmath78 @xmath25 @xmath79 in the table for algorithm  [ fptas ] , where @xmath80 @xmath25 @xmath81 , and @xmath82 @xmath25 @xmath83 , @xmath84 $ ] .",
    "we want to show that if algorithm  [ fptas ] evaluates @xmath85 to @xmath48 if @xmath86 was evaluated to @xmath48 at an earlier step , with an error of at most @xmath68 . in other words ,",
    "@xmath77 @xmath70 @xmath79 in algorithm  [ fptas ] with an error of at most @xmath68 .",
    "we observe that @xmath87 = t^{\\prime}_1[j]$ ] for all @xmath88\\setminus\\{i\\}$ ] .",
    "for @xmath89 we have @xmath90 = b^{\\prime}_i = \\psi(b_i ) = max(0,\\psi(c_i - r_{im } ) ) \\geq \\psi(c_i - r_{im})$ ] .",
    "algorithm  [ fptas ] would calculate the value of position @xmath23 for vector @xmath91 as @xmath92 = max(0 , \\psi(c^{\\prime}_i - r_{im } ) ) \\geq \\psi(c^{\\prime}_i - r_{im})$ ] .",
    "we have @xmath93 , where @xmath94 .        at any step @xmath23 ,",
    "the value of any position of any vector of algorithm  [ fptas ] differs from the corresponding position of the corresponding vector for algorithm  [ algo - dyn - prog ] by a factor of @xmath99 due to the rounding .",
    "we perform this rounding @xmath2 times . hence the values of the vectors after the full execution would differ by a factor of at most @xmath98 .",
    "lemma  [ runtime ] and  [ ratio ] lead to the following theorem .",
    "dutta p. , seetharam a. , arya v. , chetlur m. , and kalyanaraman s. : _ managing qoe of multiple video streams in wireless networks_. submitted .",
    "manuscript available at http://domino.research.ibm.com/library/cyberdig.nsf/papers/a99fbfae927167958525787e003da7fe/$file/reportvideo.pdf ."
  ],
  "abstract_text": [
    "<S> the lead - based multiple video transmission ( lmvt ) problem is motivated by applications in managing the quality of experience ( qoe ) of video streaming for mobile clients . in an earlier work </S>",
    "<S> , the lmvt problem has been shown to be @xmath0-hard for a specific bit - to - lead conversion function @xmath1 . in this work </S>",
    "<S> , we show the problem to be @xmath0-hard even if the function @xmath1 is linear . </S>",
    "<S> we then design a fully polynomial time approximation scheme ( fptas ) for the problem . </S>",
    "<S> this problem is exactly equivalent to the santa clause problem on which there has been a lot of work done off - late . </S>"
  ]
}