{
  "article_text": [
    "[ cols= \" < , < \" , ]",
    "the formulation of the ccfm   parton evolution for the implementation into a full hadron level monte carlo program is described in detail in  @xcite . here",
    "only the main results are summarized and discussed for the case of leptoproduction .",
    "( 0,0 )    # 1#2#3#4#5 @font    ( 2959,4027)(4083,-3841 ) ( 5637,-826)(0,0)[rb ] ( 5637,-1618)(0,0)[rb ] ( 5637,-3163)(0,0)[rb ] ( 5637,-2017)(0,0)[rb ] ( 5637,-2366)(0,0)[rb ] ( 5637,-2746)(0,0)[rb ] ( 6631,-1868)(0,0)[lb ] ( 6631,-2235)(0,0)[lb ] ( 6631,-2615)(0,0)[lb ] ( 6631,-2995)(0,0)[lb ] ( 6792,-1351)(0,0)[lb ] ( 5062,-3747)(0,0)[lb ]    figure  [ ccfm_variables ] shows the pattern of qcd initial - state radiation in a small-@xmath3 dis event , together with labels for the kinematics .",
    "according to the ccfm evolution equation , the emission of partons during the initial cascade is only allowed in an angular - ordered region of phase space .",
    "the maximum allowed angle @xmath4 for any gluon emission sets the scale @xmath5 for the evolution and is defined by the hard scattering quark box , which connects the exchanged gluon to the virtual photon . in terms of sudakov variables the quark pair momentum is written as : @xmath6 where @xmath7 and @xmath8 are the proton and electron momenta , respectively and @xmath9 is the transverse momentum of the quark pair and @xmath10 is its light - cone momentum fraction .",
    "the scale @xmath5 is related to the maximum angle @xmath4 via @xmath11 , with @xmath12 being the squared center of mass energy @xmath13 .",
    "the ccfm evolution equation can be written in a differential form  @xcite , which is best suited for a backward evolution approach adopted in the monte carlo generator  @xcite : @xmath14 where @xmath15 is the unintegrated gluon density , depending on @xmath3 , @xmath16 and the evolution variable @xmath5 .",
    "the splitting variable is @xmath17 and @xmath18 , where the vector @xmath19 is at an azimuthal angle @xmath20 .",
    "the sudakov form factor @xmath21 is given by : @xmath22 with @xmath23 .",
    "for inclusive quantities at leading - logarithmic order the sudakov form factor cancels against the @xmath24 collinear singularity of the splitting function .",
    "the splitting function @xmath25 for branching @xmath26 is given by : @xmath27 where the non - sudakov form factor @xmath28 is defined as : @xmath29    the splitting function @xmath30 in eq.([pgg ] ) contains only the singular parts in @xmath31 and @xmath32 .",
    "the finite terms in the splitting function are neglected , since they are not obtained in ccfm at the leading infrared accuracy  @xcite .",
    "as soon as they become available they can be easily implemented into the monte carlo generator .",
    "the idea of a backward evolution  @xcite is to first generate the hard scattering process with the initial parton momenta distributed according to the parton distribution functions .",
    "this involves in general only a fixed number of degrees of freedom , and the hard scattering process can be generated quite efficiently .",
    "the initial state cascade is generated by going backwards from the hard scattering process towards the beam particles .    according to the ccfm equation the probability of finding a gluon in the proton depends on three variables , the momentum fraction @xmath3 , the transverse momentum squared @xmath33 of the exchanged gluons and the scale @xmath34 , which is related to the maximum angle allowed for any emission @xmath4 . to solve eq .",
    "(  [ ccfm_differential ] ) the unintegrated gluon distribution @xmath35 has to be determined beforehand .",
    "given this distribution , the generation of a full hadronic event is separated into three steps , as implemented in the hadron - level monte carlo program :    * the hard scattering process is generated , @xmath36 with @xmath37 being @xmath38 , @xmath39 or @xmath40 states .",
    "the hard cross section is calculated using the off - shell matrix elements given in  ( * ? ? ?",
    "* ff ) for @xmath38 and @xmath39 or for the case of @xmath41 in  @xcite .",
    "the gluon momentum is given in sudakov representation : @xmath42 where the last expression comes from the high energy approximation ( @xmath43 ) , which then gives @xmath44 .",
    "* the initial state cascade is generated according to ccfm in a backward evolution approach .",
    "* the hadronization is performed using the lund string fragmentation implemented in  /.",
    "the backward evolution there faces one difficulty : the gluon virtuality enters in the hard scattering process and also influences the kinematics of the produced quarks and therefore the maximum angle allowed for any further emission in the initial state cascade .",
    "this virtuality is only known after the whole cascade has been generated , since it depends on the history of the gluon evolution ( as @xmath45 in eq .",
    "(  [ xgluon ] ) may not be neglected for exact kinematics ) . in the evolution equations itself",
    "it does not enter , since there only the longitudinal energy fractions @xmath31 and the transverse momenta are involved .",
    "this problem can only approximately be overcome by using @xmath46 for the virtuality which is correct in the case of no further gluon emission in the initial state .",
    "the monte carlo program   can be used to generate unweighted full hadron - level events , including initial - state parton evolution according to the ccfm equation and the off - shell matrix elements for the hard scattering process .",
    "it is applicable for @xmath47 , photo - production as well as for deep inelastic scattering . the typical time needed to generate one event is @xmath48  sec on a pentium ii ( 266  mhz ) , which is similar to the time needed by standard monte carlo event generators such as   or  .",
    "the ccfm unintegrated gluon density @xmath49 is obtained from a forward evolution procedure as implemented in   by a fit to the measured structure function @xmath50 as described in  @xcite . from the initial gluon distribution a set of values @xmath3 and @xmath51 are obtained by evolving up to a given scale @xmath52 using the forward evolution procedure .",
    "this is repeated @xmath53 times thus obtaining a distribution of the unintegrated gluon density @xmath54 for the slice of phase space with a given @xmath5 ( @xmath55 ) . to obtain a distribution in @xmath56",
    ", the above procedure is repeated from the beginning @xmath57 times for the different grid points in @xmath56 up to @xmath58  gev . due to the complicated structure of the ccfm equation",
    ", no attempt is made to parameterize the unintegrated gluon density .",
    "instead , the gluon density is calculated on a grid in @xmath59 , @xmath60 and @xmath56 with @xmath61 points and a linear interpolation is used to obtain the gluon density for values in between the grid points .",
    "the data file ( ` ccfm.dat ` ) containing the @xmath61 grid points is read in at the beginning of the program .",
    "the parameter ` iglu ` offers the possibility to compare the ccfm unintegrated gluon density @xmath49 ( ` iglu=1 ` ) with other unintegrated gluon densities published : a simple numerical derivative of a standard integrated gluon density @xmath62 taken from  @xcite ( ` iglu=2 ` ) , the one in the approach of blmlein  @xcite and coded by  @xcite ( ` iglu=3 ` ) , the unintegrated gluon density of kms  @xcite ( ` iglu=4 ` , stored in ` kms.dat ` ) , the one of the saturation model by  @xcite ( ` iglu=5 ` ) and the one of kmr  @xcite ( ` iglu=6 ` , stored in ` kmr.dat ` ) .    except for the default ccfm unintegrated gluon density with ( ` iglu=1 ` ) , no initial state parton shower can be generated , because the angular variable , essential for angular ordering in the initial state cascade , is not present .",
    "however , the transverse momenta of the incoming partons are properly treated .",
    "the strong coupling @xmath63 is calculated via the   subroutine ` pyalps ` .",
    "maximal and minimal number of flavors used in @xmath63 are set by ` mstu(113),mstu(114 ) ` , @xmath64 = ` paru(112 ) ` with respect to ` mstu(112 ) ` flavors and stored in the  common ` common / pydat1/ ` . in the initial state cascade",
    "according to ccfm , the transverse momenta of the @xmath65-channel gluons are allowed to perform a random walk for small @xmath31 values and @xmath66 can become very small . in the @xmath67 part of the splitting function we use @xmath68 as the scale in @xmath69 and in the @xmath24 part @xmath70",
    "in addition we require @xmath71 gev , resulting in @xmath72 .",
    "the parameter @xmath73 gev was determined from the requirement to describe the structure function @xmath50 as described in  @xcite .",
    "the scale @xmath74 which is used in @xmath63 in the hard scattering matrix element can be changed with the parameter ` iq2 ` , the default choice is @xmath75 .",
    "the quark mass for light quarks ( @xmath76 ) is fixed to @xmath77 gev .",
    "this , together with the treatment of @xmath63 at small scales @xmath74 , gives also a reasonable total cross - section for photo - production at hera energies .",
    "the masses for heavy quarks are given by the  /   defaults ( @xmath78 gev , @xmath79 gev ) and can be changed according to the  prescription .      can be used to simulate leptoproduction events over the whole @xmath80 range . by fixing the light quark masses to @xmath77 gev and @xmath63 for small @xmath74 , the hard scattering matrix element remains finite over the full phase space .",
    "the total cross section is simulated by selecting ` ipro=10 ` and ` nflav=4(5 ) ` . with ` ipro=10 ` light quarks ( @xmath76 )",
    "are selected and with ` nflav>3 ` the program automatically includes heavy flavor production via the process ` ipro=11 ` and ` ihfla=4 ` up to ` ihfla = nflav ` .",
    "heavy flavor production can be generated separately via ` ipro=11 ` .",
    "the value of ` ihfla ` determines the heavy flavor to be generated .",
    "the matrix element for @xmath41 calculated in @xcite is available for quasi - real @xmath81 s via the process ` ipro=2 ` .",
    "can be used to simulate real photoproduction events by using ` ke=22 ` .",
    "the same options as for leptoproduction are available .      can be used to simulate heavy quark production in @xmath82 or @xmath47 collisions ( ` ipro=14 ` for heavy flavor production , and ` ihfla=4(5 ) ` for charm ( bottom ) quarks ) .",
    "the flavor code ( ` ke ` ) for beam 1 can be chosen as ` ke=2212 ` for proton or ` ke=-2212 ` for anti - proton , beam 2 is always a proton .",
    "initial state parton showers are generated in a backward evolution approach described in detail in  @xcite .",
    "the initial state parton shower consists only of gluon branchings and is generated in an angular ordered region in the laboratory frame . in the present version , the gluons emitted during the branchings are treated on - mass shell , and no further time - like branching occurs .",
    "all parameters ( like the scale @xmath74 in @xmath63 , the collinear cut - off @xmath83 ) for the initial state cascade are fixed from the determination of the unintegrated gluon density .",
    "the transverse momenta of the partons which enter the hard scattering matrix element are already generated in the beginning and are not changed during the whole initial and final state parton showering ( in contrast to standard dglap type parton shower monte carlo generators like   or  ) .",
    "the final state parton shower uses the parton shower routine ` pyshow ` of with the scale ` qmax=`@xmath84 , with @xmath85 being the transverse mass of the hard parton 1(2 ) .",
    "the proton remnant is built in subroutine ` caremn ` , which is a slightly modified version of the  /  subroutine ` pyremn ` . in the present version no intrinsic transverse momentum , in addition to the transverse momentum from the initial state cascade , is included .",
    "in  all variables are declared ` double precision ` .",
    "the lund string model is used for hadronization as implemented in  6.1 .",
    "the final state qcd radiation is performed via ` pyshow ` from  6.1 .",
    "the treatment of the proton remnant follows very closely the ones in for the leptoproduction case and the one in  6.1 for the proton - proton case .",
    "however slight modifications were needed to adapt to the cascade treatment here .",
    "the unintegrated gluon density is stored on data files ( ` ccfm.dat,kms.dat,kmr.dat ` ) , and is read in at the beginning of the program .",
    "the program has to be loaded together with  6 , to ensure that the double precision code of   is loaded .",
    "since the variables are declared in double precision , also a double precision random number generator has to be used to avoid any bias .",
    "the function ` dcasrn ` gives a single random number , the function ` dcasrnv ` returns an array of length ` len ` of random numbers .",
    "the default random number generator is ` rm48 ` ( called in ` dcasrn ` and ` dcasrnv ` ) from cernlib .",
    "the user can change this to any preferred ` double precision ` random number generator .",
    "the integration of the total cross section and the generation of unweighted events is performed with the help of bases / spring @xcite .",
    "the source code of  and this manual can be found under : + ` http://www.quark.lu.se/~hannes/cascade/ `    123456789012345    main program .    to initializes the program .",
    "to perform integration of the cross section .",
    "this routine has to be called before event generation can start .    to print the cross section and the number of events .    to extract the unintegrated gluon density @xmath49 for a proton with ` kf=2212 ` , as a function of @xmath86`x ` , @xmath87`kt ` and @xmath88`p ` .",
    "the gluon density is returned in ` xpq(0 ) ` , where ` xpq ` is an array with ` xpq(-6:6 ) ` .    to perform the event generation .    to give @xmath89 with @xmath90`rq ` .    to give initial particle and parton momenta .    to call routines for selected processes : ` xsec1 ` .    to cut on @xmath91 for @xmath92 process in integration and event generation .",
    "matrix element for @xmath93 and @xmath94 including masses .",
    "@xmath95 can be light or heavy quarks .",
    "four - vector dot product of @xmath96 and @xmath97",
    ".    four - vector dot product of vectors i and j in ` pyjets ` common .    to generate momenta of final partons in a @xmath98 subprocess",
    "according to phase space    to generate kinematics and the event record for @xmath0 , @xmath1 and @xmath2 processes .    to generate the beam remnants .",
    "copied from lepto 6.1   and updated for the use in .    to give the spectator ` kfsp ` and ` kfch ` partons when a parton ` kpa ` is removed from particle ` kf ` . copied from lepto 6.1   and updated for the use .",
    "to generate color flow for all processes and prepare for initial and final state parton showers .    to generate initial state radiation .",
    "gaussian integration routine for 1-dim and 2-dim integration .",
    "copied from lepto 6.1  .",
    "123456789012345    bases / spring integration procedure .",
    "( d:=20000 ) nr of calls per iteration for bases .",
    "( d:=1 ) relative precision ( in % ) for grid optimization .",
    "( d:=0.5 ) relative precision ( in % ) for integration .",
    "123456789012345    ( d:=@xmath99 ) momentum @xmath100 [ gev/@xmath101 of incoming electron ( ` /inpu/ ` ) .",
    "( d:=@xmath102 momentum @xmath100 [ gev/@xmath101 of incoming proton ( ` /inpu/ ` ) .",
    "( d : = 5.0 ) ( ` /values/ ` ) minimum @xmath80 to be generated .",
    "( d : = @xmath53 ) ( ` /values/ ` ) maximum @xmath80 to be generated .",
    "( d : = 0.0)(`/values/ ` ) minimum @xmath103 to be generated .",
    "( d : = 1.0 ) ( ` /values/ ` ) maximum @xmath103 to be generated .",
    "( d : thema = 180 .",
    ", themi = 0 ) maximum and minimum scattering angle @xmath104 of the electron ( /caelec/ ) .",
    "( d : = 5 ) number of active flavors , can be set by user ( /caluco/ ) .",
    "123456789012345    ( d : = 10 ) ( /capar1/ ) selects hard subprocess to be generated .",
    "= 2 : @xmath105    = 10 : @xmath93 for light quarks .",
    "= 11 : @xmath106 for heavy quarks .",
    "( d=0.0 ) minimum @xmath107 for process ipro ( /captcut/ ) .",
    "123456789012345    ( d : = 1 ) switch for fragmentation(/cainpu/ ) .",
    "= 0 off    = 1 on    ( d : = 3 ) switch parton shower(/cainpu/ ) .",
    "= 0 off    = 1 initial state    = 2 final state    = 3 initial and final state    ( d : = 1 )    = 1 ccfm evolution .",
    "123456789012345    ( d : = 0 ) ( /capar1/ ) select running of @xmath108 .",
    "= 0 : no running of @xmath108    = 1 : running of @xmath108    ( d : = 1 ) switch for running @xmath109 .",
    "= 0 : fixed @xmath110    = 1 : running @xmath111    ( d : = 3 ) select scale @xmath112 for @xmath111 .",
    "= 1 : @xmath113 ( use only for heavy quarks ! )    = 2 : @xmath114 ( use only for heavy quarks ! )    =3 : @xmath115    = 4 : @xmath116    = 5 : @xmath117    ( d : = 1 ) select unintegrated gluon density / gluon/ ) .",
    "note for ` iglu`@xmath118 , all initial state parton showers are switched off .",
    "= 1 : ccfm unintegrated gluon ( ` ccfm.dat ` ) .",
    "= 2 : derivative of grv  @xcite @xmath62 .",
    "=3 : approach of blmlein  @xcite .",
    "= 4 : kms  @xcite ( ` kms.dat ` ) .",
    "= 5 : saturation model  @xcite .",
    "= 6 : kmr  @xcite ( ` kmr.dat ` ) .",
    "123456789012345    integrated cross section ( /caeffic/ ) .",
    "standard deviation of integrated cross section ( /caeffic/ ) .",
    "squared center of mass energy @xmath12 ( /caparton/ ) .",
    "energy momentum vector of beam particles ( /cabeam/ ) .",
    "flavor code of beam particles ( /cabeam/ ) .    in leptoproduction : actual @xmath80 of @xmath81 ( /capar4/ ) .",
    "negative light - cone momentum fraction of parton @xmath119 ( @xmath120 , @xmath121 ) ( /casgki/ ) .",
    "positive light - cone momentum fraction parton @xmath119 ( @xmath120 , @xmath121 ) ( /casgki/ ) .",
    "positive light - cone momentum fraction of parton @xmath122 ( @xmath121 ) ( /casgki/ ) .",
    "negative light - cone momentum fraction of parton @xmath122 ( @xmath121 ) ( /casgki/ ) .",
    "transverse momenta squared @xmath123 [ gev@xmath124 of partons @xmath125 which enter to the matrix element .    actual upper and",
    "lower limits for @xmath126`yy ` ( /capar5/ ) .",
    "actual upper and lower limits for @xmath80 ( corresponding to ` kt2_1 ` ) of @xmath81 ( /capar5/ ) .",
    "upper and lower limits for @xmath3 ( /capar5/ ) .",
    "vector of masses of final state particles of hard interaction ( /capar3/ ) .",
    "invariant mass @xmath127 [ gev@xmath124 of hard subprocess ( /capar5/ )",
    ".    position of partons in hard interaction in pyjets event record ( /cahard/ ) .",
    "first and last position final partons / particles of hard interaction in pyjets ( /cahard/ ) .",
    "hard scattering scale @xmath128 used in @xmath63 and structure functions ( /capar4/ ) .",
    "actual @xmath63 ( /capar2/ ) .",
    "@xmath129 ( /capar2/ ) .",
    "number of trials for event generation ( /caeffic/ ) .",
    "number of successful generated events ( /caeffic/ ) .      `",
    "common / cabeam / pbeam(2,5),kbeam(2,5),kint(2,5 ) ` + `   common / cahard/ nia1,nia2,nir2,nf1,nf2 ` + `   common / cahflav/ ihfla ` + `   common / cainpu / plepin , ppin , nfrag , ilepto , ifps , ihf , inter , isemih ` + `   common / caluco / ke , kp , keb , kph , kgl , kpa , nflav ` + `   common / caeffic / avgi , sd , nin , nout ` + `   common / caelec / thema , themi ` + `   common / cagluon / iglu ` + `   common / capar1/ipro , iruna , iq2,irunaem ` + `   common / capar2/alphs , pi , alph , iwei ` + `   common / capar3/am(18),pcm(4,18 ) ` + `   common / capar4/q2,q2q ` + `   common / capar5/shat , ymax , ymin , q2max , q2min , xmax , xmin ` + `   common / capar6/lst(30),ires(2 ) ` + `   common / caparton / sss , cm(4),dbcms(4 ) ` + `   common / captcut / pt2cut(20 ) ` + `   common / caskin / yy , yy_bar , xg , xg_bar , kt2_1,kt2_2,pt2h , shh ` + `   common / values / qmi , ymi , qma , yma ` +",
    "....          program casmain        implicit none        integer n1,n2        real plepin , ppin        integer ke , kp , keb , kph , kgl , kpa , nfrag , ilepto , ifps , ihf        integer inter , isemih        integer nia1,nir1,nia2,nir2,nf1,nf2,nft , nflav        common / caluco / ke , kp , keb , kph , kgl , kpa , nflav        common / cainpu / plepin , ppin , nfrag , ilepto , ifps , ihf , inter , isemih        common / cahard/ nia1,nia2,nir2,nf1,nf2        integer ihfla        common / cahflav/ ihfla          double precision thema , themi , pt2cut        integer iruna , iq2,irunaem        integer ipro        common / capar1/ipro , iruna , iq2,irunaem        common / caelec/ thema , themi        common / captcut / pt2cut(20 )        real ulalps , ulalem        external ulalps , ulalem        double precision qmi , ymi , qma , yma        common / values / qmi , ymi , qma , yma          integer iglu        common / cagluon / iglu             integer iseed , i                  iseed = 124567        n1=0        n2=0 c initialize random number generator            call rm48in(iseed , n1,n2 ) c initialize pythia 6 parameters        call gpyini c initialize cascade parameters        call casini     c select parton shower ( ips=1 initial , = 2 final , 3 initial+final ps )        ifps = 3 c scale for alpha_s c iq2 = 1 mu^2 = m_q^2 ( m_q = light quark or heavy quark depending on ipro ) c iq2 = 2 mu^2   = shat c iq2 =3 mu^2   = m_q^2 + pt^2 ( m_q = light quark or heavy quark depending on ipro ) c iq2 = 4 mu^2   = q^2 ( q^2 of virtual photon ) c iq2 = 5 mu^2   = q^2 + pt^2 ( q^2 of virtual photon )        iq2=3 c select process ( ipro=10 for light quarks , ipro=11 for heavy quarks )        ipro= 10 c total number of flavors involved        nflav = 4 c select unintegrated gluon density ( d=1 )        iglu = 1 c minimum q^2 of electron to be generated        qmi = 0.5d0 c maximum q^2 of electron to be generated        qma = 10d8 c minimum y of electron to be generated        ymi=0.0d0 c minimum y of electron to be generated        yma=1.0d0 c maximum theta angle of scattered electron        thema = 180.0d0 c minimum   theta angle of scattered electron        themi =    0.0d0 c momentum of beam 1 ( electron , proton , antiproton )        plepin = -27.5 c lund flavor code for beam 1 ( electron=11,photon=22,proton=2212,antiproton=-2212 )        ke=11 c momentum of beam 2 ( proton )        ppin    = 820 .",
    "c perform fragmentation nfrag=0/1        nfrag = 1 c for ipro = 11   which flavor is produced        ihfla = 4 c   c start integration of x - section c         call cascade c   c print out result of integration of x - section c         call caend(1 )    c   c start event loop c         do i=1,100 c generate an event           call event        enddo c   c print out of generated events summary c         call caend(20 )          stop        end ....",
    "i am very grateful to b.  webber for providing me with the   code , which was the basis for the  monte carlo generator .",
    "i am very grateful also to g.  ingelman and t.  sjstrand for their courtesy to let me use their code for proton remnant treatment .",
    "i am also grateful to g.  salam for all his patience and his help in all different kinds of discussions concerning ccfm and a backward evolution approach .",
    "i have enjoyed and learned a lot from the discussions with b.  andersson , g.  gustafson , l.  jnsson , h.  kharraziha and l.  lnnblad during several years .",
    "many thanks also go to s.  baranov and n.  zotov who were the first raising my interest in @xmath66-factorization . during all the years i had fun and great times with antje .",
    "h.  jung , ccfm prediction on forward jets and @xmath50 : parton level predictions and a new hadron level monte carlo generator cascade , in _ proceedings of the workshop on monte carlo generators for hera physics _ , edited by a.  doyle , g.  grindhammer , g.  ingelman , h.  jung ( , hamburg , 1999 ) , p.  75",
    ", hep - ph/9908497 ."
  ],
  "abstract_text": [
    "<S> is a full hadron level monte carlo event generator for @xmath0 , @xmath1 and @xmath2 processes , which uses the ccfm evolution equation for the initial state cascade in a backward evolution approach supplemented with off - shell matrix elements for the hard scattering . </S>",
    "<S> a detailed program description is given , with emphasis on parameters the user wants to change and common block variables which completely specify the generated events .    </S>",
    "<S> desy 01 - 114 + lunfd6/(nffl7202 ) 2001 + september 2001     the ccfm monte carlo generator cascade     +   + </S>"
  ]
}