{
  "article_text": [
    "the generation of random variables has become an essential capability in fields such as physics , engineering , economics , random search and optimization , artificial intelligence , and game and network theories ( see e.g. refs . @xcite and references therein ) . in quantum information science ( qis ) , a multidisciplinary field aiming an efficient and far reaching use and manipulation of information , the panorama is not different .",
    "the creation of random states and unitaries can be useful for encryption , remote state preparation , data hiding , classical correlation locking , quantum devices and decoherence characterization and tailoring , and for quantumness and correlations quantification @xcite , to name but a few examples .    perhaps because of its intuitive syntax and variety of well developed and optimized tools , fortran , which stands for formula translation , is the primary choice programming language of many scientists .",
    "there are several nice initiatives indicating that it will be continuously and consistently improved in the future @xcite , what places fortran as a good option for scientific programming .",
    "it is somewhat surprising thus noticing that fortran does not appear in quantiki s list of `` quantum simulators '' @xcite . for more details about codes under active development in other programming languages , see e.g. refs .",
    "in this article , with the goal of starting the development of a fortran library for qis , we shall explain ( free ) fortran codes produced , or organized , for generators of random numbers , probability vectors , unitary matrices , and quantum state vectors and density matrices .",
    "some examples of free software @xcite programming languages with which it would be interesting to develop similar tools are : python , maxima , octave , c , and java .",
    "this article is structured as follows .",
    "we begin ( in sec .",
    "[ defs ] ) recapitulating some concepts and definitions we utilize in the remainder of the article . in sec .",
    "[ sec : general ] , the general description of the code is provided . reading this section , and the readme file , would be enough for a black box use of the generators .",
    "more detailed explanations of each one of the them , and of the related options , are given in sections [ sec : rng ] , [ sec : rpvg ] , [ sec : rug ] , [ sec : rsvg ] , and [ sec : rdmg ] . in sec .",
    "[ sec : tests ] we summarize the article and comment on some tests for the generators .",
    "in quantum mechanics ( qm ) @xcite , we associate to a system a hilbert space @xmath0 .",
    "every state of that system corresponds to a unit vector in @xmath0 .",
    "observables are described by hermitian operators @xmath1 , i.e. , @xmath2 and @xmath3 form an orthonormal basis . born s rule bridges theory and experiment stating that if the system is prepared in the state @xmath4 and @xmath5 is measured , then the probability for the outcome @xmath6 is @xmath7 .",
    "we recall that a set of numbers @xmath8 is regarded as a discrete probability distribution if all the numbers @xmath8 in the set are non - negative ( i.e. , @xmath9 ) and if they sum up to one ( i.e. , @xmath10 ) . in qm ,",
    "preparations and tests involving incompatible observables lead to quantum coherence and uncertainty and to the consequent necessity for the use of probabilities .    when we lack information about a system preparation , a complex positive semidefinite matrix ( @xmath11 with unit trace @xmath12 , dubbed the density matrix , is the mathematical object used to describe its state @xcite . in these cases ,",
    "if the pure state @xmath13 is prepared with probability @xmath8 , all measurement probabilities can be computed in a succinct way using the density operator @xmath14 the ensemble @xmath15 leading to a given @xmath16 is nt unique .",
    "but , as @xmath16 is an hermitian matrix , we can write its unique eigen - decomposition @xmath17 with @xmath18 being a probability distribution and @xmath19 an orthonormal basis .",
    "we observe that the set of vectors with properties equivalent to those of @xmath20 , which are dubbed here probability vectors , define the unit simplex .",
    "the mixedness of the state of a system follows also when it is part of a bigger - correlated system .",
    "let us assume that a bi - partite system was prepared in the state @xmath21 .",
    "all the probabilities of measurements on the system @xmath22 can be computed using the ( reduced ) density matrix obtained taking the partial trace over system @xmath23 @xcite : @xmath24    up to now , we have discussed some of the main concepts of the kinematics of qm . for our purposes here , it will be sufficient to consider the quantum mechanical closed - system dynamics , which is described by a unitary transformation @xcite .",
    "if the system is prepared in state @xmath25 , its evolved state shall be given by : @xmath26 with @xmath27 , where @xmath28 is the identity operator in @xmath0 .",
    "the unitary matrix @xmath29 is obtained from the schrdinger equation @xmath30 , with @xmath31 being the system hamiltonian at time @xmath32 . between preparation and measurement ( reading of the final result ) , a quantum computation ( in the circuit model ) is nothing but a unitary evolution ; which is tailored to implement a certain algorithm .",
    "the code is divided in five main functionalities , which are : the random number generator ( rng ) , the random probability vector generator ( rpvg ) , the random unitary generator ( rug ) , the random state vector generator ( rsvg ) , and the random density matrix generator ( rdmg ) .",
    "below we describe in more details each one of these generators , and the related available options .",
    "a module named _ meths _ is used in all calling subroutines for these generators in order to share your choices for the method to be used for each task . a short description of the methods and the corresponding options , ` opt_rxg ` ( with ` x ` being ` n ` , ` pv ` , ` u ` , ` sv ` , or ` dm ` ) , is included in that module .",
    "to call any one of these generators , include ` call rxg(d , rx ) ` in your program , where ` d ` is the dimension of the vector or square matrix ` rx ` , which is returned by the generator .",
    "if you want , for example , a random density matrix generated using a `` standard method '' just ` call rdmg(d , rdm ) ` ; the same holds for the other objects . if , on the other hand , you want to choose which method is to be used in the generation of any one of these random variables , add ` use meths ` after your ( sub)program heading , declare ` opt_rxg ` as ` character(10 ) ` , and add ` opt_rxg = your_choice ` to your program executable statement section .",
    "beforehand we ` have ' to initialize the rng with ` call rng_init ( ) ` ; remember to do that also after changing the rng . as ` rn ` is an one - dimensional double precision array , if you want only one random number ( rn ) , then just set @xmath33 . as the _ standard _ pseudo - random number generator ( prng )",
    ", we use the fortran implementation by jose rui faustino de sousa of the mersenne twister algorithm introduced in ref .",
    "this prng has been adopted in several software systems and is highly recommended for scientific computations @xcite . as less hardware demanding alternatives , we have also included the gnu s standard prng kiss @xcite and the petersen s lagged fibonacci prng @xcite , which is available on netlib .",
    "the options ` opt_rng ` for these three prngs are , respectively , ` mt ` , ` gnu ` , and ` netlib ` .",
    "the components of ` rn ` provided by these prng are uniformly distributed in @xmath34 $ ] .",
    "because of their use in the other generators , we have also implemented the subroutines ` rng_unif(d , a , b , rn ) ` , ` rng_gauss(d , rn ) ` , ` rng_exp(d , rn ) ` , which return @xmath35-dimensional vectors of random numbers with independent components possessing , respectively , uniform in @xmath36 $ ] , gaussian ( standard normal ) , and exponential probability distributions ( see examples in fig .",
    "[ fig : rn_rpv ] ) .",
    "once selected the rng , it can be utilized , for instance , for the sake of sampling uniformly from the unit simplex .",
    "that is to say , we want to generate random probability vectors ( rpv ) @xmath37 with @xmath9 and @xmath38 ; and the picked points @xmath39 should have uniform density in the unit simplex . in the following , we describe briefly some methods that may be employed to accomplish ( approximately ) this task .",
    "let us start with a trigonometric approach to create rpvs ( ` opt_rpvg = trig ` ) .",
    "first we get the angles @xmath40 and @xmath41 ( for @xmath42 ) , with @xmath18 being uniform rns in @xmath34 $ ] .",
    "then we define the components of the rpv : @xmath43 ( for @xmath42 ) and @xmath44 @xcite .",
    "to get rid from the bias existing in the generated rpvs we use a random permutation of @xmath45 to shuffle its components @xcite .    the normalization method ( ` opt_rpvg = norm ` )",
    "starts from the defining properties of a probability vector and uses the rng to draw uniformly @xmath46 $ ] , @xmath47 ( for @xmath42 ) , and set @xmath48 . at last we use shuffling of the components of @xmath39 to obtain an unbiased rpv @xcite . a somewhat related method , which is used here as the _ standard _ one for the rpvg , was proposed by yczkowski , horodecki , sanpera , and lewenstein ( zhsl ) in the appendix a of ref .",
    "@xcite ; so ` opt_rpvg = zhsl ` .",
    "the basic idea is to consider the volume @xmath49 and @xmath50 uniform random numbers @xmath18 and to define @xmath51 and @xmath52 ( for @xmath53 ) , and finally making @xmath48 .    , and correlations , @xmath54 , as a function of the number of samples obtained with the netlib rng .",
    "* on bottom * : probability density for the first component of one million random probability vectors with dimension @xmath55 and generated using the method indicated in the figure ( refer to the text for more details ) . in the _ inset _",
    "is shown the 2d scatter plot for the first two components @xmath56 of five thousand rpvs with @xmath57 and produced using the zhsl ( red ) or the normalization ( green ) method ( in the last case the points are @xmath58 ) . ]",
    "other possible approach is taking @xmath35 independent and identically distributed uniform random numbers @xmath18 ( thus ` opt_rpvg = iid ` ) and just normalizing the distribution , i.e. , @xmath59 @xcite .",
    "a related sampling method was put forward in ref .",
    "@xcite by devroye ( ` opt_rpvg = devroye ` ) ; see also the appendix b of ref .",
    "the procedure is similar to the previous one , but with the change that the random numbers @xmath18 are drawn with an exponential probability density .",
    "yet another way to create a rpv , due to kraemer ( ` opt_rpvg = kraemer ` ) @xcite ( see also refs .",
    "@xcite ) , is to take @xmath50 random numbers uniformly distributed in @xmath34 $ ] , sort them in nondecreasing order , use @xmath60 and @xmath61 , and then defining @xmath62 for @xmath63 . for sorting we adapted an implementation of the quicksort algorithm from the rosetta code project @xcite .    with exception of the iid",
    ", all these methods lead to fairly good samples . with regard to the similarity of the probability distributions for the components of the rpvs",
    "generated , one can separate the methods in two groups : ( a ) zhsl , kraemer , and devroye , and ( b ) trigonometric and normalization . concerning the choice of the method , it is worth mentioning that for moderately large dimensions of the rpv",
    ", the group ( a ) excludes the possibility of values of @xmath8 close to one .",
    "this effect , which may have unwanted consequences for random quantum states generation , is less pronounced for the methods ( b ) , although here the problem is the appearance of a high concentration of points around the corners @xmath64 ( see fig .",
    "[ fig : rn_rpv ] ) .    if @xmath65 is the computational complexity ( cc ) to generate @xmath66 rns and @xmath67 is the cc for @xmath66 scalar additions , then for @xmath68 we have the following estimative : @xmath69 .",
    "a complex matrix @xmath29 is unitary , i.e. , @xmath70 with @xmath28 being the identity matrix , if and only if its column vectors form an orthonormal basis .",
    "so , starting with a complex matrix possessing independent random elements which have identical gaussian ( standard normal ) probability distributions , we can obtain a random unitary matrix ( ru ) via the qr factorization ( qrf ) @xcite .",
    "we implemented it using the modified gram - schmidt orthogonalization ( ` opt_rug = gso ` ) @xcite , which is our _ standard _",
    "method for generating random unitaries .",
    "we also utilized lapack s implementation of the qrf via householder reflections ( ` opt_rug = hhr ` ) ; so you will need to have lapack installed @xcite .",
    "random unitaries can be obtained also from a parametrization for @xmath71 .",
    "we have implemented a rug in this way using the hurwitz parametrization ( ` opt_rug = hurwitz ` ) ; for details see refs .",
    "@xcite . here",
    "a rough estimate for the computational complexity is : @xmath72 .",
    ", as a function of the dimension @xmath35 for one thousand pairs of random state vectors generated using the indicated method .",
    "the continuous line is for @xmath73 . in the _ inset _",
    "is shown the probability density for the eigen - phases and its spacings ( divided by the average ) for ten thousand @xmath74 random unitary matrices . * on bottom",
    "* : probability of finding a positive partial transpose bipartite state of dimension @xmath75 , with @xmath76 , for ten thousand random density matrices produced for each value of @xmath35 .",
    "the continuous lines are the exponential fits , @xmath77 , with @xmath78 being @xmath79 , @xmath80 , and @xmath81 for , respectively , the ` std ` , ` ginibre ` ( ` ptrace ` ) , and ` bures ` method . in the _ inset",
    "_ is shown the average @xmath82-norm quantum coherence @xmath83 ( divided by @xmath84 ) and the relative entropy of quantum coherence @xmath85 , with @xmath86 being von neumann s entropy and @xmath87 is obtained from @xmath16 by erasing its off - diagonal matrix elements , in basis @xmath88 ( @xmath89 samples were produced for each value of @xmath35 ) . ]",
    "pure states of @xmath35-dimensional quantum systems are described by unit vectors in @xmath90 .",
    "the computational basis @xmath91 can be used to write any one of these vectors as @xmath92 which are guaranteed to be normalized if @xmath93 a simple way to create random state vectors ( rsvs ) is by using normally distributed real numbers to generate the real and imaginary parts of the complex coefficients in eq .",
    "( [ eq : psi_cb ] ) , and afterwards normalizing @xmath25 ( ` opt_rsvg = gauss ` ) .    using the polar form for the coefficients in eq .",
    "( [ eq : psi_cb ] ) , @xmath94 , and noticing that @xmath95 is a probability distribution , we arrive at our _ standard _ method ( ` opt_rsvg = std ` ) for generating rsvs .",
    "we proceed then by defining @xmath96 and writing @xmath97 then we utilize the rpvg to get @xmath98 and the rng to obtain the phases @xmath99 , with @xmath100 uniformly distributed in @xmath101 $ ] . using these probabilities and phases",
    "we generate a rsv .",
    "see examples in fig .",
    "[ fig : ru_rsv_rdm ] .",
    "for these two first methods , when @xmath68 , @xmath102 .",
    "in addition to these procedures , we have included yet another rsvg using the first column of a ru ( ` opt_rsvg = ru ` ) : @xmath103",
    "our _ standard _ method ( ` opt_rdmg = std ` ) for random density matrix ( rdm ) generation ( see e.g. refs .",
    "@xcite ) , starts from the eigen - decomposition @xmath104 and creates the eigenvalues @xmath18 and the eigenvectors @xmath105 using , respectively , the rpvg and rug described before .",
    "so , in this case , @xmath106 .",
    "we can also produce rdms by normalizing matrices with independent complex entries normally distributed , named wishart or ginibre matrices ( ` opt_rdmg = ginibre ` ) , @xmath107 where @xmath108 is the hilbert - schmidt norm @xcite . a related method , which produces rdms with bures measure ( ` opt_rdmg = bures ` ) , uses @xmath109 with @xmath29 being a random unitary @xcite . at last",
    ", one can also generate rdms via partial tracing a random state vector @xmath21 @xcite : @xmath110 so ` opt_rdmg = ptrace ` .",
    "see examples in fig .",
    "[ fig : ru_rsv_rdm ] .",
    "there are two issues arising from fig .",
    "[ fig : ru_rsv_rdm ] that instantiate the utility of the numerical tool described in this article .",
    "the first one regards quantum coherence quantification , which has been rediscovered and formalized in the last few years @xcite .",
    "we see that , while the average relative entropy of coherence concentrates around a certain value , the @xmath82-norm coherence keeps growing with the dimension @xmath35 .",
    "such kind of qualitative difference , promptly identified in a simple numerical experiment , points towards a path that can be taken in order to identify physically and/or operationally relevant coherence quantifiers .",
    "the other issue refers to the too fast concentration of measure reported in ref .",
    "@xcite ; and which gains more physical appeal with the too entangled state space reached by the last three rdmgs described in the last section .",
    "it seems legitimate regarding the most random ensemble of quantum states as being the one leading to minimal knowledge ; which can , by its turn , be identified with maximal symmetry @xcite .",
    "thus , for pure states we require such ensemble to be invariant under unitary transformations ( uts ) , what implies in no preferential direction in the hilbert space .",
    "an ensemble of pure states drawn with probability density invariant under uts is said to be generated with haar measure .",
    "the same is the case for random unitaries @xcite .",
    "we observe that all random unitary generators and random state vector generators described here produce haar distributed random objects .",
    "in the general case of density matrices , invariance under uts only warrants ignorance about direction in the state space , but implies nothing with respect to the eigenvalues distribution . in this regard , in general , different metrics lead to distinct probability densities , which are then used for constructing methods to create random density matrices accordingly . therefore , as advanced in ref .",
    "@xcite , this situation calls for the application of physical or conceptual motivations when choosing a rdmg . in this sense , we think that the too fast concentration of measure issue , in conjunction with the well known difficulty of preparing entangled states in the laboratory , favors the standard random density matrix generator described above .",
    "to summarize , in this article we described fortran codes for the generation of random numbers , probability vectors , unitary matrices , and quantum state vectors and density matrices .",
    "our emphasis here was more on ease of use than on sophistication of the code .",
    "for this is the starting point for the development of a fortran library for quantum information science .",
    "in addition to including new capabilities for the generators described here and to optimize the code , we expect to develop this work in several directions in the future .",
    "among the intended extensions are the inclusion of entropy and distinguishability measures , non - classicality and correlation quantifiers , simulation of quantum protocols , and remote access to quantum random number generators . besides , in order to mitigate the explosive growth in complexity that we face in general when dealing with quantum systems , @xmath111 it would be fruitful to parallelize the code whenever possible .",
    "we performed some simple tests and calculations for verification of the code s basic functionalities .",
    "some of the results are reported in figs .",
    "[ fig : rn_rpv ] and [ fig : ru_rsv_rdm ] .",
    "the code used for these and other tests is also included and commented , but we shall not explain it here .",
    "several matrix functions are provided in the files ` matfun.f90 ` and ` qnesses.f90 ` . for instructions about how to compile and run the code",
    "see the readme file . in our tests",
    ", we used blas 3.6.0 , lapack 3.6.0 ( see installation instructions in @xcite ) , and the gnu fortran compiler version 5.0.0 .",
    "a macbook air processor 1.3 ghz intel core i5 , with a 4 gb 1600 mhz ddr3 memory and operating system os x el capitan version 10.11.2 was utilized .",
    "the code , and related files , can be downloaded in @xcite or @xcite .",
    "this work was supported by the brazilian funding agencies : conselho nacional de desenvolvimento cientfico e tecnolgico ( cnpq ) , under processes 441875/2014 - 9 and 303496/2014 - 2 , instituto",
    "nacional de cincia e tecnologia de informao quntica ( inct - iq ) , under process 2008/57856 - 6 , and coordenao de desenvolvimento de pessoal de nvel superior ( capes ) , under process 6531/2014 - 08 .",
    "i gratefully acknowledge the hospitality of the physics institute and laser spectroscopy group at the universidad de la repblica , uruguay , where this work was completed .",
    "i also thank carlos alberto vaz de moraes jnior for useful suggestions regarding the creation of fortran libraries and one of the reviewers by his / her constructive comments and suggestions .",
    "10 kroese , d. p. , brereton , t. , taimre , t. , and botev , z. i. ( 2014 ) .",
    "why the monte carlo method is so important today .",
    "_ wires comput .",
    "_ 6 , 386 .",
    "doi : http://dx.doi.org/10.1002/wics.1314[10.1002/wics.1314 ]      krioukov , d. , papadopoulos , f. , kitsak , m. , vahdat , a. , and boguna , m. ( 2010 ) .",
    "hyperbolic geometry of complex networks .",
    "e _ 82 , 036106 .",
    "doi : http://dx.doi.org/10.1103/physreve.82.036106[10.1103/physreve.82.036106 ]      garlaschelli , d. , and loffredo , m. i. ( 2004 ) .",
    "fitness - dependent topological properties of the world trade web .",
    "_ 93 , 188701 .",
    "doi : http://dx.doi.org/10.1103/physrevlett.93.188701[10.1103/physrevlett.93.188701 ]      biondo , a. e. , pluchino , a. , and rapisarda , a. ( 2013 ) .",
    "the beneficial role of random strategies in social and financial systems . _ j. stat .",
    "_ 151 , 607 .",
    "doi : http://dx.doi.org/10.1007/s10955-013-0691-2[10.1007/s10955-013-0691-2 ]    perc , m. , and szolnoki , a. ( 2008 ) .",
    "social diversity and promotion of cooperation in the spatial prisoner s dilemma game .",
    "e _ 77 , 011904 .",
    "doi : http://dx.doi.org/10.1103/physreve.77.011904[10.1103/physreve.77.011904 ]      rios , l. m. , and sahinidis , n. v. ( 2013 ) .",
    "derivative - free optimization : a review of algorithms and comparison of software implementations . _ j. glob .",
    "_ 56 , 1247 .",
    "doi : http://dx.doi.org/10.1007/s10898-012-9951-y[10.1007/s10898-012-9951-y ]    amaran , s. , sahinidis , n. v. , sharda , b. , and bury , s. j. ( 2014 ) .",
    "simulation optimization : a review of algorithms and applications .",
    "_ 12 , 301 .",
    "doi : http://dx.doi.org/10.1007/s10479-015-2019-x[10.1007/s10479-015-2019-x ]        silver , d. , huang , a. , maddison , c. j. , guez , a. , sifre , l. , van den driessche , g. , schrittwieser , j. , antonoglou , i. , panneershelvam , v. , lanctot , m. , dieleman , s. , grewe , d. , nham , j. , kalchbrenner , n. , sutskever , i. , lillicrap , t. , leach , m. , kavukcuoglu , k. , graepel , t. , and hassabis , d. ( 2016 ) . mastering the game of go with deep neural networks and tree search .",
    "_ nature _ 529 , 484 .",
    "doi : http://dx.doi.org/10.1038/nature16961[10.1038/nature16961 ]    hayden , p. , leung , d. , shor , p. w. , and winter , a. ( 2004 ) .",
    "randomizing quantum states : constructions and applications .",
    "_ 250 , 371 .",
    "doi : http://dx.doi.org/10.1007/s00220-004-1087-6[10.1007/s00220-004-1087-6 ]    emerson , j. , weinstein , y. s. , saraceno , m. , lloyd , s. , cory , d. g. ( 2003 ) .",
    "pseudo - random unitary operators for quantum information processing . _ science _ 302 , 2098 .",
    "doi : http://dx.doi.org/10.1126/science.1090790[10.1126/science.1090790 ]        galve , f. , giorgi , g. , and zambrini , r. ( 2011 ) .",
    "orthogonal measurements are _ almost _ sufficient for quantum discord of two qubits .",
    "_ epl _ 96 , 40005 .",
    "doi : http://dx.doi.org/10.1209/0295-5075/96/40005[10.1209/0295-5075/96/40005 ]          lu , x .-",
    ", ma , j. , xi , z. , and wang , x. ( 2011 ) .",
    "optimal measurements to access classical correlations of two - qubit states .",
    "_ phys . rev .",
    "a _ 83 , 012327 .",
    "doi : http://dx.doi.org/10.1103/physreva.83.012327[10.1103/physreva.83.012327 ]    agarwal , s. , and hashemi rafsanjani , s. m. ( 2013 ) . maximizing genuine multipartite entanglement of n mixed qubits .",
    "j. quantum inform .",
    "_ 11 , 1350043 .",
    "doi : http://dx.doi.org/10.1142/s0219749913500433[10.1142/s0219749913500433 ]      szymanski , b. k. ( 2007 ) .",
    "fortran programming language and scientific programming : 50 years of mutual growth .",
    "_ scientific programming _ 15 , 1 .",
    "doi : http://dx.doi.org/10.1155/2007/979872[10.1155/2007/979872 ]        johansson , j. r. , nation , p. d. , and nori , f. ( 2012 ) .",
    "qutip : an open - source python framework for the dynamics of open quantum systems . _ comp .",
    "_ 183 , 1760 .",
    "doi : http://dx.doi.org/10.1016/j.cpc.2012.02.021[10.1016/j.cpc.2012.02.021 ]    johansson , j. r. , nation , p. d. , and nori , f. ( 2013 ) .",
    "qutip 2 : a python framework for the dynamics of open quantum systems . _ comp .",
    "_ 184 , 1234 .",
    "doi : http://dx.doi.org/10.1016/j.cpc.2012.11.019[10.1016/j.cpc.2012.11.019 ]      machnes , s. , sander , u. , glaser , s. j. , de fouquieres , p. , gruslys , a. , schirmer , s. , and schulte - herbrueggen , t. ( 2011 ) .",
    "comparing , optimising and benchmarking quantum control algorithms in a unifying programming framework .",
    "a _ 84 , 022305 .",
    "doi : http://dx.doi.org/10.1103/physreva.84.022305[10.1103/physreva.84.022305 ]      fritzsche , s. ( 2014 ) .",
    "the feynman tools for quantum information processing : design and implementation .",
    "_ 185 , 1697 .",
    "doi : http://dx.doi.org/10.1016/j.cpc.2014.02.003[10.1016/j.cpc.2014.02.003 ]    juli - daz , b. , burdis , j. m. , and tabakin , f. ( 2006 ) .",
    "qdensit  a mathematica quantum computer simulation . _",
    "comm . _ 174 , 914 .",
    "doi : http://dx.doi.org/10.1016/j.cpc.2005.12.021[10.1016/j.cpc.2005.12.021 ]      miszczak , j. a. ( 2013 ) . employing online quantum random number generators for generating truly random quantum states in _",
    "mathematica_. _ comp .",
    "_ 184 , 257 .",
    "doi : http://dx.doi.org/10.1016/j.cpc.2012.08.012[10.1016/j.cpc.2012.08.012 ]          matsumoto , m. and nishimura , t. ( 1998 ) .",
    "mersenne twister : a 623-dimensionally equidistributed uniform pseudorandom number generator .",
    "_ acm trans . model .",
    "doi : http://dx.doi.org/10.1145/272991.272995[10.1145/272991.272995 ]        petersen , w. p. ( 1994 ) .",
    "lagged fibonacci series random number generators for the nec sx-3 .",
    "j. high speed comp . _ 06 , 387 .",
    "doi : http://dx.doi.org/10.1142/s0129053394000202[10.1142/s0129053394000202 ]        yczkowski , k. , horodecki , p. , sanpera , a. , and lewenstein , m. ( 1998 ) .",
    "volume of the set of separable states .",
    "rev . a _ 58 , 883 .",
    "doi : http://dx.doi.org/10.1103/physreva.58.883[10.1103/physreva.58.883 ]      shang , j. , seah , y .- l .",
    ", ng , h. k. , nott , d. j. , and englert , b .- g .",
    "monte carlo sampling from the quantum state space . i. _ new j. phys . _ 17 , 043017 .",
    "doi : http://dx.doi.org/10.1088/1367-2630/17/4/043017[10.1088/1367-2630/17/4/043017 ]        grimme , c. ( 2015 ) . picking a uniformly random point from an arbitrary simplex .",
    "_ https://www.researchgate.net/profile/christian_grimme/publication/275348534_picking_a_uniformly_random_point_from_an_arbitrary_simplex/links/553a08800cf247b858815a6b.pdf?origin=publication_list&ev=prf_pub_xdl[technical report ] to university of mnster_. doi : http://dx.doi.org/10.13140/rg.2.1.3807.6968[10.13140/rg.2.1.3807.6968 ]              anderson , e. , bai , z. , bischof , c. , blackford , s. , demmel , j. , dongarra , j. , du croz , j. , greenbaum , a. , hammarling , s. , mckenney , a. , and sorensen , d. ( 1999 ) .",
    "_ lapack users guide _",
    "( 3rd ed . ) .",
    "philadelphia : society for industrial and applied mathematics .",
    "yczkowski , k. , and sommers , h .- j .",
    "( 2001 ) . induced measures in the space of mixed quantum states .",
    "_ j. phys .",
    "_ 34 , 7111 .",
    "doi : http://dx.doi.org/10.1088/0305-4470/34/35/335[10.1088/0305-4470/34/35/335 ]      al osipov , v. , sommers , h .- j . , and yczkowski , k. ( 2010 ) .",
    "random bures mixed states and the distribution of their purity . _ j. phys . a : math .",
    "_ 43 , 055302 .",
    "doi : http://dx.doi.org/10.1088/1751-8113/43/5/055302[10.1088/1751-8113/43/5/055302 ]"
  ],
  "abstract_text": [
    "<S> the usefulness of generating random configurations is recognized in many areas of knowledge . </S>",
    "<S> fortran was born for scientific computing and has been one of the main programming languages in this area since then . and several ongoing projects targeting towards its betterment indicate that it will keep this status in the decades to come . in this article , we describe fortran codes produced , or organized , for the generation of the following random objects : numbers , probability vectors , unitary matrices , and quantum state vectors and density matrices . </S>",
    "<S> some matrix functions are also included and may be of independent interest . </S>"
  ]
}