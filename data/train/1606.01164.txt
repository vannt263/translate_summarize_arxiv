{
  "article_text": [
    "pattern recognition and models of associative memory @xcite are closely related . consider image classification as an example of pattern recognition . in this problem ,",
    "the network is presented with an image and the task is to label the image . in the case of associative memory the network stores",
    "a set of memory vectors . in a typical query",
    "the network is presented with an incomplete pattern resembling , but not identical to , one of the stored memories and the task is to recover the full memory .",
    "pixel intensities of the image can be combined together with the label of that image into one vector @xcite , which will serve as a memory for the associative memory .",
    "then the image itself can be thought of as a partial memory cue .",
    "the task of identifying an appropriate label is a subpart of the associative memory reconstruction .",
    "there is a limitation in using this idea to do pattern recognition .",
    "the standard model of associative memory works well in the limit when the number of stored patterns is much smaller than the number of neurons @xcite , or equivalently the number of pixels in an image . in order to do pattern recognition with small error rate",
    "one would need to store many more memories than the typical number of pixels in the presented images .",
    "this is a serious problem .",
    "it can be solved by modifying the standard energy function of associative memory , quadratic in interactions between the neurons , by including in it higher order interactions . by properly designing the energy function ( or hamiltonian ) for these models with higher order interactions one can store and reliably retrieve many more memories than the number of neurons in the network .",
    "deep neural networks have proven to be useful for a broad range of problems in machine learning including image classification , speech recognition , object detection , etc .",
    "these models are composed of several layers of neurons , so that the output of one layer serves as the input to the next layer .",
    "each neuron calculates a weighted sum of the inputs and passes the result through a non - linear activation function .",
    "traditionally , deep neural networks used activation functions such as hyperbolic tangents or logistics . learning the weights in such networks , using a backpropagation algorithm , faced serious problems in the 1980s and 1990s .",
    "these issues were largely resolved by introducing unsupervised pre - training , which made it possible to initialize the weights in such a way that the subsequent backpropagation could only gently move boundaries between the classes without destroying the feature detectors @xcite .",
    "more recently , it was realized that the use of rectified linear units ( relu ) instead of the logistic functions speeds up learning and improves generalization @xcite . rectified linear functions are usually interpreted as firing rates of biological neurons .",
    "these rates are equal to zero if the input is below a certain threshold and linearly grow with the input if it is above the threshold . to mimic biology",
    "the output should be small or zero if the input is below the threshold , but it is much less clear what the behavior of the activation function should be for inputs exceeding the threshold .",
    "should it grow linearly , sub - linearly , or faster than linearly ?",
    "how does this choice affect the computational properties of the neural network ?",
    "are there other functions that would work even better than the rectified linear units ?",
    "these questions to the best of our knowledge remain open .",
    "this paper examines these questions through the lens of associative memory .",
    "we start by discussing a family of models of associative memory with large capacity .",
    "these models use higher order ( higher than quadratic ) interactions between the neurons in the energy function .",
    "the associative memory description is then mapped onto a neural network with one hidden layer and an unusual activation function , related to the hamiltonian .",
    "we show that by varying the power of interaction vertex in the energy function ( or equivalently by changing the activation function of the neural network ) one can force the model to learn representations of the data either in terms of features or in terms of prototypes .",
    "the standard model of associative memory @xcite uses a system of @xmath0 binary neurons , with values @xmath1 . a configuration of all the neurons",
    "is denoted by a vector @xmath2 .",
    "the model stores @xmath3 memories , denoted by @xmath4 , which for the moment are also assumed to be binary .",
    "the model is defined by an energy function , which is given by @xmath5 and a dynamical update rule that decreases the energy at every update .",
    "the basic problem is the following : when presented with a new pattern the network should respond with a stored memory which most closely resembles the input .    there has been a large amount of work in the community of statistical physicists investigating the capacity of this model , which is the maximal number of memories that the network can store and reliably retrieve .",
    "it has been demonstrated @xcite that in case of random memories this maximal value is of the order of @xmath6 .",
    "if one tries to store more patterns , several neighboring memories in the configuration space will merge together producing a ground state of the hamiltonian  ( [ standard_energy ] ) , which has nothing to do with any of the stored memories . by modifying the hamiltonian ( [ standard_energy ] ) in a way that removes second order correlations between the stored memories , it is possible @xcite to improve the capacity to @xmath7 .",
    "the mathematical reason why the model ( [ standard_energy ] ) gets confused when many memories are stored is that several memories produce contributions to the energy which are of the same order . in other words",
    "the energy decreases too slowly as the pattern approaches a memory in the configuration space . in order to take care of this problem ,",
    "consider a modification of the standard energy @xmath8 in this formula @xmath9 is some smooth function ( summation over index @xmath10 is assumed ) .",
    "the computational capabilities of the model will be illustrated for two cases .",
    "first , when @xmath11 ( @xmath12 is an integer number ) , which is referred to as a polynomial energy function .",
    "second , when @xmath9 is a rectified polynomial energy function @xmath13 in the case of the polynomial function with @xmath14 the network reduces to the standard model of associative memory @xcite .",
    "if @xmath15 each term in ( [ hamilt ] ) becomes sharper compared to the @xmath14 case , thus more memories can be packed into the same configuration space before cross - talk intervenes .",
    "having defined the energy function one can derive an iterative update rule that leads to decrease of the energy .",
    "we use asynchronous updates flipping one unit at a time .",
    "the update rule is : @xmath16,\\ ] ] the argument of the sign function is the difference of two energies .",
    "one , for the configuration with all but the @xmath10-th units clumped to their current states and the @xmath10-th unit in the `` off '' state .",
    "the other one for a similar configuration , but with the @xmath10-th unit in the `` on '' state .",
    "this rule means that the system updates a unit , given the states of the rest of the network , in such a way that the energy of the entire configuration decreases . for the case of polynomial energy function a very similar family of models",
    "was considered in @xcite .",
    "the update rule in those models was based on the induced magnetic fields , however , and not on the difference of energies .",
    "the two are slightly different due to the presence of self - coupling terms . throughout this paper",
    "we use energy - based update rules .",
    "how many memories can model ( [ update_rule ] ) store and reliably retrieve ? consider the case of random patterns , so that each element of the memories is equal to @xmath1 with equal probability .",
    "imagine that the system is initialized in a state equal to one of the memories ( pattern number @xmath17 ) .",
    "one can derive a stability criterion , i.e. the upper bound on the number of memories such that the network stays in that initial state .",
    "define the energy difference between the initial state and the state with spin @xmath10 flipped @xmath18 where the polynomial energy function is used .",
    "this quantity has a mean @xmath19 , which comes from the term with @xmath20 , and a variance ( in the limit of large @xmath0 ) @xmath21 the @xmath10-th bit becomes unstable when the magnitude of the fluctuation exceeds the energy gap @xmath22 and the sign of the fluctuation is opposite to the sign of the energy gap .",
    "thus the probability that the state of a single neuron is unstable ( in the limit when both @xmath0 and @xmath3 are large , so that the noise is effectively gaussian ) is equal to @xmath23 requiring that this probability is less than a small value , say @xmath24 , one can find the upper limit on the number of patterns that the network can store @xmath25 where @xmath26 is a numerical constant , which depends on the ( arbitrary ) threshold @xmath24 .",
    "the case @xmath14 corresponds to the standard model of associative memory and gives the well known result @xmath27 . for the perfect recovery of a memory ( @xmath28 ) one obtains @xmath29 for higher powers @xmath12 the capacity rapidly grows with @xmath0 in a non - linear way , allowing the network to store and reliably retrieve many more patterns than the number of neurons that it has , in accord - dependent coefficient in ( [ perfect_capacity ] ) depends on the exact form of the hamiltonian and the update rule .",
    "references @xcite do not allow repeated indices in the products over neurons in the energy function , therefore obtain a different coefficient . in @xcite the hamiltonian coincides with ours , but the update rule is different , which , however , results in exactly the same coefficient as in ( [ perfect_capacity ] ) . ] with @xcite .",
    "this non - linear scaling relationship between the capacity and the size of the network is the phenomenon that we exploit .",
    "we study a family of models of this kind as a function of @xmath12 . at small @xmath12",
    "many terms contribute to the sum over @xmath17 in ( [ hamilt ] ) approximately equally . in the limit @xmath30",
    "the dominant contribution to the sum comes from a single memory , which has the largest overlap with the input .",
    "it turns out that optimal computation occurs in the intermediate range .",
    "the case of xor is elementary , yet instructive . it is presented here for three reasons .",
    "first , it illustrates the construction ( [ hamilt ] ) in this simplest case .",
    "second , it shows that as @xmath12 increases , the computational capabilities of the network also increase .",
    "third , it provides the simplest example of a situation in which the number of memories is larger than the number of neurons , yet the network works reliably .    the problem is the following : given two inputs @xmath31 and @xmath32 produce an output @xmath33 such that the truth table @xmath34 is satisfied .",
    "we will treat this task as an associative memory problem and will simply embed the four examples of the input - output triplets @xmath35 in the memory",
    ". therefore the network has @xmath36 identical units : two of which will be used for the inputs and one for the output , and @xmath37 memories @xmath4 , which are the four lines of the truth table .",
    "thus , the energy ( [ hamilt ] ) is equal to @xmath38 where the energy function is chosen to be a polynomial of degree @xmath12 . for odd @xmath12 ,",
    "energy ( [ energy_xor ] ) is an odd function of each of its arguments , @xmath39 . for even @xmath12",
    ", it is an even function .",
    "for @xmath40 it is equal to zero .",
    "thus , if evaluated on the corners of the cube @xmath41 , it reduces to @xmath42 where coefficients @xmath43 denote numerical constants .    in order to solve the xor problem one can present to the network an `` incomplete pattern '' of inputs @xmath44 and",
    "let the output @xmath33 adjust to minimize the energy of the three - spin configuration , while holding the inputs fixed .",
    "the network clearly can not solve this problem for @xmath40 and @xmath14 , since the energy does not depend on the spin configuration .",
    "the case @xmath14 is the standard model of associative memory .",
    "it can also be thought of as a linear perceptron , and the inability to solve this problem represents the well known statement @xcite that linear perceptrons can not compute xor without hidden neurons .",
    "the case of odd @xmath45 provides an interesting solution .",
    "given two inputs , @xmath31 and @xmath32 , one can choose the output @xmath33 that minimizes the energy .",
    "this leads to the update rule @xmath46=sign\\big[-xy\\big]\\ ] ] thus , in this simple case the network is capable of solving the problem for higher odd values of @xmath12 , while it can not do so for @xmath40 and @xmath14 . in case of rectified polynomials ,",
    "a similar construction solves the problem for any @xmath47 .",
    "the network works well in spite of the fact that @xmath48 .",
    "the mnist data set is a collection of handwritten digits , which has 60000 training examples and 10000 test images .",
    "the goal is to classify the digits into 10 classes .",
    "the visible neurons , one for each pixel , are combined together with 10 classification neurons in one vector that defines the state of the network .",
    "the visible part of this vector is treated as an `` incomplete '' pattern and the associative memory is allowed to calculate a completion of that pattern , which is the label of the image .    dense associative memory ( [ hamilt ] )",
    "is a recurrent network in which every neuron can be updated multiple times . for the purposes of digit classification , however",
    ", this model will be used in a very limited capacity , allowing it to perform only one update of the classification neurons .",
    "the network is initialized in the state when the visible units @xmath49 are clamped to the intensities of a given image and the classification neurons are in the off state @xmath50 ( see fig.[network]a ) .",
    "the network is allowed to make one update of the classification neurons , while keeping the visible units clamped , to produce the output @xmath51 .",
    "the update rule is similar to ( [ update_rule ] ) except that the sign is replaced by the continuous function @xmath52 @xmath53,\\ ] ] where parameter @xmath54 regulates the slope of @xmath55 .",
    "the proposed digit class is given by the number of a classification neuron producing the maximal output . throughout this section",
    "the rectified polynomials  ( [ rect_polynom ] ) are used as functions @xmath56 . to learn effective memories for use in pattern classification ,    [ robustness ]    an objective function",
    "is defined ( see appendix a in supplemental ) , which penalizes the discrepancy between the output @xmath51 and the target output .",
    "this objective function is then minimized using a backpropagation algorithm .",
    "the learning starts with random memories drawn from a gaussian distribution .",
    "the backpropagation algorithm then finds a collection of @xmath3 memories @xmath57 , which minimize the classification error on the training set .",
    "the memories are normalized to stay within the @xmath58 range , absorbing their overall scale into the definition of the parameter  @xmath54 .",
    "the performance of the proposed classification framework is studied as a function of the power @xmath12 .",
    "the next section shows that a rectified polynomial of power @xmath12 in the energy function is equivalent to the rectified polynomial of power @xmath59 used as an activation function in a feedforward neural network with one hidden layer of neurons .",
    "currently , the most common choice of activation functions for training deep neural networks is the relu , which in our language corresponds to @xmath14 for the energy function .",
    "although not currently used to train deep networks , the case @xmath60 would correspond to a rectified parabola as an activation function .",
    "we start by comparing the performances of the dense memories in these two cases .",
    "the performance of the network depends on @xmath12 and on the remaining hyperparameters , thus the hyperparameters should be optimized for each value of @xmath12 . in order to test the variability of performances for various choices of hyperparameters at a given @xmath12 , a window of hyperparameters for which the network works well on the validation set ( see the appendix a in supplemental ) was determined .",
    "then many networks were trained for various choices of the hyperparameters from this window to evaluate the performance on the test set .",
    "the test errors as training progresses are shown in fig.[robustness]b .",
    "while there is substantial variability among these samples , on average the cluster of trajectories for @xmath60 achieves better results on the test set than that for @xmath14 .",
    "these error rates should be compared with error rates for backpropagation alone without the use of generative pretraining , various kinds of regularizations ( for example dropout ) or adversarial training , all of which could be added to our construction if necessary . in this class of models",
    "the best published results are all in the @xmath61 range @xcite , see also controls in @xcite .",
    "this agrees with our results for @xmath14 .",
    "the @xmath60 case does slightly better than that as is clear from fig.[robustness]b , with all the samples performing better than @xmath61 .",
    "higher rectified polynomials are also faster in training compared to relu . for the @xmath14 case , the error crosses the @xmath62 threshold for the first time during training in the range of 179 - 312 epochs . for the @xmath60 case",
    ", this happens earlier on average , between 158 - 262 epochs .",
    "for higher powers @xmath12 this speed - up is larger .",
    "this is not a huge effect for a small dataset such as mnist .",
    "however , this speed - up might be very helpful for training large networks on large datasets , such as imagenet .",
    "a similar effect was reported earlier for the transition between saturating units , such as logistics or hyperbolic tangents , to relu @xcite . in our family of models that result corresponds to moving from @xmath40 to @xmath14 .      how does the computation performed by the neural network change as @xmath12 varies ?",
    "there are two extreme classes of theories of pattern recognition : feature - matching and formation of a prototype .",
    "according to the former , an input is decomposed into a set of features , which are compared with those stored in the memory .",
    "the subset of the stored features activated by the presented input is then interpreted as an object .",
    "one object has many features ; features can also appear in more than one object .",
    "the prototype theory provides an alternative approach , in which objects are recognized as a whole .",
    "the prototypes do not necessarily match the object exactly , but rather are blurred abstract representations which include all the features that an object has .",
    "we argue that the computational models proposed here describe feature - matching mode of pattern recognition for small @xmath12 and the prototype regime for large @xmath12 .",
    "this can be anticipated from the sharpness of contributions that each memory makes to the total energy ( [ hamilt ] ) . for large @xmath12 the function @xmath9 peaks",
    "much more sharply around each memory compared to the case of small @xmath12 .",
    "thus , at large @xmath12 all the information about a digit must be written in only one memory , while at small @xmath12 this information can be distributed among several memories . in the case of intermediate @xmath12",
    "some learned memories behave like features while others behave like prototypes .",
    "these two classes of memories work together to model the data in an efficient way .",
    "the feature to prototype transition is clearly seen in memories shown in fig.[feature_to_prot ] . for @xmath14 or @xmath63 each memory does not look like a digit , but resembles a pattern of activity that might be useful for recognizing several different digits . for @xmath64 many of the memories can be recognized as digits , which are surrounded by white margins representing elements of memories having approximately zero values .",
    "these margins describe the variability of thicknesses of lines of different training examples and mathematically mean that the energy ( [ hamilt ] ) does not depend on whether the corresponding pixel is on or off . for @xmath65",
    "most of the memories represent prototypes of whole digits or large portions of digits , with a small admixture of feature memories that do not resemble any digit .",
    "the feature to prototype transition can be visualized by showing the feature detectors in situations when there is a natural ordering of pixels . such ordering exists in images , for example . in general situations ,",
    "however , there is no preferred permutation of visible neurons that would reveal this structure ( _ e.g. _ in the case of genomic data ) .",
    "it is therefore useful to develop a measure that permits a distinction to be made between features and prototypes in the absence of such visual space . towards the end of training",
    "most of the recognition connections @xmath66 are approximately equal to @xmath67 .",
    "one can choose an arbitrary cutoff , and count the number of recognition connections that are in the `` on '' state ( @xmath68 ) for each memory .",
    "the distribution function of this number is shown on the left histogram in fig.[feature_to_prot ] .",
    "intuitively , this quantity corresponds to the number of different digit classes that a particular memory votes for . at small @xmath12 , most of the memories vote for three to five different digit classes , a behavior characteristic of features .",
    "as @xmath12 increases , each memory specializes and votes for only a single class . in the case",
    "@xmath65 , for example , more than @xmath69 of memories vote for only one class , a behavior characteristic of prototypes .",
    "a second way to see the feature to prototype transition is to look at the number of memories which make large contributions to the classification decision ( right histogram in fig.[feature_to_prot ] ) . for each test image",
    "one can find the memory that makes the largest contribution to the energy gap , which is the sum over @xmath17 in ( [ update_rule_mnist ] ) . then one can count the number of memories that contribute to the gap by more than 0.9 of this largest contribution . for small @xmath12 , there are many memories that satisfy this criterion and the distribution function has a long tail . in this regime",
    "several memories are cooperating with each other to make a classification decision . for @xmath65 , however , more than 8000 of 10000 test images do not have a single other memory that would make a contribution comparable with the largest one .",
    "this result is not sensitive to the arbitrary choice ( @xmath70 ) of the cutoff .",
    "interestingly , the performance remains competitive even for very large @xmath71 ( see fig.[feature_to_prot ] ) in spite of the fact that these networks are doing a very different kind of computation compared with that at small  @xmath12 .",
    "in this section we derive a simple duality between the dense associative memory and a feedforward neural network with one layer of hidden neurons .",
    "in other words , we show that the same computational model has two very different descriptions : one in terms of associative memory ,    the other one in terms of a network with one layer of hidden units .",
    "using this correspondence one can transform the family of dense memories , constructed for different values of power @xmath12 , to the language of models used in deep learning .",
    "the resulting neural networks are guaranteed to inherit computational properties of the dense memories such as the feature to prototype transition .",
    "the construction is very similar to ( [ update_rule_mnist ] ) , except that the classification neurons are initialized in the state when all of them are equal to @xmath72 , see fig.[deep_learning ] . in the limit",
    "@xmath73 one can expand the function @xmath56 in ( [ update_rule_mnist ] ) so that the dominant contribution comes from the term linear in @xmath74 .",
    "then @xmath75 = g\\big [ \\sum\\limits_{\\mu=1}^k \\xi^\\mu_\\alpha\\ f^\\prime \\big(\\xi^\\mu_i v_i\\big ) \\big ] = g\\big [ \\sum\\limits_{\\mu=1}^k \\xi^\\mu_\\alpha\\ f\\big(\\xi^\\mu_i v_i\\big ) \\big],\\label{duality}\\ ] ] where the parameter @xmath54 is set to @xmath76 ( summation over the visible index @xmath10 is assumed ) .",
    "thus , the model of associative memory with one step update is equivalent to a conventional feedforward neural network with one hidden layer provided that the activation function from the visible layer to the hidden layer is equal to the derivative of the energy function @xmath77 the visible part of each memory serves as an incoming weight to the hidden layer , and the recognition part of the memory serves as an outgoing weight from the hidden layer .",
    "the expansion used in ( [ duality ] ) is justified by a condition @xmath78 , which is satisfied for most common problems , and is simply a statement that labels contain far less information than the data itself .",
    "from the point of view of associative memory , the dominant contribution shaping the basins of attraction comes from the low energy states .",
    "therefore mathematically it is determined by the asymptotics of the activation function @xmath79 , or the energy function @xmath9 , at @xmath80 .",
    "thus different activation functions having similar asymptotics at @xmath80 should fall into the same universality class and should have similar computational properties . in the table below we list some common activation @xmath81 functions used in models of deep learning , their associative memory counterparts and the power @xmath12 which determines the asymptotic behavior of the energy function at @xmath80.the results of section 4 suggest that for not too large @xmath12 the speed of learning should improve as @xmath12 increases .",
    "this is consistent with the previous observation that relu are faster in training than hyperbolic tangents and logistics @xcite .",
    "the last row of the table corresponds to rectified polynomials of higher degrees . to the best of our knowledge",
    "these activation functions have not been used in neural networks .",
    "our results suggest that for some problems these higher power activation functions should have even better computational properties than the rectified liner units .",
    "what is the relationship between the capacity of the dense associative memory , calculated in section  [ capacity_section ] , and the neural network with one step update that is used for digit classification ? consider the limit of very large @xmath54 in ( [ update_rule_mnist ] ) , so that the hyperbolic tangent is approximately equal to the sign function , as in ( [ update_rule ] ) . in the limit of sufficiently large @xmath12 the network is operating in the prototype regime .",
    "the presented image places the initial state of the network close to a local minimum of energy , which corresponds to one of the prototypes . in most cases",
    "the one step update of the classification neurons is sufficient to bring this initial state to the nearest local minimum , thus completing the memory recovery .",
    "this is true , however , only if the stored patterns are stable and have basins of attraction around them of at least the size of one neuron flip , which is exactly ( in the case of random patterns ) the condition given by ( [ perfect_capacity ] ) . for correlated patterns",
    "the maximal number of stored memories might be different from ( [ perfect_capacity ] ) , however it still rapidly increases with increase of @xmath12 .",
    "the associative memory with one step update ( or the feedforward neural network ) is exactly equivalent to the full associative memory with multiple updates in this limit .",
    "the calculation with random patterns thus theoretically justifies the expectation of a good performance in the prototype regime .",
    "to summarize , this paper contains three main results .",
    "first , it is shown how to use the general framework of associative memory for pattern recognition .",
    "second , a family of models is constructed that can learn representations of the data in terms of features or in terms of prototypes , and that smoothly interpolates between these two extreme regimes by varying the power of interaction vertex .",
    "third , there exists a simple duality between a one step update version of the associative memory model and a feedforward neural network with one layer of hidden units and an unusual activation function .",
    "this duality makes it possible to propose a class of activation functions that encourages the network to learn representations of the data with various proportions of features and prototypes .",
    "these activation functions can be used in models of deep learning and should be more effective than the standard choices .",
    "they allow the networks to train faster .",
    "we have also observed an improvement of generalization ability in networks trained with the rectified parabola activation function compared to the relu for the case of mnist .",
    "while these ideas were illustrated using the simplest architecture of the neural network with one layer of hidden units , the proposed activation functions can also be used in multilayer architectures .",
    "we did not study various regularizations ( weight decay , dropout , etc ) , which can be added to our construction .",
    "the performance of the model supplemented with these regularizations , as well as performance on other common benchmarks , will be reported elsewhere .",
    "the networks were trained using stochastic gradient descent with minibatches of a relatively large size , 100 digits of each class , 1000 digits in total .",
    "training was done for 3000 epochs .",
    "initial weights were generated from a gaussian distribution @xmath82 .",
    "momentum ( @xmath83 ) was used to smooth out oscillations of gradients coming from the individual minibatches .",
    "the learning rate was decreasing with time according to @xmath84 where @xmath85 is the number of epoch .",
    "typical values are @xmath86 . the weights ( memories )",
    "were updated after each minibatch according to @xmath87 where @xmath85 is the number of update , @xmath88 is an index which unites the visible and the classification units .",
    "the proposed update in ( [ momentum_rule ] ) is normalized so that the largest update of the weights for each hidden unit ( memory ) is equal to @xmath74 .",
    "this normalization is equivalent to using different learning rates for each individual memory .",
    "it prevents the network from getting stuck on a plateau .",
    "all weights were constrained to stay within the @xmath89 range .",
    "therefore , if after an update some weights exceeded @xmath90 , they were truncated to make them equal to @xmath90 ( and similarly for @xmath91 ) .",
    "the slope of the function @xmath55 in ( [ update_rule_mnist ] ) is controlled by the effective temperature @xmath92 , which is measured in `` neurons '' or `` pixels '' . for large @xmath12",
    "the temperature can be kept constant throughout the entire training ( @xmath93 ) . for small @xmath12 we found useful to start at a high temperature @xmath94 , and then linearly decrease it to the final value @xmath95 during the first 200 epochs ( @xmath96 , @xmath97 ) .",
    "the temperature stays constant after that .",
    "all the models have @xmath98 memories ( hidden units ) .",
    "the mnist dataset contains 60000 training examples , which were randomly split into 50000 training cases and 10000 validation cases . for each hyperparameter a window of values",
    "was selected , such that the error on the validation set after 3000 epochs is less than a certain threshold .",
    "after that the entire set of 60000 examples was used to train the network ( for 3000 epochs ) for various values of the hyperparameters from this optimal window to evaluate the performance on the test set .",
    "the validation set was not used for early stopping .",
    "the objective function is given by @xmath99 where @xmath100 is the target output ( @xmath101 for the wrong classes and @xmath102 for the correct class ) .",
    "the case @xmath103 corresponds to the standard quadratic error . for large powers",
    "@xmath104 the function @xmath105 is small for @xmath106 and rapidly grows for @xmath107 .",
    "therefore , higher values of @xmath104 emphasize training examples which produce largest discrepancy with the target output more strongly compared to those examples which are already sufficiently close to the target output .",
    "such emphasis encourages the network to concentrate on correcting mistakes and moving the decision boundary farther away from the barely correct examples rather than on fitting better and better the training examples which have already been easily and correctly classified .",
    "although much of what we discuss is valid for arbitrary value of @xmath104 , including @xmath103 , we found that higher values of @xmath104 reduce overfitting and improve generalization at least in the limit of large @xmath12 .",
    "for small @xmath12 , we used @xmath108 . for @xmath109 , larger values of @xmath110 worked better .",
    "we also tried cross - entropy objective function together with softmax output units .",
    "the results were worse and are not presented here .",
    "the training can be done both in the associative memory description and in the neural network description .",
    "the two are related by the duality of section [ duality_section ] .",
    "below we give the explicit expressions for the update rule ( [ momentum_rule ] ) for these two methods .",
    "consider a minibatch of size @xmath111 .",
    "in the associative memory framework one can define two @xmath112 matrices @xmath113 and @xmath114 ( index @xmath115 runs over the training examples of the minibatch , greek indices @xmath116 run over classification neurons , index @xmath117 runs over visible neurons , indices @xmath118 unite all the neurons , visible and classification ) .",
    "@xmath119 the update rule ( [ update_rule_mnist ] ) can then be rewritten as @xmath120,\\ ] ] where @xmath121 is the rectified polynomial of power @xmath12 , and summation over index @xmath122 is assumed .",
    "the derivative of the objective function ( [ objective_function ] ) is given by @xmath123 \\big [ f_{n-1}(\\xi^\\mu_j v_j^{\\alpha a } ) v_i^{\\alpha a } - f_{n-1}(\\xi^\\mu_j u_j^{\\alpha a } ) u_i^{\\alpha a}\\big]\\ ] ] the indices @xmath124 and @xmath125 can be united in one tensor product index , so that the two sums can be efficiently calculated using matrix - matrix multiplication .    while this way of training the network is most closely related to the theoretical calculations presented in the main text , it is computationally inefficient .",
    "the second dimension of the matrices @xmath126 and @xmath127 is @xmath128 times larger than the size of the minibatch .",
    "this can become problematic if the classification problem involves many classes .",
    "for this reason it is computationally easier to train the dense memory in the dual description , which is more closely related to the conventional methods used in deep learning . in this framework",
    ", the minibatch matrix @xmath129 has @xmath130 elements .",
    "the update rule is @xmath131,\\ ] ] where @xmath132 is a rectified polynomial of power is dual to the activation function of power @xmath59 . here , for the sake of notations",
    ", we describe the training procedure for general @xmath12 . ]",
    "@xmath12 , and summation over the visible index @xmath117 is assumed .",
    "the derivatives of the objective function ( [ objective_function ] ) are given by @xmath133 \\xi^\\mu_\\alpha f_{n-1}\\big(\\xi^\\mu_j v_j^a \\big ) v_i^a\\ ] ] @xmath134   f_{n}\\big(\\xi^\\mu_j v_j^a \\big),\\ ] ] where summation over the visible index @xmath135 is assumed .",
    "these expressions are very similar to the conventional derivatives used in networks with rectified linear activation functions , but they use power activation functions instead . the minibatch training can be efficiently implemented on gpu .",
    "in section [ capacity_section ] of the main text a theoretical calculation of the capacity for model ( [ update_rule ] ) was presented in the case of power energy functions . in section [ duality_section ] an intuitive argument ( based on the low energy states of the hamiltonian ) was given arguing that the capacities of the models with power energy functions and rectified polynomial energy functions should be very similar . in this appendix",
    "we compare the theoretical results of section [ capacity_section ] with numerical simulations and numerically validate the intuitive argument about low energy states .",
    "a random set of @xmath98 binary memory vectors was generated in the model with @xmath136 neurons .",
    "a collection of @xmath137 random initial configurations of binary spins were evolved according to ( [ update_rule ] ) until convergence .",
    "the quality of memory recovery was measured by the overlap between the final configuration of spins @xmath138 and the closest memory , @xmath139 .",
    "if the recovery is perfect , this quantity is equal to @xmath0 ; if some of the spins failed to match a memory vector , this quantity is smaller than @xmath0 . in fig .",
    "[ overlap_histograms ] the histograms of the overlaps are shown for @xmath140 in case of power and rectified polynomial energy functions .",
    "for @xmath141 the number of memories ( @xmath98 ) places the model above the capacity ( according to ( [ perfect_capacity ] ) , @xmath142 for @xmath14 and @xmath143 for @xmath60 ) .",
    "thus , the model is unable to reconstract the memories . for @xmath144 ,",
    "the number of memories is below the capacity ( @xmath145 ) , thus the distribution sharply peaks at perfect recovery . for @xmath146",
    "all @xmath137 samples converge to one of the memories .",
    "qualitatively , this behavior is demonstrated by both power models and rectified models .",
    "a family of models with @xmath147 and @xmath148 was studied . for each combination of @xmath0 and @xmath3 a set of binary memory vectors",
    "was generated to make a model of associative memory .",
    "after that 1000 random binary initial conditions were evolved according to ( [ update_rule ] ) until convergence .",
    "@xmath149 is the number of memories when half ( 500 ) of these samples perfectly converge to one of the memories . in fig .",
    "[ scaling_behavior ] the @xmath149 dependence of @xmath0 is shown for the power and the rectified models with @xmath60 .",
    "the solid curve is given by eq.([perfect_capacity ] ) .",
    "the results of numerical simulations for the case of power activation functions are consistent with the theoretical calculation ( [ perfect_capacity ] ) .",
    "the results for the rectified polynomials are a little bit above the theoretical curve , but show similar non - linear behavior .",
    "we thank b.  chazelle , d.  huse , a.  levine , m.  mitchell , r.  monasson , l.  peliti , d.  raskovalov , b.  xue , and all the members of the simons center for systems biology at ias for useful discussions .",
    "we especially thank y.  roudi for pointing out the reference @xcite to us .",
    "the work of dk is supported by charles l. brown membership at ias .",
    "chen , h.h .",
    ", lee , y.c . , sun , g.z . ,",
    "lee , h.y . ,",
    "maxwell , t. and giles , c.l . , 1986 .",
    "high order correlation model for associative memory . in neural networks for computing ( vol .",
    "86 - 99 ) .",
    "aip publishing .",
    "srivastava , n. , hinton , g. , krizhevsky , a. , sutskever , i. and salakhutdinov , r. , 2014 .",
    "dropout : a simple way to prevent neural networks from overfitting . the journal of machine learning research , 15(1 ) , pp.1929 - 1958 .",
    "wan , l. , zeiler , m. , zhang , s. , lecun , y. and fergus , r. , 2013 .",
    "regularization of neural networks using dropconnect . in proceedings of the 30th international conference on machine learning ( icml-13 ) ( pp .",
    "1058 - 1066 ) ."
  ],
  "abstract_text": [
    "<S> a model of associative memory is studied , which stores and reliably retrieves many more patterns than the number of neurons in the network . </S>",
    "<S> we propose a simple duality between this dense associative memory and neural networks commonly used in deep learning . on the associative memory side of this duality </S>",
    "<S> , a family of models that smoothly interpolates between two limiting cases can be constructed . </S>",
    "<S> one limit is referred to as the feature - matching mode of pattern recognition , and the other one as the prototype regime . on the deep learning side of the duality </S>",
    "<S> , this family corresponds to feedforward neural networks with one hidden layer and various activation functions , which transmit the activities of the visible neurons to the hidden layer . </S>",
    "<S> this family of activation functions includes logistics , rectified linear units , and rectified polynomials of higher degrees . </S>",
    "<S> the proposed duality makes it possible to apply energy - based intuition from associative memory to analyze computational properties of neural networks with unusual activation functions   the higher rectified polynomials which until now have not been used in deep learning . </S>",
    "<S> the utility of the dense memories is illustrated for two test cases : the logical gate xor and the recognition of handwritten digits from the mnist data set . </S>"
  ]
}