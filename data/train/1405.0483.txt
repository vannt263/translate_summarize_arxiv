{
  "article_text": [
    "one can calculate the leading eigenvalue of the non - backtracking matrix numerically and invert to determine the percolation threshold , but the matrix has size @xmath47 , which can become quite large , making the calculation cumbersome .",
    "it can be sped up by using the so - called ihara ( or ihara - bass ) determinant formula as described in  @xcite , where it is shown that the leading eigenvalue of the non - backtracking matrix is also the leading eigenvalue of the @xmath81 matrix @xmath82 where @xmath83 is the diagonal matrix with the node degrees along its diagonal . for a sparse network",
    "this matrix is also sparse , with only @xmath84 nonzero elements  far fewer than the non - backtracking matrix itself  which permits rapid numerical calculation of the leading eigenvalue .",
    "this method was used to calculate the values given in the following section .",
    "we have shown that the inverse leading eigenvalues of the adjacency matrix and the non - backtracking matrix both provide lower bounds on the percolation threshold on a sparse network , but that the non - backtracking matrix always gives a better bound ( or at least no worse ) . moreover , on a network that is locally tree - like the non - backtracking matrix gives the exact threshold .",
    "table  [ tab : results ] shows percolation thresholds , both estimated and measured , for a range of sparse networks . for each network",
    "we have computed an approximation to the true percolation threshold by repeated numerical simulations and the bounds given by the leading eigenvalues of the non - backtracking and adjacency matrices .    on regular lattices ,",
    "the common method for calculating the position of the percolation threshold is to look for the point at which a cluster forms that spans the lattice from edge to edge , but this is not possible on a network since a network has no edges . instead ,",
    "therefore , we identify the percolation threshold by looking at the size of the second - largest cluster .",
    "the largest cluster has size that always increases with increasing  @xmath0 , but the second - largest peaks at the percolation threshold and then falls off again , so the point of largest size can be used as an estimate of the position of the threshold .",
    "as the table shows , the results for the percolation threshold are in good agreement for the two computer - generated networks ( the random graph and the block model ) , which are genuinely tree - like .",
    "the four remaining networks on the other hand are not tree - like and hence we do nt expect exact agreement and this is confirmed by the results in the table .",
    "the degree of disagreement varies from case to case , but in all cases the non - backtracking matrix gives a lower bound on the true threshold , and it gives a better bound than the adjacency matrix .",
    ".percolation thresholds estimated from the eigenvalues of the adjacency and non - backtracking matrices , and measured directly in numerical simulations ( or calculated exactly in the case of the random graph ) .",
    "the networks are : a poisson random graph with average degree  5 and @xmath85 nodes ; a stochastic block model with @xmath85 nodes , four groups , and an average of 4 in - group and 2 out - group edges per node ; electronic circuit 838 from the iscas 89 benchmark set  @xcite ; a snapshot of the internet autonomous system peering structure ; a gnutella peer - to - peer filesharing network  @xcite ; and a copurchasing network of items on amazon.com  @xcite .",
    "the numerical estimates of  @xmath4 are obtained by finding the point at which the size of the second - largest cluster is greatest .",
    "figures in parentheses indicate the error on the last digit . [ cols= \" < , < , <"
  ],
  "abstract_text": [
    "<S> we study percolation on networks , which is used as a model of the resilience of networked systems such as the internet to attack or failure and as a simple model of the spread of disease over human contact networks . </S>",
    "<S> we reformulate percolation as a message passing process and demonstrate how the resulting equations can be used to calculate , among other things , the size of the percolating cluster and the average cluster size . </S>",
    "<S> the calculations are exact for sparse networks when the number of short loops in the network is small , but even on networks with many short loops we find them to be highly accurate when compared with direct numerical simulations . by considering the fixed points of the message passing process </S>",
    "<S> , we also show that the percolation threshold on a network with few loops is given by the inverse of the leading eigenvalue of the so - called non - backtracking matrix .    </S>",
    "<S> percolation , the random occupation of sites or bonds on a lattice or network with independent probability  @xmath0 , is one of the best - studied processes in statistical physics . it is used as a model of porous media  @xcite , granular and composite materials  @xcite , resistor networks  @xcite , forest fires  @xcite , and many other systems of scientific interest . in this paper </S>",
    "<S> we study the bond ( or edge ) percolation process on general networks or graphs , which is used to model the spread of disease  @xcite and network robustness  @xcite in social and technological networks , among other things . </S>",
    "<S> although percolation has been studied extensively on simple model networks such as random graphs  @xcite , there are few analytic results for real - world networks , whose structure is typically more complicated . we show that percolation properties of networks can be calculated using a message passing technique , leading to a range of new results . </S>",
    "<S> in particular , we derive equations for the size of the percolating cluster and the average size of non - percolating clusters , which can be solved rapidly by numerical iteration given the structure of a network and the value of  @xmath0 . by expanding the message passing equations about the critical point we also derive an expression for the position of the percolation threshold , showing that the critical value of  @xmath0 is given by the inverse of the leading eigenvalue of the so - called non - backtracking matrix  @xcite , an edge - based matrix representation of network structure that has found recent use in studies of community detection and centrality in networks  @xcite . </S>",
    "<S> the quantities we calculate are averages over all possible realizations of the randomness inherent in the percolation process , rather than over a single realization , obviating the need for a separate average over realizations as is typically required in direct numerical simulations .    </S>",
    "<S> we focus in particular on sparse networks , those for which only a small fraction of possible edges are present , which includes most real - world networks . </S>",
    "<S> our results are exact for large , sparse networks that contain a vanishing density of short loops , but even for networks that do contain loops , as most real - world networks do , we find the cluster size calculations to be highly accurate and the threshold calculations can be shown to give a lower bound on the true percolation threshold .    </S>",
    "<S> consider , then , a bond percolation process on an arbitrary undirected network of @xmath1 nodes and @xmath2 edges . </S>",
    "<S> edges are occupied uniformly at random with probability  @xmath0 or unoccupied with probability  @xmath3 . </S>",
    "<S> the primary entities of interest are the percolation clusters , sets of nodes connected by occupied edges . </S>",
    "<S> since percolation is a random process , one can not know with certainty the identity of the clusters ahead of time , but some things are known . in general </S>",
    "<S> there will ( with high probability ) be at most one percolating cluster , a cluster that fills a non - vanishing fraction of the network in the limit of large  @xmath1 , plus an extensive number of small clusters of finite average size . </S>",
    "<S> the percolating cluster appears only for sufficiently large values of  @xmath0 and the percolation threshold  @xmath4 is the value above which it appears ; below @xmath4 there are only small clusters .    </S>",
    "<S> define  @xmath5 to be the probability that node  @xmath6 belongs to a small cluster of exactly  @xmath7 nodes , averaged over many realizations of the random percolation process . </S>",
    "<S> if the network is a perfect tree  if it contains no loops  then the size  @xmath7 of the cluster is equal to one ( for node  @xmath6 itself ) plus the sum of the numbers of nodes reachable along each edge attached to  @xmath6 , which is zero if the edge is unoccupied or nonzero otherwise . if , on the other hand , there are loops in the network then this calculation will not , in general , give the exact value of  @xmath7 , since it may be possible to reach the same node along two different occupied edges , which leads to overcounting . </S>",
    "<S> if the network is sparse , however , and _ locally tree - like _ , meaning that in the limit of large network size an arbitrarily large neighborhood around any node takes the form of a tree ( and hence contains no loops ) , then our calculation gives a good approximation , which becomes exact in the @xmath8 limit .    </S>",
    "<S> working in the large  @xmath1 limit then and assuming the network to be locally tree - like , the probability  @xmath5 is equal to the probability that the numbers of nodes reachable along each edge from  @xmath6 add up to  @xmath9 , which we can write as @xmath10    \\,\\delta\\biggl ( s-1 , \\sum_{j\\in\\mathcal{n}_i } s_j \\biggr),\\ ] ] where @xmath11 is the probability that exactly  @xmath7 nodes are reachable along the edge connecting  @xmath6 and  @xmath12 , @xmath13 is the set of immediate network neighbors of node  @xmath6 , and @xmath14 is the kronecker delta .    </S>",
    "<S> we now introduce a probability generating function @xmath15 , whose value is given by @xmath16    \\,\\delta\\biggl ( s-1 , \\sum_{j\\in\\mathcal{n}_i } s_j\\biggr )    \\nonumber\\\\         & = z \\prod_{j\\in\\mathcal{n}_i}\\>\\sum_{s_j=0}^\\infty              \\pi_{i{\\leftarrow}j}(s_j)\\,z^{s_j},\\end{aligned}\\ ] ] which can be conveniently written as @xmath17 where @xmath18 is the generating function for  @xmath11 .    </S>",
    "<S> to calculate @xmath19 , we note that @xmath11 is zero if the edge between @xmath6 and @xmath12 is unoccupied ( which happens with probability  @xmath3 ) and nonzero otherwise ( probability  @xmath0 ) , which means that @xmath20 , and for @xmath21 @xmath22    \\delta\\biggl ( s-1,\\!\\!\\sum_{k\\in\\mathcal{n}_j\\backslash i } s_k\\biggr),\\ ] ] where the notation @xmath23 denotes the set of neighbors of  @xmath12 excluding  @xmath6 . substituting this expression into the definition of @xmath19 above </S>",
    "<S> , we then find that @xmath24 this self - consistent equation for the generating function  @xmath19 suggests a message - passing algorithm : for any value of  @xmath25 one guesses ( for instance at random ) an initial set of values for the  @xmath26 and feeds them into the right - hand side of eq .  , giving a new set of values on the left . repeating this process to convergence </S>",
    "<S> gives a solution for the generating functions , which can then be substituted into eq .   to give the generating function for the cluster probabilities  @xmath5 , from which we can recover the probabilities themselves by differentiating .    </S>",
    "<S> as an example application of this method , note that , since @xmath5 is the probability that @xmath6 belongs to a small ( non - percolating ) cluster of size  @xmath7 , the probability that it belongs to a small cluster of any size is @xmath27 and the probability that it belongs to the percolating cluster is one minus this . </S>",
    "<S> then the expected fraction  @xmath28 of the network occupied by the entire percolating cluster is given by the average over all nodes : @xmath29    = 1 - { 1\\over </S>",
    "<S> n } \\sum_{i=1}^n \\prod_{j\\in\\mathcal{n}_i } h_{i{\\leftarrow}j}(1 ) . </S>",
    "<S> \\label{eq : g1}\\ ] ] setting @xmath30 in eq .   </S>",
    "<S> we have @xmath31 and the solution of this equation , for instance by iteration from a random initial guess , allows us to calculate the size of the percolating cluster  @xcite . </S>",
    "<S> we give illustrative applications to several networks below .    as another example , consider the case were vertex  @xmath6 does not belong to the percolating cluster . </S>",
    "<S> then the expected size  @xmath32 of the cluster it does belong to is given by @xmath33 and , differentiating eq .  </S>",
    "<S> , we have @xmath34                 \\prod_{k\\in\\mathcal{n}_j\\backslash i } h_{j{\\leftarrow}k}(1 ) . </S>",
    "<S> \\label{eq : derivative}\\ ] ] by iterating both eq .   and eq .   from random initial values and </S>",
    "<S> substituting the results into eq .   </S>",
    "<S> we can calculate the expected cluster size . </S>",
    "<S> or we can average over all vertices to calculate the network - wide average size of a non - percolating cluster .    </S>",
    "<S> figure  [ fig : results ] shows results from the application of these techniques to the calculation of cluster sizes for three networks : a computer - generated network which is genuinely tree - like ( so the method should work well ) , and two real - world networks for which percolation could be useful as a model of resilience  a network representation of the internet at the level of autonomous systems and a peer - to - peer file sharing network . also shown on the figure </S>",
    "<S> are results from direct numerical simulations of percolation on the same networks . </S>",
    "<S> as the figure shows , the message passing and numerical results are in excellent agreement , not only for the computer - generated example but also for the two real - world networks , even though the latter are not tree - like . </S>",
    "<S> both the size of the percolating cluster and the mean size of the small clusters are given accurately by the message passing method .     </S>",
    "<S> nodes and mean degree  5 , ( b )  a peer - to - peer file sharing network of @xmath35 nodes  @xcite , and ( c )  a @xmath36-node snapshot of the structure of the internet at the level of autonomous systems . ]    one might ask what the virtue of the message passing method is if one can perform direct percolation simulations of the kind used in fig .  [ </S>",
    "<S> fig : results ] . </S>",
    "<S> there are two answers to this question . </S>",
    "<S> first , simulation algorithms calculate cluster sizes for only a single realization of the randomness inherent in the percolation process . to get accurate results the simulation must be repeated over many realizations , but this can take a significant amount of time and even then the final results still contain statistical errors . the message passing method on the other hand returns the cluster size distribution over all realizations of the randomness in a single calculation .    </S>",
    "<S> second , and perhaps more intriguing , the message passing method not only provides a numerical algorithm for percolation calculations but also allows us to derive new fundamental results by analyzing the behavior of the algorithm itself . as an example </S>",
    "<S> , we can calculate the exact position of the percolation threshold on an arbitrarily large , locally tree - like network , as follows .    </S>",
    "<S> the value @xmath37 for all @xmath38 is trivially a solution of eq .   and hence also a fixed point under the iteration of that equation . </S>",
    "<S> since @xmath39 is the probability that vertex  @xmath6 does not belong to the percolating cluster , this solution corresponds the situation in which no vertex is in the percolating cluster . if the solution is a stable fixed point of eq .  </S>",
    "<S> , then iteration will converge to it and our message passing algorithm will tell us there is no percolating cluster . </S>",
    "<S> if it is unstable , we will end up at a different solution and there is a percolating cluster . </S>",
    "<S> thus the point at which the trivial fixed point @xmath37 goes from being stable to being unstable is precisely the percolation threshold .    </S>",
    "<S> we can determine the stability of the fixed point by linearizing : we write @xmath40 and expand eq .   to leading order in  @xmath41 , which gives @xmath42 , or in matrix notation @xmath43 where @xmath44 is </S>",
    "<S> the @xmath45-element vector with elements  @xmath41 and @xmath46 is a @xmath47 non - symmetric matrix with rows and columns indexed by directed edges @xmath48 and elements @xmath49 . </S>",
    "<S> this matrix is known as the hashimoto or non - backtracking matrix and has been a focus of recent attention for its role in community detection and centrality calculations on networks  @xcite .    </S>",
    "<S> the vector @xmath44 tends to zero and hence the fixed point is stable under iteration of   if and only if @xmath0 times the leading eigenvalue of  @xmath46 is less than unity . </S>",
    "<S> hence we conclude that _ the critical percolation probability  @xmath4 of a sparse , locally tree - like network is equal to the reciprocal of the leading eigenvalue of the non - backtracking matrix . </S>",
    "<S> _    a different result , reminiscent of this one , has been given recently by bollobs  _ et  al . _  </S>",
    "<S> @xcite , who show that in the limit of large network size the critical occupation probability for percolation on a dense network is equal to the reciprocal of the leading eigenvalue of the adjacency matrix . </S>",
    "<S> the result given here is the equivalent for sparse networks .    </S>",
    "<S> as a simple example consider a random @xmath50-regular graph , i.e. ,  a network in which every node has exactly @xmath50 edges but connections are otherwise made at random . </S>",
    "<S> for such a graph the non - backtracking matrix has @xmath51 nonzero elements in each row and column and hence its largest eigenvalue is exactly @xmath51 , giving @xmath52 , which can easily be confirmed to be the correct answer using other methods  @xcite . </S>",
    "<S> the leading eigenvalue of the adjacency matrix on the other hand , which gives the dense - graph percolation threshold as discussed above , is @xmath50 and hence would give a lower , and incorrect , result of  @xmath53 .    </S>",
    "<S> in fact , the leading eigenvalue of the adjacency matrix is never less than the leading eigenvalue of the non - backtracking matrix . to see this , </S>",
    "<S> consider a matrix  @xmath54 , which is a slight variant of the non - backtracking matrix having elements @xmath55 . </S>",
    "<S> an eigenvector  @xmath56 of this matrix with elements @xmath57 and eigenvalue  @xmath58 satisfies @xmath59 which has solutions @xmath60 where @xmath61 are the elements of any eigenvector  @xmath62 of the adjacency matrix  @xmath63 and @xmath58 is the corresponding eigenvalue . thus  @xmath54 and @xmath63 have the same eigenvalues and in particular the leading eigenvalue of @xmath54 is also the leading eigenvalue  @xmath64 of  @xmath63 .    we now observe that the difference @xmath65 has elements @xmath66 , which are all nonnegative , and we apply the so - called collatz  </S>",
    "<S> wielandt formula , a corollary of the perron  </S>",
    "<S> frobenius theorem which says that for any real vector  @xmath67 the leading eigenvalue of  @xmath54 ( which , as we have said , is equal to  @xmath64 ) satisfies @xmath68_i}{x_i }    = \\min_{i : x_i\\ne0 } \\biggl ( \\frac{[{\\mathbf}{b}{\\mathbf}{x}]_i}{x_i }      + \\frac{[\\delta{\\mathbf}{b}{\\mathbf}{x}]_i}{x_i } \\biggr ) . </S>",
    "<S> \\label{eq : cw}\\ ] ] let us choose @xmath67 to be the leading eigenvector of  @xmath46 , which has all elements nonnegative by the perron  frobenius theorem </S>",
    "<S> . then @xmath69_i / x_i = \\lambda_b$ ] , where @xmath70 is </S>",
    "<S> the leading eigenvalue of  @xmath46 , and @xmath71_i / x_i\\ge0 $ ] for all  @xmath6 , so   implies that @xmath72 .    </S>",
    "<S> this in turn implies that _ the dense - matrix result for the percolation threshold based on the adjacency matrix is a lower bound on the percolation threshold of a sparse tree - like graph . </S>",
    "<S> _    </S>",
    "<S> an interesting special case is that of a perfect tree , a network with no loops at all . </S>",
    "<S> percolation , in the sense of a percolating cluster that fills a nonzero fraction of the network in the large-@xmath1 limit , never occurs on such a network  for all @xmath73 the largest cluster occupies only a vanishing fraction of the network and our formalism gives this result correctly . </S>",
    "<S> the diagonal elements of powers of the non - backtracking matrix count numbers of closed non - backtracking walks on a graph  @xcite ( hence the name `` non - backtracking matrix '' ) , but a perfect tree has no such walks , so the trace of every power of the matrix is zero and hence so also are all eigenvalues . thus the reciprocal of the largest eigenvalue diverges and there is no percolation threshold . </S>",
    "<S> the leading eigenvalue of the adjacency matrix , on the other hand , is nonzero on a tree . on a @xmath50-regular tree , for instance , </S>",
    "<S> the leading eigenvalue of the adjacency matrix for large  @xmath1 is  @xmath50 again , implying a percolation threshold of  @xmath74 . </S>",
    "<S> this is , indeed , a lower bound on the true percolation threshold , as it must be , but it is in error by a wide margin .    </S>",
    "<S> all of our results so far have been for tree - like networks , but most real - world networks are not trees . </S>",
    "<S> we can nonetheless use the techniques developed here to say something about the non - tree - like case . on a tree </S>",
    "<S> the number of nodes reachable along the edge from  @xmath6 to  @xmath12 is one ( for node  @xmath12 itself ) plus the sum of the numbers  @xmath75 reachable along every other edge attached to  @xmath12 . on a non - tree , </S>",
    "<S> on the other hand , this sum overestimates the number of reachable nodes because some nodes are reachable along more than one edge from  @xmath12 . </S>",
    "<S> this means that for @xmath76 the generating function  @xmath19 for the true number of reachable nodes will be greater than or equal to the value given by a naive estimate calculated from a simple average over the randomness : @xmath77 where the second inequality follows by an application of the chebyshev integral inequality  @xcite . but </S>",
    "<S> @xmath78 by definition , so we find that on a non - tree - like network the exact equality of eq .   is replaced with an inequality </S>",
    "<S> : @xmath79 suppose , however , that we nonetheless decide to use the exact equality of  , iterating to estimate the generating functions . </S>",
    "<S> if we start from an initial value of @xmath26 equal to the true answer we are looking for ( which we do nt know , but let us suppose momentarily that we do ) , then it is straightforward to see from   that the value of @xmath26 will never increase under the iteration , implying that the value we calculate will be a lower bound on the true value for all  @xmath76 . as we approach the percolation threshold from above in the large size limit , the true value of @xmath39 , which represents the probability that the edge from  @xmath6 to  @xmath12 connects to a small cluster , approaches  1 , while the value calculated from eq .  , which is less than or equal to the true value , </S>",
    "<S> must reach 1 later , i.e. ,  at a lower or equal value of  @xmath0 . </S>",
    "<S> thus the percolation threshold estimated from   is never higher than the true percolation threshold . </S>",
    "<S> equivalently , we can say that _ for any network , @xmath4  is always greater than or equal to the inverse of the leading eigenvalue of the non - backtracking matrix_. the only exception is for the case of a perfect tree , for which the largest eigenvalue is zero , as discussed above . </S>",
    "<S> thus the leading eigenvalue gives us a bound on the percolation threshold .    </S>",
    "<S> we can also combine this result with our earlier observation that the leading eigenvalue of the adjacency matrix is never less than that of the non - backtracking matrix to make the further statement that _ </S>",
    "<S> @xmath4  for any network is always greater than or equal to the inverse of the leading eigenvalue of the adjacency matrix . _ </S>",
    "<S> thus , both eigenvalues place lower bounds on  @xmath4 , but the bound given by the non - backtracking matrix is better ( or at least never worse ) than the one given by the adjacency matrix . numerical tests of these results on various networks are given in the supplemental information .    </S>",
    "<S> in summary , we have in this paper shown that percolation on sparse , locally tree - like networks can be reformulated as a message passing process , allowing us to solve for average percolation properties such as the size of the percolating cluster and the average size of the non - percolating clusters . </S>",
    "<S> tests on both computer generated and real - world networks show good agreement with numerical simulations of percolation on the same networks . by analyzing the message passing equations we have also shown that the position of the percolation threshold on tree - like networks is given by the inverse of the leading eigenvalue of the non - backtracking matrix . on non - tree - like </S>",
    "<S> networks this result is not exact but it gives a bound on the exact result .    </S>",
    "<S> the authors thank cris moore , leonid pryadko , and pan zhang for useful conversations . after this work </S>",
    "<S> was completed we learned of concurrent work by hamilton and pryadko  @xcite in which a similar result for the percolation threshold is derived . </S>",
    "<S> this work was funded in part by the national science foundation under grants dms1107796 and dms1407207 and by darpa under grant fa95501210432 </S>",
    "<S> .    10 url # 1`#1`urlprefix    j.  machta , phase transition in fractal porous media . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> lett . </S>",
    "<S> _ * 66 * , 169172 ( 1991 ) </S>",
    "<S> .    k.  moon and s.  m. girvin , critical behavior of superfluid @xmath80he in aerogel . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> lett . _ * 75 * , 13281331 ( 1995 ) .    </S>",
    "<S> t.  odagaki and s.  toyofuku , properties of percolation clusters in a model granular system in two dimensions . </S>",
    "<S> _ j. phys . </S>",
    "<S> cond . mat . </S>",
    "<S> _ * 10 * , 64476452 ( 1998 ) .    </S>",
    "<S> j.  tobochnik , granular collapse as a percolation transition . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> e _ * 60 * , 71377142 ( 1999 ) .    </S>",
    "<S> s.  de  bondt , l.  froyen , and a.  deruyttere , electrical conductivity of composites : a percolation approach . _ j. mater . </S>",
    "<S> sci . _ </S>",
    "<S> * 27 * , 19831988 ( 1992 ) .    </S>",
    "<S> d.  p. bentz and e.  j. garboczi , modelling of the leaching of calcium hydroxide from cement paste : effects on pore space percolation and diffusivity . </S>",
    "<S> _ materials and structures _ * 25 * , 523533 ( 1992 ) </S>",
    "<S> .    l.  de  arcangelis , s.  redner , and a.  coniglio , anomalous voltage distribution of random resistor networks and a new model for the backbone at the percolation threshold . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> b _ * 31 * , 47254728 ( 1985 ) .    c.  l. henley , statics of a self - organized percolation model . _ </S>",
    "<S> phys . </S>",
    "<S> rev . </S>",
    "<S> lett . _ * 71 * , 27412744 ( 1993 ) .    </S>",
    "<S> p.  grassberger , on the critical behavior of the general epidemic process and dynamical percolation . </S>",
    "<S> _ math . </S>",
    "<S> biosci . _ * 63 * , 157172 ( 1983 ) .    </S>",
    "<S> m.  e.  j. newman , spread of epidemic disease on networks . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> e _ </S>",
    "<S> * 66 * , 016128 ( 2002 ) .    </S>",
    "<S> r.  cohen , k.  erez , d.  ben - avraham , and s.  havlin , resilience of the internet to random breakdowns . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> lett . _ * 85 * , 46264628 ( 2000 ) .    </S>",
    "<S> d.  s. callaway , m.  e.  j. newman , s.  h. strogatz , and d.  j. watts , network robustness and fragility : percolation on random graphs . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> lett . </S>",
    "<S> _ * 85 * , 54685471 ( 2000 ) .    </S>",
    "<S> p.  holme , b.  j. kim , c.  n. yoon , and s.  k. han , attack vulnerability of complex networks . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> e _ * 65 * , 056109 ( 2002 ) .    </S>",
    "<S> a.  v. goltsev , s.  n. dorogovtsev , and j.  f.  f. mendes , percolation on correlated networks . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> e _ * 78 * , 051105 ( 2008 ) .    </S>",
    "<S> s.  janson , on percolation in random graphs with given vertex degrees . </S>",
    "<S> _ electronic journal of probability _ * 14 * , 5 ( 2009 ) .    </S>",
    "<S> k.  hashimoto , zeta functions of finite graphs and representations of p - adic groups . _ adv . </S>",
    "<S> stud . </S>",
    "<S> pure math . </S>",
    "<S> _ * 15 * , 211280 ( 1989 ) .    </S>",
    "<S> f.  krzakala , c.  moore , e.  mossel , j.  neeman , a.  sly , l.  zdeborov , and p.  zhang , spectral redemption in clustering sparse networks . </S>",
    "<S> _ proc . </S>",
    "<S> natl . </S>",
    "<S> acad . </S>",
    "<S> sci . </S>",
    "<S> usa _ * 110 * , 2093520940 ( 2013 ) .    </S>",
    "<S> t.  martin , x.  zhang , and m.  e.  j. newman , localization and centrality in networks . </S>",
    "<S> preprint arxiv:1401.5093 ( 2014 ) .    </S>",
    "<S> equations equivalent to   appeared previously in o. rivoire , ph.d . </S>",
    "<S> thesis , universit paris sud - paris xi ( 2005 ) .    </S>",
    "<S> a.  iamnitchi , m.  ripeanu , and i.  foster , locating data in ( small - world ? ) peer - to - peer scientific collaborations . in p.  </S>",
    "<S> druschel , f.  kaashoek , and a.  rowstron ( eds . ) , _ proceedings of the first international workshop on peer - to - peer systems _ , number 2429 in lecture notes in computer science , pp . </S>",
    "<S> 232241 , springer , berlin ( 2002 ) .    </S>",
    "<S> b.  bollobs , c.  borgs , j.  chayes , and o.  riordan , percolation on dense graph sequences . </S>",
    "<S> _ annals of probability _ * 38 * , 150183 ( 2010 ) .    </S>",
    "<S> n.  alon , i.  benjamini , e.  lubetzky , and s.  sodin , non - backtracking random walks mix faster . </S>",
    "<S> _ communications in contemporary mathematics _ * 9 * , 585603 ( 2007 ) .    </S>",
    "<S> b.  karrer and m.  e.  j. newman , a message passing approach for general epidemic models . </S>",
    "<S> _ phys . </S>",
    "<S> rev . </S>",
    "<S> e _ * 82 * , 016101 ( 2010 ) .    </S>",
    "<S> k.  e. hamilton and l.  p. pryadko , tight lower bound for percolation threshold on a quasi - regular graph . </S>",
    "<S> preprint arxiv:1405.0050 ( 2014 ) . </S>"
  ]
}