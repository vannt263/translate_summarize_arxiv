{
  "article_text": [
    "given a linear system of differential equations and a list of eigenvalues , the pole placement problem asks to find laws to feed the output back to the input so that the resulting closed - loop system has the same eigenvalues as the given list .",
    "while executing a static feedback law corresponds to a simple matrix - vector multiplication , a dynamic compensator has several internal states .",
    "the theoretical solution of this problem was found in the schubert calculus , see  @xcite for the static , and  @xcite for dynamic compensators .",
    "because of its importance to practical applications , the development of algorithms for this problem was stated as an open problem  @xcite ( see also  @xcite ) .",
    "the first homotopy algorithms were proposed in  @xcite , defining a numerical schubert calculus .",
    "the pieri homotopy algorithms of  @xcite were improved and generalized to dynamic feedback in  @xcite . in  @xcite , the numerical performance of these homotopies for static feedback was improved .",
    "our current paper is a sequel to our previous paper  @xcite as a continuing effort to apply the homotopy algorithms to practical applications of linear systems control . rather than generating random matrices as inputs to our algorithms",
    "we look to build case studies with examples from the literature . in  @xcite",
    "we applied static output feedback to use pole placement to keep a satellite in orbit . in this current paper",
    "we consider the application of dynamic feedback laws to this and other applications .",
    "see  @xcite for the relation of the pole placement problem with inverse eigenvalue and matrix extension problem .",
    "as expected , with the more general dynamic feedback laws we can cover a wider range of applications , but at the same time we experienced the real need for more advanced algorithms from numerical algebraic geometry to deal better with over and underdetermined problems .",
    "we define these mathematical problems in the next section .",
    "the heart of this paper concerns the realization of dynamic compensators .",
    "as these compensators are computed in the frequency domain , at the end of the paths defined by the homotopies , any application demands the description of the controllers in the time domain as a tuple of matrices .",
    "while realization algorithms are covered in standard graduate textbooks ( e.g. ,  @xcite and  @xcite ) , our output is numerical , i.e. : subject to roundoff and known only with limited accuracy .",
    "reports on numerical implementations of algorithms which manipulate polynomial matrices are scarce , we found only one paper  @xcite , which presents a numerical study on a commercial implementation , but leaves the implementation of a numerical smith normal form as an open question .",
    "note that the smith normal form plays an important role to obtain a minimal realization of the transfer function of multi - input - multi - output ( mimo ) systems .",
    "section three starts with the description of an algorithm to compute the greatest common divisor of two polynomials with approximate coefficients , as this is the cornerstone function in the implementation of a numerical smith normal form . as we experienced and",
    "illustrate , the naive application of the euclidean algorithm for an approximate gcd can fail miserably . that many algorithms to solve problems with exact data turn out to be numerically unstable is a growing concern in computer algebra , which has led to hybrid symbolic - numeric computation  @xcite . in particular",
    ", the approximate gcd problem has received a lot of research attention in recent years , see for instance  @xcite , @xcite , @xcite , @xcite , @xcite , @xcite and  @xcite .",
    "our approach is to consider the input polynomials not as polynomials with approximate coefficients , but as polynomials defined by approximate roots .",
    "so we view polynomials not symbolically ( as sums of monomials with approximate coefficients ) but geometrically ( as the collection of roots in the complex plane , known with limited accuracy ) .",
    "the idea to computing the gcd by matching common approximate roots ( within a certain tolerance ) can be found in  @xcite . compared ( see  @xcite ) to alternative constructions of approximate gcds , this method works well for input polynomial with multiple or clustered zeros .",
    "algorithmically , we can immediately apply any numerical root finding method ( see  @xcite for a recent survey ) . to compute the polynomials in the extended gcd problem ( i.e. : the @xmath0 and @xmath1 in the combination @xmath2 )",
    ", we apply newton interpolation .    as usual , the link between algorithms and applications is software .",
    "we describe an extension to the software package phcpack  @xcite in section five before illustrating its application on various control problems from the literature .",
    "the algorithmic framework is defined by the transitions between the time and the frequency domain ( which leads to the symbolic - numeric calculations ) .",
    "mathematically , we count the number of conditions to determine the dimension of our solution space .    in the time domain , we picture the control of a plant with a dynamic feedback law in figure  [ figmachine ] .",
    "( 200,70)(0,0 )    ( 30,60)@xmath3 ( 20,55)(1,0)55 ( 80,50)(40,20)[c]@xmath4 ( 125,55)(1,0)55 ( 140,60)@xmath5    ( 150,15)(-1,0)25 ( 150,15)(0,1)40 ( 80,7)(40,20)[c]@xmath6 ( 50,15)(1,0)25 ( 50,15)(0,1)40    the machine we want to control is given by three matrices @xmath7 , defining a system of first - order differential equations in the time domain .",
    "the input of the pieri homotopies is sampled in the frequency domain .",
    "so to apply these homotopies , we need to translate the input from the time to frequency domain and to realize the output as a tuple of matrices .",
    "table  [ tabdomains ] defines the three stages in the data flow .",
    "the labels on the arrows in figure  [ figdomains ] correspond to the numbers in table  [ tabdomains ] .",
    ".transitions in applying the pieri homotopies . [ cols= \" < ,",
    "< \" , ]     these experiments provide us with practical evidence that for both random and specific inputs , the advanced algorithm shows its strong numerical stability . concerning the speed of the gcd algorithm ,",
    "the time needed of the realization algorithm is negligible compared to the calculation time of the feedback laws with homotopies .",
    "in the previous section , we gave the derivation of the transfer function of the dynamic compensator as the output of the homotopies .",
    "we will give a modified algorithm based on  @xcite to obtain minimal or irreducible realizations , which realize a system with the least number of dynamic elements .",
    "these modifications were made to fit the output format of the software used to compute the feedback laws .",
    "the necessity of the modifications will be discussed at the end of this section .",
    "we will show how to obtain realizations @xmath8 of the transfer function @xmath9 in controller form first .",
    "then , we will use the property of the output of homotopies to show the realizations are irreducible , so they are also controllable .    from  ( [ eqmultiplyresult ] )",
    ", the transfer function can be written as @xmath10 in accordance with convention , we would replace @xmath11 by @xmath12 which stands for numerator , replace @xmath13 by @xmath14 which stands for denominator .    according to theorem  3.3 in  @xcite ,",
    "realizations exist if and only if @xmath9 is a matrix of rational functions and satisfies @xmath15 i.e. , if and only if @xmath9 is a proper rational matrix .",
    "given the transfer function matrix @xmath16 as a @xmath17 proper rational matrix .",
    "let @xmath18 = the highest degree of @xmath19th column in the @xmath14 ( @xmath20 ) .",
    "define @xmath21 and @xmath22                             j = 1,\\ldots , p                           \\end{array }                         \\right).\\ ] ] if @xmath23 , just skip that column and continue to fill the next column of the @xmath24 matrix .",
    "note that @xmath24 is an @xmath25 polynomial matrix .",
    "write @xmath26 @xmath27 is the highest column degree coefficient matrix of @xmath14 .",
    "for example , if @xmath28,$ ] then the highest column degree coefficient matrix @xmath29,$ ] and @xmath30 given in  ( [ eqfac ] ) accounts for the remaining lower column degree terms @xmath14 , with @xmath31 being a matrix of coefficients .    in general , @xmath32 , and define @xmath33 and @xmath34 matrices @xmath35 respectively . then @xmath36 can be determined from @xmath37 where @xmath38 $ ] with    @xmath39         \\in r^{d_j\\times d_j},\\ ] ]    @xmath40                             \\in r^{d_j } , j = 1 , \\ldots , p                          \\right).\\ ] ]    when @xmath41 , we just skip the corresponding @xmath42 and continue to fill the @xmath43 matrix with the @xmath44 matrix ; we also need to add a zero column at the @xmath19th column of the @xmath45 matrix .    then we can determine @xmath46 and @xmath47 such that @xmath48 and note that @xmath49 therefore , @xmath46 can be determined from  ( [ eqns ] ) .",
    "an @xmath50th - order realization of @xmath9 in controller form is now given by the equations @xmath51    according to the format of the output of the software , @xmath52 is equal to the minimal order of the dynamic compensator",
    ". therefore , this algorithm gives us a minimal realization of the transfer function matrix @xmath9 and the result is also observable .",
    "the main difference between the modified algorithm and the original algorithm given in  @xcite is that the original algorithm limits @xmath53 , while our modified algorithm works for @xmath54 , where @xmath18 is the highest column degree of @xmath19th column in the @xmath14 .",
    "some @xmath18 must be equal to zero when the number of output is larger than the order of the dynamic compensator . in this case",
    "the modified algorithm become necessary .",
    "the correctness of the modified algorithm is verified with experiments .",
    "the dynamic feedback laws were calculated with the aid of phcpack  @xcite . while the second public release of phcpack implemented the dynamic pole placement problem in its geometric form , additional software had to be written , concerning :    1 .",
    "a limit on the number of feedback laws ; 2 .   an interface between ada and c ; and 3 .   a collection of c routines for the realization .",
    "the limit on the number of feedback laws was imposed as a matter of convenience , to control the practical complexity .",
    "we elaborate the other two items in the following subsections .",
    "phcpack is written in ada , while the programs to process the feedback laws are in the lower level language  c.    we can build a portable interface to the ada routines in phcpack with c functions because the language ada has the pragma import construction to call routines from other languages such as c and it supports conversions for c integers , doubles , and arrays of these c types .",
    "furthermore , the gnu - ada compiler provides a mechanism to call ada routines from a c main program and to call c functions from ada .",
    "as the gnu - ada compiler is integrated in the gcc compilation system , our interface is portable . in particular , we ran our implementation successfully on sun workstations running solaris and on pcs running linux and windows .    to exchange data efficiently , programs in ada or c should define exchange protocols of structured data types into basic data types for which automatic conversions are supported .",
    "more precisely , we represent structured data types into arrays of doubles and arrays of integers .",
    "the language c is restricted in returning dynamically allocated variables .",
    "therefore , data allocated in a c function is passed by the c function calling an ada function for further processing of the data .",
    "a typical sequence of calls goes as follows .",
    "first a c function gathers problem data and prepares the input to an ada routine of phcpack .",
    "the ada routine , called from c , uses path tracking to solve the problem , and then calls a c function to process the results obtained with phcpack .",
    "so the c programmer who uses phcpack should thus provide two c functions : one to prepare the input and one to process the output .",
    "this `` hand - in - glove '' interface is appropriate for a c programmer collaborating with an ada programmer ( which is the case of the authors ) , who only have to agree on the prototypes of the routines .      in figure  [ figorgsoft ] ,",
    "the arrows indicate the order of function calls in the computation and realization of the dynamic feedback laws . in this section",
    "we give a short description for each of the procedures , some written in c , others in ada .",
    "ts_feedback(c ) : : :    ts_feedback reads all the input information from a file , including the    number of the internal states @xmath55 , the input dimension    @xmath56 , the output dimension @xmath57 , the number of    the internal states for the dynamic compensator @xmath50 and    the number of output feedback .",
    "also the user should give the    @xmath58 matrices ( or let the matrices be generated    randomly ) of the given plant and @xmath59 eigenvalues .",
    "ts_feedback.c computes @xmath60 at the    interpolation points as the input planes .",
    "with c to ada interface , we    pass the arrays of the input planes and the interpolation points to    the pieri_solver ( an ada procedure in phcpack ) .",
    "pieri_solver(ada ) : : :    the pieri_solver calculates the corresponding dynamic output feedbacks    and passes them to the c program pieri_sols.c .",
    "pieri_sols(c ) : : :    with ada to c interface , the arrays in ada form are converted to the    form in c. then pieri_sols.c calls realization.c and tests the    results .",
    "realization(c ) : : :    we use modified realization algorithm based on  @xcite to get the    realization of the dynamic output feedback , organized as follows :    +    1 .",
    "get the transfer function @xmath61 from    the output of the ada program .",
    "the inverse of a polynomial matrix is a    rational polynomial matrix and it is mainly done by poly_smith .",
    "see    ( 10 ) in section 3 for more detail about how smith form can work for    the inverse of a polynomial matrix .    2 .",
    "the realization function implements the modified realization    algorithm to get a minimal realization of the dynamic compensator .",
    "3 .   evaluate the transfer function @xmath9 at some random    point and compare it with the result after realization    ( @xmath62 ) at the same point .",
    "if the values are    the same , the realization is correct .",
    "test_results(c ) : : :    we can evaluate equation  ( [ eqgeometric ] ) at the given poles and    calculate the determinant with the previous result . if the determinant    is zero , the pole is the eigenvalue of the closed - loop system . as    mentioned above , equation  ( [ eqgeometric ] )",
    "is algebraically equal to    equation  ( [ eqrewrite ] ) , which is the characteristic equation of the    closed - loop system .",
    "verify(matlab ) : : :    finally , a matlab script verifies the results by comparing the    computed poles with the given poles and finding the condition number    for each given pole .",
    "the c routines for the numerical realization algorithms written by yusong wang are available at http://www.math.uic.edu/~jan in the distribution of release  2.2 of the source code of phcpack ( see  @xcite , the first version of this package is archived by netlib ) .",
    "in particular , the collection of routines can be found in the directory `` feedback '' of the source code .",
    "also the input data files for the applications discussed in the next section are available in this directory .",
    "in this section we illustrate the usefulness of our approach . some application examples will show it is necessary to find some dynamic output feedback laws for some specific situations , especially for the cases there is no feedback laws or no real feedback laws at some given poles for the static feedback problem .",
    "we assume that the input data for our applications is given as @xmath7 , i.e. : a triple of three matrices of the linear system @xmath63 , and @xmath64 , where @xmath65 , and @xmath66 are vectors of internal states , input , and output respectively .",
    "this application concerns the design of output feedback laws to keep a satellite in orbit .",
    "we treated this problem in our previous paper  @xcite with static output feedback and with ad hoc matlab scripts to aid the manipulations . in  @xcite",
    ", we already found two real output feedback laws for static case .",
    "now we want to get some feedback laws for dynamic case as an extension of our method .",
    "the linearized state - space equations for the satellite problem are given below : @xmath67;\\\\                  \\\\                b = \\left [                  \\begin{array}{cc }                      0       &   0       \\\\                      1.3411 &   0       \\\\                      0       &   0       \\\\                      0       &   1.0867 \\\\                  \\end{array }               \\right].\\\\                  \\\\",
    "\\end{array}\\ ] ] we choose value for each parameter randomly .",
    "while this may seem unrealistic , our choice can be justified by an appropriate selection of units .",
    "more detail about the model can be found in  @xcite .",
    "we define @xmath68 as some random matrix  which can be interpreted as a random projection of the states onto a plane .    for this satellite example",
    ", we have @xmath69 , @xmath70 , which is dimension zero for the static case . when @xmath71 , the system become underdetermined since @xmath72 and there are three degrees of freedom .",
    "we choose the eigenvalues as @xmath73 .",
    "the last three of eigenvalues are randomly selected .",
    "we found two real feedback laws and six complex complex feedback laws .",
    "we also use the matlab script to verify the results and calculate the condition number for the eigenvalue  @xmath74 by @xmath75 where vectors @xmath76 and @xmath77 denote the unit right and left eigenvectors of the closed - loop system .",
    "see  @xcite for the derivation of @xmath78 as the reciprocal of the condition number for the eigenvalue @xmath74 . by substituting the result into the closed - loop system , we find the relative difference of the computed eigenvalues vs. the given eigenvalues",
    "is bounded by @xmath79 and the order of condition numbers are at most @xmath80 , calculated with  ( [ eqcond ] ) .",
    "the total cpu time spent on the calculation of the dynamic feedback laws is 2 seconds and 320 milliseconds on a 2.4ghz workstation running linux system .      in this section",
    "we report on two numerical examples in the literature  @xcite @xcite .",
    "numeric example a : : :    we will use the example in  @xcite to illustrate the following    situation : when a system is overdetermined for static output feedback    ( @xmath81 , @xmath82 ) , for which no feedback laws    can be found at the desired poles , we can choose a q to make it    convert to underdetermined or dimension zero case    ( @xmath83 ) , for which we can find feedback    laws .",
    "+    consider the system , given by @xmath84 ; \\\\ \\\\         b = \\left [                    \\begin{array}{rr }                      1 &   3 \\\\                      0 &   0 \\\\                      0 & -1 \\\\                      0 &   1 \\\\                      0 &   1 \\\\                      0 &   0 \\\\",
    "\\end{array }                 \\right ] ; \\quad             c = \\left [                     \\begin{array}{cccccc }                       0 & 0 & 1 & 0 & 0 & 0 \\\\                         0 & 0 & 0 & 0 & 0 & 1 \\\\                     \\end{array }                 \\right ] .",
    "\\end{array}\\ ] ] here , @xmath70 , @xmath85 ,    therefore @xmath81 which is overdetermined for static    case .",
    "we will choose a @xmath50 to make the system    underdetermined . the minimum possible @xmath50 is 1 , then we    have @xmath86 , so there is one degree of    freedom . with the calculation of phcpack and the c interface , we can",
    "easily get some dynamic compensators of mcmillan degree    @xmath71 to control the system .",
    "we verified the result by    comparing the given and computed eigenvalues with a matlab script . for    a choice @xmath87 of 7    eigenvalues and an additional pole @xmath88",
    "which is    generated by random , the relative difference of the computed    eigenvalues vs. the given eigenvalues of the closed - loop system is    bounded by @xmath89 . in this specific example",
    ", we find 8    solutions and 4 of them are real ( sometimes 6 are real , depending on    the additional input plane which are randomly generated ) .",
    "the order of    the condition number computed with  ( [ eqcond ] ) is no more than    @xmath80 for all of the given eigenvalues .",
    "the total cpu    time spent for this numeric example is around 3 seconds with the    workstation mentioned above .",
    "numeric example b : : :    the second example can be found in  ( * ? ? ?",
    "* example 3.7 ) , with    @xmath90 and @xmath91 .",
    "+    the system is given as below @xmath92;\\\\                    \\\\                  b = \\left [                    \\begin{array}{rrr }                          0   &   1   &   2 \\\\                          1   &   0   &   1 \\\\",
    "-1   & -1   & -3 \\\\                          1   &   0   &   1 \\\\                          0   &   2   &   4 \\\\                          2   &   1   &   5 \\\\                         -1   &   1   &   1 \\\\                          1   & -1   & -1 \\\\",
    "\\end{array }                 \\right ] ; \\\\ \\\\             c = \\left [                    \\begin{array}{rrrrrrrr }                            0   &   1   &   0   &   0   & -2   &   0   &   0   &   0 \\\\                          0   &   0   &   0   &   0   &   1   &   0   &   0   &   0 \\\\                          0   &   0   &   0   &   0   &   0   &   0   &   0   &   1 \\\\                    \\end{array }                  \\right].\\\\     \\end{array}\\ ] ] this system is underdetermined for static output    feedback ( @xmath93 ) .",
    "when the given poles are    @xmath94 , in which the first 8 are picked at the unit circle and the    last one is a negative real number chosen by random , we find 42    feedback laws with our software and 4 of them are real .",
    "the relative    difference of the computed eigenvalues vs. the given eigenvalues is    @xmath89 .",
    "the order of the condition number is bounded by    @xmath95 if computed with  ( [ eqcond ] ) .",
    "the total cpu time    spent on this example is around 50 seconds to find all 42 feedback    laws .",
    "it only takes 1 second and 180 milliseconds if user just needs    one feedback law .",
    "it may be that for a given selection of poles , all static feedback laws have coefficients with nonzero imaginary parts . in this case , we will design dynamic output feedback laws , and exploit the additional freedom to place the poles at their originally selected locations .",
    "the model from mathworks  @xcite could be used to illustrate this kind of situation .",
    "it also can be found in any standard text in aviation for a more complete discussion of the physics behind aircraft flight .",
    "the state - space equations are given below .",
    "the jet model during cruise flight at mach=0.8 and h=40,000 ft .",
    "is @xmath96;\\\\                  \\\\                b = \\left [                  \\begin{array}{cc }                      ~~0.0073 &   0       \\\\                     -0.4750    &   0.0077 \\\\                      ~~0.1530 &   0.1430 \\\\                      ~0        &   0       \\\\",
    "\\end{array }               \\right ] ; \\quad           c = \\left [                  \\begin{array}{cccc }                      0   &   1   &   0   &   0 \\\\                      0   &   0   &   0   &   1 \\\\                  \\end{array }                \\right].\\\\     \\end{array}\\ ] ] for this example , @xmath69 , @xmath70 , so @xmath97 when @xmath82 , which is the dimension zero case .",
    "we can find some feedback laws with phcpack .",
    "when the chosen poles are @xmath98 , we found two complex feedback laws .",
    "the total time spent is 140 milliseconds and the realization part just needs trivial time . by computing the eigenvalues of the closed - loop system with the matlab script",
    ", we find the difference between the computed eigenvalues and the given eigenvalues is just @xmath99 and the condition number is around  10 .",
    "although the result seems quite nice , we still want to find some real feedback laws . we could choose @xmath71 to find some dynamic feedback laws , therefore @xmath100 , then we have three degrees of freedom . with the calculation of phcpack and c interface ,",
    "we get 8 solutions , including 2 or 4 , or 6 real solutions , depending on different additional eigenvalues . for a choice of @xmath101 ,",
    "in which the first four are the same as in the static case , and three randomly generated poles are @xmath102 , the relative difference of the computed eigenvalues vs. the given eigenvalues is bounded by @xmath103 .",
    "the total cpu time is 2 seconds and 680 milliseconds . for this choice of poles",
    ", we found four real feedback laws .",
    "for most of the 8 solutions , the condition numbers of the closed - loop system are less than @xmath104 , and few of the solutions have the condition number @xmath105 , calculated with formula  ( [ eqcond ] ) .",
    "in this paper we showed the practical feasibility of computing dynamic feedback laws using numerical homotopy algorithms , and we applied our software to examples from the control literature .",
    "our publicly available implementation of the numerical greatest common divisor and numerical smith normal form may be of independent interest .",
    "hitz , e. kaltofen , and y.n .",
    "efficient algorithms for computing the nearest polynomial with a real root and related problems . in _",
    "issac 99 proc .",
    "1999 internat .",
    "symbolic algebraic comput .",
    "_ , edited by s. dooley , pages 205 - 212 , acm , new york , 1999 .          n. karmarkar and y.n .",
    "approximate polynomial greatest common divisors and nearest singular polynomials . in _",
    "issac 96 proc .",
    "1996 internat .",
    "symbolic algebraic comput .",
    "_ , edited by y.n .",
    "lakshman , pages 35 - 42 , acm , new york , 1996 .",
    "j.  rosenthal and j.c . willems .",
    "open problems in the area of pole placement . in _",
    "open problems in mathematical systems and control theory _ , edited by v.d .",
    "blondel , e.d .",
    "sontag , m. vidyasagar , and j.c .",
    "willems , pages 181191 . springer ",
    "verlag , 1998 .",
    "sommese and c.w .",
    "wampler . numerical algebraic geometry . in _ the mathematics of numerical analysis _ , volume  32 of _ lectures in applied mathematics _ , edited by j.  renegar , m.  shub , and s.  smale , pages 749763 , 1996 .",
    "proceedings of the ams - siam summer seminar in applied mathematics , park city , utah , july 17-august 11 , 1995 , park city , utah .",
    "j.  verschelde and y.  wang . numerical homotopy algorithms for satellite trajectory control by pole placement .",
    "proceedings of mtns 2002 , mathematical theory of networks and systems ( cdrom ) , notre dame , august 12 - 16 , 2002 ."
  ],
  "abstract_text": [
    "<S> the pole placement problem asks to find laws to feed the output of a plant governed by a linear system of differential equations back to the input of the plant so that the resulting closed - loop system has a desired set of eigenvalues . converting this problem into a question of enumerative geometry , efficient numerical homotopy algorithms to solve this problem for general multi - input - multi - output ( mimo ) </S>",
    "<S> systems have been proposed recently . </S>",
    "<S> while dynamic feedback laws offer a wider range of use , the realization of the output of the numerical homotopies as a machine to control the plant in the time domain has not been addressed before . in this paper </S>",
    "<S> we present symbolic - numeric algorithms to turn the solution to the question of enumerative geometry into a useful control feedback machine . </S>",
    "<S> we report on numerical experiments with our publicly available software and illustrate its application on various control problems from the literature .    * </S>",
    "<S> 2000 mathematics subject classification . * primary 93b55 . </S>",
    "<S> secondary 14q99 , 65h10 , 68w30 , 93b27 . </S>",
    "<S> * key words and phrases . * control of linear systems , dynamic output feedback , multi - input - multi - output ( mimo ) systems , numerical homotopy algorithms , numerical schubert calculus , pole placement , symbolic - numeric computations . </S>"
  ]
}