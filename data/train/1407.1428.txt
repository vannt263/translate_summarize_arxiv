{
  "article_text": [
    "two mobile agents , starting from different nodes of a network , have to meet at the same node at the same time .",
    "this distributed task is known as _ rendezvous _ and has received a lot of attention in the literature .",
    "agents can be any mobile autonomous entities .",
    "they might represent human - made objects , such as software agents in computer networks or mobile robots navigating in a network of corridors in a building or a mine .",
    "they might also be natural , such as animals seeking a mate , or people who want to meet in an unknown city whose streets form a network .",
    "the purpose of meeting in the case of software agents or mobile robots might be the exchange of data previously collected by the agents or samples collected by the robots .",
    "it may also be the coordination of future network maintenance tasks , for example checking functionality of websites or of sensors forming a network , or decontaminating corridors of a mine .",
    "the network is modeled as an undirected connected graph with @xmath0 unlabeled nodes .",
    "we seek deterministic rendezvous algorithms that do not rely on the agents perceiving node identifiers , and therefore can work in anonymous graphs as well ( cf .",
    "the reason for designing such algorithms is that , even when nodes of the network have distinct identifiers , agents may be unable to perceive them because of limited sensory capabilities ( e.g. , a mobile robot may be unable to read signs at corridor crossings ) , or nodes may be unwilling to reveal their identifiers to software agents , e.g. , due to security or privacy reasons . from a methodological point of view , if nodes had distinct identifiers visible to the agents , the agents could explore the graph and meet at the node with the smallest identifier .",
    "hence , in this case , rendezvous reduces to graph exploration .    on the other hand , we assume that , at each node @xmath7 , each edge incident to @xmath7 has a distinct _ port number _ from the set @xmath8 , where @xmath9 is the degree of @xmath7 .",
    "these port numbers are fixed and visible to the agents .",
    "port numbering is _ local _ to each node , i.e. , we do not assume any relation between port numbers at the two endpoints of an edge .",
    "note that in the absence of port numbers , edges incident to a node would be undistinguishable for agents and thus rendezvous would be often impossible , as an agent may always miss some particular edge incident to the current node , and this edge could be a bridge to the part of the graph where the other agent started . the previously mentioned security and privacy reasons for not revealing node identifiers to software agents are irrelevant in the case of port numbers . if the graph models a system of corridors of a mine or a building , port numbers can be made implicit , e.g. , by marking one edge at each intersection ( using a simple mark legible even by a mobile robot with very limited vision ) , considering it as corresponding to port 0 , and all other port numbers increasing clockwise .",
    "agents are initially located at different nodes of the graph and traverse its edges in synchronous rounds .",
    "they can not mark visited nodes or traversed edges in any way , and they can not communicate before meeting .",
    "the adversary wakes up each of the agents , possibly in different rounds .",
    "each agent starts executing the algorithm in the round of its wake - up .",
    "it has a clock that ticks at each round and starts at the wake - up round of the agent . in each round",
    ", each agent either remains at the current node , or chooses a port in order to move to one of the adjacent nodes .",
    "when an agent enters a node , it learns the node s degree and the port number by which it enters the node .",
    "when agents cross each other on an edge while traversing it simultaneously in different directions , they do not notice this fact .",
    "each agent has a distinct integer label from a fixed _ label space _ @xmath1 , which it can use as a parameter in the same deterministic algorithm that both agents execute .",
    "it does not know the label nor the starting round of the other agent .",
    "since we study deterministic rendezvous , the absence of distinct labels would preclude the possibility of meeting in highly symmetric graphs , such as rings or tori , for which there exist non - trivial port - preserving automorphisms .",
    "indeed , in such graphs , identical agents starting simultaneously and executing the same deterministic algorithm can never meet , since they will keep the same positive distance in every round .",
    "hence , assigning different labels to agents is the only way to break symmetry , as is needed to meet in every graph using a deterministic algorithm . on the other hand ,",
    "if agents knew each other s identities , then the smaller - labelled agent could stay inert , while the other agent would try to find it . in this case rendezvous",
    "reduces to graph exploration . assuming such knowledge , however , is not realistic , as agents are often created independently in different parts of the graph , and they know nothing about each other prior to meeting .",
    "the rendezvous is defined as both agents being at the same node in the same round .",
    "the main efficiency measure of a rendezvous algorithm s performance is its _ time _",
    ", i.e. , the number of rounds from the start of the later agent until the meeting . if @xmath2 is the distance between the initial positions of the agents , then @xmath3 is an obvious lower bound on the time of rendezvous .",
    "however , if the agents have no additional knowledge , time @xmath4 is usually impossible to achieve .",
    "this is due to two reasons .",
    "first , without any knowledge about the graph , even the easier task of _ treasure hunt _ @xcite , in which a single agent must find a target ( treasure ) hidden at an unknown node of the graph , takes asymptotically larger time in the worst case .",
    "treasure hunt is equivalent to a special case of rendezvous where one of the agents is inert . in the worst case , this takes as much time as graph exploration , i.e. , having a single agent visit all nodes .",
    "second , even when the graph is so simple that navigation of the agents is not a problem , breaking symmetry between the agents , which is often necessary to achieve a meeting , may take time larger than @xmath2 . indeed , even in the two - node graph , where @xmath10 , rendezvous requires time @xmath11 @xcite .",
    "we study the amount of information that has to be given _ a priori _ to the agents to achieve rendezvous in optimal time @xmath5 . following the paradigm of _ algorithms with advice _",
    "@xcite , this information is provided to the agents at the start , by an oracle knowing the entire instance of the problem , i.e. , the graph , the starting positions of the agents , their wake - up rounds , and both of their labels .",
    "the oracle helps the agents by providing them with the _ same _ binary string called _ advice _ , which can be used by each agent , together with its own label , during the execution of the algorithm .",
    "the length of this string is called the _ size of advice_. our goal is to find the smallest size of advice ( up to constant factors ) which enables the agents to meet in time @xmath5 . in other words",
    "we want to answer the question :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ what is the minimum information that permits the fastest possible rendezvous ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    where both `` minimum '' and `` fastest '' are meant up to multiplicative constants .",
    "notice that , since the advice given to both agents is identical , it could not help break symmetry if agents did not have distinct labels . hence , even with large advice , the absence of distinct labels would preclude rendezvous in highly symmetric networks , as argued above . using the framework of advice permits us to quantify the amount of information needed for an efficient solution of a given network problem ( in our case , rendezvous ) , regardless of the type of information that is provided .      for agents with labels from the set @xmath1 ,",
    "we show that , in order to meet in optimal time @xmath5 in @xmath0-node networks , the minimum size of advice that has to be provided to the agents is @xmath6 .",
    "the upper bound is proved by constructing an advice string of this size , and providing a natural rendezvous algorithm using this advice that works in time @xmath5 for all networks .",
    "the matching lower bound , which is the main contribution of this paper , is proved by exhibiting classes of networks for which it is impossible to achieve rendezvous in time @xmath5 with smaller advice .",
    "our algorithm works for arbitrary starting times of the agents , and our lower bound is valid even for simultaneous start . as far",
    "as the memory of the agents is concerned , our algorithm has very modest requirements : an agent must only be able to store the advice and its own label .",
    "hence memory of size @xmath12 is sufficient . on the other hand , our lower bound on",
    "the size of advice holds even for agents with unlimited memory .",
    "the problem of rendezvous has been studied both under randomized and deterministic scenarios .",
    "an extensive survey of randomized rendezvous in various models can be found in @xcite , cf .",
    "also @xcite . deterministic rendezvous in networks has been surveyed in @xcite .",
    "several authors considered geometric scenarios ( rendezvous in an interval of the real line , e.g. , @xcite , or in the plane , e.g. , @xcite ) .",
    "gathering more than two agents was studied , e.g. , in @xcite .",
    "for the deterministic setting , many authors studied the feasibility and time complexity of rendezvous .",
    "for instance , deterministic rendezvous of agents that are equipped with tokens used to mark nodes was considered , e.g. , in  @xcite .",
    "most relevant to our work are the results about deterministic rendezvous in arbitrary graphs , when the two agents can not mark nodes , but have unique labels @xcite . in @xcite ,",
    "the authors present a rendezvous algorithm whose running time is polynomial in the size of the graph , in the length of the shorter label and in the delay between the starting times of the agents . in @xcite ,",
    "rendezvous time is polynomial in the first two of these parameters and independent of the delay .",
    "memory required by the agents to achieve deterministic rendezvous was studied in @xcite for trees and in @xcite for general graphs .",
    "memory needed for randomized rendezvous in the ring is discussed , e.g. , in  @xcite .    apart from the synchronous model used in this paper , several authors investigated asynchronous rendezvous in the plane @xcite and in network environments @xcite . in the latter scenario ,",
    "the agent chooses the edge to traverse , but the adversary controls the speed of the agent . under this assumption ,",
    "rendezvous at a node can not be guaranteed even in very simple graphs .",
    "hence the rendezvous requirement is relaxed to permit the agents to meet inside an edge .",
    "providing nodes or agents with arbitrary kinds of information that can be used to perform network tasks more efficiently has been proposed in @xcite .",
    "this approach was referred to as _ algorithms with advice_. advice is given either to nodes of the network or to mobile agents performing some network task .",
    "in the first case , instead of advice , the term _ informative labeling schemes _ is sometimes used .",
    "several authors studied the minimum size of advice required to solve network problems in an efficient way .    in @xcite , given a distributed representation of a solution for a problem , the authors investigated the number of bits of communication needed to verify the legality of the represented solution . in @xcite",
    "the authors compared the minimum size of advice required to solve two information dissemination problems using a linear number of messages . in @xcite",
    "it was shown that advice of constant size given to the nodes enables the distributed construction of a minimum spanning tree in logarithmic time . in @xcite",
    "the advice paradigm was used for online problems . in @xcite",
    "the authors established lower bounds on the size of advice needed to beat time @xmath13 for 3-coloring cycles and to achieve time @xmath13 for 3-coloring unoriented trees . in the case of @xcite",
    "the issue was not efficiency but feasibility : it was shown that @xmath14 is the minimum size of advice required to perform monotone connected graph clearing . in @xcite",
    "the authors studied radio networks for which it is possible to perform centralized broadcasting in constant time .",
    "they proved that constant time is achievable with @xmath15 bits of advice in such networks , while @xmath16 bits are not enough . in @xcite",
    "the authors studied the problem of topology recognition with advice given to nodes . in @xcite",
    "the task of drawing an isomorphic map was executed by an agent in a graph and the problem was to determine the minimum advice that has to be given to the agent for the task to be feasible .    among the papers using the paradigm of advice ,",
    "@xcite are closest to the present work , as they both concern the task of graph exploration by an agent . in @xcite",
    "the authors investigated the minimum size of advice that has to be given to unlabeled nodes ( and not to the agent ) to permit graph exploration by an agent modeled as a @xmath17-state automaton . in @xcite",
    "the authors established the size of advice that has to be given to an agent in order to explore trees while obtaining competitive ratio better than 2 . to the best of our knowledge ,",
    "rendezvous with advice has never been studied before .",
    "consider any @xmath0 node graph , and suppose that the distance between the initial positions of the agents is @xmath2 . in this section ,",
    "we construct an advice string of length @xmath18 and a rendezvous algorithm which achieves time @xmath2 using this advice .",
    "we first describe the advice string .",
    "let @xmath19 be the underlying graph and let @xmath20 and @xmath21 be the distinct labels of the agents , both belonging to the label space @xmath1 .",
    "call the agent with label @xmath20 the first agent and the agent with label @xmath21 the second agent .",
    "let @xmath22 be the smallest index such that the binary representations of @xmath20 and @xmath21 differ on the @xmath22th bit .",
    "without loss of generality assume that the @xmath22th bit is 0 in the binary representation of @xmath20 and 1 in the binary representation of @xmath21 .",
    "let @xmath23 be a fixed shortest path in @xmath19 between the initial positions @xmath24 and @xmath7 of the agents .",
    "the path @xmath23 induces two sequences of ports of length @xmath2 : the sequence @xmath25 of consecutive ports to be taken at each node of path @xmath23 to get from @xmath24 to @xmath7 , and the sequence @xmath26 of consecutive ports to be taken at each node of path @xmath23 to get from @xmath7 to @xmath24 .",
    "let @xmath27 be the sequence corresponding to the direction from the initial position of the second agent to the initial position of the first agent .",
    "denote @xmath28 .",
    "let @xmath29 , for @xmath30 , be the binary representation of the integer @xmath31 .",
    "additionally , let @xmath32 be the binary representation of the integer @xmath22 .",
    "the binary strings @xmath33 will be called substrings .",
    "the sequence of substrings @xmath33 is encoded into a single advice string to pass to the algorithm .",
    "more specifically , the sequence is encoded by doubling each digit in each substring and putting 01 between substrings .",
    "this permits the agent to unambiguously decode the original sequence .",
    "denote by @xmath34 this encoding and let @xmath35 be the inverse ( decoding ) function , i.e. , @xmath36 . as an example , @xmath37 .",
    "note that the encoding increases the total number of advice bits by a constant factor .",
    "the advice string given to the agents is @xmath38 .",
    "the idea of the algorithm fast rendezvous using the advice string @xmath39 is the following .",
    "each agent decodes the sequence @xmath33 from the string @xmath39",
    ". then each agent looks at the @xmath22th bit of its label , where @xmath22 is the integer represented by @xmath32 .",
    "if this bit is 0 , the agent stays inert at its initial position , otherwise it takes the consecutive ports @xmath40 , where @xmath31 , for @xmath30 , is the integer with binary representation @xmath29 .",
    "after these @xmath2 moves , the agent meets the other agent at the latter s initial position . below is the pseudocode of the algorithm .",
    "[ ub ] let @xmath19 be an @xmath0-node graph with two agents initially situated at distance @xmath2 from one another .",
    "algorithm fast rendezvous achieves rendezvous in time @xmath2 , using advice of size @xmath18 .",
    "the correctness and time of the algorithm are straightforward .",
    "it remains to prove that the length of the advice string @xmath39 is @xmath18 .",
    "to do this , it is enough to show that the sum of the lengths @xmath41 of substrings @xmath29 , for @xmath42 , is @xmath18 .",
    "note that @xmath43 .",
    "also , note that @xmath44 , where @xmath45 are consecutive nodes on some shortest path between the initial positions of the agents .",
    "it is well - known ( cf .",
    "e.g. , @xcite ) that the sum of degrees on a shortest path between any two nodes in an @xmath0-node graph is bounded above by @xmath46 .",
    "hence @xmath47 .",
    "we have @xmath48 the product of @xmath2 positive numbers whose sum is at most @xmath46 is maximized when they are all equal to @xmath49 .",
    "hence @xmath50 .",
    "this concludes the proof .",
    "in this section , we prove a lower bound on the size of advice permitting rendezvous in optimal time @xmath4 , where @xmath2 is the initial distance between the agents .",
    "this lower bound will match the upper bound established in theorem [ ub ] , which says that , for an arbitrary @xmath0-node graph , rendezvous can be achieved in time @xmath4 using advice of size @xmath18 . in order to prove that this size of advice can not be improved in general",
    ", we present two classes of graphs : one that requires advice @xmath51 and another that requires advice @xmath52 to achieve optimal time of rendezvous . to make the lower bound even stronger ,",
    "we show that it holds even in the scenario where agents start simultaneously .",
    "the @xmath51 lower bound will be first proved for the simpler problem of treasure hunt .",
    "recall that in this task , a single agent must find a stationary target ( treasure ) hidden at an unknown node of the graph at distance @xmath2 from the initial position of the agent .",
    "we then show how to derive the same lower bound on the size of advice for the rendezvous problem .",
    "the following technical lemma gives a construction of a graph which will provide the core of our argument for the @xmath51 lower bound .",
    "[ lowerboundgraph ] let @xmath0 and @xmath2 be positive integers such that @xmath53 .",
    "consider any treasure - hunting algorithm @xmath54 that takes @xmath55 bits of advice .",
    "for any fixed even integer @xmath56 and every integer @xmath57 , there exists a graph of size @xmath58 , an initial position of the agent in this graph , and a location of the treasure at distance @xmath59 from this initial position , for which algorithm @xmath54 uses @xmath60 rounds .",
    "we define a class of graphs @xmath61 such that each graph in @xmath61 has @xmath62 nodes .",
    "we will prove that there is a non - empty subset @xmath63 of @xmath61 such that , on each graph in @xmath63 , algorithm @xmath54 uses @xmath60 rounds to complete treasure hunt , for some initial position of the agent and a location of the treasure at distance @xmath59 from this location .",
    "each graph @xmath19 in the class consists of @xmath64 copies of a @xmath17-clique @xmath65 ( with a port numbering to be described shortly ) , which are chained together in a special way .",
    "we will refer to these cliques as @xmath66 .",
    "let @xmath67 denote the nodes of @xmath65 .",
    "it should be stressed that names of nodes in cliques are for the convenience of the description only , and they are not visible to the agent .",
    "we choose an arbitrary edge - colouring of @xmath65 using the colours @xmath68 , which is always possible for cliques of even size , cf .",
    "e.g. , @xcite , theorem 7.6 . for an arbitrary edge @xmath69 in @xmath65 ,",
    "let @xmath70 denote the colour assigned to @xmath69 .",
    "the port numbers of @xmath65 are simply the edge colours , i.e. , for any edge @xmath71 , the port numbers corresponding to this edge at @xmath24 and @xmath7 are both equal to @xmath72 .",
    "each graph @xmath73 is obtained by chaining together the copies @xmath66 of the clique @xmath65 in the following way .",
    "we will call node @xmath74 in clique @xmath75 the _ gate _",
    "@xmath76 of @xmath75 .",
    "the initial position of the agent is @xmath77 .",
    "each gate @xmath76 , for @xmath78 , is placed on ( i.e. , subdivides ) one of the edges of clique @xmath79 not incident to @xmath80 .",
    "we denote this edge by @xmath81 .",
    "finally , an additional _ treasure node _ @xmath82 is placed on ( i.e. , subdivides ) one of the edges of clique @xmath83 not incident to @xmath84 , and this edge is denoted by @xmath85 .",
    "hence @xmath77 has degree @xmath86 , each @xmath76 , for @xmath87 , has degree @xmath88 , and @xmath89 has degree 2 , cf .",
    "figure 1 ( a ) .",
    "note that , since @xmath76 , for @xmath78 , subdivides an edge that is not incident to @xmath80 , we have @xmath90 .",
    "port numbering of graph @xmath19 is the following .",
    "port numbers in each clique @xmath91 are unchanged , the new port numbers at each node @xmath92 , for @xmath93 , are @xmath86 and @xmath17 , with @xmath86 corresponding to the edge whose other endpoint has smaller index , and the new port numbers at node @xmath89 are @xmath94 and @xmath95 , with @xmath94 corresponding to the edge whose other endpoint has smaller index , cf . figure 1 ( b ) .",
    "all graphs in the class @xmath61 are isomorphic and differ only by port numbering .",
    "note that each graph in @xmath61 is uniquely identified by the sequence of edges @xmath96 .",
    "therefore , the number of graphs in @xmath61 is @xmath97 .",
    "( b ) port numbering of each clique @xmath75 , for @xmath98 , with gate @xmath99 inserted ]    notice that an agent navigating in a graph @xmath73 always knows when it arrives at a gate @xmath76 , for @xmath87 , because these are the only nodes of degree @xmath88 .",
    "call a walk of an agent _ normal _ , if the agent visits each gate @xmath76 , for @xmath87 , exactly once ( i.e. , never exits a gate by port @xmath86 or @xmath17 ) .",
    "it is enough to prove our lower bound on the time of treasure hunt only for algorithms where the agent always performs a normal walk .",
    "indeed , for any walk , there exists a normal walk using at most the same time . from now on we restrict attention to such algorithms .",
    "we prove our lower bound on the class of graphs @xmath61 .",
    "the idea is that , in order to find the treasure node , the agent must visit each of the nodes @xmath100 . to get from @xmath76 to @xmath99 ,",
    "the agent must find the edge @xmath101 of @xmath75 that the node @xmath99 subdivides . with little advice ,",
    "this amounts to searching many edges of the clique @xmath75 , and hence increases time .    for any graph @xmath19",
    ", the agent is given some advice string @xmath102 and executes its treasure - hunting algorithm @xmath54 . with @xmath55 bits of advice",
    ", there exists a set @xmath63 of at least @xmath103 graphs for which the agent is given the same advice string .",
    "next , we provide an upper bound on the number of graphs in @xmath63 . by comparing this upper bound with @xmath103",
    ", we will get the desired lower bound on the number of rounds needed to find the treasure .",
    "let @xmath104 be the maximum running time of algorithm @xmath54 on graphs of class @xmath61 .",
    "let @xmath105 be the function that maps each graph from @xmath106 to an @xmath64-tuple @xmath107 , where , for each @xmath108 , @xmath109 is the number of edge traversals performed by the agent in clique @xmath75 .",
    "this function is well - defined since we consider only deterministic algorithms .",
    "we now prove that this function is injective .",
    "[ injective ] for any two graphs @xmath110 in the set @xmath63 , we have @xmath111 .",
    "let @xmath19 and @xmath112 be represented by the distinct sequences of edges @xmath96 and @xmath113 , respectively .",
    "let @xmath114 be the first index for which @xmath115 .",
    "since the advice string for graphs @xmath19 and @xmath112 is the same , the sequence of ports taken by the agent in these graphs is the same until the agent reaches nodes of different degree in @xmath19 and @xmath112 .",
    "let @xmath116 and @xmath117 .",
    "hence @xmath118 for @xmath119 .",
    "without loss of generality assume that @xmath120 . for each round @xmath121",
    ", the agent takes the same port number in @xmath19 and @xmath112 .",
    "in round @xmath122 the agent reaches the gate @xmath123 in @xmath19 . since @xmath115 , the agent does not reach the gate @xmath123 in @xmath112 in this round .",
    "since the walk of the agent is normal , we conclude that @xmath124 .    by claim [ injective ] ,",
    "the number of graphs in @xmath63 is bounded above by the size of the range of @xmath105 .",
    "consider an arbitrary @xmath64-tuple @xmath107 in the range of @xmath105 . by the definition of @xmath61 ,",
    "for each @xmath108 , the agent must traverse at least two edges to get from @xmath76 to @xmath99 .",
    "further , @xmath104 is an upper bound on the number of edge traversals performed in any execution of the algorithm .",
    "therefore , the size of the range of @xmath105 is bounded above by the number of integer - valued @xmath64-tuples with positive terms whose sum is at most @xmath104 .",
    "clearly , this is bounded above by the number of real - valued @xmath64-tuples with non - negative terms whose sum is at most @xmath104 , i.e. , by the size of the simplex @xmath125 . from @xcite ,",
    "the volume of @xmath126 is equal to @xmath127 .",
    "thus , we have shown that the size of @xmath63 is bounded above by @xmath127 . comparing this to our lower bound @xmath103 on the size of @xmath63",
    ", we get @xmath128{\\ell ! \\frac{n}{2^{dz } } }     \\geq    \\sqrt[\\ell]{\\ell ! \\frac{((k-1)(k-2)/2)^{\\ell}}{2^{dz } } }      \\geq    \\sqrt[\\ell]{\\ell ! } \\frac{(k-2)^{2}/2}{2^{dz/\\ell}}\\\\",
    "=   \\sqrt[\\ell]{\\ell !",
    "} \\frac{(k-2)^{2}/2}{2^{2z}}.\\ ] ]    by stirling s formula we have @xmath129 , for sufficiently large @xmath64 .",
    "hence @xmath130{\\ell ! } \\geq",
    "\\ell^{1/(2\\ell ) } \\cdot ( \\ell / e)$ ] .",
    "since the first factor converges to 1 as @xmath64 grows , we have @xmath130{\\ell ! } \\in \\omega(\\ell)$ ] .",
    "hence the above bound on @xmath104 implies @xmath131 .",
    "[ lb1 ] let @xmath0 and @xmath2 be positive integers such that @xmath53 .",
    "if an algorithm @xmath54 solves treasure hunting in @xmath4 rounds whenever the treasure is at distance @xmath2 from the initial position of the agent , then there exists an @xmath0-node graph @xmath19 with treasure at this distance such that @xmath54 requires @xmath51 bits of advice .",
    "we suppose that only @xmath132 bits of advice are provided , and show that there is an @xmath0-node graph for which @xmath54 completes treasure hunt in @xmath133 rounds .",
    "* @xmath134 . +",
    "the amount of advice provided is @xmath55 , where @xmath135 . by lemma [ lowerboundgraph ] with @xmath136 or @xmath137 ,",
    "whichever number is even , and @xmath138 , there exists a graph @xmath139 such that , for some positive constant @xmath140 , algorithm @xmath54 uses at least @xmath141 rounds to reach the treasure located at some node @xmath22 at distance @xmath59 from the initial position of the agent .    * case 2 .",
    "* @xmath142 .",
    "+ since @xmath143 is constant and @xmath132 bits of advice are provided , it follows that the amount of advice provided is @xmath55 , where @xmath144 for some integer function @xmath145 such that @xmath146 . by lemma [ lowerboundgraph ] with @xmath147 or @xmath148 ,",
    "whichever number is even , and @xmath149 , there exists a graph @xmath139 such that , for some positive constant @xmath140 , algorithm @xmath54 uses at least @xmath150 rounds to reach the treasure located at some node @xmath22 at distance @xmath59 from the initial position of the agent .    in both cases ,",
    "graph @xmath112 has @xmath62 nodes and the treasure is located at distance @xmath59 from the initial position of the agent .",
    "we obtain a graph @xmath19 with @xmath0 nodes by attaching a path of @xmath151 nodes to node @xmath22 in @xmath112 . in this graph",
    "@xmath19 the initial position of the agent is unchanged with respect to @xmath112 , and the treasure is located on the attached path at distance @xmath2 from this initial position .",
    "we now show how to deduce a lower bound on the size of advice for rendezvous ( even with simultaneous start ) from the lower bound for treasure hunt .",
    "[ cor ] let @xmath152 be positive integers .",
    "there exist @xmath153 and @xmath154 such that if an algorithm @xmath54 solves rendezvous in time @xmath4 in @xmath0-node graphs whenever the initial distance between the agents is @xmath2 , then there exists an @xmath0-node graph for which @xmath54 requires @xmath51 bits of advice .",
    "let @xmath19 be a @xmath155-node graph with a treasure located at distance @xmath156 from the initial position of the agent such that an @xmath157-time treasure hunting algorithm requires @xmath158 bits of advice .",
    "such a graph exists by theorem [ lb1 ] .",
    "let @xmath7 be the initial position of the agent and let @xmath159 be the location of the treasure in graph @xmath19 .",
    "let @xmath160 and @xmath161 . hence @xmath153 and @xmath154 .",
    "construct the graph @xmath162 which consists of two disjoint copies of @xmath19 with the treasure locations joined by an edge .",
    "locate two agents in @xmath162 , each at the node @xmath7 in different copies of @xmath19 .",
    "the graph @xmath162 has @xmath0 nodes and the initial distance between the agents is @xmath2 . in order to accomplish rendezvous in time @xmath4 ,",
    "at least one of the agents has to traverse the edge joining the copies , hence it must find the node @xmath159 in its copy in time @xmath157 , which requires advice of size @xmath163 .    the second part of our lower bound on the size of advice , i.e. , the lower bound @xmath52 , will be proved on the class of oriented rings .",
    "a ring is _ oriented _ if every edge has port labels 0 and 1 at the two end - points .",
    "such a port labeling induces orientation of the ring : at each node , we will say that taking port 0 is going clockwise and taking port 1 is going counterclockwise .",
    "we assume that agents operate in an oriented ring of size @xmath0 . in order to make the lower bound as strong as possible",
    ", we prove that it holds even for simultaneous start of the agents .",
    "[ lb2 ] let @xmath152 be positive integers .",
    "consider any algorithm @xmath54 that solves rendezvous for agents with labels from the set @xmath164 .",
    "there exist @xmath153 and @xmath154 such that if @xmath54 uses time @xmath4 in the @xmath0-node oriented ring whenever the initial distance between the agents is @xmath2 , then the required size of advice is @xmath52 .",
    "assume that @xmath102 is the advice string given to the agents .",
    "consider an agent with label @xmath165 executing algorithm @xmath54 using advice @xmath102 .",
    "the actions of the agent in consecutive rounds until rendezvous are specified by a _",
    "behaviour vector _ @xmath166 .",
    "in particular , @xmath166 is a sequence with terms from @xmath167 that specifies , for each round @xmath168 , whether agent @xmath22 moves clockwise ( denoted by @xmath169 ) , remains idle ( denoted by @xmath94 ) , or moves counter - clockwise ( denoted by @xmath95 ) . note that an agent s behaviour vector is independent of its starting position , since all nodes of the ring look the same to the agent .",
    "this behaviour vector depends exclusively on the label of the agent and on the advice string @xmath102 .",
    "let @xmath170 , @xmath171 and @xmath172 . hence @xmath153 , @xmath154 , @xmath156 divides @xmath0 , and @xmath173 . as the initial positions of the agents , fix any nodes @xmath7 and @xmath159 of the @xmath0-node oriented ring , where @xmath159 is at clockwise distance @xmath2 from @xmath7 . since @xmath173 , agents are at distance @xmath2 in the ring .",
    "partition the nodes of the ring into @xmath174 consecutive blocks @xmath175 of size @xmath156 , starting clockwise from node @xmath7 .",
    "hence the initial positions @xmath7 and @xmath159 of the agents are the clockwise - first nodes of block @xmath176 and block @xmath177 , respectively . since agents start simultaneously , we have the notion of global round numbers counted since their start .",
    "partition all rounds @xmath178 into consecutive _ time segments _ of length @xmath156 .",
    "hence , during any time segment , an agent can be located in at most two ( neighbouring ) blocks .",
    "fix a behaviour vector @xmath166 of an agent with label @xmath22 .",
    "we define its _ meta - behaviour vector _ as a sequence @xmath179 with terms from @xmath167 as follows .",
    "suppose that the agent is in block @xmath180 in the first round of the @xmath168-th segment .",
    "the @xmath168-th term of @xmath179 is @xmath181 , if , in the first round of the @xmath182-th time segment , the agent is in the block @xmath183 , where index addition is modulo @xmath174 . since the initial position of an agent is the clockwise - first node of a block , for a fixed behaviour vector of an agent its meta - behaviour vector",
    "is well defined .",
    "suppose that algorithm @xmath54 takes at most @xmath184 rounds , for some constant @xmath140 .",
    "this corresponds to @xmath9 time segments for some constant @xmath185 .",
    "hence , all meta - behaviour vectors describing the actions of agents before the meeting are of length @xmath9 ( shorter meta - behaviour vectors can be padded by zeroes at the end . ) let @xmath186 be the set of sequences of length @xmath9 with terms from @xmath167 .",
    "sequences from @xmath186 represent possible meta - behaviour vectors of the agents .",
    "the size of @xmath186 is @xmath187 .",
    "since the initial positions of the agents are in blocks that are separated by two other blocks , agents with the same meta - behaviour vectors must be in different blocks in every round , and hence they can never meet . indeed , in the first round of every time segment they must be in blocks separated by two other blocks , and during any time segment , an agent can either stay in the same block or get to an adjacent block .",
    "suppose that the number of bits of advice is at most @xmath188 .",
    "it follows that the set @xmath39 of advice strings is of size at most @xmath189 . for any label @xmath165 ,",
    "let @xmath190 be the function from @xmath39 to @xmath186 , whose value on an advice string @xmath191 is the meta - behaviour vector of the agent with label @xmath22 when given the advice string @xmath102 .",
    "functions @xmath190 are well - defined , as the meta - behaviour vector of an agent whose initial position is the clockwise - first node of a block depends only on its behaviour vector , which in turn depends only on the label of the agent and on the advice string .    if the set @xmath192 of all functions from @xmath193 to @xmath194 had fewer elements than @xmath195 , then there would exist two distinct labels @xmath196 and @xmath197 of agents such that , for any advice string @xmath102 , these agents would have an identical meta - behaviour vector . as observed above",
    ", these agents could never meet .",
    "this implies @xmath198 .",
    "hence @xmath199 , which contradicts the fact that @xmath9 is a constant .",
    "this shows that the number of bits of advice must be larger than @xmath200 .",
    "corollary [ cor ] and theorem [ lb2 ] imply :    [ lb ] let @xmath152 be positive integers . consider any algorithm @xmath54 that solves rendezvous for agents with labels from the set @xmath164 .",
    "there exist @xmath153 and @xmath154 such that , if @xmath54 takes time @xmath4 in all @xmath0-node graphs whenever the initial distance between the agents is @xmath2 , then the required size of advice is @xmath201 .",
    "theorems [ ub ] and [ lb ] imply the following corollary which is the main result of this paper .    the minimum number of bits of advice sufficient to accomplish rendezvous of agents with labels from the set @xmath202 in all @xmath0-node graphs in time @xmath4 , whenever the initial distance between the agents is @xmath2 , is @xmath203 .",
    "we established that @xmath6 is the minimum amount of information ( advice ) that agents must have in order to meet in optimal time @xmath5 , where @xmath2 is the initial distance between them .",
    "it should be noted that the two summands in this optimal size of advice have very different roles .",
    "on one hand , @xmath204 bits of advice are necessary and sufficient to accomplish , in @xmath4 time , the easier task of treasure hunt in @xmath0-node networks , where a single agent must find a target ( treasure ) hidden at an unknown node of the network at distance @xmath2 from its initial position .",
    "this task is equivalent to a special case of rendezvous where one of the agents is inert . on the other hand , for agents whose",
    "labels are drawn from a label space of size @xmath195 , @xmath205 bits of advice are needed to break symmetry quickly enough in order to solve rendezvous in time @xmath4 , and hence , are necessary to meet in optimal time @xmath5 , even in constant - size networks . it should be stressed that the first summand in @xmath18 is usually larger than the second . indeed , only when @xmath195 is very large with respect to @xmath0 and @xmath2 does the second summand dominate .",
    "this means that `` in most cases '' the easier task of solving treasure hunt in optimal time is as demanding , in terms of advice , as the harder task of solving rendezvous in optimal time .    in this paper",
    ", we assumed that the advice given to both agents is identical .",
    "how does the result change when each agent can get different advice ?",
    "it is clear that giving only one bit of advice , 0 to one agent and 1 to the other , breaks symmetry between them , e.g. , the algorithm can make the agent that received bit 0 stay inert .",
    "thus , if advice can be different , one bit of advice reduces rendezvous to treasure hunt .",
    "the opposite reduction is straightforward .",
    "hence it follows from our results that @xmath204 bits of advice are necessary and sufficient to accomplish rendezvous in optimal time @xmath5 in @xmath0-node networks , if advice can be different .",
    "this holds regardless of the label space and is , in fact , also true for anonymous ( identical ) agents .",
    "e. bampas , j. czyzowicz , l. gasieniec , d. ilcinkas , a. labourel , almost optimal asynchronous rendezvous in infinite multidimensional grids , proc .",
    "24th international symposium on distributed computing ( disc 2010 ) , 297 - 311 .",
    "p. fraigniaud , d. ilcinkas , a. pelc , communication algorithms with advice , journal of computer and system sciences 76 ( 2010 ) , 222232 .",
    "p. fraigniaud , d. ilcinkas , a. pelc , tree exploration with advice , information and computation 206 ( 2008 ) , 12761287 .",
    "p. fraigniaud , a. korman , e. lebhar , local mst computation with short advice , theory of computing systems 47 ( 2010 ) , 920933 ."
  ],
  "abstract_text": [
    "<S> two mobile agents ( robots ) , starting from different nodes of an @xmath0-node network at possibly different times , have to meet at the same node . </S>",
    "<S> this problem is known as _ </S>",
    "<S> rendezvous_. agents move in synchronous rounds using a deterministic algorithm . in each round </S>",
    "<S> , an agent decides to either remain idle or to move to one of the adjacent nodes . </S>",
    "<S> each agent has a distinct integer label from the set @xmath1 , which it can use in the execution of the algorithm , but it does not know the label of the other agent .    </S>",
    "<S> the main efficiency measure of a rendezvous algorithm s performance is its _ time _ , i.e. , the number of rounds from the start of the later agent until the meeting . </S>",
    "<S> if @xmath2 is the distance between the initial positions of the agents , then @xmath3 is an obvious lower bound on the time of rendezvous . </S>",
    "<S> however , if each agent has no initial knowledge other than its label , time @xmath4 is usually impossible to achieve . </S>",
    "<S> we study the minimum amount of information that has to be available _ a priori _ to the agents to achieve rendezvous in optimal time @xmath5 . following the standard paradigm of _ algorithms with advice _ , this information is provided to the agents at the start by an oracle knowing the entire instance of the problem , i.e. , the network , the starting positions of the agents , their wake - up rounds , and both of their labels . </S>",
    "<S> the oracle helps the agents by providing them with the _ same _ binary string called _ advice _ , which can be used by the agents during their navigation . </S>",
    "<S> the length of this string is called the _ size of advice_. our goal is to find the smallest size of advice which enables the agents to meet in time @xmath5 . </S>",
    "<S> we show that this optimal size of advice is @xmath6 . </S>",
    "<S> the upper bound is proved by constructing an advice string of this size , and providing a natural rendezvous algorithm using this advice that works in time @xmath5 for all networks . </S>",
    "<S> the matching lower bound , which is the main contribution of this paper , is proved by exhibiting classes of networks for which it is impossible to achieve rendezvous in time @xmath5 with smaller advice .    </S>",
    "<S> * keywords : * rendezvous , advice , deterministic distributed algorithm , mobile agent , time . </S>"
  ]
}