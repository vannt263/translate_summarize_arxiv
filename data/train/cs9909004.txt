{
  "article_text": [
    "consider the problem of moving a point robot in the interior of a convex polygon containing a single obstacle .",
    "we are looking for a smooth , closed , convex , curvature - constrained path of the point around the obstacle .",
    "no source or target position of the point are specified .    the problem of planning the motion of a robot subject to kinematic constraints has been studied in numerous papers in the last decade ( cf .",
    "@xcite , @xcite ) .",
    "for example , reif and sharir @xcite studied the problem of planning the motion of a robot with a velocity bound amidst moving obstacles in two and three - dimensional space .",
    "dnlaing @xcite presented an exact algorithm solving the one - dimensional kinodynamic motion planning problem whereas canny , donald , reif and xavier @xcite gave the first approximation algorithm solving the two and three - dimensional kinodynamic motion planning problem for a point amidst polyhedral obstacles .",
    "another aspect of the motion planning problem in the plane consists in finding paths under curvature constraints .",
    "dubins @xcite characterized shortest curvature constrained paths in the euclidean plane without any obstacle .",
    "more recently , fortune and wilfong @xcite gave a decision procedure to verify if the source and target placement of a point robot may be joined by a curvature constrained path avoiding the polygonal obstacles .",
    "their procedure has time and space complexity @xmath3 , where @xmath1 is the number of obstacle vertices , and @xmath0 is the number of bits required to specify the positions of these vertices .",
    "jacobs and canny @xcite gave an algorithm computing an approximate curvature constrained path , and wilfong @xcite designed an exact algorithm for the case where the curvature constrained path is limited to some fixed straight `` lanes '' and circular arc turns between the lanes .",
    "finally , vestka _ et al . _",
    "@xcite applied the random approach introduced by overmars @xcite to compute curvature constrained paths for car - like robots .",
    "besides heuristic and approximating approaches , an exact algorithmic solution seems to be difficult to find for the general case .",
    "an interesting direction of research is to design exact algorithms for some variants of the problem . in this paper",
    ", we give an efficient solution for the problem of computing a smooth closed convex path going around a single polygonal obstacle with @xmath1 vertices inside a convex polygon with @xmath0 vertices .",
    "we design an @xmath4 time and space algorithm finding a path of smallest curvature .",
    "the idea of the algorithm is to compute the curvature constraints imposed by the vertices of the obstacle .",
    "the maximal such constraint is then used to compute the smooth closed convex path which must surround the entire obstacle .    finally , some extensions of this solution for the case of numerous obstacles , and for the case of obstacles coming as queries in a dynamic setting are also presented .",
    "let @xmath5 be a convex polygon with @xmath0 vertices and let @xmath6 be a simple polygon with @xmath1 vertices .",
    "the region @xmath7 represents the _ workspace _ @xmath8 in which the point robot can move .",
    "a function @xmath9 \\rightarrow w$ ] is a _ smooth path _ if @xmath10 and the functions @xmath11 \\rightarrow { \\rm i\\hskip -0.2em r}$ ] are continuous with continuous derivative ( i.e. @xmath12 and @xmath13 must be in @xmath14 ) . a smooth path @xmath15 is @xmath16 if @xmath17 and its right derivative at point 0 is equal to its left derivative at point @xmath18 . as any smooth path has finite length , we assume that @xmath15 is parameterized by arc length .",
    "such a parametrization is called a _",
    "normal _ parametrization of @xmath15 .",
    "let @xmath19 be the angle made by the tangent of the path @xmath15 at the point @xmath20 with the @xmath21-axis .",
    "the _ curvature _ of @xmath15 at a point @xmath22 can be defined as @xmath23 .",
    "it might be possible that the curvature of a path is not defined at some points .",
    "for example , consider a circular arc extending a line segment in such a way that the circle containing the arc is tangent to the line containing the line segment .",
    "the curvature of the tangent point joining the arc and the line segment is not defined .",
    "in such a case , we have to consider the _ average curvature _ of the path .",
    "a path @xmath15 has its average curvature bounded by some constant @xmath24 if @xmath25 , for all @xmath26 .",
    "if @xmath24 is the best bound possible , we would say that the average curvature of @xmath15 is in fact equal to @xmath24 .",
    "hence , the term curvature used in this paper refers to the notion of average curvature . by using this definition , the curvature of a circular arc of radius @xmath22 is @xmath27 and the curvature of a line is @xmath28 .",
    "a curvature bounded smooth closed convex path @xmath15 is a @xmath29 of @xmath30 in @xmath31 if the bounded region of @xmath31 , delimited by the jordan curve @xmath15 , is convex and contains @xmath30 . note that the points of boundaries of @xmath31 and @xmath30 are allowed to lie on the tour .",
    "finally , a tour is @xmath32 if its curvature is the smallest possible .",
    "the main problem considered in this paper can be formulated as follows .",
    "find an optimal tour of @xmath30 in @xmath31 .",
    "we first consider the degenerated case where the internal polygon @xmath30 is a single point .",
    "[ lemme1 ] for a given convex polygon @xmath31 and a point @xmath33 inside @xmath31 , let @xmath34 denote a circle of radius @xmath22 inscribed in @xmath31 , passing through @xmath33 , and tangent to the boundary of @xmath31 in two points @xmath35 and @xmath36 . if the arc @xmath37 of @xmath34 is not greater than a semicircle , then the curvature of any tour of @xmath33 in @xmath31 is at least equal to @xmath27 .",
    "let @xmath38 denote a tour of @xmath33 in @xmath31 .",
    "such a smooth path must intersect @xmath39 .",
    "translate @xmath39 along the bisector of the angle defined by the tangents of @xmath34 at @xmath40 and @xmath41 .",
    "now , let @xmath42 denote the furthest position of @xmath39 tangent to @xmath38 and let @xmath21 be some tangent point ( see fig .",
    "[ fig - lemme1 ] ) .",
    "suppose that @xmath38 and @xmath42 coincide on a small interval around @xmath21 . in this interval ,",
    "the curvature of @xmath38 is the same as the curvature of @xmath42 which is @xmath27 . now , suppose that @xmath38 is strictly below @xmath42 just after @xmath21 .",
    "notice that such a tangent point always exists if @xmath42 does not coincide with @xmath39 .",
    "it follows from lemma  [ l : appendix - curv ] of the appendix that the curvature of @xmath38 is strictly greater than the curvature of @xmath42 which is @xmath27 .    following this lemma",
    ", a circle @xmath34 inscribed in the polygon @xmath31 and tangent to the points @xmath40 and @xmath41 is the _",
    "critical circle _ of a point @xmath33 in @xmath31 , if the arc @xmath43 of @xmath34 is not greater than a semicircle .",
    "the arc @xmath43 is called the _ critical arc _ of @xmath33 in @xmath31 .",
    "notice that only points lying outside a largest inscribed circle in @xmath31 admit critical arcs .",
    "consider the problem of computing , if one exists , a tour of @xmath30 in @xmath31 with curvature bounded by some given constant @xmath24 .",
    "we present in this section an algorithm solving this problem in @xmath44 time .",
    "the algorithm proceeds by computing a maximal path in @xmath31 with curvature bounded by @xmath24 . note that the value of @xmath24 should not be greater than @xmath45 where @xmath46 represents the radius of the largest inscribed circle in @xmath31 .",
    "this follows from the fact that any smooth closed convex path of curvature @xmath24 should enclose a circle with radius @xmath47 ( see lemma  [ l : appendix - conv ] ) .",
    "let @xmath48 be the set of all circles of radius 1/@xmath24 inscribed in @xmath31 , and tangent to @xmath31 in at least two points .",
    "the curve @xmath49 , formed by the boundary of the convex hull of @xmath48 , is a smooth closed convex path with curvature bounded by @xmath24 .",
    "such a path @xmath49 is called a _ maximal path _ in @xmath31 .",
    "it follows from the proof of lemma  [ lemme1 ] that the convex region bounded by @xmath49 contains any smooth closed convex path inside @xmath31 with curvature bounded by @xmath24 .",
    "hence , if @xmath49 is not a tour of @xmath30 in @xmath31 , there exists no tour of @xmath30 in @xmath31 with curvature bounded by @xmath24 ( see fig .",
    "[ fig - max - given - curv ] ) .    before we turn our attention to the algorithm verifying the existence of a tour of given curvature , we introduce some useful concepts .",
    "consider the medial axis of @xmath31 @xcite .",
    "since @xmath31 is a convex polygon , its medial axis corresponds to a tree .",
    "each internal vertex @xmath21 of this tree is the center of a circle tangent to three edges of @xmath31 .",
    "this circle is called a _ voronoi circle_. we assign to @xmath21 a weight @xmath50 corresponding to the radius of its voronoi circle .",
    "thus , @xmath50 represents the distance between @xmath21 and the boundary of @xmath31 .",
    "this weighted tree , rooted at a vertex with the largest weight , is called the _ skeleton tree _ and is denoted @xmath51 .",
    "it follows from the definition of the medial axis that each edge of @xmath51 is a straight line segment belonging to the bisector of some two edges of @xmath31 .",
    "it follows also from the definition that each vertex of @xmath51 has at least two descendants .",
    "finally , we can easily prove that the weight of any vertex in @xmath51 is greater than the weights of its descendants .",
    "has two parallel edges . ]",
    "this property will be crucial for our algorithms .",
    "we are now ready to present how to compute the maximal path @xmath49 .",
    "[ lemme2 ] given the skeleton tree @xmath51 , the maximal path @xmath49 in @xmath31 with curvature bounded by @xmath24 can be computed in @xmath52 time , where @xmath53 is the size complexity of the path .",
    "perform a tree traversal on @xmath51 . each time",
    "a vertex @xmath21 is visited , such that @xmath54 , there exists a circle of radius 1/@xmath24 tangent to the boundary of @xmath31 , and centered on the edge joining @xmath21 and @xmath55 .",
    "this circle can be computed easily once the edges of @xmath31 defining the edge joining @xmath21 to @xmath55 are known .",
    "then , the subtree of @xmath51 rooted at @xmath21 is pruned and the traversal continues from @xmath55 . in this way , all the @xmath53 circles with radius @xmath47 inscribed in @xmath31 are found in order of their appearance on @xmath49 . hence , the maximal path @xmath49 corresponding to the convex hull of the circles can be obtained easily by joining two consecutive circles by their common supporting segment .",
    "the @xmath52 time complexity of the algorithm follows from the fact that the number of vertices visited during the transversal of @xmath51 is in @xmath52 .",
    "it should be obvious now how to determine if there exists a tour of @xmath30 in @xmath31 with curvature bounded by @xmath24 .",
    "first , compute the medial axis of @xmath31 in @xmath56 time @xcite . then , compute the maximal path @xmath49 and determine if @xmath30 lies completely inside @xmath49 .",
    "this latter step can be done easily in @xmath57 time where @xmath53 is the complexity of @xmath49 .",
    "hence , the algorithm computes , if one exists , a tour of @xmath30 in @xmath31 with curvature bounded by @xmath24 in @xmath44 time .",
    "the notion of maximal path can be related to the notion of offset curves used in cad / cam @xcite .",
    "the offset curves of convex polygons can be constructed in linear time without computing the medial - axis of the polygons @xcite .",
    "consider the problem of computing an optimal tour of @xmath30 in @xmath31 .",
    "an algorithm solving this problem can be sketched as follows .",
    "find a vertex of @xmath30 which has the critical arc in @xmath31 with the minimum radius .",
    "such a vertex determines the curvature of an optimal tour .",
    "once the curvature of the optimal tour is known , a tour can be computed as we described in the previous section .",
    "we present in this section how to implement this algorithm optimally in @xmath44 time .",
    "we first present the data structures used by the algorithm .",
    "let @xmath58 be the list of the vertices of the convex hull of @xmath30 given in radial counter clockwise order around the root of @xmath51 .",
    "the choice of the root of @xmath51 is arbitrary .",
    "we simply need a point inside a largest inscribed circle in @xmath31 to simplify the analysis of the algorithm .",
    "this list can be built easily in @xmath59 time .",
    "now , let @xmath60 be the list of arcs defined as follows .",
    "consider the voronoi circles associated with the internal vertices of @xmath51 .",
    "the tangent points of these circles with the boundary of @xmath31 partition each circle into at least three arcs .",
    "each of these arcs is put in @xmath60 if it is less than a semicircle .",
    "we also put in @xmath60 the leaves of @xmath51 .",
    "these points represent degenerated arcs .",
    "the elements of @xmath60 must ordered such that the first endpoints of the arcs appear in counterclockwise order on the boundary of @xmath31 ( see fig .",
    "[ arcs ] ) . in the next lemma",
    ", we show how to build the list @xmath60 efficiently .",
    "[ lemme - arcs ] @xmath60 can be generated in @xmath56 time and space .",
    "perform a tree traversal on @xmath51 .",
    "the traversal can be oriented such that the children of any node are visited in counterclockwise order .",
    "an arc is produced each time a vertex @xmath21 is visited from its parent @xmath33 .",
    "this arc is less than a semicircle , centered at @xmath33 , and tangent to the two edges of @xmath31 whose bisector contains the edge @xmath61 of @xmath51 .",
    "finally , a degenerated arc is produced if @xmath21 is a leaf of @xmath51 .",
    "to see that the arcs are produced in the right order , observe that the tree traversal can be performed by moving a point @xmath62 continuously along the edges of @xmath51 .",
    "let @xmath63 be the orthogonal projection of @xmath62 on the edge of @xmath31 belonging to the voronoi cell on the right - hand side of @xmath62 with respect to the direction of the traversal .",
    "since @xmath51 corresponds to the medial axis of a convex polygon , @xmath63 moves continuously around the boundary of @xmath31 in counterclockwise direction .",
    "now , consider the arc computed while @xmath62 traverses the edge @xmath61 of @xmath51 . by construction ,",
    "the first endpoint of this arc corresponds to @xmath63 when @xmath62 coincides with @xmath33 .",
    "thus , the arcs are produced during the traversal of @xmath51 such that the first endpoints of the arcs appear in counterclockwise order on the boundary of @xmath31 .    the @xmath56 time and space complexities of",
    "the algorithm follow from the fact that @xmath51 has at most @xmath64 vertices .",
    "the points in @xmath58 and the endpoints of the arcs in @xmath60 are both sorted according to the radial counterclockwise order around the root of @xmath51 .",
    "these two lists will be traversed simultaneously by the algorithm and the relative order of the elements of one list with respect to the elements of the other list is important .",
    "thus , the first element of @xmath60 should be an arc of a largest inscribed circle in @xmath31 and the first element of @xmath58 should be the vertex just after the first endpoint of the first element of @xmath60 in the radial counterclockwise order around te root of @xmath51 .",
    "the variable @xmath65 will denote the current element of @xmath58 and the variable @xmath66 will denote the current element of @xmath60 .",
    "we say that the vertex @xmath65 is _ before _ the arc @xmath66 , if it precedes the first endpoint of @xmath66 in the radial counterclockwise order around the root of @xmath51 .",
    "@xmath65 is _ after _",
    "@xmath66 if it succeeds the second endpoint of @xmath66 in this order . for @xmath65",
    "situated neither before nor after @xmath66 , @xmath65 is _ inside _",
    "@xmath66 if the ray @xmath67 reaches @xmath65 before crossing @xmath66 , otherwise @xmath65 is _ outside _ @xmath66 .",
    "we are now ready to present the algorithm computing an optimal tour of @xmath30 in @xmath31 .",
    "the aim of the algorithm is to traverse the list @xmath58 and localize each vertex in the planar map generated by the arcs in @xmath60 and the boundary of @xmath31 ( see fig . [ arcs ] ) .",
    "once the cell containing the current vertex is determined , its critical arc may be computed easily in constant time .",
    "each iteration of the main step of the algorithm performs one among five possible actions .",
    "the action depends on the position of @xmath65 with respect to five regions determined by the current arc @xmath66 .",
    "let @xmath68 denote the successor of @xmath66 in the list @xmath60 and let @xmath69 be the smallest arc of the voronoi circle @xmath34 extending @xmath68 and containing all the tangent points between @xmath34 and @xmath31 .",
    "notice that @xmath69 lies completely outside @xmath66 .",
    "( see fig .",
    "[ main - algo ] ) .",
    "@xmath65 falls into , if it is outside @xmath66 but not outside @xmath69 , and in region if it is outside @xmath69 .",
    "@xmath65 is in region   if it is inside @xmath66 .",
    "finally , @xmath65 is in region   if it is after @xmath66 , and in region   if it is before @xmath66 .      to prove the correctness of the algorithm",
    ", we first have to show that the algorithm finds the critical arc with the minimum radius .",
    "thus , by lemma  [ lemme1 ] , any tour of @xmath30 in @xmath31 would have a curvature at least as great as the curvature of that arc .",
    "the aim of the algorithm is to locate the vertices of @xmath58 in the planar map induced by the arcs of @xmath60 and the boundary of @xmath31 .",
    "a typical cell of that map is bounded by two arcs and by the portions of two edges of @xmath31 . in case ,",
    "the endpoints of @xmath66 and @xmath69 lie on the same two edges of @xmath31 .",
    "this follows from the fact that the voronoi circles containing @xmath66 and @xmath68 are centered on the same edge of @xmath51 .",
    "hence , the cell containing @xmath65 is defined by two edges and two arcs .",
    "the critical arc of any point lying in that cell must be tangent to the two edges and can be computed in constant time .    in case , the radius of the critical arc of @xmath65 is smaller than the radius of the critical arc of any vertex lying in the cell bounded by @xmath66 and @xmath69 . in case , neither @xmath65 nor any subsequent vertex of @xmath58 will ever lie outside @xmath66 .",
    "hence , the arc @xmath66 can be discarded in both cases .",
    "finally , in cases and , @xmath65 lies either inside a largest inscribed circle or in the cell defined by the arcs @xmath70 and @xmath71 , for some arc @xmath70 appearing before @xmath66 in @xmath60 . in the former case ,",
    "@xmath65 do not admit a critical circle . in the latter case ,",
    "since @xmath65 lies outside @xmath70 , the arc @xmath70 can be discarded only in case of a previous step .",
    "this can only happen if a vertex outside @xmath71 has been found .",
    "the radius of the critical arc of that vertex is smaller than the radius of the critical arc of @xmath65 .",
    "thus @xmath65 can be discarded in both cases .",
    "hence , the algorithm finds a vertex whose critical arc has the minimum radius .",
    "then , the maximal path computed in step  6 must be a tour of @xmath30 .",
    "otherwise , there would be a vertex of @xmath30 lying outside @xmath49 . by construction , the critical arc of that vertex would have a radius smaller that @xmath22 which is impossible .",
    "the first two steps of the algorithm rely on well known optimal algorithms .",
    "the convex hull of @xmath30 can be computed in @xmath59 time @xcite and the skeleton tree of @xmath31 can be computed in @xmath56 time @xcite . in step  2 ,",
    "the list @xmath60 can be built in @xmath56 time according to lemma  [ lemme - arcs ] . in step  3",
    ", the list @xmath58 can be built easily in @xmath59 time .",
    "if the root of @xmath51 lies inside @xmath72 , @xmath58 is given by @xmath72 .",
    "otherwise , compute the tangents of @xmath72 going through the root of @xmath51 and merge the lower and the upper chains of @xmath72 to produce @xmath58 .",
    "step  5 represents the core of the algorithm .",
    "each iteration of the loop takes a constant time .",
    "however , as each iteration removes one vertex of @xmath58 or one arc of @xmath60 , the overall time complexity of this step is in @xmath4 . finally , by lemma  [ lemme2 ]",
    ", the optimal tour @xmath49 can be constructed in @xmath52 time , where @xmath73 .",
    "therefore , we obtain the following result .    [ main - thm ] an optimal tour of a simple polygon with @xmath1 vertices in a convex polygon with @xmath0 vertices can be computed in @xmath4 time and space .",
    "the algorithm can be adapted to compute a constrained optimal tour of @xmath30 in @xmath31 .",
    "suppose that the tour must to be tangent to some given lines when passing through some @xmath74 given points of @xmath75 .",
    "let @xmath76 denote the intersection of @xmath31 with @xmath74 half - planes delimited by the given lines , and let @xmath77 denote the convex hull of @xmath30 and the given @xmath74 points .",
    "then , the constrained optimal tour is given by an optimal tour of @xmath77 in @xmath76 .",
    "[ points - de - passage ] an optimal tour of a simple polygon with @xmath1 vertices in a convex polygon with @xmath0 vertices , constrained to have given tangents when passing through @xmath74 given points , can be computed in @xmath78 time and @xmath79 space .",
    "finally , we can also consider the problem where the point robot has to go around many obstacles given as points or polygons lying inside @xmath31 .",
    "in such a case , we simply have to compute the convex hull of the obstacles and find an optimal tour of the new `` obstacle '' .",
    "[ many - obstacles ] an optimal tour of a set of @xmath1 points in a convex polygon with @xmath0 vertices can be computed in @xmath80 time and space .",
    "the motion planning problem considered in the previous section can be reformulated in a dynamic setting . in this case , we want to preprocess a convex polygon @xmath31 with @xmath0 vertices in such a way that for any given query polygon @xmath30 with @xmath1 vertices , we can find quickly an optimal tour of @xmath30 in @xmath31 .",
    "this dynamic problem can be solved by adapting algorithm optimal tour . in step  5 , if the vertex @xmath65 lies in region with respect to the arc @xmath66 , the list @xmath60 is processed in order but it is clear that @xmath65 remains in region with respect to all other arcs outside @xmath66 .",
    "those arcs correspond to the subtree of @xmath51 rooted at a child of the vertex on which @xmath66 is centered .",
    "this subtree can be skipped in the traversal of @xmath60 .",
    "hence , the list @xmath60 is not produced explicitly in step  2 , but it may be obtained by traversing @xmath51 in step  5 .",
    "the subtree of @xmath51 effectively traversed is a subset of the subtree of @xmath51 used to generate an optimal tour in step  6 .",
    "thus , the time complexity of step 5 can be reduced to @xmath81 , where @xmath53 represents the complexity of the tour .",
    "[ dynamic - thm ] it is possible to preprocess a convex polygon @xmath31 with @xmath0 vertices in @xmath56 time and space , so that for any simple polygon @xmath30 with @xmath1 vertices , an optimal tour of @xmath30 in @xmath31 can be computed in @xmath57 time , where @xmath53 is the complexity of the tour .",
    "if the obstacle is given as a set of @xmath1 points instead of a simple polygon , we simply have to compute the convex hull of these points and to appply the above result .",
    "[ point - set - i ] it is possible to preprocess a convex polygon @xmath31 with @xmath0 vertices in @xmath56 time and space , so that for any set @xmath48 of @xmath1 points , an optimal tour of @xmath48 in @xmath31 can be computed in @xmath82 time , where @xmath53 is the complexity of the tour .    if the curvature of an optimal tour is needed instead of the tour itself , an alternative solution may be used .",
    "the main problem is still to find a vertex whose critical circle has the minimum radius .",
    "as we saw in the previous section , this problem can be reduced to a point location problem in the planar map induced by the arcs of @xmath60 and the boundary of @xmath31 . for each vertex @xmath33 of the obstacle ,",
    "locate @xmath33 in the map and compute its critical arc in @xmath31 .",
    "the planar map has @xmath56 size and it can be decomposed into trapezoids in @xmath56 time .",
    "following the idea of @xcite , this decomposition can be preprocessed in @xmath56 time and space , so that the point location would be possible in @xmath83 time .",
    "hence , we obtain the following result .",
    "[ planar - map - thm ] it is possible to preprocess a convex polygon @xmath31 with @xmath0 vertices in @xmath56 time and space , so that for any set @xmath48 of @xmath1 points , the curvature of an optimal tour of @xmath48 in @xmath31 can be computed in @xmath84 time .",
    "if @xmath0 is much smaller than @xmath1 , this method may be interesting even for computing the tour itself .",
    "the following corollary can be used alternatively to corollary  [ point - set - i ] .",
    "[ point - set - ii ] it is possible to preprocess a convex polygon @xmath31 with @xmath0 vertices in @xmath56 time and space , so that for any set @xmath48 of @xmath1 points , an optimal tour of @xmath48 in @xmath31 can be computed in @xmath85 time , where @xmath53 is the complexity of the tour .",
    "the paper gives an efficient algorithm computing a smallest curvature motion of a point robot around an obstacle inside a convex polygon .",
    "the solution easily generalizes on the case of numerous obstacles .",
    "we explore the fact that the resulting path must be convex . in this case",
    ", it is sufficient to compute the curvature constraints imposed by obstacles .",
    "the maximal constraint @xmath24 is used to compute the maximal curve , internal to the workspace , which must surround all the obstacles .",
    "the idea works only in the case of convex motion , and it is not clear how it may be generalized on the case of motion admitting left and right turns .",
    "an obvious line of further research is to design algorithms for more general workspace . from the result of @xcite it is possible to draw a pessimistic inference that a polynomial time algorithm computing curvature - constrained motion of a point in general workspace may not exist .",
    "it is natural to ask what are more general settings , that the one studied in this paper , for which the problem of curvature - constrained motion of a point admits an efficient solution , and what are the instances of the problem which are np - hard .",
    "20    a.  aggarwal , l.  j. guibas , j.  saxe , and p.  w. shor .",
    "a linear - time algorithm for computing the voronoi diagram of a convex polygon .",
    ", 4:591604 , 1989 .",
    "r.  e.  barnhill , ed . .",
    "siam , philadelphia , 1992 .",
    "b.  r. donald , p.  xavier , j.  canny , and j.  reif .",
    "kinodynamic motion planning .",
    "40(5):10481066 , november 1993 .",
    "l.  e. dubins . on curves of minimal length with a constraint on average curvature and with prescribed initial and terminal positions and tangents . , 79:497516 , 1957 .",
    "s.  fortune and g.  wilfong . planning constrained motion . , 3:2182 , 1991",
    ".    r.  l.  graham .",
    "a efficient algorithm for computing the convex hull of a finite planar set .",
    ", 1:132133 , 1972 .",
    "h.  w.  guggenheimer . .",
    "mcgraw - hill , new york , 1963 .",
    "p.  jacobs and j.  canny .",
    "planning smooth paths for mobile robots . in _ proc .",
    "ieee internat .",
    "conf . robot .",
    "_ , pages 27 , 1989 .    l.  e. kavraki , p.  vestka , j .- c .",
    "latombe , and m.  h. overmars .",
    "probabilistic roadmaps for path planning in high dimensional configuration spaces . , 12:566580 , 1996 .",
    "d.  g. kirkpatrick .",
    "optimal search in planar subdivisions .",
    ", 12:2835 , 1983 .",
    "latombe . .",
    "kluwer academic publishers , boston , 1991 .    c.  dnlaing .",
    "motion - planning with inertial constraints .",
    ", 2:431475 , 1987 .",
    "m.  h. overmars .",
    "a random approach to motion planning .",
    "report ruu - cs-92 - 32 , dept .",
    "utrecht , utrecht , netherlands , 1992 .",
    "m.  h. overmars and p.  vestka",
    ". a probabilistic learning approach to motion planning . in _",
    "algorithmic foundations of robotics _ , wellesley , ma , 1995 .",
    "a. k. peters .",
    "f.  p. preparata . the medial axis of a simple polygon . in _ proc .",
    "6th internat .",
    "sympos . math . found .",
    "_ , volume  53 of _ lecture notes in computer science _ , pages 443450 .",
    "springer - verlag , 1977 .",
    "j.  h. reif and m.  sharir .",
    "motion planning in the presence of moving obstacles . ,",
    "41(4):764790 , july 1994 .",
    "j.  t. schwartz and m.  sharir .",
    "algorithmic motion planning in robotics . in j.",
    "van leeuwen , editor , _ algorithms and complexity _ , volume  a of _ handbook of theoretical computer science _ , pages 391430 .",
    "elsevier , amsterdam , 1990 .",
    "w.  r.  s.  sutherland the offsets of a convex polygon .",
    ", 62:33 - 41 , 1989 .",
    "e.  w.  swokowski . .",
    "pws - kent , boston , 1991 .",
    "g.  wilfong .",
    "motion planning for an autonomous vehicle . in _ proc .",
    "ieee internat .",
    "conf . robot .",
    "_ , pages 529533 , 1988 .",
    "for completeness , the two technical results on average curvature used in this paper are presented in this appendix .",
    "their proofs rely on elementary calculus @xcite and differential geometry @xcite .",
    "[ l : appendix - curv ] let @xmath86 be a curve such that @xmath87 is a convex function in @xmath14 .",
    "let @xmath88 be a curve such that @xmath89 is a convex function in @xmath14 represented by a circular arc of radius @xmath22 .",
    "if @xmath90 and @xmath91 are in contact at the origin ( i.e. @xmath92 and @xmath93 ) and @xmath90 lies above @xmath91 ( i.e. @xmath94 , for @xmath95 ) , the average curvature of @xmath90 is greater than @xmath27 .",
    "let @xmath96 be a normal parametrization of @xmath90 such that @xmath97 .",
    "let @xmath98 be the angle made by the tangent to @xmath90 at the point @xmath99 with the @xmath21-axis .",
    "the functions @xmath100 , @xmath101 and @xmath102 are related as follows : @xmath103 and @xmath104 .",
    "since @xmath90 is convex and lies above the @xmath21-axis for @xmath105 , there is an interval @xmath106 $ ] on which @xmath98 is continuous and strictly increasing .",
    "the function @xmath107 is defined similarly and has the same properties .",
    "hence , there is an interval @xmath108 $ ] on which , either @xmath109 , or @xmath110 , or @xmath111 .",
    "suppose that @xmath109 . by definition , @xmath112 and @xmath113 .",
    "since @xmath100 is continuous , there is a value @xmath114 such that @xmath115 .",
    "furthermore , @xmath116 .",
    "thus , the point @xmath117 is below the point @xmath118 which is impossible .",
    "the case @xmath110 is even simpler .",
    "hence , @xmath111 .",
    "this implies that @xmath119 thus , the average curvature of @xmath90 is greater than @xmath27 .",
    "[ l : appendix - conv ] let @xmath90 be a closed smooth curve with average curvature @xmath24 .",
    "then , there exists a circle of radius @xmath47 which lies inside the convex region delimited by the jordan curve @xmath90 ."
  ],
  "abstract_text": [
    "<S> we consider the motion planning problem for a point constrained to move along a smooth closed convex path of bounded curvature . </S>",
    "<S> the workspace of the moving point is bounded by a convex polygon with @xmath0 vertices , containing an obstacle in a form of a simple polygon with @xmath1 vertices . </S>",
    "<S> we present an @xmath2 time algorithm finding the path , going around the obstacle , whose curvature is the smallest possible . </S>"
  ]
}