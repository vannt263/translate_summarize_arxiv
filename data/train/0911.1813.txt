{
  "article_text": [
    "managing a data set with sensitive but useful information , such as medical records , requires reconciling two objectives : providing utility to others , perhaps in the form of aggregate statistics ; and respecting the privacy of individuals who contribute to the data set .",
    "the field of _ private data analysis _ , and in particular work on _ differential privacy _ , provides a mathematical foundation for reasoning about this utility - privacy trade - off and offers methods for non - trivial data analysis that are provably privacy - preserving in a precise sense . for a recent survey of the field ,",
    "see dwork  @xcite .",
    "more precisely , consider a domain @xmath0 and database size @xmath1 .",
    "a _ mechanism _ is a randomized function from the set @xmath2 of databases to some range . for a parameter @xmath3 , a mechanism",
    "@xmath4 is _ @xmath5-differentially private _ if , for every database @xmath6 and fixed subset @xmath7 of the range of @xmath4 , changing a single component of @xmath6 changes the probability that @xmath4 outputs something in @xmath7 by at most an @xmath8 factor .",
    "the output of a differentially private mechanism ( and any analysis or privacy attack that follows ) is thus essentially independent of whether or not a given individual `` opts in '' or `` opts out '' of the database .",
    "achieving differential privacy requires `` sufficiently noisy '' answers  @xcite .",
    "for example , suppose we re interested in the result of a query @xmath9  a function from databases to some range  that simply counts the fraction of database elements that satisfy some predicate @xmath10 on @xmath0 . a special case of a result in dwork et al .",
    "@xcite asserts that the following mechanism is @xmath5-differentially private : if the underlying database is @xmath6 , output @xmath11 , where the output perturbation @xmath12 is drawn from the laplace distribution @xmath13 with density @xmath14 . among all @xmath5-differentially private mechanisms , this one ( or rather , a discretized analog of it ) maximizes user utility in a strong sense  @xcite .",
    "what if we care about more than a single one - dimensional statistic ?",
    "suppose we re interested in @xmath15 predicate queries @xmath16 , where @xmath15 could be large , even super - polynomial in @xmath1 .",
    "a natural solution is to use an independent laplace perturbation for each query answer  @xcite . to maintain @xmath5-differential privacy",
    ", the magnitude of noise has to scale linearly with @xmath15 , with each perturbation drawn from @xmath17 . put another way , suppose one fixes `` usefulness parameters '' @xmath18 , and insists that the mechanism is _",
    "@xmath19-useful _ , meaning that the outputs are within @xmath20 of the correct query answers with probability at least @xmath21 .",
    "this constrains the magnitude of the laplace noise , and the privacy parameter @xmath5 now suffers linearly with the number @xmath15 of answered queries .",
    "this dependence limits the use of this mechanism to a sublinear @xmath22 number of queries .",
    "can we do better than independent output perturbations ? for special classes of queries like predicate queries , blum , ligett , and roth  @xcite give an affirmative answer ( building on techniques of kasiviswanathan et al .",
    "specifically , in  @xcite the exponential mechanism of mcsherry and talwar  @xcite is used to show that , for fixed usefulness parameters @xmath18 , the privacy parameter @xmath5 only has to scale _ logarithmically _ with the number of queries .. ] this permits simultaneous non - trivial utility and privacy guarantees even for an exponential number of queries . moreover ,",
    "this dependence on @xmath23 is necessary in every differentially private mechanism ( see the full version of  @xcite ) .    the mechanism in  @xcite suffers from two drawbacks , however .",
    "first , it is _ non - interactive _ : it requires all queries @xmath16 to be given up front , and computes ( noisy ) outputs of all of them at once .",
    "by contrast , independent laplace output perturbations can obviously be implemented interactively , with the queries arriving online and each answered immediately .",
    "there is good intuition for why the non - interactive setting helps : outperforming independent output perturbations requires correlating perturbations across multiple queries , and this is clearly easier when the queries are known in advance .",
    "indeed , prior to the present work , no interactive mechanism better than independent laplace perturbations was known .",
    "second , the mechanism in  @xcite is _",
    "inefficient_. here by `` efficient '' we mean has running time polynomial in @xmath1 , @xmath15 , and @xmath24 ; dwork et al .",
    "@xcite prove that this is essentially the best one could hope for ( under certain cryptographic assumptions ) .",
    "the mechanism in  @xcite is not efficient because it requires sampling from a non - trivial probability distribution over an unstructured space of exponential size .",
    "dwork et al .",
    "@xcite recently gave an efficient ( non - interactive ) mechanism that is better than independent laplace perturbations , in that the privacy parameter @xmath5 of the mechanism scales as @xmath25 with the number of queries  @xmath15 ( for fixed usefulness parameters  @xmath18 ) .",
    "very recently , hardt and talwar @xcite gave upper and lower bounds for answering noninteractive linear queries which are tight in a related setting .",
    "these bounds are not tight in our setting , however , unless the number of queries is small with respect to the size of the database . when the number of queries is large , our mechanism actually yields error significantly less than required in general by their lower bound .",
    "`` counting queries '' with coordinate - wise error @xmath26 .",
    "this is less error than required by their _",
    "lower _ bound of roughly @xmath27 unless @xmath28 .",
    "we can take @xmath15 to be as large as @xmath29 , in which case our upper bound is a significant improvement  as are the upper bounds of @xcite and @xcite .",
    "] this is not a contradiction , because when translated into the setting of @xcite , our database size @xmath1 becomes a sparsity parameter that is not considered in their bounds .",
    "we define a new interactive differentially private mechanism for answering @xmath15 arbitrary predicate queries , called the _ median mechanism_.-differential privacy for a negligible function  @xmath30 ; see section  [ sec : prelim ] for definitions . ]",
    "the basic implementation of the median mechanism interactively answers queries @xmath16 that arrive online , is @xmath19-useful , and has privacy @xmath5 that scales with @xmath31 ; see theorem  [ thm : main1 ] for the exact statement .",
    "these privacy and utility guarantees hold even if an adversary can adaptively choose each @xmath32 after seeing the mechanism s first @xmath33 answers .",
    "_ this is the first interactive mechanism better than the laplace mechanism , and its performance is close to the best possible even in the non - interactive setting . _",
    "the basic implementation of the median mechanism is not efficient , and we give an efficient implementation with a somewhat weaker utility guarantee .",
    "( the privacy guarantee is as strong as in the basic implementation . )",
    "this alternative implementation runs in time polynomial in @xmath1 , @xmath15 , and @xmath24 , and satisfies the following ( theorem  [ thm : main2 ] ) : for every sequence @xmath16 of predicate queries , for all but a negligible fraction of input distributions , the efficient median mechanism is @xmath19-useful .",
    "_ this is the first efficient mechanism with a non - trivial utility guarantee and polylogarithmic privacy cost , even in the non - interactive setting . _      the key challenge to designing an interactive mechanism that outperforms the laplace mechanism lies in determining the appropriate correlations between different output perturbations on the fly , without knowledge of future queries .",
    "it is not obvious that anything significantly better than independent perturbations is possible in the interactive setting .",
    "our median mechanism and our analysis of it can be summarized , at a high level , by three facts .",
    "first , among any set of @xmath15 queries , we prove that there are @xmath34 `` hard '' queries , the answers to which completely determine the answers to all of the other queries ( up to @xmath35 ) .",
    "roughly , this holds because : ( i ) by a vc dimension argument , we can focus on databases over @xmath0 of size only @xmath36 ; and ( ii ) every time we answer a `` hard '' query , the number of databases consistent with the mechanism s answers shrinks by a constant factor , and this number can not drop below  1 ( because of the true input database ) .",
    "second , we design a method to privately release an indicator vector which distinguishes between hard and easy queries online .",
    "we note that a similar private ` indicator vector ' technique was used by dwork et al .",
    "@xcite . essentially , the median mechanism deems a query `` easy '' if a majority of the databases that are consistent ( up to @xmath35 ) with the previous answers of the mechanism would answer the current query accurately .",
    "the median mechanism answers the small number of hard queries using independent laplace perturbations .",
    "it answers an easy query ( accurately ) using the median query result given by databases that are consistent with previous answers .",
    "a key intuition is that if a user knows that query  @xmath37 is easy , _ then it can generate the mechanism s answer on its own_. thus answering an easy query communicates only a single new bit of information : that the query is easy .",
    "finally , we show how to release the classification of queries as `` easy '' and `` hard '' with low privacy cost ; intuitively , this is possible because ( independent of the database ) there can be only @xmath34 hard queries .",
    "our basic implementation of the median mechanism is not efficient for the same reasons as for the mechanism in  @xcite : it requires non - trivial sampling from a set of super - polynomial size . for our efficient implementation ,",
    "we pass to _ fractional _ databases , represented as fractional histograms with components indexed by @xmath0 . here",
    ", we use the random walk technology of dyer , frieze , and kannan  @xcite for convex bodies to perform efficient random sampling . to explain why our utility guarantee no longer holds for every input database ,",
    "recall the first fact used in the basic implementation : every answer to a hard query shrinks the number of consistent databases by a constant factor , and this number starts at @xmath38 and can not drop below  1 .",
    "with fractional databases ( where polytope volumes play the role of set sizes ) , the lower bound of  1 on the set of consistent ( fractional ) databases no longer holds . nonetheless , we prove a lower bound on the volume of this set for almost all fractional histograms ( equivalently probability distributions ) , which salvages the @xmath34 bound on hard queries for databases drawn from such distributions .",
    "we briefly formalize the setting of the previous section and record some important definitions .",
    "we consider some finite domain @xmath0 , and define a database @xmath6 to be an unordered set of elements from @xmath0 ( with multiplicities allowed ) .",
    "we write @xmath39 to denote the size of the database .",
    "we consider the set of boolean functions ( predicates ) @xmath40 .",
    "we abuse notation and define a predicate query @xmath41 $ ] as @xmath42 , the function that computes the fraction of elements of @xmath6 that satisfy predicate  @xmath9 .",
    "we say that an answer @xmath43 to a query @xmath32 is _ @xmath44-accurate _ with respect to database @xmath6 if @xmath45 . a mechanism",
    "@xmath46 is a function from databases and queries to distributions over outputs . in this paper , we consider mechanisms that answer predicate queries numerically , and so the range of our mechanisms is @xmath47.-accurate answers , one can efficiently reconstruct a synthetic database that is consistent ( up to @xmath35 ) with those answers , if desired  @xcite . ]",
    "[ def : useful ] a mechanism @xmath4 is _ @xmath48-useful _ if for every sequence of queries @xmath49 and every database @xmath6 , with probability at least @xmath21 it provides answers @xmath50 that are @xmath44-accurate for @xmath16 and @xmath6 .",
    "recall that differential privacy means that changing the identity of a single element of the input database does not affect the probability of any outcome by more than a small factor .",
    "formally , given a database  @xmath6 , we say that a database @xmath51 of the same size is a _ neighbor _ of @xmath6 if it differs in only a single element : @xmath52 .",
    "[ def : priv ] a mechanism @xmath4 satisfies _",
    "@xmath53-differential privacy _ if for every subset @xmath54 , every set of queries @xmath49 , and every pair of neighboring databases @xmath55 : @xmath56 \\leq e^{\\alpha } \\cdot \\pr[m(d ' ) \\in s ]   + \\tau.\\ ] ]    we are generally interested in the case where @xmath30 is a _ negligible function _ of some of the problem parameters , meaning one that goes to zero faster than @xmath57 for every constant @xmath58 .    finally , the _ sensitivity _ of a real - valued query is the largest difference between its values on neighboring databases .",
    "for example , the sensitivity of every non - trivial predicate query is precisely  @xmath59 .",
    "we now describe the median mechanism and our basic implementation of it .",
    "as described in the introduction , the mechanism is conceptually simple .",
    "it classifies queries as `` easy '' or `` hard '' , essentially according to whether or not a majority of the databases consistent with previous answers to hard queries would give an accurate answer to it ( in which case the user already `` knows the answer '' ) .",
    "easy queries are answered using the corresponding median value ; hard queries are answered as in the laplace mechanism .    to explain the mechanism precisely , we need to discuss a number of parameters .",
    "we take the privacy parameter @xmath5 , the accuracy parameter @xmath20 , and the number @xmath15 of queries as input ; these are hard constraints on the performance of our mechanism . as small constants , though our results remain meaningful for some sub - constant values of @xmath5 and @xmath20 as well .",
    "we always assume that @xmath5 is at least inverse polynomial in  @xmath15 .",
    "note that when @xmath5 or @xmath20 is sufficiently small ( at most @xmath60 for a small constant  @xmath58 , say ) , simultaneously meaningful privacy and utility is clearly impossible . ]",
    "our mechanism obeys these constraints with a value of @xmath61 that is inverse polynomial in  @xmath15 and  @xmath1 , and a value of @xmath30 that is negligible in @xmath15 and @xmath1 , provided @xmath1 is sufficiently large ( at least polylogarithmic in @xmath15 and @xmath24 , see theorem  [ thm : main1 ] ) .",
    "of course , such a result can be rephrased as a nearly exponential lower bound on the number of queries  @xmath15 that can be successfully answered as a function of the database size  @xmath1 .",
    "the median mechanism is shown in figure  [ fig : mm ] , and it makes use of several additional parameters . for our analysis , we set their values to : @xmath62 @xmath63 @xmath64 the denominator in   can be thought of as our `` privacy cost '' as a function of the number of queries  @xmath15 .",
    "needless to say , we made no effort to optimize the constants .",
    "the value  @xmath65 in step  2(a ) of the median mechanism is defined as @xmath66 for the laplace perturbations in steps  2(a ) and  2(d ) , recall that the distribution @xmath67 has the cumulative distribution function @xmath68    ' '' ''    1 .   initialize @xmath69 .",
    "2 .   for each query",
    "@xmath70 in turn : 1 .   define @xmath65 as in   and let @xmath71 .",
    "2 .   let @xmath72 , where @xmath73 is chosen with probability proportional to @xmath74 .",
    "3 .   if @xmath75 , set @xmath43 to be the median value of @xmath32 on @xmath76 .",
    "4 .   if @xmath77 , set @xmath43 to be @xmath78 .",
    "if @xmath77 , set @xmath79 to the databases @xmath7 of  @xmath76 with @xmath80 ; otherwise @xmath81 .",
    "if @xmath82 for more than @xmath83 values of  @xmath84 , then halt and report failure .    ' '' ''    the motivation behind the mechanism s steps is as follows .",
    "the set @xmath79 is the set of size-@xmath85 databases consistent ( up to @xmath86 ) with previous answers of the mechanism to hard queries .",
    "the focus on databases with the small size @xmath85 is justified by a vc dimension argument , see proposition  [ uniformconvergence ] .",
    "steps  2(a ) and  2(b ) choose a random value  @xmath87 and a random threshold  @xmath88 .",
    "the value @xmath65 in step  2(a ) is a measure of how easy the query is , with higher numbers being easier .",
    "a more obvious measure would be the fraction of databases @xmath7 in @xmath76 for which @xmath89 , but this is a highly sensitive statistic ( unlike @xmath65 , see lemma  [ sensitivitylemma ] ) .",
    "the mechanism uses the perturbed value @xmath87 rather than @xmath65 to privately communicate which queries are easy and which are hard . in step  2(b ) , we choose the threshold  @xmath88 at random between @xmath90 and @xmath91 .",
    "this randomly shifted threshold ensures that , for every database  @xmath6 , there is likely to be a significant gap between @xmath65 and  @xmath88 ; such gaps are useful when optimizing the privacy guarantee . steps  2(c ) and",
    "2(d ) answer easy and hard queries , respectively .",
    "step  2(e ) updates the set of databases consistent with previous answers to hard queries .",
    "we prove in lemma  [ fewdiscounts ] that step  2(f ) occurs with at most inverse polynomial probability .",
    "finally , we note that the median mechanism is defined as if the total number of queries @xmath15 is ( approximately ) known in advance . this assumption can be removed by using successively doubling `` guesses '' of @xmath15 ; this increases the privacy cost by an @xmath36 factor .",
    "this section proves the following privacy and utility guarantees for the basic implementation of the median mechanism .",
    "[ thm : main1 ] for every sequence of adaptively chosen predicate queries @xmath16 arriving online , the median mechanism is @xmath48-useful and @xmath53-differentially private , where @xmath30 is a negligible function of @xmath15 and @xmath24 , and @xmath61 is an inverse polynomial function of @xmath15 and @xmath1 , provided the database size  @xmath1 satisfies @xmath92    we prove the utility and privacy guarantees in sections  [ subsec : util ] and  [ subsec : priv ] , respectively .",
    "we can treat @xmath1 as a parameter and solve for the error @xmath20 . the maximum error on any query ( normalized by the database size ) is @xmath93 ;",
    "the unnormalized error is a factor of  @xmath1 larger . ]      here we prove a utility guarantee for the median mechanism .",
    "[ thm : useful ] the median mechanism is @xmath48-useful , where @xmath94 .",
    "note that under assumption  , @xmath61 is inverse polynomial in @xmath15 and @xmath1 .",
    "we give the proof of theorem  [ thm : useful ] in three pieces : with high probability , every hard query is answered accurately ( lemma  [ type2accurate ] ) ; every easy query is answered accurately ( lemmas  [ accurater ] and  [ type1accurate ] ) ; and the algorithm does not fail ( lemma  [ fewdiscounts ] ) . the next two lemmas follow from the definition of the laplace distribution  , our choice of  @xmath61 , and trivial union bounds .",
    "[ accurater ] with probability at least @xmath95 , @xmath96 for every query @xmath37 .",
    "[ type2accurate ] with probability at least @xmath95 , every answer to a hard query is @xmath97-accurate for @xmath6 .",
    "the next lemma shows that median answers are accurate for easy queries .",
    "[ type1accurate ] if @xmath96 for every query @xmath37 , then every answer to an easy query is @xmath44-accurate for  @xmath6 .    for a query @xmath37 ,",
    "let @xmath98 denote the databases of @xmath76 on which the result of query  @xmath32 is @xmath44-accurate for @xmath6 .",
    "observe that if @xmath99 , then the median value of  @xmath32 on  @xmath76 is an @xmath44-accurate answer for  @xmath6 . thus proving the lemma reduces to showing that @xmath100 only if @xmath99 .",
    "consider a query  @xmath37 with @xmath101 .",
    "using  , we have @xmath102 since @xmath96 for every query @xmath37 by assumption , the proof is complete .",
    "our final lemma shows that the median mechanism does not fail and hence answers every query , with high probability ; this will conclude our proof of theorem  [ thm : useful ] .",
    "we need the following preliminary proposition , which instantiates the standard uniform convergence bound with the fact that the vc dimension of every set of @xmath15 predicate queries is at most @xmath103 @xcite .",
    "recall the definition of the parameter  @xmath85 from  .",
    "[ uniformconvergence ] for every collection of @xmath15 predicate queries @xmath16 and every database @xmath6 , a database @xmath7 obtained by sampling points from @xmath6 uniformly at random will satisfy @xmath104 for all @xmath37 except with probability @xmath61 , provided @xmath105    in particular , there exists a database @xmath7 of size @xmath85 such that for all @xmath106 , @xmath107 .",
    "in other words , the results of @xmath15 predicate queries on an arbitrarily large database can be well approximated by those on a database with size only @xmath36 .",
    "[ fewdiscounts ] if @xmath96 for every query @xmath37 and every answer to a hard query is @xmath97-accurate for @xmath6 , then the median mechanism answers fewer than @xmath108 hard queries ( and hence answers all queries before terminating ) .",
    "the plan is to track the contraction of @xmath79 as hard queries are answered by the median mechanism .",
    "initially we have @xmath109 .",
    "if the median mechanism answers a hard query  @xmath37 , then the definition of the mechanism and our hypotheses yield @xmath110 we then claim that the size of the set @xmath111 is at most @xmath112 . for if not ,",
    "@xmath113 which is a contradiction .",
    "iterating now shows that the number of consistent databases decreases exponentially with the number of hard queries : latexmath:[\\[\\label{eq : drop }    of the @xmath15 queries are hard .",
    "on the other hand , proposition [ uniformconvergence ] guarantees the existence of a database @xmath115 for which @xmath116 for every query  @xmath32 . since all answers  @xmath43 produced by the median mechanism for hard queries  @xmath37",
    "are @xmath117-accurate for  @xmath6 by assumption , @xmath118 .",
    "this shows that @xmath119 and hence @xmath120 .",
    "combining this with   gives @xmath121 as desired .",
    "this section establishes the following privacy guarantee for the median mechanism .",
    "[ thm : priv ] the median mechanism is @xmath53- differentially private , where @xmath30 is a negligible function of @xmath24 and @xmath15 when @xmath1 is sufficiently large ( as in  ) .",
    "we can treat the median mechanism as if it has two outputs : a vector of answers @xmath122 , and a vector @xmath123 such that @xmath124 if @xmath37 is an easy query and @xmath125 if @xmath37 is a hard query .",
    "a key observation in the privacy analysis is that answers to easy queries are a function only of the previous output of the mechanism , and incur no additional privacy cost beyond the release of the bit @xmath126 .",
    "moreover , the median mechanism is guaranteed to produce no more than @xmath127 answers to hard queries .",
    "intuitively , what we need to show is that the vector @xmath128 can be released after an unusually small perturbation .",
    "our first lemma states that the small sensitivity of predicate queries carries over , with a @xmath129 factor loss , to the @xmath130-function defined in  .",
    "[ sensitivitylemma ] the function @xmath131 has sensitivity @xmath132 for every fixed set @xmath133 of databases and predicate query  @xmath9 .",
    "let @xmath6 and @xmath51 be neighboring databases .",
    "then @xmath134 where the first inequality follows from the fact that the ( predicate ) query @xmath9 has sensitivity @xmath59 , the second from the fact that @xmath135 when @xmath136 $ ] , and the third from the fact that @xmath137 .",
    "the next lemma identifies nice properties of `` typical executions '' of the median mechanism .",
    "consider an output @xmath138 of the median mechanism with a database  @xmath6 . from @xmath6 and @xmath138",
    ", we can uniquely recover the values @xmath139 computed ( via  ) in step  2(a ) of the median mechanism , with @xmath65 depending only on the first @xmath33 components of @xmath140 and @xmath141 .",
    "we sometimes write such a value as @xmath142 , or as @xmath143 if an output @xmath138 has been fixed . call a possible threshold @xmath88 _ good _ for @xmath6 and @xmath138 if @xmath124 and @xmath144 , where @xmath145 is defined as in  . call a vector @xmath146 of possible thresholds _ good _ for @xmath6 and @xmath138 if all but @xmath147 of the thresholds are good for @xmath6 and @xmath138 .",
    "[ notmanybadlemma ] for every database @xmath6 , with all but negligible ( @xmath148 ) probability , the thresholds @xmath146 generated by the median mechanism are good for its output @xmath138 .",
    "the idea is to `` charge '' the probability of bad thresholds to that of answering hard queries , which are strictly limited by the median mechanism .",
    "since the median mechanism only allows @xmath149 of the @xmath126 s to be  1 , we only need to bound the number of queries  @xmath37 with output @xmath124 and threshold @xmath88 satisfying @xmath150 , where @xmath65 is the value computed by the median mechanism in step  2(a ) when it answers the query  @xmath37 .",
    "let  @xmath151 be the indicator random variable corresponding to the ( larger ) event that @xmath150 .",
    "define @xmath152 to be  1 if and only if , when answering the @xmath37th query , the median mechanism chooses a threshold @xmath88 and a laplace perturbation @xmath153 such that @xmath154 ( i.e. , the query is classified as hard ) . if the median mechanism fails before reaching query  @xmath37 , then we define @xmath155 .",
    "set @xmath156 and @xmath157 .",
    "we can finish the proof by showing that @xmath158 is at most @xmath159 except with negligible probability .",
    "consider a query  @xmath37 and condition on the event that @xmath160 ; this event depends only on the results of previous queries . in this case , @xmath161 only if @xmath162 . but",
    "this occurs with probability @xmath163 , which using   and   is at most  @xmath164 .",
    "s in step  2(b ) , which is @xmath165 . ]",
    "therefore , the expected contribution to  @xmath158 coming from queries  @xmath37 with @xmath160 is at most @xmath166 .",
    "since  @xmath88 is selected independently at random for each @xmath37 , the chernoff bound implies that the probability that such queries contribute more than @xmath167 to @xmath158 is @xmath168    now condition on the event that @xmath169 .",
    "let @xmath170 denote the threshold choices that would cause @xmath151 to be  1 , and let @xmath171 be the smallest such ; since @xmath169 , @xmath172 . for every @xmath173 , @xmath174 ; hence , for every @xmath175 , @xmath176 .",
    "also , our distribution on the @xmath177 s in step  2(b ) ensures that @xmath178 \\ge \\tfrac{1}{2 } \\pr[t_i \\in t_i]$ ] . since the laplace distribution is symmetric around zero and the random choices @xmath179 are independent , we have @xmath180 & = & \\pr[t_i > r_i +",
    "\\delta_i]\\\\ \\nonumber & \\ge & \\pr[t_i > r_i ] \\cdot \\pr[\\delta_i \\le 0]\\\\ \\nonumber & \\ge & \\tfrac{1}{4 } \\pr[t_i > r_i - \\gamma]\\\\ \\label{eq : charge } & = & \\tfrac{1}{4 } { \\mathrm{e}}[y_i].\\end{aligned}\\ ] ] the definition of the median mechanism ensures that @xmath181 with probability  1 .",
    "linearity of expectation , inequality  , and the chernoff bound imply that queries with  @xmath169 contribute at most @xmath182 to  @xmath158 with probability at least @xmath183 .",
    "theoremthm : priv recall definition  [ def : priv ] and fix a database  @xmath6 , queries @xmath16 , and a subset @xmath7 of possible mechanism outputs . for simplicity , we assume that all perturbations are drawn from a discretized laplace distribution , so that the median mechanism has a countable range ; the continuous case can be treated using similar arguments .",
    "then , we can think of  @xmath7 as a countable set of output vector pairs @xmath138 with @xmath184 and @xmath185 .",
    "we write @xmath186 for the event that the median mechanism classifies the queries @xmath187 according to  @xmath128 and outputs the numerical answers @xmath188 .",
    "if the mechanism computes thresholds @xmath146 while doing so , we write @xmath189 .",
    "let @xmath190 denote the vectors that would be good thresholds for @xmath138 and  @xmath6 .",
    "( recall that @xmath6 and @xmath138 uniquely define the corresponding @xmath142 s . )",
    "we have @xmath191 = \\sum_{\\out \\in s } \\pr[mm(d,\\vec{f } ) = \\out]\\ ] ] @xmath192\\ ] ] @xmath193\\ ] ] with some @xmath146 good for @xmath194 , and where @xmath30 is the negligible function of lemma  [ notmanybadlemma ] .",
    "we complete the proof by showing that , for every neighboring database  @xmath51 , possible output @xmath138 , and thresholds @xmath195 good for @xmath138 and @xmath6 , @xmath196 \\le e^{\\alpha } \\cdot \\pr[mm(d',\\vec{f } ) = ( \\vec{t},\\vec{d},a)].\\ ] ]    fix a neighboring database  @xmath51 , a target output @xmath138 , and thresholds  @xmath195 good for @xmath138 and @xmath6 .",
    "the probability that the median mechanism chooses the target thresholds  @xmath195 is independent of the underlying database , and so is the same on both sides of  . for the rest of the proof , we condition on the event that the median mechanism uses the thresholds @xmath195 ( both with database @xmath6 and database @xmath51 ) .",
    "let @xmath197 denote the event that  @xmath198 classifies the first @xmath37 queries in agreement with the target output ( i.e. , query @xmath199 is deemed easy if and only if @xmath200 ) and that its first @xmath37 answers are @xmath201 .",
    "let @xmath202 denote the analogous event for @xmath203 .",
    "observe that @xmath204 are the relevant events on the left- and right - hand sides of  , respectively ( after conditioning on  @xmath195 ) .",
    "if @xmath138 is such that the median mechanism would fail after the @xmath205th query , then the following proof should be applied to @xmath206 instead of @xmath204 .",
    "we next give a crude upper bound on the ratio @xmath207/\\pr[{\\mathcal{e}}'_i | { \\mathcal{e}}'_{i-1 } ] $ ] that holds for every query ( see  , below ) , followed by a much better upper bound for queries with good thresholds .",
    "imagine running the median mechanism in parallel on @xmath55 and condition on the events @xmath208 .",
    "the set @xmath76 is then the same in both runs of the mechanism , and @xmath209 are now fixed .",
    "let @xmath210 ( @xmath211 ) be 0 if @xmath198 ( @xmath203 ) classifies query  @xmath37 as easy and  1 otherwise .",
    "since @xmath212 $ ] ( lemma  [ sensitivitylemma ] ) and a perturbation with distribution @xmath213 is added to these values before comparing to the threshold  @xmath88 ( step  2(a ) ) , @xmath214 \\le e^{\\alpha ' } \\pr [ b'_i = 0 \\,|\\ , { \\mathcal{e}}'_{i-1 } ] \\ ] ] and similarly for the events where @xmath215 .",
    "suppose that the target classification is @xmath216 ( a hard query ) , and let @xmath171 and @xmath217 denote the random variables @xmath218 and @xmath219 , respectively .",
    "independence of the laplace perturbations in steps  2(a ) and  2(d ) implies that @xmath220 = \\pr [ b_i = 1 \\,|\\ , { \\mathcal{e}}_{i-1 } ] \\cdot \\pr [ s_i = a_i \\,|\\ , { \\mathcal{e}}_{i-1}]\\ ] ] and @xmath221 = \\pr [ b'_i = 1 \\,|\\ , { \\mathcal{e}}'_{i-1 } ] \\cdot \\pr [ s'_i = a_i \\,|\\ , { \\mathcal{e}}'_{i-1}].\\ ] ] since the predicate query @xmath32 has sensitivity @xmath59 , we have @xmath222 \\le e^{2\\alpha ' } \\cdot \\pr[{\\mathcal{e}}'_i \\,|\\ , { \\mathcal{e}}'_{i-1}]\\ ] ] when @xmath216 .",
    "now suppose that @xmath223 , and let @xmath224 denote the median value of @xmath32 on @xmath76 .",
    "then @xmath225 $ ] is either  0 ( if @xmath226 ) or @xmath227 $ ] ( if @xmath228 ) ; similarly , @xmath229 $ ] is either  0 or @xmath230 $ ] . thus the bound in   continues to hold ( even with @xmath231 replaced by @xmath232 ) when @xmath223 .    since @xmath233 is not much smaller than the privacy target  @xmath5 ( recall  )",
    ", we can not afford to suffer the upper bound in   for many queries .",
    "fortunately , for queries  @xmath37 with good thresholds we can do much better .",
    "consider a query  @xmath37 such that @xmath88 is good for @xmath138 and @xmath6 and condition again on @xmath208 , which fixes @xmath76 and hence @xmath143 .",
    "goodness implies that @xmath223 , so the arguments from the previous paragraph also apply here .",
    "we can therefore assume that the median value @xmath224 of @xmath32 on @xmath76 equals @xmath43 and focus on bounding @xmath227 $ ] in terms of @xmath230 $ ] .",
    "goodness also implies that @xmath234 and hence @xmath235 ( by lemma  [ sensitivitylemma ] ) .",
    "recalling from   the definition of  @xmath145 , we have @xmath236 & \\ge & \\pr[r_i - \\hat{r}_i < \\tfrac{\\gamma}{2}]\\\\ \\nonumber & = & 1 - \\tfrac{1}{2}e^{-\\gamma \\alpha ' { \\epsilon}n/4}\\\\ \\label{eq : sharp } & = & 1 - \\frac{\\alpha}{4k}\\end{aligned}\\ ] ] and of course , @xmath227 \\le 1 $ ] .    applying   to the bad queries",
    " at most latexmath:[$180 m \\ln    @xmath6  and   to the rest , we can derive @xmath238 & = & \\prod_{i=1}^k \\pr[{\\mathcal{e}}_i \\,:\\ , { \\mathcal{e}}_{i-1 } ] \\\\ & \\le & \\underbrace{e^{360\\alpha ' m \\ln |x|}}_{\\le e^{\\alpha/2 } \\text { by~\\eqref{eq : alpha ' } } } \\cdot \\underbrace{(1 - \\frac{\\alpha}{4k})^{-k}}_{\\le ( 1+\\tfrac{\\alpha}{2k})^k \\le e^{\\alpha/2 } } \\cdot \\prod_{i=1}^k \\pr[{\\mathcal{e}}'_i \\,:\\ , { \\mathcal{e}}'_{i-1 } ] \\\\ & \\le & e^{\\alpha } \\cdot \\pr[{\\mathcal{e}}'_k],\\end{aligned}\\ ] ] which completes the proof of both the inequality   and the theorem .",
    "the basic implementation of the median mechanism runs in time @xmath239 .",
    "this section provides an efficient implementation , running in time polynomial in @xmath1 , @xmath15 , and @xmath24 , although with a weaker usefulness guarantee .",
    "[ thm : main2 ] assume that the database size  @xmath1 satisfies  .",
    "for every sequence of adaptively chosen predicate queries @xmath16 arriving online , the efficient implementation of the median mechanism is @xmath53-differentially private for a negligible function  @xmath30 .",
    "moreover , for every fixed set @xmath16 of queries , it is @xmath48-useful for all but a negligible fraction of _ fractional _ databases ( equivalently , probability distributions ) .    specifically , our mechanism answers exponentially many queries for all but an @xmath240 fraction of probability distributions over @xmath0 drawn from the unit @xmath241 ball , and from databases drawn from such distributions .",
    "thus our efficient implementation always guarantees privacy , but for a given set of queries @xmath16 , there might be a negligibly small fraction of fractional histograms for which our mechanism is not useful for all @xmath15 queries .",
    "we note however that even for the small fraction of fractional histograms for which the efficient median mechanism may not satisfy our usefulness guarantee , it does not output incorrect answers : it merely halts after having answered a sufficiently large number of queries using the laplace mechanism .",
    "therefore , even for this small fraction of databases , the efficient median mechanism is an improvement over the laplace mechanism : in the worst case , it simply answers every query using the laplace mechanism before halting , and in the best case , it is able to answer many more queries",
    ".    we give a high - level overview of the proof of theorem  [ thm : main2 ] which we then make formal .",
    "first , why is nt the median mechanism a computationally efficient mechanism ? because  @xmath242 has super - polynomial size  @xmath243 , and computing  @xmath65 in step  2(a ) , the median value in step  2(c ) , and the set  @xmath79 in step  2(e ) could require time proportional to @xmath244 .",
    "an obvious idea is to randomly sample elements of @xmath76 to approximately compute @xmath65 and the median value of @xmath32 on @xmath76 ; while it is easy to control the resulting sampling error and preserve the utility and privacy guarantees of section  [ sec : analysis ] , it is not clear how to sample from @xmath76 efficiently .",
    "we show how to implement the median mechanism in polynomial time by redefining the sets @xmath79 to be sets of probability distributions over points in @xmath0 that are consistent ( up to @xmath245 ) with the hard queries answered up to the @xmath37th query .",
    "each set @xmath79 will be a convex polytope in @xmath246 defined by the intersection of at most @xmath127 halfspaces , and hence it will be possible to sample points from @xmath79 approximately uniformly at random in time poly@xmath247 via the grid walk of dyer , frieze , and kannan @xcite .",
    "lemmas [ accurater ] , [ type2accurate ] , and [ type1accurate ] still hold ( trivially modified to accommodate sampling error )",
    ". we have to reprove lemma  [ fewdiscounts ] , in a somewhat weaker form : that for all but a diminishing fraction of input databases @xmath6 , the median mechanism does not abort except with probability @xmath248 .",
    "as for our privacy analysis of the median mechanism , it is independent of the representation of the sets @xmath79 and the mechanisms failure probability , and so it need not be repeated  the efficient implementation is provably private for _ all _ input databases and query sequences .",
    "we now give a formal analysis of the efficient implementation .",
    "we redefine the sets @xmath79 to represent databases that can contain points fractionally , as opposed to the finite set of small discrete databases .",
    "equivalently , we can view the sets @xmath79 as containing probability distributions over the set of points @xmath0 .",
    "we initialize @xmath242 to be the @xmath241 ball of radius @xmath85 in @xmath246 , @xmath249 , intersected with the non - negative orthant : @xmath250 each dimension @xmath37 in @xmath246 corresponds to an element @xmath251 .",
    "elements @xmath252 can be viewed as fractional histograms .",
    "note that integral points in @xmath242 correspond exactly to databases of size at most @xmath85 .",
    "we generalize our query functions @xmath32 to fractional histograms in the natural way : @xmath253    the update operation after a hard query @xmath37 is answered is the same as in the basic implementation : @xmath254 note that each updating operation after a hard query merely intersects @xmath76 with the pair of halfspaces : @xmath255 and",
    "so @xmath256 is a convex polytope for each @xmath37 .",
    "dyer , kannan , and frieze  @xcite show how to @xmath61-approximate a random sample from a convex body @xmath257 in time polynomial in @xmath24 and the running time of a membership oracle for @xmath258 , where @xmath61 can be taken to be exponentially small ( which is more than sufficient for our purposes ) .",
    "their algorithm has two requirements :    1 .",
    "there must be an efficient membership oracle which can in polynomial time determine whether a point @xmath259 lies in @xmath258 .",
    "2 .   @xmath258 must be ` well rounded ' : @xmath260 ball in @xmath246 .",
    "since @xmath79 is given as the intersection of a set of explicit halfspaces , we have a simple membership oracle to determine whether a given point @xmath261 : we simply check that @xmath262 lies on the appropriate side of each of the halfspaces .",
    "this takes time poly@xmath247 , since the number of halfspaces defining @xmath79 is linear in the number of answers to hard queries given before time @xmath37 , which is never more than @xmath149 .",
    "moreover , for each @xmath37 we have @xmath263 finally , we can safely assume that @xmath264 by simply considering the convex set @xmath265 instead .",
    "this will not affect our results .",
    "therefore , we can implement the median mechanism in time poly@xmath266 by using sets @xmath79 as defined in this section , and sampling from them using the grid walk of @xcite .",
    "estimation error in computing @xmath65 and the median value of @xmath32 on @xmath76 by random sampling rather than brute force is easily controlled via the chernoff bound and can be incorporated into the proofs of lemmas  [ accurater ] and  [ type1accurate ] in the obvious way .",
    "it remains to prove a continuous version of lemma [ fewdiscounts ] to show that the efficient implementation of the median mechanism is @xmath48-useful on all but a negligibly small fraction of fractional histograms @xmath267 .",
    "we now prove an analogue of lemma  [ fewdiscounts ] to establish a usefulness guarantee for the efficient version of the median mechanism .    with respect to any set of @xmath15 queries @xmath16 and for",
    "any @xmath268 , define latexmath:[\\[\\textrm{good}_{\\epsilon}(\\vec{f}^ * ) = \\{\\vec{f } \\in c_0 : \\max_{i\\in \\{1,2,\\ldots , k\\ } }    that agree up to an additive @xmath44 factor with @xmath270 on every query @xmath32 .",
    "since databases @xmath271 can be identified with their corresponding histogram vectors @xmath272 , we can also write @xmath273 when the meaning is clear from context .    for any @xmath270",
    ", @xmath274 is a convex polytope contained inside @xmath242 .",
    "we will prove that the efficient version of the median mechanism is @xmath19-useful for a database @xmath6 if @xmath275 we first prove that   holds for almost every fractional histogram .",
    "for this , we need a preliminary lemma .",
    "[ spacepartitionlemma ] let @xmath276 denote the set of integer points inside @xmath242 . then with respect to an arbitrary set of @xmath15 queries , @xmath277    every rational valued point @xmath278 corresponds to some ( large ) database @xmath271 by scaling @xmath262 to an integer - valued histogram .",
    "irrational points can be arbitrarily approximated by such a finite database . by proposition  [ uniformconvergence ] , for every set of @xmath15 predicates @xmath16",
    ", there is a database @xmath279 with @xmath280 such that for each @xmath37 , @xmath281 . recalling that the histograms corresponding to databases of size at most @xmath85 are exactly the integer points in @xmath242 , the proof is complete .",
    "[ goodvolumelemma ] all but an @xmath282 fraction of _ fractional _ histograms @xmath267 satisfy @xmath283    let @xmath284 consider a randomly selected fractional histogram @xmath285 .",
    "for any @xmath286 we have : @xmath287 = \\frac{{\\mathrm{vol}}(\\textrm{good}_{\\epsilon/400}(f))}{{\\mathrm{vol}}(c_0 ) } < \\frac{1}{|x|^{2m}}\\ ] ] since @xmath288 , by a union bound we can conclude that except with probability @xmath289 , @xmath290 for any @xmath291 .",
    "however , by lemma  [ spacepartitionlemma ] , @xmath292 for some @xmath293 . therefore , except with probability @xmath294 , @xmath295 .",
    "thus , since @xmath296 , except with negligible probability , we have : @xmath297    we are now ready to prove the analogue of lemma  [ fewdiscounts ] for the efficient implementation of the median mechanism .    [ fewdiscountsefficient ] for every set of @xmath15 queries @xmath16 , for all but an @xmath240 fraction of fractional histograms @xmath267 , the efficient implementation of the median mechanism guarantees that : the mechanism answers fewer than @xmath298 hard queries , except with probability @xmath248 ,    we assume that all answers to hard queries are @xmath299 accurate , and that @xmath300 for every  @xmath37 . by lemmas  [ accurater ] and  [ type2accurate ] ",
    "the former adapted to accommodate approximating @xmath65 via random sampling  we are in this case except with probability @xmath248 .",
    "we analyze how the volume of @xmath79 contracts with the number of hard queries answered .",
    "suppose the mechanism answers a hard query at time @xmath37 . then : @xmath301 recall @xmath302 .",
    "suppose that @xmath303 . then @xmath304@xmath305 a contradiction .",
    "therefore , we have @xmath306 if @xmath307 of the @xmath15 queries are hard .",
    "since all answers to hard queries are @xmath299 accurate , it must be that @xmath308 .",
    "therefore , for an input database  @xmath6 that satisfies    and this is all but an @xmath240 fraction of them , by lemma  [ goodvolumelemma ]  we have @xmath309 combining inequalities   and   yields @xmath310 as claimed",
    ".    lemmas  [ type2accurate ] , [ type1accurate ] , and  [ fewdiscountsefficient ] give the following utility guarantee .",
    "[ efficienttheorem ] for every set @xmath16 of queries , for all but a negligible fraction of fractional histograms @xmath267 , the efficient implementation of the median mechanism is @xmath48-useful with @xmath94 .",
    "fractional histograms correspond to probability distributions over @xmath0 .",
    "lemma [ goodvolumelemma ] shows that most probability distributions are ` good ' for the efficient implementation of the median mechanism ; in fact , more is true .",
    "we next show that finite databases _ sampled _ from randomly selected probability distributions also have good volume properties .",
    "together , these lemmas show that the efficient implementation of the median mechanism will be able to answer nearly exponentially many queries with high probability , in the setting in which the private database @xmath6 is drawn from some ` typical ' population distribution . *",
    "databasesample*(@xmath311 ) :    1 .",
    "select a fractional point @xmath312 uniformly at random .",
    "2 .   sample and return a database @xmath6 of size @xmath311 by drawing each @xmath313 independently at random from the probability distribution over @xmath0 induced by @xmath267 ( i.e. sample @xmath251 with probability proportional to @xmath314 ) .",
    "[ databasesample ] for @xmath311 as in ( as required for the median mechanism ) , a database sampled by * databasesample*(@xmath311 ) satisfies except with probability at most @xmath240 .    by lemma [ goodvolumelemma ] , except with probability @xmath282 , the fractional histogram @xmath267 selected in step @xmath166 satisfies @xmath283 by lemma [ uniformconvergence ] , when we sample a database @xmath6 of size @xmath315 from the probability distribution induced by @xmath267 , except with probability @xmath316 , @xmath317 , which gives us condition .",
    "we would like an analogue of lemma [ goodvolumelemma ] that holds for all but a diminishing fraction of _ finite _ databases ( which correspond to lattice points within @xmath242 ) rather than fractional points in @xmath242 , but it is not clear how uniformly randomly sampled lattice points distribute themselves with respect to the volume of @xmath242 . if @xmath318 , then the lattice will be fine enough to approximate the volume of @xmath242 , and lemma [ goodvolumelemma ] will continue to hold . we now show that _ small _ uniformly sampled databases will also be good for the efficient version of the median mechanism . here ,",
    "small means @xmath319 , which allows for databases which are still polynomial in the size of @xmath0 .",
    "a tighter analysis is possible , but we opt instead to give a simple argument",
    ".    [ goodvolumeuniform ] for every @xmath1 such that @xmath1 satisfies and @xmath319 , all but an @xmath320 fraction of databases @xmath6 of size @xmath321 satisfy condition .",
    "we proceed by showing that our * databasesample * procedure , which we know via lemma [ databasesample ] generates databases that satisfy with high probability , is close to uniform .",
    "note that * databasesample * first selects a _ probability distribution _ @xmath267 uniformly at random from the positive quadrant of the @xmath241 ball , and then samples @xmath6 from @xmath267 .",
    "for any particular database @xmath322 with @xmath323 we write @xmath324 $ ] to denote the probability of generating @xmath322 when we sample a database uniformly at random , and we write @xmath325 $ ] to denote the probability of generating @xmath322 when we sample a database according to * databasesample*. let @xmath326 denote the event that @xmath322 contains no duplicate elements .",
    "we begin by noting by symmetry that : @xmath327 = \\pr_n[d = d^*| r]$ ] we first argue that @xmath328 $ ] and @xmath329 $ ] are both large .",
    "we immediately have that the expected number of repetitions in database @xmath6 when drawn from the uniform distribution is @xmath330 , and so @xmath331 \\leq \\frac{n^2}{|x|}$ ] .",
    "we now consider @xmath329 $ ] .",
    "since @xmath267 is a uniformly random point in the positive quadrant of the @xmath241 ball , each coordinate @xmath314 has the marginal of a beta distribution : @xmath332 .",
    "( see , for example , @xcite chapter 5 ) .",
    "therefore , @xmath333 = \\frac{2}{|x|(|x|+1)}$ ] and so the expected number of repetitions in database @xmath6 when drawn from * databasesample * is @xmath334=\\frac{2{n\\choose 2}}{|x|+1}\\leq \\frac{2n^2}{|x|}$ ] .",
    "therefore , @xmath335",
    "\\leq \\frac{2n^2}{|x|}$ ] .",
    "finally , let @xmath336 be the event that database @xmath6 fails to satisfy .",
    "we have : @xmath337 & = & \\pr_u[b | r]\\cdot\\pr_u[r ] + \\pr_u[b|\\neg r]\\cdot\\pr_u[\\neg r ] \\\\ & = & \\pr_n[b | r]\\cdot\\pr_u[r ] + \\pr_u[b|\\neg r]\\cdot\\pr_u[\\neg r ] \\\\ & \\leq & \\pr_n[b | r]\\cdot\\pr_u[r ] + \\pr_u[\\neg r ] \\\\ & \\leq & \\pr_n[b]\\cdot \\frac{\\pr_u[r]}{\\pr_n[r ] } + \\pr_u[\\neg r ] \\\\ & \\leq & \\frac{\\pr_n[b]}{1-\\frac{2n^2}{|x| } } + \\frac{n^2}{|x| } \\\\ & = & o(\\frac{n^2}{|x|})\\end{aligned}\\ ] ] where the last equality follows from lemma [ databasesample ] , which states that @xmath338 $ ] is negligibly small .",
    "we observe that we can substitute either of the above lemmas for lemma [ goodvolumelemma ] in the proof of lemma [ fewdiscountsefficient ] to obtain versions of thoerem [ efficienttheorem ] :    for every set @xmath16 of queries , for all but a negligible fraction of databases sampled by * databasesample * , the efficient implementation of the median mechanism is @xmath48-useful with @xmath94 .    for every set @xmath16 of queries , for all but an @xmath339 fraction of uniformly randomly sampled databases of size @xmath1 ,",
    "the efficient implementation of the median mechanism is @xmath48-useful with @xmath94 .",
    "we have shown that in the setting of predicate queries , interactivity does not pose an information theoretic barrier to differentially private data release . in particular , our dependence on the number of queries @xmath15 nearly matches the optimal dependence of @xmath23 achieved in the _ offline _ setting by @xcite .",
    "we remark that our dependence on other parameters is not necessarily optimal : in particular , @xcite achieves a better ( and optimal ) dependence on @xmath44 .",
    "we have also shown how to implement our mechanism in time poly@xmath266 , although at the cost of sacrificing worst - case utility guarantees .",
    "the question of an interactive mechanism with poly@xmath266 runtime and worst - case utility guarantees remains an interesting open question .",
    "more generally , although the lower bounds of @xcite seem to preclude mechanisms with run - time poly@xmath340 from answering a superlinear number of generic predicate queries , the question of achieving this runtime for specific query classes of interest ( offline or online ) remains largely open .",
    "recently a representation - dependent impossibility result for the class of conjunctions was obtained by ullman and vadhan @xcite : either extending this to a representation - independent impossibility result , or circumventing it by giving an efficient mechanism with a novel output representation would be very interesting .",
    "the first author wishes to thank a number of people for useful discussions , including avrim blum , moritz hardt , katrina ligett , frank mcsherry , and adam smith .",
    "he would particularly like to thank moritz hardt for suggesting trying to prove usefulness guarantees for a continuous version of the blr mechanism , and avrim blum for suggesting the distribution from which we select the threshold in the median mechanism ."
  ],
  "abstract_text": [
    "<S> we define a new interactive differentially private mechanism  the _ median mechanism _  for answering arbitrary predicate queries that arrive online . given fixed accuracy and privacy constraints </S>",
    "<S> , this mechanism can answer exponentially more queries than the previously best known interactive privacy mechanism ( the laplace mechanism , which independently perturbs each query result ) . </S>",
    "<S> with respect to the number of queries , our guarantee is close to the best possible , even for non - interactive privacy mechanisms . </S>",
    "<S> conceptually , the median mechanism is the first privacy mechanism capable of identifying and exploiting correlations among queries in an interactive setting .    </S>",
    "<S> we also give an efficient implementation of the median mechanism , with running time polynomial in the number of queries , the database size , and the domain size . </S>",
    "<S> this efficient implementation guarantees privacy for all input databases , and accurate query results for almost all input distributions . </S>",
    "<S> the dependence of the privacy on the number of queries in this mechanism improves over that of the best previously known efficient mechanism by a super - polynomial factor , even in the non - interactive setting .    </S>",
    "<S> = 10000 = 10000 </S>"
  ]
}