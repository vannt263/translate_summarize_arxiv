{
  "article_text": [
    "_ property testing _ studies relaxed decision problems in which one wants to distinguish objects that have a given property from those that are far from this property ( see , e.g. , @xcite ) .",
    "informally , an object @xmath8 is @xmath2-far from a property @xmath9 if one has to modify at least an @xmath2-fraction of @xmath8 s representation to obtain an object with property @xmath9 , where @xmath2 is typically a small constant . given oracle access to the input object , a typical property tester achieves this goal by inspecting only a small fraction of the input .",
    "property testing is motivated by the need to understand how to extract information efficiently from massive structured or semi - structured data sets using small random samples .",
    "one of the main and most successful directions in property testing is _ testing graph properties _ , as introduced in papers of goldreich et al .",
    "there are two popular models for this task , which make different assumptions about how the input graph is represented and how it can be accessed .    for a long time",
    ", the main research focus has been on the _ adjacency matrix model _ , designed typically for _ dense _ graphs @xcite . in this model , after a sequence of papers , it was shown that testability of a property in constant time is closely related to szemerdi partitions of the graph .",
    "more precisely , a property is testable in constant time . ] if and only if it can be reduced to testing finitely many szemerdi partitions @xcite .",
    "the _ adjacency list model _ has been designed mostly for _ sparse _ graphs . in the most standard scenario ,",
    "the model is studied with an additional restriction that the degree of the graph is at most a certain predefined constant @xmath10 @xcite . unlike in the adjacency matrix model",
    ", it is not yet completely understood what graph properties are testable in constant time in the adjacency list model .",
    "known examples include all hyperfinite properties @xcite ( see also @xcite and @xcite for previous general results ) , connectivity , @xmath11-edge - connectivity , the property of being eulerian @xcite , and the property of having a perfect matching @xcite . on the other hand , some properties testable in constant time in the dense graph model , such as bipartiteness and 3-colorability ,",
    "are known to require a superconstant number of queries @xcite .",
    "even less is known about efficiently testable properties for sparse graphs that do not have a degree bound .",
    "it turns out the constant degree bound in the adjacency list model is essential for many of the results mentioned above .",
    "all constant - time testers mentioned above use the fact that in a graph with constant maximum degree for a small sample set one can explore all vertices that have constant distance to one of the sample vertices and then decide based on the obtained information .",
    "it is known that connectivity , @xmath11-edge - connectivity , and eulerian graphs are testable in constant time @xcite .",
    "however , no general results characterizing constant - time testable properties are known .",
    "[ [ bipartiteness . ] ] bipartiteness .",
    "+ + + + + + + + + + + + + +    the problem of testing bipartiteness has been a great benchmark of the capabilities of property testing algorithms in various graph models .",
    "it was one of the first problems studied in detail in both the dense graph model @xcite and the bounded degree graph model @xcite .",
    "bipartiteness is known to be testable in @xmath12 time in the dense graph model @xcite . however , in the bounded degree graph model , it requires @xmath13 queries @xcite and is testable in @xmath14 time @xcite , where @xmath4 is the number of vertices .",
    "kaufman et al .",
    "@xcite show that the property is still testable in @xmath14 time in the adjacency list model for graphs that have constant _ average _ degree .",
    "czumaj et al .",
    "@xcite show in the bounded - degree model that if the underlying graph is planar , then any hereditary graph property , including bipartiteness , is testable in constant time .",
    "this approach can be generalized to any class of graphs that can be partitioned into constant - size components by removing @xmath15 edges of the graph , for any @xmath16 .",
    "graphs satisfying this property are called _ hyperfinite _ , and they include all bounded - degree minor - free graphs .",
    "hassidim et al .",
    "@xcite show that in fact , the distance to most hereditary properties can be approximated in constant time in such graphs .",
    "these results are generalized in the work of newman and sohler @xcite , who show that in hyperfinite graphs , one can approximate the distance to _ any graph property _ in constant time . in particular , this implies that _ any graph property is testable in constant time in hyperfinite graphs _ , and therefore , in bounded - degree planar graphs .",
    "the central goal of this paper is to initiate the research on the complexity of testing graph properties in general unbounded degree minor - free graphs .",
    "our main technical contribution is the design and analysis of a constant time algorithm testing bipartiteness in arbitrary planar graphs .",
    "we show ( in theorem [ thm : main - bipartiteness ] ) that _ a long enough constant - length random walk from a random vertex discovers an odd - length cycle in a graph far from bipartite with constant probability_. the result extends to an arbitrary family of minor - free graphs ( theorem [ thm : main - bipartiteness - minor - free ] in section [ sec : minor - free ] ) .",
    "our approach is based on a new analysis technique for random walks in planar ( and minor - free ) graphs .",
    "we first show that a planar graph that is far from bipartiteness has a linear number of edge - disjoint cycles of constant odd - length .",
    "then we show a reduction that preserves up to a constant factor the probability of discovering an odd - length cycle by a random walk .",
    "we show that after a constant number of reductions we obtain a multigraph in which the probability of discovering an odd - length cycle is lower bounded by a positive constant .",
    "given that bipartiteness can be tested in constant time in planar graphs of bounded degree @xcite , it may seem that there is a simple extension of this result to arbitrary degrees .",
    "we now describe two natural attempts at reducing our problem to testing bipartiteness in other classes of graphs .",
    "we explain why they fail .",
    "we hope that this justifies our belief that new techniques are necessary to address the problem .",
    "\\(a )   and that maintains planarity . for the graph in ( a ) , figure ( b )",
    "depicts the splitting that is invariant to being bipartite.,title=\"fig:\",scaledwidth=40.0% ] ( b )   and that maintains planarity . for the graph in ( a ) , figure ( b ) depicts the splitting that is invariant to being bipartite.,title=\"fig:\",scaledwidth=40.0% ]    \\(a )   can reduce the distance from being bipartite .",
    "the planar graph in ( a ) ( in which the @xmath17 top vertex from the left is connected by an edge to the @xmath17 top vertex from the right ) has @xmath18 edge - disjoint cycles of length @xmath19 and is @xmath2-far from bipartite ( one has to remove at least @xmath20 edges to obtain a bipartite graph ) .",
    "however , after the splitting , the obtained graph ( figure ( b ) ) can be made bipartite just by removal of two edges : figure ( c ) depicts a bipartite graph obtained after removal of such two edges : one of the two edges at the bottom and the middle edge in the split part.,title=\"fig:\",scaledwidth=25.0% ] ( b )   can reduce the distance from being bipartite . the planar graph in ( a )",
    "( in which the @xmath17 top vertex from the left is connected by an edge to the @xmath17 top vertex from the right ) has @xmath18 edge - disjoint cycles of length @xmath19 and is @xmath2-far from bipartite ( one has to remove at least @xmath20 edges to obtain a bipartite graph ) .",
    "however , after the splitting , the obtained graph ( figure ( b ) ) can be made bipartite just by removal of two edges : figure ( c ) depicts a bipartite graph obtained after removal of such two edges : one of the two edges at the bottom and the middle edge in the split part.,title=\"fig:\",scaledwidth=25.0% ] ( c )   can reduce the distance from being bipartite .",
    "the planar graph in ( a ) ( in which the @xmath17 top vertex from the left is connected by an edge to the @xmath17 top vertex from the right ) has @xmath18 edge - disjoint cycles of length @xmath19 and is @xmath2-far from bipartite ( one has to remove at least @xmath20 edges to obtain a bipartite graph ) .",
    "however , after the splitting , the obtained graph ( figure ( b ) ) can be made bipartite just by removal of two edges : figure ( c ) depicts a bipartite graph obtained after removal of such two edges : one of the two edges at the bottom and the middle edge in the split part.,title=\"fig:\",scaledwidth=25.0% ]      the first and possibly the most natural approach to designing a constant - time algorithm for testing bipartiteness in arbitrary planar graphs would be to extend the known constant - time algorithm for _ bounded - degree _ planar graphs @xcite .",
    "this could be achieved by first transforming an input planar graph @xmath0 with an arbitrary maximum - degree into a planar graph @xmath21 with bounded - degree and then running the tester for @xmath21 to determine the property for @xmath0 .",
    "however , we are not aware of a transformation that would behave well and we do not expect any such transformation to exist .    for example , one can reduce the maximum degree to at most @xmath19 by splitting every vertex of degree @xmath22 into @xmath10 vertices of degree @xmath19 .",
    "it is also easy to ensure that this reduction maintains the planarity , and also the property of being bipartite ( see figure [ fig : splitting - to - deg-3 ] ) .",
    "however , there are two properties that are not maintained : one is the distance from being bipartite ( see figure [ fig : splitting - to - deg-3-with - far ] ) and another is that the access to the neighboring nodes requires more than constant time ( though this can be `` fixed '' if one allows each vertex to have its adjacency list ordered consistently with some planar embedding ) . in particular , figure [ fig : splitting - to - deg-3-with - far ] depicts an example of a planar graph that is originally @xmath2-far from bipartite , but after the transformation it suffices to remove 2 edges to obtain a bipartite graph .",
    "another transformation of the graph is considered by kaufman et al .",
    "they replace every high degree vertex with a constant - degree bipartite expander .",
    "while they prove that this construction preserves the distance , it is clear that it can not preserve the planarity , since planar graphs are not expanders .",
    "however , for general graphs we know that testing bipartiteness requires @xmath13 queries @xcite and we do not know how to exploit the structure of the graph after the transformation .",
    "[ [ bipartiteness.-1 ] ] bipartiteness .",
    "+ + + + + + + + + + + + + +    a graph is _ bipartite _ if one can partition its vertex set into two sets @xmath23 and @xmath24 such that every edge has one endpoint in @xmath23 and one endpoint in @xmath24 .",
    "we also frequently use the well known fact that a graph is bipartite if and only if it has no odd - length cycle .",
    "we now formally introduce the notion of being far from bipartiteness .- far ( see , for example , the definition in @xcite ) expresses the distance as the fraction of edges that must be modified in @xmath25 to obtain a bipartite graph .",
    "compared to our definition [ def : bipartiteness - testing ] , instead of deleting @xmath26 edges , one can delete @xmath27 edges .",
    "for any class of graphs with an excluded minor , the number of edges in the graph is upper bounded by @xmath28 , where @xmath29 is a constant . moreover ,",
    "unless the graph is very sparse ( i.e. , most of its vertices are isolated , in which case even finding a single edge in the graph may take a large amount of time ) , the number of edges in the graph is at least @xmath30 .",
    "thus , under the standard assumption that @xmath31 , the @xmath2 in our definition and the @xmath2 in the previous definitions remain within a constant factor .",
    "we use our definition of being @xmath2-far for simplicity ; our analysis can be extended to the standard definition of being @xmath2-far in a straightforward way . ]",
    "the notion is parameterized by a distance parameter @xmath16 .",
    "[ def : bipartiteness - testing ] a graph @xmath25 is _",
    "@xmath2-far from bipartite _ if one has to delete more than @xmath26 edges from @xmath0 to obtain a bipartite graph .",
    "[ [ property - testing . ] ] property testing .",
    "+ + + + + + + + + + + + + + + + +    we are interested in finding a _ property testing algorithm _ for bipartiteness in planar graphs , i.e. , an algorithm that inspects only a very small part of the input graph , and accepts bipartite planar graphs with probability at least @xmath32 , and rejects planar graphs that are @xmath2-far away from bipartite with probability at least @xmath32 , where @xmath2 is an additional parameter .",
    "our algorithm always accepts every bipartite graph .",
    "such a property testing algorithm is said to have _ one - sided error_.    [ [ access - model . ] ] access model .",
    "+ + + + + + + + + + + + +    the access to the graph is given by an _",
    "oracle_. we consider the oracle that allows two types of queries :    * _ degree queries : _ for every vertex @xmath33 , one can query the degree of @xmath34 . * _ neighbor queries : _ for every vertex @xmath33 , one can query its @xmath17 neighbor .",
    "observe that by first querying the degree of a vertex , we can always ensure that the @xmath17 neighbor of the vertex exists in the second type of query .",
    "in fact , in the algorithm that we describe in this paper , the neighbor query can be replaced with a weaker type of query : _ random neighbor query _ , which returns a random neighbor of a given vertex @xmath34 ; each time the neighbor is chosen independently and uniformly at random .",
    "the _ query complexity _ of a property testing algorithm is the number of oracle queries it makes .",
    "[ [ basic - properties - of - planar - graphs . ] ] basic properties of planar graphs .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we extensively use the following well - known properties of planar graphs .",
    "the graph @xmath35 obtained by the _ contraction _ of an edge @xmath36 into vertex @xmath37 is defined as follows : @xmath38 and @xmath39 .",
    "a graph @xmath5 that can be obtained from a graph @xmath0 via a sequence of edge removals , vertex removals , and edge contractions is called a _ minor _ of @xmath0 .",
    "we use the following well - known property of planar graphs .",
    "[ fact : planar_minor_planar ] any minor of a planar graph is planar .    furthermore , we use the following upper bound on the number of edges in a simple planar graph , which follows immediately from euler s formula .",
    "[ fact : planar_limited_edges ] for any simple planar graph @xmath40 ( with no self - loops or parallel edges ) , @xmath41 .",
    "we remark that for any class of graphs @xmath42 that is defined by a finite collection of forbidden minors , similar statements are true , i.e. , if @xmath43 , then any minor of @xmath0 also belongs to @xmath42 and if @xmath44 , then @xmath0 has @xmath45 edges ( where the constant in the big @xmath46 notation depends on the set of forbidden minors ) .",
    "[ [ notation . ] ] notation .",
    "+ + + + + + + + +    throughout the paper we use several constants depending on @xmath2 .",
    "we use lower case greek letters to denote constants that are typically smaller than @xmath47 ( e.g. , @xmath48 ) and lower case latin letters to denote constants that are usually larger than @xmath47 ( e.g. , @xmath49 ) .",
    "all these constants are always positive .",
    "furthermore , throughout the paper we use the asymptotic symbols @xmath50 , @xmath51 , and @xmath52 , which ignore multiplicative factors that depend only on @xmath2 and that are positive for @xmath1 .",
    "we first describe our algorithm for testing bipartiteness of planar graphs with arbitrary degree and provide the high level structure of its analysis .",
    "most of the technical details appear in section [ sec : main - proof ] .",
    "* random - bipartiteness - exploration*@xmath53 :    * repeat @xmath54 times : * * pick a random vertex @xmath33 . * * perform a random walk of length @xmath55 from @xmath34 . * * if the random walk found an odd - length cycle , then * reject*. * if none of the random walks found an odd - length cycle , then * accept*.    [ thm : main - bipartiteness ] there are positive functions @xmath56 and @xmath57 such that for every planar graph @xmath0 , we have    * if @xmath0 is bipartite , then * random - bipartiteness - exploration*@xmath53 accepts @xmath0 , and * if @xmath0 is @xmath2-far from bipartite , then * random - bipartiteness - exploration*@xmath53 rejects @xmath0 with probability at least @xmath58 .",
    "we first observe that the first claim is obvious : if @xmath0 is bipartite , then every cycle in @xmath0 is of even length and hence * random - bipartiteness - exploration * always accepts .",
    "thus , to prove theorem  [ thm : main - bipartiteness ] , it suffices to show that if @xmath0 is @xmath2-far from bipartite , then * random - bipartiteness - exploration * rejects @xmath0 with probability at least @xmath58 .",
    "therefore , from now on , we assume that the input graph @xmath0 is @xmath2-far from bipartite for some constant @xmath1 . furthermore , note that it suffices to show that a _ single _",
    "random walk of length @xmath59 finds an odd - length cycle with probability @xmath60 .",
    "indeed , for any functions @xmath57 and @xmath56 , if a random walk of length @xmath61 finds an odd - length cycle with probability at least @xmath62 , then this implies that @xmath63 independent random walks detect at least one odd - length cycle with probability at least @xmath64 .",
    "therefore , in the remainder of the paper , we analyze algorithm * random - walk*@xmath65 below .",
    "we have to prove that there is @xmath66 such that for every planar graph @xmath0 that is @xmath2-far from bipartite , * random - walk*@xmath65 finds an odd - length cycle with probability @xmath60 .",
    "this implies theorem [ thm : main - bipartiteness ] .    * random - walk*@xmath67 :    * pick a random vertex @xmath33 . *",
    "perform a random walk of length @xmath68 from @xmath34 . *",
    "if the random walk found an odd - length cycle , then * reject*. * if not , then * accept*.      because of the arguments presented above , the remainder of the paper deals with the main technical challenge of our result : proving that our algorithm * random - walk * finds with sufficient probability an odd - length cycle in any planar graph @xmath25 that is @xmath2-far from bipartite . to this end",
    ", we find a subgraph @xmath70 of @xmath0 that has the properties stated in the following lemma :    [ lemma : existenceofh ] for every @xmath71 , there is a @xmath72 such that for every graph @xmath25 that is @xmath69-far from bipartite , there exists a subgraph @xmath70 of @xmath0 with the following properties :    * if  * random - walk*(@xmath73 ) finds an odd - length cycle in @xmath70 with probability @xmath60 , then * random - walk*(@xmath74 ) finds an odd - length cycle in @xmath0 with probability @xmath60 , and * * random - walk*(@xmath73 ) finds an odd - length cycle in @xmath70 with probability @xmath60 .",
    "if such a subgraph @xmath70 always exists , these properties immediately imply that * random - walk*@xmath65 finds an odd - length cycle in @xmath0 with probability @xmath60 and so by the discussion above , theorem  [ thm : main - bipartiteness ] follows .    in order to prove the existence of @xmath70",
    ", we construct a series of subgraphs @xmath75 for some @xmath76 , such that each @xmath77 , @xmath78 , satisfies property ( a ) and such that @xmath79 also satisfies property ( b ) .",
    "we begin by constructing graph @xmath80 , which consists of a union of @xmath81 edge - disjoint short odd - length cycles from @xmath0 . in order to construct @xmath80",
    "we use the klein - plotin - rao decomposition theorem , which shows that one can remove @xmath82 edges from @xmath0 to partition @xmath0 into connected components such that the every pair of vertices from the same component has distance @xmath59 in @xmath0 .",
    "then we show that there exists a component that contains a short odd - length cycle .",
    "we remove the cycle from the graph and repeat this process as long as we find a short odd - length cycle .",
    "the set of removed cycles forms a graph @xmath83 , which after some further processing to satisfy property ( a ) is turned into @xmath80 .",
    "the detailed construction appears in section [ subsec : constructing - h1 ] .",
    "then we design a reduction that takes a graph @xmath77 consisting of a set @xmath84 of @xmath81 edge - disjoint short odd - length cycles and we construct from it a subgraph @xmath85 that consists of a subset @xmath86 of @xmath84 of @xmath81 cycles . to guide our process",
    ", we associate with each @xmath77 a certain multigraph @xmath87 that is constructed from @xmath77 by performing edge contractions while keeping parallel edges and self - loops .",
    "the purpose of @xmath87 is to approximate _ how the random walk behaves at a larger scale _",
    ", i.e. , one step of a ( weighted ) random walk in @xmath87 corresponds to multiple steps in @xmath77 .",
    "each vertex @xmath37 of @xmath87 corresponds to a subset of vertices from @xmath88 that contains @xmath37 .",
    "furthermore , these subsets are disjoint and form a partition of @xmath88 .",
    "vertex @xmath37 from @xmath87 can be thought of as a representative of the corresponding set . in particular , a random walk in @xmath87 chooses its starting vertex @xmath37 with probability proportional to the size of its represented subset .",
    "edges in @xmath87 represent paths in @xmath77 ; the paths represented by parallel edges may intersect .",
    "parallel edges are also taken into account when we perform a random walk .",
    "the probability to move from @xmath37 to @xmath34 is proportional to the number of parallel edges @xmath89 .",
    "let us recall that @xmath77 consists of a set of short odd - length cycles @xmath84 .",
    "the construction of @xmath87 ensures that every cycle in @xmath84 also corresponds to a cycle in @xmath87 . clearly , the length of the corresponding cycle in @xmath87 is at most the length of the cycle in @xmath77 but due to edge contractions it may become lower .",
    "when we are constructing @xmath85 from @xmath77 by removing cycles from @xmath84 to obtain @xmath86 , we ensure that for every cycle from @xmath86 the length in @xmath90 is shorter than the length of the cycle in @xmath87 ( in addition to preserving property ( a ) ) .",
    "thus , after @xmath11 steps ( when @xmath11 is the maximum initial length of a cycle ) all cycles are contracted to self - loops .",
    "but then , if @xmath91 properly approximates the behavior of the random walk , a cycle can be detected and so @xmath92 satisfies both property ( a ) and ( b ) , which finishes the proof .",
    "while the above construction outlines the main line of thought , multiple details have to be taken care of .",
    "for instance , during the edge contractions we lose information about the original lengths of the paths and so an odd - length cycle in @xmath87 may correspond to an even length set of cycles in @xmath77 .",
    "the main proof , our analysis of * random - walk * when @xmath0 is @xmath69-far from bipartite , can be kept relatively short , if we assume that the reduction from @xmath77 to @xmath85 works as supposed . proving this reduction is the key technical challenge .",
    "we therefore first present the complete proof except for lemma [ lemma : second_reduction ] , whose proof appears in section [ sec : proof - of - lemma : second_reduction ] .",
    "our proof follows the general outline sketched in the previous section .",
    "our first step is to show how to obtain our starting subgraph @xmath80 .",
    "we start by taking a closer look at property ( a ) of lemma  [ lemma : existenceofh ] and we show that it is implied by a simple condition on the degrees of the vertices in @xmath70 , namely , the degree of each vertex is either @xmath93 or no more than a constant factor smaller than its corresponding degree in @xmath0 .",
    "our construction of @xmath77 in the remainder of the paper satisfies an alternate property ( a ) , defined below , which implies property ( a ) .",
    "[ lemma : basic ] let @xmath40 be a graph , @xmath94 be the length of a random walk , and @xmath70 be a subgraph of @xmath0 on vertex set @xmath88 such that the following property holds :    * for every vertex @xmath95 , either @xmath96 or @xmath97 .",
    "then property ( a ) of lemma [ lemma : existenceofh ] is satisfied for a random walk of length @xmath68 .",
    "consider a single walk @xmath98 in @xmath70 of length @xmath68 that finds an odd - length cycle . since @xmath70 is a subgraph of @xmath0 , the same walk exists in @xmath0 .",
    "furthermore , every vertex visited in @xmath98 must have @xmath99 . therefore , at every step , the probability of following @xmath98 decreases in @xmath0 by at most a factor of @xmath100 , compared to @xmath70 .",
    "overall the probability of @xmath98 decreases by at most a factor of @xmath101 . summing up over",
    "all such walks proves the lemma .",
    "we now proceed with the construction of @xmath80 .",
    "we first construct a subgraph of @xmath0 that is a union of @xmath81 short edge - disjoint cycles .",
    "then we modify it so that it satisfies property ( a ) and thus property ( a ) .",
    "we make use of the following klein - plotkin - rao decomposition theorem @xcite .    * @xcite * [ lemma : partition - into - conn - comp - of - small - diam ] let @xmath40 be a planar graph and let @xmath102 be a parameter , @xmath103 .",
    "there is a set of at most @xmath104 edges in @xmath0 whose deletion decomposes @xmath0 into connected components , where the distance ( in the original graph @xmath0 ) between any two nodes in the same component is @xmath105 .",
    "lemma [ lemma : partition - into - conn - comp - of - small - diam ] helps us realize the first part of the plan : showing that there are many short edge - disjoint odd - length cycles in a highly non - bipartite graph .",
    "[ lemma : first_reduction ] in every planar graph @xmath25 that is @xmath2-far from bipartite , there exists a collection @xmath29 of  @xmath106 edge - disjoint odd - length cycles of length at most @xmath107 .",
    "we find the cycles one by one .",
    "suppose that we have already found in @xmath0 a set of @xmath108 edge - disjoint odd - length cycles of length at most @xmath109 each , where @xmath110 .",
    "we show the existence of one more such cycle , which by induction yields the lemma .",
    "let @xmath21 be the subgraph of @xmath0 obtained by removing the @xmath108 edge - disjoint odd - length cycles of length at most @xmath11 each .",
    "since @xmath111 , @xmath21 is obtained by removing less than @xmath112 edges , and hence @xmath21 is @xmath113-far from bipartite .",
    "apply lemma [ lemma : partition - into - conn - comp - of - small - diam ] to @xmath21 with @xmath114 and let @xmath70 be the resulting graph . since @xmath21 is @xmath113-far from bipartite , @xmath70 is not bipartite .",
    "let us consider a connected component @xmath115 of @xmath70 that is not bipartite and let @xmath34 be a vertex from @xmath115 . build a bfs tree from @xmath34 in @xmath21 . since @xmath115 is not bipartite , there must exist two vertices @xmath116 and @xmath117 in @xmath115 that have the same distance from @xmath34 and that are connected by an edge in @xmath70 ( otherwise , we could define a bipartition of @xmath115 by the parity of the distance from @xmath34 in the bfs tree ) .",
    "let @xmath118 be the last common vertex on the paths from @xmath34 to @xmath116 and from @xmath34 to @xmath117 in the bfs tree .",
    "the cycle in @xmath21 that starts at @xmath118 , goes to @xmath116 via the bfs tree edges , then takes the edge connecting @xmath116 and @xmath117 , and finally returns to @xmath118 via the bfs tree edges .",
    "let @xmath119 be the bound on the diameter of @xmath115 ( in @xmath21 ) that follows from lemma  [ lemma : partition - into - conn - comp - of - small - diam ] .",
    "since the bfs tree is a shortest path tree ( from @xmath34 ) , this cycle has length @xmath120 .",
    "given any set of cycles @xmath29 on vertex set @xmath88 , we write @xmath121 to denote the graph on vertex set @xmath88 that is induced by @xmath29 , i.e. , @xmath122 with @xmath123 being the union of the edges of the cycles in @xmath29 . while lemma [ lemma : first_reduction ] provides us with a graph @xmath121 that has a linear number of disjoint short odd - length cycles , it is by no means clear that this new graph @xmath121 satisfies property ( a ) of lemma [ lemma : existenceofh ] .",
    "however , we show in the next lemma that there is always a subset @xmath124 with cardinality @xmath125 such that the graph @xmath126 satisfies property ( a ) via showing that it satisfies property ( a ) .",
    "[ lemma : transformation ] let @xmath25 be a planar graph .",
    "let @xmath29 be a set of @xmath127 edge - disjoint cycles on @xmath88 in @xmath0 , each of length at most @xmath11 , for some @xmath128 .",
    "then there exists a subset @xmath129 with @xmath130 such that the graph @xmath126 satisfies condition ( a ) of lemma [ lemma : basic ] .",
    "that is , for every @xmath33 , either @xmath131 or @xmath132 .",
    "we construct the subset @xmath133 by deleting some cycles from @xmath29 .",
    "the process of deleting the cycles is based on the comparison of the original degree of the vertices with the current degree in @xmath126 . to implement this scheme , we write @xmath134 to denote the degree of @xmath34 in the original graph @xmath0 and we use the term _ current degree _ of a vertex @xmath34 to denote its current degree in the graph @xmath126 induced by the _",
    "current _ set of cycles @xmath133 ( where `` current '' means at a given moment in the process ) .",
    "let @xmath135 .",
    "we repeat the following procedure as long as possible : if there is a non - isolated vertex @xmath33 with current degree in @xmath126 at most @xmath136 , then we delete from @xmath133 all cycles going through @xmath34 . to estimate the number of cycles deleted",
    ", we charge to @xmath34 the number of deleted cycles in each such operation .",
    "observe that each @xmath33 will be processed not more than once . indeed ,",
    "once @xmath34 has been used , it becomes isolated , and hence it is not used again . therefore , at most @xmath136 cycles from @xmath133 can be charged to any single vertex .",
    "this , together with the inequality @xmath137 by planarity of @xmath126 , implies that the total number of cycles removed from @xmath29 to obtain @xmath133 is upper bounded by @xmath138 . since @xmath139",
    ", we conclude that @xmath140 .",
    "thus , by lemma [ lemma : transformation ] , we can construct a subgraph @xmath141 of @xmath0 that is composed of a collection of @xmath106 odd - length edge - disjoint cycles that satisfy property ( a ) of lemma  [ lemma : existenceofh ] .",
    "we begin with presenting some challenges of our construction and describe why two most natural lines of extending the analysis from section [ subsec : constructing - h1 ] fail .",
    "after that , to facilitate our analysis , we first describe our framework in section [ subsec : graph - repr ] and then , in section [ subsec : main - reduction ] , we present details of the construction of @xmath85 .      it is tempting to try to make a shortcut and avoid the need of constructing @xmath142 and prove that a random walk finds an odd - length cycle in @xmath80 by showing that a fixed cycle is found with probability @xmath143 .",
    "such a statement would be trivially true for graphs with a constant maximum degree , but it is false for arbitrary planar graphs , as illustrates the example in figure [ figure : key ] .        the graph in this example is composed of many parallel cycles that intersect in a few vertices of high degree .",
    "it is easy to see that a random walk finds an odd - length cycle with constant probability .",
    "however , any fixed cycle is only found with sub - constant probability .. ] this implies that in our arguments it is important to _ exploit parallel - like structure _ in the graphs .",
    "similarly , it could be tempting to hope that algorithm * random - walk * finds with constant probability an odd - length cycle in _ an arbitrary graph _",
    "@xmath0 ( not necessarily planar ) that is a union of a linear number of edge - disjoint odd - length cycles of constant length .",
    "this , however , turns out not to be the case .",
    "consider an expander with girth @xmath144 , in which every vertex has degree @xmath144 ( see , e.g. , @xcite ) .",
    "then replace every edge by a cycle of length 3 .",
    "it is easy to see that a random walk of constant length will find an odd - length cycle only if it finds one of the new cycles of length  3 . however , since the probability of this event is @xmath145 , the algorithm will not find a cycle with constant probability .",
    "this implies that in our arguments it is crucial to _",
    "exploit planarity_.      all our graphs @xmath77 are formed by sets @xmath84 of short odd - length edge - disjoint cycles from @xmath25 .",
    "we also have that @xmath146 and @xmath147 , and thus @xmath148 . for a set of cycles @xmath29 on vertex set @xmath88",
    ", we write @xmath121 to denote the graph with vertex set @xmath88 and edge set being the set of edges from the cycles in @xmath29 . thus , in our reduction @xmath149 . recall that in addition to the graphs @xmath77 we use the multigraphs @xmath87 . in order to define @xmath87 , we first require a partition @xmath150 of the vertices that describes how the edges are contracted .",
    "the idea is that the vertex set @xmath151 is contracted into vertex @xmath37 . in order to be meaningful",
    ", this partition has to satisfy the properties given in the following definition .",
    "[ def : good - partition ] let @xmath29 be an arbitrary set of disjoint cycles in @xmath0 .",
    "a partition @xmath152 is called _ good _ for @xmath29 if it satisfies the following four properties .    if @xmath153 is in the image of @xmath154 , then @xmath155 .",
    "if @xmath156 is not contained in any cycle from @xmath29 , then @xmath155 .    for each cycle",
    "@xmath157 and each partition class @xmath151 , where @xmath37 belongs to the image of @xmath154 , if @xmath151 contains a vertex of @xmath158 , then @xmath158 also contains @xmath37 .    for each cycle",
    "@xmath157 and each partition class @xmath151 , where @xmath37 belongs to the image of @xmath154 , one of the following is true :    @xmath151 contains all vertices of @xmath158 , or    @xmath151 contains no vertex of @xmath158 , or    @xmath151 induces a path in @xmath158 .",
    "a vertex @xmath37 in the image of @xmath154 is called _ the head of the partition class @xmath151_.        an example of a good partition is presented in figure [ fig : partition ] ( left side ) .",
    "the first property ensures that all partition classes have a proper head , i.e. , a vertex into which all other vertices are contracted .",
    "the second property ensures that each isolated vertex in @xmath121 has its own partition class .",
    "the third and fourth properties ensure that we can apply the contractions to each cycle from @xmath29 individually .",
    "this way we may also obtain from @xmath29 a multiset of contracted cycles @xmath159 .",
    "notice that the above definition implies that any partition class @xmath151 , @xmath37 in the image of @xmath154 , forms a connected subgraph in @xmath121 .",
    "indeed , assume that @xmath34 and @xmath98 are in @xmath151 , @xmath160 . by the second property ,",
    "any of @xmath34 and @xmath98 which is not equal to @xmath37 is contained in a cycle . by the third property , either @xmath161 or @xmath34 is contained in a cycle , and hence @xmath34 and @xmath37 are in the same cycle ; similarly , either @xmath162 or @xmath98 and @xmath37 are in the same cycle . therefore , there is a path connecting @xmath34 and @xmath98 .    in our analysis",
    ", we modify a given partition @xmath154 in two ways : by _ edge contractions _ and by _",
    "cycle removals_. as a result of contracting an edge @xmath89 , the partition classes of @xmath37 and @xmath34 are merged .",
    "deleting one ( or more ) cycles from @xmath29 may create an isolated vertex ( with degree @xmath93 ) in @xmath121 . in this case , the second property in definition [ def : good - partition ] may be violated .",
    "therefore , whenever we create an isolated vertex @xmath37 in @xmath121 by deleting a cycle from @xmath29 , we define @xmath163 to satisfy the second condition .",
    "it is easy to verify that the other conditions are still satisfied after this modification has been applied to all newly created isolated vertices .",
    "we abuse the notation and write @xmath164 to denote the cycle obtained from @xmath158 by contracting its vertices according to @xmath154 .",
    "we remark that the contracted cycles may be degenerated to self - loops or cycles of the form @xmath165 .",
    "for example , if all vertices of @xmath158 are contained in the same partition class of @xmath154 , then the resulting cycle is a self - loop incident to the head of the partition class .",
    "for any set of cycles @xmath29 , we also write @xmath166 to denote the union of @xmath164 for all @xmath157 .",
    "finally , we define @xmath167 to be the multigraph whose vertex set is the image of @xmath154 and whose edge multiset is the multiset of edges of cycles in @xmath166 .",
    "the right side of figure [ fig : partition ] contains the resulting multigraph for the input set of cycles and partition on the right . for a multigraph @xmath168 , we write @xmath169 to denote the number of edges in @xmath168 that are incident to @xmath37 ( i.e.",
    ", self - loops contribute @xmath47 to the degree ) .    in our main reduction , we define @xmath170 .",
    "the multigraph @xmath87 has the following interpretation .",
    "an edge @xmath89 in @xmath87 represents a path of @xmath77 of length @xmath100 .",
    "therefore , with probability @xmath171 , a random walk on @xmath172 of ( suitable ) constant length starting in @xmath37 reaches @xmath34 .",
    "if there are @xmath173 edges @xmath89 in @xmath87 then their union represents a subgraph of @xmath77 that for random walks behaves like a set of @xmath173 parallel non - intersecting paths .",
    "in particular , the probability of moving from @xmath37 to @xmath34 is @xmath174 , where @xmath173 is the number of edges @xmath89 in @xmath87 .",
    "furthermore , a random walk starting from a vertex in @xmath151 reaches vertex @xmath37 with constant probability after a constant number of steps .    with this definition ,",
    "we can extend our notion of random walks to multigraphs in the following natural way ( where we define the notion of odd - parity cycles below ) .    * random - walk*@xmath175 :    * pick a random vertex @xmath176 , such that any @xmath176 is chosen with probability @xmath177 . *",
    "perform a random walk of length @xmath68 from @xmath34 , where the probability to move from a vertex @xmath176 to a vertex @xmath178 is @xmath179 . * if the random walk found an odd - parity cycle , then * reject*. * if not , then * accept*.    [ [ parities - of - edges - and - lengths - of - cycles . ] ] parities of edges and lengths of cycles .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    since the contraction of edges influences the length of cycles and since we are searching for cycles of odd - length in @xmath121 , we need a way to keep track of the parity of the lengths of the cycles and paths explored and contracted .",
    "it would be easy , if we were just dealing with fixed cycles , but since we would like to allow combinations of cycles , we need to encode the contractions in the graph in a way that allows us to use combinations .",
    "this can be done as follows . for every cycle @xmath180",
    ", we have a corresponding contracted cycle in @xmath181 on vertex set @xmath182 .",
    "each edge in @xmath183 corresponds to a path in @xmath158 and we define the parity of an edge @xmath89 in @xmath183 as @xmath93 , if the length of the path from @xmath37 to @xmath34 in @xmath158 is _ even _ and @xmath47 , if the length is _",
    "odd_. in the case that @xmath37 and @xmath34 are the only two vertices in @xmath183 , there are two edges connecting @xmath37 and @xmath34 and one of them has parity @xmath93 while the other one has parity @xmath47 . this way , a cycle in the multigraph @xmath184 has odd parity if it contains an odd number of edges with parity @xmath47 .      the next lemma states our main technical contribution : the main reduction with its properties .",
    "we apply it several times to reduce the lengths of our cycles to @xmath47 . for the clarity of presentation ,",
    "we postpone the proof of this lemma to section [ sec : proof - of - lemma : second_reduction ] .",
    "[ lemma : second_reduction ] let @xmath185 , let @xmath40 be a planar graph , and let @xmath186 , @xmath187 .",
    "let @xmath29 be a set of @xmath106 odd - length cycles in @xmath0 .",
    "let @xmath154 be a partition that is good for @xmath29 such that all cycles in @xmath166 have length at most @xmath108 .",
    "then we can construct a set of cycles @xmath188 with @xmath189 , and a partition @xmath190 that is good for @xmath191 , such that the following properties are satisfied :    * every cycle in @xmath192 has length at most @xmath193 , and * if the probability that * random - walk*@xmath194 finds an odd - parity cycle is @xmath60 , then also the probability that * random - walk*@xmath195 finds an odd - parity cycle is @xmath60 .",
    "this lemma is used to construct @xmath85 and @xmath90 .",
    "we take as the input @xmath196 and @xmath197 , and apply lemma [ lemma : second_reduction ] to obtain @xmath198 and @xmath199 , giving @xmath200 and @xmath201 .",
    "the first property of the construction in lemma [ lemma : second_reduction ] implies that the length of the cycles in @xmath202 decreases with increasing @xmath203 .",
    "we therefore apply lemma [ lemma : second_reduction ] @xmath204 times , where @xmath11 is the original upper bound for the cycle length in lemma [ lemma : transformation ] . as a result , we obtain a sequence @xmath205 consisting of sets of cycles such that @xmath206 consists solely of self - loops .",
    "we use the following property of graphs induced by such self - loops .",
    "[ lemma : selfloops ] let @xmath25 be a planar graph .",
    "let @xmath207 be a set of edge disjoint odd - length cycles in @xmath0 and @xmath208 be a partition that is good for @xmath207 .",
    "if all cycles in @xmath206 are self - loops and @xmath147 , then the probability that a @xmath47-step random walk finds an odd - parity cycle in @xmath91 is @xmath60 .    since @xmath207 is a collection of @xmath106 edge disjoint cycles in @xmath0 , the underlying graph @xmath209 has @xmath106 edges .",
    "therefore since @xmath209 is planar , @xmath209 must have @xmath106 non - isolated vertices .",
    "each of these non - isolated vertices is contracted in @xmath208 into a vertex that is incident to a self - loop .",
    "therefore , the probability to sample a vertex incident to a self - loop is @xmath60 and then in one step we find a self - loop . by the definition of parities",
    ", the detected self - loop has odd parity .",
    "now we are ready to prove our main theorem , theorem [ thm : main - bipartiteness ] .",
    "we already observed that it suffices to prove that for any planar graph @xmath40 that is @xmath2-far from bipartite , * random - walk*@xmath65 finds an odd - length cycle with probability @xmath60 for @xmath185 .",
    "we know by lemma [ lemma : first_reduction ] that @xmath0 contains a set @xmath29 of @xmath106 odd - length cycles of length at most @xmath210 .",
    "furthermore , by lemma [ lemma : transformation ] , there is a set @xmath211 of @xmath106 odd - length cycles of length at most @xmath11 such that if * random - walk*@xmath212 on @xmath213 finds an odd - length cycle with probability @xmath60 , then so does * random - walk*@xmath65 .",
    "we then define @xmath214 and @xmath215 to be the identity . clearly , @xmath216 is good for @xmath217",
    ". then we apply lemma [ lemma : second_reduction ] @xmath204 times to obtain sets of cycles @xmath84 and partitions @xmath218 that satisfy the properties of lemma [ lemma : second_reduction ] . in particular , since @xmath219 , we know that @xmath91 contains @xmath106 self - loops . moreover , if * random - walk*@xmath220 finds an odd - parity cycle with probability @xmath60 , then so does * random - walk*@xmath221 , which in turn implies that * random - walk*@xmath222 also finds an odd - length cycle with probability @xmath60 .",
    "thus , we only need to prove that * random - walk*@xmath220 with @xmath223 finds an odd - parity cycle with probability @xmath60 .",
    "this follows immediately from lemma [ lemma : selfloops ] .",
    "to complete the analysis , it remains to prove lemma [ lemma : second_reduction ] .",
    "we start with an overview of the proof .",
    "the main idea is to thin out the current set of cycles @xmath29 to ensure that we can define a set of `` contractions '' to decrease the length of each of the remaining cycle .",
    "further care is needed to ensure that after performing the contractions , we still maintain a good partition for the set of remaining cycles .",
    "this means that we are not allowed to contract edges that  shortcut  other remaining cycles .",
    "in order to avoid this we ensure that one of the contracted vertices , say @xmath34 , either has only one distinct neighbor in @xmath87 ( in which case all cycles that involve this vertex must be of the form @xmath165 ) or it has exactly two distinct neighbors , say @xmath224 and @xmath225 , and all cycles that involve @xmath34 contain the edges @xmath226 and @xmath227 . furthermore ,",
    "in the latter case , we ensure that all edges @xmath226 have the same parity and all edges @xmath227 have the same parity , as otherwise the parity after the contraction would not be well - defined .",
    "this is captured by the following definition .",
    "let @xmath29 be a set of cycles on vertex set @xmath88 and @xmath154 be a partition that is good for @xmath29 .",
    "we say a vertex @xmath228 is _ well - contractible _ in @xmath229 if it satisfies one of the following conditions :    * @xmath34 has only one distinct neighbor in @xmath229 , or * @xmath34 has two distinct neighbors @xmath224 and @xmath225 in @xmath229 , and * * all cycles in @xmath29 that contain @xmath34 contain also both @xmath224 and @xmath225 , and * * all edges @xmath226 have the same parity and all edges @xmath227 have the same parity .",
    "using this definition , our goal is to thin out the cycles such that every cycle has a well - contractible vertex .",
    "we also need to ensure that our contractions using well - contractible vertices do not interfere with each other .",
    "therefore we additionally require that the set of well - contractible vertices forms an independent set .    after finding a set of cycles @xmath133 ( and good partition @xmath230 ) with the above properties",
    ", we still have to do a ",
    "clean - up  phase to ensure that if a random walk finds with constant probability a cycle in @xmath231 , then this is also true in @xmath229 . in order to achieve this , we use lemma [ lemma : transformation ] to ensure that the degree of every non - isolated vertex in @xmath231 is at least a constant fraction of its degree in @xmath229 .    [",
    "[ outline . ] ] outline .",
    "+ + + + + + + +    the roadmap is now as follows .",
    "we first find a subset of cycles such that every cycle has a well - contractible vertex . in order to do so",
    ", we first construct a large subset of cycles such that every cycle has a vertex with at most 6 distinct neighbors ( lemma [ lemma : small - vertices ] ) .",
    "then we argue that such a set of cycles satisfies at least one of the following two conditions : ( 1 ) it already has many self - loops , in which case we can just take this subset of self - loops and we are done with our reduction , or ( 2 ) we can remove all self - loops and process the remaining ( linear number of ) cycles to ensure that every cycle contains a well - contractible vertex ( lemma  [ lemma : contractible - vertices ] ) .",
    "[ lemma : small - vertices ] let @xmath29 be a set of edge - disjoint cycles on vertex set @xmath88 that are of length at most @xmath11 and such that @xmath121 is a planar graph .",
    "let @xmath154 be a partition that is good for @xmath29 .",
    "then there is a set @xmath129 of size at least @xmath232 such that every cycle in @xmath233 has a vertex with at most 6 distinct neighbors in @xmath234",
    ". may be no longer a good partition due to vertex removal . in this case",
    ", we can still define @xmath234 the same way as above . ]",
    "we prove the lemma by presenting an algorithm that takes as its input a set of cycles @xmath29 with planar @xmath121 and a partition @xmath154 that is good for @xmath29 .",
    "the algorithm computes a subset @xmath133 that satisfies the properties of the lemma .",
    "the algorithm consists of two phases .    in the first phase , we partition @xmath29 into _ levels _ , iteratively removing the cycles until @xmath29 is empty .",
    "we start with @xmath29 being the input set of cycles . in the @xmath235 iteration , we choose an arbitrary vertex @xmath236 with at most 6 distinct neighbors in @xmath229 and at least one incident cycle .",
    "such a vertex exists since @xmath121 is a planar graph , and so by euler s formula there exists a vertex in @xmath229 with at most 5 distinct neighbors other than itself . taking into account",
    "that @xmath229 may also contain self - loops , we find a vertex with at most 6 distinct neighbors . here",
    "@xmath29 refers to the current set @xmath29 , i.e. , after the removal of the sets from the previous iterations of the repeat - loop .",
    "every cycle from @xmath29 that contains @xmath236 is removed from @xmath29 . if a cycle @xmath158 is removed in the @xmath235 iteration , its _ level _",
    "@xmath237 is defined to be @xmath238 .    in the second phase ,",
    "we start again with @xmath29 being the input set of cycles .",
    "we now iterate through the levels in decreasing order . for each level @xmath238 ,",
    "we let @xmath239 denote the current subset of cycles in @xmath29 at level @xmath238 .",
    "note that by definition of the level , all cycles in @xmath239 must contain vertex @xmath236 .",
    "furthermore , we define @xmath240 to be the subset of cycles of @xmath29 that contain @xmath236 and have a level smaller than @xmath238 .",
    "we observe that if we remove all cycles in @xmath240 from @xmath29 , then every cycle in @xmath239 contains a vertex ( e.g. , vertex @xmath236 ) with at most 6 distinct neighbors in @xmath229 .",
    "the second phase explores this observation . for each @xmath238",
    ", we compare the size of @xmath239 to the size of @xmath240 .",
    "if @xmath239 is sufficiently large , i.e. , at least a @xmath241 fraction of @xmath240 , then we keep @xmath239 and remove @xmath240 from @xmath29 ; otherwise , we remove @xmath239 .",
    "below we argue that at most half of the cycles from @xmath29 are removed because they are in some removed set @xmath239 . furthermore , for every @xmath242 cycles that are removed because they are contained in a set @xmath240 , at least one cycle remains in @xmath29 .",
    "this allows us to deduce the lemma .",
    "details follow after the pseudocode describing more formally the process .    * assigning - levels*(set @xmath29 of cycles and a partition @xmath154 that is good for @xmath29 )    * @xmath243 * @xmath244 * * phase 1 : * * repeat until @xmath29 is empty : * * let @xmath236 be a non - isolated vertex that has at most 6 distinct neighbors in @xmath167 * * for all cycles @xmath157 that contain @xmath236 , let @xmath245 * * remove from @xmath29 all cycles that contain @xmath236 * * @xmath246 * * phase 2 : * * @xmath247 * repeat until @xmath243 : * * @xmath248 * * @xmath249 * * @xmath250 * * if @xmath251 then @xmath252 else @xmath253 * return @xmath29    it remains to prove the correctness of the algorithm .",
    "we first observe that phase 1 terminates since @xmath167 is a planar graph and therefore by euler s formula , it has a vertex with at most 6 neighbors ( this also holds during the execution of the algorithm since planarity is closed under edge removal and contractions ) .",
    "it remains to analyze phase 2 of the algorithm .",
    "every cycle in @xmath29    is removed because it is contained in some set @xmath239 that is removed from @xmath29 in phase 2 , or    is removed because it is contained in some set @xmath240 that is removed from @xmath29 in phase 2 , or    is not removed and stays in the final set @xmath29 .",
    "let @xmath254 , @xmath255 , and @xmath256 be the respective numbers of cycles . clearly , @xmath257 and to prove the lemma we have to show that @xmath258 .",
    "we proceed in two steps .",
    "we first prove that @xmath259 , which implies that @xmath260 .",
    "then we argue that @xmath261 .",
    "this yields @xmath262 and hence @xmath263 .    _",

claim : a ] @xmath259 .",
    "we charge the vertices from the removed sets @xmath239 to the sets @xmath240 and derive a bound on the sum of sizes of the sets @xmath240 .",
    "recall that every cycle contains at most @xmath11 vertices . in every cycle ,",
    "one vertex is the vertex that has degree at most 6 ( in @xmath229 ) when the cycle is removed in phase 1 of the algorithm .",
    "thus , every cycle is contained in at most @xmath204 different sets @xmath240 .",
    "it follows that @xmath264 let @xmath265 denote the set of indices @xmath238 such that @xmath239 is removed from @xmath29 during phase 2 .",
    "observe that whenever we remove a set @xmath239 , we have @xmath266 by the condition in the process .",
    "it follows that @xmath267    [ claim : b ] @xmath261 .    for every set @xmath240 removed from @xmath29 , we know that @xmath268 . at the point of time",
    "when @xmath240 is removed from @xmath29 , the set @xmath239 remains in @xmath29 because @xmath239 and @xmath240 are disjoint .",
    "since we are iterating downwards through the levels of the cycles , the set @xmath239 is also disjoint from all sets @xmath269 , @xmath270 , and so it is not removed also in any future iteration of the repeat loop .",
    "thus , in this case each cycle from @xmath239 remains in @xmath29 until the end of the process and contributes to the value of @xmath256 .",
    "let @xmath271 be the set of indices @xmath238 such that @xmath239 remains in @xmath29 during phase 2 ( and hence @xmath240 is removed from @xmath29 ) .",
    "since each cycle of @xmath239 , @xmath272 , contributes to @xmath256 and since sets @xmath239 are disjoint , we obtain @xmath273 .",
    "hence , @xmath274 which implies the claim .",
this finishes the proof of lemma [ lemma : small - vertices ] , which follows from claims [ claim : a ] and [ claim : b ] as argued above .",
    "our next lemma shows that if there are no self - loops , then we can cover a large number of cycles by well - contractible vertices .",
    "[ lemma : contractible - vertices ] let @xmath29 be a set of edge disjoint cycles on a vertex set @xmath88 of length at most @xmath11 .",
    "let @xmath154 be a partition that is good for @xmath29 such that @xmath229 contains no self - loops .",
    "let @xmath275 be the set of vertices in @xmath88 that have at most 6 distinct neighbors in @xmath229 .",
    "if every cycle in @xmath29 contains at least one vertex from @xmath275 , then there is a subset @xmath129 , @xmath276 , such that every cycle @xmath277 has a vertex @xmath278 that is a well - contractible vertex in @xmath279",
    ". may be no longer a good partition due to vertex removal . in this case",
    ", we can still define @xmath234 the same way as above . ]    for each vertex @xmath280 , we select @xmath224 and @xmath225 independently uniformly at random with among its neighbors in @xmath229 . if @xmath281 , we delete from @xmath29 all cycles @xmath158 that contain @xmath34 and for which @xmath164 contains any vertex other than @xmath34 or @xmath224 .",
    "if @xmath282 , we also select independently uniformly at random parities @xmath283 . in this case , we remove from @xmath29 every cycle @xmath158 that contains @xmath34 unless @xmath164 contains both the edge @xmath284 of parity @xmath285 and the edge @xmath227 of parity @xmath286 .",
    "let @xmath133 be the set of remaining cycles .",
    "we observe that every cycle @xmath158 in @xmath133 contains a vertex @xmath278 that is well - contractible ( in fact , every vertex from @xmath275 contained in @xmath158 is well - contractible ) .",
    "the probability that a fixed cycle @xmath158 is not deleted is at least @xmath287 .",
    "thus , the expected size of @xmath133 is at least @xmath288 , and therefore , there exists a set @xmath133 of that size that satisfies the lemma .",
    "we now proceed to the main technical lemma that prepares our reduction step . given a set @xmath29 of cycles and a partition @xmath154 ,",
    "we show that there is a set @xmath275 and a subset @xmath133 of @xmath29 of size @xmath289 such that we can simultaneously contract edges at all vertices from @xmath275 to shorten all cycles in @xmath233 .",
    "furthermore , the degree of each non - isolated vertex in the multigraph @xmath279 is comparable to its degree in @xmath229 .",
    "[ lemma : mainstep ] let @xmath290 .",
    "let @xmath29 be a set of edge - disjoint cycles on vertex set @xmath88 of length at most @xmath291 such that @xmath121 is planar and let @xmath154 be a partition that is good for @xmath29 .",
    "there exists a set @xmath129 of size @xmath289 , a set of vertices @xmath292 , and a partition @xmath230 that is good for @xmath133 , such that    * @xmath230 is obtained from @xmath154 by setting for every vertex @xmath37 , @xmath293 * @xmath275 is an independent set in @xmath294 , * every vertex in @xmath275 is well - contractible in @xmath294 , * every cycle in @xmath133 that is not a self - loop contains a vertex from @xmath275 , and * every non - isolated vertex @xmath34 from @xmath294 satisfies @xmath295 .",
    "let @xmath211 be the subset of cycles from @xmath29 that are self - loops in @xmath166 and let @xmath296 .",
    "if @xmath297 , then we choose @xmath298 , @xmath299 and @xmath230 as in the lemma to satisfy the properties of lemma  [ lemma : mainstep ] .    it remains to consider the case that @xmath300 , in which case we select @xmath301 .",
    "we first set @xmath302 and then iteratively modify @xmath230 such that it remains a good partition for the current set of cycles and can be obtained as the statement of the lemma specifies .",
    "we modify @xmath230 in the way described earlier in the case of deletions of cycles .",
    "first , we set @xmath303 for every vertex @xmath37 with degree @xmath93 in @xmath304 .",
    "then we apply lemma [ lemma : small - vertices ] with @xmath305 and @xmath230 to obtain a set of cycles @xmath306 of size @xmath289 , such that every cycle from @xmath307 contains at least one vertex with at most 6 distinct neighbors . in order to maintain the first property in the lemma statement ,",
    "we modify @xmath230 by setting @xmath308 for new isolated vertices in @xmath309 . note that after the modification every cycle from @xmath307 still contains at least one vertex with at most 6 distinct neighbors .",
    "next , we apply lemma [ lemma : contractible - vertices ] to @xmath306 and the current @xmath230 .",
    "we obtain sets @xmath310 and @xmath311 .",
    "@xmath310 is the set of vertices that have at most @xmath312 distinct neighbors in @xmath313 .",
    "@xmath314 and every cycle in @xmath315 contains a vertex from @xmath310 that is well - contractible",
    ". then we apply lemma [ lemma : transformation ] to @xmath315 to obtain the final set of cycles @xmath316 .",
    "we modify @xmath230 as before , by setting @xmath317 for new isolated vertices in @xmath294 .",
    "clearly , @xmath133 and @xmath230 satisfy the first and the fifth property specified in the lemma .",
    "we set @xmath275 to be any maximal independent subset of vertices in @xmath310 that are well - contractible in @xmath294 .",
    "this ensures both the second and third property .",
    "it remains to show that the fourth property is satisfied . by the construction of @xmath133 , every cycle @xmath277 contains a vertex @xmath318 that is well - contractible in @xmath294 . if @xmath280 , we are done",
    "otherwise , since @xmath275 is maximal , we know that a neighbor of @xmath34 in @xmath294 is in @xmath275 . by the definition of well - contractible vertices , this neighbor is also in @xmath158 , which completes the proof of the lemma .",
    "we are ready to complete the proof of lemma [ lemma : second_reduction ] . for a planar graph @xmath40 ,",
    "let @xmath29 be a set of @xmath106 odd - length cycles in @xmath0 and let @xmath154 be a partition that is good for @xmath29 such that all cycles in @xmath166 have length at most @xmath319 .",
    "we first apply lemma [ lemma : mainstep ] to obtain the sets @xmath133 and @xmath275 and the partition @xmath230 .",
    "we set @xmath320 .",
    "now we consider all vertices in @xmath275 and contract each of them into one of its neighbors .",
    "this construction is well - defined since @xmath275 is an independent set by the second property of lemma [ lemma : mainstep ] . for each vertex @xmath321 , we select one of its neighbors in @xmath322 and call it @xmath323 .",
    "we want to contract all edges @xmath324 .",
    "a refinement @xmath190 of @xmath230 is created as follows . for each vertex @xmath321 and for each vertex @xmath325 , we set @xmath326 . for all other vertices",
    "@xmath33 , we set @xmath327",
    ". one can easily verify that the resulting mapping @xmath190 is a good partition for @xmath191 .",
    "our next step is to argue that the length of the cycles in @xmath192 is at most @xmath193 .",
    "we first note that the fourth property in the statement of lemma [ lemma : mainstep ] ensures that every cycle @xmath328 that is not a self - loop contains a vertex @xmath321 .",
    "this vertex is well - contractible in @xmath329due to the third property  and our construction above contracts an edge in @xmath158 incident to this vertex .",
    "therefore , to complete the proof , we only need to argue that if * random - walk*@xmath194 finds an odd - parity cycle with probability @xmath60 , then the probability that * random - walk*@xmath195 finds an odd - parity cycle is also @xmath60 .    each edge @xmath89 in @xmath330 belongs to a cycle @xmath331 in @xmath192 . by our construction ,",
    "a given edge @xmath89 was either already present in @xmath164 , or is a result of a contraction and there is a vertex @xmath332 such that @xmath333 and @xmath334 are edges of @xmath164 .",
    "note that in either case , the parity of the corresponding path from @xmath37 to @xmath34 is maintained .",
    "the probability to move from @xmath37 to @xmath34 via edge @xmath89 in @xmath330 is @xmath335 .",
    "if @xmath89 was already present in @xmath336 , then the probability to move from @xmath37 to @xmath34 via edge @xmath89 in @xmath336 is @xmath337 .",
    "the case that @xmath89 corresponds to @xmath333 and @xmath334 in @xmath336 is more complicated since parallel edges become relevant . since @xmath173 is a well - contractible vertex in @xmath279 , we know that all cycles in @xmath233 that pass through @xmath173 also go through @xmath37 and @xmath34 , and all contain copies of the edges @xmath333 and @xmath334",
    "let us fix a copy of @xmath333 and call it @xmath338 . in this case , the probability to move in @xmath336 from @xmath37 to @xmath34 through edge @xmath338 in two steps is @xmath339 , since the probability to move along @xmath338 is @xmath337 and the probability to take a copy of @xmath334 is @xmath340 .",
    "if we combine these arguments with the fifth property specified in lemma [ lemma : mainstep ] , we conclude that the probability to move from @xmath37 to @xmath34 along edge @xmath89 in @xmath330 differs from the probability to do the corresponding move in @xmath336 by at most a factor of @xmath341 .",
    "we further conclude inductively that if a random walk in @xmath330 moves in @xmath342 steps from vertex @xmath37 to vertex @xmath34 with probability @xmath343 , then the same movement happens in @xmath336 with probability @xmath344 .",
    "furthermore , by definition of well - contractible vertices , if the walk in @xmath330 contains a cycle of odd parity , then so does the corresponding walk in @xmath336 .",
    "it remains to address the probability of choosing @xmath37 as the starting vertex . since we may contract many vertices into @xmath37 during our construction",
    ", the probability of choosing @xmath37 as a starting vertex in @xmath330 can be significantly greater than the probability of choosing @xmath37 in @xmath336 .",
    "to this end , recall that the probability to choose @xmath37 as a starting vertex is @xmath345 .",
    "we note that with probability @xmath346 we sample either @xmath37 or a vertex @xmath347 that is contracted into @xmath37 , i.e. , a vertex @xmath173 with @xmath348 . by the definition of well - contractible vertices , the probability to move from @xmath173 to @xmath37 in the first step of the random",
    "walk is at least @xmath340 . summing up over all starting vertices ( including @xmath37 ) ,",
    "we obtain that we end up at @xmath37 ( either in step 1 or 2 of the random walk ) with probability at least @xmath349 .",
    "thus , for every walk that happens in @xmath330 with probability @xmath350 there is a ( set of ) walks in @xmath336 such that one of them happens with probability @xmath351 .",
    "furthermore , if the walk in @xmath330 contains an odd - parity cycle then so does the walk in @xmath336 . for different walks in @xmath330 , the sets of corresponding walks in @xmath336",
    "are disjoint .",
    "we do not double count and our result follows by observing that the walk in @xmath336 has length at most @xmath352 . @xmath353",
    "while throughout the paper we focused on testing bipartiteness of planar graphs , our techniques can easily be extended to any class of minor - free graphs . recall that a graph @xmath70 is called a _ minor _ of a graph @xmath0 if @xmath70 can be obtained from @xmath0 via a sequence of vertex and edge deletions and edge contractions .",
    "for any graph @xmath70 , a graph @xmath0 is called _ @xmath70-minor - free _ if @xmath70 is not a minor of @xmath0 .",
    "( for example , by kuratowski s theorem , a graph is planar if and only if it is @xmath354-minor - free and @xmath355-minor - free . )",
    "let us fix a graph @xmath70 and consider the input graph @xmath0 to be an @xmath70-minor - free graph .",
    "we now argue now that entire analysis presented in the previous sections easily extends to testing bipartiteness of @xmath0 .",
    "the key observation is that our analysis in sections [ sec : preliminaries][sec : proof - of - lemma : second_reduction ] relies only on the following properties of planar graphs :    1 .",
    "the number of edges in a planar graph is @xmath356 , where @xmath4 is the number of vertices ( fact [ fact : planar_limited_edges ] ) , 2 .",
    "every minor of a planar graph is planar ( fact [ fact : planar_minor_planar ] ) , 3 .   a direct implication of the klein - plotkin - rao theorem for planar graphs ( lemma [ lemma : partition - into - conn - comp - of - small - diam ] ) .",
    "the first two properties hold for any class of @xmath70-minor - free - graphs ( that is , the second property would be that every minor of an @xmath70-minor - free - graph is @xmath70-minor - free ) . since the klein - plotkin - rao theorem holds for any minor - free graph as well ( cf .",
    "@xcite ) , so does a version of lemma [ lemma : partition - into - conn - comp - of - small - diam ] with a slightly different constant hidden by the big @xmath46 notation .",
    "therefore , we can proceed with nearly identical analysis for @xmath70-minor - free graphs and arrive at the following version of theorem [ thm : main - bipartiteness ] .",
    "[ thm : main - bipartiteness - minor - free ] let @xmath70 be a fixed graph .",
    "there are positive functions @xmath56 and @xmath57 such that for any @xmath70-minor - free - graph @xmath0 :    * if @xmath0 is bipartite , then * random - bipartiteness - exploration*@xmath53 accepts @xmath0 , and * if @xmath0 is @xmath2-far from bipartite , then * random - bipartiteness - exploration*@xmath53 rejects @xmath0 with probability at least @xmath58 .",
    "in this paper we proved that bipartiteness is testable in constant time for arbitrary planar graphs .",
    "our result was proven via a new type of analysis of random walks in planar graphs .",
    "our analysis easily carries over to classes of graphs defined by arbitrary fixed forbidden minors .",
    "a.  bogdanov , k.  obata , and l.  trevisan .",
    "a lower bound for testing 3-colorability in bounded - degree graphs . _ in proceedings of the  43rd ieee symposium on foundations of computer science ( focs ) _ , pp . 93102 , 2002 .",
    "a.  hassidim , j.  a. kelner , h.  n. nguyen , and k.  onak .",
    "local graph partitions for approximation and testing .",
    "_ in proceedings of the  50th ieee symposium on foundations of computer science ( focs ) _ , pp . 2231 , 2009 ."
  ],
  "abstract_text": [
    "<S> we initiate the study of property testing in _ arbitrary planar graphs_. we prove that _ bipartiteness _ can be tested in constant time : for every planar graph @xmath0 and @xmath1 , we can distinguish in constant time between the case that @xmath0 is bipartite and the case that @xmath0 is @xmath2-far from bipartite . </S>",
    "<S> the previous bound for this class of graphs was @xmath3 , where @xmath4 is the number of vertices , and the constant - time testability was only known for planar graphs with _ bounded degree_. our approach extends to arbitrary minor - free graphs .    </S>",
    "<S> our algorithm is based on random walks . </S>",
    "<S> the challenge here is to analyze random walks for graphs that have good separators , i.e. , bad expansion . </S>",
    "<S> standard techniques that use a fast convergence of random walks to a uniform distribution do not work in this case . </S>",
    "<S> informally , our approach is to self - reduce the problem of finding an odd - length cycle in a multigraph @xmath0 induced by a collection of cycles to the same problem in another multigraph @xmath5 induced by a set of shorter odd - length cycles , in such a way that when a random walk finds a cycle in @xmath5 with probability @xmath6 , then it does so in @xmath0 with probability @xmath7 . </S>",
    "<S> this reduction is applied until the cycles collapse to self - loops , in which case they can be easily detected .    </S>",
    "<S> while the analysis presented in this paper applies only to testing bipartiteness , we believe that the techniques developed will find applications to testing other properties in arbitrary planar ( or minor - free ) graphs , in a similar way as in the past the advances in testing bipartiteness led to the development of testing algorithms for more complex graph properties . </S>"
  ]
}