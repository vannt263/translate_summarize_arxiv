{
  "article_text": [
    "the input - queued crossbar switch has been studied well , especially in the context of unicast traffic .",
    "it is known that 100% throughput can be achieved @xcite , in the sense that as long as no input or output is oversubscribed , traffic can be supported without causing the queues to grow unboundedly . therefore , to serve any admissible unicast traffic , the input - queued crossbar switch does not need to process packets faster than the input line rate , _",
    "i.e. _ the switch does not need _",
    "speedup_.    the extension of the problem to multicast flows , however , is intrinsically more difficult .",
    "@xcite gave a characterization of the rate region achievable in a multicast switch with fanout splitting , and also defined the optimal scheduling policy .",
    "interestingly , this work proved that unlike in the unicast case , 100% throughput can not be achieved for multicast flows in an input - queued switch .",
    "in fact , the minimum speedup needed to achieve 100% throughput grows unboundedly with the switch size .    in this paper",
    ", we discuss the same problem as @xcite , with the following modification .",
    "the inputs are allowed to send linear combinations of cells waiting in the queues , _",
    "i.e. _ , they are allowed to perform linear _ network coding _",
    "@xcite with fanout splitting .",
    "the main contributions of this paper are :    1 .",
    "we show that network coding can in many cases substitute speedup .",
    "we provide a simple graph - theoretic upper bound on speedup .",
    "3 .   we prove an upper bound on speedup of @xmath2 for an arbitrary @xmath0 switch with traffic pattern restricted to unicasts and broadcasts only .",
    "our work builds on the work by sundararajan _",
    "@xcite , @xcite , which gave a graph - theoretic formulation of the rate region of a multicast switch with intra - flow coding using _",
    "enhanced conflict graphs_. given a traffic pattern , the enhanced conflict graph @xmath3 is an undirected graph that contains one vertex for every _",
    "subflow_. consisting of the input @xmath4 and a subset @xmath5 of outputs corresponding to the destination set of the multicast stream .",
    "a subflow of flow @xmath6 is a part of a flow from input @xmath4 that goes to a particular output in @xmath5 .",
    "therefore , a subflow is a 3-tuple @xmath7 consisting of an input @xmath4 , a subset of outputs @xmath5 and one output @xmath8 . ]",
    "an edge exists between two vertices if they represent two subflows from the same input or to the same output .",
    "reference @xcite shows that the stable set polytope and the fractional stable set polytope of an enhanced conflict graph are the rate region and the admissible region of a network coding switch , respectively .",
    "this graph - theoretic formulation helps us transform any given traffic pattern into a conflict graph , and the properties of this graph can be used to derive insight on the speedup required to achieve 100% throughput with coding .",
    "a similar graph - theoretic formulation was used by caramanis _",
    "_ in @xcite in the context of unicast traffic in banyan networks .",
    "note that , for the case of fanout splitting without coding , @xcite gave a characterization of the rate region as the convex hull of certain modified departure vectors .",
    "however , a graph - theoretic formulation of the same is not known . as a result , it is significantly harder to characterize the speedup required to achieve 100% throughput for fanout splitting without coding .    the rest of the paper is organized as follows . section [ def ] states preliminary definitions that will be used throughout this paper .",
    "section [ codingvspeedup ] shows that network coding is equivalent to speedup in a multicast switch to some extent .",
    "section [ speed_ratio ] gives the relationship between speedup and imperfection ratio of a conflict graph , which leads to our main result - an upper bound on the minimum speedup required to achieve 100% throughput in a multicast switch with coding . in section [ kxn ] ,",
    "we apply the result from section [ speed_ratio ] to a @xmath0 switch with traffic consisting only of unicasts and broadcasts and give an upper bound on speedup of @xmath9 .",
    "finally , in section [ conclusion ] , we summarize the contributions of this paper , and present a conjecture on the actual minimum speedup needed to achieve 100% throughput in a @xmath10 multicast switch with unicasts and broadcasts only .",
    "let @xmath11 be an undirected graph with vertex set @xmath12 and edge set @xmath13 .",
    "a graph @xmath14 is a subgraph of @xmath15 if @xmath16 and @xmath17 .",
    "a graph @xmath18 is an _ induced subgraph _ of @xmath15 if @xmath19 and @xmath20 if and only if @xmath21 . in addition , @xmath22 is often denoted as @xmath23 and is said to be induced by @xmath24 .",
    "the _ complement _ of graph @xmath15 is a graph @xmath25 on the same vertex set @xmath12 such that two vertices of @xmath25 are adjacent if and only if they are not adjacent in @xmath15 .",
    "the _ chromatic number _ of a graph @xmath15 is the smallest number of colors @xmath26 needed to color the vertices of @xmath15 so that no two adjacent vertices share the same color .",
    "@xmath15 is a _ complete graph _",
    "if for every pair of vertices in @xmath12 there exists an edge connecting the two , and @xmath12 is called a _ clique_. if for every pair of vertices in @xmath12 there is no edge connecting the two , then @xmath12 is said to be a _",
    "stable set_. @xmath15 is a _ hole _ if it is a chordless cycle ; @xmath15 is called an _ odd hole _ if it is a hole of odd length at least 5 .",
    "@xmath15 is an _ anti - hole _ if its complement is a hole ; @xmath15 is an _ odd anti - hole _ if its complement is an odd hole .",
    "@xmath15 is said to be _ perfect _ if for every induced subgraph of @xmath15 , the size of the largest clique equals the chromatic number .",
    "the _ stable set polytope",
    "_ @xmath27 of a graph @xmath15 is the convex hull of the incidence vectors of the stable sets of the graph @xmath15 . in this section ,",
    "we discuss how the stable set polytope of a conflict graph can translate to the rate region of a switch .",
    "let @xmath28 be the _ rate vector _ of a traffic pattern that has @xmath29 flows .",
    "suppose that the total number of subflows in the pattern is @xmath30 .",
    "then , the _ enhanced rate vector _ @xmath31 corresponding to @xmath32 is defined as : @xmath33 we use the enhanced rate vector as _ weights _ for vertices of the enhanced conflict graph .    a traffic pattern @xmath32 is said to be _ achievable _ if there exists a switch schedule that can serve it ; it is called _ admissible _ if no input or output is oversubscribed .",
    "we also call the collection of all achievable and admissible vectors as the _ achievable rate region _ @xmath34 and _ admissible rate region _ @xmath35 respectively . for @xmath36 , we can construct a switch schedule , which can be viewed as a time sharing between valid switch configurations . in a conflict graph",
    ", a valid switch configuration corresponds to a stable set , and a switch schedule corresponds to a convex combination of stable sets of the conflict graph @xmath15 .",
    "therefore , if a rate vector @xmath37 , then @xmath38 .    for a general graph @xmath15 ,",
    "a complete characterization of @xmath27 in terms of linear inequalities is unknown .",
    "however , several families of necessary conditions are known .",
    "one example is the clique inequalities .",
    "the polytope described by these conditions along with non - negativity constraints is the _ fractional stable set polytope _ @xmath39 . in terms of the switch",
    ", @xcite shows that the clique inequalities of the enhanced conflict graph correspond to the _ admissibility conditions_. therefore , if a rate vector @xmath40 , then @xmath41 .",
    "note that , for most graphs , @xmath42 , since the clique inequalities are necessary but not sufficient conditions for stable set polytope .",
    "thus , the admissible region is often a strict superset of the achievable rate region , which implies that it is not possible to achieve 100% throughput even with fanout splitting and coding - we need speedup .      in this section ,",
    "we focus on the properties of perfect graphs .",
    "we first start by stating three well - known facts that characterize perfect graphs .",
    "[ weak]_(weak perfect graph theorem @xcite ) a graph @xmath15 is perfect if and only if its complement is perfect . _",
    "[ strong]_(strong perfect graph theorem @xcite ) a graph @xmath15 is perfect if and only if it contains no odd hole and no odd anti - hole . _",
    "[ replication]_(replication lemma @xcite ) let @xmath3 be a perfect graph and @xmath43 . create a new vertex @xmath44 and join it to @xmath45 and to all the neighbors of @xmath45 .",
    "then , the resulting graph @xmath46 is perfect . _    from section [ ssp ]",
    ", we have that @xmath47 for any graph with equality for perfect graphs only .",
    "this implies that the admissible region @xmath48 and the achievable rate region @xmath49 are the same if the enhanced conflict graph is perfect .",
    "thus , as given in _",
    "corollary 1 _ from @xcite , if an enhanced conflict graph is perfect , then speedup is not required to achieve 100% throughput .    from this , we can observe that there is an intrinsic connection between speedup and the `` perfectness '' of the enhanced conflict graph . as a result , to compute the minimum speedup ,",
    "it is helpful to measure how perfect an enhanced conflict graph is . in this paper",
    ", we use the _ imperfection ratio _ introduced by gerke and mcdiarmid @xcite as such a measure .      in @xcite , the imperfection ratio @xmath50 of graph @xmath15",
    "is defined as @xmath51 . as we noted in section [ ssp ] , in terms of a switch ,",
    "the admissible region @xmath48 and the achievable region @xmath49 are projections of @xmath39 and @xmath27 respectively .",
    "therefore , given the imperfection ratio @xmath50 of an enhanced conflict graph @xmath15 , we have @xmath52 .    a useful bound on the imperfection ratio",
    "is presented in @xcite , which we reproduce below .",
    "[ a / b ] _",
    "( gerke and mcdiarmid @xcite ) for a graph @xmath15 , if each vertex in @xmath15 can be covered @xmath53 times by a family of @xmath54 induced perfect subgraphs , then @xmath55 . _",
    "a switch is said to have a _ speedup _",
    "@xmath56 if the switching fabric can transfer packets at a rate @xmath56 times the incoming and outgoing line rate of the switch . if we define a time slot to be the reciprocal of the line rate , then this means the switching fabric can go through @xmath56 configurations within one time slot . with this definition , it is easy to see that a rate vector @xmath32 is achievable with speedup @xmath56 if and only if it is admissible and @xmath57 is within the rate region .",
    "note that the admissible and achievable rates correspond to @xmath48 and @xmath49 respectively .",
    "then , @xmath58 is the _ minimum speedup _ required for the switch to achieve all admissible rates , _",
    "i.e. _ it is the minimum of all @xmath56 such that @xmath57 is within the rate region for all admissible rate vectors @xmath32 .",
    "in this section , we show the equivalence between network coding and speedup in multicast switches - _ i.e. _ network coding , which is usually implemented using software , can in many cases substitute speedup , which is often achieved by adding extra switch fabrics .    in figure",
    "[ benefit ] , we show a special traffic pattern in a @xmath59 switch , which demonstrates the benefit of intra - flow coding . at input 1 ,",
    "there is one broadcast flow with rate @xmath60 ; at input 2 , there is one unicast to each output with rate @xmath61 .",
    "reference @xcite shows that this traffic is achievable if network coding with fanout splitting is allowed ; however , a speedup of @xmath62 is needed if only fanout splitting is allowed .",
    "this example shows that network coding is equivalent to a speedup of at least @xmath62 .        however , it is important to note that network coding can not completely replace speedup .",
    "as noted above in figure [ benefit ] , there are situations where network coding reduces speedup ; however , there are situations where speedup needed remains the same for with and without network coding .",
    "for instance , in figure [ 5/4 ] , we show a traffic pattern that requires speedup of 1.25 with or without network coding . at input 1",
    ", there is a broadcast flow and a unicast to output 1 with rate @xmath63 each ; at input 2 , there is one unicast flow to each output 2 and 3 with rate @xmath63 . in figure",
    "[ 5/4 ] , we show that the enhanced conflict graph for this traffic , where @xmath64 represents the unicast flow from input @xmath4 to output @xmath65 , and the vertex @xmath66 represents the broadcast subflow from input @xmath4 to output @xmath65 .",
    "the enhanced conflict graph contains an odd hole ; therefore , it is not perfect .",
    "note that the traffic pattern in figure [ 5/4 ] gives a lower bound on the speedup needed to achieve 100% throughput in a multicast switch using network coding .",
    "therefore , @xmath67 .",
    "this section develops our main result , which relates speedup with imperfection ratio .",
    "note that , the definition of imperfection ratio in section [ impratio ] is very similar to that of minimum speedup in section [ speedup ] . as a result ,",
    "corollary [ main ] follows from proposition [ a / b ] .",
    "[ main ] _ given a traffic pattern , let @xmath15 be its enhanced conflict graph and @xmath68 be the minimum speedup required to achieve all admissible rates . then , @xmath69 . _    note that the converse of corollary [ main ] is not true",
    "this is because @xmath48 and @xmath49 are projections of @xmath39 and @xmath27 such that the subflows corresponding to the same multicast flow have the same weight . as a result",
    ", @xmath70 implies the @xmath52 , but @xmath71 may not imply @xmath72 .",
    "in this section , we apply corollary [ main ] to @xmath0 switches using intra - flow coding with traffic patterns consisting of unicasts and broadcasts only .",
    "we show that the minimum speedup needed for 100% throughput in this case is bounded by @xmath9 . in this section",
    ", coding implies intra - flow coding , since enhanced conflict graphs handle intra - flow , not inter - flow , coding .",
    "the rest of this section is organized as follows .",
    "first , we give a description of the enhanced conflict graph for a @xmath0 switch . in section [ 2k-1 ] and [ 2n ] ,",
    "we show the two bounds on speedup of @xmath73 and @xmath74 respectively .",
    "consider traffic patterns which consist only of unicasts and a broadcast per each input on a @xmath0 switch .",
    "the basic idea behind conflict graph is that vertices representing flows that can not be served simultaneously are adjacent .",
    "in such a case , the enhanced conflict graph @xmath75 has the following structure .",
    "the vertex set @xmath76 } u_i\\right ) \\cup \\left(\\cup_{i \\in [ 1,k ] } b_i\\right)= \\left(\\cup_{j \\in [ 1 , n ] } u^o_j\\right ) \\cup \\left(\\cup_{j \\in [ 1,n ] } b^o_j\\right)$ ] where @xmath77\\}$]$ ] means @xmath65 can be integer from 1 to @xmath78 . ] , @xmath79\\}$ ] , @xmath80\\}$ ] , and @xmath81\\}$ ] .",
    "the vertex @xmath64 represents the unicast flow from input @xmath4 to output @xmath65 , and the vertex @xmath66 represents the broadcast subflow from input @xmath4 to output @xmath65 .",
    "therefore , @xmath82 and @xmath83 are collections of the unicast flows from input @xmath4 and to output @xmath65 respectively . @xmath84 and @xmath85 are collections of the subflows of the broadcast from input @xmath4 and to output @xmath65 respectively .",
    "the edge set @xmath86 } e^u_i\\right ) \\cup \\left(\\cup_{i \\in [ 1 , k ] } e^b_i\\right ) \\cup e^o$ ] where @xmath87\\}$ ] , @xmath88\\}$ ] , and @xmath89 } e^o_i$ ] where @xmath90\\}$ ] .",
    "each edge set represents a different type of conflict .",
    "@xmath91 represents conflicts among unicasts at input @xmath4 ; @xmath92 represents conflict between any broadcast subflow and any unicast at input @xmath4 ; and @xmath93 represents conflicts among all flows and subflows at output @xmath4 .",
    "it is important to note that each vertex in @xmath94 represents a subflow in a @xmath0 switch .",
    "for example , @xmath95 and @xmath96 corresponds to a unicast traffic to output 1 from input 1 and input 2 respectively .",
    "the vertex @xmath97 represents a partial service of the broadcast from input 1 to output 2 . in figure",
    "[ exconfiguration ] , we show the switch configuration corresponding to @xmath95 , @xmath96 , and @xmath97 in a @xmath98 switch .",
    "the intuition behind a conflict graph is that vertices which represent flows that can not be served simultaneously are adjacent .",
    "as shown in @xcite , if fanout splitting and network coding are allowed , the switch can simultaneously serve two or more subflows of the same broadcast flow and hence such subflows are not adjacent to each other .",
    "for example , in figure [ ecg ] , there are edges between @xmath95 and @xmath97 , since they conflict at input 1 , and between @xmath95 and @xmath96 , since they conflict at output 1 ; however @xmath96 and @xmath97 are not adjacent , since they have different input and output .",
    "therefore , from the input perspective , @xmath94 consists of @xmath99 induced complete subgraphs @xmath100 for unicasts from each input @xmath4 , and @xmath99 induced stable sets @xmath101 for broadcasts from each input @xmath4 ; from the output perspective , @xmath94 consists of @xmath102 induced complete subgraphs @xmath103 and @xmath104 for unicasts and broadcast subflows to each output @xmath65 respectively .    here , we note that conflict graph of a @xmath0 multicast switch with unicasts and broadcasts traffic can be relaxed to that of unicasts and single multicast per input .",
    "this relaxation just removes vertices that represent broadcast subflows , which are not part of the multicast flow , from the conflict graph .",
    "this can not hurt the `` perfectness '' of the conflict graph .",
    "therefore , any upper bound on the imperfection ratio of the conflict graph for unicasts and broadcasts bounds that of unicasts and single multicast per input .      in this section ,",
    "we give an upper bound on speedup for @xmath0 switches .",
    "we present @xmath105 induced perfect subgraphs of @xmath94 that cover @xmath12 @xmath99 times . then , with proposition [ a / b ] , we then have @xmath73 as an upper bound for speedup .    [ unicasts ]",
    "_ let @xmath106 } u_i)$ ] be an induced subgraph of @xmath94",
    ". then @xmath107 is perfect .",
    "_    @xmath107 is an enhanced conflict graph for unicast traffic .",
    "one may check that @xmath107 is a line graph of a bipartite graph , which is known to be perfect @xcite .",
    "lemma [ unicasts ] also follows from the result in @xcite which shows that 100% throughput can be achieved in a input - queued crossbar switch in the context of unicast traffic .",
    "[ umm ] _ let @xmath108 } b_j ) \\cup u_i\\right)$ ] for some @xmath109 $ ] be an induced subgraph of @xmath94",
    ". then @xmath110 is perfect .",
    "_    assume that @xmath111 is not perfect .",
    "so it must have an odd hole or odd anti - hole as an induced subgraph .",
    "suppose it has an odd hole , say @xmath112",
    ". in @xmath111 , any broadcast subflow , except the ones from input @xmath4 , has no conflict on the input side .",
    "suppose such a subflow were part of @xmath112 , then both its neighbors in @xmath112 will be due to output side conflicts .",
    "but in that case , the two neighbors will themselves conflict at the output , thereby forming a triangle .",
    "since an odd hole can not contain a triangle , we conclude that @xmath112 can not include any @xmath113 , @xmath114 .",
    "this means @xmath112 must be an induced subgraph of @xmath115 .",
    "however , @xmath84 induces a stable set , while @xmath82 induces a clique .",
    "therefore , @xmath116 is a split graph which is known to be perfect @xcite .",
    "this contradiction shows that @xmath111 can not contain an odd hole @xmath112 .",
    "suppose @xmath111 contains an odd anti - hole , say @xmath117 .",
    "this will happen if and only if @xmath118 contains an odd hole @xmath119 .",
    "note that in @xmath118 , two vertices are connected if the corresponding subflows do not conflict .",
    "now , @xmath119 has to contain at least one unicast , say @xmath64 , since the broadcasts by themselves induce a perfect subgraph in @xmath118 ( they induce the complement of a disjoint union of complete graphs , which is known to be perfect @xcite ) .",
    "now , @xmath64 in @xmath118 is adjacent to any @xmath120 , where @xmath121 and @xmath122 .",
    "let @xmath123 and @xmath124 be vertices adjacent to @xmath64 in @xmath119 . then , using the definition of @xmath118 , we can infer that @xmath125 and @xmath126 .",
    "but this means , any vertex that is adjacent to @xmath123 is also adjacent to @xmath124 .",
    "hence , @xmath119 can not be an odd hole .",
    "this proves that @xmath111 is perfect .",
    "using lemmas [ unicasts ] and [ umm ] , we derive our first upper bound on speedup in @xmath0 multicast switches with traffic patterns consisting of unicasts and broadcasts only .",
    "[ 2k-1/k ] _ @xmath127 .",
    "_    consider the following collection of induced subgraphs : @xmath128 copies of @xmath107 from lemma [ unicasts ] and @xmath111 from lemma [ umm ] for all @xmath109 $ ] .",
    "we know that these subgraphs are all perfect .",
    "in addition , these subgraphs cover each vertex in @xmath129 @xmath99 times . by proposition [ a / b ] ,",
    "the claim follows .",
    "the proof idea in this section is similar to that of section [ 2k-1 ] .",
    "we present @xmath102 induced perfect subgraphs of @xmath94 that cover @xmath12 @xmath130 times , and then appeal to proposition [ a / b ] .",
    "however , unlike section [ 2k-1 ] , here we change our focus from the input to output .",
    "[ outunicasts ] _ let @xmath131 where @xmath132 } b^o_j\\right)$ ] be an induced subgraph of @xmath94",
    ". then @xmath133 is perfect .",
    "_    assume that @xmath133 is not perfect .",
    "so it must have an odd hole or odd anti - hole as an induced subgraph .",
    "suppose it has an odd hole , say @xmath112 .",
    "since @xmath134 forms a complete graph ( known to be perfect ) , @xmath112 must contain vertices of @xmath85 , @xmath135 .",
    "suppose @xmath136 is part of @xmath112 , then @xmath112 contains at least two vertices of @xmath85 .",
    "this is because , in @xmath133 , @xmath137 has only one conflict on the input side ; thus , neighbors of @xmath137 are @xmath138 ( input conflict ) and @xmath85 ( output conflict ) .",
    "however , note that @xmath85 itself forms a complete graph , therefore @xmath112 contains at most two vertices of @xmath85 .",
    "thus , @xmath137 and @xmath139 , @xmath140 are in @xmath112",
    ". then , @xmath138 and @xmath141 are in @xmath112 .",
    "however , these four vertices form a cycle , thus @xmath133 can not contain an odd hole @xmath112 .    by the same argument as in the proof for lemma [ umm ]",
    ", we can show that @xmath133 can not contain an odd anti - hole .",
    "[ outuum ] _ let @xmath142 where @xmath143 } u^o_j \\right)$ ] be an induced subgraph of @xmath94 .",
    "then , @xmath144 is perfect .",
    "_    @xmath144 is an enhanced conflict graph for unicast traffic in addition to all broadcast subflows to output @xmath4 .",
    "consider @xmath145 and @xmath146 } u_i$ ] . in a @xmath0 switch ,",
    "@xmath147 and @xmath148 represent subflows from input 1 to output @xmath4 , and thus conflict with the same set of subflows , _",
    "i.e. _ neighbors of @xmath148 are neighbors of @xmath147 .",
    "in addition , @xmath147 and @xmath148 are in conflict .",
    "therefore , by replication lemma ( lemma [ replication ] ) , we know that @xmath144 is perfect if @xmath149 is perfect .",
    "we can apply this argument repeatedly for each @xmath150 , and deduce that if @xmath151 } u^o_j)$ ] perfect then @xmath144 is perfect .",
    "note that from lemma [ unicasts ] , we know that the enhanced conflict graph @xmath106 } u_i ) = g_{k , n}(\\cup_{j \\in [ 1,n ] } u^o_j)$ ] for unicast traffic is perfect",
    ". therefore , @xmath144 is perfect .",
    "now , using lemmas [ outunicasts ] and [ outuum ] , we can derive an upper bound for speedup in @xmath0 multicast switches with traffic patterns consisting of unicasts and broadcasts only .",
    "[ 2n / n+1 ] _ @xmath152 .",
    "_    consider the following collection of induced subgraphs : @xmath133 and @xmath144 for all @xmath153 $ ] . by lemmas [ outunicasts ] and [ outuum ] , we know that these subgraphs are all perfect .",
    "in addition , these subgraphs cover each vertex in @xmath154 @xmath130 times . by proposition [ a / b ]",
    ", the claim follows .",
    "in this paper , we introduce a simple graph theoretic bound on speedup needed to achieve 100% throughput in a multicast network coding switch using the concept of conflict graphs .",
    "we show that the imperfection ratio of the conflict graph gives an upper bound on speedup .",
    "we apply this result to @xmath0 switches with traffic patterns consisting of unicasts and broadcasts only to obtain an upper bound of @xmath1 . for a @xmath59 switch",
    ", this gives a bound of 3/2 on speedup ; however , we conjecture that the actual speedup required to achieve 100% throughput in a @xmath59 switch with traffic patterns consisting of unicasts and broadcasts only is 5/4 .",
    "we have verified this conjecture using a computer for @xmath155 and 5 .    in summary , by allowing network coding in multicast switches ,",
    "we get not only an insightful characterization of the speedup needed for 100% throughput , but also a gain in speedup .",
    "we have shown that network coding , which is usually implemented using software , can substitute speedup , which is often achieved by adding extra switch fabrics .",
    "this material is based upon research partly supported by stanford university under the complex network infrastructures for communication and power , sponsor award no .",
    "py-1362 ; university of california under dawn : dynamic adhoc wireless networking , sponsor award no . s0176938 ; air force aerospace research - osr under the robust self - authenticating network coding , sponsor award no",
    ". fa9550 - 06 - 1 - 0155 ; and darpa itmanet .",
    "sundararajan , m. mdard , r. koetter , and e. erez , `` a systematic appraoch to network coding problems using conflict graphs '' , in _ proceedings of the ucsd workshop on information theory and its applications _ , san diego , ca , february 2006 .      c. caramanis , m. rosenblum , m. x. goemans , and v. tarokh , `` scheduling algorithms for providing flexible , rate - based , quality of service guarantees for packet - switching in banyan networks '' , in _ proceedings of the conference on information sciences and systems _ , 2004 , pp .",
    "160 - 166 .",
    "m. a. marsan , a. bianco , p. giaccone , e. leonardi , and f. neri , `` multicast traffic in input - queued switches : optimal scheduling and maximum throughput '' , _ ieee / acm trans .",
    "465 - 477 , 2003 ."
  ],
  "abstract_text": [
    "<S> we present a graph theoretic upper bound on speedup needed to achieve 100% throughput in a multicast switch using network coding . by bounding speedup , we show the equivalence between network coding and speedup in multicast switches - _ i.e. _ network coding , which is usually implemented using software , can in many cases substitute speedup , which is often achieved by adding extra switch fabrics . </S>",
    "<S> this bound is based on an approach to network coding problems called the `` enhanced conflict graph '' . </S>",
    "<S> we show that the `` imperfection ratio '' of the enhanced conflict graph gives an upper bound on speedup . </S>",
    "<S> in particular , we apply this result to @xmath0 switches with traffic patterns consisting of unicasts and broadcasts only to obtain an upper bound of @xmath1 . </S>"
  ]
}