{
  "article_text": [
    "a binary matrix has the consecutive ones property ( c1p ) if its columns can be ordered in such a way that all ones in each row are consecutive .",
    "deciding if a matrix has the c1p can be done in linear - time and space  @xcite .",
    "the problem of deciding if a matrix has the c1p has been considered in genomic , for problems such as physical mapping  @xcite or ancestral genome reconstruction  @xcite .",
    "let @xmath1 be a @xmath2 binary matrix .",
    "let @xmath3 be the set of its rows and @xmath4 the set of its columns . its _ corresponding bipartite graph _",
    "@xmath5 is defined as follows : @xmath6 , and two vertices @xmath7 and @xmath8 are connected by an edge if and only if @xmath9 = 1 $ ] .",
    "we will refer to the partition @xmath10 and @xmath11 of @xmath12 as black and white vertices , respectively .",
    "the set of neighbors of a vertex @xmath13 will be denoted by @xmath14 .",
    "the @xmath15-the neighborhood of @xmath13 , denoted by @xmath16 , is the set of vertices distance @xmath15 from @xmath13 .",
    "all these sets , for a fixed @xmath13 , can be computed in time @xmath17 using the bread - first search algorithm .",
    "a subgraph of @xmath12 induces by vertices @xmath18 will be denoted by @xmath19 $ ] .",
    "a set of edges of bipartite graph is called _ induced matching _ if the set of endpoints of these edges induces this matching in the graph .",
    "for example , two edges @xmath20 and @xmath21 , where @xmath22 are in the same partition form an induced matching if @xmath23 and @xmath24 are not edges of the graph .",
    "an _ asteroidal triple _ is an independent set of three vertices such that each pair is connected by a path that avoids the neighborhood of the third vertex .",
    "a _ white asteroidal triple _ is an asteroidal triple on white ( column ) vertices .    the following result of tucker links the c1p of matrices to asteroidal triples of their bipartite graphs .",
    "a binary matrix has the c1p if and only if its corresponding bipartite graph does not contain any white asteroidal triples .",
    "a binary matrix has the c1p if and only if its corresponding bipartite graph does not contain any of the forbidden subgraphs in @xmath25 , depicted in figure  [ fig : forbidden - subgraphs ] .",
    "we will refer to these subgraphs as the type i , ii , iii , iv and v , respectively .",
    "the author in @xcite developed an algorithm for finding one of the obstructions in linear time .",
    "however , their algorithm does not guarantee the minimum size obstruction .",
    "the characterization can be used to determine whether a given binary matrix has the c1p in time @xmath26 , where @xmath27 is the maximum number of ones per row , i.e. , the maximum degree of black vertices in @xmath12 , as explained by the following result in @xcite .",
    "[ l : asteroidal ] a white asteroidal triple @xmath28 with the smallest sum of the three paths ( avoiding the third neighborhood ) can be computed in time @xmath26 .    for practical purposes ,",
    "there is a much faster algorithm that uses pq - trees for determining whether a binary matrix has the c1p , cf .",
    "interest was in finding the smallest submatrix of a non - c1p binary matrix which makes this matrix non - c1p .",
    "he further refined his asteroidal triple characterization using a set of _ forbidden submatrices_. we will state this results in terms of _ forbidden subgraphs_.    we will consider two problems : ( 1 ) detected a smallest forbidden subgraph of each type ( section  [ sec : detect - small - forb - each ] ) , and ( 2 ) detecting a smallest forbidden subgraph of any type ( section  [ sec : detect - small - forb - all ] ) .",
    "we use the followings to improve the complexity :    * in our computation we use degree of each vertex instead the maximum degree @xmath29 . *",
    "we compute some of the necessary sets in advance .",
    "* in our analysis we use the minimum obstruction assumption and explore the connection of vertices around a minimum obstruction with it .",
    ".comparison of our results with the previous results .",
    "[ cols=\"^ , < , < , < \" , ]     note that without loss of generality we can assume that @xmath1 does not contain any all - zero columns or rows , as such columns does not affect whether the matrix has the c1p or the forbidden submatrices of @xmath1 .",
    "it follows that @xmath30 .",
    "we will use this assumption throughout this paper . also note that the number of edges in @xmath12 is the same as the number of ones in @xmath1 , which we denote as @xmath31 . note that @xmath32 and that @xmath33 ( since we assume that there are no all - zero columns or rows in @xmath1 ) .",
    "we will use the following auxiliary lemma .",
    "[ l : induced - matching-2 ] given a bipartite graph @xmath34 with @xmath31 edges and partitions of size @xmath35 and @xmath0 , picking an induced matching of size two of @xmath34 or determining that no such induced matching exists can be done in time @xmath36 .",
    "let @xmath37 be the partition of size @xmath0 .",
    "order vertices of @xmath37 by their degrees : @xmath38 . for every @xmath39 ,",
    "check if @xmath40 is non - empty .",
    "if for some @xmath15 , @xmath41 , then also @xmath42 . in this case , we can pick any @xmath43 and any @xmath44 , and return @xmath45 and @xmath46 , as it forms an induced matching of @xmath34 .",
    "now , assume that for every @xmath15 , @xmath47 , i.e. , @xmath48 .",
    "we will show that there is no induced matching of @xmath34 of size two .",
    "assume for contradiction that @xmath45 and @xmath49 , where @xmath50 , is such an induced matching .",
    "we have @xmath51 , i.e. , @xmath52 , a contradiction . hence , in this case we can report that there is no such matching .",
    "vertices of @xmath37 can be sorted by their degrees in time @xmath53 using a count sort . for each @xmath15 , checking if @xmath54 is non - empty can be done in time @xmath55 , hence , the total time spent on checking is @xmath56 .",
    "we will present four algorithms which find a smallest subgraph of type i , iii , iv and v , respectively , each improving the complexity of the best known such algorithm , cf .",
    "@xcite . for type ii",
    ", we refer reader to the @xmath57 algorithm , however , it is easy to check that their algorithm works in time @xmath57 . ] in  @xcite .",
    "algorithm  [ alg : type1 ] finds a smallest forbidden subgraph of type i in time @xmath58 .    _",
    "correctness of algorithm  [ alg : type1 ] .",
    "_ we are looking for induced cycles of length 6 or more .",
    "for each black vertex @xmath59 and its two neighbors @xmath60 , we find a shortest induced cycle of length at least 6 .",
    "such cycle can not contain any vertex incident with @xmath59 other than @xmath13 and @xmath61 , and any vertex incident with both @xmath13 and @xmath61 other than @xmath59 .",
    "hence , a shortest such cycle @xmath62 can be obtained from the a shortest @xmath63 path @xmath64 in @xmath65 by adding two edges @xmath66 and @xmath67 .",
    "this cycle can not be of length @xmath68 , otherwise @xmath64 would contain a vertex in @xmath69 . it remains to show that @xmath62 is induced .",
    "assume that there is a chord @xmath20 in @xmath62 .",
    "since @xmath64 does not contain @xmath70 , @xmath71 .",
    "hence , we could use the chord as a shortcut to find a shorter cycle containing edges @xmath66 and @xmath67 , and hence , a shorter path between @xmath13 and @xmath61 in @xmath65 , a contradiction .    _ complexity of algorithm  [ alg : type1 ] .",
    "_ we will show that the complexity of algorithm  [ alg : type1 ] is @xmath72 .",
    "the first loop executes @xmath35 times and the second @xmath73 times .",
    "hence , the body of the second loop executes @xmath74 times .",
    "constructing graph @xmath65 takes time @xmath17 and finding a shortest path in @xmath65 can be done in time @xmath17 using the breadth - first search algorithm .",
    "algorithm  [ alg : type3a ] finds a smallest forbidden subgraph of type ii in time @xmath75 .    _",
    "correctness of algorithm  [ alg : type3a ] .",
    "_ let us first verify that the vertices of a shortest path found in line  [ 3a - path ] and @xmath76 induce a subgraph of type iii .",
    "obviously , @xmath13 is connected only to @xmath59 , @xmath59 is not connected to @xmath61 and the last vertex @xmath77 of the path . on the other hand",
    ", @xmath59 must be connected to all other white vertices on the path , since any such white vertex that is not in @xmath78 is in @xmath79 and hence , also @xmath80 , i.e. , we would have a shorter path ending at this vertex . since the path is a shortest path , all black vertices on the path",
    "are connected only to its predecessor and successor on the path .",
    "in addition @xmath81 is connected to @xmath61 and no other black vertex on the path is connected to @xmath61 since @xmath82 does not contain any other neighbors of @xmath61 .",
    "it follows that the vertices @xmath76 and the vertices of a shortest path induce a subgraph of type iii .",
    "second , consider a smallest subgraph of type iii in @xmath12 .",
    "we will show it is considered by the algorithm .",
    "assume the algorithm is in the cycle , where it picked edges @xmath66 and @xmath83 of this subgraph .",
    "then the rest of the vertices must lie in @xmath82 : the remaining black vertices are not connected to @xmath13 and @xmath61 and the remaining white vertices are either in @xmath84 and @xmath77 is @xmath79 .",
    "these vertices together with @xmath81 must form a shortest path from @xmath81 to @xmath85 in @xmath82 , hence , algorithm  [ alg : type3a ] finds this subgraph or a subgraph with the same number of vertices .    _",
    "complexity of algorithm  [ alg : type3a ] .",
    "_ we will show that the complexity of algorithm  [ alg : type3a ] is @xmath86 .",
    "the first loop executes @xmath31 times .",
    "the second loop executes @xmath17 times .",
    "constructing graph @xmath82 takes time @xmath17 . finding a shortest path in @xmath87",
    "can be done in time o(e ) using a breadth - first search algorithm .",
    "algorithm  [ alg : type4 ] determines if @xmath12 contains a forbidden subgraph of type iv in time @xmath88 .",
    "_ correctness of algorithm  [ alg : type4 ] .",
    "_ it is easy to see that once @xmath89 are picked , each of @xmath90 has to belong to computed set @xmath91 , respectively , and that once they are picked from those sets , the returned vertices induce @xmath92 .    _",
    "complexity of algorithm  [ alg : type4 ] .",
    "_ we will show that the complexity of algorithm  [ alg : type4 ] is @xmath93 .",
    "the time complexity of the steps inside the loop depends on degrees of nodes @xmath89 , i.e. , it is @xmath94 .",
    "hence , the overall complexity is @xmath95 .",
    "algorithm  [ alg : type5 ] determines if @xmath12 contains a forbidden subgraph of type v in time @xmath88 .    _",
    "correctness of algorithm  [ alg : type5 ] .",
    "_ it is easy to see that once @xmath89 are picked , each of @xmath96 has to belong to computed set @xmath97 , respectively , and that once they are picked from those sets , the returned vertices induce @xmath98 .    _",
    "complexity of algorithm  [ alg : type5 ] .",
    "_ the complexity of algorithm  [ alg : type5 ] is @xmath99 .",
    "this follows by the same argument as for algorithm  [ alg : type5 ] .",
    "overall , we will use dom et al .",
    "( @xcite ) approach to find the smallest forbidden subgraph in @xmath12 .",
    "we will first find a shortest - paths ( the sum of the lengths of the three paths ) white asteroidal triple @xmath100 in time @xmath101 using the algorithm in @xcite .",
    "a shortest - paths white asteroidal triple @xmath100 must be in @xmath102 , but does not need to be a smallest forbidden subgraph .",
    "let @xmath103 be the sum of the lengths of the three paths of @xmath100 .",
    "if @xmath100 is of      it follows that if one of the smallest forbidden subgraphs is of type i or ii , then each shortest - paths asteroidal triple is of type i or ii and is a smallest forbidden subgraph . for the remaining cases , we need to determine the smallest forbidden subgraphs of type iii , iv and v. however , we only need to find a smallest subgraph of type x if it is a smallest forbidden subgraph . hence , for types iv and v , if we find during the search that there is a smaller forbidden subgraph of some other type , we can stop searching for this type . for type iii ,",
    "since it has a variable size , we can not stop searching , however , we can abandon the branch which would yield a larger or even the same size subgraph of type iii than we have observed .",
    "we will use this in what follows to obtain faster algorithms for types iii , iv and v than the ones presented in the previous section .",
    "algorithm  [ alg : type3-all ] guarantees to find a smallest subgraph of type iii * if * it is smaller than other types of forbidden subgraphs in time @xmath107 .",
    "if there is a smaller subgraph of type i or there is a smaller of same size subgraph of type v in @xmath12 , it either reports that or it could report a subgraph of type iii which is not the smallest .",
    "it will first determine whether @xmath108 is a subgraph of @xmath12 .",
    "if not it continues to the second phase , where it assumes that the smallest subgraph of type iii ( if it exists ) has at least 9 vertices .",
    "_ correctness of algorithm  [ alg : type3-all ] .",
    "_ it is easy to check that the first phase of the algorithm finds @xmath108 subgraph if it exists in @xmath12 .",
    "assume that @xmath108 is not an induced subgraph of @xmath12 .",
    ", i.e. , that a smallest subgraph of type iii ( if it exists ) has at least 9 vertices .",
    "the algorithm continues to the second phase .",
    "first , assume that @xmath15 is not found , i.e. , for all odd @xmath110 , @xmath111 .",
    "this implies that any path starting at @xmath61 in @xmath112 can not be extended with a white vertex @xmath113 that is not adjacent to @xmath59 and not adjacent to the second vertex @xmath114 of this path .",
    "hence , the algorithm correctly continues with examining another selection of vertices @xmath115 .",
    "assume that @xmath15 was found .",
    "now , assume that @xmath12 does not contain edge @xmath116 .",
    "let us verify that vertices @xmath117 and the vertices of @xmath118 induce @xmath119 .",
    "it is clear that @xmath13 is connected only to @xmath59 and @xmath59 only to white vertices on @xmath118 except the first vertex @xmath61 . by the construction",
    ", each vertex on @xmath118 can be adjacent only to its predecessor or successor on @xmath118 . since @xmath15 is the smallest odd integer larger than two such that @xmath120",
    ", @xmath113 is not adjacent to any black vertex on the path other than the last one .",
    "hence , the vertices induce a subgraph of type iii .",
    "finally , assume that @xmath121 .",
    "if @xmath122 , then vertices of @xmath118 without @xmath61 and @xmath113 induce a cycle of length @xmath123 , i.e. , a subgraph @xmath124 , which is smaller than a subgraph of type iii we could get for this selection of @xmath115 ( by choosing a different @xmath125 , @xmath113 or path @xmath118 , or searching for another odd @xmath15 such that @xmath126 ) . if @xmath127 , consider @xmath128 that is not adjacent to @xmath113 and let @xmath129 . if @xmath130 is adjacent to @xmath131 , vertices @xmath132 induce @xmath108 , a contradiction .",
    "hence , assume @xmath133 .",
    "since @xmath134 , there exists @xmath135 adjacent to @xmath130 . if @xmath136 , then vertices @xmath137 induce @xmath98 .",
    "otherwise , vertices @xmath138 induce a cycle of length 6 . in any case",
    ", there exists a subgraph of other type of size equal or smaller than it would be possible to find for this choice of @xmath115 , hence , the algorithm correctly moves to the next choice .",
    "_ complexity of algorithm  [ alg : type3-all ] .",
    "_ we will show that the complexity of algorithm  [ alg : type3-all ] is @xmath139 .",
    "the body of the loop in lines  [ 3-all - ph1-b][3-all - ph1-e ] will execute @xmath140 times and each step of the body take @xmath17 time .",
    "hence , the complexity of the first phase is @xmath141",
    ". the main loop of the second phase will execute @xmath17 times .",
    "determining @xmath142 and @xmath143 takes time @xmath17 . the nested loop in lines",
    "[ 3-all - ph2-y - b][3-all - ph2-y - e ] will execute @xmath144 times .",
    "each step of the body of this loop will take time @xmath17 .",
    "hence , the complexity of the second phase is @xmath107 .",
    "algorithm  [ alg : type4a - all ] finds the subgraph @xmath92 in time @xmath145 , if it exists and if it is a smallest forbidden subgraph .",
    "if there is a smaller forbidden subgraph of type i or iii , it might find an instance of @xmath92 or it might report that there is a smaller forbidden subgraph instead .",
    "[ l : cross - edges ] consider a subgraph @xmath146 of @xmath12 induced by vertices @xmath147 that contains edges @xmath148 and does not contain edges @xmath149 then either @xmath146 is an instance of @xmath92 or @xmath146 contains either @xmath150 , @xmath108 or @xmath151 as an induced subgraph .        if exactly one edge @xmath31 in @xmath160 is present , we have an induced subgraph @xmath108 centered at the vertex @xmath161 .",
    "in particular , vertices @xmath162 , where @xmath163 and @xmath164 , induce @xmath108 .",
    "we can assume that there are at least two edges in @xmath160 present .",
    "we will distinguish two cases .",
    "either ( i ) there exists two edges @xmath31 and @xmath165 in @xmath160 present such that @xmath166 , or ( ii ) for each pair of such edges @xmath167 .",
    "1 .   @xmath176 : without loss of generality we can assume that @xmath177 for @xmath178 present in @xmath146",
    ". then the same collection of vertices as in the case of one edge @xmath31 induces @xmath108 , since one end of @xmath165 lies outside of this collection .",
    "@xmath179 : then the vertices @xmath180 induce @xmath181 , i.e. , @xmath150 .    _",
    "complexity of algorithm  [ alg : type4a - all ] .",
    "_ we will show that the complexity of algorithm  [ alg : type4a - all ] is @xmath182 .",
    "the first loop executes @xmath183 times , determining @xmath184 takes time @xmath185 , determining sets @xmath186 time @xmath17 . the loop for @xmath187",
    "is executed @xmath185 times and each execution takes time @xmath188 , i.e. , the total time spent in this loop is @xmath189 .",
    "algorithm  [ alg : type5a - all ] find the subgraph @xmath98 in time @xmath145 , if it exists and if it is a smallest forbidden subgraph .",
    "if there is a smaller forbidden subgraph of type i or iii , it might find an instance of @xmath98 or it might report that there is a smaller forbidden subgraph instead .    _",
    "correctness of algorithm  [ alg : type5a - all ] .",
    "_ the algorithm is able to reduce time complexity by avoiding trying all possible choices for @xmath190 and @xmath89 , but rather picking one choice ( if possible ) , and then either finding @xmath98 or a smaller forbidden subgraph .",
    "let us verify that decisions algorithm makes are correct :    * first , assume that the algorithm stops in line  [ 5a - all - iii ]",
    ". then there exists @xmath191 ( either @xmath131 or @xmath192 ) .",
    "then there exists @xmath193 , @xmath194 and @xmath195 .",
    "induce @xmath108 . *",
    "assume that the algorithm stops in line  [ 5a - all - i ] .",
    "if @xmath197 and @xmath198 , there exists @xmath199 , @xmath200 , @xmath201 and @xmath202 . note that @xmath203 , @xmath204 , @xmath205 and @xmath206 n(u ) .",
    "it is easy to check that vertices @xmath207",
    "induce @xmath208 .",
    "similarly , if either @xmath209 or @xmath210 , we can find vertices that induce @xmath181 .",
    "* finally , it is easy to check that if the algorithm outputs an induced subgraph in line  [ 5a - all - v ] , it is @xmath98 .",
    "on the other hand , if @xmath98 is a smallest forbidden subgraph of @xmath12 , then the algorithm can not finish in lines  [ 5a - all - iii ] and  [ 5a - all - i ] , and hence , it will eventually output @xmath92 in line  [ 5a - all - v ] .    _",
    "complexity of algorithm  [ alg : type5a - all ] .",
    "_ we will show that the complexity of algorithm  [ alg : type5a - all ] is @xmath211 .",
    "the first loop executes @xmath183 times , determining @xmath184 takes time @xmath185 , picking @xmath190 time @xmath17 , picking @xmath89 time @xmath185 .",
    "hence , the total time used by the algorithm is @xmath212 .        find a smallest white asteroidal triple @xmath100 using lemma  [ l : asteroidal ] let @xmath103 be the sum of the lengths of three paths of @xmath100 find a smallest subgraph of types iii , iv and v ( using the procedures described above ) let @xmath213 be the sizes of these subgraphs ( or @xmath214 if not found ) , respectively    to verify the correctness of algorithm  [ alg : tucker ] , first consider that one of the smallest forbidden subgraphs of @xmath12 is of type i or ii . by the above argument , asteroidal triple @xmath100 is of type i or ii with size @xmath103 , and since it is a smallest forbidden subgraph , we have @xmath215 . hence , the algorithm correctly outputs one of the smallest forbidden subgraphs .",
    "second , assume that all smallest forbidden subgraphs of @xmath12 are of type iii , iv and v. let @xmath216 .",
    "if @xmath100 is of type i or ii , then the size of @xmath100 is @xmath103 , and hence , @xmath217 and @xmath218 .",
    "if @xmath100 is of type iii , iv or v , then @xmath219 , and hence again @xmath220 .",
    "it follows that algorithm  [ alg : tucker ] correctly outputs one of the smallest forbidden subgraphs .",
    "it follows from algorithm  [ alg : tucker ] that we do not need a special detection algorithms for type i and ii forbidden subgraphs .",
    "however , in some applications , there might be a need to determine a smallest forbidden subgraph of each type .",
    "therefore , we present such algorithms for these two types of forbidden subgraphs as well .",
    "zaky adam , monique turmel , claude lemieux , david sankoff : _ common intervals and symmetric difference in a model - free phylogenomics , with an application to streptophyte evolution_. journal of computational biology 14(4 ) : 436 - 445 ( 2007 )          cedric chauve , eric tannier : _ a methodological framework for the reconstruction of contiguous regions of ancestral genomes and its application to mammalian genomes_. plos computational biology 4(11 ) ( 2008 )      m.habib , ross m. mcconnell , christophe paul , laurent viennot : _ lex - bfs and partition refinement , with applications to transitive orientation , interval graph recognition and consecutive ones testing_. theor .",
    "234(1 - 2 ) : 59 - 84 ( 2000 )          jian ma , louxin zhang , bernard b. suh , brian j. raney , richard c. burhans , w. james kent , mathieu blanchette , david haussler , and webb miller1 : _ reconstructing contiguous regions of an ancestral genome_. genomeres 16(12 ) 15571565 ( 2006 )"
  ],
  "abstract_text": [
    "<S> a binary matrix has the consecutive ones property ( c1p ) if its columns can be ordered in such a way that all 1s on each row are consecutive . </S>",
    "<S> these matrices are used for dna physical mapping and ancestral genome reconstruction in computational biology on the other hand they represents a class of convex bipartite graphs and are of interest of algorithm graph theory researchers . </S>",
    "<S> tucker gave a forbidden submartices characterization of matrices that have c1p property in 1972 . </S>",
    "<S> booth and lucker ( 1976 ) gave a first linear time recognition algorithm for matrices with c1p property and then in 2002 , habib , et al . </S>",
    "<S> gave a simpler linear time recognition algorithm . </S>",
    "<S> there has been substantial amount of works on efficiently finding minimum size forbidden submatrix . </S>",
    "<S> our algorithm is at least @xmath0 times faster than the existing algorithm where @xmath0 is the number of columns of the input matrix . </S>"
  ]
}