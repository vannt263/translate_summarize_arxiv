{
  "article_text": [
    "recently , low - density parity - check ( ldpc ) codes have been intensively studied due to their near - shannon - limit performance under iterative belief - propagation decoding .",
    "binary regular ldpc codes were first proposed by gallager in 1963 @xcite . in the last decade the capability of irregular ldpc codes to outperform regular ones in the waterfall region of the performance curve and to asymptotically approach ( or even achieve ) the communication channel capacity has been recognized and deeply investigated ( see for instance @xcite ) .",
    "it is usual to represent an ldpc code as a bipartite graph , i.e. , as a graph where the nodes are grouped into two disjoint sets , namely , the variable nodes ( vns ) and the check nodes ( cns ) , such that each edge may only connect a vn to a cn . the bipartite graph is also known as a tanner graph @xcite . in the tanner graph of an ldpc code , a generic degree-@xmath1 vn can be interpreted as a length-@xmath1 repetition code , as it repeats @xmath1 times its single information bit towards the cns .",
    "similarly , a degree-@xmath2 cn of an ldpc code can be interpreted as a length-@xmath2 single parity - check ( spc ) code , as it checks the parity of the @xmath2 vns connected to it .",
    "the growth rate of the weight distribution of gallager s regular ldpc codes was investigated in @xcite .",
    "the analysis demonstrated that , provided that the smallest vn degree is at least 3 , for large enough codeword length @xmath3 , the expected minimum distance of a randomly chosen code in the ensemble is a linear function of @xmath3 .",
    "more recently , the study of the weight distribution of binary ldpc codes has been extended to irregular ensembles .",
    "important works in this area are @xcite . in @xcite",
    "a complete solution for the growth rate of the weight distribution of binary irregular ldpc codes was developed .",
    "one of the main results of @xcite is a connection between the expected behavior of the weight distribution of a code randomly chosen from the ensemble and the parameter @xmath4 , @xmath5 and @xmath6 being the edge - perspective vn and cn degree distributions , respectively .",
    "more specifically , it was shown that for a code randomly chosen from the ensemble , one can expect an exponentially small number of small linear - weight codewords if @xmath7 , and an exponentially large number of small linear - weight codewords if @xmath8 .",
    "this result establishes a connection between the statistical properties of the weight distribution of binary irregular ldpc codes and the stability condition of binary irregular ldpc codes over the binary erasure channel ( bec ) @xcite .",
    "if @xmath9 denotes the ldpc asymptotic iterative decoding threshold over the bec , the stability condition states that we always have @xmath10^{-1}.\\end{aligned}\\ ] ]    prior to the rediscovery of ldpc codes , binary generalized ldpc ( gldpc ) codes were introduced by tanner in 1981 @xcite .",
    "a gldpc code generalizes the concept of an ldpc code in that a degree-@xmath2 cn may in principle be any @xmath11 linear block code , @xmath2 being the code length and @xmath12 the code dimension .",
    "such a cn accounts for @xmath13 linearly independent parity - check equations .",
    "a cn associated with a linear block code which is not a spc code is said to be a _",
    "generalized cn_. in @xcite _ regular _ gldpc codes ( also known as tanner codes ) were investigated , these being gldpc codes where the vns are all repetition codes of the same length and the cns are all linear block codes of the same type .        the growth rate of the weight distribution of binary gldpc codes was investigated in @xcite . in @xcite the growth rate",
    "is calculated for tanner codes with bch check component codes and length-2 repetition vns , leading to an asymptotic lower bound on the minimum distance .",
    "the same lower bound is developed in @xcite assuming hamming cns and length-2 repetition vns . both works",
    "extend the approach developed by gallager in ( * ? ? ?",
    "* chapter 2 ) to show that , for sufficiently large @xmath3 , the minimum distance is a linear function of @xmath3 .",
    "the growth rate of the number of small weight codewords for gldpc codes with a uniform cn set ( all cn of the same type ) and an irregular vn set ( repetition vns with different lengths ) is investigated in @xcite .",
    "it is shown that for sufficiently large @xmath3 , a minimum distance increasing linearly with @xmath3 is expected when either the uniform cn set is composed of linear block codes with minimum distance at least @xmath14 , or the minimum length of the repetition vns is 3 .",
    "on the other hand , if the minimum distance of the cns and the minimum length of the repetition vns are both equal to 2 , then for a randomly selected gldpc code in the ensemble we expect a minimum distance growing as a linear or sublinear function of @xmath3 ( for large @xmath3 ) depending on the sign of the first order coefficient in the growth rate taylor series expansion .",
    "the results developed in @xcite were further extended in @xcite to gldpc ensembles with an irregular cn set ( cns of different types ) .",
    "it was there proved that , provided that there exist cns with minimum distance @xmath0 , a parameter @xmath15 , generalizing the parameter @xmath4 of ldpc code ensembles , plays in the context of the weight distribution of gldpc codes the same role played by @xmath4 in the context of the weight distribution of ldpc codes .",
    "the parameter @xmath16 is defined in section  [ section : further_def_&_notation ] .",
    "interestingly , this latter results extends to binary gldpc codes the same connection between the statistical properties of the weight distribution of irregular codes and the stability condition over the bec .",
    "in fact , it was shown in @xcite that the stability condition of binary irregular gldpc codes over the bec is given by @xmath17^{-1}.\\end{aligned}\\ ] ]    generalized ldpc codes represent a promising solution for low - rate channel coding schemes , due to an overall rate loss introduced by the generalized cns @xcite .",
    "doubly - generalized ldpc ( d - gldpc ) codes generalize the concept of gldpc codes while facilitating much greater design flexibility in terms of code rate @xcite ( an analogous idea may be found in the previous work @xcite ) . in a d - gldpc code ,",
    "the vns as well as the cns may be of any generic linear block code types .",
    "a degree-@xmath1 vn may in principle be any @xmath18 linear block code , @xmath1 being the code length and @xmath19 the code dimension .",
    "such a vn is associated with @xmath19 d - gldpc code bits .",
    "it interprets these bits as its local information bits and interfaces to the cn set through its @xmath1 local code bits . a vn which corresponds to a linear block code which is not a repetition code",
    "is said to be a _",
    "generalized vn_. a d - gldpc code is said to be _ regular _ if all of its vns are of the same type and all of its cns are of the same type and is said to be _ irregular _ otherwise .",
    "the structure of a d - gldpc code is depicted in fig .",
    "[ fig : dgldpc ] .    in this paper",
    "the growth rate of the weight distribution of binary irregular d - gldpc codes is analyzed for small weight codewords .",
    "it is shown that , provided there exist both vns and cns with minimum distance @xmath0 , a parameter @xmath20 discriminates between an asymptotically small and an asymptotically large expected number of small linear - weight codewords in a d - gldpc code randomly drawn from a given irregular ensemble ( the function @xmath21 is defined in section  [ section : further_def_&_notation ] ) .",
    "the parameter @xmath20 generalizes the above mentioned parameters @xmath4 and @xmath15 to the case where both generalized vns and generalized cns are present .",
    "the obtained result also represents the extension to the d - gldpc case of the previously recalled connection with the stability condition over the bec .",
    "in fact , it was proved in @xcite that the stability condition of d - gldpc codes over the bec is given by @xmath22 the paper is organized as follows .",
    "section [ section : irregular_d_gldpc ] defines the d - gldpc ensemble of interest , and introduces some definitions and notation pertaining to this ensemble .",
    "section  [ section : further_def_&_notation ] defines further terms regarding the vns and cns which compose the d - gldpc codes in the ensemble . finally , section  [ section : growth_rate ] states and proves the main result of the paper regarding the growth rate of the weight distribution .",
    "we define a d - gldpc code ensemble @xmath23 as follows , where @xmath24 denotes the number of vns .",
    "there are @xmath25 different cn types @xmath26 , and @xmath27 different vn types @xmath28 . for each cn type @xmath29 , we denote by @xmath30 , @xmath31 and @xmath32 the cn dimension , length and minimum distance , respectively . for each vn type @xmath33 , we denote by @xmath34 , @xmath35 and @xmath36 the vn dimension , length and minimum distance , respectively . for @xmath29 , @xmath37 denotes the fraction of edges connected to cns of type @xmath38 .",
    "similarly , for @xmath33 , @xmath39 denotes the fraction of edges connected to vns of type @xmath38 .",
    "note that all of these variables are independent of @xmath24 .",
    "the polynomials @xmath6 and @xmath5 are defined by @xmath40 and @xmath41 if @xmath42 denotes the number of edges in the tanner graph , the number of cns of type @xmath43 is then given by @xmath44 , and the number of vns of type @xmath45 is then given by @xmath46 . denoting as usual @xmath47 and @xmath48 by @xmath49 and @xmath50 respectively",
    ", we see that the number of edges in the tanner graph is given by @xmath51 and the number of cns is given by @xmath52 .",
    "therefore , the fraction of cns of type @xmath29 is given by @xmath53 and the fraction of vns of type @xmath33 is given by @xmath54 also the length of any d - gldpc codeword in the ensemble is given by @xmath55 note that this is a linear function of @xmath24 .",
    "similarly , the total number of parity - check equations for any d - gldpc code in the ensemble is given by @xmath56 a member of the ensemble then corresponds to a permutation on the @xmath42 edges connecting cns to vns .",
    "the growth rate of the weight distribution of the irregular d - gldpc ensemble sequence @xmath57 is defined by @xmath58 \\label{eq : growth_rate_result}\\ ] ] where @xmath59 denotes the expectation operator over the ensemble @xmath23 , and @xmath60 denotes the number of codewords of weight @xmath61 of a randomly chosen d - gldpc code in the ensemble @xmath23 .",
    "the limit in ( [ eq : growth_rate_result ] ) assumes the inclusion of only those positive integers @xmath24 for which @xmath62 and @xmath63 $ ] is positive ( i.e. , where the expression whose limit we seek is well defined ) .",
    "note that the argument of the growth rate function @xmath64 is equal to the ratio of d - gldpc codeword length to the number of vns ; by ( [ eq : dg_ldpc_codeword_length ] ) , this captures the behaviour of codewords linear in the block length , as in @xcite for the ldpc case .",
    "an _ assignment _ is a subset of the edges of the tanner graph .",
    "an assignment is said to have _ weight _",
    "@xmath19 if it has @xmath19 elements .",
    "an assignment is said to be _ check - valid _ if the following condition holds : supposing that each edge of the assignment carries a @xmath65 and each of the other edges carries a @xmath66 , each cn recognizes a valid codeword .",
    "a _ split assignment _ is an assignment , together with a subset of the d - gldpc code bits ( called a _ codeword assignment _ ) .",
    "a split assignment is said to have _ split weight _",
    "if its assignment has weight @xmath68 and its codeword assignment has @xmath69 elements .",
    "a split assignment is said to be _ check - valid _ if its assignment is check - valid .",
    "a split assignment is said to be _ variable - valid _ if the following condition holds : supposing that each edge of its assignment carries a @xmath65 and each of the other edges carries a @xmath66 , and supposing that each d - gldpc code bit in the codeword assigment is set to @xmath65 and each of the other code bits is set to @xmath66 , each vn recognizes an input word and the corresponding valid codeword .",
    "note that for any d - gldpc code , there is a bijective correspondence between the set of d - gldpc codewords and the set of split assignments which are both variable - valid and check - valid .",
    "the weight enumerating polynomial for cn type @xmath29 is given by @xmath70 here @xmath71 denotes the number of weight-@xmath69 codewords for cns of type @xmath38 .",
    "note that @xmath72 for all @xmath29 .",
    "the bivariate weight enumerating polynomial for vn type @xmath33 is given by @xmath73 here @xmath74 denotes the number of weight-@xmath68 codewords generated by input words of weight @xmath69 , for vns of type @xmath38 . also , for each @xmath33",
    ", corresponding to the polynomial @xmath75 we denote the sets @xmath76 and @xmath77    we denote the smallest minimum distance over all cn types by @xmath78 and the set of cn types with this minimum distance by @xmath79 we also define @xmath80 for each @xmath29 , and @xmath81 we note that @xmath82 for all @xmath29 , so @xmath83 .",
    "similarly , we denote the smallest minimum distance over all vn types by @xmath84 and the set of vn types with this minimum distance by @xmath85 in the specific case where @xmath86 , we also introduce the following definitions . for each @xmath87 , define the set @xmath88  note that these sets are nonempty . also define the polynomial @xmath21 by @xmath89 and denote its inverse by @xmath90 .",
    "since all the coefficients of @xmath21 are positive , @xmath21 is monotonically increasing and therefore its inverse is well - defined and unique .",
    "note that in the case @xmath91 , both @xmath16 and the polynomial @xmath21 depend only on the cns and vns with minimum distance equal to @xmath0 .",
    "finally , note that throughout this paper , the notation @xmath92 denotes napier s number .",
    "the following theorem constitutes the main result of the paper .",
    "consider an irregular d - gldpc code ensemble sequence @xmath23 satisfying @xmath91 . for sufficiently small @xmath93 , the growth rate of the weight distribution is given by @xmath94 + o(\\alpha^2 ) \\ ; .",
    "\\label{eq : growth_rate_case_1}\\ ] ] [ thm : growth_rate ]    the theorem is proved next .",
    "for ease of presentation , the proof is broken into four parts .",
    "consider @xmath96 cns of the same type @xmath29 .",
    "using generating functions be the number of ways of obtaining an outcome @xmath97 in experiment @xmath98 , and let @xmath99 be the number of ways of obtaining an outcome @xmath100 in experiment @xmath101 .",
    "also let @xmath102 be the number of ways of obtaining an outcome @xmath103 in the combined experiment @xmath104 with sum @xmath105",
    ". then the generating functions @xmath106 , @xmath107 and @xmath108 are related by @xmath109 . ] , the number of check - valid assignments ( over these cns ) of weight @xmath95 is given by @xmath110\\ ] ] where @xmath111 $ ] denotes the coefficient of @xmath112 in the polynomial @xmath113 .",
    "we now use the following result , which appears as lemma 19 in @xcite :    let @xmath114 , where @xmath115 , be a polynomial satisfying @xmath116 and @xmath117 for all @xmath118 .",
    "then , for sufficiently small @xmath119 , @xmath120 \\\\ = \\frac{\\xi}{c } \\log \\left ( \\frac{e c a_c}{\\xi } \\right ) + o(\\xi^2 ) \\label{lemma_42_formula}\\end{gathered}\\ ] ] [ lemma : optimization_dominant_term_1d ]    the limit in ( [ lemma_42_formula ] ) assumes the inclusion of only those positive integers @xmath121 for which @xmath122 and @xmath123 $ ] is positive ( i.e. , where the expression whose limit we seek is well defined ) .",
    "a proof of this lemma may be found in the appendix ; our proof is based on arguments from @xcite and lagrange multipliers , and constitutes a different approach to that taken in @xcite .    applying this lemma by substituting @xmath124 , @xmath125 and @xmath126",
    ", we obtain that with @xmath127 fixed , as @xmath128 we have , for sufficiently small @xmath129 , @xmath130 \\rightarrow \\\\ \\exp \\left\\ { m \\left [ \\frac{\\epsilon}{r_t } \\log \\left ( \\frac{e r_t a^{(t)}_{r_t } \\gamma}{\\epsilon } \\right ) + o(\\epsilon^2 ) \\right ] \\right\\ } \\label{eq : check_node_type_t}\\end{gathered}\\ ] ]      next we derive an expression , valid asymptotically , for the number of check - valid assignments of weight @xmath131 . for each @xmath29 , let @xmath132 denote the portion of the total weight @xmath131 apportioned to cns of type @xmath38 . then @xmath133 for each @xmath29 , and @xmath134 . also denote @xmath135 .",
    "the number of check - valid assignments of weight @xmath131 satisfying the constraint @xmath136 is obtained by multiplying the numbers of check - valid assignments of weight @xmath132 over @xmath137 cns of type @xmath38 , for each @xmath29 , @xmath138 where the fraction @xmath139 of cns of type @xmath29 is given by ( [ eq : gamma_t_definition ] ) .    as @xmath140 , we have @xmath141 and so we obtain using ( [ eq : check_node_type_t ] ) that for sufficiently small @xmath142 , @xmath143 \\right\\ }   \\\\",
    "= \\exp \\left\\ { m \\left [ \\sum_{t \\in i_c } \\left ( \\frac{\\epsilon_t}{r_t } \\log \\left ( \\frac{e \\rho_t c_t}{\\epsilon_t \\int \\rho } \\right ) \\right ) + o(\\delta^2 ) \\right ] \\right\\ }   \\label{eq : number_of_assign_distribution}\\end{gathered}\\ ] ]    the number of check - valid assignments of weight @xmath131 , which we denote @xmath144 , is equal to the sum of @xmath145 over all admissible vectors @xmath136 .",
    "however , the asymptotic expression as @xmath140 will be dominated by the distribution @xmath136 which maximizes the argument of the exponential , @xmath146 .",
    "therefore , our next step is to maximize the function @xmath147 subject to the constraints @xmath148 and @xmath149 we solve this optimization problem using lagrange multipliers , ignoring for the moment the final constraint . since @xmath150 for all @xmath29 , we have to solve the @xmath25 equations ( where @xmath151 is the lagrange multiplier ) @xmath152 together with ( [ eq : sum_epsilon_equals_1 ] ) , for the @xmath153 unknowns @xmath154 .",
    "first , ( [ eq : lagrange_epsilons ] ) yields @xmath155 where @xmath156 . now using ( [ eq : sum_epsilon_equals_1 ] ) , we obtain @xmath157 the left - hand side of this equation involves a sum of positive terms . for @xmath142 sufficiently small , we may approximate @xmath158 applying this approximation , we obtain @xmath159 if @xmath160 , and @xmath161 if @xmath162 , where @xmath163 is independent of @xmath38 . then ( [ eq : sum_epsilon_equals_1 ] ) yields @xmath164 , and we obtain the solution @xmath165 this solution satisfies ( [ eq : nonnegative_constraint_epsilon ] ) . when substituted into ( [ eq : number_of_assign_distribution ] ) , it yields the following result : as @xmath140 @xmath166 \\right\\ } \\label{eq : number_of_check_valid_assign}\\ ] ]      consider @xmath168 vns of the same type @xmath33 .",
    "we now evaluate the number of variable - valid split assignments ( over these vns ) of split weight @xmath167 . using generating functions",
    "be the number of ways of obtaining an outcome @xmath169 in experiment @xmath98 , and let @xmath170 be the number of ways of obtaining an outcome @xmath171 in experiment @xmath101 .",
    "also let @xmath172 be the number of ways of obtaining an outcome @xmath173 in the combined experiment @xmath104 with sums @xmath174 and @xmath175",
    ". then the generating functions @xmath176 , @xmath177 and @xmath178 are related by @xmath179 . ] , this is given by @xmath180\\ ] ] where @xmath181 $ ] denotes the coefficient of @xmath182 in the bivariate polynomial @xmath183 .",
    "we make use of the following lemma from ( * ? ? ?",
    "* theorem 2 ) .",
    "let @xmath184 where @xmath185 and @xmath115 , be a bivariate polynomial satisfying @xmath186 for all @xmath187 , @xmath188 .",
    "for fixed positive rational numbers @xmath119 and @xmath189 , consider the set of positive integers @xmath121 such that @xmath122 , @xmath190 and @xmath191 > 0 $ ] .",
    "then either this set is empty , or has infinite cardinality ; if @xmath38 is one such @xmath121 , then so is @xmath192 for every positive integer @xmath193 . assuming the latter case , the following limit is well defined and exists : @xmath194 \\\\   = \\max_{{{\\mbox{\\scriptsize \\boldmath $ \\eta$ } } } } \\sum_{(i , j ) \\in s } \\eta_{i , j } \\log \\left ( \\frac{b_{i , j}}{\\eta_{i , j } } \\right)\\end{gathered}\\ ] ] where @xmath195 , @xmath196 , and the maximization is subject to the constraints @xmath197 , @xmath198 , @xmath199 and @xmath200 for all @xmath201 .",
    "[ lemma : optimization_2d ]    applying this lemma by substituting @xmath202 , @xmath203 , @xmath204 and @xmath205 , we obtain that with @xmath127 fixed , as @xmath206 @xmath207   \\label{eq : nvt_tau_sigma_start } \\\\",
    "\\rightarrow \\exp \\left\\ { n \\gamma \\max_{{{\\mbox{\\scriptsize \\boldmath $ \\eta$}}}^{(t ) } } \\sum_{(i , j ) \\in s_t } \\eta^{(t)}_{i , j } \\log \\left ( \\frac{b^{(t)}_{i , j}}{\\eta^{(t)}_{i , j } } \\right ) \\right\\ }   \\label{eq : nvt_tau_sigma_mid } \\\\",
    "\\triangleq \\exp \\left\\ { n x^{(\\gamma)}_t(\\tau , \\sigma ) \\right\\ } \\label{eq : nvt_tau_sigma_end}\\end{aligned}\\ ] ] where the maximization over @xmath208 is subject to the constraints @xmath209 , @xmath210 , @xmath211 and @xmath212 for all @xmath213 ( recall that the sets @xmath214 and @xmath215 are given by ( [ eq : st ] ) and ( [ eq : st- ] ) ) .",
    "recall that the number of check - valid assignments of weight @xmath131 is @xmath144 ; also , the total number of assignments of weight @xmath131 is @xmath216 .",
    "therefore , the probability that a randomly chosen assignment of weight @xmath131 is check - valid is given by @xmath217 here we adopt the notation @xmath218 ; also we have @xmath219 .",
    "the binomial coefficient may be asymptotically approximated using the fact , based on stirling s approximation , that as @xmath206 @xcite @xmath220 \\right\\}\\ ] ] ( valid for @xmath221 ) which yields , in this case , @xmath222 \\right\\}\\ ] ] as @xmath206 .",
    "applying this together with the asymptotic expression ( [ eq : number_of_check_valid_assign ] ) , and assuming sufficiently small @xmath223 , we find that as @xmath206 ( exploiting the fact that @xmath224 ) @xmath225 where @xmath226    next , we note that the expected number of d - gldpc codewords of weight @xmath227 in the ensemble @xmath23 is equal to the sum over @xmath223 of the expected numbers of split assignments of split weight @xmath228 which are both check - valid and variable - valid , denoted @xmath229 : @xmath230 = \\sum_{\\beta } \\mathbb{e}_{{{\\mathcal{m}}}_n } [ n^{v , c}_{\\alpha n , \\beta n } ] \\ ; .\\ ] ] this may then be expressed as @xmath231 = \\\\",
    "\\sum_{\\beta } p_{\\mbox{\\scriptsize valid}}(\\beta",
    "n ) \\sum_{\\substack{\\sum \\alpha_t = \\alpha \\\\",
    "\\sum \\beta_t = \\beta } } \\left [ \\prod_{t \\in i_v } n_{v , t}^{(\\delta_t n)}(\\alpha_t n , \\beta_t n ) \\right]\\end{gathered}\\ ] ] where the fraction @xmath232 of vns of type @xmath33 is given by ( [ eq : delta_t_definition ] ) and the second sum is over all partitions of @xmath93 and @xmath223 into @xmath27 elements , i.e. , we have @xmath233 for all @xmath33 , and @xmath234 , @xmath235 .    now , using ( [ eq : nvt_tau_sigma_start])-([eq : nvt_tau_sigma_end ] ) , as @xmath206 we have for each @xmath33 @xmath236 where , for each @xmath33 , @xmath237 and the maximization over @xmath208 is subject to the constraints @xmath238 @xmath239 @xmath240 and @xmath241 therefore , recalling ( [ eq : pvalid_limit ] ) , we have that as @xmath206 , @xmath231 \\rightarrow \\\\ \\sum_{\\beta } \\sum_{\\substack{\\sum \\alpha_t = \\alpha \\\\",
    "\\sum \\beta_t = \\beta } } \\exp \\left\\ { n \\left [ \\sum_{t \\in i_v } x^{(\\delta_t)}_t(\\alpha_t , \\beta_t ) + y(\\beta ) \\right ] \\right\\ } \\ ; .",
    "\\label{eq : sum_of_exp}\\end{gathered}\\ ] ] next , for each @xmath33 we define @xmath242 note that the expression ( [ eq : sum_of_exp ] ) is dominated as @xmath206 by the term which maximizes the argument of the exponential .",
    "thus we may write @xmath243 + \\frac{\\beta}{r } \\log \\left ( \\frac{e c}{\\beta \\int \\lambda } \\right ) \\\\ - \\beta \\log \\left ( \\frac{e}{\\beta \\int \\lambda } \\right ) + o(\\beta^2 ) \\bigg\\ } \\label{eq : growth_rate_with_o_notation2}\\end{gathered}\\ ] ] where the maximization over @xmath244 ( for each @xmath33 ) is subject to constraints ( [ eq : sum_xi_constraint ] ) and ( [ eq : sum_theta_constraint ] ) together with @xmath212 for all @xmath245 .",
    "we next have the following lemma .",
    "the expression @xmath246 is @xmath247 for any @xmath248 satisfying the optimization constraints  ( [ eq : eta_sum_constraint])-([eq : nonnegative_eta_constraint ] ) is said to be @xmath249 if and only if there exist positive real numbers @xmath19 and @xmath129 , both independent of @xmath250 , such that @xmath251 ] .",
    "[ lemma : o2_term ]    a proof of this lemma is given in the appendix .",
    "it follows from lemma [ lemma : o2_term ] that the expression @xmath246 is @xmath247 for the maximizing @xmath248 .",
    "also , since @xmath252 is bounded between two positive constants , any expression which is @xmath253 must necessarily also be @xmath247 . therefore",
    "@xmath254 + o(\\alpha^2)\\end{gathered}\\ ] ] where the optimization is ( as before ) subject to the constraints ( [ eq : sum_xi_constraint ] ) and ( [ eq : sum_theta_constraint ] ) together with @xmath212 for all @xmath245 . in",
    "what follows , for convenience of presentation we shall temporarily omit the @xmath247 term in the expression for growth rate .",
    "next we make the substitution @xmath255 for all @xmath33 , @xmath245 .",
    "this yields @xmath256\\end{gathered}\\ ] ] where the maximization over @xmath257 ( for each @xmath33 ) is subject to the constraints @xmath258 , @xmath259 , and @xmath260 for all @xmath245 .",
    "we observe that this maximization may be recast as @xmath261\\end{gathered}\\ ] ] where the maximization , which is now over @xmath262 , is subject to the constraints @xmath263 and @xmath260 for all @xmath33 , @xmath245 , and where @xmath264 making the substitution @xmath265 for all @xmath33 , @xmath245 , we obtain @xmath266\\end{gathered}\\ ] ] where the maximization over @xmath267 is subject to the constraints @xmath268 and @xmath269 for all @xmath33 , @xmath245 , and where @xmath270 assuming the condition @xmath271 , we may write @xmath272 where @xmath273 next , assuming the condition @xmath274 , we make the observation that @xmath275 with equality if and only if @xmath276 for all @xmath277 with @xmath278 . therefore @xmath279 with equality if and only if @xmath276 for all @xmath277 with @xmath278 .",
    "let @xmath280 and @xmath281 be two distributions satisfying the optimization constraints , and suppose that @xmath282 and @xmath283 . then for sufficiently small @xmath93 , we must have @xmath284 this follows from the fact that the inequality @xmath285 will always be satisfied for @xmath93 sufficiently small ( since @xmath286 as @xmath287 , and recalling that @xmath282 ) .    therefore ,",
    "for sufficiently small @xmath93 , the vector @xmath288 which maximizes @xmath289 must satisfy @xmath276 for all @xmath277 with @xmath278 . note that this implies that the maximum , and hence the growth rate , depends only on the check and vns with minimum distance equal to @xmath0 . also , recall that for each @xmath87 , the set @xmath88 ; we contract the vector @xmath288 to include only variables @xmath290 where @xmath87 and @xmath291 ( since only these may assume positive values ) .    the growth rate may be written as @xmath292 \\triangleq \\alpha \\max_{{{\\mbox{\\scriptsize \\boldmath $ \\nu$ } } } } \\left ( \\log r({{\\mbox{\\boldmath $ \\nu$ } } } ) \\right ) \\label{eq : log_r_definition}\\end{gathered}\\ ] ] where @xmath293 and where the function @xmath294 is given by @xmath295 the maximization over @xmath296 in ( [ eq : log_r_definition ] ) is subject to the constraints @xmath297 and @xmath298 let the vector @xmath288 which maximizes ( [ eq : log_r_definition ] ) be denoted by @xmath299 .",
    "then , our task is to show that @xmath300 i.e. , that @xmath301 where the parameter @xmath16 and the polynomial @xmath21 are defined in ( [ eq : c_definition ] ) and ( [ eq : px_definition ] ) , respectively .",
    "we show this using lagrange multipliers , ignoring for the moment the constraint ( [ eq : final_inequality_constraint ] ) .",
    "we have @xmath302 so that , at the maximum , @xmath303 for all @xmath87 , @xmath291 , and for some lagrange multiplier @xmath304 . substituting back into ( [ eq : log_r_definition ] ) and using ( [ eq : final_sum_constraint ] ) yields @xmath305 i.e.",
    ", the maximum value of the function @xmath306 is equal to the lagrange multiplier .",
    "thus we have @xmath307 for all @xmath87 , @xmath291 .",
    "substituting this into the lhs of ( [ eq : polynomial_match ] ) and recalling the definition ( [ eq : px_definition ] ) , we obtain @xmath308 where we have used ( [ eq : delta_t_definition ] ) , ( [ eq : phi_definition ] ) and ( [ eq : s_nu_definition ] ) .",
    "this completes the proof of the theorem .",
    "note that ( [ eq : growth_rate_case_1 ] ) is a first - order taylor series expansion around @xmath309 which directly generalizes the results of @xcite and @xcite ( for irregular ldpc and gldpc codes respectively ) to the case of irregular d - gldpc codes .",
    "our result indicates that for this case also , the parameter @xmath310 plays an analagous role to the parameter @xmath311 for irregular ldpc codes , and to the parameter @xmath15 for irregular gldpc codes .",
    "an expression for the asymptotic growth rate of the weight distribution of d - gldpc codes for small linear - weight codewords has been derived .",
    "the expression assumes the existence of minimum distance @xmath0 check and variable nodes , and involves the evaluation of a polynomial inverse , derived from the minimum distance @xmath0 variable nodes , at a point derived from the minimum distance @xmath0 check nodes .",
    "this generalizes known results for ldpc codes and gldpc codes , and also generalizes the corresponding connection with the stability condition over the bec .",
    "first consider the set of positive rational numbers @xmath121 such that @xmath122 and @xmath312 .",
    "then it is easy to see that either this set is empty , or it has infinite cardinality ; if @xmath38 is one such @xmath121 , then so is @xmath192 for every positive integer @xmath193 ( proof routine by induction ) .",
    "the former case is not of interest to us here . in the latter case ,",
    "the following limit is well defined and exists ( * ? ? ?",
    "* theorem 1 ) : @xmath120 \\\\   = \\max_{{{\\mbox{\\scriptsize \\boldmath $ \\beta$ } } } } \\sum_{i \\in s } \\beta_i \\log \\left ( \\frac{a_i}{\\beta_i } \\right)\\end{gathered}\\ ] ] where @xmath313 , @xmath314 , and the maximization is subject to the constraints @xmath315 @xmath316 and @xmath317    we solve this optimization problem using lagrange multipliers , ignoring for the moment the final constraint . defining @xmath318",
    "we have @xmath319 for all @xmath320",
    ". therefore we obtain @xmath321 for all @xmath320 , where @xmath322 and @xmath151 are lagrange multipliers .",
    "these equations , together with ( [ eq : beta_sum_constraint ] ) and ( [ eq : sum_xi_constraint_1d ] ) , yield @xmath323 equations in the @xmath323 unknowns @xmath324 . setting @xmath325 in ( [ eq : lagrange_1d ] ) yields @xmath326 and substituting this back into ( [ eq : lagrange_1d ] ) gives @xmath327 for all @xmath320 , where @xmath156 .",
    "so from ( [ eq : sum_xi_constraint_1d ] ) @xmath328 now for sufficiently small @xmath119 , we may approximate @xmath329 applying this approximation , @xmath330 is nonzero only for @xmath331 .",
    "therefore , from ( [ eq : beta_sum_constraint ] ) and ( [ eq : sum_xi_constraint_1d ] ) we obtain the solution @xmath332 it is easy to see that this solution satisfies ( [ eq : nonnegative_beta_constraint ] ) .",
    "finally , substituting the solution ( [ eq : beta_solution ] ) into ( [ eq : f_beta ] ) gives @xmath333 this completes the proof of the lemma .",
    "consider any @xmath248 which satisfies the optimization constraints  ( [ eq : eta_sum_constraint])-([eq : nonnegative_eta_constraint ] ) . since @xmath334 , @xmath93 small implies that @xmath335 is small for every @xmath33 . from constraint ( [ eq : sum_xi_constraint ] ) we conclude that @xmath336 is small for every @xmath33 , @xmath245 , and so @xmath337 is close to @xmath65 for all @xmath33 .",
    "formally , for any @xmath33 the term in the sum over @xmath248 in ( [ eq : x_function ] ) corresponding to @xmath338 may be written as ( here we use ( [ eq : eta_sum_constraint ] ) , and the taylor series of @xmath339 around @xmath340 ) @xmath341 therefore we have @xmath342 for some @xmath343 independent of @xmath344 .",
    "it follows that @xmath345 where @xmath346 for each @xmath33 . also , by ( [ eq : sum_xi_constraint ] ) we have @xmath347 and therefore @xmath348 denote @xmath349 ; then , combining ( [ eq : f_t_ineq_1 ] ) and ( [ eq : f_t_ineq_2 ] ) , @xmath350 and thus the expression @xmath246 is @xmath247 , as desired .",
    "this work was supported in part by the ec under seventh fp grant agreement ict optimix n. infso - ict-214625 and in part by the university of bologna ( isa - esrf fellowship ) .",
    "s.  y.  chung , g.d .",
    "forney , t.  richardson and r.  urbanke , `` on the design of low - density parity - check codes within 0.0045 db of the shannon limit '' _ ieee commun .",
    "_ , vol .  5 , no .  2 , pp .",
    "5860 , feb .",
    "2001 .",
    "h.  pfister and i.  sason , `` accumulate - repeat - accumulate codes : capacity - achieving ensembles of systematic codes for the erasure channel with bounded complexity , '' _ ieee trans .",
    "inform . theory _",
    "53 , no .  6 , pp .  20882115 , june  2007",
    ".                j.  p.  tillich , `` the average weight distribution of tanner code ensembles and a way to modify them to improve their weight distribution , '' in _ proc . of 2004 ieee int",
    ". symp . on information theory _ ,",
    "chicago , il , usa , june / july  2004 .",
    "e.  paolini , m.  chiani and m.  fossorier , `` on the growth rate of gldpc codes weight distribution , '' in _ proc . of 2008 ieee int .",
    "symp . on spread spectrum techniques and applications _ , isssta 2008 , bologna , italy , aug ."
  ],
  "abstract_text": [
    "<S> in this paper , an expression for the asymptotic growth rate of the number of small linear - weight codewords of irregular doubly - generalized ldpc ( d - gldpc ) codes is derived . </S>",
    "<S> the expression is compact and generalizes existing results for ldpc and generalized ldpc ( gldpc ) codes . assuming that there exist check and variable nodes with minimum distance @xmath0 , it is shown that the growth rate depends only on these nodes . </S>",
    "<S> an important connection between this new result and the stability condition of d - gldpc codes over the bec is highlighted . </S>",
    "<S> such a connection , previously observed for ldpc and gldpc codes , is now extended to the case of d - gldpc codes .    </S>",
    "<S> doubly - generalized ldpc codes , irregular code ensembles , weight distribution . </S>"
  ]
}