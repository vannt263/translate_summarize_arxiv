{
  "article_text": [
    "enumeration of finite mathematical structures is an important tool since it allows testing new hypotheses and searching for counterexamples .",
    "additionally , it provides insight into the properties of these structures .",
    "here we concentrate on constructing , up to isomorphism , all modular lattices with a given number of elements .",
    "the algorithm we develop is a modification of the approach of heitzig and reinhold  @xcite who enumerated ( up to isomorphism ) all lattices with up to 18 elements .",
    "the number of distributive lattices of size up to 49 were calculated by ern , heitzig and reinhold  @xcite . in the online encyclopedia of integer sequences ( ` oeis.org ` ) the relevant sequences are a006981 , a006966 and a006982 , but the sequence for the number of modular lattices was given only up to @xmath2 .",
    "for @xmath3 there are 766 nonisomorphic modular lattices , as was reported in  @xcite .",
    "we extend this result to @xmath4 and also count the number of semimodular lattices up to size @xmath5 ( see table  [ table1 ] ) .",
    "our algorithm uses an improved method for removing isomorphic copies , which allowed us to recalculate the numbers in  @xcite for all lattices up to @xmath6 and go one step further to find the number of nonisomorphic lattices with 19 elements .",
    "the calculations were done on a cluster of 64 processors and took 26 hours for @xmath6 and 19 days for @xmath7 .    in the remainder of this section , we define some properties and recall some basic results of ( semi)modular lattices . in section 2 ,",
    "we give an outline of the algorithm used by @xcite to generate finite lattices up to isomorphism .",
    "then , in section 3 , we adapt this algorithm to generate modular lattices up to isomorphism by adding a series of constraints to the algorithm .",
    "section 4 contains an improvement for the algorithm used by @xcite by employing the canonical construction path introduced in @xcite . in section 5 , the algorithm",
    "is adjusted to generate only vertically indecomposable modular lattices .    a _ modular lattice _",
    "@xmath8 is a lattice which satisfies the modular law @xmath9    weaker conditions of modularity are semimodularity and lower semimodularity . as usual , we write @xmath10 if @xmath11 is _ covered by _ @xmath12 .",
    "a lattice @xmath8 is _ semimodular _ if for all @xmath13 @xmath14    dually , @xmath8 is _ lower semimodular _ if for all @xmath13 @xmath15 recall that a _ chain _ in a lattice @xmath8 is a subset of @xmath8 such that all elements in the subset are comparable .",
    "we say that a lattice has _ finite length _ if all chains in it have finite cardinality .",
    "the next two well - known results below can be found for example in @xcite .",
    "[ mod - semimod ] a lattice of finite length is modular if and only if it is semimodular and lower semimodular .",
    "a chain @xmath16 in a poset @xmath17 is _ maximal _ if whenever @xmath18 and @xmath19 is a chain in @xmath17 , then @xmath20 . in a finite lattice ,",
    "a maximal chain is a chain from bottom to top such that each element in the chain , other than the top , is covered by some element in the chain .",
    "[ jhcc ] let @xmath8 be a finite semimodular lattice .",
    "then , for any maximal chains @xmath16 and @xmath19 in l , @xmath21 .",
    "there are many ways to represent finite lattices and to construct bigger lattices from smaller lattices .",
    "an algorithm that constructs up to isomorphism all combinatorial objects of a certain kind and of a given size is called an _ orderly algorithm _ if it produces exactly one member of each isomorphism class without testing that this member is nonisomorphic to previously constructed objects .",
    "such algorithms were first introduced by faradzhev  @xcite and read  @xcite for enumerating finite graphs .",
    "heitzig and reinhold @xcite developed an orderly algorithm to enumerate all finite lattices up to isomorphism and used it to count the number of lattices up to size 18 . since our first algorithm for modular lattices is based on their approach , we recall some of the details here .",
    "let @xmath8 be a lattice .",
    "a nonempty antichain @xmath22 is a _ lattice - antichain _ if @xmath23 for all @xmath24 , where @xmath25 for some @xmath26 .",
    "a finite lattice is called an @xmath1-lattice if its set of elements is @xmath27 , where @xmath28 and @xmath29 are the bottom and top elements .    given a lattice antichain @xmath30 and an @xmath1-lattice @xmath8 , a poset @xmath31 with @xmath32 elements is constructed by adding an element @xmath1 to @xmath8 as an atom with @xmath30 as the set of its covers . furthermore , the following lemma states that @xmath31 is a lattice .",
    "a subset @xmath33 of an @xmath1-lattice @xmath8 is a lattice - antichain if and only if @xmath8 is a subposet of an @xmath34-lattice @xmath31 in which the element @xmath1 is an atom and @xmath30 is the set of its covers .    in order to generate only one copy of each lattice up to isomorphism",
    ", the weight @xmath35 of an @xmath1-lattice @xmath8 is defined by setting @xmath36 .    with this weight , for two @xmath1-lattices @xmath8 and @xmath37",
    ", @xmath38 is said to be ( lexicographically ) smaller than @xmath39 if there is an @xmath40 such that @xmath41 and @xmath42 for all @xmath43 .",
    "an @xmath1-lattice c is called a canonical lattice if there is no @xmath1-lattice isomorphic to @xmath16 that has a smaller weight . in order to check",
    "whether an @xmath1-lattice @xmath8 is canonical , one has to check whether there is a permutation of the elements of @xmath8 that yields an isomorphic copy of @xmath8 with a smaller weight .    with these definitions ,",
    "a recursive algorithm is formulated in @xcite which generates exactly all canonical lattices of order less or equal to @xmath1 for a given natural number @xmath44 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ` next_lattice(integer m , canonical m - lattice l ) begin if m < n then for each lattice - antichain a of l do if l^{a } is a canonical lattice then next_lattice(m+1 , l^{a } ) if m = n then output l end ` _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    algorithm 1    the set of all maximal elements in a finite poset @xmath17 is called the _ first level _ of @xmath17 and is denoted by @xmath45 .",
    "the _ @xmath46-th level _ of @xmath17 is recursively defined by @xmath47    following @xcite we define @xmath48 to be the number @xmath49 such that @xmath50 .",
    "although heitzig and reinhold refer to this as the depth of @xmath51 , it is more traditional to consider the depth of @xmath51 to be given by @xmath52 . to avoid confusion , we only use the function @xmath53 rather than the notion of depth .",
    "we say an @xmath1-lattice @xmath8 is _ levelized _ if @xmath54 in other words , the levels form a partition on @xmath55 of the form @xmath56 , where @xmath49 is the number of levels in @xmath8 .    throughout the rest of the paper , we consider the bottom level to be @xmath57 , unless indicated otherwise .",
    "the following lemma gives us an important property when generating levelized lattices , since it tells us we only need to consider lattice - antichains that have at least one element in the two bottom levels .",
    "[ l2.2 ] for a levelized @xmath1-lattice @xmath8 and a lattice - antichain @xmath30 , @xmath31 is levelized if and only if @xmath58 .",
    "in order to construct only modular lattices of size @xmath1 using this algorithm , we start by selecting only the lattices that are modular when we get to size @xmath1 . however",
    ", modular lattices constitute a very small fraction of the total number of lattices .",
    "therefore , it is important to add constraints in order to minimize the generation of non - modular lattices . in order to do this ,",
    "we present a series of results to decide when a subtree in a search tree can be cut off , and which lattice antichains must be considered in each step . during this section , we refer to _ descendants _ of a lattice @xmath8 as those lattices generated through the element extension described in @xcite , together with any additional constraints introduced in this section .",
    "[ l3.1 ] for an @xmath1-lattice @xmath8 , and a lattice - antichain @xmath59 , if there exist @xmath60 such that @xmath61 , then all descendants of @xmath31 are non - semimodular . specifically , they are non - modular .",
    "assume without loss of generality that @xmath62 .",
    "let @xmath63 and @xmath64 be the chains of maximal cardinality from 1 to @xmath11 and @xmath12 respectively .    for any @xmath65 , @xmath66 is equal to the cardinality of the longest chain from @xmath67 to 1 , hence @xmath68 .",
    "next , in @xmath31 , we have @xmath69 and @xmath70 .",
    "let @xmath37 be a descendant of @xmath31 , and choose any chain @xmath19 from 0 to @xmath1",
    ".    then @xmath71 and @xmath72 are maximal chains of different cardinality since @xmath73 . by theorem  [ jhcc ]",
    ", it follows that @xmath37 is not semimodular , and therefore is non - modular .    from lemmas [ l2.2 ] and [ l3.1 ]",
    "we may conclude the following result .",
    "[ levk ] for the construction of ( semi-)modular lattices using the orderly algorithm of @xcite , it is sufficient to consider lattice - antichains @xmath30 such that @xmath74 or @xmath75",
    ".    let @xmath8 be an @xmath1-lattice where @xmath76 is the bottom nonzero level , and let @xmath75 be a lattice - antichain of @xmath8 . if there is an atom of @xmath8 in @xmath77 then all descendants of @xmath31 are non - semimodular , and hence non - modular .",
    "let @xmath78 be an atom of @xmath8 , and choose any @xmath79 . then there exist chains @xmath63 from @xmath11 to 1 and @xmath64 from @xmath12 to 1 of cardinality @xmath49 and @xmath80 respectively .",
    "since the new element @xmath1 is in a new level @xmath81 , and @xmath82 , @xmath12 is contained in the third lowest level of @xmath31 .",
    "therefore , by corollary 3.2 , it is not used in the generation of any descendants , and @xmath12 remains as an atom in all descendants .",
    "hence , the maximal chain @xmath83 is of constant cardinality @xmath84 for any descendant of @xmath31 .",
    "let @xmath37 be a descendant of @xmath31 .",
    "choose any chain @xmath85 from 0 to @xmath1 , then @xmath86 .",
    "therefore , for the maximal chain @xmath87 , @xmath88 by theorem [ jhcc ] , since both @xmath89 and @xmath90 are maximal chains , it follows that @xmath37 is non - semimodular and therefore non - modular .",
    "an observation that significantly decreases the search space is based on the following property of the algorithm : since elements are always added below a lattice antichain , if two elements in the antichain fail semimodularity , then those two elements also fail semimodularity in any of the descendants . therefore , when adding a new element below a lattice antichain , we should check that we are not generating a non - semimodular lattice .    for an @xmath1-lattice @xmath8 and a lattice antichain @xmath59 , if there exist @xmath60 which do not have a common cover , then all descendants of @xmath31 are non - semimodular .    in @xmath31 , for the new element @xmath1 , @xmath69 and @xmath70 . however , @xmath91 or @xmath92 .",
    "therefore , @xmath31 is not semimodular . furthermore , for any descendant @xmath37 of @xmath31",
    ", it is not possible to add a common cover to @xmath93 .",
    "hence , @xmath37 is not semimodular ( and consequently , not modular ) .",
    "similarly , we can consider when it is not possible to make a non - lower semimodular lattice into a lower semimodular lattice .",
    "let @xmath8 be an @xmath1-lattice , and let @xmath49 be its bottom non - zero level .",
    "if there exist @xmath94 which do not satisfy lower semimodularity , then all descendants of @xmath8 are non - lower semimodular ( and hence non - modular ) .    given an @xmath93 such that @xmath95 but @xmath96 or @xmath97 , the algorithm can make @xmath93 satisfy lower semimodularity by adding an element below @xmath93",
    "however , by corollary [ levk ] , we only consider lattice antichains in @xmath57 and @xmath77 .",
    "therefore , if @xmath94 , we can not add a common co - cover , and all descendants @xmath37 of @xmath8 are non - lower semimodular .",
    "this lemma can be incorporated into the algorithm by checking that all elements of @xmath77 satisfy lower semimodularity each time a new level is added .",
    "the preceding results are summarized in the following theorems .",
    "when generating semimodular lattices , for a lattice @xmath8 , we only consider lattice - antichains @xmath30 which satisfy all of the following conditions :    * @xmath74 or @xmath75 . * if @xmath75 , there are no atoms in @xmath77 .",
    "* for all @xmath98 , @xmath67 and @xmath99 have a common cover .",
    "when generating modular lattices , for a lattice @xmath8 , we only consider lattice - antichains @xmath30 which satisfy and    * if @xmath75 , then @xmath77 satisfies lower semimodularity ( i.  e. , for all @xmath100 implies @xmath101 ) .",
    "another improvement can be implemented in the last step when generating lattices of size @xmath1 from those of size @xmath102 , by only considering lattice - antichains @xmath74 and @xmath103 .",
    "this is due to the following result .",
    "[ bottomlev ] for an @xmath1-lattice @xmath8 and a lattice antichain @xmath104 , the @xmath32-lattice @xmath31 is non - modular .",
    "since @xmath104 , there exists @xmath105 such that @xmath106 .",
    "let @xmath107 .",
    "since @xmath108 , there exist chains @xmath63 and @xmath64 from @xmath11 to 1 and @xmath12 to 1 respectively , both of cardinality @xmath49 .    in @xmath31 , @xmath69 , but @xmath109 .",
    "thus , for the maximal chains @xmath110 and @xmath83 , @xmath111 thus @xmath31 is non - modular .",
    "when generating finite ( modular ) lattices using algorithm  1 , the majority of the time is spent in testing if the lattice @xmath31 is canonical , an operation of order @xmath112 .",
    "an approach that speeds - up the algorithm significantly , while still generating exactly one isomorphic copy of each ( modular ) lattice is via generation by _ canonical construction path _ , which was introduced by mckay @xcite .",
    "this canonical construction has two components .",
    "the first is to use only one representative of each orbit in the lattice antichains of @xmath8 . in other words , if there is an automorphism @xmath113 on @xmath8 such that @xmath114 for lattice - antichains @xmath115 , only one of these antichains is chosen arbitrarily .",
    "the second is , after the extension of any lattice @xmath8 using @xmath30 , @xmath31 is checked to see if @xmath8 is the inverse through a `` canonical deletion '' .",
    "this uses the canonical labeling of the program ` nauty ` @xcite . in general , a _",
    "canonical labeling _",
    "associates with each @xmath1-lattice @xmath8 a permutation @xmath116 on @xmath117 such that for any @xmath1-lattice @xmath37 we have @xmath118 if and only if @xmath119 i.e. , the permutation maps each lattice to a fixed representative of its isomorphism class .",
    "when a new @xmath34-lattice @xmath31 is generated from @xmath8 and @xmath30 , a canonical labeling @xmath120 of @xmath31 is generated using a partition by levels in ` nauty ` .",
    "let @xmath121 denote the element which maps to @xmath1 under the canonical labeling .",
    "we consider the set @xmath122 , where @xmath123 denotes the lattice obtained by removing @xmath11 from @xmath31 .",
    "note that @xmath124 . if @xmath125 , we say @xmath31 is _ canonical _ and keep it , otherwise it is discarded .    using this construction , theorem  1 in @xcite states that starting from any lattice",
    ", exactly one isomorphic copy of each descendant will be output .",
    "thus , starting with the two - element lattice , we can generate exactly one isomorphic copy of each lattice of a given size @xmath1 .",
    "this has an advantage over the construction used in @xcite since it does not require checking all permutations of a lattice , and it uses canonical labeling by ` nauty ` , which is generally considered the most efficient canonical labeling program for small combinatorial structures .",
    "furthermore , this construction is orderly since it only considers the lattices @xmath8 and @xmath31 .",
    "this is beneficial during computations because it does not require storage of previously generated lattices or communication between nodes during parallel computations .",
    "given this , algorithm  1 can be modified` next_lattice2(integer m , canonical m - lattice l ) begin if m < n then lac:=\\{a \\mid a is a lattice - antichain of l } for each orbit o of the action of aut(l ) on lac select any a\\in o c:= canonical labeling of l^a n':=c^{-1}(n ) if f(n)=n ' for some f\\in aut(l^a ) then next_lattice2(m+1 , l^{a } ) if m = n then output l end `algorithm 2",
    "we say a lattice @xmath8 is _ vertically decomposable _ if it contains an element which is neither the greatest nor the least element of @xmath8 but is comparable with every element of @xmath8 . a lattice which is not vertically decomposable is said to be _ vertically indecomposable_.    let @xmath126 be the number of unlabeled vertically indecomposable modular lattices .",
    "then the recursive formula @xcite can be used to compute the number of unlabeled modular lattices from the number of unlabeled vertically indecomposable modular lattices .",
    "@xmath127    in order to avoid generating vertically decomposable modular lattices , we only need to avoid using @xmath57 as a lattice antichain of @xmath8 , since then @xmath128 would be comparable to all elements in @xmath31 .",
    "however , not using these lattice antichains would cut off branches of the canonical path that could potentially generate vertically indecomposable canonical lattices .",
    "lemma  [ vi ] tells us we can safely avoid using them when @xmath129 .",
    "[ vi ] given an @xmath1-lattice @xmath8 with only one atom @xmath102 , then all descendants of @xmath130 are vertically decomposable .    it is clear that @xmath131 and @xmath132 , where @xmath133 . under our construction ,",
    "only lattice - antichains @xmath134 and @xmath135 are considered .",
    "therefore , for any descendant @xmath37 of @xmath31 and any new element @xmath136 such that @xmath137 or @xmath138 , @xmath139 . additionally , for all @xmath140 , @xmath141 .",
    "thus , @xmath37 is vertically decomposable .",
    "this means that we only construct vertically decomposable lattices where the only comparable element is a single atom .",
    "however , these are ignored during the count of vertically indecomposable lattices .    note that in the last step , by lemma  [ bottomlev ] , we only have to consider lattice - antichains in @xmath77 .",
    "( a0 ) at(0,0 ) ; ( a1 ) at(@xmath142 ) ; at(@xmath143)1 ; at(@xmath144)0 ; ( a0)edge(a1 ) ; ( @xmath145 ) rectangle ( @xmath146 ) ; ( @xmath147 ) ",
    "+ ( 0,-0.5 ) ; ( b0 ) at(@xmath148 ) ; ( b1 ) at(@xmath149 ) ; ( b2 ) at(@xmath150 ) ; at(@xmath151)0 ; at(@xmath152)1 ; at(@xmath153)2 ; ( b0)edge(b2 ) ; ( b2)edge(b1 ) ; ( @xmath154 ) rectangle ( @xmath155 ) ; ( @xmath156 ) ",
    "+ ( 0,-0.5 ) ; ( c0 ) at(@xmath157 ) ; ( c1 ) at(@xmath158 ) ; ( c2 ) at(@xmath159 ) ; ( c3 ) at(@xmath160 ) ; at(@xmath161)0 ; at(@xmath162)1 ; at(@xmath163)2 ; at(@xmath164)3 ; ( c0)edge(c2 ) ; ( c0)edge(c3 ) ; ( c3)edge(c1 ) ; ( c2)edge(c1 ) ; ( @xmath165 ) rectangle ( @xmath166 ) ; ( @xmath165 ) ",
    "+ ( -1,-0.5 ) ; ( d0 ) at(@xmath167 ) ; ( d1 ) at(@xmath168 ) ; ( d2 ) at(@xmath169 ) ; ( d3 ) at(@xmath170 ) ; ( d4 ) at(@xmath171 ) ; at(@xmath172)0 ; at(@xmath173)1 ; at(@xmath174)2 ; at(@xmath175)3 ; at(@xmath176)4 ; ( d0)edge(d2)edge(d3)edge(d4 ) ; ( d2)edge(d1 ) ; ( d3)edge(d1 ) ; ( d4)edge(d1 ) ; ( @xmath177 ) rectangle ( @xmath178 ) ; ( @xmath179 )  + ( 2.7,-0.5 ) ; ( e0 )",
    "at(@xmath180 ) ; ( e1 ) at(@xmath181 ) ; ( e2 ) at(@xmath182 ) ; ( e3 ) at(@xmath183 ) ; ( e4 ) at(@xmath184 ) ; at(@xmath185)0 ; at(@xmath186)1 ; at(@xmath187)2 ; at(@xmath188)3 ; at(@xmath189)4 ; ( e0)edge(e4)edge(e3 ) ; ( e3)edge(e1 ) ; ( e2)edge(e1)edge(e4 ) ; ( @xmath190 ) rectangle ( @xmath191 ) ;    ( @xmath177 )  + ( -1.7,-0.5 ) ; ( g0 )",
    "at(@xmath192 ) ; ( g1 ) at(@xmath193 ) ; ( g2 ) at(@xmath194 ) ; ( g3 ) at(@xmath195 ) ; ( g4 ) at(@xmath196 ) ; ( g5 ) at(@xmath197 ) ; at(@xmath198)0 ; at(@xmath199)1 ; at(@xmath200)2 ; at(@xmath201)3 ; at(@xmath202)4 ; at(@xmath203)5 ; ( g0)edge(g2)edge(g3)edge(g4)edge(g5 ) ; ( g1)edge(g2)edge(g3)edge(g4)edge(g5 ) ; ( @xmath204 ) rectangle ( @xmath205 ) ; ( @xmath206 )  + ( 0,-0.5 ) ; ( h0 ) at(@xmath207 ) ; ( h1 ) at(@xmath208 ) ; ( h2 ) at(@xmath209 ) ; ( h3 ) at(@xmath210 ) ; ( h4 ) at(@xmath211 ) ; ( h5 ) at(@xmath212 ) ; at(@xmath213)0 ; at(@xmath214)1 ; at(@xmath215)2 ; at(@xmath216)3 ; at(@xmath217)4 ; at(@xmath218)5 ; ( h0)edge(h3)edge(h4)edge(h5 ) ; ( h1)edge(h2)edge(h3)edge(h4 ) ; ( h2)edge(h5 ) ; ( @xmath219 ) rectangle ( @xmath220 ) ; ( @xmath221 )  +",
    "( 1.5,-0.5 ) ; ( i0 ) at(@xmath222 ) ; ( i1 ) at(@xmath223 ) ; ( i2 ) at(@xmath224 ) ; ( i3 ) at(@xmath225 ) ; ( i4 )",
    "at(@xmath226 ) ; ( i5 ) at(@xmath227 ) ; at(@xmath228)0 ; at(@xmath229)1 ; at(@xmath230)2 ; at(@xmath231)3 ; at(@xmath232)4 ; at(@xmath233)5 ; ( i0)edge(i4)edge(i5 ) ; ( i1)edge(i2)edge(i3)edge(i4 ) ; ( i5)edge(i2)edge(i3 ) ; ( @xmath234 ) rectangle ( @xmath235 ) ; ( @xmath236 )  +",
    "( 1,-0.5 ) ; ( j0 ) at(@xmath237 ) ; ( j1 ) at(@xmath238 ) ; ( j2 ) at(@xmath239 ) ; ( j3 ) at(@xmath240 ) ; ( j4 ) at(@xmath241 ) ; ( j5 ) at(@xmath242 ) ; at(@xmath243)0 ; at(@xmath244)1 ; at(@xmath245)2 ; at(@xmath246)3 ; at(@xmath247)4 ; at(@xmath248)5 ; ( j0)edge(j4)edge(j5 ) ; ( j1)edge(j2)edge(j3 ) ; ( j5)edge(j2)edge(j3 ) ; ( j4)edge(j2 ) ; ( @xmath249 ) rectangle ( @xmath250 ) ; ( @xmath251 )  + ( 0,-0.5 ) ; ( k0 ) at(@xmath252 ) ; ( k1 ) at(@xmath253 ) ; ( k2 ) at(@xmath254 ) ; ( k3 ) at(@xmath255 ) ; ( k5 ) at(@xmath256 ) ; ( k4 ) at(@xmath257 ) ; at(@xmath258)0 ; at(@xmath259)1 ; at(@xmath260)2 ; at(@xmath261)3 ; at(@xmath262)4 ; at(@xmath263)5 ; ( k0)edge(k4)edge(k5)edge(k3 ) ; ( k1)edge(k2)edge(k3 ) ; ( k2)edge(k4)edge(k5 ) ; ( @xmath264 ) rectangle ( @xmath265 ) ; ( @xmath204 )  + ( -0.8,-0.5 ) ; ( l0 )",
    "at(@xmath266 ) ; ( l1 ) at(@xmath267 ) ; ( l2 ) at(@xmath268 ) ; ( l3 ) at(@xmath269 ) ; ( l4 ) at(@xmath270 ) ; ( l5 ) at(@xmath271 ) ; ( l6 ) at(@xmath272 ) ; at(@xmath273)0 ; at(@xmath274)1 ; at(@xmath275)2 ; at(@xmath276)3 ; at(@xmath277)4 ; at(@xmath278)5 ; at(@xmath279)6 ; ( l0)edge(l2)edge(l3)edge(l4)edge(l5)edge(l6 ) ; ( l1)edge(l2)edge(l3)edge(l4)edge(l5)edge(l6 ) ; ( @xmath280 ) rectangle ( @xmath281 ) ; ( @xmath282 )  + ( 0,-0.5 ) ; ( m0 ) at(@xmath283 ) ; ( m1 ) at(@xmath284 ) ; ( m2 ) at(@xmath285 ) ; ( m3 ) at(@xmath286 ) ; ( m4 ) at(@xmath287 ) ; ( m5 ) at(@xmath288 ) ; ( m6 ) at(@xmath289 ) ; at(@xmath290)0 ; at(@xmath291)1 ; at(@xmath292)2 ; at(@xmath293)3 ; at(@xmath294)4 ; at(@xmath295)5 ; at(@xmath296)6 ; ( m0)edge(m6)edge(m3)edge(m4)edge(m5)edge(m6 ) ; ( m1)edge(m2)edge(m3)edge(m4)edge(m5 ) ; ( m2)edge(m6 ) ; ( @xmath297 ) rectangle ( @xmath298 ) ; ( @xmath219 )  + ( -0.2,-0.5 ) ; ( n0 )",
    "at(@xmath299 ) ; ( n1 ) at(@xmath300 ) ; ( n2 ) at(@xmath301 ) ; ( n3 ) at(@xmath302 ) ; ( n4 ) at(@xmath303 ) ; ( n5 ) at(@xmath304 ) ; ( n6 ) at(@xmath305 ) ; at(@xmath306)0 ; at(@xmath307)1 ; at(@xmath308)2 ; at(@xmath309)3 ; at(@xmath310)4 ; at(@xmath311)5 ; at(@xmath312)6 ; ( n0)edge(n3)edge(n4)edge(n5)edge(n6 ) ; ( n1)edge(n2)edge(n3)edge(n4 ) ; ( n2)edge(n5)edge(n6 ) ; ( @xmath313 ) rectangle ( @xmath314 ) ; ( @xmath315 )  + ( 0,-0.5 ) ; ( o0 ) at(@xmath316 ) ; ( o1 ) at(@xmath317 ) ; ( o2 ) at(@xmath318 ) ; ( o3 ) at(@xmath319 ) ; ( o4 ) at(@xmath320 ) ; ( o5 ) at(@xmath321 ) ; ( o6 ) at(@xmath322 ) ; at(@xmath323)0 ; at(@xmath324)1 ; at(@xmath325)2 ; at(@xmath326)3 ; at(@xmath327)4 ; at(@xmath328)5 ; at(@xmath329)6 ; ( o0)edge(o5)edge(o6 ) ; ( o1)edge(o2)edge(o3)edge(o4 ) ; ( o5)edge(o2 ) ; ( o6)edge(o2)edge(o3)edge(o4 ) ; ( @xmath330 ) rectangle ( @xmath331 ) ; ( @xmath332 )  +",
    "( 0,-0.5 ) ; ( p0 ) at(@xmath333 ) ; ( p1 ) at(@xmath334 ) ; ( p2 ) at(@xmath335 ) ; ( p3 ) at(@xmath336 ) ; ( p4 ) at(@xmath337 ) ; ( p5 ) at(@xmath338 ) ; ( p6 ) at(@xmath339 ) ; at(@xmath340)0 ; at(@xmath341)1 ; at(@xmath342)2 ; at(@xmath343)3 ; at(@xmath344)4 ; at(@xmath345)5 ; at(@xmath346)6 ; ( p0)edge(p5)edge(p6 ) ; ( p1)edge(p2)edge(p3)edge(p4 ) ; ( p2)edge(p5 ) ; ( p4)edge(p6 ) ; ( p3)edge(p5)edge(p6 ) ; ( @xmath347 ) rectangle ( @xmath348 ) ; ( @xmath349 )  + (",
    "0,-0.5 ) ; ( q0 ) at(@xmath350 ) ; ( q1 )",
    "at(@xmath351 ) ; ( q2 ) at(@xmath352 ) ; ( q3 ) at(@xmath353 ) ; ( q4 ) at(@xmath354 ) ; ( q5 ) at(@xmath355 ) ; ( q6 ) at(@xmath356 ) ; at(@xmath357)0 ; at(@xmath358)1 ; at(@xmath359)2 ; at(@xmath360)3 ; at(@xmath361)4 ; at(@xmath362)5 ; at(@xmath363)6 ; ( q6)edge(q4)edge(q5)edge(q0 ) ; ( q1)edge(q2)edge(q3 ) ; ( q5)edge(q2)edge(q3 ) ; ( q4)edge(q2 ) ; ( @xmath364 ) rectangle ( @xmath365 ) ; ( @xmath264 )  + ( 0,-0.5 ) ; ( r0 ) at(@xmath366 ) ; ( r1 ) at(@xmath367 ) ; ( r2 ) at(@xmath368 ) ; ( r3 ) at(@xmath369 ) ; ( r6 ) at(@xmath370 ) ; ( r5 ) at(@xmath371 ) ; ( r4 ) at(@xmath372 ) ; at(@xmath373)0 ; at(@xmath374)1 ; at(@xmath375)2 ; at(@xmath376)3 ; at(@xmath377)4 ; at(@xmath378)5 ; at(@xmath379)6 ; ( r0)edge(r4)edge(r5)edge(r3)edge(r6 ) ; ( r1)edge(r2)edge(r3 ) ; ( r2)edge(r4)edge(r5)edge(r6 ) ; ( @xmath380 ) rectangle ( @xmath381 ) ; ( @xmath382 ) ",
    "+ ( 0.2,-0.5 ) ; ( s0 ) at(@xmath383 ) ; ( s1 ) at(@xmath384 ) ; ( s2 ) at(@xmath385 ) ; ( s3 ) at(@xmath386 ) ; ( s4 ) at(@xmath387 ) ; ( s5 ) at(@xmath388 ) ; ( s6 ) at(@xmath389 ) ; at(@xmath390)0 ; at(@xmath391)1 ; at(@xmath392)2 ; at(@xmath393)3 ; at(@xmath394)4 ; at(@xmath395)5 ; at(@xmath396)6 ; ( s2)edge(s1)edge(s4)edge(s5)edge(s6 ) ; ( s0)edge(s4)edge(s5)edge(s6 ) ; ( s3)edge(s1)edge(s6 ) ; ( @xmath397 ) rectangle ( @xmath398 ) ;    ( @xmath399 )  + ( 0,-0.5 ) ; ( t0 ) at(@xmath400 ) ; ( t1 ) at(@xmath401 ) ; ( t2 ) at(@xmath402 ) ; ( t3 ) at(@xmath403 ) ; ( t4 ) at(@xmath404 ) ; ( t5 ) at(@xmath405 ) ; ( t6 ) at(@xmath406 ) ; ( t7 ) at(@xmath407 ) ; at(@xmath408)0 ; at(@xmath409)1 ; at(@xmath410)2 ; at(@xmath411)3 ; at(@xmath412)4 ; at(@xmath413)5 ; at(@xmath414)6 ; at(@xmath415)7 ; ( t0)edge(t2)edge(t3)edge(t4)edge(t5)edge(t6)edge(t7 ) ; ( t1)edge(t2)edge(t3)edge(t4)edge(t5)edge(t6)edge(t7 ) ; ( @xmath416 ) rectangle ( @xmath417 ) ; ( @xmath418 )  + ( 0,-0.5 ) ; ( u0 ) at(@xmath419 ) ; ( u1 ) at(@xmath420 ) ; ( u2 ) at(@xmath421 ) ; ( u3 ) at(@xmath422 ) ; ( u4 ) at(@xmath423 ) ; ( u5 ) at(@xmath424 ) ; ( u6 ) at(@xmath425 ) ; ( u7 ) at(@xmath426 ) ; at(@xmath427)0 ; at(@xmath428)1 ; at(@xmath429)2 ; at(@xmath430)3 ; at(@xmath431)4 ; at(@xmath432)5 ; at(@xmath433)6 ; at(@xmath434)7 ; ( u0)edge(u6)edge(u7 ) ; ( u1)edge(u2)edge(u3)edge(u4)edge(u5 ) ; ( u7)edge(u2)edge(u3)edge(u4)edge(u5 ) ; ( u6)edge(u2 ) ; ( @xmath435 ) rectangle ( @xmath436 ) ; ( @xmath437 ) ",
    "+ ( 0,-0.5 ) ; ( v0 ) at(@xmath438 ) ; ( v1 ) at(@xmath439 ) ; ( v2 ) at(@xmath440 ) ; ( v3 ) at(@xmath441 ) ; ( v4 ) at(@xmath442 ) ; ( v5 ) at(@xmath443 ) ; ( v6 ) at(@xmath444 ) ; ( v7 ) at(@xmath445 ) ; at(@xmath446)0 ; at(@xmath447)1 ; at(@xmath448)2 ; at(@xmath449)3 ; at(@xmath450)4 ; at(@xmath451)5 ; at(@xmath452)6 ; at(@xmath453)7 ; ( v0)edge(v5)edge(v6)edge(v7 ) ; ( v1)edge(v2)edge(v3)edge(v4 ) ; ( v7)edge(v2)edge(v3)edge(v4 ) ; ( v2)edge(v5)edge(v6 ) ; ( @xmath454 ) rectangle ( @xmath455 ) ; ( @xmath456 )  + ( 0,-0.5 ) ; ( w0 ) at(@xmath457 ) ; ( w1 ) at(@xmath458 ) ; ( w2 ) at(@xmath459 ) ; ( w3 ) at(@xmath460 ) ; ( w4 ) at(@xmath461 ) ; ( w5 ) at(@xmath462 ) ; ( w6 ) at(@xmath463 ) ; ( w7 ) at(@xmath464 ) ; at(@xmath465)0 ; at(@xmath466)1 ; at(@xmath467)2 ; at(@xmath468)3 ; at(@xmath469)4 ; at(@xmath470)5 ; at(@xmath471)6 ; at(@xmath472)7 ; ( w0)edge(w5)edge(w6 ) ; ( w1)edge(w2)edge(w3)edge(w4 ) ; ( w2)edge(w5 ) ; ( w4)edge(w6 ) ; ( w3)edge(w5)edge(w6 ) ; ( w7)edge(w0)edge(w2)edge(w4 ) ; ( @xmath473 ) rectangle ( @xmath474 ) ; ( @xmath475 ) ",
    "+ ( 0.1,-0.5 ) ; ( x0 ) at(@xmath476 ) ; ( x1 ) at(@xmath477 ) ; ( x2 ) at(@xmath478 ) ; ( x3 ) at(@xmath479 ) ; ( x4 ) at(@xmath480 ) ; ( x5 ) at(@xmath481 ) ; ( x6 ) at(@xmath482 ) ; ( x7 ) at(@xmath483 ) ; at(@xmath484)0 ; at(@xmath485)1 ; at(@xmath486)2 ; at(@xmath487)3 ; at(@xmath488)4 ; at(@xmath489)5 ; at(@xmath490)6 ; at(@xmath491)7 ; ( x6)edge(x4)edge(x5)edge(x0 ) ; ( x1)edge(x2)edge(x3 ) ; ( x5)edge(x2)edge(x3 ) ; ( x4)edge(x2 ) ; ( x7)edge(x0)edge(x4 ) ; ( @xmath492 ) rectangle ( @xmath493 ) ; ( @xmath364 )  + ( -0.1,-0.5 ) ; ( z0 ) at(@xmath494 ) ; ( z1 ) at(@xmath495 ) ; ( z2 ) at(@xmath496 ) ; ( z3 ) at(@xmath497 ) ; ( z4 ) at(@xmath498 ) ; ( z5 ) at(@xmath499 ) ; ( z6 ) at(@xmath500 ) ; ( z7 ) at(@xmath501 ) ; at(@xmath502)0 ; at(@xmath503)1 ; at(@xmath504)2 ; at(@xmath505)3 ; at(@xmath506)4 ; at(@xmath507)5 ; at(@xmath508)6 ; at(@xmath509)7 ; ( z6)edge(z4)edge(z5)edge(z0 ) ; ( z1)edge(z2)edge(z3 ) ; ( z5)edge(z2)edge(z3)edge(z6)edge(z7 ) ; ( z4)edge(z2 ) ; ( z7)edge(z0 ) ; ( @xmath510 ) rectangle ( @xmath511 ) ; ( @xmath512 ) ",
    "+ ( 0,-0.5 ) ; ( y0 ) at(@xmath513 ) ; ( y1 ) at(@xmath514 ) ; ( y2 ) at(@xmath515 ) ; ( y3 ) at(@xmath516 ) ; ( y4 ) at(@xmath517 ) ; ( y5 ) at(@xmath518 ) ; ( y6 )",
    "at(@xmath519 ) ; ( y7 ) at(@xmath520 ) ; at(@xmath521)0 ; at(@xmath522)1 ; at(@xmath523)2 ; at(@xmath524)3 ; at(@xmath525)4 ; at(@xmath526)5 ; at(@xmath527)6 ; at(@xmath528)7 ; ( y2)edge(y1)edge(y4)edge(y5)edge(y6)edge(y7 ) ; ( y0)edge(y4)edge(y5)edge(y6)edge(y7 ) ; ( y3)edge(y1)edge(y7 ) ; ( @xmath529 ) rectangle ( @xmath530 ) ;    .number of lattices and ( vertically indecomposable = v.i . ) ( semi)modular lattices up to isomorphism .",
    "new numbers are in bold . [ cols= \" > , > , > , > , > , > \" , ]",
    "let @xmath531 denote the number of modular lattices of size @xmath1 ( up to isomorphism ) . in this section",
    "we give a simple argument for a lower bound of this sequence .",
    "let @xmath533 be the three element lattice with 0 and 1 as bottom and top respectively .",
    "consider the following two extensions of an @xmath1-lattice @xmath8 : @xmath534 @xmath535 we declare an @xmath1-lattice @xmath8 to be an @xmath536-lattice or a @xmath537-lattice if it is obtained through the @xmath536 or @xmath537 construction respectively .        for @xmath539",
    ", we consider the cases where @xmath8 is a modular @xmath536-lattice and a modular @xmath537-lattice obtained through this construction .",
    "if @xmath8 is an @xmath536-lattice , then there are two atoms @xmath1 and @xmath102 in @xmath539 , both of which are covered by @xmath12 , independently of the choice of @xmath12 .",
    "therefore , @xmath1 and @xmath102 satisfy ( lower ) semimodularity .",
    "since the new element @xmath1 is not the common cover or co - cover of any two elements in @xmath539 and @xmath8 is modular , it follows that @xmath539 is modular .",
    "if @xmath8 is a @xmath537-lattice , then there is only one choice of @xmath12 ( the element used in the previous step ) since there is only one cover for @xmath102 .",
    "notice that the first @xmath537 step starting from an @xmath536-lattice ( or @xmath533 ) will generate an @xmath540 sublattice formed by the bottom element @xmath28 , the two atoms @xmath1 and @xmath102 and the cover @xmath12 used .",
    "after @xmath49 successive @xmath537 steps , there will be an @xmath541 sublattice formed by @xmath28 , @xmath12 , and the atoms @xmath542,  ,@xmath1 .",
    "therefore , after any @xmath537 step , the new element will share a common cover ( @xmath12 ) with all the atoms it shares a common co - cover ( @xmath28 ) with , and vice versa .",
    "since all other elements of @xmath539 satisfy ( lower ) semimodularity by modularity of @xmath8 , it follows that @xmath539 is modular .",
    "next , we want to show that @xmath538 and @xmath539 are not isomorphic to any other lattice obtained from this construction .",
    "consider two modular lattices @xmath8 and @xmath37 generated by the @xmath536-@xmath537 construction . since @xmath538 has a unique atom and @xmath543 has more than one atom , it follows that @xmath544 .",
    "if @xmath547 , there is more than one choice of atom .",
    "let @xmath548 be the number of atoms in both , then they both have been obtained through @xmath49 @xmath537 steps , and the @xmath49 atoms added through @xmath537 steps are automorphic",
    ". therefore removal of any of these atoms in @xmath539 and @xmath543 will generate two isomorphic modular lattices , hence @xmath549 .",
    "consequently no two non - isomorphic lattices can generate isomorphic lattices through the @xmath536-@xmath537 construction .",
    "we conclude the proof by induction . for @xmath550 , there are @xmath551 modular lattices in the @xmath552 construction ( the initial @xmath533 lattice ) .",
    "assume there are @xmath0 non - isomorphic modular lattices of size @xmath1 constructed via the @xmath536-@xmath537 construction .",
    "then each of these lattices will produce 2 new modular lattices which are not isomorphic to any of the lattices produced by any other non - isomorphic lattice . as a result , there are @xmath553 non - isomorphic modular lattice of size @xmath32 , thus completing the induction .",
    "( a0 ) at(0,0)0 ; ( a2 ) at(@xmath142)2 ; ( a1 ) at(@xmath554)1 ; ( a2)edge(a1)edge(a0 ) ; ( @xmath555 )  + ( 0.6,0 ) ; ( b0 ) at(@xmath556)0 ; ( b2 ) at(@xmath557)2 ; ( b3 ) at(@xmath558)3 ; ( b1 ) at(@xmath149)1 ; at(@xmath559)@xmath537 ; ( b2)edge(b1)edge(b0 ) ; ( b3)edge(b1)edge(b0 ) ;    ( @xmath560 )  + ( 0.6,0 ) ; ( c0 ) at(@xmath561)0 ; ( c2 ) at(@xmath562)2 ; ( c3 ) at(@xmath563)3 ; ( c4 ) at(@xmath564)4 ; ( c1 ) at(@xmath565)1 ; at(@xmath566)@xmath536 ; ( c2)edge(c1)edge(c4 ) ; ( c3)edge(c1)edge(c4 ) ; ( c4)edge(c0 ) ;    ( @xmath567 )  + ( 0.6,0 ) ; ( d0 ) at(@xmath568)0 ; ( d2 ) at(@xmath569)2 ; ( d3 ) at(@xmath168)3 ; ( d4 ) at(@xmath171)4 ; ( d5 ) at(@xmath169)5 ; ( d1 ) at(@xmath570)1 ; at(@xmath160)@xmath537 ; ( d2)edge(d1)edge(d4 ) ; ( d3)edge(d1)edge(d4 ) ; ( d4)edge(d0 ) ; ( d5)edge(d0)edge(d3 ) ;    ( @xmath571 )  + ( 0.6,0 ) ; ( e0 ) at(@xmath572)0 ; ( e2 ) at(@xmath573)2 ; ( e3 ) at(@xmath181)3 ; ( e4 ) at(@xmath183)4 ; ( e5 ) at(@xmath574)6 ; ( e6 ) at(@xmath575)5 ; ( e1 ) at(@xmath576)1 ; at(@xmath577)@xmath537 ; ( e2)edge(e1)edge(e4 ) ; ( e3)edge(e1)edge(e4 ) ; ( e4)edge(e0 ) ; ( e5)edge(e0)edge(e3 ) ; ( e6)edge(e0)edge(e3 ) ;    ( @xmath578 )  + ( 0.3,0 ) ; at(@xmath579 )  ; ( @xmath580 ) ",
    "+ ( 0.3,0 ) ; ( f0 ) at(@xmath581)0 ; ( f2 ) at(@xmath582)2 ; ( f3 ) at(@xmath583)3 ; ( f4 ) at(@xmath584)4 ;",
    "( f5 ) at(@xmath585 ) ; ( f6 ) at(@xmath586)5 ;",
    "( f7 ) at(@xmath587 ) ; ( f8 ) at(@xmath588 ) ; ( f1 ) at(@xmath589)1 ; at(@xmath590)@xmath537 ; at(@xmath591)@xmath537 ; ( f2)edge(f1)edge(f4 ) ; ( f3)edge(f1)edge(f4 ) ; ( f4)edge(f0 ) ; ( f6)edge(f0)edge(f3 ) ;    let @xmath592 and @xmath593 be the number of ( nonisomorphic ) lattices and distributive lattices of size @xmath1 . lower and upper bounds for these sequences are given in @xcite and @xcite respectively : @xmath594 @xmath595 the lower bound for modular lattices obtained in the preceding theorem can be improved slightly for @xmath596 by counting a larger class of planar modular lattices .",
    "however , it seems that currently the best known upper bound for ( semi)modular lattices is the same as the one for all lattices .    as suggested by one of the referees , we conclude with some observations about possible future research .",
    "there are several alternative representations for ( finite ) modular lattices , based on partial order geometries ( see e.g. @xcite ) or join - covers or the incidence of join and meet irreducibles .",
    "it is possible that enumeration algorithms using these representations would be more efficient , but this has not ( yet ) been explored .",
    "the algorithm we use can also be fairly easily adapted to other classes of lattices , such as 2-distributive lattices or lattices of breadth @xmath597 , either with or without adding modularity .",
    "however , any enumeration algorithm similar to the one presented here that builds lattices by adding elements one - by - one can not build only modular lattices if it is supposed to build all modular lattices ( this can be seen for example by removing any element from the subspace lattice of a finite projective plane , see figure  [ fano ] ) .      ( -3,1.5)(-2,3)(2,1.5)(3,3)(0,1.5)(1,3)(-2,1.5)(-1,3)(3,1.5)(-3,3)(1,1.5)(2,3)(-1,1.5)(0,3)(-3,1.5 ) ; ( 0,0)node(-3,1.5)node(-3,3)node(0,4.5)node ( -2,3)node(-2,1.5)node(0,0)(-1,1.5)node(-1,3)node(0,4.5) ( 0,3)node(0,1.5)node(0,0)(1,1.5)node(1,3)node(0,4.5) ( 2,3)node(2,1.5)node(0,0)(3,1.5)node(3,3)node(0,4.5 ) ;    we would like to thank michael fahy and nikos hatzopoulus for help with operating the computing clusters .",
    "we also thank the summer undergraduate research fellowship at chapman university for financial support .",
    "r. belohlavek and v. vychodil : residuated lattices of size @xmath598 12 , order 27 ( 2010 ) , 147161 .",
    "d. j. benson and j. h. conway : diagrams for modular lattices , j. pure and applied algebra 37 ( 1985 ) 111116 .",
    "r. dedekind : ber die von drei moduln erzeugte dualgruppe , math .",
    "ann . 53 ( 1900 ) , 371403 .",
    "m. ern , j. heitzig and j. reinhold : on the number of distributive lattices , electron .",
    "j. combin . 9 ( 2002 ) , 23 pp .",
    "u. faigle and c. herrmann : projective geometry on partially ordered sets , transactions a.m.s .",
    "266 ( 1981 ) , 267291 .",
    "i. a. faradzhev , constructive enumeration of combinatorial objects , internat .",
    "cnrs no.260 , combinatoire et theorie des graphes , paris ( 1976 ) , 131135 .",
    "g. grtzer , `` general lattice theory '' , 2nd edition , birkhuser , 1998 .",
    "j. heitzig and j. reinhold : counting finite lattices , algebra univers .",
    "48 ( 2002 ) 4353 .",
    "d. j. kleitman and k. j. winston : the asymptotic number of lattices , annals of discrete math . 6",
    "( 1980 ) 243249 .",
    "b. d. mckay : isomorph - free exhaustive generation , j. algorithms 26 ( 1998 ) 306324 .",
    "b. d. mckay and a. piperno : practical graph isomorphism , ii , http://arxiv.org/abs/1301.1493 , ( 2013 ) , 22 pp .",
    "r. c. read : every one a winner , or how to avoid isomorphism search when cataloguing combinatorial configurations , annals of discrete math . 2 ( 1978 ) 107120 ."
  ],
  "abstract_text": [
    "<S> modular lattices , introduced by r.  dedekind , are an important subvariety of lattices that includes all distributive lattices . </S>",
    "<S> heitzig and reinhold @xcite developed an algorithm to enumerate , up to isomorphism , all finite lattices up to size 18 . here </S>",
    "<S> we adapt and improve this algorithm to construct and count modular lattices up to size 24 , semimodular lattices up to size 22 , and lattices of size 19 . </S>",
    "<S> we also show that @xmath0 is a lower bound for the number of nonisomorphic modular lattices of size @xmath1 . </S>"
  ]
}