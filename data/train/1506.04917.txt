{
  "article_text": [
    "sequence comparison is an important step in many basic tasks in bioinformatics , from phylogenies reconstruction to genomes assembly .",
    "it is often realized by sequence alignment techniques , which are computationally expensive , requiring quadratic time in the length of the sequences .",
    "this has led to increased research into _ alignment - free _ techniques .",
    "hence standard notions for sequence comparison are gradually being complemented and in some cases replaced by alternative ones  @xcite .",
    "one such notion is based on comparing the words that are absent in each sequence  @xcite .",
    "a word is an _ absent word _ ( or a forbidden word ) of some sequence if it does not occur in the sequence .",
    "absent words represent a type of _ negative information _ : information about what does not occur in the sequence .    given a sequence of length @xmath1 , the number of absent words of length at most @xmath1 is exponential in @xmath1 .",
    "however , the number of certain classes of absent words is only linear in @xmath1 .",
    "this is the case for _ minimal absent words _ , that is , absent words in the sequence whose all proper factors occur in the sequence  @xcite .",
    "an upper bound on the number of minimal absent words is known to be @xmath2  @xcite , where @xmath3 is the size of the alphabet @xmath4 .",
    "hence it may be possible to compare sequences in time proportional to their lengths , for a fixed - sized alphabet , instead of proportional to the product of their lengths . in what follows ,",
    "we consider sequences on a _ fixed - sized alphabet _ since the most commonly studied alphabet is @xmath5 .",
    "an @xmath6-time and @xmath6-space algorithm for computing all minimal absent words on a fixed - sized alphabet based on the construction of suffix automata was presented in  @xcite .",
    "the computation of minimal absent words based on the construction of suffix arrays was considered in  @xcite ; although this algorithm has a linear - time performance in practice , the worst - case time complexity is @xmath7 .",
    "new @xmath6-time and @xmath6-space suffix - array - based algorithms were presented in  @xcite to bridge this unpleasant gap .",
    "an implementation of the algorithm presented in  @xcite is currently , and to the best of our knowledge , the fastest available for the computation of minimal absent words .",
    "a more space - efficient solution to compute all minimal absent words in time @xmath6 was also presented in  @xcite .    in this article , we consider the problem of comparing two sequences @xmath8 and @xmath9 of respective lengths @xmath10 and @xmath1 , using their sets of minimal absent words . in  @xcite ,",
    "chairungsee and crochemore introduced a measure of similarity between two sequences based on the notion of minimal absent words .",
    "they made use of a length - weighted index to provide a measure of similarity between two sequences , using sample sets of their minimal absent words , by considering the length of each member in the symmetric difference of these sample sets .",
    "this measure can be trivially computed in time and space @xmath11 provided that these sample sets contain minimal absent words of some bounded length @xmath12 . for unbounded length ,",
    "the same measure can be trivially computed in time @xmath13 : for a given sequence , the cumulative length of all its minimal absent words can grow _ quadratically _ with respect to the length of the sequence .    the same problem can be considered for two _ circular _ sequences .",
    "the measure of similarity of chairungsee and crochemore can be used in this setting provided that one extends the definition of minimal absent words to circular sequences . in section  [ sec : circ_seq_comp ] , we give a definition of minimal absent words for a circular sequence from the formal language theory point of view .",
    "we believe that this definition may also be of interest from the point of view of symbolic dynamics , which is the original context in which minimal absent words have been introduced  @xcite .    * our contribution . * here we make the following threefold contribution :    a ) : :    we present an @xmath11-time and    @xmath11-space algorithm to compute the    similarity measure introduced by chairungsee and crochemore by    considering _ all _ minimal absent words of two sequences    @xmath8 and @xmath9 of lengths @xmath10 and    @xmath1 , respectively ; thereby showing that it is indeed    possible to compare two sequences in time proportional to their    lengths ( section  [ sec : seq_comp ] ) .",
    "b ) : :    we show how this algorithm can be applied to compute this similarity    measure for two circular sequences @xmath8 and @xmath9    of lengths @xmath10 and @xmath1 , respectively , in the    same time and space complexity as a result of the extension of the    definition of minimal absent words to circular sequences    ( section  [ sec : circ_seq_comp ] ) .",
    "c ) : :    we provide an open - source code implementation of our algorithms and    investigate potential applications of our theoretical findings    ( section  [ sec : imp_app ] ) .",
    "we begin with basic definitions and notation .",
    "let @xmath14y[1]\\dd y[n-1]$ ] be a _ word _ of _ length _",
    "@xmath15 over a finite ordered _ alphabet _ @xmath4 of size @xmath16 . for two positions @xmath17 and @xmath18 on @xmath9 , we denote by @xmath19=y[i]\\dd y[j]$ ] the _ factor _ ( sometimes called _ substring _ ) of @xmath9 that starts at position @xmath17 and ends at position @xmath18 ( it is empty if @xmath20 ) , and by @xmath21 the _ empty word _ , word of length 0 .",
    "we recall that a prefix of @xmath9 is a factor that starts at position 0 ( @xmath22 $ ] ) and a suffix is a factor that ends at position @xmath23 ( @xmath24 $ ] ) , and that a factor of @xmath9 is a _ proper _ factor if it is not @xmath9 itself .",
    "the set of all the factors of the word @xmath9 is denoted by @xmath25 .",
    "let @xmath8 be a word of length @xmath26 .",
    "we say that there exists an _ occurrence _ of @xmath8 in @xmath9 , or , more simply , that @xmath8 _ occurs in _ @xmath9 , when @xmath8 is a factor of @xmath9 .",
    "every occurrence of @xmath8 can be characterised by a starting position in @xmath9 .",
    "thus we say that @xmath8 occurs at the _ starting position _",
    "@xmath17 in @xmath9 when @xmath27 $ ] .",
    "opposingly , we say that the word @xmath8 is an _ absent word _ of @xmath9 if it does not occur in @xmath9 .",
    "the absent word @xmath8 of @xmath9 is _ minimal _ if and only if all its proper factors occur in @xmath9 .",
    "the set of all minimal absent words for a word @xmath9 is denoted by @xmath28 .",
    "for example , if @xmath29 , then @xmath30 . in general ,",
    "if we suppose that all the letters of the alphabet appear in @xmath9 of length @xmath1 , the length of a minimal absent word of @xmath9 lies between @xmath31 and @xmath32 .",
    "it is equal to @xmath32 if and only if @xmath9 is the catenation of @xmath1 copies of the same letter .",
    "so , if @xmath9 contains occurrences of at least two different letters , the length of a minimal absent word for @xmath9 is bounded from above by @xmath1 .",
    "a _ language _ over the alphabet @xmath4 is a set of finite words over @xmath4 .",
    "a language is _ regular _ if it is recognized by a finite state automaton .",
    "a language is _ factorial _ if it contains all the factors of its words .",
    "a language is _ antifactorial _ if no word in the language is a proper factor of another word in the language . given a word @xmath8 , the language _ generated _ by @xmath8 is the language @xmath33 .",
    "the _ factorial closure _ of a language @xmath34 is the language @xmath35 .",
    "given a factorial language @xmath34 , one can define the ( antifactorial ) language of minimal absent words for @xmath34 as @xmath36 .",
    "notice that @xmath37 is not the same language as the union of @xmath38 for @xmath39 .",
    "we denote by the _ suffix array _ of @xmath9 of length @xmath1 , that is , an integer array of size @xmath1 storing the starting positions of all ( lexicographically ) sorted suffixes of @xmath9 , i.e.  for all @xmath40 we have @xmath41 \\dd n-1 ] < y[{\\textsf{sa}}{}[r ] \\dd n - 1]$ ]  @xcite .",
    "let @xmath42 denote the length of the longest common prefix between @xmath43 \\dd n - 1]$ ] and @xmath44 \\dd n - 1]$ ] for all positions @xmath45 , @xmath46 on @xmath9 , and @xmath47 otherwise .",
    "we denote by the _ longest common prefix _ array of @xmath9 defined by @xmath48={\\textsf{lcp}}{}(r-1 , r)$ ] for all @xmath49 , and @xmath50 = 0 $ ] .",
    "the inverse of the array is defined by @xmath51 = r$ ] , for all @xmath52 .",
    "it is known that  @xcite , , and  @xcite of a word of length @xmath1 can be computed in time and space @xmath6 .    in what follows , as already proposed in  @xcite , for every word",
    "@xmath9 , the set of minimal words associated with @xmath9 , denoted by @xmath28 , is represented as a set of tuples @xmath53 , where the corresponding minimal absent word @xmath8 of @xmath9 is defined by @xmath54=a$ ] , @xmath55 , and @xmath56 = y[i \\dd j]$ ] , where @xmath57 .",
    "it is known that if @xmath58 and @xmath59 , then @xmath60  @xcite .    in  @xcite , chairungsee and crochemore",
    "introduced a measure of similarity between two words @xmath8 and @xmath9 based on the notion of minimal absent words .",
    "let @xmath61 ( resp .",
    "@xmath62 ) denote the set of minimal absent words of length at most @xmath12 of @xmath8 ( resp .",
    "@xmath9 ) .",
    "the authors made use of a length - weighted index to provide a measure of the similarity between @xmath8 and @xmath9 , using their sample sets @xmath61 and @xmath62 , by considering the length of each member in the symmetric difference @xmath63 of the sample sets . for sample sets",
    "@xmath61 and @xmath62 , they defined this index to be @xmath64 this work considers the following generalized version of the same problem .",
    "we also consider the aforementioned problem for two circular words .",
    "a circular word of length @xmath10 can be viewed as a traditional linear word which has the left- and right - most letters wrapped around and stuck together in some way . under this notion ,",
    "the same circular word can be seen as @xmath10 different linear words , which would all be considered equivalent .",
    "more formally , given a word @xmath8 of length @xmath10 , we denote by @xmath65x[0 \\dd i-1]$ ] , @xmath66 , the @xmath17-th _ rotation _ of @xmath8 , where @xmath67 . given two words @xmath8 and",
    "@xmath9 , we define @xmath68 if and only if there exist @xmath17 , @xmath69 , such that @xmath70 .",
    "a _ circular word _",
    "@xmath71 is a conjugacy class of the equivalence relation @xmath72 .",
    "given a circular word @xmath71 , any ( linear ) word @xmath8 in the equivalence class @xmath71 is called a _",
    "linearization _ of the circular word @xmath71 .",
    "conversely , given a linear word @xmath8 , we say that @xmath71 is a _ circularization _ of @xmath8 if and only if @xmath8 is a linearization of @xmath71 .",
    "the set @xmath73 of factors of the circular word @xmath71 is equal to the set @xmath74 of factors of @xmath75 whose length is at most @xmath76 , where @xmath8 is any linearization of @xmath71 .",
    "note that if @xmath77 and @xmath78 are two rotations of the same word , then the factorial languages @xmath79 and @xmath80 coincide , so one can unambiguously define the ( infinite ) language @xmath81 as the language @xmath82 , where @xmath8 is any linearization of @xmath71 .    in section  [ sec : circ_seq_comp ] , we give the definition of the set @xmath83 of minimal absent words for a circular word @xmath71 .",
    "we will prove that the following problem can be solved with the same time and space complexity as its counterpart in the linear case .",
    "the goal of this section is to provide the first linear - time and linear - space algorithm for computing the similarity measure ( see section  [ sec : prem ] ) between two words defined over a fixed - sized alphabet . to this end , we consider two words @xmath8 and @xmath9 of lengths @xmath10 and @xmath1 , respectively , and their associated sets of minimal absent words , @xmath38 and @xmath28 , respectively .",
    "next , we give a linear - time and linear - space solution for the maw - sequencecomparison problem .",
    "it is known from  @xcite and  @xcite that we can compute the sets @xmath38 and @xmath28 in linear time and space with respect to the two lengths @xmath10 and @xmath1 , respectively .",
    "the idea of our strategy consists of a merge sort on the sets @xmath38 and @xmath28 , after they have been ordered with the help of suffix arrays .    to this end",
    ", we construct the suffix array associated to the word @xmath84 , together with the implicit @xmath85 array corresponding to it .",
    "all of these structures can be constructed in time and space @xmath86 , as mentioned earlier .",
    "furthermore , we can preprocess the array for range minimum queries , which we denote by @xmath87  @xcite . with the preprocessing complete ,",
    "the longest common prefix @xmath88 of two suffixes of @xmath89 starting at positions @xmath90 and @xmath0 can be computed in constant time  @xcite , using the formula @xmath91",
    "+ 1,\\textsf{isa}[q])].$ ]    using these data structures , it is straightforward to sort the tuples in the sets @xmath38 and @xmath28 lexicographically .",
    "that is , two tuples @xmath92 , are ordered according to the letter following their longest common prefix , or when it is not the case , with the one being the prefix , coming first . to do this",
    ", we simply go once through the suffix array associated to @xmath89 and assign to each tuple in @xmath38 , respectively @xmath28 , the rank of the suffix starting at the position indicated by its second component , in the suffix array . since sorting an array of @xmath1 distinct integers , such that each is in @xmath93 $ ] , can be done in time @xmath6 ( using bucket sort , for example ) , we can sort now each of the sets of minimal absent words , taking into consideration the letter on the first position and these ranks .",
    "thus , from now on , we assume that @xmath94 where @xmath95 is lexicographically smaller than @xmath96 , for @xmath97 , and @xmath98 , where @xmath99 is lexicographically smaller than @xmath100 , for @xmath101 .",
    "provided these tools , we now proceed to do the merge .",
    "thus , considering that we are analysing the @xmath102th tuple in @xmath38 and the @xmath103th tuple in @xmath28 , we note that the two are equal if and only if @xmath104=y_j[0]$ ] and @xmath105 , |x|+y_j[1])\\geq \\ell , \\mbox { where } \\ell = x_i[2]-x_i[1]=y_j[2]-y_j[1].\\ ] ] in other words , the two minimal absent words are equal if and only if their first letters coincide , they have equal length @xmath106 , and the longest common prefix of the suffixes of @xmath89 starting at the positions indicated by the second components of the tuples has length at least @xmath12",
    ".    such a strategy will empower us with the means for constructing a new set @xmath107 . at each step , when analysing tuples @xmath95 and @xmath99 we proceed as following : @xmath108 observe that the last condition is saying that basically each common tuple is added only once to their union .",
    "furthermore , simultaneously with this construction we can also calculate the similarity between the words , given by @xmath109 , which is initially set to @xmath47 .",
    "thus , at each step , when comparing the tuples @xmath95 and @xmath99 , we update @xmath110 we impose the increment of both @xmath17 and @xmath18 in the case of equality as in this case we only look at the symmetric difference between the sets of minimal absent words .",
    "as all these operations take constant time , once per each tuple in @xmath38 and @xmath28 , it is easily concluded that the whole operation takes in the case of a fixed - sized alphabet time and space @xmath86 .",
    "thus , we can compute the symmetric difference between the _ complete _ sets of minimal absent words , as opposed to  @xcite , of two words defined over a fixed - sized alphabet , in linear time and space with respect to the lengths of the two words .",
    "we obtain the following result .",
    "[ the : maw ] problem maw - sequencecomparison can be solved in time and space @xmath86 .",
    "next , we discuss two possible definitions for the minimal absent words of a circular word , and highlight the differences between them .    we start by recalling some basic facts about minimal absent words . for further details and references the reader",
    "is recommended  @xcite .",
    "every factorial language @xmath34 is uniquely determined by its ( antifactorial ) language of minimal absent words @xmath37 , through the equation @xmath111 . the converse is also true , since by the definition of a minimal absent word we have @xmath112 .",
    "the previous equations define a bijection between factorial and antifactorial languages .",
    "moreover , this bijection preserves regularity . in the case of a single ( linear ) word @xmath8 ,",
    "the set of minimal absent words for @xmath8 is indeed the antifactorial language @xmath113 .",
    "furthermore , we can retrieve @xmath8 from its set of minimal absent words in linear time and space @xcite .",
    "recall that given a circular word @xmath71 , the set @xmath73 of factors of @xmath71 is equal to the set @xmath74 of factors of @xmath75 whose lengths are at most @xmath76 , where @xmath8 is any linearization of @xmath71 . since a circular word @xmath71 is a conjugacy class containing all the rotations of a linear word @xmath8 , the language @xmath73 can be seen as the factorial closure of the set @xmath114 .",
    "this leads to the first definition of the set of minimal absent words for @xmath71 , that is the set @xmath115 .",
    "for instance , if @xmath116 , we have @xmath117    the advantage of this definition is that we can retrieve uniquely @xmath71 from @xmath118 .",
    "however , the total size of @xmath118 ( that is , the sum of the lengths of its elements ) can be very large , as the following lemma suggests .",
    "let @xmath71 be a circular word of length @xmath119 .",
    "the set @xmath118 contains precisely @xmath12 words of maximal length @xmath120 , where @xmath12 is the number of distinct rotations of any linearization @xmath8 of @xmath71 , that is , the cardinality of @xmath114 .",
    "let @xmath121x[1 ] \\dd x[m-1]$ ] be a linearization of @xmath71 .",
    "the word obtained by appending to @xmath8 its first letter , @xmath54x[1 ] \\dd x[m-1]x[0]$ ] , belongs to @xmath118 , since it has length @xmath120 , hence it can not belong to @xmath73 , but its maximal proper prefix @xmath122 and its maximal proper suffix @xmath123 \\dd x[m-1]x[0]$ ] belong to @xmath73 .",
    "the same argument shows that for any rotation @xmath124x[i+1 ] \\dd x[m-1]x[0]\\dd x[i-1]$ ] of @xmath8 , the word @xmath125x[i+1 ] \\dd x[m-1]x[0]\\dd x[i-1]x[i]$ ] , obtained by appending to @xmath126 its first letter , belongs to @xmath118 .",
    "conversely , if a word of maximal length @xmath120 is in @xmath118 , then its maximal proper prefix and its maximal proper suffix are words of length @xmath10 in @xmath73 , so they must be consecutive rotations of @xmath8 .    therefore , the number of words of maximal length @xmath120 in @xmath118 equals the number of distinct rotations of @xmath8 , hence the statement follows .",
    "this is in sharp contrast with the situation for linear words , where the set of minimal absent words can be represented on a trie having size linear in the length of the word .",
    "indeed , the algorithm mf - trie , introduced in  @xcite , builds the tree - like deterministic automaton accepting the set of minimal absent words for a word @xmath8 taking as input the factor automaton of @xmath8 , that is the minimal deterministic automaton recognizing the set of factors of @xmath8 .",
    "the leaves of the trie correspond to the minimal absent words for @xmath8 , while the internal states are those of the factor automaton .",
    "since the factor automaton of a word @xmath8 has less than @xmath127 states ( for details , see  @xcite ) , this provides a representation of the minimal absent words of a word of length @xmath1 in space @xmath128 .",
    "this algorithmic drawback leads us to the second definition .",
    "this second definition of minimal absent words for circular strings has been already introduced in  @xcite .",
    "first , we give a combinatorial result which shows that when considering circular words it does not make sense to look at absent words obtained from more than two rotations .    [ lem : general ] for any positive integer @xmath129 and any word @xmath130 , the set @xmath131 is empty .",
    "this obviously holds for all words @xmath130 of length 1 .",
    "assume towards a contradiction that this is not the case in general .",
    "hence , there must exist a word @xmath132 of length @xmath10 that fulfills the conditions in the lemma , thus @xmath133 and @xmath134 .",
    "furthermore , since the length @xmath135 prefix and the length @xmath135 suffix of every minimal absent word occur in the main word at non - consecutive positions , there must exist positions @xmath136 such that @xmath137=u^{k+1}[i+1\\dd i+m-2]=u^{k+1}[j+1\\dd j+m-2].\\end{aligned}\\ ] ] obviously , following equation  ( [ eq:1 ] ) , since @xmath138 , we have that @xmath139 $ ] is @xmath140-periodic .",
    "but , we know that @xmath141 $ ] is also @xmath1-periodic . thus , following a direct application of the periodicity lemma we have that @xmath141 $ ] is @xmath142-periodic .",
    "but , in this case we have that @xmath130 is @xmath90-periodic , and , therefore , @xmath143=u[j]$ ] , which leads to a contradiction with the fact that @xmath132 is a minimal absent word , whenever @xmath17 is defined .",
    "thus , it must be the case that @xmath144 . using the same strategy and looking at positions @xmath145 $ ] and",
    "@xmath146 $ ] , we conclude that @xmath147 . therefore , in this case , we have that @xmath148 , which is a contradiction with the fact that the word @xmath132 fulfills the conditions of the lemma .",
    "this concludes the proof .",
    "observe now that the set @xmath149 consists in fact of all extra minimal absent words generated whenever we look at more than one rotation , that do not include the length arguments .",
    "that is , @xmath149 does not include the words bounding the maximum length that a word is allowed , nor the words created , or lost , during a further concatenation of an image of @xmath130 .",
    "however , when considering an iterative concatenation of the word , these extra elements determined by the length constrain cancel each other .    as observed in section",
    "[ sec : prem ] , two rotations of the same word @xmath8 generate two languages that have the same set of factors .",
    "so , we can unambiguously associate to a circular word @xmath71 the ( infinite ) factorial language @xmath81 .",
    "it is therefore natural to define the set of minimal absent words for the circular word @xmath71 as the set @xmath150 .",
    "for instance , if @xmath151 , then we have @xmath152    this second definition is much more efficient in terms of space , as we show below . in particular",
    ", the length of the words in @xmath150 is bounded from above by @xmath76 , hence @xmath150 is a finite set .",
    "recall that a word @xmath8 is _ a power _ of a word @xmath9 if there exists a positive integer @xmath153 such that @xmath8 is expressed as @xmath129 consecutive concatenations of @xmath9 , denoted by @xmath154 .",
    "conversely , a word @xmath8 is _ primitive _ if @xmath154 implies @xmath155 .",
    "notice that a word is primitive if and only if any of its rotation is .",
    "we can therefore extend the definition of primitivity to circular words .",
    "the definition of @xmath150 does not allow one to uniquely reconstruct @xmath71 from @xmath150 , unless @xmath71 is known to be primitive , since it is readily verified that @xmath156 and therefore also the minimal absent words of these two languages coincide .",
    "however , from the algorithmic point of view , this issue can be easily managed by storing the length @xmath76 of a linearization @xmath8 of @xmath71 together with the set @xmath150 . moreover , in most practical cases , for example when dealing with biological sequences , it is highly unlikely that the circular word considered is not primitive .",
    "the difference between the two definitions above is presented in the next lemma .",
    "[ lem : twodef ] @xmath157    clearly , @xmath158 .",
    "the statement then follows from the definition of minimal absent words .",
    "based on the previous discussion , we set @xmath159 , while the following corollary comes straightforwardly as a consequence of lemma  [ lem : general ] .",
    "[ lem : circ ] let @xmath71 be a circular word",
    ". then @xmath160 .",
    "corollary  [ lem : circ ] was first introduced as a definition for the set of minimal absent words of a circular word in  @xcite . using the result of corollary  [ lem : circ ]",
    ", we can easily extend the algorithm described in the previous section to the case of circular words .",
    "that is , given two circular words @xmath71 of length @xmath10 and @xmath161 of length @xmath1 , we can compute in time and space @xmath86 the quantity @xmath162 .",
    "we obtain the following result .",
    "[ the : cmaw ] problem maw - circularsequencecomparison can be solved in time and space @xmath86 .",
    "we implemented the presented algorithms as programme to perform pairwise sequence comparison for a set of sequences using minimal absent words .",
    "uses programme  @xcite for linear - time and linear - space computation of minimal absent words using suffix array .",
    "was implemented in the @xmath163 programming language and developed under gnu / linux operating system .",
    "it takes , as input argument , a file in multifasta format with the input sequences , and then any of the two methods , for _ linear _ or _ circular _ sequence comparison , can be applied .",
    "it then produces a file in phylip format with the distance matrix as output .",
    "cell @xmath164 $ ] of the matrix stores @xmath165 ( or @xmath162 for the circular case ) .",
    "the implementation is distributed under the gnu general public license ( gpl ) , and it is available at http://github.com/solonas13/maw , which is set up for maintaining the source code and the man - page documentation . notice that _ all _ input datasets and the produced outputs referred to in this section are publicly maintained at the same web - site .",
    "an important feature of the proposed algorithms is that they require space linear in the length of the sequences ( see theorem  [ the : maw ] and theorem  [ the : cmaw ] ) .",
    "hence , we were also able to implement using the open multi - processing ( openmp ) pi for shared memory multiprocessing programming to distribute the workload across the available processing threads without a large memory footprint .    * application . *",
    "recently , there has been a number of studies on the biological significance of absent words in various species  @xcite . in  @xcite ,",
    "the authors presented dendrograms from dinucleotide relative abundances in sets of minimal absent words for prokaryotes and eukaryotic genomes .",
    "the analyses support the hypothesis that minimal absent words are inherited through a common ancestor , in addition to lineage - specific inheritance , only in vertebrates . very recently , in  @xcite , it was shown that there exist three minimal words in the ebola virus genomes which are absent from human genome .",
    "the authors suggest that the identification of such species - specific sequences may prove to be useful for the development of both diagnosis and therapeutics .    in this section ,",
    "we show a potential application of our results for the construction of dendrograms for dna sequences with circular structure .",
    "circular dna sequences can be found in viruses , as plasmids in archaea and bacteria , and in the mitochondria and plastids of eukaryotic cells .",
    "circular sequence comparison thus finds applications in several contexts such as reconstructing phylogenies using viroids rna  @xcite or mitochondrial dna ( mtdna )  @xcite .",
    "conventional tools to align circular sequences could yield an incorrectly high genetic distance between closely - related species . indeed ,",
    "when sequencing molecules , the position where a circular sequence starts can be totally arbitrary . due to this _ arbitrariness _ , a suitable rotation of one sequence would give much better results for a pairwise alignment  @xcite .",
    "in what follows , we demonstrate the power of minimal absent words to pave a path to resolve this issue by applying corollary  [ lem : circ ] and theorem  [ the : cmaw ] .",
    "next we do not claim that a solid phylogenetic analysis is presented but rather an investigation for potential applications of our theoretical findings .",
    "we performed the following experiment with synthetic data .",
    "first , we simulated a basic dataset of dna sequences using indelible  @xcite .",
    "the number of taxa , denoted by @xmath166 , was set to @xmath167 ; the length of the sequence generated at the root of the tree , denoted by @xmath168 , was set to 2500bp ; and the substitution rate , denoted by @xmath169 , was set to @xmath170 .",
    "we also used the following parameters : a deletion rate , denoted by @xmath171 , of @xmath172 _ relative _ to substitution rate of @xmath173 ; and an insertion rate , denoted by @xmath174 , of @xmath175 _ relative _ to substitution rate of @xmath173 .",
    "the parameters were chosen based on the genetic diversity standard measures observed for sets of mtdna sequences from primates and mammals  @xcite .",
    "we generated another instance of the basic dataset , containing one _ arbitrary _ rotation of each of the @xmath166 sequences from the basic dataset .",
    "we then used this randomized dataset as input to by considering @xmath162 as the distance metric .",
    "the output of was passed as input to  @xcite , an efficient implementation of neighbor - joining  @xcite , a well - established hierarchical clustering algorithm for inferring dendrograms ( trees ) .",
    "we thus used to infer the respective tree @xmath176 under the neighbor - joining criterion .",
    "we also inferred the tree @xmath177 by following the same pipeline , but by considering @xmath165 as distance metric , as well as the tree @xmath178 by using the _ basic _ dataset as input of this pipeline and @xmath162 as distance metric . hence , notice that @xmath178 represents the original tree .",
    "finally , we computed the pairwise robinson - foulds ( rf ) distance  @xcite between : @xmath176 and @xmath178 ; and @xmath177 and @xmath178 .",
    "let us define _ accuracy _ as the difference between 1 and the relative pairwise rf distance .",
    "we repeated this experiment by simulating different datasets @xmath179 and measured the corresponding accuracy .",
    "the results in table  [ tab : accuracy ] ( see @xmath176 vs. @xmath178 ) suggest that by considering @xmath162 we can always re - construct the original tree even if the sequences have first been arbitrarily rotated ( corollary  [ lem : circ ] ) .",
    "this is not the case ( see @xmath177 vs. @xmath178 ) if we consider @xmath165 .",
    "notice that @xmath180 accuracy denotes a ( relative ) pairwise rf distance of 0 .",
    "in this article , complementary to measures that refer to the composition of sequences in terms of their constituent patterns , we considered sequence comparison using minimal absent words , information about what does not occur in the sequences .",
    "we presented the first linear - time and linear - space algorithm to compare two sequences by considering _",
    "all _ their minimal absent words ( theorem  [ the : maw ] ) . in the process",
    ", we presented some results of combinatorial interest , and also extended the proposed techniques to circular sequences .",
    "the power of minimal absent words is highlighted by the fact that they provide a tool for sequence comparison that is as efficient for circular as it is for linear sequences ( corollary  [ lem : circ ] and theorem  [ the : cmaw ] ) ; whereas , this is not the case , for instance , using the general edit distance model  @xcite .",
    "finally , a preliminary experimental study shows the potential of our theoretical findings .    our immediate target is to consider the following _ incremental _ version of the same problem : given an appropriate encoding of a comparison between sequences @xmath8 and @xmath9 ,",
    "can one incrementally compute the answer for @xmath8 and @xmath181 , and the answer for @xmath8 and @xmath182 , efficiently , where @xmath183 is an additional letter ?",
    "incremental sequence comparison , under the edit distance model , has already been considered in  @xcite .",
    "in  @xcite , the authors considered a more powerful generalization of the @xmath0-gram distance ( see  @xcite for definition ) to compare @xmath8 and @xmath9 .",
    "this generalization comprises partitioning @xmath8 and @xmath9 in @xmath168 blocks each , as evenly as possible , computing the @xmath0-gram distance between the corresponding block pairs , and then summing up the distances computed blockwise to obtain the new measure .",
    "we are also planning to apply this generalization to the similarity measure studied here and evaluate it using real and synthetic data .",
    "we warmly thank alice heliou for her inestimable code contribution and antonio restivo for useful discussions .",
    "gabriele fici s work was supported by the prin 2010/2011 project `` automi e linguaggi formali : aspetti matematici e applicativi '' of the italian ministry of education ( miur ) and by the `` national group for algebraic and geometric structures , and their applications '' ( gnsaga  indam ) .",
    "robert merca s work was supported by the p.r.i.m.e .",
    "programme of daad co - funded by bmbf and eu s 7th framework programme ( grant 605728 ) .",
    "solon p. pissis s work was supported by a research grant ( # rg130720 ) awarded by the royal society .",
    "barton , c. , iliopoulos , c.s .",
    ", kundu , r. , pissis , s.p . ,",
    "retha , a. , vayani , f. : accurate and efficient methods to improve multiple circular sequence alignment . in : sea , lncs ,",
    "vol . 9125 , pp .",
    "247258 ( 2015 )"
  ],
  "abstract_text": [
    "<S> sequence comparison is a prerequisite to virtually all comparative genomic analyses . </S>",
    "<S> it is often realized by sequence alignment techniques , which are computationally expensive . </S>",
    "<S> this has led to increased research into alignment - free techniques , which are based on measures referring to the composition of sequences in terms of their constituent patterns . </S>",
    "<S> these measures , such as @xmath0-gram distance , are usually computed in time linear with respect to the length of the sequences . in this article , we focus on the complementary idea : how two sequences can be efficiently compared based on information that does not occur in the sequences . </S>",
    "<S> a word is an _ absent word _ of some sequence if it does not occur in the sequence . </S>",
    "<S> an absent word is _ minimal _ if all its proper factors occur in the sequence . here </S>",
    "<S> we present the first linear - time and linear - space algorithm to compare two sequences by considering _ </S>",
    "<S> all _ their minimal absent words . in the process </S>",
    "<S> , we present results of combinatorial interest , and also extend the proposed techniques to compare circular sequences . </S>"
  ]
}