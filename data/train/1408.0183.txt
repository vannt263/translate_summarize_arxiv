{
  "article_text": [
    "let @xmath0 be a finite set of discrete data , with @xmath1 , and @xmath2 .",
    "the @xmath3 are called the _ nodes _ , while the ( corresponding ) @xmath4 are the _ data values_. the latter are obtained by sampling some ( unknown ) function @xmath5 at the nodes , i.e. @xmath6 , @xmath7 .    therefore , the scattered data interpolation problem consists in finding a continuous function @xmath8 such that @xmath9 here , we consider the problem of constructing an efficient algorithm for bivariate interpolation of ( large ) scattered data sets .",
    "it is based on the _ partition of unity method _ for constructing a global interpolant by blending radial basis functions ( rbfs ) as local approximants and using locally supported weight functions .",
    "now , starting from the results of previous researches ( see @xcite ) where efficient searching procedures based on the partition of the domain in strips or spherical zones are considered , we extend the previous ideas replacing the strip - based partition structure with a cell - based one .",
    "the latter leads to the creation of a cell - based searching procedure , whose origin comes from the repeated use of a quicksort routine with respect to different directions , enabling us to pass from not ordered to ordered data structures .",
    "in particular , this process is strictly related to the construction of a partition of the domain @xmath10 in square cells , which consists in generating two orthogonal families of parallel strips , where the original data set is suitably split up in ordered data subsets .    then , exploiting the ordered data structure and the domain partition , the cell algorithm is efficiently implemented and optimized by connecting the method itself with the effective cell - based searching procedure . more precisely , the considered technique is characterized by the construction of a double structure of crossed strips , which partitions the domain in square cells and strictly depends on the dimension of its subdomains , providing a significant improvement in the searching procedures of the nearest neighbour points compared to the searching techniques in @xcite .",
    "the final result is an efficient algorithm for bivariate interpolation of scattered data .",
    "finally , complexity analysis and numerical tests show the high efficiency of the proposed algorithm .",
    "the paper is organized as follows . in section 2",
    "we recall some theoretical results : firstly , we introduce the radial basis functions referring to existence and uniqueness of rbf interpolants , then we give a general description of the partition of unity method , which makes use of local rbf approximants . in section 3 ,",
    "we present in detail the cell algorithm , which is efficiently implemented and optimized by using a cell - based searching procedure .",
    "then , in section 4 complexity of this algorithm is analyzed as well .",
    "finally , section 5 shows numerical results concerning efficiency and accuracy of the cell - based partition algorithm .",
    "a suitable approach to solving the scattered data interpolation problem is to make the assumption that the interpolating function @xmath11 is expressed as a linear combination of _ radial basis functions _ @xmath12 , i.e. , @xmath13 where @xmath14 is the euclidean distance , and @xmath11 satisfies the interpolation conditions .",
    "thus , solving the interpolation problem under this assumption leads to a system of linear equations of the form @xmath15 where the entries of the interpolation matrix @xmath16 are given by @xmath17 @xmath18^t$ ] , and @xmath19^t$ ] .",
    "moreover , we know that the interpolation problem is _ well - posed _ , that is a solution to a problem exists and is unique , if and only if the matrix @xmath16 is non - singular .",
    "a sufficient condition to have non - singularity is that the corresponding matrix is positive definite ( see , e.g. , @xcite ) .",
    "now , we remind that a real - valued continuous even function @xmath20 is called positive definite on @xmath21 if @xmath22 for any @xmath23 pairwise distinct nodes @xmath24 , and @xmath25 @xmath26^t\\in { \\mathbb{r}}^n$ ] .",
    "the function @xmath20 is called strictly positive definite on @xmath21 if the quadratic form ( [ qf ] ) is zero only for @xmath27 .    therefore , if @xmath20 is strictly positive definite , the interpolant ( [ basis ] ) is unique , since the corresponding interpolation matrix ( [ coeffmat ] ) is positive definite and hence non - singular .    some of the most popular strictly positive definite rbfs are @xmath28 where @xmath29 are the _ shape parameters _ ,",
    "@xmath30 , and @xmath31 denotes the truncated power function .",
    "note that gaussian ( g ) is a globally supported function of infinite smoothness , whereas wendland s function ( w2 ) is compactly supported one with degree of smoothness 2 . for further details ,",
    "see @xcite .",
    "the partition of unity method was firstly suggested in @xcite in the context of meshfree galerkin methods for the solution of partial differential equations ( pdes ) , but now it is also commonly used in the field of approximation theory ( see @xcite ) . in particular , this approach enables us to decompose a large problem into many small problems , and at the same time ensures that the accuracy obtained for the local fits is carried over to the global one .",
    "in fact , the partition of unity method we here consider can be thought as a modified shepard s method with higher - order data , where local approximations @xmath32 are rbfs .",
    "similar local approaches involving shepard s type methods were considered in @xcite .",
    "thus , the partition of unity method consists in partitioning the open and bounded domain @xmath33 into @xmath34 subdomains @xmath35 such that @xmath36 with some mild overlap among the subdomains . at first",
    ", we choose a partition of unity , i.e. a family of compactly supported , non - negative , continuous functions @xmath37 with @xmath38 such that @xmath39 then , we can consider the global interpolant @xmath40 where the local radial basis function @xmath41 is obtained by solving a local interpolation problem , which is constructed using the @xmath42 nodes belonging to each subdomain @xmath35 .",
    "note that if the local approximants satisfy the interpolation conditions at node @xmath3 , i.e. @xmath43 , then the global approximant also interpolates at this node , i.e. @xmath44 , for @xmath7 .    in order to be able to formulate error bounds we need some technical conditions .",
    "then , we require the partition of unity functions @xmath37 to be _ k - stable _ , i.e. each @xmath45 , @xmath46 , and for every multi - index @xmath47 with @xmath48 there exists a constant @xmath49 such that @xmath50 where @xmath51 = diam(@xmath35 ) .    in accordance with the statements in @xcite we require some additional regularity assumptions on the _ covering _ @xmath52 .",
    "therefore , setting @xmath53 @xmath54 , an open and bounded covering @xmath52 is called _ regular _ for @xmath55 if the following properties are satisfied :    * for each @xmath56 , the number of subdomains @xmath35 with @xmath57 is bounded by a global constant @xmath58 ; * each subdomain @xmath35 satisfies an interior cone condition ; * the local fill distances @xmath59 are uniformly bounded by the global fill distance @xmath60 , where @xmath61 .",
    "therefore , assuming that :    * @xmath62 is a strictly positive definite function ; * @xmath52 is a regular covering for @xmath63 ; * @xmath64 is @xmath65-stable for @xmath52 ;    we have the following convergence result ( see , e.g. , @xcite ) , i.e. , the error between @xmath66 , where @xmath67 is the native space of @xmath20 , and its partition of unity interpolant ( [ pui ] ) can be bounded by @xmath68 for all @xmath56 and all @xmath69 .",
    "in this section we present an efficient algorithm for bivariate interpolation of scattered data sets lying on the domain @xmath70 ^ 2 \\subset { \\mathbb{r}}^2 $ ] , which is based on the partition of unity method for constructing a global interpolant by blending rbfs as local approximants and using locally supported weight functions .",
    "it is efficiently implemented and optimized by connecting the interpolation method itself with an effective cell - based searching procedure . in particular ,",
    "the implementation of this algorithm is based on the construction of a _ cell structure _ ,",
    "which is obtained by partitioning the domain @xmath10 in square cells , whose sizes strictly depend on the dimension of its subdomains . such approach leads to important improvements in the searching processes of the nearest neighbour points compared to the searching techniques presented in @xcite .",
    "input :    * @xmath71 , set of nodes ; * @xmath72 , set of data values ; * @xmath73 , set of subdomain points ( centres ) ; * @xmath74 , set of evaluation points .",
    "output :    * @xmath75 , set of approximated values .",
    "the set @xmath76 of nodes and the set @xmath77 of evaluation points are ordered with respect to a common direction ( e.g. the @xmath78-axis ) , by applying a _",
    "quicksort@xmath79 procedure_. stage 2 . for each subdomain point",
    "@xmath80 , @xmath81 , a local circular subdomain is constructed , whose half - size ( the radius ) depends on the subdomain number @xmath34 , that is @xmath82 this value is suitably chosen , supposing to have a nearly uniform node distribution and assuming that the ratio @xmath83 .",
    "a double structure of crossed strips is constructed as follows :    1 .   a first family of @xmath84 strips , parallel to the @xmath85-axis ,",
    "is considered taking @xmath86 and a _",
    "quicksort@xmath87 procedure _ is applied to order the nodes belonging to each strip ; 2 .",
    "a second family of @xmath84 strips , parallel to the @xmath78-axis , is considered .",
    "note that each of the two strip structures are ordered and numbered from 1 to @xmath84 ; moreover , the choice in ( [ q_str ] ) follows directly from the side length of the domain @xmath10 ( unit square ) , that here is @xmath88 , and the subdomain radius @xmath89 .",
    "the domain ( unit square ) is partitioned by a _ cell - based structure _ consisted of @xmath90 square cells , whose length of the sides is given by @xmath91 .",
    "then , the following structure is considered :    * the sets @xmath76 , @xmath92 and @xmath77 are partitioned by the cell structure into @xmath90 subsets @xmath93 , @xmath94 and @xmath95 , @xmath96 ,    where @xmath97 , @xmath98 and @xmath99 are the number of points in the @xmath65-th cell .",
    "stage 5 . in order to identify the cells to be examined in the searching procedure , we consider two steps as follows :    1 .   since @xmath91",
    ", the ratio between these quantities is denoted by @xmath100 .",
    "so the number @xmath101 of cells to be examined for each node is @xmath102 .",
    "2 .   for each cell",
    "@xmath103 $ ] , @xmath104 , a cell - based searching procedure is considered , examining the points from the cell @xmath105 $ ] to the cell @xmath106 $ ] . note that if @xmath107 and/or @xmath108 , or @xmath109 and/or @xmath110 , then we set @xmath111 and/or @xmath112 , and @xmath113 and/or @xmath114 .",
    "then , after defining which and how many cells are to be examined , the cell - based searching procedure is applied :    * for each subdomain point of @xmath94 , @xmath96 , to determine all nodes belonging to a subdomain .",
    "the number of nodes of the subdomain centred at @xmath80 is counted and stored in @xmath115 , @xmath81 ; * for each evaluation point of @xmath95 , @xmath96 , in order to find all those belonging to a subdomain of centre @xmath80 and radius @xmath89 .",
    "the number of subdomains containing the @xmath116-th evaluation point is counted and stored in @xmath117 , @xmath118 .",
    "a local approximant @xmath119 and a weight function @xmath120 , @xmath46 , is found for each evaluation point .",
    "stage 8 . applying the global fit ( [ pui ] )",
    ", the surface can be approximated at any evaluation point @xmath121 .",
    "the partition of unity algorithm involves the use of the standard sorting routine quicksort , which requires on average a time complexity @xmath122 , where @xmath123 is the number of nodes to be sorted .",
    "specifically , we have a data partition phase consisting of building the data structure , where the computational cost is :    * @xmath124 for sorting all @xmath23 nodes ; * @xmath125 for sorting all @xmath126 evaluation points .",
    "moreover , in order to compute the local rbf interpolants , we have to solve @xmath34 linear systems and the cost is :    * @xmath127 , @xmath81 , where @xmath115 is the number of nodes in the @xmath116-th subdomain .",
    "then , for the @xmath65-th evaluation point of @xmath77 the cost is :    * @xmath128 , @xmath81 , @xmath129 .",
    "finally , the algorithm requires @xmath130 , @xmath131 and @xmath132 storage requirements for the data , and @xmath115 , @xmath133 , locations for the coefficients of each local rbf interpolant .",
    "in this section we present some tests to verify performance and effectiveness of the cell - based partition algorithm on scattered data sets .",
    "the code is implemented in c / c++ language , while numerical results are carried out on a intel core 2 duo computer ( 2.1 ghz ) . in the experiments we consider a node distribution with @xmath134 uniformly random halton nodes generated by using the program given in @xcite .",
    "the partition of unity algorithm is run considering @xmath135 subdomain points and @xmath136 evaluation ( or grid ) points , which are contained in the unit square @xmath70 ^ 2 $ ]        moreover , since we are concerned to point out the effectiveness of the proposed algorithm , in table [ time_comparison ] we compare cpu times ( in seconds ) obtained by running the cell algorithm described in section 3 , and the strip algorithm proposed in @xcite .",
    "this comparison highlights the high efficiency of the cell algorithm , which gives us a considerable saving of time .",
    "then , in order to test accuracy of the local algorithm , in table [ tab1_errors ] we report the root mean square errors ( rmses ) , i.e. @xmath153 the error computation is achieved by considering both globally and locally supported rbfs for suitable values of the shape parameters , i.e. , @xmath154 for @xmath155 , and @xmath156 for @xmath157 .",
    "we observe that the local scheme turns out to be accurate , even if we do not consider the optimal values for the shape parameters , namely those values for which we get the best possible results .",
    "however , these choices give a good compromise among accuracy and stability .",
    "then , in figure [ shape_f1 ] we plot the behavior of the rmses by varying values of the shape parameters for franke s function . these graphs ( and other ones obtained considering different test functions we omit for brievity )",
    "point out that , if an optimal search of the shape parameters was performed , in some cases the results of accuracy reported in this section could be improved of one or even two orders of magnitude .",
    "note that each evaluation is carried out by choosing equispaced values of the shape parameter with @xmath164 $ ] , and @xmath165 $ ] .    by analyzing numerical tests and the related pictures",
    ", we observe that wendland s function @xmath157 has greater stability than gaussian @xmath155 and good accuracy .",
    "however , these graphs give an idea on stability and enable us to choose sure  values for the shape parameters .",
    "these tests confirm theoretical results and suggest to use basis functions with a moderate order of smoothness , thus avoiding the well - known ill - conditioning problems of infinitely smooth rbfs , in particular if we are dealing with a very large number of nodes .",
    "r.  cavoretto , a unified version of efficient partition of unity algorithms for meshless interpolation , in : t.  e. simos et al .",
    "( eds . ) , _ proceedings of the icnaam 2012 _ , aip conf .",
    ", vol . 1479 , amer .",
    "melville , new york , 2012 , pp .",
    "10541057 .",
    "w.  i.  thacker , j.  zhang , l.  t.  watson , j.  b.  birch , m.  a.  iyer & m.  w.  berry , algorithm 905 : sheppack : modified shepard algorithm for interpolation of scattered multivariate data , _ acm trans .",
    "math . software _ * 37 * ( 2010 ) , art . 34 , 120 .",
    "h.  wendland , fast evaluation of radial basis functions : methods based on partition of unity , in : c.  k.  chui et al .",
    "( eds . ) , _ approximation theory x : wavelets , splines , and applications _",
    ", vanderbilt univ . press , nashville , tn , 2002 , pp ."
  ],
  "abstract_text": [
    "<S> in this paper we present an efficient algorithm for bivariate interpolation , which is based on the use of the partition of unity method for constructing a global interpolant . </S>",
    "<S> it is obtained by combining local radial basis function interpolants with locally supported weight functions . in particular , this interpolation scheme is characterized by the construction of a suitable partition of the domain in cells so that the cell structure strictly depends on the dimension of its subdomains . </S>",
    "<S> this fact allows us to construct an efficient cell - based searching procedure , which provides a significant reduction of cpu times . complexity analysis and </S>",
    "<S> numerical results show such improvements on the algorithm performances .    </S>",
    "<S> 1.8 cm    * two - dimensional interpolation using *    0.3 cm    * a cell - based searching procedure *    0.6 cm    * roberto cavoretto *    department of mathematics g. peano , university of torino ,    via carlo alberto 10 ,  10123 torino ,  italy    _roberto.cavoretto@unito.it_    .6 cm    * keywords * : partition of unity , local methods , searching techniques , fast algorithms , scattered data </S>"
  ]
}