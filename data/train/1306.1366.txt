{
  "article_text": [
    "the sorting of the suffixes of a text plays a fundamental role in text algorithms with several applications in many areas of computer science and bioinformatics . for instance , it is a fundamental step , in implicit or explicit way , for the construction of the suffix array ( @xmath0 ) and the burrows - wheeler transform ( @xmath1 ) .",
    "the @xmath0 , introduced in 1990 ( cf .",
    "@xcite ) , is a sorted array of all suffixes of a string , where the suffixes are identify by using their positions in the string .",
    "several strategies that privilege the efficiency of the running time or the low memory consumption have been widely investigated ( cf .",
    "@xcite ) . the @xmath1 , introduced in @xmath2 ( cf .",
    "@xcite ) , permutes the letters of a text according to the sorting of its cyclic rotations , making the text more compressible ( cf .",
    "@xcite ) . a recent survey on the combinatorial properties that guarantee such a compressibility after the application of @xmath1 can be found in @xcite ( cf . also @xcite ) .",
    "moreover , in the last years the @xmath0 and the @xmath1 , besides being important tools in data compression , have found many applications well beyond its original purpose ( cf .",
    "@xcite ) .",
    "the goal of this paper is to introduce a new strategy for the sorting of the suffixes of a word that opens new scenarios of the computation of the @xmath0 and the @xmath1 .",
    "our strategy uses a well known factorization of a word @xmath3 called the _ lyndon factorization _ and is based on a combinatorial property proved in this paper , that allows to sort the suffixes of @xmath3 ( `` global suffixes '' ) by using the sorting of the suffixes inside each block of the decomposition ( `` local suffixes '' ) .",
    "the lyndon factorization is based on the fact that any word @xmath3 can be written uniquely as @xmath4 , where    * the sequence @xmath5 is non - increasing with respect to lexicographic order ; * each @xmath6 is strictly less than any of its proper cyclic shift ( lyndon words ) .",
    "this factorization was introduced in @xcite and a linear time algorithm is due to duval @xcite .",
    "the intuition that the knowledge of lyndon factorization of a text can be used for the computation of the suffix array of the text itself has been introduced in @xcite .",
    "conversely , a way to find the lyndon factorization from the suffix array can be found in @xcite .",
    "if @xmath7 is a factor of a word @xmath3 we say that the sorting of the local suffixes of @xmath7 is _ compatible _ with the sorting of the global suffixes of @xmath3 if the mutual order of two local suffixes in @xmath7 is kept when they are extended as global suffixes .",
    "the main theorem in this paper states that if @xmath7 is a concatenation of consecutive lyndon factors , then the local suffixes in @xmath7 are compatible with the global suffixes .",
    "this suggests some new algorithmic scenarios for the constructions of the @xmath0 and the @xmath1 .",
    "in fact , by performing the lyndon factorization of a word @xmath3 by duval s algorithm , one does not need to get to the end of the whole word in order to start the decomposition into lyndon factors .",
    "since our result allow to start the sorting of the local suffixes ( compatible with the sorting of the global suffixes ) as soon as the first lyndon word is discovered , this may suggest an online algorithm , that do not require to read the entire word to start sorting .",
    "moreover , the independence of the sorting of the local suffixes inside the different lyndon factors of a text suggests also a possible parallel strategy to sort the global suffixes of the text itself .    in section [ sec : prel ]",
    "we give the fundamental notions and results concerning combinatorics on words , the lyndon factorization , the burrows - wheeler transform and the suffix array . in section [",
    "sec : method ] we first introduce the notion of global suffix on a text and local suffix inside a factor of the text .",
    "then we prove the compatibility between the ordering of local suffixes and the ordering of global suffixes . in section [ sec : algo ] we describe an algorithm that uses the above result to incrementally construct the @xmath1 of a text . such a method can be also used to explicitly construct the @xmath0 of the text . in section [ sec : conclusion ] we discuss about some possible improvements and developments of our method , including implementations in external memory or in place constructions .",
    "finally , we compare our strategy for sorting suffixes with the method proposed in @xcite in which a lightweight computation of the @xmath1 of a text is performed by partitioning it into factors having the same length .",
    "let @xmath8 be a finite alphabet with @xmath9 . given a finite word @xmath10 , @xmath11 for @xmath12 , a _ factor _ of @xmath3",
    "is written as @xmath13 = a_i \\cdots a_j$ ] . a factor",
    "@xmath14 $ ] is called a _ prefix _ , while a factor @xmath15 $ ] is called a _ suffix_. in this paper , we also denote by @xmath16 as the suffix of @xmath3 starting from position @xmath17 .",
    "we omit @xmath3 when there is no danger of ambiguity .",
    "we say that @xmath18 are _ conjugate _ ( or _ cyclic shift _ ) or _",
    "@xmath19 is a conjugate of @xmath20 _ if @xmath21 and @xmath22 for some @xmath23 .",
    "recall that conjugacy is an equivalent relation .",
    "a _ lyndon _ word is a primitive word which is also the minimum in its conjugacy class , with respect to the lexicographic order relation . in @xcite ,",
    "one can find a linear algorithm that for any word @xmath24 computes the lyndon word of its conjugacy class .",
    "we call it the lyndon word of @xmath3 .",
    "lyndon words are involved in a nice and important factorization property of words .",
    "@xcite every word @xmath25 has a unique factorization @xmath4 such that @xmath26 is a non - increasing sequence of lyndon words .",
    "we call this factorization the _ lyndon factorization _ of a word and it can be computed in linear time ( see for instance @xcite ) .",
    "duval in @xcite presents two variants of an algorithm of factorization of a word into lyndon words in time linear in the length of the word .",
    "the first variant of the algorithm uses only three variables for a complete computation and it requires no more than @xmath27 comparisons between two letters .",
    "the second one is slightly faster in that sense that it requires no more than @xmath28 comparisons but it uses an auxiliary storage of size @xmath29 . the basis idea for both these variants is finding each factor of the decomposition of the word @xmath3 from left to right by eventually reading a long enough prefix of the next lyndon factor .",
    "lyndon factorization has been realized also in parallel ( cf .",
    "@xcite ) and in external memory ( cf .",
    "@xcite ) .    one way to define the burrows - wheeler transform ( @xmath1 ) @xcite of a string @xmath3 of length @xmath30 ( although not the most efficient way to compute it ) is to construct all @xmath30 cyclic shifts of @xmath3 and sort them lexicographically .",
    "the output of @xmath1 consists of the pair ( @xmath31 , @xmath32 ) , where @xmath31 is the sequence of the last character of each rotation in the sorted list and @xmath32 is an integer denoting the position of the original word in the list . + another more efficient way consists in the concatenating at the the input string @xmath3 a symbol @xmath33 that is smaller than any other letter . in this case , the @xmath1 is intuitively described as follows : given a word @xmath34 , @xmath35 is a word obtained by sorting the list of the suffixes of @xmath36 and by concatenating the symbols preceding in @xmath3 each suffix in the sorted list . in both the cases , it is an invertible transform , i.e. , one can recover the original text from its @xmath1 .    note that , in general , the sorting of the conjugates of a word @xmath3 and the sorting of the suffixes of a word @xmath36 is different , but , as consequence of the properties of lyndon words , when the word @xmath3 is the lyndon word , then the two sorting coincide ( cf .",
    "* lemma 12 ) ) .",
    "a study of the combinatorial aspects that connect these two sorting can be found in @xcite . in this",
    "study an important role is played by the notion of lyndon word .",
    "given a text @xmath3 of length @xmath30 , the suffix array ( sa ) for @xmath3 is an array of integers of range @xmath37 to @xmath38 specifying the lexicographic ordering of the suffixes of the string @xmath3",
    ". it will be convenient to assume that @xmath39 = \\$$ ] , where @xmath33 is smaller than any other letter .",
    "that is , @xmath40 = i$ ] if and only if @xmath41 $ ] is the @xmath42-th suffix of @xmath3 in ascending lexicographical order .",
    "@xmath43    for instance , if @xmath44 then @xmath45 and @xmath46 $ ] . the table obtained by lexicographically sorting all the suffixes of @xmath36 is depicted in figure [ fig : bwt ] .",
    "let @xmath24 and let @xmath47 be its lyndon factorization . for each factor @xmath48 , we denote by @xmath49 and @xmath50 the position of the first and the last character , respectively , of the factor @xmath48 in @xmath3 .",
    "let @xmath51 be a factor of @xmath3 .",
    "we denote by @xmath52 $ ] and we call it _ local suffix _ at the position @xmath17 with respect to @xmath51 . note that @xmath53 $ ] and we call it _ global suffix _ of @xmath3 at the position @xmath17 .",
    "we write @xmath54 instead of @xmath16 when there is no danger of ambiguity .",
    "let @xmath3 be a word and let @xmath51 be a factor of @xmath3 .",
    "we say that the sorting of suffixes of @xmath51 is _ compatible _ with the sorting of suffixes of @xmath3 if for all @xmath55 with @xmath56 , @xmath57    notice that in general taken an arbitrary factor of a word @xmath3 , the sorting of its suffixes is not compatible with the sorting of the suffixes of @xmath3 .",
    "consider for instance the word @xmath58 and its factor @xmath59 . then @xmath60 whereas @xmath61 .",
    "[ th : suforder ] let @xmath34 and let @xmath4 be its lyndon factorization .",
    "let @xmath62 .",
    "then the sorting of the suffixes of @xmath51 is compatible with the sorting of the suffixes of @xmath3 .",
    "let @xmath17 and @xmath42 be two indexes with @xmath63 both contained in @xmath51 .",
    "we just need to prove that @xmath64 .",
    "let @xmath65 $ ] and @xmath66 $ ] .",
    "suppose that @xmath67 .",
    "then @xmath68 by the definition of lexicographic order .",
    "if @xmath69 there is nothing to prove . if @xmath70 , then @xmath71 is prefix of @xmath72 , so by the definition of lexicographic order @xmath73",
    "suppose now that @xmath73 .",
    "this means that @xmath68 .",
    "if @xmath69 there is nothing to prove . if @xmath70 , the index @xmath74 is in some lyndon factor @xmath75 with @xmath76 , then @xmath77 . we denote @xmath78 $ ]",
    ". then @xmath79 , since @xmath80 ( because @xmath75 is a lyndon word ) and @xmath81 ( since the factorization is a sequence of non increasing factors ) .    the above theorem states , in other words , that mutual order of the suffixes of @xmath3 starting in two positions @xmath17 and @xmath42 is the same as the mutual order of the `` local '' suffixes starting in @xmath17 and @xmath42 inside the block obtained as concatenation of the consecutive lyndon factors including @xmath17 and @xmath42 .    as particular case , the theorem is also true when the two suffixes start in the same lyndon factor .",
    "we recall that , if @xmath82 and @xmath83 denote two sorted lists of elements taken from any well ordered set , the operation @xmath84 consists in obtaining the sorted list of elements in @xmath82 and @xmath83    a consequence of previous theorem is stated in the following proposition .",
    "let @xmath85 and @xmath86 denote the sorted lists of the suffixes of @xmath87 and the suffixes @xmath88 , respectively .",
    "then @xmath89 .",
    "this proposition suggests a possible strategy for sorting the list of the suffixes of some word @xmath3 :    * find the lyndon decomposition of @xmath3 , @xmath90 ; * find the sorted list of the suffixes of @xmath91 and , separately , the sorted list of the suffixes of @xmath92 ; * merge the sorted lists in order to obtain the sorted lists of the suffixes of @xmath93 ; * find the sorted list of the suffixes of @xmath94 and merge it to the previous sorted list ; * keep on this way until all the lyndon factors are processed ;",
    "this kind of strategy could have several advantages : first of all , one can work online , i.e. one can start sorting suffixes as soon as the first lyndon factor is individuated .",
    "this also allow to integrate the sorting process with the duval s algorithm for lyndon decomposition that outputs lyndon factors online as well .",
    "the second advantage is that this kind of strategy allows parallelization , since every lyndon factor can be processed separately for sorting its suffixes .",
    "these kind of application would require an efficient algorithm to perform the merging of two sorted lists .",
    "a detailed algorithmic description of this method in order to obtain the @xmath1 of a text is given in next section .",
    "in this section we propose an algorithm that incrementally constructs the suffix array @xmath0 and the burrows - wheeler transform @xmath1 of the text @xmath3 by using its lyndon factorization .",
    "in particular , here we detail the construction of the @xmath1 but an analogous reasoning can be done in order to obtain the suffix array .",
    "we assume that @xmath90 is the lyndon factorization of the word @xmath95 $ ] .",
    "so @xmath96 .",
    "such an hypothesis , although strong , is not restrictive because one can obtain the lyndon factorization of any word in linear time ( cf .",
    "as shown in previous section , the hypothesis that @xmath3 is factorized in lyndon words suggests to connect the problem to the sorting of the local suffixes of @xmath3 to the lexicographic sorting of the global suffixes of @xmath3 .",
    "our algorithm , called bwt_lynd , considers the input text @xmath95 $ ] as logically partitioned into @xmath97 blocks , where each block corresponds to a lyndon word , and computes incrementally the @xmath98 via @xmath97 iterations , one per block of @xmath3 .",
    "each block is examined from right to left so that at iteration @xmath17 we compute @xmath99 given @xmath100 , @xmath101 and @xmath102 .",
    "remark that the positions in @xmath102 range in @xmath103 $ ] .",
    "this means that we sum the amount @xmath104 to the values of the usual suffix array of @xmath105 .",
    "the key point of the algorithm comes from theorem [ th : suforder ] , because the construction of @xmath99 from @xmath100 requires only the insertion of the characters of @xmath106 in @xmath100 in the same mutual order as they appear in @xmath101 .",
    "note that the character @xmath33 that follows @xmath6 is not considered in this operation .",
    "moreover , such an operation does not modify the mutual order of the characters already lying in @xmath100 .    for each block @xmath6 with @xmath17 ranging from @xmath37 to @xmath97 , the algorithm bwt_lynd executes the following steps :    1 .",
    "[ it : bwtsa ] compute the @xmath107 and @xmath108 .",
    "[ it : a ] compute the counter array @xmath109 $ ] which stores in @xmath110 $ ] the number of suffixes of the string @xmath111 which are lexicographically smaller than the @xmath42-th suffix of @xmath112 .",
    "[ it : merge ] merge @xmath100 and @xmath107 in order to obtain @xmath113 .",
    "[ ex : merge ] let @xmath114 .",
    "the lyndon factorization of @xmath3 is @xmath115 , where @xmath116 .",
    "figure [ fig:1 ] illustrates how step [ it : merge ] of the algorithm works .",
    "note that the positions of the suffixes in @xmath117 ( i.e. in @xmath118 ) are shifted of @xmath119 positions .",
    "notice that in the algorithm bwt_lynd we do not actually compute the sorted list of suffixes , but we show it in figure [ fig:1 ] to ease the comprehension of the algorithm .",
    "moreover , the algorithm can be simply adapt to compute the suffix array of @xmath3 , so in figure [ fig:1 ] the suffix arrays are also shown .",
    "@xmath120    step [ it : bwtsa ] can be executed in linear time @xmath121 , if @xmath107 and @xmath108 are stored in internal memory ( see @xcite ) .    during step [ it : a ] , the algorithm uses the functions @xmath122 and @xmath123 described as follows . for any character @xmath124 ,",
    "let @xmath125 denote the number of characters in @xmath51 that are smaller than @xmath20 , and let @xmath126 denote the number of occurrences of @xmath20 in @xmath127 $ ] .",
    "such functions have been introduced in @xcite for the fm - index . for sake of simplicity",
    "we can firstly construct the array @xmath128 $ ] which stores in @xmath129 $ ] the number of suffixes of the string @xmath111 which are lexicographically smaller than the suffix of @xmath112 starting at the position @xmath42 .",
    "remark that we set @xmath130=0 $ ] because @xmath131\\$$ ] has the same rank of @xmath33 between the suffixes of @xmath111 and it is preceded by the same symbol @xmath132 in @xmath133 .",
    "consequently , in our algorithm considers the suffixes @xmath131\\$$ ] and the suffix @xmath33 ( of the string @xmath111 ) as the same suffix .",
    "it is easy to prove that the value @xmath134 $ ] is @xmath135 .",
    "the array @xmath136 is computed from the position @xmath137 to @xmath138 by using proposition [ prop : arraya ] .    [",
    "prop : arraya ] let @xmath42 be a integer ranging from @xmath137 to @xmath138 and let @xmath139 $ ] be the number of suffixes of @xmath111 lexicographically smaller than @xmath140 $ ] .",
    "let @xmath141 be the first symbol of the suffix @xmath142 $ ] .",
    "then , @xmath143=c(\\lbwt(l_1 \\cdots l_{i-1}\\$),c)+rank(\\lbwt(l_1 \\cdots l_{i-1}\\$),c , a[j+1]).\\ ] ]    since @xmath141 is the first symbol of the suffix @xmath142 $ ] , then @xmath142=cl_i[j+1,|l_i|+1]$ ] .",
    "all the suffixes of @xmath111 starting with a symbol smaller than @xmath141 are lexicographically smaller than @xmath142 $ ] .",
    "the number of such suffixes is given by @xmath144 .",
    "let us count now the number of suffixes that starting with @xmath141 and are smaller than @xmath142 $ ] .",
    "this is equivalent to counting how many @xmath141 s occur in @xmath145 $ ] .",
    "such a value is given by @xmath146)$ ] .",
    "it is easy to verify that we can obtain the array @xmath147 by using the array @xmath136 and the suffix array @xmath102 , i.e. @xmath148 = a[sa(l_i\\$)[i]]$ ] .",
    "note that the array @xmath147 contains the partial sums of the values of the @xmath149 array used in @xcite .",
    "however , we could directly compute the array @xmath147 by using the notion of inverse suffix array @xmath150 of a word @xmath36 is the inverse permutation of @xmath0 , i.e. , @xmath151 = i$ ] for all @xmath152 $ ] .",
    "the value @xmath153 $ ] is the lexicographical rank of the suffix starting at the position @xmath42 . ] .",
    "step [ it : a ] could be realized in @xmath154 time because we can build a data structure supporting @xmath155 time rank queries over @xmath100 .",
    "the same time complexity is obtained if the rank queries are executed over @xmath101 .",
    "step [ it : merge ] uses @xmath147 to create the new array @xmath99 by merging @xmath107 with the @xmath100 computed at the previous iteration .",
    "such a step implicitly constructs the lexicographically sorted list of suffixes starting in @xmath156 and extending up to end of @xmath6 together with the suffixes of @xmath6 . in order to do this",
    "we keep the mutual order between the suffixes of @xmath111 and @xmath105 thanks to theorem [ th : suforder ] . from the definition of the array @xmath147",
    ", it follows that the first two positions of the array @xmath99 are the first symbol of @xmath107 and the first symbol of @xmath100 , respectively .",
    "for @xmath157 we copy @xmath110 $ ] values from @xmath100 followed by the value @xmath158 $ ] .",
    "it is easy to see that the time complexity of step [ it : merge ] is @xmath154 , too .    from the description of the algorithm and by proceeding by induction",
    ", one can prove the following proposition .    at the end of the iteration @xmath97",
    ", algorithm bwt_lynd correctly computes @xmath159 .",
    "each iteration @xmath17 runs in @xmath154 time .",
    "the overall time complexity is @xmath160 , where @xmath161 .",
    "the goal of this paper is to propose a new strategy to compute the @xmath1 and the @xmath0 of a text by decomposing it into lyndon factors and by using the compatibility relation between the sorting of its local and global suffixes . at the moment ,",
    "the quadratic cost of the algorithm could make it impractical .",
    "however , from one hand , in order to improve our algorithm , efficient dynamic data structure for the rank operations and for the insertion operations could be used .",
    "navarro and nekrich s recent result @xcite on optimal representations of dynamic sequences shows that one can insert symbols at arbitrary positions and compute the rank function in the optimal time @xmath162 within essentially @xmath163 bits of space , for a sequence @xmath164 of length @xmath30 . on the other hand , our technique ,",
    "differently from other approaches in which partitions of the text are performed , is quite versatile so that it easily can be adapted to different implementative scenarios .",
    "for instance , in @xcite the authors describe an algorithm , called bwte , that logically partitions the input text @xmath3 of length @xmath30 into blocks of the same length @xmath165 , i.e. @xmath166 and computes incrementally the @xmath1 of @xmath3 via @xmath167 iterations , one per block of @xmath3 .",
    "text blocks are examined from right to left so that at iteration @xmath168 , they compute and store on disk @xmath169 given @xmath170 . in this case",
    "the mutual order of the suffixes in each block depends on the order of the suffixes of the next block .",
    "our algorithm bwt_lynd builds the @xmath171 of a text or its @xmath0 by scanning the text _ from left to right _ and it could run online , i.e. while the lyndon factorization is realized",
    ". one of the advantages is that adding new text to the end does not imply to compute again the mutual order of the suffixes of the text analyzed before , unless for the suffixes of the last lyndon word that could change by adding characters on the right .",
    "moreover , as described in the previous section , the text could be partitioned into several sequences of consecutive blocks of lyndon words , and the algorithm can be applied _ in parallel _ to each of those sequences . furthermore , also the lyndon factorization can be performed in parallel , as shown in @xcite . alternatively , since we read each symbol only once , also an in - place computation could be suggested by the strategy proposed in @xcite , in which the space occupied by text @xmath3 is used to store the @xmath172 .    finally , in the description of the algorithm we did not mention the used workspace . in fact , it could depend on the time - space trade - off that one should reach .",
    "for instance , the methodologies used in @xcite where disk data access are executed only via sequential scans could be adapted in order to obtain a lightweight version of the algorithm .",
    "an external memory algorithm for the lyndon factorization can be found in @xcite .",
    "we remark that that the method proposed in @xcite could be integrated into bwt_lynd in the sense that one can apply bwte to compute at each iteration the @xmath1 and the @xmath0 of each block of the lyndon partition .    in conclusion",
    ", our method seems lay out the path towards a new approach to the problem of sorting the suffixes of a text in which partitioning the text by using its combinatorial properties allows it to tackle the problem in local portions of the text in order to extend efficiently solutions to a global dimension ."
  ],
  "abstract_text": [
    "<S> the process of sorting the suffixes of a text plays a fundamental role in text algorithms . </S>",
    "<S> they are used for instance in the constructions of the burrows - wheeler transform and the suffix array , widely used in several fields of computer science . for this reason </S>",
    "<S> , several recent researches have been devoted to finding new strategies to obtain effective methods for such a sorting . in this paper </S>",
    "<S> we introduce a new methodology in which an important role is played by the lyndon factorization , so that the local suffixes inside factors detected by this factorization keep their mutual order when extended to the suffixes of the whole word . </S>",
    "<S> this property suggests a versatile technique that easily can be adapted to different implementative scenarios .    </S>",
    "<S> ( # 1)bwt(#1 )    # 1_#1 ( ) # 1_#1 ( ) # 1_#1(w ) # 1_#1(w ) # 1(#1 )    sorting suffixes , bwt , suffix array , lyndon words , lyndon factorization </S>"
  ]
}