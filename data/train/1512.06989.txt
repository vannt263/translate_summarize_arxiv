{
  "article_text": [
    "the issue of identifiers is crucial in distributed computing  @xcite .",
    "indeed , the correct operation of deterministic protocols often relies on the assumption that each processor @xmath7 comes with with a unique _ identity _ , @xmath8  @xcite .",
    "informally , in network computing , such an identity assignment is crucial for tackling two of the fundamental difficulties that are inherent to distributed computing , namely : ( 1 ) _ symmetry breaking _ , and ( 2 ) _ topological information gathering_.    the use of identities for tackling the above two difficulties is illustrated well in the context of _ local _ algorithms @xcite .",
    "indeed , in the @xmath9 model @xcite , an algorithm that runs in @xmath3 communication rounds , assuming an identity assignment , can be viewed as composed of two parts : first , collecting at each node @xmath7 , the ball @xmath10 of radius @xmath3 around it ( together with the inputs of nodes ) , and second , deciding the output at @xmath7 based solely on the information in @xmath10 . to achieve these two tasks ,",
    "one should first obtain the ball @xmath10 , which may not be possible if the underlying graph is anonymous ( i.e. , without identities ) . moreover , even if obtaining the ball is possible , e.g. , if the structure of the graph allows it , the absence of unique identities given to the nodes may prevent the algorithm from breaking symmetry .",
    "for example , in the absence of unique identities , it is impossible to design a distributed deterministic coloring algorithm , even for the symmetric connected graph composed of two nodes only . in fact , to the best of our knowledge , all algorithms in the @xmath9 model are designed assuming the presence of pairwise distinct identities or some other type of node - labeling or edge - labeling , including , e.g. , sense of direction  @xcite .    the seminal paper of naor and stockmeyer @xcite provides an important insight regarding the role of identities in local computation .",
    "informally , they show that , even though identities are necessary , in many cases the actual values of identities is not crucial , and only their relative order matters . specifically , @xcite shows that for a particular class of problems , called lcl ( for _ locally checkable languages _ ) , if there exists a local algorithm that , for any identity assignment , constructs an instance of a problem in lcl in constant number of rounds , then there exists an _ _ order invariant _",
    "_ algorithm for that problem that runs in the same number of rounds .",
    "lcl restricts its concern to graphs with constant maximum degree , and to problems with a constant number of inputs .",
    "the assumption on the size of the inputs of problems in lcl was shown necessary in @xcite , by exhibiting a natural problem that is locally checkable , has unbounded input size , can be solved in 1 round with identities , but can not be solved in constant time by any order invariant algorithm .",
    "the role of identities can also be gauged by comparing their impact to that of `` orientation mechanisms '' .",
    "for instance , gs et al .",
    "@xcite have shown that for a large class of optimization problems , called po - checkable problems , local algorithms do not benefit from any kind of identifiers : if a po - checkable optimization problem can be approximated with a local algorithm , the same approximation factor can be achieved in anonymous networks if the network is provided with a port - numbering and an orientation .",
    "the discussion above involved distributed _ construction _ tasks , including , e.g. , graph coloring  @xcite , maximal independent set  @xcite , and maximal matching  @xcite .",
    "when it comes to distributed _ decision _ tasks  @xcite , symmetry breaking issues do not however seem to play a role .",
    "informally , a decision task requires the nodes to `` collectively decide '' whether the given instance ( i.e. , a graph with inputs to the nodes ) satisfies some specific properties . for instance , deciding coloring requires , given a colored graph , to check whether this graph is properly colored .",
    "the meaning of `` collectively decide '' is as follows . on a legal instance",
    ", all nodes should output `` yes '' , and on an illegal one , at least one node should output `` no '' .",
    "note that it is not really important whether this node is unique or not ; hence , this specification does not inherently require any symmetry breaking .",
    "therefore , assuming that each node @xmath7 can obtain the ball @xmath10 , it makes sense that the assumption of having an identity assignment may not be crucial for achieving correct decision .",
    "we tackle the question of whether identities play a role in decision problems in the framework of the aforementioned @xmath0 model  @xcite , which is a standard distributed computing model capturing the essence of locality .",
    "recall that , in this model , processors are nodes of a connected network @xmath11 , have pairwise distinct identities , and have inputs . more formally ,",
    "a _ configuration _ is a triplet @xmath12 where @xmath13 is a connected graph , every node @xmath14 is assigned as its _ local input _ a binary string @xmath15 , and @xmath16 denotes the identity of node @xmath17 .",
    "( in some problems , the local input of every node is empty , i.e. , @xmath18 for every @xmath14 , where @xmath19 denotes the empty binary string ) .",
    "processors are woken up simultaneously , and computation proceeds over the input configuration @xmath12 in fault - free synchronous _ rounds _ during which every processor exchanges messages of unlimited size with its neighbors in the underlying network @xmath13 , and performs arbitrary individual computations on its data . in many cases , the running time of an algorithm",
    "is measured with respect to the size @xmath20 of @xmath13 : the running time of an algorithm is defined as the maximum number of rounds it takes to terminate at all nodes , over all possible @xmath20-node networks . similarly to @xcite , we consider algorithms whose running time is independent of the size of the network , that is they run in constant time .",
    "let @xmath10 be the ball centered at @xmath7 , of radius @xmath3 , excluding the edges between two nodes at distance exactly @xmath3 from @xmath7 . as mentioned before , without loss of generality ,",
    "any algorithm running in time  @xmath21 in the @xmath0 model consists of :    1 .   collecting ( in @xmath3 rounds ) at every node @xmath7 the structure of the ball @xmath10 together with all the inputs @xmath22 and identities @xmath16 of these nodes , and , 2 .",
    "performing some individual computation at every node .",
    "we define the _ anonymous _",
    "@xmath0 model similarly to the @xmath0 model , except that nodes have no identities .",
    "more precisely , an input configuration in the anonymous @xmath0 model is just a pair @xmath23 .",
    "an algorithm running in time  @xmath21 in the anonymous @xmath0 model consists of :    1 .",
    "getting at every node @xmath7 a snapshot of the structure of the ball @xmath10 together with all the inputs of the nodes in this ball , and , 2 .   performing some individual computation at every node .    note that the _ anonymous",
    "_ @xmath0 model does not explicitly involve communications between nodes .",
    "instead , it implicitly assumes that the underlying network supports the snapshot operation .",
    "clearly , this model is not stronger than the @xmath0 model , and possibly even strictly weaker , since a node @xmath7 can no longer base its individual computation on the identities of the nodes in the ball @xmath10 .",
    "one can think of various other `` anonymous '' models , i.e. , which do not involve node identities .",
    "in particular , there is a large literature on distributed computing in networks without node identities , where symmetry breaking is enabled thanks to locally disjoint port numbers ( see , e.g. , @xcite ) .",
    "we consider the anonymous @xmath0 model to isolate the role of node identities from other symmetry breaking mechanisms .",
    "model is the strongest model among all models without node identities .",
    "indeed , there are network problems that can be solved in the anonymous @xmath0 model which can not be solved in the aforementioned model that is based on locally disjoint port numbers .",
    "a simple example is to locally detect the absence of a 3-node cycle .",
    "] our aim is to compare the power of the anonymous @xmath0 model with the standard @xmath0 model in order to capture the impact of identities on local distributed decision .",
    "recall from  @xcite that a _ distributed language _ is a decidable collection @xmath24 of configurations .",
    "( since an undecidable collection of configurations remains undecidable in the distributed setting too , we consider only decidable collections of configurations ) .",
    "a typical example of a language is @xmath25 where @xmath26 denotes the ( open ) neighborhood of @xmath17 , that is , all nodes at distance exactly  1 from @xmath17 . still following the terminology from  @xcite",
    ", we say that a distributed algorithm @xmath27 _ decides _ a distributed language @xmath24 if and only if for every configuration @xmath23 , every node of @xmath13 eventually terminates and outputs `` yes '' or `` no '' , satisfying the following decision rules :    * if @xmath28 , then each node outputs `` yes '' ; * if @xmath29 , then at least one node outputs `` no '' .    in the ( non - anonymous ) @xmath0 model , these two rules must be satisfied for every identity assignment .",
    "that is , all processes must output `` yes '' on a legal instance , independent of their identities . and ,",
    "on an illegal instance , at least one node must output `` no '' , for every identity assignment .",
    "note that this node may potentially differ according to the identity assignment .",
    "some languages can be decided in constant time ( e.g. , @xmath30 ) , while others can easily be shown not to be decidable in constant time ( e.g. , `` is the network planar ? '' ) .",
    "in contrast to the above examples , there are some languages whose status is unclear . to elaborate on this , consider the particular case where it is required to decide whether the network belongs to some specified family @xmath31 of graphs .",
    "if this question can be decided in a constant number of communication rounds , then this means , informally , that the family @xmath31 can somehow be characterized by relatively simple conditions .",
    "for example , a family @xmath31 of graphs that can be characterized as consisting of all graphs having no subgraph from @xmath32 , where @xmath32 is some specified finite set of graphs , is obviously decidable in constant time . however , the question of whether a family of graphs can be characterized as above is often non - trivial .",
    "for example , characterizing cographs as precisely the graphs with no induced @xmath33 , attributed to seinsche  @xcite , is not easy , and requires nontrivial usage of modular decomposition .",
    "we are now ready to define one of our main subjects of interest , the classes @xmath1 and @xmath2 .",
    "specifically , @xmath1 ( for _ local decision _ ) is the class of all distributed languages that can be decided by a distributed algorithm that runs in a constant number of rounds in the @xmath0 model  @xcite .",
    "similarly , @xmath2 , the anonymous version of @xmath1 , is the class of all distributed languages that can be decided by a distributed algorithm that runs in a constant number of rounds in the anonymous @xmath0 model . by definition ,",
    "we conjecture that @xmath34 in this paper , we provide several evidences supporting this conjecture . in addition , we investigate the _ non - deterministic _ version of these classes , and prove that they coincide .",
    "more specifically , a distributed _ verification _ algorithm is a distributed algorithm @xmath27 that gets as input , in addition to a configuration @xmath23 , a global _ certificate vector _ @xmath35 , i.e. , every node @xmath17 of a graph @xmath13 gets as input two binary strings , an input @xmath36 and a certificate @xmath37 . a verification algorithm @xmath27 verifies @xmath24 if and only if for every input configuration @xmath23 , the following hold :    * if @xmath28 , then there exists a certificate @xmath35 such that every node outputs `` yes '' ; * if @xmath29 , then for every certificate @xmath35 , at least one node outputs `` no '' .    again , in the ( non - anonymous ) @xmath0 model , these two rules must be satisfied for every identity assignment , but the certificates must be the same regardless of the identities .",
    "we now recall the class @xmath38 , for _ non - deterministic local decision _ , as defined in @xcite : it is the class of all distributed languages that can be verified in a constant number of rounds in the @xmath0 model .",
    "similarly , we define @xmath39 , the anonymous version of @xmath38 , as the class of all distributed languages that can be verified in a constant number of rounds in the anonymous @xmath0 model . by definition ,",
    "@xmath40 .      in this paper",
    ", we give several evidences supporting the conjecture @xmath5 .",
    "in particular , we show that it holds for languages defined on paths , with a finite set of input values .",
    "more generally , we show that the conjecture holds for _ hereditary _ languages , that is , languages closed under node deletion . regarding arbitrary languages , and arbitrary graphs , we prove that the conjecture holds assuming that every node knows an upper bound on the total number of nodes in the input graph .",
    "( this upper bound can be arbitrary , and may not be the same for all nodes ) .",
    "moreover , we prove that equality between non - anonymous decision and anonymous decision holds in the context of _ non - deterministic _ local decision , where nodes are given certificates ( independent of the identities , if they exist ) , and the decision consists in verifying these certificates .",
    "more precisely , we prove that @xmath6 .",
    "this latter result is obtained by characterizing both @xmath38 and @xmath39 .",
    "the question of how to locally decide ( or verify ) languages has received quite a lot of attention recently . inspired by classical computation complexity theory , it was suggested in @xcite that the study of decision problems may lead to new structural insights also in the more complex distributed computing setting . indeed , following that paper , which focused on the @xmath9 model",
    ", efforts were made to form a fundamental computational complexity theory for distributed decision problems in various other aspects of distributed computing @xcite .",
    "the classes ld , nld and bpld defined in @xcite are the distributed analogues of the classes p , np and bpp , respectively .",
    "the paper provides structural results , developing a notion of local reduction and establishing completeness results .",
    "one of the main results is the existence of a sharp threshold for randomization , above which randomization does not help ( at least for hereditary languages ) .",
    "more precisely , the bpld classes were classified into two : below and above the randomization threshold . in @xcite ,",
    "the authors show that the hereditary assumption can be lifted if we restrict our attention to languages on path topologies .",
    "these two results from @xcite are used in the current paper in a rather surprising manner .",
    "the authors in @xcite then `` zoom '' into the spectrum of classes below the randomization threshold , and defines a hierarchy of an infinite set of bpld classes , each of which is separated from the class above it in the hierarchy .",
    "the precise knowledge of the number of nodes @xmath20 was shown in @xcite to be of large impact on non - deterministic decision .",
    "indeed , with such a knowledge every language can be decided non - deterministically in the model of nld .",
    "we note , however , that the knowledge of an arbitrary upper bound on @xmath20 ( as assumed here in one of our results ) seems to be a much weaker assumption , and , in particular , will not suffice for non - deterministically deciding all languages . in the context of construction problems ,",
    "it was shown in @xcite that in many case , the knowledge of @xmath20 ( or an upper bound on @xmath20 ) is not essential .",
    "the original theoretical basis for non - determinism in local computation was laid by the theory of _ proof - labeling schemes _ ( pls )  @xcite originally defined in @xcite . as mentioned , this notion resembles the notion of nld , but differs in the role identities play .",
    "specifically , in pls the designer of the algorithm may base the certificates ( called labels in the terminology of pls ) construction on the given identity assignment .",
    "in contrast , in the model of nld , the certificates must be the same regardless of the identities of nodes .",
    "indeed , this difference is significant : while every language can be verified by a proof labeling scheme , not every language belongs to nld  @xcite .",
    "these notions also bear some similarities to the notions of _ local computation with advice _",
    "@xcite , _ local detection _",
    "@xcite , _ local checking _",
    "@xcite , or _ silent stabilization _  @xcite .",
    "in addition , as shown later on , the notion of nld is related also to the theory of _ lifts _ or _ covers _",
    "@xcite .",
    "finally , the classification of decision problems in distributed computing has been studied in several other models .",
    "for example , @xcite and @xcite study specific decision problems in the @xmath41 model . in @xcite , the authors study mst verification in the pls sense but under the @xmath41 model of communication .",
    "in addition , decision problems have been studied in the asynchrony discipline too , specifically in the framework of _ wait - free computation _ @xcite and _ mobile agents computing _ @xcite . in the wait - free model ,",
    "the main issues are not spatial constraints but timing constraints ( asynchronism and faults ) .",
    "the main focus of @xcite is deterministic protocols aiming at studying the power of the `` decoder '' , i.e. , the interpretation of the results . while this paper essentially considers the and - checker ( since a global `` yes '' corresponds to all processes saying `` yes '' ) , @xcite deals with other interpretations , including more values ( not only `` yes '' and `` no '' ) , with the objective of designing checkers that use the smallest number of values .",
    "we conjecture that @xmath42 .",
    "a support to this conjecture is that it holds for a large class of languages , namely for all _ hereditary _ languages , that is languages closed under node deletion . for instance , @xmath30 and @xmath43 are hereditary , as well as all languages corresponding to hereditary graph families , such as planar graphs , interval graphs , forests , chordal graphs , cographs , perfect graphs , etc .",
    "[ theo : ldhereditary ] @xmath5 for hereditary languages .    to prove the theorem , it is sufficient to show that @xmath44 for hereditary languages .",
    "this immediately follows from the statement and proof of theorem  3.3 in  @xcite .",
    "indeed , let @xmath27 be a non - anonymous local algorithm deciding @xmath24 .",
    "this deterministic algorithm is in particular a randomized algorithm , with success probabilities @xmath45 for legal instances , and @xmath46 for illegal instance .",
    "that is , algorithm @xmath27 is a @xmath47-decider for @xmath24 , according to the definition in  @xcite . since @xmath24 is hereditary , and since @xmath48 , the existence of @xmath27 implies the existence of a specific deterministic anonymous local algorithm @xmath49 for @xmath24 .",
    "indeed , the algorithm @xmath49 described in the proof of theorem  3.3 in  @xcite is in fact anonymous : it simply collects the ball @xmath10 of radius @xmath3 around each node @xmath7 for some constant  @xmath3 , and @xmath7 then decides `` yes '' or `` no '' according to whether @xmath50 or not , regardless of the identities .",
    "a similar proof , based on theorem  4.1 in  @xcite , enables to establish the following :    [ theo : ldpath ] @xmath5 for languages defined on the set of paths , with a finite set of input values .",
    "another evidence supporting the conjecture @xmath42 is that it holds assuming that nodes have access to a seemingly weak oracle .",
    "specifically , this oracle , denoted @xmath51 , simply provides each node with an arbitrarily large upper bound on the total number of nodes in the actual instance .",
    "( it is not assumed that all the upper bounds provided to nodes are the same ) .",
    "we denote by @xmath52 the class of languages that can be decided by an anonymous local algorithm having access to oracle @xmath53 , and we prove the following :    [ theo : ld = ld ] @xmath54 .",
    "we just need to prove that @xmath55 .",
    "let @xmath56 , and let @xmath27 be a local ( non - anonymous ) algorithm deciding @xmath24 .",
    "assume that the running time of @xmath27 is @xmath3 .",
    "we transform @xmath27 into an anonymous algorithm @xmath57 deciding @xmath24 in time @xmath3 , assuming each node @xmath7 in a given input @xmath13 has an access to the oracle @xmath53 , i.e. , it knows an arbitrary upper bound @xmath58 on the number of nodes in @xmath13 .",
    "algorithm @xmath57 works as follows .",
    "each node @xmath7 collects the ball @xmath10 of radius @xmath3 around it .",
    "then , for every possible assignment of identities to the nodes of @xmath10 taken from the range @xmath59 $ ] , node @xmath7 simulates the behavior of the non - anonymous algorithm @xmath27 on the ball @xmath10 with the corresponding identities .",
    "if , in one of these simulations , algorithm @xmath27 decides `` no '' , then @xmath57 decides `` no '' .",
    "otherwise , @xmath57 decides `` yes '' .",
    "we now prove the correctness of @xmath57 .",
    "if the input @xmath60 , then @xmath27 accepts it for every identity assignment to the nodes of @xmath13 .",
    "therefore , since , for every node @xmath7 , every possible identity assignment to the nodes of the ball @xmath10 can be extended to an identity assignment to all the nodes of @xmath13 , all the simulations of @xmath27 by @xmath7 return `` yes '' , and hence @xmath57 accepts @xmath24 as well . on the other hand , if @xmath61 then @xmath27 rejects it for every identity assignment to the nodes of @xmath13 .",
    "that is , for every identity assignment to the nodes of @xmath13 , at least one node @xmath7 decides `` no '' .",
    "( note that , this node @xmath7 may be different for two different identity assignments ) .",
    "let us fix one identity assignment @xmath62 to the nodes of @xmath13 , in the range @xmath63 $ ] , and let @xmath7 be one node that decides `` no '' for @xmath62 .",
    "let @xmath64 be the ball @xmath10 with the identities of the nodes given by @xmath62 . in @xmath57",
    ", since @xmath7 tries all possible identity assignments of the ball @xmath10 in the range @xmath59 $ ] with @xmath65 , in one of its simulations of @xmath27 , node @xmath7 will simulate @xmath27 on @xmath64 . in this simulation",
    ", node @xmath7 decides `` no '' , and hence algorithm @xmath57 rejects @xmath24 as well .",
    "note that the inclusion @xmath55 holds when one imposes no restrictions on the individual sequential running time .",
    "however , the transformation of a ( non - anonymous ) local algorithm into an anonymous local algorithm as described in the proof of theorem  [ theo : ld = ld ] is very expensive in terms of individual computation .",
    "indeed , the number of simulations of the original local algorithm @xmath27 by each node @xmath7 can be as large as @xmath66 where @xmath58 is the upper bound on @xmath20 given by the oracle @xmath53 , and @xmath67 is the number of nodes in the ball @xmath10 .",
    "this bound can be exponential in @xmath20 even if the oracle provides a good approximation of @xmath20 ( even if it gives precisely @xmath20 ) .",
    "it would be nice to establish @xmath55 by using a transformation not involving a huge increase in the individual sequential computation time .",
    "in the previous section , we have seen several evidences supporting the conjecture that @xmath5 , but whether it holds or not remains to be proved . in this section",
    ", we turn our attention to the non - deterministic variants of these two classes , and show that they coincide .",
    "more formally , we have :    [ theo : nld = nld ] @xmath6 .    to prove @xmath6 , it is sufficient to prove @xmath68 . to establish this inclusion , we provide a sufficient condition for @xmath39-membership , and prove that it is a necessary condition for @xmath38-membership .",
    "let @xmath69 and @xmath70 be two input instances .",
    "a _ homomorphism _ from @xmath71 to @xmath72 is a function @xmath73 that preserves the edges of @xmath13 as well as the inputs to the nodes .",
    "specifically , @xmath74 and @xmath75 maps every node @xmath76 to a node @xmath77 satisfying @xmath78 for instance , assuming the nodes have no inputs , and labeling the nodes of the @xmath20-node cycle @xmath79 by consecutive integers from 0 to @xmath80 , modulo  @xmath20 , then the map @xmath81 defined by @xmath82 is a homomorphism . the trivial map @xmath83 defined by @xmath84 , where @xmath85 is the 2-node clique , is also a homomorphism . to establish conditions for @xmath38- and @xmath39-membership , we require the involved homomorphisms to preserve the local neighborhood of a node , and define the notion of _",
    "@xmath3-local isomorphism_.    let @xmath3 be a positive integer .",
    "we say that @xmath71 is @xmath3-local isomorphic to @xmath72 if and only if there exists an homomorphism @xmath75 from @xmath71 to @xmath72 such that , for every node @xmath14 , @xmath75 restricted to @xmath86 is an isomorphism from @xmath86 to @xmath87 .",
    "we call such a homomorphism @xmath75 a @xmath3-local isomorphism .",
    "note that a homomorphism is not necessarily a 1-local isomorphism .",
    "for instance , the aforementioned map @xmath81 defined by @xmath82 is a 1-local isomorphism , but the map @xmath83 defined by @xmath84 is not a 1-local isomorphism . to be a 1-local isomorphism",
    ", a homomorphism should also insure isomorphism between the balls of radius  1 .",
    "also observe that any @xmath3-local isomorphism @xmath88 is onto ( because if a node of @xmath89 has no pre - image , then neither do its neighbors have a pre - image , since homomorphisms preserve edges , and so forth ) . to avoid confusion , it is thus useful to keep in mind that , informally , a @xmath3-local isomorphism goes from a `` larger '' graph to a `` smaller '' graph .",
    "[ def : lift ] for positive integer @xmath3 , we say that @xmath24 is _ @xmath3-closed under lift _ if , for every two instances @xmath90 such that @xmath71 is @xmath3-local isomorphic to @xmath72 , we have : @xmath91    so , informally , defintion  [ def : lift ] states that , for a language @xmath24 to be @xmath3-closed under lift , if a `` smaller '' instance @xmath72 is in @xmath24 then any `` larger '' instance @xmath71 that is a lift of @xmath72 , i.e. , satisfying that @xmath71 is @xmath3-local isomorphic to @xmath72 , must also be in @xmath24 .",
    "the following lemma gives a sufficient condition for @xmath39-membership .",
    "[ claim : sufficient ] let @xmath24 be a language . if there exists @xmath92 such that @xmath24 is @xmath3-closed under lift , then @xmath93 .",
    "let @xmath24 be a language , and assume that there exists @xmath92 such that @xmath24 is @xmath3-closed under lift .",
    "we describe an anonymous non - deterministic local algorithm @xmath27 deciding @xmath24 , and performing in @xmath3 rounds .",
    "the certificate of each node @xmath17 is a triple @xmath94 where @xmath89 is an @xmath20-node graph with nodes labeled by distinct integers in @xmath63=\\{1,\\dots , n\\}$ ] , @xmath95 $ ] , and @xmath96 is an @xmath20-dimensional vector .",
    "informally , the certificates are interpreted by @xmath27 as follows .",
    "the graph @xmath89 is supposed to be a `` map '' of @xmath13 , that is , @xmath89 is interpreted as an isomorphic copy of @xmath13 .",
    "the integer @xmath97 is the label of the node in @xmath89 corresponding to node @xmath17 in @xmath13 .",
    "finally , @xmath96 is interpreted as the input of the nodes in @xmath89 .",
    "the algorithm @xmath27 performs as follows .",
    "every node @xmath17 gets @xmath86 , the ball of radius @xmath3 around it ; hence , in particular , it collects all the certificates of all the nodes at distance at most @xmath3 from it .",
    "then , by comparing its own certificate with the ones of its neighbors , it checks that the graph @xmath89 , and the input @xmath96 in its certificate , are identical to the ones in the certificates of its neighbors .",
    "it also verifies consistency between the labels and the nodes in its ball of radius @xmath3 .",
    "that is , it checks whether the labels and inputs in the certificate of the nodes in @xmath86 are as described by its certificate . whenever a node fails to pass any of these tests , it outputs `` no '' .",
    "otherwise it output `` yes '' or `` no '' according to whether @xmath98 or not , respectively .",
    "( this is doable because we are considering languages that are decidable in the usual sense of sequential computation ) .",
    "we show that @xmath27 performs correctly . if @xmath60 , then by labeling the nodes in @xmath13 by distinct integers from  1 to @xmath99 , and by providing the node @xmath17 labeled @xmath97 with @xmath100 , the algorithm @xmath27 output `` yes '' at all nodes , as desired .",
    "consider now a instance @xmath101 .",
    "assume , for the purpose of contradiction that there exists a certificate @xmath35 leading all nodes to output `` yes '' .",
    "let @xmath102 be defined by @xmath103 where @xmath97 is the label of @xmath17 in its certificate .",
    "since @xmath35 passes all tests of @xmath27 , it means that ( 1 ) @xmath94 where the instance @xmath70 is the same for all nodes , ( 2 ) @xmath75 restricted to @xmath86 is an isomorphism from @xmath86 to @xmath87 , for every node @xmath17 , and ( 3 ) @xmath98 .",
    "in view of ( 2 ) , @xmath71 is @xmath3-local isomorphic to @xmath72 .",
    "therefore , ( 3 ) implies that @xmath104 , because @xmath24 is @xmath3-closed under lift .",
    "this is in contradiction with the actual hypothesis @xmath61 .",
    "thus , for each certificate @xmath35 , there must exist at least one node that outputs `` no '' . as a consequence",
    ", @xmath27 is a non - deterministic algorithm deciding @xmath24 , and thus @xmath93 .",
    "the following lemma shows that the aforementioned sufficient condition for @xmath39-membership is a necessary condition for @xmath38-membership .",
    "[ claim : necessary ] let @xmath24 be a language . if @xmath105 , then there exists @xmath92 such that @xmath24 is @xmath3-closed under lift .",
    "let @xmath24 be a language in @xmath38 , and let @xmath27 be a non - deterministic ( non - anonymous ) local algorithm deciding @xmath24 .",
    "assume , for the purpose of contradiction that , for any integer @xmath92 , @xmath24 is _ not _ @xmath3-closed under lift .",
    "that is , for any @xmath3 , there exist two input instances @xmath90 such that @xmath71 is @xmath3-local isomorphic to @xmath72 , with @xmath106 and @xmath107 .",
    "assume that @xmath27 runs in @xmath3 rounds .",
    "without loss of generality , we can assume that @xmath108 .",
    "let @xmath101 and @xmath109 satisfying @xmath71 is @xmath3-local isomorphic to @xmath72 .",
    "since @xmath107 , there exists a certificate @xmath110 such that when @xmath27 is running on @xmath72 with certificate @xmath110 , every node output `` yes '' for every identity assignment .",
    "since @xmath71 is @xmath3-local isomorphic to @xmath72 , there exists an homomorphism @xmath111 such that , for every node @xmath112 , @xmath75 restricted to @xmath86 is an isomorphism from @xmath86 to @xmath87 .",
    "let @xmath35 be the certificate for @xmath71 defined by @xmath113 .",
    "consider the execution of @xmath27 running on @xmath71 with certificate @xmath35 , and some arbitrary identity assignment  @xmath62 .",
    "since @xmath27 performs in @xmath3 rounds , the decision at each node @xmath17 is taken according to the inputs , certificates , and identities in the ball @xmath86 , as well as the structure of this ball . by the nature of the homomorphism @xmath75 , and by the definition of certificate @xmath35 , the structure , inputs and certificates of the ball @xmath86 , are identical to the corresponding structure , inputs and certificates of the ball @xmath87 .",
    "balls may however differ in the identities of their nodes .",
    "so , let @xmath114 be the node in @xmath13 deciding `` no '' for @xmath23 with certificate @xmath35 .",
    "there exists such a node since @xmath115 .",
    "let @xmath116 , and assign the same identities to the nodes in @xmath117 as their corresponding nodes in @xmath118 .",
    "arbitrarily extend this identities to an identity assignment @xmath119 to the whole graph @xmath89 . by doing so , the two balls are not only isomorphic , but every node in @xmath118 has the same input , certificate and identity as its image in @xmath117 .",
    "therefore , the decision taken by @xmath27 at @xmath120 under @xmath62 is the same as its decision at @xmath121 under @xmath119 .",
    "this is in contradiction to the fact that @xmath114 decides `` no '' while @xmath122 decides `` yes '' .",
    "lemmas  [ claim : sufficient ] and  [ claim : necessary ]  together establish the theorem .",
    "the proof of lemma  [ claim : sufficient ] also provides an upper bound on the size of the certificates for _ graph languages _ in @xmath38 , that is , for languages in @xmath38 with no input .",
    "( this includes , e.g. , recognition of interval graphs , and recognition of chordal graphs ) .",
    "indeed , given @xmath105 , algorithm  @xmath27 in the proof of lemma  [ claim : sufficient ] verifies @xmath24 using a certificate at each node which is essentially an isomorphic copy of the input instance @xmath23 , with nodes labeled by consecutive integers in @xmath63 $ ] . if @xmath24 is a graph language , then there is no input @xmath123 , and thus the size of the certificates depends only on the size of the graph . more precisely , we have :    [ cor : mlogn ] let @xmath105 be a graph language .",
    "there exists an algorithm verifying @xmath24 using certificates of size @xmath124 bits at each node of every @xmath20-node graph in @xmath24 .",
    "we now argue that the above bound is tight , that is , we prove the following .",
    "there exists a graph language @xmath105 such that every algorithm verifying @xmath24 requires certificates of size @xmath125 bits .",
    "recall that @xcite showed that there exists a graph language for which every proof labeling scheme ( pls ) requires labels of size @xmath125 bits ( the proof of this latter result appears in a detailed version @xcite ) . still in the context of pls",
    ", @xcite showed that this lower bound holds for two _ natural _ graph families : specifically , @xcite showed that verifying symmetric graphs requires labels of size @xmath125 bits , and verifying non-3 colorable graphs requires almost the same size of labels , specifically , @xmath126 bits .",
    "note that the certificate size required for verifying a language in @xmath38 is at least as large as the minimum label size required for verifying the language via a proof labeling scheme .",
    "unfortunately , however , one can not obtain our claim directly from the aforementioned results since it turns out that neither of the two graph languages ( namely , symmetric graphs and non-3 colorable graphs ) belongs to @xmath38 .",
    "we therefore employ an indirect approach . specifically , consider a graph @xmath13",
    "we say that @xmath127 is a _ seed _ of @xmath13 if there exists a 1-local isomorphism from @xmath13 to @xmath127 .",
    "suppose @xmath31 is a family of graphs .",
    "let denote the family of graphs @xmath13 , for which there exists a seed of @xmath13 that belongs to @xmath31 .",
    "then , by definition , is @xmath128-closed under lift . indeed",
    ", assume that there is a 1-local isomorphism @xmath129 from @xmath89 to @xmath13 , and let @xmath130 be a seed of @xmath13 that belongs to @xmath31 .",
    "then let @xmath75 be the 1-local isomorphism from @xmath13 to @xmath127 .",
    "we have that @xmath131 is a 1-local isomorphism from @xmath89 to @xmath127 , because , for every @xmath132 , @xmath133 is isomorphic to @xmath134 , which in turn is isomorphic to @xmath135 .",
    "thus @xmath127 is also a seed of @xmath89 .",
    "is therefore in @xmath38 .",
    "now , in the proof of corollary 2.2 in @xcite , the authors construct , for every integer @xmath20 , a family @xmath136 of @xmath20-node graphs that requires proof labels of size @xmath125 .",
    "note that for every prime integer @xmath137 , a graph @xmath13 of size @xmath137 belongs to @xmath138 if and only if it belongs to .",
    "therefore , there exists a graph language , namely , , that requires certificates of size @xmath125 bits ( at least for prime @xmath20 s ) .",
    "again , in this paper , we provide some evidences supporting the conjecture @xmath5 . for instance , theorem  [ theo : ld = ld ] shows that if every node knows any upper bound on the number of nodes @xmath20 , then all languages in @xmath1 can be decided in the anonymous @xmath0 model .",
    "one interesting remark about the @xmath0 model is that it is guaranteed that at least one node has an upper bound on @xmath20 .",
    "this is for instance the case of the node with the largest identity . in the anonymous @xmath0 model",
    ", however , there is no such guarantee . finding a language",
    "whose decision would be based on the fact that one node has an upper bound on @xmath20 would disprove the conjecture @xmath5 .",
    "nevertheless , it is not clear whether such a problem exists .    in this paper",
    ", we also prove that @xmath6 , that is , our conjecture holds for the non - deterministic setting .",
    "it is worth noticing that @xcite proved that there exists an @xmath38-complete problem under the local one - to - many reduction .",
    "it is not clear whether such a problem exists for @xmath39 .",
    "indeed , the reduction in the completeness proof of @xcite relies on the aforementioned guarantee that , in the @xmath0 model , at least one node has an upper bound on @xmath20 .",
    "a. das sarma , s. holzer , l. kor , a. korman , d. nanongkai , g. pandurangan , d. peleg and r. wattenhofer .",
    "distributed verification and hardness of distributed approximation . in _ proc .",
    "43rd acm symp . on theory of computing ( stoc ) _ , 2011 .",
    "p. fraigniaud , c. gavoille , d. ilcinkas and a. pelc .",
    "distributed computing with advice : information sensitivity of graph coloring . in _ proc .",
    "34th colloq . on automata , languages and programming ( icalp ) _ , 231242 , 2007 .",
    "e. fusco and a. pelc .",
    "communication complexity of consensus in anonymous message passing systems . in _ proc .",
    "15th international conference on principles of distributed systems ( opodis 2011 ) _ , lncs 7109 , 191206 .",
    "h. hasemann , j. hirvonen , j. rybicki , and j. suomela . deterministic local algorithms , unique identifiers , and fractional graph colouring . in _ proc .",
    "19th international colloquium on structural information and communication complexity ( sirocco ) _ , 2012 .",
    "a.  korman , s.  kutten , and t. masuzawa .",
    "fast and compact self - stabilizing verification , computation , and fault detection of an mst . in _ proc .",
    "30th acm symp . on principles of distributed computing ( podc ) _ , 2011 .",
    "a.  korman , j.s .",
    "sereni , and l.  viennot . toward more localized local algorithms : removing assumptions concerning global knowledge . in _ proc .",
    "30th acm symp . on principles of distributed computing ( podc ) _ , 4958 , 2011 ."
  ],
  "abstract_text": [
    "<S> the issue of identifiers is crucial in distributed computing . </S>",
    "<S> informally , identities are used for tackling two of the fundamental difficulties that are inherent to deterministic distributed computing , namely : ( 1 ) _ symmetry breaking _ , and ( 2 ) _ topological information gathering_. in the context of _ local computation _ , i.e. , when nodes can gather information only from nodes at bounded distances , some insight regarding the role of identities has been established . </S>",
    "<S> for instance , it was shown that , for large classes of _ construction _ problems , the role of the identities can be rather small . however , for the identities to play no role , some other kinds of mechanisms for breaking symmetry must be employed , such as edge - labeling or sense of direction . when it comes to </S>",
    "<S> local distributed _ decision _ problems , the specification of the decision task does not seem to involve symmetry breaking . </S>",
    "<S> therefore , it is expected that , assuming nodes can gather sufficient information about their neighborhood , one could get rid of the identities , without employing extra mechanisms for breaking symmetry . </S>",
    "<S> we tackle this question in the framework of the @xmath0 model .    </S>",
    "<S> let @xmath1 be the class of all problems that can be _ decided _ in a constant number of rounds in the @xmath0 model . </S>",
    "<S> similarly , let @xmath2 be the class of all problems that can be decided at constant cost in the anonymous variant of the @xmath0 model , in which nodes have no identities , but each node can get access to the ( anonymous ) ball of radius @xmath3 around it , for any @xmath3 , at a cost of @xmath3 . </S>",
    "<S> it is clear that @xmath4 . </S>",
    "<S> we conjecture that @xmath5 . in this paper , we give several evidences supporting this conjecture . </S>",
    "<S> in particular , we show that it holds for _ hereditary _ problems , as well as when the nodes know an arbitrary upper bound on the total number of nodes . </S>",
    "<S> moreover , we prove that the conjecture holds in the context of _ non - deterministic _ local decision , where nodes are given certificates ( independent of the identities , if they exist ) , and the decision consists in verifying these certificates . in short , we prove that @xmath6 .    * </S>",
    "<S> keywords : * distributed complexity ; locality ; identities ; decision problems ; symmetry breaking ; non - determinism . </S>"
  ]
}