{
  "article_text": [
    "the workload management task ( work package 1 , or wp1 ) @xcite of the eu datagrid project @xcite ( also known , and referred to in the following text , as edg ) is mandated to define and implement a suitable architecture for distributed scheduling and resource management in the grid environment . during the first year and a half of the project ( 2001 - 2002 ) , and following a technology evaluation process , edg wp1 defined , implemented and deployed a set of services that integrate existing components , mostly from the condor @xcite and globus @xcite projects .",
    "this was described in more detail at chep 2001 @xcite . in a nutshell , the core job submission component of condorg ( @xcite ) ,",
    "talking to computing resources ( known in datagrid as computing elements , or ces ) via the globus gram protocol , is fundamentally complemented by :    * a job requirement matchmaking engine ( called the _ resource broker _ , or rb ) , matching job requests to computing resource status coming from the information system and resolving data requirements against the replicated file management services provided by edg wp2 . *",
    "a job logging and book - keeping service ( lb ) , where a job state machine is kept current based on events generated during the job lifetime , and the job status is made available to the submitting user .",
    "the lb events are generated with some redundancy to cover various cases of loss .",
    "* a stable user api ( command line , c++ and java ) for access to the system .",
    "job descriptions are expressed throughout the system using the condor classified ad language , where appropriate conventions were established to express requirement and ranking conditions on computing and storage element info , and to express data requirements .",
    "more details on the structure and evolution of these services and the necessary integration scaffolding can be found in various edg public deliverable documents .",
    "this paper focuses on how the experience of the first year of operation of the wp1 services on the edg testbed was interpreted , digested , and how a few design _ principles _ were learned ( possibly the hard way ) from the design and implementation shortcomings of the first release of wp1 software .",
    "these principles were applied to design and implement the second major release of wp1 software , that is described in another chep 2003 paper ( @xcite ) .    to illustrate the logical path that leads to at least some of these principles , we start by exploring the available techniques to model the behaviour and throughput of the integrated workload management system , and identify two factors that significantly complicate the system analysis .",
    "the workload management system provided by edg - wp1 is designed to rely as much as possible on existing technology .",
    "while this has the obvious advantages of limiting effort duplication and facilitating the compatibility among different projects , it also significantly complicates troubleshooting across the various layers of software supplied by different providers , and in general the understanding of the integrated system . also , where negotiations with external software providers could nt reach an agreement within the edg deadlines , some of the interfaces and communication paths in the system had to be adapted to fit the existing external software incarnations .    to get a useful high - level picture of the integrated workload management system , beyond all these practical constraints , we can model it as a queuing system , where job requests traverse a network of queues , and the  service stations \" connected to each queue represent one of the various processing steps in the job life - cycle .",
    "a few of these steps are exemplified in figure [ fig - netqueue ] .",
    "establishing the scale factors for each service in the wp1 system ( e.g. : how many users can a single matchmaking / job submission station serve , how many requests per unit time can a top - level access point to the information system serve , what is the sustained job throughput that can be achieved through the workload management chain , etc . ) is one of the fundamental premises for the correct design of the system .",
    "one could expect to obtain this knowledge either by applying queuing theory to this network model ( this requires obtaining a formal representation of all the components , their service time profiles and their interconnections ) or by measuring the service times and by identifying where long queues are likely to build up when a  realistic \" request load is injected in the system .",
    "this information could in principle also be used to identify the areas of the system where improvement is needed ( sometimes collectively called _ bottlenecks _ ) .",
    "experience with the wp1 software integration showed that both of these approaches are impractical for either dimensioning the system or ( possibly even more important ) for identifying the trouble areas that affect the system throughput .",
    "we identified two non - linear factors that definitely work against the predictive power of queuing theory in this case , and require extra care even to apply straightforward reasoning when bottlenecks are to be identified to improve system throughput .",
    "these are the consequence of common programming practice ( and are therefore easy to be found in the software components that we build or are integrating ) and are described in the following section .",
    "one of the most common ( and most frustrating , both to developers and to end users ) experiences in troubleshooting the wp1 workload management system on the edg testbed has been the fact that often , perceived _",
    "improvements _ to the system ( sometimes even simple bug fixes ) result in a _ decrease _ in the system stability , or reliability ( fraction of requests that complete successfully ) .",
    "the cause is often closely related to the known fact that removing a bottleneck , in any flow system , can cause an overflow downstream , possibly close to the _ next _ bottleneck .",
    "the complicating factor is that there are at least two characteristics that could ( and possibly still can ) be found in many elements of our integrated workload management queuing network , that can cause problems to appear even very far from the area of the network where an _ improvement _ is being attempted :    * _ queues of job requested can form where they can impact on the system load . _ + different techniques can be chosen or needed to pass job requests around . sometimes a socket connection is needed , sometimes sequential request processing ( one request at a time in the system ) is required for some reason , and multiple processes / threads may be used to handle individual requests . having a number of tasks ( processes / threads ) wait for a socket queue or a sequential processing slot",
    "is one way to  queue \" requests that definitely generates much extra work for the process scheduler , and can cause any other process served by the same scheduler to be allocated less and less time .",
    "queues that are unnecessarily scanned while waiting for some other condition to allow the processing of their element can also impact on the system load , especially if the queue elements are associated to significant amounts of allocated dynamic memory . *",
    "_ some system components can enforce hard timeouts and cause anomalies in the job flow . _",
    "+ when handling the access ( typically via socket connections ) to various distributed services , provisions typically need to be made to handle all possible failure modes .",
    " reasonably \" long timeouts are sometimes chosen to handle failures that are perceived to be very unlikely by developers ( failure to establish communication to a local service , for instance ) .",
    "this kind of failures , however , can easily materialise when the system resources are exhausted under a stress test or load peak .",
    "figure [ fig - fmode ] illustrates how these two effects can conspire to frustrate a genuine effort to remove what seems the limiting bottleneck in the system ( the example in the figure does nor refer to any real case or component ) : removing the bottleneck ( 1 ) causes a request queue to build up at the next station ( 2 ) , and this interferes via the system load to cause hard timeouts and job failures elsewhere ( 3 ) .",
    "this example is used to rationalise some of the unexpected reactions that , in many cases , were found while working on the wp1 integrated system .",
    "the experience on practical troubleshooting cases similar to this one , while bringing an understanding of the difficulties inherent in building distributed systems , also drove us to formulate some of the principles that are presented in the next section .",
    "the attempts at getting a deeper understanding of the edg - wp1 workload management system and their failures led us to formulate a few design principles and to apply them to the second major software release . here",
    "are the principles that descend from the paradigm example described in section [ sec - fmode ] :    1 .",
    "* queues of various kinds of requests for processing should be allowed to form where they have a minimal and understood impact on system resources . *",
    "+ queues that get ` filled ' in the form of multiple threads or processes , or that allocate significant amounts of system memory should be avoided , as they not only adversely impact system performance , but also generate inter - dependencies and complicate troubleshooting .",
    "* limits should always be placed on dynamically allocated objects , threads and/or subprocesses . *",
    "+ this is a consequence of the previous point : every dynamic resource that gets allocated should have a tunable system - wide limit that gets enforced .",
    "* special care needs to be taken around the pipeline areas where serial handling of requests is needed .",
    "* + the impact of any contention for system resources becomes more evident near areas of the queuing system that require the acquisition of system - wide locks .",
    "so far we concentrated on a specific attempt at modeling and understanding the workload management system that led to an increased attention to the usage of shared resources .",
    "there were other specific practical issues that emerged during the deployment and troubleshooting of the system and that led to the awareness of some fundamental design or implementation mistake that was made .",
    "here is a short list , where the fundamental principle that should correct the fundamental mistake that was made is listed :    1 .",
    "* communication among services should always be reliable : * * always applying double - commit and rollback for network communications . * going through the filesystem for local communications .",
    "+ in general , forms of communication that do nt allow for data or messages to be lost in a broken pipe lead to easier recovery from system or process crashes . where network communication is necessary",
    ", database - like techniques have to be used .",
    "every process , object or entity related to the job lifecycle should have another process , object or entity in charge of its well - being . *",
    "+ automatic fault recovery can only happen if every entity is held accountable and accounted for .",
    "* information repositories should be minimized ( with a clear identification of authoritative information ) . *",
    "+ many of the software components that were integrated in the edg - wp1 solution are stateful and include local repositories for request information , in the form of local queues , state files , database back - ends .",
    "only one site with authoritative information about requests has to be identified and kept .",
    "monolithic , long - lived processes should be avoided . * + dynamic memory programming , using languages and techniques that require explicit release of dynamically allocated objects , can lead to leaks of memory , descriptors and other resources .",
    "experimental , r&d code can take time to leak - proof , so it should possibly not be linked to system components that are long - lived , as it can accelerate system resource starvation . short - lived , easy - to - recover components are a clean and very practical workaround in this case",
    "more thought should be devoted to efficiently and correctly recovering a service rather than to starting and running it . *",
    "+ this is again a consequence of the previous point : the capability to quickly recover from failures or interruption helps in assuring that system components ` can ' be short - lived , either by design or by accident .",
    "edg - wp1 has been distributing jobs over the edg testbed in a continuous fashion for one and a half years now , with a software solution where existing grid technology was integrated wherever possible .",
    "the experience of understanding the direct and indirect interplay of the service components could not be reduced to a simple _ scalability _ evaluation .",
    "this because understanding and removing _ bottlenecks _ is significantly complicated by non - linear and non - continuous effects in the system . in this process",
    ", few principles that apply to the very complex practice of distributed systems operations were learned the hard way ( i.e. not by just reading some good book on the subject ) .",
    "edg - wp1 tried to incorporate these principles in its second major software release that will shortly face deployment in the edg testbed .",
    "j. frey , t. tannenbaum , i. foster , m. livny , s. tuecke , `` condor - g : a computation management agent for multi - institutional grids '' , _ proceedings of the tenth ieee symposium on high performance distributed computing ( hpdc10 ) _ , 2001    datagrid wp1 members ( c. anglano _ et al .",
    "_ ) ,  * integrating grid tools to build a computing resource broker : activities of datagrid wp1 * \" presented at the chep 2001 conference , beijing ( p. 708",
    "in the proceedings )"
  ],
  "abstract_text": [
    "<S> application users have now been experiencing for about a year with the standardized resource brokering services provided by the workload management package of the eu datagrid project ( wp1 ) . </S>",
    "<S> understanding , shaping and pushing the limits of the system has provided valuable feedback on both its design and implementation . </S>",
    "<S> a digest of the lessons , and  better practices \" , that were learned , and that were applied towards the second major release of the software , is given . </S>"
  ]
}