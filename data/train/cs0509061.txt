{
  "article_text": [
    "suppose that a group of individuals is voting among three candidates ( or alternatives ) , call these candidates @xmath3 , @xmath4 , and @xmath5 .",
    "further suppose that four - ninths of the voters rank the candidates , in order of strictly increasing preference , @xmath6 , that three - ninths rank them @xmath7 , and that the remaining two - ninths rank them @xmath8 .",
    "so five - ninths of the voters prefer @xmath4 to @xmath3 and six - ninths of the voters prefer @xmath4 to @xmath5 . a candidate such as @xmath4 , i.e. , a candidate who when paired against each other candidate is preferred by a strict majority of the voters , is called a _ condorcet winner _  @xcite .",
    "a _ voting system _ maps from candidates and voters ( each of whose preference order over the candidates is represented by a strict , linear order ) to a winner set , which must be a subset of the candidate set . as condorcet noted in the 1700s  @xcite it is quite possible that sometimes there is no condorcet winner .",
    "the classic example is the following .",
    "given a choice between @xmath3 , @xmath4 , and @xmath5 , one - third of a group might rank ( in order of strictly increasing preference ) the candidates @xmath7 , another third might rank them @xmath9 , and the remaining third might rank them @xmath10 .",
    "so two - thirds of the voters prefer @xmath4 to @xmath3 , two - thirds of the voters prefer @xmath3 to @xmath5 , and two - thirds of the voters prefer @xmath5 to @xmath4 .",
    "clearly , there is no condorcet winner .",
    "a voting system is said to obey the _",
    "condorcet criterion _ if it selects the condorcet winner whenever one exists .",
    "the condorcet criterion may seem so natural that one might at first glance fail to see that many of the most widely - used voting rules do not meet it .",
    "for instance , in the `` 4/9 , 3/9 , 2/9 '' example above , if the voters were to use plurality - rule  i.e .",
    ", a candidate is the winner if he or she receives the most first - place votes  then the group would choose @xmath3 . as a second example , if instead the group were to hold an election under instant - runoff voting , @xmath5 would win and @xmath4 would be the first candidate eliminated . in instant - runoff voting ,",
    "if no candidate is listed as the most favorite by a majority of the voters then each candidate who is listed as the most favorite by the fewest voters ( i.e. , @xmath4 in our example ) is dropped from preference lists and the election is recomputed with the edited lists ; the process ends when a majority winner emerges ( or due to ties all candidates have been removed ) .",
    "examples where election systems fail to meet the condorcet criterion are hardly new . in the 1800",
    "s nanson  @xcite wrote on the fact that well - known voting systems , such as borda s  @xcite famous rank - based point system , fail to satisfy the condorcet criterion .    in 1876",
    "the mathematician charles dodgson , whose name when an author of fiction was the now famous pseudonym of lewis carroll , devised a voting system  @xcite that has many lovely properties and meets the condorcet criterion . in dodgson s system , each voter strictly ranks ( i.e. , no ties allowed ) all candidates in the election .",
    "if a condorcet winner exists , he or she wins the dodgson election . if no condorcet winner exists , dodgson s approach is to take as winners all candidates that are `` closest '' to being condorcet winners , with closest being in terms of the fewest changes to the votes needed to make the candidate a condorcet winner .",
    "we will in section  [ sec : def ] describe what exactly dodgson means by `` fewest changes , '' but intuitively speaking , it is the smallest number of sequential switches between adjacent entries in the rankings the voters provide .",
    "it can thus be seen as a sort of `` edit distance ''  @xcite .",
    "dodgson wrote about his voting system in a pamphlet on the conduct of elections  @xcite .",
    "it is now regarded as a classic of social choice theory  @xcite .",
    "dodgson s system was a relatively early example of a system satisfying the condorcet criterion  though , remarkably , the catalan mystic ramon llull in the thirteenth century had already proposed a system that satisfies the condorcet criterion and has many other strengths ( see @xcite ) .",
    "although dodgson s system has many nice properties , it also poses computational problems that are serious enough to make it an impractical choice for a general voting system that is guaranteed to work efficiently in any setting : the problem of checking whether a certain number of changes suffices to make a given candidate the condorcet winner is @xmath2-complete  @xcite , and the problem of computing an overall winner , as well as the related problem of checking whether a given candidate is at least as close as another given candidate to being a dodgson winner , is complete for @xmath0  @xcite .",
    "the @xmath0 level of the polynomial hierarchy can be defined as the class of problems solvable with polynomial - time parallel access to an @xmath2 oracle  ( @xcite , see also  @xcite ) .",
    "more recent work has shown that some other important election systems are complete for @xmath0 : hemaspaandra , spakowski , and vogel  @xcite have shown @xmath0-completeness for the winner problem in kemeny elections , and rothe , spakowski , and vogel  @xcite have shown @xmath0-completeness for the winner problem in young elections .",
    "the above complexity results about dodgson elections show , quite dramatically , that unless the polynomial hierarchy collapses there is no efficient ( i.e. , polynomial - time ) algorithm that is guaranteed to always determine the winners of a dodgson election .",
    "does this then mean that dodgson s widely studied and highly regarded voting system is unusable ?",
    "it turns out that if a small degree of uncertainty is tolerated , then there is a simple , polynomial - time algorithm , ` greedywinner ` ( the name s appropriateness will later become clear ) , that takes as input a dodgson election and a candidate from the election and outputs an element in @xmath11 .",
    "the first component of the output is the algorithm s guess as to whether the input candidate was a winner of the input election .",
    "the second output component indicates the algorithm s confidence in its guess . regarding the accuracy of ` greedywinner ` , we show that for each ( election , candidate ) pair , it holds that if ` greedywinner ` outputs @xmath12 as its second output component , then its first output component correctly answers the question , `` is the input candidate a dodgson winner of the input election ? ''",
    "( this is an example of what we call _ self - knowing correctness _ ; definition  [ d : skc ] will make this formal . )",
    "we also show that for each @xmath13 the probability that a dodgson election @xmath14 selected uniformly at random from all dodgson elections having @xmath15 candidates and @xmath16 votes ( i.e. , all @xmath17 dodgson elections having @xmath15 candidates and @xmath16 votes have the same likelihood of being selected@xmath18-candidate elections have the fixed candidate set @xmath19 ( though in some examples we for clarity will use other names , such as @xmath3 , @xmath4 , @xmath5 , and @xmath20 ) .",
    "so , though we to be consistent with earlier papers on dodgson elections allow the candidate set `` @xmath21 '' to be part of the input , in fact we view this as being instantly coerced into the candidate set @xmath22 . and",
    "we similarly view voter _ names _ as uninteresting.]@xmath23 ) has the property that there exists at least one candidate @xmath5 such that ` greedywinner ` on input @xmath24 outputs @xmath25 as its second output component is less than @xmath26 .",
    "thus for elections where the number of voters greatly exceeds the number of candidates ( though the former could still be within a ( superquadratic ) polynomial of the latter , consistently with the success probability for a family of election draws thus - related in voter - candidate cardinality going asymptotically to 1 ) , if one randomly chooses an election @xmath27 , then with high likelihood it will hold that for each @xmath28 the efficient algorithm ` greedywinner ` when run on input @xmath29 correctly determines whether @xmath5 is a dodgson winner of @xmath14 , and moreover will `` know '' that it got those answers right .",
    "so ` greedywinner ` is a self - knowingly correct heuristic , and we will prove the above claims showing it is frequently ( self - knowingly ) correct . though the ` greedywinner ` algorithm on its surface is about _ recognizing _ dodgson winners , as discussed in section  [ sec : algor ] our algorithm can be easily modified into one that is about , given an @xmath27 , _ finding _ the complete set of dodgson winners and that does so in a way that is , in essentially the same high frequency as for ` greedywinner ` , self - knowingly correct . later in this paper , we will introduce another frequently self - knowingly correct heuristic , called ` greedyscore ` , for calculating the dodgson score of a given candidate .",
    "the study of greedy algorithms has an extensive history ( see the textbook  @xcite and the references therein ) .",
    "much is known in terms of settings where a greedy algorithm provides a polynomial - time approximation , for example  @xcite , and of guarantees that a greedy algorithm will frequently solve a problem  for example kaporis , kirousis , and lalas study how frequently a greedy algorithm finds a satisfying assignment to a boolean formula  @xcite , and many additional excellent examples exist , e.g. , @xcite . however , each of these differs from our work in either not being about _ self - knowing _ correctness or , if about self - knowing correctness , in being about an np - certificate type of problem .",
    "in contrast , as discussed in more detail immediately after definition  [ d : skc ] , the problem studied in this paper involves objects that are computationally more demanding than mere certificates for np set membership .    among earlier algorithms having a self - knowingly correct flavor , a particularly interesting one ( though",
    ", admittedly , it is about finding certificates for np set membership ) is due to goldberg and marchetti - spaccamela  @xcite .",
    "goldberg and marchetti - spaccamela construct for every @xmath30 a modified greedy algorithm that is deterministic , runs in polynomial time ( where the polynomial depends on @xmath31 ) , and with probability at least @xmath32 self - knowingly finds an optimal solution of a randomly chosen ( from a particular , but natural , distribution ) instance of the knapsack problem .",
    "( they call their algorithm `` self checking '' rather than `` self - knowingly correct . '' ) besides being about an np - type problem rather than a `` @xmath0''-type problem such as dodgson elections , a second way in which this differs from our work is that the running time of our algorithms does not depend on the desired likelihood of correctness .",
    "the concept of a heuristic that is effective on a significant portion of the problem instances of some very hard ( e.g. , not even in @xmath2 unless @xmath33 ) problem and furthermore has the additional property that it can very frequently guarantee that its answers are correct is related to other theoretical frameworks .",
    "parameterized complexity  @xcite studies hard problems that have efficient solutions when instances of the problem are restricted by fixing one or more of the parameters that describe the instances .",
    "the two most natural parameters of dodgson elections are the number of candidates and the number of voters .",
    "it is known that with either of these parameters bounded by a constant , dodgson elections have polynomial - time algorithms  @xcite .",
    "however , we are interested in cases when no such dramatic bounding of a parameter by a constant occurs .",
    "like average - case  ( @xcite , see also the excellent surveys @xcite ) and smoothed  @xcite analyses , our analysis of @xmath34 is probabilistic .",
    "but while those methods are concerned with the expected value over segments of the problem domain of some resource of interest , typically time or a transformed version of time , we focus on a quite different property : correctness . other recent papers also focusing on frequency ( or probability weight ) of correctness for hard voting - related problems ( though not dodgson voting ) include work of conitzer and sandholm  @xcite and procaccia and j. rosenschein  @xcite .",
    "those papers both assume a skewed underlying preference distribution , and in contrast our paper is focused on a uniform preference distribution .",
    "the paper that is closest to the present paper is the independent work of mccabe - dansted , pritchard , and slinko  @xcite .",
    "the core insight there is the same as our core insight : that for appropriate numbers of candidates and voters it will hold that , if voter preferences are independent and uniform , then on a very large portion of cases one can , purely by making swaps between one s candidate of interest and people adjacently beating it within votes , make the candidate a condorcet winner ( i.e. , shift enough to precisely eliminate any shortfalls ) .",
    "we now in the main text summarize the three major differences between @xcite and our work .",
    "the footnotes to this summary contain additional discussion that , while important for completeness , may be safely omitted on a first reading .    the first major difference between our work and that of mccabe - dansted , pritchard , and slinko is that their heuristic , dodgsonquick , outputs just a score .",
    "although that score is correct on a large portion of inputs , their dodgsonquick does nt on any particular input ever guarantee that the score is correct .",
    "in contrast , our @xmath35 heuristic is frequently _ self - knowingly _ correct  on a large portion of inputs , it gives the right answer and guarantees that that answer is right .",
    "mccabe - dansted , pritchard , and slinko state that their dodgsonquick is simpler than our @xmath35 .",
    "however , this is precisely because dodgsonquick is just tossing out a score , rather than working to ensure self - knowingness .",
    "if one changed their dodgsonquick to explicitly handle self - knowingness , it would become almost identical to our algorithm .",
    "indeed , whenever our algorithm is self - knowingly correct , its computed score would coincide exactly with their algorithm s computed score  if one modified their algorithm to correct for the `` third major difference '' mentioned below .",
    "the second major difference regards range of application .",
    "our analysis leaves both the number of candidates and the number of voters as variables . by doing so",
    ", we produce a general bound flexible enough to ensure that the correctness ( indeed , the self - knowing correctness ) probability , under uniform - like inputs , goes asymptotically to one as long as the number of voters is at least some more - than - quadratic polynomial in the number of candidates . in sharp contrast , their claims cover just the subcase of this in which the number of candidates is held _ constant _ , while the number of voters increases.[multiblock footnote omitted ]    a third and easy - to - miss major difference is that our dodgson score is indeed dodgson s score notion : the number of swaps needed to make the candidate a strictly beat each other candidate in a head - on - head comparison ( dodgson s crucial words relating to this are `` absolute majority ''  @xcite ) , i.e. , become a condorcet winner in the standard sense of that term .",
    "in contrast , @xcite , without mentioning that it is differing from the settled notion of dodgson score , uses as its definition of that concept a quite different score : the number of swaps needed to make the candidate _ tie or _",
    "beat each other candidate in a head - on - head comparison . for clarity ,",
    "let us refer to this notion as variantdscore .",
    "( to see that this is what they define , one must carefully note their nonstandard definition of condorcet winner . )",
    "the difference between dodgson score and variantdscore is not just an `` off by one '' in the score .",
    "in fact , intervening candidates may have to be crossed to best close a shifted gap , and so variantdscore can vary from being the same as the dodgson score in some cases to being nontrivially smaller in other cases . on the other hand , due to the fact that both their and our algorithms focus on cases where purely adjacent swaps , at most one per voter , can triumph , this difference has just a relatively mild reflection in the formulas and algorithms of the two papers .",
    "for example , it is this difference that results in their paper having expressions such as @xmath36 in contrast with , in our paper , expressions such as @xmath37.[multiblock footnote omitted ]    like approximation algorithms , our algorithms are time efficient even in the worst case .",
    "but approximation algorithms typically have worst - case guarantees on how far the answers they provide deviate from the optimal answers .",
    "we by contrast are only interested in how frequently the algorithms are correct .",
    "even when we study optimization problems , as with @xmath35 , we make no guarantees on how close actual dodgson scores are to the corresponding answers that @xmath35 provides in cases when the confidence is `` maybe . ''    additionally ,",
    "the key feature that separates our work from each of the above - mentioned related frameworks is the `` self - knowing '' aspect of our work .",
    "the closest related concepts to this aspect of our analysis are probably those involving proofs to be verified , such as @xmath2 certificates and the proofs in interactive proof systems .",
    "although our algorithms do not provide actual certificates , one could reasonably require a transcript of the execution of either of our algorithms .",
    "with such a transcript , it would be easy to verify in deterministic polynomial time that the algorithm , in cases where the confidence is `` definitely , '' presented a valid proof .",
    "put somewhat differently , our algorithms can easily be modified to give , in each `` definitely '' case , a specific set of swaps that achieve a dodgson score that is clearly optimal . by contrast ,",
    "in interactive proof systems the methods for verifying the proofs involve a probabilistic , interactive process .",
    "we do not consider interactive processes in this paper . in section  [ sec : algor ] we discuss in more detail the differences between heuristics that find @xmath2 certificates and self - knowingly correct algorithms , but the most obvious difference is that , unless @xmath38 , the problem of verifying whether a given candidate is a dodgson winner for a given election is not even in @xmath2 .",
    "as mentioned in the introduction , in dodgson s voting system each voter strictly ranks the candidates in order of preference . formally speaking , for @xmath13throughout",
    "this paper we by definition do not admit as valid elections with zero candidates or zero voters  a _ dodgson election _ is an ordered pair @xmath39 where @xmath21 is a set @xmath40 of candidates ( as noted earlier , we without loss of generality view them as being named by @xmath41 , @xmath42  @xmath15 ) and @xmath43 is a tuple @xmath44 of _ votes _ and a _ dodgson triple _ , denoted @xmath29 , is a dodgson election @xmath45 together with a candidate @xmath46 .",
    "each vote is one of the @xmath47 total orderings over the candidates , i.e. , it is a complete , transitive , and antireflexive relation over the set of candidates .",
    "we will sometimes denote a vote by listing the candidates in increasing order , e.g. , @xmath48 is a vote over the candidate set @xmath49 in which @xmath50 is preferred to @xmath51 and @xmath52 is preferred to ( @xmath51 and ) @xmath50 .",
    "a candidate is never preferred to him- or herself . for vote @xmath53 and candidates @xmath54 , `` @xmath55 '' means `` in vote @xmath53 , @xmath20 is preferred to @xmath5 '' and `` @xmath56 '' means `` @xmath57 and there is no @xmath58 such that @xmath59 . ''",
    "each dodgson election gives rise to @xmath60 _ pairwise races _",
    ", each of which is created by choosing two distinct candidates @xmath61 and restricting each vote @xmath53 to the two chosen candidates , that is , to either @xmath62 or @xmath63 .",
    "the winner of the pairwise race is the one that a strict majority of voters prefer . due to ties ,",
    "a winner may not always exist in pairwise races .",
    "a _ condorcet winner _ is any candidate @xmath5 that , against each remaining candidate , is preferred by a strict majority of voters . for a given election ( i.e. , for a given sequence of votes ) , it is possible that no condorcet winner exists .",
    "however , when one does exist , it is unique .",
    "dodgson s scores are in a sense an edit - distance notion based on the basic operation of swapping adjacent candidates in a voter s preference order . in particular , for any vote @xmath53 and any @xmath54 , if @xmath64 , let @xmath65 denote the vote @xmath66 , where @xmath66 is the same total ordering of @xmath21 as @xmath53 except that @xmath67 ( note that this implies @xmath68 ) . if @xmath69 then @xmath65 is undefined . in effect",
    ", a swap causes @xmath5 and @xmath20 to `` switch places , '' but only if @xmath5 and @xmath20 are adjacent .",
    "the _ dodgson score _ of a dodgson triple @xmath29 is the minimum number of swaps that , applied sequentially to the votes in @xmath43 , make @xmath43 a sequence of votes in which @xmath5 is the condorcet winner .",
    "a _ dodgson winner _ is a candidate that has the smallest dodgson score .",
    "this is the election system developed in the year 1876 by dodgson ( lewis carroll )  @xcite , and as noted earlier it gives victory to the candidate(s ) who are `` closest '' to being condorcet winners .",
    "note that if no candidate is a condorcet winner , then two or more candidates may tie , in which case all tying candidates are dodgson winners .",
    "several examples show how dodgson elections work , and hint at why they are hard , in general , to solve : consider an election having four candidates @xmath70 and one hundred votes in which sixty are @xmath71 and forty are @xmath72 . since @xmath20 is already ( i.e. , before any exchanges take place ) a condorcet winner , @xmath20 s dodgson score is @xmath73 .",
    "thus @xmath20 is the dodgson winner .",
    "now suppose in another election having the same candidates and the same number of voters as in the previous example that twenty voters each vote @xmath74 , @xmath75 , @xmath72 , @xmath76 , and @xmath77 , respectively . in this case",
    ", there is no condorcet winner , so we calculate the dodgson score of each candidate",
    ". consider candidate @xmath3 .",
    "candidate @xmath3 beats @xmath20 by twenty votes  of course , changes in the votes of as few as eleven voters can overcome such a shortfall .",
    "candidate  @xmath3 loses to @xmath5 by twenty votes .",
    "and candidate  @xmath3 loses to @xmath4 by twenty votes .",
    "what is the fewest number of swaps needed to make @xmath3 a condorcet winner ? it might be tempting to make , for each of eleven votes of the form @xmath78 , the following transformation : @xmath79 .",
    "but this transformation is not an allowed swap because only elements that are adjacent in the ordering imposed by the vote may be swapped at unit cost .",
    "we can , however , make eleven of the following series of two swaps each : @xmath80 .",
    "this can clearly be seen to be an optimal number of swaps in light of @xmath3 s initial vote shortfalls  and note that every swap improves @xmath3 s standing against either @xmath4 or @xmath5 in a way that directly reduces a still - existing shortfall .",
    "so the dodgson score of @xmath81 is twenty - two .",
    "what makes it hard to calculate dodgson scores is what makes many combinatorial optimization problems hard : there is no apparent , simple way to locally determine whether a swap will lead to an optimally short sequence that makes the candidate of interest the condorcet winner .",
    "for instance , if in calculating the dodgson score of @xmath3 we had come across votes of the form @xmath76 first , we might have made the following series of swaps , @xmath82 , which contain a swap between @xmath3 and @xmath20 .",
    "but this series of swaps is not optimal because @xmath3 already beats @xmath20 , and because , as we saw , there is already a series of twenty - two swaps available , where each swap helps @xmath3 against some adversary that @xmath3 has not yet beaten , that makes @xmath3 a condorcet winner .",
    "( however , there are instances of dodgson elections in which the only way for a candidate to become a condorcet winner is for it to swap with adversaries that the candidate is already beating , so one can not simply ignore this possibility . ) assuming that we did not at first see the votes that constitute this optimal sequence and instead hastily made swaps that did not affect @xmath3 s current standing against @xmath4 or @xmath5 , we could have , as soon as we had come across votes of the form @xmath71 , backtracked from the hastily made swaps that led toward a nonoptimal solution and , eventually , have correctly calculated the dodgson score . but as the size of elections increases , the amount of backtracking that a naive strategy might need to make in order to correct for any nonoptimal swaps combinatorially explodes . of course , computational complexity theory can give evidence of hardness that is probably more satisfying than are mere examples .",
    "however , before turning to the computational complexity of dodgson - election - related problems , a couple of preliminary definitions are in order .",
    "the class @xmath2 is precisely the set of all languages solvable in nondeterministic polynomial time .",
    "@xmath0 can be equivalently defined either as the class of languages solvable in deterministic polynomial time with @xmath83 queries to an @xmath2 language or as the class of languages solvable in deterministic polynomial time via parallel access to @xmath2 .",
    "@xmath0 was first studied by papadimitriou and zachos  @xcite , received its current name from wagner  @xcite , and has proven important in many contexts . in particular , it seems central in understanding the complexity of election systems  @xcite .",
    "all @xmath2 languages are in @xmath0 .",
    "it remains open whether @xmath0 contains languages that are not in @xmath2 ; it does exactly if @xmath84 .",
    "bartholdi , tovey , and trick  @xcite define the following decision problems , i.e. , mappings from @xmath85 to @xmath86 , associated with dodgson elections .",
    "we take the problem wordings from  @xcite .",
    "* decision problem : * @xmath87 + * instance : * a dodgson triple @xmath29 ; a positive integer @xmath88 . + * question * is @xmath89 , the dodgson score of candidate @xmath5 in the election specified by @xmath90 , less than or equal to @xmath88 ?    * decision problem : * @xmath34 + * input : * a dodgson triple @xmath29 . + * question : * is @xmath5 a winner of the election ?",
    "that is , does @xmath5 tie - or - defeat all other candidates in the election ?",
    "bartholdi , tovey , and trick show that the problem of checking whether a certain number of changes suffices to make a given candidate the condorcet winner is @xmath2-complete and that the problem of determining whether a given candidate is a dodgson winner is @xmath2-hard  @xcite .",
    "hemaspaandra , hemaspaandra , and rothe show  @xcite that this latter problem , as well as the related problem of checking whether a given candidate is at least as close as another given candidate to being a dodgson winner , is complete for @xmath0 .",
    "hemaspaandra , hemaspaandra , and rothe s results show that determining a dodgson winner is not even in @xmath2 unless the polynomial hierarchy collapses .",
    "this line of work has significance because the hundred - year - old problem of deciding if a given candidate is a dodgson winner was much more naturally conceived than the problems that were previously known to be complete for @xmath0 ( see  @xcite ) .",
    "in this section , we study the polynomial - time greedy algorithms ` greedyscore ` and ` greedywinner ` , which are given , respectively , as figure  [ f : score ] ( page  ) and figure  [ f : winner ] ( page  ) .",
    "we show that both algorithms are self - knowingly correct in the sense of the following definition .",
    "[ d : skc ] for sets @xmath91 and @xmath92 and function @xmath93 , an algorithm @xmath94 is _ self - knowingly correct for @xmath95 _ if , for all @xmath96 and @xmath97 , whenever @xmath98 on input @xmath99 outputs @xmath100 it holds that @xmath101 .",
    "the reader may wonder whether `` self - knowing correctness '' is so easily added to heuristic schemes as to be uninteresting to study .",
    "for example , if one has a heuristic for finding certificates for an np problem with respect to some fixed certificate scheme ( in the standard sense of np certificate schemes)e.g .",
    ", for trying to find a satisfying assignment to an input ( unquantified ) propositional boolean formula  then one can use the p - time checker associated with the problem to `` filter '' the answers one finds , and can put the label @xmath12 on only those outputs that are indeed certificates .",
    "however , the problem studied in this paper does not seem amenable to such after - the - fact addition of self - knowingness , as in this paper we are dealing with heuristics that are seeking objects that are computationally much more complex than mere certificates related to np problems .",
    "in particular , a polynomial - time function - computing machine seeking to compute an input s dodgson score seems to require about logarithmically many adaptive calls to sat . , among the problems that hemaspaandra , hemaspaandra , and",
    "rothe  @xcite prove complete for the language class @xmath0 is @xmath34 .",
    "if one could , for example , compute dodgson scores via a polynomial - time function - computing machine that made a ( globally ) constant - bounded number of queries to sat , then this would prove that @xmath34 is in the boolean hierarchy  @xcite , and thus that @xmath0 equals the boolean hierarchy , which in turn would imply the collapse of the polynomial hierarchy  @xcite .",
    "that is , this function problem is so closely connected to a @xmath0-complete language problem that if one can save queries in the former , then one immediately has consequences for the complexity of the latter . ]",
    "we call ` greedyscore ` `` greedy '' because , as it sweeps through the votes , each swap it ( virtually ) does immediately improves the standing of the input candidate against some adversary that the input candidate is at that point losing to .",
    "the algorithm nonetheless is very simple .",
    "it limits itself to at most one swap per vote .",
    "yet , its simplicity notwithstanding , we will eventually prove that this ( self - knowingly correct ) algorithm is very frequently correct .",
    "our results in this section , since they are just stated as simply polynomial - time results ( see theorem  [ th : grd - self ] below ) , are not heavily dependent on the encoding scheme used .",
    "however , we will for specificity give a specific scheme that can be used .",
    "note that the scheme we use will encode the inputs as binary strings by a scheme that is easy to compute and invert and encodes each vote as an @xmath102-bit substring and each dodgson triple as an @xmath103-bit string , where @xmath104 is the input to the encoding scheme . for a dodgson triple @xmath29 , our encoding scheme is as follows .",
    "- : :    the first bits of the encoding string contain @xmath105 ,    encoded as a binary string of length    @xmath106,-bit strings rather than    @xmath107-bit strings as we wish to    have the size of the coding scale at least linearly with the number of    voters  even in the pathological @xmath108 case , in which    each vote carries no information other than about the number of    voters . ]",
    "preceded by the substring    @xmath109 .",
    "- : :    next in the encoding string are bits specifying the chosen candidate    @xmath5 , encoded as a binary string of length    @xmath106 .",
    "- : :    the rest of the bits of the encoding string give the votes , where each    vote is encoded as a binary substring of length    @xmath110 .",
    "@xmath21 is the set of candidates .",
    "@xmath43 is the list of votes .",
    "@xmath46 is the candidate whose score the algorithm tries to compute .",
    "@xmath111initialize counter variables , which represent : @xmath112 \\leftarrow 0$]the number of votes by which @xmath20 is beating @xmath5 .",
    "@xmath113 \\leftarrow 0$]the number votes that may be `` greedily '' swapped against @xmath20 .",
    "count the votes .",
    "( each vote @xmath53 is treated as an array where @xmath114 $ ] is the least preferred candidate , @xmath115 $ ] is the second least preferred candidate , and so on , and @xmath116 $ ] is the most preferred candidate . )",
    "@xmath117 @xmath118 \\neq c$]subtract the `` pairwise votes '' for @xmath5 .",
    "@xmath119 $ ] @xmath112 = { \\mathit{deficit}}[d ] - 1 $ ] @xmath120 @xmath121$]count the opportunities to `` greedily swap . ''",
    "@xmath122 $ ] @xmath113 \\gets { \\mathit{swaps}}[d ] + 1 $ ] @xmath123 @xmath124$]add the `` pairwise votes '' against @xmath5 .",
    "@xmath119 $ ] @xmath112 = { \\mathit{deficit}}[d ] + 1 $ ] @xmath125 calculate the score . if there are enough greedily swappable votes to overcome all positive deficits , then the sum over one plus half of each positive deficit ( rounded down ) is certainly the dodgson score of @xmath5 .",
    "@xmath126 each @xmath111 [ l : begin ] @xmath112 \\geq 0 $ ] @xmath127/2\\rfloor + 1 $ ] @xmath112 \\geq 2 \\times { \\mathit{swaps}}[d]$ ] @xmath128 [ l : end ] @xmath129 @xmath130    @xmath21 is the set of candidates .",
    "@xmath43 is the list of votes .",
    "we wish to test whether @xmath5 is a dodgson winner in election @xmath39 .",
    "@xmath131 @xmath132 candidates @xmath111 @xmath133 @xmath134 @xmath135 @xmath136 @xmath137 return @xmath138    recall that the ` greedyscore ` and ` greedywinner ` algorithms are defined in figures  [ f : score ] and  [ f : winner ] .",
    "we now describe what our algorithms do .",
    "briefly put , on input @xmath104 , @xmath35 computes for each candidate @xmath111 the number of votes by which @xmath20 beats @xmath5 in the pairwise contest between them , and the number of votes where @xmath139 .",
    "these numbers are stored in @xmath112 $ ] and @xmath113 $ ] , respectively .",
    "for example , if 17 voters prefer @xmath20 to @xmath5 and 3 voters prefer @xmath5 to @xmath20 , then @xmath112 $ ] will be set to 14 . note that in that case a shift of 8 fan - of-@xmath20 voters would change the outcome to a victory for @xmath5 in this pairwise contest .",
    "@xmath35 then takes as the dodgson score @xmath140 \\geq 2 \\times { \\mathit{swaps}}[d]\\}|| +   \\sum_{d \\in c { \\mathbf{-}}\\{c\\ } : { \\mathit{deficit}}[d ] \\geq 0 } ( \\lfloor { \\mathit{deficit}}[d]/2\\rfloor + 1).\\ ] ] @xmath35 outputs this number , paired with `` definitely '' if @xmath141 < 2\\times{\\mathit{swaps}}[d]]$ ] , or with `` maybe , '' otherwise .",
    "\\geq 0 }   ( \\lfloor { \\mathit{deficit}}[d]/2\\rfloor + 1)$ ] . however , for the conference version s algorithm , whenever the confidence was `` maybe '' the algorithm output a value that was a strict lower bound on the true score  and so was certainly wrong .",
    "in contrast , the above algorithm in the `` maybe '' case outputs a half - hearted stab at the score  one that is sometimes too high , sometimes right , and sometimes too low . in terms of our theorems , the behavior on `` maybe '' cases does nt matter , as no promises are made about such cases . ]",
    "turning to the ` greedywinner ` algorithm , it does the above for all candidates , and if while doing so ` greedyscore ` is never stumped , then ` greedywinner ` uses in the obvious way the information it has obtained , and ( correctly ) states whether @xmath5 is a dodgson winner of the input election .    [ th : grd - self ]    1 .",
    "[ it : scoreskc ] ` greedyscore ` is self - knowingly correct for _ score_. 2 .",
    "[ it : winnerskc ] ` greedywinner ` is self - knowingly correct for @xmath34 .",
    "[ it : rt ] ` greedyscore ` and ` greedywinner ` both run in polynomial time .    in item",
    "[ it : scoreskc ] s statement , as set in section  [ sec : def ] in the statement of the ` dodgsonscore ` problem , _ score _ denotes the dodgson score . now , suppose that @xmath35 , on input @xmath29 , returns @xmath12 as the second component of its output .",
    "then , as inspecting lines  [ l : begin][l : end ] of the algorithm makes clear , every candidate @xmath111 for which @xmath112 \\geq 0 $ ] must also have @xmath112 < 2 \\times { \\mathit{swaps}}[d]$ ] . in this case , note that the algorithm sets its @xmath142 variable to @xmath143 \\geq 0 } ( \\lfloor { \\mathit{deficit}}[d]/2\\rfloor + 1)$ ] . for this value of @xmath142",
    "to actually be the dodgson score of @xmath5 , we must show ( a ) that we can by performing @xmath142 swaps turn @xmath39 into an election in which @xmath5 is the condorcet winner and ( b ) that by performing fewer than @xmath142 swaps we can not make @xmath5 a condorcet winner .",
    "both claims depend on the following observation : let @xmath53 be a vote having some candidate @xmath20 such that @xmath139 .",
    "then swapping @xmath5 and @xmath20 would decrease by two the difference between the number of votes where @xmath5 is preferred @xmath20 and the number of votes where @xmath20 is preferred @xmath5 .",
    "also , @xmath5 s standing against any candidate other than @xmath20 would not be affected by this swap .",
    "so , regarding the number of swaps needed to make @xmath5 beat some @xmath111 , let @xmath144 be the set of votes in @xmath43 in which @xmath145 .",
    "if @xmath112 $ ] is , by line  [ l : begin ] , nonnegative ( if @xmath112 $ ] is negative then @xmath5 already beats @xmath20 and the number of swaps needed is trivially 0 ) , and if @xmath146/2\\rfloor + 1 $ ] , then we can make @xmath5 beat @xmath20 by choosing exactly @xmath147/2\\rfloor + 1 $ ] votes in @xmath144 and swapping the positions of @xmath5 in @xmath20 in these votes .",
    "but @xmath113 $ ] is precisely @xmath148 and is , by our @xmath112 < 2 \\times { \\mathit{swaps}}[d]$ ] assumption , at least @xmath147/2\\rfloor + 1 $ ] .",
    "thus , by summing over all such @xmath111 , @xmath142 is enough swaps to make @xmath5 a condorcet winner , and we have satisfied ( a ) .    to see ( b )",
    ", suppose that it is possible to make @xmath5 a condorcet winner with _ fewer _ than @xmath149 \\geq 0 }   ( \\lfloor { \\mathit{deficit}}[d]/2\\rfloor + 1)$ ] swaps . then for some @xmath111 such that @xmath112 \\geq 0 $ ] it must hold that at most @xmath147/2 \\rfloor$ ] of these swaps are applied to @xmath5 s standing against @xmath20 .",
    "but then , since as noted above one swap changes the deficit between @xmath5 and @xmath20 by exactly two , we do not have enough swaps to make @xmath5 beat @xmath20 .",
    "so we must conclude under our current supposition  namely , that @xmath35 returns @xmath12 as the second component of its output  that @xmath142 is the optimal number of swaps needed to make @xmath5 a condorcet winner .    for item",
    "[ it : winnerskc ] , clearly ` greedywinner ` correctly checks whether @xmath5 is a dodgson winner if every call it makes to @xmath35 correctly calculates the dodgson score .",
    "` greedywinner ` then returns @xmath12 exactly if each call it makes to ` greedyscore ` returns @xmath150  @xmath151but , by item  [ it : scoreskc ] , ` greedyscore ` is self - knowingly correct .",
    "item  [ it : rt ] follows from a straightforward analysis of the algorithm .",
    "the total number of line - executions in a run of ` greedyscore ` is clearly @xmath152 , and for ` greedywinner ` is , including the line - executions within the subroutine calls , @xmath153 .",
    "so these are indeed polynomial - time algorithms .",
    "time to look up a key in either @xmath154 or @xmath155 and @xmath156 time to update the associated value , and each @xmath157 operation takes @xmath158 time ) the running time of the algorithm might be more fairly viewed as @xmath159 ( respectively , @xmath160 ) , though in any case it certainly is a polynomial - time algorithm . ]    note that ` greedywinner ` could easily be modified into a new polynomial - time algorithm that , rather than checking whether a given candidate is the winner of the given dodgson election , finds all dodgson winners by taking as input a dodgson election alone ( rather than a dodgson triple ) and outputting a list of _ all _ the dodgson winners in the election . this modified algorithm on any dodgson election @xmath39",
    "would make exactly the same calls to ` greedyscore ` that the current ` greedywinner ` ( on input @xmath104 , where @xmath46 ) algorithm makes , and the new algorithm would be accurate whenever every call it makes to ` greedyscore ` returns @xmath12 as its second argument .",
    "thus , whenever the current ` greedywinner ` would return a @xmath12 answer so would the new dodgson - winner - finding algorithm ( when their inputs are related in the same manner as described above ) .",
    "these comments explain why in the title ( and abstract ) , we were correct in speaking of `` _ _ finding _ _ dodgson - election winners '' ( rather than merely recognizing them ) .",
    "in this section , we prove that , as long as the number of votes is much greater than the number of candidates , ` greedywinner ` is a frequently self - knowingly correct algorithm .    throughout this section ,",
    "regard @xmath161 as a sequence of @xmath16 independent observations of a random variable @xmath162 whose distribution is uniform over the set of all votes over a set @xmath163 of @xmath15 candidates , where @xmath162 can take , with equal likelihood , any of the @xmath47 distinct total orderings over  @xmath21 .",
    "( this distribution should be contrasted with such work as that of , e.g. ,  @xcite , which in a quite different context creates dependencies between voters preferences . )    the main intuition behind theorem  [ th : main - tech ] is that , in any election having @xmath15 candidates and @xmath16 voters , and for any two candidates @xmath5 and @xmath20 , it holds that , in exactly half of the ways @xmath53 a voter can vote , @xmath55 , but for exactly @xmath164 of the ways , @xmath139 .",
    "thus , assuming that the votes are chosen independently of each other , when the number of voters is large compared to the number of candidates , with high likelihood the number of votes @xmath53 for which @xmath57 will hover around @xmath165 and the number of votes for which @xmath139 will hover around @xmath166 .",
    "this means that there will ( most likely ) be enough votes available for our greedy algorithms to succeed .",
    "[ th : main - tech ] for each @xmath167 , the following hold .",
    "let @xmath168 .    1 .",
    "[ it : commonsense ] let @xmath43 satisfy @xmath169 . for each @xmath28 , if for all @xmath111 it holds that @xmath170 and @xmath171 then @xmath172 .",
    "[ it : primarybound ] for each @xmath173 such that @xmath174 , @xmath175 ,  ( i.e. , all @xmath17 dodgson elections having @xmath15 candidates and @xmath16 voters have the same likelihood of being chosen ) .",
    "it : scorebound ] for each @xmath46 , @xmath176 , .",
    "[ it : winnerbound ] @xmath177 ) } < 2(m^2-m){e^{\\frac{-n}{8m^2}}}$ ] , .    for item",
    "[ it : commonsense ] , @xmath178 , so , if @xmath179 then either @xmath5 already beats @xmath20 or if not then the defection of more than @xmath180 votes from preferring-@xmath20-to-@xmath5 to preferring-@xmath5-to-@xmath20 would ( if such votes exist ) ensure that @xmath5 beats @xmath20 . if @xmath181 then ( keeping in mind that we have globally excluded as invalid all cases where at least one of @xmath16 or @xmath15 equals zero ) @xmath182 , and so @xmath35 will be able to make enough swaps ( in fact , and this is critically important in light of the ` greedyscore ` algorithm",
    ", there is a sequence of swaps such that any vote has at most one swap operation performed on it ) so that @xmath5 beats @xmath20 .",
    "item  [ it : primarybound ] follows from applying the union bound ( which of course does not require independence ) to lemma  [ l : realbounds ] , which is stated and proven below .",
    "item  [ it : scorebound ] follows from item  [ it : commonsense ] and from applying item  [ it : primarybound ] and the union bound to @xmath183 item  [ it : winnerbound ] follows from item  [ it : commonsense ] and from applying item  [ it : primarybound ] and the union bound to @xmath184 ( note that @xmath185 ) .",
    "we now turn to stating and proving lemma  [ l : realbounds ] , which is needed to support the proof of theorem  [ th : main - tech ] .",
    "lemma  [ l : realbounds ] follows from the variant of chernoff s theorem  @xcite stated as theorem  [ t : chernoff ] .",
    "[ t : chernoff ] let @xmath186 be a sequence of mutually independent random variables .",
    "if there exists a @xmath187 \\subseteq \\mathbb{r}$ ] such that , for each @xmath188 , @xmath189 then for all @xmath190 where @xmath191 it holds that @xmath192 .",
    "[ l : realbounds ]    1 .",
    "[ l : real - one ] @xmath193 .",
    "[ l : real - two ] @xmath194 .",
    "[ l : real - one ] .  for each @xmath195 , define @xmath196 as @xmath197 then @xmath198 exactly if @xmath199 since @xmath200 , setting @xmath201 and @xmath202 in theorem  [ t : chernoff ] yields the desired result .",
    "[ l : real - two ] .",
    "for each @xmath195 , define @xmath196 as @xmath203 then @xmath204 if and only if @xmath205 if and only if @xmath206 since @xmath207 , setting @xmath201 and @xmath208 in theorem  [ t : chernoff ] yields the desired result .",
    "theorem  [ t : main ] captures the exact statement of our main results that , in the introduction , we promised to establish .",
    "[ t : main ]    1 .",
    "[ it : main : skc ] for each ( election , candidate ) pair it holds that if ` greedywinner ` outputs @xmath12 as its second output component , then its first output component correctly answers the question , `` is the input candidate a dodgson winner of the input election ? ''",
    "[ it : main : fskc ] for each @xmath13 , the probability that a dodgson election @xmath14 selected uniformly at random from all dodgson elections having @xmath15 candidates and @xmath16 votes ( i.e. , all @xmath17 dodgson elections having @xmath15 candidates and @xmath16 votes have the same likelihood of being selected ) has the property that there exists at least one candidate @xmath5 such that ` greedywinner ` on input @xmath24 outputs @xmath25 as its second output component is less than @xmath26 .",
    "theorem  [ t : main].[it : main : skc ] follows from theorem  [ th : grd - self].[it : winnerskc ] .",
    "theorem  [ t : main].[it : main : fskc ] follows from theorem  [ th : main - tech].[it : winnerbound ] .",
    "the dodgson voting system elegantly satisfies the condorcet criterion . although it is @xmath2-hard ( and so if @xmath209 is computationally infeasible ) to determine the winner of a dodgson election or",
    "compute scores for dodgson elections , we provided heuristics , ` greedywinner ` and ` greedyscore ` , for computing winners and scores for dodgson elections .",
    "we showed that these heuristics are computationally simple .",
    "we also showed that , for a randomly chosen election of a given size , if the number of voters is much greater than the number of candidates ( although the number of voters may still be polynomial in the number of candidates ) , then we get with exceedingly high likelihood we get the right answer and we know that the answer is correct .",
    "we consider the fact that one can prove extremely frequent , self - knowing success even for such simple greedy algorithms to be an _",
    "advantage_it is good that one does not have to resort to involved algorithms to guarantee extremely frequent , self - knowing success .",
    "nonetheless , it is natural to wonder to what degree these heuristics can be improved",
    ". what would be the effect of adding , for instance , limited backtracking or random nongreedy swaps to our heuristics ? regarding our analysis , in the distributions we consider , each vote is cast independently of every other .",
    "what about distributions in which there are dependencies between voters ?    though definition  [ d : skc ] rigorously defines `` self - knowingly correct , '' we have been using `` frequent '' more informally in uses such as `` frequently self - knowingly correct''the level of frequency is specified in each case simply by whatever frequency our results prove .",
    "it is natural to wonder whether one can state a general , abstract model of what it means to be frequently self - knowingly correct .",
    "that would be a large project ( that we heartily commend as an open direction ) , and here we merely make a brief definitional suggestion for a very abstract case  in some sense simpler to formalize than dodgson elections , as dodgson elections have both a voter - set size and a candidate - set size as parameters , and have a domain that is not @xmath85 but rather is the space of valid dodgson triples  namely the case of function problems where the function is total and the simple parameter of input - length is considered the natural way to view and slice the problem regarding its asymptotics .",
    "such a model is often appropriate in computer science ( e.g. , a trivial such problem  leaving tacit the issues of encoding integers as bit - strings  is @xmath210 , and harder such problems are @xmath211 equals the number of primes less than or equal to @xmath16 and @xmath212 ) .      1 .",
    "we say that @xmath213 is _ frequently self - knowingly correct for @xmath215 _ if @xmath216 2 .",
    "let @xmath217 be some polynomial - time computable mapping from @xmath218 to the rationals .",
    "we say that @xmath213 is _ self - knowingly correct for @xmath215 _ if @xmath219    since the probabilities that the above definition is tracking may be quite encoding dependent , the second part of the above definition allows us to set more severe demands regarding how often the heuristic ( which , being self - knowingly correct , always has the right output when its second component is `` definitely '' ) is allowed to remain uncommitted .",
    "one sharp contrast between this framework and impagliazzo s  @xcite notion of heuristic polynomial time is that his heuristic algorithms are not required to _ ever _ correctly assert their correctness . in his model",
    ", one will know that one is often correct , but on each specific run one in general will have no clue as to whether the proffered answer is correct .      in an undergraduate project in one of our courses , g.  goldstein , d.  berlin ,",
    "k.  osipov , and n.  rutar proposed a more complex greedy algorithm for dodgson elections that possessed the self - knowing correctness property , and experimentally observed that their algorithm was often successful .",
    "the present paper was motivated by their exciting experimental insight , and seeks to prove rigorously that a greedy approach can be frequently successful on dodgson elections .",
    "we also thank the anonymous conference and journal referees for their comments , which greatly improved the clarity and readability of this article .",
    "d.  brown . a probabilistic analysis of a greedy algorithm arising from computational biology . in _ proceedings of the 12th annual acm - siam symposium on discrete algorithms",
    "_ , pages 206207 .",
    "acm press , 2001 .",
    "v.  conitzer and t.  sandholm .",
    "nonexistence of voting rules that are usually hard to manipulate . in _ proceedings of the 21st national conference on artificial intelligence _ , pages 627634 .",
    "aaai press , july / august 2006 .",
    "c.  dodgson . a method of taking votes on more than two issues .",
    "pamphlet printed by the clarendon press , oxford , and headed `` not yet published '' ( see the discussions in  @xcite , both of which reprint this paper ) , 1876 .",
    "g.  erdlyi , l.  hemaspaandra , j.  rothe , and h.  spakowski . on approximating optimal weighted lobbying , and frequency of correctness versus average - case polynomial time .",
    "technical report tr-914 , department of computer science , university of rochester , rochester , ny , march 2007 .",
    "p.  faliszewski , e.  hemaspaandra , and l.  hemaspaandra .",
    "the complexity of bribery in elections . in _ proceedings of the 21st national conference on artificial intelligence _ , pages 641646 .",
    "aaai press , july 2006 .",
    "p.  faliszewski , e.  hemaspaandra , and l.  hemaspaandra .",
    "how hard is bribery in elections ?",
    "technical report tr-895 , department of computer science , university of rochester , rochester , ny , april 2006 .",
    "revised , september 2006 .",
    "faliszewski , e.  hemaspaandra , l.  hemaspaandra , and j.  rothe .",
    "llull and copeland voting broadly resist bribery and control . in _ proceedings of the 22nd national conference on artificial intelligence_. aaai press , july 2007 .",
    "to appear .",
    "a.  goldberg and a.  marchetti - spaccamela . on finding the exact solution of a zero - one knapsack problem .",
    "in _ proceedings of the 16th acm symposium on theory of computing _ , pages 359368 .",
    "acm press , april 1984 .",
    "e.  hemaspaandra and l.  hemaspaandra .",
    "computational politics : electoral systems . in _ proceedings of the 25th international symposium on mathematical foundations of computer science _ , pages 6483 .",
    "springer - verlag _ lecture notes in computer science # 1893 _ , august / september 2000 .    c.  homan and l.  hemaspaandra .",
    "guarantees for the success frequency of an algorithm for finding dodgson - election winners . in _ proceedings of the 31st international symposium on mathematical foundations of computer science _ , pages 528539 .",
    "springer - verlag _ lecture notes in computer science # 4162 _ , august / september 2006 .",
    "a.  kaporis , l.  kirousis , and e.  lalas .",
    "the probabilistic analysis of a greedy satisfiability algorithm . in _ proceedings of the 10th annual european symposium on algorithms _ , pages 574585 .",
    "springer - verlag _ lecture notes in computer science # 2461 _ , 2002 .",
    "j.  mccabe - dansted , g.  pritchard , and a.  slinko .",
    "approximability of dodgson s rule . in u.",
    "endriss and j.  lang , editors , _ proceedings of the 1st international workshop on computational social choice _ , pages 331344 .",
    "universiteit van amsterdam , december 2006 .",
    "available online at .",
    "m.  protasi and m.  talamo . a new probabilistic model for the study of algorithmic properties of random graph problems . in _ proceedings of the 4th conference on fundamentals of computation theory _ , pages 360367",
    "springer - verlag _ lecture notes in computer science # 158 _ , 1983 .    c.  papadimitriou and s.  zachos .",
    "two remarks on the power of counting . in",
    "_ proceedings of the 6th gi conference on theoretical computer science _ , pages 269276 .",
    "springer - verlag _ lecture notes in computer science # 145 _ , 1983 .",
    "h.  spakowski and j.  vogel .",
    "@xmath221-completeness : a classical approach for new results . in _ proceedings of the 20th conference on foundations of software technology and theoretical computer science _ , pages 348360 .",
    "springer - verlag _ lecture notes in computer science # 1974 _ , december 2000 .",
    "h.  spakowski and j.  vogel .",
    "the complexity of kemeny s voting system . in _ proceedings of the workshop argentino",
    "de informtica terica _ , pages 157168 .",
    "volume 30 of _",
    "anales jornadas argentinas de informtica e investigacin operativa _ , sadio , september 2001 ."
  ],
  "abstract_text": [
    "<S> in the year 1876 the mathematician charles dodgson , who wrote fiction under the now more famous name of lewis carroll , devised a beautiful voting system that has long fascinated political scientists . however , determining the winner of a dodgson election is known to be complete for the @xmath0 level of the polynomial hierarchy . </S>",
    "<S> this implies that unless @xmath1 no polynomial - time solution to this problem exists , and unless the polynomial hierarchy collapses to @xmath2 the problem is not even in @xmath2 . </S>",
    "<S> nonetheless , we prove that when the number of voters is much greater than the number of candidates  </S>",
    "<S> although the number of voters may still be polynomial in the number of candidates  a simple greedy algorithm very frequently finds the dodgson winners in such a way that it `` knows '' that it has found them , and furthermore the algorithm never incorrectly declares a nonwinner to be a winner .    </S>",
    "<S> = currsize    [ section ] [ definition]theorem [ definition]scratch definition [ definition]corollary [ definition]lemma [ definition]side effect [ definition]proposition </S>"
  ]
}