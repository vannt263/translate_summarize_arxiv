{
  "article_text": [
    "in this paper we address lossy compression of a binary symmetric source . given any realization @xmath5 of a ber(@xmath6 ) source @xmath7 , the goal is to compress @xmath8 by mapping it to a shorter binary vector such that an approximate reconstruction of @xmath8 is possible within a given fidelity criterion .",
    "more precisely , suppose @xmath8 is mapped to the binary vector @xmath9 with @xmath10 and @xmath11 is the reconstructed source sequence .",
    "the quantity @xmath12 is called the compression rate . the fidelity or distortion is measured by the hamming distance @xmath13 . the goal is to minimize the average hamming distortion @xmath14 $ ] for any given rate .",
    "the asymptotic limit , known as the rate - distortion function , is given by @xmath15 for any @xmath16 $ ] where @xmath17 is the binary entropy function .",
    "our approach in this paper is based on low - density parity - check ( ldpc ) codes .",
    "let @xmath18 be a ldpc code with @xmath19 generator matrix @xmath20 and @xmath21 parity check matrix @xmath22 .",
    "encoding in lossy compression can be implemented like decoding in error correction . given a source sequence @xmath8",
    ", we look for a codeword @xmath23 such that @xmath24 is minimized . the compressed sequence @xmath25 is obtained as the @xmath26 information bits that satisfies @xmath27 .",
    "even though ldpc codes have been successfully used for various types of lossless data compression schemes @xcite , and also the existence of asymptotically capacity - achieving ensembles for binary symmetric sources has been proved @xcite , they have not been fully explored for lossy data compression .",
    "it is partially due to the long standing problem of finding a practical source - coding algorithm for ldpc codes , and partially because low - density generator matrix ( ldgm ) codes , as dual of ldpc codes , seemed to be more adapted for source coding and received more attention in the few past years .    in @xcite , martinian and yedidia",
    "show that quantizing a ternary memoryless source coding with erasures is dual of the transmission problem over a binary erasure channel .",
    "they also prove that ldgm codes , as dual of ldpc codes , combined with a modified belief propagation ( bp ) algorithm can saturate the corresponding rate - distortion bound .",
    "following their pioneering work , ldgm codes have been extensively studied for lossy compression by several researchers , @xcite . in a series of parallel work",
    ", several researches have used techniques from statistical physics to provide non - rigorous analysis of ldgm codes @xcite , @xcite and @xcite .    in terms of practical algorithms ,",
    "lossy compression is still an active research topic . in particular , an asymptotically optimal low complexity compressor with near",
    "optimal empirical performance has not been found yet .",
    "almost all suggested algorithms have been based on some kind of decimation of bp or sp which suffers a computational complexity of @xmath28 @xcite , and @xcite .",
    "one exception is the algorithm proposed by murayama @xcite .",
    "when the generator matrix is ultra sparse , the algorithm was empirically shown to perform very near to the associated capacity needing @xmath4 computations .",
    "a generalized form of this algorithm , called reinforced belief propagation ( rbp ) @xcite , was used in a dual setting , for ultra sparse ldpc codes over gf(@xmath29 ) for lossy compression @xcite .",
    "the main drawback in both cases is the non - optimality of ultra sparse structures over gf(@xmath29 ) @xcite , @xcite , @xcite .",
    "as we will see , this problem can be overcome by increasing the size of the finite field .",
    "our simulation show that @xmath0-_reduced _ ultra sparse ldpc codes over gf(@xmath1 ) achieve near capacity performance for @xmath30 .",
    "moreover , we propose an efficient encoding / decoding scheme based on rbp algorithm .    the rest of this paper is organized as follows .",
    "section [ sec : ldpcgf(q ) ] reviews the code ensemble which we use for lossy compression .",
    "section [ sec : rbpgf(@xmath1 ) ] describes the rbp algorithm over gf(@xmath1 ) .",
    "we also discuss briefly the complexity and implementation of the rbp algorithm . in section",
    "[ sec : ilc ] we describe iterative encoding and decoding for our ensemble and then present the corresponding simulation results in section [ sec : result ] . a brief discussion on further research is given in section [ sec : fr ] .",
    "in this section we introduce the ultra sparse ldpc codes over gf(@xmath1 ) .",
    "as we will see later , near capacity lossy compression is possible using these codes and bp - like iterative algorithms .",
    "we follow the methods and notations in @xcite to construct irregular bipartite factor graphs .",
    "what distinguishes gf(@xmath1 ) ldpc codes from their binary counterparts is that each edge ( @xmath32 ) of the factor graph has a label @xmath33 gf(@xmath1 ) @xmath34 . in other words , the non - zero elements of the parity - check matrix of a gf(@xmath1 ) ldpc codes are chosen from the non - zero elements of the field gf(@xmath1 ) .",
    "denoting the set of variable nodes adjacent to a check node @xmath35 by @xmath36 , a word @xmath37 with components in gf(@xmath1 ) is a codeword if at each check node @xmath35 the equation @xmath38 holds .",
    "a ( @xmath31 ) gf(@xmath1 ) ldpc code can be constructed from a ( @xmath31 ) ldpc code by random independent and identically distributed selection of the labels with uniform probability from gf(@xmath1)@xmath39 ( for more details see @xcite ) .",
    "it is well known that the parity check matrix of a gf(@xmath1 ) ldpc code , optimized for binary input channels , is much sparser than the one of a binary ldpc code with same parameters @xcite . in particular , when @xmath40 , the best error rate results on binary input channels is obtained with the lowest possible variable node degrees , i.e. , when almost all variable nodes have degree two .",
    "such codes have been called _ ultra sparse _ or _ cyclic _ ldpc codes in the literature . in the rest of this paper",
    "we call a ldpc code ultra sparse ( us ) if all variable nodes have degree two and the parity check s degree distribution is concentrated for any given rate .",
    "it is straightforward to show that for a us - ldpc code defined as above check node degrees has at most two non - zero values and the maximum check node degree of the code is minimized .    given a linear code @xmath41 and an integer @xmath0 , a @xmath0-reduction of @xmath41 is the code obtained by randomly eliminating @xmath0 parity - check nodes of @xmath41 . for reasons to be cleared in section [ sec : ilc ] , we are mainly interested in @xmath0-reduction of gf(@xmath1 ) us - ldpc codes for small values of @xmath0 ( @xmath42 ) .",
    "note that by cutting out a parity check node from a code , the number of codewords is doubled .",
    "this increment of the codewords has an asymptotically negligible effect on the compression rate since it only increases by @xmath43 while the robustness may increase .",
    "gf(@xmath1 ) us - ldpc codes have been extensively studied for transmission over noisy channels @xcite , @xcite , @xcite .",
    "the advantage of using such codes is twofold . on the one hand , by moving to sufficiently large fields , it is possible to improve the code .    on the other hand , the extreme sparseness of the factor graph is well - suited for iterative message - passing decoding algorithms . despite the state of the art performance of moderate length gf(@xmath1 ) us - ldpc channel codes , they have been less studied for lossy compression .",
    "the main reason being the lack of fast suboptimal algorithms . in the next section we present rbp algorithm over gf(@xmath1 ) and then show that practical encoding for lossy compression is possible by using rbp as the encoding algorithm for the ensemble of @xmath0-reduced us - ldpc codes .",
    "in this section first we briefly review the rbp equations over gf(@xmath1 ) and then we discuss in some details the complexity of the algorithm following declercq and fossorier @xcite .      the gf(@xmath1 ) belief propagation ( bp ) algorithm is a straightforward generalization of the binary case , where the messages are q - dimensional vectors .",
    "let @xmath44 denotes the message vector form variable node @xmath45 to check node @xmath46 at the @xmath47th iteration .",
    "for each symbol @xmath48gf(@xmath1 ) , the @xmath49th component of @xmath44 is the probability that variable @xmath45 takes the value @xmath49 and is denoted by @xmath50 .",
    "similarly , @xmath51 denotes the message vector from check node @xmath46 to variable node @xmath45 at the iteration @xmath47 and @xmath52 is its @xmath49th component .",
    "also let @xmath53 ( @xmath54 ) denote the set of check ( variable ) nodes adjacent to @xmath45 ( @xmath46 ) in a given factor graph .",
    "constants @xmath55 are initialized according to the prior information .",
    "the bp updating rules can be expressed as follows :    * local function to variable : * @xmath56    * variable to local function : * @xmath57    where @xmath58 is the set of all configurations of variables in @xmath54 which satisfy the check node @xmath46 when the value of variable @xmath45 is fixed to @xmath49 .",
    "we define the marginal function of variable @xmath45 at iteration @xmath59 as    @xmath60    the algorithm converges after @xmath61 iterations if and only if for all variables @xmath45 and all function nodes @xmath46 @xmath62 up to some precision @xmath63 . a predefined maximum number of iterations @xmath64 and the precision parameter @xmath63 are the input to the algorithm .",
    "rbp is a generalization of bp in which the messages from variable nodes to check nodes are modified as follows @xmath65 where @xmath66 is the marginal function of variable @xmath45 at iteration @xmath47 and @xmath67\\longrightarrow [ 0,1]$ ] is a non - decreasing function .",
    "it is convenient to define @xmath68 to be @xmath69 where @xmath70 are in @xmath71 $ ] .",
    "note that when @xmath72 , rbp is the same as the algorithm presented in @xcite for lossy data compression . in this case",
    "it is easy to show that the only fixed points of rbp are configurations that satisfy all the constraints .      ignoring the normalization factor in ( [ spvar2func ] ) , to compute all variable to check - node messages at a variable node of degree @xmath73 we need @xmath74 computations . a naive implementation of gf(@xmath1 )",
    "bp has computational complexity of @xmath75 operations at each check node of degree @xmath76 .",
    "this high complexity is mainly due to the sum in ( [ spfunc2var ] ) , that can be interpreted as a discrete convolution of probability density functions .",
    "efficient implementations of function to variable node messages based on discrete fourier transform have been proposed by several authors , see for example , @xcite and the references within .",
    "the procedure consists in using the identity @xmath77 , where the symbol @xmath78 denotes convolution .",
    "assuming @xmath79 , the fourier transform of each message @xmath80 needs @xmath81 computations and hence the total computational complexity at check node @xmath46 can be reduced into @xmath82 .",
    "this number can be further reduced to @xmath83 by using the fact that @xmath84 , or alternatively by using the summation strategy described in @xcite which has the same complexity but is numerically more stable .",
    "therefore , the total number of computations per iteration is @xmath85 where @xmath3 is the average degree .",
    "in the following three subsections we first describe a simple method for identifying information bits of a @xmath0-reduced us - ldpc code and then present a near capacity scheme for iterative compression ( encoding ) and linear decompression ( decoding ) .      for @xmath0-reduced us - ldpc codes",
    ", one can use the _ leaf removal _ ( lr ) algorithm to find the information bits in a linear time . in the rest of this section",
    "we briefly review the lr algorithm and show that 1-reduction ( removal of a sole check node ) of a us - ldpc code significantly changes the intrinsic structure of the factor graph of the original code .",
    "the main idea behind lr algorithm is that a variable on a leaf of a factor graph can be fixed in such a way that the check node to which it is connected is satisfied @xcite . given a factor graph , lr starts from a leaf and removes it as well as the check node it is connected to .",
    "lr continues this process until no leaf remains .",
    "the residual sub - graph is called the _",
    "core_. note that the core is independent of the order in which leaves ( and hence the corresponding check nodes ) are removed from the factor graph .",
    "this implies that also the number of steps needed to find the core does not depend on the order on which leaves are chosen .",
    "while us - ldpc codes have a complete core , i.e. there is no leaf in their factor graph , the @xmath0-reduction of these codes have empty core .",
    "our simulations also indicate that even 1-reduction of a code largely improves the encoding under rbp algorithm ( see section [ sec : result ] ) .",
    "how rbp exploits this property is the subject of ongoing research .",
    "it is straightforward to show that a code has empty core if and only if there exists a permutation of columns of the corresponding parity - check matrix @xmath22 such that @xmath86 for @xmath87 and @xmath88 for all @xmath89 .",
    "as we have mentioned , lr algorithm can be also used to find a set of information bits of a given us - ldpc code . at any step @xmath61 of lr algorithm ,",
    "if the chosen leaf is the only leaf of the check node @xmath90 into which it is connected , then its value is determined uniquely as a function of non - leaf variables of check node @xmath90",
    ". if the number of leaves @xmath91 is greater than 1 , there are @xmath92 configurations which satisfy the check node after fixing the values of non - leaf variables . at each step of lr",
    "we choose a subset of @xmath93 leaves .",
    "this set is denoted by @xmath94 and we call it the free subset at @xmath95 step . note that there are @xmath91 free subsets among which we choose only one at each step .",
    "it is straightforward to show that the union of all free subsets @xmath96 is a set of information bits for a given us - ldpc code .",
    "suppose a code of rate @xmath97 and a source sequence @xmath8 is given . in order to find the codeword @xmath11 that minimizes @xmath98",
    ", we will employ the rbp algorithm with a strong prior @xmath99 centered around @xmath8 .",
    "the sequence of information bits of @xmath11 is the compressed sequence and is denoted by @xmath25 . in order to process the encoding in gf(@xmath1 ) , we first need to map @xmath8 into a sequence in gf(@xmath1 ) .",
    "this can be simply done by grouping @xmath0 bits together and use the binary representation of the symbols in gf(@xmath1 ) .      given the sequence of information bits @xmath25 , the goal of the decoder is to find the corresponding codeword @xmath11 .",
    "this can be done by calculating the @xmath100 which in general needs @xmath28 computations .",
    "one of the advantages of our scheme is that it allows for a low complexity iterative decoding .",
    "the decoding can be performed by iteratively fixing variables following the inverse steps of the lr algorithm ; at each step @xmath61 only one non - information bit is unknown and its value can be determined from the parity check @xmath90 . for a sparse parity - check matrix ,",
    "the number of needed operations is @xmath4 .",
    "given an initial vector @xmath8 , and a probability distribution @xmath101 over all configurations , the @xmath102-average distance from @xmath8 can be computed by    @xmath103    where @xmath104 is the set of marginals of @xmath102 . on the other hand , the entropy of the distribution @xmath102 is defined by    @xmath105    even though it is a hard problem to calculate analytically both marginals and @xmath106 of a given code , one may approximate them using messages of the bp algorithm at a fixed point @xcite . assuming the normalized distance is asymptotically a self - averaging quantity for our ensemble , @xmath106 represents the logarithm of the number of codeword at distance @xmath107 from @xmath8 . by applying a prior distribution on codewords given by @xmath108 one",
    "is able to sample the sub - space of codewords at different distances from @xmath8 .",
    "[ fig : wef ] demonstrates the wef of random gf(q ) us - ldpc codes for rates 0.3 , 0.5 , and 0.7 and field orders 2 , 4 , 16 , 64 and 256 .",
    "the blocklength is normalized so that it corresponds to @xmath109 binary digits .",
    "the approximate wef of gf(@xmath1 ) us - ldpc codes as a function of @xmath1 for a same blocklength in binary digits . ,",
    "scaledwidth=45.0% ]    though bp is not exact over loopy graphs , we conjecture that the wef calculated for us - ldpc codes is asymptotically exact .",
    "this hypothesis can be corroborated by comparing the plot in fig .",
    "[ fig : wef ] with the simulation results we obtained by using rbp algorithm ( fig .",
    "[ fig : qperformace ] ) .      in all our simulations",
    "the parameter @xmath110 of rbp algorithm is fixed to one and therefore the function @xmath68 is constant and does not depend on the iterations .",
    "we also fix the maximum number of iterations into @xmath111 .",
    "if rbp does not converge after 300 iterations , we simply restart rbp with a new random scheduling .",
    "the maximum number of trials allowed in our simulations is @xmath112 .",
    "the encoding performance depends on several parameters such as @xmath113 , @xmath114 , the field order @xmath1 , and the blocklength @xmath115 . in the following we first fix @xmath115 , @xmath1 and @xmath114 , in order to see how the performance changes as a function of @xmath113 .",
    "our main goal is to show that there is a trade off , controlled by @xmath113 , between three main aspects of the performance , namely : average distortion , average number of iterations and average number of trials .",
    "the simulations in this subsection are done for a 5-reduced gf(64 ) us - ldpc code with length @xmath116 and rate @xmath117 .",
    "the factor graph is made by _ progressive - edge - growth _ ( peg ) construction @xcite .",
    "the rate is chosen purposefully from a region where our scheme has the weakest performance .",
    "the distortion capacity for this rate is approximately @xmath118 .    in fig .",
    "[ fig : gamma0 ] we plot the performance as a function of @xmath113 .",
    "for @xmath119 we achieve a distortion of @xmath120 needing only 83 iterations in average and without any need to restart rbp for 50 samples . by increasing @xmath113 to 0.96 , one can achieve an average distortion of @xmath121 which is only 0.15 db away from the capacity needing 270 iterations in average .",
    "performance as a function of @xmath113 for a peg graph with n=1600 and r=0.33 .",
    "the averages are taken over 50 samples.(a ) average distortion as a function of @xmath113 .",
    "for @xmath122 the rbp does not converge within 300 iterations .",
    "( b)the average number of iterations .",
    "( c)the average number of trials .",
    "( d ) the average number of iterations needed for each trial . note that even though average number of iterations show a steep increase as a function of @xmath113 , the average number of iterations needed per trial increases only linearly . , scaledwidth=45.0% ]      fig .",
    "[ fig : qperformace ] shows the distortion obtained by randomly generated 5-reduced gf(q ) us - ldpc codes for @xmath123 , @xmath124 and @xmath125 .",
    "the block length is fixed to @xmath109 binary digits . for each given code , we choose @xmath113 and @xmath114 so that the average number of trials does not exceed 2 and the average number of iterations remains less than 300 .",
    "such values of @xmath113 and @xmath114 are found by simulations . under these two conditions",
    ", we report distortion corresponding to best values of the two parameters averaged over 50 samples .     the rate - distortion performance of gf(@xmath1 ) ldpc codes encoded with rbp algorithm for @xmath126 and @xmath127 .",
    "the blocklength is 12000 binary digits and each point is the average distortion over 50 samples.,scaledwidth=43.0% ]",
    "our results indicate that the scheme proposed in this paper outperforms the existing methods for lossy compression by low - density structures in both performance and complexity .",
    "the main open problem is to understand and analyze the behavior of rbp over @xmath0-reduced us - ldpc codes .",
    "as we have mentioned , @xmath0-reduction of a us - ldpc code not only provides us with simple practical algorithms for finding information bits and decoding , but also largely improves the convergence of rbp .",
    "it is interesting to study the ultra sparse ensembles where a certain fraction of variable nodes of degree one is allowed .",
    "f.k . wish to thank sergio benedetto , guido montorsi and toshiyuki tanaka for valuable suggestions and useful discussions .",
    "g. caire , s. shamai and s. verdu ,  noiseless data compression with low - density parity - check codes , \" _",
    "dimacs series in discrete mathematics and theoretical computer science _ , p. gupta and g. kramer edt .",
    "american mathematical society , 2004 ."
  ],
  "abstract_text": [
    "<S> in this paper we consider the lossy compression of a binary symmetric source . </S>",
    "<S> we present a scheme that provides a low complexity lossy compressor with near optimal empirical performance . </S>",
    "<S> the proposed scheme is based on @xmath0-reduced ultra - sparse ldpc codes over gf(@xmath1 ) . </S>",
    "<S> encoding is performed by the _ reinforced belief propagation _ algorithm , a variant of belief propagation . </S>",
    "<S> the computational complexity at the encoder is @xmath2 , where @xmath3 is the average degree of the check nodes . for our code ensemble </S>",
    "<S> , decoding can be performed iteratively following the inverse steps of the leaf removal algorithm . for a sparse parity - check matrix </S>",
    "<S> the number of needed operations is @xmath4 .    </S>",
    "<S> [ section ] [ section ] [ section ] [ section ] [ section ] [ section ] </S>"
  ]
}