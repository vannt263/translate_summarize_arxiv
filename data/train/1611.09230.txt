{
  "article_text": [
    "despite great efforts in both research and practice , software quality continues to be controversial and insufficiently understood , and the quality of software products is often unsatisfactory .",
    "the economic impact is enormous and includes not only spectacular failures of software  @xcite but also increased maintenance costs  @xcite , high resource consumption , long test cycles , and waiting times for users .",
    "software quality models tackle the issues described above by providing a systematic approach for modelling quality requirements , analysing and monitoring quality , and directing quality improvement measures @xcite .",
    "they thus allow ensuring quality early in the development process .    in practice , however , a gap remains between the abstract quality characteristics described in quality models such as the current standard iso / iec  25010  @xcite and concrete measurements and assessments  @xcite .",
    "the quality models describe and structure general concepts that can be used to characterise software quality .",
    "most of them , however , can not be used for real - world quality assessment or improvement  @xcite .",
    "concrete measurements , on the contrary , often lack the connection to higher - level quality goals .",
    "thus , they make it difficult to explain the importance of quality problems to developers or sponsors and to quantify the potential of quality improvements .",
    "a similar gap also exists for quality assessment methods .",
    "effective quality management requires not only a definition of quality but also a method for assessing the overall quality of a software product based on measured properties .",
    "existing quality models either lack assessment support completely or provide procedures that are too abstract to be operational ( e.g.  iso / iec  25040  @xcite ) . as a consequence , quality assessment is inhibited and likely to produce inconsistent and misleading results .    finally , the contents of many existing quality models ( including quality metrics or evaluation formulas ) are invariable .",
    "software quality , however , is not the same in all contexts .",
    "it depends on the domain , on the technology used and on project constraints .",
    "most quality engineers want to adapt and customise their quality models  @xcite .",
    "our aim was to develop and validate operationalised quality models for software together with a quality assessment method and tool support to provide the missing connections between generic descriptions of software quality characteristics and specific software analysis and measurement approaches .",
    "as a single operationalised quality model that fits all peculiarities of every software domain would be extremely large and expensive to develop , we also set the goal of enabling modularised quality models with a widely applicable base model and various specific extensions .",
    "this also constrained the types of analyses and measurements to include : we included static analyses and manual reviews , because they are least dependent on the system context .",
    "in contrast , dynamic testing of a system would require specific test cases and execution environments .",
    "furthermore , we focused on _ product _ quality and , hence , product aspects influencing quality , instead of on process or people aspects . while we consider the latter aspects important as well , we expected the product aspects to be easier and more direct to measure .    to achieve these goals , software quality experts from both academia and industry in germany joined forces within the quamoco research project .",
    "the project consortium consisted of technische universitt mnchen , sap ag , siemens , capgemini , fraunhofer iese , and itestra . in total , these partners spent 558 person - months on the project .",
    "this article is an extension of an earlier one  @xcite and provides six major contributions overall : first , we developed a meta - model for software quality models .",
    "it provides the structure for the full spectrum from organising quality - related concepts to defining operational means for assessing their fulfilment in a specific environment including their modularisation .",
    "second , the base quality model instantiates the meta - model and captures knowledge on how to conduct a basic quality assessment for different kinds of software .",
    "it serves as the basis for more specific quality models .",
    "we elaborated the base model in depth for the languages java and c#.    third , we contribute a clearly defined quality assessment method that is integrated with the meta - model .",
    "fourth , we performed several validations of the base model with real software systems that showed the understandability of the model and the correspondence of the assessment results with expert opinions .",
    "fifth , we developed extensive tool support for building and adapting operationalised quality models as well as for performing quality assessments .",
    "sixth and last , we contribute a domain - specific quality model as an extension to the base model , which shows the usefulness of the modularisation and separation between base model and specific extensions .",
    "preliminary versions of the meta - model , the base model , the quality assessment and the empirical analysis were partly described in the earlier conference paper  @xcite .      here , we introduce the terms used most frequently in this article .",
    "_ quality characteristic _ refers to the concept as used in iso / iec  9126 and iso / iec  25010 to decompose software quality , e.g.  into _ maintainability _ or _",
    "reliability_. quality characteristics can hence be thought of as `` -ilities '' .",
    "quality aspect _ is more generally an area of interest that contributes to the quality of a software product for a certain stakeholder . in particular",
    ", we consider iso / iec s quality characteristics as quality aspects but also allow for other decompositions of software quality to get increased precision and expressiveness within a quality model .",
    "we use one such alternative decomposition in the quamoco base quality model .",
    "quality aspects are typically not measurable or observable directly .",
    "while they describe quality on a rather abstract level , _ product factors _ are observable properties of certain entities within a software product .",
    "product factors as well as their relationships to quality aspects are discussed in detail in . finally , a _ quality requirement _ is a stakeholder s stated desire to have a certain quality aspect or product factor fulfilled by a product .",
    "the remainder of this article is structured as follows : presents an overview of both related work and our own previous work in the research area of quality modelling and assessment . in ,",
    "we discuss usage scenarios for quality models , introduce general concepts , and present our meta quality model .",
    "we instantiate this meta - model in and present our base quality model for software products written in java or c#. we describe our approach for assessing software quality with this model in . describes the tool support for the application of the approach in practice . in , we describe the empirical evaluation we performed to validate the proposed model and tools .",
    "presents one domain - specific quality model , which extends the base model for the specifics of embedded systems .",
    "finally , concludes the article and outlines future work .",
    "quality models have been a research topic for several decades and a large number of quality models have been proposed  @xcite .",
    "we describe the predominant hierarchical models , important proposals for richer models , quality measurement approaches and tools , and a summary of our own preliminary work .",
    "the first published quality models for software date back to the late 1970s , when boehm  et  al .",
    "@xcite as well as mccall , richards and walter  @xcite described quality characteristics and their decomposition .",
    "the two approaches are similar and use a hierarchical decomposition of the concept _ quality _ into quality characteristics such as _ maintainability _ or _",
    "reliability_. several variations of these models have appeared over time .",
    "one of the more popular ones is the furps model  @xcite , which decomposes quality into functionality , usability , reliability , performance , and supportability .",
    "this kind of quality model became the basis for the international standard iso / iec  9126  @xcite in 1991 .",
    "it defines a standard decomposition into quality characteristics and suggests a small number of metrics for measuring them .",
    "these metrics do not cover all aspects of quality , however .",
    "hence , the standard does by no means completely operationalise quality .",
    "the successor to iso / iec  9126 , iso / iec  25010  @xcite , changes a few classifications but keeps the general hierarchical decomposition .",
    "in several proposals , researchers have used metrics to directly measure quality characteristics from or similar to iso / iec  9126 .",
    "franch and carvallo  @xcite adapt the iso / iec quality model and assign metrics to measure them for selecting software packages .",
    "they stress that they need to be able to explicitly describe `` relationships between quality entities '' .",
    "van zeist and hendriks  @xcite also extend the iso / iec model and attach measures such as _ average learning time_. samoladas et al .",
    "@xcite use several of the quality characteristics of iso / iec  9126 and extend and adapt them to open source software .",
    "they use the quality characteristics to aggregate measurements to an ordinal scale .",
    "all these approaches reveal that it is necessary to extend and adapt the iso / iec standard .",
    "they also show the difficulty in measuring abstract quality characteristics directly .",
    "various critics ( e.g.  @xcite ) point out that the decomposition principles used for quality characteristics are often ambiguous .",
    "furthermore , the resulting quality characteristics are mostly not specific enough to be measurable directly .",
    "although the recently published successor iso / iec  25010 has several improvements , including a measurement reference model in iso / iec  25020 , the overall criticism is still valid because detailed measures are still missing .",
    "moreover , a survey done by us  @xcite shows that fewer than 28% of the companies use these standard models and 71% of them have developed their own variants .",
    "hence , there is a need for customisation .",
    "starting in the 1990s , researchers have been proposing more elaborate ways of decomposing quality characteristics and thereby have built richer quality models .",
    "dromey  @xcite distinguishes between _ product components _ , which exhibit _ quality carrying properties _ , and externally visible _ quality attributes_.    bansiya and davis  @xcite build on dromey s model and propose qmood , a quality model for object - oriented designs .",
    "they describe several metrics for the design of components to measure what they call _ design properties_. these properties have an influence on quality attributes .",
    "they also mention tool support and describe validations similar to ours ( section  [ sec : validation ] ) .",
    "bakota et al .",
    "@xcite emphasise the probabilistic nature of their quality model and quality assessments .",
    "they introduce _ virtual quality attributes _ , which are similar to _ product factors _ in our quality model ( cf .",
    "section  [ sec : concepts_meta ] ) .",
    "the quality model uses only nine low - level measures , which are evaluated and aggregated to probability distributions .",
    "our experience has been that practitioners have difficulties interpreting such distributions .",
    "kitchenham  et  al .",
    "@xcite acknowledge the need for an explicit meta - model to describe the increasingly complex structures of quality models . they also propose a `` build your own '' method for quality models with their squid approach .",
    "all richer models show that the complex concept of _ quality _ needs more structure in quality models than abstract quality characteristics and metrics .",
    "they have , however , not established a corresponding quality assessment method , tool support and a general base quality model , which are necessary for comprehensively measuring and assessing quality .",
    "although not embedded in an operationalised quality model , a large number of tools for quality analysis are available .",
    "examples include bug pattern identification ( e.g.   findbugs , pmd , gendarme , or pc - lint ) , coding convention checkers ( e.g.  checkstyle ) , clone detection , and architecture analysis .",
    "these tools focus on specific aspects of software quality and fail to provide comprehensive quality assessments . moreover , there are no explicit and systematic links to a quality model .",
    "dashboards can use the measurement data of these tools as input ( e.g.  sonarqube or xradar ) to provide a visual overview of the quality measurements taken from a software system .",
    "nevertheless , they lack an explicit and well - founded connection between the metrics used and particular quality aspects .",
    "hence , explanations of the impacts of defects on software quality and rationales for the used metrics are missing .    experimental research tools ( e.g.  @xcite )",
    "take first steps towards integrating a quality model and an assessment toolkit .",
    "a more comprehensive approach is taken by the research project squale  @xcite which was carried out at the same time  @xcite as our project .",
    "squale provides an explicit quality model based on  @xcite for describing a hierarchical decomposition of the iso / iec  9126 quality characteristics .",
    "hence , it follows and extends the fcm  model  @xcite by introducing an intermediate level of so - called practices which link measures with criteria and hence with quality factors .",
    "the model contains formulas for evaluating the associated metric values as well as weighting the sets of practices and criteria for the respective higher - ranked criteria and factors . for this",
    ", squale provides tool support for evaluating software products and visualising the results .",
    "a shortcoming of squale is that its quality model does not explicitly consider dromey s product components to which the quality issues could be related .",
    "these technical details regarding quality issues at the level of product components make the quality model more useful in practice as this allows for focused drilldowns of quality issues .",
    "squale also lacks support for modularisation as well as for managing multiple quality models or multiple hierarchies of quality characteristics .",
    "the cast application intelligence platform is a proprietary system that focuses on automatically determining technical debt based on the risk of quality deficiencies of business applications .",
    "thus , it measures quality on a technical level and evaluates the risks of vulnerabilities .",
    "to do so , it is based on a simple model that pools measures into severity classes and does not allow comprehensive quality analysis .",
    "users of cast are provided with a dashboard to monitor quality deficiencies and resulting risks .    however , these tools and approaches do , to a certain extent , follow the same idea of an integrated quality model and its assessment as we do in this article .",
    "regarding the quality models , the main difference is that we use a product model for structuring the ( technical ) product factors in the quamoco quality models .",
    "furthermore , quamoco offers modularisation and an editor for creating , adjusting , and managing quality models for various application domains in contrast to fixed , predefined models .",
    "the quamoco tool chain allows for flexible configuration and integration of measurement tools and even manually collected data without any changes in the source code of the tool chain .      in prior work",
    ", we investigated different ways of describing quality and classifying metrics , e.g.  activity - based quality models  @xcite and technical issue classifications  @xcite .",
    "based on the findings , we developed a meta - model for quality models and evaluated its expressiveness  @xcite .",
    "we experimented with different approaches for quality assessments and tool support  @xcite .",
    "based on the experience gained , we developed a comprehensive tool chain for quality modelling and assessment  @xcite .",
    "we published a shorter , preliminary version of this article  @xcite which focuses on the base model and on a limited set of validations .",
    "we added more detailed descriptions , explanations and illustrations in various parts of the paper to make the work easier to understand .",
    "in particular , we added a detailed description of the approach we used for developing the base quality model .",
    "in addition , we added new contributions with the description of domain - specific quality models , model adaptation , tool support and additional empirical validations .",
    "the first challenge in addressing the gap between abstract quality characteristics and concrete assessments is to formalise the structure for operationalised quality models in a suitable meta quality model . after describing how we use quality models",
    ", we will explain each of the concepts briefly and describe which problems they solve .",
    "finally , we will combine the concepts into a meta - model to show the complete picture .",
    "these concepts and the meta - model were developed in three iterations spanning three years with corresponding evaluations  @xcite ( see also section  [ sec : modeldevelopment ] ) .",
    "most commonly , we find quality models reduced to mere reference taxonomies or implicitly implemented in tools . as explicit and living artefacts ,",
    "however , they can capture general knowledge about software quality , accumulate knowledge from their application in projects , and allow quality engineers to define a common understanding of quality in a specific context  @xcite .",
    "we aim to use this knowledge as the basis for quality control . in the quality control loop",
    "@xcite , the quality model is the central element for identifying quality requirements , planning quality assurance activities , assessing the fulfilment of quality requirements , and reworking the software product based on the assessment results .",
    "the quality model is useful for defining what quality aspects are relevant , how we can measure them and how we can interpret the measurement data to understand the actual quality of a specific software product .",
    "this single source of quality information helps to avoid redundancies and inconsistencies which are typical for quality specifications and guidelines .",
    "the quality model defines preferences regarding quality which we need to tailor to the product to be developed in that it specifies relevant quality aspects ( not relevant ones are not included in the model ) and the level of their relevance ( reflected by the importance weights associated with the quality aspects ) .    in this article",
    ", we will focus on the usage of quality models for quality assessment purposes . in this scenario ,",
    "a software product is measured according to the quality metrics defined in the quality model , and the measurement data are interpreted according to the utility functions defined in the model and then aggregated along the model s structure to derive utilities for individual quality aspects and for product s overall quality . finally , the aggregated utilities are mapped onto more intuitive quality assessments , for instance ordinal - scale school grades",
    ". please refer to section [ sec : qualityassessmentmethod ] for a detailed description of the quality assessment method and an example of its usage .",
    "quality assessments may be used in a summative or in a formative way .",
    "using the assessment results in a summative way allows quality engineers to assess a software product s quality at specific quality gates and to initiate appropriate quality improvements .",
    "the assessment results of a product can be interpreted on its own but also serve as input for a trend analysis , or they can be compared with those of other products in a benchmarking setting .",
    "furthermore , the results can be used in a formative way to spot software defects in the source code .",
    "additionally , applying continuous quality assessments using a quality model may improve the quality awareness of practitioners as they learn from the quality knowledge contained in the quality model .",
    "the previous work of all quamoco partners on quality models , our joint discussions , and experiences with earlier versions of the meta - model led us to the basic concept of a _",
    "factor_. a factor expresses a _ property _ of an _ entity _ , which is similar to what dromey  @xcite calls _ quality carrying properties _ of _ product components_. we use _ entities _ to describe the things that are important for quality and _ properties _ for the attributes of the things we are interested in . because the concept of a factor is general , we can use it on different levels of abstraction . as we focus on product quality and aspects of the product that are relevant for it ,",
    "the entity will always be a part of the software product .",
    "for example , we have concrete factors such as _ cohesion of classes _ as well as abstract factors such as _ portability of the product_. the factor concept as such would be generic enough to cover process or people aspects as well , but these are beyond the scope of the work in this article .    to clearly describe product quality from an abstract level down to concrete measurements",
    ", we differentiate between the two factor types _ quality aspects _ and _ product factors _ which represent two levels of abstraction .",
    "both can be refined into sub - aspects and sub - factors , respectively , as illustrated in figure  [ fig : model - structure ] .",
    "quality aspects express abstract quality goals , for example the quality characteristics ( or quality attributes ) of iso / iec  25010 which always have the complete product as their entity because they describe the whole product .",
    "for example , valid quality aspects are _ maintainability of the product _ , _",
    "analysability of the product _ or _ reliability of the product_.    product factors , in contrast , are attributes of parts of the product .",
    "we require the leaf product factors to be concrete enough to be measured .",
    "examples are _ duplication of source code part _ , which we measure with _ _ clone coverage _",
    "detail complexity of method _ measured by length and nesting depth .",
    "this separation of quality aspects and product factors helps us to bridge the gap between abstract notions of quality and concrete implementations .",
    "in addition , separating the entities from their properties addresses the problem of the difficulty of decomposing quality attributes .",
    "product factors can easily be decomposed regarding either their property or their entity . for example",
    ", the entity _ class _ , representing a part of an object - oriented program , can be decomposed straightforwardly into the entities _ attribute _ and _ method_. hence , we can exactly model for what a property holds .",
    "moreover , the concepts allow us to model several different hierarchies of quality aspects to express divergent views on quality .",
    "quality has so many different facets that a single hierarchy is not able to express all of them . even in the recent iso / iec  25010 ,",
    "there are two quality hierarchies : product quality and quality in use .",
    "we can model both as quality aspect hierarchies .",
    "other types of quality aspects are also possible .",
    "we found that this gives us the flexibility to build quality models tailored , for example for different stakeholders . in principle , the concept also allows us to have different product factor hierarchies or more levels of abstraction . in our experiences building quality models , however , we found these two levels to be often sufficient , given the expressiveness gained from clearly separating entities and properties .    to close the gap between abstract quality aspects and measurable properties of a product , we need to put the two factor types into relation .",
    "product factors can have _ impacts _ on quality aspects .",
    "this is similar to variation factors , which have impacts on quality factors in gqm abstraction sheets  @xcite .",
    "an impact is either positive or negative and describes how the degree of presence or absence of a product factor impacts a quality aspect .",
    "this gives us a complete chain from measured product factors to impacted quality aspects and vice versa .",
    "not all product factors in our models have impacts because we sometimes use them only for structuring purposes .",
    "yet , all product factors that we want to have included in assessments need to have at least one impact on a quality aspect .",
    "those product factors need to be concrete enough to be measured .",
    "hence , we also have the concept of _ measures _ for product factors .",
    "a measure is a concrete description of how a specific product factor should be quantified for a specific context .",
    "for example , this could be the number of deviations from the rule for java that strings should not be compared using the `` = = '' operator or clone coverage as mentioned earlier .",
    "a product factor can have more than one measure if we need multiple measures to cover its concept .",
    "moreover , we separate the measures from their _",
    "instruments_. instruments describe a concrete implementation of a measure . in the example of the string comparison ,",
    "an instrument is the corresponding rule as implemented in the static analysis tool _ findbugs_. this gives us additional flexibility to collect data for measures either manually or with different tools in different contexts .    having these relationships with measures and instruments , it is straightforward to assign _ evaluations _ to product factors and quality aspects to form a quality assessment .",
    "the evaluations aggregate the measurement results ( provided by the instruments ) for product factors and the evaluation results of impacting product factors for quality aspects .",
    "the intuition is that the evaluations hold some kind of formula to calculate these aggregations .",
    "we will describe a comprehensive quality assessment method showing concrete evaluations in section  [ sec : quality_assessment ] .    moreover",
    ", we can go the other way round .",
    "we can pick quality aspects , for example , iso / iec  25010 quality characteristics , which we consider important and costly for a specific software system , and trace what product factors affect them and what measures quantify them ( cf .  @xcite ) .",
    "this allows us to put emphasis on the product factors with the largest impact on these quality aspects .",
    "it also gives us the basis for specifying quality requirements for which we developed an explicit quality requirements method  @xcite .",
    "building quality models with all these element types results in large models with hundreds of model elements .",
    "not all elements are important in each context and it is impractical to build a single quality model that contains all measures for all relevant technologies .",
    "therefore , we introduced a modularisation concept which allows us to split the quality model into _",
    "modules_. for example , in the concrete models described in this article , there is the _ root _ module containing general quality aspect hierarchies as well as basic product factors and measures .",
    "we add additional modules for specific technologies and paradigms , such as object orientation , programming languages , such as c # , and domains , such as embedded systems .",
    "this gives us a flexible way to build large and concrete quality models that fit together , meaning they are based on the same properties and entities .",
    "modularisation enables us to choose appropriate modules and extend the quality model with additional modules for a given context . to adapt the quality model for a specific company or project , however ,",
    "this is still too coarse - grained .",
    "hence , we also developed an explicit adaptation method , which guides a quality manager in choosing relevant quality aspects , product factors and measures for a particular project ( see section  [ sec : adaptation ] ) .",
    "we precisely specified the general concepts described so far in a meta - model .",
    "the core elements of the meta - model are depicted as an ( abstracted ) uml class diagram in figure  [ fig : metamodel ] .",
    "please note that we left out a lot of details such as the ids , names and descriptions of each element to make it more comprehensible .",
    "a detailed description of the meta - model is available as a technical report  @xcite .",
    "the central element of the meta - model is the _ factor _ with its specialisations _ quality aspect _ and _ product factor_. both can be refined and , hence , produce separate directed acyclic graphs .",
    "an _ impact _ can only exist between a _ product factor _ and a _",
    "quality aspect_. this represents our main relationship between factors and allows us to specify the core quality concepts .",
    "a _ factor _ always has an associated _ entity _ , which can be in an is - a as well as a part - of hierarchy .",
    "the property of an _ entity _ that the _ factor _ describes is expressed in the _ factor _ s name .",
    "each _ factor _ may also have an associated _ evaluation_. it specifies how to evaluate the _",
    "factor_. for that , we can use the evaluation results from sub - factors or  in the case of a _ product factor _  the values of associated _ _",
    "measure__s . to keep the uml class diagram readable",
    ", we omit these relationships there . a _ measure _",
    "can be associated with more than one _ product factor _ and has potentially several _ instruments _ that allow us to collect a value for the _ measure _ in different contexts , e.g.  with a manual inspection or a static analysis tool .",
    "we modelled this meta - model with all details as an emf model which then served as the basis for the quality model editor ( see section  [ sec : tool_support ] ) .",
    "the base quality model s main objective is to be an operationalised quality model that can be used directly to assess a wide range of software products and can also be extended for specific contexts with little effort . to reach this goal , the quamoco project partners conducted several workshops and sprints to collaboratively transfer their knowledge and experience into the structure described in .",
    "the resulting quality model represents our consolidated view on the basics of the quality of software source code and is , in principle , applicable to any kind of software .",
    "it details quality down to measures and instruments for the assessment of java and c # systems and , hence , enables comprehensive , tool - supported quality assessment without requiring large adaptation or configuration effort .",
    "the development of the base model was a joint effort of all project partners in quamoco .",
    "overall , at least 23 people from industry and academia were involved in building the base model .",
    "we worked on it ( and its underlying meta - model ) throughout all three years of the project .",
    "this long time span led to changes and adaptations of the development approach over time . as the development of the model is crucial for judging how much it can be trusted",
    ", we describe the development approach and how we executed it .",
    "our general approach to developing the base model was to combine top - down and bottom - up modelling .",
    "this means that we started from general quality aspects and added product factors and measures that are important for these quality aspects based on our experiences or existing studies .",
    "moreover , we also evaluated existing measures , mostly from static analysis tools , investigated their intention and selectively built suitable product factors and impacts on quality aspects .",
    "we believe both directions are necessary . modelling bottom - up",
    "is attractive because we know we have measures , most of them automatically collectable , for the product factors we are building . yet , to come to a comprehensive assessment of quality aspects , we need to identify which product factors and measures are missing .",
    "therefore , the combination of top - down and bottom - up modelling supports the comprehensiveness of the model .",
    "because we knew that we had to learn while building the base model , we introduced three large , year - long _ iterations_. our aim was to have one base model after each iteration that we could further discuss and validate .",
    "this included a round of feedback from the whole consortium in each iteration , meaning we gave a base model to people not working on it directly for discussion .",
    "in addition , each iteration ended with detailed reviews by two reviewers from the consortium who were not directly involved in the base model development .",
    "both the feedback rounds and the reviews ensured that all experiences of the project members were captured .",
    "the central means for developing the base model and assuring its quality were regular _",
    "workshops_. we used workshops to work on the meta - model as well as on the base model .",
    "we conducted workshops at least at each status meeting ( every two to three months ) and added additional workshops as needed .",
    "over time , we used various elicitation and analysis techniques , such as prototyping , design sketching or pair modelling . a special kind of workshop were tutorial days aimed at introducing all members of the consortium to the current state of the base model .",
    "this also helped us to integrate the experience of all project members .    as we learned that it is easy",
    "to build a quality model that can not be used in a quality assessment , we introduced the concept of _ nightly quality analysis_. this means that we executed a quality assessment every night on a set of open source projects using the current state of the base model .",
    "hence , similar to continuous integration , we found problems in the quality model quickly .    furthermore , we explicitly _ validated _ the results of each iteration .",
    "we developed four validation concepts to investigate the structure and contents of the base model as shown in table  [ tab : validation - concepts ] .",
    "we wanted to understand the suitability of the structure , how much the base model assessment results differ between systems , how well the results fit to expert opinions , and how well practitioners understand and accept the base model and its results .",
    "each of the validations for every iteration were also reviewed by two reviewers not directly involved in the validations .",
    "the final validations are described in section  [ sec : validation ] .",
    "[ 1]>p#1    r2.1cmp13.5 cm * meta - model suitability * & we let experts transcribe ( parts of ) their existing , diverse quality models into the new structure as given by our meta - model and fill out a questionnaire on how well the structure fits their model and needs .",
    "although this does not validate the base model directly , the underlying meta - model is a fundamental part in terms of the practicality of a quality model .",
    "we already published the results of this validation in  @xcite . + * degree of differentiation * & a quality model that gives a very similar quality grade for all kinds of systems is not helpful .",
    "hence , we ran quality assessments on open source and industrial systems to investigate to what degree the results differentiate the systems",
    ". we do not report detailed results in this article .",
    "yet , the experiences helped us in the development of the base model by understanding what is important ( section  [ sec : calibrationbasemodel ] ) .",
    "furthermore , we shaped the interpretation model of the quality assessment approach ( section  [ sec : interpretation ] ) to support this differentiation . +",
    "* criterion validity * & to understand whether our quality assessment results from the base model matched independent assessments , we compared the assessment results based on the model with the independent results for existing systems .",
    "first , in case we had a quality ranking of a set of systems or sub - systems , we performed a quality assessment using the non - adapted base model and compared the resulting quality ranking with the existing one .",
    "we did this using expert opinions about open source and industrial systems ( section  [ sec : comparison ] ) .",
    "second , in case we knew that during certain time periods , changes to a software had been done specifically to improve its quality , we assessed the quality at several points in time using the base model and expected to see an improvement in the quality grade as well .",
    "we performed such a validation with one industrial system ( section  [ sec : improvement ] ) . +",
    "* acceptance * & because it is essential that practitioners understand the base model structure , its contents and the assessment results , we conducted assessments of industrial systems and inspected the results together with experts for the systems .",
    "we elicited the experts understanding and acceptance of the base model and the result of the assessment conducted using the base model with a questionnaire .",
    "we performed these validations for industrial systems ( section  [ sec : acceptance ] ) .",
    "+    [ tab : validation - concepts ]    in iteration 1 , most of the development of the base model was done by five people from one partner organisation . the difficult consolidation and",
    "the discussions at the workshops led us to change that approach .",
    "we realised that we needed to integrate all partners and set aside dedicated time slots for working on the base model .",
    "therefore , we introduced the concept of _ sprints_. each sprint was two weeks long and included four to eight people from two to three partners .",
    "we started with two days of joint modelling in one location .",
    "afterwards all participants worked independently on the base model and synchronised their work in daily conference calls . in iteration 2 ,",
    "the sprints were aimed at exploring different areas of what to include in the base model . in iteration 3 ,",
    "we aimed at consolidating and completing the base model .      in this section ,",
    "we describe the execution of the approach to building the base model structured along the iterations .",
    "we show an overview of the activities of all three iterations in table  [ tab : iterations ] .",
    "we omitted the feedback rounds in the table because we performed one in each iteration to discuss the current status of the base model .    [ cols=\"^,<,<,<,<,<,<\",options=\"header \" , ]     for the entities , considerable restructuring was necessary .",
    "we added a number of entities , as in c / c++ the declaration and definition of variables or methods has to be distinguished .",
    "furthermore , c++ has some specifics not available in other object - oriented programming languages , such as comma operators .",
    "we split some entities , as the underlying measures sometimes provide more specific support for those specialised entities ( e.g.  not only for literals in general but also for string literals and numeric literals ) .",
    "we removed those entities that do not make sense for c / c++ ( e.g.  interfaces ) .",
    "table  [ tab : specific - eqm1 ] shows , however , that many of the properties already defined in the base model could be reused .",
    "only minor changes were necessary ( adding , splitting , merging , renaming ) to model the properties that are typical for embedded systems .",
    "we removed 14 properties from the base model .",
    "these were mainly properties tied to entities that are specific for programming languages like java and c # ( e.g.  interfaces ) or properties that are not related to source code .",
    "a gap exists between abstract quality definitions provided in common quality taxonomies , such as iso / iec  25010 , abstract quality assessment procedures , such as iso / iec  25040 , and concrete measurements .",
    "our overall aim is to close this gap with the help of operationalised quality models . because of the domain specificity of quality and the potential detailedness of such operationalised quality models , we also aimed at developing modular and adaptable models . to conclude , we summarise our contributions ,",
    "discuss the lessons learnt and draw conclusions and give directions for future work .",
    "we have shown six contributions for achieving our goal : ( 1 ) we developed an explicit meta - model that allows us to specify operationalised quality models with the flexible but well - defined concepts of _ factors _ , _ impacts _ between factors , _ measures _ for operationalising the factors , and modules .",
    "( 2 ) using this meta - model , we built a broad , largely technology - independent base model , which we operationalised for the programming languages java and c#. the freely available and extendable base model captures the most important statically measurable product factors and their impacts on product quality as defined in iso / iec  25010 .",
    "( 3 ) we provided a quality assessment approach and a corresponding operationalisation of the base model , which enables us to use it for transparent and repeatable quality assessments .",
    "\\(4 ) we evaluated three aspects of the complete approach for java in empirical studies .",
    "we found that the assessments largely match expert opinion , especially for the maintainability part of the model .",
    "yet , the results are not completely conclusive .",
    "the model as well as the quality assessments were highly understandable for practitioners and considered the best that can be done with static analysis .",
    "the opinions on the validity of the assessments and on potentially improved productivity were inconclusive , however .",
    "\\(5 ) we developed extensive , open - source tool support for building operationalised quality models as well as performing the quality assessments including extensive visualisation capabilities .",
    "( 6 ) in addition to the base model , we described the specific quality model for the area of embedded software .",
    "it relies on the same infrastructure as the base model and shows how the quamoco approach can be used for a specific context .",
    "furthermore , it demonstrates the possibility of exploiting the base model to build specific models with less effort than if starting from scratch .",
    "overall , we found that it is possible to bridge the gap between abstract quality characteristics and concrete measures by building detailed , operationalised quality models .",
    "it required great effort to create the necessary foundations and then build such a detailed model .",
    "we are not sure to what extent such effort can be expended in practical settings . yet",
    ", we found in the empirical analyses that there is reasonable agreement between expert opinion and model - based quality assessments as well as an increased understanding of operationalised quality models by practitioners .    a measurement program using gqm would probably be able to come up with a similar quality model .",
    "it took three years and about 23 people , however , to build the quality models and surrounding tools and methods .",
    "most companies are probably not willing to spend this effort but would rather adapt an existing quality model .",
    "there is now a broad , freely available quality model based on an explicit meta - model capturing the experience of several quality experts from industry and academia .",
    "it also contains complete tool support from model creation to quality assessment .    for academia",
    ", this allows investigating the model in detail , working on different aspects of the model that are still under - developed and empirically investigating and comparing the quality model with other approaches . in that sense , the quamoco base model can be used as a benchmark .",
    "the base model itself is broad and covers most quality characteristics of iso / iec  25010 but with varying degrees of depth .",
    "maintainability , in particular , is well covered and seems to be assessable by static and manual analyses .",
    "other quality characteristics , such as reliability or security , are covered by static checks , but we expect that dynamic analyses will be able to improve the assessments .",
    "the modelling of such aspects can be done with the existing mechanisms , but the execution of quality assessment will be different as we need a running system in a suitable environment .    in the follow - up of the project ,",
    "the quamoco meta - model and tooling were also shown to be ready for industrial use : itestra gmbh deployed them successfully at a financial software provider with the purpose of managing the quality and costs of all larger projects .",
    "further commercial applications may follow .",
    "key features were the flexible modelling of quality characteristics , measures , aggregation and evaluation rules , as well as the ability to deal with different technologies , such as java , .net , c++ , and cobol in a similar , integrated way .",
    "we also transferred the approach successfully into practice in a project with several smes  @xcite .",
    "in that project , however , we also found a partial mismatch between the analysis results of the base model and the opinions of the experts .",
    "this suggests that the base model would need to be adapted better to their environment .",
    "we invested a lot of effort in creating a clear and efficient approach for building the quality model . on the other hand",
    ", we learned a lot along the way .",
    "we found the issues in table  [ tab : lessons - learned ] to be the most important lessons learned from the quamoco project .",
    "r2.7cmp13.2 cm * additional layer * & our discussions and experiences led us to the decision to include  in contrast to most existing quality models such as iso / iec  25010 or @xcite  an additional layer , which we called product factors , in the quality models to make it easier to relate measures and quality aspects to it .",
    "we can confirm similar proposals made by kitchenham et al .",
    "@xcite or dromey  @xcite , because this allows clear operationalisation of the model .",
    "the _ practices _ of squale  @xcite go into a similar direction but are less clearly defined . + * modularisation * & modularisation proved to be a powerful concept in the models for handling different technologies and paradigms and their overlapping quality characteristics .",
    "each module can place special emphasis on its specifics and extend and use the elements of ( other ) existing modules .",
    "modularisation had not been used in quality models before .",
    "+ * operationalisation * & completely operationalising quality models using measures , instruments and evaluations is an elaborate task .",
    "we spent many person - months on the model and were still only able to cover a few quality aspects and technologies comprehensively .",
    "we found in our validations , however , that the operationalisation makes the abstract quality attributes from iso easier to understand and explains software metrics for practitioners .",
    "it helps to bridge the identified gap .",
    "again , squale  @xcite is most similar here .",
    "they report first results of their operationalised quality model being well accepted by developers at air france , but they did not perform a thorough analysis .",
    "hence , it remains unclear if the effort pays off in the end .",
    "+ * rankings and threshold calibration * & determining good thresholds in the assessment is crucial but hard .",
    "the benchmarking approach helped us to put this on a more solid foundation , but it is an elaborate process and a large number of available systems are required .",
    "our calibration approach is similar to the benchmarking in @xcite which we can confirm as a useful means for determining thresholds .",
    "nevertheless , the participants of our study still found the threshold determination and calibration hard to understand . + * static analysis for quality assessment * & static analysis is extremely handy for software analyses as it needs neither a specific context nor test cases and a running system .",
    "hence , we can easily and frequently run such analyses on many systems .",
    "this advantage is also a disadvantage because we found that inherently dynamic aspects , such as reliability or security , are difficult to capture statically .",
    "nevertheless , we saw mostly reasonable assessments in concordance with expert opinion . + * nightly quality analysis * & introducing nightly quality analyses , similar to nightly builds for software , proved to be the most important step on the way to an operationalised quality model .",
    "we ran the current quality model every night on a wide range of systems to detect problems in the model and tooling as soon as possible . to the best of our knowledge ,",
    "such an approach has not been used before . + * difficult validation * & objective validation of the assessment results is hard because we usually do not have objective , independent quality assessments to compare our results to .",
    "our assessment results can not be compared with defect counts , and other general quality metrics are usually not available .",
    "this leaves us with a low sample size so far .",
    "bansiya and davis  @xcite , for example , used a similar approach to validate their qmood model .",
    "+    [ tab : lessons - learned ]      by working on filling the gap in current quality models , we found several other directions for future work that should be followed .",
    "first , the base model and its validation focus on a small number of paradigms and technologies so far . to be truly broad ,",
    "we need to take into account further contents for the base model .",
    "second , we are working on additional empirical studies to better understand the remaining weaknesses of our approach to further improve it accordingly .",
    "third , we believe that the tool support is exceptional for a research prototype but not yet on the level of a commercial or mature open source application .",
    "thus , we will continue to work on the tools as an open source project .",
    "fourth , mordal - manet et al .",
    "@xcite present an in - depth discussion of possibilities for aggregating quality metrics .",
    "this should also be investigated in the context of quamoco models and their assessment method .",
    "finally , the majority of the base model measures have static analysis instruments to allow them to be collected with low effort .",
    "this will , however , limit the possibilities of assessing dynamic aspects of the software .",
    "hence , we are working on extensions to include testing and other dynamic analyses .",
    "we are grateful to all members of the quamoco project team as well as to all the participants of our interviews and surveys .",
    "this work has been supported by the german federal ministry of education and research ( bmbf ) under grant number 01is08023 .",
    "10    hiyam al - kilidar , karl cox , and barbara kitchenham .",
    "the use and usefulness of the iso / iec 9126 quality standard . in _ proc .  international symposium on empirical software engineering ( isese05 ) _ , pages 716 .",
    "ieee , 2005 .",
    "mohammad alshayeb and wei li .",
    "an empirical validation of object - oriented metrics in two different iterative software processes .",
    ", 29(11):10431049 , 2003 .",
    "tiago  l. alves , jos  pedro correia , and joost visser .",
    "benchmark - based aggregation of metrics to ratings . in _ proc .",
    "iwsm / mensura 2011 _ , pages 2029 .",
    "ieee , 2011 .",
    "nathaniel ayewah , william pugh , j.  david morgenthaler , john penix , and yuqian zhou . evaluating static analysis defect warnings on production software . in _ proc .",
    "7th acm sigplan - sigsoft workshop on program analysis for software tools and engineering ( paste 07 ) _ , pages 18 .",
    "acm , 2007 .",
    "sushil bajracharya , joel ossher , and cristina lopes .",
    "sourcerer : an internet - scale software repository . in _ proc .",
    "2009 icse workshop on search - driven development ",
    "users , infrastructure , tools and evaluation _ , pages 14 .",
    "ieee , 2009 .",
    "tibor bakota , pter hegeds , pter krtvlyesi , rudolf ferenc , and tibor gyimthy . a probabilistic software quality model . in _ proc .",
    "27th ieee international conference on software maintenance _ , pages 243252 .",
    "ieee , 2011 .",
    "jagdish bansiya and carl  g. davis . a hierarchical model for object - oriented design quality assessment .",
    ", 28(1):4 17 , 2002 .",
    "f.  hutton barron and bruce  e. barrett .",
    "decision quality using ranked attribute weights .",
    ", 42(11):15151523 , 1996 .",
    "victor  r basili , lionel briand , and walcelio  l melo . .",
    ", 22(10):751761 , 1996 .",
    "saida benlarbi , khaled el emam , nishith goel , and shesh  n rai .",
    "thresholds for object - oriented measures . in _ proc .",
    "11th international symposium on software reliability engineering ( issre 2000 ) _ , pages 2438 .",
    "ieee , 2000 .",
    "alexandre bergel , simon denier , stphane ducasse , jannik laval , fabrice bellingard , philippe vaillergues , and franoise balmas . .",
    "in _ proc .",
    "13th european conference on software maintenance and reengineering _",
    ", pages 285288 .",
    "ieee , 2009 .",
    "al  bessey , dawson engler , ken block , ben chelf , andy chou , bryan fulton , seth hallem , charles henri - gros , asya kamsky , and scott mcpeak . .",
    ", 53(2):6675 , 2010 .",
    "barry  w. boehm , john  r. brown , hans kaspar , myron lipow , gordon  j. macleod , and michael  j. merrit . .",
    "north - holland , 1978 .",
    "lionel briand , jrgen wst , john  w. daly , and d.  victor porter .",
    "exploring the relationships between design measures and software quality in object - oriented systems .",
    ", 51(3):245273 , 2000 .",
    "cenelec . , 2001 .",
    "victor  k.y .",
    "chan , w.  eric wong , and t.f .",
    "application of a statistical methodology to simplify software quality metric models constructed using incomplete data samples . , pages 1521 , 2006 .",
    "davis  fred d. perceived usefulness , perceived ease of use , and user acceptance of information technology .",
    ", 13(3):319340 , 1989 .",
    "fatma dandashi .",
    "a method for assessing the reusability of object - oriented code using a validated set of automated measurements . in _ proc .",
    "acm symposium on applied computing ( sac02 ) _ , pages 9971003 .",
    "acm , 2002 .",
    "florian deissenboeck , lars heinemann , markus herrmannsdoerfer , klaus lochmann , and stefan wagner .",
    "the quamoco tool chain for quality modeling and assessment . in _ proc .",
    "33rd international conference on software engineering ( icse11 ) _ , pages 10071009 .",
    "acm , 2011 .",
    "florian deissenboeck , elmar juergens , benjamin hummel , stefan wagner , benedikt mas  y parareda , and markus pizka .",
    "tool support for continuous quality control .",
    ", 25(5):6067 , 2008 .",
    "florian deissenboeck , elmar juergens , klaus lochmann , and stefan wagner .",
    "software quality models : purposes , usage scenarios and requirements . in _ proc .",
    "icse workshop on software quality _ , pages 914 .",
    "ieee , 2009 .",
    "florian deissenboeck and markus pizka .",
    "concise and consistent naming .",
    ", 14(3):261282 , 2006 .",
    "florian deissenboeck , stefan wagner , markus pizka , stefan teuchert , and jean - franois girard . an activity - based quality model for maintainability . in _ proc .",
    "ieee international conference on software maintenance ( icsm07 ) _ , pages 184193 .",
    "ieee , 2007 .",
    "j.  dodgson , m.  spackman , a.  pearman , and l.  phillips .",
    "multi - criteria analysis : a manual .",
    "technical report , department of the environment , transport and the regions , london , 2000 .",
    "r.  geoff dromey . a model for software product quality .",
    ", 21(2):146162 , 1995 .",
    "wards edwards and f.  hutton barron . and smarter : improved simple methods for multiattribute utility measurement . ,",
    "60(3):306325 , 1994 .",
    "xavier franch and juan  pablo carvallo . using quality models in software package selection .",
    ", 20(1):3441 , 2003 .",
    "mario gleirscher , dmitriy golubitskiy , maximilian irlbeck , and stefan wagner .",
    "introduction of static quality analysis in small- and medium - sized software enterprises : experiences from technology transfer .",
    ", 22(3):499542 , 2014 .",
    "robert  b. grady and deborah  l. caswell . .",
    "prentice hall , 1987 .",
    "harald gruber , reinhold plsch , and matthias saft . on the validity of benchmarking for evaluating code quality . in _ proc",
    ".  iwsm / metrikon / mensura 2010 _ , 2010 .",
    "ilja heitlager , tobias kuipers , and joost visser . a practical model for measuring maintainability .",
    "in _ proc .  6th international conference on quality of information and communications technology ( quatic07 ) _ , pages 3039 .",
    "ieee , 2007 .",
    "david hovemeyer and william pugh . .",
    ", 39(12):92 , 2004 .",
    "david hovemeyer and william pugh .",
    "finding more null pointer bugs , but not too many . in _ proc .",
    "7th acm sigplan - sigsoft workshop on program analysis for software tools and engineering ( paste 07 ) _ , pages 914 .",
    "acm , 2007 .    .",
    "functional safety of electrical / electronical / programmable electronic safety - related systems , 2010 .    .",
    "medical device software ",
    "software life cycle processes , 2006 .    .",
    "systems and software engineering  systems and software quality requirements and evaluation ( square )  system and software quality models , 2011 .    .",
    "systems and software engineering  systems and software quality requirements and evaluation ( square )  evaluation process , 2011 .    .",
    "software engineering  product quality ",
    "part 1 : quality model , 2001 .",
    "capers jones and oliver bonsignour . .",
    "addison - wesley , 2011 .",
    "jsf . , 2005 .",
    "elmar juergens , florian deissenboeck , benjamin hummel , and stefan wagner .",
    "do code clones matter ? in _ proc .",
    "31st international conference on software engineering ( icse09 ) _ , pages 485495 .",
    "ieee , 2009 .",
    "barbara kitchenham , stephen  g. linkman , alberto pasquini , and vincenzo nanni .",
    "the squid approach to defining a quality model .",
    ", 6(3):211233 , 1997 .",
    "m.  kls , c.  lampasona , and j.  mnch .",
    "adapting software quality models : practical challenges , approach , and first empirical results . in _ proc .",
    "37th euromicro conference on software engineering and advanced applications _ , pages 341348 .",
    "ieee , 2011 .",
    "m.  kls , h.  nakao , e.  elberzhager , and j.  muench .",
    "support planning and controlling of early quality assurance by combining expert judgment and defect data  a case study .",
    ", 15(4):423454 , 2010 .",
    "michael kls , jens heidrich , jrgen mnch , and adam trendowicz .",
    "scheme : a classification scheme for comprehensive quality model landscapes . in _ proc .",
    "35th euromicro conference on software engineering and advanced applications ( seaa09 ) _ , pages 243250 .",
    "ieee , 2009 .",
    "michael kls , constanza lampasona , sabine nunnenmacher , stefan wagner , markus herrmannsdrfer , and klaus lochmann . how to evaluate meta - models for software quality ? in _ proc",
    ".  iwsm / metrikon / mensura 2010 _ , 2010 .",
    "michael kls , klaus lochmann , and lars heinemann .",
    "evaluating a quality model for software product assessments - a case study . in _ tagungsband software - qualittsmodellierung",
    "und -bewertung ( sqmb 11)_. tu mnchen , 2011 .",
    "jannik laval , alexandre bergel , and stephane ducasse . assessing the quality of your software with moqam . in _",
    "2nd workshop on famix and moose in reengineering ( famoosr08 ) _ , 2008 .",
    "nancy  g. leveson .",
    "the role of software in spacecraft accidents .",
    ", 41:564575 , 2004 .",
    "klaus lochmann .",
    "engineering quality requirements using quality models . in _ proc .",
    "15th ieee international conference on engineering of complex computer systems ( iceccs10 ) _ , pages 245246 .",
    "ieee , 2010 .",
    "klaus lochmann and lars heinemann .",
    "integrating quality models and static analysis for comprehensive quality assessment . in _ proc .",
    "2nd international workshop on emerging trends in software metrics ( wetsom11 ) _ , pages 511 .",
    "acm , 2011 .",
    "markus luckey , andrea baumann , daniel mndez  fernndez , and stefan wagner .",
    "reusing security requirements using an extend quality model . in _ proc .",
    "2010 icse workshop on software engineering for secure systems ( sess10 ) _ , pages 17 .",
    "acm , 2010 .",
    "cristina marinescu , radu marinescu , retru  florin mihancea , daniel ratiu , and richard wettel .",
    ": an integrated platform for quality assessment of object - oriented design . in _ proc .",
    "21st ieee international conference on software maintenance _ , pages 7780 .",
    "ieee , 2005 .",
    "radu marinescu and daniel ratiu .",
    "quantifying the quality of object - oriented design : the factor - strategy model . in _ proc .",
    "11th working conference on reverse engineering ( wcre04 ) _ , pages 192201 .",
    "ieee , 2004 .",
    "alois mayr , reinhold plsch , michael kls , constanza lampasona , and matthias saft . a comprehensive code - based quality model for embedded systems .",
    "in _ proc .",
    "23th ieee international symposium on software reliability engineering ( issre12 ) _ , pages 281290 .",
    "ieee , 2012 .",
    "alois mayr , reinhold plsch , and christian krner .",
    "objective safety compliance checks for source code . in _ companion proceedings of 36th international conference on software engineering ( icse 2014 ) _ , 2014",
    "jim  a. mccall , paul  k. richards , and gene  f. walters . . national technical information service , 1977",
    "2004 .    misra .",
    "2008 guidelines for the use of the c++ language in critical systems , 2008 .",
    "karine mordal , nicolas anquetil , jannik laval , alexander serebrenik , bogdan vasilescu , and stphane ducasse .",
    "software quality metrics aggregation in industry .",
    ", 25(10):11171135 , 2012 .",
    "karine mordal - manet , franoise balmas , simon denier , stphane ducasse , harald wertz , jannik laval , fabrice bellingard , and philippe vaillergues . the squale model  a practice - based industrial quality model . in _ proc",
    "ieee international conference on software maintenance ( icsm09 ) _ , pages 531534 .",
    "ieee , 2009 .",
    "reinhold plsch , harald gruber , a.  hentschel , christian krner , gustav pomberger , stefan schiffer , matthias saft , and s.  storck .",
    "the emisq method and its tool support - expert - based evaluation of internal software quality .",
    ", 4(1):315 , 2008 .",
    "reinhold plsch , harald gruber , christian krner , gustav pomberger , and stefan schiffer . a proposal for a quality model based on a technical topic classification . in _ tagungsband des 2 .",
    "workshops zur software - qualittsmodellierung und -bewertung_. tu mnchen , 2009 .",
    "reinhold plsch , alois mayr , and christian krner .",
    "collecting quality requirements using quality models and goals . in _ proc .",
    "2010 seventh international conference on the quality of information and communications technology ( quatic10 ) _ , pages 198203 .",
    "ieee , 2010 .",
    "ioannis samoladas , georgios gousios , diomidis spinellis , and ioannis stamelos .",
    "the sqo - oss quality model : measurement based open source software evaluation . in _ open source development , communities and quality .",
    "ifip 20th world computer congress _ , pages 237248 .",
    "springer , 2008 .",
    "holger schackmann , martin jansen , and horst lichter .",
    "tool support for user - defined quality assessment models . in _ proc .",
    "metrikon 2009 _ , 2009 .",
    "raed shatnawi . a quantitative investigation of the acceptable risk levels of object - oriented metrics in open - source systems .",
    ", 36(2):216225 , 2010 .",
    "adam trendowicz , michael kls , constanza lampasona , juergen muench , christian krner , and saft matthias .",
    "model - based product quality evaluation with multi - criteria decision analysis . in _ proc",
    ".  iwsm / metrikon / mensura 2010 _ , 2010 .",
    "adam trendowicz and sylwia kopczyska .",
    "adapting multi - criteria decision analysis for assessing the quality of software products .",
    "current approaches and future perspectives . in _ advances in computers _ , pages 153226 .",
    "elsevier , 2014 .",
    "rini van solingen and egon berghout . .",
    "mcgraw - hill professional , 1999 .",
    "r.  h.  j. van zeist and p.  r.  h. hendriks .",
    "specifying software quality with the extended iso model .",
    ", 5(4):273284 , 1996 .",
    "p.  vincke . .",
    "contemporary evaluation research .",
    "wiley , 1992 .",
    "stefan wagner . a bayesian network approach to assess and predict software quality using activity - based quality models .",
    ", 52(11):12301241 , 2010 .",
    "stefan wagner , klaus lochmann , lars heinemann , michael kls , constanza lampasona , adam trendowicz , reinhold plsch , alois mayr , andreas seidl , andreas goeb , and jonathan streit .",
    "questionnaires and raw data for the paper `` operationalised product quality models and assessment : the quamoco approach '' . http://dx.doi.org/10.5281/zenodo.13290 .",
    "stefan wagner , klaus lochmann , lars heinemann , michael kls , adam trendowicz , reinhold plsch , andreas seidl , andreas goeb , and jonathan streit .",
    "the quamoco product quality modelling and assessment approach . in _ proc .",
    "34th international conference on software engineering ( icse12 ) _ , pages 11331142 .",
    "ieee , 2012 .",
    "stefan wagner , klaus lochmann , sebastian winter , florian deissenboeck , elmar juergens , markus herrmannsdoerfer , lars heinemann , michael kls , adam tendowicz , jens heidrich , reinhold ploesch , andreas goeb , christian koerner , korbinian schoder , jonathan streit , and christian schubert . the quamoco quality meta - model .",
    "technical report tum - i1281 , technische universitt mnchen , 2012 .",
    "stefan wagner , klaus lochmann , sebastian winter , andreas goeb , and michael klaes .",
    "quality models in practice : a preliminary analysis . in _ proc .",
    "3rd international symposium on empirical software engineering and measurement ( esem09 ) _ , pages 464467 .",
    "ieee , 2009 .",
    "stefan wagner , klaus lochmann , sebastian winter , andreas goeb , michael kls , and sabine nunnenmacher .",
    "software quality in practice .",
    "survey results .",
    "technical report tum - i129 , technische universitt mnchen , 2012 .",
    "michael wicks . a software engineering survey .",
    "technical report hw - macs - tr-0036 , heriot - watt university , 2005 .",
    "in this appendix , we describe the details of how to determine the thresholds _ min _ and _ max _ for the utility functions in the assessment approach using benchmarking .",
    "we use equation  [ eq : calibration ] , where @xmath0 is the normalised measurement result for the baseline system @xmath1 and @xmath2 and @xmath3 represent the 25% and 75% percentiles ; @xmath4 is the inter - quartile range .",
    "1 .   figure  [ fig : hist : metrics]a shows the histogram of the measure _ bitwise add of signed value _ of 110  systems .",
    "this measure is based on a rule - based static code analysis tool and normalised by loc .",
    "we can see that all but two systems had no violations of this rule and have a normalised value of @xmath8 .",
    "such a distribution frequently appears for rule - based measures . in this case ,",
    "equation  [ eq : calibration ] realises a simple jump function at 0 . 2 .   figure  [ fig : hist : metrics]b shows the histogram of the measure _ clone coverage_. this metric is not normalised because it returns one value for the entire system , which is already `` normalised '' by definition .",
    "the distribution of values is typical for `` classical '' software metrics . in this case ,",
    "equation  [ eq : calibration ] uses the minimum and maximum non - outlier values as thresholds , i.e.  @xmath9 and @xmath10 .",
    "3 .   figure  [ fig : hist : metrics]c shows the histogram of the measure _ missing javadoc comment_. although it is a rule - based measure , its normalised values are more equally distributed than in  ( 1 ) .",
    "thus , we used the non - outlier values as thresholds . on the left side of the distribution , there are no outliers . on the right side ,",
    "all values above the dotted line in the figure are considered outliers .",
    "the approach ensures that outliers in the measurement data do not lead to extreme _",
    "min _ and _ max _ thresholds which would lead to narrowly clustered evaluation results due to a stretched evaluation function and , in consequence , to low entropy and lack of differentiation @xcite ."
  ],
  "abstract_text": [
    "<S> * context * : software quality models provide either abstract quality characteristics or concrete quality measurements ; there is no seamless integration of these two aspects </S>",
    "<S> . quality assessment approaches are , hence , also very specific or remain abstract . </S>",
    "<S> reasons for this include the complexity of quality and the various quality profiles in different domains which make it difficult to build operationalised quality models .    </S>",
    "<S> * objective : * in the project quamoco , we developed a comprehensive approach aimed at closing this gap .    </S>",
    "<S> * method : * the project combined constructive research , which involved a broad range of quality experts from academia and industry in workshops , sprint work and reviews , with empirical studies . all deliverables within the project were peer - reviewed by two project members from a different area . </S>",
    "<S> most deliverables were developed in two or three iterations and underwent an evaluation .    </S>",
    "<S> * results : * we contribute a comprehensive quality modelling and assessment approach : ( 1 ) a meta quality model defines the structure of operationalised quality models . </S>",
    "<S> it includes the concept of a product factor , which bridges the gap between concrete measurements and abstract quality aspects , and allows modularisation to create modules for specific domains . </S>",
    "<S> ( 2 ) a largely technology - independent base quality model reduces the effort and complexity of building quality models for specific domains . for java and c # systems , we refined it with about  300 concrete product factors and  500 measures . </S>",
    "<S> ( 3 ) a concrete and comprehensive quality assessment approach makes use of the concepts in the meta - model . </S>",
    "<S> ( 4 ) an empirical evaluation of the above results using real - world software systems showed : ( a ) the assessment results using the base model largely match the expectations of experts for the corresponding systems . </S>",
    "<S> ( b ) the approach and models are well understood by practitioners and considered to be both consistent and well suited for getting an overall view on the quality of a software product . </S>",
    "<S> the validity of the base quality model could not be shown conclusively , however . </S>",
    "<S> ( 5 ) the extensive , open - source tool support is in a mature state . </S>",
    "<S> ( 6 ) the model for embedded software systems is a proof - of - concept for domain - specific quality models .    </S>",
    "<S> * conclusion : * we provide a broad basis for the development and application of quality models in industrial practice as well as a basis for further extension , validation and comparison with other approaches in research .    quality model , product quality , quality assessment </S>"
  ]
}