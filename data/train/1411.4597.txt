{
  "article_text": [
    "graphs are used to describe a wide range of situations in a precise yet intuitive way .",
    "different kinds of graphs are used in modelling techniques depending on the investigated fields , which include computer science , chemistry , biology , quantum computing , etc .",
    "when system states are represented by graphs , it is natural to use rules that transform graphs to describe the system evolution .",
    "there are two main streams in the research on graph transformations : ( i ) the algorithmic approaches , which describe explicitly , with a concrete algorithm , the result of applying a rule to a graph ( see e.g.  @xcite ) , and ( ii ) the algebraic approaches which define abstractly a graph transformation step using basic constructs borrowed from category theory . in this paper",
    "we will consider the latter .",
    "the basic idea of all approaches is the same : states are represented by graphs and state changes are represented by rules that modify graphs .",
    "the differences are the kind of graphs that may be used , and the definitions of when and how rules may be applied .",
    "one critical point when defining graph transformation is that one can not delete or copy part of a graph without considering the effect of the operation on the rest of the graph , because deleted / copied items may be linked to others .",
    "for example , rule @xmath0 in figure  [ fig_rulesandgraphs](a ) specifies that a node shall be deleted and rule @xmath1 that a node shall be duplicated ( labels the copy ) . what should be the result of applying these rules to the grey node of graph @xmath2 in figure  [ fig_rulesandgraphs](b ) ?",
    "different approaches give different answers to this question .",
    "the most popular algebraic approaches are the double - pushout ( dpo ) and the single - pushout ( spo ) , which can be illustrated as follows : @xmath3|{po }   l \\ar[d]_{m } & \\ar@{}[rd]|{po}k \\ar[l]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } } \\ar[d]^{d }   \\ar[r]|{{\\phantom{\\big(}r{\\phantom{\\big ) } } } }     & r \\ar[d]^{m ' } \\\\",
    "g           & d \\ar[l]|{{\\phantom{\\big(}l'{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}r'{\\phantom{\\big ) } } } }     & h           \\\\     } &   \\hspace{5 mm } &     \\xymatrix@c=6pc@r=1.5pc {    \\ar@{}[rd]|{po } l \\ar[d]_{m } \\ar[r]|{{\\phantom{\\big(}\\psi{\\phantom{\\big ) } } } } & r   \\ar[d]^{m ' }   \\\\     g   \\ar[r]|{{\\phantom{\\big(}\\psi'{\\phantom{\\big ) } } } } & h           \\\\     } \\\\    \\mbox{double pushout rewrite step } & &     \\mbox{single pushout rewrite step } \\\\",
    "\\end{array}\\ ] ]    in the dpo approach @xcite , a rule is defined as a span @xmath4 and a match is a morphism @xmath5 .",
    "a graph @xmath2 rewrites into a graph @xmath6 using rule @xmath7 and match @xmath8 if the diagram above to the left can be constructed , where both squares are pushouts .",
    "conditions for the existence and uniqueness of graph @xmath9 need to be studied explicitly , since it is not a universal construction .",
    "with dpo rules it is easy to specify the addition , deletion , merging or cloning of items , but their applicability is limited . for example ,",
    "rule @xmath0 of figure [ fig_rulesandgraphs ] is not applicable to the grey node of @xmath2 ( as it would leave dangling edges ) , and a rule like @xmath1 is usually forbidden as the _ pushout complement _",
    "@xmath9 would not be unique .    in the spo approach @xcite ,",
    "a rule is a _ partial _ graph morphism @xmath10 and a match is a total morphism @xmath5 .",
    "a graph @xmath2 rewrites into a graph @xmath6 using rule @xmath11 and match @xmath8 if a square like the one above to the right can be constructed , which is a pushout in the category of graphs and partial morphisms . deleting , adding and merging items",
    "can easily be specified with spo rules , and the approach is appropriate for specifying deletion of nodes in unknown context , thanks to partial morphisms .",
    "the deletion of a node causes the deletion of all edges connected to it , and thus applying rule @xmath0 to @xmath2 would result in graph @xmath12 in figure [ fig_rulesandgraphs](b ) .",
    "however , since a rule is defined as a single graph morphism , copying of items ( as in rule @xmath1 ) can not be specified directly in spo .",
    "a more recent algebraic approach is the sesqui - pushout approach ( sqpo )  @xcite .",
    "rules are spans like in the dpo , but in the left square of a rewriting step , graph @xmath9 is built as a _ final pullback complement_. this characterises @xmath9 with a universal property , enabling to apply rule @xmath0 , obtaining the same result as in the spo approach ( @xmath12 ) , as well as rule @xmath1 , obtaining @xmath13 as result .",
    "also @xmath1 has a side effect : when a node is copied all the edges of the original node are copied as well .",
    "rules do not specify explicitly which context edges are deleted / copied , this is determined by the categorical constructions that define rule application . in general , in all algebraic approaches , the items that are preserved by a rule will retain the connections they have with items which are not in the image of the match .",
    "this holds also for items that are copied in the sqpo approach .",
    "however , there are situations in which the designer should be able to specify which of the edges connecting the original node should be copied when a node is copied , depending for example on the direction of the edges ( incoming or outgoing ) , or on their labels , if any . for example , if the graphs of figure  [ fig_rulesandgraphs ] represent web pages ( nodes ) and hyperlinks among them ( edges ) it would be reasonable to expect that the result of copying the grey page of @xmath2 with rule @xmath1 would be graph @xmath14 rather than @xmath13 , so that new hyperlinks are created only in the new page , and not in the pages pointing to the original one . as another example",
    ", the fork and clone system commands in linux both generate a clone of a process , but with different semantics .",
    "both commands precisely differ in the way the environment of the cloned process is dealt with : see @xcite for more details .",
    "these examples motivate the rewriting approach that we introduce in this paper . in order to give the designer the possibility of controlling how the nodes that are preserved or cloned by a rule are embedded in the context graph , we propose a new algebraic approach to graph transformation where rules are triples of arrows with the same source @xmath15 .",
    "arrows @xmath16 and @xmath17 are the usual left- and right - hand sides , while @xmath18 is a mono called the _ embedding _ : it will play a role in controlling which edges from the context are copied .",
    "the resulting rewriting approach , called agree ( for algebraic graph rewriting with controlled embedding ) is presented in sect .",
    "[ sec : pbcpo ] . as usual for the algebraic approaches ,",
    "agree rewriting will be introduced abstractly for a category satisfying suitable requirements , that will be introduced in sect .",
    "[ sec : preliminaries ] . for the knowledgeable reader",
    "we anticipate that we will require the existence of _ partial map classifiers _",
    "@xcite . after discussing an example of social networks in sect .",
    "[ sec : examples ] , in sect .",
    "[ sec : sqpo ] we show that agree rewriting can simulate both sqpo rewriting ( restricted to mono matches ) and _ rewriting with polarised cloning _  @xcite .",
    "finally some related and future works are briefly discussed in sect .",
    "[ sec : discussion ] .",
    "two appendices collect the proofs of the main results , that were omitted in the published version  @xcite of the present paper .",
    "we start recalling some definitions and a few properties concerning pullbacks , partial maps and partial map classifiers : a survey on them can be found in @xcite .",
    "let @xmath19 be a category with all pullbacks .",
    "we recall the following properties :    * monos are stable under pullbacks , i.e.  if @xmath20 is the pullback of @xmath21 and @xmath8 is mono , then @xmath22 is mono as well .",
    "* the _ composition _ property of pullbacks : in a commutative diagram as below on the left , if squares ( a ) and ( b ) are pullbacks , so is the composed square ; + @xmath23|{pb~(a ) } \\bullet \\ar[d ] \\ar[r ] \\ar@/^3ex/[rr]_{= } &     \\ar@{}[rd]|{pb~(b ) } \\bullet \\ar[d ] \\ar[r ] & \\bullet \\ar[d ] \\\\",
    "\\bullet \\ar[r ] \\ar@/_3ex/[rr]^{= } &   \\bullet \\ar[r ] & \\bullet \\\\   } \\qquad\\qquad \\xymatrix@c=3pc@r=1pc { \\ar@{}[rd]|{pb~(c ) } \\bullet \\ar[d ] \\ar@/^3ex/[rr]_{= } \\ar@{-->}[r ] &     \\bullet \\ar[d ] \\ar[r ] \\ar@{}[rd]|{pb~(d ) } & \\bullet \\ar[d ]",
    "\\\\    \\bullet \\ar[r ] & \\bullet \\ar[r ] & \\bullet \\\\   } \\ ] ] * and the _ decomposition _ property : in a commutative diagram as the one made of solid arrows above on the right , if square ( d ) and the outer square are pullbacks , then there is a unique arrow ( the dotted one ) such that the top triangle commutes and square ( c ) is a pullback .",
    "a _ stable system of monos _ of @xmath24 is a family @xmath25 of monos including all isomorphisms , closed under composition , and ( _ stability _ ) such that if @xmath26 is a pullback of @xmath27 and @xmath28 , then @xmath29 .",
    "@xmath25-partial map _ over @xmath19 , denoted @xmath30 , is a span made of a mono @xmath31 in @xmath25 and an arrow @xmath32 in @xmath24 , up to the equivalence relation @xmath33 whenever there is an isomorphism @xmath34 with @xmath35 and @xmath36 .",
    "category @xmath24 has an _",
    "@xmath25-partial map classifier _",
    "@xmath37 if @xmath38 is a functor @xmath39 and @xmath40 is a natural transformation @xmath41 , such that for each object @xmath42 of @xmath24 , the following holds : for each @xmath25-partial map @xmath30 there is a unique arrow @xmath43 such that square  ( [ pb : pmc ] ) is a pullback .    in this case",
    "it can be shown ( see  @xcite ) that @xmath44 for each object @xmath45 , that @xmath38 preserves pullbacks , and that the natural transformation @xmath40 is _ cartesian _ , which means that for each @xmath32 the naturality square  ( [ pb : eta ] ) is a pullback . for each mono @xmath31 in @xmath25",
    "we will use the notation @xmath46 , thus @xmath47 is defined by the pullback square  ( [ pb : olm ] ) .",
    "@xmath48|{pb } x \\ar@ { > ->}[d]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}f{\\phantom{\\big ) } } } } & y \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_y{\\phantom{\\big ) } } } } \\\\   z \\ar[r]|{{\\phantom{\\big(}\\varphi(m , f){\\phantom{\\big ) } } } } & t(y )   } \\ ] ] @xmath49|{pb } x \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_x{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}f{\\phantom{\\big ) } } } } &     y \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_y{\\phantom{\\big ) } } } } \\\\",
    "t(x ) \\ar[r]|{{\\phantom{\\big(}t(f){\\phantom{\\big ) } } } } & t(y ) \\\\   } \\ ] ] @xmath50|{pb } x \\ar@ { > ->}[d]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}{\\mathit{id}}_x{\\phantom{\\big ) } } } } & x \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_x{\\phantom{\\big ) } } } } \\\\   z \\ar[r]|{{\\phantom{\\big(}{\\overline{m}}{\\phantom{\\big ) } } } } & t(x ) \\\\   } \\ ] ]    before discussing some examples of categories that have @xmath25-partial map classifiers , let us recall the definition of some categories of graphs .",
    "[ de : graphs ] the category of _ graphs _",
    "@xmath51 is defined as follows .",
    "a _ graph _",
    "@xmath52 is made of a set of _ nodes _ @xmath53 , a set of _ edges _ @xmath54 and two functions @xmath55 , called _ source _ and _ target _ , respectively .",
    "as usual , we write @xmath56 when @xmath57 , @xmath58 and @xmath59 .",
    "morphism _ of graphs @xmath32 is made of two functions @xmath60 and @xmath61 , such that @xmath62 in @xmath42 for each edge @xmath56 in @xmath52 .",
    "given a fixed graph @xmath63 , called _ type graph _ , the category of _ graphs typed over _ @xmath63 is the slice category @xmath64 .",
    "[ def : pol - cat ] a _ polarized graph _",
    "@xmath65 is a graph @xmath52 with a pair @xmath66 of subsets of the set of nodes @xmath53 such that for each edge @xmath56 one has @xmath67 and @xmath68 .",
    "morphism _ of polarized graphs @xmath69 , where @xmath65 and @xmath70 , is a morphism of graphs @xmath32 such that @xmath71 and @xmath72 .",
    "this defines the _ category _",
    "@xmath73 of polarized graphs .",
    "a morphism of polarized graphs @xmath69 is _ strict _ , or _",
    "strictly preserves the polarization _",
    ", if @xmath74 and @xmath75 .      informally , if @xmath30 is a partial map , a total arrow @xmath76 representing it should agree with @xmath27 on the `` items '' of @xmath77 on which it is defined , and should map any item of @xmath77 on which @xmath27 is not defined in a unique possible way to some item of @xmath78 which does not belong to ( the image via @xmath79 of ) @xmath42 .",
    "for example , in @xmath80 the partial map classifier @xmath37 is defined as @xmath81 and @xmath82 for functor @xmath38 , while the natural transformation @xmath40 is made of the inclusions @xmath83 . for each partial function @xmath30",
    ", function @xmath84 extends @xmath85 by mapping @xmath86 to @xmath87 when @xmath88 and @xmath86 to @xmath89 when @xmath86 is not in the image of @xmath8 .",
    "( b ) in @xmath90    in @xmath51 the partial map classifier @xmath91 is such that @xmath92 embeds @xmath2 into the graph @xmath93 made of the disjoint union of @xmath2 with a node @xmath89 and with an edge @xmath94 for each pair of vertices @xmath95 in @xmath96 .",
    "the total morphism @xmath97 is defined on the set of nodes exactly as in @xmath80 , and on each edge similarly , but consistently with the way its source and target nodes are mapped .",
    "figure [ fig_partialmapclassexamples](a ) shows an example of a partial map @xmath98 and the corresponding extension to the total morphism @xmath99 . in the graphical notation",
    "we use edges with double tips to denote two edges , one in each direction ; arrows and node marked with @xmath100 are added to @xmath101 by the @xmath38 construction .",
    "@xmath102 and @xmath51 are instances of the general result that all elementary toposes have @xmath25-partial map classifier , for @xmath25 the family of all monos .",
    "these include , among others , all _ presheaf categories _",
    "( i.e. , functor categories like @xmath103 , where @xmath19 is a small category ) , and the slice categories like @xmath104 where @xmath19 is a topos and @xmath52 an object of @xmath19 . in fact",
    "@xmath51 is the presheaf category @xmath103 where @xmath105 has two objects @xmath106 , @xmath107 and two non - identity arrows @xmath108 .    as a consequence also",
    "the category of typed graphs @xmath109 has partial maps classifiers for all monos .",
    "figure [ fig_partialmapclassexamples](b ) shows an example : the partial map classifier of a graph @xmath110 typed over @xmath63 is obtained by adding to @xmath110 all the nodes of @xmath63 and , for each pair of nodes of the resulting graph , one instance of each edge that is compatible with the type graph .    the category of _ polarized graphs _ of def .",
    "[ def : pol - cat ] ( that will be used later in sect .",
    "[ subsec : pbcpovspolclo ] ) , is an example of category which has @xmath25-partial map classifiers for a family @xmath25 which is a proper subset of all monos .",
    "it is easy to check that strict monos form a stable system of monos ( denoted @xmath111 ) for category @xmath73 , and that @xmath73 has an @xmath111-partial map classifier @xmath112 .",
    "morphism @xmath113 embeds a polarised graph @xmath114 into @xmath115 , which is the disjoint union of @xmath114 with a node @xmath89 ( having polarity @xmath116 ) and with an edge @xmath117 for each pair of nodes @xmath118 .",
    "the total morphism @xmath97 is defined exactly as in the category of graphs .",
    "in this section we introduce the agree approach to rewriting , defining rules , matches and rewrite steps . the main difference with respect to the dpo and sqpo approaches",
    "is that a rule has an additional component @xmath119 , called the _ embedding _ , that enriches the interface and can be used to control the embedding of preserved items .",
    "we assume that @xmath19 is a category with all pullbacks , with a stable system of monos @xmath25 , with an @xmath25-partial map classifier @xmath37 , and with pushouts along monos in @xmath25 .",
    "[ def : pbcpo ]      a _ rule _ is a triple of arrows with the same source @xmath120 , with @xmath18 in @xmath25",
    ". arrows @xmath16 and @xmath17 are the _ left- _ and _ right - hand side _ , respectively , and @xmath18 is called the _",
    "embedding_.    @xmath121_{l } \\ar[r]^{r } \\ar@ { > ->}[d]^{t } & r \\\\    & t_k & } \\ ] ]       a _ match _ of a rule @xmath7 with left - hand - side @xmath122 is a mono @xmath123 in @xmath25 .",
    "@xmath124|{pb~(remark ) } l \\ar@ { > ->}[d]^{m }     \\ar@<-.5ex>@ { > ->}@/_3ex/[dd]_(.6){\\eta_l}^(.6){= } &     \\ar@{}[dr]|{po~(b ) } k \\ar[l]_{l } \\ar[r]^{r }",
    "\\ar@ { > ->}[d]_{n }       \\ar@<.5ex>@ { > ->}@/^3ex/[dd]^(.6){t}_(.6){=}|{\\hole } &       r \\ar[d]^{p } \\\\",
    "\\ar@{}[dr]|{pb~(a ) } g \\ar[d]^{{\\overline{m } } } &     d \\ar[l]_{g } \\ar[r]^{h } \\ar[d]_{n ' } &       h \\\\",
    "t(l ) &     t_k \\ar[l]^{l ' = \\varphi(t ,",
    "l ) } &     } \\ ] ]    [ def : pbcpo - rewriting ] given a rule @xmath125 and a match @xmath126 , an agree _ rewrite step _",
    "@xmath127 is constructed in two phases as follows ( see diagram  ( [ eq : agree - rew ] ) ) : +  ( a )   let @xmath128 and @xmath129 , then @xmath130 is the pullback of @xmath131 .",
    "+  ( remark )   in diagram  ( [ eq : agree - rew ] ) @xmath132 is a pullback of @xmath133 and @xmath134 is a pullback of @xmath135 because @xmath136 , thus by the decomposition property there is a unique @xmath137 such that @xmath138 , @xmath139 and @xmath140 is a pullback of @xmath141 .",
    "therefore @xmath142 is a mono in @xmath143 by stability .",
    "+  ( b )   let @xmath142 be as in the previous remark .",
    "then @xmath144 is the pushout of @xmath145 .    using the agree approach",
    ", the web page copy operation can be modelled using the rule @xmath146 shown in figure [ fig_webpagecopy ] .",
    "this rule is typed over the type graph @xmath63 .",
    "nodes denote web pages , solid edges denote links and dashed edges describe the subpage relation .",
    "the different node colours ( gray and black ) are used just to define the match , whereas the * * inside some nodes is used to indicate that this is a copy . when this rule is applied to graph @xmath147 ,",
    "only out - links are copied because the pages that link the copied one remain the same , that is , they only have a link to the original page , not to its copy .",
    "the subpage structure is not copied .",
    "note that all black nodes of @xmath147 and @xmath148 are mapped to @xmath100-nodes of @xmath149 and @xmath150 , respectively .        in the general case just presented , the embedding @xmath18 could have a non - local effect on the rewritten object . in the following example , based on category *",
    "set * , the rule simply preserves a single element and @xmath151 is the identity .",
    "if applied to set @xmath2 , its effect is to delete all the elements not matched by @xmath8 , as shown .",
    "we say that this rewrite step is _ non - local _ , because it modifies the complement of the image of @xmath152 in @xmath2 .        in the rest of this section we present a condition on rules that ensures the locality of the rewrite steps .",
    "in order to formulate this condition in the general setting of a category with @xmath25-partial map classifiers , we need to consider a generalisation of the notion of complement of a subset in a set , that we call _ strict complement_. for instance , in category @xmath51 , the strict complement of a subgraph @xmath152 in a graph @xmath2 is the largest subgraph @xmath153 of @xmath2 disjoint from @xmath152 ; thus , the union of @xmath152 and @xmath153 is in general smaller than @xmath2 . intuitively , we will say that an agree rewrite step as in diagram  ( [ eq : agree - rew ] ) is _ local _ if the strict complement of @xmath152 in @xmath2 is preserved , i.e. , if @xmath154 restricts to an isomorphism between @xmath155 and @xmath153 .    for the definitions and results that follow , we assume that category @xmath19 , besides satisfying the conditions listed at the beginning of this section , has a final object  @xmath156 and a _ strict _ initial object @xmath157 ( i.e. , each arrow with target @xmath157 must have  @xmath157 as source ) ; furthermore , the unique arrow from @xmath157 to @xmath156 , that we denote @xmath158 , belongs to @xmath25 . for each object @xmath52 of @xmath19",
    "we will denote by @xmath159 the unique arrow to the final object , and by @xmath160 the unique arrow from the initial object .    for each mono @xmath161 in @xmath25",
    "the _ characteristic arrow _ of @xmath8 is defined as @xmath162 , ( see pullback ( a ) in diagram ( [ pb : sub - class - new ] ) ) .",
    "object @xmath163 is called the _",
    "@xmath25-subobject classifier_. @xmath164|{pb~(c ) } k \\ar@ { > ->}[d]|{{\\phantom{\\big(}n{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } } &   \\ar@{}[rd]|{pb~(a ) } l \\ar@ { > ->}[d]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}{1}_l{\\phantom{\\big ) } } } }   &   { 1}\\ar@ { > ->}[d]^{\\eta_{{1}}}_{{\\mathit{true } } } \\\\",
    "\\ar@{}[rd]|{pb~(d ) }   d \\ar[r]|{{\\phantom{\\big(}g{\\phantom{\\big ) } } } } & \\ar@{}[rd]|{pb~(b ) }   g \\ar[r]|{{\\phantom{\\big(}\\chi_m = \\varphi(m,{1}_l){\\phantom{\\big ) } } } } & t({1 } ) \\\\",
    "d\\setminus k \\ar@{->}[u]|{{\\phantom{\\big(}d\\setminus n{\\phantom{\\big ) } } } } \\ar[r]|(.5){{\\phantom{\\big(}g\\setminus l{\\phantom{\\big ) } } } } & g\\setminus l \\ar@{->}[u]|{{\\phantom{\\big(}g\\setminus m{\\phantom{\\big ) } } } } \\ar[r]|(.6){{\\phantom{\\big(}{1}_{g\\setminus l}{\\phantom{\\big ) } } } } & { 1}\\ar@{->}[u]^{{{\\mathit{false}}}}_{t({!})\\circ   { { \\overline}{\\,!\\ , } } } } \\ ] ]    by exploiting the assumption that @xmath165 and that @xmath157 is strict initial , it can be shown that @xmath166 is isomorphic to @xmath156 , with @xmath167 , and this yields an arrow @xmath168 . in category @xmath80 ( with @xmath25 the family of all injective functions ) arrows @xmath169 and @xmath170 are the coproduct injections of the subobject classifier ( which is a two element set ) , and are also known as @xmath171 and @xmath172 , respectively . in @xmath80 the complement of an injective function @xmath173 can be defined as the pullback of @xmath174 along @xmath172 .",
    "we generalise this to the present setting as follows .",
    "[ def : complement ] let @xmath19 be a category that satisfies the conditions listed at the beginning of section  [ sec : pbcpo ] , has final object @xmath175 , strict initial object @xmath176 , and such that @xmath177 .",
    "let @xmath161 be a mono in @xmath25 , and @xmath178 be its characteristic arrow defined by pullback ( a ) of diagram  ( [ pb : sub - class - new ] ) .",
    "then the _ strict complement of @xmath152 in @xmath2 ( with respect to @xmath8 ) _ is the arrow @xmath179 obtained as the pullback of @xmath180 and @xmath181 , as in square ( b ) of diagram  ( [ pb : sub - class - new ] ) .",
    "furthermore , for each pair of monos @xmath182 and @xmath161 in @xmath25 and for each pair of arrows @xmath183 and @xmath184 such that square  ( c ) of diagram  ( [ pb : sub - class - new ] ) is a pullback , arrow @xmath185 as in square  ( d ) is called the _ strict complement _ of @xmath16 in @xmath154 ( with respect to @xmath142 and @xmath8 ) .    it is easy to check that arrow @xmath186 exists and is uniquely determined by the fact that square  ( b ) is a pullback ; furthermore square  ( d ) is a pullback as well , by decomposition . we will now exploit the notion of strict complement to formalize locality of agree rewriting .    [ def : embspec ]",
    "an agree rule @xmath187 is _ local _ if @xmath188 is such that @xmath189 is an iso .",
    "an agree rewrite step as in diagram  ( [ eq : agree - rew ] ) is _ local _ if arrow @xmath185 is an iso .",
    "the definition of local rewrite steps is as expected , but that of local rules deserves some comments .",
    "essentially , in the first phase of agree rewriting , when building the pullback  ( a ) of diagram  ( [ eq : agree - rew ] ) , the shape of @xmath190 determines the effect of the rule on the strict complement of @xmath152 in @xmath2 , which is mapped by @xmath47 to @xmath191 .",
    "it can be proved that @xmath191 is isomorphic to @xmath192 , therefore if the rule is local we have that @xmath190 is isomorphic to @xmath191 , and this guarantees that the strict complement of @xmath152 in @xmath2 is preserved in the rewrite step .",
    "these considerations provide an outline of the proof of the main result of this section , which is reported in appendix  [ sec : appproofs ] .",
    "[ prop : locality ] let @xmath187 be a local rule .",
    "then , with the notations as in diagram  ( [ eq : agree - rew ] ) , for each match @xmath126 the resulting rewrite step @xmath193 is local .",
    "huge network data sets , like social networks ( describing personal relationships and cultural preferences ) or communication networks ( the graph of phone calls or email correspondents ) become more and more common .",
    "these data sets are analyzed in many ways varying from the study of disease transmission to targeted advertising .",
    "selling network data set to third - parties is a significant part of the business model of major internet companies .",
    "usually , in order to preserve the confidentiality of the sold data set , only `` anonymized '' data is released .",
    "the structure of the network is preserved , but personal identification informations are erased and replaced by random numbers .",
    "this anonymized network may then be subject to further processing to make sure that it is not possible to identify the nodes of the network ( see @xcite for a discussion about re - identification issues ) .",
    "we are going to show how agree rewriting can be used for such anonymization procedure .",
    "of course , due to space limitations we can not deal with a complete example and will focus on the first task of the anonymization process : the creation of a clone of the social network in which only non - sensitive links are copied . we model the following idealized scenario : the administrator of a social network sells anonymized data sets to third - parties so that they can be analyzed without compromising confidentiality .",
    "our graphs are made of four kinds of nodes : customer ( grey nodes ) , administrator of the social network ( white node ) , user of the social network ( black nodes ) and square nodes that model the fact that data will suffer post - processing .",
    "links of the social network can be either public ( black solid ) or private ( dashed  this latter denotes sensitive information that should not be disclosed ) , moreover we use another type of edges ( grey ) , denoting the fact that a node  knows \" , or has access to another node .",
    "the corresponding type graph @xmath194 is shown in figure [ fig_graphs ] .    , graphs @xmath2 and @xmath6,title=\"fig:\",scaledwidth=20.0% ] , graphs",
    "@xmath2 and @xmath6,title=\"fig:\",scaledwidth=55.0% ]    the rule depicted in figure [ fig_anonymizerule ] shows an example that anonymizes a portion of a social network with @xmath195 nodes ( typically portions of a fixed size are sold ) .",
    "graph @xmath196 consists of a clique of all copies of matched black nodes ( denoted by * * ) with public links , and a graph representing the @xmath38 construction applied to the rest of @xmath197 . to enhance readability",
    ", we just indicated that the graph inside the dotted square should be completed according to @xmath38 : a copy of the nodes of the type graph should be added , together with all possible edges that are compatible with the type graph .",
    "this allows the cloning of the subgraph defined by the match limited to public edges . in the right hand side",
    "@xmath198 a new square node is added marking the cloned nodes for post - processing .",
    "the application of this rule to graph @xmath2 in figure [ fig_graphs ] with a match not including the top black node produces graph @xmath6 .",
    "as recalled in the introduction , in the sqpo approach  @xcite a rule is a span @xmath199 and a rewriting step for a match @xmath200 is made of a first phase where the _ final pullback complement _",
    "@xmath9 is constructed , and next a pushout with the right - hand side is performed .",
    "[ def : fpbc ] in diagram  ( [ eq : fpbc ] ) , @xmath201 is a _ final pullback complement _ of @xmath202 if    1 .",
    "the resulting square is a pullback , and 2 .   for each pullback @xmath203 and arrow @xmath204 such that @xmath205",
    ", there is a unique arrow @xmath206 such that @xmath207 and @xmath208 .",
    "@xmath209|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } }     & & k \\ar[ll]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } }      \\ar[dd]|{{\\phantom{\\big(}n{\\phantom{\\big ) } } } }   & & k '    \\ar[ll]|{{\\phantom{\\big(}h{\\phantom{\\big ) } } } }   \\ar[dd]|{{\\phantom{\\big(}e{\\phantom{\\big ) } } } }   \\ar@/_3ex/[llll]|{{\\phantom{\\big(}d{\\phantom{\\big ) } } } }    \\\\ &   \\\\ g    & & d    \\ar[ll]|{{\\phantom{\\big(}a{\\phantom{\\big ) } } } } & & d '    \\ar@{-->}[ll]_{{\\phantom{\\big(}g{\\phantom{\\big ) } } } }   \\ar@/^3ex/[llll]|{{\\phantom{\\big(}f{\\phantom{\\big ) } } } } } \\ ] ]    the next result shows that in a category with a stable system of monos @xmath25 and with @xmath143-partial map classifiers , the final pullback complement of @xmath210 , with @xmath211 , can be obtained by taking the pullback of @xmath212 along @xmath47 .",
    "this means that if the embedding morphism of an agree rule is the partial map classifier of @xmath197 , i.e. , @xmath213 , then the first phase of the agree rewriting algorithm of definition  [ def : pbcpo - rewriting ] actually builds the final pullback complement of the left - hand side of the rule and of the match .",
    "this will allow us to relate the agree approach with others based on the construction of final pullback complements .",
    "[ theorem : sqpo ] let @xmath19 be a category with pullbacks , with a stable system of monos @xmath25 and with an @xmath25-partial map classifier @xmath37 .",
    "let @xmath122 be an arrow in @xmath24 and @xmath126 be a mono in @xmath25 .",
    "consider the naturality square built over @xmath122 on the left of figure  [ fig : fpbcaspb ] , which is a pullback because @xmath40 is cartesian , and let @xmath214 be the pullback of @xmath215 .",
    "then @xmath201 is a final pullback complement of @xmath202 , where @xmath142 is the only arrow making the right triangle commute and the top square a pullback .",
    "@xmath216|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } }      \\ar@ { > ->}[dddd]|{{\\phantom{\\big(}\\eta_l{\\phantom{\\big ) } } } }   & & k \\ar[ll]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } }     \\ar@ { > ->}[dddd]|(.35){{\\phantom{\\big(}\\eta_k{\\phantom{\\big)}}}}|(.5){\\hole }     \\ar@ { > ->}[ddr]|(.35){{\\phantom{\\big(}n{\\phantom{\\big ) } } } } \\\\ & & &   \\\\ & g   \\ar[ddl]|{{\\phantom{\\big(}\\overline{m}{\\phantom{\\big ) } } } }   & & d   \\ar[ddl]|(.35){\\phantom{\\big(}n'\\phantom{\\big ( } }   \\ar[ll]|(.3){{\\phantom{\\big(}a{\\phantom{\\big)}}}}\\\\ & \\\\ t(l )    & & t(k ) \\ar[ll]|{{\\phantom{\\big(}t(l){\\phantom{\\big ) } } } }   } $ ] @xmath217|{{\\phantom{\\big(}d{\\phantom{\\big ) } } } }     \\ar[ddr]|{{\\phantom{\\big(}e{\\phantom{\\big ) } } } }   \\ar[dl]|{{\\phantom{\\big(}h{\\phantom{\\big ) } } } }    \\\\",
    "l \\ar@ { > ->}[ddr]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } }      \\ar@ { > ->}[dddd]|{{\\phantom{\\big(}\\eta_l{\\phantom{\\big ) } } } }   & & k \\ar[ll]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } }     \\ar@ { > ->}[dddd]|(.23){{\\phantom{\\big(}\\eta_k{\\phantom{\\big)}}}}|(.4){\\hole}|(.53){\\hole }     \\ar@ { > ->}[ddr]|(.35){{\\phantom{\\big(}n{\\phantom{\\big)}}}}|(.63){\\hole } \\\\ & & & & d '    \\ar@{ .. >}[dl]|{{g } }    \\ar@/_1ex/[dlll]|{{\\phantom{\\big(}f{\\phantom{\\big ) } } } }    \\ar@/^5ex/[dddll]|{\\phantom{\\big(}\\varphi(e , h)\\phantom{\\big ( } }    \\\\ & g   \\ar[ddl]|{{\\phantom{\\big(}\\overline{m}{\\phantom{\\big ) } } } }   \\ar@{}[ddr]|{(1 ) }     & & d   \\ar[ddl]|(.35){\\phantom{\\big(}n'\\phantom{\\big ( } }   \\ar[ll]|(.3){{\\phantom{\\big(}a{\\phantom{\\big)}}}}\\\\ & \\\\ t(l )    & & t(k ) \\ar[ll]|{{\\phantom{\\big(}t(l){\\phantom{\\big ) } } } }   } $ ]    by the decomposition property we have that @xmath218 is a pullback complement of @xmath219 , and @xmath220 by stability .",
    "we have to show that the pullback complement is final , i.e.  that given a pullback @xmath203 and an arrow @xmath204 such that @xmath205 , as shown on the right of figure  [ fig : fpbcaspb ] , there is a unique arrow @xmath206 such that @xmath221 and @xmath207 .",
    "we present here the _ existence _ part , while the proof of _ uniqueness _ is in appendix [ sec : appproofs ] .",
    "note that @xmath222 is in @xmath25 by stability . by the properties of the @xmath25-partial map classifier @xmath38",
    ", there is a unique arrow @xmath223 such that @xmath224 and the square is a pullback",
    ". we will show below that @xmath225 , hence by the universal property of the pullback @xmath226 there is a unique arrow @xmath206 such that @xmath227 and @xmath207 .",
    "it remains to show that @xmath221 : by exploiting again pullback @xmath226 , it is sufficient to show that ( i ) @xmath228 and ( ii ) @xmath229 .",
    "in fact we have , by simple diagram chasing :    \\(i ) @xmath230    \\(ii ) @xmath231    we still have to show that @xmath225 .",
    "this follows by comparing the following two diagrams , where all squares are pullbacks , either by the statements of section  [ sec : preliminaries ] or ( the last to the right ) by assumption .",
    "clearly , also the composite squares are pullbacks , but then the bottom arrows must both be equal to @xmath232 , as in equation  ( [ pb : pmc ] ) .",
    "therefore we conclude that @xmath233 .",
    "@xmath234|{{\\phantom{\\big(}\\eta_l{\\phantom{\\big ) } } } } \\ar@{}[rd]|{pb~(\\ref{pb : eta } ) } &   k \\ar[l]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } } \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_k{\\phantom{\\big ) } } } } \\ar@{}[rd]|{pb~(\\ref{pb : pmc } ) } &   k ' \\ar[l]|{{\\phantom{\\big(}h{\\phantom{\\big ) } } } } \\ar@ { > ->}[d]|{{\\phantom{\\big(}e{\\phantom{\\big ) } } } } \\ar@/_4ex/[ll]|{{\\phantom{\\big(}d{\\phantom{\\big ) } } } }   \\\\",
    "t(l ) &   t(k ) \\ar[l]|{{\\phantom{\\big(}t(l){\\phantom{\\big ) } } } } &   d ' \\ar[l]|(.5){{\\phantom{\\big(}\\varphi(e , h){\\phantom{\\big ) } } } } } \\quad\\quad \\xymatrix@c=4pc@r=3pc { l \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_l{\\phantom{\\big ) } } } } \\ar@{}[rd]|{pb~(\\ref{pb : olm } ) } &   l \\ar[l]|{{\\phantom{\\big(}id_l{\\phantom{\\big ) } } } } \\ar@ { > ->}[d]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } } &   k ' \\ar[l]|{{\\phantom{\\big(}l \\circ h{\\phantom{\\big ) } } } } \\ar@ { > ->}[d]|{{\\phantom{\\big(}e{\\phantom{\\big ) } } } } \\ar@/_4ex/[ll]|{{\\phantom{\\big(}d{\\phantom{\\big ) } } } }   \\\\",
    "t(l ) &   g \\ar[l]|{{\\phantom{\\big(}{\\overline{m}}{\\phantom{\\big ) } } } } &   d ' \\ar[l]|(.5){{\\phantom{\\big(}f{\\phantom{\\big)}}}}}\\ ] ]    the statement of theorem  [ theorem : sqpo ] can be formulated equivalently in a more abstract way , as the fact that composing functor @xmath38 with a pullback along @xmath47 one gets a functor that is right adjoint to the functor taking pullbacks along @xmath8 .",
    "this alternative presentation and its proof are presented in appendix  [ app : abstract ] .",
    "using theorem  [ theorem : sqpo ] it is easy to show that the agree approach is a conservative extension of the sqpo approach , because the two coincide if the embedding of the agree rule is the arrow injecting @xmath197 into its partial map classifier .    [",
    "theorem : agreevssqpo ] let @xmath19 be a category with all pullbacks , with @xmath25-partial map classifiers @xmath41 for a stable system of monos @xmath25 , and with pushouts along arrows in @xmath25 .",
    "let @xmath235 be a rule and @xmath161 be a match in @xmath25 .",
    "then @xmath236 in words , the application of rule @xmath7 to match @xmath8 using the sqpo approach has exactly the same effect of applying to @xmath8 the same rule enriched with the embedding @xmath213 using the agree approach .    since the embedding of the rule is arrow @xmath237 , phase ( a ) of agree rewriting ( definition  [ def : pbcpo - rewriting ] ) is exactly the construction that is shown , in theorem  [ theorem : sqpo ] , to build @xmath201 as a final pullback complement of @xmath202 , therefore it coincides with the construction of the left square of the sqpo approach . the second phase , i.e.  the construction of the pushout of @xmath238 and @xmath239 is identical for both approaches by definition .",
    "we now show that agree rewriting allows to simulate rewriting with polarized cloning on graphs , which is defined in @xcite by using the polarized graphs of definition  [ def : pol - cat ] .",
    "polarization is used in rewriting to control the copies of edges not matched but incident to the matched nodes .",
    "[ defi : pol - depol ] the _ underlying graph _ of a polarized graph @xmath65 is @xmath52 .",
    "this defines a functor @xmath240 which has both a right- and a left - adjoint functor denoted @xmath241 and @xmath242 , resp .",
    ", i.e.  @xmath243 .",
    "functor @xmath241 maps each graph @xmath52 to the polarized graph _ induced by _",
    "@xmath52 , defined as @xmath244 , and each graph morphism @xmath245 to itself ; it is easy to check that @xmath246 is a _ strict _ polarized graph morphism .",
    "furthermore we have that @xmath247 , and we denote the unit of adjunction @xmath248 as @xmath249 , thus @xmath250 .",
    "functor @xmath251 maps each graph @xmath52 to the polarized graph @xmath252 , where a node is in @xmath253 ( resp . in @xmath254 ) if and only if it has at least one outgoing ( resp .",
    "incoming ) edge in @xmath52 .",
    "since @xmath255 has a left adjoint , we have that @xmath255 preserves limits and in particular pullbacks .",
    "the category @xmath73 has final pullback complements along strict monos : their construction is given in ( * ? ? ? * appendix ) .",
    "[ defi : psqpo ] a _ psqporewrite rule _",
    "@xmath7 is made of a span of graphs @xmath256 and a polarized graph @xmath257 with underlying graph @xmath197 .",
    "a _ psqpomatch _ of the psqporewrite rule @xmath7 is a mono @xmath258 in @xmath51 .",
    "a _ psqporewriting step _",
    "@xmath259 is constructed as follows :    1 .",
    "the left - hand - side @xmath16 of the rule @xmath7 gives rise to a morphism @xmath260 in @xmath73 .",
    "the match @xmath8 gives rise to a strict mono @xmath261 in @xmath73 .",
    "then @xmath262 is constructed as the final pullback complement of @xmath263 in category @xmath73 .",
    "2 .   since @xmath264",
    ", we get @xmath265 in @xmath51 .",
    "then @xmath266 is built as the pushout of @xmath267 in category @xmath51 .",
    "recall that , as observed in sect .",
    "[ sect : examples - classifiers ] , category @xmath73 has an @xmath111-partial map classifier @xmath112 . this will be exploited in the next result .",
    "[ theorem : psqpo ] let @xmath7 be a psqporule made of span @xmath199 and polarized graph @xmath257 . consider the component on @xmath114 of the natural transformation @xmath268 , and let @xmath269 and @xmath270 , thus @xmath151 .",
    "furthermore , let @xmath271 be a mono",
    ". then @xmath272    the first phase of psqpo rewriting consists of building the final pullback complement of @xmath273 in category @xmath73 . according to theorem  [ theorem : sqpo ] ,",
    "since @xmath274 is strict such final pullback complement can be obtained as the top square in the diagram below to the left , where both squares are pullbacks in @xmath73 .",
    "the second phase consists of taking the pushout of morphisms @xmath239 and @xmath275 in @xmath51 .    by applying functor @xmath255 to the left diagram",
    "we obtain the diagram below to the right in @xmath51 , where both squares are pullbacks because @xmath255 preserves limits .",
    "in fact , recall that @xmath276 , that @xmath277 and that @xmath278 ; the fact that @xmath279 can be checked easily by comparing the construction of the ( @xmath280-)partial map classifiers in @xmath51 and in @xmath73 . @xmath281|{pb } { \\mathrm{pol}}(l ) \\ar@ { > ->}[d]^{{\\mathrm{pol}}(m ) }     \\ar@ { > ->}@/_4ex/[dd]_(.6){\\eta_{{\\mathrm{pol}}(l)}}^(.6){= } &   { \\mathbb{k } } \\ar[l]_{{\\widehat}{l } } \\ar@ { > ->}[d]_{n }       \\ar@ { > ->}@/^4ex/[dd]^(.6){\\eta_{{\\mathbb{k}}}}_(.6){= } \\\\ \\ar@{}[dr]|{pb } { \\mathrm{pol}}(g ) \\ar[d]^{{\\overline}{{\\mathrm{pol}}(m ) } } &     { \\mathbb{d } } \\ar[l]_{g } \\ar[d]_{q={\\overline{n } } } \\\\     { \\mathbb{t}}({\\mathrm{pol}}(l ) ) &     { \\mathbb{t}}({\\mathbb{k } } ) \\ar[l]^{{\\mathbb{t}}({\\widehat}{l } ) } \\\\ }   \\qquad   \\xymatrix@c=4pc@r=1.3pc { \\ar@{}[dr]|{pb } l \\ar@ { > ->}[d]^{m }     \\ar@ { > ->}@/_4ex/[dd]_(.6){\\eta_{l}}^(.6){= } &   k \\ar[l]_{l } \\ar@ { > ->}[d]|{{\\mathrm{depol}}(n ) }       \\ar@ { > ->}@/^6ex/[dd]^(.6){t}_(.6){= } \\\\ \\ar@{}[dr]|{pb } g \\ar[d]^{{\\overline{m } } } &     { \\mathrm{depol}}({\\mathbb{d } } )   \\ar[l ] \\ar[d ] \\\\",
    "t(l ) &     t_k \\ar[l ] \\\\ } \\ ] ]    now , the first phase of agree rewriting with rule @xmath282 and match @xmath8 consists of taking the pullback in @xmath51 of @xmath47 and the only arrow @xmath283 that makes the outer square of the right diagram a pullback .",
    "this arrow is precisely @xmath284 , and therefore the pullback is exactly the lower square of the right diagram .",
    "the second phase consists of taking the pushout of @xmath239 and of the only arrow @xmath285 that makes the diagram commute ; but @xmath286 is such an arrow , thus the pushout is the same computed by the psqpo approach and this concludes the proof .",
    "in this paper we presented the basic definitions of a new approach to algebraic graph rewriting , called agree .",
    "we showed that this approach subsumes other algebraic approaches like sqpo ( sesqui - pushout ) with injective matches ( and therefore dpo and spo under mild restrictions , see  ( * ? ? ? * propositions  12 and  14 ) ) , as well as its polarised version psqpo .",
    "the main feature provided by this approach is the possibility , in a rule , of specifying which edges shall be copied as a side effect of the copy of a node .",
    "this feature offers new facilities to specify applications in which copy of nodes shall be done in an unknown context , and thus it is not possible to describe in the left - hand side of the rule all edges that shall be copied together with the node . as an example , the anonymization of parts of a social network was described in sect .",
    "[ sec : examples ] .",
    "the idea of controlling explicitly in the rule how the right - hand side should be embedded in the context graph is not new in graph rewriting , as it is a standard ingredient of the algorithmic approaches .",
    "for example , in node label controlled ( nlc ) graph rewriting and its variations  @xcite productions are equipped with _ embedding rules _ , which allow one to specify how the right - hand side of a production has to be embedded in the context graph obtained by deleting the corresponding left - hand side .",
    "the name of our approach is reminiscent of those older ones .",
    "adaptive star grammars @xcite is another framework where node cloning is performed by means of rewrite rules of the form @xmath287 where graph @xmath288 has a shape of a star and @xmath198 is a graph .",
    "cloning operation , see ( * ? ? ?",
    "* definitions  5 and  6 ) , shares the same restrictions as the sesqui - pushout approach : nodes are cloned with all their incident edges .    in @xcite a general framework for graph transformations in span - categories , called _ contextual graph rewriting _ , briefly cr , has been proposed . using cr , thanks to the notions of rule and of match that are more elaborated than in other approaches , it is possible to specify cloning as in agree rewriting , and even more general transformations : e.g. , one may create multiple copies of nodes / edges as a side effect , not only when cloning items .",
    "the left - hand sides of cr rules allow to specify elements that must exist for the rule to be applicable , called @xmath106 , and also a context for @xmath106 , i.e.  a part of the graph that will be universally quantified when the rule is applied , called @xmath289 .",
    "a third component plays the role of embedding the context @xmath289 in the rest of the graph .",
    "the rule for copying a web page shown in figure  [ fig_webpagecopy ] could be specified using cr as rule @xmath290 , where @xmath291 and @xmath292 . finding a match for",
    "a rule in a graph @xmath2 involves finding a smallest subgraph of @xmath2 that contains @xmath106 and its complete context .",
    "thus , even if cr is more general , our approach enhances the expressiveness of classical algebraic approaches with a form of controlled cloning using simpler and possibly more natural rules .",
    "bauderon s pullback approach @xcite is also related to our proposal .",
    "it was proposed as an algebraic variant of the above mentioned nlc and ed - nlc algorithmic approaches .",
    "bauderon s approach is similar , in part , to the pullback construction used in our first phase of a rewriting step , but a closer analysis is needed and is planned as future work .",
    "we also intend to explore if there are relevant applications where agree rewriting in its full generality ( i.e. , with possibly non - local rules ) could be useful",
    ".    concerning the applicability of our approach to other structures , in practice the requirement of existence of partial maps classifiers looks quite demanding .",
    "agree rewriting works in categories of typed / colored graphs , which are used in several applications , because they are slice categories over graphs , and thus toposes .",
    "but even more used are the categories of attributed graphs @xcite , which are not toposes . under which conditions our approach can be extended or adapted to such structures",
    "is an interesting topic that we intend to investigate .",
    "we are grateful to the anonymous reviewers of former versions of this paper for the insightful and constructive criticisms .",
    "10 [ 1]`#1 `    bauderon , m. , jacquet , h. : pullback as a generic graph rewriting mechanism . applied categorical structures 9(1 ) , 6582 ( 2001 )    cockett , j. , lack , s. : restriction categories i : categories of partial maps .",
    "theoretical computer science 270(12 ) , 223259 ( 2002 )    cockett , j. , lack , s. : restriction categories ii : partial map classification .",
    "theoretical computer science 294(12 ) , 61102 ( 2003 )    corradini , a. , duval , d. , echahed , r. , prost , f. , ribeiro , l. : agree - algebraic graph rewriting with controlled embedding . in : parisi - presicce , f. , westfechtel , b. ( eds . ) graph transformations , icgt 2015 .",
    "lncs , vol . 9151 .",
    "springer ( 2015 )    corradini , a. , heindel , t. , hermann , f. , knig , b. : sesqui - pushout rewriting . in : corradini ,",
    "a. , ehrig , h. , montanari , u. , ribeiro , l. , rozenberg , g. ( eds . ) graph transformations , icgt 2006 .",
    "lncs , vol . 4178 , pp .",
    "3045 . springer ( 2006 )    corradini , a. , montanari , u. , rossi , f. , ehrig , h. , heckel , r. , lwe , m. : algebraic approaches to graph transformation - part i : basic concepts and double pushout approach . in : rozenberg @xcite , pp",
    ". 163246    drewes , f. , hoffmann , b. , janssens , d. , minas , m. : adaptive star grammars and their languages .",
    "411(34 - 36 ) , 30903109 ( 2010 )    duval , d. , echahed , r. , prost , f. : graph rewriting with polarized cloning .",
    "corr abs/0911.3786 ( 2009 ) , http://arxiv.org/abs/0911.3786    duval , d. , echahed , r. , prost , f. : graph transformation with focus on incident edges . in : ehrig , h. , engels , g. , kreowski , h. , rozenberg , g. ( eds . ) graph transformations , icgt 2012 .",
    "lncs , vol .",
    "7562 , pp .",
    "springer ( 2012 )    duval , d. , echahed , r. , prost , f. , ribeiro , l. : transformation of attributed structures with cloning . in : gnesi ,",
    "s. , rensink , a. ( eds . ) fundamental approaches to software engineering , fase 2014 .",
    "lncs , vol . 8411 , pp .",
    "310324 . springer ( 2014 )    dyckhoff , r. , tholen , w. : exponentiable morphisms , partial products and pullback complements",
    ". journal of pure and applied algebra 49(1 - 2 ) , 103116 ( 1987 )    echahed , r. : inductively sequential term - graph rewrite systems . in : ehrig , h. , heckel , r. , rozenberg , g. , taentzer , g. ( eds . ) graph transformations , icgt 2008 .",
    "lncs , vol . 5214 , pp .",
    "springer ( 2008 )    ehrig , h. , heckel , r. , korff , m. , lwe , m. , ribeiro , l. , wagner , a. , corradini , a. : algebraic approaches to graph transformation - part ii : single pushout approach and comparison with double pushout approach . in : rozenberg @xcite , pp .",
    "247312    ehrig , h. , pfender , m. , schneider , h.j . : graph - grammars : an algebraic approach . in : 14th annual symposium on switching and automata theory , iowa city , iowa ,",
    "usa , october 15 - 17 , 1973 . pp .",
    "ieee computer society ( 1973 )    engelfriet , j. , rozenberg , g. : node replacement graph grammars . in : rozenberg @xcite , pp .",
    "194    hay , m. , miklau , g. , jensen , d. , towsley , d.f . , li , c. : resisting structural re - identification in anonymized social networks .",
    "vldb j. 19(6 ) , 797823 ( 2010 )    lwe , m. : algebraic approach to single - pushout graph transformation .",
    "109(1&2 ) , 181224 ( 1993 )    lwe , m. : graph rewriting in span - categories . in : graph transformations , icgt 2010 .",
    "lncs , vol . 6372 , pp .",
    "springer ( 2010 )    mitchell , m. , oldham , j. , samuel , a. : advanced linux programming .",
    "landmark series , new riders ( 2001 )    rozenberg , g. ( ed . ) : handbook of graph grammars and computing by graph transformations , volume 1 : foundations .",
    "world scientific ( 1997 )",
    "this section is devoted to the proof of proposition  [ prop : locality ] and to part of the proof of theorem  [ theorem : sqpo ] .",
    "let @xmath19 be a category satisfying all conditions of definition  [ def : complement ] , where @xmath91 is an @xmath25-partial map classifier .",
    "let us start with a technical lemma .",
    "[ lemma : locality ] object @xmath293 is isomorphic to @xmath166 for each @xmath152 , and furthermore @xmath294 is an iso for each @xmath295 .    _",
    "proof.__first , let us look at the diagram to the right where @xmath152 is any object . in this diagram the top",
    "square is a pullback of shape ( [ pb : eta ] ) and the bottom square is a pullback because , up to the isomorphism between @xmath156 and @xmath166 we may replace @xmath296 by @xmath297 and @xmath298 by @xmath299 , so that the bottom square becomes the image by @xmath38 of a pullback square .",
    "thus , @xmath293 is isomorphic to @xmath166 and , up to this iso , @xmath300 is @xmath301 .",
    "now , let us look at the diagram to the right where @xmath295 is any arrow . in this diagram the top",
    "square is a pullback of shape ( [ pb : eta ] ) and the bottom square is a pullback because it is the image by @xmath38 of a pullback square .",
    "thus , @xmath302 is an iso .",
    "@xmath303|{pb }   l \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_l{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}{1}_l{\\phantom{\\big ) } } } } & { 1}\\ar@ { > ->}[d]|{{\\phantom{\\big(}{\\mathit{true}}{\\phantom{\\big ) } } } }   \\\\",
    "\\ar@{}[rd]|{pb }   t(l ) \\ar[r]|{{\\phantom{\\big(}t({1}_l){\\phantom{\\big ) } } } } &   t({1 } ) \\\\    t({0 } ) \\ar@ { > ->}[u]|{{\\phantom{\\big(}t({0}_l){\\phantom{\\big ) } } } } \\ar[r]|(.6){{\\phantom{\\big(}{1}_{t({0})}{\\phantom{\\big ) } } } } & { 1}\\ar@ { > ->}[u]|{{\\phantom{\\big(}{\\mathit{false}}{\\phantom{\\big ) } } } } \\\\ } $ ]    @c=4.0pc@r=1.8pc @[dr]|pb k @ > ->[d]|_k |l & l @ > ->[d]|_l",
    "+ @[dr]|pb t(k ) |t(l ) & t(l ) + t(0 ) @ >",
    "->[u]|t(0_k ) |_t(0 ) & t(0 ) @ >",
    "->[u]|t(0_l ) +    let us recall the statement of the proposition , for the readers conveniencelet @xmath187 be a local rule . then , with the notations as in diagram  ( [ eq : agree - rew ] ) , for each match @xmath126 the resulting rewrite step @xmath193 is local .",
by definition  [ def : embspec ] we have to show that if @xmath188 is such that @xmath189 is an iso , i.e.  the rule is local , then arrow @xmath185 is an iso as well .",
    "consider the diagram in figure  [ fig : sm ] , where the left part depicts the first phase of an agree rewriting step , together with several arrows to the @xmath25-subobject classifier @xmath304 .",
    "the right part is obtained by pulling back ( part of ) the left part along @xmath305 , obtaining the depicted strict complements ( see definition  [ def : embspec ] ) .",
    "now , in triangle @xmath306 arrow @xmath307 is iso by hypothesis , and @xmath308 is iso by lemma  [ lemma : locality ] .",
    "therefore @xmath309 is an iso as well .",
    "furthermore the square around @xmath175 is a pullback , because it is obtained by pulling back ( along @xmath310 ) the pullback around @xmath304 , and therefore @xmath311 is an iso .",
    "@xmath312|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } }    \\ar@/_3ex/[dddd]|{{\\phantom{\\big(}\\eta_l{\\phantom{\\big ) } } } }    & & k \\ar[ll]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } }   \\ar@ { > ->}[dd]|{{\\phantom{\\big(}n{\\phantom{\\big ) } } } } \\ar@ { > ->}@/_3ex/[dddd]|(.2){{\\phantom{\\big(}t{\\phantom{\\big ) } } } } \\ar@ { > ->}@/^4ex/[dddddd]|(.49){{\\phantom{\\big(}\\eta_k{\\phantom{\\big ) } } } } \\\\ & & & { g{\\setminus}l } \\ar[dd]|(.33){\\hole}|{{\\phantom{\\big(}{\\overline{m}}{\\setminus}id_l{\\phantom{\\big)}}}}|(.65){\\hole } \\ar@{-->}[llld]|(.3)\\hole|(.37)\\hole|(.45)\\hole|(.6){{\\phantom{\\big(}g{\\setminus}m{\\phantom{\\big ) } } } }   \\ar@{ .. >}[rd]|\\hole & & { d{\\setminus}k } \\ar[dd]|{{\\phantom{\\big(}n'{\\setminus}id_k{\\phantom{\\big ) } } } } \\ar@{-->}[llld]|(.55){{\\phantom{\\big(}d{\\setminus}n{\\phantom{\\big ) } } } }   \\ar@{ .. >}[ld ]   \\ar[ll]|{{\\phantom{\\big(}g { \\setminus}l{\\phantom{\\big ) } } } } \\\\ g",
    "\\ar@{ .. >}[rd]|{{\\phantom{\\big(}\\chi_m{\\phantom{\\big ) } } } } \\ar[dd]|{{\\phantom{\\big(}{\\overline{m}}{\\phantom{\\big ) } } } } & & d \\ar[dd]|{{\\phantom{\\big(}n'{\\phantom{\\big ) } } } }   \\ar@{ .. >}[ld]|{{\\phantom{\\big(}\\chi_n{\\phantom{\\big ) } } } } \\ar[ll]|(.13)\\hole|{{\\phantom{\\big(}g{\\phantom{\\big ) } } } }   & &   1   \\ar@{=>}[llld]|(.45){{\\phantom{\\big(}\\mathit{false}{\\phantom{\\big)}}}}|(.59)\\hole|(.68)\\hole|(.75)\\hole \\\\   & t(1 )   &   & { t(l ) { \\setminus}l }   \\ar@{ .. >}[ru ] \\ar@{-->}[llld]|(.26)\\hole|(.37)\\hole|(.42)\\hole|(.53)\\hole|(.62)\\hole   & &    { t_k { \\setminus}k }    \\ar[dd]|{{\\phantom{\\big(}{\\overline{t}}{\\setminus}id_k{\\phantom{\\big ) } } } } \\ar@{-->}[llld]|(.7){{\\phantom{\\big(}t_k{\\setminus}t{\\phantom{\\big ) } } } }   \\ar@{ .. >}[lu ]   \\ar[ll]|{{\\phantom{\\big(}l ' { \\setminus}l{\\phantom{\\big)}}}}\\\\   t(l ) \\ar@{ .. >}[ru]|{{\\phantom{\\big(}t(1_l){\\phantom{\\big ) } } } } & & t_k   \\ar[ll]|{{\\phantom{\\big(}l ' = \\varphi(t , l){\\phantom{\\big ) } } } }   \\ar@{ .. >}[ul]|(.4){{\\phantom{\\big(}\\chi_t{\\phantom{\\big ) } } } } \\ar[dd]|{{\\phantom{\\big(}{\\overline{t}}{\\phantom{\\big ) } } } } \\\\ & & & \\ar@{}[uurr]|(.67){(\\ddagger ) }   & &   t(k ) { \\setminus}k   \\ar[uull]|{{\\phantom{\\big(}t(l){\\setminus}l{\\phantom{\\big)}}}}|(.77)\\hole   \\ar@{-->}[llld]|{{\\phantom{\\big(}t(k){\\setminus}\\eta_k{\\phantom{\\big ) } } } }   \\ar@{ .. >}[uuul]|(.61)\\hole|(.68)\\hole \\\\   & & t(k ) \\ar@{ .. >}[uuul]|{{\\phantom{\\big(}t(1_k){\\phantom{\\big ) } } } } \\ar[uull]|{{\\phantom{\\big(}t(l){\\phantom{\\big ) } } } }    } \\ ] ]    let as redraw the right diagram of figure  [ fig : fpbcaspb ] for the reader s convenience , enriched with some additional information .",
    "@xmath313|{{\\phantom{\\big(}v{\\phantom{\\big ) } } } } \\ar@{ .. >}@/^3ex/[dddr]|{{\\phantom{\\big(}w{\\phantom{\\big ) } } } } \\ar@{ .. >}[d]_z \\ar@<0ex>@{}[ddl]|(.4){{\\ensuremath{\\langle6\\rangle } } } \\ar@<0ex>@{}[dddr]|(.4){{\\ensuremath{\\langle7\\rangle}}}\\\\ & & & k '    \\ar@/_2ex/[dlll]|{{\\phantom{\\big(}d{\\phantom{\\big ) } } } }    \\ar@<1ex>@{}[dlll]|{{\\ensuremath{\\langle1\\rangle } } }     \\ar[ddr]|{{\\phantom{\\big(}e{\\phantom{\\big ) } } } }   \\ar[dl]|{{\\phantom{\\big(}h{\\phantom{\\big ) } } } }      \\ar@<0ex>@{}[ddd]|{{\\ensuremath{\\langle2\\rangle } } } \\\\",
    "l \\ar@ { > ->}[ddr]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } }      \\ar@ { > ->}[dddd]|{{\\phantom{\\big(}\\eta_l{\\phantom{\\big ) } } } }   & & k \\ar[ll]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } }     \\ar@ { > ->}[dddd]|(.23){{\\phantom{\\big(}\\eta_k{\\phantom{\\big)}}}}|(.4){\\hole}|(.53){\\hole }     \\ar@ { > ->}[ddr]|(.35){{\\phantom{\\big(}n{\\phantom{\\big)}}}}|(.63){\\hole } \\\\ & & & & d '    \\ar@{ .. >}[dl]|{{g } }    \\ar@/_1ex/[dlll]|{{\\phantom{\\big(}f{\\phantom{\\big ) } } } }    \\ar@/^3ex/[dddll]|{\\phantom{\\big(}\\varphi(e , h)\\phantom{\\big ( } }     \\ar@/^13ex/[dddllll]|{\\phantom{\\big(}\\varphi(e , d)\\phantom{\\big ( } }      \\ar@<1ex>@{}[dlll]|{{\\ensuremath{\\langle3\\rangle } } }    \\ar@<1ex>@{}[dddll]|(.4){{\\ensuremath{\\langle5\\rangle}}}\\\\ & g   \\ar[ddl]|{{\\phantom{\\big(}\\overline{m}{\\phantom{\\big ) } } } }   \\ar@{}[ddr]|{{\\ensuremath{\\langle4\\rangle } } }     & & d   \\ar[ddl]|(.35){\\phantom{\\big(}n'\\phantom{\\big ( } }   \\ar[ll]|(.3){{\\phantom{\\big(}a{\\phantom{\\big)}}}}\\\\ & \\\\ t(l )    & & t(k ) \\ar[ll]|{{\\phantom{\\big(}t(l){\\phantom{\\big ) } } } }   } \\ ] ] we have to prove that the arrow @xmath314 , that was shown to exists in the first part of the proof , is the only arrow that satisfies @xmath315 and @xmath316 .",
    "suppose indeed that @xmath317 is another arrow such that @xmath318 and @xmath319 . since @xmath320 is a pullback , in order to show that @xmath321 it is sufficient to show that @xmath322 , because commutativity of @xmath323 and @xmath324 uniquely determines a mediating arrow @xmath325 .",
    "to show @xmath322 , recall that by the properties of the @xmath25-partial map classifier @xmath37 there is a unique arrow @xmath223 such that @xmath224 and the square is a pullback .",
    "therefore it is sufficient to show that @xmath326 is a pullback .",
    "first , it commutes , as @xmath327 .",
    "next , let @xmath328 be such that @xmath329 .",
    "we have to show that there is a unique @xmath330 such that @xmath331 and @xmath332 . for _ existence",
    "_ , an arrow @xmath330 is determined by exploiting the pullback @xmath333 ( it is a pullback again by the properties of @xmath37 ) .",
    "in fact we have @xmath334 .",
    "thus there is an arrow @xmath330 such that both @xmath335 and @xmath336 hold .",
    "it remains to show @xmath337 , i.e.  that @xmath338 . by exploiting pullback @xmath339 , it is sufficient to show that ( i ) @xmath340 and ( ii ) @xmath341 .",
    "in fact , we have ( i ) @xmath342 , and ( ii ) @xmath343 .",
    "finally , the _ uniqueness _ of @xmath330 follows by the observation that commutativity of @xmath337 and @xmath335 uniquely determines a mediating morphism to @xmath344 regarded as pullback object of @xmath345 .",
    "this appendix is dedicated to a more abstract , equivalent presentation of the statement of theorem  [ theorem : sqpo ] and of its proof . by exploiting the characterization of the final pullback complement as an adjoint functor",
    ", we get a proof which hides some diagram chasing by using general properties of partial map classifiers and adjunctions .",
    "first we state a lemma about decomposing the arrow @xmath97 , then we recall the definitions of slice categories and pullback functors , and finally we get a new point of view on theorem  [ theorem : sqpo ] .",
    "[ lemma : mf ] let @xmath19 be a category with pullbacks and with an @xmath346-partial map classifier @xmath37 for a stable system of monos @xmath346 . for each @xmath25-partial map @xmath30 , with @xmath31 , we have @xmath347 . if in addition @xmath27 is the pullback of some @xmath348 with @xmath349 in @xmath25 , then @xmath350 .    for the first point",
    ", the left diagram below is composed of two pullbacks of shape  ( [ pb : olm ] ) and  ( [ pb : eta ] ) , respectively , therefore it is a pullback . since it has shape  ( [ pb : pmc ] ) , we conclude that @xmath351 .",
    "@xmath352|{pb~(\\ref{pb : olm } ) } x \\ar@ { > ->}[d]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}{\\mathit{id}}_x{\\phantom{\\big ) } } } } &     \\ar@{}[rd]|{pb~(\\ref{pb : eta } ) } x \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_x{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}f{\\phantom{\\big ) } } } } &     y \\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_y{\\phantom{\\big ) } } } } \\\\   z \\ar[r]|{{\\phantom{\\big(}{\\overline{m}}{\\phantom{\\big ) } } } }   \\ar@{-->}@/_3ex/[rr]|{{\\phantom{\\big(}\\varphi(m , f){\\phantom{\\big ) } } } }    &     t(x ) \\ar[r]|{{\\phantom{\\big(}t(f){\\phantom{\\big ) } } } } &     t(y ) } \\qquad \\xymatrix@c=3pc { \\ar@{}[rd]|{pb } x \\ar@ { > ->}[d]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}f{\\phantom{\\big ) } } } } &     \\ar@{}[rd]|{pb~(\\ref{pb : olm } ) } y \\ar@ { > ->}[d]|{{\\phantom{\\big(}n{\\phantom{\\big ) } } } } \\ar[r]|{{\\phantom{\\big(}{\\mathit{id}}_x{\\phantom{\\big ) } } } } &     y",
    "\\ar@ { > ->}[d]|{{\\phantom{\\big(}\\eta_y{\\phantom{\\big ) } } } } \\\\   z \\ar[r]|{{\\phantom{\\big(}g{\\phantom{\\big ) } } } } \\ar@{-->}@/_3ex/[rr]|{{\\phantom{\\big(}\\varphi(m , f){\\phantom{\\big ) } } } } &     w \\ar[r]|{{\\phantom{\\big(}{\\overline{n}}{\\phantom{\\big ) } } } } &     t(y ) } \\ ] ] for the second point , similarly , the right diagram above is the composition of a pullback of shape  ( [ pb : olm ] ) and of the left square that is pullback by assumption , thus it is a pullback . since it has shape  ( [ pb : pmc ] ) , we can conclude that @xmath353 .    for each object @xmath52 in a category @xmath19 , the _ slice category _ over @xmath52 is denoted @xmath104 : its objects are the arrows @xmath354 in @xmath19 and an arrow @xmath355 in @xmath104 , with @xmath356 and @xmath357 in @xmath19 , is an arrow @xmath358 in @xmath19 such that @xmath359 .",
    "for each endofunctor @xmath360 and each object @xmath52 in @xmath19 , let us still denote by @xmath361 the functor @xmath362 which maps each object @xmath85 of @xmath104 to @xmath363 and each arrow @xmath355 of @xmath104 to @xmath364 .    for each arrow @xmath365 in a category",
    "@xmath19 with pullbacks , the _ pullback functor _ associated with @xmath8 is denoted @xmath366 ; on objects , it maps each @xmath34 to @xmath367 such that the square below on the left is a pullback square ; on arrows , using the decomposition property of pullbacks , it maps each @xmath368 to the unique @xmath369 , where @xmath370 and @xmath371 , such that @xmath372 is a pullback of @xmath373 ( below on the right ) .",
    "in fact , `` the '' pullback functor is defined only up to isomorphism , but this will not raise any problem . @xmath374|{pb } y \\ar[r]|{{\\phantom{\\big(}f{\\phantom{\\big ) } } } } \\ar[d]|{{\\phantom{\\big(}n{\\phantom{\\big ) } } } } & x \\ar[d]|{{\\phantom{\\big(}m{\\phantom{\\big ) } } } } \\\\ w \\ar[r]|{{\\phantom{\\big(}h{\\phantom{\\big ) } } } } & z \\\\   }",
    "\\qquad   \\qquad   \\xymatrix@c=1.5pc@r=1pc {   y_1 \\ar[rrr]|(.5){{\\phantom{\\big(}f_1{\\phantom{\\big ) } } } } \\ar[dd]|{{\\phantom{\\big(}n_1{\\phantom{\\big ) } } } } \\ar[rd]|{{\\phantom{\\big(}g{\\phantom{\\big ) } } } } & & & x \\ar[dd]|(.5){{\\phantom{\\big(}m{\\phantom{\\big ) } } } } \\\\ & y_2 \\ar[rru]|{{\\phantom{\\big(}f_2{\\phantom{\\big ) } } } } \\ar[dd]|(.35){{\\phantom{\\big(}n_2{\\phantom{\\big ) } } } } & &   \\\\",
    "w_1 \\ar[rrr]|(.4)\\hole|(.7){{\\phantom{\\big(}h_1{\\phantom{\\big ) } } } } \\ar[rd]|{{\\phantom{\\big(}k{\\phantom{\\big ) } } } } & & & z \\\\   & w_2 \\ar[rru]|{{\\phantom{\\big(}h_2{\\phantom{\\big ) } } } } & &   \\\\   } \\ ] ]        1 .",
    "the pullback functor @xmath366 has a right adjoint @xmath2 and the counit of the adjunction is a natural isomorphism .",
    "arrow @xmath8 _ has final pullback complements _ , i.e. , for each @xmath375 there is a pair of composable arrows @xmath376 which are a final pullback complement of @xmath377 .",
    "let @xmath19 be a category with pullbacks and let @xmath346 be a stable system of monos of @xmath19 .",
    "then the composition of consecutive @xmath346-partial maps is defined in the usual way , using a pullback in @xmath19 .",
    "this yields the category @xmath379 of @xmath346-partial maps over @xmath19 and the inclusion functor @xmath380 , which maps each object @xmath52 to @xmath52 and each arrow @xmath32 to @xmath381 . according to ( * ? ? ?",
    "* sec.2.1 ) , @xmath19 has an @xmath346-partial map classifier if and only if the functor @xmath382 has a right adjoint @xmath383 , and then the @xmath346-partial map classifier @xmath37 is made of the endofunctor @xmath384 on @xmath19 and of the unit of the adjunction , @xmath41 .",
    "thus , functor @xmath38 is defined as @xmath385 for each object @xmath52 and @xmath386 for each arrow @xmath32 . now , exploiting theorem  [ thm : dt ] we can state and prove theorem  [ theorem : sqpo ] in a more abstract framework , as follows .    [ theorem : sqpo - abstract ] let @xmath19 be a category with pullbacks and with an @xmath346-partial map classifier @xmath37 for a stable system of monos @xmath346 .",
    "then for each mono @xmath161 in @xmath346 the functor @xmath387 is the right adjoint to functor @xmath388 .",
    "in addition , the counit of the adjunction is a natural isomorphism .",
    "let us sketch this proof by describing the unit @xmath389 and counit @xmath390 of the adjunction @xmath391 .",
    "for the counit , since @xmath392 we have @xmath393 , and since the natural transformation @xmath40 is cartesian we have @xmath394 .",
    "then the counit @xmath395 is the resulting natural isomorphism . for the unit ,",
    "let @xmath396 be an object in @xmath397 and let @xmath398 in @xmath399 ( see the diagrams below ) .",
    "let @xmath400 be the fourth arrow in this pullback , then @xmath401 by stability and by lemma  [ lemma : mf ] we have @xmath402 .",
    "let @xmath403 and let @xmath404 be the fourth arrow in this pullback . by definition of pullback , there is a unique arrow @xmath405 such that @xmath406 and @xmath407 .",
    "it follows that @xmath408 is an arrow in @xmath397 .",
    "moreover , let @xmath409 , then @xmath410 .",
    "since @xmath40 is cartesian , the decomposition property of pullbacks implies that @xmath411 is the pullback of @xmath412 , so that @xmath413 is in @xmath346 and @xmath414 .",
    "then it can be checked that the @xmath415 arrows defines a natural transformation @xmath416 , which is the unit of the adjunction .",
    "@xmath417|{pb } l \\ar@ { > ->}[d]_{m } &     k \\ar[l]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } } \\ar@ { > ->}[d]^{n } \\\\",
    "\\ar@{}[rd]|{= } g \\ar[d]_{{\\overline{m } } } &     d \\ar[l]|{{\\phantom{\\big(}g{\\phantom{\\big ) } } } } \\ar[d]^{{\\overline{n } } } \\\\",
    "t(l ) &     t(k ) \\ar[l]|{{\\phantom{\\big(}t(l){\\phantom{\\big ) } } } } \\\\   } \\qquad",
    "\\qquad   \\xymatrix@c=4pc { \\ar@{}[rd]|{pb } l \\ar@ { > ->}[d]_{m } &     k \\ar[l]|{{\\phantom{\\big(}l{\\phantom{\\big ) } } } } \\ar@ { > ->}[d]^{n ' } \\\\ \\ar@{}[rd]|{pb } g \\ar[d]_{{\\overline{m } } } &     d ' \\ar[l]|{{\\phantom{\\big(}g'{\\phantom{\\big ) } } } } \\ar[d]^{q={\\overline}{n ' } } \\\\",
    "t(l ) &     t(k ) \\ar[l]|{{\\phantom{\\big(}t(l){\\phantom{\\big ) } } } } \\\\   } \\ ] ]"
  ],
  "abstract_text": [
    "<S> the several algebraic approaches to graph transformation proposed in the literature all ensure that if an item is preserved by a rule , so are its connections with the context graph where it is embedded . </S>",
    "<S> but there are applications in which it is desirable to specify different embeddings . </S>",
    "<S> for example when cloning an item , there may be a need to handle the original and the copy in different ways . </S>",
    "<S> we propose a conservative extension of classical algebraic approaches to graph transformation , for the case of monic matches , where rules allow one to specify how the embedding of preserved items should be carried out . </S>"
  ]
}