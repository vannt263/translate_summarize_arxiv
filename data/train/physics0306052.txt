{
  "article_text": [
    "the detailed simulation and reconstruction of physics events at the large hadron collider ( lhc ) , @xmath0 collisions at 14  tev , where a large number of high - energy particles are produced and up to 200 collisions overlay , is extremely time consuming even on todays fastest cpus .",
    "however , to investigate the physics potential of the cms detector a large number of collisions must be studied .",
    "this is especially true for scanning the multi - dimensional parameter space of susy models . by replacing the detailed modeling of energy losses and material effects in simulation as well as the reconstruction algorithms by simple parameterizations significant improvements concerning speed",
    "can be at the price of precision losses .",
    "the procedure to analyze physics models can be decomposed into four major steps :    1 .",
    "generation of monte - carlo events .",
    "+ the monte - carlo events are created using generators like pythia , herwig or isajet .",
    "these generators produce a list of particles - stable and decaying - and their four - vectors . in cms",
    "the information is stored in form of hbook - ntuples .",
    "the time required to generate an event is normally less than 100 milliseconds . 2 .",
    "simulation of material effects .",
    "+ this is the most time consuming step required .",
    "currently , the simulation is still done with a geant3  @xcite based fortran program : _ cmsim _",
    "the time varies significantly depending on the number of particles and their energies in the monte - carlo events .",
    "the average is between 100 and 200 seconds per event .",
    "the information that is stored as output of this step are called _",
    "simhits_. they contain the information about the energy stored in different detector elements at different times . a new , object - oriented simulation program _ oscar _",
    "@xcite , based on geant4  @xcite , is currently being validated .",
    "3 .   simulation of readout electronics ( digitization ) .",
    "+ the detector converts the energy deposited by the particles into electronic signals that are converted to digital information by adcs and tdcs . at the high luminosity at the lhc",
    "the detector `` sees '' the overlap of up to 200 minimum bias events with a single signal event .",
    "since the simulation of material effects requires large amount of cpu time , the minimum bias events are randomly selected from a large pool of simulated events and combined with the simulated signal events .",
    "so even being technically part of the simulation , the combination of minimum bias events with a signal event and the simulation of the detector response to the energy deposition are performed by the reconstruction software : _ orca _",
    "the time for this depends on the simulated luminosity and the event type .",
    "it is 1 to 10 seconds per collision .",
    "the output created in this step is called _",
    "digis_. 4 .",
    "reconstruction of physics / analysis objects .",
    "+ the reconstruction is performed by orca in several sub - steps .",
    "first the digis are combined to reconstructed hits , rechits , which for example combine several strips of the silicon tracking detectors .",
    "similarly , level-1 trigger objects are built .",
    "then rechits are used to find tracks in the inner tracker and the muon chambers and clusters in the calorimeters .",
    "the reconstruction can produce more complicated objects like jets or information about the missing energy and finally physics objects like electrons , photons , muons etc .",
    "the time spent on this can vary largely but is typically 10 to 100 seconds per collision .",
    "the total cpu time required before the analysis of a collision can be started is 3 - 5 minutes .",
    "to give physicists the possibility to study large event sample fast , the famos project has been developed in cms . the main design concept is to provide fast modules , able to replace each single step in the chain , as well as several steps in one go and this complying to the same interfaces as the full simulation and reconstruction .        to achieve this famos",
    "is divided into several subsystems that focus on the different steps .",
    "figure  [ fig : structure ] shows the different subsystems and their relations to the other cms object - oriented software projects .",
    "cobra / carf  @xcite is the general framework that controls event handling , ddd  @xcite provides services for geometry handling , oscar is the simulation software and orca the reconstruction software . the subsystems for a particular task can be accessed via several interfaces : one providing the same interfaces as for the corresponding detailed simulation or reconstruction , one for simplified and easy standalone usage .",
    "the implementation of _ oscarinterface _ and _ orcainterface _ allows to dynamically change from detailed simulation and reconstruction to the famos implementations .",
    "the first implementation focuses on the replacement of all steps for simulation and reconstruction and produces physics objects directly from the monte - carlo four - vectors .",
    "this corresponds to the hashed area in figure  [ fig : structure ] .",
    "the rest of this article describes the current implementation .",
    "when implementing the direct way from monte - carlo events to physics analysis objects , two main issues arise . first the monte - carlo event is read and second dedicated simulation modules for the different sub - detectors of cms are executed .",
    "an important first step in famos is the handling of the original monte - carlo event .",
    "the event is stored in the class _ rawhepevent _ that is an exact c++ implementation of the _ hepevt _ fortran commonblock that is used by most monte - carlo generators .",
    "an abstract base class _ basehepeventreader _ exists that allows to fill the _ rawhepevent _ from a multitude of sources .",
    "ascii files , hbook ntuples , particle guns - mostly used for single particle tests , from the databases used as persistency store by oscar and orca and directly from the pythia-6 monte - carlo generator .",
    "similar reader modules can be created for other monte - carlo generators .",
    "the event reader modules are provided by the cms framework , cobra , and used from there .      in famos an special event manager class , _ famoseventmgr",
    "_ , takes care of    * reading the monte - carlo event and * calling simulation modules that inherit from _ famossimulator _    it interfaces directly to the _ reconstruction on demand _ mechanism that is a key point of the cms framework .",
    "figure  [ fig : eventmgr ] shows a collaboration diagram between the _ famoseventmgr _ and the framework classes . at startup _ famoseventmgr _ accepts registrations from the selected _ famossimulator _ modules and reads the geometry .",
    "concrete classes that inherit from _ famossimulator _ implement the fast simulation algorithms .",
    "when starting to loop over events , the _ famoseventmgr _ first fills _ rawhepevent _ from the selected input .",
    "_ rawhepevent _ is also used to keep track of new particles that can be created by the _ famossimulator _ classes .",
    "this modification of the event is done to take care of effects like bremsstrahlung , pair production or multiple scattering .",
    "the _ famossimulator _ classes are called in a well defined sequence .",
    "it is important to follow the order in which the particles cross the detector - first the tracker , then the calorimeters ( ecal and hcal ) and only last the muon system .    currently , the simulators are called in the order of their registration - the user is responsible to do this correctly .      the classes inheriting from _ famossimulator _ are implementing the concrete fast simulation parameterizations .",
    "currently , implementations exist for    * material effects * tracking ( tracker and muon ) * electromagnetic clustering * muon level-1 trigger    the simulation modules - residing in the _ generatortoanalysis _ subsystem have to implement a method + bool reconstruct(rawhepevent & ) ; + and can add methods to provide the objects they simulate or reconstruct .",
    "all modules provide access to objects that are kept as simple as possible and a special , framework specific mechanism is then applied to provide the results in a form compatible with the interfaces used in normal orca jobs : recobj        classes .",
    "this is done in the _ orcainterface _ subsystem .",
    "direct use of the simulators can be achieved using the _ standaloneinterface _ subsystem .",
    "figure  [ fig : orcainterface ] shows how classes from cobra ( lazyobserver , recunit ) , orca ( ttrack ) and famos ( generic : famossimulator , _ generatortoanalysis _ : basefasttracksfromgenerator , _ orcainterface _ : rectrackfromparticle , fasttrackreconstructor ) work together to provide tracker tracks produced by the fast simulation modules with identical interface to the orca analysis program as tracks from the full reconstruction software .",
    "since famos provides orca compliant interfaces no change is required to the part of code that uses the objects ( e.g. ttracks ) when changing from full to fast reconstruction .",
    "however , instantiation of the famos objects and their registration to the framework must be done . for tracker tracks to be provided by the _ fatsim _",
    "simulation module this looks like the following :    .... mytrackfinder = new rectrackfromrawparticle (                    new fatsim ( & mypteg , & myangleeg ,                                 & myeff ,                                 myimpactparametereg ) ) ; mytrackreconstructor = new fasttrackreconstructor (                             mytrackfinder , \" fatsim \" ) ; [ ... ] reccollection < ttrack > mytracks(ev->recevent ( ) ,                                 \" fatsim \" ) ; ....    the first lines instantiates an orca track - finding object with the fatsim simulation module as argument .",
    "this simulation module uses internal classes that provide the parameterizations of transverse momentum , angular distributions and the efficiencies",
    ". then the orca track reconstructor is created an a string - `` fatsim '' - is used to identify it . creating the collections of ttrack specifying the same string will issue the reconstruction _ on demand _ ,",
    "i.e. when iterated over the collection .",
    "this can be compared to the registration of the regular track finding algorithm :    .... mytrackfinder = new trackreconstructor (                   new combinatorialtrackfinder ,                   \" fkftracks \" ) ; reccollection < ttrack > mytracks(ev->recevent ( ) ,                                 \" fkftracks \" ) ; ....    again a track - finder is instantiated and then a collection . for the collection the only difference is the string to specify which reconstruction algorithm is to be used when the collection is accessed .        similarly , when linking the executable different sets of libraries must be selected when using full or fast reconstruction .",
    "the main use - case is to run the fast simulation and reconstruction directly with a monte - carlo generator as input .",
    "however , it is also possible to use the famos in parallel to a regular full reconstruction from a prepared database .",
    "this is especially useful for direct comparison between full and fast simulation and reconstruction .",
    "the original monte - carlo event that was simulated in a time - consuming process is stored in the database , read from there by the famoseventmgr and then handed to the fast simulators . that allows for example to analyze two reccollections of ttracks in the same program since",
    "the different collections are mapped via the string identifier to different track - finding algorithms : detailed reconstruction with rechits as input and famos with the monte - carlo event as input .",
    "the main aim of the current first implementation was to achieve the highest possible speed with reasonable agreement .",
    "the measured results for high - multiplicity events without minimum bias pileup is shown in table  [ tab : timing ] .    .measured time distribution for famos compared with full simulation and reconstruction . [ cols=\"<,>,>\",options=\"header \" , ]     [ tab : timing ]    the famos time is dominated by the monte - carlo generator ( pythia ) and the calorimeter simulation module .",
    "all other modules - in particular the famos framework ( famoseventmgr ) contribute only insignificantly .",
    "the performance achieved is more than 3000 times faster than the detailed simulation and reconstruction .",
    "it is possible to simulate the cms detector and in particular the material effects more precisely .",
    "a first prototype has been developed that takes pair production and bremsstrahlung into account . without optimization for performance",
    "this reduces the speed of famos to be only factor 100 faster than cmsim+orca . the modularity - this is just one additional simulation module to register to famoseventmgr - give the user full flexibility to adapt the simulation to the precision his concrete physics analysis requires",
    "famos is a high - performing , flexible and dynamically configurable mini - framework for fast simulation and reconstruction .",
    "it is fully integrated in the general cms framework but the components can be used independently .",
    "it is possible to mix full and fast simulation with minimal changes to the user code .",
    "the first modules implemented provide high - level reconstructed objects ( tracks , muon , muon lvl-1 trigger , calorimeter clusters ) at reasonable agreement in precision about 3000 times faster than full simulation and reconstruction .",
    "9 r.  brun et al.,``geant 3'',cern dd / ee/84 - 1 ( revised ) , september 1987 .",
    "http://cmsdoc.cern.ch/cmsim/cmsim.html http://cmsdoc.cern.ch/oscar s.  agostinelli et al .",
    ", cern - it-20020003 , kek preprint 2002 - 85 , slac - pub-9350 , submitted to nuclear instruments and methods nim a. v.  innocente , d.  stickland , `` design , implementation and deployment of a functional prototype oo reconstruction software for cms . the orca project .",
    "'' , proceedings to chep-2000 , padua .",
    "http://cmsdoc.cern.ch/famos v.  innocente , `` cms software architecture : software framework , services and persistency in high level trigger , reconstruction and analysis '' cms in/1999 - 034 + http://cobra.web.cern.ch/cobra/ http://cmsdoc.cern.ch/cms/software/ddd/www"
  ],
  "abstract_text": [
    "<S> detailed detector simulation and reconstruction of physics objects at the lhc are very cpu intensive and hence time consuming due to the high energy and multiplicity of the monte - carlo events and the complexity of the detectors </S>",
    "<S> . we present a dynamically configurable system for fast monte - carlo simulation and reconstruction ( famos ) that has been developed for cms to allow fast studies of large samples of monte - carlo events . </S>",
    "<S> each single step of the chain - simulation , digitization and reconstruction , as well as combinations of chain links can be replaced by modules that sacrifice precision for speed . </S>",
    "<S> fast and detailed modules have identical interfaces so that a change is fully transparent for the user .    currently , a complete set of the fastest possible implementation , i.e. going directly from the monte - carlo truth to reconstructed objects , has been implemented . </S>",
    "<S> it is about hundred to thousand times faster than the fully detailed simulation / reconstruction and provides tracks reconstructed by the inner tracker , clusters in calorimeters and trigger - lvl1 objects and tracks reconstructed for the muon system of the cms detector . </S>"
  ]
}