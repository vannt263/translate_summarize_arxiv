{
  "article_text": [
    "one of the famous problems in the field of combinatorics is the degree / diameter problem  @xcite .",
    "the degree / diameter problem is the problem of finding the largest possible number @xmath1 of nodes in a graph of maximum degree @xmath2 and diameter @xmath3 .",
    "the maximum degree of a graph is the maximum degree of its nodes .",
    "the degree of a node is the number of edges incident to the node .",
    "the diameter @xmath3 of a graph is the maximum distance between two nodes of the graph .    on the other hand ,",
    "the problem of the graph golf 2015 competition  @xcite is the order / degree problem .",
    "the order / degree problem is the problem of finding a graph that has smallest diameter @xmath3 and average shortest path length ( aspl , @xmath4 ) for a given order and degree .",
    "compared to the degree / diameter problem , order is given and diameter is not given in the order / degree problem .",
    "as the organizer of the competition mentioned , the order / degree problem has important role to design networks for high perfomance computing . because , the number of nodes of the network is determined based on design constraints such as cost , space , budget , and applications . solutions of the degree / diameter problem can be used to limited networks of particular number of nodes . currently , there is no trivial way to increase or decrease the number of nodes from the optimal graph of the degree / diameter problem , while keeping its diameter close to the optimal graph .",
    "for example , besta and hoefler  @xcite have presented diameter-2 and -3 networks with particular number of routers , and each endpoint is connected to a router .",
    "the number of endpoints can be changed in a range .",
    "matsutani et al .",
    "@xcite have reduced the communication latency of 3d nocs , by adding randomized shortcut links .",
    "we try to solve some order / degree problems .",
    "there are two contributions in this paper .",
    "1 ) showing heuristic algorithm to create a graph for given order and degree ( sec .",
    "[ sec : algorithm ] ) . using this algorithm ,",
    "we have created two best - known graphs ; one has order @xmath5 and degree @xmath6 , the other has @xmath5 and @xmath7 .",
    "after 2015 competition , we also have created other graph of order @xmath8 and degree @xmath6 .",
    "2 ) developing evaluation function of edges for 2-opt local search ( sec .",
    "[ sec : search ] ) .",
    "local search starts with a graph that has the given number of nodes and satisfies degree constraints . swapping two edges",
    "is accepted , if swapped graph @xmath9 is better than the previous graph @xmath10 in terms of diameter and/or aspl .",
    "for example , if two edges @xmath11-@xmath12 and @xmath13-@xmath2 are selected for swapping from graph @xmath10 , we try to swap two edges such that two edges @xmath11-@xmath12 and @xmath13-@xmath2 are removed from and two edges @xmath11-@xmath13 and @xmath12-@xmath2 are added to the graph @xmath10 . if diameter and/or aspl of swapped graph @xmath9 is smaller than @xmath10 , this swap is accepted .",
    "we call the evaluation function `` edge importance '' .",
    "lower - importance edge pair is selected as the candidate of swapping earlier than other pairs . for the existence of local minimum graph",
    ", we need to temporarily accept worse graphs in searching graph of order @xmath14 and degree @xmath15 .",
    "the observation of small order graphs brings us the idea of the heuristic algorithm shown in sec .  [",
    "sec : algorithm ] . at the beginning of the 2015 competition",
    ", we drew graphs with small order and degree .",
    "the first graph is order @xmath16 and degree @xmath17 as shown in fig .",
    "[ fig : n16d3zdd5 ] .",
    "the second one is order @xmath18 and degree @xmath19 as shown in fig .",
    "[ fig : n16d4iida13 ] .",
    "the diameters of these two graphs are three ( @xmath20 ) . through drawing these two graphs",
    ", we found that these graphs contain many pentagons ( 5-node cycles ) , no or small number of squares ( 4-node cycles ) , and no triangle ( 3-node cycle ) . in fig .",
    "[ fig : n16d3zdd5 ] , there is no triangle and no square .",
    "no triangle and four squares exist in fig .",
    "[ fig : n16d4iida13 ] . we think triangles and squares cause diameter aspl ( average shortest path length ) to be larger for the case of @xmath20 . through this observation , we define increasing the number of pentagons as our policy in section [ sec : algorithm ] . in the degree / diameter problem , pentagons are appeared in the graphs of diameter @xmath21 , e.g. , petersen graph ( shown in fig .",
    "[ fig : petersengraph ] ) and hoffman - singleton graph ( @xmath22 and @xmath23 ) .     and",
    "degree @xmath19 ]    \\(a ) ring layout     and degree @xmath19 ]    \\(b ) pentagon ( 5-node cycle ) layout     and degree @xmath25    \\(a ) ring layout     and degree @xmath25    \\(b ) pentagon ( 5-node cycle ) layout     and degree @xmath25    \\(c ) square ( 4-node cycle ) layout",
    "based on the observation of small order graphs described in sec .",
    "[ sec : small ] , we determine the outline of our heuristic algorithm as following two steps .",
    "1 ) if target diameter is @xmath3 , we connect small order graphs such that their diameter is @xmath26 .",
    "for example , if the target diameter @xmath20 and order @xmath27 , the @xmath28 petersen graphs ( fig .",
    "[ fig : petersengraph ] , diameter @xmath29 ) are connected .",
    "2 ) we try to increase the number of @xmath30-node cycles , when edges are added . for graphs of @xmath31",
    ", we try to increase the number of pentagons ( 5-node cycles ) .",
    "outline of our heuristic algorithm is shown in algorithm [ alg : gg ] . in the remaining of the paper ,",
    "we discuss only @xmath31 graphs .",
    "our algorithm generates a graph which diameter is almost 3 , for given order and degree .",
    "create a base graph @xmath32 , such that order of @xmath32 is @xmath33 create a graph @xmath10 , by greedily adding edges one by one to @xmath32 return the graph @xmath10      a base graph @xmath34 has @xmath33 nodes , i.e. @xmath35 . the graph @xmath32 is a connected graph , but its degree is five .",
    "most nodes have five edges . other nodes , i.e. , some border and anomalous nodes have four edges .",
    "graph @xmath32 contains multiple petersen graphs . the petersen graph @xmath36 , which is shown in fig .  [",
    "fig : petersengraph ] , is one of well - known moore graphs  @xcite , and has ten nodes and degree @xmath37 .",
    "the diameter of petersen graph is two . when the nodes are numbered in fig .",
    "[ fig : petersengraph ] , fifteen edges of the petersen graph are described as follows , for @xmath38 and @xmath39 .",
    "@xmath40    ]    if a given order @xmath33 is multiple of ten , we generate @xmath41 petersen graphs , @xmath42 .",
    "adjacent petersen graphs , @xmath43 and @xmath44 , are connected as shown in fig .",
    "[ fig : connectpetersengraph ] by connect procedure in algorithm  [ alg : basegraph ] .",
    "[ fig : connectpetersengraph ] shows only edges crossing two petersen graphs . in the case of @xmath8 ,",
    "we generate 1000 petersen graphs , and @xmath3-th graph are connected with @xmath45-th and @xmath46-th graph for @xmath47 .",
    "create @xmath3-th petersen graphs @xmath48 connect @xmath3-th and @xmath46-th petersen graphs as shown in fig .  [ fig : connectpetersengraph ]        when there is a remainder @xmath49 divided by ten , i.e. , @xmath50 , we replace @xmath51 petersen graphs with @xmath51 11-node graphs .",
    "the 11-node graph is the subgraph of fig .",
    "[ fig : n16d4iida13 ] .",
    "we heuristically select eleven nodes , @xmath52 from the graph of fig .",
    "[ fig : n16d4iida13 ] .",
    "when we connect a 11-node graph with adjacent petersen graphs , we ignore node 10 and other ten nodes are connected similar to fig .",
    "[ fig : connectpetersengraph ] .",
    "the eleven nodes graph is shown in fig .",
    "[ fig:11nodesgraph ] , nodes are renumbered , except for node 10 .",
    "nodes @xmath53 in fig .",
    "[ fig : n16d4iida13 ] are renumbered to @xmath54 in fig",
    ".  [ fig:11nodesgraph ] , respectively .     for base graphs ]",
    "the base graph @xmath32 is generated by createbasegraph procedure in algorithm  [ alg : basegraph ] .",
    "the base graph @xmath32 has @xmath33 nodes .",
    "each node of @xmath32 has five edges , except for nodes in the first and the last petersen graphs and node 10 of 11-node graphs .",
    "these exceptional nodes have just four edges .      in this step ,",
    "we greedily add edges one by one to the base graph @xmath32 .",
    "our policies to add edges are the followings .    1 .",
    "increase the number of pentagons in the graph , to create a graph such that its diameter becomes three and its aspl is close to two .",
    "2 .   add an edge , which has the smallest degree node on one side .",
    "no track back , i.e. , never remove edges from the graph .    under the policy 1 ) , our heuristic searches two nodes such that distance of them is four , and adds an edge between these two nodes . by adding the edge , the number of pentagons is increased . even if the small - degree graph of @xmath16 and @xmath19 in fig .",
    "[ fig : n16d4iida13 ] , there are many pentagons those include a particular edge .",
    "for example , an edge 1 - 2 is contained in eight pentagons ; 1 - 2 - 3 - 4 - 0 , 1 - 2 - 6 - 7 - 0 , 1 - 2 - 15 - 14 - 0 , 1 - 2 - 3 - 8 - 9 , 1 - 2 - 3 - 13 - 12 , 1 - 2 - 6 - 5 - 9 , 1 - 2 - 6 - 7 - 12 , and 1 - 2 - 6 - 10 - 9 .",
    "the policy 2 ) is employed to uniformly increase the degree of nodes and save computation time .",
    "our heuristic maintains the nodes that have the smallest degree , and selects a node from them as one side of a new edge .",
    "a node of the other side is selected based on the policy 1 ) .",
    "although we can select the new edge from all possible pair of nodes , to save computation time , our heuristic limits search space by fixing one side of new edge .    the policy 3 ) also saves computation time .",
    "as another reason , we do not find any effective evaluation function to track back .    here",
    ", we explain this step in algorithm  [ alg : addedges ] . in each loop iteration of lines  [ l : while1 ] to [ l : while1end ] , two nodes @xmath55 and",
    "@xmath56 are selected and add an edge @xmath55-@xmath56 to the graph .",
    "node @xmath55 is chosen from the nodes of the smallest degree in @xmath10 at line  [ l : selecti ] , based on policy 2 ) .",
    "@xmath57 denotes the distance between two nodes @xmath55 and @xmath56 . in the loop of lines",
    "[ l : for1 ] to [ l : for1end ] , candidates of node @xmath56 are evaluated , based on policy 1 ) . after evaluation , node @xmath56 that satisfies",
    "two following conditions ( [ eqn : p1 ] ) and ( [ eqn : p2 ] ) is selected in line  [ l : selectj ] , and an edges @xmath55-@xmath56 is added to graph @xmath10 in the next line .",
    "@xmath58 is the subset of @xmath59 such that each node in @xmath58 satisfies condition ( [ eqn : p1 ] ) .",
    "we have no particular tie - breaking rule . @xmath60",
    "the countpaths function is used for the evaluation of @xmath61 .",
    "countpaths@xmath62 roughly counts the number of paths between two nodes @xmath55 and @xmath56 , those distance are three .",
    "@xmath63 is the set of nodes distant @xmath64 from node @xmath55 , i.e. , for every node @xmath65 , @xmath3 satisfies @xmath66 .",
    "for example , every node @xmath67 satisfy @xmath68 and @xmath69 .",
    "@xmath70 in line  [ l : countpathp ] is close to the twice of the number of 4-node paths .",
    "@xmath71 [ l : while1 ] [ l : selecti ] select a node @xmath55 from the smallest degree nodes compute node set @xmath59 such that @xmath72 [ l : for1 ] @xmath73 @xmath74 @xmath75 [ l : for1end ] select @xmath61 that satisfies conditions ( [ eqn : p1 ] ) and ( [ eqn : p2 ] ) [ l : selectj ] add an edge @xmath55-@xmath56 to graph @xmath10 [ l : while1end ] if degree of several nodes are less than @xmath2 , add several edges between them    @xmath76 [ l : countpathp ] roughly count the number of paths with distance 3 between node @xmath55 and @xmath56 , for graph @xmath10      diameter @xmath3 and aspl @xmath4 of generated graphs are shown in table  [ tbl : heuristicresults ] . fortunately , two graphs of @xmath77 are the new records in the competition .",
    "the graph of @xmath14 has the same diameter , but longer aspl than the best record @xmath78 and two competitors records . for two graphs of @xmath27 ,",
    "our first implementation is too slow and can not finish before the deadline of the 2015 competition . after the competition , we reimplement the program and get the results as shown in table  [ tbl : heuristicresults ] .",
    "rr|rr|l order @xmath33 & degree @xmath2 & diameter @xmath3 & aspl @xmath4 & note + 256 & 16 & 3 & 2.12757 & not submitted + 4096 & 60 & 3 & 2.295275 & * 1 + 4096 & 64 & 3 & 2.242228 & * 1 + 10000 & 60 & 3 & 2.648980 & * 2 + 10000 & 64 & 3 & 2.611310 & * 3 +   +",
    "after a graph is created by heuristic algorithm described in sec .",
    "[ sec : algorithm ] for a given order and degree , we start 2-opt local search .",
    "2-opt is the basic and widely used local search heuristic  @xcite .",
    "it is used for traveling salesperson problem ( tsp ) and others .    in this section , we explain edge importance which is used to prioritize edge combinations for 2-opt local search .",
    "2-opt algorithm slightly modifies a given graph recursively .",
    "the modification of 2-opt is swapping two edges .",
    "an example of swapping two edges @xmath11-@xmath12 and @xmath13-@xmath2 into @xmath11-@xmath2 and @xmath12-@xmath13 is shown in fig .",
    "[ fig : swapexmaple ] .",
    "diameter and aspl of pre - swap graph @xmath79 and post - swap graph @xmath80 are compared with each other .",
    "if diameter and/or aspl of @xmath9 is smaller than @xmath10 , this swap is accepted .",
    "-@xmath12 and @xmath13-@xmath2 into @xmath11-@xmath2 and @xmath12-@xmath13 .",
    "( we assume degree @xmath81 and other nodes are not drawn .",
    "there is another swap into @xmath11-@xmath13 and @xmath12-@xmath2 for these edges ) ]    2-opt local search is time - consuming task .",
    "there are many ways to reduce computation time .",
    "even if we search a graph of order @xmath14 and degree @xmath15 , there are 2048 edges in the graph .",
    "the number of edge pairs is about @xmath82 . generally , the number of edge pairs is about @xmath83 .",
    "for each swapped graph , we need to calculate diameter and aspl .",
    "we adopt two techniques to save computation time .",
    "one is edge importance , and the other is fast aspl calculation for 2-opt .    our edge importance ( or edge impact ) is a value given to each edge of a graph . as an intuitive explanation",
    ", less important edges probably be removed from the graph with little increase of aspl than other edges .",
    "then , we give higher priority to less important edges , when we select an edge pair for swap .",
    "the edge importance of an edge @xmath84-@xmath3 is defined by the following function .",
    "@xmath85 where @xmath86 is the importance of edge @xmath56-@xmath3 for node @xmath55 .",
    "the examples of @xmath86 is shown in fig .",
    "[ fig : edgeimportance ] .",
    "we assume @xmath87 ( symmetricity ) and divide two cases of @xmath88 as follows .    * if two nodes @xmath56 and @xmath3 have the same distance from @xmath55 , i.e. , @xmath89 , then @xmath90 .",
    "( left of fig .",
    "[ fig : edgeimportance ] ) * if two nodes @xmath56 and @xmath3 have the different distance from @xmath55 , i.e. , @xmath91 , then @xmath92 .",
    "we define node set @xmath59 , each of which has an edge to @xmath3 and its distance from @xmath55 is equal to @xmath57 .",
    "@xmath93 using @xmath59 , @xmath86 is defined as follows . @xmath94 the center of fig .",
    "[ fig : edgeimportance ] shows a subcase of @xmath95 , and the right of it shows the other subcase of @xmath96 . note that , this case includes the case of @xmath97 . if @xmath97 , then @xmath96 by the definition .",
    "-@xmath3 for node @xmath55 ]      two lower - importance edges are the candidate of swapping for 2-opt local search .",
    "all edges are sorted by edge importance and denoted by @xmath99 .",
    "the edge @xmath100 has the smallest importance .",
    "the 2-opt local search algorithm is shown in algorithm  [ alg:2opt ] the loop of lines  [ alg2opt : repoeat1 ] to [ alg2opt : repoeat1end ] is the main loop of local search . line  [ alg2opt : selectedgepair ] is the important point using edge importance .",
    "we tries several orders to select a pair , which are described in the next paragraph . for pair @xmath101-@xmath102 and",
    "@xmath103-@xmath104 selected in line  [ alg2opt : selectedgepair ] , there are two combinations already has one of edges @xmath11-@xmath13 or @xmath12-@xmath2 ( @xmath11-@xmath2 or @xmath12-@xmath13 ) , we skip the swap since the degree of two nodes are decreased by one .",
    "] of swapping , 1 ) @xmath11-@xmath13 and @xmath12-@xmath2 ( @xmath9 of line  [ alg2opt : g ] ) and 2 ) @xmath11-@xmath2 and @xmath12-@xmath13 ( @xmath105 of line  [ alg2opt : g  ] ) .",
    "diameter and aspl of both @xmath9 and @xmath105 are calculated .",
    "the loop of lines  [ alg2opt : while1 ] to [ alg2opt : while1end ] implies that edge importance is reused for swapped graphs . in our experience , after fifty swaps , ordering still valuable to find smaller aspl graph .",
    "calculate edge importance of all edges in @xmath10 sort edges by edge importance [ alg2opt : while1 ] [ alg2opt : repoeat1 ] select an edge pair @xmath106 in a particular order[alg2opt : selectedgepair ] generate swapped graph @xmath9[alg2opt : g ] calculate diameter and aspl of @xmath9 generate another swapped graph @xmath105[alg2opt : g  ] calculate diameter and aspl of @xmath105 [ alg2opt : repoeat1end ] copy @xmath9 or @xmath105 to @xmath10 [ alg2opt : while1end ]    we heuristically employ two searching orders of line  [ alg2opt : selectedgepair ] in algorithm  [ alg:2opt ] .",
    "both orders satisfy @xmath107 for @xmath108 .",
    "we think the order of the smallest first is better than it of triangle , empirically .",
    "* the smallest first : @xmath109 for @xmath110 .",
    "+ @xmath111 + @xmath112 + @xmath113 + @xmath114 + @xmath115 + @xmath116 * triangle : @xmath117 for @xmath110 .",
    "+ @xmath118 + @xmath119 + @xmath120 + @xmath114 + @xmath121 + @xmath116    since aspl calculation is time - consuming task , we additionally design aspl recalculation method for 2-opt local search .",
    "the method stores the distance matrix of graph @xmath10 and update the matrix for swapped graph @xmath9 .",
    "we can elimiate re - calculation of the distance between nodes which the swap does not affect .",
    "we run local search program during the competition and after competition .",
    "we show the smallest graph that we found in table  [ tbl:2optresults ] .",
    "these graphs probably are the best - known graphs for these four combinations of order and degree . for graphs of order @xmath5 and @xmath27 , algorithm  [ alg:2opt ]",
    "is directly applied .",
    "rr|rr|r order @xmath33 & degree @xmath2 & diameter @xmath3 & aspl @xmath4 & @xmath4 of table  [ tbl : heuristicresults ] + 256 & 16 & 3 & 2.09069 & 2.12757 + 4096 & 60 & 3 & 2.295216 & 2.295275 + 4096 & 64 & 3 & 2.242170 & 2.242228 + 10000 & 60 & 3 & 2.648977 & 2.648980 +   +    for the graph of order @xmath14 and degree @xmath15 , our graphs fall into local optimal many times .",
    "to find graphs of smaller aspl , we accept worse post - graph @xmath9 than pre - swap graph @xmath10 in 2-opt local search .",
    "[ fig : localsearch - n256-d16 ] shows the search history of the last 1000 graphs before reaching the best - known graph of @xmath122 .",
    "many branches from each graph is omitted . in this figure ,",
    "we show aspl of each graph and order of edges that we swapped .",
    "the order of swapped edges is distributed from 0 to 620 , i.e. , swapped edges are two of @xmath123 in each graph . to reach the best - known graph ,",
    "we need to run local search at least in the range of edge pair @xmath106 for @xmath124 and @xmath125 .",
    "this range contains only 4 % of all edge pairs .",
    "so , the edge importance seems to be valuable function to prioritize edges for swapping .",
    "we briefly explain the distribution of order of swapped edges . since two edges are selected for each swap in fig .",
    "[ fig : localsearch - n256-d16 ] , the total number of selected edges are 2000 for 1000 swaps .",
    "the half of these edges have the order smaller than 8 . the order smaller than 108 contains 90% of these edges .     and degree @xmath15 ]    \\(a ) first half ( aspl : @xmath127 )     and degree @xmath15,title=\"fig : \" ] ( b ) last half ( aspl : @xmath128 )",
    "in this paper , we explained the heuristic algorithm that creates a graph which has small average shortest path length ( aspl ) for diameter 3 graphs .",
    "the algorithm intends to increase the number of pentagons ( 5-node cycles ) . through the observation of small order graphs which has diameter 3",
    ", we focused on the number of pentagons .",
    "the heuristic algorithm can create two best - known graphs at the graph golf 2015 competition , and a best - known graph after the competition .",
    "these three graphs have order @xmath5 and degree @xmath129 , @xmath5 and @xmath130 , and @xmath27 and @xmath129 .",
    "we also explained the technique of 2-opt local search to reduce aspl of a graph .",
    "the technique is based on the evaluation function called edge importance ( or edge impact ) .",
    "edges which have smaller importance compared to other edges are the good candidates for swap of 2-opt .",
    "we applied this technique to the graph of @xmath14 and @xmath15 , and find a best - known graph after competition .",
    "as future work , we will try to find more elegant heuristic to create a small aspl graph , for not only diameter 3 graphs but also larger diameter graphs .",
    "data structures for fast aspl computation also should be explored .",
    "this work was partially supported by jsps kakenhi grant number 26330107 .",
    "p.  erds , s.  fajtlowicz , and a.j .",
    "hoffman , `` maximum degree in graphs of diameter 2 , '' networks , vol .  10 , pp .  8790 , john wiley & sons , 1980 .",
    "e.  loz and j.  ir , `` new record graphs in the degree - diameter problem , '' australasian journal of combinatorics , vol .  41 , pp .  6380 , 2008 . m.  miller and j.  ir , `` moore graphs and beyond : a survey of the degree / diameter problem , '' electronic journal of combinatorics , vol .",
    "20 , no .  2 , # ds14v2 , 92  pages , 2013 . g.  exoo and r.  jajcay , `` dynamic cage survey , '' electronic journal of combinatorics , # ds16 , 55  pages , 2013 .",
    "m.  koibuchi , i.  fujiwara , s.  fujita , k.  nakano , t.  uno , t.  inoue , and k.  kawarabayashi , `` graph golf : the order / degree problem competition , '' http://research.nii.ac.jp/graphgolf/ m.  besta and t.  hoefler , `` slim fly : a cost effective low - diameter network topology , '' proc .",
    "of international conference on high performance computing , networking , storage and analysis ( sc  14 ) , pp .  348359 , nov .",
    "h.  matsutani , m.  koibuchi , i.  fujiwara , t.  kagami , y.  take , t.  kuroda , p.  bogdan , r.  marculescu , and h.  amano , `` low - latency wireless 3d nocs via randomized shortcut chips , '' proc . of the conference on design , automation & test ( date  14 ) ,",
    "m.  englert , h.  rglin , and b.  vcking , `` worst case and probabilistic analysis of the 2-opt algorithm for the tsp , '' proc . of 18th annual acm - siam symposium on discrete algorithms ( soda 07 ) , pp .  12951304 , jan ."
  ],
  "abstract_text": [
    "<S> we propose a heuristic method that generates a graph for order / degree problem . </S>",
    "<S> target graphs of our heuristics have large order ( @xmath0 4000 ) and diameter 3 . </S>",
    "<S> we describe the observation of smaller graphs and basic structure of our heuristics . </S>",
    "<S> we also explain an evaluation function of each edge for efficient 2-opt local search . using them </S>",
    "<S> , we found the best solutions for several graphs .    </S>",
    "<S> order / degree problem , graph generation , petersen graph , average shortest path length , 2-opt </S>"
  ]
}