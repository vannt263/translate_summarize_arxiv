{
  "article_text": [
    "a triangular decomposition of a set @xmath0 $ ] is a list of polynomial systems @xmath1 , called _ regular chains _ ( or regular systems ) and representing the zero set @xmath2 of @xmath3",
    ". each regular chain @xmath4 may encode several irreducible components of @xmath2 provided that those share some properties ( same dimension , same free variables ,  ) .",
    "triangular decomposition methods are based on a univariate and recursive vision of multivariate polynomials .",
    "most of their routines manipulate polynomial remainder sequences ( prs ) .",
    "moreover , these methods are usually `` factorization free '' , which explains why two different irreducible components may be represented by the same regular chain .",
    "an essential routine is then to check whether a hypersurface @xmath5 contains one of the irreducible components encoded by a regular chain @xmath6 .",
    "this is achieved by testing whether the polynomial @xmath7 is a zero - divisor modulo the so - called _ saturated ideal _ of @xmath6 .",
    "the univariate vision on regular chains allows to perform this _ regularity test _ by means of gcd computations .",
    "however , since the saturated ideal of @xmath6 may not prime , the concept of a gcd used here is not standard .",
    "the first formal definition of this type of gcds was given by kalkbrener in @xcite .",
    "but in fact , gcds over non - integral domains were already used in several papers  @xcite since the introduction of the celebrated _ d5 principle _",
    "@xcite by della dora , dicrescenzo and duval .",
    "indeed , this brilliant and simple observation allows one to carry out over direct product of fields computations that are usually conducted over fields .",
    "for instance , computing univariate polynomial gcds by means of the euclidean algorithm .    to define a polynomial gcd of two ( or more ) polynomials modulo a regular chain @xmath6 , kalkbrener refers to the irreducible components that @xmath6 represents . in order to improve the practical efficiency of those gcd computations by means of subresultant techniques , rioboo and the second author proposed a more abstract definition in @xcite .",
    "their gcd algorithm is , however , limited to regular chains with zero - dimensional saturated ideals .",
    "while kalkbrener s definition cover the positive dimensional case , his approach can not support triangular decomposition methods solving polynomial systems incrementally , that is , by solving one equation after another .",
    "this is a serious limitation since incremental solving is a powerful way to develop efficient sub - algorithms , by means of geometrical consideration .",
    "the first incremental triangular decomposition method was proposed by lazard in @xcite , without proof nor a gcd definition .",
    "another such method was established by the second author in  @xcite together with a formal notion of gcd adapted to the needs of incremental solving .",
    "this concept , called _ regular gcd _ , is reviewed in section  [ sect : preliminary ] in the context of regular chains . a more abstract definition follows .",
    "let be a commutative ring with unity .",
    "let @xmath8 be non - zero univariate polynomials in @xmath9 $ ] .",
    "we say that @xmath10 is a _ regular gcd _ of @xmath11 if the following three conditions hold :    * the leading coefficient of @xmath10 is a regular element of , * @xmath10 lies in the ideal generated by @xmath12 and @xmath13 in @xmath9 $ ] , and * if @xmath10 has positive degree w.r.t .",
    "@xmath14 , then @xmath10 pseudo - divides both of @xmath12 and @xmath13 , that is , the pseudo - remainders and are null .    in the context of regular chains ,",
    "the ring is the residue class ring of a polynomial ring @xmath15 $ ] ( over a field ) by the saturated ideal of a regular chain @xmath6 .",
    "even if the leading coefficients of @xmath11 are regular and is radical , the polynomials @xmath11 may not necessarily admit a regular gcd ( unless is prime ) .",
    "however , by splitting @xmath6 into several regular chains @xmath1 ( in a sense specified in section  [ sect : preliminary ] ) one can compute a regular gcd of @xmath11 over each of the ring @xmath16 , as shown in @xcite .    in this paper",
    ", we propose a new algorithm for this task , together with a theoretical study and implementation report , providing dramatic improvements w.r.t .",
    "previous work  @xcite .",
    "section  [ sec : regulargcds ] exhibits sufficient conditions for a subresultant polynomial of @xmath17 $ ] ( regarded as univariate polynomials in @xmath14 ) to be a regular gcd of @xmath18 w.r.t .",
    "@xmath6 . some of these properties could be known , but we could not find a reference for them , in particular when is not radical .",
    "these results reduce the computation of regular gcds to that of subresultant chains , see section  [ sec : regulargcdalgorithm ] for details .",
    "since euclidean - like algorithms tend to densify computations , we consider an evaluation / interpolation scheme based on fft techniques for computing subresultant chains .",
    "in addition , we observe that , while computing triangular decomposition , whenever a regular gcd of @xmath12 and @xmath13 w.r.t .",
    "@xmath6 is needed , the resultant of @xmath12 and @xmath13 w.r.t .",
    "@xmath14 is likely to be computed too .",
    "this suggests to organize calculations in a way that the subresultant chain of @xmath12 and @xmath13 is computed only once .",
    "moreover , we wish to follow a successful principle introduced in  @xcite : compute in @xmath19 $ ] instead of @xmath19 / { \\mbox{$\\mathrm{sat}(t)$}}$ ] , as much as possible , while controlling expression swell .",
    "these three requirements targeting efficiency are satisfied by the implementation techniques of section  [ sec : specilizationcube ] .",
    "the use of fast arithmetic for computing regular gcds was proposed in @xcite for regular chains with zero - dimensional radical saturated ideals .",
    "however this method does not meet our other two requirements and does not apply to arbitrary regular chains .",
    "we state complexity results for the algorithms of this paper in sections  [ sec : specilizationcube ] and [ sec : resultantandgcsolvingtwoequations ] .",
    "efficient implementation is the main objective of our work .",
    "we explain in section  [ sec : implementationforregulairze ] how we create opportunities for using modular methods and fast arithmetic in operations modulo regular chains , such as regular gcd computation and regularity test .",
    "the experimental results of section  [ sec : experimentation ] illustrate the high efficiency of our algorithms .",
    "we obtain speed - up factors of several orders of magnitude w.r.t . the algorithms of @xcite for regular gcd computations and regularity test .",
    "our code compares and often outperforms packages with similar specifications in maple and .",
    "let @xmath20 be a field and let @xmath21=\\k[x_1,\\ldots , x_n]$ ] be the ring of polynomials with coefficients in @xmath20 , with ordered variables @xmath22 .",
    "let @xmath23 be the algebraic closure of @xmath20 .",
    "if @xmath24 is a subset of @xmath25 then @xmath26 denotes the fraction field of @xmath27 $ ] . for @xmath28",
    "$ ] , we denote by @xmath29 the ideal it generates in @xmath30 $ ] and by @xmath31 the radical of @xmath29 . for @xmath32 $ ] ,",
    "the _ saturated ideal _ of @xmath29 w.r.t .",
    "@xmath33 , denoted by @xmath34 , is the ideal @xmath35\\mid \\exists m\\in\\mathbb{n}\\text {   s.t . }",
    "h^mq\\in\\langle f \\rangle\\}.$ ] a polynomial @xmath36 $ ] is a _ zero - divisor _",
    "modulo @xmath37 if there exists a polynomial @xmath13 such that @xmath38 , and neither @xmath12 nor @xmath13 belongs to @xmath29 .",
    "the polynomial @xmath12 is _ regular _ modulo @xmath29 if it is neither zero , nor a zero - divisor modulo @xmath29 .",
    "we denote by @xmath2 the _ zero set _",
    "( or algebraic variety ) of @xmath3 in @xmath39 . for a subset @xmath40 ,",
    "we denote by @xmath41 its closure in the zariski topology .      * main variable and initial . *",
    "if @xmath42 $ ] is a non - constant polynomial , the largest variable appearing in @xmath12 is called the _ main variable _ of @xmath12 and is denoted by @xmath43 . the leading coefficient of @xmath12 w.r.t .",
    "@xmath43 is its _ initial _ , written @xmath44 whereas @xmath45 is the leading coefficient of @xmath12 w.r.t .",
    "@xmath46 .",
    "* triangular set . * a subset @xmath6 of non - constant polynomials of @xmath30 $ ] is a _ triangular set _ if the polynomials in @xmath6 have pairwise distinct main variables .",
    "denote by @xmath47 the set of all for @xmath48 .",
    "a variable @xmath49 is _ algebraic _ w.r.t . @xmath6 if @xmath50 ; otherwise it is _",
    "free_. for a variable @xmath46 we denote by @xmath51 ( resp .",
    "@xmath52 ) the subsets of @xmath6 consisting of the polynomials with main variable less than ( resp . greater than ) @xmath53 .",
    "if @xmath54 , we denote by @xmath55 the polynomial @xmath56 with main variable @xmath53 . for @xmath6",
    "not empty , @xmath57 denotes the polynomial of @xmath6 with largest main variable .    *",
    "quasi - component and saturated ideal . *",
    "given a triangular set @xmath6 in @xmath21 $ ] , denote by @xmath58 the product of the for all @xmath48 .",
    "the _ quasi - component _ @xmath59 of @xmath6 is @xmath60 , that is , the set of the points of @xmath61 which do not cancel any of the initials of @xmath62 .",
    "we denote by the _ saturated ideal _ of @xmath6 , defined as follows : if @xmath6 is empty then is the trivial ideal @xmath63 ; otherwise it is the ideal @xmath64 .",
    "* regular chain . * a triangular set",
    "@xmath6 is a _ regular chain _ if either @xmath6 is empty , or @xmath65 is a regular chain and the initial of @xmath66 is regular with respect to @xmath67 . in this latter case",
    ", @xmath68 is a proper ideal of @xmath30 $ ] . from now on @xmath69 $ ] is a regular chain ; moreover we write @xmath70 , @xmath71 and @xmath72 .",
    "the ideal enjoys several properties .",
    "first , its zero - set equals @xmath73 .",
    "second , the ideal is unmixed with dimension @xmath74 .",
    "moreover , any prime ideal @xmath75 associated to @xmath68 satisfies @xmath76 = \\langle 0 \\rangle$ ] .",
    "third , if @xmath77 , then @xmath68 is simply @xmath78 . given @xmath79 $ ] the _ pseudo - remainder _ ( resp .",
    "_ iterated resultant _ ) of @xmath12 w.r.t .",
    "@xmath6 , denoted by ( resp . ) is defined as follows . if @xmath80 or no variables of @xmath12 is algebraic w.r.t .",
    "@xmath6 , then @xmath81 ( resp .",
    "@xmath82 ) . otherwise , we set @xmath83 ( resp .",
    "@xmath84 ) where @xmath53 is the largest variable of @xmath12 which is algebraic w.r.t . @xmath6 and @xmath85 is the pseudo - remainder ( resp .",
    "resultant ) of @xmath12 and @xmath55 w.r.t .",
    "we have : @xmath12 is null ( resp .",
    "regular ) w.r.t . if and only if @xmath86 ( resp .",
    "@xmath87 ) .",
    "* regular gcd .",
    "* let @xmath88 be the ideal generated by @xmath89 in @xmath90 $ ] .",
    "then @xmath91 /i$ ] is a direct product of fields .",
    "it follows that every pair of univariate polynomials @xmath92 $ ] possesses a gcd in the sense of @xcite .",
    "the following gcd notion  @xcite is convenient since it avoids considering radical ideals .",
    "let @xmath93 $ ] be a regular chain and let @xmath94 $ ] be non - constant polynomials both with main variable @xmath14 .",
    "assume that the initials of @xmath12 and @xmath13 are regular modulo @xmath68 .",
    "a non - zero polynomial @xmath95 $ ] is a _ regular gcd _ of @xmath11 _ w.r.t . _",
    "@xmath6 if these conditions hold :    * @xmath96 is regular with respect to @xmath68 ; * there exist @xmath97 $ ] such that @xmath98 ; * if @xmath99 holds , then @xmath100 .    in this case",
    ", the polynomial @xmath10 has several properties .",
    "first , it is regular with respect to @xmath68 .",
    "moreover , if @xmath68 is radical and @xmath99 holds , then the ideals @xmath101 and @xmath102 of @xmath103 $ ] are equal , so that @xmath10 is a gcd of @xmath104 w.r.t .",
    "@xmath6 in the sense of  @xcite .",
    "the notion of a regular gcd can be used to compute intersections of algebraic varieties . as an example we will use formula  ( [ eq : regulargcdformula ] ) which follows from theorem 32 in  @xcite .",
    "assume that the regular chain @xmath6 is simply @xmath105 where @xmath106 , for @xmath107 , and let @xmath33 be the product of the initials of @xmath12 and @xmath13 .",
    "then , we have : @xmath108 * splitting . * two polynomials @xmath11 may not necessarily admit a regular gcd w.r.t . a regular chain @xmath6 , unless @xmath68 is prime , see example @xmath109 in section  [ sec : regulargcds ] . however ,",
    "if @xmath6 `` splits '' into several regular chains , then @xmath11 may admit a regular gcd w.r.t .",
    "each of them .",
    "this requires a notation . for non - empty regular chains",
    "@xmath110 $ ] we write @xmath111 whenever @xmath112 , @xmath113 and @xmath114 hold for all @xmath115 .",
    "if this holds , observe that any polynomial @xmath33 regular w.r.t @xmath68 is also regular w.r.t .",
    "@xmath116 for all @xmath115 .",
    "we list below the specifications of the fundamental operations on regular chains used in this paper .",
    "the names and specifications of these operations are the same as in the regularchains library  @xcite in maple .",
    "* regularize .",
    "* for a regular chain @xmath69 $ ] and @xmath12 in @xmath30 $ ] , the operation @xmath117 returns regular chains @xmath1 of @xmath30 $ ] such that , for each @xmath115 , @xmath12 is either zero or regular modulo @xmath116 and we have @xmath118 .",
    "* regulargcd .",
    "* let @xmath6 be a regular chain and let @xmath119 $ ] be non - constant with @xmath120 and such that both @xmath44 and @xmath121 are regular w.r.t . @xmath68 .",
    "then , the operation @xmath122 returns a sequence @xmath123 , called a _ regular gcd sequence _ , where @xmath124 are polynomials and @xmath1 are regular chains of @xmath30 $ ] , such that @xmath118 holds and @xmath125 is a regular gcd of @xmath11 w.r.t .",
    "@xmath4 for all @xmath115",
    ".    * normalform .",
    "* let @xmath6 be a zero - dimensional normalized regular chain , that is , a regular chain whose saturated ideal is zero - dimensional and whose initials are all in the base field .",
    "observe that @xmath6 is a lexicographic grbner basis .",
    "then , for @xmath79 $ ] , the operation returns the _ normal form _ of @xmath12 w.r.t .",
    "@xmath6 in the sense of grbner bases .    *",
    "* let @xmath6 be a regular chain such that each variable occurring in @xmath6 belongs to .",
    "let @xmath79 $ ] be non - constant with initial @xmath33 regular w.r.t .",
    "@xmath78 . assume each variable of @xmath33 belongs to .",
    "then @xmath33 is invertible modulo @xmath78 and @xmath126 returns @xmath127 where @xmath128 is the inverse of @xmath33 modulo @xmath78 .",
    "we follow the presentation of @xcite , @xcite and @xcite",
    ".    * determinantal polynomial . *",
    "let be a commutative ring with identity and let @xmath129 be positive integers .",
    "let @xmath130 be a @xmath131 matrix with coefficients in .",
    "let @xmath132 be the square submatrix of @xmath130 consisting of the first @xmath133 columns of @xmath130 and the @xmath134-th column of @xmath130 , for @xmath135 ; let @xmath136 be the determinant of @xmath132 .",
    "we denote by the element of @xmath9 $ ] , called the _",
    "determinantal polynomial _ of @xmath130 , given by @xmath137 note that if is not zero then its degree is at most @xmath138 .",
    "let @xmath139 be polynomials of @xmath9 $ ] of degree less than @xmath140 .",
    "we denote by @xmath141 the @xmath131 matrix whose @xmath134-th row contains the coefficients of @xmath142 , sorting in order of decreasing degree , and such that @xmath142 is treated as a polynomial of degree @xmath143 .",
    "we denote by @xmath144 the determinantal polynomial of @xmath141 .    * subresultant . *",
    "let @xmath145 $ ] be non - constant polynomials of respective degrees @xmath146 with @xmath147 .",
    "let @xmath148 be an integer with @xmath149 .",
    "then the @xmath148-th _ subresultant _ of @xmath12 and @xmath13 , denoted by @xmath150 , is @xmath151 this is a polynomial which belongs to the ideal generated by @xmath12 and @xmath13 in @xmath9 $ ] .",
    "in particular , @xmath152 is , the resultant of @xmath12 and @xmath13 . observe that if @xmath150 is not zero then its degree is at most @xmath148 .",
    "when @xmath150 has degree @xmath148 , it is said _ non - defective _ or _",
    "regular _ ; when @xmath153 and @xmath154 , @xmath150 is said _",
    "defective_. we denote by @xmath155 the coefficient of @xmath150 in @xmath156 . for convenience ,",
    "we extend the definition to the @xmath157-th subresultant as follows : @xmath158 where @xmath159 .",
    "note that when @xmath160 equals @xmath157 and @xmath161 is a regular element in @xmath162 , @xmath163 is in fact a polynomial over the total fraction ring of @xmath162 .",
    "we call _ specialization property of subresultants _ the following statement",
    ". let be another commutative ring with identity and @xmath164 a ring homomorphism from to such that we have @xmath165 and @xmath166 .",
    "then we also have @xmath167    * divisibility relations of subresultants . *",
    "the subresultants @xmath168 , @xmath169 , @xmath152 satisfy relations which induce an euclidean - like algorithm for computing them .",
    "following @xcite we first assume that @xmath170 is an integral domain . in the above , we simply write @xmath171 instead of @xmath172 , for @xmath173 .",
    "we write @xmath174 for @xmath175 $ ] whenever they are associated over @xmath176 , the field of fractions of . for @xmath177",
    ", we have :    * @xmath178 , the pseudo - remainder of @xmath12 by @xmath179 , * if @xmath180 , with @xmath181 , then the following holds : @xmath182 , * if @xmath183 , with @xmath184 , thus @xmath185 is defective , and we have * * @xmath186 , thus @xmath171 is non - defective , * * @xmath187 and @xmath188 , thus @xmath189 is non - defective , * * @xmath190 , * if @xmath191 and @xmath185 are nonzero , with respective degrees @xmath148 and @xmath192 , then we have @xmath193 ,    we consider now the case where is an arbitrary commutative ring , following theorem 4.3 in  @xcite .",
    "if @xmath194 are non zero , with respective degrees @xmath148 and @xmath192 and if @xmath155 is regular in then we have @xmath188 ; moreover , there exists @xmath195 $ ] such that we have : @xmath196 in addition @xmath190 also holds .",
    "throughout this section , we assume @xmath197 and we consider @xmath198 $ ] non - constant polynomials with the same main variable @xmath199 and such that @xmath200 holds .",
    "we denote by @xmath85 the resultant of @xmath12 and @xmath13 w.r.t .",
    "@xmath14 . let @xmath201 $ ] be a non - empty regular chain such that @xmath202 and the initials of @xmath11 are regular w.r.t .",
    "we denote by @xmath203 and @xmath170 the rings @xmath204 $ ] and @xmath204 / { \\mbox{$\\mathrm{sat}(t)$}}$ ] , respectively .",
    "let @xmath164 be both the canonical ring homomorphism from @xmath203 to @xmath170 and the ring homomorphism it induces from @xmath205 $ ] to @xmath9 $ ] . for @xmath206 ,",
    "we denote by @xmath207 the @xmath208-th subresultant of @xmath11 in @xmath205 $ ] .",
    "let @xmath148 be an index in the range @xmath209 such that @xmath210 for all @xmath211 .",
    "lemma  [ prop : regulargcdmodresultant5 ] and lemma  [ prop : regulargcdmodresultant3 ] exhibit conditions under which @xmath191 is a regular gcd of @xmath12 and @xmath13 w.r.t .",
    "@xmath6 . lemma  [ prop : regulargcdmodresultant1 ] and lemma  [ lemma::lsr ] investigate the properties of @xmath191 when @xmath212 is regular modulo and @xmath213 respectively .",
    "[ prop : regulargcdmodresultant1 ] if @xmath214 is regular modulo @xmath68 , then the polynomial @xmath191 is a non - defective subresultant of @xmath12 and @xmath13 over @xmath215 .",
    "consequently , @xmath216 is a non - defective subresultant of @xmath217 and @xmath218 in @xmath219 $ ] .",
    "when @xmath220 holds , we are done .",
    "assume @xmath221 .",
    "suppose @xmath191 is defective , that is , @xmath222 . according to item @xmath223 in the divisibility relations of subresultants",
    ", there exists a non - defective subresultant @xmath224 such that @xmath225 where @xmath226 is the leading coefficient of @xmath224 in @xmath14 . by our assumptions",
    ", @xmath189 belongs to @xmath68 , thus @xmath227 holds .",
    "it follows from the fact @xmath228 is regular modulo @xmath68 that @xmath171 is also in @xmath68 .",
    "however the fact that @xmath229 is regular modulo @xmath68 also implies that @xmath191 is regular modulo @xmath68 . a contradiction .",
    "[ lemma::lsr ] if @xmath212 is contained in @xmath68 , then all the coefficients of @xmath191 regarded as a univariate polynomial in @xmath14 are nilpotent modulo @xmath68 .",
    "if the leading coefficient @xmath230 is in @xmath68 , then @xmath231 holds for all the associated primes @xmath232 of @xmath68 . by the block structure theorem of subresultants ( theorem 7.9.1 of  @xcite ) over an integral domain @xmath233/\\mathfrak{p}$ ]",
    ", @xmath191 must belong to @xmath232 .",
    "hence we have @xmath234 .",
    "indeed , in a commutative ring , the radical of an ideal equals the intersection of all its associated primes .",
    "thus @xmath191 is nilpotent modulo @xmath68 .",
    "it follows from exercise 2 of  @xcite that all the coefficients of @xmath191 in @xmath14 are also nilpotent modulo @xmath68 .",
    "lemma  [ lemma::lsr ] implies that , whenever @xmath213 holds , the polynomial @xmath191 will vanish on all the components of @xmath68 after splitting @xmath6 sufficiently .",
    "this is the key reason why lemma  [ prop : regulargcdmodresultant1 ] can be applied for computing regular gcds .",
    "indeed , up to splitting via the operation regularize , one can always assume that either @xmath230 is regular modulo @xmath68 or @xmath230 belongs to @xmath68 . hence , from lemma  [ lemma::lsr ] and up to splitting , one can assume that either @xmath230 is regular modulo @xmath68 or @xmath191 belongs to @xmath68 .",
    "therefore , if @xmath235 , we consider the subresultant @xmath191 as a _ candidate regular gcd _ of @xmath12 and @xmath13 modulo @xmath68 .",
    "if @xmath214 is not regular modulo @xmath68 then @xmath191 may be defective .",
    "consider for instance the polynomials @xmath236 and @xmath237 in @xmath238 $ ] .",
    "we have @xmath239 and @xmath240 let @xmath241 .",
    "the last subresultant of @xmath11 modulo @xmath68 is @xmath242 , which has degree 0 w.r.t @xmath243 , although its index is @xmath109 .",
    "note that @xmath242 is nilpotent modulo @xmath68 .",
    "in what follows , we give sufficient conditions for the subresultant @xmath191 to be a regular gcd of @xmath12 and @xmath13 w.r.t .",
    "when @xmath68 is a radical ideal , lemma  [ prop : regulargcdmodresultant3 ] states that the assumptions of lemma  [ prop : regulargcdmodresultant1 ] are sufficient .",
    "this lemma validates the search for a regular gcd of @xmath12 and @xmath13 w.r.t .",
    "@xmath6 in a bottom - up style , from @xmath244 up to @xmath245 for some @xmath246 .",
    "lemma  [ prop : regulargcdmodresultant5 ] covers the case where @xmath68 is not radical and states that @xmath191 is a regular gcd of @xmath12 and @xmath13 modulo @xmath6 , provided that @xmath191 satisfies the conditions of lemma  [ prop : regulargcdmodresultant1 ] and provided that , for all @xmath247 , the coefficient @xmath248 of @xmath249 in @xmath250 is either null or regular modulo @xmath68 .",
    "[ prop : regulargcdmodresultant5 ] we reuse the notations and assumptions of lemma  [ prop : regulargcdmodresultant1 ] .",
    "then @xmath191 is a regular gcd of @xmath12 and @xmath13 modulo @xmath68 , if for all @xmath247 , the coefficient @xmath248 of @xmath249 in @xmath250 is either null or regular modulo @xmath68 .",
    "there are three conditions to satisfy for @xmath191 to be a regular gcd of @xmath12 and @xmath13 modulo @xmath68 :    * @xmath251 is regular modulo @xmath68 ; * there exists polynomials @xmath252 and @xmath53 such that @xmath253 ; and * both @xmath12 and @xmath13 are in @xmath254 .",
    "we will prove the lemma in three steps .",
    "we write @xmath255 as @xmath256 for brevity",
    ". may be less than the degree of @xmath250 , since its leading coefficient could be in @xmath68 .",
    "hence , @xmath257 may differ from @xmath258 .",
    "we carefully distinguish them when the leading coefficient of a subresultant is not regular in @xmath162 .",
    "]    claim 1 : if @xmath13 and @xmath259 are in @xmath68 , then @xmath191 is a regular gcd of @xmath12 and @xmath13 modulo @xmath68 .    indeed , the properties of @xmath191 imply conditions @xmath260 and @xmath261 and we only need to show that the condition @xmath262 also holds .",
    "if @xmath220 holds , then @xmath263 and we are done . otherwise , @xmath264 is not null modulo @xmath68 , because @xmath265 implies that all subresultants of @xmath266 and @xmath267 with index less than @xmath157 vanish over @xmath162 .",
    "if both @xmath268 and @xmath264 are in @xmath269 , then @xmath12 is also in @xmath269 , since @xmath161 is regular modulo @xmath68 and hence is regular modulo @xmath269 .",
    "this completes the proof of claim 1 .",
    "in order to prove that @xmath13 and @xmath259 are in @xmath68 , we define the following set of indices @xmath270 by assumption , @xmath271 is regular modulo @xmath68 for each @xmath272 .",
    "our arguments rely on the block structure theorem ( bst ) over an arbitrary ring  @xcite and ducos subresultant algorithm  @xcite along with the specialization property of subresultants .",
    "claim 2 : if @xmath273 , then @xmath274 holds for all @xmath275 .",
    "indeed , the bst over @xmath162 implies that there exists _ at most _ one subresultant @xmath207 such that @xmath276 and @xmath277 .",
    "therefore all but @xmath259 are in @xmath68 , and thus @xmath278 is defective of degree @xmath148 .",
    "more precisely , the bst over @xmath162 implies @xmath279 for some integer @xmath280 . according to relation  ( [ formula::blockrelation1 ] ) , @xmath281 is regular in @xmath162 .",
    "hence , we have @xmath282 . from the definition of @xmath191",
    ", we have @xmath283 .",
    "this implies @xmath284 .",
    "this completes the proof of claim 2 .",
    "now we consider the case @xmath285 .",
    "write @xmath286 explicitly as @xmath287 with @xmath288 and we assume @xmath289 . for convenience ,",
    "we write @xmath290 . for each integer @xmath291 satisfying @xmath292 we denote by @xmath293 the following property : @xmath294    claim 3 : the property @xmath293 holds for all @xmath292 .",
    "we proceed by induction on @xmath295 .",
    "the base case is @xmath296 .",
    "we need to show @xmath297 for all @xmath298 . by the definition of @xmath299",
    ", @xmath300 is a non - defective subresultant of @xmath266 and @xmath267 , and @xmath301 is in @xmath68 for all @xmath302 . by the bst over @xmath162 , there is _ at most _ one @xmath302 such that @xmath303 .",
    "if no such a subresultant exists , then we know that @xmath304 is in @xmath68 .",
    "consequently , @xmath305 holds , which implies @xmath306 for all @xmath307 . on the other hand ,",
    "if @xmath308 is not in @xmath68 for some @xmath309 , then @xmath310 is similar to @xmath311 over @xmath162 . to be more precise",
    ", we have @xmath312 for some integer @xmath280 . with the same reasoning as in the case @xmath273 , we know that @xmath313 is regular modulo @xmath68 and we deduce that @xmath314 holds .",
    "also , we have @xmath315 , by definition of @xmath191 . this implies @xmath305 from the fact that @xmath313 is regular modulo @xmath68 ( and thus regular modulo @xmath269 ) . hence , we have @xmath316 for all @xmath307 , as desired",
    ". therefore the property @xmath317 holds for @xmath296 .",
    "now we assume that the property @xmath318 holds for some @xmath319 .",
    "we prove that @xmath317 also holds .",
    "according to the bst over @xmath162 , we know that there exists _ at most _ one subresultant between @xmath320 and @xmath321 , both of which are non - defective subresultants of @xmath266 and @xmath267 .",
    "if @xmath322 holds for all @xmath323 , then we have @xmath324 for some @xmath325 and some integer @xmath280 .",
    "thus , we have @xmath326 by our induction hypothesis , and consequently , @xmath327 holds . on the other hand , if all subresultants @xmath328 ( for @xmath329 ) but @xmath330 ( for some index @xmath331 such that @xmath332 ) are in @xmath68 , then @xmath333 is similar to @xmath320 over @xmath162 , that is , we have @xmath334 for some integer @xmath280 . by relation  ( [ formula::blockrelation3 ] ) , @xmath335 is regular modulo @xmath68 , and thus is regular modulo @xmath269 .",
    "using relation  ( [ formula::blockrelation3 ] ) again , we have @xmath336 , since @xmath337 is in @xmath269 .",
    "also , we have @xmath338 for some @xmath339 and some integer @xmath280 . by the induction hypothesis",
    ", we deduce @xmath340 , which implies @xmath327 together with the fact that @xmath335 is regular modulo @xmath269 .",
    "this shows that @xmath274 holds for all @xmath341 .",
    "therefore , property @xmath317 holds .    finally , we apply claim 3 with @xmath342 , leading to @xmath274 for all @xmath343 , which completes the proof of our lemma .",
    "the consequence of the above corollary is that we ensure that @xmath191 is a regular gcd after checking that the leading coefficients of all non - defective subresultants above @xmath191 , are either null or regular modulo @xmath68 .",
    "therefore , one may be able to conclude that @xmath191 is a regular gcd simply after checking the coefficients `` along the diagonal '' of the pictorial representation of the subresultants of @xmath12 and @xmath13 , see figure  [ fig : bst ] .",
    "( 0,0)(20,8 ) ( 7,0)(8,0 ) ( 8.2,-0.2)@xmath344 ( 6,1)(8,1 ) ( 8.2,0.9)@xmath345 ( 4,3)(8,3 ) ( 8.2,2.9)@xmath346 ( 4,4)(8,4 ) ( 8.2,3.9)@xmath347 ( 2,5)(8,5 ) ( 8.2,4.9)@xmath348 ( 1,6)(8,6 ) ( 8.2,5.9)@xmath349 ( 0,7)(8,7 ) ( 8.2,6.9)@xmath12 ( 7,0)(1,6 ) ( 17,0)(18,0 ) ( 18.2,-0.2)@xmath350 ( 17,1)(18,1 ) ( 18.2,0.9)@xmath351 ( 14,3)(18,3 ) ( 18.2,2.9)@xmath352 ( 14,5)(18,5 ) ( 18.2,4.9)@xmath353 ( 11,6)(18,6 ) ( 18.2,5.9)@xmath354 ( 10,7)(18,7 ) ( 18.2,6.9)@xmath266 ( 17,0)(11,6 )    [ prop : regulargcdmodresultant3 ] with the assumptions of lemma  [ prop : regulargcdmodresultant1 ] , assume radical . then , @xmath191 is a regular gcd of @xmath11 w.r.t .",
    "@xmath6 .    as for lemma  [",
    "prop : regulargcdmodresultant5 ] , it suffices to check that @xmath12 and @xmath13 belong to @xmath355 .",
    "let @xmath75 be any prime ideal associated with .",
    "define @xmath356 / { \\mathfrak{p}}$ ] and let  be the fraction field of the integral domain .",
    "clearly @xmath191 is the last subresultant of @xmath18 in @xmath357 $ ] and thus in @xmath358 $ ] .",
    "hence @xmath191 is a gcd of @xmath18 in @xmath358 $ ] .",
    "thus @xmath191 divides @xmath18 in @xmath358 $ ] and pseudo - divides @xmath18 in @xmath357 $ ] .",
    "therefore @xmath359 and @xmath360 belong to @xmath75 .",
    "finally @xmath359 and @xmath360 belong to . indeed ,",
    "being radical , it is the intersection of its associated primes .",
    "[ sec : rgszr ]    following the notations and assumptions of section  [ sec : regulargcds ] we propose an algorithm for computing a regular gcd sequence of @xmath361 w.r.t . @xmath6 .",
    "as specified in section  [ sect : preliminaryfundamentaloperations ] .",
    "then , we show how to relax the assumption @xmath202 .",
    "there are three main ideas behind this algorithm .",
    "first , the subresultants of @xmath361 in @xmath205 $ ] are assumed to be known .",
    "we explain in section  [ sec : implementationandcomplexity ] how we compute them in our implementation . secondly , we rely on the * regularize * operation specified in section  [ sect : preliminaryfundamentaloperations ] .",
    "lastly , we inspect the subresultant chain of @xmath361 in @xmath205 $ ] in a bottom - up manner .",
    "therefore , we view @xmath362 as successive candidates and apply either lemma  [ prop : regulargcdmodresultant3 ] , ( if @xmath68 is known to be radical ) or lemma  [ prop : regulargcdmodresultant5 ] .",
    "* case where @xmath202 .",
    "* by virtue of lemma  [ prop : regulargcdmodresultant1 ] and lemma  [ lemma::lsr ] there exist regular chains @xmath363 $ ] such that @xmath111 holds and for each @xmath115 there exists an index @xmath364 such that the leading coefficient @xmath365 of the subresultant @xmath366 is regular modulo @xmath68 and @xmath367 for all @xmath368 .",
    "such regular chains can be computed using the operation regularize .",
    "if each @xmath116 is radical then it follows from lemma  [ prop : regulargcdmodresultant3 ] that @xmath369 is a regular gcd sequence of @xmath11 w.r.t .",
    "@xmath6 . in practice ,",
    "when is radical then so are all @xmath116 , see @xcite . if some @xmath116 is not known to be radical , then one can compute regular chains @xmath370 $ ] such that @xmath371 holds and for each @xmath372 there exists an index @xmath373 such that lemma  [ prop : regulargcdmodresultant5 ] applies and shows that the subresultant @xmath374 is regular gcd of @xmath11 w.r.t .",
    "such computation relies again on regularize .    *",
    "case where @xmath376 . *",
    "[ sec : regulargcdalgorithmgeneral ] we explain how to relax the assumption @xmath202 and thus obtain a general algorithm for the operation @xmath377 .",
    "the principle is straightforward .",
    "let @xmath378 .",
    "we call @xmath379 obtaining regular chains @xmath1 such that @xmath380 . for each @xmath115",
    "we compute a regular gcd sequence of @xmath12 and @xmath13 w.r.t . @xmath4 as follows : if @xmath381 holds then we proceed as described above ; otherwise @xmath382 holds and the resultant @xmath85 is actually a regular gcd of @xmath12 and @xmath13 w.r.t .",
    "@xmath4 by definition .",
    "observe that when @xmath381 holds the subresultant chain of @xmath12 and @xmath13 in @xmath14 is used to compute their regular gcd w.r.t .",
    "this is one of the motivations for the implementation techniques described in section  [ sec : implementationandcomplexity ] .",
    "in this section we address implementation techniques and complexity issues . we follow the notations introduced in section  [ sec : regulargcds ] .",
    "however we do not assume that @xmath383 belongs to the saturated ideal of the regular chain @xmath6 .    in section  [ sec : specilizationcube ]",
    "we describe our encoding of the subresultant chain of @xmath11 in @xmath30[y]$ ] .",
    "this representation is used in our implementation and complexity results . for simplicity our analysis",
    "is restricted to the case where is a finite field whose `` characteristic is large enough '' .",
    "the case where is the field of rational numbers could be handled in a similar fashion , with the necessary adjustments .",
    "one motivation for the design of the techniques presented in this paper is the solving of systems of two equations , say @xmath384 .",
    "indeed , this can be seen as a fundamental operation in incremental methods for solving systems of polynomial equations , such as the one of @xcite .",
    "we make two simple observations .",
    "formula  [ eq : regulargcdformula ] p.   shows that solving this system reduces `` essentially '' to computing @xmath85 and a regular gcd sequence of @xmath18 modulo @xmath105 , when @xmath85 is not constant .",
    "this is particularly true when @xmath385 since in this case the variety @xmath386 is likely to be empty for `` generic '' polynomials @xmath11 .",
    "the second observation is that , under the same genericity assumptions , a regular gcd @xmath10 of @xmath11 w.r.t .",
    "@xmath105 is likely to exist and have degree one w.r.t .",
    "@xmath14 . therefore ,",
    "once the subresultant chain of @xmath11 w.r.t .",
    "@xmath14 is calculated , one can obtain @xmath10 `` essentially '' at no additional cost .",
    "section  [ sec : resultantandgcsolvingtwoequations ] extends these observations with complexity results .    in section  [ sec : implementationforregulairze ]",
    "an algorithm for regularize and its implementation are discussed .",
    "we show how to create opportunities for using fast polynomial arithmetic and modular techniques , thus bringing significant improvements w.r.t . other algorithms for the same operation , as shown in section  [ sec : experimentation ] .",
    "following  @xcite , we evaluate @xmath387 at sufficiently may points such that the subresultants of @xmath12 and @xmath13 ( regarded as univariate polynomials in @xmath388 ) can be computed by interpolation . to be more precise , we need some notations .",
    "let @xmath389 be the maximum of the degrees of @xmath12 and @xmath13 in @xmath390 , for all @xmath391 .",
    "observe that @xmath392 is an upper bound for the degree of @xmath85 ( or any subresultant of @xmath12 and @xmath13 ) in @xmath390 , for all @xmath134 .",
    "let @xmath393 be the product @xmath394 .",
    "we proceed by evaluation / interpolation ; our sample points are chosen on an @xmath140-dimensional rectangular grid .",
    "we call `` scube '' the values of the subresultant chain of @xmath361 on this grid , which is precisely how the subresultants of @xmath361 are encoded in our implementation .",
    "of course , the validity of this approach requires that our evaluation points cancel no initials of @xmath12 or @xmath13 .",
    "even though finding such points deterministically is a difficult problem , this created no issue in our implementation .",
    "whenever possible ( typically , over suitable finite fields ) , we choose roots of unity as sample points , so that we can use fft ( or van der hoeven s truncated fourier transform  @xcite ) ; otherwise , the standard fast evaluation / interpolation algorithms are used .",
    "we have @xmath395 evaluations and @xmath396 interpolations to perform .",
    "since our sample points lie on a grid , the total cost becomes @xmath397 depending on the choice of the sample points ( see e.g.  @xcite for similar estimates ) .",
    "here , as usual , @xmath398 stands for the cost of multiplying polynomials of degree less than @xmath399 , see  ( * ? ? ?",
    "8) . using the estimate @xmath400 from  @xcite ,",
    "this respectively gives the bounds @xmath401 these estimates are far from optimal .",
    "a first important improvement ( present in our code ) consists in interpolating in the first place only the _ leading coefficients _ of the subresultants , and recover all other coefficients when needed .",
    "this is sufficient for the algorithms of section  [ sec : regulargcds ] .",
    "for instance , in the fft case , the cost is reduced to @xmath402 another desirable improvement would of course consist in using fast arithmetic based on _ half - gcd _",
    "techniques  @xcite , with the goal of reducing the total cost to @xmath403 , which is the best known bound for computing the resultant , or a given subresultant .",
    "however , as of now , we do not have such a result , due to the possible splittings .",
    "our goal now is to estimate the cost of computing the polynomials @xmath85 and @xmath10 in the context of formula  [ eq : regulargcdformula ] p.  .",
    "we propose an approach where the computation of @xmath10 essentially comes come free , once @xmath85 has been computed .",
    "this is a substantial improvement compared to traditional methods , such as  @xcite , which compute @xmath10 without recycling the intermediate calculations of @xmath85 . with the assumptions and notations of section  [ sec : specilizationcube ]",
    ", we saw that the resultant @xmath85 can be computed in at most @xmath404 operations in . in many cases",
    "( typically , with random systems ) , @xmath10 has degree one in @xmath405 .",
    "then , the gcd @xmath10 can be computed within the same bound as the resultant . besides , in this case , one can use the half - gcd approach instead of computing all subresultants of @xmath12 and @xmath13 .",
    "this leads to the following result in the bivariate case ; we omit its proof here .",
    "[ prop : ouralgorithm2 ] with @xmath406 , if @xmath407 is empty and @xmath408 , then solving the input system @xmath384 can be done in @xmath409 operations in .",
    "the operation regularize specified in section  [ sect : preliminarybasicdefinitions ] is a core routine in methods computing triangular decompositions .",
    "it has been used in the algorithms presented in section  [ sec : regulargcdalgorithm ] .",
    "algorithms for this operation appear in @xcite .",
    "the purpose of this section is to show how to realize efficiently this operation . for simplicity , we restrict ourselves to regular chains with zero - dimensional saturated ideals , in which case the separate operation of @xcite and the regularize operation @xcite are similar .",
    "for such a regular chain @xmath6 in @xmath30 $ ] and a polynomial @xmath79 $ ] we denote by @xmath410 the function call @xmath411 . in broad terms , it `` separates '' the points of @xmath412 that cancel @xmath12 from those which do not .",
    "the output is a set of regular chains @xmath413 such that the points of @xmath412 which cancel @xmath160 are given by the @xmath4 s modulo which @xmath160 is null .    algorithm  [ algo : isinvertible ] differs from those with similar specification in  @xcite by the fact it creates opportunities for using modular methods and fast polynomial arithmetic .",
    "our first trick is based on the following result ( theorem 1 in  @xcite ) : the polynomial @xmath160 is invertible modulo @xmath6 if and only if the iterated resultant of @xmath12 with respect to @xmath6 is non - zero .",
    "the correctness of algorithm  [ algo : isinvertible ] follows from this result , the specification of the operation regulargcd and an inductive process .",
    "similar proofs appear in  @xcite .",
    "a proof and complexity analysis of algorithm  [ algo : isinvertible ] will be reported in another article .",
    "the main novelty of algorithm  [ algo : isinvertible ] is to employ the fast evaluation / interpolation strategy described in section  [ sec : specilizationcube ] . in our implementation of algorithm  [ algo : isinvertible ] , at step @xmath414 , we compute the `` scube '' representing the subresultant chain of @xmath157 and @xmath415 .",
    "this allows us to compute the resultant @xmath416 and then to compute the regular gcds @xmath417 at step @xmath418 from the same `` scube '' . in this way ,",
    "intermediate computations are recycled . moreover",
    ", fast polynomial arithmetic is involved through the manipulation of the `` scube '' .",
    "[ algo : isinvertible ]    * input : * : :    @xmath6 a normalized zero - dimensional regular chain and    @xmath12 a polynomial , both in    @xmath19 $ ] .",
    "* output : * : :    see specification in section  [ sect : preliminaryfundamentaloperations ] .",
    "= = = = = = = = = = = = = @xmath410 = = + @xmath260 @xmath419 ; + @xmath261 @xmath420 * do * + @xmath262 @xmath421 * then * + @xmath422 @xmath423 : = @xmath424 + @xmath425 @xmath53 : = @xmath426 + @xmath414  @xmath416 : = @xmath427 + @xmath428  * for * @xmath429 * do * + @xmath430 @xmath431 + @xmath432 @xmath433 * then * + @xmath434 @xmath435 + @xmath436 @xmath437 + @xmath418 @xmath438 * do * + @xmath439 @xmath440 + @xmath441 @xmath442 + @xmath443 @xmath444 + @xmath445 @xmath446 + @xmath447 @xmath448 * then * + @xmath449 @xmath450 + @xmath451 @xmath423    in algorithm  [ algo : isinvertible ] , a routine regularizeinitialdim0 is called , whose specification is given below .",
    "see  @xcite for an algorithm .    *",
    "input : * : :    @xmath6 a normalized zero - dimensional regular chain and    @xmath160 a polynomial , both in    @xmath19 $ ] .",
    "* output : * : :    a set of pairs @xmath452 , in which    @xmath453 is a polynomial and @xmath4 is a regular    chain , such that either @xmath453 is a constant or its initial    is regular modulo @xmath116 , and    @xmath454 holds ;    moreover we have @xmath111 .",
    "we have implemented in c language all the algorithms presented in the previous sections .",
    "the corresponding functions rely on the asymptotically fast arithmetic operations from our modpn library  @xcite . for this new code",
    ", we have also realized a maple interface , called fastarithmetictools , which is a new module of the regularchains library  @xcite .    in this section ,",
    "we compare the performance of our fastarithmetictools commands with maple s and s existing counterparts . for maple , we use its latest release , namely version 13 ; for we use version v2.15 - 4 , which is the latest one at the time of writing this paper .",
    "however , for this release , the commands triangulardecomposition and saturation appear to be some time much slower than in version v2.14 - 8 .",
    "when this happens , we provide timings for both versions .",
    "we have three test cases dealing respectively with the solving of bivariate systems , the solving of systems of two equations and the regularity testing of a polynomial w.r.t . a zerodimensional regular chain . in our experimentation",
    "all polynomial coefficients are in a prime field whose characteristic is a 30bit prime number . for each of our figure or table",
    "the `` degree '' is the total degree of any polynomial in the input system .",
    "all the benchmarks were conducted on a 64bit intel pentium vi quad cpu 2.40 ghz machine with 4 mb cache and 3 gb main memory . for the solving of bivariate systems we compare the command triangularize of the regularchains library to the command bivariatemodulartriangularize of the module fastarithmetictools .",
    "indeed both commands have the same specification for such input systems .",
    "note that triangularize is a high - level generic code which applies to any type of input system and which does not rely on fast polynomial arithmetic or modular methods . on the contrary",
    ", bivariatemodulartriangularize is specialized to bivariate systems ( see section  [ sec : resultantandgcsolvingtwoequations ] and corollary  [ prop : ouralgorithm2 ] ) is mainly implemented in c and is supported by the modpn library .",
    "bivariatemodulartriangularize is an instance of a more general fast algorithm called fasttriangularize ; we use this second name in our figures .",
    "since a triangular decomposition can be regarded as a `` factored '' lexicographic grbner basis we also benchmark the computation of such bases in maple and .",
    "figure  [ densesolve2vsmaplesub ] compares fasttriangularize and ( lexicographic ) groebner :- basis in maple on generic dense input systems . on the largest input example",
    "the former solver is about 20 times faster than the latter .",
    "figure  [ splitsolve2vsmaple ] compares fasttriangularize and ( lexicographic ) groebner :- basis on highly non - equiprojectable dense input systems ; for these systems the number of equiprojectable components is about half the degree of the variety . at the total degree 23",
    "our solver is approximately 100 times faster than groebner :- basis .",
    "figure  [ splitsolve2vsmagma ] compares fasttriangularize , groebnerbasis in and triangulardecomposition in on the same set of highly non - equiprojectable dense input systems .",
    "once again our solver outperforms its competitors .        for the solving of systems with two equations ,",
    "we compare fasttriangularize ( implementing in this case the algorithm described in section  [ sec : resultantandgcsolvingtwoequations ] ) with groebnerbasis in . on figure  [ denseresgcd2vardftvsmagmab ] these two solvers are simply referred as and maple . for this benchmark",
    "the input systems are generic dense trivariate systems .",
    "figures  [ tab : inversenonsplit2 ] , [ tab : inversenonsplit3 ] and [ tab : inversesplit3 ] compare our fast regularity test algorithm ( algorithm  [ algo : isinvertible ] ) with the regularchains library regularize and its counterpart .",
    "more precisely , in , we first saturate the ideal generated by the input zerodimensional regular chain @xmath6 with the input polynomial @xmath12 using the saturation command .",
    "then the triangulardecomposition command decomposes the output produced by the first step .",
    "the total degree of the input @xmath134-th polynomial in @xmath6 is @xmath389 . for figure  [ tab : inversenonsplit2 ] and",
    "figure  [ tab : inversenonsplit3 ] the input @xmath6 and @xmath12 are random such that the intermediate computations do not split . in this `` non - splitting '' cases ,",
    "our fast regularize algorithm is significantly faster than the other commands .    for figure  [ tab : inversesplit3 ] the input @xmath6 and @xmath12",
    "are built such that many intermediate computations need to split .",
    "in this case , our fast regularize algorithm is slightly slower than its counterpart , but still much faster than the `` generic '' ( non - modular and non - supported by modpn ) regularize command of the regularchains library .",
    "the slow down w.r.t .",
    "the code is due to the ( large ) overheads of the c - maple interface , see @xcite for details .    [",
    "cols=\">,>,>,>,>\",options=\"header \" , ]",
    "the concept of a regular gcd extends the usual notion of polynomial gcd from polynomial rings over fields to polynomial rings modulo saturated ideals of regular chains",
    ". regular gcds play a central role in triangular decomposition methods .",
    "traditionally , regular gcds are computed in a top - down manner , by adapting standard prs techniques ( euclidean algorithm , subresultant algorithms ,  ) .    in this paper , we have examined the properties of regular gcds of two polynomials w.r.t a regular chain .",
    "the theoretical results presented in section  [ sec : regulargcds ] show that one can proceed in a bottom - up manner .",
    "this has three benefits described in section  [ sec : implementationandcomplexity ] .",
    "first , this algorithm is well - suited to employ modular methods and fast polynomial arithmetic .",
    "secondly , we avoid the repetition of ( potentially expensive ) intermediate computations .",
    "lastly , we avoid , as much as possible , computing modulo regular chains and use polynomial computations over the base field instead , while controlling expression swell .",
    "the experimental results reported in section  [ sec : experimentation ] illustrate the high efficiency of our algorithms .",
    "the authors would like to thank our friend changbo chen , who pointed out that lemma @xmath455 in an earlier version of this paper is incorrect ."
  ],
  "abstract_text": [
    "<S> the computation of triangular decompositions involves two fundamental operations : polynomial gcds modulo regular chains and regularity test modulo saturated ideals . </S>",
    "<S> we propose new algorithms for these core operations based on modular methods and fast polynomial arithmetic . </S>",
    "<S> we rely on new results connecting polynomial subresultants and gcds modulo regular chains . </S>",
    "<S> we report on extensive experimentation , comparing our code to pre - existing maple implementations , as well as more optimized functions . in most cases , </S>",
    "<S> our new code outperforms the other packages by several orders of magnitude .    * keywords * : fast polynomial arithmetic , regular chain , regular gcd , subresultants , triangular decomposition , polynomial systems . </S>"
  ]
}