{
  "article_text": [
    "have you sifted through paper folders or directories on your computer , trying to find out how you produced a result a couple of months ( or years ) ago ? or having to answer a question while traveling , with your folders safely stored in your office ? or a desperate collaborator trying to reach you about a project detail while you are hiking in the mountains ?",
    "it happened many times to me , and there must be a better way .",
    "in this paper the possibility to create an automated system for recording and making available to collaborators and peers the knowledge accumulated in the course of a project is explored .",
    "the work in a project is atomized as _",
    "sessions_. a session is defined as a transition @xmath0 from an initial @xmath1 to a final @xmath2 state : @xmath3 in this notation the work done during a session is represented by the transition operator @xmath0 .",
    "the length of a session is limited by the decision of the user to record a chunk of activity .",
    "a state can be recorded with different level of detail determined by the users : @xmath4 the system records automatically , in a persistent way , the logbook part for future use .",
    "information about the environment can be logged as well , but it is not stored in its entirety ( e.g. the operating system ) .",
    "the environment is considered as available or provided by the collaborating group .",
    "the splitting between logbook and environment parts is to some extent arbitrary",
    ". we will call it a _ collaborating contract _",
    ", in the sense that it defines the responsibilities of the parties involved in a project . a good splitting",
    "is characterized by the transition operator @xmath0 acting in a meaningful way on the logged part without affecting substantially the environment .",
    "if the level of detail is sufficient , each final state @xmath2 can be reproduced at will from the log of the initial state @xmath1 and the transition @xmath0 . a final state for one transition can serve as initial state for a new transition , enabling us to build arbitrarily long chains . the ability to reproduce states bring us to the notion of _ virtual state _ and _ virtual transition _ , in the sense that we can record states that existed in the past and can recreate them on demand in the future .",
    "virtual states serve as _ virtual checkpoints _ , or delimiters for _ virtual sessions_.    in a traditional programming language , the user typically codes the transition @xmath0 , i.e. provides in advance the source of the program for producing a given final state , following the syntax for the language used . the key idea in our approach",
    "is that the user works in a habitual way and the log for the session is created _ automatically , on the fly , _ while the session is progressing .",
    "there is no need per se to provide any code in advance , but the user can execute preexisting programs if desired .",
    "when a piece of work is worth recording , the user logs it in the persistent session repository with a unique identifier .",
    "let us illustrate this general framework with an example .",
    "we want to log the activities of users doing any kind of work on the command line e.g. in a unix shell .",
    "we start a session by recording details about the initial state e.g. the key - value pairs for all defined environment variables and aliases",
    ". then we give commands to the shell ( e.g. ls , cd , cp , mv , find , grep etc ) . during the session we could run some existing user shell scripts ( e.g. in csh , bash , python , perl ... ) , possibly providing input / output parameters when invoking them .",
    "if we collect and store all commands and the source code of all executed scripts as used during the session , we have automatically produced a log for the transition @xmath0 .",
    "optionally we can record the environment variables and aliases at the end of the session .",
    "later we may change any of the used scripts , even if they still have the same filenames , delete or accidentally lose some of them , forget which parameters were used or why . when we or a collaborator want to reproduce the session",
    ", we create a new sandbox ( clean slate ) and download from the repository the log for a given unique identifier .",
    "so we have both the commands and the scripts , as well as the input / output parameters , `` frozen '' as they were at the time of the session , and can reproduce the results",
    ".    the automatic logbooks can be augmented by annotations .",
    "if the users consider it helpful , they can provide additional information , just a couple of words or a whole paragraph , to describe the session .",
    "the annotations can be browsed by the members of a group , thus enhancing the collaborative experience both for experts and newcomers , and making the selection of sessions of interest much easier . when desirable , information from different phases of a project can easily be shared with other groups or peers .",
    "we stressed already the value of complete logs . in the heat of an active session ,",
    "when there is no time or need to be pedantical , users may see merit in storing sometimes also partial logs , a classical example being a program with hidden dependencies , e.g. the calling of a program or reading of a file within a program , not exposed externally . in this case , the final state will not be reproducible , but at least the log will point what is missing . or the users may even store a non - functional sequence of actions in the debugging phase for additional work later , even without producing a well defined final state",
    ". our system should be able to support partial logging , leaving the spectrum of possible use cases to the imagination of the collaborators .",
    "the codesh and caves  @xcite projects take a pragmatic approach in assessing the needs of a community of scientists or software developers by building series of working prototypes with increasing sophistication . by extending with automatic logbook capabilities the functionality of a typical unix shell ( like tcsh or bash ) - the codesh project , or a popular analysis package as root  @xcite - the caves project , these prototypes provide an easy and habitual entry point for researchers to explore new concepts in real life applications and to give valuable feedback for refining the system design .",
    "our goal is to stay close to the end users and listen carefully to their needs at all stages of a developing project .",
    "we have found that proceeding in this way helps to approach the optimal architecture .",
    "both projects use a three - tier architecture , with the users sitting at the top tier and running what looks very much like a normal shell or identical to a root session , and having extended capabilities , which are provided by the middle layer .",
    "this layer is coded in python for codesh or in c++ for caves , by inheriting from the class which handles the user input on the command line .",
    "the implemented capabilities are similar to the example in the previous section .",
    "there is no need to learn yet another programming language , and our goal is simplicity of design , keeping the number of commands and their parameters to the bare minimum needed for rich and useful functionality .  @xcite the lower tier provides the persistent back - end .",
    "the first implementations use a well established source code management system - the concurrent versions system cvs .",
    "it is well suited to provide version control for a rapid development by a large team and to store , by the mechanism of tagging releases , many versions so that they can be extracted in exactly the same form even if modified , added or deleted since that time .",
    "the cvs tags assume the role of unique identifiers for virtual sessions .",
    "more back - ends based on web , grid and other services are under development .  @xcite",
    "in this paper we have outlined the main ideas driving the codesh and caves projects for exploring automatic logbook concepts in scientific collaboration and software development .",
    "the decomposition of e.g. a typical analysis or shell session shows that the automatic logbook / virtual session approach bears great promise for qualitatively enhancing the collaborative work of research and software groups and the accumulation and sharing of knowledge in todays complex , large scale scientific / software environments .",
    "the confidence in results and their discovery and reuse grows with the ability to automatically log and reproduce them on demand .",
    "we have built first functional systems providing automatic logging in a typical working session .",
    "the systems have been demonstrated successfully at supercomputing 2003 , the root workshop and the dpf conference in 2004 .",
    "public releases are available for interested users , which are encouraged to contact the author .",
    "i would like to thank all members from the florida group of paul avery for the creative atmosphere which helped bring this work to fruition .",
    "the study is supported in part by the united states national science foundation under grants nsf itr-0086044 ( griphyn ) and nsf phy-0122557 ( ivdgl ) .",
    "d.  bourilkov , `` the caves project : exploring virtual data concepts for data analysis , '' arxiv : physics/0401007 , and references therein ; griphyn technical report 2004 - 3 .",
    "r.  brun and f.  rademakers , nucl .",
    "inst . & meth .",
    "in phys . res . * a 389 * , 81 - 86 ( 1997 ) .",
    "grid - enabled analysis environment project , http://ultralight.caltech.edu / gaeweb/."
  ],
  "abstract_text": [
    "<S> a key feature of collaboration in science and software development is to have a _ log _ of what and how is being done - for private use and reuse and for sharing selected parts with collaborators , which most often today are distributed geographically on an ever larger scale . </S>",
    "<S> even better if this log is _ </S>",
    "<S> automatic _ </S>",
    "<S> , created on the fly while a scientist or software developer is working in a habitual way , without the need for extra efforts . </S>",
    "<S> the caves and codesh projects address this problem in a novel way , building on the concepts of _ virtual state _ and _ virtual transition _ to provide an automatic persistent logbook for sessions of data analysis or software development in a collaborating group . </S>",
    "<S> a repository of sessions can be configured dynamically to record and make available the knowledge accumulated in the course of a scientific or software endeavor . </S>",
    "<S> access can be controlled to define logbooks of private sessions and sessions shared within or between collaborating groups . </S>"
  ]
}