{
  "article_text": [
    "[ section - intro ]      networks arise in a wide range of fields from biology @xcite to social media @xcite or web analysis @xcite@xcite . in most of these networks ,",
    "we observe groups of nodes that are densely connected between each other and sparsely connected to the rest of the graph .",
    "one of the most fundamental problems in the study of such networks consists in identifying these dense clusters of nodes .",
    "this problem is commonly referred to as _ community detection_.    a major challenge for community detection algorithms is their ability to process very large networks that are commonly observed in numerous fields .",
    "for instance , social networks have typically millions of nodes and billions of edges ( e.g. friendster @xcite ) .",
    "many algorithms have been proposed during the last ten years , using various techniques ranging from combinatorial optimization to spectral analysis @xcite .",
    "most of them fail to scale to such large real - life networks @xcite .      in this paper",
    ", we introduce a novel approach to detect communities in very large graphs .",
    "this approach is based on _ edge streams _ where network edges are streamed in a random order .",
    "the algorithm processes each edge strictly once .",
    "moreover , the algorithm only stores two integers for each node : its current community index and the number of adjacent edges that have already been processed .",
    "hence , the time complexity of the algorithm is linear in the number of edges and its space complexity is linear in the number of nodes . in the experimental evaluation of the algorithm we show that this streaming algorithm , called scoda ( streaming community detection algorithm ) , is able to handle massive graphs @xcite with low execution time and memory consumption .      a number of algorithms have been developed for detecting communities in networks or graphs @xcite .",
    "many rely on the optimization of some objective function that measures the quality of the detected communities .",
    "the most popular quality metric is the _ modularity _ @xcite , which is based on the comparison between the number of edges that are observed in each cluster and the number of edges that would be observed if the edges were randomly distributed .",
    "other metrics have been used with success , like the conductance , the out - degree fraction and the clustering coefficient @xcite .",
    "another popular class of algorithms uses random walks @xcite@xcite .",
    "these methods are based on the fact that random walks tend to get `` trapped '' in the dense zones of the graph .",
    "these techniques have proved to be efficient but are often time - consuming and fail to scale to large graphs @xcite .",
    "other popular methods include spectral clustering @xcite@xcite , clique percolation @xcite , statistical inference @xcite , or matrix factorization @xcite .",
    "the streaming approach has drawn considerable interest in network analysis over the last decade . within the data stream model , massive graphs with potentially billions of edges",
    "can be processed without being stored in memory @xcite .",
    "a lot of algorithm have been proposed for different problems that arise in large networks , such as counting subgraphs @xcite@xcite , computing matchings @xcite@xcite , finding the minimum spanning tree @xcite@xcite or graph sparsification @xcite .",
    "different types of data streams can be considered : _ insert - only streams _",
    ", where the stream is the unordered sequence of the network edges , or _ dynamic graph streams _ , where edges can both be added or deleted .",
    "many streaming algorithms rely on _ graph sketches _ which store the input in a memory - efficient way and are updated at each step @xcite .    in this paper , we use the streaming setting to define a novel community detection algorithm .",
    "we use randomized insert - only edge streams and define a minimal sketch , by storing only two integers per node .",
    "the rest of the paper is organized as follows .",
    "we first describe our streaming algorithm , scoda , in section [ section - algorithm ] . in section [ section - experiments ] , we evaluate experimentally the performance of scoda on real - life networks and compare it to state - of - the - art algorithms .",
    "a theoretical analysis of scoda is presented in section [ section - analysis ] .",
    "the choice of the only parameter of scoda , as used in the experiments , is justified in section [ section - parameter ] .",
    "section [ section - conclusion ] concludes the paper .",
    "[ section - algorithm ]    in this section , we define scoda , a streaming algorithm for community detection in graphs .      we are given an unweighted and undirected graph @xmath0 where @xmath1 is the set of vertices and @xmath2 the set of edges .",
    "we use @xmath3 to denote the number of nodes and @xmath4 the number of edges . without loss of generality , we consider that @xmath5 .",
    "let @xmath6 and @xmath7 be two subsets of @xmath1 .",
    "we use the following notations : @xmath8    note that we have @xmath9 .",
    "although there is no universal definition of what a community is , most existing algorithms rely on the principle that nodes tend to be more connected within a community than across communities .",
    "hence , if we pick uniformly at random an edge @xmath10 in @xmath2 , this edge is more likely to link nodes of the same community ( i.e. , @xmath10 is an _ intra - community _ edge ) , than nodes from distinct communities ( i.e. , @xmath10 is an _",
    "inter - community _ edge ) .",
    "equivalently , if the edges of @xmath2 are processed in a random order , we expect many intra - community edges to arrive before the inter - community edges .",
    "more formally , let @xmath11 be a community that we want to detect .",
    "if the edges of @xmath2 are randomly drawn without replacement , we can consider the event where the first @xmath12 edges drawn in @xmath13 are _ intra - community _ edges , i.e. in @xmath14 : @xmath15 the probability of this event is : @xmath16 = \\prod_{l=0}^{k-1 } \\frac{|e(c , c)| - l}{|e(c)| - l } = \\prod_{l=0}^{k-1 }   ( 1 - \\phi_l(c)),\\ ] ] where @xmath17 is very close to that of the conductance @xmath18 of @xmath19 , @xmath20 in particular , @xmath21 for small values of the conductance .",
    "we refer to @xmath22 as the _ pseudo - conductance _ in the rest of the paper .",
    "it is well known that _ good _ communities are subsets of @xmath1 with low conductance @xcite .",
    "we then expect @xmath23 to be low for small values of @xmath24 if @xmath19 is a good community and the probability of picking an _ inter - community _ edge within the first @xmath12 edges picked at random in @xmath13 to be low for small values of @xmath12 .",
    "this observation is used to design an algorithm that streams the edges of the network in a random order . for each arriving edge @xmath25 ,",
    "the algorithm places @xmath26 and @xmath27 in the same community if the edge arrives _ early _ ( intra - community edge ) and splits the nodes in distinct communities otherwise ( inter - community edge ) . in this formulation ,",
    "the notion of an _ early _ edge is of course critical . in the proposed algorithm",
    ", we consider that an edge @xmath25 arrives _ early _ if the current degrees of nodes @xmath26 and @xmath27 , accounting for previously arrived edges only , is low .",
    "more formally , the first step of the algorithm consists in shuffling the list of edges @xmath2 , i.e. , in generating a random permutation of the list of edges .",
    "the algorithm then considers edges in this particular order , say @xmath28 .",
    "each node is initally in its own community . for each new edge @xmath29 ,",
    "the algorithm performs one of the following actions :    * @xmath26 joins the community of @xmath27 ; * @xmath27 joins the community of @xmath26 ; * no action .",
    "the choice of the action depends on the updated degrees @xmath30 and @xmath31 of nodes @xmath26 and @xmath27 , i.e. , the degree computed using the edges @xmath32 . if @xmath30 or @xmath31 is greater than a given threshold @xmath33 , then we do nothing ; otherwise , the node with the lowest degree joins the community of the other node .",
    "the algorithm scoda is defined in algorithm [ scoda ] .",
    "it takes the list of edges of the graph and one integer parameter @xmath34 .",
    "the algorithm builds two arrays @xmath35 and @xmath36 of size @xmath3 . at the end of the algorithm",
    ", @xmath37 is the degree of node @xmath38 , and @xmath39 the community of node @xmath38 .",
    "when the algorithm starts , each node has degree zero and is in its own community ( @xmath40 and @xmath41 for all @xmath38 ) .",
    "then , the list of edges is shuffled and the main loop iterates over the edges in this random order .",
    "for each new edge @xmath42 , the degrees of @xmath26 and @xmath27 are updated .",
    "then , if these degrees are both lower than the threshold parameter @xmath33 , the node with the lower degree joins the community of the other node .",
    "otherwise , the communities remain unchanged .    list of edges @xmath2 between nodes @xmath43 and parameter @xmath34 for all @xmath44 , @xmath45 and @xmath46 shuffle the list of edges @xmath2 @xmath47 @xmath48 edge of @xmath2 @xmath49 and @xmath50 @xmath51  @xmath52 @xmath53    observe that , in case of equality @xmath54 , @xmath27 joins the community of @xmath26 .",
    "of course , this choice is arbitrary and can be made random ( e.g. , @xmath26 joins the community of @xmath27 with probability @xmath55 and @xmath27 joins the community of @xmath26 with probability @xmath55 ) .",
    "equivalently , the random shuffling of the list of edges may include for each edge @xmath56 a random choice between @xmath57 and @xmath58 .",
    "an example of execution of the algorithm on a toy network of 13 nodes and 25 edges is shown in figure [ fig - example ] . observe that this execution of scoda is able to perfectly recover the two underlying communities .",
    "this depends on the random shuffling of the edges , however , and another instance may give a different output . in the next section , we analyse the ability of scoda to detect communities in real - life graphs , as well as the variance of the results provided by different executions of the algorithm .",
    "example of scoda execution on a small network : , height=415 ]    note that when an edge @xmath57 arrives , only the community memberships of @xmath26 and @xmath27 are modified . in particular there is _ no propagation _ of a community change to the neighbors of @xmath26 or @xmath27 . in figure [ fig - example ] , we see for instance that , when edge @xmath59 is streamed , only node @xmath60 is transferred to community @xmath61 .",
    "a consequence of this absence of propagation is that scoda is _ embarrassingly parallel _ : the execution of the algorithm can be split into tasks , each processing a subset of the edges , with @xmath35 and @xmath36 stored in a shared memory .",
    "we also remark that the algorithm easily extends to weighted graph .",
    "indeed , we can consider that each edge is drawn with a probability proportional to its weight instead of considering uniform probabilities .",
    "the algorithm contains three parts : the initialization of the vectors @xmath35 and @xmath36 , which is linear in @xmath3 , the shuffling of the list of edges , which is linear in @xmath4 with the fisher - yates algorithm @xcite , and the main loop which is also linear in @xmath4 .",
    "thus , the time complexity of the algorithm is linear in @xmath4 ( assuming that @xmath4 is larger than @xmath3 , which is the case in practice ) .",
    "concerning the space complexity , we only use two arrays of integers of size @xmath3 , @xmath35 and @xmath36 .",
    "note that the algorithm does not need to store the list of edges in memory , but can simply read it in a random order , which is the main benefit of the streaming approach .",
    "hence , the space complexity of the algorithm is @xmath62 .      in the rest of the paper , the only parameter of scoda , @xmath33 ,",
    "is set to the _ mode _ of the degree distribution of the network , i.e. , the degree that appears most often in the graph , excluding the leaf nodes .",
    "hence we take @xmath63 with    @xmath64    this choice is justified in section [ section - parameter ] .    note",
    "that the computation of @xmath65 for a given graph is linear in the number of edges @xmath4 and can be done in a streaming way like scoda ( but before the execution of scoda ) .",
    "indeed , it is sufficient to know the degree of each node ; computing @xmath65 then requires @xmath3 comparisons .",
    "[ section - experiments ]      we use real - life networks provided by the stanford social network analysis project ( snap @xcite ) for the experimental evaluation of scoda .",
    "these datasets include ground - truth community memberships that we use to measure the quality of the detection .",
    "we consider datasets of different natures :    * * social networks * : the youtube , livejournal , orkut and friendster datasets correspond to social networks @xcite@xcite where nodes represent users and edges connect users who have a friendship relation . in all these networks",
    ", users can create groups that are used as ground - truth communities in the dataset definitions . * * co - purchasing network * : the amazon dataset corresponds to a product co - purchasing network @xcite .",
    "the nodes of the graph represent amazon products and the edges correspond to frequently co - purchased products .",
    "the ground - truth communities are defined as the product categories . * * co - citation network * : the dblp dataset corresponds to a scientific collaboration network @xcite .",
    "the nodes of the graph represent the authors and the edges the co - authorship relations .",
    "the scientific conferences are used as ground - truth communities .",
    "the size of these networks ranges from approximately one million edges to more than one billion edges .",
    "it enables us to test the ability of scoda to scale to very large networks .",
    "the characteristics of these datasets can be found in table [ snap - datasets ] .    .snap",
    "datasets used for the benchmark on real networks [ cols=\"<,>,>,>\",options=\"header \" , ]      in section [ section - analysis ] , we observed that the odfs of nodes at the boundary of community @xmath19 need to be higher than @xmath33 in order to obtain few false positive edges .",
    "besides , we have seen that @xmath33 must be close to the intra - community degree in @xmath19 in order to decrease the likelihood for @xmath19 to be split into sub - clusters by scoda .",
    "these arguments suggest that the parameter @xmath33 should be close to the typical value of intra - community degrees in the network .",
    "since most nodes have few inter - community links , this is well approximated by the most probable degree in the graph , that is the mode of the degree distribution as chosen in our experiments .",
    "observe that the average and the median are not _ typical _ values of the degree of a node , which may explain the worse performance of scoda in these cases .",
    "[ section - conclusion ]    we introduced a novel approach for community detection based on a random stream of edges .",
    "this approach is based on simple properties of such edge streams , that are closely related to important concepts in network analysis such as conductance and out - degree fraction .",
    "we designed an algorithm , named scoda , that stores only two integers for each node and runs linearly in the number of edges . in our experiments , scoda runs more than 10 times faster than state - of - the - art algorithms such as louvain and scd and shows better detection scores on the largest networks",
    ". thus scoda would be useful in many applications where massive graphs arise .",
    "for example , the web graph contains around @xmath66 nodes which is much more than in the friendster dataset .",
    "while we evaluated the performance of the algorithm on static graphs only , it would be interesting for future work to measure the ability of scoda to handle evolving networks by conducting benchmarks on dynamic datasets @xcite with existing approaches @xcite@xcite .",
    "note that modifications to the algorithm design could be made to handle events such as edge deletions .",
    "another interesting research direction would be to exploit the fact that , between two runs of scoda , the _ transfer - edges _ and the _ blank - edges _ can change .",
    "for each edge of the network , we could count how many times it corresponds to a _ transfer - edge _ over several runs and use this result to refine the community detection with , for instance , a boostrap aggregating approach @xcite .",
    "furthermore , we remark that the condition @xmath67 and @xmath68 plays an important role in the definition of the algorithm .",
    "future works could explore different ways to define when an edge arrives _ early _ or _",
    "late_. for instance , the general condition @xmath69 , could lead to different results for certain choices of @xmath70 .",
    "finally , scoda only returns disjoint communities , whereas , in many real networks , overlaps between communities can be observed @xcite .",
    "an important research direction would consist in adapting scoda to overlapping community detection and compare it to existing approaches @xcite@xcite ."
  ],
  "abstract_text": [
    "<S> in this paper , we introduce a novel community detection algorithm in graphs , called scoda ( streaming community detection algorithm ) , based on an edge streaming setting . </S>",
    "<S> this algorithm has an extremely low memory footprint and a lightning - fast execution time as it only stores two integers per node and processes each edge strictly once . </S>",
    "<S> the approach is based on the following simple observation : if we pick an edge uniformly at random in the network , this edge is more likely to connect two nodes of the same community than two nodes of distinct communities . </S>",
    "<S> we exploit this idea to build communities by local changes at each edge arrival . using theoretical arguments </S>",
    "<S> , we relate the ability of scoda to detect communities to usual quality metrics of these communities like the conductance . </S>",
    "<S> experimental results performed on massive real - life networks ranging from one million to more than one billion edges shows that scoda runs more than ten times faster than existing algorithms and leads to similar or better detection scores on the largest graphs . </S>"
  ]
}