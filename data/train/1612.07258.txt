{
  "article_text": [
    "boolean satisfiability is a well known np - complete problem that serves as the basis for many computationally hard tasks .",
    "some of these applications , such as formal software verification and data mining , are well served by solvers which are capable of finding more than one satisfying assignment of variables , or even all such solutions @xcite .",
    "quantum annealing ( qa ) has been applied to the solution of weighted max 2-sat problems @xcite , the construction of sat filters @xcite , sat variants @xcite , and frustrated loop problems inspired by sat @xcite .",
    "qa hardware operates by performing many annealing ( solving ) cycles , returning a potential solution sample for each cycle @xcite .",
    "we seek to discover whether quantum annealers could provide an advantage in finding multiple solutions to satisfiability problems .",
    "we first provide a construction for posing satisfiability problems to quantum annealing hardware solvers in section [ sec_sat_penalty ] .",
    "section [ sec_mixedsat ] defines our problem set , and section [ sec_results ] details the results of our quantum and classical solution sampling comparision .",
    "satisfiability problems in general consist of a conjunction of disjunctive clauses . the conjunction can be achieved on quantum annealing hardware by summing terms representing individual clauses , so we will focus here on defining the disjunctive clause hamiltonian penalty functions , which we denote @xmath0 , with @xmath1 the number of variables in each clause .",
    "the clauses are built using a cascading - or construction , which requires @xmath2 qubits per clause .",
    "it should be noted that the resulting clauses are not directly embeddable on qa hardware graphs .",
    "no direct embeddings are proposed here , primarily due to the fact that many clauses share variables , and by the time this is taken into account in building the hamiltonian , a heuristic embedding algorithm for the problem as a whole will still be required .",
    "the overhead of heuristic embedders for qa hardware graphs is of course an entire line of research on its own .",
    "we begin our construction with two building blocks .",
    "the first is @xmath3 the ground states of which represent the states for which @xmath4 evaluates to true , i.e. the states for which the @xmath5-sat clause is satisfied .",
    "we also define an `` or with output '' penalty function @xmath6 which has as its ground states the states where @xmath7 , the crucial difference being that the correct state of the or output is included in the penalty function . by substituting the output bit @xmath8 from the or function for @xmath9 in @xmath10",
    ", we can easily construct @xmath11 : @xmath12 where the part of the equation in parenthesis represents @xmath13 applied to @xmath9 and @xmath14 , with its output @xmath15 cascaded into one of the qubits in @xmath10 .",
    "note that the term @xmath16 appears twice in the equation because it is shared between @xmath13 and @xmath10 , so the collected term would be @xmath17",
    ". see figure [ blocks_figure ] for diagrams of the basic penalty functions we have introduced .",
    "0.45     0.45     penalty functions @xmath0 of any size can be built inductively by extending this methodology .",
    "start with a valid @xmath18 , choose any of the qubits which directly represent problem variables ( shown in above equations as @xmath19 ) , and substitute the output qubit of @xmath13 into its place .",
    "the size of the penalty function grows by @xmath5 qubits because we are putting three in the place of one .",
    "because we can choose any problem variable qubit , we can define multiple equivalent @xmath0 penalty functions depending on which substitution we use .",
    "figure [ options_figure ] shows several possible constructions of @xmath11 and @xmath20 penalty functions .    0.45   and @xmath20",
    ". the penalty function can take different forms depending on which logical variable qubits are extended by @xmath13 ; these forms become more varied as @xmath1 increases and the decision tree widens.,title=\"fig : \" ]    0.45   and @xmath20 .",
    "the penalty function can take different forms depending on which logical variable qubits are extended by @xmath13 ; these forms become more varied as @xmath1 increases and the decision tree widens.,title=\"fig : \" ]    0.5   and @xmath20 .",
    "the penalty function can take different forms depending on which logical variable qubits are extended by @xmath13 ; these forms become more varied as @xmath1 increases and the decision tree widens.,title=\"fig : \" ]    0.5   and @xmath20 .",
    "the penalty function can take different forms depending on which logical variable qubits are extended by @xmath13 ; these forms become more varied as @xmath1 increases and the decision tree widens.,title=\"fig : \" ]",
    "the test problem set for this study consists of a group of mixed sat problems which contain clauses of diverse lengths ( as compared to the standard 3-sat , in which each clause involves three variables ) .",
    "the test set was tailored to be feasible on the d - wave 2x generation of quantum annealers .",
    "we ran @xmath21 instances with @xmath22 on a @xmath23 qubit qa chip , taking @xmath24 solution samples for each instance and parameter setting at an annealing time of @xmath25 microseconds per sample .",
    "these instances were a subset of a larger set of mixed sat instances which was generated randomly , then downselected based on number of solutions ( less than a million ) and embeddability of the resulting penalty function on hardware .",
    "we considered two timing metrics for the quantum annealer results .",
    "the first , core annealing time , is important because it captures the key physics of the computation .",
    "the quantum annealer calculates the satisfying assignment by performing an adiabatic quantum evolution from a known original hardware state to the unknown problem solution .",
    "this process is the _ core anneal _ , and is the key difference between quantum annealers and classical hardware . by separating the core anneal time from other hardware times",
    ", we get an idea of the essential limits on this type of computation .",
    "we also present results using wallclock time for the quantum annealer .",
    "this includes , among many things , programming time , thermalization time ( so the chip can cool down after programming ) , core annealing time , readout time , and postprocessing time .",
    "the wallclock time is how long we have to wait for results from the current generation of quantum annealers .",
    "however , there is reason to believe that many of the elements within the wallclock time will be subject to engineering improvement in the near term .",
    "we used a recently published classical all - sat solver @xcite to count the solutions for each problem and establish a timing baseline .",
    "toda and soh programmed several all - sat modifications to minisat , a well known single - solution sat solver .",
    "we used the version that performed best in their benchmarks .",
    "the optimality of this solver for all - sat problems in general and mixed sat in particular is not established , but it is the current state of the art .",
    "all times shown for the classical solver are wallclock times .",
    "the solver timestamped each solution , so we have granular timing data as to when each solution was found .",
    "when only core annealing time is considered , most instances in the problem set initially find solutions faster than the classical solver . in figure",
    "[ fig_instance_2_anneal ] , the classical and quantum curves for time to find distinct solutions are shown .",
    "the quantum annealer initially finds solutions much more quickly , but slows in the rate at which it finds new solutions , allowing the classical curve to cross under it .",
    "figure [ fig_crossover ] shows these crossover points for the entire instance set .",
    "we find an initial quantum advantage in the tens of solutions for most instances .",
    "it is relevant to note that the sets of solutions found by the classical and quantum solvers at the crossover point have low overlap ( see figure [ fig_overlap ] for details ) .        .",
    "error bars represent the resolution of the timing data . ]",
    "when all quantum processor activities are accounted for , and we compare quantum wallclock to classical wallclock time , the initial advantage disappears .",
    "figure [ fig_instance_2_wallclock ] shows the same instance as figure [ fig_instance_2_anneal ] , but with the quantum wallclock rather than core anneal time .",
    "the quantum curve is immediately at a disadvantage and never crosses the lower classical time curve .",
    "this is true for all instances in the set we studied .    , with the quantum curve measured in wallclock rather than core annealing time .",
    "any quantum advantage is lost . ]      quantum annealers solve problems by sampling from the low energy state space of the penalty function , so it is natural to consider the application of quantum annealers as solution samplers for problems of interest . in particular , we were interested in whether quantum annealers could provide more variety in the answer set than classical solvers , particularly because the quantum penalty function can be subjected to trivial spin reversal transformations or parameter settings that leave the identity of the ground state solutions the same but change the physics of the solving process @xcite . to measure the diversity of the solution set ,",
    "we look at the hamming distance between neighboring solution samples ( figure [ fig_hamming_neighbor ] ) .",
    "we find that the classical solver is both more consistent in the distribution of solutions and finds solutions that are more widely separated in hamming distance .",
    "quantum annealers have the potential to assist in finding multiple solutions to mixed satisfiability problems , but in their current form are not ready for the task . the advantage",
    "in time for finding an initial set of solution samples seen when only core annealing time is considered and the low overlap between the quantum and classical crossover solution sets points to a potential future role for a quantum solver as a helper to a classical solver .",
    "indeed , it might be possible to run the quantum solver to crossover with the classical solver , apply a spin reversal transformation , and run the quantum solver again to find another set of solutions .",
    "however , with current quantum annealing technology , the overhead timing factors included in the wallclock time destroy any advantage ."
  ],
  "abstract_text": [
    "<S> the utility of satisfiability ( sat ) as an application focused hard computational problem is well established . </S>",
    "<S> we explore the potential of quantum annealing to enhance classical sat solving , especially where sampling from the space of all possible solutions is of interest . </S>",
    "<S> we address the formulation of sat problems to make them suitable for commercial quantum annealers , practical concerns in their implementation , and how the performance of the resulting quantum solver compares to and complements classical sat solvers .    ,    ,    , and    quantum annealing , satisfiability , quantum information </S>"
  ]
}