{
  "article_text": [
    "motif search problems are of central importance for sequence analysis in computational molecular biology .",
    "these problems have applications in fields such as genetic drug target identification or signal finding ( see @xcite and the references cited therein for more details and further applications ) .",
    "two core problems in this context are closest substring  @xcite and consensus patterns  @xcite :    * input : * @xmath1 strings @xmath7 over alphabet  @xmath8 and non - negative integers  @xmath9 and  @xmath10 .",
    "+   + * question in case of closest substring : * is there a string  @xmath11 of length  @xmath10 , and for @xmath12 , a substring @xmath13 of length  @xmath10 such that , for all @xmath14 , @xmath15 ? ( here @xmath16 denotes the hamming distance between  @xmath11 and  @xmath17 . ) +   + * question in case of consensus patterns : * is there a string  @xmath11 of length  @xmath10 , and for @xmath12 , a substring @xmath13 of length  @xmath10 such that , @xmath18 ? +    what is currently known about these two problems is summarized as follows .    *",
    "the closest substring problem . *    1 .",
    "closest substring is @xmath6-complete , and remains so for the special case of the closest string problem , where the string  @xmath11 that we search for is of same length as the input strings .",
    "closest string is @xmath6-complete even for the further restriction to a binary alphabet  @xcite .",
    "2 .   on the positive side , both closest substring and",
    "closest string admit polynomial time approximation schemes ( ptas s ) , where the objective function is the maximum length of the string @xmath11  @xcite .",
    "3 .   in the ptas s for both closest string and closest substring , the exponent of the polynomial bounding the running time depends on the goodness of the approximation .",
    "these are not efficient ptas s ( eptas s ) in the sense of @xcite and therefore are probably not useful for bioinformatics practice . whether eptas s are possible for these approximation problems , or whether they are @xmath19$]-hard ( for the parameter @xmath20 , where the approximation is to within a factor of @xmath21 of optimal ) , currently remains open .",
    "closest string is _ fixed - parameter tractable _ with respect to the parameter  @xmath9 , and can be solved in time @xmath22",
    "closest string is also fixed - parameter tractable with respect to the parameter  @xmath1 , but here the exponential parametric function is much faster growing , and the algorithm is probably of less practical use ( see , however , @xcite for some encouraging experimental results also in this case ) .    *",
    "the consensus patterns problem . *    1 .",
    "consensus patterns is @xmath6-complete and remains so for the restriction to a binary alphabet  @xcite .",
    "2 .   consensus patterns admits a ptas  @xcite , where the objective function is the maximum length of the string @xmath11 .",
    "3 .   the known ptas s for consensus patterns",
    "are not eptas s , and whether eptas s are possible , or whether ptas approximation for this objective function is @xmath19$]-hard , is an important issue that also currently remains open .",
    "the key distinguishing point between closest substring and consensus patterns lies in the definition of the distance measure @xmath9 between the `` solution '' string @xmath11 and the substrings of the @xmath1 input strings .",
    "whereas closest substring uses a maximum distance metric , consensus patterns uses the sum of distances metric .",
    "this is of particular importance when discussing values of parameter  @xmath9 occurring in practice . whereas it makes good sense for many applications to assume that @xmath9 is a fairly small number in case of closest substring , this is much less reasonable in the case of consensus patterns",
    "this will be of some importance when discussing our result for consensus patterns .",
    "many algorithms applied in practice try to solve motif search problems exactly , often using enumerative approaches in combination with heuristics  @xcite . in this paper",
    ", we explore the parameterized complexity of the basic motif problems in the framework of @xcite .    * our main results . *    unfortunately , our main results are negative ones : we show that closest substring and consensus patterns are w[1]-hard with respect to the parameter  @xmath1 of the number of input strings , even in case of a binary alphabet .    for unbounded alphabet size ,",
    "we show that the problems are @xmath0$]-hard for the combined parameters",
    "@xmath10 , @xmath9 , and  @xmath1 . in the case of constant alphabet size",
    ", the complexity of the problems remain open when parameterized by @xmath9 and  @xmath1 together , or by  @xmath9 alone .",
    "note that in the case of consensus patterns our result gains particular importance , because here the distance parameter  @xmath9 usually is not small , whereas assuming that @xmath1 is small is reasonable . until now",
    ", it was known only that if one additionally considers the substring length  @xmath10 as a parameter , then running times exponential in  @xmath10 can be achieved  @xcite . an overview on known parameterized complexity results for closest substring and consensus patterns is given in table  @xmath23 .",
    ".overview on the parameterized complexity of @xmath24 and consensus patterns with respect to different parameterizations , where @xmath1 is the number of given strings , @xmath10 is the length of the substrings we search for , and @xmath9 is the hamming distance allowed .",
    "results from this paper are marked by @xmath25 .",
    "the @xmath26 results for constant size alphabet can be achieved by enumerating all length  @xmath10 strings over @xmath8 .",
    "open questions are indicated by a question mark . [ cols=\"^,^,^\",options=\"header \" , ]     as is obvious from these distance values , the indicated substrings in the choice strings all have hamming distance @xmath27 to the solution string and , therefore , are matches for  @xmath11 .    for the reverse direction , we assume that the @xmath24 instance has a solution .",
    "we need the following statements :    [ fronttag ] a solution  @xmath11 and all its matches in the input instance start with the front  tag .",
    "since  @xmath11 is of length @xmath28 , the only possible match in the template string is the template string itself .",
    "therefore , @xmath29 can differ from @xmath30 in at most @xmath27 symbols .",
    "we can show that the only substrings in a choice string @xmath31 that are possible matches for  @xmath11 with hamming distance at most @xmath9 start with the front tag , as we argue in the following .    since  @xmath11 is a solution",
    ", there is a match in @xmath31 and we denote it by  @xmath32 .",
    "denote the the first @xmath33 symbols of  @xmath32 by  @xmath34 .",
    "since @xmath35 and @xmath36 , we necessarily ( triangle inequality for hamming metric ) have @xmath37 .",
    "we show that this is only possible when @xmath34 coincides with a front tag of a block of  @xmath31 . assuming that it does not",
    ", we will show that @xmath38 , a contradiction .",
    "firstly , assume that the starting position of @xmath34 and the starting position of a front tag in  @xmath31 differ by @xmath39  positions , @xmath40 .",
    "then , at least @xmath41 symbols  `` 0 '' of  @xmath30 are aligned with symbols  `` 1 '' of the front tag in  @xmath34 and at least @xmath41 symbols  `` 1 '' of  @xmath30 are aligned with symbols  `` 0 '' of  @xmath34 .",
    "this implies @xmath42 .",
    "secondly , assume that the starting position of @xmath34 and the starting position of its closest front tag in  @xmath31 differ by @xmath43  positions .",
    "then , a block of @xmath44 symbols  `` 1 '' falls onto the encoding and/or the back tag part of  @xmath34 .",
    "since the encoding part and back tag contain together only @xmath45 ( under the assumption that @xmath46 ) many symbols  `` 1 '' , we have more than @xmath47 mismatching symbols and @xmath48 .    summarizing",
    ", we conclude that @xmath34 coincides with a front tag in choice string  @xmath49 , i.e. , @xmath50 .",
    "[ exactlyk ] the encoding part of  @xmath11 contains exactly  @xmath1 symbols  `` 1 '' .",
    "assume that  @xmath11 has less than  @xmath1 symbols  `` 1 '' in its encoding part , i.e. , @xmath51 contains less than  @xmath1 symbols  `` 1 '' .",
    "then , because @xmath52 , @xmath53 , implying @xmath54 , a contradiction .",
    "assume that  @xmath11 has more than  @xmath1 `` 1 ''  symbols in its encoding part  @xmath51 .",
    "then , @xmath55 for the encoding part  @xmath56 of a match in every choice string @xmath31 .",
    "now consider the solution s back tag  @xmath57 . to achieve @xmath58",
    ", we need  @xmath59 and @xmath57 must contain one or more symbols  `` 1 '' .",
    "every `` 1 ''  symbol in  @xmath57 will decrease the value  @xmath60 for a block  @xmath32 of _ one _ choice string @xmath31 by one , but will increase the solution s hamming distance to the selected blocks of _ all other _ choice strings .",
    "no matter how many `` 1 ''  symbols we have in the back tag of  @xmath11 , there will always be a choice string  @xmath31 with @xmath61 . in summary",
    ", we will always have a choice string  @xmath31 with @xmath62 , a contradiction .",
    "[ onepersec ] every section of the encoding part of  @xmath11 contains exactly one symbol  `` 1 '' .",
    "assume that not every section in the encoding part of  @xmath11 contains exactly one `` 1 ''  symbol .",
    "then , there must be a section containing no symbol  `` 1 '' , since , by lemma  @xmath63 , the number of symbols  `` 1 '' in the encoding part of  @xmath11 adds up to  @xmath1 .",
    "let @xmath64 , @xmath65 , be the section containing no symbol  `` 1 '' .",
    ", consider a choice string  @xmath66 , @xmath67 or , if @xmath68 , a choice string  @xmath66 , @xmath69 . in",
    "_ every _ block  @xmath70 of  @xmath66 , sections  @xmath64 and  @xmath71 of the encoding part are active and , therefore , contain exactly one symbol  `` 1 '' each ; these are the only symbols  `` 1 '' in  @xmath72 . now consider the @xmath1 symbols  `` 1 '' in the encoding part of  @xmath11 : the `` 1 ' 's in all sections of  @xmath73 except for section  @xmath71 are all aligned with `` 0 ' 's in  @xmath72 ; within section  @xmath71 , only a single `` 1 '' of  @xmath73 can be matched to a `` 1 '' of  @xmath72 .",
    "therefore , @xmath74 . as in the proof of lemma  @xmath63",
    ", we conclude that  @xmath11 is no solution .",
    "[ reversek ]",
    "the  @xmath1 symbols  `` 1 '' in the solution string s",
    "encoding part correspond to a @xmath1-clique in the graph .",
    "let @xmath11 be a solution for the closest substring instance .",
    "summarizing , we know by lemma  @xmath75 that @xmath11 can have as a match only one of the choice string s blocks . by lemma",
    "@xmath76 , every section of the encoding part  @xmath51 contains exactly one `` 1 '' symbol ; therefore , we can read this as an encoding of @xmath1  vertices of the graph .",
    "let @xmath77 be these vertices .",
    "further , we know that the back tag  @xmath57 consists only of `` 0 '' symbols : by lemma  @xmath63 , the encoding part  @xmath78 has only @xmath1  `` 1 ' 's ; would @xmath57 contain a  `` 1 '' , then we would have @xmath79 .",
    "we have @xmath80 for _ every _ choice string match  @xmath32 and , since every  @xmath56 contains only two `` 1 ''  symbols , @xmath81 .",
    "now consider some @xmath82 and the corresponding choice string  @xmath31 . since @xmath11 is a solution , we know that there is a block  @xmath32 with @xmath83 .",
    "that means that the two `` 1 ''  symbols in @xmath56 have to match two `` 1 '' symbols in @xmath51 ; this implies that the two vertices @xmath84 and @xmath85 are connected by an edge in the graph .",
    "since this is true for all @xmath82 , vertices @xmath86 are pairwisely interconnected by edges and form a @xmath1-clique .",
    "propositions  @xmath87 and  @xmath88 yield the following main theorem :    @xmath24 is @xmath0$]-hard for parameter  @xmath1 in the case of a binary alphabet .",
    "our techniques for showing hardness of closest substring , parameterized by the number  @xmath1 of input strings , also apply to consensus patterns .",
    "because of the similarity to closest substring , we restrict ourselves to explaining the problem and pointing out new features in the hardness proof .    given strings @xmath7 over alphabet  @xmath8 and integers  @xmath9 and  @xmath10 , the consensus patterns problem asks whether there is a string  @xmath11 of length  @xmath10 such that  @xmath89 where @xmath13 is a length @xmath10 substring of @xmath90 .",
    "thus , consensus patterns aims for minimizing the _ sum _ of errors .",
    "since errors are summed up over all strings , the value of  @xmath9 will , usually , not be a small and , therefore , the most significant parameterization for this problem seems to be the one by  @xmath1 .",
    "the problem is @xmath6-complete and has a ptas  @xcite . by reduction from clique",
    ", we can show @xmath0$]-hardness results as for closest substring given unbounded alphabet size .",
    "we omit the details here and focus on the case of binary input alphabet .",
    "we can apply basically the same ideas as were used in section  [ par_k ] ; however , some modifications are necessary .      * choice strings . * as in subsection  [ reduction_k ] , we generate a set of @xmath92 _ choice strings _",
    "@xmath93 , @xmath94 with @xmath95 , encoding the  @xmath96 edges of the input graph .",
    "this time , however , every block consists only of a front tag and an encoding part .",
    "no back tag is necessary .",
    "therefore , we use @xmath97 , in which the encoding part @xmath98 is constructed as in subsection  [ reduction_k ] . before we explain the front tags , we already fix the distance value  @xmath9",
    ".    * distance value . *",
    "we set the distance value @xmath99",
    ".    * front tags . * the front tag is now given by @xmath100 .",
    "thus , the front tag has length  @xmath101 .",
    "the front tag here is more complex than the one used in subsection  [ reduction_k ] .",
    "the reason is as follows .",
    "its purpose is to make sure that a substring which is not a block can not be a match . to achieve this",
    ", the front tag lets such an unwanted substring necessarily have a distance value larger than  @xmath9 to a possible solution ( as explained in the proof of lemma  @xmath75 ) . since  @xmath9 has a higher value here compared to section  [ par_k ] , we need the more complex front tag",
    ".    * solution length .",
    "* we set the substring length to the length of one block , i.e. , the sum of @xmath101 ( the length of the front tag ) and @xmath102 ( the length of the encoding part ) .",
    "therefore , @xmath103 .",
    "* template strings . * in contrast to subsection  [ reduction_k ] , we produce not only one but @xmath104 many template strings . all template strings have length  @xmath10 , i.e. , the length of one block .",
    "the template strings are a concatenation of the front tag part ( as given above ) and an encoding part consisting of @xmath102 many symbols  `` 1 '' .    in summary",
    ", the front tag ensures that only the block of a choice string can be selected as a substring matching a solution . regarding the distribution of mismatches ,",
    "we note that a closest substring s front tag part will not cause any mismatches . in its encoding part ,",
    "every of its @xmath102  positions causes at least  @xmath104 mismatches .",
    "it causes exactly  @xmath104 mismatches for every position iff the input graph contains a @xmath1-clique .",
    "[ onedircp ] for a graph with a @xmath1-clique , the construction in subsection  @xmath105 produces an instance of consensus patterns which has a solution , i.e. , there is a string  @xmath11 of length  @xmath10 such that every @xmath31 , @xmath106 , has a substring @xmath32 with @xmath107 .    given an undirected graph  @xmath108 with @xmath109  vertices and @xmath96  edges , let @xmath110 be the indices of @xmath1-clique s vertices .",
    "then , let string  @xmath11 consist of the front tag described in the above construction , concatenated with the encoding part @xmath111 , which encodes all clique vertices . for every @xmath82 , we choose in choice string  @xmath31 the block  @xmath32 encoding the edge connecting vertices  @xmath84 and  @xmath85 .",
    "we will show that these blocks have exactly total hamming distance @xmath112 to  @xmath11 .",
    "the front tags of  @xmath11 and of each  @xmath32 coincide , their hamming distance is @xmath113 .",
    "recall from subsection  [ reduction_k ] that the encoding parts consist of @xmath1 sections , each section of length  @xmath109 .",
    "we consider the encoding parts section by section and , within a section , columnwise . given a section  @xmath64 , @xmath65 , there are @xmath114 choice strings in which this section is active , and this section in these blocks encodes vertex  @xmath115",
    ". consider the column at position  @xmath116 in this section , over all selected substrings and all template strings .",
    "we have @xmath104 `` 0 ''  symbols from the choice strings in which this section is inactive ; in all other strings , there is a `` 1 '' at this position . in  @xmath11 ,",
    "this position is `` 1 , '' causing @xmath104 mismatches .",
    "now consider the remaining columns of section  @xmath64 .",
    "in each of them , we have @xmath104 `` 1 ''  symbols from the template strings ; all @xmath92 choice strings have  `` 0 '' at the corresponding position . in  @xmath11 , this position is  `` 0 , '' causing @xmath104 mismatches .",
    "thus , we have @xmath104 mismatches at every of the @xmath109 positions within a section , and this is true for all  @xmath1 sections of the encoding part .",
    "the sum of distances from  @xmath11 to the matches in choice strings and the template strings is  @xmath117 ;  @xmath11 is a solution .",
    "for the reverse direction , we use two lemmas to show important properties that a solution of the constructed instance has . the first lemma is proved in analogy to lemma  @xmath75 .",
    "[ fronttagcp ] a solution  @xmath11 and all its matches in the input instance start with the front  tag .    the second property of a solution , although also valid for the solutions in subsection  [ correctnessk ] , is established in a different way here .",
    "it relies on the additional template strings that have been introduced in the construction of the consensus patterns instance .",
    "[ onepositions ] a solution  @xmath11 contains exactly one symbol  `` 1 '' in every section of its encoding part .",
    "let @xmath11 be a solution for the constructed consensus patterns instance .",
    "by lemma  @xmath118 , we know that  @xmath11 and all its matches in the choice strings start with the front tag",
    ". consequently , the matches in the choice strings must be blocks .",
    "consider the encoding part of a solution  @xmath11 together with the encoding parts of its matches in the input strings .",
    "we note that we have at least @xmath104 mismatches for every column at positions  @xmath39 , @xmath119 : on the one hand , all @xmath104 template strings have `` 1 ''  symbols at position  @xmath39 . on the other hand , all @xmath104  choice strings in which position",
    "@xmath39 s section is inactive have `` 0 '' at this position , no matter which blocks we chose in these choice strings . since @xmath11  is a solution and only a total of  @xmath112 mismatches",
    "are allowed , we have _ exactly _ @xmath104 mismatches for every position of the encoding part of  @xmath11 with the corresponding positions in the matches of  @xmath11 .",
    "now , consider an arbitrary section  @xmath64 , @xmath120 , and consider all @xmath114 choice strings in which section  @xmath64 is active . in these choice strings ,",
    "section  @xmath64 contains exactly one `` 1 ''  symbol .",
    "we will show that in these choice strings blocks that form the matches for  @xmath11 , the `` 1 '' in section  @xmath64 must be at the same position in all matches , because , otherwise , @xmath11 is no solution .",
    "assume that we chose blocks in which the `` 1 ''  symbols of section  @xmath64 are at different positions .",
    "we can easily check that this would cause more than @xmath104 mismatches for the columns corresponding to the positions of the `` 1 ''  symbols ; this contradicts the assumption that  @xmath11 is a solution .",
    "we conclude that , for all matches in choice strings , the `` 1 ''  symbols of section  @xmath64 must be at the same position . for columns in which we have `` 1 ''  symbols in choice strings",
    ", there is a majority of `` 1 '' symbols , namely those in the @xmath121 choice strings in which section  @xmath64 is active and those in the @xmath104 template strings .",
    "therefore , the respective position in  @xmath11 must be `` 1 . '' for all other columns , there is a majority of `` 0 '' symbols , namely those in all @xmath92 choice strings . therefore , the respective position in  @xmath11 must be  `` 0 . ''",
    "these two lemmas allow us to show that also the reverse direction of the reduction is correct .",
    "[ reversecp ]",
    "the  @xmath1 symbols  `` 1 '' in the solution string s encoding part correspond to a @xmath1-clique in the graph .",
    "let @xmath11 be a solution for the constructed consensus patterns instance .",
    "by lemma  @xmath122 , every section in the encoding part of  @xmath11 encodes a vertex of the input graph . in the following ,",
    "we show that all encoded vertices are interconnected by edges .",
    "let @xmath123 be the vertices encoded in the solution s encoding part .",
    "for every two sections @xmath82 , we select in choice string  @xmath31 a substring in which the `` 1 '' symbols of sections  @xmath124 and  @xmath71 are at the same positions as the `` 1 '' symbols of sections  @xmath124 and  @xmath71 in the solution : selecting another substring would result in a hamming distance greater than @xmath125 in the @xmath126th and @xmath127th column and  @xmath11 could not be a solution . hence , the selected block encodes the edge connecting  @xmath84 and  @xmath85 . since we find such a substring for every @xmath82 , every pair of vertices in  @xmath128 is connected by an edge , @xmath128 is a @xmath1-clique .",
    "propositions  @xmath129 and  @xmath130 yield the following main result .",
    "[ mcpthm ] consensus patterns is @xmath0$]-hard for parameter  @xmath1 in case of a binary alphabet .",
    "we have proven that closest substring and consensus patterns , parameterized by the number  @xmath1 of input strings and with alphabet size two , are @xmath0$]-hard .",
    "this contrasts with related sequence analysis problems , such as longest common subsequence  @xcite and shortest common supersequence  @xcite , where , until now , parameterized hardness has only been established in the case of unbounded alphabet size .",
    "now , it is also known that these problems , parameterized by the number of input strings , are w[1]-hard in case of bounded alphabet size  @xcite . in our opinion , however , intuitively speaking , our w[1]-hardness result for consensus patterns is the most surprising one in this context , because consensus patterns seems to carry significantly less combinatorial structure than the other problems .",
    "the parameterized complexity of closest substring and consensus patterns , parameterized by `` distance parameter ''  @xmath9 , remains open for alphabets of constant size .",
    "if these problems are also @xmath0$]-hard , then an efficient and practically useful ptas would appear to be impossible @xcite , unless further structure of natural input distributions is taken into account in a more complex aggregate parameterization of these basic computational problems of bioinformatics ."
  ],
  "abstract_text": [
    "<S> we show that closest substring , one of the most important problems in the field of biological sequence analysis , is @xmath0$]-hard when parameterized by the number  @xmath1 of input strings ( and remains so , even over a binary alphabet ) . </S>",
    "<S> this problem is therefore unlikely to be solvable in time @xmath2 for any function  @xmath3 of  @xmath1 and constant @xmath4 independent of @xmath1 . </S>",
    "<S> the problem can therefore be expected to be intractable , in any practical sense , for @xmath5 . </S>",
    "<S> our result supports the intuition that closest substring is computationally much harder than the special case of closest string , although both problems are @xmath6-complete . </S>",
    "<S> we also prove @xmath0$]-hardness for other parameterizations in the case of unbounded alphabet size . </S>",
    "<S> our @xmath0$]-hardness result for closest substring generalizes to consensus patterns , a problem of similar significance in computational biology . </S>"
  ]
}