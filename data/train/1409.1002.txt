{
  "article_text": [
    "in many of today s signal processing systems there is a need for random signal sampling .",
    "the idea of random signal sampling dates back to early years of the study on signal processing @xcite .",
    "signal reconstruction methods for this kind of sampling were studied @xcite , there are practical implementations of signal acquisition systems which employ random nonuniform sampling @xcite .",
    "recently , this method of sampling has received more attention hence to a relatively new field of signal acquisition known as compressed sensing @xcite .",
    "it was shown that in many compressed sensing applications the random sampling is a correct choice for signal acquisition @xcite .",
    "the random sampling gives a possibility to sample below nyquist rate , which lowers the power dissipation and reduces the number of samples to be processed .",
    "a process of random sampling is defined by a sampling pattern , which indicates signal sampling points in time .",
    "generation and analysis of random sampling patterns which are dedicated to be implemented in analog - to - digital converters is a subject of this work .    in practice , sampling according to a given sampling pattern is realized with analog - to - digital converters @xcite .",
    "currently , there are available event - driven analog - to - digital converters , which are able to realize random sampling @xcite .",
    "these converters have certain practical constraints coming from implementation issues , which consequently puts implementation - related constraints on sampling patterns .",
    "these constraints concern minimum and maximum time intervals between adjacent sampling points , e.g. wakin et .",
    "al . in their work",
    "@xcite used a random nonuniform sampling pattern with minimum and maximum intervals between adjacent sampling points .",
    "furthermore , there are application - related constraints which concern stable average sampling frequency of sampling patterns , equal probability of occurrence of possible sampling points , and uniqueness of generated patterns .    the problem which this work solves is composed of two parts .",
    "firstly , how to evaluate different sampling pattern generators with emphasis on practical applications ?",
    "the early work on estimation of random nonuniform sampling patterns was done by marvasti @xcite .",
    "@xcite looked for a sampling pattern with the best ( most equal ) histogram of inter - sample spacing .",
    "gilbert et .",
    "al @xcite proposed to choose a random sampling pattern based on permutations . to the best of our knowledge , there is no scientific work published which concerns multiparameter statistical analysis of random sampling patterns . due to",
    "the constantly increasing available computational power it has become possible to analyze random pattern generators statistically within a reasonable time frame .",
    "statistical parameters which assess random sampling pattern generators with respect to the constraints described above are described in this paper .",
    "the second problem discussed in this paper is how to construct a random sampling pattern generator which generates patterns with a given number of sampling points , and given intervals between sampling points , with possibly minimum loss in randomness ?",
    "the well known random sampling pattern generators are additive random sampling ( ars ) and jittered sampling ( js ) @xcite .",
    "however , these sampling pattern generators do not take into account the mentioned implementation constraints , which is an obstacle in practical applications .",
    "there have been some attempts to generate more practical sampling patterns .",
    "lin and vaidyanathan @xcite discussed periodically nonuniform sampling patterns which are generated by employing two uniform patterns .",
    "bilinskis et al . in @xcite",
    "introduced a concept of correlated additive random sampling , which is a modification of the ars .",
    "papenfu et al . in @xcite proposed another modification of the ars process , which was supposed to optimally utilize the adc .",
    "ben - romdhane et al .",
    "@xcite discussed a hardware implementation of a nonuniform pseudorandom clock generator . unfortunately , none of the proposed sampling pattern generators are designed to address all the implementation constrains .",
    "this paper proposes a sampling pattern generator which is able to produce constrained random sampling patterns dedicated for use in practical acquisition systems .",
    "the generator is compared with existing solutions using the proposed statistical parameters .",
    "implementation issues of this generator are discussed .",
    "the paper is organized as follows .",
    "the problem of random sampling patterns generation is identified in section [ sec : problem ] .",
    "statistical parameters for random pattern generators are proposed in section [ sec : parameters ] .",
    "a new random sampling pattern generator for patterns to be used in practical applications is proposed in section [ sec : generators ] .",
    "the proposed generator is compared with existing generators in section [ sec : taa ] .",
    "some of the implementation issues of random sampling patterns are discussed in section [ sec : implem ] .",
    "conclusions close the paper in section [ sec : conclusions ] .",
    "the paper follows the reproducible research paradigm @xcite , therefore all of the code associated with the paper is available online @xcite .",
    "this paper focuses on generation and analysis of random sampling patterns .",
    "the purpose of this section is to formally define a sampling pattern and its parameters , and to discuss requirements for sampling patterns and sampling pattern generators .",
    "a sampling pattern @xmath0 is an ordered set ( sequence ) with @xmath1 fixed sampling time points : @xmath2 where the sampling time points @xmath3 are real numbers ( @xmath4 ) .",
    "elements of such a set @xmath0 must increase monotonically : @xmath5 time length @xmath6 of a sampling pattern is equal to the time length of a signal or a signal segment on which the sampling pattern is applied .",
    "the time length @xmath6 may be higher than the last time point in a pattern : @xmath7 .",
    "any sampling point @xmath8 is a multiple of a sampling grid period @xmath9 : @xmath10 where @xmath11 is the set of natural numbers without zero .",
    "the sampling grid is a set : @xmath12 where @xmath13 is the number of sampling grid points in a sampling pattern , and @xmath14 signifies the floor function , which returns the largest integer lower or equal to the function argument .",
    "it can be stated that a pattern @xmath0 is a subset of a grid set @xmath15 ( @xmath16 . the sampling grid period @xmath17 describes the resolution of the sampling process . in practice ,",
    "the lowest possible sampling grid depends on the performance of the used adc , its control circuitry , and the clock jitter conditions @xcite .",
    "a sampling pattern may be represented as indices of sampling grid : @xmath18    let us define a set @xmath19 which contains @xmath20 intervals between the sampling points : @xmath21 if all the intervals are equal ( @xmath22 ) , then @xmath0 is a uniform sampling pattern with a sampling period equal to @xmath23 .",
    "if the time intervals are chosen randomly , then @xmath0 is a random sampling pattern .",
    "a random sampling pattern @xmath0 is applied to a signal @xmath24 of length @xmath6 : @xmath25 = s(t_{k } ) , \\quad t_{k } \\in \\mathbb{t}\\ ] ] where @xmath26 is a vector of observed signal samples .",
    "the average sampling frequency @xmath27 of a random sampling pattern depends on the number of sampling time points in the pattern : @xmath28 an example of a random sampling pattern is shown in fig .",
    "[ fig : pattern_unconstrained ] .",
    "let us denote a nontrivial problem @xmath29 of generation of a multiset ( bag ) @xmath30 with @xmath31 random sampling patterns .",
    "the time length of sampling patterns is @xmath6 , grid period is @xmath9 .",
    "the requested average sampling frequency of patterns is @xmath32 , minimum and maximum intervals between sampling points are @xmath33 and @xmath34 respectively .",
    "the problem @xmath35 is solved by random sampling pattern generators .",
    "the generators should meet requirements given in [ subsec : generators_rec ] , and all the produced sampling patterns must meet the requirements given below in [ subsec : patterns_rec ] .        a random sampling pattern generator must produce sampling patterns with a requested average sampling frequency @xmath36 . if the average sampling frequency @xmath37 is lower than the requested sampling frequency , then the quality of signal reconstruction may be compromised . on the contrary , higher sampling frequency @xmath37 than the requested @xmath36 causes unnecessary power consumption .",
    "a requirement for minimum interval @xmath33 between sampling points comes from the adc technological constraints @xcite .",
    "violation of this requirement may render the sampling pattern impossible to implement with a given adc .",
    "similarly , there may be a requirement of maximum interval between samples @xmath34 .",
    "generating an adequate random sampling pattern is realizable if @xmath38 and @xmath39 , where @xmath40 is the requested average sampling period .",
    "as stated in ( [ eq : mono ] ) , sampling points in a given sampling pattern @xmath0 can not be repeated .",
    "repeated sampling points do not make practical sense since a signal can be sampled only once in a given time moment .",
    "if a sampling pattern contains repeated sampling points , then a dedicated routine must remove these repeated points .        as described in [ subsec : patterns ] , a sampling pattern @xmath0 is an ordered set which is a subset of a grid @xmath15 . in other words , sampling points are drawn from a pool of grid points .",
    "the sampling pattern generator should not favor any of the sampling grid points . ideally , all of the sampling points should be equi - probable .      repeated sampling patterns generate unnecessary processing overhead , especially if sampling patterns are generated offline and further processed ( fig . [",
    "fig : gen_case2 ] ) .",
    "an additional search routine which removes replicas of sampling patterns must be implemented in this case .",
    "therefore , the ideal random sampling pattern generator should not repeat sampling patterns unless all the possible sampling patterns have been generated .",
    "in this section we propose statistical parameters for evaluation of a tested random sampling pattern generator .",
    "aim of these parameters is to assess how well sampling patterns produced by the evaluated generator cope with the requirements described in [ subsec : patterns_rec ] and [ subsec : generators_rec ] .",
    "these parameters are to be computed for a bag @xmath30 of @xmath31 patterns produced by the evaluated generator , the parameters are computed using the monte carlo method .",
    "it is checked if every generated sampling pattern fulfills requirements given in [ subsec : patterns_rec ] and if a generated bag ( multiset ) of sampling patterns fulfill requirements given in the [ subsec : generators_rec ] . according to our best knowledge ,",
    "similar statistical evaluation has never been introduced before .",
    "let us introduce a statistical parameter indicating how well the evaluated generator fulfills the imposed requirement of the requested average sampling frequency @xmath32 ( [ subsec : patterns ] ) : @xmath41 where @xmath42 is the average sampling frequency of the @xmath43-th sampling pattern .",
    "since all the sampling patterns have the same time length @xmath6 , in practice it is usually more convenient to use the requested number of sampling points in a pattern @xmath44 and count the number of actual sampling points in a pattern @xmath45 .",
    "this parameter is an average value of a relative frequency error of every sampling pattern .",
    "the lower the parameter @xmath46 is , the better is the frequency stability of the generator .",
    "additionally , let us introduce a @xmath47 parameter : @xmath48 which is the ratio of patterns in a bag @xmath30 which violate the frequency stability requirement .",
    "the parameter @xmath49 denotes whether the average sampling frequency of the @xmath43-th pattern is incorrect .",
    "let us introduce statistical parameters which indicate how well the assessed generator meets the interval requirements discussed in sec .",
    "[ subsec : patterns_rec_dist ] . for",
    "a given @xmath43-th sampling pattern @xmath50 let us create ordered subsets @xmath51 and @xmath52 , where @xmath19 is a set with intervals between sampling points as in ( [ eq : distset ] ) .",
    "these subsets contain intervals between samples which violate the minimum and the maximum requirements between sampling points @xmath33 and @xmath34 respectively : @xmath53 @xmath54 now let us introduce statistical parameters @xmath55 and @xmath56 : @xmath57 @xmath58 where @xmath59 denotes the number of elements in a set ( set s cardinality ) , and @xmath60 as in ( [ eq : distset ] ) .",
    "these parameters contain the average squared ratio of the number of intervals in a pattern which violate minimum / maximum interval requirements to the number of all intervals between sampling points in a pattern .",
    "the lower the above parameters are , the better the evaluated generator meets interval requirements .",
    "similarly to the frequency stability parameter , let us introduce @xmath61 and @xmath62 parameters : @xmath63 @xmath64 which are additional parameters which are equal to ratios of patterns which violate minimum or maximum intervals between sampling patterns .",
    "parameters @xmath65 and @xmath66 denote if the @xmath43-th pattern meets the requirement of minimum and maximum intervals respectively .",
    "it is possible to assign to every @xmath43-th pattern a parameter @xmath67 which denotes if a pattern violates the frequency stability ( [ subsec : patterns_rec_freq ] ) or the interval requirements ( [ subsec : patterns_rec_dist ] ) .",
    "the ratio of incorrect patterns @xmath68 of a bag @xmath30 is : @xmath69 where @xmath70 is a logical disjunction . using parameter @xmath67 it is possible to generate a sub - bag @xmath71 which contains only correct patterns from the bag @xmath30 : @xmath72 where @xmath73 signifies that a pattern @xmath0 is an element of a multiset @xmath30 .",
    "please note that @xmath30 is a multiset , so patterns which are the elements of @xmath30 may be repeated , and patterns which are the elements of the multiset @xmath74 may also be repeated . ideally , a sub - bag with correct patterns @xmath74 is identical to the original bag @xmath30 .",
    "let us introduce a statistical parameter @xmath75 which indicates whether the probability density of occurrence for grid points in patterns from bag @xmath30 is uniformly distributed : @xmath76 the probability of occurrence of the @xmath77-th grid point @xmath78 is : @xmath79 where @xmath13 is the number of sampling grid points in a sampling pattern , @xmath80 is the total number of sampling points in all the patterns in a bag @xmath30 , and the parameter @xmath81 indicates whether the @xmath77-th grid point is used in the @xmath43-th sampling pattern @xmath50 : @xmath82 additionally , let us introduce a statistical parameter @xmath83 which is calculated identically to @xmath75 , but based on sampling patterns from subbag @xmath74 ( [ eq : bagastar ] ) .",
    "let us create a set @xmath84 for a bag @xmath30 of @xmath31 sampling patterns generated by the evaluated pattern generator which contains only unique patterns from @xmath30 .",
    "similarly , let us create a set @xmath85 which contains only unique patterns from the subbag with correct patterns @xmath74 ( [ eq : bagastar ] ) .",
    "now let us introduce parameters @xmath86 and @xmath87 : @xmath88 these parameters count the number of unique patterns and unique correct patterns in the bag @xmath30 with @xmath31 generated patterns .",
    "algorithms of sampling pattern generators are presented in this section .",
    "subsection [ sec : js_ars ] presents existed , widely known jittered sampling ( js ) and additive random sampling ( ars ) algorithms .",
    "subsection [ sec : angie ] presents the proposed sampling pattern generator algorithm , which is tailored to fulfill the requirements presented in [ subsec : patterns_rec ] and [ subsec : generators_rec ] .",
    "please note that all the algorithms presented in this paper generate sampling patterns represented as indices of sampling grid points as in ( [ eq : grid_representation ] ) .",
    "jittered sampling and additive random sampling algorithms are widely used to generate random sequences .",
    "there are 4 input variables to the js and ars algorithms : requested time of a sampling pattern @xmath6 , grid period @xmath9 , requested average sampling frequency @xmath89 and the variance parameter @xmath90 .",
    "the realizable time of a sampling pattern @xmath91 may differ from the given requested time of a pattern @xmath6 if the given time is not a multiple of the given grid period @xmath9 . before either of the algorithms is started , the number of grid points @xmath13 in a sampling pattern , the realizable time of a sampling pattern @xmath91 and the realizable requested number of sampling points @xmath92 must be computed : @xmath93\\ ] ] where @xmath94 $ ] signifies the rounding function , which returns an integer which is closest to the function s argument .",
    "because the algorithms operate on a discrete set of grid points , the realizable requested average sampling frequency @xmath95 may differ from the requested sampling frequency @xmath89 .",
    "the realizable requested average sampling frequency @xmath95 and realizable requested average sampling period @xmath96 is computed : @xmath97\\ ] ] where @xmath98 is the requested average sampling period recalculated to the number of grid periods .",
    "if the computed realizable requested sampling frequency @xmath95 is different from the requested sampling frequency @xmath89 , the problem of generation of sampling patterns is not well stated .",
    "before the algorithms start , the index of a correct sampling point @xmath99 and the starting position of the sampling point @xmath100 must be reset : @xmath101    in the js algorithm , every sampling point is a uniform sampling point which is randomly `` jittered '' : @xmath102\\quad x_k \\thicksim \\mathcal{n}(0,1)\\ ] ] where @xmath103 denotes a standard normal distribution . in the ars algorithm",
    "every sampling point is computed using the previous sampling point to which an average sampling period and a random value are added : @xmath104 \\quad x_k \\thicksim \\mathcal{n}(0,1)\\ ] ] fig .",
    "[ fig : ars_js_illustration ] illustrates generation of sampling patterns in the js and ars algoritms .",
    "the practical versions of both js and ars algorithms are presented in alg .",
    "[ alg : jsars ] .",
    "after generation of a pattern , any repeated sampling point must be removed ( line 12 of alg .",
    "[ alg : jsars ] ) .",
    "it is because in these algorithms there is no guarantee that sampling points are not repeated .",
    "compute @xmath13 , @xmath91 and @xmath92 as in ( [ eqalg : precomp1 ] ) compute @xmath95 , @xmath96 and @xmath98 as in ( [ eqalg : hatsf ] ) reset @xmath99 and @xmath105 as in ( [ eqalg : arsjsreset ] )    for @xmath106 to @xmath92 @xmath107 draw sampling moment @xmath108 ( [ eqalg : drawjs ] ) or @xmath109 ( [ eqalg : drawars ] ) @xmath107 if @xmath110 and @xmath111 @xmath107 @xmath107",
    "@xmath112 @xmath107 @xmath107 assign @xmath113 @xmath107 @xmath107 @xmath114 end remove repeated sampling points in @xmath0      we propose an algorithm which would perfectly cope with the requirements described in [ subsec : patterns_rec ] and as much as possible with the requirements in [ subsec : generators_rec ] .",
    "the ratio of incorrect patterns @xmath68 ( [ eq : generalerror ] ) generated by the algorithm should always equal 0 , while keeping the probability density parameter @xmath75 ( sec .",
    "[ sec : qpdf ] ) as low as possible and the uniqueness parameter @xmath115 ( sec .",
    "[ sec : qu ] ) as high as possible .",
    "the parameters @xmath116 and @xmath117 must equal @xmath75 and @xmath86 respectively , as the subbag with correct patterns @xmath74 must be identical to the subbag with all the patterns @xmath30 ( all the generated patterns must be correct ) . therefore we propose the random sampling generator with intervals enabled ( angie ) algorithm . the input variables to the algorithm are identical to the js and ars algorithms ( [ sec : js_ars ] ) , with additional variables for the allowed time between samples ( @xmath33 , @xmath34 ) .",
    "before the angie algorithm starts , the following precomputations must be done .",
    "similarly to the js and ars algorithms , the number of grid points in a sampling pattern ( @xmath13 ) , the realizable time of a sampling pattern ( @xmath91 ) and the realizable number of sampling points in a sampling pattern @xmath92 must be computed as in ( [ eqalg : precomp1 ] ) .",
    "then the minimum and the maximum time between sampling points must be recalculated to the number of grid points : @xmath118 where @xmath119 signifies the ceiling function which returns the lowest integer which is higher or equal to the function s argument . in the proposed algorithm",
    "there are 2 limit variables , @xmath120 and @xmath121 , which are the first and the last possible position of a @xmath122-th sampling point .",
    "these variables are updated after generation of every sampling point .",
    "before the algorithm starts these variables must be initialized : @xmath123 the number of sampling points left to be generated is updated before generation of every sampling point : @xmath124 where @xmath122 is the index of the current sampling point .",
    "the average sampling period for the remaining @xmath125 sampling points and the expected position @xmath126 of the @xmath122-th sampling point is : @xmath127\\ ] ] in the proposed algorithm , a @xmath122-th sampling point @xmath128 may differ from its expected position @xmath126 by the interval @xmath129 . before computing this interval",
    "the algorithm must compute intervals to the limits : @xmath130 and then the lower from the above intervals is the correct interval @xmath129 : @xmath131    the first sampling point is drawn using a uniformly distributed variable @xmath132 : @xmath133 while the rest of the sampling points are drawn using the normal distribution : @xmath134\\quad x_k \\thicksim \\mathcal{n}(0,\\sigma^{2})\\ ] ] finally , the algorithm checks whether the drawn sampling moment @xmath128 violates the limits @xmath120 and @xmath121 : @xmath135 in the last step the limits for the next sampling point are computed .",
    "the lower and the higher limits are computed as : @xmath136 if the maximum time between samples is valid ( @xmath137 ) , then the higher limit should be additionally checked for @xmath34 : @xmath138    the proposed algorithm is presented in alg .",
    "[ alg : angie ] .    compute @xmath13 , @xmath91 and @xmath92 as in ( [ eqalg : precomp1 ] )    compute @xmath139 and @xmath140 as in ( [ eqalg:2ndprep ] ) initialized the limits @xmath141 and @xmath142 as in ( [ eqalg : resetlimits ] ) for @xmath106 to @xmath92 @xmath107 update the number of sampling points left @xmath143 as in ( [ eqalg : samp_left ] )    @xmath107 compute the expected position @xmath126 as in ( [ eqalg : avg_samp_period ] )    @xmath107 compute the interval @xmath144 as in ( [ eqalg : dist ] )    @xmath107 draw sampling moment @xmath145 as in ( [ eqalg : sampmom_uniq ] ) or ( [ eqalg : sampmom_norm ] )    @xmath107 check and correct @xmath145 as in ( [ eqalg : check_delim ] )    @xmath107 assign @xmath146    @xmath107 update the limits @xmath147 and @xmath148 as in ( [ eqalg : delimit_min ] ) and ( [ eqalg : delimit_max ] ) end",
    "in this section , the performance of the proposed angie algorithm is experimentally compared with the js and ars algorithms . a toolbox with pattern generators and evaluation functions",
    "was created to facilitate the experiment .",
    "emphasis was set on validation of parts of the software .",
    "the toolbox , together with its documentation , is available online at @xcite . using the content available at",
    "@xcite it is possible to reproduce the presented numerical simulations .",
    "the duration @xmath6 of sampling patterns is set to 1 ms , sampling grid period @xmath9 is equal to 1 @xmath149s .",
    "the requested average sampling frequency of patterns is set to 100 @xmath150 , which corresponds to an average sampling period equal to 10 @xmath149s .",
    "the minimum time between sampling points is @xmath151s , and there is no requirement for maximum time between sampling points ( @xmath152 ) .",
    "the variance @xmath90 is logarithmically swept in the range @xmath153 $ ] .",
    "the computed statistical parameters of sampling patterns are automatically tested for convergence .",
    "a mean value is accounted as converged , if for the last @xmath154 patterns it did not change more than 1% of the mean value computed for all the patterns currently tested .",
    "the minimum number of sampling patterns tested is @xmath155 .",
    "the uniqueness parameters @xmath156 and @xmath157 ( [ eq : uniq ] ) are computed after @xmath158 patterns .",
    "error parameters computed for the tested sampling pattern generators are plotted in fig .",
    "[ fig : errparam ] .",
    "the ratio of incorrect patterns are plotted in fig .",
    "[ fig : errratio ] .",
    "this ratio for the angie algorithm ( blue @xmath159 ) is equal to 0 for all the values of variance @xmath90 .",
    "thus , all the pattens have correct average sampling frequency and intervals between sampling points .",
    "patterns generated by the js ( green @xmath160 ) and the ars algorithms ( black @xmath161 ) are all correct for very low values of the variance @xmath90 , but the quality parameters @xmath75 and @xmath162 for these @xmath90 values are poor ( fig .",
    "[ fig : qualparam ] and fig .",
    "[ fig : uniqueparam ] ) . in fig .",
    "[ fig : errparam ] it can be seen that for nearly all the values of variance @xmath163 , the frequency stability of the patterns generated by the js and the ars algorithms is compromised , and for most of the values of @xmath90 , the requirement of minimum intervals between sampling points is not met by these algorithms .",
    "the best values of the parameter @xmath75 are achieved for the js ( green @xmath164 ) and the ars ( black @xmath164 ) algorithms ( fig .",
    "[ fig : qualparam ] ) , but only if all the patterns ( also incorrect ) are taken into account ( parameter @xmath75 ) . if the quality parameter was computed only for the correct patterns ( parameter @xmath83 ) , it can be clearly seen that the proposed algorithm ( blue @xmath164 ) performs significantly better than the js ( yellow @xmath165 ) and the ars algorithms ( yellow @xmath166 ) .",
    "furthermore , the best values of @xmath83 are found for the values of variance @xmath163 for which most of the patterns produced by the js and the ars algorithms are incorrect .",
    "plots of the best probability density functions found for the tested algorithms are in fig .",
    "[ fig : plotpdf ] .    fig .",
    "[ fig : uniqueparam ] shows the number of unique patterns produced by the tested algorithms .",
    "the number of unique correct patterns produced by the proposed algorithm is higher than the number produced by the js and the ars algorithms for any variance value @xmath167 .",
    "the above results show that the proposed algorithm angie performs better than the js and the ars algorithms .",
    "all the patterns generated by the angie algorithm are correct , have a parameter @xmath67 defined as in ( [ eq : generalerror ] ) equal to 0 .",
    "the quality parameters described in sec .",
    "[ sec : qpdf ] and sec .",
    "[ sec : qu ] are better for the proposed algorithm .",
    "it can be seen that the variance value @xmath90 , which is an internal algorithm parameter , should be adjusted to a given problem . for the given problem",
    ", the proposed algorithm performs best for @xmath168 .",
    "in the second experiment four different cases ( a - d ) of sampling patterns are studied .",
    "parameters of these cases are collected in table 1 . in the first two cases",
    "there are requirements of both the minimum and the maximum distance between sampling points . in the second case",
    "there are only 5 sampling points requested p. sampling pattern , and the number of sampling grid points is limited to 100 . in the third case",
    "there are no requirements imposed on distances between sampling points , so there is only the requirement of stable average sampling frequency .",
    "this case is distinctive from others , because the number of sampling points p. sampling pattern is high ( @xmath169 ) , and the grid period is very low . in the last case",
    "there is a requirement of the maximum distance between sampling points . in all the four cases",
    "the variance @xmath90 is logarithmically swept in the range @xmath153 $ ] .    in this experiment",
    "there are three quality parameters measured for all the three generators ( js , ars and angie ) .",
    "the first parameter is the ratio of incorrect patterns @xmath68 ( [ eq : generalerror ] ) .",
    "the second is the probability density parameter @xmath83 as in ( [ eq : pdfpar ] ) , but computed only for the correct patterns .",
    "the third quality parameter is the number of unique correct patterns in the first @xmath170 generated patterns @xmath171 ( [ eq : uniq ] ) .",
    "[ table : exp2 ]     c || c | c | c | c | c || c | c | c | c & & + & @xmath6 & @xmath172 & @xmath173 & @xmath33 & @xmath34 & @xmath174 & @xmath92 & @xmath139 & @xmath140 + case & & & & & & & & & +   + [ -2.2ex ] a & @xmath175 & @xmath175 & 0.05 & 10 & 30 & @xmath175 & 50 & 10 & 30 + b & 0.1 & 1 & 50 & 0.015 & 0.028 & 100 & 5 & 15 & 28 + c & @xmath175 & 1 & 10 &  &  & @xmath176 & @xmath170 &  &  + d & 0.005 & 25@xmath177 @xmath178 & @xmath179 &  & 14@xmath180 & 2@xmath177 @xmath170 & 500 &  & 56 +      results of this experiment are shown on figures [ fig : eps2corr][fig : exp2unique ] .",
    "each figure presents a measured quality parameter for all the four cases .",
    "the ratio of incorrect patterns @xmath68 is on fig .",
    "[ fig : eps2corr ] , the probability density parameter @xmath83 is on fig .",
    "[ fig : exp2ep ] , and the number of unique correct patterns @xmath171 is on fig .",
    "[ fig : exp2unique ] .",
    "let us take a look at the ratio of incorrect patterns ( fig .",
    "[ fig : eps2corr ] ) .",
    "the angie algorithm generates only correct sampling patterns .",
    "hence to line 10 in the algorithm ( see algorithm 2 ) , the minimum and the maximum distances between sampling points are kept .",
    "lines 68 in the angie algorithm ensure that there will be place for the correct number of sampling points in all the generated sampling patterns . to the contrary ,",
    "both ars and js algorithms generate a lot of incorrect patterns . for the high values of variance @xmath90",
    "there are only incorrect patterns generated by these two algorithms .    in the three cases ( a , c , d ) the best probability density parameter @xmath83 ( fig .",
    "[ fig : exp2ep ] ) measured for patterns generated by the angie algorithm is better than for the other two algorithms .",
    "additionally , it can be seen in fig .",
    "[ fig : exp2unique ] that the generated number of unique correct sampling patterns is in all the four cases significantly higher for the proposed angie algorithm .",
    "let us take a closer look on the case b. in this case , the best probability density parameter @xmath83 found for the algorithm ars ( @xmath181 ) is slightly better than the best @xmath83 found for the angie ( @xmath182 ) . still , the number of unique patterns is significantly better for the above values of @xmath183 for angie algorithm , and very most of the patterns generated by the ars are incorrect for @xmath181 .",
    "we tried to find a case for which ars and js algorithms would clearly and distinctly outperform the angie , but it turned out to be an impossible task . still though , it is difficult to provide the reader with one gold rule which algorithm should be used . in practical applications",
    "there may be a huge number of different sampling scenarios , in this paper we covered only a tiny fraction of examples , and therefore every case should be considered separately . in general",
    ", angie algorithm will always generate correct sampling patterns .",
    "but if these sampling patterns will have all quality parameters ( especially @xmath83 ) better than sampling patterns generated by the other algorithms , that is an another issue . from our experience",
    "we claim that indeed , in most of the cases angie is the right choice",
    ". however , there might be applications in which , for example , equi - probability of occurrence of every sampling point is a critical matter and other algorithms might perform better . in practical applications ,",
    "a numerical experiment should be always conducted to choose a correct pattern generator and to adjust variance value @xmath90 .",
    "we prepared a software patterns testing system ( pates ) , which is open - source and available online @xcite .",
    "this software contains all the three generators considered in this paper plus routines which compute the proposed quality parameters . with this software",
    "a user is able to test the generators for his own sampling scenario .",
    "we have created a graphical user interface to the software ( fig .",
    "[ fig : pates - gui ] ) , which makes using the system more intuitive .",
    "reproducible research scripts which can be used to produce results from the presented experiments are also available in @xcite .",
    "in this section we discuss some of the implementation issues of random sampling patterns . in this paper , we focus on offline sampling pattern generation ( fig . [",
    "fig : gen_case2 ] ) , where patterns are prepared offline by a computational server and then stored in a memory which is a part of a signal processing system .",
    "immediate generation of sampling patterns would require very fast pattern generators which are able to generate every sampling point in a time much shorter than minimum time between sampling points @xmath33 .",
    "the angie algorithm ( alg . [ alg : angie ] ) requires a number of floating point computations before every sampling point is computed , therefore very powerful computational circuit would be necessary in real time applications where @xmath184 .      in practical applications",
    "there is a need to generate @xmath185 sampling patterns .",
    "sampling patterns are generated offline ( fig .",
    "[ fig : gen_case2 ] ) on a computational server . in naive implementation , alg .",
    "[ alg : angie ] is repeated @xmath31 times to generate @xmath31 random sampling patterns . this approach is suboptimal , because computation of initial parameters from equations ( [ eqalg : precomp1 ] ) and ( [ eqalg:2ndprep ] ) ( lines 2 - 3 ) is unnecessarily repeated @xmath31 times . in the optimal implementation lines 2 - 3 are performed only once before a bag of patterns is generated .",
    "we implemented the angie algorithm ( naive implementation ) in python .",
    "furthermore , we prepared an implementation in c and an optimized implementation in python ( vectorized code ) .",
    "all the implementations are available for download at @xcite .",
    "[ fig : time_of_exec ] shows time needed to generate @xmath186 sampling patterns .",
    "parameters of sampling patterns are identical to the parameters used in the experiment described in section [ sec : expsetup ] .",
    "the average sampling frequency is swept from 10 @xmath150 to 100 @xmath150 , and the duration of the patterns is kept fixed .",
    "measurements were made on an intel core i5 - 3570k cpu , and a single core of the cpu was used .",
    "the angie algorithm operates mostly on integer numbers , and therefore it requires maximally only three floating point operations p. sampling point .",
    "the algorithm time complexity vs. the average sampling frequency of a pattern is @xmath187 ( consider the logarithmic vertical scale ) , because lines 5 - 13 in alg .",
    "2 are repeated for every sampling point which must be generated .",
    "as expected , the optimized vectorized python / optimized c implementation is much faster than the naive python implementation .",
    "the analog - to - digital converter ( adc ) driver is a digital circuit which triggers the converter according to a given sampling pattern .",
    "the maximum clock frequency of the driver determines the minimum grid period .",
    "detailed construction of the driver depends on the used adc because the driver must generate specific signals which drive the adc .",
    "a simple driver marks the sample now signal every time the grid counter reaches a value equal to the current sampling time point .",
    "such a driver was implemented in vhdl language .",
    "the structure of the driver is shown in fig .",
    "[ fig : driver ] . due to the internal structure of the control circuit ,",
    "the grid period is eight times longer then the input clock period .",
    "table 2 contains results of synthesis of the driver in four different xilinx fpgas .",
    ".maximum clock values and minimum grid periods of an implemented driver in different xilinx fpgas [ cols=\"^,^,^ \" , ]     sampling patterns are read from a rom .",
    "the amount of memory @xmath188 used to store a sampling pattern [ in bytes ] is : @xmath189 where @xmath13 is the number of grid points in a pattern and @xmath1 is the number of sampling points in a pattern .",
    "depending on the available size of memory , different numbers of sampling patterns can be stored .",
    "[ fig : errpdf_vs_memory ] shows the relation between the memory size and the probability density parameter @xmath75 ( [ eq : pdfpar ] ) computed for the proposed angie algorithm .",
    "the parameters of the sampling patterns are identical to the parameters used in the experiment described in section [ sec : expsetup ] , although four different average sampling frequencies are used .",
    "as expected , the higher the average sampling frequency of patterns , the better the distribution of probability density function ( parameter @xmath75 is lower )",
    ". the higher the average sampling frequency of patterns , the more the memory needed to achieve the best possible probability density parameter @xmath75 . if the available memory is low , the probability density function becomes less equi - probable .",
    "this paper discussed generation of random sampling patterns dedicated to event - driven adcs . constraints and requirements for random sampling patterns and pattern generators were discussed .",
    "statistical parameters which evaluate sampling pattern generators were introduced .",
    "we proposed a new algorithm which generates constrained random sampling patterns .",
    "the patterns generated by the proposed algorithm were compared with patterns generated by the state - of - the - art algorithms ( jittered sampling and additive random sampling ) .",
    "it was shown , that the proposed algorithm performs better in generation of random sampling patterns dedicated to event - driven adcs .",
    "implementation issues of the proposed method were discussed .",
    "9 h. s. shapiro , r. a. silverman , `` alias free sampling of random noise '' , _ ieee trans .",
    "info . theory _",
    "147152 , ( 1960 )    h. g. feichtinger and k. grchenig and t. strohmer , `` efficient numerical methods in non - uniform sampling theory '' , _ numerische matematik _ , vol .",
    "423440 , ( 1995 )    i. homjakovs , m. greitans , r. shavelis , `` real - time acquisitions of wideband signals data using non - uniform sampling '' , _ proc .",
    "ieee eurocon 2009 _ , pp .",
    "11581163 , saint - petersburg , may .",
    "hui - qing liu , `` ads82x adc with non - uniform sampling clock . '' , _ analog applications journal _ , ( 2005 )    m. wakin , s. becker , e. nakamura , m. grant , e. sovero , d.ching , j. yoo , j. romberg , a. emami - neyestanak , e. candes , `` a nonuniform sampler for wideband spectrally - sparse environments '' , _ ieee trans .",
    "topics circuits syst .",
    "2(3 ) , ( 2012 )    e.j .",
    "cands and m. b. wakin , `` an introduction to compressive sampling '' , _ ieee signal process . mag .",
    "25(2 ) , pp . 2130 , ( 2008 )    j. laska , s. kirolos , y. massoud , r. baraniuk , a. gilbert , m. iwen and m. strauss , `` random sampling for analog - to - information conversion of wideband signals '' , _ proc .",
    "ieee dallas circuits and systems workshop ( dcas ) _ , pp .",
    "119122 , dallas , usa , ( 2006 )    r.g .",
    "baraniuk , m. davenport , r. devore , m. wakin , `` a simple proof of the restricted isometry property for random matrices '' , _ constructive approximation _ , vol .",
    "28(3 ) , pp . 253 - 263 , ( 2008 )    analog devices ( 2013 ) .",
    "`` a / d converters .",
    "analog devices.'',[online ] available : ` http://www.analog.com/en/analog-to-digital-converters/ad-converters/products ` ` /index.html `    b. le , t. w. rondeau , j. h. reed , w. bostian , `` analog - to - digital converters . a review of the past , present , and future . '' , _ ieee sig .",
    "proc . mag .",
    "22(6 ) , ( 2005 )    xilinx ( 2012 ) .",
    "`` 7 series fpgas and zynq-7000 all programmable soc xadc dual 12-bit 1 msps analog - to - digital converter'',[online ] available : ` http://www.xilinx.com/support/documentation/user_guides ` ` /ug480_7series_xadc.pdf `    f. marvasti , `` spectral analysis of irregular samples of mu1tidimensional signals , '' , _ presented the 6th workshop on multidim .",
    "signal processing _ ,",
    "pacific grove , california , ( sep . 1989 )    a. c. gilbert , m. j. strauss , and j. a. tropp , `` a tutorial on fast fourier sampling '' , _ ieee signal process . mag .",
    "_ , vol . 25 ,",
    "57 - 66 , ( 2008 )    f. marvasti , `` nonuniform sampling , theory and practice '' , _ springer science + business media _ ,",
    "( 2001 ) , isbn : 978 - 1 - 4613 - 5451 - 2 , new york , usa    j.j .",
    "wojtiuk , `` randomized sampling for radio design '' , _ phd thesis _ ,",
    "university of southern australia , ( 2000 )    y. p. lin , and p.p .",
    "vaidyanathan , `` periodically nonuniform sampling of bandpass signals '' , _ ieee trans .",
    "circuits syst .",
    "ii _ , vol .",
    "45(3 ) , pp . 340351 , ( 1998 )    i. bilinskis , a. mikelsons , `` randomized signal processing . '' , _ prentice hall _ , ( 1992 ) ,",
    "isbn : 978 - 0 - 137 - 51074 - 0 , cambridge , uk    f. papenfu , y.artyukh , e. boole , d. timmermann , `` nonuniform sampling driver design for optimal adc utilization '' , _ proc .",
    "internal symposium on circuits and systems , 2003 ( iscas03 ) _ , vol .",
    "516519 , bangkok , thailand , ( 2003 )    m. ben - romdhane , c. rebai , p. desgreys , a. ghazeli , p. loumeau , `` pseudorandom clock signal generation for data conversion in a multistandard receiver '' , _ proc .",
    "conference on design and technology of integrated systems in nanoscale era _ , pp .",
    "1-4 , tozeur , tunisia , ( 2008 )    p. vandewalle , j. kovacevic , and m. vetterli , `` reproducible research in signal processing [ what , why and how ] '' , _ ieee signal process . mag .",
    "26(3 ) , pp .",
    "3747 , ( 2009 )    aalborg university ( 2013 ) .",
    "`` irfducs project '' , [ online ] available : ` http://www.irfducs.org/pates/ `",
    "the work is supported by the danish council for independent research under grant number 060202565b ."
  ],
  "abstract_text": [
    "<S> random sampling is a technique for signal acquisition which is gaining popularity in practical signal processing systems . nowadays , </S>",
    "<S> event - driven analog - to - digital converters make random sampling feasible in practical applications . </S>",
    "<S> a process of random sampling is defined by a sampling pattern , which indicates signal sampling points in time . </S>",
    "<S> practical random sampling patterns are constrained by adc characteristics and application requirements . in this paper </S>",
    "<S> we introduce statistical methods which evaluate random sampling pattern generators with emphasis on practical applications . </S>",
    "<S> furthermore , we propose a new random pattern generator which copes with strict practical limitations imposed on patterns , with possibly minimal loss in randomness of sampling . </S>",
    "<S> the proposed generator is compared with existing sampling pattern generators using the introduced statistical methods . </S>",
    "<S> it is shown that the proposed algorithm generates random sampling patterns dedicated for event - driven - adcs better than existed sampling pattern generators . </S>",
    "<S> finally , implementation issues of random sampling patterns are discussed .    </S>",
    "<S> * keywords : * analog - digital conversion , compressed sensing , digital circuits , random sequences , signal sampling </S>"
  ]
}