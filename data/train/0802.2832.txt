{
  "article_text": [
    "arguably , the `` rent or buy '' dilemma is the fundamental problem in online algorithms : intuitively , there is an ongoing game which may end at any moment , and the question is to commit or not to commit .",
    "choosing to commit ( the ` buy ' option ) implies paying large cost immediately , but low overall cost if the game lasts for a long time .",
    "choosing not to commit ( the ` rent ' option ) means high spending rate , but lower overall cost if the game ends quickly .",
    "this problem was first abstracted in the `` ski rental '' formulation @xcite as follows . in the buy option ,",
    "a one - time cost is incurred , and thereafter usage is free of charge . in the rent option , the cost is proportional to usage time , and there is no one - time cost .",
    "the deterministic solution is straightforward ( with competitive factor 2 ) . in the randomized model ,",
    "the algorithm chooses a random time to switch from the rent to the buy option ( the adversary is assumed to know the algorithm but not the actual outcomes of random experiments ) .",
    "as is well known , the best possible online strategy for classical ski rental has competitive ratio of @xmath1 .    in many realistic cases",
    ", there may be some intermediate options between the extreme alternatives of pure buy and pure rent : in general , it may be possible to pay only a part of the buying cost and then pay only partial rent .",
    "the general problem , called here the _",
    "multislope ski rental _",
    "problem , can be described as follows .",
    "there are several _ states _ ( or _ slopes _ ) , where each state @xmath2 is characterized by two numbers : a _ buying cost _ @xmath3 and a _ rental rate _",
    "@xmath4 ( see fig .  [",
    "fig : opt ] ) . without loss of generality",
    ", we may assume that for all @xmath2 , @xmath5 and @xmath6 , namely that after ordering the states in increasing buying costs , the rental rates are decreasing .",
    "the basic semantics of the multislope problem is natural : to hold the resource under state @xmath2 for @xmath7 time units , the user is charged @xmath8 cost units .",
    "an adversary gets to choose how long the game will last , and the task is to minimize total cost until the game is over .",
    "the multislope ski rental problem introduces entirely new difficulties when compared to the classical ski rental problem . intuitively , whereas the only question in the classical version is when to buy , in the multislope version we need also to answer the question of what to buy .",
    "another way to see the difficulty is that the number of potential transitions from one slope to another in a strategy is one less than the number of slopes , and finding a single point of transition is qualitatively easier than finding more than one such point .",
    "in addition , the possibility of multiple transitions forces us to define the relation between multiple `` buys . ''",
    "following  @xcite , we distinguish between two natural cases . in the _ additive _ case , buying costs are cumulative , namely to move from state @xmath2 to state @xmath9 we only need to pay the difference in buying prices @xmath10 . in the _ non - additive",
    "_ case , there is an arbitrarily defined transition cost @xmath11 for each pair of states @xmath2 and @xmath9 .",
    "[ [ our - results . ] ] our results .",
    "+ + + + + + + + + + + +    in this paper we analyze randomized strategies for multislope ski rental .",
    "( we use the term _ strategy _ to refer to the procedure that makes online decisions , and the term _ algorithm _ to refer to the procedure that computes strategies . )",
    "our main focus is the additive case , and our main result is an efficient algorithm that computes the best possible randomized online strategy for any given instance of additive multislope ski rental problem . we first give a simpler algorithm which decomposes a @xmath12-slope instance into @xmath13 two - slope instances , whose competitive factor is @xmath14 . for the non - additive model",
    ", we give a simple @xmath0-competitive randomized strategy .    [ [ related - work . ] ] related work .",
    "+ + + + + + + + + + + + +    variants of ski rental are implicit in many online problems .",
    "the classical ( two - slope ) ski rental problem , where the buying cost of the first slope and the rental rate of the second slope are @xmath15 , was introduced in  @xcite , with optimal strategies achieving competitive factors of 2 ( deterministic ) and @xmath16 ( randomized ) .",
    "karlin et al .",
    "@xcite apply the randomized strategy to tcp acknowledgment mechanism and other problems .",
    "the classical ski rental is sometimes called the _ leasing _ problem  @xcite .",
    "azar et al .",
    "@xcite consider a problem that can be viewed as non - additive multislope ski rental where slopes become available over time , and obtain an online strategy whose competitive ratio is @xmath17 .",
    "bejerano et al .",
    "@xcite , motivated by rerouting in atm networks , study the non - additive multislope problem .",
    "they give a deterministic @xmath18-competitive strategy , and show that the factor of @xmath18 holds assuming only that the slopes are concave , i.e. , when the rent in a slope may decrease with time .",
    "damaschke  @xcite considers a static version of the problem from  @xcite , namely non - additive multislope ski rental problem where each slope is bought `` from scratch . '' ) . ] for deterministic strategies , @xcite gives an upper bound of @xmath18 and a lower bound of @xmath19 ; @xcite also presents a randomized strategy whose competitive factor is @xmath20 . as far as we know , damaschke s strategy is the only randomized strategy for multislope ski rental to appear in the literature .",
    "irani et al .",
    "@xcite present a deterministic @xmath21-competitive strategy for the additive model that generalizes the strategy for the two slopes case .",
    "they motivate their work by energy saving : each slope corresponds to some partial `` sleep '' mode of the system .",
    "augustine et al .",
    "@xcite present a dynamic program that computes the best deterministic strategy for non - additive multislope instances .",
    "the case where the length of the game is a stochastic variable with known distribution is also considered in both  @xcite .",
    "meyerson @xcite defines the seemingly related `` parking permit '' problem , where there are @xmath13 types of permits of different costs , such that each permit allows usage for some duration of time .",
    "meyerson s results indicate that the problems are not very closely related , at least from the competitive analysis point of view : it is shown in @xcite that the competitive ratio of the parking permit problem is @xmath22 and @xmath23 for deterministic and randomized strategies , respectively .",
    "[ [ organization . ] ] organization .",
    "+ + + + + + + + + + + + +    the remainder of this paper is organized as follows . in section  [ sec : model ] we define the basic additive model and make a few preliminary observations . in section  [ sec : par ] we give a simple algorithm to solve the multislope problem , and in section  [ sec : additive ] we present our main result : an optimal online algorithm .",
    "an @xmath0-competitive algorithm for the non - additive case is presented in section [ sec : nonadditive ] .",
    "( -1,0)(12,6 ) ( 0,0)(12,0 ) ( 12,-0.5)@xmath7 ( 0,0)(0,6 ) ( -.8,6)cost ( 0,0)(3,6 ) ( 0,0)(1,2 ) ( 1,0)(1,2 ) ( 1,-0.5)@xmath24 ( 0,1)(5,6 ) ( 1,2)(2,3 ) ( -0.5,1)@xmath25 ( 2,0)(2,3 ) ( 2,-0.5)@xmath26 ( 0,2)(8,6 ) ( 2,3)(4,4 ) ( -0.5,2)@xmath27 ( 4,0)(4,4 ) ( 4,-0.5)@xmath28 ( 0,3)(12,6 ) ( 4,4)(8,5 ) ( -0.5,3)@xmath29 ( 8,0)(8,5 ) ( 8,-0.5)@xmath30 ( 0,4.5)(8,5 ) ( 8,5)(12,5.25 ) ( -0.5,4.5)@xmath31",
    "in this section we formalize the _ additive _ version of the multislope ski rental problem .",
    "a @xmath13-ski rental instance is defined by a set of @xmath32 _ states _ , and for each state @xmath2 there is a _ buying cost _ @xmath3 and a _ renting cost _ @xmath4 .",
    "a state can be represented by a line : the @xmath2th state corresponds to the line @xmath33 .",
    "[ fig : opt ] gives a geometrical interpretation of a multislope ski rental instance with five states .",
    "we use the terms `` state '' and `` slope '' interchangeably .",
    "the requirement of the problem is to specify , for all times @xmath7 , which slope is chosen at time @xmath7 .",
    "we assume that state transitions can be only forward , and that states can not be skipped , i.e. , the only transitions allowed are of the type @xmath34 . we stress that this assumption holds without loss of generality in the additive model , where a transition from state @xmath35 for @xmath36 is equivalent to a sequence of transitions @xmath37 ( cf .",
    "section  [ sec : nonadditive ] ) .",
    "it follows that a _ deterministic strategy _ for the additive multislope ski rental problem is a monotone non - decreasing sequence @xmath38 where @xmath39 corresponds to the transition @xmath40 .",
    "a _ randomized strategy _ can be described using a probability distribution over the family of deterministic strategies . however , in this paper we use another way to describe randomized strategies .",
    "we specify , for all times @xmath7 , a probability distribution over the set of @xmath32 slopes .",
    "the intuition is that this distribution determines the actual cost paid by any online strategy .",
    "formally , a _ randomized profile _ ( or simply a _ profile _ ) is specified by a vector @xmath41 of @xmath32 functions , where @xmath42 is the probability to be in state @xmath2 at time @xmath7 .",
    "the correctness requirement of a profile is @xmath43 for all @xmath44 .",
    "clearly , any strategy is related to some profile . in the sequel",
    "we consider a specific type of profiles for which a randomized strategy can be easily obtained .",
    "the performance of a profile is defined by its total accrued cost , which consists of two parts as follows . given a randomized profile @xmath45 , the expected _ rental cost _ of @xmath45 at time @xmath7 is @xmath46 and the expected total rental cost up to time @xmath7 is @xmath47 the second part of the cost is the buying cost . in this case",
    "it is easier to define the cumulative buying cost .",
    "specifically , the expected _ total buying cost _ up to time @xmath7 is @xmath48 the expected _ total cost _ for @xmath45 up to time @xmath7 is @xmath49 the goal of the algorithm is to minimize total cost up to time @xmath7 for any given @xmath50 , with respect to the best possible .",
    "intuitively , we think of a game that may end at any time . for any possible ending time",
    ", we compare the total cost of the algorithm with the best possible ( offline ) cost . to this end , consider the optimal solution of a given instance .",
    "if the games ends at time @xmath7 , the optimal solution is to select the slope with the least cost at time @xmath7 ( the thick line in fig .  [ fig : opt ] denotes the optimal cost for any given @xmath7 ) .",
    "more formally , the optimal offline cost at time @xmath7 is @xmath51 for @xmath52 , denote by @xmath53 the time @xmath7 instance where @xmath54 , and define @xmath55 .",
    "it follows that the optimal slope for a game ending at time @xmath7 is the slope @xmath2 for which @xmath56 $ ] ( if @xmath57 for some @xmath2 then both slopes @xmath58 and @xmath2 are optimal ) .",
    "finally , let us rule out a few trivial cases .",
    "first , note that if there are two slopes such that @xmath59 and @xmath60 then the cost incurred by slope @xmath9 is never less than the cost incurred slope @xmath2 , and we may therefore just ignore slope @xmath9 from the instance .",
    "consequently , we will assume henceforth , without loss of generality , that the states are ordered such that @xmath61 and @xmath62 for @xmath63 .",
    "second , using similar reasoning , note that we may consider only strategies that are monotone over time with respect to majorization @xcite , i.e. , strategies such that for any two times @xmath64 we have @xmath65 intuitively , eq .",
    "( [ eqn : back ] ) means that there is no point is `` rolling back '' purchases : if at a given time we have a certain composition of the slopes , then at any later time the composition of slopes may only improve .",
    "note that eq .",
    "( [ eqn : back ] ) implies that @xmath66 is monotone increasing and @xmath67 is monotone decreasing , i.e. , over time , the strategy invests non - negative amounts in buying , resulting in decreased rental rates .",
    "in this section we describe how to solve the multislope problem by reducing it to the classical two - slope version , resulting in a randomized strategy whose competitive factor is @xmath14 .",
    "this result serves as a warm - up and it also gives us a concrete upper bound on the competitiveness of the algorithm presented in section  [ sec : additive ] .",
    "[ [ the - case - of - r_k0 . ] ] the case of @xmath68 .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    suppose we are given an instance @xmath69 with @xmath32 slopes , where @xmath68 .",
    "we define the following @xmath13 instances of the classical two - slopes ski rental problem : in instance @xmath2 for @xmath70 , we set @xmath71    observe that @xmath72 , i.e. , the two slopes of the @xmath2th instance intersect exactly at @xmath53 , their intersection point at the original multislope instance .",
    "now , let @xmath73 denote the optimal offline solution to the original multislope instance , and let @xmath74 denote the optimal solution of the @xmath2th instance at time @xmath7 , i.e. , @xmath75 .",
    "we have the following .    [",
    "lem : decomposition ] @xmath76 .",
    "consider a time @xmath7 and let @xmath77 be the optimal multislope state at time @xmath7 .",
    "then , @xmath78    given the decomposition ( [ eq : parallel ] ) , it is easy to obtain a strategy for any multislope instance by combining strategies for @xmath13 classical instances .",
    "specifically , what we do is as follows .",
    "let @xmath79 be the @xmath16-competitive profile for the @xmath2th ( two slope ) instance ( see  @xcite ) .",
    "we define a profile @xmath80 for the multislope instance as follows : @xmath81 for @xmath82 , @xmath83 , and @xmath84 .",
    "we first prove that the profile is well defined .",
    "[ lem - well - defined ]    [ lem : monotone ] @xmath85 for every @xmath86 and time @xmath7 .",
    "[ sumto1 ] @xmath87  .    by the algorithm for classical ski rental",
    ", we have that the strategy for the @xmath2 instance is @xmath88 . claim  ( [ lem : monotone ] ) of the lemma now follows from that fact that @xmath89 for every @xmath90 .",
    "claim  ( [ sumto1 ] ) follows from the telescopic sum @xmath91    next , we show how to convert the profile @xmath80 into a strategy .",
    "note that the strategy uses a single random experiment , since arbitrary dependence between the different @xmath92s are allowed .",
    "[ lem : profile ] given @xmath80 one can obtain an online strategy whose profile is @xmath80 .",
    "define @xmath93 and let @xmath94 be a random variable that is chosen uniformly from @xmath95 $ ] .",
    "the strategy is as follows : we move from state @xmath2 to state @xmath96 when @xmath97 for every state @xmath2 .",
    "namely , the @xmath2th transition time @xmath98 is the time @xmath7 such that @xmath99 .",
    "thus we obtain the following :    the expected cost of the strategy defined by @xmath80 is at most @xmath16 times the optimal offline cost .",
    "we first show that by linearity , the expected cost to the combined strategy is the sum of the costs to the two - slope strategies , i.e. , that @xmath100 .",
    "for example , the buying cost is @xmath101 similarly , @xmath102 by linearity , and therefore , @xmath103 finally , by lemma  [ lem : decomposition ] and the fact that the strategies @xmath104 are @xmath16-competitive we conclude that @xmath105 which means that @xmath106 is @xmath16-competitive .    [",
    "[ the - case - of - r_k0.-1 ] ] the case of @xmath107 .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we note that if the smallest rental rate @xmath108 is positive , then the competitive ratio is strictly less that @xmath16 : this can be seen by considering a new instance where @xmath108 is subtracted from all rental rates , i.e. , @xmath109 and @xmath110 for all @xmath111 .",
    "suppose @xmath45 is @xmath16-competitive with respect to @xmath112 ( note that @xmath113 ) .",
    "then the competitive ratio of @xmath45 at time @xmath7 w.r.t .",
    "the original instance is : @xmath114 @xmath115 for @xmath116 .",
    "hence , the ratio @xmath117 is monotone decreasing , and thus @xmath118 is monotone decreasing as well .",
    "it follows that @xmath119 observe that @xmath120 when @xmath121 , and that @xmath122 when @xmath123 ( i.e. , when @xmath124 ) .",
    "in this section we develop an optimal online strategy for any given additive multislope ski rental instance .",
    "we reduce the set of all possible strategies to a subset of much simpler strategies , which on one hand contains an optimal strategy , and on the other hand is easier to analyze , and in particular , allows us to effectively find such an optimal strategy .",
    "consider an arbitrary profile .",
    "( recall that we assume w.l.o.g .  that no slope is completely dominated by another . ) as a first simplification , we confine ourselves to profiles where each @xmath92 has only finitely many discontinuities .",
    "this allows us to avoid measure - theoretic pathologies without ruling out any reasonable solution within the church - turing computational model .",
    "it can be shown that we may consider only continuous profiles ( details omitted ) .",
    "so let such a profile @xmath125 be given .",
    "we show that it can be transformed into a profile of a certain structure without increasing the competitive factor .",
    "our chain of transformations is as follows .",
    "first , we show that it suffices to consider only simple profiles we call `` prudent . ''",
    "prudent strategies buy slopes in order , one by one , without skipping and without buying more than one slope at a time .",
    "we then define the concept of `` tight '' profiles , which are prudent profiles that spend money at a fixed rate relative to the optimal offline strategy .",
    "we prove that there exists a tight optimal profile .",
    "furthermore , the best tight profile can be effectively computed : given a constant @xmath126 , we show how to check whether there exists a tight @xmath126-competitive strategy , and this way , using binary search on @xmath126 , we can find the best tight strategy . finally , we explain how to construct that profile and a corresponding strategy .",
    "our main simplification step is to show that it is sufficient to consider only profiles that buy slopes consecutively one by one .",
    "formally , _ prudent _ profiles are defined as follows .    a slope @xmath2 is _ active _ at time @xmath7 if @xmath127 .",
    "a profile is called _ prudent _ if at all times there is either one or two consecutive active slopes .    at any given time @xmath7 ,",
    "at least one slope is active because @xmath128 by the problem definition .",
    "considering eq .",
    "( [ eqn : back ] ) as well , we see that a continuous prudent profile progresses from one slope to next without skipping any slope in between : once slope @xmath2 is fully `` paid for '' ( i.e. , @xmath129 ) , the algorithm will start buying slope @xmath96 .",
    "we now prove that the set of continuous prudent profiles contains an optimal profile . intuitively , the idea is that a non - prudent profile must have two non - consecutive slopes with positive probability at some time . in this case",
    "we can `` shift '' some probability toward a middle slope and only improve the overall cost .",
    "[ thm - prudent ] if there exists a continuous @xmath126-competitive profile @xmath45 for some @xmath130 , then there exists a prudent @xmath126-competitive profile @xmath131 .",
    "let @xmath125 be a profile and suppose that all the @xmath92s are continuous .",
    "it follows that @xmath66 is also continuous .",
    "define @xmath132 and @xmath133 . in words",
    ", @xmath134 is the most expensive slope that is fully within the buying budget of @xmath45 at time @xmath7 , and @xmath135 is the most expensive slope that is at least partially within the buying budget of @xmath45 at time @xmath7 . obviously , @xmath136 for all @xmath7 .",
    "now , we define @xmath131 as follows : @xmath137 it is not hard to verify that @xmath138 for every time @xmath7 . furthermore , observe that @xmath131 is prudent , because @xmath66 is continuous .",
    "it remains to show that @xmath131 is @xmath126-competitive .",
    "we do so by proving that @xmath139 and @xmath140 for all @xmath7 .",
    "first , directly from definitions we have @xmath141    consider now rental payments . to prove that @xmath140 for every time @xmath7 we construct inductively a sequence of probability distributions @xmath142 .",
    "the first distribution @xmath143 is defined to be @xmath45 .",
    "suppose now that @xmath144 is not prudent .",
    "distribution @xmath145 is obtained from @xmath144 as follows . for any @xmath7 such that there are two non - consecutive slopes with positive probability , let @xmath146 be any three slopes such that @xmath147 , @xmath148 , and @xmath149 ( such @xmath150 exists because @xmath144 is not prudent ) .",
    "define @xmath151 where @xmath152 is maximized so that @xmath153 for all @xmath2 .",
    "intuitively , we shift a maximal amount of probability mass from slopes @xmath154 and @xmath155 to the middle slope @xmath150 .",
    "the fact that @xmath156 is maximized means that we have either that @xmath157 , or @xmath158 , or both . in any case",
    ", we may already conclude that @xmath159 .",
    "also note that by construction , for all @xmath7 we have @xmath160 .",
    "hence , @xmath161 .    as to the rental cost ,",
    "fix a time @xmath7 , and consider now the rent paid by @xmath144 and @xmath145 : @xmath162 where the last inequality follows from the fact that if @xmath163 , then @xmath164 is the @xmath165 coordinate of the intersection point between the slopes @xmath2 and @xmath9 .",
    "our next step is to consider profiles that invest in buying as much as possible under some spending rate cap .",
    "our approach is motivated by the following intuitive observation .",
    "[ obs : tight ] let @xmath166 and @xmath167 be two randomized prudent profiles . if @xmath168 for every @xmath7 , then @xmath169 for every @xmath7 .    in other words ,",
    "investing available funds in buying as soon as possible results in lower rent , and therefore in more available funds .",
    "hence , we define a class of profiles which spend money as soon as possible in buying , as long as there is a better slope to buy , namely as long as @xmath170 .",
    "let @xmath171 .",
    "a prudent @xmath126-competitive profile @xmath45 is called _ tight _ if @xmath172 for all @xmath7 with @xmath173 .    clearly ,",
    "if the last slope is flat , i.e. , @xmath68 , then it must be the case that @xmath174 for any profile with finite competitive factor : otherwise , the cost to the profile will grow without bound while the optimal cost remains constant .",
    "however , it is important to note that if @xmath107 , there may exist an optimal profile @xmath45 that never buys the last slope , but still its expected spending rate as @xmath7 tends to infinity is @xmath175 .",
    "it is easy to see that a tight profile can achieve any achievable competitive factor .",
    "[ lem : tight ] if there exists a @xmath126-competitive prudent profile @xmath45 for some @xmath176 , then there exists a @xmath126-competitive tight profile @xmath131 .",
    "let @xmath131 be the prudent profile satisfying @xmath177 for all @xmath7 for which @xmath178 .",
    "we need to show that @xmath131 is feasible .",
    "since by definition , @xmath45 buys with any amount left , it suffices to show that for all @xmath7 , the rent paid by @xmath45 is at most @xmath179 .",
    "indeed , @xmath140 for every @xmath7 due to observation  [ obs : tight ] , and since @xmath45 is @xmath126-competitive it follows that @xmath180 and we are done .",
    "we now use the results above to construct an algorithm that produces the best possible online strategy for the multislope problem .",
    "the idea is to guess a competitive factor @xmath126 , and then try to construct a @xmath126-competitive tight profile . given a way to test for success , we can apply binary search to find the optimal competitive ratio @xmath126 to any desired precision .",
    "the main questions are how to test whether a given @xmath126 is feasible , and how to construct the profiles .",
    "we answer these questions together : given @xmath126 , we construct a tight @xmath126-competitive profile until either we fail ( because @xmath126 was too small ) or until we can guarantee success . in the remainder of this section",
    "we describe how to construct a tight profile @xmath45 for a given competitive factor @xmath126 .",
    "we begin with analyzing the way a tight profile may spend money .",
    "consider the situation at some time @xmath7 such that @xmath170 .",
    "let @xmath9 be the maximum index such that @xmath181 .",
    "then @xmath182 .",
    "therefore , the spending rate of a tight profile at time @xmath7 must be @xmath183 .",
    "if @xmath184 , the tight profile may spend at rate @xmath183 until time @xmath185 ( or until @xmath186 ) , and if @xmath187 the tight profile may continue spending at this rate forever .",
    "hence , for @xmath188 , we have @xmath189 since @xmath45 is tight and therefore prudent , we also have , assuming @xmath190 and @xmath191 , that @xmath192 and @xmath193 plugging the above equations into eq .",
    "( [ eq - tight ] ) , we get @xmath194 since @xmath45 is prudent , @xmath195 and hence @xmath196 .",
    "it follows that @xmath197 a solution to a differential equation of the form @xmath198 where @xmath199 and @xmath200 are constants is @xmath201 , where @xmath202 depends on the boundary condition .",
    "hence in our case we conclude that @xmath203 and @xmath204 , where the constant @xmath202 is determined by the boundary condition .",
    "( [ eq : piece ] ) is our tool to construct @xmath45 in a piecewise iterative fashion .",
    "for example , we start constructing @xmath45 from @xmath205 using @xmath206 and the boundary condition @xmath207 .",
    "we get that @xmath208 , i.e. , @xmath209 and this holds for all @xmath210 , where @xmath211 is the solution to @xmath212 .    in general , eq .",
    "( [ eqn : differ ] ) remains true so long as there is no change in the spending rate and in the slope the profile @xmath45 is buying .",
    "the spending rate changes when @xmath7 crosses @xmath213 , and the profile starts buying slope @xmath214 when @xmath215 .",
    "let @xmath216 for each @xmath63 boundary_condition @xmath217 `` @xmath207 '' @xmath218 ; @xmath219 define @xmath220 try to solve for @xmath202 using boundary_condition * if * no solution * then return *  false @xmath221 boundary_condition @xmath217 `` @xmath222 '' @xmath223 let @xmath165 be such that @xmath224 boundary_condition @xmath217 `` @xmath225 '' @xmath226 * if * @xmath227 or @xmath228 * then return *  true    we can now describe our algorithm . given a ratio @xmath126 , algorithm  is able to construct the tight profile @xmath45 or to determine that such a profile does not exist .",
    "it starts with the boundary condition @xmath207 and reveals the first part of the profile as shown above .",
    "then , each time the spending rate changes or there is a change in @xmath229 it moves to the next differential equation with a new boundary condition .",
    "after at most @xmath230 such iterations it either computes a @xmath126-competitive tight profile @xmath45 or discovers that such a profile is infeasible . since we are able to test for success using algorithm  , we can apply binary search to find the optimal competitive ratio to any desired precision .",
    "we note that it is easy to construct a strategy that corresponds to any given prudent profile @xmath45 , as described in the proof of lemma  [ lem : profile ] .",
    "we conclude with the following theorem .",
    "there exists an @xmath231 time algorithm that given an instance of the additive multislope ski rental problem for which the optimal randomized strategy has competitive ratio @xmath126 , computes a @xmath232-competitive strategy .",
    "in this section we consider the non - additive multislope ski rental problem .",
    "we present a simple randomized strategy which improves the best known competitive ratio from @xmath20 to @xmath0 .",
    "our technique is a simple application of randomized repeated doubling ( see , e.g. ,  @xcite ) , used extensively in competitive analysis of online algorithms .",
    "for example , deterministic repeated doubling appears in  @xcite , and a randomized version appears in  @xcite .    before presenting the strategy",
    "let us consider the details of the non - additive model .",
    "augustine at el .",
    "@xcite define a general non - additive model in which a transition cost @xmath11 is associated with every two states @xmath2 and @xmath9 , and show that one may assume w.l.o.g .",
    "that @xmath233 if @xmath234 and that @xmath235 for every @xmath236",
    ". observe that we may further assume that @xmath237 for every @xmath2 and @xmath9 , since the optimal ( offline ) strategy remains the unchanged .",
    "it follows that the strategies from  @xcite that were designed for the case of buying slopes `` from scratch '' also work for the general non - additive case .",
    "we propose using the following iterative online strategy , which is similar to the one in @xcite , except for the choice of the `` doubling factor . ''",
    "specifically , the @xmath9th iteration is associated with a bound @xmath238 on @xmath239 , where @xmath240 denotes the termination time of the game .",
    "we define @xmath241 , where @xmath242 and @xmath243 is a chosen at random uniformly in @xmath244 .",
    "we also define @xmath245 .",
    "let @xmath246 and let @xmath247 be the optimal offline state at time @xmath248 . in case there are two such states , i.e. , @xmath249 for some @xmath2 , we define @xmath250 .",
    "it follows that @xmath251 . in the beginning of the @xmath9th iteration the online strategy buys @xmath247 and stays in @xmath247 until the this iteration ends .",
    "the @xmath9th iteration ends at time @xmath248 .",
    "observe that the first iteration starts with @xmath252 , namely we use slope 0 until @xmath24 .",
    "the expected cost of the strategy described above is at most @xmath0 times the optimum .",
    "observe that the first iteration starts with @xmath252 , namely we use slope 0 until @xmath24 , and hence , if the game ends during the first iteration , i.e. , before @xmath253 , then the online strategy is optimal .",
    "consider now the case where the game ends at time @xmath254 , and suppose that @xmath255 for @xmath256 . in this case , the expected cost of the online strategy is bounded by @xmath257 } & \\leq { \\textbf{e } \\left [ \\sum_{j=1}^{\\ell+1 } { \\textsc{opt}}(\\tau_j ) \\right ] }     \\leq { \\textbf{e } \\left [ \\frac{\\alpha}{\\alpha-1 } \\cdot { \\textsc{opt}}(\\tau_{\\ell+1 } ) \\right ] } \\\\ &   =     { \\textbf{e } \\left [ \\frac{\\alpha^{2-x}}{\\alpha-1 } \\cdot { \\textsc{opt}}(\\tau ) \\right ] } \\\\ & =     \\frac{\\alpha}{\\alpha-1 } \\cdot \\int_{x=0}^1 \\alpha^x dx \\cdot         { \\textsc{opt}}(\\tau )     =     \\frac{\\alpha}{\\ln \\alpha } \\cdot { \\textsc{opt}}(\\tau ) \\end{aligned}\\ ] ] by choosing @xmath258 the competitive ratio is @xmath259 as required .",
    "we thank seffy naor and niv buchbinder for stimulating discussions .",
    "y.  bejerano , i.  cidon , and j.  s. naor .",
    "dynamic session management for static and mobile users : a competitive on - line algorithmic approach . in _",
    "4th international workshop on discrete algorithms and methods for mobile computing and communications _ ,",
    "pages 6574 .",
    "acm , 2000 .",
    "s.  irani , r.  k. gupta , and s.  k. shukla .",
    "competitive analysis of dynamic power management strategies for systems with multiple power savings states . in _ design , automation and test in europe conference and exhibition _ , pages 117123 , 2002 ."
  ],
  "abstract_text": [
    "<S> in the multislope ski rental problem , the user needs a certain resource for some unknown period of time . to use the resource , </S>",
    "<S> the user must subscribe to one of several options , each of which consists of a one - time setup cost ( `` buying price '' ) , and cost proportional to the duration of the usage ( `` rental rate '' ) . </S>",
    "<S> the larger the price , the smaller the rent . the actual usage time is determined by an adversary , and the goal of an algorithm is to minimize the cost by choosing the best option at any point in time . </S>",
    "<S> multislope ski rental is a natural generalization of the classical ski rental problem ( where the only options are pure rent and pure buy ) , which is one of the fundamental problems of online computation . </S>",
    "<S> the multislope ski rental problem is an abstraction of many problems where online decisions can not be modeled by just two options , e.g. , power management in systems which can be shut down in parts . in this paper </S>",
    "<S> we study randomized algorithms for multislope ski rental . </S>",
    "<S> our results include the best possible online randomized strategy for any _ additive _ instance , where the cost of switching from one option to another is the difference in their buying prices ; and an algorithm that produces an @xmath0-competitive randomized strategy for any ( non - additive ) instance .    </S>",
    "<S> zvi lotker    boaz patt - shamir    dror rawitz </S>"
  ]
}