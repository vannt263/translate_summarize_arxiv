{
  "article_text": [
    "dependence among values of variables occurs everywhere in computer science ( databases , software engineering , knowledge representation , ai ) but also the social sciences ( human history , stock markets , etc . ) . in his monograph @xcite in 2007",
    "vnnen introduced functional dependence into the language of first - order logic .",
    "functional dependence of the value of @xmath9 from the values of @xmath10 means that there exists a determinating function @xmath11 with @xmath12 , i.e. , the value of @xmath9 is completely determined by the values of @xmath13 alone .",
    "we denote this form of dependence ( or determination ) by the _ dependence atom _ @xmath14 . to examine dependence between situations , plays , worlds , events or observations",
    "we consider collections of these , so called _",
    "teams_. for example , a database can be interpreted as a team . in this case",
    "@xmath15 means that in every record the value of the attribute @xmath9 is determined by the values of the attributes @xmath13 .    in modal logic",
    "a team is a set of worlds in a kripke structure . here",
    "@xmath14 means that in every world of the team the value of the atomic proposition @xmath9 is determined by the propositions @xmath10 , i.e. , there is a fixed boolean function @xmath16 that determines the value of @xmath9 from the values of @xmath13 for all worlds in the team . in first - order logic @xmath17",
    "means the same for a function @xmath18 where @xmath19 is the universe of a first - order structure .",
    "_ dependence logic _",
    "@xcite is then defined by simply adding dependence atoms to usual first - order logic and _ modal dependence logic _",
    "( @xmath0 ) @xcite is defined by introducing dependence atoms to modal logic .",
    "besides the inductive semantics ( which we will use here ) vnnen also gave two equivalent game - theoretic semantics for @xmath0@xcite .",
    "sevenster showed that for singleton sets of worlds there exists a translation from @xmath0to plain modal logic @xcite .",
    "sevenster also showed that the satisfiability problem for @xmath0is @xmath20@xmath21-complete @xcite and lohmann and vollmer continued the complexity analysis of the satisfiability problem for @xmath0by systematically restricting the set of allowed modal and propositional operators and completely classifying the complexity for all fragments of @xmath0definable in this way @xcite .",
    "sevenster @xcite also introduced classical disjunction ( which is _ classical _ in a more set theoretic way of looking at the semantics ; cf .",
    "@xcite ) into the language of @xmath0 . in the following",
    "we always think of the version that includes both classical disjunction ( here denoted by @xmath22 ) as well as dependence disjunction when we write @xmath0 .    the method of systematically classifying the complexity of logic related problems by restricting the set of operators allowed in formulae goes back to lewis who used this method for the satisfiability problem of propositional logic @xcite .",
    "recently it was , for example , used by hemaspaandra et al .  for the satisfiability problem of modal logic @xcite and by lohmann and vollmer for the satisfiability problem of @xmath0@xcite .",
    "the motivation for this approach is that by systematically examining all fragments of a logic one might find a fragment which allows for efficient algorithms but still has high enough expressivity to be useful in practice . on the other hand",
    ", this systematic approach usually leads to insights into the sources of hardness , i.e. , the exact components of the logic that make satisfiability , model checking etc .  hard .    in this paper",
    "we transfer the method from satisfiability @xcite to model checking and classify the model checking problem for almost all fragments of @xmath0definable by restricting the set of allowed modal ( @xmath23 , @xmath7 ) and propositional ( @xmath24 , @xmath25 , @xmath22 , @xmath26 ) operators to an arbitrary subset of all operators .",
    "the model checking problem asks whether a given formula is true in a given team of a given kripke structure . for plain modal logic",
    "this problem is solvable in @xmath8as shown by clarke et al .",
    "a detailed complexity classification for the model checking problem over fragments of modal logic was shown by beyersdorff et al .",
    "@xcite ( who investigate the temporal logic @xmath27which contains plain modal logic as a special case ) .    in the case of @xmath0it turns out that model checking is @xmath6-complete in general and that this still holds for several seemingly quite weak fragments of @xmath0 , e.g. , the one without modalities or the one where nothing except dependence atoms and @xmath7 is allowed ( first and fourth line in [ results - unbounded - dep ] ) .",
    "strangely , this also holds for the case where only the both disjunctions @xmath28 and @xmath22 are allowed and not even dependence atoms occur ( third line in [ results - unbounded - dep ] ) .",
    "furthermore it seems natural to not only restrict modal and propositional operators but to also impose restrictions on dependence atoms .",
    "one such restriction is to limit the arity of dependence atoms , i.e. , the number @xmath29 of variables @xmath13 by which @xmath9 has to be determined to satisfy the formula @xmath14 , to a fixed upper bound @xmath30 ( the logic is then denoted by @xmath31 ) . for this restriction model checking remains @xmath6-complete in general but for the fragment with only the @xmath7 operator allowed this does not hold any more ( seventh line in table  [ results - bounded - dep ] ) . in this case",
    "either @xmath24 ( fourth line in table  [ results - bounded - dep ] ) or @xmath25 ( sixth line in table  [ results - bounded - dep ] ) is needed to still get @xmath6-hardness .",
    "we classify the complexity of the model checking problem for fragments of @xmath0with unbounded as well as bounded arity dependence atoms .",
    "we are able to determine the tractability of each fragment except the one where formulae are built from atomic propositions and unbounded dependence atoms only by disjunction and negation ( sixth line in table  [ results - unbounded - dep ] ) . in each of the other cases",
    "we either show @xmath6-completeness or show that the model checking problem admits an efficient ( polynomial time ) solution .",
    "@xmath32 @xmath33 operator present @xmath34 operator absent @xmath35 complexity independent of operator    @xmath36 @xmath33 operator present @xmath34 operator absent @xmath35 complexity independent of operator    in table  [ results - unbounded - dep ] we list our complexity results for the cases with unbounded arity dependence atoms and in table  [ results - bounded - dep ] for the cases with an a priori bound on the arity . in these tables a + means that the operator is allowed , a - means that the operator is forbidden and a * means that the operator does not affect the complexity of the problem .",
    "we will briefly present the syntax and semantics of @xmath0 . for a",
    "more in - depth introduction we refer to vnnen s definition of @xmath0@xcite and sevenster s model - theoretic and complexity analysis @xcite which also contains a self - contained introduction to @xmath0 .",
    "[ defmdlsyn](syntax of @xmath0 ) + let @xmath37 be an arbitrary set of atomic propositions and @xmath38 .",
    "then @xmath0is the set of all formulae built from the following rules : @xmath39 note that negation is only atomic , i.e. , it is only defined for atomic propositions and dependence atoms .",
    "we sometimes write @xmath40 ( resp .",
    "@xmath41 ) for @xmath42 ( resp .",
    "@xmath43 ) . for a dependence atom @xmath44",
    "we define its _ arity _ as @xmath29 , i.e. , the arity of a dependence atom is the arity of the determinating function whose existence it asserts .    in section  [ sec : bounded - fragments ]",
    "we will investigate the model checking problem for the following logic .",
    "[ defmdlk](@xmath31 ) + @xmath31is the subset of @xmath0that contains all formulae which do not contain any dependence atoms whose arity is greater than @xmath45 .",
    "we will classify @xmath0for all fragments defined by sets of operators .",
    "[ defopfrag](@xmath46 ) + let @xmath47 .",
    "by @xmath46 ( resp .",
    "@xmath48 ) we denote the subset of @xmath0(resp .",
    "@xmath31 ) built from atomic propositions using only operators from @xmath49 .",
    "we sometimes write @xmath50 instead of @xmath51 .",
    "@xmath0formulae are interpreted over kripke structures .",
    "[ defkripke](kripke structure ) + an _ @xmath37-kripke structure _ is a tuple @xmath52 where @xmath53 is an arbitrary non - empty set of _ worlds _ , @xmath54 is the _ accessibility relation _ and @xmath55 is the _ labeling function_.    [ defmdlsem](semantics of @xmath0 ) + in contrast to common modal logics , truth of a @xmath0formula is not defined with respect to a single world of a kripke structure but with respect to a set ( or _ team _ ) of worlds .",
    "let @xmath37 be a set of atomic propositions and @xmath56 .",
    "the _ truth _ of a formula @xmath57 in a team @xmath58 of an @xmath37-kripke structure @xmath52 is denoted by @xmath59 and is defined as follows : @xmath60    note that this semantics is a conservative extension of plain modal logic semantics , i.e. ,  it coincides with the latter for formulae which do neither contain dependence atoms nor classical disjunction .",
    "rationales for this semantics  especially for the case of the negative dependence atom  were given by vnnen @xcite .    in the remaining",
    "we will classify the complexity of the model checking problem for fragments of @xmath0and @xmath31 .",
    "[ defmdlmc](@xmath61@xmath62 ) + let @xmath47 .",
    "then the model checking problem for @xmath46 ( resp .",
    "@xmath48 ) over kripke structures is defined as the canonical decision problem of the set @xmath63 we write @xmath61@xmath62for @xmath64 .    before we begin with the classification we state a lemma showing that it does not matter whether we include @xmath65 , @xmath66 or @xmath26 in a sublogic @xmath46 of @xmath0since this does not affect the complexity of @xmath61@xmath67 .",
    "[ neg - dont - matter ] let @xmath49 be an arbitrary set of @xmath0operators , i.e. ,  @xmath68",
    ". then we have that @xmath69    it suffices to show @xmath70 .",
    "so let @xmath71 a kripke structure , @xmath58 , @xmath72 and the variables of @xmath73 among @xmath13 .",
    "let @xmath74 be fresh propositional variables .",
    "then @xmath75 iff @xmath76 , where @xmath77 with @xmath78 defined by @xmath79 for all @xmath80 and @xmath81 , and @xmath82 defined by @xmath83",
    "first we will show that the most general of our problems is in @xmath6and therefore all model checking problems investigated later are as well .",
    "[ mdlmc - in - np ] let @xmath49 be an arbitrary set of @xmath0operators .",
    "then @xmath61@xmath67 is in @xmath6 . and",
    "hence also @xmath84 is in @xmath85 for every @xmath86 .",
    "the following non - deterministic top - down algorithm checks the truth of the formula @xmath73 on the kripke structure @xmath87 in the evaluation set @xmath88 in polynomial time .    ....",
    "$ % bool check($w$ , $ t$ , $ \\varphi$ ) % $ case $ \\varphi$ when $ \\varphi = p$    foreach $ s \\in t$      if not $ p \\in \\pi(s)$ then        return false    return true  \\needspace{5\\baselineskip} when $ \\varphi=\\neg p$    foreach $ s \\in t$      if $ p \\in \\pi(s)$ then        return false    return true  \\needspace{7\\baselineskip} when $ \\varphi = \\,\\dep{p_1,\\ldots , p_n}$    foreach $ ( s , s')\\in t\\times t$      if $ \\pi(s)\\cap\\{p_1,\\dots , p_{n-1}\\}\\,=\\,\\pi(s')\\cap\\{p_1,\\dots , p_{n-1}\\}$ then            // i.e. , $ s$ and $ s'$ agree on the values of the propositions $ p_1,\\dots , p_{n-1}$        if ( $ q\\in\\pi(s)$ and not $ q\\in \\pi(s')$ ) or ( not $ q\\in\\pi(s)$ and $ q\\in \\pi(s')$ ) then          return false    return true  \\needspace{4\\baselineskip} when $ \\varphi = \\ , \\neg\\dep{p_1,\\ldots , p_n}$    if $ t=\\emptyset$      return true    return false ",
    "\\needspace{6\\baselineskip} when $ \\varphi = \\psi\\vee \\theta$    guess two sets of states $ a,\\,b \\subseteq s$    if not $ a\\cup",
    "b = t$ then      return false    return ( check($w , a,\\psi$ ) and check($w , b,\\theta$ ) ) ",
    "\\needspace{2\\baselineskip} when $ \\varphi = \\psi\\nor \\theta$    return ( check($w , t,\\psi$ ) or check($w , t,\\theta$ ) ) ",
    "\\needspace{2\\baselineskip} when $ \\varphi= \\psi\\wedge \\theta$    return ( check($w , t,\\psi$ ) and check($w , t,\\theta$ ) ) ",
    "\\needspace{8\\baselineskip} when $ \\varphi= \\ax \\psi$    $ t':=\\emptyset$    foreach $ s ' \\in s$      foreach $ s \\in t$        if $ ( s , s ' ) \\in r$ then          $ t':= t ' \\cup \\{s'\\}$              //",
    "$ t'$ is the set of all successors of all states in $ t$    return check($w , t',\\psi$ ) ",
    "\\needspace{7\\baselineskip} when $ \\varphi= \\ex \\psi$    guess set of states $ t'\\subseteq s$      foreach $ s\\in t$        if there is no $ s'\\in t'$ with $ ( s , s')\\in r$ then          return false              //",
    "$ t'$ contains at least one successor of every state in t    return check($w , t',\\psi$ ) ....    now we will see that the model checking problem is @xmath6-hard and that this still holds without modalities .",
    "[ wedge - vee - np - complete ] let @xmath89 .",
    "then @xmath61@xmath67 is @xmath6-complete .",
    "furthermore , @xmath90@xmath91 is @xmath6-complete for every @xmath30 .",
    "membership in @xmath6follows from proposition [ mdlmc - in - np ] . for the hardness proof",
    "we reduce from @xmath92 . for this purpose",
    "let @xmath93 be an arbitrary @xmath94 formula with variables @xmath95 .",
    "let @xmath87 be the kripke structure @xmath96 over the atomic propositions @xmath97 defined by @xmath98    let @xmath99 be the @xmath100 formula @xmath101 and let @xmath102 the evaluation set .",
    "we will show that @xmath103 iff @xmath104 .",
    "then it follows that @xmath105 and therefore @xmath106 is @xmath6-hard .",
    "now assume @xmath103 and @xmath107 an interpretation with @xmath108 . from the valuations @xmath109 of all @xmath110 we construct subteams @xmath111 such that for all @xmath112 it holds that @xmath113 with @xmath114 .",
    "the @xmath115 are constructed as follows @xmath116 since every clause in @xmath73 is satisfied by some valuation @xmath117 or @xmath118 we have that @xmath119 such that @xmath120 .    on the other hand , assume that @xmath104 , therefore we have @xmath121 such that for all @xmath122 it holds that @xmath123 .",
    "therefore @xmath124 is constant for all elements @xmath125 . from this",
    "we can construct a valid interpretation @xmath107 for @xmath73 .    for all @xmath126 let @xmath127 . for every @xmath128 we consider @xmath115 .",
    "if for every element @xmath125 it holds that @xmath129 then we have for all @xmath130 that @xmath110 is a literal in @xmath131 . in order to satisfy those @xmath131 we set @xmath132 .",
    "if for every element @xmath125 it holds that @xmath133 then we have for every @xmath130 that @xmath134 is a literal in @xmath131 . in order to satisfy those @xmath131 we set @xmath118 .",
    "+ since for every @xmath135 there is a @xmath126 with @xmath125 we have an evaluation @xmath107 that satisfies every clause in @xmath73 .",
    "therefore we have @xmath108 .",
    "instead of not having modalities at all we can also allow nothing but the @xmath7 modality , i.e. , we disallow propositional connectives and the @xmath23 modality , and model checking is @xmath6-complete as well .",
    "[ diamond - np - complete ] let @xmath136 .",
    "then @xmath61@xmath67 is @xmath6-complete .",
    "membership in @xmath6follows from proposition [ mdlmc - in - np ] again .    for hardness",
    "we again reduce from @xmath137 .",
    "let @xmath138 be an arbitrary @xmath139formula built from the variables @xmath140 .",
    "let @xmath87 be the kripke structure @xmath141 , over the atomic propositions @xmath142 , shown in figure  [ figure : diamond - dep1 ] and formally defined by @xmath143    ( c1 ) @xmath144 ; ( x1 _ ) [ below left of = c1 , label = left:@xmath145 @xmath146 ; ( x1 ) [ below right of = c1 , label = right:@xmath147 @xmath148 ;    ( c1 ) edge [ bend left ] node ( x1 ) ;    let @xmath99 be the @xmath149 formula @xmath150 and let @xmath151 .",
    "we will show that @xmath103 iff @xmath104 .",
    "hence , @xmath152 and @xmath153 is @xmath6-hard .",
    "first suppose we have an interpretation @xmath107 that satisfies @xmath73 . from the valuations of @xmath107 we will construct a successor team @xmath154 of @xmath88 ,",
    "i.e. , for all @xmath155 there is an @xmath156 s.t .",
    "@xmath157 with @xmath158 .",
    "@xmath154 is defined by : @xmath159 since @xmath107 satisfies every clause @xmath131 of @xmath73 we have that for every @xmath131 there is an @xmath110 with @xmath160 it follows that for every @xmath161 there is an @xmath162 such that @xmath157 .    by construction of @xmath154",
    "it is not possible to have both @xmath146 and @xmath148 in @xmath154 .",
    "hence for all elements @xmath163 it follows that @xmath164 and therefore @xmath165 .",
    "thus @xmath158 .",
    "on the other hand assume @xmath166 .",
    "then there is a successor set @xmath154 of @xmath88 s.t .  for every @xmath161",
    "there is an @xmath162 with @xmath157 and @xmath167 .",
    "we construct @xmath107 as follows : @xmath168 note that in the latter case it does not matter if 0 or 1 is chosen .    since @xmath169 and for every @xmath126 it holds that @xmath170 we have that for every @xmath126 at most one of @xmath146 or @xmath148 is in @xmath154 .",
    "it follows that @xmath107 is well - defined .    since for every @xmath171 there is an @xmath172 s.t .",
    "@xmath173 with @xmath174 , we have by contruction of @xmath87 that @xmath107 satisfies every clause @xmath131 of @xmath73 . from this",
    "follows @xmath103 .    if we disallow @xmath7 but allow @xmath23 instead we have to also allow @xmath25 to get @xmath6-hardness .",
    "[ box - vee - np - complete ] let @xmath175 .",
    "then @xmath61@xmath67 is @xmath6-complete . also , @xmath90@xmath91 is @xmath6-complete for every @xmath30 .",
    "membership in @xmath6follows from proposition [ mdlmc - in - np ] again . to prove hardness",
    ", we will once again reduce @xmath92to this problem .",
    "let @xmath138 be an arbitrary @xmath94 formula over the variables @xmath140 .",
    "let @xmath87 be the structure @xmath141 , over the atomic propositions @xmath13 , shown in figures  [ chain1 ] to [ chain6 ] and formally defined as follows : @xmath176    \\multicolumn{3}{l}{r\\ , \\cap\\bigcup\\limits_{j\\in\\{1,\\dots , n\\}}\\,\\{(s_i , r_i^j),(s_i,\\overline r_i^j)\\}\\ { \\mathrel{\\mathop:}=}}\\\\ \\multicolumn{3}{l}{\\qquad\\left\\{\\begin{array}{lll } \\{(s_i , r_i^1)\\ }                                          & \\text{iff $ x_1 $ occurs in $ c_i$ ( positively or negatively ) } & \\text{\\emph{(fig.~\\ref{chain1})}}\\\\ \\{(s_i , r_i^1),(s_i , \\overline r_i^1 ) \\ }                  & \\text{iff $ x_1 $ does not occur in $ c_i$ } & \\text{\\emph{(fig.~\\ref{chain2})}}\\\\ \\end{array}\\right.}\\\\[4ex ]    \\multicolumn{3}{l}{r \\,\\cap \\bigcup\\limits_{k\\in\\{1,\\dots , n\\}}\\,\\{(r_i^j , r_i^{k}),(r_i^j,\\overline r_i^{k}),(\\overline r_i^j , r_i^{k}),(\\overline r_i^j,\\overline r_i^{k})\\}\\ { \\mathrel{\\mathop:}=}}\\\\",
    "\\multicolumn{3}{l}{\\qquad\\left\\{\\begin{array}{lll } \\{(r_i^j , r_i^{j+1})\\ }                                    & \\parbox[t]{15em}{iff $ x_{j}$ and $ x_{j+1}$ both occur in $ c_i$ } & \\text{\\emph{(fig.~\\ref{chain3})}}\\\\ \\{(r_i^j , r_i^{j+1}),(r_i^j , \\overline r_i^{j+1 } ) \\ }      & \\parbox[t]{15em}{iff $ x_{j}$ occurs in $ c_i$ but $ x_{j+1}$ does not occur in $ c_i$ } & \\text{\\emph{(fig.~\\ref{chain4})}}\\\\[3ex ] \\{(r_i^j , r_i^{j+1}),(\\overline r_i^j , r_i^{j+1})\\ }       & \\parbox[t]{15em}{iff $ x_j$ does not occur in $ c_i$ but $ x_{j+1}$ does occur in $ c_i$ } & \\text{\\emph{(fig.~\\ref{chain5})}}\\\\[3ex ] \\{(r_i^j , r_i^{j+1}),(\\overline r_i^j , \\overline r_i^{j+1 } ) \\ } & \\parbox[t]{15em}{iff neither $ x_j$ nor $ x_{j+1}$ occur in $ c_i$ } & \\text{\\emph{(fig.~\\ref{chain6 } ) } } \\end{array}\\right.}\\\\[11ex ]    \\pi(s_i ) & { \\mathrel{\\mathop:}= } & \\emptyset\\\\ \\pi(r_i^j ) & { \\mathrel{\\mathop:}= } & \\begin{cases}\\{p_j\\ }    & \\text{iff $ x_j$ occurs in $ c_i$ positively or not at all}\\\\                                   \\emptyset & \\text{iff $ x_j$ occurs in $ c_i$ negatively}\\end{cases}\\\\ \\pi(\\overline r_i^j ) & { \\mathrel{\\mathop:}= } & \\emptyset \\end{array}\\ ] ]    ( c1 ) @xmath177 ;",
    "( s1x1 ) [ below of = c1 ] @xmath178 ;    ( c1 ) edge node ( s1x1 ) ;    ( c1 ) @xmath177 ; ( s1x1 ) [ below right of = c1 ] @xmath178 ; ( s1x1 _ ) [ below left of = c1 ] @xmath179 ;    ( c1 ) edge node ( s1x1 _ ) edge node ( s1x1 ) ;    ( s1x2 ) @xmath180 ; ( s1x1 ) [ above of = s1x2 ] @xmath181 ;    ( s1x1 ) edge node ( s1x2 ) ;    ( s1x1 ) @xmath181 ; ( s1x2 _ ) [ below left of = s1x1 ] @xmath182 ; ( s1x2 ) [ below right of = s1x1 ] @xmath180 ;    ( s1x1 ) edge node ( s1x2 ) ; ( s1x1 ) edge node ( s1x2 _ ) ;    ( s1x2 ) @xmath180 ; ( s1x1 ) [ above right of = s1x2 ] @xmath181 ; ( s1x1 _ ) [ above left of = s1x2 ] @xmath183 ;    ( s1x1 ) edge node ( s1x2 ) ; ( s1x1 _ ) edge node ( s1x2 ) ;    ( s1x1 ) @xmath181 ; ( s1x1 _ ) [ left of = s1x1 ] @xmath183 ; ( s1x2 ) [ below of = s1x1 ] @xmath180 ; ( s1x2 _ ) [ below of = s1x1 _ ] @xmath184 ;    ( s1x1 ) edge node ( s1x2 ) ; ( s1x1 _ ) edge node ( s1x2 _ ) ;    let @xmath99 be the @xmath185 formula @xmath186 and let @xmath187 .",
    "then , as we will show , @xmath103 iff @xmath188 and therefore @xmath189 is @xmath6-complete .",
    "intuitively , the direction from left to right holds because the disjunction splits the team @xmath190 of all starting points of chains of length @xmath29 into @xmath29 subsets ( one for each variable ) in the following way : @xmath177 is in the subset that belongs to @xmath110 iff @xmath110 satisfies the clause @xmath131 under the variable valuation that satisfies @xmath73 .",
    "then the team that belongs to @xmath110 collectively satisfies the disjunct @xmath191 of @xmath99 . for the reverse direction",
    "the @xmath192 states are needed to ensure that a state @xmath177 can only satisfy a disjunct @xmath191 if there is a variable @xmath110 that occurs in clause @xmath131 ( positively or negatively ) and satisfies @xmath131 .",
    "more precisely , assume @xmath107 is a satisfying interpretation for @xmath73 . from @xmath107",
    "we construct subteams @xmath111 with @xmath119 s.t .  for all @xmath126",
    "it holds that @xmath193 .",
    "@xmath115 is defined by @xmath194 for all @xmath195 .",
    "obviously , for all @xmath126 it holds that @xmath193 .",
    "now we will show that for all @xmath196 there is a @xmath195 such that @xmath125 .",
    "for this purpose let @xmath196 and suppose @xmath131 is satisfied by @xmath132 for a @xmath195 .",
    "then , by definition of @xmath87 , @xmath197 , hence @xmath198 and therefore @xmath125 .",
    "if , on the other hand , @xmath131 is satisfied by @xmath199 then we have that @xmath200 , hence @xmath201 and again it follows that @xmath125 .",
    "altogether we have that for all @xmath202 there is a @xmath126 such that @xmath125 .",
    "it follows that @xmath119 and therefore @xmath188 .    on the other hand",
    "assume @xmath188 .",
    "therefore we have @xmath203 with @xmath193 for all @xmath195 .",
    "we define a valuation @xmath107 by @xmath204 since every @xmath177 is contained in a @xmath115 we know that for all @xmath196 there is a @xmath195 with @xmath205 . from this",
    "it follows that @xmath110 occurs in @xmath131 ( positively or negatively ) since otherwise , by definition of @xmath87 , both @xmath181 and @xmath192 would be reachable from @xmath177 .",
    "it also holds that @xmath206 or @xmath207 . in the former case we have that @xmath208 , hence , by definition of @xmath87 , @xmath110 is a literal in @xmath131 . by construction of @xmath107",
    "it follows that @xmath131 is satisfied . in the latter case it holds that @xmath209 is a literal in @xmath131 .",
    "again , by construction of @xmath107 it follows that @xmath131 is satisfied .",
    "hence , @xmath103 .",
    "the following example demonstrates the construction from the previous proof .",
    "[ box - vee - np - complete - example ] let @xmath73 be the @xmath139formula @xmath210 the corresponding kripke structure @xmath87 shown in figure  [ fig : wedge - vee - np - complete - example ] has _ levels _ 0 to 4 where the @xmath126th level ( corresponding to the variable @xmath110 in the formula @xmath73 ) is the set of nodes reachable via exactly @xmath126 transitions from the set of nodes @xmath211 , @xmath212 and @xmath213 ( corresponding to the clauses of @xmath73 )",
    ". in this example all non connected states ( which do not play any role at all ) are not shown .",
    "the @xmath0formula corresponding to @xmath73 is @xmath214    ( c1 ) @xmath211 ; ( c1 _ ) [ right of = c1 ] @xmath211 ; ( c2 ) [ right of = c1 _ ] @xmath212 ; ( c2 _ ) [ right of = c2 ] @xmath211 ; ( c3 ) [ right of = c2 _ ] @xmath213 ; ( s1x1 ) [ below of = c1 , label = left : ] @xmath215 ; ( s2x1 _ ) [ below left of = c2 ] @xmath216 ; ( s2x1 ) [ below right of = c2 , label = left:@xmath217 @xmath218 ; ( s3x1 ) [ below of = c3 , label = left:@xmath217 @xmath219 ;    ( s1x2 ) [ below of = s1x1 , label = left:@xmath220 @xmath221 ; ( s2x2 ) [ below left of = s2x1 , label = left:@xmath220 @xmath222 ; ( s3x2 ) [ below of = s3x1 ] @xmath223 ;    ( s1x3 ) [ below of = s1x2 , label = left:@xmath224 @xmath225 ; ( s2x3 ) [ below of = s2x2 ] @xmath226 ; ( s3x3 _ ) [ below left of = s3x2 ] @xmath227 ; ( s3x3 ) [ below right of = s3x2 , label = left:@xmath224 @xmath228 ; ( s1x4 ) [ below right of = s1x3 , label = left:@xmath229 @xmath230 ; ( s1x4 _ ) [ below left of = s1x3 , label = left:@xmath231 @xmath232 ; ( s2x4 ) [ below of = s2x3 , label = left:@xmath229 @xmath233 ; ( s3x4 ) [ below of = s3x3 , label = left:@xmath229 @xmath234 ; ( s3x4 _ ) [ below of = s3x3 _ , label = left:@xmath231 @xmath235 ;    ( c1 ) edge node ( s1x1 ) ( s1x1 ) edge node ( s1x2 ) ( s1x2 ) edge node ( s1x3 ) ( s1x3 ) edge node ( s1x4 _ ) edge node ( s1x4 ) ( c2 ) edge node ( s2x1 ) edge node ( s2x1 _ ) ( s2x1 ) edge node ( s2x2 ) ( s2x1 _ ) edge node ( s2x2 ) ( s2x2 ) edge node ( s2x3 ) ( s2x3 ) edge node ( s2x4 ) ( c3 ) edge node ( s3x1 ) ( s3x1 ) edge node ( s3x2 ) ( s3x2 ) edge node ( s3x3 ) ( s3x2 ) edge node ( s3x3 _ ) ( s3x3 _ ) edge node ( s3x4 _ ) ( s3x3 ) edge node ( s3x4 ) ;    let @xmath236 with @xmath188 and for all @xmath237 let @xmath238 with @xmath123 and @xmath239 . by comparing the formulae @xmath240 with the chains in the kripke structure one can easily verify that @xmath241 i.e. , there can at most be one of @xmath211 and @xmath213 in @xmath242 since @xmath243 and @xmath212 can not be in @xmath242 since its direct successors @xmath244 do not agree on @xmath245 .",
    "in this case @xmath246 means that @xmath247 is satisfied by setting @xmath248 and the fact that @xmath249 corresponds to the fact that there is no way to satisfy @xmath250 via @xmath251 , because @xmath251 does not occur in @xmath250 .",
    "analogously , @xmath252 or @xmath253 , and @xmath254 and @xmath255 .",
    "now , e.g. , the valuation @xmath107 where @xmath251 , @xmath256 and @xmath257 evaluate to true and @xmath258 to false satisfies @xmath73 . from this valuation",
    "one can construct sets @xmath259 with @xmath260 such that @xmath123 for all @xmath261 by defining @xmath262 for all @xmath126 .",
    "this leads to @xmath263 , @xmath264 and @xmath265 .",
    "the gray colourings indicate which chains ( resp .",
    "clauses ) are satisfied on which levels ( resp .  by which variables ) .",
    "@xmath99 ( resp .",
    "@xmath73 ) is satisfied because there is a gray coloured state in each chain .",
    "if we disallow both @xmath7 and @xmath25 the problem becomes tractable since the non - deterministic steps in the model checking algorithm are no longer needed .",
    "[ box - wedge - in - p ] let @xmath266 .",
    "then @xmath61@xmath67 is in @xmath8 .",
    "algorithm  [ algo : check ] is a non - deterministic algorithm that checks the truth of an arbitrary @xmath0formula in a given structure in polynomial time . since @xmath267 it holds that @xmath268 .",
    "therefore the non - deterministic steps are never used and the algorithm is in fact deterministic in this case .",
    "note that this deterministic polynomial time algorithm is a top - down algorithm and therefore works in a fundamentally different way than the usual deterministic polynomial time bottom - up algorithm for plain modal logic .",
    "now we have seen that @xmath153 is tractable if @xmath269 and @xmath270 since these two operators are the only source of non - determinism . on the other hand",
    ", @xmath153 is @xmath6-complete if @xmath271 and either @xmath272 ( theorem  [ diamond - np - complete ] ) or @xmath273 ( theorem  [ box - vee - np - complete ] ) .",
    "the remaining question is what happens if only @xmath25 ( but not @xmath23 ) is allowed .",
    "unfortunately this case has to remain open for now .",
    "we will now show that @xmath274 is in @xmath8if we impose the following constraint on the dependence atoms in formulae given as part of problem instances : there is a constant @xmath275 such that in any input formula it holds for all dependence atoms of the form @xmath276 that @xmath277 . to prove this statement",
    "we will decompose it into two smaller propositions .",
    "first we show that even the whole @xmath278 fragment with unrestricted @xmath1 atoms is in @xmath8as long as it is guaranteed that in every input formula at least a specific number of dependence atoms  depending on the size of the kripke structure  occur .",
    "we will need the following obvious lemma stating that a dependence atom is always satisfied by a team containing at least half of all the worlds .",
    "[ split - in - two ] let @xmath52 be a kripke structure , @xmath279 ( @xmath280 ) an atomic formula and @xmath58 an arbitrary team .",
    "then there is a set @xmath281 such that @xmath282 and @xmath283 .",
    "let @xmath284 and @xmath285",
    ". then @xmath286 and @xmath287 .",
    "therefore there is an @xmath288 such that @xmath289 .",
    "let @xmath290 .",
    "since @xmath9 is either labeled in every state of @xmath154 or in no one , it holds that @xmath291 .    we will now formalize a notion of many dependence atoms in a formula .",
    "[ defmdlmcl ] for @xmath57 let @xmath292 be the number of positive dependence atoms in @xmath73 .",
    "let @xmath293 an arbitrary function and @xmath294 .",
    "then @xmath295@xmath296 ( resp .",
    "@xmath90@xmath297 ) is the problem @xmath61@xmath67 ( resp .",
    "@xmath90@xmath91 ) restricted to inputs @xmath298 that satisfy the condition @xmath299 .",
    "if we only allow @xmath25 and we are guaranteed that there are many dependence atoms in each input formula then model checking becomes trivial  even for the case of unbounded dependence atoms .",
    "[ many - dep - atoms - trivial ] let @xmath300 .",
    "then @xmath301 is trivial , i.e. , for all kripke structures @xmath52 and all @xmath72 such that the number of positive dependence atoms in @xmath73 is greater than @xmath302 it holds for all @xmath58 that @xmath120 .",
    "let @xmath52 , @xmath72 , @xmath58 be an arbitrary instance with @xmath303 dependence atoms in @xmath73 .",
    "then either @xmath304 or @xmath305 where each @xmath306 is either a ( possibly negated ) atomic proposition or a negated dependence atom",
    ".    * claim . * for all @xmath307 there is a set @xmath308 such that @xmath309 and @xmath310 .",
    "the main proposition follows immediately from case @xmath311 of this claim : from @xmath312 follows that @xmath313 and from @xmath314 follows that @xmath315 .    _",
    "inductive proof of the claim .",
    "_ for @xmath316 we can choose @xmath317 .",
    "for the inductive step let the claim be true for all @xmath318 .",
    "by lemma  [ split - in - two ] there is a set @xmath319 such that @xmath320 and @xmath321 .",
    "let @xmath322 . since @xmath323 it follows by definition of the semantics of @xmath25 that @xmath324 .",
    "furthermore , @xmath325    note that @xmath301 is only trivial , i.e. , all instance structures satisfy all instance formulae , if we assume that only valid instances , i.e. , where the number of dependence atoms is guaranteed to be large enough , are given as input .",
    "however , if we have to verify this number the problem clearly remains in @xmath8 .",
    "now we consider the case in which we have very few dependence atoms ( which have bounded arity ) in each formula .",
    "we use the fact that there are only a few dependence atoms by searching through all possible determinating functions for the dependence atoms . note that in this case we do not need to restrict the set of allowed @xmath0operators as we have done above .",
    "[ few - dep - atoms - in - p ] let @xmath30 .",
    "then @xmath326 is in @xmath8 .    from the semantics of @xmath327",
    "it follows that @xmath328 is equivalent to @xmath329 where @xmath330 and @xmath331  both introduced by sevenster ( * ? ? ?",
    "* section  4.2 )  have the following semantics : @xmath332    now let @xmath52 , @xmath58 and @xmath333 be a problem instance .",
    "first , we count the number @xmath334 of dependence atoms in @xmath73 . if @xmath303 we reject the input instance .",
    "otherwise we replace every dependence atom by its translation according to [ eq : dep - as - function ] ( each time using a new function symbol ) . since the dependence atoms in @xmath73 are at most @xmath45-ary we have from the transformation that the introduced function variables @xmath335 are also at most @xmath45-ary .",
    "from this it follows that the upper bound for the number of interpretations of each of them is @xmath336 . for each possible tuple of interpretations @xmath337 for the function variables we obtain an @xmath338formula @xmath339 by replacing each existential quantifier @xmath340 by a boolean formula encoding of the interpretation @xmath341 ( for example by encoding the truth table of @xmath342 with a formula in disjunctive normal form ) . for each such tuple we model check @xmath339 . that is possible in polynomial time in @xmath343 as shown by clarke et al",
    ".  @xcite .",
    "since the encoding of an arbitrary @xmath45-ary boolean function has length at most @xmath344 and @xmath45 is constant this is a polynomial in @xmath345 .",
    "furthermore , the number of tuples over which we have to iterate is bounded by @xmath346    with proposition  [ many - dep - atoms - trivial ] and proposition  [ few - dep - atoms - in - p ] we have shown the following theorem .    [",
    "vee - bounded - in - p ] let @xmath347 , @xmath30 .",
    "then @xmath90@xmath91 is in @xmath8 .    given a kripke structure @xmath52 and a @xmath348 formula @xmath73 the algorithm counts the number @xmath349 of dependence atoms in @xmath73 . if @xmath350 the input is accepted ( because by proposition  [ many - dep - atoms - trivial ] the formula is always fulfilled in this case ) .",
    "otherwise the algorithm from the proof of proposition  [ few - dep - atoms - in - p ] is used .",
    "and there is another case where we can use the exhaustive determinating function search .",
    "[ no - wedge - no - vee ] let @xmath351 .",
    "then @xmath84 is in @xmath352 for every @xmath30 .",
    ". then there can be at most one dependence atom in @xmath73 because @xmath49 only contains unary operators .",
    "therefore we can once again use the algorithm from the proof of proposition  [ few - dep - atoms - in - p ] .    in theorem",
    "[ diamond - np - complete ] we saw that @xmath354 is @xmath6-complete .",
    "the previous theorem includes @xmath355 as a special case .",
    "hence , the question remains which are the minimal supersets @xmath49 of @xmath356 such that @xmath84 is @xmath6-complete .",
    "we will now see that adding either @xmath24 ( ) or @xmath25 ( ) is already enough to get @xmath6-completeness again .",
    "but note that in the case of @xmath25 we need @xmath357 while for @xmath316 the question remains open .",
    "[ diamond - wedge - bounded ] let @xmath358 .",
    "then @xmath84 is @xmath6-complete for every @xmath30 .",
    "membership in @xmath6follows from [ mdlmc - in - np ] . for hardness",
    "we once again reduce @xmath92to our problem .",
    "for this purpose let @xmath359 be an arbitrary @xmath139formula built from the variables @xmath360 .",
    "let @xmath87 be the kripke structure @xmath361 shown in [ figure : diamond - wedge - bounded ] and formally defined by @xmath362    ( c1 ) @xmath363 ; ( c2 ) [ right of = c1 ] @xmath364 ; ( c3 ) [ right of = c2 ] @xmath365 ; ( cx ) [ right of = c3 ] @xmath366 ;    ( x1 ) [ below of = c1 ] @xmath367 ; ( tx1 ) [ right of = x1 ] @xmath368 ; ( x2 ) [ right of = tx1 ] @xmath369 ; ( tx2 ) [ right of = x2 ] @xmath370 ; ( x3 ) [ right of = tx2 ] @xmath371 ; ( xx ) [ right of = x3 ] @xmath366 ; ( tt1 ) at ( -1.5,-2 ) [ label=225:@xmath372 @xmath373 ; ( t1 ) at ( -3,-1 ) [ label=225:@xmath374 @xmath375 ;    ( xx1 ) [ below of = x1 ] @xmath376 ; ( xx ) at ( -2.5,-3 ) @xmath377 ; ( txx1 ) [ below of = tx1 ] @xmath378 ; ( xx2 ) [ below of = x2 ] @xmath379 ; ( txx2 ) [ below of = tx2 ] @xmath380 ; ( xx3 ) [ below of = x3 ] @xmath381 ; ( xx ) [ right of = xx3 ] @xmath366 ;    ( xxx1 ) [ below of = xx1 ] @xmath382 ; ( txxx1 ) [ below of = txx1 ] @xmath383 ; ( xxx2 ) [ below of = xx2,label = below:@xmath377 ] @xmath385 ; ( txxx2 ) [ below of = txx2 ] @xmath386 ; ( xxx3 ) [ below of = xx3 ] @xmath387 ; ( xxx ) [ right of = xxx3 ] @xmath366 ;    ( c1 ) edge node ( x1 ) ; ( c1 ) edge node ( tx2 ) ; ( c2 ) edge node ( x1 ) ; ( c2 ) edge node ( x2 ) ; ( c2 ) edge node ( x3 ) ; ( c3 ) edge node ( tx1 ) ; ( c3 ) edge node ( x3 ) ;    ( x1 ) edge node ( xx1 ) ; ( tx1 ) edge node ( txx1 ) ; ( x2 ) edge node ( xx2 ) ; ( tx2 ) edge node ( txx2 ) ; ( x3 ) edge node ( xx3 ) ; ( x1 ) edge node ( t1 ) ; ( x2 ) edge [ bend right=14 ] node ( t1 ) ; ( tx2 ) edge [ bend right=14 ] node ( t1 ) ; ( x3 ) edge [ bend right=14 ] node ( t1 ) ; ( tx1 ) edge [ bend left=10 ] node ( tt1 ) ; ( x2 ) edge [ bend left=10 ] node ( tt1 ) ; ( tx2 ) edge [ bend left=10 ] node ( tt1 ) ; ( x3 ) edge [ bend left=10 ] node ( tt1 ) ;    ( xx1 ) edge node ( xxx1 ) ; ( txx1 ) edge node ( txxx1 ) ; ( xx2 ) edge node ( xxx2 ) ; ( txx2 ) edge node ( txxx2 ) ; ( xx3 ) edge node ( xxx3 ) ;    the underlying @xmath139formula contains the clauses @xmath388 , @xmath389 and @xmath390 [ figure : diamond - wedge - bounded ]    and let @xmath99 be the @xmath391 formula @xmath392    we again show that @xmath103 iff @xmath393 .",
    "first assume that @xmath103 and that @xmath107 is a satisfying valuation for the variables in @xmath73 .",
    "now let @xmath394 for all @xmath395 .",
    "then it holds that @xmath396 .",
    "furthermore , since @xmath107 satisfies @xmath73 it holds for all @xmath397 that there is a @xmath398 such that @xmath399 .",
    "hence , @xmath400 .",
    "for the reverse direction assume that @xmath401 .",
    "now let @xmath402 such that @xmath403 and for all @xmath397 there is a @xmath155 with @xmath404 .    since @xmath405 there is no @xmath195 with @xmath406 and also @xmath407 .",
    "now let @xmath107 be the valuation of @xmath408 defined by @xmath409    since for each @xmath397 there is a @xmath195 such that either @xmath410 and @xmath406 or @xmath411 and @xmath407 it follows that for each clause @xmath131 of @xmath73 there is a @xmath195 such that @xmath110 satisfies @xmath131 under @xmath107 .",
    "[ diamond - vee - bounded ] let @xmath412 .",
    "then @xmath84 is @xmath6-complete for every @xmath357 .    as above membership in @xmath6follows from proposition [ mdlmc - in - np ] and for hardness we reduce",
    "@xmath92to our problem .    for this purpose let @xmath359 be an arbitrary @xmath139formula built from the variables @xmath413",
    "let @xmath87 be the kripke structure @xmath361 shown in figure [ figure : diamond - vee - bounded ] and formally defined by @xmath414    \\{p_j\\ } & \\text{iff } p_j\\in",
    "c_i\\\\    \\emptyset & \\text{iff } \\neg p_j \\in c_i \\end{array}\\right . \\end{array}\\ ] ]    ( c1 ) [ label = left:@xmath9 ] @xmath416 ; ( c2 ) [ right of = c1,label = left:@xmath9 ] @xmath417 ; ( c3 ) [ right of = c2 ] @xmath418 ; ( c12 ) [ below of = c1 ] @xmath419 ; ( c22 ) [ below of = c2,label = left:@xmath220 @xmath420 ; ( c32 ) [ below of = c3,label = left:@xmath9 ] @xmath421 ; ( c13 ) [ below of = c12,label = left:@xmath9 ] @xmath422 ; ( c23 ) [ below of = c22,label = below:@xmath377 ] @xmath423 ; ( c33 ) [ below of = c32,label = left:@xmath9 ] @xmath424 ; ( cx ) [ right of = c32 ] @xmath366 ;    ( x2 ) [ below of = c23,label = left:@xmath9 ] @xmath425 ; ( x1 ) [ left of = x2,label = left:@xmath426 @xmath427 ; ( x3 ) [ right of = x2,label = left:@xmath9 ] @xmath428 ;    ( xx2 ) [ below of = x2,label = left:@xmath429 @xmath430 ; ( xx3 ) [ below of = x3,label = left:@xmath9 ] @xmath431 ; ( xx ) [ right of = xx3 ] @xmath366 ;    ( xxx3 ) [ below of = xx3,label = left:@xmath432 @xmath433 ;    ( c1 ) edge node ( c12 ) ; ( c2 ) edge node ( c22 ) ; ( c3 ) edge node ( c32 ) ; ( c12 ) edge node ( c13 ) ; ( c22 ) edge node ( c23 ) ; ( c32 ) edge node ( c33 ) ;    ( x2 ) edge node ( xx2 ) ; ( x3 ) edge node ( xx3 ) ;    ( xx3 ) edge node ( xxx3 ) ;    let @xmath99 be the @xmath0formula @xmath434    once again we show that @xmath103 iff @xmath435 .",
    "first assume that @xmath103 and that @xmath107 is a satisfying valuation for the variables in @xmath73 .",
    "now let @xmath436 for all @xmath395 .",
    "then it follows that @xmath437 and that @xmath438 for all @xmath395 .",
    "additionally , it holds that @xmath439 ( @xmath395 ) .",
    "together it follows that @xmath440 for all @xmath395 .",
    "this implies @xmath441 which is equivalent to @xmath442    for the reverse direction assume that @xmath188 with @xmath443 .",
    "let @xmath444 be subsets of @xmath88 with @xmath445 such that for all @xmath195 it holds that @xmath446 .",
    "then it follows that @xmath447 since the chain starting in @xmath427 consists of only one state . from @xmath448 and @xmath449",
    "it follows that @xmath450 and hence ( again because of the length of the chain ) @xmath451 .",
    "inductively , it follows that @xmath452 for all @xmath395 .",
    "now , it follows from @xmath452 that for all @xmath196 with @xmath453 : @xmath454 ( because @xmath455 , @xmath456 ) . since @xmath446",
    ", it then holds that @xmath457 .",
    "now let @xmath107 be the valuation of @xmath13 defined by @xmath458    since for each @xmath397 there is a @xmath195 such that @xmath453 it follows that for each clause @xmath131 of @xmath73 there is a @xmath195 such that @xmath459 satisfies @xmath131 under @xmath107 .",
    "first we show that classical disjunction can substitute zero - ary dependence atoms .",
    "[ nor replaces dep ] let @xmath460 . then @xmath461    follows immediately from the equivalence of @xmath462 and @xmath463 together with [ neg - dont - matter ] .",
    "the following surprising result shows that both kinds of disjunctions together are already enough to get @xmath6-completeness .",
    "[ nor vee ] let @xmath464 .",
    "then @xmath84 is @xmath6-complete for every @xmath30 .    as above membership in @xmath6follows from [ mdlmc - in - np ] and for hardness we reduce",
    "@xmath92to our problem  using a construction that bears some similarities with the one used in the proof of [ diamond - vee - bounded ] .",
    "for this purpose let @xmath359 be an arbitrary @xmath139formula built from the variables @xmath413 .",
    "let @xmath87 be the kripke structure @xmath361 shown in [ figure : nor vee ] and formally defined by @xmath465    ( c1 ) [ label=225:@xmath245 , @xmath466 @xmath467 ; ( c2 ) [ right of = c1,label=225:@xmath468 , @xmath469 @xmath470 ; ( c3 ) [ right of = c2,label=225:@xmath471 , @xmath229 @xmath472 ; ( cx ) [ right of = c3 ] @xmath366 ;    the underlying @xmath139formula contains the clauses @xmath473 , @xmath474 and @xmath475 [ figure : nor vee ]    let @xmath99 be the @xmath0formula @xmath476    once again we show that @xmath103 iff @xmath477 .",
    "first assume that @xmath103 and that @xmath107 is a satisfying valuation for @xmath73 .",
    "now let @xmath478 for all @xmath395 .",
    "then it follows that @xmath479 and that @xmath480 for all @xmath395 .",
    "together it follows that @xmath481    for the reverse direction assume that @xmath188 with @xmath482 .",
    "let @xmath483 be subsets of @xmath88 with @xmath445 such that for all @xmath195 it holds that @xmath484 .",
    "now let @xmath107 be the valuation of @xmath13 defined by @xmath485    since for each @xmath397 there is a @xmath195 such that @xmath486 it follows that for each clause @xmath131 of @xmath73 there is a @xmath195 such that @xmath459 satisfies @xmath131 under @xmath107 .",
    "now we show that [ no - wedge - no - vee ] still holds if we additionally allow classical disjunction .",
    "[ nor and unary ] let @xmath487 .",
    "then @xmath84 is in @xmath8for every @xmath30 .",
    "let @xmath72 .",
    "because of the distributivity of @xmath22 with all other @xmath0operators there is a formula @xmath99 equivalent to @xmath73 which is of the form @xmath488 with @xmath489 for all @xmath490 .",
    "note that there are only linearly many formulas @xmath491 because @xmath73 does not contain any binary operators aside from @xmath22 .",
    "further note that @xmath99 can be easily computed from @xmath73 in polynomial time .",
    "now it is easy to check for a given structure @xmath87 and team @xmath88 whether @xmath166 by simply checking whether @xmath492 ( which can be done in polynomial time by [ no - wedge - no - vee ] ) consecutively for all @xmath490 .",
    "in this paper we showed that @xmath61@xmath62is @xmath6-complete ( theorem  [ wedge - vee - np - complete ] ) .",
    "furthermore we have systematically analyzed the complexity of model checking for fragments of @xmath0defined by restricting the set of modal and propositional operators .",
    "it turned out that there are several fragments which stay @xmath6-complete , e.g. , the fragment obtained by restricting the set of operators to only @xmath493 and @xmath327 ( theorem  [ box - vee - np - complete ] ) or only @xmath7 and @xmath327 ( theorem  [ diamond - np - complete ] ) .",
    "intuitively , in the former case the @xmath6-hardness arises from existentially guessing partitions of teams while evaluating disjunctions and in the latter from existentially guessing successor teams while evaluating @xmath7 operators .",
    "consequently , if we allow all operators except @xmath7 and @xmath25 the complexity drops to @xmath8(theorem  [ box - wedge - in - p ] ) .    for the fragment only containing @xmath25 and @xmath327 on the other hand",
    "we were not able to determine whether its model checking problem is tractable .",
    "our inability to prove either @xmath6-hardness or containment in @xmath8led us to restrict the arity of the dependence atoms . for the aforementioned fragment",
    "the complexity drops to @xmath352 in the case of bounded arity ( theorem  [ diamond - vee - bounded ] ) .",
    "furthermore , some of the cases which are known to be @xmath6-complete for the unbounded case drop to @xmath8 in the bounded arity case as well ( theorem  [ no - wedge - no - vee ] ) while others remain @xmath6-complete but require a new proof technique ( theorems  [ diamond - wedge - bounded ] and  [ diamond - vee - bounded ] ) .",
    "most noteworthy in this context are probably the results concerning the @xmath7 operator . with unbounded dependence atoms",
    "this operator alone suffices to get @xmath6-completeness whereas with bounded dependence atoms it needs the additional expressiveness of either @xmath24 or @xmath25 to get @xmath6-hardness .",
    "considering the classical disjunction operator @xmath22 , we showed that the complexity of @xmath494 is never higher than the complexity of @xmath495 , i.e. , @xmath22 is at least as bad as @xmath1 with respect to the complexity of model - checking ( in contrast to the complexity of satisfiability ; cf .",
    "@xcite ) . and in the case where only @xmath25 is allowed we even have a higher complexity with @xmath22 ( ) than with @xmath327 ( ) . the case of @xmath496 is also our probably most surprising result since the non - determinism of the @xmath25 operator turned out to be powerful enough to lead to @xmath6-completeness although neither conjunction nor dependence atoms ( which also , in a sense , contain some special kind of conjunction ) are allowed .",
    "interestingly , in none of our reductions to show @xmath6-hardness the @xmath0formula depends on anything else but the number of propositional variables of the input @xmath139formula .",
    "the structure of the input formula is always encoded by the kripke structure alone .",
    "so it seems that even for a fixed formula the model checking problem could still be hard .",
    "this , however , can not be the case since , by theorem  [ few - dep - atoms - in - p ] , model checking for a fixed formula is always in @xmath8 .",
    "another open question , apart from the unclassified unbounded arity case , is related to a case with bounded arity dependence atoms . in",
    "[ diamond - vee - bounded ] it was only possible to prove @xmath6-hardness for arity at least one and it is not known what happens in the case where the arity is zero .",
    "additionally , it might be interesting to determine the exact complexity for the cases which are in @xmath8since we have not shown any lower bounds in these cases so far .",
    "johannes ebbing and",
    "peter lohmann . complexity of model checking for modal dependence logic . in _",
    "proceedings sofsem 2012 : theory and practice of computer science _ , volume 7147 of _ lecture notes in computer science _ , pages 226237 .",
    "springer berlin / heidelberg , 2012 .",
    "peter lohmann and heribert vollmer .",
    "complexity results for modal dependence logic . in _",
    "proceedings 19th conference on computer science logic _",
    ", volume 6247 of _ lecture notes in computer science _ , pages 411425 . springer berlin / heidelberg , 2010 .        jouko vnnen .",
    "modal dependence logic . in krzysztof",
    "r. apt and robert van rooij , editors , _ new perspectives on games and interaction _ , volume  4 of _ texts in logic and games _ , pages 237254 .",
    "amsterdam university press , 2008 ."
  ],
  "abstract_text": [
    "<S> modal dependence logic ( @xmath0 ) was introduced recently by vnnen . </S>",
    "<S> it enhances the basic modal language by an operator @xmath1 . for propositional variables @xmath2 the atomic formula </S>",
    "<S> @xmath3 intuitively states that the value of @xmath4 is determined solely by those of @xmath5 . </S>",
    "<S> we show that model checking for @xmath0formulae over kripke structures is @xmath6-complete and further consider fragments of @xmath0obtained by restricting the set of allowed propositional and modal connectives . </S>",
    "<S> it turns out that several fragments , e.g. , the one without modalities or the one without propositional connectives , remain @xmath6-complete . </S>",
    "<S> we also consider the restriction of @xmath0where the length of each single dependence atom is bounded by a number that is fixed for the whole logic . </S>",
    "<S> we show that the model checking problem for this bounded @xmath0is still @xmath6-complete while for some fragments , e.g. , the fragment with only @xmath7 , the complexity drops to @xmath8 .    </S>",
    "<S> we additionally extend @xmath0by allowing classical disjunction </S>",
    "<S>  introduced by sevenster  besides dependence disjunction and show that classical disjunction is always at least as computationally bad as bounded arity dependence atoms and in some cases even worse , e.g. , the fragment with nothing but the two disjunctions is @xmath6-complete .    </S>",
    "<S> furthermore we almost completely classifiy the computational complexity of the model checking problem for all restrictions of propositional and modal operators for both unbounded as well as bounded @xmath0with both classical as well as dependence disjunction .    </S>",
    "<S> this is the second arxiv version of this paper . </S>",
    "<S> it extends the first version by the investigation of the classical disjunction . </S>",
    "<S> a shortened variant of the first arxiv version was presented at sofsem 2012 @xcite .    </S>",
    "<S> * acm subject classifiers : * f.2.2 complexity of proof procedures ; f.4.1 modal logic ; d.2.4 model checking    * keywords : * dependence logic , modal logic , model checking , computational complexity </S>"
  ]
}