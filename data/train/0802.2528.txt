{
  "article_text": [
    "connectivity and network design problems play an important role in combinatorial optimization and algorithms both for their theoretical appeal and their many real - world applications . an interesting and large class of problems are of the following type : given a graph @xmath5 with edge or node costs , find a minimum - cost subgraph @xmath6 of @xmath2 that satisfies certain connectivity properties .",
    "for example , given an integer @xmath7 , one can ask for the minimum - cost spanning subgraph that is @xmath8-edge or @xmath8-vertex connected . if @xmath9 then this is the classical minimum spanning tree ( mst ) problem .",
    "for @xmath10 the problem is np - hard and also apx - hard to approximate .",
    "more general versions of connectivity problems are obtained if one seeks a subgraph in which a subset of the nodes @xmath11 referred to as _ terminals _ are @xmath8-connected .",
    "the well - known steiner tree problem is to find a minimum - cost subgraph that ( @xmath12-)connects a given set @xmath13 .",
    "many of these problems are special cases of the survivable network design problem ( sndp ) . in sndp",
    ", each pair of nodes @xmath14 specifies a connectivity requirement @xmath15 and the goal is to find a minimum - cost subgraph that has @xmath15 disjoint paths for each pair @xmath16 .",
    "given the intractability of these connectivity problems , there has been a large amount of work on approximation algorithms .",
    "a number of elegant and powerful techniques and results have been developed over the years ( see @xcite ) .",
    "in particular , the primal - dual method @xcite and iterated rounding @xcite have led to some remarkable results including a @xmath1-approximation for edge - connectivity sndp @xcite .",
    "an interesting class of problems , related to some of the connectivity problems described above , is obtained by requiring that only @xmath0 of the given terminals be connected .",
    "these problems are partly motivated by applications in which one seeks to maximize profit given a upper bound ( budget ) on the cost .",
    "for example , a useful problem in vehicle routing applications is to find a path that maximizes the number of vertices in it subject to a budget @xmath17 on the length of the path . in the exact optimization setting ,",
    "the profit maximization problem is equivalent to the problem of minimizing the cost / length of a path subject to the constraint that at least @xmath0 vertices are included . of course the two versions need not be approximation equivalent , nevertheless , understanding one is often fruitful or necessary to understand the other .",
    "the most well - studied of these problems is the @xmath0-mst problem ; the goal here is to find a minimum - cost subgraph of the given graph @xmath2 that contains at least @xmath0 vertices ( or terminals ) .",
    "this problem has attracted considerable attention in the approximation algorithms literature and its study has led to several new algorithmic ideas and applications @xcite .",
    "we note that the steiner tree problem can be relatively easily reduced in an approximation preserving fashion to the @xmath0-mst problem .",
    "more recently , lau _ et al . _",
    "@xcite considered the natural generalization of @xmath0-mst to higher connectivity .",
    "in particular they defined the @xmath18-subgraph problem to be the following : find a minimum - cost subgraph of the given graph @xmath2 that contains at least @xmath0 vertices and is @xmath8-edge connected .",
    "we use the notation @xmath0-@xmath8ec to refer to this problem . in @xcite",
    "an @xmath19 approximation was claimed for the @xmath0-@xmath1ec problem .",
    "however , the algorithm and proof in @xcite are incorrect .",
    "more recently , and in independent work from ours , the authors of @xcite obtained a different algorithm for @xmath0-@xmath1ec that yields an @xmath20 approximation .",
    "we give later a more detailed comparison between their approach and ours .",
    "it is also shown in @xcite that a good approximation for @xmath0-@xmath8ec when @xmath8 is large would yield an improved algorithm for the @xmath0-densest subgraph problem @xcite ; in this problem one seeks a @xmath0-vertex subgraph of a given graph @xmath2 that has the maximum number of edges .",
    "the @xmath0-densest subgraph problem admits an @xmath21 approximation for some fixed constant @xmath22 @xcite , but has resisted attempts at an improved approximation for a number of years now .",
    "in this paper we consider the vertex - connectivity generalization of the @xmath0-mst problem .",
    "we define the @xmath0-@xmath8vc problem as follows : given an integer @xmath0 and a graph @xmath2 with edge costs , find the minimum - cost @xmath8-vertex - connected subgraph of @xmath2 that contains at least @xmath0 vertices .",
    "we also consider the _ terminal _ version of the problem where the subgraph has to contain @xmath0 terminals from a given terminal set @xmath3 .",
    "it can be easily shown that the @xmath0-@xmath8ec problem reduces to the @xmath0-@xmath8vc problem for any @xmath23 .",
    "we also observe that the @xmath0-@xmath8ec problem with terminals can be easily reduced , as follows , to the uniform problem where every vertex is a terminal : for each terminal @xmath24 , create @xmath25 dummy vertices @xmath26 and attach @xmath27 to @xmath28 with @xmath8 parallel edges of zero cost . now set @xmath29 in the new graph .",
    "one can avoid using parallel edges by creating a clique on @xmath26 using zero - cost edges and connecting @xmath8 of these vertices to @xmath28 .",
    "note , however , that this reduction only works for edge - connectivity .",
    "we are not aware of a reduction that reduces the @xmath0-@xmath8vc problem with a given set of terminals to the @xmath0-@xmath8vc problem , even when @xmath30 . in this paper",
    "we consider the @xmath0-@xmath1vc problem ; our main result is the following .",
    "[ thm : kv ] there is an @xmath31 approximation for the @xmath0-@xmath1vc problem where @xmath32 is the number of terminals .",
    "[ cor : ke ] there is an @xmath31 approximation for the @xmath0-@xmath1ec problem where @xmath32 is the number of terminals .",
    "one of the technical ingredients that we develop is the theorem below which may be of independent interest . given a graph @xmath2 with edge costs and weights on terminals @xmath3 , we define @xmath33 for a subgraph @xmath6 to be the ratio of the cost of edges in @xmath6 to the total weight of terminals in @xmath6 .",
    "[ thm : cycle ]",
    "let @xmath2 be an @xmath1-vertex - connected graph with edge costs and let @xmath34 be a set of terminals .",
    "then , there is a simple cycle @xmath35 containing at least @xmath1 terminals ( a non - trivial cycle ) such that the density of @xmath35 is at most the density of @xmath2 .",
    "moreover , such a cycle can be found in polynomial time .    using the above theorem and an lp approach",
    "we obtain the following .",
    "[ cor : cycle ] given a graph @xmath5 with edge costs and @xmath32 terminals @xmath36 , there is an @xmath37 approximation for the problem of finding a minimum - density non - trivial cycle .",
    "note that theorem  [ thm : cycle ] and corollary  [ cor : cycle ] are of interest because we seek a cycle with at least _ two _ terminals .",
    "a minimum - density cycle containing only one terminal can be found by using the well - known min - mean cycle algorithm in directed graphs @xcite .",
    "we remark , however , that although we suspect that the problem of finding a minimum - density non - trivial cycle is np - hard , we currently do not have a proof .",
    "theorem  [ thm : cycle ] shows that the problem is equivalent to the dens-@xmath1vc problem , defined in the next section .",
    "* remark : * the reader may wonder whether @xmath0-@xmath1ec or @xmath0-@xmath1vc admit a constant factor approximation , since the @xmath0-mst problem admits one .",
    "we note that the main technical tool which underlies @xmath38 approximations for @xmath0-mst problem @xcite is a special property that holds for a lp relaxation of the prize - collection steiner tree problem @xcite which is a lagrangian relaxation of the steiner tree problem .",
    "such a property is not known to hold for generalizations of @xmath0-mst including @xmath0-@xmath1ec and @xmath0-@xmath1vc and the @xmath0-steiner forest problem @xcite .",
    "thus , one is forced to rely on alternative and problem - specific techniques .",
    "we consider the rooted version of @xmath0-@xmath1vc : the goal is to find a min - cost subgraph that @xmath1-connects at least @xmath0 terminals to a specified root vertex @xmath39 .",
    "it is relatively straightforward to reduce @xmath0-@xmath1vc to its rooted version ( see section  [ sec : k2vc ] for details . )",
    "we draw inspiration from algorithmic ideas that led to poly - logarithmic approximations for the @xmath0-mst problem .",
    "to describe our approach to the rooted @xmath0-@xmath1vc problem , we define a closely related problem . for a subgraph @xmath6 that contains @xmath39 ,",
    "let @xmath40 be the number of terminals that are @xmath1-connected to @xmath39 in @xmath6 .",
    "then the _ density _ of @xmath6 is simply the ratio of the cost of @xmath6 to @xmath40 .",
    "the dens-@xmath1vc problem is to find a 2-connected subgraph of minimum density .",
    "an @xmath37 approximation for the dens-@xmath1vc problem ( where @xmath32 is the number of terminals ) can be derived in a some what standard way by using a bucketing and scaling trick on a linear programming relaxation for the problem .",
    "we exploit the known bound of @xmath1 on the integrality gap of a natural lp for the sndp problem with vertex connectivity requirements in @xmath41 @xcite .",
    "the bucketing and scaling trick has seen several uses in the past and has recently been highlighted in several applications @xcite .",
    "our algorithm for @xmath0-@xmath1vc uses a greedy approach at the high level .",
    "we start with an empty subgraph @xmath42 and use the approximation algorithm for dens-@xmath1vc in an iterative fashion to greedily add terminals to @xmath42 until at least @xmath43 terminals are in @xmath42 .",
    "this approach would yield an @xmath44 approximation if @xmath45 .",
    "however , the last iteration of the dens-@xmath1vc algorithm may add many more terminals than desired with the result that @xmath46 . in this case",
    "we can not bound the quality of the solution obtained by the algorithm . to overcome this problem",
    ", one can try to _ prune _ the subgraph @xmath6 added in the last iteration to only have the desired number of terminals . for the @xmath0-mst problem , @xmath6 is a tree and pruning is quite easy .",
    "we remark that this yields a rather straightforward @xmath20 approximation for @xmath0-mst and could have been discovered much before a more clever analysis given in @xcite .",
    "one of our technical contributions is to give a pruning step for the @xmath0-@xmath1vc problem . to accomplish this , we use two algorithmic ideas .",
    "the first is encapsulated in the cycle finding algorithm of theorem  [ thm : cycle ] .",
    "second , we use this cycle finding algorithm to repeatedly merge subgraphs until we get the desired number of terminals in one subgraph .",
    "this latter step requires care .",
    "the cycle merging scheme is inspired by a similar approach from the work of lau _ et al . _",
    "@xcite on the @xmath0-@xmath1ec problem and in @xcite on the directed orienteering problem .",
    "these ideas yield an @xmath47 approximation .",
    "we give a slightly modified cycle - merging algorithm with a more sophisticated and non - trivial analysis to obtain an improved @xmath31 approximation .",
    "some remarks are in order to compare our work to that of @xcite on the @xmath0-@xmath1ec problem . the combinatorial algorithm in @xcite",
    "is based on finding a low - density cycle or a related structure called a bi - cycle .",
    "the algorithm in @xcite to find such a structure is incorrect .",
    "further , the cycles are contracted along the way which limits the approach to the @xmath0-@xmath1ec problem ( contracting a cycle in @xmath1-node - connected graph may make the resulting graph not @xmath1-node - connected ) . in our algorithm",
    "we do not contract cycles and instead introduce dummy terminals with weights to capture the number of terminals in an already formed component .",
    "this requires us to now address the minimum - density non - trivial simple cycle problem which we do via theorem  [ thm : cycle ] and corollary  [ cor : cycle ] . in independent work ,",
    "lau _ et al . _",
    "@xcite obtain a new and correct @xmath48-approximation for @xmath0-@xmath1ec .",
    "they also follow the same approach that we do in using the lp for finding dense subgraphs followed by the pruning step .",
    "however , in the pruning step they use a completely different approach ; they use the sophisticated idea of no - where zero @xmath49-flows @xcite .",
    "although the use of this idea is elegant , the approach works only for the @xmath0-@xmath1ec problem , while our approach is less complex and leads to an algorithm for the more general @xmath0-@xmath1vc problem .",
    "we work with graphs in which some vertices are designated as _",
    "terminals_. given a graph @xmath2 with edge costs and terminal weights , we define the _ density _ of a subgraph @xmath6 to be sum of the costs of edges in @xmath6 divided by the sum of the weights of terminals in @xmath6 .",
    "henceforth , we use @xmath1-connected graph to mean a @xmath1-vertex - connected graph .",
    "the goal of the @xmath0-@xmath1vc problem is to find a minimum - cost 2-connected subgraph on at least @xmath0 terminals .. for simplicity of exposition , however , we stick to the more restricted version . ] recall that in the rooted @xmath0-@xmath1vc problem , the goal is to find a min - cost subgraph on at least @xmath0 terminals in which every terminal is 2-connected to the specified root @xmath39 .",
    "the ( unrooted ) @xmath0-@xmath1vc problem can be reduced to the rooted version by _ guessing _ 2 vertices @xmath16 that are in an optimal solution , creating a new root vertex @xmath39 , and connecting it with 0-cost edges to @xmath50 and @xmath28 .",
    "it is not hard to show that any solution to the rooted problem in the modified graph can be converted to a solution to the unrooted problem by adding 2 minimum - cost vertex - disjoint paths between @xmath50 and @xmath28 .",
    "( since @xmath50 and @xmath28 are in the optimal solution , the cost of these added paths can not be more than @xmath51 . )",
    "we omit further details from this extended abstract .    in the dens-@xmath1vc problem ,",
    "the goal is to find a subgraph @xmath6 of minimum density in which all terminals of @xmath6 are 2-connected to the root .",
    "the following lemma is proved in section  [ subsec : lp ] below .",
    "it relies on a @xmath1-approximation , via a natural lp , for the min - cost @xmath1-connectivity problem due to fleischer , jain and williamson @xcite , and some standard techniques .",
    "[ lem : densv ] there is an @xmath37-approximation algorithm for the dens-@xmath1vc problem , where @xmath32 is the number of terminals in the given instance .",
    "let @xmath51 be the cost of an optimal solution to the @xmath0-@xmath1vc problem .",
    "we assume knowledge of @xmath51 ; this can be dispensed with using standard methods .",
    "we pre - process the graph by deleting any terminal that does not have 2 vertex - disjoint paths to the root @xmath39 of total cost at most @xmath51 . the high - level description of the algorithm for the rooted @xmath0-@xmath1vc problem is given below .",
    "@xmath52 , @xmath53 is the empty graph .",
    "+ while ( @xmath54 ) : + use the approximation algorithm for dens-@xmath1vc to find a subgraph @xmath6 in @xmath2 .",
    "+ if ( @xmath55 ) : + @xmath56 , @xmath57 + mark all terminals in @xmath6 as non - terminals .",
    "+ else : + _ prune _ @xmath6 to obtain @xmath58 that contains @xmath59 terminals .",
    "+ @xmath60 , @xmath61 + output @xmath42    at the beginning of any iteration of the while loop , the graph contains a solution to the dens-@xmath1vc problem of density at most @xmath62 .",
    "therefore , the graph @xmath6 returned always has density at most @xmath63 . if @xmath55 , we add @xmath6 to @xmath42 and decrement @xmath59",
    "; we refer to this as the _ augmentation _ step .",
    "otherwise , we have a graph @xmath6 of good density , but with too many terminals . in this case , we prune @xmath6 to find a graph with the required number of terminals ; this is the _",
    "pruning step_. a simple set - cover type argument shows the following lemma :    [ lem : greedy ] if , at every augmentation step , we add a graph of density at most @xmath64 ( where @xmath59 is the number of additional terminals that must be selected ) , the total cost of all the augmentation steps is at most @xmath65 .",
    "therefore , we now only have to bound the cost of the graph @xmath58 added in the pruning step ; we prove the following theorem in section  [ sec : pruning ] .",
    "[ thm : avekv ] let @xmath66 be an instance of the rooted @xmath0-@xmath1vc problem with root @xmath39 , such that every vertex of @xmath2 has @xmath1 vertex - disjoint paths to @xmath39 of total cost at most @xmath67 , and such that @xmath68 .",
    "there is a polynomial - time algorithm to find a solution to this instance of cost at most @xmath69 .",
    "we can now prove our main result for the @xmath0-@xmath1vc problem , theorem  [ thm : kv ] .",
    "theorem  [ thm : kv ] let @xmath51 be the cost of an optimal solution to the ( rooted ) @xmath0-@xmath1vc problem . by lemma  [ lem : greedy ] , the total cost of the augmentation steps of our greedy algorithm is @xmath70 .",
    "to bound the cost of the pruning step , let @xmath59 be the number of additional terminals that must be covered just prior to this step .",
    "the algorithm for the dens-@xmath1vc problem returns a graph @xmath6 with @xmath71 terminals , and density at most @xmath72 . as a result of our pre - processing step ,",
    "every vertex has 2 vertex - disjoint paths to @xmath39 of total cost at most @xmath51 .",
    "now , we use theorem  [ thm : avekv ] to prune @xmath6 and find a graph @xmath58 with @xmath59 terminals and cost at most @xmath73 . therefore , the total cost of our solution is @xmath74 .",
    "it remains only to prove lemma  [ lem : densv ] , that there is an @xmath75-approximation for the dens-@xmath1vc problem , and theorem  [ thm : avekv ] , bounding the cost of the pruning step .",
    "we prove the former in section  [ subsec : lp ] below .",
    "before the latter is proved in section  [ sec : pruning ] , we develop some tools in section  [ sec : cycles ] ; chief among these tools is theorem  [ thm : cycle ] .      recall that the dens-@xmath1vc  problem was defined as follows : given a graph @xmath5 with edge - costs , a set @xmath76 of terminals , and a root @xmath77 , find a subgraph @xmath6 of minimum density , in which every terminal of @xmath6 is 2-connected to @xmath39 .",
    "( here , the density of @xmath6 is defined as the cost of @xmath6 divided by the number of terminals it contains , not including @xmath39 . )",
    "we describe an algorithm for dens-@xmath1vc that gives an @xmath37-approximation , and sketch its proof .",
    "we use an lp based approach and a bucketing and scaling trick ( see @xcite for applications of this idea ) , and a constant - factor bound on the integrality gap of an lp for sndp with vertex - connectivity requirements in @xmath41 @xcite .",
    "we define * lp - dens * as the following lp relaxation of dens-@xmath1vc . for each terminal @xmath78",
    ", the variable @xmath79 indicates whether or not @xmath28 is chosen in the solution .",
    "( by normalizing @xmath80 to 1 , and minimizing the sum of edge costs , we minimize the density .",
    ") @xmath81 is the set of all simple cycles containing @xmath78 and the root @xmath39 ; for any @xmath82 , @xmath83 indicates how much ` flow ' is sent from @xmath28 to @xmath39 through @xmath35 .",
    "( note that a pair of vertex - disjoint paths is a cycle ; the flow along a cycle is 1 if we can 2-connect @xmath78 to @xmath39 using the edges of the cycle . )",
    "the variable @xmath84 indicates whether the edge @xmath85 is used by the solution .",
    "@xmath86 @xmath87    it is not hard to see that an optimal solution to * lp - dens * has cost at most the density of an optimal solution to dens-@xmath1vc . we now show how to obtain an integral solution of density at most @xmath88 , where @xmath89 is the cost of an optimal solution to * lp - dens * .",
    "the linear program * lp - dens * has an exponential number of variables but a polynomial number of non - trivial constraints ; it can , however , be solved in polynomial time .",
    "fix an optimal solution to * lp - dens * of cost @xmath89 , and for each @xmath90 ( for ease of notation , assume @xmath91 is an integer ) , let @xmath92 be the set of terminals @xmath78 such that @xmath93 . since @xmath94 , there is some index @xmath95 such that @xmath96 .",
    "since every terminal @xmath97 has @xmath98 , the number of terminals in @xmath92 is at least @xmath99 .",
    "we claim that there is a subgraph @xmath6 of @xmath2 with cost at most @xmath100 , in which every terminal of @xmath92 is 2-connected to the root .",
    "if this is true , the density of @xmath6 is at most @xmath101 , and hence we have an @xmath37-approximation for the dens-@xmath1vc problem .    to prove our claim about the cost of the subgraph @xmath6 in which every terminal of @xmath92 is 2-connected to @xmath39 , consider scaling up the given optimum solution of * lp - dens * by a factor of @xmath102 . for each terminal @xmath103 ,",
    "the flow from @xmath78 to @xmath39 in this scaled solution ] is at least 1 , and the cost of the scaled solution is @xmath104 .    in @xcite , the authors describe a linear program @xmath105 to find a minimum - cost subgraph in which a given set of terminals is 2-connected to the root , and show that this linear program has an integrality gap of 2 .",
    "the variables @xmath84 in the ` scaled solution ' to * lp - dens * correspond to a feasible solution of @xmath105 with @xmath92 as the set of terminals ; the integrality gap of 2 implies that there is a subgraph @xmath6 in which every terminal of @xmath92 is 2-connected to the root , with cost at most @xmath106 .    therefore , the algorithm for dens-@xmath1vc is :    1 .",
    "find an optimal fractional solution to * lp - dens * .",
    "2 .   find a set of terminals @xmath92 such that @xmath107 .",
    "3 .   find a min - cost subgraph @xmath6 in which every terminal in @xmath92 is 2-connected to @xmath39 using the algorithm of @xcite .",
    "@xmath6 has density at most @xmath37 times the optimal solution to dens-@xmath1vc .",
    "a cycle @xmath108 is _ non - trivial _ if it contains at least 2 terminals .",
    "we define the min - density non - trivial cycle problem : given a graph @xmath5 , with @xmath3 marked as terminals , edge costs and terminal weights , find a minimum - density cycle that contains at least 2 terminals .",
    "note that if we remove the requirement that the cycle be non - trivial ( that is , it contains at least 2 terminals ) , the problem reduces to the min - mean cycle problem in directed graphs , and can be solved exactly in polynomial time ( see @xcite ) .",
    "algorithms for the min - density non - trivial cycle problem are a useful tool for solving the @xmath0-@xmath1vc and @xmath0-@xmath1ec problems . in this section ,",
    "we give an @xmath75-approximation algorithm for the minimum - density non - trivial cycle problem .",
    "first , we prove theorem  [ thm : cycle ] , that a 2-connected graph with edge costs and terminal weights contains a simple non - trivial cycle , with density no more than the average density of the graph .",
    "we give two algorithms to find such a cycle ; the first , described in section  [ subsec : nonpoly ] , is simpler , but the running time is not polynomial . a more technical proof that leads to a strongly polynomial - time algorithm is described in section  [ subsec : strong ] ; we recommend this proof be skipped on a first reading .      to find a non - trivial cycle of density at most that of the 2-connected input graph @xmath2 , we will start with an arbitrary non - trivial cycle , and successively find cycles of better density until we obtain a cycle with density at most @xmath109 .",
    "the following lemma shows that if a cycle @xmath35 has an ear with density less than @xmath110 , we can use this ear to find a cycle of lower density .",
    "[ lem : goodear ] let @xmath35 be a non - trivial cycle , and @xmath6 an ear incident to @xmath35 at @xmath50 and @xmath28 , such that @xmath111 .",
    "let @xmath112 and @xmath113 be the two internally disjoint paths between @xmath50 and @xmath28 in @xmath35",
    ". then @xmath114 and @xmath115 are both simple cycles and one of these is non - trivial and has density less than @xmath110 .",
    "@xmath35 has at least 2 terminals , so it has finite density ; @xmath6 must then have at least 1 terminal .",
    "let @xmath116 , @xmath117 and @xmath118 be , respectively , the sum of the costs of the edges in @xmath112 , @xmath113 and @xmath6 , and let @xmath119 , @xmath120 and @xmath121 be the sum of the weights of the terminals in @xmath112 , @xmath113 and @xmath122 .",
    "assume w.l.o.g .",
    "that @xmath112 has density at most that of @xmath113 .",
    "( that is , @xmath123 . ) and @xmath113 has cost 0 and weight 0 . in this case , let @xmath112 be the component with non - zero weight . ]",
    "@xmath112 must contain at least one terminal , and so @xmath114 is a simple non - trivial cycle .",
    "the statement @xmath124 is equivalent to @xmath125 .    @xmath126    therefore , @xmath114 is a simple cycle containing at least 2 terminals of density less than @xmath110 .",
    "[ lem:2conncomp ] given a cycle @xmath35 in a @xmath1-connected graph @xmath2 , let @xmath42 be the graph formed from @xmath2 by contracting @xmath35 to a single vertex @xmath28 .",
    "if @xmath6 is a connected component of @xmath127 , @xmath128 is @xmath1-connected in @xmath42 .",
    "let @xmath6 be an arbitrary connected component of @xmath127 , and let @xmath129 . to prove that @xmath58 is 2-connected",
    ", we first observe that @xmath28 is 2-connected to any vertex @xmath130 .",
    "( any set that separates @xmath131 from @xmath28 in @xmath58 separates @xmath131 from the cycle @xmath35 in @xmath2 . )",
    "it now follows that for all vertices @xmath132 , @xmath131 and @xmath133 are 2-connected in @xmath58 .",
    "suppose deleting some vertex @xmath50 separates @xmath131 from @xmath133 .",
    "the vertex @xmath50 can not be @xmath28 , since @xmath6 is a connected component of @xmath127 .",
    "but if @xmath134 , @xmath28 and @xmath131 are in the same component of @xmath135 , since @xmath28 is 2-connected to @xmath131 in @xmath58 .",
    "similarly , @xmath28 and @xmath133 are in the same component of @xmath135 , and so deleting @xmath50 does not separate @xmath131 from @xmath133 .    we now show that given any 2-connected graph @xmath2 , we can find a non - trivial cycle of density no more than that of @xmath2 .",
    "[ thm : cycleexists ] let @xmath2 be a @xmath1-connected graph with at least @xmath1 terminals .",
    "@xmath2 contains a simple non - trivial cycle @xmath136 such that @xmath137 .",
    "let @xmath35 be an arbitrary non - trivial simple cycle ; such a cycle always exists since @xmath2 is @xmath1-connected and has at least 2 terminals .",
    "if @xmath138 , we give an algorithm that finds a new non - trivial cycle @xmath139 such that @xmath140 . repeating this process , we obtain cycles of successively better densities until eventually finding a non - trivial cycle @xmath136 of density at most @xmath109 .",
    "let @xmath42 be the graph formed by contracting the given cycle @xmath35 to a single vertex @xmath28 . in @xmath42",
    ", @xmath28 is not a terminal , and so has weight 0 .",
    "consider the 2-connected components of @xmath42 ( from lemma  [ lem:2conncomp ] , each such component is formed by adding @xmath28 to a connected component of @xmath127 ) , and pick the one of minimum density . if @xmath6 is this component , @xmath141 by an averaging argument .",
    "@xmath6 contains at least 1 terminal .",
    "if it contains 2 or more terminals , recursively find a non - trivial cycle @xmath139 in @xmath6 such that @xmath142 .",
    "if @xmath139 exists in the given graph @xmath2 , it has the desired properties , and we are done .",
    "otherwise , @xmath139 contains @xmath28 , and the edges of @xmath139 form a ear of @xmath35 in the original graph @xmath2 .",
    "the density of this ear is less than the density of @xmath35 , so we can apply lemma  [ lem : goodear ] to obtain a non - trivial cycle in @xmath2 that has density less than @xmath110 .",
    "finally , if @xmath6 has exactly 1 terminal @xmath50 , find any 2 vertex - disjoint paths using edges of @xmath6 from @xmath50 to distinct vertices in the cycle @xmath35 .",
    "( since @xmath2 is 2-connected , there always exist such paths . )",
    "the cost of these paths is at most @xmath143 , and concatenating these 2 paths corresponds to a ear of @xmath35 in @xmath2 .",
    "the density of this ear is less than @xmath110 ; again , we use lemma  [ lem : goodear ] to obtain a cycle in @xmath2 with the desired properties .",
    "we remark again that the algorithm of theorem  [ thm : cycleexists ] does not lead to a polynomial - time algorithm , even if all edge costs and terminal weights are polynomially bounded . in section  [ subsec : strong ] , we describe a strongly polynomial - time algorithm that , given a graph @xmath2 , finds a non - trivial cycle of density at most that of @xmath2 . note that neither of these algorithms may directly give a good approximation to the min - density non - trivial cycle problem , because the optimal non - trivial cycle may have density much less than that of @xmath2 .",
    "however , we can use theorem  [ thm : cycleexists ] to prove the following theorem :    [ thm : equivalence ] there is an @xmath144-approximation to the ( unrooted ) dens-@xmath1vc problem if and only if there is an @xmath144-approximation to the problem of finding a minimum - density non - trivial cycle .",
    "assume we have a @xmath145-approximation for the dens-@xmath1vc problem ; we use it to find a low - density non - trivial cycle .",
    "solve the dens-@xmath1vc problem on the given graph ; since the optimal cycle is a 2-connected graph , our solution @xmath6 to the dens-@xmath1vc problem has density at most @xmath145 times the density of this cycle .",
    "find a non - trivial cycle in @xmath6 of density at most that of @xmath6 ; it has density at most @xmath145 times that of an optimal non - trivial cycle .",
    "note that any instance of the ( unrooted ) dens-@xmath1vc problem has an optimal solution that is a non - trivial cycle .",
    "( consider any optimal solution @xmath6 of density @xmath146 ; by theorem  [ thm : cycle ] , @xmath6 contains a non - trivial cycle of density at most @xmath146 .",
    "this cycle is a valid solution to the dens-@xmath1vc problem . )",
    "therefore , a @xmath147-approximation for the min - density non - trivial cycle problem gives a @xmath147-approximation for the dens-@xmath1vc problem .",
    "theorem  [ thm : equivalence ] and lemma  [ lem : densv ] imply an @xmath37-approximation for the minimum - density non - trivial cycle problem ; this proves corollary  [ cor : cycle ] .",
    "we say that a graph @xmath5 is minimally 2-connected on its terminals if for every edge @xmath148 , some pair of terminals is not 2-connected in the graph @xmath149 .",
    "section  [ subsec : strong ] shows that in any graph which is minimally 2-connected on its terminals , every cycle is non - trivial .",
    "therefore , the problem of finding a minimum - density non - trivial cycle in such graphs is just that of finding a minimum - density cycle , which can be solved exactly in polynomial time .",
    "however , as we explain at the end of the section , this does not directly lead to an efficient algorithm for arbitrary graphs .      in this section",
    ", we describe a strongly polynomial - time algorithm which , given a 2-connected graph @xmath5 with edge costs and terminal weights , finds a non - trivial cycle of density at most that of @xmath2 .",
    "we begin with several definitions : let @xmath35 be a cycle in a graph @xmath2 , and @xmath42 be the graph formed by deleting @xmath35 from @xmath2 .",
    "let @xmath150 be the connected components of @xmath42 ; we refer to these as _ earrings _ of @xmath35 .",
    "were simply a path , it would be an ear of @xmath35 , but @xmath151 may be more complex . ] for each @xmath151 , let the vertices of @xmath35 incident to it be called its _",
    "clasps_. from the definition of an earring , for any pair of clasps of @xmath151 , there is a path between them whose internal vertices are all in @xmath151 .",
    "we say that a vertex of @xmath35 is an _ anchor _ if it is the clasp of some earring .",
    "( an anchor may be a clasp of multiple earrings . ) a _ segment _",
    "@xmath13 of @xmath35 is a path contained in @xmath35 , such that the endpoints of @xmath13 are both anchors , and no internal vertex of @xmath13 is an anchor .",
    "( note that the endpoints of @xmath13 might be clasps of the same earring , or of distinct earrings . )",
    "it is easy to see that the segments partition the edge set of @xmath35 . by deleting a segment",
    ", we refer to deleting its edges and internal vertices .",
    "observe that if @xmath13 is deleted from @xmath2 , the only vertices of @xmath152 that lose an edge are the endpoints of @xmath13 .",
    "a segment is _ safe _ if the graph @xmath153 is 2-connected .",
    "arbitrarily pick a vertex @xmath154 of @xmath35 as the _ origin _ , and consecutively number the vertices of @xmath35 clockwise around the cycle as @xmath155 .",
    "the first clasp of an earring @xmath6 is its lowest numbered clasp , and the last clasp is its highest numbered clasp .",
    "( if the origin is a clasp of @xmath6 , it is considered the first clasp , not the last . )",
    "the _ arc _ of an earring is the subgraph of @xmath35 found by traversing clockwise from its first clasp @xmath156 to its last clasp @xmath157 ; the length of this arc is @xmath158 .",
    "( that is , the length of an arc is the number of edges it contains . )",
    "note that if an arc contains the origin , it must be the first vertex of the arc .",
    "figure  [ fig : earring ] illustrates several of these definitions .",
    "( 0,0 ) circle ( 2 cm ) ; at ( 0,0 ) @xmath35 ; ( 30:2 cm ) ",
    "( 30:3 cm ) ; ( 2,0 )  ( 3,0 ) ; ( -45:2 cm )  ( -45:3 cm ) ; at ( 38:2.35 cm ) @xmath159 ; at ( 2.35,0.25 ) @xmath160 ; at ( -53:2.35 cm ) @xmath161 ; at ( 0,2.35 ) @xmath162 ;    ( 30:2.8 cm ) arc(30:-45:2.8 cm ) ; ( 30:4.2 cm ) arc ( 30:-45:4.2 cm ) ; ( 30:2.8 cm ) arc ( -150:-330:0.7 cm ) ; ( -45:2.8 cm ) arc ( 135:315:0.7 cm ) ; at ( 15:3.5 cm ) @xmath6 ;    ( 30:2 cm ) circle ( 1 mm ) ; ( -45:2 cm ) circle ( 1 mm ) ; ( 2,0 ) circle ( 1 mm ) ; ( 0,2 ) circle ( 1 mm ) ;    ( 30:1.75 cm ) arc ( 30:-45:1.75 cm ) ;    ( 0,0 ) circle ( 2 cm ) ; at ( 0,0 ) @xmath35 ; ( 0,2 )  ( 0,3.6 ) arc(90:-90:3.6 cm )  ( 0,-2 ) ; at ( 0,1.6 ) @xmath163 ; at ( 0,-1.6 ) @xmath164 ; at ( 0,3.9 ) [ font= ] @xmath165 ;    ( 30:2 cm )  ( 30:3 cm ) arc(30:-30:3 cm ) ",
    "( -30:2 cm ) ; at ( 30:1.6 cm ) @xmath156 ; at ( -30:1.6 cm ) @xmath157 ;    ( 30:2.2 cm ) arc(30:330:2.2 cm ) ; ( 25:2.2 cm ) ",
    "( 25:2.8 cm ) arc(25:-25:2.8 cm )  ( -25:2.2 cm ) ;    ( 30:2 cm ) circle ( 1 mm ) ; ( -30:2 cm ) circle ( 1 mm ) ; ( 0,2 ) circle ( 1 mm ) ; ( 0,-2 ) circle ( 1 mm ) ; ( 150:2 cm ) circle ( 1 mm ) ; at ( 150:1.6 cm ) @xmath162 ;    ( 0,0 ) circle ( 2 cm ) ; at ( 0,0 ) @xmath35 ; ( 0,2 )  ( 0,3.6 ) arc(90:-90:3.6 cm )  ( 0,-2 ) ; at ( 0,1.6 ) @xmath163 ; at ( 0,-1.6 ) @xmath164 ; at ( 0,3.9 ) [ font= ] @xmath166 ; at ( 30:1.6 cm ) @xmath156 ; at ( -30:1.6 cm ) @xmath157 ;    ( 30:2 cm )  ( 30:3.6 cm ) ;    ( 88:2 cm )  ( 85:3 cm ) arc(85:-85:3 cm )  ( -88:2 cm ) ; at ( 85:3.3 cm ) [ font= ] @xmath167 ; ( -30:2 cm )  ( -30:3 cm ) ;    ( 25:2.2 cm )  ( 25:3.4 cm ) arc ( 25:-88:3.4 cm )  ( -88:2.2 cm ) arc ( -88:-35:2.2 cm ) ; ( -25:2.2 cm )  ( -25:2.8 cm ) arc ( -25:80:2.8 cm )  ( 80:2.2 cm ) arc ( 80:35:2.2 cm ) ;    ( 30:2 cm ) circle ( 1 mm ) ; ( -30:2 cm ) circle ( 1 mm ) ; ( 0,2 ) circle ( 1 mm ) ; ( 0,-2 ) circle ( 1 mm ) ; ( 150:2 cm ) circle ( 1 mm ) ; at ( 150:1.6 cm ) @xmath162 ;    ( 0,0 ) circle ( 2 cm ) ; at ( 0,0 ) @xmath35 ; ( 0,2 )  ( 0,3.6 ) arc(90:-90:3.6 cm )  ( 0,-2 ) ; at ( 0,1.6 ) @xmath163 ; at ( 0,-1.6 ) @xmath164 ; at ( 0,3.9 ) [ font= ] @xmath165 ; at ( 30:1.6 cm ) @xmath156 ; at ( -30:1.6 cm ) @xmath157 ;    ( 30:2 cm )  ( 30:3.1 cm ) arc ( 30:-105:3.1 cm ) ",
    "( -105:2 cm ) ; at ( 38:2.55 cm ) [ font= ] @xmath166 ; ( -30:2 cm )  ( -30:2.5 cm ) arc(-30:-135:2.5 cm )  ( -135:2 cm ) ; at ( -143:2.5 cm ) [ font= ] @xmath167 ;    ( 35:2.15 cm ) arc ( 35:85:2.15 cm )  ( 85:3.45 cm ) arc ( 85:-85:3.45 cm )  ( -85:2.15 cm ) arc ( -85:-35:2.15 cm ) ; ( 25:2.2 cm )  ( 25:2.95 cm ) arc(25:-100:2.95 cm )  ( -100:2.15 cm ) arc ( -100:-130:2.15 cm )  ( -130:2.65 cm ) arc ( -130:-25:2.65 cm )  ( -25:2.15 cm ) ;    ( 30:2 cm ) circle ( 1 mm ) ; ( -30:2 cm ) circle ( 1 mm ) ; ( 0,2 ) circle ( 1 mm ) ; ( 0,-2 ) circle ( 1 mm ) ; ( 150:2 cm ) circle ( 1 mm ) ; at ( 150:1.6 cm ) @xmath162 ;    ( 0,0 ) circle ( 2 cm ) ; at ( 0,0 ) @xmath35 ; ( 0,2 )  ( 0,3.6 ) arc(90:-90:3.6 cm )  ( 0,-2 ) ; at ( 0,1.6 ) @xmath163 ; at ( 0,-1.6 ) @xmath164 ; at ( 0,4.1 ) [ font= ] @xmath168 ; at ( 30:1.6 cm ) @xmath156 ; at ( -30:1.6 cm ) @xmath157 ; ( 30:2 cm )  ( 30:3.6 cm ) ;    ( -30:2 cm )  ( -30:3 cm ) arc(-30:-120:3 cm )  ( -120:2 cm ) ; at ( -125:3 cm ) [ font= ] @xmath167 ;    ( -35:2.2 cm ) arc ( -35:-85:2.2 cm )  ( -85:3.4 cm ) arc ( -85:25:3.4 cm )  ( 25:2.2 cm ) ; ( -35:2.2 cm )  ( -35:2.8 cm ) arc(-35:-115:2.8 cm )  ( -115:2.2 cm ) arc ( -115:-330:2.2 cm ) ;    ( 30:2 cm ) circle ( 1 mm ) ; ( -30:2 cm ) circle ( 1 mm ) ; ( 0,2 ) circle ( 1 mm ) ; ( 0,-2 ) circle ( 1 mm ) ; ( 150:2 cm ) circle ( 1 mm ) ; at ( 150:1.6 cm ) @xmath162 ;    ( 0,0 ) circle ( 2 cm ) ; at ( 0,0 ) @xmath35 ; ( 0,2 )  ( 0,3.6 ) arc(90:-90:3.6 cm )  ( 0,-2 ) ; at ( 0,1.6 ) @xmath163 ; at ( 0,-1.6 ) @xmath164 ; at ( 0,4.1 ) [ font= ] @xmath168 ; at ( 30:1.6 cm ) @xmath156 ; at ( -30:1.6 cm ) @xmath157 ; ( -30:2 cm )  ( -30:3.6 cm ) ;    ( 30:2 cm )  ( 30:3 cm ) arc(30:-120:3 cm )  ( -120:2 cm ) ; at ( -125:3 cm ) [ font= ] @xmath167 ;    ( -25:2.2 cm )  ( -25:3.4 cm ) arc ( -25:85:3.4 cm )  ( 85:2.2 cm ) arc ( 85:35:2.2 cm ) ; ( -35:2.2 cm ) arc ( -35:-115:2.2 cm )  ( -115:2.8 cm ) arc(-115:35:2.8 cm )  ( 35:2.2 cm ) ;    ( 30:2 cm ) circle ( 1 mm ) ; ( -30:2 cm ) circle ( 1 mm ) ; ( 0,2 ) circle ( 1 mm ) ; ( 0,-2 ) circle ( 1 mm ) ; ( 150:2 cm ) circle ( 1 mm ) ; at ( 150:1.6 cm ) @xmath162 ;    [ thm : earringproof ] let @xmath6 be an earring of minimum arc length . every segment contained in the arc of @xmath6 is safe .",
    "let @xmath169 be the set of earrings with arc identical to that of @xmath6 .",
    "since they have the same arc , we refer to this as the arc of @xmath169 , or the _",
    "critical arc_. let the first clasp of every earring in @xmath169 be @xmath163 , and the last clasp of each earring in @xmath169 be @xmath164 . because the earrings in @xmath169 have arcs of minimum length , any earring @xmath170 has a clasp @xmath171 that is not in the critical arc .",
    "( that is , @xmath172 or @xmath173 . )",
    "we must show that every segment contained in the critical arc is safe ; recall that a segment @xmath13 is safe if the graph @xmath153 is 2-connected . given an arbitrary segment @xmath13 in the critical arc , let @xmath156 and @xmath157 ( @xmath174 ) be the anchors that are its endpoints .",
    "we prove that there are always 2 internally vertex - disjoint paths between @xmath156 and @xmath157 in @xmath152 ; this suffices to show 2-connectivity .",
    "we consider several cases , depending on the earrings that contain @xmath156 and @xmath157 .",
    "figure  [ fig : earringproof ] illustrates these cases . if @xmath156 and @xmath157 are contained in the same earring @xmath58 , it is easy to find two vertex - disjoint paths between them in @xmath153 .",
    "the first path is clockwise from @xmath175 to @xmath176 in the cycle @xmath35 .",
    "the second path is entirely contained in the earring @xmath58 ( an earring is connected in @xmath177 , so we can always find such a path . )    otherwise , @xmath156 and @xmath157 are clasps of distinct earrings .",
    "we consider three cases : both @xmath156 and @xmath157 are clasps of earrings in @xmath169 , one is ( but not both ) , or neither is .    1 .",
    "we first consider that both @xmath156 and @xmath157 are clasps of earrings in @xmath169 .",
    "let @xmath156 be a clasp of @xmath166 , and @xmath157 a clasp of @xmath167 .",
    "the first path is from @xmath157 to @xmath163 through @xmath167 , and then clockwise along the critical arc from @xmath163 to @xmath156 .",
    "the second path is from @xmath157 to @xmath164 clockwise along the critical path , and then @xmath164 to @xmath156 through @xmath166 .",
    "it is easy to see that these paths are internally vertex - disjoint .",
    "2 .   now , suppose neither @xmath156 nor @xmath157 is a clasp of an earring in @xmath169 .",
    "let @xmath156 be a clasp of @xmath166 , and @xmath157 be a clasp of @xmath167 .",
    "the first path we find follows the critical arc clockwise from @xmath157 to @xmath164 ( the last clasp of the critical arc ) , from @xmath164 to @xmath163 through @xmath165 , and again clockwise through the critical arc from @xmath163 to @xmath156 .",
    "internal vertices of this path are all in @xmath6 or on the critical arc .",
    "let @xmath178 be a clasp of @xmath166 not on the critical arc , and @xmath179 be a last clasp of @xmath167 not on the critical arc .",
    "the second path goes from @xmath156 to @xmath178 through @xmath166 , from @xmath180 to @xmath181 through the cycle @xmath35 outside the critical arc , and from @xmath179 to @xmath157 through @xmath167 .",
    "internal vertices of this path are in @xmath182 , or in @xmath35 , but not part of the critical arc ( since each of @xmath178 and @xmath179 are outside the critical arc ) . therefore , we have 2 vertex - disjoint paths from @xmath156 to @xmath157 .",
    "finally , we consider the case that exactly one of @xmath183 is a clasp of an earring in @xmath169 .",
    "suppose @xmath156 is a clasp of @xmath168 , and @xmath157 is a clasp of @xmath184 ; the other case ( where @xmath185 and @xmath186 is symmetric , and omitted , though figure  [ fig : earringproof ] illustrates the paths . )",
    "let @xmath181 be the index of a clasp of @xmath167 outside the critical arc .",
    "the first path is from @xmath157 to @xmath164 through the critical arc , and then from @xmath164 to @xmath156 through @xmath166 .",
    "the second path is from @xmath157 to @xmath179 through @xmath167 , and from @xmath179 to @xmath156 clockwise through @xmath35 .",
    "note that the last part of this path enters the critical arc at @xmath163 , and continues through the arc until @xmath156 .",
    "internal vertices of the first path that are in @xmath35 are on the critical arc , but have index greater than @xmath175 .",
    "internal vertices of the second path that belong to @xmath35 are either not in the critical arc , or have index between @xmath163 and @xmath156",
    ". therefore , the two paths are internally vertex - disjoint .",
    "we now describe our algorithm to find a non - trivial cycle of good density , proving theorem  [ thm : cycle ] : _ let @xmath2 be a @xmath1-connected graph with edge - costs and terminal weights , and at least @xmath1 terminals .",
    "there is a polynomial - time algorithm to find a non - trivial cycle @xmath136 in @xmath2 such that @xmath137 . _",
    "theorem  [ thm : cycle ] let @xmath2 be a graph with @xmath32 terminals and density @xmath146 ; we describe a polynomial - time algorithm that either finds a cycle in @xmath2 of density less than @xmath146 , or a proper subgraph @xmath42 of @xmath2 that contains all @xmath32 terminals . in the latter case , we can recurse on @xmath42 until we eventually find a cycle of density at most @xmath146 .",
    "we first find , in @xmath187 time , a minimum - density cycle @xmath35 in @xmath2 . by theorem  [ thm : cycleexists ] , @xmath35 has density at most @xmath146 , because the minimum - density _ non - trivial _ cycle has at most this density .",
    "if @xmath35 contains at least 2 terminals , we are done .",
    "otherwise , @xmath35 contains exactly one terminal @xmath28 .",
    "since @xmath2 contains at least 2 terminals , there must exist at least one earring of @xmath35 .",
    "let @xmath28 be the origin of this cycle @xmath35 , and @xmath6 an earring of minimum arc length . by theorem  [ thm : earringproof ]",
    ", every segment in the arc of @xmath6 is safe .",
    "let @xmath13 be such a segment ; since @xmath28 was selected as the origin , @xmath28 is not an internal vertex of @xmath13 . as @xmath28 is the only terminal of @xmath35 , @xmath13 contains no terminals , and therefore , the graph @xmath188 is 2-connected , and contains all @xmath32 terminals of @xmath2 .",
    "the proof above also shows that if @xmath2 is minimally 2-connected on its terminals ( that is , @xmath2 has no 2-connected proper subgraph containing all its terminals ) , every cycle of @xmath2 is non - trivial .",
    "( if a cycle contains 0 or 1 terminals , it has a safe segment containing no terminals , which can be deleted ; this gives a contradiction . ) therefore , given a graph that _ is _ minimally 2-connected on its terminals , finding a minimum - density non - trivial cycle is equivalent to finding a minimum - density cycle , and so can be solved exactly in polynomial time .",
    "this suggests a natural algorithm for the problem : given a graph that is not minimally 2-connected on its terminals , delete edges and vertices until the graph is minimally 2-connected on the terminals , and then find a minimum - density cycle .",
    "as shown above , this gives a cycle of density no more than that of the input graph , but this may not be the minimum - density cycle of the original graph .",
    "for instance , there exist instances where the minimum - density cycle uses edges of a safe segment @xmath13 that might be deleted by this algorithm .",
    "in this section , we prove theorem  [ thm : avekv ] . we are given a graph @xmath2 and @xmath3 , a set of at least @xmath0 terminals .",
    "further , every terminal in @xmath2 has 2 vertex - disjoint paths to the root @xmath39 of total cost at most @xmath67 .",
    "let @xmath32 be the number of terminals in @xmath2 , and @xmath189 its total cost ; @xmath190 is the density of @xmath2 .",
    "we describe an algorithm that finds a subgraph @xmath6 of @xmath2 that contains at least @xmath0 terminals , each of which is 2-connected to the root , and of total edge cost @xmath191 .",
    "we can assume @xmath192 , or the trivial solution of taking the entire graph @xmath2 suffices .",
    "the main phase of our algorithm proceeds by maintaining a set of 2-connected subgraphs that we call _ clusters _ , and repeatedly finding low - density cycles that merge clusters of similar weight to form larger clusters .",
    "( the weight of a cluster @xmath136 , denoted by @xmath193 , is ( roughly ) the number of terminals it contains . )",
    "clusters are grouped into _",
    "tiers _ by weight ; tier @xmath95 contains clusters with weight at least @xmath194 and less than @xmath102 .",
    "initially , each terminal is a separate cluster in tier 0 .",
    "we say a cluster is _ large _ if it has weight at least @xmath0 , and _ small _ otherwise .",
    "the algorithm stops when most terminals are in large clusters .",
    "we now describe the algorithm mergeclusters ( see next page ) . to simplify notation , let @xmath144 be the quantity @xmath195 .",
    "we say that a cycle is _ good _ if it has density at most @xmath144 ; that is , good cycles have density at most @xmath196 times the density of the input graph .    :",
    "+ for ( each @xmath95 in @xmath197 ) do : + if ( @xmath198 ) : + every terminal has weight 1 + else : + mark all vertices as non - terminals + for ( each small 2-connected cluster @xmath136 in tier @xmath95 ) do : + add a ( dummy ) terminal @xmath199 to @xmath2 of weight @xmath193 + add ( dummy ) edges of cost 0 from @xmath199 to two ( arbitrary ) distinct vertices of @xmath136 + while ( @xmath2 has a non - trivial cycle @xmath35 of density at most @xmath144 in @xmath2 ) : + let @xmath200 be the small clusters that contain a terminal * or an edge * of @xmath35 .",
    "+ ( note that the terminals in @xmath35 belong to a subset of @xmath201 . ) + form a new cluster @xmath202 ( of a higher tier ) by merging the clusters @xmath203 + @xmath204 + if ( @xmath198 ) : + mark all terminals in @xmath202 as non - terminals + else : + delete all ( dummy ) terminals in @xmath202 and the associated ( dummy ) edges .",
    "we briefly remark on some salient features of this algorithm and our analysis before presenting the details of the proofs .    1 .   in iteration @xmath95",
    ", the terminals correspond to tier @xmath95 clusters .",
    "clusters are 2-connected subgraphs of @xmath2 , and by using cycles to merge clusters , we preserve 2-connectivity as the clusters become larger .",
    "2 .   when a cycle @xmath35 is used to merge clusters , all small clusters that contain an edge of @xmath35 ( regardless of their tier ) are merged to form the new cluster . therefore , at any stage of the algorithm , all currently small clusters are edge - disjoint . large clusters , on the other hand , are _ frozen _ ;",
    "even if they intersect a good cycle @xmath35 , they are not merged with other clusters on @xmath35 .",
    "thus , at any time , an edge may be in multiple large clusters and up to one small cluster .",
    "3 .   in iteration @xmath95 of mergeclusters ,",
    "the density of a cycle @xmath35 is only determined by its cost and the weight of terminals in @xmath35 corresponding to tier @xmath95 clusters .",
    "though small clusters of other ( lower or higher ) tiers might be merged using @xmath35 , we do _ not _ use their weight to pay for the edges of @xmath35 .",
    "4 .   the @xmath95th iteration terminates when no good cycles can be found using the remaining tier @xmath95 clusters . at this point",
    ", there may be some terminals remaining that correspond to clusters which are not merged to form clusters of higher tiers . however , our choice of @xmath144 ( which defines the density of good cycles ) is such that we can bound the number of terminals that are `` left behind '' in this fashion",
    ". therefore , when the algorithm terminates , most terminals are in large clusters .    by bounding the density of large clusters",
    ", we can find a solution to the rooted @xmath0-@xmath1vc problem of bounded density . because we always use cycles of low density to merge clusters , an analysis similar to that of @xcite and @xcite shows that every large cluster has density at most @xmath205 .",
    "we first present this analysis , though it does not suffice to prove theorem  [ thm : avekv ] .",
    "a more careful analysis shows that there is at least one large cluster of density at most @xmath206 ; this allows us to prove the desired theorem .",
    "we now formally prove that mergeclusters has the desired behavior .",
    "first , we present a series of claims which , together , show that when the algorithm terminates , most terminals are in large clusters , and all clusters are 2-connected .",
    "[ rem : cluster ] throughout the algorithm , the graph @xmath2 is always 2-connected .",
    "the weight of a cluster is at most the number of terminals it contains .",
    "the only structural changes to @xmath2 are when new vertices are added as terminals ; they are added with edges to two distinct vertices of @xmath2 .",
    "this preserves 2-connectivity , as does deleting these terminals with the associated edges .    to see that the second claim is true ,",
    "observe that if a terminal contributes weight to a cluster , it is contained in that cluster .",
    "a terminal can be in multiple clusters , but it contributes to the weight of exactly one cluster .",
    "we use the following simple proposition in proofs of 2-connectivity ; the proof is straightforward , and hence omitted .    [",
    "prop : shareedge ] let @xmath207 and @xmath208 be @xmath1-connected subgraphs of a graph @xmath5 such that @xmath209",
    ". then the graph @xmath210 is @xmath1-connected .",
    "[ lem : clusters2conn ] the clusters formed by mergeclusters are all @xmath1-connected .",
    "let @xmath202 be a cluster formed by using a cycle @xmath35 to merge clusters @xmath200 .",
    "the edges of the cycle @xmath35 form a 2-connected subgraph of @xmath2 , and we assume that each @xmath211 is 2-connected by induction .",
    "further , @xmath35 contains at least 2 vertices of each @xmath211 may be a singleton vertex ( for instance , if we are in tier 0 ) , but such a vertex does not affect 2-connectivity . ] , so we can use induction and proposition  [ prop : shareedge ] above : we assume @xmath212 is 2-connected by induction , and @xmath35 contains 2 vertices of @xmath213 , so @xmath214 is 2-connected .    note that we have shown @xmath215",
    "is 2-connected , but @xmath35 ( and hence @xmath202 ) might contain dummy terminals and the corresponding dummy edges .",
    "however , each such terminal with the 2 associated edges is a ear of @xmath202 ; deleting them leaves @xmath202 2-connected .",
    "[ lem : fewleftbehind ] the total weight of small clusters in tier @xmath95 that are not merged to form clusters of higher tiers is at most @xmath216 .",
    "assume this were not true ; this means that mergeclusters could find no more cycles of density at most @xmath144 using the remaining small tier @xmath95 clusters .",
    "but the total cost of all the edges is at most @xmath189 , and the sum of terminal weights is at least @xmath216 ; this implies that the density of the graph ( using the remaining terminals ) is at most @xmath217 .",
    "but by theorem  [ thm : cycleexists ] , the graph must then contain a good non - trivial cycle , and so the while loop would not have terminated .",
    "[ cor : weightlargeclusters ] when the algorithm mergeclusters terminates , the total weight of large clusters is at least @xmath218 .",
    "each terminal not in a large cluster contributes to the weight of a cluster that was not merged with others to form a cluster of a higher tier .",
    "the previous lemma shows that the total weight of such clusters in any tier is at most @xmath219 ; since there are @xmath220 tiers , the total number of terminals not in large clusters is less than @xmath221 .",
    "so far , we have shown that most terminals reach large clusters , all of which are 2-connected , but we have not argued about the density of these clusters . the next lemma says that if we can find a large cluster of good density , we can find a solution to the @xmath0-@xmath1vc problem of good density .",
    "[ lem : segment ] let @xmath202 be a large cluster formed by mergeclusters . if @xmath202 has density at most @xmath222 , we can find a graph @xmath223 with at least @xmath0 terminals , each of which is @xmath1-connected to @xmath39 , of total cost at most @xmath224 .",
    "let @xmath200 be the clusters merged to form @xmath202 in order around the cycle @xmath35 that merged them ; each @xmath211 was a small cluster , of weight at most @xmath0 .",
    "a simple averaging argument shows that there is a consecutive segment of @xmath211s with total weight between @xmath0 and @xmath225 , such that the cost of the edges of @xmath35 connecting these clusters , together with the costs of the clusters themselves , is at most @xmath226 .",
    "let @xmath227 be the `` first '' cluster of this segment , and @xmath228 the `` last '' .",
    "let @xmath28 and @xmath229 be arbitrary terminals of @xmath227 and @xmath228 respectively . connect each of @xmath28 and @xmath229 to the root @xmath39 using 2 vertex - disjoint paths ;",
    "the cost of this step is at most @xmath230 .",
    "( we assumed that every terminal could be 2-connected to @xmath39 using disjoint paths of cost at most @xmath67 . )",
    "the graph @xmath223 thus constructed has at least @xmath0 terminals , and total cost at most @xmath231 .",
    "we show that every vertex @xmath232 of @xmath223 is 2-connected to @xmath39 ; this completes our proof .",
    "let @xmath232 be an arbitrary vertex of @xmath223 ; suppose there is a cut - vertex @xmath131 which , when deleted , separates @xmath232 from @xmath39 .",
    "both @xmath28 and @xmath229 are 2-connected to @xmath39 , and therefore neither is in the same component as @xmath232 in @xmath233 .",
    "however , we describe 2 vertex - disjoint paths @xmath234 and @xmath235 in @xmath223 from @xmath232 to @xmath28 and @xmath229 respectively ; deleting @xmath131 can not separate @xmath232 from both @xmath28 and @xmath229 , which gives a contradiction .",
    "the paths @xmath234 and @xmath235 are easy to find ; let @xmath211 be the cluster containing @xmath232 .",
    "the cycle @xmath35 contains a path from vertex @xmath236 to @xmath237 , and another ( vertex - disjoint ) path from @xmath238 to @xmath239 .",
    "concatenating these paths with paths from @xmath240 to @xmath28 in @xmath227 and @xmath241 to @xmath229 in @xmath228 gives us vertex - disjoint paths @xmath242 from @xmath243 to @xmath28 and @xmath244 from @xmath245 to @xmath229 .",
    "since @xmath211 is 2-connected , we can find vertex - disjoint paths from @xmath232 to @xmath243 and @xmath245 , which gives us the desired paths @xmath234 and @xmath235",
    ". may not be in any cluster @xmath211 . in this case , @xmath234 is formed by using edges of @xmath35 from @xmath232 to @xmath237 , and then a path from @xmath240 to @xmath28 ; @xmath235 is formed similarly . ]",
    "we now present the two analyses of density referred to earlier .",
    "the key difference between the weaker and tighter analysis is in the way we bound edge costs . in the former ,",
    "each large cluster pays for its edges separately , using the fact that all cycles used have density at most @xmath246 . in the latter",
    ", we crucially use the fact that small clusters which share edges are merged . roughly speaking , because small clusters are edge - disjoint",
    ", the average density of small clusters must be comparable to the density of the input graph @xmath2 .",
    "once an edge is in a large cluster , we can no longer use the edge - disjointness argument .",
    "we must pay for these edges separately , but we can bound this cost .",
    "first , the following lemma allows us to show that every large cluster has density at most @xmath205 .",
    "[ lem : tiercost ] for any cluster @xmath202 formed by mergeclusters during iteration @xmath95 , the total cost of edges in @xmath202 is at most @xmath247 .",
    "we prove this lemma by induction on the number of vertices in a cluster .",
    "let @xmath248 be the set of clusters merged using a cycle @xmath35 to form @xmath202 .",
    "let @xmath249 be the set of clusters in @xmath248 of tier @xmath95 , and @xmath250 be @xmath251 .",
    "( @xmath250 contains clusters of tiers less or greater than @xmath95 that contained an edge of @xmath35 . )",
    "the cost of edges in @xmath202 is at most the sum of : the cost of @xmath35 , the cost of @xmath249 , and the cost of @xmath250 . since all clusters in @xmath250 have been formed during iteration @xmath95 or earlier , and are smaller than @xmath202 , we can use induction to show that the cost of edges in @xmath250 is at most @xmath252 . all clusters in @xmath249",
    "are of tier @xmath95 , and so must have been formed before iteration @xmath95 ( any cluster formed during iteration @xmath95 is of a strictly greater tier ) , so we use induction to bound the cost of edges in @xmath249 by @xmath253 .",
    "finally , because @xmath35 was a good - density cycle , and only clusters of tier @xmath95 contribute to calculating the density of @xmath35 , the cost of @xmath35 is at most @xmath254 .",
    "therefore , the total cost of edges in @xmath202 is at most @xmath255 .",
    "let @xmath202 be an arbitrary large cluster ; since we have only @xmath220 tiers , the previous lemma implies that the cost of @xmath202 is at most @xmath256 . that is , the density of @xmath202 is at most @xmath205 , and we can use this fact together with lemma  [ lem : segment ] to find a solution to the rooted @xmath0-@xmath1vc problem of cost at most @xmath257 .",
    "this completes the ` weaker ' analysis , but this does not suffice to prove theorem  [ thm : avekv ] ; to prove the theorem , we would need to use a large cluster @xmath202 of density @xmath206 , instead of @xmath205 .    for the purpose of the more careful analysis , implicitly construct a forest @xmath258 on the clusters formed by mergeclusters .",
    "initially , the vertex set of @xmath258 is just @xmath13 , the set of terminals , and @xmath258 has no edges . every time a cluster @xmath202 is formed by merging @xmath200 ,",
    "we add a corresponding vertex @xmath202 to the forest @xmath258 , and add edges from @xmath202 to each of @xmath203 ; @xmath202 is the parent of @xmath259 .",
    "we also associate a cost with each vertex in @xmath258 ; the cost of the vertex @xmath202 is the cost of the cycle used to form @xmath202 from @xmath203 .",
    "we thus build up trees as the algorithm proceeds ; the root of any tree corresponds to a cluster that has not yet become part of a bigger cluster .",
    "the leaves of the trees correspond to vertices of @xmath2 ; they all have cost 0 . also ,",
    "any large cluster @xmath202 formed by the algorithm is at the root of its tree ; we refer to this tree as @xmath260 .    for each large cluster @xmath202 after mergeclusters terminates , say that @xmath202 is of type @xmath95 if @xmath202 was formed during iteration @xmath95 of mergeclusters .",
    "we now define the _ final - stage _ clusters of @xmath202 : they are the clusters formed during iteration @xmath95 that became part of @xmath202 .",
    "( we include @xmath202 itself in the list of final - stage clusters ; even though @xmath202 was formed in iteration @xmath95 of mergeclusters , it may contain other final - stage clusters .",
    "for instance , during iteration @xmath95 , we may merge several tier @xmath95 clusters to form a cluster @xmath136 of tier @xmath261 .",
    "then , if we find a good - density cycle @xmath35 that contains an edge of @xmath136 , @xmath136 will merge with the other clusters of @xmath35 . )",
    "the _ penultimate _ clusters of @xmath202 are those clusters that exist just before the beginning of iteration @xmath95 and become a part of @xmath202 .",
    "equivalently , the penultimate clusters are those formed before iteration @xmath95 that are the immediate children in @xmath260 of final - stage clusters .",
    "figure 1 illustrates the definitions of final - stage and penultimate clusters .",
    "such a tree could be formed if , in iteration @xmath262 , 4 clusters of this tier merged to form @xmath263 , a cluster of tier @xmath264 .",
    "subsequently , in iteration @xmath95 , clusters @xmath6 and @xmath265 merge to form @xmath266 .",
    "we next find a good cycle containing @xmath267 and @xmath2 ; @xmath266 contains an edge of this cycle , so these three clusters are merged to form @xmath17 .",
    "note that the cost of this cycle is paid for the by the weights of @xmath267 and @xmath2 only ; @xmath266 is a tier @xmath264 cluster , and so its weight is not included in the density calculation .",
    "finally , we find a good cycle paid for by @xmath268 and @xmath35 ; since @xmath17 and @xmath263 share edges with this cycle , they all merge to form the large cluster @xmath202 .",
    "= [ circle , draw , inner sep=0pt , minimum size=6 mm ] ; = [ circle , draw , inner sep=0pt , minimum size=7 mm ] ;    = [ font= ] ;    \\(y ) at ( 6,5.5 ) [ high ] @xmath202 ;    \\(a ) at ( 1.5,4 ) [ vertex ] @xmath95 ; ( b ) at ( 4.5,4 ) [ high ] @xmath269 ; ( c ) at ( 7.5,4 ) [ vertex ] @xmath95 ; ( d ) at ( 10.5,4 ) [ vertex ] @xmath264 ; ( a )  ( y )  ( b ) ; ( c )  ( y )  ( d ) ;    at ( 0.7,4 ) @xmath268 ; at ( 3.6,4 ) @xmath17 ; at ( 6.7,4 ) @xmath35 ; at ( 9.7,4 ) @xmath263 ;    \\(e ) at ( 3,2.5 ) [ vertex ] @xmath95 ; ( f ) at ( 4.5,2.5 ) [ high ] @xmath264 ; ( g ) at ( 6,2.5 ) [ vertex ] @xmath95 ; ( e )  ( b ) ",
    "( f ) ; ( b )  ( g ) ;    at ( 2.3,2.7 ) @xmath267 ; at ( 3.8,2.7 ) @xmath266 ; at ( 5.35,2.7 ) @xmath2 ;    \\(h ) at ( 3.5,1 ) [ vertex ] @xmath95 ; ( j ) at ( 5.5,1 ) [ vertex ] @xmath95 ; ( h )  ( f )  ( j ) ;    at ( 2.9,1.3 ) @xmath6 ; at ( 4.9,1.3 ) @xmath265 ;    at ( y ) [ vertex ] ; at ( b ) [ vertex ] ; at ( f ) [ vertex ] ;    an edge of a large cluster @xmath202 is said to be a _ final edge _ if it is used in a cycle @xmath35 that produces a final - stage cluster of @xmath202 .",
    "all other edges of @xmath202 are called _ penultimate edges _ ; note that any penultimate edge is in some penultimate cluster of @xmath202 .",
    "we define the _ final cost _ of @xmath202 to be the sum of the costs of its final edges , and its _ penultimate cost _ to be the sum of the costs of its penultimate edges ; clearly , the cost of @xmath202 is the sum of its final and penultimate costs .",
    "we bound the final costs and penultimate costs separately .",
    "recall that an edge is a final edge of a large cluster @xmath202 if it is used by mergeclusters to form a cycle @xmath35 in the final iteration during which @xmath202 is formed .",
    "the reason we can bound the cost of final edges is that the cost of any such cycle is at most @xmath144 times the weight of clusters contained in the cycle , and a cluster does not contribute to the weight of more than one cycle in an iteration .",
    "( this is also the essence of lemma  [ lem : tiercost ] . )",
    "we formalize this intuition in the next lemma .",
    "[ lem : final ] the final cost of any large cluster @xmath202 is at most @xmath270 , where @xmath271 is the weight of @xmath202 .",
    "let @xmath202 be an arbitrary large cluster .",
    "in the construction of the tree @xmath260 , we associated with each vertex of @xmath260 the cost of the cycle used to form the corresponding cluster . to bound the total final cost of @xmath202 , we must bound the sum of the costs of vertices of @xmath260 associated with final - stage clusters . the weight of @xmath202 , @xmath271 is at least the sum of the weights of the penultimate tier @xmath95 clusters that become a part of @xmath202 .",
    "therefore , it suffices to show that the sum of the costs of vertices of @xmath260 associated with final - stage clusters is at most @xmath144 times the sum of the weights of @xmath202 s penultimate tier @xmath95 clusters .",
    "( note that a tier @xmath95 cluster must have been formed prior to iteration @xmath95 , and hence it can not itself be a final - stage cluster . )",
    "a cycle was used to construct a final - stage cluster @xmath136 only if its cost was at most @xmath144 times the sum of weights of the penultimate tier @xmath95 clusters that become a part of @xmath136 .",
    "( larger clusters may become a part of @xmath136 , but they do not contribute weight to the density calculation . ) therefore , if @xmath136 is a vertex of @xmath260 corresponding to a final - stage cluster , the cost of @xmath136 is at most @xmath144 times the sum of the weights of its tier @xmath95 immediate children in @xmath260 . but",
    "@xmath260 is a tree , and so no vertex corresponding to an penultimate tier @xmath95 cluster has more than one parent .",
    "that is , the weight of a penultimate cluster pays for only one final - stage cluster .",
    "therefore , the sum of the costs of vertices associated with final - stage clusters is at most @xmath144 times the sum of the weights of @xmath202 s penultimate tier @xmath95 clusters , and so the final cost of @xmath202 is at most @xmath270 .",
    "[ lem : penultimate ] if @xmath272 and @xmath273 are distinct large clusters of the same type , no edge is a penultimate edge of both @xmath272 and @xmath273 .",
    "suppose , by way of contradiction , that some edge @xmath85 is a penultimate edge of both @xmath272 and @xmath273 , which are large clusters of type @xmath95 .",
    "let @xmath274 ( respectively @xmath275 ) be a penultimate cluster of @xmath272 ( resp .",
    "@xmath273 ) containing @xmath85 . as penultimate clusters ,",
    "both @xmath274 and @xmath275 are formed before iteration @xmath95 .",
    "but until iteration @xmath95 , neither is part of a large cluster , and two small clusters can not share an edge without being merged . therefore , @xmath274 and @xmath275 must have been merged , so they can not belong to distinct large clusters , giving the desired contradiction .    [",
    "thm : goodlargecluster ] after mergeclusters terminates , at least one large cluster has density at most @xmath206 .",
    "we define the _ penultimate density _ of a large cluster to be the ratio of its penultimate cost to its weight .    consider the total penultimate costs of all large clusters : for any @xmath95 , each edge @xmath276",
    "can be a penultimate edge of at most 1 large cluster of type @xmath95 .",
    "this implies that each edge can be a penultimate edge of at most @xmath220 clusters .",
    "therefore , the sum of penultimate costs of all large clusters is at most @xmath277 .",
    "further , the total weight of all large clusters is at least @xmath278 .",
    "therefore , the ( weighted ) average penultimate density of large clusters is at most @xmath279 , and hence there exists a large cluster @xmath202 of penultimate density at most @xmath280 .",
    "the penultimate cost of @xmath202 is , therefore , at most @xmath281 , and from lemma  [ lem : final ] , the final cost of @xmath202 is at most @xmath270 .",
    "therefore , the density of @xmath202 is at most @xmath282 .",
    "theorem  [ thm : goodlargecluster ] and lemma [ lem : segment ] together imply that we can find a solution to the rooted @xmath0-@xmath1vc problem of cost at most @xmath191 .",
    "this completes our proof of theorem  [ thm : avekv ] .",
    "we list the following open problems :    * can the approximation ratio for the @xmath0-@xmath1vc problem be improved from the current @xmath44 to @xmath283 or better ? removing the dependence on @xmath32 to obtain even @xmath284 could be interesting . if not , can one improve the approximation ratio for the easier @xmath0-@xmath1ec problem ? * can we obtain approximation algorithms for the @xmath0-@xmath8vc or @xmath0-@xmath8ec problems for @xmath285 ?",
    "in general , few results are known for problems where vertex - connectivity is required to be greater than 2 , but there has been more progress with higher edge - connectivity requirements . *",
    "given a 2-connected graph of density @xmath146 with some vertices marked as terminals , we show that it contains a non - trivial cycle with density at most @xmath146 , and give an algorithm to find such a cycle .",
    "we have also found an @xmath37-approximation for the problem of finding a minimum - density non - trivial cycle .",
    "is there a constant - factor approximation for this problem ? can it be solved _",
    "exactly _ in polynomial time ?",
    "b. awerbuch , y. azar , a. blum and s. vempala .",
    "new approximation guarantees for minimum weight @xmath0-trees and prize - collecting salesmen .",
    ", 28(1):254262 , 1999 .",
    "preliminary version in _ proc .  of acm stoc _ , 1995 .",
    "m.  x. goemans and d.  p. williamson .",
    "the primal - dual method for approximation algorithms and its application to network design problems . in d.",
    "s. hochbaum , editor , _ approximation algorithms for np - hard problems_. pws publishing company , 1996 ."
  ],
  "abstract_text": [
    "<S> in the @xmath0-@xmath1vc problem , we are given an undirected graph @xmath2 with edge costs and an integer @xmath0 ; the goal is to find a minimum - cost 2-vertex - connected subgraph of @xmath2 containing at least @xmath0 vertices . </S>",
    "<S> a slightly more general version is obtained if the input also specifies a subset @xmath3 of _ terminals _ and the goal is to find a subgraph containing at least @xmath0 terminals . </S>",
    "<S> closely related to the @xmath0-@xmath1vc problem , and in fact a special case of it , is the @xmath0-@xmath1ec problem , in which the goal is to find a minimum - cost 2-edge - connected subgraph containing @xmath0 vertices . </S>",
    "<S> the @xmath0-@xmath1ec problem was introduced by lau _ </S>",
    "<S> et al . _  </S>",
    "<S> @xcite , who also gave a poly - logarithmic approximation for it . </S>",
    "<S> no previous approximation algorithm was known for the more general @xmath0-@xmath1vc problem . </S>",
    "<S> we describe an @xmath4 approximation for the @xmath0-@xmath1vc problem . </S>"
  ]
}