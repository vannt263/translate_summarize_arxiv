{
  "article_text": [
    "internet of things ( iot ) refers to a technology paradigm wherein ubiquitous sensors numbering in the billions will able to monitor physical infrastructure and environment , human beings and virtual entities in real - time , process both real - time and historic observations , and take actions that improve the efficiency and reliability of systems , or the comfort and lifestyle of society .",
    "the technology building blocks for iot have been ramping up over a decade , with research into pervasive and ubiquitous computing  @xcite , and sensor networks  @xcite forming precursors .",
    "recent growth in the capabilities of high - speed mobile ( e.g. , 2g/3g/4 g ) and _ ad hoc _",
    "( e.g. , bluetooth ) networks  @xcite , smart phones , affordable sensing and crowd - sourced data collection  @xcite , cloud data - centers and big data analytics platforms have all contributed to the current inflection point for iot .    currently , the iot applications are often manifest in vertical domains , such as demand - response optimization and outage management in _ smart grids _  @xcite , or fitness and sleep tracking and recommendations by _ smart watches and health bands",
    "_  @xcite . the iot stack for such domains is tightly integrated to serve specific needs , but typically operates on a closed - loop _ observe orient decide act ( ooda ) _ cycle , where sensors communicate time - series observations of the ( physical or human ) system to a central server or the cloud for analysis , and the analytics drive recommendations that are enacted on , or notified to , the system to improve it , which is again observed and so on .",
    "in fact , this _ closed - loop _ responsiveness is one of the essential design characteristics of iot applications .",
    "this low - latency cycle makes it necessary to process data streaming from sensors at fine spatial and temporal scales , in _ real - time _ , to derive actionable intelligence .",
    "in particular , this streaming analytics has be to done at massive scales ( millions of sensors , thousands of events per second ) from across distributed sensors , requiring large computational resources .",
    "_ cloud computing _ offers a natural platform for scalable processing of the observations at globally distributed data centers , and sending a feedback response to the iot system at the edge .",
    "recent _ big data platforms _ like apache storm  @xcite and spark  @xcite provide an intuitive programming model for composing such streaming applications , with a scalable , low - latency execution engine designed for commodity clusters and clouds . these _ distributed stream processing systems ( dsps ) _ are becoming essential components of any iot stack to support online analytics and decision - making for iot applications .",
    "in fact , reference iot solutions from cloud providers like amazon aws and microsoft azure include their proprietary stream and event processing engines as part of the iot analytics architecture .",
    "shared - memory stream processing systems  @xcite have been investigated over a decade back for wireless sensor networks , with community benchmarks such as _ linear road _",
    "@xcite being proposed .",
    "but there has not been a detailed review of , or benchmarks for , _ distributed _ stream processing for iot domains . in particular , the efficacy and performance of contemporary dsps , which were originally designed for social network and web traffic  @xcite , have not been rigorously studied for _ iot data streams and applications_. we address this gap in this paper .",
    "we develop a benchmark suite for dsps to evaluate their effectiveness for streaming iot applications .",
    "the proposed workload is based on common building - block tasks observed in various iot domains for real - time decision making , and the input streams are sourced from real iot observations from smart cities .",
    "specifically , we make the following contributions :    1 .",
    "we classify different characteristics of streaming applications and their data sources , in   [ sec : features ] .",
    "we propose categories of tasks that are essential for iot applications and the key features that are present in their input data streams",
    "we identify performance metrics of dsps that are necessary to meet the latency and scalability needs of streaming iot applications , in ",
    "[ sec : metrics ] .",
    "we propose an iot benchmark for dsps based on representative _ micro - benchmark tasks _ , drawn from the above categories , in   [ sec : benchmark ] .",
    "further , we design two reference iot applications  for _ statistical analytics _ and _ predictive analytics _  composed from these tasks .",
    "we also offer real - world streams with different distributions on which to evaluate them .",
    "4 .   we run the benchmark for the popular apache storm dsps , and present empirical results for the same in   [ sec : results ] .",
    "our contributions here will allow iot applications to evaluate if current and future dsps meet their performance and scalability needs , and offer a baseline for big data researchers and developers to uniformly compare dsps platforms for different iot domains .",
    "stream processing systems allow users to compose applications as a dataflow graph , with task vertices having some user - defined logic , and streaming edges passing messages between the tasks , and run these applications continuously over incoming data streams .",
    "early data stream management systems ( dsms ) were motivated by sensor network applications , that have similarities to iot  @xcite .",
    "they supported continuous query languages with operators such as join , aggregators similar to sql , but with a temporal dimension using windowed - join operations .",
    "these have been extended to distributed implementations  @xcite and complex event processing ( cep ) engines for detecting sequences and patterns .",
    "current distributed stream processing systems ( dsps ) like storm and spark streaming  @xcite leverage big data fundamentals , running on commodity clusters and clouds , offering weak scaling , ensuring robustness , and supporting fast data processing over thousands of events per second .",
    "they do not support native query operators and instead allow users to plug in their own logic composed as dataflow graphs executed across a cluster . while developed for web and social network applications , such fast data platforms have found use in financial markets , astronomy , and particle physics .",
    "iot is one of the more recent domains to consider them .",
    "work on dsms spawned the linear road benchmark ( lrb )  @xcite that was proposed as an application benchmark . in the scenario , dsms had to evaluate toll and traffic queries over event streams from a virtual toll collection and traffic monitoring system .",
    "this parallels with current smart transportation scenarios",
    ". however , there have been few studies or community efforts on benchmarking dsps , other than individual evaluation of research prototypes against popular dsps like storm or spark .",
    "these efforts define their own measures of success  typically limited to throughput and latency  and use generic workloads such as enron email dataset with no - operation as micro - benchmark to compare infosphere streams  @xcite and storm.sparkbench  @xcite uses two streaming applications , twitter popular tag retrieving data from the twitter website to calculate most popular tag every minute and pageview over synthetic user clicks to get various statistics using spark .",
    "stream bench  @xcite has proposed 7 micro - benchmarks on 4 different synthetic workload suites generated from real - time web logs and network traffic to evaluate dsps .",
    "metrics including performance , durability and fault tolerance are proposed .",
    "the benchmark covers different dataflow composition patterns and common tasks like grep and wordcount . while useful as a generic streaming benchmark , it does not consider aspects unique to iot applications and streams .",
    "sparkbench  @xcite is a framework - specific benchmark for apache spark , and includes four categories of applications from domains spanning graph computation and sql queries , with one on streaming applications supported by spark streaming .",
    "the benchmark metrics include cpu , memory , disk and network io , with the goal of identifying tuning parameters to improve spark s performance .",
    "cepben  @xcite evaluates the performance of cep systems based of the functional behavior of queries .",
    "it shows the degree of complexity of cep operations like filter , transform and pattern detection .",
    "the evaluation metrics consider event processing latency , but ignore network overheads and cpu utilization .",
    "further , cep applications rely on a declarative query syntax to match event patterns rather than a dataflow composition based on user - logic provided by dsps .    in contrast",
    ", the goal for this paper is to develop relevant micro- and application - level benchmarks for evaluating dsps , specifically for _ iot workloads _ for which such platforms are increasingly being used .",
    "our benchmark is designed to be _ platform - agnostic _ , _ simple _ to implement and execute within diverse dsps , and _ representative _ of both the application logic and data streams observed in iot domains .",
    "this allows for the performance of dsps to be independently and reproducibly verified for iot applications .",
    "there has been a slew of big data benchmarks that have been developed recently in the context of processing high volume ( i.e. , mapreduce - style ) and enterprise / web data that complement our work .",
    "_ hibench _",
    "@xcite is a workload suite for evaluating hadoop with popular micro - benchmarks like sort , wordcount and terasort , mapreduce applications like nutch indexing and pagerank , and machine learning algorithms like k - means clustering .",
    "_ bigdatabench _",
    "@xcite analyzes workloads from social network and search engines , and analytics algorithms like support vector machine ( svm ) over structured , semi - structured and unstructured web data .",
    "both these benchmarks are general purpose workloads that do not target any specific domain , but mapreduce platforms at large .",
    "_ bigbench _",
    "@xcite uses a synthetic data generator to simulate enterprise data found in online retail businesses .",
    "it combines structured data generation from the tpc - ds benchmark  @xcite , semi - structured data on user clicks , and unstructured data from online product reviews .",
    "queries cover data _ velocity _ by processing periodic refreshes that feed into the data store , _ variety _ by including free - text user reviews , and _ volume _ by querying over a large web log of clicks .",
    "we take a similar approach for benchmarking fast data platforms , targeting the iot domain specifically and using real public data streams .",
    "there has been some recent work on benchmarking iot applications .",
    "in particular , the generating large volumes of synthetic sensor data with realistic values is challenging , yet required for benchmarking . _",
    "iotabench _",
    "@xcite provides a scalable synthetic generator of time - series datasets .",
    "it uses a markov chain model for scaling the time series with a limited number of inputs such that important statistical properties of the stream is retained in the generated data .",
    "they have demonstrated this for smart meter data .",
    "the benchmark also includes six sql queries to evaluate the performance of different query platforms on the generated dataset .",
    "their emphasis is more on the data characteristics and content , which supplements our focus on the systems aspects of the executing platform .",
    "citybench  @xcite is a benchmark to evaluate rdf stream processing systems .",
    "they include different generation patterns for smart city data , such as traffic vehicles , parking , weather , pollution , cultural and library events , with changing event rates and playback speeds .",
    "they propose fixed set of semantic queries over this dataset , with concurrent execution of queries and sensor streams . here , the target platform is different ( rdf database ) , but in a spirit as our work .",
    "in this section , we review the common application composition capabilities of dsps , and the dimensions of the streaming applications that affect their performance on dsps .",
    "these semantics help define and describe streaming iot applications based on dsps capabilities . subsequently in this section , we also categorize iot tasks , applications and data streams based on the domain requirements . together , these offer a search space for defining workloads that meaningfully and comprehensively validate iot applications on dsps .",
    "dsps applications are commonly composed as a _ dataflow graph _ , where vertices are user provided _ tasks _ and directed edges are refer to _ streams of messages _ that can pass between them . the graph need not be acyclic .",
    "tasks in the dataflows can execute zero or more times , and a task execution usually depends on data - dependency semantics , i.e , when `` adequate '' inputs are available , the task executes . however , there are also more nuanced patterns that are supported by dsps that we discuss",
    ". _ messages _ ( or events or tuples ) from / to the stream are consumed / produced by the tasks .",
    "dsps typically treat the messages as opaque content , and only the user logic may interpret the message content .",
    "however , dsps may assign identifiers to messages for fault - tolerance and delivery guarantees , and some message attributes may be explicitly exposed as part of the application composition for the dsps to route messages to downstream tasks .",
    "_ selectivity ratio _ , also called _ gain _ , is the number of output messages emitted by a task on consuming a unit input message , expressed as @xmath1=_input rate_:_output rate_. based on this , one can assess whether a task amplifies or attenuates the incoming message rate .",
    "it is important to consider this while designing benchmarks as it can have a multiplicative impact on downstream tasks .",
    "there are message generation , consumption and routing semantics associated with tasks and their dataflow composition .",
    "[ fig : semantics ] captures the basic _ composition patterns _ supported by modern dsps .",
    "` source ` tasks have only outgoing edge(s ) , and these tasks encapsulate user logic to generate or receive the input messages that are passed to the dataflow . likewise , ` sink ` tasks have only incoming edge(s ) and these tasks react to the output messages from the application , say , by storing it or sending an external notification .    `",
    "transform ` tasks , sometimes called _ map _ tasks , generate one output message for every input message received ( @xmath2 ) .",
    "their user logic performs a transformation on the message , such as changing the units or projecting only a subset of attribute values . `",
    "filter ` tasks allow only a subset of messages that they receive to pass through , optionally performing a transformation on them ( @xmath3 , @xmath4 ) .",
    "conversely , a ` flatmap ` consumes one message and emits multiple messages ( @xmath5 ) .",
    "an ` aggregate ` pattern consumes a _ window _ of messages , with the window width provided as a _ count _ or a _ time _ duration , and generates one or more messages that is an aggregation over each message window ( @xmath6 ) .    when a task has multiple outgoing edges , routing semantics on the dataflow control if an output message is _ duplicated _ onto all the edges , or just one downstream task is selected for delivery , either based on a _ round robin _ behavior or using a _ hash function _ on an attribute in the outgoing message to decide the target task .",
    "similarly , multiple incoming streams arriving at a task may be _ merged _ into a single interleaved message stream for the task . or alternatively , the messages coming on each incoming stream may be conjugated , based on order of arrival or an attribute exposed in each message , to form a _ joined _ stream of messages",
    ". there are additional dimensions of the streaming dataflow that can determine its performance on a dsps .",
    "tasks may be _ data parallel _ , in which case , it may be allocated concurrent resources ( threads , cores ) to process messages in parallel by different instances the task .",
    "this is typically possible for tasks that do not maintain state across multiple messages .",
    "the _ number of tasks _ in the dataflow graph indicates the size of the streaming application .",
    "tasks are mapped to computing resources , and depending of their degree of parallelism and resource usage , it determines the cores / vms required for executing the application .",
    "the _ length of the dataflow _ is the latency of the critical ( i.e. , longest ) path through the dataflow graph , if the graph does not have cycles .",
    "this gives an estimate of the expected latency for each message and also influences the number of network hops a message on the critical path has to take in the cluster .",
    "we list a few characteristics of the input data streams that impact the runtime performance of streaming applications , and help classify iot message streams .",
    "the _ input throughput _ in messages / sec is the cumulative frequency at which messages enter the source tasks of the dataflow .",
    "input throughputs can vary by application domain , and are determined both by the number of streams of messages and their individual rates .",
    "this combined with the dataflow selectivity will impact the load on the dataflow and the output throughput .    _",
    "throughput distribution _ captures the variation of input throughput over time . in real - world settings ,",
    "the input data rate is usually not constant and dsps need to adapt to this .",
    "there may be several common data rate distributions besides a _ uniform _ one",
    ". there may be _ bursts _ of data coming from a single sensor , or a coordinated set of sensors . a _ saw - tooth _",
    "behavior may be seen in the ramp - up/-down before / after specific events . _",
    "normal _ distribution are seen with diurnal ( day vs. night ) stream sources , with _",
    "bi - modal _ variations capturing peaks during the morning and evening periods of human activity .",
    "lastly , the _ message size _ provides the average size of each message , in bytes .",
    "often , the messages sizes remain constant for structured messages arriving from specific sensor or observation types , but may vary for free - text input streams or those that interleave messages of different types .",
    "this size help assess the communication cost of transferring messages in the dataflow .",
    "iot covers a broad swathe of domains , many of which are rapidly developing .",
    "so , it is not possible to comprehensively capture all possible iot application scenarios .",
    "however , dsps have clear value in supporting the real - time processing , analytics , decision making and feedback that is intrinsic to most iot domains . here , we attempt to categorize these common processing and analytics tasks that are performed over real - time data streams",
    ".    * parse .",
    "* messages are encoded on the wire in a standard text - based or binary representation by the stream sources , and need to be parsed upon arrival at the application .",
    "text formats in particular require string parsing by the tasks , and are also larger in size on the wire .",
    "the tasks within the application may themselves retain the incoming format in their streams , or switch to another format or data model , say , by projecting a subset of the fields .",
    "industry - standard formats that are popular for iot domains include csv , xml and json text formats , and exi and cbor binary formats . *",
    "* messages may require to be filtered based on specific attribute values present in them , as part of data quality checks , to route a subset of message types to a part of the dataflow graph , or as part of their application logic .",
    "value and band - pass filters that test an attribute s _ numerical value ranges _ are common , and are both compact to model and fast to execute .",
    "since iot event rates may be high , more efficient bloom filters may also be used to process _ discrete values _ with low space complexity but with a small fraction of false positives .",
    "* statistical analytics . *",
    "groups of messages within a sequential time or count window of a stream may require to be aggregated as part of the application .",
    "the aggregation function may be _ common mathematical operations _ like average , count , minimum and maximum .",
    "they may also be _ higher order statistics _",
    "such finding outliers , quartiles , second and third order moments , and counts of distinct elements .",
    "data cleaning _ like linear interpolation or denoising using kalman filters are common for sensor - based data streams .",
    "some tasks may maintain just local state for the window width ( e.g. , local average ) while others may maintain state across windows ( e.g. , moving average )",
    ". when the state size grows , here again approximate aggregation algorithms may be used .",
    "* predictive analytics . * predicting future behavior of the system based on past and current messages is an important part of iot applications .",
    "various statistical and machine - learning algorithms may be employed for predictive analytics over sensor streams .",
    "the _ predictions _ may either use a recent window of messages to estimate the future values over a time or count horizon in future , or train models over streaming messages that are periodically used for predictions over the incoming messages .",
    "the _ training _ itself can be an online task that is part of an application . for e.g. , arima and linear regression use statistical methods to predict uni- or multi - variate attribute values , respectively .",
    "classification algorithms like decision trees , neural networks and nave bayes can be trained to map discrete values to a category , which may lead to specific actions taken on the system .",
    "external libraries like weka or statistical packages like r may be used by such tasks .",
    "* pattern detection . *",
    "another class of tasks are those that identify patterns of behavior over several events .",
    "unlike window aggregation which operate over static window sizes and perform a function over the values , pattern detection matches user - defined predicates on messages that may not be sequential or even span streams , and returned the matched messages .",
    "these are often modeled as _ state transition automata _ or _ query graphs_. common patterns include contiguous or non - contiguous sequence of messages with specific property on each message ( e.g. , high - low - high pattern over 3 messages ) , or a join over two streams based on a common attribute value .",
    "complex event processing ( cep ) engines  @xcite may be embedded within the dsps task to match these patterns .",
    "* visual analytics .",
    "* other than automated decision making , iot applications often generate _ charts and animations _ for consumption by end - users or system managers .",
    "these visual analytics may be performed either at the client , in which case the processed data stream is aggregated and provided to the users .",
    "alternatively , the streaming application may itself periodically generate such plots and visualizations as part of the dataflow , to be hosted on the web or pushed to the client .",
    "charting and visualization libraries like d3.js or jfreechart may be used for this purpose .",
    "* io operations . *",
    "lastly , the iot dataflow may need to access external storage or messaging services to access / push data into / out of the application .",
    "these may be to store or load trained models , archive incoming data streams , access historic data for aggregation and comparison , and subscribe to message streams or publish actions back to the system .",
    "these require access to _ file storage , sql and nosql databases , and publish - subscribe messaging systems_. often , these may be hosted as part of the cloud platforms themselves .",
    "the tasks from the above categories , along with other domain - specific tasks , are composed together to form streaming iot dataflows .",
    "these domain dataflows themselves fall into specific classes based on common use - case scenarios , and loosely map to the observe - orient - decide - act ( ooda ) phases .",
    "_ extract - transform - load ( etl ) and archival _ applications are front - line `` observation '' dataflows that receive and pre - process the data streams , and if necessary , archive a copy of the data offline .",
    "pre - processing may perform data format transformations , normalize the units of observations , data quality checks to remove invalid data , interpolate missing data items , and temporally reorder messages arriving from different streams .",
    "the pre - processed data may be archived to table storage , and passed onto subsequent dataflow for further analysis .",
    "_ summarization and visualization _",
    "applications perform statistical aggregation and analytics over the data streams to understand the behavior of the iot system at a coarser granularity . such summarization can give the high - level pulse of the system , and help `` orient '' the decision making to the current situation .",
    "these tasks are often succeeded by visualizations tasks in the dataflow to present it to end - users and decision makers .",
    "_ prediction and pattern detection _ applications help determine the future state of the iot system and `` decide '' if any reaction is required .",
    "they identify patterns of interest that may indicate the need for a correction , or trends based on current behavior that require preemptive actions .",
    "for e.g. , a trend that indicates an unsustainably growing load on a smart power grid may decide to preemptively shed load , or a detection that the heart - rate from a fitness watch is dangerously high may trigger a slowdown in physical activities .",
    "_ classification and notification _ applications determine specific `` actions '' that are required and communicate them to the iot system .",
    "decisions may be mapped to specific actions , and the entities in the iot system that can enact those be notified . for e.g. , the need for load shedding in the power grid may map to specific residents to request the curtailment from , or the need to reduce physical activities may lead to a treadmill being notified to reduce the speed .",
    "iot data streams are often generated by physical sensors that observe physical systems or the environment . as a result",
    ", they are typically time - series data that are generated periodically by the sensors . the sampling rate for these sensors may vary from once a day to hundreds per second , depending on the domain .",
    "the number of sensors themselves may vary from a few hundred to millions as well .",
    "iot applications like smart power grids can generate high frequency plug load data at thousands of messages / sec from a small cluster of residents , or low frequency data from a large set of sensors , such as in smart transportation or environmental sensing . as a result",
    ", we may encounter a wide range of input throughputs from @xmath7 to @xmath8 messages / sec . in comparison ,",
    "streaming web applications like twitter deal with @xmath9  tweets / sec from 300 m users .",
    "at the same time , this event rate itself may not be uniform across time .",
    "sensors may also be configured to emit data only when there is a change in observed value , rather than unnecessarily transmitting data that has not changed .",
    "this helps conserve network bandwidth and power for constrained devices when the observations are slow changing .",
    "further , if data freshness is not critical to the application , they may sample at high rate but transmit at low rates but in a burst mode .",
    "e.g. smart meters may collecting kwh data at 15  min intervals from millions of residents but report it to the utility only a few times a day , while the fitbit smart watch syncs with the cloud every few minutes or hours even as data is recorded every few seconds .",
    "message variability also comes into play when human - related activity is being tracked .",
    "diurnal or bimodal event rates are seen with single peaks in the afternoons , or dual peaks in the morning and evening .",
    "e.g. , sensors at businesses may match the former while traffic flow sensors may match the latter .",
    "there may also be a variety of observation types from the same sensor device , or different sensor devices generating messages .",
    "these may appear in the same message as different fields , or as different data streams .",
    "this will affect both the message rate and the message size .",
    "these sensors usually send well - formed messages rather than free - text messages , using standards like senml .",
    "hence their sizes are likely to be deterministic if the encoding format is not considered ",
    "text formats tend to bloat the size and also introduce size variability when mapping numbers to strings .",
    "however , social media like tweets and crowd - sourced data are occasionally used by iot applications , and these may have more variability in message sizes .",
    "we identify and formalize commonly - used quantitative performance measures for evaluating dsps for the iot workloads . *",
    "latency . *",
    "latency for a message that is generated by task is the time in seconds it took for that task to process one or more inputs to generate that message . if @xmath3 is the selectivity for a task @xmath10 , the time @xmath11 it took to consume @xmath12 messages to _ causally produce _",
    "those @xmath13 output messages is the latency of the @xmath13 messages , with the _ average latency _ per message given by @xmath14 . when we consider the average latency @xmath15 of the dataflow application , it is the average of the time difference between each message consumed at the source tasks and all its causally dependent messages generated at the sink tasks .",
    "the latency per message may vary depending on the input rate , resources allocated to the task , and the type of message being processed . while this task latency is the inverse of the mean throughput , the _ end - to - end latency _ for the task within a dataflow will also include the network and queuing time to receive a tuple and transmit it downstream .",
    "* throughput . *",
    "the output throughput is the aggregated rate of output messages emitted out of the sink tasks , measured in messages per second .",
    "the throughput of a dataflow depends on the input throughput and the selectivity of the dataflow , provided the resource allocation and performance of the dsps are adequate . ideally , the output throughput @xmath16 , where @xmath17 is the input throughput for a dataflow with selectivity @xmath1 .",
    "it is also useful to measure the _ peak throughput _ that can be supported by a given application , which is the maximum stable rate that can be processed using a fixed quanta of resources .",
    "both throughput and latency measurements are relevant only under",
    "_ stable conditions _ when the dsps can sustain a given input rate , i.e. , when the latency per message and queue size on the input buffer remain constant and do not increase unsustainably .",
    "* the ideal output throughput may deviate due to variable rate of the input streams , change in the paths taken by the input stream through the dataflow ( e.g. , at a ` hash ` pattern ) , or performance variability of the dsps .",
    "we use jitter to track the variation in the output throughput from the expected output throughput , defined for a time interval @xmath18 as , @xmath19 where the numerator is the observed difference between the expected and actual output rate during interval @xmath18 , and the denominator is the expected long term average output rate given a long - term average input rate @xmath20 . in an ideal case , jitter will tend towards zero .    *",
    "cpu and memory utilization .",
    "* streaming iot dataflows are expected to be resource intensive , and the ability of the dsps to use the distributed resources efficiently with minimal overhead is important .",
    "this also affects the vm resources and consequent price to be paid to run the application using the given stream processing platform .",
    "we track the cpu and memory utilization for the dataflow as the average of the cpu and memory utilization across all the vms that are being used by the dataflow s tasks .",
    "the per - vm information can also help identify which vms hosting which tasks are the potential bottlenecks , and can benefit from data - parallel scale - out .",
    "we propose benchmark workloads to help evaluate the metrics discussed before for various dsps .",
    "these benchmarks are in particular targeted for emerging iot applications , to help them distinguish the capabilities of contemporary dsps on cloud computing infrastructure .",
    "the benchmarks themselves have two parts , the dataflow logic that is executed on the dsps and the input data streams that they are executed for .",
    "we next discuss our choices for both .",
    "we have identified two real - world iot data streams available in the public domain as candidates for our benchmarking workload .",
    "these correspond to smart cities domain , which a fast - growing space within iot .",
    "their features are shown in table  [ tbl : datasets ] and event rate distribution in fig .",
    "[ fig : data - distribution ] .",
    ".smart cities data stream features and rates at @xmath21 scaling [ cols=\"^,^,^,^,^,^,^\",options=\"header \" , ]     [ tbl : tasts ]    we include a single xml parser as a representative parsing operation within our suite .",
    "the bloom filter is a more practical filter operation for large discrete datasets , and we prefer that to a simple value range filter .",
    "we have several statistical analytics and aggregation tasks .",
    "these span simple averaging over a single attribute value to and second order moments over time - series values , to kalman filter for denoising of sensor data and approximate count of distinct values for large discrete attribute values .",
    "predictive analytics using a multi - variate linear regression model that is trained offline and a sliding window univariate model that is trained online are included",
    ". a decision tree machine learning for discrete attribute values is also used for classification , based on offline training .",
    "lastly , we have several io tasks for reading and writing to cloud file and nosql storage , and to publish to an mqtt publish - subscribe broker for notifications . due to limited space , we skip pattern matching and visual analytics task categories .    a micro - benchmark dataflow is composed for each of these tasks as a sequence of a source task , the benchmark task and a sink task .",
    "as can be seen , these tasks also capture different dataflow patterns such as transform , filter , aggregate , flat map , source and sink .",
    "application benchmarks are valuable in understanding how non - trivial and meaningful iot applications behave on dsps .",
    "application dataflows for a domain are most representative when they are constructed based on real or realistic application logic , rather than synthetic tasks . in case applications use highly - custom logic or proprietary libraries , this may not be feasible or reusable as a community benchmark .",
    "however , many of the common iot tasks we have proposed earlier are naturally composable into application benchmarks that satisfy the requirements of a ooda decision making loop .",
    "we propose application benchmarks that capture two common iot scenarios : a _ data pre - processing and statistical summarization ( stats ) _ application and a _ predictive analytics ( pred ) _ application",
    ". stats ( fig .",
    "[ fig : app - stats ] ) ingests incoming data streams , performs data filtering of outliers on individual observation types using a bloom filter , and then does three concurrent types of statistical analytics on observations from individual sensor / taxi ids : sliding average over a @xmath22 event window for city / taxi ( @xmath23  mins native time window ) , kalman filter for smoothing followed by a sliding window linear regression , and an approximate count of distinct readings .",
    "the outcomes from these statistics are published by an mqtt task , which can separately be subscribed to and visualized on a client browser or a mobile app .",
    "the dummy sink task is used for logging .",
    "+    the pred dataflow captures the lifecycle of online prediction and classification to drive visualization and decision making for iot applications .",
    "it parses incoming messages and forks it to a decision tree classifier and a multi - variate regression task .",
    "the decision tree uses a trained model to classify messages into classes , such as good , average or poor air quality , based on one or more of their attribute values .",
    "the linear regression uses a trained model to predict an attribute value in the message using several others .",
    "it then estimates the error @xmath24 between the predicted and observed value , normalized by the sliding average of the observations .",
    "these outputs are then grouped and plotted , and the output file written to cloud storage for hosting on a portal .",
    "one realistic addition is the use of a separate stream to periodically download newly trained classification and regression models from cloud storage , and push them to the prediction tasks .    as such , these applications leverage many of the compositional capabilities of dsps .",
    "the dataflows include _ single and dual sources _ , tasks that are _ composed sequentially and in parallel _ , _ stateful and stateless _ tasks , and _ data parallel tasks _ allowing for concurrent instances .",
    "each message in the city and taxi streams contains multiple observation fields , but several of these tasks are applicable only on univariate streams and some are meaningful only from time - series data from individual sources .",
    "thus , the initial parse task for stats uses a _",
    "flat map _ pattern ( @xmath5 ) to create observation - specific streams early on .",
    "these streams are further passed to task instances , grouped by their observation type and optionally their sensor i d using a _ hash pattern_.",
    "we implement the 13 micro - benchmarks as generic java tasks that can consume and produce objects .",
    "these tasks are building blocks that can be composed into micro - dataflows and the stats and pred dataflows using any dsps that is being benchmarked . to validate our proposed benchmark , we compose these dataflows on the apache storm open source dsps , popular for fast - data processing , using its java apis .",
    "we then run these for the two stream workloads and evaluate them based on the metrics we have defined .",
    "the benchmark is available online at ` https://github.com/dream-lab/bm-iot ` .    in storm ,",
    "each task logic is wrapped by a _ bolt _ that invokes the task for each incoming tuple and emits zero or more response tuples downstream .",
    "the dataflow is composed as a _",
    "topology _ that defines the edges between the bolts , and the _ groupings _ which determine duplicate or hash semantics .",
    "we have implemented a scalable data - parallel event generator that acts as a source task ( _ spout _ ) .",
    "it loads time - series tuples from a given csv file and replays them as an input stream to the dataflow  at a constant rate , at the maximum possible rate , or at intervals determined by the timestamps , optionally scaled to go faster or slower .",
    "we generate random integers as tuples at maximum rate for the micro - benchmarks , and replay the original city and taxi datasets at @xmath21 their native rates for the application benchmarks , following the earlier distribution .",
    "we use apache storm @xmath25 running on openjdk 1.7 , and hosted on _ centos _ virtual machines ( vms ) in the singapore data center of microsoft azure public cloud . for the micro - benchmarks , storm runs the task being benchmarked on one exclusive ` d1 ` size vm ( @xmath26 intel xeon e5 - 2660 core at 2.2  ghz , @xmath27  gib ram , @xmath28  gib ssd ) , while the supporting source and sink tasks and the master service run on a ` d8 ` size vm ( @xmath29 intel xeon e5 - 2660 core at 2.2  ghz cores , @xmath30  gib ram , @xmath31  gib ssd ) .",
    "the larger vm for the supporting tasks and services ensures that they are not the bottleneck , and helps benchmark the peak rate supported by the micro - benchmark task on a single core vm .    for the stats and pred application benchmark",
    ", we use ` d8 `  vms for all the tasks of the dataflow , while reserving additional ` d8 `  vms to exclusively run the spout and sink tasks , and master service .",
    "we determine the number of cores and data parallelism required by each task based on the peak rate supported by the task on a single core as given by the micro - benchmarks , and the peak rate seen by that task for a given dataflow application and stream workload . in some cases that are i / o bound ( e.g. , mqtt , azure storage ) rather than cpu bound",
    ", we run multiple task instances on a single core .",
    "we log the i d and timestamp for each message at the source and the sink tasks in - memory to calculate the latency , throughput and jitter metrics , after correcting for skews in timestamps across vms .",
    "we also sample the cpu and memory usage on all vms every 5  secs to plot the utilization metrics .",
    "each experiment runs for @xmath32  mins of wallclock time that translates to about @xmath33  days of event data for the city and taxi datasets at @xmath21 scaling  ] .",
    "[ fig : storm : micro : bm ] shows plots of the different metrics evaluated for the micro - benchmark tasks on storm when running at their peak input rate supported on a single ` d1 ` vm with one thread .",
    "the _ peak sustained throughput _ per task is shown in fig .",
    "[ fig : storm : micro : peakthru ] in _ log - scale_. we see that most tasks can support @xmath34  msg / sec or higher rate , going up to @xmath35  msg / sec for blf , kal and dac .",
    "xml parsing is highly cpu bound and has a peak throughput of only @xmath36  msg / sec , and the azure operations are i / o bound on the cloud service and even slower .",
    "the inverse of the peak sustained throughput gives the _",
    "mean latency_. however , it is interesting to examine the _ end - to - end latency _ , calculated as the time taken between emitting a message from the source , having it pass through the benchmarked task , and arrive at the sink task .",
    "this is the effective time contributed to the total tuple latency by this task running within storm , including framework overheads .",
    "we see that while the mean latencies should be in sub - milliseconds for the observed throughputs , the box plot for end - to - end latency ( fig .",
    "[ fig : storm : micro : latency ] ) varies widely up to @xmath37  ms for q3 .",
    "this wide variability could be because of non - uniform task execution times due to which slow executions queue up incoming tuples that suffer higher queuing time , such as for dtc and mlr that both use the weka library . or tasks supporting a high input rate in the order of @xmath38  msg / sec , such as dac and kal , may be more sensitive to even small per - tuple overhead of the framework , say , caused by thread contention between the storm system and worker threads , or queue synchronization .",
    "the azure tasks that have a lower throughput also have a higher end - to - end latency , but much of which is attributable directly to the task latency .",
    "+    the box - plot for _ jitter _ ( fig .",
    "[ fig : storm : micro : jitter ] ) shows values close to zero in all cases .",
    "this indicates the long - term stability of storm in processing the tasks at peak rate , without unsustainable queuing of input messages .",
    "the wider whiskers indicate the occasional mismatch between the expected and observed output rates .",
    "the box plots for cpu utilization ( fig .",
    "[ fig : storm : micro : cpu ] ) shows the single - core vm effectively used at @xmath39 or above in all cases except for the azure tasks that are i / o bound . the memory utilization ( fig .",
    "[ fig : storm : micro : mem ] ) appears to be higher for tasks that support a high throughput , potentially indicating the memory consumed by messages waiting in queue rather than consumed by the task logic itself .",
    "+    the stats and pred application benchmarks are run for the city and taxi workloads at @xmath21 their native rates , and the performance plots shown in fig .",
    "[ fig : apps ] .",
    "the end - to - end latencies of the applications depend on the sum of the end - to - end latencies of each task in the critical path of the dataflow .",
    "the peak rates supported by the tasks in stats is much higher than the input rates of city and taxi .",
    "so the latency box plot for stats is tightly bound ( fig .",
    "[ fig : storm : stats : latency ] ) and its median much lower at @xmath40  ms compared to the end - to - end latency of the tasks at their peak rates .",
    "the jitter is also close to zero in all cases .",
    "so storm can comfortably support stats for city and taxi on 7 and 5 vms , respectively .",
    "the distribution of vm cpu utilization is also modest for stats .",
    "city has a @xmath41 median with a narrow box ( fig .",
    "[ fig : storm : stats : city : cpu ] ) , while taxi has a low @xmath42 median with a wide box ( fig .",
    "[ fig : storm : stats : taxi : cpu ] )  this is due to its bi - modal distribution with low input rates at nights , with lower utilization , and high in the day with higher utilization .    for the pred application , we see that the latency box plot is much wider , and the median end - to - end latency is between @xmath43  ms for city and taxi ( fig .",
    "[ fig : storm : pred : latency ] ) .",
    "this reflects the variability in task execution times for the weka tasks , dtc and mlr , which was observed in the micro - benchmarks too .",
    "the azure blob upload also adds to the absolute increase in the end - to - end time .",
    "the jitter however remains close to zero , indicating sustainable performance .",
    "the cpu utilization is also higher for pred , reflecting the more complex task logic present in this application relative to stats .",
    "in this paper , we have proposed a novel application benchmark for evaluating distributed stream processing systems ( dsps ) for the internet of things ( iot ) domain .",
    "fast data platforms like dsps are integral for the rapid decision making needs of iot applications , and our proposed workload helps evaluate their efficacy using common tasks found in iot applications , as well as fully - functional applications for statistical summarization and predictive analytics .",
    "these are combined with two real - world data streams from smart transportation and urban monitoring domains of iot .",
    "the proposed benchmark has been validated for the highly - popular apache storm dsps , and the performance metrics presented .    as future work , we propose to add further depth to some of the iot task categories such as parsing and analytics , and also add two further applications on archiving real - time data and detecting online patterns .",
    "we also plan to include more data stream workloads having different temporal distributions and from other iot domains , with a possible generalization of the distributions to allow for synthetic data generation .",
    "the benchmark can also be used to evaluate other popular dsps such as apache spark streaming .",
    "we acknowledge detailed inputs provided by tarun sharma of nvidia corp . and formerly from iisc in preparing this paper .",
    "the experiments on microsoft azure were supported through a grant from azure for research ."
  ],
  "abstract_text": [
    "<S> internet of things ( iot ) is a technology paradigm where millions of sensors monitor , and help inform or manage , physical , environmental and human systems in real - time . </S>",
    "<S> the inherent closed - loop responsiveness and decision making of iot applications makes them ideal candidates for using low latency and scalable stream processing platforms . </S>",
    "<S> distributed stream processing systems ( dsps ) are becoming essential components of any iot stack , but the efficacy and performance of contemporary dsps have not been rigorously studied for iot data streams and applications . here , we develop a benchmark suite and performance metrics to evaluate dsps for streaming iot applications . </S>",
    "<S> the benchmark includes @xmath0 common iot tasks classified across various functional categories and forming micro - benchmarks , and two iot applications for statistical summarization and predictive analytics that leverage various dataflow compositional features of dsps . </S>",
    "<S> these are coupled with stream workloads sourced from real iot observations from smart cities . </S>",
    "<S> we validate the iot benchmark for the popular apache storm dsps , and present empirical results . </S>"
  ]
}