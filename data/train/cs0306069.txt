{
  "article_text": [
    "is an experiment built primarily to study b - physics at an asymmetric high luminosity electron positron collider ( pep - ii ) at the stanford linear accelerator center ( slac ) .",
    "it is an international collaboration involving 560 physicists from 76 institutions in 10 countries .",
    "has been taking data since may 1999 and is currently in the middle of `` run3 '' , which will run through june 2003 .",
    "to date it has collected about @xmath2 of data which corresponds to about 1.1 billion fully reconstructed events .",
    "it is expected that the data sample will increase to the order of @xmath3 by the end of 2006 .",
    "a diagram outlining the data storage and processing system is shown in figure  [ data_path ] .",
    "the raw data coming from the  detector ( located at interaction region 2 ( ir2 ) ) and filtered through a l3 trigger are written to flat files , called xtc ( extended tagged container ) files which are stored in a mass storage ( hpss ) system shortly after production .",
    "the size of the raw data per event is about @xmath4 .",
    "the average size for an xtc file is about @xmath5 , containing about 300,000 events . in the past",
    "we have written files containing up to @xmath6 events .    each xtc file",
    "contains all the events taken for a single run of the collider and all the events of a single xtc file are processed together .",
    "we record more data than we fully process .",
    "all but 35 - 40%  of the events in the xtc file are rejected by dedicated filters early in the reconstruction executable before full reconstruction is performed .",
    "the data is processed in a two pass prompt reconstruction ( pr ) system , described in detail in section  [ twopass ] .",
    "the xtc files are read twice , once to calculate the calibrations and then to fully reconstruct the data .",
    "the fully reconstructed physical quantities are written into an object database ( objectivity / db  @xcite ) .",
    "the processed data is then transfered to a separate database where users can access it  @xcite .",
    "the output of the reconstruction is written to an event - store database .",
    "the following quantities can be written , per event : tag , micro , mini , reco and raw .",
    "the tag and micro quantities contain the highest level information about the reconstructed event",
    ". the tag information records simple event selection criteria , such as number of charged tracks in the event .",
    "the micro includes standard information about the event and reconstructed tracks and composites .",
    "these two quantities have been the primary format used for analysis in .",
    "the mini and reco level contain more detailed information about the reconstructed candidates in the event in order to allow users to redo some of the reconstruction if needed . at the end of 2001",
    "we deprecated writing the reco level information ( @xmath7+/event ) to the event - store .",
    "it s function will be largely replaced by a redesigned mini  @xcite .    in summer 2002",
    "we also deprecated writing a copy of the raw data to the event - store ( @xmath8/event ) .",
    "the original purpose of writing the raw data was to enable reprocessing directly from the event - store database instead of from the xtc files , but this was never pursued .",
    "the current output size per event in the event - store ( tag / micro / mini ) is about @xmath9 .",
    "physics selections are run as part of the reconstruction and currently 4 physical streams are written to the event - store along with 111 pointer skims .",
    "this pre - selects events in categories useful for physics analysis and enables the user to easily run only on a specific subset of the data .",
    "the objectivity / db database that stores the reconstructed data can contain runs processed more than once with different software versions or different calibrations or just because something went wrong the previous time .    the reconstructed events for each run are organized inside the database in collections .",
    "there are 115 collections per run , one for each output skim or stream .",
    "the collection name is constructed to contain all the unique information about the collection ; the stream name , the software release version used to process the data , and the run number .",
    "this is an example :    /groups / allevents/0001/3000/p12.3.4av06fb /00013026/cb001/allevents .",
    "`` allevents '' specifies one of the physical streams which contains all events which pass a loose physics selection .",
    "p12.3.4av06 specifies the release used ( `` 12.3.4a '' ) , that it was a production release ( leading `` p '' ) , and that the run has been processed 7 times ( `` v06 '' ) .",
    "the run number is for this run is 13026 .      as in any active experiment the data reconstruction algorithms and the detector calibrations",
    "are continuously being improved as our understanding of the detector increases . in order for the physics measurements to benefit from these improvements",
    "it is necessity to reprocess the accumulated data set each year from the raw ( xtc ) files .",
    "the total throughput needed for reprocessing may actually exceed that needed for processing new data .",
    "the capacity needed is defined by the time a stable reconstruction executable becomes available and , the deadline by which data must be reprocessed ( e.g. for analysis in time for specific conferences ) , and the current data sample .",
    "scaling for reprocessing can be accomplished by breaking the conditions time - line into separate intervals and creating a separate instance of the two - pass pr system for each time interval .",
    "the calibrations are then calculated within each separate interval and the separate run ranges can be processed in parallel .",
    "a sophisticated book - keeping system , based on a relational sql database ( oracle  @xcite or mysql  @xcite ) , keeps track of all processing and reprocessing jobs .",
    "it records the date , time , software release , and calibration used for that ( re)processing of the data , as well as other statistical quantities .",
    "given the large number of events per run ( xtc file ) it is not practical to process the entire run on a single cpu , thus a parallel processing architecture has been implemented . as described in detail below , a central server reads the events from the xtc file and distributes them to a set of client processes .",
    "one processing farm consists of a main server , a number of farm nodes , and a number of objectivity / db servers .",
    "the main server has a large local ( scsi ) disk ( @xmath10 ) where the xtc files are staged and logfiles are written to with a gigabit network connection .",
    "the nodes are currently dual - processor linux boxes with a fast - ethernet network connection .",
    "the objectivity / db servers are solaris machines at slac , and linux machines in padova , which include a lockserver , journal server and a datamover with 1 tb raid arrays to store the processed events or calibrations .",
    "figure  [ farm ] gives a rough picture of an er processing farm .",
    "special software developed by  called the logging manager ( lm )  [ lm - ref ] runs on a dedicated machine ( the main server ) , reads the events sequentially from a single xtc file and then distributes them in parallel to many hosts ( dual processor nodes ) . on a single node two instances of the reconstruction code ( elf ) request events from the lm through tcp / ip , process them and write the output to the event - store database .",
    "the lm keeps track of the events sent to each elf and if an elf crashes without processing them or committing them to the event - store it can resubmit these events to another elf .",
    "the lm makes sure that each event in the xtc file is processed and written out once and only once .",
    "if an elf crashes while processing a particular event , that event is tagged , by the lm , as a `` killer event '' and not redistributed to the other elves .",
    "these `` killer events '' are usually due to problems in the reconstruction code which can not handle events with certain components .",
    "these problems are monitored for and fixed with new releases of the reconstruction code .",
    "the reconstruction code ( elf ) runs locally on the nodes .",
    "while processing the first event assigned to it by the lm , each elf reads calibrations from the conditions database .",
    "as the events are processed , it stores them in a memory buffer on the node ; when the buffer is full elf flushes everything into the event - store database and then requests new events from the lm ..    the number of events stored in the buffer before writing into the event - store is tuned by two parameters : a memory cache size and a commit time interval . since all the nodes in a farm ( 60 - 80 nodes ) all",
    "write to the same event - store database the commit time is made as random as possible , to avoid collisions between multiple nodes trying to write to the same area in the database .",
    "the objectivity / db event - store database into which elf writes the events consists of database files managed by a general catalog .",
    "the databases , the catalog and other metadata files , are hosted by dedicated machines ( called `` datamovers '' ) and are accessible via an object oriented engine provided by objectivity / db in collaboration with slac : the ams server .",
    "different database files correspond to different categories of data : raw data , particle tracks , kind of physics , skims , metadata , collections , etc .",
    "internally , a single database file is organized by containers ( the smallest lockable unit inside the database ) .    before elf flushes its cache into the event - store",
    ", it asks for containers to write into ( which can belong to different database files ) and locks them ( using a special lock server provided by objectivity / db ) .",
    "this operation is done by many clients and is fairly frequent and can easily constitute a bottleneck , unless the commit time interval is properly chosen as explained in the previous paragraph .    to help with this problem slac software engineers wrote a clustering hint server ( chs ) on top of the objectivity / db system .",
    "the chs is a deamon running on a dedicated machine which continuously communicates with the ams server and scans the event - store federation .",
    "it keeps in memory all the container addresses , analogous to a huge hash table .",
    "before elf writes events into the event - store it asks the chs for a free container which the chs provides very quickly .",
    "the chs also pre - creates database files in the background when the existing ones are almost full ( each database file has a maximum size fixed to @xmath11 ) , and creates their internal containers ; so elf always has free containers available to write into .",
    "all low - level components described above ( e.g. lm , elf ) are controlled by a high level control system ( cs ) .",
    "its task is to start / stop all the low - level executables , submit runs for reconstruction , update the bookkeeping database , report to the shifters the processing status in run - time , send emails and pages to experts and shifters in case of errors or anomalies , and produce histograms of some reconstructed detector and physics quantities for data quality assurance .",
    "the original version of the cs was developed incrementally and used very successfully during the first three years of data taking .",
    "the old cs architecture was client - server based , see  @xcite for a detailed discussion of the architecture .    for the fourth year of data taking it",
    "was decided to redesign the cs , building upon the experience of the first three years .",
    "the old control system was developed during production where solutions to new problems needed to be fixed in the quickest way possible , which is not usually the best or cleanest way .",
    "( see  @xcite for a discussion of the challenges in the first year of running . )",
    "this produced a fully functional system which met all the requirements of the experiment but also left many things implemented in a non - optimal way and made additional changes increasingly difficult to implement .",
    "the new control system is described in detail in  @xcite .",
    "its tasks are clearly the same as for the old control system , but it uses a distributed architecture and is built in a fully modular and extensible way",
    ". this modular framework allows for easy addition or reconfiguration of the cs , the necessity for which was found to be quite common in an active experiment .",
    "during the first three years of running the calibration and reconstruction were done at the same time in a one pass system .",
    "this placed constraints on the system which were not scalable and produced non - optimally calibrated data . for the fourth year of running",
    "it was decided to change to a more classical two pass calibration and reconstruction system .      through the end of the last run period , july 2002 ,",
    "the reconstruction and calibration were performed in a single processing pass of the data .",
    "the runs had to be processed in the order they were taken since the ` rolling calibrations ' ( rc ) , which track changes in the detector conditions with time , were calculated during the processing of the run .",
    "most detector conditions change slowly and therefore information over a few runs ( one run corresponds to about one hour of data taking ) were combined to obtain enough statistics to make a good calculation .",
    "reconstructed events were written to the event - store database continuously during processing , while the rc were written to the conditions database at the end of the run .",
    "as  steadily increased its delivered luminosity and the reconstruction software increased in complexity , the processing time for a run became comparable or greater to the time taken to collect the data .",
    "the size of the farms ( number of clients ) could not scale to keep up with the incoming data .",
    "this was partly due to constraints from the event - store but also because managing a large number of clients ( @xmath12 ) posed its own problems .",
    "it became clear that this model would not scale sufficiently for the lifetime of the experiment .",
    "another disadvantage of the one pass system was that that the rc calculated during the reconstruction of run n were used as input to the reconstruction of run n+1 , not run n. this did not provide the optimal calibration for detector quantities that can change quickly .",
    "an advantage of this system was that the raw data only needed to be processed once .",
    "this avoided overhead ( cpu and i / o ) from multiple passes .      for the fourth year of data taking",
    "has adopted a two pass calibration and reconstruction system , figure  [ two_pass ] .",
    "the first pass , ` prompt calibration ' ( pc ) , processes only a fraction ( @xmath13 fixed rate ) of events in a run and writes out only the resulting conditions .",
    "it does not write to the event store .",
    "the second pass , ` event reconstruction ' ( er ) , processes all selected events in a run , reading the conditions written by the pc pass , and writes the reconstructed events to the event - store .",
    "the pc pass must process all runs in the order they were taken , as in the old one pass system , since it generates ` rolling calibrations ' ( rc ) .",
    "the rc are written to the conditions federation at the end of processing run n , with a validity period starting at the beginning of run n.    the rc are then transfered from the pc conditions database to the er conditions database .",
    "runs can be processed in any order in the er farm as long as the corresponding rc are present for that run . in this way",
    "run n is processed with the rc derived from run n , which provides the best reconstruction .        since ,",
    "in the pc pass , not all the events are processed , only enough to do the calibrations , the processing time is much less than the time needed to collect the data . in the current configuration , using 32 nodes , we are able to process the runs in about a half the time it takes to collect the data ( @xmath14 vs. @xmath15 a day ) . the number of events needed for the calibration will not scale with luminosity , and therefore as the instantaneous luminosity increases the processing time for the runs will stay almost constant .",
    "since the er pass does not need to process the runs in order , runs calibrated in the same pc farm can be processed by one or more er farms .",
    "all that is needed is that the rc be transfered to the appropriate farm(s ) .",
    "this system is much more scalable than the one pass system .",
    "it combines a quick first pass which also provides prompt monitoring of the data quality with a full reconstruction pass that can be shared between more than one farm .",
    "see section  [ numbers ] for more details on the performance .",
    "in 2001 the padova infn site agreed to build a data reprocessing center to help slac reprocess all the data collected in run1 , run2 , run3 ( and future runs ) . to realize such a reprocessing center all the software running at slac has been ported to a different platform ( from solaris to linux ) and site ( different architecture of the farms , i.e. nfs usage",
    "is strongly reduced ) .",
    "the most important issues are discussed below , although not many technical details are described .",
    "when padova started running the reprocessing in september 2002 the new control system mentioned above was still being tested at slac and so it was decided not to port it to padova right away , but rather run with the old control system in padova .",
    "the old control system scripts were strongly site - dependent .",
    "much work was done to remove hardwired paths for directories and configurations and to make data storage directories also site - independent .",
    "the bookkeeping ( relational ) database sql queries also needed to be ported since slac uses oracle and padova uses mysql .",
    "the two engines have many differences in sql statements and native functions , especially when it comes to manipulating dates and times .",
    "the data retrieval script which interfaces to the tape library had to be basically rewritten since the tape system in padova was quite different than the one at slac ( hpss ) .",
    "all of the servers at slac are solaris ( sparc ) machines while padova has only linux ( intel ) machines to capitalize on the ready availability of low price but high speed machines .",
    "this meant that all code to run the reconstruction and communicate with the objectivity / db databases had to be ported to linux .",
    "this brought to light many problems , such as some c++ components which had endianess problems ( intel has a little endian for binary data , sparc has a big endian ) .",
    "this affected the logging manager and elf .",
    "problems were also found related to different file system behavior between linux ext3 and solaris ufs , especially when the objectivity / db databases are created and pre - sized with internal empty space ( technically a `` hole - file '' ) .",
    "large file support in the linux system was also an issue .",
    "many system packages from the standard red hat distribution had to be recompiled in padova to handle files larger that @xmath16 .",
    "also some   configuration software had to be modified to support large files under linux .",
    "many tests also had to be made to understand objectivity / db performance under linux and many problem had to be solved .",
    "furthermore , a good objectivity / db administration know - how was acquired at the padova site .",
    "a system to import all the xtc files has been completely home - made .",
    "several multi - stream ftp - like tools were tested , and bbcp  [ bbcp - ref ] is now used in production by the import system .    as time went by , some updating was necessary to optimize import times , and to match the rising cartridges administration demand .",
    "a web form has been developed to provide information about the import status , cartridge information and mapping between xtc file and cartridges .",
    "initially the network performance was slow and compressing / decompressing operations made the import faster but that is not currently necessary .",
    "currently , at any one time , the system is staging in an xtc file at slac , importing up to three xtc files , in parallel , into a local buffer area in padova with a transfer rate of about 100 mbits / sec , and archiving one xtc file into the tape - library in padova .",
    "each independent part of the system runs continuously .",
    "when an error happens , it retries at periodic time intervals , and when it still can not succeed it finally sends a notification via e - mail .",
    "the xtc setup and recovery after problems is fully automated and requires as little human intervention as possible .",
    "padova has developed a custom monitoring system for the computing farms .",
    "it runs in the background on a dedicated machine , and uses the simple network management protocol ( snmp ) to query the status of each device on the farm .",
    "system administrators must provide the monitor with an xml configuration file containing the list of devices to monitor .",
    "the monitoring system dynamically produces xml documents listing the status of each device ; moreover , it can also create graphs showing the value of different monitored quantities as a function of time .",
    "users can display status information by connecting to the web server which is embedded into the monitor .",
    "the quantities monitored are : cpu temperature , user and system cpu usage , memory usage , disk i / o and network i / o . figure  [ monitor ] shows the monitoring graph for one of the main server machines in padova .",
    "a system for exporting reprocessed data in objectivity / db format to slac ( and possibly other sites ) has been developed in padova .",
    "this consists of a set of perl scripts implementing a finite state machine .    at the end of each production cycle ( one week )",
    "production is stopped , all databases are closed , then copied / attached to a qa federation where they are checked for corruption , and then eventually transferred to the remote site ( slac ) . at every step a relational database ( mysql ) is updated with the status of each database file .",
    "the configuration used for  run3 processing and reprocessing is as follows :    * 3 pc farms at slac * * about 32 1.4ghz ( pentium iii ) cpus each * * 1 for the new data * * 2 for reprocessing * 5 er farms at slac * * about 64 1.4ghz ( pentium iii ) cpus each * * 2 for the new data * * 3 for reprocessing * 4 er farms in padova * * about 80 1.26ghz ( pentium iii ) cpus each * * all 4 for reprocessing    as discussed earlier in this paper , one pc farm can provide the calibrations for multiple er farms .",
    "currently one pc farm feeds two er farms for the new data processing ; one pc farm feeds three er farms for the reprocessing at slac ; and one pc farm feeds four er farms for the reprocessing in padova .",
    "this is a distributed system .",
    "not only are we transferring conditions locally at slac between the pc and er farms , but also between a pc farm at slac and the er farms in padova .    in the current setup",
    "each pc farm can process up to @xmath14 per day while each er farm can do about @xmath17 .",
    "both types of farms have significant deadtime between runs . for the pc farms this deadtime comes from the calculation of the rc at the end of the run and the writing to the conditions database .",
    "for the er farms the deadtime is bigger and mainly due to overhead from setting up and then cleaning up the objectivity / db event - store database . to optimize the cpu usage , monte carlo ( mc ) production jobs are run in the background with a large nice value .",
    "therefore during the down time between runs and any other longer down time the mc jobs take over the cpus , while during processing they do not impact the elf processing jobs .",
    "this deadtime is not all irreducible and therefore allows room for improvement of the production rate . for the newly collected data we expect the pc pass to be done within 8 to 10 hours and the er pass within 24 hours .",
    "figures  [ pcrate ] and  [ errate ] show the pc and er pass ( input ) processing rates over a 24 hour period .              the control system and related activities are still being constantly improved . in this first year of running with the new control system many new features",
    "were added as needed and further additions or changes are anticipated to optimize the performance and increase the ease of operation .",
    "the goal is to have a stable system which needs as little human intervention as possible .",
    "there is a constant struggle to make sure that the appropriate monitoring is available to spot problems with reconstruction and calibrations .",
    "this often requires additions to the validation aspect of the control system when a new problem is found , but input from detector subsystems on the data quality is very important .    we have had a number of problems with data corruption , which meant that a subset of the reprocessing had to be redone .",
    "some corruption was due to hardware problems and some due to objectivity / db implementation .",
    "although what was mainly discussed in this paper was the data processing or reprocessing , there is another step before the data is available to the physics analysis users .",
    "the data written to the dedicated production servers is migrated to the mass storage system and also must be `` swept '' to dedicated analysis servers . due to current limitations of the bdb / objectivity / db event - store implementation",
    ", data is not available for up to 10 days after it is processed .",
    "the  prompt reconstruction system is used for processing of new data and reprocessing of the data set . in the current year of running",
    "we have moved from a single pass architecture to a two pass , calibration and reconstruction system .",
    "this provides better calibrated data and allows for further scaling to keep up with increases in the total data set .",
    "t. glanzman et al .",
    ", `` the babar prompt reconstruction system , or getting the results out fast : an evaluation of nine months experience operating a near real - time bulk data production system '' , chep2000 , padova ( italy ) 7 - 11 february 2000 ."
  ],
  "abstract_text": [
    "<S> the  experiment at slac is in its fourth year of running . the data processing system has been continuously evolving to meet the challenges of higher luminosity running and the increasing bulk of data to re - process each year . to meet these goals </S>",
    "<S> a two - pass processing architecture has been adopted , where rolling calibrations are quickly calculated on a small fraction of the events in the first pass and the bulk data reconstruction done in the second . </S>",
    "<S> this allows for quick detector feedback in the first pass and allows for the parallelization of the second pass over two or more separate farms . </S>",
    "<S> this two - pass system allows also for distribution of processing farms off - site . </S>",
    "<S> the first such site has been setup at infn padova . </S>",
    "<S> the challenges met here were many . </S>",
    "<S> the software was ported to a full linux - based , commodity hardware system . </S>",
    "<S> the raw dataset , 90 @xmath0 , was imported from slac utilizing a 155 @xmath1 network link . </S>",
    "<S> a system for quality control and export of the processed data back to slac was developed . between slac and padova </S>",
    "<S> we are currently running three pass - one farms , with 32 cpus each , and nine pass - two farms with 64 to 80 cpus each . </S>",
    "<S> the pass - two farms can process between 2 and 4 million events per day . </S>",
    "<S> details about the implementation and performance of the system will be presented . </S>"
  ]
}