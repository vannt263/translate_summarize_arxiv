{
  "article_text": [
    "feature structures serve as a means for the specification of linguistic information in current linguistic formalisms such as lfg  @xcite , hpsg  @xcite or ( some versions of ) categorial grammar  @xcite .",
    "this paper focuses on typed feature structures ( tfss ) that are a generalization of their untyped counterparts .",
    "tfss are related by _",
    "( see  @xcite ) according to their information content .",
    "we show that the subsumption relation is well - founded for acyclic tfss , but not for cyclic ones .",
    "we use this result to prove that parsing is terminating for grammars that are _ off - line parsable _ : this proposition is cited , but not proved , in  @xcite .",
    "we also suggest a less strict definition for off - line parsability that guarantees termination in the case of acyclic tfss .",
    "this work has originated out of our interest in the theoretical aspects of parsing with grammars that are based on tfss ( see  @xcite ) . while the results presented here are basically theoretical , we have implemented a system for efficient processing of such grammars , based on abstract machine techniques ; this work is presented in  @xcite .",
    "the rest of this paper is organized as follows : section  [ basics ] outlines the theory of tfss of @xcite . in section  [ wf ]",
    "we discuss the well - foundedness of tfs subsumption .",
    "we sketch a theory of parsing in section  [ parsing ] and discuss off - line parsability of tfs - based grammars in section  [ application ] .",
    "this section summarizes some preliminary notions along the lines of  @xcite .",
    "while we use the terminology of _ typed _ feature structures , all the results are valid for untyped structures , that are a special case of tfss .",
    "@xcite defines _ well - typed _ and _ totally well - typed _ feature structures that are subsets of the set of tfss ; for generality , we assume nothing about the well - typedness of tfss below .",
    "however , the larger context of our work is done in a setup where features are assigned to types through an _ appropriateness _ specification , and hence we retain the term _ typed _ feature structures rather than _ sorted _ ones . for the following discussion",
    "we fix non - empty , finite , disjoint sets  and  of types and features , respectively , and an infinite set  of nodes , disjoint of  and , each member of which is assigned a type from through a fixed typing function @xmath0 . the set  is ` rich ' in the sense that for every @xmath1 , the set @xmath2 is infinite .    below , the meta - variable @xmath3 ranges over subsets of , @xmath4  over types , @xmath5  over features and @xmath6  over nodes . for a partial function @xmath7 , ` @xmath8 ' means that @xmath7 is defined for the value @xmath9 .",
    "whenever the result of an application of a partial function is used as an operand , it is meant that the function is defined for its arguments .",
    "denotes the set of natural numbers .",
    "a partial order @xmath10 over @xmath11 is a * type hierarchy * if it is bounded complete , i.e. , if every up - bounded subset @xmath3 of  has a ( unique ) least upper bound , @xmath12 . if @xmath13 , @xmath4 is said to be more general than @xmath14 , which is more specific than @xmath4 .",
    "@xmath14 is a subtype of @xmath4 .",
    "@xmath15 is the most general type ; @xmath16 is the most specific , inconsistent type .",
    "all occurrences of @xmath17 are identified .",
    "a * feature structure * ( over the parameters ,  and ) is a directed , connected , labeled graph consisting of a finite , nonempty set of nodes @xmath18 , a root @xmath19 , and a partial function @xmath20 specifying the arcs , such that every node @xmath21 is accessible from @xmath22 .",
    "@xmath23 ( with or without subscripts ) range over feature structures and @xmath24 ( with the same subscripts ) over their constituents .",
    ", @xmath25 subsumes every other type , and the rest of the types are incomparable .",
    "all features are appropriate for the type _ complex _",
    "only , with @xmath25 as their appropriate value .",
    "atomic nodes are labeled by an atom , non - atomic nodes  by _ complex _ and variables  by @xmath25 .",
    "] let  be the set of all typed feature structures ( over the fixed parameters ,  and ) .",
    "a * path * is a finite sequence of features , and the set @xmath26 is the collection of paths .",
    "@xmath27 is the empty path . @xmath28 ( with or without subscripts ) range over paths .",
    "the definition of @xmath29 is extended to paths in the natural way : @xmath30 and @xmath31",
    ". the paths of a feature structure @xmath32 are @xmath33 and @xmath34 .",
    "note that for every tfs @xmath32 , @xmath35 since @xmath36 for every @xmath32 .",
    "a feature structure @xmath37 is * cyclic * if there exist a non - empty path @xmath38 and a node @xmath21 such that @xmath39 .",
    "it is * acyclic * otherwise .",
    "let  be the set of all acyclic tfss ( over the fixed parameters ) .",
    "a feature structure @xmath37 is * reentrant * iff there exist two different paths @xmath40 such that @xmath41 .",
    "@xmath42 * subsumes * @xmath43 iff there exists a total function @xmath44 ( a * subsumption morphism * ) such that    * @xmath45 * for every @xmath46 , @xmath47 * for every @xmath46 and for every @xmath5 such that @xmath48 , @xmath49    the symbol ` @xmath50 ' is overloaded to denote subsumption ( in addition to the subtype relation ) .",
    "the morphism @xmath51 associates with every node in @xmath52 a node in @xmath53 with at least as specific a type ; moreover , if an arc labeled @xmath5 connects @xmath6 with @xmath54 in @xmath55 , then such an arc connects @xmath56 with @xmath57 in @xmath58 .",
    "two properties follow directly from the definition : if @xmath59 then every path defined in @xmath32 is defined in @xmath60 , and if two paths are reentrant in @xmath32 they are reentrant in @xmath60 .",
    "if two feature structures subsume each other then they have exactly the same structure .",
    "the only thing that distinguishes between them is the identity of the nodes .",
    "this information is usually irrelevant , and thus an isomorphism is defined over tfss as follows : @xmath32 and @xmath60 are * alphabetic variants * ( denoted @xmath61 ) iff @xmath62 and @xmath63 . @xmath32 * strictly subsumes * @xmath60 ( @xmath64 ) iff @xmath65 and @xmath66 .",
    "if @xmath32 strictly subsumes @xmath60 then one of following cases must hold : either @xmath60 contains paths that @xmath32 does nt ; or there is a path in @xmath60 that ends in a node with a type that is greater than its counterpart in @xmath32 ; or @xmath60 contains ` more reentrancies ' : paths that lead to the same node in @xmath60 lead to different nodes in @xmath32 .",
    "[ lemma : strict - subsume ] if @xmath64 ( through the subsumption morphism @xmath51 ) then at least one of the following conditions holds :    1 .",
    "there exists a path @xmath67 2 .",
    "there exists a node @xmath68 such that @xmath69 , 3 .",
    "there exist paths @xmath40 such that @xmath70 but @xmath71 .",
    "in this section we discuss the well - foundedness of tfs subsumption .",
    "a partial order @xmath72 on a set @xmath73 is * well - founded * iff there does not exist an infinite decreasing sequence @xmath74 of elements of @xmath73 .",
    "we prove that subsumption of acyclic tfss is well - founded , and show an example of general ( cyclic ) tfss for which subsumption is not well - founded . while these results are not surprising , and in fact might be deduced from works such as , e.g. ,  @xcite or  @xcite , they were not , to the best of our knowledge , spelled out explicitly before .",
    "[ lemma : finite ] a tfs @xmath32 is acyclic iff @xmath75 is finite .    * proof : * if @xmath32 is cyclic , there exists a node @xmath76 and a non - empty path @xmath77 that @xmath39 . since @xmath6 is accessible ,",
    "let @xmath78 be the path from the root to @xmath6 : @xmath79 .",
    "the infinite set of paths @xmath80 is contained in @xmath75 .",
    "+ if @xmath32 is acyclic then for every non - empty path @xmath81 and every @xmath21 , @xmath82 .",
    "@xmath83 is finite , and so is , so the out - degree of every node is finite",
    ". therefore the number of different paths leaving @xmath22 is bounded , and hence @xmath75 is finite .",
    "let @xmath85 be a total function such that @xmath86 if @xmath87 .",
    "for an acyclic tfs @xmath32 , let @xmath88 and let @xmath89 .",
    "let @xmath90 be defined by @xmath91 .    by lemma  [ lemma : finite ] ,",
    "@xmath92 is well defined for acyclic tfss .",
    "@xmath93 can be thought of as the ` number of reentrancies ' in @xmath32 : every node @xmath94 contributes @xmath95 to @xmath93 . for every acyclic tfs @xmath32 , @xmath96 ( clearly @xmath97 and @xmath98 ) and hence @xmath99 .",
    "[ lemma : rank ] if @xmath64 and both are acyclic then @xmath100 .    *",
    "proof : * since @xmath101 , @xmath102 .",
    "consider the two possible cases :    * if @xmath103 , then * * @xmath104 ; * * @xmath105 by the definitions of @xmath106 and subsumption ; * * @xmath107 by the definition of subsumption , since every reentrancy in @xmath32 is a reentrancy in @xmath60 ; * * by lemma  [ lemma : strict - subsume ] , either @xmath108 ( if case ( 2 ) holds ) , or @xmath109 ( if case ( 3 ) holds ) . + hence @xmath100 . * if @xmath110 then * * @xmath111 ; * * @xmath105 ( as above ) * * it might be the case that @xmath112 .",
    "but for every node @xmath113 that is not the image of any node in @xmath114 , there exists a path @xmath78 such that @xmath115 and @xmath116 .",
    "hence @xmath117 .",
    "+ hence @xmath100 .",
    "@xmath84    subsumption of acyclic tfss is well - founded .",
    "* proof : * for every acyclic tfs @xmath32 , @xmath118 .",
    "by lemma  [ lemma : rank ] , if @xmath64 then @xmath100 . if an infinite decreasing sequence of acyclic tfss existed , @xmath92 would have mapped them to an infinite decreasing sequence in @xmath119 , which is a contradiction .",
    "hence subsumption is well - founded for acyclic tfss .",
    "subsumption of tfss is not well - founded .",
    "* proof : * consider the infinite sequence of tfss @xmath120 depicted graphically in figure  [ fig : sequence ] . for every @xmath121 , @xmath122 : to see that consider the morphism @xmath123 that maps @xmath124 to @xmath125 and @xmath126 to @xmath127 for every @xmath128 ( i.e. , the first @xmath129 nodes of @xmath130 are mapped to the first @xmath129 nodes of @xmath131 , and the additional node of @xmath130 is mapped to the last node of @xmath131 ) . clearly , for every @xmath132 , @xmath123 is a subsumption morphism .",
    "hence , for every @xmath133 .",
    "+ to show strictness , assume a subsumption morphism @xmath134 . by definition ,",
    "@xmath135 . by the third requirement of subsumption ( @xmath51 commuting with @xmath29 ) , the first @xmath129 nodes in @xmath131 have to be mapped by @xmath136 to the first @xmath129 nodes in @xmath130 .",
    "however , if @xmath6 is the @xmath129-th node of @xmath131 , then @xmath137 leads back to @xmath6 , while @xmath138 leads to the last node of @xmath130 ( the cyclic node ) , and hence @xmath136 does not commute with @xmath29 , a contradiction .",
    "hence , @xmath139 .",
    "+ thus , there exists a strictly decreasing infinite sequence of cyclic tfss and therefore subsumption is not well - founded .",
    "@xmath84    to conclude this section , note that _ specification _ , which is the inverse relation to subsumption , is not well - founded even when cyclic feature structures are ruled out .",
    "this fact can easily be seen by considering the sequence of feature structures @xmath140 , where @xmath141 consists of @xmath129 nodes , the first @xmath142 of which are labeled @xmath4 and the last  @xmath25 , and an @xmath5-arc leads from every node to its successor . clearly , @xmath143 for every @xmath144 , and the sequence is infinite .",
    "this is true whether or not appropriateness constraints are imposed on the feature structures involved .    in the general case , then , given a feature structure @xmath32 it might be possible to construct , starting from @xmath32 , both an infinite decreasing sequence of tfss ( by expanding cycles ) and an infinite increasing sequence ( by adding paths ) .",
    "parsing is the process of determining whether a given string belongs to the language defined by a given grammar , and assigning a structure to the permissible strings .",
    "a large variety of parsing algorithms exists for various classes of grammars ( for a detailed treatment of the theory of parsing with grammars that are based on feature structures , refer to  @xcite ) .",
    "we define below a simple algorithm for grammars that are based on tfss , but it must be emphasized that the results presented in this paper are independent of the particular algorithm ; they hold for a wide range of different algorithms .    to be able to represent complex linguistic information , such as phrase structure , the notion of feature structures",
    "is usually extended .",
    "there are two different approaches for representing phrase structure in feature structures : by adding special , designated features to the fss themselves ; or by defining an extended notion of fss .",
    "the first approach is employed by hpsg : special features , such as dtrs ( daughters ) , encode trees in tfss as lists .",
    "this makes it impossible to directly access a particular daughter .",
    "@xcite uses a variant of this approach , where a denumerable set of special features , namely @xmath145 are added to encode the order of daughters in a tree . in a typed system such as ours",
    ", this method would necessitate the addition of special types as well ; in general , no bound can be placed on the number of features and types necessary to state rules ( see  @xcite ) .",
    "we adopt below the other approach : a new notion of _ multi - rooted feature structures _ , suggested by  @xcite  and  @xcite , is being used .",
    "a * multi - rooted feature structure * ( mrs ) is a pair @xmath146 where @xmath147 is a finite , directed , labeled graph consisting of a set @xmath18 of nodes and a partial function @xmath20 specifying the arcs , and @xmath148 is an ordered ( repetition - free ) set of distinguished nodes in @xmath83 called * roots*. @xmath149 is not necessarily connected , but the union of all the nodes reachable from all the roots in @xmath148 is required to yield exactly @xmath83 .",
    "the * length * of a mrs is the number of its roots , @xmath150 .",
    "@xmath151 denotes the empty mrs ( where @xmath152 since @xmath153 ) .",
    "a mrs is * cyclic * under the same conditions a tfs is .",
    "a mrs is * reentrant * if it contains a node that can be reached either from two different roots or through two different paths .",
    "meta - variables @xmath154 range over mrss , and @xmath155 over their constituents . if @xmath156 is a mrs and @xmath157 is a root in @xmath148 then @xmath157 naturally induces a feature structure @xmath158 , where @xmath159 is the set of nodes reachable from @xmath157 and @xmath160 . thus @xmath161 can be viewed as an ordered sequence @xmath162 of ( not necessarily disjoint ) feature structures .",
    "we use the two views of mrss interchangeably .",
    "not only can nodes be shared by more than one element of the sequence ; paths that start in one root can reach a different root .",
    "in particular , cycles can involve more than one root .",
    "still , it is possible to define _ sub - structures _ of mrss by considering only the sub - graph that is accessible from a sub - sequence of the roots .",
    "the * sub - structure * of @xmath163 , induced by the pair @xmath164 and denoted @xmath165 , is @xmath166 . if @xmath167 , @xmath168 . if @xmath169 , we use @xmath170 for @xmath171 .    a mrs @xmath172 * subsumes * a mrs @xmath173 ( denoted by @xmath174 ) if @xmath175 and there exists a total function @xmath176 such that :    * for every root @xmath177 * for every @xmath21 , @xmath47 * for every @xmath21 and @xmath178 , if @xmath179 then @xmath180    many of the properties of tfss are easily adaptable to mrss .",
    "let @xmath181 , @xmath22 is the @xmath142-th root in @xmath182 and @xmath183 . then it is easy to show that if @xmath184 then @xmath185 and every reentrancy in @xmath161 is a reentrancy in @xmath186 .",
    "moreover , if @xmath187 ( strictly ) then at least one of the three conditions listed in lemma  [ lemma : strict - subsume ] holds .",
    "the well - foundedness result of the previous section are easily extended to mrss as well .",
    "let @xmath188 and @xmath189 times and an infinite decreasing sequence of mrss of length @xmath190 is obtained , for any @xmath191 . for a detailed discussion of the properties of mrss , refer to  @xcite .",
    "rules and grammars are defined over an additional parameter , a fixed , finite set  of words ( in addition to the parameters ,  and ) .",
    "the _ lexicon _",
    "associates with every word @xmath192 a feature structure @xmath193 , its * category*. is a set of tfss . while the definitions become more cumbersome , all the results still obtain . ]",
    "the categories are assumed to be disjoint .",
    "the input for the parser , therefore , is a sequence of ( disjoint ) tfss rather than a string of words .",
    "let @xmath194 .",
    "@xmath195 is defined iff @xmath196 , in which case it is the mrs @xmath197 . if @xmath198 then @xmath199 .",
    "if a single word occurs more than once in the input ( that is , @xmath200 for @xmath201 ) , its category is copied ( with remaned nodes ) more than once in @xmath202 .",
    "a * rule * is an mrs of length greater than or equal to 1 with a designated ( first ) element , the * head * of the rule .",
    "the rest of the elements form the rule s * body * ( which may be empty ) .",
    "a * grammar * @xmath203 is a finite set of rules @xmath204 and a * start symbol * @xmath205 that is a tfs .",
    "figure  [ fig : grammar ] depicts an example grammar ( we use avm notation for this rule ; tags such as @xmath206 denote reentrancy ) .",
    "the type hierarchy on which the grammar is based is omitted here .",
    "initial symbol : @xmath207 lexicon : @xmath208 rules : @xmath209    in what follows we define the notion of _ derivation _ ( or _ rewriting _ ) with respect to tfs - based grammars .",
    "informally , this relation ( denoted ` @xmath210 ' ) is defined over mrss such that @xmath211 iff @xmath186 can be obtained from @xmath161 by successive application of grammar rules .",
    "the reader is referred to , e.g. ,  @xcite for a detailed formulation of this concept for a variety of formalisms .    to define derivations we first define _",
    "immediate derivation_. informally , two mrss @xmath32 and @xmath60 are related by immediate derivation if there exists some grammar rule @xmath186 that licenses the derivation .",
    "@xmath186 can license a derivation by some mrs @xmath212 that it subsumes ; the head of @xmath212 must be identified with some element @xmath142 in @xmath32 , and the body of @xmath212 must be identified with a sub - structure of @xmath60 , starting from @xmath142 .",
    "the parts of @xmath32 prior to and following @xmath142 remain intact in @xmath60 .",
    "note that @xmath212 might carry reentrancies from @xmath32 to @xmath60 : if a path @xmath213 leaving the @xmath142-th element of @xmath32 is reentrant with some path @xmath214 leaving the @xmath215-th element , and @xmath213 , starting from the head of @xmath212 , is reentrant with @xmath216 in some element @xmath217 in @xmath212 , then @xmath214 and @xmath216 are reentrant in @xmath60 , starting from the elements in @xmath60 that correspond to @xmath215 and @xmath217 , respectively .",
    "a mrs @xmath218 * immediately derives * a mrs @xmath219 ( denoted @xmath220 ) iff there exist a rule @xmath221 of length @xmath222 and a mrs @xmath223 , such that :    * @xmath224 * @xmath212 s head is identified with some element @xmath142 of @xmath32 : @xmath225 ; * @xmath212 s body is identified with a sub - structure of @xmath60 : @xmath226 * the first @xmath227 elements of @xmath32 and @xmath60 are identical : @xmath228 ; * the last @xmath229 elements of @xmath32 and @xmath60 are identical : @xmath230 .",
    "the reflexive transitive closure of ` @xmath231 ' , denoted ` @xmath232 ' , is defined as follows : @xmath233 if @xmath234 or if there exists @xmath235 such that @xmath236 and @xmath237 .",
    "a mrs @xmath32 * derives * a mrs @xmath238 ( denoted @xmath239 ) iff there exist mrss @xmath240 such that @xmath241 , @xmath242 and @xmath243 .",
    "immediate derivation is based on the more traditional notion of _ substituting _ some symbol which constitutes the head of some rule with the body of the rule , leaving the context intact .",
    "however , as our rules are based on tfss , the context of the `` symbol '' to be substituted might be affected by the substitution . to this end",
    "we require identity , and not only unifiability , of the contexts .",
    "mrss related by derivations should be viewed as being `` as specific as needed '' , i.e. , containing all the information that is added by the rule that licenses the derivation .",
    "this is also the reason for the weaker conditions on the ` @xmath210 ' relation : it allows an mrs @xmath32 to derive an mrs @xmath60 if there is a sequence of immediate derivations that starts with a sepcification of @xmath32 and ends in a specification of @xmath60 .",
    "figure  [ fig : derivation ] depicts a derivation of the string `` john loves her '' with respect to the example grammar .",
    "the scope of reentrancy tags should be limited to one mrs , but we use the same tags across different mrss to emphasize the flow of information during derivation .    @xmath244    the * language * of a grammar @xmath149 is @xmath245 and @xmath246 .",
    "the derivation example of figure  [ fig : derivation ] shows that the sentence `` john loves her '' is in the language of the example grammar , since the derivation starts with a tfs that is more specific than the initial symbol and ends in a specification of the lexical entries of the sentences words .",
    "_ parsing _ is a computational process triggered by some input string of words @xmath247 of length @xmath248 .",
    "for the following discussion we fix a particular grammar @xmath203 and a particular input string @xmath192 of length @xmath222 .",
    "a _ state _ of the computation consists of a set of _",
    "items_.    an * item * is a tuple @xmath249 $ ] , where @xmath250 , @xmath251 , @xmath161 is an mrs and @xmath252 .",
    "an item is * active * if @xmath253 , otherwise it is * complete*.  is the collection of all items .",
    "if @xmath249 $ ] is an item , @xmath254 is said to _ span _ the input from position @xmath129 to position @xmath255 ( the parsing invariant below motivates this term ) .",
    "@xmath161 and @xmath190 can be seen as a representation of a _ dotted rule _ , or _",
    "edge _ : during parsing all generated items are such that @xmath161 is ( possibly more specific than ) some grammar rule .",
    "@xmath190 is a position in @xmath161 , indicating the location of the _ dot_. the part of @xmath161 prior to the dot was already seen ; the part following the dot is still expected .",
    "when the entire body of @xmath161 is seen , the edge becomes complete .",
    "a _ computation _ amounts to successively generating items ; we assume that item generation is done through a finite set of deterministic _ operations _ that create an item on the basis of previously generated ( zero or more ) items .",
    "also , if an item was generated on the basis of some existing items , those items are not used again by the same operation .",
    "this assumption is realized by an important class of parsing algorithms known as _ chart parsers_. a computation is _ terminating _ if and when no new items can be generated .",
    "a computation is _ successful _ if , upon termination , a complete item that spans the entire input and contains the initial symbol was generated : the final state of the computation should contain the item @xmath256 $ ] , where @xmath257 and @xmath222 is the input s length .",
    "different algorithms assign different meanings to items , and generate them in various orders ( see , e.g. ,  @xcite ) . to be as general as possible ,",
    "we only assume that the following invariant holds :    [ [ parsing - invariant ] ] parsing invariant + + + + + + + + + + + + + + + + +    _ in a computation triggered by @xmath192 , if an item @xmath249 $ ] is generated then @xmath258 .",
    "_   + one immediate consequence of the invariant is that for all the items @xmath249 $ ] generated when parsing @xmath192 , @xmath259 .",
    "a parsing algorithm is required to be _ correct _ :    [ [ correctness ] ] correctness + + + + + + + + + + +    _ a computation triggered by @xmath192 is successful iff @xmath260 .",
    "_   + although  @xcite uses a different notation than  @xcite , this property is proven by both .",
    "it is well - known ( see , e.g. ,  @xcite ) that unification - based grammar formalisms are turing - equivalent , and therefore the parsing problem is undecidable in the general case .",
    "however , for grammars that satisfy a certain restriction , termination of the computation can be guaranteed .",
    "we make use of the well - foundedness of subsumption ( section  [ wf ] ) to prove that parsing is terminating for _ off - line parsable _ grammars .    to assure efficient computation and avoid maintenance of redundant items , many parsing algorithms employ a mechanism called _ subsumption check _",
    "( see , e.g. ,  @xcite ) to filter out certain generated items .",
    "define a ( partial ) order over items : @xmath261 \\preceq [ i_2,\\sigma_2,j_2,k_2]$ ] iff @xmath262 and @xmath263 .",
    "the subsumption filter is realized by preserving an item @xmath9 only if no item @xmath264 such that @xmath265 was generated previously .",
    "thus , for all items that span the same substring , only the most general one is maintained .",
    "@xcite prove that by admitting the subsumption check , the correctness of the computation is preserved .    _",
    "off - line parsability _ was introduced by  @xcite and was adopted by  @xcite , according to which `` a grammar is off - line parsable if its context - free skeleton is not infinitely ambiguous '' .",
    "as  @xcite points out , this restriction ( which he defines in slightly different terms ) `` ensures that the number of constituent structures that have a given string as their yield is bounded by a computable function of the length of that string '' .",
    "the problem with this definition is demonstrated by  @xcite : `` not every natural unification grammar has a context - free backbone '' .",
    "a context - free backbone is inherent in lfg , due to the separation of c - structure from f - structure and the explicit demand that the c - structure be context - free .",
    "however , this notion is not well - defined in hpsg , where phrase structure is encoded within feature structures ( indeed , hpsg itself is not well - defined in the formal language sense ) .",
    "such a backbone is certainly missing in categorial grammar , as there might be infinitely many categories .",
    "@xcite generalizes the concept of off - line parsability but does nt prove that parsing with off - line parsable grammars is terminating .",
    "we use an adaptation of his definition below and provide a proof .",
    "a total function @xmath266 , where @xmath73 is a partially - ordered set , is * finite - range decreasing * ( frd ) iff the range of @xmath7 is finite and for every @xmath267 .",
    "a grammar is * strongly off - line parsable * iff there exists an frd - function @xmath7 from mrss to mrss ( partially ordered by subsumption ) such that for every string @xmath192 and different mrss @xmath154 such that @xmath268 , if @xmath269 and @xmath270 then @xmath271",
    ".    strong off - line parsability guarantees that any particular sub - string of the input can only be spanned by a finite number of mrss : if a grammar is strongly off - line parsable , there can not exist an infinite set @xmath272 of mrss , such that for some @xmath273 , @xmath274 for every @xmath275 .",
    "if such a set existed , @xmath7 would have mapped its elements to the set @xmath276 .",
    "this set is infinite since @xmath272 is infinite and @xmath7 does nt map two different items to the same image , and thus the finite range assumption on @xmath7 is contradicted .",
    "as @xcite points out , `` there are non - off - line - parsable grammars for which termination holds '' .",
    "we use below a more general notion of this restriction : we require that @xmath7 produce a different output on @xmath161 and @xmath186 only if they are incomparable with respect to subsumption .",
    "we thereby extend the class of grammars for which parsing is guaranteed to terminate ( although there still remain decidable grammars for which even the weaker restriction does nt hold ) .",
    "a grammar @xmath149 is * weakly off - line parsable * iff there exists an frd - function @xmath7 from mrss to mrss ( partially ordered by subsumption ) such that for every string @xmath192 and different mrss @xmath154 such that @xmath268 , if @xmath269 , @xmath270 , @xmath277 and @xmath278 , then @xmath271 .",
    "clearly , strong off - line parsability implies weak off - line parsability .",
    "however , as we show below , the inverse implication does not hold .",
    "we now prove that weakly off - line parsable grammars guarantee termination of parsing in the presence of acyclic mrss . we prove that if these conditions hold , only a _",
    "finite _ number of different items can be generated during a computation .",
    "the main idea is the following : if an infinite number of different items were generated , then an infinite number of different items must span the same sub - string of the input ( since the input is fixed and finite ) . by the parsing invariant",
    ", this would mean that an infinite number of mrss derive the same sub - string of the input .",
    "this , in turn , contradicts the weak off - line parsability constraint .",
    "[ olp ] if @xmath149 is weakly off - line parsable and mrss are acyclic then every computation terminates .    *",
    "proof : * fix a computation triggered by @xmath192 of length @xmath222 . by the consequence of the parsing invariant ,",
    "the indices that determine the span of items are limited ( @xmath279 ) , as are the dot positions ( @xmath252 ) .",
    "it remains to show that for every selection of @xmath142 , @xmath255 and @xmath190 , only a finite number of mrss are generated .",
    "let @xmath280 $ ] be a generated item .",
    "suppose another item is generated where only the mrs is different : @xmath281 $ ] and @xmath282 . if @xmath283 , @xmath264 will not be preserved because of the subsumption test .",
    "if @xmath284 , @xmath9 can be replaced by @xmath264 .",
    "there is only a finite number of such replacements , since subsumption is well - founded for acyclic mrss .",
    "now suppose @xmath285 and @xmath286 . by the parsing invariant , @xmath287 and @xmath288 .",
    "since @xmath149 is weakly off - line parsable , @xmath289 . since the range of @xmath7 is finite , there are only finitely many items with equal span that are pairwise incomparable . since only a finite number of items can be generated and the computation uses a finite number of operations , every computation ends within a finite number of steps .",
    "@xmath84    the above proof relies on the well - foundedness of subsumption , and indeed termination of parsing is not guaranteed by weak off - line parsability for grammars based on cyclic tfss .",
    "obviously , cycles can occur during unification even if the unificands are acyclic .",
    "however , it is possible ( albeit costly , from a practical point of view ) to spot them during parsing .",
    "indeed , many implementations of logic programming languages , as well as of unification - based grammars ( e.g. , ale  @xcite ) do not check for cycles .",
    "if cyclic tfss are allowed , the more strict notion of strong off - line parsability is needed . under the strong condition",
    "the above proof is applicable for the case of non - well - founded subsumption as well .    to exemplify the difference between strong and weak off - line parsability ,",
    "consider a grammar @xmath149 that contains the following single rule : @xmath290 and the single lexical entry , @xmath291 , whose category is : @xmath292 this lexical entry can be derived by an infinite number of tfss : @xmath293 it is easy to see that no frd - function can distinguish ( in pairs ) among these tfss , and hence the grammar is not strongly off - line parsable .",
    "the grammar is , however , _",
    "weakly _ off - line parsable : since the tfss that derive each lexical entry form a subsumption chain , the antecedent of the implication in the definition for weak off - line parsability never holds ; even trivial functions such as the function that returns the empty tfs for every input are appropriate frd - functions .",
    "thus parsing is guaranteed to terminate with this grammar .",
    "it might be claimed that the example rule is not a part of any grammar for a natural language .",
    "it is unclear whether the distinction between weak and strong off - line parsability is relevant when `` natural '' grammars are concerned .",
    "still , it is important when the formal , mathematical and computational properties of grammars are concerned .",
    "we believe that a better understanding of formal properties leads to a better understanding of `` natural '' grammars as well .",
    "furthermore , what might be seem un - natural today can be common practice in the future .",
    "this work is supported by a grant from the israeli ministry of science : `` programming languages induced computational linguistics '' .",
    "the work of the second author was also partially supported by the fund for the promotion of research in the technion .",
    "we wish to thank the anonymous referees for their enlightening comments .",
    "carpenter , bob .",
    "1992a .  the attribute logic engine : user s guide . technical report , laboratory for computational linguistics , philosophy department , carnegie mellon university , pittsburgh , pa 15213 , december .",
    "kaplan , r. and j.  bresnan .",
    "lexical functional grammar : a formal system for grammatical representation . in j.  bresnan , editor , _ the mental representation of grammatical relations_. mit press , cambridge , mass .",
    ", pages 173281 .",
    "shieber , stuart  m. , yves schabes , and fernando c.  n. pereira .",
    "principles and implementation of deductive parsing . technical report tr-11 - 94 , center for research in computing technology , division of applied sciences , harvard university , april .",
    "wintner , shuly and nissim francez .",
    "1995a . an abstract machine for typed feature structures . in _ proceedings of the 5th workshop on natural language understanding and logic programming _ , pages 205220 ,",
    "lisbon , may .",
    "wintner , shuly and nissim francez . 1995b . parsing with typed feature structures",
    "technical report lcl 95 - 1 , laboratory for computational linguistics , technion , israel institute of technology , haifa 32000 , israel , december ."
  ],
  "abstract_text": [
    "<S> typed feature structures are used extensively for the specification of linguistic information in many formalisms . </S>",
    "<S> the subsumption relation orders tfss by their information content . </S>",
    "<S> we prove that subsumption of acyclic tfss is well - founded , whereas in the presence of cycles general tfs subsumption is not well - founded . </S>",
    "<S> we show an application of this result for parsing , where the well - foundedness of subsumption is used to guarantee termination for grammars that are off - line parsable . </S>",
    "<S> we define a new version of off - line parsability that is less strict than the existing one ; thus termination is guaranteed for parsing with a larger set of grammars </S>",
    "<S> .    [ section ] [ definition]theorem [ definition]lemma    [ 1 ]    * keywords : * computational linguistics , parsing , feature structures , unification + this paper has not been submitted elsewhere in identical or similar form </S>"
  ]
}