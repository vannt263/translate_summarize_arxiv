{
  "article_text": [
    "let @xmath0 be a smooth projective hyperelliptic curve of genus @xmath3 defined by an affine equation @xmath4 where @xmath5 is either @xmath6 or @xmath7 ( generically , @xmath8 ) .",
    "if @xmath9 has good reduction at an odd prime @xmath10 , the associated _ hasse  witt matrix _ @xmath11 $ ] is the @xmath12 matrix over @xmath13 with entries @xmath14 where @xmath15 denotes the coefficient of @xmath16 in @xmath17 ; see @xcite .",
    "we have the identity @xmath18 where @xmath19 $ ] is the characteristic polynomial of the frobenius endomorphism of the jacobian of the reduction of @xmath9 at @xmath10 ; see @xcite . in particular , the weil bounds imply that for @xmath20 the trace of @xmath21 uniquely determines the trace of frobenius , hence the number of points @xmath22 on the reduction of @xmath9 at @xmath10 .",
    "we say that a prime @xmath10 is _ admissible ( for @xmath9 ) _ if @xmath10 is odd , @xmath9 has good reduction at @xmath10 , and @xmath10 does not divide @xmath23 or @xmath24 ( the constant and leading coefficients of @xmath25 ) .",
    "the goals of this paper are to give a fast algorithm for computing @xmath21 simultaneously for all admissible primes @xmath10 up to a given bound @xmath1 , and to demonstrate the practicality of the algorithm for @xmath26 and @xmath27 .",
    "applications include numerical investigations of the generalized sato ",
    "tate conjecture @xcite and computing the @xmath28-series of @xmath9 @xcite .",
    "the algorithm presented here is inspired by @xcite , which gives an algorithm to compute  @xmath29 ( not just @xmath30 ) for all primes @xmath31 of good reduction , in the case that @xmath32 is odd ( which implies that @xmath9 has a rational weierstrass point ) .",
    "the running time of that algorithm is @xmath33 ; when averaged over primes @xmath31 , this is @xmath34 , the first such result that is polynomial in both @xmath3 and @xmath35 .",
    "critically , the exponent @xmath36 of @xmath35 does not depend on @xmath3 , and it is already better than that of schoof s algorithm @xcite in genus 1 , which has an exponent of  @xmath37 when suitably implemented . , but for @xmath38 generic algorithms that run in @xmath39 time are superior within the feasible range of @xmath31 in any case . ]",
    "pila s generalization of schoof s algorithm  @xcite has an exponent of @xmath40 in genus @xmath41 ( see @xcite ) , and eric schost has suggested ( personal communication ) that the exponent is @xmath42 in genus  @xmath43 ( pila s bound in @xcite gives a much larger exponent ) .    for our implementation",
    "we focus on the cases @xmath44 , where knowledge of @xmath45 allows one to efficiently determine @xmath29 using a generic group algorithm , as described in @xcite .",
    "when @xmath27 , the time required to deduce @xmath29 from @xmath30 is @xmath39 ; while this is exponential in @xmath35 , for @xmath31 it is actually negligible compared to the @xmath46 average time to compute @xmath30 using the method of this paper , within the feasible range of @xmath1 ( say @xmath47 ) .",
    "we handle all hyperelliptic curves , not just those with a rational weierstrass point , which in general will not be present .",
    "we also introduce optimizations that improve the space complexity by a logarithmic factor , compared to @xcite , without increasing the running time ; indeed , the running time is significantly reduced , as may be seen in table  [ table : hwtimingsk ] in  [ sec : details ] .",
    "asymptotically , we obtain the following theorem bounding the complexity of the algorithm computehassewittmatrices , which computes @xmath21 for all admissible @xmath48 ( see  [ sec : art ] for the algorithm and a proof of the theorem )",
    ". we denote by @xmath49 the maximum of the absolute value of the coefficients of @xmath25 , and by @xmath50 the time to multiply two @xmath51-bit integers .",
    "we may take @xmath52 , via @xcite .",
    "[ thm : main ] assume that @xmath53 .",
    "the running time of the algorithm computehassewittmatrices is @xmath54 and it uses @xmath55 space .    assuming @xmath56 grows no faster than @xmath57 , the bounds in theorem  [ thm : main ] simplify to @xmath58 time and @xmath59 space .    in practical terms ,",
    "the new algorithm is substantially faster than previous methods .",
    "we benchmarked our implementation against two of the fastest software packages available for these computations , as analyzed in @xcite : the ` hypellfrob ` @xcite and ` smalljac ` @xcite software libraries . in genus 2",
    "the new algorithm outperforms both libraries for @xmath60 , and is more than 10 times faster for @xmath61 . in genus 3",
    "the new algorithm is faster across the board , and more than 20 times faster for @xmath61 .",
    "key to achieving these performance improvements are a faster and more space - efficient algorithm for computing the accumulating remainder trees that play a crucial role in @xcite , and an optimized fft implementation for multiplying integer matrices with very large coefficients .",
    "each row of the hasse  witt matrix @xmath21 of @xmath9 consists of of @xmath3 consecutive coefficients of @xmath62 reduced modulo @xmath10 , where @xmath63 .",
    "the total size of all the polynomials  @xmath62 needed to compute @xmath21 for @xmath64 is @xmath65 bits ; this makes a nave approach hopelessly inefficient .",
    "two key optimizations are required to achieve a running time that is quasilinear in  @xmath1 .",
    "first , for a given row of @xmath21 , we only require @xmath3 coefficients of each @xmath62 . in  [ sec : rr ] we define an @xmath66-dimensional row vector @xmath67 , where @xmath68 , consisting of @xmath66 consecutive coefficients of @xmath62 , including the @xmath3 coefficients of interest .",
    "the coefficients of @xmath69 corresponding to @xmath70 are closely related to the coefficients of @xmath62 corresponding to @xmath67 .",
    "we use this to derive a linear recurrence @xmath71 , where @xmath72 is an explicit @xmath73 transition matrix .",
    "the entries of @xmath72 lie in @xmath74 , but not necessarily in @xmath75 ; this requires us to handle the denominators explicitly .",
    "these recurrence relations are analogous to the technique of `` reduction towards zero '' introduced in @xcite ; the key point is that the coefficients of the recurrence are _ independent of @xmath10_. this is in contrast to the recurrence relations used to derive the hasse ",
    "witt matrix in @xcite , whose coefficients do depend on @xmath10 , and which are analogous to the `` horizontal reductions '' in @xcite and @xcite .",
    "second , we only need to know the coefficients of each vector @xmath67 modulo @xmath76 .",
    "the essential difficulty here is that the modulus is different for each @xmath51 .",
    "following @xcite , we use an _ accumulating remainder tree _ to circumvent this problem .",
    "more precisely , in ",
    "[ sec : art ] we give an algorithm remaindertree that takes as input a sequence of integer matrices @xmath77 , a sequence of integer moduli @xmath78 , and an integer row vector @xmath79 ( the `` initial condition '' ) , and computes the reduced partial products ( row vectors ) @xmath80 simultaneously for all @xmath81 .",
    "the remarkable feature of this algorithm is that its complexity is quasilinear in @xmath82 .",
    "we may apply remaindertree to our situation in the following way . during the course of finding an explicit expression for @xmath72 , we will write it as @xmath83 where @xmath84 is an integer matrix and @xmath85 is a nonzero integer .",
    "it turns out that for any sufficiently large admissible prime @xmath86 , the @xmath10-adic valuation of @xmath87 is at most @xmath32 .",
    "thus to obtain @xmath88 modulo @xmath10 , it suffices to compute @xmath89 we run remaindertree twice , first with @xmath90 and @xmath91 , and then with @xmath92 and @xmath93 ( regarding the @xmath94 as @xmath95 matrices ) . in both cases we take the moduli @xmath96 if @xmath97 is an admissible prime , and let @xmath98 otherwise .    for @xmath44 , we will show how to tweak this strategy to use the smaller moduli @xmath99 .",
    "this has a significant impact on the overall performance and memory consumption .",
    "we conjecture that one can always use @xmath100 ( for @xmath10 sufficiently large compared to @xmath3 ) , but we will not attempt to prove this here .",
    "for technical reasons it will be convenient to distinguish between the cases @xmath101 and @xmath102 ( the same distinction arises in @xcite ) .",
    "let @xmath103 for each @xmath104 , consider the sequence of vectors @xmath105 \\in { \\mathbb{z}}^r \\qquad ( n \\geq 0).\\ ] ] for each admissible prime @xmath76 , the last @xmath3 entries of @xmath106 are , modulo @xmath10 , precisely the entries of the @xmath107th row of the hasse  witt matrix @xmath21 ( in reversed order ) .",
    "the aim of this section is to develop a recurrence for the @xmath106 . for each @xmath108",
    ", we will construct an @xmath73 integer matrix @xmath109 , and a nonzero integer @xmath110 , such that @xmath111 the entries of @xmath109 , and @xmath110 , turn out to be polynomials in @xmath51 and the coefficients of @xmath25 , which allows us to analyze the @xmath10-adic valuation of the partial products of the @xmath110 .",
    "the construction proceeds as follows . for any @xmath108 , the identities @xmath112 imply the relations @xmath113 multiplying by @xmath114 and subtracting yields the relation @xmath115 among the coefficients of @xmath62 .",
    "suppose we are in the case @xmath101 , @xmath116 .",
    "solving for @xmath15 yields @xmath117 for @xmath118 , this expresses @xmath15 as a linear combination of @xmath32 consecutive coefficients of @xmath62 to the `` left '' of @xmath15 . on the other hand , replacing @xmath114 by @xmath119 and @xmath120 by @xmath121 in gives @xmath122 for @xmath123 , this expresses @xmath15 as a linear combination of @xmath32 consecutive coefficients to the `` right '' of @xmath15 . now , suppose we are given as input @xmath124.\\ ] ] after @xmath125 applications of , i.e. , for @xmath126 ( in that order ) , and @xmath127 applications of , i.e. , for @xmath128 ( in that order ) , we have extended our knowledge of the coefficients of @xmath62 to the vector @xmath129.\\ ] ] of length @xmath130 . from we",
    "then obtain @xmath131.\\ ] ]    the above procedure defines a @xmath132 transition matrix @xmath133 mapping @xmath134 to @xmath135 , whose entries are rational functions in @xmath136 .",
    "denominators arise from the divisions by @xmath137 and @xmath138 in the various applications of and .",
    "each such divisor is a linear polynomial in @xmath139 $ ] multiplied by either @xmath23 or @xmath24 ; thus the denominators of the entries of @xmath133 are polynomials in @xmath140 $ ]",
    ". we will take @xmath110 to be the least common denominator of the entries of @xmath133 .",
    "since there are @xmath32 applications of and altogether , the degree of @xmath110 with respect to @xmath51 is at most @xmath32 ( it may be smaller due to cancellation ) .",
    "the case @xmath102 with @xmath141 is similar .",
    "we have @xmath142 , because @xmath25 is assumed to be squarefree , and the analogues of and are @xmath143 which express @xmath15 in terms of @xmath144 consecutive coefficients to the left , or right , of @xmath15 .",
    "given @xmath145,\\ ] ] we use these relations to extend @xmath134 to the vector @xmath146 $ ] of length @xmath147 , from which we obtain @xmath148 from as above .    in the subsections that follow we carry out the above procedure explicitly for the specific cases that arise when @xmath149 .",
    "suppose that @xmath0 has genus @xmath150 .",
    "if @xmath9 has a rational point , then @xmath9 is an elliptic curve and can be put in weierstrass form @xmath151 with @xmath25 cubic , but we first consider the generic case where this need not hold .",
    "so let @xmath152 with @xmath153 ; then @xmath154 . since the only relevant value of @xmath107 is @xmath150 , we omit the superscripts on @xmath155 , @xmath156 , @xmath157 .",
    "we wish to construct a linear recurrence that expresses the vector @xmath158 \\in { \\mathbb{z}}^4\\ ] ] in terms of the vector @xmath159 \\in { \\mathbb{z}}^4;\\ ] ] that is , we want a @xmath160 integer matrix @xmath84 and a nonzero integer @xmath85 such that @xmath161 for each odd prime @xmath76 , the hasse ",
    "witt matrix @xmath21 consists of just the single entry @xmath162 , which is the last entry of @xmath163 .",
    "we start by extending extending @xmath67 `` rightwards '' , using with @xmath164 .",
    "this yields @xmath165 using again with @xmath166 , we get @xmath167 combining these equations yields @xmath168    next we extend @xmath67 `` leftwards '' by applying with @xmath169 , obtaining @xmath170 with @xmath171 we get @xmath172 and therefore @xmath173    we have expressions for @xmath174 in terms of @xmath175 , and we obtain @xmath70 via @xmath176 after some algebraic manipulation we obtain the matrix @xmath177,\\ ] ] where @xmath178 and the denominator @xmath179    recall that @xmath180 . for each admissible prime @xmath181 ,",
    "the @xmath10-adic valuation of @xmath87 is exactly @xmath150 , since @xmath10 divides @xmath182 exactly once , and @xmath10 does not divide @xmath94 for @xmath183 or any @xmath184 .",
    "we may thus compute @xmath185 as @xmath186    with additional care it is possible to perform the bulk of the computation working modulo  @xmath10 rather than @xmath187 . as noted above , @xmath188 is a @xmath10-adic unit , and a direct calculation shows that the entries of the last column of @xmath189 are divisible by @xmath190 .",
    "let @xmath191 be the last column of @xmath192 .",
    "then @xmath191 is @xmath10-integral for @xmath86 , and we may compute the last entry of @xmath185 , i.e. , the lone entry of the hasse  witt matrix @xmath21 , as @xmath193    returning briefly to the general case , we can now see why it always suffices to work with moduli @xmath96 , for sufficiently large admissible @xmath10 .",
    "the denominator @xmath85 always has the form @xmath194 , where @xmath195 and @xmath196 , @xmath197 and @xmath198 are non - negative integers with @xmath199 and @xmath200 .",
    "we may assume that @xmath201 for all @xmath107 .",
    "if @xmath10 is larger than every prime divisor of @xmath202 , we see that @xmath203 is divisible by @xmath10 if and only if @xmath204 , and this occurs for at most one value of @xmath51 in the interval @xmath205 .",
    "moreover for large enough @xmath10 we see that @xmath203 can not be divisible by @xmath187 for such @xmath51 .",
    "thus for all sufficiently large admissible primes @xmath86 , we find that @xmath87 has @xmath10-adic valuation at most @xmath32 .",
    "one can make @xmath206 by replacing @xmath207 with @xmath208 and @xmath209 with @xmath210 and then clearing denominators .",
    "this has the advantage that a factor of @xmath211 cancels in the above formulae for @xmath84 and @xmath85 , but it will also tend to increase the size of the other coefficients . in general , one can always make @xmath212 with a similar substitution , and when @xmath32 is even this allows us to remove a power of @xmath24 from @xmath85 and the entries of @xmath84 .",
    "when @xmath102 one can follow the procedure above , using and in place of and ; alternatively , one may switch to a cubic model via the substitution @xmath213 , @xmath214 , which is discussed in the next section .",
    "both methods lead to essentially the same formulae .",
    "we now consider the case @xmath38 with @xmath215 and @xmath216 .",
    "assuming @xmath217 , we obtain the @xmath218 transition matrix @xmath219\\ ] ] with denominator @xmath220 for all admissible primes @xmath221 , the partial product @xmath87 is prime to @xmath10 .    in the cubic case",
    "one can make @xmath222 and @xmath223 with a suitable substitution ; this simplifies the formulae but may increase the size of @xmath23 and @xmath224 . if the cubic @xmath225 has a rational root , one can make @xmath226 by translating the root to zero ( in which case @xmath227 will typically be nonzero ) .",
    "this is usually well worth doing , since it reduces the dimension of @xmath84 from 3 to 2 ( see below ) .",
    "similar remarks apply whenever @xmath32 is odd .",
    "when @xmath226 we have @xmath228 and the @xmath229 transition matrix @xmath230\\ ] ] with denominator @xmath231 for all admissible primes @xmath76 the partial product @xmath87 is prime to @xmath10 .",
    "the computations in genus 2 are similar , except now each hasse  witt matrix has two rows , which we obtain by computing @xmath134 for @xmath232 . for the sake of brevity , we omit the details and list only the denominators @xmath110 ; a sage @xcite script for generating the transition matrices @xmath109 is available at @xcite .    for @xmath233 we get the denominators @xmath234 in the case @xmath235 , one verifies that the last two columns of @xmath236 are @xmath10-integral for @xmath97 , and that @xmath237 is a @xmath10-adic unit except possibly for a single factor of @xmath10 contributed by @xmath238 when @xmath239 or by @xmath240 when @xmath241 ( at most one of these occurs for each @xmath10 ) .",
    "thus the desired row of the hasse ",
    "witt matrix @xmath21 may be computed as the last two entries of @xmath242 similar observations apply to both of the @xmath243 cases , and again one finds that it suffices to work with the moduli @xmath244 ( we omit the details ) .",
    "the denominators for @xmath245 are @xmath246 as above , in all three cases one can arrange to use the moduli @xmath247 .      for @xmath233 we get the denominators @xmath248 for @xmath245 the denominators are @xmath249 and for @xmath250 they are @xmath251 in all three cases it is not difficult to show that by pulling out at most the last three factors from @xmath87 , it suffices to compute the partial products modulo @xmath252 , where @xmath76 .",
    "given a sequence of @xmath253 integer matrices @xmath254 , an @xmath66-dimensional integer row vector  @xmath79 , and a sequence of positive integer moduli @xmath255 , we wish to compute the sequence of reduced row vectors @xmath256 , where @xmath257 for convenience , we define @xmath258 , so @xmath259 is the zero vector , and we let @xmath260 be the identity matrix .",
    "we also make the simplifying assumption that the bound @xmath261 is a power of two , although this is not necessary . in terms of the prime bound @xmath1 of the previous sections , we use @xmath262 , which can be viewed as a bound on @xmath63 .    as in @xcite , we work with complete binary trees of depth @xmath263 with nodes indexed by pairs @xmath264 with @xmath265 and @xmath266 . for each node",
    "we define @xmath267 the values @xmath268 and @xmath269 may be viewed as nodes in a _ product tree _ , in which each node is the product of its children , with leaves @xmath270 and @xmath271 , for @xmath272 .",
    "each vector @xmath273 is the product of @xmath79 and all the matrices @xmath274 that are nodes on the same level and to the left of @xmath269 , reduced modulo @xmath268 . to compute the vectors @xmath275",
    ", we use the following algorithm .    * algorithm * remaindertree    given @xmath276 and @xmath277 , with @xmath261 , compute @xmath278 , and @xmath273 as follows :    1 .",
    "set @xmath279 and @xmath280 , for @xmath281 .",
    "2 .   for @xmath107 from @xmath282 down to 1 : + for @xmath266 , set @xmath283 and @xmath284 .",
    "3 .   set @xmath285 and then for @xmath107 from 1 to @xmath263 : + for @xmath286 set @xmath287    to illustrate the algorithm , let us compute @xmath288 for the odd primes @xmath289 ; this does not correspond to the computation of a hasse  witt matrix , but this makes no difference as far as the remaindertree algorithm is concerned .",
    "we use odd moduli @xmath290 for @xmath291 , except that we set the composite moduli @xmath292 and @xmath293 to 1 , and we use @xmath294 matrices @xmath295 $ ] for @xmath296 , and let @xmath297 $ ] and @xmath298 $ ] . the trees @xmath268 , @xmath269 , and @xmath273 computed by the remaindertree algorithm are depicted below .    at ( -8.5,6 ) ; at ( 0,6 ) ; at ( 8.5,6 ) 1 ;    at ( -10.5,4 ) 105 ; at ( -6.5,4 ) 143 ; at ( -1.8,4 ) 40320 ; at ( 1.8,4 ) 2162160 ; at ( 6.5,4 ) 1 ; at ( 10.4,4 ) 137 ;    at ( -11.5,2 ) 3 ; at ( -9.5,2 ) 35 ; at ( -7.5,2 ) 11 ; at ( -5.6,2 ) 13 ; at ( -3,2 ) 24 ; at ( -1,2 ) 1680 ; at ( 1,2 ) 11880 ; at ( 2.9,2 ) 182 ; at ( 5.5,2 ) 1 ; at ( 7.5,2 ) 24 ; at ( 9.5,2 ) 5 ; at ( 11.5,2 ) 12 ;    at ( -12,0 ) 1 ; at ( -11,0 ) 3 ; at ( -10,0 ) 5 ; at ( -9,0 ) 7 ; at ( -8,0 ) 1 ; at ( -7,0 ) 11 ; at ( -6,0 ) 13 ; at ( -5,0 ) 1 ;    at ( -3.5,0 ) 2 ; at ( -2.5,0 ) 12 ; at ( -1.5,0 ) 30 ; at ( -0.5,0 ) 56 ; at ( 0.5,0 ) 90 ; at ( 1.5,0 ) 132 ; at ( 2.6,0 ) 182 ; at ( 3.5,0 ) 1 ; at ( 5,0 ) 0 ; at ( 6,0 ) 2 ; at ( 7,0 ) 4 ; at ( 8,0 ) 6 ; at ( 9,0 ) 0 ; at ( 10,0 ) 10 ; at ( 11,0 ) 12 ; at ( 12,0 ) 0 ;    ( -8.5,5.5 )  ( -10.5,4.5 ) ; ( -8.5,5.5 )  ( -6.5,4.5 ) ; ( 0,5.5 )  ( -2,4.5 ) ; ( 0,5.5 )  ( 2,4.5 ) ; ( 8.5,5.5 )  ( 10.5,4.5 ) ; ( 8.5,5.5 )  ( 6.5,4.5 ) ;    ( -10.5,3.5 )  ( -11.5,2.5 ) ; ( -10.5,3.5 )  ( -9.5,2.5 ) ; ( -6.5,3.5 )  ( -7.5,2.5 ) ; ( -6.5,3.5 )  ( -5.5,2.5 ) ; ( -2,3.5 )  ( -3,2.5 ) ; ( -2,3.5 )  ( -1,2.5 ) ; ( 2,3.5 )  ( 1,2.5 ) ; ( 2,3.5 )  ( 3,2.5 ) ; ( 6.5,3.5 )  ( 5.5,2.5 ) ; ( 6.5,3.5 )  ( 7.5,2.5 ) ; ( 10.5,3.5 )  ( 9.5,2.5 ) ; ( 10.5,3.5 )  ( 11.5,2.5 ) ;    ( -11.5,1.5 )  ( -12,0.5 ) ; ( -11.5,1.5 )  ( -11,0.5 ) ; ( -9.5,1.5 )  ( -10,0.5 ) ; ( -9.5,1.5 )  ( -9,0.5 ) ; ( -7.5,1.5 )  ( -8,0.5 ) ; ( -7.5,1.5 )  ( -7,0.5 ) ; ( -5.5,1.5 )  ( -6,0.5 ) ; ( -5.5,1.5 )  ( -5,0.5 ) ; ( -3,1.5 )  ( -3.5,0.5 ) ; ( -3,1.5 )  ( -2.5,0.5 ) ; ( -1,1.5 ) ",
    "( -1.5,0.5 ) ; ( -1,1.5 )  ( -0.5,0.5 ) ; ( 1,1.5 )  ( 0.5,0.5 ) ; ( 1,1.5 )  ( 1.5,0.5 ) ; ( 3,1.5 )  ( 2.5,0.5 ) ; ( 3,1.5 )  ( 3.5,0.5 ) ; ( 11.5,1.5 )  ( 12,0.5 ) ; ( 11.5,1.5 )  ( 11,0.5 ) ; ( 9.5,1.5 )  ( 10,0.5 ) ; ( 9.5,1.5 )  ( 9,0.5 ) ; ( 7.5,1.5 )  ( 8,0.5 ) ; ( 7.5,1.5 )  ( 7,0.5 ) ; ( 5.5,1.5 )  ( 6,0.5 ) ; ( 5.5,1.5 )  ( 5,0.5 ) ;    at ( -8.5,-1 ) @xmath268 ; at ( 0,-1 ) @xmath269 ; at ( 8.5,-1 ) @xmath273 ;    [ thm : rtcomplexity ] let @xmath299 be an upper bound on the bit - size of @xmath300 , let @xmath301 be an upper bound on the bit - size of any entry of @xmath79 , let @xmath302 be an upper bound on the bit - size of any @xmath277 and any entry in @xmath303 , and assume that @xmath304 .",
    "the running time of the remaindertree algorithm is @xmath305 and its space complexity is @xmath306    there are @xmath307 bits at each level of the @xmath268 tree . for the @xmath269 tree , observe that the entries of any product @xmath308 have bit - size @xmath309 ; thus there are @xmath310 bits at each level of the @xmath269 tree .",
    "these estimates account for the main terms in the time and space bounds ; for more details see the proofs of ( * ? ? ?",
    "1.1 ) or ( * ? ? ?",
    "we assume classical matrix multiplication throughout , with complexity @xmath311 .",
    "the terms involving @xmath301 cover any additional cost due to the initial reduction of @xmath79 modulo @xmath312 .",
    "the algorithm given in the previous section uses more space than is necessary .",
    "we now describe a more space - efficient approach that is also faster by a significant constant factor . as above",
    ", we assume @xmath261 is a power of two .",
    "our strategy is to pick a parameter @xmath114 , and rather than computing a single remainder tree , separately compute the @xmath313 subtrees corresponding to the bottom @xmath314 layers of the original tree , each of which has height @xmath315 and @xmath316 leaves .    for @xmath317",
    ", we define the @xmath318th tree as follows .",
    "let @xmath319 for @xmath320 and @xmath286 we define @xmath321 , @xmath322 and @xmath323 in terms of the above data , in direct analogy with .",
    "we then have @xmath324 and @xmath325 ; in other words , the @xmath321 and @xmath322 trees are identical to the corresponding subtrees of the original @xmath268 and @xmath269 trees rooted at the node @xmath326 .",
    "the same is true for the @xmath323 tree , namely , we have @xmath327 . to see this ,",
    "observe that @xmath328 and @xmath329 .",
    "therefore @xmath330 for the the remaining nodes , the claim @xmath327 follows by working downwards from the root of the @xmath331 tree .",
    "the idea of the remainderforest algorithm below is to compute each subtree separately , allowing us to reuse space , and to keep track of the vector @xmath332 and the moduli product @xmath333 as we proceed from one subtree to the next .",
    "the remaindertree algorithm may be viewed as a special case of the remainderforest algorithm , using @xmath334 .    *",
    "algorithm * remainderforest    given @xmath335 and @xmath277 , with @xmath261 , and an integer @xmath336 $ ] , compute @xmath337 as follows :    1 .",
    "set @xmath338 and @xmath339 , and let @xmath340 .",
    "2 .   for @xmath318 from @xmath341 to @xmath342 : a.   call remaindertree with inputs @xmath332 , @xmath343 , and @xmath344 + to compute trees @xmath345 ,",
    "@xmath346 , @xmath331 .",
    "b.   set @xmath347 and @xmath348 .",
    "c.   output the values @xmath349 for @xmath350 .",
    "d.   discard @xmath351 , @xmath332 , and the trees @xmath345 ,",
    "@xmath346 , @xmath331 .",
    "we now bound the complexity of the remainderforest algorithm .",
    "we do not include the size of the input in our space bound ; in the context of computing hasse ",
    "witt matrices the input matrices @xmath352 are dynamically computed as they are needed , in blocks of size @xmath353 .",
    "[ thm : rfcomplexity ] let @xmath299 be an upper bound on the bit - size of @xmath354 such that @xmath355 is an upper bound on the bit - size of @xmath356 for all @xmath318 .",
    "let @xmath301 be an upper bound on the bit - size of any entry of @xmath79 , let  @xmath302 be an upper bound on the bit - size of any @xmath277 and any entry in @xmath303 , and assume that @xmath304 .",
    "the running time of the remainderforest algorithm is @xmath357 and its space complexity is @xmath358    the time complexity of step 1 is @xmath359 .",
    "there are @xmath313 calls to remaindertree in step 2 , each of which takes time @xmath360 by theorem  [ thm : rtcomplexity ] , since the bit - size of any entry of any @xmath361 is bounded by @xmath307 .",
    "the cost of step  2b is bounded by @xmath362 , thus each invocation of step 2 costs @xmath363 multiplying by @xmath313 yields the desired time bound .",
    "the first term in the space bound matches the corresponding term in theorem  [ thm : rtcomplexity ] ; the second term bounds the space needed for step 1 ( and the output ) , and dominates the second term in the space bound of theorem  [ thm : rtcomplexity ] .",
    "with @xmath364 we have @xmath365 , and the bounds in theorem [ thm : rfcomplexity ] reduce to those of theorem [ thm : rtcomplexity ] . with @xmath366",
    "the remainderforest algorithm has essentially optimal space complexity @xmath367 ( matching the size of its output ) , but its time complexity is then quasi - quadratic in @xmath82 , rather than quasi - linear .",
    "the intermediate choice @xmath368 yields a time complexity that is at least as good as that of the remaindertree algorithm ( and may be smaller by a significant constant factor ) , but with the space complexity improved by a factor of @xmath369 .",
    "we will see below that for computing hasse ",
    "witt matrices , @xmath370 is somewhat larger than  @xmath299 , and this implies that an even better choice is @xmath371 , reducing the space complexity by a further factor of @xmath369 .",
    "see table  [ table : hwtimingsk ] in  [ sec : details ] for an explicit example .",
    "the space complexity can be further reduced using a time - space trade - off as described in ( * ? ? ?",
    "1.2 ) . in practice",
    "we find that when computing hasse ",
    "witt matrices using the remainderforest approach , for @xmath149 and the range of @xmath1 of interest to us , space is not a limiting factor and no time - space trade - off is necessary .",
    "[ sec : details ] for further details .",
    "we now give a complete algorithm for computing the hasse ",
    "witt matrix @xmath21 of a hyperelliptic curve at all admissible primes @xmath31 ; as noted above , the bound @xmath1 on @xmath10 corresponds to a bound of @xmath262 on @xmath51 . while the basic approach has been explained in the previous sections , to achieve the best space complexity we must interleave the remainderforest computations involving the matrices  @xmath84 and denominators @xmath85 , so we use remaindertree to directly handle each subtree , rather than using remainderforest as a black box",
    "this also allows us to more carefully control the size of the moduli that we use , as discussed further below .    *",
    "algorithm * computehassewittmatrices    given a hyperelliptic curve @xmath372 of genus @xmath3 , compute the hasse ",
    "witt matrices @xmath21 for admissible primes @xmath31 as follows :    1 .",
    "construct a list @xmath373 of the admissible primes @xmath374 .",
    "2 .   for @xmath107 from 1 to @xmath3 : a.   compute @xmath375^{r\\times r}$ ] and @xmath376 $ ] satisfying @xmath377 , as in ",
    "[ sec : rr ] .",
    "b.   use computehassewittrows below to compute the @xmath107th row of @xmath21 for all @xmath378 .",
    "3 .   output the matrices @xmath21 .    as discussed in ",
    "[ sec : rr ] , in order to minimize the power of @xmath76 that we use as our moduli , let @xmath198 and @xmath379 be integers such that @xmath380 does not divide @xmath381 for all sufficiently large admissible @xmath10 . for @xmath149 using @xmath382 and @xmath383 suffices ; in general @xmath198 and @xmath379 are both @xmath384 .",
    "our strategy is to compute the partial products @xmath385 and @xmath381 modulo @xmath380 using remainder trees , and to handle the last @xmath379 values of @xmath386 and @xmath94 separately ; this allows us to use a smaller value of @xmath198 than would otherwise be possible . in the context of the remaindertree algorithm , this means shifting the moduli @xmath387 by @xmath379 places to the left , relative to the @xmath352 .",
    "* algorithm * computehassewittrows    given @xmath388 $ ] , positive integers @xmath389 , a list @xmath373 of admissible primes @xmath390 , a matrix @xmath375^{r\\times r}$ ] , and @xmath391 $ ] , compute the @xmath107th row of @xmath21 for all @xmath378 as follows :    1 .",
    "compute @xmath392 , let @xmath393 , and let @xmath394 be the @xmath395th standard basis vector .",
    "fix @xmath396 , let @xmath340 , and for @xmath318 from 0 to @xmath342 : a.   for @xmath397 , set @xmath398 if @xmath378 and @xmath150 otherwise",
    ". b.   compute @xmath399 and @xmath400 for @xmath401 . c.   call remaindertree with inputs @xmath402 to compute @xmath403 , @xmath404 , and @xmath405 , where @xmath120 ranges over integers from @xmath406 to @xmath407 .",
    "d.   call remaindertree with inputs @xmath408 to compute @xmath409 and @xmath410 , where @xmath120 ranges over integers from @xmath406 to @xmath407 .",
    "e.   set @xmath411 , @xmath412 , and @xmath413 .",
    "f.   compute @xmath414 for @xmath397 such that @xmath415 , and extract the @xmath107th row of @xmath21 as the last @xmath3 entries of @xmath416 .",
    "3 .   output the @xmath107th row of each of the matrices @xmath21 for @xmath378 .",
    "we now prove the main result announced in the introduction , which bounds the time and space complexity of computehassewittmatrices by @xmath417 and @xmath418 , respectively , assuming @xmath53 .",
    "the time and space needed to enumerate the primes in @xmath419 $ ] may be bounded by @xmath420 and @xmath421 , respectively , via ( * ? ? ?",
    "2.3 ) , by dividing the interval @xmath419 $ ] into @xmath422 subintervals .",
    "it follows from chebyshev s bound that @xmath373 uses @xmath421 space .",
    "the complexity of computehassewittrows may be bounded as in the proof of theorem  [ thm : rfcomplexity ] ; the only new elements are steps 2a and 2b , which have a total time complexity of @xmath423 , and step 2f , whose complexity is lower .",
    "this is within our desired time bound , and the space complexity of these steps is dominated by the size of the output .",
    "we now proceed as in the proof of theorem  [ thm : rfcomplexity ] .",
    "we have @xmath424 ) , since @xmath425 , and we note that the requirement that @xmath355 bound the bit - size of the product @xmath426 is satisfied for any @xmath427 ; these facts follow from the prime number theorem .",
    "further , @xmath262 , @xmath428 , @xmath429 , @xmath430 , and @xmath431 , since the polynomials in @xmath432 and @xmath433 all have degree @xmath384 and coefficients of bit - size @xmath434 , and the moduli have bit - size @xmath435 .",
    "this yields the time bound @xmath436 and the space bound @xmath437 this yields @xmath438 time and @xmath439 space bounds for computehassewittrows , which is called @xmath3 times .",
    "we implemented the computehassewittmatrices algorithm in c , using the ` gcc ` compiler  @xcite and the gnu multiple - precision arithmetic library ( gmp ) @xcite .",
    "for the crucial operation of multiplying matrices with very large integer entries , we used a customized fft implementation as described below .",
    "the customized fft uses the standard `` small primes '' approach , as outlined in ( * ? ? ?",
    "* ch .  8) . to compute a product @xmath440 , where @xmath441",
    ", we choose a parameter @xmath442 and write @xmath443 and @xmath444 , where @xmath445 $ ] have coefficients bounded by @xmath446 .",
    "we then compute the polynomial product @xmath447 $ ] and obtain @xmath440 as @xmath448 . to compute @xmath449 ,",
    "we choose four suitable 62-bit primes @xmath450 and compute @xmath451 in @xmath452 $ ] for each @xmath107 , and then reconstruct @xmath449 via the chinese remainder theorem .",
    "the parameter @xmath453 is chosen as large as possible so that the coefficients of @xmath449 remain bounded by @xmath454 .",
    "multiplication in @xmath452 $ ] is achieved by using fourier transforms ( number - theoretic transforms ) over @xmath455 .",
    "this requires @xmath456 , where @xmath457 is the transform length .",
    "our implementation uses optimized modular arithmetic as in  @xcite , truncated fourier transforms to avoid power - of - two jumps in running times @xcite , and ideas from @xcite to improve locality .",
    "to multiply matrices we use the same strategy . if @xmath458 and @xmath459 are @xmath73 integer matrices ( recall that @xmath460 or @xmath461 , where @xmath32 is the degree of the polynomial @xmath25 in the curve equation @xmath151 ) , we write @xmath443 and @xmath444 where now @xmath462 and @xmath463 are matrices of polynomials with small coefficients , or equivalently polynomials with matrix coefficients",
    ". we then perform @xmath464 forward transforms , multiply the resulting fourier coefficients ( each coefficient is an @xmath73 matrix over @xmath465 , and perform @xmath466 inverse transforms , with a final linear - time substitution generating the desired product @xmath440 .",
    "our implementation allows the polynomial entries to have signed coefficients , so that we can directly handle matrices @xmath458 and @xmath459 containing a mixture of positive and negative entries .",
    "matrix - vector products are handled similarly .",
    "the main advantage of this approach over a straightforward gmp implementation is that we require only @xmath467 transforms rather than @xmath311 . in our computations",
    "the fourier transforms make up the bulk of the time spent on matrix multiplication .",
    "the timings listed in this section were obtained using an 8-core intel xeon e5 - 2670 cpu running at 2.60ghz , with 20 mb of cache and 32 gb of ram ; in each case we list the total cpu time , in seconds , for a single - threaded implementation .",
    "table  [ table : hwtimings ] lists timings for increasing values of @xmath1 with @xmath468 and each of the three possible values of @xmath66 ; as in ",
    "[ sec : rr ] we have @xmath469 table  [ table : hwspace ] gives the corresponding memory consumption for each case .",
    "@rrrrrrrrrr@ & & & + ( r)2 - 4(r)5 - 7(r)8 - 10 @xmath1&@xmath470&@xmath471&@xmath472&@xmath472&@xmath473&@xmath474&@xmath474&@xmath475&@xmath476 + @xmath477&@xmath478&@xmath478&@xmath478&@xmath478&@xmath478&1&1&2&3 + @xmath479&@xmath478&@xmath478&@xmath478&1&1&2&3&6&9 + @xmath480&@xmath478&@xmath478&1&2&3&5&8&14&21 + @xmath481&@xmath478&1&1&4&7&12&20&34&52 + @xmath482&1&2&4&9&17&29&49&81&123 + @xmath483&1&4&8&22&40&69&116&192&294 + @xmath484&3&9&20&50&94&166&282&459&694 + @xmath485&7&21&47&123&227&398&667&1085&1633 + @xmath486&17&49&114&287&534&946&1560&2540&3810 + @xmath487&38&115&268&645&1240&2230&3660&5940&9100 + @xmath488&89&271&641&1510&2920&5260&8490&13800&20600 + @xmath489&202&628&1470&3430&6740&11800&19600&31800&47200 + @xmath490&470&1475&3390&7930&15800&27400&44700&72900&107000 +    the impact of varying the parameter @xmath114 , which determines the number @xmath313 of subtrees used in the remainderforest algorithm , is illustrated for a particular example with @xmath491 and @xmath492 in table  [ table : hwtimingsk ] . in all of our other tests",
    "the parameter @xmath114 was chosen to optimize time ; the optimal choice of @xmath114 varies with both @xmath1 and @xmath66 and in our tests ranged from @xmath36 to @xmath40 .",
    "as can be seen in table  [ table : hwtimingsk ] , the value of @xmath114 that optimizes time also yields a space utilization that is much better than would be achieved by the original remaindertree algorithm ( the case @xmath364 ) . even in our largest tests ,",
    "the time - optimal value of @xmath114 yielded a space utilization under 20 gb , well within the 32 gb available on our test system .",
    "by contrast , the original remaindertree algorithm would have required more than 1 tb of memory in our larger tests .",
    "@rrrrrrrrrr@ & & & + ( r)2 - 4(r)5 - 7(r)8 - 10 @xmath1&@xmath470&@xmath471&@xmath472&@xmath472&@xmath473&@xmath474&@xmath474&@xmath475&@xmath476 + @xmath477&@xmath478&@xmath478&@xmath478&@xmath478&@xmath478&@xmath478&@xmath478&@xmath478&1 + @xmath479&@xmath478&@xmath478&1&1&1&1&4&6&8 + @xmath480&1&1&1&3&5&7&9&12&16 + @xmath481&2&2&4&6&10&14&18&25&33 + @xmath482&5&5&8&13&20&29&38&51&69 + @xmath483&11&11&17&27&41&59&79&106&144 + @xmath484&16&21&35&53&83&121&162&220&295 + @xmath485&32&42&71&108&169&249&332&450&610 + @xmath486&63&84&145&218&346&517&682&942&1258 + @xmath487&124&170&307&444&716&1064&1396&1940&2614 + @xmath488&247&634&634&920&1467&2195&2869&3980&5385 + @xmath489&498&708&1300&1890&3014&3398&5865&8231&11162 + @xmath490&1002&1440&2679&3843&6478&6950&12134&12925&17137 +    tables  [ table : smalljac ] compares the performance of the new algorithm ( in the column labelled ` hassewitt ` ) to the ` smalljac ` implementation described in @xcite . in genus 2 the ` smalljac ` implementation relies primarily on group computations in the jacobian of the curve , as described in @xcite , and the current version @xcite includes additional improvements from @xcite . as can be seen in the table , the new algorithm surpasses the performance of ` smalljac ` when @xmath1 is between @xmath482 and  @xmath483 and is more than 12 times faster for @xmath61 .    as noted in @xcite , for genus 3 curves , harvey s optimization @xcite of kedlaya s algorithm  @xcite is faster than using group computations in the jacobian for @xmath493 .",
    "table  [ table : hypellfrob ] compares the performance of the new algorithm to an implementation based on harvey s ` hypellfrob ` library  @xcite , using one digit of @xmath10-adic precision ( sufficient to compute the hasse ",
    "witt matrix ) . in genus 3",
    "the new algorithm is substantially faster than ` hypellfrob ` for all the values of @xmath1 that we tested , and more than 20 times faster for @xmath61 .",
    "we did not include a column for the case @xmath476 in table  [ table : hypellfrob ] because the ` hypellfrob ` library requires  @xmath32 to be odd .",
    "@rrrrrrr@ & & & + ( r)2 - 3(r)4 - 5(r)6 - 7 @xmath1&`hassewitt`&`smalljac`&`hassewitt`&`smalljac`&`hassewitt`&`smalljac ` + @xmath477&0.2&0.2&0.4&0.2&0.7&0.3 + @xmath479&0.6&0.5&1.1&0.6&1.9&0.7 + @xmath480&1.4&1.7&2.8&1.7&4.9&2.0 + @xmath481&3.5&5.6&6.8&5.6&11.9&6.4 + @xmath482&8.6&19.9&16.8&20.2&29.0&22.1 + @xmath483&20.6&76.0&39.7&76.4&69.1&83.4 + @xmath484&48.9&257&94.4&257&166&284 + @xmath485&123&828&227&828&398&914 + @xmath486&287&2630&534&2630&946&2900 + @xmath487&645&8560&1240&8570&2230&9520 + @xmath488&1510&28000&2920&28000&5260&31100 + @xmath489&3430&92200&6740&92300&11800&102000 + @xmath490&7930&314000&15800&316000&27400&349000 +    @rrrrr@ & & + ( r)2 - 3(r)4 - 5 @xmath1&`hassewitt`&`hypellfrob`&`hassewitt`&`hypellfrob ` + @xmath477&1.3&6.7&2.0&6.8 + @xmath479&3.4&15.5&5.5&15.6 + @xmath480&8.3&37.4&13.6&37.6 + @xmath481&20.2&95.1&33.3&95.0 + @xmath482&48.6&249&80.4&250 + @xmath483&116&680&192&681 + @xmath484&282&1910&459&1920 + @xmath485&667&5450&1090&5460 + @xmath486&1560&16200&2540&16300 + @xmath487&3660&49400&5940&49400 + @xmath488&8490&152000&13800&152000 + @xmath489&19600&467000&31800&467000 + @xmath490&44700&1490000&72900&1490000 +      alin bostan , pierrick gaudry , and ric schost , _ linear recurrences with polynomial coefficients and application to integer factorization and cartier - manin operator _",
    ", siam j. comput .",
    "* 36 * ( 2007 ) , no .  6 , 17771806 .",
    "mr 2299425 ( 2008a:11156 )      francesc fit , kiran  s. kedlaya , vctor rotger , and andrew  v. sutherland , _ sato - tate distributions and galois endomorphism modules in genus @xmath41 _ , compos .",
    "* 148 * ( 2012 ) , no .  5 , 13901442 .",
    "mr 2982436      pierrick gaudry , david kohel , and benjamin smith , _ counting points on genus @xmath41 curves with real multiplication _ , advances in cryptology ",
    "asiacrypt 2011 , lecture notes in comput .",
    "7073 , springer , heidelberg , 2011 , pp .",
    "mr 2935020          david harvey , _ ` hypellfrob ` software library _ , version 2.1.1 available at http://web.maths.unsw.edu.au/~davidharvey / code / hypellfrob / hypellfrob-2.% 1.1.tar.gz[http://web.maths.unsw.edu.au/~davidharvey / code / hypellfrob / hypellfrob-2.% 1.1.tar.gz ] , 2008 .",
    "kiran  s. kedlaya and andrew  v. sutherland , _ computing @xmath28-series of hyperelliptic curves _ , algorithmic number theory eighth international symposium ( ants viii ) , lecture notes in comput .",
    "5011 , springer , berlin , 2008 , pp .",
    "mr 2467855 ( 2010d:11070 )    to3em , _ hyperelliptic curves , @xmath28-polynomials , and random matrices _ , arithmetic , geometry , cryptography and coding theory , contemp . math .",
    "487 , amer .",
    "soc . , providence , ri , 2009 , pp .",
    "mr 2555991 ( 2011d:11154 )    ju .",
    "i. manin , _ the hasse - witt matrix of an algebraic curve _ , ams translations , series 2 * 45 * ( 1965 ) , 245264 , ( originally published in izv . akad .",
    "nauk sssr ser",
    "* 25 * ( 1961 ) 153172 ) .",
    "mr 0124324 ( 23 # a1638 )"
  ],
  "abstract_text": [
    "<S> we present an efficient algorithm to compute the hasse  witt matrix of a hyperelliptic curve @xmath0 modulo all primes of good reduction up to a given bound @xmath1 , based on the average polynomial - time algorithm recently introduced by harvey . an implementation for hyperelliptic curves of genus 2 and 3 is more than an order of magnitude faster than alternative methods for @xmath2 . </S>"
  ]
}