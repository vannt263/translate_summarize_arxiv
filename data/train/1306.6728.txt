{
  "article_text": [
    "the _ min - cost flow _",
    "problem is a central problem in computer science and in combinatorial optimization , and one of the most important network flow problems .",
    "there are many applications and many algorithms for this problem .",
    "we refer the reader to the book of ahuja et al .",
    "@xcite for a survey . in this paper",
    "we study the min - cost flow problem in _",
    "planar networks_. in the min - cost flow problem every arc of the network has a cost , and our objective is to find a _",
    "feasible _ flow of minimum cost .",
    "a flow is feasible if it obeys the capacities and the lower bounds of the arcs and the supplies and demands of the vertices .",
    "every plane graph has an associated _ geometric dual plane graph _ such that every primal face corresponds to a dual vertex , and every primal vertex corresponds to a dual face .",
    "every linear programming problem has an associated _ linear programming dual problem _ such that every primal constraint corresponds to a dual variable , and every primal variable corresponds to a dual constraint .",
    "the primal problem has a finite optimal solution if and only if the dual problem has one , and the values of the objective functions of both optimal solutions are equal in this case .",
    "we start with a min - cost circulation problem , a variant of the min - cost flow problem , in a planar network .",
    "we express the problem as a problem in the geometric dual graph .",
    "then , we find the linear programming dual of this problem .",
    "this turns out to be a min - cost flow problem , in a planar network obtained from the dual graph by possibly doubling some arcs and reversing the orientation of some arcs .",
    "the costs of the original problem define the balance constraints in the new problem , and the capacities of the original problem define the costs in the new problem .",
    "there are two possible ways in which one might exploit this transformation .",
    "first , we can exploit the trade between capacities and costs .",
    "second , we can exploit the replacement of the original graph by its dual graph .",
    "this transformation is presented in section  [ sec : reduce ] .",
    "we take advantage of the simple structure of the dual graphs of outerplanar graphs , and show a min - cost flow algorithm for an outerplanar network with @xmath1 vertices that runs in @xmath0 time using our transformation .",
    "this algorithm is presented in section  [ sec : outerplanar ] .",
    "khuller et al .",
    "@xcite studied the structure of the solution space of the planar min - cost circulation problem , they suggested few directions which might lead to efficient algorithms for the problem .",
    "one of the directions which they suggested is the dual graph formulation of the min - cost circulation problem which we follow , see problem ( [ eq : geo ] ) in section  [ sec : reduce ] below .",
    "the same approach was previously used for the maximum flow problem by hassin @xcite , followed by hassin and johnson @xcite , johnson @xcite , and miller and naor @xcite .",
    "we note that there are other maximum flow algorithms that use planar graph duality in other ways .",
    "chambers et al .",
    "@xcite extended the same approach to graphs embedded in a surface of bounded genus .",
    "they gave a maximum flow algorithm for bounded - genus graphs , and also a min - cost circulation algorithm for finding the circulation with minimum cost among circulations satisfying a certain topological property .",
    "this last algorithm also uses the linear programming dual of the problem in the geometric dual graph .",
    "c|c|c|c| & time bound & restriction & reference + & @xmath2 & & @xcite + & @xmath3 & positive arc costs & @xcite + & @xmath4 & positive arc costs & @xcite + \\{22pt & @xmath5 & uncapacitated symmetric networks & @xcite + & @xmath6 & finite capacities & @xcite + \\{22pt & @xmath7 & & @xcite + & @xmath8 & & @xcite + & @xmath9 & & @xcite + & @xmath10 ( expected ) & & @xcite + & @xmath11 & bidirectional cycle & @xcite + & @xmath12 & unidirectional cycle & @xcite + & @xmath0 & outerplanar networks & section [ sec : outerplanar ] +    there are several known algorithms for the min - cost flow problem in planar networks .",
    "we summarize them in table  [ tbl : results ] .",
    "we denote by @xmath13 the largest absolute value of an arc cost in a network with integral costs , and by @xmath14 the largest among the arc capacities , the lower bounds on the flows in the arcs , the vertex supplies and the vertex demands , in a network in which these values are integral .",
    "we denote by @xmath15 the total cost of the min - cost flow in a network with positive arc costs .",
    "we let @xmath16 be the maximum vertex degree in the network , and @xmath17 be the maximum face size ( number of edges along the boundary of the face ) .",
    "imai and iwano @xcite gave an algorithm based on the interior point method for linear programming whose running time is @xmath2 and its space requirement is @xmath11 .",
    "they also gave a parallel algorithm running in @xmath18 parallel time using @xmath19 processors .",
    "tarjan  @xcite proposed a pivot selection rule for the primal simplex algorithm for the min - cost circulation problem that has a polynomial bound on the number of pivots in planar networks .",
    "more recently , vaidyanathan and ahuja @xcite studied the min - cost flow problem in a cycle , which is a special case of a planar network , they gave an @xmath11 time algorithm for bidirectional cycle and an @xmath12 time algorithm for unidirectional cycle .",
    "cornelsen and karrenbauer @xcite studied the problem in the context of graph drawing , they showed an implementation of the primal - dual algorithm for the min - cost flow problem in planar networks with positive arc costs running in @xmath4 time .",
    "they also showed an @xmath3 time algorithm for networks with positive arc costs and an @xmath5 time algorithm for uncapacitated symmetric directed planar networks .",
    "cornelsen et al .",
    "@xcite studied the problem in the context of image processing and gave an @xmath6 algorithm for the problem when all arcs have finite integral capacities .",
    "this last algorithm allows the network to have an additional vertex that violates its planarity .",
    "the time bounds of some standard network flow algorithms for general networks improve when we specialize them for planar networks .",
    "for example , using the linear - time shortest path algorithm for planar graphs with non - negative weights of henzinger et al .",
    "@xcite and exploiting the fact that a simple planar graph has @xmath12 arcs , we get that the capacity scaling algorithm of edmonds and karp  @xcite runs in @xmath7 time and the strongly polynomial time algorithm of orlin  @xcite runs in @xmath9 time .",
    "for the cost scaling algorithm of rck  @xcite ( see also bland and jensen  @xcite ) we can use the linear - time algorithm for maximum flow in a planar network where the source and the sink are adjacent @xcite and get an @xmath8 time bound .",
    "also , the randomized algorithm of daitch and spielman @xcite has @xmath10 expected running time , where the @xmath20 notation hides factors asymptotically less than @xmath21 for all @xmath22 .",
    "other min - cost flow algorithms also have better time bounds for planar networks , but these bounds are dominated by the last four algorithms .",
    "interestingly , if we apply our transformation to a planar network of the special kind that the @xmath6 time algorithm @xcite expects as an input , in which all arcs have finite integral capacities , we get a planar network of the special kind that the @xmath5 time algorithm @xcite excepts as an input , which is uncapacitated and symmetric .",
    "the running times of both algorithms are equivalent , since @xmath14 and @xmath13 swap their values , and @xmath16 and @xmath17 swap their values by our transformation .",
    "similarly , the @xmath7 time bound of the capacity scaling algorithm @xcite is equivalent to the @xmath8 time bound of the cost scaling algorithm @xcite under our transformation .",
    "the linear programming dual of the min - cost flow problem is well studied .",
    "many algorithms for the problem use a dual approach .",
    "we refer the reader to the books of ahuja et al .",
    "* section  9.4 ) and schrijver ( * ? ? ?",
    "* section  12.4 ) for a background on the dual min - cost flow problem .",
    "we consider a directed planar graph @xmath23 with @xmath1 vertices .",
    "we assume that the graph is given with a fixed embedding such that no arc crosses another , that is , it is a _",
    "plane graph_. such an embedding can be found in linear time @xcite .",
    "we assume that the graph is embedded on a sphere , so it has no infinite face , this simplifies the geometric dual formulation of our problem .",
    "an _ outerplanar _",
    "graph is a planar graph that has an embedding with a face @xmath24 such that every vertex of the graph is incident to @xmath24 .",
    "every plane graph @xmath25 with face set @xmath26 has an associated _ dual graph _ @xmath27 .",
    "each vertex of @xmath28 corresponds to a face of @xmath23 .",
    "two dual vertices are adjacent if and only if the corresponding primal faces share a common arc .",
    "this way , every arc @xmath29 has a _ dual arc _ @xmath30 .",
    "the dual arc @xmath31 is oriented from the face on the left - hand side of @xmath32 to face on its right - hand side .",
    "see figure  [ fig : dualgraph ] .",
    "two arcs that are incident to the same pair of vertices are _ parallel _ if they are oriented in the same direction and _ antiparallel _ otherwise .",
    "we assume that the input graph @xmath23 is a _",
    "simple graph_. that is , @xmath23 does not have any parallel arcs or self - loops .",
    "this is a standard assumption on inputs for flow algorithms ( see for example @xcite ) , if this is not the case then we can _ subdivide _ any arc parallel to another and introduce a new vertex between the two new arcs . since @xmath23 is simple and planar ,",
    "the number of arcs in @xmath23 is @xmath12 .",
    "we note that some of the graphs that we create during our algorithms are not necessarily simple , however their sizes are always @xmath12 . for a vertex @xmath33 , we denote by @xmath34 the set of arcs emanating from @xmath33 and by @xmath35 the set of arcs terminating at @xmath33 .",
    "a flow network consists of a graph @xmath36 .",
    "every arc @xmath29 has an associated _ cost _ @xmath37 which might be negative , a _ capacity _ @xmath38 which can be @xmath39 , and a _ lower bound _",
    "@xmath40 such that @xmath41 .",
    "every vertex @xmath42 has an associated _ balance _",
    "@xmath43 such that @xmath44 .",
    "we call @xmath45 the _ supply _ of @xmath33 if @xmath46 or the _ demand _ of @xmath33 if @xmath47",
    ". we do not distinguish between the flow network and its underlying graph in our notation , and denote both by @xmath23 .",
    "one formulation of the _ min - cost flow _",
    "problem is : @xmath48 subject to @xmath49 we use two additional formulations of the problem , both are equivalent to the formulation above .",
    "one is the _ min - cost circulation _",
    "problem , in which @xmath50 for every @xmath42 and the balance constraints are called _",
    "conservation constraints_. the other is the _ min - cost transshipment _ problem , in which @xmath51 and @xmath52 for every @xmath29 .",
    "there is a simple transformation from the min - cost flow problem to the min - cost transshipment problem which replaces the capacity constraints by balance constraints by subdividing capacitated arcs ( see for example ( * ? ? ?",
    "* section  2.4 ) ) .",
    "miller and naor @xcite gave a planarity - preserving transformation from the min - cost flow problem to the min - cost circulation problem that replaces balance constraints by capacity constraints by adding parallel arcs to the graph , they describe this transformation for the maximum flow problem but it is easy to generalize it to the min - cost flow problem , this transformation might increase the maximum value of a capacity or a lower bound to @xmath53 .",
    "an alternative transformation , which does not increase the maximum value of a capacity or a lower bound , first finds a flow that satisfies the balance constraints and then solves the min - cost circulation problem in the residual network ( see definition next ) . as miller and",
    "naor @xcite showed , we can find such a flow using a shortest path algorithm with negative arc weights .",
    "this incurs an @xmath54 running time overhead using the algorithm of mozes and wulff - nilsen @xcite . for outerplanar graphs",
    "however , the shortest path computation takes only @xmath12 time using the algorithm of frederickson @xcite .",
    "the _ residual network _ of a flow network @xmath55 with respect to a flow function @xmath56 that respects the capacity constraints , denoted by @xmath57 , is defined as follows .",
    "the vertex set of @xmath57 is @xmath58 . for every arc @xmath29 with @xmath59",
    ", @xmath57 contains the arc @xmath32 with cost @xmath37 , capacity @xmath60 and lower bound @xmath61 . in addition , if @xmath62 , then @xmath57 also contains the arc @xmath63 antiparallel to @xmath32 with cost @xmath64 , capacity @xmath65 and lower bound of @xmath61 .",
    "we begin with the min - cost circulation problem in a planar network @xmath55 with face set @xmath26 , cost function @xmath66 , capacity function @xmath67 , and lower bound function @xmath68 .",
    "[ eq : circ ] @xmath48 subject to @xmath69    see figure  [ fig : circ ] . for every arc @xmath32 ,",
    "we have @xmath70 , however @xmath38 might be @xmath39 .",
    "if @xmath52 we say that @xmath32 is _ uncapacitated _ , and the capacity constraint  ( [ eq : circ - capacity ] ) of @xmath32 is restricted to @xmath71 .",
    "is @xmath72 , or equivalently @xmath73 . ]",
    "an alternative way to present problem  ( [ eq : circ ] ) is by using _ antisymmetric flow _ formulation . for every arc @xmath74",
    "we define two opposite darts  a forward dart @xmath75 which is oriented in the same direction as the arc @xmath32 and has @xmath76 and @xmath77 , and a backward dart @xmath78 which is oriented in the opposite direction , from @xmath33 to @xmath67 , with @xmath79 and @xmath80 .",
    "the antisymmetry constraint requires that @xmath81 .",
    "we denote the set of darts @xmath82 by @xmath83 .",
    "the antisymmetric formulation of the min - cost circulation problem follows .",
    "[ eq : anti ] @xmath84 subject to @xmath85    again , for uncapacitated darts we do not have the capacity constraint ( [ eq : anti - capacity ] ) .",
    "it is easy to verify that problem  ( [ eq : circ ] ) and problem  ( [ eq : anti ] ) are equivalent . in problem ( [ eq : anti ] ) darts have only upper bounds ( [ eq : anti - capacity ] ) and each arc has antisymmetric costs in both directions .",
    "these properties simplify the following representation of the problem using the geometric dual graph .    in the dual graph ,",
    "the arc @xmath31 which corresponds to @xmath32 also defines two darts .",
    "the dart @xmath86 dual to @xmath75 and the dart @xmath87 dual to @xmath78 .",
    "we denote by @xmath88 the set of dual darts @xmath89 .",
    "for simplicity of notation , for a dart @xmath90 with dual dart @xmath91 we denote @xmath92",
    ".    we can decompose any circulation in @xmath23 into clockwise cycles of flow around the faces of @xmath23 , since the faces constitute a cycle basis for the graph .",
    "the flow around each face by itself might by infeasible , but the sum of all cycles is a feasible circulation .",
    "the cost of sending one unit of flow clockwise around the face @xmath93 is the total cost of all darts on the cycle going clockwise around @xmath93 . in other words ,",
    "we take the cost of every arc @xmath32 such that @xmath93 is on its right - hand side and the negation of the cost of every arc @xmath32 such @xmath93 is on its left - hand side .",
    "we denote the _ cost of the face @xmath93 _ by @xmath94 .",
    "this yields the following geometric dual formulation of the problem , which was first presented by khuller et al .",
    "@xcite :    .",
    "the label of every dual vertex @xmath93 is @xmath94 , the label of every arc @xmath32 is @xmath95 . ]",
    "[ eq : geo ] @xmath96 subject to @xmath97    that is , the total cost of the flow is the total cost of the flow around the faces , where the difference in the amount of flow around two adjacent faces @xmath93 and @xmath98 is bounded by the capacity of the dart @xmath90 with @xmath98 on its left and @xmath93 on its right",
    ". see figure  [ fig : geodual ] .",
    "again , we do not create capacity constraints for uncapacitated darts .",
    "our next step is to define the linear programming dual of ( [ eq : geo ] ) .",
    "we change the objective function ( [ eq : geo - object ] ) to @xmath99 and get an equivalent maximization problem , so that the dual problem is a minimization problem .",
    "problem  ( [ eq : geo ] ) has a constraint for every capacitated dart .",
    "we define a graph @xmath100 whose vertex set @xmath26 is the same as the vertex set of @xmath28 , which is the face set of @xmath23 , and its arc set @xmath101 contains an arc for every capacitated dart of @xmath88 .",
    "it follows that @xmath102 has an arc for every variable of the linear programming dual problem .",
    "it is easy to obtain a planar embedding of @xmath102 from the embedding of @xmath28 . for an arc @xmath103",
    ", the arc of @xmath101 corresponding to the dart @xmath78 gets the embedding of @xmath32 , but in a reverse direction ( this arc always exists since @xmath32 must have a lower bound constraint ) . if the dart @xmath75 is also capacitated , then the corresponding arc of @xmath101 is embedded in parallel to the arc corresponding to @xmath78 , in the proper direction .",
    "the linear programming dual of problem ( [ eq : geo ] ) is now :    [ eq : dual ] @xmath104 subject to @xmath105    where @xmath38 for @xmath106 in the objective function ( [ eq : dual - object ] ) is the upper capacity of the dart @xmath107 corresponding to @xmath32 .",
    "notice that we multiplied ( [ eq : dual - balance ] ) by @xmath108 , to get balance constraints of the standard form .",
    "see figure  [ fig : lpd ] .",
    ". the label of each vertex @xmath93 is its balance , the label of each arc @xmath32 is its cost . ]",
    "problem  ( [ eq : dual ] ) is the min - cost transshipment problem for the planar network @xmath102 with balance vector @xmath66 and cost function @xmath67 .",
    "we created at most two separate arcs in @xmath102 for the two darts @xmath86 and @xmath87 in @xmath88 corresponding to a single arc @xmath32 in the input network @xmath23 of the original problem .",
    "therefore the number of arcs in @xmath102 may be larger than the number of arcs in @xmath23 by at most a factor of @xmath109 .",
    "some min - cost flow algorithms that solve problem  ( [ eq : dual ] ) use a dual approach and thus also produce a solution to the dual min - cost flow problem  ( [ eq : geo ] ) .",
    "if this is not the case , then we can get a solution for problem  ( [ eq : geo ] ) by running a single - source shortest path algorithm ( with negative arc weights ) in the residual network with respect to the solution of problem  ( [ eq : dual ] ) , using costs as lengths ( see for example ( * ? ? ?",
    "* section  9.5 ) ) .",
    "this takes @xmath54 time using the algorithm of mozes and wulff - nilsen @xcite , or @xmath12 time if the network is outerplanar using the algorithm of frederickson @xcite .",
    "once we have a solution for problem  ( [ eq : geo ] ) it is straightforward to obtain a solution for the original problem  ( [ eq : circ ] ) , since the flow in an arc @xmath32 is the difference between the values of @xmath110 for the face to the right of @xmath32 and the face to the left of @xmath32 .",
    "in this section we present an algorithm for the min - cost flow problem in outerplanar networks .",
    "we assume without loss of generality that the underlying undirected graph is biconnected , since we can solve the min - cost flow problem in every biconnected component separately , by updating the balance at each articulation point @xmath33 of a biconnected component @xmath13 to represent the total balance of the part of the graph which @xmath33 separates from @xmath13 .",
    "this simplifies the presentation of our result .",
    "we solve the min - cost circulation problem  ( [ eq : circ ] ) by transforming the problem to the min - cost transshipment problem  ( [ eq : dual ] ) in the network @xmath102 , as defined in section  [ sec : reduce ] .",
    "we use the simple structure of @xmath102 when @xmath23 is outerplanar to obtain a near - linear time solution for this problem .",
    "the input biconnected outerplanar graph @xmath23 has an _",
    "outer face _",
    "@xmath24 which is incident to all vertices of @xmath58 .",
    "if we remove the dual vertex @xmath24 from the dual graph @xmath28 we get a directed graph whose underlying undirected graph is a tree @xcite .",
    "every arc @xmath32 of @xmath111 defines at most two arcs of @xmath101 , one for each capacitated dart . therefore ,",
    "if we remove @xmath24 from @xmath102 we get a special structure which we call _ directed fat tree _ , that is a directed graph such that if replace every arc with an undirected edge and merge every pair of parallel edges into a single edge we get a tree .    in this section",
    "we present an @xmath0 time min - cost transshipment algorithm for a planar network @xmath23 with @xmath1 vertices and @xmath12 arcs , a balance vector @xmath112 , a cost function @xmath66 , and a vertex @xmath113 such that removing @xmath113 from @xmath23 yields a directed fat tree . from the discussion above , the algorithm together with our reduction from section  [ sec : reduce ] give an @xmath0 time algorithm for the min - cost flow problem in outerplanar networks .",
    "we use a divide - and - conquer algorithm to solve our min - cost transshipment problem .",
    "our approach is similar to the one of cornelsen et al .",
    "@xcite , but we use sophisticated dynamic tree data structures and get a strongly polynomial time bound . here",
    "we do not assume that @xmath23 is simple , since @xmath23 was produced by the transformations of section  [ sec : reduce ] , which might create parallel arcs .",
    "our algorithm is recursive and may create negative - cost cycles in networks on which it applies recursively .",
    "for this reason we set the capacity of every ( uncapacitated ) arc to @xmath114 .",
    "this does not change the solution of the problem and ensures that we do not create negative cycles of infinite capacity .",
    "we get a directed fat tree whose center vertex is @xmath115 .",
    "the arc @xmath32 connects @xmath115 and @xmath116 . ]",
    "let @xmath117 $ ] be the directed fat tree that we get from @xmath23 by removing the vertex @xmath116 .",
    "let @xmath115 be a _",
    "center vertex _ of @xmath118 , whose removal separates @xmath118 into connected components each of size at most @xmath119 .",
    "see figure  [ fig : outerdual ] . for a connected component @xmath13 ,",
    "let @xmath120 be the subgraph of @xmath23 induced by @xmath121 .",
    "every arc of @xmath23 except arcs connecting @xmath116 and @xmath115 belongs to a unique subgraph @xmath120 .    for every subgraph @xmath120",
    ", we modify @xmath120 by merging @xmath115 into @xmath116 as follows .",
    "first we make sure that there is only one arc connecting @xmath115 and @xmath116 ( in any direction ) .",
    "if there is more than one such arc we remove all arcs between the two vertices but one ( regardless of its direction ) . if the two vertices are not connected , then we add an arc between them without violating the planarity of the graph .",
    "we can do so since @xmath116 is on the boundary of every face of the graph .",
    "we insert this arc only to define the merge of @xmath115 into @xmath113 , so its direction is arbitrary . let @xmath32 be the single arc connecting @xmath115 and @xmath116 .",
    "we merge @xmath115 into @xmath116 by _ contracting _",
    "@xmath32 , such that @xmath32 and @xmath115 are removed , every arc incident to @xmath115 becomes incident to @xmath116 instead , and the cyclic order of all arcs around @xmath116 remains unchanged , where the arcs that were adjacent to @xmath115 are inserted where @xmath32 was .",
    "we set the balance constraint of @xmath116 to @xmath122 , so that the total balance of @xmath120 is zero .",
    "the cost and capacity of every arc remains in @xmath120 the same as in @xmath23 .",
    "the structure of each subgraph @xmath120 is similar to the structure of @xmath23  if we remove @xmath116 from @xmath120 we get a directed fat tree .",
    "we solve the problem on each subgraph recursively .",
    "see figure  [ fig : components ] .",
    "merging @xmath115 and @xmath116 may create negative - cost cycles , for this reason we set earlier the capacity of every uncapacitated arc to @xmath114 .",
    "we combine the solutions of all subproblems by setting @xmath123 for every arc @xmath32 , where @xmath124 is the flow assigned to @xmath32 by the unique subproblem containing it .",
    "this assigns flow to every arc of @xmath23 , excluding arcs between @xmath115 and @xmath116 .",
    "for every arc @xmath32 between @xmath115 and @xmath116 , in any direction , we set @xmath125 if @xmath126 and @xmath127 otherwise .",
    "see figure  [ fig : components ] . as the next lemma shows ,",
    "the flow function @xmath56 that we defined is an optimal min - cost flow for our problem in @xmath23 in the sense that its residual network contains no negative - cost cycle .",
    "let @xmath56 be the flow function for @xmath23 obtained as above by combining the flow functions @xmath128 of the subproblems @xmath120 , then @xmath57 , the residual network of @xmath56 , contains no negative - cost cycle .",
    "assume for contradiction that such a negative - cost cycle @xmath129 exists in @xmath57 .",
    "since the residual network of any flow @xmath128 of one of the subproblems does not contain a negative - cost cycle , the cycle @xmath129 must contain @xmath115 and @xmath116 .",
    "since any residual arc between @xmath115 and @xmath116 has non - negative cost , there must be a subpath @xmath130 of @xmath129 between @xmath115 and @xmath116 with negative total cost , whose vertices other than @xmath115 and @xmath116 belong to a single component @xmath13 .",
    "however , in the graph @xmath120 we merged @xmath115 into @xmath116 , and therefore @xmath130 defines a negative - cost cycle in the residual network of @xmath128 , contradicting the optimality of @xmath128 .    however , the flow @xmath56 is not necessarily feasible , since the balances at @xmath116 and at @xmath115 might be wrong .",
    "we fix this in a way similar to the successive shortest path algorithm ( see ( * ? ? ?",
    "* section  9.7 ) and references therein ) .",
    "the successive shortest path algorithm sends flow from a vertex with an excess to a vertex with a deficit along a shortest path in the residual network , with respect to the cost function . this way no new negative - cost residual cycle is created .",
    "the _ excess _ of @xmath116 with respect to @xmath56 is @xmath131 , the excess of @xmath115 , @xmath132 , is equal to @xmath133 , since the balance constraint of every other vertex in @xmath23 is satisfied . if @xmath134 then @xmath56 is a feasible solution to our min - cost flow problem and we are done",
    "otherwise , we assume that @xmath135 , and we should send @xmath136 units of flow from @xmath116 to @xmath115 . the case where @xmath137 is symmetric . as in the successive shortest path algorithm",
    ", we always send a flow along a residual path of minimum total cost .",
    "we work in the residual network @xmath57 .",
    "we construct a directed fat tree @xmath138 from @xmath57 as follows .",
    "we split the vertex @xmath116 into separate copies , one for each vertex adjacent to @xmath116 ( possibly by more than one arc ) , such that each copy of @xmath113 is adjacent to a single vertex .",
    "these copies are leaves of @xmath138 .",
    "next , we remove from @xmath138 the arcs that are not on some directed path from a copy of @xmath116 to @xmath115 , this can be done in linear time .",
    "the resulting graph @xmath138 is a directed fat tree with @xmath12 arcs . see figure  [ fig : fattree ] .",
    "recall that we do not assume that @xmath23 is simple , moreover the residual network @xmath57 might contain parallel arcs @xmath139 and @xmath140 , even if @xmath23 is simple , when one of the recursive calls sent some flow along the arc @xmath141 . solving",
    "the min - cost flow problem in a directed fat tree is a simple task , however our problem is somewhat more complicated since all copies of @xmath116 share a single excess .    for every set of parallel arcs ,",
    "we are interested only in the one with the smallest cost .",
    "we define the _ active tree _ @xmath142 to be the tree that we obtain from @xmath138 by keeping only the arc with the smallest cost from each set of parallel arcs .",
    "we root the tree @xmath142 at @xmath115 .",
    "we represent @xmath142 using two dynamic tree data structures  @xmath143 which represents the capacities and @xmath144 which represents the costs .",
    "the structure of both trees is the same as @xmath142 .",
    "each arc in @xmath143 has the same capacity as in @xmath57 . in the tree @xmath144",
    "we assign to each copy of @xmath116 the total cost of arcs on the unique path in @xmath142 from this copy of @xmath116 to @xmath115 .",
    "we implement the tree @xmath143 using the dynamic tree data structure of sleator and tarjan @xcite .",
    "this data structure maintains a capacity for each arc .",
    "it provides operations that allow us to cut an arc from @xmath143 , together with its subtree , or to replace it with a parallel arc .",
    "in addition , we can find the minimum capacity of an arc on the path from a given vertex to the root of the tree @xmath115 .",
    "we can also implicitly update the capacities of all arcs on this path by subtracting a constant from the capacity of each arc .",
    "we implement the tree @xmath144 using an euler tour tree data structure @xcite .",
    "this data structure maintains the cost which we assign for every copy of @xmath116 .",
    "it also provides operations that allow us to cut an arc or replace it with a parallel arc , as the previous data structure .",
    "in addition , it can find the vertex with minimum cost in the tree , and can implicitly update the cost of all vertices in the subtree of a given vertex by adding a constant to their costs . each operation on @xmath144 and @xmath143",
    "is implemented in @xmath145 time .",
    "both tree structures are constructed in linear time and require linear space .",
    "as long as @xmath135 and there is at least one copy of @xmath116 in @xmath142 , we repeat the following procedure .",
    "we use @xmath144 to find the copy of @xmath116 whose path to @xmath115 has minimum cost .",
    "we use @xmath143 to find the capacity of this path @xmath146 , that is @xmath147 .",
    "we send @xmath148 units of flow along @xmath146 using @xmath143 , and implicitly update the capacity @xmath67 for arcs of @xmath146 accordingly .",
    "we decrease @xmath136 and increase @xmath132 by the same amount .",
    "if we are not done yet , that is if the new value of @xmath136 is still larger than zero , then we saturated at least one arc @xmath32 .",
    "if @xmath32 has a parallel arc @xmath90 in @xmath138 with @xmath149 ( and @xmath150 ) then we replace @xmath32 by @xmath90 in @xmath142 . if @xmath32 has more than one parallel arc , we choose @xmath90 to be the one with the smallest cost .",
    "in addition , we use the tree @xmath144 to increase the cost of all leaves in the subtree of @xmath90 by @xmath151 .",
    "if @xmath32 does not have a parallel arc , we cut @xmath32 and its subtree from @xmath142 .",
    "since we always push flow along the least - cost path from @xmath116 to @xmath115 , the flow @xmath56 is always optimal , in the sense that it contains no negative - cost residual cycle , although the excess at @xmath116 and the excess at @xmath115 remain non - zero until we are done .",
    "if the input min - cost transshipment problem has a finite optimal solution then at the end of our algorithm @xmath56 is a feasible flow function such that @xmath57 does not contain negative - cost residual cycles , and so it is an optimal solution for our problem ( see for example ( * ? ? ?",
    "* section  9.3 ) , ( * ? ? ? * section  12.2 ) ) .",
    "there are two cases however in which the input problem does not have an optimal finite solution .",
    "first , it is possible that there is a negative - cost cycle in the input network . in this case",
    "our algorithm sends @xmath114 units of flow along this cycle , since we set the capacity of all arcs to @xmath114 .",
    "this is the only situation in which an arc carries @xmath114 units of flow , so this case is easily detectible .",
    "the other possibility is that no feasible solution exists .",
    "we detect this when we disconnect all copies of @xmath116 from the tree @xmath142 while @xmath136 is still larger than zero .",
    "each dynamic tree operation requires @xmath145 time , and at each iteration one arc leaves the trees and never returns , therefore the total running time for balancing @xmath116 and @xmath115 is @xmath11 .",
    "our algorithm has @xmath145 levels of recursion , so the total running time is @xmath0 .",
    "we conclude this section with the following theorem :    the min - cost flow problem in an outerplanar flow network with @xmath1 vertices can be solved in @xmath0 time .",
    "we acknowledge an anonymous referee for bringing to our attention the @xmath8 time implementation of the cost scaling algorithm of rck  @xcite for planar networks .",
    "daitch , s.  i. , spielman , d.  a. : faster approximate lossy generalized flow via interior point algorithms . in : proceedings of the 40th annual acm symposium on theory of computing , pp",
    ".  451460 .",
    "acm , new york ( 2008 )                    imai , h. , iwano , k. : efficient sequential and parallel algorithms for planar minimum cost flow . in : asano t. , ibaraki t. , imai h. , nishizeki t.  ( eds . ) sigal 1990 .",
    "lncs , vol .",
    "450 , pp .",
    "springer , heidelberg ( 1990 )"
  ],
  "abstract_text": [
    "<S> in this paper we study the min - cost flow problem in planar networks . </S>",
    "<S> we start with the min - cost flow problem and apply two transformations , one is based on geometric duality of planar graphs and the other on linear programming duality . </S>",
    "<S> the result is a min - cost flow problem in a related planar network whose balance constraints are defined by the costs of the original problem and whose costs are defined by the capacities of the original problem . </S>",
    "<S> we use this transformation to show an @xmath0 time algorithm for the min - cost flow problem in an @xmath1-vertex outerplanar network . </S>"
  ]
}