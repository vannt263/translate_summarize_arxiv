{
  "article_text": [
    "the minimum spanning tree ( mst ) problem in graphs is perhaps one of the most basic problems in graph algorithms .",
    "an mst is a spanning tree with minimal sum of edge weights .",
    "efficient algorithms for finding an mst are well known .",
    "one variant on the mst problem is the bounded degree mst problem , which consists of finding a spanning tree satisfying given upper bounds on the degree of each vertex and with minimal sum of edges weights subject to these degree bounds .",
    "in general , this problem is np - hard @xcite , so no efficient algorithm exists . however , there are certain achievable results .",
    "for undirected graphs , singh and lau @xcite found a polynomial time algorithm to generate a spanning tree with total weight no more than that of the bounded degree mst and with each vertex having degree at most one greater than that vertex s bound .",
    "if the graph is undirected and satisfies the triangle inequality , fekete and others @xcite bound the ratio of the total weight of the bounded - degree mst to that of any given tree , with a polynomial - time algorithm for generating a spanning tree satisfying the degree constraints and this ratio bound .",
    "the euclidean case , with vertices being points in euclidean space and edge weights being euclidean distances , also has a rich history .",
    "we denote ( following chan in @xcite ) by @xmath2 the supremum , over all sets of points in @xmath3-dimensional euclidean space , of the ratio of the weight of the bounded degree mst with all degrees at most @xmath4 to the weight of the mst with no restrictions on degrees ( @xmath5 is the supremum of @xmath2 over all @xmath3 ) . for @xmath6 ,",
    "the bounded - degree mst problem becomes the traveling salesman problem and @xmath7 @xcite , thus making @xmath8 the first unsolved case .",
    "papadimitriou and vazirani @xcite showed that finding the degree-3 mst is np - hard .",
    "khuller , raghavachari , and young @xcite showed that @xmath9 and @xmath10 .",
    "chan @xcite improved the upper bounds to 1.402 and 1.143 , respectively .",
    "jothi and raghavachari @xcite showed that @xmath11 .",
    "@xmath12 since there is always an mst with maximal degree 5 or less @xcite .",
    "these same papers also studied the problem in higher dimensions .",
    "khuller , raghavachari , and young @xcite gave an upper bound on @xmath13 of @xmath14 , which chan @xcite improved to @xmath15 .",
    "these two followed the same approach , proving these bounds on a certain ratio , which we will call @xmath16 .",
    "@xmath16 is the maximum ratio between the shortest path through a collection of points starting at a special point and the size of a star centered at that point .",
    "it is conjectured to actually be 1.5 .",
    "khuller , raghavachari , and young @xcite showed that @xmath17 .",
    "this is achieved in linear time as follows :    1 .",
    "root the original tree 2 .   treating the root as @xmath1 ,",
    "find a hamiltonian path with ratio at most @xmath16 through its children .",
    "repeat recursively on each child .",
    "each vertex then has at most 3 neighbors : two as a child and one as a parent .",
    "we improve previous upper bounds on @xmath16 , and thus @xmath13 , to 1.559 .",
    "the proof leads to a linear time algorithm for generating the path and thus the bounded degree tree .",
    "our approach is based on chan s , but we weigh paths differently and select the number of points to remove when performing the induction based on the distances of points to @xmath1 .",
    "we also find , by construction , a non - trivial lower bound of about 1.447 on @xmath13 .    in section",
    "[ sec : lemmas ] , we go over @xmath16 a bit more carefully as well as refering to a useful paper and discuss how we will use it . in section [ sec : upperbound ] , we improve the upper bound on @xmath16 to 1.559 , and in section [ sec : lowerbound ] we improve the lower bound on @xmath13 to 1.447 .",
    "@xmath16 is properly defined as follows :    given point @xmath1 and @xmath18 points @xmath19 in a euclidean space of arbitrary finite dimension , let @xmath20 and let @xmath21 be the length of the shortest possible path that starts at @xmath1 and goes around the other points in some order ( it does not go back to @xmath1 ) .",
    "then @xmath16 is the supremum of the possible values of @xmath22 over all arrangements of points in any number of dimensions .",
    "@xmath23 is achieved for @xmath24 in one dimension by the points @xmath25 .",
    "we use the results of young @xcite multiple times in order to bound certain sums of distances",
    ". this paper deals with the maximum of weighted sums ( with weights @xmath26 ) of lengths between @xmath0 points in @xmath27 dimensional euclidean space , given that each point @xmath28 is specified as being no further than some distance @xmath29 from the origin .",
    "@xmath30 where the maximum is taken over all arrangements of points and the minimum is taken over all nonnegative @xmath31 .",
    "furthermore , young specifies a relationship between the optimal arrangement and the values of @xmath31 where equality is achieved . thus one can iteratively approximate the optimal arrangement using the same method as in @xcite , and then calculate @xmath31 values from it .    whenever is used to give an upper bound on some weighted sum of distances , the values for @xmath31 used",
    "are given in appendix [ sec : xis ] .",
    "let @xmath32 . we will prove that @xmath33 ( as @xmath21 and @xmath34 are defined in the introduction ) , thus showing that @xmath35 .",
    "we will prove this by strong induction on the number of points .",
    "given @xmath18 vectors @xmath36 with norms @xmath37 , respectively , we will try to induct by removing @xmath38 for various values of @xmath0 .",
    "we will try to traverse the other points , ending at @xmath39 or @xmath40 .",
    "we will then add in the removed points , projected onto a sphere , and look at the average length of a path traversing them and ending at @xmath41 or @xmath42 .",
    "we will then move them out in stages , seeing how this average path length changes at each stage , in order to bound the final average path length in terms of the values @xmath43 . since the average is an upper bound on the minimum",
    ", this gives us a linear inequality on the @xmath43 which is a sufficient condition for the inductive step to work .",
    "we then use linear programming to show that one of these inequalities is satisfied and thus that induction is possible . for the algorithm",
    ", we will then follow the induction to split the points up into blocks , choose the starting and ending vertex for one block at a time , using brute force to find the shortest path that goes through all the block s points .",
    "we start by defining @xmath44 and @xmath45 for all @xmath46 . introducing these new points does not affect the distance sum or the traversing path length , as the traversing path can go to them first .",
    "we will prove the following claim :    [ claim ] there exist two paths @xmath47 and @xmath48 ending at @xmath41 and @xmath42 , respectively , such that the average of the lengths of these paths is at most @xmath49    this clearly implies that @xmath33 .",
    "we will proceed by strong induction on @xmath18 . to induct ,",
    "remove @xmath41 through @xmath50 ( where @xmath51 may vary ) , use the inductive hypothesis to find two paths @xmath47 and @xmath48 through the other @xmath52 points , ending at @xmath39 and @xmath40 , respectively .",
    "we will then try to find four paths @xmath53 with path @xmath54 going from @xmath55 to @xmath56 and going through all points @xmath57 , so that the average length of these four paths is at most @xmath58 .",
    "we will assume that this is impossible , generate a set of conditions on the values @xmath59 , then prove that one of the conditions must be violated .      in this section , we will assume @xmath61 to be a given value",
    ". we will select it in section [ sec : recombine ] .    ; the dotted segments contribute to @xmath62.,title=\"fig : \" ] [ fig : thickseg ]    let @xmath63 .",
    "let @xmath64 be the shortest length of a path @xmath65 where @xmath66 is a permutation of @xmath67 so that @xmath68 and @xmath69 .",
    "let @xmath70 be the average length over all such paths @xmath65 .",
    "then @xmath71    we wish to find upper bounds on @xmath72 and @xmath73 . for @xmath74 ,",
    "let @xmath75 and let @xmath76 @xmath77 and @xmath78 are defined identically , except @xmath39 and @xmath79 are replaced with @xmath40 and @xmath80 . for @xmath81 or @xmath6 , @xmath82",
    "intuitively , we are setting all points at distance @xmath83 , then moving out @xmath0 points to distance @xmath59 , then moving out @xmath27 points , and so on .",
    "we will now find values @xmath84 and @xmath85 independent of the arrangement of @xmath86 satisfying @xmath87 the corresponding equations ( substituting @xmath40 for @xmath39 and @xmath80 for @xmath79 ) will then hold for @xmath77 and @xmath78 .",
    "define @xmath88 as the maximum value of @xmath89 over unit vectors @xmath90 .",
    "we use equation to obtain upper bounds on @xmath88 , which we then use to find numerical values for @xmath85 .    substituting in @xmath91 and @xmath92",
    ", we get that @xmath93 and similarly for @xmath78 .",
    "thus we can set @xmath94      for @xmath95 , @xmath96 for @xmath97 @xmath98 for @xmath99 @xmath100    define also @xmath101 as the maximum value of @xmath102 over unit vectors @xmath103 .",
    "we use equation to obtain upper bounds on @xmath101 , which we then use to find numerical values for @xmath84 .    for @xmath104 , substituting @xmath105 , @xmath106 , @xmath107 , and @xmath92 into @xmath108 , we get that @xmath109 and similarly for @xmath77 . so we set @xmath110    for @xmath111 , the same substition gives us @xmath112 . for @xmath113 ,",
    "the same substition gives us @xmath114 .    if there do not exist four paths @xmath53 , then the average length of a path is too great , namely @xmath115      if @xmath117 , then , by , @xmath118 then , since @xmath119 and @xmath120 as in the last section , @xmath121 similarly , @xmath122 so the induction works .",
    "thus for @xmath116 we have the constraint @xmath123 , which is stronger than the one obtained for @xmath116 in the previous section .",
    "we obtained linear constraints for various values of @xmath124 .",
    "these , together with the constraints @xmath125 , make a linear program ( given in appendix [ sec : lp ] ) , which is unsatisfiable .",
    "thus one of the constraints must not hold , so the induction works for some @xmath0 .",
    "we repeatedly use the inductive step to obtain a sequence of indices @xmath126 . at stage @xmath127 , we remove @xmath128 points . the intermediate ending points are then of the form @xmath129 where each @xmath130 is 1 or 2 . since we are only using @xmath124",
    ", we can find all the paths @xmath53 by brute force in linear time .",
    "now , for both possible values of @xmath131 , we find which value of @xmath132 gives the shorter path .",
    "then , for both possible values of @xmath133 , we find which value of @xmath131 will make the total path after @xmath134 shorter .",
    "we repeat until we get to some @xmath135 , at which point we have two paths and choose the shorter one .",
    "this whole algorithm is linear .",
    "denote by @xmath136 the sum of edge weights of the minimal spanning tree and by @xmath137 the sum of edge weights of a minimal degree 3 tree .",
    "denote by @xmath138 the coordinates of a point in @xmath0 dimensions .    in six dimensions ,",
    "let @xmath139 be the origin and let @xmath140 be the vertices of a simplex with center at @xmath139 and radius @xmath141 .",
    "let the coordinates of @xmath142 be @xmath143 .",
    "note that @xmath144 .",
    "now , given natural @xmath145 and @xmath146 , take the following tree in @xmath147 dimensions :    1 .",
    "the origin , @xmath139 , is the root .",
    "its @xmath145 children are @xmath148 .",
    "@xmath149 has coordinates 0 except @xmath150 .",
    "each @xmath149 has seven children , @xmath151 the coordinates of @xmath152 are all 0 except @xmath153 and , for @xmath4 from 1 to 6 , @xmath154 .",
    "then @xmath151 form a simplex with center distance @xmath155 from @xmath149 and with each vertex distance @xmath141 from the center .",
    "it is easy to check that @xmath156    then we can pick @xmath157 which gives us @xmath158 .",
    "then we can define function @xmath159 on the vertices so that @xmath160 and @xmath161 . in that case , the length of edge @xmath162 is at least @xmath163 , so @xmath159 can be thought of a half - edge length .",
    "then , since there are @xmath164 vertices , there are @xmath165 edges , so there is a total of @xmath166 edge endpoints . at most 3 of them",
    "contribute 0 to @xmath137 , at most @xmath167 contribute @xmath168 , and the remainder contribute @xmath169 .",
    "thus @xmath170 @xmath171 @xmath172 thus @xmath173 .",
    "i thank samir khuller for suggesting that i work on this problem and timothy chan for improved notation and organization .",
    "[ tbl : fq ]    .@xmath174 values used to bound @xmath101 [ cols=\"^,^,^\",options=\"header \" , ]",
    "this is the infeasible linear program one achieves .",
    "the coefficients on the left are strictly greater ( by at least 0.0001 ) than the actual values one would calculate .",
    "since they are all multiplied by poisitive values , this takes care of roundoff error in calculating coefficients .      1 c. h. papadimitriou and u. v. vazirani ,",
    "_ on two geometric problems related to the traveling salesman problem _ , j. algorithms , 5 ( 1984 ) , pp .",
    "231 - 246 .",
    "m. singh , l. lau , _ approximating minimum bounded degree spanning trees to within one of optimal _ , in proc .",
    "of the 39th stoc , 2007 .",
    "s. p. fekete , s. khuller , m. klemmstein , b. raghavachari , and n. young .",
    "_ a network - flow technique for finding low - weight bounded - degree trees_,j .",
    "algorithms , 24(1997 ) , pp .",
    "310 - 324 .",
    "s. khuller , b. raghavachari , and n. young , _ low - degree spanning trees of small weight _ , in proc . of the 26th ann .",
    "acm symp . on theory of computing , 1994 .",
    "t. chan , _ euclidean bounded - degree spanning tree ratios _ , in proc .",
    "of the nineteenth annual symposium on computational geometry , 2003 , pp .",
    "r. jothi and b. raghavachari , _ degree - bounded minimum spanning trees _",
    ", in proc . of the 16th canadian conf . on computational geometry , cccg , 2004 , pp",
    "192 - 195 .",
    "c. monma and s. suri , _ transitions in geometric minimum spanning trees _ , discrete and computational geometry , 8 ( 1992 ) , pp .",
    "265 - 293 .",
    "n. young , _ a bound on the sum of weighted pairwise distances of points constrained to balls _",
    ", technical report 1103 , cornell university operations research and industrial engineering , 1994 .",
    "j. berman and k. hanes,_optimizing the arrangement of points on the unit sphere _ , mathematics of computation , 140 ( 1977 ) , pp .",
    "1006 - 1008 ."
  ],
  "abstract_text": [
    "<S> given points in euclidean space of arbitrary dimension , we prove that there exists a spanning tree having no vertices of degree greater than 3 with weight at most 1.559 times the weight of the minimum spanning tree . </S>",
    "<S> we also prove that there is a set of points such that no spanning tree of maximal degree 3 exists that has this ratio be less than 1.447 . </S>",
    "<S> our central result is based on the proof of the following claim :    given @xmath0 points in euclidean space with one special point @xmath1 , there exists a hamiltonian path with an endpoint at @xmath1 that is at most 1.559 times longer than the sum of the distances of the points to @xmath1 .    </S>",
    "<S> these proofs also lead to a way to find the tree in linear time given the minimal spanning tree . </S>"
  ]
}