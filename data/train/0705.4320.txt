{
  "article_text": [
    "in recent years , nanoelectronics has made tremendous progress , with advances in novel nanodevices @xcite , nano - circuits @xcite , nano - crossbar arrays @xcite , manufacture by nanoimprint lithography @xcite , cmos / nano co - design architectures @xcite , and applications @xcite .",
    "although a two - terminal nanowire crossbar array does not have the functionality of fet - based circuits , it has the potential for incredible density and low fabrication costs @xcite .",
    "likharev and his colleagues @xcite have developed the concept of cmol ( cmos / nanowire / molecular hybrid ) as a likely implementation technology for charge - based nanoelectronics devices .",
    "examples include memory , fpga , and neuromorphic crossnets @xcite .    in this paper",
    ", we present a framework for cmol cell assignment .",
    "we transform any boolean circuit based on and / or / not gates to a circuit of nor gates , and then map the nor gates to the cmol architecture .",
    "we formulate the cmol cell mapping task as a set of boolean conditions , and solve them through satisfiability .",
    "prior work on cmol @xcite was assigning cells by hand .",
    "our technique is the first automated cmol cell assignment framework .",
    "we further investigate various defect models for the cmol technology , and propose a reconfiguration technique that can deal with all these defects through our cell assignment framework .",
    "this is the first detailed study on numerous cmol defect models .",
    "cmol was originally developed by likharev and his colleagues @xcite .",
    "the nanodevice in cmol is a binary  latching switch \" based on molecules with two metastable internal states .",
    "[ fig : device ] shows the schematic _",
    "i_-_v _ curve of this two - terminal nanodevice .",
    "qualitatively , if the drain - to - source voltage is low during programming , the nanodevice will be in the  off \" state with a high resistance ; if the applied voltage is greater than a certian value , the nanodevice will be in the  on \" state with a lower resistance . in the operating mode ,",
    "if the nanodevice is in the  on \" state and the applied voltage to the drain and source is greater than the threshold voltage @xmath0 , the _ i_-_v _ curve will be like the _ i_-_v _ curve of a finite resistor . if the applied voltage is less than threshold voltage , then the nanodevice is virtually in the  off \" state .",
    "however , it is not certain yet how large the on - off resistances are and how long the nanodevice can keep its programmed state . from our previous analysis @xcite , for an aggressive assumption of cmol s parameters with 6 nm nanowire pitch , the nanodevice  on \" resistance could exhibit a higher value than that of a reasonable length of nanowire ( e.g. , 6 @xmath1 m ) . to avoid routing",
    "the critical signal path via multiple nanodevices is one of the synthesis and routing rules we need to be aware of . in this paper",
    ", we address the cmol cell assignment problem with the understanding that routing between two cells through the nanowire fabric will involve one nanodevice only ( see section  [ sec : routing ] ) .",
    "[ fig : interface ] shows the basic cmol circuit , especially the interface between cmos and nanowires .",
    "the pins connect the cmos upper - level metals and the nanowires .",
    "the nanodevices are sandwiched between the two levels of perpendicular nano - imprinted nanowires .",
    "this unique structure solves the problems of addressing much denser nanodevices with sparser cmos components .",
    "each nanodevice is accessed by the two perpendicular nanowires which connect to the nanodevice .",
    "the nanowires are in turn connected by the pins which interface with the cmos circuits . with @xmath2 nanowires and pins",
    ", we could address @xmath3 nanodevices .",
    "strukov and likharev @xcite proposed the cmol fpga idea to fully explore the regularity of the cmol architecture . because the nanodevices are non - volatile switches , the cmol fpga could program those nanodevices and route the signals from cmos to the nanowires and nanodevices , and back to cmos again .",
    "all logic functions should be done in the cmos level . to further explore the architectural regularity , they proposed cell - like cmos stucture , as shown in fig .",
    "[ fig : fpgalogic ] .",
    "in each cell , there is an inverter in the cmos level .",
    "one direction of nanowires receive signals from the outputs of the inverters in the cmos level .",
    "those nanowires are ored together with another direction of nanowire according to the nanodevice configurations in the nanowire level .",
    "the ored signal goes to the inverter s input , which is on the cmos level .",
    "this or - not logic is the fundamental logic of cmol fpga .",
    "any combinational logics should be expressed in the or - not ( or nor ) way .",
    "for example , in fig .",
    "[ fig : fpgalogic ] , @xmath4 are three signals connected with the three grayed cells output pins . with the illustrated nanowire connections ( brown lines ) and  on \" nanodevices ( green dots ) , the logic expression is @xmath5 .        based on strukov and likharev s cmol fpga , snider and williams @xcite proposed field - programmable nanowire interconnect ( fpni ) with more conservative circuit parameters than cmol fpga s , such as wider nanowires and wider nanowire pitches , sparser crossbar arrays , and larger pins .",
    "moreover , the fpni assumes combination of logic gates ( e.g. , nand / and ) , buffers , flipflops in the cmos cell ( or hypercell ) , which is similar to the concurrent cmos fpga architectures .",
    "although the area consumption of the fpni is larger than that of the cmol fpga , it shows at least one order of magnitude of reduction in area compared with cmos fpga @xcite . and fpni should be much more practical for manufacturing than cmol fpga as projected in 10 years @xcite .",
    "strukov and likharev @xcite presented the cmol fpga and performed cell assignment task manually for simple regular - structured boolean circuits .",
    "they also presented a reconfigurable architecture @xcite for cmol fpga , that grouped cmol cells to form lookup - tables ( luts ) , which can utilize existing ( lut - based ) fpga cad tools .. however , that work also did not solve the cmol cell assignment problem . in this paper",
    ", we solve the cmol cell assignment problem via satisfiability and extend it as a reconfiguration tool for various cmol defects .",
    "the cmol architecture presented by @xcite is capable of implementing a circuit of nor gates , as explained in fig .",
    "[ fig : fpgalogic ] .",
    "this means the logic synthesis front - end must present a circuit in terms of nor gates .",
    "we can then place and route these nor gates on the cmol cells .",
    "there are many logic synthesis tools that can optimize boolean circuits based on and / or / not gates , but there are not much recent work on optimization of nor gate circuits . in this section ,",
    "we first present a simple algorithm to convert any circuit of and / or / not gates into a circuit of nor gates .",
    "we then describe how to do routing on cmol cells and present our satisfiability - based cell assignment method .",
    "we use an adder as an example to illustrate our ideas .      given any boolean circuit in terms of and / or / not gates ,",
    "we want to transform the and gates and or gates into nor gates ( not gates are considered as single input nor gates ) .",
    "the pseudo code is shown in algorithm  [ alg : nor ] .",
    "we use de morgan s law to convert and/or to nor gate ( lines 3 and 5 ) , also shown in figure  [ fig : demorgan ] .",
    "we then remove stacked inverters in lines 814 .",
    "we use @xmath6 to denote the set of gates that drive the input of gate @xmath7 .",
    "the double for loop from line 15 to line 22 will remove duplicated inverters .",
    "notice that the complexity of this double for loop can be reduced if we hash all the gates based on inputs nets ( i.e. , performance speedup ) .",
    "input : circuit @xmath8 with and / or / not gates output : circuit @xmath8 with nor / not gates convert @xmath9 to nor with inverters at its inputs convert @xmath9 to nor with inverter at its output @xmath10 = fanin(@xmath7 ) disconnect the output net @xmath11 of @xmath7 connect @xmath11 to the input net of @xmath12 disconnect the output net @xmath11 of @xmath12 connect @xmath11 to the input net of @xmath7        for any boolean circuit in the product - of - sum ( pos ) format with at least one and gate and all its inputs driven by or gates , algorithm  [ alg : nor ] will result in a nor gate circuit with the same number of nor gates as the number of ( and / or / not ) gates in the original pos circuit .",
    "proof : the and gate will be converted into a nor gate with inverters at its input . similarly , the or gates will be converted into nor gates with inverters at the output . since all or gate outputs are connected to the and gate and all and gate inputs are driven by or gates , we will end up with inverters driving inverters which can be easily eliminated .",
    "hence the number of gates remains the same .",
    "routing between cmol cells is pre - determined by the nanowire fabric .",
    "each cmol cell has one output nanowire and one input nanowire which are orthogonal to each other .",
    "the input nanowires for all cmol cells are oriented in the same direction ( parallel ) , and the same property is true for all the output nanowires .",
    "hence , there is only one intersection between the output nanowire of one cmol cell and the input nanowire of another cmol cell . if we want to connect these two cells , we need to program the nanodevice at the corresponding intersection to be  on \" .",
    "for example , in figure  [ fig : fpgalogic ] , the output nanowire of cell @xmath13 and the input nanowire of cell @xmath14 has a unique intersection shown on the left side of the figure . by turning the corresponding nanodevice on or off ,",
    "we can connect or disconnect the route from @xmath13 to @xmath14 respectively .    according to @xcite ,",
    "there are periodic breaks in the nanowire fabric , such that each input / output nanowire has a fixed length based on the period .",
    "hence each cmol cell can only be connected to a limited number of neighboring cmol cells .",
    "the set of cmol cells that can be connected to the input of a particular cell @xmath13 is called the input * connectivity domain * of @xmath13 .",
    "similarly , the output connectivity domain refers to the set of cells that can be connected to the output of @xmath13 .    although the input / output connections between any two cmol cells through the nanowire fabric is pre - determined and limited by the connectivity domain , it is still possible for one cell to communicate with cells outside its connectivity domain .",
    "for example ,",
    "cell @xmath15 send its output to cell @xmath16 ( which is within the connectivity domain of @xmath15 ) , and then cell @xmath16 can send its output to cell @xmath17 ( which is inside the connectivity domain of @xmath16 but outside the connectivity domain of @xmath15 )",
    ". however , some physical constraints may prevent people from using this idea for timing critical paths @xcite .",
    "in addition , the cmol architecture implements the nor logic ( or not gate for single input case ) , we may have to use two intermediate cells ( i.e. two inverters ) to maintain the same logic polarity .",
    "this idea is similar to buffer insertion in traditional asic cad flow .",
    "for the rest of this paper , we assume that these types of connecting through multiple cmol cells is handled by the generation of logic circuit , which can be done through logic synthesis .",
    "we are given a collection @xmath17 of cmol cells , the number of cells in this collection is @xmath18 .",
    "each cmol cell is as described in figure 1 of @xcite .",
    "these cmol cells can come in rectilinear fashion as described in fig .",
    "[ fig : fpgalogic ] but our satifiability formulation does not require them to be of any regular shape .",
    "we assume that each cmol cell @xmath19 can be connected to a set @xmath20 of cmol cells , where @xmath21 an example for @xmath20 is the `` connectivity domain '' as described in section  [ sec : routing ] .",
    "notice that the `` connectivity domain '' described in @xcite has a regular pattern around the neighborhood of each cmol cell @xmath22 .",
    "but the @xmath20 in our satisfiability formuation can be arbitrarily any subset of cmol cells which does not require them to have any regular pattern .",
    "figure [ fig : connect ] illustrates such non - regular - patterned connectivity domain .",
    "( blue - colored cell ) is connected with 23 output nanowires ( brown nanowires ) from 23 neighbor cells ( pink - colored cells).,width=240 ]    we are given a nor gate circuit @xmath8 , which can be produced by algorithm  [ alg : nor ] or other methods .",
    "we can represent the circuit @xmath8 as a graph @xmath23 where @xmath24 is the set of nodes and @xmath25 is the set of edges in the graph .",
    "the nodes @xmath24 corresponds to the gates in the circuit , whereas the edges @xmath25 corresponds to the nets ( gate - to - gate connections ) in the circuit , i.e. , @xmath26 . for ease of denotation",
    ", we will refer to the gates as @xmath24 and the nets as @xmath25 respectively .",
    "notice that @xmath27 if - and - only - if the output of gate @xmath9 is connected to the input of gate @xmath28 for all gates @xmath29 .",
    "we have : @xmath30    the cmol cell assignment problem is to place the circuit @xmath8 on @xmath17 such that each gate will occupy one - and - only - one cmol cell , and the input - output connectivity of each nor / not gate in the assigned cmol cell @xmath22 falls within the `` connectivity domain '' @xmath20 .",
    "we can describe the cmol cell assignment problem mathematically as an injective function @xmath31 : @xmath32 where @xmath33    we now propose a satisfiability - based ( sat ) approach for solving the cmol cell assignment problem .",
    "we first introduce a set of boolean variables to encode the various possibilities of placing nor gates to cmol cells .",
    "we then formulate the boolean constraints to characterize the injective nature of the mapping and the cmol requirements .",
    "let @xmath34 be a boolean variable that represent the assignment of gate @xmath9 on cmol cell @xmath22 , where @xmath35 and @xmath19 .",
    "since each gate must be assigned to at most one cmol cell , we have : @xmath36    in addition , each gate must be assigned to at least one cmol cell : @xmath37    we can not assign two or more gates to the same cmol cell : @xmath38    the connected gates in the circuit must be placed within the connectivity domain : @xmath39    we construct a satisfiability formula by conjuncting all the above constraints ( [ eqn : cell_mutex ] ) , ( [ eqn : place_exist ] ) , ( [ eqn : gate_mutex ] ) , ( [ eqn : conn_domain ] ) .",
    "we feed all the above constraints to a sat solver .",
    "the solution that satisfies the conjunction is the cell assignment result .",
    "we can introduce more constraints to address practical issues of the cell assignment problem .",
    "for example , our formulation so far allows any nor gate to be assigned to any cmol cell , as long as it fits all the above constraints .",
    "however , under certain situations , we want to prevent the assignment of a certain gate @xmath9 to a subset @xmath40 of cmol cells . to handle such cases",
    ", we simply have to set the boolean variable @xmath34 to be false , where @xmath41 .",
    "we can then propagate constants through the boolean formulations and simplify the problem .",
    "notice that the cell assignment method presented here is designed to address technology - specific issues for the cmol architecture at the lowest design module level",
    ". a top - down hierarchical approach of both global placement and detailed placement techniques should be used for large designs .",
    "contemporary sat solvers are architected to terminate early as soon as any solution is found .",
    "if no solution exists , the sat solver will search all possible cases and essentially prove to us that the problem is unsolvable .",
    "notice that if there are more than one solutions to the problem , the sat solver tend to finish very fast .",
    "satisfiability has been used to solve a variety of problems @xcite .",
    "many commercial cad tools in industry also use sat solvers in their cad flow .",
    "we first experiment with a simple full adder as an example .",
    "figure  [ fig : adder_nor](a ) shows the logic structure of a full adder in product of sum format .",
    "the adder has 3 inputs ( @xmath15 , @xmath16 , @xmath42 ) and 2 outputs ( @xmath43 , @xmath44 ) . using our transformation technique in section  [ sec : nor ] , we converted the logic circuit to nor format as shown in figure  [ fig : adder_nor](b ) .",
    "we then feed the nor circuit to our cmol cell assignment tool , and specified a @xmath45 region with the following restrictions :    * inputs @xmath15 and @xmath16 must be located at the left 3 cells ( only 2 are needed)on the top row ; * input @xmath42 must be located at the right column at the second cell from the bottom up ; * output @xmath44 must be located at the left column at the second cell from the bottom up ( corresponding row with @xmath42 ) ; * output @xmath43 must be located within the left 3 cells at the bottom row ; and * all other gates must be located within the lower left @xmath46 cmol cell region .",
    "all these restrictions are fed to the sat constraints by setting the corresponding cell assignment variables to be constant .",
    "the result is shown in figure  [ fig : adder_cmol ] .",
    "for each cmol cell , we use a red dot at the lower - left ( and a blue dot at the upper - right ) to indicate the output ( input ) terminals , respectively .",
    "the lines connecting the dots are corresponding to the interconnection between the nor gates in figure  [ fig : adder_nor](b ) . notice that these lines are simple logic connection indicators , and should not be confused with the nanowire crossbar which should be regularly oriented at an angle relative to the square array of the cells .",
    "there are many possible causes of defect to the cmol implementation as illustrated in figure  [ fig : defect ] . in the figure",
    ", we use @xmath47 to denote the nanowires , and @xmath48 to denote the nanodevices , respectively",
    ". the nanodevice @xmath49 ( colored gray ) is defective , like a pre - programmed `` off '' ( stuck - open ) .",
    "the nanodevice @xmath50 ( colored green ) has a different defect , like a short - circuit .",
    "it is pre - programmed `` on '' ( stuck - closed ) .",
    "@xmath51 are non - defective ( colored pink ) .",
    "they can be programmed `` on '' or `` off '' by the user .",
    "given cmol cells @xmath13 , @xmath14 , and @xmath52 in figure  [ fig : defect ] , and assuming there are no defects , we can implement @xmath53 through @xmath54 .",
    "if nanowire @xmath55 is broken ( defect ) , we have to use cmol cell @xmath15 instead of @xmath13 , and program @xmath56 `` on '' .",
    "so @xmath57 , where @xmath15 replaces @xmath13 .",
    "if @xmath49 is stuck - open , then it does nt matter @xmath55 is broken or not , we can not connect cells @xmath13 and @xmath52 . in this case , we can either use @xmath15 to replace @xmath13 like above , or we can use @xmath16 to replace @xmath52 , and enable @xmath58 and @xmath59 , such that @xmath60 , where @xmath16 replaces @xmath52 .    in general , we can foresee the following types of defects for the cmol architecture :    1 .",
    "a ( input / output ) nanowire for a cmol cell is broken into two or more segments .",
    "hence the cmol cell may not be able to connect to all other @xmath61 cmol cells within its input / output connectivity domain or radius @xmath62 ( where @xmath63 ) . in this case",
    ", the cmol cell is still useful but its connectivity domain should be modified into a different shape .",
    "2 .   the nanodevice connecting two perpendicular nanowires ( let s say the output nanowire of cell a and input nanowire of cell b ) is stuck - at - open . in this case , the connection from a to b through this nanodevice is broken . but these two cmol cells can still be used .",
    "we simply have to modify the connectivity domains such that a is outside the input connectivity domain of b , and b is outside the output connectivity domain of a. 3 .",
    "the nano - device connecting two perpendicular nanowires ( let s say the output nanowire of cell a and input nanowire of cell b ) is stuck - at - closed . in this case",
    ", a will always be in the nor gate input of b. to optimize the cmol cell usage , we have two choices : * do not use cell b , but cell a can still be used if we desire . *",
    "assign a nor gate in cell b , and assign one of b s inputs to cell a. 4 .",
    "something else is wrong with a cmol cell randering this cell to be usuable , including ( but not limited to ) the following : * the input / output terminal connecting the cmos layer and the input / output nanowire is broken * the cmos inverter is broken    notice that prior work @xcite is mainly focused on our defect type 2 above .",
    "this paper is the first attempt to address various other types of defects .",
    "we can formulate the above 4 defects using satisfiability constraints .    for defect types 1 and 2 , the input / output connectivity domain for the cmol cells related to the defect should be modified .",
    "notice that our cell assignment formulation in section  [ sec : satis ] does not assume any regularity for the connectivity domains , so it can be modified to arbitrary shape depending on the defect .    for defect type 3",
    ", the cmol cell a will always be one of the nor gate input for cmol cell b. we need to make sure that any node @xmath9 with no fanin ( i.e. primary input ) can not be assigned to cell b. this can be easily done by setting the corresponding cell assignment variables at cell b to false .",
    "@xmath64 for all @xmath35 where @xmath65 .",
    "we also need to make sure that any gate assigned to cell b must have one of its input placed at cell a. @xmath66 for all @xmath67 where @xmath68 .    for defect type 4 , we can not assign any gate to the defective cmol cell .",
    "hence we must set the cell assignment variable of every gate at that cell to false .",
    "@xmath69 for all @xmath35 , and @xmath22 is the defective cmol cell .",
    "given a manufactured cmol device with some known defects , and an initial mapping ( most likely done before the manufacturing ) that did not take those defects into account , we need to reconfigure the cmol device to work around those defects .",
    "we can use the following algorithm for the reconfiguration :    find all assigned cells that conflicts with the defects compute the center of mass of all conflicts cut a small region @xmath70 around the center of mass enlarge the region @xmath70 redo cell assignment in @xmath70 to avoid conflict    our algorithm takes advantage of the idea that many defects in the real world tend to be clustered together .",
    "so we use a center of mass computation to focus our reconfiguration region on the affected cells .",
    "besides the adder example , we conducted experiments on iscas benchmarks . for each design ,",
    "we first carve out the combinational logic , i.e. , convert all inputs / outputs of latches ( or sequential elements ) to primary outputs / inputs respectively .",
    "we then run the sis sweep operation to simplify the circuit ( and remove redundant gates ) .",
    "we convert the circuit to nor gates using the simple algorithm in section  [ sec : nor ] . to make sure that our logic transformations are correct , we formally verified the logic correctness of the transformation results using equivalence checkers .",
    "finally , we assign the nor gates to cmol cells using our method in section  [ sec : satis ] .",
    "the cmol cell region for each design was choosen to be a square shaped ( or nearly square ) territory where the number of cells is slightly more than the number of nor gates in the circuit .",
    "we also put special restriction so that the primary inputs / outputs are located around the perimeter of the square region .",
    "we use the connectivity domain with radius @xmath71 as specified in @xcite .",
    "we ran our satisfiability constraints through the minisat  @xcite solver to generate the cell assignment .",
    "all experiments are performed on linux with a 1.5ghz intel pentium 4 cpu with 3 gb memory .",
    "table  [ expiscas ] summarizes our experiments .",
    "the inputs / outputs column shows the primary inputs / outputs after carving out the combinational part of the benchmark design .",
    "the cells column shows the number of nor / not gates that need to be assigned to cmol cells .",
    "the x and y dimensions show the size of the cell assignment territory .",
    "the vars and clauses indicate the size of the cnf generated for the satisfiability formulation .",
    "the time column indicates the cpu seconds that the minisat took to solve the problem .    [ cols=\"<,>,>,>,>,>,>,>,>\",options=\"header \" , ]",
    "in this paper , we present a cad framework for the cmol architecture .",
    "we transform any netlist of and / or / not gates to a nor gate circuit , and then map the nor gates to cmol cells .",
    "our cmol cell assignment is based on satisfiability and it can generate the assignment if and only if the solution exists .",
    "we also present a model for various types of defects under the cmol architecture , most of which has never been studied before .",
    "we present a reconfiguration technique that can deal with all these defects through our cad framework .",
    "this is the first work on automated cmol cell assignment , and the first to model and tolerate several different cmol defects .",
    "our experiments indicate that our reconfiguration technique is fast and scalable .",
    "d.  j. resnick , w.  j. dauksher , d.  mancini , k.  j. nordquist , t.  c. bailey , s.  johnson , n.  stacey , j.  g. ekerdt , c.  g. willson , and s.  v. sreenivasan .",
    "imprint lithography for integrated circuit fabrication .",
    ", 21:2624 , 2003 ."
  ],
  "abstract_text": [
    "<S> we present a cad framework for cmol , a hybrid cmos/ molecular circuit architecture . </S>",
    "<S> our framework first transforms any logically synthesized circuit based on and / or / not gates to a nor gate circuit , and then maps the nor gates to cmol . </S>",
    "<S> we encode the cmol cell assignment problem as boolean conditions . </S>",
    "<S> the boolean constraint is satisfiable if and only if there is a way to map all the nor gates to the cmol cells . </S>",
    "<S> we further investigate various types of static defects for the cmol architecture , and propose a reconfiguration technique that can deal with these defects through our cad framework . </S>",
    "<S> this is the first automated framework for cmol cell assignment , and the first to model several different cmol static defects . </S>",
    "<S> empirical results show that our approach is efficient and scalable . </S>"
  ]
}