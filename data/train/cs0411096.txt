{
  "article_text": [
    "in recent years the identification and categorization of networks has become an emerging research area in fields as diverse as sociology and biology , but has remained relatively unutilized in software engineering .",
    "the study and categorization of software systems as networks is a promising field , as the the identification of networks in software systems may prove to be a valuable tool in managing the complexity and dynamics of software growth , which have traditionally been problems in software engineering .",
    "however , current trends in software development offer diverse and accessible software to study , which may help software engineers learn how to create better programs .",
    "in particular , open - source software ( oss ) allows researchers access to a rich set of examples that are production - quality and studiable `` in the wild '' .",
    "they are a valuable asset that can aid in the study of software development and managing complexity .    in oss systems ,",
    "applications are often distributed in the form of packages .",
    "a package is a bundle of related components necessary to compile or run an application . because resource reuse is naturally a pillar of oss , a package is often dependent on some other packages to function properly .",
    "these packages may be third - party libraries , bundles of resources such as images , or unix utilities such as grep and sed .",
    "package dependencies often span across project development teams , and since there is no central control over which resources from other packages are needed , the software system self - organizes in to a collection of discrete , interconnected components .",
    "this research applies complex network theory to package dependency networks mined from two oss repositories .",
    "a network is a large ( typically unweighted and simple ) graph @xmath0 where @xmath1 denotes a vertex set and @xmath2 an edge set .",
    "vertices represent discrete objects in a dynamical system , such as social actors , economic agents , computer programs , or biological producers and consumers .",
    "edges represent interactions among these `` interactons '' .",
    "for example , if software objects are represented as vertices , edges can be assembled between them by defining some meaningful interaction between the objects , such as inheritence or procedure calls ( depending on the nature of the programming language used ) .",
    "real - world networks tend to share a common set of non - trivial properties : they have scale - free degree distributions and exhibit the small - world effect .",
    "the degree of a vertex @xmath3 , denoted @xmath4 , is the number of vertices adjacent to @xmath3 , or in the case of a digraph either the number of incoming edges or outgoing edges , denoted @xmath5 and @xmath6 , respectively . in real - world networks such as the internet @xcite , the world - wide web @xcite , software objects @xcite , networks of scientic citations @xcite , the distribution of edges roughly follows a power - law : @xmath7 .",
    "that is , the probability of a vertex having @xmath4 edges decays with respect to some constant @xmath8 .",
    "this is significant because it shows deviation from randomly constructed graphs , first studied by erd@xmath9s and r@xmath10nyi and proven to take on a poisson distribution in the limit of large @xmath11 , where @xmath12 @xcite .",
    "random connection models also fail to explain the `` small - world effect '' in real networks , the canonical examples being social collaboration networks @xcite , certain neural networks @xcite , and the world - wide web @xcite .",
    "the small - world effect states that @xmath13 and @xmath14 where @xmath15 is the _ clustering coefficient _ of a graph , and @xmath16 is the s _ characteristic path length _ @xcite .",
    "the clustering coefficent is the propensity for neighbors @xmath17 of a vertex @xmath3 to be connected to each other . for a vertex @xmath3",
    ", we can define the clustering coefficent as @xmath18 , and therefore @xmath19 $ ] .",
    "the clustering coefficient for a graph is the average over all vertices , @xmath20 .",
    "real - world networks are normally highly clustered while random networks are not , because @xmath21 for large networks @xcite . because most networks are sparse ,",
    "that is @xmath22 , random networks are not highly clustered .",
    "@xmath16 is the average geodesic ( unweighted ) distance between vertices .    to summarize",
    ", random graphs are not small - world because they are not highly clustered ( although they have short path lengths ) and they are do not follow the commonly observed power - law because the edge distribution is poissonian . the presence of these features in networks indicate non - random creation mechanisms , which although several models have been proposed , none is agreed upons . in order to make accurate hypothesis about possible network creation mechanisms , a wide variety of real - world networks sharing these non - trivial properties should be identified .",
    "previous research in networks of software have focused on software at``low '' levels of abstraction ( relative to the current research ) .",
    "clark and green @xcite found zipf distributions ( a ranking distribution similar to the power - law , which is also found in word frequencies in natural language @xcite ) in the structure of cdr and car lists in large lisp programs during run - time . in the case of object - oriented programming languages ,",
    "several studies @xcite have identified the small - world effect and power - law edge distribution in networks of objects or procedures where edges represent meaningful interconnection between objects , such as inheritence or in the case in procedural languages , procedures are represented as vertices and edges between vertices symbolize function calls .",
    "similar statistical features have also been identified in networks where the vertices represent source code files on a disk and edges represent a dependency between files ( for example , in c and c++ one source file may _ # include _ another ) @xcite , and in documentation systems @xcite .",
    "mining the debian gnu / linux software repository @xcite and the freebsd ports collection @xcite has allowed us to create networks of package dependencies . in the case of the debian repository",
    ", data was taken from the i386 branch of the `` unstable '' tree , which contains the most up - to - date software and is the largest branch .",
    "the debian data was extracted using _ apt _",
    "( advanced packaging tool ) , while the bsd data was extracted from the ports _ index _ system .",
    "the bsd ports system allowed us to distinguish between run - time dependencies and compile - time ( build ) dependencies .",
    "the data here is for only compile - time dependencies , although results are similar for run - time dependencies .",
    "graphs were constructed in java using the java universal network / graph framework @xcite .",
    "`` snapshots '' of the repositories were taken during the month of september , 2004 .",
    "the debian network contains @xmath23 packages and @xmath24 edges , giving each package an average coupling to @xmath25 packages . for the debian network , @xmath26 and @xmath27",
    "this puts the debian network in the small - world range , since an equivalent random graph would have @xmath28 and @xmath29 .",
    "there are 1,945 components , but the largest component contains 88% of the vertices .",
    "the rest of the vertices are disjoint from each other , resulting in a large number of components with only 1 vertex .",
    "the diameter of the largest component is 31 .",
    "the distribution of outgoing edges , which is a measure of dependency to other packages , follows a power - law with @xmath30 .",
    "the distribution of incoming edges , which measures how many packages are dependent on a package , follows a power - law with @xmath31 .",
    "while 10,142 packages are not referenced by any package at all , the most highly referenced packages are referenced thousands of times .",
    "73% of packages depend on some other package to function correctly .",
    "correlation between @xmath5 , @xmath6 , and package size is not calculated because the normality assumption is violated .    [ cols=\"<,<,<\",options=\"header \" , ]     the bsd compile - time dependency network contains @xmath32 packages and @xmath33 edges , coupling each package to an average of @xmath34 other packages . for the bsd network , @xmath35 and @xmath36 .",
    "an equivalent random graph would have @xmath37 and @xmath38 .",
    "hence , the bsd network is small - world .",
    "the degree distribution of the bsd network also resembles a power - law , with @xmath39 and @xmath40 . for the run - time network ,",
    "results were similar : the run - time network is both small - world and follows a power - law .",
    "in the debian network , the 20 most highly depended - upon packages are libc6 ( 7861 ) , xlibs ( 2236 ) , libgcc1 ( 1760 ) , zlib1 g ( 1701 ) , libx11 - 6 ( 1446 ) , perl ( 1356 ) , libxext6 ( 1110 ) , debconf ( 1013 ) , libice6 ( 922 ) , libsm6 ( 919 ) , libglib2.0 - 0 ( 859 ) , libpng12 - 0 ( 622 ) , libncurses5 ( 616 ) , libgtk2.0 - 0 ( 615 ) , libpango1.0 - 0 ( 610 ) , libatk1.0 - 0 ( 602 ) , libglib1.2 ( 545 ) , libxml2 ( 538 ) , libart-2.0 - 2 ( 524 ) , and libgtk1.2 ( 474 ) .",
    "the number in parentheses represents the number of incoming edges .",
    "the list is composed mainly of libraries that provide some functionality to programs such as xml parsing or that provide some reusable components such as graphical interface widgets .",
    "because the most highly - connected package ( libc6 ) is required for execution of c and c++ programs , we can infer that these are the most widely used programming languages .",
    "figure 1 shows the double - log distribution of edges in the debian network ( scatterplots for the bsd network would have a similar shape ) . from the figure",
    "we can see the heavy - tailed power - law shape .",
    "the absolute value of the slope of the regression line indicates the power - law exponent , @xmath41 .",
    "this research has shown that package dependency networks mined from two open - source software repositories share the following properties typical to other real - world networks :      there are many directions for future research in the study of software networks .",
    "currently , there is no model of network formation that takes software dynamics ( reuse , refactoring , addition of new packages ) in to account .",
    "also , the impact of the network structure on software dynamics should be investigated .",
    "future research should identify other networks in software and move towards formulating a theory of networks and their value to software engineering .",
    "additional dependency networks can be constructed on windows computers using memory profiling tools , and determining interactions based on shared .dll ( dynamic library link ) files and active - x controls ."
  ],
  "abstract_text": [
    "<S> this research analyzes complex networks in open - source software at the inter - package level , where package dependencies often span across projects and between development groups . </S>",
    "<S> we review complex networks identified at `` lower '' levels of abstraction , and then formulate a description of interacting software components at the package level , a relatively `` high '' level of abstraction . by mining open - source software repositories from two sources , </S>",
    "<S> we empirically show that the coupling of modules at this granularity creates a small - world and scale - free network in both instances .    </S>",
    "<S> complex networks , open - source software , software engineering </S>"
  ]
}