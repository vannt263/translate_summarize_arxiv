{
  "article_text": [
    "this paper aims to analyze online algorithms [ sec : online - algorithms ] for dynamically evolving graphs@xcite .",
    "the input consists of a bipartite graph @xmath0 with two types of nodes - consumers @xmath1 and producers @xmath2 ( @xmath3 ) and edges @xmath4 where @xmath5 and _ attribute arrays _ associated with nodes @xmath6 , v_i \\in v$ ] and edges @xmath7 , e_{ij } \\in e$ ] whose values may change over time .    a sequence of online _ service requests_- @xmath8 is received as input that consist of one or more consumer demands and edge failures .",
    "service requests can contain more than one demands corresponding to consumers @xmath9 - @xmath10 ( corresponding to a multi - tape turing machine ) . here , t is the instance when service request @xmath11 is received and is an increasing function of time .",
    "demands act by either removing / adding edges or modifying edge attributes .",
    "the objective is to minimize the overall cost of weight assignments such that it is not much worse than cost of optimal offline . @xmath12    with constraints for consumers , @xmath13    and producers , @xmath14    the dynamic nature of the edges",
    "is characterized by the following - @xmath15    this paper focuses on the optimal offline strategy and tries to find competitive online algorithms for this problem .",
    "this papers tries to use randomization to make the online algorithms more competitive .",
    "this papers also attempts to derandomize the randomized online algorithm .",
    "this paper considers a subset of the problem specified in section [ sec : scope ] . given a complete bipartite graph @xmath0 where , @xmath16 is a finite set of nodes which consists of consumers @xmath17 with indegree zero and producers @xmath18 with outdegree zero such that , @xmath3 and edges @xmath19 where , @xmath20 with distances @xmath21 between them .",
    "online service requests @xmath22 are received as input such that each service request has a unique demand @xmath23 ( @xmath24 ) . these demands",
    "act by either increasing the edge weights @xmath25s or removing an edge by setting @xmath26 .",
    "edge weights @xmath25s assigned to the edges can not be reduced apart from the case where an edge goes down . in this case , weights are set to zero - @xmath27 .",
    "find an @xmath28-competitive online algorithm for satisfying the service requests @xmath29 that minimizes the sum of weights : @xmath30 where , c is a constant and opt(t ) is the output of the optimal offline algorithm at instance t. such that ,    @xmath31    constraint in equation [ operation 6 ] guarantees that demands generated by the consumer until now are satisfied .    @xmath32    constraint in equation [ operation 7 ] guarantees limited capacities for the producers .",
    "consider a version of the problem [ sec : problem - definition ] where edge distances @xmath21 can change as specified by the service requests .",
    "consider a version of the problem [ sec : problem - definition ] where capacities associated with the producers @xmath33 can change as specified by the service request .",
    "consider a version of the problem [ sec : problem - definition ] where new consumers / producers can be added to the graph and some of the existing consumers / producers can go down .",
    "the vms running in a distributed system can be considered as the consumer and the data - centers as the producers of storage .",
    "the capacity of the producers can be considered as an attributes of the producer .",
    "the average time per i / o operation or latency between a vm and a data - center can be considered as the distance of the edge . and the sequence of i / o requests generated by the consumers can be considered at the service request in the problem [ sec : problem - definition ] . and the edge failures are equivalent to the data - center or the vm being down .",
    "the objective of this paper is to find a scheme for allocating these requests so that the overall cost of i / o operations at any instant is not more than @xmath28 times worse than the optimal cost opt that can be achieved when all the service requests are know at the beginning .    as more and more data moves to the cloud",
    "every day , it becomes important to analyze distributed resource scheduling schemes for better performance of vms with respect to i / o read and write operations . to make the storage management transparent to the users of the cloud platform",
    "it is important to have automated storage management schemes running on the cloud platform that make the best use of the available storage while guaranteeing good performance to the users .",
    "aggregating the available storage across the distributed system into resource pools and distributing them prevents the storage from being wasted .",
    "one of the well known distributed resource scheduling schemes is used in vmware s virtualization framework @xcite - virtual infrastructure using virtualcenter - a centralized distributed system and , recently in vsphere - a cloud os .",
    "both these systems work by pooling the available storage into resource pools in a tree - like data structure .",
    "this paper @xcite analyzes the various distributed resource allocation techniques used in distributed systems .",
    "we consider the theoretical aspects of this problem of allocating storage optimally to the vms .",
    "some of the points to be noted are as follows-    * @xmath34 storage associated with a vm is a non decreasing function of time . *",
    "@xmath34 previously allocated storage can not be moved to another data - center as this can be very time - consuming for large storage sizes .",
    "* @xmath34 some vms may consume storage at a faster rate and can starve other vms . * @xmath34 to reduce the complexity we only consider a graph with fixed number of nodes ; new vms or data - centers are not added dynamically .",
    "similar problems involving min - flow @xcite , online matching @xcite , dynamic assignment @xcite , lp techniques @xcite , bipartite network flow @xcite and combinatorial optimization @xcite , distributed resource allocation @xcite have been studied in earlier .",
    "hungarian algorithm@xcite is one of the earliest known method for solving the assignment problem that uses the primal - dual method .",
    "it is to be noted that the problem studied in this paper does not require a matching .",
    "fairness of resource allocation @xcite and dynamic load balancing @xcite issues related to these problems have also been studied before .",
    "@xcite studies how randomization can be used to improve the competitiveness of online algorithms .",
    "@xcite throws light on how such schemes could be adapted to large scale cloud - computing platforms .",
    "optimal offline algorithm for this problem is a linear program .",
    "it seems trivial at first to iterate through the demands and allocate weights corresponding to demands , on the edges with least distance @xmath21 that are connected to producers with available capacity .",
    "however , the order in which demands are considered will affect the cost of output .",
    "the optimal algorithm has to look at all the demands simultaneously and then look at all the available edges where the demands can be allocated .    due to this , one has to consider all possible assignments of demands to edges in order to find the least cost assignment .",
    "this paper uses lp for solving the offline version due to ready availability of lp code that is used for simulations in section [ sec : simulations ] .",
    "[ [ sec : offline - lp ] ] lp ~~    the lp formulation for this problem is as follows -    objective function : @xmath35    as the demands are non - negative the weights are also non - negative .",
    "edges that fail [ operation 4 ] have their corresponding @xmath21 s set to infinity so that , they are not selected .",
    "constraints : @xmath36    equation in [ operation 9 ] suggests the total demand of a consumer @xmath37 should be met .",
    "@xmath38    equation in [ operation 10 ] suggests , the capacities of the producers can not not be exceeded .",
    "lp formulation in [ sec : offline - lp ] produces a valid assignment of weights @xmath25 on edges @xmath39 corresponding to the demands r.    equation [ operation 9 ] gurantees that the total demand generated by consumer @xmath37 is satisfied .",
    "equation [ operation 10 ] ensures that the capacities of producers @xmath40 are not exceeded . by definition [ sec : problem - definition",
    "] this is a valid assignment of weight on edges .",
    "lp formulation in [ sec : offline - lp ] produces the optimal assignment of weights @xmath25 on edges @xmath39 corresponding to the demands in r.    lemma 1 ensures that this lp produces a valid solution . since the objective [ operation 8 ] is a minimization function and fractional weights",
    "are allowed , it follows that the solution produced by lp is the optimal solution .    for edge failures ,",
    "the lp formulation [ sec : offline - lp ] has to be modified by removing the failed edges , adding constraints for the current weight assignments and adding the demands .",
    "online algorithms are used for solving problems where the entire input is not known and partial decisions have to be made at each step .",
    "the input is received incrementally .",
    "competitive ratio is used to measure the performance of online algorithm as compared to the optimal offline algorithm that knows the entire input .",
    "a @xmath28-competitive online algorithm alg is defined as follows with respect to an optimum offline algorithm opt - @xmath41    in the definition of online algorithm in equation [ operation 14 ] , @xmath28 is called the _ competitive ratio _ and @xmath42 can be considered as the _ startup cost _ of the algorithm .",
    "one of the widely used online algorithm is for the k - server problem @xcite where k - servers have to service n clients and the order of the service requests from the clients is not known at the beginning .",
    "the objective of this problem is to find the shortest path to serve the clients .",
    "this algorithm looks for the best available edge - @xmath43 .",
    "this leads to a myopic behavior as the algorithm always looks for local minima .",
    "for example , consider a graph consisting of two consumers @xmath44 and @xmath45 with demands @xmath46 and @xmath47 such that , @xmath48 and two producer @xmath49 and @xmath50 with capacities @xmath51 and @xmath52 respectively such that @xmath53 and @xmath54 .",
    "let the edges be @xmath55 , @xmath56 , @xmath57 and @xmath58 such that @xmath59 and @xmath60 .",
    "demand @xmath46 from consumer @xmath44 arrives first and is allocated on the cheapest edge @xmath55 . since , @xmath54 the demand @xmath61 from consumer @xmath45 that arrives next",
    "is allocated on the edge @xmath58 .",
    "the total cost is @xmath62 = @xmath63 .",
    "the cost would have been @xmath64",
    "= @xmath65 which is lesser than the cost of output produced by greedy since @xmath66 .",
    "it is observed that , @xmath67    substituting equation [ operation 11 ] in [ operation 10 ] we get -    @xmath68*m_j , \\forall j \\in p \\end { split } \\label{operation 13}\\ ] ]    this paper aims to analyze an online algorithm that is more far - sighted .",
    "the randomized - greedy algorithm in the next section also considers the non - optimal edges to prevent getting stuck in local minima .",
    "@xmath69 @xmath70 @xmath71 @xmath72 @xmath70 @xmath73 @xmath74 @xmath75 @xmath76    this algorithm intends to be more far - sighted than the greedy algorithm . for this , it maintains a set of top k cheapest available edges , sorted by @xmath21 . at each step",
    "we consider and edge at random from this set and compare its cost of the edge selected by greedy algorithm .",
    "if an edge meeting the condition @xmath77 is found then we select this edge .",
    "this procedure is repeated _",
    "n _ number of times .",
    "if no such edge is found within n iterations then we simply return the edge selected by greedy .",
    "in this algorithm @xmath42 is called the sub - optimal penalty . when it is set to 1",
    "then it becomes a greedy algorithm .",
    "as @xmath42 increases the algorithm is allowed to select higher cost edges .",
    "the aim is to prevent the algorithm from getting stuck in a local optima .",
    "as it is seen in the simulation results [ cost - rand ] , this algorithm performs better when the distribution of service requests is not uniform .",
    "this papers aims to measure the performance of online algorithms using pairwise - independent random numbers as input in place of the real - world data .",
    "recursive n - gram hashing is used to generate consumer demands and producer capacities .",
    "the randomized greedy algorithm is derandomized by running it multiple times and the output with the least cost is selected among the available outputs .",
    "using this method requires higher processing power although , it improves the performance of randomized algorithm .",
    "this paper simulates the online assignment problem using c++ - @xmath78 , lp solver @xmath79 and shell scripts on linux ( red hat 4.3.0 - 8 ) platform .",
    "shell script is used to generate input using built - in random number generator for edge distances , producer capacities , consumer demands , edge failures .",
    "the online greedy and randomized algorithms [ alg1 ] are implemented in c++ .",
    "the binary file containing these algorithms takes three parameters : type of algorithm , input file and output file .",
    "the outermost shell script is invoked as -    .... evaluatedrsusers1.sh $ users $ demands $ resources $ capacities $ failures ....    this script generates an input file for the online algorithms -    .... no of consumers : 2 no of producers : 2 edge distances 47 17 11 2 producer capacities 26 839 consumer demands 97 78 number of edge failures : 1 1 < - demand # 3 < - edge # ....    and for the offline lp solver -    .... min : 47x1 + 17x2 + 11x3 + 2x4 ; < - objective function x1+x3<=26 ; < - producer constraint   x2+x4<=839 ; x1+x2=97 ;   < - consumer constraint x3+x4=78 ; ....    this script then invokes the lp solver -    .... ./lp_solve",
    "model.lp > >",
    "drsusersout.txt ....    and the binary file containing the greedy and randomized algorithms -    .... ./onlinedrsalgo1.o greedy onlinein.txt drsusersout.txt ./onlinedrsalgo1.o randomized onlinein.txt drsusersout.txt ....    main function in c++ for solving the online version of the problem -    .... int main(int argc , char * argv [ ] ) {     getalgo(argv[1 ] ) ;     readinputfile(argv[2 ] ) ;     getnumproducers ( ) ;     getnumconsumers ( ) ;     getedgedist ( ) ;     initceweights ( ) ;     initeweights ( ) ;      getconsumerdemands ( ) ;     getproducercapacities ( ) ;     initedgeavail ( ) ;     getedgefailures ( ) ;     allocatedemands ( ) ;     writeoutputfile(argv[3 ] ) ;     return 0 ; } ....                the weights of edges are initialized to zero .",
    "the availabilities of edges are initialized to the capacity of the producers connected . for greedy algorithm",
    ", the program chooses the available edge with the least cost . for the randomized algorithm , the program first sorts the available edges in increasing order",
    ". then picks an edge suggested by the srand ( ) and rand ( ) function such that the cost of this edge is less than @xmath42 times the best available edge .",
    "the weight of the edge returned - @xmath80 , is increased by the value of demand and the availability @xmath81 is decreased by the same value . if there are any edge failures at the current demand the program generates a new internal demand and sets @xmath82 for the edge that failed .",
    "the program writes the total cost along with the @xmath83 to the output file .",
    "stl map data - structures with double data - types are used for edge and node properties .",
    "stl 2-d vectors with double data - types are used for tracking the weights allocated on the edges for each consumer .    for finding the optimal offline solution in the case of edge failures additional constraints",
    "are added to lp at each instance of edge failure , such that the currently allocated weights are not disturbed .",
    "this is done for each of the edge failures with the demand of the consumers at each stage being equal to their sum of demands until the edge failed .      in _ fig .",
    "[ cost - opt ] _ as the number of users increases with the same number of resources , the cost of the optimal offline also increases . the number of incoming edges to any producer increases as the consumers increase .",
    "this increases the competition for the resources available at the producers .",
    "the optimal offline algorithm has to select costlier edges due to limited availability of edges , as the number of demands increase and this increases the overall cost .",
    "this is inline with fig 4 in @xcite where it is referred to the latency ( which is the overall time required to complete i / o requests ) .",
    "greedy algorithm _ fig .",
    "[ cost - greedy ] _ closely follows the optimal offline algorithm at each step of the input .",
    "greedy which produces output that has a cost comparable to the optimal solution and does not deviate much apart from the cases where higher demands arrive later as described in paragraph 2 in section [ sec : online - greedy ] .",
    "randomized algorithm does better than greedy algorithm in cases where higher demands arrive later in the sequence . in this case , greedy algorithm fails badly as it does not have any cheaper edges left towards the end and has to select costlier edges for higher demands",
    ". however , randomized algorithm__fig .",
    "[ cost - rand ] _ _ does not cope well for graphs with higher number of nodes .",
    "randomized algorithm pays the penalty of selecting a suboptimal edge to get an overall cost improvement ; however due to large size of the demands it is not able to recover from this penalty and this causes a cascading effect . in _",
    "fig.3 _ the randomized online algorithm shows the highest standard deviation because of the random nature of the selections .",
    "this paper concludes that it is possible to produce a competitive online algorithm for this problem using randomization .",
    "the competitiveness of this algorithm suffers for higher number of nodes and edges in the graph .",
    "this paper believes that it is possible to produce a competitive version of this algorithm by setting the suboptimal penalty to zero at the beginning of the algorithm and iteratively increasing it depending on the effect on the cost of the output .",
    "the results found this paper are based on the simulation experiments .",
    "it will be interesting to measure the performance of these online algorithms for real - world i / o demands .",
    "and , how it scales with the size of input .",
    "work on solving other versions of this problem where the distances @xmath21s of edges may change over time is currently in progress .",
    "_ dynamic graphs : _ graphs that have a finite set of nodes and edges but where , the edges or nodes may become unavailable and available over time .",
    "_ assignment problem : _ given a bipartite graph with tasks and resource on either side and a cost associated with allocating a task to a resource , the assignment problem is used to find the optimal allocation of the resources to the tasks ( to minimize a objective function )        99 kuhn hw , the hungarian method for the assignment problem , naval research logistics , quarterly * 2 * , 1955 , 8397 .",
    "toroslu ih , uc oluk g , incremental assignment problem , information sciences , * 177 * , 6 ( march 2007 ) , 15231529 . b. fuchs , w. hochstattler , and w. kern , online matching on a line , theoretical computer science * 332 * ( 1 - 3 ) , 2005 .",
    "adam meyerson , akash nanavati , laura poplawski , randomized online algorithms for minimum metric bipartite matching , proceedings of the seventeenth annual acm - siam symposium on discrete algorithms , 954 - 959 , 2006 .",
    "s. khuller , s. mitchell , and v. vazirani , on - line algorithms for weighted bipartite matching and stable marriages , theory of computer science * 127(2 ) * , 1994 .",
    "garg n , kumar a , better algorithms for minimizing average flow - time on related machines , automata , languages and programming , pt .",
    "1 , lecture notes in computer science , * 4051 * , 181 - 190 , 2006 .",
    "ahuja rk , orlin jb , stein c , et al . ,",
    "improved algorithms for bipartite network flow , siam journal on computing , * 23 * , 5 , 906 - 933 , oct 1994 .",
    "goldberg av , plotkin sa , shmoys db , et al . , using interior - point methods for fast parallel algorithms for bipartite matching and related problems , siam journal on computing , * 21 * , 1 , 140 - 150 , feb 1992 .",
    "correa jr , wagner mr , lp - based online scheduling : from single to parallel machines , integer programming and combinatorial optimization , proceedings , lecture notes in computer science , * 3509 * , 196 - 209 , 2005 .",
    "amir y , awerbuch b , barak a , borgstrom rs , keren a , an opportunity cost approach for job assignment in a scalable computing cluster , ieee transactions on parallel and distributed systems * 11 * , 7 , 760 - 768 , jul 2000 .",
    "spivey mz , powell wb , the dynamic assignment problem , transportation science 38 , * 4 * ,",
    "november 2004 , 399419 .",
    "monika r. henzinger , valerie king , randomized fully dynamic graph algorithms with polylogarithmic time per operation , journal of the acm ( jacm ) archive , * 46 * , 4 , 502 - 516 , july 1999 .",
    "david alberts , giuseppe cattaneo , giuseppe f. italiano , an empirical study of dynamic graph algorithms , journal of experimental algorithmics ( jea ) archive , * 2 * , article 5 , 1997 .",
    "aleksander madry , faster approximation schemes for fractional multicommodity flow problems via dynamic graph algorithms , annual acm symposium on theory of computing archive , * 2 * , session 2a , 121 - 130 , 2010 .",
    "waldspurger ca , hogg t , huberman ba , et al .",
    ", spawn - a distributed computational economy , ieee transactions on software engineering , * 18 * , no . 2 , 103 - 117 , feb 1992 .",
    "baruah sk , cohen nk , plaxton cg , varvel da , proportionate progress- a notion of fairness in resource allocation , algorithmica , * 15 * , 6 , 600 - 625 , jun 1996 .",
    "azar y , broder az , karlin ar , upfal e , balanced allocations , siam journal of computing , * 29*,1 , 180 - 200 , sep 1999 . s. ben - david , a. borodin , r. karp , g. tardos , a. wigderson , on the power of randomization in on - line algorithms , algorithmica , vol .",
    "* 11 * , no .",
    "1 , pp . 2 - 14 , 1994 .",
    "bar - noy a , bellare m , halldorsson mm , shachnai h , tamir t , on chromatic sums and distributed resource allocation , information and computation * 140 * , 2 , 183 - 202 , feb 1 1998 .",
    "kuchcinski k , constraints - driven scheduling and resource assignment acm transactions on design automation of electronic systems , * 8 * , 3 , 355 - 383 , jul 2003 .",
    "aydin me , fogarty tc , a distributed evolutionary simulated annealing algorithm for combinatorial optimization problems journal of heuristics , * 10 * , 3 , 269 - 292 , may 2004 .",
    "buyya r , yeo cs , venugopal s , broberg j , brandic i , cloud computing and emerging it platforms : vision , hype , and reality for delivering computing as the 5th utility , future generation computer systems - the international journal of grid computing - theory methods and applications , * 25 * , 6 , 599 - 616 , jun 2009 .",
    "berman p , charikar m , karpinski m , on - line load balancing for related machines , journal of algorithms , * 35 * , 1 , 108 - 121 , apr 2000 .",
    "phillips s , westbrook j , on - line load balancing and network flow algorithmica , * 21 * , 3 , 245 - 261 , jul 1998 .",
    "tomislav rudec , alfonzo baumgartner , robert manger , a fast implementation of the optimal off - line algorithm for solving the k - server problem , math .",
    "* 14 * , no .",
    "119 - 134 ( 2009 ) .",
    "irene fink , sven o. krumke , stephan westphal , new lower bounds for online k - server routing problems , information processing letters * 109 * ( 2009 ) 563567 .",
    "mark s. manasse , lyle a. mcgeoch , daniel d. sleator , competitive algorithms for server problems , journal of algorithms , * 11 * , issue 2 ( june 1990 ) , 208 - 230 .",
    "steven s. seiden , a general decomposition theorem for the k - server problem , information and computation * 174 * , 193202 ( 2002 ) .",
    "vincenzo bonifaci , leen stougie , online k - server routing problems , theory comput syst ( 2009 ) * 45 * , 470485 .",
    "yair bartal , manor mendel , randomized k - server algorithms for growth - rate bounded graphs , journal of algorithms * 55 * ( 2005 ) 192202 .",
    "bar - noy a , freund a , naor js , on - line load balancing in a hierarchical server topology , siam journal on computing , * 31 * , 2 , 527 - 549 , oct 2001 .",
    "http://www.vmware.com/files/pdf/vmware-dynamicstorageprov-wp-en.pdf[dynamic storage provisioning ] , vmware , nov 18 , 2009 .",
    "http://www.vmware.com/files/pdf/scalable_storage_performance.pdf[scalable storage performance ] , vmware , jun 5 , 2008 .",
    "lpsolve , open source ( mixed - integer ) linear programming system , multi - platform , pure ansi c / posix source code , lex / yacc based parsing , version 5.1.0.0 dated 1 may 2004 , michel berkelaar , kjell eikland , peter notebaert , gnu lgpl ( lesser general public licence ) ."
  ],
  "abstract_text": [
    "<S> this paper analyzes different online algorithms for the problem of assigning weights to edges in a fully - connected bipartite graph that minimizes the overall cost while satisfying constraints . </S>",
    "<S> edges in this graph may disappear and reappear over time . </S>",
    "<S> performance of these algorithms is measured using simulations . </S>",
    "<S> this paper also attempts to derandomize the randomized online algorithm for this problem .    </S>",
    "<S> = 100000 </S>"
  ]
}