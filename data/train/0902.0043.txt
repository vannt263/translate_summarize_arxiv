{
  "article_text": [
    "one of the key questions of automated reasoning is the following : `` when does a set @xmath0 of sentences have a model ? '' in fact , given reasonable assumptions about calculi , most inference problems can be reduced to determining ( un)-satisfiability of a set @xmath0 of sentences . since building models for @xmath0 is hard in practice , much research in computational logic",
    "has concentrated on finding sufficient conditions for satisfiability , e.g. whether there is a hintikka set @xmath1 extending @xmath0 .    of course in general the answer to",
    "the satisfiability question depends on the class of models at hand . in classical first - order logic ,",
    "model classes are well - understood . in impredicative higher - order logic",
    ", there is a whole landscape of plausible model classes differing in their treatment of functional and boolean extensionality .",
    "satisfiability then strongly depends on these classes , for instance , the set @xmath2 is unsatisfiable in a model class where the universes of booleans are required to have at most two members ( see property @xmath3 below ) , but satisfiable in the class without this restriction .    in",
    "we have shown that certain ( i.e. _ saturated _ ) hintikka sets always have models and have derived syntactical conditions ( so - called _ saturated _ abstract consistency properties ) for satisfiability from this fact .",
    "the importance of abstract consistency properties is that one can check completeness for a calculus @xmath4 by verifying proof - theoretic conditions ( checking that @xmath4-irrefutable sets of formulae have the saturated abstract consistency property ) instead of performing model - theoretic analysis ( for historical background of the abstract consistency method in first - order logic , cf .",
    "unfortunately , the saturation condition ( if @xmath0 is abstractly consistent , then for all sentences @xmath5 one of @xmath6 or @xmath7 is as well ) is very difficult to prove for machine - oriented calculi ( indeed as hard as cut elimination as we will show ) .    in this paper",
    "we investigate further the relation between the lack of the subformula property in the saturation condition ( we need to `` guess '' whether to extend @xmath0 by @xmath5 or @xmath8 on our way to a hintikka set ) and the cut rule ( where we have to `` guess , '' i.e. `` search for '' in an automated reasoning setting the cut formula @xmath5 ) .",
    "an important result is the insight that there exist `` cut - strong '' formulae which support the effective simulation of cut in calculi for impredicative logics .",
    "prominent examples of cut - strong formulae are leibniz equations and the axioms for comprehension , extensionality , induction , description and choice .",
    "the naive addition of any of these cut - strong formulae to any calculus for an impredicative logic is a strong threat for effective automated proof search , since these formulae in a way introduce the cut rule through the backdoor ( even if the original calculus is cut - free and thus appears appropriate for proof automation at first sight ) . cut - strong formulae thus introduce additional sources for breaking the subformula property and therefore they should either be avoided completely or treated with great care in calculi designed for automated proof search .",
    "consider the following formula of higher - order logic representing boolean extensionality : @xmath9 for a theorem prover to make use of this formula , it must instantiate @xmath10 and @xmath11 with terms of type @xmath12 . in other words ,",
    "the theorem prover must synthesize two arbitrary formulas . requiring a theorem prover to synthesize these formulas",
    "is just as hard ( and unrealistic ) as requiring a theorem prover to synthesize cut formulas .",
    "an alternative to including the formula for boolean extensionality is to include a rule in the search procedure which allows the theorem prover to reduce proving @xmath13 to the subgoal of proving @xmath14 .",
    "using this rule does not require the prover to synthesize any terms .",
    "simply adding such a rule is not enough to obtain a complete calculus .",
    "we will explore what additional rules are required to obtain completeness and argue that these rules are appropriate for mechanized proof search . in section",
    "[ sec : hol ] , we will fix notation and review the relevant results from .",
    "we define in section  [ sec : seq - calc ] a basic sequent calculus and study the correspondence between saturation in abstract consistency classes and cut - elimination . in section  [ sec : cut - simulation ] we introduce the notion of `` cut - strong '' formulae and sequents and show that they support the effective simulation of cut . in section  [ sec",
    ": prominent - cut - strong ] we demonstrate that the pertinent extensionality axioms are cut - strong .",
    "we develop alternative extensionality rules which do not suffer from this problem .",
    "further rules are needed to ensure henkin completeness for this calculus with extensionality .",
    "these new rules correspond to the acceptability conditions we propose in section  [ sec : acceptability ] to ensure the existence of models and the existence of saturated extensions of abstract consistency classes .",
    "in we have re - examined the semantics of classical higher - order logic with the purpose of clarifying the role of extensionality . for this",
    "we have defined eight classes of higher - order models with respect to various combinations of boolean extensionality and three forms of functional extensionality .",
    "we have also developed a methodology of abstract consistency ( by providing the necessary model existence theorems ) needed for instance , to analyze completeness of higher - order calculi with respect to these model classes .",
    "we now briefly summarize the main notions and results of as required for this paper .",
    "our impredicative logic of choice is church s classical type theory .      as in  @xcite , we formulate higher - order logic ( @xmath16 ) based on the simply typed @xmath15-calculus .",
    "the set of simple types @xmath17 is freely generated from basic types @xmath12 and @xmath18 using the function type constructor @xmath19 .    for formulae we start with a set @xmath20 of ( typed ) variables ( denoted by @xmath21 @xmath22 ) and a signature @xmath23 of ( typed ) constants ( denoted by @xmath24 ) .",
    "we let @xmath25 ( @xmath26 ) denote the set of variables ( constants ) of type @xmath27 .",
    "the signature @xmath23 of constants includes the logical constants @xmath28 , @xmath29 and @xmath30 for each type @xmath27 ; all other constants in @xmath23 are called parameters . as in , we assume there is an infinite cardinal @xmath31 such that the cardinality of @xmath26 is @xmath31 for each type @xmath27 ( cf .  ) .",
    "the set of @xmath16-formulae ( or terms ) are constructed from typed variables and constants using application and @xmath15-abstraction .",
    "we let @xmath32 be the set of all terms of type @xmath27 and @xmath33 be the set of all terms .",
    "we use vector notation to abbreviate @xmath34-fold applications and abstractions as @xmath35 and @xmath36 , respectively .",
    "we also use church s dot notation so that @xmath37 stands for a ( missing ) left bracket whose mate is as far to the right as possible ( consistent with given brackets ) .",
    "we use infix notation @xmath38 for @xmath39 and binder notation @xmath40 for @xmath41 .",
    "we further use @xmath42 , @xmath43 , @xmath44 and @xmath45 as shorthand for formulae defined in terms of @xmath46 , @xmath47 and @xmath48 ( cf .  ) .",
    "finally , we let @xmath49 denote the leibniz equation @xmath50 .",
    "each occurrence of a variable in a term is either bound by a @xmath15 or free",
    ". we use @xmath51 to denote the set of free variables of @xmath5 ( i.e. , variables with a free occurrence in @xmath5 ) .",
    "we consider two terms to be equal if the terms are the same up to the names of bound variables ( i.e. , we consider @xmath52-conversion implicitly ) . a term @xmath5 is closed if @xmath51 is empty .",
    "we let @xmath53 denote the set of closed terms of type @xmath27 and @xmath54 denote the set of all closed terms .",
    "each term @xmath55 is called a proposition and each term @xmath56 is called a sentence .",
    "we denote substitution of a term @xmath57 for a variable @xmath58 in a term @xmath59 by @xmath60\\bb$ ] . since we consider @xmath52-conversion implicitly , we assume the bound variables of @xmath61 avoid variable capture .",
    "two common relations on terms are given by @xmath62-reduction and @xmath63-reduction .",
    "a @xmath62-redex @xmath64 @xmath62-reduces to @xmath65\\ba$ ] . an @xmath63-redex @xmath66 ( where @xmath67 ) @xmath63-reduces to @xmath68 . for @xmath69 , we write @xmath70 to mean @xmath5 can be converted to @xmath61 by a series of @xmath62-reductions and expansions .",
    "similarly , @xmath71 means @xmath5 can be converted to @xmath61 using both @xmath62 and @xmath63 . for each @xmath72",
    "there is a unique @xmath62-normal form ( denoted @xmath73 ) and a unique @xmath74-normal form ( denoted @xmath75 ) .",
    "from this fact we know @xmath70 ( @xmath71 ) iff @xmath76 ( @xmath77 ) .",
    "a non - atomic formula in @xmath78 is any formula whose @xmath62-normal form is of the form @xmath79 $ ] where @xmath80 is a logical constant .",
    "an atomic formula is any other formula in @xmath78 .      a model of @xmath16",
    "is given by four objects : a typed collection of nonempty sets @xmath81 , an application operator @xmath82 , an evaluation function @xmath83 for terms and a valuation function @xmath84 .",
    "a pair @xmath85 is called a @xmath23-applicative structure ( cf .  ) . if @xmath83 is an evaluation function for @xmath85 ( cf .  )",
    ", then we call the triple @xmath86 a @xmath23-evaluation . if @xmath87 satisfies appropriate properties",
    ", then we call the tuple @xmath88 a @xmath23-model ( cf .  ) .    given an applicative structure @xmath85 ,",
    "an assignment @xmath89 is a ( typed ) function from @xmath20 to @xmath90 .",
    "an evaluation function @xmath83 maps an assignment @xmath89 and a term @xmath91 to an element @xmath92 .",
    "evaluations @xmath83 are required to satisfy four properties ( cf .  ):    1 .",
    "2 .   @xmath94 for any @xmath95 , @xmath96 and types @xmath27 and @xmath97 .",
    "@xmath98 for any type @xmath27 and @xmath96 , whenever @xmath89 and @xmath99 coincide on @xmath51 .",
    "@xmath100 for all @xmath96 .",
    "if @xmath5 is closed , then we can simply write @xmath101 since the value @xmath102 can not depend on @xmath89 .",
    "given an evaluation @xmath86 , we define several properties a function @xmath84 may satisfy ( cf .  ) .    [ cols=\"^,<,<,^,<,<\",options=\"header \" , ]     a valuation @xmath84 is required to satisfy @xmath103 , @xmath104 and @xmath105 for every type @xmath27 .    given a model @xmath106 , an assignment @xmath89 and a proposition @xmath5 ( or set of propositions @xmath0 ) ,",
    "we say @xmath107 satisfies @xmath5 ( or @xmath0 ) and write @xmath108 ( or @xmath109 ) if @xmath110 ( or @xmath110 for each @xmath111 ) .",
    "if @xmath5 is closed ( or every member of @xmath0 is closed ) , then we simply write @xmath112 ( or @xmath113 ) and say @xmath107 is a model of @xmath5 ( or @xmath0 ) .    in order to define model classes @xmath114",
    "which correspond to different notions of extensionality , we define five properties of models ( cf .  ) .",
    "let @xmath106 be a model .",
    "we define :    @xmath115 : :    iff for all @xmath116 there is a    @xmath117 with    @xmath118 .",
    "@xmath119 : :    iff @xmath86 is @xmath63-functional    ( i.e. , for each @xmath120 and assignment    @xmath89 ,    @xmath121 ) .",
    "@xmath122 : :    iff @xmath86 is @xmath123-functional    ( i.e. , for each @xmath124 ,    @xmath125 and assignment @xmath89 ,    @xmath126    whenever    @xmath127}(\\bm)\\metaeq\\ce_{\\phi,[\\sema / x]}(\\bn)$ ]    for every @xmath128 ) .",
    "@xmath129 : :    iff @xmath85 is functional ( i.e. , for each    @xmath130 ,    @xmath131 whenever    @xmath132 for every    @xmath128 ) .",
    "@xmath3 : :    iff @xmath133 has at most two elements .    for each @xmath134 ( the latter set will be abbreviated by @xmath135 in the remainder ) we define @xmath114 to be the class of all @xmath23-models @xmath107 such that @xmath107 satisfies property @xmath115 and each of the additional properties @xmath136 indicated in the subscript @xmath137 ( cf .  ) .",
    "we always include @xmath62 in the subscript to indicate that @xmath62-equal terms are always interpreted as identical elements",
    ". we do not include property @xmath115 as an explicit subscript ; @xmath115 is treated as a basic , implicit requirement for all model classes .",
    "see for a discussion on why we require property @xmath115 .",
    "since we are varying four properties , one would expect to obtain 16 model classes .",
    "however , we showed in   that @xmath129 is equivalent to the conjunction of @xmath122 and @xmath119 .",
    "hence we obtain the eight model classes depicted as a cube in figure  [ landscape ] .",
    "there are example models constructed in   to demonstrate that each of the eight model classes is distinct .",
    "for instance , example 5.6 of   describes how to construct a model without @xmath119 by attaching labels to functions .",
    "( -2,1.5)(6,8.5 ) ( 2,2 ) ( 5,4 ) ( 2,4 ) ( -1,4 ) ( -1.8,4 ) ( -1,6 ) ( -1.8,6 ) ( 2,6 ) ( 2.7,6 ) ( 5,6 ) ( 5.8,6 ) ( 2,8 ) ( 5,8 )    special cases of @xmath23-models are henkin models and standard models ( cf .  ) .",
    "a henkin model is a model in @xmath138 such that the applicative structure @xmath85 is a frame , i.e. @xmath139 is a subset of the function space @xmath140 for each @xmath141 and @xmath142 is function application .",
    "a standard model is a henkin model in which @xmath139 is the full function space @xmath140 .",
    "every model in @xmath138 is isomorphic to a henkin model ( see the discussion following ) .      finally , we review the model existence theorems proved in",
    ". there are three stages to obtaining a model in our framework .",
    "first , we obtain an abstract consistency class @xmath143 ( usually defined as the class of irrefutable sets of sentences with respect to some calculus ) .",
    "second , given a ( sufficiently pure ) set of sentences @xmath0 in the abstract consistency class @xmath143 we construct a hintikka set @xmath1 extending @xmath0 .",
    "third , we construct a model of this hintikka set ( and hence a model of @xmath0 ) .",
    "a @xmath23-abstract consistency class @xmath143 is a class of sets of @xmath23-sentences .",
    "an abstract consistency class is always required to be closed under subsets ( cf .  ) .",
    "sometimes we require the stronger property that @xmath143 is compact , i.e. a set @xmath0 is in @xmath143 iff every finite subset of @xmath0 is in @xmath143 ( cf . ) .    to describe further properties of abstract consistency classes",
    ", we use the notation @xmath144 for @xmath145 as in  .",
    "the following is a list of properties a class @xmath143 of sets of sentences can satisfy with respect to arbitrary @xmath146 ( cf .  ):",
    "if @xmath5 is atomic , then @xmath147 or @xmath148 . if @xmath149 , then @xmath150 . if @xmath70 and @xmath111 , then @xmath151 . if @xmath71 and @xmath111 , then @xmath151 . if @xmath152 , then @xmath150 or @xmath151 . if @xmath153 , then @xmath154 . if @xmath155 , then @xmath156 for each @xmath157 .",
    "if @xmath158 , then @xmath159 for any parameter @xmath160 which does not occur in any sentence of @xmath0 .",
    "[ def : acc - b : b ] if @xmath161 , then @xmath162 or @xmath163 .",
    "[ def : acc - q : xi ] if @xmath164 , then @xmath165\\bm\\leibeq^\\typeb[w / x]\\bn)\\in\\acc$ ] for any parameter @xmath160 which does not occur in any sentence of @xmath0 .",
    "[ def : acc - q : q ] if @xmath166 , then @xmath167 for any parameter @xmath160 which does not occur in any sentence of @xmath0 .",
    "either @xmath168 or @xmath169 .",
    "we say @xmath143 is an abstract consistency class if it is closed under subsets and satisfies @xmath170 , @xmath171 , @xmath172 , @xmath173 , @xmath174 , @xmath175 and @xmath176 .",
    "we let @xmath177 denote the collection of all abstract consistency classes . for each @xmath178",
    "we refine @xmath177 to a collection @xmath179 where the additional properties @xmath180 indicated by @xmath137 are required ( cf .  ) .",
    "we say an abstract consistency class @xmath143 is saturated if @xmath181 holds . using @xmath170 ( atomic consistency ) and the fact that there are infinitely many parameters at each type",
    ", we can show every abstract consistency class satisfies non - atomic consistency .",
    "that is , for every abstract consistency class @xmath143 , @xmath56 and @xmath146 , we have either @xmath147 or @xmath148 ( cf .  ) .    in",
    "we show that sufficiently @xmath23-pure sets in saturated abstract consistency classes extend to saturated hintikka sets .",
    "( a set of sentences @xmath0 is sufficiently @xmath23-pure if for each type @xmath27 there is a set @xmath182 of parameters of type @xmath27 with cardinality @xmath31 and such that no parameter in @xmath183 occurs in a sentence in @xmath0 .",
    "a hintikka set is a maximal element in an abstract consistency class . )    in the model existence theorem for saturated sets we show that these saturated hintikka sets can be used to construct models @xmath107 which are members of the corresponding model classes @xmath184",
    ". then we conclude ( cf .  ):",
    "+ * model existence theorem for saturated abstract consistency classes * : _ for all @xmath178 , if @xmath143 is a saturated abstract consistency class in @xmath185 and @xmath146 is a sufficiently @xmath23-pure set of sentences , then there exists a model @xmath186 that satisfies @xmath0 .",
    "furthermore , each domain of @xmath107 has cardinality at most @xmath31 . _",
    "+ in  we apply the abstract consistency method to analyze completeness for different natural deduction calculi .",
    "unfortunately , the saturation condition is very difficult to prove for machine - oriented calculi ( indeed as we will see in section  [ sec : seq - calc ] it is equivalent to cut elimination ) , so theorem   can not be easily used for this purpose directly .    in section",
    "[ sec : acceptability ] we therefore motivate and present a set of extra conditions for @xmath187 we call conditions .",
    "the new conditions are sufficient to prove model existence .",
    "we will now study cut - elimination and cut - simulation with respect to ( one - sided ) sequent calculi .",
    "we consider a sequent to be a finite set @xmath189 of @xmath62-normal sentences from @xmath190 . a sequent calculus @xmath188 provides an inductive definition for when @xmath191 holds .",
    "we say a sequent calculus rule    @xmath192    is in @xmath188 if @xmath191 holds whenever @xmath193 for all @xmath194 . for any natural number @xmath195 , we call an admissible rule @xmath196 if any instance of @xmath196 can be replaced by a derivation with at most @xmath34 additional proof steps .",
    "given a sequent @xmath189 , a model @xmath107 , and a class @xmath197 of models , we say @xmath189 is _",
    "valid for @xmath107 _ ( or _ valid for @xmath197 _ ) , if @xmath198 for some @xmath199 ( or @xmath189 is valid for every @xmath200 ) . as for sets in abstract consistency classes",
    ", we use the notation @xmath201 to denote the set @xmath202 ( which is simply @xmath189 if @xmath203 ) .",
    "figure  [ seqcalc ] introduces several sequent calculus rules .",
    "some of these rules will be used to define sequent calculi , while others will be shown admissible ( or even @xmath34-admissible ) .",
    "+   +   +   +    there are many kinds of sequent calculi given in the literature .",
    "we could have chosen to work with two sided sequents .",
    "this choice would have allowed us to generalize many of our results to the intuitionistic case .",
    "the notion of cut - strong formulae could still be defined and many of our examples of cut - strong formulae would also be cut - strong in the intuitionistic case . on the other hand , assuming we only treat the classical case , we could restrict to negation normal forms in the same way that we restrict to @xmath62-normal forms .",
    "this would eliminate the need to consider the rules @xmath204 and @xmath205 .",
    "both of these alternatives are reasonable .",
    "the choices we have made are for ease of presentation and to make the connection with   as simple as possible .      for any sequent calculus",
    "@xmath188 we can define a class @xmath206 of sets of sentences . under certain assumptions",
    ", @xmath206 is an abstract consistency class .",
    "first we adopt the notation @xmath207 and @xmath208 for the sets @xmath209 and @xmath210 , resp .",
    ", where @xmath211 .",
    "furthermore , we assume this use of @xmath46 binds more strongly than @xmath212 or @xmath137 , so that @xmath213 means @xmath214 and @xmath215 means @xmath216 .",
    "[ def : accseq ] let @xmath188 be a sequent calculus .",
    "we define @xmath206 to be the class of all finite @xmath217 such that @xmath218 does not hold .    in a straightforward manner",
    ", one can prove the following results ( see the appendix ) .",
    "[ lem : accseq - notin ] let @xmath188 be a sequent calculus such that @xmath205 is admissible . for any finite sets @xmath0 and @xmath189 of sentences , if @xmath219 , then @xmath220 holds .",
    "[ thm : accseq - acc ] let @xmath188 be a sequent calculus . if the rules @xmath205 , @xmath204 , @xmath221 , @xmath222 , @xmath223 , @xmath224 , @xmath225 and @xmath226 are admissible in @xmath188 , then @xmath227 .",
    "we can furthermore show the following relationship between saturation and cut ( see the appendix ) .",
    "[ lem : cut - implies - set ] let @xmath188 be a sequent calculus .    1 .",
    "if @xmath228 is admissible in @xmath188 , then @xmath206 is saturated .",
    "if @xmath204 and @xmath205 are admissible in @xmath188 and @xmath206 is saturated , then @xmath228 is admissible in @xmath188 .",
    "since saturation is equivalent to admissibility of cut , we need weaker conditions than saturation .",
    "a natural condition to consider is the existence of saturated extensions .",
    "let @xmath178 and @xmath229 be abstract consistency classes .",
    "we say @xmath230 is an of @xmath143 if @xmath231 for every sufficiently @xmath23-pure @xmath146 .",
    "we say @xmath230 is a of @xmath143 if @xmath230 is saturated and an extension of @xmath143 .",
    "there exist abstract consistency classes @xmath232 in @xmath187 which have no saturated extension .    [",
    "ex : nosatb ] let @xmath233 and @xmath234 .",
    "we construct an abstract consistency class @xmath143 from @xmath0 by first building the closure @xmath235 of @xmath0 under relation @xmath236 and then taking the power set of @xmath235 .",
    "it is easy to check that this @xmath143 is in @xmath187 .",
    "suppose we have a saturated extension @xmath230 of @xmath143 in @xmath187 .",
    "then @xmath231 since @xmath0 is finite hence sufficiently @xmath23-pure .",
    "by saturation , @xmath237 or @xmath238 . in the first case",
    ", applying @xmath175 with the constant @xmath239 , @xmath173 and @xmath170 contradicts @xmath240 . in the second case ,",
    "@xmath241 and @xmath170 contradict @xmath242 .",
    "existence of any saturated extension of a sound sequent calculus @xmath188 implies admissibility of cut .",
    "the proof uses the model existence theorem for saturated abstract consistency classes ( cf .  ) .",
    "the proof is in the appendix .",
    "[ thm : satext - implies - cut ] let @xmath188 be a sequent calculus which is sound for @xmath114 . if @xmath206 has a saturated extension @xmath243 , then @xmath228 is admissible in @xmath188 .",
    "we now study a particular sequent calculus @xmath244 defined by the rules @xmath222 , @xmath204 , @xmath223 , @xmath224 , @xmath225 and @xmath226 ( cf .",
    "figure  [ seqcalc ] ) .",
    "it is easy to show that @xmath244 is sound for the eight model classes and in particular for class @xmath245 .",
    "the reader may easily prove the following lemma .",
    "[ lemma - length ]",
    "let @xmath246 be an atom , @xmath247 , and @xmath189 be a sequent .    1 .   [ lemma - length - a ] @xmath248 is derivable in @xmath249 steps in @xmath244 .",
    "2 .   [ lemma - length - b ] @xmath250 is derivable in @xmath251 steps in @xmath244 .",
    "the proof of the next lemma is by induction on derivations and is given in the appendix .",
    "[ lem : admissible - rules ] the rules @xmath205 and @xmath221 are @xmath252-admissible in @xmath244 .",
    "[ thm : complete - beta ] the sequent calculus @xmath244 is complete for the model class @xmath245 and the rule @xmath228 is admissible .",
    "by theorem  [ thm : accseq - acc ] and lemma  [ lem : admissible - rules ] , @xmath253 .",
    "suppose @xmath254 does not hold .",
    "then @xmath255 by lemma  [ lem : accseq - notin ] . by the model existence theorem for @xmath177 ( cf",
    ". ) there exists a model for @xmath256 in @xmath245 .",
    "this gives completeness of @xmath244 .",
    "we can use completeness to conclude cut is admissible in @xmath244 .",
    "andrews proves admissibility of cut for a sequent calculus similar to @xmath244 in  @xcite .",
    "the proof in  @xcite contains the essential ingredients for showing completeness .    while @xmath228 is admissible in @xmath244 the next theorem shows that @xmath228 is not @xmath34-admissible in @xmath244 for any @xmath257 , which means @xmath244 is not only superficially cut - free and that by adding @xmath228 to @xmath244 we can achieve significantly shorter proofs .    [ firstclaim ] @xmath228 is not @xmath34-admissible in @xmath244 for any @xmath257 .",
    "the proof is not formally worked out here ; we only sketch the argumentation : the main idea is to show that the hyper - exponential speed - up results known for first - order logic do transfer to ( the first - order fragment of ) our calculus . for this",
    ", we compare our sequent calculus @xmath244 with a standard first - order variant of it which we call @xmath258 ( this only requires appropriate modifications of the rules @xmath225 and @xmath226 ) .",
    "clearly , any first - order sequent which can be derived in @xmath258 can be derived in @xmath244 with the same number of steps ( using essentially the same derivation ) .",
    "more interestingly , one can show that for any derivation @xmath90 in @xmath244 of a first - order sequent @xmath189 there is a derivation @xmath259 in @xmath258 of @xmath189 with the same number of rule applications .",
    "( during the induction , one collapses higher - order terms to first - order terms in such a way that first - order terms collapse to themselves . )",
    "thus no speedup with respect to first - order provability can be achieved by using @xmath244 instead of the cut - free first - order sequent calculus @xmath258 .",
    "finally we refer to the following results :    1 .",
    "theorem 5.2.13 in  @xcite shows that for a classical first - order sequent calculus there is at least an exponential speed - up of proofs with cut .",
    "furthermore , propositions 6.11.3 and 6.11.4 there show a related hyper - exponential speed - up result .",
    "an example for hyper - exponential speed - up is also given in @xcite .",
    "3 .   in higher - order logic",
    "the speed - up should be faster than any primitive recursive function according to the `` curious inference '' george boolos presents in  @xcite .",
    "we will now show that @xmath228 actually becomes @xmath34-admissible in @xmath244 if certain formulae are available in the sequent @xmath189 we wish to prove .",
    "@xmath34-cut - strong formulae can be used to effectively simulate cut .",
    "effectively means that the elimination of each application of a cut - rule introduces maximally @xmath34 additional proof steps , where @xmath34 is constant .",
    "given an arbitrary but fixed number @xmath260 .",
    "we call formula @xmath246 for @xmath188 ( or simply ) if the following cut rule variant is @xmath34-admissible in @xmath188:-)derivability ( see  @xcite ) to give a stronger but less general notion of @xmath34-cut - strongness .",
    "in fact , all axioms we discuss in this paper would remain @xmath34-cut - strong . from a proof theoretic point of view",
    "one may argue that this alternative notion leads to a more interesting result although it may generally apply to fewer axioms . ]",
    "@xmath261    we can alternative state the condition for @xmath5 to be for @xmath188 as follows : for all @xmath189 and @xmath68 , if @xmath262 in @xmath263 steps and @xmath264 in @xmath265 steps , then @xmath266 in at most @xmath267 steps .",
    "our examples below illustrate that cut - strength of a formula usually only weakly depends on the calculus @xmath188 : it only presumes standard ingredients such as @xmath62-normalization , weakening , and rules for the logical connectives .",
    "we present some simple examples of cut - strong formulae for our sequent calculus @xmath244 .",
    "a corresponding phenomenon is observable in other higher - order calculi , for instance , for the calculi presented in @xcite .",
    "[ ex1 ] the formula @xmath268 is @xmath251-cut - strong in @xmath244 .",
    "this is justified by the following derivation which actually shows that rule @xmath269 for this specific choice of @xmath5 is derivable in @xmath244 by maximally @xmath251 additional proof steps .",
    "the only interesting proof step is the instantiation of @xmath270 with formula @xmath271 in rule @xmath272 .",
    "( note that @xmath68 must be @xmath62-normal ; sequents such as @xmath273 by definition contain only @xmath62-normal formulae . )",
    "@xmath274          { \\delta*\\neg\\pi^\\typebool(\\lamdot{p_\\typebool } p ) }          { \\infer[\\seqlorl ]            { \\delta*\\neg(\\neg { \\bc}\\vee { \\bc } ) }            {              \\infer[\\seqneg]{\\delta*\\neg\\neg { \\bc}}{\\delta*{\\bc } }              &              \\delta*\\neg\\bc              } } \\ ] ] clearly , @xmath275 is not a very interesting cut - strong formula since it implies falsehood , i.e. inconsistency .",
    "[ ex2 ] the formula @xmath276 is @xmath251-cut - strong in @xmath244 .",
    "this is an example of a tautologous cut - strong formula .",
    "now @xmath270 is simply instantiated with @xmath277 in rule @xmath272 . except for this first step",
    "the derivation is identical to the one for example  [ ex1 ] .",
    "[ ex3 ] leibniz equations",
    "@xmath278 @xmath279 @xmath280 ( for arbitrary formulae @xmath281 and types @xmath282 ) are @xmath251-cut - strong in @xmath244 .",
    "this includes the special cases @xmath283 .",
    "now @xmath270 is instantiated with @xmath284 in rule @xmath272 . except for this first step",
    "the derivation is identical to the one for example  [ ex1 ] .",
    "[ ex4 ] the original formulation of higher - order logic ( cf .",
    "@xcite ) contained comprehension axioms of the form @xmath285 where @xmath286 is arbitrary with @xmath287 .",
    "church eliminated the need for such axioms by formulating higher - order logic using typed @xmath15-calculus .",
    "we will now show that the instance @xmath288 is @xmath289-cut - strong in @xmath244 ( note that @xmath221 is @xmath252-admissible ) .",
    "this motivates building - in comprehension principles instead of treating comprehension axiomatically .",
    "@xmath290    { \\delta*\\cc^i }    { \\infer[\\seqpirg{p_{\\typeind\\ar\\typebool } } ]      { \\delta*\\pi^{{\\typeind\\ar\\typebool } } ( \\lamdot{p^{\\typeind\\ar\\typebool}}\\neg\\pi^\\typeind(\\lamdot{x_\\typeind } p x\\follof x          \\leibeq^\\typeind x ) ) }      { \\infer[\\seqpilg{a_\\typeind } ]        { \\delta*\\neg\\pi^\\typeind(\\lamdot{x_\\typeind } p x\\follof x         \\leibeq^\\typeind x ) }        { \\infer[\\seqneg ]          { \\delta*\\neg\\neg ( \\neg ( p a\\implies a\\leibeq^\\typeind a)\\vee\\neg ( a           \\leibeq^\\typeind a\\implies p a ) ) }          { \\infer[\\seqlorr ]            { \\delta*\\neg ( p a\\implies a\\leibeq^\\typeind a)\\vee\\neg ( a             \\leibeq^\\typeind a\\implies p a ) }            { \\infer[\\seqlorl ]              { \\delta*\\neg ( p a\\implies a\\leibeq^\\typeind a ) * \\neg ( \\neg ( a               \\leibeq^\\typeind a)\\vee p a ) }              { \\infer[\\seqneg ]                  { \\delta*\\neg ( p a\\implies a\\leibeq^\\typeind a ) * \\neg\\neg ( a                  \\leibeq^\\typeind a ) }                  { \\infer * [ ]                    { \\delta*\\neg ( p a\\implies a\\leibeq^\\typeind a ) * a   \\leibeq^\\typeind a }                    { \\mbox{3 steps ; see lemma~\\ref{lemma - length } } } }               &                \\cd }            }          }        }         }    } \\ ] ] derivation @xmath90 is :    as we will show later , many prominent axioms for higher - order logic also belong to the class of cut - strong formulae .",
    "the cut - simulation theorem is a main result of this paper .",
    "it says that cut - strong sequents support an effective simulation ( and thus elimination ) of cut in @xmath244 .",
    "effective means that the size of cut - free derivation grows only linearly for the number of cut rule applications to be eliminated .",
    "a sequent @xmath189 is called ( or simply ) if there exists a @xmath34-cut - strong formula @xmath246 such that @xmath291 .",
    "we call @xmath5 the of @xmath189 .",
    "we first fix the following calculi : calculus @xmath292 extends @xmath244 by the rule @xmath228 and calculus @xmath293 extends @xmath244 by the rule @xmath294 for some arbitrary but fixed cut - strong formula @xmath5 .",
    "[ thm : cut - simulation - a ] let @xmath189 be a @xmath34-cut - strong sequent with realizer @xmath5 . for each derivation @xmath295 with @xmath296 proof steps there is an alternative derivation @xmath297 with @xmath296 proof steps .",
    "note that the rules @xmath228 and @xmath269 coincide whenever @xmath291 . intuitively , we can replace each occurrence of @xmath228 in @xmath90 by @xmath269 in order to obtain a @xmath259 of same size . technically , in the induction proof one must weaken to ensure @xmath8 stays in the sequent and carry out a parameter renaming to make sure the eigenvariable condition is satisfied .",
    "[ thm : cut - simulation - b ] let @xmath189 be a @xmath34-cut - strong sequent with realizer @xmath5 .",
    "for each derivation @xmath298 with @xmath296 proof steps and with @xmath263 applications of rule @xmath228 there exists an alternative derivation @xmath299 with maximally @xmath300 proof steps .",
    "@xmath5 is @xmath34-cut - strong so by definition @xmath269 is @xmath34-admissible in @xmath244 .",
    "this means that @xmath269 can be eliminated in @xmath90 and each single elimination of @xmath269 introduces maximally @xmath34 new proof steps .",
    "now the assertion can be easily obtained by a simple induction over @xmath263 .",
    "[ thm : cut - simulation - c ] let @xmath189 be a @xmath34-cut - strong sequent . for each derivation @xmath295 with @xmath296 proof steps and @xmath263 applications of rule @xmath228 there exists an alternative cut - free derivation @xmath299 with maximally @xmath300 proof steps .",
    "we have shown comprehension axioms can be cut - strong ( cf . example  [ ex4 ] ) .",
    "further prominent examples of cut - strong formulae are the boolean and functional extensionality axioms .",
    "the boolean extensionality axiom ( abbreviated as @xmath301 in the remainder ) is @xmath9 the infinitely many functional extensionality axioms ( abbreviated as @xmath302 ) are parameterized over @xmath303 .",
    "@xmath304    these axioms usually have to be added to higher - order calculi to reach henkin completeness , i.e. completeness with respect to model class @xmath138 .",
    "for example , huet s constrained resolution approach as presented in  @xcite is not henkin complete without adding extensionality axioms .",
    "the need for adding boolean extensionality to this calculus is actually illustrated by the set of unit literals @xmath234 from example  [ ex : nosatb ] .",
    "as the reader may easily check , this clause set @xmath0 , which is inconsistent for henkin semantics , can not be proven by huet s system without , e.g. , adding the boolean extensionality axiom . by relying on results in  @xcite , huet essentially shows completeness with respect to model class @xmath245 as opposed to henkin semantics .    we will now investigate whether adding the extensionality axioms to a machine - oriented calculus in order to obtain henkin completeness is a suitable option .",
    "[ thm : cut - strong - bool ] the boolean extensionality axiom @xmath301 is a @xmath305-cut - strong formula in @xmath244 .",
    "the following derivation justifies this theorem ( @xmath306 is a parameter ) .",
    "@xmath307{\\delta*\\neg\\axiomb }          {            \\infer[\\seqlorl]{\\delta*\\neg(\\neg(a\\follof a)\\vee              a\\leibeq^\\typebool a ) }                  { \\infer[\\seqneg]{\\delta*\\neg\\neg(a\\follof          a ) }                    { \\infer*[]{\\delta*a\\follof a}{\\mbox{7 steps ; see lemma~\\ref{lemma - length } } } }                  &                  \\infer*[\\mbox{3 steps ; see ex.~\\ref{ex3}}]{\\delta*\\neg(a\\leibeq^\\typebool a)}{\\deduce{}{\\delta*\\bc & \\delta*\\neg\\bc } }                    }          } \\ ] ]    [ thm : cut - strong - func ] the functional extensionality axioms @xmath302 are @xmath308-cut - strong formulae in @xmath244 .",
    "the following derivation justifies this theorem ( @xmath309 is a parameter ) .",
    "@xmath310{\\delta*\\neg\\axiomf }          {            \\infer[\\seqlorl]{\\delta*\\neg ( \\neg ( \\alldot{x\\abtypea } fx\\leibeq^\\typeb fx)\\vee          f\\leibeq^{\\typea\\ar\\typeb } f ) }                  { \\infer[\\seqneg]{\\delta*\\neg\\neg\\alldot{x\\abtypea } fx\\leibeq^\\typeb fx }                    { \\infer[\\seqpirg{a\\abtypea } ]                      { \\delta*(\\alldot{x\\abtypea } fx\\leibeq^\\typeb    fx ) }                      { \\infer * [ ]                        { \\delta*fa\\leibeq^\\typeb fa }                        { \\mbox{3 steps ; see lemma~\\ref{lemma - length } } } } }                  &                  \\infer*[\\mbox{3 steps ; see ex.~\\ref{ex3 } } ]                         { \\delta*\\neg(f\\leibeq^{\\typea\\ar\\typeb } f ) }                         { \\deduce{}{\\delta*\\bc & \\delta*\\neg\\bc } }                    }          } \\ ] ]    in  @xcite and  @xcite we have already argued that the extensionality principles should not be treated axiomatically in machine - oriented higher - order calculi and there we have developed resolution and sequent calculi in which these principles are built - in . here we have now developed a strong theoretical justification for this work : corollary  [ thm : cut - simulation - c ] along with theorems  [ thm : cut - strong - func ] and  [ thm : cut - strong - bool ] tell us that adding the extensionality principles @xmath301 and @xmath302 as axioms to a calculus is like adding a cut rule .    in figure  [ seqcalcaxiomext ]",
    "we show rules that add boolean and functional extensionality in an axiomatic manner to @xmath244 .",
    "more precisely we add rules @xmath311 and @xmath312 allowing to introduce the axioms for any sequent @xmath189 ; this way we address the problem of the infinitely many possible instantiations of the type - schematic functional extensional axiom @xmath302 .",
    "+    calculus @xmath244 enriched by the new rules @xmath311 and @xmath312 is called @xmath313",
    ". soundness of the the new rules is easy to verify : in  we show that @xmath311 and @xmath312 are valid for henkin models .      in figure  [ seqcalcext ]",
    "we define alternative extensionality rules which correspond to those developed for resolution and sequent calculi in  @xcite and  @xcite .",
    "+    calculus @xmath244 enriched by @xmath314 and @xmath315 is called @xmath316 .",
    "soundness of @xmath314 and @xmath315 for henkin semantics is again easy to show .",
    "our aim is to develop a machine - oriented sequent calculus for automating henkin complete proof search .",
    "we argue that for this purpose @xmath314 and @xmath315 are more suitable rules than @xmath311 and @xmath312 .",
    "our next step now is to show henkin completeness for @xmath313 .",
    "this will be relatively easy since we can employ cut - simulation .",
    "then we analyze whether calculus @xmath316 has the same deductive power as @xmath313 .",
    "first we extend theorem  [ thm : accseq - acc ] . the proof is given in the appendix .",
    "[ thm : accseq - acc - fb ] let @xmath188 be a sequent calculus such that @xmath205 and @xmath204 are admissible .    1 .",
    "if @xmath314 and @xmath226 are admissible , then @xmath206 satisfies @xmath317 .",
    "if @xmath315 is admissible , then @xmath206 satisfies @xmath241 .",
    "the sequent calculus @xmath313 is henkin complete and the rule @xmath228 is @xmath318-admissible .",
    "@xmath228 can be effectively simulated and hence eliminated in @xmath313 by combining rule @xmath311 with the @xmath308-step derivation presented in the proof of theorem  [ thm : cut - strong - func ] .",
    "let @xmath319 be defined as in definition  [ def : accseq ] .",
    "we prove henkin completeness of @xmath313 by showing that the class @xmath319 is a saturated abstract consistency class in @xmath187 .",
    "we here only analyze the crucial conditions @xmath241 , @xmath317 and @xmath181 .",
    "for the other conditions we refer to theorem  [ thm : accseq - acc ] . note that @xmath252-admissibility of @xmath205 and @xmath221 can be shown for @xmath313 by a suitable induction on derivations as in lemma  [ lem : admissible - rules ] .",
    "@xmath226 is a rule of @xmath313 and thus admissible . according to theorem  [ thm : accseq - acc - fb ] it is thus sufficient to ensure admissibility of rule @xmath314 to show @xmath317",
    "this is justified by the following derivation where @xmath320 and @xmath321 @xmath322 ( for @xmath62-normal @xmath323 ) . with a similar derivation using @xmath312",
    "we can show that @xmath315 is admissible .",
    "we conclude @xmath241 by theorem  [ thm : accseq - acc - fb ] .",
    "since @xmath228 is admissible we get saturation by theorem  [ lem : cut - implies - set ] .",
    "does @xmath316 have the same deductive strength as @xmath313 ?",
    "i.e. , is @xmath316 henkin complete ?",
    "we show this is not yet the case .",
    "the sequent calculus @xmath316 is not complete for henkin semantics .",
    "we illustrate the problem by a counterexample .",
    "[ ex - incomplb ] consider the sequent @xmath324 @xmath325 where @xmath326 @xmath327 are parameters .",
    "for any @xmath328 , either @xmath329 , @xmath330 or @xmath331 by property @xmath3 .",
    "hence sequent @xmath189 is valid for every @xmath332 .",
    "however , @xmath333 does not hold . by inspection",
    ", @xmath189 can not be the conclusion of any rule .    in order to reach henkin completeness and to show cut - elimination we thus need to add further rules .",
    "our example motivates the two rules presented in figure  [ seqcalcdec ] .",
    "@xmath334 introduces leibniz equations such as @xmath335 as is needed in our example and @xmath336 realizes the required decomposition into @xmath337 .",
    "@xmath338    @xmath339@xmath340    we thus extend the sequent calculus @xmath316 to @xmath341 by adding the decomposition rule @xmath336 and the rule @xmath334 which generally checks if two atomic sentences of opposite polarity are provably equal ( as opposed to syntactically equal ) .",
    "is @xmath341 complete for henkin semantics ?",
    "we will show in the next section that this indeed holds ( cf .",
    "theorem  [ theo : fb - complete ] ) .    with @xmath342 and @xmath341 we have thus developed two henkin complete calculi and both calculi are cut - free . however , as our exploration shows , `` cut - freeness '' is not a well - chosen criterion to differentiate between their suitability for proof search automation : @xmath342 inherently supports effective cut - simulation and thus cut - freeness is meaningless .",
    "the next claim , which is analogous to theorem  [ firstclaim ] , has not been formally proven yet .",
    "it claims that , in contrast to @xmath342 , the cut - freeness of @xmath341 is meaningful .",
    "[ secondclaim ] @xmath228 is not @xmath34-admissible in @xmath341 .    the proof idea is similar to that of theorem  [ firstclaim ] , however , the two additional rules @xmath334 and @xmath336 do introduce additional technicalities which we have not fully worked out yet .",
    "the criterion we propose for the analysis of calculi in impredicative logics is `` freeness of effective cut - simulation '' .",
    "the idea behind this notion is to capture also hidden sources ( such as the extensionality axioms ) where the subformula property may break and where the cut rule may creep in through the backdoor .",
    "in we developed respective complete and cut - free sequent calculi not only for henkin semantics but for five of the eight model classes .",
    "in particular , no additional rules are required for the @xmath62 , @xmath74 and @xmath343 case .",
    "meanwhile , the @xmath344 case requires additional rules allowing @xmath63-conversion .",
    "we do not present and analyze these cases here .",
    "we now turn our attention again to the existence of saturated extensions of abstract consistency classes .",
    "as illustrated by example  [ ex : nosatb ] , we need some extra abstract consistency properties to ensure the existence of saturated extensions .",
    "we call these extra properties .",
    "they actually closely correspond to additional rules @xmath334 and @xmath336 .",
    "[ def : accept - acc - conds ] let @xmath143 be an abstract consistency class in @xmath187 .",
    "we define the following properties :    if @xmath345 are atomic and @xmath346 , then @xmath347 . if @xmath348 for some types @xmath349 where @xmath350 and @xmath351 is a parameter , then there is an @xmath352 ( @xmath194 ) such that @xmath353 .",
    "we now replace the strong saturation condition used in by these acceptability conditions .",
    "an abstract consistency class @xmath354 is called in @xmath187 if it satisfies the conditions @xmath355 and @xmath356 .",
    "one can show a model existence theorem for acceptable abstract consistency classes in @xmath187 ( cf .  ) . from this model existence theorem , one can conclude @xmath341 is complete for @xmath138 ( hence for henkin models ) and that cut is admissible in @xmath341 .",
    "[ theo : fb - complete ] the sequent calculus @xmath341 is complete for henkin semantics and the rule @xmath228 is admissible .",
    "the argumentation is similar to theorem  [ thm : complete - beta ] but here we employ the acceptability conditions @xmath355 and @xmath356 .",
    "one can further show the * saturated extension theorem * ( cf .  ):",
    "there is a saturated abstract consistency class in @xmath187 that is an extension of all acceptable @xmath143 in @xmath187 .    given theorem  [ thm : satext - implies - cut ]",
    ", one can view the saturated extension theorem as an abstract cut - elimination result .",
    "the proof of a model existence theorem employs hintikka sets and in the context of studying hintikka sets we have identified a phenomenon related to cut - strength which we call the .",
    "that is , a hintikka set @xmath1 is saturated if any cut - strong formula @xmath5 ( e.g. a leibniz equation @xmath357 ) is in @xmath1 .",
    "hence we can reasonably say there is a `` gap '' between saturated and unsaturated hintikka sets .",
    "every hintikka set is either saturated or contains no cut - strong formulae .",
    "we have shown that adding cut - strong formulae to a calculus for an impredicative logic is like adding cut .",
    "for machine - oriented automated theorem proving in impredicative logics  such as classical type theory  it is therefore not recommendable to naively add cut - strong axioms to the search space . in addition to the comprehension principle and the functional and boolean extensionality axioms as elaborated in this paper the list of cut - strong axioms includes :    formulas @xmath358 are @xmath359-cut - strong in @xmath244 where @xmath360 is @xmath361 ( cf .",
    "the argument is similar to examples  [ ex1]-[ex4 ] ; here we the crucial step is to instantiate @xmath362 with @xmath363 .",
    "the _ axiom of induction _ for the naturals @xmath364 is @xmath365-cut - strong in @xmath244 .",
    "( other well - founded ordering axioms are analogous . )",
    "the crucial step in the proof is to instantiate @xmath270 with @xmath366 for some parameter @xmath306 .",
    "@xmath367 is @xmath249-cut - strong in @xmath244 .",
    "the crucial step is to instantiate @xmath362 with @xmath368 .",
    "@xmath369 , the _ description axiom _ ( see  @xcite ) , where @xmath370 stands for @xmath371 is @xmath372-cut - strong in @xmath244",
    ". the crucial step in the proof is to instantiate @xmath362 with @xmath373 for some parameter @xmath374 .    as we have shown in example  [ ex4 ] , comprehension axioms can be cut - strong . church s formulation of type theory ( cf .",
    "@xcite ) used typed @xmath15-calculus to build comprehension principles into the language .",
    "one can view church s formulation as a first step in the program to eliminate the need for cut - strong axioms . for the extensionality axioms",
    "a start has been made by the sequent calculi in this paper ( and ) , for resolution in  @xcite and for sequent calculi and extensional expansion proofs in  @xcite .",
    "the extensional systems in  @xcite also provide a complete method for using primitive equality instead of leibniz equality . for improving the automation of higher - order logic our exploration",
    "thus motivates the development of higher - order calculi which directly include reasoning principles for equality , extensionality , induction , choice , description , etc . , without using cut - strong axioms .",
    "we thank the reviewers of this paper for their useful comments and suggestions .    10    peter  b. andrews .",
    "resolution in type theory .",
    ", 36(3):414432 , 1971 .",
    "peter  b. andrews .",
    "general models and extensionality . , 37(2):395397 , 1972 .    peter  b. andrews . .",
    "kluwer academic publishers , second edition , 2002 .",
    "christoph benzmller . .",
    "phd thesis , saarland university , 1999 .",
    "christoph benzmller , chad brown , and michael kohlhase .",
    "higher - order semantics and extensionality .",
    ", 69(4):10271088 , 2004 .",
    "christoph benzmller , chad  e. brown , and michael kohlhase .",
    "semantic techniques for higher - order cut - elimination . technical report ,",
    "saarland university , saarbrcken , germany , 2004 .",
    "available at : http://www.ags.uni-sb.de/~chris/papers/r37.pdf .",
    "george boolos . a curious inference .",
    ", 16:112 , 1987 .",
    "chad  e. brown . .",
    "phd thesis , department of mathematical sciences , carnegie mellon university , 2004 .",
    "alonzo church . a formulation of the simple theory of types .",
    ", 5:5668 , 1940 .",
    "roger  j. hindley and jonathan  p. seldin . .",
    "cambridge university press , cambridge , 1986 .",
    "k.  j.  j. hintikka . form and content in quantification theory . , 8:755 , 1955 .",
    "grard  p. huet . a mechanization of type theory . in _ proceedings of the 3rd international joint conference on artificial intelligence",
    "_ , pages 139146 , 1973",
    ".    v.  p. orevkov .",
    "lower bounds for lengthening of proofs after cut - elimination .",
    ", 88:137162 , 1979 .",
    "english translation in :  @xcite .",
    "v.  p. orevkov .",
    "lower bounds for lengthening of proofs after cut - elimination . , 20:23372350 , 1982 .",
    "bertrand russell .",
    "mathematical logic as based on the theory of types .",
    ", 30:222262 , 1908 .",
    "raymond  m. smullyan .",
    "a unifying principle for quantification theory .",
    "49:828832 , 1963 .    raymond  m. smullyan . .",
    "springer , 1968 .",
    "r  statman .",
    "bounds for proof - search and speed - up in the predicate calculus . , 15:225287 , 1978 .",
    "a.  s. troelstra and h.  schwichtenberg . .",
    "cambridge university press , 2 edition , 2000 .",
    "[ [ proof - of - lemmalemaccseq - notin ] ] * proof of lemma  [ lem : accseq - notin ] * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +            suppose @xmath378 and @xmath383 where @xmath5 is atomic . by admissibility of @xmath222 , @xmath384 since @xmath385 . by admissibility of @xmath204 , @xmath218 since @xmath386 , contradicting @xmath378",
    ". thus @xmath170 holds .",
    "suppose @xmath378 , @xmath149 and @xmath387 .",
    "hence @xmath388 and so @xmath389 by admissibility of @xmath204 . since @xmath149 , we know @xmath390 is equal to @xmath391",
    ". hence @xmath392 , contradicting @xmath378 .",
    "thus @xmath171 holds .",
    "suppose @xmath378 , @xmath153 and @xmath398 . by lemma  [ lem : accseq - notin ] , @xmath399 .",
    "applying @xmath224 , we have @xmath400 . applying @xmath204 , we have @xmath392 since @xmath153 , contradicting @xmath378 .",
    "thus @xmath174 holds .",
    "suppose @xmath206 is saturated , @xmath406 and @xmath407 hold but @xmath191 does not .",
    "applying @xmath204 to every member of @xmath189 and to @xmath68 we have @xmath408 and @xmath409 . by lemma  [ lem : accseq - notin ] , we know @xmath410 . by saturation , we must have @xmath411 or @xmath412 .",
    "the first case contradicts @xmath409 while the second case contradicts @xmath408 .",
    "suppose @xmath243 is a saturated extension of @xmath206 .",
    "assume @xmath406 and @xmath407 hold and @xmath191 does not .",
    "by lemma  [ lem : accseq - notin ] , we know @xmath410 . since @xmath256 is finite ( hence sufficiently @xmath23-pure ) , @xmath413 . by the model existence theorem for saturated abstract consistency classes ( cf .",
    "theorem  ) , there is a model @xmath414 such that @xmath415 . by soundness of @xmath206 , we know both @xmath273 and @xmath416 must be valid in @xmath107 . since @xmath415 , we must have @xmath417 and @xmath418 , a contradiction .",
    "we can argue @xmath252-admissibility of @xmath205 and @xmath221 by induction on derivations .",
    "we use the notation @xmath419 to indicate there is a derivation with size at most @xmath263 of @xmath189 .",
    "for negation inversion , we need to show @xmath420 whenever @xmath421 .",
    "first assume @xmath422 is a principal formula of the last rule applied .",
    "this is only possible if the last rule is @xmath204 .",
    "examining @xmath204 , we have either @xmath423 or @xmath424 . in the first case ,",
    "we are done .",
    "otherwise , we apply the induction hypothesis to @xmath424 and obtain @xmath423 as desired .",
    "next assume @xmath422 is not a principal formula of the last rule . in this case , the application of rule @xmath196 concludes @xmath425 from @xmath426 ( with @xmath427 ) where @xmath428 contains the principal formulae of the rule application ( a singleton unless the rule is @xmath222 ) and @xmath429 . applying the inductive hypothesis",
    ", we have @xmath430 for @xmath427 .",
    "applying rule @xmath196 we have @xmath431 .",
    "( for the case where @xmath196 is @xmath226 we use the fact that the same parameters occur in @xmath5 and @xmath422 . )",
    "to prove @xmath252-admissibility of weakening , we generalize the statement to include a parameter renaming ( to handle the @xmath226 rule ) .",
    "a parameter renaming @xmath432 is a well - typed map from parameters to parameters extended to operate on arbitrary terms .",
    "note that if @xmath5 is @xmath62-normal , then @xmath433 is also @xmath62-normal .",
    "also , if @xmath5 is atomic , then @xmath433 is atomic .",
    "we prove for any @xmath263 , @xmath189 , @xmath434 and parameter renaming @xmath432 , if @xmath419 and @xmath435 for every @xmath203 , then @xmath436 . applying this with the identity parameter renaming @xmath432",
    ", we have @xmath252-admissibility of @xmath221 .",
    "suppose @xmath419 and @xmath435 for every @xmath203 .",
    "first , assume the last rule application is @xmath226 with principal formula @xmath437 .",
    "in this case we know @xmath438 where @xmath439 is @xmath189 and @xmath80 does not occur in any sentence in @xmath189 .",
    "choose a parameter @xmath440 such that @xmath296 does not occur in any sentence in @xmath434 .",
    "let @xmath441 be the parameter renaming given by @xmath442 and @xmath443 for parameters @xmath444 other than @xmath80 .",
    "let @xmath445 be @xmath446 .",
    "for each @xmath447 , we know @xmath448 ( since @xmath80 does not occur in any sentence in @xmath189 ) . also , since @xmath80 does not occur in @xmath449 , @xmath450 .",
    "hence we can apply the induction hypothesis with @xmath451 , @xmath452 , @xmath445 and @xmath441 to conclude @xmath453 . since @xmath296 does not occur in @xmath434 and @xmath454",
    ", we can apply @xmath455 to conclude @xmath456 .",
    "next , assume the last rule applied is @xmath225 .",
    "hence @xmath457 where @xmath458 is @xmath189 .",
    "we apply the induction hypothesis with @xmath451 , @xmath459 , @xmath460 and @xmath432 to conclude @xmath461 . applying the rule @xmath462",
    ", we obtain @xmath463 as desired .",
    "( note that @xmath464 . )    finally , assume the last rule application is not @xmath226 and not @xmath225 .",
    "let @xmath196 be the last rule applied .",
    "the rule @xmath196 concludes @xmath465 from @xmath466 where @xmath467 , @xmath427 and @xmath429 . for each @xmath352",
    ", we can apply the induction hypothesis with @xmath468 , @xmath469 , @xmath470 and @xmath432 to conclude @xmath471 . applying the same rule @xmath196",
    "we conclude @xmath456 .",
    "assume the rule @xmath315 is admissible .",
    "suppose @xmath378 , @xmath161 , @xmath475 and @xmath476 .",
    "by lemma  [ lem : accseq - notin ] , @xmath477 and @xmath478 . applying @xmath315 , @xmath479 . applying @xmath204 , @xmath218 since @xmath161 , contradicting @xmath378 .",
    "thus @xmath241 holds ."
  ],
  "abstract_text": [
    "<S> we investigate cut - elimination and cut - simulation in impredicative ( higher - order ) logics . </S>",
    "<S> we illustrate that adding simple axioms such as leibniz equations to a calculus for an impredicative logic  in our case a sequent calculus for classical type theory  is like adding cut . </S>",
    "<S> the phenomenon equally applies to prominent axioms like boolean- and functional extensionality , induction , choice , and description . </S>",
    "<S> this calls for the development of calculi where these principles are built - in instead of being treated axiomatically . </S>"
  ]
}