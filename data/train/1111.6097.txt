{
  "article_text": [
    "jets are the collimated sprays of hadrons that result from the fragmentation of a high - energy quark or gluon .",
    "they tend to be visually obvious structures when one looks at an experimental event display , and by measuring their energy and direction one can approach the idea of the original `` parton '' that produced them .",
    "consequently jets are both an intuitive and quantitatively essential part of collider experiments , used in a vast array of analyses , from new physics searches to studies of quantum chromodynamics ( qcd ) . for any tool",
    "to be so widely used , its behaviour must be well defined and reproducible : it is not sufficient that one be able to visually identify jets , but rather one should have rules that project a set of particles onto a set of jets .",
    "such a set of rules is referred to as a jet algorithm .",
    "usually a jet algorithm involves one or more parameters that govern its detailed behaviour .",
    "the combination of a jet algorithm and its parameters is known as a jet definition .",
    "suitable jet definitions can be applied to particles , calorimeter towers , or even to the partonic events of perturbative qcd calculations , with the feature that the jets resulting from these different kinds of input are not just physically close to the concept of partons , but can be meaningfully be compared to each other .",
    "jet finding dates back to seminal work by sterman and weinberg  @xcite and several reviews have been written describing the various kinds of jet finders , their different uses and properties , and even the history of the field , for example  @xcite .",
    "it is possible to classify most jet algorithms into one of two broad classes : sequential recombination algorithms and cone algorithms .",
    "sequential recombination algorithms usually identify the pair of particles that are closest in some distance measure , recombine them , and then repeat the procedure over and again , until some stopping criterion is reached .",
    "the distance measure is usually related to the structure of divergences in perturbative qcd . the various sequential recombination algorithms differ mainly in their particular choices of distance measure and stopping criterion .",
    "cone algorithms put together particles within specific conical angular regions , notably such that the momentum sum of the particles contained in a given cone coincides with the cone axis ( a `` stable cone '' ) . because qcd radiation and hadronisation leaves the direction of a parton s energy flow essentially unchanged , the stable cones are physically close in direction and energy to the original partons .",
    "differences between various cone algorithms are essentially to do with the strategy taken to search for the stable cones ( e.g.  whether iterative or exhaustive ) and the procedure used to deal with cases where the same particle is found in multiple stable cones ( e.g.splitmerge procedures ) .",
    "one of the aims of the ` fastjet`c++ library is to provide straightforward , efficient implementations for the majority of widely used sequential - recombination algorithms , both for hadron - hadron and @xmath2 colliders , and easy access also to cone - type jet algorithms .",
    "it is distributed under the terms of version  2 of the gnu general public license ( gpl )  @xcite .    to help introduce the terminology used throughout ` fastjet`and this manual , let us consider the longitudinally - invariant @xmath3 algorithm for hadron colliders  @xcite .",
    "this was the first jet algorithm to be implemented in ` fastjet `  @xcite and its structure , together with that of other sequential recombination algorithms , has played a key role in the design of ` fastjet ` s interface .",
    "the @xmath3 algorithm involves a ( symmetric ) distance measure , @xmath4 , between all pairs of particles @xmath5 and @xmath6 , @xmath7 where @xmath8 is the transverse momentum of particle @xmath5 with respect to the beam ( @xmath9 ) direction and @xmath10 , with @xmath11 and @xmath12 respectively @xmath5 s rapidity and azimuth .",
    "the @xmath3 algorithm also involves a distance measure between every particle @xmath5 and the beam @xmath13 @xmath14 in eq .",
    "( [ eq : dij - illustr ] ) , usually called the jet radius , is a parameter of the algorithm that determines its angular reach . in the original , so - called `` exclusive '' formulation of the @xmath3 algorithm  @xcite ( generally used with @xmath15 )",
    ", one identifies the smallest of the @xmath4 and @xmath16 .",
    "if it is a @xmath4 , one replaces @xmath5 and @xmath6 with a single new object whose momentum is @xmath17  often this object is called a `` pseudojet '' , since it is neither a particle , nor yet a full jet .",
    "if instead the smallest distance is a @xmath16 , then one removes @xmath5 from the list of particles / pseudojets and declares it to be part of the `` beam '' jet .",
    "one repeats this procedure until the smallest @xmath4 or @xmath16 is above some threshold @xmath18 ; all particles / pseudojets that are left are then that event s ( non - beam ) jets .    in the `` inclusive '' formulation of the @xmath3 algorithm  @xcite ,",
    "the @xmath4 and @xmath16 distances are the same as above .",
    "the only difference is that when a @xmath16 is smallest , then @xmath5 is removed from the list of particles / pseudojets and added to the list of final `` inclusive '' jets ( this is instead of being incorporated into a beam jet ) .",
    "there is no @xmath18 threshold and the clustering continues until no particles / pseudojets remain . of the final jets , generally only those above some transverse momentum are actually used . in the exclusive case , since in the exclusive case pseudojets with @xmath19 become part of the beam jets , i.e.  are discarded . ] because the distance measures are the same in the inclusive and exclusive algorithms , the clustering sequence is common to both formulations ( at least up to @xmath18 ) , a property that will be reflected in ` fastjet ` s common interface to both formulations .",
    "having seen these descriptions , the reader may wonder why a special library is needed for sequential - recombination jet finding .",
    "indeed , the @xmath3 algorithm can be easily implemented in just a few dozen lines of code .",
    "the difficulty that arises , however , is that at hadron colliders , clustering is often performed with several hundreds or even thousands of particles",
    ". given @xmath20 particles , there are @xmath21 @xmath4 distances to calculate , and since one must identify the smallest of these @xmath22 distances at each of @xmath23 iterations of the algorithm , original implementations of the @xmath3 algorithm  @xcite involved @xmath24 operations to perform the clustering . in practice",
    "this translates to about 1s for @xmath25 .",
    "given that events with pileup can have multiplicities significantly in excess of 1000 and that it can be necessary to cluster hundreds of millions of events , @xmath26 timing quickly becomes prohibitive , all the more so in time - critical contexts such as online triggers .",
    "to alleviate this problem , ` fastjet`makes use of the observation  @xcite that the smallest pairwise distance remains the same if one uses the following alternative ( non - symmetric ) @xmath4 distance measure : @xmath27 for a given @xmath5 , the smallest of the @xmath4 is simply found by choosing the @xmath6 that minimises the @xmath28 , i.e.  by identifying @xmath5 s geometrical nearest neighbour on the @xmath29 cylinder .",
    "geometry adds many constraints to closest pair and nearest neighbour type problems , e.g.  if @xmath5 is geometrically close to @xmath30 and @xmath6 is geometrically close to @xmath30 , then @xmath5 and @xmath6 are also geometrically close ; such a property is not true for the @xmath4 .",
    "the factorisation of the problem into momentum and geometrical parts makes it possible to calculate and search for minima among a much smaller set of distances .",
    "this is sufficiently powerful that with the help of the external computational geometry algorithms library ( cgal )  @xcite ( specifically , its delaunay triangulation modules ) , ` fastjet`achieves expected @xmath31 timing for many sequential recombination algorithms .",
    "this @xmath31 strategy is supplemented in ` fastjet`with several other implementations , also partially based on geometry , which help optimise clustering speed up to moderately large multiplicities , @xmath32 . the timing for @xmath25",
    "is thus reduced to a few milliseconds .",
    "the same techniques apply to a range of sequential recombination algorithms , described in section  [ sec : native - algs ] .    at the time of writing , sequential recombination jet algorithms are the main kind of algorithm in use at cern s large hadron collider ( lhc ) , notably the anti-@xmath3 algorithm  @xcite , which simply replaces @xmath33 with @xmath34 in eqs .",
    "( [ eq : dij - illustr],[eq : dib - illustr ] ) .",
    "sequential recombination algorithms were also widely used at hera and lep . however at fermilab s tevatron , and in much preparatory lhc work , cone algorithms were used for nearly all studies . for theoretical and phenomenological comparisons with these results , it is therefore useful to have straightforward access also to cone algorithm codes . the main challenge that would be faced by someone wishing to write their own implementation of a given cone algorithm comes from the large number of details that enter into a full specification of such algorithms , e.g.  the precise manner in which stable cones are found , or in which the split ",
    "merge step is carried out .",
    "the complexity is such that in many cases the written descriptions that exist of specific cone algorithms are simply insufficient to allow a user to correctly implement them .",
    "fortunately , in most cases , the authors of cone algorithms have provided public implementations and these serve as a reference for the algorithm . while each tends to involve a different interface , a different 4-momentum type , etc .",
    ", ` fastjet`has a `` plugin '' mechanism , which makes it possible to provide a uniform interface to these different third party jet algorithms .",
    "many plugins ( and the corresponding third party code ) are distributed with ` fastjet ` . together with the natively - implemented sequential - recombination algorithms , they ensure easy access to all jet algorithms used at colliders in the past decade ( section  [ sec : plugins ] ) .",
    "our distribution of this codebase is complemented with some limited curatorial activity , e.g.  solving bugs that become apparent when updating compiler versions , providing a common build infrastructure , etc . in the past few years",
    ", research into jets has evolved significantly beyond the question of just `` finding '' jets .",
    "this has been spurred by two characteristics of cern s lhc experimental programme .",
    "the first is that the lhc starts to probe momentum scales that are far above the the electroweak scale , @xmath35 , e.g.  in the search for new particles or the study of high - energy @xmath36 scattering .",
    "however , even in events with transverse momenta @xmath37 , there can simultaneously be hadronic physics occurring on the electroweak scale ( e.g.  hadronic @xmath38 decays ) .",
    "jet finding then becomes a multi - scale problem , one manifestation of which is that hadronic decays of w s , z s and top quarks may be so collimated that they are entirely contained within a single jet . the study of this kind of problem has led to the development of a wide array of jet substructure tools for identifying `` boosted '' object decays , as reviewed in  @xcite . as was the situation with cone algorithms a few years ago , there is considerable fragmentation among these different tools , with some public code available from a range of different sources , but interfaces that differ from one tool to the next .",
    "furthermore , the facilities provided with version 2 of ` fastjet`did not always easily accommodate tools to manipulate and transform jets .",
    "version 3 of ` fastjet`aims to improve this situation , providing implementations of the most common jet substructure tools and a framework to help guide third party authors who wish to write further such tools using a standard interface ( section  [ sec : transformers ] ) . in the near future",
    "we also envisage the creation of a ` fastjet```contrib '' space , to provide a common location for access to these new tools as they are developed .",
    "the second characteristic of the lhc that motivates facilities beyond simple jet finding in ` fastjet`is the need to use jets in high - noise environments .",
    "this is the case for proton - proton ( @xmath1 ) collisions , where in addition to the @xmath1 collision of interest there are many additional soft `` pileup '' @xmath1 collisions , which contaminate jets with a high density of low - momentum particles .",
    "a similar problem of `` background contamination '' arises also for heavy - ion collisions ( also at rhic ) where the underlying event in the nuclear collision can generate over a tev of transverse momentum per unit rapidity , part of which contaminates any hard jets that are present .",
    "one way of correcting for this involves the use of jet `` areas '' , which provide a measure of a given jet s susceptibility to soft contamination .",
    "jet areas can be determined for example by examining the clustering of a large number of additional , infinitesimally soft `` ghost '' particles  @xcite .",
    "together with a determination of the level of pileup or underlying - event noise in a specific event , one can then perform event - by - event and jet - by - jet subtraction of the contamination  @xcite . `",
    "fastjet`allows jet clustering to be performed in such a way that the jet areas are determined at the same time as the jets are identified , simply by providing an `` area definition '' in addition to the jet definition ( section  [ sec : areas ] ) .",
    "furthermore it provides the tools needed to estimate the density of noise contamination in an event and to subtract the appropriate amount of noise from each jet ( section  [ sec : backgroundestimator ] ) .",
    "the interface here shares a number of characteristics with the substructure tools , some of which also serve to remove noise contamination .",
    "both the substructure and pileup removal make use also of a `` selectors '' framework for specifying and combining simple cuts ( section  [ sect : selectors ] ) .    while ` fastjet`provides a broad range of facilities , usage for basic jet finding is straightforward . to illustrate this , a quick - start guide is provided in section  [ sec : quick - start ] , while the core classes ( ` pseudojet ` , ` jetdefinition ` and ` clustersequence ` ) are described in section  [ sec : core - classes ] .",
    "for more advanced usage , one of the design considerations in ` fastjet`has been to favour user extensibility , for example through plugins , selectors , tools , etc .",
    "this is one of the topics covered in the appendices .",
    "further information is also available from the extensive `` doxygen '' documentation , available online at http://fastjet.fr .",
    "for the impatient , the ` fastjet`package can be set up and run as follows .    *",
    "download the code and the unpack it + ....   curl -o http://fastjet.fr/repo/fastjet-x.y.z.tar.gz    tar zxvf fastjet-x.y.z.tar.gz   cd fastjet - x.y.z/ .... + replacing ` x.y.z ` with the appropriate version number . on some systems you may need to replace `` ` curl -o ` '' with `` ` wget ` '' . *",
    "compile and install ( choose your own preferred prefix ) , and when you re done go back to the original directory + ....   ./configure --prefix=`pwd`/ .. /fastjet - install   make   make check   make install   cd .. .... + if you copy and paste the above lines from one very widespread pdf viewer , you should note that the first line contains _ back - quotes _ not forward quotes but that your pdf viewer may nevertheless paste forward quotes , causing problems down the line ( the issue arises again below ) .",
    "* now paste the following piece of code into a file called + .... # include \" fastjet / clustersequence.hh \" # include < iostream > using namespace fastjet ; using namespace std ;    int main ( ) {    vector < pseudojet > particles ;    // an event with three particles :    px     py   pz       e    particles.push_back ( pseudojet (    99.0 ,   0.1 ,   0 , 100.0 ) ) ;     particles.push_back ( pseudojet (     4.0 , -0.1 ,   0 ,    5.0 ) ) ;     particles.push_back ( pseudojet (   -99.0 ,     0 ,   0 ,   99.0 ) ) ;      // choose a jet definition    double r = 0.7 ;    jetdefinition jet_def(antikt_algorithm , r ) ;      // run the clustering , extract the jets    clustersequence cs(particles , jet_def ) ;    vector < pseudojet > jets = sorted_by_pt(cs.inclusive_jets ( ) ) ;      // print out some info    cout <",
    "< \" clustered with \" < < jet_def.description ( ) < < endl ;      // print the jets    cout < <    \"         pt y phi \" < < endl ;    for ( unsigned i = 0 ; i < jets.size ( ) ; i++ ) {      cout < < \" jet \" <",
    "< i < < \" : \" < < jets[i].perp ( ) < < \" \"                      < < jets[i].rap ( ) < < \" \" < < jets[i].phi ( ) < < endl ;      vector < pseudojet > constituents = jets[i].constituents ( ) ;      for ( unsigned j = 0 ; j < constituents.size ( ) ; j++ ) {        cout < < \"     constituent \" < < j < < \" 's pt : \" < < constituents[j].perp ( ) < < endl ;      }    } } .... * then compile and run it with + ....",
    "g++ short-example.cc -o short - example \\       `",
    "fastjet - install / bin / fastjet - config --cxxflags --libs --plugins `   ./short - example .... + ( watch out , once again , for the back - quotes if you cut and paste from the pdf ) .",
    "the output will consist of a banner , followed by the lines    .... clustering with longitudinally invariant anti - kt algorithm with r = 0.7   and e scheme recombination          pt y phi jet 0 : 103 0 0      constituent 0 's pt : 99.0001      constituent 1 's pt : 4.00125 jet 1 : 99 0 3.14159      constituent",
    "0 's pt : 99 ....    more evolved example programs , illustrating many of the capabilities of ` fastjet ` , are available in the ` example/ ` subdirectory of the ` fastjet`distribution .",
    "all classes are contained in the ` fastjet ` namespace . for brevity",
    "this namespace will usually not be explicitly written below , with the possible exception of the first appearance of a ` fastjet`class , and code excerpts will assume that a `` ` using namespace fastjet ; ` '' statement is present in the user code . for basic usage , the user is exposed to three main classes :      ` pseudojet ` provides a jet object with a four - momentum and some internal indices to situate it in the context of a jet - clustering sequence .",
    "the class ` jetdefinition ` contains a specification of how jet clustering is to be performed . `",
    "clustersequence ` is the class that carries out jet - clustering and provides access to the final jets .          where the second form allows the initialisation to be obtained from any class ` t ` that allows subscripting to return the components of the momentum ( running from @xmath39 in the order @xmath40 ) .",
    "the default constructor for a ` pseudojet`sets the momentum components to zero .      ....",
    "double e ( )         const ; //",
    "returns the energy component    double e ( )         const ; // returns the energy component    double px ( )        const ; // returns the x momentum component    double py ( )        const ; // returns the y momentum component    double pz ( )        const ; // returns the z momentum component    double phi ( )       const ; // returns the azimuthal angle in range $ 0\\ldots2\\pi$    double phi_std ( )   const ; // returns the azimuthal angle in range $ -\\pi\\ldots\\pi$    double rap ( )       const ; // returns the rapidity    double rapidity ( ) const ; // returns the rapidity    double pseudorapidity ( ) const ; // returns the pseudo - rapidity    double eta ( )       const ; // returns the pseudo - rapidity    double pt2 ( )       const ; // returns the squared transverse momentum    double pt ( )        const ; // returns the transverse momentum    double perp2 ( )     const ; // returns the squared transverse momentum    double perp ( )      const ; // returns the transverse momentum    double m2 ( )        const ; // returns squared invariant mass    double m ( )         const ; // returns invariant mass ( $ -\\sqrt{-m^2}$ if $ m^2 < 0 $ )    double mt2 ( )       const ; // returns the squared transverse mass = $ k_t^2+m^2 $    double mt ( )        const ; // returns the transverse mass    double mperp2 ( )    const ; //",
    "returns the squared transverse mass = $ k_t^2+m^2 $    double mperp ( )     const ; // returns the transverse mass    double operator [ ] ( int i ) const ; // returns component i    double operator ( ) ( int i ) const ; // returns component i              ....    /// set the pointer to user information ( the pseudojet will then own it )    void set_user_info(userinfobase * user_info ) ;    /// retrieve a reference to a dynamic cast of type l of the user info    template < class l >",
    "const l & user_info ( ) const ; ....        ....    /// reset the 4-momentum according to the supplied components , put the user    /// and history indices and user info back to their default values ( -1 , unset )     inline void reset(double px , double py , double pz , double e ) ;    /// reset just the 4-momentum according to the supplied components ,    /// all other information is left unchanged    inline void reset_momentum(double px , double py , double pz , double e ) ; ....    and similarly taking as argument a templated ` some_lorentz_vector ` or a ` pseudojet ` ( in the latter case , or when ` some_lorentz_vector ` is of a type derived from ` pseudojet ` , ` reset ` also copies the user and internal indices and user - info ) .    additionally ,",
    "the ` + ` , ` - ` , ` * ` and ` / ` operators are defined , with ` + ` , ` - ` acting on pairs of ` pseudojet`s and ` * ` , ` / ` acting on a ` pseudojet ` and a ` double ` coefficient .",
    "the analogous ` + = ` , etc . , operators , are also defined .",
    "there are also equality testing operators : ` ( jet1 = = jet2 ) ` returns true if the two jets have identical 4-momenta , structural information and user information ; the ` ( jet = = 0.0 ) ` test returns true if all the components of the 4-momentum are zero .",
    "= ` operator works analogously .      ....    /// return a vector of jets sorted into decreasing transverse momentum    vector < pseudojet > sorted_by_pt(const vector < pseudojet > & jets ) ;       /// return a vector of jets sorted into increasing rapidity    vector < pseudojet > sorted_by_rapidity(const vector < pseudojet > & jets ) ;       /// return a vector of jets sorted into decreasing energy    vector < pseudojet > sorted_by_e(const vector < pseudojet > & jets ) ; ....          the class ` jetdefinition ` contains a full specification of how to carry out the clustering . according to the les houches convention detailed in  @xcite",
    ", a ` jet definition ' should include the jet algorithm name , its parameters ( often the radius @xmath14 ) and the recombination scheme .",
    "its constructor is    ....",
    "jetdefinition(fastjet::jetalgorithm jet_algorithm ,                  double r ,                  fastjet::recombinationscheme recomb_scheme = e_scheme ,                  fastjet::strategy strategy = best ) ; ....    the jet algorithm is one of the entries of the ` jetalgorithm ` ` enum ` : 2.3 ) is however broken for user - written derived classes of ` clustersequence ` , as the protected variables ` _ default_jet_finder ` and ` _ jet_finder ` have been replaced by ` _",
    "default_jet_algorithm ` and ` _",
    "jet_algorithm ` .",
    "]      each algorithm is described in detail in section  [ sec : native - algs ] .",
    "the @xmath41 represent additional values that are present for internal or testing purposes .",
    "they include ` plugin_algorithm ` , automatically set when plugins are used ( section  [ sec : plugins ] ) and ` undefined_jet_algorithm ` , which is the value set in ` jetdefinition ` s default constructor .",
    "the parameter ` r ` specifies the value of @xmath14 that appears in eq .",
    "( [ eq : dij - illustr ] ) and in the various definitions of section  [ sec : native - algs ] . for one algorithm , `",
    "ee_kt_algorithm ` , there is no @xmath14 parameter , so the constructor is to be called without the ` r ` argument .",
    "for the generalised @xmath3 algorithm and its @xmath2 version , one requires @xmath14 and ( immediately after @xmath14 ) an extra parameter @xmath42 .",
    "details are to be found in sections  [ sec : genkt][sec : kt - ee - alg ] . if the user calls a constructor with the incorrect number of arguments for the requested jet algorithm , a ` fastjet::error ( ) ` exception will be thrown with an explanatory message .",
    "the recombination scheme is set by an ` enum ` of type ` recombinationscheme ` , and it is related to the choice of how to recombine the 4-momenta of ` pseudojet`s during the clustering procedure . the default in ` fastjet`is the @xmath43-scheme , where the four components of two 4-vectors are simply added .",
    "this scheme is used when no explicit choice is made in the constructor .",
    "further recombination schemes are described below in section  [ sec : recomb_schemes ] .",
    "the strategy selects the algorithmic strategy to use while clustering and is an ` enum ` of type ` strategy ` .",
    "the default option of ` best ` automatically determines and selects a strategy that should be close to optimal in speed for each event , based on its multiplicity .",
    "a discussion of the main available strategies together with their performance is given in appendix  [ app : strategies ] .            where ` input_particles ` is the vector of initial particles of any type ( ` pseudojet ` , ` heplorentzvector ` , etc .",
    ") that can be used to initialise a ` pseudojet ` and ` jet_def ` contains the full specification of the clustering ( see section [ sec : jetdefinition ] ) .",
    "inclusive jets correspond to all objects that have undergone a `` beam '' clustering ( i.e. @xmath16 recombination ) in the description following eq .",
    "( [ eq : dib - illustr ] ) . for nearly all hadron - collider algorithms ,",
    "the `` inclusive '' jets above some given transverse momentum cut are the ones usually just referred to as the `` jets '' .",
    "where ` ptmin ` may be omitted , then implicitly taking the value zero .",
    "note that the order in which the inclusive jets are provided depends on the jet algorithm . to obtain a specific ordering , such as decreasing @xmath44",
    ", the user should perform a sort themselves , e.g.with the ` sorted_by_pt ( ... ) ` function , described in section  [ sec : pseudojet ] .    with a zero transverse momentum cut ,",
    "the number of jets found in the event is not an infrared safe quantity ( adding a single soft particle can lead to one extra soft jet ) .",
    "however it can still be useful to talk of all the objects returned by ` inclusive_jets ( ) ` as being `` jets '' , e.g. in the context of the estimation underlying - event and pileup densities , cf.section  [ sec : backgroundestimator ] .        ....    /// return a vector of all jets ( in the sense of the exclusive algorithm ) that would     ///",
    "be obtained when running the algorithm with the given dcut .",
    "vector < pseudojet > exclusive_jets ( const double & dcut ) const ;      ///",
    "return a vector of all jets when the event is clustered ( in the exclusive sense )     /// to exactly njets .",
    "throws an error if the event has fewer than njets particles .",
    "vector < pseudojet > exclusive_jets ( const int & njets ) const ;      /// return a vector of all jets when the event is clustered ( in the exclusive sense )     /// to exactly njets . if the event has fewer than njets particles , it returns all    /// available particles .",
    "vector < pseudojet > exclusive_jets_up_to ( const int & njets ) const ; ....      ....    /// return the number of jets ( in the sense of the exclusive algorithm ) that would     /// be obtained when running the algorithm with the given dcut .",
    "int n_exclusive_jets ( const double & dcut ) const ; ....          ///",
    "return the maximum of the dmin encountered during all recombinations up to the one     /// that led to an n - jet final state ; identical to exclusive_dmerge , except in cases     /// where the dmin do not increase monotonically .",
    "double exclusive_dmerge_max ( const int & n ) const ; ....    the first returns the @xmath46 in going from @xmath47 to @xmath48 jets .",
    "occasionally however the @xmath46 value does not increase monotonically during successive mergings and using a @xmath45 smaller than the return value from ` exclusive_dmerge ` does not guarantee an event with more than @xmath48 jets .",
    "for this reason the second function ` exclusive_dmerge_max ` is provided  using a @xmath45 below its return value is guaranteed to provide a final state with more than @xmath48 jets , while using a larger value will return a final state with @xmath48 or fewer jets .              some jet algorithms (",
    "e.g.  a number of the plugins in section  [ sec : plugins ] ) have the property that not all particles necessarily participate in the clustering .",
    "in other cases , particles may take part in the clustering , but not end up in any final inclusive jet .",
    "two member functions are provided to obtain the list of these particles .",
    "one is      which returns the list of particles that never took part in the clustering .",
    "the other additionally returns objects that are the result of clustering but that never made it into a inclusive jet ( i.e.  into a `` beam '' recombination ) :          a standard copy constructor is available for ` clustersequence`s .",
    "additionally it is possible to copy the clustering history of a ` clustersequence`while modifying the momenta of the ` pseudojet`s at all ( initial , intermediate , final ) stages of the clustering , with the ` clustersequence`member function      ` functionofpseudojet < pseudojet > ` is an abstract base class whose interface provides a ` pseudojet operator()(const pseudojet & jet ) ` function , i.e.  a function of a ` pseudojet`that returns a ` pseudojet`(cf .",
    "appendix  [ app : function - of - pj ] ) . as the clustering history is copied to the target ` clustersequence ` , each ` pseudojet`in the target ` clustersequence`is set to the result of ` action_on_jet(original_pseudojet ) ` .",
    "one use case for this is if one wishes to obtain a lorentz - boosted copy of a ` clustersequence ` , which can be achieved as follows    ....    # include \" fastjet / tools / boost.hh \"    // ...    clustersequence original_cs ( ... ) ;    clustersequence boosted_cs ;    boost boost(boost_4momentum ) ;    boosted_cs.transfer_from_sequence(cs , & boost ) ; ....      when merging particles ( i.e. ` pseudojet`s ) during the clustering procedure , one must specify how to combine the momenta . the simplest procedure ( @xmath43-scheme )",
    "simply adds the four - vectors .",
    "this has been advocated as a standard in  @xcite , was the main scheme in use during run  ii of the tevatron , is currently used by the lhc experiments , and is the default option in ` fastjet ` .",
    "other choices are listed in table  [ tab : recombschemes ] , and are described below .",
    ".members of the ` recombinationscheme ` enum ; the last two refer to boost - invariant version of the @xmath44 and @xmath52 schemes ( as defined in section  [ sec : recomb_schemes ] ) . [ cols=\"<\",options=\"header \" , ]      the ` jetmedianbackgroundestimator ` and ` gridmedianbackgroundestimator `",
    "classes are new to ` fastjet`3 . in ` fastjet`versions 2.3 and 2.4 , the background estimation tools were instead integrated into the ` clustersequenceareabase ` class . rather than using selectors to specify the jets used in the background estimation",
    ", they used the ` rangedefinition ` class . for the purpose of backwards compatibility",
    ", these facilities will remain present in all 3.0.x versions .",
    "note that ` clustersequenceareabase ` now actually uses a selector in its background estimation interface , and that a ` rangedefinition ` is automatically converted to a selector .",
    "an explicit argument in @xmath53-determination calls in ` fastjet`2.4 concerned the choice between the use of scalar areas and the transverse component of the 4-vector area in the denominator of @xmath54 .",
    "the transverse component gives the more accurate @xmath53 determination and that is now the default in ` jetmedianbackgroundestimator ` .",
    "the behaviour can be changed with a member function call of the form      finally , the calculation of @xmath55 in ` fastjet`2.x incorrectly handled the limit of a small number of jets .",
    "this is now fixed in ` fastjet`3 , but a call to ` set_provide_fj2_sigma(true ) ` causes ` jetmedianbackgroundestimator ` to reproduce that behaviour .    `",
    "fastjet`2.x also placed the ghosts differently , resulting in different event - by - event rho estimates , and possibly a small systematic offset ( scaling as the square - root of the ghost area ) when ghosts and particles both covered identical ( small ) regions .",
    "this offset is no longer present with the ` fastjet`3 ghost placement .",
    "if the old behaviour is needed , a call to a specific ` ghostedareaspec ` s ` set_fj2_placement(true ) ` function causes ghosts to placed as in the 2.x series .",
    "g.  sterman and s.  weinberg , `` jets from quantum chromodynamics , '' phys .",
    "lett .   * 39 * ( 1977 ) 1436 .",
    "s.  moretti , l.  lonnblad and t.  sjostrand , `` new and old jet clustering algorithms for electron positron events , '' jhep * 9808 * ( 1998 ) 001 [ arxiv : hep - ph/9804296 ] .",
    "g.  c.  blazey _ et al .",
    "_ , hep - ex/0005012 . s.  d.  ellis , j.  huston , k.  hatakeyama , p.  loch and m.  tonnesmann , `` jets in hadron - hadron collisions , '' prog .",
    "phys .   * 60 * ( 2008 ) 484 [ arxiv:0712.2447 [ hep - ph ] ] . g.  p.  salam , eur .",
    "j.   * c67 * ( 2010 ) 637 - 686 [ arxiv:0906.1833 [ hep - ph ] ] .",
    "s.  d.  ellis and d.  e.  soper , phys .",
    "d * 48 * ( 1993 ) 3160 [ hep - ph/9305266 ]",
    ". m.  cacciari and g.  p.  salam , phys .",
    "b * 641 * ( 2006 ) 57 [ hep - ph/0512210 ] .",
    "m. seymour , http://hepwww.rl.ac.uk / theory / seymour / ktclus/.    http://hepforge.cedar.ac.uk/ktjet/ ; j.  m.  butterworth , j.  p.  couchman , b.  e.  cox and b.  m.  waugh , comput .",
    "commun .   * 153 * , 85 ( 2003 ) [ hep - ph/0210022 ] .",
    "a.  fabri _ et al .",
    "_ , softw .",
    "exper .   *",
    "30 * ( 2000 ) 1167 ; j .- d .",
    "boissonnat _ et al .",
    "_ , comp .",
    "* 22 * ( 2001 ) 5 ; http://www.cgal.org/    m.  cacciari , g.  p.  salam and g.  soyez , jhep * 0804 * ( 2008 ) 063 [ arxiv:0802.1189 [ hep - ph ] ] .",
    "a.  abdesselam , e.  b.  kuutmann , u.  bitenc , g.  brooijmans , j.  butterworth , p.  bruckman de renstrom , d.  buarque franzosi , r.  buckingham _ et al .",
    "_ , eur .",
    "j.   * c71 * ( 2011 ) 1661 .",
    "[ arxiv:1012.5412 [ hep - ph ] ] .",
    "m.  cacciari , g.  p.  salam and g.  soyez , jhep * 0804 * ( 2008 ) 005 , [ arxiv:0802.1188 [ hep - ph ] ] . m.  cacciari and g.  p.  salam , phys .",
    "b * 659 * ( 2008 ) 119 [ arxiv:0707.1378 [ hep - ph ] ] .",
    "m.  cacciari , j.  rojo , g.  p.  salam , g.  soyez , eur .",
    "j.   * c71 * ( 2011 ) 1539 .",
    "[ arxiv:1010.1759 [ hep - ph ] ] .",
    "y.  l.  dokshitzer , g.  d.  leder , s.  moretti and b.  r.  webber , jhep * 9708 * , 001 ( 1997 ) [ hep - ph/9707323 ] ; m.  wobisch and t.  wengler ,  hadronization corrections to jet cross sections in deep - inelastic arxiv : hep - ph/9907280 ; m.  wobisch ,  measurement and qcd analysis of jet cross sections in deep - inelastic desy - thesis-2000 - 049 .",
    "s.  catani , y.  l.  dokshitzer , m.  olsson , g.  turnock and b.  r.  webber , phys .",
    "b * 269 * , 432 ( 1991 ) ;        s.  d.  ellis , j.  huston and m.  tonnesmann , in _ proc . of the aps / dpf / dpb summer study on the future of particle physics ( snowmass 2001 ) _ ed .",
    "n.  graf , p. p513 [ hep - ph/0111434 ] .",
    "tev4lhc qcd working group _ et al .",
    "_ , hep - ph/0610012 .",
    "s.  weinzierl , arxiv:1108.1934 [ hep - ph ]",
    ".      f.  abe _ et al .",
    "_ [ cdf collaboration ] , `` the topology of three jet events in @xmath56 collisions at @xmath57 tev , '' phys .  rev .",
    "d * 45 * ( 1992 ) 1448 .",
    "b.  abbott _ et al . _",
    "[ d0 collaboration ] , fermilab - pub-97 - 242-e .",
    "j.  m.  butterworth , a.  r.  davison , m.  rubin and g.  p.  salam , phys .",
    "* 100 * ( 2008 ) 242001 [ arxiv:0802.2470 [ hep - ph ] ] .",
    "d.  krohn , j.  thaler and l.  t.  wang , jhep * 1002 * ( 2010 ) 084 [ arxiv:0912.1342 [ hep - ph ] ] .",
    "d.  e.  kaplan , k.  rehermann , m.  d.  schwartz , b.  tweedie , phys .",
    "* 101 * ( 2008 ) 142001 [ arxiv:0806.0848 [ hep - ph ] ] .",
    "t.  sjostrand , s.  mrenna and p.  skands , `` pythia 6.4 physics and manual , '' jhep * 0605 * ( 2006 ) 026 , [ arxiv : hep - ph/0603175 ] .",
    "t.  sjostrand , s.  mrenna , p.  z.  skands , comput .",
    "commun .",
    "* 178 * ( 2008 ) 852 - 867 .",
    "[ arxiv:0710.3820 [ hep - ph ] ] ."
  ],
  "abstract_text": [
    "<S> ` fastjet`is a ` c++ ` package that provides a broad range of jet finding and analysis tools . </S>",
    "<S> it includes efficient native implementations of all widely used @xmath0 sequential recombination jet algorithms for @xmath1 and @xmath2 collisions , as well as access to 3rd party jet algorithms through a plugin mechanism , including all currently used cone algorithms . ` </S>",
    "<S> fastjet`also provides means to facilitate the manipulation of jet substructure , including some common boosted heavy - object taggers , as well as tools for estimation of pileup and underlying - event noise levels , determination of jet areas and subtraction or suppression of noise in jets .    </S>",
    "<S> cern - ph - th/2011 - 297 </S>"
  ]
}