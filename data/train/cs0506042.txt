{
  "article_text": [
    "low density parity check ( ldpc ) codes are widely acknowledged to be good codes due to their near shannon - limit performance when decoded iteratively .",
    "however , many structure - based constructions of ldpc codes fail to achieve this level of performance , and are often outperformed by random constructions .",
    "( exceptions include the finite - geometry - based ldpc codes ( fg - ldpc ) of @xcite , which were later generalized in @xcite . )",
    "moreover , there are discrepancies between iterative and maximum likelihood ( ml ) decoding performance of short to moderate blocklength ldpc codes .",
    "this behavior has recently been attributed to the presence of so - called _ pseudocodewords _ of the ldpc constraint graphs , which are valid solutions of the iterative decoder which may or may not be optimal @xcite .",
    "analogous to the role of minimum hamming distance , @xmath4 , in ml - decoding , the minimal pseudocodeword weight , @xmath5 , has been shown to be a leading predictor of performance in iterative decoding .",
    "furthermore , the error floor performance of iterative decoding is dominated by minimal weight pseudocodewords .",
    "although there exist pseudocodewords with weight larger than @xmath4 that have adverse affects on decoding , pseudocodewords with weight @xmath6 are especially problematic @xcite .",
    "the type i - a construction and certain cases of the type ii construction presented in this paper are designed so that the resulting codes have minimal pseudocodeword weight equal to the minimum distance of the code , and consequently , these problematic low - weight pseudocodewords are avoided .",
    "the resulting codes have minimum distance which meets the lower tree bound originally presented in @xcite , and since @xmath5 shares the same lower bound @xcite , and is upper bounded by @xmath4 , the proposed constructions have @xmath7 .",
    "it is worth noting that this property is also a characteristic of some of the fg -ldpc codes @xcite , and indeed , the projective - geometry - based codes of @xcite arise as special cases of our type ii construction .",
    "furthermore , the type i - b construction presented herein is a modification of the type i - a construction , and it yields a family of codes with a wide range of rates and blocklengths that are comparable to those obtained from finite geometries .",
    "we now present the tree bound on @xmath5 derived in @xcite .",
    "_ let @xmath8 be a bipartite ldpc constraint graph with smallest left ( variable node ) degree @xmath0 and girth @xmath9 .",
    "then the minimal pseudocodeword weight @xmath5 ( for the awgn / bsc channels ) is lower bounded by @xmath10 _",
    "[ thm1 ]    this bound is also the tree bound on the minimum distance established by tanner in @xcite . and",
    "since the set of pseudocodewords includes all codewords , we have @xmath11 . in the following sections we present two construction techniques of ldpc codes wherein for certain cases , @xmath7 .",
    "the connection algorithms for the tree constructions type i - b and type ii are based on mutually orthogonal latin squares .",
    "a well - known construction of a family of mutually orthogonal latin squares of order @xmath12 , a power of a prime , may be found in @xcite .",
    "let @xmath13 denote @xmath14 mutually orthogonal latin squares ( mols ) of order @xmath12 .",
    "let the rows ( and columns ) of each square be indexed by the integers @xmath15 . without loss of generality ,",
    "assume that the first column of each of the latin squares is @xmath16^t$ ] .",
    "in addition , define a new square of size @xmath17 , denoted @xmath18 , where each column of @xmath18 is @xmath16^t$ ] .",
    "in the type i construction , first a @xmath0-regular tree of alternating variable and constraint node layers is enumerated from a root variable node ( layer @xmath19 ) for @xmath20 layers . if @xmath20 is odd ( respectively , even ) , the final layer @xmath21 is composed of variable nodes ( respectively , constraint nodes ) .",
    "call this tree @xmath22 .",
    "the tree @xmath22 is then reflected across an imaginary horizontal axis to yield another tree , @xmath23 , and the variable and constraint nodes are reversed .",
    "that is , if layer @xmath24 in @xmath22 is composed of variable nodes , then the reflection of @xmath24 , call it @xmath25 , is composed of constraint nodes in the reflected tree , @xmath23 .",
    "the union of these two trees , along with edges connecting the nodes in layers @xmath26 and @xmath27 according to a connection algorithm that is described next , comprise the graph representing a type i ldpc code .",
    "we now present two connection schemes that can be used in this type i model , and discuss the resulting codes .",
    "for @xmath28 , the type i - a construction yields a @xmath0-regular ldpc constraint graph having @xmath29 variable and constraint nodes , and girth @xmath9 .",
    "the tree @xmath22 has @xmath30 layers . to connect the nodes in @xmath31 to @xmath32 , first label the variable ( resp . ,",
    "constraint ) nodes in @xmath33 ( resp . , @xmath34 ) when @xmath30 is odd , as @xmath35 , @xmath36 ( resp . , @xmath37 ) .",
    "the nodes @xmath35 form the @xmath38 class , the nodes @xmath39 form the @xmath40 class , and the nodes @xmath41 form the @xmath42 class ; classify the constraint nodes in a similar manner .",
    "in addition , define three permutations @xmath43 of the set",
    "@xmath44 as follows .",
    "the nodes in @xmath31 and @xmath32 are connected as follows :    1 .   for @xmath45 , and @xmath46 , the variable node @xmath47 is connected to nodes @xmath48 and @xmath49 .",
    "2 .   for @xmath50 , and @xmath46 , the variable node @xmath47 is connected to nodes @xmath51 and @xmath52 .",
    "the permutations for the cases @xmath53 are given below .",
    "the above construction can be extended for higher @xmath9 in a natural way and we are working on an explicit closed form expression for the permutations @xmath54 for higher @xmath9 .    when @xmath30 is odd , the minimum distance of the resulting code meets the tree bound , and hence , @xmath55 .",
    "when @xmath30 is even , @xmath4 is strictly larger than the tree bound ; we believe however , that @xmath5 is equal to @xmath4 in this case as well . figure  [ type1a_const ] illustrates the general construction procedure and figure  [ type1ad3g10_graph ] shows a girth 10 type i - a ldpc constraint graph .",
    "for @xmath56 a prime , the type i - b construction yields a @xmath0-regular ldpc constraint graph having @xmath57 variable and constraint nodes , and girth @xmath58 .",
    "the tree @xmath22 has 3 layers @xmath59 and @xmath60 .",
    "@xmath60 ( resp . , @xmath61 ) is composed of @xmath12 sets @xmath62 of @xmath63 variable ( resp . ,",
    "constraint ) nodes in each set ; the set @xmath64 corresponds to the children of branch @xmath65 of the root node .",
    "let @xmath64 ( resp . ,",
    "@xmath66 ) contain the variable ( resp . ,",
    "constraint ) nodes @xmath67 ( resp . , @xmath68 ) . to use mols of order @xmath12 in the connection algorithm , an imaginary node , @xmath69 ( resp . , @xmath70 )",
    "is temporarily introduced into each set @xmath64 ( resp , @xmath66 ) .",
    "the connection algorithm proceeds as follows :    1 .",
    "let @xmath71 denote the @xmath72 entry of the square @xmath73 defined in section ii .",
    "for @xmath74 and @xmath75 , connect variable node @xmath76 to constraint nodes @xmath77 .",
    "2 .   delete all imaginary nodes @xmath78 and the edges incident on them .",
    "3 .   for @xmath79 delete the edge connecting @xmath80 to @xmath81 .",
    "the resulting @xmath0-regular constraint graph represents the type i - b ldpc code .",
    "figure  [ type1b_const ] illustrates the construction procedure and figure [ type1bd4g6_graph ] provides a specific example of a type i - b ldpc constraint graph with @xmath82 ; the squares used for constructing this graph are    @xmath83 , \\",
    "\\left[\\begin{array}{cccc } 0&1&2&3\\\\ 1&0&3&2\\\\ 2&3&0&1\\\\ 3&2&1&0 \\end{array}\\right ] , \\",
    "\\left[\\begin{array}{cccc } 0&2&3&1\\\\ 1&3&2&0\\\\ 2&0&1&3\\\\ 3&1&0&2 \\end{array}\\right ] , \\ \\left[\\begin{array}{cccc } 0&3&1&2\\\\ 1&2&0&3\\\\ 2&1&3&0\\\\ 3&0&2&1 \\end{array}\\right ] .\\ ] ]    the type i - b algorithm yields ldpc codes having a wide range of rates and blocklengths that are comparable to , but different from , the two - dimensional ldpc codes from finite euclidean geometries @xcite .",
    "the type i - b ldpc codes are @xmath12-regular with girth six , blocklength @xmath84 , and distance @xmath85 . for degrees of the form @xmath86 , the resulting type i - b codes have very good rates , above 0.5 , and perform well with iterative decoding .",
    "in the type ii construction , first a @xmath0-regular tree @xmath22 of alternating variable and constraint node layers is enumerated from a root variable node ( layer @xmath19 ) for @xmath20 layers , as in type i. the tree @xmath22 is not reflected ; rather , a single layer of @xmath87 nodes is added to form layer @xmath88 . if @xmath20 is odd ( resp . , even ) , this layer is composed of constraint ( resp . , variable )",
    "the union of @xmath22 and @xmath88 , along with edges connecting the nodes in layers @xmath26 and @xmath88 according to a connection algorithm that is described next , comprise the graph representing a type ii ldpc code .",
    "we now present the connection scheme that is used for this type ii model , and discuss the resulting codes .",
    "+ the connection algorithm for @xmath89 and @xmath90 proceeds as follows .",
    "the @xmath0 constraint nodes in @xmath91 are labeled @xmath92 to represent the @xmath0 branches stemming from the root node , and the @xmath93 variable nodes in the third layer @xmath60 are labeled as @xmath94 , @xmath95 , @xmath96 , @xmath97 .",
    "the @xmath98 constraint nodes in the final layer @xmath99 are labeled @xmath100 , @xmath101 , @xmath96 , @xmath102 .    1 .",
    "the constraint nodes in @xmath103 are grouped into @xmath104 classes of @xmath104 nodes in each class . similarly , the variable nodes in @xmath60 are grouped into @xmath105 classes of @xmath104 nodes in each class . those nodes descending from @xmath106 form the @xmath38 class , those descending from @xmath107 form the first class , and so on .",
    "each of the variable nodes descending from @xmath106 is connected to all the constraint nodes of one class .",
    "that is , @xmath108 is connected to @xmath109 , @xmath110 is connected to @xmath111 , and in general , @xmath112 is connected to @xmath113 which correspond to the constraint nodes in the @xmath114 class .",
    "3 .   let @xmath71 denote the @xmath72 entry of @xmath115 .",
    "4 .   then connect the variable node @xmath116 to the constraint nodes @xmath117    figure  [ type2g6_const ] illustrates the construction procedure and figure [ type2g6d4_graph ] provides an example of a type ii ldpc constraint graph with degree @xmath82 and girth @xmath118 ; the squares used for constructing this example are @xmath119 , \\",
    "m^{(1)}=   \\left[\\begin{array}{ccc } 0&1&2\\\\ 1&2&0\\\\ 2&0&1 \\end{array}\\right ] , \\",
    "m^{(2)}=\\left[\\begin{array}{ccc } 0&2&1\\\\ 1&0&2\\\\ 2&1&0 \\end{array}\\right].\\ ] ] the ratio of minimum distance to blocklength of the codes is at least @xmath120 , and the girth is six . for degrees @xmath0 of the form @xmath121 , the tree bound on minimum distance and",
    "minimum pseudocodeword weight @xcite is met , i.e. , @xmath122 , for the type ii , @xmath123 , ldpc codes .",
    "the codes that result from this @xmath89 construction correspond to the two - dimensional projective - geometry - based ldpc ( pg ldpc ) codes of @xcite . with a little modification of the type ii construction ,",
    "we can also obtain the two - dimensional euclidean - geometry - based ldpc codes of @xcite .",
    "+ since a two - dimensional euclidean geometry may be obtained by deleting certain points and line(s ) of a two - dimensional projective geometry , the graph of a two - dimensional eg - ldpc code @xcite may be obtained by performing the following operations on the type ii , @xmath89 , graph :    1 .   in the tree @xmath22 , the root node along with its neighbors , i.e.",
    ", the constraint nodes in layer @xmath91 , are deleted .",
    "2 .   consequently , the edges from the constraint nodes @xmath124 to layer @xmath60 are also deleted .",
    "3 .   at this stage ,",
    "the remaining variable nodes have degree @xmath12 , and the remaining constraint nodes have degree @xmath125 .",
    "now , a constraint node from layer @xmath103 is chosen , say , constraint node @xmath126 .",
    "this node and its neighboring variable nodes and the edges incident on them are deleted .",
    "doing so removes exactly one variable node from each class of @xmath60 , and the degrees of the remaining constraint nodes in @xmath103 are lessened by one .",
    "thus , the resulting graph is now @xmath12-regular with a girth of six , has @xmath127 constraint and variable nodes , and corresponds to the two - dimensional euclidean - geometry - based ldpc code @xmath128 of @xcite .      1 .",
    "the tree @xmath22 is now enumerated for four layers , with the nodes in @xmath129 and @xmath60 labeled as in the @xmath89 case . for @xmath130 ,",
    "the constraint nodes in the @xmath65th class of @xmath103 are labeled @xmath131 , @xmath96 , @xmath132 .",
    "the @xmath133 variable nodes in the final layer @xmath134 are labeled @xmath135 , @xmath136 , @xmath137 .",
    "3 .   for @xmath138 ,",
    "@xmath139 , connect the variable node @xmath140 , that is in the @xmath38 class of @xmath103 , to the constraint nodes @xmath141 4 .",
    "let @xmath142 , the @xmath143 entry of @xmath115 , and let @xmath144 , the @xmath72 entry of @xmath145 , where @xmath146 .",
    "then , for @xmath147 , @xmath148 , connect the variable node @xmath149 to the constraint nodes @xmath150    the type ii , @xmath90 , ldpc codes have girth eight , minimum distance @xmath151 , and blocklength @xmath152 .",
    "( we believe that the tree bound on the minimum distance is actually met for all the type ii , @xmath153 , codes , i.e. @xmath154 . ) figure  [ type2g8_const ] illustrates the general construction procedure . for @xmath28 ,",
    "the type ii , @xmath153 , ldpc constraint graph as shown in figure  [ type2g8d3_graph ] corresponds to the @xmath155-finite - generalized - quadrangles - based ldpc ( fgq ldpc ) code of @xcite ; the squares used for constructing this code are @xmath156 , \\",
    "m^{(1)}=\\left[\\begin{array}{cc } 0&1\\\\ 1&0 \\end{array}\\right].\\ ] ] we believe that the type ii , @xmath153 , construction results in other fgq ldpc codes for other choices of @xmath0 . the type ii construction algorithm can be modified for larger @xmath20 by involving more iterations of the mols in the connection scheme , as will be discussed in a forthcoming paper .",
    "figures [ type1_perf ] , [ type1b_perf ] , [ type2g6_perf ] , [ type2g8_perf ] show the bit - error - rate performance of type i - a , type i - b , type ii girth six , and type ii girth eight ldpc codes , respectively over a binary input additive white gaussian noise channel with min - sum iterative decoding .",
    "the performance of regular or semi - regular randomly constructed ldpc codes of comparable rates and blocklengths are also shown .",
    "( all of the random ldpc codes compared in this paper have a variable node degree of three and are constructed from the online ldpc software available at    http://www.cs.toronto.edu/@xmath157 radford / ldpc.software.html . )",
    "figure [ type1_perf ] shows that the type i - a ldpc codes perform substantially better than their random counterparts .",
    "figure [ type1b_perf ] reveals that the type i - b ldpc codes perform better than comparable random ldpc codes at short blocklengths ; but as the blocklengths increase , the random ldpc codes tend to perform better in the waterfall region .",
    "eventually however , as the snr increases , the type i - b ldpc codes outperform the random ones since , unlike the random codes , they do not have a prominent error floor .",
    "figure [ type2g6_perf ] reveals that the performance of type ii girth - six ldpc codes is also significantly better than comparable random codes ; these codes correspond to the two dimensional pg ldpc codes of @xcite .",
    "figure [ type2g8_perf ] indicates the performance of type ii girth - eight ldpc codes ; these codes perform comparably to random codes at short blocklengths , but at large blocklengths , the random codes perform better as they have larger relative minimum distances compared to the type ii girth - eight ldpc codes .    as a general observation , min - sum iterative decoding of most of the tree - based ldpc codes ( particularly , type i - a , type ii , and some type i - b ) presented here",
    "did not typically reveal detected errors , i.e. , errors caused due to the decoder failing to converge to any valid codeword within the maximum specified number of iterations . detected errors are caused primarily due to the presence of pseudocodewords , especially those of minimal weight .",
    "we think that the lack of detected errors with iterative decoding of these ldpc codes is primarily due to their good minimum pseudocodeword weight @xmath5 .",
    "the type i construction yields a family of ldpc codes that , to the best of our knowledge , do not correspond to any of the ldpc codes obtained from finite geometries or other geometrical objects .",
    "the two tree - based constructions presented in this paper yield a wide range of codes that perform well when decoded iteratively , largely due to the maximized minimal pseudocodeword weight .",
    "however , the overall minimum distance of the code is relatively small .",
    "constructing codes with larger minimum distance , while still maintaining @xmath55 , remains an open problem .",
    "y. kou , s. lin , and m. fossorier , `` low - density parity - check codes based on finite geometries : a rediscovery and new results '' , _ ieee trans .",
    "of information theory _ , vol .",
    "it-47 , no .  7 , pp .  2711 - 2736 , nov .",
    "2001 .",
    "r. koetter and p. o. vontobel , `` graph - covers and iterative decoding of finite length codes '' , in _ proceedings of the ieee international symposium on turbo codes and applications _ , ( brest , france ) , sept .",
    "2003 .        c. kelley , d. sridhara , j. xu , and j. rosenthal , `` pseudocodeword - weights and stopping sets '' , in _ proceedings of the ieee international symposium on information theory _ , ( chicago , usa ) , p.  150",
    ", june 27 - july 3 , 2004 .",
    "p. o. vontobel and r. m. tanner , `` construction of codes based on finite generalized quadrangles for iterative decoding '' , in _ proceedings of the ieee international symposium on information theory _ , ( washington dc ) , p.  223",
    ", june 24 - 29 , 2001 ."
  ],
  "abstract_text": [
    "<S> we present a construction of ldpc codes that have minimum pseudocodeword weight equal to the minimum distance , and perform well with iterative decoding . </S>",
    "<S> the construction involves enumerating a @xmath0-regular tree for a fixed number of layers and employing a connection algorithm based on mutually orthogonal latin squares to close the tree . </S>",
    "<S> methods are presented for degrees @xmath1 and @xmath2 , for @xmath3 a prime ,  one of which includes the well - known finite - geometry - based ldpc codes . </S>"
  ]
}