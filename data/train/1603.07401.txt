{
  "article_text": [
    "a polygon is _ simple _ if it has distinct vertices and interior - disjoint edges that do not pass through vertices .",
    "geometric algorithms are often designed for simple polygons , but many also work for degenerate polygons that do not `` self - cross . '' a polygon with at least three vertices is _ weakly simple _ if for every @xmath3 , the vertices can be perturbed by at most @xmath4 to obtain a simple polygon .",
    "such polygons arise naturally in numerous applications , e.g. , for modeling planar networks or as the geodesic hull of points within a simple polygon ( fig .  [ fig : intro ] ) .     with 16 vertices .",
    "( b ) eight points in the interior of @xmath5 ( solid dots ) ; their geodesic hull is a weakly simple polygon @xmath6 with 14 vertices .",
    "( c ) a perturbation of @xmath6 into a simple polygon .",
    "[ fig : intro ] ]    several alternative definitions have been proposed for weakly simple polygons , formalizing the intuition that such polygon does not cross itself .",
    "some of these definitions were unnecessarily restrictive or incorrect ; see  @xcite for a detailed discussion .",
    "rib mor  @xcite[theorem 3.1 ] proved that a weakly simple polygon with at least three vertices can be perturbed into a simple polygon continuously while preserving the lengths of its edges , and maintaining that no two edges properly cross .",
    "chang et al .",
    "@xcite gave an equivalent definition for simple polygons in terms of the frchet distance ( see section  [ sec : preliminaries ] ) , in which a polygon is perturbed into a simple closed curve .",
    "the latter definition is particularly useful for recognizing weakly simple polygons , since it allows transforming edges into polylines ( by subdividing the edges with steiner points which may be perturbed ) .",
    "the perturbation of a vertex incurs only local changes , and need not affect the neighborhood of adjacent vertices ( in other words , we do not need to worry about stretchability of the perturbed configuration ) .    we can decide whether an @xmath1-gon is simple in @xmath0 time by a sweepline algorithm  @xcite .",
    "chazelle s polygon triangulation algorithm also recognizes simple polygons ( in @xmath7 time ) , because it only produces a triangulation if the input is simple  @xcite . recognizing weakly simple polygons , however , is more subtle .",
    "cortese et al .",
    "@xcite achieved this in @xmath8-time .",
    "chang et al .",
    "@xcite improved this to @xmath2 in general ; and to @xmath0 in several special cases .",
    "they identified two features that are difficult to handle : a _ spur _ is a vertex whose incident edges overlap , and a _ fork _ is a vertex that lies in the interior of an edge ( a vertex may be both a fork and a spur ) . for polygons with neither forks nor spurs , chang et al .",
    "@xcite gave an @xmath0-time algorithm .",
    "in the presence of both forks and spurs , their solution is to eliminate forks by subdividing all edges that contain vertices in their interiors , potentially creating a quadratic number of vertices .",
    "we show how to manage this situation efficiently , while building on ideas from  @xcite and from arkin et al .",
    "@xcite , and obtain the following main result .",
    "[ thm : main ] deciding whether a given @xmath1-gon in the plane is weakly simple takes @xmath0 time .",
    "our algorithm is detailed in sections  [ sec : preprocess][sec : tree - exp ] .",
    "it consists of three phases , simplifying the input polygon by a sequence of reduction steps .",
    "first , the _ preprocessing _ phase applies known methods such as _ crimp reductions _ and _ node expansions _ ( section  [ sec : preprocess ] ) .",
    "second , the _ bar simplification _ phase successively eliminates all forks ( section  [ sec : bars ] ) .",
    "third , the _ spur elimination _ phase eliminates all spurs ( section  [ sec : tree - exp ] ) .",
    "when neither forks not spurs are present , we can decide weak simplicity in @xmath7 time  @xcite .",
    "we can also perturb any weakly simple polygon into a simple polygon , in @xmath0 time , by reversing the sequence of operations .",
    "here , we review previously established definitions and known methods from  @xcite and  @xcite .",
    "* polygons and weak simplicity . *",
    "an _ arc _ in @xmath9 is a continuous function @xmath10\\rightarrow \\mathbb{r}^2 $ ] .",
    "a _ closed curve _ is a continuous function @xmath11 .",
    "a closed curve @xmath12 is _ simple _ ( also known as a _",
    "jordan curve _ ) if it is injective . a ( _ simple _ ) _ polygon _ is the image of a piecewise linear ( _ simple _ ) closed curve . thus a polygon @xmath5 can be represented by a cyclic sequence of points @xmath13 , called _ vertices _ , where the image of @xmath12 consists of line segments @xmath14 , and @xmath15 in this cyclic order .",
    "similarly , a _ polygonal chain _",
    "( alternatively , _ path _ ) is the image of a piecewise linear arc , and can be represented by a sequence of points @xmath16 $ ] .",
    "a polygon @xmath17 is _ weakly simple _ if @xmath18 , or if @xmath19 and for every @xmath3 there is a simple polygon @xmath20 such that @xmath21 for all @xmath22 .",
    "this definition is difficult to work with because a small perturbation of a vertex modifies the two incident edges , which may be long , and the effect of a perturbation is not localized .",
    "chang et al .",
    "@xcite gave an equivalent definition in terms of the frchet distance : a polygon given by @xmath23 is weakly simple if for every @xmath3 there is a simple closed curve @xmath24 such that @xmath25 , where @xmath26 denotes the frchet distance between two closed curves .",
    "the curve @xmath27 can approximate an edge of the polygon by a polyline , and any perturbation of a vertex can be restricted to a small neighborhood . with this definition , recognizing weakly simple polygons becomes a combinatorial problem independent of @xmath4 , as explained below .    * bar decomposition and image graph . * two edges of a polygon @xmath5 _ cross _ if their interiors intersect at precisely one point , we call this an _ edge crossing_. weakly simple polygons can not have edge crossings . in the following ,",
    "we assume that such crossings have been ruled out .",
    "two edges of @xmath5 _ overlap _ if their intersection is a ( nondegenerate ) line segment .",
    "the transitive closure of the overlap relation is an equivalence relation on the edges of @xmath5 ; see fig .",
    "[ fig : bars](a ) where equivalence classes are represented by purple regions .",
    "the union of all edges in an equivalence class is called a _",
    "bar_. all bars of a polygon can be computed in @xmath0 time  @xcite .",
    "the bars are line segments that are pairwise noncrossing and nonoverlapping , and the number of bars is @xmath7 .",
    "the vertices and bars of @xmath5 define a planar straight - line graph @xmath28 , called the _ image graph _ of @xmath5 .",
    "we call the vertices and edges of @xmath28 _ nodes _ and _ _ segments__to distinguish them from the vertices and edges of @xmath5 .",
    "every node that is not in the interior of a bar is called _",
    "sober_. the set of nodes in @xmath28 is @xmath29 ( note that @xmath5 may have repeated vertices that correspond to the same node ) ; two nodes are connected by an edge in @xmath28 if they are consecutive nodes along a bar ; see fig .",
    "[ fig : bars](b ) .",
    "hence @xmath28 has @xmath7 vertices and edges , and it can be computed in @xmath0 time  @xcite .",
    "note , however , that up to @xmath7 edges of @xmath5 may pass through a node of @xmath28 , and there may be @xmath30 edge - node pairs such that an edge of @xmath5 passes through a node of @xmath28 .",
    "an @xmath31-time algorithm can not afford to compute these pairs explicitly .",
    "+     with 16 vertices ( @xmath5 is perturbed into a simple polygon for clarity ) .",
    "( b ) the image graph of @xmath5 .",
    "( c ) the combinatorial representation of @xmath5 .",
    "[ fig : bars ] ]    * operations .",
    "* we use certain elementary operations that successively modify a polygon and ultimately eliminate forks and spurs .",
    "suppose that an operation produces a weakly simple polygon if and only if it is performed on a weakly simple polygon",
    ". then the operation is called _ ws - equivalent_. several such operations are already known ( e.g. , crimp reduction , node expansion , bar expansion ) .",
    "we shall use these and introduce several new operations in sections  [ ssec : bar - expansion][sec : tree - exp ] .",
    "* combinatorial characterization of weak simplicity . * to show that an operation is ws - equivalent , it suffices to show the existence of @xmath4-perturbations .",
    "we will use perfect matchings to combinatorially represent @xmath4-perturbations ( independent of @xmath4 or any specific embedding ) .",
    "this representation is a variation of the `` strip system '' introduced in @xcite[appendix b ] .",
    "let @xmath5 be a polygon and @xmath28 its image graph .",
    "we construct a family of simple polygons as follows .",
    "let @xmath32 , to be specified shortly .",
    "for every node @xmath33 of @xmath28 , draw a disk @xmath34 of radius @xmath4 centered at @xmath33 .",
    "choose @xmath3 sufficiently small so that the disks are pairwise disjoint , and no disk intersects a nonincident segment of @xmath28 .",
    "let the _ corridor",
    "_ @xmath35 of a segment @xmath36 be the set of points at distance at most @xmath37 from @xmath36 , outside of the disks @xmath34 and @xmath38 , that is , @xmath39 .",
    "reduce @xmath4 further , so that all corridors are pairwise disjoint , and also disjoint from any disk @xmath40 , @xmath41 .",
    "for every segment @xmath36 of @xmath28 , let the _ volume",
    "_ @xmath42 be the number of edges of @xmath5 that contain both @xmath33 and @xmath43 ( either as an endpoint or in the interior ) .",
    "for every segment @xmath36 , draw @xmath42 parallel line segments between @xmath44 and @xmath45 within @xmath35 ( see fig .",
    "[ fig : bars](c ) ) .",
    "finally , for every disk @xmath34 , construct a noncrossing straight - line perfect matching between the segment endpoints on the boundary @xmath44 ( in fig .",
    "[ fig : bars](c ) , the matchings are drawn with circular arcs for clarity ) .",
    "the line segments in the corridors and the perfect matchings in the disks produce a plane 2-regular graph @xmath46 .",
    "denote by @xmath47 the family of all plane graphs constructed in this way such that @xmath46 is connected and visits the disks in the same cyclic order as @xmath5 . by theorem b.2 in @xcite",
    ", @xmath5 is weakly simple iff @xmath48 .",
    "every 2-regular graph @xmath49 defines ( and is defined by ) a linear order on overlapping edges of @xmath5 , hence on all edges containing an segment of the image graph of @xmath5 .",
    "we say that two graphs in @xmath47 are _ combinatorially equivalent _ if they define the same order over the edges containing each segment of the image graph .",
    "we denote by @xmath50)$ ] the path in @xmath46 corresponding to a path @xmath51 $ ] in @xmath5 including the matchings in @xmath52 and @xmath53 .    in the absence of spurs ,",
    "a weakly simple polygon @xmath5 defines a unique crossing - free perfect matching in each disk @xmath34  @xcite[section 3 ] which defines a 2-regular graph @xmath46 .",
    "consequently , to decide whether @xmath5 is weakly simple it is enough to check whether @xmath49 .",
    "this is no longer the case in the presence of spurs .",
    "in fact , it is not difficult to construct weakly simple @xmath1-gons that admit @xmath54 combinatorially different perturbations into simple polygons ; see fig .",
    "[ fig : ambig ] .    ]    note that the above combinatorial representation may have @xmath55 size , since each edge passing through a node @xmath33 contributes one edge to a matching in @xmath34 .",
    "we use this simple combinatorial representation in our proofs of correctness , but our algorithm will not maintain it explicitly .",
    "by a standard line sweep  @xcite , we can detect and halt if any two edges properly cross .",
    "we then simplify the polygon , using some known steps from  @xcite , and some new ones .",
    "all of this takes @xmath0 time .",
    "arkin et al .",
    "@xcite gave an @xmath7-time algorithm for recognizing weakly simple @xmath1-gons in the special case where all edges are collinear ( in the context of flat foldability of a polygonal linkage ) .",
    "they use the ws - equivalent crimp - reduction operation .",
    "a _ crimp _ is a chain of three consecutive collinear edges @xmath56 $ ] such that both the first edge @xmath57 $ ] and the last edge @xmath58 $ ] contain the middle edge @xmath59 $ ] ( the containment need not be strict ) .",
    "the operation crimp - reduction@xmath60 replaces the crimp @xmath56 $ ] with edge @xmath61 $ ] ; see fig .",
    "[ fig : crimp ] .    $ ] with @xmath61 $ ] .",
    "top : image graph .",
    "bottom : polygon .",
    "[ fig : crimp ] ]    [ lem : crimp ] the crimp - reduction operation is ws - equivalent .",
    "let @xmath62 and @xmath63 be two polygons such that @xmath63 is obtained from @xmath62 by the operation crimp - reduction@xmath60 . without loss of generality , assume that @xmath64 is horizontal with @xmath65 on the left and @xmath66 on the right .",
    "first assume that @xmath62 is weakly simple .",
    "then there exists a simple polygon @xmath67 .",
    "we modify @xmath68 to obtain a combinatorial representation @xmath69 . without loss of generality , assume that edge @xmath57 $ ] is above @xmath59 $ ] ( consequently , @xmath58 $ ] is below @xmath59 $ ] ) in @xmath68 .",
    "the modification involves the perfect matchings at the disks @xmath70 and @xmath71 , and all disks and corridors along the line segment @xmath72 .",
    "denote by @xmath73 the set of maximal paths that lie in the convex hull of @xmath74 , below @xmath57 $ ] and above @xmath59 $ ] ; similarly , let @xmath75 be the set of maximal paths that lie in the convex hull of @xmath74 , below @xmath59 $ ] and above @xmath58 $ ] .",
    "we proceed in two steps ; refer to fig .",
    "[ fig : crimp1 ] .",
    "first , replace the path @xmath76 $ ] with the edge @xmath61 $ ] such that the new edge follows @xmath77 $ ] from @xmath78 to @xmath70 , then @xmath59 $ ] from @xmath70 to @xmath71 , and finally @xmath79 $ ] from @xmath71 to @xmath80 .",
    "second , exchange @xmath73 and @xmath75 such that the above - below order within each set of paths remains the same . since the above - below order within @xmath73 and @xmath75 is preserved , and the paths in @xmath73 ( resp . , @xmath75 ) lie below ( resp .",
    ", above ) the new edge @xmath61 $ ] , no edge crossings have been introduced .",
    "we obtain a simple polygon @xmath69 , which shows that @xmath63 is weakly simple .    $ ] with an edge @xmath81 $ ] .",
    "[ fig : crimp1 ] ]    $ ] with a crimp @xmath56 $ ] .",
    "[ fig : crimp2 ] ]    next assume that @xmath63 is weakly simple .",
    "then , there exists a simple polygon @xmath69 .",
    "we modify @xmath82 to obtain a simple polygon @xmath67 ; refer to fig .",
    "[ fig : crimp2 ] .",
    "note that edge @xmath61 $ ] passes through all segments of @xmath28 along the line segment @xmath72 . in each of these segments @xmath83 , as well as in all disks along the line segment @xmath72 ,",
    "replace the part of @xmath61 $ ] with three parallel line segments . in @xmath71 , connect the right endpoints of the top and middle segments by a new edge of the perfect matching ; and similarly in @xmath70 , connect the left endpoints of the middle and the bottom edges .",
    "we obtain a simple polygon @xmath67 , which shows that @xmath62 is weakly simple .    given a chain of two edges @xmath84 $ ] such that @xmath57 $ ] and @xmath59 $ ] are collinear but do not overlap , the merge operation replaces @xmath84 $ ] with a single edge @xmath77 $ ] .",
    "the merge operation ( as well as its inverse , subdivision ) is ws - equivalent by the definition of weak simplicity in terms of frchet distance  @xcite .",
    "if we greedily apply crimp - reductions and merge operations , in linear time we obtain a polygon with the following two properties :    1 .",
    "[ cond : a1 ] every two consecutive collinear edges overlap ( i.e. , form a spur ) .",
    "[ cond : a2 ] no three consecutive collinear edges form a crimp .    assuming properties [ cond : a1 ] and [ cond : a2 ] , we can characterize a chain of collinear edges with the sequence of their edge lengths .",
    "[ lem : irreducible ] let @xmath85 $ ] be a chain of collinear edges in a polygon with properties [ cond : a1 ] and [ cond : a2 ]",
    ". then the sequence of edge lengths @xmath86 is unimodal ( all local maxima are consecutive ) ; and no two consecutive edges have the same length , except possibly the maximal edge length that can occur at most twice .    for any @xmath87 such that @xmath88 , consider @xmath89 . if @xmath90 and @xmath91 are at least as large , then the three edges form a crimp , by [ cond : a1 ]",
    "however , this contradicts [ cond : a2 ] .",
    "this proves unimodality , and that no three consecutive edges can have the same length .",
    "in fact if @xmath89 is not maximal , one neighbor must be strictly smaller , to avoid the same contradiction .",
    "compute the bar decomposition of @xmath5 and its image graph @xmath28 ( defined in section  [ sec : preliminaries ] , see fig .",
    "[ fig : bars ] ) . for every sober node of the image graph",
    ", we perform the ws - equivalent node - expansion  operation , described in  @xcite[section 3 ] ( cortese et al .",
    "@xcite call this a _",
    "cluster expansion _ ) .",
    "let @xmath33 be a sober node of the image graph .",
    "let @xmath34 be the disk centered at @xmath33 with radius @xmath92 sufficiently small so that @xmath34 intersects only the segments incident to @xmath33 .",
    "for each segment @xmath93 incident to @xmath33 , create a new node @xmath94 at the intersection point @xmath95 .",
    "then modify @xmath5 by replacing each subpath @xmath96 $ ] passing through @xmath33 by @xmath97 $ ] ; see fig .",
    "[ fig : node - expansion ] . if a node expansion produces an edge crossing , report that @xmath5 is not weakly simple .",
    "( the vertices are perturbed for clarity ) .",
    "new nodes are shown as squares . ]",
    "chang et al .",
    "@xcite[section 4 ] define a bar expansion operation . in this paper",
    ", we will refer to it as old - bar - expansion . for a bar @xmath98 of the image graph ,",
    "draw a long and narrow ellipse @xmath70 around the interior nodes of @xmath98 , create subdivision vertices at the intersection of @xmath99 with the edges , and replace each maximal path in @xmath70 by a straight - line edge .",
    "if @xmath98 contains no spurs , old - bar - expansion  is known to be ws - equivalent  @xcite .",
    "otherwise , it can produce false positives , hence it is not ws - equivalent ; see fig .",
    "[ fig : normal - expansion ] for an example .        * new bar expansion operation .",
    "* let @xmath98 be a bar in the image graph with at least one interior node ; see fig .",
    "[ fig : bar - expansion ] . without loss of generality , assume that @xmath98 is horizontal .",
    "let @xmath70 be an ellipse whose major axis is in @xmath98 such that @xmath70 contains all interior nodes of @xmath98 ( nodes in @xmath98 except its endpoints ) , but does not contain any other node of the image graph and does not intersect any segment that is not incident to some node inside @xmath70 .",
    "similar to old - bar - expansion , the operation new - bar - expansion  introduces subdivision vertices on @xmath99 , however we keep all interior vertices of a bar at their original positions . in section",
    "[ sec : bars ] , we apply a sequence of new operations to eliminate all vertices on @xmath98 sequentially while creating new nodes in the vicinity of @xmath70 .",
    "our bar expansion operation can be considered as a preprocessing step for this subroutine .    for each segment @xmath93 between a node @xmath100 and a node @xmath101 , create a new node @xmath94 at the intersection point @xmath102 and subdivide every edge @xmath103 $ ] to a path @xmath104 $ ] .",
    "for each endpoint @xmath43 of @xmath98 , create two new nodes , @xmath105 and @xmath106 , as follows .",
    "node @xmath43 is adjacent to a unique segment @xmath107 , where @xmath108 .",
    "create a new node @xmath109 sufficiently close to the intersection point @xmath110 , but strictly above @xmath98 ; and create a new node @xmath106 in the interior of segment @xmath111 .",
    "subdivide every edge @xmath112 $ ] , where @xmath113 , into a path @xmath114 $ ] .",
    "since the new - bar - expansion  operation consists of only subdivisions ( and slight perturbations of the edges passing through the end - segments of the bars ) , it is ws - equivalent .        * crossings paths . *",
    "apart from node - expansion  and old - bar - expansion , none of our operations will create edge crossings .",
    "our bar simplification algorithm ( section  [ sec : bars ] ) will detect in some cases whether two subpaths cross .",
    "crossings between overlapping paths is not easy to identify ( see  @xcite[section 2 ] for a discussion ) .",
    "we rely on the following simple condition to detect some ( but not all ) crossings .",
    "[ lem : cross ] let @xmath5 be a weakly simple polygon parameterized by a curve @xmath115 ; and let @xmath116 be a closed jordan curve that does not pass through any vertices of @xmath5 and intersects every edge of @xmath5 transversely .",
    "if @xmath117 and @xmath118 intersect in four distinct points , then the cyclic order of the intersection points along @xmath119 and @xmath120 is either the same or reverse .",
    "if @xmath5 is weakly simple , then @xmath119 can be perturbed to a closed jordan curve @xmath121 with the same properties .",
    "denote the intersection points by @xmath122 , @xmath123 , in counterclockwise order along @xmath120 . by the jordan curve theorem , @xmath124 has two connected components , the interior and the exterior of @xmath120 .",
    "since @xmath121 and @xmath120 intersect transversely , the intersection points partition @xmath121 into four jordan arcs that lie alternately in the interior and exterior of @xmath120 .",
    "the two jordan arcs of @xmath121 lying in the interior ( resp . , exterior ) of @xmath120 can not cross . without loss of generality ,",
    "the two arcs of @xmath121 in the interior of @xmath120 connect the pairs @xmath125 and @xmath126 .",
    "then the two arcs of @xmath121 in the interior of @xmath120 must connect the pairs @xmath127 and @xmath128 .",
    "that is , the cyclic order of the intersection points along @xmath121 ( hence , along @xmath129 is also @xmath130 , as calimed .",
    "specifically , a weakly simple polygon can not contain the certain configurations .",
    "[ cor : forbidden ] a weakly simple polygon can not contain a pair of paths @xmath62 and @xmath62 such that    1 .",
    "[ cross:1 ] @xmath131 $ ] and @xmath132 $ ] , where @xmath133 , @xmath134 , @xmath135 , and @xmath136 are nonoveralpping segments in this cyclic order about @xmath137 ( _ node crossing _",
    "; see fig .",
    "[ fig : forbidden](a ) ) .",
    "[ cross:3 ] @xmath138 $ ] and @xmath139 $ ] , where @xmath140 , @xmath137 , @xmath141 , and @xmath142 are on a line in this order , and segments @xmath143 and @xmath144 lie in a closed halfplane bounded by this line ( fig .  [ fig : forbidden](b ) ) .",
    "[ cross:4 ] @xmath145 $ ] and @xmath146 $ ] where @xmath147 , and segments @xmath148 and @xmath149 lie in two different halfplanes bounded by line containing @xmath150 ( fig .",
    "[ fig : forbidden](c ) ) .    in all four cases ,",
    "lemma  [ lem : cross ] with a suitable jordan curve @xmath120 completes the proof . in case",
    "[ cross:1 ] , let @xmath120 be a small circle around @xmath137 . in case  [ cross:3 ] , let @xmath120 be a small neighborhood of segment @xmath150 . in case  [ cross:4 ] ,",
    "let @xmath120 be a small neighborhood of the convex hull of @xmath151 .",
    ", @xmath137 , @xmath141 , and @xmath142 are collinear.,scaledwidth=75.0% ]    * terminology . * here , we classify each path in @xmath70 .",
    "all nodes @xmath152 lie either above or below @xmath98 .",
    "we call them _ top _ and _ bottom _ nodes , respectively",
    ". let @xmath153 denote the set of maximal paths @xmath154 $ ] in @xmath70 .",
    "the paths in @xmath153 can be classified based on the position of their endpoints .",
    "a path @xmath155 is called a    * _ cross chain _",
    "if @xmath156 and @xmath157 are top and bottom nodes respectively ; * _ top chain _",
    "( resp . , _ bottom chain _ ) if both @xmath156 and @xmath157 are top nodes ( resp .",
    ", bottom nodes ) ; * _ pin _ if @xmath158 $ ] ( note that every pin is a top or a bottom chain ) ; * _ v - chain _ if @xmath159 $ ] , where @xmath160 and @xmath155 is a top or a bottom chain .",
    "let @xmath161 be the set of pins , and @xmath162 the set of v - chains .",
    "let @xmath163 be the set of longest edges of _ cross chains _ in @xmath153 ( by lemma  [ lem : irreducible ] , each cross chain contributes with one or two edges ) .",
    "every weakly simple polygon has the following properties .    1 .",
    "[ cond : a4 ] polygon @xmath5 has no node - crossings ( cf .",
    "[ fig : forbidden](a ) ) .",
    "[ cond : a3 ] no edge in @xmath163 lies in the interior of any other edge of @xmath5 ( cf .",
    "[ fig : forbidden](b ) ) .",
    "we can test properties [ cond : a3][cond : a4 ] in @xmath0 time at preprocessing : for each bar , sort all edges by their endpoints , and compute @xmath163 ; and for each node , temporarily compute a node - expansion .",
    "if property [ cond : a3 ] or [ cond : a4 ] fails , we report that @xmath5 is not weakly simple .",
    "similarly , the operations introduced in section  [ sec : bars ] maintain properties [ cond : a1][cond : a4 ] for all maximal paths inside an elliptical disk @xmath70 .      as a preprocessing for spur elimination ( section  [ sec : tree - exp ] ) , we group all nodes that do not lie inside a bar into _ clusters_. after node - expansion  and new - bar - expansion , all such nodes lie on a boundary of a disk ( circular or elliptical ) . for every sober node @xmath33",
    ", we create @xmath164 clusters as follows .",
    "refer to fig .",
    "[ fig : newcluster ] .",
    "the node expansion has replaced @xmath33 with new nodes on @xmath44 .",
    "subdivide each segment in @xmath34 with two new nodes .",
    "for each node @xmath165 , form a cluster @xmath166 that consists of @xmath43 and all adjacent ( subdivision ) nodes inside @xmath34 .        for each node @xmath33 on the boundary of an elliptical disk @xmath70 , subdivide the unique edge outside @xmath70 incident to @xmath33 with a node @xmath167 .",
    "form a cluster @xmath168 containing @xmath33 and @xmath167 .",
    "every cluster will maintain the following invariants .    1 .",
    "* cluster invariants . * for every cluster @xmath169 : 2 .",
    "[ inv : tree ] @xmath169 induces a tree @xmath170 $ ] in the image graph rooted at @xmath33 .",
    "[ inv : max - path]every maximal path of @xmath5 in @xmath169 is of one of the following two types : 1 .",
    "both endpoints are at the root of @xmath170 $ ] and the path contains a single spur ; 2 .",
    "one endpoint is at the root , the other is at a leaf , and the path contains no spurs .",
    "additionally , each leaf node @xmath171 satisfies the following :    1 .",
    "[ inv : deg ] @xmath171 has degree one or two in the image graph of @xmath5 ; 2 .",
    "[ inv : no - spur ] there is no spur at @xmath171 ; 3 .",
    "[ inv : subdiv ] no edge passes through @xmath171 ( i.e. , there is no edge @xmath57 $ ] such that @xmath172 but @xmath173 ) .",
    "initially , every cluster trivially satisfies [ inv : tree ] and [ inv : max - path]a and every leaf node satisfies [ inv : deg][inv : subdiv ] since it originated from a subdivision .",
    "* dummy vertices . *",
    "although the operations described in sections [ sec : bars ] and [ sec : tree - exp ] introduce new nodes in the clusters , the image graph will always have @xmath7 nodes and segments .",
    "a vertex at a cluster node is called _ benchmark _ if it is a spur or if it is at a leaf node ; and _ dummy _ otherwise .",
    "paths traversing clusters may contain @xmath55 dummy vertices in the worst case , however we do not store these explicitly . by [ inv : tree ] ,",
    "[ inv : max - path ] and [ inv : no - spur ] a maximal path in a cluster can be uniquely encoded by one benchmark vertex : if it goes from a root to a spur at an interior node @xmath83 and back , we record only @xmath174 $ ] ; and if traverses @xmath170 $ ] from the root to a leaf @xmath171 , we record only @xmath175 $ ] .",
    "in this section we introduce three new ws - equivalent operations and show that they can eliminate all vertices from each bar independently ( thus eliminating all forks ) .",
    "the bar decomposition is pre - computed , and the bars remain fixed during this phase ( even though all edges along each bar are eliminated ) .",
    "we give an overview of the overall effect of the operations ( section  [ ssec : overview ] ) , define them and show that they are ws - equivalent ( sections  [ ssec : primitives][ssec : operations ] ) , and then show how to use these operations to eliminate all vertices from a bar ( section  [ ssec : phases ] ) .",
    "after preprocessing in section  [ sec : preprocess ] , we may assume that @xmath5 has no edge crossings , no node crossings , and satisfies [ cond : a1][cond : a3 ] .",
    "we summarize the overall effect of the bar simplification subroutine for a given expanded bar .            * changes in the image graph _",
    "g_. * refer to fig .",
    "[ fig : overview - g ] . all nodes in the interior of the ellipse @xmath70",
    "are eliminated .",
    "some spurs on @xmath98 are moved to new nodes in the clusters along @xmath99 .",
    "segments inside @xmath70 connect two leaves of trees induced by clusters .    * changes in the polygon _",
    "p_. * refer to fig .",
    "[ fig : overview - p ] . consider a maximal path @xmath155 in @xmath5 that lies in @xmath70 .",
    "the bar simplification will replace @xmath176 $ ] with a new path @xmath177 . by [ inv : no - spur]-[inv : subdiv ] , only nodes @xmath33 and @xmath43 in @xmath155 lie on @xmath99 .",
    "if @xmath155 is the concatenation of @xmath178 and @xmath179 , then @xmath177 will be a spur in the cluster containing @xmath33 ( fig .",
    "[ fig : overview - p ] ( a ) ) .",
    "if @xmath155 has no such decomposition , but its two endpoints are at the same node , @xmath180 , then @xmath177 will be a single edge connecting two leaves in the cluster containing @xmath33 ( fig .",
    "[ fig : overview - p ] ( b ) ) .",
    "if the endpoints of @xmath155 are at two different nodes , @xmath177 is an edge between two leaves of the clusters containing @xmath33 and @xmath43 resp .",
    "[ fig : overview - p ] ( c ) , ( d ) ) .",
    "the operations in section  [ ssec : operations ] rely on two basic steps , spur - reduction and node - split ( see fig .",
    "[ fig : primitives ] ) . together with merge  and subdivision , these operations are called _",
    "primitivesspur - reduction@xmath181 . *",
    "assume satisfying this assumption was called a _ base _ of segment @xmath36 . ]",
    "that every vertex at node @xmath33 has at least one incident edge @xmath182 $ ] .",
    "replace any path @xmath183 $ ] , with a single - vertex path @xmath184 $ ] .",
    "( see fig .",
    "[ fig : primitives ] , left . ) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ * node - split@xmath185 . * assume segments @xmath36 and @xmath186 are consecutive in radial order around @xmath43 , and not collinear with any adjacent segment ; and @xmath5 contains no spurs of the form @xmath183 $ ] or @xmath187 $ ] .",
    "create node @xmath188 in the interior of the wedge @xmath189 sufficiently close to @xmath43 ; and replace every path @xmath190 $ ] with @xmath191 $ ] .",
    "( see fig .  [",
    "fig : primitives ] , right . )",

    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    .",
    "right : node - split@xmath185 . ]",
    "the following two lemmas are generalization of the results in  @xcite[section 5 ] .",
    "[ lem : primitives1 ] operation spur - reduction is ws - equivalent .",
    "let @xmath6 be obtained from applying spur - reduction@xmath181 to @xmath5 .",
    "first suppose that @xmath5 is weakly simple .",
    "then , there exists a simple polygon @xmath192 . by [ cond : a2 ]",
    ", @xmath5 contains no path @xmath193 $ ] .",
    "then , every path @xmath194)$ ] has endpoints @xmath195 and @xmath196 in @xmath197 .",
    "replace each path of this form by a matching @xmath198 $ ] .",
    "let @xmath199 be the resulting polygon ; refer to fig .",
    "[ fig : primitives](left ) .",
    "since @xmath46 is simple , the convex hull of any path @xmath194)$ ] can only contain another path of the form @xmath194)$ ] , so @xmath199 is simple . by construction ,",
    "@xmath200 , and @xmath6 is weakly simple .",
    "now suppose @xmath6 is weakly simple .",
    "then there exists a simple polygon @xmath201 .",
    "the maximal paths of @xmath199 in the disk @xmath34 form a matching @xmath202 .",
    "let @xmath203 be the set of edges @xmath198 $ ] such that both endpoints are in @xmath204 .",
    "we successively `` regrow '' the edges in @xmath205 into a spur in the corridor @xmath35 to obtain a weakly simply polygon @xmath192 .",
    "the edges in @xmath206 each have an endpoint in @xmath207 , and they partition @xmath34 into _ faces _ that are each adjacent to @xmath35 .",
    "therefore , there exists a face @xmath208 whose border intersects @xmath207 and contains an edge @xmath198\\in m_u$ ] .",
    "choose an arbitrary connected component of @xmath209 , create two parallel edges in @xmath35 that have one endpoint in this connected component , and replace @xmath198 $ ] with a simple path containing the new edges .",
    "this is possible since the new edges appear sequentially in the linear order in @xmath35 . by construction",
    ", the resulting polygon is simple . by repeating this step until all edges in @xmath205",
    "are replaced by a spur in @xmath35 .",
    "we obtain a simple polygon @xmath49 , hence @xmath5 is weakly simple .",
    "[ lem : primitives2 ] operation node - split is ws - equivalent .",
    "let @xmath6 be obtained from @xmath5 via node - split@xmath185 .",
    "first assume that @xmath5 is weakly simple .",
    "then there is a simple polygon @xmath192 .",
    "since @xmath5 has no spurs @xmath183 $ ] or @xmath187 $ ] , every path @xmath210)$ ] has endpoints in @xmath204 and @xmath211 , resp .",
    "; see fig .",
    "[ fig : primitives](right ) .",
    "since @xmath46 is simple , the endpoints of the paths of this form have matching linear orders along @xmath204 and @xmath211 .",
    "replace the paths of this form @xmath210)$ ] by parallel paths via @xmath212 .",
    "since @xmath46 is simple , the convex hull of any path @xmath210)$ ] can only contain another path of the form @xmath210)$ ] , so @xmath199 is simple . by construction ,",
    "@xmath200 , and @xmath6 is weakly simple .",
    "now , assume that @xmath6 is weakly simple . since the face in the image graph bounded by @xmath213 is empty",
    ", we can change the embedding of the graph by bringing @xmath188 arbitrarily close to @xmath43 , maintaining weak simplicity .",
    "let @xmath214 be the distance between @xmath188 and @xmath43 .",
    "let @xmath201 be a simple polygon defined on disks of radius @xmath4 .",
    "then , @xmath199 is within @xmath215 frchet distance from @xmath5 and therefore @xmath5 is weakly simple .      we describe three operations : pin - extraction , v - shortcut , and l - shortcut . in section  [ ssec : phases ] , we show how to use them to eliminate spurs along any given bar @xmath98 .",
    "the pin - extraction  and v - shortcut  operations will eliminate pins and v - chains .",
    "chains in @xmath153 with two or more vertices in the interior of @xmath70 will be simplified incrementally , removing one vertex at a time , by the l - shortcut operation .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ * pin - extraction@xmath181 . *",
    "assumes that @xmath5 satisfies [ inv : tree][inv : subdiv ] and contains a pin @xmath216\\in { { \\mathcal pin}}$ ] . by [ inv : deg ] , node @xmath43 is adjacent to a unique node @xmath217 outside of @xmath70 . perform the following three primitives : ( 1 ) subdivision  of every path @xmath218 $ ] into @xmath219 $ ] ; ( 2 ) spur - reduction@xmath220 .",
    "( 3 ) spur - reduction@xmath221 .",
    "see fig .",
    "[ fig : pin - extraction ] for an examplev - shortcut@xmath222 .",
    "* assumes that @xmath5 satisfies [ inv : tree][inv : subdiv ] and @xmath223\\in { { \\mathcal v}}$ ] .",
    "furthermore , @xmath5 contains no pin of the form @xmath224 $ ] or @xmath225 $ ] , and no edge @xmath226 $ ] such that segment @xmath227 is in the interior of the wedge @xmath228 . by [ inv : deg ] , nodes @xmath229 and @xmath230 are each adjacent to unique nodes @xmath231 and @xmath232 outside of @xmath70 , respectively .",
    "the operation executes the following primitives sequentially : ( 1 ) node - split@xmath222 , which creates @xmath167 ; ( 2 ) node - split@xmath233 and node - split@xmath234 ; which create @xmath235 , respectively ; ( 3 ) merge  every path @xmath236 $ ] to @xmath237 $ ] .",
    "see fig .",
    "[ fig : shortcut ] for an example . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _            [ lem : pin - and - v ] pin - extraction and v - shortcut are ws - equivalent and maintain [ inv : tree][inv : subdiv ] .    * pin - extraction . * by construction , the operation maintains [ inv : tree][inv : subdiv ] . also , [ inv : deg][inv : subdiv ] ensure that spur - reduction@xmath220 in step ( 2 ) satisfies its preconditions .",
    "consequently , all three primitives are ws - equivalent",
    ".    * v - shortcut .",
    "* by construction , the operation maintains [ inv : tree][inv : subdiv ] .",
    "the first two primitives are ws - equivalent by lemma  [ lem : primitives2 ] .",
    "the third step is ws - equivalent because triangle @xmath238 is empty of nodes and segments , by assumption .    *",
    "l - shortcut operation . *",
    "the purpose of this operation is to eliminate a vertex of a path that has an edge along a given bar . before describing the operation",
    ", we introduce some notation ; refer to fig .",
    "[ fig : classify ] . for a node @xmath239 ,",
    "let @xmath240 be the set of paths @xmath241 $ ] in @xmath5 such that @xmath242 .",
    "each path in @xmath153 is either in @xmath243 , in @xmath244 or has two subpaths in some @xmath240 .",
    "recall that @xmath163 is the set of longest edges of cross chains in @xmath153 .",
    "denote by @xmath245 the set of paths @xmath241 $ ] , where @xmath145 $ ] is _ not _ in @xmath163 .    , @xmath244 , @xmath246 , @xmath247 , @xmath248 , and @xmath249 .",
    "]    we partition @xmath240 into four subsets ( refer to fig .  [",
    "fig : classify ] ) : a path @xmath241\\in l_v$ ] is in    1 .",
    "@xmath246 ( _ top - right _ ) if @xmath43 is a _",
    "vertex and @xmath250 ; 2 .",
    "@xmath247 ( _ top - left _ ) if @xmath43 is a _",
    "vertex and @xmath251 ; 3 .",
    "@xmath248 ( _ bottom - right _ ) if @xmath43 is a _",
    "vertex and @xmath250 ; 4 .",
    "@xmath249 ( _ bottom - left _ ) if @xmath43 is a _ bottom _",
    "vertex and @xmath250 .",
    "we partition @xmath252 into four subsets analogously .",
    "we define the operation l - shortcut for paths in @xmath246 ; the definition for the other subsets can be obtained by suitable reflections .        _",
l - shortcut@xmath253 . *",
    "assume that @xmath5 satisfies [ inv : tree][inv : subdiv ] , @xmath239 and @xmath254 .",
    "by [ inv : deg ] , @xmath43 is adjacent to a unique node @xmath255 and to a unique node @xmath256 .",
    "let @xmath257 denote the set of all nodes @xmath137 for which @xmath241\\in l_v^{tr}$ ] .",
    "let @xmath258 and @xmath259 be the leftmost and rightmost node in @xmath257 , respectively .",
    "further assume that @xmath5 satisfies :    1 .",
    "[ cond : b1 ] no pins of the form @xmath260 $ ] ; 2 .",
    "[ cond : b2 ] no edge @xmath261 $ ] such that segment @xmath262 is in the interior of the wedge @xmath263 ; 3 .",
    "[ cond : b3 ] no edge @xmath264 $ ] such that @xmath265 is a top vertex and @xmath266 , @xmath267 .    do the following ( see fig .",
    "[ fig : spur - simplification ] for an example ) .    1 .",
    "create a new node @xmath268 to the right of @xmath43 sufficiently close to @xmath43 .",
    "[ phase1 ] for every path @xmath241\\in l_v^{tr}$ ] where @xmath150 is the _ only _ longest edge of a cross chain , create a crimp by replacing @xmath145 $ ] with @xmath269 $ ] .",
    "[ phase2 ] replace every path @xmath270 $ ] by @xmath271 $ ] .",
    "[ phase3 ] replace every path @xmath272 $ ] , where @xmath273 , by @xmathsee fig .  [",
    "fig : spur - simplification - diff ] for an explanation of why l - shortcut requires conditions [ cond : b2][cond : b3 ] and phase [ phase1 ] of the operation .",
    "if we omit any of these conditions , l - shortcut would not be ws - equivalent .",
    "has a pin @xmath260 $ ] not satisfying [ cond : b2 ] .",
    "top right : @xmath5 does not satisfy [ cond : b3 ] .",
    "bottom : the operation skips phase [ phase1 ] . ]",
    "[ rem : sequence]note that l - shortcut@xmath253 may create a pin @xmath275 $ ] or a v - chain @xmath276 $ ] , which can immediately be extracted and shortcut , respectively . if @xmath277 , then every path @xmath278\\in l_v^{tr}$ ] , @xmath279 becomes @xmath280\\in l_{v^*}^{tl}$ ] .",
    "we can perform l - shortcut@xmath281 , since conditions ( s2)-(s3 ) are fulfilled .",
    "consequently , a sequence of pin - extraction , v - shortcut , and l - shortcut operations eliminates _ all _ top - right paths in @xmath246 .",
    "[ lem : spur - simplification ] l - shortcut  is ws - equivalent and it maintains [ inv : tree][inv : subdiv ] .",
    "let @xmath62 be the polygon obtained from @xmath5 after phase  [ phase1 ] of l - shortcut@xmath253 .",
    "similarly , let @xmath63 and @xmath282 be the polygons obtained after phase  [ phase2 ] and [ phase3 ] , respectively .",
    "note that phase [ phase1 ] of the operation only creates crimps , and it is ws - equivalent by  @xcite .",
    "let @xmath283 be the set of edges @xmath145 $ ] where @xmath273 .",
    "phases [ phase2][phase3 ] are equivalent to the concatenation of the primitives : subdivision , node - split , and merge .",
    "specifically , phase  [ phase2 ] is equivalent to subdividing every edge in @xmath283 into @xmath284 $ ] , where @xmath285 , and applying node - split@xmath286 ( which creates @xmath287 ) to @xmath63 .",
    "phase  [ phase3 ] consists of node - split@xmath288 ( which creates @xmath188 ) , and merging every path @xmath289 $ ] to @xmath290 $ ] .",
    "the only primitive that may not satisfy its preconditions is node - split@xmath286 : segment @xmath291 may be collinear with several segments of @xmath98 , and @xmath63 may contain spurs that overlap with @xmath291 . we show that the spurs that may overlap with @xmath291 do not pose a problem , and we can essentially repeat the proof of lemma  [ lem : primitives2 ] .",
    "it remains to show that @xmath62 is weakly simple iff @xmath63 is weakly simple .",
    "assume that @xmath62 is weakly simple and @xmath292 .",
    "the above - below relationship among edges that contain segment @xmath291 determines a linear order .",
    "we claim that there exists a simple polygon @xmath293 such that every edge in @xmath283 lies above all edges that are not in @xmath283 and overlap with @xmath291 .",
    "let @xmath68 be an arbitrary simple polygon in @xmath294 .",
    "let @xmath295 be the set of edges that are not in @xmath283 but lie above some edge in @xmath283 . due to  [ cond : b2 ] and [ cond : b3 ] , @xmath295 can only contain edges of the form @xmath296 $ ] where @xmath297 , otherwise @xmath68 would not be simple .",
    "let @xmath298 $ ] , @xmath299 , be the lowest edge in @xmath98 that is adjacent to some edge in @xmath283 ( shown in blue in fig .",
    "[ fig : reshuffling ] ) . due to",
    "[ cond : a1 ] , the right endpoint @xmath142 is incident to an edge in @xmath283 , and we have @xmath300 .",
    "we have @xmath301 either by property [ cond : a2 ] or by a crimp introduced in phase  [ phase1 ] .",
    "subdivide every edge @xmath296\\in z$ ] into a path @xmath302 $ ] if @xmath303 .",
    "leave the right edge of the path , @xmath304 $ ] , in the original position ; and reroute the left edge @xmath305 $ ] to a new position below @xmath306 , maintaining the linear order among these edges .",
    "we obtain a polygon @xmath293 .",
    "we need to show that this modification does not introduce crossings in the perfect matchings in the disks @xmath34 .",
    "the modification affects matching only in the nodes @xmath307 ( inclusive ) . in the disk at @xmath308",
    ", we modify the matching such that the new edges do not cross any surviving edges by the choice of @xmath306 . in the disk at all the other affected nodes , the new edges are immediately below @xmath306 in the original linear order .",
    "therefore , @xmath309 is a simple polygon , which proves our claim .",
    "we can proceed as in the proof of lemma  [ lem : primitives2 ] to show that @xmath63 is a weakly simple iff @xmath62 is weakly simple , that is , phase  [ phase2 ] is ws - equivalent .",
    "note that the intermediate polygons , @xmath62 and @xmath63 , may violate conditions [ cond : a1 ] and [ cond : a2 ] , since phase  [ phase1 ] introduces crimps and phase  [ phase2 ] subdivides edges .",
    "however , after phase [ phase3 ] , conditions [ cond : a1 ] and [ cond : a2 ] are restored , and operation l - shortcut maintains [ cond : a1][cond : a3 ] in the ellipse @xmath70 .",
    "is weakly simple , we can change the linear order of the edges as shown . ]      in this section , we show that the three operations ( pin - extraction , v - shortcut , and l - shortcut ) can successively remove all spurs of the polygon @xmath5 from a bar @xmath98 .",
    "algorithm bar - simplification@xmath310 . +",
    "while @xmath5 has an edge along @xmath98 , perform one operation as follows .    1",
    ".   [ step - i ] if @xmath311 , pick an arbitrary pin @xmath216 $ ] and perform pin - extraction@xmath181 .",
    "[ step - ii ] else if @xmath312 , then let @xmath223\\in { { \\mathcal v}}$ ] be a path where @xmath313 is minimal , and perform v - shortcut@xmath222 .",
    "[ step - iii ] else if there exist @xmath239 such that @xmath314 , do : 1 .",
    "[ step - iiia ] let @xmath43 be the rightmost node where @xmath254 .",
    "[ step - iiib ] if @xmath315 for all @xmath109 , @xmath316 and @xmath317 , where @xmath318 is the unique neighbor of @xmath105 on @xmath98 , do l - shortcut@xmath253 .",
    "[ step - iiic ] else let @xmath105 be the leftmost node such that @xmath316 and @xmath319 .",
    "if @xmath320 satisfies [ cond : b3 ] do l - shortcut@xmath321 , otherwise halt and report that @xmath5 is not weakly simple .",
    "[ step - iv ] else if there exist @xmath239 such that @xmath322 , repeat steps  [ step - iiia][step - iiic ] with left ",
    "right and @xmath323@xmath324 interchanged .",
    "( notice the use of @xmath240 instead of @xmath252 .",
    "same applies to ( vi ) ) .",
    "[ step - v ] else if there exist @xmath239 such that @xmath325 , repeat steps  [ step - iiia][step - iiic ] using @xmath326 and @xmath327 in place of @xmath323 and @xmath324 , resp . , and",
    "left - right interchanged .",
    "[ step - vi ] else if there exist @xmath239 such that @xmath328 , repeat steps  [ step - iiia][step - iiic ] using @xmath327 and @xmath326 in place of @xmath323 and @xmath324 , resp .",
    "after the loop ends , perform old - bar - expansion  ( cf . section  [ ssec : bar - expansion ] ) in the ellipse @xmath70 ; + return @xmath5 ( end of algorithm ) .",
    "+ informally , bar - simplification `` unwinds '' each polygonal chain in the bar , while extracting pins and v - chains as they appear , by alternating between steps to ( see fig .",
    "[ fig : cross - lifecycle ] ) . note that step   uses @xmath329 ( instead of @xmath330 ) to avoid an infinite loop .    , [ step - iii ] , [ step - iv ] , and [ step - vi ] . ]",
    "[ lem : simplfication - existance ] the operations performed by bar - simplification@xmath310 are ws - equivalent , and maintain properties [ cond : a1][cond : a3 ] and [ inv : tree][inv : subdiv ] inside @xmath70 .",
    "the algorithm either removes all nodes from the ellipse @xmath70 , or reports that @xmath5 is not weakly simple .",
    "the l - shortcut operations performed by the algorithm create at most two crimps in each cross - chain in @xmath153 .",
    "we show that the algorithm only uses operations that satisfy their preconditions , and reports that @xmath5 is not weakly simple only when @xmath5 contains a forbidden configuration .    * steps  [ step - i][step - ii ] . *",
    "since every pin can be extracted from a polygon satisfying [ inv : tree][inv : subdiv ] , we may assume that @xmath331 .",
    "suppose that @xmath312 .",
    "let @xmath223\\in { { \\mathcal v}}$ ] be a v - chain such that @xmath313 is minimal .",
    "since @xmath331 , the only obstacle for the precondition is an edge @xmath226 $ ] such that segment @xmath227 is in the interior of the wedge @xmath228 ( or else the image graph would have a crossing ) .",
    "this edge is part of a path @xmath332 $ ] .",
    "node @xmath333 must be on @xmath99 between @xmath229 and @xmath230 , otherwise there would be a node - crossing at @xmath33 , contrary to [ cond : a4 ] .",
    "however , @xmath334 , otherwise @xmath332 $ ] would be a pin .",
    "consequently , @xmath332 $ ] is a v - chain where @xmath335 , contrary to the choice of @xmath223\\in { { \\mathcal v}}$ ] .",
    "this confirms that v - shortcut@xmath222 satisfies all preconditions .",
    "henceforth , assume that @xmath331 and @xmath336 .",
    "* step  [ step - iii][step - iv ] .",
    "* by symmetry , we consider only step  [ step - iii ] .",
    "we distinguish between two cases .",
    "* case  1 : the conditions of [ step - iiib ] are satisfied .",
    "* we need to show that l - shortcut@xmath253 satisfies [ cond : b1][cond : b3 ] .",
    "since @xmath331 , condition [ cond : b1 ] is met .",
    "suppose there is an edge @xmath261 $ ] such that segment @xmath262 is in the interior of the wedge @xmath337 . clearly , @xmath265 is a top node",
    ". then edge @xmath261 $ ] is part of a path @xmath338 $ ] .",
    "however , @xmath333 must be in the closed wedge @xmath339 otherwise there would be a node - crossing at @xmath140 , contrary to [ cond : a4 ] .",
    "also , @xmath333 can not be a top vertex on @xmath99 since @xmath340 , and @xmath333 can not be on @xmath98 by the choice of node @xmath43 .",
    "this confirms [ cond : b2 ] .",
    "we argue similarly for [ cond : b3 ] .",
    "suppose there is an edge @xmath264 $ ] such that @xmath265 is a top vertex and @xmath266 , @xmath267 .",
    "this edge is part of a path @xmath341 $ ] .",
    "node @xmath342 must be on or above @xmath98 , otherwise there would be a node - crossing at @xmath333 .",
    "it can not be a top vertex , since @xmath340 .",
    "it can not be to the left of @xmath333 , otherwise the conditions of [ step - iiib ] are satisfied ; and it can not be to the right of @xmath333 , otherwise @xmath343 with @xmath344 , contrary to the choice of @xmath43 .",
    "this confirms that l - shortcut@xmath253 satisfies [ cond : b2]-[cond : b3 ] and can be performed .",
    "* case  2 : the conditions of [ step - iiib ] are not satisfied .",
    "* let the path @xmath345\\in l_{v'}^{tl}$ ] be selected in l - shortcut@xmath321 by the algorithm .",
    "conditions [ cond : b1][cond : b2 ] are satisfied similar to case  1 .",
    "if [ cond : b3 ] fails , there is an edge @xmath264 $ ] such that @xmath265 is a top vertex and @xmath266 , @xmath346 ( recall that left and right are interchanged in @xmath347 ) .",
    "edge @xmath264 $ ] is part of a path @xmath341 $ ] , where @xmath348 , similar to case  1 .",
    "this implies @xmath341\\in l_p^{tr}\\cup l_p^{tl}$ ] .",
    "if @xmath349 , then either @xmath343 , which contradicts the choice of @xmath43 , or @xmath350 , which contradicts the choice of @xmath105 . consequently , @xmath351 .",
    "this implies @xmath352 , so the paths @xmath353 $ ] and @xmath354 $ ] form a forbidden configuration described in corollary  [ cor : forbidden](2 ) ; see also fig .",
    "[ fig : forbidden](b )",
    ". therefore the algorithm correctly finds that @xmath5 is not weakly simple .    * steps  [ step - v][step - vi ] . * if steps  [ step - i][step - iv ] do not apply , then @xmath355 .",
    "that is , for every path @xmath241\\in l^{tr}$ ] , we have @xmath145\\in m_{cr}$ ] . in particular , there are no top chains .",
    "the operations in [ step - v][step - vi ] do not change these properties .",
    "consequently , once steps  [ step - v][step - vi ] are executed for the first time , steps  [ step - iii][step - iv ] are never executed again . by a symmetric argument , steps  [ step - v][step - vi ] eliminate all paths in @xmath356 . if the while loop terminates , every edge in @xmath98 is necessarily in @xmath163 and @xmath357 .",
    "consequently , by lemma  [ lem : irreducible ] , @xmath98 contains no spurs and old - bar - expansion  is ws - equivalent .",
    "this operation eliminates all nodes in the interior of @xmath70 .    *",
    "* each pin - extraction and v - shortcut operation reduces the number of vertices of @xmath5 within @xmath70 .",
    "operation l - shortcut@xmath358 , @xmath359 , either reduces the number of interior vertices , or produces a crimp if edge @xmath145 $ ] is a longest edge of a cross - chain . for termination , is enough to show that , for each cross - chain @xmath360 , the algorithm introduces a crimp at most once in steps  [ step - iii][step - iv ] , and at most once in steps  [ step - v][step - vi ] . without loss of generality ,",
    "consider step  [ step - iii ] .",
    "we apply an l - shortcut in two possible cases .",
    "we show that it does not introduce crimps in case  2 . in step  [ step - iiic ]",
    ", we only perform l - shortcut@xmath321 if [ cond : b3 ] is satisfied and @xmath317 .",
    "so for all @xmath361\\in l_{v'}^{tl}$ ] , we have @xmath362 .",
    "suppose , for contradiction , that @xmath363 $ ] is the only longest edge of some cross chain ( and hence l - shortcut would introduce a crimp ) .",
    "then , @xmath363\\in m_{cr}$ ] is inside @xmath364 $ ] , contradicting [ cond : a3 ] .",
    "consider case  1 .",
    "notice that l - shortcut@xmath253 is executed only if there exists a top node @xmath155 with @xmath365 such that @xmath366 .",
    "suppose that l - shortcut@xmath253 introduces a crimp in the path @xmath241\\in l_v^{tr}$ ] .",
    "this operation removes this subpath of a cross chain from @xmath246 , but introduces @xmath367 $ ] into @xmath368 . by the time the algorithm executes l - shortcut@xmath369 , we know that for every top vertex @xmath155 with @xmath365 , @xmath370",
    "this implies that , after l - shortcut@xmath369 is performed , although a path @xmath371 $ ] is introduced in @xmath372 , operation l - shortcut@xmath373 can never be performed .",
    "the same arguments apply to steps  [ step - v][step - vi ] .",
    "[ lem : simplfication - time ] algorithm * bar - simplification*@xmath310 takes @xmath374 time , where @xmath375 is the number of vertices in @xmath98 .",
    "operations pin - extraction , v - shortcut , and l - shortcut each make @xmath376 changes in the image graph .",
    "operations pin - extraction and v - shortcut decrease the number of vertices inside @xmath70 .",
    "each l - shortcut does as well , but they may jointly create @xmath377 crimps , by lemma  [ lem : spur - simplification ] .",
    "so the total number of operations is @xmath378 .",
    "when @xmath241\\in l_v^{tr}$ ] and @xmath285 , l - shortcut replaces @xmath241 $ ] by @xmath379 $ ] : vertex @xmath380 $ ] shifts to @xmath381 $ ] , but no vertex is eliminated . in the worst case ,",
    "one l - shortcut  modifies @xmath382 paths , so in @xmath382 operations the total number of vertex shifts is @xmath383 .",
    "our implementation does not maintain the paths in @xmath153 explicitly .",
    "instead , we use set operations . we maintain the sets @xmath243 , @xmath244 , and @xmath384 , with @xmath239 and @xmath385 , in sorted lists .",
    "the pins @xmath216\\in { { \\mathcal pin}}$ ] are sorted by @xmath386 ; the wedges @xmath223\\in { { \\mathcal v}}$ ] are sorted by @xmath313 . in every set @xmath384 ,",
    "the first two nodes in the paths @xmath241\\in l_v^x$ ] are the same by [ inv : no - spur ] , and so it is enough to store vertex @xmath381 $ ] ; these vertices are stored in a list sorted by @xmath387 .",
    "we also maintain binary variables to indicate for each path @xmath241\\in l_v^x$ ] whether it is part of a cross chain , and whether @xmath145 $ ] is the only longest edge of that chain .",
    "steps  [ step - i]-[step - ii ] remove pins and v - chains , taking linear time in the number of removed vertices , without introducing any path in any set . consider l - shortcut@xmath253 , executed in one of steps  [ step - iii][step - iv ] which can be generalized to other occurrences of the l - shortcut  operation .",
    "the elements @xmath388\\in l_v^{tr}$ ] are simplified to @xmath290 $ ] . for each of these paths , say that the next edge along @xmath5 is @xmath389 $ ] .",
    "then , the paths @xmath390 $ ] are inserted into either @xmath391 , if @xmath392 is a top vertex , or @xmath368 if @xmath393 .",
    "we can find each chain @xmath388\\in l_v^{tr}$ ] , in @xmath376 time , since @xmath246 is sorted by @xmath387 .",
    "finally , all other paths @xmath241\\in l_v^{tr}$ ] , where @xmath285 , become @xmath379 $ ] and they form the new set @xmath394 . since we store only the last vertex @xmath381 $ ] , which is unchanged , we create @xmath394 at no cost .",
    "this representation allows the manipulation of @xmath378 vertices with one set operation .",
    "the number of insert and delete operations in the sorted lists is proportional to the number of vertices that are removed from the interior of @xmath70 , which is @xmath378 .",
    "each insertion and deletion takes @xmath395 time , and the overall time complexity is @xmath374 .",
    "after bar - simplification ( section  [ sec : bars ] ) , we obtain a polygon that has no forks and every spur is at an interior node of some cluster ( formed on the boundary of some ellipse @xmath396 . in the absence of forks ,",
    "we can decide weak simplicity using  @xcite[theorem 5.1 ] , but a nave implementation runs in @xmath2 time : successive applications of spur - reductions would perform an operation at each dummy vertex . in this section ,",
    "we show how to eliminate spurs in @xmath0 time .",
    "* formation of groups .",
    "* we create _ groups _ by gluing pairs of clusters with adjacent roots together .",
    "in the course of our algorithm , an analogue of the pin - extraction operation will extract a spur from one group into an `` adjacent '' group .",
    "this requires a well - defined adjacency relation between groups .",
    "recall that by [ inv : tree ] each cluster induces a tree .",
    "we also modify the image graph , transforming each tree into a binary tree using ws - equivalent primitives . for each node @xmath83 with more than two children , let @xmath397 and @xmath398 be the first two children in counterclockwise order .",
    "create new nodes @xmath399 and @xmath400 by subdivision  in @xmath401 and @xmath402 , respectively , and create a segment @xmath403 . use the inverse of node - split  to merge nodes @xmath399 and",
    "@xmath400 into a node @xmath404 , reducing the number of children of @xmath83 by one .    by construction , if a segment @xmath36 connects nodes in different clusters , both @xmath33 and @xmath43 are leaves or both are root nodes . for",
    "every pair of clusters , @xmath169 and @xmath166 , with adjacent roots , @xmath33 and @xmath43 , create a _ group _ @xmath405 ; see fig  [ fig : groups ] . by construction ,",
    "the groups are pairwise disjoint .",
    "two groups are called _ adjacent _ if they have two adjacent leaves in the image graph .    , containing clusters @xmath169 and @xmath166 .",
    "leaf nodes are shown as black dots . ]",
    "recall that a maximal path in each cluster is represented by benchmark vertices ( leaves and spurs ) .",
    "we denote by @xmath406 $ ] ( using semicolons ) a maximal path inside a group defined by the benchmark vertices @xmath407 . for",
    "a given group @xmath408 , let @xmath153 denote the set of maximal paths with vertices in @xmath408 ; and let @xmath409 be the set of subpaths in @xmath153 between consecutive benchmark vertices .",
    "[ rem : groups ] by invariants [ inv : tree ] , [ inv : max - path ] and [ inv : no - spur ] , a path in @xmath153 of a group @xmath408 has alternating benchmark vertices between @xmath169 and @xmath166 .",
    "consequently , every path in @xmath409 has one endpoint in @xmath169 and one in @xmath166 , and each spur in @xmath408 is incident to two paths in @xmath409 .    * spur - elimination algorithm . *",
    "assume that @xmath410 is a partition of the nodes of the image graph into groups satisfying [ inv : tree][inv : subdiv ] .",
    "we consider one group at a time , and eliminate all spurs from one cluster of that group .",
    "when we process one group , we may split it into two groups , create a new group , or create a new spur in an adjacent group ( similar to pin - extraction in section  [ sec : bars ] ) .",
    "the latter operation implies that we may need to process a group several times .",
    "termination is established by showing that each operation reduces the total number of benchmark vertices ( i.e. , spurs and boundary vertices ) .",
    "initially , the number of benchmarks is @xmathalgorithm spur - elimination@xmath411 . + while @xmath5 contains a spur , do :    1 .",
    "choose a group @xmath412 that contains a spur , w.l.o.g .",
    "contained in cluster @xmath169 and compute its supporting data structures .",
    "while @xmath170 $ ] contains an interior node , do : 1 .   [",
    "step : merge ] if @xmath33 contains no spurs and is incident to only two edges @xmath36 and @xmath413 , eliminate @xmath33 with a merge operation .",
    "the node @xmath217 becomes the new root of the tree @xmath170 $ ] .",
    "[ step : low ] if @xmath33 contains spurs , eliminate them as described in section  [ ssec : low ] .",
    "[ step : split ] if @xmath33 contains no spurs , split @xmath408 into two groups along a chain of segments that contains @xmath36 as described in section  [ ssec : split ] . rename a largest resulting group to @xmath408 .",
the detailed description of steps  [ step : low ] and [ step : split ] are in sections  [ ssec : low ] and [ ssec : split ] , respectively .",
    "we first present supporting data structures in sections  [ ssec : data ] , and then analyze the algorithm in section  [ ssec : time ] .",
    "consider a group @xmath408 composed of two trees @xmath170 $ ] and @xmath414 $ ] rooted at @xmath33 and @xmath43 , respectively . recall that @xmath409 denotes the set of benchmark - to - benchmark paths , each with one benchmark in @xmath170 $ ] and one in @xmath414 $ ] . in the algorithm spur - elimination ,",
    "we dynamically maintain the image trees @xmath170\\cup t[v]$ ] , and the set of paths @xmath409 .    in each group @xmath408",
    ", we maintain only @xmath415 nodes that contain benchmark vertices or have degree higher than 2 .",
    "dummy nodes of degree-2 that contain no benchmark vertices are redundant for the combinatorial representation , and will be eliminated with merge operations . however , a polyline formed by a chain of dummy nodes of degree-2 can not always be replaced by a straight - line segment ( this might introduce artificial crossings ) .",
    "for this reason , we maintain the trees @xmath170 $ ] and @xmath414 $ ] as _ ordered trees _",
    ", recording only the circular order of the segments around each node .    the partition of a group into two groups will be driven by the partition of the paths in @xmath409 . for a set @xmath416 of benchmark - to - benchmark paths ,",
    "we define a subtree @xmath417 induced by @xmath418 as follows .",
    "let @xmath419 be the set of nodes that contain endpoints of some path in @xmath409 .",
    "the tree @xmath417 is obtained in two steps : take the minimum subtree of @xmath170\\cup t[v]$ ] that contains all nodes in @xmath420 , and then merging all nodes of degree two that are not in @xmath420 .",
    "in particular , the nodes of @xmath417 include @xmath420 and the least common ancestor of any two nodes in @xmath421 and in @xmath422 , respectively .",
    "denote by @xmath423 the _ lowest common ancestor _ of nodes @xmath342 and @xmath83 in @xmath170 $ ] ( resp .",
    ", @xmath414 $ ] ) .        for the image graph of @xmath408 , we maintain the following data structures .",
    "* we store trees @xmath170 $ ] and @xmath414 $ ] each using the dynamic data structure of  @xcite , which supports @xmath376-time insertion and deletion of leaves , merging interior nodes of degree 2 , subdivision of edges , and lowest common ancestor queries . * for purposes of discussion ,",
    "imagine that @xmath408 is inside an axis - aligned rectangle with the leaves of @xmath170 $ ] along the top edge and leaves of @xmath414 $ ] along the bottom edge ( see fig .  [",
    "f : tree - cross - geom ] ) . for each tree",
    ", we maintain a left - to - right euler tour in an order - maintenance data structure @xcite , which supports insertions immediately before or after an existing item , deletions , and precedence queries , each in @xmath376 amortized time .",
    "for any node @xmath217 , let @xmath424 and @xmath425 respectively denote the first and last occurrences of @xmath217 in the euler tour .",
    "we refer to the elements of the euler tour as _",
    "tokens_. we write @xmath426 to denote that some token @xmath427 occurs before ( `` to the left of '' ) another token @xmath428 in their common euler tour . * we also maintain the cyclic list of all leaves of the tree @xmath170\\cup t[v]$ ] ( in the order determined by the euler tour above ; note that we have @xmath429 for a leaf @xmath217 ) .",
    "we now describe dynamic data structures for @xmath153 and @xmath409 . for every benchmark - to - benchmark path @xmath430\\in { { \\mathcal b}}$ ] , we assume that @xmath83 is in @xmath170 $ ] and @xmath431 is in @xmath414 $ ] .",
    "a path @xmath430 $ ] is associated with the intervals @xmath432 $ ] and @xmath433 $ ] . for two consecutive benchmark - to - benchmark paths @xmath434 $ ] , where @xmath431 is in @xmath414 $ ]",
    ", we define the interval @xmath435=[s_1^\\flat , s_2^\\flat]$ ] .",
    "* the set of benchmark - to - benchmark paths @xmath430\\in { { \\mathcal b}}$ ] is stored in four lists , sorted by @xmath436 , @xmath437 , @xmath438 , and @xmath439 , respectively .",
    "the sorted lists can be computed in @xmath415 time by an eulerian traversal of the tree . * for each node @xmath83 of @xmath170 $ ] , let @xmath440 denote the set of paths @xmath430 \\in { { \\mathcal b}}$ ] .",
    "we store @xmath440 in two lists , sorted by @xmath438 and @xmath439 , respectively . * an _ interval tree _ for all intervals",
    "@xmath435 $ ] that can report , for a query node @xmath333 , all intervals containing @xmath333 in @xmath441 time .",
    "all data structures described in this section can be constructed in @xmath415 preprocessing time .",
    "* crossing paths . *",
    "the data structure described above can determine in @xmath376 time whether two paths in @xmath409 cross .",
    "straightforward case analysis implies the following characterization of path crossings ( refer to fig .",
    "[ f : tree - cross - geom ] ) .",
    "[ lem : path - crossing ] let @xmath83 and @xmath33 be arbitrary nodes in tree @xmath442 , and let @xmath431 and @xmath43 be arbitrary nodes in @xmath443 .",
    "paths @xmath430 $ ] and @xmath444 $ ] cross if and only if either ( 1 ) @xmath445 and @xmath446 , or ( 2 ) @xmath447 and @xmath448 .      we describe step  [ step : low ] of algorithm  _ spur - elimination_. suppose that the root node @xmath33 contains a spur",
    ". the following operation eliminates all spurs from @xmath33 , but the resulting cluster @xmath166 need not satisfy [ inv : max - path ] and [ inv : no - spur ] , and we need to perform other operations to restore these properties . refer to fig .",
    "[ fig : spur - shortcut](a)(b ) for an examplespur - shortcut@xmath449 .",
    "assume that @xmath408 satisfies invariants [ inv : tree][inv : subdiv ] , and @xmath33 contains a spur .",
    "replace every path @xmath450 $ ] by @xmath451 $ ] .",
    "let @xmath452 be the set of all such modified paths .",
    "_ _ _ _ _ _ _ _ _ _ _",
spur - shortcut   is ws - equivalent and maintains properties [ inv : tree ] , [ inv : deg ] and [ inv : subdiv ] .",
    "the operation is equivalent to a sequence of spur - reduction operations : first perform spur - reduction@xmath181 . in a bfs traversal of all nodes @xmath427 of @xmath414",
    "$ ] , except for the root , perform spur - reduction@xmath453 .",
    "all these operations satisfy spur - reduction s constraints .",
    "initially , every path through the node @xmath427 has an edge in the segment @xmath454 , by [ inv : max - path ] .",
    "the bfs traversal ensures that this property still holds when the algorithm performs spur - reduction@xmath453",
    ".     contain spurs .",
    "( b ) after eliminating spurs , @xmath414 $ ] does not satisfy [ inv : max - path ] .",
    "( c ) the analogues of pin - extraction and v - shortcut . ]    note that for every path @xmath450 $ ] , both @xmath455 and @xmath456 are in @xmath414 $ ] ( cf .  remark  [ rem : groups ] ) and the path @xmath451 $ ] is uniquely defined by [ inv : tree ] .",
    "however , the paths @xmath451\\in { { \\mathcal s}}$ ] violate [ inv : max - path ] or [ inv : no - spur ] .",
    "we proceed with a sequence of `` repair '' steps to restore them , after which the total number of benchmark vertices decrease by at least @xmath457 .",
    "the repair steps are fairly easy when @xmath455 and @xmath456 are in ancestor - descendent relation , that is , @xmath458 .",
    "let @xmath459 denote the node in @xmath460 farther from the root .",
for every path @xmath451\\in { { \\mathcal s}}$ ] , do    1 .",
    "[ step : trivi1 ] if @xmath458 and @xmath461 , then replace @xmath451 $ ] with @xmath462 $ ] .",
    "[ step : trivi2 ] if @xmath463 , and @xmath455 is not a leaf of @xmath414 $ ] , then replace @xmath451 $ ] with @xmath464 $ ] .",
    "[ step : pin ] if @xmath463 , and @xmath455 is a leaf of @xmath414 $ ] , then do : by [ inv : deg ] , node @xmath455 is adjacent to a unique node @xmath465 . subdivide segment @xmath466 with a new node @xmath467 ( added to the cluster containing @xmath468 ) , subdivide every edge @xmath469 $ ] into @xmath470 $ ] , and then replace every path @xmath471 $ ] with @xmath472 $ ] .",
    "see fig .",
    "[ fig : spur - shortcut](b)(c ) for an example .",
these steps restore [ inv : max - path ] and [ inv : no - spur ] for the affected paths @xmath451\\in { { \\mathcal s}}$ ] , and are ws - equivalent : steps  [ step : trivi1][step : trivi2 ] do not modify the polygon ( they change only the benchmarks ) ; and step  [ step : pin ] is analogous to pin - extraction@xmath473 .",
    "we are left with paths @xmath451\\in { { \\mathcal s}}$ ] where @xmath455 and @xmath456 are in different branches of @xmath414 $ ] . in this case , we perform an elaborate version of the v - shortcut operation , that creates a new group . for every node @xmath171 of @xmath414 $ ] , let @xmath474 be the set of paths @xmath451\\in { { \\mathcal s}}$ ] such that @xmath475 .",
    "consider every node @xmath171 of @xmath414 $ ] where @xmath476 in a bottom - up traversal of @xmath414 $ ] ; and create a new group @xmath477 as follows ( refer to fig .",
    "[ fig : spur - shortcut ] ) .",
    "let @xmath478 ( resp . ,",
    "@xmath479 ) be the set of nodes @xmath455 ( resp . , @xmath456 ) such that there is a path @xmath451\\in { { \\mathcal s}}_\\ell$ ] , and @xmath455 is in the left ( resp .",
    ", right ) subtree of @xmath171 .",
    "let @xmath480 .",
    "sort the nodes @xmath481 by @xmath482 , and let @xmath483 be the minimum node ; and similarly sort the nodes @xmath484 by @xmath485 , and let @xmath486 be the maximum node .",
    "since all nodes in @xmath420 are descendants of @xmath171 in @xmath414 $ ] , we have @xmath487 for all @xmath481 and @xmath488 for all @xmath484 .",
    "[ lem : group - crossing ] if there is a path @xmath430\\in { { \\mathcal b}}\\setminus { { \\mathcal s}}_\\ell$ ] such that @xmath489 and @xmath490 , then it crosses some path in @xmath474 , hence @xmath5 is not weakly simple .",
    "let @xmath491 be the path between @xmath483 and @xmath486 in @xmath414 $ ] . by the choice of @xmath171 ( in a bottom - up traversal of @xmath414 $ ] )",
    ", we have @xmath492 for all descendants of @xmath171",
    ". then @xmath430 $ ] reaches @xmath491 at some interior node @xmath493 , and then continues to @xmath171 and farther to @xmath494 . if @xmath495 is in a left ( resp .",
    ", right ) subtree of @xmath171 , then @xmath430 $ ] crosses every path in @xmath474 that starts at @xmath483 ( resp .",
    ", ends at @xmath496 .",
    "we can find the set @xmath497 of nodes @xmath431 such that @xmath489 and @xmath490 in @xmath498 time , by lowest common ancestors queries from the leaves between @xmath483 and @xmath486 .",
    "the algorithm halts and reports that the input polygon is not weakly simple if some node in @xmath497 have a path satisfying lemma  [ lem : group - crossing ] .",
    "we can now assume that @xmath499 .",
    "the nodes in @xmath420 induce a binary tree , denoted @xmath500 $ ] , of size at most @xmath501 : its nodes are all nodes in @xmath420 and the lowest common ancestors of consecutive nodes in @xmath478 and @xmath479 respectively .",
    "note that a segment of @xmath500 $ ] might not correspond to a segment @xmath414 $ ] ( see fig .",
    "[ fig : spur - shortcut](b ) ) .",
    "denote by @xmath502 the path between @xmath483 and @xmath486 in @xmath500 $ ] .",
    "we now define the changes in the image graph .",
    "every node @xmath503 is deleted from @xmath408 , and added to the new group .",
    "create two nodes , @xmath504 and @xmath505 , in @xmath506 sufficiently close to @xmath171 in the wedge between the two children of @xmath171 , and connect them by a segment @xmath507 .",
    "duplicate each node @xmath508 , by creating a node @xmath509 ( added to @xmath506 ) sufficiently close to @xmath431 , and add a segment @xmath510 .",
    "subdivide every segment @xmath510 with two new boundary nodes , @xmath511 ( added to @xmath414 $ ] ) and @xmath512 ( added to @xmath506 ) .",
    "the nodes @xmath431 or @xmath509 might now have degree 4 .",
    "adjust the image graph so that the group trees are binary . finally partition the nodes in @xmath506 into two trees , @xmath513 $ ] and @xmath514 $ ] , rooted at @xmath515 and @xmath505 , respectively .",
    "we now define the changes in the polygon .",
    "replace every path @xmath516\\in { { \\mathcal s}}_\\ell$ ] , where @xmath508 , by @xmath517 $ ] if it is adjacent to a path @xmath518\\in { { \\mathcal s}}_\\ell$ ] ; and by @xmath519 $ ] otherwise .",
    "now we can build @xmath418 as the set of benchmark - to - benchmark paths @xmath520 $ ] where @xmath521 .    to prove ws - equivalence",
    ", we consider the changes in the polygon . these amount to a sequence of ws - equivalent primitives : a node - split at @xmath171 , a sequence of node - splits along the chain @xmath491 from @xmath171 to @xmath483 and @xmath486 , respectively , and subdivision  operations that create the new leaf nodes and merge  operations at degree-2 nodes that no longer contain spurs .",
    "the creation of new groups take @xmath522 time and @xmath522 paths in @xmath409 are removed or modified in @xmath408 .",
    "thus the data structures for @xmath408 are updated in @xmath523 time .",
    "overall , operation spur - shortcut@xmath449 and the repair steps that follow take @xmath524 time .      in this section",
    "we describe step  [ step : split ] of algorithm spur - elimination@xmath411 .",
    "assume that @xmath408 satisfies invariants [ inv : tree][inv : subdiv ] and @xmath33 contains no spur .",
    "denote the left and right child of @xmath33 by @xmath525 and @xmath526 , respectively .",
    "let @xmath527 , resp . , be the set of benchmark - to - benchmark paths that contain @xmath525 and @xmath526 .",
    "we check whether any two paths from @xmath528 and @xmath529 , respectively , cross .",
    "if there is such a crossing , we report that @xmath5 is not weakly simple , otherwise we split @xmath408 into two groups induced by @xmath528 and @xmath529 , respectively .",
    "refer to fig .",
    "[ fig : tree - splitting ] . without loss of generality",
    ", we may assume @xmath530 .",
    "it would be easy to compute the groups induced by @xmath528 and @xmath529 in @xmath415 time .",
    "however , for an overall @xmath0-time algorithm , we can afford @xmath531 time for the split operation , and an additional @xmath441 time for each eliminated spur and each node that we spit into two nonempty nodes .",
    "the group induced by @xmath532 can be computed from scratch in @xmath533 time , and we construct the group for @xmath529 by modifying @xmath408 , and updating the corresponding data structures .    .",
    "( a ) changes in the image graph .",
    "( b ) changes in the polygon . ]",
    "first , we find @xmath528 and @xmath529 .",
    "compute @xmath528 using the list of paths @xmath430\\in { { \\mathcal b}}$ ] sorted by @xmath437 or @xmath436 .",
    "since both lists naturally split into corresponding lists for @xmath528 and @xmath529 , we can split these lists in @xmath531 time . to construct the list of @xmath529 sorted by @xmath439 and @xmath438",
    ", we start with the corresponding lists for @xmath409 , and delete all elements of @xmath528 in @xmath533 time . to compute the lists sorted by @xmath439 and @xmath438 for @xmath528",
    ", we shall first compute the subtree @xmath534 $ ] induced by @xmath528 .",
    "however , we can already find the maximum @xmath439 of a path @xmath430\\in { { \\mathcal b}}^-$ ] in @xmath533 time .",
    "next , we test for crossings between the paths in @xmath528 and the paths in @xmath529 .",
    "let @xmath535 be the maximum @xmath439 of a path @xmath430\\in { { \\mathcal b}}^-$ ] , and @xmath536 the minimum @xmath438 of a path @xmath430\\in { { \\mathcal b}}^+$ ] .",
    "by lemma  [ lem : path - crossing ] , there is such a crossing iff @xmath537 , which can be determined in @xmath376 time based on our sorted lists .",
    "if a crossing is detected , the algorithm halts and reports that @xmath5 is not weakly simple .",
    "the tree @xmath538 $ ] and @xmath539 $ ] are simple subtrees of @xmath170 $ ] ; but splitting @xmath414 $ ] is nontrivial .",
    "we use the eulerian cycle of all leaves to find the right - most leaf @xmath540 in @xmath414 $ ] for which @xmath541 .",
    "let @xmath542 $ ] .",
    "we do not compute @xmath543 explicitly , as it may contain more than @xmath533 nodes , but we can test wether a query node @xmath431 of @xmath414 $ ] is in @xmath543 by checking whether @xmath544 in @xmath376 time .",
    "since the paths in @xmath528 and @xmath529 do not cross , all nodes of @xmath534 $ ] are in or to the left of the chain @xmath543 , and all common nodes of @xmath534 $ ] and @xmath545 $ ] are in @xmath543 .",
    "the image graph of @xmath534 $ ] can be computed from scratch using @xmath528 in @xmath546 time .",
    "replace each node @xmath431 of @xmath534 $ ] that is in @xmath543 by a duplicate copy @xmath547 located sufficiently close to @xmath431 , to the right of @xmath431 .",
    "the tree @xmath545 $ ] is computed from @xmath414 $ ] by node deletion and merge operations as follows . first deleting all nodes that are in",
    "@xmath534 $ ] but not in @xmath543 . for every node @xmath431 of @xmath534 $ ] that lies in @xmath543 ,",
    "if @xmath431 has degree-3 in @xmath534 $ ] and @xmath548 , then it is a degree-2 node in @xmath414 $ ] with no spurs , and so we can delete @xmath431 by merging its two incident segments . as a result ,",
    "@xmath414 $ ] becomes a tree induced by @xmath529 .",
    "it remains to resolve the connections between trees .",
    "let @xmath549 denote the set of chains @xmath434 $ ] such that @xmath550\\in { { \\mathcal b}}^-$ ] and @xmath551\\in { { \\mathcal b}}^+$ ] .",
    "the spurs at @xmath431 on all chains @xmath434\\in { { \\mathcal v}}^0 $ ] will be eliminated ( they will become adjacent leaves in the two resulting groups ) .",
    "@xmath549 can be found with a query for @xmath33 in the interval tree .",
    "let @xmath552 be the set of all nodes @xmath431 such that @xmath434\\in{{\\mathcal v}}^0 $ ] .",
    "each node @xmath553 is in @xmath543 and , therefore , has a copy @xmath547 in @xmath534 $ ] .",
    "create a segment between @xmath431 and @xmath547 , and subdivide the segment @xmath554 with two new nodes @xmath555 and @xmath511 in @xmath534 $ ] and @xmath414 $ ] , respectively .",
    "the degree of nodes @xmath431 or @xmath547 might have increases to 4 ; and so we adjust the image graphs so that both trees are binary .",
    "the image graph is now split into groups @xmath556 and @xmath408 .",
    "we next define the changes in the polygon .",
    "replace every chain @xmath434\\in{{\\mathcal v}}^0 $ ] with the chain @xmath557 $ ] , replacing also the corresponding paths in the lists @xmath528 and @xmath528 in @xmath558 time . in the sorted lists for @xmath528 and @xmath529 ,",
    "this is done by deleting and reinsertions .",
    "note that all leaves @xmath555 ( resp . , @xmath511 )",
    "are at the end ( resp . , beginning ) of the euler tour of @xmath534 $ ] ( resp . ,",
    "@xmath414 $ ] ) , the insertions take only @xmath559 time .",
    "the changes in the polygon are equivalent to a sequence of ws - equivalent primitives : a node - split operation at @xmath33 , followed by a sequence of node - splits along the chain @xmath543 from @xmath540 to @xmath33 , and subdivision operations that create the new leaf nodes between the two groups",
    ". the interval tree does not need to be updated since its query time remain @xmath441 .",
    "consequently , we can split @xmath408 in @xmath560 time .",
    "[ lem : group - simplfication - time ] given @xmath375 benchmark vertices , spur - elimination@xmath411 takes @xmath374 time .",
    "let @xmath561 be the number of spurs , @xmath562 the number of benchmark vertices at the leaves of clusters , and let @xmath563 .",
    "initially , @xmath564 by [ inv : tree ] .",
    "all operations in spur - elimination monotonically decrease both @xmath561 and @xmath565 .",
    "step  [ step : low ] decreases @xmath565 by the number of spurs at @xmath33 , and steps  [ step : merge ] and [ step : split ] both maintain @xmath565 . in particular , step  [ step : split ] converts some spurs into pairs of adjacent benchmark vertices at leaves .",
    "step  [ step : merge ] removes an interior node of degree 2 in @xmath376 time .",
    "interior nodes are created only when they contain a spur , so at most @xmath378 interior nodes are ever created , and steps  [ step : merge ] altogether take @xmath378 time .",
    "step  [ step : merge ] takes @xmath566 to eliminate @xmath567 spurs . eventually , all spurs are eliminated , thus steps  [ step : low ] altogether take @xmath374 time .",
    "step  [ step : split ] takes @xmath568 time . by a standard heavy - path decomposition argument",
    ", the terms @xmath569 contributes @xmath374 time .",
    "every chain in @xmath549 corresponds to a spur that is destroyed in a step  [ step : split ] ( and no new spurs are created ) , therefore the terms @xmath570 sum to @xmath374 over the course of the algorithm .",
    "since every occurrence of each step  [ step : split ] increases the number of groups by one , the step is repeated @xmath378 times , and the @xmath571 terms sum to @xmath374 .",
    "we presented an @xmath0-time algorithm for deciding whether a polygon with @xmath1 vertices is weakly simple .",
    "there is a natural generalization for planar graphs  @xcite[appendix d ] .",
    "we can define the _ weak embedding _ for a graph @xmath283 in terms of frchet distance .",
    "the frchet distance between two planar drawings @xmath572 of @xmath283 is defined as @xmath573 , where @xmath565 is an automorphism of @xmath283 .",
    "it is an open problem to decide whether a drawing of a graph @xmath283 is weakly simple , i.e. , whether a drawing @xmath5 of @xmath283 is within @xmath4 frchet distance from an embedding @xmath46 of @xmath283 , for all @xmath3 .",
    "we can also generalize the problem to higher dimensions .",
    "a polyhedron can be described as a map @xmath574 .",
    "a simple polyhedron is an injective function .",
    "a polyhedron @xmath5 is weakly simple if there exists a simple polyhedron within @xmath4 frchet distance from @xmath5 for all @xmath3 .",
    "this problem can be reduced to origami flat foldability .",
    "the results of  @xcite imply that , given a convex polygon @xmath5 and a piecewise isometric function @xmath575 ( called _ crease pattern _ ) , it is np - hard to decide if there exists an injective embedding of @xmath5 in three dimensions @xmath576 within @xmath4 frchet distance from @xmath577 for all @xmath3 , i.e. , if @xmath577 is _",
    "flat foldable_. given @xmath5 and @xmath577 , we can construct a continuous function @xmath578 mapping each hemisphere of @xmath579 to @xmath5 ( @xmath580 , for a point @xmath581 , maps to two points in different hemispheres of @xmath579 ) .",
    "then , the polyhedron @xmath582 is weakly simple if and only if @xmath577 is flat foldable .",
    "therefore , it is also np - hard to decide whether a polyhedron is weakly simple .",
    "research by akitaya and tth was supported in part by the nsf awards ccf-1422311 and ccf-1423615 .",
    "research by erickson was supported in part by the nsf award ccf-1408763 .",
    "we thank anika rounds and diane souvaine for many helpful conversations that contributed to the completion of this project .",
    "zachary abel , erik d. demaine , martin l. demaine , david eppstein , anna lubiw , and ryuhei uehara , flat foldings of plane graphs with prescribed angles and edge lengths , in _ proc .",
    "22nd graph drawing _ , lncs  8871 , springer , 2014 , pp .  272283 .",
    "esther m. arkin , michael a. bender , erik d. demaine , martin l. demaine , joseph s.b .",
    "mitchell , saurabh sethia , and steven s. skiena , when can you fold a map ?",
    ", _ computational geometry : theory and applications _ * 29 * ( 2004 ) , 2346 .",
    "michael a. bender , richard cole , erik d. demaine , martin farach - colton , and jack zito .",
    "two simplified algorithms for maintaining order in a list , _ proc .",
    "10th annual european symposium on algorithms _ , lncs  2461 , springer , 2002 , pp .",
    "152164 .",
    "daniel d. sleator and paul f. dietz , two algorithms for maintaining order in a list , in _ proc .",
    "19th acm symposium on theory of computing _ , acm , 1987 , pp .",
    ". full version in tech .",
    "cmu - cs-88 - 113 , carnegie mellon university , 1988 ."
  ],
  "abstract_text": [
    "<S> we present an @xmath0-time algorithm that determines whether a given planar @xmath1-gon is weakly simple . </S>",
    "<S> this improves upon an @xmath2-time algorithm by chang , erickson , and xu  @xcite . </S>",
    "<S> weakly simple polygons are required as input for several geometric algorithms . as such </S>",
    "<S> , how to recognize simple or weakly simple polygons is a fundamental question . </S>"
  ]
}