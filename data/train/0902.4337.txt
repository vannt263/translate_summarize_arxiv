{
  "article_text": [
    "[ [ the - problem . ] ] the problem .",
    "+ + + + + + + + + + + +    matching two geometric shapes under transformations and evaluating their similarity is one of the central problems in computer vision systems where the evaluation of the resemblance of two images is based on their geometric shape and not color or texture . because of its significance",
    "the problem has been widely covered in the literature , see  @xcite for surveys .",
    "depending on the application , 2d shapes are modeled as finite point patterns , polygonal chains or polygons . given two shapes @xmath0 and @xmath1 , as well as a set of transformations @xmath4 and a distance measure @xmath5 , the problem is to find the transformation @xmath6 such that @xmath3 and @xmath1 match optimally with respect to @xmath5 .",
    "two shapes are considered similar if there is a transformation @xmath2 such that the distance between @xmath3 and @xmath1 is small .",
    "the problem is well - studied for various settings , e.g. , sets of line segments , rigid motions and the hausdorff distance .    in this paper",
    "we consider the problem of matching 2d shapes modeled by plane open sets , e.g. , sets of polygons , with respect to the area of the symmetric difference , which is the area that belongs to exactly one of the shapes . as sets of allowed transformations @xmath4 we will consider the set of translations and the set of rigid motions ( rotation and translation ) in the plane .",
    "minimizing the area of the symmetric difference under translations or rigid motions is equivalent to maximizing the area of overlap , so we will consider the latter formulation of the problem for the rest of this article .",
    "the area of overlap is a well - known similarity measure , and , e.g. , has the advantage that it is insensitive to noise .",
    "furthermore , computing the maximal area of overlap of two sets of polygons under translations or rigid motions is an interesting computational problem on its own .",
    "[ [ related - work . ] ] related work .",
    "+ + + + + + + + + + + + +    for simple polygons , efficient algorithms for maximizing the area of overlap under translations are known .",
    "mount et al .",
    "@xcite show that the maximal area of overlap of a simple @xmath7-polygon with a translated simple @xmath8-polygon can be computed in @xmath9 time .",
    "recently , cheong et al .",
    "@xcite introduced a general probabilistic framework for computing an approximation with prespecified absolute error @xmath10 in @xmath11 time for translations and @xmath12 time for rigid motions .",
    "de berg et al .",
    "@xcite consider the case of convex polygons and give a @xmath13 time algorithm maximizing the area of overlap under translations .",
    "alt et al .  @xcite",
    "give a linear time constant factor approximation algorithm for minimizing the area of the symmetric difference of convex shapes under translations and homotheties ( scaling and translation ) .",
    "for higher dimensions ahn et al .  present in  @xcite an algorithm finding a translation vector maximizing the overlap of two convex polytopes bounded by a total of @xmath7 hyperplanes in @xmath14 for @xmath15 .",
    "their algorithm runs in @xmath16 time with probability at least @xmath17 .",
    "surprisingly little has been known so far about maximizing the area of overlap under rigid motions .",
    "[ [ overview . ] ] overview .",
    "+ + + + + + + + +    we will design and analyze a simple probabilistic matching algorithm , which for translations works as follows . given two shapes @xmath0 and @xmath1 , in one random experiment we select a point @xmath18 and a point @xmath19 uniformly at random .",
    "this tells us that the translation @xmath2 that is given by the vector @xmath20 maps some part of @xmath0 onto some part of @xmath1 .",
    "we record this as a vote for @xmath2 and repeat this procedure very often .",
    "then we determine the densest cluster of the resulting point cloud and output the center of this cluster as a translation that maps a large part of @xmath0 onto @xmath1 . for rigid motions we consider two different approaches for the vote generation in one random experiment .",
    "we show that the algorithm approximates the maximal area of overlap under translations and rigid motions .",
    "more precisely , let @xmath21 be a transformation that maximizes the area of overlap of @xmath0 and @xmath1 , and let @xmath22 be a transformation computed by the algorithm .",
    "given an allowable error @xmath10 and a desired probability of success @xmath23 , both between @xmath24 and @xmath25 , we show bounds on the required number of random experiments , guaranteeing that the absolute difference between approximation and optimum @xmath26 is at most @xmath27 with probability at least @xmath23 . here",
    "@xmath28 denotes the area ( lebesgue measure ) of a set .",
    "furthermore , we prove that this algorithm computes a @xmath29-approximation of the maximal area of overlap under translations and rigid motions , meaning that @xmath30 with high probability , if we make a reasonable assumption about the input shapes .",
    "this algorithm is a special case of a probabilistic algorithmic scheme for approximating an optimal match of planar sets under a subgroup of affine transformations .",
    "alt and scharf @xcite analyzed another instance of this algorithmic scheme that compares polygonal curves under translations , rigid motions , and similarities .",
    "[ [ shapes . ] ] shapes .",
    "+ + + + + + +    we consider shapes modeled by open bounded , and therefore , lebesgue measurable subsets of the plane .",
    "we always assume the shapes to have positive area .",
    "additionally , we assume that there is a method to select uniformly distributed random points from a shape and the density function is lipschitz continuous ( see section [ sec : lipschitz ] ) .",
    "this is the case for sets of disks and for sets of polygons , or equivalently , sets of triangles , which probably is the most common representation in practice .",
    "the idea of the algorithm can be applied to bitmap data as well .    for a shape represented by @xmath7 triangles",
    "a random point can be generated by first selecting a triangle randomly with probability proportional to the relative area of the triangle and then selecting a random point from that triangle .",
    "for an arbitrary lebesgue measurable set @xmath0 in the plane if we are given a set of triangles @xmath31 it is contained in , and an algorithm that decides `` is @xmath32 ? '' , we can sample uniformly at random from @xmath33 and discard points that are not in @xmath0 .",
    "the density function is lipschitz continuous , for example , if the shape boundaries are unions of piecewise differentiable simple closed curves .",
    "[ [ general - idea . ]",
    "] general idea .",
    "+ + + + + + + + + + + + +    the idea of the algorithm is quite simple . given two shapes @xmath0 and @xmath1 , repeat the following random experiment very often , say @xmath34 times :",
    "select random point samples of appropriate size from each shape and compute a transformation that maps the point sample of one shape to the sample of the other shape . keep this transformation ,",
    "called a `` vote '' , in mind . in each step , we grow our collection of `` votes '' by one .",
    "clusters of `` votes '' indicate transformations that map large parts of the shapes onto each other .",
    "every translation can be associated with a point in two dimensional space and every rigid motion with a point in three dimensional space .",
    "the densest cluster of `` votes '' is then defined as the transformation @xmath35 whose @xmath36-neighborhood with respect to the maximum norm contains the most transformation points from random experiments for some parameter @xmath36   for both , translations and rotations , it is advisable to normalize the translation space . ] .",
    "thus , along with the shapes @xmath0 and @xmath1 we have two additional input parameters : @xmath34 determines the number of random experiments and @xmath37 adjusts the clustering size .",
    "this algorithm captures the intuitive notion of matching .",
    "transformations whose @xmath36-neighborhoods contain many `` votes '' should be `` good '' translations since they map many points from @xmath0 onto points from @xmath1 .",
    "figure [ fig : two_squares ] illustrates this idea for the case of translations .     and @xmath1 corresponds to the chance of choosing a point pair @xmath38 such that @xmath39 . ]",
    "[ [ translations . ] ] translations .",
    "+ + + + + + + + + + + + +    observe that two points in the plane uniquely determine a translation that maps one point onto the other .",
    "therefore , a point sample for the case of translations consists of one randomly selected point of each shape .",
    "probmatcht + input : shapes @xmath0 and @xmath1 , an integer @xmath34 , and a positive real @xmath37 .    1 .",
    "perform the following experiment @xmath34 times : + draw uniformly distributed random points @xmath40 and @xmath19 . + register the translation vector @xmath20 .",
    "2 .   determine a translation @xmath22 whose @xmath37-neighborhood contains the most registered vectors .",
    "output : translation @xmath41    [ [ rigid - motions - with - random - angle . ] ] rigid motions with random angle .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the algorithm for rigid motions , probmatchrmra , is similar to the algorithm for translations .",
    "the space of rigid motions @xmath42 is given as @xmath43 where @xmath44 .",
    "we use the interval @xmath45 instead of @xmath46 because we regard this interval as a probability space , which should have measure 1 , avoiding a constant in the density function .",
    "a point @xmath47 denotes the rigid motion @xmath48    for matching under rigid motions , we select in each step uniformly distributed an angle @xmath49 and random points @xmath40 and @xmath19 .",
    "we give one `` vote '' to the unique rigid motion with counterclockwise rotation angle @xmath49 that maps @xmath50 onto @xmath51 , namely the map @xmath52    [ [ rigid - motions - with-31-points . ] ] rigid motions with 3 + 1 points .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    another variant for rigid motions is the algorithm probmatchrm3 + 1 , which does not choose a completely random rotation but prefers directions that are present in the shape .",
    "a rigid motion is determined by selecting two points @xmath53 in @xmath0 and one point @xmath54 in @xmath1 uniformly at random .",
    "then , we select another point @xmath55 in @xmath56 such that the distances between the points in @xmath57 and @xmath58 and @xmath54 and @xmath55 are the same , i.e. , @xmath59 , where @xmath60 is randomly selected under uniform distribution . if @xmath55 happens to be in @xmath1 , @xmath61 is a valid random sample .",
    "otherwise , we discard the sample and select new points . in this way ,",
    "we select uniformly distributed tuples from @xmath62      [ [ approximation - theorems . ] ] approximation theorems .",
    "+ + + + + + + + + + + + + + + + + + + + + + +    first , we give bounds on the required number of random experiments .",
    "the main results are the following approximation theorems .",
    "[ thm : main_absolute ] for any two shapes @xmath0 and @xmath1 and parameters @xmath63 with @xmath64 there exist a positive real @xmath65 and an integer @xmath34 such that the following holds : let the transformation @xmath41 be the output of probmatcht or probmatchrmra , respectively , let @xmath21 be a transformation that maximizes the area of overlap of @xmath0 and @xmath1 , then @xmath66 with probability at least @xmath67 . in the case of translations @xmath68 in the case of rigid motions @xmath69 where @xmath70 , @xmath71 , @xmath72 is the length of the boundary of @xmath0 and @xmath73 is the diameter of @xmath0 .    if we know that the shapes we have to match are not too `` skinny '' we can also bound the number of experiments required by algorithm probmatchrm3 + 1 in order to achieve the absolute approximation error of at most @xmath27 .",
    "we say that a shape @xmath0 is _ @xmath74-fat _",
    "-fatness differs from the standard definition . ] for some constant @xmath75 if there exists an inscribed circle @xmath76 such that @xmath77 .",
    "let @xmath0 and @xmath1 be two @xmath74-fat shapes such that the largest inscribed circle in @xmath0 is at most as large as the largest inscribed circle in @xmath1 . for all parameters",
    "@xmath63 with @xmath64 there exist a positive real @xmath65 and an integer @xmath34 such that the following holds : let the transformation @xmath41 be the output of probmatchrm3 + 1 and @xmath21 a transformation that maximizes the area of overlap of @xmath0 and @xmath1 , then @xmath66 with probability at least @xmath67 .",
    "the required number of experiments @xmath34 is @xmath78 where @xmath79 , @xmath72 is the length of the boundary of @xmath0 and @xmath73 is the diameter of @xmath0 . [",
    "thm : abs31 ]    further , under the assumption that the shapes are @xmath74-fat , we get a relative approximation for all three variants of the algorithm from the absolute approximation results . for algorithms probmatcht and",
    "probmatchrmra a weaker assumption that the maximal area of overlap of @xmath0 and @xmath1 is at least a constant fraction of @xmath80 , i.e. , @xmath81 for some @xmath75 , is sufficient for the relative error bound .",
    "observe that if the two shapes @xmath0 and @xmath1 are @xmath74-fat and @xmath0 is the shape with the smaller largest inscribed circle , then @xmath81 .",
    "the relative error bound follows if we choose @xmath82 and apply the absolute approximation results : @xmath83    given two shapes @xmath0 and @xmath1 , let @xmath41 , @xmath21 , @xmath10 , @xmath36 , @xmath84 , @xmath34 be as in theorem  [ thm : main_absolute ] for algorithms probmatcht and probmatchrmra , and as in theorem  [ thm : abs31 ] for algorithm probmatchrm3 + 1 .",
    "assume that @xmath85 for some constant @xmath74 in case of translations and rigid motions with random rotation angle .",
    "for rigid motions with @xmath86 points assume that @xmath0 and @xmath1 are @xmath74-fat .",
    "then with probability at least @xmath67 @xmath87 if @xmath34 is chosen as in theorem  [ thm : main_absolute ] for algorithms probmatcht and probmatchrmra , only that now @xmath88 and @xmath89 , where @xmath72 is the length of the boundary of @xmath0 and @xmath73 is the diameter of @xmath0 . for algorithm probmatchrm3 + 1",
    "the necessary number of experiments is @xmath90 , where @xmath91 is as in theorem  [ thm : abs31 ] .",
    "[ [ runtime - for - sets - of - polygons . ] ] runtime for sets of polygons .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the runtime of the algorithm consists of the time @xmath92 needed to generate @xmath34 random samples and the time @xmath93 needed to find the transformation @xmath94 whose @xmath36-neighborhood contains the most registered transformation vectors .",
    "assume that shapes are sets of polygons , without loss of generality , sets of triangles .",
    "a random point in a triangle can be generated in constant time using barycentric coordinates .",
    "for generating a random point from a set of @xmath7 triangles we select a triangle randomly with probability proportional to the relative area of the triangle and then take a random point from the selected triangle .",
    "we first compute the areas of the triangles and partition the unit interval @xmath95 $ ] by subintervals whose lengths are proportional to these areas",
    ". then the selection of a random @xmath96 $ ] and a binary search on this partition gives us a random triangle .",
    "thus , we get preprocessing time linear in @xmath7 and @xmath97 generation time for a single point .",
    "therefore , @xmath98 .",
    "determining a translation whose @xmath37-neighborhood obtained the most `` votes '' can be done by traversing the arrangement @xmath99 given by the boundaries of the @xmath36-neighborhoods of the @xmath34 votes from the random experiments .",
    "the depth of a cell is defined as the number of neighborhoods it is contained in .",
    "the candidates for the output of the algorithm are the transformations contained in the deepest cells in this arrangement because a transformation @xmath2 lies in the intersection of @xmath100 of the neighborhoods if and only if its neighborhood contains @xmath100 votes .",
    "the size of the arrangement is @xmath101 for translations and @xmath102 for rigid motions .",
    "the deepest cells can be determined by constructing and traversing the complete arrangement , which can be accomplished in time @xmath101 for translations and @xmath102 for rigid motions .",
    "the runtime can be improved if , instead of the deepest cell in the arrangement , an approximately deepest cell is computed . if the depth of the arrangement is @xmath5 , a witness point of depth @xmath100 such that @xmath103 can be computed in time @xmath104 @xcite .",
    "the total runtime of the algorithm is then @xmath105 .",
    "we will show later that the quality of the output can still be guaranteed if we approximate the depth .",
    "in the following theorem we refer to the probabilistic algorithms as described in section  [ sec : alg ] except that in step 2 of each algorithm a transformation with an _ approximately _ largest number of `` votes '' in its @xmath36-neighborhood is returned .",
    "[ thm : time ] let @xmath0 and @xmath1 be two shapes represented by sets of @xmath7 triangles in total .",
    "let @xmath21 denote the transformation maximizing the area of overlap of @xmath0 and @xmath1 for a given error tolerance @xmath10 and maximal allowed failure probability @xmath84 with @xmath106 , the three algorithms described in section  [ sec : alg ] in combination with the depth approximation algorithm of @xcite compute a transformation @xmath107 , such that @xmath108 with probability at least @xmath67 in time @xmath109 for translations ( algorithm probmatcht ) and in time @xmath110 for rigid motions with random rotation angle ( algorithm probmatchrmra ) .",
    "therein @xmath111 , @xmath112 , @xmath72 is the length of the boundary of @xmath0 , and @xmath73 is the diameter of @xmath0 .    for algorithm probmatchrm3 + 1",
    "the shapes @xmath0 and @xmath1 are additionally required to be @xmath74-fat for some @xmath75 .",
    "the running time of the algorithm is then + @xmath113 , where @xmath114 .      in section  [ sec :",
    "densityfunctions ] we analyze the probability distribution implicitly given in the transformation space by the random experiment .",
    "it turns out that in the case of translations and in the case of rigid motions where the rotation angle is chosen randomly the density function is proportional to the function mapping a transformation vector to the area of overlap of the transformed shape @xmath0 and @xmath1 .",
    "for the rigid motions and algorithm probmatchrm3 + 1 the density function is proportional to the squared value of the area of overlap .",
    "further , we prove that the density functions are lipschitz continuous .",
    "therefore , the probability of a @xmath36-neighborhood of a transformation @xmath2 converges uniformly to the value of the density function at @xmath2 times the size of the @xmath36-neighborhood as @xmath36 approaches zero .",
    "then in section [ sec : absoluteerror ] we show that the relative number of transformations generated by random experiments that are contained in the @xmath36-neighborhood of a transformation @xmath2 is a good approximation of the probability of that @xmath36-neighborhood , in the sense that the probability of a large error decreases exponentially in the number of experiments .",
    "finally , we combine the uniform continuity of the density functions and the probability approximation results to derive rigorous bounds on the number of experiments required to find a transformation that with high probability approximates the maximum area of overlap within the given error bound .",
    "in this section we analyze the density functions of the probability distribution induced by the random experiments of the algorithm in the transformation space .",
    "we show that for translations and for rigid motions with random rotation angle the value of the density function for a transformation @xmath2 is proportional to the area of overlap @xmath115 . for the algorithm probmatchrm3 + 1",
    "the induced density function is proportional to the squared area of overlap .",
    "additionally , we show that in all three cases the density functions are lipschitz continuous .    for deriving the density functions underlying the random experiments we will use the following probability theoretical transformation formula for density functions of random variables , see for example @xcite .    [ thm : transformation_formula ]",
    "let @xmath116 be a random variable with density function @xmath117 , open set @xmath118 be the support of @xmath117 and @xmath119 a continuously differentiable injective map , i.e. , @xmath120 , where @xmath121 , is a bijection .",
    "let @xmath122 .",
    "then @xmath123 has the density function @xmath124    for translations and rigid motions with random rotation angle we can apply the following special case :    [ thm : transformation_formula_affine ] let @xmath116 be a random variable with density function @xmath117 and @xmath125 a linear map with @xmath126 .",
    "then @xmath127 has the density function @xmath128    for a subset @xmath1 of a set @xmath42 let @xmath129 be the characteristic function of @xmath1 that is 1 if a point from @xmath42 is in @xmath1 and 0 otherwise .",
    "[ [ the - density - function - for - translations . ] ] the density function for translations .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    [ la : density ] the density function of the probability distribution on the translation space that results from the experiment in algorithm probmatchtrans is given by @xmath130    we model the experiment by regarding @xmath131 on @xmath132 as uniformly distributed random variable .",
    "@xmath133 corresponds to the sample pairs selected by the random experiment .",
    "the density function of @xmath133 is @xmath134 consider the bijective function @xmath135 . @xmath136",
    "maps a pair of points @xmath137 to a point - translation pair @xmath138 where @xmath2 is the translation that maps @xmath50 to @xmath51 . by corollary [ thm : transformation_formula_affine ]",
    "the density function of @xmath123 is @xmath139 the density function on the translation space @xmath56 is the density function of the projection of @xmath123 to the last two coordinates : @xmath140    [ [ the - density - function - for - rigid - motions - with - random - angle .",
    "] ] the density function for rigid motions with random angle .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    [ la : rmra ] the density function on the space of rigid motions  @xmath42 induced by algorithm probmatchrmra is given by @xmath141    our random experiment consists in selecting uniformly distributed points from @xmath142 where @xmath143 .",
    "we are interested in the density function @xmath144 of the random variable @xmath145 we will express the density function of @xmath146 in terms of the conditional probability densities of the following two random variables @xmath147 and @xmath148 defined as @xmath149 the density function of @xmath146 is the joint density of the random variables @xmath147 and @xmath148 . recall that the counterclockwise rotation angle is selected uniformly distributed in @xmath150 independently from the points @xmath50 and @xmath51 .",
    "so the marginal probability density of @xmath147 , i.e. , probability density of @xmath151 allowing all possible values of @xmath148 , is @xmath152 the value of @xmath148 depends on the selected points @xmath50 and @xmath51 and on the value of @xmath147 .",
    "the conditional probability density of @xmath153 given @xmath151 is exactly the probability density in the space of translations for shapes @xmath154 and @xmath1 : @xmath155 the conditional probability density can also be expressed in terms of the joint probability density @xmath156 .",
    "thus we get for any rigid motion @xmath157 that @xmath158    [ [ the - density - function - for - rigid - motions - with-31-points . ] ] the density function for rigid motions with 3 + 1 points .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    [ la : rm31 ] the density function on the space of rigid motions  @xmath42 induced by the algorithm probmatchrm3 + 1 is given  by @xmath159 where @xmath160 is a positive real depending on @xmath0 and @xmath1 which is at most @xmath161 .",
    "in one random experiment we select uniformly distributed random elements from the set @xmath162 the density function of the random variable @xmath163 is then @xmath164 where @xmath165 is as in the definition of @xmath166 .",
    "let @xmath146 denote the random variable corresponding to the rigid motion resulting from one random experiment : @xmath167 where @xmath168 .",
    "we represent @xmath146 as a composite function of random variable @xmath133 .",
    "define functions @xmath169 as follows : @xmath170 then @xmath171 .",
    "observe that the set @xmath166 is open , since the sets @xmath0 and @xmath1 are open , the excluded set of tuples where @xmath172 is a closed set , and the interval @xmath150 is equivalent to a unit circle and is therefore open .",
    "further , the function @xmath173 and its inverse are bijective and differentiable , so we can apply theorem [ thm : transformation_formula ] to @xmath174 .",
    "we first compute the determinant @xmath175 of the jacobian matrix of @xmath173 .",
    "it is easy to see that @xmath176 since @xmath177 for @xmath178 .",
    "note that the angle @xmath49 does not depend on @xmath179 and it depends linearly on @xmath180 : @xmath181 , where @xmath182 .",
    "therefore , @xmath183 , @xmath184 for @xmath185 , and @xmath186 .",
    "now we have that @xmath187 for some @xmath188 .",
    "thus , @xmath189 .",
    "the inverse function of @xmath173 maps a tuple @xmath190 to @xmath191 . by theorem [ thm : transformation_formula ]",
    "we get that the density function of @xmath174 is @xmath192    the density function of random variable @xmath146 on @xmath42 is then @xmath193 where @xmath157 .      in this section",
    "we show that the density functions of the probability distribution induced in the space of transformations by the algorithm are lipschitz continuous .",
    "a function @xmath194 from a metric space @xmath195 to @xmath196 is called lipschitz continuous if there is a constant @xmath197 such that for all @xmath198 holds @xmath199    let @xmath200 denote the @xmath36-neighborhood of a transformation @xmath2 with respect to the maximum norm and let @xmath201 be the lebesgue measure of @xmath200 .",
    "we are interested in the density functions to be lipschitz continuous because then @xmath202 converges to @xmath203 for @xmath204 uniformly on the transformation space , where @xmath205 is the probability distribution with density function @xmath194 .    for fixed shapes",
    "@xmath0 and @xmath1 let @xmath194 be the density function of the probability distribution @xmath205 in the transformation space induced by the probabilistic algorithm .",
    "there exists a constant @xmath197 such that for every transformation  @xmath2 @xmath206 where @xmath200 denotes the @xmath36-neighborhood of a transformation @xmath2 with respect to the maximum norm and @xmath201 is the lebesgue measure of @xmath200 .    for translations @xmath207 , for rigid motions and algorithm probmatchrmra @xmath208 , and for rigid motions and algorithm probmatchrm3 + 1 @xmath209 , where @xmath73 is the diameter and @xmath72 the boundary length of @xmath0 , and @xmath160 is the constant from lemma  [ la : rm31 ] .",
    "[ la : lipschitz ]    assume that @xmath194 is lipschitz continuous with constant @xmath197 then @xmath210    it remains to show that for every variant of the probabilistic algorithm the induced probability density function is lipschitz continuous .",
    "let @xmath211 denote the area of overlap @xmath212 for a rigid motion @xmath213 .",
    "we first show that the function @xmath214 is lipschitz continuous .",
    "we assume without loss of generality that the input shapes @xmath0 and @xmath1 contain the origin .",
    "let @xmath215 be rigid motions whose distance is less than @xmath37 in the maximum norm .",
    "then the distance between translation vectors is @xmath216 and @xmath217 .",
    "the difference in the area of overlap for @xmath213 and @xmath218 can be bounded by the area of the symmetric difference between @xmath219 and @xmath220 : @xmath221 thus , @xmath222 .",
    "similarly , @xmath223 . combining these two estimates we get @xmath224 let @xmath225 be the maximal length of the line segment @xmath226 for @xmath227 .",
    "the difference in the area of overlap is at most @xmath228 since @xmath219 and @xmath220 differ by at most a @xmath225-wide strip along the boundary of @xmath219 .",
    "next we find an upper bound on the length @xmath229 .",
    "by an easy geometric argument the distance between a point @xmath230 and its rotated image can be expressed as @xmath231 for @xmath232 . since @xmath233 for all @xmath234 this distance can be bounded by @xmath235 .",
    "let @xmath236 then @xmath237 . we use the above argument to bound the distance between the image of @xmath230 under rigid motions @xmath213 and @xmath218 .",
    "observe that since @xmath36 is small we can assume that @xmath238 .",
    "@xmath239 for all @xmath230 in @xmath0 .",
    "then for arbitrary rigid motions @xmath213 and @xmath218 such that @xmath240 the difference in the area of overlap can be bounded by @xmath241 .",
    "the lipschitz constant for the area of overlap is then @xmath242 .",
    "the density function of the probability distribution in the space of rigid motions induced by the algorithm probmatchrmra is @xmath243 by lemma  [ la : rmra ] .",
    "then for rigid motions @xmath213 and @xmath218 such that @xmath240 we get @xmath244 thus , the lipschitz constant of the function @xmath245 is @xmath246 .",
    "the density function induced by the algorithm probmatchrm3 + 1 is @xmath247 , where @xmath160 is the constant from lemma  [ la : rm31 ] .",
    "observe that if @xmath214 is bounded and lipschitz continuous with lipschitz constant @xmath248 , then @xmath249 is also lipschitz continuous with constant @xmath250 due to the following consideration : @xmath251 thus , the lipschitz constant of the function @xmath252 is @xmath253 the maximal possible area of overlap of two shapes under rigid motions is clearly bounded by the area of the smaller shape .",
    "therefore , the function @xmath252 is lipschitz continuous with constant @xmath254 .    in the case of translations we can disregard rotation , so the lipschitz constant @xmath246 for the density function in the case of rigid motions reduces to @xmath255 for translations .",
    "note that the constants depend heavily on the shapes .",
    "in the previous section ( lemma  [ la : lipschitz ] ) we showed that for the probability distributions in the space of transformations induced by the algorithms for translations and for rigid motions the value of the probability function @xmath205 for a @xmath36-neighborhood @xmath200 ( divided by the measure @xmath256 of the @xmath36-neighborhood ) of a transformation @xmath2 converges to the value of the density function @xmath203 for that transformation as @xmath36 approaches zero .    in this section we prove that the relative number of `` votes '' in the @xmath36-neighborhood of a transformation @xmath2 is a good approximation of the probability @xmath257 and complete the proofs of theorem  [ thm : main_absolute ] and theorem  [ thm : time ] .",
    "let the random variable @xmath258 denote the number of registered transformations in the @xmath36-neighborhood of transformation @xmath2 .",
    "we use the chernoff bound formulated as in @xcite for proving that for fixed @xmath2 with high probability @xmath259 and @xmath260 do not differ much for large @xmath34 .",
    "let @xmath261 be independent binary random variables , let @xmath262 , and let @xmath263 .",
    "then @xmath264 [ thm : chernoff ]    applying this bound to our setting yields    [ cor : chernoff ] for each transformation @xmath2 and for all @xmath265 @xmath266    define @xmath267 for @xmath268 .",
    "the @xmath269 are identically distributed , independent , binary random variables with @xmath270 and @xmath271 .",
    "the inequality of corollary  [ cor : chernoff ] results from applying the chernoff bound to @xmath261 .",
    "this shows that @xmath259 converges to @xmath260 in probability as the number of random experiments goes to infinity for each @xmath2 in the transformation space .",
    "we have already seen that for fixed @xmath2 @xmath272 now we need to analyze what happens if the transformation vector is determined by the sequence of random experiments , namely a vector whose @xmath37-neighborhood obtains the most `` votes '' , and thus is a random vector itself .",
    "the output of the algorithm can be modeled as a random variable @xmath273 let @xmath274 be a sequence of transformations from the random experiments . consider the arrangement @xmath99 induced by the boundaries of @xmath275 , which are the @xmath37-spheres with respect to the maximum norm of the points in @xmath276 .",
    "the depth of a cell is defined as the number of @xmath277 it is contained in .",
    "the candidates for the output of the algorithm are the transformations contained in the deepest cells in this arrangement .",
    "a transformation @xmath2 lies in the intersection of @xmath100 of the neighborhoods if and only if its neighborhood contains @xmath100 `` votes '' .",
    "the next lemma can be proven using an idea of @xcite .",
    "[ la : key ] let @xmath278 be the set of all vertices of the arrangement  @xmath99 and @xmath21 the transformation maximizing the area of overlap @xmath279 .",
    "then for each @xmath280 and @xmath281 holds in the case of translations @xmath282 and in the case of rigid motions , @xmath283    in the case of translations , a vertex of @xmath99 is defined by 2 @xmath37-spheres , and 2 @xmath37-spheres define at most 2 vertices , so @xmath284 and @xmath285 . in the case of rigid motions , a vertex of @xmath99 is defined by 3 @xmath37-spheres , and 3 @xmath37-spheres define at most 2 vertices , so @xmath286 and @xmath287 .",
    "let us consider translations first .",
    "let @xmath2 be a vertex of @xmath99 , then @xmath2 is an intersection point of two @xmath36-spheres @xmath288 for some votes @xmath289 .",
    "consider same random sequence without two experiments yielding @xmath290 and @xmath291 .",
    "since the random points are independent and the choice of @xmath2 does not depend on the shorter random sequence , we can apply corollary [ cor : chernoff ] to @xmath2 with @xmath292 experiments .",
    "@xmath293    for each @xmath37-neighborhood , the fractions of `` votes '' that lie in the neighborhood differ by at most @xmath294 if two arbitrary `` votes '' are deleted .",
    "therefore , @xmath295 choosing @xmath296 we get that @xmath297 and @xmath298 as argued above there are at most @xmath299 such vertex points together with the point @xmath21 . applying the triangle inequality we get the claim of the lemma for the case of translation .",
    "the argumentation for rigid motions is analogous .",
    "next we show that if the probability density function @xmath194 is lipschitz continuous then the value of @xmath260 for two transformations that lie in one @xmath36-neighborhood does not differ much .",
    "[ pro : cell ] let @xmath300 be transformations such that @xmath301 .",
    "then @xmath302 where @xmath197 is the lipschitz constant of the density function @xmath194 of @xmath205 and @xmath201 is the lebesgue measure of a @xmath200 .",
    "@xmath303    it follows from lemma  [ la : key ] and proposition  [ pro : cell ] that with high probability for every transformation @xmath2 the relative number of votes in its @xmath36-neighborhood is a good approximation of the probability  @xmath260 .",
    "[ cor : output ] let @xmath263 and @xmath304 . for all transformations",
    "@xmath2 with probability at least @xmath305 in the case of translations and with probability at least @xmath306 in the case of rigid motions it holds @xmath307 where @xmath197 is the lipschitz constant of the probability density function .",
    "let @xmath2 be an arbitrary transformation and let @xmath308 be a vertex of the cell in @xmath99 which contains @xmath2 , such that @xmath309 .",
    "then @xmath310    that means that the output of the algorithm does not need to be chosen among the vertices of the arrangement @xmath99 .",
    "next we show that if the probability density function is lipschitz continuous then the transformation with the maximum number of `` votes '' in its @xmath36-neighborhood results in a good approximation of the maximum of the density function with high probability .",
    "let @xmath203 be the density of the probability distribution @xmath205 in the transformation space induced by the algorithm , and @xmath197 the lipschitz constant of @xmath194 .",
    "let @xmath21 be the transformation maximizing @xmath203 and @xmath22 the transformation maximizing @xmath258 , where @xmath258 denotes the number of transformations generated by the random experiments that are contained in the @xmath36-neighborhood of  @xmath2 .",
    "the lebesgue measure of a @xmath36-neighborhood is denoted by @xmath256 .",
    "then for all @xmath311 @xmath312 with probability at least @xmath313 , where @xmath314 for translations and @xmath315 in the case of rigid motions .",
    "[ la : happrox ]    it follows from lemmas [ la : lipschitz ] and [ la : key ] and from corollary  [ cor : output ] that with probability at least @xmath313 the following two statements are true : @xmath316 by the definition of @xmath22 , @xmath317 .",
    "then @xmath318 which concludes the proof",
    ".    now we can prove theorem [ thm : main_absolute ] .",
    "let @xmath319 denote the area of overlap @xmath320 , @xmath203 the density of the probability distribution @xmath205 in the transformation space induced by the algorithm , and @xmath197 the lipschitz constant of @xmath194 .",
    "we will use two parameters @xmath321 , which will be determined later .",
    "the parameter @xmath36 specifies the size of the neighborhoods used by the matching algorithms , and @xmath322 is the error tolerance value used when applying lemmas or corollaries .",
    "recall that @xmath22 is a transformation with the maximum number of transformations generated by the random experiments in its @xmath36-neighborhood and @xmath21 the transformation maximizing @xmath319 .",
    "let @xmath323 denote the failure probability from lemma  [ la : key ] in terms of the number of experiments @xmath34 and the error tolerance @xmath322 , for translations @xmath324 and for rigid motions @xmath325 .",
    "since @xmath326 holds by definiton , we only have to show that @xmath327 . by lemma  [ la : happrox ] for translations and rigid motions",
    "@xmath328 with probability at least @xmath313 .    _ translations : _ in the case of translations we have by lemma  [ la : density ] @xmath329 , @xmath330 by lemma  [ la : lipschitz ] , and @xmath331 . then by @xmath332 bounding this error to be at most @xmath27",
    ", we get @xmath333 in order to maximize this expression we differentiate it with respect to @xmath36 and determine the value of @xmath36 for which that derivative is zero .",
    "the value of @xmath36 maximizing the above expression and the corresponding value of @xmath322 are then @xmath334 finally , we want the probaility of failure @xmath324 to be at most @xmath84 .",
    "a straightforward analysis shows that for @xmath335 this value is at most @xmath336 .",
    "solving the inequality @xmath337 with respect to @xmath34 we get that for @xmath338 the approximation error is at most @xmath27 with probability at least @xmath67 .    _ rigid motions with random rotation angle : _ here we have by lemma  [ la : rmra ] @xmath329 , @xmath339 by lemma  [ la : lipschitz ] , and @xmath340 .",
    "then by @xmath341 again , bounding this error by @xmath27 and maximizing the expression for @xmath322 as in the case of translations we get that the optimal choice for @xmath36 and @xmath322 is @xmath342 by a straightforward analysis the probability of failure @xmath325 is at most @xmath336 for all @xmath343 .",
    "solving the inequality @xmath344 with respect to @xmath34 we get that for all @xmath345 the approximation error of the algorithm is at most @xmath27 with probability at least @xmath67 .",
    "next we prove theorem  [ thm : abs31 ] in a similar fashion .",
    "since in algorithm probmatchrm3 + 1 some random samples are rejected and , therefore , do not induce a vote in the transformation space , we first determine the necessary number of not rejected experiments , in the following denoted by @xmath195 , in order to guarantee the required error bound with high probability .",
    "afterwards , we determine the total number @xmath34 of random samples that the algorithm needs to generate in order to record at least @xmath195 votes in the transformation space with high probability .",
    "let @xmath319 denote the area of overlap @xmath320 , @xmath203 the density of the probability distribution @xmath205 in the space of rigid motions induced by algorithm probmatchrm3 + 1 , and @xmath197 the lipschitz constant of @xmath194 .",
    "let @xmath22 be a transformation with the maximum number of transformations generated by the random experiments in its @xmath36-neighborhood and @xmath21 the transformation maximizing @xmath319 .",
    "let @xmath323 denote the failure probability from lemma  [ la : key ] in terms of the number of votes @xmath195 and the error tolerance  @xmath322 , @xmath346 .",
    "since @xmath326 holds by definition , we only have to show that @xmath327 . by lemma  [ la : happrox ] @xmath347 with probability at least @xmath313 .    for algorithm probmatchrm3 + 1 the density function @xmath348 , where @xmath160 is the constant from lemma  [ la : rm31 ] .",
    "the lipschitz constant is @xmath349 by lemma  [ la : lipschitz ] , where @xmath73 is the diameter and @xmath72 the length of the boundary of @xmath0 , and the size of the @xmath36-neighborhood is @xmath340 . in the proof of lemma  [ la : lipschitz ] we actually showed a stronger bound on the lipschitz constant ( equation  ) , namely @xmath350 , which is @xmath351 .",
    "this stronger bound is used in the computations below .",
    "additionally , since the shapes @xmath0 and @xmath1 are @xmath74-fat , and the shape @xmath0 is the one with the smaller largest inscribed circle , the maximal area of overlap of @xmath0 and @xmath1 under rigid motions is at least as large as the area of the largest inscribed circle in @xmath0 , that is , @xmath352 .",
    "by lemma  [ la : happrox ] we get that with probability at least @xmath313 @xmath353 hence , @xmath354 restricting this error to be at most @xmath27 and maximizing the expression for @xmath322 we get that the optimal values for @xmath36 and @xmath322 are @xmath355 the probability of failure is @xmath356 .",
    "analogous to the proof of theorem  [ thm : main_absolute ] we can show that @xmath357 for all @xmath358 .",
    "thus , if the number of recorded votes is @xmath359 where @xmath79 , @xmath72 is the length of the boundary of @xmath0 , @xmath73 is the diameter of @xmath0 , and @xmath100 is an appropriate constant , then the area of overlap determined by the algorithm differes by at most @xmath27 from the maximal area of overlap with probability at least @xmath360 .",
    "next we determine the total number @xmath34 of random samples that the algorithm needs to generate in order to record at least @xmath195 votes with probability at least @xmath360 .",
    "for that purpose we first determine the probability that one randomly generated sample is not rejected .",
    "let @xmath361 , and @xmath362 denote the largest inscribed circles in @xmath0 and @xmath1 , respectively . and",
    "let @xmath363 denote the radii of @xmath361 and @xmath362 . by the definition of @xmath74-fatness @xmath364 and @xmath365 , and by a precondition of the theorem @xmath366 .",
    "consider a circle @xmath367 of radius @xmath368 contained in @xmath0 and a circle @xmath369 concentric with @xmath362 of radius @xmath370 in @xmath1 .",
    "the area of @xmath367 is at least @xmath371 and the area of @xmath369 is at least @xmath372 .",
    "then the probability that two randomly selected points @xmath373 and @xmath374 from @xmath0 are both contained in @xmath367 is at least @xmath375 .",
    "the distance between @xmath373 and @xmath374 is at most @xmath368 .",
    "the probability that a randomly selected point @xmath179 from @xmath1 is contained in @xmath369 is at least @xmath376 , and by construction , the complete circle centered at @xmath179 with radius equal to the distance between @xmath373 and @xmath374 is completely contained in @xmath377 .",
    "therefore , for every choice of two points in @xmath378 and a point in @xmath369 and for every randomly chosen direction the random sample induces a vote in transformation space .",
    "the probability that one random sample is not rejected is then at least as large as @xmath379 . in the following this probability",
    "is denoted by @xmath23 .",
    "our algorithm generates in every step random samples independently . for each sample",
    "the probability not to be rejected is at least @xmath23 .",
    "then the expected number of valid samples after @xmath34 steps is at least @xmath380 .",
    "let @xmath133 denote the number of valid samples after @xmath34 steps . using the chernoff bound ( theorem  [ thm : chernoff ] ) we can determine the number of steps @xmath34 for which @xmath133 is not much smaller than @xmath380 with high probaility : @xmath381 for all @xmath382 .",
    "for @xmath383 we have @xmath384 . restricting this failure probability to be at most @xmath385",
    "we get that for @xmath386 the number of votes @xmath133 is at least @xmath387 with probability at least @xmath360 .",
    "then with @xmath388 random samples the algorithm geenrates at least @xmath195 votes with probability at least @xmath360 .",
    "finally , choosing @xmath389 with appropriate constants @xmath390 , we get that with probability at least @xmath391 the number of recorded votes ist sufficiently large , and therefore , with probaility at least @xmath392 the approximation of the maximum area of overlap differs from the optimum by at most @xmath27 .    for a given arrangement @xmath99 and an error tolerance @xmath10",
    "the depth approximation algorithm of @xcite finds a point @xmath107 such that the depth of @xmath107 is at least @xmath10 times the maximum depth in @xmath99 .",
    "it remains to show that with high probability the area of overlap induced by @xmath107 is a good approximation of the maximal area of overlap .",
    "let @xmath203 be the density of the probability distribution @xmath205 in the transformation space induced by the algorithm , and @xmath197 the lipschitz constant of @xmath194 .",
    "let @xmath99 be the arrangement of @xmath36-neighborhoods of the transformations resulting from the random experiments for some parameter @xmath393 which will be specified later .",
    "additionally we will use an error tolerance value @xmath394 when applying lemmas or corollaries .",
    "the parameter @xmath322 will also be computed later .",
    "let @xmath22 be a transformation with maximum depth in the arrangement @xmath99 , @xmath107 the transformation approximating the maximum depth , i.e. , @xmath395 , and @xmath21 the transformation maximizing @xmath319 . and let @xmath323 denote the failure probability from lemma  [ la : key ] .",
    "applying lemma [ la : lipschitz ] and corollary [ cor : output ] to @xmath107 and error tolerance @xmath322 we get @xmath396 and , likewise , by lemmas [ la : lipschitz ] and [ la : key ] @xmath397    since @xmath398 holds by definition , we only have to show @xmath399 .    consider case 1 : @xmath400",
    ". then @xmath401 if @xmath402 ( case 2 ) we have that @xmath403 it follows that also @xmath404 .",
    "now we can bound the difference @xmath405 : @xmath406 then in case 1 and in case 2 @xmath407 .",
    "observe that this error bound for @xmath107 differs from the bound for @xmath22 in lemma  [ la : happrox ] only by a constant in the summand @xmath408 .",
    "therefore we can complete the proof of the theorem [ thm : time ] by the same arguments as in the proof of theorem  [ thm : main_absolute ] with values of @xmath36 and @xmath322 that differ from equations  , , and only by constants .",
    "we showed that our algorithm is a relative error approximation under the assumption that the maximal area of overlap of the two input shapes is at least a small constant fraction of one of the shapes .",
    "this is a reasonable assumption , but nevertheless it would be interesting to know whether the algorithm is a relative error approximation without further assumptions on the shapes .    furthermore , it might be reasonable to use measure theoretic methods for the analysis of the algorithm .",
    "we can show that @xmath409 converges almost surely uniformly to @xmath257 on @xmath4 , using the uniform law of large numbers ii , as stated in @xcite .",
    "but it appears difficult to determine the convergence rate to deduce bounds on the required number of random experiments by measure theoretic methods .",
    "it is an interesting question how to apply our probabilistic technique to matching shapes under similarity maps .",
    "the straightforward technique of choosing a pair of random points from @xmath0 and one from @xmath1 and giving a vote to the corresponding similarity map does not lead to the desired result .",
    "furthermore , choosing three points in each shape defines a unique affine transformation that maps the points onto each other , so there is a canonical version of the algorithm for affine transformations .",
    "it would be interesting to know whether this algorithm computes something useful if the parametrization of the space and the definition of the neighborhoods are chosen cleverly .",
    "helmut alt and leonidas  j. guibas .",
    "discrete geometric shapes : matching , interpolation , and approximation . a survey . in j .-",
    "sack and j.  urrutia , editors , _ handbook of computational geometry _ , pages 121153 , amsterdam , 1999 .",
    "elsevier science publishers b.v .",
    "north - holland .",
    "helmut alt and ludmila scharf .",
    "shape matching by random sampling . in _",
    "3rd annual workshop on algorithms and computation ( walcom 2009 ) _ , volume 5431 of _ lecture note in computer science _ ,",
    "pages 381393 , 2009 .",
    "boris aronov and sariel har - peled . on approximating the depth and related problems .",
    "in _ soda 05 : proceedings of the sixteenth annual acm - siam symposium on discrete algorithms _ , pages 886894 .",
    "society for industrial and applied mathematics , 2005 ."
  ],
  "abstract_text": [
    "<S> we analyze a probabilistic algorithm for matching shapes modeled by planar regions under translations and rigid motions ( rotation and translation ) . </S>",
    "<S> given shapes @xmath0 and @xmath1 , the algorithm computes a transformation @xmath2 such that with high probability the area of overlap of @xmath3 and @xmath1 is close to maximal . in the case of polygons , we give a time bound that does not depend significantly on the number of vertices . </S>"
  ]
}