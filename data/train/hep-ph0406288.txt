{
  "article_text": [
    "_ formcalc _  @xcite is a mathematica package for the calculation of feynman amplitudes .",
    "it prepares the amplitudes generated by _",
    "feynarts_@xcite for numerical evaluation .",
    "this consists of an algebraic simplification step , including e.g.  the tensor reduction and the calculation of fermionic traces , and a code generation step , where the complete fortran code for the evaluation of the squared matrix element is written out .",
    "currently , diagrams up to one loop can be simplified , and kinematics are supplied for @xmath0 , @xmath1 , and @xmath2 processes .",
    "the present article describes the new features added in version 4 .",
    "they can be classified into    _ performance features : _",
    "+  weyl  van der waerden ( wvdw ) formalism , +  phase - space integration by the cuba  library , +  parallelization by shell script ,    _ convenience features : _",
    "+  log - file management , +  a simple way to resume aborted calculations , +  shell scripts to perform common tasks ,    _ modularity / reusability features : _ +  general - purpose utilities library , +  organization into master- and sub - makefiles , +  symbol prefixing to avoid name conflicts .",
    "furthermore , the new ` feyninstall ` script greatly simplifies the installation or upgrade of the _ feynarts _ , _ formcalc _ , and _ looptools _   packages .",
    "amplitudes involving external fermions have the form @xmath3 where the @xmath4 are ( products of ) fermion chains .",
    "the textbook recipe is to compute probabilities , such as @xmath5 and evaluate the @xmath6 by standard trace techniques .",
    "the problem with this approach is that instead of @xmath7 of the @xmath4 one needs to compute @xmath8 of the @xmath6 .",
    "since essentially @xmath9 , this quickly becomes a limiting factor in problems involving many vectors , e.g.  in multi - particle final states or polarization effects .",
    "the solution is of course to compute the amplitude @xmath10 directly and this is done most conveniently in the wvdw formalism @xcite .",
    "the implementation of this technique in an automated program has already been outlined in @xcite and is now tested and available in _ formcalc _  4 .",
    "the ` fermionchains ` option of ` calcfeynamp ` determines how fermion chains are returned : ` weyl ` , the default , selects weyl chains .",
    "` chiral ` and ` va ` select dirac chains in the chiral ( @xmath11 ) and vector / axial - vector ( @xmath12 ) decomposition , respectively .",
    "the weyl chains do not need to be further evaluated with ` helicityme ` , which applies the trace technique .",
    "the wvdw method has other advantages , too : polarization does not ` cost ' extra in terms of cpu time , that is , one gets the spin physics for free . whereas with the trace technique",
    "the formulas become significantly more bloated when polarization is taken into account , in the wvdw formalism one actually needs to sum up the polarized amplitudes to get the unpolarized result .",
    "there is also better numerical stability because components of @xmath13 are arranged as ` large ' and ` small ' matrix entries , viz .",
    "@xmath14 cancellations of the form @xmath15 for @xmath16 are avoided and hence mass effects are treated more accurately .",
    "the recently completed cuba  library @xcite has been integrated into _ formcalc _",
    "4 . it provides four subroutines for multidimensional numerical integration .",
    "all four have a very similar invocation and can thus be interchanged easily , e.g.  for comparison .",
    "the flexibility of a general - purpose method is particularly useful in the setting of automatically generated code .",
    "the following algorithms are included :    _ vegas _ is the classic monte carlo algorithm which uses importance sampling for variance reduction .",
    "it iteratively builds up a piecewise constant weight function , represented on a rectangular grid .",
    "each iteration consists of a sampling step followed by a refinement of the grid .",
    "the present implementation uses sobol quasi - random numbers for sampling .",
    "_ suave _ is a crossover between vegas and miser and combines vegas - style importance sampling with globally adaptive subdivision : until the requested accuracy is reached , the region with the largest error is bisected along the axis in which the fluctuations of the integrand are reduced most . in each half the number of new samples",
    "is prorated for the fluctuation .",
    "_ divonne _ is a further development of the cernlib routine d151 .",
    "it is intrinsically a monte carlo algorithm but has cubature rules built in for comparison , too .",
    "the variance - reduction method is stratified sampling . in a first step",
    ", a tessellation of the integration region is constructed in which all subregions have an approximately equal value of the spread , defined as @xmath17 minimum and maximum here are sought using methods from numerical optimization .",
    "the subregions are then sampled independently with a number of points extrapolated to reach the required accuracy . for each region , the latterly obtained value is compared to the initial rough estimate and if the two are not compatible within their errors , the region is subdivided or sampled once more .",
    "additions with respect to the cernlib version are the final comparison phase and the possibility to point out known extrema , to speed up convergence .",
    "_ cuhre _ is a new implementation of dcuhre .",
    "it is a deterministic algorithm which employs cubature rules of a polynomial degree .",
    "variance reduction is by globally adaptive subdivision : until the requested accuracy is reached , bisect the region with the largest error along the axis with the largest fourth difference .",
    "[ fig : eetta ] compares the performance of the four algorithms for a real phase - space integration of the process @xmath18 .",
    "above all it is very important to have several independent integration methods to cross - check the results .    the number of integrand evaluations for the phase - space integration of @xmath19 at a requested relative accuracy of @xmath20 . ]",
    "calculations in models like the mssm , where not all input parameters are yet known , often require extensive scans to cover an interesting part of the parameter space .",
    "such a scan can be a real cpu hog , but on the other hand , the calculation can be performed completely independently for each parameter set and is thus an ideal candidate for parallelization .",
    "the real question is thus not how to parallelize the calculation , but how to automate the parallelization .    in _ formcalc",
    "_ , the user may specify parameter loops by defining preprocessor variables , e.g.     .... # define loop1 do 1 tb = 2 , 30 ....    these definitions are substituted at compile time into a main loop of the form + `       loop1 ` + `       loop2 ` + `         `",
    "@xmath21 + `       ` _ _ calculate cross - section _ _ + `   1    continue ` + the obstacle to automatic parallelization is that the loops are user - defined and in general nested .",
    "a serial number is introduced to unroll the loops : + `       s = 0 ` + `       loop1 ` + `       loop2 ` + `         ` @xmath21 + `       s = s + 1 ` + `       if ( s ` _ _ not in allowed range _ _ ` ) goto 1 ` + `       ` _ _ calculate cross - section _ _ + `   1    continue ` + the serial number range can be specified on the command line so that it is quite straightforward to distribute patches of serial numbers on different machines .",
    "most easily this is done in an interleaved manner , since one then does not need to know to which upper limit the serial number runs , i.e.  if there are @xmath22 machines available , send serial numbers 1 , @xmath23 , @xmath24 , etc .",
    "on machine 1 , send serial numbers 2 , @xmath25 , @xmath26 , etc .  on machine 2 ,     this procedure",
    "is completely automated in _ formcalc _  4 :",
    "the user once creates a ` .submitrc ` file in his home directory and lists there all machines that may be used , one on each line . in the case of multi - processor machines",
    "he puts the number of processors after the host name .",
    "the executable compiled from _ formcalc",
    "_  code , typically called ` run ` , is then simply prefixed with ` submit ` .",
    "for instance , instead of    ....     run uuuu 500,1000 ....    the user invokes    ....     submit run uuuu 500,1000 ....    the ` submit ` script uses ` ruptime ` to determine the load of the machines and ` ssh ` to log in .",
    "handling of the serial number is invisible to the user .",
    "due to the parallelization mechanism , a single output file is no longer sufficient . instead of a single log file , _ formcalc _",
    "4 creates a log directory , opens one log file for each serial number in this directory , and redirects console output to this file .",
    "each log file contains both the ` real ' data and the ` chatter ' ( progress , warning , and error messages ) .",
    "this has the advantage that no unit numbers must be passed between subroutines  every bit of output is simply written to the console ( unit ` * ` in fortran ) .",
    "it also makes it easier to pinpoint errors , since the error message appears right next to the corrupted data .",
    "the ` real ' data are marked by an @ in column 1 and there exists a simple shell script , ` data ` , to extract the real data from the log file .",
    "the new log - file management also provides an easy way to resume an aborted calculation .",
    "this works as follows : when running through the loops of a parameter scan , the log file for a particular serial number +  may not exist : + then it is created with execute permissions , +  may exist , but have execute permissions : + then it is overwritten , +  may exist and have read - write permissions : + then this serial number is skipped .",
    "+ the execute permissions , which serve here merely as a flag to indicate an ongoing calculation , are reduced to ordinary read - write permissions when the log file is closed .    in other words ,",
    "the program skips over the parts of the calculation that are already finished , so all the user has to do to resume an aborted calculation is start the program again with the same parameters .",
    "_ formcalc _  4 includes a few useful shell scripts :    ` sfx ` packs all source files ( but not object , executable , or log files ) in the directory it is invoked in into a mail - safe self - extracting archive . for example , if ` sfx ` is invoked in the directory ` myprocess ` , it produces ` myprocess.sfx ` .",
    "this file can e.g.  be mailed to a collaborator , who needs to say `` ` myprocess.sfx x ` '' to unpack the contents .",
    "` pnuglot ` produces a high - quality plot in encapsulated postscript format from a data file in just one line .",
    "in fact , ` pnuglot ` does not even make the plot itself , it writes out a shell script to do that , thus `` ` pnuglot mydata ` '' creates ` mydata.gpl ` which then runs gnuplot , latex , and dvips to create ` mydata.eps ` .",
    "the advantage of this indirect method is that the default gnuplot commands in ` mydata.gpl ` can subsequently be edited to suit the user s taste . adding a label or choosing a different line width is , for example , a pretty trivial matter .",
    "needless to say , all labels are in latex  and type 1 fonts are selected to make the eps file nicely scalable .",
    "` turnoff ` switches off ( and on ) the evaluation of certain parts of the amplitude , which is a handy thing for testing .",
    "for example , `` ` turnoff box ` '' switches off all parts of the amplitude with ` box ' in their name .",
    "invoking ` turnoff ` without any argument restores all modules .",
    "the fortran code is organized in _ formcalc _  4 into a main code directory , which contains the main program and all its prerequisite files , and subsidiary ` folders ' ( subdirectories to the main code directory ) .",
    "the default setup looks like this :    ( 200,100 ) ( 55,90)[b]main code directory ( 55,80)[b](created by ` setupcodedir ` ) ( 0,77)(110,77 ) ( 55,77)(55,62 ) ( 55,62)(65,62 ) ( 70,62)[l]`squaredme/ ` ( 70,52)[l](generated by ` writesquaredme ` ) ( 45,77)(45,39 ) ( 45,39)(65,39 ) ( 70,39)[l]`renconst/ ` ( 70,29)[l](generated by ` writerenconst ` ) ( 35,77)(35,16 ) ( 35,16)(65,16 ) ( 70,16)[l]`util/ ` ( 70,6)[l](comes with _ formcalc _ )    each folder is equipped with its own makefile which makes a library of the same name , e.g.  the makefile in ` util/ ` makes the library ` util.a ` .",
    "these sub - makefiles are orchestrated by the master makefile .",
    "libraries required for the main program are listed in the ` libs ` variable and built automatically by invoking the sub - makefiles :    ....    libs = squared_me.a renconst.a util.a ....    the master makefile is no longer overwritten in the code - generation process and is treated like the other driver programs , i.e.  a customized copy can be saved in the local drivers directory .",
    "occasionally it is useful to have more than one instance of ` squaredme ` ( or ` renconst ` ) , e.g.  when computing an hadronic cross - section to which several partonic processes contribute .",
    "both ` writesquaredme ` and ` writerenconst ` have the ` folder ` option , with which a unique folder name can be chosen , and the ` symbolprefix ` option , with which the symbols visible to the linker can be prefixed with a unique identifier .",
    "this identifier is inserted only at compile time and can easily be changed in the sub - makefile at any time .",
    "the ` util ` library is a collection of ancillary routines which currently includes : +  system utilities ( log file management ) , + ",
    "kinematic functions ( pair , eps , @xmath27 ) , +  diagonalization routines ( eigenvalues , @xmath27 ) , +  univariate integrators ( gauss , patterson ) , +  multivariate integrators ( cuba  library ) . +",
    "older versions of _ formcalc _  used to include these directly into the main program .",
    "the library version has the advantage that the linker selects only the routines that are actually needed , and furthermore it is straightforward to add new code .",
    "the ` util.a ` library is compiled once when _ formcalc _  is installed and then copied to the main code directory , thus avoiding unnecessary compiles .",
    "_ formcalc _  4 is the latest release of the mathematica package _ formcalc _  for computing feynman diagrams .",
    "it has many new features enhancing in particular performance , convenience , and modularity ."
  ],
  "abstract_text": [
    "<S> _ formcalc _  is a mathematica package for the automatic computation of tree - level and one - loop feynman amplitudes . </S>",
    "<S> it accepts diagrams generated by _ </S>",
    "<S> feynarts _ , simplifies them , and generates a complete fortran code for their numerical evaluation . </S>",
    "<S> version 4 includes new features which enhance performance , convenience of use , and modularity / code reusability . </S>"
  ]
}