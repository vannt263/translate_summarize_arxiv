{
  "article_text": [
    "recently , the design and analysis of coding schemes representing generalizations of gallager s low - density parity - check ( ldpc ) codes @xcite has gained increasing attention .",
    "this interest is motivated above all by the potential capability of these coding schemes to offer a better compromise between waterfall and error floor performance than is currently offered by state - of - the - art ldpc codes .    in the tanner graph of an ldpc code ,",
    "any degree-@xmath1 variable node ( vn ) may be interpreted as a length-@xmath1 repetition code , i.e. , as a @xmath2 linear block code .",
    "similarly , any degree-@xmath3 check node ( cn ) may be interpreted as a length-@xmath3 single parity - check ( spc ) code , i.e. , as a @xmath4 linear block code .",
    "the first proposal of a class of linear block codes generalizing ldpc codes may be found in @xcite , where it was suggested to replace each cn of a regular ldpc code with a generic linear block code , to enhance the overall minimum distance .",
    "the corresponding coding scheme is known as a regular generalized ldpc ( gldpc ) code , or tanner code , and a cn that is not a spc code as a generalized cn .",
    "more recently , irregular gldpc codes were considered ( see for instance @xcite ) . for such codes , the vns exhibit different degrees and the cn set is composed of a mixture of different linear block codes .",
    "a further generalization step is represented by doubly - generalized ldpc ( d - gldpc ) codes @xcite . in a d - gldpc code ,",
    "not only the cns but also the vns may be represented by generic linear block codes .",
    "the vns which are not repetition codes are called generalized vns . the main motivation for introducing generalized vns",
    "is to overcome some problems connected with the use of generalized cns , such as an overall code rate loss which makes gldpc codes interesting mainly for low code rate applications , and a loss in terms of decoding threshold ( for a discussion on drawbacks of generalized cns and on beneficial effects of generalized vns we refer to @xcite and @xcite , respectively ) .    a useful tool for analysis and design of ldpc codes and their generalizations is represented by the growth rate of the weight distribution , or equivalently , the asymptotic weight enumerating function ( wef ) .",
    "the growth rate of the weight distribution was introduced in @xcite to show that the minimum distance of a randomly generated regular ldpc code with a vn degree of at least three is a linear function of the codeword length with high probability .",
    "the same approach was taken in @xcite and @xcite to obtain related results on the minimum distance of subclasses of tanner codes .",
    "the growth rate of the weight distribution has been subsequently investigated for unstructured ensembles of irregular ldpc codes .",
    "works in this area are @xcite .",
    "in particular , in @xcite a technique for approximate evaluation of the growth rate of any ( eventually expurgated ) irregular ldpc ensemble has been developed , based on hayman s formula .",
    "asymptotic weight enumerators of ensembles of irregular ldpc codes based on protographs and on multiple edge types have been derived in @xcite and @xcite , respectively .",
    "the approach proposed in @xcite has then been extended to protograph gldpc codes and to protograph d - gldpc codes in @xcite and @xcite , respectively . in @xcite , the authors presented a compact formula for the growth rate of general unstructured irregular d - gldpc code ensembles for the specific case of _ small _ weight codewords .    in this paper , an analytical expression for the growth rate of the weight distribution of a general unstructured irregular ensemble of d - gldpc codes",
    "is developed . as opposed to the formula developed in @xcite , the proposed expression holds for any codeword weight .",
    "the present work also extends to the fully - irregular case an expression for the growth rate obtained in @xcite assuming a cn set composed of linear block codes all of the same type . in the process of this development",
    ", we obtain an efficient evaluation tool for computing the growth rate exactly .",
    "this tool always requires the solution of a @xmath5 polynomial system of equations , _ regardless _ of the number of vn types and cn types in the d - gldpc ensemble .",
    "as shown through numerical examples , the proposed tool allows to obtain a precise plot of the growth rate with a low computational effort . for the case of irregular ldpc codes ,",
    "a technique for numerical evaluation of the growth rate of the weight distribution was given in @xcite ; in contrast to the technique developed in this paper , the method of @xcite provided an _ approximate _ numerical solution for the growth rate ; it is also more computationally complex than that proposed in the present work .",
    "we define a d - gldpc code ensemble @xmath6 as follows , where @xmath7 denotes the number of vns .",
    "there are @xmath8 different cn types @xmath9 , and @xmath10 different vn types @xmath11 . for each cn type @xmath12 , we denote by @xmath13 , @xmath14 and @xmath15 the cn dimension , length and minimum distance , respectively . for each vn type @xmath16 , we denote by @xmath17 , @xmath18 and @xmath19 the vn dimension , length and minimum distance , respectively . for @xmath12 , @xmath20 denotes the fraction of edges connected to cns of type @xmath21 .",
    "similarly , for @xmath16 , @xmath22 denotes the fraction of edges connected to vns of type @xmath21 .",
    "note that all of these variables are independent of @xmath7 .",
    "the polynomials @xmath23 and @xmath24 are defined by @xmath25 and @xmath26 .",
    "if @xmath27 denotes the number of edges in the tanner graph , the number of cns of type @xmath28 is then given by @xmath29 , and the number of vns of type @xmath30 is then given by @xmath31 .",
    "denoting as usual @xmath32 and @xmath33 by @xmath34 and @xmath35 respectively , we see that the number of edges in the tanner graph is given by @xmath36 and the number of cns is given by @xmath37 .",
    "therefore , the fraction of cns of type @xmath12 and the fraction of vns of type @xmath16 are given by @xmath38 respectively .",
    "also the length of any d - gldpc codeword in the ensemble is given by @xmath39 note that this is a linear function of @xmath7 .",
    "similarly , the total number of parity - check equations for any d - gldpc code in the ensemble is given by @xmath40 .",
    "a member of the ensemble @xmath6 then corresponds to a permutation on the @xmath27 edges connecting cns to vns .",
    "the wef for cn type @xmath12 is given by @xmath41 . here",
    "@xmath42 denotes the number of weight-@xmath43 codewords for cns of type @xmath21 .",
    "the input - output weight enumerating function ( io - wef ) for vn type @xmath16 is given by @xmath44 . here",
    "@xmath45 denotes the number of weight-@xmath46 codewords generated by input words of weight @xmath43 , for vns of type @xmath21 .",
    "also , @xmath47 is the total number of weight-@xmath48 codewords for vns of type @xmath21 .",
    "if there exist cns and vns with minimum distance equal to @xmath48 , and define the ( positive ) parameters @xmath49    the design rate of any d - gldpc ensemble is given by @xmath50 where for @xmath12 ( resp .",
    "@xmath16 ) @xmath51 is the local code rate of a type-@xmath21 cn ( resp .",
    "vn ) .    throughout this paper ,",
    "the notation @xmath52 denotes napier s number , all the logarithms are assumed to have base @xmath53 and for @xmath54 the notation @xmath55 denotes the binary entropy function .",
    "the growth rate of the weight distribution of the irregular d - gldpc ensemble sequence @xmath56 is defined by @xmath57 \\label{eq : growth_rate_result}\\ ] ] where @xmath58 denotes the expectation operator over the ensemble @xmath6 , and @xmath59 denotes the number of codewords of weight @xmath60 of a randomly chosen d - gldpc code in the ensemble @xmath6 .",
    "the limit in ( [ eq : growth_rate_result ] ) assumes the inclusion of only those positive integers @xmath7 for which @xmath61 and @xmath62 $ ] is positive .",
    "note that the argument of the growth rate function @xmath63 is equal to the ratio of d - gldpc codeword length to the number of vns ; by ( [ eq : dg_ldpc_codeword_length ] ) , this captures the behaviour of codewords linear in the block length , as in @xcite for the ldpc case .",
    "a d - gldpc ensemble is said to be _ asymptotically good _ if and only if @xmath64 . the parameter @xmath65 is called the _ ensemble relative minimum distance_. in @xcite , it was shown that a d - gldpc ensemble is always asymptotically good if there exist no cns or vns with minimum distance @xmath48 while , if the exist both cns and vns with minimum distance @xmath48 , the ensemble is asymptotically good if and only if @xmath66 , where @xmath67 and @xmath68 are given by ( [ eq : c_v_definitions ] ) .",
    "note that using ( [ eq : dg_ldpc_codeword_length ] ) , we may also define the growth rate with respect to the number of d - gldpc code bits @xmath69 as follows : @xmath70 \\ ; .",
    "\\label{eq : growth_rate_result_norm}\\ ] ] it is straightforward to show that @xmath71 where @xmath72    in this section , we formulate an expression of the growth rate for an irregular d - gldpc ensemble @xmath6 over a wider range of @xmath73 than was considered in @xcite ( where the case @xmath74 was analyzed ) .",
    "the following theorem constitutes our main result .",
    "the growth rate of the weight distribution of the irregular d - gldpc ensemble sequence @xmath56 is given by @xmath75 where @xmath76 , @xmath77 , @xmath78 and @xmath79 are the unique positive real solutions to the @xmath0 system of polynomial equations ) ,  ( [ eq : x0_y0_eqn_1 ] ) and  ( [ eq : x0_y0_eqn_2 ] ) are not polynomial as set down here , each may be made polynomial by multiplying across by an appropriate factor . ]",
    "@xmath80 @xmath81 @xmath82 and @xmath83 [ thm : growth_rate ]    the theorem is proved in section [ sec : proof_of_main_result ] .",
    "in this section we prove theorem [ thm : growth_rate ] .",
    "the proof uses the concepts of _ assignment _ and _ split assignment _ , defined next .",
    "an _ assignment _ is a subset of the edges of the tanner graph .",
    "an assignment is said to have _ weight _",
    "@xmath84 if it has @xmath84 elements .",
    "an assignment is said to be _ check - valid _ if the following condition holds : supposing that each edge of the assignment carries a @xmath85 and each of the other edges carries a @xmath86 , each cn recognizes a valid local codeword .",
    "a _ split assignment _ is an assignment , together with a subset of the d - gldpc code bits ( called a _ codeword assignment _ ) .",
    "a split assignment is said to have _ split weight _",
    "if its assignment has weight @xmath46 and its codeword assignment has @xmath43 elements .",
    "a split assignment is said to be _ check - valid _ if its assignment is check - valid .",
    "a split assignment is said to be _ variable - valid _ if the following condition holds : supposing that each edge of its assignment carries a @xmath85 and each of the other edges carries a @xmath86 , and supposing that each d - gldpc code bit in the codeword assigment is set to @xmath85 and each of the other code bits is set to @xmath86 , each vn recognizes a local input word and the corresponding valid local codeword .    for ease of presentation , the proof is broken into two parts .",
    "first we derive an expression , valid asymptotically , for the number of check - valid assignments of weight @xmath88 . for each @xmath12 , let @xmath89 denote the portion of the total weight @xmath88 apportioned to cns of type @xmath21 . then @xmath90 for each @xmath12 , and @xmath91 . also denote @xmath92 .",
    "consider the set of @xmath93 cns of a particular type @xmath12 , where @xmath94 is given by ( [ eq : gamma_t_delta_t_definition ] ) .",
    "using generating functions , the number of check - valid assignments ( over these cns ) of weight @xmath89 is given by @xmath95\\ ] ] where @xmath96 $ ] denotes the coefficient of @xmath97 in the polynomial @xmath98 .",
    "we next make use of the following result , which is a special case of ( * ? ? ?",
    "* corollary 16 ) :    let @xmath99 , where @xmath100 , be a polynomial satisfying @xmath101 and @xmath102 for all @xmath103 . then @xmath104 = \\log \\left ( \\frac{a(z)}{z^{\\xi } } \\right)\\ ] ] where @xmath105 is the unique positive real solution to @xmath106 [ lemma : optimization_1d ]    applying this lemma by substituting @xmath107 , @xmath108 and @xmath109 , we obtain that as @xmath110 @xmath111   \\label{eq : nct_epsilon_start } \\\\",
    "\\rightarrow \\exp \\left\\ { m \\left ( \\gamma_t \\log a^{(t)}(z_{0,t } ) - \\epsilon_t \\log z_{0,t } \\right ) \\right\\ }   \\label{eq : nct_epsilon_mid}\\end{aligned}\\ ] ] where , for each @xmath12 , @xmath112 is the unique positive real solution to @xmath113    the number of check - valid assignments of weight @xmath88 satisfying the constraint @xmath114 is obtained by multiplying the numbers of check - valid assignments of weight @xmath89 over @xmath93 cns of type @xmath21 , for each @xmath12 , @xmath115 the number @xmath116 of check - valid assignments of weight @xmath88 is then equal to the sum of @xmath117 over all admissible vectors @xmath114 ; therefore by  ( [ eq : nct_epsilon_mid ] ) , as @xmath118 @xmath119 where @xmath120 as @xmath110 , the asymptotic expression is dominated by the distribution @xmath114 which maximizes the argument of the exponential function , @xmath121 . therefore as @xmath118 @xmath122 where @xmath123 and the maximization is subject to the constraint @xmath124 together with @xmath90 for each @xmath12 , and for every @xmath12 , @xmath112 is the unique positive real solution to  ( [ eq : z0t_soln_to_at_eqn ] ) .",
    "note that for each @xmath12 , ( [ eq : z0t_soln_to_at_eqn ] ) provides an implicit definition of @xmath112 as a function of @xmath125 .",
    "we solve this optimization problem using lagrange multipliers , ignoring for the moment the inequality constraints . at the maximum",
    ", we must have @xmath126 for all @xmath12 , where @xmath127 is the lagrange multiplier .",
    "this yields @xmath128 - \\log z_{0,t } = \\lambda \\ ; .\\ ] ] the term in square brackets is equal to zero due to ( [ eq : z0t_soln_to_at_eqn ] ) ; therefore this simplifies to @xmath129 for all @xmath12 .",
    "we conclude that all of the @xmath130 are equal , and we may write @xmath131 making this substitution in  ( [ eq : n_c_as_function_of_x ] ) and using  ( [ eq : sum_epsilont_constraint ] ) we obtain @xmath132 summing  ( [ eq : z0t_soln_to_at_eqn ] ) over @xmath12 and using ( [ eq : sum_epsilont_constraint ] ) and ( [ eq : z0_all_equal ] ) implies that the value of @xmath78 in  ( [ eq : n_c_asymptotic ] ) is the unique positive real solution to  ( [ eq : z0_eqn ] ) ( here we have also used the fact that @xmath133 ) .",
    "consider the set of @xmath134 vns of a particular type @xmath16 , where @xmath135 is given by ( [ eq : gamma_t_delta_t_definition ] ) .",
    "using generating functions , the number of variable - valid split assignments ( over these vns ) of split weight @xmath136 is given by @xmath137\\ ] ] where @xmath138 $ ] denotes the coefficient of @xmath139 in the bivariate polynomial @xmath140 .",
    "we make use of the following result , which is a special case of ( * ? ? ?",
    "* corollary 16 ) :    let @xmath141 where @xmath142 and @xmath100 , be a bivariate polynomial satisfying @xmath143 for all @xmath144 , @xmath145",
    ". then @xmath146 = \\log \\left ( \\frac{b(x_0,y_0)}{x_0^{\\xi } y_0^{\\theta } } \\right)\\ ] ] where @xmath147 and @xmath148 are the unique positive real solutions to the pair of simultaneous equations @xmath149 and @xmath150 [ lemma : optimization_2d ]    applying this lemma by substituting @xmath151 , @xmath152 , @xmath153 and @xmath154 , we obtain that as @xmath155 @xmath156 \\nonumber \\\\",
    "\\rightarrow \\exp \\left\\ { n x_t^{(\\delta_t)}(\\alpha_t , \\beta_t ) \\right\\ } \\label{eq : nvt_asymptotic}\\end{aligned}\\ ] ] where @xmath157 and where @xmath158 and @xmath159 are the unique positive real solutions to the pair of simultaneous equations @xmath160 and @xmath161 next , note that the expected number of d - gldpc codewords of weight @xmath162 in the ensemble @xmath6 is equal to the sum over @xmath79 of the expected numbers of split assignments of split weight @xmath163 which are both check - valid and variable - valid , denoted @xmath164 : @xmath165 = \\sum_{\\beta } \\mathbb{e}_{{{\\mathcal{m}}}_n } [ n^{v , c}_{\\alpha n , \\beta n } ] \\ ; .\\ ] ] this may then be expressed as @xmath166 = \\sum_{\\substack{\\alpha_t \\ge 0 , t \\in i_v \\\\ \\sum_t \\alpha_t = \\alpha } } \\sum_{\\beta_t \\ge 0 , t \\in i_v } p_{\\mbox{\\scriptsize c - valid}}(\\beta n ) \\\\ \\times \\prod_{t \\in i_v }",
    "n_{v , t}^{(\\delta_t n)}(\\alpha_t n , \\beta_t n ) \\ ; .\\end{gathered}\\ ] ] where @xmath167 .",
    "here @xmath168 denotes the probability that a randomly chosen assignment of weight @xmath169 is check - valid , and is given by @xmath170 applying ( * ? ? ?",
    "( 25 ) ) , we find that as @xmath155 @xmath171 combining this result with  ( [ eq : n_c_asymptotic ] ) , we obtain that as @xmath155 @xmath172 where @xmath173 therefore , as @xmath155 @xmath174 \\rightarrow \\nonumber \\\\ \\ , & \\sum_{\\substack{\\alpha_t \\ge 0 , t \\in i_v \\\\",
    "\\sum_t \\alpha_t = \\alpha } }   \\sum_{\\beta_t , t \\in i_v } \\exp \\left\\ { n \\left ( \\sum_{t \\in i_v } x_t^{(\\delta_t)}(\\alpha_t , \\beta_t ) + y(\\beta ) \\right ) \\right\\}\\end{aligned}\\ ] ] where @xmath175 note that the sum in ( [ eq : g_as_sum_of_exp ] ) is dominated asymptotically by the term which maximizes the argument of the exponential function .",
    "thus , denoting the two vectors of independent variables by @xmath176 and @xmath177 , we have @xmath178 where @xmath179 where @xmath79 is given by ( [ eq : beta_sum_of_betat ] ) , and the maximization is subject to the constraint @xmath180 together with @xmath181 and appropriate inequality constraints on @xmath182 for each @xmath16 , and @xmath183 .    note",
    "that ( [ eq : z0_eqn ] ) provides an implicit definition of @xmath78 as a function of @xmath184 .",
    "similarly , for any @xmath16 , ( [ eq : x0t_y0t_eqn_1 ] ) and ( [ eq : x0t_y0t_eqn_2 ] ) provide implicit definitions of @xmath158 and @xmath159 as functions of the two variables @xmath185 and @xmath182 .    we solve the constrained optimization problem using lagrange multipliers , ignoring for the moment the inequality constraints . at the maximum",
    ", we must have @xmath186 for all @xmath16 , where @xmath187 is the lagrange multiplier .",
    "this yields @xmath188 - \\log x_{0,t } \\\\",
    "+ \\frac{\\partial y_{0,t}}{\\partial \\alpha_t } \\left [ \\delta_t \\frac { \\frac{\\partial b^{(t)}}{\\partial y } ( x_{0,t},y_{0,t})}{b^{(t)}(x_{0,t},y_{0,t } ) } - \\frac{\\beta_t}{y_{0,t } } \\right ] = \\mu \\ ; .\\end{aligned}\\ ] ] the terms in square brackets are zero due to ( [ eq : x0t_y0t_eqn_1 ] ) and ( [ eq : x0t_y0t_eqn_2 ] ) respectively ; therefore this simplifies to @xmath189 for all @xmath16 .",
    "we conclude that all of the @xmath190 are equal , and we may write @xmath191 at the maximum , we must also have @xmath192 for all @xmath16 .",
    "this yields @xmath193 - \\log y_{0,t } - \\log z_0 \\\\",
    "+ \\frac{\\partial y_{0,t}}{\\partial \\beta_t } \\left [ \\delta_t \\frac { \\frac{\\partial b^{(t)}}{\\partial y } ( x_{0,t},y_{0,t})}{b^{(t)}(x_{0,t},y_{0,t } ) } - \\frac{\\beta_t}{y_{0,t } } \\right ] - \\log \\left ( \\frac{1 - \\beta \\int \\lambda}{\\beta \\int \\lambda } \\right ) \\\\ + \\frac{\\partial z_0}{\\partial \\beta_t } \\left [ \\left ( \\frac{\\int \\rho}{\\int \\lambda } \\right ) \\sum_{s \\in i_c } \\gamma_s \\frac{\\frac{\\mathrm{d } a^{(s)}}{\\mathrm{d } z}(z_0)}{a^{(s)}(z_0 ) } - \\frac{\\beta}{z_0 } \\right ] = 0 \\ ; .\\end{gathered}\\ ] ] the terms in square brackets are zero due to ( [ eq : x0t_y0t_eqn_1 ] ) , ( [ eq : x0t_y0t_eqn_2 ] ) and ( [ eq : z0_eqn ] ) respectively ; therefore this simplifies to @xmath194 we conclude that all of the @xmath195 are equal , and we may write @xmath196 rearranging ( [ eq : z0_y0_beta_1 ] ) we obtain ( [ eq : z0_y0_relation ] ) . also , summing ( [ eq : x0t_y0t_eqn_1 ] ) over @xmath16 and using ( [ eq : sum_alpha_constraint ] ) and ( [ eq : x0_all_equal ] )",
    "yields ( [ eq : x0_y0_eqn_1 ] ) .",
    "similarly , summing ( [ eq : x0t_y0t_eqn_2 ] ) over @xmath16 and using ( [ eq : beta_sum_of_betat ] ) and ( [ eq : y0_all_equal ] ) yields ( [ eq : x0_y0_eqn_2 ] ) .",
    "substituting back into ( [ eq : s_definition ] ) and using ( [ eq : x0_all_equal ] ) , ( [ eq : y0_all_equal ] ) , ( [ eq : sum_alpha_constraint ] ) and ( [ eq : beta_sum_of_betat ] ) yields @xmath197 where @xmath76 , @xmath77 , @xmath78 and @xmath79 are the unique positive real solutions to the @xmath0 system of equations ( [ eq : z0_eqn ] ) , ( [ eq : x0_y0_eqn_1 ] ) , ( [ eq : x0_y0_eqn_2 ] ) and ( [ eq : z0_y0_relation ] ) .",
    "finally , ( [ eq : z0_y0_relation ] ) leads to the observation that @xmath198 which , when substituted in ( [ eq : growth_rate_polynomial_general2 ] ) , leads to ( [ eq : growth_rate_polynomial_general ] ) .",
    "in this section the growth rates of two example d - gldpc ensembles of design rate @xmath199 are evaluated using the polynomial solution of theorem [ thm : growth_rate ] .",
    "we use hamming @xmath200 codes as generalized cns and spc codes as generalized vns .",
    "three representations of spc vns are considered , namely , the cyclic ( c ) , the systematic ( s ) and the antisystematic ( a ) representations . generator matrix of a spc code in a form is obtained from the generator matrix in s form by complementing each bit in the first @xmath84 columns .",
    "note that a @xmath201 generator matrix in a form represents a spc code if and only if the code length @xmath202 is odd .",
    "for even @xmath203 we obtain a @xmath204 code with one codeword of weight @xmath85 . ]",
    "ensemble @xmath85 is characterized by two cn types and two vn types . specifically , we have @xmath205 , where @xmath206 denotes a @xmath200 hamming cn type and @xmath207 denotes a length-@xmath208 single parity check ( spc ) cn type , and @xmath209 , where @xmath210 denotes a repetition-@xmath48 vn type and @xmath211 denotes a length-@xmath208 spc cn type in cyclic form .",
    "ensemble @xmath48 is characterized by two cn types and four vn types .",
    "specifically , we have @xmath205 , where @xmath206 denotes a @xmath200 hamming cn type and @xmath207 denotes a spc-@xmath208 cn type , and @xmath212 , where @xmath210 denotes a repetition-@xmath48 vn type , @xmath211 denotes a length-@xmath208 spc cn type in cyclic form , @xmath213 denotes a length-@xmath208 spc cn type in antisystematic form , and @xmath214 denotes a length-@xmath208 spc cn type in systematic form .",
    "the edge - perspective type distributions of the two ensembles are summarized in table  [ table : ensembles ] .",
    "both ensemble 1 and ensemble 2 have been obtained by performing a decoding threshold optimization with differential evolution ( de ) @xcite .",
    "ensemble @xmath85 has been obtained by only imposing the node type and @xmath199 constraint . in this case",
    "we have @xmath215 , so the ensemble is _ asymptotically bad _ ( @xmath216 ) .",
    "ensemble @xmath48 has been obtained by imposing the node type and @xmath199 constraint , together with the constraints @xmath217 and @xmath218 . since in this case we have @xmath219",
    ", the ensemble is _ asymptotically good _ ( @xmath220 ) .",
    "the expected asymptotically bad or good behavior of the two ensembles is reflected in the growth rate curves shown in fig .",
    "[ cap : growth_rates_paper ] . using a standard numerical solver",
    ", it took only @xmath221 s and @xmath222 s to evaluate @xmath223 points on the ensemble @xmath85 curve and on the ensemble @xmath48 curve , respectively .",
    "the relative minimum distance of ensemble @xmath48 is .",
    "llll + & + 1:repetition@xmath224 & @xmath225 & 1:hamming@xmath200 & @xmath226 + 2:spc@xmath227 ( c ) & @xmath228 & 2:spc@xmath227 & @xmath229 +   + & + 1:repetition@xmath224 & @xmath230 & 1:hamming@xmath200 & @xmath226 + 2:spc@xmath227 ( c ) & @xmath231 & 2:spc@xmath227 & @xmath229 + 3:spc@xmath227 ( a ) & @xmath232 & & + 4:spc@xmath227 ( s ) & @xmath233 & & +    [ c ] [ c ] [ l ]    ( 0,0)(0.2,0.2 )    [ l ]    ( 0,0)(0.2,0.2 )",
    "a general expression for the asymptotic growth rate of the weight distribution of irregular d - gldpc ensembles has been presented .",
    "evaluation of the expression requires solution of a @xmath0 polynomial system , irrespective of the number of vn and cn types in the ensemble .",
    "simulation results were presented for two example optimized irregular d - gldpc code ensembles .",
    "this work was supported in part by the ec under seventh fp grant agreement ict optimix n.infso-ict-214625 .",
    "t.  awano , k.  kasai , t.  shibuya , and k.  sakaniwa , `` three - edge type ldpc code ensembles with exponentially few codewords with linear small weight , '' in _ 2008 int .",
    "symp . on information theory and its applications _ , auckland , new zealand , dec .",
    "2008 , pp . 731735 .    s.  abu - surra , w.  e. ryan , and d.  divsalar , `` ensemble enumerators for protograph - based generalized ldpc codes , '' in _ proc . of 2007 ieee global communications conf .",
    "_ , washington , dc , usa , nov .  2007 ,",
    "14921497 .",
    "y.  wang , c .-",
    "wang , and m.  fossorier , `` ensemble weight enumerators for protograph - based doubly generalized ldpc codes , '' in _ proc . of 2008 ieee int . symp . on information theory _ ,",
    "toronto , canada , july 2008 , pp .",
    "11681172 .",
    "m.  f. flanagan , e.  paolini , m.  chiani , and m.  fossorier , `` on the growth rate of the weight distribution of irregular doubly - generalized ldpc codes , '' in _ in proc . of the 46-th allerton conf . on communication , control , and computing _ ,",
    "monticello , il , usa , sept .",
    "2008 , pp .",
    "922929 .",
    "e.  paolini , m.  f. flanagan , m.  chiani , and m.  fossorier , `` on a class of doubly - generalized ldpc codes with single parity - check variable nodes , '' in _ proc . of 2009 ieee int .",
    "symp . on information theory _ , seoul , korea , july 2009 , pp ."
  ],
  "abstract_text": [
    "<S> the growth rate of the weight distribution of irregular doubly - generalized ldpc ( d - gldpc ) codes is developed and in the process , a new efficient numerical technique for its evaluation is presented . </S>",
    "<S> the solution involves simultaneous solution of a @xmath0 system of polynomial equations . </S>",
    "<S> this represents the first efficient numerical technique for _ exact _ evaluation of the growth rate , even for ldpc codes . </S>",
    "<S> the technique is applied to two example d - gldpc code ensembles . </S>"
  ]
}