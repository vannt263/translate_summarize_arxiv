{
  "article_text": [
    "mousehunt is a facebook game developed in 2006 by hitgrab inc .",
    "the goal of the game is to catch mice using a variety of traps .",
    "each species of mice is worth a certain amount of points and gold .",
    "although collecting gold helps the player afford better traps , collecting points is the ultimate goal of the game .",
    "one particularly focus - worthy aspect of the game is that ronza , a nomadic merchant , visits for short periods of time roughly once a year , and sells valuable exclusive traps during these unannounced visits .",
    "we introduce simple models of this game that involve optimizing the number of points gained over a finite time interval .",
    "while the problem s overall description will resemble the classic ski rental problem , the finer details will differ , and we will be able to show different lower bounds on the competitive ratio .",
    "we will approach these problems using both deterministic and randomized online strategies to try to achieve the best possible competitive ratios .    in this paper , we will use the convention that the competitive ratio @xmath0 is always less than 1 , i.e. if our algorithm earns value @xmath1 , and the optimal offline algorithm earns value @xmath2 , then @xmath3 .",
    "we begin by proposing a simple model for mousehunt , where we start with a basic trap that can selectively catch mice worth one point or one gold . assuming that we do nt know when ronza will arrive next , and that we have some estimate @xmath4 of the benefit we gain from ronza s traps , we are able to prove that it is optimal to hunt for gold if and only if the ratio of the gold cost of the trap @xmath5 to the timespan @xmath6 satisfies @xmath7 .",
    "that is , the potential amount of benefit we can gain is worth it iff the cost of the trap is not too high . in this case",
    ", we obtain a competitive ratio of @xmath8 .",
    "if we randomize our strategy , it turns out we can do better than @xmath9-competitive on average .",
    "in the game mousehunt , players attempt to catch different types of mice which give players rewards of points and gold when caught . the reward can therefore be represented as a vector @xmath10 where @xmath11 is the amount of points and @xmath12 is the amount of gold . in the real game , players can use different trap setups to increase their catch rates against certain sets of mice , and the player can select which mice to target by changing their trap setup ( by arming certain types of cheese or traveling to certain locations ) .",
    "traps can be purchased for certain amounts of gold from trapsmiths or from ronza , who visits the mouse - hunting land of gnawnia once a year .",
    "suppose that there are three traps available , @xmath13 , @xmath14 , and @xmath15 .",
    "using trap @xmath13 will allow the player to catch a mouse worth @xmath16 gold , and using trap @xmath14 will allow the player to catch a mouse worth @xmath16 point .",
    "using trap @xmath15 will allow the player to catch a mouse worth @xmath4 points for @xmath17 .",
    "traps @xmath13 and @xmath14 are available at the start of the game while trap @xmath15 can only be purchased from the wandering merchant ronza .",
    "there are @xmath6 time steps in total .",
    "ronza appears for a single time step at some unknown time @xmath18 , and sells trap @xmath15 at cost @xmath5 .",
    "before each time step , and also at the end , the player makes a decision to lay down either trap @xmath13 , trap @xmath14 , or @xmath15 , and then immediately reaps the rewards of their choosing .",
    "this setup poses two different but related problems : one , to determine an optimal trap - choosing strategy to maximize the expected payoff given some distribution assumptions , and two , to find a strategy that maximizes the competitive ratio .",
    "for the rest of this section , we will assume that ronza s arrival time is distributed uniformly among @xmath19 .",
    "we can perform similar analyses with different distributions , but it will be most clear to analyze the uniform distribution case .",
    "we establish the following lemma concerning optimal online algorithms which solve this problem .    the online algorithm ,",
    "if it is optimal , can be assumed to take on one of the following formats :    * only hunt for the mouse worth @xmath16 point . *",
    "hunt for the mouse worth @xmath16 coin until @xmath5 coins are gathered or until the merchant arrives .",
    "purchase the trap @xmath15 if possible when the merchant arrives , and only hunt for mice worth a maximum amount of points afterward .",
    "first , suppose that the online algorithm @xmath20 at time @xmath21 decides to earn points and at the next time step @xmath22 decides to collect gold .",
    "then , consider the alternative online algorithm @xmath23 that collects gold at @xmath21 and earns points at @xmath22 . both of these choices are conditioned on ronza having not arrived yet , as it is clear that the only right decision after ronza arrives is to earn points .",
    "if ronza appears after time @xmath22 or before time @xmath21 , both algorithms perform equally well .",
    "if ronza appears between times @xmath21 and @xmath22 , then the algorithm @xmath20 will have performed worse .",
    "thus , any deterministic optimal online algorithm will collect gold at the beginning , if at all , and hence take on one of the two prescribed formats .",
    "one approach for solving the initial problem is to view it as a markov decision process . for a fixed @xmath4 ,",
    "define @xmath24 to be the optimal decision when there are @xmath6 time steps remaining and we require @xmath5 more coins for ronza s trap ; the lemma tells us that @xmath24 can only take on two forms : aim for points , or aim for @xmath5 coins .",
    "define @xmath25 to be expected payoff in points when pursuing this optimal decision .",
    "the base cases go as follows .",
    "when @xmath26 , we have @xmath24 as aim for points and @xmath27 , because ronza comes in the middle of the time steps on average .",
    "when @xmath28 , we have @xmath25 as @xmath29 : the latter payoff is achieved by aiming for points , and the former payoff is achieved by aiming for a single coin .",
    "when @xmath30 , we have @xmath24 as aim for points and @xmath31 . then :    in the state @xmath32 where @xmath33 and @xmath34 , @xmath24 and @xmath25 can be determined by comparing @xmath35 and @xmath36 .",
    "if the latter is larger , then it is the expected payoff , and the optimal move @xmath24 is to aim for @xmath5 gold . otherwise , if the former is larger , then it is the expected payoff , and the optimal move @xmath24 is to aim for points .    by the lemma",
    ", we may reduce the optimal decision to two possibilities : aim for points , or aim for @xmath5 coins .",
    "if we decide to aim for points , the payoff will be @xmath37 .",
    "however , it is not rational to aim for coins in future time steps if we do not aim for coins now .",
    "hence , the payoff must evaluate to @xmath38 .",
    "otherwise , if we decide to aim for @xmath5 coins , then our payoff will depend on whether or not ronza arrives in the next time step .",
    "if ronza arrives in the next time step , then we have no choice but to gain @xmath16 point after all remaining time steps , accruing a total of @xmath6 points .",
    "this occurs with probability @xmath39 .",
    "if ronza arrives after the next time step , then her arrival time will be uniformly distributed among the remaining @xmath40 time steps , just as in the state @xmath41 .",
    "this reduction allows us to conclude that the payoff is @xmath42 , and occurs with probability @xmath43 .",
    "thus , the expected payoff when aiming for @xmath5 coins is @xmath44 . between this payoff and the payoff of @xmath35 from greedily amassing points , whichever one is larger will dictate both @xmath24 and @xmath25 .",
    "let @xmath45 .",
    "then asymptotically , @xmath24 will dictate that it is optimal to catch mice to aim for @xmath5 gold iff @xmath46 .",
    "we will no longer keep track of unneeded additive constants as we are determining asymptotic behavior .",
    "suppose that ronza s arrival time is @xmath18 .",
    "we already know from the lemma that the alternative to catching mice to aim for @xmath5 gold is catching mice to aim for points .",
    "the latter yields a payoff of @xmath6 ( in fact , @xmath35 ) .",
    "now we will compute the payoff of the former in a non - recursive fashion .    * case 1 : ronza comes after time @xmath5 .",
    "+ this means that @xmath47 , and decisions made according to this algorithm will earn @xmath48 points : @xmath49 points from mice worth @xmath16 point each , and @xmath50 points from mice worth @xmath4 points each .",
    "the average value of @xmath18 here is @xmath51 .",
    "* case 2 : ronza comes before time @xmath5 .",
    "this means @xmath52 , and the player can never afford trap @xmath15 , so the algorithm will simply catch mice worth @xmath16 point for all remaining time steps , yielding @xmath53 points .",
    "the average value of @xmath18 here is @xmath54 .",
    "this means that if we decide to aim for @xmath5 coins , our expected gain in points is @xmath55 .",
    "equalizing the payoffs of the two decisions allows us to determine the asymptotic boundary : @xmath56 solving this quadratic and taking the root such that @xmath57 yields @xmath58 .",
    "therefore , the asymptotic behavior of this markov decision process can be summarized as : until ronza makes an appearance , aim for @xmath5 coins if the state @xmath32 satisfies @xmath59 , and aim for points otherwise .",
    "below , we present a few values of @xmath25 when @xmath60 , that is to say , when trap @xmath15 is twice as effective as trap @xmath61 .",
    "bolded entries represent states in which @xmath24 dictates that aiming for @xmath5 coins is strictly better than aiming for points .",
    "notice that the boundary between the two strategies being optimal closely follows the line @xmath62 , as shown in the theorem above .",
    "l*9cr ( c , t ) & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 + 0 & * 3 * & * 4.5 * & * 6 * & * 7.5*&*9*&*10.5 * & * 12 * & * 13.5 * & * 15 * & * 16.5 * + 1 & 2 & 3 & * 4.5 * & * 6 * & * 7.5 * & * 9 * & * 10.5 * & * 12 * & * 13.5 * & * 15 * + 2 & 2 & 3 & 4 & 5 & 6 & * 7.3 * & * 8.7 * & * 10.2 * & * 11.7 * & * 13.2 * + 3 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & * 11.5 * + 4 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 + 5 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 +    it is not difficult to generalize this table for all @xmath4 . note that for a given @xmath32 , we can use dynamic programming to fill in this table and compute @xmath24 and @xmath25 in @xmath63 time",
    ". however , for large values of @xmath64 , we can bypass markov decision processes altogether and use theorem @xmath65 to compute them in @xmath66 time .",
    "our analyses so far relied on the distribution of ronza s arrival time being uniform .",
    "if the distribution is not known , however , then markov decision processes can not be used to model the decision problem .",
    "next , we will show a solution to the algorithm online problem against any adversary .",
    "in this section we analyze online algorithms to solve the initial problem without a known probability distribution .",
    "we examine both an optimal deterministic online algorithm , and a randomized online algorithm that achieves the best possible asymptotic competitive ratio .",
    "if the online algorithm decided only to earn points , the worst case scenario is that the optimal offline algorithm was to earn @xmath5 gold and buy trap @xmath15 when ronza arrived to earn @xmath4 points per subsequent mouse .",
    "this means that @xmath67 , and the offline algorithm would garner @xmath68 points . if @xmath69 , the competitive ratio is @xmath16 .",
    "we now analyze the case when @xmath70 , where the competitive ratio of the two algorithms is @xmath71 .",
    "we can find an upper bound on the reciprocal of this fraction to find a lower bound on this ratio .",
    "let @xmath45 .",
    "then the reciprocal of the ratio can be upper bounded as follows .",
    "@xmath72 where we used the fact that @xmath73 is negative and @xmath67 .",
    "the competitive ratio is thus lower bounded by @xmath74 .",
    "if the online algorithm decided to collect gold to try to buy the trap , the worst case scenario is that ronza appears before the algorithm has collected enough gold to purchase the trap . in this case ,",
    "@xmath75 , and the online algorithm would earn @xmath53 points ( it would earn gold until the merchant arrived at time @xmath18 , after which it would earn points ) and the offline optimal algorithm would earn @xmath6 points . the competitive ratio here is @xmath76 .",
    "here we find that the ratio is @xmath77 thus , given knowledge of @xmath78 , we can choose our strategy based on the larger of the values @xmath74 and @xmath79 to achieve the best competitive ratio .",
    "since these two expressions vary in opposite directions as @xmath0 increases , the worst case occurs when the two expressions are equal , i.e. @xmath80 thus , since our analysis was worst case , we obtain a tight lower bound of @xmath81 on our competitive ratio .",
    "thus this deterministic algorithm is always @xmath81 competitive for all values of @xmath0 .",
    "here we describe and analyze a randomized online algorithm that achieves a worst case competitive ratio of @xmath9 for all values of @xmath4 , @xmath5 , and @xmath6 .",
    "first , if @xmath82 , then it is always optimal just to go for points because going for the trap would result in @xmath83 points at the end .",
    "this information is available to the online algorithm so the online algorithm is exactly the same as the offline one in this case .",
    "thus , we just have to analyze the case that @xmath84 .",
    "as before , any optimal online algorithm will either only aim for points or it will collect gold until ronza arrives or until it has collected @xmath5 gold , after which it will collect points and buy ronza s trap if possible .",
    "the randomized algorithm is to choose to try to gather gold for ronza s trap with probability @xmath85 and to choose to aim for points only with probability @xmath86 .",
    "we will determine @xmath85 later based on @xmath4 and @xmath45 .",
    "call the gold gathering strategy @xmath87 and the point gathering strategy @xmath88 .",
    "let @xmath89 denote the randomly chosen strategy .",
    "given our choice of @xmath85 , the adversary s goal is to choose ronza s arrival time @xmath18 so that the competitive ratio is minimized .",
    "our goal is to choose a @xmath85 to maximize this minimal value .",
    "if @xmath90 then the competitive ratio is @xmath91    if @xmath92 then the competitive ratio is @xmath93    thus the overall competitive ratio , denoted by @xmath94 , is    @xmath95    suppose @xmath85 has been chosen already .",
    "if the adversary chooses @xmath96 , then @xmath94 is minimized when @xmath18 is maximized , or when @xmath97 .",
    "if @xmath92 , then minimizing @xmath94 involves maximizing @xmath98 which occurs when @xmath18 is minimized since @xmath99 .",
    "thus in this case the adversary will choose @xmath100 .",
    "thus we get that    @xmath101    note that the coefficient of @xmath85 is negative in the case @xmath96 and the coefficient of @xmath85 is positive in the case @xmath102 since @xmath84 . as @xmath85 increases ,",
    "@xmath94 goes down in the case @xmath90 and goes up in the case @xmath92 .",
    "the two possible expressions for @xmath94 thus change in opposite directions as @xmath85 is varied .",
    "thus , if we want to maximize the minimum of these two numbers , we have to set them equal .",
    "this gives @xmath103    this gives the optimal value of @xmath85 given @xmath4 , @xmath5 , and @xmath6 .",
    "if we let @xmath104 , we can rewrite this as @xmath105 we can also rewrite the condition @xmath106 as @xmath107    plugging this value of @xmath85 back into @xmath94 , we get that the competitive ratio of this randomized algorithm is @xmath108    to find a lower bound on the competitive ratio of @xmath109 , we need to minimize @xmath94 over all values of @xmath4 , @xmath5 , and @xmath6 . since @xmath109 only depends on the ratio @xmath45 asymptotically , we can just consider @xmath110 .",
    "to minimize @xmath109 , we compute the partial derivative @xmath111    @xmath109 is minimized when the partial derivative is @xmath112 , or at the endpoints . at the endpoint @xmath113",
    "we get @xmath114 , and at the endpoint @xmath115 , we know @xmath116 , so @xmath117    when the partial derivative is 0 , we have that @xmath118 since @xmath17 , solving this gives @xmath119 this value of @xmath0 is valid because we know that @xmath120 . plugging this value of @xmath0 back into @xmath110 we get that @xmath121    we can find the minimum value of this over all @xmath4 . if we let @xmath4 range from @xmath16 to @xmath122 we see that @xmath123 for all @xmath4 .",
    "one way to intuitively derive the same competitive ratio is that the optimal offline algorithm clearly either goes for gold for ronza s trap or goes for points the entire time .",
    "thus , a basic randomized algorithm would just flip a fair coin .",
    "if the coin landed heads , it would choose to go for gold , and if it landed tails , it would choose to go for points .",
    "@xmath124 of the time the randomized algorithm will match the optimal offline algorithm , so we are at least @xmath124 competitive .",
    "the result we showed was a proof that the algorithm was @xmath124 competitive for all values of @xmath4 , @xmath5 , and @xmath6 .",
    "however , in reality , for most values of @xmath4 , @xmath5 , and @xmath6 , the competitive ratio our randomized algorithm obtains is @xmath110 , which , for most values of @xmath0 , is much better than the ratio obtained by single randomized coin flip algorithm . as an example , consider the graphs shown in figure  [ fig : graph ] of @xmath110 for the cases @xmath125 and @xmath126 for the appropriate range of @xmath127 .    .",
    "right plot : @xmath126.,title=\"fig : \" ] .",
    "right plot : @xmath126.,title=\"fig : \" ]      we will conclude this section with a proof that for any randomized online algorithm , an asymptotic competitive ratio of @xmath124 over all values of @xmath4 , @xmath5 , and @xmath6 is optimal using yao s minimax principle .",
    "yao s minimax principle states that the expected cost of a randomized algorithm on the worst case input is no better than the worst case probability distribution of inputs for a deterministic algorithm that works best for that worst case distribution .",
    "thus , we simply have to present a probability distribution such that no deterministic algorithm can perform very well for it .",
    "it is not difficult to find such a distribution .",
    "given the parameters @xmath4 , @xmath5 , and @xmath6 , we can define two possible inputs ( which are just values of @xmath18 , ronza s arrival time ) and give them as inputs to the deterministic algorithm with probability @xmath124 each .",
    "the first input is @xmath100 and the second input is @xmath128 .",
    "then , the deterministic algorithm can be analyzed as follows .",
    "* case 1 : the deterministic algorithm gathers coins for the first @xmath5 steps ( assuming ronza does nt appear ) .",
    "then , for the input @xmath129 , the deterministic algorithm will be @xmath16-competitive .",
    "for the input @xmath130 , at time @xmath131 the algorithm will realize that it can not buy the trap , and so it will then gather points afterwards .",
    "this gives us an overall competitive ratio of @xmath132 * case 2 : the deterministic algorithm does anything else .",
    "then , this means at time @xmath133 , the algorithm will have less than @xmath5 gold .",
    "then , for the input @xmath129 , the algorithm will fail to buy the trap . for @xmath130 ,",
    "the algorithm will also fail to buy the trap , and at best it will be @xmath16-competitive .",
    "the algorithm will have earned at most @xmath5 points in the first @xmath5 time steps .",
    "the optimal offline algorithm will buy the trap for @xmath5 gold in the case @xmath133 .",
    "thus the overall competitive ratio is @xmath134    in that special case that @xmath135 , we know that the competitive ratio of this deterministic algorithm will be equal to @xmath136 .",
    "thus , as @xmath4 approaches infinity , any optimal deterministic algorithm for this input will be at best @xmath124 competitive , so @xmath124 competitive is as good as any randomized algorithm can be for the original problem .",
    "in this section , we explore a variant of our initial problem . now",
    ", suppose that ronza s arrival time @xmath18 is known , but the cost @xmath5 of buying trap @xmath15 is unknown .",
    "first , we consider the offline algorithm .",
    "if @xmath5 is known , then this reduces to our initial offline problem . therefore ,",
    "if @xmath47 , the optimal algorithm will get @xmath137 points , and if @xmath75 , then the algorithm gets @xmath6 points .",
    "any deterministic online algorithm can be characterized by a number @xmath138 , where it collects gold for @xmath139 of the first @xmath18 time steps , and hunts for points otherwise",
    ". it will buy ronza s trap at time @xmath18 if it is affordable at time @xmath18 .",
    "now , there are two possible outcomes :    * if the algorithm manages to collect @xmath5 gold , i.e. @xmath140 , then it is always optimal to buy trap @xmath15 if possible",
    ". then the algorithm earns a total of @xmath141 points . *",
    "if @xmath142 , then the algorithm earns @xmath143 points .    in order to find a competitive ratio for this online problem , we consider the problem from the perspective of the adversary . for given choices of @xmath5 and @xmath139 , we have the following cases and known ratios for the online and offline algorithms :    1",
    "if @xmath75 , we have a ratio of @xmath144 2 .",
    "if @xmath145 , and @xmath146 , we have a ratio of @xmath144 3 .",
    "if @xmath145 , and @xmath147 , we have a ratio @xmath148 4 .",
    "if @xmath140 , and @xmath146 , we have a ratio of @xmath149 5 .",
    "if @xmath140 , and @xmath147 , we have a ratio of @xmath150    as the adversary , our job is to design @xmath5 for fixed @xmath139 in order to produce the smallest ratio . note",
    "that since cases 1 and 2 produce the same ratio , and there always exists a @xmath5 to satisfy case 1 , we need not consider case 2 . similarly , because @xmath151 is true for any @xmath139 , case 4 is redundant given case 1 .",
    "now notice that as the ratio in case 5 is an increasing function of @xmath5 , its minimum is achieved at @xmath152 .",
    "thus , if we compare the ratios in cases 1 and 5 , we have @xmath153 canceling terms and rearranging , we obtain @xmath154 which is always true .",
    "thus , case 5 is redundant given case 1 .    it remains to compare the ratios of cases 1 and 3 , and for an online algorithm s choice of @xmath139 , it is the adversary s goal to choose @xmath5 to obtain the smaller ratio .",
    "note that the value of @xmath5 that minimizes ratio 3 is @xmath155 , assuming such a @xmath5 satisfies the constraints , so we are left with two ratios to compare : @xmath144 from case 1 , and @xmath156 from case 3 .    in words ,",
    "case 1 corresponds to when both offline and online algorithm can not buy ronza s trap , and case 3 corresponds to when the offline can and does buy the trap while the online can not , with conditions @xmath157 and @xmath145 .",
    "suppose the online algorithm chooses a value of @xmath158 . in this case",
    ", no integral value of @xmath5 can satisfy the constraints @xmath157 and @xmath145 in case 3 , so the resulting ratio is @xmath159 or @xmath76 , depending on whether or not @xmath160 .    in the other case , suppose the online algorithm chooses @xmath161 . the worst competitive ratios that the adversary can return are @xmath144 and @xmath156 .",
    "the latter expression can be written as @xmath162 . because these are both decreasing functions of @xmath139 , the online algorithm would choose @xmath163 to obtain a worst case ratio of @xmath164 .",
    "the online algorithm , given @xmath165 , can choose @xmath139 to obtain the better competitive ratio .",
    "we consider the cases to obtain a tight lower bound on the optimal competitive ratio . in the following analysis ,",
    "let @xmath166 and @xmath167 .",
    "case 1 : @xmath168 , i.e. @xmath169 or @xmath170 . here , we also know that @xmath171 , where @xmath139 is an integer , so @xmath172 , i.e. @xmath173 . note that the ratio our online algorithm can obtain is @xmath174 , where the first is a decreasing function of @xmath0 and the second is increasing .",
    "thus , a lower bound on the max of the two ratios is obtained when we set them equal and solve for the optimal @xmath175 , i.e. @xmath176 we confirm that this value of @xmath177 satisfies the condition @xmath178 , as @xmath177 is a decreasing function of @xmath4 , and at the endpoint @xmath179 , we can compute that @xmath180",
    "the value also satisfies @xmath181 because @xmath182 which is always true .",
    "then the lower bound is @xmath183 as given above , which asymptotically in @xmath4 is @xmath184 .",
    "case 2 : @xmath185 , i.e. @xmath186 or @xmath187 .",
    "our online algorithm now obtains a ratio @xmath188 .",
    "both ratios are now increasing in @xmath0 , so to lower bound the maximum , we set @xmath0 to minimum , or @xmath189 to its maximum @xmath190 .",
    "we obtain the ratio @xmath191    then since we are able to achieve the second ratio , we obtain asymptotically in @xmath4 a competitive ratio of @xmath192",
    ".    surprisingly , we are able to obtain an equal asymptotic competitive ratio of @xmath193 as in the arrival time unknown problem , given certain inputs , and a better competitive ratio of @xmath194 for any other input .",
    "in reality , the game of mousehunt is a lot more complex . in order to better approximate the game",
    ", we can improve our model of the game and attempt to analyze those models .",
    "thus , we can generalize our model further and ask the follow - up questions :    * what if there are traps @xmath195 that can catch different mice and have different costs that are always available for purchase at a local trapsmith ? * what if we do nt know @xmath4 , the effectiveness of ronza s trap , ahead of time ? *",
    "what if the mice give reward vectors @xmath196 , where @xmath197 is the number of points gained and @xmath198 is the amount of gold collected from catching mouse @xmath199 ? *",
    "what if ronza appears with multiple traps available ?",
    "what if ronza appears multiple times ?",
    "* what if there is a probability distribution for the unknown variables in the problem ? what can be said for some common distributions other than the uniform distribution ?",
    "what if there are some other restrictions on the unknown variables , like upper and lower bounds ?",
    "* what if multiple parameters are unknown at the same time ?",
    "( for example , if both the cost and the arrival time of ronza s trap are unknown ) .    these problems are much harder to analyze due to the increase in the number of parameters .",
    "for example , in the case of ronza appearing multiple times , it becomes important to consider strategies that may buy certain ronza traps early on in order to buy other ronza traps in the future .",
    "because these problems are better approximations of the actual game , they are definitely worth exploring in the future .",
    "the above analysis shows many interesting results that spring out of a basic model of the game mousehunt . assuming the basic model of unknown arrival time ,",
    "if we fix the probability distribution of the arrival times , we can model the problem as a markov decision process problem and solve for the optimal deterministic algorithm .",
    "if we do nt fix the probability distribution , an optimal deterministic online algorithm can still always achieve better than @xmath8-competitive , and with randomization , can achieve better than @xmath9-competitive . using yao s minimax principle",
    "we show that we can do no better asymptotically than @xmath9-competitive over all possible values of the parameters , so the asymptotic bound of @xmath9-achieved by the randomized algorithm is strict .    under the model of unknown cost , an optimal algorithm can actually achieve roughly a ratio of @xmath193 in most cases and an even better ratio of @xmath200 in special cases .",
    "while these values are asymptotically similar to the values obtained for the model of unknown arrival time , the exact expressions for the competitive ratios and the analyses of these online algorithms differ greatly .",
    "this mousehunt problem appears similar to the well known ski rental problem , which has an optimal randomized online algorithm that achieves @xmath201-competitiveness .",
    "however , the algorithms and analysis results for these two problems are quite different , demonstrating the fundamental difference between the problems .    finally , the mousehunt problem has many more parameters , and so its optimal competitive ratio will depend on more parameters . for most parameter settings",
    "the competitive ratio is much better than the worst case ratio of @xmath9 , but for the worst possible parameter settings , the ratio is still @xmath9 .",
    "the mousehunt problem can also be applied to similar situations in other fields .",
    "for example , consider the problem of maximizing your net worth in life . at every time step",
    ", you have to decide between earning money now ( e.g. working at a grocery store ) and preparing yourself for future work by studying hard in school , establishing connections , and learning about entrepreneurship . in the case",
    "that a golden opportunity comes knocking at your door ( for example , if a venture capitalist offers to hear your startup sales pitch ) , you could potentially get a huge boost in your pay rate if you impress him enough to have him invest in you .",
    "however , if you are unprepared and have not worked enough , then you ca nt take advantage of the opportunity when it comes .",
    "our algorithm details when exactly it is better to earn money now or study now to prepare for the future , assuming that you have some estimate on the gain in wealth upon founding a startup .",
    "while these results probably will not affect how people play the game of mousehunt or how people try to maximize their net worth due to the level of complexity of these real situations compared to our model , they still show interesting results and methods of analysis of online algorithms , and how randomization can be used to improve an algorithm s competitiveness .",
    "furthermore , this paper demonstrates how even a simple online problem can produce complex and unexpected analysis results , such as the asymptotic @xmath8 competitive ratio .",
    "we would like to thank our instructor prof .",
    "karger for guidance on this project , as well as hitgrab inc . for developing mousehunt ."
  ],
  "abstract_text": [
    "<S> in this paper we study a variety of novel online algorithm problems inspired by the game mousehunt . </S>",
    "<S> we consider a number of basic models that approximate the game , and we provide solutions to these models using markov decision processes , deterministic online algorithms , and randomized online algorithms . </S>",
    "<S> we analyze these solutions performance by deriving results on their competitive ratios . </S>"
  ]
}