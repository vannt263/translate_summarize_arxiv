{
  "article_text": [
    "being welcome in most other contexts , symmetry causes severe trouble in the solution of many integer programming ( ip ) models .",
    "this paper describes a method to enhance the capabilities of branch - and - cut algorithms with respect to handling symmetric models of a certain kind that frequently occurs in practice .",
    "we illustrate this kind of symmetry by the example of a graph partitioning problem ( another notorious example is the vertex coloring problem ) . here , one is given an undirected graph @xmath0 with non - negative edge weights @xmath1 and an integer @xmath2 .",
    "the task is to partition  @xmath3 into  @xmath4 disjoint subsets such that the sum of all weights of edges connecting nodes in the same subset is minimized ; thus , this problem is equivalent to maximizing the weights of the edges in a @xmath4-cut .",
    "a straight - forward ip model for this graph partitioning problem arises by introducing 0/1-variables @xmath5 for all @xmath6 } { \\coloneqq}\\{1,\\dots , p\\}$ ] and @xmath7}$ ] that indicate whether node  @xmath8 is contained in subset  @xmath9 ( where we assume @xmath10}$ ] ) . in order to model the objective function , we furthermore need 0/1-variables @xmath11 , for all edges @xmath12 , indicating whether nodes  @xmath8 and  @xmath13 are contained in the same subset .",
    "this yields the following ip - model ( see , e.g. , @xcite ) :    @xmath14 } \\\\ &             &   x_{ij}+x_{kj}-y_{ik }   & \\le 1   & & \\qquad\\text { for all } \\{i , k\\ } \\in e,\\ , j\\in{[{q}]}\\\\ &             & x_{ij }                  & \\in \\{0,1\\ } & & \\qquad\\text { for all } i\\in { [ { p}]},\\,j\\in{[{q}]}\\\\ &             & y_{ik }                  & \\in \\{0,1\\ } & & \\qquad\\text { for all } \\{i , k\\}\\in e. \\end{alignedat}\\ ] ]    the @xmath15-variables describe a 0/1-matrix of size @xmath16 with exactly one @xmath17-entry per row .",
    "they encode the assignment of the nodes to the subsets of the partition .",
    "the methods that we discuss in this paper do only rely on this structure and thus can be applied to many other models as well .",
    "we use the example of the graph partitioning problem as a prototype application and report on computational experiments for this application in sect .",
    "[ sec : compu ] .",
    "graph partitioning problems are discussed , for example , in @xcite .",
    "they arise , for instance , as relaxations of frequency assignment problems in mobile telecommunication networks , see  @xcite .",
    "the maximization version ( min @xmath13-cut ) of the graph partitioning problem is relevant as well  @xcite .",
    "also capacity bounds on the subsets of the partition ( which can easily be incorporated into the model ) are of interest , in particular for the graph equipartition problem @xcite . for the closely related clique partitioning problem",
    "see  @xcite .",
    "semidefinite relaxations and solution approaches are discussed in  @xcite .",
    "as it is given above , the model is unnecessarily difficult for state - of - the - art ip solvers . even solving small instances requires enormous efforts ( see sect .",
    "[ sec : compu ] ) .",
    "one reason is that every feasible solution @xmath18 to this model can be turned into  @xmath19 different ones by permuting the columns of  @xmath15 ( viewed as a 0/1-matrix ) in an arbitrary way , thereby not changing the structure of the solution ( in particular : its objective function value ) . phrased differently , the symmetric group of all permutations of the set  @xmath20}$ ] operates on the solutions by permuting the columns of the @xmath15-variables in such a way that the objective function remains constant along each orbit .",
    "therefore , when solving the model by a branch - and - cut algorithm , basically the same work will be done in the tree at many places .",
    "thus , there should be potential for reducing the running times significantly by exploiting this symmetry .",
    "a more subtle second point is that interior points of the convex hulls of the individual orbits are responsible for quite weak linear programming ( lp ) bounds .",
    "we will , however , not address this second point in this paper .    in order to remove symmetry , the above model for the graph partitioning problem",
    "is often replaced by models containing only edge variables , see , e.g.  @xcite . for this",
    ", however , the underlying graph has to be complete , which might introduce many unnecessary variables .",
    "moreover , formulation  ( [ eq : kpart ] ) is sometimes favorable , e.g. , if node - weighted capacity constraints should be incorporated .",
    "one way to deal with symmetry is to restrict the feasible region in each of the orbits to a single representative , e.g. , to the lexicographically maximal ( with respect to the row - by - row ordering of the @xmath15-components ) element in the orbit . in fact , this can be done by adding inequalities to the model that enforce the columns of @xmath15 to be sorted in a lexicographically decreasing way .",
    "this can be achieved by @xmath21 many _",
    "column inequalities_. in  @xcite even a complete ( and irredundant ) linear description of the convex hull of all 0/1-matrices of size @xmath16 with exactly one @xmath17-entry per row and lexicographically decreasing columns is derived ; a shorter proof of this completeness result appears in  @xcite .",
    "the corresponding polytopes are called _ partitioning orbitopes_. a similar result can be proved for the case of _ packing orbitopes _ , in which there is at most one @xmath17-entry per row .",
    "the descriptions basically consist of an exponentially large super class of column inequalities , called _ shifted column inequalities _ ,",
    "for which there is a linear time separation algorithm available .",
    "we recall some of these results in sect .",
    "[ sec : orbitopes ] .    incorporating the inequalities from the orbitope description into the ip model removes symmetry . at each node of the branch - and - cut tree",
    "this ensures that the corresponding ip is infeasible as soon as there is no representative in the subtree rooted at that node .",
    "in fact , already the column inequalities are sufficient for this purpose .    in this paper",
    ", we investigate a way to utilize these inequalities ( or the orbitope that they describe ) without explicitly adding any of the inequalities to the models .",
    "the reason for doing this is the unpleasant effect that adding ( shifted ) column inequalities to the models might result in more difficult lp relaxations .",
    "one way of avoiding the addition of these inequalities to the lps is to derive logical implications instead : if we are working in a branch - and - cut node at which the @xmath15-variables corresponding to index subsets  @xmath22 and  @xmath23 are fixed to zero and one , respectively , then there might be a ( shifted ) column inequality yielding implications for all representatives in the subtree rooted at the current node .",
    "for instance , it might be ( and this is easy to check for a given inequality ) that for some @xmath24 we have @xmath25 for all 0/1-points  @xmath15 with @xmath26 ( @xmath27 ) and @xmath28 ( @xmath29 ) that satisfy the inequality . in this case",
    ", @xmath30 can be fixed to zero for the whole subtree rooted at the current node , enlarging  @xmath22 .",
    "similarly , also fixings of variables to one might be possible .",
    "we call the iterated process of searching for such additional fixings _ sequential fixing _ with ( shifted ) column inequalities .",
    "let us mention at this point that deviating from parts of the literature , we do not distinguish between `` fixing '' and `` setting '' of variables in this paper .",
    "sequential fixing with ( shifted ) column inequalities is a special case of constraint propagation , which is well known from constraint logic programming , see  @xcite for an overview .",
    "modern ip solvers like scip  @xcite use such strategies also in the node preprocessing during the branch - and - cut algorithm . with orbitopes ,",
    "however , we can aim at something better : consider a branch - and - cut node identified by fixing the variables corresponding to sets  @xmath22 and  @xmath23 to zero and one , respectively .",
    "denote by @xmath31 the set of all vertices  @xmath15 of the orbitope with @xmath26 for all @xmath27 and @xmath28 for all @xmath29 .",
    "we define the sets @xmath32 and @xmath33 of all indices @xmath34 of variables , for which all  @xmath15 in @xmath31 satisfy @xmath35 and @xmath36 , respectively .",
    "we call the respective fixing of the variables corresponding to @xmath32 and  @xmath33 _ simultaneous fixing_. simultaneous fixing is always at least as strong as sequential fixing .",
    "investigations of sequential and simultaneous fixing for orbitopes are the central topic of the paper .",
    "the main contributions and results are the following :    we present a linear time algorithm for _ orbitopal fixing _ , i.e. , for solving the problem to compute simultaneous fixings for partitioning orbitopes ( theorem  [ thm : algorbifix ] ) and packing orbitopes ( corollary  [ cor : packingorbitopes ] ) .",
    "in contrast to this , we prove that orbitopal fixing for _ covering orbitopes _ ( the convex hulls of all lexicographically maximal 0/1-matrices with _ at least _ one @xmath17-entry in every row ) is @xmath37-hard ( theorem  [ thm : orbicov ] ) .",
    "we show that , for general 0/1-polytopes , sequential fixing , even with complete and irredundant linear descriptions , is weaker than simultaneous fixing ( theorem  [ thm : fix ] ) . for the case of partitioning orbitopes ,",
    "we clarify the relationships between different versions of sequential fixing with ( shifted ) column inequalities , where ( despite the situation for general 0/1-polytopes ) the strongest one is as strong as orbitopal fixing ( theorem  [ thm : seqfixorbi ] ) .",
    "we report on computer experiments ( sect .",
    "[ sec : compu ] ) with the graph partitioning problem described above , showing that orbitopal fixing leads to significant performance improvements for branch - and - cut algorithms .",
    "this paper extends the one that appeared in the proceedings of ipco  xii  @xcite .",
    "it contains the following additional material : a proof for the second part of theorem  [ thm : seqfixorbi ] , the above mentioned results for packing and covering orbitopes ( sect .",
    "[ sec : packcov ] ) , a comparison to the related approaches of margot  @xcite and linderoth et al .",
    "@xcite for the orbitope case ( sect .",
    "[ sec : margot ] ) , and , finally , computational results for a significantly improved version of our graph partitioning code ( sect .  [ sec : compu ] ) .",
    "while our methods are based on lexicographically maximal choices of representatives from the orbits , a more general approach admitting orderings defined by arbitrary linear functions was introduced by friedman , see  @xcite . there are also a number of approaches for symmetry handling available from the constraint logic programming literature , see , e.g. , @xcite .",
    "their general idea is similar to the above mentioned approaches by margot and linderoth et al . during the traversal of the tree ,",
    "different techniques are used to avoid the processing of ( some ) symmetric parts of the tree . for an excellent survey of methods for symmetry breaking in integer programming",
    "we refer to  @xcite .",
    "throughout the paper , let  @xmath38 and  @xmath4 be integers with @xmath39 .",
    "the _ partitioning / packing / covering orbitope _",
    "@xmath40/@xmath41/@xmath42 is the convex hull of all 0/1-matrices @xmath43}\\times{[{q}]}}$ ] with exactly / at most / at least one @xmath17-entry per row , whose columns are in non - increasing lexicographical order , i.e. , they satisfy @xmath44 for all @xmath45}$ ]",
    ".    we will mainly be concerned with partitioning orbitopes  @xmath40 .",
    "an exception is sect .",
    "[ sec : packcov ] , in which we will show that the linear time method for orbitopal fixing of sect .  [",
    "sec : orbifix ] below can easily be carried over to packing orbitopes  @xmath46 , while there is no polynomial time method for orbitopal fixing for covering orbitopes  @xmath47 , unless @xmath48 .",
    "let the symmetric group of size  @xmath4 act on @xmath49}\\times{[{q}]}}$ ] via permutation of the columns .",
    "then the vertices of @xmath40 are exactly the lexicographically maximal matrices with exactly one @xmath17-entry per row in the orbits under the symmetric group action ; the lexicographic order is defined as in  .",
    "as these vertices have @xmath26 for all @xmath50 with @xmath51 , we drop these components and consider @xmath40 as a subset of the space @xmath52 with @xmath53}\\times{[{q}]}}}\\,:\\,{i \\geq j}\\}}$ ] .",
    "thus , we consider matrices , in which the @xmath8-th row has @xmath54 components .",
    "the main result in  @xcite is a complete linear description of @xmath40 . in order to describe the result",
    ", it will be convenient to address the elements in @xmath55 via a different `` system of coordinates '' : for @xmath56}$ ] and @xmath57 , define @xmath58 .",
    "thus ( as before ) @xmath8 and  @xmath9 denote the row and the column , respectively , while  @xmath59 is the index of the diagonal ( counted from above ) containing the respective element ; see figure  [ fig : scispart ]   for an example .    a set @xmath60 with @xmath61 and @xmath62",
    "is called a _ shifted column_. for @xmath63 , a shifted column  @xmath64 as above with @xmath65 , and the set @xmath66 , we call @xmath67 a _ shifted column inequality_. the set  @xmath68 is called its _ bar_. in case of @xmath69 the shifted column inequality",
    "is called a _",
    "column inequality_. see figure  [ fig : scispart ] for examples .",
    "finally , a bit more notation is needed . for each @xmath70}$ ] , we define @xmath71}}\\}}$ ] . for @xmath72 and @xmath73",
    ", we denote by  @xmath74 the sum @xmath75 .",
    "[ thm : orbitpartdesc ] the orbitope @xmath40 is completely described by the non - negativity constraints @xmath76 , the row - sum equations @xmath77 , and the shifted column inequalities .    in fact , in  @xcite it is also shown that , up to a few exceptions , the inequalities in this description define facets of @xmath40 .",
    "furthermore , a linear time separation algorithm for the exponentially large class of shifted column inequalities is given .",
    "for a compact extended formulation of @xmath40 that also leads to a simplified proof of theorem  [ thm : orbitpartdesc ] , see  @xcite .",
    "in this section , we deal with general 0/1-integer programs and , in particular , their associated polytopes .",
    "we will define some basic terminology used later in the special treatment of orbitopes , and we are going to shed some light on the geometric situation of fixing variables .    for some positive integer @xmath78 ,",
    "we denote by @xmath79}}\\}}\\ ] ] the 0/1-cube , where @xmath80}$ ] is the corresponding set of indices of variables . for two disjoint subsets @xmath81}$ ] ( hence , @xmath82 ) we call @xmath83 the _ face of  @xmath84 defined by @xmath85_. all nonempty faces of @xmath84 are of this type .    for a polytope @xmath86 and for a face",
    "@xmath87 of @xmath84 defined by @xmath85 , we denote by @xmath88 the smallest face of  @xmath84 that contains @xmath89 ( i.e. , @xmath88 is the intersection of all faces of  @xmath84 that contain @xmath90 ) . if @xmath88 is the nonempty cube face defined by @xmath91 , then @xmath32 and @xmath33 consist of all @xmath92}$ ] for which @xmath93 and @xmath94 , respectively , holds for all @xmath95 .",
    "in particular , we have @xmath96 and @xmath97 , or @xmath98 .",
    "thus , if @xmath22 and @xmath23 are the indices of the variables fixed to zero and one , respectively , in the current branch - and - cut node ( with respect to an ip with feasible points @xmath99 ) , the node can either be pruned , or the sets @xmath32 and @xmath33 yield the maximal sets of variables that can be fixed to zero and one , respectively , for the whole subtree rooted at this node . unless @xmath100 , we call @xmath91 the _ fixing of  @xmath101 at @xmath85_. similarly , we call @xmath88 the _ fixing _ of  @xmath101 at  @xmath87 .",
    "[ rem : fixmono ] if @xmath102 are two polytopes with @xmath103 and  @xmath87 and  @xmath104 are two faces of  @xmath84 with @xmath105 , then @xmath106 holds .    in general , it is not clear how to compute fixings efficiently .",
    "indeed , computing the fixing of  @xmath101 at @xmath107 includes deciding whether  @xmath108 , which , of course , is @xmath37-hard in general . on the other hand ,",
    "the following holds .",
    "[ lemma : polytimefixing ] if one can optimize a linear function over  @xmath109 in polynomial time , the fixing @xmath110 at @xmath111 can be computed in polynomial time .",
    "let @xmath112 be the objective function vector defined by @xmath113.\\ ] ] for each @xmath114 \\setminus ( i_0 \\cup i_1)$ ] we have @xmath115 ( where @xmath116 is the @xmath8th unit vector ) if and only if @xmath117 , and @xmath118 if and only if @xmath119",
    ". thus , we can compute @xmath32 and @xmath33 by solving @xmath120 many linear optimization problems over @xmath99 .",
    "note that the reverse to the implication stated in lemma  [ lemma : polytimefixing ] does not hold , in general .",
    "this can , e.g. , be seen at the example of @xmath121-knapsack problems with @xmath122 ( with @xmath123 ) . for every @xmath111",
    "the fixing @xmath110 can be computed in linear time : @xmath124 in contrast , the optimization problem over @xmath109 is @xmath37-hard .",
    "if the linear optimization problem over @xmath99 can not be solved efficiently , one can still try to compute ( hopefully large ) subsets of @xmath32 and @xmath33 by considering relaxations of  @xmath101 . in case of an ip that is based on an intersection with an orbitope",
    ", one might use the orbitope as such a relaxation .",
    "we will deal with the fixing problem for partitioning orbitopes in sect .",
    "[ sec : orbifix ] ( and for packing and covering orbitopes in sect.[sec : packcov ] ) .",
    "since the optimization problem for partitioning and packing orbitopes can be solved in polynomial time ( see  @xcite ) , by lemma  [ lemma : polytimefixing ] , the corresponding fixing problems can be solved in polynomial time as well .",
    "however , we will even describe linear time algorithms for these cases .",
    "if  @xmath101 is given via an inequality description , one possibility is to use the knapsack relaxations obtained from single inequalities among the description .",
    "for each of these relaxations , the fixing can easily be computed .",
    "if the inequality system describing  @xmath101 is exponentially large , and the inequalities are only accessible via a separation routine , it might in some cases nevertheless be possible to decide efficiently whether any of the exponentially many knapsack relaxations allows to fix some variable ( see sect .",
    "[ subsec : fixsci ] ) .",
    "suppose , @xmath125 and @xmath126 is the knapsack relaxation of  @xmath101 for the @xmath127th - row @xmath128 of  @xmath129 , where @xmath130 .",
    "let  @xmath87 be some face of  @xmath84 .",
    "the face  @xmath131 of  @xmath84 obtained by setting @xmath132 and then iteratively replacing @xmath131 by @xmath133 as long as there is some  @xmath134}$ ] with @xmath135 , is denoted by  @xmath136 . note that the outcome of this procedure is independent of the choices made for  @xmath127 , due to remark  [ rem : fixmono ] .",
    "we call the pair @xmath137 defining the cube face @xmath136 ( unless this face is empty ) the _ sequential fixing of  @xmath138 at @xmath85_. in the context of sequential fixing we often refer to ( the computation of ) @xmath88 as _ simultaneous fixing_.    due to remark  [ rem : fixmono ] , it is clear that @xmath139 holds .",
    "[ thm : fix ] in general , even for a system of facet - defining inequalities describing a full - dimensional 0/1-polytope , sequential fixing is weaker than simultaneous fixing .",
    "the following example shows this .",
    "let @xmath140 be the four - dimensional polytope defined by the trivial inequalities @xmath141 for @xmath142 , @xmath143 for @xmath144 , the inequality @xmath145 and @xmath146 let  @xmath87 be the cube face defined by @xmath147 .",
    "then , sequential fixing does not fix any further variable , although simultaneous fixing yields @xmath148 ( and @xmath149 ) .",
    "note that  @xmath101 has only 0/1-vertices , and all inequalities are facet defining ( @xmath150 and @xmath151 are implied ) .",
    "for this section , suppose that @xmath152 are subsets of indices of partitioning orbitope variables with the following properties :    @xmath153 for all @xmath70}$ ] .    for all @xmath154 , we have @xmath155 for all @xmath156}\\setminus \\{j\\}$ ] .",
    "in particular , p1 and p2 imply that @xmath82 .",
    "let  @xmath87 be the face of the 0/1-cube @xmath157 defined by @xmath85 . note that if p1 is not fulfilled , then @xmath158 .",
    "the following statement follows immediately from property  p2 .",
    "[ rem : props ] if a vertex  @xmath15 of @xmath40 satisfies @xmath26 for all @xmath27 , then @xmath159 .",
    "we assume that the face @xmath160 is defined by @xmath91 , if @xmath160 is not empty .",
    "_ orbitopal fixing _ ( for partitioning orbitopes ) is the problem to compute the simultaneous fixing @xmath91 from @xmath85 , or determine that @xmath161 .",
    "[ rem : orbifix ] if @xmath162 , it is enough to determine @xmath32 , as we have @xmath163 if and only if @xmath164 holds for for all @xmath156}\\setminus    \\{j\\}$ ] .",
    "we start by deriving some structural results on partitioning orbitopes that are crucial in our context .",
    "since @xmath165 is a 0/1-polytope ( i.e. , it is integral ) , we have @xmath166 .",
    "thus , @xmath160 is the smallest cube face that contains the face @xmath167 of the orbitope  @xmath40 .",
    "let us , for @xmath6}$ ] , define values @xmath168}$ ] recursively by setting @xmath169 and , for all @xmath6}$ ] with @xmath170 , @xmath171 the set of all indices of rows , in which the @xmath172-value increases , is denoted by @xmath173}}\\,:\\,{i\\ge 2,\\ \\alpha_i=\\alpha_{i-1}+1}\\}}\\cup\\{1\\}\\ ] ] ( where , for technical reasons , @xmath17 is included ) .",
    "the following observation follows readily from the definitions .",
    "[ rem : scialpha ] for each @xmath6}$ ] with @xmath170 and @xmath174 , the set @xmath175}\\setminus      \\gamma(i_0)}\\}}$ ] is a shifted column with @xmath176 .",
    "figure  [ fig : zerosc_feas ]   shows an example .    [ lem : alpha:1 ] for each @xmath6}$ ] , no vertex of @xmath167 has its @xmath17-entry in row  @xmath8 in a column @xmath177}$ ] with @xmath178 .",
    "let @xmath70}$ ] .",
    "we may assume @xmath179 , because otherwise the statement is trivially true .",
    "thus , @xmath180 .",
    "let us first consider the case @xmath181 .",
    "as we have @xmath182 and @xmath183 , there must be some @xmath184 such that @xmath185 .",
    "let  @xmath13 be maximal with this property .",
    "thus , we have @xmath186 for all @xmath187 . according to remark  [ rem : scialpha ] , @xmath188 is a shifted column inequality with @xmath189 , showing @xmath190 as claimed in the lemma .",
    "thus , let us suppose @xmath6}\\setminus\\gamma(i_0)$ ] .",
    "if @xmath191 , the claim holds trivially .",
    "otherwise , @xmath192 .",
    "similarly to the first case , now the shifted column inequality @xmath193 proves the claim .    for each @xmath70}$ ] , we define @xmath194}}\\,:\\,{(i , j)\\not\\in i_0}\\ } } $ ] .",
    "because of property  p1 , the sets over which we take minima here are non - empty .",
    "[ lem : alpha:2 ] if we have @xmath195 for all @xmath6}$ ] , then the point @xmath196 defined by @xmath197 for all @xmath198 , @xmath199 for all @xmath200}\\setminus    \\gamma(i_0)$ ] , and all other components being zero , is contained in @xmath167 .    due to @xmath201 for all @xmath6}$ ] with @xmath170 , the point  @xmath202 is contained in @xmath40 .",
    "it follows from the definitions that @xmath202 does not have a @xmath17-entry at a position in  @xmath22 .",
    "thus , by remark  [ rem : props ] , we have @xmath203 .",
    "figure  [ fig : zerosc_feas ]   shows an example for the point constructed in lemma  [ lem : alpha:2 ] .",
    "we now characterize the case @xmath204 ( leading to pruning the corresponding node in the branch - and - cut tree ) and describe the set  @xmath32 .",
    "[ prop : orbifix ]    1 .",
    "[ prop : orbifix : prune ] we have @xmath204 if and only if there exists @xmath6}$ ] with @xmath205 .",
    "[ prop : orbifix : notprune ] if @xmath206 holds for all @xmath6}$ ] , then the following is true . 1 .   [",
    "prop : orbifix : notprune : fixone ] for all @xmath6}\\setminus        \\gamma(i_0)$ ] , we have @xmath207 2 .",
    "[ prop : orbifix : notprune : fixtwo ] for all @xmath70}$ ] with @xmath208 , we have @xmath209 3 .   [ prop : orbifix : notprune : fixthree ] for all @xmath210 with @xmath211 the following holds : if there is some @xmath212 with @xmath213 , then we have @xmath214 otherwise , we have @xmath215    part  [ prop : orbifix : prune ] follows from lemmas  [ lem : alpha:1 ] and  [ lem : alpha:2 ] ( see also figure  [ fig : sympartopt ]  ) .    in order to prove part  [ prop : orbifix : notprune ] ,",
    "let us assume that @xmath206 holds for all @xmath6}$ ] . for part  [ prop : orbifix",
    ": notprune : fixone ] , let @xmath6}\\setminus\\gamma(i_0)$ ] and @xmath216 . due to @xmath217",
    ", we only have to consider the case @xmath218 .",
    "if @xmath178 , then , by lemma  [ lem : alpha:1 ] , we find @xmath219 . otherwise , the point that is obtained from @xmath220 ( see lemma  [ lem : alpha:2 ] ) by moving the @xmath17-entry in position @xmath221 to position @xmath50 is contained in @xmath167 , proving @xmath222 .",
    "in the situation of part  [ prop : orbifix : notprune : fixtwo ] , the claim follows from lemma  [ lem : alpha:1 ] and @xmath223 ( due to part  1 ) .    for part  [ prop : orbifix : notprune : fixthree ] , let @xmath224 with @xmath211 and define @xmath225 .",
    "it follows that we have @xmath226 for all @xmath6}$ ] ; compare also figure  [ fig : sympartopt ]  .",
    "let us first consider the case that there is some @xmath227 with @xmath228 .",
    "part  [ prop : orbifix : prune ] ( applied to @xmath229 instead of  @xmath22 ) implies that @xmath167 does not contain a vertex  @xmath15 with @xmath230 .",
    "therefore , we have @xmath231 , and thus @xmath232 holds ( where for `` @xmath233 '' we exploit @xmath223 by part  [ prop : orbifix : prune ] , this time applied to  @xmath22 ) .    the other case of part  [ prop : orbifix : notprune : fixthree ] follows from @xmath234 and @xmath235 .",
    "thus , part  [ prop : orbifix : notprune : fixone ] applied to @xmath229 and @xmath236 instead of @xmath22 and @xmath8 , respectively , yields the claim ( because of @xmath237 due to @xmath224 and @xmath238 ) .",
    "let us , for some fixed @xmath239 , denote by @xmath240 the system of the non - negativity inequalities , the row - sum equations ( each one written as two inequalities , in order to be formally correct ) and all shifted column inequalities .",
    "thus , according to theorem  [ thm : orbitpartdesc ] , @xmath40 is the set of all @xmath241 that satisfy  @xmath240 .",
    "let @xmath242 be the subsystem of @xmath240 containing only the column inequalities ( and all non - negativity inequalities and row - sum equations ) .    at first sight ,",
    "it is not clear whether sequential fixing with the exponentially large system @xmath240 can be done efficiently",
    ". a closer look at the problem reveals , however , that one can utilize the linear time separation algorithm for shifted column inequalities ( mentioned in sect .  [ sec : orbitopes ] ) in order to devise an algorithm for this sequential fixing , whose running time is bounded by @xmath243 , where @xmath244 is the number of variables that are fixed by the procedure .    in fact , one can achieve more : one can compute sequential fixings with respect to the affine hull of the partitioning orbitope . in order to explain this , consider a polytope @xmath245 , and let @xmath246 be some affine subspace containing  @xmath101 .",
    "as before , we denote the knapsack relaxations of  @xmath101 obtained from @xmath138 by @xmath247 ,  , @xmath248 .",
    "let us define @xmath249 as the smallest cube face that contains @xmath250 .",
    "similarly to the definition of @xmath136 , denote by  @xmath251 the face of  @xmath84 that is obtained by setting @xmath132 and then iteratively replacing @xmath131 by @xmath252 as long as there is some  @xmath134}$ ] with @xmath253 .",
    "we call @xmath254 the _ sequential fixing of @xmath255 at  @xmath87 relative to  @xmath64_. obviously , we have @xmath256 .",
    "in contrast to sequential fixing , sequential fixing relative to affine subspaces _ in general _ is @xmath37-hard ( as it can be used to decide whether a linear equation has a 0/1-solution ) .",
    "[ thm : seqfixorbi ]    1 .",
    "there are cube faces @xmath257 , @xmath258 , @xmath259 with the following properties : 1 .",
    "@xmath260[part : sci_ci ] 2 .",
    "@xmath261[part : affci_sci ] 3 .",
    "@xmath262[part : affsci_affci ] 2 .   for all cube",
    "faces  @xmath87 , we have @xmath263.[part : of_sci ]    for part  , we chose @xmath264 , @xmath265 , and define the cube face  @xmath257 via @xmath266 and @xmath267 . the shifted column inequality with shifted column @xmath268 and bar @xmath269 allows to fix @xmath270 to @xmath17 ( see fig .  [ fig : sympartopt ]  ) , while no column inequality ( and no non - negativity constraint and no row - sum equation ) allows to fix any variable .    for part  ,",
    "let @xmath271 , @xmath265 , and define  @xmath258 via @xmath272 and @xmath273 . exploiting that @xmath274 for all @xmath275",
    ", we can use the column inequality with column @xmath268 and bar @xmath276 to fix @xmath270 to one ( see fig .",
    "[ fig : sympartopt ]  ) , while no fixing is possible with @xmath240 only .    for part",
    ", we can use @xmath277 .    in order to prove part",
    ", we have to show for every cube face  @xmath87 that @xmath278 holds .",
    "we use the notation introduced in sect .  [",
    "sec : orbifix ] .",
    "the crucial fact is that every point @xmath279 satisfies @xmath280 for every @xmath281 such that @xmath282 .",
    "let us first consider the case @xmath283 .",
    "due to part  [ prop : orbifix : prune ] of prop .",
    "[ prop : orbifix ] there is some @xmath6}$ ] with @xmath205 .",
    "therefore , the sci @xmath284 constructed in the proof of lemma  [ lem : alpha:1 ] with @xmath285 has @xmath286 for all @xmath287 , but @xmath288 due to @xmath289 .",
    "this shows that we indeed have @xmath290 in this case .",
    "otherwise ( i.e. , @xmath291 ) , it suffices to show for each @xmath292 that there is some sci that can only be satisfied by some @xmath293 if @xmath294 holds . due to part  [ prop : orbifix : notprune ] of prop .",
    "[ prop : orbifix ] , we have to consider two cases .",
    "_ case 1 : _ we have @xmath295",
    ". then the sci @xmath296 constructed in the proof of lemma  [ lem : alpha:1 ] with @xmath297 implies @xmath298 for all @xmath299 ( because of @xmath300 ) , which yields @xmath294 due to @xmath301 .",
    "_ case 2 : _ we have @xmath302 with @xmath303 and there is some @xmath304 with @xmath305 .",
    "then the sci @xmath306 constructed in the proof of lemma  [ lem : alpha:1 ] with @xmath307 ( and @xmath22 replaced by @xmath308 ) satisfies , for each @xmath279 , @xmath286 and @xmath309 ( due to @xmath310 ) , which implies @xmath311 , and hence ( as @xmath293 ) @xmath294 , because of @xmath312 .",
    "the different versions of sequential fixing for partitioning orbitopes are dominated by each other in the following sequence : @xmath313 which finally is as strong as orbitopal fixing .",
    "for each of the arrows there exists an instance for which dominance is strict .",
    "the examples in the proof of theorem  [ thm : seqfixorbi ] also show that there is no general relation between @xmath240 and affine  @xmath242 .",
    "in particular , we could compute orbitopal fixings by the polynomial time algorithm for sequential fixing relative to @xmath314 .",
    "it turns out , however , that this is not the preferable choice .",
    "in fact , we will describe below a linear time algorithm for solving the orbitopal fixing problem directly .",
    "algorithm  [ alg : orbitopalfixing ] describes a method to compute the simultaneous fixing @xmath91 from @xmath85 ( which are assumed to satisfy properties  p1 and  p2 ) .",
    "note that we use  @xmath315 for @xmath316 .",
    "set @xmath317 , @xmath318 , @xmath319 , @xmath320 , and @xmath321 .",
    "[ step : foralpha ] compute @xmath322.[step : mui ] + @xmath323 @xmath324 , @xmath325 return `` orbitopal fixing is empty''[step : infeasible ] set @xmath326.[step : zerofixing ] [ step : istarone ] set @xmath327 .",
    "[ step : foralphaend ] [ step : sloop ] set @xmath328 . + [ step : forbeta ] @xmath329 @xmath330 [ step : ifmubeta ] @xmath331 and @xmath332.[step : onefixing ] + proceed with the next @xmath236 in step  [ step : sloop ] .",
    "[ step : forbetaend ]    [ thm : algorbifix ] the orbitopal fixing problem for partitioning orbitopes can be solved in time @xmath21 ( by a slight modification of algorithm  [ alg : orbitopalfixing ] ) .",
    "the correctness of the algorithm follows from the structural results given in proposition  [ prop : orbifix ] .    in order to prove the statement on the running time ,",
    "let us assume that the data structures for the sets  @xmath22 , @xmath23 , @xmath32 , and  @xmath33 allow both membership testing and addition of single elements in constant time ( e.g. , the sets can be stored as bit vectors ) .",
    "as none of the steps  [ step : mui ] to  [ step : foralphaend ] needs more time than @xmath333 , we only have to take care of the second part of the algorithm starting in step  [ step : sloop ] .",
    "( in fact , used verbatim as described above , the algorithm might need time @xmath334 . )    for @xmath335 with @xmath336 denote the corresponding @xmath337-values by @xmath315 ( @xmath227 ) and by  @xmath338 ( @xmath339 ) , respectively .",
    "we have @xmath340 for all @xmath339 , and furthermore , if equality holds for one of these  @xmath8 , we can deduce @xmath341 for all @xmath342 .",
    "thus , as soon as a pair @xmath343 is used a second time in step  [ step : ifmubeta ] , we can break the for - loop in step  [ step : forbeta ] and reuse the information that we have obtained earlier .",
    "this can , for instance , be organized by introducing , for each @xmath344 , a flag @xmath345 ( initialized by @xmath346 ) , where @xmath347 means that we have already detected that @xmath348 eventually leads to a positive / negative test in step  [ step : ifmubeta ] .",
    "the modifications that have to be applied to the second part of the algorithm are the following : the selection of the elements in  @xmath349 in step  [ step : sloop ] must be done in increasing order . before performing the test in step  [ step : ifmubeta ] , we have to check whether @xmath350 is @xmath351 .",
    "if this is true , then we can proceed with the next  @xmath236 in step  [ step : sloop ] , after setting all flags @xmath352 to @xmath351 for @xmath353 .",
    "similarly , we set all flags @xmath352 to @xmath354 for @xmath355 , before switching to the next  @xmath236 in step  [ step : forbetaend ] .",
    "and finally , we set all flags @xmath352 to @xmath351 for @xmath356 at the end of the body of the @xmath236-loop starting in step  [ step : sloop ] .",
    "as the running time of this part of the algorithm is proportional to the number of flags changed from @xmath346 to @xmath354 or @xmath351 , the total running time indeed is bounded by @xmath21 ( since a flag is never reset ) .",
    "the packing orbitope  @xmath41 obviously can be obtained from the partitioning orbitope  @xmath357 by projecting out the first column and row , i.e. , by orthogonal projection to the coordinate subspace associated with @xmath358 ( and renaming the variables appropriately ) , see also  @xcite .    in general , for @xmath359}$ ] , the orthogonal projection @xmath360 } } \\rightarrow { \\mathbbm{r}}^j$ ] , a polytope @xmath361 , and some face  @xmath87 of the cube @xmath362^j$ ] , we have @xmath363 since for every face @xmath131 of  @xmath364 @xmath365 holds ( simply because taking preimages commutes with taking intersections ) .",
    "thus , the following result for packing orbitopes follows readily from theorem  [ thm : algorbifix ] .",
    "[ cor : packingorbitopes ] variable fixing for packing orbitopes  @xmath41 can be done in time @xmath21 by reduction to orbitopal fixing for @xmath357 .",
    "in contrast to this , variable fixing for covering orbitopes  @xmath42 can not be done in polynomial time , unless @xmath366 , as the following result implies .    .",
    "let @xmath131 be the depicted graph , and let @xmath367 , i.e. , @xmath368 and @xmath369 .",
    "thus , no new edge is needed , and we have @xmath370 . in the matrix , @xmath371s correspond to elements of @xmath22 , @xmath372s have been set in the construction of a feasible solution , and empty entries correspond to @xmath371s set in the construction .",
    "the top right shows the binary tree used for the construction with @xmath373 . ]    .",
    "let @xmath131 be the depicted graph , and let @xmath367 , i.e. , @xmath368 and @xmath369 .",
    "thus , no new edge is needed , and we have @xmath370 . in the matrix , @xmath371s correspond to elements of @xmath22 , @xmath372s have been set in the construction of a feasible solution , and empty entries correspond to @xmath371s set in the construction .",
    "the top right shows the binary tree used for the construction with @xmath373 . ]",
    "c|rlllllllllllllllllllllllllll| & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & & & & & & & & & & & & & & & + & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & & & & & & & & & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & * 1 * & & & & & & & + & * 1 * & & & & & * 1 * & * 1 * & * 1 * & * 1 * & & & & & * 1 * & * 1 * & * 1 * & * 1 * & & & & & * 1 * & * 1 * & * 1 * & * 1 * & & & + \\{2,4 } & 0 & * 1 * & 0 & & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 + \\{2,6 } & 0 & * 1 * & 0 & 0 & 0 & & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 + \\{2,8 } & 0 & * 1 * & 0 & 0 & 0 & 0 & 0 & & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 + \\{6,8 } & 0 & 0 & 0 & 0 & 0 & * 1 * & 0 & & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 + \\{8,10 } & 0 & 0 & 0 & 0 & 0 & 0 & 0 & & 0 & * 1 * & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 + \\{10,12 } & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * 1 * & 0 & & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 + \\{14,16 } & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * 1 * & 0 & & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 + \\{18,20 } & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * 1 * & 0 & & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 + \\{22,24 } & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * 1 * & 0 & & 0 & 0 & 0 & 0 + \\{26,28 } & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * 1 * & 0 & + & & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & 13 & 14 & 15 & 16 & 17 & 18 & 19 & 20 & 21 & 22 & 23 & 24 & 25 & 26 & 27 & +    [ thm : orbicov ] the problem to decide whether , for given @xmath374 } \\times    { [ { q}]}$ ] , the covering orbitope  @xmath42 contains a vertex  @xmath375 with @xmath376 for all @xmath27 , is @xmath37-complete .",
    "it suffices to show that one can construct , for each graph @xmath377 and @xmath378 with @xmath379 , ( in time bounded polynomially in  @xmath380 ) an instance of the decision problem described in the theorem whose answer is `` yes '' if and only if  @xmath131 has a vertex cover of size at most  @xmath13 .    towards this end , let  @xmath381 be the smallest integer such that we have @xmath382 . construct a graph  @xmath383 by adding @xmath384 new edges ( forming a matching ) on @xmath385 nodes disjoint from  @xmath3 .",
    "thus  @xmath386 is a graph with @xmath387 nodes and @xmath388 edges that has a vertex cover of size at most  @xmath389 if and only if  @xmath131 has a vertex cover of size at most  @xmath13 .    for the instance of the decision problem described in the theorem , let @xmath390 , @xmath391 , and assume @xmath392 .",
    "numbering the edges of  @xmath386 by @xmath393},\\ ] ] we set @xmath394},\\ ; j \\in { [ { q } ] }      \\setminus \\{v_h , w_h\\}}\\}}.\\ ] ] see figure  [ fig : coveringexample ] for an example .    in order to prove that the answer to the constructed instance is `` yes '' if and only if  @xmath386 has a vertex cover of size at most  @xmath389 , let us call , for @xmath395}\\times{[{q}]}}$ ] , a pair  @xmath50 an _ alibi _ ( for column  @xmath9 of  @xmath396 ) , if @xmath397 and @xmath398 hold .",
    "if @xmath375 is a vertex of the covering orbitope  @xmath42 ( i.e. , a 0/1-point in the orbitope ) with @xmath398 for all @xmath399 , then @xmath400}}\\}}\\ ] ] is a vertex cover in  @xmath386 ( due to @xmath401 for all @xmath402}$ ] ) .",
    "moreover , for every @xmath403 , there is an alibi @xmath404 in some row  @xmath405}$ ] , since column  @xmath406 of  @xmath396 is lexicographically not larger than column  @xmath407 .",
    "again due to the lexicographical ordering of the columns , every vertex of the orbitope can have at most @xmath408 alibis in row  @xmath8 .",
    "it follows that @xmath409    conversely , suppose @xmath410 is a vertex cover with @xmath411 .",
    "we construct a 0/1-point @xmath412 with @xmath398 for all @xmath399 as follows .",
    "first , for each @xmath402}$ ] , we set @xmath413 since  @xmath414 is a vertex cover of  @xmath386 , the part of  @xmath396 that we have already constructed has at least one @xmath17-entry in every row @xmath415 .",
    "it thus remains to construct the first  @xmath416 rows such that they contain an alibi for every column  @xmath406 with  @xmath403 ( and such that each of these rows contains at least one @xmath17-entry ) .",
    "this can , e.g. , be achieved as follows .    first , choose an arbitrary sequence @xmath417 ( of length @xmath418 ) of numbers in @xmath419 with @xmath420 ( which is possible due to @xmath411 ) .",
    "then a complete rooted binary tree ( embedded into the plane ) of height  @xmath416 ( having @xmath421 nodes ) is constructed in which the nodes receive pairwise different labels @xmath422 .",
    "the labels have to be assigned in such a way that for every node labeled  @xmath423 , we have @xmath424 for all labels @xmath425 in the _ left _ subtree and @xmath426 for all labels @xmath127 in the _ right _ subtree rooted at  @xmath423",
    ".    then we complete  @xmath396 to a vertex of  @xmath42 by putting in each row @xmath405}$ ] alibis at all positions @xmath427 for  @xmath423 running through all labels of nodes at distance  @xmath428 from the root of the tree and filling the remaining components of  @xmath396 accordingly .",
    "of course , theorem  [ thm : orbicov ] implies that optimization over covering orbitopes is @xmath37-hard . in particular , in contrast to the packing and partitioning orbitopes , we can not expect to find a tractable linear description of  @xmath42 , unless @xmath429 .",
    "in fact , using ideas of the proof of theorem  [ thm : orbicov ] , one can also establish other similar statements , in which @xmath42 is replaced by the convex hull of all 0/1-matrices ( whose columns are in lexicocraphically non - increasing order ) with _ at least _  @xmath13 one - entries per row for each @xmath430 , or with _ exactly _",
    "@xmath13 one - entries per row for each @xmath431 .",
    "in @xcite margot developed a related , but more general approach to symmetry breaking , called _",
    "isomorphism pruning_. the main components are a setting rule for variables and a pruning rule for nodes in a branch - and - bound tree to avoid consideration of equivalent ( partial ) solutions . in this section",
    "we outline the differences and similarities between margot s and our approach when specialized to the type of symmetries addressed by partitioning orbitopes .",
    "isomorphism pruning deals with arbitrary symmetries in any binary program @xmath432 , or even integer program @xcite .",
    "let @xmath131 be a group of permutations of the variables ( inducing permutations of the components of  @xmath433 , the columns of  @xmath434 , and the set of feasible solutions ) such that for every @xmath435 we have @xmath436 and @xmath437 , @xmath438 for some permutation @xmath439 of the rows of @xmath434 resp .",
    "components of  @xmath440 . in particular , @xmath131 acts on the set of feasible solutions ( via",
    "coordinate permutations ) with the property that the objective function @xmath441 is constant on every orbit .",
    "given an order of the variables ( a _ rank vector _",
    "@xmath442 ) , margot s approach then assures that only ( partial ) solutions that are lexicographically minimal in their orbit under @xmath131 are explored in the branch - and - bound tree . more precisely ,",
    "a partial solution in some branch - and - bound node  @xmath443 is identified with the sets @xmath444 and @xmath445 of variables that have been fixed to @xmath17 and  @xmath371 , respectively , in the path from the root to @xmath443 .",
    "a partial solution is lex - min in its orbit , i.e. , it is a _ representative _",
    ", if the set @xmath444 is lexicographically minimal with respect to the rank vector  @xmath442 .",
    "thus , @xmath443 can be pruned if it is not a representative .",
    "note that the definition of the lexicographical order relies upon a particular total order of the variables defined by the rank vector  @xmath442 .",
    "it should be mentioned that in  @xcite this limitation was relaxed by using an arbitrary order that can be determined during the branch - and - bound process .",
    "still , the same rank vector has to be used throughout the branch - and - bound tree .",
    "essentially , this means that whenever a branching is to be performed at some level of the branch - and - bound tree for the first time , the branching variable for this level can be freely chosen , and the rank vector is extended . in @xcite , the restriction of a global rank vector",
    "is dropped , too .",
    "the rank vector at some node @xmath443 of the branch - and - bound tree is now given by the branching decisions from the root node to @xmath443 .",
    "at every node @xmath443 of the branch - and - bound tree , two _ @xmath371-setting operations _ are performed .",
    "if @xmath443 was created by fixing the variable @xmath446 to @xmath371 then all variables in the ( sub)orbit of @xmath446 under the stabilizer of  @xmath444 are set to @xmath371 , too , since a @xmath17 for any of these variables would lead to a partial solution lex - greater than @xmath444 .",
    "furthermore , in case the next branching variable  @xmath447 is known ( e.g. , if a global rank vector is available ) , it is repeatedly tested whether any representative can be reached from @xmath443 by checking whether the current representative together with  @xmath447 is also a representative , i.e. , whether @xmath448 is lexicographically minimal under @xmath131 .    for a comparison with orbitopal fixing , we consider isomorphism pruning specialized for partitioning problems with 0/1-varaibles @xmath5 satisfying @xmath449 for all  @xmath8 , where the symmetry group @xmath131 is assumed to be the group of all permutations of the columns of the variable matrix  @xmath15 .",
    "note that such problems do not require the elaborate machinery of group theoretic algorithms developed by margot for the general case of more complicated symmetry groups .",
    "we assume that the _ canonical rank vector  @xmath442 _ is used , i.e. , the one that describes the row - wise ordering of the variables @xmath5 . for this ordering ,",
    "the representatives used by isomorphism pruning are in one - to - one correspondence with faces of the cube @xmath450^{{\\ensuremath{\\mathcal{i}_{{p},{q}}}}}$ ] having nonempty intersections with @xmath40 .",
    "the row - wise ordering of the variables is natural choice .",
    "it moreover turned out from our computational experiments with graph partitioning problems that we could not find any alternative ordering yielding better results for isomorphism pruning , at least for this application .",
    "this even holds true for all variants we tested without a global rank vector ( see sect .  [",
    "sec : compu ] ) .",
    "if branch - and - bound trees for both methods are obtained by minimum index branching , orbitopal fixing can be well compared to isomorphism pruning .",
    "indeed ( provided that the nodes are also processed in the same order and no cutting planes are added ) , orbitopal fixing will visit only branch - and - bound nodes that isomorphism pruning visits as well . in any of these nodes",
    "the orbitopal fixing algorithm does not perform @xmath17-fixings in loop  [ step : sloop ] in algorithm  [ alg : orbitopalfixing ] . however , it may do more zero - fixings in loop  [ step : foralpha ] than the ones that isomorphism pruning does . for an example",
    "see figure  [ fig : fixmehr ] .",
    "thus , the main advantage of orbitopal fixing for our special case of symmetry can be seen as deriving as early as possible conclusions that hold at every child node .",
    "if other branching rules than minimum index branching are applied , the trees produced by using orbitopal fixing and isomorphism pruning are not comparable , in the sense that , in general , both variants will visit branch - and - bound nodes ( partial solutions ) not visited by the other one . but even at nodes that appear in both trees the behaviour of the two methods can not really be compared unless both use the same representatives .",
    "this , however , is only the case if the isomorphism pruning variant does minimum index branching , yielding ( locally ) the canonical rank vector .",
    "hence , we are in the situation already discussed above ( no matter by which branching rule the orbitopal fixing variant has arrived at the node ) .",
    "another approach for avoiding symmetrical solutions is orbital branching  @xcite .",
    "it handles the same type of symmetry as isomorphism pruning , but in a local manner : the symmetry group of the current lp is computed on - the - fly for every node of the branch - and - bound tree after removing fixed variables and inequalities that are satisfied regardless of the unfixed variables .",
    "the set of unfixed variables then decomposes into orbits of equivalent variables under the symmetry group of the current lp .",
    "then for some orbit of equivalent variables a two - way branching is done , where in one branch the case is considered that all variables in the orbit are zero , and in the other branch a chosen variable from the orbit is fixed to one .",
    "orbital branching is thus not comparable to either orbitopal fixing nor isomorphism pruning , as it can consider symmetries that only arise after fixing variables . on the other hand",
    "a problem usually looses global symmetry when variables are removed . as the authors of  @xcite already point out ,",
    "it is quite time consuming to compute the symmetry group for every branch - and - bound node . in",
    "@xcite the authors report that a variant of orbital branching exploiting global symmetry is computationally superior , i.e. , instead of computing the symmetry group of every local lp in the branch - and - bound tree , the global symmetry group of the root lp is used . in this variant ,",
    "the symmetry group used in a branch - and - bound node is the subgroup of the global symmetry group that setwise stabilizes the variables already fixed to one .",
    "this , however , is very similar to isomorphism pruning .",
    "if there is some orbit @xmath451 of equivalent variables at some node @xmath443 , then orbital branching on @xmath451 is the same as pruning by isomorphism and @xmath371-setting _ relative to the branching decisions leading to @xmath443_. in this sense orbital branching with global symmetry can be seen as isomorphism pruning with local rank vectors .    in the case of partitioning orbitopes",
    ", the symmetry has very simple structure .",
    "note that any symmetry considered here stems from the permutation of columns of a matrix variable , which is a reasonable restriction in particular with regard to the example application presented in our graph partitioning formulation  . at every branch - and - bound node ,",
    "the columns of the matrix variable  @xmath15 decompose into one set of columns that are fixed elementwise , and one set of columns which still can be permuted arbitrarily .",
    "the special structure of partitioning problems considered here implies that the orbits described above are the same in both variants of orbital branching , at least as long as symmetry among rows of the matrix variable ( graph automorphisms in an instance of graph partitioning ) are ignored .",
    "the main advantage of orbital branching lies within its flexibility , e.g. , orbital branching can be used at any node regardless how branching was performed on other nodes of the branch - and - bound tree .",
    "we performed computational experiments for the graph partitioning problem mentioned in the introduction .",
    "the code is based on the scip  1.1.0 branch - and - cut framework  @xcite , originally developed by achterberg  @xcite .",
    "we use cplex 11.00 as the underlying lp solver .",
    "the computations were performed on a 3.2 ghz pentium  4 machine with 4  gb of main memory and 2  mb cache running linux .",
    "all computation times are cpu seconds and are subject to a _ time limit of four hours_. since in this paper we are not interested in the performance of heuristics , we initialized all computations with the _ optimal primal solution_.    we compare different variants of the code by counting _ winning _ instances .",
    "an instance is a winner for variant  a compared to variant  b , if  a finished within the time limit and  b did not finish or needed a larger cpu time ; if  a did not finish , then the instance is a winner for  a in case that  b did also not finish , leaving , however , a larger gap than  a. if the difference between the times or gaps are below  1  sec . and 0.1  % , respectively , the instance is not counted .    in all variants ,",
    "we fix the variables  @xmath5 with  @xmath452 to zero .",
    "furthermore , we heuristically separate general clique inequalities @xmath453 where @xmath454 and @xmath455 is a clique of size  @xmath456 with integers @xmath457 , @xmath458 ( see @xcite ) .",
    "the separation heuristic for a fractional point  @xmath459 follows ideas of eisenbltter  @xcite .",
    "we generate the graph @xmath460 with @xmath461 if and only if @xmath462 and @xmath463 , where @xmath464 is the @xmath465-part of an lp solution .",
    "we search for maximum cliques in  @xmath466 with the branch - and - bound method implemented in scip ( with a branch - and - bound node limit of 10000 ) , as well as with simple tabu search and greedy strategies .",
    "we then check whether the corresponding inequality is violated .",
    "we also separate triangle inequalities and both kinds of cycle inequalities as given in  @xcite .",
    "after extensive testing , we decided to branch by default on the _ first index _",
    ", i.e. , we branch on the first fractional @xmath15-variable in the row - wise variable order used for defining orbitopes .",
    "a side - effect of this choice is that this branching rule makes orbitopal fixing more comparable to isomorphism pruning , in particular , to the variant using an _ a priori _ fixed variable order .",
    "it should be noted that this branching rule is superior only when the vertices are permuted ( i.e. , the rows of  @xmath15 are permuted ) as follows : sort the vertices in descending order of their star weight , i.e. , the sum of the weights of incident edges .",
    "we generated 36 random instances with  @xmath467 vertices and  @xmath468 edges of the following types .",
    "we used @xmath469 ( _ sparse _ ) , @xmath470 ( _ medium _ ) , and @xmath471 ( _ dense _ ) . for each type we generated three instances by picking edges uniformly at random ( without recourse ) until the specified number of edges is reached",
    "the edge weights are drawn independently and uniformly at random from @xmath472 $ ] .",
    "for each instance we computed results for @xmath473 3 , 6 , 9 , and  12 .",
    "@rrr@ppq@ & & & & & + @xmath474 & @xmath468 & @xmath4 & nsub & cpu & nsub & cpu & nsub & cpu & # of + 40 & 360 & 3 & 677 & 112 & 708 & 100 & * 516 * & * 86 * & 4 + 40 & 360 & 6 & 1072 & 76 & 655 & 25 & * 157 * & * 15 * & 97 + 40 & 360 & 9 & * 1 * & * 0 * & * 1 * & * 0 * & * 1 * & * 0 * & 0 + 40 & 360 & 12 & * 1 * & * 0 * & * 1 * & * 0 * & * 1 * & * 0 * & 0 + 40 & 540 & 3 & 288 & 184 & 257 & 180 & * 219 * & * 146 * & 4 + 40 & 540 & 6 & 57606 & 13915 & 48786 & 7024 & * 32347 * & * 5548 * & 5750 + 40 & 540 & 9 & 62053 & 14400 & 162871 & 7182 & * 43434 * & * 4768 * & 25709 + 40 & 540 & 12 & 40598 & 6018 & 2187 & 69 & * 174 * & * 31 * & 166 + 40 & 720 & 3 & 488 & 1399 & 393 & 1325 & * 366 * & * 1080 * & 5 + 40 & 720 & 6 & 6888 & 11139 & 3507 & 3957 & * 2563 * & * 3263 * & 756 + 40 & 720 & 9 & 21746 & 14400 & 20743 & 8220 & * 12753 * & * 6820 * & 10656 + 40 & 720 & 12 & 24739 & 14400 & 68920 & 9164 & * 21067 * & * 6209 * & 23532 +    [ bc][bl ] [ bc][bl ] [ bc][bl ] [ bc][bl ] [ tc][bc ] [ tc][bc ] [ tc][bc ] [ tc][bc ] [ bc][bl ] [ bc][bl ] [ bc][bl ] [ bc][bl ] [ bc][bl]50% [ bc][bl]100% [ bc][bl]150% [ bc][bl ] [ bc][bl ] [ bc][bl]30% , @xmath475 .",
    "right : instances for @xmath476 , @xmath477 .",
    "the number of partitions  @xmath4 is indicated on the @xmath15-axis .",
    "values above 4 hours indicate the gap in percent.,title=\"fig : \" ] [ tc][bc ] [ tc][bc ] [ tc][bc ] [ tc][bc ] , @xmath475 .",
    "right : instances for @xmath476 , @xmath477 .",
    "the number of partitions  @xmath4 is indicated on the @xmath15-axis .",
    "values above 4 hours indicate the gap in percent.,title=\"fig : \" ] [ tc][bc ] [ tc][bc ] [ bc][bl ] [ bc][bl ] [ bc][bl ] [ bc][bl ] [ bc][bl ] [ bc][bl ] [ bc][bl]50% [ bc][bl]100%    in a first experiment we tested the speedup that can be obtained by performing orbitopal fixing . for this",
    "we compare the variant ( _ basic _ ) without symmetry breaking ( except for the zero - fixing of the upper right @xmath15-variables ) and the version in which we use orbitopal fixing ( _ of _ ) ; see table  [ tab : random_prop ] for the results .",
    "nsub _ give the number of nodes in the branch - and - bound tree .",
    "the results show that orbitopal fixing is clearly superior ( of winners : 30 , basic winners : 0 ) , see also figure  [ fig : basic_vs_of ] .",
    "table  [ tab : random_prop ] shows that the sparse instances are extremely easy , the instances with @xmath475 are quite easy , while the dense instances are hard .",
    "a situation that often occurs for small  @xmath468 and large  @xmath4 is that the optimal solution is 0 , and hence no work has to be done . for @xmath475 ,",
    "the hardest instances arise when @xmath478 .",
    "it seems that for  @xmath479 the small number of variables helps , while for @xmath480 the small objective function values help . of course , symmetry breaking methods become more important when  @xmath4 gets larger .    in a second experiment , we investigated the symmetry breaking capabilities built into cplex .",
    "we suspect that it breaks symmetry within the tree , but no detailed information was available .",
    "we ran cplex 11.00 on the ip formulation stated in sect .",
    "[ sec : introduction ] . in one variant ,",
    "we fixed variables  @xmath5 with  @xmath452 to zero , but turned symmetry breaking off . in a second variant , we turned symmetry breaking on and did not fix variables to zero ( otherwise cplex seems not to recognize the symmetry ) .",
    "the symmetry breaking variant turned out to be effective : it was always faster than the other version .",
    "the variant with no symmetry breaking and no fixing of variables performed extremely badly .",
    "the results obtained by the of - variant above are clearly superior to the best cplex results ( cplex could not solve 21 instances within the time limit , while of could not solve 1 ) .",
    "this result can be explained , at least partially , by the separation of clique and other problem specific inequalities .    in another experiment",
    ", we turned off orbitopal fixing and separated shifted column inequalities in every node of the tree .",
    "the results are that the of - version is slightly better than the sci variant ( of winners : 19 , sci winners : 11 ) , but the results are quite close ( of average time : 2330 seconds , sci average time : 2288 seconds ) .",
    "although by part  2 of theorem  [ thm : seqfixorbi ] , orbitopal fixing is as strong as fixing with scis ( with the same branching decisions ) , the lps get harder and the process slows down a bit . on the other hand ,",
    "the scis are already active in the root node , which yields a better root bound .",
    "this may result in fewer branch - and - bound nodes due to potentially more fixings in the root node .    finally , we compared orbitopal fixing to the isomorphism pruning approach of margot .",
    "we implemented the basic variant with fixed canonical variable order , the _ ranked branching rule _",
    "( see @xcite ) , as well as the variant with free branching decisions , each adapted to the special symmetry we exploit , which simplifies margot s algorithm significantly .",
    "we decided to use the canonical order variant , as it gave the best results .",
    "it can be seen from table  [ tab : random_prop ] that isomorphism pruning is inferior to both orbitopal fixing ( of winners : 30 , isomorphism pruning winners : 0 ) and shifted column inequalities ( 30:0 ) , but is still a big improvement over the basic variant ( 28:2 ) .",
    "we did not implement orbital branching , since this method when using global symmetry only is very similar to isomorphism pruning in our context as pointed out in section  [ sec : margot ] .",
    "hence , we decided to restrict to an experimental comparison to isomorphism pruning .",
    "it should be noted that , in contrast to orbitopal fixing , both isomorphism pruning as well as orbital branching could exploit symmetries of the instance graphs , too .",
    "however , no nontrivial graph automorphisms in our test instances were found by nauty , see  @xcite .",
    "we are grateful to andreas loos for discussions on the complexity of optimizing linear functions over covering orbitopes that lead to the basic idea for the proof of theorem  5 .                , _ the semidefinite relaxation of the @xmath13-partition polytope is strong _ , in proceedings of the 9th conference on integer programming and combinatorial optimization ( ipco 02 ) , w.  j. cook and a.  s. schulz , eds .",
    "2337 of lecture notes in computer science , berlin heidelberg , 2002 , springer - verlag , pp .",
    "273290 .      , _ symmetry breaking _ , in principles and practice of constraint programming ",
    "cp 2001 : 7th international conference , t.  walsh , ed .",
    "2239 of lncs , springer - verlag , berlin / heidelberg , 2001 , pp .",
    "93107 .                    , _ orbitopal fixing _ , in integer programming and combinatorial optimization , 12th international ipco conference , ithaca , ny , usa , june 25 - 27 , 2007 , proceedings , m.  fischetti and d.  p. williamson , eds .",
    "4513 of lecture notes in computer science , springer , 2007 , pp .",
    "7488 .                            , _ constraint orbital branching _ , in integer programming and combinatorial optimization , proc .",
    "of the 13th ipco conference , bertinoro , a.  lodi , a.  panconesi , and g.  rinaldi , eds .",
    "5035 of lecture notes in computer science , springer , 2008 , pp .  225239 ."
  ],
  "abstract_text": [
    "<S> the topic of this paper are integer programming models in which a subset of 0/1-variables encode a partitioning of a set of objects into disjoint subsets . </S>",
    "<S> such models can be surprisingly hard to solve by branch - and - cut algorithms if the order of the subsets of the partition is irrelevant , since this kind of symmetry unnecessarily blows up the search tree .    </S>",
    "<S> we present a general tool , called orbitopal fixing , for enhancing the capabilities of branch - and - cut algorithms in solving such symmetric integer programming models . </S>",
    "<S> we devise a linear time algorithm that , applied at each node of the search tree , removes redundant parts of the tree produced by the above mentioned symmetry . </S>",
    "<S> the method relies on certain polyhedra , called orbitopes , which have been introduced in  @xcite . </S>",
    "<S> it does , however , not explicitly add inequalities to the model . </S>",
    "<S> instead , it uses certain fixing rules for variables . </S>",
    "<S> we demonstrate the computational power of orbitopal fixing at the example of a graph partitioning problem . </S>"
  ]
}