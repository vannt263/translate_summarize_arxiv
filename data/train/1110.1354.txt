{
  "article_text": [
    "modern software distributions are organized into packages .",
    "a software package is a self - contained unit that can be installed or removed independently of other packages , as long as dependencies are met .",
    "a package manager controls such administrative tasks ; compared to unmanaged installations , the benefits of a package - based approach are the ability to automatically install , upgrade , and remove packages without the need to remember installation locations or which files are affected by a change .    in real software , this ideal state is not easy to achieve , due to dependencies between software packages , and interactions between software belonging to different packages .",
    "dependencies arise because some packages provide lower - level functionality used by others .",
    "interactions occur on shared resources , such as files , and because packages may provide components that can be combined into a larger system ( such as client and server packages communicating together ) .",
    "dependencies restrict the ability to freely install , remove , or upgrade packages .",
    "if a package @xmath0 depends on another package @xmath1 , a package manager automatically requires @xmath1 to be installed when @xmath0 is requested to be installed . furthermore , package @xmath1 can not be removed as long as @xmath0 is still in use .",
    "finally , upgrades of one package often require a simultaneous upgrade of related packages .",
    "in addition to this , there is a notion of _ conflicting _ packages : two packages may use the same resource or provide the same service in a way that is incompatible with each other , so only one of these two packages may reside on a system at any given time .    in package - based software distributions",
    ", so - called _ package meta - data _ describes dependencies and relations between packages .",
    "most free open source software ( foss ) systems are managed in that way .",
    "meta - data contains information about dependencies of packages , and conflicts between them . at the time of writing",
    ", meta - data covers relations between packages on a package level ; dependencies and conflicts are indicated by package , not by the actual resources a package provides or depends on .",
    "so - called _ virtual packages _ are sometimes used as place - holders for actual resources or services provided by a package , but they do not constitute an accurate , fine - grained description of those resources , which may be files , network ports , or system services .",
    "inter - package conflicts occur if the combination of multiple packages results in a defect that is absent otherwise .",
    "package meta - data may indicate such conflicts , which prevents conflicting combinations of packages from being installed .",
    "however , inter - package conflicts may still arise in practice .",
    "the reasons for such conflicts are manifold : packages are not simply bundles of files , but include pre - installation and post - installation scripts .",
    "these scripts are unrestricted , turing - complete programs running with full system ( root ) access .",
    "it is therefore impossible in general to capture the full side effects of these scripts with a formal description .",
    "the same problem arises of course as well for executing the software provided by these packages .",
    "therefore , a complete logical analysis of package behavior is not possible ; however , as this paper shows , steps can be taken towards covering certain types of common conflicts that are not automatically verifiable with current tools .",
    "another problem arises from the fact that meta - data is provided manually , by package maintainers .",
    "it is therefore a challenge to keep such meta - data up to date and accurate .",
    "this challenge becomes especially daunting in the presence of a huge number of software packages in distributions such as debian gnu / linux , where the number of packages available currently exceeds 30,000  @xcite .    as a consequence of this",
    ", bug reports referring to conflicts between packages are becoming frequent .",
    "this paper investigates the sources of the conflicts and tries to answer the following questions :    * what are the reasons why inter - package conflicts arise ? * are there common categories of inter - package conflicts ?",
    "* can these problems be addressed by using existing tools , or is there a need to augment existing tools , or create new ones ?",
    "* is the package meta - data currently being used , accurate and sufficient ?",
    "is there a need to automatically verify such meta - data for accuracy , or is there a need to use additional meta - data for a more accurate notion of package conflicts ?",
    "in other words , are most or all possible package conflicts covered by meta - data ?",
    "this paper is organized as follows : section  [ sec : related - work ] describes related work .",
    "section  [ sec : evaluation ] shows a case study on inter - package conflicts in debian , with a detailed evaluation of different kinds of package conflicts .",
    "section  [ sec : discussion ] discusses the results and proposes possible strategies for remedying problems found , and section  [ sec : conclusions ] concludes and outlines future work .",
    "software packages are a well - known example of the component models that have originated from the field of component - based software engineering ( cbse )  @xcite .",
    "packages fit very well within common component definitions , but the raise in their popularity  started with the advent of foss package managers such as the freebsd porting system  @xcite , apt  @xcite , yum , etc.has highlighted very specific challenges related to their deployment  @xcite . some of those challenges are being addressed relying on package meta - data and their formalization",
    ".    seminal work by mancinelli et .",
    "al  @xcite has shown how to encode the installability problem for software packages as a sat problem , established the ( np - hard ) complexity of the problem , and shown applications of the encoding to improve the quality of package repositories by avoiding non installable packages .",
    "based on the same formalization , various quality metrics have been established , such as strong dependency and sensitivity  @xcite ( to evaluate the `` importance '' of a package in a given repository ) and strong conflicts  @xcite ( to pinpoint packages which might hinder the installation of several other packages ) . in the same vein ,",
    "package meta - data have also been used to predict future ( non ) installability of software packages  @xcite .",
    "the abundance of studies that rely on package meta - data testifies the importance of the correctness of those meta - data .    on the other hand , studies on package meta - data correctness like this one ,",
    "seem to be scarce . at the same time , a few testing can be found in the realm of quality assurance ( qa ) of foss distributions to discover _ symptoms _ that might then lead , a human , to discover errors in package meta - data . to name one , the `` file overwrite ''  @xcite initiative by treinen helps in discovering undeclared conflicts among packages in the debian distribution .      as an alternative to globally managed software packages that are organized in a fine - grained hierarchy , self - contained packages including all sub - components , sometimes called _ bundles _ , are sometimes used .",
    "such bundles include the application and all libraries it depends on , linked statically  @xcite .",
    "this contrasts to foss distributions where libraries are shared , and generally required to be shipped as separate packages ",
    "see for instance  @xcite , `` convenience copies of code''in order to ease the deployment of ( security ) upgrades . in a system using bundled software , all applications using the library in question need to be updated separately .",
    "this usually entails a longer period during which a system is vulnerable , because some software bundles may be provided by third parties .",
    "an advantage of self - contained software bundles is the ease of testing and deployment , as system - specific configurations and libraries have only limited impact on the software bundle .",
    "however , statically linking all libraries used by a bundle requires much disk space . if many applications include the same statically - linked libraries , these libraries are duplicated within the same system .",
    "deduplication addresses this problem  @xcite .",
    "memory and storage deduplication merge same - contents chunks on block level , and reduce the consumptions of physical memory . by sharing identical chunks of storage , logical - level redundancies caused by static linking",
    "are resolved on the physical level .",
    "the evaluation of existing inter - package conflicts in debian was carried out on a snapshot of the ultimate debian database ( udd )  @xcite .",
    "this database contains key data of all active ( open ) bugs at that time , such as bug i d , title , and the package involved .",
    "the snapshot used was taken on january 23 2011 , and contained 79936 bugs .",
    "this database is too large to be analyzed manually , so the selection of bugs was first narrowed down by a keyword search .",
    "we chose three keywords to search for : `` break '' , `` conflict '' , `` overwrite '' .",
    "the first two words are generic descriptions of inter - package conflicts and often appear in the form `` @xmath0 breaks @xmath1 '' or ",
    "@xmath0 conflicts with `` @xmath1 '' .",
    "the last keyword describes one of the most common inter - package problems , where one package overwrite a resource needed by another package .",
    "table  [ table : keyword - matches ] gives an overview of all the matches in the search .",
    "a total of 929 bugs match the initial search ; some of the matches contain more than one keyword and therefore are duplicates .",
    "our aim is not to get an exact number of how many inter - package conflicts there are in total ; rather , we want to know what types of conflicts occur more often than others , relative to the total number .",
    ".number of matches per keyword in debian database.[table : keyword - matches ] [ cols=\"<,>,>\",options=\"header \" , ]     we therefore narrow down the search to eliminate bug reports that describe problems that relate to one package alone , rather than a conflict between two packages . for example , `` overwrite '' could appear in a bug report on a text editor in a bug report related to overwriting text ( or a file , on saving ) . in fact , an initial manual evaluation showed that about half of all bug reports found in the initial search were not related to inter - package conflicts .",
    "the search is refined to include only bug reports out of the initial selection , where the title contains the name of another package .",
    "this may filter out more bug reports than necessary ( decreasing recall , in search terms ) , but makes the results much more precise . to avoid excluding too many packages , ( version ) numbers of packages are not included in this filter , even if the package name itself contains a version number .",
    "a manual check showed that this filter was actually a good approximation of a manual selection of true inter - package conflicts .",
    "as shown in table  [ table : keyword - matches ] , the refined selection contains 290 matches , 241 of which are distinct bug reports .",
    "further manual post - processing of that list removes another 51 items , where the title indicates clearly that those are not inter - package conflicts .",
    "this leaves 190 bug reports where , judging from the title of the report , a possible inter - package conflict is reported .",
    "a subset of these bug reports was evaluated in a first sample , to come up with a categorization of bug reports that would not be too coarse ( giving only a few rough classes of bugs ) and not be overly precise either ( putting most bugs into a category of their own ) .",
    "after that , all bug reports are classified according to these criteria , or eliminated as not being inter - package conflicts , although the title would suggest so ( in the list of 190 reports ) .",
    "the 190 cases of which the bug report titles suggested an inter - package conflict , were analyzed manually .",
    "this requires the full information available on each bug , which is not contained in the summary database ( udd ) used in the first step .",
    "the 190 bug reports in question were downloaded from the web page at http://www.debian.org / bugs/. 51 bug reports out of 190 contain no inter - package conflict , but rather a conflict that is not reproducible , or a conflict within a single package which is either misclassified or contains a misleading title .",
    "this leaves 139 genuine inter - package conflicts , which are classified into five broad categories :    1 .",
    "conflicts on files and similar shared resources ( such as devices or c library function names ) . whenever a conflict occurs directly on a file ( or device ) , the conflict is caught at installation time by ` apt - get ` , the package manager for debian .",
    "this handling is safe , but unsatisfactory : if a list of files used was provided beforehand , then an enhanced package manager could prevent an installation attempt that is bound to fail . on the other hand ,",
    "other types of conflicts , such as name clashes in libraries , may not be detected until an application is used at run - time .",
    "conflicts on shared data , configuration information , or the information flow between programs .",
    "configuration information is often found in ` /etc ` , while shared data may be located elsewhere .",
    "information flow refers to function calls or communication via pipes or a network .",
    "there are two basic cases where conflicts occur on data or communication : ( 1 ) an installation action of a package changes the configuration such that either the syntax of a configuration file is broken ( made unreadable for the parser used by another tool ) , or the semantics create a conflict . ( 2 ) a change in the data format between versions of an application , which requires updating other components ; the lack of an appropriate newer version of other components , or the lack of a declaration of such , causes a conflict . in both cases ( 1 ) and ( 2 ) , the conflict only becomes evident at run - time .",
    "uncommon , previously untested combinations of packages , cause a conflict . in some cases ,",
    "a package @xmath0 using another package @xmath1 makes a previously undetected fault in @xmath1 evident ; it is possible that other use cases for @xmath1 could produce the same problem , so the failure can ( at least in theory ) be reproduced using @xmath1 alone . in other cases ,",
    "the combination of @xmath0 and @xmath1 is necessary for those packages to fail , and either package would work fine without the conflicting package being present .",
    "nine cases fit this description , where the reason of a conflict could not be attributed to cases listed above .",
    "package evolution issues .",
    "when a software distribution evolves , packages may be renamed or split up into multiple packages , or several packages may be merged into one .",
    "this may require updating meta - data in other packages for the distribution to remain consistent .",
    "furthermore , version changes with a package may also require meta - data changes due to possible incompatibilities mentioned above .",
    "unfortunately , meta - data changes are not automated , and are primarily the responsibility of the maintainer of a given package .",
    "this causes a potential for meta - data to be outdated and not reflect a correct state anymore .",
    "the last category represents cases where two packages are incorrectly classified as conflicting , although there is no conflict , at least not for the current version of these packages .",
    "table  [ table : deb - pkg - conflicts ] and figure  [ fig : xpkgbugs ] show an overview of the classification into these five categories .",
    "larger categories were split up into smaller groups to get a more detailed picture .",
    "while human error in the classification is possible , the results are overall quite clear for larger categories .",
    "some trends are evident :    ]    1 .",
    "resource conflicts are common , representing more than one third of all conflicts .",
    "22 out of 48 such conflicts are on files and caught by the package manager at installation time ; other similar conflicts may not be caught until a package is actually used .",
    "2 .   conflicts on configuration , and to a lesser degree , the format of shared data , are equally common .",
    "17 cases were found where syntactic problems caused a conflict between packages ; the most common reason is the automatic modification of configuration files by installation scripts .",
    "these installation scripts are likely tested for common configurations , but may not behave as expected for less common settings .",
    "unintended semantic changes in configuration files occurred 14 times during installation , and 4 times after installation , so this is also a significant problem .",
    "it is compounded by the fact that many files have to be customized by the user before a package can be used , and the formatting of a configuration file may see subtle changes that are correctly dealt with by the packaged software itself , but not by the installation scripts that manage the package .",
    "other problems between packages that are usually not installed together represent one out of six inter - package conflicts .",
    "the huge number of available packages makes it impossible to test all combinations ( or even just all pairwise possible combinations ) of packages together , so a conflict often goes undetected until reported by a user .",
    "4 .   conflicts on meta - data level , often caused by package evolution , contribute about 10% .",
    "incorrect ( or outdated ) information on conflicting packages sometimes occurs as well , which does not create a package conflict per se , but instead prevents two packages from being used together .",
    "the previous section has given a categorization of inter - package conflicts based on empirical data .",
    "we now propose possible solutions that can potentially cover some or all instances of each class of conflicts .    1 .",
    "conflicts on files are not directly covered by existing meta - data , although they may be implied by package - level conflicts .",
    "work is in progress to systematically test package installations against overwriting files provided by another package  @xcite . as an alternative to this , _ file diversions _",
    "enable a package to install files at a different location ; work is in progress to automate this . +",
    "this case study shows that while the majority of such conflicts occurs at file level , file _ permissions _ ( and ownership ) rather than just file names , and possible file / directory renaming actions during package upgrades , should also be considered .",
    "finally , coverage of similar resources such as network ports and c function names would further augment the ability of such tools to detect conflicts proactively . + more detailed meta - data will require much more space than existing ( rather compact ) package meta - data .",
    "we propose that such extra meta - data is generated and used only by developers and package maintainers .",
    "as it covers possible conflicts proactively , at development time , extra meta - data does not have to be included in the final distribution .",
    "we think that most or all of such resource - related meta - data can be extracted automatically from test runs , therefore requiring no extra effort from package maintainers .",
    "2 .   conflicts on configuration files , file formats and api versions are also common , and clearly demonstrate the need of systematic testing against such conflicts . in the light of testing against overwriting files  @xcite ,",
    "inter - package tests should also be automatically run against conflicts on shared data .",
    "this is much more difficult to automate , and only feasible for packages that include automatic regression tests .",
    "+ the problem is that regression tests are used by developers and package maintainers , but not by end users who install and use these packages . because of this",
    ", regression tests are currently not covered by package meta - data .",
    "this makes them inaccessible to today s package management tools , and pretty much precludes the automated discovery of such intricate conflicts .",
    "however , at a lower level , many source - level distributions have a `` make test '' or `` make check '' build target that automatically performs such tests . in the future",
    ", such information could be provided in package meta - data , for package maintainers .",
    "furthermore , on a basic level , certain problems may be found just by executing a program and checking whether its return value indicates an error , or by attempting to start and stop a system service cleanly .",
    "the fact that rare combinations of packages may cause problems is not surprising , given the large number of packages available .",
    "an exhaustive testing of package combinations is not feasible , but heuristic - based testing of sets of packages may be .",
    "a possible approach may be to install larger subsets of packages , and to narrow down the set of conflicting packages by a systematic search such as delta debugging  @xcite .",
    "package evolution often brings with it an invalidation of package meta - data .",
    "the fact that about one tenth of inter - package conflicts occurred directly due to invalid meta - data after larger package modifications ( such as splitting a package into two packages ) , shows that meta - data needs to be verified for consistency and accuracy .",
    "especially when given a situation with `` known good '' meta - data ( before the modification ) , automatic verification of the new meta - data is feasible if packages can be tested automatically . + as with other issues described above , meta - data does not cover the requirements of packages in enough detail .",
    "for example , take a package @xmath0 that is split up into @xmath2 and @xmath3 , because some parts of @xmath0 are not used by many packages .",
    "if a package @xmath1 depended on @xmath0 in the old configuration , it is possible that it will depend on @xmath2 , @xmath3 , or both packages in the new configuration .",
    "if some of the resources provided by these packages are loaded dynamically by @xmath1 ( at run - time ) , then verification of the actual software is required to determine the correct new dependency .",
    "spurious ( or outdated ) declarations of inter - package conflicts can be responded to , by automated testing of packages that supposedly conflict . as mentioned above ,",
    "work is in progress to detect file - level conflicts , but other types of conflicts require more detailed meta - data , or mechanisms to better support the automatic testing of the execution of the software that packages provide .",
    "conflicts between software packages occur due to a variety of reasons .",
    "conflicts on shared resources and configuration files are particularly common .",
    "the underlying problem is that package behavior at installation , use , and de - installation time is unrestricted , so a complete formal description of package behavior can not be achieved .",
    "however , steps can be taken towards increasing the expressiveness and accuracy of package meta - data , by adding meta - data that is intended for package developers and maintainers .    in our case study , we categorize a large number of inter - package conflicts , and propose possible solutions to common categories of conflicts .",
    "our study uses a single snapshot of bugs between packages reported in debian gnu / linux .",
    "future work includes studying the evolution of packages , and bugs reported , in more depth by investigating multiple snapshots over time .",
    "furthermore , other software distributions such as fedora may also be considered .    as a conclusion from our initial case study",
    ", we found that ongoing and future projects can reduce inter - package conflicts most efficiently by ( a ) identifying and testing combinations of packages that may conflict , ( b ) generating and using extra meta - data , and ( c ) checking the validity of ( manually provided ) meta - data .",
    "such meta - data should cover files including file meta - data in particular , and as a next step , other system resources such as network ports , shared ( global ) configuration data , and communication between components .",
    "another aspect currently omitted in meta - data is information about regression tests that already exist in many packages , but are inaccessible on a package level because they are not declared or available in a uniform way ."
  ],
  "abstract_text": [
    "<S> inter - package conflicts require the presence of two or more packages in a particular configuration , and thus tend to be harder to detect and localize than conventional ( intra - package ) defects . </S>",
    "<S> hundreds of such inter - package conflicts go undetected by the normal testing and distribution process until they are later reported by a user . </S>",
    "<S> the reason for this is that current meta - data is not fine - grained and accurate enough to cover all common types of conflicts . </S>",
    "<S> a case study of inter - package conflicts in debian has shown that with more detailed package meta - data , at least one third of all package conflicts could be prevented relatively easily , while another one third could be found by targeted testing of packages that share common resources or characteristics . this paper reports the case study and proposes ideas to detect inter - package conflicts in the future . </S>"
  ]
}