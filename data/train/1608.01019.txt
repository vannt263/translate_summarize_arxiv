{
  "article_text": [
    "applications tend to consume and produce more and more data with each passing year . in order to cope with this increasing volume ,",
    "some of the work of interpreting and connecting the various pieces can be shifted to the machines that process it .",
    "linked data aims to accomplish this by providing some structure to the data",
    ". this can be especially useful for social networks , wikis or learning systems , where the information is highly interconnected .",
    "linked data stores are already numerous and massive in size .",
    "for example the dbpedia data set is estimated to contain 4.5 million entities[multiblock footnote omitted ]    , width=226 ]    most linked data applications utilize a central repository that is always online and can be interacted with by the users .",
    "however , always - online connectivity is not guaranteed in developing countries , especially outside of the major cities .",
    "current estimates indicate that approximately 4.1 billion people live with limited to no internet access[multiblock footnote omitted ] .",
    "information and communication technologies for development ( ict4d[multiblock footnote omitted ] ) tries to improve the quality of life of those in developing countries by providing access to technology @xcite .    in order to address",
    "the issue of deploying applications that utilize linked data in limited connectivity circumstances , under a grant from verisign@xcite , the entity registry system ( ers ) has been developed .",
    "its goal is to replace the web as a platform for publishing linked data when the latter is not available .",
    "it proposes a completely decentralized model , where off - line is the default mode of operation , with occasional connectivity bursts .",
    "an entity registry provides a way to associate data with an uniquely identifiable entity .",
    "ers is a decentralized , read - write entity registry that allows collaborative editing of entities , which have their data represented in the resource description framework ( rdf[multiblock footnote omitted ] @xcite format . by using rdf tuples as the underlying data representation ,",
    "ers can inter - operate with existing linked data sets , providing a robust system that can be used both online and offline , can be deployed on very low - end hardware as well as high - performance servers and has a high degree of tolerance for sudden network and topology changes .    the goal of this work is to investigate ers behavior in complex realistic scenarios . to this end",
    ", we needed to make it easy to deploy , configure and orchestrate , in order to create repeatable test scenarios .",
    "we also verify that the system functions without ideal network connectivity and low hardware capabilities .",
    "section two describes the work related to ers , and also the tools that are used when automating systems testing .",
    "section three describes ers as it was at the beginning of the work .",
    "the following section describes the components of the testing framework and the improvements and changes that needed to be made to the original system .",
    "section five describes the various experiments that were run with the developed tools and is followed by a discussion section that describes the lessons learned .",
    "finally , the conclusion section also investigates possible future improvements .",
    "in @xcite an overview of the options for designing systems that can store and manipulate linked data is given , and the three main categories are : centralized , hierarchical and distributed .",
    "a centralized system depends on a central node or group of nodes for storing and serving data , causing the central component to become a single point of failure for the entire system .",
    "a hierarchical architecture mitigates this problem by providing some functionality from nodes outside of the central cluster , whereas a fully distributed approach distributes the load across all constituent nodes .    *",
    "centralized : * okkam@xcite * and * conceptwiki[multiblock footnote omitted ] * are two web applications that allow the manipulation of entities . however , due to their centralized model , they are not designed to function in a poor connectivity scenario . *",
    "hierarchical : * dns * is the canonical example of a registry which uses the hierarchical architectural model . in @xcite",
    "the possibility of extending the dns system by using the text record field and dnssec to include meta - data about internet domains is suggested . *",
    "decentralized : in @xcite an overview of several decentralized platforms that are similar to ers is given . +",
    "* * tipc ( transparent inter - process communication)**[multiblock footnote omitted ] @xcite is a network protocol with many architectural similarities to ers .",
    "the architecture consists of nodes , clusters and zones .",
    "nodes can establish point - to - point links to each other ( in a full mesh ) that are logically grouped into clusters , which in turn can be grouped into zones .",
    "there are some differences to ers .",
    "first of all , in tipc the grouping is logical , whereas ers provides different components for the nodes , bridges(which correspond to clusters ) and zones ( which correspond to the global aggregator ) .",
    "secondly , the behavior is different .",
    "if ers nodes within a network detect a bridge , they switch connectivity from full mesh to connecting only to the bridge , thus reducing the number of links from quadratic to linear .",
    "finally , tipc functions at the ip layer , whereas ers functions at the application layer of the network stack . + * * sugar network**[multiblock footnote omitted ] is a project that is very similar to ers .",
    "however , ers proposes a decentralized model that will work in completely closed networks , with nodes sharing information without the presence of bridges , whereas in the sugar network architecture , clients can only communicate with nodes ( which are the equivalent of bridges ) or the master node ( which are the equivalent of the global aggregator ) .",
    "the data model of ers also permits more flexibility , as it allows storing of any data as long as it is expressed as rdf tuples . + * * nintendo streetpass and spotpass**[multiblock footnote omitted ] represent systems designed to allow users of the 3ds handheld game system to share game data seamlessly , when in close proximity .",
    "this functionality is similar to that of ers nodes being connected on the same network .",
    "there is also the option of using streetpass relays which are similar in functionality to ers bridges .",
    "the main difference is that the ers design also features a top - level aggregator that can offer snapshots of the entire system .",
    "moreover , ers is not restricted to a particular platform ( deployments have been tested on xo laptops , raspberry pis and similar boards , and full x86 systems ) .",
    "the centralized and hierarchical models provide a poor fit for the scenario which ers targets , as their design architecture is not meant for ad hoc mesh network connectivity .",
    "the existing decentralized solutions provide either strong restrictions on the devices that are used ( e.g. nintendo streetpass ) or the data model ( e.g. sugar network ) .",
    "though tipc provides a similar architecture , it is meant to function as part of the network stack .",
    "ers functions at the application layer and provides clear deployment scenarios and is designed for ad hoc mesh networks in remote areas .      with the increasing popularity of large scale distributed systems and cloud computing , automating the management of infrastructure ( infrastructure as code )",
    "has become a recommended practice@xcite .",
    "the devops role has greatly benefited from the appearance of tools that assist with provisioning , hardware management , deployment , and failure simulation .",
    "provisioning tools such as puppet[multiblock footnote omitted ] or chef[multiblock footnote omitted ] help reduce the risk of human errors and can thus offer great end to end time improvements when used in conjunction with cloud providers that can offer physical resources within minutes .",
    "when a system requires new hardware , it can be automatically configured and added to the pool of available resources .",
    "these tools can help reduce the ers setup time drastically when running natively .    docker[multiblock footnote omitted ] allows developers to package their applications into containers that can be run on any supported hardware . having pre - built docker containers for ers available online makes it easier to test .",
    "a new instance of ers can thus be set up in minutes .",
    "one of the most innovative additions to the field was the netflix simian army.[multiblock footnote omitted ] in the wake of a major outage , netflix has developed a suite of tools that allows them to simulate multiple types of failure without human intervention . having this as an automatic process helps prevent testing only the cases that the developers have thought of .",
    "also , having failure as a constant process means that automated recovery becomes a critical part of the system , and when a real failure happens , the users do not notice it .",
    "although netflix has released the tools as open source software , it is designed to function in conjuncture with aws and is not usable locally , and the configuration effort is also pretty significant .",
    "section four describes how ers uses puppet for provisioning , docker containers , as well as an implementation of the netflix simian army that can be run without aws .",
    "section five describes how these building blocks were used to create repeatable , complex test scenarios , that can run without manual intervention for the purpose of investigating ers functionalities , performance and scalability .",
    "in figure[fig : deployment ] a simple example of an ers deployment can be observed .",
    "more details about the system can be seen on the github page@xcite for more in - depth analysis , please refer to the paper describing the system @xcite .",
    "there are three main components :    * contributor : the contributors can read and write the content of the registry . in the general use case",
    ", they would be represented by the laptops of the children , with the content of the registry being the linked data that various activities produce .",
    "examples of such activities may be contributions on a shared document , notes on various book chapters , etc .",
    "this data is stored locally and can be distributed ( if made public ) whenever connectivity is present . *",
    "bridges : bridges provide a means to connect different isolated parts of the system in order to distribute public data from the contributors . they do not need to reside in the same physical location as any of the contributors and can share public data provided to them with bridges in any other locations .",
    "their functionality is similar to that of a cache , in the sense that if a part of the network goes down , public data can still be read from the bridges to which it was previously connected . of course ,",
    "due to storage constraints , data is stored only temporarily on the bridge . *",
    "aggregator : ers deployments can benefit from the presence of an aggregator , which would ideally be deployed on a high - performance server or cluster .",
    "this optional component can provide a top - level entry point to the whole system , enabling fast read - only retrieval of the public data .",
    "contributors and bridges can push data to the aggregator for it to be available publicly .",
    "+ the example in figure[fig : deployment ] shows a deployment with contributors and bridges in multiple geographical regions ( r1 through r4 ) . in this example",
    ", r1 contains the aggregator , which can offer a read - only view of the public contributions of all the contributors . in r4",
    "we see a number of contributors without a bridge present on the network , and thus each contributor synchronizes with all the others .",
    "one of the contributors in r4 is set to send updates to the bridge in r3 whenever it is available .",
    "in contrast , r2 has a bridge present on the network and all the contributors share data through it instead of directly to each other .",
    "the bridges are set to synchronize with each other and with the aggregator . in this example ,",
    "when full connectivity is present , public data can be read by any contributor , or can be queried from the aggregator .",
    "should r1 go offline , the rest of the nodes will not be affected .",
    "the system is resilient towards arbitrary failures , with nodes and bridges being able to connect and disconnect without heavily impacting others .",
    "the nodes will only have stale data while connectivity is fully disrupted between regions .",
    "once it is re - established , the synchronization protocol will handle propagating the updates .",
    ", width=321 ]      ers uses couchdb as the storage back - end and takes advantage of the replication mechanisms it provides in order to transfer data between peers .",
    "however , the data model of the database is json documents . in order to transform rdf tuples into json two options",
    "have been considered : predicates as keywords and synchronized arrays ( figure[fig : jsonpreds ] and figure[fig : jsonarr ] respectively ) .    in @xcite , the disk space occupied by the two options in couchdb",
    "is compared and it is concluded that this should not be a deciding factor , since no major differences were observed .",
    "the option of using predicates as keys was chosen because of its similarity to json and because it facilitates data manipulation .",
    ", width=226 ]    , width=226 ]    the next issue is that of mapping rdf entities to documents . in @xcite",
    "a study of the various options has been performed and one document per graph entity combination was chosen as the best option . in this case",
    "each node that makes statements about an entity will create a local document containing those statements . read",
    "performance will decrease ( when compared to having one document per entity ) because all the pieces that make up the same entity need to be merged by applications using ers .",
    "however , this simplifies writing and synchronization as couchdb natively supports the required operations .",
    "each ers contributor has access to three data stores ( represented internally by three different couchdb databases ) : public , private and cache ( figure[fig : datastores ] ) .",
    "the private stores represents the collection of documents that the user does not want to be visible by any other nodes in the system .",
    "examples of data that is stored here is personal private information for participants to a conference or sensitive business information in the case of a vendor .",
    "the public store holds statements that can be queried by others and that get replicated by bridges .",
    "examples include a public list of skills and work experience that a conference participant wants to share with others or a list of products and their prices for a vendor .",
    "the cache contains information that is not local to a node , but has been queried by him . in the case of a vendor",
    ", he can have in his cache documents related to prices of other vendors that he does business with , which get updated every time there is network connectivity between them .",
    ", width=226 ]      the synchronization model proposed by ers consists of the following parts : contributor - contributor , contributor - bridge , bridge - bridge and bridge - aggregator . in @xcite an overview of the synchronization schema used is given .",
    "a graphical description can be seen in figure[fig : synchronization ] .",
    "1 .   contributor - contributor synchronization .",
    "when two contributors are on the same network , but without a bridge , this synchronization protocol is used . in this case ,",
    "their caches are synchronized through a filtered replication .",
    "each node will only receive updates about the documents that it already has in his cache .",
    "this avoids the issue of a contributor with a very large cache filling up others databases with data they are not interested in . 2 .",
    "contributor - bridge synchronization when contributors are connected to a bridge , they drop synchronization links to other contributors .",
    "this reduces the total number of connections from quadratic to linear ( in the number of contributors ) .",
    "bridges keep all the public documents of contributors in their cache ( through an unfiltered continuous synchronization ) .",
    "contributors receive from bridges updates for the items they have in their caches through a filtered replication .",
    "bridge - bridge synchronization bridges exchange updates for the documents in their cache store and have the ability to get new documents that contain statements about entities already found in their cache .",
    "bridge - aggregator synchronization the aggregator receives updates from the caches of all the bridges that it is connected to and it can provide a read - only global snapshot of the public data in the system .    ,",
    "width=226 ]      this subsection focuses on ers nodes and bridges , because the usage scenarios that are presented in this paper do not require the presence of an aggregator .",
    "there are two main components of ers nodes and bridges : the api and the daemon .",
    "the daemon deals with discovering peers , implementing replication , handling the various configuration options and logging .",
    "the api is designed to be interacted with by the users of ers .",
    "it exposes methods for creating , deleting or retrieving entities , adding statements , querying remote nodes and searching .",
    "the nodes and the bridge share the same implementation , with the main difference being the replication strategy that is used .",
    "the choice between which component to run on a node can be made in the ers configuration file .",
    "* * ers api.**the main purpose of the ers api is to provide a convenient means of working with couchdb in a linked data model , and operates on documents and entities .",
    "* document . *",
    "an ers document provides a wrapper around couchdb documents .",
    "it is represented by a python dictionary that will map directly to a json format when written to the database .",
    "the document class has methods for adding , removing and modifying tuples ( entity , predicate , value ) .",
    "* entity . *",
    "the entity class is a wrapper around the different documents that compose the description of an entity .",
    "these documents can be from either the local storage(public , cache and private ) or from remote locations(such as bridges or other peers ) .",
    "the methods that this class exposes handle adding , modifying or deleting statements about the entity in a particular scope(public or private ) , as well as getting all the tuples that are associated with it .    the api exposes methods that search and retrieve particular entities either by their name or by looking for property - value matches .",
    "it also allows creating , updating and deleting entities , moving items to and from a node s cache and communicating with the daemon about replication updates .",
    "* ers daemon*.the main purpose of the ers daemon is to seamlessly abstract the network part of the system .",
    "the connection to other peers is established by using avahi.[multiblock footnote omitted ] avahi is a lgpl implementation of the multicast dns and dns service discovery specifications of the zeroconf network protocol @xcite .",
    "when the daemon is started , it reads the configuration file , and sets the peer type to be either a bridge or a contributor . after setting up logging",
    ", it publishes the node as a network service on the local network .",
    "it is worth mentioning that because service names must be unique(in order for nodes to be able to see all other nodes ) , the host name of a computer gets a randomly generated string of characters appended to it .",
    "the daemon also detects all the other nodes that are on the same local network as the host .",
    "it then tries to setup the replication policy , by creating appropriate documents in the couchdb replicator database(linking local databases to those of peers or of the bridge if it is present ) .",
    "this replication can also be filtered to only include documents in a contributor s cache .",
    "this section describes the changes that were made to ers in order to make deployment and testing fully automatable .",
    "automation and being able to programatically create complex scenarios helps validate the system before deploying it . to this end",
    ", the main objectives of this work can be summarized in the following research questions :    * can the orchestration of an ers deployment be automated , in order to create complex simulations of real - world deployments of ers ? * how does ers perform in realistic scenarios that exhibit less than ideal conditions ? what are the minimum hardware and network connectivity requirements ? * does the ers scale to a large number of users ?      in order to automate the ers deployments , some parts of it needed to be modified in order to allow an external application to issue commands to it .",
    "the ers api consists of a python module that can be imported into a client application and a command line interface that can be used directly from a machine that has ers installed .",
    "an http api has been developed that implements most of the functionality .",
    "this would simplify building a graphical user interface to simply building a web page that sends requests to the locally running web server .",
    "however , the main use of the http api in this project was to enable sending of commands remotely .",
    "this was done in order to be able to construct automatic testing scenarios that could enable the orchestration of an entire deployment .",
    "the daemon needs to expose a way to receive commands from the ers api ( in order to trigger replication updates ) .",
    "multiple options were considered    * merging the api and the daemon in order for them to call each other .",
    "this is undesirable because the api and the daemon are separate logical parts of the program * signal communication between them .",
    "does not work because receiving a signal causes dbus to exit its main loop ( regardless of whether the signal is masked ) * including a lightweight http server in the daemon that will accept commands .",
    "ultimately , the http server option was chosen because it preserved the logical separation between the api and the daemon and was easy to use .",
    "this http server also exposes methods for stopping and starting the http daemon , for use in automated testing .",
    "some of the default settings of couchdb needed to be changed for the correct functioning of ers .",
    "the option to delay writes to disk was disabled , as per the recommendations of the couchdb manual .",
    "the number of replication workers has also been increased so that if there is a node which has a very large amount of data to transfer , it does not smother all the others . having multiple threads reduces the chances that all of them are busy transferring very large databases ( for example from a node which has been offline for a very long time ) .",
    "ers was designed so that a single instance is running on a machine . in order to cover a larger scale when testing , doing it on physical hardware was difficult .",
    "first of all , ers had to be manually configured and installed , including each dependency(couchdb , avahi , dbus , etc . ) . in order to address this issue",
    "the puppet automation tool can be used .",
    "a puppet manifest has been developed that automates the setup process of ers and simplifies usage in cases where the other deployment options described below are unavailable ( for example because the hardware is low - end and can not run virtual machines or docker images are not available for the target platform ) . if the puppet agent is installed on the system , the manifest handles all the configuration and installation of ers .",
    "virtual machines have been used to develop and test ers .",
    "these permit running multiple instances of the system on the same machine in order to investigate communication behavior .",
    "these virtual machines can be assigned public ip addresses so that other nodes on the same network ( including those running on different hardware ) can interact with each other . in order to simplify the management of the various virtual machines , vagrant has been used .",
    "a new virtual machine that can run ers can be spun up in minutes , using puppet for provisioning .",
    "this has allowed basic interaction tests ( such as a few nodes connected to a bridge ) .",
    "although virtual machines simplify the development , they contain many pieces that the ers does not entirely need(such as a completely independent file system and network stack , etc . ) .",
    "because of this it is also very resource - demanding to run multiple virtual machines on the same physical hardware . to address this issue ,",
    "docker[multiblock footnote omitted ] has been used .",
    "docker provides a convenient means to use linux containers and produce isolated deployments of ers , while sharing operating system components .",
    "this has made it possible to scale the number of ers instances running on a desktop computer from 5 - 6 to 30 .",
    "the containers are also given public ip addresses so that they can communicate with other ers instances , through the use of pipework[multiblock footnote omitted ] .    a comparison between containers and virtual machines can be seen in @xcite . because they are much simpler to set up and can offer similar if not better performance , they have been used as the deployment method for the more complex experiments that were performed on ers . however , all these three methods of running ers can inter - operate .",
    "a deployment consisting of a raspberry pi 2 model b running ers natively , a laptop running 4 virtual machines with ers and a desktop computer running multiple ers containers has been tested using a local network , and all instances propagate statements as desired .      in order to observe the behavior of ers under less than ideal network connectivity , a basic implementation of the netflix simian army suite of tools has been developed .",
    "this consists of programs that can cause different types of issues within a running distributed system .",
    "the original monkeys were designed to run on aws and could not be run locally .",
    "also , the initial setup work creates an entry barrier that was unnecessary for the scope of the experiments presented in this work .",
    "since the orchestration of the ers deployment mainly used virtual machines and docker containers , the tools that were created were designed to control instances created in this way .",
    "the chaos monkey randomly terminates instances within the running pool of nodes .",
    "this has the purpose of simulating abruptly losing connectivity or power to one of the nodes or bridges .",
    "the latency monkey injects packet loss , corruption , latency , duplication and reordering in a running node .",
    "since the target of deployment for ers is situations where perfect connectivity is unlikely , this should help create an impression of the behavior of ers in such an environment .",
    "this rudimentary implementation is available on github,[multiblock footnote omitted ] and is designed to control virtual machines and docker containers running locally . to interface with them",
    ", it uses the python - vagrant package[multiblock footnote omitted ] for vagrant and the docker - py package[multiblock footnote omitted ] for docker .",
    "the chaos monkey simply uses these clients to turn nodes off and on . the latency monkey uses the clients to issue commands which take advantage of the advanced traffic control features available in the linux kernel @xcite .",
    "although currently they have only been tested with locally running virtual machines and containers , the functionality could be extended by connecting the vagrant and docker modules to remote clients .",
    "this section describes the various experiments that were performed during the development of ers in order to verify functionality , scalability and fault tolerance .",
    "the first subsection summarizes the deployment and experimental setup .",
    "the following one describes a simple experiment with two nodes running on virtual machines on the same physical machine , with ideal network connectivity .",
    "the last two subsections describe two simulations of deployment scenarios : a social network platform for conferences and a deployment scenario for disconnected remote villages that still need to share data ( in this case , price lists of different stores ) .      to summarize section 4 ,",
    "almost all of the aspects of an ers deployment can be interacted with remotely ( e.g. from a central machine that orchestrates more complex test scenarios ) .",
    "the topology can be modified by starting new node or bridge containers through docker , and the network connectivity between these instances can also be adjusted through pipework . within a particular node itself , the daemon can be turned on or stopped by issuing a http request to the daemon web server .",
    "the api can also be controlled through http requests ( e.g. in order to add , remove , search for entities or statements ) .",
    "network quality can be controlled through the use of the latency monkey , and arbitrary failure can be simulated with the help of the chaos monkey .      to facilitate deployment and avoid breaking functionality",
    "while modifying various pieces of ers , a suite of basic tests has been developed .",
    "these target the creation of new entities , modification of existing ones as well as deletion .",
    "search and retrieval of entities also constitute `` core '' functionalities and thus are included into the suite .",
    "this set of tests has been included into the development process by running them on every commit with the help of the travis continuous integration service .",
    "rudimentary performance testing has been performed on the command line interface . because it persists on every operation",
    ", it introduces a certain overhead when interacting with couchdb .",
    "the number of new documents that can be created on a machine with low - end specifications is approximately 3/second .",
    "the number of new statements about an entity that can be made each second is approximately 10 .",
    "however , this is considered to be a reasonable amount for the use case .",
    "if better performance is required , the ers api module can be included in the client application , which provides more granular methods for writing to the database ( for example building an entity in - memory and committing all the documents in a single api call ) .",
    "table[table:1 ] shows the performance of ers under a virtual machine with 1 core and 512 mb of ram .",
    ".cli operation throughput on a raspberry pi 2 model b [ cols=\"^,^ \" , ]      in this experiment the basic replication behavior will be observed .",
    "two virtual machines have been connected through a private network .",
    "both machines create documents that describe the same entity .",
    "one machine looks up if others have statements about it , and decide to cache the entity .",
    "this triggers the daemon s replication protocol .",
    "updates are written continuously on the second machine and the propagation behavior is shown in figure[fig : replication ] .",
    "node1 ( whose cache is being read ) is represented by the blue line and node2 ( which makes statements ) is represented by the orange line .",
    "[ fig : replication ] , title=\"fig:\",width=226 ]    in this particular experiment , at the time point t0 , node1 loses connectivity . updates to node 2",
    "are still written but they can not propagate to node1 . at t1 , node 2 decides to delete the document containing the statements . since node1 is still offline , he does not receive this update .    at the time point t2 , node1 is reconnected and almost immediately couchdb propagates the new changes , thus removing the document from node1 s cache .",
    "note that node1 s public statements do not get deleted from his machine , but only node2 s statements that node1 had in his cache .",
    "this experiment has been repeated with a bridge in between the nodes to check if it influenced replication , and the behavior was not modified .",
    "these simple experiments have been used throughout development as smoke tests for basic verification of functionality , especially after tweaks in the replication strategy .",
    "the purpose of this experiment is to simulate how ers would perform as a substitute for a social network ( such as linkedin ) in the context of a conference . in this scenario , there are various conference attendees with public profiles , who list their skills and workplace .",
    "attendees can endorse each other for their skills .",
    "this scenario contains a static bridge node and various contributor contributor nodes that randomly connect and disconnect , with varying network quality .",
    "initially , each attendee has on his laptop his public profile .",
    "once he connects to the local network of a particular conference room , he can initiate a search for other participants .",
    "he can endorse any other participant for his skills , and these endorsements will propagate to the bridge and thus are visible to all the other attendees .",
    ", width=302 ]    the experiment begins by starting the docker containers .",
    "each container is based on the ubuntu 14.04 lts operating system , though any major linux distribution can be used instead .",
    "each container runs the software stack(dbus , avahi , couchdb , ers daemon and ers web api ) and is given a public ip .",
    "it is important to note that because of the way peers are discovered(avahi discovers each of them as a separate `` service '' , one at a time ) there is a delay before they are all visible to each node .",
    "this delay increases linearly in the number of peers or bridges if they are present , from a negligible amount in case of 1 peer / bridge to approximately 3 seconds in the case of 40 peers / bridge .",
    "each container then executes a search using the api for entities that are tagged with the property `` ers : conferenceattendee '' , and caches the results .",
    "this allows couchdb s automatic synchronization protocol to pick up statements made about those entities automatically .",
    "each contributor then proceeds to make a random number of statements about others .    monitoring the status of all the peers",
    "is done in a separate thread that queries each node for the percentage of documents found in its cache against the total number of documents created in the systems .    through this experiment",
    ", we observe that the system scales to a larger number of users . with a bridge on a raspberry pi 2 model b",
    ", it was able to correctly propagate statements between contributors with as much as 40 concurrent contributors .",
    "this experiment aims to simulate an ers deployment in a remote location that has no access to the internet , thus removing the assumption that any part of the system ( node or bridge ) is static and always connected . in figure[fig : truckexperiment ] 6 remote villages that each contain a store , and a truck that periodically passes through all of them can be seen .",
    "the experiment assumes that in each village there is a vendor that would like to sell or buy products from neighboring villages , and their only means of daily communication and updates is the truck driver that passes through .    ,",
    "width=226 ]    in this scenario , we would deploy in each village a contributor node of ers and on the truck , a bridge node .",
    "each vendor controls the list of items that he is selling and the prices associated with those items in an ers public document .",
    "these documents get uploaded to the bridge the first time it comes in contact with them .",
    "vendors can search for the nodes they are interested in and choose whether they want to cache those entities .",
    "if vendors make modifications to their prices or list of items , these modifications get picked up when the truck passes through his village .",
    "also , when the truck arrives , if he has other vendors in his cache , he will automatically get updated versions of their offerings if the truck stays for at least 5 seconds ( this can be as low as 1 second if network connectivity is very good )",
    ".    having fixed the number of seconds that the bridge is connected to peers to 5 seconds , investigations have been made into the behavior of ers in less than ideal conditions .",
    "firstly , the latency monkey injects artificial latency into each packet that leaves the system .",
    "the system can perfectly handle 100ms of delay(each way ) and within the allocated time the bridge and the node will completely synchronize . if latency goes over 125ms each way , the replication procedure will not be able to finish in time for all the nodes .",
    "the next characteristics of poor network connectivity that were investigated are packet loss and packet corruption . in this case",
    "the system can tolerate up to 15 percent of the packets being lost or corrupted on each end ( the contributor and the bridge ) .",
    "a value that is higher than that will cause rapid degradation in the percentage of statements that are synchronized ( in the given 5 second window ) .    duplicating packets does not seem to have an important effect on the performance of ers , as no difference has been observed with as much as 60 percent duplication .",
    "there are a few more issues that are considered and that ers can handle .",
    "if a , perhaps competing , vendor wants to modify the price list of a different node , he will instead create local documents with the modifications .",
    "these do not get merged automatically with the original ones because the couchdb documents will have different ids .",
    "thus , if node a has only the document of node b in cache , the automatic replication will not get the changes that anyone other than node b makes .    in this experiment , the topology was constantly shifting , in the sense that the bridge only had connectivity to contributors for brief amounts of time .",
    "we have observed that even with poor connectivity , the system was robust , and propagated the updates .",
    "the results of the experiments allows the answering of the research questions .",
    "having made all of the components of ers remote controllable and the deployment automatable , we were able to create simulations of more complex scenarios .",
    "this can allow the creation of smoke testing environments that verify ers behavior , and run as part of a continuous integration system .",
    "the benefits of doing this are two - fold .",
    "firstly , having test scenarios more complex than unit tests and modeled after realistic use cases provides some guarantee of desired functionality .",
    "additionally , having these tests repeatable and running them continuously gives developers confidence to make changes without worrying whether they will break the experience users .",
    "it could be argued that in a system designed to function in remote areas , where updating is non - trivial if not impossible , this is extremely important .",
    "the two real - world scenarios simulate realistic deployments of the platform , with different objectives . the conference test verifies that a stationary bridge can handle contributors that connect , disconnect and interact with each other in a continuous fashion .",
    "the village test demonstrates that bridges need not be stationary and that various completely disconnected parts of the system can communicate through the bridge in a reliable and secure fashion .",
    "these two behavior investigations suggest that ers is ready for field - testing .    within the conference experiment without artificial network degradation , each node reports 100 percent completion during each query . this has been tested for conference sizes up to 30 , as this is the maximum number of ers containers that can be launched on a desktop system with 8 gb of ram .",
    "this suggests that the ers synchronization protocol can easily handle a considerable number of concurrent peers in this use case .",
    "the villages experiment , in which the bridge is mobile and synchronizes data across multiple disconnected areas , showed that under perfect connectivity ( docker containers within the same machine ) replication happens very fast .",
    "as long as the bridge was on the same network as a contributor for at least half a second , the small data set would be transferred without any noticeable delay .",
    "more interestingly , the overhead of using the command line interface or the web api means that couchdb can replicate faster than nodes can write to ers .    the correctness of ers functionalities has also been verified and a suite of tests has been created .",
    "storage and api behavior is verified through unit tests .",
    "communication and correctness of the functionality of the ers daemon can be verified through automated testing that use virtual machines .",
    "ers can be deployed and used on low - end hardware .",
    "both arm and x86/x64 cpu architectures are supported , and even low - end hardware such as the raspberry pi can easily handle running the system . having investigated the effects of the hallmarks of poor network connectivity ( latency , loss , corruption , duplication ) on the functioning of ers , we can conclude that the system is resilient with respect to low quality connections .",
    "the system also handles being offline gracefully , with the only downside being that the user sees stale data .",
    "the original ers project had been tested with at most 4 xo physical laptops connected with a bridge on a raspberry pi , with more or less ideal network connectivity ( local ethernet connection ) .",
    "this work has presented experiments with a combination of simulated devices and physical hardware , with up to 40 concurrently running nodes and with artificially bad network connectivity .",
    "the scenarios which ers targets , such as students in a classroom , remote area conferences , stores with no internet access , should see no performance issues .",
    "the goal of this paper was to investigate whether it was possible to setup ers for automated testing , in order to decide if was ready for usage . through the various functionality tests",
    "the correct functionality of various components can be assured .",
    "the tests on virtual machines verify that communication between nodes works as expected .",
    "the conference test indicates that it can scale to a larger number of uses and the truck test shows the resilience with respect to poor network connectivity .",
    "future works should expand the scope of the scalability testing by investigating , for example , how many contributors can be connected to a bridge without losing functionality , or how peers from different geographical locations connected through the internet influence the behavior of the system .",
    "an implementation of the aggregator should be finalized and integrated with the other components .",
    "guret , c. , schlobach , s. , de boer , v. , bon , a. , & akkermans , h. ( 2011 ) . is data sharing the privilege of a few ? bringing linked data to those without the web .",
    "proceedings of iswc2011- outrageous ideas track , best paper award , 1 - 4 .",
    "guret , c. , & cudr - mauroux , p. ( 2015 ,",
    "the entity registry system : collaborative editing of entity data in poorly connected environments . in aaai spring symposium 2015-structured",
    "data for humanitarian technologies : perfect fit or overkill ? .",
    "aaai press .",
    "felter , w. , ferreira , a. , rajamony , r. , & rubio , j. ( 2015 , march ) .",
    "an updated performance comparison of virtual machines and linux containers . in performance analysis of systems and software ( ispass ) , 2015 ieee international symposium on ( pp .",
    "171 - 172 ) . ieee"
  ],
  "abstract_text": [
    "<S> the entity registry system ( ers ) is a decentralized entity registry that can be used to replace the web as a platform for publishing linked data when the latter is not available . in developing countries , where off - line is the default mode of operation , centralized linked data solutions fail to address the needs of the communities . </S>",
    "<S> although the features are mostly completed , the system is not yet ready for deployment . </S>",
    "<S> this project aims to provide extensive tests and scalability investigations that would make it ready for a real scenario .    ,    linked data , decentralized system , ict4d , rdf </S>"
  ]
}