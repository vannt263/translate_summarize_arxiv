{
  "article_text": [
    "the idea of making a note of which rules are used as they are applied is quite a simple one and it would be easy to regard it as too trivial to spend any time on .",
    "however , when we look into the algebraic structure of the records themselves , things become a lot less trivial . the background to",
    "this work includes the papers by squier , lafont , prout , otto , cremanns , anick , kobayashi , pride and others on finiteness conditions for monoids .",
    "the ` combinatorial ' finiteness condition is that a monoid has a finite complete presentation .",
    "this implies the homological finiteness condition @xmath0  @xcite and also the ` homotopical ' finiteness condition fdt @xcite .",
    "it is also known that the weaker homological condition @xmath1 is not sufficient for either fdt or the existence of a complete rewriting system in the case of monoids  @xcite .",
    "our aim is to use enhanced rewriting procedures to explicitly provide :    a.   a finite complete rewriting system ( combinatorial specification ) . b.   a finite set of homotopy generators for @xmath2 ( homotopical specification ) . c.   a ( small ) finitely generated resolution ( homological specification ) .    logged rewriting for group presentations",
    "@xcite gives procedures for representing consequences of the relations of the presentation as elements of a pre - crossed module and algorithms for computing generators of the modules of identities among relations . in the monoid case",
    "the relations are given by pairs of terms and the structure of a crossed module is not appropriate to represent consequences of relations .",
    "it is well known @xcite that sesquicategories or 2-categories can be used to model rewriting systems .",
    "it has been proved  @xcite that when the rewriting system comes from a group presentation , the 2-category can be identified with the crossed module of the presentation .    in the special case of groups ,",
    "various results are known .",
    "in particular there are methods for calculating a set of generators for the kernel @xmath3 of the crossed module of ` consequences ' , which is useful for constructing resolutions and calculating ( co)homology . for the case where the rewriting system does not present a group we detail the algebraic structure of the analogue of @xmath3 ; presenting an algorithm for computing a set of generators for it ; and provide justification that the constructions we make give combinatorial , homotopical and ( co)homological detail in the same spirit as @xmath3 .    in the case of monoids , logged rewriting techniques have further applications .",
    "specifically , we have so far examined applications to the analysis of coset and double coset systems and used logged rewriting to provide an alternative to the reidemeister - schreier algorithm for finding presentations of subgroups  @xcite .",
    "additionally , we show in section 8 that logged rewriting techniques are easily generalised to kan extensions where they provide a proof technique for a wide range of decidablility problems solvable by string rewriting  @xcite .",
    "a _ monoid presentation _ is given as a pair @xmath4 where @xmath5 is a set of generators and @xmath6 is a set of pairs @xmath7 of elements of the free monoid @xmath8 .",
    "the monoid presented , @xmath9 is the quotient obtained by factoring @xmath8 by @xmath10 , the congruence generated by @xmath6 .",
    "the quotient monoid morphism will be denoted @xmath11 .",
    "we will assume that the reader is familiar with standard string rewriting as in  @xcite .",
    "the notation we use follows the usual conventions .",
    "the set @xmath6 is a _ rewriting system _ for the monoid @xmath9 and its elements are referred to as _",
    "rules_. the _ reduction relation generated by @xmath6 _ on the free monoid @xmath8 is denoted by @xmath12 , the reflexive , transitive closure is denoted @xmath13 and the reflexive , symmetric , transitive closure @xmath14 coincides with the congruence @xmath10 . for convenience",
    "we assume that @xmath6 is compatible with an admissible well - ordering @xmath15 ; i.e. for all pairs @xmath16 , we have @xmath17 .",
    "this ensures that the relation @xmath12 is noetherian .",
    "the main aim of this section is to formally define a _ logged rewrite system _ for @xmath18 .",
    "such a system must not only reduce any word in @xmath8 to an irreducible word ( unique if the rewriting system is complete ) but must also express the actual reduction as a consequence of the original monoid relations .",
    "the reader who does not wish to get into the details at this stage may wish to think of a consequence of the monoid relations as a sequence of rewrites recorded as : which must give a valid rewrite .",
    "it is important to identify the algebraic framework for these ` consequences ' in order to understand what we may do with them .",
    "formally , one represents consequences of group relations by elements of a crossed module .",
    "consequences of monoid relations can not be represented in that framework ; essentially this is because the free monoid does not have inverses .",
    "however , it is well known that general string rewriting systems may be modelled by sesquicategories or 2-categories  @xcite . therefore to every monoid presentation we shall associate a sesquicategory . its 2-cells correspond to possible sequences of rewrites and inverse rewrites between strings in the free monoid , with respect to the given rewriting system . formally :     + the _ sesquicategory @xmath19 of a monoid presentation @xmath18 _ consists of the following :    * a single 0-cell which is denoted @xmath20 , * a free monoid of 1-cells which are the elements of @xmath8 , * a collection of 2-cells which are sequences @xmath21 where @xmath22 , @xmath23 and @xmath24 such that @xmath25 for @xmath26 . *",
    "left and right actions of the 1-cells upon the 2-cells ( whiskering ) i.e. for any rewrite @xmath27 and any elements @xmath28 and @xmath29 of the free monoid we say that @xmath30 is a rewrite and @xmath31 and @xmath32 . * identity rewrites for each string @xmath33 , denoted @xmath34 where @xmath35 with the property that @xmath36 for all @xmath37 in @xmath8 . * a partial ( ` vertical ' ) composition of rewrites , defined so that @xmath38 is a rewrite with @xmath39 and @xmath40 whenever @xmath41 .    for the above definition",
    "it can be verified that the sesquicategory axioms hold with respect to vertical composition and the whiskering action .",
    "further , we shall allow rewrites to be cancelled by the reverse application of the rewriting sequence .",
    "the formal inverse of any rewrite @xmath27 is denoted @xmath42 where @xmath43 and @xmath44 and",
    "we allow that @xmath45 this gives @xmath46 a groupoid structure , so we may refer to the sesquigroupoid @xmath19 .    in the case where we can apply the rule @xmath27 to one substring of a string and the rule @xmath47 to another substring",
    "which is completely disjoint from the first , it is natural to regard the order in which the rules are actually applied as immaterial .",
    "this interchangability of non - overlapping rewrites is captured by the interchange law on the sesquicategory , giving us a 2-category .",
    "we shall denote the set of 2-cells in @xmath19 by @xmath48 .",
    "+ the 2-category of rewrites @xmath49 is obtained by factoring the 2-cells @xmath48 of @xmath19 by the interchange law : @xmath50    specifically , the set of pairs of @xmath51 generates a relation on @xmath48 @xmath52 and the reflexive , symmetric , transitive closure of this is @xmath53 , which preserves both vertical composition and whiskering .",
    "congruence classes are formally denoted with square brackets so @xmath54_i$ ] denotes the class of @xmath48 under @xmath53 that contains @xmath27 . whiskering and vertical composition",
    "are preserved and so may be applied to the congruence classes : @xmath55_iv=[u \\alpha v]_i$ ] for all @xmath56 and @xmath54_i \\cdot [ \\beta]_i = [ \\alpha \\cdot \\beta]_i$ ] . a horizontal composition of the congruence classes may also be defined : @xmath54_i \\circ [ \\beta]_i = [ \\alpha \\ , { \\mathrm{src}}(\\beta ) \\cdot { \\mathrm{tgt}}(\\alpha )   \\ , \\beta]_i$ ] .    in the case of term rewriting one",
    "does not always wish to factor out by the interchange law as it destroys the notion of length ( number of steps ) of a rewrite . in the case of string rewriting we do not have to worry about notions of length of derivation , thus we use the 2-category .",
    "however , it should be noted that whilst rewrites may be represented uniquely in the sesquicategory , the word problem for the 2-category is generally unsolvable ( generalisation of a crossed module ) . like many , for convenience ,",
    "we abuse notation a little , representing rewrites that should strictly be written as classes @xmath54_i$ ] by non - unique representatives in the sesquicategory @xmath27 .",
    "so a pair of rewrites @xmath57 , are equivalent if and only if @xmath54_i = [ \\beta]_i$ ] .    in the context of groups , the sesquicategory associated to a monoid presentation is well known .",
    "pride proved that if the monoid presentation involved is obtained from a group presentation then the associated 2-category is isomorpic ( as a crossed module ) to the free crossed module associated to the group presentation  @xcite .",
    "logged rewriting for groups was established by using the crossed module structure for the logs .",
    "we now formally define logged rewriting using the 2-category associated with a monoid presentation .",
    "+ a _ logged rewriting system _ for a presentation @xmath58 of a monoid @xmath9 is a collection of 2-cells ( rewrites ) @xmath59 of the associated 2-category @xmath49",
    "so that the _ underlying rewriting system _ @xmath60 is a rewriting system for @xmath9 .",
    "a rewriting system @xmath6 on a monoid @xmath9 generates a _ reduction relation _",
    "@xmath61 the reflexive , transitive closure of this relation is denoted @xmath13 , and the reflexive , symmetric , transitive closure is denoted @xmath14 and coincides with the congruence generated by @xmath6 on @xmath9 , denoted @xmath10 .",
    "the logged reduction of a string by a rule @xmath27 is written as : @xmath62 and the rewrite recorded is @xmath30 .",
    "if the elements @xmath7 of a rewriting system on a free monoid @xmath8 are ordered such that @xmath17 with respect to some well - ordering on @xmath8 , then the resulting reduction system is _ noetherian _ ; i.e. an irreducible element is reached after finitely many reductions .",
    "a reduction system is _ confluent _ if for any string @xmath63 there exists a unique irreducible string @xmath64 such that @xmath65 .",
    "a rewrite system is said to be _ complete _ if the corresponding reduction relation is both noetherian and confluent .",
    "this is a desirable property , since any pair of strings @xmath66 can be reduced in a finite number of steps to their irreducible forms @xmath67 and",
    "@xmath68 which will be equal if and only if @xmath69 ; i.e. the _ word problem _ is decidable .",
    "the knuth - bendix algorithm attempts to convert an arbitrary rewriting system into a complete one by adding rules compatible with the ordering to the system to try to force confluence .",
    "the key concept here is that of _ critical pairs _ which are pairs of reductions which can be applied to the same string to obtain two different results .",
    "the important critical pairs are associated with the _ overlaps _ of a the rules in the rewriting system . when considering normal critical pairs we only care about the sources and targets of the rewrites and the relevant information identifying the overlap .",
    "when we are dealing with a logged rewriting system it is necessary to think of the sequences of rules giving the instructions permitting both of the rewrites and to include these logs as part of the critical pair information .",
    "+ an overlap occurs between the logged rewrites @xmath70 and @xmath71 of @xmath72 whenever one of the following is true :    [ cols= \" < ,",
    "< , < , < \" , ]     consider the overlap of @xmath73 and @xmath74 on the string @xmath75 . reducing it by @xmath76 we get @xmath77 which is irreducible . alternately , we can reduce @xmath63 by @xmath78 and similarly get @xmath77 .",
    "thus we have an endorewrite of @xmath77 , i.e. @xmath79 . continuing in this way , considering all the overlaps of the logged system the following twenty six endorewrites can be computed :    endorewrites of @xmath80 : @xmath81 , @xmath82 , @xmath83 , @xmath84 , @xmath85 , @xmath86 and @xmath87 .",
    "endorewrites of @xmath88 : @xmath89 .",
    "endorewrites of @xmath90 : @xmath91 .",
    "endorewrites of @xmath92 : @xmath93",
    ".    endorewrites of @xmath77 : @xmath79 .",
    "endorewrites of @xmath94 : @xmath95 , @xmath96 , @xmath97 , @xmath98 , @xmath99 , @xmath100 , @xmath101 , @xmath102 , @xmath103 , @xmath104 , @xmath105 , @xmath106 , @xmath107 , @xmath108 and @xmath109 .",
    "these endorewrites generate all possible endorewrites of the system , but we note that generating sets obtained in this way are unlikely to be minimal generating sets . for example , in this case there is a relation between the three endorewrites @xmath91 , @xmath110 , and @xmath81 , in that the third can be obtained from the first two in the following way : @xmath111 unfortunately , the fact that this problem generalises the word problem for crossed modules means that reducing the generating set can be rather ad - hoc since there are no normal forms for the 2-cells .",
    "we promised , in the introduction , that our results would enable homotopical and homological specifications of the monoid .",
    "it is well known that the existence of a finite complete rewriting system for a monoid presentation implies the homological finiteness conditions fp@xmath112  @xcite and the stronger condition fp@xmath113  @xcite as well as the homotopical condition of having finite derivation type ( fdt )  @xcite .",
    "the addition made by this paper , in considering logged rewriting systems , is that our algorithms enable the specification of the structures which the properties are based upon .    in the homotopical case , it is immediate to observe that the set @xmath114 of generating endorewrites suffices as a set of homotopy generators in the sense of  @xcite . in detail : if @xmath27 is any cycle of the graph whose objects are all strings and whose invertible edges are all rewrites , then @xmath27 corresponds to the digraph of an endorewrite and it turns out that the product of the subdigraphs is homotopically equivalent to @xmath27 for the same reasons as the associated endorewrite is equivalent to the composite of the endorewrites of the subdigraphs .    in terms of homology , the specification of @xmath114 , similar to the analogous case of @xmath3 for groups , enables us to construct a resolution",
    ". specifically , we have an exact sequence of free , finitely generated @xmath115-modules :    @xmath116^{\\delta_2 }    & c_1 \\ar[r]^{\\delta_1 }    & c_0 \\ar[r]^{\\delta_0 }   & \\mathbb{z } \\ar[r ]   & 0 . } \\ ] ]    given our specification of a finite set of homotopy generators , further details of the resolution can be found in  @xcite in the proof of the fact that fdt implies fp@xmath112 .    for lower dimensional topology and cohomological dimensions for monoids ,",
    "pride  @xcite has developed geometric methods ; using a calculus of pictures , with spherical pictures representing the relations between the relations , which may be identified with our endorewrites .",
    "his method for determining a generating set differs significantly from ours ; involving picking an ` obvious ' set of pictures and then using picture operations to prove that they generate all spherical pictures for the presentation .",
    "the key word here is ` obvious '  whether an obvious set of pictures can be identified depends upon the shape of the presentation and its relation to presentations for which generating sets of pictures are known . in the case of groups",
    "substantial research means that many shapes of presentation can be recognised , but in the case of monoids , presentations are less recognisable .",
    "our generating set of endorewrites is determined algorithmically , dependent on the successful completion of the presentation .",
    "the rewriting method has the clear advantage of being able to be applied like brute force in cases where the pictures are not obvious , or potentially in complex examples where the pictures may be too complex to be identified by eye .",
    "more interesting than comparing the two methods , however is to consider using them in combination  rewriting can provide an initial set of pictures for unrecognisable monoid presentations and picture calculus can then operate on the result to refine and reduce the set and present is as something more ascetically pleasing and expressive than the strings of letters representing whiskered 2-cells .",
    "an alternative to looking at standard resolutions of a group by @xmath117-modules as in @xcite is to consider crossed resolutions .",
    "one reason for interest in these is because their stronger invariance with respect to the presentation makes them potentially more useful in the classification of topological structures such as knots via crossed resolutions of their intertwining monoids .",
    "recall the group case : a _ crossed complex ( over groupoids ) _ is a sequence @xmath118 @xmath119^{\\delta_{n+1 } }   & c_n \\ar[r]^{\\delta_n }   & c_{n-1 } \\ar[r]^{\\delta_{n-1 } }   & \\cdots \\ar[r]^{\\delta_3 }   &   c_2 \\ar[r]^{\\delta_2 }    & c_1 \\ar[r]^{\\delta_1 }    & c_0   } \\ ] ] such that    a.   @xmath120 is a groupoid with @xmath121 as its set of vertices and @xmath122 as its source and target maps .",
    "b.   for @xmath123 , @xmath124 is a totally disconnected groupoid over @xmath121 and for @xmath125 , the groups at the vertices of @xmath124 are abelian . c.   the groupoid @xmath120 operates on the right of each @xmath124 for @xmath123 by an action denoted @xmath126 .",
    "d.   for @xmath123 , @xmath127 is a morphism of groupoids over @xmath121 and @xmath120 acts on itself by conjugation .",
    "e.   @xmath128 for @xmath125 and @xmath129 .",
    "f.   if @xmath130 then @xmath131 operates trivially on @xmath124 for @xmath132 and operates on @xmath48 by conjugation by @xmath133 .",
    "a crossed complex @xmath118 is _ free _ if @xmath120 is a free groupoid ( on some graph @xmath134 ) and @xmath48 is a free crossed @xmath120-module ( for some @xmath135 ) and for @xmath125 , @xmath124 is a free @xmath136-module on some @xmath137 where @xmath138 is the fundamental groupoid of the crossed complex ; i.e. the quotient of the groupoid @xmath120 by the normal , totally disconnected subgroupoid @xmath139 .",
    "a crossed complex @xmath118 is _ exact _ if for @xmath123 @xmath140    if @xmath118 is an free exact crossed complex and @xmath141 is a groupoid then @xmath118 together with an isomorphism @xmath142 ( or , equivalently , c with a quotient morphism @xmath143 whose kernel is @xmath139 ) is called a _ crossed resolution of @xmath141_. it is a _ free crossed resolution _ if @xmath118 is also free .    in the case of monoids",
    ", we propose a similar structure .",
    "let @xmath144 be a monoid presentation .",
    "if we can find a complete rewriting system for @xmath6 then we can construct the following sequence : @xmath119^{\\delta_{n+1 } }   & c_n \\ar[r]^{\\delta_n }   & c_{n-1 } \\ar[r]^{\\delta_{n-1 } }   & \\cdots \\ar[r]^{\\delta_3 }   &   c_2 \\ar@<1ex>[r]^{{\\mathrm{tgt } } } \\ar@<-1ex>[r]^{{\\mathrm{src } } }    & c_1 \\ar[r]^{\\delta_1 }    & c_0   } \\ ] ]    define @xmath121 to be the monoid @xmath9 which is presented by @xmath18 .",
    "define @xmath120 to be the free monoid @xmath8 and let @xmath145 be the quotient morphism .",
    "then let @xmath146 be the 2-category of rewrites , but instead of a right action of @xmath120 we have a two - sided action ; instead of a crossed module @xmath147 we have a 2-category @xmath148 and instead of @xmath120 being a groupoid , it is a category",
    ". then let @xmath149 be a family of free @xmath150-bimodules : its objects are the elements of @xmath9 and its arrows are of the form @xmath151 when @xmath152 is an endorewrite in @xmath153 for some @xmath154 .",
    "for higher levels @xmath155 we can define @xmath124 to be the free @xmath150-bimodule on a set of generators for @xmath156 .",
    "we find that @xmath118 is a crossed complex and we have maps @xmath157  whiskering in the case of @xmath121 operating on the left and right of @xmath158 for @xmath159 .",
    "then @xmath120 has 2 multiplications under the operations of @xmath121 which coincide only if @xmath120 is a monoid in the category of groupoids ( interchange law ) .",
    "there are no inverses in dimension 0 , but inverses at all higher levels . from the definitions we deduce exactness : @xmath160 .",
    "this appears to be identifiable with the structure of a crossed differential algebra , that is a crossed complex @xmath118 with a morphism @xmath161 which gives a monoid structure on @xmath118 ( these are defined in detail in  @xcite ) .",
    "we are still investigating how useful this enhanced style of resolution may be in the monoid case , so we wo nt pursue the details of the construction further in this paper .",
    "in  @xcite it was shown that the familiar string rewriting methods can be applied to problems of computing left kan extensions over the category of sets .",
    "structures such as monoid and category presentations , induced actions of groups and monoids , equivalence and conjugacy classes , equalisers and pushouts all turn out to be special cases of left kan extensions over @xmath162 and thus string rewriting methods can be applied to all these variations on the word problem .    since string rewriting for kan extensions",
    "can be achieved by embedding in a monoid , it is unnecessary to go through the detail of the sesquigroupoid whose 2-cells possess the structure for the logged rules .",
    "however , since we do nt need to embed in a monoid in order for the string rewriting methods to work , we briefly outline the alternative sesquigroupoid .",
    "let @xmath163 be the left kan extension of the category action @xmath164 along the functor @xmath165 .",
    "we assume that the data for the kan extension is given as a finite presentation @xmath18 , consisting of generating graphs for @xmath166 and @xmath167 , a set of relations for @xmath167 and the action of functors @xmath168 and @xmath5 being defined for every object and arrow of the generating graph of @xmath166 .",
    "the 2-category @xmath48 associated with the presentation of the kan extension has 0-cells @xmath169 and 1-cells @xmath170 .",
    "the 2-cells are the rewrites and inverse rewrites , with vertical composition as before , but clearly , whiskering and horizontal compositions are partial operations dependent on whether paths can be composed .    in conjunction with  @xcite",
    ", this observation enables logged rewriting techniques to be applied to a wide range of problems , including category presentations , equivalence relations , induced actions , pushouts and coset systems . in eaach case ,",
    "interpretations and potential applications of the endorewrites requires further investigation .",
    "techniques of logged rewriting have been implemented by the first author as gap functions which will eventually be submitted as a package .",
    "applications of logged rewriting were explored in @xcite where the group version was implemented , providing a new algorithmic method for the construction of crossed resolutions of groups ; in @xcite where the logged completion methods give an alternative to the reidemeister - schreier method of computing a subgroup presentation ; and in @xcite we show how endorewrites for double coset rewriting systems reveal information about the subgroups .",
    "further work could pursue other potential applications , including in petri nets , concurrency and the analysis of knot quandles ; as well as generalising the techniques to grbner bases where the endorewrites can be identified with syzygies ."
  ],
  "abstract_text": [
    "<S> a rewriting system is a set of equations over a given set of terms called rules that characterize a system of computation and is a powerful general method for providing decision procedures of equational theories , based upon the principle of replacing subterms of an expression with other terms . in particular , </S>",
    "<S> a string rewriting system is usually associated with a monoid presentation . at the first level the problem is to decide which combinations of the generators are equivalent under the given rules ; knuth - bendix completion of the string rewriting system is one of the most successful mechanisms for solving this problem . at the second level </S>",
    "<S> , the problem involves determining which combinations of rules are equivalent . </S>",
    "<S> logged rewriting is a technique which not only transforms strings but records the transformation in terms of the original system of rules . </S>",
    "<S> the relations between combinatorial , homotopical and homological finiteness conditions for monoids prompt us to consider using computer - friendly rewriting systems to calculate homotopical and homological structure from monoid presentations .    </S>",
    "<S> [ section ] [ example]algorithm [ example]remark [ example]lemma [ example]theorem [ example]corollary [ example]definition [ example]proposition    ,    ,    rewriting system , knuth - bendix completion , monoid presentation , crossed module , identity among relations , derivation scheme . </S>",
    "<S> 08a50 , 18d05 , 68q42 . </S>"
  ]
}