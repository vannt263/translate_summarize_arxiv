{
  "article_text": [
    "with the recent surge of interest in peer - to - peer computing , the need to simulate very large scale distributed applications over internet - like topologies has become apparent .",
    "simulation results of applications such as gnutella and freenet exist @xcite , but these simulations do not model network behavior such as propagation delay , traffic interdependancies , and congestion .",
    "an example of a peer - to - peer application that may have benefitted from network simulation is gnutella . in august of 2000 ,",
    "the gnutella network collapsed and fragmented into smaller networks because the flood - based nature of its file queries overwhelmed peers with lower bandwidths@xcite .",
    "as a result , the total amount of data available to any peer in the network decreased drastically .",
    "if gnutella had been simulated with a large number of nodes , this problem could have been addressed in the design phases of the protocol rather than _ ex post facto_.    currently , network simulators are used mainly to study lower - layer network dynamics .",
    "these simulators can characterize the behavior of different flavors of tcp or different ip routing protocols . because they are targeted towards the study of lower layers",
    ", they have very detailed models of the lower network stack . however , because of these simulators level of detail at lower layers , simulating applications like gnutella or higher - layer protocols is very expensive .",
    "network simulators such as ns @xcite are generally discrete - event packet - based simulators .",
    "this means that every packet in the simulation becomes an event that must be managed in a central event queue .",
    "as described by ahn and danzig @xcite , the size of the event queue in discrete event packet simulators can have a serious impact on the performance of the simulator .",
    "furthermore , each packet must be processed by detailed models of network layers , which consumes processing time .",
    "researchers wanting to know the behavior of a simulated application may not care to know detailed information about the lower layer protocols as long as the results achieved by the simulator are fairly close to reality .    to simulate large distributed applications and protocols ,",
    "we have developed a simulator that scales up to large topologies , large numbers of connections , and is able to simulate over long periods of simulation time at varying levels of detail .",
    "narses provides several network models that trade between fast runtimes and accuracy .",
    "the models are easily interchangeable , so applications can be quickly prototyped using fast but less accurate models and then simulated with more detailed network models .",
    "narses thus lies someplace between packet - level simulators and analytical models in terms of its compromise between speed and accuracy .",
    "narses reduces the complexity of simulations by approximating the behavior of the physical , link , network , and transport layers .",
    "narses achieves this approximation with two simplifications .",
    "first , narses reduces memory and computational requirements by simulating at the flow level rather than at the packet level .",
    "second , narses assumes that there are no bottleneck bandwidths in the core of the topology simulated .",
    "this simplification implies that not all topologies are appropriate for simulation by narses .    while the coarse - grain study of applications functional behavior is a main goal of narses , we nonetheless present timing results for our most detailed network model .",
    "we have run experiments comparing its timing results with those of ns .",
    "specifically , we simulate end hosts transmitting chunks of data back and forth and measure the average time it takes to complete each flow .",
    "our results show up to 45 times improvement in simulator run times versus ns while only using 28% of the memory consumed by ns .",
    "the simulated completion times maintain an average accuracy of 8% .",
    "narses is a java - based network simulator targeted towards large distributed applications .",
    "narses provides simulated applications with a transport layer interface through which the application can send and receive data .",
    "the transport layer interface is very similar to a unix socket interface , which allows users to port their simulated applications easily to a real operating system .",
    "one goal of narses is to allow efficient characterization of large distributed applications by offering several network models that can be easily interchanged to provide the best tradeoff between speed and accuracy .",
    "for example , narses offers a `` naive '' network model that does not take the effects of cross - traffic into account , but is very simple and fast to execute .",
    "this model can be used to prototype an application protocol to verify its correctness .",
    "when the application has been debugged , the naive model can be switched with a more detailed network model to characterize the application s behavior on a more realistic network .",
    "the rest of this paper describes the most detailed  and thus most expensive  of narses network models : the bandwidth - share model .",
    "the main goal of narses bandwidth - share model is to provide an approximation of a tcp - like transport protocol to simulated applications .",
    "the model attempts to replicate the sharing of link bandwidth between independent flows .",
    "tcp flows running over the same link independently interact with each other and the router queue for that link to divide the bandwidth of that link amongst themselves .",
    "the allocation of bandwidth is not necessarily fair , but it does allow each flow to use some of the link s bandwidth . the simulator attempts to reflect this sharing of bandwidth among flows and to take into account traffic interdependencies .    to achieve this macro - level approximation of tcp ,",
    "narses makes two simplifying assumptions , which are detailed in the next two sections .",
    "the first simplifying assumption is that narses abstracts individual packet information into the the concept of a flow . in narses ,",
    "a flow is any semantically meaningful chunk of bytes that is passed down to the transport layer to send to a recipient .",
    "simulating at the granularity of a flow reduces the runtime of simulations for several reasons . by grouping packets into flows ,",
    "narses reduces the total number of events in the simulation .",
    "furthermore , the reduction in the number of events in the system also reduces the memory consumed by simulations . in packet level simulations ,",
    "header information for every packet consumes memory . with flow simulation ,",
    "the header information for each packet is subsumed into a more compact , summarized form that describes the entire flow .",
    "the second simplifying assumption narses makes is that no bottleneck link exists in the core of the network throughout the simulation .",
    "this means that transfers between two end hosts are limited by their first - link connections to the network .",
    "for example , a dsl user downloading content from a cdn would be limited by the speed of the cdn s link and the dsl link . in this case",
    ", the dsl link would most likely be the limiting factor .    with this assumption",
    ", narses does not have to simulate intermediate routers in the network . with traditional packet - based simulators",
    ", packets must travel hop by hop through the network and be inspected by the network layer protocol at each router .",
    "narses only has to decide how to divide available bandwidth between flows entering and leaving end hosts .      since narses uses flows and assumes no intermediate bottleneck links , its job is simple - allocate bandwidth to all active flows in the simulation in a way that mimics tcp s bandwidth allocations across an internet - like network .",
    "narses allocates bandwidth to flows using a technique we call _ minimum - share allocation_. using the bottleneck link assumption , the maximum bandwidth available to a flow is the minimum of the bandwidth available at its source and destination .",
    "a flow s share of an end host s bandwidth is the bandwidth of the end host s connection to the network divided by the number of flows sent or received by that node .    when a flow starts or completes , the bandwidth shares of every other flow on the sending node and the receiving node change .",
    "figure  [ fig : reallocation ] is a communications graph ( not a topology graph ) that illustrates how reallocation is done .    in this description",
    ", we refer to an end host s bandwidth as the bandwidth of an end host s first link connection to the network . in the figure ,",
    "end host * y * receives two flows * a * and * b*. thus the bandwidth share at * y * for all of its flows is * y * s bandwidth divided by 2 .",
    "end host * z * sends three flows , so the bandwidth share for each flow at * z * is the bandwidth of * z * divided by 3 .",
    "therefore , flow * b * s bandwidth is calculated using the minimum share allocation : @xmath0 .",
    "assume now that flow * a * completes .",
    "only one flow is received by * y * , so * b * s bandwidth share at * y * increases . * b * s bandwidth allocation is now @xmath1 .",
    "note that since the number of flows entering or leaving * z * did not change , flows * c * and * d * do not need to be reallocated bandwidth .",
    "one benefit of the bandwidth - share model is that the initiation or completion of a flow causes only a limited number of flows to be reallocated , as seen in the above example .      because of the simplifying assumptions we make , narses has a number of limitations that do not apply to general purpose packet - based network simulators .",
    "first , narses can not simulate topologies with bottleneck links that are not first - hop links .",
    "this means that it is restricted to internet - like hierarchical topologies without internal bottlenecks .",
    "second , narses can not simulate different bit error rates for physical channels .",
    "this is not too much of a limitation for wired networks where bit error rates are typically very low and unchanging .",
    "wireless networks have much higher bit error rates and bursty losses , all of which wreak havoc with traditional tcp implementations . because of these factors",
    ", we do not use narses to simulate wireless networks .",
    "finally , narses is targeted towards applications , so simulations concerning lower - layer protocol dynamics are not possible with narses . for lower layer information",
    ", traditional network simulators should be used instead .",
    "in this section we explain our experimental methodology and give preliminary results using the bandwidth - share model .",
    "we evaluate the accuracy of narses bandwidth - share model by running identical simulation scenarios in narses and in ns and comparing the results .",
    "each simulation is generated by transferring flows of data between random end hosts . in the ns simulations ,",
    "a flow is simulated by sending a chunk of bytes over a tcp connection .",
    "the flows are all of the same size .    in each simulation",
    ", we measure the simulated completion time of each flow . by simulated completion time of a flow ,",
    "we mean the latency in simulation time units from start to finish of the flow .",
    "all simulated completion times were averaged together and compared with the average simulated completion time of the other simulator .",
    "we measure simulated flow completion times because applications regard each flow as a single message that is to be serviced when it has been completely received .",
    "the topology was created using the gt - itm topology generator@xcite .",
    "the topology is a transit - stub model network containing 600 nodes with no bottleneck links between end hosts . throughout the simulations , the average round - trip path latency in ns is 96ms with a maximum latency of 190 ms .",
    "the average round - trip path latency in narses is 88ms with a maximum latency of 158ms .",
    "this discrepancy is due to the fact that the ns simulations use hierarchical addressing , which lowers the routing table size per node from @xmath2 to @xmath3 but sometimes chooses non - optimal routes .",
    "narses uses an optimal minimum spanning tree rooted at each node which consumes @xmath2 space per node .",
    "the discrepancy in round - trip times adds some error into narses accuracy results but does not affect the simulation runtime results or memory consumption results .",
    "our simulation machine is a dual 2.4ghz xeon with 2 gb of ram running redhat linux 8.0 .      to test the accuracy of narses",
    ", we simulated 10000 simultaneous flows of the same size and measured their simulated completion times .",
    "we then varied the size of the flows and calculated the average simulated completion time for each flow size .",
    "figure  [ fig : acc10000 ] shows these results . for a flow size of 200 kb , for example , narses results differ by 1.53s , which is a 7.6% difference .",
    "figure  [ fig : run10000 ] shows the runtime of the same experiment performed in section [ sub : accuracy ] . as flow size increases",
    ", ns slows down because there are more total packets that must be dealt with in the course of the simulation .",
    "as described earlier , the larger number of packets increases the main event queue size .",
    "additionally , ns must perform routing and tcp computations on a larger number of packets .",
    "narses runtime remains constant and is 45 times faster than ns with a flow size of 200 kb .",
    "it should be noted that narses is implemented in java while ns is implemented in c++ , which gives ns a runtime advantage .",
    "figure  [ fig : mem10000 ] shows the memory consumed as the flow size is held constant at 200 kb and the number of flows is varied from 5000 random flows to 40000 random flows . at 40000 flows ,",
    "narses consumes 28% of the memory that ns consumes .",
    "the most closely related work to this work is the flowsim simulator by ahn and danzig@xcite .",
    "flowsim is a packet - level discrete - event simulator that aggregates closely spaced packets on a link with the same source and destination into a packet train .",
    "packets that have the same source and destination but are not closely spaced are not aggregated , whereas narses aggregates all packet information , regardless of packet spacing .",
    "another interesting abstraction technique was investigated by huang and heidemann @xcite .",
    "they develop a technique to simulate background tcp traffic in a memory - efficient manner . to save memory",
    ", they model tcp connections using finite - state machines that approximate the behavior of tcp .",
    "the fsm representation of tcp means that tcp state variables , timers , and other space is not needed for most connections .",
    "since narses is written in java , the simulator relies on java s garbage collector to manage memory . in simulations with large numbers of flows ,",
    "many transient flow objects are created and left to the garbage collector to reclaim .",
    "we are currently implementing a memory manager that reuses frequently used objects .",
    "we expect this to improve runtime performance and possibly decrease the amount of memory consumed .",
    "the real utility of narses is in measuring large distributed applications .",
    "narses is currently being used to study several distributed systems , including cup @xcite .",
    "we also plan to implement several large distributed applications such as gnutella that have been well studied .",
    "we will simulate these applications using narses to check whether narses reproduces behaviors known to exist in the real applications .    another desired direction for narses",
    "is to explore network emulation .",
    "other discrete event simulators such as ns have support for emulating the behavior of a real network in real time .",
    "we wish to investigate the feasibility of network emulation using a flow - based simulator .",
    "we have developed an application - level simulator , narses , that can simulate large numbers of hosts , large numbers of concurrent connections , and long periods of time .",
    "we have built a discrete event , tcp - flow based simulator that elides individual packet information but still reflects the impact of traffic interdependences .",
    "our results show our technique to be reasonably accurate while being more scalable than packet - level simulation .",
    "this project has been funded in part by muri award number f49620 - 00 - 1 - 0330",
    ".    1 j. ahn and p.b .",
    "speedup vs. simulation granularity . _ ieee / acm transactions on networking_. 4(5):743 - 757 , october 1996 .",
    "dss group .",
    "gnutella : to the bandwidth barrier and beyond .",
    "theodore hong .",
    "chapter 14 : performance .",
    "_ peer - to - peer : harnessing the power of disruptive technologies _ , edited by andy oram .",
    "oreilly and associates : sebastopol , ca ( 2001 ) .",
    "polly huang and john heidemann . capturing tcp burstiness in light - weight simulations .",
    "_ proceedings of the scs conference on communication networks and distributed systems modeling and simulation _ , pp .",
    "phoenix , arizona , usa .",
    "january , 2001 .",
    "ns project http://www.isi.edu/nsnam/ns/ mema roussopoulos and mary baker , cup : controlled update propagation in peer - to - peer networks .",
    "technical report cs.ni/0202008 , http://arxiv.org/abs/cs.ni/0202008 , february , 2002 .",
    "ellen w. zegura , ken calvert and s. bhattacharjee . how to model an internetwork .",
    "_ proceedings of ieee infocom _ 96 , san francisco , ca . h. zhang , a. goel , r. govindan . using the small world model to improve freenet performance .",
    "_ proceedings of ieee infocom _ , june 2002 ."
  ],
  "abstract_text": [
    "<S> most popular , modern network simulators , such as ns , are targeted towards simulating low - level protocol details . </S>",
    "<S> these existing simulators are not intended for simulating large distributed applications with many hosts and many concurrent connections over long periods of simulated time . </S>",
    "<S> we introduce a new simulator , narses , targeted towards large distributed applications . </S>",
    "<S> the goal of narses is to simulate and validate large applications efficiently using network models of varying levels of detail . </S>",
    "<S> we introduce several simplifying assumptions that allow our simulator to scale to the needs of large distributed applications while maintaining a reasonable degree of accuracy . </S>",
    "<S> initial results show up to a 45 times speedup while consuming 28% of the memory used by ns . </S>",
    "<S> narses maintains a reasonable degree of accuracy  within 8% on average . </S>"
  ]
}