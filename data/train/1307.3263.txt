{
  "article_text": [
    "iteration operators provide a uniform way to express common and naturally occurring patterns of recursion over inductive types . expressing recursion via iteration operators makes code easier to read , write , and",
    "understand ; facilitates code reuse ; guarantees properties of programs such as totality and termination ; and supports optimising program transformations such as fold fusion and short cut fusion .",
    "categorically , iteration operators arise from the initial algebra semantics of data types : the constructors of an inductive type are modelled as a functor @xmath3 , the data type itself is modelled as the carrier @xmath4 of the initial @xmath3-algebra @xmath5 , and the iteration operator @xmath6 for @xmath4 is the map sending each @xmath3-algebra @xmath7 to the unique @xmath3-algebra morphism from @xmath8 to @xmath9 .",
    "initial algebra semantics therefore provides a comprehensive theory of iteration that is i ) _ principled _ , in that it ensures that programs have rigorous mathematical foundations that can be used to give them meaning ; ii ) _ expressive _ , in that it is applicable to _ all _ inductive types  i.e. , all types that are carriers of initial algebras  rather than just to syntactically defined classes of data types such as polynomial ones ; and iii ) _ sound _ , in that it is valid in any model  set - theoretic , domain - theoretic , realisability , etc . ",
    "in which data types are interpreted as the carriers of initial algebras .",
    "final coalgebra semantics gives an equally comprehensive understanding of coinductive types .",
    "the destructors of a coinductive type are modelled as a functor @xmath3 , the data type itself is modelled as the carrier @xmath10 of the final @xmath3-coalgebra @xmath11 , and the coiteration operator @xmath12 for @xmath10 is the map sending each @xmath3-coalgebra @xmath13 to the unique @xmath3-coalgebra morphism from @xmath14 to @xmath15 .",
    "final coalgebra semantics thus provides a theory of coiteration that is as principled , expressive , and sound as that for induction .",
    "since induction and iteration are closely linked , we might expect initial algebra semantics to give a principled , expressive , and sound theory of induction as well .",
    "but most theories of induction for a data type @xmath4 , where @xmath16 , are sound only under significant restrictions on the category @xmath17 , the functor @xmath3 , or the form and nature of the property to be established .",
    "recently , however , a conceptual breakthrough in the theory of induction was made by hermida and jacobs  @xcite .",
    "they first showed how to lift an arbitrary functor @xmath3 on a base category @xmath17 of types to a functor @xmath18 on a category of properties over those types .",
    "then , taking the premises of an induction rule for @xmath4 to be an @xmath18-algebra , their main theorem shows that such a rule is sound if the lifting @xmath18 preserves truth predicates .",
    "hermida and jacobs work in a fibrational , and hence axiomatic , setting and treat _ any _ notion of property that can be suitably fibred over @xmath17 .",
    "moreover , they place no stringent requirements on @xmath17 .",
    "thus , they overcome two of the aforementioned limitations .",
    "but since they give sound induction rules only for polynomial data types , the limitation on the functors treated remains in their work .",
    "the current authors  @xcite subsequently removed this final restriction to give sound induction rules for all inductive types under conditions commensurate with those in  @xcite .    in this paper , we extend the existing body of work in three key directions .",
    "first , hermida and jacobs developed a fibrational theory of coinduction to complement their theory of induction .",
    "but this theory , too , is sound only for polynomial data types , and so does not apply to final coalgebras of some key functors , such as the finite powerset functor . in this paper , we derive a sound fibrational coinduction rule for _ every _ coinductive type .",
    "secondly , data types arising as initial algebras of functors are fairly simple .",
    "more sophisticated data types  e.g. , untyped lambda terms and red - black trees  are often modelled as inductive indexed types arising as initial algebras of functors on slice categories , presheaf categories , and similar structures . in this paper , we derive sound induction rules for such inductive indexed types .",
    "we do this by considering first the special case of indexing via slice categories , and then the general case where indexing is itself given by a suitable fibration . finally , since we can derive sound induction rules for inductive types and inductive indexed types , and sound coinduction rules for coinductive types , we might expect to be able to derive sound coinduction rules for coinductive indexed types , too .",
    "in this paper , we confirm that this is the case and , again , consider first the special case of indexing via slice categories and then the general situation .",
    "we now describe the structure of the rest of this paper . after describing the results in each section",
    ", we give a concrete example of a widely - used data type and a corresponding logic for which the results of that section can derive a sound induction or coinduction rule , as appropriate , but for which such a rule can not be derived from previously known techniques of comparable generality .",
    "we thus show that our framework not only facilitates an abstract conceptualisation that reveals the essence of induction and coinduction , but also significantly advances the state - of - the - art by being instantiable to a larger class of data types and logics than ever before .",
    "the rest of this paper is structured as follows .",
    "@xmath19    in section 2 , we recall the fibrational approach to induction pioneered in  @xcite and extended in  @xcite .",
    "we also present a number of fibrations , each of which captures a different logic of interest .",
    "finally , we recall conditions under which the fibrational induction rule we derive in  @xcite can be instantiated to give a sound concrete induction rule for _ any _ inductive data type with respect to _ any _ such logic .    in section  [ sec : coind ] we extend the fibrational approach to coinduction from  @xcite to derive a coinduction rule that can be instantiated to give a sound concrete coinduction rule for _ any _ coinductive data type .",
    "we illustrate this by deriving a sound coinduction rule for the coinductive data type determined by the finite powerset functor .",
    "this functor is fundamental in the theory of bisimulation and labelled transition systems , but it is not a polynomial functor and so can not be handled using the techniques of hermida and jacobs .    in section",
    "[ sec : indind ] we use slice categories to model indexing of data types , and thus to give sound concrete induction rules for _ all _ inductive indexed data types .",
    "we apply this result to derive a sound induction rule for inductive type determined by indexed containers with respect to the families fibration , and then further specialise this rule to the inductive indexed data type of untyped lambda terms .",
    "the data type of untyped lambda terms is not determined by a polynomial functor , so the sound induction rule we derive for it is not simply an instantiation of hermida and jacobs results .",
    "in section  [ sec : indcoind ] we use slice categories again , this time to give sound concrete coinduction rules for _ all _ coinductive data types .",
    "we apply our results to derive sound coinduction ( i.e. , bisimulation ) rules for coinductive types determined by indexed containers .",
    "these coinductive types are equivalent to hancock and hyvernat s interaction structures  @xcite . however , since they are not determined by polynomial functors , the coinduction rules we derive for them are not simply instantiations of hermida and jacobs results .    in section  [ sec :",
    "fibind ] we study fibrational indexed induction by generalising the indexing of data types from slice categories to fibrations .",
    "we derive an induction rule that extends the one in section  [ sec : indind ] and show how it can be instantiated to give sound induction rules for set - indexed data types .",
    "set - indexing occurs , for example , in mutually recursive definitions of data types .",
    "in section  [ sec : fibcoind ] we similarly study fibrational indexed coinduction , derive a coinduction rule that extends the one in section  [ sec : indcoind ] , and point out that this rule can be instantiated to give sound coinduction rules for set - indexed data types .",
    "in section  [ sec : conc ] we summarise our conclusions and discuss related work and possibilities for future research .",
    "this paper is a revised and expanded version of the conference paper  @xcite .",
    "whereas the conference paper covers only indexing modelled by slice categories , this paper also treats general indexing .",
    "accordingly , the material in sections  [ sec : fibind ] and  [ sec : fibcoind ] is entirely new .",
    "fibrations support a uniform axiomatic approach to induction and coinduction that is widely applicable and abstracts over the specific choices of the category in which types are interpreted , the functor on that category giving rise to the data type whose rules are to be constructed , and the predicate those rules may be used to establish . this is advantageous because i ) the semantics of data types in languages involving recursion and other effects usually involves categories other than @xmath20 ; ii ) in such circumstances , the standard set - based interpretations of predicates are no longer germane ; iii ) in any setting , there can be more than one reasonable notion of predicate ; and iv ) fibrations allow induction and coinduction rules for many classes of data types to be obtained by the instantiation of a single generic theory , rather than developed on an _ ad hoc _ basis .",
    "the genericness supported by fibrations provides a predictive power that is the hallmark of any good scientific theory .",
    "we begin with fibrations .",
    "more details can be found in , e.g. ,  @xcite .",
    "let @xmath21 be a functor .",
    "a morphism @xmath22 in @xmath23 is _ cartesian _ above a morphism @xmath24 in @xmath17 if @xmath25 and , for every @xmath26 in @xmath23 with @xmath27 for some @xmath28 , there exists a unique @xmath29 in @xmath23 such that @xmath30 and @xmath31 .",
    "a fibration is simply a functor @xmath0 that guarantees a large supply of cartesian morphisms .",
    "the exact definition is as follows :    let @xmath21 be a functor . then @xmath32 is a _ fibration _ if for every object @xmath33 of @xmath23 and every morphism @xmath34 in @xmath17 , there is a cartesian morphism above @xmath35 with codomain @xmath33 .",
    "if @xmath36 is a fibration , we call @xmath17 the _ base category _ of @xmath32 and @xmath23 its _ total category_. objects of @xmath23 are thought of as properties , objects of @xmath17 are thought of as types , and @xmath32 is thought to map each property @xmath33 in @xmath23 to the type @xmath37 about which it is a property .",
    "an object @xmath33 in @xmath23 is said to be _ above _ its image @xmath37 under @xmath32 , and similarly for morphisms . for any object @xmath38 of @xmath17 ,",
    "we write @xmath39 for the _ fibre above @xmath38 _ ,",
    "i.e. , for the subcategory of @xmath23 comprising objects above @xmath38 and morphisms above the identity morphism @xmath40 on @xmath38 .",
    "morphisms within a fibre are said to be _",
    "vertical_.    if @xmath0 is a fibration , @xmath33 is an object of @xmath23 , and @xmath41 , we write @xmath42 for the cartesian morphism above @xmath35 with codomain @xmath33 .",
    "we omit the subscript @xmath33 when it can be inferred from context . as with all entities defined via universal properties ,",
    "@xmath42 is defined up to isomorphism ; we write @xmath43 for the domain of @xmath42 . if @xmath24 is a morphism in the base of a fibration , then the function mapping each object @xmath33 of @xmath44 to @xmath43 extends to a functor @xmath45 called the _ reindexing functor induced by @xmath35_. if we think of @xmath35 as performing type - level substitution , then @xmath46 can be thought of as lifting @xmath35 to perform substitution of types into predicates .",
    "[ ex : famfib ] the category @xmath47 has as objects pairs @xmath48 with @xmath38 a set and @xmath49 .",
    "we call @xmath38 the _ domain _ of @xmath50 and write @xmath33 for @xmath50 when convenient .",
    "a morphism from @xmath51 to @xmath52 is a pair @xmath53 of functions @xmath54 and @xmath55 .",
    "the functor @xmath56 mapping @xmath48 to @xmath38 is called the _ families fibration_. here , the cartesian morphism associated with the object @xmath57 in @xmath47 and the morphism @xmath58 in @xmath20 is the morphism @xmath59 in @xmath47 from @xmath60 to @xmath33 .",
    "[ ex : cod ] the _ arrow category _ of @xmath17 , denoted @xmath61 , has morphisms of @xmath17 as its objects .",
    "a morphism from @xmath62 to @xmath63 in @xmath61 is a pair @xmath64 of morphisms in @xmath17 such that the following diagram commutes : @xmath65^{\\alpha_1 } \\ar[d]_{f } &      x ' \\ar[d]^{f ' } \\\\      y \\ar[r]_{\\alpha_2 } & y'}\\ ] ] the codomain functor @xmath66 maps an object @xmath58 of @xmath67 to the object @xmath68 of @xmath17 . if @xmath17 has pullbacks , then @xmath69 is a fibration , called the _ codomain fibration over @xmath17_. indeed , given an object @xmath70 in the fibre above @xmath68 and a morphism @xmath71 in @xmath17 , the pullback of @xmath35 along @xmath72 gives the cartesian morphism above @xmath72 .",
    "similarly , the domain functor @xmath73 is a fibration , called the _ domain fibration over @xmath17_. no conditions on @xmath17 are required .    a useful restriction of the previous fibration considers ( equivalence classes of ) monic maps only :    [ ex : subfib ]",
    "let @xmath17 be a category with pullbacks .",
    "let @xmath74 be the category of subobjects of @xmath17 , i.e. , let the objects of @xmath74 be equivalence classes of monos ( where @xmath75 and @xmath76 are equivalent iff they are isomorphic in the slice category @xmath1 ) .",
    "the _ subobject fibration over @xmath17 _ is the fibration @xmath77 that sends an equivalence class @xmath78 $ ] to the codomain of @xmath79 .",
    "reindexing is well - defined because the pullback of a mono along any morphism is again a mono .",
    "note that every fibre @xmath80 is a preorder , and thus that @xmath32 is a fibred preorder .",
    "fibred preorders can be thought of logically as modelling just provability , rather than proofs themselves .",
    "the following fibration appears as example 4.8.7 ( iii ) in  @xcite :    [ ex : cl ] let @xmath81 be the category of complete lattices with functions preserving all joins between them . if @xmath38 is a complete lattice , then a subset @xmath82 is _ admissible _ if @xmath83 is closed under joins in @xmath38 .",
    "we write @xmath84 for the category whose objects are pairs @xmath85 , where @xmath38 is a complete lattice and @xmath83 is an admissible subset of @xmath38 , and whose morphisms from @xmath85 to @xmath86 are morphisms @xmath87 in @xmath81 such that @xmath88 implies @xmath89 .",
    "admissible subsets of complete lattices form a fibration @xmath90 . indeed , if @xmath86 is an object in @xmath84 , if @xmath91 in @xmath81 , and if we define @xmath92 , then @xmath93 is actually an object of @xmath84 since @xmath35 preserves joins .",
    "moreover , a cartesian morphism @xmath94 is given by @xmath35 itself",
    ".      we will later need the generalisation of the notion of a fibration to that of a bifibration . since bifibrations are defined in terms of opfibrations , we begin by defining these .",
    "abstractly , @xmath36 is an opfibration if @xmath95 is a fibration .",
    "this characterisation has the merit of allowing us to use duality to establish properties of opfibrations from properties of fibrations , but a more concrete definition can be obtained by unwinding the characterisation above .",
    "let @xmath21 be a functor .",
    "a morphism @xmath96 in @xmath23 is _ opcartesian _ above a morphism @xmath24 in @xmath17 if @xmath25 and , for every @xmath97 in @xmath23 with @xmath98 for some @xmath99 , there exists a unique @xmath100 in @xmath23 such that @xmath30 and @xmath101 .",
    "just as a fibration is simply a functor that has a plentiful supply of cartesian morphisms in its domain , so an opfibration is a functor that has a plentiful supply of opcartesian morphisms in its domain .",
    "we have :    if @xmath21 is a functor , then @xmath32 is an _ opfibration _ if for every object @xmath33 of @xmath23 and every morphism @xmath102 in @xmath17 there is an opcartesian morphism in @xmath23 above @xmath35 with domain @xmath33 .",
    "a functor @xmath32 is a _ bifibration _ if it is simultaneously a fibration and an opfibration .",
    "if @xmath32 is an opfibration , @xmath33 is an object of @xmath23 and @xmath102 is a morphism of @xmath17 , then we denote the opcartesian morphism above @xmath35 with domain @xmath33 by @xmath103 and note that , as with cartesian morphisms , this is defined up to isomorphism .",
    "we write @xmath104 for the codomain of @xmath103 and omit the superscript @xmath33 when it can be inferred from context .",
    "if @xmath58 is a morphism in the base of an opfibration , then the function mapping each object @xmath33 of @xmath39 to @xmath105 extends to a functor @xmath106 called the _ opreindexing functor induced by @xmath35_. the following useful result is from  @xcite :    [ lem : bifdef ] let @xmath107 be a fibration .",
    "then @xmath32 is a bifibration iff , for every morphism @xmath58 in @xmath17 , @xmath46 has a left adjoint @xmath108 .",
    "both the families fibration and the codomain fibration are opfibrations , and thus bifibrations . in the families fibration ,",
    "if @xmath58 is a function , and @xmath109 is an object of @xmath47 above @xmath38 , then the associated opcartesian morphism has as codomain the function from @xmath68 to @xmath20 that maps @xmath110 to the disjoint union @xmath111 .",
    "the first component of the opcartesian morphism is @xmath35 , and its second component maps @xmath112 and @xmath113 to the pair @xmath114 . in the codomain fibration ,",
    "if @xmath58 is a morphism in the base category and @xmath115 is above @xmath38 , then we can construct the opcartesian morphism consisting of the pair of morphisms @xmath116 from @xmath117 to @xmath118 .",
    "in general , the subobject fibration over @xmath17 is not an opfibration , and hence not a bifibration .",
    "however , as shown in lemma  4.4.6 of  @xcite , if @xmath17 is a regular category then it is .",
    "beck - chevalley conditions are used to guarantee that reindexing satisfies desirable commutativity properties .",
    "see  @xcite for an expanded treatment of the following discussion .",
    "[ def : beckcc ]",
    "let @xmath119 be a bifibration .",
    "we say that @xmath32 _ satisfies the beck - chevalley condition ( for opreindexing ) _ if for any pullback square @xmath120^t \\ar[d]_s { \\save*!/dr-1.8pc / dr:(-1,1)@^{|-}\\restore } & b \\ar[d]^f \\\\ c \\ar[r]_g &      d}\\ ] ] in @xmath17 , the canonical natural transformation @xmath121 defined as @xmath122 is an isomorphism .",
    "here , @xmath123 is the unit of the adjunction @xmath124 and @xmath125 is the counit of the adjunction @xmath126 .",
    "it is easy to check that the families fibration , the codomain fibration , and the fibration of admissible subsets of complete lattices satisfy the beck - chevalley condition . in addition",
    ", the subobject fibration over @xmath17 satisfies the beck - chevalley condition if @xmath17 is regular .",
    "in addition , we have :    [ lem : bcmono ] let @xmath119 be a bifibration that satisfies the beck - chevalley condition .",
    "then for any mono @xmath62 in @xmath17 ,    1 .",
    "the functor @xmath127 is full and faithful , and 2 .",
    "any opcartesian morphism above @xmath35 is also cartesian .    given that fibrations are the fundamental structures used in this paper , it is natural to ask what morphisms between such structures might be .",
    "in general , we can consider this question in a setting where the fibrations can have different base categories .",
    "however , for our purposes we only need consider the special case where the base categories of the fibrations involved are the same .",
    "in this situation we have the following definition :    let @xmath17 be a category . given two fibrations @xmath119 and @xmath128 with base category @xmath17 , a _ fibred functor _ from @xmath32 to @xmath129 above @xmath17",
    "is a functor @xmath130 such that @xmath131 preserves cartesian morphisms and the following diagram commutes : @xmath132_u \\ar[rr]^h & & { { \\mathcal e } } ' \\ar[ld]^{u'}\\\\      & { { \\mathcal b}}}\\ ] ]    one of the key points about fibred functors is that they allow us to define fibred adjunctions , and thus to lift standard categorical structures to the fibred setting . in the special case",
    "when the base categories of the fibrations are the same , a fibred adjunction is defined as follows :    let @xmath17 be a category and @xmath0 and @xmath133 be fibrations .",
    "given two fibred functors @xmath134 and",
    "@xmath135 above @xmath17 , we say that @xmath136 is a _ fibred right adjoint _ of @xmath3 above @xmath17 iff @xmath136 is right adjoint to @xmath3 and the unit ( or , equivalently , counit ) of the adjunction @xmath137 is vertical .",
    "we say that the adjunction @xmath138 is a _ fibred adjunction _ above @xmath17 .",
    "henceforth , we speak only of fibred functors and fibred adjunctions , and leave implicit the fact they are above a particular category .",
    "the definition of a fibred adjunction can be given an alternative form in terms of a collection of adjunctions between corresponding fibres of fibrations and a coherence property linking these adjunctions together .",
    "to see this , we first introduce the following helpful notation . given fibrations @xmath0 and @xmath133 , a fibred functor @xmath139 , and an object @xmath38 of @xmath17 , we denote by @xmath140 the restriction of @xmath3 to the fibre @xmath39 .",
    "we know the image of @xmath141 lies within @xmath142 because @xmath3 is fibred .",
    "we have :    [ lem : fibadj ] let @xmath17 be a category , let @xmath119 and @xmath128 be fibrations , and let @xmath143 be a fibred functor .",
    "then @xmath136 has a fibred left adjoint iff the following two conditions hold :    1 .   for any @xmath38 in @xmath17",
    ", @xmath144 has a left adjoint @xmath141 , and 2 .   for every morphism @xmath62 in @xmath17 with associated reindexing functors @xmath46 and @xmath145 with respect to @xmath32and @xmath129 , respectively , the canonical natural transformation from @xmath146 to @xmath147 obtained as the transpose , then the transpose of a morphism @xmath148 is @xmath149 and the transpose of a morphism @xmath150 is @xmath151 , where @xmath152 and @xmath153 are the unit and counit , respectively , of the adjunction @xmath154 . ] of @xmath155",
    "is an isomorphism .",
    "here , @xmath156 arises from the fact that @xmath136 , and hence @xmath144 , preserves cartesian morphisms .",
    "suppose @xmath38 is in @xmath17 and @xmath33 is in @xmath142 in the setting of lemma  [ lem : fibadj ] .",
    "then @xmath157 , and if @xmath158 is the unit of @xmath138 and @xmath159 is the unit of @xmath160 , then @xmath161 .",
    "we conclude this section with a lemma about ( non - fibred ) adjunctions and the preservation of cartesian and opcartesian morphisms .",
    "[ lem : adjandcart ] let @xmath119 and @xmath128 be fibrations .",
    "further , let @xmath162 and @xmath163 be adjoint functors @xmath138 with vertical unit ( or equivalently , counit ) such that @xmath164 and @xmath165",
    ". then the functor @xmath3 preserves opcartesian morphisms and the functor @xmath136 preserves cartesian morphisms .",
    "we prove only that @xmath136 preserves cartesian morphisms ; the second result is then obtained by dualising .",
    "let @xmath62 be a morphism in @xmath17 and let @xmath166 be the cartesian morphism above @xmath35 in @xmath167 .",
    "we will prove that @xmath168 is cartesian above @xmath35 in @xmath23 . to do this ,",
    "let @xmath169 be a morphism in @xmath23 above @xmath170 for some @xmath117 in @xmath17 .",
    "then the transpose @xmath171 of @xmath172 is above @xmath173 in @xmath167 because the counit @xmath174 of the adjunction @xmath175 is vertical .",
    "we then have a unique morphism @xmath176 in @xmath167 above @xmath117 such that @xmath177 since @xmath178 is cartesian .",
    "because @xmath158 is vertical , this gives us a unique morphism @xmath179 in @xmath23 above @xmath117 such that @xmath180 .      at the heart of hermida and jacobs approach to induction is the observation that if @xmath0 is a fibration and @xmath16 is a functor , then @xmath3 can be lifted to a functor @xmath181 and the premises of the induction rule for @xmath4 can be taken to be an @xmath18-algebra .",
    "hermida and jacobs observed that , crucially , this lifting must be truth - preserving .",
    "we define these terms now .",
    "[ def : multi ] let @xmath182 be a fibration and @xmath183 be a functor . a _",
    "lifting _ of @xmath3 with respect to @xmath32 is a functor @xmath184 such that @xmath185 .",
    "if each fibre @xmath39 has a terminal object , and if reindexing preserves terminal objects , then we say that @xmath32 _ has fibred terminal objects_. in this case , the map assigning to every @xmath38 in @xmath17 the terminal object in @xmath39 defines a full and faithful functor @xmath186 that is called the _ truth functor _ for @xmath32 and is right adjoint to @xmath32 .",
    "we omit the subscript on @xmath186 when this can be inferred .",
    "a lifting @xmath18 of @xmath3 is said to be _ truth - preserving _ if @xmath187 .",
    "the families fibration has fibred terminal objects : the terminal object in the fibre above @xmath38 is the function mapping each @xmath112 to the one - element set .",
    "the codomain fibration @xmath69 also has fibred terminal objects : the terminal object in the fibre above @xmath38 is @xmath188 .",
    "the subobject fibration has fibred terminal objects : the terminal object in the fibre above @xmath38 is the equivalence class of @xmath188 .",
    "a truth - preserving lifting @xmath189 of @xmath3 with respect to @xmath69 is given by the action of @xmath3 on morphisms .",
    "truth - preserving liftings of functors with respect to the families fibration and the subobject fibration over a regular category can be obtained from the results of this section .    as mentioned in the introduction , in the fibrational approach to induction the premises of an induction rule for a data type @xmath4",
    "are taken to be an @xmath18-algebra @xmath190 .",
    "but what about the conclusion of such an induction rule ? since its premises are an @xmath18-algebra , it is reasonable to expect its conclusion to be the unique mediating morphism from the initial @xmath18-algebra to @xmath191 . but",
    "this expectation is thwarted because an initial @xmath18-algebra is not , in general , guaranteed to exist .",
    "we therefore seek conditions ensuring that , for every functor @xmath3 on the base category of a fibration @xmath32 , its lifting @xmath18 has an initial algebra .",
    "moreover , our examples below suggest that the carrier of this initial @xmath18-algebra should be @xmath192 , where @xmath193 is the truth functor for @xmath32 .",
    "fortunately , we already know that any truth - preserving lifting @xmath18 of @xmath3 defines a functor @xmath194 mapping an @xmath3-algebra @xmath195 to the @xmath196-algebra @xmath197 .",
    "soundness of the induction rule thus turns out to be equivalent to requiring that applying @xmath198 to the initial @xmath3-algebra gives the initial @xmath18-algebra .",
    "we capture this discussion formally as follows :    [ def : ind ] let @xmath119 be a fibration with truth functor @xmath199 and let @xmath200 be a functor whose initial algebra has carrier @xmath201 .",
    "we say that a truth - preserving lifting @xmath196 of @xmath3 _ defines a sound induction rule for @xmath4 in @xmath32 _ if the functor @xmath202 preserves initial objects .",
    "we will omit explicit reference to @xmath32 when it is clear from context .",
    "in the situation of definition  [ def : ind ] , the generic fibrational induction rule is given by @xmath203 and its soundness ensures that if @xmath204 is above @xmath35 , then @xmath205 is above @xmath206 .    to see how the above categorical definition of an induction rule corresponds to our intuitive understanding , we look at an example before returning to the general discussion of fibrational induction .",
    "the data type @xmath207 of natural numbers is @xmath208 , where @xmath209 is the functor on @xmath20 defined by @xmath210 .",
    "a lifting @xmath211 of @xmath209 from @xmath20 to @xmath47 is given by @xmath212 an @xmath211-algebra with carrier @xmath213 can be given by @xmath214 and @xmath215 . since @xmath216 and @xmath217",
    ", we see that @xmath218 consists of an element @xmath219 and a function @xmath220 .",
    "these are exactly the premises of the standard induction rule we learn on the playground . as for the conclusion of the induction rule",
    ", we first note that @xmath221 , so that the induction rule has as its conclusion a morphism of predicates from @xmath222 to @xmath33 whose first component is @xmath223 .",
    "the second component will be a function with type @xmath224 , i.e. , a function that gives , for @xmath225 , a proof in @xmath226 .",
    "this is exactly as expected .",
    "definition  [ def : ind ] naturally leads us to ask for conditions on a fibration @xmath32 guaranteeing that a truth - preserving lifting of a functor @xmath3 defines a sound induction rule for @xmath4 .",
    "hermida and jacobs key theorem states that a sufficient condition is that @xmath32 be a comprehension category with unit .",
    "a _ comprehension category with unit _ ( ccu ) is a fibration @xmath0 with a truth functor @xmath186 that has a right adjoint @xmath227 . in this case",
    ", @xmath227 is called the _ comprehension functor _ for @xmath32 .",
    "we omit the subscript on @xmath227 when this can be inferred from context .",
    "the families fibration is a ccu : the comprehension functor maps a predicate @xmath228 to the set @xmath229 .",
    "the fibration @xmath69 is the canonical ccu : the comprehension functor is the domain functor @xmath230 mapping @xmath231 in @xmath61 to @xmath38 .",
    "the subobject fibration over a category @xmath17 is a ccu : the comprehension functor maps an equivalence class to the domain of a ( chosen ) representative .",
    "as shown in  @xcite , truth - preserving liftings for ccus define sound induction rules .",
    "that is ,    [ thm : ind ] let @xmath119 be a ccu and @xmath200 be a functor whose initial algebra has carrier @xmath4 .",
    "then every truth - preserving lifting @xmath196 of @xmath3 with respect to @xmath32 defines a sound induction rule for @xmath4 .",
    "the proof of this theorem is conceptually simple : hermida and jacobs show that under the assumptions of the theorem , each functor @xmath198 has a right adjoint and therefore preserves all colimits , including the initial object .",
    "this very elegant theorem shows that fibrations provide just the right structure to derive sound induction rules for inductive types whose underlying functors have truth - preserving liftings . and",
    "it s amazing to see such structure captured so smoothly as the existence of a pair of adjoints to the fibration itself . however , there is still one missing ingredient , namely , a set of conditions under which functors are guaranteed to have truth - preserving liftings .",
    "hermida and jacobs  @xcite provided truth - preserving liftings , and thus sound induction rules , only for polynomial functors .",
    "this situation was rectified in  @xcite , where it was shown that every functor has a truth - preserving lifting with respect to every ccu that is also a bifibration .",
    "such ccus are called _",
    "lawvere categories_.",
    "a fibration @xmath182 is a _ lawvere category _ if it is a ccu that is also a bifibration .",
    "if @xmath174 is the counit of the adjunction @xmath232 for a ccu @xmath32 , then @xmath233 defines a natural transformation @xmath234 .",
    "moreover , @xmath235 extends to a functor @xmath236 in the obvious way .",
    "[ lem : deflifting ] let @xmath237 be a lawvere category",
    ". then @xmath235 has a left adjoint @xmath238 defined by @xmath239 .    for any functor @xmath3",
    ", the composition @xmath240 defines a truth - preserving lifting with respect to the lawvere category @xmath32  @xcite . here ,",
    "@xmath189 is the lifting given after definition  [ def : multi ] of @xmath3 to the total category of the codomain fibration .",
    "concretely , @xmath241 .",
    "thus , if @xmath32 is a lawvere category and @xmath3 has an initial algebra @xmath4 , then theorem  [ thm : ind ] guarantees that @xmath196 defines a sound induction rule for @xmath4 .",
    "indeed , we have :    [ thm : inda ] if @xmath242 is a lawvere category and @xmath183 is a functor whose initial algebra has carrier @xmath4 , then there exists a sound induction rule for @xmath4 in @xmath32 .",
    "if @xmath17 has pullbacks , so that the functor @xmath69 is actually a fibration , then the following diagram establishes that we have actually given a uniform modular construction of a lifting with respect to any lawvere category by factorisation through the lifting for @xmath69 :    @xmath243_u \\ar@/^/[rr]^\\pi \\ar@{}[rr]|\\top & &     \\ar@/^/[ll]^i \\ar[ld]^{cod } { { { \\mathcal b}}^\\to}\\\\ & { { { \\mathcal b } } } & } \\ ] ]",
    "in  @xcite , hermida and jacobs augmented their sound fibrational induction rules for carriers of initial algebras of polynomial functors with a sound coinduction rule for carriers of final coalgebras of polynomial functors .",
    "the goals of this section are to recall the results of hermida and jacobs , and to extend them to give sound coinduction rules for carriers of final coalgebras of functors .",
    "hermida and jacobs begin by observing that coinduction is concerned with relations .",
    "given a fibration @xmath32 whose total category is thought of as a category of predicates , they therefore construct a new fibration @xmath244 whose total category is thought of as a category of relations .",
    "[ def : cob ] let @xmath0 be a fibration where @xmath17 has products , and let @xmath245 be the diagonal functor sending an object @xmath38 to @xmath246 .",
    "then the fibration @xmath247 is obtained by the pullback of @xmath32 along @xmath248 .",
    "we call @xmath244 the _ relations fibration _ for @xmath32 .    that the pullback of a fibration along any functor is a fibration is well - known  @xcite , and the process of pulling back a fibration along a functor @xmath3 to obtain a new fibration",
    "is called _ change of base _ along @xmath3 . since",
    "an opfibration from @xmath23 to @xmath17 is a fibration from @xmath249 to @xmath250 , change of base preserves opfibrations as well as fibrations , and therefore preserves bifibrations .",
    "below we denote the pullback of _ any _ functor @xmath251 along a functor @xmath252 by @xmath253 .",
    "the objects of @xmath254 are pairs @xmath255 such that @xmath256 , and @xmath257 maps the pair @xmath255 to the object @xmath38 .",
    "we write @xmath68 for @xmath255 in @xmath258 when convenient .",
    "if @xmath36 is a bifibration , then change of base along a natural transformation @xmath259 induces an adjunction between @xmath260 and @xmath261 .",
    "we have :    [ lem : natadj ] for @xmath119 a bifibration and @xmath262 a natural transformation with @xmath263 .",
    "there is an adjunction @xmath264_{f^*u } \\ar@/^/[rr]^{\\sigma_\\alpha }      \\ar@{}[rr]|\\bot & & \\ar@/^/[ll]^{\\alpha^ * } g^*{{\\mathcal e}}\\ar[ld]^{g^*u}\\\\&{{\\mathcal a}}}\\ ] ] with @xmath265 furthermore , if @xmath32 satisfies the beck - chevalley condition and the components of @xmath191 are monos , then @xmath266 is full and faithful .",
    "straightforward from the definitions of @xmath266 and @xmath267 and lemmas  [ lem : bifdef ] and  [ lem : bcmono ] .",
    "definition  [ def : cob ] entails that the fibre of @xmath268 above @xmath38 is the fibre @xmath269 .",
    "a morphism from @xmath255 to @xmath270 in @xmath268 consists of a pair of morphisms @xmath271 and @xmath272 such that @xmath273 .",
    "change of base is well - known to preserve fibred terminal objects  @xcite .",
    "it therefore preserves truth functors , so that @xmath244 has a truth functor whenever @xmath32 does .",
    "this is given by @xmath274 .",
    "let @xmath32 be the families fibration .",
    "then the fibre of @xmath244 above a set @xmath38 consists of functions @xmath275 . these are , as intended , just ( set - valued ) relations .",
    "the truth functor for @xmath244 maps a set @xmath38 to the relation @xmath276 that maps each pair @xmath277 to the one - element set .    in the inductive setting , truth - preserving liftings were needed . in the coinductive",
    "setting , we need equality - preserving liftings , where the equality functor is defined as follows :    [ def : eq - fun ] let @xmath0 be a bifibration where @xmath17 has products , and let @xmath193 be the truth functor for @xmath32 .",
    "let @xmath278 be the diagonal natural transformation for @xmath248 with components @xmath279 , and let @xmath280 be the functor mapping an object @xmath33 above @xmath38 to the object @xmath281 .",
    "note that @xmath281 is above @xmath246 in @xmath23 and above @xmath38 in @xmath268 .",
    "equality functor _ for @xmath32 is the functor @xmath282 defined by @xmath283 .",
    "the functor @xmath284 maps each morphism @xmath35 to the unique morphism above @xmath285 induced by the naturality of @xmath286 at @xmath35 and the opcartesian morphism @xmath287 .",
    "if @xmath284 has a left adjoint @xmath288 , then @xmath288 is called the _ quotient functor _ for @xmath32 .",
    "we suppress the subscripts on @xmath284 and @xmath288 when convenient .",
    "the notion of an equality - preserving lifting of a functor is then defined as follows :    let @xmath0 be a bifibration where @xmath17 has products , suppose @xmath32 has a truth functor , and let @xmath16 be a functor .",
    "a lifting @xmath18 of @xmath3 with respect to @xmath244 is said to be _ equality - preserving _ if @xmath289 .",
    "just as truth - preserving liftings are the key to defining induction rules , equality - preserving liftings are the key to defining coinduction rules .",
    "the following definition is pleasantly dual to definition  [ def : ind ] :    [ def : coind ] let @xmath119 be a bifibration where @xmath17 has products , suppose @xmath32 has a truth functor , and let @xmath200 be a functor whose final coalgebra has carrier @xmath10 .",
    "we say that an @xmath290-preserving lifting @xmath196 of @xmath3 _ defines a sound coinduction rule for @xmath10 in @xmath32 _ if the functor @xmath291 sending each @xmath3-coalgebra @xmath292 to the @xmath196-coalgebra @xmath293 preserves terminal objects .    as before ,",
    "we omit explicit reference to @xmath32 when it is clear from context .",
    "as in  @xcite , there is a simple condition under which @xmath290-preserving liftings define sound coinduction rules , namely , that @xmath32 has a quotient functor .",
    "note the duality : in the inductive setting the truth functor @xmath193 must have a right adjoint , whereas in the coinductive setting the equality functor @xmath290 must have a left adjoint .",
    "[ thm : coind ] let @xmath0 be a bifibration where @xmath17 has products , suppose @xmath32 has a truth functor and a quotient functor , and let @xmath294 be a functor whose final coalgebra has carrier @xmath10 .",
    "then every equality - preserving lifting @xmath18 of @xmath3 with respect to @xmath244 defines a sound coinduction rule for @xmath10 .    as before ,",
    "hermida and jacobs proof is conceptually simple : if @xmath32 has a quotient functor , then each functor @xmath295 has a left adjoint and hence preserves all limits , including the terminal object . as a result",
    ", the carrier of the final @xmath18-coalgebra is obtained by applying @xmath290 to the final @xmath3-coalgebra , and the generic fibrational coinduction rule is therefore given by @xmath296 soundness of the rule ensures that if @xmath297 is above @xmath35 , then @xmath298 is above @xmath299 .    as was the case for induction , hermida and jacobs provided @xmath290-preserving liftings only for polynomial functors , and thus sound coinduction rules only for carriers of their final coalgebras .",
    "the outstanding issue is then to establish a set of conditions under which functors are guaranteed to have equality - preserving liftings .",
    "the first contribution of this paper is to give a sound coinduction rule for every coinductive type , i.e. , for every data type that is the carrier @xmath10 of the final coalgebra for a functor @xmath3 .",
    "this entails determining conditions sufficient to guarantee that functors have equality - preserving liftings . to do this , we step back a little and show how to construct liftings that can be instantiated to give both the truth - preserving liftings required for deriving sound induction rules and , by duality , the equality - preserving liftings required for deriving sound coinduction rules .    [ lem : coindlift ] define a _ quotient category with equality _ ( qce ) to be a fibration @xmath119 with a full and faithful functor @xmath300 such that @xmath301 and @xmath302 has a left adjoint @xmath303 with unit @xmath158 . let @xmath183 be a functor , and define functors @xmath304 , @xmath305 , and @xmath306 by @xmath307 then @xmath308 ( i.e. , @xmath306 is a lifting of @xmath3 ) and @xmath309 .    to prove @xmath310 , note that the morphisms @xmath311 each have domain @xmath312 , that @xmath313 , and that @xmath314 . together",
    "these give @xmath315 .",
    "to prove @xmath309 , we first assume that i ) for every @xmath38 in @xmath17 , @xmath316 is an isomorphism in @xmath17 , and ii ) for every isomorphism @xmath35 in @xmath17 , @xmath317 . then since @xmath301 , we have that i ) and ii ) imply that @xmath318 . to discharge assumption i ) , note that the counit @xmath319 of @xmath320 is a natural isomorphism because @xmath302 is full and faithful .",
    "we thus have that @xmath321 is also a natural isomorphism and , using the equality @xmath322 , that @xmath323 is a natural isomorphism as well . as a result , @xmath324 is a natural isomorphism . to discharge ii ) , let @xmath35 be an isomorphism in @xmath17 .",
    "since cartesian morphisms above isomorphisms are isomorphisms , we have @xmath325 . here",
    ", the first isomorphism is witnessed by @xmath326 and the second by @xmath327 .",
    "although it is not needed in our work , we observe that if @xmath32 is a qce , then @xmath304 is left adjoint to @xmath305 .",
    "the proof is a straightforward application of the universal property of reindexing ; see lemma  2.2.10 in  @xcite .",
    "the lifting @xmath306 has as its dual the lifting @xmath18 given in the following lemma .",
    "[ lem : indlift ] let @xmath119 be an opfibration , let @xmath199 a full and faithful functor such that @xmath328 , and let @xmath329 be a right adjoint to @xmath193 with counit @xmath174 .",
    "let @xmath183 be a functor , and define functors @xmath235 , @xmath2 , and @xmath18 by @xmath330 then @xmath185 ( i.e. , @xmath196 is a lifting of @xmath3 ) and @xmath331 .",
    "by dualisation of lemma  [ lem : coindlift ] .",
    "the setting on the left below with @xmath32 an opfibration is equivalent to the setting on the right with @xmath32 a fibration .",
    "@xmath332_c { { \\mathcal e}}\\ar[d]^{u } &      \\ar@{}\"1,2\"-<10px,0px>;\"2,1\"+<168px,10px>|\\dashv &      \\ar@/_1.2pc/[ld]_c { { \\mathcal e}}^{op } \\ar[d]^{u}\\\\ { { \\mathcal b}}\\ar[ru]_k      \\ar[r]_{id_{{\\mathcal b } } } & { { \\mathcal b } } & { { \\mathcal b}}^{op } \\ar[ru]_k \\ar[r]_{id_{{{\\mathcal b}}^{op } } } &      { { \\mathcal b}}^{op}}\\ ] ]    we can instantiate lemmas  [ lem : coindlift ] and  [ lem : indlift ] to derive both the truth - preserving lifting for all functors from  @xcite ( presented above ) and an equality - preserving lifting for all functors . the latter gives the sound induction rules for inductive types presented in  @xcite , and the former gives our sound coinduction rules for all coinductive types . to obtain the lifting for induction ,",
    "let @xmath0 be a lawvere category , @xmath193 be the truth functor for @xmath32 , and @xmath333 be the comprehension functor for @xmath32 .",
    "since a lawvere category is an opfibration , lemma  [ lem : indlift ] ensures that any functor @xmath16 lifts to a truth - preserving lifting @xmath181 .",
    "this is exactly the lifting of  @xcite . to obtain the lifting for coinduction ,",
    "let @xmath0 be a bifibration satisfying the beck - chevalley condition , let @xmath17 have products , and let @xmath193 be a truth functor for @xmath32 .",
    "now , consider the relations fibration @xmath244 for @xmath32 , and let @xmath290 be the equality functor for @xmath32 . since @xmath286 is a mono , since @xmath334 , and since both @xmath193 and @xmath335 are full and faithful , lemma  [ lem : bcmono ] ensures that @xmath290 is full and faithful .",
    "moreover , since , for every @xmath38 in @xmath17 , @xmath336 is in the fibre of @xmath244 above @xmath38 , we have @xmath337 .",
    "we can therefore take @xmath302 to be @xmath290 in lemma  [ lem : coindlift ] provided @xmath290 has a left adjoint @xmath303 . in this case",
    ", every functor @xmath16 has an equality - preserving lifting @xmath338 , and so if @xmath3 has a final coalgebra @xmath10 , then @xmath10 has a sound coinduction rule .",
    "we record this in the following theorem .",
    "henceforth , we call a qce of the form @xmath244 obtained by change of base of @xmath32 along @xmath248 by the above construction , and for which the functor @xmath302 is thus the equality functor for @xmath32 , a _ relational qce_.    [ thm : coinda ] if @xmath339 is a relational qce obtained from a fibration @xmath0 , and if @xmath183 is a functor whose final coalgebra has carrier @xmath10 , then there exists a sound coinduction rule for @xmath10 in u.    just as @xmath69 is the canonical ccu , if @xmath340 is the canonical qce . indeed , if @xmath32 is @xmath230 , if @xmath302 is the functor mapping each @xmath38 in @xmath17 to @xmath188 , and if @xmath303 is @xmath341 , then @xmath342 is exactly @xmath343 .",
    "thus , just as the lifting @xmath18 with respect to an arbitrary fibration @xmath32 satisfying the hypotheses of lemma  [ lem : indlift ] can be modularly constructed from the specific lifting @xmath344 with respect to @xmath69  @xcite , so the lifting @xmath345 with respect to an arbitrary fibration @xmath32 satisfying the hypotheses of lemma  [ lem : coindlift ] can be modularly constructed from the specific lifting @xmath344 with respect to @xmath340 .",
    "what we have seen is that @xmath340 plays a role in the coinductive setting similar to that played by @xmath69 in the inductive one .",
    "we think of a morphism @xmath58 in the total category of @xmath69 as a predicate on @xmath68 whose proofs constitute @xmath38 .",
    "intuitively , @xmath35 maps each @xmath346 in @xmath38 to the element @xmath347 in @xmath68 about which it is a proof .",
    "similarly , we think of a morphism @xmath58 in the total category of @xmath340 as a relation on @xmath38 , the quotient of @xmath38 by which has equivalence classes comprising @xmath68 .",
    "intuitively , @xmath35 maps each @xmath348 in @xmath38 to its equivalence class in that quotient .",
    "the following two examples of relational qces appear in propositions  4.8.6 and  4.8.7(iii ) in  @xcite .",
    "let @xmath17 be a regular category .",
    "the relations fibration for the subobject fibration @xmath349 is a relational qce iff @xmath17 has coequalisers . in this case",
    ", the equality functor maps an object @xmath38 of @xmath17 to the equivalence class of @xmath350 in @xmath74 .",
    "the quotient functor maps an equivalence class @xmath78 $ ] , with @xmath351 , to the codomain @xmath352 of the coequaliser @xmath353 of @xmath354 and @xmath355 : @xmath356^{m_0}\\ar@/_/[r]_{m_1 } & x        \\ar[r]^{\\!\\!\\!c_r } & x / r}\\ ] ]    consider the fibration @xmath357 of admissible subsets of complete lattices and its associated relations fibration @xmath358 .",
    "we have that @xmath129 is a relational qce .",
    "indeed , the equality functor @xmath359 maps a complete lattice @xmath38 to the admissible subset @xmath360 .",
    "the quotient functor @xmath361 maps an admissible subset @xmath362 to the complete lattice @xmath363 .",
    "[ ex : famrel ] as we have seen , if @xmath32 is the families fibration , then the fibre above @xmath38 in @xmath244 consists of functions @xmath364 .",
    "we think of these functions as constructive relations , with @xmath365 giving the set of proofs that @xmath348 is related to @xmath366 . in lemma",
    "[ lem : coindlift ] we can take @xmath32 to be the families fibration , @xmath302 to map each set @xmath38 to the relation @xmath367 defined by @xmath368 if @xmath369 and @xmath370 otherwise , and @xmath303 to map each relation @xmath364 to the quotient @xmath352 of @xmath38 by the least equivalence relation containing @xmath371 . we can then instantiate lemma  [ lem : coindlift ] by taking @xmath372 to map a relation @xmath275 to the quotient map @xmath373 , taking @xmath374 to map @xmath58 to the relation @xmath375 mapping @xmath277 to @xmath376 if @xmath377 and to @xmath378 otherwise , and taking @xmath379 to be given by @xmath380 .",
    "the following example demonstrates that our approach goes beyond the current state - of - the - art .",
    "we derive the coinduction rule for finitary hereditary sets in the relations fibration for the families fibration .",
    "finitary hereditary sets are elements of the carrier of the final coalgebra of the functor @xmath381 mapping a set to its finite powerset . since @xmath381 is not polynomial , it lies outside the scope of hermida and jacobs work  @xcite .",
    "in fact , as far as we aware , the coinduction rule for finitary hereditary sets that we derive in the next example is more general than any appearing elsewhere in the literature ; indeed , the relations in @xmath244 are not required to be equivalence relations .",
    "the functor @xmath381 is , however , important , not least because a number of canonical coalgebras are built from it .",
    "for example , a finitely branching labelled transition system with state space @xmath382 and labels from an alphabet @xmath83 is a coalgebra with carrier @xmath382 for the functor @xmath383 .    [ ex : coind ] by example  [ ex : famrel ] , the lifting @xmath384 maps a relation @xmath385 to the relation @xmath386 defined by @xmath387 .",
    "thus , if @xmath38 and @xmath68 are finite subsets of @xmath83 , then @xmath388 iff @xmath389 . since the action of @xmath381 on a morphism @xmath35 maps any subset of the domain of @xmath35 to its image under @xmath35 , @xmath389 iff @xmath390 , where @xmath391 is the least equivalence relation containing @xmath371 . from @xmath384 we have that the resulting coinduction rule has as its premises a @xmath384-coalgebra , i.e. , a function @xmath392 and a function @xmath393 .",
    "if we regard @xmath394 as a transition function , i.e. , if we define @xmath395 iff @xmath396 , then @xmath397 is a bisimulation whenever @xmath371 is an equivalence relation . in this case",
    ", the coinduction rule thus asserts that any two bisimilar states have the same interpretation in the final coalgebra .",
    "however , when @xmath371 is not an equivalence relation , @xmath397 is slightly weaker since it only requires transitions to map @xmath371-related elements @xmath398-related elements . since it is easier to prove that two elements are @xmath399-related than it is to prove them @xmath371-related , our coinduction rule is slightly stronger than might be expected at first glance .",
    "data types arising as initial algebras and final coalgebras on traditional semantic categories such as @xmath400 and @xmath401 are of limited expressivity .",
    "more sophisticated data types arise as initial algebras of functors on their indexed versions . to build intuition about the resulting _ inductive indexed types _ , first consider the inductive type @xmath402 of lists of @xmath38 .",
    "it is clear that defining @xmath403 for some particular type @xmath38 does not require any reference to @xmath404 for @xmath405 .",
    "that is , each type @xmath403 is inductive all on its own .",
    "we call @xmath406 an _ indexed inductive type _ to reflect the fact that it is a family of types , each of which is inductive . by contrast , for each @xmath407 in @xmath207 , let @xmath408 be the data type of @xmath407-element sets , and consider the inductive definition of the @xmath409-indexed type @xmath410 of untyped @xmath411-terms up to @xmath191-equivalence with free variables in @xmath408 .",
    "this type is given by @xmath412{@{}c@ { } }      \\begin{array}[t]{lllll }         i : { \\mathit{fin}}\\,n      \\end{array}\\\\    \\hline        \\mathit{var } \\",
    ", i : { \\mathit{lam}}\\ , n     \\end{array } } } \\hspace{1 cm } { \\ensuremath {    \\begin{array}[t]{@{}c@ { } }      \\begin{array}[t]{lllll }          f : { \\mathit{lam}}\\,n & \\;\\ ; a : { \\mathit{lam}}\\ , n      \\end{array}\\\\    \\hline        \\mathit{app } \\ , f \\ , a : { \\mathit{lam}}\\ , n    \\end{array } } } \\hspace{1 cm } { \\ensuremath {    \\begin{array}[t]{@{}c@ { } }      \\begin{array}[t]{lllll }          b : { \\mathit{lam}}\\,(n+1 )       \\end{array}\\\\    \\hline        \\mathit{abs } \\ , b : { \\mathit{lam}}\\ , n     \\end{array}}}\\ ] ] unlike @xmath403 , the type @xmath413 can not be defined in isolation using only the elements of @xmath413 that have already been constructed .",
    "indeed , the third inference rule above shows that elements of @xmath414 are needed to construct elements of @xmath413 . in effect , then , all of the types @xmath413 must be inductively constructed simultaneously .",
    "we call @xmath415 an _ inductive indexed type _ to reflect the fact that it is an indexed type that is defined inductively .",
    "there is considerable interest in inductive and coinductive indexed types .",
    "if types are interpreted in a category @xmath17 , and if @xmath2 is a set of indices considered as a discrete category , then an inductive @xmath2-indexed type can be modelled by the initial algebra of a functor on the functor category @xmath416 .",
    "alternatively , indices can be modelled by objects of @xmath17 , and inductive @xmath2-indexed types can be modelled by initial algebras of functors on slice categories @xmath1 .",
    "coinductive indexed types can similarly be modelled by final coalgebras of functors on slice categories .",
    "initial algebra semantics for inductive indexed types has been developed extensively  @xcite .",
    "pleasingly , no fundamentally new insights were required : the standard initial algebra semantics needed only to be instantiated to categories such as @xmath1 . by contrast , the theory of induction for inductive indexed types has received comparatively little attention .",
    "the second contribution of this paper is to derive sound induction rules for inductive indexed types by similarly instantiating the fibrational treatment of induction to appropriate categories .",
    "the key technical question to be solved turns out to be the following : given a lawvere category of properties fibred over types , can we construct a new lawvere category fibred over indexed types from which sound induction rules for inductive indexed types can be derived ? to answer this question ,",
    "we first make the simplifying assumption that the inductive indexed types of interest arise as initial algebras of functors on slice categories , i.e. , functors @xmath417 , where @xmath2 is an object of @xmath17 . we treat the general case in section  [ sec : fibind ] .",
    "we conjecture that the total category of the fibration with base @xmath1 that we seek should be a slice category of @xmath23 .",
    "we therefore make the canonical choice to slice over @xmath418 , where @xmath193 is the truth functor for @xmath32 .",
    "we then define @xmath419 by @xmath420 . here",
    ", @xmath421 really is @xmath2 because @xmath422 .",
    "we first show that @xmath423 is indeed a bifibration .",
    "we do this by proving a more general result that we can reuse in section  [ sec : indcoind ] .",
    "[ lem : slbif ] let @xmath36 be a fibration ( bifibration ) with a functor @xmath424 and @xmath425 such that @xmath426 .",
    "this , of course , uniquely determines @xmath136 . for any @xmath2 in @xmath427 ,",
    "the functor @xmath428 is a fibration ( resp . ,",
    "bifibration ) .",
    "let @xmath429 and @xmath430 be objects of @xmath431 , and let @xmath432 be a morphism in @xmath431 from @xmath191 to @xmath433 , i.e. , let @xmath434 be such that @xmath435 .",
    "let @xmath436 be an object of @xmath437 such that @xmath438 , and let @xmath439 be the cartesian morphism in @xmath23 above @xmath434 with respect to @xmath32 .",
    "then @xmath440 is a morphism in @xmath437 with domain @xmath441 and codomain @xmath35 , and it is cartesian above @xmath434 with respect to @xmath442 .",
    "thus , @xmath442 is a fibration if @xmath32 is .",
    "now , let @xmath443 be an object of @xmath437 such that @xmath444 , and let @xmath445 be the opcartesian morphism in @xmath23 above @xmath434 with respect to @xmath32 . since @xmath435 , the opcartesianness of @xmath446 ensures that there is a unique morphism @xmath447 in @xmath23 above @xmath433 such that @xmath448 .",
    "then @xmath446 is a morphism in @xmath437 with domain @xmath117 and codomain @xmath14 , and it is opcartesian above @xmath434 with respect to @xmath442 .",
    "thus , @xmath442 is an opfibration if @xmath32 is . combining these results",
    "gives that if @xmath32 is a bifibration then so is @xmath442 .",
    "we can now show that @xmath423 is a bifibration as desired .",
    "[ lem : bif ] if @xmath36 is a fibration ( bifibration ) with a truth functor @xmath193 and @xmath2 is an object of @xmath17 , then @xmath423 is a fibration ( resp . , bifibration ) .",
    "this follows from lemma  [ lem : slbif ] by taking @xmath3 to be the truth functor @xmath193 for @xmath32 and @xmath136 to be @xmath449 , and then observing that , for this instantiation , @xmath442 is precisely the fibration @xmath423 defined before lemma  [ lem : slbif ] .",
    "there is an alternative characterisation of @xmath450 that both clarifies the conceptual basis of our treatment of indexed induction and simplifies our calculations .",
    "the next lemma is the key observation underlying this characterisation .",
    "[ lem : simindex ] let @xmath36 be a fibration with truth functor @xmath193 , let @xmath2 be an object of @xmath17 , and let @xmath451 . then @xmath452 .",
    "one half of the isomorphism maps the object @xmath453 of @xmath454 to @xmath33 . for the other half , note",
    "that since truth functors map objects to terminal objects , and since reindexing preserves terminal objects , we have that @xmath455 is terminal in @xmath39 .",
    "thus , for any object @xmath303 above @xmath38 , we get a morphism from @xmath303 to @xmath418 by composing @xmath456 and the unique morphism @xmath457 from @xmath303 to @xmath455 . since @xmath457 is vertical and @xmath456 is above @xmath191 ,",
    "this composition is above @xmath191 .",
    "thus each object @xmath303 in @xmath39 maps to an object of @xmath454 .",
    "it is routine to verify that these maps constitute an isomorphism .",
    "by lemma  [ lem : simindex ] we can identify objects ( morphisms ) of @xmath454 and objects ( resp .",
    ", morphisms ) of @xmath39 .",
    "this gives our abstract characterisation of @xmath423 :    [ lem : u / icob ] let @xmath36 be a fibration with a truth functor and let @xmath2 be an object of @xmath17 .",
    "then @xmath423 can be obtained by change of base of @xmath32 along @xmath458 .    as noted in section  [ sec : coind ] , the pullback of a fibration along a functor is a fibration .",
    "the objects ( morphisms ) of the fibre above @xmath451 of the pullback of @xmath32 along @xmath340 are the objects ( resp . , morphisms ) of @xmath39 . by lemma  [ lem : simindex ] ,",
    "the pullback of @xmath32 along @xmath340 is therefore @xmath423 .    as observed just after definition  [ def : cob ] ,",
    "pulling back a fibration along a functor preserves fibred terminal objects so , by lemma  [ lem : u / icob ] , @xmath423 has fibred terminal objects if @xmath32 does .",
    "concretely , the truth functor @xmath459 maps an object @xmath460 to @xmath461 . to see that @xmath423 is a lawvere category",
    "if @xmath32 is , we must also show that @xmath462 has a right adjoint if @xmath186 does .",
    "for this , we use an abstract theorem due to hermida  @xcite to transport adjunctions across pullbacks along fibrations .",
    "[ lem : claudio ] let @xmath463 be an adjunction with counit @xmath174 , and let @xmath0 be a fibration . then the functor @xmath464 has a right adjoint @xmath465 mapping each object @xmath302 to the object @xmath466 .",
    "[ lem : pb - pres ] change of base along a fibration preserves ccus , i.e. , if @xmath0 is a ccu and @xmath467 is a fibration , then the pullback @xmath468 is a ccu .",
    "we already have that @xmath468 is a fibration with fibred terminal objects . to see that @xmath469 has a right adjoint ,",
    "consider the pullback of @xmath186 along @xmath470 .",
    "this pullback is given by @xmath167 , @xmath471 , and @xmath472 .",
    "note that @xmath470 is a fibration since it is obtained by pulling @xmath129 back along @xmath32 .",
    "lemma  [ lem : claudio ] then ensures that , since @xmath186 has a right adjoint , so does @xmath469 .",
    "thus @xmath468 is a ccu .",
    "if @xmath36 is a fibration , @xmath2 is an object of @xmath17 , and @xmath129 is @xmath473 , then the comprehension functor for @xmath468  i.e. , for @xmath423  maps an object @xmath453 to @xmath474 . combining lemma  [ lem : pb - pres ] and the fact that change of base preserves bifibrations",
    ", we have :    [ lem : coblwfib ] let @xmath0 be a lawvere category and @xmath133 be a fibration . then @xmath468  i.e. , @xmath423",
    " is a lawvere category .",
    "[ thm : iinda ] let @xmath36 be a lawvere category , let @xmath2 be an object of @xmath17 , and let @xmath475 be a functor whose initial algebra has carrier @xmath4 .",
    "then there exists a sound induction rule for @xmath476 in @xmath423 .",
    "we can use theorem  [ thm : iinda ] to derive a sound induction rule for the indexed containers of morris and altenkirch  @xcite .",
    "[ ex : indind ] if @xmath2 is a set , then the _ category of @xmath2-indexed sets _ is the fibre @xmath477 .",
    "@xmath2-indexed set _ is thus a function @xmath478 , and a morphism @xmath9 from @xmath38 to @xmath479 , written @xmath480 , is a function of type @xmath481 .",
    "morris and altenkirch denote this category @xmath482 and define an",
    "_ @xmath2-indexed container _ to be a pair @xmath483 with @xmath484 and @xmath485 .",
    "an @xmath2-indexed container defines a functor @xmath486 : ( i { \\rightarrow}{\\mbox{set } } ) { \\rightarrow}i    { \\rightarrow}{\\mbox{set}}$ ] by @xmath486 x i = ( \\sigma s\\!:\\!si).\\ , p \\ ,",
    "i \\ , s { \\rightarrow}_{i }    x$ ] .",
    "thus , if @xmath487\\ , x \\ , i$ ] , then @xmath488 is of the form @xmath489 . if @xmath490 is a morphism of @xmath2-indexed sets , then @xmath486 g$ ] maps a pair @xmath489 to @xmath491 .",
    "if @xmath492 , then we can think of @xmath493 as a collection of operators that produce data of sort @xmath494 , and we can think of @xmath33 as assigning to every @xmath494 and every operator producing data of sort @xmath494 an @xmath2-indexed collection of positions in which data is stored .",
    "that is , @xmath495 is the set of positions associated with the operator @xmath496 where data of sort @xmath497 must be stored .",
    "this _ shapes and positions metaphor _ is also reflected in the functor associated with an indexed container , since we can think of @xmath486x    i$ ] as containing terms of sort @xmath494 produced by @xmath483 whose input data is drawn from @xmath38 .",
    "such a term consists of an operator @xmath496 producing data of sort @xmath494 and , for each position storing data of sort @xmath497 , an element of @xmath38 of sort @xmath497 .    the initial algebra of @xmath486 $ ] is denoted @xmath498 w_{s , p }    { \\rightarrow}_i w_{s , p}$ ] .",
    "since @xmath482 is equivalent to @xmath499 , we can use the results of this section to extend those of  @xcite by giving sound induction rules for data types of the form @xmath500 . a predicate over an @xmath2-indexed set @xmath38 is a function @xmath501 . to simplify notation ,",
    "this is written @xmath502 .",
    "the lifting @xmath503}$ ] of @xmath486 $ ] maps each @xmath502 to the predicate @xmath503}q : [ s , p]x { \\rightarrow}_i    { \\mbox{set}}$ ] defined by @xmath504 } \\ , q \\ , i \\ , ( s ,",
    "f ) = ( \\pi    j\\!:\\!i).\\ , ( \\pi p\\!:\\ ! p \\ , i \\ , s \\ ,",
    "\\ , q \\ , j \\ , ( f \\ , j \\ ,    p)$ ] .",
    "altogether , this gives the following sound induction rule for @xmath500 : @xmath505\\ , w_{s , p}\\ , i).\\ ,     ( ( \\pi j\\!:\\!i).\\,(\\pi p\\!:\\ ! p \\",
    ", i \\ , s \\ , j ) .",
    "\\ , q \\ , j ( f \\ , j \\ ,",
    "p ) { \\rightarrow}q \\ , i ( \\mathit{in } \\ ,",
    "i \\ , ( s , f ) ) ) )",
    "\\\\     \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;{\\rightarrow}(\\pi i\\!:\\!i).\\,(\\pi t\\!:\\ ! w_{s , p}\\ ; i).\\ , q \\ , i \\ , t \\end{array}\\ ] ]    while admittedly rather dense in its type - theoretic formulation , the above induction rule is conceptually clear .",
    "the premise says that , for any term @xmath506 in @xmath507 , we must be able to prove that a property @xmath508 holds at @xmath506 if @xmath303 is assumed to hold of all the immediate subterms of @xmath506 .",
    "the conclusion of the rule says that @xmath303 holds for all terms .",
    "of course this is what we naturally expect , and our point is precisely that we can _ derive it in a principled manner _ from the fibrational approach to induction rather than simply having to postulate that it is reasonable .",
    "we can instantiate the above induction rule for @xmath500 for the data type of untyped lambda terms from the beginning of this section .",
    "the resulting induction rule can not be derived using hermida and jacobs techniques because the data type of untyped lambda terms is not the initial algebra of a polynomial functor .",
    "the resulting rule is precisely what we expect . for any predicate @xmath509 :    @xmath510",
    "we now present our third contribution , namely sound coinduction rules for coinductive indexed types .",
    "examples of such types are infinitary versions of inductive indexed types , such as infinitary untyped lambda terms and interaction structures .",
    "following the approach of section  [ sec : indind ] , we consider indexing by slice categories in this section . in more detail , we show that for any relational qce over a base category @xmath17 and for any object @xmath2 of @xmath17 , change of base along @xmath511 yields a relational qce over @xmath1 .",
    "recall that if @xmath17 has products and @xmath242 is a bifibration that satisfies the beck - chevalley condition and has truth functor @xmath193 , then the equality functor @xmath290 for @xmath32 is given by @xmath512 .",
    "let @xmath513 be a relational qce , so that @xmath290 has a left adjoint @xmath303 .",
    "to define a relational qce over @xmath1 we must first see that @xmath1 has products .",
    "but the product of @xmath35 and @xmath117 in @xmath1 is determined by their pullback : if @xmath514 , @xmath515 , and @xmath516 give the pullback of @xmath35 and @xmath117 , then their product in @xmath1 is the morphism @xmath517 or , equivalently , @xmath518 .",
    "below , we write @xmath519 for the product of @xmath520 with itself in @xmath1 and @xmath521 for the domain of @xmath519 . now ,",
    "if @xmath17 has pullbacks , then we can construct the relations fibration @xmath522 from the pullback of @xmath423 along the product functor @xmath523 mapping @xmath35 to @xmath519 . concretely , an object of @xmath524 above @xmath460 is an object of @xmath450 above @xmath519 with respect to @xmath423 .",
    "this is , in turn , equivalent to an object of @xmath23 above @xmath521 with respect to @xmath32 .      in section  [ sec : indind ]",
    "we showed that if @xmath32 is a bifibration where @xmath17 has products , and @xmath32 has a truth functor @xmath193 , then for any object @xmath2 of @xmath17 , @xmath423 is a bifibration that has a truth functor whose action is also that of @xmath193 , and so is denoted @xmath193 as well . furthermore , we have just seen that if @xmath17 has pullbacks , then @xmath1 also has products .",
    "thus , by definition  [ def : eq - fun ] , @xmath423 has an equality functor @xmath525 . to define this functor concretely ,",
    "note that the component of the diagonal natural transformation @xmath526 at @xmath460 is the mediating morphism in the diagram below on the left .",
    "thus , @xmath525 maps an object @xmath527 of @xmath1 to the unique morphism above @xmath519 in the diagram on the right induced by the opcartesian morphism @xmath79 above @xmath528 : @xmath529_{id } \\ar@{.>}[rd]|{(\\delta / i)_f }    \\ar@/^1pc/[rrd]^{id}\\\\ & x_fx \\ar[d]_i \\ar[r]^j { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore } & \\ar[d]^f x &    & ki \\\\ & x \\ar[r]_f & i & kx \\ar[ru]^{kf } \\ar[r]_{m } &    \\sigma_{(\\delta / i)_f}kx \\ar@{.>}[u]_{eq_{u / i}f}}\\ ] ] note that if @xmath32 satisfies the beck - chevalley condition , so that opreindexing for @xmath32 defines a full and faithful functor , then the fact that the action of opreindexing for @xmath423 is the same as opreindexing for @xmath32 means that opreindexing for @xmath423 defines a full and faithful functor as well . since truth functors are always full and faithful",
    ", so is @xmath530 .      whereas defining the equality functor for @xmath423 was straightforward ,",
    "defining its quotient functor is actually tricky .",
    "to do so , for each object @xmath2 of @xmath17 , we we write @xmath531 for the fibration obtained as the instantiation of lemma  [ lem : slbif ] in which @xmath532 plays the role of @xmath3 and @xmath244 plays the role of @xmath32 . concretely ,",
    "the objects of @xmath533 above @xmath460 are morphisms @xmath534 , for some object @xmath33 of @xmath268 , such that @xmath535 .",
    "our first result identifies conditions under which @xmath536 is a qce .",
    "[ lem : lift - qce ] let @xmath36 be a fibration , let @xmath17 have pullbacks , let @xmath2 be an object of @xmath17 , and let @xmath247 be a relational qce . then @xmath536 is a qce .",
    "let @xmath537 and @xmath538 be the equality and quotient functors for @xmath32 , respectively .",
    "we construct a full and faithful functor @xmath539 such that @xmath540 , and a left adjoint @xmath541 for @xmath542 , as follows .",
    "take @xmath542 to be @xmath290 .",
    "then @xmath542 is full and faithful since @xmath290 is .",
    "moreover , for any @xmath520 , definition  [ def : eq - fun ] ensures that @xmath543 is above @xmath544 with respect to @xmath32 , so @xmath545 , and thus @xmath546 .",
    "finally , we define @xmath541 to map each object @xmath547 of @xmath548 to its transpose @xmath549 under the adjunction @xmath550 . that @xmath551 follows directly from @xmath550 .",
    "we can now define the quotient functor for @xmath552 using the functor @xmath541 from the proof of lemma  [ lem : lift - qce ] .",
    "the key step is to use lemma  [ lem : natadj ] to define an adjunction @xmath553 such that the following diagram commutes : @xmath554_{rel(u / i ) } \\ar@/^/[rr]^\\tau    \\ar@{}[rr]|\\bot & &      \\ar@/^/[ll]^\\sigma \\ar[ld]^{rel(u)/i } { rel({{\\mathcal e}})/eq\\ , i}\\\\ & { { { \\mathcal b}}/i } & } \\ ] ]    then if @xmath542 and @xmath541 are the functors witnessing the fact that @xmath536 is a qce , compositionality of adjoints ensures that @xmath555 and @xmath556 give equality and quotient functors for @xmath552 , respectively .    [",
    "lem : tausigma ] the above adjunction @xmath557 holds .    in order to prove this lemma , we first instantiate lemma  [ lem : slbif ] , with @xmath290 playing the role of @xmath3 and @xmath248 playing the role of @xmath136 , to obtain the fibration @xmath558",
    "we then have the following three changes of base : @xmath559_{rel(u / i)}\\ar[r]{\\save*!/dr-1.8pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e}}/ki      \\ar[d]_{u / i } \\ar[r ] { \\save*!/dr-1.8pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e}}/eq\\,i \\ar[d]|{u / eq } & \\ar[l ]      rel({{\\mathcal e}})/eq\\,i \\ar[d]^{rel(u)/i } { \\save*!/dl-1.8pc / dl:(-1,1)@^{|-}\\restore}\\\\ b / i \\ar[r]_{\\delta / i } &      b / i\\ar[r]_{\\delta_i\\circ\\_}&b / i{\\!\\times\\!}i & \\ar[l]^{\\_\\times\\ _ } b / i}\\ ] ] here , the functor @xmath560 maps @xmath561 to @xmath562 , and @xmath563 maps @xmath35 to @xmath564 .",
    "the square on the left is a pullback square by definition of @xmath552 , and the one on the right is a pullback square by direct calculation . to see that the middle square is a pullback square ,",
    "first observe that since every morphism @xmath565 is a mono , lemma  [ lem : bcmono ] ensures that each opcartesian morphism @xmath566 is also cartesian . for any @xmath561 ,",
    "the fibre above @xmath35 of the pullback of @xmath567 along @xmath566 consists of all morphisms of the form @xmath568 such that @xmath569 .",
    "similarly , the fibre of @xmath423 above @xmath35 consists of all morphisms of the form @xmath570 such that @xmath571 .",
    "the universal property of @xmath572 considered as a cartesian morphism ensures that these two fibres are isomorphic , and thus that @xmath423 is indeed the pullback of @xmath567 along @xmath573 .",
    "now , let @xmath460 be a morphism in @xmath17 , and let @xmath494 and @xmath497 be the projections for the pullback square defining @xmath574 .",
    "the universal property of the product @xmath246 ensures the existence of a morphism @xmath575 such that @xmath576 and @xmath577 .",
    "moreover , by the universal property of the pullback of @xmath35 along itself , @xmath578 is a mono . in fact , it is easy to check that there is a natural transformation @xmath579 whose component at any @xmath35 is given by @xmath578 .",
    "finally , @xmath580 extends to a natural transformation @xmath581 .",
    "indeed , for any @xmath35 , the fact that @xmath582 for @xmath583 ensures that the diagram @xmath584_{f^2 } \\ar[r]^{v_f } & x\\times x \\ar[d]^{f\\times f}\\\\      i \\ar[r]_{\\delta_i } & i\\times i}\\ ] ] commutes by the universal property of the product @xmath585 . by lemma  [ lem : natadj ]",
    ", @xmath191 induces the desired adjunction .",
    "recall that our candidate for the quotient functor @xmath586 for @xmath552 is @xmath556 . to see that @xmath587 , we need only verify that @xmath525 is @xmath555 .",
    "it is routine to check that @xmath588 , from which @xmath589 follows .",
    "we therefore have that @xmath552 , together with @xmath525 and @xmath586 as defined above , form a relational qce .",
    "thus , by theorem  [ thm : coinda ] , we have    [ thm : icoinda ] let @xmath590 , where @xmath17 has products and pullbacks , be a bifibration that satisfies the beck - chevalley condition .",
    "suppose @xmath32 has a truth functor .",
    "let @xmath2 be an object of @xmath17 and @xmath591 be a functor whose final coalgebra has carrier @xmath10 .",
    "then there exists a sound coinduction rule for @xmath10 in @xmath423 .",
    "we can use the results of this section to give a sound coinduction rule for final coalgebras of indexed containers that is dual to the sound induction rule of example  [ ex : indind ] .",
    "[ ex : coindcont ] let @xmath483 be an @xmath2-indexed container with final coalgebra @xmath592m_{s , p}$ ] .",
    "a relation above an @xmath2-indexed set @xmath478 is an @xmath2-indexed family of relations @xmath593 on @xmath594 .",
    "the relational lifting of @xmath486 $ ] maps a relation @xmath371 above an @xmath2-indexed set @xmath38 to the relation @xmath595 above the @xmath2-indexed set @xmath486x$ ] that relates @xmath596x i$ ] and @xmath597x i$ ] iff @xmath598 and , for all @xmath599 and @xmath600 , @xmath601 is related to @xmath602 in the least equivalence relation containing @xmath603 .",
    "this gives the following notion of bisimulation for @xmath486$]-coalgebras @xmath604x$ ] .",
    "let @xmath605 and @xmath606 .",
    "then if @xmath607 , then @xmath608 iff @xmath609 and , for all @xmath599 and @xmath610 , we have that @xmath611 . as in example",
    "[ ex : coind ] , the coinduction rule thus asserts that any two bisimilar states have the same interpretation in the final coalgebra .    stepping back",
    ", we see that the above coinduction rule is as expected . to understand it , we think of a term @xmath612 as being part of a transition system whose terms are the subterms of @xmath488 ( including @xmath488 itself ) , and suppose there is a transition from every subterm to each of the immediate subterms of that term .",
    "then two terms are bisimilar iff they share the same root operator and each of their subterms are bisimilar .",
    "the point is , of course , that the fibrational approach to coinduction derives the rule in a principled manner rather than simply having to postulate it .",
    "in section  [ sec : indind ] we saw how the fibrational approach to induction can be instantiated to derive sound induction rules for inductive indexed types when the indexing is given using slice categories .",
    "although it provides a good example of how to exploit the abstract power of fibrations , this instantiation suffers from two limitations :    @xmath19    first , the instantiation successfully treats indexing that is modelled by slice categories , but neither it nor its abstract generalisation can successfully handle more general forms of indexing . indeed , in section  [ sec :",
    "indind ] , the fact that the comprehension functor @xmath340 is a fibration was critical to showing that @xmath423 is a lawvere category , but the abstract generalisation of this result does not hold because , in general , a comprehension functor need not be a fibration . to handle general forms of indexing ,",
    "we therefore need a genuinely new idea .",
    "secondly , in section  [ sec : indind ] we handle @xmath2-indexed types by deriving from a lawvere category @xmath0 a lawvere category @xmath423 with base category @xmath1 .",
    "but this is inelegant because it requires the construction of a new lawvere category for every possible index @xmath2 , and because the uniformity over @xmath2 that connects the different fibrations @xmath423 is completely ignored . indeed ,",
    "if we think of fibrations as modelling logics over types , then the results of section  [ sec : indind ] ostensibly choose entirely different logics for different indices .",
    "a better approach would formalise the uniformity of the fibrations @xmath423 over the indices @xmath2 .    in this section",
    "we extend the work of section  [ sec : indind ] to derive sound induction rules for general indexed types .",
    "this is accomplished by adding an abstraction layer that models the way types are indexed , and thus allows us to treat indexing modelled by structures other than slice categories .",
    "more specifically , we consider indexed types to be given by a second fibration @xmath613 , so that the objects of @xmath17 are types indexed by the objects of @xmath427 .",
    "of course , the logical layer still forms a fibration @xmath119 over types , so we get the following basic picture , which captures the move from a single fibration @xmath32 to a fibration @xmath32 above a fibration @xmath614 : @xmath615_{ru } \\ar[rr]^{u }      & & \\ar[ld]^r { { \\mathcal b}}\\\\ & { { \\mathcal a } } & } \\ ] ]    note that @xmath616 is a fibration because the composition of two fibrations is again a fibration . taking @xmath617 to be the category with one object and one morphism",
    ", the sound induction rules in the unindexed setting will be recoverable from the sound induction rules for general indexed types that we develop in this section ; see example  [ ex : sec2 ] below .",
    "the sound induction rules in the indexed setting of section  [ sec : indind ] will similarly be recoverable by taking @xmath614 to be the codomain fibration ; see lemma  [ lem : canlwfiba ] .",
    "in addition , taking @xmath614 to be the families fibration , we will be able to derive the sound induction rules for carriers of initial algebras of indexed containers directly , rather than deriving them indirectly , as we did in example  [ ex : indind ] , using the equivalence of the families fibration and the codomain fibration .",
    "let @xmath21 and @xmath618 be two fibrations . then an _ inductive indexed type _ with index @xmath619 , where @xmath619 is an object of @xmath427 , is the carrier @xmath4 of the initial algebra of an endofunctor @xmath620 , where @xmath621 is the fibre of @xmath17 above @xmath619 . to derive a sound induction rule for @xmath4 using theorem  [ thm : inda ] , we will ultimately need a lawvere category with base @xmath621 ; indeed , by the discussion immediately following lemma  [ lem : deflifting ] , this will ensure the existence of a lifting of @xmath3 to the total category of that lawvere category .",
    "so , what might we take as that lawvere category ?",
    "since @xmath3 has domain @xmath621 rather than all of @xmath17 , we can not expect @xmath3 to lift to the whole of @xmath23 .",
    "on the other hand , @xmath32 does restrict to a fibration @xmath622 , where @xmath623 is the fibre of @xmath616 above @xmath619 .",
    "as we will see in corollary  [ cor : iind ] below , @xmath624 is precisely the lawvere category we seek .",
    "we begin by establishing the properties of @xmath624 that we will need .",
    "the following lemma uses change of base to deduce several of them .",
    "[ lem : fibredfib ] let @xmath119 and @xmath613 be two fibrations . for any object @xmath619 in @xmath427 ,",
    "the fibration @xmath32 restricts to a fibration @xmath625 , where @xmath623 is the fibre above @xmath619 of the fibration @xmath626 .",
    "similarly , if @xmath32 is an opfibration or a bifibration , then so is @xmath624 . finally , if @xmath32 has a truth functor , then so does @xmath624 .",
    "the fibration @xmath627 arises by change of base of @xmath32 along the inclusion functor @xmath628 : @xmath629_{u_a}\\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e}}\\ar[d]^u\\\\     { { \\mathcal b}}_a\\ar[r]_{i_a } & { { \\mathcal b}}}\\ ] ] pulling back an opfibration along a functor produces an opfibration , so @xmath624 is an opfibration if @xmath32 is . as a result",
    ", @xmath624 is a bifibration if @xmath32 is . moreover , change of base preserves truth functors , so @xmath624 has a truth functor if @xmath32 does .",
    "indeed , the truth functor for @xmath624 is just the restriction of the truth functor for @xmath32 to @xmath621 .",
    "we write @xmath630 for the truth functor for @xmath624 .",
    "note that while a truth functor always restricts to a subfibration @xmath624 , the existence of a truth functor @xmath630 for every @xmath624 does not necessarily imply that @xmath32 itself has a truth functor .",
    "for this to be the case , reindexing must preserve truth functors from one subfibration to another .",
    "of course , if @xmath32 is a bifibration , then reindexing is a right adjoint , so it preserves terminal objects , and in this case the individual truth functors @xmath630 actually do collectively define a truth functor for @xmath32 .",
    "our interest in the above results is that they show that the basic structure of a logic ( reindexing , opreindexing , and truth functors ) over a fibration of indexed types restricts to a corresponding logic over types with a specific index .",
    "we may therefore consider truth - preserving ( i.e. , @xmath630-preserving ) liftings of functors @xmath631 , and ask when such a lifting defines a sound induction rule for @xmath4 . from theorem",
    "[ thm : ind ] we know the answer : this occurs when the fibration @xmath622 is a ccu .",
    "but now we face a choice .",
    "is it enough to simply ask that , for every object @xmath619 of @xmath427 , @xmath624 is a ccu ? or should we require that these different ccus , when taken collectively , ensure that @xmath32 is a ccu ?    while the former choice is indeed possible , we believe that the latter choice better highlights the uniformity connecting the different fibrations @xmath624 .",
    "in fact , we have already implicitly made the latter choice when we started with a single fibration @xmath32 and constructed from it the collection of individual fibrations @xmath624 .",
    "unfortunately , asking that each fibration @xmath624 is a ccu does not ensure that @xmath32 itself is a ccu . on the other hand",
    ", we can not simply require @xmath32 to be a ccu either , since that is not enough to guarantee that each @xmath624 is a ccu .",
    "but if we require @xmath32 to be a fibred ccu in the sense of definition  4.4.5 of @xcite , then @xmath32 will indeed be a ccu whose restriction to each subfibre @xmath624 is also a ccu .",
    "we have :    [ def : ccua ] let @xmath119 and @xmath613 be two fibrations , and let @xmath199 the truth functor for @xmath32 .",
    "we say that @xmath32 is a _ fibred ccu above @xmath614 _ if @xmath193 has a fibred right adjoint @xmath632 : @xmath615_{r u } \\ar@/^/[rr]^{\\{-\\ } }      \\ar@{}[rr]|\\top & & \\ar@/^/[ll]^k \\ar[ld]^r { { \\mathcal b}}\\\\ & { { \\mathcal a } } & } \\ ] ]    that @xmath633 is a fibred functor follows from the fact that @xmath634 is also a fibred functor ( see lemma  1.8.8 of  @xcite ) .",
    "a first consequence of definition  [ def : ccua ] is that , if a fibration @xmath119 is a fibred ccu above @xmath614 then @xmath32 is a ccu .",
    "furthermore , from lemma  [ lem : fibadj ] we have that if @xmath32 is a fibred ccu above @xmath614 , then each fibration @xmath624 is a ccu .",
    "in fact , we have the following correspondence :    [ lem : ccuafibadj ] let @xmath119 and @xmath613 be fibrations .",
    "the fibration @xmath32 is a fibred ccu above @xmath614 with fibred adjunction @xmath232 iff @xmath32 is a ccu with truth functor @xmath199 and comprehension functor @xmath635 and , for each @xmath619 in @xmath427 , the fibration @xmath625 is a ccu with comprehension functor @xmath636 given by restricting @xmath637 to @xmath623 .",
    "let @xmath32 be a ccu with truth functor @xmath199 and comprehension functor @xmath635 .",
    "further , suppose that , for every @xmath619 in @xmath427 , the fibration @xmath625 is a ccu whose comprehension functor @xmath636 is given by restricting @xmath637 to @xmath623 .",
    "then , by lemma  [ lem : adjandcart ] , we have that @xmath637 is fibred from @xmath626 to @xmath614 .",
    "moreover , since the adjunction @xmath638 restricts to the adjunctions @xmath639 , the unit of @xmath638 is vertical with respect to @xmath614 .",
    "the other direction of the equivalence is straightforward .",
    "we have thus shown that a fibred ccu @xmath32 above @xmath614 is just the right structure for deriving sound induction rules when indexing of types is described by @xmath614 .",
    "we wanted a structure to guarantee that each @xmath624 is a ccu and that these individual ccus collectively ensure that @xmath32 is also a ccu .",
    "lem : ccuafibadj ] shows that a fibred ccu above @xmath614 guarantees exactly this  no more , no less .",
    "definition  [ def : ccua ] straightforwardly extends to lawvere categories as follows :    [ def : lwfiba ] let @xmath119 and @xmath613 be fibrations .",
    "we say that @xmath32 is a _ fibred lawvere category above @xmath614 _ if @xmath32 is a fibred ccu above @xmath614 and @xmath32 is a bifibration .",
    "the next two corollaries are immediate .",
    "[ cor : lwfaadj ] let @xmath119 and @xmath613 be fibrations . then @xmath32 is a fibred lawvere category above @xmath614 iff @xmath32 is a lawvere category and , for every @xmath619 in @xmath427 , @xmath640 is a lawvere category whose unit and comprehension are given by the restrictions of the unit and comprehension , respectively , of @xmath32 to @xmath623 .",
    "[ cor : iind ] let @xmath119 be a fibred lawvere category above @xmath613",
    ". for any object @xmath619 of @xmath427 and functor @xmath641 , any @xmath630-preserving lifting @xmath642 of @xmath3 defines a sound induction rule for @xmath4 .",
    "in particular , the canonical @xmath630-preserving lifting from section  [ sec : ind ] defines a sound induction rule for @xmath4 .",
    "our first example shows that fibred induction is applicable in situations in which indexed induction is not .",
    "consider the mutually recursive data type    @xmath412{@{}c@ { } }      \\begin{array}[t]{lllll }              \\end{array}\\\\    \\hline        zero : evens     \\end{array } } } \\hspace{1 cm } { \\ensuremath {    \\begin{array}[t]{@{}c@ { } }      \\begin{array}[t]{lllll }          n : odds      \\end{array}\\\\    \\hline        evensucc \\ ;",
    "n : evens    \\end{array } } } \\hspace{1 cm } { \\ensuremath {    \\begin{array}[t]{@{}c@ { } }      \\begin{array}[t]{lllll }          n : evens       \\end{array}\\\\    \\hline        oddsucc \\ ;",
    "n : odds     \\end{array}}}\\ ] ]    if we model types in a category @xmath17 , then we can model the @xmath643-indexed data type of @xmath644 and @xmath645 using the initial algebra of the functor @xmath646 defined by @xmath647",
    ". however , we may wish to index data types by sets other than @xmath643 .",
    "the codomain fibration @xmath648 defines a fibred lawvere category over the families fibration .",
    "we therefore have the following induction rule in the families fibration for any predicates @xmath649 and @xmath650 :    @xmath651    we can also see the induction rule of theorem  [ thm : inda ] as an instance of fibred induction :    [ ex : sec2 ] let @xmath0 be a lawvere category . if @xmath376 is the category with one object and one morphism , then @xmath32 is a fibred lawvere category above the fibration @xmath652 . moreover , the treatment of induction from section  [ sec : ind ] is equivalent to the treatment of induction for this fibred lawvere category .",
    "and we can see indexed induction as an instance of fibred induction :    [ lem : canlwfiba ] let @xmath119 be a lawvere category .",
    "the fibration @xmath653 obtained by the change of base @xmath654_q { { \\mathcal e } } ' \\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e}}\\ar[d]^u\\\\ { { \\mathcal b}}^\\to \\ar[r]_{dom } & { { \\mathcal b}}}\\ ] ] is a fibred lawvere category above the codomain fibration and , for any @xmath2 in @xmath17 , @xmath655 .",
    "consider the following setting : @xmath654_q { { \\mathcal e } } ' \\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e}}\\ar[d]^u\\\\ \\ar[d]_{cod } { { \\mathcal b}}^\\to      \\ar[r]_{dom } & { { \\mathcal b}}\\\\ { { \\mathcal b}}}\\ ] ] by lemma  [ lem : coblwfib ] , @xmath656 is a lawvere category because it arises by change of base along the fibration @xmath657 .",
    "moreover , for any object @xmath2 of @xmath17 , the fibration @xmath658 can be obtained by the change of base @xmath654_{q_i } { { \\mathcal e}}_i \\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e}}'\\ar[d]^q \\\\",
    "{ { \\mathcal b}}_i = { { \\mathcal b}}/i \\ar[r]_{i_i } & { { \\mathcal b}}^\\to    } \\ ] ]    where @xmath659 is the inclusion functor .",
    "thus @xmath658 arises as the pullback of @xmath32 along the composition of @xmath660 and @xmath661 . but",
    "this composition is simply @xmath511 , so it is clearly a fibration .",
    "thus , @xmath658 is a lawvere category , and @xmath656 is itself a fibred lawvere category above the codomain fibration .",
    "finally , @xmath655 by construction .",
    "in this section we extend the methodology of section  [ sec : fibind ] to give sound coinduction rules for coinductive indexed types in the case when the indexing is not modelled by slice categories . as in section",
    "[ sec : fibind ] , we consider a fibration @xmath662 , where we think of the objects of @xmath17 as being indexed by the objects of @xmath427 , and a fibration @xmath36 that we think of as a logic over @xmath17 .",
    "our aim is to derive sound coinduction rules for final coalgebras of functors @xmath620 , where @xmath619 is any object of @xmath427 .",
    "our experience from section  [ sec : coind ] suggests that a minimal requirement for deriving a sound coinduction rule for a functor @xmath620 is that the fibration @xmath624 is a qce . as in section",
    "[ sec : fibind ] , we want to highlight the uniformity connecting the different fibrations @xmath624 but , unfortunately , requiring that each fibration @xmath624 is a qce does not automatically imply that @xmath32 is a qce . on the other hand , if we define a _ ( full ) section _ of a functor @xmath663 to be a ( resp . ,",
    "full and faithful ) functor @xmath664 such that @xmath665 then , for fibrations @xmath119 and @xmath613 , a ( full ) section @xmath300 of @xmath32 straightforwardly restricts to a ( resp . ,",
    "full ) section @xmath666 of @xmath624 for any object @xmath619 of @xmath427 .",
    "then , by contrast with the situation in the inductive case , requiring that each fibration @xmath624 is a qce with section @xmath667 actually does ensure that @xmath32 is a qce with section @xmath302 , provided @xmath302 preserves cartesian morphisms .",
    "indeed , observing that the notion of a cartesian morphism and the notion of a fibre both make sense for arbitrary functors whether or not they are fibrations , and extending our notation for fibres of fibrations to fibres of functors , we have the following :    [ lem : weakfibadj ] let @xmath613 be a fibration , and let @xmath668 and @xmath669 be functors such that @xmath670 .",
    "the functor @xmath671 has a left adjoint @xmath672 with vertical unit ( or , equivalently , counit ) iff @xmath671 preserves cartesian morphisms and , for each object @xmath619 in @xmath427 , the restriction @xmath673 of @xmath671 has a left adjoint @xmath674 .",
    "suppose @xmath671 preserves cartesian morphisms , let @xmath675 be a collection of left adjoints to the restrictions @xmath673 of @xmath671 , and let @xmath676 be the unit of @xmath677 .",
    "we will prove that , for each @xmath619 in @xmath427 and @xmath371 in @xmath623 , the morphism @xmath678 is universal from @xmath371 to @xmath671 ( and not just to @xmath679 ) . by part ( ii ) of theorem  2 of chapter 4 of  @xcite",
    ", this gives an adjunction @xmath680 .",
    "the unit of this adjunction is vertical because it comprises the various units @xmath676 .    to this end , consider a morphism @xmath681 in @xmath302 above @xmath682 in @xmath427 .",
    "then @xmath68 is above @xmath683 , and so there is a cartesian morphism @xmath684 above @xmath9 with respect to @xmath614 . because @xmath671 preserves cartesian morphisms , we know that @xmath685 is cartesian above @xmath9 with respect to @xmath656 .",
    "thus @xmath686 for a unique vertical morphism @xmath687 with respect to @xmath656 .",
    "now , since @xmath178 is in @xmath623 , we can use the universal property of @xmath688 to deduce a unique morphism @xmath689 in @xmath621 such that @xmath690 .",
    "therefore , we have a unique morphism @xmath691 such that @xmath692 .",
    "conversely , suppose @xmath303 is left adjoint to @xmath671 with vertical unit .",
    "then @xmath671 preserves cartesian morphisms by lemma  [ lem : adjandcart ] , and the adjunction @xmath680 restricts to adjunctions @xmath677 because the unit of @xmath693 is vertical and @xmath670",
    ".    we can now give the central definitions we need to state our sound coinduction rules for coinductive indexed types .",
    "[ def : qcea ] let @xmath119 and @xmath613 be two fibrations , and let @xmath300 a full section of @xmath32 .",
    "we say that @xmath32 is a _ qce above @xmath614 _ if @xmath302 has a left adjoint @xmath672 and the adjunction @xmath694 is fibred above @xmath427 : @xmath695_{r u } \\ar@/_/[rr]_q      \\ar@{}[rr]|\\top & & \\ar@/_/[ll]_e \\ar[ld]^r { { \\mathcal b}}\\\\ & { { \\mathcal a } } & } \\ ] ]    note that , in this case , both @xmath302 and @xmath303 are necessarily fibred .",
    "weak qce above @xmath614 _ is similar to a qce above @xmath614 , except that the left adjoint to @xmath302 need not be fibred ( although @xmath302 itself must still be ) .    with this definition in place , we have the following analogue of corollary  [ cor : lwfaadj ] :    let @xmath0 and @xmath662 be fibrations . then @xmath32 is a weak qce above @xmath614 iff @xmath32 is a qce and , for any object @xmath619 of @xmath427 , @xmath622 is a qce whose full section and quotient functors are given by the restrictions of the full section and quotient functors , respectively , of @xmath32 to @xmath623 .    if @xmath32 is a weak qce above @xmath614 , then the fact that @xmath32 and the fibrations @xmath624 are qces is straightforward .",
    "for the other direction , we observe that the unit ( equivalently , counit ) of @xmath696 is vertical .",
    "lemma  [ lem : adjandcart ] therefore guarantees that @xmath302 preserves cartesian morphisms , i.e. , is fibred .",
    "[ cor : icoind ] let @xmath119 be a weak qce above @xmath613 .",
    "for any object @xmath619 of @xmath427 and functor @xmath641 , any @xmath667-preserving lifting @xmath697 of @xmath3 defines a sound coinduction rule for @xmath10 .",
    "in particular , the canonical @xmath667-preserving lifting from section  [ sec : coind ] defines a sound coinduction rule for @xmath698 .    we can see theorem  [ thm : coinda ] as a special case of corollary  [ cor : icoind ] .",
    "[ ex : sec3 ] let @xmath0 be a relational qce .",
    "if @xmath376 is the category with one object and one morphism , then @xmath32 is a weak qce above the fibration @xmath652 .",
    "moreover , the treatment of coinduction from section  [ sec : coind ] is equivalent to the treatment of coinduction for this weak qce above @xmath614 .",
    "we can also see theorem  [ thm : icoinda ] as a special case of corollary  [ cor : icoind ] .",
    "this entails constructing , from the data assumed in lemma  [ lem : lift - qce ] , a weak qce above the codomain fibration @xmath69 . to do this",
    ", we first define an analogue of a relational qce in the setting where we are working above a fibration @xmath614 .",
    "we have the following definition :    [ def : relqceabover ] let @xmath119 be a bifibration with truth functor @xmath199 , let @xmath613 be a fibration , and assume that @xmath614 has fibred cartesian products , i.e. , products in the fibres that are preserved by reindexing .",
    "let @xmath699 be the fibred diagonal functor mapping each object @xmath38 in @xmath621 to the product with itself in @xmath621 .",
    "then , the _ relations fibration above @xmath614 _ is defined to be the fibration @xmath700 above @xmath614 that is obtained by change of base of @xmath32 along @xmath701 . if @xmath702 is the diagonal natural transformation for @xmath701 , then the _ equality functor for @xmath32 above @xmath614 _",
    "is defined to be the functor @xmath703 that maps an object @xmath38 of @xmath17 to @xmath704 .",
    "furthermore , if @xmath705 has a left adjoint @xmath706 , then @xmath706 is called the _ quotient functor for @xmath32 above @xmath614_. a _ relational qce above @xmath614 _ is a qce above @xmath614 obtained via this construction .",
    "a _ weak relational qce above @xmath614 _ is similar to a relational qce above @xmath614 , except that the left adjoint to the fibred equality functor need not be fibred .",
    "the main difficulty in constructing a weak relational qce @xmath32 above a fibration @xmath614 is proving that the equality functor for @xmath32 is fibred . if @xmath17 has pullbacks and @xmath707 is the codomain fibration , then @xmath614 has fibred products given by pullbacks . in this case",
    ", we write @xmath708 for the functor mapping an object @xmath35 in @xmath709 to the product @xmath519 of @xmath35 with itself in the fibre @xmath709 .",
    "we denote the diagonal natural transformation for @xmath710 by @xmath711 .",
    "[ lem : carts ] let @xmath0 be a bifibration with a truth functor , and suppose @xmath32 satisfies the beck - chevalley condition . furthermore , assume that @xmath17 has products and pullbacks .",
    "let @xmath712 be obtained from @xmath32 by change of base along the fibration @xmath340 , and let @xmath713 be obtained from @xmath129 by change of base along @xmath714 : @xmath715_{rel(u ' ) } \\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore}&\\ar[d]_{u ' } { { \\mathcal e } } ' \\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e}}\\ar[d]^u\\\\ { { \\mathcal b}}^\\to \\ar[r]_{\\delta^\\to } & { { \\mathcal b}}^\\to \\ar[r]_{dom } &    { { \\mathcal b}}\\\\ } \\ ] ] finally , let @xmath716 be the functor that maps an object @xmath717 of @xmath167 to the object @xmath718 of @xmath719 .",
    "then @xmath720 is a fibred functor from @xmath721 to @xmath722 .",
    "let @xmath723 be an object of @xmath167 , let @xmath724 be a morphism of @xmath17 , and consider the pullback @xmath725 of @xmath9 along @xmath35 .",
    "then the cartesian morphism above @xmath35 with codomain @xmath726 is the morphism @xmath727 in @xmath167 .",
    "we must show that the morphism @xmath728 is cartesian .",
    "we begin by considering the morphism @xmath729 in @xmath730 .",
    "the fact that @xmath731 is a pullback means that @xmath732 is cartesian . because @xmath733 is fibred , we know that @xmath734 is cartesian .",
    "thus , if @xmath735 , then @xmath736 is the pullback of @xmath737 along @xmath35 .",
    "from part b of exercise 8 on page 72 of  @xcite , together with the facts that @xmath738 and @xmath739 are pullbacks , we have that @xmath740 is the pullback of @xmath741 along @xmath191 .",
    "the beck - chevalley condition thus ensures that @xmath742 is isomorphic to @xmath743 . letting @xmath303 stand for @xmath744 , we therefore have that @xmath745 is @xmath746 . since @xmath747 is cartesian with respect to @xmath32 by definition , and since @xmath748 is cartesian with respect to @xmath69 , we have that @xmath749 is cartesian with respect to @xmath750 , as required .",
    "[ lem : wqcer ] let @xmath36 be a bifibration such that the beck - chevalley condition holds and @xmath17 has pullbacks .",
    "let @xmath751 be the relational qce derived from @xmath32 , with equality functor @xmath752 and quotient functor @xmath753 .",
    "then the bifibration @xmath754 obtained from the following change of base @xmath654_{rel(u ' ) } rel({{\\mathcal e } } ' ) \\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e } } ' \\ar[d]^{u'}\\\\      { { \\mathcal b}}^\\to \\ar[r]_{\\delta^\\to } & { { \\mathcal b}}^\\to } \\ ] ] is a weak qce above @xmath755 . in addition , for any @xmath2 in @xmath17 , @xmath756 .",
    "we have the following situation : @xmath757_{rel(u ' ) } \\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore}&\\ar[d]_{u ' } { { \\mathcal e } } ' \\ar[r ] { \\save*!/dr-1.2pc / dr:(-1,1)@^{|-}\\restore } & { { \\mathcal e}}\\ar[d]^u\\\\        { { \\mathcal b}}^\\to \\ar[rd]_{cod } \\ar[r]_{\\delta^\\to } & \\ar[d]_{cod } { { \\mathcal b}}^\\to      \\ar[r]_{dom } & { { \\mathcal b}}\\\\       & { { \\mathcal b}}}\\ ] ] let @xmath2 be an object of @xmath17 .",
    "first , by the same reasoning as in the proof of lemma  [ lem : canlwfiba ] we have that @xmath758 .",
    "now , note that if @xmath759 is the inclusion functor , then @xmath760 .",
    "thus , @xmath761 is obtained by change of base of @xmath423 along the functor @xmath762 , i.e. , the fibrations @xmath761 and @xmath552 coincide .",
    "moreover , the equality functor @xmath763 is defined by @xmath764 , where @xmath765 is the truth functor for @xmath129 .",
    "then @xmath766 restricts to the equality functor @xmath525 since @xmath767 is the restriction of @xmath768 to the corresponding fibres .",
    "this ensures that the equality functors for @xmath761 and @xmath552 coincide . finally ,",
    "because adjoints are defined up to isomorphism , the quotient functors for @xmath761 and @xmath552 coincide .",
    "putting this all together , we have that @xmath761 and @xmath552 are in fact the same qce .",
    "now , each restriction @xmath769 of @xmath766 has a left adjoint @xmath770 .",
    "moreover , @xmath766 preserves cartesian morphisms because @xmath765 preserves cartesian morphisms by construction , and lemma  [ lem : carts ] ensures that @xmath771 preserves cartesian morphisms . by lemma  [ lem : weakfibadj ]",
    ", we have that @xmath772 is a left adjoint to @xmath766 , and thus that @xmath773 is a weak qce above @xmath69 .",
    "the coinduction rule for the mutually recursive data type of _ odds _ and _ evens _ in the families fibration shows that fibred coinduction is applicable in situations where indexed coinduction is not .",
    "in this paper , we have extended the fibrational approach to induction and coinduction pioneered by hermida and jacobs , and further developed by the current authors , in three key directions : we have given sound coinduction rules for all ( unindexed ) coinductive types , and we have extended our results from the unindexed setting to the indexed one to derive sound induction and coinduction rules for all inductive and coinductive indexed types .",
    "we derived our rules for indexed types first in the case when indexing is modelled by the codomain fibration , and then in the case when it is modelled by an arbitrary fibration .",
    "the work of hermida and jacobs is most closely related to ours , but there is , of course , a large body of work on induction and coinduction in a broader setting . in dependent type theory , for example , data types are usually presented along with elimination rules that are exactly induction rules . along these lines ,",
    "@xcite has heavily influenced the development of induction in coq .",
    "another important strand of related work concerns inductive families and their induction rules  @xcite . on the coinductive side ,",
    "papers such as  @xcite have had immense impact in bringing bisimulation into the mainstream of theoretical computer science .",
    "there are several directions for future work .",
    "first , we would like to explore more applications of the results in sections  [ sec : fibind ] and  [ sec : fibcoind ] .",
    "more generally , we would like to exploit the predictive power of our theory to provide induction and coinduction rules for advanced data types  such as inductive recursive types  for which these rules are not discernible by sheer intuition .",
    "in such circumstances , our generic fibrational approach should provide rules whose use is justified by their soundness proofs . in a different direction , we would like to see our induction and coinduction rules for advanced data types incorporated into implementations such as agda and coq ."
  ],
  "abstract_text": [
    "<S> this paper extends the fibrational approach to induction and coinduction pioneered by hermida and jacobs , and developed by the current authors , in two key directions . </S>",
    "<S> first , we present a dual to the sound induction rule for inductive types that we developed previously . </S>",
    "<S> that is , we present a sound coinduction rule for any data type arising as the carrier of the final coalgebra of a functor , thus relaxing hermida and jacobs restriction to polynomial functors . to achieve this </S>",
    "<S> we introduce the notion of a _ quotient category with equality _ ( qce ) that i ) abstracts the standard notion of a fibration of relations constructed from a given fibration ; and ii ) plays a role in the theory of coinduction dual to that played by a comprehension category with unit ( ccu ) in the theory of induction . </S>",
    "<S> secondly , we show that inductive and coinductive indexed types also admit sound induction and coinduction rules . </S>",
    "<S> indexed data types often arise as carriers of initial algebras and final coalgebras of functors on slice categories , so we give sufficient conditions under which we can construct , from a ccu ( qce ) @xmath0 , a fibration with base @xmath1 that models indexing by @xmath2 and is also a ccu ( resp . , </S>",
    "<S> qce ) . </S>",
    "<S> we finish the paper by considering the more general case of sound induction and coinduction rules for indexed data types when the indexing is itself given by a fibration . </S>"
  ]
}