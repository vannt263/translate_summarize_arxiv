{
  "article_text": [
    "according to kleene s theorem @xcite , regular expressions and finite automata are two equivalent representations of regular languages .",
    "the conversion from a representation into the other one raised numerous research works . concerning the conversion of a regular expression into a finite automaton we can cite the following references : @xcite , for which a common aim is to reduce the space and/or worst case time complexity of the result of the conversion . in this paper",
    "we are particularly interested by the implementation of conversion algorithms which are based on the notion of position , such as the five first ones in the above list .",
    "following @xcite , these algorithms are based on the the computation of the null , first , last and follow sets ( called glushkov functions ) associated with a linearized version of the expression .",
    "recently mignot @xcite considered a family of extended expressions called extended to multi - tilde - bar regular expressions ( emtbres ) and he showed that , under some restrictions , the glushkov functions can be defined for an emtbre ( see also @xcite ) . in this paper",
    "we present an algorithm which efficiently computes the glushkov functions of an unrestricted emtbre .",
    "our approach is based on a recursive definition of the language associated with an emtbre which enlightens the fact that worst case time complexity of the conversion of an emtbre into an automaton is related to the worst case time complexity of the computation of the null function .",
    "finally we show how to extend the -structure @xcite to emtbres , which allows us to apply to this family of extended expressions the efficient constructions based on this structure ( in particular the construction of the c - continuation automaton @xcite , the position automaton @xcite , the follow automaton @xcite and the equation automaton @xcite ) .",
    "the structure of the paper is as follows . in section 2",
    ", we recall some basic definitions concerning regular expressions and finite automata , and we recall the notion of multi - tilde - bar expression .",
    "new properties concerning the language of a multi - tilde - bar expression are stated in section 3 . in section 4 ,",
    "we give the definition of the position automaton associated with an arbitrary multi - tilde - bar expression .",
    "section 5 is devoted to an efficient computation of the position automaton of an emtbre , through the extension of the notion of -structure of a regular expression .",
    "let @xmath4 be a non - empty finite set of symbols , called an _",
    "alphabet_. the set of all the words over @xmath4 is denoted by @xmath5 .",
    "the empty word is denoted by @xmath6 .",
    "a _ language _ over @xmath4 is a subset of @xmath5 .",
    "_ regular expressions _ over an alphabet @xmath4 and regular languages that they denote are inductively defined as follows :    * @xmath7 is a regular expression denoting the language @xmath8 .",
    "* @xmath9 , for all @xmath10 , is a regular expression denoting the language @xmath11 .",
    "* let @xmath12 ( resp .",
    "@xmath13 ) be a regular expression denoting the language @xmath14 ( resp .",
    "@xmath15 ) ; then we have : * * @xmath16 is a regular expression denoting the language + @xmath17 . *",
    "* @xmath18 is a regular expression denoting the language + @xmath19 . *",
    "* @xmath20 is a regular expression denoting the language @xmath21 .",
    "the following identities are classically used : + @xmath22 .",
    "+ let @xmath23 be a regular expression .",
    "linearized form _ , denoted by @xmath24 , is obtained by ranking every letter occurrence with a subindex denoting its position in @xmath23 .",
    "we say that a regular expression is in linear form if each letter of the expression occurs only once .",
    "subscripted letters are called positions and the set of positions is denoted by @xmath25 .",
    "we denote by @xmath26 the application that maps each position in @xmath25 to the symbol of @xmath4 that appears at this position in @xmath23 .",
    "the _ size _ of @xmath23 , denoted by @xmath27 , is the size of its syntactical tree .",
    "we call _ alphabetic width _ of @xmath23 , denoted by @xmath28 , the number of occurrences of letters in the expression .",
    "[ df2 ] let @xmath23 be a regular expression denoting the language @xmath29 .",
    "the set @xmath30 is defined by : @xmath31    a _ finite automaton _ ( nfa ) is a 5-tuple @xmath32 where @xmath33 is a finite set of states , @xmath4 is an alphabet , @xmath34 is the initial state , @xmath35 is the set of final states and @xmath36 is the transition function .",
    "the language recognized by @xmath37 is denoted by @xmath38 .",
    "we now recall the syntactical definition of extended to multi - tilde - bar regular expressions ( emtbres ) @xcite . notice that these expressions will be proven to be regular later ( see corollary [ regular ] ) .",
    "let @xmath23 be a regular expression .",
    "the language @xmath39 is denoted by the expression @xmath40 ( bar operator ) and the language @xmath41 is denoted by the expression    ( 0,0)(0.4,0.35 ) ( 0,0.32)(0.4,0.32 ) [ 1](0,0.1)@xmath23    ( tilde operator ) . without loss of generality ,",
    "any regular expression can be considered as a product of concatenation @xmath42 of @xmath43 subexpressions , with @xmath44 .",
    "such a product is denoted by @xmath45 and the set of its factors is denoted by @xmath46 .",
    "let us consider the set of pairs @xmath47 .",
    "for @xmath48 , the factor @xmath49 is represented by the pair @xmath50 . a bar operator ( resp . a tilde operator ) applying on the factor @xmath49 is also represented by the pair @xmath50 . given two disjoint subsets @xmath51 end @xmath52 of @xmath46 , a",
    "_ multi - tilde - bar operator _ is defined by two subsets of @xmath53 : the set @xmath54 of bar operators applying on the factors of @xmath51 and the set @xmath55 of tilde operators applying on the factors of @xmath52 .",
    "finally , a _ multi - tilde - bar expression _",
    "@xmath56 is defined as a product @xmath45 equipped with a set @xmath54 of bars and a set @xmath55 of tildes .",
    "@xcite an _ extended to multi - tilde - bar regular expression _ ( emtbre ) over an alphabet @xmath4 is inductively defined by :    @xmath57    @xmath58    the emtbre @xmath59 is deduced from the expression @xmath56 by taking as set of bars the subset @xmath60 of @xmath54 and as set of tildes the subset @xmath61 of @xmath55 .",
    "the _ size _ of @xmath56 denoted @xmath62 is the size of @xmath45 added with the term @xmath63 .",
    "the _ alphabetic width _",
    "@xmath64 of @xmath56 is the number of occurrences of letters in the expression .",
    "consider the regular expression @xmath65 .",
    "let us consider the set of bars @xmath66 and the set of tildes @xmath67 .",
    "the emtbres @xmath68 and @xmath69 can be represented graphically as follows : +",
    "the original semantical definition of the language of an emtbre @xcite is based on the description of how words are generated by overlapping tildes and bars .",
    "our approach is different : we provide a recursive definition of the language of an emtbre .",
    "[ df1 ] let @xmath56 be a multi - tilde - bar expression .",
    "the language associated with @xmath56 is recursively defined as follows :     + with @xmath70  and  @xmath71 + for all @xmath72 .    [ regular ] the language of a multi - tilde - bar expression @xmath56 is regular .    as we will see in the following ,",
    "this recursive definition will allow us to provide the construction of the glushkov automaton of any emtbre .",
    "it is worthwhile noticing that in @xcite , this construction is restricted to saturated emtbres , that is expressions such that in each emtbre subexpression every factor is equipped with either a tilde or a bar .",
    "let us define a particular concatenation operator , denoted by @xmath73 , as follows :    @xmath74    [ pr2 ] let @xmath56 be an emtbre .",
    "the language associated with @xmath56 can be recursively computed as follows :    @xmath75 + with @xmath76 , @xmath77 .",
    "the proof is by induction on @xmath78 , _",
    "i.e. _ the number of factors in @xmath79 .",
    "let us consider the case where @xmath80 .",
    "it is easy to prove that the proposition is true :    @xmath81 + we now suppose that the proposition is satisfied for the emtbe @xmath82 and we prove it is satisfied for @xmath79 .",
    "@xmath83 +    a straightforward consequence of the definition  [ df1 ] is that @xmath84 , for all @xmath85 . as a consequence",
    "we have :    @xmath86    finally , @xmath87",
    "let @xmath23 be a regular expression . in order to construct a non - deterministic finite automaton recognizing @xmath88 , glushkov @xcite and mcnaughton - yamada @xcite have introduced independently the so - called _",
    "position automaton_. given a regular expression @xmath23 in linearized form , the following sets called _ glushkov functions _ are defined as follows , where @xmath89 and @xmath90 : @xmath91the position automaton of @xmath23 is deduced from these position sets as follows .",
    "we first add a specific position @xmath92 to the set @xmath25 and we set @xmath93 ; the set @xmath94 is equal to @xmath95 if @xmath96 and to @xmath97 otherwise ; the set @xmath98 is equal to @xmath99 if @xmath100 and to @xmath101 if @xmath102 .",
    "the position automaton @xmath103 of a regular expression @xmath23 is defined by the 5-uple + @xmath104 such that : + @xmath105    the position automaton @xmath103 recognizes the language @xmath88 @xcite .",
    "glushkov functions can be defined for bar expressions and tilde expressions as follows , where @xmath106:@xmath107(0,0.32)(0.4,0.32 ) \\uput{0.1cm}[1](0,0.1){$\\e$ } \\end{pspicture}),\\\\    \\last(\\e)&=&\\last(\\overline{\\e})&=&\\last(\\begin{pspicture}(0,0)(0.4,0.35 ) \\pszigzag[coilwidth=0.07,coilheight=2,coilarm=0](0,0.32)(0.4,0.32 ) \\uput{0.1cm}[1](0,0.1){$\\e$ } \\end{pspicture}),\\\\   \\follow(x,\\e)&=&\\follow(x,\\overline{\\e})&=&\\follow(x,\\begin{pspicture}(0,0)(0.4,0.35 ) \\pszigzag[coilwidth=0.07,coilheight=2,coilarm=0](0,0.32)(0.4,0.32 ) \\uput{0.1cm}[1](0,0.1){$\\e$ } \\end{pspicture } ) .",
    "\\end{array}\\ ] ] as a consequence the computation of glushkov functions can be extended to the family of emtbres .",
    "such an extension is described in @xcite ; it addresses the subfamily of saturated emtbres for which every factor is equipped with either a tilde or a bar .      in this section",
    ", we address the general case : we show how to compute the glushkov functions of an emtbre for which there is no restriction on the distribution of tilde and bar operators over the factors of the expression .",
    "[ flf ] let @xmath108 , with @xmath44 , and @xmath109 be an emtbre in linearized form .",
    "let @xmath78 be an integer such that @xmath110 and @xmath9 be a position in @xmath111 .",
    "the glushkov functions associated with @xmath24 are recursively computed according to the following formulas : @xmath112 @xmath113    proof is restricted to the non - classical cases : + from the definition of the function @xmath1 , one has : + @xmath114 .",
    "using the proposition  [ pr2 ] and by induction on @xmath43 , one can deduce the following equalities : + @xmath115 + from the definition of the function @xmath2 , one has : + @xmath116 . using the proposition  [ pr2 ] and by induction on @xmath43 one can deduce the following equalities : + @xmath117 + @xmath118 + ( [ follow ] ) proof is similar as for and .",
    "[ mtbnull ] the glushkov functions of a multi - tilde - bar expression can be written as a disjoint union which involves the @xmath1 , @xmath2 , and @xmath3 sets associated with sub - expressions of @xmath56 ( not of @xmath45 ) and the value of the function @xmath119 for all @xmath48 .",
    "the following proposition can be deduced from the definition  [ df2 ] .",
    "[ propnul]let @xmath24 be an emtbre in linearized form .",
    "the function @xmath120 can be recursively computed as follows : + @xmath121 @xmath122    proof is by induction on the size of @xmath23 .",
    "it is restricted to the non - classical case ( [ nul ] ) .",
    "+ if @xmath123 , then @xmath56 can be written as @xmath124 .",
    "thus , by the definition of the set @xmath0 , we have @xmath125 .",
    "if @xmath126 , then @xmath56 can be written as    ( 0,0)(0.4,0.35 ) ( 0,0.32)(0.4,0.32 ) [ 1](0,0.1)@xmath12    .",
    "thus , by the definition of the set @xmath0 , we have @xmath127 .",
    "+ let us suppose that @xmath128 , one has : + @xmath129 +    [ example1 ] let us consider the following emtbre :    the language associated with @xmath130 is :    @xmath131 + @xmath132    the associated glushkov functions are :",
    "in this section , we present efficient algorithms to compute the glushkov functions of a multi - tilde - bar expression @xmath24 , based on the formulas of the proposition  [ flf ] . according to the corollary  [ mtbnull ] , the worst case time complexity of these algorithms depends on the worst case time complexity of the function @xmath120 that we first study .      according to the proposition  [ propnul ] , a naive computation of the function @xmath0 of the emtbre @xmath56",
    "can be performed using the following algorithm .",
    "the different steps of the algorithm are illustrated through the following example .",
    "consider the emtbre @xmath69 such that @xmath133 , @xmath134 , and @xmath135 , @xmath136 , @xmath137 .",
    "the diagram below is a graphical representation of the recursive dependency between different values of @xmath119 .    [",
    "cols=\"<,^,<\",options=\"header \" , ]     it holds : + @xmath138    let us consider the case of an emtbre @xmath56 .",
    "there are @xmath139 vertices on the @xmath140 line , corresponding to tilde or bar operators @xmath141 the computation of the associated @xmath142 functions requires :    * a constant number of elementary test operations : + if @xmath143 or @xmath144 , * @xmath145 concatenations of @xmath146 , * @xmath147 unions .",
    "finally , @xmath148 operations are needed to compute the function @xmath149 .",
    "let @xmath56 be an emtbre .",
    "the function @xmath149 can be computed in @xmath150 time .",
    "notice that the function @xmath149 can be computed by making use of one of the numerous algorithms which compute the transitive closure of a dag ( see for example @xcite ) .",
    "although these algorithms have the same @xmath151 worst case time complexity as the naive algorithm they likely have a better running time performance than the naive algorithm .      according to corollary  [ mtbnull ] , for an emtbre @xmath56 , the functions @xmath152 , ( resp .",
    "@xmath153 ) , and @xmath154 can be written as disjoint unions of some @xmath155 ( resp .",
    "@xmath156 ) sets .",
    "thus , the following proposition holds .",
    "lets @xmath56 be an emtbre and @xmath157 .",
    "the functions @xmath152 , @xmath153 , and @xmath154 can be computed in @xmath150 time .",
    "according to corollary [ mtbnull ] , a multi - tilde - bar expression can be viewed as a standard regular expression equipped with a specific computation for the function @xmath0 .",
    "the computation of the glushkov functions of a multi - tilde - bar expression obviously depends on the definition of the function @xmath0 : for example , an alternative interpretation of the tilde operator can be associated with the following definition of @xmath0 :      the -structure @xcite can be extended to multi - tilde - bar expressions in a natural way ( see figure [ zpc ] ) , by representing the tilde and bar operators by edges connecting the @xmath159-nodes of the product . therefore , all the algorithms based on the -structure , _ i.e. _ the construction of the c - continuation automaton @xcite , of the equation automaton @xcite , of the follow automaton  @xcite and of the weighted position automaton @xcite also work for multi - tilde - bar expressions .",
    "+ moreover the worst case time complexity in the case of multi - tilde - bar expressions is the worst case time complexity of the standard case augmented with the worst case time complexity of the function @xmath0 .",
    "therefore , the following theorem can be stated .",
    "let @xmath24 be a multi - tilde - bar expression and @xmath160 the worst case time complexity of the function @xmath0 .",
    "the position automaton , the c - continuation automaton , the follow automaton and the equation automaton associated with @xmath24 can be computed in + @xmath161 time .",
    "the computation of a c - continuation through a -structure is illustrated by the following example .",
    "let us consider the following emtbre :    .",
    "let us explain how to compute the c - continuation of @xmath24 associated with some position @xmath9 , denoted by @xmath162 .",
    "the -structure of @xmath24 is partially shown in figure [ zpc ] , with all the links which are necessary to computes @xmath163 and @xmath164 .",
    "+ on the right - hand side , the standard @xmath1 tree is added with blue ( resp .",
    "green ) links between some @xmath159-nodes which represent bar ( resp .",
    "tilde ) operators over factors of @xmath23 .",
    "the edge connecting any @xmath159-node to its right son is marked by the value of the function @xmath0 associated with its left son , and all other edges are marked by @xmath6 .",
    "+ on the left - hand side , the standard @xmath2 tree is added with blue ( resp .",
    "green ) links between @xmath159-nodes which represent bar ( resp .",
    "tilde ) operators over factors of @xmath23 .",
    "the edge connecting any @xmath159-node to its left son is marked by the value of the function @xmath0 associated with its right son , and all other edges are marked by @xmath6 . +",
    "the two trees are connected by the so - called @xmath3 links ( red links ) . for each @xmath159-node , there is a follow link going from its left son in the @xmath2 tree to its right son in the @xmath1 tree , and for each @xmath165-node , there is a follow link going from its son in the @xmath2 tree to the @xmath165-node itself in the @xmath1 tree .",
    "the computation of a c - continuation using a -structure can be done in a similar way as in the standard case .",
    "let @xmath166 the list of follow links in the path going from a position @xmath9 to the root of the last tree .",
    "let us denote by @xmath167 the subexpression associated with the node @xmath168 in the first tree .",
    "then the c - continuation @xmath169 associated with @xmath9 is the expression @xmath170 . in our example we have : +    l    ( 0,-0.2)(2,0.6 ) ( 2.1,0.3)(4.5,0.3 ) ( 3.2,0.4)(5.8,0.4 )    ( 2,0.55)(6.4,0.55 ) [ 1](0,0)@xmath171     +    ( 0,-0.1)(2,0.4 )    ( 2.1,0.3)(4.5,0.3 )    [ 1](0,0)@xmath172",
    "in this paper , we give some answers to open questions raised in @xcite .",
    "first , we formalize an explicit definition of the language associated with a multi - tilde - bar expression , which allows us to give a recursive computation of its glushkov functions .",
    "next , we show that the worst case time complexity to construct the position automaton depends on the worst case time complexity of the function @xmath30 .",
    "this function can straightforwardly be replaced by another type of function in order to control the application of each tilde or bar .",
    "last , we provide an algorithm to convert a multi - tilde - bar expression into its position automaton , with a cubic worst case time complexity with respect to the size of the multi - tilde - bar expression .    00 v. antimirov . _ partial derivatives of regular expressions and finite automaton constructions .",
    "_ theoret .",
    ", 155:291 - 319 , 1996 .",
    "berry , g. and sethi , r. _ from regular expressions to deterministic automata .",
    "_ theoret . comp .",
    "48(1 ) , pp . 117 - 126 .",
    "berstel , j. and pin , j - e .",
    "_ local languages and the berry - sethi algorithm .",
    "_ theoret . comp .",
    "155(2 ) , pp . 439 - 446 .",
    "1996 .",
    "p. caron , j .-",
    "champarnaud , l. mignot .",
    "_ multi - tilde - bar expressions and their automata .",
    "_ acta inf .",
    "49(6):413 - 436 , 2012 .",
    "p. caron , j .-",
    "champarnaud , l. mignot .",
    "_ acyclic automata and small expressions using multi - tilde - bar operators .",
    "411(38 - 39):3423 - 3435 , 2010 . j .-",
    "champarnaud , e. laugerotte , f. ouardi , d. ziadi .",
    "_ from regular weighted expressions to finite automata .",
    "15(5):687 - 700 , 2004 .",
    "champarnaud , f. nicart , d. ziadi .",
    "_ from the zpc structure of a regular expression to its follow automaton .",
    "_ ijac , 16(1):17 - 34 , 2006 .",
    "champarnaud and d. ziadi .",
    "_ canonical derivatives , partial derivatives and finite automaton constructions .",
    "289(1):137 - 163 , 2002 . j .-",
    "champarnaud , j .- l .",
    "ponty , and d. ziadi .",
    "_ from regular expressions to finite automata_. internat",
    ". j. comput .",
    ", 72:415431 , 1999 . y. chen .",
    "_ a new algorithm for computing transitive closures .",
    "_ acm symposium on applied computing , 1091 - 1092 , 2004 .",
    "v. m. glushkov . _ the abstract theory of automata .",
    "_ russian mathematical surveys , 16:1 - 53 , 1961 . l. ilie and s. yu .",
    "_ follow automata . _",
    ", 186(1):140162 , 2003 .",
    "a. khorsi , f. ouardi , d. ziadi .",
    "_ fast equation automaton computation_. j. discrete algorithms , 6(3):433 - 448 , 2008 . s. kleene .",
    "_ representation of events in nerve nets and finite automata .",
    "_ automata studies , + ann .",
    "studies 34:341 , 1956 .",
    "princeton u. press .",
    "r. f. mcnaughton and h. yamada .",
    "_ regular expressions and state graphs for automata .",
    "_ + ieee transactions on electronic computers , 9:3957 , march 1960 .",
    "l. mignot , _ des codes barres pour les langages rationnels .",
    "_ phd thesis , litis , universit de rouen , france , 2010 .",
    "available online , url : ` http://ludovicmignot.free.fr . `",
    "d. ziadi , j .- l .",
    "ponty and j .- m .",
    "champarnaud , _",
    "passage dune expression rationnelle  un automate fini non - dterministe_. journes montoises , bull .",
    "belg . math ."
  ],
  "abstract_text": [
    "<S> several algorithms have been designed to convert a regular expression into an equivalent finite automaton . </S>",
    "<S> one of the most popular constructions , due to glushkov and to mcnaughton and yamada , is based on the computation of the @xmath0 , @xmath1 , @xmath2 and @xmath3 sets ( called glushkov functions ) associated with a linearized version of the expression . </S>",
    "<S> recently mignot considered a family of extended expressions called extended to multi - tilde - bar regular expressions ( emtbres ) and he showed that , under some restrictions , glushkov functions can be defined for an emtbre . in this paper </S>",
    "<S> we present an algorithm which efficiently computes the glushkov functions of an unrestricted emtbre . </S>",
    "<S> our approach is based on a recursive definition of the language associated with an emtbre which enlightens the fact that the worst case time complexity of the conversion of an emtbre into an automaton is related to the worst case time complexity of the computation of the @xmath0 function . </S>",
    "<S> finally we show how to extend the -structure to emtbres , which allows us to apply to this family of extended expressions the efficient constructions based on this structure ( in particular the construction of the c - continuation automaton , the position automaton , the follow automaton and the equation automaton ) .    </S>",
    "<S> regular expressions and languages , finite automata , computation complexity </S>"
  ]
}