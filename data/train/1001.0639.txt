{
  "article_text": [
    "* the background and the problem . * exploring unknown terrains by mobile robots has important applications when the environment is dangerous or of difficult access for humans .",
    "such is the situation when operating in nuclear plants or cleaning toxic wastes , as well as in the case of underwater or extra - terrestrial operations . in many cases",
    "a robot must inspect an unknown terrain and come back to its starting point .",
    "due to energy and cost saving requirements , the length of the robot s trajectory should be minimized .",
    "we model the exploration problem as follows .",
    "the terrain is represented by an arbitrary polygon @xmath17 with pairwise disjoint polygonal obstacles @xmath18 , included in @xmath17 , i.e. , the terrain is @xmath19 .",
    "we assume that borders of all polygons @xmath20 belong to the terrain .",
    "the robot is modeled as a point moving along a polygonal line inside the terrain .",
    "it should be noted that the restriction to polygons is only to simplify the description , and all our results hold in the more general case where polygons are replaced by bounded subsets of the plane homeotopic with a disc ( i.e. , connected and without holes ) and regular enough to have well - defined area and boundary length .",
    "every point of the trajectory of the robot is called _",
    "visited_. we consider two scenarios : the _ unlimited vision _",
    ", when the robot visiting a point @xmath0 of the terrain @xmath10 _ explores _",
    "( sees ) all points @xmath1 for which the segment @xmath2 is entirely contained in @xmath10 , and the _ limited vision _ , when we require additionally that the distance between @xmath0 and @xmath1 be at most 1 . in both cases",
    "the task is to explore all points of the terrain @xmath10 .",
    "the cost of an exploration algorithm is measured by the length of the trajectory of the robot , which should be as small as possible .",
    "we assume that the robot does not know the terrain before starting the exploration , but it has unbounded memory and can record the portion of the terrain seen so far and the already visited portion of its trajectory .    * our results .",
    "* for unlimited vision we show an exploration algorithm with complexity @xmath3 , where @xmath4 is the total perimeter of the terrain ( including perimeters of obstacles ) , @xmath5 is the diameter of the convex hull of the terrain , and @xmath6 is the number of obstacles",
    ". we do not assume knowledge of these parameters .",
    "we also prove a matching lower bound for exploration of some terrains ( even if the terrain is known to the robot ) , showing that the above complexity is worst - case optimal .",
    "for limited vision we show exploration algorithms with complexity @xmath7 , where @xmath8 is the area of the terrain are positive reals that may be arbitrarily small , it is important to stress that complexity @xmath7 means that the trajectory of the robot is at most @xmath21 , for some constant @xmath9 and _ sufficiently large _ values of @xmath4 and @xmath8 .",
    "similarly for @xmath3 .",
    "this permits to include , e.g. , additive constants in the complexity , in spite of arbitrarily small parameter values . ] .",
    "our algorithms work either for arbitrary terrains , if one of the parameters @xmath8 or @xmath6 is known , or for @xmath9-fat terrains , where @xmath9 is any constant larger than @xmath22 ( unknown to the robot ) and no additional knowledge is assumed .",
    "( a terrain @xmath10 is @xmath9-fat if @xmath11 , where @xmath12 is the radius of the smallest disc containing @xmath10 and @xmath13 is the radius of the largest disc contained in @xmath10 . )",
    "we also prove a matching lower bound @xmath14 on the complexity of exploration , even if the terrain is known to the robot .",
    "the main open problem resulting from our research is whether exploration with asymptotically optimal cost @xmath7 can be performed in arbitrary terrains without _ any _ a priori knowledge .",
    "* related work . * exploration of unknown environments by mobile robots was extensively studied both for the unlimited and for the limited vision .",
    "most of the research in this domain concerns the competitive framework , where the trajectory of the robot not knowing the environment is compared to that of the optimal exploration algorithm having full knowledge .",
    "one of the most important works for unlimited vision is  @xcite . the authors gave a @xmath23-competitive algorithm for rectilinear polygon exploration without obstacles .",
    "the case of non - rectilinear polygons ( without obstacles ) was also studied in  @xcite and a competitive algorithm was given in this case .",
    "for polygonal environments with an arbitrary number of polygonal obstacles , it was shown in  @xcite that no competitive strategy exists , even if all obstacles are parallelograms .",
    "later , this result was improved in  @xcite by giving a lower bound in @xmath24 for the competitive ratio of any on - line algorithm exploring a polygon with @xmath6 obstacles .",
    "this bound remains true even for rectangular obstacles . on the other hand",
    ", there exists an algorithm with competitive ratio in @xmath25  @xcite .",
    "exploration of polygons by a robot with limited vision has been studied , e.g. , in @xcite . in @xcite",
    "the authors described an on - line algorithm with competitive ratio @xmath26 , where @xmath27 is a quantity depending on the perimeter of the polygon , @xmath28 is the area seen by the robot , and @xmath8 is the area of the polygon .",
    "the exploration in  @xcite fails on a certain type of polygons , such as those with narrow corridors . in @xcite ,",
    "the authors consider exploration in discrete steps .",
    "the robot can only explore the environment when it is motionless , and the cost of the exploration algorithm is measured by the number of stops during the exploration . in @xcite ,",
    "the complexity of exploration is measured by the trajectory length , but only terrains composed of identical squares are considered . in @xcite",
    "the author studied off - line exploration of the boundary of a terrain with limited vision .",
    "an experimental approach was used in @xcite to show the performance of a greedy heuristic for exploration in which the robot always moves to the frontier between explored and unexplored area .",
    "practical exploration of the environment by an actual robot was studied , e.g. , in @xcite . in @xcite ,",
    "a technique is described to deal with obstacles that are not in the plane of the sensor . in @xcite landmarks",
    "are used during exploration to construct the skeleton of the environment .",
    "navigation is a closely related task which consists in finding a path between two given points in a terrain with unknown obstacles .",
    "navigation in a @xmath29 square containing rectangular obstacles aligned with sides of the square was considered in @xcite .",
    "it was shown in @xcite that the navigation from a corner to the center of a room can be performed with a competitive ratio @xmath30 , only using tactile information ( i.e. , the robot modeled as a point sees an obstacle only when it touches it ) .",
    "no deterministic algorithm can achieve better competitive ratio , even with unlimited vision  @xcite . for navigation between any pair of points",
    ", there is a deterministic algorithm achieving a competitive ratio of @xmath31  @xcite .",
    "no deterministic algorithm can achieve a better competitive ratio  @xcite .",
    "however , there is a randomized approach performing navigation with a competitive ratio of @xmath32  @xcite .",
    "navigation with little information was considered in  @xcite . in this model",
    ", the robot can not perform localization nor measure any distances or angles .",
    "nevertheless , the robot is able to learn the critical information contained in the classical shortest - path roadmap and perform locally optimal navigation .",
    "let @xmath28 be a smallest square in which the terrain @xmath33 is included .",
    "our algorithm constructs a _ quadtree decomposition _ of @xmath28 .",
    "a quadtree is a rooted tree with each non - terminal node having four children .",
    "each node of the quadtree corresponds to a square .",
    "the children of any non - terminal node @xmath34 correspond to four identical squares obtained by partitioning the square of @xmath34 using its horizontal and vertical symmetry axes .",
    "this implies that the squares of the terminal nodes form a partition of the root .",
    "more precisely ,    1 .",
    "@xmath35 is a quadtree decomposition of @xmath28 2",
    ".   if @xmath36 is a quadtree decomposition of @xmath28 , then + @xmath37 , where @xmath38 form a partition of @xmath39 using its vertical and horizontal symmetry axes , is a quadtree decomposition of @xmath28    the trajectory of the robot exploring @xmath33 will be composed of parts which will follow the boundaries of @xmath40 , for @xmath41 , and of straight - line segments , called _ approaching segments _ , joining the boundaries of @xmath40 , @xmath41 .",
    "obviously , the end points of an approaching segment must be visible from each other .",
    "the quadtree decomposition will be dynamically constructed in a top - down manner during the exploration of @xmath33 . at each moment of the exploration we consider the set @xmath42 of all squares of the current quadtree and the set @xmath43 of squares being the terminal nodes of the current quadtree .",
    "we will also construct dynamically a bijection @xmath44 .",
    "when a robot moves along the boundary of some polygon @xmath40 , it may be in one of two possible modes : the _ recognition mode _ - when it goes around the entire boundary of a polygon without any deviation , or in the _ exploration mode _ - when , while moving around the boundary , it tries to detect ( and approach ) new obstacles .",
    "when the decision to approach a new obstacle is made at some point @xmath13 of the boundary of @xmath40 the robot moves along an approaching segment to reach the obstacle , processes it by a recursive call , and ( usually much later ) , returning from the recursive call , it moves again along this segment in the opposite direction in order to return to point @xmath13 and to continue the exploration of @xmath40 .",
    "however , some newly detected obstacles may not be immediately approached .",
    "we say that , when the robot is in position @xmath13 , an obstacle @xmath45 is _ approachable _ , if there exists a point @xmath46 , belonging to a square @xmath47 of diameter @xmath48 such that @xmath49 .",
    "it is important to state that if exactly one obstacle becomes approachable at moment t , then it is approached immediately and if more than one obstacle become approachable at a moment @xmath50 , then one of them ( chosen arbitrarily ) is approached immediately and the others are approached later , possibly from different points of the trajectory . each time a new obstacle is visited by the robot ( i.e.",
    ", all the points of its boundary are visited in the recognition mode ) the terminal square of the current quadtree containing the first visited point of the new obstacle is partitioned .",
    "this square is then associated to this obstacle by function @xmath51 .",
    "the trajectory of the robot is composed of three types of sections : _ recognition sections _ , _ exploration sections _ and _ approaching sections_. the boundary of each polygon will be traversed twice : first time contiguously during a recognition section and second time through exploration sections , which may be interrupted several times in order to approach and visit newly detected obstacles .",
    "we say that an obstacle is _ completely explored _ , if each point on the boundary of this obstacle has been traversed by an exploration section .",
    "we will prove that the sum of the lengths of the approaching sections is @xmath52 .",
    "* algorithm * exptrav ( polygon @xmath12 , starting point @xmath53 on the boundary of @xmath12 ) + 1 = make a recognition traversal of the boundary of @xmath12 + 2 = partition square @xmath54 of the quadtree containing @xmath53 into four identical squares + 3 = @xmath55 + 4 * eat * + 5 travrse the boundary of @xmath12 until , for the current position @xmath13 , there exists a visible point @xmath1 + of a new obstacle @xmath56 belonging to square @xmath57 , such that @xmath49 + 6 traverse the segment @xmath58 + 7 exptrav(@xmath56 , @xmath1 ) + 8 traverse the segment @xmath59 + 9 @xmath12 is completely explored    before the initial call of exptrav , the robot reaches a position @xmath60 at the boundary of the polygon @xmath17 .",
    "this is done as follows . at its initial position @xmath34",
    ", the robot chooses an arbitrary half - line @xmath61 which it follows as far as possible .",
    "when it hits the boundary of a polygon @xmath62 , it traverses the entire boundary of @xmath62 .",
    "then , it computes the point @xmath63 which is the farthest point from @xmath34 in @xmath64 .",
    "it goes around @xmath62 until reaching @xmath63 again and progresses on @xmath61 , if possible .",
    "if this is impossible , the robot recognizes that it went around the boundary of @xmath17 and it is positioned on this boundary .",
    "it initialises the quadtree decomposition to a smallest square @xmath28 containing @xmath17 .",
    "this square is of size @xmath65 .",
    "the length of the above walk is less than @xmath66 .",
    "[ l : explorability ] algorithm exptrav visits all boundary points of all obstacles of the terrain @xmath33 .    note that algorithm exptrav always terminates . indeed , since there is a finite number of obstacles , there is a finite number of calls of exptrav and steps 5 - 8 are executed a finite number of times . moreover , since each obstacle has a finite boundary , step 1 and the repeat loop are always completed .",
    "consider the quadtree decomposition @xmath67 of @xmath28 arising at the completion of the algorithm .",
    "suppose , for contradiction , that there exists a point on the boundary of an obstacle which was never visited .",
    "let @xmath0 be a point among all unvisited boundary points for which the terminal square @xmath68 belonging to the quadtree @xmath56 has the smallest possible diameter .",
    "consider the square @xmath69 , the parent of @xmath68 in @xmath67 .",
    "@xmath69 was partitioned in step 2 of some call of exptrav as a result of detecting some obstacle @xmath70 intersecting @xmath69 .",
    "consider the segment @xmath71 , where @xmath72 belongs to the boundary of @xmath70 . since both points",
    "@xmath0 and @xmath1 belong to the boundary of @xmath10 and @xmath1 was visited while @xmath0 was not , there exists a pair of points @xmath73 and @xmath74 , both belonging to the boundary of @xmath10 and to the segment @xmath71 , such that @xmath73 was visited , @xmath74 was not and @xmath74 is visible from @xmath73 .",
    "such a pair exists because at the end of the exploration the boundary of each polygon is either entirely visited or not at all .",
    "consider the quadtree at the moment @xmath50 when the robot visited point @xmath73 , and its terminal square @xmath39 containing point @xmath74 .",
    "clearly , @xmath75 , because @xmath68 is a square with the smallest diameter containing unvisited boundary points .",
    "hence @xmath76 and @xmath74 was approachable from @xmath73 at time @xmath50 , a contradiction .",
    "[ l : bijection ] function @xmath51 is a bijection from @xmath77 to @xmath78 , where @xmath79 and @xmath80 correspond to the final quadtree decomposition produced by algorithm exptrav .    when exptrav is called for the first time , the robot is on the boundary of @xmath81 and the quadtree has exactly one non - terminal node - its root @xmath28 , and @xmath82 . by induction ,",
    "each time a new obstacle @xmath56 is approached in step 6 of a call of exptrav , @xmath83 is set to some @xmath84 intersecting @xmath56 and @xmath84 becomes a nonterminal node of the quadtree in step 2 .",
    "hence each square corresponding to a non - terminal node of the quadtree is an image of a different polygon @xmath40 , @xmath85 .",
    "[ l : quadtree - complexity ] for any quadtree @xmath86 , rooted at a square of diameter @xmath5 and having @xmath87 non - terminal nodes , the sum @xmath88 of diameters of these nodes is at most @xmath89 .",
    "the diameter of a square at depth @xmath50 of the quadtree is @xmath90 .",
    "we prove first that among all quadtrees with @xmath87 non - terminal nodes , @xmath88 is maximized for the quadtree having all terminal nodes of at most two consecutive depths .",
    "suppose , to the contrary , that there exists a quadtree @xmath86 maximizing @xmath88 having terminal nodes of two different depths @xmath91 and @xmath92 with @xmath93 .",
    "let @xmath0 be a terminal node of @xmath86 of depth @xmath91 and @xmath1 be a non - terminal node of depth @xmath94 .",
    "let @xmath95 be the tree obtained from @xmath86 by detaching from @xmath86 node @xmath96 and the subtree of @xmath86 rooted at @xmath1 and exchanging their places .",
    "@xmath95 is again a quadtree with @xmath87 non - terminal nodes , having one less non - terminal node of depth @xmath94 and one extra non - terminal node of depth @xmath91 .",
    "hence @xmath97 , which contradicts the maximality of @xmath88 .",
    "therefore it is sufficient to consider only quadtrees having terminal nodes of at most two consecutive depths @xmath50 and @xmath98 .",
    "suppose that there are @xmath99 terminal nodes of depth @xmath98 , @xmath100",
    ". then the number @xmath87 of non - terminal nodes equals @xmath101 and @xmath102",
    "@xmath103    we need to prove that @xmath104 , i.e. that @xmath105 hence it is sufficient to show that @xmath106 i.e. , that @xmath107 the second term is clearly positive for @xmath108 and the first term is also positive since @xmath100 .",
    "we conclude that @xmath104 .",
    "[ t : exploration - correctness ] algorithm exptrav explores the terrain @xmath33 of perimeter @xmath4 and convex hull diameter @xmath5 with @xmath6 obstacles in time @xmath3 .",
    "take an arbitrary point @xmath0 inside @xmath33 and a ray outgoing from @xmath0 in an arbitrary direction .",
    "this ray reaches the boundary of @xmath33 at some point @xmath1 . since ,",
    "by lemma [ l : explorability ] point @xmath1 was visited by the robot , @xmath0 was visible from @xmath1 during the robot s traversal , and hence @xmath0 was explored .    to prove the complexity of the algorithm , observe that the robot traverses twice the boundary of each polygon of @xmath33 , once during its recognition in step 1 and the second time during the iterations of step 5 . hence the sum of lengths of the recognition and exploration sections is @xmath109",
    "the only other portions of the trajectory are produced in steps 6 and 8 , when the obstacles are approached and returned from . according to the condition from step 5 , an approaching segment is traversed in step 6 only if its length is shorter than twice the diameter of the associated square . if @xmath110 then the sum of lengths of all approaching segments is @xmath111 , due to the fact that exploration starts at the external boundary of the terrain . in this case",
    "the length of the trajectory is at most @xmath112 .",
    "hence we may assume that @xmath113 .",
    "by lemma [ l : bijection ] each obstacle is associated with a different non - terminal node of the quadtree and the number @xmath87 of non - terminal nodes of the quadtree equals @xmath114 .",
    "hence the sum of lengths of all approaching segments is at most @xmath115 . by lemma [ l : quadtree - complexity ]",
    "we have @xmath116 , hence the sum of lengths of approaching segments is at most @xmath117 .",
    "each segment is traversed twice , so the total length of this part of the trajectory is at most @xmath118 .",
    "it follows that the total length of the trajectory is at most @xmath119 .",
    "[ t : lower - unlimited ] any algorithm for a robot with unlimited visibility , exploring polygonal terrains with @xmath6 obstacles , having total perimeter @xmath4 and the convex hull diameter @xmath5 , produces trajectories in @xmath120 in some terrains , even if the terrain is known to the robot .    in order to prove the lower bound ,",
    "we show two families of terrains : one for which @xmath121 ( @xmath4 can not be smaller ) , @xmath5 and @xmath6 are unbounded and still the exploration cost is @xmath122 , and the other in which @xmath4 is unbounded , @xmath5 is arbitrarily small , @xmath110 and still the exploration cost is @xmath123 .",
    "consider the terrain from figure [ fig : lower - unlimited](a ) where @xmath6 identical tiny obstacles are distributed evenly at the @xmath124 grid positions inside a square of diameter @xmath5 .",
    "the distance between obstacles is at least @xmath125 where @xmath126 may be as small as necessary by choosing obstacles sufficiently small .",
    "the obstacles are such that to explore the small area inside the convex hull of the obstacle the robot must enter this convex hull . since each such area must be explored , the trajectory of the robot must be of size at least @xmath127 , which is clearly in @xmath122 .",
    "note that the perimeter @xmath4 is in @xmath128 .",
    "the terrain from figure [ fig : lower - unlimited](b ) is a polygon of arbitrarily small diameter ( without obstacles ) , whose exploration requires a trajectory of size @xmath123 , where @xmath4 is unbounded .",
    "indeed , each `` corridor '' must be traversed almost completely to explore points at its end .",
    "hence the two families of polygons from figure [ fig : lower - unlimited ] lead to the @xmath120 lower bound .",
    "in this section we assume that the vision of the robot has range 1 .",
    "the following algorithm is at the root of all our positive results on exploration with limited vision .",
    "the idea of the algorithm is to partition the environment into small parts called _ cells _ ( of diameter at most @xmath22 ) and to visit them using a depth - first traversal .",
    "the local exploration of cells can be performed using algorithm exptrav , since the vision inside each cell is not limited by the range @xmath22 of the vision of the robot .",
    "the main novelty of our exploration algorithm is that the robot completely explores _ any _ terrain .",
    "this should be contrasted with previous algorithms with limited visibility , e.g. @xcite in which only a particular class of terrains with obstacles is explored , e.g. , terrains without narrow corridors or terrains composed of complete identical squares .",
    "this can be done at cost @xmath129 .",
    "our lower bound shows that exploration complexity of arbitrary terrains depends on the perimeter and the number of obstacles as well .",
    "the complete exploration of arbitrary terrains achieved by our algorithm significantly complicates both the exploration process and its analysis .",
    "* algorithm @xmath130 * ( @xmath131 , for short ) + input : a point @xmath132 inside the terrain @xmath10 and a positive real @xmath133 . + output : an exploration trajectory of @xmath10 , starting and ending at  @xmath132 .",
    "tile the area with squares of side @xmath134 , such that @xmath132 is on the boundary of a square .",
    "the connected regions obtained as intersections of @xmath10 with each tile are called _",
    "cells_. for each tile @xmath28 , maintain a quadtree decomposition @xmath135 initially set to @xmath35 . then , arbitrarily choose one of the cells containing @xmath132 to be the starting cell @xmath136 and call @xmath137(@xmath136 , @xmath132 ) .",
    "* procedure * @xmath137(current cell @xmath136 , starting point @xmath138 ) + 1 = record @xmath136 as visited + 2 xptrav(@xmath136,@xmath53 ) using the quadtree decomposition @xmath135 , where @xmath28 is the tile containing @xmath136 + 3 * repeat * + 4 traverse the boundary of @xmath136 until the current position @xmath13 belongs to an unvisited cell @xmath139 + 5 @xmath137(@xmath139 , @xmath13 ) + ( if @xmath13 is in several unvisited cells , choose arbitrarily the first cell to be processed ) + 6 * until * the boundary of @xmath136 is completely traversed    it is worth to note that , at the beginning of the exploration of the first cell belonging to a tile @xmath28 , the quadtree of this tile is set to a single node .",
    "however , at the beginning of explorations of subsequent cells belonging to @xmath28 , the quadtree of @xmath28 may be different .",
    "so the top - down construction of this quadtree may be spread over the exploration of many cells which will be visited at different points in time .",
    "consider a tile @xmath86 and a cell @xmath140 .",
    "let @xmath141 be the area of @xmath136 , @xmath142 be the length of the part of the boundary of @xmath136 issued from the boundary of @xmath86 , and @xmath143 be the length of the part of the boundary of @xmath136 issued from the boundary of @xmath10 .          in this case",
    ", we will show that there is a positive constant @xmath9 such that @xmath147 .",
    "we call a _ borderline _ a maximum connected part of the boundary of @xmath10 inside the tile @xmath86 delimiting the cell @xmath136 .",
    "let @xmath148 be the set of borderlines of @xmath136 .",
    "there are two types of borderlines : the _ linking _ borderlines that link two points of the boundary of @xmath86 and the _ closed _ borderlines that are closed polygonal lines inside @xmath28 .",
    "a borderline @xmath149 separates the tile @xmath28 into two connected regions , the _ inside _ region denoted by @xmath150 , i.e. , the region containing @xmath136 , and the _ outside _ region , denoted by @xmath151 .",
    "if the area of @xmath150 is smaller than that of @xmath151 , then @xmath149 is a _ small - inside _ borderline , otherwise @xmath149 is a _ large - inside _ borderline .",
    "we denote by @xmath152 the region among @xmath150 and @xmath151 which has the smaller area .",
    "notice that the two endpoints of a _ linking _ borderline can either be on the same side of @xmath28 or on two adjacent sides .",
    "indeed , any borderline linking two points on opposite sides of @xmath28 would have a length at least @xmath134 , a contradiction with the inequality @xmath153 .",
    "if @xmath149 is a linking borderline with both endpoints @xmath87 and @xmath99 on the same side of @xmath28 , then the length of segment @xmath154 is smaller than @xmath155 .",
    "hence , the perimeter of @xmath152 is smaller than @xmath156",
    ". if @xmath149 is a linking borderline with endpoints @xmath87 and @xmath99 on two sides that intersect at a vertex @xmath34 , then the lengths of segments @xmath157 and @xmath158 are both less than @xmath155 .",
    "therefore the perimeter of @xmath152 is smaller than @xmath159 .",
    "if @xmath149 is a closed borderline , then the perimeter of @xmath152 is exactly @xmath149 .",
    "hence , the perimeter of @xmath152 is always less than @xmath159 .",
    "moreover , the area of @xmath152 is less than @xmath160 by the isoperimetric inequality  @xcite .",
    "now we are ready to show that at least one borderline in @xmath161 is a small - inside borderline .",
    "suppose , for contradiction that , for all @xmath162 , the borderline @xmath163 is a large - inside borderline .",
    "we have @xmath164 .",
    "it follows that : @xmath165 we obtain @xmath166 , a contradiction .",
    "this shows that there exists a small - inside borderline @xmath167 .",
    "we have @xmath168 and thus @xmath169 .",
    "the following is the key lemma for all upper bounds proved in this section .",
    "let @xmath175 be the set of tiles with non - empty intersection with @xmath10 and @xmath176 be the set of cells that are intersections of tiles from @xmath177 with @xmath10 . for each @xmath178 ,",
    "let @xmath179 be the number of obstacles of @xmath10 entirely contained in @xmath86 .",
    "first , we show that algorithm @xmath131 explores the terrain @xmath10 .",
    "consider the graph @xmath181 whose vertex set is @xmath182 and edges are the pairs @xmath183 such that @xmath136 and @xmath184 have a common point at their boundaries .",
    "the graph @xmath181 is connected , since @xmath10 is connected .",
    "note that for any cell @xmath136 and point @xmath13 on the boundary of @xmath136 , exptrav@xmath185 and thus @xmath186 starts and ends on @xmath13 .",
    "therefore , algorithm @xmath131 performs a depth first traversal of graph @xmath181 , since during the execution of @xmath187 , procedure @xmath188 is called for each unvisited cell @xmath139 adjacent to @xmath136 .",
    "hence , @xmath187 is called for each cell @xmath189 , since @xmath181 is connected . during the execution of @xmath186 , @xmath136",
    "is completely explored by exptrav(@xmath136,@xmath13 ) by the same argument as in the proof of lemma  [ l : explorability ] , since the convex hull diameter of @xmath136 is less than one .",
    "it remains to show that the length of the @xmath131 trajectory is @xmath180 . for each @xmath190 ,",
    "the part of the @xmath131 trajectory inside the cell @xmath191 is produced by the execution of @xmath192 . in step 2 of @xmath192 ,",
    "the robot executes exptrav with @xmath193 and @xmath194 .",
    "the sum of lengths of recognition and exploration sections of the trajectory in @xmath191 is at most @xmath195 .",
    "the sum of lengths of approaching sections of the trajectory in @xmath196 is at most @xmath197 and each approaching section is traversed twice ( cf .",
    "proof of theorem  [ t : exploration - correctness ] ) . in step 3 of @xmath192 ,",
    "the robot only makes the tour of the cell @xmath191 , hence the distance traveled by the robot is at most @xmath198 .",
    "it follows that : @xmath199      [ th : fat ] let @xmath200 be any constant .",
    "exploration of a @xmath9-fat terrain of area @xmath8 , perimeter @xmath4 and with @xmath6 obstacles can be performed using a trajectory of length @xmath7 ( without any a priori knowledge ) .",
    "the robot executes algorithm @xmath131 with @xmath201 . by lemma  [ lem : algo ]",
    ", the total cost is @xmath202 . recall that @xmath203 is the number of tiles that have non - empty intersection with the terrain .",
    "we have @xmath204 .",
    "hence , it remains to show that @xmath205 to prove that the cost is @xmath7 . by definition of a @xmath9-fat terrain , there is a disk @xmath206 of radius @xmath13 included in the terrain and a disk @xmath207 of radius @xmath12 that contains the terrain , such that @xmath208 .",
    "there are @xmath209 tiles entirely included in @xmath206 and hence in the terrain .",
    "so , we have @xmath210 .",
    "@xmath211 tiles are sufficient to cover @xmath207 and hence the terrain .",
    "so @xmath212 .",
    "hence , we obtain @xmath205 in view of @xmath213 .",
    "consider any terrain @xmath10 of area @xmath8 , perimeter @xmath4 and with @xmath6 obstacles .",
    "we now turn attention to the exploration problem if some knowledge about the terrain is available a priori .",
    "notice that if @xmath8 and @xmath6 are known before the exploration , lemma  [ lem : algo ] implies that algorithm @xmath131 executed for @xmath214 explores _ any _ terrain at cost @xmath215 .",
    "( indeed , if @xmath216 then @xmath217 and @xmath218 , while @xmath201 implies @xmath219 and @xmath220 . )",
    "this cost will be later proved optimal .",
    "it turns out that a much more subtle use of algorithm @xmath131 can guarantee the same complexity assuming only knowledge of @xmath8 _ or _",
    "we present two different algorithms depending on which value , @xmath8 or @xmath6 , is known to the robot .",
    "both algorithms rely on the same idea .",
    "the robot executes algorithm @xmath131 with some initial value of @xmath134 until either the terrain is completely explored , or a certain stopping condition , depending on the algorithm , is satisfied .",
    "this execution constitutes the first stage of the two algorithms .",
    "if exploration was interrupted because of the stopping condition , then the robot proceeds to a new stage by executing algorithm @xmath131 with a new value of @xmath134 .",
    "values of @xmath134 decrease in the first algorithm and increase in the second one .",
    "the exploration terminates at the stage when the terrain becomes completely explored , while the stopping condition is never satisfied .    in each stage",
    "the robot is oblivious of the previous stages , except for the computation of the new value of @xmath134 that depends on the previous stage .",
    "this means that in each stage exploration is done `` from scratch '' , without recording what was explored in previous stages . in order to test the stopping condition in a given stage ,",
    "the robot maintains the following three values : the sum @xmath221 of areas of explored cells , updated after the execution of exptrav in each cell ; the length @xmath222 of the boundary traversed by the robot , continuously updated when the robot moves along a boundary for the first time ( i.e. , in the recognition mode ) ; and the number @xmath223 of obstacles approached by the robot , updated when an obstacle is approached .",
    "the values of @xmath221 , @xmath222 and @xmath223 at the end of the @xmath224-th stage are denoted by @xmath225 , @xmath226 and @xmath227 , respectively .",
    "let @xmath228 be the value of @xmath134 used by algorithm @xmath131 in the @xmath224-th stage .",
    "now , we are ready to describe the stopping conditions and the values @xmath228 in both algorithms .",
    "consider a moment @xmath50 during the execution of algorithm @xmath131 .",
    "let @xmath229 be the set of cells recorded as visited by algorithm @xmath131 at moment @xmath50 , and let @xmath230 be the set of obstacles approached by the robot until time @xmath50 .",
    "for each @xmath231 , let @xmath232 be the length of the intersection of the exterior boundary of cell @xmath136 with the boundary of the terrain . for each @xmath233 ,",
    "let @xmath234 be the perimeter of obstacle @xmath235 and let @xmath236 .",
    "the following proposition is proved similarly as lemma  [ lem : algo ] .",
    "let @xmath139 be the current cell at moment @xmath50 , which means that the instance of procedure @xmath137 executed at moment @xmath50 was called with @xmath139 as its first parameter .",
    "let @xmath239 be the set of obstacles in @xmath230 that are not included in @xmath139 and let @xmath240 .",
    "all the obstacles included in @xmath241 were approached and visited by the robot .",
    "hence , we have @xmath242 . by the same arguments as in the proof of lemma  [ lem : algo ] , it follows that the total length of the trajectory of the robot in the cells in @xmath243 is at most @xmath244 for some positive constant @xmath245 .",
    "the length of the trajectory of the robot in @xmath139 is at most @xmath246 , where @xmath247 is the length of the exterior boundary of cell @xmath139 .",
    "hence , the length of the trajectory of the robot until time @xmath50 is at most @xmath238 for some positive constant @xmath237 , since @xmath248 .",
    "[ lem : algak ] algorithm @xmath249 ( resp .",
    "@xmath250 ) explores a terrain @xmath10 of area @xmath8 , perimeter @xmath4 and with @xmath6 obstacles , using a trajectory of length @xmath7 , if @xmath8 ( resp .",
    "@xmath6 ) is known before exploration .",
    "first , we show that the algorithm eventually terminates and completely explores @xmath10 .",
    "remark that for each @xmath251 , @xmath252 since @xmath253 . since @xmath254 , for each @xmath255 , we have @xmath256 .",
    "the algorithm eventually terminates , since there exists @xmath257 such that @xmath258 and the stopping condition is never satisfied in this case . in the last stage , algorithm @xmath131 performs complete exploration of the terrain by lemma  [ lem : algo ] , since the value of @xmath134 used for exploration is at most @xmath259 .",
    "let @xmath260 be the distance traveled by the robot during the @xmath224-th stage and let @xmath203 be the number of stages . by proposition  [ prop:1arg ] ,",
    "if stage @xmath224 ends at moment @xmath261 then @xmath262 for each @xmath255 . since the algorithm can only interrupt stage @xmath263 when approaching an obstacle , we have @xmath264 .",
    "we obtain that @xmath265 for each @xmath255 .    if @xmath266 , then the stopping condition is never satisfied and @xmath267 .",
    "the total cost is at most @xmath268 , since @xmath254 . on the other hand ,",
    "if @xmath269 , then for each @xmath224 such that @xmath270 , we have @xmath271 .",
    "indeed , we have @xmath272 and @xmath273 , since the stopping condition is satisfied at the end of the @xmath224-th stage . moreover , we have @xmath274 , for all @xmath275 .",
    "it follows that @xmath276 . in order to show that the total cost is @xmath7 , it is sufficient to show that @xmath277 , since @xmath278 and @xmath279 .",
    "take the moment @xmath280 when the @xmath281-th stage was interrupted , i.e. , when both inequalities of the stopping condition started to be satisfied .",
    "consider the inequality which was not satisfied just before moment @xmath280 . if this is the first of the two inequalities , then at time @xmath280 the algorithm @xmath249 must have increased the value of @xmath223 , hence just before moment @xmath280 we had @xmath282 .",
    "similarly , if the second inequality was not satisfied just before moment @xmath280 , then we had @xmath283 .",
    "the proof is similar to that concerning algorithm @xmath249 .",
    "the main difference follows from the additional clause @xmath292 in the stopping condition .",
    "this clause was not necessary in algorithm @xmath249 because , as opposed to the present case , sides of tiles were decreasing .",
    "first , we show that the algorithm eventually terminates and completely explores @xmath10 .",
    "remark that for each @xmath293 , we have @xmath294 , since @xmath295 .",
    "hence , the algorithm eventually terminates . indeed ,",
    "even if the first two inequalities remain true , the third must become false at some point .",
    "notice that @xmath296 since @xmath297 , and for all @xmath251 we have @xmath298 . in the last stage ,",
    "algorithm @xmath131 performs complete exploration of the terrain by lemma  [ lem : algo ] , since the value of @xmath134 used for the exploration is at most @xmath259 .",
    "let @xmath260 be the distance traveled by the robot during the @xmath224-th stage and let @xmath203 be the number of stages . by proposition  [ prop:1arg ] ,",
    "if stage @xmath224 ends at moment @xmath261 , then @xmath262 for each @xmath255 . since the algorithm can only stop when completing the exploration of a cell",
    ", we have @xmath264 and @xmath299 .",
    "we obtain that @xmath300 for each @xmath255 .    if @xmath266 , then the stopping condition is never satisfied and either @xmath301 or @xmath254 . in the first case ,",
    "the total cost is at most @xmath302 since @xmath303 . in the second case",
    ", we have @xmath110 and the total cost is at most @xmath268 . on the other hand ,",
    "if @xmath269 then for each @xmath224 such that @xmath270 , we have @xmath304 .",
    "indeed , we have @xmath305 and @xmath306 , since the stopping condition is satisfied at the end of the @xmath224-th stage",
    ". moreover , we have @xmath307 for all @xmath275 .",
    "it follows that @xmath308 .",
    "notice that the third inequality of the stopping condition is always satisfied during the @xmath281-stage .",
    "take the moment @xmath280 when the @xmath281-th stage was interrupted , i.e. , when the two first inequalities of the stopping condition started to be satisfied .",
    "consider the inequality which was not satisfied just before moment @xmath280 .",
    "if this is the first of the two inequalities , then at time @xmath280 the algorithm @xmath250 must have increased the value of @xmath221 by at most @xmath309 since each cell is included in a square of size @xmath310 .",
    "hence just before moment @xmath280 we had @xmath311 .",
    "similarly , if the second inequality was not satisfied just before moment @xmath280 , then we had @xmath312 .",
    "since the stopping condition in the last stage is not satisfied , we have either @xmath316 and thus @xmath317 , or @xmath318 and thus @xmath319 .",
    "we obtain that @xmath320 . from the previous sequence of inequalities",
    ", we also have @xmath321 .",
    "hence , the total cost is @xmath322 .",
    "[ t : lower - limited ] any algorithm for a robot with limited visibility , exploring polygonal terrains of area @xmath8 , perimeter @xmath4 and with @xmath6 obstacles , produces trajectories of length @xmath14 in some terrains , even if the terrain is known to the robot .    in order to prove our lower bound we present three families of terrains . a terrain in the first family ( cf .",
    "[ fig : lower - unlimited](a ) ) is a square with identical obstacles of diameter @xmath327 located on a @xmath328 grid .",
    "the side of the square is @xmath329 , where @xmath87 is the negligible total area of all @xmath6 obstacles and the total perimeter of all obstacles is @xmath22 . by the same arguments as in the proof of theorem  [ t : lower - unlimited ] ,",
    "any exploration trajectory must be of length at least @xmath330 , which is in @xmath331 . at the same time we have @xmath332 ( @xmath4 can not be smaller ) . a terrain in the second family ( cf .",
    "[ fig : lower - unlimited](b ) ) is a polygon of arbitrarily small area ( without obstacles ) , whose exploration requires a trajectory of size @xmath123 .",
    "a terrain in the third family is the empty square of side @xmath333 .",
    "now we have @xmath334 and @xmath110 .",
    "when the robot traverses a distance @xmath237 , it explores a new area of at most @xmath335 .",
    "so , the robot has to travel a distance @xmath336 to explore such a terrain .",
    "these three families of terrains justify our lower bound .",
    "[ th : main ] consider terrains of area @xmath8 , perimeter @xmath4 and with @xmath6 obstacles .",
    "if either @xmath8 or @xmath6 is known before the exploration , then the exploration of any such terrain can be performed using a trajectory of length @xmath337 , which is asymptotically optimal .",
    "notice that in order to explore a terrain at cost @xmath7 , it is enough to know the parameter @xmath8 or @xmath6 up to a multiplicative constant , rather than the exact value .",
    "this can be proved by a carefull modification of the proof of lemma  [ lem : algak ] . for the sake of clarity",
    ", we stated and proved the weaker version of lemma  [ lem : algak ] , with knowledge of the exact value .",
    "suppose now that no a priori knowledge of any parameters of the terrain is available .",
    "we iterate algorithm @xmath249 or @xmath250 for @xmath8 ( resp .",
    "k ) equal @xmath338 interrupting the iteration and doubling the parameter as soon as the explored area ( resp .",
    "the number of obstacles seen ) exceeds the current parameter value .",
    "the algorithm stops when the entire terrain is explored ( which happens at the first probe exceeding the actual unknown value of @xmath8 , resp .",
    "@xmath6 ) .",
    "we get an exploration algorithm using a trajectory of length @xmath339 , resp . @xmath340 . by interleaving the two procedures we get the minimum of the two costs .",
    "thus we have the following corollary .",
    "consider terrains of area @xmath8 , perimeter @xmath4 and with @xmath6 obstacles .",
    "exploration of any such terrain can be performed without any a priori knowledge at cost differing from the worst - case optimal cost with full knowledge only by a factor @xmath341 ."
  ],
  "abstract_text": [
    "<S> a mobile robot represented by a point moving in the plane has to explore an unknown terrain with obstacles . </S>",
    "<S> both the terrain and the obstacles are modeled as arbitrary polygons . </S>",
    "<S> we consider two scenarios : the _ unlimited vision _ </S>",
    "<S> , when the robot situated at a point @xmath0 of the terrain explores ( sees ) all points @xmath1 of the terrain for which the segment @xmath2 belongs to the terrain , and the _ limited vision _ </S>",
    "<S> , when we require additionally that the distance between @xmath0 and @xmath1 be at most  1 . </S>",
    "<S> all points of the terrain ( except obstacles ) have to be explored and the performance of an exploration algorithm is measured by the length of the trajectory of the robot .    for unlimited vision </S>",
    "<S> we show an exploration algorithm with complexity @xmath3 , where @xmath4 is the total perimeter of the terrain ( including perimeters of obstacles ) , @xmath5 is the diameter of the convex hull of the terrain , and @xmath6 is the number of obstacles . </S>",
    "<S> we do not assume knowledge of these parameters . </S>",
    "<S> we also prove a matching lower bound showing that the above complexity is optimal , even if the terrain is known to the robot . </S>",
    "<S> for limited vision we show exploration algorithms with complexity @xmath7 , where @xmath8 is the area of the terrain ( excluding obstacles ) . </S>",
    "<S> our algorithms work either for arbitrary terrains , if one of the parameters @xmath8 or @xmath6 is known , or for @xmath9-fat terrains , where @xmath9 is any constant ( unknown to the robot ) and no additional knowledge is assumed . </S>",
    "<S> ( a terrain @xmath10 with obstacles is @xmath9-fat if @xmath11 , where @xmath12 is the radius of the smallest disc containing @xmath10 and @xmath13 is the radius of the largest disc contained in @xmath10 . ) </S>",
    "<S> we also prove a matching lower bound @xmath14 on the complexity of exploration for limited vision , even if the terrain is known to the robot .    </S>",
    "<S> * keywords : * mobile robot , exploration , polygon , obstacle </S>",
    "<S> .    [ section ] [ section ] [ section ] [ section ] [ section ] [ section ] [ section ] [ section ]    @xmath15 @xmath16    0.178 in 0.05 in 0.0 in </S>"
  ]
}