{
  "article_text": [
    "paper focuses on distributed estimation and tracking algorithms for non - linear , non - gaussian , data fusion problems in networked systems . distributed state estimation has been the  center of attention recently both for linear  @xcite@xcite and non - linear systems  @xcite@xcite with widespread applications such as autonomous navigation of unmanned aerial vehicles ( uav )  @xcite , localization in robotics  @xcite , tracking / localization in underwater sensor networks  @xcite , distributed state estimation for power distribution networks  @xcite , and bearings - only target tracking  @xcite .",
    "a major problem in distributed estimation networks is unreliable communication ( especially in large and multi - hop networks ) , which results in communication delays and information loss",
    ". referred to as intermittent network connectivity  @xcite , this issue has been investigated broadly in the context of the kalman filter  @xcite .",
    "such methods are , however ,  limited to linear systems and have not yet been extended to non - linear systems .",
    "the paper addresses this gap .",
    "* distributed estimation : * traditionally , state estimation algorithms have been largely centralized with participating nodes communicating their raw observations ( either directly or indirectly via a multi - hop relay ) to the fusion centre : a central processing unit responsible for computing the overall estimate . although optimal , such centralized approaches are unscalable and susceptible to failure in case the fusion centre breaks down .",
    "the alternative is to apply distributed estimation algorithms , where : ( i )  there is no fusion center ; ( ii )  the sensor nodes do not require global knowledge of the network topology , and ; ( iii )  each node exchanges data only within its immediate neighbourhood limited to a few local nodes .",
    "the distributed estimation approaches fall under two main categories :  message passing schemes  @xcite , where information flows in a sequential , _ pre - defined _ manner from a node to one of its neighboring nodes via a cyclic path till the entire network is traversed , and ;  diffusive schemes  @xcite@xcite ,  @xcite@xcite , where each node communicates its local information by interacting with its immediate neighbors . in dynamical environments with intermittent connectivity , where frequent changes in the underlying network topology due to mobility , node failure , and link failure are a common practice , diffusive approaches significantly improve the robustness at the cost of an increased communications overhead . in diffusive schemes , the type of information communicated across the network varies from local observations , their likelihoods , or some other function of local observations  @xcite , to state posterior / filtering estimates evaluated at individual nodes  @xcite .",
    "communicating state posteriors is advantageous over sharing likelihoods in applications with intermittent connectivity . in theory ,",
    "any loss of information in error prone networks is contained in the following posteriors and is , therefore , automatically compensated for as the distributed algorithms iterate .",
    "a drawback of communicating the local state estimates stems from their correlated nature  @xcite .",
    "channel filters  @xcite and their non - linear extensions  @xcite ( proposed to ensure consistency of the fused estimates by removing this redundant past information ) associate an additional filter to each communication link and track the redundant information between a pair of neighbouring nodes local estimates .",
    "however , channel filters are limited to tree - connected topologies and can not be generalized to random / mobile networks .",
    "alternatively , consensus - based approaches have been recently introduced to extend distributed estimation to arbitrary network topologies with the added advantage that the algorithm is somewhat immune to node and/or communication failures  @xcite . the consensus - based distributed kalman filter  @xcite@xcite have been widely explored for estimation / tracking problems in linear systems with intermittent connectivity but there is still a need for developing distributed estimation approaches for non - linear systems .",
    "in addition , the current non - linear consensus - based distributed approaches suffer from three drawbacks .",
    "first , the common practice  @xcite@xcite@xcite of limiting the global posterior to gaussian distribution is sub - optimal .",
    "second , common past information between neighbouring nodes gets incorporated multiple times  @xcite .",
    "finally , these approaches  @xcite@xcite , require the consensus algorithm to converge between two successive observations ( thus ignoring the intermittent communication connectivity issue in the observation framework ) .",
    "the performance of the distributed approaches degrade substantially if consensus is not reached within two consecutive observations .    motivated by distributed navigation and tracking applications within large networked systems , we propose a multi - rate framework for distributed implementation of the particle filter .",
    "the proposed framework is suitable for scenarios where the network connectivity is intermittent and consensus can not be reached between two observations .",
    "below , we summarize the key contributions of the paper .    *",
    "fusion filter : * the paper proposes a consensus / fusion based distributed implementation of the particle filter ( cf / dpf ) for non - linear systems with non - gaussian excitation .",
    "in addition to the localized particle filters , referred to as the local filters , the cf / dpf introduces separate consensus - based filters , referred to as the fusion filters ( one per sensor node ) , to derive the global posterior distribution by consistently fusing local filtering densities in a distributed fashion . the localized implementation of the particle filter and the fusion filter used to achieve consensus",
    "are run in parallel , possibly at different rates .",
    "achieving consensus between two successive iterations of the local filters is , therefore , no longer a requirement .",
    "the cf / dpf compensates for the common past information between local estimates based on an optimal non - linear bayesian fusion rule  @xcite .",
    "the fusion concept used in the cf / dpf is similar to  @xcite and  @xcite , where separate channel filters ( one for each communication link ) are deployed to consistently fuse local estimates .",
    "[ g1 ] compares the proposed cf / dpf framework with channel filter framework and the centralized architecture . in the channel filter framework ( fig .",
    "[ g1](c ) ) , the number of channel filters implemented at each node equals the number of connections it has with its neighbouring nodes and , therefore , varies from one node to another .",
    "these filters are in addition to the localized filters run at nodes . in the cf / dpf ( fig .",
    "[ g1](a ) ) each node only implements one additional filter irrespective of the  neighbouring connections . finally , the tree - connect network shown in  fig .  [ g1](c ) can not be extended to any arbitrary network , for example the one shown in fig .",
    "[ g1](a ) .",
    "the cf / dpf is applicable to any network  configuration .",
    "modified fusion filters : * in the cf / dpf , the fusion filters can run at a rate different form that of the local filters .",
    "we further investigate this multi - rate nature of the proposed framework , recognize three different scenarios , and describe how the cf / dpf handles each of them .",
    "for the worse - case scenario with the fusion filters lagging the local filters exponentially , we derive a modified - fusion filter algorithm that limits the lag to an affordable delay .    *",
    "computing posterior cramr - rao lower bound : * in order to evaluate the performance of the proposed _ distributed _ , _ non - linear _ framework , we derive the posterior cramr - rao lower bound ( pcrlb ) , ( also referred in literature as the bayesian crlb ) for the distributed architecture .",
    "the current pcrlb approaches  @xcite assume a centralized architecture or a hierarchical architecture  @xcite .",
    "the exact expression for computing the pcrlb for the distributed architecture is not yet available and only  an approximate expression  @xcite has recently been derived .",
    "the paper derives the exact expression for computing the pcrlb for the distributed architecture . following tichavsky _",
    "et al . _",
    "@xcite , we provide a riccati - type recursion that sequentially determines the exact fim from localized fims of the distributed estimator .",
    "the rest of paper is organized as follows .",
    "section  [ sec : background ] introduces notation and reviews the centralized particle filter as well as the average consensus approaches . the proposed cf / dpf algorithm and the fusion filter",
    "are described in section  [ sec : gcf / dpf ] .",
    "the modified fusion filter is presented in section  [ sec : mff ] .",
    "section  [ sec : pcrlb ] derives an expression for computing the pcrlb for a distributed architecture .",
    "section  [ sec : simu ] illustrates the effectiveness of the proposed framework in tracking applications through monte carlo simulations .",
    "finally , in section  [ sec : conclusion ] , we conclude the paper .",
    "the optimal bayesian filtering recursion for iteration @xmath6 is given by @xmath15 the particle filter is based on the principle of sequential importance sampling  @xcite , a suboptimal technique for implementing recursive bayesian estimation ( eqs .",
    "( [ ar : b11 ] ) and  ( [ ar : b12 ] ) ) through monte carlo simulations .",
    "the basic idea behind the particle filters is that the posterior distribution @xmath16 is represented by a collection of weighted random particles @xmath17 derived from a proposal distribution @xmath18 with normalized weights @xmath19 , for @xmath20 , associated with the vector particles .",
    "the particle filter implements the filtering recursions approximately by propagating the weighted particles , ( @xmath21 ) , using the following recursions at iteration @xmath6 .",
    "@xmath22 where @xmath23 stands for the proportional sign and the proposal distribution satisfies the following  factorization @xmath24 the accuracy of this importance sampling approximation depends on how close the proposal distribution is to the true posterior distribution .",
    "the optimal choice  @xcite for the proposal distribution that minimizes the variance of importance weights is the filtering density conditioned upon @xmath25 and @xmath26 , i.e. , @xmath27 because of the difficulty in sampling eq .",
    "( [ sec.3:eq.8 ] ) , a common choice  @xcite for the proposal distribution is the transition density , @xmath28 , referred to as the sampling importance resampling ( sir ) filter , where the weights are pointwise evaluation of the likelihood function at the particle values ,  i.e. , @xmath29 .    _",
    "b. average consensus algorithms _ [ sec : aca ] the average consensus algorithm  @xcite considered in the manuscript is represented by @xmath30 where @xmath31(t ) is the consensus state variable(s ) at node @xmath4 , for ( @xmath3 ) , @xmath32 is the consensus time index that is different from the filtering time index @xmath6 , and @xmath33 represents the set of neighbouring nodes for node  @xmath4 .",
    "the convergence properties of the average consensus algorithms are reviewed in  @xcite .",
    "please refer to  @xcite for further details on consensus algorithms .",
    "the cf / dpf implementation runs two localized particle filters at each sensor node as shown in fig .  [ g1 ] .",
    "the first filter , referred to as the local filter , comes from the distributed implementation of the particle filter described in section  [ sec : cpf ] and is based only on the local observations @xmath34 .",
    "the cf / dpf introduces a second particle filter at each node , referred to as the fusion filter , which estimates the global posterior distribution @xmath35 from local distributions @xmath36 and @xmath37 .",
    "our distributed implementation is based on the following model @xmath38 for sensor nodes @xmath39 . in other words ,",
    "the entire state vector @xmath40 is estimated by running one localized particle filter at each node .",
    "these filters , referred to as the local filters , come from the distributed implementation of the particle filter and are based only on local observations @xmath34 .",
    "in addition to updating the particles and their associated weights , the local filter at node @xmath4 provides estimates of the local prediction distribution @xmath41 from the particles as explained below . + * computation and sampling of the prediction distribution : * from the chapman - kolmogorov equation ( eq .  ( [ ar : b11 ] ) ) , a sample based approximation of the prediction density @xmath37 is expressed as @xmath42 which is a continuous mixture . to generate random particles from such a mixture density ,",
    "a new sample @xmath43 is generated from its corresponding mixture @xmath44 in eq .",
    "( [ chap5:sec3:part1:eq13 ] ) .",
    "its weight @xmath45 is the same as the corresponding weight for @xmath46 .",
    "the prediction density is given by @xmath47 once the random samples are generated , the minimum mean square error estimates ( mmse ) of the parameters can be computed .",
    "_ b. fusion filter _ [ sec : ff ] the cf / dpf introduces a second particle filter at each node , referred to as the fusion filter , which computes an estimate of the global posterior distribution @xmath35 . being a particle filter itself , implementation of the fusion filter requires the proposal distribution and the weight update equation .",
    "theorem  [ fprotocol ]  @xcite expresses the global posterior distribution in terms of the local filtering densities , which is used for updating the weights of the fusion filter .",
    "the selection of the proposal distribution is explained later in section  iii - e . in the following discussion , the fusion filter s particles and their associated weights at node @xmath4",
    "are denoted by @xmath48 .",
    "[ fprotocol ] assuming that the observations conditioned on the state variables and made at node @xmath4 are independent of those made at node @xmath49 , ( @xmath50 ) , the global posterior distribution for a @xmath0sensor network  is @xmath51 where the last term can be factorized as follows @xmath52    the proof of theorem  [ fprotocol ] is included in appendix  [ app : a ] .",
    "note that the optimal distributed protocol defined in eq .",
    "( [ chap3:sec2:eq8 ] ) consists of three terms : ( i ) product of the local filtering distribution @xmath53 which depends on local observations ; ( ii ) product of local prediction densities @xmath54 , which is again only based on the local observations and represent the common information between neighboring nodes , and ; ( iii ) global prediction density @xmath55 based on eq .",
    "( [ chap5:sec3:part1:eq2 ] ) . the fusion rule , therefore , requires consensus algorithms to be run for terms ( i ) and ( ii ) .",
    "the proposed cf / dpf computes the two terms separately ( as described later ) by running two consensus algorithms at each iteration of the fusion filter .",
    "an alternative is to compute the ratio ( i.e. , proportional to the local likelihood ) at each node and run one consensus algorithm for computing the ratio term . in the cf / dpf",
    ", we propose to estimate the numerator and denominator of eq .   separately because maintaining the local filtering and prediction distributions is advantageous in networks with intermittent connectivity as it allows the cf / dpf to recover from loss of information due to delays in convergence .",
    "maintaining the likelihood prevents the recovery of the cf / dpf in such cases . _ c. weight update equation _ assume that the local filters have reached steady state at iteration @xmath6 , i.e. , the local filter s computation is completed up to and including time iteration @xmath6 where a particle filter based estimate of the local filtering distribution is available . the weight update equation for the fusion filter",
    "is given by @xmath56 the cf / dpf is derived based on the global posterior @xmath57 which is the standard approach in the particle filter literature  @xcite .",
    "further , we are only interested in a filtered estimate of the state variables @xmath58 at each iteration . following  @xcite we ,",
    "therefore , approximate @xmath59 .",
    "the proposal density is then dependent only on @xmath40 and @xmath26 .",
    "in such a scenario , one can discard the history of the particles @xmath60 at previous iterations  @xcite .",
    "substituting eq .",
    "( [ chap5:sec3:part1:eq2 ] ) in eq .",
    "( [ chap3:sec2:eq8 ] ) and using the result together with eq .",
    "( [ sec.3:eq.6 ] ) in eq .",
    "( [ chap5:sec3:part1:eq4 ] ) , the weight update equation is given by @xmath61 observe that only the first fraction in eq .",
    "( [ chap5:sec3:part1:eq5 ] ) requires all nodes to participate .",
    "given the weights @xmath62 from the previous iteration , eq .",
    "( [ chap5:sec3:part1:eq5 ] ) requires the following distributions @xmath63 the numerator of the second fraction in eq .",
    "( [ chap5:sec3:part1:eq5 ] ) requires the transitional distribution @xmath28 , which is known from the state model .",
    "its denominator requires the proposal distribution @xmath64 .",
    "below , we show how the three terms ( eq .  ( [ term1 ] ) and the proposal distribution ) are determined . _",
    "d. distributed computation of product densities _ distributions in eq .",
    "( [ term1 ] ) are not determined by transferring the whole particle vectors and their associated weights between the neighboring nodes due to an impractically large number of information transfers .",
    "further , the localized posteriors are represented as a dirac mixture in the particle filter .",
    "two separate dirac mixtures may not have the same support and their multiplication could possibly be zero . if not , the product may not represent the true product density accurately . in order to tackle these problems ,",
    "a transformation is required on the dirac function particle representations by converting them to continuous distributions prior to communication and fusion .",
    "gaussian distributions  @xcite , grid - based techniques  @xcite , gaussian mixture model ( gmm )  @xcite and parzen representations  @xcite are different parametric continuous distributions used in the context of the distributed particle filter implementations .",
    "the channel filter framework  @xcite fuses only two local distributions , therefore , the local pdfs can be modeled  @xcite with such complex distributions .",
    "incorporating these distributions in the cf / dpf framework is , however , not a trivial task because the cf / dpf computes the product of @xmath0 local distributions .",
    "the use of a complex distribution like gmm is , therefore , computationally prohibitive .    in order to tackle this problem , we approximate the product terms in eq .",
    "( [ chap5:sec3:part1:eq5 ] ) with gaussian distribution which results in local filtering and prediction densities to be normally distributed as follows @xmath65 where @xmath66 and @xmath67 are , respectively , the mean and covariance of local particles at node @xmath4 during the filtering step of iteration @xmath6 .",
    "similarly , @xmath68 and @xmath69 are , respectively , the mean and covariance of local particles at node @xmath4 during the prediction step .",
    "it should be noted that we only approximate the product density for updating the weights with a gaussian distribution and the global posterior distribution is not restricted to be gaussian .",
    "the local statistics at node @xmath4 are computed as @xmath70 reference  @xcite shows that the product of @xmath0 multivariate normal distributions is also normal , i.e. , @xmath71 where @xmath72 is a normalization term ( reference  @xcite includes the proof ) .",
    "parameters @xmath73 and @xmath74 are @xmath75 similarly , the product of local prediction densities ( term  ( [ term2 ] ) ) is modeled with a gaussian density @xmath76 , where the parameters @xmath77 and @xmath78 are computed as follows @xmath79 the parameters of the product distributions only involves average quantities and can be provided using average consensus algorithms as follows :    * for ( @xmath80 ) , node @xmath4 initializes its consensus states to @xmath81 , @xmath82 , @xmath83 , and @xmath84 , and then eq .  ( [ sec.4:eq.5 ] )",
    "is used to reach consensus with @xmath85 used instead of @xmath86 in eq .",
    "( [ sec.4:eq.5 ] ) for the first consensus run .",
    "similarly , @xmath87 is used instead of @xmath86 for the second run and so on .",
    "* once consensus is reached , parameters @xmath66 and @xmath67 are computed as follows @xmath88    based on aforementioned approximation , the weight update equation of the fusion filter ( eq .  ( [ chap5:sec3:part1:eq5 ] ) ) is @xmath89 eq .  ( [ chap5:sec3:part1:eq15 ] ) requires the proposal distribution @xmath90 , which is discussed next .",
    "_ e. proposal distribution _",
    "[ sec : prop ] in this section , we describe three different proposal distributions in cf / dpf .",
    "* @xmath91 sir fusion filter : * the most common strategy is to sample from the probabilistic model of the state evolution , i.e. , to use transitional density @xmath92 as proposal distribution .",
    "the simplified weight update equation for the sir fusion filter is obtained from eq .",
    "( [ chap5:sec3:part1:eq15 ] ) as follows @xmath93 this sir fusion filter fails if a new measurement appears in the tail of the transitional distribution or when the likelihood is too peaked in comparison with the transitional density .    * @xmath94 product density as proposal distribution : * we are free to choose any proposal distribution that appropriately considers the effect of new observations and is close to the global posterior distribution .",
    "the product of local filtering densities is a reasonable approximation of the global posterior density as such a good candidate for the proposal distribution , i.e. , @xmath95 which means that we generate particles @xmath96 are generated from @xmath97 .",
    "in such a scenario , the weight update equation ( eq .",
    "( [ chap5:sec3:part1:eq15 ] ) ) simplifies to @xmath98 next we justify that the product term is a good choice and a near - optimal approximation of the optimal proposal distribution ( eq .  ( [ sec.3:eq.8 ] ) ) .",
    "assume at iteration @xmath6 , node @xmath4 , for ( @xmath3 ) computes an unbiased local estimate @xmath99 of the state variables @xmath40 from its particle - based representation of the filtering distribution with the corresponding error and error covariance denoted by @xmath100 and @xmath101 . when the estimation error @xmath102 and @xmath103 , for ( @xmath104 ) and @xmath105 are uncorrelated , the optimal fusion of @xmath0 unbiased local estimates @xmath99 in linear minimum variance scene is shown  @xcite to be given by @xmath106 where @xmath107 is the overall estimate obtained from @xmath108 with error covariance @xmath109 .",
    "( [ ext : cf / dpf : eq4 ] ) is the same as eq .",
    "( [ chap5:sec3:part1:eq9 - 1 ] ) , which describes the statistics of the product of @xmath0 normally distributed densities .",
    "the optimal proposal distribution is also a filtering density  @xcite , therefore , the proposal distribution defined in eq .",
    "( [ chap5:sec3:part1:eq10 ] ) is a good choice that simplifies the update equation of the fusion filter .",
    "further , eq .  ( [ chap5:sec3:part1:eq10 ] ) is a reasonable approximation of the optimal proposal distribution . from the framework of unscented kalman filter and unscented particle filter , it is well known  @xcite that approximating distributions will be advantageous over approximating non - linear functions .",
    "the drawback with this proposal density is the impractical assumption that the local estimates are uncorrelated .",
    "we improve the performance of the fusion filter using a better approximation of the optimal proposal distribution , which is described next .",
    "* @xmath110 gaussian approximation of the optimal proposal distribution : * we consider the optimal solution to the fusion protocol ( eq .",
    "( [ chap3:sec2:eq8 ] ) ) when local filtering densities are normally distributed .",
    "in such a case , @xmath111 is also normally distributed  @xcite with mean @xmath112 and covariance @xmath113 @xmath114 .",
    "\\label{eq1 - 2:sec4}\\end{aligned}\\ ] ] the four terms @xmath115 , @xmath116 , @xmath117 , and @xmath118 are already computed and available at local nodes as part of computing the product terms .",
    "fusion rules in eqs .",
    "( [ eq1 - 1:sec4 ] ) and ( [ eq1 - 2:sec4 ] ) are obtained based on the track fusion without feedback  @xcite .",
    "in such a scenario , particles @xmath119 are drawn from @xmath120 and the weight update equation ( eq .  ( [ chap5:sec3:part1:eq11 ] ) )",
    "is given by @xmath121 the various steps of the fusion filter are outlined in algorithm  [ algo : fusionfilter ] .",
    "the filtering step of the cd / dpf is based on running the localized filters at each node followed by the fusion filter , which computes the global posterior density by running consensus algorithm across the network . at the completion of the consensus step ,",
    "all nodes have the same global posterior available . as a side note to our discussion",
    ", we note that the cf / dpf does not incorporate any feedback from the fusion filters to the localized filters to provide sufficient time for the fusion filter to converge .",
    "the main advantage of the feedback is to reduce the error of the local filters which will be considered as  future work .",
    "finally , a possible future extension of the cf / dpf is to use non - parametric models , e.g. , support vector machines ( svm )  @xcite , instead , for approximating the product terms .",
    "an important task in cf / dpf is to assure that the localized and fusion filters do not lose synchronization .",
    "this issue is addressed in section  [ sec : mff ] .",
    "@xmath122 - fusion filter s particles and associated weights .",
    "@xmath123 fusion filter s updated particles and associated weights .",
    "@xmath124 localfilter@xmath125    dofusion@xmath126 computes @xmath127 for numerator of eq .",
    "( [ chap3:sec2:eq8 ] ) .",
    "dofusion@xmath128 computes @xmath129 for denominator of  ( [ chap3:sec2:eq8 ] ) .",
    "@xmath130 generate particles @xmath131 by sampling proposal distribution defined in section  iii - e .",
    "@xmath130 compute weights @xmath132 using eq .",
    "( [ chap5:sec3:part1:eq11 ] ) .",
    "if degeneracy observed @xmath133 = resample@xmath134 .",
    "_ f. computational complexity _ [ sec : cc ] in this section , we provide a rough comparison of the computational complexity of the cf / dpf versus that of the centralized implementation .",
    "because of the non - linear dynamics of the particle filter , it is somewhat difficult to derive a generalized expression for its computational complexity .",
    "there are steps that can not be easily evaluated in the complexity computation of the particle filter such as the cost of evaluating a non - linear function ( as is the case for the state and observation models )  @xcite . in order to provide a rough comparison",
    ", we consider below a simplified linear state model with gaussian excitation and uncorrelated gaussian observations . following the approach proposed in  @xcite",
    ", the computational complexity of two implementations of the particle filter is expressed in terms of flops , where a flop is defined as addition , subtraction , multiplication or division of two floating point numbers .",
    "the computational complexity of the centralized particle filter for @xmath0node network with @xmath135 particles is of @xmath136 .",
    "the cf / dpf runs the local filter at each observation node which is similar in complexity to the centralized particle filter except that the observation ( target s bearing at each node ) is a scalar . setting @xmath137 , the computational complexity of the local filter is of @xmath138 per node , where @xmath139 is the number of particles used by the local filter .",
    "there are two additional components in the cf / dpf : ( i ) the fusion filter which has a complexity of @xmath140 per node where @xmath141 is the number of particles used by the fusion filter , and ; ( ii ) the cf / dpf introduces an additional consensus step which has a computational complexity of @xmath142 .",
    "the associated convergence time @xmath143 provides the asymptotic number of consensus iterations required for the error to decrease by the factor of @xmath144 and is expressed in terms of the asymptotic convergence rate @xmath145 .",
    "based on  @xcite , @xmath146 , where @xmath147 is the eigenvalue of the consensus matrix @xmath148 .",
    "the overall computational complexity of the cf / dpf is , therefore , given by @xmath149 compared to the computational complexity @xmath136 of the centralized implementation .",
    "since the computational complexity of the two implementations involve different variables , it is difficult to compare them subjectively . in our simulations ( explained in section  [ sec : simu ] ) , the value of the variables are : @xmath150 , @xmath151 , @xmath152 , @xmath153 , and @xmath154 for the network in fig .",
    "[ target_track](a ) which results in the following rough computational counts for the two implementations : centralized implementation : @xmath155 , and cf / dpf : @xmath156 .",
    "this means that the two implementations have roughly the same computational complexity for the bot simulation of interest to us .",
    "we also note that the computational burden is distributed evenly across the nodes in the cf / dpf , while the fusion center performs most of the computations in the centralized particle filter .",
    "this places an additional power energy constraint on the fusion center causing the system to fail if the power in the fusion center drains out .",
    "in the cf / dpf , the local filters and the fusion filters can run out of synchronization due to intermittent network connectivity .",
    "the local filters are confined to their sensor node and unaffected by loss of connectivity .",
    "the fusion filters , on the other hand , run consensus algorithms . the convergence of these consensus algorithms is delayed if the communication bandwidth reduced . in this section",
    "we develop ways of dealing with such intermittent connectivity issues .",
    "first , let us introduce the notation .",
    "we assume that the observations arrive at constant time intervals of @xmath157 .",
    "each iteration of the local filters is performed within this interval , which we will refer to as the local filter s estimation interval .",
    "the duration ( the fusion filters s estimation interval ) of the update cycle of the fusion filter is denoted by @xmath158 .",
    "[ mff ] illustrates three scenarios dealing with different fusion filter s estimation intervals .",
    "[ mff](a ) is the ideal scenario where @xmath159 and the fusion filter s consensus step converges before the new iteration of the local filter .",
    "in such a scenario , the local and fusion filters stay synchronized .",
    "[ mff](b ) shows the second scenario when the convergence rate of the fusion filter varies according to the network connectivity . under regular connectivity @xmath160 and limited connectivity loesses",
    ", the fusion filters will manage to catch up with the localized filters in due time .",
    "[ mff](c ) considers a more problematic scenario when @xmath161 .",
    "even with ideal connectivity , the fusion filter will continue to lag the localized filters with no hope of its catching up .",
    "the bottom two timing diagrams in fig .",
    "[ mff](c ) refer to this scenario with @xmath162 . as illustrated",
    ", the lag between the fusion filter and the localized filters grows exponentially with time in this scenario .",
    "an improvement to the fusion filter is suggested in the top timing diagram of fig .",
    "[ mff](c ) , where the fusion filter uses the most recent local filtering density of the localized filters .",
    "this allows the fusion filter to catch up with the localized filter even for cases @xmath161 .",
    "such a modified fusion implementation requires an updated fusion rule for the global posterior density , which is considered next .    at iteration @xmath163",
    ", we assume that node @xmath4 , for ( @xmath3 ) , has a particle - based approximation of the local filtering distributions @xmath164 , while its fusion filter has a particle - based approximation of the global posterior distribution @xmath57 for iteration @xmath6 . in other words",
    ", the fusion filters are lagging the localized filters by @xmath165 iterations .",
    "in the conventional fusion filter the statistics of @xmath166 , for ( @xmath3 ) are used in the next consensus step of the fusion filter which then computes the global posterior @xmath167 based on theorem  [ fprotocol ] .",
    "the modified  fusion filter uses the most recent local filtering distributions @xmath164 according to theorem  [ fprotocol4 ] .",
    "[ fprotocol4 ] conditioned on the state variables , assume that the observations made at node @xmath4 are independent of the observations made at node @xmath49 , ( @xmath50 ) .",
    "the global posterior distribution for a @xmath0sensor network at iteration @xmath168 is then given by @xmath169    the proof of theorem  [ fprotocol4 ] is included in appendix  [ app : d ] .",
    "in the consensus step of the modified fusion filter , two average consensus algorithms are used to compute @xmath170 and @xmath171 , i.e. , @xmath172 @xmath173 instead of computing @xmath174 and @xmath175 as was the case for the conventional fusion filter .",
    "the modified fusion filter starts with a set of particles @xmath176 approximating @xmath57 and generates updated particles @xmath177 for @xmath178 using the following weight update equation @xmath179 which is obtained directly from eq .",
    "( [ ar - new1 ] ) .",
    "note that the normal approximation in eqs .",
    "( [ mff : eq1])([ar - new2 ] ) are similar to the ones used in the conventional fusion filter .",
    "furthermore , we note that the modification requires prediction of the particles from iteration @xmath6 all the way to @xmath168 in order to evaluate the second term on the right hand side of eq .",
    "( [ ar - new2 ] ) .",
    "algorithm  [ algo : modifiedfusionfilter ] outlines this step and summarizes the modified fusion filter .",
    "@xmath180 - fusion filter s particles and associated weights .",
    "@xmath181 updated particles and associated weights .",
    "@xmath182 savegaussian@xmath183    @xmath184 savegaussian@xmath185    @xmath186 savegaussian@xmath187 .",
    "@xmath188 savegaussian@xmath189 .",
    "@xmath190 dofusion@xmath191 .",
    "@xmath192 dofusion@xmath193 .",
    "@xmath194 .",
    "@xmath195 .",
    "compute weights @xmath196 using eq .",
    "( [ ar - new2 ] ) .",
    "considering the non - linear filtering problem modeled in eqs .",
    "( [ sec.3:eq.1.1 ] ) and  ( [ sec.3:eq.1.2 ] ) and the posterior distribution ( eq .  ( [ chap3:sec2:eq8 ] ) ) used in developing the cf / dpf , the section computes the posterior cramr - rao lower bound ( pcrlb ) for the distributed architecture .",
    "we note that the pcrlb is independent of the estimation mechanism and the bound should be the same for both centralized and distributed architectures .",
    "the question is whether the centralized expressions for computing the pcrlb are applicable to compute the pcrlb for other topologies , i.e. , the hierarchical and distributed ( decentralized ) architectures .",
    "reference  @xcite considers a hierarchical architecture with a central fusion center and shows that the centralized expressions can be used directly for the hierarchical case .",
    "the same authors argue in  @xcite that the centralized expressions are no longer applicable for distributed / decentralized architectures .",
    "the exact expression for computing the pcrlb for the distributed architecture is not yet available and only an approximate expression  @xcite has recently been derived . in this section ,",
    "we derive the exact expression for computing the pcrlb for the distributed topology .",
    "we note that our result is not restricted to the particle filter or the cf / dpf but is also applicable to any other distributed estimation approach .    the pcrlb inequality  @xcite states that the mean square error ( mse ) of the estimate @xmath197 of the state variables @xmath198 is lower bounded by @xmath199^{-1},\\!\\!\\!\\!\\end{aligned}\\ ] ] where @xmath200 is the expectation operator .",
    "matrix @xmath201 is referred to as the fim  @xcite derived from the joint probability density function ( pdf ) @xmath202 .",
    "let @xmath203 and @xmath204 , respectively , be operators of the first and second order partial derivatives given by @xmath205^t $ ] and @xmath206 .",
    "one form of the fisher information matrix @xmath201 is defined as  @xcite @xmath207 an alternative expression for the fim can be derived from the factorization @xmath208 .",
    "since @xmath209 is independent of the state variables , we have @xmath210 we now describe the centralized sequential formulation of the fim .      decomposing @xmath198 as @xmath211^t$ ] in @xmath212 , eq .",
    "( [ ext.crlb.2 ] ) simplifies to @xmath213 = \\mathbb{e}\\bigg\\ { -1\\times \\left [ \\begin{array}{ll}\\label{ext.crlb.4 } \\delta^{\\x(0:k-1)}_{\\x(0:k-1 ) }   & \\delta^{\\x(k)}_{\\x(0:k-1 ) } \\\\",
    "\\delta^{\\x(0:k-1)}_{\\x(k ) }   & \\delta^{\\x(k)}_{\\x(k ) } \\\\ \\end{array } \\right ] \\log p\\big(\\x(0\\!:\\!k)|\\z(1\\!:\\!k)\\big ) \\bigg\\ } , \\nonumber\\end{aligned}\\ ] ] provided that the expectations and derivatives exist .",
    "the information submatrix @xmath214 for estimating @xmath40 is given by the inverse of the ( @xmath215 ) right - lower block of @xmath216^{-1}$ ] .",
    "the information submatrix is computed using the matrix inversion lemma  @xcite and given by @xmath217 proposition  [ pro1 ]  @xcite derives @xmath214 recursively without manipulating the large ( @xmath218 ) matrix @xmath219 .",
    "the initial condition is given by @xmath220 .",
    "[ pro1 ] the sequence @xmath221 of local posterior information sub - matrices for estimating state vectors @xmath40 at node @xmath4 , for ( @xmath3 ) , obeys the following recursion @xmath222 @xmath223^t \\!\\!\\!\\!= \\mathbb{e}\\big\\{\\!\\!-\\delta^{\\x(k+1)}_{\\x(k ) } \\log p\\big(\\x(k+1)|\\x(k)\\big)\\!\\big\\}~\\\\ & & \\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\bm{d}^{22}(k ) = \\mathbb{e } \\big\\ { -\\delta^{\\x(k+1)}_{\\x(k+1 ) } \\log p\\big(\\x(k+1)|\\x(k)\\big)\\big\\}+\\underbrace{\\mathbb{e } \\big\\ { -\\delta^{\\x(k+1)}_{\\x(k+1 ) } \\log p\\big(\\z(k\\!+\\!1)|\\x(k\\!+\\!1)\\big)}_{\\bm{j}(\\z(k+1))}\\big\\ } , \\label{ext.crlb.10.2}\\end{aligned}\\ ] ]    the proof of proposition  [ pro1 ] is given in  @xcite . conditioned on the state variables ,",
    "the observations made at different nodes are independent , therefore , @xmath224",
    "@xcite in eq .",
    "( [ ext.crlb.10.2 ] ) is simplifies to @xmath225 in other words , the expression for @xmath226 ( eq .",
    "( [ ext.crlb.1 ] ) ) requires distributed information ( sensor measurement ) only for computing @xmath224 .",
    "other terms in eq .",
    "( [ ext.crlb.1 ] ) can be computed locally . in the next section ,",
    "we derive the distributed pcrlb .",
    "_ b. distributed computation of the pcrlb _    in the sequel , @xmath227 , for ( @xmath228 ) , denotes the local fim corresponding to the local estimate of @xmath198 derived from the local posterior density @xmath229 .",
    "similarly , @xmath230 denotes the local fim corresponding to the local prediction estimate of @xmath231 derived from the local prediction density @xmath232 .",
    "the expressions for @xmath227 and @xmath230 are similar in nature to eq .",
    "( [ cpcrlb ] ) except that the posterior density @xmath57 is replaced by their corresponding local posteriors .",
    "the local fim @xmath233 is given by the inverse of the ( @xmath234 ) right - lower block of @xmath235^{-1}$ ] .",
    "similarly , the prediction fim @xmath236 is given by the inverse of the ( @xmath234 ) right - lower block of @xmath237^{-1}$ ] .",
    "the problem we wish to solve is to compute the global information sub - matrix , denoted by @xmath238 , as a function of the local fims @xmath239 and local prediction fims @xmath236 , for ( @xmath240 ) .",
    "note that @xmath233 can be updated sequentially using eqs .",
    "( [ ext.crlb.1])-([ext.crlb.10.2 ] ) where @xmath241 replaces @xmath224 in eq .",
    "( [ ext.crlb.10.2 ] ) .",
    "proposition  [ pro2 ] derives a recursive formula for computing @xmath236 , i.e. , the fim for the local prediction distribution",
    ".    [ pro2 ] the sequence @xmath242 of the local prediction information sub - matrices for predicting state vectors @xmath40 at node @xmath4 , for ( @xmath3 ) , follows the recursion @xmath243 where @xmath233 is given by eq .",
    "( [ ext.crlb.1 ] ) , @xmath244 , @xmath245 , and @xmath246 are given by eqs .",
    "( [ ext.crlb.10.1])-([ext.crlb.10.2 ] ) and @xmath247    the proof of proposition  [ pro2 ] is included in appendix  [ app : b ] .",
    "theorem  [ pro3 ] is our main result .",
    "it provides the exact recursive formula for computing the distributed fim corresponding to the global estimation from the local fims @xmath248 and local prediction fims @xmath249",
    ".    [ pro3 ] the sequence @xmath250 of information sub - matrices corresponding to global estimates follows the recursion @xmath251 where @xmath252 , @xmath253 , and @xmath254 are given by eqs .",
    "( [ ext.crlb.10.1])-([ext.crlb.10.2 ] ) and @xmath255 where @xmath249 and @xmath256 are defined in prepositions  [ pro1 ] and  [ pro2 ] , respectively .",
    "the proof of theorem  [ pro3 ] is included in appendix  [ app : c ] . in  @xcite , an approximate updating equation based  on the information filter ( an alternative form of the kalman filter )",
    "is proposed for computing @xmath257 at node @xmath4 which is represented in our notation as follows @xmath258 term @xmath249 is given by @xmath259 subtracting eq .",
    "( 46 ) from the above equation and rearranging , we get @xmath260 substituting @xmath261 from eq .  ( 47 ) in eq .   and then substituting the resulting expression of @xmath262 in eq .  , we get @xmath263 substituting eq  ( [ extention.4 ] ) in eq .",
    "( [ extention.2 ] ) results in the following approximated fused fim at node @xmath4 @xmath264 note the differences between eqs .",
    "( [ extention.5 ] ) and  . the second term in the right hand side of eq .",
    "is based on the previous local fim @xmath248 at node @xmath4 thus making it node - dependent , while the corresponding term in eq .",
    "is based on the overall fim from the previous iteration . when the pcrlb is computed in a distributed manner , eq",
    ".   differs from one node to another and is , therefore , not conducive for deriving the overall pcrlb through consensus . to make eq .",
    "node independent , our simulations also compare the proposed exact pcrlb with another approximate expression , which only includes the first two terms of @xmath265 in eq .",
    "( [ ext.crlb.14.1 ] )  i.e. , @xmath266 the expectation terms in eqs .",
    "( [ ext.crlb.10.1])-([ext.crlb.10.2 ] ) ,  ( [ ext.crlb.7-1 ] ) , and  ( [ ext.crlb.14.1 ] ) can be further simplified for additive gaussian noise , i.e. , when @xmath11 and @xmath267 are normally distributed with zero mean and covariance matrices @xmath268 and @xmath69 , respectively . in this case",
    ", we have @xmath269 \\bm{q}^{-1}(k ) [ \\nabla_{\\x(k ) } \\bm{f}^t(k ) \\big]^t \\big\\}\\\\ \\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\ ! & & \\bm{d}^{12}(k ) \\!=\\ !",
    "- \\mathbb{e } \\big\\ { \\big[\\nabla_{\\x(k ) } \\bm{f}^t(k ) \\big ] \\bm{q}^{-1}(k ) = \\big[\\bm{d}^{21}(k)\\big]^t \\\\ \\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\ ! & & \\bm{d}^{22}(k ) \\!=\\ !",
    "\\bm{q}^{-1}(k ) + \\mathbb{e } \\big\\ { \\big[\\nabla_{\\x(k+1 ) } \\bm{g}^{(l)^t}(k\\!+\\!1 ) \\big ] \\bm{r}^{(l)^{-1}}(k\\!+\\!1 ) [ \\nabla_{\\x(k+1 ) } \\bm{g}^{(l)^t}(k\\!+\\!1 ) \\big]^t \\big\\}\\\\ \\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\ ! & & \\bm{b}^{22}(k ) \\!=\\ ! \\bm{q}^{-1}(k),\\end{aligned}\\ ] ] @xmath270 note that theorem  [ pro3 ] ( eqs .",
    "( [ ext.crlb.13])-([ext.crlb.14.3 ] ) ) provides a recursive framework for computing the distributed pcrlb .",
    "further , the proposed distributed pcrlb can be implemented in a distributed fashion because eq .",
    "( [ ext.crlb.14.3 ] ) has only two summation terms involving local parameters .",
    "these terms can be computed in a distributed manner using the average consensus algorithms  @xcite .",
    "other terms in eqs .",
    "( [ ext.crlb.13])-([ext.crlb.14.3 ] ) are dependent only on the process model and can be derived locally . in cases ( non - linear / non - gaussian dynamic systems ) where direct computation of @xmath252 , @xmath254 , @xmath253 , @xmath271 , @xmath261 , and @xmath265 involves high - dimensional integrations , particle filters",
    "can alternatively be used to compute these terms .",
    "a distributed bearing - only tracking ( bot ) application  @xcite is simulated to test the proposed cf / dpf .",
    "the bot problem arises in a variety of nonlinear signal processing applications including radar surveillance , underwater submarine tracking in sonar , and robotics  @xcite .",
    "the objective is to design a practical filter capable of estimating the state kinematics @xmath272 $ ] ( position @xmath273 $ ] and velocity @xmath274 $ ] ) of the target from the bearing angle measurements and prior knowledge of the target s motion .",
    "the bot is inherently a nonlinear application with nonlinearity incorporated either in the state dynamics or in the measurement model depending on the choice of the coordinate system used to formulate the problem . in this paper",
    ", we consider non - linear target kinematics with a non - gaussian observation model . a clockwise coordinated turn kinematic motion model  @xcite given by @xmath275 , \\quad \\mbox{with}\\quad \\omega(k ) = \\frac{a_m}{\\sqrt{(\\dot{x}(k))^2+(\\dot{y}(k))^2}},\\end{aligned}\\ ] ] is considered with the manoeuvre acceleration parameter @xmath276 set to @xmath277  @xcite . a sensor network of @xmath278 nodes with random geometric graph model in a square region of dimension ( @xmath279 )",
    "units is considered .",
    "each sensor communicates only with its neighboring nodes within a connectivity radius of @xmath280 units .",
    "in addition , the network is assumed to be connected with each node linked to at least one other node in the network .",
    "measurements are the target s bearings with respect to the platform of each node ( referenced clockwise positive to the @xmath281-axis ) , i.e. , @xmath282 where @xmath283 are the coordinates of node @xmath4 .",
    "the observations are assumed to be corrupted by the non - gaussian _ target glint noise _",
    "@xcite modeled as a mixture model of two zero - mean gaussians  @xcite , one with a high probability of occurrence and small variance and the other with relatively a small probability of occurrence and high variance .",
    "the likelihood model at node @xmath4 , for ( @xmath3 ) , is described as @xmath284 where @xmath285 in the simulations .",
    "furthermore , the observation noise is assumed to be state dependent such that the bearing noise variance @xmath286 at node @xmath4 depends on the distance @xmath287 between the observer and target .",
    "based on  @xcite , the variance of the observation noise at node @xmath4 is , therefore , given by @xmath288 due to state - dependent noise variance , we note that the signal to noise ratio ( snr ) is time - varying and differs ( within a range of @xmath289db to @xmath290db ) from one sensor node to the other depending on the location of the target .",
    "averaged across all nodes and time , the mean snr is @xmath291db . in our simulations , we chose to incorporate observations made at all nodes in the estimation , however , sensor selection based on the proposed distributed pcrlb can be used , instead , which will be considered  as future work .",
    "both centralized and distributed filters are initialized based on the procedure described  in  @xcite .",
    "* simulation results : * the target starts from coordinates @xmath292 units the position of target the target ( @xmath273 $ ] ) in first three iterations are @xmath293 , @xmath294 , and @xmath295 .",
    "the initial course is set at @xmath296 with the standard deviation of the process noise @xmath297 unit .",
    "the number @xmath135 of vector particles for centralized implementation is @xmath152 .",
    "the number @xmath139 and @xmath298 of vector particles used in each local filter and fusion filter is @xmath299 .",
    "the number of particles for the cf / dpf are selected to keep its computational complexity the same as that of the centralized implementation . to quantify the tracking performance of the proposed methods two scenarios are considered as follows .    * scenario 1 : * accomplishes three goals .",
    "first , we compare the performance of the proposed cf / dpf versus the centralized implementation .",
    "the fusion filters used in the cf / dpf are allowed to converge between two consecutive iterations of the localized particle filters ( i.e. , we follow the timing subplot ( a ) of fig .",
    "[ mff ] ) .",
    "second , we compare the impact of the three proposal distributions listed in section  iii - e on the cf / dpf .",
    "the performance of the cf / dpf is computed for each of these proposal distributions using monte carlo simulations .",
    "third , we plot the proposed pcrlb computed from the distributed configuration and compare it with its counterpart obtained from the centralized architecture that includes a fusion center .    fig .",
    "[ target_track](a ) plots one realization of the target track and the estimated tracks obtained from : ( i ) the cf / dpf ; ( ii ) the centralized implementation , and ; ( iii ) a single node estimation ( stand alone case ) . in the cf / dpf",
    ", we used the gaussian approximation of the optimal proposal distribution as the proposal distribution ( case @xmath300 in section  iii - e ) .",
    "the two estimates from the cf / dpf and the centralized implementation are fairly close to the true trajectory of the target so much so as that they overlap .",
    "the stand alone scenario based on running a particle filter at a single node ( shown as the red circle in fig .",
    "[ target_track](a ) ) fails to track the target .",
    "[ target_track](b ) plots the cumulative distribution function ( cdf ) for the x - coordinate of the target estimated using the centralized and cf / dpf implementations for iterations @xmath301 and @xmath302 .",
    "we note that the two cdfs are close to each other .",
    "[ target_track ] illustrates the near - optimal nature of the cf / dpf .",
    "[ target_rms ] compares the root mean square ( rms ) error curves for the target s position .",
    "based on a monte - carlo simulation of @xmath303 runs , fig .",
    "[ target_rms](a ) plots the rms error curves for the estimated target s position via three cf / dpf implementations obtained using different proposals distributions .",
    "we observe that the sir fusion filter performs the worst in this highly non - linear environment with non - gaussian observation noise , while the outputs of the centralized and the other two distributed implementations are fairly close to each other and approach the pcrlb . since the product fusion filter requires",
    "less computations , the simulations in scenario  @xmath304 are based on the cf / dpf implementation using the product fusion filter .",
    "second , in fig .",
    "[ target_rms](b ) , we compare the pcrlb obtained from the distributed and centralized architectures .",
    "the jacobian terms @xmath305 and @xmath306 , needed for the pcrlb , are computed using the procedure outlined in  @xcite .",
    "it is observed that the bound obtained from the proposed distributed computation of the pcrlb is more accurate and closer to the pcrlb computed from the centralized expressions . as expected , the proposed decentralized pcrlb overlaps with its centralized counterpart .",
    "* scenario 2 : * the second scenario models the timing subplot ( c ) of fig .",
    "the convergence of the fusion filter takes up to two iterations of the localized filters .",
    "the original fusion filter ( algorithm  1 ) is unable to converge within two consecutive iterations of the localized particle filters .",
    "therefore , the lag between the fusion filters and the localized filters in the cf / dpf continues to increase exponentially .",
    "the modified fusion filter described in algorithm  [ algo : modifiedfusionfilter ] is implemented to limit the lag to two localized filter iterations .",
    "the target s track are shown in fig .",
    "[ mff_tt_nl](a ) for the centralized implementation , original and modified fusion filter .",
    "[ mff_tt_nl](b ) shows the rms error curves for the target s position including the rms error resulting from algorithm  @xmath307 .",
    "since consensus is not reached in algorithm  1 , therefore , the fusion estimate is different from one node to another . for algorithm  @xmath307 , fig .",
    "[ mff_tt_nl](b ) includes the rm error associated with a randomly selected node . in fig .",
    "[ mff_tt_nl](b ) , algorithm @xmath307 performs poorly due to consensus not reached , while the modified fusion filter performs reasonably well .",
    "the performance of the modified fusion filter remains close to its centralized counterpart , therefore , it is capable of handling intermittent consensus  steps .    *",
    "scenario 3 : *    in the third scenario , we consider a distributed mobile robot localization problem  @xcite based on angle - only measurements .",
    "this is a good benchmark since the underlying dynamics is non - linear with non - additive forcing terms resulting in a non - gaussian transitional state model .",
    "the state vector of the unicycle robot is defined by @xmath308^t$ ] , where ( @xmath309 ) is the @xmath304d coordinate of the robot and @xmath310 is its orientation .",
    "the velocity and angular velocity are denoted by @xmath311 and @xmath312 , respectively .",
    "the following discrete - time non - linear unicycle model  @xcite represents the state dynamics of the robot @xmath313 where @xmath157 is the sampling time and @xmath314 is the orientation noise term .",
    "the design parameters are : @xmath315 , a mean velocity of @xmath316 cm / s with a standard deviation of @xmath317 cm / s , and a mean angular velocity of @xmath318 rad / s with a standard deviation of @xmath319 rad . because of the presence of sine and cosine functions , the overall state dynamics in eq .  -",
    "are in effect perturbed by non - gaussian terms .",
    "the observation model is similar to the one described for scenario  @xmath307 with non - gaussian and state - dependent observation noise .",
    "the robot starts at coordinates @xmath320 .",
    "[ robot ] ( a ) shows one realization of the sensor placement along with the estimated robot s trajectories obtained from the proposed cf / dpf , centralized particle filter and distributed unscented kalman filter ( ukf )  @xcite implementations . we observe that both centralized particle filter and cf / dpf clearly follow the robot trajectory , while the distributed ukf deviates after a few initial iterations . fig .  [ robot ] ( b ) plots the rms errors obtained form a monte - carlo simulation of @xmath303 runs , which corroborate our earlier observation that the cf / dpf and the centralized particle filter provide better estimates that are close to each other .",
    "the ukf produces a different result with the highest error .",
    "in this paper , we propose a multi - rate framework referred to as the cf / dpf for distributed implementation of the particle filter . in the proposed framework ,",
    "two particle filters run at each sensor node .",
    "the first filter , referred to as the local filter , recursively runs the particle filter based only on the local observations .",
    "we introduce a second particle filter at each node , referred to as the fusion filter , which consistently assimilate local estimates into a global estimate by extracting new information .",
    "our cf / dpf implementation allows the fusion filter to run at a rate different from that of the local filters .",
    "achieving consensus between two successive iterations of the localized particle filter is no longer a requirement .",
    "the fusion filter and its consensus - step are now separated from the local filters , which enables the consensus step to converge without any time limitations .",
    "another contribution of the paper is the derivation of the optimal posterior cramr - rao lower bound ( pcrlb ) for the distributed architecture based on a recursive procedure involving the local fisher information matrices ( fim ) of the distributed estimators .",
    "numerical simulations verify the near - optimal performance of the cf / dpf .",
    "the cf / dpf estimates follows the centralized particle filter closely approaching the pcrlb at the signal to noise ratios that we tested .",
    "theorem  [ fprotocol ] is obtained using : ( i ) the markovian property of the state variables ; ( ii ) assuming that the local observations made at two sensor nodes conditioned on the state variables are independent of each other , and ; ( iii ) using the bayes rule . applying the bayes rule to eq .",
    "( [ chap3:sec2:eq8 ] ) , the posterior distribution can be represented as follows @xmath321 now , using the markovian property of the state variables , eq .",
    "( [ eq : ext.1 .",
    "] ) becomes @xmath322 assuming that the local observations made at two sensor nodes conditioned on the state variables are independent of each other eq .",
    "( [ eq : ext.2 .",
    "] ) becomes @xmath323 using the bays rule , the local likelihood function @xmath324 at node @xmath4 , for ( @xmath3 )  is @xmath325 finally , the result ( eq .  ( [ chap3:sec2:eq8 ] ) ) is provided by substituting eq .",
    "( [ eq : ext.4 .",
    "] ) in eq .  ( [ eq : ext.3 . ] ) .      following the approach in the proof of theorem  [ fprotocol ] ( appendix  [ app : a ] ) , we first write the posterior density at iteration @xmath168 as @xmath326 then the last term is factorized as follows @xmath327 as in eq .",
    "( [ aapd : eq1 ] ) , we continue to expand @xmath328 ( i.e. , the posterior distribution at iteration @xmath329 ) all the way back to iteration @xmath330 to prove eq .",
    "( [ ar - new1 ] ) .      based on eq .",
    "( [ chap3:sec2:eq8 ] ) , term @xmath331 is given by @xmath332 expanding eq .",
    "( [ cpcrlb ] ) for @xmath333 , we get @xmath334 \\!\\ !",
    "\\log p\\big(\\x(0\\!:\\!k\\!\\!+\\!\\!1)|\\z(1\\!:\\!k\\!+\\!1)\\big ) \\bigg\\}\\end{aligned}\\ ] ] substituting eq .",
    "( [ chap3:sec2:eq88 ] ) in eq .",
    "( [ ext.crlb.11 ] ) , it can be shown that @xmath335,\\end{aligned}\\ ] ] where @xmath219 , @xmath336 , @xmath337 and @xmath338 are the same as for eq .",
    "( [ cpcrlb ] ) ; @xmath252 , @xmath254 and @xmath253 are the same as in eqs .",
    "( [ ext.crlb.10.1])-([ext.crlb.10.2 ] ) , and ; @xmath265 is defined in eq .",
    "( [ ext.crlb.14.1 ] ) . block @xmath339 stands for a block of all zeros with the appropriate dimension . the information sub - matrix @xmath238 can be calculated as the inverse of the right lower ( @xmath340 ) sub - matrix of @xmath341^{-1}$ ] as follows @xmath342\\times   \\left [ \\begin{array}{cc } \\bm{a}^{11}(k ) & \\bm{a}^{12}(k ) \\\\",
    "\\bm{a}^{21}(k ) & \\bm{a}^{22}(k)+\\bm{c}^{11}(k ) \\\\ \\end{array } \\right]^{-1 } \\left [ \\begin{array}{c } \\bm{0 } \\\\ \\bm{d}^{12}(k ) \\\\",
    "\\end{array } \\right ] \\\\ & = & \\bm{c}^{22}(k)-\\bm{d}^{21}(k)\\big ( \\bm{j}\\big(\\x(k)\\big)+\\bm{d}^{11}(k)\\big)^{-1}\\bm{d}^{12}(k ) , \\nonumber\\end{aligned}\\ ] ] obtained from the definition of @xmath343 based on eq .",
    "( [ ext.crlb.8 ] ) .",
    "x.  sheng , y.  hu , and p.  ramanathan , `` gmm approximation for multiple targets localization and tracking in wireless sensor network , '' in _ fourth international symposium on information processing in sensor networks _ , pp . 181188 , 2005 .",
    "ong , t.  bailey , b.  upcroft , and h.  durrant - whyte , `` decentralised particle filtering for multiple target tracking in wireless sensor networks , '' in _",
    "conference on information fusion _ , 2008 .",
    "s. farahmand , s.  i. roumeliotis , and g.  b. giannakis ,  set - membership constrained particle filter : distributed adaptation for sensor networks , ",
    "_ ieee trans . on signal processing _ , vol .",
    "9 , pp . 4122 - 4138 , sept .",
    "2011 .",
    "o. hlinka , o. sluciak , f. hlawatsch , p.m. djuric , m. rupp ,  likelihood consensus : principles and application to distributed particle filtering , \" in _ ieee asilomar conference on signals , systems and computers _ , pp.349353 , 2010 ."
  ],
  "abstract_text": [
    "<S> motivated by non - linear , non - gaussian , distributed multi - sensor / agent navigation and tracking applications , we propose a multi - rate consensus / fusion based framework for distributed implementation of the particle filter ( cf / dpf ) . </S>",
    "<S> the cf / dpf framework is based on running localized particle filters to estimate the overall state vector at each observation node . </S>",
    "<S> separate fusion filters are designed to consistently assimilate the local filtering distributions into the global posterior by compensating for the common past information between neighbouring nodes . </S>",
    "<S> the cf / dpf offers two distinct advantages over its counterparts . </S>",
    "<S> first , the cf / dpf framework is suitable for scenarios where network connectivity is intermittent and consensus can not be reached between two consecutive observations . </S>",
    "<S> second , the cf / dpf is not limited to the gaussian approximation for the global posterior density . </S>",
    "<S> a third contribution of the paper is the derivation of the exact expression for computing the posterior cramr - rao lower bound  ( pcrlb ) for the distributed architecture based on a recursive procedure involving the local fisher information matrices ( fim ) of the distributed estimators . </S>",
    "<S> the performance of the cf / dpf algorithm  closely follows the centralized particle filter approaching the pcrlb at the signal to noise ratios that we tested .    </S>",
    "<S> * ieeekeywords : * consensus algorithms , data fusion , distributed estimation , multi - sensor tracking , non - linear systems , and particle filters .    </S>",
    "<S> * edics category : ssp - filt ; ssp - ngau;ssp - perf ; sen - fuse ; sen - dist ; ssp - npar ; ssp - trac * </S>"
  ]
}