{
  "article_text": [
    "this paper is focused on a novel data model to store and access watershed boundaries , where the outputs are the algorithms .",
    "the proposed algorithms were applied to example datasets within the delaware river watershed using currently available data for the united states of america .",
    "worldwide datasets such as the shuttle radar topography srtm and associated products such as hydrological data and maps based on shuttle elevation derivatives at multiple scales ( hydrosheds ) [ 1 ] would allow these methods to be applied in a consistent fashion world - wide .",
    "existing applications that derive watershed boundaries take a number of forms including graphical outputs , modelling programs , and software as a service .",
    "we believe that most of these approaches could benefit from our proposed data structure and therefore we avoided creating software specific results .",
    "if these methods are adopted it will be incumbent on the developers to implement them within their unique environments . while we used specific software and code to implement the method , we do not at this time offer them for download , as they would provide limited utility outside of our use case .",
    "any model of natural processes requires an understanding of the connection between the physical properties of mass , energy , and momentum .",
    "these analyses are fundamental to simulating how perturbations might impact natural systems . in this paper",
    "we focus on the hydrodynamic connections caused by water flowing over terrestrial surfaces and through river and stream networks .",
    "this type of modelling is collectively know as `` watershed modelling '' and is fundamental to a variety of disciplines including planning for urban and natural landscapes , measuring ecological connectivity , tracking contaminates sources , and modeling stormwater surge and flooding . specifically , we focus on how to represent vectors of connected streams and associated physical attributes within a series of graphs that are reduced in complexity to store and retrieve continuous watershed boundaries to limiting both search and storage costs .",
    "we compare our approach to hypothetical techniques to store watershed boundaries across a topological surface using examples from the @xmath0 30,600 km@xmath1 delaware river watershed ( figure 1 ) .",
    "source data for our study area is a the nationally available watershed boundary data set ( wbd ) the national hydrography plus version two created by horizon systems and the united states environmental protection agency epa ( nhdplusv2 ) [ 2 ] .",
    "a key feature within any mechanistic watershed model is how stream topology is stored and processed ( the data model ) . the ` best ' data model for a specific application can significantly reduce its amortized computational complexity and processing time [ 3 ] . depending on the level of documentation",
    "the exact data model employed within a particular watershed modelling tool can be difficult to determine .",
    "stream topology is typically stored as a sparse matrix as described in the routing application for parallel computation of discharge ( rapid ) [ 4 ] or as an adjacency list as in the soil and water assessment tool ( swat ) [ 5 ] .",
    "liu and weller 2008 [ 6 ] use a binary search tree to store and their adjacency list .",
    "adjacency lists require a recursive search through a steam topology list , while the sparse matrix approach allows a single database sweep but it is more costly in data storage terms vs the adjacency list .",
    "we provide a general alternative to the adjacency list and the sparse matrix representation called the modified nested set ( mns ) index that provides two primary advantages over the aforementioned techniques ; 1 ) watershed boundaries and downstream flow lines can be created without recursively searching the database or storing every stream to stream relationship , 2 ) boundaries can be created by returning aggregated versions of upstream areas . which means that less objects are merged to create the final watershed boundary .",
    "additionally , we provide an approach to store the polygonal boundary that represents a stream s watershed using two algorithms log reduced graph ( lrg ) and stitching watershed ( sw ) respectively .",
    "the lrg algorithm is designed to store increasingly reduced versions of the original watershed boundary by merging adjacent stream reaches .",
    "the sw algorithm takes the output from the lrg algorithm and merges vertexes to create a watershed boundary for any stream reach .",
    "we compare results against two example data models , the first called baseline model assumes that polygons representing lateral watershed are merged individually on demand for any selected @xmath2 , the second called the processed model assumes that all watershed boundaries are calculated and stored for every vertex @xmath2 in graph @xmath3 .",
    "we show that our data model requires significantly less data storage vs the processed data model and significantly fewer objects and polygonal nodes to merge in the query vs the baseline data model .",
    "in this paper we focus on watershed modelling as a function of watersheds delineated by land surface elevation . we recognize that this is only a part of a comprehensive watershed modelling effort ( see daniel et al .",
    "[ 7 ] , and singh and woolhiser 2002 [ 8 ] ) .",
    "the approach we employ here requires a simplification of riverine networks by assuming that water drains in only one direction at all times .",
    "this can be violated in specific instances such as tidal areas , islands in the main river stem and river divergences ( e.g. oxbow ) . in our study area 98.8@xmath4 of stream reaches",
    "are considered the main stem 1.2@xmath4 are considered the minor reach which could cause divergent flow , this could be a larger issue in other watersheds .",
    "although this is a potential shortfall of the nested set model , modelling river flow with only one possible downstream edge is a common approach in hydrological modelling and is applied in several popular models , such as the storm water management tool ( swmmt ) ( http://support.chiwater.com/support/solutions/articles/38406-flow-routing )  rapid can currently only accommodates one unique downstream reach for each river reach .",
    "[ 4 ] . to address this issue",
    "we assume that flow is 100% within the major divergence and minor divergence are indexed by assuming no upstream connectivity , but can still be traversed on the downstream junction .",
    "this allows downstream accumulations to be correct for all values with potential inaccuracies located only inside of the minor divergence .",
    "it can be shown that this can be fixed by applying a new discovery @xmath5 time value to a minor divergence for search purposes only .",
    "before we can discuss the specific methodological procedures that we apply to this problem we need to define some of the notation that will be used throughout the paper .",
    "this paper focuses on methods to embed a representation of a watershed @xmath6 stored as a series of streams connected at junctions denoted by @xmath7 and @xmath8 respectively .",
    "we create an abstract representation of this entity in terms of a graph @xmath9 with a vertex @xmath10 for every stream @xmath11 and an edge for every stream junction @xmath12 defined as the intersection of @xmath13 incoming streams @xmath14 and one outgoing stream @xmath15",
    ". every @xmath16 can be defined by the @xmath17}$ ] ( figure 2 and 3 ) .",
    "figure 2 shows an example of several stream reaches @xmath18 and junctions @xmath19 inside of the study area , figure 3 shows the same stream reaches relabelled in terms of @xmath9 .",
    "we define several attributes for @xmath3 including the @xmath20 as the only vertex in g without any downstream @xmath16 , @xmath21 as a vertex that has no upstream @xmath16 , and @xmath22 as the height of @xmath3 defined as the maximal number of @xmath23 that a path traverses between the @xmath20 and any @xmath21 .",
    "additionally , we describe several attributes for every @xmath23 including the local watershed catchment @xmath24 which describes the area where water flows into @xmath23 due to over land and groundwater ( non - fluvial ) flow .",
    "this is also described in the literature as the lateral flow for @xmath25 and is stored within a geographic information systems as a series of connected @xmath26 and @xmath27 vertices , the total watershed or @xmath28 described as the union of all local catchments @xmath24 that are upstream of vertex @xmath29 including the starting vertex @xmath30 itself .    to create @xmath31",
    "we apply three algorithms ; the first is called the modified nested set algorithm that for all @xmath32 assigns labels @xmath33 ( discovery time ) , @xmath34 ( finish time ) , and @xmath35 ( distance from the root ) .",
    "the second algorithm called log reducing graphs is used to create a set @xmath7 of log reduced graphs @xmath36 , a local watershed boundary @xmath37 is also created for all vertexes @xmath38 in @xmath39 of graphs @xmath40 in set @xmath7 . the third algorithm called stitching watershed algorithm identifies and unions catchments from vertexes @xmath37 from the set @xmath7 to create a watershed boundary @xmath6 for vertex @xmath23 .",
    "their are two disparate uses of the term vertex within this paper , the first common in the geographic information systems ( gis ) community describes vertexes as the * x * and * y * coordinates pairs used to define vector objects ( points , lines and polygons ) ; while in graph theory where vertexes describe nodes connected by edges . for the rest of the paper we differentiate between the two calling vertexes in gis nodes leaving in place existing definitions of vertexes in graph theoretic terminology .",
    "a geospatial version of the nhdplusv2 files was downloaded from http://www.horizon-systems.com/nhdplus/nhdplusv2_data.php for the delaware river watershed and stored inside a postgres relational database management system ( rdms ) version 9.1.12 running on a suse linux server running the postgis suite of geospatial functions version 2.1.4 r12966 .",
    "the data was transferred into postgres using the postgis shapefile and database file loader .",
    "individual stream reaches were stored in a table with multiple attributes including a representation of the stream center - line stored as a geometry linestring , a representation of each reaches drainage area stored as a geometry polygon representation , a unique integer identifier , a designation of flow order , and a list of upstream and adjacent stream reaches .",
    "spatial data was projected into the universal transverse mercator , ( utm ) zone 18 north , meters world geodetic survey 1984 ( wgs84 ) , spatial reference identifier ( srid ) 32618 using the embedded postgis function st_transform .",
    "projecting the spatial data allows postgis take take advantage of the spatial geometry functions that are part of the postgis package , the original data is in a geographic projection system north american datum of 1983 ( nad83 ) srid 4269 .",
    "while the data was stored in postgres , algorithms mns was implemented in the r program for statistical computing .",
    "algorithm lrg and sw was implemented within postgres as a function withing a standard query language ( sql ) query .",
    "the r package rodbc [ 9 ] was used to transfer data between r and postgres .",
    "the nhdplusv2 database defines for each reach the terminal reach identification or the unique hydrological sequence of the last reach above the confluence of an estuary , bay or oceanic water body as the terminalpa ( teminal path ) variable [ 2 ] .",
    "we treated the data as a tree ( a uncycled directed graph ) and ran a modified nested set ( mns ) algorithm ( algorithm 1 ) starting with the root node ( hydro sequence 200005438 ) and all stream reaches where the terminalpa = 200005438 or the confluence of the delaware river with the delaware bay geographic location -75.35717 , 39.27537 .",
    "this resulted in a file containing @xmath41 = 14,718 reaches covering a watershed 30,600 km2 ( figure 1 ) .",
    "as the mns algorithm crosses over @xmath3 starting from the root it records the discovery time @xmath33 , finish time @xmath34 , and distance from root @xmath35 for each @xmath29 .",
    "the @xmath33 and @xmath34 values are equivalent to the nested set algorithm described by celko [ 10 ] .",
    "the @xmath33 value is an incremental value that is unique for each @xmath23 between 1 and @xmath42 as the algorithm moves up the tree to find new vertexes .",
    "no @xmath33 value is less then than a downstream @xmath33 value and no two reaches share a @xmath33 value , while the @xmath34 value calculates the highest @xmath33 value that is upstream of a reach , multiple reaches might share the same @xmath34 value .",
    "figure 4 . shows the results of the mns algorithm on the example watershed used in figures 2 and 3 , stream reaches are labeled with three attributes ( @xmath43 ) from left to right respectively .",
    "leaves on @xmath3 can be identified where the @xmath44 .",
    "the mns algorithm runs in exactly 2@xmath13 - 1 where @xmath13 = the numbers of vertexes @xmath45 in graph @xmath3 .",
    "each edge @xmath16 is crossed twice ( once up and once down ) and each @xmath23 has only one downstream edge @xmath16 ( except for the root which has none ) .",
    "a unique key using a b -tree index was created on @xmath33 to guarantee individual vertex retrieval times in @xmath46 and to ensure cardinality of the result set .",
    "the mns algorithm is a modified depth first ( df ) graph search algorithm and runs in linear time based on the number of vertexes @xmath45 in graph @xmath3 .",
    "* algorithm 1 . modified",
    "nested set *    graph @xmath47 .",
    "@xmath48 :  the discovery time @xmath33 ,  finish time @xmath34 ,  distance from root @xmath35 .",
    "null @xmath50 null @xmath51 null @xmath52 universal clock @xmath53 current distance from root mns(@xmath54 ) vertex is not discovered @xmath55 set discovery time @xmath56 set distance from root @xmath57 set current discovery time",
    "@xmath58 set current distance from root mns(@xmath59 ) @xmath60 set current distance from root @xmath61 if current distance is below root    return ( ) end procedure      for each @xmath23 the total watershed boundary @xmath28 is the merged geospatial boundary of all upstream catchments @xmath24 , in the example where @xmath33 = 1 ( the root of graph @xmath3 ) there are 14,718 vertex boundaries @xmath24 merged to create the watershed boundary for the root vertex @xmath62 .",
    "a catchment is within another catchment s watershed when the @xmath33 value is between the reaches @xmath33 and @xmath34 value as described in joe celko s trees and hierarchies in sql for smarties [ 10 ] . in sql",
    "this can be accomplished using a self join on the table storing the results of the mns algorithm ( appendix 1 ) .",
    "the polygon that describes the watershed boundaries for each reach can be created using the included postgis spatial function st@xmath63union ( appendix 1 ) .",
    "we applied a second algorithm called log reduced graphs to @xmath3 with the result being a set of graphs denoted as @xmath7 . to accomplish this we selected a base value denoted as @xmath64 , and selected all @xmath23 in the original graph @xmath3 where @xmath35 is a proper multiple of @xmath64 . if @xmath64 = 2 and @xmath65 = \\{0,1,2, ... ,16 } any vertex with values @xmath65 in \\{0,2,4, ...",
    ",16 } would be selected for the reduced graph vertexes conversely vertexes with @xmath65 values in \\{1,3,5, ... ,15 } would be unioned with their closest down stream vertexes that is a proper multiple of @xmath64 .",
    "the lrg algorithm then creates a reduced graph by combining all the local watershed boundaries @xmath24 that are upstream with a value of @xmath65 but is downstream of the next factor of @xmath64 ( figure 6 ) .",
    "this new vertex is saved within graph @xmath40 until all vertexes @xmath23 in graph @xmath3 are processed ( for a graphical example refer to figure 5 ) .",
    "the lrg algorithm is called recursively , increasing the reduction level @xmath66 by 1 for each iteration and substituting graph @xmath40 for @xmath3 , this continues until the last graph in set @xmath7 contains one vertex the root . because @xmath66 is set to start at @xmath67 the first graph in set @xmath7 will be the original graph @xmath3 .",
    "+   + * algorithm 2 .",
    "log reduced graphs algorithm * ( lrgs)[lrg ]    [ 1 ] graph @xmath9 with @xmath68 labelled from algorithm mns @xmath69 , @xmath34 , and @xmath70 .",
    "@xmath24 spatial catchment boundary for each vertex in @xmath3 @xmath64 a constant @xmath71 2 set of log reduced graphs @xmath36 .",
    "@xmath72 : lateral drainage boundary ( polygon ) for each vertex @xmath73 .",
    "@xmath74 initiate the reduction depth initial call to formation of log reduced set @xmath40=(@xmath39=@xmath75,@xmath76=@xmath75 ) create empty graph @xmath40 with vertices @xmath39 and edges @xmath76    if vertex @xmath65 is a factor of @xmath77 @xmath78 copy the vertex from @xmath3 to @xmath40 including labels from the sw algorithm    @xmath79 set edges for @xmath40    @xmath80 union spatial boundaries @xmath81 remove vertex s that exist on more the on graph @xmath40 and save to set @xmath7    call lrg until only the root remains @xmath82 set reduction depth call log reduced set with increased depth    @xmath83 @xmath84 @xmath85 @xmath83    lemma 1 shows that the number of graphs returned from the lrg algorithm is bounded by @xmath86 . for example",
    "using @xmath87 and a max(@xmath65 ) = 600 for @xmath3 this algorithm would run recursively 10 times ( i.e. , @xmath88 ) and creates reduced @xmath89 . as a final step the lrg algorithm removes the set of vertexes and edges that exist inside of multiple graphs in set @xmath7 .",
    "therefore any individual graph @xmath40 in set @xmath7 could be an unconnected graph , to create a final watershed boundary we need one last algorithm that moves across the reduced graphs @xmath40 in set @xmath7 connecting them and stitching together a watershed boundary .    given a directed graph @xmath9 of maximum height @xmath22 , let @xmath90 denote the set of reduced graphs obtained from lrgs algorithm with base @xmath91 , then @xmath92 .",
    "* we will first examine the recursive calls that generate consecutive reduced graphs , i.e. , @xmath93 .",
    "let @xmath94 and @xmath95 denote the length of longest paths in graphs @xmath96 and @xmath97 , respectively .    without loss of generality ,",
    "assume @xmath98 denotes the path of maximum length in graph @xmath99 .",
    "the lrgs algorithm will contract this path by forming groups @xmath100 for @xmath101 .",
    "these groups will in turn be replaced by vertices @xmath102 in graph @xmath97 , where @xmath103 , @xmath104 .",
    "this implies that @xmath105 .",
    "an inductive backward analysis shows that @xmath106 .",
    "we note that for the final graph @xmath107 in @xmath7 , @xmath108 .",
    "this implies that @xmath109 , which in turn implies @xmath110 . solving for the size of @xmath7 we have @xmath111 .",
    "given a directed graph @xmath9 of maximum height @xmath22 and the contraction constant @xmath91 , the computational complexity of the @xmath112 is @xmath113 .    *",
    "* similar to the notations used in lemma 1 , let @xmath114 denote the vertices along a typical path processed by lrg that results in contracted path @xmath115 .",
    "note that , each @xmath116 corresponds to @xmath64 vertices since @xmath117 .",
    "extending this argument to each reduction step implies @xmath118 . as a result ,",
    "the overall complexity of all recursive calls for the lrg algorithm can be bounded by @xmath119 using the fact that @xmath91 , the computation complexity of the lrg algorithm can be bounded above by @xmath113 .",
    "to assemble the boundary for any stream reach @xmath120 in the original graph @xmath3 a query is used to cross the set @xmath7 of graphs @xmath40 , identifying and unioning local vertexes @xmath38 watershed boundaries @xmath121 ( figure 5 and 6 ) .",
    "this algorithm is essentially a depth first graph traversal algorithm , except that because individual graphs @xmath40 in set @xmath7 may not be fully connected it must also search across multiple reduced graphs in set @xmath7 .",
    "the first step is to identify the graph to be searched , next is the distance from the root to search in each graph , and last to identify vertexes that are upstream of original search vertex @xmath120 .",
    "to identify the correct graph to search in set @xmath7 the first step is to determine @xmath122 , the highest power @xmath66 of @xmath64 for which the distance from the root is proper multiple of @xmath123 .",
    "for example the root of @xmath3 always has a distance from the root of @xmath124 , therefore it always searches the last graph in set @xmath7 or @xmath125 regardless of the value of @xmath64 . as a second example take the distance from the root value of @xmath126 , where the reduction factor @xmath127 , and set @xmath128 .",
    "the sw algorithm identifies graph @xmath129 as the correct search level because @xmath130 and @xmath131 mod @xmath132 . following this step",
    ", sw uses the nested set data structure to search within @xmath133 identifying all vertexes that are upstream of the search vertex ( including the vertex itself ) whose distance from the root @xmath134 is less then @xmath135 . once identified vertexes are merged into the global watershed boundary variable @xmath31 .",
    "lastly , sw identifies all vertexes @xmath38 in graphs @xmath133 that are upstream again using the nested set algorithm and where the distance from the root exactly equals @xmath136 = @xmath137 .",
    "the sw algorithm is then recursively called , this time replacing the original search vertex with the identified upstream vertexes @xmath38 .",
    "these vertexes will be found somewhere between the @xmath138 level graphs . in the first example where vertex @xmath23 was the root of @xmath3 and @xmath134 = 0 because it searched the last @xmath66 of @xmath7 no vertexes will be found above @xmath23 and therefore the sw algorithm will stop after 1 iteration .",
    "+   + * algorithm 3 .",
    "stitching watershed algorithm *    @xmath36 set of log reduced graphs @xmath40 with vertices @xmath39 and edges @xmath76 and labels from lrg algorithm   @xmath37 , vertex catchment   @xmath23 , vertex from @xmath3   @xmath35 , vertex distance from root in @xmath3   @xmath64 base value used in lrg algorithm @xmath139 geometric watershed boundary for vertex @xmath23 @xmath140 null set the watershed boundary to null @xmath141 = argmax@xmath142 @xmath143 mod @xmath144 0 } @xmath145 append to the output swa(@xmath7,@xmath38,@xmath64,@xmath6 ) recursively call swa    given a directed tree @xmath9 of maximum height @xmath22 with an average graph bandwidth of @xmath146 , a constant contraction parameter @xmath91 , @xmath7 , a set @xmath7 of reduced graphs returned generated by lrg algorithm , and labelled by mns algorithm then sw runs in @xmath147 .    * proof . *",
    "+ we first note that for graph with @xmath148 vertexes and bandwidth @xmath149 and contraction constant @xmath91 , vertices of @xmath3 are expected to belong in one of layers @xmath150 , with @xmath151 , which follows from the fact that @xmath152 .",
    "we will use @xmath153 to denote the sub - tree rooted at node @xmath23 entirely between layers @xmath154 to @xmath155 .",
    "next , we estimate the complexity of recursive calls made by sw for computing watershed boundary @xmath139 of a vertex @xmath156",
    ". we will denote this complexity by @xmath157 .",
    "we will consider two distinct case , @xmath158 for @xmath159 , or @xmath160 for @xmath161 .",
    "+ assume @xmath158 for @xmath159 , then it is not hard to see that the complexity of computing @xmath139 is the union of watershed induced by @xmath153 ( denoted by @xmath162 ) and the @xmath163 over all vertices @xmath38 that are leaves of @xmath153 and the roots of new sub - tree @xmath164 .",
    "first , observe that there exists a largest @xmath13 such that @xmath23 is the root of a sub - tree in @xmath165 for which the value of @xmath162 is already computed in lrg algorithm .",
    "we observe that the expected number of leaves for @xmath153 is @xmath149 , and as a result we can bound the complexity @xmath157 for computing @xmath139 using the recurrence : @xmath166 using the fact that @xmath151 we get the bound @xmath167 . + next , we will consider the case @xmath160 , for @xmath161 . here , the complexity @xmath157 consists of two parts : the cost of computing @xmath162 and the sum of the terms @xmath163 over all vertices @xmath38 that are the leaves of @xmath153 .",
    "similar to previous case , the cost of computing the watershed of all leaves @xmath38 for @xmath153 which are the roots of @xmath168 is @xmath169 .",
    "in contrast , since @xmath170 for any @xmath159 we can not find the a sub - tree in @xmath165 which has node @xmath23 as a root . as a result ,",
    "the complexity of computing @xmath162 is proportional to number of nodes in @xmath153 . since the number of layers and bandwidth of @xmath153 are at most @xmath64 and @xmath149 , respectively , the bandwidth the complexity of computing @xmath162 can be bounded by @xmath171 .",
    "this implies @xmath172 combining the two cases we have @xmath173",
    "we compared our proposed methodology in three dimensions which corresponded to the outputs of the three algorithms discussed here .",
    "next we compare computational costs in terms of preprocessing , storage , and query complexity of the lrg and sw algorithms to hypothetical data models .",
    "we note that the baseline model and the processed model require the same number of calculations , but they differ in use cases where storage vs query complexity are issues .",
    "the first is the size of the index necessary to store the connections between each vertex @xmath23 .",
    "the two standard methods are the sparse matrix as described in river network routing on the nhdplus dataset [ 4 ] and the adjacency array as described by a geodata model and gis interface for swat [ 5 ] .",
    "the mns algorithm as described in this paper requires two attributes to be stored for any vertex @xmath23 , the discovery time @xmath33 and the finish time @xmath34 .",
    "the mns index therefore will grow in constant space as the number of vertexes @xmath23 increases .",
    "the sparse matrix approach stores a boolean value for every catchment to catchment relationship and therefore has space complexity @xmath174 . the adjacency list approach stores",
    "directly adjacent vertexes @xmath23 and is equivalent in size to the number of edges @xmath175 of the graph . because each vertex @xmath23 can only have one downstream edge the total number of @xmath175 = @xmath45 - 1 ( the root does not have any downstream edges ) .",
    "therefore adjacency list will also grow in constant time as the number of vertexes increases .",
    "the advantage of the matrix and mns approach is that each upstream vertex @xmath23 can be found in a single database sweep vs adjacency list which requires a recursive search through the database .",
    "in addition some matrix representations only story upstream adjacent reaches not all upstream reaches , therefore recursive searches through the matrix would be required in a similar manner as the adjacency list .",
    "a disadvantage of the mns index is the complexity to update the index given new information is considerable , for example if a new root is added to graph @xmath3 it would require updates to all index values for the entire graph .",
    "while problematic in this use case the temporal frequency of remotely sensed elevation data and corresponding edits to the flow direction graph is much smaller then the number of queries making it a relatively minor issue as data is collected in increasing temporal frequency this could become an interesting research focus .",
    "the baseline data model in our example has no processing costs because we are not accounting here for the original creation of the dem and the flow direction grid and all three data models require the same source data - sets .",
    "the processed data model requires the union of @xmath176 2.31 m polygons and @xmath176 360 m nodes .",
    "the proposed model requires between @xmath176 29.2 - 18.8 thousand polygons and 7.3 - 3.8 m nodes depending on the value of @xmath64 that is selected .",
    "this is a reduction of between 98 - 99% of the preprocessing costs .",
    "we compared the storage requirements by measuring the total number of polygons and the total number of node required to store the processed , baseline , and the proposed data models .",
    "the number of objects stored for both the processed and unprocessed watershed boundaries is the same @xmath45 or in our example 14,718 polygons .",
    "because the lrg algorithm returns the highest factor of @xmath64 for any vertex @xmath23 the proposed data model also only contains @xmath45 ( table 1 ) .",
    "the difference therefore between the storage approaches is the number of nodes on the polygons that represent local watershed boundaries @xmath24 the original graph @xmath3 for the baseline @xmath0 2.16 m , processed @xmath0 18.06 m , and the lrg algorithm @xmath0 3.26 - 3.13 m , for @xmath64 ( 2,4,6 ) ( table 1 ) .",
    "this represents a reduction of between 81 - 82% for the lrg algorithm vs the processed data model .",
    "the number of vertexes in the polygons that represent the catchment boundaries were originally derived from a raster grid data model representing elevation ( a digital elevation model ) .",
    "converting a dem to a vector polygon representation requires a large number of vertexes to represent the border of each raster grid .",
    "a number of techniques have been discussed to minimize the amount of vertexes stored on a polygon .",
    "the processing time for the unprocessed data storage method requires the union of all upstream catchments on average 157 polygons and 24,550 nodes , while the processed version requires no processing time at all .",
    "the proposed method requires the output of the stitching algorithm for our example averaged between 7.46 and 6.28 polygons and 4,751 and 3,352 nodes again based on the value of @xmath64 table 1 .",
    "the processed data model requires no processing and therefore has a query complexity of 1 polygon .",
    "we used averages for these measurements instead of summing for the graph because we are most interested in queries that draw watershed boundaries on the fly for a single catchment .",
    "the sw+lrg has a reduction in of query complexity of 95 - 96% for polygons and 80 - 86% for nodes on the polygon vs the unprocessed data model .",
    "[ subsec5 ]    our results include a methodology to store and access watershed boundaries using a novel data storage technique and a readily available data set .",
    "this data model relies on three algorithms to convert the original data into a logarithmically reduced data structure that can be merged together for any stream reach to create a geo - spatial representation surface watershed boundary @xmath31 .",
    "compared to two hypothetical data models our data models provides significant reductions in the preprocessing , data storage and query complexity necessary to create watershed boundaries .",
    "[ subsec5 ]",
    "much recent work in hydrodynamic modelling has been focused on data integration from multiple sources [ 11 ] .",
    "this work has allowed researchers to more easily access data collected from a wide variety of sources by standardizing how hydrological and weather data is stored and accessed .",
    "our proposed work extends these concepts by providing algorithms to process the integrated datasets .",
    "applications that rely on geospatial representations of watershed boundaries such as the iowa flood information system ( ifis ) , and the model my watershed tool ( mmwt ) are important management tools linking natural processes to geo spatial models .",
    "ifis for example was created to provide warnings of impending flood events .",
    "increases in temporal and spatial resolution of dems generate a need for more efficient algorithms to process and store elevation data and derived products .",
    "there are a number of potential business applications of this model for example the environmental research institute ( esri ) offers a fee for service application called elevation analysis as a rest api ( https://developers.arcgis.com/rest/elevation/api-reference/watershed.htm ) , that delineates watershed boundaries based on either the 30-meter national elevation dataset within the united states or the 90 meter hydrosheds database available world wide .",
    "unfortunately , we can not compare our proposed data storage and access techniques to these aforementioned tools and applications as we could find no published data models .",
    "the increasing availability of remotely sensed elevation data including the shuttle radar topology mission ( srtm ) and light detection and ranging ( lidar ) datasets would enable the proposed methods to be extended to other terrestrial areas .",
    "future work will focus on how to extend the discussed data storage techniques to other watershed modelling processes including storm surge , contaminate source tracking , and groundwater flow .",
    "the proposed algorithms and data structures can also be applied to flow direction grids that use the d8 flow algorithm directly . in this paper we focused on derived polygonal representations of the elevation grids . to accomplish this each grid cell",
    "can be viewed as a vertex and the flow direction viewed as an edge .",
    "because the d8 method only allows one downstream edge ( 1 of 8 neighboring cells ) the graph could be described as a tree a necessary requirement of the mns algorithm .",
    "we propose to test these assumptions on the flow direction grid available as part of the nhd dataset version 2 , but this is outside the scope of thecurrent manuscript .",
    "lastly , the mns algorithm could be applied to the existing nhd version 2 database coupled with a rdms allowing stream routing to be accomplished using sql .",
    "initial tests using the previously described server and data structure show routing calculations for the entire delaware river completed in less then 1.5 seconds for the 14,718 reach study area",
    ". this could be very useful for mapping the location of hazardous spills , or connectivity between sources of pollutants and spills .",
    "the proposed data structure provides significant reductions in the storage and query complexity costs necessary to generate watershed boundaries for the delaware river watershed ( table 1 and figure 1 ) .",
    "we believe that a number of other applications of this data model will increase the utility of existing watershed models .",
    "these include estimates of dam removal prioritization , ecological connectivity , sums of upstream attributes such as land use and land cover , impervious surface , and population , and estimates of current stream conditions ( e.g. , river flooding , nutrient loading , and or stream temperature ) .",
    "we would like to acknowledge support from the william penn foundation under grant # 39 - 15 enhanced monitoring , assessment , and data management for the delaware river watershed initiative ( drwi ) .",
    "the manuscript also benefited immensely from comments provided by dr .",
    "yusuf osmanlioglu , thomas belton , and william ryan .",
    "[ 1 ] b. lehner , c. verdin , a. jarvis , hydrosheds technical documentation.world wildlife fund us , washington , dc . [ 2 ] l. mckay , t. bondelid , t. dewald , c. johnston , r. moore , a. rea , nhdplus version 2 : user guide(2012 ) . [ 3 ] r. tarjan , amortized computational complexity , siam .",
    "j. on algebraic and discrete methods 6 ( 2)(1985 ) 306318 .",
    "doi:10.1137/0606031.url http://epubs.siam.org/do i / abs/10.1137/0606031 .",
    "[ 4 ] c. h. david , d. r. maidment , g .- y .",
    "yang , f. habets , v. eijkhout , river network routingon the nhdplus dataset , j. hydrometeor 12 ( 5 ) ( 2011 ) 913934 . [ 5 ] f. olivera , m. valenzuela , r. srinivasan , j. choi , h. cho , s. koka , a. agrawal , arcgis - swat : a geodatamodel and gis interface for swat1 , jawra journal of the american water resources association42 ( 2 ) ( 2006 ) 295309 . [ 6 ] z .- j .",
    "liu , d. e. weller , a stream network model for integrated watershed modeling , environmental modeling and assessment 13 ( 2 ) 291303 .",
    "doi:10.1007/s10666 - 007 - 9083 - 9 .",
    "[ 7 ] e. b. daniel , j. v. camp , eugene j. leboeuf , jessica r. penrod , james p. dobbins , mark d. abkowitz , watershed modeling and its applications : a state - of - the - art review , the open hydrology journal5 ( 5 ) ( 2011 ) 2650 . [ 8 ] v. p. singh , d. a. woolhiser , mathematical modeling of watershed hydrology , journal of hydrologicengineering 7 ( 4 ) ( 2002 ) 270292 .",
    "doi:10.1061/(asce)1084 - 0699(2002)7:4(270 ) .",
    "[ 9 ] b. ripley , m. lapsley , rodbc : odbc database access .",
    "url https://cran.r-project.org/web/packages/rodbc/index.html .",
    "[ 10 ] j. celko , sql for smartie , 4th edition , the morgan kaufmann series in data management systems , elsevier , 2011 .",
    "[ 11 ] d. p. ames , j. s. horsburgh , y. cao , j. kadlec , t. whiteaker , d. valentine , hydrodesktop : webservices - based software for hydrologic data discovery , download , visualization , and analysis , environmental modeling and software 37 ( 2 ) 146156 ."
  ],
  "abstract_text": [
    "<S> an efficient model to store and retrieve surface watershed boundaries using graph theoretic approaches is proposed . </S>",
    "<S> our approach utilizes three algorithms and accepts as input standard digital elevation models derived stream catchment boundaries . </S>",
    "<S> the first is called modified nested set ( mns ) , which is a generalized depth first graph traversal algorithm that searches across stream reaches ( vertices ) and stream junctions ( edges ) labelling vertices by their discovery time , finish time , and distance from the root . the second is called log reduced graphs ( lrg ) , which creates a set of logarithmically reduced graphs from the original data , to store the watershed boundaries . </S>",
    "<S> the final algorithm is called stitching watershed , which provides a technique to merge watershed boundaries across the set of graphs created in the lrg algorithm . </S>",
    "<S> this technique is show to provide significant advantages in processing , storage , and retrieval complexity when compared to hypothetical data models .    </S>",
    "<S> stream network , graph theory , modified nested set algorithm , watershed boundaries , surface water flow </S>"
  ]
}