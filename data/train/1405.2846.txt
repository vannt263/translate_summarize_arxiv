{
  "article_text": [
    "dynamic unary encoding ( due ) , in the form of a binary data encoder , was discovered by this author in january of 2010 during an effort to satisfy a data compression challenge through experimental binary encoding schemes involving iterative functions . although the effort to find a solution to that challenge continues ; due is a discovery of importance .",
    "effort is made to present due in an introductory format leading to suggestions of applications in higher mathematics and computer science .",
    "it has not escaped observation that dynamic unary has applications beyond data encoding .",
    "the history and development of dynamic unary encoding is a reflection of my search for innovative binary encoding resulting in four categories of algorithms developed through experimentation and observation .",
    "the first category of encoder developed is introduced as an iterative function exporting the parity of the first bit , in the binary string being encoded , as the transform .",
    "an example of this category of algorithm is presented in 5.1 .",
    "the second category includes binary string constructions and deconstructions exploring the relationship of parity information and unary code to binary string structure .",
    "an example is presented in 5.2 .",
    "the third category communicates the parity structure of the source string via the terminus parity of the unary code . through iteration of encoding or decoding",
    "it was observed that for all @xmath0__-bit _ _ binary strings due generated a cycle of @xmath0__-bit _ _ elements .    for the fourth category",
    "the cycles of due as a complete orbit are successfully utilized as a mathematical object ; a type of dynamic integer or quantum numbers perhaps ?",
    "a non - due cycle is generated as the example of this category .",
    "unary code@xcite is an entropy code that represents a non - negative integer .",
    "unary code has the form of a body of zero or more bits of one parity and a single bit terminus of the opposite parity .",
    "* example : integer value four can be represented in unary code as both 0111 and 1000 .",
    "a finite length binary string may contain more than one unary coded integer .",
    "each integer is delimited by the terminus parity .",
    "* example : in the binary string  0111011110110100 \" unary codes with a terminus of the 0 parity represent integers @xmath2 .",
    "binary strings have the quality of being dividable into segments of same parity bits in an alternating parity pattern forming the parity structure of the binary string .",
    "* example : for *  * 0111011110110100 * \" * same parity bit segments are @xmath3 .",
    "this parity structure is communicated with a single bit by knowing the parity of a single bit at a specific bit position .",
    "the term for this is the parity reference .",
    "the term parity reference incorporates both the physical location of that bit and the information of that bit s parity state .",
    "the parity reference may be internal to the encoding or can be external .",
    "bit position notation follows conventional representation of @xmath4 ( first bit ) through @xmath5 for some finite length binary string .",
    "a finite length binary string is also referenced as an @xmath0__-bit__.",
    "the cycle and mathematical object aspects of dynamic unary encoding are presented first followed by two encoding constructs utilizing external parity reference constructs .",
    "dynamic unary encoding utilizes unary code and parity reference information for all constructs .",
    "first , encoding parses a finite length binary string into same parity segments .",
    "the terminus parity of the unary code is determined by the parity of the bit at the parity reference bit position .",
    "once the binary string parity structure is exported as terminus parity a simple bijection of segment length and unary code exists .",
    "the lengths of those segments are then represented in a new string by unary codes .",
    "an example encode algorithm is presented in figure 1 .",
    "* let @xmath6 represent encoding .",
    "* let our source string be +  0100100001100101011011000110110001101111 \" +  hello \" in ascii code .",
    "* let the parity reference = @xmath4 making the unary code terminus = 1 .",
    "same parity segments = 0 1 00 1 0000 11 00 1 0 1 0 11 0 11 000 11 0 11 000 11 0 1111 + unary encoded 1 1 10 1 1000 10 10 1 1 1 1 10 1 10 100 10 1 10 100 10 1 1000    * @xmath7 *      first , decoding determines the terminus parity of the unary code used to encode from the @xmath0__th _ _ ( @xmath5 ) bit of the string .",
    "then the string is parsed into unary codes by terminus boundaries .",
    "same parity segments , of the length the unary code communicates , are then written in correct parity order using the parity reference information .",
    "an example decode algorithm is presented in figure 2 .",
    "* let * * -**@xmath6 represent decoding . *",
    "let our source string be  1110110001010111110110100101101001011000 \" * let our unary code terminus be 1 and our parity reference = @xmath4 .",
    "terminus information is read at @xmath5 .",
    "parse the string into unary codes = 1 1 10 1 1000 10 10 1 1 1 1 10 1 10 100 10 1 10 100 10 1 1000 + same parity bit segments 0 1 00 1 0000 11 00 1 0 1 0 11 0 11 000 11 0 11 000 11 0 1111    * -@xmath8 *",
    "every @xmath0__-bit _ _ binary string is an encoding of dynamic unary and every @xmath0__-bit _ _ binary string is encodable by dynamic unary . through experimentation and observation iteration of encoding or decoding resulted in a cycle of @xmath9 elements of length @xmath0 bits . by utilizing both forms of unary code and the parity structure information of the source string dynamic unary partitions @xmath1",
    "non - negative integers into disjoint cycles@xcite@xcite of @xmath0__-bit _ _ elements creating a dynamic data type .",
    "the spectrum of these cycles is an infinite progression of sets@xcite of cycles that have in common relationships to powers of two .",
    "the quality of the cycles being disjoint was first determined by observations of the cycles of the shorter length strings which are easy to generate by hand .",
    "the disjoint quality of the cycles was also observed with a c - language program generating the cycles of thirty two bit elements , as a data set , of all @xmath10 non - negative integers .",
    "encoding is further defined as generating the next element in cycle and decoding is further defined as generating the previous element in cycle .",
    "@xmath11 = @xmath12 @xmath0 = 4 @xmath9 = 8 pref = @xmath4 @xmath13 or * * -**@xmath14 for @xmath15 @xmath16 + @xmath17 = ( 0111 1100 0101 1111 1000 0011 1010 0000 ) = ( 7 12 5 15 8 3 10 0 )    * * -**@xmath18 = ( 1010 0011 1000 1111 0101 1100 0111 0000 ) = ( 10 3 8 15 5 12 7 0 ) @xmath19 + example cycle in both the encode direction and the decode direction of a _",
    "@xmath20-bit _ string .",
    "the number of cycles for a @xmath0__-bit _ _ binary string and a specific parity reference bit position is determined by @xmath21 equals the number of elements in a cycle and @xmath1 the number of non - negative integers such that @xmath22 .",
    "that there are @xmath0 choices for a parity reference means we also have @xmath0 sets of cycles for each @xmath0__-bit _ _ string .",
    "* from observations of the cycle data , cycle spectrum can be separated into three categories . *",
    "string length @xmath23 has ( @xmath24 ) cycles of ( @xmath25 ) elements for @xmath26 .",
    "* binary string lengths that are a power of two , greater than one , and parity reference of @xmath4 have been observed as having an element count of ( @xmath27 ) and cycle count of ( @xmath28 ) for @xmath29 . *",
    "all other lengths and parity reference combinations may be defined as @xmath30 elements = @xmath31 and ( @xmath32 cycles for @xmath33 .",
    "by utilizing the complete orbit , application as a mathematical object is realized . as a demonstration",
    "a non - due cycle is presented .",
    "the concepts of  cycle - of \" ( @xmath34 ) and  cycle - on \" ( @xmath35 ) are now introduced to differentiate types of cycles .",
    "cycle - of is defined as the dynamic unary cycle of an element .",
    "cycle - on is defined as applying cycle - of to an element . in the following example",
    "a function utilizing the orbits of three integers and the logical operation exclusive - or@xcite , a ( @xmath35 ) cycle of thirty two elements is generated .",
    "that for the element length of sixteen bits and a parity reference @xmath4 the number of ( @xmath34 ) elements is thirty two and the number of elements in the ( @xmath35 ) is also thirty two .",
    "this is not always the case .",
    "for example change the parity reference to any other bit position and the number of elements in the ( @xmath34 ) cycle is sixteen .",
    "curiously the number of elements in the ( @xmath35 ) orbit is still thirty two .",
    "thus for parity reference @xmath4 only one ( @xmath34 ) orbit occurs and for all other parity references two ( @xmath34 ) orbits are required to generate a complete ( @xmath35 ) orbit .",
    "the halting condition of both the cycle - of and the cycle - on is when the element generated equals the starting element .",
    "the reason only one ( @xmath34 ) orbit occurs for string lengths of powers of two and a parity reference of @xmath4 is seen in the element structure of the cycle in that the elements of those cycles can be divided into two sets where the members of each are parity inverses of the other .    * an example of length four bits @xmath34(0000 ) = ( 0111 1100 0101 1111 1000 0011 1010 0000 )     + for the following initial conditions this function generates a ( @xmath35 ) orbit for the element @xmath36",
    ".    let the length of string be sixteen bits .",
    "let the parity reference be @xmath4 .",
    "let @xmath37 and @xmath38 where @xmath39,@xmath40,@xmath41 and @xmath42    let @xmath43,@xmath44,@xmath45and @xmath46    let @xmath47    the _ cycle - on _ cycle * @xmath48 * * @xmath49 * = ( = 28158 19761 64921 60058 30232 23332 8057 63754 + 27712 19536 951 60323 34882",
    "23123 57674 2015 + 37376 19760 615 60059 35302 23333 57479 63755 + 37822 19537 64585 60322 30652 23122 7860 2014 )    if we examine the mapping it is clear that the next element in the ( @xmath35 ) cycle is not a result of dynamic unary encoding .",
    "the value 2,014 is mapped to the value 28,158 .",
    "a quality of this ( @xmath35 ) orbit is that by knowing one element in the cycle and it s index the original element ( @xmath11 ) can be retrieved .",
    "this example utilizes cycles of the same type , direction of spin and element count for simplicity of demonstration however constructs are not limited to same type of cycle , same number of cycles in a function , same spin direction or the cycles being of the same _ @xmath9 _ size .",
    "it has been observed that the cycles with element lengths , greater than one , that are a power of two of parity reference @xmath4 and powers of two plus one of parity reference @xmath51 have elements , when considered to be unsigned integers , that sum to the same value .",
    "let @xmath52 represent binary strings length @xmath1 and @xmath53 represent binary strings length @xmath54 for @xmath55    @xmath56 = @xmath57    @xmath58 @xmath59    @xmath60 = @xmath61    @xmath58 @xmath62    other @xmath0__-bit _ _ and parity reference combinations have been observed as those cycles having more than a single sum suggesting that those cycles may be grouped by a conserved quantity quality .",
    "dynamic unary has two components , the unary code and the parity reference information .",
    "each part can be utilized in constructs separately .",
    "two encoding schemes are presented as examples .",
    "the drop - t algorithm exports the parity at parity reference @xmath4 as the encoding transform .",
    "the source @xmath0__-bit _ _ is then encoded in fixed parity terminus unary codes .",
    "each iteration of the encoding then  drops \" the @xmath0__th _ _ bit of the newly unary encoded @xmath0__-bit _ _ source string before the next iteration .",
    "each iteration reduces the source @xmath0__-bit _ _ length by one bit and increases output @xmath0__-bit _ _ length by one bit until all source bits are processed .",
    "decoding requires that the terminus parity be known .",
    "decoding reads each bit sequentially from the source @xmath0__-bit _ _ providing the parity information needed to reconstruct the parity structure of the @xmath0__-bit _ _ binary string of each iteration . because the construct of encoding is the collection of all the parities of each iteration , parity reference is considered external to this @xmath0__-bit _ _ being constructed .",
    "decoding starts with a single bit unary code and processes it s parity structure then adds a new terminus bit to the end of that @xmath0__-bit _ _ increasing the length of the @xmath0__-bit _ _ string by one bit .",
    "this iterative process completes when all the source @xmath0__-bit _ _ bits are used .",
    "let our source be @xmath63 and our parity reference be @xmath4 .",
    "our fixed parity terminus is 1 .",
    "the encoded string then is all the parities sampled at @xmath4 + @xmath64 , @xmath65 , @xmath66 so @xmath67    it was hoped that drop - t would be a single bijective cycle for all @xmath0__-bit _ _ elements representing all @xmath1 non - negative integers however it was discovered that some elements maped to themselves .    with a terminus parity of 1 and a string of  000 \" the element maps to itself + @xmath68 so @xmath69    therefore there are more than one cycle for each @xmath0__-bit__.    let our parity reference be @xmath4 .",
    "our fixed parity terminus is 0 .    for length one",
    "the cycles are @xmath70    for length two the cycles are @xmath71 ( 00 01 10 ) , ( 11 ) @xmath72    for length three the cycles are @xmath71 ( 000 011 110 ) , ( 001 100 010 ) , ( 101 ) , ( 111 ) @xmath72      during this phase of development several construction and deconstruction concepts were explored in the hopes of finding some  data encoding magic .",
    "\" imagination was key during this phase .",
    "the basic constructs of this category process unary code separately from parity reference information .",
    "several variations of this type of encoding were explored resulting in unique encoding schemes .",
    "for this example , any string length @xmath0 , two strings of length @xmath73 can be generated .",
    "the parity reference is an external and fixed parity .    *",
    "given an arbitrary string  011 \" then adding terminus 0 + 011 and 1 + 011 then decoding for a fixed parity reference of 0",
    "we get @xmath74 and @xmath75 because it is assumed the @xmath0__th _ _ bit is the terminus parity .",
    "therefore it is possible to generate an eight bit string from three bits of information .",
    "* so for this decode @xmath76",
    "the cycle structure was first observed by gustavus j. simmons@xcite and is presented in the paper _ parity encoding of binary sequences_. simmons applies an exclusive - or summation algorithm ; a _  mod 2 sum of the summands \" _ , on binary strings which have in common a finite length and a parity of 1 in the most significant bit position .",
    "the cycles generated prove to be a subset of those generated by due for the conditions of the decode direction with the parity reference bit position of @xmath77 when that bit is parity 1 .",
    "it is interesting that two different algorithms generate the cycle structure and raises the question of what do exclusive - or and due have mathematically in common ?",
    "dynamic unary encoding introduces new choices of how binary data is represented and processed .",
    "due emerged out of efforts to discover innovative encoding methods .",
    "due has been applied as a bijective transform changing one binary data file into millions of different files .",
    "due was an important part of a surjective data encoder where many choices of what binary code would represent a source @xmath0__-bit _ _ string were generated . as a tool of deconstruction or construction binary data",
    "is processed bit by bit .",
    "utilized as a mathematical object , the forms a data can take is limited only by imagination because anything that can be done and undone to a data can be a part of some encoding algorithm utilizing due . as a virtual data set dynamic",
    "unary requires only one element in order to access all @xmath9 elements of a cycle .",
    "that quality also extends to simple encryption of data by simply cycling a data in it s orbit .",
    "it is not difficult to envision applications of dynamic unary in categories such as the design of microprocessors , robotics , artificial intelligence , cryptography , logic and control and possibly physics .    _ all in all",
    "_ there is more to due than has been done .",
    "more to discover about dynamic unary and it s applications .",
    "the questions now are what needs to be done , how is it to be applied and what results will be realized .    on a personal note ,",
    "like gottfried leibniz@xcite i too find the relationship of binary numbers and the _ _ i - ching__@xcite interesting .",
    "dynamic unary introduces a quality that i believe leibniz would find interesting and that is , as noted in the _ i - ching _ and _ dynamic unary encoding _ , that one element can change to another .",
    "metaphorically speaking , a gate of wonders@xcite has been opened and the _ garden _ that is due awaits .",
    "i wish to thank gustavus simmons for the paper _ parity encoding of binary sequences _ which has provided both an independent validation of the cycle structure and a guide for this my first paper .",
    "thanks goes to henning makholm and mathstackexchange.com for assistance with the element progression equation .",
    "duyvendal s translation of chapter one of the tao te ching is unique among many and has been an inspiration in my efforts to understand the nature of information ..    also , thanks goes to mark nelson whose million digit challenge has provided me with a trustworthy data - set and an incredibly difficult challenge . and to all those who have been a part of that experience through the years .",
    "in memory of _ james herbert jones _ ; my step - father not forgotten , observing his early sunday morning maths doodles with coffee was the genesis of my realization that there is a realm of creativity to mathematics .",
    "9 khalid sayood . _ data compression _ , 3rd ed , morgan kaufmann .",
    "isbn-10 : 012620862x | isbn-13 : 978 - 0126208627 _ binary number _ - wikipedia , the free encyclopedia , wikipedia.org anderson , marlow and feil , todd ( 2005 ) , _ a first course in abstract algebra _ , chapman and hall / crc ; 2nd edition .",
    "isbn 1 - 58488 - 515 - 7 .",
    "john fraleigh , ( 2002 ) , _ a first course in abstract algebra _ ( 7th ed . ) , addison wesley , isbn 978 - 0 - 201 - 76390 - 4 gustavus j. simmons . _ parity encoding of binary sequences_. designs , codes and cryptography , 27,157164 , 2002 eric j.aiton . _",
    "leibniz : a biography _ , taylor and francis .",
    "( 1985 ) pp . 2458 .",
    "isbn 0 - 85274 - 470 - 6 .",
    "edward hacker ; steve moore ; lorraine patsco ( 2002 ) .",
    "i ching : an annotated bibliography_. routledge .",
    "isbn 978 - 0 - 415 - 93969 - 0 .",
    "duyvendal , _ tao te ching _ ,",
    "pg 17 , isbn 0 8048 1813 4 _ exclusive or _ - wikipedia , the free encyclopedia , wikipedia.org marvin l. bittinger , logic , proof and sets , isbn 0 - 201 - 10384 - 2"
  ],
  "abstract_text": [
    "<S> dynamic unary encoding takes unary encoding to the next level . every @xmath0__-bit _ _ binary string is an encoding of dynamic unary and every @xmath0__-bit _ _ binary string is encodable by dynamic unary . by utilizing both forms of unary code and a single bit of parity information dynamic unary encoding partitions @xmath1 </S>",
    "<S> non - negative integers into @xmath0 sets of disjoint cycles of @xmath0__-bit _ _ elements . </S>",
    "<S> these cycles have been employed as virtual data sets , binary transforms and as a mathematical object . </S>",
    "<S> characterization of both the cycles and of the cycle spectrum is given . </S>",
    "<S> examples of encoding and decoding algorithms are given . </S>",
    "<S> examples of other constructs utilizing the principles of dynamic unary encoding are presented . </S>",
    "<S> the cycle as a mathematical object is demonstrated . </S>"
  ]
}