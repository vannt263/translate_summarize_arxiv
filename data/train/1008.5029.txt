{
  "article_text": [
    "there are several approaches to representing and solving constraint satisfaction problems : constraint programming ( cp ; @xcite @xcite , @xcite @xcite ) , answer set programming ( asp ; @xcite @xcite ) , propositional satisfiability checking ( sat ; @xcite @xcite ) , its extension to satisfiability modulo theories ( smt ; @xcite @xcite ) , and many more .",
    "each has its particular strengths : for example , cp systems support global constraints , asp systems permit recursive definitions and offer default negation , whilst sat solvers often exploit very efficient implementations . in many applications it would often be helpful to exploit the strengths of multiple approaches .",
    "consider the problem of timetabling at a university  @xcite . to model the problem",
    ", we need to express the mutual exclusion of events ( for instance , we can not place two events in the same room at the same time ) .",
    "a straightforward representation of such constraint with clauses and rules uses quadratic space .",
    "in contrast , global constraints such as _ all - different _ typically supported by cp systems can give a much more concise encoding .",
    "on the other hand , there are features which are hard to describe in traditional constraint programming , like the temporary unavailability of a particular room .",
    "however , this is easy to represent with non - monotonic rules such as those used in asp .",
    "such rules also provide a flexible mechanism for defining new relations on the basis of existing ones .",
    "answer set programming has been put forward as a powerful paradigm to solve constraint satisfaction problems . @xcite ( @xcite ) shows that asp embeds sat but provides a more expressive framework from a knowledge representation point of view . moreover , modern asp solvers compete with the best sat solvers .",
    "an empirical comparison of the performance of asp and constraint logic programming ( clp ; @xcite @xcite ) systems on solving combinatorial problems conducted by @xcite shows asp encodings to be more compact , more declarative , and highly competitive .",
    "however , as some problems are more naturally modelled by using non - propositional constructs , like resources or functions over finite domains , and by using global constraints in particular , there is an increasing desire to handle constraints beyond pure asp .",
    "one approach to combining asp and cp is to integrate theory - specific predicates into propositional formulas ( motivated by smt ) , and to extend the asp solver s decision engine with a higher level proof procedure @xcite .",
    "however , the resulting systems have a number of limitations .",
    "first , they are tied to particular asp and cp solvers .",
    "second , the support for global constraints is limited .",
    "third , communication between the asp and cp solver is restricted .",
    "alternative techniques , such as reformulating constraints into asp have received little attention .",
    "the key contribution of our work is an investigation of reformulation in the context of answer set programming , illustrated by reformulations of the popular _ all - different _ constraint .",
    "the resulting approach has been implemented in the new preprocessor _",
    "inca_. empirical evaluation demonstrates its computational potential .",
    "[ [ answer - set - programming ] ] answer set programming + + + + + + + + + + + + + + + + + + + + + +    a _ ( normal ) logic program _ @xmath0 over a set of primitive propositions @xmath1 is a finite set of rules of the form @xmath2 where @xmath3 and @xmath4 are _ atoms _ for @xmath5 .",
    "a _ literal _",
    "@xmath6 is an atom @xmath7 or its default negation @xmath8 . for a rule  @xmath9 ,",
    "let @xmath10 be the _ head _ of @xmath9 and @xmath11 the _ body _ of @xmath9 .",
    "the set of atoms occurring in a logic program @xmath0 is denoted by @xmath12 , and the set of bodies in @xmath0 is @xmath13 . for regrouping bodies sharing the same head  @xmath7 ,",
    "define @xmath14 .",
    "the semantics of a logic program is given by its answer sets , being total well - founded models of @xmath0 .",
    "for a formal introduction to asp , we refer the reader to @xcite ( @xcite ) . the semantics of important extensions to logic programs , such as choice rules , integrity , and cardinality constraints , is given through program transformations that introduce additional propositions ( cf .",
    "@xcite @xcite ) . a _ choice rule _",
    "allows for the non - deterministic choice over atoms in @xmath15 and has the form @xmath16 an _ integrity constraint _ of the form @xmath17 is a short hand for a rule with an unsatisfiable head , and thus forbids its body to be satisfied in any answer set .",
    "a  _ cardinality constraint _ of the form @xmath18 is interpreted as no @xmath19 literals of the set @xmath20 are included in an answer set .",
    "@xcite provide a transformation that needs just @xmath21 rules , introducing atoms @xmath22 to represent the fact that at least @xmath23 of the literals with index @xmath24 , i.e. the literals in @xmath25 , are in a particular answer set candidate .",
    "then , the cardinality constraint can be encoded by an integrity constraint @xmath26 and the three following rules , where @xmath27 and @xmath28 : @xmath29    [ [ nogoods - of - logic - programs ] ] nogoods of logic programs + + + + + + + + + + + + + + + + + + + + + + + + +    we want to view inferences in asp as unit - propagation on nogoods .",
    "following @xcite ( @xcite ) , inferences in asp rely on atoms and program rules , which can be expressed by using atoms and bodies .",
    "thus , for a program  @xmath0 , the _ domain _ of boolean assignments  @xmath30 is fixed to @xmath31 .",
    "formally , a boolean _ assignment _ @xmath30 is a set @xmath32 of _ signed literals _",
    "@xmath33 for @xmath27 of the form @xmath34 or @xmath35 where @xmath36 .",
    "@xmath34 expresses that @xmath7 is assigned _ true _ and @xmath35 that it is _ false _ in @xmath30 .",
    "( we omit the attribute _",
    "boolean _ for assignments whenever clear from the context . )",
    "the complement of a signed literal  @xmath37 is denoted by @xmath38 , that is @xmath39 and @xmath40 . in the context of asp , a _",
    "nogood _ is a set @xmath41 of signed literals , expressing a constraint violated by any assignment  @xmath30 such that @xmath42 . for a nogood @xmath43 ,",
    "a signed literal @xmath44 , and an assignment @xmath30 , we say that @xmath43 is _ unit _ and @xmath38 is _ unit - resulting _ if @xmath45 .",
    "let @xmath46 the set of true propositions and @xmath47 the set of false propositions .",
    "a _ total _",
    "assignment , that is @xmath48 and @xmath49 , is a _ solution _ for a set @xmath50 of nogoods if @xmath51 for all @xmath52 .",
    "as shown in @xcite ( @xcite ) , the answer sets of a logic program @xmath0 correspond to the models of the completion of @xmath0 that satisfy the loop formulas of all non - empty subsets of @xmath12 . for @xmath53 , define @xmath54 intuitively , the nogoods in @xmath55 enforce the truth of body  @xmath56 iff all its literals are satisfied . for an atom @xmath57 with @xmath58 , let @xmath59 then , the solutions for @xmath60 correspond to the models of the completion of @xmath0 .",
    "loop formulas , expressed in the set of nogoods  @xmath61 , have to be added to establish full correspondence to the answer sets of @xmath0 .",
    "typically , solutions for @xmath62 are computed by applying _",
    "conflict - driven nogood learning _",
    "( cdnl ; @xcite ( @xcite ) ) .",
    "this combines search and propagation by recursively assigning the value of a proposition and using _ unit - propagation _ to determine logical consequences of an assignment @xcite .",
    "[ [ constraint - satisfaction - problem ] ] constraint satisfaction problem + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the classic definition of a constraint satisfaction problem is as follows ( cf .",
    "@xcite @xcite ) .",
    "a _ constraint satisfaction problem _ is a triple @xmath63 where @xmath64 is a set of _ variables _ @xmath65 , @xmath66 is a set of finite _ domains _ @xmath67 such that each variable  @xmath68 has an associated domain @xmath69 , and @xmath70 is a set of _ constraints_.",
    "a constraint  @xmath71 is a pair  @xmath72 where @xmath73 is a @xmath19-ary _ relation _ on the variables in @xmath74 , called the _ scope _ of @xmath71 .",
    "in other words , @xmath73 is a subset of the cartesian product of the domains of the variables in @xmath75 . to access the relation and the scope of @xmath71 define @xmath76 and @xmath77 . for a _ ( constraint variable ) assignment _ @xmath78 and a constraint @xmath79 with @xmath80 , define @xmath81 , and call @xmath71 _ satisfied _ if @xmath82 . given this ,",
    "define the set of constraints satisfied by @xmath83 as @xmath84    a binary constraint  @xmath71 has @xmath85 .",
    "for example , @xmath86 ensures that @xmath87 and @xmath88 take different values .",
    "a global ( or @xmath89-ary ) constraint  @xmath71 has parametrized scope .",
    "for example , the _ all - different _ constraint ensures that a set of variables , @xmath90 take all different values .",
    "this can be decomposed into @xmath91 binary constraints , @xmath92 for @xmath93 .",
    "however , as we shall see , such reformulation can hinder inference .",
    "an assignment  @xmath83 is a _ solution _ iff it satisfies all constraints in @xmath70 .",
    "constraint solvers typically use backtracking search to explore the space of partial assignments .",
    "various heuristics affecting , for instance , the variable selection criteria and the ordering of the attempted values , can be used to guide the search . each time a variable is assigned a value , a deterministic propagation stage is executed , pruning the set of values to be attempted for the other variables , i.e. , enforcing a certain type of local consistency .",
    "a binary constraint  @xmath71 is called _ arc consistent _ iff when a variable  @xmath94 is assigned any value  @xmath95 , there exists a consistent value  @xmath96 for the other variable  @xmath88 . an @xmath89-ary constraint  @xmath71 is _ hyper - arc consistent _ or _",
    "domain consistent _ iff when a variable  @xmath97 is assigned any value  @xmath98 , there exist compatible values in the domains of all the other variables  @xmath99 for all @xmath100 such that @xmath101 .",
    "relational consistency @xcite extends the concept of local consistency .",
    "i.e. a constraint  @xmath71 is _ relationally @xmath19-arc consistent _ if any consistent assignment of a @xmath19-elementary subset of variables from @xmath102 extends to a consistent assignment of all variables in @xmath102 .",
    "the concepts of bound and range consistency are defined for constraints on ordered intervals .",
    "let @xmath103 and @xmath104 be the minimum value and maximum value of the domain  @xmath105 .",
    "a constraint  @xmath71 is _ bound consistent _ iff when a variable  @xmath68 is assigned @xmath106 ( i.e. the minimum or maximum value in its domain ) , there exist compatible values between the minimum and maximum domain value for all the other variables in the scope of the constraint .",
    "such an assignment is called a _ bound support_. a constraint is _ range consistent _ iff when a variable is assigned any value in its domain , there exists a bound support .",
    "notice that range consistency is in between domain and bound consistency , where domain consistency is the strongest of the three formalisms .",
    "in this section we explain how to reformulate multi - valued variables and constraints on finite domains into a logic program under answer set semantics . in what follows",
    ", we assume @xmath107 for all @xmath108 to save the reader from multiple superscripts .",
    "[ [ direct - encoding ] ] direct encoding + + + + + + + + + + + + + + +    a popular choice is called the _ direct encoding _ @xcite . in the direct encoding , a propositional variable @xmath109 , representing @xmath110 , is introduced for each value  @xmath111 that can be assigned to the constraint variable  @xmath112 . intuitively , the proposition @xmath109 is true if @xmath112 takes the value @xmath111 , and false if @xmath112 takes a value different from @xmath111 . for each @xmath112 ,",
    "the truth - assignments of atoms @xmath109 are encoded by a choice rule ( 1 ) .",
    "furthermore , there is an integrity constraint ( 2 ) to ensure that @xmath112 takes at least one value , and a cardinality constraint ( 3 ) that ensures that @xmath112 takes at most one value .",
    "@xmath113 in the direct encoding , each forbidden combination of values in a constraint is expressed by an integrity constraint . on the other hand , when a relation is represented by allowed combinations of values ,",
    "all forbidden combinations have to be deduced and translated to integrity constraints .",
    "unfortunately , the direct encoding of constraints hinders propagation :    enforcing arc consistency on the binary decomposition of the original constraint prunes more values from the variables domain than unit - propagation on its direct encoding .",
    "[ [ support - encoding ] ] support encoding + + + + + + + + + + + + + + + +    the _ support encoding _ has been proposed to tackle this weakness @xcite .",
    "a _ support _ for a constraint variable  @xmath112 to take the value  @xmath111 across a constraint  @xmath71 is the set of values @xmath114 of another variable in  @xmath115 which allow @xmath110 , and can be encoded as follows , extending ( 13 ) : @xmath116 this integrity constraint can be read as whenever @xmath110 , then at least one of its supports must hold . in the support encoding , for each constraint  @xmath71 there is one support for each pair of distinct variables @xmath117 , and for each value  @xmath111 .",
    "unit - propagation on the support encoding enforces arc consistency on the binary decomposition of the original constraint .",
    "we illustrate this approach on an encoding of the global _ all - different _ constraint . for variables @xmath118 and value @xmath111 it can be reduced from the definition by using the equivalence covered by ( 23 ) to @xmath119 observe , that this is also the direct encoding of the binary decomposition of the global _ all - different _ constraint",
    ". however , this observation does not hold in general for all constraints . as discussed in the background section of this paper",
    ", we can express above condition as @xmath120 cardinality constraints : @xmath121    unit - propagation on ( 14 ) enforces arc consistency on the binary decomposition of the global _ all - different _ constraint in @xmath122 down any branch of the search tree .",
    "[ [ k - support - encoding ] ] k - support encoding + + + + + + + + + + + + + + + + + +    the support encoding can be generalized to the _ @xmath19-support encoding _ @xcite representing supports on subsets of @xmath102 for an assignment of another @xmath19-elementary subset of variables in @xmath102 .",
    "more formal , a @xmath19-support  @xmath75 for an assignment @xmath83 of @xmath19  variables from @xmath102 , say @xmath123 , is an assignment @xmath124 such that @xmath125 which allows @xmath83 .",
    "we introduce a _ support - variable _",
    "@xmath126 , that evaluates to true iff @xmath75 holds : @xmath127 furthermore , let @xmath128 be the set of all @xmath19-supports of @xmath83 .",
    "a @xmath19-support rule for @xmath83 is defined as @xmath129 meaning that as long as @xmath83 holds then at least one of its @xmath19-supports @xmath130 must hold . in the @xmath19-support encoding , for each constraint  @xmath71 there is one @xmath19-support rule for each assignment  @xmath83 of @xmath19  variables from @xmath102 .",
    "unit - propagation on the @xmath19-support encoding enforces relational @xmath19-arc consistency on the original constraint .",
    "[ [ range - encoding ] ] range encoding + + + + + + + + + + + + + +    in the _ range encoding _ , a propositional variable  @xmath131 is introduced for all @xmath132 to represent whether the value of  @xmath112 is between @xmath133 and @xmath134 .",
    "for each range  @xmath135 , the following @xmath122 rules encode @xmath136 whenever it is safe to assume that @xmath137 and @xmath138 , and enforce a consistent set of ranges such that @xmath139 : @xmath140 constraints are encoded into integrity constraints representing conflict regions .",
    "when the combination @xmath141 violates the constraint , the following rule is added : @xmath142    unit - propagation on the range encoding enforces range consistency on the original constraint .",
    "a propagator for the global _ all - different _ constraint that enforces range consistency pruning hall intervals has been proposed by @xcite ( @xcite ) and encoded to sat by @xcite ( @xcite ) .",
    "an interval  @xmath135 is a _ hall interval _",
    "iff @xmath143 .",
    "in other words , a hall interval of size  @xmath19 completely contains the domains of @xmath19  variables .",
    "observe that in any bound support , the variables whose domains are contained in the hall interval consume all values within the hall interval , whilst any other variable must find their support outside the hall interval .",
    "the following reformulation of the global _ all - different _ constraint will permit us to achieve range consistency via unit propagation . it ensures that no interval @xmath144 can contain more variables than its size .",
    "@xmath145 this simple reformulation can simulate a complex propagation algorithm like @xcite s with a similar overall complexity of reasoning .",
    "unit - propagation on ( 58 ) enforces range consistency on the global _ all - different _ constraint in @xmath146 down any branch of the search tree .",
    "a hybrid that links the range encoding of @xmath112 to its direct representation extends the range encoding as follows , for each @xmath147 : @xmath148 these rules encode the equivalence @xmath149 .",
    "[ [ bound - encoding ] ] bound encoding + + + + + + + + + + + + + +    a last encoding is called the _ bound encoding _ @xcite . in the bound encoding , a propositional variable  @xmath150 is introduced for each value @xmath111 to represent that the value of  @xmath112 is bounded by  @xmath111 .",
    "that is , @xmath151 if @xmath152 is assigned _ true _ , and @xmath153 if @xmath152 is assigned _",
    "false_. similar to the direct encoding , for each @xmath112 , the truth - assignments of atoms  @xmath150 are encoded by a choice rule ( 9 ) . in order to ensure that assignments represent a consistent set of bounds , the condition @xmath154 is posted as integrity constraints ( 10 ) @xmath155 .",
    "another integrity constraint ( 11 ) encodes @xmath156 , that at least one value must be assigned to @xmath112 : @xmath157 constraints are encoded into integrity constraints representing conflict regions similar to the range encoding .",
    "when all combinations in the region @xmath158 violate a constraint , the following rule is added : @xmath159    unit - propagation on the bound encoding enforces bound consistency on the original constraint .    in order to get a representation of the global _ all - different _ constraint that can only prune bounds , the bound encoding for variables",
    "is linked to ( 8) as follows : @xmath160    unit - propagation on ( 814 ) enforces bound consistency on the global _ all - different _ constraint in @xmath122 down any branch of the search tree .",
    "note that an upper bound @xmath161 can be posted on the size of hall intervals .",
    "the resulting encoding with only those cardinality constraints ( 5 ) for which @xmath162 detects hall intervals of size at most @xmath161 , and therefore enforces a weaker level of consistency .    to access the value of @xmath112",
    ", the bound encoding can be extended to a hybrid by adding the following rules to the bound encoding for each @xmath163 : @xmath164 the first rule enforces @xmath109 to be true if possible values for @xmath112 are bound to the singleton @xmath111 , i.e. @xmath151 and @xmath165 are in the assignment . on the other hand , the condition @xmath166 is represented as integrity constraints .    [",
    "[ non - ground - logic - programs ] ] non - ground logic programs + + + + + + + + + + + + + + + + + + + + + + + + +    although our semantics is propositional , atoms in @xmath1 and can be constructed from a first - order signature @xmath167 , where @xmath168 is a set of function symbols ( including constant symbols ) , @xmath169 is a denumerable collection of first - order variables , and @xmath170 is a set of predicate symbols . the logic program over @xmath1 is then obtained by a grounding process , systematically substituting all occurrences of variables @xmath169 by terms in @xmath171 , where @xmath171 denotes the set of all ground terms over @xmath168 .",
    "atoms in @xmath1 are formed from predicate symbols @xmath170 and terms in @xmath171 .",
    "to evaluate these reformulations , we conducted experiments on encodings containing _ all - different _ and _ permutation _ constraints . the global _ permutation _ constraint is a special case of _ all - different _ when the number of variables is equal to the number of all their possible values .",
    "a reformulation of _ permutation _ extends ( 4 ) by @xmath172 or ( 8) by the following rule where @xmath173 : @xmath174 this can increase propagation .",
    "our reformulations have been implemented within the prototypical preprocessor _",
    "inca _ which compiles an ( extended ) logic programs with high - level statements for global constraints , constraint variables , first - order variables , function symbols , and aggregates , etc . in linear time and space ,",
    "such that the logic program can be obtained by a _ grounding _ process .",
    "experiments consider _ inca _ in different settings using different reformulations .",
    "we denote the support encoding of the global constraints by @xmath75 , the bound encoding of the global constraints by @xmath175 , and the range encoding of the global constraints by @xmath176 . to explore the impact of small hall intervals , we also tried @xmath175@xmath177 and @xmath176@xmath177 , an encoding of the global constraints with only those cardinality constraints ( 8) for which @xmath178 .",
    "the consistency achieved by @xmath175@xmath177 and @xmath176@xmath177 is therefore weaker than full bound and range consistency , respectively .",
    "we also include the pure cp system _ gecode _ ( 3.2.0 ) , and the integrated system _ ezcsp _ ( 1.6.9 ; @xcite @xcite ) in our empirical analysis .",
    "the latter combines the grounder _ gringo _ ( 2.0.3 ) and asp solver _ clasp _ ( 1.3.0 ) with _ sicstus _ ( 4.0.8 ) as a constraint solver . since _",
    "inca _ is a pure preprocessor , we select the asp system _ clingo _ ( 2.0.3 ) as its backend to provide a representative comparison with _",
    "ezcsp_. note that _ clingo _ stands for _ clasp _ on _ gringo _ and combines both systems in a monolithic way .",
    "all experiments were run on a 2.00  ghz pc under linux .",
    "we report results in seconds , where each run was limited to 600 s time and 1 gb ram .",
    "[ [ pigeon - hole - problem ] ] pigeon hole problem + + + + + + + + + + + + + + + + + + +    the _ pigeon hole problem _ ( php ) is to show that it is impossible to put @xmath89 pigeons into @xmath179 holes if each pigeon must be put into a distinct hole .",
    "clearly , our bound and range reformulations are faster compared to weaker encodings ( see table [ tab : php ] ) .",
    "it appears that _ sicstus_ and _ gecode _ s default configuration uses filtering algorithms for the global _ all - different _ constraint achieve arc consistency on its binary decomposition .",
    "however , on such problems , detecting large hall intervals is essential .",
    ".runtime results in seconds for php .",
    "[ tab : php ] [ cols=\"^,^,^,^,^,^,^,^\",options=\"header \" , ]     table [ tab : ggp ] shows that our encodings compete with _ ezcsp _ and outperform _ gecode _ , where the support encoding performs better than bound and range encodings . in most cases",
    ", the branching heuristic used in our approach appears to be misled by the extra variables introduced in @xmath180 and @xmath181 .",
    "that explains some of the variability in the runtimes .",
    "we have reformulated global and other constraints into answer set programs .",
    "in particular , we have investigated various generic asp encodings for constraints on finite domains and proved which level of consistency unit - propagation achieves on them .",
    "our techniques were formulated as preprocessing and can be applied to any asp system without changing its source code , which allows for programmers to select the asp solver that best fit their needs .",
    "we have empirically evaluated the performance of such an approach on benchmarks from cp and found that such reformulations outperform integrated asp(cp ) systems as well as pure cp solvers .",
    "our future works includes the reformulation of other useful global constraints into answer set programming like the _ regular _ constraint , as well as global constraints like _ lex _ which are very useful for symmetry breaking .",
    "bessire , c. ; katsirelos , g. ; narodytska , n. ; quimper , c .- g . ; and walsh , t. 2009 .",
    "decompositions of all different , global cardinality and related constraints . in _ proc . of ijcai09_. aaai press / the mit press ."
  ],
  "abstract_text": [
    "<S> we show that global constraints on finite domains like _ all - different _ can be reformulated into answer set programs on which we achieve arc , bound or range consistency . </S>",
    "<S> these reformulations offer a number of other advantages beyond providing the power of global propagators to answer set programming . </S>",
    "<S> for example , they provide other constraints with access to the state of the propagator by sharing variables . </S>",
    "<S> such sharing can be used to improve propagation between constraints . </S>",
    "<S> experiments with these encodings demonstrate their promise . </S>"
  ]
}