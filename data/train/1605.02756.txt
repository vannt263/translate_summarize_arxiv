{
  "article_text": [
    "shor s quantum algorithm for integer factorization @xcite is a striking case of superpolynomial speed - up promised by a quantum computer over the best - known classical algorithms . since shor s original paper , many explicit circuit constructions over qubits for performing the algorithm",
    "have been developed and analyzed .",
    "this includes automated synthesis of the underlying quantum circuits for the binary case ( see the following and references therein : @xcite ) .",
    "it has been previously noted that arithmetic encoding systems beyond binary may yield more natural embeddings for some computations and potentially lead to more efficient solutions .",
    "( a brief history note on this line of thought can be found in section 4.1 of @xcite . )",
    "experimental implementation of computation with ternary logic , for example with josephson junctions , dates back to 1989 @xcite .",
    "more recently , multi - valued logic has been proposed for linear ion traps @xcite , cold atoms @xcite , and entangled photons @xcite . in topological quantum computing",
    "it has been shown that metaplectic non - abelian anyons @xcite naturally align with ternary , and not binary , logic .",
    "these anyons offer a natively topologically protected universal set of quantum gates ( see , for example , @xcite ) , in turn requiring little to no quantum error correction .",
    "it is also interesting to note that qutrit - based computers are in certain sense space - optimal among all the qudit - based computers with varying local quantum dimension .",
    "thus in @xcite an argument is made that , as the dimension of the constituent qudits increases , the cost of maintaining a qudit in fully entangled state also increases and the optimum cost per hilbert dimension is attained at local dimension of @xmath0 .",
    "transferring the wealth of multi - qubit circuits to multi - qutrit framework is not straightforward .",
    "some of the binary primitives , for example the binary hadamard gate and the two - qubit @xmath1 gate , do not remain clifford operations in the ternary case .",
    "therefore , they can not be emulated by ternary clifford circuits .",
    "we resolve this complication by developing efficient non - clifford circuits for a _ generic _ ternary quantum computer first .",
    "we then extend the solution to the metaplectic topological quantum computer ( mtqc ) platform @xcite , which further reduces the cost of implementation .    a generic ternary framework that supports the full ternary clifford group , measurement , and classical control @xcite , also supports a distillation protocol that prepares magic states for the @xmath2 gate : @xmath3 the clifford+@xmath2 basis is universal for quantum computation and serves a similar functional role in ternary logic as the clifford+@xmath4 basis in binary logic ( see @xcite for the more general qudit context ) .",
    "we show in more detail further that the primitive @xmath5 gate available in mtqc is more powerful in practice than the @xmath2 gate .",
    "arguably , a natural choice to implement shor s algorithm on a ternary quantum computer is to translate the entire arithmetic into ternary form .",
    "we do so by using ternary arithmetic tools developed in @xcite ( with some practical improvements ) .",
    "we also explore alternative approach : emulation of binary version of shor s period finding algorithm on ternary processor .",
    "emulation has notable practical advantages in some contexts .",
    "for example , as shown in section [ subsec : ripple : carry ] , using a binary ripple - carry additive shift consumes fewer clean @xmath2 magic states than the corresponding ternary ripple - carry additive shift ( cf . table [ table : binary : vs : ternary ] ) .",
    "we also show that on a metaplectic ternary computer the magic state coprocessor is asymptotically smaller than a magic state distillation coprocessor , such as the one developed in @xcite for the generic ternary quantum computer .",
    "another benefit of the mtqc is the ability to approximate desired non - clifford reflections directly to the required fidelity , thus eliminating the need for magic states .",
    "the tradeoff is an increase in the depth of the emulated shor s period finding circuit by a logarithmic factor , which is tolerable for the majority of instances .",
    "the cost benefits of using exotic non - abelian anyons for integer factorization has been previously noted , for example in @xcite , where hypothetical fibonacci anyons were used .",
    "it is worthwhile noting that neither binary nor ternary logic is native to fibonacci anyons , so the @xmath6 , @xmath1 or toffoli gates are much harder to emulate there than on a hypothetical metaplectic anyon computer .",
    "the paper is organized as follows . in section [ sec : backgroud ] we state the definitions and equations pertaining the two ternary architectures used , and gaive a quick overview of the shor s period finding function . in section",
    "[ sec : emulation ] we perform a detailed analysis of reversible classical circuits for modular exponentiation .",
    "we compare two designs of the modular exponentiation arithmetic .",
    "one is emulation of binary encoding of integers combined with ternary arithmetic gates .",
    "the other uses ternary encoding of integers with ternary gates .    in section [ sec : reflections ] we develop circuits for the key arithmetic gates based on designs from @xcite with further optimizations .",
    "in section [ sec : specific : resource : counts ] we compare the resource cost of performing modular exponentiation .",
    "an interesting feature of ternary arithmetic circuits is the fact that the denser and more compact ternary encoding of integers does not necessarily lead to more resource - efficient period finding solutions compared to binary encoding .",
    "the latter appears to be better suited in practice for low - width arithmetic circuit designs ( hence , e.g. , for smaller quantum computers ) .",
    "we also compare the magic state preparation requirements .",
    "we highlight the huge advantage of the metaplectic topological computer .",
    "magic state preparation requires width that is linear in @xmath7 on an mtqc , whereas it requires width in @xmath8 on a generic ternary quantum computer . in the binary clifford+t architecture , where @xmath9 can vary between @xmath10 and @xmath11 depending on practically applicable distillation protocol . ]",
    "all the circuit designs and resource counts are done under assumption of fully - connected multi - qutrit network .",
    "factorization circuitry optimized for sparsely connected networks , such as nearest - neighbor for example , is undeniably interesting ( cf .",
    "@xcite ) but we had to set this topic aside in the scope of this paper .",
    "a common assumption for a multi - qudit quantum computer architecture is the availability of quantum gates generating the full multi - qudit clifford group ( see @xcite,@xcite ) . in this section",
    "we describe a _",
    "generic _ ternary computer , where the full ternary clifford group is postulated ; we also describe the more specific metaplectic topological quantum computer ( mtqc ) where the required clifford gates are explicitly implemented by braiding non - abelian anyons @xcite . for purposes of this paper , each braid corresponds to a unitary operation on qutrits .",
    "braids are considered relatively inexpensive and tolerant to local noise .",
    "universal quantum computation on mtqc is achieved by adding a single - qutrit phase flip gate ( @xmath12 in @xcite , @xmath13 in @xcite and our subsection [ subsec : metaplectic : basis ] ) .",
    "in contrast with the binary phase flip @xmath14 , which is a pauli gate , the ternary phase flip is not only non - clifford , but it does not belong to _ any _ level of clifford hierarchy ( see , for example , @xcite ) . intuitively one should expect this gate to be very powerful .",
    "level @xmath15 of the ternary clifford hierarchy is emulated quite efficiently on mtqc architecture , while the converse is quite expensive : implementing phase flip in terms of @xmath15 requires several ancillas and a number of repeat - until - success circuits .",
    "let @xmath16 be the standard computational basis for a qutrit .",
    "let @xmath17 be the third primitive root of unity .",
    "the ternary _ pauli _ group is generated by the _ increment _",
    "gate @xmath18 and the ternary @xmath14 gate @xmath19    the ternary _ clifford _ group stabilizes the pauli group is obtained by adding the ternary hadamard gate @xmath20 , @xmath21 the @xmath22 gate @xmath23 and the two - qutrit @xmath24 gate , @xmath25 to the set of generators of the pauli group .",
    "compared to the binary clifford group , @xmath20 is the ternary counterpart of the binary hadamard gate , @xmath22 is the counterpart of the phase gate @xmath26 , and @xmath24 is an analog of the @xmath1 ( although , intuitively it is a `` weaker '' entangler than @xmath1 , as described below ) .    for any @xmath27 , ternary clifford gates and their various tensor products",
    "generate a finite subgroup of @xmath28 ; therefore they are not sufficient for universal quantum computation .",
    "we consider and compare two methods of building up quantum universality : by implementing the @xmath2 gate as per eq .",
    "( [ eq : def : p:9 ] ) and by expanding into the metaplectic basis ( subsection [ subsec : metaplectic : basis ] ) . given enough ancillae ,",
    "these two bases are effectively and efficiently equivalent in principle ( see appendix [ app : sec : r:2 ] ) , and the costs in ancillae create practical tradeoffs depending on the given application .",
    "given an @xmath27-qutrit unitary operator @xmath29 there are different ways of expanding it into an @xmath30-qutrit unitary using the additional qutrit as `` control '' .",
    "let @xmath31 be a state of the control qutrit and @xmath32 be a state of the @xmath27-qutrit register .",
    "we define @xmath33 wherein @xmath34 denotes the kronecker delta symbol .",
    "we refer to this operator as a _ binary - controlled _ unitary @xmath29 and denote it in circuit diagrams as    ( 0.000000 , -7.500000 ) rectangle ( 24.000000 , 22.500000 ) ; ( 0.000000,15.000000 )  ( 24.000000,15.000000 ) ; ( 0.000000,0.000000 )  ( 24.000000,0.000000 ) ; ( 12.000000,15.000000 )  ( 12.000000,0.000000 ) ;    ( 12.000000 , 0.000000 ) circle(6.000000pt ) ; ( 12.000000 , 0.000000 ) circle(6.000000pt ) ; ( 12.000000 , 0.000000 ) node u ;    ( 12.000000 , 15.000000 ) circle(1.500000pt ) ; ( 16.000000 , 19.000000 ) node @xmath35 ;    we omit the label @xmath35 when @xmath36 .",
    "we also define the _ ternary - controlled _ extension of @xmath29 by @xmath37 and denote it in circuit diagrams as    ( 0.000000 , -7.500000 ) rectangle ( 24.000000 , 22.500000 ) ; ( 0.000000,15.000000 )  ( 24.000000,15.000000 ) ; ( 0.000000,0.000000 )  ( 24.000000,0.000000 ) ; ( 12.000000,15.000000 )  ( 12.000000,0.000000 ) ;    ( 12.000000 , 0.000000 ) circle(6.000000pt ) ; ( 12.000000 , 0.000000 ) circle(6.000000pt ) ; ( 12.000000 , 0.000000 ) node u ;    ( 12.000000 , 15.000000 ) circle(1.500000pt ) ;    it is paramount to keep in mind that @xmath38 ( see equations ( [ eq : inc ] ) and ( [ eq : sum ] ) ) .",
    "another useful observation is that for any unitary @xmath29 we have that @xmath39 .",
    "more detail can be found in @xcite .",
    "it is easy to see that the @xmath2 gate in eq .",
    "( [ eq : def : p:9 ] ) is not a clifford gate , e.g. , it does not stabilize the ternary pauli group .",
    "however , it can be realized by a certain deterministic measurement - assisted circuit given a copy of the _ magic _ state @xmath40    an appropriate deterministic magic state injection circuit , as proposed in ref .",
    "@xcite , is shown in figure [ fig : mu : state : injection ] .",
    "( 0.000000 , -7.500000 ) rectangle ( 72.000000 , 22.500000 ) ; ( 0.000000,15.000000 )  ( 36.000000,15.000000 ) ; ( 36.000000,14.500000 )  ( 60.000000,14.500000 ) ; ( 36.000000,15.500000 )  ( 60.000000,15.500000 ) ; ( 0.000000,15.000000 ) node[left ] @xmath41 ; ( 0.000000,0.000000 )  ( 72.000000,0.000000 ) ; ( 0.000000,0.000000 ) node[left ] @xmath42 ; ( 12.000000,15.000000 )  ( 12.000000,0.000000 ) ;    ( 12.000000 , 15.000000 ) circle(6.000000pt ) ; ( 12.000000 , 15.000000 ) circle(6.000000pt ) ; ( 12.000000 , 15.000000 ) node @xmath43 ;    ( 12.000000 , 0.000000 ) circle(1.500000pt ) ; ( 30.000000 , 9.000000 ) rectangle ( 42.000000 , 21.000000 ) ; ( 36.000000 , 15.600000 ) arc ( 90:150:6.000000pt ) ; ( 36.000000 , 15.600000 ) arc ( 90:30:6.000000pt ) ; ( 36.000000 , 9.600000 ) ",
    "+ ( 80:10.392305pt ) ; ( 59.500000,15.000000 )  ( 59.500000,0.000000 ) ; ( 60.500000,15.000000 )  ( 60.500000,0.000000 ) ;    ( 60.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt )  + ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 60.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt )  + ( 135.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 60.000000 , -0.000000 ) node @xmath44 ;    ( 60.000000 , 15.000000 ) circle(1.500000pt ) ; ( 72.000000,0.000000 ) node[right ] @xmath45 ;    for completeness , @xmath46 . note that @xmath47 is a clifford gate , since @xmath2 is at level 3 of the ternary clifford hierarchy ( cf .",
    "@xcite ) .",
    "such magic state naturally exists in any multi - qudit framework with qudits of prime dimension @xcite . when the framework supports the full multi - qudit clifford group , projective measurements and classical control , then it also supports stabilizer protocols for magic state distillation based on generalized reed - muller codes .",
    "in particular , a multi - qutrit framework supports a distillation protocol that requires @xmath48 raw magic states of low fixed fidelity in order to distill a copy of the magic state @xmath49 at fidelity @xmath50 .",
    "the distillation protocol is iterative and converges to that fidelity in @xmath51 iterations .",
    "the protocol performance is analogous to the magic state distillation protocol for the @xmath4 gate in the clifford+t framework @xcite .",
    "one architectural design is to split the actual computation into `` online '' and `` offline '' components where the main part of quantum processor runs the target quantum circuit whereas the ( potentially rather large ) `` offline '' coprocessor distills copies of a magic state that are subsequently injected into the main circuit by a deterministic widget of constant depth .",
    "discussing the details of the distillation protocol for the magic state @xmath49 is beyond the scope of this paper and we refer the reader to ref .",
    "@xcite .",
    "the ternary _ metaplectic _ quantum basis is obtained by adding the _ single qutrit axial reflection _",
    "gate    @xmath52    to the ternary clifford group .",
    "it is easy to see that @xmath13 is a non - clifford gate and that clifford+@xmath13 framework is universal for quantum computation .    in ref .",
    "@xcite this framework has been realized with certain weakly integral non - abelian anyons called _ metaplectic anyons _ which explains our use of the `` metaplectic '' epithet in the name of this universal basis . in ref .",
    "@xcite , @xmath13 is produced by injection of the magic state @xmath53 on average .",
    "for completeness we present the logic of the injection circuit on figure [ fig : r2:rus ] .",
    "each directed arrow in the circuit is labeled with the result of standard measurement of the first qutrit in the state @xmath54 .",
    "on @xmath55 the sign of the third component of the input is flipped ; on @xmath56 the sign of the first or second component respectively is flipped .",
    "= [ rectangle , thick , rounded corners=10,minimum size=1cm , draw = black!80,fill = black!10 ]    ( i_1 ) [ state ] @xmath57 ; ( i_2 ) [ state , below left=10 mm and 20 mm of i_1 ] @xmath58 ; ( i_3 ) [ state , below right=10 mm and 20 mm of i_1 ] @xmath59 ; ( i_4 ) [ state , accepting , below right=10 mm and 20 mm of i_2 ] @xmath60 ;    ( i_1 ) edge[thick ] node [ above=2 mm ] @xmath61 ( i_2 ) ( i_2 ) edge[thick ] node [ above ] ( i_1 ) ( i_1 ) edge[thick ] node [ above=2 mm ] @xmath62 ( i_3 ) ( i_3 ) edge[thick ] node [ above ] ( i_1 ) ( i_1 ) edge[thick ] node [ left ] ( i_4 ) ( i_2 ) edge[thick ] node [ below=2 mm ] @xmath62 ( i_4 ) ( i_3 ) edge[thick ] node [ below=2 mm ] @xmath61 ( i_4 ) ( i_2 ) edge[thick ] node [ below ] ( i_3 ) ( i_3 ) edge[thick ] node [ above ] @xmath55 ( i_2 ) ;    in the original anyonic framework the @xmath63 state is produced by a relatively inexpensive protocol that uses topological measurement and consequent intra - qutrit projection ( see @xcite , lemma 5 ) .",
    "this protocol requires only three qutrits and produces an exact copy of @xmath63 in @xmath64 trials on average .",
    "this is much better than any state distillation method , especially because it produces a copy of @xmath63 with fidelity @xmath65 .",
    "in @xcite we have developed effective compilation methods to compile efficient circuits in the metaplectic basis clifford+@xmath13 . in particular , given an arbitrary two - level householder reflection @xmath66 and a desired target precision @xmath67 , then @xmath66 is effectively approximated by a metaplectic circuit of @xmath5-count at most @xmath68 , where @xmath5-count is the number of occurrences of non - clifford axial reflections in the circuit .",
    "this allows us to approximate the @xmath1 and toffoli gates very tightly and at low cost over the metaplectic basis ( see section [ subsec : reflection : metaplectic ] ) .",
    "moreover if we wanted constant - depth high - fidelity widgets for @xmath1 and toffoli we can do so by emulating , rather than distilling the magic state @xmath41 of ( [ eq : def : mu ] ) by a metaplectic circuit and thus obtain a high fidelity emulation of the @xmath2 gate at constant online depth ( see section [ subsec : classical : with : p9 ] ) .",
    "as we show in appendix [ app : sec : r:2 ] , the converse also works . with available ancillas and enough reversible classical gates we can prepare the requisite magic state @xmath63 exactly on a generic ternary computer .",
    "the particular method in the appendix is probabilistic circuit for the magic state @xmath63 of ( [ eq : def : psi ] ) using the classical non - clifford gate @xmath69 .",
    "our current method for the latter gate is to implement it as a ancilla - free circuit with three @xmath2 gates .",
    "the polynomial - time algorithm for integer factorization originally developed in ref .",
    "@xcite is a hybrid algorithm that combines a quantum circuit with classical preprocessing and post - processing . in general ,",
    "the task of factoring an integer can be efficiently reduced classically to a set of hard cases .",
    "a hard case of the factorization problem comprises factoring a large integer @xmath70 that is odd , square - free and composite .",
    "let @xmath71 be a randomly picked integer that is relatively prime with @xmath70 .",
    "by euler s theorem , @xmath72 , where @xmath73 is the euler s totient function , and thus the modular exponentiation function @xmath74 is periodic with period @xmath75 .",
    "let now @xmath76 be a period of the @xmath77 function ( @xmath78 ) and suppose , additionally that @xmath66 is even and @xmath79 .",
    "then the @xmath80 must be a non - trivial divisor of @xmath70 .",
    "the greatest common divisor is computed efficiently by classical means and it can be shown that the probability of satisfying the conditions @xmath81 and @xmath79 is rather high when @xmath71 is picked at random . therefore in shor",
    "s algorithm a quantum circuit is only used for finding the small period @xmath66 of @xmath77 once an appropriate @xmath71 has been randomly picked .",
    "one quantum circuit to solve for @xmath66 consists of three stages :    1 .",
    "prepare quantum state proportional to the following superposition : @xmath82 2 .",
    "perform in - place quantum fourier transform of the first register .",
    "measure the first register .",
    "the process is repeated until a classical integer state @xmath83 obtained as the result of measurement in step 3 enables recovery of a small period @xmath66 by efficient classical post - processing .",
    "shor has shown @xcite that the probability of successful recovery of @xmath66 in one of the iterations is in @xmath84 .",
    "therefore we will succeed `` almost certainly '' in finding a desired small period @xmath66 in @xmath85 trials .",
    "given the known efficiency of the quantum fourier transform , most of the quantum complexity of this solution falls in 1 , where the state ( [ eq : shor : superposition ] ) is prepared .",
    "specific quantum circuits for preparing this superposition have been proposed ( cf .",
    "@xcite ) .    in the context of this paper ,",
    "distinguish between two types of period - finding circuits .",
    "one type , as in ref .",
    "@xcite , is width - optimizing and uses approximate arithmetic .",
    "these circuits interleave multiple quantum fourier transform and inverse fourier transform blocks into modular arithmetic circuits , which in practice leads to significant depth overhead .",
    "we forego the analysis of circuits of this type for the lack of space leaving such analysis for future research .",
    "the second type are framed as exact reversible arithmetic circuits .",
    "their efficient ternary emulation amounts to efficient emulation of @xmath1 and toffoli gates , possibly after some peephole optimization .",
    "we discuss two typical circuits of this kind in detail in section [ sec : emulation ] , and briefly touch upon a number of alternatives in appendix [ app : sec : alternative : circuits ] .",
    "it is important to note that , with a couple of exceptions the multi - qubit designs for shor state preparation assumed ideal @xmath1 and toffoli gates .",
    "however , in clifford+t framework , for example , the toffoli gate is often only as ideal as the @xmath4 gate .",
    "the question of the required fidelity of @xmath1 and toffoli gates for the quantum period finding loop to work is an important one .",
    "if the superposition ( [ eq : shor : superposition ] ) is prepared imperfectly , with fidelity @xmath86 for some @xmath67 in @xmath87 , then the probability of obtaining one of the `` useful '' measurements will be asymptotically the same as with the ideal superposition , i.e. , in @xmath84 .",
    "( for completeness , we spell out the argument in appendix [ app : sec : fidelity ] . )",
    "therefore , if @xmath88 is the depth of the corresponding quantum circuit preparing the state , then the bound on the required precision of the individual gates in the circuit may be in @xmath89 in the context of shor s algorithm . in the rest of the paper",
    "we explore ternary emulations of binary period - finding circuits and compare them to truly ternary period - finding circuits with ternary encoding of integers .",
    "we demonstrate that the fidelity and non - clifford cost of such ternary circuits are reduced to those of the @xmath90 gates .",
    "we also demonstrate that efficient emulation of binary period finding requires mostly binary toffoli gates with some use of @xmath90 .",
    "we explore two options for cost - efficient integer arithmetic over the ternary clifford+@xmath2 basis : ( a ) by emulating arithmetic on binary - encoded data ; and , ( b ) by performing arithmetic on ternary - encoded data , based on tools developed in @xcite .",
    "circuits for reversible ternary adders have been explored earlier .",
    "( see , for example , @xcite ) . since this field has been in early stages so far ,",
    "there is a lot of divergence in terminology : however in @xcite the key non - clifford tool for the circuitry is an equivalent of the @xmath91 gate , in our notation .",
    "as pointed out in @xcite , our use of this tool is more efficient , mainly due to the design of `` generalized '' carry gates and other reflection - based operations",
    ".    our ternary circuits for emulated binary encoding of integers are new , as far as we know .",
    "the emulated binary and genuine ternary versions of integer arithmetic have different practical bottlenecks , although they are asymptotically equivalent in terms of cost . with the ripple - carry adders , the emulated binary encoding wins , in practice , in both width and depth over the ternary encoding ,",
    "whereas with carry - lookahead adders the ternary encoding achieves smaller width but yields no notable non - clifford depth advantage in the context of modular exponentiation .    to give the study a mathematical form ,",
    "let us agree to take into account only non - clifford gates used with either encoding and let us agree to count a stack of non - clifford gates performed in parallel in one time slice as a single _ unit of non - clifford depth_. we call the number of units of non - clifford depth in a circuit the _ non - clifford depth _ of the circuit",
    ".    throughout the rest of the paper we use the following    for integer @xmath92 let @xmath93 , @xmath94 be two different standard basis vectors in the @xmath27-qudit hilbert space .",
    "we call the classical gate @xmath95 a _ two - level axial reflection _ in @xmath27 qudits .    as a motivation for this term , note that @xmath96 can be rewritten as the two - level householder reflection @xmath97 clearly , in binary encoding , the @xmath1 , the toffoli and any variably controlled toffoli gate is a two - level axial reflection in the corresponding number of dimensions .",
    "we discuss emulating an additive shift circuit improving on a quantum ripple - carry adder from @xcite .",
    "are cast in * bold * font below .",
    "let @xmath71 be a classically known @xmath27-bit integer and @xmath98 be a quantumly - stored @xmath27-qubit basis state .",
    "we are looking for a quantum implementation of the function @xmath99 .",
    "more specifically , we are looking for a pre - compiled quantum circuit @xmath100 parameterized by @xmath71 which is known at compilation time .",
    "consider the well - known quantum ripple - carry adder from @xcite ( in particular , the circuit illustrated on figure 4 for @xmath101 there that is copied , for completeness into our fig .",
    "[ fig : original : cuccaro ] ) .",
    "the adder uses @xmath102 qubits .",
    "it performs a ladder of @xmath27 @xmath103 gates to compute all the carry bits , including the top one . the top carry bit",
    "is copied unto the last qubit and the ladder of @xmath27 @xmath104 gates is performed .",
    "each @xmath104 gate uncomputes the corresponding @xmath103 function and performs the three - way @xmath105 addition @xmath106 .",
    "it is somewhat hard to fold in the classically known @xmath71 in the multi - qubit framework using this design .",
    "note however , that a solution along these lines is offered in @xcite .",
    "however it is easy to fold in @xmath71 in ternary emulation using the third basis state of the qutrit .",
    "we show that it takes exactly @xmath107 qutrits to emulate the binary shift @xmath99 .",
    "consider @xmath107 qutrits where the top and the bottom ones are prepared in @xmath108 state and the remaining @xmath27 encode the _ _",
    "b__inary bits of the @xmath109 .",
    "we will be looking for reversible two - qutrit gates @xmath110 such that @xmath111 where @xmath112 is the correct carry bit for @xmath113 and @xmath114 is an appropriate trit .",
    "since all the bits of @xmath71 are known we can precompile a ladder of @xmath115 gates that correctly computes the top carry bit @xmath116 and puts the modified carry trit @xmath114 on each @xmath117 wire .",
    "having copied @xmath116 onto the last qutrit , we sequentially undo the @xmath115 gates in lockstep with computing partial @xmath105-sums @xmath118 on all the @xmath117 wires using gates of @xmath1 type .",
    "we note that @xmath119 are ternary gates , used however in a narrow context of a truth table with just four columns .",
    "one would intuitively expect that their restriction to the context can be emulated at a relatively small expense .    indeed :    [ prop : ys : improved ] label the @xmath120 wire by @xmath121 and @xmath122 wire by @xmath65 in the context of binary data the gates @xmath123 and @xmath124 satisfy the condition ( [ eq : for : y : gate ] ) .",
    "here the @xmath69 is the binary - controlled increment @xmath125    by direct computation .",
    "note , that we do not care , what either of these two circuits does outside of the binary data subspace as long as the action is reversible .",
    "the @xmath69 gate is also denoted as @xmath126 in ref .",
    "@xcite , where its cost and utility is discussed in detail ( see also further discussion in section [ sec : reflections ] ) .",
    "the non - clifford cost of either @xmath127 gate is equal to the non - clifford cost of @xmath69 which is known to be @xmath128 @xmath2 gates .",
    "allowing one ancillary qutrit , the @xmath69 is represented by a circuit of @xmath2-depth of @xmath65 and @xmath2-width of @xmath128 .",
    "besides the generalized carry computation , the additive shift circuit also needs to perform the bitwise @xmath129 addition by emulated gates of @xmath1 type .",
    "recall that @xmath1 gate can not be exactly represented by a ternary clifford circuit ( cf .",
    "@xcite , appendix a ) .",
    "as shown further in proposition [ prop : cnot : ancilla - free ] , the non - clifford cost of ternary - emulated @xmath1 on binary data only is an equivalent of two @xmath69 .",
    "thus the additive shift takes roughly @xmath130 @xmath2 gates to complete ( not counting the clifford scaffolding ) . with one ancilla",
    "this can be done at @xmath2-depth of @xmath131 and @xmath2-width of @xmath128 .",
    "however , shor s period funding functions relies on controlled and doubly - controlled versions of the additive shift .",
    "it suffices to control only the bitwise addition gates .",
    "thus adding one level of control produces @xmath27 additional toffoli gates and adding the second level of control turns these gates into controlled toffolis .",
    "this is the bottleneck of the emulated solution : as per corollaries [ corol : toffoli : the:12 ] and [ corol : ctrl : toffoli:18 ] in section below , an emulated toffoli takes @xmath132 @xmath2 and the binary - controlled toffoli takes @xmath133 @xmath2 gates respectively .",
    "thus overall the controlled shift takes @xmath134 @xmath2 and the doubly - controlled shift takes @xmath135 @xmath2 gates . allowing , again , an ancillary qutrit the @xmath2-depths of the corresponding circuits can be made @xmath136 and @xmath137 respectively .    for what it is worth ,",
    "the @xmath2-counts in this solution are similar ( and in fact marginally lower ) than the @xmath4-counts required for running the original binary adder @xcite on the more common binary clifford+t platform .",
    "indeed each of the @xmath103 and @xmath104 gates shown on figure [ fig : original : cuccaro ] is clifford - equivalent to a toffoli gate that takes @xmath138 @xmath4 gates to implement . adding one level of control to the adder increases the non - clifford complexity by an additional @xmath27 toffoli gates to the total @xmath4-count of @xmath139 . adding the second level of control , conservatively , brings in @xmath140 additional modified toffoli gates to yield the total @xmath4-count of @xmath141 .",
    "we also note that the width of the ternary emulation circuit is equal to @xmath107 qutrits , whereas the original purely binary design appears to require @xmath142 qubits .",
    "the construction of corollaries [ corol : toffoli : the:12 ] and [ corol : ctrl : toffoli:18 ] requires 1 and 2 ancillas respectively .",
    "these ancillae can be shared along the depth of the circuit inflating the overall width by 2 qutrits .",
    "consider ripple - carry implementation of the quantum function @xmath99 , where @xmath109 is quantumly encoded integer and @xmath71 is an integer that is classically known .",
    "suppose @xmath71 and @xmath98 are encoded as either bit strings with at most @xmath27 bits or as trit strings with at most @xmath143 trits ( with @xmath144 ) .",
    "since @xmath71 is classically known , we strive to improve on the ternary ripple - carry adder of @xcite by folding in the trits of @xmath71",
    ". however , we are no longer able to encode all of the quantum information for @xmath98 and the carry on the same qutrit .",
    "the additive shift thus requires roughly @xmath145 qutrits to run ( where @xmath146 is the number of trits equal to @xmath65 in the ternary expansion of @xmath71 ) .",
    "the ternary additive shift in this design has somewhat higher non - clifford time cost compared to the emulated binary shift of section [ subsec : ripple : carry ] .    for the classical additive shift we do not physically encode the trits of @xmath71 and instead pre - compile different",
    "generalized carry circuits for different values of these trits .",
    "tables [ table : ai:1 ] and [ table : ai:0 ] show the truth tables for the consecutive carry @xmath147 given , respectively , @xmath148 and @xmath149 ( the case of @xmath150 is symmetric to the case @xmath151 and yields the came conclusions ) .",
    "l@c@c@c@c@c@c + @xmath120 & @xmath121 & @xmath121 & @xmath121 & @xmath65 & @xmath65 & @xmath65 + @xmath122 & @xmath121 & @xmath65 & @xmath152 & @xmath121 & @xmath65 & @xmath152 + @xmath147 & @xmath121 & @xmath121 & @xmath65 & @xmath121 & @xmath65 & @xmath65 +    l@c@c@c@c@c@c + @xmath120 & @xmath121 & @xmath121 & @xmath121 & @xmath65 & @xmath65 & @xmath65 + @xmath122 & @xmath121 & @xmath65 & @xmath152 & @xmath121 & @xmath65 & @xmath152 + @xmath147 & @xmath121 & @xmath121 & @xmath121 & @xmath121 & @xmath121 & @xmath65 +    the case of @xmath148 does not require any ancillary qutrits since the @xmath147 is a balanced binary function that can be produced reversibly on the pair of qutrits encoding @xmath120 and @xmath122 by ternary @xmath153 gate followed by @xmath154 .",
    "however , in the case of @xmath155 the @xmath156 in five cases ( respectively , for @xmath157 the @xmath158 in five cases ) and such five basis vectors can not be represented in two - qutrit state space .",
    "these cases thus require an ancillary qutrit to encode @xmath147 .",
    "in the case of @xmath155 we simply take the ancilla in the @xmath108 state and apply doubly - controlled @xmath159 gate with the ternary control on @xmath120 and binary control on @xmath122 . in the case of @xmath157",
    "it suffices to additionally use the clifford @xmath160 gate on the @xmath147 .    assuming @xmath71 is generic with @xmath161 we get an average width of the additive shift circuit of roughly @xmath162 which eliminates the space savings afforded by denser ternary encoding ( @xmath163 ) .",
    "let us now make case for the second observation .",
    "proven practically optimal ) .",
    "we start by assessing the clean magic state counts for simple uncontrolled additive shift .",
    "we note that for any classical value of the @xmath164 trit the non - clifford cost of the carry gate is the same and equals @xmath165 clean magic states . indeed , depending on @xmath164 and in terminology of @xcite we either need one gate of @xmath166 type or one gate of @xmath167 type . in subsection 5.1 of the @xcite",
    "both types are reduced to @xmath168 binary - controlled increments and consequently to @xmath165 @xmath2 gates .",
    "the concluding trit - wise addition is done by clifford @xmath24s at negligible cost .",
    "thus the overall cost of the circuit is roughly @xmath169 @xmath2 gates . allowing an ancillary qutrit ,",
    "the @xmath2-depth of the circuit can be made equal to @xmath170 .",
    "adding one ternary control to the circuit turns all the finalizing @xmath24s into``horner '' gates @xmath171 that overall takes @xmath172 additional @xmath2 gates to the total non - clifford cost of @xmath173 @xmath2 gates .",
    "a subtle point discussed in section [ subsec : mod : exponetiation ] below is that the second control that is routinely added to the additive shift gate @xmath174 is in fact strict control that turns it into a @xmath175 gate @xmath176 where @xmath177 is activated only by the control basis state @xmath178 .",
    "this turns each of the the @xmath179 `` horner '' gates into a four - qutrit @xmath180 gate .",
    "we do not have an available ancilla - free design for a synthesis of this gate .",
    "our best design described in proposition [ prop : c : lambda : sum ] sets the non - clifford cost at @xmath181 @xmath2 gates given one clean ancilla .    thus adding the required second ( strict ) control inflates the overall cost of the ternary circuit to @xmath182 @xmath2 gates .",
    "again , with available ancilla the circuit can be restacked to @xmath2-width of @xmath128 reducing the @xmath2-depth by the factor of @xmath128 ( to roughly @xmath183 in case of doubly - controlled additive shift ) .",
    "is less than the non - clifford cost of the emulated binary @xmath27-bits doubly - controlled additive shift .",
    "the comparative cost of the binary and ternary options is summarized in table [ table : binary : vs : ternary ] .",
    "l@l@l + & & +   + simple additive shift & @xmath184 & @xmath185 + controlled additive shift & @xmath186 & @xmath187 + doubly - controlled additive shifts & @xmath188 & @xmath189 +    we demonstrate in the section [ subsec : modular : shifts ] that the best - known ternary - controlled modular shift circuit requires @xmath190 instead of @xmath128 additive shift blocks on roughly half of the modular addition cases , so , in the context of the required modular addition , the emulated binary encoding appears to be a practical win - win when a low width ripple - carry adder is used .",
    "the resource layout is different for known carry lookahead solutions . for the sake of space we forego detailed analysis and only sketch the big picture .    we assume , that the integers @xmath71 and @xmath98 are encoded as either bit strings with at most @xmath27 bits or as trit strings with at most @xmath143 trits .",
    "we use carry lookahead additive shifts based on the in - place multi - qubit carry lookahead adder @xcite and the in - place multi - qutrit carry lookahead adder @xcite .",
    "the non - clifford depths of the corresponding circuits are @xmath191 and @xmath192 respectively up to small additive constants .    because @xmath193 , there is no substantial difference in non - clifford depths .",
    "the non - clifford layers of the binary adder are populated with toffoli gates and for the ternary adder they are populated with carry status merge / unmerge widgets ( the @xmath194 and @xmath195 widgets of @xcite ) .",
    "the cost of ancilla - free emulation of the former or , respectively , execution of the latter is identical with @xmath165 @xmath2 gates .",
    "when levels of control are added to the shift circuit , putting ternary control on ternary widgets is more expensive than building multi - controlled toffoli gates , as discussion in section [ subsec : ripple : carry ] implies .",
    "but in the context of carry lookahead circuits the multi - controlled gates are located in just two layers out of @xmath196 thus the impact of this cost distinction is both asymptotically and practically negligible .    note that the widths of the binary and ternary circuits are roughly proportional to @xmath27 and @xmath143 , respectively .",
    "this means that the purely ternary solution has roughly @xmath197 smaller width .",
    "depth overhead percentage is moderate , we should prefer purely ternary encoding when implementing shor s period finding on small quantum computer .",
    "we review layout for modular additive shift and controlled modular additive shift in both emulated binary and genuine ternary setups .",
    "let @xmath198 and @xmath199 be classically known integers .",
    "the commonly used scheme to compute the quantum modular additive shift @xmath200 is to compute @xmath201 , figure out whether @xmath202 and , if not , then subtract @xmath70 . in order to do it coherently without measurement",
    "we need to    1 .",
    "speculatively compute the @xmath203 shift ; structure it so that the top carry bit @xmath204 is @xmath65 iff @xmath205 .",
    "copy @xmath204 to a clean ancilla @xmath206 .",
    "3 .   apply the shift by @xmath207 controlled by the ancilla @xmath206 .",
    "4 .   clean up the ancilla @xmath206 .",
    "surprisingly , the last step is less than trivial .",
    "we need to compare the encoded integer @xmath208 after step 3 ) to @xmath71 .",
    "then @xmath209 if and only if @xmath210 .",
    "therefore we must flip the ancilla if and only if @xmath209 .",
    "we do this by taking a circuit for comparison to classical threshold and wiring the @xmath211 into it in place of the top carry qubit .",
    "it is easy to see that performing the comparison circuit has the exactly the desired effect on the ancilla @xmath206 .",
    "a top level layout of the modular additive shift is shown in figure [ fig : modular : shift ] .",
    "we note that the three - stage layout shown in the figure is not entirely new .",
    "it is very similar to designs proposed in @xcite and @xcite .",
    "clearly the non - clifford depth of this scheme is roughly triple the non - clifford depth of the additive shift circuit in either binary or ternary framework .",
    "( 0.000000 , -7.500000 ) rectangle ( 90.000000 , 37.500000 ) ; ( 0.000000,30.000000 ) ",
    "( 90.000000,30.000000 ) ; ( 0.000000,30.000000 ) node[left ] @xmath109 ; ( 0.000000,15.000000 )  ( 71.000000,15.000000 ) ; ( 85.000000,15.000000 ) ",
    "( 90.000000,15.000000 ) ; ( 0.000000,15.000000 ) node[left ] @xmath108 ; ( 0.000000,0.000000 )  ( 90.000000,0.000000 ) ; ( 0.000000,0.000000 ) node[left ] @xmath108 ; ( 12.000000,30.000000 )  ( 12.000000,15.000000 ) ;    ( 12.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 12.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 12.000000 , 22.500000 ) node @xmath212 ;    ( 33.000000,15.000000 )  ( 33.000000,0.000000 ) ; ( 33.000000 , 15.000000 ) circle(1.000000pt ) ;    ( 33.000000 , 0.000000 ) circle(3.000000pt ) ; ( 33.000000 , 0.000000 ) circle(3.000000pt ) ; ( 30.000000 , 0.000000 )  ( 36.000000 , 0.000000 ) ; ( 33.000000 , -3.000000 )  ( 33.000000 , 3.000000 ) ;    ( 54.000000,30.000000 )  ( 54.000000,0.000000 ) ;    ( 54.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt )  + ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 54.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt )  + ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 54.000000 , 22.500000 ) node @xmath207 ;    ( 54.000000 , 0.000000 ) circle(1.000000pt ) ; ( 78.000000,30.000000 )  ( 78.000000,0.000000 ) ;    ( 78.000000 , 15.000000 ) + ( -45.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 45.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 135.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 225.000000:8.485281pt and 29.698485pt )  cycle ; ( 78.000000 , 15.000000 ) + ( -45.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 45.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 135.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 225.000000:8.485281pt and 29.698485pt )  cycle ; ( 78.000000 , 15.000000 ) node @xmath213 ;    in the context of ternary encoding of integers and allowing for ternary control the logic turns out to be more involved . depending on whether @xmath214 or not , which is known at compilation time , we need to compile two different circuits . when @xmath214 we need to speculatively precompute @xmath215 where @xmath216 is the quantum value of the control trit",
    "this is different from adding ternary control to the additive shift @xmath212 . a straightforward way to do",
    "this is by taking the controlled shift @xmath217 followed by strictly controlled shift @xmath218 . aside from this additional shift box ,",
    "the circuit in figure [ fig : modular : shift ] still works as intended , which is easy to establish : the speculative @xmath215 is corrected back to @xmath219 if and only if the eventual result is @xmath220 which is the condition for the ancilla cleanup .    when @xmath221 we can precompile ternary control on the entire @xmath212 box , which then precomputes the @xmath222 for us . however , here we still get some overhead compared to the binary encoding context .",
    "indeed , we need to correct the speculative state @xmath223 to @xmath224 when @xmath225 and it is easily seen that the result is @xmath226 if and only if @xmath223 was negative and the correction happened .",
    "thus the ancilla cleanup threshold is @xmath227 on this branch .",
    "since @xmath216 is the quantum control trit , the comparison to @xmath228 is somewhat more expensive to engineer than comparison to @xmath229 .    to summarize ,",
    "a purely ternary modular shift circuit allowing for ternary control would be similar to one shown in figure [ fig : modular : shift : ternary ] , where the extra dashed @xmath218 box is inserted at compilation time when @xmath214 .",
    "the latter case constitutes the critical path where we have to use an equivalent of @xmath190 additive shifts instead of @xmath128 .",
    "( 0.000000 , -7.500000 ) rectangle ( 90.000000 , 37.500000 ) ; ( 0.000000,30.000000 ) ",
    "( 100.000000,30.000000 ) ; ( 0.000000,30.000000 ) node[left ] @xmath109 ; ( 0.000000,15.000000 )  ( 81.000000,15.000000 ) ; ( 95.000000,15.000000 ) ",
    "( 100.000000,15.000000 ) ; ( 0.000000,15.000000 ) node[left ] @xmath108 ; ( 0.000000,0.000000 )  ( 100.000000,0.000000 ) ; ( 0.000000,0.000000 ) node[left ] @xmath108 ; ( 12.000000,30.000000 )  ( 12.000000,15.000000 ) ;    ( 12.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt )  + ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 12.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 12.000000 , 22.500000 ) node @xmath230 ;    ( 32.000000,30.000000 )  ( 32.000000,15.000000 ) ;    ( 32.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 32.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 32.000000 , 22.500000 ) node @xmath218 ;    ( 43.000000,15.000000 )  ( 43.000000,0.000000 ) ; ( 43.000000 , 15.000000 ) circle(1.000000pt ) ;    ( 43.000000 , 0.000000 ) circle(3.000000pt ) ; ( 43.000000 , 0.000000 ) circle(3.000000pt ) ; ( 40.000000 , 0.000000 )  ( 46.000000 , 0.000000 ) ; ( 43.000000 , -3.000000 )  ( 43.000000 , 3.000000 ) ;    ( 64.000000,30.000000 )  ( 64.000000,0.000000 ) ;    ( 64.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt )  + ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 64.000000 , 22.500000 ) + ( -45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 45.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 135.000000:8.485281pt and 19.091883pt ) ",
    "+ ( 225.000000:8.485281pt and 19.091883pt )  cycle ; ( 64.000000 , 22.500000 ) node @xmath207 ;    ( 64.000000 , 0.000000 ) circle(1.000000pt ) ; ( 88.000000,30.000000 )  ( 88.000000,0.000000 ) ;    ( 88.000000 , 15.000000 ) + ( -45.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 45.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 135.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 225.000000:8.485281pt and 29.698485pt )  cycle ; ( 88.000000 , 15.000000 ) + ( -45.000000:8.485281pt and 29.698485pt )  + ( 45.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 135.000000:8.485281pt and 29.698485pt ) ",
    "+ ( 225.000000:8.485281pt and 29.698485pt )  cycle ; ( 88.000000 , 15.000000 ) node @xmath231 ;      for modular exponentiation @xmath232 we follow the known implementation proposed in the first half of ref . @xcite .",
    "our designs are also motivated in part by ref .",
    "@xcite .",
    "we denote by @xmath88 the dimension of the single qudit .",
    "@xmath88 is assumed to be either @xmath152 or @xmath128 where it matters .",
    "suppose that @xmath233 are classically known integers @xmath199 , and @xmath27 is an integer approximately equal to @xmath234 .",
    "suppose @xmath94 is quantumly encoded , @xmath235 is base-@xmath88 expansion of @xmath236 , where @xmath237 are the corresponding qudit states .",
    "first , we observe that @xmath238 note that @xmath239 are @xmath140 classical values that are known and easily pre - computable at compilation time .",
    "thus @xmath240 is computed as a sequence of modular multiplicative shifts , each quantumly controlled by the @xmath241 .",
    "suppose we have computed the partial product @xmath242 and let @xmath243 be the base-@xmath88 expansion of @xmath244 .",
    "then @xmath245    observe , again , that    @xmath246\\}\\ ] ]    is the set of fewer than @xmath88 pre - computable classical values known a priori .",
    "therefore , promoting @xmath244 to @xmath247 is performed as a sequence of modular additive shifts , controlled by @xmath248 and @xmath249 .    herein lies a subtle difference between the case of @xmath250 and the case of @xmath251 ( e.g. @xmath252 ) . in the case of @xmath250",
    "we do the modular shift by @xmath253 if and only if @xmath254 .",
    "thus the corresponding gate is simply the doubly - controlled modular additive shift .    in case of @xmath251",
    "the @xmath255 basis values of @xmath249 lead to modular additive shift by one of the @xmath255 potentially different values listed in the equation ( [ eq : d : ary : shifts ] ) .",
    "thus we need a @xmath256-way quantum switch capable of selection between the listed values .",
    "let @xmath257 $ ] be the modular additive shift by the @xmath258-th value in ( [ eq : d : ary : shifts ] ) .",
    "then the desired switch can be realized coherently as the product @xmath259 where @xmath260 is the @xmath177 activated only by the basis state @xmath261 .",
    "this implies the following difference in the circuit makeup between the case of @xmath250 and the case of @xmath252 .",
    "for @xmath250 modular exponentiation takes roughly @xmath262 doubly - controlled modular additive shifts ; for @xmath252 it takes roughly @xmath263 doubly - controlled modular additive shifts ( where @xmath179 is the trit size of the arguments ) , each with one ternary and one strict control on one of the two ternary values .    when comparing the option of performing the circuit in emulated binary encoding against the option of running it in true ternary encoding we find a practical dead heat between the two options in terms of circuit depth .",
    "indeed in counting the number of doubly - controlled additive shift boxes we find that @xmath264 .",
    "but we should be aware of possible factor @xmath265 overhead in the number of additive shifts per a ternary modular shift as suggested , for example , by figure [ fig : modular : shift : ternary ] .",
    "( of course @xmath266 . )    to summarize , solutions based on emulation of binary ripple - carry adders are still win - win over the comparable true ternary ripple - carry designs in the context of the modular exponentiation ; when carry lookahead adders are used , the two options have nearly identical non - clifford depth numbers , but there is notable width reduction advantage ( factor of @xmath267 ) of using true ternary solution over the emulated binary one .      in the solutions for period finding discussed so far ,",
    "the quantum cost is dominated by the cost of modular exponentiation represented by an appropriate reversible classical circuit . in this context",
    "just a fraction of the cost falls onto the quantum fourier transform .",
    "nevertheless , for the sake of completeness we discuss some designs for emulating binary quantum fourier transform on ternary computers and implementing ternary fourier transform directly in ternary logic .",
    "odd radix fourier transforms appeared in earlier quantum algorithm literature .",
    "in particular @xcite outlines the benefits of `` trinary '' ( ternary ) fourier for low - width shor factorization circuits and also briefly sketches how ternary fourier transform can be emulated in multi - qubit framework . on a more general level , ref .",
    "@xcite describes quantum fourier transform over @xmath268 . in subsection",
    "[ subsubsec : true : ternary : fourier ] we develop specific circuitry for a version of such a transform over @xmath268 where @xmath269 is some integer power of @xmath128 .",
    "a familiar binary circuit for approximate fourier transform in dimension @xmath270 with precision @xmath34 consists of roughly @xmath271 controlled phases and @xmath27 binary hadamard gates ( see @xcite , section 5 ) . in known fault - tolerant binary frameworks , the phases @xmath272 occurring in the fourier transform have to be treated just like generic phases .",
    "of all the possible ways to emulate a controlled phase gate we will focus on just one with minimal parametric cost .",
    "this is the one with one clean ancilla , two toffoli gates and one uncontrolled phase gate .",
    "( it is not clear when exactly this design has been invented , but c.f .",
    "@xcite , section 2 for a more recent discussion . )    given the control qubit @xmath31 and target qubit @xmath32 the controlled phase gate @xmath273 is emulated by applying @xmath274 to the state @xmath275 .",
    "ternary emulation of toffoli gate is discussed in detail in section [ sec : reflections ] .",
    "somewhat surprisingly , ternary emulation of uncontrolled phase gates in practice incurs larger overhead than emulation of classical gates . also the binary hadamard gate is a clifford gate in the binary framework , but can not be emulated by a ternary clifford circuit .",
    "this introduces additional overhead factor of @xmath276 .",
    "we develop our own circuitry for qft over @xmath277 based on the textbook cooley tukey procedure .",
    "quantum fourier transform in the @xmath27 qutrit state space is given by the unitary matrix    @xmath278\\ ] ]    where @xmath279 is the @xmath280-th root of unity .",
    "in particular the @xmath281 coincides with the ternary ( clifford ) hadamard gate .",
    "the following recursion for @xmath282 is verified by straightforward direct computation :    @xmath283    where @xmath284 is a certain @xmath27-qutrit permutation ,    @xmath285    and where @xmath286 is the ternary control .    by further direct computation",
    "we observe that @xmath287    the permutation gate @xmath284 is not computationally important , since it amounts to @xmath288 qutrit swaps which are all ternary clifford .",
    "aside of this tweak we have decomposed @xmath289 recursively into @xmath290 gates of the form @xmath291 which are ternary analogs of familiar controlled phase gates .",
    "similar to the binary case , it is known in general ( cf .",
    "@xcite ) that once we are allowed to approximate the qft to some fidelity @xmath50 , we can compute the approximate qft with @xmath292 gates .",
    "this is because controlled phase gates with phases in some @xmath293 can be dropped from the circuit without compromising the fidelity .      in ternary framework",
    "a @xmath294 can be emulated exactly by the balanced two - level gate @xmath295 which is a composition of the clifford reflection @xmath296 and the non - clifford reflection @xmath297 .",
    "also , the binary hadamard gate @xmath298 is a two - level householder reflection . as per @xcite,@xcite , both @xmath299 and @xmath300 can be effectively approximated to precision @xmath34 by clifford+@xmath13 circuits with @xmath5-counts @xmath301 and the constant @xmath302 in between @xmath168 and @xmath303 . for reference , in the clifford+t framework the @xmath4-count of @xmath34-approximation of a generic phase gate is in @xmath304 .",
    "thus , emulation of the binary circuit for a binary fourier transform incurs no surprising costs .    in pure ternary encoding",
    "we need to implement the ternary analog of controlled phase gate : gates of the form @xmath305 .",
    "this is not difficult after some algebraic manipulation :    given a phase factor @xmath306 and an arbitrarily small @xmath307 the gate @xmath308 can be effectively approximated to precision @xmath34 by a metaplectic circuit with at most @xmath309 @xmath13 gates .    alternatively such a @xmath34-approximation can be effectively achieved by a metaplectic circuit with at most @xmath310 @xmath13 gates and a fixed - cost widget with at most @xmath311 @xmath2 gates .",
    "we note that    @xmath312    each of the three factors in this decomposition is a product of two two - level reflections .",
    "it is also notable that one particular reflection , the @xmath313 coming from @xmath314 is in fact ternary clifford .",
    "therefore we are having a total of five non - clifford reflections in this decomposition , two of which are non - parametric classical reflections .    as per @xcite any two - level reflection can be effectively @xmath315-approximated by metaplectic circuit with at most @xmath316 @xmath13 gates , and this can be applied to all five non - clifford reflections . alternatively ,",
    "each of the two classical ones can be represented exactly as per @xcite using five @xmath69 or , respectively , @xmath165 @xmath2 gates .",
    "thus implementation of either version of qft circuit is never a cost surprise in the metaplectic clifford+@xmath13 basis .",
    "although numerologically the @xmath5-depth of the required approximation circuits is a good factor higher than the @xmath4-depth of corresponding circuits required in the clifford+t framework , we need to keep in mind that the @xmath13 is significantly easier to execute on a natively metaplectic computer since , unlike the @xmath4 gate it does not require magic state distillation .      at the time of this writing emulation of qft circuits on a generic ternary computer",
    "is not entirely straightforward .",
    "first of all , we currently do not know an efficient direct circuit synthesis method for householder reflections in the clifford+@xmath2 basis . if follows from @xcite that any ternary unitary gate can be also approximated to precision @xmath34 by an ancilla - free clifford+@xmath2 circuit of depth in @xmath317",
    "; but we do not have a good effective procedure for finding ancilla - free circuits of this sort , neither do we have a clear idea of the practical constant hidden in the @xmath317 .    as a bridge solution , we show in appendix [ app : sec : r:2 ] that the requisite magic state @xmath63 ( see eq .",
    "( [ eq : def : psi ] ) ) for the gate @xmath13 can be emulated exactly and coherently by a set of effective repeat - until - success circuits with four ancillary qutrits and expected average @xmath2-count of @xmath318 .",
    "thus we can approximate a required uncontrolled phase gate with an efficient clifford+@xmath13 circuit and then transcribe the latter into a corresponding ancilla - assisted probabilistic circuit over the clifford+@xmath2 basis . in order to have a good synchronization with the clifford+@xmath13 circuit execution it would suffice to have the magic state preparation coprocessor of width somewhat greater than @xmath319 .",
    "since the controlled phase gates and hence the approximating clifford+@xmath13 circuits are performed sequentially in the context of the qft , this coprocessor is shared across the qft circuit and thus the width overhead is bound by a constant .    on the balance , we conclude that ternary execution of the qft is likely to be more expensive in terms of required non - clifford units , than , for example , comparable clifford+t implementation .",
    "however the non - clifford depth overhead factor over clifford+t is upper bounded by an @xmath320 where @xmath321 is a small constant .",
    "such overhead becomes practically valid , however , when hosting period - finding solutions that make heavy use of fourier transform , such as for example the beauregard circuit @xcite ( see appendix [ app : sec : alternative : circuits ] for a further brief discussion ) .      with the current state of the art ternary arithmetic circuits , modular exponentiation ( and hence shor s period finding )",
    "is practically less expensive with emulated binary encoding in low width ( e.g. small quantum computer ) ; however , when @xmath322 depth is desired , pure ternary arithmetic allows for width reduction by a factor of @xmath267 compared to emulated binary circuits , while requiring essentially the same non - clifford depth .",
    "state of the art implementation of the three - qubit binary toffoli gate assumes the availability of the clifford+t basis @xcite .",
    "it has been known for quite some time cf .",
    "@xcite that a toffoli gate can be implemented ancilla - free using a network of @xmath1s and @xmath138 @xmath323 gates .",
    "it has been shown in @xcite that this is the minimal @xmath4-count for ancilla - free implementation of the toffoli gate .    in section [ subsec :",
    "classical : with : p9 ] we develop emulations of classical two - level reflections ( which generalize toffoli and toffoli - like gates ) on generic ternary computer endowed with the clifford+@xmath2 basis as described in section [ subsec : p9:gate ] .",
    "we also introduce purely ternary tools necessary for implementing controlled versions of key gates for ternary arithmetic proposed in @xcite . ancillas .",
    "this implies of course an emulation of the three - qubit toffoli gate with @xmath324 @xmath2 gates and one clean ancilla . in section [ subsec : reflection : metaplectic ] we reevaluate the emulation cost assuming a _ metaplectic topological quantum computer _ ( mtqc ) with clifford+@xmath13 basis as described in section [ subsec : metaplectic : basis ] . in that setup",
    "we get two different options both for implementing non - clifford classical two - way transpositions ( including the toffoli gate ) and for circuitizing key gate for proper ternary arithmetic .",
    "one is direct approximation using clifford+@xmath13 circuits .",
    "the other is based on the @xmath2 gate but it uses _ magic state preparation _ in the clifford+@xmath13 basis instead of magic state distillation .",
    "this is explained in detail in subsection [ subsec : reflection : metaplectic ] .",
    "the first option might be ideal for smaller quantum computers .",
    "it allows circuits of fixed widths but creates implementation circuits for toffoli gates with the @xmath5-count of approximately @xmath325 when @xmath50 is the desired fidelity of the toffoli gate .",
    "the second option supports separation of the cost of the @xmath2 gate into the `` online '' and `` offline '' components ( similar to the clifford+t framework ) with the `` online '' component depth in @xmath326 and the `` offline '' cost offloaded to a state preparation part of the computer , which has the width of roughly @xmath327 qutrits but does not need to remain always coherent .      the synthesis described here is a generic ternary counterpart of the exact , constant @xmath4-count representation of the three - qubit toffoli gate in the clifford+t framework .",
    "one distinction of the ternary framework from the binary one is that not all two - qutrit classical gates are clifford gates .",
    "in particular the @xmath328 reflection which is a strict emulation of the binary @xmath1 is not a clifford gate ; neither is the @xmath329 which which is a strict emulation of the binary @xmath153 .",
    "however , while binary @xmath153 can be emulated simply as a restriction of the ( clifford ) ternary swap on binary subspace , the @xmath1 can not be so emulated .",
    "a particularly important two - qutrit building block is the following non - clifford gate @xmath330    a peculiar phenomenon in multi - qudit computation ( in dimension greater than two ) is that a two - qudit classical non - clifford gate ( such as @xmath331 ) along with the @xmath159 gate is universal for the ancilla - assisted reversible classical computation , cf .",
    "@xcite , whereas a three - qubit gate , such as toffoli is needed for the purpose in multi - qubit case .",
    "the following is a slight variation of a circuit from @xcite : @xmath332 where @xmath333 is the ternary ( clifford ) swap gate .",
    "this suggests using @xmath168 copies of @xmath331 gate for implementing a two - level two - qutrit reflection . however , this is inefficient when we only need to process binary data .",
    "[ prop : cnot : ancilla - free ] the following classical circuit is an exact emulation of the binary @xmath1 gate on the binary data : @xmath334    by direct computation .",
    "the two non - clifford gates in this circuit are the @xmath331 and @xmath335 .",
    "( to avoid confusion , note that the gate as per eq .",
    "( [ eq : two : c1inc ] ) is no longer an axial reflection on ternary data . )",
    "the @xmath331 is clifford - equivalent to the @xmath336 gate ( @xmath337 ) , and the latter gate is represented exactly by the network shown in figure [ fig : cz : from : p9 ] ( up to a couple of local @xmath338 gates and a local @xmath22 gate ) .",
    "( 0.000000 , -7.500000 ) rectangle ( 195.000000 , 22.500000 ) ; ( 0.000000,15.000000 )  ( 195.000000,15.000000 ) ; ( 0.000000,0.000000 )  ( 195.000000,0.000000 ) ; ( 12.000000,15.000000 )  ( 12.000000,0.000000 ) ;    ( 12.000000 , 0.000000 ) circle(6.000000pt ) ; ( 12.000000 , 0.000000 ) circle(6.000000pt ) ; ( 12.000000 , 0.000000 ) node z ;    ( 12.000000 , 15.000000 ) circle(1.500000pt ) ; ( 30.000000 , -6.000000 ) rectangle ( 45.000000 , 21.000000 ) ; ( 37.500000 , 7.500000 ) node @xmath339 ;    ( 63.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 63.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt )  + ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 63.000000 , -0.000000 ) node @xmath2 ;    ( 87.000000,15.000000 )  ( 87.000000,0.000000 ) ;    ( 87.000000 , 0.000000 ) circle(6.000000pt ) ; ( 87.000000 , 0.000000 ) circle(6.000000pt ) ; ( 87.000000 , 0.000000 ) node @xmath159 ;    ( 87.000000 , 15.000000 ) circle(1.500000pt ) ;    ( 111.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt )  + ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt )  + ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 111.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt )  + ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 111.000000 , -0.000000 ) node @xmath2 ;    ( 135.000000,15.000000 ) ",
    "( 135.000000,0.000000 ) ;    ( 135.000000 , 0.000000 ) circle(6.000000pt ) ; ( 135.000000 , 0.000000 ) circle(6.000000pt ) ; ( 135.000000 , 0.000000 ) node @xmath159 ;    ( 135.000000 , 15.000000 ) circle(1.500000pt ) ;    ( 159.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt )  + ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 159.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 159.000000 , -0.000000 ) node @xmath2 ;    ( 183.000000,15.000000 )  ( 183.000000,0.000000 ) ;    ( 183.000000 , 0.000000 ) circle(6.000000pt ) ; ( 183.000000 , 0.000000 ) circle(6.000000pt ) ; ( 183.000000 , 0.000000 ) node @xmath159 ;    ( 183.000000 , 15.000000 ) circle(1.500000pt ) ;    plugging in corresponding representations of @xmath331 and @xmath335 into the circuit ( [ eq : two : c1inc ] ) we obtain an exact emulation of @xmath1 that uses @xmath324 instances of the @xmath340 gate .    [",
    "remark : c1z : depth : one ] by using an available clean ancilla , we can exactly represent the @xmath341 in @xmath2-depth one .",
    "the corresponding circuit is equivalent to one shown in figure [ fig : c1z : depth : one ] .",
    "thus the @xmath1 gate can be emulated on binary data using a clean ancilla in @xmath2-depth two .",
    "( 0.000000 , -7.500000 ) rectangle ( 168.000000 , 37.500000 ) ; ( 0.000000,30.000000 )  ( 168.000000,30.000000 ) ; ( 0.000000,30.000000 ) node[left ] @xmath342 ; ( 0.000000,15.000000 )  ( 168.000000,15.000000 ) ; ( 0.000000,15.000000 ) node[left ] @xmath342 ; ( 0.000000,0.000000 )  ( 168.000000,0.000000 ) ; ( 0.000000,0.000000 ) node[left ] @xmath108 ; ( 12.000000,30.000000 )  ( 12.000000,0.000000 ) ;    ( 12.000000 , 0.000000 ) circle(6.000000pt ) ; ( 12.000000 , 0.000000 ) circle(6.000000pt ) ; ( 12.000000 , 0.000000 ) node @xmath43 ;    ( 12.000000 , 30.000000 ) circle(1.500000pt ) ; ( 36.000000,30.000000 )  ( 36.000000,15.000000 ) ;    ( 36.000000 , 30.000000 ) circle(6.000000pt ) ; ( 36.000000 , 30.000000 ) circle(6.000000pt ) ; ( 36.000000 , 30.000000 ) node @xmath159 ;    ( 36.000000 , 15.000000 ) circle(1.500000pt ) ; ( 60.000000,15.000000 )  ( 60.000000,0.000000 ) ;    ( 60.000000 , 0.000000 ) circle(6.000000pt ) ; ( 60.000000 , 0.000000 ) circle(6.000000pt ) ; ( 60.000000 , 0.000000 ) node @xmath159 ;    ( 60.000000 , 15.000000 ) circle(1.500000pt ) ;    ( 84.000000 , 30.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt )  + ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 84.000000 , 30.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 84.000000 , 30.000000 ) node @xmath2 ;    ( 84.000000 , 15.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 84.000000 , 15.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 84.000000 , 15.000000 ) node @xmath2 ;    ( 84.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 84.000000 , -0.000000 ) + ( -45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 45.000000:8.485281pt and 8.485281pt ) ",
    "+ ( 135.000000:8.485281pt and 8.485281pt )  + ( 225.000000:8.485281pt and 8.485281pt )  cycle ; ( 84.000000 , -0.000000 ) node @xmath2 ;    ( 108.000000,15.000000 )  ( 108.000000,0.000000 ) ;    ( 108.000000 , 0.000000 ) circle(6.000000pt ) ; ( 108.000000 , 0.000000 ) circle(6.000000pt ) ; ( 108.000000 , 0.000000 ) node @xmath43 ;    ( 108.000000 , 15.000000 ) circle(1.500000pt ) ; ( 132.000000,30.000000 )  ( 132.000000,15.000000 ) ;    ( 132.000000 , 30.000000 ) circle(6.000000pt ) ; ( 132.000000 , 30.000000 ) circle(6.000000pt ) ; ( 132.000000 , 30.000000 ) node @xmath43 ;    ( 132.000000 , 15.000000 ) circle(1.500000pt ) ; ( 156.000000,30.000000 )  ( 156.000000,0.000000 ) ;    ( 156.000000 , 0.000000 ) circle(6.000000pt ) ; ( 156.000000 , 0.000000 ) circle(6.000000pt ) ; ( 156.000000 , 0.000000 ) node @xmath159 ;    ( 156.000000 , 30.000000 ) circle(1.500000pt ) ; ( 168.000000,0.000000 ) node[right ] @xmath108 ;    thus when depth is the optimization goal , a clean ancilla can be traded for triple compression in non - clifford depth of ternary emulation of the @xmath1 .",
    "( this rewrite is similar in nature to the one employed in @xcite for the binary margolus - toffoli gate . )",
    "[ prop : toffoli : the:15 ] a three - qubit toffoli gate can be emulated , ancilla - free , by the following three - qutrit circuit :    @xmath343    this circuit requires @xmath165 @xmath2 gates to implement .",
    "the purpose of the emulation is perform the @xmath344 reflection in the binary data subspace .",
    "having applied the rightmost @xmath345 we find that @xmath346 , @xmath347 and we note that the latter two are the only two transformed binary basis states to have the second trit equal to 2 .",
    "therefore the @xmath348 operator affects only these two transformed states . by uncomputing the @xmath345",
    "we conclude the emulation .",
    "importantly and typically we can reduce the emulation cost by using a clean ancilla . to this end",
    "we first prove the following    [ lem : dual : binary : control ] let @xmath29 be @xmath27-qubit unitary and let the binary - controlled @xmath30-qubit unitary @xmath349 be emulated in the binary subspace of an @xmath179-qutrit register @xmath350 . then one level of binary control can be added to emulate @xmath351 in an @xmath352-qutrit register using @xmath324 additional @xmath2 gates ; one of the new qutrits is a clean ancilla in state @xmath108 and the other new qutrit emulates the binary control .    with one more ancilla the additional @xmath2 gates can be stacked to @xmath2-depth @xmath152 .",
    "we prove the lemma by explicitly extending the emulation circuit .",
    "let @xmath353 be a label of the qutrit emulating the control wire of @xmath349 .",
    "let @xmath354 be a label of the new qutrit to emulate the new control wire .",
    "let @xmath71 be the label of the new clean ancilla .",
    "apply the sequence of gates @xmath355 ( right to left ) then use the ancilla @xmath71 as the control in the known emulation of @xmath349 , then unentangle : @xmath356 .",
    "the circuit applies correct emulation to the binary subspace of the @xmath352-qutrit register .",
    "the correctness is straightforward : within the binary subspace @xmath357 generates @xmath358 on the @xmath354 wire .",
    "the @xmath359 promotes the ancilla to @xmath360 if and only if @xmath361 .",
    "therefore @xmath29 is triggered only by the latter basis element , which is the definition of the dual binary control .",
    "the cost estimate follows from the fact that @xmath359 and its inverse take @xmath128 @xmath2 gates each .",
    "[ corol : toffoli : the:12 ] three - qubit toffoli gate can be emulated in four qutrits ( allowing one clean ancilla ) with @xmath132 @xmath2 gates at @xmath2-depth of @xmath190 .",
    "indeed @xmath362 and @xmath363 takes @xmath324 @xmath2 gates with no ancillas to emulate as per proposition [ prop : cnot : ancilla - free ] .",
    "[ corol : ctrl : toffoli:18 ] four - qubit binary - controlled toffoli gate @xmath364 can be emulated    \\1 ) in six qutrits ( allowing two clean ancillas ) with @xmath133 @xmath2 gates at @xmath2-depth of @xmath324 .",
    "\\2 ) in five qutrits ( allowing one clean ancilla ) with @xmath365 @xmath2 gates .    for 1 ) , we emulate using lemma [ lem : dual : binary : control ] and corollary [ corol : toffoli : the:12 ] .    for 2 ) , we emulate using lemma [ lem : dual : binary : control ] and proposition [ prop : toffoli : the:15 ]    we will further use the three - qutrit `` horner '' gate @xmath171 : @xmath366 as a tool for adding levels of control to emulated binary and true ternary gates .",
    "recall from @xcite , figure 18 and discussion , that the best - known non - clifford cost of @xmath171 is @xmath367 @xmath2 gates at @xmath2-depth @xmath368 .",
    "we now proceed to implement the completely ternary four - qutrit gate @xmath369 using the same constuction as above    [ prop : lambda : lambda : sum ] label primary qutrits with @xmath370 and label a clean ancillary qutrit in state @xmath108 with @xmath168 . then the following circuit implements the @xmath369 gate on the primary qutrits : @xmath371 this circuit requires @xmath132 @xmath2 gates to implement .",
    "however , as follows from discussion in sections [ subsec : carry : lookahead ] and [ subsec : ripple : carry ] , controlled ternary modular exponentiation also relies on another form of the doubly - controlled @xmath24 gate : the strictly controlled horner gate @xmath372 where the horner gate @xmath171 is activated only by the basis state @xmath178 of the top qutrit .",
    "a certain implementation of the @xmath373 has been developed in @xcite costing @xmath165 @xmath2 gates .",
    "the following proposition explains how to insert another level of ternary control using a cascade of horner gates again    [ prop : c : lambda : sum ] label primary qutrits with @xmath370 and label a clean ancillary qutrit in state @xmath108 with @xmath168 .",
    "then the following circuit implements the @xmath374 gate on the primary qutrits : @xmath375 this circuit takes @xmath181 @xmath2 gates to implement .",
    "with one additional ancilla the circuit can be restacked to have @xmath2-depth of @xmath376 .",
    "let us give a direct proof for transparency    by definition , given a four - qutrit state @xmath377 , we must have @xmath378 .",
    "after applying the rightmost horner gate to the clean ancilla we have the ancilla in the @xmath379 state .",
    "the correctness of ( [ eq : c : lambda : sum ] ) now follows from the definition of @xmath380 .",
    "the best known circuitry for the components yield the cost of @xmath381 @xmath2 gates .",
    "it has been shown in @xcite that , given a small enough @xmath382 any @xmath27-qutrit two - level householder reflection can be approximated effectively and efficiently to precision @xmath34 by a clifford+@xmath13 circuit containing at most @xmath383 instances of the @xmath13 gate . in particular , when @xmath384 the asymptotic term @xmath385 resolves to exactly @xmath65 and when @xmath386 it resolves to exactly @xmath190 . in both cases",
    "it is safe to merge this term with the @xmath51 term .",
    "the single - qutrit @xmath2 gate is the composition of the ternary clifford gate @xmath313 and the householder reflection @xmath387 .",
    "the two - qutrit gate @xmath388 is by itself a two - level householder reflection @xmath389 . similarly , @xmath390",
    "therefore , our results apply and we have efficient strict emulations of @xmath2 , @xmath1 and toffoli gates at depths that are logarithmic in @xmath391 and in practice are roughly @xmath325 in depth .",
    "we note that the direct metaplectic approximation of classical reflections is significantly more efficient than the circuits expressed in @xmath91 gates ( as each of the latter have to be approximated ) .",
    "let us briefly review such direct approximation in the context of ternary arithmetic in ternary encoding . as per @xcite ,",
    "the generalized carry gate of the ternary ripple - carry additive shift contains two classical non - clifford reflections ( @xcite , fig .",
    "5 ) that can be represented at fidelity @xmath50 by a metaplectic circuit of @xmath5-count at most @xmath392 .",
    "the same source implies that the carry status merge widget @xmath194 which is key in the carry lookahead additive shift is clifford - equivalent to a @xmath373 which is easily decomposed in four classical two - level reflections and thus can be represented at fidelity @xmath50 by a metaplectic circuit of @xmath5-count at most @xmath393 .    a sufficient per - gate precision @xmath34 may be found in @xmath394 where @xmath88 is the depth of the modular exponentiation circuit expressed in non - clifford reflections .",
    "therefore , injecting metaplectic circuits in place of reflections creates an overhead factor in @xmath395 . while being asymptotically moderate , such overhead could be a deterrent when factoring very large numbers",
    "this motivates us to explore constant - depth approximations of classical reflections as in the next section .",
    "we demonstrate that integer arithmetic on a ternary quantum computer can be efficient both asymptotically and in practice .",
    "we build on section [ subsec : classical : with : p9 ] that describes exact emulation of @xmath1 with @xmath324 instances of the @xmath2 gate . a core result in @xcite",
    "implies that the @xmath2 gate can be executed exactly by a deterministic state injection circuit using one ancilla , one measurement and classical feedback , _ provided _ availability of the `` magic '' ancillary state @xmath396 the state injection circuit is given in figure [ fig : mu : state : injection ] .",
    "assuming , hypothetically , that the magic state @xmath49 can be prepared in a separate ancillary component of the computer ( then teleported ) , we get , a separation of the quantum complexity into `` online '' and `` offline '' components - similar to one employed in the binary clifford+t network .",
    "we call these components the _ execution _ and _ preparation _ components .",
    "we use the term execution depth somewhat synonymously to `` logical circuit depth '' . the execution part of the @xmath2 state injection , hence @xmath1 , toffoli emulations as well as implementation of @xmath91 are constant depth .",
    "the magic preparation can run separately in parallel when the preparation code is granted enough width .    in the context of the binary clifford+t network , assuming the required fidelity of the @xmath4 gate is @xmath397 ,",
    "there is a choice of magic state distillation solutions . for comparison",
    "we have selected a particular one protocol described in @xcite . at the top level",
    ", it can be described as a quantum code of depth in @xmath51 and width of approximately @xmath398 .",
    "the newer protocol in @xcite achieves asymptotically smaller width in @xmath399 where @xmath236 is an error correction hyperparameter , and @xmath400 when @xmath401 .",
    "however the @xcite is a tradeoff rather than a win - win over @xcite in terms of practical width value .    in comparison , the magic state distillation for a generic ternary quantum computer , described in @xcite maps onto quantum processor of depth in @xmath51 and width of @xmath402 .",
    "therefore the preparation of a magic state by distillation requires asymptotically larger width than the one for clifford+t basis .",
    "we observe that the prepartion width is asymptotically better at @xmath317 and significantly better in practice when the target ternary computer is mtqc .",
    "since the mtqc implements the universal clifford+@xmath13 basis that does not require magic state distillation , the instances of the magic state @xmath49 can be prepared on a much smaller scale .",
    "( see @xcite , section 4 ) an instance of magic state @xmath49 can be prepared at fidelity @xmath50 by a clifford+@xmath13 circuit of non - clifford depth in @xmath403 .    to synchronize with the @xmath2 gates in the logical circuit we need to pipeline @xmath404 instances of the magic state preparation circuit ,",
    "so we always have a magic state at fidelity @xmath50 ready to be injected into the @xmath2 protocol .",
    "one important consequence of the synchronization requirement is that higher parallelization of non - clifford operations reflects proportionally in an increase in width of the preparation coprocessor . in particular , when we employ low - width circuits for shor s period finding , such as based on ripple - carry additive shifts , then it suffices to produce a constant number of clean magic states per time step .",
    "for example , if the ternary @xmath91 is taken as the base classical gate and its realization shown in figure [ fig : c1z : depth : one ] then we need three clean magic states per a time step .",
    "suppose now we employ an @xmath27-bit quantum carry lookahead adder in the same context . in",
    "order to preserve the logarithmic time cost advantage we should be able to perform up to @xmath27 base reflection gates ( such as toffolis ) in parallel or at least @xmath405 such gates in parallel on average .",
    "thus the preparation component must deliver at least @xmath405 clean magic states per time step and widens the preparation component by that factor .",
    "in a more conventional circuit layout for shor s period finding , the @xmath406 modular exponentiations @xmath407 $ ] , are done in superposition over @xmath236 and the width of such superposition trivially depends on the integer representation radix .",
    "thus the purely ternary encoding has the width advantage with a factor of @xmath267 .    however , on a small quantum computer platform a more practical approach is to use a single control ( cf . @xcite or @xcite , section 2.4 ) , which allows to iterate through the modular exponentiations using only one additional qubit ( resp .",
    "qutrit ) .    with this method in mind",
    "our principal focus is on the _ overall cost of modular exponentiation_.    we assume that for bitsize @xmath27 , the @xmath408 is a sufficient end - to - end precision of the period - finding circuit .",
    "then the atomic precision @xmath34 per individual gate , or rather per individual clean magic state within the circuit depends on circuit size .",
    "the circuits under comparison differ asymptotically in depth but not in size , which is in @xmath409 ( disregarding the slower @xmath196 terms ) .",
    "we observe that @xmath410 is roughly @xmath411 for the required @xmath34 .",
    "it follows that the distillation width for one clean magic state scales like @xmath412 in the ternary context . in case on magic state preparation in the metaplectic basis",
    "one needs at most @xmath413 @xmath5-gate per a clean @xmath2 magic state .",
    "there has been a wide array of magic state distillation protocols for the clifford+t benchmark . for practical reasons and for simplicity",
    "we have selected the bravyi - kitaev protocol ( @xcite ) where the raw magic state consumption scales like @xmath414 ; @xmath415 .",
    "this scaling is shown in the `` preparetion width '' cells in the resource tables below .",
    "an attractive alternative would be the bravyi - haah protocol ( @xcite ) .",
    "the protocol is defined by the hyperparameter @xmath236 of the underlying @xmath416 $ ] error correction code and requires preparation width in @xmath417 where @xmath418 . in particular for @xmath419 the protocol distills @xmath303 magic states simultaneously and @xmath420 .",
    "unfortunately this protocol is more sensitive to the fidelity of the raw magic states and this is one of the reasons we decided not to cost it out at this time .",
    "one needs to be mindful that the scaling exponent @xmath421 can in principle be made smaller than @xmath152 under certain circumstances .",
    "tables [ table : ripple : carry ] and [ table : carry : lookahead ] contain comparative resource estimates for the modular exponentiation circuits based , respectively , on the ripple - carry additive shift and the carry lookahead additive shift . for simplicity , only _ asymptotically dominating _ terms are represented .",
    "an actual resource bound may differ by terms of lower order w.r.t . @xmath7 .",
    "in addition to resource counts for ternary processing we have provided the same for clifford+t solutions as a backdrop . in the clifford+t basis , resource estimate in table [ table : ripple : carry ] for low - width modular exponentiation on a binary quantum computer is based on @xcite in which an implementation was given that uses @xmath102 logical qubits .",
    "the toffoli depth of the circuit in @xcite can be analyzed to be bounded by @xmath422 .",
    "note that the toffoli depth is equal to @xmath4-depth , provided that @xmath190 additional ancillas are available , leading to an overall circuit width of @xmath423 .",
    "the two resource estimates in table [ table : carry : lookahead ] for reduced - depth modular exponentiation are based on @xcite and @xcite : in @xcite an implementation for an arbitrary coupling architecture was given that uses @xmath424 qubits and has a total depth of @xmath425 .",
    "this implementation is based on a gate set that has arbitrary rotations . to break this further into clifford@xmath426 operations , we require an increase in terms of depth of @xmath427 as each rotation has to be approximated with accuracy @xmath428 . up to leading order",
    ", this leads to the estimate of the circuit depth of @xmath429 given in the table . in @xcite a toffoli based circuit to implement an adder in depth @xmath430 was given that needs @xmath431 qubits , where @xmath432 denotes the hamming weight of the integer @xmath27 .",
    "as there are @xmath288 toffoli in parallel in this circuit , we use the implementation of a toffoli gate in @xmath4-depth @xmath128 from @xcite to implement a single addition in @xmath4-depth @xmath433 .",
    "the modular addition can be implemented then using @xmath128 integer additions . to implemented shor s algorithm",
    ", we need @xmath434 modular additions , leading to an overall @xmath4-depth estimate of @xmath435 .",
    "the rightmost column of either table lists counts proportional to either the number of raw magic states or , in the case of mtqc to the number of metaplectic magic states required per a time step of the circuit .    l@l@l@l + & & & +   + emulated binary , metaplectic , via @xmath2 & @xmath436 & @xmath437 & @xmath438 + section [ subsec : ripple : carry ] , emulated binary , via @xmath2 & @xmath436 & @xmath437 & @xmath439 + ternary , metaplectic , via @xmath2 & @xmath440 & @xmath441 & @xmath442 + section [ subsec : ripple : carry ] , ternary , via @xmath2 & @xmath440 & @xmath441 & @xmath439 + emulated binary , mtqc inline & @xmath436 & @xmath443 & @xmath128 + ternary , mtqc inline & @xmath440 & @xmath444 & @xmath128 +   + haener et al .",
    "@xcite , takahashi @xcite & @xmath445 ( qubits ) & @xmath446 & depending on practically applicable distillation protocol .",
    "@xmath447 reflects the worst case bound on the logical width of the circuit . ]",
    "@xmath448 +    l@l@l@l + & & & +   + emulated binary , metaplectic , via @xmath2 & @xmath449 & @xmath450 & @xmath451 + section [ subsec : carry : lookahead ] , emulated binary , via @xmath2 & @xmath449 & @xmath452 & @xmath453 + ternary , metaplectic , via @xmath2 & @xmath454 & @xmath455 & @xmath456 + section [ subsec : carry : lookahead ] , ternary , via @xmath2 & @xmath454 & @xmath457 & @xmath453 + emulated binary , mtqc inline & @xmath458 & @xmath459 & @xmath460 + ternary , mtqc inline & @xmath461 & @xmath462 & @xmath463 +   + binary , via clifford+t , @xcite & @xmath449 ( qubits ) & @xmath464 & depending on practically applicable distillation protocol . ]",
    "@xmath465 + binary , via clifford+t , @xcite & @xmath466 ( qubits ) & @xmath467 & @xmath465 +    the logarithmic execution depth for integer addition is achieved by using carry lookahead additive shift circuit .",
    "however this comes at significant width cost , as the circuit performs in parallel up to @xmath27 ( in the worst case ) or roughly @xmath468 ( on average ) reflection gates .",
    "this requires a corresponding number of magic states or metaplectic registers simultaneously , and therefore the preparation width numbers in the last column of table [ table : carry : lookahead ] are multiplied by the corresponding bit size , or , respectively , trit size .",
    "this represents the critical path bound on the magic state preparation width of the solution .    in both tables",
    "the preparation width bound for ternary processing is dominated by the width of the @xmath91 .",
    "the tables do not exhaust the vast array of possible depth / width tradeoffs .",
    "we have chosen to represent @xmath91 with non - clifford depth one as shown in fig . [",
    "fig : c1z : depth : one ] .",
    "this circuit has the @xmath2-width of @xmath469 and requires a clean ancillary qutrit . for the ripple - carry solution",
    "the ancillary qutrit is reused and has minimal impact .",
    "for the carry lookahead solution up to @xmath27 ( respectively , up to @xmath470 ) ancillas must be available in parallel which inflates the online width by more than 30 percent .",
    "the fifth and sixth rows show tradeoff based on direct approximation of toffoli gates and ( controlled ) @xmath91 gates , respectively , by topological metaplectic circuits to precision @xmath471 .",
    "the topological metaplectic @xmath13 gates are executed sequentially for each individual arithmetic gate .",
    "this nearly eliminates the need for the magic state preparation , as only @xmath128 topological ancillas are needed at a time in the injection circuit for the @xmath13 ( figure [ fig : r2:rus ] ) .",
    "this tradeoff introduces the online depth of a subcircuit for a toffoli gate of roughly @xmath472 .",
    "a corresponding subcircuit for a @xmath91 then has online depth of @xmath473 ( two two - level reflections ) . for @xmath474 ,",
    "it is @xmath475 ( eight two - level reflections ) .",
    "we estimate the number of required controlled integer additive shifts in a modular exponentiation circuit as @xmath476 ( @xmath477 controlled modular additions ) when binary emulation is used and as @xmath478 ( @xmath479 controlled modular additions ) when ternary encoding is used .",
    "these bounds define the execution depth columns in both tables .",
    "the most significant distinction in the tables [ table : ripple : carry ] , [ table : carry : lookahead ] is the asymptotical advantage in the magic state preparation width with the mtqc .",
    "there is also a tradeoff between emulated binary encoding and true ternary encoding on a ternary quantum processor .",
    "it is seen from table [ table : ripple : carry ] that with ripple - carry adders ( e.g. , when targeting a small quantum computer ) we get a moderate practical advantage in non - clifford circuit depth when emulating binary encoding and a small advantage in width compared to the use of true ternary encoding .",
    "this is true even accounting for the fact that the trit size @xmath179 is smaller than the bit size @xmath27 by the factor of @xmath267 .    on the other hand when carry lookahead adders are used , the difference in the overall non - clifford circuit depth between the two encoding scenarios is insignificant , unless inline metaplectic circuits with mtqc are compiled .",
    "but the use of true ternary encoding yields the width advantage by a factor of roughly @xmath267 . in the fifth and sixth lines of table [ table : carry : lookahead ] , the use of emulated binary encoding is practically better than the use of ternary encoding . intuitively , this is because the metaplectic circuits are reflection - oriented and best suited for direct approximation of the ( controlled ) toffoli gates that are two - level reflections , whereas ternary arithmetic gates such as @xmath91 or horner have to be first decomposed into several two - level reflections .",
    "the resource bounds shown in the tables provide a great deal of flexibility in selecting a resource balance appropriate for a specific ternary quantum computer . on a generic ternary quantum computer where universality is achieved by distillation of magic states for the @xmath2 gate",
    "the choice of encoding and arithmetic circuits is likely to be dictated by the size of the actual computer . when native metaplectic topological resources are available , magic states for the @xmath2 gate are prepared asymptotically more efficiently .",
    "metaplectic also offers the third choice : that of bypass the @xmath2 gate altogether and using inline metaplectic circuits instead at the cost of a factor in @xmath480 in circuit depth expansion . in this scenario",
    "using emulated binary encoding of integers is always more efficient in practice than the use of true ternary encoding .",
    "we have investigated implementations of shor s period finding function ( @xcite ) in quantum ternary logic .",
    "we performed comparative resource cost analysis targeting two prospective quantum ternary platforms .",
    "the `` generic '' platform uses magic state distillation as described in @xcite for universality .",
    "the other , one referred to as mtqc ( metaplectic topological quantum computer ) , is a non - abelian anyonic platform , where universality is achieved by a relatively inexpensive protocol based on anyonic braiding and interferomic measurement @xcite,@xcite .    on each of these platforms we considered two different logical solutions for the modular exponential circuit of shor s period finding function",
    ": one where the integers are encoded using the binary subspace of the ternary state space and ternary optimizations of known binary arithmetic circuits are employed ; the other ternary encoding of integers and arithmetic circuits stemming from @xcite are used .    on the mtqc platform",
    "we additionally consider semi - classical metaplectic expansions of arithmetic circuits ; the non - clifford depth of such a circuit is larger than the non - clifford depth of the corresponding classical arithmetic circuit by a factor of @xmath481 .",
    "notably , circuits of this type bypass the need for magic states and the @xmath2 gate entirely .",
    "we have derived both asymptotic and practical bounds on the quantum resources consumed by the shor s period finding function for practically interesting combinations of platform , integer encoding and modular exponentiation . for evaluation purposes we have derived such bounds for widths and non - clifford depths of the logical circuits as well as for sizes of the state preparation resources that either distill or prepare necessary magic states with the required fidelity .",
    "we find significant asymptotic and practical advantages of the mtqc platform compared to other platforms .",
    "in particular this platform allows factorization of an @xmath27-bit number using the smallest possible number of @xmath482 logical qutrits at the cost of inflating the depth of the logical circuit by a logarithmic factor . in scenarios",
    "where increasing the depth is undesirable , the mtqc platform still exhibits significant advantage in the size of the magic state preparation component that is linear in the bitsize of the target fidelity ( compared to cubic or near - cubic for a generic magic state distillation ) .",
    "an interesting feature of our ternary arithmetic circuits is the fact that the denser and more compact ternary encoding of integers does not necessarily lead to more resource - efficient period finding solutions compared to binary encoding . as a rule of a thumb : if low - width circuits are desired , then binary encoding of integers combined with ternary arithmetic gates appears more efficient both in terms of width and depth than a pure ternary solution .",
    "however , even a moderate ancilla - assisted depth compression , such as provided by carry lookahead additive shifts , tips the balance in favor of ternary encoding and ternary arithmetic gates .    in summary , having a variety of encoding and logic options , provides flexibility when choosing period finding solutions for ternary quantum computers of varying sizes .",
    "the authors are grateful to jeongwan haah for useful references .",
    "we would also like to thank tom draper and sandy kutin for providing @xmath483 @xcite which we used for typesetting most of the figures in this paper .",
    "we are thankful to an anonymous reviewer for insightful comments that inspired us to rewrite the paper into its current , more comprehensive format .",
    "38 ifxundefined [ 1 ] ifx#1 ifnum [ 1 ] # 1firstoftwo secondoftwo ifx [ 1 ] # 1firstoftwo secondoftwo `` `` # 1''''@noop [ 0]secondoftwosanitize@url [ 0 ] ",
    "+ 12$12  & 12#1212_12%12@startlink[1]@endlink[0]@bib@innerbibempty    @noop `` , ''   * * ( ) @noop `` , ''   * * ( )    @noop `` , ''   * * ( ) @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   ( ,     @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( ) @noop `` , ''   * * ( ) @noop `` , ''   * * ( ) @noop `` , ''   * * ( ) @noop `` , ''   ( ,   @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''",
    "( , @noop `` , ''   * * ( )    @noop `` , ''   * * ( )",
    "@noop `` , ''   * * ( )    @noop `` , ''   ( )    @noop `` , ''   ( ) @noop `` , ''   * * ( )    @noop `` , ''   * * ( ) @noop `` , ''   * * ( ) @noop `` , ''   ( ) @noop `` , ''   ( ,     @noop `` , ''   * * ( ) @noop `` , ''   * * ( ) @noop `` , ''   * * ( ) @noop `` , ''   ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( ) @noop _ _  ( , ,  ) @noop `` , ''   * * ( )    @noop `` , ''   * * ( ) @noop `` , ''   ( )    @noop `` , ''   * * ( ) @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   * * ( )    @noop `` , ''   ( ,   @noop `` , ''   ( ,",
    "at this time we lack a good effective classical compilation procedure for approximating non - classical unitaries by efficient ancilla - free circuits in the clifford+@xmath2 basis .",
    "we show here , however , that the magic state @xmath63 of ( [ eq : def : psi ] ) that produces the @xmath13 gate by state injection can be prepared by certain probabilistic measurement - assisted circuits over the clifford+@xmath2 basis .",
    "therefore the compilation into the clifford+@xmath2 basis can be reduced to a compilation into the clifford+@xmath13 basis , while incurring a certain state preparation cost .",
    "this solution , however inelegant , is sufficient , for example , in the context of shor s integer factorization .",
    "we have seen in section [ subsec : classical : with : p9 ] that the classical @xmath331 and , hence , the classical @xmath69 gates can be represented exactly and ancilla - free using three @xmath2 gates .",
    "we use the availability of these gates to prove the key lemma below .",
    "recall that @xmath484 is a clifford phase .",
    "[ app : lemma : resource : state ] each of the ternary resource states    @xmath485    can be represented exactly by a repeat - until - success ( rus ) circuit over clifford+@xmath2 with one ancillary qutrit and expected average number of trials equal to @xmath486 .",
    "let us give a proof for the second resource state .",
    "( the proof is symmetrical for the first one . )",
    "we initialize a two - qutrit register in the state @xmath487 and compute @xmath488 if we measure @xmath121 on the second qutrit , then the first qutrit is in the desired state .",
    "overwise , we discard the register and start over . since the probability of measuring @xmath121 is @xmath489 , the lemma follows .",
    "a copy of the two - qutrit resource state latexmath:[\\[\\label{app : eq : eta }    can be represented exactly by a repeat - until - success circuit over clifford+@xmath2 with two ancillary qutrits and expected average number of trials equal to @xmath64 .    to effectively build a circuit for the corollary",
    ", we stack together the two rus circuits described in lemma [ app : lemma : resource : state ] .",
    "there exists a measurement - assisted circuit that , given a copy of resource state @xmath491 as in ( [ app : eq : eta ] ) , produces a copy of the resource state latexmath:[\\[\\label{app : eq : psi }    probability @xmath65 .",
    "measure the first qutrit in the state @xmath493 .",
    "here is the list of reduced second qutrit states given the measurement outcome @xmath179 : @xmath494 @xmath495 @xmath496 while the first state on this list is the desired @xmath63 , each of the other two states can be turned into @xmath63 by classically - controlled clifford correction .",
    "as shown in @xcite , lemma 5 , the resource state @xmath63 as in ( [ app : eq : psi ] ) can be injected into a coherent repeat - until - success circuit of expected average depth @xmath128 to execute the @xmath13 gate on a coherent state .",
    "see our figure [ fig : r2:rus ] in section [ subsec : metaplectic : basis ] .",
    "recall that the @xmath69 gate appearing in the lemma [ app : lemma : resource : state ] construction has the non - clifford cost of three @xmath2 gates .",
    "thus , to summarize the procedure : we can effectively and exactly prepare the magic state @xmath63 using four - qutrit register at the expected average @xmath2-count of @xmath318 .    to have a good synchronization of the magic state preparation with the @xmath13 gate injection",
    "is would suffice to have a magic state preparation coprocessor of width greater than @xmath319 ( to compensate for the variances in repeat - until - success circuits ) .",
    "to recap the discussion in section [ subsec : shor : top : level ] , the quantum period finding function consists of preparing a unitary state @xmath497 proportional to the superposition    @xmath498    followed by quantum fourier transform , followed by measurement , followed by classical postprocessing .",
    "as we know , the measurement result @xmath83 can be useful for recovering a period @xmath66 or it can be useless .",
    "it has been shown in @xcite that the probability @xmath499 of getting a useful measurement is in @xmath500 .",
    "speaking in more general terms , let @xmath501 be the hilbert space where the @xmath502 is to be found after the quantum fourier transform step , let @xmath503 be the subspace spanned by all possible state reductions after all possible useful measurements and let @xmath504 be its orthogonal complement in @xmath501 .",
    "let @xmath505 be the orthogonal decomposition of @xmath502",
    ". then @xmath506 .",
    "let now @xmath507 be an imperfect unitary copy of @xmath502 at hilbert distance @xmath67 .",
    "what is the probability of obtaining _ some _ useful measurement on measuring @xmath507 ?    by definition , it is the probability of @xmath507 being projected to @xmath508 upon measurement .    in the above context",
    "the probability of @xmath507 being projected to @xmath508 upon measurement is greater than @xmath509    let @xmath510 be the orthogonal decomposition of the state @xmath507 .",
    "clearly @xmath511 and , by triangle inequality , @xmath512 .",
    "hence @xmath513 as claimed .    in the above context , if @xmath514 where @xmath515 , then the probability of obtaining _ some _ useful measurement on measuring @xmath507 is greater than @xmath516",
    ".    in particular",
    "if @xmath517 , we are at least half as likely to obtain a useful measurement from the proxy state @xmath507 as from the ideal state @xmath502 .    in summary , there is a useful precision threshold @xmath67 in @xmath518 that allows to use an imprecisely prepared state at precision @xmath67 in place of the ideal state in the measurement and classical post - processing part of shor s period finding function .",
    "this translates into per - gate tolerance in the preparation circuit in a usual way .",
    "if @xmath88 is the unitary depth of the state preparation circuit , then it suffices to represent each of the consecutive unitary gates to fidelity @xmath519 or better . for completeness",
    ", we make this argument explicit in the following proposition .",
    "let @xmath520 denote the spectral norm of a unitary operator @xmath29 .",
    "assume that an ideal quantum computation @xmath521 is specified using @xmath88 perfect unitary gates @xmath522 and we actually implementing it using @xmath88 imperfect unitary gates @xmath523 where for all @xmath524 it holds that @xmath525",
    ". then for the actually implemented unitary transformation @xmath526 it holds that @xmath527 .",
    "( see also @xcite , @xcite ) .",
    "we perform induction on @xmath88 . when @xmath528 there is nothing to prove .",
    "assume the inequality has been proven for a product of length @xmath255 .",
    "we have @xmath529 @xmath530 @xmath531 @xmath532 ,    where in the second step we used the triangle inequality , in the third step the multiplicativity of the norm , i.e. @xmath533 for all unitaries u , v , and that @xmath534 for all unitary @xmath29 . in the last step we used the inductive hypothesis .",
    "first consistent solution of this kind has been proposed in @xcite .",
    "a peculiar feature of the proposed solution is that the modular additive shift block for @xmath535 has four interleaved quantum fourier transforms ( two direct and two inverse , see figure 5 in @xcite ) , the sole purpose of which is establishing and then forgetting the sign of @xmath536 .",
    "it is unlikely that any of these transforms can be made redundant without significant redesign of the circuit . as we have pointed out in section [ subsec : fourier : transform ] , ternary quantum computers are comparatively inefficient in practice when emulating non - classical modular exponentiation circuits such as beauregard @xcite .    fortunately the beauregard circuit can be supplanted by haener et .",
    "al circuit @xcite .",
    "instead of emulating that circuit directly , we point out that our ternary modular exponentiation circuit based on ripple - carry adder ( see section [ subsec : ripple : carry ] ) , maintains smaller width in qutrits by much simpler means - systematic use of ternary basis state @xmath358 which , for our purposes is always `` idle '' .",
    "it is pointed out in @xcite that , instead of accumulating the partial modular products sequentially , one can accumulate pairwise modular products at nodes of a binary tree , whose original leaves are classically pre - computed values @xmath538 .",
    "this prepares the entire product in depth @xmath196 ( instead of @xmath140 ) multiplications and size @xmath539 .",
    "this proposal still uses modular addition as the core building block , and thus we can plug in an emulation of the the modular addition circuit built out of carry - lookahead adders and comparators as in the section [ subsec : mod : exponetiation ] .",
    "this fits well into the polylogarithmic depth promise of @xcite .",
    "it should be pretty straightforward to rewrite this design in ternary logic and use the ternary lookahead additive shift circuits as described in subsection [ subsec : ternary : ternary : ternary ] to circuitize it .",
    "for the lack of time and space we have to forego a more detailed analysis of this here ."
  ],
  "abstract_text": [
    "<S> we determine the cost of performing shor s algorithm for integer factorization on a ternary quantum computer , using two natural models of universal fault - tolerant computing : ( i ) a model based on magic state distillation that assumes the availability of the ternary clifford gates , projective measurements , classical control as its natural instrumentation set ; ( ii ) a model based on a metaplectic topological quantum computer ( mtqc ) . </S>",
    "<S> a natural choice to implement shor s algorithm on a ternary quantum computer is to translate the entire arithmetic into a ternary form . </S>",
    "<S> however , it is also possible to emulate the standard binary version of the algorithm by encoding each qubit in a three - level system . </S>",
    "<S> we compare the two approaches and analyze the complexity of implementing shor s period finding function in the two models . </S>",
    "<S> we also highlight the fact that the cost of achieving universality through magic states in mtqc architecture is asymptotically lower than in generic ternary case . </S>"
  ]
}