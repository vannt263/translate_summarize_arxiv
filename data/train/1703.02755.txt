{
  "article_text": [
    "many of the services a smart city can provide to its citizens rely on the ability of its infrastructure to collect and process in real time vast amounts of continuous data that sensors deployed through the city produce  @xcite . in this scenario , building an infrastructure that scales as the number of such sensors and their data rates increase is a challenging task . grouping the data in streams",
    "is a common approach for this kind of scenarios .",
    "a data stream can be defined as _ a real - time , continuous , ordered ( implicitly by arrival time or explicitly by timestamp ) sequence of items _",
    "streams are different to stored data in several aspects : they can not normally be stored in their entirety , and the order in which data is received can not be controlled .    real time",
    "stream processing solutions are required to manage this kind of data streams .",
    "in fact , the generic platform for big data applications proposed in  @xcite assigns an important role to such a component .",
    "building scalable stream processing solutions is far from trivial  @xcite . in this paper",
    "we propose a system for scalably managing streams of sensor data in the context of the hermes ( _ healthy and efficient routes in massive open - data based smart cities _ )  @xcite project , which aims at helping its users , citizens of a smart city , keep healthy habits .",
    "other systems for health care in smart cities are reported in  @xcite .",
    "the main sources of data in hermes are the citizens themselves , which contribute to the smart city by letting it track their physical activities through activity bands or the smartcitizen mobile application , and their driving through the smartdriver mobile application .    in order to understand the amount of data it supposes ,",
    "let us focus on one of the applications .",
    "the smartdriver application aims at reducing the stress levels and fuel consumption of its users , as well as improving traffic safety , by providing the user with real time driving recommendations  @xcite . in order to do that",
    ", the application tracks its users while they drive and sends the data to the infrastructure as soon as it captures it , so that server - side services can perform real time computations such as detection of congested roads and stressful road sections .",
    "the application should receive useful feedback back , e.g. static road information , a recommended driving speed and traffic alerts . in its current prototype ,",
    "the application track s the vehicle s movement as well as its driver s heart rate .",
    "it reports the vehicle s location every 10 seconds .",
    "in addition , it reports immediately abnormal situations such as high accelerations or decelerations , excessive speeds or abrupt increases in the driver s heart rate .",
    "more detailed data , such as second by second information about location , speed and heart rate , are buffered in order to reduce resource consumption , and sent to the infrastructure every time the driver completes a 500 meter road section .",
    "because each driver produces at the least one data item every 10@xmath0 , only 10,000 drivers would suppose a load of more than 1,000 @xmath1 for the infrastructure that collects the data .",
    "the rest of the paper is organized as follows .",
    "section  [ sec : streaming - inf ] proposes a system architecture for the real time processing of streams in the context of a smart city .",
    "section  [ sec : case - study ] presents a case study for this architecture , based on the smartdriver application of the hermes project .",
    "section  [ sec : evaluation ] reports the results of a performance of the system .",
    "conclusions and future lines of work are presented in section  [ conclusions ] .",
    "the server - side infrastructure was developed on top of the ztreamy middleware  @xcite .",
    "we have selected ztreamy because of its flexibility , scalability and the simple http - based api it provides to data producers , which improves compatibility and simplifies the development of clients such as the smartdriver mobile application . in addition",
    ", ztreamy provides useful out - of - the - box features such as stream aggregation , filtering and replication , as well as a persistency subsystem that prevents the lose of data items once they have been accepted by the infrastructure , even in the case of temporal network disruptions or failures of one or more components of the deployed system .",
    "as our experiments in  @xcite show , other publish - subscribe systems for sensor data like dataturbine  @xcite would not provide the performance levels we need in this scenario .",
    "the zeromq middleware is more or less similar in terms of performance to ztreamy , but ztreamy provides us with a much more convenient high level api and an http - based interface .",
    "the more recent apache kafka  @xcite publish - subscribe system could be an alternative to ztreamy , but we have not yet studied either its suitability for this scenario or its performance , and leave it for future work .",
    "figure  [ fig : architecture ] shows the system architecture we have designed .",
    "it consists of the following main components :    * data collectors : ztreamy servers to which the smartdriver and smartcitizen mobile applications post their data through http .",
    "these servers validate the data and orchestrate the interactions with other services needed to handle it .",
    "they are also responsible of responding mobile applications with feedback data when required .",
    "since most of the load of input data handling is supported by these data collectors , they are replicated behind an http load balancer in order to increase the number of clients they are able to handle .",
    "we have chosen the well - known nginx open - source http server for this task . *",
    "main stream : data items received by the collectors are then aggregated into the main stream , which is managed by a separate ztreamy server . *",
    "storage stream : this stream filters the data items that do nt need to be stored out of the main stream .",
    "the hermes servers that manage data persistence consume this stream in order to receive the data they have to store . *",
    "public stream : this stream is derived from the main stream . it is part of the public api hermes provides to third - party applications .",
    "it transports aggregated , anonymized and semantically - annotated data that may be useful to those applications . *",
    "short - term location - based services : the streaming infrastructure needs to perform some real - time computations and keep some short - term data .",
    "for example , it needs to detect traffic incidents , retrieve the scores of nearby drivers for the smartdriver s gamification system , etc .",
    "this module serves the collectors and the public stream server .",
    "in addition , it needs to use the long - term location - based services in order to get cartography data and speed recommendations based on historical data .",
    "this information is needed as input for some of the short - term services , and part of it is also returned to the smartdriver application .",
    "the other components of the architecture ( mobile applications , long - term storage and location - based services and third - party applications ) lay without the scope of this paper .    depending on the amount of simultaneous clients the system needs to handle",
    ", this architecture can be deployed on a single server or distributed across several ones .",
    "if distributed , a good network link between them is advisable .",
    "ideally , all the servers should share the same local network in order to reduce end - to - end delays and bandwidth limitations .",
    "additionally , because of the locality of the services the infrastructure provides , the system as a whole can be easily partitioned for different geographical areas , thus deploying a replica of the whole system for each geographical area .",
    "this eases the scaling of the system as the amount of users of its services grows .",
    "in order to illustrate the internals of the system , let us focus on the smartdriver mobile application .",
    "it tracks the driver and posts the following types of events :    * _ vehicle location _ : it contains a timestamp , latitude and longitude where the vehicle is located , an estimation of the accuracy of that location , the instantaneous vehicle speed and the current driving score assigned to the driver by the gamification subsystem of the application .",
    "these events are posted every 10@xmath0 .",
    "they are used mainly for the real - time services . * _ driving section _ : it contains more detailed information about a larger road section , including second by second location and speed , heart rate measurements and aggregated computations associated to this section ( average and standard deviations of speed and heart rate , as well as statistics about speed variations ) .",
    "these events are posted for every 500@xmath2 the user drives .",
    "they are intended for storage , but can also be used in some real time services . * abnormal situations : they are posted every time smartdriver detects an abnormal situation ( strong accelerations and decelerations , too high speeds , too high heart rates ) , immediately after its detection .",
    "because of their 10@xmath0 periodicity , the system uses the _ vehicle location _ posts to send feedback to the smartdriver application .",
    "collector servers are responsible of gathering the required information from the short - term and long - term location - based services and sending it back to the application in the body of their http response .",
    "this feedback includes :    * type of road and its speed limit ( to be obtained from the long - term services ) . *",
    "recommended speed as computed by the speed recommendation service ( to be obtained from the long - term services and possibly adapted to current road conditions by the short - term services ) .",
    "* traffic alerts in the vicinity ( to be obtained from the short - term services ) . * driving scores assigned to nearby drivers by the gamification system ( to be obtained from the short - term services ) .    in order to reduce the load of the long - term location - based services with unnecessary requests due to stopped or very slow vehicles , collectors assume",
    "the type of road and speed limit did not change if the driver advanced less than 10@xmath2 since the last time they determined those values .",
    "the short - term services take similar measures to avoid some computations such as retrieving or storing driver scores in those situations .",
    "the current prototype of the short - term location - based services provides two main features :    * it tracks the latest location of each driver in order to detect the way of the road the driver follows ( both the current location and a previous location are needed ) as well as detecting when the driver has advanced more than the 10@xmath2 threshold .",
    "* it tracks the driving score and location of every driver in order to provide the nearby drivers score service .",
    "the first feature is implemented on top of a ram - stored two - tier dictionary in which every 30@xmath0 the oldest dictionary is dropped and a new one created .",
    "this structure allows the system to keep just one location per driver and drop those drivers that have not contacted the service for more than 30@xmath0 .",
    "the second feature is more complex because it requires performing spatial queries on a rectangle around the driver s current location .",
    "we have implemented it with a ram - stored sqlite database using an r - tree - based index .",
    "the system periodically drops data older than 1 hour because the gamification feature bases on recent data .",
    "the current prototype of the streaming server infrastructure was subjected to experiments with varied amounts of load in order to evaluate its performance . because of the unfeasibility of recruiting enough volunteers to simultaneously use the application up to the loads the system is able to handle",
    ", we developed a simulator that produces a synthetic load .",
    "the simulator was designed to produce data and send it to the infrastructure in a way that , from the point of view of measuring performance , is equivalent to having a given amount of actual users , all of them using the smartdriver application and driving simultaneously a number of different paths in the same city .",
    "the following parameters can be configured in the simulator before starting a simulation :    * number of simulated drivers : since each driver generates at least one _ vehicle location _ event every 10s , the minimum number of requests per second the system needs to handle is @xmath3 , where @xmath4 is the number of drivers . _",
    "data section _ events make actual rates slightly higher , especially when drivers reach higher speeds . in order to introduce variability on the system ,",
    "each driver is assigned some random parameters that influences her driver behavior ( e.g. her inclination to drive fast or slow with respect to speed limits ) .",
    "in addition , not all drivers start at the same time .",
    "each driver starts randomly within one minute of starting the simulator . *",
    "paths : each simulated driver is assigned a path she will traverse during the simulation .",
    "paths are based on the actual cartography of seville , with random starting and end points in the city and its surroundings .",
    "each path is created by choosing a pair of random start and end points within a configurable distance from the city center .",
    "the path itself will be the optimum path for going in a private vehicle from the start to the end point , as returned by a geographic information system . the number of paths is configurable and drivers are uniformly assigned to those paths .",
    "therefore , many drivers may follow the same path . despite sharing a path , because their behavior and the instant they begin to drive are random , those drivers will not be synchronized and therefore there will be enough randomness on the system .    once the simulation starts , the simulator makes every driver advance on her path at a speed that depends on the randomly assigned characteristics of the driver and the speed limit of the current road , with a random bias .",
    "acceleration and deceleration are also modeled by the simulator ( e.g. at turns or when speed limits change ) .",
    "drivers send the events they produce to the infrastructure by sending http requests that are similar to those the actual smartdriver application would send . despite coming all the requests produced by the simulator from the same host ,",
    "drivers in the simulator are prevented from sharing their underlying tcp connections with other drivers .",
    "this way the simulator will produce a realistic traffic pattern , analogous to the actual pattern smartdriver produces .",
    "the experiments were run by deploying the streaming server infrastructure ( load balancer , six collector instances , one main stream instance , one storage stream instance and one short - term location - based service instance ) on a high - end server with 12 intel xeon e5 - 2430 2.5ghz cores and 64 gb of ram memory .",
    "the simulator was deployed on a laptop computer , connected to the server through one intermediate ip router and a 100mbps connection . in order to accurately measure event delivery delays , simulator and server used the ntp service to synchronize their clocks .",
    "the combination of number of clients and event rate of each client determines the load the system needs to handle . since in smartdriver",
    "the event rate each client generates is approximately the same , the aggregated event rate arriving the server infrastructure should grow linearly with the number of clients .",
    "figure  [ fig : event - rate ] shows that , as expected , the event rate at the main stream is proportional to the number of clients up to 4,000 clients . at that point , with approximately 28,000 events per minute , the infrastructure saturates and begins to reject events , and therefore linearity is lost .    we ve measured the performance of the server infrastructure for different loads in a series of experiments with a growing number of clients .",
    "the main performance indicators we measured were :    * cpu utilization : amount of time of cpu used during a minute , divided by @xmath5 .",
    "this measurement was taken every minute .",
    "its estimated mean and 95% confidence intervals were computed and reported in the plots .",
    "a component with an utilization close to @xmath6 is in the limit of the load it can handle .",
    "a component with an utilization close to @xmath7 is mainly free . *",
    "event admission delay : amount of time between the creation of the event at the client side ( the simulator ) and its admission at a front - end server and at the database feed stream .",
    "larger delays may signal congestion situations in the server . similarly to utilization , mean delays with 95% confidence intervals were estimated from the delays suffered by a random sample of the simulated events .",
    "figure  [ fig : utilization ] shows the overall utilization of the infrastructure as well as the individual utilization of each server component .",
    "the six collector servers average a higher utilization than the rest , thus being the bottleneck of the system .",
    "however , their utilization may be reduced by adding some more collector instances to the pool , assuming that the server has cores enough .",
    "the next component in terms of utilization is the short - term location - based server , followed by the server that handles the main stream .",
    "the storage stream server and the http balancer can handle much more load than the rest .",
    "figure  [ fig : utilization - events ] shows clearly that utilization at the main stream grows linearly with its event rate .",
    "finally , figure  [ fig : delays ] shows the event delivery delay at two points of the server infrastructure : collectors and storage feed stream .",
    "as expected , delays increase with the load of the system , especially from 3,500 clients on , where the indicators show that the system is beginning to saturate . in our experimental setup",
    "the network distance between the simulator and the infrastructure is less than @xmath8 . in more realistic scenarios , that distance would be higher , although less than @xmath9 in most of the situations .    as a conclusion ,",
    "the infrastructure we have presented in this paper is able to handle up to 4,000 simultaneous drivers from a single server , which represent approximately 28,000 new events every minute . at larger data rates collectors begin to reject some events due to saturation .",
    "we deployed the first working prototype of this infrastructure more than two years ago .",
    "it is still working and has received frequent feature upgrades and bug fixes since then . during this period , the system has been continuously capturing data from our beta testers with no major issues . although the core of the architecture is already implemented and deployed , some of its services are still work in progress .",
    "more specifically , the public stream and the speed recommendation and traffic incident detection services are not yet part of the current prototype .    according to our experiments",
    ", the architecture we propose provides a reasonable level of performance in the context of the hermes project .",
    "the maximum amount of simultaneous drivers a single server may handle is approximately 4,000 , but the infrastructure can be scaled - up by deploying it into more servers , especially the collectors components . distributing",
    "the short - term location services component is challenging because of the need of a shared spatial database , but techniques for efficiently partitioning such data and their processing already exist  @xcite .",
    "research reported in this paper was supported by the spanish economy ministry through the `` hermes  smart driver '' project ( tin2013 - 46801-c4 - 2-r ) and the `` hermes  smart citizen '' project ( tin2013 - 46801-c4 - 1-r ) .",
    "ablimit aji , fusheng wang , hoang vo , rubao lee , qiaoling liu , xiaodong zhang , and joel saltz .",
    "hadoop gis : a high performance spatial data warehousing system over mapreduce . , 6(11):10091020 , august 2013 .",
    "jorge  yago fernndez , lvaro arcos  garca , juan  antonio lvarez - garca , juan  antonio ortega  ramrez , jess torres , jess arias  fisteus , vctor crcoba magaa , mario muoz organero , and luis snchez  fernndez .",
    "plataforma para gestin de informacin de ciudadanos de una smartcity . in _ actas de las xvii jornadas de arca _ , pages 5356 , junio 2015 .",
    "t.  fountain , s.  tilak , p.  shin , p.  hubbard , and l.  freudinger .",
    "the open source dataturbine initiative : streaming data middleware for environmental observing systems . in _",
    "international symposium on remote sensing of environment _ , 2009 .",
    "a.  solanas , c.  patsakis , m.  conti , i.  s. vlachos , v.  ramos , f.  falcone , o.  postolache , p.  a. perez - martinez , r.  d. pietro , d.  n. perrea , and a.  martinez - balleste .",
    "smart health : a context - aware health paradigm within smart cities .",
    ", 52(8):7481 , aug 2014 ."
  ],
  "abstract_text": [
    "<S> many of the services a smart city can provide to its citizens rely on the ability of its infrastructure to collect and process in real time vast amounts of continuous data that sensors deployed through the city produce . in this paper </S>",
    "<S> we present the server infrastructure we have designed in the context of the hermes project to collect the data from sensors and aggregate it in streams for their use in services of the smart city . </S>"
  ]
}