{
  "article_text": [
    "users of shared resources are frequently faced with the decision of when to use the resource with a view of trying to avoid rush hour effects .",
    "broad examples include , workers taking their lunch break and attending a cafeteria ; people entering and vacating sporting events ; and commuters using transportation networks . in many such situations the so called rush - hour game",
    "is played by all users acting individually . on the one hand",
    ", each user typically has an ideal arrival / departure time , while on the other hand , users often wish to avoid rush hour so as to minimise congestion costs .",
    "these general types of scenarios have received much attention through the transportation community , @xcite , the queueing community ( see @xcite or p84 of @xcite for a review ) and more specifically within the setting we consider in this paper @xcite .    while understanding social strategic ( game ) behaviour is important , a complementary analysis is with regards to the social optimum ( centralised scheduling decisions ) .",
    "these types of situations occur often in manufacturing , appointment scheduling , education and service .",
    "most of the research on scheduling methodlogy does not consider processor sharing but rather focuses on the situation where resources are dedicated , see @xcite . in this paper",
    ", we put forward a novel scheduling model , that offers a simple abstraction of a common scenario : jobs may be scheduled simultaneously , yet slow each other down when sharing the resource . in this respect our model is related to the study of scheduling problems with batch processing , see @xcite .",
    "however , from a mathematical perspective , our model , results and methods do not involve the classical discrete approaches but rather rely on piecewise affine dynamics with breakpoints .",
    "this type of behaviour resembles separated continuous linear programs , as in @xcite , and is often used to solve optimization problems associated with fluid multi - class queueing networks ( cf .",
    "@xcite , @xcite ) .    a standard way of modelling resource sharing phenomena , is the so - called processor sharing queue , see for example @xcite .",
    "in such a model , given that at time @xmath0 there are @xmath1 users in the system , the total fixed service capacity , @xmath2 , is allocated , such that each user receives an instantaneous _ service rate _",
    ", @xmath3 such a model then captures the relationship of the arrival time of a user , @xmath4 , the departure time of a user , @xmath5 and the service demand , @xmath6 through @xmath7 the _ aggregate throughput _ with @xmath8 users in the system is the product @xmath9 . for the processor sharing model ,",
    "this is obviously the constant @xmath10 .",
    "however , in practice , the aggregate throughput is not necessarily constant with respect to @xmath1 . in many situations , most notably in traffic and transportation scenarios , users inter - play in a complicated manner . in particular , in the classic greenshield fluid model , ( see for example @xcite or @xcite ) the aggregate throughput is not monotone in the number of users and even exhibits a traffic jam effect .",
    "the simplest model , describing such a phenomena  is @xmath11 which is a discrete variation of greenshield s model is not as in but is rather some other function are sometimes referred to as generalized processor sharing .",
    "see for example  @xcite .",
    "generalized processor sharing has also taken other meanings over the years , so sometimes there is confusion about the term . ] . with a single user in the system ,",
    "yields the _ free flow rate _",
    "@xmath10 which coincides with .",
    "then for each additional user , there is a linear slowdown of @xmath12 units in the rate .",
    "see figure  [ fig : service_dynamics ] for a simple illustration .",
    "note that in road networks , much research has focused on the so - called fundamental diagram for networks , such as in @xcite .",
    "indeed figure  [ fig : service_dynamics]-b resembles a fundamental diagram .",
    "0.49    ( , )  ( , ) node[right ] @xmath8 ; ( , )  ( , ) ; in 0,5,10,15,20 at ( , ) [ below ] ; in 0,20,40,60,80,100 at ( , ) [ left ] ;    plot ( , 100 - 5 * ) ; ( 8,75 ) node[right , red ] @xmath13 ;    0.49    ( , )  ( , ) node[right ] @xmath8 ; ( , )  ( , ) ; in 0,5,10,15,20 at ( , ) [ below ] ; in 0,100,200,300,400,500 at ( , ) [ left ] ;    plot ( , ( 100 - 5 * ) ) ; ( 5,560 ) node[right , blue ] @xmath14 ;    our scheduling problem is to to centrally choose arrival times @xmath15 in an effective manner , where @xmath16 is the number of users . in this paper",
    "we assume that all users share the same service demand , @xmath6 . in our objective",
    ", user @xmath17 incurs a cost of @xmath18 where @xmath19 is his departure time and @xmath20 is the ideal departure time ( due date ) and @xmath21 captures tradeoff between meeting the due date and sojourn time costs .",
    "the total costs incurred by all users is then the sum of individual user costs .    if there was no congestion ( say due to @xmath20 being well separated ) , an ideal choice is @xmath22 .",
    "but in general , users interact , so the scheduling decision needs to take this interaction into account .",
    "if , for example , @xmath23 and @xmath24 for all @xmath17 , then the problem is trivially solved with zero cost by setting @xmath25 here since sojourn time does not play a role , sending all users simultaneously will imply they arrive simultaneously after being served together at the slowest possible rate . continuing with the case of @xmath23 ,",
    "if now users do nt have the same @xmath20 , then attaining zero costs is still possible .",
    "in fact , we show in the sequel , that in this specific case ( @xmath23 ) the optimal schedule can be computed efficiently ( in polynomial time ) .    at the other extreme",
    "consider the case where minimising sojourn times is prioritised over minimisation of due dates ( e.g. if fuel costs are extremely high ) .",
    "this corresponds to @xmath26 . while for any finite @xmath27",
    ", it is possible that an optimal schedule allows overlap of users , an approximation for the case of large @xmath27 is obtained by enforcing a schedule with no overlap ( @xmath28 ) .",
    "this is because overlaps have a very large sojourn time cost relative to the possible reduction in quadratic deviation from desired departure times .",
    "now with such a constraint , the problem resembles a single machine scheduling problem with due date penalties .",
    "this problem has been heavily studied ( see for example @xcite or @xcite ) . in our case , in which users have identical demand , finding the optimal schedule is a convex quadratic program and can thus be solved in polynomial time .",
    "we spell out the details in the sequel .    setting aside the extreme cases of @xmath23 or @xmath26 ,",
    "the problem is more complicated .",
    "while we do nt have an np - hardness proof , we conjecture that finding the optimal @xmath29 is a computationally challenging problem . in the current paper",
    "we handle this problem in several ways .",
    "first we show that departure times depend on arrival times in a piecewise affine manner .",
    "we find an efficient algorithm for calculating @xmath30 .",
    "we then show that the total cost is a piecewise convex quadratic function but generally not convex , i.e. there is a large ( but finite ) number of polytopes in @xmath31 where within each polytope , it is a convex quadratic function of @xmath29 .",
    "this is a similar formulation to that of the piecewise - linear programming problem presented in @xcite , which is known to be np - hard .",
    "the structure of the total cost yields an _ exhaustive search _ scheduling algorithm which terminates in finite time .",
    "we then put forward heuristics .",
    "the first heuristic , which we refer to as the _ local search _ , operates by solving a sequence of neighbouring quadratic problems until finding a local minimum with respect to the global optimization .",
    "the second heuristic performs a _ global search _ over one coordinate ( arrival time of a single user ) , keeping other coordinates fixed .",
    "this is done in a provably efficient manner . in particular",
    ", we bound the number of steps in each coordinate search by a polynomial .",
    "it then repeats over other coordinates , cycling over all coordinates until no effective improvement in the objective function is possible . in case of smooth objectives , it is known that such coordinate pivot iterations ( cpi ) schemes converge to local minima ( see for example @xcite , p272 ) .",
    "further , in certain special cases of non - smooth objectives , it is also known that cpi schemes converge to local minima ( see for example @xcite ) .",
    "but in our case , the non - separable piecewise structure of the objective often causes our heuristic to halt at a point that is not a local minimum .",
    "nevertheless , the global search heuristic is fruitful when utilized in a _ combined local - global search _ heuristic .",
    "this heuristic performs global searches with different initial points , each followed by a local search .",
    "we present numerical evidence , illustrating that it performs extremely well . often finding the global optimum in very few steps .",
    "the structure of the sequel is as follows . in section  [ sec : model ]",
    "we present the model and basic properties . in section  [ sec : dynamics ] we focus on arrival departure dynamics , showing a piecewise affine relationship between the arrival and departures times .",
    "we give an efficient algorithm for calculating the departure times given arrival times or vice - versa .",
    "this also solves the scheduling problem for the special case @xmath23 . in section",
    "[ sec : optregion ] we characterise the constraints associated with quadratic programs which make up the piecewise quadratic cost .",
    "these are then used in the _ exhaustive search _ algorithm .",
    "we then present the _ local search _ algorithm and prove it always terminates at a local minimum ( of the global objective ) .",
    "in section  [ sec : cpisection ] we present our global search method based on cpi .",
    "we utilize the structure of the problem to obtain an efficient single coordinate search within the cpi .",
    "then in section  [ sec : combheurist ] , the local search and global searches are combined into a unified heuristic .",
    "we further illustrate the power of our heuristic through numerical examples .",
    "we conclude in section  [ sec : conclusion ] .",
    "some of the proofs are deferred to the appendix .",
    "* notation : * we denote @xmath32 and @xmath33 to be the minimum and maximum of @xmath34 and @xmath35 , respectively .",
    "we define any summation with initial index larger than the final index to equal zero ( e.g. @xmath36 ) .",
    "vectors are taken as columns and are denoted in bold .",
    "@xmath37 denotes a vector of @xmath38 s and @xmath39 denotes a vector of zeros in all but the @xmath17th coordinate , which equals @xmath38 .",
    "the indicator function is denoted by @xmath40 .",
    "our model assumes that there is a fixed user set @xmath41 where the service requirement of each user , @xmath6 , is the same and is set to @xmath38 without loss of generality ( this can be accounted for by changing the units of @xmath10 and @xmath42 )",
    ". then the equations determining the relationship between the arrival times vector @xmath15 and the departure times vector @xmath43 are @xmath44\\}.\\ ] ] using the linear slowdown rate function , , the equations are represented as , @xmath45\\ } -1 \\big ) dt , \\qquad i=1,\\ldots , n.\\ ] ] these @xmath16 equations can be treated as equations for the unknowns @xmath46 , given @xmath29 or vice - versa .",
    "we assume @xmath47 so that it always holds that @xmath48 .",
    "the cost incurred by user @xmath17 is , @xmath49 and the total cost function , which we seek to minimise , is @xmath50 we assume ( without loss of generality ) that the ideal departure times , @xmath51 are ordered , i.e. @xmath52 .    for clarity of the exposition we choose the cost , to be as simplistic as possible .",
    "practical straightforward generalizations to the cost and to the associated algorithms and heuristics are discussed in the conclusion of the paper .",
    "these include other convex penalty functions , ideal arrival times and a potentially different penalty for early and late departures . our algorithms ,",
    "can all be adapted for such cost functions .",
    "we first have the following elementary lemmas :    [ lemma : departure_order ] assume that the arrivals , @xmath29 , are ordered : @xmath53 , then the departures , @xmath46 , follow the same order : @xmath54 .",
    "[ lemma : unique ] for any @xmath29 there is a unique @xmath46 and vice - versa .    as a consequence of the assumed order of @xmath55 and of the above lemma",
    "we assert that an optimal schedule can only be attained with an ordered @xmath29 whose individual coordinates lie in a compact interval , as shown in the following lemma .",
    "[ lemma : optimal_order ] an optimal arrival schedule satisfies @xmath56 , where @xmath57    we may thus define the search region for the optimal schedule : @xmath58 and take our scheduling problem to be @xmath59 . + no strict condition on the joint order of @xmath60 and @xmath19 can be imposed except for the requirement that @xmath61 for any @xmath17 ( the sojourn time of all users is strictly positive ) .",
    "we are thus motivated to define the following for @xmath62 : @xmath63 the variable @xmath64 specifies the interval @xmath65 in which @xmath19 resides .",
    "similarly the variable @xmath66 specifies that @xmath60 lies in the interval @xmath67 $ ] . note that we define @xmath68 and @xmath69 .",
    "the sequences @xmath64 and @xmath66 satisfy some basic properties : ( i )  they are non - decreasing and are confined to the set @xmath70 .",
    "( ii )  from the fact that @xmath71 we have that @xmath72 .",
    "( iii )  since @xmath46 is an ordered sequence and also @xmath61 we have @xmath73 .",
    "( iv )  we have @xmath74 and @xmath75 .",
    "( v )  each sequence determines the other : @xmath76 thus given either the sequence @xmath77 or the sequence @xmath78 or both , the ordering of the @xmath79 tuple @xmath80 is fully specified as long as we require that @xmath60 s and @xmath19 s are ordered so as to be consistent with lemmas [ lemma : departure_order ] and [ lemma : optimal_order ] .",
    "we denote the set of possible @xmath81 by @xmath82 similarly , we denote the set of possible @xmath83 by @xmath84 . we have that ,",
    "@xmath85 this follows ( for example ) by observing that the elements of @xmath86 correspond uniquely to lattice paths in the @xmath87 grid from bottom - left to top - right with up and right movements without crossing the diagonal .",
    "the number of such elements is the @xmath16th catalan number , see for example p259 in @xcite .",
    "the following example illustrates the dynamics of the model ( without optimization ) and shows the role of @xmath88 , or alternatively @xmath89 , in summarizing the piecewise affine dynamics .",
    "take @xmath90 , @xmath91 and @xmath92 .",
    "this @xmath93 user system exhibits rates that are either @xmath94 or @xmath95 depending on the number of users present .",
    "the free flow sojourn time is @xmath96 .",
    "assume @xmath97 , @xmath98 and @xmath99 .",
    "we now describe the dynamics of the system .",
    "see also figure  [ fig : example1 ] .",
    "( 3.75,22.5 ) ",
    "( 5.25,0 ) ; ( 1,0 ) ",
    "( 2.5,15 ) ",
    "( 3,7.5 ) ",
    "( 3.75,0 ) ; ( 0,0 ) ",
    "( 0,30) ( 1,15 ) ",
    "( 2.5,0 ) ; ( , 0 )  ( , 0 ) node[right ] @xmath0 ; ( -0.1,0 ) ",
    "( -0.1 , ) node[right ] work ; ( 0,0)(0,32 ) node[right ] @xmath100 ; ( 1,0)(1,30 ) node[right ] @xmath101 ; ( 3,0)(3,30 ) node[right ] @xmath102 ;    ( 2.5,0)(2.5,-5 ) node[below ] @xmath103 ; ( 3.75,0)(3.75,-8 ) node[below ] @xmath104 ; ( 5.25,0)(5.25,-5 ) node[below ] @xmath105 ;    during the time interval @xmath106 , @xmath107 and the first user is being served at rate @xmath108 . by time",
    "@xmath109 the remaining service required by that user is @xmath108 .",
    "at time @xmath109 , the number of users in the system , @xmath1 , grows to @xmath110 and the rate of service to each user is reduced to @xmath111 .",
    "this means that without a further arrival causing further slowdown , user @xmath38 is due to leave at time @xmath112 . since @xmath113 ,",
    "this is indeed the case . at @xmath112 ,",
    "@xmath1 changes from @xmath110 to @xmath38 . by that time",
    ", the remaining service required by user @xmath110 is @xmath108",
    ". then during the time interval @xmath114 user @xmath110 is served at rate @xmath108 reducing the remaining service of that user to @xmath115 . at time",
    "@xmath116 , user @xmath93 joins , increasing @xmath1 back to @xmath110 and reducing the service rate again to @xmath111 .",
    "user @xmath110 then leaves at time @xmath117 and as can be verified using the same types of simple calculations , user @xmath93 finally leaves at time @xmath118 .",
    "observe that for this example , the order of events is : @xmath119 this then implies that for this schedule , @xmath120",
    "we now investigate the relationship between arrivals and departures , induced by the linear slowdown dynamics .",
    "[ lemma_departure_function ] equation can be expressed as @xmath121 or alternatively , @xmath122 with the matrices @xmath123 and @xmath124 defined as follows : @xmath125    we manipulate to get , @xmath126\\}dt\\\\   & = ( \\beta+\\alpha)(d_i - a_i)-\\alpha\\sum_{j=1}^n\\left(d_i\\wedge d_j - a_i\\vee a_j\\right)^{+ }   \\\\ & = ( \\beta+\\alpha)(d_i - a_i ) - \\alpha\\sum_{j=1}^{i-1}\\left(d_i\\wedge d_j - a_i\\vee a_j\\right)^{+ } -\\alpha(d_i - a_i ) - \\alpha \\sum_{j = i+1}^n \\left(d_i\\wedge d_j - a_i\\vee a_j\\right)^{+}. \\\\ & = \\beta(d_i - a_i ) - \\alpha\\sum_{j=1}^{i-1}\\left(d_i\\wedge d_j - a_i\\vee a_j\\right)^{+ } - \\alpha \\sum_{j = i+1}^n \\left(d_i\\wedge d_j - a_i\\vee a_j\\right)^{+}.\\end{aligned}\\ ] ] where in the third step we have used the fact that @xmath61 for the term corresponding to @xmath127 .",
    "we now use the fact that @xmath29 and @xmath46 are both ordered to get , @xmath128 now the summations @xmath129 and @xmath130 can be broken up as follows : @xmath131 combining the above we obtain : @xmath132 rearranging we obtain .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em",
    "the following observations are a consequence of proposition [ lemma_departure_function ] :    1 .",
    "consider some user @xmath17 arriving at time @xmath60 to an empty system , and departing at time @xmath19 to leave an empty system . in this case",
    "there are no other users effecting his sojourn time or rate .",
    "for such a user @xmath133 . in this case implies that @xmath134 as expected .",
    "the matrices @xmath135 and @xmath136 are lower and upper triangular , respectively , with a non - zero diagonal , and are therefore both non - singular .",
    "3 .   for the special cases @xmath137 and @xmath138 ( using the fact @xmath74 and @xmath75 ) : @xmath139 i.e. , @xmath140    the above structure suggests iterative algorithms for either determining @xmath29 based on @xmath46 or vice - versa . in both cases , @xmath88 and @xmath89",
    "are found as bi - products . as an aid to describing these algorithms ,",
    "define for @xmath141 and for a given @xmath29 ( respectively @xmath46 ) , the functions @xmath142 as follows , @xmath143 observe that in the evaluation of these functions , the arguments , @xmath144 or @xmath145 are only utilized for the coordinates indexed @xmath146 or @xmath147 respectively ( if @xmath137 or respectively @xmath138 these index lists are empty ) . further observe that stated in terms of @xmath148 or @xmath149 and given @xmath150 and @xmath151 , equations can be represented as , @xmath152 or alternatively , @xmath153 given the above we have two ( dual ) algorithms for determining the network dynamics .",
    "algorithm  1a finds the departure times based on arrival times .",
    "algorithm  1b finds the arrival times given the departure times .",
    "[ prop : alg1_complexity ] algorithm  1a finds the unique solution @xmath46 to equations , given  @xmath29 . similarly algorithm  1b finds a unique solution @xmath29 to the equations , given @xmath46 .",
    "both algorithms require at most @xmath79 steps in each of which is evaluated .",
    "* input * : @xmath154 such that @xmath155 + * output * : @xmath156 , @xmath157 and @xmath158    init @xmath159 init @xmath160 set @xmath161 ( taking @xmath162 ) compute @xmath163 increment @xmath164 compute @xmath163 set @xmath165 set @xmath166 set @xmath167 @xmath168 * return * @xmath169    * input * : @xmath170 such that @xmath171 + * output * : @xmath172 , @xmath157 and @xmath158    init @xmath159 init @xmath160 set @xmath173 ( taking @xmath174 ) compute @xmath175 decrement @xmath176 compute @xmath175 set @xmath177 set @xmath178 set @xmath179 * return * @xmath180      as described in the introduction , optimizing when @xmath23 or @xmath26 can be done efficiently . for the case @xmath23 , all that is needed is to schedule arrivals so that each departure time , @xmath19 is exactly at @xmath20 .",
    "this achieves zero costs .",
    "such a schedule is simply obtained by running algorithm  1b with input @xmath181 .",
    "this immediately leads to the following corollary of proposition  [ prop : alg1_complexity ] :    [ thm : efficientgammazero ] for the special case @xmath23 there is an efficient polynomial time algorithm that finds the unique optimal schedule , @xmath182 , achieving @xmath183 .",
    "for the case of large @xmath27 it is sensible to consider a classic schedule where users do nt overlap : @xmath184 this poses the problem as a classic single machine scheduling problem with due dates ( see for example @xcite or @xcite ) .",
    "this implies that the total costs due to sojourn times is at the minimal possible value @xmath185 and the costs due to deviations from ideal departure times is , @xmath186 for any finite @xmath27 this does not necessarily minimize , but as @xmath187 it is a sensible approximation .",
    "i.e. for large @xmath27 the optimal schedule is approximated by the solution of the following convex quadratic program : @xmath188    as for the case @xmath23 , the above quadratic program can be efficiently solved using any standard convex quadratic programming method .",
    "denote the optimizer by @xmath189 .",
    "having the schedules @xmath182 and @xmath189 for the cases @xmath23 and @xmath190 respectively , we are motivated to suggest a set of potential ( initial ) guesses for the optimal schedule for arbitrary @xmath27 .",
    "let @xmath191 be some integer specifying the number of initial guesses .",
    "then the set of initial guesses lie on the segment interpolating @xmath182 and @xmath189 : @xmath192 when @xmath193 or equals @xmath194 if @xmath195 .",
    "we shall use the @xmath196 points of @xmath197 as initial guess points for the optimization heuristics that we present in the sequel .",
    "this is a sensible choice since every set of due dates @xmath198 exhibits some contour in @xmath199 , parametrized by @xmath27 , corresponding to the optimal schedules ( for each @xmath27 ) .",
    "the end points of this contour are @xmath182 and @xmath189 which we can efficiently find .",
    "thus for @xmath200 $ ] , the points @xmath201 constitute a linear approximation of this contour . in cases where the contour is almost not curved we have that the optimal value lies very near to the linear approximation .",
    "in other cases , this is simply a set of initial guesses , yet possibly a sensible one .",
    "our key observation in this section is that the search region @xmath199 can be partitioned into polytopes indexed by @xmath150 , where over each such polytope , the objective is of a convex quadratic form .",
    "this yields @xmath202 convex quadratic problems , each of which ( individually ) can be solved efficiently .",
    "an immediate exhaustive - search algorithm is then to solve all of the problems so as to find the minimising one .",
    "this yields a finite - time exact solution and is a sensible choice for small @xmath16 ( e.g. @xmath203 ) .",
    "but since , @xmath204 solving all convex problems is not a viable method for non - small @xmath16 .",
    "we thus also specify a _",
    "local - search _ algorithm which searches elements of @xmath86 by moving across neighbouring polytopes until finding a local optimum .",
    "the following proposition is key :    the region @xmath199 can be partitioned into polytopes indexed by @xmath150 , and denoted @xmath205_i\\leq a_{k_i+1},~ i \\in { \\cal",
    "n } \\right\\rbrace , \\ ] ] where @xmath206 and @xmath207 with @xmath135 and @xmath136 based on @xmath88 are specified by proposition  [ lemma_departure_function ] .",
    "then for @xmath208 the objective function is convex and is given by , @xmath209 with , @xmath210    the results of proposition  [ lemma_departure_function ] show that every @xmath150 specifies matrices @xmath136 and @xmath135 such that , @xmath211 .",
    "this holds with constant @xmath212 and @xmath213 for all @xmath29 and @xmath46 for which @xmath88 as defined in is fixed .",
    "the polytope @xmath214 specifies this exactly by describing the set of arrival points for which the specific ordering of departures within arrivals is given by @xmath88 .",
    "since for all @xmath215 the affine relationship between @xmath29 and @xmath46 holds with the same @xmath212 and @xmath213 the cost , , can be explicitly represented in terms of @xmath29 : @xmath216 this yields @xmath217 , @xmath218 and the constant term , @xmath219 .",
    "finally , since @xmath217 is a gram matrix , it is positive semi - definite .",
    "hence the objective is convex .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em      we are now faced with a family of convex quadratic programs . for each @xmath150 , denote @xmath220 to be the cost associated with @xmath88 then , @xmath221    note that while the constant term @xmath222 is not required for finding the solution of @xmath223 , it is needed for comparing the outcomes of the quadratic programs associated with different elements of @xmath86 .",
    "indeed the most basic use of @xmath223 is for an exhaustive search algorithm which finds the global optimal schedule in finite time .",
    "this is summarised in algorithm  2 .",
    "* input * : model parameters only ( @xmath224 and @xmath27 ) + * output * : @xmath225 ( global optimum )    init @xmath226 solve @xmath223 with optimiser @xmath29 and optimum @xmath227 set @xmath228 set @xmath229 * return * @xmath230    the virtue of algorithm  2 is that it finds the optimal schedule in finite time . but this is done by solving an exponential ( in @xmath16 ) number of convex @xmath231 problems , so for non - small @xmath16 it is nt a sensible algorithm .",
    "hence we now introduce a search heuristic .      in this section",
    "we introduce a heuristic search aimed at finding a local minimum by searching on neighbouring regions .",
    "the search procedure solves the qp over neighbouring elements of @xmath232 by changing a single coordinate of @xmath233 at a time .",
    "we prove that this procedure converges to a local minimum ; yet this may possibly take an exponential number of steps in the worst case .",
    "given a solution @xmath234 of @xmath235 we define the following two sets of indices : @xmath236_j= a_{k_j+1 } \\big\\rbrace , \\\\",
    "{ \\cal i}_2(\\mathbf{a},\\ , \\mathbf{k})&:=\\big\\lbrace j\\in { \\cal n } \\,:\\ , a_{k_{j } }",
    "= [ \\theta_{\\mathbf k }",
    "\\mathbf{a}+{\\boldsymbol \\eta}_{\\mathbf k } ] _ { j }   \\big\\rbrace . \\ ] ] noting that @xmath237_i$ ] , and recalling that @xmath64 is index of the maximal arrival time that is less than or equal to @xmath19 we have that if @xmath238 then the optimal solution of @xmath235 exhibits @xmath239 as an active constraint .",
    "hence a neighbouring region to the constraint set @xmath214 is @xmath240 where @xmath241 on all coordinates except for @xmath17 where it is equal to @xmath242 .",
    "similarly if @xmath243 then @xmath244 as an active constraint . in this case , @xmath245 is set to equal @xmath233 on all co - ordinates except for @xmath17 where it is set to equal @xmath246 .",
    "thus for every element of @xmath247 and @xmath248 we have a well defined neighbouring region .",
    "defining now the sets of neighbouring regions to @xmath214 by @xmath249 we have the following local search algorithm :    * input * : @xmath233 + * output * : @xmath225 and @xmath250    solve @xmath223 with optimiser @xmath29 and optimum @xmath227 init @xmath229 init @xmath228 solve @xmath251 with optimiser @xmath29 and optimum @xmath227 @xmath252 * then * restart algorithm with @xmath253 solve @xmath251 with optimiser @xmath29 and optimum @xmath227 @xmath252 * then * restart algorithm with @xmath253 * return * @xmath230    algorithm 3 converges to a local minimum for any initial vector @xmath233 .    every step of the algorithm can only improve the objective function , since @xmath252 is the condition for the change of @xmath233 , hence the algorithm can not go back to a region which it has already visited .",
    "furthermore , there is a finite number of regions which means the algorithm terminates in a finite number of steps .",
    "if for some @xmath254 which is the solution of @xmath255 there are no improvements in any of the neighbouring regions the algorithm stops at a local minimum . this can be either due to no active constraints to @xmath255 ( an interior point ) or due to the fact that the neighbouring quadratic programs do not improve on the solution of @xmath255 .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em",
    "in this section we put forward algorithms 4 and 5 that together form a coordinate pivot iteration procedure .",
    "we first describe how the dynamics presented in sections [ sec : model ] and [ sec : optregion ] can be used to find a global minimum with respect to a single coordinate @xmath256 ( user ) when all other coordinates are fixed .",
    "we call this procedure a _ global search over a single coordinate _ @xmath257 .    the computational complexity of such a procedure is shown to be at most @xmath258 .",
    "we then utilise this procedure to define a coordinate pivot iteration algorithm , that performs optimization cycles on all of the coordinates until no improvement can be made .    to understand the main idea consider figure  [ fig : departure_arrival_xx ]  ( a ) .",
    "this figure corresponds to an example with @xmath259 , @xmath260 and @xmath261 . here",
    "the arrival times @xmath262 are fixed at @xmath263 and the arrival time of user @xmath264 ( denoted also @xmath34 ) is allowed to vary .",
    "the ( horizontal ) blue dotted lines denote the fixed arrival times @xmath262 .",
    "the thin blue curves correspond to the departure times @xmath265 .",
    "the thick green dotted and solid curves correspond to the arrival and departure time of user @xmath38 respectively .",
    "when @xmath34 is small enough or large enough , it is seen that user @xmath38 does not affect the other users . but otherwise , user @xmath38 interacts with the other users and potentially modifies their departure times .",
    "( , )  ( , ) node[right ] @xmath266 ; ( , )  ( , ) ; in -0.5,0,0.5 at ( , ) [ below ] ; in 0,1 at ( , ) [ left ] ;    ( -0.5,-0.5) ( -0.1621,-0.1621) ( -0.1491,-0.1491) ( -0.1361,-0.1361) ( -0.1231,-0.1231) ( -0.1101,-0.1101) ( -0.0971,-0.0971) ( -0.0841,-0.0841) ( -0.0711,-0.0711) ( -0.0581,-0.0581) ( -0.0451,-0.0451) ( -0.0321,-0.0321) ( -0.0191,-0.0191) ( -0.0061,-0.0061) ( 0.0069,0.0069) ( 0.0199,0.0199) ( 0.0329,0.0329) ( 0.0459,0.0459) ( 0.0589,0.0589) ( 0.0719,0.0719) ( 0.0849,0.0849) ( 0.0979,0.0979) ( 0.1109,0.1109) ( 0.1239,0.1239) ( 0.1369,0.1369) ( 0.1499,0.1499) ( 0.1629,0.1629) ( 0.1759,0.1759) ( 0.1889,0.1889) ( 0.2019,0.2019) ( 0.2149,0.2149) ( 0.2279,0.2279) ( 0.2409,0.2409) ( 0.2539,0.2539) ( 0.2669,0.2669) ( 0.2799,0.2799) ( 0.2929,0.2929) ( 0.3059,0.3059) ( 0.3189,0.3189) ( 0.3319,0.3319) ( 0.3449,0.3449) ( 0.3579,0.3579) ( 0.3709,0.3709) ( 0.3839,0.3839) ( 0.3969,0.3969) ( 0.4099,0.4099) ( 0.4229,0.4229) ( 0.4359,0.4359) ( 0.4489,0.4489) ( 0.4619,0.4619) ( 0.4749,0.4749) ( 0.4879,0.4879) ( 0.5009,0.5009) ( 0.5139,0.5139) ( 0.5269,0.5269) ( 0.5399,0.5399) ( 0.5529,0.5529) ( 0.5659,0.5659) ( 0.5789,0.5789) ( 0.5919,0.5919) ( 0.6049,0.6049) ( 0.6179,0.6179) ( 0.6309,0.6309) ( 0.6439,0.6439) ( 0.6569,0.6569) ( 0.6699,0.6699) ( 0.6829,0.6829) ( 0.6959,0.6959) ( 0.7089,0.7089) ( 0.7219,0.7219) ( 0.7349,0.7349) ( 0.7479,0.7479) ( 0.7609,0.7609) ( 0.7739,0.7739) ( 0.7869,0.7869) ( 0.7999,0.7999 ) ;    ( -0.5,0.05 )  ( 0.8,0.05 ) ;    ( -0.5,0.15 )  ( 0.8,0.15 ) ;    ( -0.5,0.45 )  ( 0.8,0.45 ) ;    ( -0.5,-0.3) ( -0.1621,0.0379) ( -0.1491,0.05128571) ( -0.1361,0.06985714) ( -0.1231,0.08842857) ( -0.1101,0.107) ( -0.0971,0.12557143) ( -0.0841,0.14414286) ( -0.0711,0.17225) ( -0.0581,0.20475) ( -0.0451,0.23725) ( -0.0321,0.26975) ( -0.0191,0.30225) ( -0.0061,0.33475) ( 0.0069,0.36725) ( 0.0199,0.39975) ( 0.0329,0.43225) ( 0.0459,0.509) ( 0.0589,0.54555) ( 0.0719,0.53905) ( 0.0849,0.53519375) ( 0.0979,0.55063125) ( 0.1109,0.56606875) ( 0.1239,0.58150625) ( 0.1369,0.59694375) ( 0.1499,0.61238125) ( 0.1629,0.60846875) ( 0.1759,0.60440625) ( 0.1889,0.60034375) ( 0.2019,0.59628125) ( 0.2149,0.59221875) ( 0.2279,0.58815625) ( 0.2409,0.58409375) ( 0.2539,0.58003125) ( 0.2669,0.57596875) ( 0.2799,0.57337449) ( 0.2929,0.57248397) ( 0.3059,0.58309621) ( 0.3189,0.59370845) ( 0.3319,0.6043207) ( 0.3449,0.61493294) ( 0.3579,0.62554519) ( 0.3709,0.63615743) ( 0.3839,0.64676968) ( 0.3969,0.65985714) ( 0.4099,0.67842857) ( 0.4229,0.697) ( 0.4359,0.71557143) ( 0.4489,0.73414286) ( 0.4619,0.74251429) ( 0.4749,0.74994286) ( 0.4879,0.75737143) ( 0.5009,0.7648) ( 0.5139,0.77222857) ( 0.5269,0.77965714) ( 0.5399,0.78708571) ( 0.5529,0.79451429) ( 0.5659,0.80194286) ( 0.5789,0.80937143) ( 0.5919,0.8168) ( 0.6049,0.82422857) ( 0.6179,0.83165714) ( 0.6309,0.83908571) ( 0.6439,0.84651429) ( 0.6569,0.8569) ( 0.6699,0.8699) ( 0.6829,0.8829) ( 0.6959,0.8959) ( 0.7089,0.9089) ( 0.7219,0.9219) ( 0.7349,0.9349) ( 0.7479,0.9479) ( 0.7609,0.9609) ( 0.7739,0.9739) ( 0.7869,0.9869) ( 0.7999,0.9999 ) ;    ( -0.5,0.2928571) ( -0.1621,0.2928571) ( -0.1491,0.2934082) ( -0.1361,0.3013673) ( -0.1231,0.3093265) ( -0.1101,0.3172857) ( -0.0971,0.3252449) ( -0.0841,0.3332041) ( -0.0711,0.34525) ( -0.0581,0.3591786) ( -0.0451,0.3731071) ( -0.0321,0.3870357) ( -0.0191,0.4009643) ( -0.0061,0.4148929) ( 0.0069,0.4288214) ( 0.0199,0.44275) ( 0.0329,0.4616875) ( 0.0459,0.51925) ( 0.0589,0.5233) ( 0.0719,0.4843) ( 0.0849,0.448825) ( 0.0979,0.439075) ( 0.1109,0.429325) ( 0.1239,0.419575) ( 0.1369,0.409825) ( 0.1499,0.400075) ( 0.1629,0.390325) ( 0.1759,0.380575) ( 0.1889,0.370825) ( 0.2019,0.361075) ( 0.2149,0.351325) ( 0.2279,0.341575) ( 0.2409,0.331825) ( 0.2539,0.322075) ( 0.2669,0.312325) ( 0.2799,0.302575) ( 0.2929,0.2928571) ( 0.3059,0.2928571) ( 0.3189,0.2928571) ( 0.3319,0.2928571) ( 0.3449,0.2928571) ( 0.3579,0.2928571) ( 0.3709,0.2928571) ( 0.3839,0.2928571) ( 0.3969,0.2928571) ( 0.4099,0.2928571) ( 0.4229,0.2928571) ( 0.4359,0.2928571) ( 0.4489,0.2928571) ( 0.4619,0.2928571) ( 0.4749,0.2928571) ( 0.4879,0.2928571) ( 0.5009,0.2928571) ( 0.5139,0.2928571) ( 0.5269,0.2928571) ( 0.5399,0.2928571) ( 0.5529,0.2928571) ( 0.5659,0.2928571) ( 0.5789,0.2928571) ( 0.5919,0.2928571) ( 0.6049,0.2928571) ( 0.6179,0.2928571) ( 0.6309,0.2928571) ( 0.6439,0.2928571) ( 0.6569,0.2928571) ( 0.6699,0.2928571) ( 0.6829,0.2928571) ( 0.6959,0.2928571) ( 0.7089,0.2928571) ( 0.7219,0.2928571) ( 0.7349,0.2928571) ( 0.7479,0.2928571) ( 0.7609,0.2928571) ( 0.7739,0.2928571) ( 0.7869,0.2928571) ( 0.7999,0.2928571 ) ;    ( -0.5,0.3928571) ( -0.1621,0.3928571) ( -0.1491,0.3930224) ( -0.1361,0.3954102) ( -0.1231,0.397798) ( -0.1101,0.4001857) ( -0.0971,0.4025735) ( -0.0841,0.4049612) ( -0.0711,0.41525) ( -0.0581,0.4291786) ( -0.0451,0.4431071) ( -0.0321,0.460051) ( -0.0191,0.479949) ( -0.0061,0.4998469) ( 0.0069,0.5197449) ( 0.0199,0.5396429) ( 0.0329,0.5616875) ( 0.0459,0.61925) ( 0.0589,0.63665) ( 0.0719,0.61715) ( 0.0849,0.6002937) ( 0.0979,0.6027312) ( 0.1109,0.6051687) ( 0.1239,0.6076062) ( 0.1369,0.6100437) ( 0.1499,0.6124813) ( 0.1629,0.5955687) ( 0.1759,0.5785062) ( 0.1889,0.5614437) ( 0.2019,0.5443812) ( 0.2149,0.5273188) ( 0.2279,0.5102562) ( 0.2409,0.4931938) ( 0.2539,0.4761313) ( 0.2669,0.4590687) ( 0.2799,0.4454321) ( 0.2929,0.4356959) ( 0.3059,0.4301245) ( 0.3189,0.4245531) ( 0.3319,0.4189816) ( 0.3449,0.4134102) ( 0.3579,0.4078388) ( 0.3709,0.4022673) ( 0.3839,0.3966959) ( 0.3969,0.3928571) ( 0.4099,0.3928571) ( 0.4229,0.3928571) ( 0.4359,0.3928571) ( 0.4489,0.3928571) ( 0.4619,0.3928571) ( 0.4749,0.3928571) ( 0.4879,0.3928571) ( 0.5009,0.3928571) ( 0.5139,0.3928571) ( 0.5269,0.3928571) ( 0.5399,0.3928571) ( 0.5529,0.3928571) ( 0.5659,0.3928571) ( 0.5789,0.3928571) ( 0.5919,0.3928571) ( 0.6049,0.3928571) ( 0.6179,0.3928571) ( 0.6309,0.3928571) ( 0.6439,0.3928571) ( 0.6569,0.3928571) ( 0.6699,0.3928571) ( 0.6829,0.3928571) ( 0.6959,0.3928571) ( 0.7089,0.3928571) ( 0.7219,0.3928571) ( 0.7349,0.3928571) ( 0.7479,0.3928571) ( 0.7609,0.3928571) ( 0.7739,0.3928571) ( 0.7869,0.3928571) ( 0.7999,0.3928571 ) ;    ( -0.5,0.65) ( -0.1621,0.65) ( -0.1491,0.65) ( -0.1361,0.65) ( -0.1231,0.65) ( -0.1101,0.65) ( -0.0971,0.65) ( -0.0841,0.65) ( -0.0711,0.65) ( -0.0581,0.65) ( -0.0451,0.65) ( -0.0321,0.6530153) ( -0.0191,0.6589847) ( -0.0061,0.6649541) ( 0.0069,0.6709235) ( 0.0199,0.6768929) ( 0.0329,0.6870125) ( 0.0459,0.73925) ( 0.0589,0.75665) ( 0.0719,0.73715) ( 0.0849,0.7206462) ( 0.0979,0.7260087) ( 0.1109,0.7313712) ( 0.1239,0.7367337) ( 0.1369,0.7420963) ( 0.1499,0.7474588) ( 0.1629,0.7412112) ( 0.1759,0.7348737) ( 0.1889,0.7285362) ( 0.2019,0.7221988) ( 0.2149,0.7158613) ( 0.2279,0.7095238) ( 0.2409,0.7031863) ( 0.2539,0.6968488) ( 0.2669,0.6905112) ( 0.2799,0.6870123) ( 0.2929,0.6867452) ( 0.3059,0.6899289) ( 0.3189,0.6931125) ( 0.3319,0.6962962) ( 0.3449,0.6994799) ( 0.3579,0.7026636) ( 0.3709,0.7058472) ( 0.3839,0.7090309) ( 0.3969,0.7129571) ( 0.4099,0.7185286) ( 0.4229,0.7241) ( 0.4359,0.7296714) ( 0.4489,0.7352429) ( 0.4619,0.7306143) ( 0.4749,0.7250429) ( 0.4879,0.7194714) ( 0.5009,0.7139) ( 0.5139,0.7083286) ( 0.5269,0.7027571) ( 0.5399,0.6971857) ( 0.5529,0.6916143) ( 0.5659,0.6860429) ( 0.5789,0.6804714) ( 0.5919,0.6749) ( 0.6049,0.6693286) ( 0.6179,0.6637571) ( 0.6309,0.6581857) ( 0.6439,0.6526143) ( 0.6569,0.65) ( 0.6699,0.65) ( 0.6829,0.65) ( 0.6959,0.65) ( 0.7089,0.65) ( 0.7219,0.65) ( 0.7349,0.65) ( 0.7479,0.65) ( 0.7609,0.65) ( 0.7739,0.65) ( 0.7869,0.65) ( 0.7999,0.65 ) ;    ( 0.05,-0.5 )  ( 0.05,1 ) ; ( 0.15,-0.5 )  ( 0.15,1 ) ; ( 0.45,-0.5 )  ( 0.45,1 ) ;    ( 0.293,-0.5 )  ( 0.293,1 ) ; ( 0.393,-0.5 )  ( 0.393,1 ) ; ( 0.65,-0.5 )  ( 0.65,1 ) ;    ( -0.15,-0.5 )  ( -0.15,1 ) ; ( -0.08,-0.5 )  ( -0.08,1 ) ; ( -0.0387,-0.5 )  ( -0.0387,1 ) ; ( 0.0329,-0.5 )  ( 0.0329,1 ) ; ( 0.04,-0.5 )  ( 0.04,1 ) ;    ( 0.083,-0.5 )  ( 0.083,1 ) ; ( 0.2738,-0.5 )  ( 0.2738,1 ) ;    ( 0.8,0.8 ) node[right , green ] @xmath267 ; ( 0.8,1 ) node[right , green ] @xmath268 ; ( 0.8,0.05 ) node[right , blue ] @xmath269 ; ( 0.8,0.283 ) node[right , blue ] @xmath270 ; ( 0.8,0.15 ) node[right , blue ] @xmath271 ; ( 0.8,0.393 ) node[right , blue ] @xmath272 ; ( 0.8,0.48 ) node[right , blue ] @xmath273 ; ( 0.8,0.65 ) node[right , blue ] @xmath274 ;    ( , )  ( , ) node[right ] @xmath266 ; ( , )  ( , ) ; in -0.5,0,0.5 at ( , ) [ below ] ; in 1,2 at ( , ) [ left ] ;    ( -0.5,1.602602) ( -0.4871,1.582128) ( -0.4741,1.561833) ( -0.4611,1.541875) ( -0.4481,1.522256) ( -0.4351,1.502974) ( -0.4221,1.48403) ( -0.4091,1.465425) ( -0.3961,1.447157) ( -0.3831,1.429228) ( -0.3701,1.411636) ( -0.3571,1.394382) ( -0.3441,1.377467) ( -0.3311,1.360889) ( -0.3181,1.34465) ( -0.3051,1.328748) ( -0.2921,1.313184) ( -0.2791,1.297959) ( -0.2661,1.283071) ( -0.2531,1.268522) ( -0.2401,1.25431) ( -0.2271,1.240436) ( -0.2141,1.226901) ( -0.2011,1.213703) ( -0.1881,1.200844) ( -0.1751,1.188322) ( -0.1621,1.176138) ( -0.1491,1.164785) ( -0.1361,1.160652) ( -0.1231,1.157346) ( -0.1101,1.154868) ( -0.0971,1.153218) ( -0.0841,1.152396) ( -0.0711,1.1649) ( -0.0581,1.185726) ( -0.0451,1.20944) ( -0.0321,1.242738) ( -0.0191,1.285839) ( -0.0061,1.332305) ( 0.0069,1.382133) ( 0.0199,1.435326) ( 0.0329,1.504574) ( 0.0459,1.762763) ( 0.0589,1.84041) ( 0.0719,1.727486) ( 0.0849,1.63266) ( 0.0979,1.638455) ( 0.1109,1.644987) ( 0.1239,1.652255) ( 0.1369,1.660259) ( 0.1499,1.668999) ( 0.1629,1.613784) ( 0.1759,1.558953) ( 0.1889,1.505008) ( 0.2019,1.451948) ( 0.2149,1.399775) ( 0.2279,1.348487) ( 0.2409,1.298084) ( 0.2539,1.248568) ( 0.2669,1.199937) ( 0.2799,1.160806) ( 0.2929,1.132053) ( 0.3059,1.130875) ( 0.3189,1.130005) ( 0.3319,1.129443) ( 0.3449,1.129188) ( 0.3579,1.129241) ( 0.3709,1.129601) ( 0.3839,1.130269) ( 0.3969,1.136921) ( 0.4099,1.156751) ( 0.4229,1.177332) ( 0.4359,1.198665) ( 0.4489,1.22075) ( 0.4619,1.213327) ( 0.4749,1.203303) ( 0.4879,1.193453) ( 0.5009,1.183774) ( 0.5139,1.174268) ( 0.5269,1.164935) ( 0.5399,1.155774) ( 0.5529,1.146785) ( 0.5659,1.137969) ( 0.5789,1.129326) ( 0.5919,1.120854) ( 0.6049,1.112556) ( 0.6179,1.104429) ( 0.6309,1.096475) ( 0.6439,1.088694) ( 0.6569,1.08998) ( 0.6699,1.099428) ( 0.6829,1.109214) ( 0.6959,1.119339) ( 0.7089,1.129801) ( 0.7219,1.140602) ( 0.7349,1.15174) ( 0.7479,1.163216) ( 0.7609,1.175031) ( 0.7739,1.187183) ( 0.7869,1.199674) ( 0.7999,1.212502 ) ;    ( 0.05 , )  ( 0.05 , ) ; ( 0.15 , )  ( 0.15 , ) ; ( 0.45 , )  ( 0.45 , ) ;    ( 0.293 , )  ( 0.293 , ) ; ( 0.393 , )  ( 0.393 , ) ; ( 0.65 , ) ",
    "( 0.65 , ) ;    ( -0.15 , ) ",
    "( -0.15 , ) ; ( -0.08 , )  ( -0.08 , ) ; ( -0.0387 , )  ( -0.0387 , ) ; ( 0.0329 , )  ( 0.0329 , ) ; ( 0.04 , )  ( 0.04 , ) ;    ( 0.083 , )  ( 0.083 , ) ; ( 0.2738 , )  ( 0.2738 , ) ;    ( 0.7,1.4 ) node[right , blue ] @xmath275 ;    as is further evident from figure  [ fig : departure_arrival_xx ]  ( a ) , the dynamics of the departure times are piecewise affine with breakpoints as marked by the vertical lines in the figure . in between these lines",
    ", the effect of changing @xmath34 on other quantities is affine . in between these breakpoints ,",
    "the objective function is piecewise convex ( quadratic ) .",
    "this property is illustrated in figure  [ fig : departure_arrival_xx ]  ( b ) where the objective is plotted as a function of @xmath34 .",
    "this property allows us to optimise globally over a single coordinate , utilizing the problem structure .",
    "the desired departure times used for the cost function in ( b ) were @xmath276 for @xmath277 .",
    "the global search over a single coordinate works by varying @xmath34 from @xmath278 to @xmath279 and in the process searches for the one - coordinate optimum .",
    "this is done with a finite number of steps because of the piecewise - affine dynamics .",
    "our algorithm incrementally computes the piecewise - affine coefficients within these steps .",
    "we call each step a `` breakpoint '' . the following types of breakpoints may occur :    * type 1a : * the arrival of @xmath257 overtakes the next arrival of any @xmath17 + ( solid black line ) .",
    "* type 1b : * the departure of any @xmath17 is overtaken by the arrival of @xmath257 + ( dotted black line ) .    * type 2a : * the departure of any @xmath17 overtakes any arrival + ( dashed red line ) .",
    "* type 2b : * the departure of any @xmath17 is overtaken by an arrival of @xmath280 + ( yellow dashed - dotted line ) .",
    "observe that in varying @xmath34 , breakpoints of type 1a and 1b occur exactly @xmath281 times each .",
    "less trivially , we have a bound on the number of type 2a and 2b breakpoints :    [ prop : cpi_breakpoints ] in executing the global search over a single coordinate @xmath257 , the total number of breakpoints is @xmath282 .    before presenting the proof",
    ", we present the details of the piecewise - affine dynamics and the details of the global search over a single coordinate @xmath257 algorithm .      in carrying out the global search over a single coordinate @xmath257 , we remove the restriction that arrival times are ordered .",
    "that is , the search region is extended from @xmath199 to a set not requiring such order @xmath283^n$ ] .",
    "this allows us to carry out a full search for the optimum with respect to a single user @xmath257 without the restriction @xmath284 $ ] .",
    "this broader search potentially enables bigger gains in the objective when integrating the algorithm within a search heuristic .",
    "further , any point @xmath285 can be mapped into a unique point @xmath286 where @xmath287 is an ordering operator . by lemma  [ lemma : optimal_order ]",
    "we have that @xmath288 .",
    "take @xmath289 as an initial arrival vector and suppose that we are optimising over user @xmath257 .",
    "let @xmath290 $ ] be the immediate search value of @xmath291 ( keeping the other arrival times fixed ) .",
    "for any such @xmath34 we define a corresponding permutation @xmath292 indicating the current order of arrivals , as well as the ordered arrival vector @xmath293 this vector can serve as input to algorithm  1a yielding a corresponding @xmath294 , @xmath295 and @xmath296 .",
    "furthermore , using we have the local piecewise - affine relationship , @xmath297.\\ ] ] that is , the coefficients of the departures between breakpoints depend on the permutation of the users as well as on the current order of their arrivals and departures . for brevity",
    "we omit the dependencies on @xmath34 , @xmath298 , @xmath299 and @xmath88 .",
    "manipulating we obtain , @xmath300 on every interval , the departure times @xmath19 are all affine and continuous w.r.t @xmath34 with the above coefficients , until a breakpoint ( of type 1a , 1b , 2a or 2b ) occurs .",
    "computing the time of the next breakpoint is easily done by considering the piecewise affine dynamics .",
    "potential breakpoints of types 1a and 1b are to occur at times @xmath0 where @xmath301 and @xmath302 , respectively .",
    "potential breakpoints of types 2a and 2b involving user @xmath17 are to occur at times @xmath303 and @xmath304 respectively .",
    "observing now that type 2a breakpoints may occur only when @xmath305 and type 2b breakpoints may occur only when @xmath306 we have that the next breakpoint occurs at , @xmath307 where @xmath308 ( type 1a breakpoints ) , @xmath309 ( termination ) and for @xmath310 : @xmath311 considering the time interval until the next breakpoints , @xmath312 $ ] we have that the total cost as a function of the arrival time @xmath313 $ ] of user @xmath257 is @xmath314 with derivative @xmath315 , and with the root @xmath316 , solving @xmath317 ( and often not lying within the interval @xmath312 $ ] ) : @xmath318 note that it is crucial to keep track of @xmath299 at every step in order to associate the correct ideal departure time to every user . in iterating over intervals",
    "we search for the minimal @xmath319 ( denoted @xmath250 ) as follows : if @xmath320 for all @xmath313 $ ] , then we continue to the next interval . otherwise , if @xmath321 and @xmath322 , then set @xmath323 and @xmath324 , and if @xmath325 and @xmath326 , then set @xmath327 and @xmath328 .    in this way",
    ", @xmath34 updates over intervals , of the form @xmath312 $ ] .",
    "prior to moving to the next interval we need to update the permutation variables @xmath329 , @xmath233 , and @xmath330 .",
    "denote the minimizing set of by @xmath331 and sequentially for every @xmath332 :    * if @xmath333 , then we update @xmath334 by changing the order between user @xmath257 and the next user @xmath335 , i.e. set @xmath336 and @xmath337 . in this case",
    ", there is no change in @xmath233 or @xmath330 .",
    "( type 1a breakpoints ) .",
    "* if @xmath338 , then the order @xmath299 does not change , but we update @xmath233 and @xmath330 : if @xmath339 , then update @xmath340 , followed by @xmath341 . if @xmath342 , then update @xmath343 , followed by @xmath344 .",
    "( all other types of breakpoints ) . * if @xmath345 , then the iteration is complete and no changes are required .    for any convex and differentiable cost functions , the first order condition yielding @xmath346 can be solved .",
    "for some elaborate functions this may also require a numerical procedure . if the late and early cost functions are not strictly convex ( for example affine ) , then computing @xmath346 can be skipped .",
    "if the cost function is piecewise affine , then only the sign of @xmath347 needs to be computed , and if it is negative check if the next point @xmath348 is a new minimum point or not .",
    "* input * : @xmath349 , @xmath256 , @xmath299 + * output * : @xmath225 and @xmath250    init @xmath350 init @xmath351 run * * alg.1a**@xmath352 @xmath353 init @xmath354 init @xmath355 set @xmath356 set @xmath357 set @xmath351 compute : @xmath358 , @xmath359 , @xmath360 , @xmath361 , and @xmath362 compute @xmath346 and @xmath363 set @xmath364 set @xmath323 set @xmath365 set @xmath327 set @xmath366 set @xmath337 where @xmath367 satisfies @xmath368 set @xmath336 set @xmath340 and @xmath341 set @xmath343 and @xmath369 * return * ( @xmath225 , @xmath250 )      in the following series of lemmata we analyse the complexity of algorithm 4 . in particular , we prove proposition [ prop : cpi_breakpoints ] , establishing bounds for the number of breakpoints of each type . throughout the analysis we continue denoting the coordinate being optimised by @xmath257 and the respective value by @xmath370 .",
    "keep in mind that @xmath371 , @xmath372 , @xmath64 , and @xmath66 are functions of @xmath34 and the initial unordered vector @xmath373 for every @xmath62 .",
    "we treat @xmath29 as the ordered vector as before .    [ lemma_coeff_decreasing ] for any @xmath62 such that @xmath374 , the coefficient @xmath375 and as a consequence @xmath376 is monotone non - increasing for every @xmath377 .",
    "[ lemma_coeff_changes ] for any permutation @xmath299 at the start of the global search on @xmath257 , the coefficient @xmath372 of any @xmath378 changes sign from strictly positive to strictly negative or vice versa at most @xmath379 times during the search .",
    "we now prove proposition  [ prop : cpi_breakpoints ] :    for any @xmath380 in the original permutation @xmath299 , the type  2a and  2b breakpoints occur at most @xmath381 times for every change of sign .",
    "this is because their departure time can only cross arrival times of later arrivals .",
    "according to lemma [ lemma_coeff_changes ] , the number of sign changes for any @xmath380 is at most @xmath379 .",
    "thus , the total number of breakpoints of type ( 2a or  2b ) is at most @xmath382 thus , adding up all types of breakpoints , we get that the search domain @xmath383 $ ] is broken up to at most @xmath384 intervals .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em    furthermore , we have the following bound for the complexity of algorithm  4 .    [ prop : alg4_complexity ] the computation complexity of algorithm 4 is at most @xmath258 .    in every interval step of a global search on a single coordinate",
    "there is a need to compute the coefficient vectors @xmath385 and @xmath386 .",
    "this is equivalent to calculating the departure times recursively using algorithm 1a . in proposition",
    "[ prop : alg1_complexity ] it was shown that the recursion requires at most @xmath79 steps .",
    "on top of this , in every one of these steps the actual computation requires summation of up to @xmath16 variables .",
    "now since the number of breakpoints intervals is bounded by @xmath282 we conclude the result .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em      in this subsection we illustrate how algorithm 4 can be applied to carry out standard coordinate pivot iteration ( cpi ) , see @xcite , p272 . in every iteration of the cpi algorithm ,",
    "the total cost function is minimized with respect to the arrival time of one user , when all other arrival times are fixed .",
    "this is then repeated for all users ; we call the iteration over all @xmath16 users a cpi cycle .",
    "the cpi algorithm stops when the total improvement in a cycle is smaller than some specified tolerance parameter , @xmath387 .",
    "note that in non - smooth cpi ( such as our case ) , cpi often stops when the total improvement is in - fact exactly @xmath388 .",
    "that is , @xmath389 is often not a significant parameter .",
    "a further comment is that our cpi algorithm utilizes algorithm  4 searching over the broader space , @xmath390 .",
    "we can thus improve the objective ( see lemma [ lemma : optimal_order ] ) by incorporating the ordering operator , @xmath391 , at the end of each cpi cycle .",
    "we add the following notations for the optimization procedure : let @xmath392 be the cycle number , @xmath393 the total cost at end of cycle , @xmath250 the global minimal total cost , and @xmath225 the global optimal arrival vector .    * input * : @xmath394 and @xmath389 + * output * : @xmath225 and @xmath250    init @xmath395 init @xmath396 init @xmath397 init @xmath398 set @xmath399 set @xmath400 run * * alg .",
    "4**@xmath401 @xmath402 set @xmath403 set @xmath404 set @xmath405 set @xmath406 * return * @xmath230    [ algo : optim1 ]    hinging upon the results of the previous section , we have :    the computation complexity of a single cpi cycle , i.e. conducting a line search on all coordinates , is at most @xmath407 .",
    "in proposition [ prop : alg4_complexity ] we established that for a single coordinate the complexity is at most @xmath258 .",
    "it is therefore immediate that the complexity of running the algorithm for every coordinate is at most @xmath407 .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em    note that while we have a polynomial time cpi algorithm , there is no guarantee that it converges to a local minimum since the objective function is not smooth . in fact",
    ", numerical experimentation suggests that this is typically the case when the number of users is not very small , i.e. , @xmath408 .",
    "nevertheless , experimentation has shown that cpi algorithm generally outputs an arrival vector that lies in the vicinity of the optimum .",
    "this motivates combining it with the neighbour search , algorithm  3 as discussed in the next section .",
    "we now utilise the problem structure and aforementioned algorithms to produce a combined heuristic .",
    "we use @xmath197 as in   for initial points . for each of these @xmath196 initial points",
    "we run a cpi ( global ) search followed by neighbour ( local ) search .",
    "the core principal is to use the cpi method in order to find a `` good '' initial polytope , or equivalently an arrival - departure permutation , and then to seek a local minimum using the neighbour search .",
    "* input * : model parameters only ( @xmath224 and @xmath27 ) + * output * : @xmath225 ( local optimum )    init @xmath226 run @xmath409 set @xmath410 run @xmath411 set @xmath412 and @xmath413 * return * @xmath230    we tested the combined heuristic algorithm  6 on a variety of problem instances and it appears to perform very well both in terms of running time and in finding what we believe is a global optimum . here",
    "we illustrate these results for one such problem instance .",
    "we take @xmath414 and @xmath415 ( in this case the maximal slowdown is of the order of @xmath416 independently of @xmath16 ) .",
    "we set @xmath55 as the @xmath16 quantiles of a normal distribution with mean @xmath388 and standard deviation @xmath108 .",
    "that is , there is a ideal departure profile centred around @xmath388 .",
    "it is expected that when using optimal schedules , more congestion will occur as @xmath16 increases and/or @xmath27 decreases .",
    "figure [ fig : opt_arrival_departure2 ] illustrates the dynamics of the obtained schedules as generated by the heuristic ( using @xmath417 and @xmath418 ) . in these plots",
    "arrival times of individual users are plotted on the top axis , marked by blue dots , shifted to the right by the free flow time ( @xmath419 ) .",
    "departure times are plotted on the bottom axis .",
    "users that do not experience any delay are then represented by lines that are exactly vertical .",
    "further , the more slanted the line , the more slowdown that the user experiences .",
    "the ideal departure times are marked by green stars .",
    "hence ideally the stars are to align with the red dots .",
    "this occurs exactly when @xmath23 , and approximately occurs for small  @xmath27 , for instance @xmath420 as in ( a ) and ( d ) .",
    "then as @xmath27 is increased , the optimal schedule is such that there is hardly any delay ( almost perfectly vertical lines ) , but in this case , users experience major deviations between departure times and the ideal values .    for @xmath421 , as presented in ( a)(c ) , we were indeed able to verify optimality using the exhaustive search algorithm  2 .",
    "for @xmath422 , as presented in ( d)(f ) we are not able to use the exhaustive search algorithm in any reasonable time . nevertheless , in this case , in addition to seeing qualitatively sensible results , experimentation showed that increasing @xmath196 does not modify the results .",
    "hence we believe that the obtained schedules are also optimal .    for @xmath423 , we were not able to find a case where the heuristic did not find the optimal schedule",
    ". further for large @xmath16 ( up to @xmath424 ) we see insensitivity with respect to @xmath196 ( the number of initial points ) as well as and also for other randomized initial points .",
    "this result was also robust to changes in all of the parameter values ( @xmath42 , @xmath10 , @xmath27 , and @xmath425 ) .",
    "this leads us to believe that our heuristic performs very well .",
    "results , comparing running times are reported in table  [ tbl : iter_compare ] where we consider the algorithm with a single initial point @xmath182 ( @xmath195 ) , and compare it to the exhaustive search given by algorithm 2 .",
    "for this table , we use the same problem data as described above , but scale the standard deviation by @xmath16 to be @xmath426 . for @xmath427 the combined heuristic converged to the global optimum as verified by the exhaustive search with a negligible number of computations .",
    "for example , for @xmath421 the heuristic method made @xmath428 core computations , i.e. solving a qp for a single cpi interval or ns polytope , in 3.28 seconds , while the exhaustive search had to solve @xmath429 quadratic programs and required about @xmath430 hours .",
    "clearly , for larger @xmath16 it is not feasible to run the exhaustive search while the combined heuristic is still very quick , as seen for up to @xmath422 in table  [ tbllife ] .",
    "( , )  ( , ) node[right ] @xmath431 ; ( , )  ( , ) node[right ] @xmath432 ; in -3,-2,-1,0,1,2,3 at ( , ) [ below ] ;    ( -1.5875571,)(-0.88602495 , ) ; ( -1.5073526,)(-0.69198188 , ) ; ( -1.4438297,)(-0.56310801 , ) ; ( -1.3869439,)(-0.4542124 , ) ; ( -1.3214492,)(-0.34841317 , ) ; ( -1.2524939,)(-0.25380006 , ) ; ( -1.1844134,)(-0.16672851 , ) ; ( -1.0902795,)(-0.0645832 , ) ; ( -0.9723277,)(0.04411745 , ) ; ( -0.8188977,)(0.16407181 , ) ; ( -0.6103866,)(0.30190121 , ) ; ( -0.3115126,)(0.46794233 , ) ; ( 0.1138602,)(0.66475661 , ) ; ( 0.4367769,)(0.81299596 , ) ; ( 0.746287,)(0.97317648 , ) ;    in ( -1.5875571 , ) , ( -1.5073526 , ) , ( -1.4438297 , ) , ( -1.3869439 , ) , ( -1.3214492 , ) , ( -1.2524939 , ) , ( -1.1844134 , ) , ( -1.0902795 , ) , ( -0.9723277 , ) , ( -0.8188977 , ) , ( -0.6103866 , ) , ( -0.3115126 , ) , ( 0.1138602 , ) , ( 0.4367769 , ) , ( 0.746287 , ) at ;    in ( -0.88602495 , ) , ( -0.69198188 , ) , ( -0.56310801 , ) , ( -0.4542124 , ) , ( -0.34841317 , ) , ( -0.25380006 , ) , ( -0.16672851 , ) , ( -0.0645832 , ) , ( 0.04411745 , ) , ( 0.16407181 , ) , ( 0.30190121 , ) , ( 0.46794233 , ) , ( 0.66475661 , ) , ( 0.81299596 , ) , ( 0.97317648 , ) at ;    in ( -0.76706027 , ) , ( -0.57517469 , ) , ( -0.44357328 , ) , ( -0.33724488 , ) , ( -0.24438821 , ) , ( -0.15931968 , ) , ( -0.07865534 , ) , ( 0 , ) , ( 0.07865534 , ) , ( 0.15931968 , ) , ( 0.24438821 , ) , ( 0.33724488 , ) , ( 0.44357328 , ) , ( 0.57517469 , ) , ( 0.76706027 , ) at ;    ( , )  ( , ) node[right ] @xmath431 ; ( , )  ( , ) node[right ] @xmath432 ; in -3,-2,-1,0,1,2,3 at ( , ) [ below ] ;    ( -1.55712068,)(-1.2680003 , ) ; ( -1.44345342,)(-1.0866241 , ) ; ( -1.35080819,)(-0.9466784 , ) ; ( -1.23855835,)(-0.7992043 , ) ; ( -1.06881044,)(-0.5895157 , ) ; ( -0.94504264,)(-0.4465012 , ) ; ( -0.76603086,)(-0.2674814 , ) ; ( -0.48430565,)(-0.0062453 , ) ; ( -0.26790878,)(0.1786758 , ) ; ( -0.08653336,)(0.3241266 , ) ; ( 0.20068554,)(0.5629188 , ) ; ( 0.41262452,)(0.7346174 , ) ; ( 0.73240807,)(0.9887159 , ) ; ( 0.99384417,)(1.1912356 , ) ; ( 1.30998006,)(1.4300715 , ) ;    in ( -1.55712068 , ) , ( -1.44345342 , ) , ( -1.35080819 , ) , ( -1.23855835 , ) , ( -1.06881044 , ) , ( -0.94504264 , ) , ( -0.76603086 , ) , ( -0.48430565 , ) , ( -0.26790878 , ) , ( -0.08653336 , ) , ( 0.20068554 , ) , ( 0.41262452 , ) , ( 0.73240807 , ) , ( 0.99384417 , ) , ( 1.30998006 , ) at ;    in ( -1.2680003 , ) , ( -1.0866241 , ) , ( -0.9466784 , ) , ( -0.7992043 , ) , ( -0.5895157 , ) , ( -0.4465012 , ) , ( -0.2674814 , ) , ( -0.0062453 , ) , ( 0.1786758 , ) , ( 0.3241266 , ) , ( 0.5629188 , ) , ( 0.7346174 , ) , ( 0.9887159 , ) , ( 1.1912356 , ) , ( 1.4300715 , ) at ;    in ( -0.76706027 , ) , ( -0.57517469 , ) , ( -0.44357328 , ) , ( -0.33724488 , ) , ( -0.24438821 , ) , ( -0.15931968 , ) , ( -0.07865534 , ) , ( 0 , ) , ( 0.07865534 , ) , ( 0.15931968 , ) , ( 0.24438821 , ) , ( 0.33724488 , ) , ( 0.44357328 , ) , ( 0.57517469 , ) , ( 0.76706027 , ) at ;    ( , )  ( , ) node[right ] @xmath431 ; ( , )  ( , ) node[right ] @xmath432 ; in -3,-2,-1,0,1,2,3 at ( , ) [ below ] ;    ( -2.9550767,)(-2.935000582 , ) ; ( -2.3113216,)(-2.23341924 , ) ; ( -1.9351066,)(-1.834742404 , ) ; ( -1.6160803,)(-1.496669664 , ) ; ( -1.2333256,)(-1.113902574 , ) ; ( -0.8348559,)(-0.71542603 , ) ; ( -0.4967773,)(-0.377347325 , ) ; ( -0.1140166,)(0.005413805 , ) ; ( 0.284459,)(0.403889551 , ) ; ( 0.6225377,)(0.741961302 , ) ; ( 1.0052983,)(1.124710001 , ) ; ( 1.403774,)(1.523173666 , ) ; ( 1.7420466,)(1.842393374 , ) ; ( 2.1247953,)(2.203583592 , ) ; ( 2.84228,)(2.861555608 , ) ;    in ( -2.9550767 , ) , ( -2.3113216 , ) , ( -1.9351066 , ) , ( -1.6160803 , ) , ( -1.2333256 , ) , ( -0.8348559 , ) , ( -0.4967773 , ) , ( -0.1140166 , ) , ( 0.284459 , ) , ( 0.6225377 , ) , ( 1.0052983 , ) , ( 1.403774 , ) , ( 1.7420466 , ) , ( 2.1247953 , ) , ( 2.84228 , ) at ;    in ( -2.935000582 , ) , ( -2.23341924 , ) , ( -1.834742404 , ) , ( -1.496669664 , ) , ( -1.113902574 , ) , ( -0.71542603 , ) , ( -0.377347325 , ) , ( 0.005413805 , ) , ( 0.403889551 , ) , ( 0.741961302 , ) , ( 1.124710001 , ) , ( 1.523173666 , ) , ( 1.842393374 , ) , ( 2.203583592 , ) , ( 2.861555608 , ) at ;    in ( -0.76706027 , ) , ( -0.57517469 , ) , ( -0.44357328 , ) , ( -0.33724488 , ) , ( -0.24438821 , ) , ( -0.15931968 , ) , ( -0.07865534 , ) , ( 0 , ) , ( 0.07865534 , ) , ( 0.15931968 , ) , ( 0.24438821 , ) , ( 0.33724488 , ) , ( 0.44357328 , ) , ( 0.57517469 , ) , ( 0.76706027 , ) at ;    ( , )  ( , ) node[right ] @xmath431 ; ( , )  ( , ) node[right ] @xmath432 ; in -3,-2,-1,0,1,2,3 at ( , ) [ below ] ;    ( -1.82882604,)(-1.14646463 , ) ; ( -1.77234903,)(-0.99971466 , ) ; ( -1.73562712,)(-0.90657558 , ) ; ( -1.70446545,)(-0.82962533 , ) ; ( -1.68077652,)(-0.77237834 , ) ; ( -1.65651796,)(-0.71672635 , ) ; ( -1.63728509,)(-0.67362885 , ) ; ( -1.61591005,)(-0.62805564 , ) ; ( -1.5982364,)(-0.59238323 , ) ; ( -1.57818441,)(-0.55264384 , ) ; ( -1.5580292,)(-0.51480862 , ) ; ( -1.54158139,)(-0.48511135 , ) ; ( -1.52155767,)(-0.45015468 , ) ; ( -1.50105204,)(-0.41620275 , ) ; ( -1.48418571,)(-0.38969522 , ) ; ( -1.46293258,)(-0.35697216 , ) ; ( -1.44101228,)(-0.32493479 , ) ; ( -1.41815844,)(-0.29321229 , ) ; ( -1.39936684,)(-0.26786421 , ) ; ( -1.37502339,)(-0.23646469 , ) ; ( -1.34936164,)(-0.20502001 , ) ; ( -1.32222114,)(-0.17341807 , ) ; ( -1.29896446,)(-0.14761939 , ) ; ( -1.26918922,)(-0.11546214 , ) ; ( -1.23736693,)(-0.08281329 , ) ; ( -1.20324052,)(-0.04955084 , ) ; ( -1.16651399,)(-0.0155448 , ) ; ( -1.12684445,)(0.01934528 , ) ; ( -1.09163811,)(0.04921232 , ) ; ( -1.04608224,)(0.08619296 , ) ; ( -0.99626602,)(0.12455718 , ) ; ( -0.94155042,)(0.16451801 , ) ; ( -0.88117213,)(0.20631837 , ) ; ( -0.81421307,)(0.25023775 , ) ; ( -0.73956096,)(0.29660064 , ) ; ( -0.65585768,)(0.34578711 , ) ; ( -0.561431,)(0.39824637 , ) ; ( -0.45420313,)(0.45451446 , ) ; ( -0.33156659,)(0.51523741 , ) ; ( -0.19021315,)(0.58120235 , ) ; ( -0.06527597,)(0.63759884 , ) ; ( 0.06991414,)(0.69716942 , ) ; ( 0.17731494,)(0.74428202 , ) ; ( 0.29017729,)(0.7944517 , ) ; ( 0.407513,)(0.84851728 , ) ; ( 0.50232918,)(0.89431988 , ) ; ( 0.61020135,)(0.9490498 , ) ; ( 0.71264489,)(1.00425512 , ) ; ( 0.8500828,)(1.08372289 , ) ; ( 1.02968823,)(1.19772885 , ) ;    in ( -1.82882604 , ) , ( -1.77234903 , ) , ( -1.73562712 , ) , ( -1.70446545 , ) , ( -1.68077652 , ) , ( -1.65651796 , ) , ( -1.63728509 , ) , ( -1.61591005 , ) , ( -1.5982364 , ) , ( -1.57818441 , ) , ( -1.5580292 , ) , ( -1.54158139 , ) , ( -1.52155767 , ) , ( -1.50105204 , ) , ( -1.48418571 , ) , ( -1.46293258 , ) , ( -1.44101228 , ) , ( -1.41815844 , ) , ( -1.39936684 , ) , ( -1.37502339 , ) , ( -1.34936164 , ) , ( -1.32222114 , ) , ( -1.29896446 , ) , ( -1.26918922 , ) , ( -1.23736693 , ) , ( -1.20324052 , ) , ( -1.16651399 , ) , ( -1.12684445 , ) , ( -1.09163811 , ) , ( -1.04608224 , ) , ( -0.99626602 , ) , ( -0.94155042 , ) , ( -0.88117213 , ) , ( -0.81421307 , ) , ( -0.73956096 , ) , ( -0.65585768 , ) , ( -0.561431 , ) , ( -0.45420313 , ) , ( -0.33156659 , ) , ( -0.19021315 , ) , ( -0.06527597 , ) , ( 0.06991414 , ) , ( 0.17731494 , ) , ( 0.29017729 , ) , ( 0.407513 , ) , ( 0.50232918 , ) , ( 0.61020135 , ) , ( 0.71264489 , ) , ( 0.8500828 , ) , ( 1.02968823 , ) at ;    in ( -1.14646463 , ) , ( -0.99971466 , ) , ( -0.90657558 , ) , ( -0.82962533 , ) , ( -0.77237834 , ) , ( -0.71672635 , ) , ( -0.67362885 , ) , ( -0.62805564 , ) , ( -0.59238323 , ) , ( -0.55264384 , ) , ( -0.51480862 , ) , ( -0.48511135 , ) , ( -0.45015468 , ) , ( -0.41620275 , ) , ( -0.38969522 , ) , ( -0.35697216 , ) , ( -0.32493479 , ) , ( -0.29321229 , ) , ( -0.26786421 , ) , ( -0.23646469 , ) , ( -0.20502001 , ) , ( -0.17341807 , ) , ( -0.14761939 , ) , ( -0.11546214 , ) , ( -0.08281329 , ) , ( -0.04955084 , ) , ( -0.0155448 , ) , ( 0.01934528 , ) , ( 0.04921232 , ) , ( 0.08619296 , ) , ( 0.12455718 , ) , ( 0.16451801 , ) , ( 0.20631837 , ) , ( 0.25023775 , ) , ( 0.29660064 , ) , ( 0.34578711 , ) , ( 0.39824637 , ) , ( 0.45451446 , ) , ( 0.51523741 , ) , ( 0.58120235 , ) , ( 0.63759884 , ) , ( 0.69716942 , ) , ( 0.74428202 , ) , ( 0.7944517 , ) , ( 0.84851728 , ) , ( 0.89431988 , ) , ( 0.9490498 , ) , ( 1.00425512 , ) , ( 1.08372289 , ) , ( 1.19772885 , ) at ;    in ( -1.03095825 , ) , ( -0.87993051 , ) , ( -0.78236324 , ) , ( -0.70785105 , ) , ( -0.64640261 , ) , ( -0.59341572 , ) , ( -0.54636791 , ) , ( -0.5037178 , ) , ( -0.46444975 , ) , ( -0.42785622 , ) , ( -0.39342255 , ) , ( -0.36076114 , ) , ( -0.32957152 , ) , ( -0.29961493 , ) , ( -0.27069754 , ) , ( -0.24265887 , ) , ( -0.21536365 , ) , ( -0.18869597 , ) , ( -0.16255486 , ) , ( -0.13685094 , ) , ( -0.11150392 , ) , ( -0.08644042 , ) , ( -0.06159239 , ) , ( -0.03689564 , ) , ( -0.01228863 , ) , ( 0.01228863 , ) , ( 0.03689564 , ) , ( 0.06159239 , ) , ( 0.08644042 , ) , ( 0.11150392 , ) , ( 0.13685094 , ) , ( 0.16255486 , ) , ( 0.18869597 , ) , ( 0.21536365 , ) , ( 0.24265887 , ) , ( 0.27069754 , ) , ( 0.29961493 , ) , ( 0.32957152 , ) , ( 0.36076114 , ) , ( 0.39342255 , ) , ( 0.42785622 , ) , ( 0.46444975 , ) , ( 0.5037178 , ) , ( 0.54636791 , ) , ( 0.59341572 , ) , ( 0.64640261 , ) , ( 0.70785105 , ) , ( 0.78236324 , ) , ( 0.87993051 , ) , ( 1.03095825 , ) at ;    ( , )  ( , ) node[right ] @xmath431 ; ( , )  ( , ) node[right ] @xmath432 ; in -3,-2,-1,0,1,2,3 at ( , ) [ below ] ;    ( -1.80831395,)(-1.5407740366 , ) ; ( -1.73559169,)(-1.4221760081 , ) ; ( -1.67740981,)(-1.3285556754 , ) ; ( -1.63298963,)(-1.2575656203 , ) ; ( -1.59559988,)(-1.1991669375 , ) ; ( -1.56032627,)(-1.1455667152 , ) ; ( -1.52209531,)(-1.0884658587 , ) ; ( -1.47929079,)(-1.0256488228 , ) ; ( -1.45222305,)(-0.986631627 , ) ; ( -1.41620396,)(-0.9369318 , ) ; ( -1.3797996,)(-0.8876246187 , ) ; ( -1.34161644,)(-0.8368773061 , ) ; ( -1.31104585,)(-0.7980010512 , ) ; ( -1.25723417,)(-0.7309025443 , ) ; ( -1.21888731,)(-0.6840365497 , ) ; ( -1.17981666,)(-0.6383731913 , ) ; ( -1.11935429,)(-0.5691692723 , ) ; ( -1.07362554,)(-0.5179333691 , ) ; ( -1.02880368,)(-0.4699451873 , ) ; ( -0.95873791,)(-0.3965822071 , ) ; ( -0.89348502,)(-0.3297962301 , ) ; ( -0.83701451,)(-0.2738661859 , ) ; ( -0.76593366,)(-0.2060510462 , ) ; ( -0.67629979,)(-0.1225988223 , ) ; ( -0.58643658,)(-0.0410011116 , ) ; ( -0.54067663,)(-0.0008756756 , ) ; ( -0.4431564,)(0.0834980898 , ) ; ( -0.35475281,)(0.1595106199 , ) ; ( -0.30326162,)(0.2034683076 , ) ; ( -0.22282614,)(0.270527066 , ) ; ( -0.14566946,)(0.3352935063 , ) ; ( -0.08856868,)(0.3825705627 , ) ; ( -0.02555164,)(0.4347458369 , ) ; ( 0.0629653,)(0.5075352937 , ) ; ( 0.11247248,)(0.5487023127 , ) ; ( 0.20189597,)(0.6223311962 , ) ; ( 0.26919447,)(0.6773934905 , ) ; ( 0.36152374,)(0.7523419165 , ) ; ( 0.43092766,)(0.8082692271 , ) ; ( 0.52995165,)(0.8874574317 , ) ; ( 0.60351463,)(0.9458951951 , ) ; ( 0.69317342,)(1.0162340611 , ) ; ( 0.79384568,)(1.0945454611 , ) ; ( 0.8774979,)(1.1589501547 , ) ; ( 0.97539756,)(1.2332985741 , ) ; ( 1.0833947,)(1.3150446519 , ) ; ( 1.15960723,)(1.3720438262 , ) ; ( 1.27042357,)(1.4546600683 , ) ; ( 1.38246486,)(1.5383177315 , ) ; ( 1.50762976,)(1.6326063826 , ) ;    in ( -1.80831395 , ) , ( -1.73559169 , ) , ( -1.67740981 , ) , ( -1.63298963 , ) , ( -1.59559988 , ) , ( -1.56032627 , ) , ( -1.52209531 , ) , ( -1.47929079 , ) , ( -1.45222305 , ) , ( -1.41620396 , ) , ( -1.3797996 , ) , ( -1.34161644 , ) , ( -1.31104585 , ) , ( -1.25723417 , ) , ( -1.21888731 , ) , ( -1.17981666 , ) , ( -1.11935429 , ) , ( -1.07362554 , ) , ( -1.02880368 , ) , ( -0.95873791 , ) , ( -0.89348502 , ) , ( -0.83701451 , ) , ( -0.76593366 , ) , ( -0.67629979 , ) , ( -0.58643658 , ) , ( -0.54067663 , ) , ( -0.4431564 , ) , ( -0.35475281 , ) , ( -0.30326162 , ) , ( -0.22282614 , ) , ( -0.14566946 , ) , ( -0.08856868 , ) , ( -0.02555164 , ) , ( 0.0629653 , ) , ( 0.11247248 , ) , ( 0.20189597 , ) , ( 0.26919447 , ) , ( 0.36152374 , ) , ( 0.43092766 , ) , ( 0.52995165 , ) , ( 0.60351463 , ) , ( 0.69317342 , ) , ( 0.79384568 , ) , ( 0.8774979 , ) , ( 0.97539756 , ) , ( 1.0833947 , ) , ( 1.15960723 , ) , ( 1.27042357 , ) , ( 1.38246486 , ) , ( 1.50762976 , ) at ;    in ( -1.5407740366 , ) , ( -1.4221760081 , ) , ( -1.3285556754 , ) , ( -1.2575656203 , ) , ( -1.1991669375 , ) , ( -1.1455667152 , ) , ( -1.0884658587 , ) , ( -1.0256488228 , ) , ( -0.986631627 , ) , ( -0.9369318 , ) , ( -0.8876246187 , ) , ( -0.8368773061 , ) , ( -0.7980010512 , ) , ( -0.7309025443 , ) , ( -0.6840365497 , ) , ( -0.6383731913 , ) , ( -0.5691692723 , ) , ( -0.5179333691 , ) , ( -0.4699451873 , ) , ( -0.3965822071 , ) , ( -0.3297962301 , ) , ( -0.2738661859 , ) , ( -0.2060510462 , ) , ( -0.1225988223 , ) , ( -0.0410011116 , ) , ( -0.0008756756 , ) , ( 0.0834980898 , ) , ( 0.1595106199 , ) , ( 0.2034683076 , ) , ( 0.270527066 , ) , ( 0.3352935063 , ) , ( 0.3825705627 , ) , ( 0.4347458369 , ) , ( 0.5075352937 , ) , ( 0.5487023127 , ) , ( 0.6223311962 , ) , ( 0.6773934905 , ) , ( 0.7523419165 , ) , ( 0.8082692271 , ) , ( 0.8874574317 , ) , ( 0.9458951951 , ) , ( 1.0162340611 , ) , ( 1.0945454611 , ) , ( 1.1589501547 , ) , ( 1.2332985741 , ) , ( 1.3150446519 , ) , ( 1.3720438262 , ) , ( 1.4546600683 , ) , ( 1.5383177315 , ) , ( 1.6326063826 , ) at ;    in ( -1.03095825 , ) , ( -0.87993051 , ) , ( -0.78236324 , ) , ( -0.70785105 , ) , ( -0.64640261 , ) , ( -0.59341572 , ) , ( -0.54636791 , ) , ( -0.5037178 , ) , ( -0.46444975 , ) , ( -0.42785622 , ) , ( -0.39342255 , ) , ( -0.36076114 , ) , ( -0.32957152 , ) , ( -0.29961493 , ) , ( -0.27069754 , ) , ( -0.24265887 , ) , ( -0.21536365 , ) , ( -0.18869597 , ) , ( -0.16255486 , ) , ( -0.13685094 , ) , ( -0.11150392 , ) , ( -0.08644042 , ) , ( -0.06159239 , ) , ( -0.03689564 , ) , ( -0.01228863 , ) , ( 0.01228863 , ) , ( 0.03689564 , ) , ( 0.06159239 , ) , ( 0.08644042 , ) , ( 0.11150392 , ) , ( 0.13685094 , ) , ( 0.16255486 , ) , ( 0.18869597 , ) , ( 0.21536365 , ) , ( 0.24265887 , ) , ( 0.27069754 , ) , ( 0.29961493 , ) , ( 0.32957152 , ) , ( 0.36076114 , ) , ( 0.39342255 , ) , ( 0.42785622 , ) , ( 0.46444975 , ) , ( 0.5037178 , ) , ( 0.54636791 , ) , ( 0.59341572 , ) , ( 0.64640261 , ) , ( 0.70785105 , ) , ( 0.78236324 , ) , ( 0.87993051 , ) , ( 1.03095825 , ) at ;    ( , )  ( , ) node[right ] @xmath431 ; ( , )  ( , ) node[right ] @xmath432 ; in -3,-2,-1,0,1,2,3 at ( , ) [ below ] ;    ( -3.17606026,)(-3.1253581 , ) ; ( -3.06048684,)(-2.99751134 , ) ; ( -2.87667122,)(-2.79534456 , ) ; ( -2.74927388,)(-2.65646991 , ) ; ( -2.55768783,)(-2.44851659 , ) ; ( -2.42290212,)(-2.30383828 , ) ; ( -2.2540116,)(-2.1238118 , ) ; ( -2.12525987,)(-1.98784034 , ) ; ( -1.99761317,)(-1.85303573 , ) ; ( -1.91310688,)(-1.76379077 , ) ; ( -1.79524643,)(-1.64152053 , ) ; ( -1.65657184,)(-1.49671346 , ) ; ( -1.59055562,)(-1.42694777 , ) ; ( -1.44841856,)(-1.28091189 , ) ; ( -1.30394033,)(-1.13093155 , ) ; ( -1.2240502,)(-1.04800175 , ) ; ( -1.12371388,)(-0.94575426 , ) ; ( -0.9877443,)(-0.80719477 , ) ; ( -0.85313984,)(-0.67002824 , ) ; ( -0.76389301,)(-0.57908528 , ) ; ( -0.64162469,)(-0.4544918 , ) ; ( -0.547452,)(-0.35852914 , ) ; ( -0.4956141,)(-0.30667217 , ) ; ( -0.34726389,)(-0.15680602 , ) ; ( -0.2808161,)(-0.09035826 , ) ; ( -0.13083584,)(0.05883618 , ) ; ( -0.04790419,)(0.14022149 , ) ; ( 0.05434139,)(0.24055968 , ) ; ( 0.19290088,)(0.37653301 , ) ; ( 0.33006733,)(0.51113738 , ) ; ( 0.42101028,)(0.60038047 , ) ; ( 0.54560371,)(0.72264505 , ) ; ( 0.64156827,)(0.81509168 , ) ; ( 0.69342524,)(0.86504934 , ) ; ( 0.84329135,)(1.00941948 , ) ; ( 0.95099269,)(1.11392721 , ) ; ( 1.14011701,)(1.2976008 , ) ; ( 1.2404552,)(1.39432319 , ) ; ( 1.37642853,)(1.52539469 , ) ; ( 1.51123298,)(1.65533945 , ) ; ( 1.60047607,)(1.7398475 , ) ; ( 1.81498728,)(1.94460311 , ) ; ( 1.86494491,)(1.99278879 , ) ; ( 2.00931502,)(2.12962472 , ) ; ( 2.11402463,)(2.22886943 , ) ; ( 2.39421881,)(2.49155663 , ) ; ( 2.52549039,)(2.61400308 , ) ; ( 2.73974332,)(2.81194426 , ) ; ( 2.94469897,)(3.00023672 , ) ; ( 3.1297207,)(3.1696888 , ) ;    in ( -3.17606026 , ) , ( -3.06048684 , ) , ( -2.87667122 , ) , ( -2.74927388 , ) , ( -2.55768783 , ) , ( -2.42290212 , ) , ( -2.2540116 , ) , ( -2.12525987 , ) , ( -1.99761317 , ) , ( -1.91310688 , ) , ( -1.79524643 , ) , ( -1.65657184 , ) , ( -1.59055562 , ) , ( -1.44841856 , ) , ( -1.30394033 , ) , ( -1.2240502 , ) , ( -1.12371388 , ) , ( -0.9877443 , ) , ( -0.85313984 , ) , ( -0.76389301 , ) , ( -0.64162469 , ) , ( -0.547452 , ) , ( -0.4956141 , ) , ( -0.34726389 , ) , ( -0.2808161 , ) , ( -0.13083584 , ) , ( -0.04790419 , ) , ( 0.05434139 , ) , ( 0.19290088 , ) , ( 0.33006733 , ) , ( 0.42101028 , ) , ( 0.54560371 , ) , ( 0.64156827 , ) , ( 0.69342524 , ) , ( 0.84329135 , ) , ( 0.95099269 , ) , ( 1.14011701 , ) , ( 1.2404552 , ) , ( 1.37642853 , ) , ( 1.51123298 , ) , ( 1.60047607 , ) , ( 1.81498728 , ) , ( 1.86494491 , ) , ( 2.00931502 , ) , ( 2.11402463 , ) , ( 2.39421881 , ) , ( 2.52549039 , ) , ( 2.73974332 , ) , ( 2.94469897 , ) , ( 3.1297207 , ) at ;    in ( -3.1253581 , ) , ( -2.99751134 , ) , ( -2.79534456 , ) , ( -2.65646991 , ) , ( -2.44851659 , ) , ( -2.30383828 , ) , ( -2.1238118 , ) , ( -1.98784034 , ) , ( -1.85303573 , ) , ( -1.76379077 , ) , ( -1.64152053 , ) , ( -1.49671346 , ) , ( -1.42694777 , ) , ( -1.28091189 , ) , ( -1.13093155 , ) , ( -1.04800175 , ) , ( -0.94575426 , ) , ( -0.80719477 , ) , ( -0.67002824 , ) , ( -0.57908528 , ) , ( -0.4544918 , ) , ( -0.35852914 , ) , ( -0.30667217 , ) , ( -0.15680602 , ) , ( -0.09035826 , ) , ( 0.05883618 , ) , ( 0.14022149 , ) , ( 0.24055968 , ) , ( 0.37653301 , ) , ( 0.51113738 , ) , ( 0.60038047 , ) , ( 0.72264505 , ) , ( 0.81509168 , ) , ( 0.86504934 , ) , ( 1.00941948 , ) , ( 1.11392721 , ) , ( 1.2976008 , ) , ( 1.39432319 , ) , ( 1.52539469 , ) , ( 1.65533945 , ) , ( 1.7398475 , ) , ( 1.94460311 , ) , ( 1.99278879 , ) , ( 2.12962472 , ) , ( 2.22886943 , ) , ( 2.49155663 , ) , ( 2.61400308 , ) , ( 2.81194426 , ) , ( 3.00023672 , ) , ( 3.1696888 , ) at ;    in ( -1.03095825 , ) , ( -0.87993051 , ) , ( -0.78236324 , ) , ( -0.70785105 , ) , ( -0.64640261 , ) , ( -0.59341572 , ) , ( -0.54636791 , ) , ( -0.5037178 , ) , ( -0.46444975 , ) , ( -0.42785622 , ) , ( -0.39342255 , ) , ( -0.36076114 , ) , ( -0.32957152 , ) , ( -0.29961493 , ) , ( -0.27069754 , ) , ( -0.24265887 , ) , ( -0.21536365 , ) , ( -0.18869597 , ) , ( -0.16255486 , ) , ( -0.13685094 , ) , ( -0.11150392 , ) , ( -0.08644042 , ) , ( -0.06159239 , ) , ( -0.03689564 , ) , ( -0.01228863 , ) , ( 0.01228863 , ) , ( 0.03689564 , ) , ( 0.06159239 , ) , ( 0.08644042 , ) , ( 0.11150392 , ) , ( 0.13685094 , ) , ( 0.16255486 , ) , ( 0.18869597 , ) , ( 0.21536365 , ) , ( 0.24265887 , ) , ( 0.27069754 , ) , ( 0.29961493 , ) , ( 0.32957152 , ) , ( 0.36076114 , ) , ( 0.39342255 , ) , ( 0.42785622 , ) , ( 0.46444975 , ) , ( 0.5037178 , ) , ( 0.54636791 , ) , ( 0.59341572 , ) , ( 0.64640261 , ) , ( 0.70785105 , ) , ( 0.78236324 , ) , ( 0.87993051 , ) , ( 1.03095825 , ) at ;    [ fig : opt_arrival_departure_2c ]     & 20 & 30 & 50 +   + cpi cycles & 3 & 2 & 4 & 5 & 4 & 3 & 3 & 3 & 3 & 4 + total breakpoints & 24 & 65 & 306 & 382 & 441 & 642 & 727 & 1,383 & 3,260 & 8,636 + ns qps solved & 2 & 2 & 9 & 6 & 8 & 14 & 10 & 29 & 34 & 29 + running time ( sec . ) & 0.05 & 0.15 & 1.17 & 1.67 & 1.99 & 3.09 & 3.28 & 6.38 & 18.31 & 85.33 + global opt . &",
    "yes & yes & yes & yes & yes & yes & yes & na",
    "& na & na +   + @xmath433 qps solved & 5 & 42 & 16,796 & 58,786 & 208,012 & @xmath434 & @xmath435 & @xmath436 & @xmath437 & @xmath438 + running time ( sec . ) & 0.00 & 0.05 & 25.25 & 162.41 & 509 & 8,206 & 39,454 & na & na & na +    [ tbl : iter_compare ]    to further investigate our combined heuristic , in figure [ fig : alg_iterations ] we illustrate the number cpi cycles and breakpoints , along with the respective number of quadratic programs solved by the neighbour search , until convergence of algorithm 6 .",
    "the problem data was scaled as in the previous example . for every @xmath16",
    "the initial points given by @xmath439 with @xmath440 distinct initial points .",
    "the figure displays the minimum and maximum values out of the @xmath441 initial points .",
    "note that for every @xmath16 the algorithm converged to the same local minimum for all initial points in @xmath439 .",
    "we can see that the number of required cpi cycles was small and stabilized on @xmath110 regardless of the number of users .",
    "however , we should take into account that the number of coordinate iterations in every cycle is @xmath16 , and that the complexity of each iteration also grows with @xmath16 .",
    "specifically , proposition [ prop : alg4_complexity ] shows that the number of breakpoints for every coordinate in the cpi is at most @xmath442 , but in the example we see the growth is in effect linear ( @xmath443 ) .",
    "furthermore , the number of required quadratic programs solved in the neighbour search also grows linearly ( @xmath444 ) .",
    "this hints that the cpi does indeed find a point that is very  close \" to a local minimum . the widening gap between the minimum and maximum number of ns iterations suggests that some of the initial points are better than others , and",
    "thus it is worthwhile trying several of them .",
    "the last point is important when solving for even larger values of @xmath16 as the algorithm becomes more sensitive to  bad \" initial points and may require setting a maximum number of iterations parameter for every initial point .",
    "again we stress that the behaviour displayed in figure [ fig : alg_iterations ] was robust with respect to changes in the model parameters .",
    ".45    ( , ) ",
    "( , ) node[right ] @xmath16 ; ( 0 , )  ( 0 , ) node[above ] ; in 0,50,100,150,200,250,300 at ( , ) [ below ] ; in 2,4,6,8 at ( 0 , ) [ left ] ;    ( 10,4) ( 20,6) ( 50,4) ( 75,6) ( 100,2) ( 125,2) ( 150,2) ( 175,2) ( 200,2) ( 225,2) ( 250,2) ( 275,2) ( 300,2 ) ;    in ( 10,4 ) , ( 20,6 ) , ( 50,4 ) , ( 75,6 ) , ( 100,2 ) , ( 125,2 ) , ( 150,2 ) , ( 175,2 ) , ( 200,2 ) , ( 225,2 ) , ( 250,2 ) , ( 275,2 ) , ( 300,2 ) at ;    ( 10,3) ( 20,3) ( 50,3) ( 75,2) ( 100,2) ( 125,2) ( 150,2) ( 175,2) ( 200,2) ( 225,2) ( 250,2) ( 275,2) ( 300,2 ) ;    in ( 10,3 ) , ( 20,3 ) , ( 50,3 ) , ( 75,2 ) , ( 100,2 ) , ( 125,2 ) , ( 150,2 ) , ( 175,2 ) , ( 200,2 ) , ( 225,2 ) , ( 250,2 ) , ( 275,2 ) , ( 300,2 ) at ;    [ fig : alg_iterations_a ]    .45    ( , )  ( , ) node[right ] @xmath16 ; ( 0 , ) ",
    "( 0 , ) node[above ] ; in 0,50,100,150,200,250,300 at ( , ) [ below ] ; in 100,200,300,400,500,600,700,800,900 at ( 0 , ) [ left ] ;    ( 10,101) ( 20,83) ( 50,189) ( 75,264) ( 100,337) ( 125,412) ( 150,481) ( 175,564) ( 200,642) ( 225,724) ( 250,792) ( 275,869) ( 300,946 ) ;    in ( 10,101 ) , ( 20,83 ) , ( 50,189 ) , ( 75,264 ) , ( 100,337 ) , ( 125,412 ) , ( 150,481 ) , ( 175,564 ) , ( 200,642 ) , ( 225,724 ) , ( 250,792 ) , ( 275,869 ) , ( 300,946 ) at ;    ( 10,25) ( 20,56) ( 50,146) ( 75,219) ( 100,295) ( 125,369) ( 150,444) ( 175,517) ( 200,587) ( 225,667) ( 250,743) ( 275,809) ( 300,885 ) ;    in ( 10,25 ) , ( 20,56 ) , ( 50,146 ) , ( 75,219 ) , ( 100,295 ) , ( 125,369 ) , ( 150,444 ) , ( 175,517 ) , ( 200,587 ) , ( 225,667 ) , ( 250,743 ) , ( 275,809 ) , ( 300,885 ) at ;    [ fig : alg_iterations_b ]    .5    ( , )  ( , ) node[right ] @xmath16 ; ( 0 , ) ",
    "( 0 , ) node[above ] ; in 0,50,100,150,200,250,300 at ( , ) [ below ] ; in 20,40,60,80,100,120 at ( 0 , ) [ left ] ;    ( 10,10) ( 20,50) ( 50,51) ( 75,97) ( 100,59) ( 125,59) ( 150,58) ( 175,86) ( 200,75) ( 225,108) ( 250,89) ( 275,111) ( 300,115 ) ;    in ( 10,10 ) , ( 20,50 ) , ( 50,51 ) , ( 75,97 ) , ( 100,59 ) , ( 125,59 ) , ( 150,58 ) , ( 175,86 ) , ( 200,75 ) , ( 225,108 ) , ( 250,89 ) , ( 275,111 ) , ( 300,115 ) at ;    ( 10,7) ( 20,28) ( 50,21) ( 75,48) ( 100,17) ( 125,14) ( 150,15) ( 175,24) ( 200,28) ( 225,24) ( 250,22) ( 275,21) ( 300,20 ) ;    in ( 10,7 ) , ( 20,28 ) , ( 50,21 ) , ( 75,48 ) , ( 100,17 ) , ( 125,14 ) , ( 150,15 ) , ( 175,24 ) , ( 200,28 ) , ( 225,24 ) , ( 250,22 ) , ( 275,21 ) , ( 300,20 ) at ;    [ fig : alg_iterations_c ]    .2    [ legend entries = maximum , minimum , legend style = at=(1.4,0.5 ) ]",
    "we presented a model for a discrete - user deterministic processor sharing system , and addressed the problem of scheduling arrivals to such a system with the goal of minimizing congestion and tardiness costs .",
    "a full characterisation of the congestion dynamics and an efficient method for computing them was provided .",
    "it was further shown that the optimal arrival schedule can be computed in a finite , but exponentially large , number of steps .",
    "several heuristics were therefore developed with the goal of an efficient computation of the optimal schedule .",
    "a combined global and local search heuristic was presented and numerically analysed .",
    "this method was shown to be efficient in numerical examples for a large population of users .",
    "the essential parts of our analysis and results applies for a much more general cost formulation , as we shall next detail . given that user @xmath17 enters the system at time @xmath60 and leaves at time @xmath445 ,",
    "a plausible cost incurred by the user is the following : @xmath446 where @xmath447 , and @xmath448 are some convex functions .",
    "the first and third terms of capture the penalty for being late to the ideal departure and arrival times @xmath20 and @xmath449 , respectively .",
    "the second and fourth terms are the user s cost for arriving and departing early .",
    "the fifth term is the user s cost for travel / usage of the system .",
    "our algorithm and results in this paper hold with slight technical modifications for arbitrary convex @xmath450 . for purpose of exposition",
    ", we focused on , @xmath451 , @xmath452 and @xmath453 . if adapted to the more general formulation",
    ", the exhaustive and neighbour search algorithms of section [ sec : optregion ] will generally require solving a constrained convex program , instead of convex quadratic , for every region .",
    "if @xmath454 and/or @xmath455 , namely there are different penalties for arriving / departing later and early , then the cpi algorithm of section [ sec : cpialg ] will require some refinement of the definition of the piecewise segments .",
    "the complexity will not change as for every single coordinate there will be an addition of at most three segments , corresponding for these new points of discontinuity .",
    "moreover , the root of the first order condition in every continuous segment will be given by the general form of the functions , instead of the quadratic root .",
    "an interesting generalization is considering a system with users who have heterogeneous service demand .",
    "if this is the case then the order of departures is no longer identical to the order of arrivals .",
    "this means that the characterisation of proposition [ lemma_departure_function ] is no longer valid .    a natural complementary model to",
    "this work is considering a decentralized decision framework in which the users choose their own arrival time .",
    "namely , a non cooperative game with the individual arrival times are the actions of the players .",
    "this game is formulated and analysed in @xcite .    finally , there is the challenge of characterising the computational complexity of our scheduling problem .",
    "we believe that finding the optimal @xmath456 is an np - complete problem but we still do nt have a proof for this . our belief is motivated ( but not supported ) by the fact that there are a number of related optimization problems which are known to be np hard .",
    "our problem is equivalent to a special case of one of them , namely non - linear integer programming .",
    "as we have shown , our goal is to minimize a non - convex piecewise quadratic objective function , subject to piecewise linear constraints .",
    "it is known that non - convex quadratic programs and non - convex piecewise linear optimization are both np hard ( see @xcite and @xcite ) . in @xcite",
    "it is shown that piecewise linear optimization problems can be modelled as linear mixed integer programs , where the definition of a piecewise linear program relies on different coefficients for different polytopes , in a similar manner to our piecewise quadratic formulation in section [ sec : optregion ] .",
    "it may be possible to apply similar methods with modifications for the piecewise convex instead of linear objective . however , there is a more natural construction for our case .",
    "let @xmath457 be the solution to @xmath255 , i.e. , the solution to the local convex qp of a polytope @xmath458 .",
    "but this can also be viewed as a function of the integer vector @xmath233 which we can compute in polynomial time . hence , solving our problem in polynomial time is equivalent to solving the non - linear integer program : @xmath459    recall that @xmath460 defines a set of linear constraints on the integer decision variables .",
    "clearly the objective is not linear with respect to @xmath233 , as @xmath457 itself is already not necessarily linear .",
    "such problems are known to be np hard .",
    "see for example , @xcite and @xcite .",
    "although we could not find a straightforward reduction of the problem to a known np hard , we have shown that our problem can be formulated as an ( rather cumbersome ) instance of a polynomial integer program , and have no reason to believe that the specific model comes with significant simplification of the general form .    as a closing note",
    "we mention that it is generally of interest to compare our heuristics to potential integer programming methods .",
    "one may either discretize time and solve integer programs , or alternatively seek related integer programming formulations .",
    "it remains an open problem to compare our heuristics to such potential methods both in terms of accuracy and computation time .",
    "* acknowledgements : * we thank hai vu and moshe haviv for useful discussions and advice .",
    "we thank the australia - israel scientific exchange foundation ( aisef ) for supporting liron ravner s visit to the university of queensland .",
    "yoni nazarathy s research is supported by arc grants de130100291 and dp130100156 .",
    "* proof of lemma  [ lemma : departure_order ] * : consider two arrivals @xmath461 . during the time interval",
    "@xmath462 $ ] , user @xmath17 has received some service , @xmath463 while user @xmath367 has not .",
    "then during the time interval @xmath464 $ ] both users receive the same service , @xmath465 . then if @xmath466 we have that @xmath467 , which would imply that , @xmath468 a contradiction . hence @xmath469 .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em    * proof of lemma  [ lemma : unique ] * : without loss of generality assume @xmath470 and hence by the previous lemma , @xmath46 is ordered .",
    "assume now that there exists a @xmath471 and define @xmath472 .",
    "without loss of generality , assume that @xmath473 . using it holds that , @xmath474 now since for all @xmath475 it holds that @xmath476 , then , @xmath477 a contradiction .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em    * proof of lemma  [ lemma : optimal_order ] * : we first argue that an optimal arrival must be ordered ( @xmath478 ) by means of an interchange argument .",
    "assume this is not the case , i.e. @xmath254 is an optimal arrival schedule such that @xmath479 for some @xmath480 ( such that @xmath481)s .",
    "if we switch between the arrival times of users @xmath17 and @xmath367 : @xmath482 and @xmath483 , while not changing any other arrival time , then because all users have the same service demand the departure times of all other users do not change . consequently , the departure times are also switched : @xmath484 and @xmath485 .",
    "therefore , the only change in the total cost function is the change in the cost incurred by @xmath17 and @xmath367 themselves .",
    "the change in the cost incurred by user @xmath17 is given by : @xmath486 and for user @xmath367 : @xmath487 summing and we obtain that the total change in cost is @xmath488 from lemma [ lemma : departure_order ] we know that if @xmath479 then @xmath489 , and that by definition @xmath490 , hence the change in the total cost function is negative which contradicts the assumption that the schedule is optimal . in conclusion , any unordered schedule can be improved by a simple interchange of a pair of unordered coordinates , and therefore an optimal schedule must be ordered .    the slowest service rate occurs when all @xmath16 users are present in the system , and therefore the longest possible sojourn time is @xmath491 .",
    "the total time required to clear all users from the system is then coarsely upper bounded by @xmath492 . a schedule such that @xmath493 is clearly not optimal , since a trivial improvement can always be achieved by setting @xmath494 and shifting to the right the arrival times of any user that overlap due to the change in @xmath267 .",
    "we are guaranteed this is possible by the fact that all users can arrive and leave the system in the interval @xmath495 $ ] , without any overlaps .",
    "clearly , the deviation from ideal times can only decrease when making this change , while the sojourn times remain unchanged .",
    "the coarse upper bound @xmath279 holds for the same reasons .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em    * proof of proposition  [ prop : alg1_complexity ] * : the proof is for algorithm  1a .",
    "the argument for algorithm  1b follows the same arguments . for every user @xmath17",
    ", iterating on all possible values of @xmath496 ensures that every possible departure interval @xmath497 is checked . in a sense , this is an exhaustive search on all solutions that satisfy the dynamics given by proposition [ lemma_departure_function ] .",
    "therefore , the algorithm will always converge to the unique solution .    given a vector of arrivals @xmath498 , for every @xmath62",
    ", the departure time @xmath19 occurs in one of the above defined partitions @xmath499 .",
    "the total number of steps will include the number of `` correct '' computations , that is for a every @xmath17 and @xmath165 the resulting @xmath19 will indeed be in the interval @xmath497 . in total",
    "there will be exactly @xmath16 correct computations",
    ". however , there will also be steps which will turn out to be false : for a given @xmath164 the departure time @xmath19 will not be in the interval @xmath497 .",
    "if @xmath500 for some @xmath367 , then for every @xmath501 : @xmath502 . therefore ,",
    "if for some @xmath17 and @xmath503 the computation will yield @xmath504 , then this interval will not be attempted by any later arrival @xmath505 in the following steps . as a result , every interval will yield at most one false computation .",
    "since there are exactly @xmath16 intervals this completes the proof .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em    * proof of lemma  [ lemma_coeff_decreasing ] * : since @xmath377 it holds that @xmath506 , and thus using if @xmath507 then @xmath508 , and if @xmath509 then @xmath510 since @xmath511 , the denominator is always positive .",
    "we next show that the numerator is non - negative by induction on @xmath512 .",
    "recall that @xmath513 , and so @xmath509 is equivalent to @xmath514 .",
    "thus for @xmath515 : @xmath516 and the denominator in the case @xmath517 equals @xmath518 .",
    "the induction step is then immediate because the sum @xmath519 is non - negative for all @xmath520 .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em    * proof of lemma  [ lemma_coeff_changes ] * : without loss of generality assume that @xmath521 . if this were not the case we could always extend the search range by @xmath522 in both directions . hence , @xmath508 at @xmath523 and at @xmath524 for any @xmath525",
    "furthermore , from lemma [ lemma_coeff_decreasing ] we have that @xmath526 for @xmath377 .",
    "clearly , there is some @xmath34 such that @xmath305 for the first time .",
    "so far we have established that @xmath372 starts at zero , is positive at some point and negative at some back to zero , for every @xmath525 .",
    "we are left with finding the number of possible sign changes prior to @xmath527 . for any @xmath528",
    "it follows that @xmath529 , and from we have that : @xmath530 note that @xmath372 can only be negative when there is at least one @xmath531 such that @xmath532 .",
    "we use this to complete the proof by induction on the initial order @xmath334 .",
    "we start the induction at @xmath533 because @xmath356 in the initial permutation and @xmath534 for all values of @xmath34 . for @xmath533 and @xmath535 : @xmath536 .",
    "together with lemma [ lemma_coeff_decreasing ] we have established that @xmath537 changes sign exactly once .",
    "now let us assume that the claim is correct for all @xmath538 .",
    "from we see that for @xmath528 , @xmath539 can only change sign when one of the previous @xmath540 changes sign .",
    "if @xmath541 changed sign exactly @xmath542 times then @xmath372 can potentially change at all these times and additionally when @xmath527 , and therefore there are indeed at most @xmath379 changes of sign .",
    "< 1.5em - 1.5em plus0em minus0.5em height0.75em width0.5em depth0.25em"
  ],
  "abstract_text": [
    "<S> we consider the problem of scheduling arrivals to a congestion system with a finite number of users having identical deterministic demand sizes . </S>",
    "<S> the congestion is of the processor sharing type in the sense that all users in the system at any given time are served simultaneously . </S>",
    "<S> however , in contrast to classical processor sharing congestion models , the processing slowdown is proportional to the number of users in the system at any time . </S>",
    "<S> that is , the rate of service experienced by all users is linearly decreasing with the number of users . for each user </S>",
    "<S> there is an ideal departure time ( due date ) . </S>",
    "<S> a centralized scheduling goal is then to select arrival times so as to minimize the total penalty due to deviations from ideal times weighted with sojourn times . </S>",
    "<S> each deviation is assumed quadratic , or more generally convex . but due to the dynamics of the system , the scheduling objective function is non - convex . </S>",
    "<S> specifically , the system objective function is a non - smooth piecewise convex function . </S>",
    "<S> nevertheless , we are able to leverage the structure of the problem to derive an algorithm that finds the global optimum in a ( large but ) finite number of steps , each involving the solution of a constrained convex program . </S>",
    "<S> further , we put forward several heuristics . </S>",
    "<S> the first is the traversal of neighbouring constrained convex programming problems , that is guaranteed to reach a local minimum of the centralized problem . </S>",
    "<S> this is a form of a `` local search '' , where we use the problem structure in a novel manner . </S>",
    "<S> the second is a one - coordinate `` global search '' , used in coordinate pivot iteration . </S>",
    "<S> we then merge these two heuristics into a unified `` local - global '' heuristic , and numerically illustrate the effectiveness of this heuristic . </S>"
  ]
}