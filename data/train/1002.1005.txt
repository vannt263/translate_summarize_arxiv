{
  "article_text": [
    "in many application domains , software systems need to perpetually and rapidly evolve to cope with new user and technology requirements .",
    "being able to modify existing systems or redesign new systems to rapidly take in account new functionalities or preferences has led to the proposition of several software engineering approaches such as the agile software development methodology  @xcite .",
    "one of the key principles of agile software development is to build software through an incremental and iterative process .",
    "each iteration adds a new feature and produces a fully working system by going through the whole the software lifecycle , _",
    "i.e. , _ the analyze , develop and test phases .",
    "another particularity of agile development is that the testing activity is not just confined to the classical test phase but rather integrated throughout the entire lifecycle , meaning that the software is continuously tested throughout its development , from its specifications to the final running system , in order to augment the overall software system quality .",
    "another software engineering approach that contributes to facilitating the rapid development of software systems is the use of component - based software architectures . in this context , the overall structure of the application is first described with an architecture description language ( adl )  @xcite .",
    "such description highlights the needed components and their assembly , which facilitates the understanding and analysis of the application s properties , such as behavioral or quality of service properties . if the specifications are coherent , the application is eventually instantiated , deployed and executed to be tested .    although agile software development and component - based software engineering ( cbse ) may appear quite different approaches , some works",
    "@xcite have identified that both approaches could benefit to each other , cbse bringing for example the capability of building large software and enhancing reusability , and agile development offering more flexible development processes for shorter time - to - market products .",
    "nevertheless we believe that there is still a bridge between these two approaches , one reason being the lack of component frameworks that allow incremental and iterative development processes , as well as throughout - lifecycle testing .    to address this problematic ,",
    "we have developed a model - based framework , named calico , that enables architects to design and test component - based systems in an iterative and uniformed process  @xcite .",
    "calico allows software architects to specify their architectures as models , and to analyze them with respect to application and platform constraints .",
    "our approach enables the testing of the system throughout the system lifecycle .",
    "more concretely , calico analyses architecture models and creates contracts by composing contractual application properties , _",
    "e.g. _ , behavioral , dataflow , qos properties .",
    "this composition allows compatible and incompatible interaction to be identified , as well as partially compatible interactions , which require runtime checking  @xcite .",
    "when runtime checking is needed , calico automatically instruments the application to reify runtime information to complete the resolution of the partially compatible interaction contract and thus detects if the given interaction may lead to an error . by using this framework in iterative software design processes ,",
    "architects get design feedback , _",
    "i.e. , _ information on identified interaction errors , and can then modify the models accordingly .",
    "each modification performed on the model is propagated to the running system since calico ensures the synchronization between the model and the runtime system , both of which thus coexist during the whole application development .",
    "furthermore , the solution offered by calico is generic regarding underlying platforms , allowing component platforms to benefit from all the analyses integrated into calico .",
    "the rest of this paper is organized as follows .",
    "section  [ sec : presentation ] gives an overview of the calico iterative and incremental development process .",
    "section  [ sec : example ] illustrates with a concrete scenario the calico approach .",
    "finally , section  [ sec : conclusion ] provides some information about the current status of our framework implementation .",
    "calico is composed of two levels : a model level and a platform level as shown in figure  [ fig : calico ] .",
    "the model level is independent of any component - based or service - oriented platform .",
    "it contains the calico architecture description metamodels that enable an architect to describe the structure and the properties , _",
    "i.e. _ , structural , behavioral , dataflow and qos properties , of an application .",
    "it is also possible to specify some contextual adaptation rules , independently of any platform , in order to allow the debugging of autonomic systems .",
    "the platform level holds the running system on a target platform .",
    "the iterative and incremental development process of calico , illustrated in figure  [ fig : calico ] , is as follows :    * ( 1 ) design :* the architect specifies the design of the desired application using the calico metamodels .",
    "the system structure metamodel enables architects to describe the structure of their architecture , independently of any component platform .",
    "calico provides also four contract metamodels to allow architects to specify structural , behavioral , dataflow and qos properties for each component .    *",
    "( 2 ) static analysis :* the interaction analysis tool checks the coherence of the system architecture . for each partially compatible interaction , a test to be performed at execution time",
    "is automatically inserted into the calico debug metamodel . for each incompatible interaction ,",
    "the architect is notified of the problem and he / she may thus provide some modification of the application design . as long as some incompatible interactions remain , the next steps of the development process can not be reached .",
    "once all of the problems are fixed , the architect specifies the runtime platform on which the application is to be executed and calico verifies that the specifications do not go against the platform constraints in order to make sure that the application can be indeed deployed on that specific platform .    *",
    "( 3 ) code generation :* if a component or service does not already exist , then the generation tool generates code skeleton such that only business code needs to be provided by the developers .    *",
    "( 4 ) instrumentalisation :* this step makes the link between the static analysis and the dynamic checks of the application at runtime .",
    "the instrumentation tool takes the debug model as input and automatically instruments the application code to enable the capture of the needed runtime information to complete the resolution of the partially compatible interaction .",
    "this instrumentalisation relies on an aspect - oriented approach and is independent of the underlying platform .    *",
    "( 5 ) instantiation :* the loader instantiates the application on the target platform as described by the architect s structural model . concretely ,",
    "the running system is created incrementally by calling the appropriate sequence of system construction operations , such as creating / removing components and connectors .    * ( 6 ) reification :* as the testers run the application in different execution contexts , the instrumented application automatically reifies any context changes and monitored information .    *",
    "( 7 ) dynamic debugging :* during the debugging phase , the debug tool analyzes the information reified by the running system and triggers when needed the tests contained in the debugging model .",
    "the architect is notified each time an error is detected , allowing him / her to correct the application design .",
    "other debugging action rather than the notification action maybe chosen , such as logging the information into a file , or executing a reconfiguration script that will automatically modify the design and trigger the step 2 of the process",
    ". this latter case may be useful to tune / test adaptation policies for autonomic system .    *",
    "( 8 ) evolution of the design :* the architect can modify the design with respect to the debugging information if problems have occurred",
    ". they can also adapt at anytime the design of the application to address new user or application requirements .",
    "after any modification , the development cycle iterates again starting at step 2 .",
    "to illustrate the agile development process offered by calico , we use an example of architecture in the context of the french personal health record system ( phr )  @xcite .",
    "phr is the french personal health record system that is intended to provide health - care professionals with the information needed for their patients care .",
    "figure  [ fig : dmp ] represents a possible architecture of the phr system . all medical information , ( such as biological analyses , x - rays , medications , _ etc . _ ) , will be stored in distributed databases and will be made accessible through an on - line interface client .    in order to build a robust phr application , architects need to be able to express several application properties .",
    "a first requirement of this system architecture is related to authentication issues since not everybody should have access to anybody s health records .",
    "the architecture of this system must thus provide some authentication mechanism .",
    "the authentication architecture element logs a health - care professional in and returns a session ticket through the functionality getticket that is offered by sessionserver . for security reason",
    ", the functionality getticket can be used only by the element authentication to avoid that an unauthenticated user get a session ticket .",
    "finally the session ticket must be validated by the sessionserver before retrieving any medical data from the database .",
    "another requirement is the high reliability of the system .",
    "such system has to be able to handle very heterogeneous medical information , going from light - weight text records to gigabytes of echographies .",
    "furthermore , the devices used to display this information are also heterogeneous .",
    "they range from desktop computers with high - quality large - screen monitors and gigabyte network connexions to simple pdas with small screens and low - bandwidth gprs network connexion .",
    "handling such data in a reliable way is critical because the system must be able to determine if a given data can be displayed appropriately with no loss of information , as well as in which time - frame , depending on the available resources and amount of information to display .",
    "for example , a dataflow constraint may express that medical data received on a terminal of type pda nokia n800 should be less than 10 megaoctets .",
    "another constraint can also specify that only text or jpg documents can be read on that terminal .",
    "overall the constraints may evolve in time or just not reflect exactly one given execution context .",
    "there is thus a need to iterate the whole process to check if the declared application constraints can be all checked , statically or dynamically .        *",
    "( 1 ) * the architect specifies the architecture and the properties of the phr application . for example , the first requirement mentioned above can be specified using the structural contract metamodel .    * ( 2 ) * the overall coherence of the constraints is statically verified .",
    "a partially compatible interaction is detected between the medicalserver and the pds since data sent by the server could be greater than 10 megaoctets or in a different format than txt or jpg .",
    "accordingly calico adds some rules to validate in the debug model .",
    "these rules specify that the size and the data type must be captured at runtime .    *",
    "( 3 ) * code skeletons are generated and developers can provide the business code of each components .    *",
    "( 4 ) * following the information contained in the debug model , the application is automatically modified to capture the size and the type of the medical data that enters the pda .    * ( 5 ) * the application is deployed on the target application .    * ( 6 ) * at this step different execution contexts are tested .",
    "one may consists in the use of the phr application by a druggist , who typically uses the phr only to consult text documents .",
    "another test scenario considers a radiologist . during the test scenario execution",
    ", monitored informations are reified .    * ( 7 ) * the debug tool resumes the interaction compatibility checks that were partially compatible . in the case of the druggist ,",
    "no error is detected , whereas for the radiologist , the analyse indicates that the data are too large for the pda .    *",
    "( 8) * the architect can accordingly modify the application design by inserting a new component dataconverter between the pda and the globalsearch component in order to reduce the size of a too large radiography .",
    "the whole process is then iterated again .",
    "if no error is detected statically , the new component dataconverter is automatically integrated into the already deployed application , and new test scenarios may be executed .",
    "calico is a model - based framework that enables the design and debug of systems in an iterative and incremental way , bridging a little more the gap between component - based software engineering and agile development approaches . our framework is generic and highly extensible .",
    "all metamodels for specifying the structure , the application properties and the adaptation rules are independent of any underlying platform .",
    "this enables architects to perform various architecture analyses on their applications even if the underlying component or service framework does not provide any verification tools .",
    "the current implementation of calico is developed in java .",
    "all calico metamodels are implemented with the eclipse modeling framework ( emf ) .",
    "a graphical editor , implemented with the graphical modeling framework ( gmf ) , enables the architect to edit the model during the whole development cycle .",
    "we have integrated several existing tools to verify the coherence of the component interactions in term of structural , behavioral , dataflow and quality of service properties .",
    "structural constraints are expressed in ocl  @xcite , using the emf - ocl library .",
    "behavioral specifications are based on existing process algebra , such as csp  @xcite , fsp  @xcite , sfsp .",
    "the current implementation uses the fractal behavioral protocol checker  @xcite to verify that a given component composition does not introduce a deadlock . we have developed a dataflow analysis based on the algorithm of constant propagation in partial program validation  @xcite .",
    "the qos metamodel has been inspired by the qml  @xcite and wsla  @xcite approaches .",
    "the associated analysis is based on prediction of quality property in a workflow of web services  @xcite .",
    "furthermore , application instrumentation has been implemented with spoon  @xcite .",
    "the sensor framework wildcat  @xcite has been integrated in calico .",
    "our current implementation supports four component platforms ( fractal  @xcite , openccm  @xcite , opencom  @xcite and frascati  @xcite ) and one service - oriented platform(web services  @xcite ) .",
    "calico has been carefully designed to allow new extensions in terms of support for new platforms , new qos sensors and new kinds of debugging actions .",
    "we have performed benchmarks on our implementation and showed that calico is usable to design reliable large systems up - to 10000 components , which is the maximum load of most runtime platforms .",
    "calico is still being developed , to support more extensions .",
    "the current implementation is freely available at http://calico.gforge.inria.fr .",
    "10        stojanovic , z. , dahanayake , a. , sol , h.g . : component - oriented agile software development . in marchesi , m. , succi , g. ,",
    "volume 2675 of lecture notes in computer science . , springer ( 2003 ) 315318    radinger , w. , goeschka , k.m . : agile software development for component based software engineering . in : proceedings of 18th annual acm sigplan conference on object - oriented programming , systems , languages , and applications , new york ,",
    "ny , usa , acm ( october 2003 ) 300301    waignier , g. , sriplakich , p. , le meur , a.f . , duchien , l. : . in : proceedings of the acm / ieee 11th international conference on model driven engineering languages and systems ( models08 ) .",
    "volume 5301 of lecture notes in computer science .",
    ", toulouse , france , springer - verlag ( october 2008 ) 371385    waignier , g. , le meur , a.f . ,",
    "duchien , l. : a model - based framework to design and debug safe component - based autonomic systems . in mirandola , r. , gortona , i. , hofmeiste , c. , eds . :",
    "proceedings of the 5th international conference on the quality of software - architectures ( qosa 2009 ) .",
    "volume 5581 of lecture notes in computer science . ,",
    "pennsylvania , usa , springer - verlag ( june 2009 ) 117    waignier , g. , le meur , a.f . , duchien , l. : . in becker , s. , plasil , f. , reussner , r. ,",
    "eds . : proceedings of the 4th international conference on the quality of software - architectures ( qosa08 ) .",
    "volume 5281 of lecture notes in computer science . , karlsruhe ( th ) , germany , springer - verlag ( october 2008 ) 152170                          bruneton , e. , coupaye , t. , leclercq , m. , quma , v. , stefani , j.b .",
    ": an open component model and its support in java . in : proceedings of the 7th international symposium component - based software engineering .",
    "volume 3054 of lecture notes in computer science . ,",
    "edinburgh , scotland , springer - verlag ( may 2004 ) 722      briclet , f. , contreras , c. , merle , p. : penccm : une infrastructure  composants pour le dploiement dapplications  base de composants corba . in imag",
    "/ lsr , ed . : proceedings of the 2004 dploiement et ( re ) configuration de logiciels ( decor04 ) . ( 2004 ) 101112 http://openccm.ow2.org .",
    "seinturier , l. , merle , p. , fournier , d. , dolet , n. , schiavoni , v. , stefani , j.b . :",
    "reconfigurable sca applications with the frascati platform . in : 6th ieee international conference on service computing ( scc09 ) .",
    "( september 2009 )"
  ],
  "abstract_text": [
    "<S> agile development processes and component - based software architectures are two software engineering approaches that contribute to enable the rapid building and evolution of applications . </S>",
    "<S> nevertheless , few approaches have proposed a framework to combine agile and component - based development , allowing an application to be tested throughout the entire development cycle . to address this problematic , </S>",
    "<S> we have built calico , a model - based framework that allows applications to be safely developed in an iterative and incremental manner . </S>",
    "<S> the calico approach relies on the synchronization of a model view , which specifies the application properties , and a runtime view , which contains the application in its execution context . </S>",
    "<S> tests on the application specifications that require values only known at runtime , are automatically integrated by calico into the running application , and the captured needed values are reified at execution time to resume the tests and inform the architect of potential problems . </S>",
    "<S> any modification at the model level that does not introduce new errors is automatically propagated to the running system , allowing the safe evolution of the application . in this paper </S>",
    "<S> , we illustrate the calico development process with a concrete example and provide information on the current implementation of our framework . </S>"
  ]
}