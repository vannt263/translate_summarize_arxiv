{
  "article_text": [
    "online stochastic optimization is a central problem in operations research with many applications in dynamic resource allocation . in these settings ,",
    "given a set of resources , demands for the resources arrive online , with associated values ; given a general prior about the demands , one has to decide whether and how to satisfy ( i.e. , allocate the desired resources to ) a demand when it arrives .",
    "the goal is to find a valid assignment with maximum total value .",
    "such problems appear in many areas including online routing  @xcite , online combinatorial auctions  @xcite , online ad allocation problems  @xcite , and online dynamic pricing and inventory management problems .",
    "for example , in routing problems , we are given a network with capacity constraints over edges ; customers arrive online and bid for a subset of edges ( typically a path ) in the network , and the goal is to assign paths to new customers so as to maximize the total social welfare .",
    "similarly , in online combinatorial auctions , bidders arrive online and may bid on a subset of resources ; the auctioneer should decide whether to sell those resources to the bidder . in the display ads problem , when users visit a website , the website publisher has to choose ads to show them so as to maximize the value of the displayed ads . in this paper , we study these online stochastic resource allocation problems from theoretical and practical standpoints .",
    "our theoretical results apply to a general set of problems including all those discussed above .",
    "our practical results apply to the problem of display ads and give additional validation of our theoretical models and results .    more specifically , we consider the following general class of packing linear programs ( plp ) : let @xmath4 be a set of @xmath5 _ resources _ ; each resource @xmath6 has a capacity @xmath7 .",
    "the set of resources and their capacities are known in advance .",
    "let @xmath8 be a set of @xmath9 _ agents _ that arrive one by one online , each with a set of _ options _",
    "each option @xmath11 of agent @xmath12 has an associated _ value _ @xmath13 and requires @xmath14 units of each resource @xmath15 .",
    "the set of options and the values @xmath16 and @xmath17 arrive together with agent @xmath12 .",
    "when an agent arrives , the algorithm has to immediately decide whether to assign the agent and if so , which option to choose .",
    "the goal is to find a maximum - value allocation that does not allocate more of any resource than is available .    in the _ adversarial _ or worst - case setting",
    ", no online algorithm can achieve any non - trivial competitive ratio ; consider the simple case of one resource with capacity one and two agents .",
    "for each agent there are just two options , namely to get the resource or not to get it .",
    "if an agent gets the resource , he uses its whole capacity .",
    "the first agent has value 100 for getting the resource and value 0 for not getting the resource .",
    "if he is assigned the resource , then the value of the second agent for getting the resource is 10000 , otherwise it is 1 . in both cases",
    "the algorithm achieves less than 1/100th of the value of the optimal solution .",
    "this example can easily be generalized to show that no non - trivial competetive ratio is possible .    since in the adversarial",
    "setting the lack of prior information about the arrival rate of different types of agents implies strong impossibility results , it is natural to consider _ stochastic _",
    "settings for online allocation problems , where we may have some prior information about the arrival rate of different types of agents . in particular , we consider the _ random - order stochastic model _ , where the order in which impressions arrive is random , but we do not have any other prior information . we present a training - based online algorithm for the general class of packing linear programs described above and prove that in the random - order stochastic model , it achieves an approximation ratio of @xmath18 under some mild assumptions - approximation '' means that with high probability under the randomness in the stochastic model , the algorithm achieves at least an @xmath19 fraction of the value ( efficiency ) of the offline optimal solution for the actual instance . ] .",
    "this result also implies the same result in the i.i.d . model .",
    "our _ training - based primal - dual _",
    "algorithm for the stochastic plp problem observes the first @xmath20 fraction of the input and then solves an lp on this instance .",
    "( this requires knowing the number of agents in advance , which is unavoidable for any sub - logarithmic approximation ; see theorem  [ thm : lowerbound ] . ) for each resource , the corresponding dual variable extracted from this lp serves as a _ ( posted ) price per unit _ of the resource for the remaining agents .",
    "the algorithm allocates to each remaining agent the option maximizing his _ utility _ , defined as the difference between the value of an option and the price he must pay to obtain the necessary resources .",
    "we prove that this algorithm provides a @xmath18 approximation for the large class of natural packing problems we consider , provided that no individual option for any agent consumes too much of any resource or provides too large a fraction of the total value .",
    "specifically we show the following result . recall that @xmath9 and @xmath5 denote the number of agents and resources respectively ; @xmath21 denotes @xmath22 and",
    "@xmath23 the value of an optimal off - line solution to the plp problem .",
    "[ thm : main ] the training - based primal - dual algorithm is @xmath24-competitive ( a ptas ) for the online stochastic plp problem with high probability , as long as ( 1 ) @xmath25 and ( 2 ) @xmath26 .",
    "theorem  [ thm : main ] has many applications ; we elaborate on several , including routing problems , online combinatorial auctions , the display ad problem , and the adword allocation problem . for each of these problems ,",
    "we improve on the known results for the online version . in each",
    ", we will comment on the interpretation of the two conditions of theorem  [ thm : main ] in that application .    in the _",
    "online routing _",
    "problem , we are initially given a network with capacity constraints over the @xmath5 edges .",
    "when a customer @xmath27 arrives online , she wishes to send @xmath28 units of flow between some vertices @xmath29 and @xmath30 , and derives @xmath31 units of value from sending such flow .",
    "thus , the set of options @xmath10 for customer @xmath12 is the set of all @xmath32 paths in the network .",
    "the algorithm must pick a set of customers @xmath33 , and satisfy their demands by allocating a path to each of them while respecting the capacity constraints on each edge ; the goal is to maximize the total value of satisfied customers . for this problem ,",
    "the dual variables learned from the sample yield a price for each edge ; each customer is allocated the minimum - cost @xmath32 path if its cost is no more than @xmath31 . in road networks , for instance , these dual variables can be interpreted as the tolls to be charged to prevent congestion .",
    "theorem  [ thm : main ] applies when the contributions of individual agents / vehicles to the total objective or to road congestion are small .",
    "as one such example , over a million vehicles enter or leave manhattan daily , with the george washington bridge alone carrying several hundred thousand .",
    "online routing problems have been studied extensively in the adversarial model when demands can be large , and there are _",
    "( poly)-logarithmic _ lower and upper bounds even for special cases @xcite .",
    "our approach gives a @xmath34-approximation for the described stochastic variants of these problems .",
    "in the _ combinatorial auction _ problem , we are initally given a set @xmath4 of @xmath5 goods , with @xmath7 units for each good @xmath6 .",
    "agents arrive online , and the options for agent @xmath12 may include different bundles of goods he values differently ; option @xmath11 provides @xmath16 units of value , and requires @xmath17 units of good @xmath15 .",
    "we wish to find a valid allocation maximizing social welfare . here , the dual variables learned from the sample yield a price per unit of each good ; each agent picks the option that maximizes his utility . here",
    "theorem  [ thm : main ] applies as long as no individual agent controls a large fraction of the market , and as long as the set of options for any single agent is at most exponential in the number of resources .",
    "these conditions often hold , as in cases when bidders are single - minded or the number of bundles they are interested in is polynomial in @xmath9 , or if their options correspond to using different subsets of the resources .",
    "we also observe that the posted prices result in a take - it - or - leave it auction , and thus a truthful online allocation mechanism .",
    "revenue maximization in online auctions using sequence item pricing has been explored recently in the literature  @xcite .",
    "@xcite achieves constant - factor approximations for these problems in more general models than we consider .    in the _ display ads allocation ( da ) _",
    "problem  @xcite , there is a set @xmath4 of @xmath5 advertisers who have paid a web publisher for their ads to be shown to visitors to the website .",
    "the contract bought by advertiser @xmath15 specifies an integer upper bound on the number @xmath35 of impressions that @xmath15 is willing to pay for .",
    "a set @xmath8 of impressions arrives online , each impression @xmath12 with a value @xmath36 for advertiser @xmath15 .",
    "each impression can be assigned to at most one advertiser , i.e. , there are @xmath5 options for each impression , and each option @xmath37 has @xmath38 for advertiser @xmath15 . the goal is to maximize the value of all the assigned impressions .",
    "the dual variables learned from the sample yield a discount factor @xmath39 for each advertiser @xmath15 , and the algorithm is to assign an impression to advertiser @xmath15 that maximizes @xmath40 . the contracts for advertisers typically involve thousands of impressions , so the contribution of any one impression / agent is small , and the hypotheses of theorem  [ thm : main ] hold .",
    "the adversarial online da problem was considered in @xcite , which showed that the problem was inapproximable without exploiting _ free disposal _ ; using this property , a simple greedy algorithm is @xmath41-competitive , which is optimal . when the demand of each advertiser is large , a @xmath42-competitive algorithm exists ( see @xcite for details of the model and results ) , and this is the best possible .",
    "for the _ unweighted _ ( max - cardinality ) version of this problem in the i.i.d .",
    "model , a @xmath43-competitive algorithm has been recently developed  @xcite ; this improves the known @xmath44-approximation algorithm for online stochastic matching  @xcite .",
    "the _ adwords ( aw ) _",
    "problem  @xcite is related to the da problem ; here we allocate impressions resulting from search queries .",
    "advertiser @xmath15 has a budget @xmath45 instead of a bound @xmath35 on the number of impressions . assigning impression @xmath12 to advertiser",
    "@xmath15 consumes @xmath46 units of @xmath15 s budget instead of 1 of the @xmath35 slots , as in the da problem .",
    "several approximation algorithms have been designed for the _ offline _ aw problem  @xcite . for the online setting ,",
    "if every weight is very small compared to the corresponding budget , there exist @xmath47-competitive online algorithms  @xcite , and this factor is tight . in order to go beyond the competitive ratio of @xmath44 in the adversarial model , stochastic online settings have been studied , such as the random order and i.i.d models  @xcite .",
    "devanur and hayes  @xcite described a primal - dual ( @xmath18)-approximation algorithm for this problem in the random order model , with the assumption that @xmath23 is larger than @xmath48 times each @xmath46 , where @xmath5 is the number of advertisers ; theorem  [ thm : main ] can be viewed as generalizing this result to a much larger class of problems .",
    "for the applications described above , stochastic models are reasonable as the algorithm often has an idea of what agents to expect .",
    "for example , in the display ad allocation problem , agents correspond to users visiting the website of a publisher who has sold contracts to advertisers .",
    "as the publisher most likely sees similar user traffic patterns from day to day , he has an idea of the available ad inventory based on historical data . in section",
    "[ sec : experimental ] , we perform preliminary experiments on real instances of the da problem , using actual display ad data for a set of anonymous publishers . as with any real application , there are additional features of the problem , and in the one we considered , both _ fairness _ and efficiency were important metrics .",
    "hence , we also evaluated our algorithms for fairness ( see section  [ sec : fair ] for a precise definition ) ; we compared the efficiency and fairness of our training - based algorithm with those of algorithms from @xcite designed for the adversarial setting , as well as hybrid algorithms combining the two approaches .",
    "we propose a new approach for evaluating the fairness of an allocation , based on finding an `` ideal '' fair allocation , and measuring the distance to that allocation .",
    "our experimental results validate theorem  [ thm : main ] for this application , as they show that on this real data set , training indeed helps efficiency by 5 - 12% , and that the online algorithms from  @xcite are significantly better than a simple greedy approach .",
    "our proof technique is similar to that of @xcite for the aw problem ; it is based on their observation that dual variables satisfy the complemtary slackness conditions of the first @xmath20 fraction of impressions and _ approximately _ satisfy these conditions on the entire set . however , one key difference is that in the aw problem , the coefficients for variable @xmath49 in the linear program are the _ same _ in both the constraint and the objective function .",
    "that is , the contribution an impression makes to an advertisers value is identical to the amount of budget it consumes .",
    "in contrast , in the general class of packing problems that we study , these coefficients are unrelated , which complicates the proof .",
    "the random - order model has been considered for several problems , often called _ secretary _ problems .",
    "the elements arriving online are often the ground set of an appropriate matroid , and the goal is to find a maximum weight independent set in the matroids ; such problems include finding a maximum value set of @xmath50 elements @xcite , or finding a maximum spanning forest in a graph when edges appear online .",
    "other secretary problems include finding a maximum weight set of items that fits in a knapsack .",
    "( see @xcite for a survey of these and other results . )",
    "constant - competitive algorithms are known for these problems ; without additional assumptions ( such as those of theorem 1 ) , no algorithm can achieve a competitive ratio better than @xmath51 . specifically for the da problem , the results of @xcite imply that the random - order model permits a @xmath52-competitive algorithm even without using the free disposal property or the conditions of theorem  [ thm : main ] .",
    "there have been recent results regarding ad allocation strategies in display advertising in hybrid settings with both contract - based advertisers and spot market advertisers  @xcite .",
    "our results in this paper may be interpreted as a class of _ representative bidding strategies _ that can be used on behalf of contract - based advertisers competing with the spot market bidders  @xcite .",
    "there are many other interesting problems in ad serving systems related to information retrieval and data mining @xcite as well as various optimal caching strategies  @xcite ; our focus in this paper is on online allocation problems . ]",
    "it was recently brought to our attention that subsequent to the submission of an earlier version of this paper ( including our main result ) , similar results ( obtained independently ) were posted in a working paper@xcite .",
    "in this section , we present the primal - dual training - based algorithm for the online stochastic packing problem , and prove theorem 1 : that is , under mild ( practically - motivated ) assumptions , the algorithm achieves an approximation factor of @xmath18 .",
    "our algorithm examines the first @xmath53 agents in order before solving a linear program to compute the posted prices used for the remaining agents .",
    "this requires advance knowledge of the number of agents that will arrive ; theorem  [ thm : lowerbound ] at the end of this section shows that this is unavoidable .",
    "recall that there is a set @xmath8 of `` agents '' ; agent @xmath54 has a set of mutually exclusive options @xmath10 , and we use an indicator variable @xmath55 to denote whether agent @xmath12 selects alternative @xmath11 .",
    "each option for an agent may have a different `` size '' in each constraint ; we use @xmath17 to denote the size in constraint @xmath15 of option @xmath37 for agent @xmath12 .",
    "we use @xmath16 to denote the value from selecting option @xmath37 for agent @xmath12 , and @xmath7 is the `` capacity '' of constraint @xmath15 .",
    "that is , our goal is to maximize @xmath56 while picking at most one option for each agent , and subject to @xmath57 .",
    "subsequently , we normalize @xmath58 such that @xmath59 is the all-1 s vector , and write the ( normalized ) primal linear program below .",
    "we also use the dual linear program , which introduces a variable @xmath39 for each constraint @xmath15 .    2    * primal - lp *    @xmath60    * dual - lp *    @xmath61    let @xmath9 be the total number of agents , @xmath62 be the maximum number of options for any agent , and @xmath5 be the number of constraints .",
    "we say that the _ gain _ from option @xmath11 is @xmath63 .",
    "the training - based primal - dual algorithm proceeds as follows :    1 .",
    "let @xmath64 denote the first @xmath53 agents in the sequence .",
    "for the purposes purposes of analysis , these agents are not selected .",
    "( our implementations may assign these impressions according to some online algorithm . )",
    "solve the * dual - lp*on the agents in @xmath64 , with the objective function containing the term @xmath65 instead of @xmath39 for each @xmath66 $ ] .",
    "( this is equivalent to reducing the capacity of a constraint from 1 to @xmath20 ; we refer to this as a _",
    "reduced instance_. ) let @xmath67 denote the value of the dual variable for constraint @xmath15 in this optimal solution .",
    "3 .   for each subsequent agent @xmath12",
    ", if there is an option @xmath37 with non - negative gain , select the option @xmath37 of maximum gain , and set @xmath68 .",
    "we will refer to a variant of this algorithm in section  [ sec : experimental ] as the algorithm .",
    "the intuition behind this algorithm is simple ; the dual variables @xmath67 can be thought of as specifying a value / size ratio necessary for an option to be selected .",
    "an optimal choice for each @xmath39 gives an optimal solution to the packing problem ; this fact is proven implicitly in the next section , where we further show that with high probability , the optimal choice @xmath67 on the sample @xmath64 leads to a near - optimal solution on the entire instance . in the following ,",
    "let @xmath69 , and let @xmath70 .      we now prove theorem  [ thm : main ] , showing that the above training - based algorithm is a polynomial - time approximation scheme .",
    "( proofs of some claims are in appendix  [ app : proofs ] . )",
    "let @xmath33 denote the set of agents @xmath12 with some option @xmath37 having non - negative gain , and let @xmath71 denote the set of pairs @xmath72 .",
    "we abuse notation by writing @xmath73 if there exists @xmath74 such that @xmath75 .",
    "we use @xmath76 to denote @xmath77 ; note that @xmath78 represents the options selected by the algorithm ( for the purposes of analysis , we do not select any options for agents in @xmath64 ) .    given a vector @xmath79",
    ", we obtain a feasible solution to * dual - lp*by selecting for each item in @xmath80 , the option @xmath37 such that @xmath81 for any @xmath82 . ] and setting @xmath68 .",
    "let @xmath83 be the total weight of selected options , and let @xmath84 .",
    "let @xmath85 and @xmath86 .",
    "let @xmath87 be the value of the feasible dual solution , and let @xmath88 .",
    "let @xmath89 and @xmath90 .",
    "for any fixed vector @xmath79 , @xmath71 and hence @xmath91 and each @xmath92 are independent of the choice of the sample @xmath64 ; the expected value of @xmath93 is @xmath94 , and that of @xmath95 is @xmath96 .",
    "depends on @xmath64 , many distinct samples @xmath64 may lead to the same vector @xmath79 . also , we take expectations over _ all _ choices of @xmath64 , not just those leading to the given @xmath79 . ]",
    "the main idea of the proof is that if @xmath79 satisfies the complentary slackness conditions on the first @xmath53 impressions ( being an optimal solution ) , w.h.p . it _",
    "approximately _ satisfies these conditions on the entire set .",
    "thus , we conclude that the values of @xmath93 and @xmath95 are likely to be close to their expectations .",
    "the following lemma proved by @xcite , an application of the chernoff - hoeffding bounds , is of use :    [ lem : hoeffding ] let @xmath97 be a set of real numbers , and let @xmath98 .",
    "let @xmath64 be a random subset of @xmath99 of size @xmath53 and let @xmath100",
    ". for any @xmath101 : @xmath102    [ def : bounds ] for a sample @xmath64 and @xmath66 $ ] , let @xmath103 , and let @xmath104 .",
    "when the context is clear , we will abbreviate @xmath105 by @xmath106 and @xmath107 by @xmath108 .    1 .",
    "the sample @xmath64 is _",
    "@xmath106-bad _ if : + @xmath109 .",
    "the sample @xmath64 is _",
    "@xmath108-bad _ if : + @xmath110 .",
    "[ lem : bounds ] @xmath111 for each @xmath15 , and @xmath112 .    to prove the first of these results , we simply apply lemma  [ lem : hoeffding ] with @xmath113 if @xmath73 and @xmath114 otherwise ; we use @xmath115 . by setting @xmath116",
    ", we obtain the desired result .",
    "( the coefficients are larger than necessary to keep the expression simple . )",
    "the proof of the second result is essentially identical , and hence omitted .",
    "we argue below that if @xmath64 is _ not _ @xmath108-bad or @xmath106-bad for any @xmath15 , we obtain a good solution .",
    "we use the following simple proposition :    [ lem : complementaryslackness ] if @xmath79 is an optimal solution on the sample @xmath64 , and @xmath117 , then @xmath118 .",
    "that is , for the @xmath15th constraint , the total size of selected agents is equal to its capacity in the reduced instance .",
    "[ prop : cnear1 ] let @xmath66 $ ] be a constraint such that @xmath119 .",
    "if @xmath64 is not @xmath106-bad , we have @xmath120 .",
    "to prove the former inequality , we use @xmath121 . as @xmath122 , we have @xmath123 ; simple algebra now yields the desired result .",
    "the proof of the upper bound is similar , and so omitted .",
    "if the sample @xmath64 is not @xmath108-bad or @xmath106-bad for any constraint @xmath15 , the value of the options selected by the algorithm is @xmath124 .",
    "let @xmath125 be the value of the feasible dual solution obtained by setting @xmath68 for each @xmath81 ; by weak duality , @xmath126 is an upper bound on @xmath23 .",
    "we show that @xmath127 , which completes the proof .",
    "first , we show that @xmath128 .",
    "let @xmath129 denote the set of constraints @xmath130 such that @xmath131 , and @xmath132 -    j_1 $ ] be the set of constraints such that @xmath133 .",
    "for each constraint @xmath134 , complementary slackness and proposition  [ prop : cnear1 ] imply that if @xmath64 is not @xmath106-bad,@xmath135 .",
    "@xmath136    where the penultimate inequality follows from the fact that for @xmath137 , @xmath133 , and for each @xmath134 , @xmath138 .    now ,",
    "the total value obtained by the algorithm is @xmath139 ( as the options for agents in @xmath64 were not selected ) ; as @xmath64 is not @xmath108-bad , we have @xmath140 .",
    "but we have @xmath141 , and hence @xmath142 .",
    "that is , the value obtained by the algorithm is at least @xmath143 , which is @xmath144 .",
    "note that the options selected by the algorithm , as described above , may not be feasible even if @xmath64 is not @xmath106-bad ; proposition  [ prop : cnear1 ] only implies that @xmath145 .",
    "thus , we might violate some constraints by a small amount .",
    "this is easily fixed : simply decrease the capacities of all constraints by a factor of @xmath146 .",
    "this reduces the value of the optimal solution by no more than the same factor , as we can scale down each @xmath55 by this factor to obtain a feasible solution with the reduced capacities .",
    "though our algorithm might violate the reduced capacity of constraint @xmath15 by a factor of @xmath146 , we respect the original capacity when @xmath64 is not @xmath106-bad .",
    "thus , when @xmath64 is not @xmath108-bad or @xmath106-bad for any @xmath15 , we obtain a feasible solution with value @xmath147 .",
    "finally , lemma  [ lem : bounds ] implies that for any fixed @xmath79 , the probability that a random sample @xmath64 of impressions is bad is less than @xmath148 .",
    "the following lemma shows that there are at most @xmath149 distinct choices for @xmath79 ; as a result , the sample is good for any @xmath79 with high probability .",
    "therefore , with high probability , our algorithm returns a feasible solution with value at least @xmath150 , proving theorem  [ thm : main ] .",
    "[ lem : fewsolutions ] there are fewer than @xmath149 distinct solutions @xmath79 that are returned by the algorithm after step @xmath151 .",
    "recall that an optimal ( vertex ) solution to the * dual - lp*on the reduced instance is defined purely by the @xmath5-dimensional vector @xmath79 .",
    "the polytope defined by optimal solutions @xmath79 is defined by the constraints of the * dual - lp * , projected down to linear inequalities in @xmath5 dimensions .",
    "since there are at most @xmath21 such constraints for each of the @xmath9 agents , there are at most @xmath152 possible vertices of the polytope defined by optimal solutions @xmath79 .",
    "[ thm : lowerbound ] even in the full - information model , where @xmath9 agents drawn i.i.d . from a _ known",
    "_ distribution arrive online , there is no @xmath153-approximation for the online stochastic plp unless the number @xmath9 of draws from the distribution is known in advance .",
    "the intuition behind this proof is simple : the distribution may contain agents with very high value , but that arrive with low probability .",
    "if there are many draws from the distribution , it is likely that such agents will arrive , and so some amount of resources should be reserved for them . on the other hand , an algorithm that reserves resources for low - probability events will waste a large fraction of its resources if there are only a few draws from the distribution .",
    "fix @xmath154 ; consider a problem with @xmath155 units of a single resource , and every agent wishing precisely 1 unit of this resource .",
    "there are @xmath156 types of agents ; agents of type @xmath157 have value @xmath158 for receiving a unit of resource .",
    "the probability of drawing an agent of type @xmath12 is @xmath159 .",
    "( normalize these probabilities so they sum up to @xmath160 ; this changes the probabilities by a factor of @xmath161 , which we ignore for ease of exposition . )",
    "thus , the distribution of agents is known to the algorithm in advance .",
    "however , the algorithm _ does not know _ how many agents will be drawn from this distribution .",
    "suppose the number of draws is @xmath162 , for some @xmath163 .",
    "it is easy to see that there will be very likely be more than @xmath155 agents of type @xmath15 , and no agents of type @xmath164 or higher .",
    "thus , the optimal solution has value @xmath165 ; the hypotheses of theorem 1 will hold , as no item contributes too much to the value of the optimal solution or uses too much of the shared resource .",
    "now consider any deterministic algorithm .",
    "if , for any @xmath166 , it has selected fewer than @xmath167 agents of type @xmath50 after @xmath168 draws , it has a solution of value less than @xmath169 ( from agents of type @xmath50 ) plus @xmath170 , which is @xmath171 ; this is roughly a factor of @xmath156 smaller than the optimal solution , which has value @xmath172 .",
    "thus , to maintain a @xmath173 competitive ratio , it must have selected at least @xmath167 agents of type @xmath50 after @xmath174 draws , as there may be no subsequent agents .",
    "however , this implies that after @xmath175 draws , the algorithm must have selected at least one agent from each of types @xmath176 .",
    "but there are @xmath177 such agents that must have been selected , each using a unit of the resource .",
    "therefore , no more than @xmath167 agents of type @xmath178 can be selected .",
    "but if there are @xmath179 draws , the optimal solution has value @xmath180 , and the algorithm has value no more than @xmath181 , which is less by roughly a factor of @xmath156 less .    thus , there is no @xmath173 competitive algorithm , and the number of draws is at most @xmath182 .",
    "that is , if @xmath9 denotes the number of draws , there is no @xmath183-competitve algorithm .",
    "using yao s minimax principle , a similar argument can be extended to show that no randomized algorithm can obtain good approximations ; we omit details from this extended abstract .",
    "other metrics besides efficiency play an important role in measuring the quality of an allocation . in this section ,",
    "we focus on the display ad allocation ( da ) problem . recall that in the da problem , a set @xmath4 of @xmath5 advertisers have paid a website publisher in advance for their ads to be shown to visitors to the website",
    "; for each advertiser @xmath184 , their contract specifies an upper bound @xmath35 on the number of impressions they wish to pay for .",
    "each agent / impression has a set of @xmath5 options corresponding to the @xmath5 advertisers , and must be assigned to a single advertiser . if we assign impression @xmath12 to advertiser @xmath15 , it occupies one @xmath15 s @xmath35 slots , and we obtain value @xmath46 .",
    "in addition to the overall efficiency of the allocation , an important consideration is its _ fairness _ to the various advertisers ; an advertiser who does not get his `` fair share '' of impressions is unlikely to purchase further contracts for impressions in the future . here , we propose a metric to capture the fairness of an allocation and present algorithms to compute it .",
    "qualitatively , an allocation is `` fair '' if the advertisers are treated fairly relative to each other . as opposed to efficiency , which is easily quantified as the sum of individual advertiser values , fairness is more problematic , as it is inherently a relative ( rather than purely additive ) measure .",
    "one natural option is to consider `` max - min '' fairness , where the goal is to maximize the minimum efficiency among the advertisers  @xcite . while useful in some contexts , in this application max - min fairness gives too much attention to the most difficult - to - satisfy advertiser , abandoning overall performance .",
    "given the diversity of demands , impression targeting criteria and edge weights , a more flexible fairness measure is needed .",
    "in addition , the total weight of impressions assigned to an advertiser depends not only on the eligible set of impressions for that advertiser , but also the competition among advertisers , i.e. , if many advertisers are eligible for the same set of ( high - quality ) impressions , none of these advertisers can get all of these impressions , and these ( high - quality ) impressions should be divided in some manner among the eligible advertisers .",
    "since this competition is intimately related to the structure of the instance , it is difficult to quantify fairness in this context in a universal way ; thus , in order to define a fairness measure capturing the above aspects , we first define an _ ideal ( offline ) fair allocation _ by taking into account advertisers competing for the same set of impressions . we define this allocation algorithmically , i.e. , it is a function of the problem instance .",
    "we then compute the fairness of an arbitrary assignment of impressions to advertisers by computing the distance of this allocation to this ideal fair allocation .",
    "more precisely , we define the fairness measure as follows : given an allocation @xmath49 of impressions @xmath12 to advertisers @xmath15 , let @xmath185 for each @xmath186 denote the value assigned to advertiser @xmath15 .",
    "the @xmath187 can be defined for both 0/1 and fractional allocations @xmath188 in which @xmath189 .",
    "( in a fractional allocation , the advertisers `` share '' the impression , which one could interpret as a random allocation according to the implied distribution . ) for an allocation @xmath188 , we roughly define the fairness metric as the @xmath190 distance between @xmath188 and some ideal allocation @xmath191 , but where @xmath188 is normalized ( scaled linearly ) so that it has the same efficiency as @xmath191 .",
    "this scaling ensures that @xmath188 is judged purely based on its relative efficiency among advertisers , rather than on absolute efficiency .",
    "we scale @xmath188 to match @xmath191 ( rather than the other way around ) so that we may compare the fairness of different allocations with a universal scale .",
    "formally , for an allocation @xmath188 , let @xmath192 .",
    "we define the _ fairness measure _ @xmath193 as @xmath194    thus , the smaller @xmath193 the fairer is allocation @xmath188 .",
    "now , in order to complete the definition of the fairness measure , it remains to define the offline ideal fair allocation @xmath195 .      in this section , we discuss various natural offline fair allocations @xmath195 that can be used in the definition of fairness measure defined above . as we discussed earlier ,",
    "such ideal fair allocation depends on the eligible set of impressions , and the set of advertisers competing for the same impressions .",
    "let @xmath196 be the set of eligible impressions for advertiser @xmath15 with demand @xmath35 .",
    "assuming that weights @xmath46 capture the quality / relevance of impression @xmath12 for advertiser @xmath15 , in an ideal situation , advertiser @xmath15 would like to get all the @xmath35 impressions in @xmath196 with the maximum weight .",
    "in other words , ordering impressions in @xmath196 in the non - increasing order of their weight to @xmath15 , advertiser @xmath15 would ideally want to get a _",
    "prefix _ of @xmath35 impressions in this order . however , it might not be possible for each advertiser @xmath15 to get a prefix of the first @xmath35 impressions in his ideal order , since an impression @xmath12 may appear in the prefix of several advertisers . in such situations",
    ", we should resolve the conflict ( competition ) of _ interested advertisers _ for this impression @xmath12 in a _",
    "fair _ way , and extend the prefix of the affected advertisers .",
    "since we allow the offline fair allocation @xmath191 to be fractional , this competition may be resolved by _ sharing _",
    "each impression among all interested advertisers",
    ". a natural fair way of sharing an impression @xmath12 among a set @xmath197 of interested advertisers is to divide this impression @xmath12 _ equally _ among all advertisers in @xmath197 ,",
    "i.e , each advertiser @xmath198 gets a fraction @xmath199 of impression @xmath12 .",
    "we call this method the _ equal sharing _ method ( we discuss other sharing methods later . )    given an arbitrary sharing policy like the _ equal sharing policy _ defined above , we formally define the notion of a fair allocation @xmath191 in terms of this policy :    [ def : fair ] let @xmath200 be a _ sharing policy _ mapping the advertisers @xmath15 interested in impression @xmath12 to a fractional allocation @xmath201 .",
    "a fractional allocation @xmath202 is _ fair under @xmath200 _ , if    * for each advertiser @xmath15 , the set of impressions that @xmath15 is interested in is a prefix of all impressions ( ordered by @xmath46 ) , * the allocation @xmath191 represents the policy @xmath200 applied to each impression , and * each advertiser is either interested in all impressions , or is receiving at least @xmath35 impressions under @xmath202 .",
    "an alternate way of thinking of a fair allocation is in terms of a game , where each advertiser declares a set of impressions they are interested in , and the mechanism then applies @xmath200 to these declarations .",
    "a fair allocation is then any nash equilibrium of this game .",
    "we call a fair allocation under equal sharing an _ equal share allocation_. one can compute one such fair allocation @xmath191 , in an iterative method , as follows :    1",
    ".   maintain allocation variables @xmath203 and prefix `` pointers '' @xmath204 .",
    "initialize all @xmath205 and @xmath206 .",
    "2 .   until all advertisers are satisfied , i.e. , either @xmath207 or @xmath208 : 1 .",
    "let @xmath15 be some unsatisfied advertiser .",
    "increase @xmath209 by one , and let @xmath12 be the @xmath209-th best impression in @xmath15 s preference order .",
    "also , let @xmath197 be the set of all advertisers @xmath210 for whom @xmath12 is among the @xmath211-th best impressions for that advertiser ( and note @xmath212 ) .",
    "set @xmath49 according to @xmath200 for all @xmath213 .",
    "( for example , under equal sharing , we set @xmath214 . )",
    "note that there could be many different fair allocations , each with different efficiency .",
    "for example suppose there were two impressions @xmath215 , and two advertisers @xmath216 , each with capacity one .",
    "now suppose @xmath217 , @xmath218 , @xmath219 , @xmath220 .",
    "then @xmath221 is a fair allocation with value @xmath222 ; the allocation @xmath223 , @xmath224 is also fair and has value @xmath225 .",
    "however the following theorem shows that the given algorithm always finds the most efficient fair allocation .",
    "[ thm : equalshare ] the _ fair allocation algorithm _ runs in polynomial time and computes an offline fair allocation under any sharing policy where adding an advertiser to the set of interested advertisers does not increase the share of any other advertiser .",
    "moreover , for any sharing policy @xmath200 , this algorithm produces the most efficient allocation among all fair allocations under @xmath200 .    in each iteration of the algorithm , one pointer advances , and",
    "therefore the number of iterations is bounded by the number of edges in the allocation graph , which is polynomial .",
    "to see that it produces the most efficient allocation under any sharing policy @xmath200 , we use the following definition : let @xmath226 and @xmath227 be two fair allocations under @xmath200 , and let @xmath228 be the set of impressions advertiser @xmath15 is interested in for @xmath226 and @xmath227 respectively .",
    "now , @xmath226 is said to be _",
    "shorter than _",
    "@xmath227 if @xmath229 for each advertiser @xmath15 , and the containment is strict for some advertiser .",
    "we show that there exists a unique shortest fair allocation : let @xmath226 and @xmath227 be fair allocations under @xmath200 such that neither is shorter than the other , and define a new allocation in which each advertiser @xmath15 is interested in impressions @xmath230 ( i.e. , @xmath15 requests the shorter prefix from @xmath231 and @xmath232 ) .",
    "it is easy to see that the number of impressions @xmath15 receives in the new allocation is at least the minimum of the number it receives in @xmath226 and @xmath227 , and hence at least @xmath35 if @xmath15 is interested in all impressions in both @xmath226 and @xmath227 , but in this case , @xmath15 is interested in all impressions in the new allocation . ] .",
    "let @xmath191 be the unique shortest allocation , and let @xmath233 denote the set of impressions advertiser @xmath15 is interested in . to see that our algorithm returns @xmath191 ,",
    "consider the first step of the algorithm in which @xmath209 moves beyond @xmath233 for any advertiser @xmath15 : since each other advertiser has so far requested a set of impressions no larger than the set it requests for @xmath191 and @xmath15 receives @xmath35 impressions under @xmath191 , @xmath15 already receives @xmath35 impressions under our algorithm .",
    "thus , @xmath15 would not have been unsatisfied and the prefix pointer @xmath209 would not have been incremented , a contradiction .",
    "finally , it is easy to verify that for any fair allocations @xmath234 , if @xmath226 is shorter than @xmath227 , then @xmath226 is at least as efficient as @xmath227 .",
    "this follows from the facts that @xmath231 is a prefix of @xmath232 when impressions are ordered by @xmath46 , and that for each impression in @xmath231 , @xmath15 receives a share in @xmath226 that is at least as large as it does in @xmath227 .",
    "we can describe other variants of this fair allocation by altering how we share an impression among those interested in it .",
    "one natural way to do this is to divide an impression @xmath12 among all advertisers in @xmath197 , _ proportional to the weight _ of impression @xmath12 for these advertisers , i.e , each advertiser @xmath212 gets a fraction @xmath235 of impression @xmath12 .",
    "we call this sharing method , the _ proportional sharing _ method . by a similar argument to that of theorem  [ thm : equalshare",
    "] , we can show that the algorithm runs in polynomial time .",
    "later , we will discuss the efficiency of such a fair allocation .",
    "inspired by the idea of stable matchings , one can also define an extreme way of sharing an impression @xmath12 among advertisers by introducing a strict preference order for each impression , and giving this impression @xmath12 to an interested advertiser in @xmath197 with the highest priority in the preference order of impression @xmath12 .",
    "in particular , a natural preference order for impression @xmath12 is to order advertisers in non - increasing order of their weight for impression @xmath12 , i.e , @xmath236 .",
    "we call this sharing method , the _ stable - matching sharing _ method .",
    "although this allocation may have some features that do not seem `` fair '' , an advantage of this definition is that it achieves _",
    "approximate efficiency_.    the efficiency of the stable - matching sharing method is at least @xmath41 of the allocation with maximum efficiency .",
    "moreover , the efficiency of the equal - sharing and the proportional - sharing method can be arbitrarily far from the optimum .",
    "first , we observe that the equal- and proportional - sharing methods can result in a fair allocation with arbitrarily bad performance .",
    "consider @xmath237 advertisers ; advertiser @xmath12 has value @xmath238 for impression @xmath12 . in addition",
    ", there is one special impression ; advertiser @xmath160 has value @xmath239 for it , and all other advertisers have value @xmath160 for it .",
    "every advertiser wants 1 impression .",
    "the maximum weight matching gets value at least @xmath239 , by giving the special impression to advertiser @xmath160 , and giving every other advertiser @xmath12 impression @xmath12 .",
    "the proportional sharing method implies that for the special impression ( everyone s first choice ) , the total value for people who want it is @xmath240 . as a result",
    ", the first advertiser only gets roughly @xmath241 of the special impression , and therefore , the fair matching with proportional sharing is not efficient .",
    "the same example shows that the equal sharing method may also result in an inefficient fair allocation .",
    "now , for the stable - matching sharing method , one can verify that the fair allocation in this setting is equivalent to a nash equilibrium of a market sharing game defined as follows : the players are advertisers and markets are impressions @xmath8 .",
    "each player @xmath15 can play a subset @xmath242 of size at most @xmath35 of impressions , and the weight of each impression goes to a player who has this impression in her item set @xmath243 .",
    "it is not hard to show that this game is a valid - utility game with a submodular social function equal to the weight of the corresponding matching in an equilibrium .",
    "it follows by a known result of vetta  @xcite , that the price of anarchy of nash equilibria in these games is @xmath41 , and this implies that the value of the fair matching with stable - matching sharing rule is at least @xmath41 of the optimum solution .    even though , in the worst case , the equal sharing method may result in an arbitrarily inefficient allocation , in practice",
    "it seems that the efficiency of the equal - sharing allocation is on the same order of magnitude as the optimum efficiency ( we will show this in our experiments in section  [ sec : experimental ] ) .",
    "in this section , we list a set of online competitive algorithms for the display ad allocation problem that we will study in our experimental evaluation . some of these algorithms are already known and analyzed for their theoretical worst - case performance  @xcite , and some are combinations of the algorithms studied in this paper .",
    "all of these algorithms can be described based on the primal and dual linear programming formulations for the display ad allocation problem studied in section  [ sec : ptas ] .",
    "in fact , we can interpret these algorithms as simultaneous constructing feasible solutions to the primal and dual lps , using the following outline :    * for each advertiser @xmath15 , initialize dual variable @xmath39 to @xmath114 .",
    "* when an impression @xmath12 arrives online , assign @xmath12 to the advertiser @xmath244 that maximizes @xmath40 .",
    "( if this value is negative for each @xmath15 , we may leave impression @xmath12 unassigned . )",
    "set @xmath245 .",
    "* if @xmath210 previously had @xmath246 impressions assigned , let @xmath247 be the least valuable of these ; set @xmath248 .",
    "* in the dual solution , set @xmath249 and increase @xmath250 using an appropriate _ update rule _",
    "( see below ) ; different update rules give rise to different algorithms / allocations .    in order to define different variants of this algorithm",
    ", we should define the update rule for the dual variables .    1 .",
    "* greedy algorithm :* for each advertiser @xmath15 , @xmath39 is the weight of the lightest impression among the @xmath35 heaviest impressions currently assigned to @xmath15 . that is , @xmath39 is the weight of the impression which will be discarded if @xmath15 receives a new high - value impression .",
    "an equivalent interpretation of this algorithm is to assign each impression to the advertiser with the maximum marginal increase in the weight of the matching .",
    "* uniform average ( ): * for each advertiser @xmath15 , @xmath39 is the average weight of the @xmath35 most valuable impressions currently assigned to @xmath15 . if @xmath15 has fewer than @xmath35 assigned impressions , @xmath39 is the ratio between the total weight of assigned impressions and @xmath35 .",
    "* exponential weighted average ( ) :* for each advertiser @xmath15 , @xmath39 is an `` exponentially weighted average '' of the @xmath35 most valuable impressions , defined as follows : let @xmath251 be the weights of impressions currently assigned to advertiser @xmath15 , sorted in non - increasing order .",
    "+ let @xmath252 .    in the previous paper  @xcite , the authors prove that , , and algorithms achieve worst - case competitive ratios of @xmath41 , @xmath41 , and @xmath1 respectively . in this paper , we will compare these online algorithms with a training - based algorithm which is based on computing dual variables @xmath253 based on some sample data , and then applying these fixed dual variables for the rest of the algorithm .",
    "we also study a hybrid algorithm , called , combining the training - based online algorithm from section  [ sec : ptas ] and a pure online algorithm .",
    "this algorithm is inspired by ideas of mahdian , nazerzadeh , and saberi  @xcite . in this hybrid algorithm , we set @xmath39 for each advertiser @xmath15 to be a convex combination of two algorithms : let @xmath254 be the dual variable learnt by the training - based algorithm and remaining fixed throughout the algorithm and let @xmath255 be the dual variable as currently used by .",
    "we set @xmath256 for some @xmath257 initially we set @xmath258 and we decrease @xmath19 gradually throughout the algorithm until it hits 0 . thus the algorithm starts using the fixed @xmath259 values and gradually switches to the @xmath260 values , which in turn change as impressions are processed . as we will see in the experimental results ,",
    "this algorithm outperforms both the training - based and the algorithm .",
    "in this section , we discuss the experimental results comparing the efficiency and fairness of the algorithms discussed in this paper .    * data set . * our sample data set consists of ( a uniform sample ) of a set of arriving impressions and a set of advertisers for six different publishers ( a - f ) over one week .",
    "the number of arriving impression varies from 200,000 to 1,500,000 impressions , and the number of advertisers per publisher varied from 100 to 2,600 advertisers ( see table  [ tab : info ] ) .",
    "each impression is tagged with their set of eligible advertisers , and an _ edge weight _ for each eligible advertiser capturing the `` quality score '' for assigning this impression to this advertiser .",
    "the distribution of _ edge weights _ approximately follows the log - normal distribution .",
    ".number of advertisers and number of arriving impressions for each of the six publishers . [ cols=\"^,^,^,^,^,^,^\",options=\"header \" , ]     we examine ( a ) three pure online algorithms , ( b ) two training - based online algorithms , and ( c ) two offline algorithms .",
    "( a ) the pure online algorithms are , , and ; see section  [ sec : heuristics ] .",
    "( b ) for the training - based online algorithm we use the primal - dual based algorithm from section  [ sec : ptas ] , called , and the algorithm from section  [ sec : heuristics ] . for both of them we construct the training data as follows : for each data set , sample 1% of the impressions uniformly and use it for training .",
    "the remaining 99% of the impressions are used as a test set . with this sampling step",
    "we hope to proxy the random order model , since in the random order model a sample of the whole data is equivalent to a sample from the beginning part of the sequence .",
    "( c ) as offline algorithms we use the fair algorithm using _ equal sharing _ , called and described in section  [ sec : fair ] , and the algorithm , which computes the optimal efficient assignment ( i.e. the maximum weight b - matching ) .",
    "the latter is computed by solving the primal lp using the glpk lp solver .",
    "the efficiency and ( normalized ) fairness of the output of each of the algorithms are summarized in tables  [ tab : efficiency ] and [ tab : fairness ] .",
    "the results for three representative publishers are additionally depicted in figures  [ fig : ef1 ] ,  [ fig : ef2 ] , and  [ fig : comp ] . recall that we normalized efficiency so that the efficiency - optimal algorithm has efficiency @xmath261 .",
    "table  [ tab : efficiency ] shows that ( 1 ) the training - based algorithms clearly outperform the pure online algorithms , ( 2 ) of the pure online algorithms , both and outperform , and ( 3 ) and perform very similarly , except for one publisher where clearly outperforms .",
    "table  [ tab : fairness ] shows _ normalized _ fairness .",
    "since the value of fairness depends on the values assigned to advertisers and different publishers have different advertisers , we normalized the fairness values for each publisher so that the _ least _ fair algorithm achieves a score of 100 and algorithm achieves a score of 0 .",
    "normalizing allows us to compute the average over different publishers .",
    "the results in the table indicate that is the least fair algorithm .",
    "the remaining algorithms , including , perform roughly the same , though their performance differs over different publishers .",
    "figures  [ fig : ef1][fig : ef2 ] plot efficiency vs. ( unnormalized ) fairness and they show additionally the efficiency achieved for the top 10 advertisers for four of the algorithms . the inverted triangle above each advertiser represents the maximum possible efficiency for this advertiser if the other advertisers did _ not _ exist .",
    "there are three rough categories and the publishers for which we show this data each represent a different category : for publisher b in figure  [ fig : ef1 ] the maximum possible efficiency of the top advertisers is almost the same as the efficiency achieved by all algorithms .",
    "this publisher is undersold with little competition between the advertisers .",
    "thus , for this publisher , the choice of algorithm does not heavily influence efficiency .",
    "table  [ tab : efficiency ] , shows that for publisher b all algorithms , including , achieve an efficiency of 90 or above .",
    "the situation is similar for publisher a ( not shown ) . in both settings",
    "has an impressively high efficiency and achieves a good fairness value .",
    "in such a low - competitive situation the online algorithms are in a clear disadvantage over the offline algorithms .",
    "also the training - based online algorithms outperform the pure online algorithms as they can leverage their knowledge about the data to construct a more efficient and more fair solution .",
    "publisher d in figure  [ fig : comp ] shows the other extreme : here the maximum possible efficiency of the top advertisers is much larger than the efficiency achieved by any of the algorithms , including the optimum .",
    "this publisher has a lot of competition between the advertisers .",
    "publisher f ( not shown ) is in a similar , but a bit less extreme situation . in both cases ,",
    "the choice of an algorithm has a large influence on the efficiency , as can be seen in table  [ tab : efficiency ] : algorithm distributes the weight more evenly across the advertisers than any of the other algorithms , but also achieves only an efficiency of about 42 , resp .",
    "algorithm , on the other side , generates a very uneven distribution of weights , giving a lot of efficiency to advertiser 1 and 8 . for both publishers clearly outperforms the non - optimal algorithms .",
    "also has better theoretical performance .",
    "finally publishers c ( in figure  [ fig : ef2 ] ) and e ( not shown ) represent the `` in - between '' situation : the maximum possible efficiency of the top advertisers is somewhat larger than the efficiency achieved by the algorithms , but there is not a large gap . in both cases",
    "the training - based algorithms clearly outperform the pure online algorithms in efficiency .",
    "thus , this is the situation where learning clearly helps in terms of efficiency .",
    "overall we draw the following conclusions :    algorithm generally achieves much better efficiency and fairness than , even though both algorithms are @xmath262-competitive in the worst case .",
    "algorithm also results in the best fair solution among all algorithms and has the worst fairness measure .",
    "the training - based algorithms generally achieve higher efficiency than the pure online algorithms , especially in settings that are not too extreme , i.e. , oversold or undersold . on average , improves 12% over , and 5% over .",
    "furthermore , has a marginal improvement ( of 2% on average , and upto 10% ) over , mostly based on a big improvement for one publisher .    though the worst - case competitive analysis of is much better than , this algorithm showed only @xmath263 overall improvement over , and in one case showed a significant loss in efficiency .",
    "however , in highly competitive settings , gives large improvements .",
    "in this paper , we give a training - based algorithm for online allocation , and prove that in the random - order stochastic model , it achieves a @xmath264 approximation to the optimal solution under mild assumptions .",
    "we also considered the display ad allocation problem from both a theoretical and empirical perspective , studying fairness in addition to efficiency .",
    "we introduced different notions of offline fair allocations , and present a new fairness measure as a distance to such offline fair allocations .",
    "finally , we performed an experimental evaluation of our training - based algorithm , along with previously studied online algorithms and some hybrid algorithms .",
    "we compared their performance on data sets from real display ad allocation problems ; our experiments show that among the pure online algorithms designed for worst - case inputs , performs reasonably well in terms of both efficiency and fairness , and gives large improvements for more difficult instances .",
    "the training - based algorithm outperforms and by a large factor , and combining pure online and training - based methods in a hybrid algorithm improves the efficiency further .",
    "this paper motivates many open problems to explore : ( i ) can we achieve an algorithm that is simultaneously good both in the worst case and in stochastic settings ?",
    "such an algorithm would be of use when the actual distribution of agents is different from the one predicted / learnt from a sample ; in the display ad setting , this occurs when there is a sudden spike in traffic to a website , perhaps in response to a breaking news event , or links from an extremely high - traffic source .",
    "( ii ) can we design an online allocation algorithm that provably achieves approximate efficiency and approximate fairness ( for some an appropriate notion of fairness ) at the same time ?",
    "( iii ) can we prove that in certain settings that appear in practice , the algorithm achieves an improved approximation factor ( i.e. , better than @xmath41 ) ?",
    "( iv ) can we extend the online stochastic algorithm studied in this paper to other stochastic process models such as markov - based stochastic models ? answering these questions is an interesting subject of future research .",
    "* acknowledgments .",
    "* this paper is a followup of our previous work with s. muthukrishnan and martin pl , and some of the results and discussions in this paper are inspired by our initial discussions with them .",
    "we thank martin and muthu for their contributing insights toward this paper .",
    "we also thank the google display ad team , and especially scott benson for helping us with data sets used in this paper ."
  ],
  "abstract_text": [
    "<S> inspired by online ad allocation , we study online stochastic packing linear programs from theoretical and practical standpoints . </S>",
    "<S> we first present a near - optimal online algorithm for a general class of packing linear programs which model various online resource allocation problems including online variants of routing , ad allocations , generalized assignment , and combinatorial auctions . as our main theoretical result </S>",
    "<S> , we prove that a simple primal - dual training - based algorithm achieves a @xmath0-approximation guarantee in the random order stochastic model . </S>",
    "<S> this is a significant improvement over logarithmic or constant - factor approximations for the adversarial variants of the same problems ( e.g. factor @xmath1 for online ad allocation , and @xmath2 for online routing ) . </S>",
    "<S> we then focus on the online display ad allocation problem and study the efficiency and fairness of various training - based and online allocation algorithms on data sets collected from real - life display ad allocation system . </S>",
    "<S> our experimental evaluation confirms the effectiveness of training - based primal - dual algorithms on real data sets , and also indicate an intrinsic trade - off between fairness and efficiency .    </S>",
    "<S> [ lemma]theorem [ lemma]assumption [ lemma]definition [ lemma]corollary [ lemma]proposition [ lemma]claim [ lemma]remark [ lemma]proposition    @xmath3    [ 1]*proof of # 1 . *    @xmath3    # 1 # 1*pr * </S>"
  ]
}