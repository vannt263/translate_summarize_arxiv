{
  "article_text": [
    "this work is concerned with /s that are written using the meta - language of ellipses : terms such as , for example , the ordered @xmath1-tuple maker : @xmath2 ) .",
    "as the use of ellipses indicates , the syntax for such /s is described _ for any given @xmath1 _ , in the meta - language of the / , i.e. , in the language in which we describe the syntax of /s .",
    "the index @xmath1 is thus a meta - variable .",
    "it is only after we have picked a natural number for @xmath1 , that we can write down an actual / , and it will be `` hard - coded '' for that specific @xmath1 .",
    "for example , the ordered @xmath3-tuple maker is defined as @xmath4 , can be written without ellipses , and is `` hard - coded '' for @xmath5 .",
    "but what if we want @xmath1 , which determines the syntactic structure of the / , to be an argument in the language of the / : how do we go from a / whose syntax is indexed or parameterized by a meta - variable over the natural numbers in the meta - language of the / to a corresponding / parameterized by a church numeral ?    in this work ,",
    "we present a systematic approach for encoding terms whose syntax is parameterized by a meta - variable and written using ellipses , to /s that take a church numeral @xmath6 as an argument , and return the corresponding / for that given @xmath1 .",
    "we call such /s _ / _ , following the work of weirich and casinghino on",
    "_ / datatype - generic programming _  @xcite .",
    "when we speak of an / / @xmath7 , we require two things :    1 .",
    "we have in mind an @xmath1-ary term @xmath8 in the meta - language of the / , that is parameterized by a meta - variable @xmath9 . for any specific value of @xmath1 , @xmath8 is a / : @xmath10 , etc .",
    ", are all /s .",
    "2 .   for all @xmath11 , @xmath12 .      in combinatory logic , bases provide a standard approach to constructing inductively larger combinators from smaller combinators .",
    "we follow this approach by augmenting the standard of @xmath13 basis introduced by /  @xcite , curry  @xcite , turner  @xcite , and many others , with /s @xmath14 of the respective @xmath15 combinators .",
    "we then encode @xmath14 in terms of @xmath13  ( section  [ sec : agext ] ) .",
    "@xmath14 can then be used to encode straightforwardly those parts of the term that use ellipses using an / of the / algorithm for the @xmath16 basis .    in principle , we could have stopped at this point , since @xmath17 would already be sufficient to encode any / term .",
    "we chose , however , to use @xmath14 to define @xmath18 , which are the / generalizations of @xmath19 , because turner s _ / algorithm _ for the basis @xmath13 extends naturally to the basis @xmath20 .",
    "this extended algorithm  ( section  [ sec : extending ] ) maintains the simplicity of turner s original algorithm , and generates compact encodings for /  /s .",
    "the second part of this work  ( section  [ sec : induct ] ) demonstrates how the new basis can be used to encode interesting / /s , such as multiple fixed - point combinators .",
    "for background material on the / , we refer the reader to church s original book on the / , _ the calculi of lambda conversion _",
    "@xcite , curry s two volumes _ combinatory logic i , ii _  @xcite , and barendregt s encyclopedic textbook , _ the lambda calculus : its syntax and semantics _  @xcite . here",
    "we briefly list the /s and notation used throughout this work .",
    "[ cols= \" < , < , < \" , ]     to give some intuition as to the rle the different combinators of the basis play in the algorithm , let us analyze just one single case : where @xmath21 : @xmath22 hence we have the rule that @xmath23    the correctness of this algorithm is shown by induction on the _ length _ of the term , rather than by structural induction , because , for example , while @xmath24 , clearly @xmath25 is not a sub - expression of @xmath26 , and the same holds for other cases in the proof .",
    "* example : * we demonstrate the / algorithm by applying it to @xmath27 : @xmath28",
    "in turner s original bracket - abstraction algorithm , the rule for @xmath29 was a base case : @xmath30 the @xmath1-ary and / of the rule for @xmath29 abstracts @xmath1 variables @xmath31 , and is also a base case : @xmath32      note that @xmath34 .",
    "accordingly , @xmath33 is used in the original / algorithm to abstract a variable @xmath35 over an expression @xmath36 , where @xmath37 : @xmath38 the @xmath1-ary and / of the rule for @xmath33 allows for abstracting @xmath1 variables @xmath31 over an expression @xmath36 , where @xmath39 : @xmath40      note that @xmath42 where @xmath43 .",
    "accordingly , @xmath41 is used in the original / algorithm to abstract a variable @xmath35 over an application @xmath44 , where @xmath43 : @xmath45 the @xmath1-ary and / of the rule for @xmath41 allows for abstracting @xmath1 variables @xmath31 over an application @xmath46 , where @xmath39 and @xmath47 : @xmath48      note that @xmath50 where @xmath51 .",
    "accordingly , @xmath49 is used in the original / algorithm to abstract a variable @xmath35 over an application @xmath52 , where @xmath51 : @xmath53 the @xmath1-ary and / of the rule for @xmath49 allows for abstracting @xmath1 variables @xmath31 over an application @xmath54 , where @xmath55 : @xmath56      note that @xmath58 where @xmath59 .",
    "accordingly , @xmath57 is used in the original / algorithm to abstract a variable @xmath35 over an application @xmath60 , where @xmath59 : @xmath61 the @xmath1-ary and / of the rule for @xmath57 allows for abstracting @xmath1 variables @xmath31 over an application @xmath62 , where @xmath63 : @xmath64      in turner s / algorithm , each of the combinators @xmath65 is used to encode an abstraction of a variable over an expression : the @xmath33 combinator is used when the variable does not occur freely in the expression .",
    "the @xmath66 combinators are used when the variable abstracts over an application of two expressions , and correspond to the situations where the given variable occurs freely in one or in both expressions .",
    "we extended turner s / algorithm by introducing four additional rules for @xmath67 , corresponding to the abstraction of a _ sequence of variables _ of an expression .",
    "the extended algorithm shares the simplicity of turner s original algorithm , and generates compact encodings for /  /s .    in those situations",
    "where @xmath68 , we can use the @xmath33-introduction rule to obtain from @xmath36 a @xmath69-equal expression @xmath70 for which @xmath71 .    for any @xmath1-ary / @xmath72 that is written with ellipses ,",
    "a corresponding / / @xmath73 can be defined , such that for any natural number @xmath1 , we have @xmath74",
    ".    _ sketch of proof _ : by induction on the length of @xmath72 , a corresponding rule can be applied in the extended algorithm , so that the rewritten expression is / and satisfies the above relation to @xmath72 .",
    "* example : * church  @xcite introduces the / @xmath75 , which is encoded via turner s algorithm as @xmath76 .",
    "how would the @xmath1-ary and / extensions be encoded ?    _ the @xmath1-ary extension _",
    ": @xmath77",
    "_ the / extension _ : @xmath78 so as we can see , the extended basis @xmath20 provides a natural extension of the original basis for encoding / /s .",
    "the _ selector _ combinators return one of their arguments . for @xmath79",
    "such that @xmath80 , the selector that returns the @xmath81-th of its @xmath82 arguments is defined as follows : @xmath83 an / version of the selector , which we write as @xmath84 , would take /s @xmath85 and return @xmath86 .",
    "we generate @xmath86 in two states : first , we generate a selector in which only the first argument is returned : @xmath87 we then tag on @xmath81 additional abstractions .",
    "suppose we have @xmath88 that are defined as follows : @xmath89 we define the / @xmath90 to map @xmath91 for all @xmath1 .",
    "the relationship between @xmath36 and @xmath92 is given by @xmath93 , and so : @xmath94 we use @xmath90 to generate @xmath95 by applying the @xmath96-th composition of @xmath90 to the identity combinator @xmath29 . from this",
    "we obtain @xmath86 by @xmath97 applications of @xmath33 .",
    "we can now define @xmath84 as follows : @xmath98 this definition satisfies the requirement that @xmath99 .",
    "the _ projection _ combinators take an @xmath1-tuple and return the respective projection : @xmath100 the standard way of defining projections is to take an @xmath1-tuple and apply it to the corresponding selector : @xmath101    the definition of the / extension @xmath102 can be written in terms of @xmath84 : @xmath103 this definition satisfies the requirement that @xmath104 .      in his textbook _ the lambda calculus : its syntax and semantics _",
    "@xcite , barendregt introduces one of the standard constructions for @xmath1-tuples : @xmath105 the ordered @xmath1-tuple maker @xmath106 takes @xmath1 /s and returns their ordered tuple . although most texts on the / use it implicitly by using ordered tuples as generalizations to the syntax of the / , it is easily definable : @xmath107 we wish to define the / of the @xmath1-tuple maker @xmath108 , such that : @xmath109 we relate @xmath106 with @xmath110 as follows : @xmath111 using this relation , we define the / @xmath90 to map @xmath112 for all @xmath1 : @xmath113 notice that @xmath114 , so we can obtain @xmath106 by applying the @xmath1-th composition of @xmath90 to @xmath115 . we define @xmath108 as follows : @xmath116    this definition satisfies the requirement that @xmath117 , so for example , @xmath118 .",
    "the task of defining the @xmath106 combinator is given as an exercise in the author s course notes on the /  @xcite , where the combinator is referred to as _ malloc _ , in a tongue - in - cheek reference to the c library function for allocating blocks of memory .",
    "a useful property of our representation of ordered @xmath1-tuples , is that it gives us _ left - associated _ applications immediately : @xmath119 this behavior can be used to apply some expression to its arguments , where these arguments are passed in an @xmath1-tuple , in much the same way as the ` apply ` procedure in lisp  @xcite , which takes a procedure and a list of arguments , and applies the procedure to these arguments .",
    "one notable difference though , is that the / does not have a notion of / procedures , and so the procedure we wish to apply must `` know '' now many arguments to expect .",
    "we can thus define : @xmath120    because functions in the / are curried , and therefore applications associate to the left , @xmath121 combinator proides for _ left - associated _ applications . for _ right - associated _ applications",
    ", we would like to have an / version of the following @xmath1-ary / : @xmath122 we begin by writing @xmath123 in terms of @xmath124 : @xmath125 the / @xmath90 such that @xmath126 is given by : @xmath127 notice that @xmath128 , so we can obtain @xmath124 by applying the @xmath1-th composition of @xmath90 to @xmath115 .",
    "we define @xmath129 as follows : @xmath130 this definition satisfies the requirement that @xmath131 .",
    "applying @xmath110 to @xmath1 arguments results in a / that takes an argument and returns an @xmath82-tuple , in which the given argument is the @xmath82-st projection .",
    "we use this fact to extend an @xmath1-tuple by an additional @xmath82-st element : @xmath132 we can use it as follows : @xmath133    similarly , we can define the / @xmath134 , for creating an @xmath135-tuple given an @xmath1-tuple and a @xmath81-tuple : @xmath136 for example : @xmath137      when working with indexed expressions , it is convenient to have the _ iota_-function ( written as the greek letter @xmath138 , and pronounced `` yota '' ) , which maps the number @xmath139 to the vector @xmath140 . iota was introduced by kenneth iverson first in the apl notation  @xcite , and then in the apl programming language  @xcite .",
    "we implement the @xmath138 combinator to take a church numeral @xmath6 and return the ordered @xmath1-tuple @xmath141 . given the standard definition of ordered @xmath1-tuples , it is natural to define @xmath142 .",
    "we know that @xmath143 so the / @xmath90 such that @xmath144 can be characterized as follows : @xmath145 we define @xmath90 as follows : @xmath146 the / @xmath147 such that @xmath148 is defined as follows : @xmath149 we now define @xmath138 as follows : @xmath150    this definition satisfies the requirement that @xmath151 .",
    "it is often useful to be able to reverse the arguments to a function or an @xmath1-tuple .",
    "we can define an @xmath1-ary reversal combinator @xmath152 as follows : @xmath153 @xmath152 can be used in two ways :    1 .",
    "we can use it to reverse an ordered @xmath1 tuple : @xmath154 2 .   we can use it to take @xmath1 arguments are return their @xmath1-tuple , in reverse order : @xmath155    we would like to define @xmath156 , the / of @xmath152 , such that @xmath157 .",
    "we start by writing @xmath158 in terms of @xmath152 : @xmath159 the / @xmath90 that takes a church numeral @xmath6 , and maps @xmath160 , is given by : @xmath161 the / @xmath147 such that @xmath162 is given by : @xmath163 notice that @xmath164 , so we can obtain @xmath152 by applying the @xmath1-th composition of @xmath147 to @xmath115 .",
    "we define @xmath156 as follows : @xmath165 note that @xmath157 .    below are examples of two slightly different ways of using @xmath156 : @xmath166      we would like to define the combinator @xmath167 , such that : @xmath168 let : @xmath169 we define @xmath170 in terms of @xmath171 : @xmath172 using this relation , we define the / @xmath147 to map @xmath173 for all @xmath1 : @xmath174 notice that @xmath175 , so we can obtain @xmath171 by applying the @xmath1-th composition of @xmath147 to @xmath115 . we define @xmath176 as follows : @xmath177    we now define @xmath167 as follows : @xmath178 this definition satisfies the requirement that @xmath179 .",
    "by now we have the tools nee- ded to construct / , multiple fixed - point combinators in the /.",
    "fixed - point combinators are used to solve fixed - point equations , resulting in a single solution that is the _",
    "least _ in a lattice - theoretic sense .",
    "when moving to @xmath1 multiple fixed - point equations , multiple fixed - point combinators are needed to solve the system , giving a set of @xmath1 solutions , that once again , are the least in the above - mentioned lattice - theoretic sense .",
    "a set of @xmath1 multiple fixed - point combinators are /s @xmath180 , such that for any @xmath1 /s @xmath181 , and @xmath182 we have : @xmath183    brevity is one motivation for the construction of an / fixed - point combinator . using ordinary multiple fixed - point combinators , @xmath1 combinators are needed for _ any _ choice of @xmath1 , which means that if we wish to solve several such systems of equations , we need a great many number of multiple fixed - point combinators .",
    "in contrast , an / fixed - point combinator can be used to find _ any _ multiple fixed - point in a system of _ any _ size : it takes as arguments two church numerals @xmath184 , which specify the size of the system , and the specific multiple fixed - point , and returns the specific multiple fixed - point combinator of interest .",
    "other reasons for using an / fixed - point combinator have to do with the size of the multiple fixed - point combinators and their correctness : the size of the @xmath1-ary extensions of curry s and turing s historical fixed - point combinators is _ quadratic _ to the number of equations , or @xmath185 .",
    "specifying such large terms , be in on paper , in latex , or in a computerized reduction system is unwieldy and prone to errors .",
    "an / fixed - point combinator is surprisingly compact , because the size of the system is specified as an argument .",
    "recall curry s single fixed - point combinator : @xmath186 generalizing curry s single fixed - point combinator to @xmath1 multiple fixed - point equations yields a sequence @xmath187 of @xmath1 multiple fixed - point combinators , where @xmath188 is defined as follows : @xmath189 given the system of fixed - point equations @xmath190 , the @xmath81-th multiple fixed - point is given by @xmath191 .",
    "our inductive definition ( on the syntax of / ) is sufficiently precise and well - defined that we can construct , for any given @xmath11 , a set of multiple fixed - point combinators .",
    "but if @xmath1 is a variable , rather than a constant , then this will not do .",
    "let @xmath192 .",
    "starting with the inner common sub - expression @xmath193 , we note that : @xmath194 the / fixed - point combinator @xmath195 takes @xmath184 , and returns @xmath188 , which is the fixed - point combinator that takes @xmath1 generating functions , and returns the @xmath81-th of @xmath1 multiple fixed - points : @xmath196 abstracting the variables @xmath85 over @xmath197 respectively , we define the / extension of curry s multiple fixed - point combinator : @xmath198 this definition satisfies the requirement that @xmath199 .",
    "recall turing s single fixed - point combinator : @xmath200 generalizing turing s single fixed - point combinator to @xmath1 multiple fixed - point equations yields a sequence @xmath201 of @xmath1 multiple fixed - point combinators , where @xmath202 is defined as follows : @xmath203 our construction follows similar lines as with the @xmath1-ary generalization of @xmath204 . for a given @xmath1 , the ordered @xmath1-tuples @xmath205 are defined as follows : @xmath206 respectively .    as before , we begin by encoding a common sub - expression @xmath207 , as follows : @xmath208    the / of turing s multiple fixed - point combinator is given by : @xmath209 we define @xmath210 by abstracting @xmath197 over the above , to get : @xmath211 this definition satisfies the requirement that @xmath212 .      in sections [ sssec :",
    "curryfpc ] and [ sssec : turingfpc ] we introduced @xmath1-ary generalizations of curry s and turing s / for solving systems of multiple fixed - point equations .",
    "the goal of this section is to show that these generalizations are , in a precise sense , natural , and obey a well - known relation that holds between the two original , single /s .    in his textbook _",
    "the lambda calculus : its syntax and semantics _  @xcite , barendregt mentions , in the proof of proposition  6.5.5 , a result due to / , that relates curry s and turing s /s :    let @xmath213 .",
    "we have : @xmath214    to understand whence this / @xmath215 comes , consider the definition of a / : a term @xmath216 , such that for all @xmath35 , @xmath217 is a fixed point of @xmath35 , and so we have : @xmath218 abstracting over @xmath35 , we get a recursive definition for @xmath216 , that can be rewritten as a fixed - point equation : @xmath219 we can solve this fixed - point equation using _ any _ /.",
    "if @xmath216 is a / , then @xmath220 is also a /.",
    "after we prove these to be distinct in the @xmath221 sense , we can define an infinite chain of distinct /s .",
    "furthermore , @xmath215 relates @xmath204 and @xmath222 in an interesting way : @xmath223 , which is a stronger relation than @xmath224 .    for the purpose of this work ,",
    "we consider @xmath1-ary generalizations of @xmath204 and @xmath222 to be natural if they satisfy a corresponding @xmath1-ary generalization of the above relation .",
    "we now define @xmath1-ary generalizations of the above term @xmath215 .",
    "if @xmath225 are a set of @xmath1 multiple /s , then for any @xmath31 and @xmath226 , it satisfies : @xmath227 where @xmath228 .",
    "the @xmath1-ary generalizations of @xmath229 are given by @xmath230 , respectively , for all @xmath226 .",
    "[ prop : mnk ] for any @xmath231 and each @xmath232 , we have @xmath233 .",
    "@xmath234 we would like to define the combinator @xmath235 , which is the / of the @xmath236 , such that : @xmath237    we start with @xmath236 : # 1#2 ( _  @ @xmath238 we generate such a repeated application by repeatedly applying the function @xmath90 , defined so that @xmath239",
    ". assuming the variable @xmath1 , which stands for the church numeral @xmath6 in the previous expression , and which occurs free in @xmath90 , we define @xmath90 as follows : @xmath240 we can now use @xmath90 to define @xmath236 : @xmath241 we now define @xmath235 by abstracting @xmath197 over the parameterized expression , to get : @xmath242 this definition satisfies the requirement that @xmath243 .",
    "combined with proposition  [ prop : mnk ] , it follows that for @xmath244 and for each @xmath226 , we have : @xmath245 .",
    "the stronger @xmath246 property does not hold when working with encodings , which are by definition , @xmath69-equivalent . finally , just as @xmath215 was used to construct a chain of infinitely - many different /s , so can @xmath235 be used to construct a chain of infinitely - many / /s : if @xmath247 are @xmath1 multiple /s , then so are # 1 @ @xmath248 and so are @xmath249 etc",
    ".      we defined @xmath1-ary ( @xmath230 ) and / ( @xmath250 ) generalizations of curry s and turing s /s , and showed that these generalizations maintain the @xmath1-ary and /s of the relationship originally discovered by /.",
    "the significance of / /s is that they are _ single terms _ that parameterize over the number of fixed - point equations and the index of a fixed point , so they can be used to find any fixed point of any number of fixed - point equations : they can be used interchangeably to define mutually - recursive procedures , mutually - recursive data structures , etc .",
    "for example , if @xmath251 are the _ even _ and _ odd _ generating functions given by : @xmath252 then we can use curry s / / to define the /s that compute the _ even _ and _ odd _ functions on church numerals as follows : @xmath253 alternatively , we can use turing s / / to do the same : @xmath254    it might seem intuitive that in order to generate @xmath1 multiple fixed points , we would need @xmath1 generating expressions , and this intuition is responsible for the @xmath185 size of the @xmath1-ary extensions of curry s and turing s /s . a more compact approach , however , is to pass along a single aggregation of the @xmath1 fixed points , which can be done using a single generator function that is applied to itself .",
    "this approach was taken by kiselyov  @xcite in his construction of a variadic , multiple / in scheme :    .... ( define y *    ( lambda s      ( ( lambda ( u ) ( u u ) )       ( lambda ( p )         ( map ( lambda ( si )                 ( lambda x                   ( apply ( apply si ( p p ) ) x ) ) )               s ) ) ) ) ) ....    a corresponding / version can be encoded in the / in two ways .",
    "first , to emphasize the brevity of this construction , we can write : @xmath255 note that since the @xmath121 combinator reverses its two arguments , we can avoid it altogether by reversing its two arguments _ in situ _ ,",
    "essentially _ inlining _ the @xmath121 combinator .",
    "then for any @xmath11 , let @xmath256 be some /s , and let @xmath247 be a set of @xmath1 multiple /s , @xmath257 satisfies : @xmath258 but to be consistent with how we defined and used other / terms , we should rather define a curried variant @xmath259 : @xmath260 this variant takes a church numeral , followed by @xmath1 /s , and returns the @xmath1-tuple of their multiple fixed points : @xmath261    so it seems that the shortest known multiple fixed - point combinator in scheme translates to a very short multiple fixed - point combinator in the / , perhaps the shortest known as well .      in a previous work  @xcite",
    ", we have shown that for any @xmath1 /s @xmath262 , which need not even be combinators , it is possible to define a single term @xmath263 that generates @xmath264 .",
    "such a term is known as a _",
    "one - point basis _  ( * ? ? ?",
    "* section  8.1 ) .",
    "it is straightforward to construct a _ dispatcher _",
    "/ @xmath265 , such that @xmath266 , for all @xmath226 .",
    "let @xmath267 , where @xmath268 .",
    "then , for any @xmath226 , we have : @xmath269 notice that a different dispatcher is needed for each @xmath1 , and for each @xmath262 .    using our / basis",
    ", we can abstract a church numeral over our construction , and obtain an / one - point basis _ maker_. we define @xmath215 so as to use an / selector to dispatch over @xmath1 expressions : @xmath270 we use @xmath215 to define the / basis maker @xmath271 : @xmath272 we may now define @xmath271 as follows : @xmath273 we can use @xmath271 as follows . for any @xmath274 and @xmath275 , we can define @xmath263 as follows : @xmath276 we now have : @xmath277 notice that we have made no assumptions about @xmath278 , and in particular , have not required that they be combinators .",
    "our one - point basis maker , @xmath271 , provides an abstract mechanism for packaging /s , in a way that they can later be `` unpacked '' .",
    "we used our extended basis and / algorithm to encode useful / /s of increasing complexity .",
    "we took the approach that working with sequences of expressions in an intuitive , modular and systematic way should resemble `` list processing '' known from / and other functional programming languages .    in the spirit of list processing ,",
    "the first part of this section introduces / /s for picking elements of sequences , constructing ordered @xmath1-tuples , applying /s to the elements of a tuple , extending and reversing tuples , and constructing new ordered @xmath1-tuples by _ mapping _ over existing tuples .",
    "all these /s correspond to the basic machinery for list processing , e.g. , in /.",
    "once these were defined , we were ready to look at more complex / /s .",
    "our detailed examples include / /s , and an / generator for one - point bases .",
    "we encoded /s of two historical /s by curry and turing .",
    "these /s maintain a relationship discovered by / , so it is natural to wonder whether this relationship is maintained in the /s of these /s , and we have shown this to be the case up to @xmath69-equivalence .",
    "we then encoded an / generator for one - point bases , so that any number of /s can be `` compacted '' into a single expression from which they can be generated .",
    "we tested all the / definitions in this work using a normal - order reducer for the / , and have verified that they behave as expected on an array of examples .",
    "the expressive power of the / has fostered the advent of functional languages .",
    "for example , the algorithmic language scheme  @xcite was developed as an interpreter for the / , and offered programmatic support for playing with @xmath0-definability , from church numerals to a call - by - value version of curry s fixed - point combinator  @xcite . since scheme provides linguistic support for variadic functions",
    ", it has become a sport to program call - by - value fixed - point operators for variadic functions .",
    "queinnec presented the scheme procedure ` nfixn2 ` , that is a variadic , applicative - order multiple fixed - point combinator  ( * ? ? ?",
    "* pages  457458 ) .",
    "the author presented one that directly extends curry s fixed - point combinator  @xcite and was a motivation for section  [ ssec : mfpcs ] .",
    "the original aim of the combinatory - logic program , as pursued by /  @xcite , was the elimination of bound variables  @xcite .",
    "to this end , / introduced five constants , each with a conversion rule that described its behavior .",
    "these constants are known today as @xmath279 .",
    "while / did not leave an explicit _ abstraction algorithm _ for translating terms with bound variables to equivalent terms without bound variables  @xcite , cardon and hindley claim it extremely likely that he knew of such an algorithm  @xcite .",
    "as far as we have been able to verify , the first to have considered the question of how to encode inductive and / /s was curry , first in an extended combinatory logic framework  @xcite , where curry first mentions such variables , and refers to them as _ apparent variables _ , and later , for combinatory logic  ( * ? ? ?",
    "* section  5e ) . we have not found this terminology used elsewhere , and since the term _ / _ is much more self - explanatory , we have chosen to stick with it .",
    "abdali , in his article _ an abstraction algorithm for combinatory logic _",
    "@xcite , presented a much simpler algorithm for encoding inductive and / /s .",
    "abdali introduces the terms :    * @xmath280 , which is an / of @xmath33 , and identical to the @xmath281 combinator used throughout this article . *",
    "@xmath282 , which is an / selector , and is identical to the @xmath84 combinator introduced in section  [ ssec : sel ] .",
    "* @xmath283 , which is a _ double _ / of curry s @xmath284 combinator  @xcite , generalized for two independent indices .",
    "these combinators can augment any basis , and provide for a straightforward encoding of / /s .",
    "abdali does not explain how he came up with the double generalization of curry s @xmath216 combinator , or how he encoded the definitions for @xmath285 in terms of the basis he chose to use .",
    "/ expressions encoded using @xmath285 , are not as concise as they could be , because the @xmath283 combinator introduces variables even in when they are not needed in parts of an application , and in such cases , a subsequent projection is needed to remove them .",
    "barendregt  @xcite seems to have considered this question at least for some special cases , as in exercises  8.5.13 and 8.5.20 , the later of which he attributes to david a. turner .- ary expressions and their encoding in the / , it is plausible that he had really intended to refer to another article by turner , also published in 1979 : _ another algorithm for bracket abstraction _",
    "@xcite . ]",
    "/ s original @xmath279 basis , coupled with turner s / algorithm for that basis , offers several advantages in terms of brevity of the resulting term , simplicity , intuitiveness and ease of application of the algorithm . in the original / algorithm for @xmath279 ,",
    "the length of the encoded / is less than or equal to the length of the original / , because each application is replaced by a combinator , and abstractions are either represented by a single combinator , or are removed altogether through @xmath286-reduction .",
    "the additional / combinators with which we extended the @xmath279 basis maintain this conciseness , because a sequence of left - associated applications to a sequence of variables is replaced by a single / combinator , and a sequence of curried , nested /s is either removed via repeated @xmath286-expansions , or is replaced with by a single / combinator .",
    "the extension of the basis and the corresponding / algorithm to handle / /s is straightforward and intuitive .",
    "the ellipsis ( ` @xmath287 ' ) and its typographical predecessor ` & c ' ( an abbreviation for the latin phrase _ et cetera _ ,",
    "meaning `` and the rest '' ) have been used as meta - mathematical notation , to abbreviate mathematical objects ( numbers , expressions , formulae , structures , etc . ) for hundreds of years , going back to the 17th century and possibly earlier .",
    "such abbreviations permeate the writings of isaac newton , john wallis , leonhard euler , carl friedrich gauss , and up to the present . despite its ubiquity , and perhaps as a paradoxical tribute to this ubiquity , the ellipsis does not appear as an entry in standard texts on the history of mathematical notation , even though the authors of these texts make extensive use of ellipses in their books  @xcite . neither is the ellipsis discussed in the kleene s classical text on metamathematics  @xcite , nor does it even appear as an entry in the list of symbols and notation at the end of the book , even though kleene makes extensive use of the ellipses both in the main text as well as in the list of symbols and notation .",
    "discussions about the ellipsis and its meanings seem to concentrate in computer literature : roland backhouse refers to the ellipsis as the _ dotdotdot notation _ in one of the more mathematical parts of his book _ program construction : calculating implementations from specifications _",
    "* section  11.1 ) , and suggests that they have many disadvantages , the most important being that ``  it puts a major burden on the reader , requiring them to interpolate from a few example values to the general term in a bag of values . ''",
    "some of the examples of ellipses he cites can be rewritten using summations , products , and the like .",
    "others , however involve the meta - language , e.g. , functions that take @xmath1 arguments , where @xmath1 is a meta - variable .",
    "such examples of ellipses can not be removed as easily .",
    "the ellipsis also appears in some programming languages . in some languages ( c , c++ , and java )",
    "it is used to define variadic procedures . in other languages",
    "( ruby , rust , and gnu extensions to c and c++ ) it is used to define a range . in scheme ,",
    "the ellipsis is part of the syntax for writing macros , which can be thought of as a meta - language for scheme .",
    "a formal treatment of ellipses in the macro language for scheme was done by eugene kohlbecker in his phd thesis  @xcite .",
    "/ terms are somewhat reminiscent of _ variadic _ procedures in programming languages : the term _ variadic _ , introduced by strachey  @xcite , refers to the _ arity _ of a procedure , i.e. , the number of arguments to which it can be applied . a _",
    "dyadic _ procedure can be applied to two arguments .",
    "a _ triadic _ procedure can be applied to three arguments .",
    "variadic _ procedure can be applied to any number of arguments .",
    "programming languages that provide a syntactic facility for defining variadic procedures include c++ and /.",
    "the / has no such syntactic facility , and so it is somewhat of a misnomer to speak of _ variadic /s _ , since the number of arguments is an _ explicit _",
    "parameter in our definitions , whereas in the application of a variadic procedure to some arguments , the _ number _ of arguments is _ implicit _ in an implementation .",
    "nevertheless , within the classical , untyped / , / /s provide an expressivity that comes very close to having variadic /s .",
    "variadic procedures are not just about the procedure _",
    "interface_. when used in combination with ` map ` and ` apply ` , they can provide a kind of generality that is typically deferred to the meta - language or macro system  @xcite .",
    "/ / achieves similar generality in the classical / , with some notable differences : variadic procedures are applied to arbitrarily - many arguments , and their parameter is bound to the list of the values of these arguments . by contrast , / expressions take the number of arguments , and return that many curried @xmath0-abstractions . in this work ,",
    "we used ordered @xmath1-tuples , rather than linked lists , as is common in most functional programming languages , in what is perhaps reminiscent of array programming languages . as a result of the choice",
    "to use ordered @xmath1-tuples , the _ apply _ operation became very simple .",
    "it would be straightforward to choose to use linked lists instead , at the cost of having to define _ apply _ as a _",
    "left fold _ operation .    in this work",
    "we show how to define , in the language of the / , expressions that contain meta - linguistic ellipses , the size of which is indexed by a meta - variable .",
    "for such an indexed / @xmath8 , our goal was to find a term @xmath7 that takes @xmath1 as an explicit parameter , and assuming it to be a church numeral denoting the size of the indexed expression , evaluates to @xmath8 : @xmath288 .",
    "we call @xmath7 an / of @xmath289 .",
    "of course , our choice of using church numerals in this paper is based on their ubiquity .",
    "in fact , any numeral system can be used , and we have also constructed an / basis around scott numerals  @xcite .    our approach has been to extend the basis @xmath13 with the /s of @xmath65 combinators and to extend turner s / algorithm to handle abstractions of sequences of variables over an expression .",
    "we then used this extended basis and this extended / algorithm to encode / /s .",
    "our goal has not been to remove all abstractions in / terms , but only those abstractions that are over sequences of variables . of course , it is possible to remove all remaining abstractions , but our goal here has been to define indexed expressions in the / , without resorting to meta - linguistic ellipses , for which the removal of all abstractions is unnecessary .    in the first part of this work we presented a natural , / to / s @xmath13 basis for the set of combinators in the / , and extended turner s / algorithm to make use of the additional / combinators in the extended basis .",
    "the extended algorithm retains the conciseness and simplicity of turner s original algorithm .",
    "the second part of this work uses the / basis and the corresponding / algorithm to develop tools for / / , and incidentally demonstrates how the / basis can be used : we introduced several / /s that perform a wide variety of computations on ordered @xmath1-tuples .",
    "these computations were inspired by , and resemble to some extent , the facilities for _ list manipulation _ that are native to the / programming language  @xcite : terms that compute mappings , reversal , / fixed - point combinators , / one - point bases , etc .",
    "implementing in the / a functional subset of the list processing capabilities of / is a popular exercise .    in his textbook on the / ,",
    "barendregt states that there are two ways to define ordered @xmath1-tuples : inductively , using nested ordered pairs , and another way , which barendregt characterizes as being `` more direct '' , as @xmath290  @xcite .",
    "section  [ ssec : ntuplemaker ] shows how to make this more direct definition inductive .    in a previous work  @xcite",
    ", we derived an applicative - order , variadic fixed - point combinator in scheme . in that work",
    ", we relied on scheme s support for writing variadic procedures , and consequently , on the primitive procedure ` apply ` , to apply procedures to lists of their arguments . in the present work",
    ", we had control over the representation of sequences , so we could encode an / version of ` apply ` , as well as / /s , all within the /.",
    "the author is grateful to his anonymous reviewers and to his editor , neil d. jones .",
    "thanks are also due to john franco and albert meyer for comments and questions about a previous work , and to olivier danvy for his encouragement and suggestions .",
    "felice cardone and j.  roger hindley .",
    "lambda - calculus and combinators in the 20th century . in dov",
    "m. gabbay and john woods , editors , _ logic from russell to church _ ,",
    "volume  5 of _ handbook of the history of logic _ , pages 723817 .",
    "north - holland , 2009 .",
    "moses schnfinkel . .",
    ", 92:305316 , 1924 . translated by stefan bauer - mengelberg as `` on the building blocks of mathematical logic '' , in jean van heijenoort , 1967 . _ a source book in mathematical logic _ , 18791931 .",
    "harvard university press .",
    "pages  35566 .",
    "christopher strachey .",
    "fundamental concepts in programming languages .",
    "international summer school in computer programming , copenhagen , denmark , august 1967 . reprinted in higher - order and symbolic computation 13(1/2):1149 , 2000 .",
    "gerald  j. sussman and guy  l. steele jr .",
    "scheme : an interpreter for extended lambda calculus .",
    "ai memo 349 , artificial intelligence laboratory , massachusetts institute of technology , cambridge , massachusetts , december 1975 . reprinted in higher - order and symbolic computation 11(4):405439 , 1998 .",
    "christopher  p. wadsworth .",
    "some unusual @xmath0-calculus numeral systems . in jonathan",
    "p. seldin and j.  roger hindley , editors , _ to h. b. curry : essays on combinatory logic , lambda calculus and formalism _ , pages 215230 . academic press , london , 1980 .",
    "stephanie weirich and chris casinghino .",
    "arity - generic datatype - generic programming . in _ proceedings of the 4th acm sigplan workshop on programming languages meets program verification _ , plpv 10 , pages 1526 , new york , ny , usa , 2010 ."
  ],
  "abstract_text": [
    "<S> ellipses are a meta - linguistic notation for denoting terms the size of which are specified by a meta - variable that ranges over the natural numbers . in this work , </S>",
    "<S> we present a systematic approach for encoding such meta - expressions in the / , without ellipses : terms that are parameterized by meta - variables are replaced with corresponding @xmath0-abstractions over actual variables . </S>",
    "<S> we call such /s _ </S>",
    "<S> /_. concrete terms , for particular choices of the parameterizing variable are obtained by applying an / / to the corresponding numeral , obviating the need to use ellipses .    </S>",
    "<S> for example , to find the multiple fixed points of @xmath1 equations , @xmath1 different /s are needed , every one of which is indexed by two meta - variables , and defined using three levels of ellipses . a single / / that takes two church numerals , </S>",
    "<S> one for the number of fixed - point equations , and one for their arity , replaces all these multiple fixed - point combinators . </S>",
    "<S> we show how to define /s of two historical /s , the first by curry , and the second by turing , for defining multiple fixed points . </S>",
    "<S> these historical /s are related by a construction due to / : we show that likewise , their /s are related by an / of / s construction .    </S>",
    "<S> we further demonstrate this approach to / / with additional /s that create , project , extend , reverse , and map over ordered @xmath1-tuples , as well as an / generator for one - point bases . </S>"
  ]
}