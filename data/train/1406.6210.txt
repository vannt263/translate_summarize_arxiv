{
  "article_text": [
    "the collision channel without feedback model @xcite is investigated in this paper .",
    "there are total @xmath0 potential users and at most @xmath1 users are active at the same time . _",
    "_  @xcite are used to provide multiple - access .",
    "let @xmath2 be a binary protocol sequence with length @xmath3 assigned to user @xmath4 .",
    "each active user sends its packet to a common sink if and only if the assigned sequence value equals one .",
    "the channel time is partitioned into fixed - length slots and the packet length exactly occupies a slot .",
    "a total overlap of packets occurs if more than one user start their transmission simultaneously ; and a partial overlap of packets occurs if one packet starts or ends its transmission within the transmission duration of some other packet .",
    "any partial or total overlap of packets would incur a collision . a packet without suffering from any collision",
    "is received error - free ; otherwise it is assumed to be unrecoverable . as there is no feedback from the receiver and no cooperation among the users ,",
    "each user has a relative delay offset .",
    "let @xmath5 be the time offset of user @xmath4 for @xmath6 , measured in time slot duration units . as introduced in  @xcite , there are two different levels of synchronization :    1 .",
    "the channel is _ slot - synchronized _",
    "if all users start transmitting at the slot boundaries , i.e. , the time offsets @xmath7 are arbitrary integers .",
    "collisions will result only when packets totally overlap .",
    "the channel is _ slot - asynchronous _",
    "if all users do not know the slot boundaries of the channel , i.e. , the time offsets @xmath7 are arbitrary real numbers .",
    "some collisions may be incurred by partial overlap of packets .",
    "a set of @xmath0 binary sequences @xmath8 is said to be an _",
    "@xmath9 protocol sequence set _",
    "@xcite if any sequence is of length @xmath3 , hamming weight @xmath10 , and has the property that each active user can transmit at least @xmath11 packets successfully in a period of @xmath3 slots in the worst case .",
    "when @xmath12 , we say this sequence set enjoys the _ nonblocking property_. obviously , whether @xmath12 or not highly depends on the assumption of synchronization .",
    "let @xmath13 be a codeword of weight  @xmath10 over @xmath14 .",
    "since a binary sequence of length @xmath3 can be identified with a subset of @xmath14 representing the indices of nonzero positions , a set of @xmath0 protocol sequences can be viewed as a code consisting of @xmath0 codewords . in order to provide the nonblocking property at different levels of synchronization , the following two classes of codes have been studied as protocol sequences extensively in the literature .    1 .",
    "an @xmath9 protocol sequence set is a _ conflict - avoiding code _ ( cac )",
    "@xcite if @xmath15 and @xmath16 in the slot - synchronized case .",
    "an @xmath9 protocol sequence set is a _ strongly conflict - avoiding code _ ( scac )",
    "@xcite if @xmath15 and @xmath16 in the slot - asynchronous case .",
    "scacs consider a more practical channel model .",
    "as @xmath17 , both cacs and scacs require that there is at most one collision between any two distinct sequences for any relative delay offsets .",
    "however , collisions incurred by partially overlapped transmissions need to be additionally considered in the design of scacs .",
    "this yields different combinatorial structures of cacs and scacs , as argued in  @xcite . before presenting them accordingly in section  [ sec : preliminary ] , we provide an example first as the following .",
    "@xmath18 @xmath19 forms a cac with @xmath20 and @xmath21 . however , it is not an scac . for @xmath22 , @xmath23 and @xmath24 , all packets from user 1",
    "are lost due to two partial overlappings and one complete overlapping , as illustrated in fig .",
    "[ fig : packet ] .        in the study of cac or scac , the main theme is to find as many sequences ( or , codewords ) as possible , for a given pair of integers @xmath3 and @xmath25 .",
    "if a cac or scac enjoys the maximal size of codewords , then this code is said to be _",
    "optimal_.    asymptotically optimal and optimal cacs for general weights were investigated in  @xcite .",
    "based on previously known constructions of cacs , asymptotically optimal scacs are derived in @xcite under the assumption that each codeword possesses a special structure , called equi - difference . moreover , optimal cacs of weight three are investigated in @xcite .",
    "the code size spectrum of optimal cacs with even length and weight three has been completely settled by these studies . however ,",
    "relatively little is known about the code size of optimal scacs . in this paper",
    ", we are going to find optimal scacs of even length and weight three , which can be applied to more realistic scenarios .",
    "the rest of this paper is organized as follows . in section  [ sec : preliminary ] , we introduce some relevant definitions and relative known results in the literatures , as well as present a necessary condition for the existence of an scac . several useful properties of codewords in an scac are given in section  [ sec : property ] .",
    "new upper bounds on the size of scacs are derived in section  [ sec : bound ] . in section  [ sec : optimal ] we prove that some upper bounds in section  [ sec : bound ] are indeed tight in several cases . finally , conclusions are given in section  [ sec : conclusion ] .",
    "let @xmath26 denote the ring of residues modulo @xmath3 and @xmath27 denote the set of all @xmath10-subsets of @xmath14 .",
    "each element @xmath28 can be identified with a binary sequence of length @xmath3 and weight @xmath10 representing the indices of the nonzero positions .",
    "therefore , a cac or scac of length @xmath3 and weight @xmath10 can be viewed as a subset of @xmath27 .",
    "we call elements in @xmath27 _ codewords_.    for a codeword @xmath29 , let @xmath30 denote the _ set of differences _ between pairs of elements in @xmath13 , and let @xmath31 denote the _ set of non - zero differences _ in @xmath13 . then a formal definition of a cac can be given as follows .",
    "a cac of length @xmath3 and weight @xmath10 is a subset @xmath32 satisfying the condition that for all @xmath33 , @xmath34    for given @xmath3 and @xmath25 , let @xmath35 denote the class of all cacs of length @xmath3 and weight @xmath25 .",
    "the maximum size of a code in @xmath35 is denoted by @xmath36 .",
    "a code @xmath37 is said to be _ optimal _ if @xmath38",
    ".    given two subsets @xmath39 , let @xmath40 .",
    "then an scac can also be defined by means of @xmath41 and @xmath42 .",
    "an scac of length @xmath3 and weight @xmath10 is a subset @xmath32 satisfying the condition that for all @xmath33 , @xmath43 this definition captures all the possibilities of partial collisions in slot asynchronous systems .    similarly , for given @xmath3 and @xmath25 , let @xmath44 denote the class of all scacs of length @xmath3 and weight @xmath25 .",
    "the maximum size of a code in @xmath44 is denoted by @xmath45 .",
    "a code @xmath46 is said to be _ optimal _ if @xmath47 .    given a code @xmath48 in @xmath35 or @xmath44 , a codeword @xmath49",
    "is called _ equi - difference _ if all its elements form an arithmetic progression in @xmath14 , i.e. , @xmath50 for some @xmath51 , where the product @xmath52 is calculated modulo @xmath3 . the element @xmath53 is called the _ generator _ of @xmath13 . without loss of generalization",
    ", we assume @xmath54 in this paper .",
    "a code is called _ equi - difference _ if it entirely consists of equi-difference codewords .",
    "we use @xmath55 ( or @xmath56 ) to denote the maximum code size among all equi - difference cacs ( or scacs ) of length @xmath3 and weight @xmath25 .    for",
    "a codeword @xmath29 define the _ set of shifted non - zero differences _ of @xmath13 by @xmath57 .",
    "then the definition of an scac can be rewritten as follows .",
    "@xmath58 if and only if    1 .",
    "@xmath59 for all @xmath60 ; and 2 .",
    "@xmath61 for all @xmath62 .",
    "[ prop : property ]    proposition  [ prop : property ] implies directly that for any @xmath46 , the following holds : @xmath63    let @xmath64 be a subset of @xmath14 . a subset of @xmath64 which consists of consecutive integers is called a closed interval .",
    "a closed interval @xmath65 is maximal if for any other closed interval @xmath66 , either @xmath67 or @xmath68 .",
    "obviously , @xmath64 can be uniquely partitioned into several maximal closed intervals , called _",
    "tubes_. a tube is denoted by @xmath69 if its smallest and largest integer are @xmath70 and @xmath71 , respectively .",
    "@xmath69 is called _ o - rough _ if @xmath70 and @xmath71 are both odd , _ e - rough _ if @xmath70 and @xmath71 are both even , and _",
    "flat _ otherwise .",
    "on the other hand , @xmath72 can also be uniquely partitioned into several maximal closed intervals .",
    "they can be viewed as _ gaps _ in @xmath64 .",
    "note that the elements @xmath73 are not taken into consideration because in what follows , we will focus on @xmath64 s which are shifted non - zero difference set of some codeword in an scac and thus @xmath74 by .",
    "we denote a gap with the smallest integer @xmath70 and largest integer @xmath71 by @xmath75 .",
    "similar to tubes , we also classify gaps into e - rough , o - rough and flat gaps .",
    "note that it is possible @xmath76 for some gaps but not for tubes of shifted non - zero difference sets .",
    "assume that @xmath48 is an scac and @xmath77 is one of its codewords .",
    "we use @xmath78 ( resp . , @xmath79 ) to emphasize a tube ( resp . , a gap ) in the shifted non - zero difference set @xmath80 .",
    "for example , let @xmath81 be one codeword in some code @xmath82 . then @xmath83",
    ". there are one o - rough tube @xmath84 ; two flat tubes @xmath85 , @xmath86 ; and one e - rough tube @xmath87 .",
    "on the other hand , there are two e - rough gaps @xmath88 ; one flat gap @xmath89 ; and two o - rough gaps @xmath90 , @xmath91 .",
    "now , we define a special gap , called _ solitary _ gap , in a code .",
    "consider a given scac , @xmath48 , and one of its codewords @xmath77 .",
    "let @xmath79 be a gap in @xmath80 and @xmath92 be a tube in @xmath93 .",
    "if @xmath94 and @xmath95 , then this tube is said to be included in the gap , denoted by @xmath96 .",
    "an e - rough ( or o - rough ) gap @xmath79 is said to be _ solitary _ if there is no e - rough ( or o - rough ) tube @xmath92 in @xmath93 such that @xmath96 .",
    "for example , let @xmath97 , @xmath98 and @xmath99 be the three codewords in a code @xmath100 .",
    "then it can be checked that @xmath101 is solitary .",
    "we summarize some previously known deterministic results on cacs and scacs of weight three in this subsection .",
    "@xmath102 for any @xmath103 ( mod 4 ) .",
    "[ thm : lt05 ]    let @xmath104 . then @xmath105 [ thm : cac_4 t ]    the followings hold .",
    "1 .   @xmath106 if @xmath107 for @xmath108 .",
    "2 .   @xmath109 if @xmath110 for @xmath111 .",
    "[ thm : knowcac ]    @xmath106 if    1 .",
    "@xmath112 for @xmath111 , or 2 .",
    "@xmath113 for @xmath108 .",
    "[ thm : knowcac2 ]    as for scacs of weight three , there are few results reported in the literature . an exception is the following .",
    "let @xmath3 be an integer factorized as @xmath114 , where @xmath115 is an even integer not divisible by 3 or 7 .",
    "then for @xmath116 we have @xmath117 [ thm : knowscac ]      we close this section with the following necessary condition for the existence of an scac .",
    "the result delineates the impact of solitary gaps and is based on scac characteristics presented in proposition  [ prop : property ] .",
    "consider a given code @xmath46 .",
    "if there exists one codeword , say @xmath77 , having @xmath118 solitary gaps in @xmath80 , then @xmath119 [ lemma : gap ]    let @xmath79 be one of the @xmath118 solitary gaps in @xmath80 .",
    "we assume that @xmath79 is e - rough , i.e. , @xmath70 and @xmath71 are both even .",
    "this implies the number of even integers in @xmath79 is one more than that of odd integers . by the definition of the solitary gap",
    ", we can not find an e - rough tube in @xmath93 , say @xmath92 , such that @xmath96 . from the defining property of flat and o - rough tubes , we know the number of odd integers in a flat or o - rough tube is equal to or bigger than that of even integers",
    ". thus we always can find an even integer in @xmath79 which is not included in @xmath93 . for the case @xmath79 is o - rough , the proof goes along the same line as above and is omitted .",
    "the result is that there exists an odd integer not included in @xmath93 .",
    "we conclude that at least @xmath118 integers in the interval @xmath120 $ ] do not belong to @xmath93 , since there exist @xmath118 solitary gaps in @xmath80 .",
    "following proposition  [ prop : property ] , we finally obtain that @xmath121",
    "lemma  [ lemma : gap ] provides a recipe for upper bounding the size of scac , which relies on @xmath122 for different codewords . in this section",
    ", we derive @xmath122 for any codeword @xmath13 .",
    "the following definition is useful for the evaluation of @xmath122 .",
    "we adopt the terminology in  @xcite and say that a codeword @xmath13 is _ dispersive _ if any two distinct elements in @xmath123 are not consecutive .",
    "otherwise , it is _ non - dispersive_.    by proposition  [ prop : property](i ) , @xmath124 if @xmath13 is a dispersive codeword in an scac .      let @xmath125 be a non - equi - difference codeword in a code @xmath126 for some @xmath127 and @xmath128 .",
    "after setting @xmath129 , we have @xmath130 now , we write @xmath131 in an ascending order as @xmath132 . since @xmath133 is non - equi - difference , @xmath132 must be mutually distinct and thus @xmath134 therefore , @xmath135    let @xmath13 be a non - equi - difference codeword in a code @xmath126 with even @xmath3 and @xmath136 , where the three parameters @xmath137 satisfy @xmath138 and the inequality in . if @xmath139 , then    1 .",
    "@xmath140 if @xmath141 ; and 2 .",
    "@xmath142 otherwise .",
    "[ lemma : nonc1 ]    by the assumption that @xmath139 , can be written as @xmath143 and thus @xmath144 .",
    "moreover , @xmath145 and @xmath139 imply respectively that @xmath146 and @xmath147",
    ". then we have @xmath148 note that the notation @xmath149 refers to disjoint union operation , which is used to emphasize that the two involved sets are disjoint .",
    "if @xmath150 , then @xmath151 , and @xmath152 is exactly equal to @xmath153 .",
    "hence @xmath154 in this case .",
    "if @xmath155 , then @xmath156 and @xmath157 are included in @xmath152 but not @xmath158 .",
    "similarly , if @xmath159 , then @xmath160 and @xmath161 are in @xmath162 . in either case , we obtain @xmath163 .",
    "this completes the proof .",
    "for example , let @xmath164 . if @xmath165 , then @xmath166 and @xmath154 . if @xmath167 , then @xmath168 and @xmath169 .",
    "let @xmath13 be a non - equi - difference codeword in a code @xmath126 with even @xmath3 and @xmath136 , where the three parameters @xmath137 satisfy @xmath138 and the inequality in .",
    "if @xmath170 , then    1 .",
    "@xmath171 if @xmath172 , @xmath173 ; and 2 .",
    "@xmath142 otherwise .",
    "[ lemma : nonc2 ]    we first consider @xmath174 . in this case , can be written as @xmath175 it is easy to see that @xmath161 and @xmath176 are in @xmath162 .",
    "we now claim that @xmath160 and @xmath177 are also in @xmath162 .",
    "suppose the assertion is not true ; that is , @xmath178 . by the assumption that @xmath138 , we have @xmath179 , which contradicts to proposition  [ prop : property](i ) .",
    "therefore , @xmath180 and thus @xmath163 .    as for the case of @xmath173 , can be written as @xmath181 by the same argument , @xmath182 and @xmath176 are in @xmath162",
    ". then we have @xmath183 if @xmath184",
    ", then @xmath185 must be equal to @xmath186 and @xmath154 .",
    "if @xmath187 , then @xmath156 and @xmath157 will be in @xmath162 , and thus @xmath163 .",
    "for example , let @xmath188 . if @xmath167 , then @xmath189 and @xmath154 . if @xmath190 , then @xmath191 and @xmath169 .",
    "let @xmath13 be a non - equi - difference codeword in a code @xmath126 with even @xmath3 such that @xmath192 and has at least one rough tube .",
    "assume that @xmath136 , where the three parameters @xmath137 satisfy @xmath138 and the inequality in .",
    "then , @xmath172 , @xmath173 .",
    "[ prop : tube ]    by lemma  [ lemma : nonc1 ] and lemma  [ lemma : nonc2 ] , there are two possible codewords satisfying @xmath192 .",
    "they are the codeword with @xmath193 and that with @xmath194 , and both have @xmath140 . by the definition of rough tubes ,",
    "only the latter one has at least one rough tube .",
    "we start this subsection with the following known result on equi - difference codewords .",
    "let @xmath195 and @xmath13 be one of its equi - difference codewords",
    ". then we have @xmath196 [ lemma : g1 ]    lemma  [ lemma : g1 ] obviously holds for the case of @xmath126 due to @xmath197 .",
    "a codeword @xmath13 in a cac or scac of weight three is called _ exceptional _ @xcite if @xmath198 .",
    "therefore , there are at most two exceptional equi - difference codewords in a cac or scac of weight three .",
    "let @xmath13 be a non - dispersive equi - difference codeword with generator @xmath53 in an code in @xmath44 .",
    "if there are @xmath1 ( @xmath199 ) pairs of consecutive elements in @xmath158 , then we have    1 .",
    "@xmath200 ( mod @xmath3 ) with @xmath201 ; 2 .",
    "@xmath53 and @xmath202 are both relatively prime to @xmath3 ; 3 .",
    "@xmath13 is non - exceptional .",
    "[ thm : equi3 ]    following lemma  [ thm : equi3 ] we have :    let @xmath13 be a non - dispersive equi - difference codeword with generator @xmath53 in a code in @xmath203 with even @xmath3 .",
    "then there are two pairs of consecutive elements in @xmath158 and @xmath204 [ lemma : g2 ]    suppose there are @xmath1 ( @xmath205 ) pairs of consecutive elements in @xmath158",
    ". since @xmath3 is even and @xmath206 , by lemma  [ thm : equi3](i)(ii ) , we have @xmath207 , @xmath208 and @xmath209 by the assumption that @xmath54 , we have @xmath210 , and thus the above equation can be reduced to @xmath211 note that @xmath13 is non - exceptional by lemma  [ thm : equi3 ] ( iii ) .",
    "now we are ready to derive results on @xmath122 for a different type of equi - difference @xmath13 as follows .",
    "let @xmath13 be an equi - difference codeword with generator @xmath53 in a code in @xmath203 with even @xmath3 .",
    "then we have @xmath212 [ thm : cs ]    corollary  [ lemma : g2 ] promises that there is only one non - dispersive equi - difference codeword : @xmath213 or @xmath214 . in either case",
    ", we always have @xmath215 .",
    "we now consider that @xmath13 is dispersive .",
    "it is obvious that @xmath124 .",
    "then the result follows from lemma  [ lemma : g1 ] .",
    "as proved in lemma  [ lemma : nonc1 ] ,  lemma  [ lemma : nonc2 ] and theorem  [ thm : cs ] , we conclude that in an scac with even length and weight three there are four types of codeword @xmath13 satisfying @xmath216 , each of which is equi - difference .",
    "we classify them in table  [ table : w8 ] with notations @xmath217 , and make an illustration by the following example .",
    "@xmath218    for example , let @xmath219 .",
    "then @xmath220 , @xmath221 and @xmath222 , the equi - difference codewords generated by 2 , 7 and 9 respectively , form a code in @xmath223 .",
    "we have @xmath224 , @xmath225 and @xmath226 .",
    "notice that @xmath227 as the generator @xmath228 , and @xmath229 as the generator @xmath230 ( i.e. , @xmath231 is non - dispersive ) .",
    "following the result of @xmath122 for different types of codewords in section 3 , we establish upper bounds on @xmath232 under different conditions of @xmath3 .",
    "since any codeword @xmath13 in an scac with even length and weight three has @xmath233 except the four cases listed in table  [ table : w8 ] , we first discuss @xmath232 according to the presence of the four codewords : @xmath234 , @xmath235 , @xmath236 and @xmath237 . in the following lemma , therefore , @xmath3 is classified according to its remainder after dividing @xmath238 .",
    "note that we only consider @xmath239 in this section as @xmath240 if @xmath241 ( see @xcite ) .",
    "[ lemma : upperbound_1 ] let @xmath239 .",
    "then , @xmath242    let @xmath48 be a code in @xmath203 with @xmath243 .",
    "assume that the numbers of codewords @xmath244 in @xmath48 are @xmath245 , respectively .",
    "we first consider the case of @xmath246 ( mod @xmath238 ) . in this case ,",
    "@xmath247 , @xmath248 and @xmath249 by table  [ table : w8 ] . by proposition  [ prop :",
    "property ] , we have @xmath250 since @xmath251 , @xmath252 , and @xmath233 if @xmath13 is neither @xmath234 nor @xmath235 , by we have @xmath253 hence @xmath254 .",
    "the other five cases can be dealt with in the same way .",
    "then we complete the proof .    in the following lemma",
    ", we investigate the case of @xmath255 ( mod @xmath256 ) in more detail .",
    "[ lemma : upperbound_2 ] let @xmath239 .",
    "if @xmath255 ( mod @xmath256 ) , then @xmath257    similar to the setting in the proof of lemma  [ lemma : upperbound_1 ] , let @xmath48 be a code in @xmath203 with @xmath243 and assume that the numbers of codewords @xmath244 in @xmath48 are @xmath245 , respectively . the conditions @xmath258 and @xmath259",
    "imply that @xmath247 , @xmath248 and @xmath249 .",
    "we aim to show that @xmath260 .",
    "observe that @xmath261 since @xmath262 is odd , @xmath263 has four rough gaps . among other possible codewords in @xmath48 , only non - equi - difference codewords may have rough tubes .",
    "moreover , if a codeword @xmath13 has rough tubes , we have @xmath163 by proposition  [ prop : tube ] and the assumption that @xmath255 ( mod @xmath256 ) .",
    "assume that there are @xmath264 non - equi - difference codewords in @xmath13 .",
    "if @xmath265 , then by we have @xmath266 if @xmath267 , otherwise , then the four rough gaps in @xmath263 are all solitary .",
    "by plugging @xmath268 into lemma  [ lemma : gap ] , we have @xmath269 in either case , we obtain @xmath260 due to @xmath255 ( mod @xmath256 ) .",
    "we end this section by collecting the results in lemma  [ lemma : upperbound_1 ] and [ lemma : upperbound_2 ] .",
    "[ thm : upperbound ] let @xmath116",
    ". then @xmath270",
    "in this section we will show that the upper bounds of @xmath232 obtained in theorem  [ thm : upperbound ] are indeed tight in several cases . to construct scacs attaining these upper bounds ,",
    "we revisit a construction of scacs from existing cacs proposed in @xcite .",
    "let @xmath271 be a cac of length @xmath3 and weight @xmath10 . for @xmath272 define @xmath273 .",
    "by viewing each @xmath274 as an @xmath10-subset of @xmath275 , it is obvious that @xmath276 and @xmath277 for all @xmath62 . thus , @xmath278 forms an scac of length @xmath279 and weight @xmath10 by proposition  [ prop : property ] .",
    "note that the strategy of doubling all elements in @xmath77 is equivalent to that of padding an extra zero after each entry when considering @xmath77 as a binary sequence .",
    "if there exists a cac of @xmath0 codewords in @xmath35 , then there exists an scac of @xmath0 codewords in @xmath280 .",
    "[ thm : construction ]    by theorem  [ thm : construction ] , it is easy to see that @xmath281 whenever @xmath3 is even .",
    "therefore , we can obtain several optimal scacs by theorem  [ thm : upperbound ] , theorem  [ thm : construction ] and some known optimal cacs listed in section  [ sec : pre_known ] .",
    "[ cor : scac_even1 ] let @xmath116 .",
    "then ,    1",
    ".   @xmath282 if @xmath283 ( mod @xmath284 ) ; 2 .",
    "@xmath285 if @xmath286 , @xmath287 or @xmath288 for some @xmath264 ; 3 .",
    "@xmath289 if @xmath290 for some @xmath264 .    a bound of @xmath232 for each @xmath246 ( mod 8) is also obtained .",
    "[ cor : scac_even2 ] let @xmath291 for some @xmath292 .",
    "then , @xmath293    in what follows we consider cacs of odd length and weight three .",
    "let @xmath294 with odd @xmath3 and @xmath133 be one of its codewords . since @xmath3 is odd , we have @xmath295    we say a code @xmath195 has _ leave _",
    "@xmath296 if @xmath297 if @xmath296 is empty , then the code @xmath298 is said to be",
    "_ tight_. by  , we have the following .    [ pro : optimal_with_leave ] let @xmath48 be a code in @xmath299 having leave @xmath296 , where @xmath300 is an odd integer .",
    "if @xmath301 and @xmath302 , then @xmath298 is optimal .",
    "moreover , @xmath303    let @xmath304 be an odd integer and @xmath305 be a graph with vertex set @xmath306 and edge set @xmath307 , defined by @xmath308 if @xmath309 ( mod @xmath3 ) . then the graph @xmath305 is a union of disjoint cycles . note that a loop is considered as a cycle of length @xmath310 , and a pair of multiedges is considered as a cycle of length @xmath311 .",
    "@xmath305 is useful in finding the number @xmath312 .",
    "more precisely , an edge @xmath313 in @xmath305 represents the equi - difference codeword @xmath314 in a code of length @xmath3 , then the number @xmath312 is determined by the size of _ maximum matching _ in @xmath305 .",
    "let @xmath315 be the number of odd cycles in @xmath305 .",
    "the following equation was given in @xcite .",
    "@xmath316 where @xmath317 or 0 depends on the statement @xmath318 is true or false .    for an odd integer @xmath319 let @xmath320 be the smallest exponent @xmath321 such that @xmath322 ( mod @xmath323 ) , and let @xmath324 be the smallest exponent @xmath325 such that @xmath326 ( mod @xmath323 ) .",
    "the exponent @xmath320 and @xmath324 are called the _ multiplicative order _ and the _ multiplicative suborder _ of @xmath311 modulo @xmath323 , respectively . for any odd prime @xmath327 , fu et al .",
    "@xcite characterize the number @xmath328 in terms of @xmath329 and derive a necessary and sufficient condition for a tight cac of weight three .",
    "[ thm : o_prime ] let @xmath327 be an odd prime .",
    "then , @xmath330    [ thm : tight_codition ] let @xmath331 be an odd integer , where @xmath332 are distinct prime factors and each @xmath333 .",
    "there exists a tight equi - difference code @xmath195 if and only if one of the following holds :    a.   @xmath334 and each @xmath335 satisfies the third condition in theorem [ thm : o_prime ] ; or b.   @xmath336 , and for @xmath337 , @xmath335 satisfies the third condition in theorem  [ thm : o_prime ]",
    ".    in @xmath305 , the _ standard cycle _ , denoted as @xmath338 , is the cycle which contains @xmath310 .",
    "given a cycle @xmath339 in @xmath305 and an integer @xmath340 .",
    "the _ modulo product _ of @xmath341 by @xmath340 , denoted by @xmath342 , is the cycle @xmath343 ( mod @xmath3 ) in @xmath305 where each item takes symmetry with respect to @xmath344 ; and , the _ normal product _ of @xmath341 by @xmath340 , denoted by @xmath345 , is the cycle @xmath343 in @xmath346 .",
    "two cycles are said to be _ congruent _ , denoted as @xmath347 , if they have the same length and one of them is a modulo or normal product of the other one .",
    "it is easy to see that @xmath348 . besides , it is not difficult to see that every cycle in @xmath305 can be written as @xmath349 for some integer @xmath350 .",
    "some properties of @xmath305 and @xmath351 are given .",
    "[ lem : cyclelength ] let @xmath3 be an odd integer .    1 .",
    "@xmath351 divides @xmath352 .",
    "2 .   let @xmath349 be a cycle in @xmath305 for some integer @xmath340 .",
    "if @xmath353 , then @xmath354 . in particular ,",
    "@xmath355 .",
    "we now consider equi - difference cacs with small leave set @xmath296 .",
    "the main result is as follows .",
    "[ thm:1_leave_condition ] let @xmath331 be an odd integer , where @xmath332 are distinct prime factors and each @xmath333 .",
    "there exists an equi - difference code @xmath195 with leave @xmath296 of size @xmath311 , @xmath356 , if one of the followings holds :    a.   @xmath334 and each @xmath335 satisfies the third condition in theorem [ thm : o_prime ] with exactly one exception , say @xmath357 , which satisfies @xmath358 and @xmath359=1 ; or b.   @xmath336 , and for @xmath337 , @xmath335 satisfies the third condition in theorem  [ thm : o_prime ] with exactly one exception , say @xmath357 , which satisfies @xmath360 and @xmath359=1 .",
    "c.   @xmath361 , and for @xmath337 , @xmath335 satisfies the third condition in theorem  [ thm : o_prime ] .",
    "there exists such a code if and only if ( i ) @xmath362 and @xmath363 or ( ii ) @xmath364 and @xmath258 . in the following",
    "we shall prove that conditions ( a ) implies ( i ) and conditions ( b ) and ( c ) imply ( ii ) .",
    "( a)@xmath365(i ) : let @xmath1 be a factor of @xmath3 . we first claim that @xmath366 .",
    "it it clear that @xmath367 is odd .",
    "assume that @xmath1 is a multiple of some prime factor @xmath368 .",
    "since @xmath369 ( mod @xmath1 ) implies @xmath369 ( mod @xmath327 ) , we have @xmath370 .",
    "suppose to the contrary that @xmath371 is odd . by lemma  [ lem : cyclelength](2 ) , @xmath372 .",
    "this implies that @xmath373 is odd , which contradicts to @xmath374 .    since each cycle in @xmath305",
    "can be written as the form @xmath375 , where @xmath340 is an integer in its cycle .",
    "lemma  [ lem : cyclelength](2 ) says that @xmath376 where @xmath377 , then the length of @xmath375 is odd only when @xmath378 .",
    "hence , @xmath379 .",
    "( b)@xmath365(ii ) : let @xmath1 be a factor of @xmath3 . similar to above argument , @xmath371 is even if @xmath1 is a multiple of some prime factor @xmath380 ; and , @xmath371 is odd if @xmath381 or @xmath357 .",
    "therefore , it suffices to claim that @xmath382 is even .",
    "we shall prove a stronger property that @xmath383 note that @xmath384 if and only if @xmath385 ( mod @xmath323 ) for some @xmath340 .",
    "suppose to the contrary that @xmath386 .",
    "then @xmath385 ( mod @xmath387 ) for some @xmath340 .",
    "this implies that @xmath385 ( mod @xmath357 ) and thus @xmath388 , a contradiction to the original assumption .",
    "so , we have @xmath389 . in addition ,",
    "@xmath390 and @xmath391 imply that @xmath392 . by lemma  [ lem : cyclelength](1 )",
    ", @xmath382 divides @xmath393 , we have @xmath394 this completes the second case .",
    "( c)@xmath365(ii ) : notice that @xmath395 and @xmath396 are two odd cycles in @xmath305 .",
    "then the result follows from above arguments .",
    "a _ safe prime _ is a prime number @xmath327 such that @xmath397 is also a prime .",
    "it is easy to see that @xmath398 if @xmath327 is a safe prime .",
    "moreover , if @xmath399 ( mod @xmath284 ) , then @xmath400 ( by the first condition in theorem  [ thm : o_prime ] ) . the following result is derived from proposition  [ pro : optimal_with_leave ] and theorem  [ thm:1_leave_condition ] .",
    "[ cor : l_no_3factor ] let @xmath401 be an odd integer . then if @xmath363 we have    1 .",
    "@xmath402 if @xmath403 ( mod @xmath284 ) for every prime factor @xmath327 ; 2 .",
    "@xmath404 if there exists exactly one safe prime factor @xmath405 with @xmath406 and @xmath403 ( mod @xmath284 ) for any other prime factor @xmath327 .    if @xmath258 and @xmath407 , then we have    1 .",
    "@xmath408 if @xmath403 ( mod @xmath284 ) for every prime factor @xmath327 ; 2 .",
    "@xmath402 if there exists exactly one safe prime factor @xmath409 ( mod @xmath284 ) with @xmath406 , and @xmath403 ( mod @xmath284 ) for any other prime factor @xmath410 .    if @xmath411 and @xmath412 , then we have    1 .",
    "@xmath402 if @xmath403 ( mod @xmath284 ) for every prime factor @xmath410 .",
    "_ remark : _ levenshtein and tonchev  ( * ? ? ?",
    "* theorem 7 ) proved that for odd primes @xmath3 and @xmath327 , @xmath413 if @xmath414 and @xmath415 if @xmath416 .",
    "these two results can be obtained from corollary  [ cor : l_no_3factor ] ( i ) and ( ii ) .    by theorem  [ thm :",
    "upperbound ] , theorem  [ thm : construction ] and corollary  [ cor : l_no_3factor ] , we have the following results .    [ cor : scac_odd ] let @xmath3 be an even integer",
    ". then we have    1 .",
    "@xmath285 if @xmath417 and @xmath344 satisfies the condition of ( i ) in corollary  [ cor : l_no_3factor ] ; 2 .   @xmath418 if @xmath417 and @xmath344 satisfies the condition of ( ii ) in corollary  [ cor : l_no_3factor ] ; 3 .   @xmath289 if @xmath419 , @xmath420 and @xmath344 satisfies the condition of ( iii ) in corollary  [ cor : l_no_3factor ] ; 4 .",
    "@xmath285 if @xmath419 , @xmath420 and @xmath344 satisfies the condition of ( iv ) in corollary  [ cor : l_no_3factor ] ; 5 .",
    "@xmath285 if @xmath421 , @xmath422 and @xmath344 satisfies the condition of ( v ) in corollary  [ cor : l_no_3factor ] .",
    "we establish in theorem  [ thm : upperbound ] upper bounds on the size of scac of even length and weight three , which improve previously known upper bounds in  @xcite .",
    "the new bounds all increase approximately with slope @xmath423 as a function of length @xmath3 . by constructing scacs with some optimal cacs , we show the obtained upper bounds are tight in several cases , as stated in corollary  [ cor : scac_even1 ] and corollary  [ cor : scac_odd ] .",
    "in addition , some new optimal cacs are given in theorem  [ thm:1_leave_condition ] .",
    "* acknowledgments * the authors would like to express their gratitude to the referees for their helpful comments in improving the presentation of this paper .",
    "this work was supported by the hong kong rgc earmaked grant cuhk414012 , the national natural science foundation of china ( no . 61301107 and 61174060 ) , the shenzhen knowledge innovation program jcyj20130401 - 172046453 and the specialized research fund for the doctoral program of higher education of china ( no .",
    "20133219120010 ) ."
  ],
  "abstract_text": [
    "<S> strongly conflict - avoiding codes ( scacs ) are employed in a slot - asynchronous multiple - access collision channel without feedback to guarantee that each active user can send at least one packet successfully in the worst case within a fixed period of time . by the assumption that all users are assigned distinct codewords , the number of codewords in an scac is equal to the number of potential users that can be supported . </S>",
    "<S> scacs have different combinatorial structure compared with conflict - avoiding codes ( cacs ) due to additional collisions incurred by partially overlapped transmissions . in this paper </S>",
    "<S> , we establish upper bounds on the size of scacs of even length and weight three . </S>",
    "<S> furthermore , it is shown that some optimal cacs can be used to construct optimal scacs of weight three . </S>"
  ]
}