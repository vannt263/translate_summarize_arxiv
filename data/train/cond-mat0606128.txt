{
  "article_text": [
    "there are many combinatorial problems that can be represented as a constrained satisfaction problem ( csp ) in which we are to satisfy a number of constrains defined over a set of discrete variables .",
    "an interesting example is the low density parity check code in information theory @xcite . here a code word consists of @xmath0 variables @xmath1 that satisfy @xmath2 parity - check constraints .",
    "each constraint acts on a few variables and is satisfied if sum of the variables module @xmath3 is zero .",
    "another example is finding the fixed points of a random boolean network @xcite .",
    "again we have @xmath0 boolean variables represented by the nodes of a directed network .",
    "the state of a node at a given time step is a logical function of the state of its incoming neighbors in the previous time step .",
    "thus a fixed point of the problem is one that satisfies @xmath0 constraints , one for each variable , where a constraint enforces the variable taking the outcome of the logical function .",
    "+ from a physical point of view there exist a close relation between these problems with frustrated systems exhibiting glassy behavior , such as spin glasses @xcite .",
    "the methods and concepts developed in the study of these systems enable us to get a better understanding of the above problems .",
    "+ random satisfiability problem is a typical csp that allows us to study combinatorial csp s in a simple framework .",
    "it is the first problem whose np - completeness has been proven @xcite . the problem is defined over @xmath0 logical variables that are to satisfy @xmath2 logical constraints or clauses .",
    "each clause interacts with some randomly selected variables that can appear negated or as such with equal probability .",
    "the clause is satisfied if at least one of the variables are true . here",
    "the interest is in the satisfiability of the problem and finding the solutions or ground state configurations that result to the minimum number of violated clauses . for small number of clauses per variable @xmath4 , a typical instance of the problem is satisfiable ,",
    "that is there is at least one configuration of variables that satisfies all the clauses . on the other hand , for large @xmath5 a typical instance of",
    "the problem is unsatisfiable with probability one .",
    "we have a sharp transition at @xmath6 that separates sat and unsat phases of the problem @xcite .",
    "+ the interaction pattern of clauses with variables make a graph that is called the factor graph @xcite .",
    "notice that larger number of interactions lead to much frustration and thus make the problem harder both in checking its satisfiability and finding its solutions .",
    "therefore , one way to make the problem easier is to reduce it to some smaller subproblems with smaller number of interactions .",
    "then we could utilize some local search algorithms ( like walksat and its generalizations @xcite ) to solve the smaller subproblem .",
    "however , for a given number of variables and clauses the chance to find a solution decreases as we remove the interactions from the factor graph . moreover , the number of subproblems with a given number of interactions is exponentially large .",
    "these facts make the above reduction procedure inefficient unless we find a way to get around them .",
    "+ survey propagation algorithm is a powerful massage passing algorithm that helps us to check the satisfiability of the problem and find its solutions @xcite . in ref .",
    "@xcite we showed that as long as we are in the sat phase we can modify this algorithm to find the satisfiable spanning trees .",
    "there , we also showed that there is a correspondence between the set of solutions in the original problem and those of the satisfiable spanning trees . indeed",
    "the modified algorithm enabled us to remove some interactions from the problem such that the obtained subproblem is still satisfiable .",
    "+ in this paper we are going to investigate the modified algorithm in more details , by studding its performance for different classes of subproblems .",
    "there is a free parameter in the algorithm that allows us to control the number of interactions in the subproblems . in this way we can construct ensembles of satisfiable subproblems with different average number of interactions .",
    "the largest subproblem is the original problem and the smallest one is a subproblem in which each clause interacts with just one variable .",
    "the latter satisfiable subproblems , which we call minimal satisfiable subproblems , result directly to the solutions of the original problem .",
    "we will show how the number of solutions ( in replica symmetric approximation ) and the complexity ( in one - step replica symmetric approximation ) varies for different subproblems close to the sat - unsat transition .",
    "+ the paper is organized in this manner : first we define more precisely the random k - satisfiability problem and its known features . in section",
    "[ 3 ] we briefly introduce belief and survey propagation algorithms that play an essential role in the remaining parts of the paper .",
    "section [ 4 ] has been divide to four subsections that deal with satisfiable subproblems .",
    "we start by some general arguments and then represent numerical results for different satisfiable subproblems .",
    "finally section [ 5 ] is devoted to our conclusion remarks .",
    "a random satisfiability problem is defined as follows : we take @xmath0 logical variables @xmath7 .",
    "then we construct a formula @xmath8 of @xmath2 clauses joined to each other by logical and .",
    "each clause contains a number of randomly selected logical variables . in the random k - sat problem",
    "each clause has a fixed number of @xmath9 variables .",
    "these variables , which join to each other by logical or , are negated with probability @xmath10 , otherwise appear as such . for example",
    "@xmath11 is a 2-sat formula with @xmath12 clauses and @xmath13 logical variables .",
    "a solution of @xmath8 is a configuration of logical variables that satisfy all the clauses .",
    "the problem is satisfiable if there is at least one solution or satisfying configuration of variables for the formula .",
    "given an instance of the problem , then we are interested to know if it is satisfiable or not . a more difficult problem is to find the ground state configurations which lead to the minimum number of violated clauses . + the relevant parameter that determines the satisfiability of @xmath8 is @xmath14 . in the thermodynamic limit",
    "( @xmath15 and @xmath16 ) @xmath8 is satisfied with probability one as long as @xmath17 .",
    "moreover , it has been found that for @xmath18 the problem is in the hard - sat phase @xcite . at @xmath19",
    "we have a dynamical phase transition associated with the break down of replica symmetry .",
    "assuming one - step replica symmetry breaking , one obtains @xmath20 and @xmath21 for random 3-sat problems@xcite .",
    "although this approximation seems to be exact near the sat - unsat transition but it fails close to the dynamical transition where higher order replica symmetry breaking solutions are to be used @xcite . + a useful tool in the study of csp s is the factor graph which is a bipartite graph of variable nodes and function nodes ( clauses ) .",
    "the structure of this graph is completely determined by a @xmath22 matrix with elements @xmath23 ; @xmath24 if clause @xmath25 contains @xmath26 , it is equal to @xmath27 if @xmath28 appears in @xmath25 and otherwise @xmath29 . in a graph representation , we add an edges between function node @xmath25 and variable node @xmath30 if @xmath31 . the edges will be shown by a filled line if @xmath24 and by a dashed line if @xmath32 .",
    "+ we also define an energy ( or cost function ) for the problem which is the number of violated clauses for a given configuration of variables @xmath33\\equiv \\sum_{a=1}^m \\prod_{j=1}^k \\left(\\frac{1-j_{a , i_j^a}s_{i_j^a}}{2}\\right).\\ ] ] here we introduced spin variables @xmath34 and @xmath35 is the index of @xmath36th variable in clause @xmath25 .",
    "a solution of the problem is a configuration of zero energy and the ground states are those configuration having the minimum energy . note that the presence of two variables in the same clause results to direct interactions between the corresponding spin variables .",
    "in this section we give a brief description of some massage passing algorithms which help us to get some insights about the solution space of the problem . these algorithm have an iterative nature and can give information for single instances of the problem . for more details about the algorithms and their origin",
    "see @xcite .",
    "+      in the following we restrict ourselves in the sat phase where there are some solutions that satisfy the problem .",
    "these solutions are represented by points in the @xmath0-dimensional configuration space of the variables .",
    "if the number of interactions is low enough we can assume a replica symmetric structure for the organization of the solutions in this space .",
    "it means that the set of solutions make a single cluster ( or pure state ) in which any two solutions can be connected to each other by a path of finite steps when @xmath0 approaches to infinity .",
    "belief propagation algorithm enables us to find the solutions and their number ( the cluster s size or entropy of the pure state ) in this case .",
    "consider the set of solutions with @xmath37 members .",
    "each member is defined by @xmath0 values for the variables @xmath38 .",
    "we consider the probability space made by all the solutions with equal probability .",
    "then let us define the warnings @xmath39 as the probability that all variables in clause @xmath25 , except @xmath30 , are in a state that violate @xmath25 . assuming a tree - like structure for the factor graph ( i.e. ignoring the correlations between neighboring variables ) , @xmath40 can be written as @xmath41 where @xmath42 is the probability that variable @xmath36 dose not satisfy clause @xmath25 .",
    "we also denote by @xmath43 the set of variables belong to clause @xmath25 and by @xmath44 the set of clauses that variable @xmath30 contributes in . in belief propagation algorithm @xmath42 is given by @xcite @xmath45 where @xmath46 here @xmath47 denotes to the set of clauses in @xmath48 that variable @xmath36 appears in them as it appears in clause @xmath25 , see fig .",
    "[ f1 ] .",
    "the remaining set of clauses are denoted by @xmath49 .",
    "starting from initial random values for @xmath50 s , one can update them iteratively according to eqs .",
    "[ eta0 ] , [ pauj ] and [ pii ] .",
    "if the factor graph is spars enough and the problem is satisfiable then the iteration may converge with no contradictory warnings .",
    "utilizing these warnings one can use the following relations to find the entropy of the pure state @xcite @xmath51 where @xmath52,\\\\ \\nonumber s_i=\\log[\\pi_i^-+\\pi_i^+],\\end{aligned}\\ ] ] and @xmath53 in these equations @xmath54 are the set of function nodes in @xmath44 with @xmath55 and @xmath56 is the number of clauses in @xmath44 .",
    "+ it has been shown that the above algorithm gives exact results for tree - like factor graphs @xcite .",
    "when we have one - step replica symmetry breaking , the set of solutions organize in a number of well separated clusters with their own internal entropies .",
    "suppose there are @xmath57 of such clusters .",
    "in a coarse grained picture , we can assign a state @xmath58 to each cluster of the solution space . for a given cluster @xmath59",
    "if variable @xmath30 has the same value @xmath60 in all the solutions belong to the cluster . otherwise , that is if variable @xmath30 is not frozen and alternates between @xmath27 and @xmath61 , @xmath62 .",
    "again we can define a probability space in which all the clusters have the same probability . as before @xmath40 is the probability ( in new space ) that all variables in clause @xmath25 , except @xmath30 , are in states that violate clause @xmath25 .",
    "notice that we have to take into account the extra state @xmath62 , which is called the joker state , in the calculations . generalizing the belief propagation relations one obtains @xcite @xmath63 where @xmath64 but now @xmath65 \\prod_{b\\in v_a^s(j)}\\left(1-\\eta_{b\\rightarrow j}\\right),\\\\ \\nonumber \\pi_{j\\rightarrow a}^s=[1-\\prod_{b\\in v_a^s(j)}\\left(1-\\eta_{b\\rightarrow j}\\right)]\\prod_{b\\in v_a^u(j)}\\left(1-\\eta_{b\\rightarrow j}\\right).\\end{aligned}\\ ] ] the above equations can be solved iteratively for @xmath50 s . as long as we are in the sat phase , the above algorithm may converge with no contradictory warnings .",
    "then the configurational entropy or complexity of the problem reads @xcite @xmath66 where @xmath67,\\\\ \\nonumber \\sigma_i=\\log[\\pi_i^-+\\pi_i^0+\\pi_i^+],\\end{aligned}\\ ] ] and @xmath68\\prod_{a\\in v_+(i)}(1-\\eta_{a\\rightarrow i}),\\\\ \\nonumber \\pi_{i}^+=[1-\\prod_{a\\in v_+(i)}(1-\\eta_{a\\rightarrow i})]\\prod_{a\\in v_-(i)}(1-\\eta_{a\\rightarrow i}),\\\\ \\nonumber \\pi_{i}^0=\\prod_{a\\in v(i)}(1-\\eta_{a\\rightarrow i}).\\end{aligned}\\ ] ] to find a solution of the problem we can follow a simple survey inspired decimation algorithm that works with the biases a variable experience @xcite .",
    "let us define @xmath69 the probability for variable @xmath30 to be frozen in state @xmath70 in a randomly selected cluster of solutions .",
    "similarly we define @xmath71 and @xmath72 . then according to the above definitions we have @xmath73 after a run of survey propagation algorithm we have the above biases and fix the most biased variable , i.e. one with largest @xmath74",
    ". then we can simplify the problem and again run survey propagation algorithm .",
    "we repeat the above process until we reach a simple problem with all warnings equal to zero . this problem",
    "then can be solved by a local search algorithm .",
    "consider a satisfiable random ksat problem and the associated factor graph with @xmath0 variable nodes , @xmath2 function nodes and @xmath75 edges .",
    "all the function nodes have the same degree @xmath76 and a variable node has degree @xmath56 which , in the thermodynamic limit , follows a poisson distribution of mean @xmath77 .",
    "if @xmath78 is a solution of the problem , then any function node in the factor graph has at least one neighboring variable node that satisfies it .",
    "it means that for any solution we can remove some of the edges in the factor graph while the obtained subproblem is still satisfiable and @xmath79 for all function nodes .",
    "obviously we can do this until each function node is only connected to one variable node , the one that satisfies the corresponding clause .",
    "so it is clear that for a satisfiable problem there exist many subproblems ranging from the original one , with @xmath80 edges ( or interactions ) , to a minimal one with @xmath81 edges in its factor graph . in general",
    "we define @xmath82 as the ensemble of satisfiable subproblems defined by the parameter @xmath83 . for example",
    "@xmath84 is the ensemble of satisfiable subproblems with @xmath85 edges . + an interesting point is the presence of a correspondence between the solutions of the original problem and solutions of an ensemble of subproblems with @xmath85 edges .",
    "obviously any solution of the subproblems in @xmath84 is also a solution of the original problem .",
    "moreover , as described above , for any solution we can remove some of the edges until we obtain a subproblem of exactly @xmath85 edges . in @xcite",
    "we showed that this correspondence holds also for the set of spanning trees which is a subset of @xmath86 .",
    "these correspondence relations will allow us to construct the ensembles and to find the solutions of the original problem by solving a subproblem .",
    "+ notice that as the number of interactions in a problem decreases we have to pay less computational cost to solve it .",
    "in fact , tree - like factor graphs can easily be solved by efficient local search algorithms . and if someone could give the ensemble of minimal subproblems , the whole set of solutions would be available . now",
    "the main questions are : how can we construct these satisfiable subproblems and what can be said about the properties of these subproblems ? in the following we try to answer these questions by a simple modification of survey propagation algorithm , introduced in @xcite .",
    "+      for a given ensemble of subproblems @xmath82 we would have @xmath87 members . in a given ensemble @xmath88 ,",
    "we assign weight @xmath89 to edge @xmath90 as a measure of its appearance frequency in the ensemble , that is , @xmath91 where @xmath92 if the edge appears in @xmath93 and otherwise @xmath94 .",
    "let @xmath95 be a measure defined on the space of all subgraphs with equal probability for all subgraphs @xmath93 that belong to @xmath88 and zero otherwise .",
    "this probability can be written in terms of @xmath96 s @xmath97 it is then easy to show that @xmath98 and @xmath99 .",
    "suppose that we have obtained @xmath100 s for the ensemble @xmath88 from another way . as an estimate of @xmath95 we write @xmath101.\\ ] ] then we expect that @xmath102,\\ ] ] gives a good estimate of @xmath103 .",
    "+ suppose that we have obtained all the members in ensemble @xmath88 .",
    "assuming replica symmetry , we could run belief propagation on each member of the ensemble and obtain its entropy .",
    "then we could define @xmath104 , the average of entropy taken over ensemble @xmath88 .",
    "similarly we could run survey propagation algorithm and define @xmath105 as the average complexity of subproblems in @xmath88 .",
    "actually we will not follow the above procedure and get around the difficult problem of finding all the ensemble members .",
    "let us describe our procedure for the case of survey propagation algorithm .",
    "generalization to the belief propagation algorithm would be straightforward . + to obtain @xmath100 s for an ensemble we go through a self - consistency approach .",
    "we run survey propagation algorithm on the original factor graph but at the same time we take into account the fact that each edge has its own probability of appearing in the ensemble . now",
    "the survey along edge @xmath90 is updated according to the following rule @xmath106,\\ ] ] where as before @xmath42 is given by eq.[pauj1 ] with @xmath107 \\prod_{b\\in v_a^s(j)}\\left(1-w_{b , j}\\eta_{b\\rightarrow j}\\right),\\\\ \\nonumber \\pi_{j\\rightarrow a}^s=[1-\\prod_{b\\in v_a^s(j)}\\left(1-w_{b , j}\\eta_{b\\rightarrow j}\\right)]\\prod_{b\\in v_a^u(j)}\\left(1-w_{b , j}\\eta_{b\\rightarrow j}\\right).\\end{aligned}\\ ] ] an essential step here is the determination of @xmath100 s in a given ensemble .",
    "remember that a given ensemble is a set of satisfiable subproblems which completely define the probabilities @xmath100 along the edges of the factor graph .",
    "thus , if with a given set of @xmath100 s we find a large warning sent from @xmath25 to @xmath30 , we expect a high probability for the presence of that edge in the ensemble . here",
    "we make a crucial assumption and use the following ansatz @xmath108^{\\mu}.\\ ] ] that incorporates the above fact .",
    "we take @xmath109 as a free parameter and denote the resulted ensembles by @xmath110 . for a given @xmath111 we would have an ensemble of satisfiable subproblems with different number of edges . because of the functional form of the above ansatz , the average number of edges in the ensemble decreases by increasing @xmath111 .",
    "therefore , to obtain smaller satisfiable subproblems we will need to run the algorithm for larger values of @xmath111 . + starting from initially random @xmath50 s and @xmath100 s we iterate the above equations until ( i ) it converges to some fixed point , ( ii ) or results to contradictory warnings ( iii ) or dose not converge in a predefined limit for the number of iterations @xmath112 . we think that as long as the original problem is satisfiable the algorithm will converge in a finite fraction of times that we run it .",
    "+ if the algorithm converges then we can utilize our definition for @xmath100 s and construct satisfiable subproblems . to construct a subproblem in @xmath110 we go through all the edges and select them with probabilities @xmath89 s .",
    "we hope that such a subproblem be satisfiable with a considerable probability .",
    "moreover , it is reasonable that we pay more computational cost to find smaller satisfiable subproblems which are closer to the solutions of the original problem .      in the following",
    "we will study some properties of satisfiable subproblems including the spanning trees of the original factor graph and the minimal subproblems .",
    "+ we start from initially random values of @xmath113 for all the edges @xmath90 . then in each iteration of the algorithm we update @xmath50 and @xmath100 for all the edges according to eqs .",
    "[ eta2 ] , [ pii2 ] and [ weta ] .",
    "the edges are selected sequentially in a random way .",
    "the algorithm converges if for all the edges the differences between new and old values of @xmath50 are less than @xmath114 .",
    "we bound the number of iterations from above to @xmath112 and if the algorithm dose not converge in this limit , we say that it diverges .",
    "in the following we will work with @xmath115 and @xmath116 .",
    "moreover , we consider @xmath12-sat problems where each clause in the original problem has just @xmath117 variables . +     close to the sat - unsat transition .",
    "number of variables is @xmath118 and statistical errors are of order @xmath119.,width=302 ]    .",
    "statistical errors are of order @xmath119.,width=302 ]    let us first study the convergence properties of the modified algorithm . to this end",
    "we repeat the algorithm for a number of times and define @xmath120 as the fraction of times in which the algorithm converges . in fig .",
    "[ f2 ] we display @xmath120 for the modified survey propagation algorithm . it is observed that @xmath120 decreases by increasing @xmath111 . moreover , @xmath120 diminishes more rapidly for larger @xmath5 .",
    "it is reasonable because the removal of edges becomes harder as we get closer to the sat - unsat transition . what happens if we increase the problem size ?",
    "figure [ f3 ] shows the finite size effects on convergence probability .",
    "these effects are significant due to the small problem sizes studied here . moreover ,",
    "as expected , the probability decreases more rapidly as @xmath0 increases .",
    "statistical errors are about the point s sizes . ,",
    "width=302 ]    to see how the number of edges changes with @xmath111 we obtained the average weight of an edge , @xmath121 , and its standard deviation , @xmath122 , in converged cases .",
    "the average number of edges is given by @xmath123 .",
    "[ f4 ] shows how these quantities behave with @xmath111 .",
    "we found that as @xmath111 gets larger @xmath121 decreases and finally ( not shown in the figure ) approaches to @xmath124 , the minimum possible value to have a satisfiable subproblem when @xmath117 . +    .",
    "the results are for @xmath118 and statistical errors are of order @xmath125 .",
    ", width=302 ]    using our arguments in previous subsection we can obtain an estimate of the number of members in the ensemble @xmath110 , @xmath126 . in fig .",
    "[ f5 ] we show how @xmath127 changes with @xmath111 .",
    "here we have displayed the results just for small @xmath111 s where we are interested in . for larger @xmath111 s",
    ", @xmath126 decreases to its value for @xmath128 . +     for @xmath118 .",
    "statistical errors are about the point s sizes.,width=302 ]     for @xmath118 .",
    "statistical errors are about the point s sizes.,width=302 ]    as described in the previous section we can obtain the average entropy of a typical subproblem in @xmath110 by running belief propagation on it .",
    "the results have been displayed in fig .",
    "similarly the average complexity of a subproblem is obtained by running survey propagation algorithm .",
    "figure [ f7 ] shows this quantity for some values of @xmath5 .",
    "as the figures shows both @xmath129 and @xmath130 diminish with @xmath111 and @xmath5 ; removing edges from the factor graph and approaching the sat - unsat transition both decrease the number of solutions and complexity . notice that for a fixed value of @xmath5 we can define the threshold @xmath131 where the complexity vanishes .",
    "it is a decreasing function of @xmath5 and we know already that @xmath132 .",
    "+      suppose that the algorithm converges and returns the weights @xmath100 s for all the edges of the factor graph .",
    "it is not difficult to guess that maximum spanning trees have a larger probability to be a satisfiable spanning tree .",
    "a maximum spanning tree is a spanning tree of the factor graph with maximum weight @xmath133 . for a given @xmath111 and a converged case we can construct maximum spanning trees in the following way : we start from a randomly selected node in the original factor graph and find the maximum weight among the edges that connect it to the other nodes",
    ". then we list the edges having a weight in the @xmath114-neighborhood of the maximum one and add randomly one of them to the new factor graph .",
    "if we repeat the addition of edges @xmath134 times we obtain a spanning tree factor graph which has the maximum weight on its edges . notice that taking a nonzero interval to define the edges of maximum weight at each step , along with the randomness in choosing one of them , allow to construct a large number of maximum spanning trees . in this way",
    "we define @xmath135 as the probability that a maximum spanning tree be satisfiable if the algorithm converges . to find out the satisfiability of the subproblem we use a local search algorithm ( focused metropolis search ) introduced in @xcite .    .",
    "the problem size is @xmath118 and statistical errors are of order @xmath119.,width=302 ]    figure [ f8 ] displays this quantity versus @xmath111 for some values of @xmath5 .",
    "the probability to find a satisfiable spanning tree becomes considerable even for a very small @xmath111 and finally approaches to @xmath61 .",
    "for instance , if @xmath136 then at @xmath137 almost half the maximum spanning trees are satisfiable .",
    "for these parameters the fraction of converged cases is nearly @xmath138 ( see fig .",
    "although the algorithm provides a simple way of constructing satisfiable spanning trees but in general finding them is not an easy task .",
    "for example for a satisfiable problem with parameters @xmath139 , we found no satisfiable spanning tree among @xmath140 randomly constructed ones .",
    ".,width=302 ]    figure [ f9 ] shows the satisfiability of maximum spanning trees for some larger problem sizes at @xmath136 .",
    "hopefully , by increasing @xmath0 the satisfiability probability enhances for smaller values of @xmath111 and gets more rapidly its saturation value .",
    "we hope that this behavior of @xmath135 compensate the decrease in @xmath120 for larger problem sizes .",
    "a look at figs .",
    "[ f3 ] and [ f9 ] shows that for @xmath141 , @xmath136 and at @xmath137 we have @xmath142 and @xmath143 .",
    "it means that of @xmath144 runs we can extract on average @xmath145 satisfiable spanning trees .",
    "having a satisfiable spanning tree then we can find its solutions ( which are also the solutions of the original problem ) by any local search algorithm .",
    "this , besides the other methods , provides another way of finding the solutions of the original problem . in fig .",
    "[ f10 ] we obtained the entropy of typical satisfiable spanning trees by running belief propagation on them .",
    "as the figure shows this entropy decreases linearly with @xmath5 .     and @xmath146 . , width=302 ]    , @xmath136 and @xmath147 .",
    "statistical errors are about the point sizes.,width=302 ]    it will be interesting to compare the structural properties of satisfiable spanning trees with those of randomly constructed ones .",
    "to this end we obtained the degree distribution of variable and function nodes in the corresponding spanning trees . in fig .",
    "[ f11 ] we compare the degree distributions of variables . for function nodes we found no significant difference between the two kinds of spanning trees . however , the degree distribution of variable nodes is slightly broader for the satisfiable spanning trees .",
    "there are more low and high degree nodes in these spanning trees .",
    "another feature of satisfiable spanning trees is their low diameter compared to the random ones ; take the node having maximum degree as the center of spanning tree .",
    "the distance of a node from the center is defined as the number of links in the shortest path connecting the center to the node .",
    "we define the largest distance in the network as its diameter .",
    "the diameter of the two sets of spanning trees has been compared in fig .",
    "satisfiable spanning trees have a diameter which is almost half the diameter of the random spanning trees . +     and @xmath148 . , width=302 ]      a minimal subproblem has the minimum possible number of edges @xmath81 where each function node is connected to at most one variable node .",
    "having such a subproblem it is easy to check its satisfiability .",
    "the solutions of a minimal satisfiable subproblem will be the solutions of the original problem .",
    "moreover for any solution of the original problem there is at least one minimal satisfiable subproblem .",
    "the total number of minimal subproblems is @xmath149 that makes the exhaustive search among them for satisfiable ones an intractable task .",
    "+ suppose that the algorithm for a given @xmath111 has been converged and returned the weights @xmath100 s for all the edges .",
    "among the edges emanating from function node @xmath25 we choose the one with maximum weight .",
    "if there are more than one edge of maximum weight then we select one of them randomly .",
    "notice that we treat all the edges in the @xmath114-neighborhood of the maximum weight in the same manner .",
    "for all the function nodes we do the above choice to construct a minimal subproblem .",
    "then we check the satisfiability of the subproblem and repeat the process for a large number of minimal subproblems obtained from converged runs of the algorithm .",
    "we define @xmath135 as the probability that a minimal subproblem be a satisfiable one .",
    "this quantity has been displayed in fig .",
    "[ f13 ] .    .",
    "number of variables is @xmath118 and statistical errors are of order @xmath119.,width=302 ]    again we see that even for very small @xmath111 , @xmath135 is close to @xmath61 .",
    "when the parameters are @xmath150 this happens at @xmath151 . according to fig .",
    "[ f2 ] , at these parameters we have to run the algorithm on average @xmath152 times to find a converged case . in fig .",
    "[ f14 ] we compare @xmath135 for two different problem sizes . as the figure shows there is no significant difference between the two results . +    .",
    "statistical errors are of order @xmath119.,width=302 ]    having a minimal satisfiable subproblem we will be able to find the solutions directly .",
    "any variable node that has at least one emanating edge is frozen in the obtained set of solutions . in fig .",
    "[ f15 ] we have showed the fraction of free variables versus @xmath5 . notice that @xmath153 is the fraction of frozen variables and @xmath154 gives the number of solutions in a typical satisfiable subproblem .",
    "as expected the number of frozen variables increases as we get closer to the sat - unsat transition .     and",
    "statistical errors are of order @xmath155.,width=302 ]    finally we look at the degree distribution of variable nodes in the minimal satisfiable subproblems . in fig .",
    "[ f16 ] we compare the degree distribution at @xmath136 with the random case in which the edges have been distributed randomly while the other parameters are the same .",
    "we observe that the real distribution is broader than the random one .",
    "low and high degree nodes have more contribution in the minimal satisfiable subproblems .",
    "we encountered the same phenomenon in fig .",
    "[ f11 ] that compares degree distribution of satisfiable spanning trees with the random ones .     and statistical errors are of order @xmath119.,width=302 ]",
    "in summary we showed that there is a way to reduce a random k - satisfiability problem to some simpler subproblems their solutions are also the solutions of the original problem . to achieve this we modified the known message passing algorithms by assigning some weights to the edges of the factor graph .",
    "finding satisfiable subproblems allowed us to compute the expected value of their entropy and complexity . in the case of",
    "satisfiable spanning trees we could compare their structural properties with those of random spanning trees .",
    "we could also construct the minimal satisfiable subproblems and study some interesting features of their factor graph .",
    "+ the modified algorithm studied in this paper can be used , besides the the present algorithms , to find the solutions of a constrained satisfaction problem in the sat phase . moreover , it provides a way to find the satisfiable subproblems which is not an easy task .",
    "comparing satisfiable subproblems with equivalent random ones might provide some insights about the nature of satisfiable problems and so their solutions .",
    "+ due to the computational limitations , the results have been restricted to small problem sizes of order @xmath156 . in this paper",
    "we tried to show the trend by studding different problem sizes ."
  ],
  "abstract_text": [
    "<S> how can we remove some interactions in a constraint satisfaction problem ( csp ) such that it still remains satisfiable ? in this paper we study a modified survey propagation algorithm that enables us to address this question for a prototypical csp , i.e. random k - satisfiability problem . </S>",
    "<S> the average number of removed interactions is controlled by a tuning parameter in the algorithm . </S>",
    "<S> if the original problem is satisfiable then we are able to construct satisfiable subproblems ranging from the original one to a minimal one with minimum possible number of interactions . </S>",
    "<S> the minimal satisfiable subproblems will provide directly the solutions of the original problem . </S>"
  ]
}