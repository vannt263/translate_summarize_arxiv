{
  "article_text": [
    "structured p2p overlay networks  @xcite provide dht abstraction for object storage and retrieval . in these overlays , each object and node is identified by a unique identifier .",
    "the search space is partitioned among overlay nodes and each node is responsible for storage and retrieval of objects in its region .",
    "these systems assume that resources such as network bandwidth , capacity and storage are uniformly distributed among all participants of network .    in these structured systems ,",
    "a distributed hash function chooses identifier of nodes and objects .",
    "so , it causes an @xmath0 imbalance factor in the number of stored objects at a node .",
    "moreover , if identifier of nodes are no longer uniformly distributed , the imbalance factor becomes worse .",
    "this could happen in database applications because all data items ( tuples ) of a relation are kept with regard to their primary key values(identifiers ) .",
    "in addition , load imbalance becomes worse when there exist many nodes with different capabilities ( storage , bandwidth , cpu , etc . ) . resulted load imbalance deteriorates the functionality of overlay networks .",
    "several solutions have been proposed to resolve the load balancing problem  @xcite .",
    "but , these extensions have their own restrictions .",
    "firstly , it may be assumed that nodes have similar capabilities .",
    "secondly , they normally ignore the link latency between nodes and extra load of a node may traverse the high link latency , thereby increasing the bandwidth consumption , increasing traffic in underlying network , and delaying the convergence of load balancing .",
    "thirdly , these solutions may use some logical fixed nodes to collect load information and plan new reassignments .",
    "however , these solutions reduce the load balancing problem to a centralized problem , therefore , leading to the single point of failure problem and limited scalability .",
    "this paper presents a distributed load balancing algorithm with topology awareness in which the mentioned restrictions are dealt with .",
    "we extended our previous approach  @xcite for data load balancing in overlay networks .",
    "our algorithm uses the concept of _ virtual servers _ , formerly suggested in chord  @xcite : each node collects neighborhood load information from _ close _ nodes according to the topology of the underlying network and reassigns load .",
    "then , virtual servers are transferred between physically _",
    "close _ nodes .",
    "it consequently provides a rapid load balance convergence , replies quickly to load imbalance , reduces the load transfer cost , and improves the load balancing traffic .",
    "this approach , while collecting load information of nodes , does not impose any logical structure or overhead on the overlay network .",
    "moreover , it does well in terms of scalability .",
    "our parametric algorithm increases the quality of load balancing among _ close _ nodes of the overlay and also provides a different kind of tradeoff between the quality of load balancing and load transfer cost across overlay nodes .",
    "in addition , each node or group of nodes can perform the proposed load balancing algorithm based on its desired network distance .",
    "we perform our load balancing algorithm on the raqnet  @xcite overlay network . in raqnet overlay network , each node has a practical internet coordinate ( _ pic _ ) for estimating internet network distances between nodes by the _",
    "mechanism  @xcite .",
    "this solution can be performed in other structured p2p overlay networks , if each overlay node knows its practical internet coordinate  @xcite .",
    "particularly , we make the following contributions :    1 .",
    "we offer a fully distributed load balancing algorithm which transfers extra load between physically _ close _",
    "nodes based on the topology of the underlying network .",
    "we use a simple parametric algorithm to collect load information of _ close _ nodes , reassign load and provide a practical tradeoff between load transfer cost , and the quality of load among all overlay nodes .",
    "our experimental results show that the network bandwidth is greatly saved and the load transfer cost is reduced in our approach .",
    "furthermore , we consider how to maintain the topology aware property affects on the in - degree of nodes in the raqnet overlay .",
    "the in - degree balance is an attractive feature in overlays because it balances the query routing .",
    "we conclude that this imbalance does not cause a significant problem . in section  [ nodelinks ] ,",
    "we propose a reactive approach for it .",
    "the rest of this paper is organized as follows .",
    "section [ relatedwork ] provides a survey of the related work . a brief overview of raqnet overlay network are presented in section [ raqnetsec ] .",
    "section [ topologyloadsec ] describes the topology aware load balancing algorithm .",
    "the experimental evaluations are presented in section [ exresult ] and section [ concsec ] concludes the paper .",
    "load balancing  @xcite is a significant and challenging step through data integration  @xcite in distributed heterogeneous resources .",
    "an effective load balancing approach is required to achieve a scalable data integration process and utilize available nodes equally  @xcite .",
    "most structured p2p systems  @xcite suppose that object ids are distributed by the uniform hash function .",
    "additionally , they suppose that all nodes have similar capacities and load .",
    "even so , the resulted load balance is not completely perfect and they have an @xmath1 imbalance load .",
    "many load balancing methods have been suggested to handle this problem in p2p systems .",
    "the first work has been done by chord  @xcite .",
    "they diminish load of overlay nodes by using the concept of virtual servers .",
    "they allocate @xmath2 virtual servers per physical node and suppose that all overlay nodes are similar .",
    "however , their approach does not practically resolve the load balancing problem .",
    "cfs  @xcite does not ignore the heterogeneity of nodes . in cfs",
    ", virtual servers are allocated to nodes according to their capacities .",
    "also , they use a simple solution to transfer extra load from heavy nodes , but their method may cause other nodes become overloaded .",
    "triantafillou et al .",
    "@xcite introduce the novel design to perform fair load distribution in the context of content and resource management in unstructured p2p systems .",
    "they collect load objects by the meta - data and after that they compute a reassignment of objects by using that information .",
    "karger and ruhl  @xcite present dynamic load balancing algorithms without using virtual servers . in their algorithms",
    ", lightly loaded nodes should be neighbors of heavily loaded nodes in order to reassign their load .",
    "they maximize utilization of load in nodes but they do not completely consider different node capacities .",
    "moreover , it is not clear whether their algorithms are practical or not .",
    "roa et al .",
    "@xcite propose three simple load balancing algorithms for dht - based systems : _ one - to - one , one - to - many _ and _ many - to - many_. they transfer load from heavy nodes to light nodes in every unit of virtual servers . in their load balancing approach , they use _ directory _ nodes to store load information of nodes and reassign virtual servers .",
    "_ one - to - many _ and _ many - to - many _ are extended by godfrey et al .",
    "@xciteto perform load balancing in dynamic p2p systems .",
    "their results have shown that their approach is so effective , but they have two weak points .",
    "firstly , their approach suffers from a single point of failure problem because of using _ directory _ nodes .",
    "secondly , their approach does not notice to link latency between light and heavy nodes while transferring load .",
    "yingwu et al .",
    "@xcite use a _ k - ary _ tree and virtual servers to perform load balancing in structured overlay networks . in their algorithm ,",
    "the load information is collected by the _ k - ary _ tree and reassignments of virtual servers are scheduled by nodes of the _ k - ary _ tree .",
    "they use landmark binning  @xcite to manage virtual server assignments across nodes which are _ close _ to each other according to topology of underlying network .",
    "they determine _ close _",
    "nodes by measuring from the landmark sites .",
    "thus , landmark sites become hot spots while the p2p system size are increasing .",
    "the topology - aware load balancing algorithm presented in this paper is similar to a distributed load balancing algorithm proposed by zhenyu et al  @xcite . in both algorithms ,",
    "load are transferred based on topology information , but we collect load information of _ close _ nodes by a restricted flooding algorithm with regard to topology of underlying network .",
    "our approach improves the load balancing traffic and also provides rapid convergence on load balance .",
    "also , our parametric algorithm increases the quality of load balancing among _ close _ nodes of overlay and also provides a different kind of tradeoff between the quality of load balancing and load transfer cost across all overlay nodes .",
    "moreover , each node or group of nodes can perform the proposed load balancing algorithm based on its desired network distance to transfer extra load .",
    "raqnet  @xcite is a multi - dimensional topology - aware overlay network based on raq  @xcite data structure . in raqnet overlay network ,",
    "the search space is @xmath3-dimensional cartesian coordinate space which is partitioned among @xmath4 nodes of the overlay network by a partition tree .",
    "each node has @xmath1 links to other nodes .",
    "each single point query is routed via @xmath1 message passing .",
    "each node is corresponded to a region and it is responsible for the queries targeting any point in its region . in raqnet overlay ,",
    "nodes are connected to each other if they have the same labels and also are _ close _ to each other with respect to the topology of the underlying network . a topological match between an overlay and its underlying network",
    "reduces routing delays and network link traffic .",
    "every network node @xmath5 which corresponds to a leaf in the partition tree is assigned a _ plane equation _ or pe to specify its region in the whole space .",
    "the partition tree is the main data structure in raq which partitions the search space into @xmath4 regions corresponding to @xmath4 nodes . assuming that @xmath6 is the root of partition tree and representing the whole search space",
    ", each internal node divides its region into two smaller regions using a hyperplane equation .",
    "although only leaves in the partition tree represent actual network nodes , each node in this tree has a corresponding region in the search space . every network node @xmath5 which corresponds to a leaf in the partition tree",
    "is assigned a _ plane equation _ or pe to specify its region in the whole space .",
    "each pe consists of some paired labels which is defined as @xmath7 . in each label",
    ", @xmath8 presents the distance of @xmath5 from the root of the tree and @xmath9 shows the plane equation that partitions the @xmath10th region into two regions and @xmath11 determines one side of the plane @xmath9 ( left or right ) . every leaf node in the raq stores its own pe as well as the pe of its links .",
    "figure  [ fig : fig1 ] ( left ) shows partitioning of 2-dimension search space .",
    "we use  + \" and  - \" in the pe of nodes to determine one side of the plane ( left or right ) .",
    "every node has some links to other nodes of raqnet overlay .",
    "each link is the addressing information of the target node which is its ip address and its pe .",
    "connection rules in raq are based on the partition tree .",
    "consider node @xmath5 and its pe , @xmath5 has link to one of nodes in each of these sets : @xmath12 $ ] , @xmath13$],@xmath14 , @xmath15 @xmath16 @xmath17 $ ] , where @xmath18 is the opposite side of @xmath19 .",
    "it is easy to show that each node has links to @xmath1 nodes in raq .      at each routing step",
    ", a node usually sends a query to another node that its pe shares at least one label longer with the destination point than the prefix with the present node s pe . if no such node is known , the query is sent to a node with pe closer to the destination point and shares a prefix with the destination point having the same length .",
    "if there is no such node , the present node will be considered as the closest node to the destination point . in figure",
    "[ fig : fig1 ] ( right ) , it shows routing a query from node @xmath20 to destination point @xmath21 .     with pe",
    "@xmath22 $ ] to destination point @xmath21.,title=\"fig : \" ]   with pe @xmath22 $ ] to destination point @xmath21.,title=\"fig : \" ]      raqnet seeks to exploit topology awareness from its underlying network in order to fill its routing table rows effectively .",
    "hence , any node with the required prefix in pe is used to fill an entry .",
    "topology aware neighbor selection selects the collection of _ close _ nodes among nodes with pe having the required prefix .",
    "topology awareness relies on a proximity metric that indicates the  distance \" between any given pair of nodes .",
    "the choice of a proximity metric depends on the desired quality of overlays ( e.g. , low delay , high bandwidth ) .",
    "our proximity metric in raqnet overlay is round trip delay , estimated by the _",
    "mechanism  @xcite .      maintaining topology - aware property effects on the in - degree of nodes . in the raq data structure or in overlay networks like can  @xcite , and chord  @xcite that do not consider topology awareness , the in - degree of node @xmath5 , the number of routing table entries of overlay nodes refers to node @xmath5 , should be balanced across all nodes because the network links between nodes are selected uniformly according to their connection rules .",
    "this feature is appealing because it balances the query routing .",
    "when routing table entries are filled with the _ close _ nodes , it causes that the distribution of in - degree of nodes is affected by the topology of underlying network .",
    "therefore , there is a tradeoff between providing topology awareness and balancing the in - degree of nodes in the routing algorithm . in the section [ loadbalancelinks ]",
    ", we quantify the degree of imbalance caused by topology - aware property and we propose a reactive approach to handle it .",
    "in this section , we present the concept of virtual servers and then introduce our topology - aware load balancing algorithm .",
    "the concept of virtual servers was first introduced in chord  @xcite to improve load balancing of overlay nodes .",
    "a virtual server looks similar to a single node which is accountable for a region of the search space .",
    "several virtual servers can be hosted by a physical node .",
    "therefore , any physical node possesses noncontiguous regions of the search space .",
    "each virtual server owns its routing tables and stores data items with ids falling into its accountable region .",
    "any virtual server causes definite amount of load .",
    "for instance , serving queries which fall into accountable region of a virtual server generates load .",
    "whenever a node becomes overloaded , it transfers portion of its load to some lightly loaded nodes to become light in which the basic unit of load transfer is virtual servers  @xcite .",
    "therefore , transferring virtual servers from heavy nodes to light nodes causes load balance .",
    "the transfer of a virtual server is implemented as a departure operation comes before a join operation , all overlays provide these operations .",
    "when a node @xmath5 leaves the overlay , its regions are taken by other nodes which have contiguous regions with virtual servers of node @xmath5  @xcite . if a virtual server @xmath23 leaves the overlay , its responsible region is taken by another virtual server which has contiguous region with @xmath23 . if there is no such virtual server , region of @xmath23 is taken by a virtual server with pe closer to @xmath23 . in the same way , when a new node @xmath5 joins the overlay , it chooses @xmath24 ( number of virtual servers ) random point @xmath25 in the search space and sends its join request .",
    "one disadvantage of using virtual servers is that any overlay node maintains @xmath24 routing states for its virtual servers .",
    "our experimental results show that our approach reaches good load balance when each node has @xmath26 virtual servers . in our belief",
    ", this overhead can be reasonable .",
    "one of the main benefits of using virtual servers is that no overlay modification is needed to perform load balancing algorithms .",
    "the virtual server reassignments are done with regards to topology information of underlying network .",
    "as we described in raqnet  @xcite , routing tables of node are filled by close nodes according to proximity metric of overlay network during node join .",
    "raqnet overlay nodes inherently maintains information of _ close _ nodes .",
    "our load balancing algorithm use this information and the _ _ p__ic mechanism  @xcite to predicate network distance(i.e . , round - trip delay or network hops ) between light and heavy nodes during virtual server reassignments , described in section  [ reassigning ] .",
    "_ p__ic mechanism predicts the distance between two overlay nodes only by having their practical internet coordinates .",
    "we have two assumptions in our load balancing approach : we attempt to optimize only one bottleneck resource and we suppose that the load on a virtual server is stable while carrying out our load balancing algorithm .",
    "these are some definitions we use to explain our approach :    : :    * utilization * : @xmath27 is the ratio of node @xmath10    load to its capacity ; @xmath28 .",
    "the    @xmath29 shows load of node @xmath10 at a definite    time and each node @xmath10 has a capacity @xmath30    which may represent available storage , processor speed , or bandwidth .",
    ": :    * neighborhood utilization * : neighborhood utilization of node    @xmath10 is defined as    @xmath31 ,    where @xmath32 is a set of _ close _ nodes which announce their    load information to node @xmath10 and @xmath33 is the    number of nodes in set s. : :    * load transfer cost * : load transfer cost is defined as    @xmath34 , where    @xmath35 indicates the network distance to transfer load    of node @xmath10 .",
    "the amount of transferred load for node    @xmath10 is shown by @xmath36 .",
    "our load balancing approach is not limited to a special kind of resource ( e.g. , storage , bandwidth , or cpu ) and includes three steps :    1 .   neighborhood load information collection .",
    "all nodes collect load and capacity information of nodes that exist in their routing table entries with network distance less than the one desired by the node for transferring load , we called @xmath37 .",
    "2 .   node categorization . according to the load and capacity of neighborhood nodes ,",
    "all nodes categorize themselves into heavy or light nodes .",
    "3 .   virtual server reassignments .",
    "after collecting neighborhood load information , computing the neighborhood utilization of overlay nodes , categorizing nodes , and finding proper light nodes which are _ close _ according to @xmath38 , a compromised parameter between the quality of load balancing and load transfer cost , heavy nodes transfer their virtual servers to light nodes .",
    "we use the procedure in figure  [ probingload ] to choose nodes and collect their neighborhood load information . before calling this procedure ,",
    "each node which wants to decrease its load determines the maximum desired network hops or round trip time(@xmath37 ) to transfer its extra load .",
    "in fugure  [ probingload ] , the @xmath39 calculates the distance between @xmath40 and the node in rth row of its routing table by the _",
    "mechanism .",
    "we use a restricted flooding schema to collect neighborhood load information . the flooding schema with a few time - to -",
    "live ( ttl ) hops have been presented by s. jiang et al .",
    "they have shown that is extremely effective and generates few excess messages .",
    "regularly , each node @xmath10 sends a probing message including the origin address information(ip ) , its practical internet coordinate(for estimating network distance ) , the @xmath37 value and a ttl value to some nodes that exist in its routing table entries , with network distance to node @xmath10 less than the @xmath37 .",
    "( int @xmath37 , node @xmath40 ) * procedure probe - load *    1 .    rownum @xmath41 getnumberofroutingtablerows(@xmath40 ) 2 .",
    "@xmath42 3 .",
    "* if * ( ttl @xmath43 ) 4 .    * for * ( r=0 ; r@xmath44rownum ; counter++ ) 5 .    * if * ( @xmath39 @xmath45 ) 6 .",
    "sendprobingloadmsg to @xmath46 ( ttl , @xmath37 , +   coordinate of @xmath40 ) 7 .",
    "* end if * 8 .",
    "* end for * 9 .",
    "* end if *     * procedure find - lightnode(@xmath47 candidate - vs ) *    1 .",
    "@xmath48 ; + //",
    "@xmath49 is a candidate node to recieve virtaul servers .",
    "* for * ( each node @xmath50 in @xmath51 ) + //@xmath51 is neighborhood load information set of node @xmath10 .",
    "3 .    @xmath52 + //",
    "@xmath53 is neighborhood utilization of node @xmath10 .",
    "4 .    *",
    "if * ( @xmath54 + @xmath55 ) 5 .",
    "* if * ( @xmath56 ) 6 .",
    "@xmath57 7 .",
    "@xmath58 8 .",
    "@xmath59 9 .     * else * 10 .",
    "@xmath35=@xmath60 +    //@xmath38 is a tradeoff parameter between the quality of +    //load balancing and load transfer cost 11 .     * if * ( @xmath61 +    @xmath62 ) 12 .     *",
    "if * @xmath63 +     // prioritize to quality of load balancing .",
    "13 .",
    "@xmath57 14 .",
    "@xmath64 15 .",
    "* end if * 16 .     * else * 17 .     *",
    "if * @xmath65 18 .",
    "ltc - renode@xmath66 +    // prioritize to network distance .",
    "19 .",
    "@xmath57 20 .",
    "* end if * 21 .",
    "* end if * 22 .",
    "* end if * 23 .",
    "* end if * 24 . *",
    "end for * 25 .",
    "* return * cannode     * procedure reassign - virtualserver *    1 .    node @xmath10 calculates it s neighborhood utilization 2 .",
    "@xmath67 + //",
    "@xmath68 is target load of node @xmath10 .",
    "3 .    * if * ( @xmath69 )   4 .    * return ; * // node @xmath10 is a light node .",
    "* end if * 6 .",
    "candidate - vs = node @xmath10 chooses one of its vs to leave .",
    "+ / * vs is abbreviation of virtual server*/ 7 .",
    "receiving - node = find - lightnode(@xmath70 ) 8 .   *",
    "if * ( receiving - node!= null ) 9 .",
    "transfer candidate - vs to receiving - node 10 .",
    "* end if *    node @xmath50 which receives a probing message replies to the origin node @xmath10 with its address information , current load , capacity and its practical internet coordinate .",
    "then , the ttl value is decreased by 1 and if the updated ttl value does not reach to 0 , it resends the received probing message to its routing table entries with network distance to origin node @xmath10 less than the @xmath37 .",
    "when origin node @xmath10 receives the replied probing messages , it computes the round trip time to the responding nodes by using the practical internet coordinate of responding nodes and the _ pic _ mechanism .",
    "after that , node @xmath10 stores this information to its neighborhood load information set(@xmath51 ) . the member count of this set can be represented as following : membercount(@xmath51 ) = @xmath71    @xmath72 . in this formula",
    ", @xmath24 represents the number of virtual servers per overlay node .",
    "based on our experimental evaluations in section [ exresult ] , our approach reaches a fine load balance if @xmath24 is @xmath1 and ttl is 2 .",
    "so , the member count of @xmath51 is @xmath73 in the worst - case .",
    "we consider the worst - case to be sending the probing messages to all nodes in the routing table entries and it happens only if we assign the biggest possible value to the @xmath37 .",
    "whenever a neighborhood load information set is become ready , each node @xmath10 knows the load and capacity of neighborhood nodes and then calculates its neighborhood utilization , @xmath53 , and its target load , @xmath68 .",
    "after that , if its current load , @xmath74 , is bigger than its target load , @xmath68 , it marks itself as a heavy node , then it chooses one of its virtual servers to leave node @xmath10 and makes it light .",
    "finding a proper virtual server takes @xmath75 time .",
    "we use procedure @xmath76 to reassign virtual servers .",
    "this process is described in figure  [ reassignment ] .",
    "@xmath77 is a parameter for a tradeoff between the amount of load transferred and the quality of load balancing .",
    "@xmath77 ideally is 0 .",
    "calculating the best reassignments is equivalent to minimize maximum node utilization problem and is np - complete  @xcite .",
    "so , it is impossible to reassign virtual servers across nodes perfectly but it can be solved by an approximate algorithm .",
    "we use the procedure in figure  [ finding ] to find a candidate node , @xmath49 , to recieve virtual servers .",
    "each heavy node @xmath10 finds a proper light node from its neighborhood load information set , @xmath51 . in figure",
    "[ finding ] , utilization of node @xmath50 is presented with @xmath78 , and @xmath79 indicates target load of node @xmath50 .",
    "@xmath80 shows the load of candidate virtual server of node @xmath10 , supposed to leave node @xmath10 .",
    "where @xmath49 is a candidate node to receive .",
    "the network distance between node @xmath10 and @xmath81 is shown by @xmath82 . in this procedure , it is certain that load of new virtual servers do not cause @xmath49 to become heavy , shown in line @xmath83 .",
    "additionally , the @xmath84 calculates the distance between node @xmath50 and node @xmath49 according to their practical internet coordinates by the _ pic _ mechanism .",
    "our approach provides a different kind of tradeoff between the quality of load balancing and load transfer cost , based on parameter qlb .",
    "a heavy node chooses a light node with the smallest utilization and network distance less than the @xmath38 .",
    "otherwise it tries to find the closest light node with network distance more than the @xmath38 , shown from line @xmath85 to @xmath86 .    the worst - case running time ( to be sending the probing message to all nodes in the routing table entries ) of procedure _ find - lightnode _ is @xmath72 , where the average number of virtual servers is shown by @xmath24 .",
    "based on our experimental results , whenever @xmath24 , @xmath87 , @xmath38 and @xmath37 are equal to @xmath0 , 2 , @xmath88 and @xmath89(based on gt - itm@xcite ) , our algorithm achieves good load balance . additionally , the worst - case running time of our proposed approach is @xmath90 . so that it does well in term of scalability .",
    "all overlay nodes collect load information and reassign virtual servers concurrently .",
    "therefore , some virtual servers may be sent to a light node from different heavy nodes , which causes a light node to become overloaded .",
    "hence , before sending virtual servers , a heavy node send a @xmath91 message to a light node . if its load is not changed , it acknowledges the heavy node and does not acknowledge to others .",
    "after a distinct interval , if a heavy node does not receive any acknowledge message from a light node , it chooses another node to transfer its extra load .",
    "we present experimental results which evaluates our load balance approach in raqnet overlay network .",
    "the results were achieved using a raqnet overlay with 4096 nodes running on an internet topology model .",
    "we assume that @xmath92 is a fraction of the search space which belongs to a virtual server that is exponentially distributed .",
    "also , @xmath93 and @xmath94 show the mean and the standard deviation of total load on raqnet overlay .",
    "we use gaussian distribution with mean @xmath95 and the standard deviation @xmath96@xcite for the load on virtual servers .",
    "we also use @xmath97 capacity for capacity of nodes . consequently , 20 percent , 45 percent , 30 percent , 4.9 percent , and 0.1 percent of node capacity is 1 , 10 , 100 , 1000 , 10000 .",
    "our experiments run on a simulated network topology which was generated by the georgia tech transit - stub network topology model  @xcite .",
    "ts4k - small includes 4 transit domains each with 4 transit nodes , 5 stub domains connected to each transit node , and 55 nodes in each stub domain on average .",
    "we assign @xmath98 and @xmath99(based on gt - itm@xcite ) while performing our topology - aware load balancing algorithm .",
    "figure  [ fig : ttl ] shows that the ttl value affects on node utilization .",
    "it improves the quality of load balancing while ttl value changes from 1 to 2 because there exist more alternative light nodes in neighborhood load information set , as we said in section [ neighborhood ] .",
    "increasing @xmath38 , the algorithm gives priority to the quality of load balancing and it ignores the load transfer cost . when we assign the biggest possible amount to @xmath37 and @xmath38 , our approach performs topology unaware load balancing . by decreasing the value of @xmath37 ,",
    "fewer nodes will report their load information to requesting nodes and the quality of load balancing will be decreased in overlay network .",
    "when ttl value is increased up to 4 or even more , the quality of load balancing will be decreased surprisingly .",
    "this is because it may ignore the nodes with small utilization and far network distance .",
    "however , the values of @xmath38 and @xmath100 will affect the quality of load balancing .",
    "thus , each overlay node can compromise between load transfer cost and its utilization .",
    "we separately compute the ltc ( load transfer cost ) , defined in section[description ] , with and without considering topology awareness .",
    "then , we calculate @xmath101 @xmath102 .",
    "@xmath101 is @xmath103 in gt - itm topology model .",
    "therefore , the network bandwidth is saved greatly in our approach .          in this section ,",
    "we show the effect of topology awareness on load balancing . in figure",
    "[ loadbalancing ] , cumulative distribution of transferred load is illustrated .",
    "it shows that 50% of load is transferred via the network distance with average link latency of 100 in gt - itm topology .",
    "also , more than 80% of load traverses the links with total average latency of 200 .",
    "in contrast , regardless of topology awareness , the 50% of load is transferred having average of about 280 of link latency .",
    "consequently , extra load of heavily loaded nodes is transferred among _",
    "close _ nodes and it imposes less traffic to underlying network .",
    "thus , topology aware load balancing saves bandwidth considerably .",
    "moreover , this algorithm converges quickly because it chooses nodes from _ close _ groups which are physically _ close _ together and therefore reduces the cost of transferring load .        in figure  [ loadbalancing ] the load balancing algorithm , suggested by godfrey et al  @xcite ,",
    "is indicated by `` directory '' line .",
    "it is obvious that their method is similar to topology unaware load balancing .",
    "the scatter plots of load for the gaussian distribution are shown in figure  [ fig : capacity1 ] and figure  [ fig : capacity2 ] and we use a @xmath97 capacity in our node capacity model .",
    "our load balancing approach helps to rearrange a bad load distribution into an acceptable arrangement and eventually each overlay node will have the load proportional to its capacity .",
    "figure  [ fig : load1 ] illustrates the cumulative in - degree distribution of 10000 raqnet nodes , based on gt - itm topology .",
    "the result shows that this distribution is not completely balanced .",
    "we also notice that this imbalance is quite remarkable in the first rows of routing tables because these rows are filled with _",
    "close _ nodes that their pe matches with the first labels of pe in local node .",
    "obviously , choosing _ close _ nodes will cause in - degree imbalance .",
    "we deal with this problem reactively .",
    "if one of the nodes with a high in - degree has the heavy workload , it sends a @xmath104 message to its neighbors by the departure links , as we explained in raqnet .",
    "the nodes which receive a @xmath104 message mark the corresponding entry in their routing tables and try to find an alternative node by triggering the routing table maintenance procedure which is described in raqnet .",
    "because the most remarkable entries happen to be at the top rows of routing tables , replacing nodes will not increase the distance traversed by messages .",
    "we believe that the in - degree imbalance as a consequence of topology awareness does not lead in a remarkable problem .",
    "this paper presents a simple distributed load balancing algorithm with topology - aware property for structured p2p overlay networks . in our approach , each node collects neighborhood load information from _ close _ nodes and then it reassigns its own extra load according to topology of underlying network .",
    "consequently , it provides rapid convergence on load balance and reduces the load transfer cost .",
    "our parametric algorithm increases the quality of load balancing among _ close _ nodes and also provides a different kind of tradeoff between the quality of load balancing and load transfer cost .",
    "the experimental results show that this approach is effective and considerably saves network bandwidth .",
    "we plan to enhance our load balancing approach to adapt in a dynamic system .",
    "moreover , as a future improvement to our approach , imposing other constraints ( e.g. utilization of nodes ) during collecting the load information of nodes , may be considerably helpful ."
  ],
  "abstract_text": [
    "<S> data load balancing is a challenging task in the p2p systems . distributed </S>",
    "<S> hash table ( dht ) abstraction , heterogeneous nodes , and non uniform distribution of objects are the reasons to cause load imbalance in structured p2p overlay networks . </S>",
    "<S> previous works solved the load balancing problem by assuming the homogeneous capabilities of nodes , unawareness of the link latency during transferring load , and imposing logical structures to collect and reassign load . </S>",
    "<S> we propose a distributed load balancing algorithm with the topology awareness feature by using the concept of virtual servers . in our approach , each node collects neighborhood load information from physically close nodes and reassigns virtual servers to overlay nodes based upon the topology of underlying network . </S>",
    "<S> consequently , our approach converges data load balancing quickly and it also reduces the load transfer cost between nodes . moreover , our approach increases the quality of load balancing among close nodes of overlay and it also introduces a new tradeoff between the quality of load balancing and load transfer cost among all overlay nodes . </S>",
    "<S> our simulations show that our approach reduces the load transfer cost and it saves network bandwidth respectively . </S>",
    "<S> finally , we show that the in - degree imbalance of nodes , as a consequence of topology awareness , can not lead to a remarkable problem in topology aware overlays . </S>"
  ]
}