{
  "article_text": [
    "the cms experiment is a large general - purpose high energy physics detector which will be used to study proton - proton and heavy - ion collisions at the large hadron collider ( lhc ) .",
    "although the experiment will not start operation for several years , the groups developing portions of the experiment , or subdetectors , are actively testing the electronics which will be used in the final experiment .",
    "the hadron calorimeter ( hcal ) group is well along in this project , and the current testbeam program is focused on evaluating the final designs for the electronics .",
    "the hcal testing program requires the development of data acquisition software which can handle the large number of channels and high data rate which the final electronics can produce .",
    "this paper describes the data acquisition software which was written for the 2002 test beam carried out at cern , as well as describing the changes and extensions made for the 2003 program .      before launching into the details of the testbeam daq , it is worthwhile to briefly review cms hcal and its the data readout chain . here",
    "we describe the setup used for the 2002 testbeam .",
    "the readout chain is shown schematically in figure  [ fig - chain ] .",
    "the cms hcal is a sampling calorimeter consisting of a brass absorber with plastic scintillator panels inserted into the absorber .",
    "the scintillation light from the panels is collected by wavelength - shifting fibers and transported to a hybrid photodiode ( hpd ) which converts the light into electrical charge .",
    "the charge signal is measured and encoded into a non - linear digital scale by the charge integrator ic ( qie ) .",
    "the qie uses the lhc clock to divide time into regular bins and measures the accumulated charge in each time bin .",
    "internally , the qie uses capacitors to accumulate the charge and measure the voltage .",
    "there are four such capacitors in each qie , and the qie uses each capacitor in turn , discharging it for two clocks before using it again .",
    "thus each subsequent time sample comes from a different capacitor - id or capid . in the final system ,",
    "each time bin will be 25ns long , but for the 2002 testbeam a slower clock was used , which made each bin 33ns long .",
    "the outputs of three qie channels are digitally combined onto a high - speed optical link and sent to the hcal trigger / readout ( htr ) board @xcite .",
    "the 2002 htr board could accept eight fiber links , corresponding to twenty - four qie channels .",
    "the htr board buffers the incoming digital data and transfers it to the data concentrator ( dcc ) @xcite when a level 1 accept ( l1a ) is received .",
    "future revisions of the htr board will also calculate trigger primitives for the trigger decision .",
    "the dcc is responsible for collating data from up to eighteen htrs and transferring it on to the central daq . in the 2002 testbeam ,",
    "the dcc transferred the data over a 32-bit slink fiber link to a pc .     ]",
    "the testbeam daq has several important requirements , which are not necessarily identical to the requirements for the final daq .    *",
    "* interfacing with testbeam trigger *  the trigger electronics used for the 2002 testbeam provide information to the daq through a caenv592 vme nim register and require feedback from the daq through a second caenv592 . * * readout of hcal data input chain *  the hcal data chain generates 976 bytes of data per htr per event or a total of 5856 bytes for each testbeam event ( with six htrs running ) .",
    "this data is dumped into a dma buffer and the daq must parse and store it . * * readout of testbeam subdetectors *  the testbeam setup for the hcal in 2002 includes several additional subdetectors such as a seven - by - seven crystal ecal mock - up readout with caenv792 qadcs and two wire chambers readout with a caenv767 tdc . a schematic showing the relationship between the subdetectors and their readout electronics",
    "is shown in figure  [ fig - readout ] .",
    "* * flexible design *  the testbeam daq should be flexible enough to function without the testbeam trigger system for special runs or testing away from the h2 testbeam area at cern .",
    "only minor configuration changes should be required to enable data taking with different sets of subdetectors or trigger sources . *",
    "* radioactive source calibration *  the daq must also be able to handle data from the radioactive source calibration , where the htrs produce histograms of data from the different qies and transmit them at a regular rate without triggers .",
    "the daq must sift through the dma buffers and find them .     ]",
    "the daq software is written in c++ and runs under linux kernels 2.2 and 2.4 .",
    "the daq is divided into a set of modules , each of which is a separate thread of execution , running under the pthreads@xcite multi - threading library .",
    "the communication between the threads and services such ip sockets are provided by a custom c++ library wrapping the underlying c - based services .    a module may handle the readout for a specific subdetector or it may analyze completed events for data quality monitoring or it may provide a more peripheral service like logging messages to disk or providing a interface between an external gui and the daq core .",
    "the two most important modules in the daq are the _ eventbuilder _ and the _ runmanager _ ,",
    "each of which is described in more detail below .",
    "each module has a state variable which may be in one of four major states : load ( just loaded ) , init ( initializing , or initialized ) , run , or stop ( stopping data acquisition or stopped ) .",
    "each of these states has substates which indicate whether the process is ongoing ( such as init / run ) , it has completed successfully ( such as stop / ok ) , or it has failed ( such as init / fail ) .",
    "transitions between these states are triggered by broadcast messages .",
    "the most important method which modules use to communicate is broadcast messages .",
    "any module can broadcast a very simple message ( one integer number in the range 0 - 255 ) to all modules .",
    "messages in the range ( 0 - 31 ) can be ignored ( masked off ) if a module is not interested in them . in practice , only a small fraction ( 16/256 ) of the range of possible broadcast message codes was used .",
    "a module can register one of its parameters as publicly accessible by assigning a string name and description to the parameter .",
    "other modules can query a given module for its list of defined parameters and their current values .",
    "they may also change parameters , if the exporting module has allowed this . within the daq ,",
    "the set of parameters which were established when the init message was last broadcast are the set which are active for any data acquisition .",
    "modules which are directly involved in the high - bandwidth data - stream also exchange memory blocks containing event fragments or complete events as described below in the description of the eventbuilder .",
    "when the daq application starts up , it reads a configuration file which specifies the modules to load and gives initial parameter values for the modules . only the eventbuilder , reporter , and",
    "runparammanager modules are loaded into the daq by default .",
    "all other modules are loaded at run - time based on the configuration file .",
    "the configuration file is coded in xml and the daq uses the libxml2@xcite xml parser from the gnome project .",
    "the xml configuration file contains two sections .",
    "the first section , `` @xmath0modules@xmath1 '' , contains a list of modules to load . for each module ,",
    "the name of the module within the daq is specified first , then the class name , and the name of the shared library containing the class .",
    "the daq code uses a standard mechanism for loading classes and provides a preprocessor macro to create the necessary stub code .",
    "the second section of file , `` @xmath0parameters@xmath1 '' , contains a list of modules and provides initial values for registered parameters in the module .",
    "any registered parameter which is not read - only can be set using the parameter file .",
    "the daq framework is responsible for parsing the xml file and setting all the parameters specified in the relevant modules before sending the load broadcast command .",
    "the eventbuilder module is responsible for collecting all the event fragments from the subdetector readout modules and assembling complete valid events .",
    "the eventbuilder defines streams of data associated with specific data blocks , such as the normal hcaldata block produced during beam data running or the wirechamberdata block which contains the data from the wire chambers .",
    "the eventbuilder must be configured to know which blocks to expect in a given run .",
    "only events with all the configured blocks are considered good .",
    "the eventbuilder has a configurable property which is the number of event buffers to allocate .",
    "all readout modules read this parameter to decide how many event fragment buffers they should locally allocate .",
    "this is the upper bound to how many events can be acquired within a spill .",
    "the eventbuilder allocates this many structures containing empty pointers for the readout streams .",
    "as readout modules receive triggers , they pass a pointer to the data for each event to the eventbuilder which organizes the pointers by data stream and event number .",
    "once the end of spill is signaled by the runmanager , the eventbuilder starts trying to assemble complete events . if all readout modules have completed ( returned to the state run / run from run / busy ) , and there are still events which do not have all required fragments , the spill is declared bad and all events are thrown away .",
    "this behavior is required since not all subdetectors have reliable event counters and this eliminates the possibility of event data mismatch .",
    "if the spill is good , the events are distributed to the `` listeners '' .",
    "these are threads ( not full modules , but threads of a specific form set by the eventbuilder ) which have registered themselves with the eventbuilder to receive all good events .",
    "the writer module which stores the events to disk uses such a listener thread .",
    "once all listeners have finished with the data blocks , the eventbuilder sends a broadcast message to all readout modules indicating that the event buffers are released and they can be reused for the next spill .",
    "the runmanager class is responsible for providing the triggerdata stream to the eventbuilder , for generating readout and end - of - spill broadcast messages , and for logging completed runs into the database .",
    "the base runmanager class handles the database logging , but the other tasks are left to derived runmanager classes .",
    "these derived classes generate trigger messages in different ways depending on the physical setup required .",
    "the main beam - data manager is the h2manager class , which interfaces to the h2 trigger using two caenv513 nim register vme boards .",
    "the external trigger system signals the daq when triggered data should be read out and the h2manager signals back to the trigger when the daq is ready for the next event .",
    "the trigger system also signals the manager when the spill is over and the manager broadcasts the message through the daq .",
    "other runmanagers of note include the sourcemanager which is used for taking radioactive source calibration data and the benchmanager which is used for led pulser runs with the special pulser setup in h2 or for generating triggers via software through the ttcvi module .",
    "the hcal readout module is the most complicated of the readout modules .",
    "there are usually six or more htrs in the readout crate , but not all htrs are needed at any given time .",
    "the hcalreadout module allows different htrs to be enabled or disabled and handles the proper initialization for both the htrs and the dcc .",
    "the hcalreadout module uses the slink driver developed by the university of hawaii @xcite .",
    "the module configures the driver to put the data acquired during a spill into a single dma block in memory .",
    "as the htrs receive triggers and push the data on to the dcc , the dcc forwards the data over the slink to the pc where it appears in the dma buffer . at the end of a spill",
    ", the hcalreadout module picks through the buffer and finds the event fragments from each htr .",
    "the dcc does not wrap the events with a header or trailer , so the daq simply takes `` one block from each htr '' as a complete event .",
    "if two blocks appear from one htr before one from another , a warning message is issued .    during data taking with the radioactive source , no triggers",
    "are generated .",
    "instead , the htrs build histograms and forward them to the dcc at a fixed rate . within the daq ,",
    "each set of histograms is taken as `` one event '' .",
    "since the runmanager and eventbuilder need to know how many events were taken , the hcalreadout module counts how many it sees in the dma buffer when it receives a special broadcast message .",
    "the special message is sent by the sourcemanager , which receives information about the position of the source and whether the run is complete via dim ( see below ) .",
    "the sourcemanager then asserts that the number of events which the hcalreadout saw occurred .",
    "since the reel position data arrives at a different rate than the histograms , the sourcemanager then must map the reel data onto the same number of events as the histograms . for this purpose",
    "the sourcemanager uses the time - stamp which is sent along with the reel data from the source control computer .",
    "besides the major modules , there are many other modules which can be loaded into the daq .",
    "the ecalreadout module reads out the 7x7 ecal matrix using a pair of caenv792 vme qadcs .",
    "the tdcreadout module reads out the wire chambers and other timing measurements using a caenv767 vme tdc .",
    "the runparammanager module provides central repository for information to be stored in the rundata section of the files .",
    "the module allows new parameters to be created inside itself and all the parameters defined in the module are automatically stored into the rundata header by the writer .",
    "some of the information is also put into the runs database . finally , the writer module is responsible for storing the completed events in a root file .",
    "the daq process does not itself provide any mechanism for a user interface to control the run .",
    "such an interface can provided by a module , and multiple modules could be written to control the daq using different communication techniques . during normal operations ,",
    "the daq was controlled using a java application which communicated with the daq through a custom remote - procedure - call ( rpc ) protocol .",
    "the rpc protocol is transported using the standard tcp / ip transport , so the gui program does not have to be run on the same machine as the daq .",
    "the java gui used the services of the externalinterface module .",
    "the protocol allows the gui to obtain the state of the system in the form of an xml document which has the same format and structure as the `` @xmath0parameters@xmath1 '' section of the configuration file .",
    "the gui parses this xml document to determine the state of all the registered parameters .",
    "the protocol also allows the gui to change the values of parameters and to send broadcast command messages .",
    "the java gui also incorporates a plotting package which can access the histograms exported by the statsman module through the histoexporter class .",
    "these histograms are available on an ip port in text form , and the gui can plot these online monitoring histograms .",
    "the distributed information management system software @xcite has emerged as a powerful , general , and freely - distributable tool for exporting and accessing structured data and sending commands .",
    "heavy use of dim will be made at cms and lhc , not least because of the dim@xmath2pvss gateway which has been developed .",
    "the current version of the daq does not include a module to allow direct control of the daq through dim , but it does use dim to gather several important types of data .",
    "the daq includes a module called infograbber which allows the daq to pull information from several dim servers . from the beaminfodataserver",
    ", the daq can learn the beam energy , beam settings , and the particle type . from the tabledataserver",
    ", the daq can learn the position of the movable table on which the hcal and ecal are mounted .",
    "other servers provide temperature measurements of the ecal matrix , and allow configuration commands to be sent to the qies and other front - end chips from a windows machine .",
    "dim is also used during source data taking to obtain the reel position and other data from the source control computer .",
    "the data is stored in a root tree format , where each event is represented by an object of type testbeamdata , which may contain pointers to other data blocks .",
    "each of the data blocks is placed onto its own root branch .",
    "a c++ library is provided for users to access and reconstruct the data in the root files .",
    "complete documentation for this library can be found in reference @xcite .",
    "basic configuration data and statistics for each saved run are stored in a runs database .",
    "the database consists of a set of xml files which contain entries for a range of run numbers .",
    "this database is cached in afs space and also is available for querying on the web .",
    "more information about the runs database can be found at @xcite and the main daq website @xcite .",
    "the daq software worked well for the 2002 testbeam . during the summer running , 3,081 runs were taken covering some 53,182 spills and containing 100,655,201 events .",
    "the data volume recorded into the central data recording was 280 gb , with an average compression ratio ( from root ) of 2.1:1 . on average , the daq was run at rate of 1700 events per spill or 350 hz , but when the beam intensity was increased the readout rate reached 4720 events per spill or 960 hz .",
    "the data acquired has proved extremely useful in understanding the performance of the final system and testing the calibration and resolution of the calorimeter .      the testbeam program for the hcal will continue in 2003 , and the daq software is changing to approach the final software structure which will be used in cms .",
    "the custom base library will be replaced by the xdaq library @xcite , while the configuration management will be significantly updated to support increasing complicated configurations .",
    "the custom xml - based runs database will be transferred into a standard sql server form , which will improve the stability of the system .",
    "the goals for 2003 include structured beam running for the barrel part of the calorimeter , a first look at the endcap sections with the final electronics , and study and calibration of the forward hadron calorimeter .",
    "it will be challenging to acquire and process the required data volumes , but the results will be bring the cms hcal closer to operational status .",
    "9 t. grassi .",
    "`` cms hcal trigger / readout working page . ''",
    "* http://tgrassi.home.cern.ch / tgrassi / hcal*. e. hazen .",
    "`` cms hcal data concentrator working page . ''",
    "* http://ohm.bu.edu/  hazen / hcal*. b.  nichols , d.  buttlar , and j.  farrell .",
    "* pthreads programming * , nutshell handbook .",
    "daniel veillard .",
    "`` the xml c library for gnome . '' * http://xmlsoft.org*. s.  isani , canada - france - hawaii telescope group .",
    "* http://software.cfht.hawaii.edu / sspci*. dim , a portable , light weight package for information publishing , data transfer and inter - process communication ( pdf ) presented at : international conference on computing in high energy and nuclear physics ( padova , italy , 1 - 11 february 2000 ) , + dim working site .",
    "* http://dim.home.cern.ch / dim*. hcal 2002 testbeam working page .",
    "* http://cern.ch / cms - testbeamh2*. j. mans .",
    "`` htbdaq . '' * http://flywheel.princeton.edu/  jmmans / htbdaq*. j. mans .",
    "`` htbdaq_data library . ''",
    "* http://flywheel.princeton.edu/",
    "jmmans / htbdaq_data*. j. mans .",
    "`` htbdaq_runsdb library and utilities . ''",
    "* http://flywheel.princeton.edu/",
    "jmmans / htbdaq_rundb*.",
    "xdaq working page .",
    "* http://cern.ch/xdaq/ * ."
  ],
  "abstract_text": [
    "<S> although cms will not start operation for several years , many subdetector groups have active testbeam programs involving final or near - final electronics . </S>",
    "<S> the high - bandwidth electronics require the development of new daq systems including hardware and software . </S>",
    "<S> this paper presents the design and performance of the daq software used for the summer 2002 hcal testbeam at cern . </S>",
    "<S> this system successfully acquired over 80 m testbeam events , running at rate of 200 - 1000 hz . </S>",
    "<S> the paper also describes some of the developments made for the 2003 testbeam , including the integration of the cms xdaq framework . </S>"
  ]
}