{
  "article_text": [
    "a _ robot network _ is a collection of robots working together to achieve a common goal . in order for the robots in such a network to cooperate effectively ,",
    "the ability to observe each other s movements is critical . in many applications , distinguishing between the robots is necessary , but is usually difficult because the robots are identical .",
    "for example , in a _ formation control _ system , robots collectively arrange themselves in some fixed geometric configuration @xcite .",
    "each robot controls its position relative to its neighbours . to achieve this",
    ", the robot must continuously measure the position and determine the identity of each neighbour .",
    "some formation control systems may also benefit from knowledge of the relative orientation of its neighbours , since this information can be used to coordinate views and improve the stability of the system .",
    "we present a novel camera - based method for robot identification , orientation estimation , and approximate distance / angle measurements .",
    "the system uses a camera to observe sequences of coloured lights mounted on the robots .",
    "the lights are mounted in a circle around each robot ( in a plane parallel to the ground ) , such that a camera may see only some of the lights .",
    "the sequences of colours are chosen so that any consecutive subsequence of sufficient length corresponds uniquely to a particular robot in a particular orientation .",
    "this system was implemented in an existing network of _ ebugs_. the _ ebug _",
    "@xcite is a robotics platform designed at monash university s wireless sensor and robot networks laboratory @xcite .",
    "it is equipped with sixteen rgb leds ( red , green and blue light - emitting diodes ) on its perimeter , which can be programmed to display a sequence of colours .",
    "a photo of an ebug may be seen in figure  [ fig : ebug ] .",
    "figure  [ fig : example colouring ] shows an example of a colouring of four ebugs .",
    "these ebugs have only eight leds , and use only two different colours for illustrative purposes .",
    "any subsequence of five leds is coloured with a unique pattern .",
    "for example , the sequence appears ( counter - clockwise ) only on the right side of the second ebug .",
    "/in 0/1,0,1,1,1,1,1,0 , 1/0,1,0,0,0,0,0,1 , 2/0,0,1,1,0,1,1,0 , 3/0,0,1,1,1,0,0,1    ( 0,0 ) circle [ radius=1 cm ] ; in at ( 360/8*i:1 cm ) ;    in a real system , there are limits on the number of colours a camera may reliably distinguish .",
    "similarly , spatial resolution of the camera limits the number of detectable leds around each ebug .",
    "therefore , for a given set of parameters , we want to maximise the number of ebugs that we can use in the system .",
    "this maximum , the _ ebug number _ , is formally defined below .",
    "[ def : ebug number ] suppose every ebug has @xmath1 leds , each of which can be illuminated in one of @xmath0 colours , and suppose further that a camera can reliably detect @xmath8 consecutive leds .",
    "an assignment of colours to the leds of all ebugs is _",
    "@xmath2-valid _ if the camera can distinguish each ebug in each of the @xmath1 orientations . the _ ebug number _",
    "@xmath9 is the maximum number of ebugs for which there exists an @xmath2-valid assignment of colours .",
    "as well as modelling an actual problem that arises in robot networks , determining ebug numbers is a natural combinatorial problem of independent interest .",
    "each of the @xmath10 possible sequences the camera can see can not appear more than once , and each ebug uses @xmath1 distinct sequences .",
    "this gives the following upper bound for the ebug number :    @xmath11    colourings that achieve the upper bound in are called _",
    "optimal_. in such colourings , each sequence of @xmath2 colours appears on some ebug . note that when @xmath12 , no @xmath2-sequence of a constant colour can appear on an ebug since all orientations would be identical .",
    "thus optimal colourings can only exist for @xmath13 .",
    "a lower bound may be obtained by applying the lovsz local lemma @xcite : consider a random colouring of @xmath14 ebugs , with each of the @xmath15 leds coloured independently and uniformly at random . for each pair @xmath16 of led sequences ( of length @xmath2 ) ,",
    "let @xmath17 be the event that the same colour sequence has been assigned to @xmath18 and @xmath19 .",
    "thus the colouring is @xmath2-valid exactly when none of the events @xmath17 occurs .",
    "since there are exactly @xmath15 led sequences , and each sequence overlaps with at most @xmath20 other sequences , each event @xmath17 depends on at most @xmath21 other events .",
    "the probability of each @xmath17 is at most @xmath22 ( less if @xmath18 and @xmath19 are overlapping ) .",
    "therefore , by the local lemma , there is an @xmath2-valid colouring whenever @xmath23 , where @xmath24 is euler s number .",
    "hence we obtain the following lower bound :    @xmath25    for a fixed value of @xmath2 , this bound is within a constant factor of the upper bound in . in actual camera systems , however , it is reasonable to assume that @xmath2 is proportional to @xmath1 , since a camera can usually detect a fixed arc of the led circle .",
    "thus the lower bound is rather crude , and ultimately we would like to solve the following problem .",
    "[ prob : determine e ] determine @xmath9 exactly .    for small values of @xmath0 and @xmath2 ,",
    "a computer search was performed to find large @xmath2-valid colourings .",
    "surprisingly , optimal colourings were found in many cases .",
    "these experiments confirm the following conjecture for all @xmath0 and @xmath2 with @xmath26 . while problem  [ prob : determine e ] is likely to be very difficult to solve in general , a mathematically interesting problem is to characterise when optimal colourings exist ( hopefully by proving conjecture  [ conj : e always optimal ] ) .",
    "[ conj : e always optimal ] @xmath27 whenever @xmath1 divides @xmath10 and @xmath13 .",
    "this paper provides constructions for some infinite families of optimal colourings , and as such gives evidence to support this conjecture .    in section  [ sec :",
    "preliminaries ] , problem  [ prob : determine e ] is shown to be equivalent to finding many cycles in a _",
    "de  bruijn graph _",
    ", with conjecture  [ conj : e always optimal ] corresponding to a partition into cycles ( see proposition  [ prop : partition conditions ] ) .",
    "existing results about _ de  bruijn sequences _ are also discussed .",
    "a well - known algebraic construction of de  bruijn sequences is given in section  [ sec : lfsrs ] ; we extend this construction to prove some existence results for ebug colourings .",
    "the major result of this section is theorem  [ thm : lfsr translation ] , which proves conjecture  [ conj : e always optimal ] for infinitely many values .",
    "theoremlfsrtranslation[thm : lfsr translation ] if @xmath0 is a prime power and @xmath28 , then @xmath29 .    in section  [ sec : necklaces ] , we introduce _ necklaces _ and how they relate to de  bruijn graphs .",
    "we then prove the following theorems , both of which yield large ebug colourings from smaller ones .",
    "theoremproductcolouring[thm : product colouring ] fix a value of @xmath2 and set @xmath30 and @xmath31",
    ". then @xmath32    theoreminterleaving[thm : interleaving ] @xmath33 whenever @xmath7 divides @xmath1 .",
    "these theorems preserve optimality , so we may use them to find optimal colourings for large numbers of ebugs .",
    "a valid colouring of ebugs has an interesting interpretation as cycles in a de  bruijn graph .",
    "these graphs were discovered independently by de  bruijn @xcite and good @xcite in 1946 .    the @xmath2-th order @xmath0-ary _ de  bruijn graph _",
    "@xmath3 is the digraph @xmath34 , where @xmath35 and @xmath36 .",
    "the vertices of @xmath3 are words of length @xmath2 over an alphabet of size @xmath0 .",
    "there is an edge from @xmath37 to @xmath38 if shifting @xmath37 left and appending any letter gives @xmath38 .",
    "an example of such a graph is shown in figure  [ fig : example db ] .",
    "( 000,001,010,100,001,011,111,110,101,011,110,100,000 ) ( 101,010,101 ) ( 000 ) ( 111 )    there is also an alternative , equivalent definition of de  bruijn graphs that involves iteratively taking line digraphs @xcite . in this construction , @xmath39 is defined as the complete digraph on @xmath0 vertices with loops .",
    "higher order de  bruijn graphs are defined as follows : @xmath40 is the line digraph of @xmath3 .",
    "the vertices in @xmath40 correspond to edges in @xmath3 .",
    "note that while cycles in @xmath3 map directly to cycles in @xmath40 , the converse is not always true : there may be repeated vertices when a cycle from @xmath40 is projected down to @xmath3 .",
    "the objects in @xmath3 that correspond to cycles in @xmath40 are called _ circuits _ , which are closed walks with no repeated edges ( vertex repetition is allowed ) .",
    "[ prop : partition conditions ] the following are equivalent :    1 .",
    "there is a partition of the vertex set of @xmath3 into pairwise disjoint @xmath1-cycles .",
    "3 .   there is a partition of the edge set of @xmath41 into pairwise edge - disjoint @xmath1-circuits .",
    "( @xmath42 ) suppose that each vertex of @xmath3 corresponds to a particular camera view of @xmath2 consecutive leds on some ebug .",
    "rotating the ebug to the left corresponds to following an edge in the graph , since the leds shift to the right and one new led is visible .",
    "hence a cycle of length @xmath1 in @xmath3 corresponds to the colouring of a single ebug with @xmath1 leds .",
    "a set of multiple disjoint cycles gives an @xmath2-valid colouring of multiple ebugs ( because vertices are not repeated , each orientation is uniquely identifiable ) , so the ebug number @xmath9 equals the maximum number of _ disjoint @xmath1-cycles _ in @xmath3 .",
    "if every vertex is in one of the @xmath1-cycles , then each colour sequence appears on some ebug .",
    "conversely , if any given colour sequence can be found on some ebug , then the corresponding vertex is in one of the @xmath1-cycles .",
    "thus optimal colourings exist exactly when the whole graph can be partitioned into disjoint @xmath1-cycles .",
    "( @xmath43 ) the equivalence follows immediately from the line digraph construction .",
    "bryant studied edge decompositions of complete directed graphs with loops @xcite , which correspond to the first order de  bruijn graphs @xmath39 .",
    "the main result of @xcite was that @xmath39 can be decomposed into @xmath1-circuits if and only if @xmath44 and @xmath1 divides @xmath45 . by proposition  [ prop : partition conditions ] , this solves conjecture  [ conj : e always optimal ] for @xmath46 .",
    "a similar problem was also posed by dudeney in 1917 @xcite , now commonly known as `` dudeney s round table problem '' .",
    "this problem is equivalent to finding a set of hamiltonian cycles in the complete graph @xmath47 , such that every path of two edges appears in exactly one of the cycles .",
    "dudeney s problem was solved for even @xmath14 @xcite , and also some other cases such as when @xmath48 is a prime power @xcite .",
    "a generalisation of dudeney s problem was studied in @xcite ; here @xmath47 is covered by @xmath1-cycles with the same property ( instead of @xmath14-cycles ) . the main difference between these problems and problem  [ prob : determine e ] is that we are concerned with directed circuits in digraphs , and that we allow loops on the vertices .",
    "there is a body of research on cycle decompositions of complete graphs ( see @xcite for an introduction and @xcite for recent results ) , and also some work relating to decompositions into fixed - length directed cycles @xcite .",
    "the methods used , however , are very specific to the special structure of complete graphs , and can not be applied to de  bruijn graphs .",
    "there are also results about decomposing de  bruijn graphs into _",
    "variable - length _ cycles , using techniques like splitting and merging existing cycles @xcite .",
    "golomb s conjecture , which was proven by mykkeltviet @xcite , states that the decomposition of binary de bruijn graphs into the largest number of disjoint cycles is the decomposition into _ necklaces _ ( see section  [ sec : necklaces ] for a definition ) .",
    "these results , unfortunately , can not easily be applied to help with conjecture  [ conj : e always optimal ] , since the specific requirement of fixed - length cycles is quite restrictive .",
    "note that in the de  bruijn graph @xmath3 , every vertex has in - degree and out - degree @xmath0 .",
    "also , a path can be found from any vertex @xmath37 to any vertex @xmath38 by shifting in letters of @xmath38 one at a time , so the graph is connected .",
    "hence @xmath3 is eulerian , and the next de  bruijn graph @xmath40 is hamiltonian ( since an eulerian circuit in @xmath3 is equivalent to a hamiltonian cycle in @xmath40 ) .",
    "this simple fact gives us a starting point for conjecture  [ conj : e always optimal ] in the @xmath49 case : it shows that @xmath50 for every @xmath0 and @xmath2 .",
    "hamiltonian cycles in de  bruijn graphs are called _ de  bruijn sequences_.",
    "the number of @xmath51-de  bruijn sequences is @xmath52    this result is due to van  aardenne - ehrenfest and de  bruijn @xcite , and uses an equivalence between spanning arborescences and eulerian circuits in eulerian digraphs .",
    "there are several known methods for generating de  bruijn sequences .",
    "one construction @xcite gives the lexicographically smallest sequence for any given values of @xmath0 and @xmath2 through clever concatenation of necklaces .",
    "this method is described in section  [ sec : necklaces intro ] .",
    "another construction involves calculations in finite fields @xcite .",
    "this only works when @xmath0 is a prime power , but has a very simple implementation , which is described in section  [ sec : db sequence from lfsr ] .",
    "in this section , algebraic properties of finite fields are exploited to find interesting structures in de  bruijn graphs .",
    "section  [ sec : db sequence from lfsr ] describes a well - known construction of de  bruijn sequences ; we extend this construction further in sections  [ sec : lfsr splitting ] and [ sec : lfsr translations ] to find multiple @xmath1-cycles in de  bruijn graphs .",
    "we assume that the reader is familiar with elementary group and field theory ; see @xcite for example .",
    "let @xmath0 be a prime power , and choose a primitive element @xmath53 from the finite field @xmath54 .",
    "that is , @xmath53 generates the multiplicative group @xmath55 .",
    "we may consider @xmath56 to be an @xmath2-dimensional vector space over @xmath57 , in which case @xmath58 is a basis .",
    "in particular , @xmath59 can be written as a linear combination of these basis vectors : @xmath60 ( this is called the _ minimal polynomial _ of @xmath53 over @xmath57 ) .    a _ linear feedback shift register _ ( lfsr ) is a digital circuit that generates elements of @xmath61 by successive multiplication by @xmath53 .",
    "the simplest implementation , a _",
    "galois lfsr _ , represents the field elements as vectors in @xmath62 with respect to the basis @xmath58 .",
    "multiplication of a vector @xmath63 by @xmath53 is simply a shift of the vector to the right , except that an @xmath59 term is produced . but @xmath59 can be rewritten in terms of the basis vectors , so the multiplication corresponds to the function @xmath64 . since the new state is a linear transformation of the previous state , this function can be expressed as the matrix equation in @xmath65 ( over @xmath57 ) , where the _ _ state change matrix__. ] @xmath66 is given by    @xmath67    the constants @xmath68 depend on @xmath53 , and are called the _",
    "feedback coefficients _ for the lfsr .",
    "note that since @xmath61 is generated by @xmath53 , repeatedly applying this operation to some non - zero initial vector generates every non - zero vector in @xmath62 .",
    "a _ fibonacci lfsr _ is a similar construction that uses the transposed state change matrix @xmath69 . in this configuration ,",
    "the next state is given by @xmath70 .",
    "in fact , a fibonacci lfsr performs the same operation as the corresponding galois lfsr when the vectors are represented in a different basis . to see this ,",
    "we must find a matrix @xmath71 that satisfies @xmath72 .",
    "let @xmath71 be defined by @xmath73 for @xmath74 and @xmath75 ( that is , the @xmath16-th entry of @xmath71 is the @xmath76-th entry of @xmath77 ) . the entries of powers of a companion matrix are explicitly known @xcite ,",
    "so we can observe that @xmath71 is a symmetric matrix .",
    "similarly , since @xmath78 , @xmath79 is also symmetric .",
    "hence @xmath80 , so @xmath71 is a change of basis matrix from @xmath66 to @xmath69 .",
    "note that the first row of @xmath71 is @xmath81 , so the first basis vector for the fibonacci lfsr is also @xmath82 ( as in the galois lfsr ) .",
    "we now show that the fibonacci lfsr follows edges in the corresponding de  bruijn graph . from here",
    "onwards , we do not use galois lfsrs and instead only represent field elements in the fibonacci basis .",
    "[ prop : edges in fibonacci basis ] let @xmath54 and fix a primitive @xmath83 . if the elements of @xmath56 are identified with the vertices of @xmath3 by expressing them in the fibonacci basis over @xmath84 , then @xmath85 is an edge in @xmath3 for each @xmath86 .",
    "observe that the state change operation @xmath87 in a fibonacci lfsr corresponds to a left shift of the state vector and an extra term on the end .",
    "this is exactly what is required for an edge in @xmath3 .",
    "proposition  [ prop : edges in fibonacci basis ] can be used to describe all edges of @xmath3 in terms of field operations .",
    "[ lem : adding scalar preserves edges ] if @xmath86 and @xmath88 , then @xmath89 is an edge in @xmath3 .    by proposition  [ prop : edges in fibonacci basis ]",
    ", @xmath85 is an edge in @xmath3 . recall that in the construction of the fibonacci basis , the first ( or leftmost ) component corresponds to the basis vector @xmath90 ( the multiplicative identity of @xmath56 ) . thus adding a scalar @xmath24 to a vector only changes the first component , which is shifted out when following an edge in @xmath3 .",
    "hence @xmath91 and @xmath92 have the same out - neighbours ( including @xmath93 ) .",
    "now consider repeatedly applying the state change operation @xmath87 to some initial non - zero field element ( @xmath90 for example ) . since @xmath53 generates @xmath61 , the fibonacci lfsr traverses a cycle of length @xmath94 in @xmath3 .",
    "the missing vertex is @xmath95 , and can always be inserted into this cycle by replacing the edge @xmath96 with two edges @xmath97 and @xmath98 .",
    "note that @xmath97 and @xmath98 are edges by lemma  [ lem : adding scalar preserves edges ] ( with @xmath99 , @xmath100 and @xmath101 , @xmath102 , respectively ) .",
    "thus we have found a hamiltonian cycle in @xmath3 , which is a de  bruijn sequence .      due to the inherently algebraic construction of linear feedback shift registers ,",
    "the symmetry properties of such sequences may be exploited to produce many cycles of the same length . for this section",
    ", we identify vertices of @xmath3 with the elements of @xmath103 via the fibonacci basis described above ( with respect to a fixed primitive @xmath83 ) .",
    "fix a value of @xmath104 , and let @xmath105 for each non - zero scalar @xmath106 .",
    "since @xmath107 , there is an edge from @xmath108 to @xmath109 in @xmath3 ( by lemma  [ lem : adding scalar preserves edges ] with @xmath110 ) .",
    "we also have @xmath111 other edges @xmath112 for @xmath113 , so we can form a @xmath1-cycle @xmath114 for each of the @xmath115 values of @xmath106 . in general ,",
    "these @xmath115 cycles are not necessarily pairwise disjoint , but we now show that they are if @xmath1 is small .",
    "[ thm : lfsr splits evenly ] @xmath116 for every prime power @xmath0 and every @xmath117 .    let @xmath118 be the value of @xmath18 for which @xmath119 ; that is , the discrete logarithm of @xmath91 with base @xmath53 .",
    "this is well - defined on all of @xmath61 because @xmath53 is a generator .",
    "note that @xmath120 is also the position of @xmath91 in the lfsr sequence ( if the initial state is 1 ) . now consider the relative position of the starting points of two different cycles @xmath121 and @xmath122 as described above , with @xmath123 .",
    "the distance along the lfsr sequence between these starting points is    @xmath124    note that @xmath125 , which is a subgroup of @xmath61 of order @xmath115 .",
    "also note that @xmath126 , and that @xmath127 for @xmath128 .",
    "thus @xmath129 has order @xmath115 .",
    "but there is only one subgroup of @xmath61 of order @xmath115 ( since @xmath61 is cyclic ) , so @xmath130 .",
    "hence @xmath131 for some @xmath19 , so @xmath132 is an integer multiple of @xmath133 .",
    "since @xmath134 , the @xmath1 consecutive vertices of @xmath121 can not be in @xmath122 , whose starting vertex is at least @xmath133 places past the start of @xmath121 .",
    "hence these @xmath115 @xmath1-cycles are pairwise disjoint .      fix a scalar @xmath88 , and let @xmath135 .",
    "note that @xmath136 has exactly one fixed point , namely @xmath137 .",
    "hence @xmath138    by lemma  [ lem : adding scalar preserves edges ] , the @xmath0 out - neighbours of a vertex @xmath91 are @xmath139 .",
    "thus we may partition the edges of @xmath3 into the @xmath0 parts @xmath140 , where @xmath88 .",
    "note that ensures that @xmath141 implies @xmath142 . hence if @xmath143 is a circuit contained in @xmath144 , then @xmath145 is a circuit contained in @xmath146 .",
    "we call this operation _ translating _ the circuit by @xmath24 .",
    "note that the @xmath0 translations of a circuit contained in @xmath144 are pairwise edge - disjoint because the @xmath146 are disjoint .",
    "we are now ready to prove theorem  [ thm : lfsr translation ] , which we restate here :    if @xmath147 , then the result is trivial since @xmath39 contains @xmath0 loops .",
    "hence we may assume that @xmath148 .",
    "let @xmath4 . by proposition  [ prop : partition conditions ] , it is sufficient to find a partition of @xmath41 into @xmath0 edge - disjoint @xmath1-circuits .",
    "recall from section  [ sec : db sequence from lfsr ] that the lfsr sequence is constructed using edges solely of the form @xmath149 , and forms a cycle @xmath150 of length @xmath111 .",
    "this cycle ( of vertices ) is also a circuit of @xmath111 edges , and we can construct a translated @xmath151-circuit @xmath152 in @xmath146 for each scalar @xmath88 .",
    "the circuit @xmath150 contains every edge from @xmath144 except the loop @xmath153 , which translates to another loop @xmath154 in @xmath146 .",
    "since @xmath150 contains every non - zero vertex , we may insert , say , the loop @xmath155 into @xmath150 to obtain a @xmath1-circuit @xmath156 ( note that @xmath156 is no longer a cycle since it contains the vertex @xmath157 twice ) . similarly",
    ", we may insert the loop @xmath158 into @xmath152 to generate a @xmath1-circuit @xmath159 for each @xmath88 .",
    "observe that each edge @xmath160 of @xmath41 appears in a unique circuit : if @xmath161 , then the edge is a loop in @xmath162 ; otherwise it is in @xmath159 .",
    "thus we have a partition of @xmath41 into @xmath0 edge - disjoint @xmath1-circuits @xmath163 .",
    "hence @xmath164 .",
    "for example , we may apply theorem  [ thm : lfsr translation ] with @xmath165 and @xmath166 to obtain three cycles of length 9 .",
    "suppose we choose a primitive @xmath167 whose minimal polynomial over @xmath168 is @xmath169 .",
    "we now construct a 26-cycle @xmath150 in @xmath170 by iterating the lfsr starting from vertex @xmath171 , which corresponds to the field element @xmath90 ( the multiplicative identity of @xmath56 ) .",
    "this produces the following cycle of symbols : @xmath172 ( the corresponding cycle of vertices is @xmath173 ) .",
    "now we may construct the 27-circuit @xmath156 by inserting a loop , say @xmath174 , into @xmath150 .",
    "the three translations of @xmath156 , shown below in , partition the edge set of @xmath170 , and hence the corresponding cycles in @xmath175 partition the vertex set of @xmath175 .",
    "thus we have shown that @xmath176 .",
    "@xmath177      suppose that in the construction of the lfsr , we chose a non - primitive element @xmath91 with multiplicative order @xmath178 . if @xmath179 is still a basis of @xmath103 over @xmath57 , then vectors with respect to this basis are still in correspondence with field elements .",
    "repeated multiplication by @xmath91 , however , no longer generates every element of @xmath61 ; instead this process traverses the cyclic subgroup of order @xmath1 generated by @xmath91 .",
    "thus the action of the lfsr traces out this subgroup of @xmath61 if the initial state is the identity @xmath90 .",
    "this corresponds to a @xmath1-cycle in @xmath3 .    choosing a different starting state for the lfsr translates the whole sequence , but does not change the length of the cycle .",
    "this gives a partition of the non - zero vertices into @xmath1-cycles .",
    "the number of these cycles is @xmath180 , giving @xmath181 .",
    "[ thm : non - primitive lfsrs ] let @xmath0 be a prime power , and @xmath1 a factor of @xmath94 .",
    "if @xmath1 does not divide @xmath182 for each @xmath183 , then @xmath184    since @xmath1 divides @xmath94 , there is an element @xmath91 of multiplicative order @xmath1 in @xmath103 .",
    "since @xmath1 does not divide @xmath182 for @xmath183 , @xmath91 is not in any subfield @xmath185 of @xmath56 .",
    "hence @xmath91 is not the root of any polynomial over @xmath57 of degree @xmath186 . therefore @xmath179 is linearly independent over @xmath57 , and hence a basis of @xmath56 .",
    "therefore , the lfsr generated by @xmath91 traces out a distinct @xmath1-cycle in @xmath3 for each equivalence class of @xmath187 .",
    "we have found @xmath188 disjoint @xmath1-cycles in @xmath3 . since the @xmath1-cycles cover all but one vertex in @xmath3 and @xmath189 , this is the best possible bound .    by zsigmondy",
    "s theorem @xcite , there is a prime @xmath190 that divides @xmath94 but not @xmath182 for @xmath183 for any @xmath0 and @xmath2 , except when @xmath191 or @xmath46 and @xmath0 is a mersenne prime ( that is , @xmath192 for some prime @xmath193 ) .",
    "thus theorem  [ thm : non - primitive lfsrs ] can be applied with @xmath194 to obtain an almost optimal ebug colouring with @xmath190 leds on each ebug ( only one colour sequence is unused ) .",
    "furthermore , if larger ebugs are desired for the same values of @xmath0 and @xmath2 , any multiple of @xmath190 that divides @xmath94 can also be used for @xmath1 .",
    "this section focuses on the combinatorics of words to find and combine cycles in a de  bruijn graph .",
    "word _ of length @xmath1 over an alphabet @xmath195 is a sequence of @xmath1 _ letters _ , each of which is an element of @xmath195 .",
    "we often use the _ left rotation _ operation @xmath196 , which cyclically permutes the order of letters in a word : @xmath197 .",
    "we may rotate a word by any amount by repeatedly applying @xmath196 ; @xmath198 rotates a word by @xmath18 places to the left .",
    "usually , a _ factor _ @xmath199 of a word @xmath200 is defined as any block of consecutive letters in @xmath200 , and @xmath199 is a _ prefix _ if it appears at the start of @xmath200 . in this case , if @xmath200 has length @xmath1 , there are at most @xmath201 factors of length @xmath2 ( or @xmath2-factors ) of @xmath200 . for this section ,",
    "we allow factors to `` wrap around '' , so that @xmath199 is a factor of @xmath200 if and only if it is a prefix of some rotation @xmath202 .",
    "this way , it is possible to have @xmath1 different @xmath2-factors of a word of length @xmath1 .",
    "a @xmath0-ary _ necklace _ is an equivalence class of words over the alphabet @xmath203 under cyclic rotation @xmath198 .",
    "the _ length _ of a necklace is the length of any word in the class , while the _ size _ of a necklace is the number of words in the class .",
    "a necklace with equal length and size is called _",
    "every word in a @xmath0-ary length @xmath2 necklace corresponds to a vertex in the de  bruijn graph @xmath3 , and a cyclic rotation corresponds to following an edge in this graph .",
    "thus a size @xmath7 necklace can be thought of as a @xmath7-cycle in @xmath3 .",
    "note that every vertex is part of some necklace , so the vertex set of @xmath3 can be partitioned into necklaces .    for a fixed @xmath0 and @xmath2 ,",
    "the possible necklace sizes in @xmath3 are the divisors of @xmath2 .",
    "moreau s necklace counting function @xcite , shown below in , gives the number of @xmath0-ary size @xmath7 necklaces , and is defined in terms of the mbius function @xmath204 .",
    "@xmath205    the total number of length @xmath2 necklaces is more easily calculated using euler s totient function , @xmath206 : @xmath207    when @xmath2 is prime , there are exactly @xmath0 necklaces of size @xmath90 ( the constant words ) ; the remainder of the necklaces have size @xmath2 .",
    "thus there are @xmath208 disjoint @xmath2-cycles in @xmath3 .",
    "hence @xmath209 for any prime @xmath2 .",
    "note that when @xmath210 , this lower bound is tight since there are less than @xmath2 remaining vertices in @xmath3 .    a _ lyndon word _ is the lexicographically smallest representative of an aperiodic necklace .",
    "it is possible to construct a de  bruijn sequence for @xmath3 by concatenating all @xmath0-ary lyndon words whose length divides @xmath2 in lexicographic order .",
    "in fact , the sequence that is generated is the lexicographically smallest de  bruijn sequence of the given order @xcite .",
    "suppose we have two systems of coloured ebugs , where each colouring is @xmath2-valid .",
    "in this section , we describe a type of direct product that yields many more ebugs at the expense of using more colours .",
    "the result is summarised in theorem  [ thm : product colouring ] .    instead of modelling the colouring problem with de  bruijn graphs",
    ", we find a set of necklaces of length @xmath1 that correspond to the disjoint @xmath1-cycles in @xmath3 . the definition of an _",
    "@xmath2-valid _ set of necklaces translates directly from definition  [ def : ebug number ] .",
    "we first demonstrate this proof for the special case of @xmath211 ( so @xmath212 ) , and then show that the construction can be extended to the general case .",
    "the construction describes a one - to-@xmath1 mapping from pairs of necklaces to necklaces with @xmath213 colours .    in order to construct necklaces over a larger alphabet ,",
    "we use pairs of letters ( colours ) as the letters in the resulting necklaces .",
    "we define a _ merging _ operation @xmath214 that pairs corresponding letters from two words of the same length : if @xmath215 and @xmath216 , then @xmath217 .",
    "let @xmath218 be an @xmath2-valid set of @xmath219 @xmath220-ary necklaces of length @xmath1 , for @xmath221 .",
    "for each necklace @xmath222 , choose a representative word @xmath223 .",
    "now , for a pair of necklaces @xmath224 , we construct @xmath1 new words @xmath225 over @xmath226 , where @xmath227 .",
    "note that we only rotate one of the words , since rotating both by the same amount creates a word that is equivalent under cyclic rotation ( it is only the relative rotation that matters ) .",
    "an example of this process with @xmath228 , @xmath229 and @xmath230 is illustrated in figure  [ fig : product colouring ] .",
    "this process can be performed for every pair @xmath224 , generating @xmath1 new words every time .",
    "hence it is clear that @xmath231 words are produced , and that @xmath213 colours are used .",
    "thus it remains only to show that the set of corresponding necklaces is @xmath2-valid .",
    "in each of the original necklaces @xmath222 , there are @xmath1 different @xmath2-factors ( since the @xmath218 were @xmath2-valid ) .",
    "thus the total number of distinct @xmath2-factors in @xmath218 is @xmath232 .",
    "suppose the word @xmath233 occurs in the necklace @xmath234 , and @xmath235 occurs in @xmath236 .",
    "there is a unique @xmath18 such that @xmath237 and @xmath238 have @xmath239 and @xmath240 aligned , so @xmath241 must contain the factor @xmath242 .",
    "since there are @xmath243 pairs of @xmath2-factors from the original necklaces , there must be at least @xmath243 distinct @xmath2-factors in the set of merged words .",
    "but there are only @xmath1 possible @xmath2-factors in each of the @xmath231 merged words , so each @xmath2-factor must appear exactly once .",
    "therefore the set of necklaces corresponding to the merged words is @xmath2-valid .    to generalise to the case where @xmath244",
    ", we can traverse the original necklaces multiple times to obtain words of length @xmath245 .",
    "for a necklace @xmath246 , pick a representative word of @xmath14 and repeat it @xmath247 times to obtain @xmath223 . this way we may still merge words from @xmath248 and @xmath249 using @xmath214 ( since they are the same length ) .    to model rotations of @xmath250 and @xmath251 , we act on the pair with elements of the group @xmath252 .",
    "simultaneous rotation of @xmath250 and @xmath251 ( by the same amount ) only rotates the merged word that is produced , so we may identify unique merged words with elements of the quotient group @xmath253 .",
    "hence each pair @xmath254 produces @xmath255 unique words , for a total of @xmath256 words .    it remains to show that the set of merged words is @xmath2-valid .",
    "the number of @xmath2-factors that appear in @xmath218 is @xmath257 .",
    "as before , suppose the @xmath2-factor @xmath239 occurs in @xmath234 and @xmath240 occurs in @xmath236 .",
    "define @xmath18 and @xmath19 so that @xmath239 is the @xmath2-prefix of @xmath258 , and @xmath240 is the @xmath2-prefix of @xmath259 .",
    "note that rotating both words together keeps @xmath239 and @xmath240 aligned , so the pair @xmath16 corresponds to a unique element of @xmath260 , and thus @xmath261 appears in one of the merged words .",
    "hence there are at least @xmath262 distinct @xmath2-factors in the set of merged words .",
    "the number of possible positions for these @xmath2-factors is the product of the number of merged words and the length of each word .",
    "this number is @xmath263 , so all @xmath2-factors are unique , and the set of corresponding necklaces is @xmath2-valid .",
    "hence @xmath264 .",
    "the conditions in theorem  [ thm : product colouring ] guarantee that if the original colourings are optimal , then the resulting colouring is also optimal .",
    "this allows a result for prime powers , such as theorem  [ thm : lfsr translation ] , to be extended to any integer by repeated application of theorem  [ thm : product colouring ] ( after applying theorem  [ thm : lfsr translation ] for each prime power factor in the prime decomposition of @xmath0 ) .",
    "[ cor : db(q , l ) always decomposes into q cycles ] @xmath29 for all @xmath0 and @xmath2 .    on the other hand ,",
    "if the original colourings are not optimal , the product colouring may be even `` less '' optimal .",
    "for example , the construction in section  [ sec : non - primitive lfsr ] is almost optimal since it uses all but one vertex of @xmath265 .",
    "if we use theorem  [ thm : product colouring ] to multiply this with an optimal colouring ( where the @xmath1-cycles use every vertex of @xmath266 ) , there would be @xmath267 vertices of @xmath268 not used by a cycle in the product colouring .",
    "let @xmath269 be an @xmath2-valid set of @xmath9 necklaces of length @xmath1 over the alphabet @xmath203 .",
    "for each necklace @xmath270 , fix a specific representative word @xmath223 .",
    "we now construct the set @xmath271 of all words that appear in some necklace from @xmath269 : @xmath272    since @xmath269 is @xmath2-valid , the necklaces of @xmath269 are aperiodic",
    ". thus we may uniquely identify how far each word in @xmath273 is rotated from its representative @xmath223 .",
    "for each word @xmath274 , define @xmath275 .",
    "we now define a function @xmath276 that interleaves the letters of multiple words to construct a single long word .",
    "@xmath277    note that @xmath276 is injective , since we can deinterleave the resulting word to recover the original words .",
    "we write @xmath278 for this deinterleaving function , which gives a @xmath7-tuple of @xmath1 words from a single word of length @xmath6 . for brevity , we write @xmath7-tuples of words in boldface as @xmath279",
    ". we also extend @xmath280 to operate on @xmath7-tuples , so we may write @xmath281 .",
    "now consider the set @xmath282 .",
    "note that the @xmath283 are in @xmath284 and @xmath7 divides @xmath1 , so taking the sum modulo @xmath7 is well - defined .",
    "simple arithmetic shows that @xmath285 .",
    "we claim that @xmath286 is a @xmath287-valid set of words .",
    "take any @xmath288 from @xmath286 , and observe the following property of the interleaving function : @xmath289    thus if @xmath290 , then @xmath291 . hence rotating @xmath38 to the left increases @xmath292 by 1 . by iterating",
    ", we can find all @xmath6 rotations of @xmath38 .",
    "of these @xmath6 rotations , only @xmath1 have @xmath293 ( every @xmath7-th rotation ) , and only one of these @xmath1 has the first word not rotated ( @xmath294 ) .",
    "hence no other @xmath295 is a rotation of @xmath38 .",
    "now suppose there are @xmath296 that share a @xmath287-factor @xmath37 ( in any position ) .",
    "rotate @xmath38 and @xmath297 , respectively , to find @xmath298 and @xmath299 , both of which have @xmath37 as their @xmath287-prefix .",
    "note that @xmath298 and @xmath299 are not necessarily in @xmath286 , but are still obtained by interleaving a @xmath7-tuple of words from @xmath273 ( see ) .",
    "we may deinterleave @xmath37 into a @xmath7-tuple of length @xmath2 words @xmath300 .",
    "each of these words @xmath301 is the @xmath2-prefix of a unique word @xmath302 due to the @xmath2-validity of @xmath269 .",
    "thus the only interleaved word with @xmath37 as its @xmath287-prefix is @xmath303 , and hence @xmath304 . but @xmath297 is not a rotation of @xmath38 , so @xmath305 .",
    "therefore , @xmath286 is a @xmath287-valid set of length @xmath6 words and @xmath306 .    as an example",
    ", we now apply theorem  [ thm : interleaving ] with @xmath307 , @xmath228 , @xmath229 and @xmath308 to the eight necklaces of length 8 in figure  [ fig : product colouring ] , which in turn were constructed using theorem  [ thm : product colouring ] . these necklaces may be more compactly written as strings : @xmath309 .",
    "suppose we wish to interleave the first and second necklaces in all allowable rotations .",
    "we must keep the first necklace fixed and only rotate the second necklace by even amounts to satisfy the conditions of the set @xmath286 : @xmath310    we may now interleave these necklaces to obtain the following four necklaces of length 16 : @xmath311    but this is for just one pair of necklaces ; we can repeat this procedure for every ordered pair of necklaces from our original list of eight . for each of the 64 possible pairs , we produce four new necklaces of length 16 , yielding a total of 256 necklaces .",
    "these are listed in table  [ tab : interleaving example ] , with each line corresponding to a particular pair of necklaces .",
    "hence @xmath312 .",
    "@xmath313    as with theorem  [ thm : product colouring ] , if the original colouring is optimal , then the colouring obtained by interleaving the necklaces is also optimal .",
    "this allows us to extend existing results by recursively applying theorem  [ thm : interleaving ] .",
    "if every prime factor of @xmath7 divides @xmath0 , then @xmath314    recall that @xmath50 and @xmath29 ( see corollary  [ cor : db(q , l ) always decomposes into q cycles ] ) .",
    "now apply theorem  [ thm : interleaving ] repeatedly using each prime factor of @xmath7 .",
    "note that since each prime factor of @xmath7 divides @xmath0 , and each value of @xmath1 in this process is a multiple of @xmath0 , theorem  [ thm : interleaving ] is applicable at each step .    we also have a partial extension of theorem  [ thm : interleaving ] , which allows us to interleave a pair of necklaces of odd length :    [ thm : interleaving 2 ] @xmath315 .",
    "the proof of theorem  [ thm : interleaving 2 ] is analogous to that of theorem  [ thm : interleaving ] , except that a slightly different condition is used in the construction of the set @xmath286 .",
    "here , @xmath316 .",
    "whenever two length @xmath2 necklaces share an @xmath317-factor , the corresponding cycles in @xmath3 can be concatenated .",
    "this is because the corresponding edge circuits in @xmath41 have a common vertex , and can thus be joined to create a larger circuit , which in turn gives a larger cycle in @xmath3 .",
    "this relationship between necklaces turns out to be very useful , so we construct a _ necklace adjacency graph _ @xmath318 .",
    "the @xmath0-ary length @xmath2 necklaces form the vertex set of @xmath318 , while pairs of necklaces that share an @xmath317-factor are joined by an edge .",
    "consider any ( connected ) subtree @xmath319 in @xmath318 . by applying the above operation for each edge in @xmath319",
    ", the cycles for each necklace in @xmath319 can be concatenated together to produce one long cycle , whose length is the sum of the sizes of the individual necklaces .",
    "hence if we find a spanning forest in @xmath318 where each component subtree has @xmath1 as the total size of its necklaces , we can partition @xmath3 into @xmath1-cycles .",
    "if the forest does not span @xmath318 , this still gives a lower bound on the ebug number : if there are @xmath133 component subtrees in the forest , each with total necklace size @xmath1 , then @xmath320 .    in the case when @xmath2 is prime , recall that most necklaces have size @xmath2 .",
    "let @xmath321 be the subgraph of @xmath318 induced by the size @xmath2 necklaces .",
    "suppose that there is a perfect matching in @xmath321 : this is a spanning forest , and each component subtree has total size @xmath322 . hence concatenating the cycles for each pair of necklaces in the matching produces @xmath323 cycles in @xmath3 , each of length @xmath322 .",
    "similarly , we may generalise this to larger multiples of @xmath2 :    [ prop : necklace joining ] let @xmath2 be a prime . if there is a spanning forest of @xmath321 in which each component subtree has @xmath7 vertices , then @xmath324 , with equality if @xmath325 .",
    "in particular , the existence of a hamiltonian path in @xmath321 is sufficient to apply proposition  [ prop : necklace joining ] for any @xmath7 that divides @xmath208 ( removing every @xmath7-th edge from the path produces the required forest ) . a hamiltonian path in @xmath318",
    "is called a _ gray code _ for necklaces , and is conjectured to exist whenever @xmath0 or @xmath2 is odd @xcite ( if both @xmath0 and @xmath2 are even , a simple parity argument reveals that @xmath318 is bipartite with unequal parts ) .",
    "it is a trivial matter to transform the hamiltonian path in @xmath318 to one in @xmath321 , since all neighbours of a constant necklace are adjacent to each other . for @xmath326",
    ", there is also an existing construction of a _",
    "2-gray code _ for fixed density necklaces @xcite , which lists every necklace with a fixed number of @xmath95s such that consecutive necklaces differ in exactly two places ( a @xmath95 and @xmath90 are exchanged ) .      in some applications of robot identification ,",
    "orientation information is either not required or can be obtained through different means @xcite .",
    "this relaxes the conditions necessary to obtain a valid colouring of ebugs , since a particular colour sequence may appear more than once on a single ebug . in the de  bruijn graph , this amounts to finding the maximum number of disjoint closed @xmath1-walks ( instead of @xmath1-cycles ) .",
    "when @xmath2 is a divisor of @xmath1 , there is an easy solution that turns out to be the best possible ; this is a direct corollary of golomb s conjecture .",
    "[ prop : necklaces for identification ] if @xmath2 is a divisor of @xmath1 , then the maximum number of pairwise disjoint closed @xmath1-walks in @xmath3 is @xmath327 , the number of @xmath0-ary length @xmath2 necklaces .",
    "golomb s conjecture , which was proved by mykkeltveit @xcite , states that the maximum number of pairwise disjoint cycles ( of any length ) in @xmath3 is @xmath327 .",
    "since each closed walk contains a cycle , there are at most @xmath327 pairwise disjoint closed @xmath1-walks in @xmath3 .",
    "now consider any length @xmath2 necklace .",
    "the size @xmath7 of this necklace must divide @xmath2 and hence @xmath1 , so the corresponding @xmath7-cycle in @xmath3 can be traversed multiple times to obtain a closed @xmath1-walk .",
    "thus there are @xmath327 pairwise disjoint closed @xmath1-walks in the graph .",
    "the theorems presented in sections  [ sec : lfsrs ] and [ sec : necklaces ] focus on finding large ebug colourings to obtain bounds on the ebug number @xmath9 .",
    "in particular , we concentrated on constructions that yield optimal colourings to support conjecture  [ conj : e always optimal ] .",
    "the algebraic construction in theorem  [ thm : lfsr translation ] , and its corresponding extension in corollary  [ cor : db(q , l ) always decomposes into q cycles ] , produces @xmath0 ebugs of maximal size for any @xmath0 and @xmath2 .",
    "the combinatorial results in section  [ sec : necklaces ] increase the number of ebugs by moving to a larger de  bruijn graph .",
    "these results can even produce ebug colourings for practical applications : for example , we have @xmath328 by theorem  [ thm : lfsr translation ] , so @xmath329 by theorem  [ thm : product colouring ] .",
    "the current ebugs have 16 leds , a camera can distinguish four colours in an image quite easily , and five consecutive leds are visible in practice , so it is possible to construct a network of 64 uniquely identifiable ebugs .",
    "also , theorem  [ thm : interleaving ] can be used to significantly increase the number of ebugs without increasing the number of colours , @xmath0 .",
    "moreover , it keeps the ratio @xmath330 constant , which is a reasonable assumption when designing such a network ( since the camera can see a fixed arc of the circle of leds ) .",
    "unfortunately , the only way to produce many ebugs ( more than @xmath0 ) with our results is by applying theorem  [ thm : product colouring ] or theorem  [ thm : interleaving ] , which necessarily increase either @xmath0 , the number of colours , or @xmath2 , the number of consecutive visible leds .",
    "the major remaining gap appears to be for prime @xmath0 and @xmath2 , with @xmath331 , since the multiplying / interleaving constructions can not produce them .    ideally , we would like to be able to have many small ebugs ( small number of leds ) with a small number of colours .",
    "for example , we would like to show that @xmath332 when @xmath2 is large enough ( for each @xmath18 ) .",
    "probabilistic arguments may be useful in finding such colourings , but a constructive approach is preferable for applications to robot networks ( the search space becomes too large even for small practical examples , and in many cases the colourings appear to be quite rare ) .",
    "solving problem  [ prob : determine e ] is much harder , since there are no optimal colourings in the cases not covered by conjecture  [ conj : e always optimal ] . improving the lower bounds in these cases",
    ", however , is likely to be a much easier task .",
    "we have shown that near - optimal colourings exist in many cases .",
    "we would like to thank heiko dietrich for introducing us to zsigmondy s theorem , and suggesting that it can be used to find examples to which theorem  [ thm : non - primitive lfsrs ] can be applied .",
    "we also thank the referees for pointing out some related references and for their helpful suggestions .",
    "10 [ 1]#1 url@samestyle [ 2]#2 [ 2 ] l@#1 = l@#1 # 2    b.  alspach , h.  gavlas , m.  ajna , and h.  verrall , `` cycle decompositions .",
    "iv . complete directed graphs and fixed length directed cycles , '' _",
    "j. combin .",
    "theory ser .",
    "a _ , vol .",
    "103 , no .  1 , pp . 165208 , 2003 .",
    "b.  d.  o. anderson , c.  yu , b.  fidan , and j.  m. hendrickx , `` rigid graph control architectures for autonomous formations : applying classical graph theory to the control of multiagent systems , '' _ ieee control systems magazine _ , vol .",
    "28 , no .  6 , pp .",
    "4863 , 2008 .",
    "d.  bryant , `` cycle decompositions of complete graphs , '' in _ surveys in combinatorics 2007 _ , ser .",
    "london math .",
    "lecture note ser.1em plus 0.5em minus 0.4emcambridge univ . press , 2007 , vol .",
    "6797 .",
    "n.  dademo , w.  l.  d. lui , w.  h. li , y.  a. ekerciolu , and t.  drummond , `` ebug  an open robotics platform for teaching and research , '' in _ australasian conference on robotics and automation_.1em plus 0.5em minus 0.4emaustralian robotics & automation association , 2011 .",
    "a.  k. das , r.  fierro , v.  kumar , j.  p. ostrowski , j.  spletzer , and c.  j. taylor , `` a vision - based formation control framework , '' _ ieee transactions on robotics and automation _ ,",
    "18 , no .  5 , pp . 813825 , 2002 .",
    "p.  erds and l.  lovsz , `` problems and results on @xmath333-chromatic hypergraphs and some related questions , '' in _ infinite and finite sets _ , ser .",
    "colloq . math .",
    "jnos bolyai.1em plus 0.5em minus 0.4emnorth - holland , 1975 , vol .  10 , pp . 609627",
    ".                              x.  wang , y.  a. ekerciolu , and t.  drummond , `` vision - based cooperative pose estimation for localization in multi - robot systems equipped with rgb - d cameras , '' _ robotics _ , vol .  4 , no .  1 , pp",
    ". 122 , 2015 , special issue on coordination of robotic systems .",
    "x.  wang , y.  a. ekerciolu , and t.  drummond , `` a real - time distributed relative pose estimation algorithm for rgb - d camera equipped visual sensor networks , '' in _ proceedings of the seventh acm / ieee international conference on distributed smart cameras ( icdsc 2013 ) _ , palm springs , california , usa , oct . 2013 ."
  ],
  "abstract_text": [
    "<S> we propose a new camera - based method of robot identification , tracking and orientation estimation . </S>",
    "<S> the system utilises coloured lights mounted in a circle around each robot to create unique colour sequences that are observed by a camera . </S>",
    "<S> the number of robots that can be uniquely identified is limited by the number of colours available , @xmath0 , the number of lights on each robot , @xmath1 , and the number of consecutive lights the camera can see , @xmath2 . for a given set of parameters </S>",
    "<S> , we would like to maximise the number of robots that we can use . </S>",
    "<S> we model this as a combinatorial problem and show that it is equivalent to finding the maximum number of disjoint @xmath1-cycles in the de  bruijn graph @xmath3 .    </S>",
    "<S> we provide several existence results that give the maximum number of cycles in @xmath3 in various cases . </S>",
    "<S> for example , we give an optimal solution when @xmath4 . </S>",
    "<S> another construction yields many cycles in larger de  bruijn graphs using cycles from smaller de  bruijn graphs : if @xmath3 can be partitioned into @xmath1-cycles , then @xmath5 can be partitioned into @xmath6-cycles for any divisor @xmath7 of @xmath1 . </S>",
    "<S> the methods used are based on finite field algebra and the combinatorics of words .    </S>",
    "<S> = 1    graph theory , robot network , de  bruijn graph , graph decomposition , pose estimation , linear feedback shift register </S>"
  ]
}