{
  "article_text": [
    "a graph g represents as g = ( v , e ) : v is number of vertices in graph and e is number of edges in graph and impliment as an adjacency lists or as an adjacency matrix for both directed and undirected graphs .",
    "there are two types of graph i.e. ( i ) sparse graphs - those for which @xmath2 is much less than @xmath3 @xmath4 .",
    "( ii ) dense graphs - those for which @xmath2 is close to @xmath5 . here",
    "we presented the graph as the adjacency - list for the evaluation of our algorithm .",
    "+ the vertex - cover problem is to find a minimum number of vertex to cover a given undirected graph .",
    "we call such a vertex cover an optimal vertex cover .",
    "this problem is the optimization version of an np - complete decision problem .",
    "proposed algorithm is polynomial time algorithm in order to find the set of vertex to cover the graph . which shows the better performance than the traditional algorithm for vertex cover @xcite .",
    "as it is np - hard problem so it is hard to find an optimal solution of a graph g , but not difficult to find a near optimal solution .",
    "our propose method gives very near optimal solution for vertex - cover problem .",
    "the following approximation algorithm takes an undirected graph g as input @xcite and returns a set of vertex to cover the graph and whose size is less than the previous method . + all graphs mentioned here are simple undirected graph .",
    "we follow @xcite for definitions . our proposed method ( see algorithm and fig.[fig:2 ] ) is on undirected graph . here",
    "we used the adjacency list to represent graph g. we introduce a new field _",
    "weight _ in the _ list _ to store the degree of each individual vertex .",
    "_ i.e. _    struct list    \\ {    char vertex ;    int weight ;    struct node * next ;    struct node * ref ;    } ;    [ 1 ] @xmath6 l = _ list _ l[w ] = reference weight ( h , v ) = highest weight of the list and respective vertex [ marker ] @xmath7 v[w ] @xmath8 l[w ] @xmath9 l[w]-1 * go to * [ marker ] @xmath10    it s space complexity is @xmath1 @xcite . for step 4 search in the list",
    "is o(v ) . in the for loop",
    "_ i.e. step 8 to 10 _ for each individual vertex need to search its reference vertices .",
    "so worst time complexity is @xmath11= @xmath12 .",
    "so the worst time complexity of the graph is @xmath0 .    _",
    "( thomas h. cormen et.al .",
    "@xcite ) _ [ vcp1 ] approx - vertex - cover is a polynomial - time 2-approximation algorithm .",
    "[ vcp2 ] proposed approximate vertex - cover is a polynomial - time @xmath13-approximation algorithm .    in theorem  [ vcp1 ]",
    "@xmath14 is the set of vertex for approx - vertex - cover and @xmath15 in the optimal vertex cover @xmath16 . in our approach",
    "we pick one vertex and remove the edges connected to that vertex .",
    "so most of the times we do nt consider both end point of one edges , which followed in theorem  [ vcp1 ] . for our proposed method",
    "we consider the resultant set of vertex is @xmath10 , then @xmath17 .",
    "+ @xmath18 , @xmath19 .    in some cases proposed method@xmath20 approaches to optimal solution when @xmath21 value is 1 .",
    "our method is shown in fig .",
    "[ fig:1 ] , algorithm ( approximate vertex - cover ) , and proved in theorem  [ vcp2 ] .",
    "the comparison of the optimal vertex - cover , previous vertex - cover and proposed vertex - cover shown in fig .",
    "[ fig:2 ] .    .",
    "_ ( c ) _ there are three vertex with highest weight ( _ b , c , e _ ) ; arbitrary vertex _ c _ is chosen and add to the set @xmath10 . _ ( d ) _ vertex _ a _ is chosen ; added to @xmath10 . _ ( e ) _ vertex _ f _ is chosen ; added to @xmath10 . _ ( f ) _ the resultant vertex cover with our proposed method .",
    "approximate vertex - cover , contains the four vertices _ a , c , d , f_. , scaledwidth=65.0% ]",
    "here in our proposed technique we produce the set of vertex for vertex - cover problem . which is more near optimal solution and better than the previous technique ."
  ],
  "abstract_text": [
    "<S> recently , there has been increasing interest and progress in improvising the approximation algorithm for well - known np - complete problems , particularly the approximation algorithm for the vertex - cover problem . </S>",
    "<S> here we have proposed a polynomial time efficient algorithm for vertex - cover problem for more approximate to the optimal solution , which lead to the worst time complexity @xmath0 and space complexity @xmath1 . </S>",
    "<S> we show that our proposed method is more approximate with example and theorem proof . </S>",
    "<S> our algorithm also induces improvement on previous algorithms for the independent set problem on graphs of small and high degree .    * keywords*:approximation algorithm vertex - cover problem complexity adjacency list . </S>"
  ]
}