{
  "article_text": [
    "in a conventional setting of deadline scheduling , jobs arrive sporadically , each with prescribed processing time , deadline , and value . upon arrival , jobs are queued until their respective deadlines , during which time an online scheduler can schedule any pending jobs in the system . in general , there is no guarantee that a submitted job will be completed by its deadline .",
    "in fact , a customer who submits a job does not know whether the job will be completed until after the deadline .",
    "for example , an online scheduler may accept a job into the system but later choose to work on another more profitable job instead .    in this paper",
    ", we consider a variation of the deadline scheduling problem by imposing a commitment requirement at the arrival of a job .",
    "in particular , if a job is accepted and successfully completed , the scheduler receives a certain reward .",
    "if the scheduler is unable to complete an accepted job , it pays a penalty .",
    "the scheduler receives neither reward nor penalty if it declines a job upon arrival .",
    "the deadline scheduling problem considered in this paper has a direct application in scheduling the charging of plug - in hybrid electric vehicles ( phev ) in parking lots or garages . in this case",
    ", each car arrives with a certain charge level , and the customer has some idea about how long the car can be left at the facility ( _ e.g. _ , approximately the duration in which the customer will be shopping before picking up the car ) . upon submitting a request ,",
    "the customer is either turned away or told the car will be charged at a certain price . and",
    "the customer is informed that if the car is not charged to the requested level by the deadline , a compensation will be made ( _ e.g. _ , with a voucher for future charges ) .",
    "while the requirement of immediate commitment reduces the number of unsatisfactory customers and the amount of penalty , it brings nontrivial complications to the deadline scheduling problem .",
    "the difficulty comes from the fact that optimal decision on whether to turn away a customer seems to depend on the kind of jobs to arrive in the future .",
    "had the scheduler known that there is a highly profitable job to arrive , it would have declined some of the less profitable ones .",
    "our goal is to maximize the profit by optimally trading off accepting more customers against avoiding excessive penalties due to unfinished jobs . to accommodate general arrivals and workload , we aim at optimizing the _ competitive ratio _ that characterizes the worst - case profit relative to that of an optimal offline scheduling algorithm , for which we establish the optimal competitive ratio and give an online scheduling algorithm to achieve the optimum competitive ratio .      without the commitment requirement ,",
    "there is a considerable literature on the deadline scheduling problem , starting from the seminal work of liu and layland .",
    "the problem is often divided into the underloaded and overloaded regimes .",
    "the former corresponds to the case when there exists an offline scheduling algorithm that can complete all jobs arrived whereas the latter corresponds to the case when some jobs can not be completed even for the best offline scheduling algorithm . for the underloaded scenarios , it has been shown that simple online scheduling algorithms such as earliest deadline first ( edf ) and least laxity first ( llf ) @xcite achieve the same performance as the optimal offline scheduling algorithm .",
    "the assumption of underloaded overall workload , however , is restrictive and unverifiable in practice .",
    "locke showed in @xcite that both edf and llf can perform poorly in the presence of overload .",
    "there were efforts to develop an online scheduling algorithm with performance guarantee in terms of competitive ratio ( see definition [ def : cr ] ) , even when the system is overloaded .",
    "online scheduling algorithms with competitive ratio @xmath1 were proposed in and @xmath1 was proved to be optimal competitive - ratio - wise for the deadline scheduling problem without commitment .",
    "one of the first work that proposes the idea of commitment is @xcite ( commitment is termed as immediate notification ) , in which bar - noy _ et .",
    "al . _ considered the application of video on demand where customers submit movie request and the scheduler manages to either accept or decline the request within a specific  notification time \" after the request releases .",
    "bar - noy _ et .",
    "_ studied the competitive ratio when the  notification time \" varies from zero ( immediate notification ) to proportional to the length of the movie requested .",
    "later , scheduling with immediate notification and immediate decision has been studied in @xcite ( single processor , immediate notification ) , @xcite ( multiple processors , immediate notification ) , and @xcite ( multiple processors , immediate decision ) .",
    "immediate decision requires that , in addition to providing to the customers an immediate feedback regarding admission or declination , the scheduler also has to provide to the customer upon job release the specific scheduled time of the job , if accepted .",
    "the proportional value model was considered in @xcite , while @xcite considered the unit length jobs with unit value .",
    "an online scheduling algorithm with immediate decision is proposed in @xcite with asymptotic competitive ratio @xmath2 , while the authors of @xcite showed @xmath2 to be an asymptotic upper bound of any online algorithms .",
    "however , the authors of @xcite dealt with non - preemptive scheduling with no non - completion penalty involved .    with the commitment requirement",
    "online preemptive scheduling with deadlines becomes much more challenging in the presence of overload .",
    "the authors of and the author of @xcite gave separately two preemptive scheduling algorithms for multiple processors with immediate notification and non - completion penalty with the proportional value model ( @xmath3 , see section [ sec : formulation ] ) .",
    "in the non - completion penalty associated with a job with value @xmath3 is set as @xmath4 with the penalty parameter @xmath5 .",
    "the competitive ratio results given in are @xmath6 and @xmath7 , respectively .",
    "even for the situation with no non - completion penalty @xmath8 , the competitive ratio results given in reduces to @xmath9 and @xmath10 , respectively , which is at most as good as our result @xmath0 in this paper for single processor with non - completed portion penalized . on the other hand , there are no arguments in establishing upper bounds of competitive ratio ever achievable to quantify how far the proposed algorithms are away from optimality .",
    "there is a series of work by hou , borkar and kumar and jaramillo , srikant and ying dealing with the deadline scheduling problem with a different setup from that adopted in this paper .",
    "specifically , the channel ( the counterpart in of the processor in this paper ) is modeled as a stationary , irreducible markov process with a finite state space ( unreliable channel model ) , whereas the processor is always dedicated to scheduling the jobs in this paper . due to the unreliable channel model",
    ", the packet transmission ( the counterpart of the job in this paper ) may take a random amount of time to go through , whereas the job length in this paper is deterministic upon arrival .",
    "each client ( transmitter ) specifies a delay requirement ( transmissions which take longer than the delay requirement is invalid ) , which corresponds to the deadlines in this paper .",
    "the packet arrival process is assumed to be a stationary , irreducible markov process with finite state space for each client , whereas the job arrival process can be arbitrary and quite bursty in this paper .",
    "thus , the stochastic model of the processor ( channel ) , the job ( packet ) arrival process and the job length ( packet transmission duration ) is available in . on the other hand , the job arrival as well as",
    "the job length can be arbitrary for the future job released in this paper .",
    "there is also difference in the metric used ; the feasibility optimality is studied in , _",
    "i.e. _ , the overall packet arrival is assumed to be underloaded , whereas the overloaded scenario is treated in this paper with the metric competitive ratio .",
    "the problem of phev charging scheduling in public garage has been considered in .",
    "an energy economic analysis of phev charging using solar photovoltaic panels at workplace parking garage is conducted in with the conclusion that phev charging facility in public garage is beneficial to both the car owners as well as the facility operator . the authors of aggregated a system architecture model , an operation model and a phev battery model to simulate phev charging in a municipal parking lot .",
    "the method of particle swarm optimization is employed to allocate energy to phevs in .",
    "the performance of the scheduling policies proposed in are validated via simulation results .",
    "this paper adopts a deadline scheduling framework with non - completion penalty that suits well for phev charging application and proposes an online scheduling algorithm with worst case performance guarantee .      in this paper",
    ", we impose a penalty on unfinished workload and obtain results on the optimal competitive ratio for the online preemptive deadline scheduling with commitment .",
    "we propose an online scheduling algorithm dsc ( acronym for deadline scheduling with commitment ) with competitive ratio @xmath11 .",
    "we also provide a converse via an adversary argument and show that no online scheduling algorithm exists with a better competitive ratio , thus further establishing the optimality of dsc competitive - ratio - wise .",
    "comparing with the optimal competitive ratio @xmath12 without the commitment requirement in , we observe a performance loss of @xmath13 competitive - ratio - wise with the additional commitment obligation .",
    "a job @xmath14 is represented by a quadruple specified by the release time @xmath15 , processing time @xmath16 , deadline @xmath17 , and value @xmath18 .",
    "we assume the so - called proportional value model @xcite where the value @xmath18 of a job is proportional to its processing time @xmath16 , or without loss of generality , @xmath19 .",
    "a job @xmath20 is called _ tight _ if @xmath21 , which implies that the scheduler must either work on the job or decline it immediately .",
    "preemption is allowed at no cost in scheduling ( _ i.e. _ , a preempted job can be resumed from the point of preemption at a later time ) . in our scheduling problem",
    "an input instance @xmath22 includes @xmath23 jobs @xmath24 to be scheduled on a single processor , where the integer @xmath23 is the total number of jobs released for instance @xmath22 ( the total number of jobs can differ over input instances ) . in general , we are interested in a collection of instances in the input instance set @xmath25 .",
    "use @xmath26 to denote online scheduler and @xmath27 the offline scheduler .",
    "an online scheduler @xmath26 knows the parameters of job @xmath28 only at the release time @xmath29 .",
    "deadlines are firm , _",
    "i.e. _ , completing a job after its deadline yields zero value .",
    "the scheduling is done with commitment , _",
    "i.e. _ , upon the release of each job , the scheduler has to decide whether to accept or decline the job request .",
    "each accepted job incurs a non - completion penalty equal to the unfinished workload ( shortage ) if it is not completed by its deadline .",
    "the profit obtained by the scheduler is the total value of all completed jobs , minus all penalties paid .",
    "this specific non - completion penalty suits the application of phev charging well since the utility is delivered to the car owner continuously as the battery charging level increases , unlike some computing jobs in high performance computing grids for which the utility can be obtained only upon the completion of all the computation steps .    given an instance @xmath22 , we denote by @xmath30 ( @xmath31 ) as the total profit ( or value ) obtained by the scheduler @xmath26 ( @xmath27 ) .",
    "our objective is to make the online scheduler competitive across all instances in @xmath25 .",
    "in contrast to the online scheduler , an offline scheduler @xmath27 is clairvoyant and knows the entire input instance a priori . due to the prior knowledge of the job parameters ,",
    "the offline scheduler is able to make commitment decisions .",
    "we denote by @xmath32 the optimal offline scheduler .",
    "the problem is to design an online scheduling algorithm with worst - case performance guarantee ( relative to the optimal offline scheduling algorithm ) even in the presence of overload .",
    "the performance guarantee is given in terms of competitive ratio defined below .",
    "[ def : cr ] * competitive ratio : * an online algorithm @xmath26 is @xmath33-competitive for an input instance set @xmath25 if @xmath34 where @xmath22 varies over all possible input instances in @xmath25 .",
    "that is , an @xmath33-competitive online algorithm is guaranteed to achieve at least @xmath33 fraction of the optimal offline value under any input instance @xmath22 in the input instance set @xmath25 . for the rest of the paper",
    "the input instance set @xmath25 is fixed to be the set of all input instances @xmath22 such that @xmath22 contains finite number of jobs and each job satisfies @xmath35 ( otherwise , neither the online nor the offline scheduler is able to complete the job by its deadline and the job can thus be deleted from the input instance @xmath22 ) .",
    "note that both underloaded and overloaded input instances are included in the input instance set @xmath25 defined above .",
    "compared with the traditional deadline scheduling without the commitment requirement , the additional difficulty imposed by the commitment obligation to the online scheduler depends on the overall workload of the jobs released : when the overall workload is underloaded , simple scheduling algorithms such as edf and llf achieve competitive ratio 1 by simply admitting all jobs released ; the restriction to the underloaded case precludes the need of admission control . in this section , we describe an online scheduling algorithm dsc dealing with the overloaded scenario and establish its optimality in competitive ratio .",
    "specifically , we show @xmath0 as the optimal worst - case performance of online algorithms relative to the ( optimal ) offline counterpart .",
    "we summarize these results in the following theorem followed by a detailed description of dsc .",
    "[ thm:1 ] for the input instance set @xmath25 specified in section [ sec : formulation ] ,    1 .",
    "the competitive ratio @xmath0 is achievable by dsc .",
    "@xmath0 upper bounds the competitive ratio ever achievable by any online scheduling algorithms .    in other words",
    ", there is a loss of @xmath13 competitive - ratio - wise with the additional commitment obligation when we compare the optimal competitive ratio @xmath12 without the commitment requirement ( ) with the result in theorem [ thm:1 ] ( @xmath11 ) .",
    "the key idea behind dsc is to evaluate the admission decision based on the comparison of the potential profit associated with accepting and declining a job , if the job is  difficult \" to accommodate into the current schedule . even assuming the scheduler accepts the job just released , there are plenty of alternatives in the specific schedule of the job just released as well as the other pending jobs in the system ( due to the acceptance of the new job",
    ", it may be necessary to update the schedule of the other jobs ) .",
    "dsc evaluates the profits associated with the two options by restricting to one alternative in the many ways of updating of the schedule after accepting the newly released job . specifically , if the newly released job can be appended in the end of the current schedule while still being within its deadline ( the job is  easy \" to accommodate into the current schedule , see the blue , green and red jobs in fig .",
    "[ fig:0 ] , fig .",
    "[ fig:1 ] and fig .",
    "[ fig:52 ] , respectively for illustration ) , the job is accepted and appended in the end of the current schedule . otherwise ( the job is  difficult \" to accommodate into the current schedule , see the green and brown jobs in fig .",
    "[ fig:3 ] and fig .",
    "[ fig:6 ] , respectively for illustration ) , the two options are weighed separately , described in detail in later paragraphs . if the option of accepting the job is chosen , the schedule is updated by tight - scheduling the newly released job in the interval @xmath36 $ ] where @xmath16 and @xmath17 are the processing time and deadline of the newly released job , respectively .",
    "then the part of the previous schedule after time @xmath37 is moved to start at time @xmath17 , or the end of the current schedule , whichever comes later in time ( see the red job in fig .",
    "[ fig:9 ] for illustration ) .",
    "this moving may lead to some of the moved jobs to miss their deadlines .",
    "therefore the schedule is again updated to remove the part of the moved jobs that comes after their deadlines .",
    "the decision process can be interpreted as follows . when the scheduler decides to accept the newly released job ,",
    "the job is profitable once accepted but difficult to accommodate into the current schedule .",
    "therefore in order to accommodate the newly released profitable job , the scheduler sacrifices the jobs in the current schedule in the time interval @xmath36 $ ] , some of which may have deadlines far into the future , thus still have potential in completion even after the moving .    to give the procedure to compute the profit associated with the two options , we first define the notions of _ peace - scheduled _ and",
    "_ contention - scheduled _ jobs .",
    "we term a job _ peace - scheduled _ if it is scheduled without affecting other already scheduled jobs ( by the appendable statement on line [ line : b1 ] ) , and _ contention - scheduled _ if it is scheduled with moving some already admitted and unfinished jobs to a later time ( by the not appendable statement on line [ line : b2 ] to [ line : b4 ] ) .    in between two consecutive admission decisions of contention - scheduled jobs ,",
    "all the jobs are peace - scheduled and the accepted jobs are always appended in the end of the schedule . the procedure to determine the profit for accepting and declining the jobs that can not be appended can be described as follows .",
    "first execute ( virtually ) on the current tentative schedule the procedure associated with the decision to accept the difficult - to - accommodate job ( including scheduling the newly released job in @xmath36 $ ] and postponing the previous jobs in @xmath36 $ ] ) and find out the jobs in the current tentative schedule that are affected in the received processing time .",
    "denote by @xmath38 the set of jobs in the current tentative schedule that are affected in the received processing time .",
    "the profit associated with the option of declining can be computed as the value of the subset of jobs in @xmath38 anticipated to complete by the current tentative schedule , less the portion of penalty attributed to the subset of jobs .",
    "the profit associated with the option of accepting can be computed as the value of the newly released job , less the portion of penalty attributed to the acceptance of the newly released job ( due to affecting the jobs in @xmath38 ) .",
    "[ fig:5 ] , fig .",
    "[ fig:51 ] , fig .",
    "[ fig:9 ] and fig .",
    "[ fig:10 ] for illustration of the profits and the decision after comparing the profits .",
    "[ fig:11 ] depicts the final schedule of this instance .    to summarize",
    ", the dynamics of the system with dsc scheduler can be described as follows : the scheduler maintains a tentative schedule at all times ; when a job request is released , the scheduler checks whether it is possible to append the new job at the end of the current tentative schedule while meeting its deadline . if the deadline can be met , then the job is admitted and appended in the end of the current tentative schedule .",
    "otherwise , the scheduler determines whether to admit the job based on the profits of the options of accepting and declining .",
    "if the profit associated with accepting is not sufficiently large , then the job is simply declined service .",
    "otherwise , the job is scheduled in the time interval @xmath39 $ ] ; the previous schedule after time @xmath40 is then moved to start at time @xmath41 , or the end of the current schedule , whichever comes later in time , and the scheduler further checks whether there are any moved jobs that already missed their deadlines after the moving , deletes them and moves the jobs accordingly to fill the gap left by the jobs deleted .",
    "we now describe the details of the dsc algorithm .",
    "the pseudo code of dsc is given below .",
    "at time @xmath42 the scheduler starts the infinite loop in which the schedule is updated upon each job release .    ' '' ''    * dsc scheduling algorithm * procedure    upon event : job @xmath43 is released    append @xmath43 to the end of the tentative schedule ; [ line : b1 ]    [ line : b2 ]    append @xmath43 at the end by @xmath44[line : b3 ]    move and modify the schedule after @xmath45 accordingly [ line : b31 ]    decline @xmath43[line : b4 ]    ' '' ''    as indicated in the algorithm pseudo code @xmath43 gets admitted and appended to the current schedule if it is appendable ( line [ line : b1 ] ) .",
    "otherwise , the profits @xmath46 and @xmath47 associated with admitting and declining @xmath43 respectively get compared . if admitting @xmath43 assumes better profit ( line [ line : b2 ] ) , then @xmath43 is admitted and appended at the end by @xmath44 ( _ i.e. _ , scheduled in the time interval @xmath48 $ ] ) , and the current schedule after @xmath45 is moved and modified accordingly ( line [ line : b3 ] and [ line : b31 ] ) .",
    "otherwise , if admitting @xmath43 does not have better profit , @xmath43 is declined service ( line [ line : b4 ] ) .",
    "the threshold @xmath49 will be optimized after we derive the competitive ratio as a function of @xmath50 ( see section [ sec : proof ] ) .",
    "the appendable case takes @xmath51 per job . while the non - appendable case takes @xmath52 per job , where @xmath23 is the number of jobs in the current schedule .",
    "we state the differences between the dsc algorithm and the algorithms in for the situation without commitment : the contention of the processor is resolved using the profit ( _ i.e. _ , job values minus penalties ) instead of the job value alone .",
    "[ c]@xmath53     [ c]@xmath53     [ c]@xmath53     [ c]@xmath53     [ c]@xmath53     [ c]@xmath53     [ c]@xmath53     [ c]@xmath53     [ c]@xmath53     [ c]@xmath53       denote a continuous busy interval ( a continuous time interval in which the processor is busy executing jobs ) by @xmath54 $ ] .",
    "we start the analysis of the structure of dsc algorithm by classifying the continuous busy intervals created by the execution of dsc into two different types with different structures .",
    "the first type busy interval corresponds to the situation where there is no processing time corresponding to contention - scheduled jobs . in this case , all jobs admitted are peace - scheduled and finish successfully by @xmath55 , the time at which the processor finishes the tentative schedule and gets idle .",
    "the second type busy interval corresponds to the situation where there are some contention - scheduled jobs inside the continuous busy interval .",
    "denote by @xmath56 , @xmath57 and * * c**@xmath58 the total profit obtained in schedule from all jobs , from peace - scheduled jobs and from contention - scheduled jobs during @xmath59 , respectively .",
    "note that the penalty is included in the profit @xmath56 and * * c**@xmath58 .",
    "for every continuous busy interval @xmath59 it holds that @xmath60    denote by @xmath61 the union of all continuous busy intervals",
    ". the length of @xmath61 will be denoted by @xmath62 .",
    "we refer to its total , peace - scheduled and contention - scheduled value obtained in schedule by * t * , * p * and * c * , respectively .",
    "lemma [ lemma : capacity ] upper bounds the total processing time in a continuous busy interval @xmath59 with * * t**@xmath58 , * * p**@xmath58 and * * c**@xmath58 .",
    "[ lemma : capacity ] the total processing time of @xmath54 $ ] satisfies @xmath63    lemma [ lemma : nolargevalue ] upper bounds the deadlines of the jobs that are declined during the continuous busy interval @xmath59 .",
    "note that there are no jobs declined when the processor is idle under dsc algorithm .",
    "[ lemma : nolargevalue ] suppose @xmath28 was declined during the continuous busy interval @xmath54 $ ] .",
    "then @xmath64 where @xmath65 is the shortage ( at time @xmath55 ) of job @xmath66 that is admitted in @xmath59 ( @xmath67 ) .",
    "lemma [ lemma : peace ] provides a useful fact for the peace - scheduled jobs that eventually fail .",
    "[ lemma : peace ] suppose @xmath28 s are peace - scheduled jobs that eventually failed .",
    "then @xmath28 s are such that @xmath68\\subset \\mathscr{b}$ ] .",
    "if @xmath28 is peace - scheduled at time @xmath29 , then @xmath28 is included in the schedule since time @xmath29 .",
    "assume that @xmath68\\subset \\mathscr{b}$ ] does not hold .",
    "therefore there exists time instant @xmath69 $ ] such that the processor is idle at time @xmath70 .",
    "however , this contradicts the way the dsc algorithm runs due to the following argument . at time",
    "@xmath70 @xmath28 is not finished yet because @xmath28 failed eventually .",
    "therefore the scheduler can work on @xmath28 at time @xmath70 in the tentative schedule either with the goal of completing @xmath28 for its value or with the goal of reducing the penalty associated with @xmath28 .",
    "thus either way the processor should be busy , contradicting the assumed fact that the processor is idle at time @xmath70 .",
    "this contradiction proves @xmath68\\subset \\mathscr{b}$ ] .",
    "given a collection of jobs @xmath22 , denote the optimal value that an offline algorithm can obtain from scheduling the set of jobs @xmath22 by @xmath71 .",
    "we derive an upper bound of @xmath71 for @xmath22 being the set of released jobs .",
    "we partition the collection of jobs @xmath72 where @xmath73 ( @xmath74 ) denotes the successful contention - scheduled ( peace - scheduled ) jobs , @xmath75 ( @xmath76 ) denotes the failed contention - scheduled ( peace - scheduled ) jobs and @xmath77 the declined jobs under dsc algorithm .    since @xmath78 , we upper bound the two terms separately .",
    "we upper bound the term @xmath79 by considering the optimal offline algorithm for @xmath80 under a _ processing - time - granted - value _ setting .",
    "( the granted - value setting is first used in to treat the no commitment case . )",
    "specifically , the offline scheduler receives an additional _ granted value _ besides the value obtained from @xmath81 .",
    "the amount of granted value depends on the offline schedule : unit value will be granted for unit processing time in @xmath61 that is not used for executing jobs in @xmath80 .",
    "under the granted - value setting the optimal offline scheduler must consider that scheduling a job might reduce the granted value ( since processing time in @xmath61 is used ) .",
    "executing a job @xmath28 results in a gain of @xmath82 and a loss of the granted value for the processing time of @xmath28 that is executed in @xmath61 .",
    "one offline schedule under the granted - value setting is to schedule no jobs in @xmath80 ( therefore leaving the entire @xmath61 period untouched ) and get only the ( whole ) granted value .",
    "this scheduling - nothing schedule obtains a value of @xmath62 .",
    "since lemma [ lemma : capacity ] upper bounds the total processing time in a continuous busy interval , we can upper bound the total processing time in @xmath61 , and thus the value obtained by the scheduling - nothing schedule .    however , the optimal offline schedule under the granted - value setting may use some processing time of @xmath61 to schedule certain jobs in @xmath80 to obtain more value than the scheduling - nothing schedule .",
    "to upper bound @xmath79 under the granted - value setting , we take the value of the scheduling - nothing schedule as a benchmark and turn to upper bounding the net gain the optimal schedule can have over the scheduling - nothing schedule by completing some jobs in @xmath80 .",
    "we first observe that any job @xmath83 will be such that @xmath68\\subset \\mathscr{b}$ ] , since at the time @xmath29 , @xmath28 is contention - scheduled in the interval @xmath39 $ ]",
    ". therefore the busy period covers @xmath68 $ ] .",
    "we also observe by lemma [ lemma : peace ] that a peace - scheduled job @xmath84 which eventually fails also satisfies @xmath68\\subset \\mathscr{b}$ ] . by the definition of the granted value",
    "we can see that under the optimal offline algorithm , no job is scheduled entirely in @xmath61 because the granted value lost would be equal to the value of the job . therefore the optimal offline schedule will not choose to schedule any jobs in @xmath85 .    since we are interested in scheduling jobs in @xmath80 such that only small amount of @xmath61 processing time is used ( thus small loss of granted value ) , we leverage the fact that when a job @xmath86 is declined during busy interval @xmath59 , the deadline of @xmath87 can not be too far with respect to the end of @xmath59 , given by lemma [ lemma : nolargevalue ] .",
    "lemma [ lemma : bu_sy ] provides the earliest time for an offline scheduler to execute a job in @xmath77 outside @xmath61 .",
    "[ lemma : bu_sy ] suppose @xmath86 is declined by the online scheduler at time @xmath88 and @xmath89 $ ] .",
    "then , if @xmath87 is to be executed by the offline scheduler anywhere outside @xmath61 it must be after @xmath55 .    the proof can be easily done using the fact @xmath89 $ ] , leading to @xmath90\\subset \\mathscr{b}$ ] .",
    "lemma [ lemma : net ] upper bounds the net gain the optimal offline scheduler will obtain over the scheduling - nothing benchmark , restricted to the jobs that are declined during @xmath59 .    [ lemma : net ] under the granted - value setting the total net gain obtained by the offline algorithm from scheduling the jobs in @xmath80 released in @xmath54 $ ] is no greater than @xmath91 .    according to lemma [ lemma : nolargevalue ] if @xmath28 was declined during the busy interval @xmath54 $ ] .",
    "then @xmath92 where @xmath65 is the shortage ( at time @xmath55 ) of job @xmath66 that is admitted in @xmath59 and the summation of @xmath67 is summing over all jobs @xmath66 that are admitted in @xmath59 .    on",
    "the other hand under the granted - value setting the net gain obtained by the offline algorithm from scheduling the jobs in @xmath80 released in @xmath54 $ ] can only come from @xmath77 and the earliest time @xmath87 can be executed by the offline scheduler outside @xmath61 is @xmath55 .",
    "therefore the net gain obtained by the offline algorithm from scheduling the jobs in @xmath80 in @xmath54 $ ] is bounded by @xmath93 where @xmath94 is the subset of @xmath77 released in @xmath59 .",
    "lemma [ lemma : shortage ] upper bounds the total shortage @xmath95 ( at time @xmath55 ) .",
    "[ lemma : shortage ] @xmath96 .",
    "since each @xmath66 that is not finished in @xmath59 contributes @xmath65 to @xmath95 and @xmath97 to @xmath56 , and each @xmath66 that is finished in @xmath59 contributes @xmath42 to @xmath95 , @xmath98 to @xmath56 and @xmath98 to @xmath99 , the lemma is proved .",
    "we now prove theorem [ thm:1 ] after bounding the net gain of scheduling the jobs in @xmath80 .",
    "lemma [ lemma : net ] bounds the maximum net gain for each busy interval . by construction ,",
    "each job is accounted for in exactly one continuous busy interval .",
    "therefore , summing over all busy intervals we conclude using lemma [ lemma : shortage ] that under the granted value setting the total net gain during the entire execution horizon obtained by the offline algorithm from scheduling the jobs of @xmath80 is bounded by @xmath100 , where @xmath61 is the union of all the busy intervals .    combining the upper bound of the total net gain and the value of the scheduling - nothing benchmark , _",
    "i.e. _ , the processing time in @xmath61 , yields @xmath101 where eq .",
    "( [ eqn : all ] ) is obtained from summing lemma [ lemma : capacity ] over all continuous busy intervals , eq .",
    "( [ eqn : all2 ] ) holds when @xmath102 , and eq .",
    "( [ eqn : all3 ] ) is obtained by optimizing over @xmath50 , which yields @xmath103 and @xmath104 where @xmath105 is the set of released jobs .",
    "since the value of the optimal offline schedule is at most @xmath71 and the profit obtained by dsc algorithm is @xmath106 , the competitive ratio @xmath0 is shown to be achievable by dsc algorithm .",
    "an adversary argument establishes the upper bound on the competitive ratio ever achievable by any online scheduler .",
    "specifically , we construct a job input instance @xmath22 , such that the competitive ratio for the constructed job input instance is upper bounded by @xmath0 .",
    "consider the input instance @xmath22 constructed by the adversary which contains a sequence of tight jobs ( @xmath107 ) .",
    "the first tight job @xmath108 is released at time @xmath42 with processing length @xmath109 .",
    "the offline adversary observes the action of the online scheduler and then decides future job releases . upon the release of @xmath108 the online scheduler can choose either to admit or to decline the job @xmath108 .",
    "if declined , the offline adversary will choose to release no more jobs and eventually the offline adversary obtains @xmath110 while the online scheduler @xmath42 .",
    "if admitted , the adversary will choose to release another tight job @xmath111 at time @xmath112 , with processing length @xmath113 .",
    "then similarly the online scheduler can choose either to admit or to decline the job @xmath111 upon arrival .",
    "similarly , if declined , the offline adversary will choose to release no more jobs and eventually the offline adversary obtains @xmath113 while the online scheduler @xmath110 .",
    "if admitted , the adversary released another tight job @xmath114 at time @xmath115 , with processing length @xmath116 .",
    "the whole process keeps going until the online scheduler chooses to decline the first job in the process . for the @xmath117th release the offline adversary releases the tight job @xmath118 at time @xmath119 , with processing length @xmath120 .",
    "then similarly the online scheduler can choose either to admit or to decline the job @xmath118 upon arrival .",
    "if declined , the offline adversary will choose to release no more jobs and eventually the offline adversary obtains @xmath120 while the online scheduler @xmath121 , where @xmath122 is the non - completion penalty paid by the online scheduler ( the non - completion penalty should ideally include a term with @xmath112 , however , the adversary will choose @xmath112 to be arbitrarily small and the term can be left out in the following derivation ) .    for the above job release up to @xmath123 ( _ i.e. _ , even the online scheduler chooses to admit up to job @xmath123 , the offline adversary will not release new jobs ) , the competitive ratio ever achievable for the above constructed input instance is @xmath124 where @xmath125 , for @xmath126 .",
    "now we design the processing lengths @xmath127 to upper bound the value of eq .",
    "( [ eqn : cr ] ) .",
    "we first set all terms but the last inside the minimum in eq .",
    "( [ eqn : cr ] ) to be @xmath128 .",
    "@xmath129    we can then obtain the recursion by subtracting eq .",
    "( [ eqn : eq3 ] ) from eq .",
    "( [ eqn : eq2 ] ) , @xmath130 with the characteristic function @xmath131    we still need the last term inside the maximum in eq .",
    "( [ eqn : cr ] ) to be no greater than @xmath128 , @xmath132    rewrite eq .",
    "( [ eqn : need ] ) to be @xmath133 which implies @xmath134 and further ( due to eq .",
    "( [ eqn : recursion1 ] ) ) @xmath135    for any @xmath136 the characteristic function has two complex roots and there exists @xmath137 such that eq .",
    "( [ eqn : need ] ) is satisfied .",
    "therefore we can use @xmath138 arbitrarily close to @xmath139 to construct the sequence of tight jobs with processing length @xmath140 , for which the best competitive ratio ever achievable is @xmath128 .",
    "taking the limit of @xmath141 yields the conclusion that the best competitive ratio ever achievable is @xmath142 , matching the competitive ratio of dsc .",
    "we consider the problem of online preemptive job scheduling with deadlines and commitment requirement for the application of phev garage charging scheduling .",
    "we propose an online scheduling algorithm dsc and analyze its competitive ratio in the presence of overload .",
    "we show that the competitive ratio of dsc is @xmath11 .",
    "we also show that no online scheduling algorithm can achieve a better competitive ratio , which establishes the optimality of dsc competitive - ratio - wise . comparing with the optimal competitive ratio of @xmath12 without the commitment requirement ,",
    "our result quantifies the performance loss ( in terms of competitive ratio ) due to the commitment obligation to be @xmath13 .",
    "the multi - processor scheduling and the average performance of the dsc algorithm under a stochastic setup will be investigated in future work ."
  ],
  "abstract_text": [
    "<S> we consider an online preemptive scheduling problem where jobs with deadlines arrive sporadically . </S>",
    "<S> a commitment requirement is imposed such that the scheduler has to either accept or decline a job immediately upon arrival . </S>",
    "<S> the scheduler s decision to accept an arriving job constitutes a contract with the customer ; if the accepted job is not completed by its deadline as promised , the scheduler loses the value of the corresponding job and has to pay an additional penalty depending on the amount of unfinished workload . </S>",
    "<S> the objective of the online scheduler is to maximize the overall profit , _ </S>",
    "<S> i.e. _ , the total value of the admitted jobs completed before their deadlines less the penalty paid for the admitted jobs that miss their deadlines . we show that the maximum competitive ratio is @xmath0 and propose a simple online algorithm to achieve this competitive ratio . </S>",
    "<S> the optimal scheduling includes a threshold admission and a greedy scheduling policies . </S>",
    "<S> the proposed algorithm has direct applications to the charging of plug - in hybrid electrical vehicles ( phev ) at garages or parking lots .    </S>",
    "<S> deadline scheduling ; competitive ratio analysis ; commitment requirement ; phev charging scheduling . </S>"
  ]
}