{
  "article_text": [
    "in the steiner forest problem , given a metric space and a set of source - sink pairs @xmath2 , a feasible solution is a forest such that each source - sink pair lies in the same tree in this forest .",
    "the goal is to minimize the cost , i.e. , the total length of edges in the forest .",
    "this problem is a generalization of the steiner tree problem , and hence apx - hard .",
    "the constant - factor approximation algorithms currently known for it are all based on linear programming techniques .",
    "the first such result was an influential primal - dual @xmath3-approximation due to agrawal , klein , and ravi  @xcite ; this was simplified by goemans and williamson  @xcite and extended to many `` constrained forest '' network design problems .",
    "other works have since analyzed the integrality gaps of the natural linear program , and for some stronger lps ; see .    however , no constant - factor approximations are known based on `` purely combinatorial '' techniques .",
    "some natural algorithms have been proposed , but these have defied analysis for the most part .",
    "the simplest is the _ paired greedy algorithm _ that repeatedly connects the yet - unconnected @xmath4-@xmath5 pair at minimum mutual distance ; this is no better than @xmath6 ( see chan , roughgarden , and valiant  @xcite or full version  [ sec : girth - lbd ] ) .",
    "even greedier is the so - called _ gluttonous algorithm _ that connects the closest two yet - unsatisfied terminals regardless of whether they were `` mates '' .",
    "the performance of this algorithm has been a long - standing open question .",
    "our main result settles this question .",
    "[ thm : main - intro ] the gluttonous algorithm is a constant - factor approximation for steiner forest .",
    "we then apply this result to obtain a simple combinatorial approximation algorithm for the _ two - stage stochastic version _ of the steiner forest problem . in this problem",
    ", we are given a probability distribution @xmath7 defined over subsets of demands .",
    "in the first stage , we can buy some set @xmath8 of edges . then in the second stage , the demand set is revealed ( drawn from @xmath7 ) , and we can extend the set @xmath8 to a feasible solution for this demand set . however , these edges now cost @xmath9 times more than in the first stage .",
    "the goal is to minimize the total expected cost .",
    "it suffices to specify the set @xmath8once the actual demands are known , we can augment using our favorite approximation algorithm for steiner forest .",
    "our simple algorithm is the following : sample @xmath10 times from the distribution @xmath7 , and let @xmath8 be the steiner forest constructed by ( a slight variant of ) the gluttonous algorithm on union of these @xmath11 demand sets sampled from @xmath7 .",
    "[ thm : stoc - main ] there is a combinatorial ( greedy ) constant - factor approximation algorithm for the stochastic steiner forest problem .",
    "showing that such a `` boosted sampling '' algorithm obtained a constant factor approximation had proved elusive for several years now ; the only constant - factor approximation for stochastic steiner forest was a complicated primal - dual algorithm with a worse approximation factor  @xcite .",
    "our result is based on the first cost sharing scheme for the steiner forest problem which is constant strictwith respect to a constant factor approximation algorithm ; see for the formal definition .",
    "such a cost sharing scheme can be used for designing approximation algorithms for several stochastic network design problems for the steiner forest problem . in particular",
    ", we obtain the following results :    * for multi - stage stochastic optimization problem for steiner forest , our strict - cost sharing scheme along with the fact that it is also cross - monotone implies the first @xmath12-approximation algorithm , where @xmath13 denotes the number of stages ( see  @xcite for formal definitions and the relation with cost sharing ) . * consider the online stochastic problem , where given a set of source - sink pairs @xmath14 in a metric @xmath15 , and a probability distribution @xmath7 over subsets of @xmath14 ( i.e. , over @xmath16 ) , an adversary chooses a parameter @xmath13 , and draws @xmath13 times independently from @xmath7 .",
    "the on - line algorithm , which can sample from @xmath7 , needs to maintain a feasible solution over the set of demand pairs produced by the adversary at all time .",
    "the goal is to minimize the expected cost of the solution produced by the algorithm , where the expectation is over @xmath7 and random coin tosses of the algorithm .",
    "our cost sharing framework gives the first constant competitive algorithm for this problem , generalizing the result of garg et al .",
    "@xcite which works for the special case when @xmath7 is a distribution over @xmath14 ( i.e. , singleton subsets of @xmath14 ) .",
    "we first describe the gluttonous algorithm . call a terminal",
    "_ active _ if it is not yet connected to its mate .",
    "recall : our algorithm merges the two active terminals that are closest in the current metric ( and hence zeroes out their distance ) . at any point of time",
    ", we have a collection of _ supernodes _ , each supernode corresponding to the set of terminals which have been merged together .",
    "a supernode is _ active _ if it contains at least one active terminal .",
    "hence the algorithm can be alternatively described thus : merge the two active supernodes that are closest ( in the current metric ) into a new supernode .",
    "( a formal description of the algorithm appears in  [ sec : algo ] . )",
    "the analysis has two conceptual steps . in the first step ,",
    "we reduce the problem to the special case when the optimal solution can be ( morally ) assumed to be a single tree ( formally , we reduce to the case where the gluttonous solution is a refinement of the optimal solution ) .",
    "the proof for this part is simple : we take an optimal forest , and show that we can connect two trees in the forest if the gluttonous algorithm connects two terminals lying in these two trees , incurring only a factor - of - two loss .",
    "r0.3     the second step of the analysis starts with the tree solution @xmath17 promised by the first step of the analysis .",
    "as the gluttonous algorithm proceeds , the analysis alters @xmath17 to maintain a candidate solution to the current set of supernodes .",
    "e.g. , if we merge two active supernodes @xmath18 and @xmath19 to get a new supernode @xmath20 .",
    "we want to alter the solution @xmath17 on the original supernodes to get a new solution @xmath21 , say by removing an edge from the ( unique ) @xmath18-@xmath19 path in @xmath17 , and then short - cutting any degree two inactive supernode in @xmath21 ( see figure  [ fig : tree ] for an example ) .",
    "the hope is to argue that the distance between @xmath18 and @xmath19which is the cost incurred by gluttonous  is commensurate to the cost of the edge of @xmath17 which gets removed during this process",
    ". this would be easy if there were a long edge on @xmath18-@xmath19 path in the tree @xmath17 . the problem : this may not hold for every pair of supernodes we merge . despite this , our analysis shows that the bad cases can not happen too often , and so we can perform this charging argument in an amortized sense .",
    "our analysis is flexible and extends to other variants of the gluttonous algorithm .",
    "a natural variant is one where , instead of merging the two closest active supernodes , we contract the edges on a shortest path between the two closest active supernodes . first step of the above analysis does not hold any more .",
    "however , we show that it is enough to account for the merging cost of supernodes when the active terminals in them lie in the same tree of the optimal solution , and consequently the arguments in the second step of the analysis are sufficient .",
    "yet another variant is a _ timed _ version of the algorithm , which is inspired by a timed version of the primal - dual algorithm  @xcite , and is crucial for obtaining the strictcost - shares described next .",
    "loosely speaking , a cost - sharing method takes an algorithm @xmath22 and divides the cost incurred by the algorithm on an instance among the terminals @xmath14 in that instance .",
    "the `` strictness '' property ensures that if we partition @xmath14 arbitrarily into @xmath23 , and build a solution @xmath24 on @xmath25 , then the cost - shares of the terminals in @xmath26 would suffice to augment the solution @xmath24 to one for @xmath26 as well .    a natural candidate for @xmath22",
    "is the gw primal - dual algorithm , and the cost - shares are equally natural : we divide up the cost of growing moats among the active terminals in the moat .",
    "however , the example in figure  [ fig : ex ] shows why this fails when @xmath26 consists of just the demand pair @xmath27 .",
    "when run on all the terminals , the primal - dual algorithm stops at time  1 , with all terminals getting a cost - share of  1 . on the other hand ,",
    "if we run @xmath22 on @xmath25 , it finds a solution which has @xmath28 connected components , each connecting @xmath4 and @xmath29 for @xmath30 .",
    "then connecting @xmath31 and @xmath32 costs @xmath33 , which is much more than their total cost share .",
    "are 2 for all @xmath34 .",
    "further , @xmath35 for @xmath36 .",
    "the distances @xmath37 and @xmath38 are slightly larger than 2 .",
    "the dotted lines indicate the forest returned by the gw primal - dual algorithm when run on the demand set @xmath39,height=56 ]    to avoid this problem ,  @xcite run the primal - dual algorithm for longer than required , and give results for the case when @xmath26 contains a single demand pair .",
    "however , the arguments become much more involved than those in the analysis of gw algorithm  @xcite  the main reason is the presence of `` dead '' moats which cause some edges to become tight , and the cost shares of active terminals can not account for such edges . in our case , the combinatorial ( greedy ) nature of our algorithm / analysis means we do not face such issues . as a result , we can obtain such strict cost sharing methods ( when @xmath26 is a singleton set ) with much simpler analysis , albeit with worse constants than those in  @xcite ) .",
    "we refer to this special case of strictness property as _ uni - strictness_.    our analysis for the general case where @xmath26 contains multiple demand pairs requires considerably more work ; but note that these are the first known strict cost shares for this case , the previous primal - dual techniques could not handle the complexity of this general case . here ,",
    "we want @xmath22 to build as many edges as possible , and the cost share @xmath40 to be as large as possible .",
    "since the gluttonous algorithm tends to build fewer edges than primal - dual ( the dead moats causing extra connections and more edges ) , we end up using the primal - dual algorithm as the algorithm @xmath22 .",
    "however , to define the cost - shares , we use the ( timed ) gluttonous algorithm in order to avoid the issues with dead moats .",
    "the analysis then proceeds via showing a close correspondence between the primal - dual and gluttonous algorithms .",
    "although this is not involved , it needs to carefully match the two runs .",
    "we first describe some related work in , and give some important definitions in .",
    "then we describe the gluttonous algorithm formally in , and then analyze this algorithm in .",
    "then show that our analysis is flexible enough to analyze several variants of the gluttonous algorithm .",
    "we study the the timed version in , which gets used in subsequent sections on cost sharing .",
    "we also consider the variant of gluttonous based on path - contraction in the appendix ( see ) .",
    "the cost - sharing method for the uni - strictcase is in , and the general case is in .",
    "we briefly describe the timed version in , which gets used in the subsequent section on cost sharing .",
    "the cost - sharing scheme and its properties are described in  .",
    "the details of the analysis and the simpler analysis in the uni - strictcase are deferred to the full version .",
    "we also analyse the variant of the gluttonous which relies on contract shortest path between supernodes in the full version .",
    "the first constant - factor approximation algorithm for the steiner forest problem was due to agrawal , klein , and ravi  @xcite using a primal - dual approach ; it was refined and generalized by goemans and williamson  @xcite to a wider class of network design problems .",
    "the primal - dual analysis also bounds integrality gap of the the natural lp relaxation ( based on covering cuts ) by a factor of @xmath3 .",
    "different approximation algorithms for steiner forest based off the same lp , and achieving the same factor of @xmath3 , are obtained using the iterative rounding technique of jain  @xcite , or the integer decomposition techniques of chekuri and shepherd  @xcite .",
    "a stronger lp relaxation was proposed by knemann , leonardi , and schfer  @xcite , but it also has an integrality gap of  @xmath3  @xcite .    the special case of the steiner tree problem , where all the demands share a common ( source ) terminal , has been well - studied in the network design community . there is a simple 2-approximation algorithm for this problem : iteratively find the closest terminal to the source vertex , and merge these two terminals .",
    "there have been several changes to this simple greedy algorithm leading to improved approximation ratios  ( see e.g.  @xcite ) .",
    "byrka et al .",
    "@xcite improved these results to a @xmath41-approximation algorithm , which is based on rounding a stronger lp relaxation for this problem .",
    "the stochastic steiner tree / forest problem was defined by immorlica , karger , minkoff , and mirrokni  @xcite , and further studied by  @xcite , who proposed the boosted - sampling framework of algorithms .",
    "the analysis of these algorithms is via `` strict '' cost sharing methods , which were studied by  @xcite .",
    "a constant - factor approximation algorithm ( with a large constant ) was given for stochastic steiner forest by  @xcite based on primal - dual techniques ; it is much more complicated than the algorithm and analysis based on the greedy techniques in this paper .",
    "let @xmath42 be a metric space on @xmath43 points ; assume all distances are either @xmath44 or at least  @xmath45 .",
    "let the _ demands _ @xmath46 be a collection of source - sink pairs that need to be connected . by splitting vertices",
    ", we may assume that the pairs in @xmath14 are disjoint .",
    "a node is a _ terminal _ if it belongs to some pair in @xmath14 .",
    "let @xmath47 denote the number of terminals pairs , and hence there are @xmath48 terminals .",
    "for a terminal @xmath18 , let @xmath49 be the unique vertex such that @xmath50 ; we call @xmath49 the _ mate _ of @xmath18 .    for a steiner forestinstance @xmath51 , a solution @xmath52 to the instance",
    "@xmath53 is a forest such that each pair @xmath50 is contained within the vertex set @xmath54 for some tree @xmath55 . for a tree @xmath56 ,",
    "let @xmath57 be the sum of lengths of edges in @xmath17 .",
    "let @xmath58 be the cost of the forest @xmath52 .",
    "our goal is to find a solution of minimum cost .",
    "to describe the gluttonous algorithm , we need some definitions . given a steiner forestinstance @xmath51 , a _",
    "supernode _ is a subset of terminals .",
    "a _ clustering _",
    "@xmath59 is a partition of the terminal set into supernodes .",
    "the _ trivial clustering _",
    "places each terminal in its own singleton supernode .",
    "our algorithm maintains a clustering at all points in time .",
    "given a clustering , a terminal @xmath18 is _ active _ if it belongs to a supernode @xmath60 that does not contain its mate @xmath49 .",
    "a supernode @xmath60 is _ active _ if it contains some active terminal . in the trivial clustering ,",
    "all the terminals and supernodes are active .    given a clustering @xmath61 , define a new metric @xmath62 called the _ @xmath63-puncturing _ of metric @xmath15 . to get this , take a complete graph on @xmath64 ; for an edge @xmath65 , set its length to be @xmath66 if @xmath67 lie in different supernodes in @xmath63 , and to zero if @xmath67 lie in the same supernode in @xmath63 .",
    "call this graph @xmath68 , and defined the @xmath63-punctured distance to be the shortest - path distance in this graph , denoted by @xmath69 .",
    "one can think of this as modifying the metric @xmath15 by collapsing the terminals in each of the supernodes in @xmath63 to a single node .",
    "given clustering @xmath63 and two supernodes @xmath70 and @xmath71 , the distance between them is naturally defined as @xmath72 the gluttonous algorithm is as follows :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ start with @xmath63 being the trivial clustering , and @xmath73 being the empty set . while there exist active supernodes in @xmath63 , do the following :    find active supernodes @xmath74 in @xmath63 with minimum @xmath63-punctured distance .",
    "( break ties arbitrarily but consistently , say choosing the lexicographically smallest pair . )",
    "update the clustering to @xmath75    add to @xmath73 the edges corresponding to the inter - supernode edges on the shortest path between @xmath74 in the graph @xmath68 .",
    "finally , output a maximal acyclic subgraph @xmath76 of @xmath73 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    above , we say we _ merge _ @xmath74 to get the new supernode @xmath77 .",
    "the _ merging distance _ for the merge of @xmath74 is the @xmath63-punctured distance @xmath78 , where @xmath63 is the clustering just before the merge .",
    "since each active supernode contains an active terminal , if @xmath79 and @xmath80 are both active , then when we talk about merging @xmath81 , we mean merging @xmath82 .",
    "note that the length of the edges added in step  ( iii ) is equal to @xmath78 .",
    "the algorithm maintains the following invariant : if @xmath60 is a supernode , then the terminals in @xmath60 lie in the same connected component of @xmath76 . and @xmath71 by buying edges connecting them both to some inactive supernode @xmath83 , then @xmath76 has a tree connecting all three , but the clustering has @xmath84 separate from @xmath83 .",
    "indeed , inactive supernodes never get merged again , whereas inactive trees may . ]",
    "the algorithm terminates when there are no more active terminals , so each terminal shares a supernode with its mate , and hence the final forest @xmath76 connects all demand pairs .",
    "since the edges added to @xmath73 have total length at most the sum of the merging distances , and we output a maximal sub - forest of @xmath73 , we get :    [ fct : can - make - forest ] the cost of the steiner forestsolution output is at most the sum of all the merging distances .",
    "we emphasize that the edges added in step  ( iii ) are often overkill : the metric @xmath85 ( where the edges in @xmath73 have been contracted ) has no greater distances than the metric @xmath62 that we focus on .",
    "the advantage of the latter over the former is that distances in @xmath62 are well - controlled ( and distances between active terminals only increase over time ) , whereas those in @xmath85 change drastically over time ( with distances between active terminals changing unpredictably ) .",
    "r0.5     consider the example in figure  [ fig : glut ] , where the distances for missing edges are inferred by computing shortest - path distances .    here , we first merge @xmath86 to form a supernode , say @xmath87 , which is inactive .",
    "next we merge @xmath88 and @xmath89 to form another supernode , say @xmath90 .",
    "the active supernodes are @xmath91 , and @xmath92 , so we next merge @xmath93 with @xmath90 to form supernode @xmath94 , and finally merge @xmath95 with @xmath94 .",
    "when the algorithm ends , there are two ( inactive ) supernodes corresponding to the sets @xmath86 and @xmath96 .",
    "however , the forest produced will have only a single tree , which consists of the set of edges drawn in the figure .",
    "we analyze the algorithm in two steps .",
    "one conceptual problem is in controlling what happens when gluttonous connects two nodes in different trees of the optimal forest . to handle this ,",
    "we show in how to preprocess the optimal forest @xmath97 to get a near - optimal forest @xmath98 such that the final clustering of the gluttonous algorithm is a refinement of this near - optimal forest .",
    "( i.e. , if @xmath18 and @xmath19 are in the same supernode in the gluttonous clustering , then they lie in the same tree in @xmath98 . )",
    "this makes it easier to then account for the total merging distance , which we do in .",
    "crucial observation , which makes the analysis much cleaner , is the following .      to begin , some simple claims about monotonicity .",
    "the first one is by definition .",
    "[ fct : dist - mono ] let the clustering @xmath99 correspond to a later time than the clustering @xmath63 .",
    "then @xmath63 is a refinement of @xmath99 .",
    "moreover , @xmath100 for all @xmath101 .",
    "[ clm : close - mono ] consider clustering @xmath63 and let any two active supernodes @xmath102 be merged , resulting in clustering @xmath99 .",
    "then for any active @xmath103 that is not @xmath60 or @xmath17 , the distance to its closest active supernode does not decrease . also , if @xmath104 is active in @xmath99 then the distance to its closest supernode in @xmath99 is at least as large as the minimum of @xmath60 and @xmath17 s distances to their closest supernodes in @xmath63 .",
    "first observe that when two active supernodes are merged , they may stay active or become inactive .",
    "an inactive supernode never merges with any other supernode , and hence , it can not become active later .    for active supernode @xmath105 ,",
    "suppose its closest supernode in @xmath63 was @xmath106 at @xmath63-punctured distance @xmath107 , and in @xmath99 it is @xmath108 at @xmath99-punctured distance @xmath109 .",
    "if @xmath110 , there must now be a path through supernode @xmath104 that is of length @xmath109 .",
    "but this means the @xmath63-punctured distance of @xmath111 from either @xmath60 or @xmath17 was at most @xmath109 , and both were active in @xmath63a contradiction .",
    "this proves the first part of the claim .    now , suppose supernode @xmath112 is active in @xmath99 .",
    "observe that for any other supernode @xmath113 , the punctured distance @xmath114 .",
    "this proves the second part of the claim .",
    "[ clm : merge - mono ] if @xmath102 are merged before @xmath115 in gluttonous , then the merging distance for @xmath102 is no greater than the merging distance for @xmath116 .",
    "gluttonous merges two active supernodes with the smallest current distance . by claim  [ clm : close - mono ] distances between the remaining active supernodes do not decrease .",
    "this proves this claim .",
    "since gluttonous is deterministic and we break ties consistently , given an instance steiner forestinstance @xmath51 there is a unique final clustering @xmath117 produced by the algorithm .",
    "[ def : faithful ] a forest @xmath52 is _ faithful _ to a clustering @xmath63 if each supernode @xmath118 is contained within a single tree in  @xmath52 .",
    "( i.e. , for all @xmath118 , there exists @xmath55 such that @xmath119 . )",
    "note that every forest is faithful to the trivial clustering consisting of singletons .",
    "[ def : width ] for a forest @xmath52 that is a solution to instance @xmath53 , and for any tree @xmath55 , let @xmath120 denote the largest tree distance between any pair connected by @xmath17 .",
    "let the width of forest @xmath52 be the sum of the widths of the trees in @xmath52 .",
    "i.e. , @xmath121 where @xmath122 refers to the tree metric induced by @xmath17 .",
    "we now show there exist near - optimal solutions which are faithful to gluttonous final clustering .",
    "following theorem , whose proof is deferred to the full version , shows that there exist near - optimal solutions which are faithful to gluttonous final clustering .",
    "[ thm : one - tree ] let @xmath123 be an optimal solution to the steiner forestinstance @xmath51 .",
    "there exists another solution @xmath98 for instance @xmath53 such that    @xmath124 , and    @xmath98 is faithful to the final clustering @xmath117 produced by the gluttonous algorithm .",
    "start with @xmath125 which clearly satisfies the first ( cost ) guarantee but perhaps not the second ( faithfulness ) one . to fix this , run the gluttonous algorithm on @xmath53 , and",
    "whenever it connects two terminals @xmath126 that violate the condition  ( b ) , connect up some trees in the current @xmath98 to prevent this violation .",
    "in particular , we show how to do this while maintaining two invariants :    * the cost of edges in @xmath127 is at most @xmath128 , and * at any point in time , the forest @xmath98 is faithful to the current clustering @xmath63 ( during the run of the gluttonous algorithm ) .    at the beginning ,",
    "the clustering @xmath63 is the trivial clustering consisting of singleton sets containing terminals , and @xmath129 ; both invariants  ( a ) and  ( b ) are vacuously true .",
    "now consider some step of gluttonous which starts with the clustering @xmath63 and connects two active supernodes @xmath60 and @xmath130 which are closest to each other to get the clustering @xmath99 . by the invariant",
    "( b ) , we know all terminals in supernode @xmath60 lie within the same tree in @xmath98 , and the same for terminals in @xmath130 .",
    "let @xmath131 and @xmath132 be some active terminals within these supernodes ; hence @xmath133 and @xmath134 .",
    "two cases arise :    * * case i : * @xmath18 and @xmath19 belong to the same tree in @xmath98 : clearly , @xmath98 satisfies the invariant  ( b ) with respect to @xmath99 as well . hence",
    ", we keep @xmath98 unchanged and it satisfies invariant  ( a ) trivially . * * case ii : * @xmath18 and @xmath19 belong to different trees @xmath135 : suppose the shortest path between @xmath18 and @xmath19 in @xmath62 is @xmath136 such that each @xmath137 belong to the same supernode @xmath138 in @xmath63 ( see e.g. , figure  [ fig : single ] ) . by the greedy behavior of gluttonous , @xmath139 is at most the cost to connect @xmath18 to @xmath49 , or to connect @xmath19 to @xmath140 in @xmath62 .",
    "in fact , we can bound these costs by the cost of the edges between @xmath141 in @xmath142 , etc .",
    "hence , @xmath143 since each of the supernodes @xmath138 is contained within some tree in @xmath98 ( by invariant  ( b ) applied to clustering @xmath63 ) , we need only add ( a subset of edges from ) the path @xmath144 to the forest @xmath98 in order to merge @xmath142 and @xmath145 ( and perhaps other trees in @xmath98 ) into one single tree  thus ensuring invariant  ( b ) for the new clustering @xmath99 .",
    "the grey blobs are supernodes in @xmath63 , the solid lines denote the forest @xmath98 .",
    "the dotted lines are the path @xmath144 .",
    "observe we do not need to add the second edge of @xmath144 as it will create a cycle . , height=113 ] + how does the width of the trees in @xmath98 change ?",
    "each tree that we merge is inactive ( since it is a coarsening of the original solution @xmath97 ) .",
    "connecting up @xmath146 causes the width of the resulting tree to be @xmath147 .",
    "the decrease in @xmath148 due to the merge is at least @xmath149 , which ensures invariant  ( a ) ( using inequality  ( [ eq : cost ] ) ) .",
    "hence , at the end of the run of gluttonous , both invariants hold .",
    "since the initial potential is @xmath150 , and the final potential is non - negative , the total cost of edges in @xmath127 is at most @xmath151 .",
    "this completes the proof .",
    "let @xmath152 be a solution to the steiner forestinstance .",
    "the main result of this section is :    [ thm : one - tree - is - cheap ] if the forest @xmath97 is faithful to the final clustering @xmath117 of the gluttonous algorithm , then the cost of the gluttonous algorithm is @xmath153 .",
    "since by theorem  [ thm : one - tree ] there is a forest @xmath97 with cost at most twice the optimum that is faithful to gluttonous final clustering @xmath117 , applying theorem  [ thm : one - tree - is - cheap ] to this forest proves theorem  [ thm : main - intro ] .",
    "we now prove theorem  [ thm : one - tree - is - cheap ] . at a high level",
    ", the proof proceeds thus : we consider the run of the gluttonous algorithm , and maintain for each iteration @xmath154 a `` candidate '' forest @xmath155 that is a solution to the remaining instance .",
    "we show that in an amortized sense , at each step the cost of forest @xmath155 decreases by an amount which is a constant fraction of the cost incurred by gluttonous .",
    "since the starting cost of this forest is at most a constant times the optimal cost , so is the total merging cost of the gluttonous , proving the result .",
    "for steiner forest instance @xmath53 , assume that @xmath117 is gluttonous final clustering , and @xmath97 is faithful to @xmath117 .",
    "let @xmath156 be the gluttonous clustering at the beginning of the iteration @xmath154 , with @xmath157 being the active supernodes .",
    "it will be useful to view this clustering as giving us an induced steiner forest instance @xmath158 on the metric whose points are the supernodes in @xmath156 and where distances are given by the punctured metric @xmath159 , where the terminals in the instance @xmath158 are supernodes in @xmath157 , and where active supernodes @xmath160 are mates if there is a pair @xmath161 such that @xmath79 and @xmath162 .",
    "( supernodes no longer have unique mates , but this property was only used for convenience in theorem  [ thm : one - tree ] ) . for any iteration @xmath154 , the subsequent run of gluttonous is just a function of this induced instance @xmath158 . indeed , given the instance @xmath158 , gluttonous outputs a final clustering which is same as @xmath117 except the inactive supernodes in @xmath156 are absent .",
    "i.e. , the inactive supernodes in @xmath156 will not play a role , but all the active supernodes will continue to combine in the same way in @xmath158 as in @xmath53 .",
    "we now inductively maintain a forest @xmath163 such that    @xmath163 is a feasible solution to this steiner forestinstance @xmath158 , and    @xmath163 maintains the connectivity structure of @xmath97 , i.e. , if @xmath18 and @xmath19 are two active terminals which are in the same tree in @xmath97 , then the supernodes containing @xmath18 and @xmath19 lie in the same tree in @xmath163 .",
    "and we will charge the cost of gluttonous to reductions in the cost of this forest @xmath163 .",
    "[ [ the - candidate - forest - mathscrft . ] ] the `` candidate '' forest @xmath163 .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the initial clustering @xmath164 is the trivial clustering consisting of singleton terminals ; we set @xmath165 to @xmath97 .",
    "since @xmath166 is the original instance , @xmath165 is feasible for it ; invariant  ( i2 ) is satisfied trivially .    for an iteration @xmath154 ,",
    "let @xmath167 denote the edges in @xmath163 .",
    "note that an edge @xmath168 between two supernodes @xmath169 corresponds to an edge between two terminals @xmath67 in the original metric @xmath15 , where @xmath170 .",
    "define @xmath171 as @xmath172 , the length of the edge @xmath173 in the original metric .",
    "note that the length of @xmath173 in the metric @xmath174 may be smaller than @xmath171 .",
    "for every edge @xmath175 , we shall also maintain a _ potential _ of @xmath173 , denoted @xmath176 .",
    "initially , for @xmath177 , the potential @xmath178 for all @xmath179 . during the course of the algorithm , the potential @xmath180 ; we describe the rule for maintaining potentials below .",
    "intuitively , an edge @xmath175 would have been obtained by _ short - cutting _",
    "several edges of @xmath97 , and @xmath176 is equal to the total length of these edges .",
    "suppose we have a clustering @xmath181 and a forest @xmath182 which satisfies invariants ( i1 ) and ( i2 ) .",
    "if we now merge two supernodes @xmath183 to get clustering @xmath156 , we have to update the forest @xmath182 to get to @xmath163 using procedure ` updateforest`given in figure  [ fig : update ] .",
    "the main idea is simple : when we merge the nodes corresponding to @xmath70 and @xmath71 in @xmath182 into a single node , this creates a cycle . removing any edge from the cycle maintains the invariants , and reduces the cost of the new forest : we remove the edge with the highest potential from the cycle .",
    "we further reduce the cost by getting rid of steiner vertices , which correspond to inactive supernodes in @xmath163 with degree  2 .",
    "more formally , given two edges @xmath184 with a common end - point @xmath19 , the operation _ short - cut _ on @xmath185 replaces them by a single edge @xmath186 . whenever we see a steiner vertex of degree  2 in @xmath163 , we shortcut the two incident edges",
    ".    0.9 * algorithm ` updateforest`(@xmath187 ) :* + 1 .",
    "let @xmath17 be the tree in @xmath182 containing the terminals in @xmath70 and @xmath71 .",
    "merge @xmath70 and @xmath71 to a single node @xmath60 in the tree @xmath17 .",
    "if the new supernode @xmath60 becomes inactive , and has degree 2 in the tree @xmath17 , then + short - cut the two edges incident to @xmath60 .",
    "let @xmath94 denote the unique cycle formed in the tree @xmath17 .",
    "+ 5 . delete the edge in the cycle @xmath94 which has the highest potential .",
    "+ 6 . while there is an inactive supernode in @xmath17 which is a degree-2 vertex , + short - cut the two incident edges to this vertex .",
    "[ fig : update ]    some more comments about the procedure  ` updateforest ` . in step 1",
    ", the existence of the tree @xmath17 follows from the invariant property ( i2 ) and the faithfulness of @xmath97 to @xmath117 .",
    "since the terminals in @xmath77 are in the same tree in @xmath97 , the invariant means they belong to the same tree in @xmath182 , and the construction ensures they remain in the same tree in @xmath163 .",
    "when we short - cut edges @xmath188 to get a new edge @xmath173 , we define the potential of the new edge @xmath173 to be @xmath189 .",
    "it is also easy to check that @xmath163 is a feasible solution to the instance @xmath158 . indeed , the only difference between @xmath190 and @xmath158 is the replacement of @xmath74 by @xmath60 . if @xmath60 becomes inactive , there is nothing to prove .",
    "if @xmath60 remains active , then the tree containing @xmath60 must will also have also have the supernodes which were paired with @xmath70 and @xmath71 in the instance @xmath190 .",
    "it is also easy to check that the invariant property ( i2 ) continues to hold . the following claim ,",
    "whose proof is deferred to the full version , proves some more crucial properties of the forest @xmath163 .",
    "[ cl : forest - prop ] for all iterations @xmath154 , the steiner nodes in @xmath163 have degree at least 3 . therefore , there are at most 2 iterations of the while loop in step 6 of the ` updateforest`algorithm .    we prove the first statement of the lemma by induction on @xmath154 . for @xmath177",
    ", it holds by construction : we can assume that @xmath97 has no steiner vertex of degree at most 2 : any leaf steiner node can be deleted , and a degree 2 can be removed by short - cutting the incident edges .",
    "suppose this property is true for @xmath182 .",
    "we merge @xmath130 and @xmath191 , and if the new supernode @xmath60 becomes an inactive supernode , then its degree will be at least 2 ( both @xmath130 and @xmath191 must have had degree at least 1 ) .",
    "if the degree is equal to 2 , we remove this vertex in step 3 .",
    "when we remove an edge in step 5 , the two end - points could have been steiner vertices . by the induction hypothesis",
    ", their degree will be at least 2 ( after the edge removal ) .",
    "if their degree is 2 , we will again remove them by short - cutting edges .",
    "note that this will not affect the degree of other nodes in the forest .",
    "this also shows that step 6 will be carried out at most twice .",
    "here s the plan for rest of the analysis .",
    "let s fix a tree @xmath192 of @xmath97 , and account for only those merging costs which merge two supernodes with terminals in @xmath192 .",
    "( summing over all trees in @xmath97 and using the faithfulness of @xmath97 to @xmath117 will ensure all merging costs are accounted for . ) since @xmath163 is obtained by repeatedly contracting nodes and removing unnecessary edges , in each iteration @xmath154 there is a unique tree @xmath193 in the forest @xmath163 corresponding to the tree @xmath192 , namely the tree containing the active supernodes with terminals belonging to @xmath192 .",
    "call an iteration of the gluttonous algorithm a _ relevant iteration _ ( with respect to @xmath192 ) if gluttonous merges two supernodes from the tree @xmath193 in this iteration . for brevity , we drop the phrase `` _ _ w.r.t .",
    "@xmath192 _ _ '' in the sequel .",
    "next we show that the total potential of the edges does not change over time .",
    "let @xmath194 denote the set of edges which are deleted ( from a cycle in step 5 ) during the ( relevant ) iterations among @xmath195 .",
    "( observe that @xmath194 does not include edges that are short - cut . )",
    "[ lem : forest - inv ] for iteration @xmath154 , the sum of potentials of edges @xmath194 and @xmath196 equals @xmath197 .",
    "further , @xmath198 for all edges @xmath199 .    by induction on @xmath154 .",
    "the base case @xmath177 follows by construction . for the ih , assume the statement holds for @xmath200 .",
    "assume that @xmath154 is a relevant iteration ( else @xmath201 ) : if we remove edge @xmath173 from @xmath202 during step 5 , we do not change @xmath176 .",
    "if we short - cut two edges @xmath188 to an edge @xmath173 , @xmath203 .",
    "therefore the total potential of the edges in the tree plus that of the edges in @xmath194 does not change .",
    "further , @xmath204 .    eventually @xmath193 has no active supernodes ( for large @xmath154 ) and hence all its edges are deleted . hence if @xmath205 denotes the edges deleted during all the relevant iterations in gluttonous , lemma  [ lem : forest - inv ] implies @xmath206 .",
    "let @xmath207 denote the merging cost of some relevant iteration @xmath154 : we now show how to charge this cost to the potential of some deleted edge in @xmath205 .",
    "formally , let @xmath208 denote the number of active supernodes in @xmath193 , at the _ beginning _ of iteration @xmath154 .",
    "[ thm : charge ] if @xmath209 is relevant , there are at least @xmath210 edges in @xmath205 of potential at least @xmath211 .",
    "we defer the proof of theorem  [ thm : charge ] for the moment , and instead show how to use this to charge the merging costs and to prove theorem  [ thm : one - tree - is - cheap ] , which in turn gives the main theorem of the paper .",
    "theorem  [ thm : one - tree - is - cheap ] let @xmath212 denote the index set of all relevant iterations during the run of gluttonous .",
    "we now define a mapping @xmath213 from @xmath212 to @xmath205 such that : ( i ) for any edge @xmath214 , the pre - image @xmath215 has cardinality at most 8 , and ( ii ) the potential @xmath216 for all @xmath217 . to get this ,",
    "consider a bipartite graph on vertices @xmath218 where a iteration @xmath217 is connected to all edges @xmath219 for which @xmath220 .",
    "theorem  [ thm : charge ] shows this graph satisfies a hall - type condition for such a mapping to exist ; in fact a greedy strategy can be used to construct the mapping ( there can be at most @xmath208 relevant iterations after iteration @xmath154 because each relevant iteration reduces the number of active supernodes by at least one ) .",
    "thus , the total merging cost of gluttonous during relevant iterations is at most @xmath221 where the last equality follows from lemma  [ lem : forest - inv ] . by the faithfulness property ,",
    "each iteration of gluttonous is relevant with respect to one of the trees in @xmath97 , so summing the above expression over all trees gives the total merging cost to be at most @xmath222 .    combining theorem  [ thm : one - tree - is - cheap ] with theorem  [ thm : one - tree ] gives an approximation factor of @xmath223 for the gluttonous algorithm . while we have not optimized the constants , but it is unlikely that our ideas will lead to constants in the single digits .",
    "obtaining , for instance , a proof that the gluttonous algorithm is a @xmath3-approximation ( or some such small constant ) remains a fascinating open problem .      in order to prove theorem  [ thm : charge ] , we need to understand the structure of the trees @xmath193 for @xmath224 in more detail .",
    "let @xmath225 denote the edges deleted during the relevant iterations in @xmath226 , i.e. , @xmath227 .",
    "observe that each edge of @xmath193 is either in @xmath228 or is obtained by short - cutting some set of edges of @xmath228 .",
    "hence we maintain a partition @xmath229 of the edge set @xmath230 , such that there is a correspondence between edges @xmath231 and sets @xmath232 , such that @xmath233 is the set of edges in @xmath228 which have been short - cut to form @xmath173 .    for each set @xmath233",
    ", let @xmath234 be the edge @xmath235 with greatest length . if edge @xmath173 is removed from @xmath193 in some relevant iteration @xmath154 , we have @xmath236 for all @xmath237 , and the set @xmath238 for all future partitions @xmath239 .",
    "[ lem : long ] there are at least @xmath240 edges of length at least @xmath211 in tree @xmath228 .",
    "call an edge _ long _ if its length is at least @xmath211 , and let @xmath241 denote the number of long edges in the tree @xmath228 .",
    "deleting these edges from @xmath228 gives @xmath242 subtrees @xmath243 .",
    "let @xmath244 have @xmath245 active supernodes and @xmath246 edges .",
    "for each tree @xmath244 where @xmath247 , take an eulerian tour @xmath248 and divide it into @xmath245 disjoint segments by breaking the tour at the active supernodes .",
    "each edge appears in two such segments , and each segment has at least six edges ( since the distance between active supernodes is at least @xmath249 and none of the edges are long ) , so @xmath250 when @xmath247 .",
    "this means the total number of edges in @xmath228 is at least three times the number of `` social '' supernodes ( supernodes that do not lie in a component @xmath244 with @xmath251 , in which they are the only supernode ) , _ plus _ those @xmath241 long edges that were deleted .    and",
    "how many such social supernodes are there ?",
    "if @xmath252 , there may be none , but then we clearly have at least @xmath240 long edges .",
    "else at least @xmath253 supernodes are social , so @xmath228 has at least @xmath254 edges . finally , since every steiner vertex in @xmath228 has degree at least @xmath255 , the number of edges is less than @xmath256 .",
    "putting these together gives @xmath257 or @xmath258 .",
    "let @xmath259 be the set of long edges in @xmath228 , and @xmath260 be the partition at the end of the process .",
    "two cases arise :    * at least @xmath210 edges in @xmath259 are @xmath261 for some set @xmath262 .",
    "since each set in @xmath260 has only one head , there are @xmath210 such sets . in any such set @xmath263 , @xmath264 .",
    "moreover , we must have removed @xmath173 in some iteration between @xmath209 and the end , and hence @xmath265 .",
    "* more than than @xmath266 edges in @xmath259 are not heads of any set in @xmath260 .",
    "take one such edge @xmath267  the sets in @xmath268 are singleton sets and hence @xmath267 is the head of the set @xmath269 .",
    "let @xmath154 be the first ( relevant ) iteration such that @xmath267 is not the head of the set containing it in @xmath229 , and suppose @xmath270 for some set @xmath271 . in forming @xmath163",
    ", we must have short - cut @xmath272 and some other edge @xmath273 to form an edge @xmath175 .",
    "observe that @xmath274 , else @xmath267 would continue to be the head of @xmath275 .",
    "moreover , @xmath276 by the discussion in claim  [ cl : forest - prop ] , one of @xmath272 and @xmath273 must lie on the cycle formed when we merged two supernodes in @xmath182 , as in step  4 of ` updateforest ` .",
    "further , if @xmath277 was the edge removed from this cycle , by the rule in step  5 we get that the potential @xmath278 is the maximum potential of any edge on this cycle , and hence @xmath279 .",
    "hence we want to `` charge '' this edge @xmath280 to @xmath281 ( which has potential at least @xmath211 ) .",
    "however , up to three edges from @xmath259 may charge to @xmath277 : this is because there can be at most three short - cut operations in any iteration ( one from step  3 and two from step  6 ) .    in both cases ,",
    "we ve shown the presence of at least @xmath210 edges in @xmath205 of potential @xmath211 , which completes the proof of theorem  [ thm : charge ] .",
    "let us now abstract out some properties used in the above analysis , so that we can generalize the analysis to a broader class of algorithms for steiner forest .",
    "this abstraction is used to show that variants of the above algorithm , which are presented in section  [ sec : timed - version ] and in appendix  [ sec : projected ] , are also @xmath282-approximations .",
    "consider an algorithm @xmath22 which maintains a set of supernodes , where a supernode corresponds to a set of terminals , and two different supernodes correspond to disjoint terminals .",
    "initially , we have one supernode for each terminal .",
    "further , a supernode could be active or inactive .",
    "once a supernode becomes inactive , it stays inactive .",
    "now , at each iteration , the algorithm picks two active supernodes , and replaces them by a new supernode which is the union of the terminals in these two supernodes ( the new supernode could be active or inactive ) .",
    "note that the iteration when a supernode becomes inactive is arbitrary ( depending on the algorithm @xmath22 ) .",
    "as in the case of gluttonous algorithm , let @xmath117 be the final clustering produced by the algorithm @xmath22 , and @xmath192 be a _ tree _ solution to a steiner forestinstance @xmath283 .",
    "let @xmath156 be the set of supernodes at the beginning of iteration @xmath154 of @xmath22 .",
    "for an iteration @xmath154 , let @xmath284 be the minimum distance ( in the metric @xmath174 ) between any two active supernodes in @xmath156 .",
    "claim  [ clm : close - mono ] gives the following fact .",
    "[ fact : gen ] the quantity @xmath284 forms an ascending sequence with respect to @xmath154 .",
    "now theorem  [ thm : one - tree - is - cheap ] generalizes to the following stronger result .",
    "[ cor : one - tree ] for any tree solution @xmath192 to an instance @xmath53 , @xmath285    an important remark : this corollary is not making any claim about the _ merging cost _ of @xmath22 ; at any iteration @xmath22 could be connecting two active supernodes which are much farther apart than @xmath284 .",
    "we now give a version of the gluttonous algorithm @xmath286where supernodes are deemed active or inactive based on the current time and not whether the terminals in the supernode have paired up with their mates .",
    "this version will be useful in getting a strict cost - sharing scheme .",
    "the algorithm @xmath286is very similar to the gluttonous algorithm except for what constitutes an active supernode .",
    "again , we shall maintain clustering of terminals into supernodes ; and at each iteration @xmath154 , we shall merge the two closest active supernodes in the current metric .",
    "this will ensure that the merging distances are monotone (  ) .",
    "therefore , we can divide the iterations of the algorithm into _ stages _ , where stage @xmath34 denotes the iterations where the merging distance lies in the range @xmath287 .    for a terminal @xmath31 ,",
    "define @xmath288 as @xmath289 ( recall that @xmath15 denotes the original metric ) . for a supernode @xmath60 ,",
    "define its _ leader _ as the terminal in @xmath60 with highest level ; in case of ties , choose the terminal with the smallest index among these .",
    "a supernode @xmath60 will be active during stage @xmath34 of the algorithm if the leader of @xmath60 has level at least @xmath34 ( otherwise it is declared inactive ) .",
    "note that a supernode @xmath60 can remain active even if for every terminal in it , its mate also lies in @xmath60 .",
    "however , we can show that even this algorithm has constant approximation ratio .",
    "we will again maintain a clustering of terminals ( into supernodes )  let @xmath156 be the clustering at the beginning of iteration @xmath154 .",
    "initially , at iteration @xmath177 , @xmath164 is the trivial clustering ( consisting of singleton sets of terminals ) .",
    "we maintain a set of edges @xmath73 will be the set of edges bought by the algorithm .",
    "initially , @xmath290 .",
    "we shall use @xmath207 to denote the closest distance ( in the metric @xmath174 ) between two active supernodes in @xmath156 .",
    "our algorithm will only merge active supernodes , and an inactive supernode will not become active in future iterations .",
    "it follows that @xmath207 can not decrease with @xmath154 ( fact  [ fct : dist - mono ] ) .",
    "this allows us to divide the execution of the algorithm into _",
    "stages_. stage @xmath34 consists of those iterations @xmath154 for which @xmath207 lies in the range @xmath287 ( the initial stage belongs to stage 0 , because we can assume w.l.o.g .   that the minimum distance between the terminals is 1 ) .    for a terminal @xmath31 ,",
    "define @xmath291 note that distances in this definition are measured in the original metric @xmath15 . for a supernode @xmath60 ,",
    "define its _ leader _ as the terminal in @xmath60 whose distance to its mate is the largest ( and hence has the largest level ) ; in case of ties , choose the terminal with the smallest index among these .",
    "we shall use @xmath292 to denote the clustering at the beginning of stage @xmath34 ( note the change in notation with respect to the clustering at the beginning of an iteration @xmath154 , which will be denoted by @xmath156 .",
    "so , if @xmath5 denotes the first iteration of stage @xmath34 , then @xmath292 is same as @xmath293 ) .",
    "now we specify when a supernode becomes inactive .",
    "a terminal @xmath31 is _ active _ at the beginning of stage @xmath34 if @xmath294 .",
    "a supernode @xmath60 will be _ active _ at the beginning of a stage @xmath34 if @xmath295 .",
    "observe that supernodes do not become inactive _ during _ a stage ",
    "if a terminal is active at the beginning of a stage , it remains active during each of the iterations in this stage .    by the definition of a stage",
    ", the algorithm will satisfy the invariant that the distance between any two active supernodes in @xmath292 ( in the metric @xmath296 ) is at least @xmath297 . during stage @xmath34",
    ", the algorithm repeatedly performs the following steps in each iteration @xmath154 : pick any two arbitrary pair of active supernodes @xmath298 which are at most @xmath299 apart ( in the metric @xmath174 ) .",
    "further , we take any such @xmath130-@xmath191 path of length at most @xmath299 ( in the graph induced by the metric @xmath174 on the vertex set @xmath156 ) and add the edges ( which go between supernodes ) to @xmath73 .    stage  @xmath34 ends when the merging distance between all remaining active supernodes is at least @xmath299 .",
    "observe that when the algorithm stops , we have a feasible solution  indeed , each terminal @xmath31 will merge with its mate @xmath300 by the end of stage @xmath301 .",
    "at the end , output a maximal acyclic subgraph of @xmath73 .    the analysis of @xmath286goes along the same lines as that of the gluttonous algorithm .",
    "the analog of theorem  [ thm : one - tree ] is as follows :    [ thm : one - tree - timed ] let @xmath123 be an optimal solution to the steiner forestinstance @xmath51 .",
    "let clustering @xmath117 be produced by some run of the @xmath286algorithm .",
    "there exists another solution @xmath98 for instance @xmath53 such that    @xmath302 , and    @xmath98 is faithful to the clustering @xmath117 .",
    "the proof is very similar to that of theorem  [ thm : one - tree ] , where we look over the run of @xmath286again to alter @xmath97 into @xmath98 .",
    "since @xmath286makes some arbitrary choices , we make the same choices consistently in this proof .",
    "we ensure very similar invariants :    * the cost of edges in @xmath303 is at most @xmath304 , and * at any point in time , the forest @xmath98 is faithful to the current clustering @xmath63 .",
    "observe the extra factor of @xmath305 in invariant  ( a ) . again",
    ", let two active supernodes @xmath130 and @xmath191 be merged in some stage @xmath34 , and let @xmath18 and @xmath19 be the leaders of these supernodes respectively .",
    "the argument in case  i remains unchanged . in case  ii ,",
    "let @xmath142 and @xmath306 be the trees containing @xmath18 and @xmath19 respectively .",
    "being in stage @xmath34 , we know that @xmath307 , since they are both still active , and that the distance between @xmath130 and @xmath191 in the current metric is at most @xmath299 , since all merging costs in stage  @xmath34 lie between @xmath297 and @xmath299 .",
    "so the cost of connecting @xmath142 and @xmath145 is at most @xmath308 the rest of the argument remains unchanged .",
    "[ thm : tg - approx ] the @xmath286algorithm is a @xmath309-approximation algorithm for steiner forest , where @xmath310 . @xmath311 .",
    "consider a solution @xmath98 which is faithful with respect to the final clustering produced by the @xmath286algorithm .",
    "suppose there are @xmath312 iterations during stage @xmath34 .",
    "then the total merging cost of the algorithm is at most @xmath313 .",
    "we would like to use corollary  [ cor : one - tree ] .",
    "let @xmath98 consist of the trees @xmath314 .",
    "for a tree @xmath315 , and a stage @xmath34 , let @xmath316 denote the iterations when we merge two supernodes with terminals belonging to the tree @xmath317 ( note that the faithfulness property implies that there will be such a tree for each iteration of the algorithm ) .",
    "let @xmath318 denote the cardinality of @xmath316 . clearly , @xmath319 .",
    "for an iteration @xmath154 , and index @xmath320 , let @xmath321 denote the supernodes in @xmath156 with terminals belonging to @xmath322 .",
    "define @xmath323 as the closest distance ( in the metric @xmath174 ) between any two active supernodes with terminals belonging to @xmath322 . if the iteration belongs to stage @xmath34 , then @xmath324 . using corollary  [ cor : one - tree ] , we get @xmath325 the result now follows from theorem  [ thm : one - tree - timed ] .",
    "an essentially equivalent way to state the @xmath286algorithm is as follows . for a stage @xmath34 ,",
    "let @xmath326 denote the metric @xmath296 corresponding to the clustering at the beginning of stage @xmath34 .",
    "construct an auxiliary graph @xmath327 with vertex set being the set of supernodes in @xmath292 , and edges between two vertices if the two corresponding supernodes are active and the distance between them is at most @xmath299 in the metric @xmath326 . pick a maximal acyclic set of edges @xmath328 in this auxiliary graph @xmath327 .    for each edge @xmath329 , merge the supernodes @xmath74 .",
    "hence the clustering @xmath330 at the end of stage @xmath34 is obtained by merging together all the supernodes that fall within a connected component of the subgraph @xmath331 .",
    "for each edge @xmath329 , add edges corresponding to a path of length @xmath332 in @xmath326 to a set of edges @xmath333 .",
    "finally , output a maximal sub - forest of the edges @xmath334 added during this process .",
    "one can now check that this algorithm is equivalent to the @xmath286algorithm as described above ; the key observation is that because of the definition of the timed algorithm , an active terminal in stage  @xmath34 stays active throughout the stage , and does not become inactive partway through it .",
    "more formally , we have the following observation .",
    "[ fact : equiv ] consider an execution of the @xmath286algorithm on an input @xmath53 .",
    "then one can define graphs @xmath327 and @xmath328 for each stage @xmath34 such that the set of supernodes at the beginning of stage @xmath34 in the above algorithm is same as that of the @xmath286algorithm .",
    "further , the two algorithms pick the same set of edges in each stage .",
    "a _ cost - sharing _ method is a function @xmath40 mapping triples of the form @xmath335 to the non - negative reals , where @xmath336 is an instance of the steiner forest problem , and @xmath337 .",
    "we require the cost - sharing method to be _ budget - balanced _ : if @xmath97 is an optimal solution to the instance @xmath336 then @xmath338    we will consider _ strict _ cost - shares ; these are useful for several problems in network design ( see details in the introduction ) .",
    "there are two versions of strictness : uni - strictness , and strictness .",
    "uni - strict cost - shares for steiner forest were given by  @xcite , whereas strictcost shares for steiner forest have remained an open problem .",
    "we show how to get both using the @xmath286algorithm .",
    "[ def : strict ] given an @xmath339-approximation algorithm @xmath22 for the steiner forest problem , a cost sharing @xmath40 is called _ @xmath340-uni - strict _ with respect to @xmath22 if for all demand pair @xmath341 , the cost share @xmath342 is at least @xmath343 times the distance between @xmath31 and @xmath32 in the graph @xmath344 , where @xmath76 is the forest returned by algorithm @xmath22 on the input @xmath345 .",
    "our objective is to find an algorithm @xmath22 and the associated cost share @xmath40 such that the parameters @xmath339 and @xmath340 are both constants .",
    "let the constant @xmath309 denote the approximation ratio of the algorithm @xmath286 .",
    "the cost - sharing method is simple : for a terminal @xmath31 , let @xmath346 be the largest value such that @xmath31 is a leader in stage @xmath346 _ and _ its supernode is merged with some other supernode during this stage ( note that a supernode can go from being active in the beginning of a stage to becoming inactive in the next stage without merging with any supernode ; this can happen because all terminals in it become inactive in the next stage ) .",
    "then @xmath347    the algorithm @xmath22 is a slight variant on the @xmath286algorithm .",
    "given an instance @xmath336 , run the algorithm @xmath286on this instance to get forest @xmath76 .",
    "now merge some of the trees in @xmath76 as follows .",
    "recall that the width of each tree @xmath17 in @xmath76 is defined to be @xmath348 , where @xmath349 denotes the distance between @xmath31 and @xmath32 in the tree @xmath17 .",
    "while there are trees @xmath350 such that @xmath351 , connect @xmath352 by a path of length @xmath353 to get a tree @xmath17 , and update @xmath354 .",
    "here , @xmath353 denotes the minimum over all pairs @xmath355 of @xmath356 .",
    "we now prove that the cost sharing method @xmath40 is @xmath340-uni - strictwith respect to @xmath22 , where @xmath340 is a constant .",
    "recall that @xmath76 denotes the forest returned by the algorithm @xmath22 .    to begin ,",
    "observe that the algorithm @xmath22 is also a constant - factor approximation .",
    "[ lem : a - is - good ] the algorithm @xmath22 is an @xmath357-approximation for steiner forest .",
    "let @xmath358 be the forest returned by the @xmath286algorithm ( called by @xmath22 ) .",
    "consider the potential @xmath359 .",
    "since the width of each tree is at most the cost of its edges , and since @xmath286was a @xmath309-approximation , this potential is at most @xmath357 times the optimal cost .",
    "now , observe that whenever @xmath22 merges two trees of this forest , the potential of the new forest does not increase .",
    "therefore , the potential of the forest @xmath76 is also at most @xmath360 times the optimal cost .",
    "[ lem : cost ] the function @xmath40 is a budget - balanced cost sharing method .",
    "we need to prove the inequality  ( [ eq : cost - share ] ) . to do this ,",
    "let us run @xmath286and `` charge '' the cost of merging two active supernodes to the leaders of the respective clusters  charge half of the distance between these two supernodes to the leaders of each of these supernodes . clearly , the total charge assigned to the terminals is equal to the total cost paid by the algorithm @xmath286 , which at most @xmath361 .",
    "finally , we make the observation that each terminal @xmath31 is charged at least @xmath309 times the cost share ( since it is charged at least @xmath362 in stage @xmath346 ) to complete the proof .    to prove the uni - strictness property , fix a terminal pair @xmath341 , and consider two instances : @xmath363 and @xmath364 .",
    "for instance @xmath53 , let @xmath292 denote the set of supernodes at the beginning of stage @xmath34 ; let @xmath365 be the corresponding set for @xmath366 .",
    "let @xmath326 and @xmath367 denote the metrics @xmath296 and @xmath368 respectively .",
    "recall that @xmath369",
    ".    the following claim will be convenient to understand the behavior of @xmath286 .",
    "[ lem : timed - supernode ] consider stage @xmath34 in the execution @xmath286on the instance @xmath53 .",
    "define a graph @xmath370 on the vertex set @xmath292 , with an edge between two active supernodes @xmath371 if there is a path of length at most @xmath299 between them in @xmath326 that does not contain any other active supernode as an internal node .",
    "if the connected components of @xmath370 are @xmath372 , then @xmath330 has @xmath373 supernodes ",
    "one supernode for each @xmath374 ( formed by merging the supernodes in @xmath374 ) .",
    "the statement is essentially the same as fact  [ fact : equiv ] except that in the graph @xmath327 ( defined in section  [ sec : equiv - timed ] ) , we join two active supernodes @xmath371 by an edge if the distance between them in the metric @xmath326 is at most @xmath299 , whereas here in the graph @xmath370 , we wish to have a path of length at most @xmath299 with no internal vertex being an active supernode .",
    "we claim that the connected components in the two graphs are the same , and hence , the statement in the lemma follows .",
    "clearly , an edge @xmath375 is present in @xmath327 as well . now , consider an edge @xmath376 in @xmath327 .",
    "let @xmath144 be the shortest path of length at most @xmath299 between @xmath70 and @xmath71 in the metric @xmath326 .",
    "let the active supernodes on this path be @xmath377 ( in this order ) .",
    "then @xmath370 has edges @xmath378 for @xmath379 .",
    "therefore @xmath380 and @xmath381 are in the same connected component of @xmath370 .",
    "this proves the desired claim .",
    "[ thm : nesting ] for @xmath382 , let @xmath383 and @xmath384 be the supernodes in @xmath292 containing @xmath31 and @xmath32 respectively .",
    "the following hold :    1 .",
    "if @xmath385 , we can arrange the supernodes in @xmath365 as @xmath386 such that @xmath387 @xmath388 for some @xmath389 .",
    "moreover , @xmath390 . if @xmath391 , we can arrange the supernodes in @xmath365 as @xmath386 such that @xmath392 for some @xmath393 . also , @xmath394 .",
    "2 .   suppose @xmath383 and @xmath384 are distinct supernodes .",
    "then for any terminal @xmath395 , @xmath396 . similarly , for any @xmath397 , @xmath398 .",
    "3 .   suppose @xmath399 .",
    "then , @xmath400 .",
    "we induct on @xmath34 . at the beginning ,",
    "all clusters are singletons , so the base case is easy . for the inductive step , suppose the statement of the theorem is true for some @xmath401 .",
    "assume that @xmath402 , the other case is similar .",
    "apply lemma  [ lem : timed - supernode ] to stage @xmath34 in both @xmath53 and @xmath366 , and let @xmath370 and @xmath403 be the corresponding graphs on the vertex sets @xmath292 and @xmath365 ( as defined in lemma  [ lem : timed - supernode ] ) .",
    "we know that the supernodes of @xmath330 and @xmath404 correspond to the connected components of these graphs ; we now use this information to prove the induction step .    by the induction hypothesis ,",
    "the supernodes in @xmath292 can be labeled @xmath405 ; moreover , we can define a map @xmath406 as follows : @xmath407 suppose there is an edge between @xmath408 and @xmath409 in @xmath410 . by the definition of @xmath370",
    ", both are active supernodes , and the length of the shortest path between them in the metric @xmath367 is at most @xmath299 .",
    "this path has no greater length in the metric @xmath326 , since the supernodes in @xmath292 are unions of supernodes in @xmath365 .",
    "this means there is a path between @xmath411 and @xmath412 in @xmath370 , i.e. , the clustering @xmath404 is a refinement of @xmath330 ( because these clusterings are determined by the connected components of the corresponding graphs ) .    now consider an edge @xmath173 in @xmath370 . for",
    "the first part of the theorem , suppose @xmath413 where both @xmath414 .",
    "if @xmath144 is the corresponding path in @xmath326 between these two supernodes , then @xmath144 can not contain @xmath383 or @xmath384 as an internal node ( because it does not contain any active supernodes as internal nodes , and both @xmath415 are active ) .",
    "but then the length of @xmath144 remains unchanged in @xmath367 , and we have the corresponding edge @xmath416 in @xmath410 as well .",
    "this means that all the connected components of @xmath370 not containing @xmath383 or @xmath384 also form connected components in @xmath410 .",
    "combined with the fact that @xmath404 is a refinement of @xmath330 , this proves the part  ( a ) of the theorem for the case @xmath385 .",
    "( the proof for the other case is similar . )    for part  ( b ) , let @xmath417 be the connected component of @xmath370 which contains the supernode @xmath383 ( as a vertex ) .",
    "so all the supernodes in @xmath417 will merge to form a single supernode of @xmath330 .",
    "as argued in the paragraph above , any edge in @xmath417 which is not incident with @xmath383 is also present in @xmath410(recall that we are assuming @xmath384 is not one of the vertices in @xmath417 ) .",
    "let @xmath19 be a terminal in a supernode @xmath90 in @xmath417 .",
    "let the path from @xmath383 to @xmath90 in @xmath417 be @xmath418 .",
    "since the edges @xmath419 belong to @xmath410 as well , @xmath420 will lie in the same supernode in @xmath404 .",
    "therefore , @xmath421 , where the term @xmath422 is present to account for the distance between @xmath31 and the terminal in @xmath383 which is closest to @xmath423  this distance can be at most @xmath422 by the induction hypothesis .    for part  ( c ) , consider the last stage @xmath34 such that the supernodes @xmath383 and @xmath384 are distinct ( so the result in part  ( b ) applies to this stage ) .",
    "the same argument as above applies except that when we consider the path from @xmath383 to @xmath384 in the component of @xmath370 containing them , we will have to account for the first and the last edges in this path .",
    "we are now ready to prove the uni - strictness of the cost - shares .",
    "we run @xmath286on the instance @xmath53 to get the cost shares , and let the cost share for @xmath424 be as in  ( [ eq : chi ] ) .",
    "now let @xmath358 be the forest returned by the algorithm @xmath22 on the instance @xmath366 . recall that @xmath425 denotes the metric @xmath15 with the connected components in @xmath358 contracted to single points .",
    "[ lem : costshare ] the distance between @xmath31 and @xmath32 in @xmath425 is at most @xmath426 .",
    "let @xmath427 .",
    "suppose @xmath428 , then the claim is trivial because @xmath429 ; hence consider the case where @xmath430 .",
    "let @xmath383 and @xmath384 denote the supernodes containing @xmath31 and @xmath32 in clustering @xmath431 respectively .",
    "there are two cases .",
    "the first case is when @xmath383 is same as @xmath384 . in this case ,",
    "part  ( c ) of theorem  [ thm : nesting ] implies that @xmath432 .",
    "the distance in metric @xmath433 can only be smaller .",
    "the other case is when @xmath383 and @xmath384 are different .",
    "note that @xmath383 will be merged with another supernode in some stage during or after stage @xmath434 ( eventually the @xmath31 and @xmath300 will end up in the same supernode ) .",
    "since @xmath435 , it follows from the definition of @xmath346 that @xmath31 is not the leader of @xmath383 .",
    "similarly , @xmath300 is not the leader of @xmath384 .",
    "let the leaders of @xmath383 and @xmath384 be @xmath436 and @xmath437 respectively . by theorem  [ thm : nesting](b ) , we know that @xmath438 and @xmath439",
    ". consequently , @xmath440 where the last inequality follows because @xmath441 .",
    "let @xmath442 be the final forest produced by @xmath443 on the instance @xmath366 ; recall that @xmath358 is obtained from @xmath442 by merging together some of these trees .",
    "let @xmath444 and @xmath445 be the trees in @xmath442 which contain @xmath436 and @xmath437 respectively . since the distance between @xmath436 and @xmath437 is already at most @xmath446 at the beginning of stage @xmath447 , we know that @xmath448 , where @xmath425 denotes the metric @xmath449 with the trees in @xmath358 contracted .",
    "since @xmath31 lost its leadership to @xmath436 , it must be the case that @xmath450 ; thus @xmath451 ; a similar argument shows @xmath452 . since @xmath453 ,",
    "the algorithm @xmath22 would have merged @xmath444 and @xmath445 into one tree .",
    "this makes the distance @xmath454 and hence @xmath455 proving the claim .",
    "this shows that the cost of connecting @xmath424 in @xmath425 is at most @xmath456 times the cost share of @xmath424 , which proves the uni - strictness property .",
    "we now extend the previous cost sharing scheme to the more general _ strict _ cost sharing scheme .",
    "let @xmath40 be a budget - balanced cost sharing function for the steiner forest problem .",
    "as before , let @xmath22 be an @xmath339-approximation algorithm for the steiner forest problem .",
    "now consider the notion of strictcost shares ( the details for the construction of the simpler uni - strict cost shares are given in the full version ) .",
    "[ def : goup - strict ] a cost - sharing function @xmath40 is _ @xmath340-strict _ with respect to an algorithm @xmath22 if for all pairs of disjoint terminal sets @xmath457 lying in a metric @xmath15 , the following condition holds : if @xmath14 denotes @xmath458 , then @xmath459 is at least @xmath343 times the the cost of the optimal steiner forest on @xmath26 in the metric @xmath460 , where @xmath76 is the forest returned by @xmath22 on the input @xmath461 .",
    "in addition to the @xmath286algorithm , we will also need a timed primal - dual algorithm for steiner forest , denoted by ` timedpd ` .",
    "the input for the ` timedpd`algorithm is a set of terminals , each terminal @xmath31 being assigned an _ activity time _",
    "@xmath462 such that the terminal is _ active _ for all times @xmath463 .",
    "the primal - dual algorithm grows moats around terminals as long as they are active and buys edges that ensure that if two moats meet at some time @xmath154 , all the terminals in these moats that are active at time @xmath154 lie in the same tree .",
    "one can do this in different ways ( see , e.g. ,  @xcite ) ; for concreteness we refer to the ` kls ` algorithm of knemann et al .",
    "@xcite which gives the following guarantee :    [ thm : kls ] if @xmath464 for all terminals @xmath31 , then the total cost of edges bought by the timed primal - dual algorithm ` kls ` is at most @xmath465 .    following property can be shown for the ` kls ` algorithm :    [ lem : kls - scaling ] multiplying the activity times by a factor of @xmath466 to @xmath467 causes the ` kls ` algorithm to output another feasible solution of total cost at most @xmath468 .",
    "[ [ defining - chi - and - mathscra ] ] defining @xmath40 and @xmath22 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to define the cost - shares for the instance @xmath51 , run the algorithm @xmath286on @xmath53 .    during stage @xmath34 ,",
    "if we merge supernodes @xmath60 and @xmath130 with leaders @xmath31 and @xmath469 respectively , then we increment the cost - share of each of @xmath424 and @xmath470 by @xmath471 .",
    "the budget balance property follows directly from the analysis of the @xmath286algorithm .    the description of the algorithm as given in : in each stage @xmath34",
    ", we choose a collection @xmath328 of pairs of supernodes whose mutual distance ( in the metric @xmath296 ) lies in the range @xmath287 , merge each such pair of supernodes to get the new clustering ( and add edges in the underlying graph of at most as much length ) . for pair @xmath472 ,",
    "if @xmath473 are the leaders of @xmath474 respectively , increment the cost - share of each of @xmath424 and @xmath470 by @xmath471 . since the analysis of the @xmath286algorithm proceeds by showing that the quantity @xmath475 , the budget - balance property follows .",
    "the algorithm @xmath22 on input @xmath51 is simple : set the activity time @xmath476 for each terminal @xmath31 , and run the algorithm ` timedpd ` . following claim immediately follows from lemma  [ lem : kls - scaling ] and theorem  [ thm : kls ] , and the fact that @xmath477 .",
    "the following claim follows from a simple extension of theorem  [ thm : kls ] and the fact that @xmath478 .",
    "[ lem : alg - timed ] the algorithm @xmath22 is a @xmath223-approximation algorithm for steiner forest .      [",
    "[ proving - strictness-1 ] ] proving strictness + + + + + + + + + + + + + + + + + +    we now give an outline of the proof of the strictness property , leaving details to the full version .    given a set of demands @xmath14 in a metric space @xmath15 , and a partition into @xmath458 , we run the algorithm @xmath22 on @xmath25let",
    "@xmath479 be the forest returned by this algorithm , and let metric @xmath480 be obtained by contracting the edges of @xmath479 . to prove the strictness property , we now exhibit a `` candidate '' steiner forest @xmath481 for @xmath26 in the metric @xmath480 with cost at most a constant factor times @xmath482 the total cost - share assigned to the terminals in @xmath26 .    to define the forest @xmath481 connecting @xmath26",
    ", we now imagine running @xmath286on the entire demand set @xmath458 on the original metric @xmath15 , look at paths added by that algorithm , and choose a carefully chosen subset of these paths to add to @xmath481 .",
    "this is the natural thing to do , since such a run of @xmath286was used to define the cost - shares @xmath40 in the first place .",
    "ideally , whenever this algorithm connects two supernodes @xmath60 and @xmath130 , we will add a path between them ( in the forest @xmath481 ) unless there are terminals @xmath19 and @xmath483 in @xmath60 and @xmath130 respectively such that both @xmath19 and @xmath483 lie in the same tree of @xmath479 ( note that @xmath484 belong to @xmath25 ) .",
    "however , analyzing such a scheme directly is quite challenging .",
    "instead , we carefully match the runs of the following algorithms : @xmath286on @xmath458 , denoted by @xmath485 , and @xmath22 on @xmath25 . for any parameter @xmath154 , the run of @xmath22 , which is a moat growing algorithm , at time @xmath154 corresponds to the run @xmath485 when the merging distance is about @xmath154 .",
    "we now show that if @xmath485 merges supernodes @xmath60 and @xmath130 , then we will add a subset of the edges on the shortest path between @xmath60 and @xmath130 to the forest @xmath481 such that these edges correspond to the `` dual '' raised by the corresponding run of @xmath22 ( and so would have contributed towards the cost share of a terminal ) .",
    "details of the analysis can be found in the full version .",
    "recall that the algorithm @xmath22 on @xmath25 is just the ` timedpd`algorithm .",
    "we divide this algorithm s run into stages , where the @xmath486 stage lasts for the time interval @xmath487 ; the @xmath488 stage lasts for @xmath489 .",
    "let @xmath490 be the edges of the output forest @xmath479 which become tight during stage @xmath34 of this run , and @xmath491 be the set of moats at the beginning of stage @xmath34 .",
    "these moats are defined in the original metric @xmath15 .",
    "[ [ defining - a - candidate - forest - f_2 ] ] defining a candidate forest @xmath481 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to define the forest @xmath481 connecting @xmath26 , we now imagine running @xmath286on the entire demand set @xmath458 on the original metric @xmath15 , look at paths added by that algorithm , and choose a carefully chosen subset of these paths to add to @xmath481 .",
    "this is the natural thing to do , since such a run of @xmath286was used to define the cost - shares @xmath40 in the first place .",
    "recall the description of @xmath286from , and let @xmath485 denote this run of @xmath286on @xmath492 .",
    "we examine the run @xmath485 stage by stage : at the beginning of stage @xmath34 , the run @xmath485 took the current clustering @xmath292 , built an auxiliary graph @xmath327 whose nodes were the supernodes in @xmath292 and edges were pairs of active supernodes that had mutual merging distance at most @xmath299 , picked some maximal forest @xmath328 in this graph , merged these supernode pairs in @xmath328 , and bought edges in the underlying metric corresponding to paths connecting these supernode pairs .",
    "we show how to choose some subset of these underlying edges to add to our candidate forest  we denote these edges by @xmath493 .    in the following , we will talk about edges @xmath494 ( which are edges of the auxiliary graph @xmath327 ) and edges in the metric @xmath15 . to avoid confusion",
    ", we refer to @xmath495 as _ pairs _ and those in the metric as edges .",
    "what edges should we add to @xmath493 ?",
    "for that , look at the end of stage  @xmath34 of the run of @xmath22 on @xmath25 ; the primal - dual algorithm has formed a set of moats @xmath496 at this point .",
    "we define an equivalence relation on the supernodes in @xmath292 as follows .",
    "if the leaders of two supernodes @xmath497 both lie in @xmath25 , and also in the same moat of @xmath496 , we put @xmath60 and @xmath130 in the same equivalence class .",
    "now if we collapse each equivalence class by identifying all the supernodes in that class , the pairs in @xmath328 may no longer be acyclic in the collapsed version of @xmath327 , they may contain cycles and self - loops .",
    "consider a maximal acyclic set of pairs in @xmath328 , and denote the dropped pairs by @xmath498 .",
    "the set @xmath328 is now classified into three parts  ( see figure  [ fig : cost ] for an example ) :    * let @xmath499 be pairs @xmath500 for which at least one of @xmath501 belongs to @xmath26 .",
    "* let @xmath502 be pairs @xmath500 for which both of @xmath503 and @xmath504 belongs to @xmath25 .",
    "* of course , @xmath498 is the set of pairs @xmath505 dropped to get an acyclic set .    given this classification , the edges we add to @xmath493 are as follows . recall that in the run @xmath485 , for each pair @xmath506 , we had added edges connecting those two supernodes of total length at most @xmath299 .",
    "for each pair in @xmath507 , we now add the same edges to @xmath493 .",
    "we further classify these edges based on their provenance : the edges added due to a pair @xmath508 we call _ good edges _ , and those added due to a pair in @xmath502 we call _ bad edges_. observe that we add no edges for pairs in @xmath498 .    , and",
    "the grey regions denote the equivalence classes .",
    "let @xmath498 be the pairs @xmath509 .",
    "assume that leaders of @xmath510 and @xmath511 belong to @xmath26 ( the leaders of the rest of the supernodes must be in @xmath25 because the equivalence classes corresponding to these supernodes have cardinality larger than 1 ) .",
    "so , @xmath499 consists of pairs @xmath512 and @xmath502 consists of @xmath513 .",
    ", height=132 ]    this completes the construction of the set @xmath493 .",
    "the forest @xmath481 is obtained by taking the union of @xmath514 .",
    "the task now is to show ( a )  feasibility , that the edges in @xmath481 form a steiner forest connecting up the demands of @xmath26 in metric @xmath480 , or equivalently that @xmath515 is a steiner forest on the set @xmath516 , and ( b )  strictness , that the cost of @xmath481 is comparable to the cost shares assigned to the demands in @xmath26 .",
    "[ [ feasibility ] ] feasibility + + + + + + + + + + +    first , we show feasibility , i.e. , that @xmath515 connects all pairs in @xmath26 . observe that we took the run @xmath485 , and added to @xmath481 some of the edges added in @xmath485 .",
    "had we added all the edges , we would trivially get feasibility ( but not the strictness ) , but we omitted edges corresponding to pairs in @xmath498 .",
    "the idea of the proof is that such supernodes will get connected due to the other connections , and to the fact that we inflated the activity times in the ` timedpd`algorithm .",
    "let s give the formal proof , which proceeds by induction over time .    for integer @xmath34 ,",
    "define @xmath517 , and define @xmath518 similarly .",
    "the first claim relates the stages in the run @xmath485 of @xmath286@xmath519 to the stages in the run of ` timedpd ` .",
    "[ cl : corres ] if terminal @xmath520 is active at the beginning of stage @xmath34 in the run @xmath485 , then the moat containing @xmath31 remains active during stage @xmath34 of the run of @xmath521 on @xmath25 .    since @xmath520 is active in stage @xmath34 , @xmath294 . hence its activity time @xmath522 .",
    "since stage  @xmath34 for the timed primal - dual algorithm ends at time @xmath523 , the moat containing @xmath31 in ` timedpd`will be active at least until the end of stage @xmath34 .",
    "[ lem : moats ] let @xmath292 be the clustering at the beginning of stage @xmath34 in the run @xmath485 .",
    "then ,    for any @xmath524 , all terminals in @xmath60 lie in the same connected component of @xmath525 .    for every @xmath526",
    ", the terminals in @xmath527 lie in the same connected component of @xmath528 .",
    "we first show that if the statement  ( a ) is true for some stage @xmath34 , then the corresponding statement  ( b ) is also true ( for this stage ) .",
    "consider a pair @xmath529 .",
    "if @xmath530 , the edges we add to @xmath493 would connect the terminals in @xmath531 , as long as all the supernodes in @xmath292 formed connected components .",
    "but by the assumption , we know that edges in @xmath532 connect up each supernode in @xmath292 .",
    "consequently , terminals in @xmath527 lie in the same connected component of @xmath528 .",
    "this proves statement  ( b ) .",
    "we now prove statement  ( a ) by induction on @xmath34 . at the beginning of stage @xmath533",
    ", each supernode @xmath60 is a singleton and hence the statement is true .    now to prove the induction step for  ( a ) .",
    "it suffices to show that if @xmath534 then @xmath527 is contained in the same component in @xmath535 .",
    "we distinguish two cases .",
    "the first case is when @xmath60 and @xmath130 both lie in the same equivalence class that was used to construct @xmath498 .",
    "then @xmath536 and @xmath537 belong to @xmath25 and also to the same moat in @xmath496 , at the end of stage @xmath34 .",
    "since @xmath474 are active in stage @xmath34 of @xmath286(@xmath14 ) , both @xmath473 have level at least @xmath34 . by claim  [ cl : corres ]",
    "they remain active throughout stage  @xmath34 of ` timedpd ` . moreover , the end of that stage they share the same moat .",
    "hence , @xmath473 belong to the same moat when active  but recall that the ` timedpd`algorithm ensures that whenever two active terminals belong to the same moat they lie in the same connected component .",
    "hence @xmath538 must lie in the same connected component of @xmath539 . by the induction hypothesis ,",
    "the rest of @xmath474 are connected to their leaders in @xmath540 .",
    "hence @xmath474 are connected in @xmath541 ; indeed for each equivalence class , the supernodes that belong to it are connected using those edges .",
    "the second case is when for pair @xmath542 , the supernodes @xmath60 and @xmath130 do not fall in the same equivalence class , but the adding pair @xmath495 to @xmath543 would form a cycle when equivalence classes are collapsed . the argument here is similar : if the leaders are again @xmath473 , then the above arguments applied to each pair on the cycle , and to each equivalence class imply that @xmath31 and @xmath469 must be connected in @xmath544and therefore so must @xmath527 .",
    "since each pair @xmath545 is contained in some supernode at the end of the run @xmath485 , lemma  [ lem : moats ] implies that they are eventually connected in using @xmath515 as well .",
    "this completes the proof that @xmath515 is a feasible solution to the demands in @xmath26 .    [",
    "[ bounding - the - cost - of - forest - f_2 ] ] bounding the cost of forest @xmath481 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    finally , we want to bound the cost of the edges in @xmath481 by a constant times @xmath546 . if @xmath547 , then the total cost of bad edges is at most @xmath548 because the length of edges added for each connection in @xmath502 is at most @xmath299 .",
    "[ lem : goodcost ] the total cost of the edges in @xmath514 is at least @xmath549 .    for this proof , recall that we run the primal - dual process on the metric @xmath15 , and @xmath491 are the dual moats at the beginning of stage @xmath34",
    "let @xmath333 denote the set of tight edges lying inside the moats in @xmath491 .",
    "we prove the following statement by induction on @xmath34 : the total cost of edges in @xmath550 is at least @xmath551 .",
    "the base case for @xmath552 follows trivially because the @xmath553 is empty , and @xmath554 is also 0 .",
    "suppose the statement is true for some @xmath555 .",
    "now consider the pairs in @xmath502these correspond to pairs of supernodes @xmath495 whose leaders lie in @xmath25 .",
    "the pairs in @xmath502 form an acyclic set in the auxiliary graph @xmath327 .",
    "consider the set of supernodes which occur as endpoints of the edges in @xmath502 , and let @xmath556 be the set of terminals that are the leaders of these supernodes .",
    "now pick a maximal set of these supernodes subject to the constraint that all of them lie in different moats in @xmath496 ; i.e. , no two of them lie in the same equivalence class .",
    "let @xmath557 be the set of terminals that are leaders of this maximal set .",
    "in the example given in figure  [ fig : cost ] , @xmath558 , and we could define @xmath559 as @xmath560 .",
    "by the fact that @xmath502 is an acyclic set , we get @xmath561 .",
    "for any @xmath562 , let @xmath563 be the moat in @xmath491 containing @xmath31 . by construction ,    for each pair",
    "@xmath564 , the leaders of @xmath60 and @xmath130 lie in different moats in @xmath496",
    ".    for all @xmath565 , @xmath31 and @xmath469 belong to different moats in @xmath496 .",
    "also note that terminals in distinct moats of @xmath496 _ a fortiori _ lie in distinct moats in @xmath491 .",
    "now contract all the moats in @xmath491 in the metric @xmath15 .",
    "observe that all edges in @xmath566 were already tight by the end of stage @xmath555 , and hence get contracted by this operation .    by lemma  [ lem : moats](b ) , for each @xmath567 the edges in @xmath528 connect moat @xmath563 to some another moat @xmath568 for some @xmath569 ( corresponding to the pair in @xmath502 ) .",
    "since we contracted the moats in @xmath491 , the edges in @xmath518 connect @xmath563 to @xmath568 in this contracted metric .",
    "but any two moats @xmath570 are at least @xmath571 apart in this contracted metric ( because these moats do not meet during stage  @xmath34 of the primal dual growing process , else @xmath473 would share a moat in @xmath496 ) .",
    "therefore , if we draw a ball of radius @xmath572 around the moat @xmath563 in this contracted metric , this ball contains edges from @xmath518 of length at least @xmath572 .",
    "since these balls around the terminals in @xmath573 are all disjoint , the total length of all edges in these balls is at least @xmath574 all these edges lie in moats in @xmath496 but not within moats in @xmath491 , so we add these to the bound we get for @xmath575 from the induction hypothesis and complete the inductive step .",
    "[ thm : strict - cost ] the cost of edges in @xmath481 is at most @xmath576 times @xmath577 .    by lemma  [ lem : goodcost ] , the cost of edges in @xmath481 is at least @xmath578 . out of these",
    ", the bad edges have total cost at most @xmath579 , by  ( [ eq : badcost ] ) .",
    "so the cost of the good edges in @xmath481 is at least one third of the cost of all edges in @xmath481 .",
    "however , observe that good edges correspond to pairs @xmath580 for some @xmath34 , i.e. , this pair of supernodes was connected by these good edges in stage  @xmath34 of @xmath286 , and moreover , at least one of the leaders of @xmath60 and @xmath130 belong to a terminal pair in @xmath26 . by the construction of our cost shares",
    ", it follows the cost share of terminal pairs in @xmath26 is at least @xmath581 times the cost of the good edges .",
    "hence the cost of the forest @xmath481 is at most @xmath360 times the cost share of terminal pairs in @xmath26 , proving the theorem .",
    "we thank r.  ravi for suggesting the problem to us , for many discussions about it over the years , and for the algorithm name .",
    "we also thank chandra chekuri , jochen knemann , stefano leonardi , and tim roughgarden .",
    "the ( paired ) greedy algorithm picks , at each time the closest yet - unconnected source - sink pair @xmath424 in the current graph , and connects them using a shortest @xmath31-@xmath32 path in the current graph .",
    "a lower bound of @xmath6 for this algorithm was given by chen , roughgarden , and valiant  @xcite .",
    "we repeat this lower bound here for completeness .",
    "take a cubic graph @xmath582 with @xmath43 nodes and girth at least @xmath583 for constant @xmath584 ; see  @xcite for constructions of such graphs . fix a spanning tree @xmath17 of @xmath585 , and let @xmath586 be the non - tree edges .",
    "set the lengths of edges in @xmath587 to  @xmath45 , and the lengths of edges in @xmath73 to @xmath588 .",
    "let @xmath449 be a maximal matching in @xmath589 ; since @xmath585 and hence @xmath590 has maximum degree @xmath255 , this maximal matching has size at least @xmath591 .",
    "the demand set @xmath14 consists of the matching  @xmath449 .",
    "we claim that the paired - greedy algorithm will just buy the direct edges connecting the demand pairs . this will incur cost @xmath592 .",
    "the optimal solution , on the other hand , is to buy the edges of @xmath17 , which have total cost @xmath593 , which gives the claimed lower bound of @xmath6 .",
    "the proof of the claim about the behavior of paired - greedy is by induction .",
    "suppose it is true until some point , and then demand @xmath126 is considered . by construction , @xmath594 .",
    "we can model the fact that we bought some previous edges by zeroing out their lengths .",
    "now the observation is that for any path @xmath144 between @xmath18 and @xmath19 that is not the direct edge @xmath126 , if there are @xmath13 edges from @xmath73 on this path , then at most @xmath595 of them can be zeroed out .",
    "moreover , since the girth is @xmath213 , the number of edges on the path is at least @xmath596 .",
    "so the new length of the path @xmath144 is at least @xmath597 .",
    "this means the direct edge between @xmath67 is still the ( unique ) shortest path , and this proves the claim and the result .",
    "in this section , we consider a slightly different analysis of the gluttonous algorithm which does not rely on the faithfulness property developed in section  [ sec : near - optimal ] .",
    "we then use this analysis to show that a different gluttonous algorithm is also a constant - factor approximation .    as before , let @xmath97 denote an optimal solution to the steiner forestinstance @xmath51 , and let the trees in @xmath97 be @xmath598 .",
    "a supernode @xmath60 is a subset of terminals  note that we no longer require that the supernodes formed during the gluttonous algorithm should be contained in one of the trees of @xmath97 .",
    "let @xmath156 denote the clustering at the beginning of iteration @xmath154 .",
    "so @xmath164 consists of singleton supernodes .    for each index @xmath320 , @xmath599 , we can think of a new instance @xmath600 with set of terminals @xmath322 and metric @xmath601 ( the metric @xmath15 restricted to these terminals )",
    "we now define the notion of _ projected supernodes_. for each tree @xmath602 , we shall maintain a clustering @xmath321 corresponding to @xmath156  this should be seen as the _ restriction _ of the algorithm @xmath22 to the instance @xmath158 .",
    "a natural way of defining this would be @xmath603 for every @xmath604 .",
    "but it turns out that we will really need a refinement of the latter clustering .",
    "the reason for this is as follows : if the algorithm @xmath22 merges two active supernodes in the instance @xmath53 , the intersection of the two supernodes with @xmath322 may be inactive supernodes .",
    "but we do not want to combine two inactive supernodes in the clustering @xmath321 .",
    "we now define the clustering @xmath321 formally . for a supernode @xmath60 ,",
    "let @xmath605 denote @xmath603 .",
    "we say that @xmath605 is active if there is some demand pair @xmath606 such that @xmath607 , but @xmath608 .",
    "let @xmath609 denote the set of indices @xmath320 such that @xmath605 is active .",
    "for each iteration @xmath154 , we shall maintain the following invariants .",
    "* the clustering @xmath321 will be a refinement of the clustering @xmath610 .",
    "* for each ( active ) supernode @xmath604 such that @xmath605 is active , there will be exactly one active supernode @xmath611 in the clustering @xmath321 .",
    "initially , @xmath612 is the clustering consisting of singleton sets ( it is easy to check that it satisfies the two invariants above because @xmath164 also consists of singleton sets ) .",
    "suppose at iteration @xmath154 , the algorithm @xmath22 merges supernodes @xmath130 and @xmath191 to a supernode @xmath60 .",
    "if @xmath613 and @xmath614 are both active ( i.e. , @xmath615 ) , then we replace @xmath616 and @xmath617 by their union in the clustering @xmath321 to get @xmath618 . otherwise , @xmath618 is same as @xmath321 .",
    "it is easy to check that the above two invariants will still be satisfied .",
    "further , observe that we only merge two active supernodes of @xmath321 , and an inactive supernode never merges with any other supernode .",
    "let @xmath323 denote the minimum over two active supernodes @xmath619 of @xmath620 ( in case @xmath321 has only one active supernode , this quantity is infinity ) .",
    "fact  [ fact : gen ] implies that @xmath323 is ascending with @xmath154 .",
    "let @xmath284 denote the minimum over all @xmath320 of @xmath323 .",
    "clearly , @xmath284 is also ascending with @xmath154 .    whenever the algorithm merges active supernodes @xmath130 and @xmath191",
    ", we will think of merging the corresponding supernodes @xmath616 and @xmath617 in the instance @xmath600 for each value of @xmath320 ( provided @xmath621 ) .",
    "note that the latter merging cost may not suffice to account for the merging cost of @xmath130 and @xmath191 .",
    "for example , suppose @xmath622 , and @xmath623 and @xmath624 happen to be in different trees in @xmath97 , say @xmath625 and @xmath626 respectively .",
    "if @xmath627 is the new supernode , then @xmath628 and @xmath629 .",
    "so the merging costs in the corresponding instances is 0 , but the actual merging cost is positive .",
    "the main idea behind the proof is that we will pay for this merging cost later when the algorithm merges the supernode containing @xmath623 with some other supernode which has non - empty intersection with @xmath625 ( and similarly for @xmath624 ) .    in order to keep track of the unpaid merging cost ,",
    "we associate a _ charge _ with each supernode ( which gets formed during the gluttonous algorithm @xmath22 )  let @xmath630 denote this quantity . at the beginning of every every iteration @xmath154 and supernode @xmath604 , we will maintain the following invariant : @xmath631 where @xmath632 denotes the number of indices @xmath320 such that @xmath605 is active , i.e. , @xmath633 .",
    "now , we show how the quantity @xmath630 is updated .",
    "initially ( at the beginning of iteration 1 ) , we have a supernode @xmath634 for each terminal @xmath18 .",
    "the charge associated with each of these supernodes is 0 . clearly , the invariant condition above is satisfied .",
    "we prove this by induction on the iteration @xmath154 .",
    "suppose @xmath22 merges ( active ) supernodes @xmath130 and @xmath191 iteration @xmath154 , and let @xmath60 be the new supernode .",
    "if we consider a supernode @xmath70 other than @xmath60 in @xmath636 , then the statement follows easily .",
    "note that @xmath637 does not change .",
    "if @xmath70 were inactive before iteration @xmath154 , it will continue to be inactive at the end of iteration @xmath154 as well .",
    "if @xmath70 were active before iteration @xmath154 , then it will continue to be active be at the beginning of iteration @xmath638 as well .",
    "further , @xmath639 will not change ( and is at least 1 ) , and @xmath640 .",
    "so , we now consider the case for @xmath60 only .",
    "we get @xmath641 where the last inequality follows from the fact that @xmath642 .",
    "note that it is possible that @xmath643 , but @xmath644 .",
    "however , @xmath645 @xmath646 finally , observe that if @xmath60 is active , then @xmath647 .",
    "this implies that @xmath648 .",
    "therefore , the invariant holds in this case . if @xmath60 becomes inactive , then @xmath649 , and so , @xmath650 .",
    "again , the invariant continues to hold here .",
    "when the algorithm starts , @xmath651 for all supernodes @xmath60 ( consisting of singleton terminals ) .",
    "so , @xmath652 for all @xmath60 at time @xmath45 .",
    "when the algorithm terminates , @xmath653 for all supernodes ( since they are inactive ) . therefore , adding the inequality  ( eq : charge ) over all iterations @xmath154 , we get @xmath654 } \\cdot \\delta_{t , r},\\end{aligned}\\ ] ] where @xmath655}$ ] is the indicator variable which is 1 if and only if @xmath656 .",
    "the following claim follows easily .",
    "finally , corollary  [ cor : one - tree ] applied to the instance @xmath600 shows that @xmath660 } \\cdot \\delta_{t , r } \\leq 48 \\cdot { \\ensuremath{\\mathsf{cost}\\xspace}}({t^\\star}_r).\\ ] ] combining the above with claim  [ cl : mergingcost ] and inequality  ( [ eq : bounddel ] ) , we get        we apply the above result to analyze a slightly different version of the gluttonous algorithm . as before",
    ", the algorithm will maintain a set of supernodes , denoted by @xmath156 , at the beginning of iteration @xmath154 .",
    "further , it will maintain an edge - weighted graph @xmath661 with vertex set being @xmath156 .",
    "initially , at time @xmath177 , @xmath662 is just the initial graph @xmath585 on the vertices ( i.e. , terminals and steiner nodes ) . in iteration @xmath154",
    ", the algorithm picks the two active supernodes with smallest distance between them , where distances are measured with respect to the edge lengths in @xmath661 .",
    "let @xmath663 be the corresponding shortest path ( all internal vertices of @xmath663 must be inactive supernodes ) .",
    "we contract all the edges of @xmath663 to get the graph @xmath664 .",
    "the clustering @xmath636 will be be same as @xmath156 except for the fact that the supernodes corresponding to vertices of @xmath663 will get replaced by a new supernode which will be the union of all these supernodes .    for the above algorithm",
    ", the proof of theorem  [ thm : one - tree ] does not hold . more specifically , consider case in the proof where @xmath18 and @xmath19 happen to be in the same tree in @xmath98 . now",
    ", the algorithm may contract a path with end - points containing @xmath18 and @xmath19 respectively .",
    "further , the internal vertices of this path could correspond to inactive supernodes , and so , the new supernode will contain terminals outside this tree .",
    "but we can not pay for the cost of this path .",
    "however , we claim that the analysis of this section still applies .",
    "let @xmath665 denote the version of the gluttonous algorithm described above .",
    "it is no longer true that an inactive supernode does not merge with any other supernode . in each iteration , the algorithm may choose to merge two active supernodes along with several inactive supernodes .",
    "however , the clusterings @xmath321 will respect the former property .",
    "the clusterings @xmath321 will respect the invariants ( i ) and ( ii ) described above .",
    "when the algorithm @xmath665 merges active supernodes @xmath130 and @xmath191 ( along with possibly other inactive supernodes ) , and the index @xmath643 , we merge @xmath616 and @xmath617 in the clustering @xmath321 to get @xmath618 .",
    "it is easy to check that these two invariants are satisfied . the rest of the proof proceeds without any change .",
    "the key property that holds for this algorithm as well is that the merging cost ( i.e. , length of the shortest path ) in each iteration is at most @xmath284 ( defined in the proof above ) ."
  ],
  "abstract_text": [
    "<S> in the steiner forest problem , we are given terminal pairs @xmath0 , and need to find the cheapest subgraph which connects each of the terminal pairs together . in 1991 , agrawal , klein , and ravi , and goemans and williamson gave primal - dual constant - factor approximation algorithms for this problem ; until now the only constant - factor approximations we know are via linear programming relaxations .    </S>",
    "<S> in this paper , we consider the following greedy algorithmgiven terminal pairs in a metric space , a terminal is active if its distance to its partner is non - zero . </S>",
    "<S> pick the two closest active terminals ( say @xmath1 ) , set the distance between them to zero , and buy a path connecting them . </S>",
    "<S> recompute the metric , and repeat . </S>",
it has long been open to analyze this greedy algorithm . </S>",
    "<S> our main result : this algorithm is a constant - factor approximation .    </S>",
    "<S> we use this algorithm to give new , simpler constructions of cost - sharing schemes for steiner forest . </S>",
    "<S> in particular , the first `` strict '' cost - shares for this problem implies a very simple combinatorial sampling - based algorithm for stochastic steiner forest . </S>"
  ]
}