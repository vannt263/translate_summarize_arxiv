{
  "article_text": [
    "from the earliest days of computer science abstract machines have been used to model computations and categorise them according to the different resources they require . in this paper",
    "we consider a new type of machine that is suited to modelling computations whose sole or main effect is to permute data . unlike most classical machines these new machines have an infinite input alphabet whose symbols form the data that is to be permuted . despite this",
    "we shall show how the theory of finite automata can be deployed in their analysis .",
    "a _ permuting machine _ is a non - deterministic machine with the following properties :    1 .",
    "it transforms an input stream of distinct tokens into an output stream that is a permutation of the input stream , 2 .",
    "it is oblivious to the values of the input stream tokens , 3 .",
    "it has a hereditary property : if an input stream @xmath0 can be transformed into an output stream @xmath1 and @xmath2 is a subsequence of @xmath0 whose symbols transform into the subsequence @xmath3 of @xmath1 , then it is possible for @xmath2 ( if presented as an input to the machine in its own right ) to be transformed into an output stream @xmath3 .    * examples *    1 .",
    "a _ riffle shuffler _ divides the input stream into two segments and then interleaves them in any way to form the output stream .",
    "2 .   a _ stack _ receives members of the input stream and outputs them under a last - in - first - out discipline .",
    "a _ transportation network _ @xcite is any finite directed graph with a node to represent the input stream and a node to represent the output stream .",
    "the other nodes can each hold one of the input objects and the objects are moved around the graph until they emerge at the output node .",
    "the oblivious property of permuting machines allows us to name the input tokens @xmath4 ( in that order ) in which case the output will be some permutation of @xmath4 . in this way we can consider a permuting machine to be a generator of permutations ( usually , because of the non - determinism , generating many of each length ) .",
    "there is another point of view which is sometimes more useful where we consider the input stream to be some permutation of @xmath4 and ask whether the machine is capable of sorting the tokens ( so that they appear in the output stream in the order @xmath4 ) .",
    "these two viewpoints are equivalent since a machine can generate a particular permutation @xmath0 if and only if it can sort the permutation @xmath5 .    however , it is the hereditary property which allows non - trivial properties of permuting machines to be found because of a connection with the combinatorial theory of involvement and closed sets of permutations .",
    "formally , a permutation @xmath6 is said to be _ involved _ in another permutation @xmath0 ( denoted as @xmath7 ) if @xmath6 is order isomorphic to a subsequence of @xmath0 .",
    "for example @xmath8 is involved in @xmath9 because of the subsequence @xmath10 ( or the subsequence @xmath11 ) .",
    "we also say that @xmath0 _ avoids _",
    "@xmath6 if @xmath6 is not involved in @xmath0 .    permutation involvement has been an active area of combinatorics for over 10 years although it surfaced long before that in data structuring questions on stacks , queues and deques ( see @xcite ) .",
    "involvement is a partial order on the set of all permutations and is conveniently studied by means of order ideals called closed sets . a _ closed _ set @xmath12 of permutations is one with the property that @xmath13 and @xmath7 imply @xmath14 .",
    "the connection between permuting machines and closed sets is via the following result which follows from the definitions .",
    "the set of permutations that a permuting machine can generate , and the set that it can sort , are both closed .    in classical automata theory machines",
    "are associated with the languages they recognise .",
    "the above proposition suggests that the appropriate associated language of a permuting machine is the closed set of permutations that it can generate .",
    "we will study various permuting machines and their associated closed sets , and will show the utility of the permuting machine paradigm as a tool for advancing the theory of permutation involvement . before giving further details of our results we recall some key concepts about permutation involvement .    a closed set @xmath12 is , by definition , closed `` downwards '' .",
    "but that is equivalent to its complement @xmath15 being closed `` upwards '' ( @xmath16 and @xmath17 imply @xmath18 ) .",
    "obviously , @xmath15 is determined by its set of minimal permutations which we denote by @xmath19 and call the _ basis _ of @xmath12 .",
    "clearly @xmath20 is determined by its basis . by definition",
    ", @xmath19 is an antichain in the involvement order and conversely every antichain has the form @xmath19 for some closed set @xmath12 .",
    "the bases of the closed sets of permutations generated by the machines in examples @xmath21 and @xmath22 above are @xmath23 and @xmath24 respectively .",
    "the closed sets that arise in practice are generally infinite so it is clearly significant to know when a finite description is available by means of the basis .",
    "indeed , many combinatorial enumeration investigations begin from some particular finite basis and study properties of the closed set that it defines ( @xcite ) .",
    "we let @xmath25 denote the closed set whose basis is the antichain @xmath26 ; in other words @xmath27    given a closed set @xmath12 ( or a permuting machine that defines it ) we would like to be able to solve    * the decision problem : given a permutation @xmath0 decide whether @xmath13 ( in linear time if possible ) , * the enumeration problem : determine , for each length @xmath28 , the number of permutations in @xmath12 , * the basis problem : find the basis of @xmath12 , or at least determine whether the basis is finite or infinite .    in this paper",
    "we shall show how to exploit the classical theory of finite automata to make progress on these problems . to do this we have to overcome the difficulty that this theory deals with strings over a finite alphabet , whereas the strings of @xmath12 are written in the infinite alphabet @xmath29 .",
    "therefore we shall look for encodings of the permutations in @xmath12 as strings over a finite alphabet ( normally @xmath30=\\{1,2,\\ldots , k\\}$ ] ) and hope to prove that the language of such encodings is regular ( or to find conditions under which this is so ) .",
    "once we have proved the regularity of such a language we can appeal to two well - known facts : that regular languages have linear time recognisers , and that the generating function ( the formal power series whose coefficients give the number of sequences of each length ) is a rational function .    of course this approach can not be expected to succeed in all cases if for no other reason than that closed sets do not always have rational generating functions .",
    "nevertheless , in sections [ boundedsection ] and [ monotonesection ] , we shall give two wide classes of closed sets ( and permuting machines ) which show that the approach can have significant successes .",
    "in particular we produce infinite families of closed sets all of whose finitely based closed subsets have rational generating functions .",
    "our results therefore link to the many recent papers where particular closed sets have been enumerated ( for example , @xcite ) . in the final section",
    "we indicate how we hope our approach may be extended .",
    "we conclude this section by recalling some basic facts about transducers .    for our purposes",
    "a transducer is essentially a ( non - deterministic ) finite automaton with output symbols ( from an alphabet @xmath31 ) as well as input symbols ( from an alphabet @xmath32 ) .",
    "we allow @xmath33 inputs as well as @xmath33 outputs .",
    "a transducer defines a relation between @xmath34 and @xmath35 in a natural way . that is to say , for every path in the transducer from the starting state to one of the final states ,",
    "let the sequence of input labels be @xmath36 and the sequence of output labels @xmath37 ( all @xmath33 s being omitted of course ) ; then @xmath38 is a related pair .    in any transducer we can interchange the input and output symbols on each transition to obtain another transducer",
    "therefore    [ transpose ] if @xmath39 is a transducer relation so also is the transpose relation @xmath40 .",
    "let @xmath41 and define @xmath42    the main result we need from the theory of transducers appears as exercise 11.9 in @xcite .",
    "for completeness , and to establish notation , we include the proof .",
    "[ technical ] if @xmath39 is a transducer relation and @xmath43 is a regular subset of @xmath34 then @xmath44 is regular .    let @xmath45 be the set of states of the transducer , @xmath46 the transition function ( mapping @xmath47 into subsets of @xmath48 ) , @xmath49 the initial state , and @xmath50 the set of final states .",
    "let @xmath51 be a finite automaton recognising @xmath43 .",
    "suppose that @xmath51 has set of states @xmath52 , transition function @xmath53 , initial state @xmath54 , and set of final states @xmath55 .",
    "extend the definition of @xmath53 so that @xmath56 is a valid transition for all @xmath57 .",
    "now define an automaton @xmath58 as follows .",
    "the set of states is @xmath59 , the initial state is @xmath60 , and the set of final states is @xmath61 .",
    "the transitions are defined as follows .",
    "if there are transitions @xmath62 and @xmath63 ( where @xmath64 , @xmath65 , @xmath66 and @xmath67 ) then @xmath58 has a transition @xmath68    we prove that the new automaton recognises the set @xmath44 .",
    "let @xmath37 be any string in @xmath69 .",
    "by definition of @xmath44 we may choose a string @xmath70 with @xmath71 .",
    "then we have transducer transitions @xmath72 with @xmath73 witnessing that @xmath74",
    ". then we have @xmath75 , @xmath76 ( where , possibly , @xmath33 symbols may occur ) .",
    "we also have transitions of @xmath51 @xmath77 with @xmath78 witnessing that @xmath70 .",
    "then , by definition , we have transitions @xmath79 in @xmath58 demonstrating that @xmath37 is accepted by @xmath58 .",
    "we reverse this argument to get the converse .",
    "suppose that @xmath80 is accepted by @xmath58 via a sequence of transitions @xmath79 where @xmath76 with each @xmath81 .",
    "by definition of @xmath58 there exist @xmath82 and state transitions @xmath83 of the transducer , and transitions @xmath84 of @xmath51 .",
    "this proves that @xmath85 and @xmath71 as required .",
    "in this section we consider permuting machines as ` black boxes ' into which input tokens are inserted and from which they eventually emerge as output tokens .",
    "so , at any point of a computation there may be some tokens which are ` inside ' the machine ( in the machine s memory ) awaiting output .",
    "the chief hypothesis of this section is that , for some constant @xmath86 , the machine can contain no more than @xmath86 tokens at a time ( so if it is full to capacity it must output a token before further input is possible ) .",
    "such machines are said to be @xmath86-bounded .",
    "if we consider a @xmath86-bounded machine as a generator of permutations then no permutation of length @xmath87 that begins with @xmath87 can be generated from the input @xmath88 .",
    "thus the closed sets associated with @xmath86-bounded machines are subsets of the closed set @xmath89 whose basis consists of the @xmath90 permutations @xmath91 where @xmath92 ranges over all permutations of @xmath93 .",
    "we shall see shortly that permutations in @xmath89 may be encoded as words in a @xmath86-letter alphabet . anticipating this , we define a subset of @xmath89 to be regular if its encoded form is a regular set .",
    "we shall show that a closed subset @xmath12 of @xmath89 is regular if and only if its basis is regular .",
    "the proof of this result is , in principle , constructive in the sense that a recognising finite automaton for @xmath12 can be built from one that recognises its basis and vice versa .",
    "in the course of proving this result we shall prove that it is decidable whether a regular subset of @xmath89 is a closed subset .",
    "let @xmath94 be a permutation of length @xmath28 .",
    "its _ rank _",
    "encoding is the sequence @xmath95 where @xmath96 is the rank of @xmath97 among @xmath98 .",
    "obviously , @xmath99 if and only if @xmath100 has no subsequence of length @xmath87 whose first element is the largest in the subsequence and this is precisely the condition that @xmath101 for all @xmath102 .",
    "thus every subset of @xmath89 encodes as a subset of @xmath30^{\\ast}$ ] .",
    "[ regularomega ] @xmath89 is regular .",
    "it is easy to see that a word @xmath103 is the encoding of some permutation if and only if @xmath104 ( and , if this condition holds , the permutation can readily be calculated ) .",
    "in fact , for @xmath105^{\\ast}$ ] the above inequalities may fail to hold only for @xmath106 .",
    "let @xmath55 be the set of all words of length at most @xmath107 for which ( [ eq5 ] ) does not hold .",
    "we now have @xmath108^\\ast \\setminus [ k]^\\ast f,\\ ] ] which is a regular set .",
    "consider the closed subset @xmath12 of @xmath109 whose basis is @xmath110 .",
    "the first two basis elements ensure that , indeed , @xmath111 so the permutations of @xmath12 encode as words in the alphabet @xmath112 and end with a @xmath21 .",
    "it is readily checked that the third basis element restricts these words by prohibiting consecutive occurrences of the symbol @xmath22 .",
    "the set of words that do contain consecutive @xmath22s is described by the regular expression @xmath113^{\\ast}22[2]^{\\ast}$ ] and so is regular .",
    "however @xmath114 is the complement of this regular set within the regular set @xmath115 and so is also regular .",
    "thus @xmath12 is a regular closed set .",
    "the generating function of @xmath116 is well - known to be @xmath117 and , since @xmath50 is one - to - one , this is also the generating function of @xmath118 .",
    "this easy example serves to illustrate that the condition of avoiding a permutation translates into restrictions on encodings although they are generally much more complicated than the ones above . the argument that proves regularity is a very special case of more general arguments to come .",
    "transportation networks are another source of examples .",
    "theorem 1 of @xcite proves that the closed sets associated with these are all regular .",
    "that paper also contains an example to show that regular closed sets need not be finitely based .",
    "we also note that not every closed subset of @xmath89 is regular . indeed , as shown in @xcite , there are uncountably many closed subsets in @xmath89 , if @xmath119 ; but there are only countably many regular languages over @xmath30 $ ] .",
    "let @xmath120 be a permutation in @xmath89 and let @xmath121 be its rank encoded form .",
    "let @xmath122 be the permutation obtained from @xmath6 by deleting @xmath97 ( and relabelling appropriately ) and let @xmath123 be its encoded form .",
    "we put @xmath124 call this the @xmath102th derivative of @xmath125 .",
    "the process of passing from @xmath125 to @xmath126 is called _ deleting a letter _ from @xmath125 .",
    "we shall show how this may be done without `` looking at '' @xmath6 .",
    "let @xmath127 representing the permutation @xmath128 .",
    "then removing the @xmath129th element of @xmath6 results in the permutation @xmath130 whose encoding is @xmath131 .",
    "suppose we have to delete the @xmath102th letter from @xmath125 .",
    "we compute @xmath126 by scanning @xmath125 from the right .",
    "for the positions to the right of @xmath132 , each @xmath133 represents the rank of some element of @xmath6 among its successors , so these ranks will be unchanged by the deletion .",
    "therefore until we reach @xmath132 itself ( which we delete ) nothing changes .",
    "but for @xmath134 we need to know whether or not @xmath135 ( so that we can tell whether or not to reduce @xmath133 by @xmath21 ) .",
    "to do this we keep track of a variable @xmath136 defined as the rank of @xmath97 in the set @xmath137 ( the number of symbols in this set that are less than or equal to @xmath97 ) .",
    "clearly @xmath138 provided we have @xmath136 we can decide whether we should reduce @xmath133 .",
    "but , as the pointer @xmath139 moves to the left , we can easily update @xmath136 .",
    "clearly , if @xmath135 then @xmath140 ; and if @xmath141 then @xmath142 . we therefore get algorithm [ original ] .    [ original ] @xmath143 @xmath144 @xmath145 @xmath146    two easy observations make this into a finite state algorithm .",
    "the first is the natural programming trick to use a single variable @xmath147 in place of @xmath136 .",
    "the second looks odd as a programming trick but is nevertheless essential . when @xmath148 the first alternative of the * if * is not followed nor is it followed thereafter ; so we ` freeze ' @xmath136 to the value",
    "@xmath86 once it reaches @xmath86 .",
    "the result is algorithm [ modified ] .",
    "[ modified ] @xmath143 @xmath149 @xmath150 @xmath143 @xmath151    it is now easy to define a transducer for the relation @xmath152 the transducer begins in a ` picking ' state @xmath153 .",
    "once it picks a letter to delete it passes through a sequence of states numbered according to the variable @xmath147 in algorithm [ modified ] .",
    "the transducer for the case @xmath154 is shown in figure [ diagram ] .",
    "strictly speaking , what we have constructed is a transducer for a relation where the words in question are read from right to left . to avoid notational clutter",
    "we make the convention that all finite automata and transducers read their input from right to left .",
    "of course any conclusion that we reach of the form `` @xmath155 is a regular language '' is independent of the direction of reading since @xmath155 is regular if and only if its reverse is regular .",
    "deltrans.eepic    [ diagram ]    [ regularsets ] let @xmath156 be regular .",
    "then each of the following subsets is also regular , and finite automata recognising them are effectively computable from an automaton recognising @xmath155 .",
    "1 .   @xmath157 , 2 .",
    "@xmath158 , 3 .",
    "@xmath159 .",
    "the first set is @xmath160 and the second is @xmath161 both of which are regular by proposition [ technical ] .",
    "the third set is @xmath162 since regularity is preserved by complements the result follows again from proposition [ technical ] .",
    "again let @xmath120 be a permutation in @xmath89 and let @xmath121 be its rank encoded form . we shall generalise the process described in the previous subsection so that it now deletes _ any _ number of letters ( choosing which ones to delete non - deterministically again ) . from the resulting algorithm we shall be able to infer the existence of a transducer that defines the relation @xmath163 in the generalisation a right to left scan takes place as before . but",
    "now , rather than setting up a single variable @xmath147 when the deleted letter is met , we have to set up a different variable every time we come to a letter that is to be deleted .",
    "so , suppose we come to a letter @xmath164 that we intend to delete .",
    "then we define a variable @xmath165 ( whose initial value will be @xmath164 ) which will play the same role as the variable @xmath147 in the previous section . just as before when we process a letter @xmath133 ( either to delete it or compute the value of @xmath166 ) we shall have @xmath165 equal to the rank of @xmath167 in the set @xmath137 ( that is , @xmath165 is the number of symbols in this set that are less than or equal to @xmath167 ) .    processing a particular @xmath133",
    "is then done as follows :    1 .",
    "if @xmath133 is to be deleted we set up a variable @xmath168 as just mentioned and update any existing variables @xmath165 ; this updating is explained below .",
    "if @xmath133 is not to be deleted we must use the variables @xmath165 so far defined to compute the value of @xmath166 ; and we must update these variables as necessary ( see below ) .",
    "exactly as before , because of the meaning of each @xmath165 we have @xmath169 if and only if @xmath170 . therefore the number of @xmath171 s for which this occurs is the decrement that has to be applied to @xmath133 to obtain @xmath166 .    to do the updating of the variable @xmath165 (",
    "so that it has the appropriate value when @xmath139 is decreased by @xmath21 ) we notice that any @xmath171 for which @xmath170 means that @xmath165 is not changed ; otherwise it must be increased by @xmath21 .",
    "the behaviour of this algorithm when a symbol @xmath133 is processed is governed by the values of the set of variables @xmath165 . in order to turn the algorithm into a transducer to recognise the relation",
    "@xmath172 we have to demonstrate that only a fixed number of variables taking a fixed set of values is required .",
    "first , we have the same remark as before : any @xmath165 which reaches the value @xmath86 can never affect whether @xmath133 should be changed ; so such @xmath165 s can be discarded .",
    "the second remark is that the @xmath165 are ranks of _ different _ elements within the same set ( @xmath137 ) ; therefore the values @xmath165 are distinct and so we shall never have more than @xmath107 of them to store .    the state of the algorithm , as represented by the values of the @xmath165 , is therefore confined to one of a finite number of possibilities .",
    "a convenient way of representing the state is as a @xmath173 vector @xmath174 .",
    "we set @xmath175 if there is a variable @xmath165 in the current ` live ' set whose value is @xmath176 ; otherwise we set @xmath177 .",
    "this coding of state allows the automatic ` dropping ' of a variable @xmath165 once it reaches the value @xmath86 .",
    "translating the way in which the @xmath165 are handled , the updating of the variables @xmath178 when a symbol @xmath179 is processed is easily seen to be : @xmath180 if @xmath133 is to be deleted and @xmath181 otherwise .",
    "the value of @xmath166 in the latter case is @xmath182 .",
    "we summarise this discussion in    there is a transducer that defines the relation @xmath163    the state diagram for the transducer in the case @xmath154 is shown in figure [ invfig ] .",
    "invtrans.eepic    clearly @xmath183 is the relation of involvement on coded permutations and to reflect this we write @xmath184 if @xmath126 can obtained from @xmath125 by deleting any number of letters .      in this subsection we state and",
    "prove the main results on @xmath86-bounded classes .",
    "[ thm13 ] there is an algorithm which decides whether or not a given regular set @xmath185^\\ast$ ] can be expressed as @xmath186 for some closed set of permutations @xmath187 .",
    "first note that a set @xmath118 of permutations is closed if and only if for every @xmath188 and every @xmath189 , we have @xmath190 .",
    "thus , @xmath186 for some @xmath118 if and only if @xmath191 .",
    "all the three above sets are regular ( proposition [ regularomega ] and proposition [ regularsets ] ) , and the automata accepting them are known , and hence we can decide whether these inclusions hold .",
    "[ regularbasis ] a closed subset of @xmath89 is regular if and only if its basis is regular .",
    "let @xmath118 be a closed set with basis @xmath192 .",
    "suppose first that @xmath118 is regular . by definition @xmath192",
    "is the set of all permutations @xmath193 such that @xmath194 but @xmath190 for all @xmath189 .",
    "thus @xmath195 which is a regular set by proposition [ regularsets ] .    for the converse",
    "assume that @xmath192 is regular . by proposition",
    "[ technical ] the set @xmath196 is regular and so its complement @xmath197 is also regular .",
    "therefore @xmath198 is regular as well ; but this set is @xmath116 itself .",
    "the regular set operations that we have used ( intersection and complementation ) are effectively computable in the sense that automata to recognise the resulting languages can be constructed .",
    "therefore we have    there is an algorithm which , given an automaton accepting @xmath116 for some regular closed set @xmath118 , computes an automaton accepting @xmath199 , where @xmath26 is the basis of @xmath118 .",
    "the converse is also true .",
    "this , in turn has the following pleasing consequence :    it is decidable whether or not a given regular closed set is finitely based .",
    "the following are true for any closed set @xmath187 with a regular ( in particular , finite ) basis :    * the enumeration sequence for @xmath118 satisfies a linear recurrence with constant coefficients ; * membership in @xmath118 can be checked in linear time .",
    "\\(i ) @xmath118 is in one - to - one length preserving correspondence with @xmath116 which , being regular , has a rational generating function .",
    "\\(ii ) both testing for membership in a regular language and the process of encoding permutations are linear .",
    "the first part of this corollary provides a partial ( affirmative ) answer to a conjecture of gessel ( that all finitely based closed sets have holonomic generating functions ) .",
    "theorem [ regularbasis ] allows us to give explicit examples of non - regular closed sets .",
    "let @xmath200 be any infinite antichain of permutations contained in @xmath89 .",
    "an example of such an antichain with @xmath154 is given in @xcite .",
    "let @xmath201 be an infinite subset of @xmath200 such that    1 .",
    "@xmath202 , 2 .",
    "@xmath203 is not a finite union of arithmetic progressions .",
    "then @xmath204 is a non - regular infinite antichain and , by theorem [ regularbasis ] , defines a closed set that is not regular .",
    "in this section we consider permuting machines with an unbounded memory .",
    "the memory is represented by a two - way infinite tape on which is stored an input sequence @xmath4 , one token per tape square , and a reading head moves up and down the tape .",
    "we consider machines @xmath205 which operate under a fixed regime of forward and backward scans of the tape that is specified by a sequence @xmath206 of @xmath207 and @xmath208 signs .",
    "the machine carries out @xmath86 scans of the tape at the end of which all the input symbols will have been output .",
    "the @xmath102th scan is from left to right if @xmath209 and from right to left if @xmath210 . during each scan",
    "the machine will either skip over a symbol or output it ( sequentially onto a second tape say ) .",
    "such a computation can be described by a _ computation word _",
    "@xmath211 with @xmath212 ; the term @xmath213 gives the scan number on which symbol @xmath102 was output .",
    "[ segmentexample ] let @xmath214 so that @xmath205 does one left to right scan and two scans right to left .",
    "suppose that the input tape contains @xmath215 .",
    "then , supposing @xmath205 is subject to no further constraints it might , in its first scan output @xmath216 , in its second scan output @xmath217 , and in its final scan output @xmath218 .",
    "the result is the output permutation @xmath219 .",
    "notice that there is another computation by this machine that produces the same output permutation ( the first scan outputs @xmath220 , the second scan outputs @xmath221 , and the third scan outputs @xmath218 ) .",
    "the computation words for these two computations are @xmath222 and @xmath223 .",
    "clearly this machine can only output permutations which have a segmentation @xmath224 where @xmath36 is increasing and @xmath225 are decreasing .",
    "however , we do not exclude the possibility that , due to further constraints on the operation of the machine , not all permutations of this form can occur .    in the general case the ( closed ) set of permutations output by @xmath205",
    "is a subset of @xmath226 where each @xmath227 is an increasing sequence of symbols if @xmath209 and a decreasing sequence otherwise .",
    "the main results of this section are that the closed subsets of @xmath228 have linear time recognisers and rational generating functions .",
    "every computation word @xmath229 gives rise to a permutation @xmath230 . to be precise , if we regard @xmath229 as a function @xmath231{\\rightarrow}[k]\\ ] ] then @xmath232 is the permutation obtained by concatenating the sets @xmath233 through @xmath234 , with the @xmath102th set in this concatenation arranged in increasing order if @xmath209 , and in decreasing order if @xmath210 .",
    "it is easily seen that @xmath235 is the image of @xmath30^{\\ast}$ ] under the map @xmath236 .",
    "we have observed already that @xmath236 is not one - to - one but clearly each @xmath237 is a finite set ( that is , every permutation @xmath238 can be obtained in only finitely many ways ) .",
    "we shall find it convenient to call its members the _ encodings _ of @xmath6 .",
    "this situation differs from that in the previous section in that now a permutation may have several encodings .",
    "nevertheless we define subset @xmath118 of @xmath228 to be regular , if @xmath239 is a regular subset of @xmath30^*$ ] .",
    "suppose that @xmath240^*$ ] and @xmath241 is a subword of @xmath125 .",
    "then @xmath242 .",
    "also suppose that @xmath243 are elements of @xmath228 .",
    "then for each encoding @xmath125 of @xmath6 there exists an encoding @xmath241 of @xmath0 which is a subword of @xmath125    the first part is immediate . for the remainder , take a subset of the positions in @xmath6 with pattern @xmath0 .",
    "then just take @xmath241 to be the subword of @xmath125 on the same positions .",
    "[ regularencoding ] every closed subset of @xmath228 is regular .",
    "let @xmath118 be a closed subset of @xmath228 and let @xmath26 be its basis",
    ". by theorem 2.9 of @xcite @xmath26 is finite .",
    "let @xmath192 be the set of all elements of @xmath30^*$ ] which have a subword belonging to @xmath244 .",
    "since @xmath244 is finite , @xmath192 is regular .",
    "suppose that @xmath245 .",
    "then no encoding @xmath125 of @xmath6 can contain an element @xmath241 of @xmath244 as a subword , for otherwise @xmath246 .",
    "so @xmath247 .",
    "on the other hand , if @xmath248 , and @xmath249 , then @xmath250  for if not there is some @xmath251 with @xmath243 , and then some encoding @xmath241 of @xmath0 which is a subword of @xmath125 , a contradiction .",
    "so @xmath252 , which is regular .",
    "there is a linear time recognition algorithm for any closed subset of @xmath228 .",
    "we can not immediately deduce that every closed subset of @xmath228 has a rational generating function since the correspondence between @xmath228 and @xmath30^{\\ast}$ ] is not one - to - one .",
    "to get around this difficulty we define , for every @xmath253 , a distinguished encoding as follows .",
    "let @xmath254 be the longest monotone initial segment of @xmath0 consistent with the sign @xmath255 .",
    "having chosen @xmath254 we choose the next monotone segment @xmath256 ( corresponding to @xmath257 ) also as long as possible , and we continue in this manner until all of @xmath0 has been segmented ( necessarily with @xmath86 or fewer segments ) .",
    "the corresponding encoding @xmath258 , where @xmath259 if @xmath260 , is called the _ greedy _ encoding of @xmath0 .",
    "( in the example above the first encoding was greedy , the second was not ) .",
    "the greedy encoding of @xmath228 is a regular set .",
    "let @xmath125 and @xmath261 be any two consecutive positions of @xmath262 . in the greedy encoding @xmath211 of a permutation @xmath253",
    "let the positions where @xmath263 be @xmath264 and those where @xmath265 be @xmath266 .",
    "the greedy condition implies one of the following :    [ @xmath267 : :    ] since @xmath0 has adjacent segments    @xmath268 and @xmath269 we    have @xmath270 ; that is , in @xmath229 , the final    @xmath125 comes after the first @xmath271 .",
    "[ @xmath272 : :    ] here @xmath0 has adjacent segments    @xmath268 and @xmath273 ,    so @xmath274 ; that is , the final @xmath125 comes    after the final @xmath271 .",
    "[ @xmath275 : :    ] similarly , the first @xmath125 comes before the first    @xmath271 .",
    "[ @xmath276 : :    ] the first @xmath125 comes before the last @xmath271 .",
    "every consecutive @xmath277 gives a restriction on the form of a greedy encoding but these restrictions are all recognisable by a finite automaton thus completing the proof .",
    "every closed subset of @xmath228 has a rational generating function .",
    "let @xmath118 be any closed subset of @xmath228 . by theorem [ regularencoding ]",
    "@xmath239 is regular and therefore @xmath278 , where @xmath279 is the set of greedy encodings of @xmath228 , is also regular . but",
    "this set is in one - to - one correspondence with @xmath118 .",
    "we have shown that closed sets are the natural objects to study in the analysis of permuting machines .",
    "we have also demonstrated that , when a suitable encoding of permutations is available , finite automata are a powerful tool in this study .",
    "nevertheless many problems remain . in particular ,",
    "one natural question is how one might extend the automata tools to use context - free encodings . here",
    "one might hope to prove that certain closed sets have an algebraic generating function rather than a rational one . a natural candidate to investigate are the closed subsets of @xmath280 ( which is the language associated with a single stack ) for here well - formed bracket sequences encode permutations in a natural way .",
    "we hope to report progress on such problems in a subsequent paper .",
    "another issue is that of practicability .",
    "the `` effective '' methods we have developed for contructing automata frequently lead to automata with very large numbers of states since , in particular , we often need to convert a non - deterministic automaton to its deterministic version . in",
    "some special cases we have managed to contain this state explosion and have carried out these constructions , and this gives hope that more efficient methods may exist .",
    "99 m.  d. atkinson , m.  j. livesey , d.  h. tulley : permutations generated by token passing in graphs , theoretical computer science 178 ( 1997 ) 103118 .",
    "m.  d. atkinson , m.  m. murphy , and n. rukuc : partially well - ordered closed sets of permutations , order ( to appear ) .",
    "e. barcucci , a. del lungo , e. pergola , r. pinzani : permutations avoiding an increasing number of length increasing forbidden subsequences , discrete mathematics and theoretical computer science 4 ( 2000 ) , 3144",
    ". m. bna : exact enumeration of 1342-avoiding permutations ; a close link with labeled trees and planar maps , journal of combinatorial theory , series a , 80 ( 1997 ) 257272 .",
    "t. chow , j. west : forbidden subsequences and chebyshev polynomials , discrete math .",
    "204 ( 1999 ) 119128 .",
    "j.  e. hopcroft and j.  d. ullman : _ introduction to automata theory , languages , and computation _ , addison - wesley , reading , mass .",
    "d.  e. knuth : _ fundamental algorithms , the art of computer programming _ vol .",
    "1 ( second edition ) , addison - wesley , reading , mass . ( 1973 ) .",
    "t. mansour and a. vainshtein : restricted 132-avoiding permutations , adv .",
    "( 2001 ) 258269 .",
    "v.  r. pratt : computing permutations with double - ended queues , parallel stacks and parallel queues , proc .",
    "theory of computing 5 ( 1973 ) , 268277 .",
    "r.  e. tarjan : sorting using networks of queues and stacks , journal of the acm 19 ( 1972 ) , 341346",
    ". j. west : generating trees and the catalan and schrder numbers , discrete math . 146 ( 1995 ) , 247 - 262 ."
  ],
  "abstract_text": [
    "<S> machines whose main purpose is to permute and sort data are studied . </S>",
    "<S> the sets of permutations that can arise are analysed by means of finite automata and avoided pattern techniques . </S>",
    "<S> conditions are given for these sets being enumerated by rational generating functions .    * keywords * regular sets , permutations , involvement </S>"
  ]
}