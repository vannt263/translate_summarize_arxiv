{
  "article_text": [
    "the class of interval graphs has at most @xmath0 graphs on @xmath1 vertices .",
    "neither adjacency matrices nor lists are asymptotically space optimal to represent this class since only @xmath2 bits should be used to store a graph on @xmath1 vertices . however , due to the geometrical representation of this class every vertex of an interval graph can be assigned an interval on a discrete line with @xmath3 points",
    ". stated differently , every vertex can be labeled with two numbers between @xmath4 and @xmath3 and adjacency of two vertices can be determined by comparing the four numbers .",
    "storing two such numbers for all @xmath1 vertices requires @xmath5 bits and thus is asymptotically optimal .",
    "labeling schemes , also known as implicit representation , generalize this kind of representations by allowing to store a @xmath6 long binary label at every vertex such that adjacency between two vertices can be determined by running an algorithm on the two labels .",
    "we investigate what graph classes can or can not be represented in such a way when restricting the computational complexity of the function that determines adjacency , also called label decoder .",
    "let us call a graph class that has at most @xmath0 graphs on @xmath1 vertices small .",
    "a simple counting argument shows that only small graph classes can have labeling schemes .",
    "the first question that springs to mind is whether all small graph classes have a labeling scheme .",
    "this is not the case as spinrad shows by giving a small , non - hereditary graph class as counter - example in  ( * ? ? ?",
    "* thm .  7 ) .",
    "now , the question becomes whether all small , hereditary graph classes have a labeling scheme ; this is known as implicit graph conjecture(igc ) .",
    "this question was already posed more than two decades ago in 1992 by kannan , naor and rudich  @xcite and has been brought up again by spinrad  @xcite . but",
    "despite being such an old question not much is known in this regard .",
    "one such result is : every tiny , hereditary graph class admits a labeling scheme with labels of constant length  @xcite .",
    "tiny means that there exist @xmath7 and @xmath8 such that the class has at most @xmath9 labeled graphs on @xmath1 vertices for all @xmath10 .",
    "this follows from the insight that every tiny , hereditary graph class has only a constant number of twin - free graphs , which makes such classes rather uninteresting .",
    "on the other hand , small , hereditary graph classes such as planar or circular - arc graphs can have a rich structure .",
    "candidates for the igc , i.e.  small , hereditary graph classes for which no labeling scheme is known , are line segment graphs , ( unit ) disk graphs , @xmath11-dot product graphs and @xmath11-sphere graphs  @xcite .",
    "it is interesting to note that the obvious labeling schemes for line segment and disk graphs using their geometrical representation does not work since coordinates and radii can require an exponential number of bits  @xcite unlike in the case of interval graphs .",
    "a different aspect of labeling schemes that has been extensively studied are lower and upper bounds on the label length , i.e.  the constant lurking in @xmath6 , which is related to small universal graphs .",
    "a recent result shows that graphs of bounded arboricity @xmath11 admit a labeling scheme with optimal label length @xmath12  @xcite .",
    "besides , labeling schemes can be generalized in various ways .",
    "one variant are distance labeling schemes where one wants to infer the distance between two vertices given their labels  @xcite . in",
    "@xcite it was proposed to consider multiple labels instead of only two .",
    "another natural extension is to consider labeling schemes for graph classes that are not small by allowing longer labels while still maintaining the condition of being asymptotically space optimal  @xcite .",
    "however , here we shall investigate the original variant of this concept .",
    "[ [ our - results . ] ] our results .",
    "+ + + + + + + + + + + +    for a complexity class @xmath13 let @xmath14 denote the class of graph classes that have a labeling scheme where the label decoder can be computed in @xmath13 ( precise definitions follow ) .",
    "in general , we investigate how choosing various complexity classes for @xmath13 affects the class of graph classes @xmath14 that can be represented and how such classes of graph classes can be characterized . in section two we argue that @xmath15 for all @xmath16 by giving a diagonalization argument . a related result for distance labeling schemes",
    "can be found in section four of @xcite .",
    "additionally , we consider the graph class(es ) constructed in the proof as candidate for the implicit graph conjecture . in the third section",
    "we show that for every reasonable complexity class @xmath13 the class of graph classes @xmath14 can be exactly characterized in terms of a graph parameter . by graph parameter we mean a graph property which maps to the natural numbers such as clique number or tree width .",
    "given such a characterizing graph parameter @xmath17 for @xmath14 the question of whether a graph class lies in @xmath14 then is equivalent to asking whether it is bounded by @xmath17 .",
    "another consequence of such a characterization is that if for example determining the existence of a hamiltonian cycle is fixed - parameter tractable under the parameterization @xmath17 then for every graph class in @xmath14 this problem can be decided in polynomial time .",
    "this means the existence of a labeling scheme can have algorithmic implications . in the last section",
    "we define a class of label decoders @xmath18 via first - order logic formulas with arithmetic , i.e.  comparing order , addition and multiplication .",
    "our motivation for introducing this class of label decoders is that the turing machine model seems too strong to obtain lower bounds .",
    "we give upper bounds on the expressiveness of @xmath19 and its quantifier - free variant .",
    "even if quantifiers , addition and multiplication are disallowed the resulting class @xmath20 already contains many interesting graph classes such as forests , planar graphs and @xmath11-interval graphs(also known as multiple interval graphs  @xcite ) .",
    "lastly , we describe an alternative characterization of @xmath20 in terms of directed acyclic graphs .    [ [ terminology . ] ] terminology .",
    "+ + + + + + + + + + + +    let @xmath21 = \\{1,2,\\dots , n\\}$ ] .",
    "we write @xmath22 instead of @xmath23 and @xmath24 .",
    "let @xmath25 for @xmath26 and @xmath27 .",
    "the domain and image of a function @xmath28 are abbreviated by @xmath29 and @xmath30 respectively .",
    "we consider only graphs without multiple edges and self - loops and regard undirected graphs as special case of directed ones . for a sequence of graphs @xmath31 on",
    "the same vertex set @xmath32 let us say @xmath33 is the edge - union of @xmath34 if @xmath35 } e(g_i)$ ] . for two graphs @xmath36 we write @xmath37 to indicate that they are isomorphic .",
    "we speak of @xmath33 as unlabeled graph to emphasize that we talk about the isomorphism class of @xmath33 rather than a specific adjacency matrix of @xmath33 .",
    "a graph class is a set of unlabeled graphs , i.e.  closed under isomorphism .",
    "a graph class is hereditary if it is closed under taking induced subgraphs .",
    "let @xmath38 be the class of all graphs and @xmath39 is the class of all graphs on @xmath1 vertices .",
    "a language is a set of words over the binary alphabet @xmath40 .",
    "we use complexity class as informal term to mean a set of languages defined in terms of computation and assume that it is countable . the deterministic turing machine ( tm )",
    "is our model of computation when talking about time as resource bound .",
    "let @xmath41 denote the complexity class logspace , @xmath42 is the polynomial - time hierarchy , @xmath43 is the class of recursive languages and @xmath44 is the class of languages computable in time @xmath45 for @xmath46 , e.g.  @xmath47",
    ". let @xmath48 be the class of all languages .",
    "a label decoder @xmath49 is a binary relation over words , i.e.  @xmath50 .",
    "a labeling scheme is a tuple @xmath51 where @xmath49 is a label decoder and @xmath52 is the label length .",
    "a graph @xmath33 on @xmath1 vertices is in the class of graphs spanned by @xmath53 , denoted by @xmath54 , if there exists a labeling @xmath55 such that for all @xmath56 : @xmath57 we say a graph class @xmath58 is represented by ( or has ) a labeling scheme @xmath53 if @xmath59 .",
    "a language @xmath60 induces a label decoder @xmath61 where for all @xmath62 with @xmath63 it holds that @xmath64 .",
    "let @xmath13 be a set of languages and @xmath65 .",
    "a graph class @xmath58 is in @xmath66 if there exists a language @xmath67 such that @xmath58 is represented by @xmath68 for some @xmath69 .",
    "analogously , @xmath58 is in @xmath14 if @xmath58 is in @xmath70 for some @xmath65 .    a class of the form @xmath71 is trivially closed under taking subsets , i.e.  if @xmath72 and @xmath73 then @xmath74 . it follows that @xmath71 is closed under intersection as well .",
    "however , no @xmath71 is closed under complement since the complement of a small graph class is not small . for many complexity classes such as @xmath41 and @xmath75",
    "it is also not hard to show that the classes @xmath76 and @xmath77 are closed under union .",
    "here is an example of a language @xmath78 whose label decoder @xmath61 represents interval graphs : @xmath79 iff @xmath80 are binary strings of equal length and neither @xmath81 nor @xmath82 holds where @xmath83 denotes the lexicographical order .",
    "then the labeling scheme @xmath84 represents interval graphs .",
    "since @xmath78 can be computed in logspace it follows that interval graphs are in @xmath85 .    using our terminology",
    "the implicit graph conjecture can be rephrased as :    let @xmath86 denote the set of all small , hereditary graph classes . @xmath87    as of now it is far from clear whether even the second equality holds , i.e.  can every small , hereditary graph class be represented by some labeling scheme , leaving computability issues aside ?",
    "this is a graph - theoretic question dealing with the existence of polynomial - sized universal graphs that should be addressed before one can expect to prove the implicit graph conjecture .",
    "in the previous section we have seen that every language @xmath78 can be interpreted as label decoder @xmath61 .",
    "therefore a set of languages @xmath13 can be understood as set of label decoders and @xmath14 denotes the set of graph classes that can be represented by a labeling scheme @xmath88 with @xmath89 and @xmath90 .",
    "inclusion carries over to this setting meaning @xmath91 implies @xmath92 . for separations , however , this is not true , i.e.  there exist @xmath93 with @xmath94 and @xmath95 .",
    "spinrad remarks that it is not known whether restricting the label decoder to be computable in polynomial time versus requiring it to be simply computable makes a difference in terms of the graph classes that can be represented  @xcite .",
    "we resolve this question by applying diagonalization , which yields many of the separations known in the classical setting .",
    "for the sake of clarity we prove the following class of separations which we deem most interesting with respect to the igc since it yields the smallest class(@xmath96 ) that can be separated from @xmath77 by this argument :    @xmath15 for all @xmath16 .",
    "[ thm : hierarchy ]    the basic idea behind the proof of this statement is the following diagonalization argument .",
    "let @xmath97 be a set of label decoders .",
    "then a labeling scheme in @xmath14 can be seen as pair of natural numbers , one for the label decoder and one for the label length .",
    "let @xmath98 be a surjective function and @xmath99 with @xmath100 .",
    "it follows that for every labeling scheme @xmath53 in @xmath14 there exists an @xmath101 such that @xmath102",
    ". the following graph class can not be in @xmath14 : @xmath103 where smallest is meant w.r.t .  some order such as the lexicographical one .",
    "note that the order must be for unlabeled graphs .",
    "however , an order for labeled graphs can be easily adopted to unlabeled ones .",
    "assume @xmath104 is in @xmath14 via the labeling scheme @xmath53 .",
    "there exists an @xmath105 such that @xmath106 and it follows that @xmath104 contains a graph on @xmath1 vertices that can not be in @xmath53 per definition , contradiction .",
    "then it remains to show that @xmath104 is in the class that we wish to separate from @xmath14 .",
    "for the remainder of this section we formalize this idea in three steps .",
    "first , we state the requirements for a pairing function @xmath107 and show that such a function exists .",
    "we continue by arguing that the diagonalization graph class @xmath108 is not contained @xmath14 . in the last step",
    "we construct a label decoder for @xmath109 and show that it can be computed in @xmath110 .",
    "a surjective function @xmath98 is an admissible pairing if    1 .",
    "@xmath111 is infinite for all @xmath112 , 2 .",
    "@xmath113 with @xmath114 , 3 .",
    "@xmath115 is undefined if @xmath116 is not a power of two , and 4 .",
    "@xmath107 is computable in polynomial time given its input in unary .",
    "[ def : pairing ]    note , that a graph on @xmath1 vertices gets assigned labels of the same length as a graph on @xmath117 vertices whenever @xmath118 ( rounded up ) .",
    "the third condition prevents this from happening , i.e.  for all @xmath119 it holds that their vertices must have labels of different length .",
    "there exists an admissible pairing function .",
    "[ lem : pairing ]    consider the function @xmath100 iff @xmath120 for some @xmath121 .",
    "let @xmath13 be a set of languages , @xmath122 an order on unlabeled graphs and @xmath107 an admissible pairing .",
    "the diagonalization graph class of @xmath13 is defined as : @xmath123    when we consider the diagonalization graph class of a set of languages we assume the lexicographical order for @xmath122 and the function given in the proof of lemma  [ lem : pairing ] for @xmath107 .    for every countable set of languages",
    "@xmath13 it holds that @xmath124 .",
    "[ lem : ca_not_in_a ]    as argued in the paragraph after theorem [ thm : hierarchy ] it holds that for any labeling scheme @xmath53 in @xmath14 there exists a graph @xmath33 that is in @xmath108 but not in @xmath125 and thus this lemma holds .",
    "since the labeling scheme @xmath53 is in @xmath14 there exists an @xmath105 such that @xmath106 where @xmath126 , @xmath127 and @xmath128 . due to the fact that @xmath111 is infinite",
    "it follows that there exists an arbitrarily large @xmath105 such that @xmath106 . for @xmath129 to be non - empty",
    "it must hold that @xmath130 does not contain all graphs on @xmath1 vertices . by choosing @xmath1 to be sufficiently large this",
    "is guaranteed since @xmath130 is a small graph class .    to show that @xmath104 is in some class @xmath131 we need to define a labeling scheme @xmath132 that represents @xmath104 and consider the complexity of computing its label decoder .",
    "let @xmath13 be a set of languages .",
    "for @xmath133 let @xmath134 denote the smallest labeled graph with @xmath135 .",
    "we define the label decoder @xmath136 as follows . for every @xmath137 such that there exists @xmath133 with @xmath138 and for all @xmath139 let @xmath140    it",
    "can be assumed that @xmath134 has @xmath141 as vertex set .",
    "also , note that @xmath108 has at most one graph on @xmath1 vertices for any @xmath1 .",
    "therefore the label decoder @xmath136 is well - defined .",
    "it is easy to see that @xmath142 represents @xmath104 , i.e.  @xmath143 .    up to this point",
    "the exact correspondence between @xmath144 and the label decoder @xmath145 was not important .",
    "in fact , we only required the set of label decoders @xmath13 to be countable . to show that the label decoder @xmath146 can be computed in @xmath110",
    "it is important that given @xmath147 the label decoder @xmath145 from @xmath148 can be effectively computed .",
    "the following lemma grants this .    for every @xmath149",
    "there exists a mapping @xmath150 such that @xmath151 and on input @xmath101 in binary and @xmath152 the question @xmath153 can be decided in @xmath154 time with @xmath155 .",
    "[ lem : effective ]    the lemma essentially states that all tms running in @xmath148 can be simulated in @xmath156 .",
    "given the gdelization of such a tm @xmath157 and a word @xmath158 as input the question whether @xmath157 accepts @xmath116 can be decided by a tm in @xmath110 .",
    "fix a reasonable encoding of tms as natural numbers , i.e.  given @xmath159 then @xmath160 is a tm .",
    "let @xmath161 .",
    "it holds that @xmath162 for every @xmath163 . on input @xmath101 and",
    "@xmath152 the reference input length is @xmath164 .",
    "compute @xmath165 and then simulate @xmath160 on @xmath158 for @xmath166 steps .",
    "@xmath167 for every @xmath16 .",
    "[ lem : fa_compute ]    on input @xmath168 with @xmath169 and @xmath170 compute @xmath171 . if it is undefined then reject .",
    "otherwise there is a labeling scheme @xmath172 and we need to compute the smallest graph @xmath134 on @xmath173 vertices such that @xmath174 .",
    "if @xmath134 exists we assume that its vertex set is @xmath141 and accept iff @xmath175 .",
    "if it does not exist then reject .",
    "the graph @xmath134 can be computed as follows .",
    "iterate over all labeled graphs @xmath176 with @xmath173 vertices in order and over all bijections @xmath177 .",
    "check if @xmath178 by checking for every pair of vertices @xmath179 if @xmath180 .",
    "if this condition fails then @xmath181 . to query the label decoder @xmath145 the previous lemma can be applied , i.e.  @xmath147 can be interpreted as encoding of a tm in @xmath44 that can be simulated .",
    "let us consider the time requirement w.r.t .",
    "@xmath117 . to compute @xmath182 we write down @xmath173 in unary and compute @xmath107 in polynomial time w.r.t .",
    "@xmath173 which is in the order @xmath183 . to compute @xmath134 there are four nested loops .",
    "the first one goes over all labeled graphs on @xmath173 vertices which is bounded by @xmath184 .",
    "the second loop considers all possible labelings @xmath185 of which there can be at most @xmath186 ; recall that @xmath187 is polynomially bounded by @xmath117 due to definition  [ def : pairing ] .",
    "the other two loops go over all vertices of @xmath176 meaning @xmath173 . by applying lemma  [ lem : effective ] the time required to compute @xmath188 is @xmath189 with @xmath190 .",
    "since @xmath191 this operation can be computed in @xmath192-exponential time . in summary ,",
    "the runtime order of this algorithm is @xmath193 .",
    "now , lemma  [ lem : ca_not_in_a ] states that @xmath194 and from lemma  [ lem : fa_compute ] it follows that @xmath195 therefore proving theorem [ thm : hierarchy ] .",
    "notice , that this argument fails to show that @xmath196 because the runtime to compute the label decoder @xmath197 is at least double exponential due to the first two loops mentioned in the proof of lemma [ lem : fa_compute ] .",
    "can this argument be modified to separate these two classes as well ?",
    "this seems rather unlikely .",
    "nonetheless , we now know that there exist graph classes that have an implicit representation but a polynomial - time computable label decoder does not suffice to capture them .",
    "if there exists a small , hereditary graph class @xmath58 with @xmath198 then the implicit graph conjecture is false .",
    "[ fact : gpr ]    for two graph classes @xmath58 and @xmath199 let us call @xmath199 the hereditary closure of @xmath58 if @xmath200 iff @xmath33 occurs as induced subgraph of some graph in @xmath58 .",
    "if the hereditary closure of @xmath201 is not a small graph class then it follows that the premise of fact [ fact : gpr ] is unsatisfiable .",
    "recall that @xmath202 is not an unambiguous graph class but depends on the chosen order @xmath122 and pairing @xmath107 , which makes it difficult to analyze what kind of graphs are contained in such a class .",
    "we consider a graph parameter to be a total function @xmath203 and call it natural if the cardinality of its image is infinite . examples of natural graph parameters are the chromatic number or the diameter .",
    "a graph class @xmath58 is bounded by a graph parameter @xmath204 if there exists a @xmath90 such that for all @xmath205 it holds that @xmath206 .",
    "we show that for every complexity class @xmath13 such that @xmath14 is closed under union there exists a graph parameter that characterizes @xmath14 .",
    "one interesting aspect of such a characterization is that it might reveal algorithmic implications for graph classes that have a labeling scheme of certain complexity .",
    "let @xmath207 be a set of graph classes and @xmath204 is a graph parameter .",
    "we say @xmath204 characterizes @xmath207 if for every graph class @xmath58 it holds that @xmath208 iff @xmath58 is bounded by @xmath204 .",
    "let us say a set of graph classes @xmath207 is complete if for every graph @xmath33 there exists a @xmath208 such that @xmath205 .",
    "let @xmath207 be a complete set of graph classes closed under union and subsets with @xmath209 .",
    "if there exists a countable subset of @xmath207 such that its closure under subsets equals @xmath207 then there exists a natural graph parameter that characterizes @xmath207 .",
    "[ thm : parmchr ]    let @xmath207 be a set of graph classes that satisfies the above premises and @xmath210 is the needed countable subset of @xmath207 .",
    "let @xmath211 be the minimal @xmath26 such that @xmath212 . since @xmath207 is complete it follows that @xmath213 is complete and thus @xmath204 is total .",
    "let us define @xmath214 as @xmath215 and similarly @xmath216 .",
    "it follows that a class @xmath58 is bounded by @xmath204 iff @xmath217 for some @xmath218 .",
    "we now argue that @xmath204 characterizes @xmath207 .    if @xmath208 then there exists an @xmath218 such that @xmath219 .",
    "it follows that @xmath217 .",
    "we show the other direction by induction : if @xmath220 then @xmath208 for all @xmath218 .",
    "for @xmath221 it holds that @xmath222 .",
    "since @xmath207 is closed under subsets it follows that @xmath208 . for @xmath223",
    "it holds that @xmath224 and @xmath225 . by induction hypothesis it follows that @xmath226 .",
    "since @xmath207 is closed under union it remains to argue that @xmath227 is in @xmath207 .",
    "this follows by the observation @xmath228 and @xmath229 .",
    "let us examine the premises of theorem [ thm : parmchr ] with respect to the class of graph classes that we consider .",
    "every class of the form @xmath71 is closed under subsets and for a lot of complexity classes @xmath13 it also holds that @xmath14 is closed under union . for completeness a lookup table can be constructed for every singleton graph class .",
    "the required countable subset is given by the languages of @xmath13 .",
    "in fact , every class of the form @xmath71 mentioned in this paper satisfies these premises and therefore has a parameter characterization with the only exception being the class @xmath230 , which provably has no parameter characterization .",
    "assume @xmath204 is a characterizing parameter for @xmath230 and let @xmath231 .",
    "it must hold that for every graph class @xmath232 that it is a subset of some graph class in @xmath233 .",
    "however , the diagonalization graph class @xmath234 of @xmath233 can not be a subset of any graph class in @xmath233 but has a labeling scheme and thus is in @xmath230 , contradiction .",
    "consider the algorithmic relevance of such characterizations .",
    "let @xmath235 be a graph property such as having a hamiltonian cycle and @xmath204 is a graph parameter that characterizes the class @xmath14 .",
    "assume that @xmath236 can be decided in time @xmath237 on input @xmath33 with @xmath238 for some computable function @xmath239 .",
    "this can also be stated as @xmath236 parameterized by @xmath204 being in the complexity class @xmath240 .",
    "then it follows that the property @xmath236 can be decided in polynomial time on every graph class in @xmath14 .",
    "the contra - position of this argument can be used to show that a graph class @xmath58 is probably not in @xmath14 : if it is @xmath241-hard to decide the property @xmath236 on a graph class @xmath58 then this implies that @xmath58 can not be in @xmath14 unless @xmath242 .",
    "of course , the characterizing parameter derived from the proof of theorem [ thm : parmchr ] is not suitable for direct analysis but guarantees existence of such a characterization .",
    "however , there is room for different parameter characterizations of the same class as the following equivalence notion shows . for two graph parameters",
    "@xmath243 let us say that @xmath244 bounds @xmath245 , in symbols @xmath246 , if every graph class @xmath58 that is bounded by @xmath245 is also bounded by @xmath244 .",
    "if @xmath246 and @xmath247 we say @xmath245 and @xmath244 are equivalent . for example , the maximum degree is bounded by clique number but not vice versa .",
    "let @xmath248 be two classes of graph classes and @xmath243 are respective characterizing graph parameters . @xmath249",
    "iff @xmath246 .",
    "it follows that two graph parameters are equivalent iff they characterize the same class of graph classes . for",
    "a complexity class @xmath13 let @xmath17 be a characterizing graph parameter thereof .",
    "hence , comparing the containment relation of two classes @xmath14 and @xmath131 is the same as examining whether @xmath17 bounds @xmath250 or vice versa .",
    "the interval number @xmath251 of a graph @xmath33 is the smallest number @xmath65 such that @xmath33 is a @xmath11-interval graph , see  @xcite .",
    "from this perspective some of our results can be stated as : @xmath252 where @xmath253 means strict containment , i.e.  @xmath254 holds and @xmath255 does not hold .",
    "the class @xmath256 is introduced in the next section .",
    "for a given small , hereditary graph class there is no obvious way of showing that this class is not contained in @xmath77 or even @xmath76 as the fact that the igc still stands open has shown . as a consequence ,",
    "it is reasonable to look at a more restrictive model of computation for label decoders . from a complexity - theoretic view",
    "the circuit class @xmath257 is probably among the first candidates . in this case uniformity issues",
    "have to be considered , i.e.  the complexity of an algorithm computing the circuits for each input length . the strongest uniformity condition , which is the most suitable for lower bounds , leads to the class @xmath258 from descriptive complexity defined in terms of first - order logic @xcite .",
    "however , the domain of discourse in this setting would be the positions of the labels , which is arguably not the most natural choice .",
    "instead we propose the domain to be polynomially many natural numbers and a label consists of a constant number of elements of this domain . in this setting the labeling scheme for interval graphs can be stated as the formula @xmath259 ; compare this with the example given in the first section .",
    "it is also possible to describe @xmath11-interval graphs or any hereditary graph class with linearly many edges such as bounded arboricity graphs with such formulas .    for @xmath260 let @xmath261 be the structure that has @xmath21 $ ] as universe , the order relation @xmath262 on @xmath21 $ ] and addition as well as multiplication defined as functions : @xmath263 for @xmath264 let @xmath265 be the set of first - order formulas with boolean connectives @xmath266 , quantifiers @xmath267 and @xmath11 free variables using only equality and the relation and function symbols from @xmath268 .",
    "for @xmath269 we simply write @xmath270 .",
    "let @xmath271 be the set of free variables in @xmath272 .",
    "given @xmath273 , @xmath274 and an assignment @xmath275 $ ] we write @xmath276 if the interpretation @xmath277 satisfies @xmath272 under the usual semantics of first - order logic .",
    "a ( quantifier - free ) logical labeling scheme is a tuple @xmath278 with a ( quantifier - free ) formula @xmath279 and @xmath280 .",
    "a @xmath281-labeling for a set @xmath32 is a function @xmath282^k$ ] and induces the graph @xmath283 with vertex set @xmath32 and edges @xmath284 if @xmath285 .",
    "then a graph @xmath33 is in @xmath125 if there exists a @xmath281-labeling @xmath185 for @xmath286 such that @xmath287 .",
    "[ def : lls ]    let @xmath264 , @xmath280 .",
    "a graph class @xmath58 is in @xmath288 if there exists a logical labeling scheme @xmath289 with @xmath290 such that @xmath291 . and @xmath292 .",
    "let @xmath293 denote the quantifier - free analogue .",
    "notice , @xmath11 numbers in @xmath294 $ ] can be encoded as string of length @xmath295 .",
    "a logical labeling scheme can for instance express a system of polynomial inequalities on @xmath296 variables and adjacency is determined by whether this system is satisfied when plugging in the values for two vertices . by disallowing multiplication",
    "these systems become linear .",
    "quantified variables can be used to incorporate unknowns .",
    "for example , @xmath297 means that there is an edge from @xmath298 to @xmath299 with labels @xmath300 , @xmath301 if @xmath301 can be written as product of @xmath300 and a square number .",
    "@xmath302 and @xmath303 .",
    "it is known that the circuit class @xmath304 ( assuming logspace - uniformity or stronger ) and therefore @xmath305  @xcite .",
    "we argue that @xmath306 .",
    "given a logical labeling scheme @xmath289 with @xmath279 the label length in a graph with @xmath1 vertices is @xmath307 .",
    "the @xmath308-circuit has @xmath309 input bits and every block of @xmath310 bits corresponds to the value of a free variable in @xmath272 .",
    "every term in @xmath272 can be evaluated by implementing its syntax tree as part of the circuit since addition and multiplication can be computed in @xmath308 . the overflow condition , i.e.  if the result is larger than @xmath311 , has to be checked .",
    "then for every atomic formula in @xmath272 it remains to test for equality or less than of the input terms .",
    "after replacing every atomic formula in @xmath272 by its truth value the formula becomes a propositional formula that can be seen as circuit since it is quantifier - free .",
    "if @xmath272 contains quantifiers assume that it is in prenex normal form , i.e.  @xmath312 where @xmath313 and @xmath314 is a quantifier - free formula .",
    "the values for @xmath315 are determined by the input string and the value of a variable @xmath316 corresponds to a binary word of length @xmath317 , which is linear in the size of the input string . using the non - determinism of the polynomial - time hierarchy the values of the @xmath316 s can be `` guessed '' and then evaluated using the @xmath308-circuit described before , which can be simulated in polynomial time .",
    "indeed , all of the graph classes mentioned in the beginning of this section are already contained in @xmath318 .",
    "therefore let us consider this class more closely .    the interval number @xmath319 is strictly bounded by a graph parameter that characterizes @xmath20 .",
    "[ fact : intv ]    this statement is equivalent to saying that @xmath11-interval graphs are contained in @xmath20 and there exists a graph class @xmath320 that is no subclass of @xmath11-interval graphs for all @xmath16 .",
    "the containment of @xmath11-interval graphs in @xmath20 for every @xmath11 follows by translating its geometrical representation into a logical labeling scheme as we have done for interval graphs previously .",
    "consider the family of graphs shown in figure  [ fig : family ] where @xmath321 is obtained by appending a new 4-cycle to @xmath322 .",
    "\\(x ) at ( 2.5,0 ) @xmath323 ;    \\(a ) at ( -0.8 - 0.5,0 ) @xmath324 ;    ( a1 ) at ( 0,0 ) ; ( a2 ) at ( 0.2,0.45 ) ; ( a3 ) at ( -0.2,0.45 ) ; ( a4 ) at ( 0,0.8 ) ;    ( a5 ) at ( 0.45,0.2 ) ; ( a6 ) at ( 0.45,-0.2 ) ; ( a7 ) at ( 0.8,0 ) ;    ( a8 ) at ( -0.45,0.2 ) ; ( a9 ) at ( -0.45,-0.2 ) ; ( a10 ) at ( -0.8,0 ) ; ( a1 ) edge ( a2 ) ( a1 ) edge ( a3 ) ( a2 ) edge ( a4 ) ( a3 ) edge ( a4 )    ( a1 ) edge ( a5 ) ( a1 ) edge ( a6 ) ( a5 ) edge ( a7 ) ( a6 ) edge ( a7 )    ( a1 ) edge ( a8 ) ( a1 ) edge ( a9 ) ( a8 ) edge ( a10 ) ( a9 ) edge ( a10 ) ;    ( b1 ) at ( 0 - 3,0 ) ; ( b2 ) at ( 0.2 - 3,0.45 ) ; ( b3 ) at ( -0.2 - 3,0.45 ) ; ( b4 ) at ( 0 - 3,0.8 ) ;    ( b8 ) at ( -0.45 - 3,0.2 ) ; ( b9 ) at ( -0.45 - 3,-0.2 ) ; ( b10 ) at ( -0.8 - 3,0 ) ;    \\(b ) at ( -0.8 - 3 - 0.5,0 ) @xmath325 ;    ( b1 ) edge ( b2 ) ( b1 ) edge ( b3 ) ( b2 ) edge ( b4 ) ( b3 ) edge ( b4 )    ( b1 ) edge ( b8 ) ( b1 ) edge ( b9 ) ( b8 ) edge ( b10 ) ( b9 ) edge ( b10 ) ;    ( c1 ) at ( 0 - 6,0 ) ; ( c8 ) at ( -0.45 - 6,0.2 ) ; ( c9 ) at ( -0.45 - 6,-0.2 ) ; ( c10 ) at ( -0.8 - 6,0 ) ; ( c ) at ( -0.8 - 6 - 0.5,0 ) @xmath326 ;    ( c1 ) edge ( c8 ) ( c1 ) edge ( c9 ) ( c8 ) edge ( c10 ) ( c9 ) edge ( c10 ) ;    then the class @xmath327 lies in @xmath20 but can be verified to have unbounded interval number .",
    "this follows from the observation that the vertex with maximal degree in @xmath322 can not be represented with @xmath328 intervals .",
    "a natural question is how do @xmath329 and @xmath11 affect the expressiveness of @xmath330 .",
    "non - surprisingly , increasing @xmath11 strictly enhances the graph classes that can be represented as we will see in a moment .",
    "the parameter @xmath329 determines how large a number stored in a label can be , i.e.  at most @xmath311 .",
    "in fact , @xmath329 is degenerate in the sense that it can be bounded in terms of @xmath11",
    ". it would be surprising if the same holds in the presence of addition .",
    "@xmath331 for all @xmath332 .",
    "[ lem : ckkk ]    consider why it suffices for an interval graph on @xmath1 vertices to use only numbers between @xmath4 and @xmath3 to represent the intervals .",
    "for the same reason it makes no difference for a quantifier - free formula @xmath333 to be evaluated on a universe larger than @xmath334 in the sense that a labeling @xmath335 can be converted to a labeling @xmath336^k$ ] such that adjacency is preserved .",
    "more precisely , a @xmath281-labeling @xmath185 for a vertex set @xmath32 can be transformed into a @xmath337-labeling @xmath338 such that @xmath339 holds for every quantifier - free formula @xmath333 .",
    "let @xmath340 be the number of vertices .",
    "since @xmath11 numbers are assigned to each vertex there are at most @xmath334 numbers in @xmath341 \\}$ ] . for an @xmath342 let @xmath343 , i.e.  the number of numbers in @xmath233 that are smaller than @xmath344 plus one .",
    "for @xmath345 we define @xmath346 as follows .",
    "let @xmath347 . then @xmath348 .",
    "notice that the maximal value for a component of @xmath346 is @xmath334 .",
    "it remains to check that the truth value of @xmath272 is invariant under this modified labeling , which follows from the fact that @xmath349 .",
    "a consequence of this is that a logical labeling scheme in @xmath20 is solely determined by its formula @xmath272 .",
    "therefore we consider a quantifier - free formula @xmath333 to be the logical labeling scheme @xmath350 as well .",
    "to check whether a graph @xmath33 is in @xmath351 it suffices to find a labeling @xmath335 with @xmath352 which can be regarded as @xmath281-labeling for a sufficiently large @xmath329 .",
    "stated differently , one does not need to worry about the numbers being polynomially bounded .",
    "also , it implies that for every @xmath11 there exists a @xmath353 such that @xmath354 .",
    "assume the opposite , then @xmath20 collapses to @xmath355 .",
    "it follows that every graph class in @xmath20 can be represented using @xmath356 bits and therefore has at most @xmath357 graphs on @xmath1 vertices , which obviously can not be the case for any @xmath65 .    the graph class that is the union of every graph class in @xmath355 is contained in @xmath20 for all @xmath65 .",
    "[ lem : degn ]    we argue that @xmath20 is closed under finite union and that there exists only a finite number of labeling schemes in @xmath355 such that they represent different graph classes . for closure under union consider two labeling schemes given by their quantifier - free formulas @xmath358 .",
    "then the graph class given by the following formula with @xmath359 variables contains the union of @xmath351 and @xmath360 : @xmath361 the second claim follows from the fact that there are only finitely many semantically different quantifier - free formulas in @xmath362 for every @xmath11 . more precisely , there are at most @xmath363 different atomic formulas ( ` @xmath262 ' and ` @xmath364 ' ) on @xmath11 variables and therefore at most @xmath365 semantically different formulas , which is the number of boolean functions on @xmath363 variables .    for a graph @xmath33 and @xmath65",
    "we define the graph parameter @xmath366 such that @xmath367 if @xmath11 is the minimal number with @xmath368 .",
    "the graph parameter @xmath369 characterizes @xmath20 .",
    "one direction is trivial : if @xmath58 is in @xmath20 then it is bounded by @xmath366 . for the other direction let @xmath58 be bounded by @xmath366 meaning that there exists a @xmath11 such that for every @xmath205 it holds that @xmath370",
    "therefore @xmath58 is a subset of the union of all graph classes in @xmath355 which is in @xmath20 by lemma [ lem : degn ] .",
    "we remark that a similar construction using the label length does not yield a characterizing parameter for @xmath77 or @xmath76 .",
    "more specifically , the parameter defined by @xmath371 minimal @xmath11 such that @xmath372 does not characterize @xmath77 simply because the union of all graph classes in @xmath373 already contains all graphs(the analogon of lemma [ lem : degn ] fails ) .",
    "the semantics of a logical labeling scheme given by a quantifier - free formula @xmath333 can be alternatively characterized by directed acyclic graphs ( dags ) .",
    "intuitively , an edge in the dag corresponds to an atomic formula using ` @xmath83 ' .",
    "the atomic formulas involving equality can be modeled by grouping variables together .",
    "this means the dag has not the variables of @xmath272 as vertex set but rather a partition of these variables .",
    "let @xmath65 .",
    "we call a dag @xmath374 a @xmath11-dag if its vertex set @xmath375 partitions @xmath376 $ ]",
    ". a @xmath11-labeling of a vertex set @xmath32 is a function @xmath377 .",
    "a @xmath11-dag @xmath378 and a @xmath11-labeling @xmath185 of a vertex set @xmath32 define the graph @xmath379 on vertex set @xmath32 with the following edges . for @xmath380 let @xmath381 .",
    "there is an edge @xmath284 in @xmath379 if the following two conditions are satisfied :    1 .   for all @xmath382 $ ]",
    "it holds that @xmath383 whenever @xmath384 are in the same part of @xmath375 , 2 .   for all edges",
    "@xmath385 it holds that @xmath386 for all @xmath387 and @xmath388 .",
    "[ def : kdag ]    a graph @xmath389 is @xmath11-expressible for a @xmath65 if there exists a finite sequence of @xmath11-dags @xmath390 and a @xmath11-labeling @xmath185 of @xmath32 such that @xmath33 is the edge - union of @xmath391 .    for a graph @xmath33 and @xmath65",
    "it holds that @xmath367 iff @xmath11 is the minimal number such that @xmath33 is @xmath11-expressible .",
    "we show that there is a one - to - one correspondence between the semantics of a quantifier - free formula @xmath333 and @xmath11-dags .",
    "we can assume that @xmath272 contains no negation . to see that this can be done without loss of generality",
    "let @xmath272 be in negation normal form .",
    "then @xmath392 can be replaced by @xmath393 and @xmath394 by @xmath395 .",
    "next , we assume that @xmath272 is in disjunctive normal form , i.e.  @xmath396 where @xmath397 consists of atomic formulas linked by conjunction . given a @xmath281-labeling @xmath185 for a vertex set @xmath32 the formula @xmath272 induces the graph @xmath283 with @xmath398 as described in definition [ def : lls ] . due to the observation given after the proof of lemma [ lem : ckkk ] it is okay to consider a less restrictive @xmath11-labeling @xmath377 instead and additionally we write @xmath399 instead of @xmath283 .",
    "since every clause @xmath397 is a formula as well it can be seen as logical labeling scheme , which induces the graph @xmath400 .",
    "then the correspondence between the graphs induced by @xmath272 and its clauses @xmath401 is that @xmath402 is the edge - union of @xmath403 .",
    "if a clause is unsatisfiable then its induced graph is the empty graph and thus removing this clause does not affect @xmath283 .",
    "therefore we assume that every clause is satisfiable .",
    "we now argue how to convert a clause @xmath404 from @xmath272 into a @xmath11-dag @xmath374 such that @xmath405 for every @xmath11-labeling @xmath185 .",
    "consider the undirected graph @xmath176 which has the variables of @xmath272 as vertices and two vertices @xmath406 are adjacent iff the clause @xmath404 contains @xmath383 or @xmath407 .",
    "it follows that the connected components of @xmath176 partition the variables of @xmath272 ; let @xmath375 be this partition .",
    "now , consider the directed graph @xmath49 which has the variables of @xmath272 as vertices again and there is an edge @xmath408 in @xmath49 iff @xmath404 contains the atomic formula @xmath386 .",
    "since we can assume @xmath404 to be satisfiable it follows that for every part @xmath233 in the partition @xmath375 ( @xmath233 is a subset of the variables of @xmath272 ) the induced subgraph of @xmath49 on the vertex set @xmath233 yields the independent graph .",
    "assume the opposite , then there exist two variables @xmath406 in the same part of @xmath375 such that @xmath408 is an edge in @xmath49 .",
    "this means that @xmath404 contains the atomic formulas @xmath383 and @xmath386 , which contradicts satisfiability of @xmath404 .",
    "let us define the operation of merging a set of vertices @xmath53 in a graph @xmath33 such that the resulting graph @xmath409 is the same as @xmath33 except that all vertices in @xmath53 are replaced by a single vertex @xmath410 and there is an edge @xmath411 in @xmath409 if there is a vertex @xmath412 such that @xmath284 is an edge in the old graph @xmath33 ; analogously for edges @xmath413 .",
    "now , let @xmath414 be the graph obtained from @xmath49 by merging each part of @xmath375 .",
    "then there is a natural one - to - one correspondence between the partition @xmath375 and the vertex set of @xmath414 .",
    "we define @xmath378 to have the same edges as @xmath414 via this correspondence .",
    "it remains to check that for this construction @xmath405 holds indeed . to prove the other direction a @xmath11-dag can be converted into a conjunctive clause in a similar way .",
    "we conclude with the following two observations . by adding edge weights @xmath415 to the @xmath11-dags and adjusting the second condition of definition [ def : kdag ] such that for all edges @xmath385 it holds that @xmath416 for all @xmath417 the semantics of existential quantifiers can be mimicked .",
    "besides , given two @xmath11-dags @xmath418 and @xmath419 with identical vertex sets @xmath420 it holds that @xmath421 for every @xmath11-labeling @xmath185 whenever the transitive closures of @xmath418 and @xmath419 coincide .",
    "we have seen that limiting the computational resources for label decoders does indeed affect the class of graph classes that can be represented .",
    "unfortunately , for a specific graph class the diagonalization argument from the second section does not help us determine whether it lies in @xmath77 .",
    "however , as of now it is not even clear whether any candidate of the igc admits a labeling scheme at all as mentioned at the end of the first section . therefore trying to place",
    "any of these classes in @xmath77 seems elusive . on the other side ,",
    "proving lower bounds against @xmath77 or @xmath76 for small , hereditary graph classes might be just as futile given the lack of a suitable reduction notion . to counter this grim situation",
    "we have introduced a logical framework in the previous section that is much more restrictive than the tm model in its quantifier - free variant but still expressive enough to capture many of the implicit representations that we know .",
    "it appears to be a realistic goal to prove impossibility results in this setting , or more concretely refute the following weaker version of the igc :      as a first step in this direction we have investigated the fragment @xmath20 and made some structural observations . with the concept of parameter characterizations we have shown that the question of whether a certain graph class lies in @xmath20 can be answered by considering the @xmath11-expressibility property of every graph in this class independently .",
    "the directed acyclic graph characterization gives an alternative view on @xmath20 , which is independent of the logical formalism .",
    "this could be a useful tool for proving lower bounds against this class .",
    "but even this small fragment seems to be surprisingly expressive as the following task shows .",
    "give an example of a family of graphs that is not bounded by @xmath366 .",
    "recall that for the interval number this was quite simple , see figure  [ fig : family ] .",
    "another interesting question is whether adding quantifiers enhances the expressiveness , i.e.  @xmath423 ?"
  ],
  "abstract_text": [
    "<S> the implicit graph conjecture states that every sufficiently small , hereditary graph class has a labeling scheme with a polynomial - time computable label decoder . </S>",
    "<S> we approach this conjecture by investigating classes of label decoders defined in terms of complexity classes such as p and exp . </S>",
    "<S> for instance , gp denotes the class of graph classes that have a labeling scheme with a polynomial - time computable label decoder . </S>",
    "<S> until now it was not even known whether gp is a strict subset of gr where r is the class of recursive languages . </S>",
    "<S> we show that this is indeed the case and reveal a strict hierarchy akin to classical complexity . </S>",
    "<S> we also show that classes such as gp can be characterized in terms of graph parameters . </S>",
    "<S> this could mean that certain algorithmic problems are feasible on every graph class in gp . </S>",
    "<S> lastly , we define a more restrictive class of label decoders using first - order logic that already contains many natural graph classes such as forests and interval graphs . we give an alternative characterization of this class in terms of directed acyclic graphs . by showing that some small , hereditary graph class can not be expressed with such label decoders a weaker form of the implicit graph conjecture could be disproven . </S>"
  ]
}