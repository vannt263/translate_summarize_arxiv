{
  "article_text": [
    "the importance of radio frequency identification ( rfid ) technology continues to grow as rfid tags see deployment in an ever expanding variety of applications and settings .",
    "consequently , rfid security and privacy continues to be carefully scrutinized by the research community .",
    "providing security and privacy services in rfid systems presents unique challenges due to the highly constrained nature of rfid enabled devices .",
    "there has been much work on the development of security and privacy mechanisms and protocols that attempt to take the limited capabilities of rfid tags into account .",
    "most , if not all , of these schemes rely on the presence of one of the most fundamental cryptographic primitives , random number generation .",
    "while modern general purpose computers have many techniques available for the generation of high quality random numbers , even this relatively simple requirement is beyond the capacity of today s average rfid tag .",
    "the epc air interface specification for the most recent ( class 1 generation 2 ) variety of rfid tags includes a provision for pseudorandom number generation @xcite .",
    "the resulting random values are intended to be used only as a collision prevention measure , however . when combined with the economic considerations of these ultra - low cost devices , the values produced by these generators are unlikely to be of high enough quality to be used as a source of cryptographic randomness .    a recently proposed alternative , fingerprint extraction and random number generation in sram ( ferns ) @xcite , involves the use of onboard ram as the source of `` true '' randomness . ferns works by repurposing blocks of ram into physical fingerprints which",
    ", when run through a random number extractor ( e.g. , a hash function ) , produce random output .",
    "this technique is quite promising as any device , regardless of its constraints , will contain some amount of onboard memory from which randomness can be drawn .",
    "in addition to random number generation , ferns was also shown to be capable of creating unique fingerprints with which rfid tags can be uniquely identified .    unfortunately , practical considerations prevent the ferns approach to random number generation from reaching its full theoretical potential . since ferns relies on preexisting memory circuitry as a source of entropy , it must compete with other system functionalities for use of this shared resource .",
    "other code running on a rfid tag , such as the epc protocol stack itself ( that is , the implementation of the protocol in software ) , will likely be occupying the device s memory at any given point during execution . as such",
    ", the amount of uninitialized ram available for utilization as a randomness generator may be severely restricted .",
    "furthermore , ram is subject to a phenomenon known as _",
    "data remanence_. while it is still volatile in the traditional sense , due to properties of the underlying hardware such memory retains its contents while receiving power and for a duration of several seconds afterwards .",
    "thus , there is a time period after losing power during which stored data remains intact in memory .",
    "this means that after a portion of memory has been used for entropy collection once , it will require a relatively extended period of time without power before it can again be used in this capacity . in a usable rfid based security application which requires multiple random numbers this may lead to unacceptably high delays .",
    "[ [ our - contributions ] ] our contributions : + + + + + + + + + + + + + + + + + +    in this paper , we demonstrate the practical considerations that must be taken into account when using ram as an entropy source .",
    "we discuss the implementation of a true random number generator on intel s wisp rfid tag @xcite , which is the first such implementation to the authors best knowledge @xcite . using this as a basis ,",
    "we demonstrate how many bits of randomness one can expect to derive from a rfid device s memory at a given time .",
    "our results indicate that at most 309 bits of randomness can be derived from a tag with 512 bytes of ram , with this figure dropping sharply as tag memory capacity decreases .",
    "we then analyze the implications of data remanence on rfid tags and the rate at which random number generation can be performed . by relating this process to the requirements of some popular rfid authentication protocols , we assess the ( im)practicality of utilizing memory based randomness techniques on resource constrained devices .",
    "as an example , we also discuss the implications that ram based randomness derivation would have on the usage model of a typical rfid enabled access card .",
    "in addition , we introduce potential attacks that could be launched on rfid system while this method is in use .",
    "[ [ paper - organization ] ] paper organization : + + + + + + + + + + + + + + + + + + +    the rest of this work is organized in the following fashion .",
    "section [ sec : background ] introduces the fundamentals of rfid systems and discusses related work . in section [ sec : experiments ] , our experiments are explained in detail .",
    "section [ sec : discussion ] provides a discussion of the practicality of the studied approach , based on our experiments .",
    "finally , section [ sec : conclusion ] summarizes our results .",
    "rfid is an increasingly popular technology for computerized identification .",
    "an rfid infrastructure consists of tags and readers .",
    "tags are small transponders that store data about their corresponding subject , such as an i d value .",
    "readers are used to query and identify these tags over a wireless channel . in most cases , tags are passive or semi - passive , meaning they derive the power to transmit data to a reader from the electromagnetic field generated when a reader sends a query to a tag .",
    "additionally , tags typically have memory only in the range of 32 - 128 bytes , perhaps just enough to store a unique identifier @xcite . these ultra - low memory , computational , and power constraints",
    "are necessitated by the fact that rfid tags are designed to be placed ubiquitously in consumer products , appliances , and even users themselves ( in the case of implanted payment tokens , for example ) .",
    "the minimalist capabilities of these tags present unique privacy and security challenges , the issue of random number generation being foremost among them .",
    "how can a device with limited power , memory , computational capabilities , and user interfaces generate high quality random numbers ?      in order to investigate this question , we utilized a special type of rfid tag designed by intel research known as a wireless identification and sensing platform ( wisp ) @xcite .",
    "wisps are passively - powered rfid tags that are compliant with the electronic product code ( epc ) protocol .",
    "specifically , we utilized the 4.1 version of the wisp hardware , which partially implements class 1 generation 2 of the epc standard . by following this standard and deriving power only from the transmissions of a commercial rfid reader ,",
    "wisps closely model the type of rfid tag one might expect to find in a typical contactless access token . where the wisp differs from standard tags ,",
    "however , is in its inclusion of an onboard texas instruments msp430f2132 microcontroller .",
    "this 16-bit mcu features an 8 mhz clock rate , 8 kilobytes of flash memory , and 512 bytes of ram .",
    "wisps are the first programmable passive rfid devices . unlike standard rfid tags , which are fixed function and state machine based , the flexibility of the wisp allowed us to implement a random number generator and",
    "probe the behavior of memory on a live , passive rfid device .",
    "a recent proposal to address the difficulty of generating random numbers on a passive rfid device is called ferns @xcite . instead of treating uninitialized memory as a indeterminate blank slate , ferns works by considering this unused memory to be a fingerprint .",
    "this fingerprint can be used in two complimentary ways .",
    "the first is as a means of identifying a given rfid tag through the underlying physical characteristics of memory .",
    "the second is as a potential source of entropy .",
    "the focus in this paper is on the latter application .",
    "each unpowered ram cell starts in an unstable state , then moves to a stable state , representing either a ` 0 ' or a ` 1 ' , once supplied with power . which of the two bit states the cell enters upon first receiving power is dependant on the threshold voltage mismatch as well as the thermal and shot noise of the cell .",
    "a large threshold voltage mismatch will cause a ram cell to reliably initialize to one bit value or the other .",
    "a small mismatch , on the other hand , will be overshadowed by the cell s noise , causing it to take on a value randomly at power up .",
    "it is the physical noise of these ram cells that supply entropy in the ferns method .    due to physical impurities , the random",
    ", well threshold matched cells will be randomly scattered throughout the ram . as these bits do not occur in convenient proximity to one another",
    ", an extractor is necessary to pull these desirable bits from the ram sequence .",
    "a hash function can be used in this capacity .",
    "the ph universal hash function of @xcite is recommended due to its suitability for implementation in resource - limited hardware @xcite .",
    "this function is a variant of the nh hash function that was designed to be efficient in software in order to accelerate the umac message authentication algorithm @xcite .",
    "ph is the result of a retooling of the nh function in order to remove the need to perform carry operations , which makes the function more suitable for a hardware implementation in terms of speed , space , and power consumption .",
    "ph is defined in equation [ ph ] .",
    "blocks of uninitialized memory are provided to the hash function as both key ( @xmath0 ) and message ( @xmath1 ) inputs ; the output of the hash function can then be used as a random bitstream .",
    "@xmath2      since computer memory is volatile , it is a common belief that data stored in ram is completely lost as soon as it ceases to be supplied with power .",
    "this is not entirely accurate , however .",
    "while the contents of unpowered ram will certainly degrade over time , the decay process takes several seconds to begin and several more to complete @xcite .",
    "this process is due to the low - level electrical components that comprise a ram chip . in sram , for instance",
    ", data is stored by setting the state of a flip - flop .",
    "this state is maintained as long as the flip - flop continues to receive power @xcite .",
    "this circuit does not lose its state immediately upon loss of power , however .",
    "the state will remain for a short interval of time .",
    "thus , there is a brief time period after losing power during which stored data remains intact . if power is again supplied before the end of this window the decay process is halted .",
    "while the speed of data loss varies greatly between individual chips , the rate of ram decay is largely a function of temperature . at high temperatures",
    "the degradation process is accelerated , while if cooled to a low enough temperature the decay process can effectively be halted indefinitely .",
    "the phenomenon of data remanence has serious repercussions for computer security .",
    "many times cryptographic data , such as keys , are stored in ram .",
    "if an adversary can gain physical access to a ram chip containing sensitive material , remove it , and read it on a different device before it fully decays , he or she can potentially recover a full image of the memory contents , including any stored secrets . even if the decay process has already started to set in , statistical techniques can be used to recover lost bits @xcite .",
    "while data remanence plays an important part in the work presented in this paper , it does not involve the recovery of data from memory .",
    "instead , we explore the implications of data remanence on the frequency of ram initialization",
    ".      one of the most important rfid security challenges is tag authentication .",
    "rfid tags are designed to respond promiscuously to any query from a compatible reader .",
    "this behavior makes the forging and duplication of rfid tags a relatively straightforward process .",
    "since tags respond to any query , there is little preventing an adversary with the proper equipment from obtaining a tag s data , then creating a new tag containing the exact same value @xcite .",
    "in many cases , traditional cryptographic solutions can not be used by rfid tags due to their low computational and memory capabilities .",
    "several new solutions have been developed to address these problems ; one of the best known is the hb+ protocol @xcite .",
    "hb+ is a challenge - response scheme based on the hb human authentication protocol @xcite that is designed with the computational and memory constraints of rfid tags in mind , requiring only bitwise logic operators for computation .",
    "the only other requisite of hb+ is the tag s capability to generate high quality randomness , a property which today s rfid tags are ill equipped to meet .",
    "the hb+ protocol requires at least 80 rounds @xcite , in each of which the rfid tag is expected to generate a 224 bit random value , in order to attain an 80-bit security level .",
    "if these rounds are run in parallel @xcite , a rfid tag will be required to produce 17,920 random bits at once .    since its inception",
    ", various variants of hb+ have been proposed including hb++ @xcite , trusted - hb @xcite , puf - hb @xcite , and hb # @xcite .",
    "protocols derived from hb are not the only rfid security mechanisms that require randomness to operate , though . other protocols that are based on pseudorandom functions will also require cryptographic random numbers to be generated . for example , the tree based privacy - preserving authentication protocols of @xcite use pseudorandom functions that require high quality randomness at each level of the tree .",
    "in this section , we present the experiments used to measure the amount of randomness that can be derived from uninitialized ram , as well as the rate at which this process can be performed , based on the practical limitations of rfid tags and their usage model .",
    "we utilized the following configuration of equipment for our tests .",
    "four wisp tags of the latest hardware version , 4.1 , were employed .",
    "the wisps are depicted in figure [ tag_pic ] , with a u.s .",
    "quarter placed nearby to provide a sense of scale . when these tags were required to interact with the rfid reader they were loaded with the 6.0 revision of wisp firmware . at times",
    "when a tag s memory contents were of interest , tags were loaded with a c file containing nothing but a blank main function ; this was done in order to minimize the amount of ram overwritten during program execution . to program these wisp tags a texas instruments msp - fet430uif debugging interface @xcite",
    "was used , which was interacted with through a desktop computer running the iar embedded workbench ide @xcite .",
    "the debugger was connected to the desktop machine with a usb cable and to the wisp tag over a jtag interface .",
    "we used an epc compliant impinj uhf generation 2 speedway rfid reader @xcite running firmware version 3.2.1 .",
    "commands were issued to the reader from a desktop machine through a custom application which communicated with the reader over the low level reader protocol ( llrp ) . a block diagram of this hardware configuration is shown in figure [ block_diagram ] .",
    ", height=124 ]    , height=188 ]      as a first step towards assessing the viability of deriving randomness from ram on a passive rfid device , we implemented the random number generation portion of ferns on a wisp tag .",
    "while ram based randomness has been implemented on a desktop computer , to our knowledge this is the first such implementation on a passively - powered rfid device @xcite .",
    "the implementation was done in c using the iar embedded workbench ide .",
    "this was a relatively straightforward implementation of the ph hash function ( described in section [ sec : rng ] ) .",
    "the main change that had to be made was to alter the input block size of the ph hash function from 64 bits to 16 bits , which reduced the size of the hash function s output from 133 bits to 37 bits .",
    "this was done in order for the hash output to fit into a standard c long long datatype .",
    "had the original 133 bit output size been used , it would have necessitated the use of a multiple precision arithmetic library , which would require the dedication of the tag s scarce computational and memory resources .",
    "besides this practical consideration , reducing the block size of the ph function has theoretical advantages as well .",
    "when this function s block size is set to 64 bits , @xmath3 bits of memory , half having been input as message blocks and the other half having been treated as key blocks , are consumed to produce a single 133 bit hash .",
    "when 16 bit blocks are used instead , only @xmath4 bits of ram are needed to produce a 37 bit hash .",
    "while this decreases the amount of random bits output from one call to the hash function , the smaller block size allows ph to be called 3 more times on distinct blocks of the same amount of uninitialized ram , yielding @xmath5 bits of randomness .",
    "thus , reducing the block size of the hash function allows more bits to be condensed from an equivalent portion of memory .",
    "this would be problematic if the larger bit amount exceeded the expected entropy of the values being hashed .",
    "fortunately , this is not the case .",
    "each bit of tag memory is capable of yielding 0.103 bits of entropy @xcite .",
    "this means that the 148 bits output by multiple calls to ph with the smaller hash function is still well within the 210 bits of entropy that 2048 bits of raw memory would be expected to produce .    as a preliminary test of the random values generated by this `` on - tag '' random number generator",
    ", 32 blocks of 16 bits each were read from an uninitialized area of the wisp s ram .",
    "these values were hashed and written to a different memory address .",
    "we programmed the wisp to perform this operation once per query from the reader .",
    "the resultant 37 bit hash value was copied from memory into the wisp s epc i d , which was then transmitted to the rfid reader in response to its queries .",
    "surprisingly , we observed that identical values were being transmitted , indicating a clear lack of randomness .",
    "since this random number generation technique is already known to work on traditional machines @xcite , we set out to investigate the source of the discrepancy found on the wisp implementation .",
    "we altered the wisp tag s programming to transmit the contents of its memory to the reader .",
    "this was accomplished by programming the tag to break its ram into blocks .",
    "these blocks were then transmitted through the tag s epc i d in the same manner as was done with the hash values . while there were occasional changes in certain bytes , the contents of the memory seemed largely unchanged .",
    "this was being caused by the wisp tag s retention of values between queries .",
    "recall that passive rfid tags derive power from reader queries .",
    "thus , while continuously being polled for hash or memory values , the wisp tag was receiving a continuous supply of power , causing it to retain its ram state rather than reinitializing its memory after each query .",
    "we arranged a more thorough experiment to analyze the timing of data retention on the wisp s memory .",
    "the methodology of our experiment was similar to that employed in @xcite .",
    "first , the wisp is connected to a desktop machine using the msp - fet430uif debugging interface .",
    "we filled all 512 bytes of the wisp memory with a pseudorandom pattern generated on a desktop machine using the mersenne twister @xcite implementation included in the random module of the python programming language s standard library .",
    "this pattern was copied to the wisp s ram through the embedded workbench ide .",
    "the wisp tag was then disconnected from the debug interface , depriving it of power for a certain interval of time .",
    "after this , the tag was reattached to the debugger . rather than using the reader to supply power to the tag and reading the memory values through the tag s epc i d , which is slow and prone to occasionally missing values",
    ", we resumed supplying the tag with power over the debugger .",
    "the contents of the wisp s memory were then read back . in order to calculate the tag s decay rate ,",
    "we computed the hamming distance between the original pseudorandom pattern and the value read back from the ram .",
    "two of the 512 bytes of ram were always overwritten by the debugger , so these bytes were left out of the analysis .",
    "the fact that the original pattern was pseudorandom meant that it should contain an approximately equal amount of each bit .",
    "therefore , ram was considered to be fully decayed once the hamming distance between the two strings was at or near 50% .",
    "we did not alter the temperature of our tags ; all tests were carried out at room temperature .",
    "we took samples after removing the wisp from power for a duration of 0 to 60 seconds at 5 second intervals .",
    "this test was performed on a population of 4 wisp tags .",
    "the results of our tests are shown in figures [ seperate_tags ] and [ averages ] .",
    "figure [ seperate_tags ] shows the per - tag decay rate , while figure [ averages ] displays the average decay rate across all tags .",
    "a logistic curve has been fit to each data set .",
    "while there were some minor variations between samples , the decay rate observed on each tag was generally well matched to this curve , showing an initial 15 seconds with little ( @xmath6 ) or no decay , then 15 seconds of very rapid decay , and concluding with the slow decay of whatever data remained . from this data",
    "it is clear that , depending on the particular tag , a powerless period of 25 to 30 seconds is required to allow the wisp s 512 bytes of memory to decay completely .",
    "having established how long it takes for a wisp s memory to return to an uninitialized state , next we turned our attention to how much uninitialized memory is available on a wisp at any given time . to determine the amount of unused ram on the latest version ( 4.1 ) of wisp tags used in our experiments , we loaded the tags with their default firmware and then added the largest data structure the compiler would allow us to store in the tag s ram .",
    "we observed that the wisp protocol occupied 136 bytes of this tag version s memory , leaving 376 bytes free for use as an entropy source .",
    "note , however , that by default this firmware does not implement all mandatory aspects of the epc standard .",
    "enabling other features of the protocol in the wisp firmware , such as the ability use multiple readers or read multiple tags simultaneously , takes up an additional 12 bytes of ram , leaving 364 bytes available for random number generation .    for earlier versions ( 2.0 and 2.1 ) of wisp tags",
    ", @xcite established that at any given time 112 bytes of wisp memory are occupied by the rfid protocol and stack .",
    "assuming no additional memory is used in order to program the tag with increased functionality , this leaves a maximum of 144 uninitialized bytes for random number generation .",
    "this assumes that no other ram space is occupied by the authentication protocol itself , which is unlikely to be true in practice .",
    "taking the hb+ and hb # protocols as motivating examples , we ask : how feasible is the use of ram based random number generation for rfid applications in need of random numbers ? to provide 80 bit security , the hb+ protocol requires at least 80 rounds @xcite , in each of which",
    "the rfid tag is expected to generate a 224 bit random value .",
    "if these rounds are run in parallel , the wisp must be capable of generating 17,920 random bits at a time .",
    "the randomness requirements of the hb # protocol are more modest , requiring a single round where a 512 bit random value is generated by the tag , though this is at the cost of a higher memory overhead .    in the ferns approach , as reported in @xcite , an entropy rate of 0.103 bits of entropy per bit of uninitialized memory was observed . combining this with the maximum of 376 bytes of unused ram on a 4.1 wisp tag yields an expected random number capacity of 309 bits .",
    "a 4.1 wisp tag would therefore require its available memory to be hashed 58 times in order to meet the randomness requirements of the hb+ protocol and 2 times in order to generate enough randomness for the hb # protocol .",
    "since a `` cool down '' interval of about 30 seconds is required between memory hashes in order to allow a wisp tag s ram to return to its uninitialized state , this implies that 30 seconds of wait time would be required for this type of tag to generate enough randomness for a single hb # session and 28.5 minutes of wait time would be necessary to create enough random bits for one hb+ protocol instance .    of course",
    ", these estimates only apply to the latest iteration of wisp hardware .",
    "rfid tags with lower capabilities would require even more time . on",
    "the earlier 2.0 or 2.1 versions of wisp tags , which featured 256 bytes of ram in total , out of which 144 bytes are available for hashing , 118 random bits could be expected to be generated from each memory hash .",
    "this would necessitate 152 hashes for hb+ and 5 hashes for hb # , yielding uninitialization wait times of 76 minutes and 2.5 minutes for each respective protocol .",
    "these figures are specific to the specialized wisp hardware , which for the purposes of allowing programming flexibility have memory capacities well beyond those of commercial rfid tags . a typical 5 to 10 cent rfid tag is expected to have a maximum of only 128 bits of ram in total @xcite , making the prospect of deriving sufficient randomness from this source even dimmer .",
    "the issue of ram data retention is complicated by the rfid usage model .",
    "for example , consider the case of contactless access card usage .",
    "since cost efficient tags are passively - powered , they power up when they come into range of a compatible rfid reader and do not power down until they leave the reader s field of view .",
    "this would mean that a standard rfid enabled access card would have to be taken outside of the range of a reader in order to allow its memory to `` cool down '' and return to an uninitialized state in order to perform random number generation . thus requiring multiple consecutive ram hashes",
    "would significantly alter the rfid usage model . instead of a user presenting his or her tag to a reader once , leaving it present momentarily , and returning the tag to a pocket or other storage , users would have to repeatedly bring the access card within the range of the reader and back out again , introducing a high user burden into the authentication process .",
    "further complicating the situation is the need for the user to determine when to remove the card from reader s range and for how long .",
    "we suspect that specialized hardware could be added to a rfid tag to address this problem by cutting power to memory after a random number generation was requested .",
    "this would add complexity and thus cost to the tag , however , contrary to their intended economic efficiency .",
    "furthermore , a hardware based solution would also not address the underlying need to wait for several seconds between two consecutive ram reads .",
    "the need to move a tag outside of the range of a reader for a fresh random number generation also introduces the potential for new attacks .",
    "if an adversary were able to continuously supply power to a tag which made use of its ram for randomness purposes , he or she would essentially force the tag to continuously reuse the same ram values for hashing .",
    "this would make the values generated extremely predictable , undermining the security of any authentication scheme or cryptographic protocol built on top of the random number generator . as mentioned above",
    ", hardware could be added to lock down a tag s memory until it has time to return to a decayed state .",
    "however , this would create the potential for a denial of service ( dos ) attack where an attacker continuously powered a tag , preventing it from generating any random numbers and thus from being used at all .",
    "while dos attacks on rfid systems are always possible by simply jamming the radio signals involved , this type of attack is worse in the sense that it does not involve any jamming in the traditional sense . all an attacker would need to do is repeatedly issue queries to the tag , rather than continuously jam an entire portion of the radio spectrum .",
    "to conclude , we have presented several practical shortcomings of using general purpose memory as a source of randomness for low cost rfid devices .",
    "since ram is already in short supply on such resource constrained devices , much of it will likely be in use and thus unavailable as a source of randomness . due to the phenomenon of data remanence , a longer than expected wait time",
    "is required between consecutive uses of ram as an entropy source , making its repeated utilization impractical in the rfid usage model .",
    "we do not conclude , however , that ram based randomness derivation should be discarded .",
    "this innovative technique remains attractive due to its repurposing of existing hardware , which is important for minimizing the costs of tag production . on its own",
    ", however , this method seems unlikely to be able to handle the randomness requirements of current rfid authentication protocols such as hb+ , hb # , and related variants .    in practice , many services derive random numbers from environmental noise . as future work",
    ", we plan on investigating the viability of alternative sources of randomness , such as onboard sensors , to collect ambient noise of different forms .",
    "this approach would not be subject to the time and space constraints faced when harvesting entropy from memory . as sensing platforms , wisp tags are well suited to exploring this area .",
    "for example , the current 4.1 iteration of wisp hardware features an onboard accelerometer , temperature sensor , voltage sensor , and capacitance sensor . additionally , it is possible to add new sensors by wiring them to a wisp .",
    "we intend to analyze ways in which entropy sources such as these can be aggregated to efficiently produce the amount of randomness necessary to support various cryptographic protocols aimed at low cost tags .",
    "the authors would like to thank dan holcomb , david molnar , and the anonymous rfidsec09 reviewers for their helpful feedback on an earlier version of this paper .",
    "we would also like to give a special thanks to dan yeager both for his comments on this paper and his advice on wisp programming ."
  ],
  "abstract_text": [
    "<S> random number generation is a fundamental security primitive for rfid devices . </S>",
    "<S> however , even this relatively simple requirement is beyond the capacity of today s average rfid tag . a recently proposed solution , fingerprint extraction and random number generation in sram ( ferns ) @xcite , involves the use of onboard ram as the source of `` true '' randomness . </S>",
    "<S> unfortunately , practical considerations prevent this approach from reaching its full potential . </S>",
    "<S> first , this method must compete with other system functionalities for use of memory . </S>",
    "<S> thus , the amount of uninitialized ram available for utilization as a randomness generator may be severely restricted . </S>",
    "<S> second , ram is subject to _ data remanence _ ; there is a time period after losing power during which stored data remains intact in memory . </S>",
    "<S> this means that after a portion of memory has been used for entropy collection once it will require a relatively extended period of time without power before it can be reused . in a usable rfid based security application , which requires multiple or long random numbers , this may lead to unacceptably high delays .    in this paper , we show that data remanence negatively affects ram based random number generation . </S>",
    "<S> we demonstrate the practical considerations that must be taken into account when using ram as an entropy source . </S>",
    "<S> we also discuss the implementation of a true random number generator on intel s wisp rfid tag , which is the first such implementation to the authors best knowledge . by relating this to the requirements of some popular rfid authentication protocols </S>",
    "<S> , we assess the ( im)practicality of utilizing memory based randomness techniques on resource constrained devices .    </S>",
    "<S> rfid , true random number generation , power - up sram , authentication protocols </S>"
  ]
}