{
  "article_text": [
    "let @xmath4 be a universal sentence ( where @xmath5 is an open formula ) .",
    "according to herbrand s theorem , @xmath0 is inconsistent if and only if , for some terms @xmath6 , the disjunction @xmath7 is a propositional tautology .",
    "thus if @xmath0 is consistent , every conjunction @xmath8 is a satisfiable proposition . in this paper",
    "we study the computational problem of finding satisfying assignments for such conjunctions assuming that @xmath0 is consistent .",
    "we call this problem the _ herbrand consistency search _ for @xmath0 .",
    "this problem can be viewed from three different perspectives :    \\1 .",
    "we ask how difficult it is to verify that @xmath0 is consistent ; more precisely , how difficult it is to verify that a given disjunction is not a herbrand proof of @xmath1 .",
    "this is somewhat similar to the well - known problem about finitistic consistency statements , where we ask how difficult it is to find a proof that there is no proof of @xmath1 of length @xmath9 , see  @xcite .",
    "the two problems are , however , of essentially different nature . for one thing , we consider all proofs of length @xmath9 when we talk about finitistic consistency . for another , transforming the usual proofs ( hilbert style , sequent calculus with cuts , etc . ) into herbrand proofs results in nonelementary blowup of size .",
    "a model of a consistent sentence can be built on the herbrand universe ( the set of all terms in the language of @xmath0 ) . to this end",
    "we have to decide the truth of all atomic formulas so that the resulting structure is a model of @xmath0 .",
    "herbrand consistency search can be then viewed as the problem of deciding the truth values of atomic formulas in order to obtain a _ partial model _ of @xmath0 .",
    "it is important to fully understand the complexity of special cases of the @xmath10-complete problem sat ( satisfiability of cnf formulas ) .",
    "each consistent universal sentence whose matrix is a cnf gives us a natural class of cnfs in the way described above .",
    "for some sentences , we can show that the problem is solvable in polynomial time .",
    "for some other sentences , we believe that this is not the case , but it is unlikely that we can prove that they are @xmath10-hard problems , because the cnfs are all satisfiable .",
    "instead , we can argue that for strong sentences their herbrand consistency search problems are not solvable in polynomial time , because these problems capture the complexity of all total polynomial search problems , as we explain below .",
    "a _ polynomial search problem _ is given by a binary relation @xmath11 decidable in polynomial time and a polynomial bound on the length of @xmath12 in terms of the length of @xmath13 .",
    "the task is , for a given @xmath13 , to find @xmath12 such that the relation holds true and the polynomial bound is satisfied , if there is any such @xmath12 .",
    "total polynomial search problem _ is a polynomial search problem that has a solution for every @xmath13 .",
    "while there are polynomial search problems that are @xmath10-hard , it seems unlikely that we could prove @xmath10-hardness of a total polynomial search problem .",
    "the additional condition of totality prevents us to use any know techniques for showing @xmath10-hardness , which suggest that it may actually be impossible .",
    "there are naturally defined reductions of one total polynomial search problem to another .",
    "this enables us to study classes of these problems closed under reductions and a number of important classes have been defined @xcite .",
    "these classes are useful for classification of specific search problems . in proof complexity",
    "such classes are used to characterize certain sentences provable in fragments of bounded arithmetic ( see , e.g. , @xcite ) .",
    "the structure of the quasiorder of polynomial reducibility has not been much studied , except for specific classes of problems .",
    "one can easily show that for every finite set of total polynomial search problem there is another one to which all are reducible . since the condition of totality is not syntactical , we are not able to prove that there is a greatest element in this quasiorder , i.e. , that there is a complete total polynomial search problem .",
    "we conjecture that there is none .",
    "in this paper we prove that every total polynomial search problem is reducible to the herbrand consistency search for some consistent sentence @xmath0 .",
    "this means that herbrand consistency search problems can have arbitrary high complexity in the hierarchy of total polynomial search problems .",
    "we also prove that polynomial reducibility reflects the strength of consistent sentences in the sense that if a universal sentence @xmath3 logically follows from @xmath0 , then the herbrand consistency search for @xmath3 is reducible to herbrand consistency search for @xmath0 .",
    "this is in line of our project to find connections between provability and computational complexity , see section  6.4 of  @xcite .",
    "we will also define herbrand consistency search for general sentences in prenex form , but the relation between provability and reducibility of the corresponding herbrand consistency search problems is not clear for sentences that are not universal .    the conjecture that there are no complete total polynomial search problems can be partially justified by showing an oracle with respect to which it holds true . since we have not found this result in the literature , we present it in the last section .",
    "we will consider first order logic without equality , but constants and function symbols will play an important role . let @xmath14 be an existential sentence ( where @xmath15 are all variables in @xmath16 ) .",
    "_ herbrand s theorem _ states that @xmath17 is provable ( logically valid ) if and only if there exist terms @xmath6 , @xmath18 , for some @xmath9 , @xmath19 such that @xmath20 is a propositional tautology ( see , e.g. , @xcite )",
    ". we will study the dual version of this statement : a universal sentence @xmath21 is consistent if and only if for all families of terms @xmath6 , @xmath18 , @xmath22 @xmath23 is satisfiable as a propositional formula ( i.e. , we can assign truth values to the atomic formulas so that the truth value of the conjunction is truth ) .",
    "a general sentence in a prenex form can be transformed into a universal sentence by skolemization , which we denote by @xmath24 where we use bars to denote strings of symbols and @xmath25 are new function symbols .",
    "if @xmath0 is @xmath26 , where the sentences @xmath27 are in prenex form , then we define @xmath28 to be @xmath29 ( where each term uses different function symbols ) . clearly , @xmath30 , but the opposite is not true in general . for the sake of simplicity",
    ", we will only define herbrand consistency search for conjunctions of prenex sentences , although herbrand s theorem has been proved for general sentences .",
    "let @xmath0 be a consistent sentence which is a conjunction of sentences in prenex form .",
    "let @xmath31 be the matrix ( the quantifier - free part ) of the skolemization of @xmath0 .",
    "then @xmath32 , the _ herbrand consistency search for @xmath0 _ , is the following total polynomial search problem :    given terms @xmath6 in the language of @xmath5 , @xmath18 , @xmath19 , find a truth assignment to the atomic subformulas occurring in @xmath33 , for @xmath18 , that makes @xmath8 true .",
    "_ example 1 . _",
    "consider an axiomatization of the theory of dense linear orderings .",
    "using a skolem function @xmath34 , we can present it as a universal theory with the axioms ( stated without the universal quantifiers ) @xmath35 plus the identity and equality axioms . let @xmath36 be the conjunction of these axioms .",
    "given terms @xmath37 , @xmath38 , @xmath39 , we can easily ( certainly in polynomial time ) find truth assignments to the atomic formulas @xmath40 and @xmath41 such that the conjunction @xmath42 becomes true . to find such an assignment we need only to find an interpretation of the terms in a finite linear ordering and then to assign the truth values according to this interpretation .",
    "to find such an interpretation , we start by ordering the variables of the terms @xmath37 in an arbitrary way",
    ". then we gradually extend the ordering to more complex subterms of the terms @xmath37 . specifically , having an interpretation of terms @xmath43 and @xmath16 and a non - interpreted term @xmath44 , we place @xmath44 on an arbitrary position strictly between @xmath43 and @xmath16 .",
    "let @xmath0 be a prenex form sentence axiomatizing a fragment of peano arithmetic .",
    "consider a skolemization of @xmath0 .",
    "if @xmath0 is sufficiently complex , some skolem functions may be difficult to compute , or they even may be non - computable . then finding interpretation in a finite part of the natural numbers may also be difficult .",
    "note , however , that this does not imply that finding a satisfying truth assignment must be difficult .",
    "in particular , finding such an assignment is always doable in nondeterministic polynomial time whatever the complexity of the skolem functions is .",
    "a _ total polynomial search problem _ is defined by a binary relation @xmath11 computable in polynomial time and a polynomial @xmath45 such that for every @xmath13 there exists @xmath12 such that @xmath46 and @xmath11 .",
    "the task is , for a given @xmath13 , to find a @xmath12 satisfying the two conditions above .",
    "here we use @xmath47 to denote the length of @xmath13 , i.e. , the number of bits in an encoding of @xmath13 . in the following definition",
    "we will omit polynomial bounds on @xmath12s and assume that they are implicit in @xmath2 and @xmath48 .",
    "let @xmath2 and @xmath48 be total polynomial search problems .",
    "we say that @xmath2 is _ polynomially reducible _ to @xmath48 if @xmath2 can be solved in polynomial time using an oracle that gives solutions to @xmath48 .",
    "we say that @xmath2 is _ many - one polynomially reducible _ to @xmath48 , if it is polynomially reducible using one query to the oracle for @xmath48 .",
    "clearly , both relations are reflexive and transitive .",
    "note that if * p*=*np * , then every search problem is reducible to every other one",
    ". hence we can only prove non - reducibility assuming some conjectures in computational complexity .",
    "[ t-1 ] for every total polynomial search problem @xmath2 , there exist a consistent universal sentence @xmath0 such that the problem @xmath2 is many - one polynomially reducible to @xmath32 .",
    "given a total polynomial search problem @xmath2 , the sentence @xmath0 will express that @xmath2 is total .",
    "this can , certainly , be done in various ways , but it does not automatically guarantee that we can reduce @xmath2 to @xmath32 .",
    "therefore we have to describe the formalization in more detail .",
    "we start with a brief high - level overview of the proof .",
    "we will take a turing machine @xmath49 that decides in polynomial time the relation @xmath2 and express that for a given @xmath13 there exists @xmath12 and an accepting computation of @xmath49 on the inputs @xmath13 and @xmath12 .",
    "thus the first step is to define terms that will represent an input word @xmath13 .",
    "then we need to ensure that the bits of @xmath13 are encoded into the truth values of some atomic formulas . to this end",
    "we use an elementary theory of the successor function @xmath48 and use terms ( numerals ) @xmath50 as indices of a one dimensional array .",
    "specifically , we use atomic formulas @xmath51 to determine the bits of @xmath13 ( @xmath51 false means @xmath52 , @xmath51 true means @xmath53 ) . a computation of @xmath49 can be represented by a two - dimensional array with entries in a finite alphabet .",
    "the elements of the alphabet can be encoded by bit strings of length @xmath54 for some constant @xmath54 .",
    "so we represent the computation by @xmath54 ternary relations @xmath55 .",
    "the second part of the input @xmath12 will be implicitly encoded in the array . given a term @xmath43 representing an input word @xmath13",
    ", the term @xmath56 , where @xmath57 is a function symbol , will denote the object representing the computation .",
    "thus the bits of the array corresponding to @xmath56 will be defined by the truth values of @xmath58 .",
    "the matrix of @xmath0 will be a conjunction of several formulas which we can view as axioms of a simple theory describing computations of @xmath49 .",
    "one of the axioms says that @xmath49 accepts , so the implicitly encoded @xmath12 must be such that @xmath11 holds true .",
    "it will not be hard to see that we need only a polynomial number of term instances of the axioms in order to guarantee that the truth values encode a computation on the input word correctly .",
    "in fact these term instances can easily be defined from the input word .",
    "the implicitly encoded @xmath12 can also be easily read from the truth values , thus the construction gives a many - one polynomial reduction .",
    "now we describe the formalization in more detail , but since it is fairly routine , we leave some parts to the reader .",
    "let a total polynomial search problem be given by a relation @xmath2 computable in polynomial time .",
    "so we assume that for every @xmath13 there exists a @xmath12 such that @xmath11 and the length of @xmath12 is bounded by a polynomial in the length of @xmath13 .",
    "let @xmath49 be a ( deterministic ) turing machine that in polynomial time decides the relation @xmath11 .",
    "we will also assume that @xmath49 has a certain form that will make the formalization easier .",
    "specifically , we will assume the following properties of @xmath49 .    for given @xmath59",
    ", @xmath49 always stops after @xmath60 steps , where @xmath45 is some polynomial , provided that the input word @xmath13 is coded appropriately ( see below ) .",
    "this means that it reaches one of the two final states , one of which is the accepting state and the other is the rejecting state .",
    "the tape of @xmath49 is infinite in one direction .",
    "the squares of the tape will be indexed by @xmath61 .",
    "we will view squares as having @xmath54 registers indexed @xmath62 ; every register contains @xmath63 or @xmath64 .",
    "the contents of a square encode the symbol on the tape , the presence / non - presence of the head and the state of the machine .",
    "registers 1 and 2 will be used to encode @xmath13 .",
    "the content of registers 1 are the bits of @xmath13 and registers 2 determine the end of the word @xmath13 ( the first @xmath64 in register 2 is in the first square after the end of @xmath13 ) .",
    "the input word @xmath12 will be coded by registers 3 and 4 in the same way .",
    "an occurrence of 1 in register 5 marks the position of the head of the machine .",
    "initially all registers with numbers greater than 5 contain zeros .",
    "registers 5 contain only one 1 and this is in the square 0 .",
    "register 6 will be used to determine that @xmath49 has stopped and rejected ; i.e. , if 1 occurs in any of the registers 6 , then the machine rejects .",
    "the machine starts by looking for the mark that determines the end of @xmath13 .",
    "after that it looks for the mark that determines the end of @xmath12 . if it does not find it in the given polynomial limit , it will stop and reject .",
    "if the mark is all right , the machine computes the relation @xmath11 , i.e. , it will stop and accept iff the relation holds true .",
    "our sentence @xmath0 will use relation symbols @xmath65 , @xmath66 , for @xmath67 , constants @xmath68 , and function symbols @xmath69 .",
    "the sentence will be a universal closure of formulas that we present in a form of a finite number of axioms .",
    "first we need    the axioms of identity and the axiom of equality for @xmath48 @xmath70 we do not postulate the axioms of equality for other function and relation symbols , since we only need them to derive the inequalities in lemma  [ la ] .",
    "note that these axioms can be stated using three variables , say , @xmath71 .",
    "the symbol @xmath48 represents the successor function , so we postulate the usual axioms    @xmath72 ,  @xmath73 .",
    "we leave the proof of the following easy fact to the reader .",
    "[ la ] the propositions @xmath74 for all @xmath75 , @xmath76 are derivable using propositional logic from the term instances of axioms 1 . and 2 .",
    "for all terms of the form @xmath77 , @xmath78 .    next we need some axioms in order to be able to write down terms that represent input words @xmath13 .",
    "the intended interpretation of the predicate @xmath79 is : the @xmath80-th bit of @xmath13 is @xmath63 if @xmath51 is false , and @xmath64 otherwise .",
    "the constant @xmath81 represents the empty word and @xmath82 represents the length of a binary word @xmath13 .",
    "therefore our first axiom is    @xmath83 . the functions @xmath84 and @xmath85 add bits @xmath63 and @xmath64 at the end of the word .",
    "= @xmath86 + @xmath87 + @xmath88 .",
    "= @xmath89 + @xmath90 + @xmath91 .    thus given a word @xmath92 ,",
    "the term @xmath93 represents it in our theory .",
    "we need also to show that this fact has a propositional proof using a small number of instances of the axioms .",
    "[ lb ] let @xmath94 .",
    "the propositions @xmath95 and @xmath96 are derivable using propositional logic from term instances of axioms 1.-5 . for terms",
    "@xmath77 , @xmath97 , and @xmath98 .",
    "( we denote by @xmath99 the empty symbol , and @xmath100 stands for @xmath101 . )    by induction construct such proofs for all subterms of @xmath43 .",
    "the induction step is done using lemma  [ la ] and axioms 4 . and 5 .",
    "we represent a computation of the machine by a two dimensional array where each entry has @xmath54 registers , each register containing one bit .",
    "the first index is time , the second is a position on the tape .",
    "the content of the @xmath102-th register in time @xmath103 and position @xmath104 is determined by a predicate @xmath55 .",
    "the variable @xmath105 stands for the entire array .",
    "the sentence @xmath0 will express the fact that , for every @xmath13 , there exists @xmath12 such that @xmath49 accepts the input @xmath106 .",
    "we do not need to mention @xmath12 explicitly , because it is encoded in the array @xmath105 .",
    "we use skolemization to eliminate the existential quantifier , thus the array will be represented by @xmath107 .",
    "the initial configuration of the machine is formalized by the following axioms .",
    "@xmath108 , @xmath109 .",
    "( clearly , the predicate @xmath110 is dispensable and can be replaced by @xmath111 , but it would complicate the presentation above . ) the second input is encoded in the same way using @xmath112 and @xmath113 , but we do not need any axioms about it .",
    "@xmath114 , @xmath115 ,    @xmath116 , for @xmath117 .",
    "the transition function is formalized by axioms of the form :    @xmath118 , + @xmath119 , + for @xmath67 , where @xmath120 and @xmath121 are propositions composed from atomic formulas of the form @xmath122 , @xmath123 , repspectively , @xmath124 , @xmath125 , @xmath126 for @xmath127 .",
    "finally , we postulate that the machine never rejects the input :    @xmath128 .",
    "let @xmath129 be the conjunction of the axioms 1.-10 .",
    ", and let @xmath0 be @xmath130 .    to show that @xmath0 satisfies the theorem",
    ", we have first to show that @xmath0 is consistent . to this end",
    "we take a function @xmath131 such that @xmath132 is true for all @xmath13 .",
    "we interpret the predicate symbols @xmath110 , @xmath66 , for @xmath67 , constants @xmath68 , and function symbols @xmath133 as explained above .",
    "the function symbol @xmath107 represents the function that maps a given string @xmath13 to the array encoding the computation of the machine @xmath49 on the input @xmath134 .",
    "hence @xmath0 is consistent .",
    "second , we have to construct a reduction from the search problem to finding truth assignments of the term instances of @xmath5 .",
    "the reduction is defined as follows .",
    "let @xmath135 be given .",
    "let @xmath136 denote the term @xmath137 for @xmath138 . finding a solution @xmath139 such that @xmath140 will be reduced to finding a truth assignment to the atomic formulas of @xmath141 that makes this formula true .",
    "we will denote this formula by @xmath142 .",
    "note that we need the second conjunction to run over all numbers @xmath138 , because we need to derive formulas from lemmas  [ la ] and [ lb ] , but the instances of the axioms 6.-10 .",
    "for @xmath143 , @xmath144 will not be used .",
    "it is clear that @xmath142 can be constructed in polynomial time , so we only need to show that from any satisfying assignment @xmath145 , we can construct some @xmath139 in polynomial time such that @xmath140 .",
    "we start by observing that according to lemma  [ la ] , @xmath146 iff @xmath147 for @xmath148 .",
    "similarly for the atomic formulas @xmath149 for @xmath150 , so the truth values for these formulas represent @xmath151 . by axioms",
    ", @xmath151 is also correctly represented by the truth values of @xmath152 and @xmath153 .",
    "the axioms 7.-9 .",
    "then ensure that the truth values of @xmath154 , for @xmath155 represent a computation of the turing machine @xmath49 on @xmath151 and some @xmath139 , where @xmath139 is coded by the truth values of @xmath156 and @xmath157 . since the machine must stop within the limit @xmath158 and the instances of the axiom 10 .",
    "ensure that it does not reject , the computation must be accepting .",
    "hence the string @xmath139 is such that @xmath140 .",
    "we just note that @xmath139 can easily be constructed from the truth assignment @xmath145 .",
    "in order to show connection between provability of @xmath159 and polynomial reducibility of @xmath160 to @xmath32 , we prove that provability implies polynomial reducibility if @xmath3 is universal .",
    "[ prop4.1 ] let @xmath0 be a consistent sentence in a prenex form .",
    "let @xmath3 be a universal sentence such that @xmath161 .",
    "then @xmath160 is polynomially reducible to @xmath32 .",
    "note that @xmath30 and @xmath162 is the same as @xmath32 .",
    "hence we can w.l.o.g .",
    "assume that @xmath0 is universal .",
    "let @xmath0 and @xmath3 be @xmath163 and @xmath164 and assume that @xmath161 .",
    "then we have @xmath165 the herbrandization of this sentence is @xmath166 where @xmath167 are new constants . according to herbrand s theorem , there exist terms @xmath6 such that _ i ( ( _ i1_ik)(c_1c_l ) ) is a propositional tautology .",
    "let @xmath168 , @xmath169 , be terms in the language of @xmath170 .",
    "we substitute these terms into ( [ e - x ] ) for @xmath167 .",
    "the resulting formulas propositionally imply the following formula @xmath171 where @xmath172 $ ] . thus in order to satisfy @xmath173 , it suffices to satisfy @xmath174 . in general , the latter formula is not an instance of @xmath32 because @xmath3 may use other function symbols .",
    "however , note that the role of terms is only to determine which atomic formulas are same and which are different . hence to get an instance of @xmath32 that is essentially the same propositional formula , it suffices to replace the maximal terms that are not in the language of @xmath0 by variables ( the same variables for the same terms , of course ) .",
    "we will prove a similar result for existential sentences .",
    "note that @xmath175 is trivial , because the skolemization of the sentence does not contain any variables , hence it is a finite problem .",
    "thus one has to state the result in a slightly different way .",
    "[ lem4.2 ] let @xmath0 be a consistent universal sentence , let @xmath176 be an open formula with @xmath177 free variables and let @xmath178 be constants not occurring in @xmath0 and @xmath179 .",
    "then @xmath180 is polynomially reducible to @xmath32 .",
    "let @xmath0 be @xmath181 .",
    "let an instance of @xmath180 be given ; i.e. , we want to find a satisfying assignment for _ i=1^n ( ( _ i1 _ ik)((_i1_im)(c_1c_m ) ) ) for given terms @xmath6 , @xmath182 .",
    "we suppose that we have an oracle for @xmath32 .",
    "denote by @xmath183 .",
    "let @xmath184 denote @xmath57 where we substitute @xmath185 for @xmath18 .",
    "now we apply our oracle to @xmath186 the terms in this formula may contain constants @xmath187 , which are not in the language of @xmath0 , but we can interpret them as variables to satisfy the formal definition of @xmath32 .",
    "let @xmath145 be a truth assignment for the atomic formulas of @xmath188 that makes the formula true .",
    "extend @xmath145 to an arbitrary assignment that gives truth values also to those atomic formulas of @xmath189 and @xmath190 , @xmath18 , for which @xmath145 is not defined ( e.g. , let they be all false ) .",
    "now we consider two cases .",
    "the assignment @xmath191 satisfies the formula ( [ e2 ] ) .",
    "then we are done .",
    "assume it does not .",
    "then , for some @xmath80 , it satisfies @xmath190 .",
    "we define a truth assignment @xmath192 for the formula ( [ e2 ] ) using the part of @xmath191 that assigns values to @xmath184 and @xmath193 .",
    "specifically , given @xmath194 , an atomic subformula of ( [ e2 ] ) , or an atomic subformula @xmath195 , we assign to it the values that @xmath191 gives to @xmath196 .",
    "thus @xmath192 satisfies @xmath197 , because @xmath191 satisfies @xmath184 , and it also satisfies @xmath198 , because @xmath191 satisfies @xmath190 . thus @xmath192 satisfies ( [ e2 ] ) .",
    "let @xmath0 be a consistent sentences in a prenex form @xmath199 and let @xmath179 be an an open formula with @xmath177 variables .",
    "suppose that @xmath200 .",
    "then @xmath201 is polynomially reducible to @xmath32 .",
    "the skolemization of the sentence @xmath202 is the universal sentence @xmath203 where @xmath178 are new constants .",
    "this sentence is provable from @xmath204 , because @xmath0 proves @xmath205 .",
    "thus , according to proposition  [ prop4.1 ] , @xmath160 is polynomially reducible to @xmath180 .",
    "this problem in turn is reducible to @xmath0 by lemma  [ lem4.2 ] .",
    "the polynomial reducibility of @xmath160 , hence also of @xmath206 , follows by transitivity of reducibility .",
    "since herbrand consistency search is defined for sentences , we will only consider finitely axiomatized theories .",
    "if @xmath207 contains a sufficiently strong fragment of arithmetic , or set theory , and @xmath207 is sound , we can formalize polynomial time computations in @xmath207 .",
    "then we can associate with @xmath207 the class of all search problems that are provably total in @xmath207 .",
    "these are problems that can be defined by a formula @xmath208 such that @xmath209 . in order to avoid trivialization",
    ", we have to restrict the formulas @xmath208 to a class of formulas that define polynomial time relations in a natural way .",
    "some theories have symbols for every polynomial time computable relation , e.g. , cook s @xmath210  @xcite .",
    "we can also use formulas that define @xmath10 relations , e.g. , buss s @xmath211 in bounded arithmetic @xmath212  @xcite .",
    "then the problem of characterizing provably total search problems is , essentially , equivalent to the problem of characterizing provable sentences that are universal closures of @xmath211 formulas .",
    "since @xmath213 is a polynomial search problem associated with @xmath207 , a natural question arises , whether or not @xmath213 is in the class of polynomial search problems provably total in @xmath207 .",
    "( here we assume that @xmath207 is axiomatized by sentences in prenex form . )",
    "we state this question in a slightly more general way .",
    "let @xmath207 be a finitely axiomatized theory , sufficiently strong to be able to formalize polynomial time computations .",
    "is there a polynomial search problem @xmath2 that is provably total in @xmath207 and such that @xmath213 is polynomially reducible to @xmath2 ?",
    "we note that if @xmath207 is sufficiently strong , then @xmath207 does not prove the totality for the natural formalization of @xmath213 . indeed ,",
    "if @xmath207 proves herbrand s theorem , then @xmath207 can prove that natural provability ( in hilbert - style calculi , sequent calculi with cuts , etc . )",
    "is equivalent to provability in the sense of herbrand .",
    "hence the sentence expressing the totality of @xmath213 is equivalent to the formal consistency of @xmath207 .",
    "thus by gdel s incompleteness theorem , it is not provable .    a natural approach to solving",
    "the problem positively is to try to express @xmath213 in the following way : @xmath214 where @xmath208 is the natural formalization of @xmath213 and @xmath215 expresses that @xmath105 is a proof of contradiction from @xmath207 .",
    "the task of this search problem is either to find a satisfying assignment for term instances of the matrix @xmath5 of @xmath207 as required by @xmath213 , or a proof of contradiction . if @xmath207 is consistent , then this formula is equivalent to @xmath216 , hence defines @xmath213 .",
    "if , moreover , @xmath207 is sufficiently strong , then it does prove @xmath217 , but this does not suffice .",
    "we need @xmath12 and @xmath105 to be polynomially bounded : @xmath218 for some polynomial @xmath45 .",
    "the problem is only to bound @xmath219 , since @xmath220 is polynomially bounded according to the definition of search problems .",
    "thus we need ( to be able to prove from @xmath207 ) that if for some @xmath13 , @xmath216 is unsatisfiable , then there exists @xmath105 , a proof of contradiction from @xmath207 , of at most polynomial length .",
    "if @xmath216 is unsatisfiable , we know how to construct a contradiction  we have an unsatisfiable propositional formula , hence we can derive a contradiction in propositional calculus .",
    "however , we do not know if such a proof can have polynomial length .",
    "thus we do not see how to use this approach to solve the problem and we tend to conjecture that the answer is negative .",
    "we conjecture that there is no complete total polynomial search problem . in order to support this conjecture",
    ", we will construct an oracle relative to which there is no complete polynomial search problem .",
    "we will only prove the proposition for many - one reductions , but the same argument can surely be used for general reductions .",
    "there exists an oracle @xmath2 such that relative to @xmath2 , there is no complete total polynomial search problem with respect to many - one polynomial reductions .",
    "we start by observing that the condition that @xmath2 has a many - one polynomial reduction to @xmath48 can be equivalently defined as follows : there exist polynomial time computable functions @xmath221 and @xmath222 such that for all @xmath13 and @xmath12 @xmath223 holds true .",
    "the oracle that we construct will be represented by a ternary relation @xmath224 on binary strings .",
    "we will view @xmath45 as a parameter that specifies a binary relation @xmath225 that may be a total polynomial search problem .",
    "we will construct @xmath2 so that the condition @xmath226 is satisfied for all @xmath13 and @xmath12 .",
    "let @xmath208 and @xmath227 be definitions of a binary relation and two functions by means of polynomial time oracle turing machines .",
    "given an oracle @xmath2 , we denote by @xmath228 and @xmath229 the corresponding relation and functions .",
    "we will assume that the conditions @xmath230 and latexmath:[$|g(x , y)|\\leq    construct @xmath2 so that the following holds true for every @xmath208 :    either @xmath228 is not total , i.e. , xy  _ r(x , y ) ,    or for some @xmath45 , @xmath232 is total , but not reducible to @xmath228 , i.e. , for every @xmath227 , xy  r_p(x , y ) xy  ( _ r(f_r(x),y)r_p(x , g_r(x , y ) ) ) .",
    "our procedure will have two loops ",
    "outer and inner . in the outer loop",
    "we go over all definitions @xmath208 ; in the inner one we go over all pairs of definitions of @xmath227 . in the process",
    "we will define @xmath2 gradually for more and more triples @xmath233 . at each stage @xmath2",
    "is defined only for a finite number of parameters @xmath45 . at the beginning of the @xmath80th outer loop we take @xmath234",
    "such that no value of @xmath235 has been fixed so far and gradually define @xmath235 .",
    "at each stage of this loop @xmath236 will be defined only for a finite number of pairs @xmath237 .",
    "the outer loop serves us to diagonalize over definitions @xmath208 , which means that at the end of round @xmath80 the conditions 1 . and 2 .",
    "above will be satisfied for the @xmath80th @xmath208 .",
    "the partial definition of @xmath2 will be denoted by @xmath238 .",
    "similarly , in the inner loop we diagonalize over functions @xmath227 .",
    "let @xmath239 denote the @xmath240th step of the inner loop inside of the loop @xmath80",
    ". then we will get that either 1",
    ". holds true and the loop stops , or 2",
    ". holds true for the @xmath240th pair @xmath227 .",
    "suppose we are in the outer loop @xmath80 .",
    "at the beginning of each inner loop @xmath240 we assume the following properties of @xmath241 , the oracle so far defined .",
    "for every @xmath13 for which some value of @xmath235 has been fixed , there exists some @xmath12 , such that @xmath242 ( and @xmath243 ) .",
    "let @xmath244 be a sufficiently large number and let @xmath245 , @xmath246 be a string such that the following conditions are satisfied .",
    "@xmath247 has not been fixed for any @xmath12 and ,    for every @xmath248 , @xmath249 , the turing machines of @xmath250 and @xmath251 can not query all strings @xmath12 of length @xmath244 when used on the inputs @xmath252 ( because of the polynomial bounds on the computations of @xmath250 and @xmath251 ) .",
    "( the string @xmath245 can be the string of @xmath244 zeros . )",
    "first we extend the oracle so that for every @xmath13 , @xmath253 , there is some @xmath12 , @xmath254 , such that @xmath106 is in @xmath232 .",
    "this is possible , because we assume that for the strings @xmath13 used in previous stages this has already been ensured .",
    "we now consider two cases .",
    "the currently defined oracle can be extended so that condition  ( [ e4.3 ] ) is satisfied for @xmath245 and some @xmath12 , ( @xmath255 ) . in this case",
    "we fix the minimum number of values of @xmath2 that are needed to ensure this condition .",
    "then it is still possible to add pairs @xmath106 to @xmath232 to ensure @xmath256 for all strings @xmath13 so far used .",
    "the opposite is true .",
    "this means that for every extension of the so far specified oracle @xmath2 , and every @xmath12 , @xmath255 , the implication @xmath257 is satisfied . in particular , the implication will be satisfied if we fix @xmath2 so that for all @xmath105 , @xmath258 , @xmath259 .",
    "it follows that @xmath260 for all @xmath12 , @xmath261 .",
    "hence ( [ e4.1 ] ) holds true for all further extension of so far defined  @xmath2 .",
    "we still do not fully understand the relation between provability and polynomial reducibility of the corresponding herbrand consistency search problems .",
    "the most important problem is :      we have only been able to solve the problem in two special cases : for universal sentences @xmath3 and for existential sentences @xmath3 . if the answer is negative , then the concept of herbrand consistency is not well - behaved . in such a case",
    "it would be better to compare the provability of @xmath159 with the reducibility of @xmath160 to @xmath262 for all prenex sentences @xmath179 derivable from  @xmath0 .",
    "1 s. r. buss : bounded arithmetic .",
    "bibliopolis , naples , 1986 .",
    "s. r. buss .",
    "on herbrand s theorem . in logic and computational complexity , lecture notes in computer science 960 , 1995 , springer - verlag , pp .",
    "195 - 209 .",
    "s. r. buss : an introduction to proof theory , in handbook of proof theory , edited by s. r. buss .",
    "elsevier , amsterdam , 1998 , pp . 1 - 78 .",
    "buss and j. krajek .",
    "an application of boolean complexity to separation problems in bounded arithmetic , proc . of the london math .",
    "soc . 69(3):1 - 21 , 1994 .",
    "s. a. cook : feasibly constructive proofs and the propositional calculus .",
    "7th annual symp . on theory of computing 1975 ,",
    "83 - 97 d. s. johnson , c. papadimitriou , and m. yannakakis : how easy is local search ?",
    "journal of computer system science , 37(1 ) : 79 - 100 , 1988 p. pudlk : on the length of proofs of finitistic consistency statements in first order theories . in : logic colloquium 84 , north holland p.c .",
    ", 1986 , pp .",
    "165 - 196 .",
    "p. pudlk : logical foundations of mathematics and computational complexity .",
    "springer , 2013 .",
    "a. skelley and n. thapen : the provably total search problems of bounded arithmetic",
    ". proceedings of the london mathematical society , vol 103(1):106 - 138 , 2011 ."
  ],
  "abstract_text": [
    "<S> suppose that @xmath0 is a consistent sentence . then there is no herbrand proof of @xmath1 , which means that any herbrand disjunction made from the prenex form of @xmath1 is falsifiable . </S>",
    "<S> we show that the problem of finding such a falsifying assignment is hard in the following sense . for every total polynomial search problem @xmath2 </S>",
    "<S> , there exists a consistent @xmath0 such that finding solutions to @xmath2 can be reduced to finding a falsifying assignment to an herbrand disjunction made from @xmath1 . </S>",
    "<S> it has been conjectured that there are no complete total polynomial search problems . </S>",
    "<S> if this conjecture is true , then for every consistent sentence @xmath0 , there exists a consistence sentence @xmath3 , such that the search problem associated with @xmath3 can not be reduced to the search problem associated with @xmath0 . </S>"
  ]
}