{
  "article_text": [
    "the algorithm presented in this paper solves the problem of * numerically * determining the decomposition of a finite dimensional irreducible unitary linear representation ( ` irrep ' in what follows ) of a group with respect to the unitary irreducible representations ( irreps ) of a given subgroup .",
    "more precisely , let @xmath1 be a compact lie group and @xmath2 a finite dimensional irreducible unitary representation of it , i.e. , @xmath3 is a group homomorphism that satisfies the following three conditions : @xmath4 here , @xmath5 is a complex hilbert space with inner product @xmath6 , @xmath7 is the group of unitary operators on @xmath5 , and @xmath8 stands for the adjoint .    conditions ( 1 )  ( 3 ) above define a * unitary representation * @xmath9 of the group @xmath1 .",
    "the representation is said to be * irreducible * if there are no proper invariant subspaces of @xmath5 , i.e. , if any linear subspace @xmath10 is such that @xmath11 for all @xmath12 , then @xmath13 is either @xmath14 or @xmath5 .",
    "since the group @xmath1 is compact , any irreducible representation of @xmath1 will be finite - dimensional with dimension say @xmath15 ( @xmath16 ) .    consider a closed subgroup @xmath17 .",
    "the restriction of @xmath18 to @xmath19 will define a unitary representation of @xmath19 which is reducible in general , that is , it will possess invariant subspaces @xmath20 such that @xmath21 for all @xmath22 .",
    "if we denote by @xmath23 the family of equivalence classes of irreps of @xmath19 ( recall that two unitary representations of @xmath19 , @xmath24 and @xmath25 , are equivalent if there exists a unitary map @xmath26 such that @xmath27 for all @xmath28 ) , then @xmath29 where the @xmath30 are non - negative integers , @xmath31 denotes a subset in the class of irreps of the group @xmath19 , i.e. , each @xmath32 denotes a finite dimensional irrep of @xmath19 formed by the pair @xmath33 , and @xmath34 denotes the direct sum of the linear space @xmath35 with itself @xmath30 times .",
    "thus , the family of non - negative integer numbers @xmath30 denotes the multiplicity of the irreps @xmath36 in @xmath9 .",
    "the numbers @xmath30 satisfy @xmath37 where @xmath38 and the invariant subspaces @xmath20 have dimension @xmath39 . notice that the unitary operator @xmath40 will have the corresponding block structure : @xmath41 where @xmath42 .",
    "the problem of determining an orthonormal basis of @xmath5 adapted to the decomposition will be called the * clebsch  gordan problem * of @xmath9 with respect to the subgroup @xmath19 . to be more precise , the clebsch  gordan problem of the representation @xmath18 of @xmath1 in @xmath5 with respect to the subgroup @xmath19 consists in finding an orthonormal basis of @xmath5 , @xmath43 , such that each family @xmath44 , for a given @xmath32 , defines an orthonormal basis of @xmath35 .",
    "thus , given an arbitrary orthonormal basis @xmath45 , we compute the @xmath46 unitary matrix @xmath47 with entries @xmath48 such that @xmath49 the coefficients @xmath50 of the matrix @xmath47 are usually expressed as the symbol @xmath51 and are called the * clebsch  gordan coefficients * of the decomposition .",
    "the original clebsch  gordan problem has its origin in the composition of two quantum systems possessing the same symmetry group : let @xmath52 and @xmath53 denote hilbert spaces corresponding , respectively , to two quantum systems @xmath54 and @xmath55 , which support respective irreps @xmath56 and @xmath57 of a lie group @xmath1 . then , the composite system , whose hilbert space is @xmath58 , supports an irrep of the product group @xmath59 .",
    "the interaction between both systems makes that the composite system possesses just @xmath1 as a symmetry group by considering the diagonal subgroup @xmath60 of the product group . the tensor product representation @xmath61 will no longer be irreducible with respect to the subgroup @xmath62 and we will be compelled to consider its decomposition in irrep components .",
    "a considerable effort has been put in computing the clebsch ",
    "gordan matrix for various situations of physical interest .",
    "for instance , the groups @xmath63 have been widely discussed ( see @xcite , @xcite and references therein ) since when considering the groups @xmath64 and @xmath0 , the clebsch ",
    "gordan matrix provides the multiplet structure and the spin components of a composite system of particles ( see @xcite , @xcite ) . however , all these results depend critically on the algebraic structure of the underlying group @xmath1 ( and the subgroup @xmath19 ) and no algorithm was known so far to efficiently compute the clebsch  gordan matrix for a general subgroup @xmath17 of an arbitrary compact group @xmath1 .    on the other hand ,",
    "the problem of determining the decomposition of an irreducible representation with respect to a given subgroup has not been addressed from a numerical point of view .",
    "the multiplicity of a given irreducible representation @xmath33 of the compact group @xmath1 in the finite - dimensional representation @xmath65 is given by the inner product @xmath66 where @xmath67 and @xmath68 , @xmath69 , denote the characters of the corresponding representations , and @xmath70 stands for the standard inner product of central functions with respect to the ( left - invariant ) haar measure on @xmath1 .",
    "hence if the characters @xmath71 of the irreducible representations of @xmath1 are known , the computation of the multiplicities becomes , in principle , a simple task .",
    "moreover , given the characters @xmath71 of the irreducible representations , the projector method would allow us to explicitly construct the clebsch  gordan matrix ( * ? ? ?",
    "4 ) . however ,",
    "if the irreducible representations of @xmath19 are not known in advance ( or are not explicitly described ) , there is no an easy way of determining the multiplicities @xmath30 .    again , at least in principle , the computation of the irreducible representations of a finite group could be achieved by constructing its character table , i.e. , a @xmath72 unitary matrix where @xmath73 is the number of conjugacy classes of the group , but again , there is no a general - purpose numerical algorithm for doing that .",
    "recent developments in quantum group tomography require dealing with a broad family of representations of a large class of groups , compact or not , and their subgroups ( see @xcite and references therein for a recent overview on the subject ) .",
    "quantum tomography allows to extend ideas from standard classical tomography to analyze states of quantum systems .",
    "one implementation of quantum tomography is quantum group tomography .",
    "quantum group tomography is based on quantum systems supporting representations of groups .",
    "such representations allow to construct the corresponding tomograms for given quantum states @xcite , @xcite , @xcite .",
    "hence it is becoming increasingly relevant to have new tools able to efficiently handle group representations and their decompositions .",
    "it turns out that it is precisely the ideas and methods from quantum tomography which provide the clue for the numerical algorithm presented in this work .",
    "more explicitly , * mixed adapted quantum states * , i.e. , density matrices * adapted * to a given representation , will be used to compute the clebsch  gordan matrix .",
    "section [ sec : preliminaries ] will be devoted to introduce the problem we want to solve .",
    "section [ sec : general_outline ] presents several results which will help us to show the correctness of the algorithm .",
    "the details of the numerical algorithm are contained in section [ the_algorithm : sec ] , while section [ sec : examples ] covers various examples and applications of the algorithm , among them , the decomposition of regular representations of any finite group and the decomposition of multipartite systems of spin particles .",
    "it is remarkable that the algorithm proposed here does not require an _ a priori _ knowledge of the irreducible representations of the groups and the irreducible representations themselves are returned as outcomes of the algorithm .",
    "this makes the proposed algorithm an effective tool for computing the irreducible representations of , in principle , any finite or compact group . for the sake of clarity ,",
    "most of the analysis will be done in the case of finite groups .",
    "however , it should be noted that all statements and proofs can be easily lifted to compact groups by replacing finite sums over group elements by the corresponding integrals over the group with respect to the normalized haar measure on it . some additional remarks and outcomes will be discussed at the end in section [ sec : discussion ] .",
    "a final contains numerical results for the examples addressed in section [ sec : examples ] .",
    "let @xmath1 be a finite group of order @xmath74 and let @xmath75 be a subgroup , not necessarily normal of @xmath1 , of order @xmath76 .",
    "we label the elements of @xmath1 as @xmath77 , where the first @xmath78 elements correspond to the elements of the subgroup @xmath19 , i.e. , @xmath79 . in what follows , a generic element in the group @xmath1 will be simply denoted by @xmath12 unless some specific indexing is required .",
    "let @xmath18 be a unitary irreducible representation of @xmath1 on the finite dimensional hilbert space @xmath5 , @xmath80 , and let @xmath81 , @xmath82 , be any given orthonormal basis of @xmath5 .",
    "we denote by @xmath83_{i , j=1}^{n}\\ ] ] the unitary matrix associated with @xmath84 , @xmath69 , in the chosen basis , i.e. , @xmath85 for every @xmath86 .",
    "the restriction of the representation @xmath18 to the subgroup @xmath19 , sometimes denoted by @xmath87 and called the _ subduced representation _ of @xmath18 to @xmath19 , will be , in general , reducible even if @xmath18 is irreducible .",
    "notice that the unitary matrix associated with @xmath88 , @xmath28 , is just a submatrix of @xmath89 obtained by restricting ourselves to the elements of the subgroup @xmath19 .    a mixed state on @xmath5 , also called _ density matrix _",
    ", is a @xmath46 normalized hermitian positive semidefinite matrix @xmath90 , i.e. , @xmath91 if the unitary representation @xmath18 of @xmath1 is irreducible , then any state @xmath90 can be written as @xmath92 to prove this formula one may use schur s orthogonality relations : @xmath93 where @xmath94 stands for the complex conjugate , and @xmath95 and @xmath96 denote , respectively , the entries of the unitary matrices @xmath97 and @xmath98 associated with the irreducible representations @xmath33 and @xmath99 of the group @xmath1 with respect to given arbitrary orthonormal bases in @xmath35 and @xmath100 .",
    "let us now consider a state @xmath90 satisfying the orthogonality relations @xmath101 clearly , because of eq . , such state verifies @xmath102    [ adapted_def ] a state @xmath90 in the hilbert space @xmath5 supporting an irrep of the group @xmath1 is said to be * adapted * to a closed subgroup @xmath19 if @xmath103 for @xmath104 .    in other words ,",
    "a state @xmath90 adapted to the subgroup @xmath19 of the finite group @xmath1 must be of the form @xmath105 even if the subduced representation @xmath87 is reducible . in view of the prominent role they will play in the algorithm ,",
    "let us now discuss briefly the role of the inner products @xmath106 in the realm of quantum theory : given a linear operator @xmath54 on @xmath5 and a state @xmath90 , the number @xmath107 is called the expected value of the operator @xmath54 in the state @xmath90 and is denoted consequently as @xmath108 .",
    "if the operator @xmath54 is self - adjoint , the expected value @xmath108 is a real number and it truly represents the expected value of measuring the observable described by the operator @xmath54 on a quantum system in the state @xmath90 .    in the language of quantum tomography , the group function @xmath109",
    "is defined by the coefficients in the expansion written in eq . ,",
    "@xmath110 and is called the _ characteristic function _ of the state @xmath90 associated with the representation @xmath65 or , depending on the emphasis , the _ smeared character _ of the representation @xmath18 with respect to the state @xmath90 ( see @xcite ) .",
    "one can easily check that the characteristic function @xmath111 is always positive semidefinite , i.e. , @xmath112 for all @xmath113 , @xmath114 and @xmath115 , and @xmath116 and @xmath117 .",
    "notice that if the state @xmath90 is @xmath118 , then the characteristic function @xmath111 is the standard character @xmath119 of the representation @xmath120 .",
    "moreover , if the representation @xmath120 is the trivial one , then @xmath121 for all @xmath12 .",
    "we are now in the position to specify which is the ultimate goal of our algorithm : computing the so - called _ clebsch  gordan matrix_.    [ cg_matrix_def ] let @xmath1 be a group , @xmath9 an irreducible unitary representation of @xmath1 and @xmath19 a closed subgroup of @xmath1 .",
    "the * clebsch  gordan matrix * associated with @xmath122 and @xmath9 is the @xmath46 matrix @xmath47 such that @xmath123{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } &   & \\mbox{\\huge{$0 $ } } &    \\\\                      &   &   & \\hspace{-1.7 cm } {   \\rotatebox{-46}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } }   &   &   \\\\                      & \\hspace{-1.8cm}\\mbox{\\huge{$0 $ } } & & & \\hspace{-1.4 cm } {   \\rotatebox{-46}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } }   &    \\\\                      &   &   &   &   &   \\hspace{-1.65cm}\\mathds{1}_{c_n}\\otimes   d^n(h ) \\end{pmatrix},\\ ] ] for every @xmath22 , where the @xmath124 are the matrices defined in @xmath125 , the @xmath126 , are the matrices associated with the irreps of the subgroup @xmath19 and @xmath127 stands for the matrix kronecker product defined as @xmath128{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & a_{1n}b \\\\",
    "a_{21}b   & \\hspace{-0.3 cm } a_{22}b & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&a_{2n}b\\\\ \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&\\hspace{-0.6 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } }    \\\\ \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&\\hspace{0.8 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } &    & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}\\\\   \\vspace{0.1cm}\\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.1em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.1em}\\hfill\\kern0pt } } } } & & \\hspace{0.3 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.10em}\\hfill\\kern0pt}}}}\\\\     a_{m1}b &   \\hspace{-0.3cm}a_{m2}b & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & a_{mn}b \\end{pmatrix}\\ ] ] for arbitrary matrices @xmath129 and @xmath55 .    since the unitary representation is unique ( modulo unitary transformations within each proper invariant subspace @xmath130 or permutations among the @xmath130 ) , the clebsch ",
    "gordan matrix is also unique ( except for such transformations ) , ( see @xcite for more detailed information about this ) .",
    "finally , let us specify the kind of adapted states we will be using in the algorithm .",
    "as we shall see , such states will have to satisfy certain nondegeneracy conditions :    given any adapted state @xmath90 , we know that , according to ( [ adapted ] ) , @xmath90 is a linear combination of the representations @xmath131 , so the clebsch ",
    "gordan matrix @xmath47 in definition [ cg_matrix_def ] will block - diagonalize @xmath90 in the form @xmath132{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } &   & \\mbox{\\huge{0 } } &    \\\\                      &   &   & \\hspace{-0.4 cm } {   \\rotatebox{-46}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } }   &   &   \\\\                      & \\hspace{-0.8cm}\\mbox{\\huge{0 } } & & & \\hspace{-0.1 cm } {   \\rotatebox{-46}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } }   &    \\\\                      &   &   &   &   &   \\hspace{-1.05cm}\\mathds{1}_{c_n}\\otimes   \\sigma^n \\end{pmatrix},\\ ] ] where each block @xmath133 , is a hermitian positive semidefinite matrix of the same dimension as the corresponding @xmath134 .",
    "now , consider the spectral decomposition of the matrices @xmath135 , i.e. , @xmath136 where the @xmath137 are orthonormal eigenvectors of @xmath135 within each proper subspace @xmath138    [ generic_def ] an adapted state @xmath90 is said to be * generic * if its eigenvalues have the minimum possible degeneracy , that is , @xmath139 for all @xmath140 and for all @xmath141 , @xmath142 .",
    "notice that the eigenvalues can not have what we might call minimal degeneracy since each @xmath143 has by construction multiplicity @xmath144 ( recall eq.([structure_rho ] ) ) . in the construction of the algorithm , a further concept of pair - wise genericity will be needed :    [ generic_pair_def ] a pair @xmath145 of adapted states is said to be * mutually generic * if they are both generic , in the sense of definition @xmath146 , and no eigenvector @xmath147 of the block @xmath148 of @xmath149 is an eigenvector of the corresponding @xmath150 of @xmath151 whenever @xmath152 , where @xmath153    of course , we exclude the case @xmath154 in which the proper invariant subspace has dimension one and therefore the eigenvectors must coincide .",
    "before we provide a detailed description of the decomposition algorithm we propose , let us first give a rough outline of how the algorithm is organized and , especially , why does it work .",
    "the final goal of the algorithm is to find the clebsch ",
    "gordan matrix @xmath47 which , as shown in definition [ cg_matrix_def ] , block - diagonalizes all the elements of the representation @xmath124 , @xmath22 . in other words ,",
    "the columns of @xmath47 provide orthonormal bases for all proper invariant subspaces @xmath155 _ which are common to all @xmath124 , @xmath22 _ ( and consequently , common to all adapted states ) .",
    "now , consider any fixed adapted state @xmath90 and any unitary matrix @xmath156 diagonalizing @xmath90 pointwise , i.e. , such that @xmath157 is diagonal .",
    "the idea underlying our algorithm is that since the columns of both @xmath156 and @xmath47 span the same proper invariant subspaces , they must be somehow related .",
    "this connection , which is crucial to our argument , will be made explicit in theorem  [ triple_v ] below , and implies that , after appropriate reordering of the columns of @xmath156 , any other adapted state ( more generally , any matrix which is a linear combination of the @xmath124 ) will be _ block - diagonalized _ by @xmath156 ( see corollary  [ transformation_any_state ] below ) .",
    "furthermore , the diagonal blocks one obtains have a very particular structure which , once identified in corollary  [ transformation_any_state ] , will be the key to extract the clebsch ",
    "gordan matrix @xmath47 out of @xmath156 via appropriate similarity transformations , described both in corollary  [ r_tilde : corollary ] and lemma  [ permutation : lemma ] .",
    "the following result is the foundation of the algorithm we describe in  [ the_algorithm : sec ] below :    [ triple_v ] let @xmath90 be any generic adapted state and let @xmath156 be any unitary matrix such that @xmath157 is diagonal .",
    "then @xmath158 where @xmath47 is the clebsch  gordan matrix , defined as in definition @xmath159 , @xmath160 is any permutation matrix , and @xmath161 , with @xmath162 given by @xmath163 for any set of @xmath164 unitary matrices @xmath165 , where @xmath166 is a set of eigenvectors of the matrices @xmath135 , @xmath167 , given in .",
    "* proof * : it follows from that @xmath168 for any choice of @xmath169 orthonormal bases @xmath170 , @xmath141 . recall that @xmath169 is the dimension of the invariant subspace @xmath35 or , equivalently , the number of rows and columns of the hermitian positive semidefinite matrices @xmath135 . on the other hand",
    ", @xmath30 is the multiplicity of that subspace , i.e. , the global multiplicity of the eigenvalues @xmath171 in the total matrix @xmath90 ( see ) .",
    "if we now construct unitary matrices @xmath172 such that their columns are the orthonormal vectors of the basis @xmath173 , then the matrix @xmath174 will diagonalize the matrix @xmath175 with its eigenvalues sorted as follows : @xmath176{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } &   & \\mbox{\\huge{0 } } &    \\\\                      &   &   & \\hspace{-0.26 cm } {   \\rotatebox{-47}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } &   &   \\\\                      & \\mbox{\\huge{0 } } & & & \\hspace{-0 cm } {   \\rotatebox{-47}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } &    \\\\                      &   &   &   &   &   \\hspace{-0.6cm}\\lambda_{n_\\alpha}^\\alpha\\mathds{1}_{c_\\alpha } \\end{pmatrix}=\\lambda^\\alpha\\,.\\ ] ] therefore , in view of , the matrix @xmath161 diagonalizes the matrix @xmath177 , @xmath178 and any permutation @xmath160 of the columns of the matrix @xmath179 will still diagonalize @xmath90 , which shows that any unitary matrix @xmath156 diagonalizing @xmath90 can be written as a product @xmath180 .",
    "@xmath181    [ transformation_any_state ] let @xmath90 be any adapted state , let @xmath182 be the associated block - diagonal matrix with blocks , let @xmath183 with @xmath184 , where each @xmath185 , @xmath186 , is a @xmath187 permutation matrix , and let @xmath180 .",
    "then , for any linear combination @xmath188 , it is verified that @xmath189{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & & \\\\ & & & \\hspace{-1.99 cm } {   \\rotatebox{-43}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & \\\\ & & & & \\hspace{-2.4cm}c_nn_n\\left\\{\\begin{array}{|ccc|}\\hline   \\phantom{a } &   \\phantom{a } & \\phantom{a}\\\\   \\phantom{a } &   \\phantom{a } & \\phantom{a}\\\\   \\phantom{a } &   \\phantom{a } & \\phantom{a}\\\\\\hline \\end{array}\\right .",
    "\\end{array } \\right),\\begin{array}{c } \\hspace{-6.5cm}\\vspace{4.08cm}\\sigma^1 \\end{array } \\phantom{a } \\begin{array}{c } \\hspace{-5cm}\\vspace{1.3cm}\\sigma^2 \\end{array } \\phantom{a } \\begin{array}{c } \\hspace{-2.35cm}\\vspace{-3.8cm}\\sigma^n \\end{array}\\ ] ] where @xmath190{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & r_{1n_\\alpha}^\\alpha \\\\",
    "r_{21}^\\alpha   & \\hspace{-0.3 cm } r_{22}^\\alpha & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&r_{2n_\\alpha}^\\alpha\\\\ \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&\\hspace{-0.6 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } }    \\\\ \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&\\hspace{0.8 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } &    & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}\\\\   \\vspace{0.1cm}\\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.1em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.1em}\\hfill\\kern0pt } } } } & & \\hspace{0.3 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.10em}\\hfill\\kern0pt}}}}\\\\     r_{n_\\alpha 1}^\\alpha &   \\hspace{-0.3cm}r_{n_\\alpha 2}^\\alpha & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & r_{n_\\alpha n_\\alpha}^\\alpha \\end{pmatrix},\\ ] ] with @xmath191 square matrices of size @xmath30 defined as @xmath192 where @xmath193 , @xmath167 , are the matrices on the block diagonal of @xmath194 after being transformed by @xmath47 , i.e. , those matrices such that @xmath195 .    *",
    "proof * : we just transform @xmath194 with @xmath156 , @xmath196{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } &   & \\hspace{-0cm}\\mbox{\\huge{0 } } &    \\\\                      &   &   & \\hspace{-1.15 cm } {   \\rotatebox{-40}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } }   &   &   \\\\                      & \\hspace{-2.8cm}\\mbox{\\huge{0 } } & & & \\hspace{-0.4 cm } {   \\rotatebox{-40}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } }   &    \\\\                      &   &   &   &   &   \\hspace{-1.85cm}\\big(x^np^n\\big)^\\dagger(\\mathds{1}_{c_n}\\otimes\\tau^n)x^np^n \\end{pmatrix}.\\ ] ] hence , the matrices @xmath197 in the statement are @xmath198 . finally ,",
    "if we substitute in @xmath199 the definition of @xmath200 in eq . , and use the property @xmath201 of the kronecker product for matrices @xmath202 such that the products @xmath203 and @xmath204 are feasible , we get @xmath205    @xmath181    this corollary is key to the algorithm described in section [ the_algorithm : sec ] below because it means that any matrix diagonalizing one generic adapted state @xmath90 , with the eigenvectors appropriately reordered , will transform any linear combination of the representation @xmath124 ( in particular , any other adapted state ) into the specific form given by corollary [ transformation_any_state ] , which has a very special structure . our next step amounts to exploit this special structure in order to reveal a finer block structure within each @xmath197 for any linear combination of the representation .",
    "[ r_tilde : corollary ] let @xmath206 and @xmath207 , be as in corollary [ transformation_any_state ] .",
    "let @xmath208 for any matrix @xmath209 , and set @xmath210 for any fixed @xmath211 . if @xmath212 , are the diagonal blocks of @xmath213 for some other @xmath214 , then @xmath215{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } &   \\tilde{s}_{{k_\\alpha}1n_\\alpha}^\\alpha \\mathds{1}_{c_\\alpha } \\\\",
    "\\tilde{s}_{{k_\\alpha}21}^\\alpha \\mathds{1}_{c_\\alpha }   & \\hspace{-0.3 cm }   \\tilde{s}_{{k_\\alpha}22}^\\alpha \\mathds{1}_{c_\\alpha } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\tilde{s}_{{k_\\alpha}2n_\\alpha}^\\alpha \\mathds{1}_{c_\\alpha}\\\\ \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&\\hspace{-1.2 cm } {   \\rotatebox{-25}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.09em}\\hfill\\kern0pt } } } } & & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } }    \\\\ \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&\\hspace{0.8 cm } {   \\rotatebox{-25}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.09em}\\hfill\\kern0pt } } } } &    & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}\\\\   \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & & \\hspace{0.56 cm } {   \\rotatebox{-25}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.09em}\\hfill\\kern0pt } } } } & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}\\\\      \\tilde{s}_{{k_\\alpha}n_\\alpha 1}^\\alpha \\mathds{1}_{c_\\alpha } &   \\hspace{-0.3 cm } \\tilde{s}_{{k_\\alpha}n_\\alpha 2}^\\alpha \\mathds{1}_{c_\\alpha } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\tilde{s}_{{k_\\alpha}n_\\alpha n_\\alpha}^\\alpha \\mathds{1}_{c_\\alpha}. \\end{pmatrix}\\ ] ]    * proof * : if we write @xmath216{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & t_{1n_\\alpha}^\\alpha \\\\",
    "t_{21}^\\alpha   & \\hspace{-0.3 cm } t_{22}^\\alpha & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&t_{2n_\\alpha}^\\alpha\\\\ \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&\\hspace{-0.6 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } }    \\\\ \\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}&\\hspace{0.8 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } &    & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[1.2em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt}}}}\\\\   \\vspace{0.1cm}\\hspace{-0.2 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.1em}\\hfill\\kern0pt } } } } & \\hspace{-0.5 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.1em}\\hfill\\kern0pt } } } } & & \\hspace{0.3 cm } {   \\rotatebox{-32}{\\makebox[0pt]{\\makebox[1.6em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & \\hspace{-0.4 cm } {   \\rotatebox{90}{\\makebox[0pt]{\\makebox[0.85em]{\\xleaders\\hbox{$\\cdot$\\hskip.10em}\\hfill\\kern0pt}}}}\\\\     t_{n_\\alpha 1}^\\alpha &   \\hspace{-0.3cm}t_{n_\\alpha 2}^\\alpha & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & {   \\rotatebox{0}{\\makebox[0pt]{\\makebox[1.4em]{\\xleaders\\hbox{$\\cdot$\\hskip.12em}\\hfill\\kern0pt } } } } & t_{n_\\alpha n_\\alpha}^\\alpha \\end{pmatrix},\\ ] ] where",
    "@xmath217 , then one can easily check that @xmath218 @xmath181    notice that this transformation leads to a matrix with almost the structure of ( [ structure_rho ] ) , with the difference that the entries in the blocks @xmath135 are scattered everywhere instead of being concentrated in the diagonal blocks .",
    "in other words , if we set @xmath219 for @xmath220 such that @xmath221 for all @xmath222 , then    @xmath223    while we would like to have the kronecker products in reverse order .",
    "it is well known that for any pair of matrices @xmath54 and @xmath55 of arbitrary dimensions , the two kronecker products @xmath224 and @xmath225 are permutationally equivalent ( i.e. , @xmath226 for appropriate permutation matrices @xmath160 and @xmath227 ) . moreover ,",
    "when both @xmath54 and @xmath55 are square , they are actually permutationally similar ( i.e. , one can take @xmath228 above : see , for instance , corollary 4.3.10 in @xcite or @xcite ) .",
    "[ permutation : lemma ] given two matrices @xmath54 and @xmath55 of arbitrary sizes , there exist two permutation matrices @xmath160 and @xmath227 , which only depend on the dimensions of the matrices @xmath54 and @xmath55 , such that @xmath229 in the case in which @xmath54 and @xmath55 are square matrices of sizes @xmath15 and @xmath73 respectively , the permutation matrices are related by @xmath230 , where @xmath231 and @xmath232 are the following matrices of dimensions @xmath233 and @xmath234 respectively : @xmath235{\\makebox[1.5em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } &   &   \\\\                      &   & \\hspace{-0.05 cm } {   \\rotatebox{-45}{\\makebox[0pt]{\\makebox[1.5em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & \\hspace{-0.1 cm } {   \\rotatebox{-45}{\\makebox[0pt]{\\makebox[1.5em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & \\hspace{0.2cm}\\mbox{\\huge{$0 $ } } &    \\\\                      &   &   &   \\hspace{0.02 cm } {   \\rotatebox{-45}{\\makebox[0pt]{\\makebox[1.5em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & \\hspace{-0.6 cm } {   \\rotatebox{-45}{\\makebox[0pt]{\\makebox[1.5em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } &   \\\\                      & \\mbox{\\huge{$0 $ } } & &   & \\hspace{0.05 cm } {   \\rotatebox{-45}{\\makebox[0pt]{\\makebox[1.5em]{\\xleaders\\hbox{$\\cdot$\\hskip.11em}\\hfill\\kern0pt } } } } & \\hspace{-0.2cm}1   \\\\                      &   &   &   & & \\hspace{-0.2cm}0 \\end{pmatrix},\\quad\\qquad f=\\left(\\begin{array}{c|c } 1&\\begin{array}{c } \\vspace{-0.3cm}\\\\ \\large{\\text{$0$}}_{1\\times(n-1)}\\\\",
    "\\vspace{-0.4 cm } \\end{array}\\\\\\hline \\begin{array}{c } \\vspace{0.2cm}\\\\ \\large{\\text{$0$}}_{(cn-1)\\times 1 } \\end{array}&\\hspace{-0.19cm}\\begin{array}{c } \\vspace{-0.3cm}\\\\ \\mathds{1}_{(n-1)}\\otimes\\left(\\begin{array}{c } 0\\\\ \\vdots\\\\ 0\\\\ 1 \\end{array}\\right)_{c\\times 1 } \\vspace{0.1cm}\\\\\\hline \\end{array}\\\\ & \\begin{array}{c } \\vspace{-0.3cm}\\\\ \\huge{\\text{$0$}}_{(c-1)\\times ( n-1 ) } \\end{array } \\end{array}\\right).\\ ] ]    as a consequence of lemma [ permutation : lemma ] , if we compute the matrix @xmath236 such that @xmath237 if @xmath156 is the unitary matrix in corollary [ transformation_any_state ] and @xmath238 is given by ( [ def_r_tilde ] ) , we conclude that @xmath239 is the clebsch  gordan matrix in definition [ cg_matrix_def ] .",
    "we are now in the position to give a detailed description , step by step , of the decomposition algorithm that we have named smily .",
    "we first specify input and output of the algorithm :    * * input * : a unitary representation of any finite group or compact lie group @xmath19 . * * output * : the clebsch  gordan matrix @xmath240 , in a basis of eigenvectors of an initial adapted state @xmath149 .",
    "we may organize the smily algorithm into eight steps :    1 .",
    "* generate two adapted states * : we start by creating two mutually generic states @xmath149 and @xmath151 ( see definition [ generic_pair_def ] ) . to create them ,",
    "we generate two random vectors @xmath241 and @xmath242 of size @xmath243 , with no zero components , and use their respective entries as coefficients to construct two linear combinations of the matrices @xmath131 : @xmath244 next , we symmetrize , @xmath245 shift them by the spectral radius and divide by the trace , @xmath246 to obtain two hermitian normalized positive semidefinite matrices @xmath149 and @xmath151",
    ". having been randomly generated , it is safe to assume that they are mutually generic .",
    "* diagonalize pointwise the first state * : compute a unitary matrix @xmath247 which diagonalizes pointwise the state @xmath149 , i.e. , such that @xmath248 is a diagonal matrix .",
    "such matrix exists since @xmath149 is hermitian .",
    "+ [ step_3_ps ] 3 .   *",
    "first sorting * : reorder the columns of @xmath247 by grouping together the eigenvectors corresponding to a same proper subspace @xmath20 .",
    "recall that , according to corollary [ transformation_any_state ] , there is a reordering of the columns of @xmath247 which block - diagonalizes @xmath151 , and the dimensions of the diagonal blocks are the dimensions of the @xmath20 .",
    "notice that if two columns @xmath249 and @xmath250 of @xmath247 correspond to the same proper subspace @xmath20 , then @xmath251 .",
    "this will be our test for rearranging the columns of @xmath247 . more precisely ,",
    "we use the following routine based on a divide - and - conquer approach : 1 .",
    "choose one column of @xmath247 , rename it as @xmath252 and move it into a list of vectors we will call @xmath253 .",
    "+    + [ step_3_2 ] 2 .",
    "compute @xmath254 for another column @xmath250 of @xmath247 , and if @xmath255 , move @xmath250 into the list @xmath253 and rename it as @xmath256 .",
    "repeat on all remaining columns of @xmath247 , move those @xmath250 with @xmath257 into the list @xmath253 and label them as @xmath258 , with the index @xmath259 reflecting the order in which they have been included in the list . + . ]",
    "3 .   compute @xmath260 for @xmath261 , for those columns @xmath250 of @xmath247 not yet moved into @xmath253 in step .",
    "this is a re - check since there might be some vector left not included in the list in step because it happened to be orthogonal to @xmath252 in the scalar product defined by @xmath151 .",
    "the mutual genericity condition ensures that no vector in @xmath253 can be orthogonal to all remaining vectors in the list . + . ]",
    "once we have finished verifying all eigenvectors in @xmath253 , we take a block whose columns are the eigenvectors in @xmath253 and denote it as @xmath262 , since it is a set of @xmath263 vectors constituting an orthonormal basis of @xmath264 . after that , we come back to step and repeat the process with the rest of vectors until all of them have been sorted .",
    "+ at the end of this step , we obtain a matrix we may call @xmath265 whose columns form bases @xmath266 of the proper subspaces @xmath20 for @xmath167 , i.e. , @xmath267 this step also gives the dimensions @xmath268 by counting the number of vectors in each subspace .",
    "* second sorting * : reorder the columns within each @xmath269 grouping together the eigenvectors corresponding to the same eigenvalue of @xmath149 . to do it , we just reorder the eigenvectors in each @xmath266 in decreasing order corresponding to their eigenvalues .",
    "thus , we obtain @xmath270 where @xmath271 + counting the multiplicity of one eigenvalue in each @xmath32 will give the multiplicity @xmath30 . hence , since we already got the products @xmath268 in step , we can also get the dimensions of the irreps @xmath169 by dividing those numbers by @xmath30 . at this point , it is also possible , if needed , to obtain the characters of the irreps in the decomposition of @xmath124 by computing @xmath272 5 .   *",
    "coarse block - diagonalization of @xmath273 * : compute the matrix @xmath274 to obtain the coarse block - diagonalization of @xmath151 in terms of the matrices @xmath275 , as shown in corollary [ transformation_any_state ] , and identify the square matrices @xmath276 , of size @xmath30 .",
    "compute a matrix @xmath238 * : according to corollary [ r_tilde : corollary ] , for each @xmath275 choose a column of matrices @xmath277 such that @xmath278 for all @xmath141 , compute the unitary matrices @xmath279 and finally compute the unitary matrix @xmath280 7 .",
    "* compute the permutation matrix @xmath227 * : for each @xmath32 , compute the permutation matrix @xmath281 , as described in lemma [ permutation : lemma ] , and collect them in the block diagonal matrix @xmath282 8 .",
    "* final rearrangement * : compute the clebsch  gordan matrix @xmath283 .",
    "the algorithm we have presented decomposes any finite dimensional unitary representation of any compact lie group . in the case of finite groups ,",
    "it is natural to apply it to the regular representation because it contains every irreducible representation with multiplicity equal to the dimension of its irreps , @xmath284 ( * ? ? ?",
    "* ch.2 ) , thus : @xmath285    the regular representation of a group @xmath1 is the unitary representation obtained from the action of the group @xmath1 on the hilbert space of square integrable functions on the group , @xmath286 , where @xmath287 denotes the left(right)-invariant haar measure by left ( right ) translations .    as before , we will restrict the discussion to finite groups @xmath1 as in sect .",
    "[ sec : preliminaries ] .",
    "the space of square integrable functions on @xmath1 can be identified canonically with the @xmath288-dimensional complex space formally generated by the elements of the group , i.e. , we will denote by @xmath289 $ ] the linear space whose elements are given by @xmath290 , @xmath291 , @xmath69 , with the natural addition law @xmath292 .",
    "notice that @xmath289 $ ] carries also a natural associative algebra structure @xmath293 although we will not make use of such structure here .",
    "the left regular representation is defined as @xmath294 thus , the matrix elements of the regular representation are obtained by computing the action of the group on the orthonormal basis @xmath295 , @xmath296 , of the hilbert space @xmath297 $ ] : @xmath298 then , the matrix representation of the left regular representation of the element @xmath299 can be easily computed from the table of the group written below ( notice the inverse of the elements along the rows ) .",
    "the matrix @xmath300 is obtaiend by constructing a matrix with ones in the positions where @xmath299 appears in the table and zeros in the rest .",
    ".group table .",
    "[ cols=\"^,^,^,^,^,^,^\",options=\"header \" , ]     in the case of the regular representation , the input of our program can be the matrix @xmath301 constructed out of the table * t * ( see table[group_table ] ) relabeled by identifying @xmath302 with @xmath303 and @xmath295 with @xmath304 , and whose entries are defined as @xmath305 once we have the group multiplication table in this form , we do not need to compute , explicitly , the regular representation for each element @xmath306 to create the adapted states @xmath149 and @xmath151 in step since we can simply evaluate the random vectors @xmath307 on the elements of the table , that is , @xmath308_{ij}=\\varphi_a \\big(t_{ij}\\big)\\ , , \\qquad a = 1,2 \\ , .\\ ] ]    in the final , we will show the results obtained using our algorithm for the decomposition of the regular representation in two simple cases : the permutation group @xmath309 and the alternating group @xmath310 .    to verify the accuracy of the results , we will compare characters , since they are independent of the choice of basis .",
    "we shall compute the characters of the irreps obtained after applying the unitary transformation @xmath240 provided by our algorithm and we will compare them with the exact characters by defining the error as @xmath311 where @xmath23 is the family of equivalence classes of irreps of @xmath19 .",
    "let @xmath1 be a compact lie group and @xmath19 a closed subgroup ( hence compact too ) .",
    "states adapted to @xmath19 will have the form @xmath312 where @xmath313 is the normalization factor @xmath314 and @xmath315 denotes the invariant haar measure on @xmath19 .    because our algorithm is numerical , we need to approximate the integral with a finite sum . choosing a quadrature rule to approximate",
    "the integral for a given @xmath90 is equivalent to using another @xmath316 such that @xmath317 only at a finite number of elements of the group .",
    "then , the integral for @xmath316 reduces to a finite sum and the approximation of @xmath316 is exact .",
    "it could happen that the generic adapted states thus obtained do not have enough degrees of freedom , i.e. , it might happen that the block diagonal matrices of the representation were not irreducible .",
    "however , we will see that this is not a problem because in the case of lie groups , the clebsch ",
    "gordan matrix decomposing all the elements of its lie algebra @xmath318 will be the clebsch ",
    "gordan matrix decomposing all the elements of the representation .",
    "a lie algebra @xmath318 is an algebra closed under the lie bracket @xmath319:\\mathfrak{g}\\times\\mathfrak{g}\\rightarrow\\mathfrak{g}$ ] .",
    "any element of the lie algebra can be written in terms of linearly independent elements , called _ generators _",
    ", @xmath320 , @xmath321 , which satisfy @xmath322=c_{ij}^k\\xi_k\\,,\\qquad i , j , k=1,\\ldots , n_\\mathfrak{g}\\,,\\ ] ] where the coefficients @xmath323 are called the _ structure constants _ of the lie algebra @xmath318 and @xmath324 is its dimension .",
    "notice that the generators of any representation of the same lie algebra will have the same structure constants except by a multiplication factor .    for lie groups ,",
    "a unitary representation can be obtained via the exponential map of any element of its lie algebra @xmath318 , @xmath325 : @xmath326    one can immediately see that the clebsch  gordan matrix @xmath47 that decomposes all the elements of the lie algebra @xmath327 will decompose all the elements of the representation and viceversa : @xmath328 where @xmath329 , @xmath167 , is the set of generators of the irreducible representations of the lie algebra @xmath318 and @xmath330 , their corresponding representations via the exponential map . in the case of compact lie groups",
    ", since the set of generators of its lie algebra is finite , @xmath331 , the matrix @xmath47 that decomposes in irreps @xmath332 non trivial linearly independent elements of the lie algebra , or @xmath332 linearly independent elements of the representation @xmath84 , @xmath333 , will be the clebsch  gordan matrix .",
    "the original clebsch  gordan problem consists in reducing a tensor product representation @xmath334 , @xmath335 , of two representations of the same group @xmath1 restricted to the diagonal subgroup of the product group . by associativity",
    ", this problem can be generalized to any number of tensor products @xmath336 . here",
    ", its associated lie algebra is given by @xmath337 where @xmath322=c_{ij}^k\\xi_k,\\qquad[\\xi_i^\\alpha,\\xi_i^\\alpha]=c_{ij}^k\\xi_i^\\alpha,\\qquad\\alpha=1,\\ldots , n.\\ ] ]    let us now study the @xmath0 group : the generators of the representation of its associated lie algebra are given by the hermitian traceless angular momentum operators @xmath338 satisfying the commutation relations @xmath339=i\\epsilon_{ij}^kj_k\\ , , \\qquad i , j , k = x , y , z\\,,\\qquad n_\\mathfrak{g}=3\\,.\\ ] ] its associated representation of @xmath0 can be written as @xmath340 the matrix representation of momentum @xmath259 of the angular momentum operators @xmath341 is usually written in a basis of eigenvectors of @xmath342 , @xmath343 and the representation of the operators @xmath344 and @xmath345 is usually obtained from the representation of the ladder operators @xmath346 , @xmath347 for instance , if @xmath348 : @xmath349 @xmath350 in the standard basis @xmath351    the standard clebsch ",
    "gordan matrix is constructed with eigenvectors of the total angular momentum operator @xmath352 with respect to the @xmath353 component , @xmath354 where @xmath15 is the number of parts of the system .",
    "the eigenvectors of this operator are usually denoted by @xmath355 , where @xmath356 represent the total angular momentum and @xmath357 : @xmath358    the standard procedure to obtain this clebsch  gordan matrix consists in applying successively the ladder operator @xmath359 starting from the state of maximum momentum @xmath360 .",
    "notice that since the action of the matrix elements of the ladder operators   is real , the clebsch ",
    "gordan coefficients are real too .",
    "recall that the clebsch  gordan matrix provided by our algorithm is written in terms of the eigenvectors of the first adapted state @xmath149 .",
    "thus , if we want to compare the clebsch ",
    "gordan coefficients obtained from our algorithm with the standard ones , we have to find a clebsch  gordan matrix @xmath361 which is conformed by eigenvectors of the operator @xmath362 . to do that , we first create two real adapted states , using the fact that the operators @xmath363 , @xmath364 , verify @xmath365 where @xmath366 denotes the complex conjugate",
    "therefore , for any adapted state @xmath90 , its complex conjugate @xmath367 is an adapted state too .",
    "hence , to create real adapted states , we first add each matrix @xmath368 , @xmath369 , in step in section[the_algorithm : sec ] to its complex conjugate to obtain real symmetric matrices , and then we multiply the result by its transpose to make it positive definite . finally , we normalize them dividing by their trace , i.e. , @xmath370    once we have two real adapted states @xmath371 and @xmath372 , we apply our algorithm to get the real clebsch  gordan matrix @xmath240 . after that , we transform the operator @xmath362 with @xmath240 to decompose it in irreducible representations , @xmath373 and we diagonalize each block of this matrix , transforming it with a block - diagonal matrix @xmath374 which reorders the eigenvalues as follows :    @xmath375{\\makebox[1em]{\\xleaders\\hbox{$\\cdot$\\hskip.09em}\\hfill\\kern0pt } } } } & & & & & & & \\\\ & & & \\hspace{-0.3cm}-j_1 & & & & & & \\\\ & & & & j_2 & & & & & \\\\ & & & & & \\hspace{-0.2cm}j_2 - 1 & & & & \\\\ & & & & & & \\hspace{-1.1 cm } {   \\rotatebox{-40}{\\makebox[0pt]{\\makebox[1em]{\\xleaders\\hbox{$\\cdot$\\hskip.09em}\\hfill\\kern0pt } } } } & & & \\\\ & & & & &   & & \\hspace{-0.6cm}-j_2 & & \\\\ & & & & &   & & & \\hspace{-0.4 cm } {   \\rotatebox{-40}{\\makebox[0pt]{\\makebox[1em]{\\xleaders\\hbox{$\\cdot$\\hskip.09em}\\hfill\\kern0pt } } } }   & \\\\ & & & & &   & & & & \\hspace{-2.9 cm } {   \\rotatebox{-40}{\\makebox[0pt]{\\makebox[1em]{\\xleaders\\hbox{$\\cdot$\\hskip.09em}\\hfill\\kern0pt } } } }   \\\\ & & & & &   & & & & \\hspace{-1.4cm}j_n \\\\ & & & & &   & & & & \\hspace{0.2cm}j_n-1 \\\\ & & & & &   & & & & \\hspace{0.8 cm } {   \\rotatebox{-40}{\\makebox[0pt]{\\makebox[1em]{\\xleaders\\hbox{$\\cdot$\\hskip.09em}\\hfill\\kern0pt } } } }   \\\\ & & & & &   & & & & \\hspace{2.2cm}-j_n \\\\ \\end{pmatrix}\\,.\\ ] ]    therefore , the clebsch  gordan matrix whose columns are the eigenvectors of @xmath362 , reordered in this way , is given by @xmath376    in the , we will show the computation of the clebsch ",
    "gordan coefficients for the bipartite spin system @xmath377 and for the tripartite spin system @xmath378 .",
    "again , we will verify the accuracy by comparing the exact characters with the ones computed after transforming with the clebsch ",
    "gordan matrix obtained with smily . for any irreducible representation of the @xmath0 group , it can be shown that the characters have the following expression : @xmath379 where @xmath380 is the dimension of the irrep .",
    "therefore , we measure the accuracy through @xmath381 with @xmath382 the number of elements in the quadrature approximation .",
    "a numerical algorithm to compute the decomposition of a finite - dimensional unitary representation of a compact lie group has been presented .",
    "such algorithm uses the notion of generic adapted quantum mixed states to obtain the block structure and , eventually , the coefficients of the clebsch  gordan matrix solving the decomposition problem .",
    "the numerical algorithm is stable and accurate since it combines nothing but stable routines involving diagonalization of hermitian matrices , sorting and recombination of matrix blocks and matrix products .",
    "the numerical examples presented confirm this .",
    "the algorithm has been used successfully to decompose the regular representation of finite groups and the direct product of two and three representations of @xmath0 . in the first case ,",
    "the main computational task was to prepare the group table , a preliminary task before the algorithm is used . in the second case ,",
    "this preliminary part was much easier , since explicit expressions of the representations of the lie algebra @xmath383 , for any value of spin , are well - known .",
    "the algorithm can be easily extended to finite - dimensional representations of non - compact groups .",
    "however , because the representations will cease to be unitary , the numerical stability of the algorithm could be compromised .",
    "further insights on these questions will be considered elsewhere .",
    "[ appendix_ps]appendix    in this appendix , we present the results obtained for the decomposition of the @xmath309 and @xmath310 group , and the clebsch ",
    "gordan coefficients of the spin systems @xmath377 and @xmath384 .",
    "all experiments were conducted using matlab r2012a ( version 7.14.0.739 ) .",
    "a.1.1.*the decomposition of the left regular representation of the permutation group @xmath309 .",
    "* the @xmath309 group is the group of permutations of three elements and it has order six .",
    "the elements of this group can be generated with the set of transpositions @xmath385 , @xmath386 : @xmath387 our algorithm decomposes the regular representation in two representations @xmath388 and @xmath389 of dimension one and multiplicity one , and another one @xmath390 of dimension two and multiplicity two , exactly as expected .",
    "the representation @xmath388 corresponds to the trivial one , @xmath391 , @xmath392 , and the rest of representations obtained after applying the transformation @xmath240 given by smily are the following :    @xmath393    if we use the formula to compute the accuracy of the characters of the irreps , we obtain @xmath394    a.1.2.*the decomposition of the left regular representation of the alternating group @xmath310 . * the alternating group @xmath310 is the group of even permutations of four elements .",
    "this group has twelve elements and it can be generated with three generators satisfying the relations @xmath395 the left regular representation of this group has four irreducible representations : three of dimension one and one of dimension three .",
    "hence smily will decompose the regular representation of this group in the three representations of dimension one with multiplicity one and in the representation of dimension three with multiplicity three .",
    "again , @xmath388 is the trivial representation @xmath391 , @xmath396 , and the rest are given by :    @xmath397    @xmath398    in this case , the accuracy of the characters of the irreps computed with is given by @xmath399    a.2.1.*clebsch  gordan coefficients for the spin system @xmath377 .",
    "* suppose we have a system of two particles in which the first particle has momentum @xmath400 and the second momentum @xmath303 .",
    "it is well - known ( * ? ? ?",
    "* ch.5 ) that this system is decomposed in the direct sum of systems of momentum @xmath401 , @xmath400 and @xmath402 , each one with multiplicity one , @xmath403 or , in other words , that the representation of @xmath0 corresponding to the tensor product @xmath377 has irreducible representations of momentum @xmath401 , @xmath400 and @xmath402 with multiplicity one each other .    to create the adapted states for step of the algorithm , we have chosen three random vectors @xmath404 , @xmath405 , @xmath406 , for each adapted state , to obtain the three linearly independent elements of the representation .",
    "obviously , we have also created two random vectors @xmath307 of length @xmath407 to construct the matrices @xmath368 , @xmath369 , in step : @xmath408 where @xmath409 is the exponential representation given by and @xmath410 denotes the momentum of the representation @xmath32 .    to represent the clebsch ",
    "gordan coefficients , we will use the following standard arrangement :        the coefficients obtained for the system @xmath377 applying the smily algorithm are as follows :            to assess the accuracy , we have approximated the integral in with @xmath411 .",
    "the result we obtained is @xmath412    a.2.2.*clebsch  gordan coefficients for the spin system @xmath384 . * to test the capabilities of our algorithm , we will compute the clebsch ",
    "gordan coefficients of a system of three spin particles .",
    "these coefficients can be obtained from suitable choices of coefficients of products of two spins , for that reason , there are no tables for systems with more than two spins .",
    "the standard procedure consists in first reducing the representation of the first two particles , then reducing the result with the next particle , and so on , until there are no particles left . in our case ,",
    "the product of three particles with spin @xmath402 , @xmath402 and @xmath400 yields @xmath413 this is , two irreps of momentum @xmath402 and @xmath401 with multiplicity one and other of momentum @xmath400 with multiplicity two .    in the first step ,",
    "we block - diagonalize the first two spins : @xmath414 and then we diagonalize the result : @xmath415 therefore , the clebsch ",
    "gordan matrix of this system is @xmath416    in this example , we see that for a multipartite system of spins the multiplicities of the representations can be larger than one .",
    "thus , several eigenvectors may exist with the same values of @xmath356 and @xmath417 .",
    "therefore , it is necessary to add another ` quantum number ' , which we will denote by @xmath73 , to tell them apart .",
    "this ` quantum number ' will be a label indicating to which copy of the representation of multiplicity larger than one each of the eigenvectors with the same @xmath356 and @xmath417 belongs .",
    "hence the choice of @xmath73 to denote it , since this is the letter we used to denote the multiplicity in above .    using our algorithm , we do not need to group the system in groups of bipartite systems as before , it can be done in one step .",
    "again , in this case , we have chosen three random vectors @xmath418 , @xmath406 , to obtain three linearly independent elements of the representation of the group , and another random vector @xmath419 of length @xmath407 to compute each linear combination @xmath194 .",
    "the coefficients will be represented in arrangements similar to the case of two spins but now including the label @xmath73 :        notice that the table below is not unique because there exists more than one linear combination providing a valid clebsch  gordan matrix that diagonalizes @xmath420 with the eigenvalues reordered in the way given in .",
    "the coefficients obtained for the tripartite system @xmath384 are the following : [ tabla_5 ]            again , to assess the accuracy , we have approximated the integral in with @xmath411 , and the result obtained was @xmath421",
    "the authors would like to thank the financial support provided by the ministry of economy and competitivity of spain , under grant mtm2014 - 54692 , and by the region of madrid research project quitemad+ , s2013/ice-2801 .",
    "ou and h.j .",
    "kimble . _ probability distribution of photoelectric currents in photodetection processes and its connection to the measurement of a quantum state_. phys .",
    "a. * 52 * , 31263146 ( 1995 ) ."
  ],
  "abstract_text": [
    "<S> a numerical algorithm that computes the decomposition of a finite - dimensional unitary reducible representation of a compact lie group is presented . </S>",
    "<S> the algorithm , inspired by notions of quantum mechanics , generates two adapted states and , after appropriate algebraic manipulations , returns the block matrix structure of the representation in terms of its irreducible components . </S>",
    "<S> it also provides an adapted orthonormal basis . </S>",
    "<S> the algorithm can be used to compute the clebsch  </S>",
    "<S> gordan coefficients of the tensor product of irreducible representations of a given compact lie group . </S>",
    "<S> the performance of the algorithm is tested on various examples : the decomposition of the regular representation of finite groups and the computation of the clebsch  gordan coefficients of tensor products of representations of @xmath0 . </S>"
  ]
}