{
  "article_text": [
    "in texturing , we often encounter the following problem : fill a region with a given collection of small square patches in such a way that patches of a same kind do not appear in a row .",
    "we make this problem more precise .    for natural numbers @xmath0 and @xmath1 , let @xmath2 be a rectangular grid @xmath3 we call its elements _",
    "cells_. for a finite set of tiles @xmath4 with @xmath5 , we call a function @xmath6 a _ tiling _ of @xmath2 with @xmath4 . for a natural number @xmath7 and @xmath8 ,",
    "we say @xmath9 satisfies the condition @xmath10 if there is no horizontal strip with more than @xmath11 consecutive @xmath12 s , that is , there is no @xmath13 such that @xmath14 .",
    "similarly , we say @xmath9 satisfies the condition @xmath15 for a natural number @xmath16 , if there is no vertical strip with more than @xmath17 consecutive @xmath12 s .",
    "consider a set @xmath18 consisting of conditions of the form @xmath19 and @xmath20 with varying @xmath21 and @xmath8 .",
    "alternatively , we can think of @xmath22 as functions @xmath23 so that @xmath24 . here , we allow @xmath25 , which will be never violated , for notational simplicity",
    ". we will use both notations interchangeably .",
    "we say a tiling @xmath9 is @xmath18-_dappled _ if @xmath9 satisfies all the conditions in @xmath18 .",
    "the problem we are concerned is :    give an efficient algorithm to produce @xmath18-dappled tilings , which posses some controllability by the user .    note",
    "that enumerating all the @xmath18-dappled tilings is fairly straightforward ; we can fill cells sequentially from the top - left corner . however , this is not practical since there are exponentially many @xmath18-dappled tilings with respect to the number of cells , and many of them are not suitable for applications as we see below .",
    ". there exist at least @xmath27 tilings which are @xmath18-dappled .",
    "we will create _ draughtboard _ tilings .",
    "for each cell @xmath28 , choose any tile @xmath8 and put the same tile at @xmath29 ( if it exists ) .",
    "pick any @xmath30 and put them at @xmath31 and @xmath32 ( if they exist ) .",
    "one can see that for any @xmath13 the tile at @xmath33 or @xmath34 is different from that at @xmath35 . similarly , the tile of @xmath36 or @xmath37 is different from that of @xmath35 , and hence , the tiling thus obtained is @xmath18-dappled with any @xmath18",
    ". there are @xmath38 cells of the form @xmath28 , and hence , there are at least @xmath27 draughtboard tilings .",
    "it is easy to see that the above argument actually shows that there are at least @xmath39 draughtboard ( and hence , @xmath18-dappled ) tilings with @xmath40 .",
    "of course , draughtboard patters look very artificial and are not suitable for texturing .",
    "we would like to have something more natural .",
    "therefore , instead of enumerating all of the @xmath18-dappled tilings , in this paper we provide an algorithm to produce one in such a way that the user has some control over the output . we also discuss a concrete applications with the brick wang tiles studied in @xcite , and with flow generation .",
    "for the special case of @xmath41 and @xmath42 , the numbers of @xmath18-dappled tilings for several small @xmath0 and @xmath1 are listed at @xcite .",
    "no recursive or non - recursive formula for general @xmath0 and @xmath1 nor a generating function is known as far as the authors are aware .",
    "we show an example of a draughtboard tiling .",
    "let @xmath43 .",
    "then for any set of conditions @xmath18 , the following is an @xmath18-dappled tiling .",
    "first , note that the problem becomes trivial when @xmath44 ( we can choose a tile for @xmath45 at step ( i ) below which is different from @xmath46 and @xmath47 ) .",
    "so , we assume @xmath4 consists of two elements @xmath48 .",
    "fix a set of conditions @xmath18 and we just say dappled for @xmath18-dappled from now on . given any tiling @xmath9 , we give an algorithm to convert it into a dappled one .",
    "we can start with a random tiling or a user specified one .",
    "the idea is to perform `` local surgery '' on @xmath9 .",
    "we say @xmath9 _ violates _ the condition @xmath49 ( resp .",
    "@xmath50 ) at @xmath35 when @xmath51 ( resp .",
    "@xmath52 ) . for a cell @xmath35",
    "we define its _ weight _ @xmath53 .",
    "let @xmath35 be a cell with the minimum weight such that @xmath9 violates any of the conditions @xmath49 or @xmath50 .",
    "we modify some values of @xmath9 around @xmath35 to rectify the violation in the following manner .    1 .",
    "set @xmath54 if it does not violate any condition at @xmath35 in @xmath18 .",
    "2 .   otherwise , set @xmath55 , and @xmath56 .",
    "let us take a close look at the step ( ii ) .",
    "assume that @xmath9 violated @xmath10 at @xmath35 .",
    "this means @xmath57 .",
    "note also that @xmath58 since otherwise we could set @xmath54 at the step ( i ) .",
    "when @xmath59 , we can set @xmath60 without introducing a new violation at @xmath33 .",
    "when @xmath61 , we can set @xmath54 and @xmath62 without introducing a new violation at either of @xmath33 or @xmath36 .",
    "a similar argument also holds when @xmath15 is violated at @xmath35 .    after the above procedure",
    ", the violation at @xmath35 is resolved without introducing a new violation at cells with weight @xmath63 .",
    "( we successfully `` pushed '' the violation forward . )",
    "notice that each time either the minimal weight of violating cells increases or the number of violating cells with the minimal weight decreases .",
    "therefore , by repeating this procedure a finite number of times , we are guaranteed to obtain a dappled tiling transformed from the initially given one .",
    "the algorithm works in whatever order the cells of a same weight are visited , but our convention in this paper is in increasing order of @xmath64 .",
    "all the examples are produced using this ordering .",
    "fix any @xmath65 , @xmath41 , and @xmath66 with @xmath67 .",
    "algorithm [ algorithm ] takes a tiling @xmath68 and outputs an @xmath18-dappled tiling . if @xmath9 is already @xmath18-dappled , the algorithm outputs @xmath9 .",
    "( note that in the below the values of @xmath9 and @xmath69 for negative indices should be understood appropriately )    the sub - routine @xmath70 returns true if @xmath9 violates any of horizontal or vertical conditions at the given cell . in practice ,",
    "the check can be efficiently performed by book - keeping the numbers of consecutive tiles of smaller weight in the horizontal and the vertical directions .",
    "see the python implementation @xcite for details .",
    "[ rem : p=1 ] algorithm [ algorithm ] does not always work when @xmath71 or @xmath72 for some @xmath8 .",
    "for example , when @xmath73 it can not rectify @xmath74",
    "we give two extensions of the main algorithm discussed in the previous section .",
    "it is easy to see that our algorithm works when the conditions @xmath10 and @xmath15 vary over cells .",
    "that is , @xmath11 and @xmath17 can be functions of @xmath13 as well as @xmath8 .",
    "this allows the user more control over the output .",
    "for example , the user can put non - uniform constraints , or even dynamically assign constraints computed from the initial tiling .",
    "let @xmath75 and @xmath76 , where @xmath77 and @xmath78 . in the left half , long horizontal white strips and long vertical orange strips",
    "are prohibited , while in the right half , long vertical white strips and long horizontal orange strips are prohibited .",
    "sometimes we would like to have an @xmath18-dappled tiling which can be repeated to fill a larger region .",
    "for this , we have to require the conditions to be _ cyclic _ ; for example , @xmath10 is violated if there is a cell @xmath35 with @xmath79,j)=\\cdots f([i - p],j)=t$ ] , where @xmath80 \\le m-1 $ ] is the reminder of @xmath81 divided by @xmath0 .",
    "we say a tiling @xmath9 is _ cyclically @xmath18-dappled _ if it does not violate any of the conditions in @xmath18 in the above cyclic sense .",
    "we discuss a modification of our algorithm to produce a cyclically @xmath18-dappled tiling .",
    "however , there are two limitations : it only works for a limited class of conditions ; when @xmath41 , we have to assume @xmath18 should satisfy @xmath82 for all @xmath8 .",
    "( see example [ cyclic : fail ] ) .",
    "the other drawback is that the algorithm changes an input tiling even when it is already @xmath18-dappled .",
    "this is because it produces an @xmath18-dappled tiling with additional conditions .",
    "let @xmath9 be any tiling .",
    "algorithm [ algorithm ] is modified as described in algorithm [ cyc - algorithm ] .",
    "we visit cells in increasing order of the weight as in algorithm [ algorithm ] .",
    "when the cell @xmath35 is visited , for each @xmath49    1 .",
    "impose no horizontal conditions if @xmath83 2 .",
    "impose @xmath84 if @xmath85 3 .",
    "impose @xmath86 if @xmath87 , where @xmath88 is the smallest non - negative integer such that @xmath89 .",
    "( note that @xmath90 by the previous condition . )",
    "4 .   impose @xmath10 otherwise .    and",
    "do similarly for @xmath15 . due to the extra condition imposed by ( ii ) , the output is in a restricted class of cyclically @xmath18-dappled tilings .",
    "fix any @xmath65 , @xmath41 , and @xmath66 with @xmath82 for all @xmath8 .",
    "algorithm [ cyc - algorithm ] takes a tiling @xmath68 and outputs a cyclically @xmath18-dappled tiling .",
    "[ cyclic : fail ] one might wonder why we can not just impose @xmath91 on the cells @xmath92 in ( ii ) above to make it work when @xmath93 .",
    "in this case , we may have to impose @xmath94 in ( iii ) , which is problematic as we see in the following example with @xmath95 : @xmath96 rectifying the cell @xmath97 will introduce a new violation at the one to the down - left , and vice versa .    if @xmath18 consists of just two conditions @xmath98 , we can modify algorithm [ cyc - algorithm ] further to ensure the algorithm works even when @xmath99 .",
    "the idea is to make the first two rows and columns draughtboard :    1 .",
    "@xmath100 , @xmath101 , @xmath102 , and @xmath103 2 .",
    "@xmath104    then , the rest is rectified with algorithm [ cyc - algorithm ] .",
    "the second requirement ensures that algorithm [ cyc - algorithm ] works . for the technical details ,",
    "refer to the implementation @xcite .",
    "[ cols=\"^,^,^ \" , ]",
    "consider an @xmath18-dappled tiling with @xmath105 and @xmath106 . we given an interpretation to it so that we can use it to create a crowd simulation .",
    "we start with particles spread over the tiling .",
    "they move around following the `` guidance '' specified by the tile .",
    "more precisely , each particle picks a direction according to the tile on which it locates . for example , assume a particle is at a cell with @xmath107 .",
    "then , choose either left or right and move in the direction .",
    "when it reaches the centre of an adjacent tile , say with @xmath108 , choose either up or down and proceeds .",
    "see the supplementary video @xcite .",
    "we defined the notion of dappled tilings , which is useful to produce texture patterns free of a certain kind of repetition .",
    "we gave an efficient algorithm to convert any tilings to a dappled one .",
    "our method has the following advantages .",
    "* it produces all the dappled tilings if we start with a random tiling .",
    "this is because the algorithm outputs as it is if the input is already @xmath18-dappled . *",
    "it has some control over the distribution of tiles since we can specify the initial @xmath9 .",
    "we finish our discussion with a list of future work which encompasses both the theoretical and the practical problems .    1 .   a better cyclic algorithm : in  [ sec : cyclic ] we gave an algorithm to produce cyclically dappled tilings with some limitations .",
    "we would like to develop a better way to get rid of these limitations .",
    "2 .   conditions specified by subsets : for @xmath109 , we define the condition @xmath110 which prohibits horizontal strips consisting of @xmath111 tiles in @xmath112 .",
    "we would like to give an algorithm to produce @xmath18-dappled tilings , where @xmath18 consists of this kind of generalised conditions .",
    "closest dappled tiling : our algorithm takes a tiling as input and produces an @xmath18-dappled tiling , which is usually not very different from the input . however , the output is not the closest solution in terms of the hamming distance @xmath113 . + for @xmath114",
    "our algorithm converts @xmath115 but one of the closest dappled tilings to the input is @xmath116 + it is interesting to find an algorithm to produce an @xmath18-dappled tiling closest to the given tiling .",
    "extension of the flow tiling in  [ sec : flow ] : we can consider different kinds of tiles such as emitting / killing tiles , where new particles are born / killed , and speed control tiles , where the speed of a particle is changed .",
    "a parallel algorithm : our algorithm is sequential but it is desirable to have a parallelised algorithm .",
    "we may use cellular automaton to give one .",
    "global constraints : the conditions we consider in the @xmath18-dappled tiling is _ local _ in the sense that they can be checked by looking at a neighbourhood of each cell .",
    "global constraints such as specifying the total number of a particular tile can be useful in some applications",
    ". we would like to generalise our framework so that we can deal with global constraints . 7 .",
    "boundary condition : given a partial tiling of @xmath2 , we can ask to extend it to an @xmath18-dappled tiling .",
    "a typical example is the case where the tiles at the boundary are specified . in the cyclic setting",
    ", it is not even trivial to determine if there is a solution or not .",
    "+ consider a @xmath117-grid with @xmath118 and the following partial tiling : @xmath119 there exists no cyclically @xmath18-dappled tiling extending ( obtained by filling the cells marked with `` @xmath120 '' ) the given one .",
    "this is because in a @xmath121 cyclically @xmath18-dappled tiling , there should be an equal number of @xmath122 and @xmath123 .",
    "this implies there should be exactly two @xmath123 s in each column , which is not the case with the above example .",
    "+ for a larger board @xmath2 , where @xmath124 , @xmath125 , and @xmath126 is divisible by @xmath127 , we have a similar example : @xmath128 there exists no cyclically @xmath18-dappled tiling extending it .",
    "this can be checked , for example , by choosing a tile for @xmath129 and continue filling cells which are forced to have either @xmath122 or @xmath123 by the conditions .",
    "no matter what tile we choose for @xmath129 , we encounter violation at some point .",
    "+ we would like to have a more efficient algorithm to decide and solve tiling problems with boundary conditions .",
    "interpretation as a sat problem : the @xmath18-dappled tiling is a satisfiability problem and it would be interesting to formalise it to give a formal verification of the algorithm .",
    "a part of this work was conducted during the imi short term research project `` formalisation of wang tiles for texture synthesis '' at kyushu university .",
    "the authors thank kyushu university for the support .",
    "the authors are grateful to yoshihiro mizoguchi for his helpful comments .",
    "a.  derouet - jourdan , y.  mizoguchi , and m.  salvati , , in _",
    "symposium on mathematical progress in expressive image synthesis ( meis2015 ) _ , volume  * 64 * of _ mi lecture note series _ , pages 6170 .",
    "kyushu university , 2015 ."
  ],
  "abstract_text": [
    "<S> we consider a certain tiling problem of a planar region in which there are no long horizontal or vertical strips consisting of copies of the same tile </S>",
    "<S> . intuitively speaking , we would like to create a dappled pattern with two or more kinds of tiles . </S>",
    "<S> we give an efficient algorithm to solve the problem , and discuss its applications in texturing . </S>"
  ]
}