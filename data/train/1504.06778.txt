{
  "article_text": [
    "in may 2014 , the object management group ( omg ) formally released version 1.0 of the case management modeling and notation ( cmmn ) @xcite standard specification .",
    "the specification is intended to support case management applications @xcite .",
    "cmmn is based on two models , a behavioral model and an informational model .",
    "the cmmn specification indicates that the information model can be implemented using the content management interoperability services ( cmis ) @xcite specification , however no details are given .",
    "this paper addresses that gap by describing how an cmmn implementation can use cmis effectively .",
    "this paper is intended for implementors of cmmn , and should be read in conjunction with the cmmn specification @xcite and the cmis specification @xcite .",
    "familiarity with the cmmn and cmis specifications is assumed .",
    "case management @xcite is intended to support the needs of knowledge workers when engaged in knowledge intensive goal oriented processes .",
    "it is common for knowledge workers to interact via documents ( e.g. text documents , word processor documents , spreadsheets , presentations , correspondence , memos , videos , pictures , etc . ) .",
    "case management shares most of the knowledge intensive processes characteristics as defined by di ciccio _ et .",
    "al . _ which are knowledge driven , collaboration oriented , unpredictable , emergent , goal oriented , event driven , constraint and rule driven , and non repeatable @xcite .",
    "therefore , it makes sense that a platform to support knowledge workers provide content management and collaboration capabilities .",
    "case management is defined by forrester asa highly structured , but also collaborative , dynamic , and information - intensive process that is driven by outside events and requires incremental and progressive responses from the business domain handling the case .",
    "examples of case folders include a patient record , a lawsuit , an insurance claim , or a contract , and the case folder would include all the documents , data , collaboration artifacts , policies , rules , analytics , and other information needed to process and manage the case .",
    " @xcite _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    this paper starts with a short introduction to cmmn in section  [ sec : main - cmmn ] and cmis in section  [ sec : main - cmis ] .",
    "these introductions describe the main concepts , classes , and objects that will be used in the rest of the paper .",
    "section  [ sec : main - alternatives ] describes the two implementation alternatives .",
    "section  [ sec : main - interaction ] describes how the cmmn information model could be implemented in a cmis repository .",
    "section  [ sec : main - models ] describes the implications for the cmmn models and for process interchange of case models .",
    "an example is given in section  [ sec : main - example ] .",
    "the example describes some of the functionality the end users will observe in a cmmn implementation that uses a cmis repository as described in this paper .",
    "conclusions are presented in section  [ sec : main - conclusions ] .",
    "two appendixes are included .",
    "appendix  [ sec : app - metamodels ] shows the cmmn and cmis meta - models for reference purposes .",
    "finally , appendix  [ sec : app - pseudocode ] provides an example java pseudocode showing a possible implementation of the cmmn information model in cmis .    .mapping cmmn information model to cmis meta - model [ cols=\"<,<\",options=\"header \" , ]",
    "this section describes how to store the cmmn models in the cmis repository .",
    "it also describe the effects of using cmis as described in this paper on process interchange .",
    "the cmis repository can be used by the cmmn modeler tool to store the models .",
    "the modeler tool can take advantage of the versioning offered by most cmis repositories to maintain the versions of its models .",
    "it can also take advantage of the cmis folders to create project folders with the ability to create sub - folders to store the multiple assets of a project .",
    "in general , the cmis repository can be used as the modeler repository for cmmn models and other modeling artifacts .",
    "the cmmn models and other artifacts can be represented as ` cmis : document`s and stored in specialized ` cmis : document type`s and ` cmis : folder type`s .",
    "the cmmn model documents can have specialized meta - data for the cmmn modeler tool to use .",
    "for example , project name , department , etc .",
    "standard cmis meta - data can also be used by the cmmn modeler tool to keep track of its models .",
    "for example , ` cmis : name ` , ` cmis : description ` , ` cmis : createdby ` , ` cmis : creationdate ` , ` cmis : lastmodifiedby ` , ` cmis : lastmodificationdate ` , ` cmis : versionlabel ` , etc .      in order for the cmmn implementation to take full advantage of the capabilities offered by cmis ,",
    "few extensions to cmmn are required , as follows .",
    "` property ` types : :    can be extended as shown in table  [ table : fieldtypes ] to support    ` xsd : decimal ` , ` i d ` , and ` html ` types .",
    "note that if a cmmn application    is exclusively using a cmis repository then it would never encounter    one of these types .",
    "so these extensions may be optional . `",
    "casefileitem ` types : :    may need to be extended as shown in table  [ table : objtypes ] .",
    "this is    optional , because not all implementations will need to support all the    cmis objec types .",
    "implementations that need to support ` cmis : policy ` ,    ` cmis : item ` , or ` cmis : secondary ` will need to extend the    ` casefileitemdefinition definitiontype ` s uri as described in    table  [ table : objtypes ] .",
    "extended attributes : :    are needed in both alternatives . the _ embedded _ alternative requires    extended attributes to support ,    +    * ` index ` as an attribute of ` casefileitem `    +    the _ integration _ alternative requires extended attributes to support ,    +    * ` cmisobjectid ` as an attribute of ` casefile ` and ` casefileitem `    * ` index ` as an attribute of ` casefileitem `    * ` cmistypeid ` as an attribute of ` casefileitemdefinition `    * ` cmispropertyid ` as an attribute of ` property `    in cmmn 1.0 , these extensions affect process interchange .",
    "future versions of the cmmn specification may introduce extensible attributes and rules on how to preserve extended uris in ` casefileitemdefinition definitiontype ` s uri and ` property type ` s uri .",
    "currently , tools wishing to preserve cmis 1.0 process interchange may need to introduce an option when saving cmmn models to indicate if the model must be cmmn 1.0 compatible , and if so , the following transformations will be required , to remove extensions :    * remove the extended attributes as follows , + ` index ` : :    from ` casefileitem ` ` cmisobjectid ` : :    from ` casefile ` and ` casefileitem ` ` cmistypeid ` : :    from ` casefileitemdefinition ` ` cmispropertyid ` : :    from ` property ` * map extended ` property type`s as follows , + ` xsd : decimal ` : :    ( ` http://www.omg.org/spec/cmmn/propertytype/decimal ` ) to +    ` double ` ( ` http://www.omg.org/spec/cmmn/propertytype/double ` ) ` xsd : id ` : :    ( ` http://www.omg.org/spec/cmmn/propertytype/id ` ) to +    ` string ` ( ` http://www.omg.org/spec/cmmn/propertytype/string ` ) ` xsd : html ` : :    ( ` http://www.omg.org/spec/cmmn/propertytype/html ` ) to +    ` string ` ( ` http://www.omg.org/spec/cmmn/propertytype/string ` ) * map extended ` casefileitemdefinition definitiontype`s as follows , + ` cmis : policy ` : :    ( ` http://www.omg.org/spec/cmmn/definitiontype/cmispolicy ` ) to +    ` unknown ` ( ` http://www.omg.org/spec/cmmn/definitiontype/unknown ` ) ` cmis : item ` : :    ( ` http://www.omg.org/spec/cmmn/definitiontype/cmisitem ` ) to +    ` unknown ` ( ` http://www.omg.org/spec/cmmn/definitiontype/unknown ` ) ` cmis : secondary ` : :    ( ` http://www.omg.org/spec/cmmn/definitiontype/cmissecondary ` ) to +    ` unknown ` ( ` http://www.omg.org/spec/cmmn/definitiontype/unknown ` ) * review the generalizations from cmis classes in the _ embedded _ alternative , which are , + ` casefile ` : :    generalization of ` cmis : folder ` ` casefileitem ` : :    generalization of ` cmis : object ` ` casefileitemdefinition ` : :    generalization of ` cmis : object type ` ` property ` : :    generalization of ` cmis : property type `",
    "this example describes an hypothetical cmmn implementation using a cmis repository to implement the case file and to store cmmn models , as described in this paper . in this example",
    ", the implementation has two end user front end tools , the modeling tool and the client tool .",
    "both front ends may be integrated into a single user interface .",
    "the modeling tool allows users to create cmmn case models , and so , implements the design time aspects of cmmn .",
    "the modeling tool is used by business analysts or case workers to create , update , and manage cmmn models .",
    "case models are serialized into machine readable files as described in the cmmn specification .",
    "the files could be xmi or cmmn xml - schema ( xsd ) compliant files .",
    "those files are stored in the cmis repository as documents .",
    "the client tool allows case workers to interact with a case instance , and so , implements the runtime aspects of a cmmn implementation .",
    "case workers using the client tool are able to create case instances , interact with case instances by adding content , executing tasks and stages , engaging in planning by adding discretionary items to the case instance plan , collaborating with other case workers to complete case instances , etc .",
    "the case instance information model is implemented in cmis as ` cmis : folder ` representing the case file .",
    "therefore , each case instance will have its unique cmis folder .",
    "the user using the client tool can see the state of the case instance in the cmis folder and associated content .",
    "an example of a case file is shown in figure  [ fig : example ] . in that figure ,",
    "the case instance for project xx has a ` casefileitem ` data 1 with some properties , and a sub - folder for incoming documents with two documents , a house picture and a report document .    in a system with a clear separation between design and runtime ,",
    "a business analyst may create a case model and save it in the cmis repository using the modeling tool .",
    "the modeling tool may expose the cmis versioning capability .",
    "taking advantage of these capabilities , the business analysts may maintain multiple versions of the case model and may decide to deploy to a production system one of those versions .    in a system with no separation between design and runtime ,",
    "a case worker may create a cmmn model starting from scratch or using a template stored in the cmis repository . in both cases ,",
    "the resulting model may be stored in the cmis repository for future usage as a template . in systems with no clear separation between design and runtime , models will normally start incomplete and will evolve as the case workers process the instance .",
    "these case models will continually evolve , and so , the version capabilities of cmis will be used to keep track of the evolution of the model .    eventually a case instance will be created and case workers will collaborate to complete the case using the client tool . documents of multiple types maybe required to process the case instance .",
    "for example , emails , word processing documents , spreadsheets , pictures , videos , voice recordings , case comments , etc . those documents will be stored in the case folder . to organize those documents , the case workers may decide to create a folder structure under the case folder . for example",
    ", it may be useful to create a sub - folder for correspondence .",
    "that correspondence sub - folder may be further subdivided into an incoming correspondence sub - folder and an outgoing correspondence sub - folder .",
    "in addition to the client tool that allows the case workers to interact with the case instance , other cmis client programs could also interact with the case folder .",
    "documents in the case instance may be created by the case workers or it may be placed in the case instance by computer programs using the cmis api to access the case file .",
    "events are raised when documents are added to the case , are modified , or are removed . because both documents and folders are ` casefileitem`s , those events can be used in entry or exit criterion to tasks , stages , or milestones .",
    "so , as the case file is modified by either the case workers using the client tool or cmis clients interact with the case file , then entry or exit criterion may be triggered .",
    "this paper described how to implement the cmmn information model using cmis .",
    "there is no need to extend cmis to be used by cmmn , and only minor extensions to cmmn are proposed in this paper .",
    "two implementation alternatives were described .",
    "an _ integration _",
    "alternative where an external cmis repository is used and an _ embedded _ alternative where a cmis repository is embedded within the cmmn engine .",
    "the _ integration _ alternative will be appealing to process technology vendors , and the _ embedded _ alternative will be appealing to content management vendors . in both cases ,",
    "the cmis repository can be used to store the cmmn models to take advantage of cmis versioning and meta - data .",
    "extensive sample java pseudocode is provided and analysis of the meta - models was done to guide implementors .    10    . .",
    "http://chemistry.apache.org/ , 2015 .",
    "http://chemistry.apache.org/java/opencmis.html , 2015 .",
    "j.  brown and f.  muller . .",
    "https://github.com/cmisdocs/serverdevelopmentguidev2 , 2nd edition edition , 2014 . .",
    "l.  c. clair , c.  moore , and r.  vitti . .",
    "technical report , forrester , cambridge , ma , 2009 .    c.  di  ciccio , a.  marrella , and a.  russo . .",
    "4(1):2957 , 2015 .    j.  b. hill . .",
    "technical report june , gartner , 2012 .",
    "m.  a. marin , r.  hull , and r.  vaculn . .",
    "in m.  rosa and p.  soffer , editors , _ business process management workshops _ ,",
    "volume 132 , pages 2430 .",
    "springer berlin heidelberg , tallinn , estonia , sept .",
    "f.  muller , j.  brown , and j.  potts . .",
    "manning publications co. , 2013 .",
    "isbn 978 - 1 - 617 - 29115 - 9 .    oasis . .",
    "http://docs.oasis-open.org/cmis/cmis/v1.1/csprd01/cmis-v1.1-csprd01.pdf , 2012 .",
    "omg . , 2014 .",
    "document formal/2014 - 05 - 05 .    k.  d. swenson . .",
    "landmark books . meghan - kiffer press , tampa ,",
    "florida , usa , 2010 .",
    "w3c . , october 2004 .",
    "the cmmn and the cmis meta - models are provided here for reference purposes .",
    "the four figures shown here have been copied from the formal specifications @xcite .",
    "figure  [ fig : cmmnhighlevel ] describes the cmmn high level meta - model showing the relationship between the ` case ` and the ` casefile ` that implement the cmmn information model .",
    "figure  [ fig : cmmncasefile ] describes how the ` casefile ` contains all the ` casefileitem`s in the case .",
    "in addition , it shows that ` casefileitem`s can be used to create a folder structure using the composition relationship between ` parent ` and ` children ` ; and it also shows that relationships between ` casefileitem`s can be implemented using the reflexive association between ` sourceref ` and ` targetref ` .",
    "these cmmn meta - models describe a cmmn model at modeling time and can be used for process interchange .",
    "figure  [ fig : cmismetamodel ] describes the cmis objects meta - model , and figure  [ fig : cmistypes ] describes the cmis type system .",
    "these cmis meta - models describe a content repository runtime , by describing the objects stored in the content repository at execution time .",
    "all the sample java pseudocode present here is uses apache chemistry opencmis which is a standard cmis reference client library for java @xcite .",
    "this pseudocode is an example of how to use opencmis to implement the cmmn information model .",
    "it is not intended for production usage and so it lacks error recovery pseudocode .",
    "there are few methods that use ` system.out.println ` in areas that are left as exercise to the reader to complete the methods .",
    "this section describes the cmmn standard set of ` casefileitem ` operations for the behavioral model to navigate the information model ( see the cmmn specification @xcite section 7.3.1 casefileitem operations ) .    the class ` casefileitemoperations ` is used to define all the methods described in this paper .",
    "the class constructor requires a cmis session and a root folder that serves as the ` casefile ` for the case instance .",
    "most of the methods operate on a case instance ( ` casefile ` ) . for illustration purposes , some methods in this class can operate outside the case instance .",
    "get a ` casefileitem ` ( a ` cmis : object ` most likely a document or folder ) instance with ` itemname ` ( ` cmis : name ` ) within the ` casefile ` container .",
    "if no ` casefileitem ` instance for the given ` itemname ` exists , an empty ` cmis : document ` ( ` casefileitem ` ) instance is returned .",
    "if more than one ` casefileitem ` instance name has the same ` itemname ` ( ` cmis : name ` ) , an arbitrary one should be returned .",
    "this java pseudocode provides three implementations for this operation .",
    "one returning a ` cmis : object ` ( ` getcasefileiteminstance ` ) , one returning a ` cmis : document ` ( ` getcasefileitemdocumentinstance ` ) , and finally one returning a ` cmis : folder ` ( ` getcasefileitemfolderinstance ` ) .",
    "get a ` casefileitem ` ( a ` cmis : object ` most likely a document or folder ) instance with ` itemname ` ( ` cmis : name ` ) and ` casefileitem ` s ` index ` ( see figure  [ fig : casefileintegrated ] and figure  [ fig : casefileembeded ] ) within the ` casefile ` container .",
    "this operation is to be used for ` casefileitem ` ( a ` cmis : object ` instances with a multiplicity greater than one .",
    "the ` index ` is used to identify a concrete ` casefileitem ` ( a ` cmis : object ` most likely a document or folder ) instance from the collection of ` casefileitem ` instances . if no ` casefileitem ` instance for the given ` itemname ` exists , or if the ` index ` is out of the range of ` casefileitem ` instances , an empty ` casefileitem ` instance is returned .",
    "note that java does not provide methods overloading , so a number 2 was appended to the method names .",
    "this java pseudocode provides three implementations for this operation .",
    "one returning a ` cmis : object ` ( ` getcasefileiteminstance2 ` ) , one returning a ` cmis : document ` ( ` getcasefileitemdocumentinstance2 ` ) , and finally one returning a ` cmis : folder ` ( ` getcasefileitemfolderinstance2 ` ) .        `",
    "getcasefileiteminstanceproperty  ( ` * * ` in ` * * `  item  :  casefileitem  instance , ` + `  propertyname  :  string , ` + `  ` * * ` out ` * * `  element ) `    get the value of a ` casefileitem ` instance property .",
    "if ` propertyname ` refers to a non - existing property of the ` casefileitem ` instance , an empty ` element ` must be returned .",
    "the element returned must be of the specified property type for the ` casefileitem ` instance .",
    "the methods in this section are used to navigate ` cmis : folders ` when they implement the ` casefileitem ` self - referencing composition relationship between ` parent ` and ` children ` ( see figure  [ fig : cmmncasefile ] ) .",
    "get a child ` casefileitem ` instance for a given ` casefileitem ` instance .",
    "this operation is valid for ` casefileitem`s implemented as ` cmis : folder`s ( ` cmis : folder ` ) .",
    "the value of parameter ` childname ` specifies the name ( ` cmis : name ` ) of the child to get with in the ` cmis : folder ` .",
    "if no child of the given name exists for the ` casefileitem ` instance , an empty ` casefileitem ` instance is returned .",
    "this operation is provided to navigate the composition relationship between ` casefileitem`s used to implement a folder structure .",
    "they are represented in the cmmn meta - model ( see [ fig : cmmncasefile ] ) by the ` parent ` and ` children ` composition relationship .",
    "this operation navigates from the ` parent ` ( always a ` cmis : folder ` ) to the ` child ` ( most likely a ` cmis : document ` or folder ) .",
    "this java pseudocode provides three implementations for this operation .",
    "one returning a ` cmis : object ` ( ` getcasefileiteminstancechild ` ) , one returning a ` cmis : document ` ( ` getcasefileitemdocumentinstancechild ` ) , and finally one returning a ` cmis : folder ` ( ` getcasefileitemfolderinstancechild ` ) .",
    "get the parent ` casefileitem ` ( ` cmis : folder ` ) instance of a ` casefileitem ` instance .",
    "note in the worse case , the parent will be the ` casefile ` , which is the parent of all the ` casefileitem`s in a case .",
    "this operation is provided to navigate the composition relationship between ` casefileitem`s used to implement a folder structure .",
    "they are represented in the cmmn meta - model ( see [ fig : cmmncasefile ] ) by the ` parent ` and ` children ` composition relationship .",
    "this operation navigates from the ` child ` ( most likely a ` cmis : document ` or folder ) to the ` parent ` ( always a ` cmis : folder ` ) .",
    "the methods in this section are used to navigate the ` cmis : relationship ` used to implement the ` casefileitem ` self - referencing reflexive association between ` sourceref ` and ` targetref ` ( see figure  [ fig : cmmncasefile ] ) .",
    "this operation is provided to navigate relationships between ` casefileitem`s .",
    "they are represented in the cmmn meta - model ( see [ fig : cmmncasefile ] ) by the ` sourceref ` and ` targetref ` relationship .",
    "this operation navigates from the ` targetref ` to the ` sourceref ` .    `",
    "getcasefileiteminstancetarget(`**`in ` * * `  item  :  casefileitem  instance , ` + `  targetname  :  string ,  ` + `  ` * * ` out ` * * `  casefileitem  instance ) `    get a target ` casefileitem ` instance for a given ` casefileitem ` instance .",
    "the value of parameter ` childname ` specifies the name ( ` cmis : name ` ) of the target to get .",
    "if no target of the given name exists for the ` casefileitem ` instance , an empty ` casefileitem ` instance will be returned .",
    "this operation is provided to navigate relationships between ` casefileitem`s .",
    "they are represented in the cmmn meta - model ( see [ fig : cmmncasefile ] ) by the ` sourceref ` and ` targetref ` relationship .",
    "this operation navigates from the ` sourceref ` to the ` targetref ` .",
    "this section shows some examples on how to use cmis to modify the case instance ( ` casefile ` ) information model .",
    "three creation methods are included here , two of them allow to create folders and documents in the root folder representing the case instance ( ` casefile ` ) , and one to create relationships between cmis objects",
    ". they can be used as examples of how the case information model can be modified .",
    "this section describes how to receive the events from the cmis repository .",
    "the following methods are included in this class for illustration purposes , but these methods are not case instance specific .",
    "they will receive events from all the case instances in the cmis repository .",
    "these methods should be executed in their own thread , because ` getcontentchangesforeventpropagation ` will go into a infinite loop .",
    "most implementations will encapsulate the two methods shown in this section in another class to be executed in its own thread ."
  ],
  "abstract_text": [
    "<S> this paper describes how a case management modeling and notation ( cmmn ) implementation can use content management interoperability services ( cmis ) to implement the cmmn information model . </S>",
    "<S> the interaction between cmmn and cmis is described in detail , and two implementation alternatives are presented . </S>",
    "<S> an _ integration _ </S>",
    "<S> alternative where any external cmis repository is used . </S>",
    "<S> this alternative is useful to process technology vendors looking to integrate with cmis compliant repositories . </S>",
    "<S> an _ embedded _ alternative where a cmis repository is embedded within the cmmn engine . </S>",
    "<S> this alternative is useful to content management vendors implementing cmmn . in both alternatives </S>",
    "<S> a cmis folder is used as the case file containing the case instance data . </S>",
    "<S> the cmis repository can also be used to store the cmmn models to take advantage of cmis versioning and meta - data . </S>",
    "<S> extensive java pseudocode is provided as an example of how a cmmn implementation can use a cmis repository to implement the cmmn information model . </S>",
    "<S> no extensions to cmis are needed , and only minor extensions to cmmn are proposed .    * </S>",
    "<S> keywords * : case handling , case management , case management system , case management modeling and notation , cmmn , cmmn implementation , content management , content management system , content management interoperability services , cmis </S>"
  ]
}