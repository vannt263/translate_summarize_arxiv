{
  "article_text": [
    "_ program title : _ fermifab + _ program author : _ christian b. mendl + _ distribution format : _ tar.gz , zip + _ no . of bytes in distributed program , including test data , etc . :",
    "@xmath0 + _ no . of lines in distributed program , including test data , etc . : _",
    "@xmath1 + _ programming language : _ matlab , mathematica , c + _",
    "computer : _ pcs , sun solaris workstation + _ operating system : _ any platform supporting matlab or mathematica ; tested with windows ( 32 and 64 bit ) and sun solaris + _ ram : _ case dependent +",
    "the ground state energy of fermionic many - particle quantum systems can be re - expressed as a linear functional of ( one- or two - body ) reduced density matrices ( rdms ) .",
    "this notion traces back to the origins of quantum mechanics  @xcite around 1930 .",
    "since 1964 , the one - body rdm has been greatly popularized by density functional theory  @xcite , which is typically the most viable approximation for handling large particle numbers .",
    "the tantalizing possibility of employing rdms ( instead of many - particle wavefunctions ) for _ exact _ groundstate energy computations is counterbalanced by the @xmath2-representability problem , i.e. , the search for necessary and sufficient conditions a two - body density must obey to represent an @xmath2-electron wavefunction  @xcite .",
    "modern applications use variational principles and semidefinite programming to impose positivity constraints on the two - body rdm  @xcite . in any case",
    ", it is desirable to render the powerful rdm framework accessible to a broader audience , integrating it into the symbolic language of modern computer algebra systems like mathematica , or numeric software like matlab .",
    "the ` fermifab ` toolbox ( available for download at  @xcite ) is precisely designed for that purpose .",
    "a short `` usage manual '' and a brief tour of the essential features is provided in the following subsections .",
    "note that the underlying one - particle orbitals ( see below ) are always assumed to be orthonormalized .",
    "in addition , the toolbox adheres to the trace - normalization convention @xmath3 for the @xmath4-body rdm @xmath5 of a normalized @xmath2-body wavefunction @xmath6 .",
    "here , @xmath7 denotes the @xmath4-particle fock - space ( see following subsection ) .",
    "fundamental building blocks of multi - fermion quantum systems are slater determinants ( figure  [ fig : slater ] ) .",
    "these can be thought of as a collection of `` orbitals '' ( or slots ) , some of which are occupied by a fermionic particle ( e.g. , an electron ) .        in mathematical terms , the available number of orbitals @xmath8 is the dimension of the underlying one - particle hilbert space @xmath9 and the number of occupied orbitals the particle number @xmath2 .",
    "thus there are altogether @xmath10 slater determinants .",
    "their complex span defines the @xmath2-particle _ fock - space _ @xmath11 .",
    "the @xmath2-particle fermi states are precisely the elements of @xmath11 .      for concreteness ,",
    "the following examples are issued in the matlab programming language .",
    "( the mathematica version of ` fermifab ` provides the same features ; section  [ sec : application ] contains a demonstration . )",
    "commands typed by the user are preceded by ` > > ` , and the subsequent lines show the corresponding output . in standard matlab syntax , ` zeros(n,1 ) ` below constructs a column vector of length @xmath12 , and ` nchoosek ` computes binomial coefficients .",
    "we first show how to represent an @xmath13 particle state @xmath6 with , e.g. , @xmath14 available orbitals in total :    .... > > orbs = 6 ; n = 4 ; > > x = zeros(nchoosek(orbs , n),1 ) ; x(1)=1/sqrt(2 ) ; x(2)=1i / sqrt(2 ) ; > > psi = fermistate(orbs , n , x )    psi =       fermi state ( orbs = = 6 , n = = 4 )      ( 0.70711)|1234 > + ( 0 + 0.70711i)|1235 > ....    needless to say , the ` fermistate ` command is specific to the ` fermifab ` toolbox .",
    "the vector @xmath15 contains the slater determinant coefficients of @xmath6 in lexicographical order .",
    "let s assign more meaningful names to the orbitals of @xmath6 :    .... > > psi = set(psi,'orbnames',{'1s ' ' 1s~ ' ' 2s ' ' 2s~ ' ' 2p ' ' 2p~ ' } )    psi =       fermi state ( orbs = = 6 , n = = 4 )      ( 0.70711)|1s 1s~ 2s 2s~ > + ( 0 + 0.70711i)|1s 1s~ 2s",
    "2p > ....    from a physics viewpoint , these orbitals could form electronic subshells in atoms . the rank - one projector @xmath16 or `` density matrix '' of @xmath6 can be calculated intuitively by    ....",
    "psi*psi '    ans =       fermi operator wedge^4 h - > wedge^4 h ( orbs = = 6 )    matrix representation w.r.t .",
    "ordered slater basis ( |1s 1s~ 2s 2s~ > , |1s 1s~ 2s 2p > , ... |2s 2s~ 2p 2p~ > ) - >      ( |1s 1s~ 2s 2s~ > , |1s 1s~ 2s 2p > , ...",
    "|2s 2s~ 2p 2p~ > ) :      columns 1 through 4       0.5000                   0 - 0.5000i         0                   0          0 + 0.5000i    0.5000                   0                   0     ... ....    note that the result is now a ` fermiop ` operator acting on @xmath17 .",
    "the core feature of the toolbox is the efficient calculation of rdms .",
    "for example , the 2-body rdm @xmath18 can be obtained by    ....",
    "> > rdm(psi,2 )    ans =       fermi operator wedge^2 h - > wedge^2 h ( orbs = = 6 )    matrix representation w.r.t . ordered slater basis ( |1s 1s~ > , |1s 2s > , ...",
    "|2p 2p~ > ) - > ( |1s 1s~ > , |1s 2s > , ...",
    "|2p 2p~ > ) :      columns 1 through 4       1.0000                   0                   0                   0          0              1.0000                   0                   0          0                   0              0.5000                   0 - 0.5000i          0                   0                   0 + 0.5000i    0.5000     ... ....    rdms are reviewed in more detail in section  [ sec : implementationrdms ] .",
    "given a linear operator @xmath19 , a straightforward derivation based on the antisymmetrized structure of @xmath11 shows that @xmath20 for all @xmath21 and @xmath22 .",
    "that is , we obtain a matrix representation of @xmath23 acting on @xmath11 .",
    "the ` tensor_op ` command implements precisely this operation .",
    "the following code lines are taken from the `` natural orbitals '' example in ` test / norbs.m ` :    .... > > orbs = 6 ; n = 4 ; > > psi = fermistate(orbs , n , crand(nchoosek(orbs , n),1 ) ) ; > > [ u , d ] = eig(rdm(psi,1 ) ) ; ....    ` crand ` generates pseudorandom complex numbers ( similar to ` rand ` ) , and ` eig ` computes eigenvalues and -vectors .",
    "thus , the eigenvectors of the 1-body rdm of @xmath6 are stored in @xmath24 .",
    "performing a corresponding base change on @xmath11 using these eigenvectors should result in a diagonal 1-body rdm  @xcite :    .... > > psi = tensor_op(u , n)'*psi ; > > g = get(rdm(psi,1),'data ' ) ; > > err = norm(g - diag(diag(g ) ) )    err =      1.6512e-015 ....    in many physical applications , one can take advantage of unitary base changes on @xmath9 such that subsequent computations are simplified , e.g. , by choosing single - particle eigenstates of the @xmath25 angular momentum operator .",
    "the above code shows how to implement the according base change on @xmath11 .      for performance and memory efficiency reasons , `",
    "fermifab ` has built - in `` configurations '' , i.e. , we can subdivide the available orbitals into several groups , each of which contains a fixed number of particles .",
    "( physically speaking , the groups could be interpreted as atomic subshells @xmath26 , for example . )",
    "let s say our system involves a total of 3 particles in 9 orbitals , with exactly 2 particles in the first 5 orbitals and 1 particle in the remaining 4 orbitals .",
    "then a ` fermistate ` reflecting this configuration is specified by    ....",
    "> > orbs = [ 5,4 ] ; n = [ 2,1 ] ; > > psi",
    "= fermistate(orbs , n )    psi =       fermi state ( orbs = = 9 , n = = 3 )      |126 > ....    note that @xmath27 is the lexicographically first base vector respecting the configuration constraints , and that @xmath6 requires only @xmath28 rather than @xmath29 complex entries :    .... > >",
    "length(psi )    ans =        40 ....",
    "the ` rdm ` command works transparently for any configuration , so @xmath6 behaves like a standard 9-orbital , 3-particle state .    what happens if we add two ` fermistate`s with different but compatible configurations ( i.e.",
    ", the total number of orbitals and particles is the same ) ?    ....",
    "> > orbs = [ 2,7 ] ; n = [ 1,2 ] ; > >",
    "phi = fermistate(orbs , n )    phi =       fermi state ( orbs = = 9 , n = = 3 )      |134 >    > > length(phi )    ans =        42    > >",
    "chi = psi+phi    chi =       fermi state ( orbs = = 9 , n = = 3 )      |126 > + |134 > ....    as expected  so how is this accomplished ? ` fermifab ` has detected that it needs to combine the two configurations , resulting in the full - fledged 9-orbital , 3-particle state .",
    "this fact can be checked by    ....",
    "> > length(chi )    ans =        84 ....      the mathematica version of ` fermifab ` is  quite naturally  inherently based on symbolic language .",
    "considering matlab , the ( optionally available ) symbolic math toolbox integrates seamlessly into ` fermifab ` , too .",
    "taking advantage of symbolic computations is thus easily accomplished .",
    "that is , in the above examples , we may as well insert symbolic variables :    .... > > syms a b c > > y = sym(zeros(1,nchoosek(orbs , n ) ) ) ; > >",
    "y(1 ) = a ; y(3 ) = 1i*b^2 ; y(4 ) = 1/c ; > > psi = set(psi,'data',y )    psi =       fermi state ( orbs = = 6 , n = = 4 )      ( a)|1s 1s~ 2s 2s~ > + ( b^2*i)|1s 1s~ 2s 2p~ > + ( 1/c)|1s 1s~ 2s~ 2p >    > >",
    "rdm(psi,2 )    ans =       fermi operator wedge^2 h - > wedge^2 h ( orbs = = 6 )    matrix representation w.r.t . ordered slater basis ( |12 > , |13 > , ...",
    "|56 > ) - > ( |12 > , |13 > , ... |56 > ) :    [ ( c*b^2*conj(b)^2 + a*c*conj(a))/c + 1/(c*conj(c ) ) ,   ... ....",
    "the algorithmic implementation is based on the canonical mapping from slater determinants to _ bitfields_. that is , each slater determinant corresponds to an unsigned integer @xmath30 , where the @xmath31th bit is set to 1 precisely when the @xmath31th orbital is occupied . to remain unambiguous in terms of bitlength , the first orbital",
    "is stored in the lsb ( least significant bit ) .",
    "now , our task consists of re - expressing the creation / annihilation and rdm formalism in terms of bit operations .",
    "note that , for example , testing whether all occupied orbitals in @xmath32 are also occupied in @xmath33 amounts to the pretty simple line of code @xmath34 , where we have used the bitwise and operator @xmath35 .",
    "the following table summarizes all required bit operations : +    [ cols= \" < , < \" , ]     for example , @xmath36 and @xmath37 .",
    "note that bit operations are typically very `` cheap '' on cpus .",
    "( in particular , refer to the sse4  @xcite ` popcnt ` `` population count '' instruction for bit counting . )",
    "diving a little bit further down into cpu intrinsics , we will make use of twos - complement arithmetic for negating numbers  @xcite , e.g. , @xmath38 interestingly , precisely all bits flip which are more significant than the least significant 1-bit ( marked red ) .",
    "thus , we can use this property to extract the last 1-bit from a bitfield @xmath39 simply by @xmath40 ( an less universal alternative is the ` bsf ` `` bit scan forward '' instruction  @xcite , which returns the index of the least significant 1-bit . )      the basic task we set out to accomplish in this subsection is lexicographically enumerating all slater determinants of a fixed particle number @xmath2 and number of orbitals @xmath8. this amounts to computing the lexicographically next bit permutation ( denoted by @xmath41 ) .",
    "for example , @xmath42 closer inspection reveals the general rule that the leading 1-bit ( marked red ) in the least significant block of 1s gets shifted to the left by one position , and the remaining 1-bits are shifted to the end .",
    "algorithm  [ alg : nextfermi ] is adopted from  @xcite and performs exactly this computation . in line  [ algline : trailingzeros ]",
    ", @xmath43 sets the trailing zeros in @xmath30 to 1 , so for example , @xmath44 @xmath45 @xmath46 and @xmath47 . the second term in line  [ algline : shiftblock ] performs the shifting of the remaining 1-bits to the end .    @xmath30 : * bitfield * @xmath48 [ algline : trailingzeros ] @xmath49 [ algline : shiftblock ]    as an extension of algorithm  [ alg : nextfermi ] , we want to take into account `` configurations '' , i.e. , a subdivision of the available orbitals into several groups , each of which contains a fixed number of particles .",
    "for example , we compartmentalize a total of @xmath50 orbitals such that exactly @xmath51 particles are in the first @xmath14 orbitals and @xmath52 in the remaining @xmath53 orbitals , written as @xmath54 and @xmath55",
    ". then a sequence of patterns  respecting the configuration restrictions  would be @xmath56 where we have highlighted the currently changing 1-bits by red colors .",
    "more formally , given @xmath57 , the compartmentalization may be written as @xmath58 with @xmath59 .",
    "in other words , @xmath60 . in the example",
    "above , @xmath61 and @xmath62 .",
    "now , mathematically speaking , a _ configuration _ of an @xmath2-particle state is a subspace of @xmath63 of the following form : @xmath64 where @xmath65 is a partition of @xmath2 ( i.e.  @xmath66 ) .",
    "a quantum chemist could interpret the @xmath67 as atomic subshells @xmath68 and the @xmath69 as occupation numbers .",
    "an interesting consequence of definition   is the recovery of a tensor product structure , namely @xmath70 this follows from the observation that a configuration is constructed by the lexicographical enumeration of slater determinants within orbital groups , as illustrated in  .",
    "algorithm  [ alg : nextfermiconfig ] implements precisely this enumeration . in accordance with the lexicographical scheme",
    ", it first iterates through all slater determinants within the least significant orbital group ( line  [ algline : nextlocalfermi ] ) , then resets this group ( first term in line  [ algline : reset ] ) and recursively computes the next bit pattern for the remaining groups ( line  [ algline : recursivenext ] ) .",
    "the @xmath71 in line  [ algline : groupmask ] is required for testing whether the last bit permutation within the least significant group has been reached ( line  [ algline : groupdone ] ) . in the example",
    "above , we would have @xmath72 .",
    "@xmath30 : * bitfield * , orbs : * int array * @xmath73 ) - 1 $ ] [ algline : groupmask ] [ algline : groupdone ] @xmath74 [ algline : nextlocalfermi ] -1 @xmath75 , \\mathrm{orbs}[1,\\dots,\\mathrm{end}])$ ] [ algline : recursivenext ] -1 @xmath76)$ ] [ algline : reset ]      the creation / annihilation operator formalism is an essential ingredient of many - particle quantum mechanics and quantum field theory  @xcite . for a very brief sketch ,",
    "let @xmath77 be a @xmath4-particle wavefunction with @xmath78 .",
    "then , the linear _ annihilation operator _",
    "@xmath79 acting on @xmath11 removes or `` annihilates '' the state @xmath80 from @xmath11 .",
    "more precisely , @xmath79 is uniquely determined by its antilinearity in @xmath80 , @xmath81 together with the decomposition for slater determinants , @xmath82 as well as the definition @xmath83 for all @xmath84 .",
    "the sign factor can be interpreted as number of orbital `` flips '' illustrated in figure  [ fig : annihilsingle ] .    .",
    "in terms of quantum mechanics , @xmath85.,scaledwidth=75.0% ]    so far we have considered annihilation operators only . the _ creation operator _",
    "@xmath86 is by definition the adjoint ( conjugate transpose ) of @xmath79 , as the notation already suggests .",
    "it can be shown that the following relations hold , where the anticommutator bracket is defined by @xmath87 and @xmath88 are arbitrary wavefunctions : @xmath89    in the remainder of this subsection , we want to detail an efficient algorithmic implementation of the annihilation operation , w.l.o.g .  for slater determinants only .",
    "more precisely , let @xmath90 be a fixed slater determinant , then our task is the calculation of @xmath91 for arbitrary slater determinants @xmath92 and @xmath78 .",
    "the result will be nonzero only if all occupied orbitals in @xmath93 are also occupied in @xmath30 , which can be tested by @xmath94 as already mentioned in the beginning . given",
    "this holds true , the bit pattern describing the slater determinant @xmath91 is simply @xmath95 , so what essentially remains is the calculation of the sign factor .    for that purpose",
    ", we define the _ annihilation sign mask _ of @xmath30 such that each bit stores the integer parity of the number of less or equal significant 1-bits in @xmath30 .",
    "that is , if @xmath30 has binary representation @xmath96 for example , @xmath97 results in @xmath98 where blue overhead numbers label bit positions .",
    "algorithm  [ alg : annihilsignmask ] implements this calculation .",
    "it has a running time of @xmath99 since the last statement ( line  [ algline : removelastbit ] ) in the while loop removes the least significant 1-bit from @xmath30 . in line  [ algline : addparities ]",
    ", the @xmath100 operation flips all bits which are less or equal significant than the current least significant 1-bit .",
    "@xmath30 : * bitfield * * bitfield * @xmath101 @xmath102 @xmath103 [ algline : addparities ] @xmath104 [ algline : removelastbit ] @xmath105    finally , we define the _ reverse permutation sign _",
    "@xmath106 for all @xmath107 by the sign of the permutation @xmath108 ( @xmath109 ) .",
    "a moment s thought reveals that @xmath110    altogether , our devised algorithm is illustrated in figure  [ fig : annihilsignfactor ] .",
    "more formally , we obtain @xmath111 with the sign factor @xmath112 equal to @xmath113 where we have set @xmath114",
    ". equation   will be the basic building block for calculating reduced density matrices in algorithm  [ alg : slaterrdm ] below , as described in the next subsection .    .",
    "the contribution from all flips ( curved arrows ) during each step can be obtained from the marked bit in @xmath115 .",
    "note that this mask needs to be calculated only once .",
    "the permutation sign for sorting the three red orbitals in the last step equals @xmath116 , so the overall sign factor is @xmath117 .",
    "algorithmically , the whole schematic is implemented by equation  .,scaledwidth=75.0% ]      in this subsection we briefly recall the relevant abstract formalism , and then describe the algorithmic implementation in the ` fermifab ` toolbox .",
    "let @xmath118 ( @xmath119 ) and denote orthonormal basis sets of @xmath120 by @xmath121",
    ". for wavefunctions @xmath122 ( @xmath119 ) , define the _ reduced density matrix _ @xmath123 by @xmath124 where we have employed the creation / annihilation operators defined in the last subsection .",
    "the significance of this definition can be seen as follows .",
    "any linear map @xmath125 with matrix representation @xmath126 may be `` lifted '' to an operator @xmath127 by @xmath128 ( a prominent example is the coulomb operator ( @xmath129 ) , which describes the _ pairwise _ interaction between charged particles . ) now , the @xmath130 expectation value with respect to @xmath131 equals @xmath132 in other words , this equation switches from @xmath133 to @xmath120 ( @xmath119 ) . for many applications ,",
    "this is the only possibility to avoid the `` curse of dimensionality '' induced by the @xmath134 , @xmath135-particle systems . in terms of ` fermifab ` ,   is implemented by the ` p2n ` command .    in the rest of this subsection , we focus on the calculation of @xmath136 in algorithm  [ alg : slaterrdm ] .",
    "due to linearity , it suffices to restrict ourselves to slater determinants .",
    "that is , @xmath137 and @xmath138 are ( w.l.o.g . ) replaced by slater determinants @xmath32 and @xmath33 , respectively , and it is assumed that the @xmath139 are slater determinants , too .",
    "so the last term in   can be concisely written as @xmath140 with slater determinants @xmath141 ( @xmath119 ) .",
    "note that the particle number conservation law imposes @xmath142 , otherwise all terms will be zero ; so we calculate @xmath143 from given @xmath134 , @xmath135 and @xmath144 .     or @xmath33 , but not in both , whereas `` choice '' labels all orbitals occupied in @xmath32 as well as @xmath33.,scaledwidth=90.0% ]    the basic algorithmic idea is exemplified in figure  [ fig : rdmpair ] .",
    "namely , we subsume all orbitals occupied either in @xmath32 or @xmath33 , but not in both , as `` force '' group , and all orbitals occupied in both @xmath32 and @xmath33 as `` choice '' group .",
    "the corresponding bit patterns @xmath145 and @xmath146 are computed in lines  [ algline : forcemask ]  and  [ algline : choicemask ] of algorithm  [ alg : slaterrdm ] by a single bit operation .",
    "since @xmath140 is nonzero only if @xmath147 , all occupied `` force '' orbitals have to be annihilated by @xmath148 and @xmath149 , respectively . on the other hand ,",
    "each `` choice '' orbital annihilated by @xmath148 must also be annihilated by @xmath149 and vice versa , but there s a freedom in exactly which of these orbitals to select , hence the `` choice '' designator . in our example , the only force orbital occupied in @xmath32 is @xmath150 , so @xmath151 must contain @xmath150 but may `` choose '' between @xmath53 , @xmath14 and @xmath152 . if @xmath153 , we obtain @xmath151 equal to one of @xmath154 , @xmath155 or @xmath156 .",
    "the respective @xmath157 states are then @xmath158 , @xmath159 and @xmath160 . after the obligatory annihilation sign factor calculations  ,",
    "the final result ( for @xmath153 ) is @xmath161    algorithm  [ alg : slaterrdm ] implements equation   in line  [ algline : signfactor ] and the first term of line  [ algline : appendresult ] .",
    "@xmath162 stores the orbitals which must be annihilated in @xmath163 ( @xmath119 ) , and the number of to - be annihilated `` choice '' orbitals in @xmath32 is computed in line  [ algline : numchoice1 ] .",
    "the while loop accumulates the return value list @xmath164 containing the ket - bra s as in the above example . in line  [ algline : bitdistribute ] , the algorithm uses the @xmath165 command , which basically just shifts bits to the positions designated by the 1-bits in @xmath146 .",
    "@xmath32 , @xmath33 : * bitfield * , @xmath144 : * int * @xmath166 [ algline : forcemask ] @xmath167 ( @xmath119 ) @xmath168 [ algline : numchoice1 ] 0 @xmath169 @xmath170 , @xmath119 @xmath171 [ algline : signfactor ] @xmath172 @xmath173 [ algline : choicemask ] @xmath174 @xmath175 @xmath176 @xmath177 [ algline : bitdistribute ] append @xmath178 [ algline : appendresult ] @xmath179 r      as a short outlook , we want to illustrate how the developed methods can easily be adapted to bosonic systems as well . in quantum mechanics ,",
    "bosons are subatomic particles which obey bose - einstein statistics , like , for example , photons . for our purposes ,",
    "we replace fermionic `` orbitals '' by bosonic `` modes '' , which can be multiply occupied ( i.e. , the pauli exclusion principle no longer holds for bosons ) .",
    "that is , the bosonic analogue of a fermionic slater determinant differs only by the unrestricted number of particles in each mode .",
    "the central observation of this subsection states that a bit - encoding ( equivalent to slater determinants ) works for bosons as well .",
    "the idea is detailed in figure  [ fig : bosonencode ] , where 0-bits serve as delimiters between modes .",
    "lexicographical enumeration of bosonic states with a fixed total particle number @xmath2 and number of modes @xmath105 is accomplished via enumeration of the bit - encoded slater determinants with @xmath180 orbitals and @xmath2 particles !",
    "that is , algorithm  [ alg : nextfermi ] may be employed without modifications .",
    "the application example is based on the series  @xcite , in which  @xcite makes use of the ` fermifab ` toolbox to calculate ground state approximations for transition metal atoms ( employing so - called configuration - interaction ( ci ) methods ) .",
    "the underlying quantum mechanical ( non - relativistic , born - oppenheimer ) hamiltonian @xmath181 with @xmath182 governs atoms / ions with @xmath2 electrons and nuclear charge @xmath183 .",
    "the two terms in @xmath184 are the single - particle kinetic energy and nuclear potential , respectively , whereas the coulomb operator @xmath185 describes the pairwise inter - electron coulomb repulsion .",
    "the hamiltonian leaves the simultaneous eigenspaces of the well - known angular momentum , spin and parity ( ls ) operators invariant , so calculating these eigenspaces _ first _ leads to a huge dimension reduction .",
    "specifically , the ` fermifab ` toolbox automates the ls - eigenspace computation by combining configurations   with clebsch - gordan coefficients .",
    "we skip further details here ; instead , for the purpose of this section , we provide two orthonormal ls - eigenstates of neutral chromium ( @xmath186 ) with symmetry level @xmath187 : @xmath188 and @xmath189 in this notation , @xmath190 means spin down @xmath191 , otherwise up @xmath192 , and the @xmath193 subshell orbitals are labeled @xmath30 , @xmath194 and @xmath195 , respectively .",
    "the numbers 3 and 4 denote the third and fourth shell .",
    "since all spin - orbitals up to @xmath196 are fully occupied , they are not shown here for conciseness of notation .",
    "the following paragraph demonstrates how to translate the expectation value @xmath197 into a list of coulomb integral symbols @xmath198 where @xmath199 are _ spatial _ orbitals and @xmath200 denotes complex conjugation . as shown in  , the essential step is the calculation of the 2-body reduced density matrix @xmath136 . using the mathematica version of ` fermifab ` , this is accomplished by the first line of the following code sample ( see ` mathematica / rdmdemo.nb ` ) ; the subsequent code just displays the result : +   the ` fermitocoords ` command converts any bit - encoded slater determinant to a vector of integers enumerating the occupied orbitals .",
    "since the coulomb operator is independent of spin , we may effectively `` trace out '' the spin coordinate from the employed spin - orbitals .",
    "specifically , consider single - particle wavefunctions @xmath201 which factor into the spatial part @xmath202 and spin part @xmath203 .",
    "endowing particle @xmath31 with coordinates @xmath204 , the antisymmetrized @xmath52-body slater determinants read @xmath205 plugged into the following equation for the coulomb expectation value yields @xmath206 translating this equation to alternating spin up @xmath192 and down @xmath191 orbitals ( and taking symmetries of @xmath207 into account ) is accomplished by the ` spintracecoulomb ` command in the first line of the following code sample : +   note that spatial orbitals can appear twice within a coulomb integral symbol , e.g. , @xmath208 .",
    "thus , a bosonic encoding of these spatial orbitals is used to accommodate multiple occurrences , and hence the ` bosontocoords ` command .",
    "concluding , we have obtained the desired list of coulomb integral symbols , which may then be evaluated by inserting concrete functions into  .",
    "i d like to thank gero friesecke and ben goddard for many helpful discussions and feedback during the last two years .",
    "the toolbox inception was in spring 2008 for automating the ( somewhat tedious ) pen - and - paper calculations in  @xcite .",
    "these papers are concerned with the schrdinger equation for atoms and ions from @xmath209 to @xmath210 electrons .",
    "specifically , @xcite  exploits the angular momentum , spin and parity symmetries of atoms to escape the prohibitively large dimensions incurred by quantum mechanical many - particle systems .",
    "yet , application to atoms with even higher electron numbers ( @xmath211 ) requires symbolic computer algebra . in  @xcite",
    ", we specifically treat 3d transition metal atoms and use some algorithmic improvements incorporated into the ` fermifab ` toolbox .",
    "loewdin , quantum theory of many - particle systems .",
    "i. physical interpretations by means of density matrices , natural spin - orbitals , and convergence problems in the method of configurational interaction , physical review 97  ( 6 ) ( 1955 ) 14741489 .",
    "intel , http://developer.intel.com/products/processor/manuals/index.htm[intel 64 and ia-32 architectures software developers manuals : basic architecture ] ( 2010 ) .",
    "http://developer.intel.com / products / processor / manuals / i% ndex.htm[http://developer.intel.com / products / processor / manuals / i% ndex.htm ]    intel , http://developer.intel.com/products/processor/manuals/index.htm[intel 64 and ia-32 architectures software developer s manuals : instruction set reference ] ( 2010 ) . http://developer.intel.com / products / processor / manuals / i% ndex.htm[http://developer.intel.com / products / processor / manuals / i% ndex.htm ]        g.  friesecke , b.  d. goddard , explicit large nuclear charge limit of electronic ground states for li , be , b , c , n , o , f , ne and basic aspects of the periodic table , siam journal on mathematical analysis 41  ( 2 ) ( 2009 ) 631664 .",
    "http://dx.doi.org/10.1137/080729050 [ ] .",
    "g.  friesecke , b.  d. goddard , asymptotics - based ci models for atoms : properties , exact solution of a minimal model for li to ne , and application to atomic spectra , siam multiscale modeling and simulation 7  ( 4 ) ( 2009 ) 18761897 . http://dx.doi.org/10.1137/080736648 [ ] .    c.  b. mendl , g.  friesecke , efficient algorithm for asymptotics - based configuration - interaction methods and electronic structure of transition metal atoms , journal of chemical physics 133 ( 2010 ) 184101 ."
  ],
  "abstract_text": [
    "<S> this paper introduces the ` fermifab ` toolbox for many - particle quantum systems . </S>",
    "<S> it is mainly concerned with the representation of ( symbolic ) fermionic wavefunctions and the calculation of corresponding reduced density matrices ( rdms ) . </S>",
    "<S> the toolbox transparently handles the inherent antisymmetrization of wavefunctions and incorporates the creation / annihilation formalism . </S>",
    "<S> thus , it aims at providing a solid base for a broad audience to use fermionic wavefunctions with the same ease as matrices in matlab , say . </S>",
    "<S> leveraging symbolic computation , the toolbox can greatly simply tedious pen - and - paper calculations for concrete quantum mechanical systems , and serves as `` sandbox '' for theoretical hypothesis testing . ` </S>",
    "<S> fermifab ` ( including full source code ) is freely available as a plugin for both matlab and mathematica .    </S>",
    "<S> symbolic computation , many - particle quantum mechanics , reduced density matrices , creation / annihilation operators , slater determinants    pacs numbers : 31.15.a- , 31.15.ac , 31.15.-p , 02.70.wz </S>"
  ]
}