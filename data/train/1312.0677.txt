{
  "article_text": [
    "web service ( ws ) is a quite new distributed software component which emerged about ten years ago to utilize the most widely - used internet application protocol  http as its base transport protocol . as a component",
    ", a ws has the similar ingredients as other ones , such as dcom , ejb , corba , and so on .",
    "that is , a ws uses http - based soap@xcite as its transport protocol , wsdl@xcite as its interface description language and uddi@xcite as its name and directory service .",
    "ws composition creates new composite wss using different composition patterns from the collection of existing wss .",
    "because of advantages of ws to solve cross - organizational application integrations , two composition patterns@xcite are dominant .",
    "one is called web service orchestration ( wso ) , which uses a workflow - like composition pattern to orchestrate business activities ( implemented as ws operations ) and models a cross - organizational business processes or other kind of processes . the other is called web service choreography",
    "( wsc ) which has an aggregate composition pattern to capture the external interaction behaviors of wss and acts as a contract or a protocol among wss .",
    "we now take a simple example of buying books from a book store to illustrate some concepts of wscomposition .",
    "though this example is quite simple and only includes the sequence control flow ( that is , each business activity in a business process is executed in sequence ) , it is enough to explain the concepts and ideas of this paper and avoids unnecessary complexity without loss of generality .",
    "we use this example throughout this paper .",
    "the requirements of this example are as fig.[fig.5 ] shows .",
    "a customer buys books from a book store through a user agent . in this example",
    ", we ignore interactions between the customer and the user agent , and focus on those between the user agent and the book store .",
    "either user agent or book store has business processes to interact with each other .",
    "we give the process of user agent as follows .",
    "the process of book store can be gotten from that of user agent as contrasts .    1 .",
    "the user agent requests a list of all books to the book store . 2 .",
    "it gets the book list from the book store .",
    "it selects the books by the customer and sends the list of selected books to the book store .",
    "it receives the prices of selected books from the book store .",
    "it accepts the prices and pays for the selected book to the book store",
    ". then the process terminates .",
    "since the business activities , such as the book store accepting request for a list of books from the user agent , are implemented as wss ( exactly ws operations ) , such buyer agent and book store business processes are called wsos .",
    "these wsos are published as wss called their interface wss for interacting among each other .",
    "the interaction behaviors among wss described by some contracts or protocols are called wscs .",
    "there are many efforts for ws composition , including its specifications , design methods and verifications , simulations , and runtime supports .",
    "different methods and tools are used in ws composition research , such as xml - based wso description specifications and wsc description specifications , formal verification techniques based on process algebra and petri - net , and runtime implementations using programming languages .",
    "some of these works mainly focus on wso , others mainly on wsc , and also a few works attempt to establish a relationship between wso and wsc",
    ".    can a ws interact with another one ? and also , can a wso interact with another one via their interfaces ?",
    "is the definition of a wsc compatible with its partner wss or partner wsos ? to solve these problems , a correct relationship between wso and wsc must be established .",
    "a ws composition system combining wso and wsc , with a natural relationship between the two ones , is an attractive direction@xcite .",
    "in such a system , not only wso is focused like the famous wso engine ",
    "activebpel@xcite , some monitoring tools and modeling tools , but also wsc is included . and",
    "in a systematic viewpoint , ws , wso and wsc are organized with a natural relationship under the whole environment of cross - organizational business integration .",
    "more importantly , such a system should have firmly theoretic foundation with formal semantics support .    in this paper",
    ", we try to make such a system to base on actor systems theory@xcite@xcite@xcite .",
    "the contributions of our works are : ( 1)through analysis of ws , wso and wsc , we design a ws composition runtime architecture with which a natural relationship among the three ones is established .",
    "( 2)we introduce an actor - based language called ab - wscl to support such an architecture .",
    "( 3)more importantly , the rewriting semantics of ab - wscl are given .",
    "especially , through interaction semantics between wso and ws , ws and ws , wso and wso , the compositionality concept is used to give finely formal relations among these system components .",
    "( 4)to show the values of our works , mappings between ab - wscl and xml - based ws specifications are illustrated . based on the mappings ,",
    "our works can be used as not only a validation tools in design time , but also a runtime system itself .",
    "the organization of this paper is following : in section 2 , related works are analyzed .",
    "we design an architecture of ws composition runtime based on analysis of wso , wsc and their relationship in section 3 .",
    "based on the runtime architecture , ab - wscl is introduced in section 4 .",
    "formal semantics based on actor rewriting theory@xcite@xcite@xcite are given in section 5 . and",
    "finally , we conclude our current works and give future directions in section 6 .",
    "we introduce the related works about wso , wsc , and their relations .",
    "especially , we detail the works about formalization of ws composition .",
    "workflow@xcite@xcite is also a solution to cross - organizational business process integration .",
    "workflow in such situation is called cross - organizational workflow@xcite@xcite@xcite . but",
    "the implementations of activities in a cross - organizational workflow are not limited to wss .",
    "aalst uses petri net to model a workflow called wf - net@xcite and connects two wf - nets within different organizations into a newly global wf - net to model integration of two workflows .",
    "but , a partner workflow is located within an organization , that is , the details of an inner workflow are hidden to the external world , so a global view of entire connection with two detailed inner workflows usually can not be gotten .",
    "this leads to emergence of the so - called process view@xcite and integration of two inner process can be implemented based on process views@xcite .",
    "a process view is an observable version of an inner process from outside and serves as the interface of an inner process .",
    "research efforts on cross - organizational workflow give a great reference to ws composition , especially wso .",
    "wsos aimed at cross - organizational business process integrations and used a workflow - like pattern to orchestrate wss are surely some kinds cross - organizational workflows within which have activities implemented by wss outside .      in the viewpoint of w3c ,",
    "a ws itself is an interface or a wrapper of an application inside the boundary of an organization that has a willing to interact with applications outside .",
    "that is , a w3c ws has not an independent programming model like other component models and has not needs of containing local states for local computations .",
    "indeed , there are different sounds of developing ws to be a full sense component , such as ogsi@xcite .",
    "incompatibility between w3c ws and ogsi - like ws leads to wsrf@xcite as a compromised solution which reserves the w3c ws and develops a notion of ws resource to model states .",
    "since interactions among wss are eventually driven by their inner applications at runtime , there is no any necessary to maintain states for a ws .",
    "that is , a ws just _ deliver _ messages , including incoming messages and outgoing messages .",
    "a wso orchestrates ws operations into a workflow to deal with modeling of business process .",
    "the industry tries to define a uniform wso description language specification .",
    "the first one is wsfl@xcite which is a flow language based on directed acyclic graph ( dag ) .",
    "note that the flow model of wsfl is used to define a wso , wsfl also provides a so - called global model to aggregate wss .",
    "that is , global model gives a prototype to define a wsc .",
    "another one emerged at almost the same time is xlang@xcite which uses a structural model and provides programming constructs to define a wso .",
    "wsfl and xlang are converged to ws - bpel@xcite which adopts not only a dag model , but also a structural model .    as a runtime mechanism , wsrf - style",
    "ws can serve as an interface of a wso .",
    "but , a wso , even a ws resource , is surely different to a stateless function for share .",
    "that is , from a view of an observer outside , the interfaces of a wso surely are stateful and must be invoked under the constraints of the wso .",
    "note that , different observers may have different views to the same wso .",
    "such observable views of a wso are called abstract processes in ws - bpel@xcite and are called wsc interfaces in wsci@xcite .",
    "but these specifications do not explain their functions and even the relations to the original wso .",
    "though a wsrf - style ws can act as the interfaces of a wso at runtime , but it has few uses at design time . since observable views have more information about the inner wso , they can be used to do more things at design time , such as generation of a wsc and generation of stub codes being more expressive than those of wsdl .    at the beginning ,",
    "main efforts by the industry are done for wso specifications though global model of wsfl can be used to define a wsc .",
    "people realize that the definition of interaction behaviors among wss needs a separate specification .",
    "this leads to the occurrence of wsci@xcite and late ws - cdl@xcite .",
    "both wsci and ws - cdl capture the interactions among wss , including partner roles , messages exchanged definitions , linked ws operations and their executing sequence .",
    "a wsc acts as a contract or a protocol among interacting wss . in a viewpoint of business integration requirements ,",
    "a wsc serves as a business contract to constrain the rights and obligations of business partners . and from a view of ws technology",
    ", we can treat a wsc as a communication protocol which coordinates the interaction behaviors of involved wss .",
    "the research works on formalization of ws composition are almost numerous , we only introduce some representatives .",
    "formalization for wso includes formalization for wso , its interface , and the relationship between wso and its interface .",
    "the first issue on formalization for wso is formalizing control flows in a wso .",
    "the control flows may be expressed in graphic model or structural model .",
    "formalization for control flows may be based on different formal tools . by establishing the maps between control flows in a wso and",
    "constructs in one formal model , control flows can be translated into expressions in the formal model .",
    "then the properties , such as liveness and safety , can be verified .",
    "the observable view of a wso also includes control flows and inner transaction process mechanisms , so formalization for an observable view has the same issues as that of a wso . since the interface of a wso includes the observable view of the wso which is more expressive than the wsdl - expressed ws .",
    "that is , formalization for control flows and inner technical mechanisms may also be faced with .",
    "a wso interacts with outside via its interface , but , can the interface act in behalf of the inner wso ?",
    "that is , there must be a correct relationship between a wso and its interface .",
    "since observable view of a wso is an observable version of the inner wso , formalization for relationship between a wso and its interface can be based on some kind of equivalences , such as trace equivalence , bisimulation equivalence , and so on . under such concepts of equivalence , a correct relationship between a wso and its interface can be established .",
    "that is , an interface is _ same _ as its inner wso modulo such equivalence .",
    "automatic generation of an interface from an inner wso and also refinement of an inner wso with an interface are also contents of a formal model .",
    "petri net has good traditions in formalizing wso and can be casted back to aalst s wf - net@xcite .",
    "@xcite tries to give bpel a formal semantics based on petri net .",
    "the works cover the standard behaviors of bpel , including atomic activities , control flows in term of structural activities , exception processing , event processing and lrbt mechanism.@xcite also transforms a wso described by ws - bpel into a so - called service workflow net ( swn ) , which is a kind of colored petri net .",
    "and then it analyzes the compatibility of two services .",
    "process algebra is also an influential tool in formalizing ws composition .",
    "@xcite uses a process algebra ccs to model dynamic behaviors of a ws - bpel business process .",
    "then , by putting two processes of ccs which represent two ws - bpel wsos in parallel , compatibility of the two processes can be checked using theory of ccs",
    ". a variant form of process algebra called pi - calculus is also used as the similar solution to formalizing wso@xcite .",
    "indeed , there are almost numerous research works on formalization for wso and even workflow .",
    "to enumerate all the related works is unreachable .",
    "we give the representable works using different formal tools as follows .",
    "these works adopt the similar solution to giving wso a formal foundation .",
    "@xcite analyzes bpel using a framework composed of workflow patterns and communication patterns and makes a comparison of bpel , wsfl , xlang , etc . @xcite",
    "formally defines an abstract executable semantics for bpel based on an abstract state machine ( asm ) .",
    "@xcite transforms all primitive and structured activities of the bpel into a composable timed automata ( ta ) for verification .",
    "@xcite transforms all control flow patterns into lotos for validation .",
    "@xcite translates a wso described by bpel into an extended finite - state automaton ( efa ) and uses the spin model checker for the representation of the efa model for verification .",
    "@xcite defines a calculus called calculus for orchestration of web services ( cows ) to verify a wso .",
    "about formalization for an interface of a wso , especially an observable view , there are only a few works . @xcite and @xcite defines a process view for an cross - organizational workflow and discuss the usages of such a process view .",
    "but the model is almost a conceptual one and efforts still need to be done to comfort a ws composition background .",
    "@xcite points out that the abstract process in ws - bpel does not prevent complex computations and is unnecessarily complex .",
    "they propose some restrictions on data manipulation constructs in an abstract process and also introduce a logic framework to verify such a restricted abstract process .",
    "since wsc description language , such as ws - cdl , does not have formal verification support .",
    "formalization for wsc is to give wsc a formal semantics .",
    "such an approach is also to establish maps between entities of a wsc description language and those of a formal tools to provide formal semantics support .",
    "@xcite proposes a petri net approach for the design and analysis of wsc using ws - cdl@xcite as the language for describing wsc and petri net as a formalism to simulate and validate wsc . to capture timed and prioritized interactions ,",
    "the petri net used is a kind of prioritized version of time petri net ( ptpn ) .",
    "@xcite also gives wsci@xcite a formal semantics based on petri net .",
    "@xcite presents the semantics of ws - cdl in terms of process algebra csp .",
    "therefore , all the properties of a wsc to be checked can be verified with a csp framework .",
    "@xcite formalizes wsci based on process algebra ccs and can check whether two or more wss are compatible .",
    "there are also many works to give wsc a formal semantics .",
    "@xcite presents a formal model of ws - cdl based on a spatio - temporal logic which can be used to reason on properties interested . @xcite",
    "proposes a denotational semantics model for wsci .",
    "@xcite develops a relational calculus to simulate and validate a wsc described by ws - cdl .",
    "@xcite relates theory of contracts and wsc with a notion of choreography conformance .",
    "this topic may include the compatibility verification of the interacting wss or wsos , the conformance verification of a wsc and its partner wss or wsos , automatic generation with correct assurance of a wsc from existing interface definitions of wss or wsos , refinement with correct assurance of interface definitions of wss or wsos from an existing wsc .",
    "formalization works of wso and wsc can be used to verify properties , such as correctness , of either wso or wsc separately at modeling time or design time .",
    "@xcite and @xcite use process algebra csp as a formal basis for verifying the behavioral consistency among abstract and executable processes together with choreographic descriptions .",
    "@xcite@xcite transform a wso described by ws - bpel and a wsc defined by ws - cdl both into two process algebra , and uses the form of bisimulation relation to define a notion of conformance between the wso and the wsc .",
    "there are also some other works to unify wso and wsc .",
    "@xcite uses reo coordination language and constraint automata to derive a natural correspondence relationship between wso and wsc . and",
    "also exception handling and finalization / compensation are used to connect a wso and a wsc@xcite . @xcite and @xcite",
    "make that bpel specifications can be converted into ws - cdl specifications , and vice versa .",
    "this paper involves discussing a system with formal semantics support , which not only can be used for verifications and simulations at design time , including verifying properties of wso and wsc itself , and that of the relationship between wso and wsc , but also can serve as a ws composition runtime system with correctness analysis support indeed .",
    "bspl@xcite@xcite is an information - driven interaction - oriented programming language and can be used to model wsc , which is somewhat similar to our approach in this paper , but this is another topic .",
    "in this section , we firstly analyze the natures of wso and wsc .",
    "based on the analysis , design decisions on ws composition runtime are made . finally , we design the architecture of ws composition runtime , within which has a natural relationship among ws , wso and wsc .",
    "a ws is a distributed software component with transport protocol ",
    "soap , interface description by wsdl , and can be registered into uddi to be searched and discovered by its customers .",
    "a wso orchestrates wss existing on the web into a process through the so - called control flow constructs .",
    "that is , within a wso , there are a collection of atomic function units called activities with control flows to manipulate them .",
    "so , the main ingredients of a wso are following .",
    "* inputs and outputs : at the start time of a wso , it accepts some inputs . and it sends out outcomes at the end of its execution . * information and variable definitions : a wso has local states which maybe transfer among activities .",
    "finally , the local states are sent to wss outside by activities in the form of messages . in turn",
    ", activities receiving message outside can alter the local states . * activity definitions : an activity is an atomic unit with several pre - defined function kinds , such as invoking a ws outside , invoking an application inside , receiving a request from a customer inside / outside , local variable assignments , etc . *",
    "control flow definitions : control flow definitions give activities an execution order . in terms of structural model",
    "based control flow definitions , control flows are the so - called structural activities which can be sequence activity , choice activity , loop activity , parallel activity and their variants . *",
    "binding ws information : added values of ws composition are the so called recursive composition , that is , a wso orchestrating existing wss is published as a new ws itself too .",
    "a wso interacts with other wss outside through this new ws ( that is detailed in [ in and out ] ) .    in fig.[fig.5 ] , the user agent business process is modeled as useragent wso described by ws - bpel , which is described in appendix.[xmldescription ] .",
    "the interface ws for useragent wso is called useragent ws described by wsdl , which also can be found in appendix.[xmldescription ] .",
    "a wsc defines the external interaction behaviors and serves as a contract or a protocol among wss .",
    "the main ingredients of a wsc are as following .",
    "* parter definitions : they defines the partners within a wsc including the role of a partner acting as and relationships among partners . *",
    "information and variable definitions : a wsc may also have local states exchanged among the interacting wss . * interactions among partners : interaction points and interaction behaviors are defined as the core contents in a wsc .    in the buying books example , the wsc between user agent and bookstore ( exactly useragentws and bookstorews ) called buyingbookwsc is described by ws - cdl , which can be found in appendix.[xmldescription ] .",
    "the wso and the wsc define two different aspects of ws composition .",
    "their relationships as fig.[fig.1 ] illustrates .",
    "note that a wso may require at least a wsc , but a wsc does not need to depend on a wso .            in the viewpoint of w3c ,",
    "a ws itself is an interface or a wrapper of an application inside the boundary of an organization that has a willing to interact with applications outside .",
    "that is , a w3c ws has no an independent programming model like other component models and has no needs of containing local states for local computations . indeed , there are different sounds of developing ws to be a full sense component , such as ogsi@xcite .",
    "incompatibility between w3c ws and ogsi - like ws leads to wsrf@xcite as a compromised solution which reserves the w3c ws and develops a notion of ws resource to model states .",
    "we adopt the ideas of wsrf .",
    "that is , let ws be an interface or a wrapper of wso and let wso be a special kind ws resource which has local states and local computations .",
    "the interface ws of a wso reserves i d of the wso to deliver an incoming message to the wso and send an outgoing message with the i d attached in order for delivering a call - back message .",
    "further more , a wso and its ws are one - one binding .",
    "when a new incoming message arrives without a wso i d attached , the ws creates a new wso and attaches its i d as a parameter .",
    "about creation of a wso by its ws , please refer to [ ws creation ] .",
    "just as the name implies , a ws serves as a server to process an incoming message within a c / s framework .",
    "but an interaction between a component ws or a wso requires incoming message and outgoing message pairs .",
    "when an interaction occurred , one serves as a client and the other serves as a server .",
    "but in the next interaction , the one served as client before may serve as a server and the server becomes a client .",
    "the problem is that , when a wso ( or other kind ws resource ) inside interacts with wss outside , who is willing to act as the bridge between the wso inside and wss outside ? when an incoming message arrives , it is easily to be understood that the incoming message is delivered to the wso by the interface ws .",
    "however , how is an outgoing message from a wso inside to a component ws outside delivered ?",
    "in fact , there are two ways to solve the outgoing message .",
    "one is the way of ws - bpel@xcite , and the other is that of an early version of wsdl@xcite . the former uses a so - called _ invoke _ atomic activity defined in a wso to send an outgoing message directly without the assistant of its interface ws .",
    "in contrast , the latter specifies that every thing exchenged between resources inside and functions outside must go via the interface ws of the resource inside .",
    "furthermore , in an early edition of wsdl , there are four kind of ws operations are defined , including an * in * operation , an * in - out * operation , an * out * operation and an * out - in * operation . * in * operation and * in - out * operation receive the incoming messages , while * out * operation and * out - in * operation deliver the outgoing messages . * out * operation and * out - in * operation are somewhat strange because a ws is a kind of server in nature .",
    "so , in the later versions of wsdl , * out * operation and * out - in * operation are removed .",
    "but the problem of how to process the outgoing message is remaining .",
    "the way of ws - bpel will cause some confusions in the ws composition runtime architecture design ( see [ architecture ] ) .",
    "and the way of the early edition of wsdl looks somewhat strange .",
    "so , our way of processing outgoing message is a compromise of the above two ones .",
    "that is , the outgoing messages from an internal wso to an external resource , must go via the ws of the internal wso .",
    "but the ws does not need to declare operations for processing the outgoing messages in the wsdl definitions .",
    "a wsc acts as a contract or a protocol between interacting wss . in a viewpoint of business integration requirements ,",
    "a wsc serves as a business contract to constrain the rights and obligations of business partners . and from a view of utilized technologies ,",
    "a wsc can be deemed as a communication protocol which coordinates the interaction behaviors of involved wss .    about the enablements of a wsc",
    ", there are also two differently enable patterns .",
    "one is a concentrated architecture and the the other is a distributed one .",
    "the concentrated way considers that the enablements of a wsc must be under supervision of a thirdly authorized party or all involved partners . an absolutely concentrated way maybe require that any operation about interacting wss must be done by the way of a supervisor .",
    "this way maybe cause the supervisor becoming a performance bottleneck when bulk of interactions occur , but it can bring trustworthiness of interaction results if the supervisor is trustworthy itself .",
    "the distributed way argues that each ws interacts among others with constraints of a wsc and there is no need of a supervisor .",
    "it is regarded that wss just behave _ correctly _ to obey to a wsc and maybe take an example of enablements of open internet protocols .",
    "but there are cheating business behaviors of an intendedly _ incorrect _ ws , that are unlike almost purely technical motivations of open internet protocols .    in this paper",
    ", we use a hybrid enablements of wsc .",
    "that is , when a wsc is contracted ( either contracted dynamically at runtime or contracted with human interventions at design time ) among wss and enabled , the wsc creates the partner wss at the beginning of enablements .",
    "and then the wss interact with each other _ freely _ and _ correctly_. about the cheating behaviors of a ws are out of the scope of this paper .",
    "based on the above introductions and discussions , we design an architecture of ws composition runtime as fig.[fig.2 ] shows .",
    "fig.[fig.2 ] illustrates the typical architecture of a ws composition runtime .",
    "we explain the compositions and their relationships in the following .",
    "there are four components : wso , ws , wsc and applications inside .",
    "the functions and ingredients of a wso are introduced in [ wso and wsc ] .",
    "usually it has a collection of activities that may interact with partner wss outside or applications inside .",
    "enablements of a wso require a runtime environment which is not illustrated in fig.[fig.2 ] . for examples ,",
    "execution of a wso described by ws - bpel needs a ws - bpel interpreter ( also called wso engine like activebpel@xcite ) and a wso modeled in our ab - wscl also needs an implementation ( see [ language implementations ] ) .",
    "a wso locates in the interior of an organization .",
    "it interacts with applications inside with private exchanging mechanisms and with other partner wsos outside via its interface ws .",
    "applications inside may be any legacy application or any newly developed application within the interior of a organization .",
    "these applications can be implemented in any technical framework and provide interfaces to interact with other applications inside , including a wso .",
    "interactions between a wso and a application inside may base on any private communication mechanism , such as local object method call , rpc , rmi , etc , which depends on technical framework adopted by the application .",
    "an interface ws acts as an interface of a wso to interact with partner wss outside .",
    "a wso is with an one - to - one binding to its interface ws and is created by its interface ws at the time of first interaction with exterior .",
    "( relationship of a wso and its interface ws please refer to [ in and out ] ) .",
    "enablements of a ws also require a runtime support usually called soap engine like axis soap engine@xcite which implies a http server installed to couple with http requests . a ws and its runtime support locate at demilitarized zone ( dmz ) of an organization which has different management policies and different security policies to the interior of an organization .",
    "a wsc acts as a contract or a protocol of partner wss ( see [ wso and wsc ] ) .",
    "when a wsc is enabled , it creates all partner wss at their accurate positions ( see [ ws creation ] ) .",
    "enablements of a wsc also require a runtime support to interpret the wsc description language like ws - cdl .",
    "a wsc and its support environment can be located at a thirdly authorized party or other places negotiated by the partners .",
    "actor@xcite@xcite@xcite is a basic computation model that captures the natures of concurrency in distributed computing .",
    "there are many efforts to abstract at a high - level from aspects of distributed computing , such as policy management@xcite , interaction policies@xcite , resource management@xcite , communication and coordination of agents@xcite , worldwide computing@xcite , etc .",
    "our works are somewhat based on these high - level abstractions and make customizations for special requirements of ws composition .    in this section ,",
    "we introduce an actor - based language called ab - wscl@xcite to support the ws composition runtime architecture in [ architecture ] .",
    "firstly , basics of an actor are introduced .",
    "then we give the definitions of ingredients of ab - wscl , including activity actor ( aa ) , web service orchestration ( wso ) , web service ( ws ) , and web service choreography ( wsc ) .",
    "an example of ws composition programmed with ab - wscl is illustrated and some issues about ab - wscl are discussed .",
    "finally , we discuss about implementation of ab - wscl based on an actor runtime called actor foundry@xcite .",
    "ab - wscl adopts a java - like syntax and the syntax of java is not explained any more .",
    "an actor acts as an atomic function unit of concurrent computation and is able to model elements of the architecture in [ architecture ] .",
    "we use an actor as a distributed concurrent object , as illustrated in @xcite .",
    "an actor is a concurrent object that encapsulates a set of states , a control thread and a set of local computations .",
    "it has a unique mail address and maintains a mail box to accept messages sent by other actors .",
    "actors do local computations by means of processing the messages stored in the mail box sequentially and block when their mail boxes are empty .    during processing a message in mail box",
    ", an actor may perform three candidate actions : ( 1)(*send * action)sending messages asynchronously to other actors by their mail box addresses ; ( 2)(*create * action ) creating new actors with new behaviors ; ( 3)(*ready * action ) becoming ready to process the next message from the mail box or block if the mail box is empty .",
    "the illustration of an actor model as shows in fig.[fig.3 ] which is first shown in @xcite .",
    "note that messages are sent asynchronously among actors by default , but synchronization@xcite can also be achieved among actors .    following the action model of an actor in @xcite , in this paper",
    ", we also use a signal - notification pair to factor actions of an actor , as illustrated in fig.[fig.4 ] .",
    "an actor sends a * transmit * signal and blocks until a * continue * notification is received .",
    "similarly , an actor sends a * ready * signal and blocks then may be resumed by a * deliver * notification , or sending a * transmit * signal .",
    "differently , an actor creates other actors without any event generated .",
    "this model is used to capture the interactions among actors with synchronization support in the following sections .",
    "an activity is an atomic function unit of a wso and is managed by the wso .",
    "we use an actor called activity actor ( aa ) to model an activity .",
    "an aa has a unique name , local information and variables to contain its states , and local computation procedures to manipulate the information and variables .",
    "an aa is always managed by a wso and it receives messages from its wso , sends messages to other aas or wss via its wso , and is created by its wso .",
    "note that an aa can not create new aas , it can only be created by a wso .",
    "that is , an aa is an actor with a constraint that is without * create * action .",
    "we give the abstract syntax of an aa as follows .    ",
    "aa : : = _ aa _ name \\ {    _ wso _ wso - ref    local - variable - declaration    aa - method *    }    aa - method : : = [ local ] aa - method - name ( args ) if condition \\ {    aa - action *    }    aa - action : : = local - variable - assignment    @xmath0 wso - ref @xmath1 wso - method - name ( args )    @xmath0 interacting with applications inside        where the symbol * means that there are several aa objects with in a wso and it means the same as the following .",
    "the first aa is the aa object and the second _ aa _ is the key word , the expression _ actor - name @xmath1 actor - method - name ( args ) _ denotes sending a message _ args _ to the actor with a name _ actor - name _ by way of invoking the method with a name _ actor - method - name_.    as the above syntax described , an aa has a unique _ name _ and a reference of its wso ( _ wso - ref _ ) .",
    "its local variables can be declared by a type system , such as xml schema@xcite or java , and can be an actor type .",
    "it has an optional initializing method which is executed when the actor is created .",
    "it also has a set of methods which can be invoked by other actors .",
    "each method can do some actions , including local variable assignment , interacting with applications inside , and sending to its wso a message , through an invocation of a method of its wso .",
    "note that an aa does not have _ create _ action , fig.[fig.4 ] also gives the signal - notification pairs of actions of an aa .",
    "a wso includes a set of aas and acts as the manager of the aas .",
    "the management operations may be creating a member aa , acting as a bridge between aas and acting as a bridge between aas and wss outside .",
    "we give the abstract syntax of a wso as follows .    ",
    "wso : : = _ wso _ name \\ {    _ aa _ aa - ref *    _ ws _ ws - ref    local - variable - declaration    wso - method *    }    wso - method : : = [ local ] wso - method - name ( args ) if condition \\ {    wso - action *    }    wso - action : : = local - variable - assignment    @xmath0 aa - ref @xmath1 aa - method - name ( args )    @xmath0 ws - ref @xmath1 ws - method - name ( args )    @xmath0 aa - ref : = new _ aa _ ( args )        the first wso is the wso object and the second _ wso _ is the key word of the wso object . similar to an aa , a wso also has local variables , an _ init _ method , and a set of methods . differently",
    ", a wso has a set of aas , and also an interface ws actor .",
    "the actions of a wso can be local variable assignment , sending messages to aas , sending a message to its interface ws , and also creating a new aa .",
    "the signal - notification pairs of actions of a wso are also as fig.[fig.4 ] shows .",
    "a ws is an actor that has the characteristics of an ordinary actor .",
    "it acts as a communication bridge between the inner wso and the external partner ws and creates a new wso when it receives a new incoming message .",
    "the abstract syntax of a ws is following .    ",
    "ws : : = _ ws _ name \\ {    _ wso _ wso - ref    _ ws _ ws - ref    local - variable - declaration    setpartner ( args ) if condition \\ {    ws - action *    }    ws - method *    }    ws - method : : = [ local ] ws - method - name ( args ) if condition \\ {    ws - action *    }    ws - action : : = local - variable - assignment    @xmath0 wso - ref @xmath1 wso - method - name ( args )    @xmath0 ws - ref @xmath1 ws - method - name ( args )    @xmath0 wso - ref : = new _ wso _ ( args )        the first ws is the wso object and the second _ ws _ is the key word of the ws object .",
    "a ws has not only local variables , an _",
    "method , and a set of methods , but also a required _ setpartner _ method to be invoked by a wsc to get a reference of its partner ws .",
    "its actions include local variable assignment , sending a message to its wso , sending a message to its partner ws and creating a new wso .",
    "the signal - notification pairs of actions of a ws are also as fig.[fig.4 ] shows .",
    "a wsc actor creates partner wss as some kinds roles and set each ws to the other one as their partner wss .",
    "the abstract syntax of a wsc is following .    ",
    "wsc : : = _ wsc _ name [ role partner - role - name*]\\ {    _ ws _ ws - ref-1    _ ws _ ws - ref-2    local - variable - declaration    wsc - method *    }    wsc - method : : = [ local ] wsc - method - name ( args ) if condition \\ {    wsc - action *    }    wsc - action : : = local - variable - assignment    @xmath0 ws - ref-1 @xmath1 ws - method - name ( args )    @xmath0 ws - ref-2 @xmath1 ws - method - name ( args )    @xmath0 ws - ref-1 : = new _ ws _ ( args ) as partner - role - name    @xmath0 ws - ref-2 : = new _ ws _ ( args ) as partner - role - name    @xmath0 ws - ref-1 @xmath1 setpartner ( args )    @xmath0 ws - ref-2 @xmath1 setpartner ( args )        similarly , the first wsc is the wsc object and the second _ wsc _ is also the key word the wsc object . with a customization to an ordinary actor ,",
    "a wsc contains two interacting wss .",
    "the actions of a wsc includes creating each ws , setting the partner to each ws , and sending other messages to each ws .",
    "the signal - notification pairs of actions of a wsc are also as fig.[fig.4 ] shows .      using the architecture in fig.[fig.2 ] , we get an implementation of the buying books example as showing in fig.[fig.6 ] . in this implementation , there are one wsc ( named buyingbookwsc ) , two wss ( one is named useragentws , the other is named bookstorews ) , two wsos ( one is named useragentwso , the other is named bookstorewso ) , and two set of aas .",
    "the set of aas belong to useragentwso including requstlbaa , receivelbaa , sendsbaa , receivepbaa and paybaa , and the other set of aas belong to bookstorewso including receiverbaa , sendlbaa , receivesbaa , sendpbaa , and getp&shipbaa .",
    "the detailed implementations of entities in fig.[fig.6 ] is following .",
    "we give the implementations of user agent side , and those of book store side can be gotten in contrary by the reader self . and",
    "an implementation of buyingbookwsc is also shown .",
    "the implementations of user agent side includes aas ( requstlbaa , receivelbaa , sendsbaa , receivepbaa and paybaa ) , useragentwso , useragentws .",
    "implementation of requstlbaa :        aa requstlbaa\\ {    _ wso _ wso - ref    init(_wso _ wso)\\ {    wso - ref : = wso    other - local - computations    }    requestlbfromcustomer()if true \\ {    other - local - computations    wso - ref @xmath1 requestlb ( )    }    }        implementation of receivelbaa :        aa receivelbaa\\ {    _ wso _ wso - ref    list books    init(_wso _ wso)\\ {    wso - ref : = wso    other - local - computations    }    receivelb(list bs ) if true\\ {    books : = bs    other - local - computations    }    }        implementation of sendsbaa :        aa sendsbaa\\ {    _ wso _ wso - ref    list selectedbooks    init(_wso _ wso)\\ {    wso - ref : = wso    other - local - computations    }    receivesbfromcustomer(list sb ) if true\\ {    selectedbooks : = sb    other - local - computations    wso - ref @xmath1 sendsb ( selectedbooks )    }    }        implementation of receivepbaa        aa receivepbaa\\ {    _ wso _ wso - ref    float prices    init(_wso _ wso)\\ {    wso - ref : = wso    other - local - computations    }    receivepb(float p ) if true\\ {    prices : = p    other - local - computations    }    }        implementation of paybaa :        aa paybaa\\ {    _ wso _ wso - ref    init(_wso _ wso)\\ {    wso - ref : = wso    other - local - computations    }    paybfromcustomer ( ) if true\\ {    other - local - computations    wso - ref @xmath1 payb ( )    }    }        implementation of useragentwso :        wso useragentwso\\ {    _ aa _ requestlbaa    _ aa _ receivelbaa    _ aa _ sendsbaa    _ aa _ receivepbaa    _ aa _ paybaa    _ ws _ ws - ref    list books    list selectedbooks    float prices    init(_ws _ ws)\\ {    ws - ref : = ws    requestlbaa : = new requestlbaa(self )    receivelbaa : = new receivelbaa(self )    sendsbaa : = new sendsbaa(self )    receivepbaa : = new receivepbaa(self )    paybaa : = new paybaa(self )    other - local - computations    }    requestlb ( ) if true\\ {    other - local - computations    ws - ref @xmath1 requestlb ( )    }    receivelb(list bs ) if true\\ {    books : = bs    other - local - computations    receivelbaa @xmath1 receivelb(books )    }    sendsb(sb ) if true\\ {    selectedbooks : = sb    other - local - computations    ws - ref @xmath1 sendsb(selectedbooks )    }    receivepb(float",
    "pb ) if true\\ {    prices : = pb    other - local - computations    receivepbaa @xmath1 receivepb(prices )    }    payb ( ) if true\\ {    other - local - computations    ws - ref @xmath1 payb ( )    }    }        implementation of useragentws :        ws useragentws\\ {    _ wso _ wso - ref    _ ws _ ws - ref    list books    list selectedbooks    float prices    init()\\ {    wso - ref : = new useragentwso(self )    other - local - computations    }    setpartner(_ws _ ws ) if true\\ {    ws - ref = ws    other - local - computations    }    requestlb ( ) if true\\ {    other - local - computations    ws - ref @xmath1 requestlb ( )    }    receivelb(list bs ) if true\\ {    books : = bs    other - local - computations    wso - ref @xmath1 receivelb(books )    }    sendsb(sb ) if true\\ {    selectedbooks : = sb    other - local - computations    ws - ref @xmath1 sendsb(selectedbooks )    }    receivepb(float pb ) if true\\ {    prices : = pb    other - local - computations    wso - ref @xmath1 receivepb(prices )    }    payb ( ) if true\\ {    other - local - computations    ws - ref @xmath1 payb ( )    }    }        implementation of buyingbookwsc :        wsc buyingbookwsc role user , role seller\\ {    _ ws _ ws - ref-1    _ ws _ ws - ref-2    init()\\ {    ws - ref-1 : = new useragentws ( ) as user    ws - ref-2 : = new bookstorews ( ) as seller    ws - ref-1 @xmath1 setpartner(ws - ref-2 )    ws - ref-2 @xmath1 setpartner(ws - ref-1 )    other - local - computations    }    other - wsc - methods    }    ",
    "we discuss some issues of ab - wscl introduced in this section , including providing some kind of pre - defined aa , implementation of control flow in a wso and lifetime of components of ab - wscl .      in ab - wscl",
    ", we model an activity as an aa , which is an actor with a constraint that can not create other aas .",
    "aas are always under the control of a wso , especially can only be created by its wso .",
    "but an aa has local states , procedures for local computations and can receive messages from other actors and can also send messages to others .",
    "so , an aa can do anything except for _ create _ action and should be able to be used to implement any kind of functions .    from a low - level technical viewpoint , aas can have a number of fixed functions , such as sending a message to a ws outside , receiving a message from a ws outside , interacting with an application inside or a human , local variable assignments and other inner processing within a wso .",
    "in fact , we can use the definition of aa in ab - wscl to further pre - define some kind of aas for convenience .",
    "let us leave this work for future ( see [ future works ] ) .    from a view of high - level business requirements , ab - wscl can be used to model business process integrations . in some specific business domains , such as book selling , traveling , food manufacturing , etc ,",
    "it is possible to abstract some kind of business functions to be modeled as some pre - defined aa types by the assistant of domain experts .",
    "we also leave this work for future ( see [ future works ] ) .",
    "orchestration means that all aas are orchestrated by control flows among them .",
    "that is , the executing of aas should be in some orders , such as in sequence , in parallel , in choice , or in loop , etc .",
    "sequence , parallel , choice and loop are four basic constructs for an orchestration .",
    "we show the solutions of ab - wscl for the above four constructs one by one .",
    "firstly , we discuss about sequence construct .",
    "ab - wscl is a high - level concurrent computing language while an actor is a basic concurrent computation model .",
    "actors are basic components in ab - wscl , that is , aa , wso , ws , wsc are all actors . as agha@xcite pointed out , actor computing is intrinsic concurrent and sequential computing can only be implemented by causalities of messages sending among actors .",
    "parallel is intrinsical to aas just because aas are all concurrent actors .",
    "readers may notice that declarations of methods of actors ( aa , wso , ws , wsc ) to receive messages from other actors have the form of _ method - name ( args ) if condition_. there is a _ condition _ consisted of local states of actors to control whether or not to receive a message for an actor . using this _ condition",
    "_ can implement the choice construct .",
    "similarly , loop construct can also be implemented through the _ condition _ of a method .",
    "actors in ab - wscl , such as aa , wso , ws , wsc , should have a lifetime under the requirements of business integration .",
    "we discuss the creation operation and termination operation of lifetime control .",
    "as introduced above , an actor is created explicitly by a _ create _",
    "action of another actor .",
    "that is , an aa is created by a wso explicitly , a wso is created by a ws explicitly , a ws is created by a wsc explicitly , and a wsc may be created explicitly by an application upper layer .    after being created , an actor as an active distributed object runs independently like fig.[fig.3 ] shows . at some exact time , such as neither receiving messages nor sending messages , an actor can be collected by a garbage collection mechanism@xcite .",
    "this mechanism can be invoked by the user explicitly or can be implemented implicitly by the actor runtime system .",
    "an actor has its inner states and some block relations as shown in fig.[fig.4 ] .",
    "these states of an actor are modeled from a viewpoint of a universal computation model .",
    "that is , there are no states under the requirements of business process integration .",
    "for example , an actor can respond to a human being to be suspended or be resumed again .",
    "we can customize the common actor model to extend more states and control mechanisms .",
    "let this work be an extension of ab - wscl to be done in future ( see [ future works ] ) .",
    "the wsc defines interaction behaviors of involved wss .",
    "multi - party choreographies can be captured by a whole wsc or by a series of binary wscs .",
    "since the wsc actor in ab - wscl is a binary wsc , multi - party choreoraphies can be programmed by a set of wsc actors .    for simplicity of the following formal semantics , without loss of generality , the binary wsc is adopted .",
    "in fact , the wsc actor in ab - wscl can be easily extended to contain a set of partner wss to directly support multi - party choreographies .",
    "the extension involves the definition of the ws actor and the wsc actor .",
    "we just give the abstract syntax of the ws actor and the wsc actor to directly support multi - party choreographies and do not mention this issue any more in the rest of this paper .",
    "the extension of the ws actor is following .    ",
    "ws : : = _ ws _ name \\",
    "{    _ wso _ wso - ref    _ ws _ ws - ref * //a set of partner wss    local - variable - declaration    setpartner ( args ) if condition \\ {    ws - action *    }    ws - method *    }    ws - method : : = [ local ] ws - method - name ( args ) if condition \\ {    ws - action *    }    ws - action : : = local - variable - assignment    @xmath0 wso - ref @xmath1 wso - method - name ( args )    @xmath0 ws - ref @xmath1 ws - method - name ( args )    @xmath0 wso - ref : = new _ wso _ ( args )        the extension of the wsc actor is following .    ",
    "wsc : : = _ wsc _ name [ role partner - role - name*]\\ {    _ ws _ ws - ref * //a set of involving wss    local - variable - declaration    wsc - method *    }    wsc - method : : = [ local ] wsc - method - name ( args ) if condition \\ {    wsc - action *    }    wsc - action : : = local - variable - assignment    @xmath0 ws - ref @xmath1 ws - method - name ( args )    @xmath0 ws - ref : = new _ ws _ ( args ) as partner - role - name    @xmath0 ws - ref @xmath1 setpartner ( args )          actors in ab - wscl are all customizations of common actors and can be implemented based on a common actor runtime called actor foundry@xcite .",
    "actor foundry is developed by open systems laboratory ( osl ) of university of illinois at urbana - champaign as an open source software .",
    "actor foundry is not only a common actor runtime , but also an actor development framework that allows further developments and customizations .",
    "as follows , we discuss the implementations of actors in ab - wscl .",
    "because an aa is a common actor without _ create _ action , and it can be implemented as an actor class inheriting from the abstract class _ osl.manager.actorimpl _ without _ create _ method ( that is , let creating actors method be void ) .    a wso and a wsc are all basic actors with specific actions and use _ osl.manager.basic.basicactorimpl _ class as their implementation bases .",
    "a ws is also a basic actor , but it adopts soap as its transport protocol .",
    "this requires a soap transport package like osl.transport.soap must be implemented firstly .",
    "then a ws can be implemented by inheriting _",
    "osl.manager.basic.basicactorimpl _ class with a transport binding to the soap package .",
    "in the above sections , we design an architecture of ws composition runtime and introduce an actor - based language called ab - wscl to support such an architecture .",
    "more importantly , in this section we give the formal semantics of ab - wscl based on concurrent rewriting semantics for actors@xcite@xcite@xcite@xcite , including semantics for aa , wso , ws and wsc , especially interaction semantics between wso and ws , ws and ws , wso and wso .",
    "in this section , we use symbol conventions that follow @xcite@xcite@xcite@xcite .",
    "the symbols are used below .",
    "@xmath2 represents a total function @xmath3 with domain @xmath4 and ranges over @xmath5 .",
    "@xmath6 represents a partial function @xmath3 with domain @xmath4 and ranges over @xmath5 .",
    "@xmath7 $ ] represents the set of all subsets @xmath8 of @xmath9 where @xmath10 .",
    "@xmath11 $ ] represents the set of all finite subsets @xmath8 of @xmath9 .",
    "a signature of rewriting theory denotes as @xmath12 , where @xmath13 represents the function symbols of the theory , and @xmath14 denotes the set of @xmath13-equations .",
    "a @xmath13-algebra is the set of @xmath15 where @xmath16 .",
    "@xmath17 denotes the @xmath13-algebra of ground @xmath13-terms .",
    "@xmath18 denotes @xmath13-algebra of equivalence classes of ground @xmath13-terms modulo @xmath14 .",
    "@xmath19 denotes the @xmath13-algebra of ground @xmath13-terms with variables in @xmath20 .",
    "@xmath21 denotes @xmath13-algebra of equivalence classes of ground @xmath13-terms with variables in @xmath20 modulo @xmath14 .",
    "@xmath22 denotes a substitution of each @xmath23 for each @xmath24 with a term @xmath25 and terms @xmath26 .",
    "@xmath27 $ ] denotes the @xmath14-equivalence class of of @xmath28 .",
    "@xmath29 denotes the rewriting rules of a signature @xmath12 , where @xmath30 is the set of labels , and @xmath5 is the set of 3-tuples with @xmath31 .",
    "@xmath32 denotes the sort of values .",
    "@xmath33 denotes the sort of actor addresses with @xmath34 .",
    "@xmath35 denotes the sort of actor states .",
    "@xmath36 denotes the sort of actor states with @xmath37 .",
    "@xmath38 denotes the finite set of events .",
    "@xmath39 denotes the sort of actor processing states with @xmath40 , where @xmath41 denotes a _ ready _ state and @xmath42 denotes a _ running _ state .",
    "@xmath43 denotes the sort of actor fragments .",
    "@xmath44 denotes the sort of configurations .",
    "@xmath45 denotes a processing state of an actor .",
    "@xmath46 denotes an address of an actor .",
    "@xmath47 denotes a behavior of an actor .",
    "@xmath48 denotes a state of an actor .",
    "@xmath49 denotes the last event generated by an actor .",
    "@xmath50 denotes the transition map for an actor .",
    "@xmath51 is a typical term in operational semantics of actors , where @xmath52 denotes an actor with a state @xmath53 and an address @xmath54 , and @xmath55 denotes a message with destination @xmath54 and value @xmath56 .",
    "concurrent rewriting is a formal model that allows one to reason about concurrent systems in terms of state transitions .",
    "a key strength of concurrent rewriting is its ability to represent many models of concurrency within a common framework .    a rewriting logic theory is composed of a _ signature _ denoted as @xmath12 , together with a set of rewrite theory rules . where @xmath13 defines the function symbols of the theory and the set @xmath14 consists of @xmath13-equations",
    "a @xmath13-algebra is a set @xmath15 where each @xmath57 of @xmath58 arguments is associated with a function @xmath59 .",
    "the symbol @xmath60 denotes the @xmath13-algebra of ground @xmath13-terms .",
    "the symbol @xmath18 denotes the @xmath13-algebra of equivalence classes of ground @xmath13-terms modulo the equation @xmath14 .",
    "if @xmath20 denotes a countable set of variables , then the symbols @xmath61 and @xmath21 denote the @xmath13-algebra of @xmath13-terms with variables in @xmath20 , and the @xmath13-algebra of equivalence classes of @xmath13-terms with variables in @xmath20 modulo the equations @xmath14 .",
    "given a term @xmath62 and term @xmath26 , @xmath63 denotes the term obtained from @xmath28 by simultaneously substituting each @xmath23 for each @xmath24 . and",
    "for a term @xmath28 , @xmath27 $ ] denotes the @xmath14-equivalence class of @xmath28 .    given a signature @xmath12 ,",
    "the rewrite rules of a theory are represented by a pair @xmath29 where @xmath30 is a set of _ labels _ and a rule is denoted as @xmath64 \\rightarrow [ t']$ ] . then the 4-tuple @xmath65 is called a rewrite theory .",
    "the deduction rules establishing a rewrite theory logic are defined as follows .    * * reflexivity * : for each @xmath27\\in t_{\\sigma , e}(x)$ ] , + @xmath66\\rightarrow [ t]}\\ ] ] * * congruence * : for each @xmath57 of @xmath67 , + @xmath68\\rightarrow[t'_1] ... [t_n]\\rightarrow[t'_n]}{f(t_1, ... ,t_n)\\rightarrow f(t'_1, ... ,t'_n)}\\ ] ] * * replacement * : for each rule @xmath69\\rightarrow [ t'(x_1, ... ,x_n)]$ ] , + @xmath70\\rightarrow [ w'_1] ... [w_n]\\rightarrow [ w'_n]}{[t(\\overline{w}/\\overline{x})]\\rightarrow [ t'(\\overline{w'}/\\overline{x})]}\\ ] ] * * transitivity * : + @xmath68\\rightarrow [ t_2 ] [ t_2]\\rightarrow[t_3]}{[t_1]\\rightarrow [ t_3]}\\ ] ]      in @xcite , a rewriting semantics based on abstract actor structure ( aas)@xcite@xcite for actors shown in fig.[fig.4 ] was introduced .",
    "we introduce some notions and definitions here again as a basis of the following sections .",
    "note that in @xcite and the following sections only _ fair _ rewriting derivations are considered .",
    "an actor is modeled a 6-tuples @xmath71 with attributes introduced in the above section .",
    "and the term constructors follows .",
    "@xmath72\\lambda:[\\_]\\tau:[\\_]):(\\mathbb{p}\\times\\mathbb{a}\\times\\mathbb{b}\\times\\mathbb{s}\\times\\mathbb{e}\\times\\mathbb{a})\\xrightarrow{\\circ}\\mathbb{f}$ ] denotes an actor .",
    "@xmath73 denotes an event message . in a event message @xmath74",
    ", @xmath75 is the destination address , @xmath8 is the source address , @xmath76 is the event and @xmath77 is the values of the event .",
    "@xmath78 denotes a message @xmath79 with values @xmath77 sent from an actor with address @xmath80 to an actor with address @xmath81 .",
    "@xmath82 denotes the empty fragment .",
    "@xmath83 denotes composition of fragment .",
    "it is true that @xmath84 if @xmath85 .",
    "@xmath86\\lceil \\{\\_\\}:\\mathbb{f}\\times p_\\omega[\\mathbb{a}]\\xrightarrow{\\circ}\\mathbb{f}$ ] denotes a restriction of a fragment .",
    "\\{a_1, ... ,a_n\\}\\in \\mathbb{f}$ ] if @xmath88 .",
    "@xmath89 denotes a configuration .    the relations to operate actor configurations are as following .",
    "@xmath90 defines the block relation of two events .",
    "@xmath91 defines the new event and its value generated by a running actor with specific state and behavior .",
    "@xmath92 defines the new state of an actor .",
    "@xmath93 defines a new actor with initial state .",
    "@xmath94 $ ] defines receptionists of a fragment .",
    "@xmath95 $ ] defines acquaintances of a state or a value .",
    "@xmath96 $ ] defines external actors of a fragment .",
    "@xmath97{}\\mathbb{a}\\rightarrow\\mathbb{s}\\cup\\mathbb{v}\\cup\\mathbb{f}\\xrightarrow[1 - 1]{}\\mathbb{s}\\cup\\mathbb{v}\\cup\\mathbb{f}$ ] defines a renaming function .",
    "@xmath98 defines a predicate on actors and values , and @xmath99 holds if an actor with an address @xmath81 and state @xmath8 is enabled for deliver a message with value @xmath77 .",
    "@xmath100 defines a predicate on actors , and @xmath101 holds if an actor with an a address @xmath81 and state @xmath8 is enabled for execution .",
    "the axioms ( called hygiene conditions in @xcite ) about the above term constructors and relations over actor configurations will no longer be introduced , please see @xcite and @xcite .",
    "we give the basic computation steps with _ block _",
    "relations of events in fig.[fig.4 ] as follow , which was introduced in @xcite .",
    "[ request ]    @xmath102\\lambda:[l]\\tau:[a'])\\rightarrow ? ( a , b|\\sigma:[s]\\lambda:[e]\\tau:[a ' ] ) , a'\\blacktriangleleft(a , e , v)$ ]    if @xmath103 .    the * request * rule transforms a running actor into a ready actor and an event pair .",
    "the @xmath104 function determines the next signal generate by an actor based on its behaviors and current state .",
    "the transition map of an actor determines where the new signal should be processed . after generating a signal ,",
    "an actor is blocked until an appropriate notification event is received .",
    "[ compute ]    @xmath105\\lambda:[l]\\tau:[a']),a\\blacktriangleleft(a',e , v)\\rightarrow ! ( a , b|\\sigma:[s']\\lambda:[l]\\tau:[a'])$ ]    if @xmath106 and @xmath107 .",
    "the * compute * rule allows a blocked actor to become active by processing a notification event .",
    "the @xmath108 function determines the new state of an actor after it has processed a notification .",
    "this rule abstracts over the internal computation performed by an actor upon receiving a particular notification .",
    "the rewriting semantics of the common actor with block relations of events will be omitted here , please see @xcite .",
    "firstly , we do not concern the semantics of aspects of interactions between aas and applications inside",
    ". there are at least two reasons : ( 1)they have similar behaviors with those interacting with wss and different low level communication mechanisms , such as local object method call , rpc , dcom , rmi , etc , that do not affect their semantics .",
    "( 2)this paper focuses on ws composition .",
    "an aa interacts with other aas and wss outside via its wso and can not create other aas .",
    "the event sort @xmath38 including signals and notifications in fig.[fig.4 ] as follows .",
    "@xmath109    an aa is defined as a 8-tuples @xmath110 .",
    "@xmath111 denotes as the above section showing , @xmath112 denotes aa s wso , and @xmath113 denotes ws of the wso .",
    "an aa has the form of @xmath114\\lambda:[l]\\tau:[t])$ ] as a term .",
    "the semantics of an aa is defined as the following rules .",
    "[ * send - in * ] + @xmath115    if @xmath116\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath117\\lambda:[l_{a'}]\\tau:[t_{a'}])$ ] and    @xmath118 and @xmath119 . +",
    "this * send - in * rule illustrates that only aas within a same wso can exchange between each other via its wso through a * transmit*-*complete * event pair .",
    "[ * send - out * ] + @xmath120    if @xmath116\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath121 and @xmath122 . +",
    "this * send - out * rule allows an aa within a wso to send a message to applications outside via its wso also through a * transmit*-*complete * event pair .",
    "[ * ready * ] + @xmath123 . + this * ready",
    "* rule illustrates that an aa in ready can be deliver a message by its wso through a * ready*-*deliver * event pair .",
    "[ * in * ] + @xmath124    if @xmath125\\lceil\\{r\\}$ ] and    @xmath126\\lambda:[l]\\tau:[t])$ ] and @xmath127 and @xmath128 .",
    "+ the * in * rule shows that only messages sent to the wso from applications outside are allowed in .",
    "[ * out * ] + @xmath129\\rangle\\lceil\\{r\\}\\rightarrow \\langle [ f]\\lceil\\{r\\cup ( acq(v)\\cap recep(f))\\}\\rangle$ ]    if @xmath130 .",
    "+ the * out * rule allows to send a message to the exterior .",
    "as follows , we give the * create - aa * rule of the wso .",
    "[ * create - aa * ] + @xmath131\\lceil\\{a\\}$ ]    if @xmath132\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath133\\lambda:[\\textbf{ready}]\\tau:[wso])$ ] and    @xmath134 holds and    @xmath135    and @xmath136 and @xmath137 . + the * create - aa * rule allows that a wso creates its aas .",
    "the created aa has the same @xmath112 and @xmath113 attributes to those of the wso .",
    "a ws is denoted as a 8-tuples @xmath114\\lambda:[l]\\tau:[t])$ ] where @xmath112 denotes its wso created and @xmath113 denotes its partner ws .",
    "the functions of a ws includes creation of wsos and interaction with its wso and partner ws .",
    "so , we give the * create - wso * rule , * in * rule and * out * rule below .",
    "[ * create - wso * ] + @xmath138\\lceil\\{a\\}$ ]    if @xmath139,ws_a|\\sigma:[s_a]\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath140\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath141\\lambda:[\\textbf{ready}]\\tau:[a])$ ] and    @xmath134 holds and    @xmath135 . + the * create - wso * rule allows a ws to create its wso and establishes their relation at the same time .",
    "[ * in * ] + @xmath124    if @xmath125\\lceil\\{r\\}$ ] and    @xmath126\\lambda:[l]\\tau:[t])$ ] and @xmath128 .",
    "+ the * in * rule shows that messages sent to the ws from its wso or its partner ws are allowed in .",
    "[ * out * ] + @xmath129\\rangle\\lceil\\{r\\}\\rightarrow \\langle [ f]\\lceil\\{r\\cup ( acq(v)\\cap recep(f))\\}\\rangle$ ]    if @xmath130 .",
    "+ the * out * rule allows to send a message to the exterior .",
    "a wsc is also denoted as a 8-tuples @xmath142\\lambda:[l]\\tau:[t])$ ] where @xmath143 and @xmath144 denote the partner wss created .",
    "the main functions of a wsc are creation of partner wss .",
    "so , we give the * create - wss * rule below .",
    "[ * create - wss * ] + @xmath145\\lceil\\{a\\}$ ]    if @xmath139,[\\quad]|\\sigma:[s_a]\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath146\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath147,a''|\\sigma:[s_{a'}]\\lambda:[l_{a'}]\\tau:[t_{a'}])$ ] and    @xmath148,a'|\\sigma:[s_{a''}]\\lambda:[l_{a''}]\\tau:[t_{a''}])$ ] and    @xmath134 holds and    @xmath149 and @xmath150 .",
    "+ the * create - wss * rule allows a wsc to create its partner wss and establishes their relation at the same time .      in this section",
    ", we will discuss the formal relationships between wso and ws , ws and ws , further more , wso and wso . through analysis of interaction semantics among them",
    ", we establish the relationship among them by term of _ compositionality_. the term compositionality in interaction semantics between wso and ws means that the messages sent by aas in a wso to actors in the interface ws correspond to the messages expected by the actors in the ws , and vice versa . and",
    "compositionality in interactions semantics between ws and ws , wso and wso is similar to that between wso and ws .    in @xcite , @xciteand @xcite , interaction semantics between distributed components",
    "are analyzed .",
    "we use the notions and definitions about interaction semantics in @xcite , @xcite and @xcite as a basis of our further conclusions , and we do not give explanations more .      to model a wso configuration , we introduce an operator :    @xmath151:\\mathbb{f}\\times(\\mathbb{a}\\times\\mathbb{a})\\xrightarrow{\\circ}\\mathbb{c}$ ]    with @xmath152 $ ] where @xmath153 where @xmath154 .",
    "@xmath155 denotes an actor fragment , @xmath156 denotes the relation of a wso and its ws pair .",
    "we use a members function defined as @xmath157 .",
    "we use @xmath158 to denote the collection of rules in section [ aa and wso semantics ] , excluding the * in * and * out * rules .",
    "the set of interaction steps @xmath159 with ws is defined as follows .",
    "[ * wso - ws - silent * ] + @xmath152\\rightarrow\\langle a'\\rangle[b]$ ]    if @xmath160 .",
    "+ [ * wso - ws - emit-1(a , a,e , v ) * ] + @xmath161\\rightarrow\\langle a\\rangle[b]$ ]    if @xmath162 .",
    "+ [ * wso - ws - emit-2(a , a,v ) * ] + @xmath163\\rightarrow\\langle a\\rangle[b]$ ]    if @xmath162 .",
    "+ [ * wso - ws - consume-1(a,a , e , v ) * ] + @xmath152\\rightarrow\\langle a , a\\blacktriangleleft(a',e , v)\\rangle[b]$ ]    if @xmath164 and @xmath165 . +",
    "[ * wso - ws - consume-2(a,a , v ) * ] + @xmath152\\rightarrow\\langle a , a : a'\\lhd v\\rangle[b]$ ]    if @xmath164 and @xmath165 . + to model a ws configuration , we also introduce another operator :    @xmath166:\\mathbb{f}\\times(\\mathbb{a}\\times\\mathbb{a})\\xrightarrow{\\circ}\\mathbb{c}$ ]    with @xmath167 $ ] where @xmath168 where @xmath154 .",
    "@xmath169 denotes an actor fragment , @xmath156 denotes the relation of a wso and its ws .",
    "we use @xmath158 to denote the collection of rules in section [ ws semantics ] , excluding the * in * and * out * rules .",
    "the set of interaction steps @xmath159 with wso is defined as follows .",
    "[ * ws - wso - silent * ] + @xmath167\\rightarrow\\langle m'\\rangle[b]$ ]    if @xmath170 .",
    "+ [ * ws - wso - emit-1(a , a,e , v ) * ] + @xmath171\\rightarrow\\langle m\\rangle[b]$ ]    if @xmath172 .",
    "+ [ * ws - wso - emit-2(a , a,v ) * ] + @xmath173\\rightarrow\\langle m\\rangle[b]$ ]    if @xmath172 .",
    "+ [ * ws - wso - consume-1(a,a , e , v ) * ] + @xmath167\\rightarrow\\langle m , a\\blacktriangleleft(a',e , v)\\rangle[b]$ ]    if @xmath172 . + [ * ws - wso - consume-2(a,a , v ) * ] + @xmath167\\rightarrow\\langle m , a : a'\\lhd v\\rangle[b]$ ]    if @xmath172 .",
    "+ we define the interaction sequence @xmath174 and its sequence dual @xmath175 between wso and ws as follow :    \\(1 ) if @xmath176 , then @xmath177 .",
    "\\(2 ) if @xmath178 , then @xmath179 .",
    "\\(3 ) if @xmath180 , then @xmath181 .",
    "\\(4 ) if @xmath182 , then @xmath183 .",
    "\\(5 ) if @xmath184 , then @xmath185 .",
    "then we can get the interaction semantics of @xmath152 $ ] and @xmath167 $ ] as @xmath186)$ ] and @xmath187)$ ] .",
    "the so - called configuration images @xmath188)}(\\langle m\\rangle[b])$ ] and @xmath189)}(\\langle a\\rangle[b])$ ] can be established by use of interaction semantics @xmath186)$ ] and @xmath187)$ ] , and also interaction sequence @xmath174 and its sequence dual @xmath190 defined above .",
    "and then we can define the compatibility among the configuration @xmath152 $ ] and the configuration @xmath167 $ ] like that in @xcite .",
    "finally , we can draw our conclusions as follows according to the definition of compositionality .",
    "( * compositionality between wso and ws * ) the partial configuration @xmath152 $ ] is _ composable _ with the partial configuration @xmath167 $ ] just if @xmath191 , and @xmath152 $ ] is compatible with @xmath152 $ ] ( and vice versa ) .",
    "see above .      to model a ws configuration",
    ", we still use the operator :    @xmath166:\\mathbb{f}\\times(\\mathbb{a}\\times\\mathbb{a})\\xrightarrow{\\circ}\\mathbb{c}$ ]    with @xmath192 $ ] where @xmath193 where @xmath194 .",
    "@xmath169 still denotes an actor fragment , but @xmath195 denotes the relation of a ws and its partner ws .",
    "we also use @xmath158 to denote the collection of rules in section [ ws semantics ] , excluding the * in * and * out * rules . the set of interaction steps @xmath159 with ws is defined as follows .",
    "[ * ws - ws - silent * ] + @xmath192\\rightarrow\\langle m'\\rangle[d]$ ]    if @xmath170 .",
    "+ [ * ws - ws - emit-1(a , a,e , v ) * ] + @xmath196\\rightarrow\\langle m\\rangle[d]$ ]    if @xmath197 .",
    "+ [ * ws - ws - emit-2(a , a,v ) * ] + @xmath198\\rightarrow\\langle m\\rangle[d]$ ]    if @xmath197 .",
    "+ [ * ws - ws - consume-1(a,a , e , v ) * ] + @xmath192\\rightarrow\\langle m , a\\blacktriangleleft(a',e , v)\\rangle[d]$ ]    if @xmath197 .",
    "+ [ * ws - ws - consume-2(a,a , v ) * ] + @xmath192\\rightarrow\\langle m , a : a'\\lhd v\\rangle[d]$ ]    if @xmath197 .",
    "+ we define the interaction sequence @xmath174 and its sequence dual @xmath190 between ws and ws as follow :    \\(1 ) if @xmath199 , then @xmath200 .",
    "\\(2 ) if @xmath201 , then @xmath202 .",
    "\\(3 ) if @xmath203 , then @xmath204 .",
    "\\(4 ) if @xmath205 , then @xmath206 .",
    "\\(5 ) if @xmath207 , then @xmath208 .",
    "similar to interactions between wso and ws , we get the following conclusions .",
    "( * compositionality between ws and ws * ) the partial configuration @xmath167 $ ] is _ composable _ with the partial configuration @xmath209 $ ] just if @xmath210 , and @xmath167 $ ] is compatible with @xmath209 $ ] ( and vice versa ) .",
    "though a wso does interact with another wso directly , in fact there are virtual interactions between wso and wso omitting the middle interactions ",
    "wso and ws , ws and ws , ws and wso .    to model a wso configuration",
    ", we introduce a new operator :    @xmath211    with @xmath212 where @xmath213 .",
    "@xmath155 denotes an actor fragment , and @xmath214 denotes the external actor of the configuration , such as a ws .",
    "we also use a members function defined as @xmath157 .",
    "we use @xmath158 to denote the collection of rules in section [ aa and wso semantics ] , excluding the * in * and * out * rules .",
    "the set of interaction steps @xmath159 is defined as follows .",
    "[ * wso - wso - silent * ] + @xmath215    if @xmath160 .",
    "+ [ * wso - wso - emit-1(a , a,e , v ) * ] + @xmath216    if @xmath162 .",
    "+ [ * wso - wso - emit-2(a , a,v ) * ] + @xmath217    if @xmath162 .",
    "+ [ * wso - wso - consume-1(a,a , e , v ) * ] + @xmath218    if @xmath164 and @xmath219 . +",
    "[ * wso - wso - consume-2(a,a , v ) * ] + @xmath220    if @xmath164 and @xmath219 .",
    "+ we define the interaction sequence @xmath174 and its sequence dual @xmath190 between wso and wso as follow :    \\(1 ) if @xmath221 , then @xmath222 .",
    "\\(2 ) if @xmath223 , then @xmath224 .",
    "\\(3 ) if @xmath225 , then @xmath226 .",
    "\\(4 ) if @xmath227 , then @xmath228 .",
    "\\(5 ) if @xmath229 , then @xmath230 .    similarly , we get the following conclusions .",
    "( * compositionality between wso and wso * ) the partial configuration @xmath212 is _ composable _ with the partial configuration @xmath231 just if @xmath232 , and @xmath212 is compatible with @xmath231 ( and vice versa ) .",
    "note that the compositionality between wso and wso can also be gotten from the the compositionality between wso and ws , and the compositionality between ws and ws .",
    "semantics for buying books example includes semantics for useragentwso and its aas , semantics for bookstorewso and its aas , semantics for useragentws , semantics for bookstorews , semantics for buyingbookwsc , interaction semantics between useragentwso and useragentws , interaction semantics between useragentws and bookstorews , interaction semantics between bookstorews and bookstorewso and interactions between useragentwso and bookstorewso .",
    "the detailed semantics for buying books example is following .",
    "we also pay attentions to the useragent side , that is , semantics for useragentwso and its aas , semantics for useragentws , semantics for buyingbookwsc , interaction semantics between useragentwso and useragentws , interaction semantics between useragentws and bookstorews , and interactions between useragentwso and bookstorewso are as following .    semantics for useragentwso and its aas :    [ * in * ] + @xmath124    if @xmath125\\lceil\\{r\\}$ ] and    @xmath233\\lambda:[l]\\tau:[t])$ ] and @xmath234 and @xmath128 .",
    "+ [ * out * ] + @xmath129\\rangle\\lceil\\{r\\}\\rightarrow \\langle [ f]\\lceil\\{r\\cup ( acq(v)\\cap recep(f))\\}\\rangle$ ]    if @xmath130 .",
    "+ [ * create - requstlbaa * ] + @xmath131\\lceil\\{a\\}$ ]    if @xmath132\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath133\\lambda:[\\textbf{ready}]\\tau:[wso])$ ] and    @xmath134 holds and    @xmath135    and @xmath235 and @xmath137 and @xmath236 .",
    "+ similarly to * create - requstlbaa * rule , there are also * create - receivelbaa * rule , * create - sendsbaa * rule , * create - receivepbaa * rule , and * create - paybaa * rule",
    ".    semantics for useragentws :    [ * create - useragentwso * ] + @xmath138\\lceil\\{a\\}$ ]    if @xmath139,ws_a|\\sigma:[s_a]\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath140\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath141\\lambda:[\\textbf{ready}]\\tau:[a])$ ] and    @xmath134 holds and    @xmath135 and @xmath237 and @xmath238 . + [ * in * ] + @xmath124    if @xmath125\\lceil\\{r\\}$ ] and    @xmath239\\lambda:[l]\\tau:[t])$ ] and @xmath128 . + [ * out * ] + @xmath129\\rangle\\lceil\\{r\\}\\rightarrow \\langle [ f]\\lceil\\{r\\cup ( acq(v)\\cap recep(f))\\}\\rangle$ ]    if @xmath130 .",
    "+ semantics for buyingbookwsc :    [ * create - wss * ] + @xmath145\\lceil\\{a\\}$ ]    if @xmath139,[\\quad]|\\sigma:[s_a]\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath146\\lambda:[l_a]\\tau:[t_a])$ ] and    @xmath147,a''|\\sigma:[s_{a'}]\\lambda:[l_{a'}]\\tau:[t_{a'}])$ ] and    @xmath148,a'|\\sigma:[s_{a''}]\\lambda:[l_{a''}]\\tau:[t_{a''}])$ ] and    @xmath134 holds and    @xmath149 and @xmath150 and @xmath240 and @xmath241 .",
    "+ interaction semantics between useragentwso and useragentws :    \\(1 ) at useragentwso side , @xmath242 , then @xmath243 at useragentws side .",
    "\\(2 ) at useragentws side , @xmath244 , then @xmath245 at useragentwso side .",
    "\\(3 ) at useragentwso side , @xmath246 , then @xmath247 at useragentws side .",
    "\\(4 ) at useragentws side , @xmath248 , then @xmath249 at useragentwso side .",
    "\\(5 ) at useragentwso side , @xmath250 , then @xmath251 at useragentws side .",
    "+ we can see that the partial configurations of useragentwso and useragentws are composable .",
    "interaction semantics between useragentws and bookstorews :    \\(1 ) at useragentws side , @xmath252 , then @xmath253 at bookstorews side .",
    "\\(2 ) at bookstorews side , @xmath254 , then @xmath255 at useragentws side .",
    "\\(3 ) at useragentws side , @xmath256 , then @xmath257 at bookstorews side .",
    "\\(4 ) at bookstorews side , @xmath258 , then @xmath259 at useragentws side .",
    "\\(5 ) at useragentws side , @xmath260 , then @xmath261 at bookstorews side . + the partial configurations of useragentws and bookstorews are composable .",
    "interactions between useragentwso and bookstorewso :    \\(1 ) at useragentwso side , @xmath262 , then @xmath263 at bookstorewso side .",
    "\\(2 ) at bookstorewso side , @xmath264 , then @xmath265 at useragentwso side .",
    "\\(3 ) at useragentwso side , @xmath266 , then @xmath267 at bookstorewso side .",
    "\\(4 ) at bookstorewso side , @xmath268 , then @xmath269 at useragentwso side .",
    "\\(5 ) at useragentwso side , @xmath270 , then @xmath271 at bookstorewso side .",
    "we can also see that the partial configurations of useragentwso and bookstorewso are composable .",
    "we aim at the requirements of ws composition and design an architecture of ws composition runtime , which establishes a natural relationship between wso and wsc .",
    "we introduce an actor - based language called ab - wscl to support such an architecture .",
    "finally , we give ab - wscl a formal semantics to make it based on a firmly theoretic foundation .    actually , ab - wscl , its implementations and its formal semantics can be used widely .",
    "one main usage is in design time , as a modeling language , a simulation tool and a validator .",
    "the other is used as a real ws composition runtime .    in this section ,",
    "we firstly map ingredients of ab - wscl to those of xml - based ws specifications to show the practicability of ab - wscl .",
    "then we conclude the advantages of ab - wscl and point out the future works .",
    "the contents of ab - wscl mainly involve three ws specifications , including wsdl@xcite , ws - bpel@xcite and ws - cdl@xcite .    mappings between ab - wscl and wsdl are as table [ table.1 ] shows , ab - wscl and ws - bpel are as table [ table.2 ] illustrates , ab - wscl and ws - cdl are as table [ table.3 ] illustrates",
    ".    .mappings between ab - wscl and wsdl [ cols=\"<,<\",options=\"header \" , ]      through the above examinations of ab - wscl , we can conclude that it has several advantages :    firstly , ab - wscl is an actor - based language that provides a new approach to unifying wso and wsc .",
    "though it is not the first work to unifying wso and wsc , the actor - based approach provides more natural relationships among wso , ws , and wsc under the environment of cross - organizational business integration .",
    "secondly , based on rewriting semantics for actors , we give ab - wscl a strictly formal semantics between wso and its interface ws , ws and its partner ws , wso and its partner wso .",
    "thirdly , ab - wscl is quite simple but powerful .",
    "one aspect is that it can serve as a basis of several tools for ws composition , such as modeling tools , simulation tools , verification tools and even ws composition runtime systems .",
    "the other aspect is that we can easily translate from ab - wscl into ws specifications or vice versa , and these translations make ab - wscl a more useful work , but not only a work on paper .    finally , the components of ab - wscl are all actors , such as aas , wso actors , wsc actors and ws actors",
    ". this actor - constructed system can capture the concurrent nature of ws and ws composition architecture because of the intrinsic concurrency that actors have .",
    "i believe that , in the future , explorations is needed of the enrichments of ab - wscl , including providing pre - defined aa types to solve the requirements of ws composition or even those of some domains of business process integrations , providing more states of aas , wso , ws , wsc for requirements of monitoring and controlling , etc .",
    "a further aspect is about development of ws composition system based on works of this paper , including modeling tools , simulation tools , verification tools , runtime systems , and also translating tools between ab - wscl and ws specifications .",
    "lam94 yong wang and xiang yi and kai li and meilin liu : _ an actor - based language to unifying web service orchestration and web service choreography .",
    "2012 international conference on computer science and information processing ( csip ) , 2012 .",
    "v. vabhay and g. agha : _ using passive garbage collection algorithms for garbage collection of active objects .",
    "_ proc . symp . for memory management,2002 : 106113 .",
    "activeendpoints : _ active bpel .",
    "_ active endpoints , 2011 , http://www.activevos.com .",
    "r. chinnici and j. moreau and a. ryman : _ web services description language ( wsdl ) version 2.0 part 1 : core language .",
    "_ w3c recommendation , 2007 .",
    "n. mitra and y. lafon : _ soap version 1.2 part 0 : primer ( second edition ) . _ w3c recommendation , 2007 . s. tuecke and k. czajkowski and i. foster : _ open grid services infrastructure ( ogsi ) version 1.0 . _ ggf draft , 2003 .",
    "t. banks : _ web services resource framework ( wsrf)-primer v1.2 .",
    "_ oasis draft , 2006 .",
    "l. clement and a. hately and c. riegen : _ uddi version 3.0.2 .",
    "_ oasis draft , 2004 .",
    "f. leymann : _ web service flow language ( wsfl ) 1.0 .",
    "_ ibm , 2001 .",
    "s. thatte : _ xlang : web services for business process design .",
    "_ microsoft , 2001 .",
    "d. jordan and j. evdemon : _ web services business process execution language version 2.0 . _ oasis standard , 2007 .",
    "wfmc : _ the workflow reference model .",
    "_ workflow management coalition , 1995 .",
    "wfmc : _ interface 1 : process definition interchange process model . _ workflow management coalition , 1998 . w.m.p .",
    "van der aalst : _ the application of petri nets to workflow management .",
    "_ j. circuits , systems and computers , 1998 , 8(1 ) : 2166 .",
    "van der aalst : _ on the verification of interorganizational workflows .",
    "_ eindhoven university of technology , 1997 .",
    "m. shen and d. r. liu : _ coordinating interorganizational workflows based on process - views . _ lecture notes in computer science , 2001 , 2113(2001 ) : 274283",
    ". m. shen and d. r. liu : _ workflow modeling for virtual processes : an order - preserving process - view approach .",
    "_ j. information systems , 2002 , 28(6 ) : 505532 .",
    "a. arkin and s. askary and s. fordin : _ web service choreography interface ( wsci ) 1.0 .",
    "_ w3c note , 2002 .",
    "n. kavantzas and d. burdett and g. ritzinger : _ web services choreography description language version 1.0 .",
    "_ w3c candidate recommendation , 2005 .",
    "d. l. mcguinness and f. harmelen : _ owl web ontology language overview .",
    "_ w3c recommendation , 2004 .",
    "m. chan and j. bishop and l. baresi : _ survey and comparison of planning techniques for web services composition .",
    "_ university of pretoria , 2007 .",
    "j. rao and x. su : _ a survey of automated web service composition methods . _ lecture notes in computer science , 2005 , 3387 : 4354 . c. stahl",
    ": _ a petri net semantics for bpel .",
    "_ humboldt - university , 2004 .",
    "w. tan and y. fan and m. zhou : _ a petri net - based method for compatibility analysis and composition of web services in business process execution language .",
    "_ ieee transactions on automation science and engineering , 2009 , 6(1 ) : 94106 .",
    "j. cmara and c. canal and j. cubo : _ formalizing wsbpel business processes using process algebra .",
    "_ electronic notes in theoretical computer science , 2006 , 154(1 ) : 159173 .",
    "r. lucchi and m. mazzara : _ a pi - calculus based semantics for ws - bpel .",
    "_ j. logic and algebraic programming , 2007 , 70(1 ) : 96118 .",
    "p. wohed and m. p. aalst and m. dumas : _ analysis of web service composition languages : the case of bpel4ws .",
    "_ lecture notes in computer science , 2007 , 4421(2007 ) : 3347 .",
    "r. farahbod and u. glsser and m. vajihollahi : _ specification and validation of the business process execution language for web services .",
    "_ electronic notes in theoretical computer science , 2004 , 3052 : 7894 .",
    "g. g. pu and x. p. zhao and s. l. wang : _ towards the semantics and verification of bpel4ws .",
    "_ electronic notes in theoretical computer science , 2006 , 151(2 ) : 3352 . c. dumez and m. bakhouya and j. gaber and m. wack : _ formal specification and verification of service composition using lotos .",
    "the 7th acm inter .",
    "pervasive services , 2010 .",
    "s. nakajima : _ model - cheking behavioral specification of bpel applications . _ electronic notes in theoretical computer science , 2006 , 151(2 ) : 89105 .",
    "a. lapadula and r. pugliese and f. tiezzi : _ a calculus for orchestration of web services .",
    "_ lecture notes in computer science , 2007 , 4421(2007 ) : 3347 . v. valero and m. e. cambronero and g. daz and h. maci : _ a petri net approach for the design and analysis of web services choreographies . _ j. logic and algebraic programming , 2009 , 78 : 359380 .",
    "z. duan and a. bernstein and p. lewis and s. lu : _ a model for abstract process specification , verification and composition .",
    "the second international conference on service oriented computing , 2004 : 232241 . v.",
    "valero and m. e. cambronero and g. daz and h. maci : _ a petri net approach for the design and analysis of web services choreographies . _ j. logic and algebraic programming , 2009 , 78 : 359380 .",
    "y. huang and h. wang : _ a petri net semantics for web service choreography .",
    "2007 acm symp .",
    "applied computing , 2007 : 16891690 .",
    "j. li and j. he and h. zhu and g. pu : _ modeling and verifying web services choreography using process algebra .",
    "workshop 31st ieee software engineering , 2007 : 256268 .",
    "a. brogi and c. canal and e. pimentel : _ formalizing web service choreographies .",
    "_ electronic notes in theoretical computer science , 2004 , 105(1 ) : 7394 .",
    "c. montangero and l. semini : _ a logic view of choreography .",
    "_ proc . conf . on coordination models and languages , 2006 : 179193 .",
    "g. g. pu and x. p. zhao and s. l. wang : _ a denotational model for web services choreography .",
    "conf . on distributed computing and internet technology , 2008",
    "m. bravetti and g. zavattaro : _ towards a unifying theory for choreography conformance and contract compliance . _ lecture notes in computer science , 2007 , 4827(2007 ) : 3450 . z. wang and l. zhou and y. x. zhao : _ web services choreography validation . _ j. service oriented computing and applications , 2010 , 4(4 ) : 291305 . c. pelz",
    ": _ web services orchestration and choreography . _ ieee computer , 2003 , 36(8 ) : 4652 .",
    "n. busi and r. gorrieri and c. guidi : _ choreography and orchestration : a synergic approach for system design .",
    "_ proc . conf . on service oriented computing , 2005 : 228240 .",
    "n. busi and r. gorrieri and c. guidi : _ choreography and orchestration conformance for system design .",
    "_ lecture notes in computer science , 2006 , 4038(1 ) : 6381",
    ". m. sun and a. farhad : _ web services choreography and orchestration in reo and constraint automata .",
    "acm symp . on applied computing , 2007 : 346353 .",
    "w. l. yeung : _ mapping ws - cdl and bpel into csp for behavioural specification and verification of web service .",
    "eu conf . on web services , 2006 : 297305 .",
    "w. l. yeung : _ csp - based verification for web service orchestration and choreography j. simulation , 2007 , 83(1 ) : 6574 .",
    "c. pahl and y. zhu : _ a semantical framework for the orchestration and choreography of web services . _ electronic notes in theoretical computer science , 2006 , 151(2 ) : 318 .",
    "h. l. yang and x. p. zhao and c. cai : _ exploring the connection of choreography and orchestration with exception handling and finalization / compensation .",
    "_ proc . conf . on formal techniques for networked and distributed systems , 2007 : 8196 .",
    "samik basu and tevfik bultan and meriem ouederni : _ deciding choreography realizability .",
    "39th annual acm sigplan - sigact symposium on principles of programming languages , 2012 : 191202 .",
    "kohei honda and nobuko yoshida and marco carbone : _ multiparty asynchronous session types .",
    "popl08 , 2008 : 273284 .",
    "samira tasharofia and marjan sirjania : _ formal modeling and conformance validation for ws - cdl using reo and casm .",
    "_ electronic notes in theoretical computer science , 2009 , 2009 : 155174 .",
    "c. hewitt : _ view control structures as patterns of passing messages . _ j. artificial intelligence , 1977 , 8(3 ) : 323346 .",
    "g. agha : _ actors : a model of concurrent computation in distributed systems .",
    "_ , mit , 1986 .",
    "g. agha : _ concurrent object - oriented programming . _ j. communications of acm , 1990 , 33(9 ) : 125141 .",
    "m. c. astley : _ customization and composition of distributed objects : policy management in distributed software architectures _ university of illinois , urbana - champaign , 1999 .",
    "axis : _ axis soap engine .",
    "_ apache , 2011 , http://axis.apache.org/axis .",
    "p. v. biron and a. malhotra : _ xml schema part 2 : datatypes second edition .",
    "_ w3c recommendation , 2004 .",
    "s. frlund _ : _ coordinating distributed objects : an actor - based approach to synchronization .",
    "_ , mit , 1996",
    ". m. w. jang : _ efficient communication and coordination for large - scale multi - agent systems .",
    "_ university of illinois , urbana - champaign , 2006 .",
    "osl : _ actor foundry .",
    "_ open systems laboratory , university of illinois , urbana - champaign , 2011 , http://osl.cs.uiuc.edu .",
    "d. c. sturman : _ modular specification of interaction policies in distributed computing .",
    "_ , university of illinois , urbana - champaign , 1996 .",
    "c. l. talcott : _ an actor rewriting theory . _ electronic notes in theoretical computer science , 1996 , 4 : 361384 . c. l. talcott : _ interaction semantics for components of distributed systems .",
    "workshop on formal method for open object - based distributed systems , 1996 . c. l. talcott : _ actor theories in rewriting logic .",
    "_ j. theoretical computer science , 2002 , 285(2 ) : 441485 . c. a. varela : _ worldwide computing with universal actors : linguistic abstractions for naming , migration , and coordination .",
    "_ university of illinois , urbana - champaign , 2001 .",
    "n. venkatasubramanian : _ an adaptive resource management architecture for global distributed computing .",
    "_ university of illinois , urbana - champaign , 1998 .",
    "munindar p. singh : _ information - driven interaction - oriented programming : bspl , the blindingly simple protocol language .",
    "10th int . conf . on autonomous agents and multiagent systems ( aamas 2011 ) , 2011 .",
    "munindar p. singh : _ lost : local state transfer  an architectural style for the distributed enactment of business protocols .",
    "2011 ieee international conference on web services , 2011 : 5764 .",
    "jan mendling and michael hafner : _ from ws - cdl choreography to bpel process orchestration .",
    "_ j. enterprise inf .",
    "management , 2008 , 21(5 ) : 525542 .",
    "jan mendling and michael hafner : _ from inter - organizational workflows to process execution : generating bpel from ws - cdl .",
    "_ otm workshops , 2005 , 2005 : 506515 .",
    "in fig.[fig.5 ] , the user agent business process being modeled as useragent wso described by ws - bpel is described in following ."
  ],
  "abstract_text": [
    "<S> web service composition creates new composite web services from the collection of existing ones to be composed further and embodies the added values and potential usages of web services . </S>",
    "<S> web service composition includes two aspects : web service orchestration denoting a workflow - like composition pattern and web service choreography which represents an aggregate composition pattern . </S>",
    "<S> there were only a few works which give orchestration and choreography a relationship . in this paper </S>",
    "<S> , we introduce an architecture of web service composition runtime which establishes a natural relationship between orchestration and choreography through a deep analysis of the two ones . </S>",
    "<S> then we use an actor - based approach to design a language called ab - wscl to support such an architecture . to give ab - wscl a firmly theoretic foundation , </S>",
    "<S> we establish the formal semantics of ab - wscl based on concurrent rewriting theory for actors . </S>",
    "<S> conclusions that well defined relationships exist among the components of ab - wscl using a notation of compositionality is drawn based on semantics analysis . </S>",
    "<S> our works can be bases of a modeling language , simulation tools , verification tools of web service composition at design time , and also a web service composition runtime with correctness analysis support itself .    </S>",
    "<S> [ firstpage ]    web services ; web service orchestration ; web service choreography ; actor systems ; compositionality ; rewriting semantics ; interaction semantics </S>"
  ]
}