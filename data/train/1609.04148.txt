{
  "article_text": [
    "the motivation for studying color - spanning objects stems from the facility location problems , where we may have different types of facilities , and the objective is to identify a location of desired shape with at least one copy of each facility and the measure of the region is optimized . in this paper",
    ", we study the minimum width color - spanning annulus problem for different objects .",
    "a point set @xmath14 is given in @xmath1 .",
    "each point @xmath15 is assigned a color from the set @xmath16 of @xmath17 distinct colors .",
    "there exists at least one point of each color .",
    "a region is _ color - spanning _ if it contains at least one point of each colors .",
    "an annulus @xmath18 is a region bounded by two co - centric homothetic closed curves @xmath19 ( inner curve ) and @xmath20 ( outer curve ) .",
    "the ( common ) center @xmath21 of @xmath19 and @xmath20 is referred to as the _ annulus - center _ , and the _ width _ of the annulus is the euclidean distance between two closest points on the boundary of @xmath19 and @xmath20 respectively . in this paper , we are interested to find square , rectangular and triangular annulus the objective is to minimize the width of the annulus .",
    "the minimum width annulus problem is well studied in the literature .",
    "the most common variation of this problem is the color - spanning circle",
    ". abellanas et al .",
    "@xcite showed that the smallest color spanning circle can be computed in @xmath22 time .",
    "abellanas et al .",
    "@xcite also showed that the narrowest color - spanning strip and smallest axis - parallel color - spanning rectangle can be found in @xmath23 and @xmath24 time respectively .",
    "das et al .",
    "@xcite improved the time complexity of narrowest color spanning strip problem to @xmath25 , and smallest color - spanning axis - parallel rectangle problem to @xmath26 .",
    "they also provided a solution for the arbitrary oriented color - spanning rectangle problem in @xmath27 time using @xmath28 space .",
    "recently , khanteimouri et al .",
    "@xcite presented an algorithm for color spanning square in @xmath29 time .",
    "khanteimouri et al .",
    "@xcite also presented a solution for the color spanning axis - parallel equilateral triangle in @xmath30 time .    on the other hand ,",
    "the problem of computing the minimum width annulus is also studied in the literature .",
    "given a set of @xmath8 points , computing the minimum width circular annulus containing all the points was independently addressed in @xcite .",
    "all of their methods result in a time complexity of @xmath31 .",
    "there are also sub - quadratic time algorithms for the circular annulus problem . using parametric searching technique , agarwal et al .",
    "@xcite presented an @xmath32 time algorithm .",
    "agarwal et al .",
    "@xcite also presented a randomized algorithm for the same problem which runs in @xmath33 time . to talk about the variations other than circular annulus for a general point set in @xmath1 , the well known results are an @xmath28 time optimum algorithm for the axis parallel rectangular annulus by abellanas et al .",
    "@xcite , and an @xmath30 time optimum algorithm for the axis parallel square annulus by gluchshenko et al .",
    "mukherjee et al .",
    "@xcite proposed an algorithm for computing the minimum width axis parallel rectangular annulus for a point set in @xmath34 in @xmath35 time .",
    "they also proposed an algorithm for arbitrary oriented minimum width rectangular annulus in @xmath1 that runs in @xmath25 time using @xmath28 space .",
    "recently , bae @xcite proposed the minimum width square annulus of arbitrary orientation in @xmath36 time .",
    "the color spanning annulus problem is comparatively new in the literature .",
    "acharyya et al .",
    "@xcite presented two algorithms for finding the minimum width color spanning circular and axis - parallel square annulus .",
    "both the algorithms run in @xmath10 time using @xmath28 space .    in this paper , we propose algorithms to compute the minimum width color - spanning annulus where @xmath19 and @xmath20 are ( i ) axis - parallel squares @xmath3 , ( ii ) axis - parallel rectangles @xmath4 , and ( iii ) equilateral triangles of fixed orientation @xmath5 .",
    "the time complexities of the proposed algorithms are : ( i ) for a @xmath6 is @xmath37 , ( ii ) for a @xmath9 is @xmath10 , and ( iii ) for a @xmath11 is @xmath12 .",
    "the space complexity of all the algorithms is @xmath13 .",
    "the algorithm for @xmath6 is an improvement of the existing result of @xcite on this problem by a factor of @xmath8 .",
    "moreover , if @xmath17 is constant , then the improvement factor is @xmath38 .",
    "interior of an annulus @xmath39 , defined by @xmath40 , is the region inside @xmath39 excluding @xmath19 and @xmath20 .",
    "@xcite [ distinct - color ] the points of distinct color lying on @xmath19 and @xmath20 are said to define an annulus @xmath18 , and @xmath41 does not contain any point of color same as those defining the annulus @xmath18 .    throughout the paper ,",
    "we use @xmath42 and @xmath43 to denote the horizontal and vertical lines passing through point @xmath44 . @xmath45",
    "denote the distance between the pair of points @xmath46 in @xmath47 and @xmath48 norm respectively .",
    "the closest distance of a line segment @xmath49 from a point @xmath50 will be denoted by @xmath51 .",
    "we also denote @xmath52 as the color of a point @xmath15 .",
    "an _ axis - parallel color - spanning square annulus @xmath3 _ is a color - spanning annulus @xmath18 bounded by two co - centric axis - parallel squares @xmath20 and @xmath19 . in @xcite",
    ", it is shown that either @xmath19 or @xmath20 of a minimum width square annulus @xmath3 has two points of different colors in its two boundaries .",
    "we prove a stronger claim .",
    "either @xmath19 or @xmath20 of a @xmath6 has two points of distinct color on its two mutually parallel boundaries .    for a contradiction ,",
    "let only the two mutually perpendicular boundaries ( say top and left boundaries ) of the @xmath20 of a @xmath6 contain two points of different colors .",
    "we can reduce the size of @xmath20 ( as well as @xmath19 ) by moving the bottom boundary upward and the right boundary to the left of both @xmath20 and @xmath19 with the same speed until the bottom boundary or the right boundary of @xmath20 touches a point . observe that , during this movement if the bottom and/or right boundaries of @xmath19 encounter some point",
    ", those points will enter in the annular region , but no point goes out from the inside to the outside of the annular region .",
    "thus , the annulus remains color - spanning and its width does not increase .",
    "if two mutually perpendicular boundaries of @xmath19 contain two points of different colors , then also both @xmath19 and @xmath20 can be expanded keeping the annular region color - spanning such that the width of the annulus does not increase until the lemma is satisfied by @xmath19 .",
    "thus the lemma follows .",
    "we consider each pair of bi - colored points @xmath53 to define the mutually parallel boundaries of @xmath20 and compute the minimum width annulus .",
    "similar method works for defining the mutually parallel boundaries of @xmath19 with bi - colored pair of points in @xmath54 .",
    "[ outer - inner ] if @xmath20 of a minimum width axis - parallel square annulus @xmath18 , is defined by two points @xmath55 on its two parallel boundaries , and its annulus - center is fixed at a point @xmath21 , then its @xmath19 must pass through a point @xmath56 with minimum @xmath48 distance among the farthest points of every color @xmath57 from the annulus - center @xmath21 .    as the annulus - center is fixed at the point @xmath21 and its radius",
    "is also fixed @xmath58 , @xmath20 is fixed .",
    "now , for each color @xmath59 , the point of color @xmath60 having farthest distance must lie inside the annular region .",
    "since all these @xmath61 points need to be included in the annular region , @xmath19 will be defined by one such point which is closest to @xmath21 .",
    "let @xmath62 , and consider the horizontal strip of width @xmath63 , defined by the horizontal lines @xmath42 and @xmath64 . if @xmath65 , then @xmath66 can not define @xmath20 .",
    "otherwise the points @xmath66 define @xmath20 whose center lies on a horizontal interval @xmath67 $ ] , where @xmath68 and @xmath69 .",
    "this configuration always holds as shown in @xcite .",
    "consider the left boundary of the square centered at @xmath70 and the right boundary of the square centered at @xmath71 , both of radius @xmath72 .",
    "these boundaries along with the horizontal lines through @xmath66 defines a rectangle @xmath73 ( see fig .",
    "[ sq_algo](a ) ) .",
    "all possible feasible @xmath20 are contained in @xmath73 .",
    "we consider the subset @xmath74 within @xmath73 and verify whether @xmath75 is color spanning by using a linear scan .",
    "if @xmath75 is not color spanning , then we can not have any @xmath6 contained in @xmath73 .",
    "hence we discard the horizontal strip defined by the pair @xmath66 .",
    "otherwise , for each point @xmath76 ( @xmath77 ) , we plot its distance in @xmath48 metric from different points of line segment @xmath78 .",
    "each of these distance functions @xmath79 is a combination of line segments with slopes in @xmath80 as described in @xcite ( see fig .",
    "[ sq_algo](b ) ) .",
    "@xcite [ jjj ] the distance curves @xmath79 and @xmath81 for the points @xmath82 respectively intersect at exactly one point .",
    "we consider the functions @xmath83 for all points each color @xmath84 separately .",
    "let @xmath85 be the upper envelope of the functions of @xmath83 , @xmath86 .",
    "for each point @xmath87 , if the vertical line drawn at @xmath88 intersects @xmath85 at a point @xmath89 , and @xmath89 lies on @xmath90 , then the point @xmath56 of @xmath91 is closest to @xmath20 centered at @xmath88 among all points of @xmath54 having @xmath91 inside @xmath73 . observe that , each @xmath85 is one of the forms listed in figure [ gamma ] , and their corresponding symmetric forms .",
    "this follows from the fact that the upper envelope @xmath85 of the curves in @xmath92 consists of at most one line segments of slopes @xmath93 .    ]    now , to compute the furthest points of each color @xmath60 from @xmath78 , we need to consider the lower envelope @xmath94 of @xmath95 . again to minimize the width of the annulus , we choose the point on @xmath94 having maximum vertical distance from @xmath78 .",
    "its projection @xmath21 on @xmath78 is the center of the @xmath6 with @xmath66 on the two parallel sides of its @xmath20 ( see fig .",
    "[ sq_algo](b ) ) .    [ envelope ]",
    "given the rectangle @xmath73 , the set of points within @xmath73 , we can find the annulus - center @xmath21 in @xmath30 time .",
    "let @xmath96 , @xmath97 , and there are @xmath98 points of color @xmath99 .",
    "by lemma [ jjj ] , the computation of upper envelope @xmath85 takes @xmath100 time @xcite .",
    "thus , the total time for computing @xmath85 for all @xmath101 is @xmath30 .",
    "now , we have @xmath17 totally defined functions @xmath85 in the interval domain @xmath67 $ ] , where each pair of functions @xmath85 and @xmath102 intersect in at most two points .",
    "the size of the lower envelope @xmath94 of the functions @xmath103 is @xmath104 ( the davenport schinzel sequence of order 2 ) , and it can be computed in @xmath105 time @xcite .",
    "finally , we compute the point having maximum @xmath106-coordinate on @xmath94 by inspecting all its vertices . since @xmath107 , the total time required for processing @xmath108 is @xmath109 .",
    "thus , the total time complexity is dominated by computing @xmath108 , which is @xmath30 .    given a set of @xmath8 points , each assigned with one of the @xmath17 given colors , the minimum width @xmath6 can be computed in @xmath36 time .",
    "we consider @xmath31 pairs of bi - colored points .",
    "for each pair of such points @xmath110 , we can construct the rectangle @xmath73 in @xmath111 time . with the help of a linear search we can verify whether @xmath73 is color - spanning .",
    "if @xmath73 is color - spanning , then using lemma [ envelope ] , we can determine the optimum square annulus contained in @xmath73 in @xmath30 time .",
    "thus the time complexity result follows .",
    "we can further improve the time complexity in the following way using a total @xmath13 amount of extra space .",
    "we choose a pair of points @xmath55 and let @xmath65 , where @xmath63 .",
    "now , we can construct the rectangle @xmath73 and verify its color - spanning property as was done earlier .",
    "if it is color spanning , then for each color we maintain the upper envelope @xmath112 .",
    "as mentioned earlier , @xmath112 s are of constant complexity .",
    "thus , each @xmath112 can be maintained using @xmath111 space .",
    "for each point @xmath113 , if @xmath56 is inside @xmath73 , then we consider its distance curve @xmath79 from @xmath78 , and update @xmath112 for @xmath114 considering the intersection of @xmath79 and the existing @xmath112 .",
    "this can be done in @xmath111 time . thus considering all points in @xmath54",
    ", we can construct the @xmath115 in @xmath28 time using @xmath13 space . at the end , we consider the lower envelope @xmath94 of these @xmath112 s and return the maximum point . as in lemma",
    "[ envelope ] , this can be done in @xmath109 time using @xmath13 space .",
    "considering @xmath31 pairs of bi - colored points , we have the following result :    given a set of @xmath8 points , each assigned with one of the @xmath17 given colors , the minimum width @xmath6 can be computed in @xmath7 time using @xmath13 extra space .",
    "an _ axis - parallel color - spanning rectangular annulus @xmath4 _ is a color - spanning annulus @xmath18 bounded by two co - centric axis - parallel rectangles @xmath20 and @xmath19 . the top ( resp .",
    "bottom , left , right ) boundaries of @xmath19 and @xmath20 are said to be _",
    "similar sides _ of these two rectangles .",
    "the width of @xmath9 is half of the difference of lengths ( widths ) of @xmath20 and @xmath19 ( see fig . [",
    "fig : axis_parallel_rect ] ) .        [ four_points ] the necessary and sufficient condition for @xmath18 to be a minimum width",
    "@xmath9 is that ( i ) all the four edges of @xmath20 must contain at least one point , and at least one edge of @xmath19 must contain at least one point , or ( ii ) all the four edges of @xmath19 must contain at least one point , and at least one edge of @xmath20 must contain at least one point . in both the cases , these five points of @xmath54 are of different colors .    _ part ( i ) _ : for a contradiction let us assume that three edges of @xmath20 contains three points , one edge of @xmath19 contains a point , and the colors of these four points are different satisfying observation [ distinct - color ] . let @xmath116 be the edge of @xmath20 containing no point .",
    "we start moving the edge @xmath116 of @xmath20 containing no point towards the annulus - center @xmath21 in the self - parallel manner . to maintain the same width of @xmath18 we need to move the similar side of @xmath19 of @xmath116 towards @xmath21 simultaneously with @xmath116 until @xmath116 hits a point of @xmath54 having color different from the colors of all three points on @xmath20 ( see fig .",
    "[ fig : axis_parallel_rect ] ) .",
    "note that , all the points lying in the annular region of @xmath18 remains in the annular region of @xmath117 formed with the new positions of @xmath116 ( surely , a few more points may enter in the annular region ) .",
    "if none of the edges of @xmath19 contains a point , then we can reduce the width of the annulus by moving the four edges of @xmath19 away from the annulus - center @xmath21 in self - parallel manner until at least one edge of @xmath19 hits a point inside the annular region @xmath18 satisfying observation [ distinct - color ] .    _ part ( ii ) _ : similar proof holds to show that the width of an annulus defined by four points on the four edges of @xmath19 and one edge of @xmath20 containing a point .",
    "thus , the lemma follows .",
    "lemma [ four_points ] leads to the following result ;    [ width_two_points ] in an optimum @xmath9 a pair of similar sides ( of @xmath19 and @xmath20 ) will contain two points of different colors .",
    "we now discuss the algorithm for rectangular annulus based on the lemma [ width_two_points ] .",
    "assume that the points in @xmath54 are available in sorted order with respect to @xmath118- and @xmath106-coordinates in two arrays @xmath119 and @xmath120 respectively .",
    "consider a pair of points @xmath55 of different colors .",
    "we test whether a @xmath9 is possible with @xmath44 and @xmath121 on the top boundaries of @xmath20 and @xmath19 respectively .",
    "the width of such a @xmath9 , if exists , will be @xmath63 .",
    "similar method is adopted to find the existence of a @xmath9 with @xmath66 in the bottom , left or right boundaries of @xmath19 and @xmath20 .",
    "let us consider @xmath42 and @xmath64 . in a linear scan we can find a point @xmath122 such that the horizontal strip defined by @xmath42 and @xmath123 is color spanning . if @xmath124 , then an annulus of width @xmath125 is trivially obtained with @xmath126 .",
    "thus , we assume that @xmath127 .",
    "observe that , for all points @xmath128 with @xmath129 , the horizontal strip @xmath130 defined by @xmath42 and @xmath131 will be color spanning .",
    "we now compute a minimum width @xmath9 inside the strip @xmath130 with points @xmath44 and @xmath56 lying respectively on the top and bottom boundary of @xmath20 , and @xmath121 lying on the top boundary of @xmath19 .",
    "fix a point @xmath132 with @xmath133 inside the strip @xmath130 having color different from that of @xmath44 , @xmath121 and @xmath56 . in a linear scan in the array @xmath119",
    ", we can get a point @xmath134 such that the rectangle defined by the lines @xmath135 is color - spanning .",
    "thus for all points @xmath136 satisfying @xmath137 $ ] and @xmath138 , the rectangle defined by the lines @xmath139 will be color - spanning . in a line sweep inside the strip @xmath130 ,",
    "we choose those points @xmath21 with @xmath138 and having color different from that of @xmath140 .",
    "now , the rectangle @xmath73 formed by @xmath139 defines @xmath20 .",
    "the corresponding @xmath19 will be co - centric with @xmath20 , its length and width will be @xmath141 ( see fig .",
    "[ rect_algo ] ) .",
    "we can test whether the created annulus is color - spanning or not by inspecting the points in @xmath54 in another linear scan range trees with points corresponding to @xmath17 colors separately and performing emptiness queries for four axis - parallel rectangles in all those range trees ; this will increase in the space complexity to @xmath30 . ] .",
    "thus , we have the following result :    [ l ] given a set of @xmath8 points , each assigned with one of the @xmath17 given colors , the minimum width @xmath9 can be computed in @xmath142 time using @xmath28 space .    for each pair of points",
    "@xmath55 , we execute four loops : ( i ) choosing the points @xmath56 using a horizontal line sweep , ( ii ) choosing the points @xmath70 using a vertical line sweep inside the strip @xmath130 , ( iii ) choosing the points @xmath21 using a vertical line sweep from @xmath70 towards right , and then ( iv ) testing whether the created annulus is color - spanning by testing the points in the rectangle @xmath143 .    we can improve the time complexity by merging the two loops ( iii ) and ( iv ) mentioned in the proof of lemma [ l ] as follows :    for each @xmath144 , we start sweeping two vertical lines @xmath145 and @xmath47 simultaneously by using an array @xmath146 of size @xmath17 , and a scalar variable @xmath147 . @xmath148",
    "$ ] indicates the number of points of color @xmath60 in the annulus , and @xmath147 indicates the number of colors absent in the annulus .",
    "we initialize @xmath148=0 $ ] for all @xmath149 , @xmath150=d[color(q)]=d[color(r)]= d[color(a)]=1 $ ] , and @xmath151 .",
    "we also initialize the starting position of @xmath47 as the index of the rightmost point @xmath152 with @xmath153 and @xmath154 . the sweep of @xmath145 is implemented by considering the points in @xmath119 in order from the point @xmath70 . for",
    "each encountered point @xmath21 of color @xmath60 ( say ) , if @xmath155 $ ] , then @xmath21 is not feasible to be within the rectangular annulus currently under construction . otherwise , we do the following :     enters the annulus boundary ]     enters the annulus boundary ]    @xmath21 enters in the annulus : : :    we set @xmath148=d[i]+1 $ ] . if @xmath148=1 $ ] ( a point of    color @xmath60 is newly obtained in the annulus ) , then    @xmath147 is decremented by 1 . now , if @xmath156 : :    [ indicating @xmath126 ( see fig .    [ fig : rect_demo](a ) ) ] , we need not have to do anything . if @xmath157 : :    [ indicating @xmath158 ( see fig .",
    "[ fig : rect_demo](b ) ) ] , we start sweeping @xmath47 from its    present position up to @xmath159 . for all points    @xmath160 encountered by @xmath47 ,",
    "if    @xmath161 then @xmath162=d[j ]    -1 $ ] , where @xmath163 .",
    "if @xmath162=0 $ ]    ( indicating no point of color @xmath164 in the annulus ) then    @xmath147 is incremented by 1 .",
    "check whether the annulus @xmath18 is color - spanning : : :    if @xmath165 , then report  success \" , and stop sweeping of    @xmath145 .    since sweeping of @xmath145 and @xmath47 needs @xmath28 time , the time complexity of the algorithm reduces to @xmath166 . here",
    ", it needs to be mentioned that , for each point @xmath44 , we are testing whether there exists an annulus of width @xmath63 by choosing all possible points @xmath121 satisfying @xmath167 .",
    "thus , for each point @xmath44 , we choose @xmath28 points as @xmath121 in the worst case .",
    "but , this can be improved using a simple binary search technique .",
    "we can find minimum value of @xmath125 ( the minimum width of an annulus ) with @xmath44 on the top boundary of @xmath20 by choosing @xmath121 using binary search among the points in @xmath120 having @xmath106-coordinate less than @xmath168 and of different color .",
    "thus for each point @xmath44 , we need to choose @xmath169 points as @xmath121 , which leads to a total time complexity of @xmath10 .",
    "now , this algorithm can also be implemented in inplace manner using @xmath13 extra space . for each choice of @xmath15 ( in decreasing order ) , we first get @xmath120 in @xmath30 time ( in the array @xmath54 itself ) to choose an appropriate member @xmath170 .",
    "all the members in @xmath54 below @xmath121 can serve the role of the point @xmath113 .",
    "now , for @xmath171 , we sort @xmath54 again to get @xmath119 ( in the array @xmath54 ) , and the sweep is performed to choose @xmath172 to compute minimum width @xmath9 , if exists .",
    "thus , we need to store @xmath173 ( using @xmath111 variables ) to identify the next triple @xmath174 for processing .",
    "this leads to the following result ;    given a set of @xmath8 points , each assigned with one of the @xmath17 given colors , the minimum width @xmath9 can be computed in @xmath10 time using @xmath13 extra space .",
    "r0.4          a _ color - spanning equilateral triangular annulus @xmath5 _ is a color - spanning annulus @xmath18 bounded by two co - centric equilateral triangles @xmath20 and @xmath19 where the common center for both the triangles is termed as annulus - center @xmath21 .",
    "we assume that the base of @xmath19 and @xmath20 are parallel to the @xmath118-axis .",
    "two such types of annulus is possible depending on whether the apex of @xmath19 and @xmath20 is above or below the base of the corresponding triangle .",
    "we will explain the method assuming that the apex is above the base . the other case can be similarly processed .        * _ wedge : _ * consider a pair of half - lines emanating from a point @xmath44 having angles @xmath175 and @xmath176 with the horizontal line at @xmath44 .",
    "the point @xmath44 is said to be the vertex of the wedge .",
    "the ( open ) areas created by these two half - lines above and below @xmath44 are termed as the _ upward wedge _ and _ downward wedge _ respectively for the point @xmath44 ( see fig .",
    "[ basic ] ) .",
    "* _ similar vertex and edge : _ * each pair of vertices , one of @xmath19 and one of @xmath20 , that are collinear with the annulus - center @xmath21 , are said to be _",
    "similar vertices_. similarly the edges of @xmath19 and @xmath20 that are parallel to each other , are said to be _",
    "similar edges_. in fig .",
    "[ boundary](a ) , @xmath118 and @xmath177 are similar vertices , and @xmath178 and @xmath179 are similar edges .",
    "* _ width of annulus : _ * the width of a triangular annulus is the difference in the length of the line segments perpendicular on two similar edges from its annulus - center @xmath21 ( see fig . [ boundary](a ) ) .",
    "consider fig [ boundary](a , where @xmath180 and @xmath181 .",
    "the line containing @xmath182 bisects both @xmath183 and @xmath184 .",
    "the width of @xmath18 is the perpendicular distance from @xmath177 to the line @xmath178 , which is equals to @xmath185 .",
    "thus , @xmath186 is right angled with @xmath187 , and @xmath188 .",
    "[ lemma_boundary ] the necessary and sufficient condition for @xmath18 to be a minimum width @xmath11 is that ( i ) all the three edges of @xmath20 must contain at least one point , and at least one edge of @xmath19 must contain at least one point or ( ii ) all the three edges of @xmath19 must contain at least one point , and at least one edge of @xmath20 must contain at least one point . in both the cases , these four points of @xmath54 are of different colors .        here , we describe the general framework of the algorithm to find @xmath11 of minimum width where @xmath20 is defined by three points of distinct colors ( see lemma [ lemma_boundary ] ) .",
    "the same method works to find a @xmath11 of minimum width where @xmath19 is defined by three points .",
    "we sort the points in @xmath54 with respect to their @xmath106-coordinates . consider each bi - colored pair of points @xmath53 with @xmath189 .",
    "consider a downward wedge @xmath190 at a vertex @xmath191 by drawing a line of angle @xmath175 through the point @xmath44 and a line of angle @xmath176 through the point @xmath121 ( see fig .",
    "[ construction ] ) . in linear time",
    "we can find the points @xmath192 lying in @xmath190 sorted with respect to their @xmath106-values .",
    "if @xmath190 is not color - spanning , @xmath20 can not be defined by @xmath190 .",
    "so , let us assume that @xmath190 is color - spanning and the pair @xmath110 defines two boundaries of @xmath20 by considering the points outside the wedge to define @xmath20 instead of considering inner wedge points . ]",
    "let @xmath193 be a vertical line through @xmath191 .",
    "now , the following results are important .            * the horizontal line through the point @xmath56 , and * the wedge line , which is a line of angle @xmath175 ( resp .",
    "@xmath176 ) through the point @xmath56 depending on whether @xmath56 is to the left ( resp .",
    "right ) of @xmath193 .    by lemma [ obx ] , we set @xmath198 or @xmath121 depending on whether @xmath199 or @xmath62 ( consider the minimum one ) , and start sweeping a horizontal line .",
    "the points in @xmath190 encountered by the sweep line are the event - points . at each event - point @xmath56 , if the triangle @xmath200 defined by the vertex @xmath191 and the line @xmath131 in the wedge @xmath190 is color - spanning , @xmath56 defines the base of @xmath20 and we compute @xmath19 as follows :",
    "@xmath201 create an array @xmath146 of size @xmath17 to store the distance of the closest point of each color @xmath60 from the boundary of @xmath20 .",
    "initialize @xmath148=\\infty$ ] for all @xmath202 .",
    "* let @xmath205 and @xmath206 be the points of intersection of @xmath207 and @xmath123 with @xmath193 .",
    "we will use the term _",
    "@xmath88-point _ and _ @xmath89-point _ of @xmath208 to denote the points @xmath205 and @xmath206 respectively .",
    "* compute the distances @xmath209 and @xmath210 . *",
    "the distance of @xmath208 from the boundary of @xmath20 is @xmath211 ( see observation [ distance_twice ] ) .",
    "if @xmath208 is of color @xmath60 then store @xmath212)$ ] in @xmath148 $ ] .",
    "for each of the @xmath31 pair of points @xmath110 , the sweep considers @xmath28 event points in @xmath215 . for each event point",
    "@xmath197 , we need to spend @xmath28 time in the worst case to inspect all the points in @xmath200 . thus the result follows .    we can improve the time complexity by maintaining two avl trees @xmath216 and @xmath130 ( instead of the array @xmath146 ) while processing each pair of points @xmath217",
    "here , @xmath218 $ ] stores the closest point @xmath88-point of each color @xmath60 from @xmath191 and @xmath130 stores the _ minimum @xmath106-coordinate _ of the @xmath89-points of each color @xmath60 . each element of @xmath216 and @xmath130 is attached with the corresponding color index .",
    "auxiliary arrays @xmath219 and @xmath220 are maintained , where @xmath218 $ ] ( resp .",
    "$ ] ) stores the position ( address of location ) containing color @xmath60 in @xmath216 ( resp .",
    "@xmath130 ) .",
    "thus , the size of both @xmath222 and @xmath220 are @xmath13 .",
    "we have the points @xmath54 in decreasing order of their @xmath106-coordinates .",
    "when a new point @xmath223 of color @xmath224 is faced by the sweep line , we process @xmath208 .",
    "the position of color @xmath60 in the array @xmath216 and @xmath130 are @xmath225 $ ] and @xmath226 $ ] respectively .",
    "@xmath227 $ ] is updated with @xmath228)$ ] , and @xmath229 $ ] is updated with @xmath230 .",
    "next , both the avl trees @xmath216 and @xmath130 are adjusted in @xmath231 time . now , define @xmath232 ( i.e. , the base line at point @xmath208 ) , and scan both @xmath216 and @xmath130 in increasing order of their values using a merge like pass to find the required @xmath19 so that the annular region @xmath18 is of minimum width and contains every color from either @xmath216 or @xmath130 .",
    "thus , we have the following result :      the correctness of the algorithm follows from lemma [ lemma_boundary ] , its corollary , and the algorithm where we always maintain the nearest points of each color corresponding to the wedge boundaries and the base line in two @xmath13 sized avl trees .",
    "the time complexity is analyzed considering the fact that we need to consider @xmath234 pairs of bi - colored points @xmath235 to define the wedge @xmath190 . during the line sweep for the processing @xmath190 , at each event point",
    "@xmath236 we spend @xmath13 time and @xmath130 needs @xmath231 time .",
    "but , to find the elements from @xmath216 and @xmath130 to determine the minimum width annulus @xmath18 needs a linear scan in @xmath216 and @xmath130 . ] . hence , the time complexity result follows",
    "the extra space requirement follows from the size of @xmath216 , @xmath130 , @xmath219 and @xmath220 .",
    "corollary [ col ] suggested that we need to consider @xmath20 with each point on one of its three vertices .",
    "when a point @xmath15 is considered as apex , the wedge is defined by the two lines of angle @xmath175 and @xmath176 with the axis through the point @xmath44 and similar method is executed to get the optimum @xmath11 .",
    "the case when the point @xmath15 is the left ( resp .",
    "right ) endpoint of the base , has already been considered in our algorithm due to lemma [ obx ] .",
    "thus the result follows ."
  ],
  "abstract_text": [
    "<S> in this paper , we study different variations of minimum width color - spanning annulus problem among a set of points @xmath0 in @xmath1 , where each point is assigned with a color in @xmath2 . </S>",
    "<S> we present algorithms for finding a minimum width color - spanning axis parallel square annulus @xmath3 , minimum width color spanning axis parallel rectangular annulus @xmath4 , and minimum width color - spanning equilateral triangular annulus of fixed orientation @xmath5 . </S>",
    "<S> the time complexities of computing ( i ) a @xmath6 is @xmath7 which is an improvement by a factor @xmath8 over the existing result on this problem , ( ii ) that for a @xmath9 is @xmath10 , and for ( iii ) a @xmath11 is @xmath12 . the space complexity of all the algorithms is @xmath13 . </S>"
  ]
}