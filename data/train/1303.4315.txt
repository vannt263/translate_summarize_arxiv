{
  "article_text": [
    "the problem of data flow analysis over a monotone data framework with a bounded meet semilattice has been well studied in the context of static program analysis and machine independent compiler optimizations ( * ? ? ?",
    "9.2 , 9.3 ) .",
    "although the meet over all paths ( mop ) solution is desirable , its computation is undecidable in general @xcite .",
    "iterative fixed point methods as in @xcite are commonly used to find the maximum fixed point ( mfp ) solution as a conservative approximation to the mop solution @xcite .",
    "several important problems like reaching definitions analysis , live variable analysis and available expressions analysis ( * ? ? ?",
    "9.2.49.2.6 ) are essentially data flow analysis problems over monotone data flow frameworks with a bounded meet semilattice .    in this paper ,",
    "the computational complexity of mfp and mop data flow analysis problems over monotone data flow frameworks with a finite bounded meet semilattice is investigated .",
    "since a finite bounded meet semilattice is essentially a finite lattice , we define the problem over finite lattices .",
    "we show that computing the mfp solution to data flow analysis problem over a monotone data flow framework with a finite lattice is @xmath0__-complete__. we further show that the problem of finding mop solution is non - deterministic log space complete ( @xmath1__-complete _ _ ) . in fact",
    "the proof in section [ section_mop ] shows that mop is @xmath1__-complete _ _ even if the functions associated with the vertices of the control flow graph are non - monotone .",
    "these results indicate that the mfp problem is unlikely to be in the complexity class @xmath2 ( and hence fast parallel algorithms are unlikely to exist for the problem ( * ? ? ?",
    "* chap .  5 ) ) .",
    "the @xmath1 complexity of mop problem yields @xmath3 depth , polynomial sized parallel circuit for the problem .",
    "this further leads to the observation that although mop computation is harder than mfp computation in general , computing mop solution appears significantly easier than computing mfp over finite lattices .",
    "let @xmath4 be a partially ordered set .",
    "let @xmath5 and @xmath6 respectively denote the join and meet operations in @xmath7 .",
    "a partially ordered set @xmath4 is a meet semilattice , denoted by @xmath8 , if @xmath9 exists for all @xmath10 .",
    "a meet semilattice @xmath8 is a lattice , denoted by @xmath11 , if @xmath12 exists for all @xmath10 .",
    "a meet semilattice @xmath8 is a bounded meet semilattice , denoted by @xmath13 , if there exists an element @xmath14 such that @xmath15 for all @xmath16 .",
    "a lattice @xmath11 is a bounded lattice , denoted by @xmath17 , if there exist elements @xmath18 such that @xmath19 and @xmath15 for all @xmath16 .",
    "a finite bounded meet semilattice @xmath13 is essentially a finite lattice where join operation is defined as follows : for all @xmath20 , @xmath21 .",
    "a lattice is complete lattice if @xmath22 and @xmath23 exist for all @xmath24 .",
    "it is easy to see that a finite lattice is complete .",
    "let @xmath25 be a finite lattice .",
    "let @xmath26 .",
    "the tuple @xmath27 will be denoted by @xmath28 or simply by @xmath29 when there is no ambiguity about the index set .",
    "let @xmath30 denote the @xmath31 element of @xmath29 . for all @xmath32 , @xmath33 and @xmath34 .",
    "@xcite    a function @xmath35 is monotone if for all @xmath36 , @xmath37 implies @xmath38 .",
    "let @xmath39 be a directed graph .",
    "let @xmath40 and @xmath41 respectively denote the indegree and outdegree of vertex @xmath42 .",
    "the function @xmath43 is defined as follows @xmath44    let @xmath7 be a lattice and let @xmath45 .",
    "an element @xmath16 is called a _ fixed point _ of @xmath46 if @xmath47 .",
    "an element @xmath16 is called the _ maximum fixed point _ of @xmath46 if it is a fixed point of @xmath46 and for every @xmath48 whenever @xmath49 then @xmath50 .",
    "let @xmath51 denote the maximum fixed point of @xmath46 whenever it exists .",
    "a _ control flow graph _ is a finite directed graph @xmath52 where @xmath53 , @xmath54 , called _ entry _ , is a unique vertex satisfying @xmath55 and @xmath56 , called _ exit _ , is a unique vertex satisfying @xmath57 .",
    "every vertex @xmath58 is reachable from @xmath59 .",
    "a _ monotone data flow framework _",
    "@xcite is a triple @xmath60 where    * @xmath17 is a finite lattice where @xmath25 with @xmath61 and @xmath62 ; * @xmath6 is the confluence operator ; and * @xmath63 is a collection of monotone functions from @xmath7 to @xmath7 .",
    "a _ data flow analysis ( dfa ) system _ is a 5-tuple @xmath64 where    * @xmath65 is a control flow graph ; * @xmath66 is a monotone data flow framework ; * @xmath67 assigns a function @xmath68 to the vertex @xmath69 of @xmath65 ; and * @xmath70 , @xmath71 .",
    "let @xmath72 be a dfa system where @xmath52 and @xmath60 .",
    "then @xmath73 is defined as follows @xmath74 here we assume that @xmath75 when @xmath76 . with this convention , it is easy to see that @xmath77 is well defined and monotone in @xmath78",
    ".    let @xmath17 be a complete lattice and let @xmath45 be a monotone function .",
    "then the mfp of @xmath46 exists and is unique .",
    "[ knaster_tarski_thrm ]    since every finite lattice is complete , it is clear from theorem [ knaster_tarski_thrm ] that the mfp of @xmath77 exists and is unique .",
    "suppose @xmath29 is the mfp of @xmath77 , then we use the notation @xmath79 for the element @xmath80 .",
    "_ maximum fixed point ( mfp ) problem : _ given a dfa system @xmath72 , decide whether @xmath81 .",
    "a path @xmath82 from vertex @xmath83 to vertex @xmath84 in a graph @xmath65 , called a @xmath83-@xmath84 path , is a non - empty alternating sequence @xmath85 of vertices and edges such that @xmath86 for all @xmath87 .",
    "a @xmath83-@xmath84 path is written simply as @xmath88 when the edges in question are clear . it may be noted that vertices and edges on a path may not be distinct .",
    "the length of path @xmath82 is denoted by @xmath89 .",
    "let @xmath90 be called the path function associated with path @xmath82 .",
    "let @xmath91 be the set of all paths from vertex @xmath69 to vertex @xmath92 in @xmath65",
    ".    given a dfa system @xmath64 , the _ meet over all paths _ solution , denoted mop , is defined as follows @xmath93    since @xmath78 is finite and hence complete , though there could be infinitely many @xmath59-@xmath69 paths , @xmath94 is well defined by taking the infimum of all path functions .    _",
    "meet over all paths ( mop ) problem : _ given a dfa system @xmath72 , decide whether @xmath95 .",
    "this problem is used for reduction in section [ section_mfp ] to prove that mfp is @xmath0__-complete__.    a _ monotone boolean circuit _",
    "@xcite is a 4-tuple @xmath96 where    * @xmath39 is a finite directed acyclic graph where @xmath53 , and for all @xmath97 ; * @xmath98 is the set of input vertices ; * @xmath70 , called _ output _ , is the unique vertex in @xmath65 satisfying @xmath99 ; and * @xmath100 assigns either the boolean and function ( denoted by @xmath101 ) or the boolean or function ( denoted by @xmath102 ) to each vertex of @xmath65 .",
    "let @xmath103 be the @xmath31 input vertex of a boolean circuit @xmath104 and let @xmath105 be the input to the circuit .",
    "input value assignment _ is a function @xmath106 defined as follows @xmath107 the function @xmath106 can be extended to the function @xmath108 called _ value of a node _ defined as follows @xmath109 it is easy to see that @xmath110 is well defined when @xmath65 is a directed acyclic graph .",
    "an _ instance _ of monotone circuit value ( mcv ) problem is a pair @xmath111 with @xmath96 where    * @xmath104 is a monotone boolean circuit ; and * @xmath112 is an input value assignment .",
    "_ monotone circuit value ( mcv ) problem : _ given an instance @xmath111 of mcv , decide whether @xmath113 @xcite .",
    "this problem will be used as an intermediate problem in section [ section_mop ] for showing that mop is @xmath1__-complete__.    let @xmath114 be a finite set and @xmath17 be a finite lattice where @xmath25 .",
    "a directed graph @xmath39 is said to be a _ product graph _ of @xmath115 and @xmath7 if    * @xmath116 is the set of vertices ; and * @xmath117 is the set of directed edges .",
    "an _ instance _ of graph meet reachability ( gmr ) problem is a 6-tuple @xmath118 where    * @xmath39 is a product graph of @xmath115 and @xmath7 ; * @xmath119 where @xmath120 and @xmath71 ; * @xmath121 ; and * @xmath122 .",
    "let @xmath123    _ graph meet reachability ( gmr ) problem : _ given an instance @xmath118 of gmr , decide whether @xmath124      graph reachability problem is a well known @xmath1__-complete _ _ problem which will be used for reduction in this paper .",
    "an _ instance _ of graph reachability ( gr ) problem is a triple @xmath125 where    * @xmath39 is a directed graph ; and * @xmath126    _ graph reachability ( gr ) problem : _ given an instance @xmath125 of gr , decide whether @xmath127 is reachable from @xmath59 .",
    "gr is @xmath1__-complete _ _ ( * ? ? ?",
    "* theorem 16.2 on p.  398 ) .",
    "it is shown in @xcite that the problem of finding _ meet over all valid paths ( mvp ) solution _ to the interprocedural data flow analysis over a distributive data flow framework with possibly infinite ( resp .",
    "finite subset ) semilattice is @xmath0__-hard _ _ ( resp .",
    "@xmath0__-complete _ _ ) .",
    "it is shown in @xcite that the problem of finding mfp and mop solution to data flow analysis over a distributive data flow framework with a distributive sublattice of the power set lattice of a finite set is reducible to _ graph reachability _ problem .",
    "hence the problem is non - deterministic log space computable i.e. , belongs to the complexity class @xmath1 ( see @xcite for definition ) . since @xmath128 ( * ? ? ?",
    "* theorem 16.1 on p.  395 ) , @xcite and @xmath2 admits fast parallel solutions , these results show that the above problem admits fast parallel algorithms .",
    "+ the following is an outline for rest of the paper . in section [ section_mfp ] , we show that mfp is @xmath0__-complete _ _ by reduction from mcv . in section [ section_gmr ] ,",
    "we give an @xmath1 algorithm for computing gmr . in section [ section_mop ]",
    ", we prove that mop is log space reducible to gmr thereby showing that mop is in @xmath1 .",
    "completeness of mop w.r.t .",
    "the class @xmath1 follows easily by a log space reduction from gr to mop .",
    "in this section , we give a log space reduction from mcv to mfp .",
    "since mfp is in @xmath0 @xcite and mcv is @xmath0__-complete _ _ @xcite , the reduction implies that mfp is also @xmath0__-complete__.      given an instance @xmath129 of mcv with @xmath96 .",
    "construct an instance of mfp @xmath130 as follows    * @xmath131 where * * @xmath132 * * @xmath133 is defined as follows * * * for each input vertex @xmath134 add the edge @xmath135 to @xmath133 * * * for each vertex @xmath58 add the edge @xmath136 to @xmath133 * * * for each vertex @xmath137 with predecessors @xmath69 and @xmath92 with @xmath138 add the edges @xmath139 , @xmath140 to @xmath133 .",
    "note that each @xmath141 has a unique predecessor in @xmath65 .",
    "* @xmath60 is defined as follows * * @xmath142 where * * * @xmath143 bitwise @xmath144 operation in @xmath145 * * * @xmath146 bitwise @xmath147 operation in @xmath145 * * @xmath6 is the confluence operator * * @xmath148 where * * * @xmath149 is the identity function * * * @xmath150 is defined as follows @xmath151 * * * @xmath152 is defined as follows @xmath153 * * * the swap function @xmath154 is defined as follows @xmath155 * * * @xmath156 is defined as follows @xmath157 * * * @xmath158 is defined as follows @xmath159 + it is easy to see that all functions in @xmath63 are monotone .",
    "* @xmath160 is defined as follows @xmath161 @xmath162 @xmath163 more compactly @xmath164 if @xmath165 .",
    "@xmath166        figure [ fig_mcvp ] shows an instance of mcv where @xmath167 .",
    "figure [ fig_mfpp ] shows an instance of mfp constructed from the mcv instance of figure [ fig_mcvp ] .",
    "let @xmath39 be a directed acyclic graph .",
    "@xmath168 is defined as follows @xmath169 it is easy to see that @xmath170 function is well defined .    ]",
    "[ main_lemma ] let @xmath129 be an instance of mcv with @xmath96 and @xmath39 .",
    "let @xmath130 be the instance of mfp as constructed in section [ subsec_mfp_redct ] .",
    "then @xmath77 has a unique fixed point . for all @xmath58 , @xmath171 and for all @xmath172 , if @xmath173 is the predecessor of @xmath174 in @xmath175 , then @xmath176 .",
    "@xmath177 exists by theorem [ knaster_tarski_thrm ] .",
    "therefore , @xmath77 has at least one fixed point .",
    "let @xmath29 be an arbitrary fixed point of @xmath77 .",
    "let @xmath178 and @xmath179 denote the elements of @xmath29 corresponding to vertices @xmath180 and @xmath173 respectively .",
    "we first prove that @xmath181 is uniquely defined for all vertices @xmath182 of @xmath175 .    since @xmath29 is a fixed point of @xmath77 , so , @xmath183 . by equation , @xmath184 .",
    "so , @xmath185 @xmath186 is uniquely defined .",
    "let @xmath69 be an arbitrary vertex of @xmath187 .",
    "we prove the uniqueness of @xmath181 by induction on @xmath188 .    * _ base case : _",
    "@xmath189 i.e.  @xmath134 .",
    "so , @xmath164 and @xmath190 @xmath191 by definition . from equation [ eq_2 ] , @xmath192 is uniquely defined . *",
    "_ inductive step : _ let the theorem be true @xmath193 such that @xmath194 .",
    "let @xmath195 .",
    "let @xmath196 be predecessors of @xmath197 in @xmath65 . by definition of @xmath170 function , @xmath198 and @xmath199 .",
    "by induction hypothesis , @xmath200 and @xmath201 .",
    "+ from equation [ eq_2 ] , @xmath202 is uniquely defined .",
    "+ let @xmath203 . from equation [ eq_2",
    "] , @xmath204 is uniquely defined .",
    "+ the case @xmath205 is proved similarly .",
    "since @xmath181 is uniquely defined for all vertices @xmath182 of @xmath175 , @xmath29 is unique and hence @xmath29 is the maximum fixed point of @xmath77 .",
    "so , for all @xmath58 , @xmath206 and for all @xmath172 , if @xmath173 is the predecessor of @xmath174 in @xmath175 , then @xmath207 .",
    "let @xmath129 be an instance of mcv with @xmath96 and @xmath39 .",
    "let @xmath130 be the instance of mfp as constructed in section [ subsec_mfp_redct ] .",
    "@xmath208 .",
    "mfp is @xmath0__-complete__.    a polynomial time algorithm for mfp is given in @xcite .",
    "mcv is shown @xmath0__-complete _ _ in @xcite .",
    "it is easy to see that the above reduction is computable in log space .",
    "hence mfp is @xmath0__-complete__.",
    "algorithm [ algo_gmr ] is an algorithm for deciding gmr .",
    "@xmath209 @xmath210 * return * true * return * false    [ algo_gmr ]    the observation below is a direct consequence of the above algorithm .",
    "let @xmath211 be an instance of gmr .",
    "let @xmath123 . then algorithm [ algo_gmr ] returns true @xmath212 .",
    "gmr is computable in non - deterministic log space .",
    "variables @xmath213 and @xmath214 take @xmath215 space . since graph reachability takes up only non - deterministic log space ( * ? ? ?",
    "* example 2.10 on p.  48 ) ) , line 4 takes non - deterministic @xmath216 space .",
    "so , gmr is computable in non - deterministic log space .",
    "in this section , we give a log space reduction from mop to gmr .",
    "since gmr is non - deterministic log space computable , this implies that mop can also be computed in non - deterministic log space .",
    "given an instance @xmath64 of mop with @xmath52 , @xmath60 and @xmath217 .",
    "construct an instance of gmr @xmath218 as follows    * @xmath219 * @xmath220 where * * @xmath221 * * @xmath133 is defined as follows * * * for each vertex @xmath222 , if @xmath223 , add the edge @xmath224 to @xmath133 . * * * for each edge @xmath225 , add the edge @xmath226 to @xmath133 .",
    "figure [ fig_mopp ] shows a data flow graph and a lattice .",
    "let the set @xmath63 of monotone functions be defined as follows : @xmath227 where    * @xmath228 * @xmath229 * @xmath230 * @xmath231 * @xmath232 * @xmath233    figure [ fig_gmr ] shows the corresponding product graph .",
    "let @xmath64 be an instance of mop with @xmath52 and @xmath60 .",
    "let @xmath218 be an instance of gmr as constructed in section [ subsec_mop_redct ] .",
    "then for all @xmath58 , there exists a @xmath59-@xmath69 path @xmath82 in g such that @xmath234 is reachable from @xmath235 in @xmath175 .    * _ if part : _ let @xmath69 be an arbitrary vertex in @xmath187 .",
    "let @xmath82 be a @xmath59-@xmath69 path in @xmath65 and let @xmath236 for some @xmath237 .",
    "we prove the if part by induction on @xmath89 .",
    "+ _ base case : _ let @xmath238 i.e.  @xmath239",
    ". then @xmath240 .",
    "then @xmath241 .",
    "so , @xmath242 is reachable from @xmath235 in @xmath175 .",
    "+ _ inductive step : _ let @xmath243 and let the if part be true for all paths from @xmath59 in @xmath65 with length less than @xmath244 .",
    "let @xmath245 for some @xmath246 .",
    "let @xmath247 be the path @xmath82 with @xmath69 excluded i.e.  @xmath248 where @xmath249 is the path concatenation operator .",
    "therefore , @xmath247 is a path from @xmath59 with length @xmath250 .",
    "let @xmath251 and @xmath252 for some @xmath253 .",
    "by induction hypothesis , @xmath254 is reachable from @xmath235 in @xmath175 . by construction of @xmath133 , @xmath255 .",
    "so , @xmath256 is reachable from @xmath235 in @xmath175 .",
    "+ so , the if part is true for all @xmath59-@xmath69 paths in @xmath65 . * _ only if part : _ let @xmath256 is reachable from @xmath235 in @xmath175 .",
    "let @xmath82 be a path in @xmath175 from @xmath235 to @xmath256 .",
    "it is easy to show that length of @xmath82 is odd .",
    "so , we prove the only if part by induction on @xmath89 where @xmath89 is odd .",
    "+ _ base case : _ let @xmath257 i.e.  @xmath258 . by construction of @xmath133 , @xmath239 and @xmath259 .",
    "so , there exists a trivial @xmath59-@xmath69 path @xmath260 in g , the path having only one node @xmath59 , such that @xmath261 .",
    "+ _ inductive step : _ let @xmath262 for some integer @xmath244 and let the only if part be true for all odd length paths from @xmath263 in @xmath175 with length less than @xmath264 .",
    "let @xmath265 for some @xmath266 .",
    "let @xmath247 be the path @xmath82 with @xmath267 and @xmath256 excluded i.e.  @xmath268 where @xmath249 is the path concatenation operator . by induction hypothesis , there exists a @xmath59-@xmath269 path @xmath260 in @xmath65 such that @xmath270 . by construction of @xmath133 , @xmath271 and @xmath252 .",
    "so , there exists a @xmath59-@xmath69 path @xmath272 in @xmath65 such that @xmath273 + so , the only if part is true .",
    "so , the theorem is true .",
    "let @xmath64 be an instance of mop with @xmath52 and @xmath60 .",
    "let @xmath218 be an instance of gmr as constructed in section [ subsec_mop_redct ] .",
    "let @xmath274 .",
    "then @xmath275 .    ]",
    "@xmath276 is @xmath1__-complete__.    algorithm [ algo_gmr ] is @xmath1 computable .",
    "it is easy to see that the above reduction is log space computable .",
    "so , mop is in @xmath1 . since _",
    "graph reachability _ ( gr )",
    "problem is an instance of mop and gr is @xmath1__-complete _ _ , it follows that mop is also @xmath1__-complete__.    it is easy to see that the above proofs do not use the monotonicity of the data flow framework .",
    "so , the @xmath1__-completeness _ _ result holds even if the data flow framework is not monotone .",
    "we would like to thank dr .",
    "vineeth paleri and ms .",
    "rekha r.  pai for introducing us to the problem and for helpful discussions .",
    "we would also like to thank dr .",
    "priya chandran for reviewing our work",
    ".    10    a.  v. aho , m.  s. lam , r.  sethi , and j.  d. ullman . .",
    "prentice hall , 2 edition , sept .",
    "a.  borodin . on relating time and space to size and depth . , 6(4):733744 , 1977 .",
    "b.  a. davey and h.  a. priestley . .",
    "cambridge university press , 2 edition , may 2002 .",
    "l.  m. goldschlager . the monotone and planar circuit value problems are log space complete for p. , 9(2):2529",
    ", july 1977 .",
    "r.  greenlaw , h.  j. hoover , and w.  l. ruzzo . .",
    "oxford university press , usa , apr . 1995 .",
    "j.  b. kam and j.  d. ullman .",
    "monotone data flow analysis frameworks .",
    ", 7:305317 , 1977 .",
    "10.1007/bf00290339 .    g.  a. kildall . a unified approach to global program optimization . in _ proceedings of the 1st annual acm sigact - sigplan symposium on principles of programming languages _ , popl 73 , pages 194206 , new york , ny , usa , 1973 .",
    "acm .    c.  h. papadimitriou . .",
    "addison wesley , 1993 .",
    "t.  reps . on the sequential nature of interprocedural program - analysis problems . , 33:739757 , 1996 .",
    "10.1007/bf03036473 .",
    "t.  reps , s.  horwitz , and m.  sagiv .",
    "precise interprocedural dataflow analysis via graph reachability . in _ proceedings of the 22nd acm sigplan - sigact symposium on principles of programming languages _ , popl 95 , pages 4961 , new york , ny , usa , 1995 .",
    "m.  sipser . .",
    "course technology , 2 edition , feb .",
    "a.  tarski . a lattice - theoretical fixpoint theorem and its applications . ,",
    "5(2):285309 , 1955 .",
    "set @xmath277 to value false set @xmath277 to value true          a lattice can be represented as a poset @xmath4 @xcite , as a covering relation for a poset @xmath283 @xcite or as an algebraic structure @xmath11 @xcite . in this section ,",
    "we give a non - deterministic log space algorithms to convert a lattice given as a poset or a covering relation to a lattice as an algebraic structure .",
    "this makes the completeness result of mop w.r.t .  the class @xmath1 independent of the particular representation of the lattice .",
    "algorithm [ algo_covrel - to - poset ] ( resp .",
    "algorithm [ algo_poset - to - algstr ] ) converts a lattice given as a covering relation of a poset ( resp .",
    "a poset ) to the lattice as a poset ( resp .  an algebraic structure ) .",
    "the composition of the two algorithms converts a lattice given as a covering relation of a poset to the lattice as an algebraic structure .",
    "line 9 of algorithm [ algo_covrel - to - poset ] takes non - deterministic log space since gr takes non - deterministic log space ( * ? ? ?",
    "* example 2.10 on p.  48 ) .",
    "all other lines of the two algorithms take at most log space .",
    "so , algorithm [ algo_covrel - to - poset ] takes non - deterministic log space while algorithm [ algo_poset - to - algstr ] takes log space .",
    "the composition of the two algorithms takes non - deterministic log space ( * ? ? ?",
    "* theorem 8.23 on p.  324 ) .",
    "so , the conversions can be done in non - deterministic log space .",
    "it may be noted that the lattice in section [ section_mfp ] is of constant size .",
    "so , it can be converted to a poset or a covering relation in constant time .",
    "so , the completeness result of mfp w.r.t .",
    "the class @xmath0 is also independent of the particular representation of the lattice ."
  ],
  "abstract_text": [
    "<S> we consider the problem of data flow analysis over monotone data flow frameworks with a finite lattice . </S>",
    "<S> the problem of computing the maximum fixed point ( mfp ) solution is shown to be @xmath0__-complete _ _ even when the lattice has just four elements . </S>",
    "<S> this shows that the problem is unlikely to be efficiently parallelizable . </S>",
    "<S> it is also shown that the problem of computing the meet over all paths ( mop ) solution is @xmath1__-complete _ _ ( and hence efficiently parallelizable ) when the lattice is finite even for non - monotone data flow frameworks . </S>",
    "<S> these results appear in contrast with the fact that when the lattice is not finite , solving the mop problem is undecidable and hence significantly harder than the mfp problem which is polynomial time computable for lattices of finite height .    </S>",
    "<S> [ reducibility and completeness ] [ optimization ] [ program analysis ] </S>"
  ]
}