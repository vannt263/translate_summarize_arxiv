{
  "article_text": [
    "an _ exponential random graph model _ ( ergm ) is a mathematical description of a probability distribution over the graphs with a given fixed set of vertices , used in social network analysis  @xcite . in this model ,",
    "every graph is mapped to a _ feature vector _ ( typically a boolean or integer vector describing the existence or number of local structures such as vertices with given degrees or small induced subgraphs of a given type ) and the log - likelihood of each graph is determined as the inner product of its feature vector with a weight vector specified as part of the model .",
    "ergms were first developed by holland and leinhardt to study graphs arising from social relationships  @xcite .",
    "in contrast to other probabilistic models for social networks , such as the uniform distribution on graphs with a given degree distribution  @xcite , the features and weights of an ergm can correspond directly to sociological theories of network formation .",
    "for instance , features that describe the presence or absence of individual edges may have weights derived from models of _ assortative mixing _ , the theory that people with similar characteristics are more likely to form connections with each other  @xcite , while features describing the presence of triangle subgraphs may have weights derived from models of _ triadic closure _ , the theory that friends - of - friends are likely to become connected  @xcite . by using machine learning algorithms to fit the weights of an ergm to real - world data , sociologists may experimentally measure the strength of these effects and use them to test their theories .",
    "although there has been some theoretical research on speeding up the computation of feature vectors  @xcite , a low - level step in ergm computations , as well as research on ergms from the graph limit point of view  @xcite , little has been known to date about the higher level computational complexity of these models . in order to solve key problems on ergms , including the problems of generating graphs from a given model , computing the _ partition function _ of a model ( a normalizing constant used to transform log - likelihoods into probabilities ) , and fitting weights to data , researchers have generally resorted to monte carlo methods , in which the metropolis ",
    "hastings algorithm is used to construct a markov chain on the set of graphs defined by an ergm , with its stable distribution equal to the distribution described by the ergm .",
    "then , this chain is simulated for a number of steps with heuristic termination conditions that are intended to detect convergence of the chain to its stable distribution  @xcite . however ,",
    "these methods have no guarantees on their running time , accuracy , mixing time , rate of convergence , or correctness of the termination detection method .    in this paper , for the first time , we investigate ergms from the point of view of their computational complexity .",
    "we explain the heuristic nature of previous computations involving these models by showing that several key computational problems involving ergms are intractable in the worst case .",
    "in particular , we show , for a family of ergms parameterized by the number @xmath3 of vertices whose description complexity ( number of features and weights , and magnitude of the weights ) is polynomial in @xmath3 , that :    * unless @xmath4 , there is no polynomial - time approximation to the partition function of a given ergm that can achieve an approximation ratio exponential in any polynomial of  @xmath3 . * unless @xmath5 , there is no polynomial - time algorithm to compute the partition function of a given ergm . * unless @xmath6 , there is no randomized polynomial algorithm for generating random graphs whose output distribution is within total variation distance @xmath2 of a given ergm with variable weights .    our results can be obtained using an ergm with features that are very natural in social network analysis : an independent weight for each potential edge in a graph ( representing different affinities between different pairs of actors in a network ) and a single shared weight for all induced triangles ( representing triad closure ) .",
    "as we show , an ergm of this type can be used to describe a distribution that is very close to the uniform distribution on the maximum triangle - free subgraphs of a given graph .",
    "our results follow from the known @xmath7-hardness of finding a maximum triangle - free subgraph  @xcite and from a new @xmath0-hardness proof for counting large triangle - free subgraphs .",
    "we also show that these problems remain equally hard for an ergm in which the features are the induced subgraphs isomorphic to @xmath8 , for every fixed graph @xmath8 with three or more vertices , so small adjustments to the types of features available in the model can not make these problems easier .",
    "thus , our results destroy all hope of guaranteed - quality polynomial - time computation for ergm models of social networks .    from the point of view of theoretical computer science ,",
    "our methods are mostly standard reductions . however , in this respect , our most innovative result may be the inapproximability of the ergm partition function",
    ". there have been past results on @xmath0-hardness and inapproximability of partition functions  @xcite but these have generally involved systems of colorings or other decorations on a fixed underlying graph ; instead , the states of an ergm are themselves all possible graphs on a given vertex set .",
    "our inapproximability result is much stronger than the polynomial inapproximability known to hold for all @xmath0 problems  @xcite .",
    "the proof of this result avoids pcp theory , which has been applied in many recent inapproximability results  @xcite , and instead proceeds by a direct reduction .",
    "[ [ exponential - random - graphs . ] ] exponential random graphs .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    an exponential family random graph model , or ergm for short , is a distribution on random graphs that forms an exponential family .",
    "the distributions of exponential families have the form @xmath9 = \\frac{e^{\\theta \\cdot w(x)}}{z(\\theta)}\\ ] ] where @xmath10 is a vector of weights , sometimes called the model parameters , @xmath11 is a vector valued function that gives features of @xmath12 , and @xmath13 , often called the partition function , is a normalizing value chosen to make the probabilities sum to one . for an ergm",
    ", @xmath12 would be a graph on @xmath3 vertices and the features of @xmath12 would often include localized structures such as vertices with a given degree , paths with a given length , or cliques with a given number of vertices .",
    "we will let @xmath14 be the set of features we use and @xmath15 be the weight corresponding to a feature @xmath16",
    ". it will be convenient for us to linearly transform the weights ( by multiplying by @xmath17 ) , so that we can use @xmath18 rather than @xmath19 as the base of our exponential functions , allowing us to avoid real number computations and simplify our proofs .",
    "we define the density of a graph @xmath20 to be @xmath21 where @xmath22 is the value of the feature @xmath23 in @xmath20 .",
    "the features we use will be @xmath24-@xmath25 indicators of the presence of particular induced subgraphs and counts of subgraph appearances .",
    "the probability of a graph , @xmath20 , is its density , @xmath26 , divided by a normalizing constant to make the probabilities sum to one .",
    "this normalizing constant is @xmath27 , so @xmath28 = \\frac{d(g)}{z}$ ] ; @xmath29 is called the partition function of an ergm . in this paper",
    "we are chiefly concerned with two computational problems : calculating @xmath29 and generating graphs from these distributions .",
    "the types of features used in ergms are diverse .",
    "in general features can be of two types , homogeneous or heterogeneous , according to whether or not all isomorphic graphs @xmath20 have the same value of @xmath22 as each other .",
    "an example of a homogeneous subgraph feature would be the number of triangles in a graph .",
    "an example of a heterogeneous subgraph feature would be a @xmath24-@xmath25 indicator that is one when three particular vertices form a triangle and zero otherwise .",
    "a collection of heterogeneous triangle features , one for each triple of vertices with all weights equal , are equivalent to a single homogeneous triangle feature with the same weighting .",
    "it is common in social network analysis to weight edge features in a heterogeneous way : in these analyses , vertices typically represent people for whom we might have some prior knowledge or distribution of information that would affect their likelihood of being related . as an extreme example , in sexual contact networks , heterosexual contacts",
    "would be expected to be more frequent than homosexual contacts , and individuals who participate in both types of contact might be even less frequent . in some sociological models , there is a common global constraint on the likelihood of triadic closures , or triangle subgraphs . to align our proofs with this common model",
    ", we will use heterogeneous variable weights on edge features , but use a homogeneous uniform weight on all triangle subgraphs .",
    "[ [ complexity - theory . ] ] complexity theory .",
    "+ + + + + + + + + + + + + + + + + +    to discuss the difficulty of computing @xmath29 , we introduce some standard computational complexity background .    a _ problem _",
    "is a functional specification of an output for each input from a set of possible inputs and outputs , independent of the algorithm used to compute it .    a _ decision problem",
    "_ is a problem in which the output set is yes or no .",
    "a _ counting problem _ is a problem in which the output set is the set of natural numbers .",
    "computing the number of hamiltonian cycles in a graph is a counting problem .",
    "hamiltonian , the problem of determining if a graph has a hamiltonian cycle , is a decision problem .",
    "# hamiltonian , the problem of counting the number of hamiltonian cycles in a graph , is a counting problem .",
    "a _ complexity class _ is a set of problems that can be solved with a given limit on computational resources .",
    "is the complexity class of decision problems that can be solved in time polynomial in the length of the input .    is the complexity class of decision problems whose answers have polynomial time verifiable proofs .",
    "matching , the problem of determining if there is a perfect matching in a graph , has a polynomial time algorithm and so is in .",
    "hamiltonian is in because given an ordering of the vertices it can be checked in polynomial time if they form a hamiltonian cycle in that order .",
    "all problems in are trivially in using a blank proof and their normal polynomial time algorithm .",
    "the famous  vs.   problem is to determine if these two complexity classes are the same .",
    ", pronounced `` sharp p '' , is the set of counting problems whose decision version is in .    because hamiltonian is in , #",
    "hamiltonian is in . in a sense",
    "is the set of problems that ask about existence of solutions while is the set of problems that ask how many solutions a problem has .",
    "we say a decision problem , a , can be polynomial time reduced to another decision problem , b , if there is an algorithm that in polynomial time maps instances of a to instances of b such that yes instances map to yes instances and no instances to no instances . for counting problems , a is reducible to b if there is a pair of polynomial time algorithms such that the first one maps an instance of a to an instance of b such that the second algorithm applied to the answer to the b instance gives the answer for the a instance .",
    "a problem is -hard , for a complexity class , if every problem in can be polynomial time reduced to that problem .",
    "a problem is -complete if it is both in and it is -hard .",
    "problems in are generally thought of as being tractable or efficiently solvable whereas problems not in are considered intractable because they take super - polynomial time to solve .",
    "because most researchers believe that is not equal to , it is generally thought that -hard problems do not have polynomial time algorithms .",
    "similarly -hard problems are also thought to take super - polynomial time . in this paper",
    "we show different problems relating to ergm computation are -hard and -hard .",
    "[ [ a - menagerie - of - computational - problems . ] ] a menagerie of computational problems .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we now introduce several computational problems that we will use throughout the paper :    ergm - partition    input : an ergm @xmath30    output : the partition function for @xmath30    tri - free    input : a graph @xmath31 and a positive integer @xmath32    output : yes if there is a triangle free subgraph of @xmath20 with @xmath32 or more edges , no otherwise    # tri - free    input : a graph @xmath31 and a positive integer @xmath32    output : the number of triangle - free subgraphs of @xmath20 with @xmath32 or more edges    # matching    input : a graph @xmath31    output : the number of perfect matchings in @xmath20    # 3reg - bip - match    input : a @xmath33-regular bipartite graph @xmath31    output : the number of perfect matchings in @xmath20    # matching and # 3reg - bip - match are both known to be -complete  @xcite .",
    "tri - free is -complete  @xcite .",
    "we will prove that # tri - free is -complete .",
    "here we prove an inapproximability result on computing the partition function of an ergm by reducing to tri - free and creating a gap in the values of the ergm s partition function that separates the yes - instances from the no - instances .",
    "for a given graph @xmath20 , we define @xmath34 to be an ergm with the following features and weights .",
    "we place heterogeneous weights on edges and a homogeneous weight on triangle subgraphs .",
    "if an edge belongs to @xmath20 we give its indicator feature a weight of @xmath35 and if it does not belong to @xmath20 we instead give it a weight of @xmath36 .",
    "also , we assign the weight for the count of triangle subgraphs to be @xmath37 .    for two graphs @xmath20 and @xmath8 on the same vertex set , let @xmath38 be the number of edges in @xmath8 that are also in @xmath20 , @xmath39 be the number of edges in @xmath8 that are not in @xmath20 , and @xmath40 be the number of triangle subgraphs in @xmath8 .",
    "then @xmath41 in the distribution defined by @xmath34 is @xmath42 .",
    "also note that @xmath43 .",
    "[ lem : ergm - digits ] fix an integer @xmath44 and a graph @xmath20 , and let @xmath45 denote the number of triangle free subgraphs of @xmath20 with @xmath46 edges .",
    "then the integer part of the partition function for @xmath34 can be rewritten in base @xmath47 as @xmath48 .",
    "if @xmath8 is any graph that has an edge not belonging to @xmath20 or that has a triangle subgraph , then its density @xmath41 has a corresponding factor of @xmath49 , and is thus strictly less than @xmath50 .",
    "therefore the sum total of the densities of all graphs that contain edges not in @xmath20 or that contain triangles is strictly less than @xmath25 .",
    "the remaining contributions to the partition function come from graphs that are triangle free subgraphs of @xmath20 .",
    "let @xmath8 be such a graph with @xmath46 edges ; then @xmath8 contributes one unit to @xmath45 and @xmath51 .",
    "therefore the integer part of @xmath29 is @xmath52 .",
    "because each @xmath45 is less than @xmath53 and @xmath44 , there are no carries in this sum and @xmath29 written in base @xmath54 is @xmath48 .",
    "[ thm : ergm - inapprox ] if @xmath1 , then ergm - partition can not be approximated within a factor of @xmath55 in polynomial time .",
    "we prove this by contrapositive and so suppose we could approximate the partition function of an ergm within a factor of @xmath56 in polynomial time where @xmath57 .",
    "let @xmath20 be the input to @xmath32-tri - free .",
    "we use @xmath58 . if there is a triangle free subgraph with at least @xmath32 edges , then by @xmath59 . if there are no triangle free subgraphs with @xmath32 edges , then by @xmath60 . therefore setting @xmath61",
    ", we have : @xmath62 so if the computed approximation of @xmath29 is greater than @xmath63 , then @xmath20 necessarily has a @xmath32-edge triangle free subgraph .",
    "when the approximation of @xmath29 is less than @xmath64 , @xmath20 has no @xmath32 edge triangle free subgraph .",
    "therefore if we could approximate @xmath29 within a factor of @xmath55 in polynomial time , then we could solve tri - free in polynomial time implying that @xmath65 .",
    "in this section we prove the -hardness of computing the ergm partition function . we show this by reducing from # tri - free .",
    "unfortunately , the known reduction that shows tri - free to be -hard is not parsimonious  @xcite , meaning that the reduction does not preserve solution counts in a consistent way .",
    "so we first need to show that # tri - free is -complete , which we do by another reduction from # 3reg - bip - match .",
    "we define _",
    "@xmath66 _ for a @xmath33-regular bipartite graph , @xmath20 , to be another graph constructed from @xmath20 as follows .",
    "for each vertex @xmath67 , create a triangle @xmath68 in @xmath66 .",
    "call the edges of these triangles the vertex triangle edges . set an arbitrary cyclic ordering on the vertices of each of these triangles .",
    "then for each edge @xmath69 , arbitrarily pick one unpicked vertex @xmath70 in @xmath71 and another unpicked vertex @xmath72 in @xmath73 .",
    "add three edges to @xmath66 : one edge from @xmath70 to @xmath72 , one edge from @xmath70 to the vertex after @xmath72 in @xmath73 s cyclic ordering , and one edge from @xmath72 to the vertex after @xmath70 in @xmath71 s cyclic ordering .",
    "call the edge from @xmath70 to @xmath72 the cross edge for @xmath71 and @xmath73 and call the other two edges connecting edges .",
    "the name of this construction comes from the snub cube and snub dodecahedron , two convex polyhedra whose graphs can be formed by applying this construction to the graphs of the cube and dodecahedron , respectively .",
    "@xmath66 has three edges for every vertex in @xmath20 and three more edges for every edge in @xmath20 .",
    "it also has one triangle for every vertex in @xmath20 and two triangles for every edge in @xmath20 .",
    "if @xmath20 has @xmath3 vertices , @xmath66 has @xmath74 edges and @xmath75 triangles .    illustrates the reduction , applied to the graph of a cube . in the figure , the vertex triangle for each cube vertex  @xmath76 corresponds to the central triangle in one of the patches of four triangles with the same color as  @xmath76 .",
    "[ lem : tri - free - hard ] # tri - free is -complete .",
    "first we observe that # tri - free @xmath77 .",
    "we will prove -hardness by reduction from # 3reg - bip - match .",
    "given @xmath20 , a @xmath33-regular bipartite graph on @xmath3 vertices , we reduce it to @xmath66 .",
    "the cross edges and vertex triangle edges of @xmath66 each participate in two triangles , and the connecting edges each participate in only one triangle .",
    "however , the whole graph has @xmath75 triangles .",
    "so , if a triangle - free subgraph of @xmath66 can be obtained by deleting @xmath78 edges from @xmath66 , leaving @xmath79 edges behind , then we must only delete cross edges and vertex triangle edges , destroying two triangles per deleted edge",
    ". there can be no triangle - free subgraphs with fewer edge deletions .    based on this",
    ", we can show that the perfect matchings of @xmath20 are in one - to - one correspondence with the @xmath79-edge maximum triangle - free subgraphs of @xmath66 :    * suppose we are given a perfect matching in @xmath20 .",
    "if @xmath70 and @xmath76 are not matched , delete the cross edge for @xmath80 and @xmath68 .",
    "if @xmath70 and @xmath76 are matched , then for each of @xmath80 and @xmath68 delete the vertex triangle edge adjacent to both the @xmath81 cross and connecting edges .",
    "after these deletions the graph @xmath66 has lost @xmath78 edges and is triangle free . *",
    "suppose we are given a maximum size triangle free subgraph of @xmath66 .",
    "because there is a perfect matching in every regular bipartite graph , this subgraph must have exactly the size that a subgraph generated as above from a perfect matching would have : @xmath79 edges in the subgraph after the deletion of @xmath78 edges from @xmath66 .",
    "therefore , the only edges that could have been deleted are cross and connecting edges .",
    "observe that if one connecting edge has been deleted then so to must its pair in order to destroy the remaining connecting triangle while continuing to destroy two triangles per deleted edge . by similar reasoning , at most one edge from each vertex triangle could have been deleted .",
    "therefore the pairs of connecting edges that have been deleted determine a perfect matching .",
    "thus , this reduction is parsimonious , and # tri - free is -complete .",
    "[ thm : ergm - p - sharp ] unless @xmath82 , there can be no polynomial time algorithm for ergm - partition .",
    "again we take an instance of # tri - free and use the @xmath83 with @xmath84 this time . by , if @xmath45 is the number of triangle free subgraphs with @xmath46 edges , then the integer part of @xmath29 can be written in base @xmath47 as @xmath85 .",
    "the sum of the digits from @xmath86 to @xmath87 is equal to the number of triangle free subgraphs with greater than or equal to @xmath32 edges .",
    "thus , if we could compute @xmath29 we could determine this number in polynomial time , implying that @xmath82 .",
    "[ thm : ergm - drawing ] unless @xmath6 , there is no randomized polynomial algorithm for generating random graphs whose output distribution is within total variation distance @xmath2 of a given ergm with variable weights .",
    "suppose there was such an algorithm , @xmath88 .",
    "then for some @xmath20 and @xmath32 , an instance of tri - free , we can construct the corresponding @xmath83 with @xmath89 . then running @xmath88 on this ergm",
    ", we can verify whether or not the outputted graph is a triangle free subgraph with at least @xmath32 edges , output @xmath25 if the verification succeeds , or output @xmath24 if it fails .",
    "if @xmath20 has no @xmath32-edge triangle - free subgraph then this procedure will output one with @xmath90 probability . on the other hand",
    "if there is such a subgraph , then the valid subgraphs have a @xmath2 fraction of the ergm s probability and with high probability @xmath88 will output one of them .",
    "thus if there is such an algorithm to generate random graphs then we can use it to show that @xmath6 .",
    "in this section we prove a dichotomy theorem that describes the hardness of computing ergm partition functions when the set of features only consists of subgraph indicators .",
    "suppose we are given a set @xmath91 of graphs , isomorphic copies of which are to be used as ( heterogeneous ) features of an ergm .",
    "then , as we show , if all graphs in @xmath91 have at most two vertices , then the partition function @xmath29 of all ergms using @xmath91 as features can be computed in polynomial time . however",
    ", if @xmath91 contains a graph with three or more vertices , then it is @xmath0-hard to compute @xmath29 for ergms using features from @xmath91 .",
    "this demonstrates that our results on the hardness of ergms are not specific to triangle features : the hardness results that we have proven using triangles can not be avoided by replacing the triangles by a more clever choice of complex subgraph features .",
    "we prove this result using a feature replacement strategy , in which we use a combination of heterogeneous weights on larger subgraphs to simulate weights on smaller subgraphs . in this way , hardness results for all larger features follow from basic hardness results for two three - vertex features : triangles ( the main feature for our previous hardness results ) or three - vertex paths .    for this section",
    "we restrict the features for the ergms to indicator and count functions for specific subgraphs from a set @xmath91 . without loss of generality",
    "we can assume that the ergms under consideration include a feature for each subgraph isomorphic to a graph in @xmath91 , as missing features can be handled by giving them weight  @xmath24 .",
    "@xmath91-ergm - partition for a given set @xmath91 of graphs    input : an ergm , @xmath30 , whose features are subgraph indicators and counts of graphs in @xmath91    output : the partition function , @xmath29 , for @xmath30    [ lem : ergm - two - easy ] let @xmath91 be a set of graphs to be used to define the features for an ergm . if @xmath91 contains only graphs on two or fewer vertices , then @xmath91-ergm - partition can be solved in polynomial time .",
    "the only nontrivial graphs that @xmath91 can contain are @xmath92 ( a single edge ) and its complement @xmath93 ( the empty graph on two vertices ) . without loss of generality we assume that @xmath91 contains both of these graphs . given an ergm @xmath30 , and a potential edge , @xmath94",
    ", we define the @xmath95 to be the sum of two terms : the weight of the indicator function that tests whether @xmath46 and @xmath96 induce a @xmath92 subgraph , and the weight of the count function for @xmath92 .",
    "symmetrically , we define @xmath97 to be the sum of two terms : the weight of the indicator function that tests whether @xmath46 and @xmath96 include a @xmath93 subgraph , plus the weight of the count function for @xmath93 . then @xmath98 to compute this value , first compute @xmath99 and , for each edge @xmath100 , define @xmath101 . then @xmath102 thus if @xmath91 contains only graphs on two vertices , we can compute @xmath29 in polynomial time by computing @xmath103 and @xmath104 .    for a graph @xmath8 with @xmath32 vertices ,",
    "@xmath105 an induced subgraph of @xmath8 with @xmath106 vertices , an ergm @xmath30 , and a weight @xmath107 , we define the _ feature replacement _ of @xmath105 with @xmath8 in @xmath30 to be a new ergm , defined as follows .",
    "the vertex set of the new ergm will include all the vertices of @xmath30 together with some new vertices added in the construction .",
    "if @xmath30 includes features that are not isomorphic to @xmath105 , these same features continue to exist in the new ergm . for each indicator feature of a subgraph in @xmath30 that is isomorphic to @xmath105 , we perform the following steps :    1 .",
    "add @xmath32 additional vertices to the new ergm and pair @xmath106 of them up with the @xmath106 vertices of the subgraph of type @xmath105 .",
    "2 .   label the @xmath32 new vertices of the ergm @xmath108 , @xmath109 , @xmath110 , and @xmath111 and the @xmath106 original vertices @xmath112 , @xmath113 , @xmath110 , and @xmath114 such that the pair of @xmath115 is @xmath116 .",
    "label the vertices of @xmath8 in the same way .",
    "3 .   add a new indicator feature , with weight @xmath117 , that matches subgraphs isomorphic to @xmath8 that are induced by the set of vertices @xmath118 with the numbering of these vertices matching the numbering of the isomorphic copy of  @xmath8 . here",
    "@xmath107 is a parameter to be specified later .",
    "4 .   for each @xmath46 from @xmath25 to @xmath106 , add another indicator feature , with weight @xmath117 , matching subgraphs isomorphic to @xmath8 that are induced by the set of vertices @xmath119 .",
    "add one more indicator feature , with the same weight as indicator feature from @xmath30 , matching subgraphs isomorphic to @xmath8 that are induced by the set of vertices @xmath120 , i.e. with all the first @xmath106 vertices swapped out for their pair in the original vertices .    to handle features that count the number of subgraphs isomorphic to @xmath105",
    ", we run the same process for each of the @xmath121 possible induced subgraphs of this type .",
    "shows this feature replacement process for replacing @xmath122 with a wheel graph on @xmath123 vertices .",
    "[ lem : feature - replace ] given two graphs @xmath8 and @xmath105 , where @xmath105 is an induced subgraph of @xmath8 , the partition function of an ergm that has only integer weights and uses @xmath105 can be computed from the partition function of an ergm that uses @xmath8 instead of @xmath105 .",
    "first let @xmath124 be the sum of all positive weights in the ergm that uses @xmath105 and @xmath125 be the absolute value of the sum of all negative weights .",
    "we know the digits of @xmath29 for this ergm are within @xmath125 digits of the right of the decimal point and @xmath124 digits to the left of the decimal point .",
    "use feature replacement to replace @xmath105 with @xmath8 using a weight of @xmath126 .",
    "the ergm obtained from feature replacement has polynomially many new vertices and indicator features . in this ergm ,",
    "there exist states in which all of the indicator features with weight @xmath117 are true ; let @xmath127 be the number of these indicator features .",
    "then for each of these states , the density of the graph will include a factor of @xmath128 for those features , while all the other states will omit at least one factor of @xmath128 .",
    "thus , by looking at the binary digits of the partition function extending from the @xmath128 bit upwards ( as seen in ) , we can recover the subset of the partition function generated only by the states in which these indicator features are all true .",
    "for these states , the remaining terms in the weight of each state coincide with the corresponding terms in the weights of the states of the original ergm .",
    "[ lem : ergm - three - hard ] let @xmath91 be a set of graphs containing any graph @xmath8 on three or more vertices .",
    "then @xmath91-ergm - partition is -hard .",
    "@xmath8 must contain at least one of @xmath122 , @xmath129 , @xmath130 , or @xmath131 as an induced subgraph ; we handle each case separately .",
    "the cases of @xmath130 or @xmath131 can be transformed into the cases of @xmath129 or @xmath122 by complementing all of the features used in the ergm ( keeping the weights the same ) , which produces an ergm whose probability on any graph is the same as the probability of the original ergm on the complementary graph . in particular , this transformation leaves the partition function unchanged .",
    "thus , we need only consider the cases of @xmath122 and @xmath129 .",
    "if @xmath8 contains @xmath122 as an induced subgraph , we proceed in the same manner as .",
    "however , we have to simulate the weights on triangle and edge subgraphs using indicator features for copies of  @xmath8 .",
    "to do so we observe that because @xmath8 contains @xmath122 it also contains @xmath92 and so two applications of allow us to reduce the instance of # 3reg - bip - match to an ergm using subgraph indicator features of graphs in @xmath91 .",
    "if @xmath8 contains @xmath129 as an induced subgraph , we instead reduce from # matching . given a bipartite graph , @xmath20 , as input",
    ", we create for each edge in @xmath20 an indicator feature for that edge with weight @xmath132 . for edges not in @xmath20 and any @xmath129 in @xmath20 , we create an indicator feature for that subgraph with weight @xmath133 . by an argument similar to , if @xmath45 is the number of matchings of @xmath20 with @xmath46 edges , then the partition function in base @xmath134 is @xmath135 .",
    "thus @xmath136,the @xmath3-th digit of @xmath29 , counts the number of perfect matchings . now using",
    "we can reduce this ergm using @xmath129 and @xmath92 to another ergm using @xmath8 .",
    "[ thm : ergm - dichotomy ] given a set of subgraphs , @xmath91 .",
    "if @xmath91 contains a graph on three or more vertices , @xmath91-ergm - partition is -hard and can be computed in polynomial time otherwise .",
    "the result follows from and .",
    "we have shown ergm - partition to be -hard and inapproximable via reductions that are very close to the natural usage of ergms .",
    "additionally , we showed that the hardness of ergm partition function computation can be classified by their subgraph features where ergms that use subgraphs with more than two vertices lead to hard to compute partition functions .",
    "all but the simplest of ergms are fundamentally difficult to work with and if the ability to sample from the distribution is required , then different distributions on graphs are necessary ."
  ],
  "abstract_text": [
    "<S> we investigate the computational complexity of the exponential random graph model ( ergm ) commonly used in social network analysis . </S>",
    "<S> this model represents a probability distribution on graphs by setting the log - likelihood of generating a graph to be a weighted sum of feature counts . </S>",
    "<S> these log - likelihoods must be exponentiated and then normalized to produce probabilities , and the normalizing constant is called the _ partition function_. </S>",
    "<S> we show that the problem of computing the partition function is @xmath0-hard , and inapproximable in polynomial time to within an exponential ratio , assuming @xmath1 . </S>",
    "<S> furthermore , there is no randomized polynomial time algorithm for generating random graphs whose distribution is within total variation distance @xmath2 of a given ergm . </S>",
    "<S> our proofs use standard feature types based on the sociological theories of assortative mixing and triadic closure . </S>"
  ]
}