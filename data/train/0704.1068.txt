{
  "article_text": [
    "several cars are now fitted with a global positioning system ( gps ) terminal which gives the exact geographic location of the vehicle on the surface of the earth .",
    "all of these gps terminals are now endowed with detailed road network databases which allow them to compute the shortest path ( in terms of distance ) between the current vehicle location ( source ) and another location given by the driver ( destination ) .",
    "naturally , drivers are more interested in the source - destination _ fastest _ path ( i.e. shortest in terms of travelling time ) .",
    "the greatest difficulty to overcome is that the travelling time depends heavily on the amount of traffic on the chosen road .",
    "currently , some state agencies as well as commercial enterprises are charged with monitoring the traffic situation in certain pre - determined strategic places . furthermore , traffic reports are collected from police cars as well as some taxi services . the dynamic traffic information , however , is as yet limited to a small proportion of the whole road network .",
    "the problem faced by traffic information providers is currently that of offering gps terminal enabled drivers a source - destination path subject to the following constraints : ( a ) the path should be fast in terms of travelling time subject to dynamic traffic information being available on part of the road network ; ( b ) traffic information data are updated approximately each minute ; ( c ) answers to path queries should be computed in real time . given the data communication time and other overheads , constraint ( c ) practically asks for a shortest path computation time of no more than 1 second .",
    "constraint ( b ) poses a serious problem , because it implies that the fastest source - destination path may change each minute , giving an on - line dimension to the problem .",
    "a source - destination query spanning several hundred kilometers , which would take several hours to travel , would need a system recomputing the fastest path each minute ; this in turn would mean keeping track of each query for potentially several hours .",
    "as the estimated computational cost of this requirement is superior to the resources usually devoted to the task , a system based on dynamic traffic information will not , in practice , ever compute the on - line fastest path . as a typical national road network for a large european country usually counts",
    "several million junctions and road segments , constraint ( c ) implies that a straight dijkstra s algorithm is not a viable option . in view of constraint ( a ) , in our solution method",
    "fast paths can be efficiently computed by means of a point - to - point hierarchy - based shortest path algorithm for static large - scale networks , where the hierarchy is built using static information and each query is answered on the dynamically evaluated network .",
    "this paper makes two original scientific contributions ( i ) we extend a known hierarchy - based shortest path algorithm for static large - scale undirected graphs ( the highway hierarchies algorithm @xcite ) to the directed case .",
    "the method has been developed and tested on real road network data taken from the teleatlas france database @xcite .",
    "we note that the original authors of @xcite have extended the algorithm to work on directed graphs in a slightly different way than ours ( see @xcite ) .",
    "( ii ) we propose a method for efficiently finding fast paths on a large - scale dynamic road network where arc travelling times are updated in quasi real - time ( meaning very often but not continuously ) .    in the rest of this section",
    ", we discuss the state of the art as regards shortest path algorithms in dynamic and large - scale networks , and we describe the proposed solution .",
    "the rest of the paper is organized as follows . in section [ schultes ]",
    "we briefly review the highway hierarchy - based shortest path algorithm for static large - scale networks , which is one of the important building blocks of our method , and discuss the extension of the existing shortest - path algorithm to the directed case .",
    "section [ compres ] discusses the computational results , and section [ conclusion ] concludes the paper .",
    "the problem of computing fastest paths in graphs whose arc weights change over time is termed the dynamic shortest path problem ( dspp ) @xcite .",
    "the work that laid the foundations for solving the dspp is @xcite ( a good review of this paper can be found in @xcite , p.  407 ) : dijkstra s algorithm is extended to the dynamic case through a recursion formula based on the assumption that the network @xmath0 has the fifo property : for each pair of time instants @xmath1 with @xmath2 : @xmath3 where @xmath4 is the travelling time on the arc @xmath5 starting from @xmath6 at time @xmath7 .",
    "the fifo property is also called the _ non - overtaking property _ , because it basically says that if @xmath8 leaves @xmath6 at time @xmath7 and @xmath9 at time @xmath10 , @xmath9 can not arrive at @xmath11 before @xmath8 using the arc @xmath5 .",
    "the shortest path problem in dynamic fifo networks is therefore polynomially solvable @xcite , even in the presence of traffic lights @xcite .",
    "dijkstra s algorithm applied to dynamic fifo networks has been optimized in various ways @xcite ; the @xmath12 one - to - one shortest path algorithm has also been extended to dynamic networks @xcite .",
    "the dspp is np - hard in non - fifo networks @xcite .",
    "although in this paper we do not assume any knowledge about the statistical distribution of the arc weights in time , it is worth mentioning that a considerable amount of work has been carried out for computing shortest paths in stochastic networks .",
    "a good review is @xcite .",
    "the computation of exact shortest paths in large - scale static networks has received a good deal of attention @xcite .",
    "the established practice is to delegate a considerable amount of computation to a preprocessing phase ( which may be very slow ) and then perform fast source - destination shortest path queries on the pre - processed data .",
    "recently , the concept of _ highway hierarchy _ was proposed in @xcite .",
    "a highway hierarchy of @xmath13 levels of a graph @xmath0 is a sequence of graphs @xmath14 with vertex sets @xmath15 and arc sets @xmath16 ; each arc has maximum hierarchy level ( the maximum @xmath17 such that it belongs to @xmath18 ) such that for all pairs of vertices there exists between them a shortest path @xmath19 , where @xmath20 are the consecutive path arcs , whose search level first increases and then decreases , and each arc s search level is not greater than its maximum hierarchy level .",
    "a more precise description is given in section [ schultes ] .",
    "the @xmath12 algorithm has also been extended to use a concept , _ reach _ , which has turned out to be closely related to highway hierarchies ( see @xcite ) .",
    "the solution method we propose in this paper efficiently finds fast paths by deploying dijkstra - like queries on a highway hierarchy built using the static arc weights found in the road network database , but used with the dynamic arc weights reflecting quasi real - time traffic observations .",
    "this implies using two main building blocks : highway hierarchy construction ( the highway hierarchies algorithm extended to directed graphs ) , and the query algorithm .",
    "consequently , the implementation is a complex piece of software whose architecture has been detailed in the appendix .    *",
    "_ highway hierarchy_. apply the directed graph extension of the hh algorithm ( see section [ schultes ] ) to construct a highway hierarchy using the static road network information",
    ". in particular , arc travelling times are average estimations found in the database .",
    "this is a preprocessing step that has to be performed only when the topology of the road network changes .",
    "the cpu time taken for this step is not an issue . *",
    "_ efficient path queries_. efficiently address source - destination fast path requests by employing a multi - level bidirectional dijkstra s algorithm on the dynamically evaluated graph using the highway hierarchy structure constructed during preprocessing .",
    "this algorithm is carried out each time a path request is issued ; its running time must be as fast as possible , in any case not over 1 second .",
    "the highway hierarchies algorithm @xcite is a fast , hierarchy - based shortest paths algorithm which works on static undirected graphs .",
    "hh algorithm is specially suited to efficiently finding shortest paths in large - scale networks .",
    "since the hh algorithm is one of our main building blocks , we briefly review the necessary concepts .",
    "the highway hierarchies algorithm is heavily based on dijkstra s algorithm @xcite , which finds the tree of all shortest paths from a root vertex @xmath21 to all other vertices @xmath22 of a weighted digraph @xmath0 by maintaining a heap @xmath23 of _ reached _ vertices @xmath6 with their associated ( current ) shortest path length @xmath24 ( elements of the heap are denoted by @xmath25 $ ] .",
    "vertices which have not yet entered the heap ( i.e.  which are still unvisited ) are _ unreached _ , and vertices which have already exited the heap ( i.e.  for which a shortest path has already been found ) are _ settled_. dijkstra s algorithm is as follows .    1 .",
    "let @xmath26\\}$ ] .",
    "2 .   if @xmath27 , terminate .",
    "3 .   let @xmath6 be the vertex in @xmath23 with minimum associated path length @xmath24 .",
    "4 .   let @xmath28",
    ". 5 .   for all @xmath29 , if @xmath30 then let @xmath31\\ } ) \\cup \\{[v , c(u)+\\tau_{uv}]\\}$ ] . 6 .",
    "go to 2 .    a _ bidirectional _ dijkstra algorithm works by keeping track of two dijkstra search scopes : one from the source , and one from the destination working on the reverse graph . when the two search scopes meet it can be shown that the shortest path passes through a vertex that has been reached from both nodes ( @xcite , p.  30 ) .",
    "a set of shortest paths is _ canonical _ if , for any shortest path @xmath32 in the set , the canonical shortest path between @xmath33 and @xmath34 is a subpath of @xmath35 .",
    "the hh algorithm works in two stages : a time - consuming pre - processing stage to be carried out only once , and a fast query stage to be executed at each shortest path request .",
    "let @xmath36 .",
    "during the first stage , a highway hierarchy is constructed , where each hierarchy level @xmath37 , for @xmath38 , is a modified subgraph of the previous level graph @xmath39 such that no canonical shortest path in @xmath39 lies entirely outside the current level for all sufficiently distant path endpoints : this ensures that all queries between far endpoints on level @xmath40 are mostly carried out on level @xmath41 , which is smaller , thus speeding up the search .",
    "each shortest path query is executed by a multi - level bidirectional dijkstra algorithm : two searches are started from the source and from the destination , and the query is completed shortly after the search scopes have met ; at no time do the search scopes decrease hierarchical level . intuitively , path optimality is due to the fact that by hierarchy construction there exist no canonical shortest path of the form @xmath42 , where @xmath43 and the search level of @xmath44 is lower than the level of both @xmath45 ; besides , each arc s search level is always lower or equal to that arc s maximum level , which is computed during the hierarchy construction phase and is equal to the maximum level @xmath41 such that the arc belongs to @xmath37 .",
    "the speed of the query is due to the fact that the search scopes occur mostly on a high hierarchy level , with fewer arcs and nodes than in the original graph .      as the construction of the highway hierarchy is the most complicated part of hh algorithm , we endeavour to explain its main traits in more detail . given a local extensionality parameter @xmath23 ( which measures the degree at which shortest path queries are satisfied without stepping up hierarchical levels ) and the maximum number of hierarchy levels @xmath13 , the iterative method to build the next highway level @xmath46 starting from a given level graph @xmath37 is as follows :    1 .   for each @xmath22",
    ", build the neighbourhood @xmath47 of all vertices reached from @xmath11 with a simple dijkstra search in the @xmath41-th level graph up to and including the @xmath23-st settled vertex .",
    "this defines the local extensionality of each vertex , i.e. the extent to which the query `` stays on level @xmath41 '' .",
    "2 .   for each @xmath22 : 1 .   build a partial shortest path tree @xmath48 from @xmath11 , assigning a status to each vertex . the initial status for @xmath11",
    "is `` active '' .",
    "the vertex status is inherited from the parent vertex whenever a vertex is reached or settled . a vertex @xmath49 which is settled on the shortest path @xmath50 ( where @xmath51 ) becomes `` passive ''",
    "if [ psptree ] @xmath52 the partial shortest path tree is complete when there are no more active reached but unsettled vertices left .",
    "2 .   from each leaf @xmath7 of @xmath48 ,",
    "iterate backwards along the branch from @xmath7 to @xmath11 : all arcs @xmath53 such that @xmath54 and @xmath55 , as well as their adjacent vertices @xmath56 , are raised to the next hierarchy level @xmath46 .",
    "[ lifthigher ] 3 .",
    "select a set of _ bypassable _ nodes on level @xmath46 ; intuitively , these nodes have low degree , so that the benefit of skipping them during a search outweights the drawbacks ( i.e. , the fact that we have to add shortcuts to preserve the algorithm s correctness ) . specifically , for a given set @xmath57 of bypassable nodes , we define the set @xmath58 of shortcut edges that bypass the nodes in @xmath59 : for each path @xmath60 with @xmath61 and @xmath62 , the set @xmath58 contains an edge @xmath63 with @xmath64 . the core @xmath65 of level @xmath46 is defined as:@xmath66 , @xmath67 .    the result of the contraction is the contracted highway network @xmath68 , which can be used as input for the following iteration of the construction procedure .",
    "it is worth noting that higher level graphs may be disconnected even though the original graph is connected .",
    "[ ex1 ] take the directed graph @xmath0 given in fig .",
    "[ ex1fig ] ( above ) .",
    "we are going to construct a road hierarchy with @xmath69 and @xmath70 on @xmath71 .",
    "first we compute @xmath72 for all @xmath73 .    [",
    "cols=\"<,<\",options=\"header \" , ]",
    "we present a heuristic algorithm for efficiently finding fast paths in large - scale partially dynamically weighted road networks , and benchmark its application on real - world data .",
    "the proposed solution is based on fast multi - level bidirectional dijkstra queries on a highway hierarchy built on the statically weighted version of the network using the highway hierarchies algorithm , and deployed using the dynamic arc weights .",
    "computational results show that , although with no guarantee of optimality , the proposed solution works well in practice , computing near - optimal fast paths quickly enough for our purposes .",
    "we are grateful to ms .",
    "annabel chevaux , mr .",
    "benjamin simon and mr .",
    "benjamin becquet for invaluable practical help with oracle and the real data , and to the rest of the mediamobile s energetic and youthful staff for being always friendly and helpful .",
    "chan and n.  zhang .",
    "finding shortest paths in large network systems . in _",
    "gis 01 : proceedings of the 9th acm international symposium on advances in geographic information systems _ , pages 160166 , new york , ny , usa , 2001 .",
    "acm press .",
    "p.  sanders and d.  schultes .",
    "highway hierarchies hasten exact shortest path queries . in g.  stlting  brodal and s.  leonardi , editors , _ esa _ , volume 3669 of _ lecture notes in computer science _ ,",
    "pages 568579 .",
    "springer , 2005 ."
  ],
  "abstract_text": [
    "<S> efficiently computing fast paths in large - scale dynamic road networks ( where dynamic traffic information is known over a part of the network ) is a practical problem faced by several traffic information service providers who wish to offer a realistic fast path computation to gps terminal enabled vehicles . </S>",
    "<S> the heuristic solution method we propose is based on a highway hierarchy - based shortest path algorithm for static large - scale networks ; we maintain a static highway hierarchy and perform each query on the dynamically evaluated network .    </S>",
    "<S> fast paths in large - scale dynamic road networks    * _ lix , cole polytechnique , f-91128 palaiseau , france _ + email:link:{giacomon,baptiste,dk,liberti}@lix.polytechnique.fr[\\{giacomon,baptiste,dk,liberti}@lix.polytechnique.fr ] * _ mediamobile , 10 rue doradour sur glane , paris , france _ + email:link:{giacomo.nannicini,gilles.barbier,contact}@v-trafic.com[\\{giacomo.nannicini,gilles.barbier,contact}@v-trafic.com ] </S>"
  ]
}