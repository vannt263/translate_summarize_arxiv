{
  "article_text": [
    "codes are linear block codes that potentially achieve the limit of shannon s famous coding theorem and thus reveal excellent error - correcting properties under iterative decoding .",
    "an important and challenging task for designing ldpc codes is to lower the so - called _ error - floors_. this phenomenon is a significant flattening of the _ bit - error - rate _ ( ber ) curve beyond a certain _ signal - to - noise - ratio _ ( snr ) .",
    "it has been discovered that error - floors are caused by special substructures in the code s _ factor ( or tanner ) graph _ that act as internal states in which the iterative decoder can be trapped .",
    "richardson @xcite introduced the notion of _ trapping sets _ to describe such internal states for iterative decoders .",
    "depending on the channel and the iterative decoding algorithm , trapping sets have quite different characteristics .",
    "over the _ binary erasure channel _ ( bec ) , trapping sets have a purely combinatorial character and are known as _ stopping sets _ ( e.g. @xcite ) , which completely determine the decoding performance over this channel @xcite . for more complex non - erasure channels such as the awgn channel ,",
    "trapping sets have a more subtle nature and can not easily be described by a simple combinatorial notion such as stopping sets . however",
    ", a subclass of the occurring trapping sets over the awgn channel with standard spa decoding can be described by combinatorial objects called _ ( fully ) absorbing sets _ which has been introduced in @xcite as special subgraphs of a code s factor graph .",
    "it has been demonstrated by extensive hardware simulations @xcite that these entities are the main contributors to the error - floors over the awgn channel under spa decoding .",
    "it is therefore an important step to identify the dominant absorbing sets that may occur in the factor graph of an ldpc code and to eliminate the harmful ones in order to improve the decoding performance in the error - floor region .",
    "recent papers have proposed methods to characterize and improve the absorbing set spectrum of certain ldpc codes @xcite .",
    "for instance , the work of dolecek et al .",
    "@xcite provides an extensive analysis of the absorbing sets occurring in a family of array - based ldpc codes .",
    "we also emphasize @xcite which presents a powerful approach to eliminate dominant absorbing sets in a wide class of circulant - based ldpc codes .    in the present paper",
    ", we exploit a special class of transversial designs that arise from cyclic - structured mols in order to design ldpc codes with low error - floors over the awgn channel .",
    "these codes provide a simple setting to investigate and eliminate harmful absorbing sets in a closed algebraic form . in @xcite",
    "we have demonstrated that this code family can also be utilized to generate ldpc codes with excellent decoding performances over the bec by eliminating the smallest stopping sets .",
    "moreover , we have shown that these codes possess quasi - cyclic structure and thus can be encoded with linear complexity via simple feedback shift registers @xcite . notice that codes based on transversal designs has been first considered and investigated in @xcite and @xcite in terms of _ partial geometries_. it is worth noting here that absorbing sets are stable under bit - flipping decoding and thus also greatly contribute to the decoding failures over the binary symmetric channel ( bsc ) .",
    "therefore , our approach should also produce excellent ldpc codes over the bsc .",
    "the paper is organized as follows : in section  [ preliminaries ] , we give a summarization of the theoretical concepts that are important for our purposes . in section  [ section :",
    "classification ] , we elaborate a classification of the smallest absorbing set candidates that typically occur in the factor graph of ldpc codes based on transversal designs . in section  [ codes_on_simple_structured_mols ] ,",
    "we thoroughly describe the construction of ldpc codes that arise from sets of cyclic - structured mols and investigate the properties of these codes . based on this class of codes and the absorbing set classification of section  [ section : classification ] ,",
    "we develop a method to eliminate harmful absorbing sets in section  [ section : elimination ] and present the main results in section  [ section : main_results ] . in section  [ simulations ] , we demonstrate the strength of our elimination technique by extensive simulations and conclude the paper in section  [ conclusion ] .",
    "a _ latin square _ @xmath0 of order @xmath1 is an array of @xmath2 cells , where each row and each column contains every symbol of an @xmath1-set @xmath3 exactly once @xcite .",
    "let @xmath4 $ ] denote the symbol at row @xmath5 and column @xmath6 , where @xmath7 and @xmath8 are @xmath1-sets indexing the rows and columns of @xmath0 , respectively .",
    "two latin squares @xmath9 and @xmath10 of order @xmath1 are _ orthogonal _ , if they share a common row and column set @xmath7 and @xmath8 , respectively , and if the ordered pairs @xmath11,l_2[x , y])$ ] are unique for all @xmath12 . in other words",
    ", there can not be two cell positions @xmath13 $ ] and @xmath14 $ ] such that @xmath15=l_1[x_2,y_2]$ ] and @xmath16=l_2[x_2,y_2]$ ] .",
    "a set of latin squares @xmath17 is called _ mutually orthogonal _ , if for every @xmath18 , @xmath19 and @xmath20 are orthogonal .",
    "these are also referred to as _",
    "mols _ , _ mutually orthogonal latin squares_.      a _ transversal design _ td@xmath21 of order ( or group size ) @xmath1 and block size @xmath22 is a triple @xmath23 , where    1 .",
    "@xmath24 is a set of @xmath25 points . 2 .",
    "@xmath26 is a partition of @xmath24 into @xmath22 classes of size @xmath1 , called _",
    "groups_. 3 .",
    "@xmath27 is a collection of @xmath22-subsets of @xmath24 , called _",
    "blocks_. 4 .",
    "every unordered pair of points from @xmath24 is contained either in exactly one group or in exactly one block ( cf .",
    "@xcite ) .",
    "it follows from ( 1)-(4 ) that any point of @xmath24 occurs in exactly @xmath1 blocks and that @xmath28 .",
    "furthermore , axiom ( 4 ) implies that every block of @xmath27 consists of exactly one point per group .",
    "[ equiv_mols_tds ] for @xmath29 , the existence of a set of @xmath30 mutually orthogonal latin squares ( mols ) of order @xmath1 is equivalent to the existence of a td@xmath21 @xcite .",
    "we will outline the proof of this known result , since it is important for the understanding of our paper .",
    "let @xmath31 be @xmath32 mols with symbol sets @xmath33 , and with common row and column sets @xmath7 and @xmath8 , respectively .",
    "we may assume that the sets @xmath34 are pairwise disjoint , which can easily be achieved by renaming the elements .",
    "then we obtain a td@xmath21 with points @xmath35 , groups @xmath36 and blocks @xmath37 , \\hdots , l_{m}[x , y]\\ } : ( x , y)\\in x\\times y\\}$ ] .",
    "this process can be reversed to recover a set of @xmath38 mols from a td@xmath21 for @xmath39 .",
    "a transversal design , denoted by @xmath40 , can be described by a binary @xmath41 _ incidence matrix _",
    "@xmath42 with rows indexed by the points of @xmath24 , columns indexed by the blocks of @xmath27 , and @xmath43    fig .",
    "[ fig : mols ] depicts the incidence matrix of the transversal design td@xmath44 which is equivalent to the orthogonal latin squares given in the same figure by using the correspondence detailed in the proof of theorem  [ equiv_mols_tds ] .",
    "let @xmath40 denote a td@xmath21 with points @xmath24 and blocks @xmath27 .",
    "the incidence matrix @xmath42 can directly be used as the parity - check matrix @xmath45 of a _ td ldpc code _ , such that the @xmath46 points correspond to the parity - check equations ( rows of @xmath45 ) and the @xmath28 blocks correspond to the code bits ( columns of @xmath45 ) .",
    "the resulting td ldpc code has block length @xmath47 , rate @xmath48 , and a parity - check matrix of column weight @xmath22 and row weight @xmath1 .",
    "the column weight @xmath22 corresponds to the block size of @xmath40 and the row weight @xmath1 arises from the fact that every point is incident to exactly @xmath1 blocks .",
    "the associated factor ( or tanner ) graph of @xmath45 is free of 4-cycles and has girth @xmath49 ( e.g.  @xcite ) .",
    "note that these codes were first considered in @xcite as a subclass of codes from partial geometries .",
    "a _ set system _ @xmath50 consists of a point set @xmath51 and a block set @xmath52 which is a family of subsets of @xmath51 . for a consistent representation ,",
    "we only allow set systems where @xmath53 such that each point must be contained in at least one block .",
    "the _ size _ of @xmath50 is given by the number of blocks of @xmath52 .",
    "the _ degree _ of a point is the number of blocks containing the point and by @xmath54 we mean the subset of points of @xmath51 having odd degree .",
    "two set systems @xmath50 and @xmath55 are _ isomorphic _ , if there exists a bijection between @xmath51 and @xmath56 that maps @xmath52 to @xmath57 .",
    "given a transversal design @xmath40 with points @xmath24 and blocks @xmath27 , a set system @xmath50 is called a _ configuration _ of @xmath40 if @xmath58 and @xmath59 .",
    "every set system can be equivalently described by a matrix which allows a convenient representation of the system .",
    "more precisely , a set system is equivalent to a @xmath60 matrix where the entry at @xmath61 is one if the @xmath62-th point of @xmath51 is in the @xmath63-th block of @xmath52 , else zero .",
    "let @xmath65 be a set of @xmath64 colours .",
    "a _ _ of a set system @xmath50 is a mapping @xmath66 such that all points of a block of @xmath52 are coloured with a different colour of @xmath67 . for each @xmath68 , the set @xmath69",
    "is called a _",
    "colour class_. for any @xmath64-colouring @xmath70 , we use the ordered set @xmath71 as a short notation of this colouring .",
    "if a set system has at least one @xmath64-colouring , we call it _",
    "@xmath64-colourable_. clearly , there can be different @xmath64-colourings of a set system .",
    "let @xmath50 and @xmath55 be two set systems with @xmath64-colourings @xmath70 and @xmath72 , respectively .",
    "then , @xmath73 and @xmath74 are isomorphic , if there are bijections @xmath75 and @xmath76 such that @xmath77 with @xmath78 and @xmath79 .",
    "[ example : colouring_set_system ] let @xmath80 be a set system with point set @xmath81 and block set @xmath82 as depicted in fig .",
    "[ fig : set_system ] , and let @xmath83 be a set of four colours",
    ". then , there are two non - isomorphic 4-colourings of @xmath84 , @xmath85    the colour classes are given by @xmath86 and @xmath87 for the first colouring @xmath88 , and @xmath89 and @xmath90 for the second colouring @xmath91 .",
    "it can easily be seen that the points of any block of @xmath52 are contained in different colour classes and thus are coloured uniquely within a block .",
    "the short notations of the colourings are @xmath92 and @xmath93 , respectively .",
    "the parity - check matrix @xmath45 of an ldpc code can be equivalently represented by its _ factor graph _ @xmath94 .",
    "more precisely , let @xmath95 denote a bipartite graph , where    * the nodes @xmath96 are associated with the rows of @xmath45 , * the nodes @xmath97 are associated with the columns of @xmath45 , * the edge set @xmath98 is given by the structure of @xmath45 .",
    "in particular , an undirected edge @xmath99 exists iff @xmath100 .",
    "the elements of @xmath96 are called _ bit nodes _ , since they correspond to the code bits , and the elements of @xmath97 are called _ check nodes _ , since they correspond to the parity - check equations of the code .",
    "let @xmath95 be the factor graph of a given ldpc code with parity - check matrix @xmath45 .",
    "for any subset @xmath101 , let @xmath102 be the set of neighboring check nodes of @xmath7 in @xmath97 , i.e. , @xmath103 .",
    "we further subdivide @xmath102 into the sets of check nodes with even and odd degrees , denoted by @xmath104 and @xmath105 , respectively .",
    "furthermore , we denote @xmath106 as the set of adjacent edges of @xmath7 in @xmath98 , i.e. , @xmath107 .",
    "[ def : absorbing_set ] an _ @xmath108 absorbing set _ of @xmath94 , denoted by @xmath109 , is a subset @xmath110 with @xmath111 and @xmath112 , such that each node of @xmath109 has strictly fewer neighbors in @xmath113 than in @xmath114 @xcite .",
    "we say that @xmath115 is the _ size _ of the absorbing set and @xmath116 is the _ syndrome_. an @xmath108 absorbing set is an _ @xmath108 fully absorbing set _ if , in addition , all bit nodes in @xmath117 have strictly fewer neighbors in @xmath113 than in @xmath118 .",
    "an absorbing set @xmath109 is @xmath119 , if all check nodes of @xmath120 have degree of at most 2 .",
    "the @xmath121 of @xmath109 , denoted by @xmath122 , is a bipartite subgraph of @xmath94 consisting of the bit nodes @xmath109 , the neighboring check nodes @xmath120 and the adjacent edges @xmath123 .",
    "= [ circle , draw = black , fill = black , minimum size=6pt ] = [ rectangle , draw = black , fill = black , minimum size=8pt ] = [ rectangle , draw = black , fill = white , minimum size=8pt ]    ( b1 ) at ( 0,0 ) ; ( b2 ) at ( @xmath124 ) ; ( b3 ) at ( @xmath125 ) ; ( b4 ) at ( @xmath126 ) ;    ( c1 ) at ( -1.1,-1.8 ) ; ( c2 ) at ( @xmath127 ) ; ( c3 ) at ( @xmath128 ) ; ( c4 ) at ( @xmath129 ) ; ( c5 ) at ( @xmath130 ) ; ( c6 ) at ( @xmath131 ) ; ( c7 ) at ( @xmath132 ) ; ( c8 ) at ( @xmath133 ) ; ( c9 ) at ( @xmath134 ) ; ( c10 ) at ( @xmath135 ) ;    ( b1 ) edge ( c1 ) ; ( b1 ) edge ( c2 ) ; ( b1 ) edge ( c3 ) ; ( b1 ) edge ( c7 ) ;    ( b2 ) edge ( c1 ) ; ( b2 ) edge ( c4 ) ; ( b2 ) edge ( c5 ) ; ( b2 ) edge ( c8 ) ;    ( b3 ) edge ( c2 ) ; ( b3 ) edge ( c4 ) ; ( b3 ) edge ( c6 ) ; ( b3 ) edge ( c9 ) ;    ( b4 ) edge ( c3 ) ; ( b4 ) edge ( c5 ) ; ( b4 ) edge ( c6 ) ; ( b4 ) edge ( c10 ) ;    ( 3,0 ) node[rectangle , rounded corners=0.4 cm , label = above:@xmath109 , minimum height=0.8 cm , minimum width=6.6 cm , draw , dashed ] ; ( 1.15,-1.8 ) node[rectangle , rounded corners=0.4 cm , label = below:@xmath114 , minimum height=0.8 cm , minimum width=5.2 cm , draw , dashed ] ; ( 5.65,-1.8 ) node[rectangle , rounded corners=0.4 cm , label = below:@xmath113 , minimum height=0.8 cm , minimum width=3.4 cm , draw , dashed ] ;    an example of a @xmath136 absorbing set is shown in fig .",
    "[ fig:4_4_absorbing_set ] , where the bit nodes @xmath109 are represented by black circles .",
    "the neighboring check nodes of odd degree @xmath113 are visualized by black squares and the neighboring check nodes with even degree @xmath114 are visualized by white squares .",
    "observe that all bit nodes of @xmath109 are connected with strictly more even - degree check nodes than odd - degree check nodes and thus fulfill the definition of an absorbing set .",
    "absorbing sets are known to be the main cause of decoding errors in the error - floor region of ldpc codes over the agwn channel under spa decoding .",
    "therefore , it is an important step to identify and categorize the most harmful absorbing sets of an ldpc code . in this section ,",
    "we give an exhaustive classification of small absorbing set candidates that may occur in a td ldpc code of column weight 3 and 4 .",
    "absorbing sets are graph - based objects that has been established in the field of coding theory .",
    "however , they have a purely combinatorial nature and thus can be conveniently described from a combinatorial viewpoint .",
    "more precisely , let @xmath40 be a transversal design of block size @xmath22 with point set @xmath24 and block set @xmath27 and let @xmath137 be the corresponding td ldpc code of column weight @xmath22 based on @xmath40 .",
    "[ lemma : set_system_representation ] an absorbing set @xmath109 of @xmath137 can be equivalently described by a set system @xmath50 which is a configuration of @xmath40 , i.e. , @xmath138 and @xmath59 .",
    "then , @xmath50 is called the _ set system representation _ of @xmath109 .    by taking the points and blocks of @xmath40 that correspond to the bit nodes and check nodes of @xmath122 , respectively",
    ", we obtain a set system that is clearly a configuration of @xmath40 .",
    "[ lemma : induced_colouring ] any configuration @xmath50 of @xmath40 has a @xmath22-colouring that is induced by the groups of @xmath40 .",
    "recall that @xmath40 has @xmath22 groups and that every block consists of exactly one point per group . by colouring all points of @xmath51 that lie in the same group of @xmath40 with the same colour and each group with a different colour",
    ", we obtain an @xmath22-colouring of @xmath50 which is induced by @xmath40 .",
    "let @xmath109 be an absorbing set with set system representation @xmath139 and a @xmath22-colouring @xmath140 induced by the groups of @xmath40 . by considering any set system @xmath50",
    ", we say that @xmath109 is of _ type _",
    "@xmath50 , if the set system is isomorphic to @xmath139 .",
    "moreover , by considering any @xmath22-colouring @xmath70 of @xmath50 , we say that @xmath109 is of _ type _",
    "@xmath73 if the triple is isomorphic to @xmath141 .",
    "obviously , @xmath50 and @xmath73 may represent a large number of isomorphic absorbing sets of an ldpc code .",
    "also notice that an absorbing set of type @xmath73 is automatically an absorbing set of type @xmath50 but not vice versa .",
    "[ lemma : combinatorial_constraints_of_absorbing_sets ] by considering an absorbing set of type @xmath50 that occurs in any td ldpc code of column weight @xmath22 , the following combinatorial constraints must be valid :    1 .",
    "each block of @xmath52 contains exactly @xmath22 points .",
    "any two blocks of @xmath52 share at most one point of @xmath51 .",
    "@xmath50 is @xmath22-colourable .",
    "4 .   for every @xmath142",
    ", only a minority of the points of @xmath143 have odd degree , i.e. , @xmath144 .",
    "since @xmath50 corresponds to a configuration of @xmath40 , the constraints ( a ) and ( b ) directly follow from the axioms of a transversal design and ( c ) follows from lemma  [ lemma : induced_colouring ] .",
    "the constraint ( d ) is the combinatorial counterpart to the postulation of absorbing sets that each bit node of @xmath109 has strictly fewer neighbors in @xmath113 than in @xmath114 .",
    "an _ absorbing set candidate _ is a set system that satisfies the constraints ( a)-(d ) of lemma  [ lemma : combinatorial_constraints_of_absorbing_sets ] .    absorbing set candidates can be considered as combinatorial patterns for absorbing sets independent of any code . by contrast , absorbing sets are inextricably linked with a concrete code since they are defined as subgraphs of the code s factor graph .",
    "[ theorem : combinatorial_absorbing_constraints ] let @xmath109 be an absorbing set of type @xmath73 . for the case of @xmath145 or @xmath146 , the absorbing set",
    "@xmath109 is fully if and only if the points of @xmath54 are coloured with the same colour by @xmath70 , i.e. , @xmath147 .",
    "we assume w.l.o.g . that @xmath50 is the set system representation of @xmath109 with induced colouring @xmath70 .",
    "if all points of @xmath54 are coloured with the same colour by @xmath70 , then all points of odd degree belong to the same group of @xmath40 .",
    "we also know that every block of @xmath40 has exactly one point per group and thus every block of @xmath148 intersects with at most one point of @xmath54 . hence , every block of @xmath148 has strictly fewer points in @xmath54 than in @xmath149 such that @xmath109 must be fully .",
    "conversely , if we assume that there are two points of @xmath54 with different colours ( which means that they are contained in different groups of @xmath40 ) , there must be a block in @xmath27 that contains both points ( cf .",
    "( 4 ) of subsection  [ tds ] ) . since @xmath145 or @xmath146",
    ", this block must be in @xmath148 , otherwise it contradicts the definition of an absorbing set .",
    "hence , this block contradicts the definition of a fully absorbing set .",
    "[ fig : absorbing_set_classification_k3 ]    [ fig : absorbing_set_classification ]      in order to classificate the absorbing set candidates in td ldpc codes based on transversal designs with block size @xmath22 , we have written a program that outputs an exhaustive list of non - isomorphic set systems of block size @xmath22 that satisfy the combinatorial constraints ( a)-(d ) of lemma  [ lemma : combinatorial_constraints_of_absorbing_sets ] ( up to a given size of @xmath64 blocks ) .",
    "_ approach : _ by starting with an empty set system , we successively extend the current system by a further block ( in all possible ways ) in compliance with some combinatorial rules that are necessary to build up an absorbing set candidate .",
    "if an extension fulfills all constraints of lemma  [ lemma : combinatorial_constraints_of_absorbing_sets ] , we add it to the list of absorbing set candidates .",
    "we continue until a maximum number of @xmath64 blocks is reached .    ' '' ''",
    "+ @xmath150 = * * classification**@xmath151 +    ' '' ''    input :    * @xmath22 : desired block size of the absorbing set candidates * @xmath64 : maximum number of blocks    output :    * @xmath150 : the output list @xmath150 fills up with all non - isomorphic absorbing set candidates of block size @xmath22 and at most @xmath64 blocks that may occur in any td ldpc code of column weight @xmath22 . the presence or absence of these absorbing sets finally depends on the specific structure of a concrete td ldpc code .",
    "notations and invariants :    * we denote the current set system by @xmath84 .",
    "* a set system @xmath55 is called an _ extension _ of @xmath80 , if @xmath152 and @xmath153 . *",
    "let @xmath154 , @xmath155 , be @xmath64 global lists of non - isomorphic extensions of size @xmath156 that have already been processed .",
    "note that the set systems collected in @xmath154 are not necessarily absorbing set candidates .",
    "algorithm :    1 .",
    "_ initialization _ : we start with an empty set system @xmath84 .",
    "define @xmath157 for @xmath155 and @xmath158 .",
    "find extensions of @xmath84 _ : we extend @xmath84 by a further block of size @xmath22 in all possible ways .",
    "let @xmath159 be the non - isomorphic extensions of @xmath84 with the following restrictions : 1 .",
    "the constraints ( a)-(c ) of lemma  [ lemma : combinatorial_constraints_of_absorbing_sets ] must be valid .",
    "@xmath84 must be connected , i.e , for any two distinct subsets of blocks ( called components ) there must be at least one point that is contained in both components .",
    "+ note that any violation of a ) is irreparable by extending the set system such that the concerned extensions can be discarded .",
    "by contrast , the constraint b ) is reparable by adding some new blocks properly such that the isolated components get connected .",
    "nonetheless , we may discard unconnected set systems at this early stage since all extensions of these systems will be found by extending the blocks in a different order .",
    "all constraints therefore reduce the processing complexity .",
    "_ for each extension @xmath160 do _ : 1 .",
    "let @xmath156 be the number of blocks of @xmath160 .",
    "if @xmath160 is isomorphic to any set system of @xmath154 , we discard @xmath160 and continue with the next extension , else we add @xmath160 to @xmath154 .",
    "we add @xmath160 to the output @xmath150 , if @xmath160 satisfies constraint ( d ) of lemma  [ lemma : combinatorial_constraints_of_absorbing_sets ] .",
    "3 .   if @xmath161 , we stop processing this extension , else we apply steps ( 2)-(3 ) recursively to @xmath162 .",
    "+ note that the violation of constraint ( d ) is reparable by adding some new blocks properly , such that the extensions must be processed recursively even if they violate ( d ) .",
    "[ fig : absorbing_set_classification_k3 ] shows the matrix representations of the @xmath108 absorbing set candidates which has been obtained by the procedure @xmath163      fig .",
    "[ fig : absorbing_set_classification ] shows the matrix representations of the @xmath108 absorbing set candidates which has been obtained by the procedure @xmath165",
    "for the remainder of the paper , we employ a special class of cyclic - structured mols that are ideally suited for constructing td ldpc codes with excellent decoding performances .",
    "more precisely , the presented mols provide an algebraic approach for the investigation and elimination of harmful absorbing sets , leading to codes with low error - floors and thus to near - optimal performances over the awgn channel via spa decoding . in @xcite , we have already used the same class of mols to produce powerful td ldpc codes with improved stopping set distributions over the bec .",
    "we first need the following straightforward lemma , giving mutually orthogonal latin squares isomorphic to cayley addition tables ( cf .",
    "@xcite ) :    [ simple_structured_mols ] let @xmath166 be the galois field of any prime power order @xmath167 .",
    "we obtain a latin square @xmath168 of order @xmath167 and _ scale factors _",
    "@xmath169 by @xmath170 = \\alpha x + \\beta y,\\ x , y \\in\\mathbb{f}_q,\\ ] ] with row set , column set and symbol set @xmath171 , respectively . if @xmath172 , we simply write @xmath173 instead of @xmath174 .",
    "the cyclic nature of the latin square can be comprehended by considering that each column is obtained from the previous one by adding the same difference to each element of the previous column modulo @xmath167 .",
    "the same holds for the rows . in the remainder of the paper we consequently speak of cyclic latin squares and of cyclic mols",
    "now , we describe under which conditions sets of cyclic latin squares are mols .",
    "we first need the following lemma :    [ lemma : orthogonality_latin_squares ] two cyclic latin squares @xmath175 and @xmath176 are orthogonal if and only if @xmath177 over @xmath166 .",
    "see appendix  [ proof : orthogonality_of_latin_squares ] .",
    "clearly , every latin square @xmath168 can be associated with a pair of scale factors @xmath178 .",
    "now , we define an equivalence relation @xmath179 on @xmath180 , where @xmath181 if and only if @xmath182 over @xmath166 .",
    "let @xmath183 .",
    "the equivalence classes of @xmath179 are given by @xmath184 for @xmath185 , where @xmath186 is a representative of the @xmath62-th class .",
    "the classes @xmath187 partition the set @xmath180 .",
    "let @xmath188 be any representative system , i.e. , @xmath189 .",
    "then , the associated latin squares @xmath190 are @xmath191 mols .",
    "we can use any @xmath32-subset of these mols ( @xmath192 ) to build up a td@xmath193 and thus to construct a td ldpc code .",
    "since @xmath194 and @xmath195 for @xmath196 are in different equivalence classes , it follows that @xmath197 .",
    "hence , the associated latin squares are orthogonal by lemma  [ lemma : orthogonality_latin_squares ] .",
    "( 0.55,0.45 ) rectangle ( 1.45,-3.55 ) ; ( 1.55,0.45 ) rectangle ( 2.45,-3.55 ) ; ( 2.55,0.45 ) rectangle ( 3.45,-3.55 ) ; ( 3.55,0.45 ) rectangle ( 4.45,-3.55 ) ;    ( 0.52,0.48 )  + + ( 3.96,0 )  + + ( 0,-1.05 )  + + ( -3.96,0 ) ",
    "+ + ( 0,1.05 ) ;    at ( 1,0 ) @xmath198{|ccccc| }          \\hline          0&1&2&3&4\\\\          1&2&3&4&0\\\\          2&3&4&0&1\\\\          3&4&0&1&2\\\\          4&0&1&2&3\\\\          \\hline          \\end{array}$ ] ; at ( 1,-0.46 ) @xmath199 ;    at ( 2,0 ) @xmath198{|ccccc| }          \\hline          0&1&2&3&4\\\\          2&3&4&0&1\\\\          4&0&1&2&3\\\\          1&2&3&4&0\\\\          3&4&0&1&2\\\\          \\hline          \\end{array}$ ] ; at ( 2,-0.46 ) @xmath200 ;    at ( 3,0 ) @xmath198{|ccccc| }          \\hline          0&1&2&3&4\\\\          3&4&0&1&2\\\\          1&2&3&4&0\\\\          4&0&1&2&3\\\\          2&3&4&0&1\\\\          \\hline          \\end{array}$ ] ; at ( 3,-0.46 ) @xmath201 ;    at ( 4,0 ) @xmath198{|ccccc| }          \\hline          0&1&2&3&4\\\\          4&0&1&2&3\\\\          3&4&0&1&2\\\\          2&3&4&0&1\\\\          1&2&3&4&0\\\\          \\hline          \\end{array}$ ] ; at ( 4,-0.46 ) @xmath202 ;    at ( 1,-1 ) @xmath198{|ccccc| }          \\hline          0&2&4&1&3\\\\          2&4&1&3&0\\\\          4&1&3&0&2\\\\          1&3&0&2&4\\\\          3&0&2&4&1\\\\          \\hline          \\end{array}$ ] ; at ( 1,-1.46 ) @xmath203 ;    at ( 2,-1 ) @xmath198{|ccccc| }          \\hline          0&2&4&1&3\\\\          4&1&3&0&2\\\\          3&0&2&4&1\\\\          2&4&1&3&0\\\\          1&3&0&2&4\\\\          \\hline          \\end{array}$ ] ; at ( 2,-1.46 ) @xmath204 ;    at ( 3,-1 ) @xmath198{|ccccc| }          \\hline          0&2&4&1&3\\\\          1&3&0&2&4\\\\          2&4&1&3&0\\\\          3&0&2&4&1\\\\          4&1&3&0&2\\\\          \\hline          \\end{array}$ ] ; at ( 3,-1.46 ) @xmath205 ;    at ( 4,-1 ) @xmath198{|ccccc| }          \\hline          0&2&4&1&3\\\\          3&0&2&4&1\\\\          1&3&0&2&4\\\\          4&1&3&0&2\\\\          2&4&1&3&0\\\\          \\hline          \\end{array}$ ] ; at ( 4,-1.46 ) @xmath206 ;    at ( 1,-2 ) @xmath198{|ccccc| }          \\hline          0&3&1&4&2\\\\          3&1&4&2&0\\\\          1&4&2&0&3\\\\          4&2&0&3&1\\\\          2&0&3&1&4\\\\          \\hline          \\end{array}$ ] ; at ( 1,-2.46 ) @xmath207 ;    at ( 2,-2 ) @xmath198{|ccccc| }          \\hline          0&3&1&4&2\\\\          1&4&2&0&3\\\\          2&0&3&1&4\\\\          3&1&4&2&0\\\\          4&2&0&3&1\\\\          \\hline          \\end{array}$ ] ; at ( 2,-2.46 ) @xmath208 ;    at ( 3,-2 ) @xmath198{|ccccc| }          \\hline          0&3&1&4&2\\\\          4&2&0&3&1\\\\          3&1&4&2&0\\\\          2&0&3&1&4\\\\          1&4&2&0&3\\\\          \\hline          \\end{array}$ ] ; at ( 3,-2.46 ) @xmath209 ;    at ( 4,-2 ) @xmath198{|ccccc| }          \\hline          0&3&1&4&2\\\\          2&0&3&1&4\\\\          4&2&0&3&1\\\\          1&4&2&0&3\\\\          3&1&4&2&0\\\\          \\hline          \\end{array}$ ] ; at ( 4,-2.46 ) @xmath210 ;    at ( 1,-3 ) @xmath198{|ccccc| }          \\hline          0&4&3&2&1\\\\          4&3&2&1&0\\\\          3&2&1&0&4\\\\          2&1&0&4&3\\\\          1&0&4&3&2\\\\          \\hline          \\end{array}$ ] ; at ( 1,-3.46 ) @xmath211 ;    at ( 2,-3 ) @xmath198{|ccccc| }          \\hline          0&4&3&2&1\\\\          3&2&1&0&4\\\\          1&0&4&3&2\\\\          4&3&2&1&0\\\\          2&1&0&4&3\\\\          \\hline          \\end{array}$ ] ; at ( 2,-3.46 ) @xmath212 ;    at ( 3,-3 ) @xmath198{|ccccc| }          \\hline          0&4&3&2&1\\\\          2&1&0&4&3\\\\          4&3&2&1&0\\\\          1&0&4&3&2\\\\          3&2&1&0&4\\\\          \\hline          \\end{array}$ ] ; at ( 3,-3.46 ) @xmath213 ;    at ( 4,-3 ) @xmath198{|ccccc| }          \\hline          0&4&3&2&1\\\\          1&0&4&3&2\\\\          2&1&0&4&3\\\\          3&2&1&0&4\\\\          4&3&2&1&0\\\\          \\hline          \\end{array}$ ] ; at ( 4,-3.46 ) @xmath214 ;    fig . [ equivclasses ] depicts the four equivalence classes over @xmath215 , where the members of the equivalence classes are represented by the associated latin squares .",
    "the latin squares of the first row , bordered by a dashed line , constitute a possible representative system of these classes and thus are mols .",
    "let @xmath216 be @xmath32 cyclic mols with row , column and symbol sets @xmath217 for @xmath218 .",
    "first , define @xmath219 , @xmath220 and @xmath221 . by applying the process given in the proof of theorem  [ equiv_mols_tds ]",
    ", we obtain a transversal design @xmath23 with point set @xmath222 , groups @xmath223 and block set @xmath224 .",
    "let @xmath225 be two mols with @xmath226 .",
    "we obtain a transversal design with @xmath227 , groups @xmath228 and blocks @xmath229 with all computations over @xmath166 . both mols and the arising transversal design",
    "are visualized in fig .",
    "[ fig : mols ] .      define @xmath231 as the family of all @xmath32-sets of cyclic mols of order @xmath167 .",
    "each transversal design that is based on a set of @xmath232 is referred to as an _",
    "@xmath230-td_. by taking the incidence matrix of such a transversal design as the parity - check matrix of a code , we obtain an _ @xmath230-td ldpc code_. note that the order of the latin squares within a set of mols is irrelevant , since every order leads to the same code .",
    "an @xmath230-td ldpc code has block length @xmath233 , rate @xmath234 , and the code s parity - check matrix is regular with column weight @xmath235 and row weight @xmath167 .",
    "we show in @xcite that these codes have quasi - cyclic structure , leading to a low encoding complexity linear with the block length .",
    "the parity - check matrix of a quasi - cyclic @xmath230-td ldpc code consists of @xmath236 circulant submatrices ( called circulants ) of size @xmath237 . for a more flexible code design , it is possible to use any grid of circulants to generate a wide spectrum of block lengths and code rates for any prime power order @xmath167 @xcite .",
    "let @xmath238 be any set of cyclic mols , @xmath239 be the corresponding @xmath230-td and @xmath240 be the @xmath230-td ldpc code based on @xmath239 .",
    "[ lemma : replacing_latin_squares ] let @xmath241 and @xmath242 with @xmath243 for @xmath218 .",
    "then , it follows that @xmath244 .",
    "observe that @xmath245=\\ell_i \\cmcal{l}^{(\\alpha_i,\\beta_i)}_q[x , y]$ ] over @xmath166 , i.e. , there is a bijection between the symbols of @xmath246 and @xmath247 that preserves the structure of the latin squares ( renaming of the symbols ) .",
    "this implies a renaming of the points of @xmath239 and , equivalently , a reordering of the rows of the parity - check matrix of @xmath240 .",
    "it is obvious that any reordering of the rows of a code s parity - check matrix does not change the code .",
    "[ reduced_form ] the set of cyclic mols @xmath248 can be reduced to the form @xmath249 with @xmath250 such that @xmath244 .",
    "then , @xmath251 is called the _ reduced form _ of @xmath248 .",
    "it holds that @xmath252 and thus @xmath246 can be replaced by @xmath253 according to lemma  [ lemma : replacing_latin_squares ] without changing the code .    for the rest of the paper",
    ", we consider only mols in reduced form as a consequence of theorem [ reduced_form ] .",
    "this simplification is reasonable in order to investigate the structural properties of the arising codes .",
    "however , it is possible to construct a quasi - cyclic ldpc code by the appropriate choice of another representative system as described in @xcite , which allows encoding with low complexity .      [",
    "theorem : equivalence_of_td_ldpc_codes ] let @xmath254 be a set of mols in reduced form . for @xmath255 with @xmath256",
    "it follows that @xmath257 .",
    "it can easily be seen that the latin square @xmath258 can be obtained by reordering certain rows of @xmath259 and that this reordering is the same for each @xmath218 .",
    "the simultaneous reordering of the rows of the given mols is equivalent to reorder the corresponding rows of the parity - check matrix of @xmath240 .",
    "obviously , any reordering of the rows of a code s parity - check matrix does not change the code .",
    "let @xmath260 be a set of two cyclic mols of order @xmath261 . by theorem  [ theorem : equivalence_of_td_ldpc_codes ]",
    ", the sets @xmath262 ( @xmath263 ) , @xmath264 ( @xmath265 ) and @xmath266 ( @xmath267 ) can be constructed such that @xmath268 .",
    "the main target of the present paper is to eliminate harmful absorbing sets in @xmath232-td ldpc codes in order to improve the error - floor performance of these codes . due to the intricate nature of iterative decoders over the awgn channel ,",
    "the current understanding about the exact failure mechanism is far from complete .",
    "however , the harmfulness of absorbing sets can be based on several conjectures that are in accordance with simulative results and with the current level of knowlege .",
    "an @xmath108 absorbing set is supposed to be harmful if    * the size @xmath115 is small , * the syndrome @xmath116 is small compared to @xmath115 , * the absorbing set is fully , and * the degrees of the variable nodes are small , in particular , the absorbing set is elementary .",
    "the absorbing set candidates obtained by the classification in section  [ section : classification ] represent potentially harmful absorbing sets since they satisfy at least one of the conjectures listed above .",
    "we now demonstrate that some of these candidates can be avoided in @xmath232-td ldpc codes with well - chosen code parameters , more precisely , by a proper choice of the scale factors @xmath269 of the underlying mols and of the prime power order @xmath167 of the galois field @xmath166 .    for the rest of the section , let @xmath270 be a set of @xmath32 cyclic mols in reduced form , @xmath239 be the corresponding @xmath232-td of block size @xmath271 and @xmath240 be the corresponding ldpc code of column weight @xmath22 .",
    "we denote the groups of @xmath239 by @xmath272 such that the points of @xmath273 and @xmath274 correspond to the coordinates of the common row and column sets of @xmath248 , respectively , and the points of @xmath275 correspond to the symbols of @xmath276 for @xmath218 .",
    "let @xmath50 be an absorbing set candidate from the classification of section  [ section : classification ] and let @xmath277 be the non - isomorphic @xmath22-colourings of @xmath50 .",
    "for each @xmath22-colouring @xmath278 , there exist @xmath279 possibilities to associate the @xmath22 colours of @xmath280 with the @xmath22 groups of @xmath272 . more precisely , let @xmath281 be all possible bijections @xmath282 , called the _ colour - to - group mappings_. as a short notation , we use @xmath283 . in table",
    "[ cps_k4 ] , we explicitely list the short notations of all @xmath284 colour - to - group mappings which will be important for the presentation of our results . for instance , from @xmath285 we obtain @xmath286 , @xmath287 , @xmath288 and @xmath289 .    [",
    "theorem : representing_an_absorbing_set ] an absorbing set of type @xmath290 occurs in @xmath240 if and only if there is an assignment of values from @xmath166 to the variables @xmath291 with @xmath292 and a colour - to - group mapping @xmath293 such that    1 .   the point @xmath294 is associated with variable @xmath295 , 2 .",
    "all elements of @xmath296 are unique , 3 .   for every block @xmath297 with @xmath298 the linear equations @xmath299 are satisfied over @xmath166 for @xmath300 .    if there are values @xmath301 that satisfy ( 1)-(3 ) , then the elements of @xmath302 can be considered as points of the transversal design @xmath303 and the elements of @xmath304 as blocks of @xmath303 .",
    "the linear equations obtained by theorem  [ theorem : representing_an_absorbing_set ] lead to a homogeneous linear system over @xmath166 with unknown variables @xmath291 and coefficients depending on the scale factors @xmath305 .",
    "let @xmath306 be the coefficient matrix and @xmath307 be the column vector of the unknown variables .",
    "every solution of @xmath308 corresponds to an absorbing set of type @xmath290 with colour - to - group mapping @xmath293 if the pairs @xmath309 are unique .",
    "conversely , if such a solution does not exist , there can not be any absorbing set of this type .",
    "_ approach _ : the existence of any absorbing sets of type @xmath290 with colour - to - group mapping @xmath293 in a code @xmath240 is equivalent to the existence of certain solutions of the linear equation system @xmath308 .",
    "we solve this system symbolically by a modified gaussian elimination algorithm in dependence of the scale factors @xmath305 and the galois field @xmath166 .    ' '' ''",
    "+ @xmath310 = * * eliminationprocess**@xmath50 +    ' '' ''    input :    * @xmath50 : absorbing set candidate of block size @xmath22    output :    * @xmath311 : the process outputs the elimination constraints @xmath311 grouped by their @xmath22-colourings @xmath278 , i.e. , all absorbing sets of type @xmath290 can be eliminated if and only if @xmath312 .",
    "conversely , there exist absorbing sets of type @xmath290 if and only if @xmath313 .",
    "algorithm :    1 .",
    "for every @xmath22-colouring @xmath278 of @xmath50 , @xmath314 , and every colour - to - group mapping @xmath293 , @xmath315 , do : @xmath316 2 .",
    "output @xmath317 for @xmath314 .    ' '' ''     + @xmath318 = * * findeliminationconstraint**@xmath319 +    ' '' ''    input :    * @xmath50 : absorbing set candidate of block size @xmath22 * @xmath278 : the @xmath63-th @xmath22-colouring of @xmath50 * @xmath293 : the @xmath320-th colour - to - group mapping    output :    * @xmath318 : the output @xmath318 is an elimination constraint such that all absorbing sets of type @xmath290 with colour - to - group mapping @xmath293 can be eliminated if and only if @xmath321 .    notations and invariants :    * we denote the type @xmath290 with colour - to - group mapping @xmath293 from now on as @xmath322 . *",
    "the set @xmath323 contains all polynomials that are definitely zero , initialized by @xmath324 . *",
    "the set @xmath325 contains all polynomials that are definitely non - zero .",
    "initially , we have of any mols are non - zero and unique by definition such that @xmath305 and any difference @xmath326 with @xmath196 are definitely non - zero .",
    "furthermore , an entry that is equal to a prime power @xmath327 with @xmath328 can be zero if the underlying galois field has characteristic @xmath329 .",
    "conversely , an entry that is not a prime power must be definitely non - zero . as an example , the term @xmath330 is definitely non - zero . ]",
    "* * @xmath331 , * * @xmath332 for @xmath218 , * * @xmath333 for @xmath334 and @xmath196 , * * @xmath335 if @xmath336 is not a prime power , and * * @xmath337 if @xmath338 . *",
    "the set @xmath339 contains all polynomials that may be zero or non - zero depending on the choice of the scale factors @xmath305 and @xmath166 .",
    "consequently , it consists of all polynomials that are not in @xmath340 .",
    "* let @xmath341 be a rooted tree that consists of _ case nodes _ of the form @xmath342 and _ elimination nodes _ of the form @xmath343 , where @xmath344 , @xmath345 and where ` c ' and ` e ' stands for _ case _ and _ elimination _ , respectively .",
    "the elimination nodes must be leafs .",
    "we say that a node is _ satisfied _ if @xmath346 , where @xmath347 note that it depends on the choice of the scale factors @xmath305 , @xmath218 and the choice of @xmath166 if a node is satisfied .",
    "algorithm :    1 .",
    "build up an equation system @xmath308 with the equations obtained by theorem  [ theorem : representing_an_absorbing_set ] for type @xmath322 .",
    "let @xmath348 be the upper right submatrix of the coefficient matrix @xmath306 including the @xmath349-th row and column .",
    "we start with @xmath350 .",
    "initialize the ouput tree @xmath341 with an empty root node and and assume that this root node is trivially satisfied .",
    "2 .   find a column of @xmath348 with all entries from @xmath351 and with at least one entry from @xmath325 .",
    "if such a column does not exist , continue with step ( 3 ) .",
    "otherwise swap the rows and columns , we must also swap the corresponding entries in @xmath352 .",
    "] of @xmath306 in such a way that there is an entry of @xmath325 in the left top corner of @xmath348",
    ". then , apply row eliminations to @xmath306 such that all other entries of the first column of @xmath348 become zero ( except the first ) and continue with ( 4 ) .",
    "3 .   find the column of @xmath348 with the smallest positive number of entries in @xmath339 .",
    "if such a column does not exist , i.e. , if all entries are from @xmath323 , continue with step ( 6 ) .",
    "otherwise , choose an entry @xmath344 of this column and do a case differentation . for this ,",
    "split the current process into two subprocesses . for",
    "the first subprocess , * assume that @xmath353 , * append the node @xmath354 to the current node of @xmath341 , we mean the case node that has been inserted by the parent process . initially , the current node is the root of @xmath341 . ] * move @xmath355 to @xmath323 , and * continue with step ( 5 ) .",
    "+ for the second subprocess , * assume that @xmath356 , * append the node @xmath357 to the current node of @xmath341 , * move @xmath355 to @xmath325 , and * continue with step ( 5 ) .",
    "+ notice that the sets @xmath358 and @xmath339 are process invariants that are stored for each subprocess separately , whereas @xmath341 is stored as a global entity .",
    "4 .   after every step search for linear equations of the form @xmath359 with @xmath360 and @xmath344 . by choosing the scale factors @xmath305 and @xmath166 in such a way that @xmath356 over @xmath166",
    ", it follows that @xmath361 which violates the second condition of theorem  [ theorem : representing_an_absorbing_set ] for  all possible solutions .",
    "hence , we can eliminate all absorbing sets of type @xmath322 .",
    "consequently , we append the elimination node @xmath362 to the current node of @xmath341 . for further processing , we start a new process and * assume that @xmath353 , * remove the row of @xmath306 that corresponds to the equation ( which is trivially satisfied ) , * move @xmath355 to @xmath323 , and * continue with step ( 5 ) .",
    "5 .   repeat step ( 2 ) with @xmath363 until the matrix is in row echelon form .",
    "if the matrix is in row echelon form , we solve the system symbolically by back substitution such that all unknown variables depend on the scale factors @xmath305 and on some free variables if the system is underdetermined .",
    "we obtain symbolic expressions for @xmath291 .",
    "compute the symbolic differences @xmath364 for all @xmath365 with @xmath366 and evaluate under which conditions these differences are zero . more precisely ,",
    "search for differences of the form @xmath367 with @xmath344 and @xmath368 . for the case of @xmath353 , the points @xmath369 and @xmath370 coincide for all possible solutions and thus , the obtained set system can not be of type @xmath322",
    ". consequently , append the elimination node @xmath371 to the current node of @xmath341 .",
    "let @xmath372 be a path of @xmath341 that ends up in an elimination node .",
    "define @xmath373 .",
    "then , the absorbing sets of type @xmath322 can be eliminated if @xmath374 .",
    "let @xmath375 be all paths of @xmath341 that ends up in an elimination node .",
    "define @xmath376 .",
    "then , the absorbing sets of type @xmath322 can be eliminated if and only if @xmath377 . finally , we simplify the elimination constraint @xmath318 by using the following rules : * @xmath378 , * @xmath379 , * if @xmath380 , @xmath381 , * if @xmath380 , @xmath382 , * @xmath383 * @xmath384 * @xmath385 , * @xmath386 , * @xmath387 , * @xmath388 , + where @xmath389 , @xmath390 , and @xmath391 .",
    "[ example : absorbing_pattern_as_subsystem ] let @xmath50 be the @xmath136 absorbing set candidate given by the points @xmath81 and blocks @xmath392 . with @xmath146-colouring @xmath393 and colour - to - group mapping @xmath394 from table  [ cps_k4 ] , we obtain the following system of linear equations over @xmath166 : @xmath395 this system can also be described by the matrix equation @xmath396 \\left [ \\begin{smallmatrix } p_1\\\\ p_8\\\\ p_4\\\\ p_5\\\\ p_{10}\\\\ p_2\\\\ p_6\\\\ p_3\\\\ p_7\\\\ p_9 \\end{smallmatrix } \\right ] \\footnotesize = \\boldsymbol{0},\\ ] ] where the dots represent zeros . by applying step ( 2)-(5 ) of the elimination process , we obtain the coefficient matrix @xmath306 in row echelon form .",
    "the matrix equation is as follows : @xmath397 \\\\ \\left [ \\begin{smallmatrix } p_1,\\ p_8,\\ p_4,\\ p_5,\\ p_{10},\\ p_2,\\ p_6,\\ p_7,\\ p_3,\\ p_9 \\end{smallmatrix } \\right]^t \\footnotesize = \\boldsymbol{0}.\\end{aligned}\\ ] ]    step ( 4 ) of the elimination process detects the linear equation of the form @xmath398 and hence , we have @xmath399 or @xmath400 . by a proper choice of @xmath401 , @xmath402 and @xmath166 , we may ensure that @xmath403 over @xmath166 and hence , it must hold that @xmath404 .",
    "their equality leads to a degraded set system where the two points @xmath405 and @xmath406 of @xmath51 coincide .",
    "therefore , we append the elimination node @xmath407 to the root of @xmath341 .",
    "step ( 6 ) does not find further elimination constraints .",
    "finally , we obtain by step ( 7 ) that all absorbing sets of type @xmath408 with colour - to - group mapping @xmath409 can be avoided if and only if the elimination constraint @xmath410 is satisfied .",
    ".non - isomorphic 3-colourings of the absorbing set candidates of fig .",
    "[ fig : absorbing_set_classification_k3 ] and their elimination constraints over @xmath166 .",
    "an asterisk indicates that the 3-colouring leads to a fully absorbing set . [ cols=\"^,^,^\",options=\"header \" , ]",
    "this section summarizes the main results of our paper and describes how the potentially harmful absorbing sets of the classification of section  [ section : classification ] can be eliminated in @xmath232-td ldpc codes for the cases @xmath145 and @xmath146 .",
    "when we refer to the smallest absorbing sets , we mean those with the smallest number of bit nodes and , among these , with the smallest syndrome .      in table",
    "[ elimination_constraints_k3 ] we give the possible elimination constraints of the smallest absorbing sets that may occur in @xmath411-td ldpc codes of column weight @xmath145 .",
    "the given constraints depend on the characteristic @xmath412 of the underlying galois field @xmath166 .",
    "* the smallest @xmath413 absorbing sets are unavoidable . *",
    "the smallest fully absorbing sets have size @xmath414 and can be eliminated by choosing @xmath166 such that @xmath415 . *",
    "the absorbing sets of size @xmath416 can be avoided by choosing @xmath166 such that @xmath417 .",
    "hence , the @xmath414 and @xmath416 absorbing sets can not be eliminated simultaneously . *",
    "the absorbing sets of size @xmath261 can not be avoided , but they are supposed to be harmless since they are non - fully and have relatively large syndromes . * the @xmath418 absorbing sets can be avoided by @xmath415 , whereas the @xmath419 absorbing sets can not be avoided . *",
    "the @xmath420 absorbing sets can be avoided by @xmath421 , the @xmath422 absorbing sets by @xmath423 or @xmath405 and the @xmath424 , @xmath425 and @xmath426 absorbing sets by @xmath423 .",
    "the @xmath427 absorbing sets do never occur . *",
    "the @xmath428 and @xmath429 absorbing sets can not be avoided , but they are supposed to be harmless due to their large syndrome .",
    "we conjecture that we obtain an excellent @xmath411-td ldpc code by choosing @xmath166 in such a way that @xmath415 , since the most harmful @xmath414 absorbing sets can be eliminated and the absorbing sets of size @xmath430 can partially be avoided .      in fig .",
    "[ classification ] we present the exact elimination constraints for the smallest absorbing sets that may occur in an @xmath431-td ldpc code of column weight @xmath164 .",
    "the given constraints depend on the scale factors @xmath432 and on the underlying galois field @xmath166 with characteristic @xmath412 and can be satisfied by a proper choice of these parameters .    *",
    "the smallest possible absorbing sets have size @xmath136 and can be eliminated if and only if the constraints c1-c4 of table  [ constraints_k4 ] are satisfied .",
    "the @xmath420 and @xmath424 absorbing sets can be simultaneously avoided since they contain a @xmath136 absorbing set . *",
    "the smallest possible fully absorbing sets have size @xmath136 and can be eliminated if and only if c4 is satisfied . *",
    "the smallest ( fully ) absorbing sets with syndrome 0 are of size @xmath430 and can be avoided if and only if the constraint @xmath433 is satisfied .",
    "note , that @xmath430 absorbing sets correspond to codewords of minimum weight 6 and also define stopping sets of size @xmath434 .",
    "hence , by avoiding these entities , we also raise the minimum and stopping distance of the code . *",
    "the @xmath435 absorbing sets can be avoided if and only if the constraints c5-c7 are satisfied .",
    "the @xmath430 absorbing sets can be simultaneously avoided since they contain a @xmath435 absorbing set . *",
    "the fully @xmath422 and @xmath425 absorbing sets do never occur .",
    "* the fully @xmath436 absorbing sets can be avoided if and only if the constraint @xmath437 is satisfied . *",
    "the @xmath438 absorbing sets can be eliminated if and only if the constraints c4 and c8-c15 are satisfied . *",
    "the @xmath439 absorbing sets can be avoided if the constraints c16 and c18-c25 are satisfied . *",
    "the @xmath440 absorbing sets can be avoided if and only if the constraint @xmath441 is satisfied . *",
    "the @xmath442 absorbing sets can partially be eliminated if the constraints c1-c4 and c8 are satisfied . in particular ,",
    "the fully @xmath442 absorbing sets can be avoided if and only if the constraint c4 is satisfied . *",
    "the @xmath443 absorbing sets can partially be eliminated if the conditions c1-c4 are satisfied , but the fully @xmath443 absorbing sets can not be avoided .",
    "we conjecture that we obtain an excellent @xmath431-td ldpc code by choosing @xmath401 , @xmath402 and @xmath166 in such a way that the constraints c1 - 16 and c18-c25 are satisfied . in this case ,",
    "the most harmful absorbing sets of size @xmath136 , @xmath435 , @xmath430 and @xmath444 are eliminated and absorbing sets of size @xmath445 and @xmath446 are partially avoided .    * 6c @xmath447 & @xmath448 & @xmath449 & @xmath450 & @xmath451 & @xmath452 + @xmath453 & @xmath454 & @xmath455 & @xmath456 & @xmath457 & @xmath458 + @xmath459 & @xmath460 & @xmath461 & @xmath462 & @xmath463 & @xmath464 + @xmath465 & @xmath466 & @xmath467 & @xmath468 & @xmath469 & @xmath470 + @xmath471 & @xmath472 & @xmath473 & @xmath474 & @xmath475 & @xmath476 + @xmath477 & @xmath478 & @xmath479 & @xmath480 & @xmath481 & @xmath482 + @xmath483 & @xmath484 & @xmath485 & @xmath486 & @xmath487 & @xmath488 + @xmath489 & @xmath490 & @xmath491 & @xmath492 & @xmath493 & @xmath494 +    [ cps_k4 ]    cc;1pt/3ptcc * label * & * constraint * & * label * & * constraint * + c1 & @xmath495 & c15 & @xmath496 + c2 & @xmath497 & c16 & @xmath498 + c3 & @xmath499 & c17 & @xmath500 + c4 & @xmath501 & c18 & @xmath502 + c5 & @xmath503 & c19 & @xmath504 + c6 & @xmath505 & c20 & @xmath506 + c7 & @xmath507 & c21 & @xmath508 + c8 & @xmath509 & c22 & @xmath510 + c9 & @xmath511 & c23 & @xmath512 + c10 & @xmath513 & c24 & @xmath514 + c11 & @xmath515 & c25 & @xmath516 + c12 & @xmath517 & c26 & @xmath518 + c13 & @xmath519 & c27 & @xmath520 + c14 & @xmath521 & c28 & @xmath522 +     +    [ 1 ] > + m#1 [ 1 ] > + m#1 [ 1 ] > + m#1     +   +   +   +   +   +   +   +   +   +   +   +   +   +     +    [ 1 ] > + m#1 [ 1 ] > + m#1 [ 1 ] >",
    "+ m#1     +   +   +   +     +    [ 1 ] > + m#1 [ 1 ] > + m#1 [ 1 ] > + m#1",
    "+   +      let @xmath40 be an @xmath232-td of block size @xmath271 . by removing the points of any @xmath64 groups of @xmath40",
    ", we obtain an @xmath523-td @xmath524 of block size @xmath525 .",
    "since @xmath524 is embedded in @xmath40 , it is highly possible that an absorbing set @xmath109 of @xmath137 also represents an absorbing set of @xmath526 or contains a smaller absorbing set @xmath527 of @xmath526 .",
    "hence , the elimination of absorbing sets in @xmath526 of column weight @xmath525 leads to the avoidance of absorbing sets in @xmath137 of column weight @xmath22 .",
    "therefore , we conjecture that we obtain beneficial @xmath232-td ldpc codes of higher column weights if the scale factors @xmath269 pairwise satisfy the constraints c1-c16 and c18-c25 of table  [ constraints_k4 ] which is the design strategy for the case @xmath164 .",
    "in table  [ table_absorbingsets ] , we simulated the transmission and decoding of @xmath529 codewords for all possible @xmath528-td ldpc codes over the awgn channel with @xmath530  db and under the standard sum - product algorithm with a maximum of 2000 iterations per codeword . for every code , we counted the number of absorbing set detections grouped by their sizes @xmath108 in three categories : the column `` total '' counts the total number of absorbing set detections throughout the simulations and the columns `` fully '' and `` elem . ''",
    "count the number of fully and elementary absorbing set detections , respectively .",
    "we also list the bit error rate ( ber ) , the frame error rate ( fer ) and any violations of the constraints of table  [ constraints_k4 ] for each code .",
    "note that there are some codes that are equal according to theorem  [ theorem : equivalence_of_td_ldpc_codes ] and thus are listed in the same column .",
    "for example , let @xmath531 . for @xmath532 , we obtain that @xmath533 with @xmath534 by theorem  [ theorem : equivalence_of_td_ldpc_codes ] .",
    "these codes clearly show the same decoding behaviour .",
    "notice that the latin squares of @xmath535 can be swapped without changing the code @xmath536 , but since we have fixed the order of the mols by assigning the scale factors @xmath401 and @xmath402 , the swapping of the latin squares has the effect of interchanging the roles of @xmath401 and @xmath402 .",
    "hence , the codes @xmath537 and @xmath536 violate different elimination constraints although they are equivalent . in particular , the sets of constraints can be converted into each other by interchanging the roles of @xmath401 and @xmath402 . now , by considering the simulation results in table  [ table_absorbingsets ] , we can make the following observations :    * if an @xmath108 absorbing set has been detected frequently ( say , more that 10 times ) , then it is fully . * if an @xmath108 absorbing set has been detected frequently , then a large fraction of the detected absorbing sets are elementary . * the most harmful absorbing sets in this simulation are of size @xmath444 and @xmath538 which are fully and elementary .",
    "these absorbing sets can be avoided by satisfying c1-c3 . *",
    "the conditions c4-c7 are not violated by any listed code such that there are no @xmath435 and @xmath430 absorbing sets . * the codes represented by @xmath539",
    "$ ] and @xmath540 $ ] seem to be the best choice among the codes with @xmath541 , since they avoid the most harmful @xmath444 and @xmath538 absorbing sets and reduce the number of @xmath542 absorbing sets . * some types of absorbing sets can not be avoided simultaneously .",
    "for instance , by avoiding the @xmath444 and @xmath538 absorbing sets , some @xmath543 absorbing sets occur and vice versa .",
    "a general explanation is that the count of all non - isomorphic configurations of size @xmath64 must sum up to @xmath544 , where @xmath545 is the block length of the code , such that the avoidance of any configuration of size @xmath64 automatically increases the number other configurations of this size .      in fig .",
    "[ simu ] , we again employed the standard spa decoder with a maximum of 50 iterations per codeword to demonstrate the performance of our optimized td ldpc codes compared to similar codes known in the literature .",
    "firstly , we can observe that our methods of eliminating absorbing sets achieve an enormous performance gain between the td ldpc codes with well and badly chosen scale factors .",
    "secondly , the optimized td ldpc codes outperform some known ldpc codes based on the random peg algorithm @xcite , on a construction by zhang et al . @xcite and on the lattice construction by vasic and milenkovic @xcite .",
    "in this paper we have demonstrated that the class of transversal designs based on cyclic - structured mols generates a wide range of quasi - cyclic ldpc codes with excellent decoding performances over the awgn channel via spa decoding , in particular with low error - floors . by investigating the presence or absence of absorbing sets in these codes",
    ", we have derived powerful constraints for the proper choice of code parameters in order to eliminate small and harmful absorbing sets .",
    "the presented constraints are derived for ldpc codes of column weight @xmath405 and @xmath146 but are also potentially beneficial for codes of higher column weights . since absorbing sets",
    "are also known to be stable under bit - flipping decoders , the presented codes should also reveal excellent performances over the bsc via bit - flipping decoding .",
    "[ [ if - alpha_1-beta_2-neq - alpha_2-beta_1-then - the - latin - squares - are - orthogonal ] ] if @xmath177 , then the latin squares are orthogonal ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    we prove the contrapositive of this statement : suppose that the latin squares are * not * orthogonal , then there must be two cell positions @xmath13 $ ] and @xmath14 $ ] such that @xmath547=\\cmcal{l}^{(\\alpha_1,\\beta_1)}_q[x_2,y_2]$ ] and @xmath548=\\cmcal{l}^{(\\alpha_2,\\beta_2)}_q[x_2,y_2]$ ] .",
    "it follows with lemma  [ simple_structured_mols ] that ( 1 ) @xmath549 and ( 2 ) @xmath550 .",
    "after multiplicating ( 1 ) with @xmath551 , ( 2 ) with @xmath401 and adding both results , we obtain @xmath552 .",
    "it follows that @xmath553 or @xmath554 .",
    "the first condition can never be satisfied , since @xmath555 and @xmath556 represent two separate columns .",
    "hence , the second condition must be satisfied .",
    "[ [ if - the - latin - squares - are - orthogonal - then - alpha_1-beta_2-neq - alpha_2-beta_1 ] ] if the latin squares are orthogonal , then @xmath177 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    again , we prove the contrapositive of this statement : suppose that @xmath557 .",
    "let @xmath13 $ ] and @xmath14 $ ] be any two cell positions such that @xmath547=\\cmcal{l}^{(\\alpha_1,\\beta_1)}_q[x_2,y_2]$ ] .",
    "with lemma  [ simple_structured_mols ] , it follows that @xmath549 . by multiplicating with @xmath558 and replacing @xmath559 with @xmath560",
    ", we obtain @xmath561 .",
    "since @xmath562 must be positive , it follows that @xmath550 .",
    "hence , @xmath563 and thus @xmath548=\\cmcal{l}^{(\\alpha_2,\\beta_2)}_q[x_2,y_2]$ ] .",
    "consequently , the latin squares can not be orthogonal .",
    "z.  zhang , l.  dolecek , b.  nikolic , v.  anantharam , and m.  j.  wainwright , `` investigation of error floors of structured low - density parity - check codes by hardware emulation , '' in _ proc .",
    "ieee global telecommunications conference ( globecom ) _ , 2006 , pp .",
    "z.  zhang , l.  dolecek , b.  nikolic , v.  anantharam , and m.  j.  wainwright , `` design of ldpc decoders for improved low error rate performance : quantization and algorithm choices , '' in _ ieee trans .",
    "wireless commun .",
    "_ , vol .",
    "57 , no .  11 , pp . 32583268 , 2009 .",
    "l.  dolecek , z.  zhang , v.  anantharam , m.  j.  wainwright and b.  nikoli , `` analysis of absorbing sets and fully absorbing sets of array - based ldpc codes , '' _ ieee trans . on information theory _",
    "56 , no .  1 ,",
    "181201 , 2010 .",
    "l.  dolecek , j.  wang and z.  zhang , `` towards improved ldpc code designs using absorbing set spectrum properties , '' in _ proc .",
    "6th international symposium on turbo codes and iterative information processing ( istc ) _ , 2010 , pp .",
    "477481 .",
    "r.  c. bose and s.  s. shrikhande , `` on the construction of sets of mutually orthogonal latin squares and the falsity of a conjecture of euler , '' _ transactions of the american mathematical society _ ,",
    "95 , pp . 191209 , 1960 .",
    "l. zhang , q. huang , s. lin , k. abdel - ghaffar and i.  f.  blake , `` quasi - cyclic ldpc codes : an algebraic construction , rank analysis , and codes on latin squares , '' _ ieee trans . on communications _ , vol .",
    "58 , no .  11 , pp . 31263139 , 2010 .",
    "alexander gruner is a ph.d .",
    "student in computer science at the wilhelm schickard institute for computer science , university of tbingen , germany , where he is part of an interdisciplinary research training group in computer science and mathematics .",
    "he received the diploma degree in computer science from the university of tbingen in 2011 .",
    "his research interests are in the field of coding and information theory with special emphasis on turbo - like codes , codes on graphs and iterative decoding .",
    "michael huber ( m.09 ) is currently a manager for data quality and business intelligence at mercedes - benz bank ag , stuttgart , and adjunct professor at the wilhelm schickard institute for computer science , university of tbingen , germany .",
    "he was a heisenberg fellow of the german research foundation ( dfg ) from 2008 - 12 and a visiting full professor in mathematics at berlin technical university from 2007 - 08 .",
    "he obtained the diploma , ph.d . and",
    "habilitation degrees in mathematics from the university of tbingen in 1999 , 2001 and 2006 , respectively .",
    "he was awarded the 2008 heinz maier leibnitz prize by the dfg and the german ministry of education and research ( bmbf ) .",
    "he became a fellow of the institute of combinatorics and its applications ( ica ) , winnipeg , canada , in 2009 .",
    "huber s research interests are in the areas of coding and information theory , cryptography and information security , discrete mathematics and combinatorics , algorithms , and data analysis and visualization with applications to business and biological sciences . among his publications in these areas are two books , flag - transitive steiner designs ( birkhuser verlag , frontiers in mathematics , 2009 ) and combinatorial designs for authentication and secrecy codes ( now publishers , foundations and trends in communications and information theory , 2010 ) .",
    "he is a co - investigator of an interdisciplinary research training group in computer science and mathematics at the university of tbingen ."
  ],
  "abstract_text": [
    "<S> in this paper we construct low - density parity - check ( ldpc ) codes from transversal designs with low error - floors over the additive white gaussian noise ( awgn ) channel . </S>",
    "<S> the constructed codes are based on transversal designs that arise from sets of mutually orthogonal latin squares ( mols ) with cyclic structure . for lowering the error - floors , </S>",
    "<S> our approach is twofold : first , we give an exhaustive classification of so - called absorbing sets that may occur in the factor graphs of the given codes . </S>",
    "<S> these purely combinatorial substructures are known to be the main cause of decoding errors in the error - floor region over the awgn channel by decoding with the standard sum - product algorithm ( spa ) . </S>",
    "<S> second , based on this classification , we exploit the specific structure of the presented codes to eliminate the most harmful absorbing sets and derive powerful constraints for the proper choice of code parameters in order to obtain codes with an optimized error - floor performance .    low - density parity - check ( ldpc ) code , additive white gaussian noise ( awgn ) channel , absorbing set , transversal design ( td ) , mutually orthogonal latin squares ( mols ) . </S>"
  ]
}