{
  "article_text": [
    "we apply a direct generalization of the deutsch - josza algorithm to the context of formal language theory . more particularly , we adapt the algorithm to distinguish between trivial and nontrivial words in groups given by finite presentations , under the promise that a word is of a certain type . for background information ,",
    "we refer the reader to @xcite and @xcite .    the deutsch - josza algorithm concerns maps @xmath0 , which we may think of as words of length @xmath1 in a two - letter alphabet .",
    "instead , let us consider maps @xmath2 , where @xmath3 does not necessarily depend on @xmath1 .",
    "once fixed @xmath4 , we can identify the letters of the alphabet @xmath5 with the binary strings of @xmath6 : @xmath7 , @xmath8 , @xmath9 and @xmath10 .",
    "we describe below the simplest possible case : the map @xmath11 takes a single binary digit as input and gives two binary digits as output .",
    "the output corresponds to one of the letters from @xmath12 .",
    "although this example is not general enough to be interesting , it is still useful to see how the balanced vs. constantquestion in the original deutsch - jozsa task can be lifted to different parities related to the function .",
    "this is essentially the same identical quantum circuit implementing the deutsch algorithm , but with auxiliary input @xmath13 rather than @xmath14 .",
    "for the sake of clarity , let us see the steps of the algorithm .",
    "after applying the hadamard gates to the two registers , the state of the system is @xmath15if @xmath16 , the oracle works as follows : @xmath17 for a binary string @xmath18 , we denote by @xmath19 the _ parity _ of @xmath18 , that is @xmath20 , where @xmath21 is the hamming weight of @xmath18 . after querying the oracle @xmath22",
    ", we obtain the state @xmath23finally , after the last hadamard gate , the first qubit will be in the state @xmath24 if @xmath25 or @xmath26 if @xmath27 .",
    "we shall say that @xmath11 is _ parity constant _ if @xmath25 ; _ parity balanced _ , otherwise . by measuring the final state ,",
    "we obtain @xmath28 with probability @xmath29 if @xmath11 is parity balanced and latexmath:[$%    parity constant . in the same spirit , moving to a larger number of bits , a function @xmath11 is parity balanced if exactly half of the elements of the image of @xmath11 have odd parity .",
    "we will show that properties of the deutsch - jozsa algorithm are inherited when extending the co - domain of @xmath11 and generalizing the notion of parity in less trivial ways .",
    "let us now introduce some terminology related to formal languages . given a word @xmath31 , an _ anagram _ of @xmath32 is a word of the form @xmath33 , where @xmath34 is a permutation .",
    "we write @xmath35 $ ] for the set of all anagrams of @xmath32 .",
    "more formally , let @xmath36 denote the free monoid on @xmath37 and let @xmath38 denote the free commutative monoid on @xmath37 .",
    "let @xmath39 denote the natural map from @xmath36 to @xmath40 and suppose that @xmath41 . then @xmath42 $ ] , the set of all anagrams of @xmath32 .",
    "it is clear that the definition of parity balanced and parity constant extends to the words of @xmath40 .",
    "let @xmath43 , we denote the sets of @xmath44__-constant _ _ and @xmath44__-balanced _ _ words of length @xmath3 over @xmath12 by @xmath45 and @xmath46 , respectively .",
    "the set of @xmath47-constant words is then a union of sets of anagrams @xmath48\\cup \\lbrack bb]\\cup \\lbrack cc]\\cup \\lbrack dd]\\cup",
    "\\lbrack bc]\\cup \\lbrack ad].\\ ] ] similarly , the set of @xmath47-balanced words is @xmath49\\cup \\lbrack ac]\\cup \\lbrack bd]\\cup \\lbrack cd].\\ ] ] note that both the terms of the alphabet in the bracket have the same parity with the notation @xmath7 , @xmath8 , @xmath9 and @xmath10 .",
    "suppose not to input @xmath13 into the auxiliary workspace , but rather some arbitrary string of length two .",
    "how does this affect the sets of words we can distinguish between ?",
    "it is interesting to observe that we may define as follows a more general type of parity .",
    "the set @xmath50 is considered in natural way as the vector space @xmath51 . define @xmath52 to be equal to @xmath53 , if @xmath18 is in the subspace @xmath54 and equal to @xmath29 , otherwise . with this notation , @xmath55 , the usual parity function .",
    "a similar circuit , taking the auxiliary input @xmath56 , that is the binary complement of @xmath44 , will distinguish between whether the word is @xmath44-constant or @xmath44-balanced .",
    "again , measurement of the state will yield this information with certainty .",
    "it is clear that if @xmath57 then the output of the circuit is independent of @xmath11 , and so this is of no use .",
    "let us now suppose that @xmath58 .",
    "then @xmath44-constant means that the outputs of @xmath11 are in the same coset of the subgroup @xmath59 in @xmath60 and @xmath44-balanced means that @xmath61 and @xmath62 are in different cosets , or , in other words , both in or out the subspace @xmath54 .",
    "the set of @xmath63-constant words is @xmath64\\cup \\lbrack bb]\\cup \\lbrack cc]\\cup \\lbrack dd]\\cup \\lbrack ab]\\cup \\lbrack cd]\\ ] ] and the set of @xmath63-balanced words is @xmath65\\cup \\lbrack ad]\\cup \\lbrack bc]\\cup \\lbrack bd].\\ ] ] with the same notation , @xmath66\\cup \\lbrack bb]\\cup \\lbrack cc]\\cup \\lbrack dd]\\cup \\lbrack ac]\\cup \\lbrack bd]\\ ] ] and @xmath67\\cup \\lbrack ad]\\cup \\lbrack bc]\\cup \\lbrack cd].\\ ] ] as before , the first term and the second term in the bracket represent the first output and the second output of the function , respectively . also the parity is the same as described before . note",
    "that when the set is parity constant both terms are in or out the subspace @xmath68 , while in the parity balanced case one term is in the subspace and the other one is out .    we write @xmath69 and call this the set of @xmath44-_feasible _ words of length @xmath3 .",
    "notice that @xmath70    the following fact is central in the context of our discussion .    fixed an @xmath44-parity , we can decide if a function @xmath11 is @xmath44-constant or @xmath44-balanced with a single quantum query .",
    "equivalently , we can determine if the output of @xmath11 is a language in @xmath71 or @xmath72 , with a single quantum query .    already in the seminal work @xcite , it was pointed out that a classical randomized algorithm solves the deutsch - josza task with three classical queries on average , whereas the quantum approach solves it with probability 1 using one single query ( see also @xcite ) .",
    "here the output of the function @xmath11 is no more a single bit but a bit string .",
    "if the number of letters of the alphabet is @xmath73 then the output of the function is an @xmath74-bit string , where @xmath75 .",
    "a word is given by @xmath3 repeated random output of the function , where @xmath3 is the length of the word .",
    "in other terms , a word is like a sequence obtained by tossing a dice with @xmath73 faces .",
    "it is easy to see that the probability of being constant over all possible anagrams , interpreting the output binary string of @xmath3 queries as anagrams of @xmath3 letters , is higher than in the balanced case .",
    "the difference decreases while increasing the number of queries . as long as any possible parity function partitions into two classes the function co - domain , the number of quantum queries required to distinguish between the parity constant and parity balanced cases remains constant .",
    "this is due to the fact that binary strings always form a bipartition with respect to the hamming weight .",
    "the method described allows us to extend the deutsch - josza algorithm to functions with output of any dimension , @xmath76 . defining appropriate parities , based on subgroups or code membership problems ,",
    "could give arise to potentially interesting applications .",
    "in this section we construct languages given by intersecting the images of binary maps .",
    "we show that acceptance of a word of length @xmath3 in one of these languages can be determined with @xmath3 quantum queries .",
    "this can be easily done on the basis of the discussion carried on in the previous section .",
    "the problem defined is artificial , but nonetheless indicates a way to use repeated applications of the modified deutsch - jozsa algorithm , with special reference to formal languages .",
    "we define languages constructed by intersecting the images of functions promised to be @xmath44-constant or @xmath44-balanced with respect to different subspaces .",
    "if @xmath77 , let us write @xmath78 we have    @xmath79\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd]\\cup \\lbrack aaad ] \\\\ & & \\cup \\lbrack aadd]\\cup \\lbrack addd]\\cup \\lbrack bbbc]\\cup \\lbrack bbcc]\\cup \\lbrack bccc ] , \\\\ \\mathcal{b}_{2}^{11}(a , b , c , d ) & = & [ aabb]\\cup \\lbrack",
    "aacc]\\cup \\lbrack bbdd]\\cup \\lbrack ccdd ] \\\\ & & \\cup \\lbrack aabc]\\cup \\lbrack bcdd]\\cup \\lbrack abbd]\\cup \\lbrack accd]\\cup \\lbrack abcd ] , \\\\ \\mathcal{c}_{2}^{01}(a , b , c , d ) & = & [ aaaa]\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd]\\cup \\lbrack aaab ] \\\\ & & \\cup \\lbrack aabb]\\cup \\lbrack abbb]\\cup \\lbrack cccd]\\cup \\lbrack ccdd]\\cup \\lbrack cddd ] , \\\\ \\mathcal{b}_{2}^{01}(a , b , c , d ) & = & [ aacc]\\cup \\lbrack",
    "aadd]\\cup \\lbrack bbcc]\\cup \\lbrack bbdd ] \\\\ & & \\cup \\lbrack aacd]\\cup \\lbrack bbcd]\\cup \\lbrack abcc]\\cup \\lbrack abdd]\\cup \\lbrack abcd ] , \\\\",
    "\\mathcal{f}_{2}^{\\{01,11\\ } } & = & [ aaaa]\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd]\\cup \\lbrack aabb ] \\\\ & & \\cup \\lbrack aacc]\\cup \\lbrack aadd]\\cup \\lbrack bbcc]\\cup \\lbrack bbdd]\\cup \\lbrack ccdd]\\cup \\lbrack abcd].\\end{aligned}\\ ] ]    we also have @xmath80\\cup \\lbrack aacc]\\cup \\lbrack bbdd ] , \\\\",
    "\\mathcal{c}_{2}^{11}(a , b , c , d)\\cap \\mathcal{b}_{2}^{01}(a , b , c , d ) & = & [ aadd]\\cup \\lbrack bbcc ] , \\\\",
    "\\mathcal{b}_{2}^{11}(a , b , c , d)\\cap \\mathcal{c}_{2}^{01}(a , b , c , d ) & = & [ aabb]\\cup \\lbrack ccdd ] , \\\\ \\mathcal{c}_{2}^{11}(a , b , c , d)\\cap \\mathcal{c}_{2}^{01}(a , b , c , d ) & = & [ aaaa]\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd].\\end{aligned}\\ ] ] therefore , given a word in @xmath81 , we can decide with two quantum queries in which of these four languages the word is .",
    "this is an improvement over the classical deterministic setting , where we need at least @xmath82 queries for each function .",
    "the remaining possibilities for @xmath44 are @xmath83\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd]\\cup \\lbrack aaac ] \\\\ & & \\cup \\lbrack aacc]\\cup \\lbrack accc]\\cup \\lbrack bbbd]\\cup \\lbrack bbdd]\\cup \\lbrack bddd ] , \\\\ \\mathcal{b}_{2}^{10}(a , b , c , d ) & = & [ aabb]\\cup \\lbrack",
    "aadd]\\cup \\lbrack bbcc]\\cup \\lbrack ccdd]\\cup \\lbrack aabd ] \\\\ & & \\cup \\lbrack bccd]\\cup \\lbrack abbc]\\cup \\lbrack acdd]\\cup \\lbrack abcd ] , \\\\",
    "\\mathcal{f}_{2}^{\\{10,11\\ } } & = & [ aaaa]\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd]\\cup \\lbrack aabb]\\cup \\lbrack aacc ] \\\\ & & \\cup \\lbrack aadd]\\cup \\lbrack bbcc]\\cup \\lbrack bbdd]\\cup \\lbrack ccdd]\\cup \\lbrack abcd].\\end{aligned}\\ ] ] we then have @xmath84 it can be checked that this is also equal to @xmath85 .",
    "however , the three possibilities @xmath86 and @xmath87 all distinguish between different languages , since we have @xmath88\\cup \\lbrack aabb]\\cup \\lbrack ccdd ] , \\\\ \\mathcal{c}_{2}^{11}(a , b , c , d)\\cap \\mathcal{b}_{2}^{10}(a , b , c , d ) & = & [ aadd]\\cup \\lbrack bbcc ] , \\\\ \\mathcal{b}_{2}^{11}(a , b , c , d)\\cap \\mathcal{c}_{2}^{10}(a , b , c , d ) & = & [ aacc]\\cup \\lbrack bbdd ] , \\\\ \\mathcal{c}_{2}^{11}(a , b , c , d)\\cap \\mathcal{c}_{2}^{10}(a , b , c , d ) & = & [ aaaa]\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd ] , \\\\ \\mathcal{b}_{2}^{01}(a , b , c , d)\\cap \\mathcal{b}_{2}^{10}(a , b , c , d ) & = & [ abcd]\\cup \\lbrack aadd]\\cup \\lbrack bbcc ] , \\\\ \\mathcal{c}_{2}^{01}(a , b , c , d)\\cap \\mathcal{b}_{2}^{10}(a , b , c , d ) & = & [ aabb]\\cup \\lbrack ccdd ] , \\\\ \\mathcal{b}_{2}^{01}(a , b , c , d)\\cap \\mathcal{c}_{2}^{10}(a , b , c , d ) & = & [ aacc]\\cup \\lbrack bbdd ] , \\\\ \\mathcal{c}_{2}^{01}(a , b , c , d)\\cap \\mathcal{c}_{2}^{10}(a , b , c , d ) & = & [ aaaa]\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd].\\end{aligned}\\ ] ]    we have then seen that @xmath89 this fact will be useful later , when dealing with the word problem .",
    "a similar approach can be taken for larger alphabets : @xmath90 the previous treatment applies in a straightforward manner .",
    "it is in fact still possible to define a parity , based on the even number of 1s , like @xmath91 .",
    "this is equivalent to determine if a word @xmath32 is in the subspace \\{000,011,101,110 } , also denoted @xmath92 . in this case , the set of parity constant and parity balanced words can be obtained using the auxiliary input @xmath93 in the circuit described before : @xmath94then @xmath22 gives the following set : @xmath95\\cup",
    "\\lbrack bb]\\cup \\lbrack cc]\\cup \\lbrack dd]\\cup \\lbrack ee]\\cup \\lbrack ff]\\cup \\lbrack gg]\\cup",
    "\\lbrack hh]\\cup \\lbrack ad]\\cup \\lbrack af]\\\\ & & \\cup \\lbrack ag]\\cup \\lbrack df]\\cup \\lbrack dg]\\cup \\lbrack fg]\\cup \\lbrack bc]\\cup \\lbrack be]\\cup \\lbrack bh]\\cup \\lbrack ce]\\cup \\lbrack ch]\\cup \\lbrack eh].\\end{aligned}\\ ] ] similarly , the set of parity balanced words is @xmath96\\cup \\lbrack ac]\\cup \\lbrack bd]\\cup \\lbrack cd]\\cup \\lbrack ae]\\cup \\lbrack ah]\\cup \\lbrack de]\\cup \\lbrack dh]\\\\ & & \\cup \\lbrack bf]\\cup \\lbrack bg]\\cup \\lbrack cf]\\cup \\lbrack cg]\\cup \\lbrack fe]\\cup \\lbrack fh]\\cup \\lbrack ge]\\cup \\lbrack gh].\\end{aligned}\\ ] ]    other parities can be defined considering different set of vectors . for our purposes",
    "it is sufficient to define a set composed by the elements @xmath97 .",
    "this plays the same role as @xmath98 . in this case , the set of parity constant word can be obtained by using @xmath99 as auxiliary input .",
    "the circuit has the following output : @xmath100as we have said before , this procedure gives @xmath101\\cup \\lbrack bb]\\cup \\lbrack cc]\\cup \\lbrack dd]\\cup \\lbrack ee]\\cup \\lbrack ff]\\cup \\lbrack gg]\\cup \\lbrack hh]\\cup \\lbrack ab]\\cup \\lbrack ac ] \\\\ & & \\cup\\lbrack ad]\\cup \\lbrack bc]\\cup \\lbrack bd]\\cup \\lbrack cd]\\cup \\lbrack ef]\\cup \\lbrack eg]\\cup \\lbrack eh]\\cup \\lbrack fg]\\cup \\lbrack fh]\\cup \\lbrack gh]\\end{aligned}\\]]and @xmath102\\cup \\lbrack af]\\cup \\lbrack ag]\\cup \\lbrack ah]\\cup \\lbrack be]\\cup \\lbrack bf]\\cup \\lbrack bg]\\cup \\lbrack bh]\\\\ & & \\cup \\lbrack ce]\\cup \\lbrack cf]\\cup \\lbrack cg]\\cup \\lbrack ch]\\cup \\lbrack de]\\cup \\lbrack df]\\cup \\lbrack dg]\\cup \\lbrack dh].\\end{aligned}\\ ] ] for reasons that will be clear later , it is important to define also the parity , based on the subspace @xmath103 , for which the set of parity constant words is obtained by setting as auxiliary input the state @xmath104 : @xmath105 the sets produced are @xmath106\\cup \\lbrack bb]\\cup \\lbrack cc]\\cup \\lbrack dd]\\cup \\lbrack ee]\\cup \\lbrack ff]\\cup \\lbrack gg]\\cup \\lbrack hh]\\cup \\lbrack ad]\\cup \\lbrack ae]\\\\ & & \\cup \\lbrack ah]\\cup \\lbrack de]\\cup \\lbrack dh]\\cup \\lbrack eh]\\cup \\lbrack bc]\\cup \\lbrack bf]\\cup \\lbrack bg]\\cup \\lbrack cf]\\cup \\lbrack cg]\\cup \\lbrack fg];\\end{aligned}\\ ] ] for the balanced case , we have @xmath107\\cup \\lbrack ac]\\cup \\lbrack af]\\cup \\lbrack ag]\\cup \\lbrack db]\\cup \\lbrack dc]\\cup \\lbrack df]\\cup \\lbrack dg]\\\\ & & \\cup \\lbrack eb]\\cup \\lbrack ec]\\cup \\lbrack ef]\\cup \\lbrack eg]\\cup \\lbrack hb]\\cup \\lbrack hc]\\cup \\lbrack hf]\\cup \\lbrack hg].\\end{aligned}\\ ] ]    it is indeed possible to generalize the circuit for an arbitrary length binary function co - domain . in particular , the length of the output binary string will be determined by the logarithm of the cardinality of the alphabet considered ( for example , two bits for a 4-elements alphabet ) .",
    "moreover , to each parity function subspace corresponds a unique input to be fed into the circuit shown before .",
    "the hadamard gate transforms each qubit of the input binary string into the state @xmath108 or @xmath109 depending on the value of the qubit . for the generic input @xmath110 ,",
    "we have    @xmath111    if @xmath112 , for @xmath92 , the set of parity balanced words is @xmath113\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd]\\cup \\lbrack eeee ] \\\\ & & \\cup \\lbrack ffff]\\cup \\lbrack gggg]\\cup \\lbrack hhhh]\\cup \\lbrack aaad]\\cup \\lbrack aadd ] \\\\ & & \\cup \\lbrack addd]\\cup \\lbrack aaaf]\\cup \\lbrack aaff]\\cup \\lbrack afff]\\cup \\lbrack aaag ] \\\\ & & \\cup \\lbrack aggg]\\cup \\lbrack dddf]\\cup \\lbrack ddff]\\cup \\lbrack dfff]\\cup \\lbrack fffg ] \\\\ & & \\cup \\lbrack ffgg]\\cup \\lbrack fggg]\\cup \\lbrack bbbc]\\cup \\lbrack bbcc]\\cup \\lbrack bccc ] \\\\ & & \\cup \\lbrack bbbe]\\cup \\lbrack bbee]\\cup \\lbrack beee]\\cup \\lbrack ccce]\\cup \\lbrack ccee ] \\\\ & & \\cup \\lbrack ceee]\\cup \\lbrack bbbh]\\cup \\lbrack bbhh]\\cup \\lbrack bhhh]\\cup \\lbrack ccch ] \\\\ & & \\cup \\lbrack cchh]\\cup \\lbrack chhh]\\cup \\lbrack eeeh]\\cup \\lbrack eehh]\\cup \\lbrack ehhh];\\end{aligned}\\ ] ] while the set of parity balanced words is @xmath114\\cup \\lbrack aacc]\\cup \\lbrack aaee]\\cup \\lbrack aahh]\\cup \\lbrack ddbb ] \\\\ & & \\cup \\lbrack ddcc]\\cup \\lbrack ddee]\\cup \\lbrack ddhh]\\cup \\lbrack ffbb]\\cup \\lbrack ffcc ] \\\\ & & \\cup \\lbrack ffee]\\cup \\lbrack ffhh]\\cup \\lbrack ggbb]\\cup \\lbrack ggcc]\\cup \\lbrack ggee ] \\\\ & & \\cup \\lbrack gghh]\\cup \\lbrack adbc]\\cup \\lbrack afce]\\cup \\lbrack agbc]\\cup \\lbrack agbe ] \\\\ & & \\cup \\lbrack agce]\\cup \\lbrack adce]\\cup \\lbrack adbe]\\cup \\lbrack adhe]\\cup \\lbrack agch ] \\\\ & & \\cup \\lbrack afce]\\cup \\lbrack afch]\\cup \\lbrack adbe]\\cup \\lbrack adbh]\\cup \\lbrack afbc ] \\\\ & & \\cup \\lbrack afbh]\\cup \\lbrack agbh]\\cup \\lbrack ageh]\\cup \\lbrack afeh]\\cup \\lbrack afbe].\\end{aligned}\\ ] ]    for @xmath115 , we have @xmath116\\cup \\lbrack bbbb]\\cup \\lbrack cccc]\\cup \\lbrack dddd]\\cup \\lbrack eeee ] \\\\ & & \\cup \\lbrack ffff]\\cup \\lbrack gggg]\\cup \\lbrack hhhh]\\cup \\lbrack aaab]\\cup \\lbrack aabb ] \\\\ & & \\cup \\lbrack abbb]\\cup \\lbrack aaac]\\cup \\lbrack aacc]\\cup \\lbrack accc]\\cup \\lbrack aaad ] \\\\ & & \\cup \\lbrack aadd]\\cup \\lbrack addd]\\cup \\lbrack bbbc]\\cup \\lbrack bbcc]\\cup \\lbrack bccc ] \\\\ & & \\cup \\lbrack bbbd]\\cup \\lbrack bbdd]\\cup \\lbrack bddd]\\cup \\lbrack cccd]\\cup \\lbrack ccdd ] \\\\ & & \\cup \\lbrack cddd]\\cup \\lbrack eeef]\\cup \\lbrack eeff]\\cup \\lbrack efff]\\cup \\lbrack eeeg ] \\\\ & & \\cup \\lbrack eegg]\\cup \\lbrack eggg]\\cup \\lbrack eeeh]\\cup \\lbrack eehh]\\cup \\lbrack ehhh ] \\\\ & & \\cup \\lbrack fffg]\\cup \\lbrack ffgg]\\cup \\lbrack fffh]\\cup \\lbrack ffhh]\\cup \\lbrack fhhh ] \\\\ & & \\cup \\lbrack gggh]\\cup \\lbrack gghh]\\cup \\lbrack ghhh]\\end{aligned}\\]]and @xmath117\\cup \\lbrack aaff]\\cup \\lbrack aagg]\\cup \\lbrack aahh]\\cup \\lbrack bbee ] \\\\ & & \\cup \\lbrack bbff]\\cup \\lbrack bbgg]\\cup \\lbrack bbhh]\\cup \\lbrack ccee]\\cup \\lbrack ffcc ] \\\\ & & \\cup \\lbrack ccgg]\\cup \\lbrack cchh]\\cup \\lbrack ddee]\\cup \\lbrack ddff]\\cup \\lbrack ddgg ] \\\\ & & \\cup \\lbrack ddhh]\\cup \\lbrack abef]\\cup \\lbrack abeg]\\cup \\lbrack abeh]\\cup \\lbrack acef ] \\\\ & & \\cup \\lbrack aceg]\\cup \\lbrack aceh]\\cup \\lbrack adef]\\cup \\lbrack adeg]\\cup \\lbrack adeh ] \\\\ & & \\cup \\lbrack abfg]\\cup \\lbrack abfh]\\cup \\lbrack acfg]\\cup \\lbrack acfh]\\cup \\lbrack adfg ] \\\\ & & \\cup \\lbrack adfh]\\cup \\lbrack agbh]\\cup \\lbrack agch]\\cup \\lbrack adgh].\\end{aligned}\\ ] ]    the same reasoning carried on for a four - letter alphabet can be applied to form the set of words @xmath69 and the relative intersections .",
    "a potential generalization could arise in the context of error correcting codes .",
    "this could be based on introducing an encoding in which the letters of the alphabet are associated to the codewords of a subspace quantum error correcting code .",
    "a form of parity could be defined by considering the remaining subspaces .",
    "let @xmath118 be a paired alphabet , where @xmath119 represents @xmath120 and @xmath121 represents @xmath122 .",
    "we first consider words of length @xmath123 .",
    "parity constant words are character constant , _",
    "i.e. _ consist of only one letter , whether it be lower or upper case .",
    "parity balanced words are character balanced .",
    "the words corresponding to the parity constant case are @xmath124,@xmath125,@xmath126,@xmath127,@xmath128,@xmath129,@xmath130,@xmath131 .",
    "those corresponding to the parity balanced case are @xmath132,@xmath133,@xmath134,@xmath135,@xmath136,@xmath137,@xmath138,@xmath139 .",
    "the words @xmath32 in the first list all satisfy @xmath140 ( in fact we have @xmath141 ) , whereas those @xmath32 in the second list all satisfy @xmath142 .",
    "thus , for words of length @xmath123 , we can determine with a single measurement whether or not @xmath143 .",
    "if @xmath58 then the @xmath44-constant words are @xmath144,@xmath132,@xmath145,@xmath126,@xmath137,@xmath129,@xmath131,@xmath139 and the @xmath44-balanced words are @xmath146,@xmath125,@xmath127,@xmath135,@xmath147,@xmath138,@xmath136,@xmath128 .",
    "so , @xmath63-constant and @xmath63-balanced may be thought of as case constant  and case balanced where the case can be upper or lower .",
    "for example , a commutator word ( reduced or not ) is always case balanced .",
    "case constant  and case balanced  are properties of @xmath148 , rather than @xmath32 .",
    "this is not the case for parity constant  and parity balanced .    if @xmath149 then the @xmath44-constant words are @xmath124,@xmath150,@xmath126,@xmath135,@xmath136,@xmath129,@xmath138,@xmath131 and the @xmath44-balanced words are @xmath132,@xmath151,@xmath145,@xmath127,@xmath128,@xmath137,@xmath139,@xmath147",
    "this does not seem to have any nice interpretation .",
    "the 10-balanced corresponds to the cyclic subgroup generated by @xmath132 and the 11-constant set solves a problem of union of subgroup membership for @xmath152 .",
    "the elements represented by these words are depicted on the following cayley graph portions :        note that @xmath32 is @xmath47-constant but not @xmath63-constant ; also @xmath32 is @xmath153-constant and not @xmath154-constant",
    ". then @xmath155 .",
    "this gives a method of solving the word problem for words of length @xmath156 using two quantum queries .",
    "for @xmath4 , if we are promised that @xmath32 is @xmath44-feasible then the quantum query complexity of the property `` is @xmath32 trivial ? '' seems to be @xmath123 .",
    "but this is not a reduction in complexity from the classical case .",
    "however , there is hope that an analogous method might be an improvement in quantum query complexity for longer words .",
    "we have the following :    for all @xmath1 , if we are promised that the word @xmath32 of length @xmath157 is @xmath47-feasible then the quantum query complexity of the property does @xmath32 represent an element of @xmath152 ?  is 1 .",
    "this is directly analogous to the deutsch - josza algorithm , and the proof is the same .",
    "it is unclear how to extend this approach for the word problem beyond two letters .",
    "here are examples of two groups where we require different promises :    consider the free abelian group @xmath158 .",
    "let @xmath32 be a four - letter word in @xmath12 which is in @xmath159 .",
    "then the quantum query complexity of the question does @xmath32 represent the trivial element of @xmath160 ?",
    "is at most @xmath161 .",
    "the first query asks whether @xmath162 or @xmath163 .",
    "if the former is true then @xmath32 is not trivial so stop . if @xmath164 then proceed to the second query , which is whether @xmath165 or @xmath166 .",
    "if the former is true then @xmath32 is trivial so stop .",
    "otherwise we know that @xmath167 and we may proceed to the third query .",
    "there are two possibilities .",
    "the first possibility is that we have a word with two @xmath119s and two @xmath168 or a word with two @xmath169s and two @xmath121s .",
    "that is , @xmath32 is a cyclic rotation of @xmath170 .",
    "the second possibility is that we have one each of @xmath119 , @xmath171 , @xmath169 and @xmath121 . in the first case",
    ", @xmath32 is nontrivial and in @xmath172 ; in the second case , @xmath32 is trivial and in @xmath173 .",
    "so our third query is whether @xmath174 or @xmath175 ; this solves the word problem provided @xmath32 is as promised .",
    "it is indeed possible to generalize this theorem to the 8-letters alphabet introduced earlier , by considering the four - paired alphabet @xmath176 , where the upper - case @xmath177 letters represent respectively @xmath178 . in particular",
    ", we have the following statement :    consider the free group @xmath179 .",
    "let @xmath32 be a 8-letter word in @xmath12 which is in @xmath180 .",
    "then the quantum query complexity of the question does @xmath32 represent the trivial element of @xmath160",
    "?  is at most @xmath161 .",
    "the first query asks whether @xmath181 or @xmath182 .",
    "if the former is true then @xmath32 is not trivial so stop . if @xmath183 then proceed to the second query , which is whether @xmath184 or @xmath185 .",
    "if the former is true then @xmath32 is trivial so stop .",
    "otherwise we know that @xmath186 and we may proceed to the third query .",
    "there are two possibilities .",
    "the first possibility is that we have a word with two @xmath119s two @xmath187s and two @xmath188 and two @xmath189 or a word with two @xmath190s two @xmath121s , two @xmath191s and two @xmath171s .",
    "that is , @xmath32 is a cyclic rotation of @xmath192 or @xmath193 .",
    "the second possibility is that we have one each of @xmath119 , @xmath171 , @xmath169 @xmath121 , @xmath190 , @xmath73,@xmath191 , and @xmath187 . in the first case ,",
    "@xmath32 is nontrivial and in @xmath194 ; in the second , @xmath32 is trivial and in @xmath195 .",
    "our third query is whether @xmath196 or @xmath197 ; this solves the word problem provided @xmath32 is as promised .",
    "looking at the first two queries it seems possible to generalize this result for every paired alphabet of dimension @xmath198 and words of length @xmath157 , by defining parities based on the even number of ones , like @xmath92 .",
    "this is always possible because of the equipartition of the binary strings with respect to hamming weight .",
    "the last parity required is the one used to identify words that are cyclic permutations of elements of the alphabet , for example , @xmath199 .",
    "it does not seem easy to distinguish between trivial and nontrivial four - letter words in the free group of rank @xmath123 using less than @xmath200 quantum queries .",
    "however , the first indication that classical query complexity can be improved upon in a nonabelian finitely presented group is the following :    consider the group presented by @xmath201 .",
    "suppose we are given a word @xmath32 of length @xmath200 in @xmath12 such that @xmath202 .",
    "then the quantum query complexity of the question does @xmath32 represent the trivial element of @xmath160 ?",
    "is at most @xmath161 .",
    "the first two queries are as in the proof of the last proposition .",
    "so we can assume that if we do not already know whether or not @xmath32 is trivial , @xmath203 and we may proceed to the third query .",
    "for this , we construct a syllable function@xmath204 it maps @xmath131,@xmath129,@xmath147,@xmath125,@xmath138,@xmath139,@xmath132,@xmath133 to @xmath53 and @xmath128,@xmath127,@xmath205,@xmath135,@xmath136,@xmath145,@xmath124,@xmath126 to @xmath29 .",
    "note that , since @xmath167 , @xmath32 is either a cyclic rotation of @xmath206 or @xmath32 is an anagram of @xmath207 .",
    "words in the first case are all trivial , because @xmath208 is a relation in @xmath160 , and these words are all balanced under the syllable function .",
    "words in the second case are nontrivial if and only if they are nontrivial commutators .",
    "commutators are constant under the syllable function .",
    "words in the second case which are trivial ( _ i.e. _ , not commutators ) are all balanced under the syllable function .",
    "thus a third query of is @xmath32 syllable - balanced or syllable - constant  will complete the solution of the word problem .",
    "the following table lists all 0-syllabs and 1-syllabs : @xmath209    while the group @xmath160 in the last proposition is nonabelian , it can be shown to have a free abelian subgroup of rank @xmath123 and index @xmath200 ; it is an extension of @xmath210 by the klein 4-group .",
    "consider the group presented by @xmath211 .",
    "suppose we are given a word @xmath32 of length @xmath212 in @xmath12 such that @xmath213 .",
    "then the quantum query complexity of the question does @xmath32 represent the trivial element of @xmath160 ?",
    "is at most @xmath161 .",
    "the first two queries are as in the proof of the last proposition .",
    "so we can assume that if we do not already know whether or not @xmath32 is trivial , @xmath214 and we may proceed to the third query .",
    "for this , we construct an extended syllable function whose output has a cardinality of @xmath198 .",
    "some of the elements are listed below : @xmath215 examples of this map are @xmath216 and @xmath217 note that since @xmath218 , @xmath32 is either a cyclic rotation of @xmath219 or @xmath32 is an anagram of @xmath220 .",
    "words in the first case are all trivial , because @xmath221 is a relation in @xmath160 , and these words are all balanced under the syllable function .",
    "words in the second case are nontrivial if and only if are nontrivial sequence of letters , that is not commutator - like sequence with respect to the presentation .",
    "words in the second case which are trivial ( _ i.e. _ , not trivial sequence ) are all balanced under the extended syllable function .",
    "thus a third query of is @xmath32 syllable - balanced or syllable - constant  will complete the solution of the word problem .",
    "the same considerations can be made by looking at different sets of generators or relations like @xmath222 and @xmath223 .",
    "it is important to notice that all the alternate sets of relations five groups isomorphic to the group considered in proposition 5 . to see this , it is sufficient to relabel the generators .",
    "the relation in @xmath160 is in fact very general and it is possible to obtain the same result with a whole family of similar relations .",
    "this can be done by varying the parity function used for the queries , choosing the presentation accordingly .",
    "moreover such a group is a free group of rank @xmath123 with @xmath224 .",
    "it is simple to see that since the other two generators , @xmath191 and @xmath73 , are not involved in the proof , it is possible to take the free product of @xmath160 with any free group and get to the same conclusion .",
    "in particular it is possible to extend the free product with _ any _ group and see the invariance of those three quantum queries under free products .",
    "notice that the choice of some particular kind of relations and an higher number of generators in the setting of the problem may increase the number of queries required .",
    "the reason of this is the exponential growth in the number of permutations , in particular , in those cases where splitting the words in parity balanced and parity constant does not help .",
    "generalize to other different sets of generators and possibly for free products , and limiting to commutator words might give interesting promises .",
    "we have extended the original deutsch - josza algorithm to functions of arbitrary length binary output , and we have introduced a more general concept of parity .",
    "the setting described allows us to consider maps between binary strings and alphabet of various length . in the quantum regime , some instances of the word problem for small alphabets and free groups ,",
    "can be solved in a reduced number of queries with respect to the deterministic classical case .",
    "extensions to more general groups and presentations may give interesting promises .",
    "it is not clear that the success of procedures similar to the ones discussed here depends or not on the group considered .",
    "we have seen that the @xmath225-parity of a function , for some fixed set of binary strings @xmath225 , can be determined with the deutsch - jozsa procedure , when @xmath225 consists of an appropriate subgroup ( in our examples , a subgroup of index two ) .",
    "it has to be verified that the toy problems considered here can be re - interpreted as instances of the abelian hidden subgroup problem .",
    "in such a case , the problems could be solved with a slightly different technique , but with essentially the same number of oracle queries .",
    "_ acknowledgments _ the authors would like to thank andrew childs for useful remarks .",
    "part of this work as been done while andrea casaccino was attending the seventh canadian summer school on quantum information , hosted by the perimeter institute for theoretical physics and the institute for quantum computing at the university of waterloo .",
    "9 r. c. lyndon and p. e. schupp , _ combinatorial group theory _ , reprint of the 1977 edition , classics in mathematics , springer - verlag , berlin , 2001 .",
    "m. a. nielsen and i. l. chuang , _ quantum computation and quantum information _ , cambridge university press , cambridge , 2000 .",
    "d. deutsch and r. josza , rapid solution of problems by quantum computation , _ proc .",
    "r. soc . of london",
    "a _ , * 439 * , 553 - 558 ( 1992 ) .",
    "e. farhi , j. goldstone , s. gutmann , and m. sipser , limit on the speed of quantum computation on determining parity , _ phys .",
    "_ , * 81 * , 5552 - 5554 ( 1998 ) ."
  ],
  "abstract_text": [
    "<S> we adapt the deutsch - josza algorithm to the context of formal language theory . </S>",
    "<S> specifically , we use the algorithm to distinguish between trivial and nontrivial words in groups given by finite presentations , under the promise that a word is of a certain type . </S>",
    "<S> this is done by extending the original algorithm to functions of arbitrary length binary output and with the introduction of a more general concept of parity . </S>",
    "<S> we provide examples in which properties inherited directly from the original algorithm allow to reduce the number of oracle queries with respect to the deterministic classical case . </S>",
    "<S> this has some consequences for the word problem in groups with a particular kind of presentation . </S>"
  ]
}