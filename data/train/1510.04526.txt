{
  "article_text": [
    "the _ diagonal _ of a multivariate power series with coefficients  @xmath3 is the univariate power series with coefficients  @xmath4 . particularly interesting",
    "is the class of diagonals of _ rational _ power series ( ie , taylor expansions of rational functions ) . in particular , diagonals of _ bivariate _ rational power series are always roots of nonzero bivariate polynomials ( ie , they are algebraic series )  @xcite .",
    "this property persists for multivariate rational power series , but only in positive characteristic , while the converse inclusion    algebraic series being diagonals of rational series    always holds  @xcite .",
    "as far as we are aware , the first occurrence of this result in the literature is an article of plya s  @xcite , which deals with a particular class of bivariate rational functions ; the proof uses elementary complex analysis . along the lines of plya s",
    "approach , furstenberg  @xcite gave a ( sketchy ) proof of the general result , over the field of complex numbers ; the same argument has been enhanced later  @xcite,@xcite .",
    "three more different proofs exist : a purely algebraic one that works over arbitrary fields of characteristic zero  ( * ? ? ?",
    "6.1 ) ( see also  ( * ? ? ?",
    "6.3.3 ) ) , one based on non - commutative power series  ( * ? ?",
    "5 ) , and a combinatorial proof  @xcite that relies on an encoding of the diagonal using unidimensional walks , seen themselves as words of a non - ambiguous context - free language .",
    "various other generalizations are known  @xcite .",
    "[ [ polynomial - equations ] ] polynomial equations + + + + + + + + + + + + + + + + + + + +    despite the richness of the topic and the fact that most proofs are constructive in essence , we were not able to find in the literature any _ explicit _ algorithm for computing a bivariate polynomial that cancels the diagonal of a general bivariate rational function .",
    "we design in section  [ sec : diagonals ] such an algorithm for computing a polynomial equation for the diagonal of an arbitrary bivariate rational function .",
    "we show in proposition  [ prop : generic ] that generically , the size of the minimal polynomial for the diagonal of a rational function is exponential in the degree of the input and that our algorithm computes it in quasi - optimal complexity ( theorem  [ thm : bound diagonals ] ) .",
    "the algorithm has two main steps that may be of independent interest .",
    "the first step is the computation of a polynomial equation for the residues of a bivariate rational function .",
    "we propose an efficient algorithm for this task , that is a polynomial - time version of bronstein s algorithm  @xcite ; corresponding size and complexity bounds are given in theorem  [ th : bronstein ] .",
    "the second step is the computation of a polynomial equation for the sums of a fixed number of roots of a given polynomial .",
    "we design an additive version of the platypus algorithm  @xcite and analyze it in theorem  [ thm : platypus - bound ] .",
    "[ [ recurrences ] ] recurrences + + + + + + + + + + +    since it is also classical that algebraic series are differentially finite ( ie , satisfy linear differential equations with polynomial coefficients ) , the coefficients of these bivariate diagonals satisfy linear recurrences and this leads to an optimal algorithm for the computation of their first terms  @xcite .",
    "we show however , that computing an annihilating polynomial of the diagonal first is usually not the right approach and that a direct computation of the recurrence  @xcite will be more efficient . for completeness",
    ", we mention that in more than two variables , diagonals of rational functions are still differentially finite  @xcite and currently the most efficient algorithm in that situation is that based on the griffiths - dwork method  @xcite .",
    "[ [ walks ] ] walks + + + + +    diagonals of rational functions appear naturally in enumerative combinatorics . in particular , the enumeration of unidimensional walks has been the subject of recent activity , see  @xcite and the references therein .",
    "three generating functions of different types of walks are of interest : the generating series @xmath5 of bridges , @xmath6 of excursions and @xmath7 of meanders ( these are defined precisely in section  [ sec : walks ] ) .",
    "the algebraicity of these generating functions is classical as well , and related to that of bivariate diagonals . beyond this structural result",
    ", several quantitative and effective results are known .",
    "explicit formulas give the generating functions in terms of implicit algebraic functions attached to the set of allowed steps in the cases of excursions  @xcite,@xcite , bridges and meanders  @xcite .",
    "moreover , bousquet - mlou gave a tight exponential bound on the degree of the annihilating polynomial in the case of excursions  @xcite , while banderier and flajolet designed an algorithm ( called the _ platypus algorithm _ ) computing it  @xcite .",
    "our message for these walks is that again , precomputing a polynomial equation is too costly if one is only interested in the enumeration .",
    "instead , we propose to precompute a differential equation for @xmath5 , that has polynomial size only , to use it for expanding  @xmath5 , and to recover the expansion of  @xmath6 from that of  @xmath5 .",
    "for meanders , we compute a polynomial - size differential equation for @xmath8 , from which the expansion of @xmath7 can be computed efficiently .",
    "our algorithms have quasi - linear complexity in the precision of the expansion , while keeping the precomputation step in polynomial complexity ( theorem  [ thm : walks ] ) .",
    "[ [ structure - of - the - article ] ] structure of the article + + + + + + + + + + + + + + + + + + + + + + + +    after a preliminary section on background and notation , we first discuss several special bivariate resultants of broader general interest in sections  [ sec : residues ] and  [ sec : summation of residues ] .",
    "next , we consider diagonals , the size of their minimal polynomials and an efficient way of computing annihilating polynomials in section  [ sec : diagonals ] .",
    "finally , we turn to walks in section  [ sec : walks ] and show how to compute the coefficients of the generating functions of excursions and of meanders efficiently",
    ".    a preliminary version of this article has appeared at the issac15 conference  @xcite . in the present version ,",
    "we give tight bounds in the main results ( theorems  [ thm : platypus - bound ] and  [ thm : bound diagonals ] ) , an improved algorithm for the algebraic residues and more detailed proofs throughout .    [ [ acknowledgments ] ] acknowledgments + + + + + + + + + + + + + + +    this work was supported in part by the project fastrelax anr-14-ce25 - 0018 - 01 .",
    "in this section , that might be skipped at first reading , we introduce notation and technical results that will be used throughout the article .      in this article , @xmath9 denotes a field of characteristic  0 , and @xmath10 an algebraic closure of @xmath9 .",
    "we denote by @xmath11_n$ ] the set of polynomials in @xmath11 $ ] of degree less than  @xmath12 .",
    "similarly , @xmath13 stands for the set of rational functions in @xmath14 with numerator and denominator in @xmath11_n$ ] , and @xmath15_n$ ] for the set of power series in @xmath15 $ ] truncated at precision  @xmath12 .    if  @xmath16 is a polynomial in @xmath17 $ ] , then its degree with respect to @xmath18 ( resp .",
    "@xmath19 ) is denoted @xmath20 ( resp .",
    "@xmath21 ) .",
    "we take the convention that @xmath22 .",
    "the _ bidegree _ of @xmath16 is the pair  @xmath23 .",
    "the notation @xmath24 without any subscript is used for univariate polynomials .",
    "inequalities between bidegrees are component - wise .",
    "the set of polynomials in @xmath17 $ ] of bidegree less than @xmath25 is denoted by @xmath17_{n , m}$ ] , and similarly for more variables .",
    "the _ valuation _ of a polynomial  @xmath26 $ ] or a power series  @xmath27 $ ] is its smallest exponent with nonzero coefficient .",
    "it is denoted @xmath28 , with the convention  @xmath29 .",
    "the _ reciprocal _ of a polynomial  @xmath30 $ ] is the polynomial @xmath31 .",
    "if @xmath32 with @xmath33 and @xmath34 for all @xmath35 , the notation @xmath36 stands for the generating series of the _ newton sums _ of @xmath16 : @xmath37    a polynomial is called _ square - free _ when its gcd with its derivative is trivial .",
    "a _ square - free decomposition _ of a nonzero polynomial @xmath38 $ ] , where @xmath39 or @xmath11 $ ] , is a factorization  @xmath40 , with @xmath41 $ ] square - free , the @xmath42 s pairwise coprime and  @xmath43 .",
    "the corresponding _ square - free part _ of  @xmath44 is the polynomial  @xmath45 .",
    "if @xmath44 is square - free then @xmath46 .",
    "the coefficient of  @xmath47 in a power series @xmath48 $ ] is denoted @xmath49a$ ] . if @xmath50 , then @xmath51 denotes the polynomial @xmath52 .",
    "the exponential series @xmath53 is denoted @xmath54 .",
    "the _ hadamard product _ of two power series  @xmath55 and  @xmath5 is the power series  @xmath56 such that @xmath49a\\odot b=[x^n]a\\cdot[x^n]b$ ] for all @xmath12 .    if @xmath57 is a bivariate power series in @xmath58 $ ] , the _ diagonal _ of @xmath0 , denoted @xmath1 is the univariate power series in  @xmath59 $ ] defined by @xmath60      we recall classical complexity notation and facts for later use .",
    "let @xmath9 be again a field of characteristic zero .",
    "unless otherwise specified , we estimate the cost of our algorithms by counting arithmetic operations in @xmath9 ( denoted `` ops . '' ) at unit cost .",
    "the soft - o notation @xmath61 indicates that polylogarithmic factors are omitted in the complexity estimates ( see  ( * ? ? ?",
    "25.8 ) for a precise definition ) .",
    "arithmetic size _ of an element of  @xmath9 is  1 . that of a univariate polynomial is its degree plus  1 ( ie",
    ", we are considering _ dense _ representations ) . that of tuples of polynomials is the sum or their sizes , and this defines the size for rational functions and multivariate polynomials .",
    "we say that an algorithm has quasi - linear complexity if its complexity is @xmath62 , where @xmath63 is the maximal arithmetic size of the input and of the output . in that case , the algorithm is said to be _ quasi - optimal_.    * univariate operations .",
    "* throughout this article we will use the fact that most operations on polynomials , rational functions and power series in one variable can be performed in quasi - linear time .",
    "standard references for these questions are the books  @xcite and  @xcite , as well as  @xcite .",
    "the needed results are summarized in fact  [ fact : complexity ] below .",
    "[ fact : complexity ] the following operations can be performed in @xmath64 ops . in @xmath9 :    addition , product and differentiation of elements in @xmath11_n$ ] , @xmath13 and @xmath15_n$ ] ; integration in @xmath11_n$ ] and @xmath15_n$ ] ;    extended gcd , square - free decomposition and resultant in @xmath11_n$ ] ;    multipoint evaluation in @xmath11_n$ ] , @xmath13 at @xmath65 points in @xmath9 ; interpolation in @xmath11_n$ ] and @xmath13 from @xmath12 ( resp .",
    "@xmath66 ) values at pairwise distinct points in  @xmath9 ;    inverse , logarithm , exponential in @xmath15_n$ ] ( when defined ) ;    conversions between @xmath30_n$ ] and @xmath67_n$ ] .    * multivariate operations . *",
    "basic operations on polynomials , rational functions and power series in several variables are hard questions from the algorithmic point of view .",
    "for instance , no general quasi - optimal algorithm is currently known for computing resultants of bivariate polynomials , even though in several important cases such algorithms are available  @xcite .",
    "multiplication is the most basic non - trivial operation in this setting .",
    "the following result can be proved using kronecker s substitution ; it is quasi - optimal for a fixed number of variables @xmath68 . for polynomials with more complicated monomial supports , or",
    "when the number of variables grows , more sophisticated techniques apply  @xcite .",
    "[ fact : multiprod ] for fixed  @xmath69 , polynomials in @xmath70_{d_1 , \\dots , d_m}$ ] and power series in @xmath71_{d_1 , \\dots , d_m}$ ] can be multiplied using @xmath72 ops .",
    "a related operation is multipoint evaluation and interpolation .",
    "the simplest case is when the evaluation points form an @xmath69-dimensional tensor product grid @xmath73 , where @xmath74 is a set of cardinal @xmath75 ; it extends to subgrids of tensor product grids  @xcite .",
    "[ fact : multieval]@xcite for fixed @xmath69 , polynomials in @xmath70_{d_1 , \\dots , d_m}$ ] can be evaluated and interpolated from values that they take on @xmath76 points that form an @xmath69-dimensional tensor product grid using @xmath72 ops .",
    "again , the complexity in fact  [ fact : multieval ] is quasi - optimal for fixed  @xmath68 .",
    "a general ( although non - optimal ) technique to deal with more involved operations on multivariable algebraic objects ( eg , in @xmath17 $ ] ) is to use ( multivariate ) evaluation and interpolation on polynomials and to perform operations on the evaluated algebraic objects using facts  [ fact : complexity][fact : multieval ] . to put this strategy in practice , the size of the output needs to be well controlled .",
    "we illustrate this philosophy on the example of resultant computation , based on the following easy variation of  ( * ? ? ?",
    "* thm .  6.22 ) .",
    "[ fact : resultant ] let @xmath77 and @xmath78 be bivariate polynomials of respective bidegrees @xmath79 and @xmath80 . then , @xmath81 and this is an equality whenever one of @xmath82 or @xmath83 is zero .",
    "[ algo resultant ] let @xmath16 and @xmath44 be polynomials in @xmath84_{d_1 , \\dots , d_m , d}$ ]",
    ". then @xmath85 belongs to @xmath70_{d_1 , \\dots , d_m}$ ] , where @xmath86 .",
    "moreover , the coefficients of @xmath87 can be computed using @xmath88 ops . in  @xmath9 .",
    "the degrees estimates follow from fact  [ fact : resultant ] . to compute @xmath87",
    ", we use an evaluation - interpolation scheme : @xmath16 and @xmath44 are evaluated at @xmath89 points @xmath90 forming an @xmath69 dimensional tensor product grid ; @xmath91 univariate resultants in @xmath92_d$ ] are computed ; @xmath87 is recovered by interpolation .",
    "by fact  [ fact : multieval ] , the evaluation and interpolation steps are performed in @xmath93 ops .",
    "the second one has cost @xmath94 . using the inequality",
    "@xmath95 concludes the proof .",
    "we conclude this section by recalling two complexity results on bivariate polynomials and rational functions ; for proofs , see  @xcite and  @xcite .",
    "[ fact : sqfree ]    a square - free decomposition of polynomials in + @xmath17_{d_x , d_y}$ ] can be computed using @xmath96 ops .",
    "if @xmath97 $ ] are non - zero coprime polynomials such that @xmath98 and @xmath44 is primitive wrt @xmath19 , then a minimal telescoper for @xmath99 of degree @xmath100 and order at most @xmath101 can be computed using @xmath102 ops , where @xmath103 and @xmath101 is the degree in @xmath19 of any square - free part of @xmath44 .",
    "recall that a minimal telescoper for @xmath99 is a differential operator @xmath104\\langle \\partial_x\\rangle$ ] of minimal order such that @xmath105 with @xmath106 $ ] .",
    "we are interested in a polynomial that vanishes at some or all of the residues of a given rational function .",
    "it is a classical result in symbolic integration that in the case of simple poles , there is a resultant formula for such a polynomial , first introduced by rothstein  @xcite and trager  @xcite .",
    "this was later generalized by bronstein  @xcite to accommodate multiple poles as well .",
    "however , as mentioned by bronstein , the complexity of his method grows exponentially with the multiplicity of the poles .",
    "instead , we develop in this section an algorithm with polynomial complexity .",
    "let @xmath107 be a nonzero element in @xmath108 , where @xmath109 are two coprime polynomials in @xmath92 $ ] .",
    "let also @xmath110 be a divisor of @xmath44 such that @xmath110 and @xmath111 are coprime . in our context",
    ", @xmath110 represents the subset of the roots of @xmath44 at which we want to compute an annihilating polynomial of the residues .",
    "let @xmath112 be a square - free decomposition of  @xmath110 .",
    "for @xmath113 , if @xmath114 is a root of  @xmath42 in an algebraic extension of  @xmath9 , then it is simple and the residue of  @xmath115 at  @xmath114 is the coefficient of  @xmath116 in the laurent expansion of @xmath117 at  @xmath118 .",
    "consider the polynomial @xmath119 . since @xmath114 is a simple root of @xmath42",
    ", @xmath120 satisfies @xmath121 and @xmath122 .",
    "therefore , the rational function @xmath123 defined by @xmath124 satisfies @xmath125 and has the advantage of being regular at @xmath118 .",
    "the residue of @xmath115 at @xmath114 may hence be computed as the evaluation at @xmath126 of @xmath127g(y , t)$ ] . if this coefficient is denoted  @xmath128 , with polynomials @xmath129 and @xmath130 ,",
    "the residue at  @xmath114 is thus a root of @xmath131 .",
    "when the multiplicity of the pole @xmath132 , this is exactly the rothstein - trager resultant .",
    "this computation leads to algorithm  [ algo : bronstein ] , which avoids the exponential blowup of the complexity that would follow from a symbolic precomputation of the bronstein resultants .",
    "algorithm * * algebraicresidues**@xmath133    three polynomials @xmath16 , @xmath44 and @xmath110 a divisor of  @xmath44 in @xmath92 $ ] such that @xmath110 and @xmath111 are coprime ( @xmath110 can be @xmath44)a polynomial in @xmath134 $ ] canceling the residues of @xmath99 at the roots of  @xmath110 compute @xmath135 a square - free decomposition of  @xmath110 ;  @xmath136 @xmath137 ; @xmath138 ; expand @xmath139 ; write @xmath140 as @xmath141 with @xmath129 and @xmath130 coprime polynomials ; @xmath142 ; @xmath143    [ ex : bronstein ] let @xmath144 be an integer , and let @xmath145 $ ] be the rational function @xmath146 . the poles have order  @xmath147 . in this example , the algorithm can be performed by hand for arbitrary  @xmath63 : a square - free decomposition has  @xmath148 and  @xmath149 , the other @xmath42 s being  1",
    ". then  @xmath150 and the next step is to expand @xmath151 expanding the binomial series gives the coefficient of  @xmath152 as  @xmath153 , with @xmath154 the residues are then cancelled by  @xmath155 , namely by @xmath156 ( equality   is a consequence of the identity  ] @xmath157 , which implies @xmath158 , while @xmath159 . )    in our applications , as in the previous example , the polynomials @xmath16 and  @xmath44 have coefficients that are themselves polynomials in another variable  @xmath18 .",
    "the rest of this section is devoted to the proof of the following .",
    "[ th : bronstein ] let @xmath160 .",
    "let @xmath110 be a divisor of  @xmath44 , @xmath161 be a square - free part of it wrt @xmath19 , and denote by @xmath69 the number of factors in the square - free decompositions of @xmath110 .",
    "let  @xmath162 be bounds on the bidegree of @xmath163 .",
    "then the polynomial computed by algorithm  [ algo : bronstein ] annihilates the residues of  @xmath99 at the roots of @xmath110 , has degree in  @xmath164 bounded by  @xmath165 and degree in  @xmath18 bounded by @xmath166 it can be computed in @xmath167 operations in  @xmath9 .",
    "note that rewriting the bound under the equivalent form @xmath168 shows that the degree in  @xmath18 is bounded by  @xmath169 , independently of the multiplicities .",
    "the complexity is also bounded independently of the multiplicities by @xmath170 .",
    "by fact  [ fact : resultant ] , the resultant  @xmath171 has degree in  @xmath164 exactly @xmath172 so that the degree in  @xmath164 of the result is bounded by @xmath173 .",
    "the degree in  @xmath18 is the sum of the degrees in  @xmath18 of all the  @xmath171 s . in order to derive a bound on the degree of  @xmath171 using fact  [",
    "fact : resultant ] , we first consider the degrees in  @xmath18 and  @xmath19 of  @xmath129 and  @xmath130 .",
    "the important point is that these degrees do not depend so much on  @xmath44 as on its square - free part . in order to quantify this precisely , we first focus on power series expansion of a special type about which we state a few useful lemmas .    for a polynomial  @xmath174 $ ] and a real number  @xmath114 ,",
    "we denote by @xmath175 the subset of  @xmath176 $ ] formed of power series that can be written @xmath177 with @xmath178 $ ] and @xmath179 , for all @xmath12 ( recall that @xmath180 , which makes it convenient to allow negative  @xmath114 ) .",
    "this notation extends to the case when @xmath18 is a tuple of variables , with @xmath114 replaced by a tuple of real numbers .",
    "the main properties of @xmath175 are summarized as follows .",
    "[ growth ] let @xmath181 $ ] , @xmath182 and @xmath183 $ ] .    the set @xmath175 is a subring of  @xmath176 $ ] ;    let @xmath184 with @xmath185 , then @xmath186 ;    the products obey @xmath187    for  _ ( 3 ) _ , if @xmath188 and @xmath189 belong respectively to  @xmath175 and @xmath190 , then the @xmath12th coefficient of their product is a sum of terms of the form @xmath191 .",
    "therefore , the degree of the numerator is bounded by @xmath192 , whence _ ( 3 ) _ is proved .",
    "property  _ ( 1 ) _ is proved similarly , the @xmath12th coefficient of the product being a sum of terms @xmath193 . in property  _ ( 2 ) _ , the condition on  @xmath194 makes  @xmath195 well - defined .",
    "the result then follows from  _",
    "( 1)_.    [ coro : invpol ] let  @xmath196 $ ] be such that  @xmath197 .",
    "let @xmath198 be a square - free part of @xmath44 and @xmath199 its total degree in @xmath200 .",
    "then @xmath201    for all  @xmath35 , the coefficient of  @xmath202 in  @xmath44 has degree at most  @xmath203 .",
    "thus @xmath204 .",
    "writing @xmath205 and using part  _ ( 2 ) _ of lemma  [ growth ] with  @xmath206 then gives the result when  @xmath44 is square - free .",
    "using @xmath207 gives the result for a pure power by part  _ ( 1 ) _ of the lemma .",
    "the general case then follows from part  _ ( 3 ) _ by induction on the number of parts in the square - free decomposition of  @xmath44 , using additivity of degree and total degree .",
    "now , we turn to the fraction @xmath208 , with @xmath209 and @xmath210 .",
    "we use bidegrees with respect to @xmath211 and observe that @xmath212 the total degrees in @xmath213 behave similarly : that of  @xmath214 is @xmath215 , while that of @xmath216 is @xmath217 .",
    "corollary  [ coro : invpol ] gives @xmath218 from there , part  _ ( 3 ) _ of lemma  [ growth ] shows that the product of these series belongs to @xmath219 thus the coefficient @xmath140 of @xmath220 in the power series expansion of @xmath221 can be written as  @xmath222 with @xmath223 and finally @xmath224 whence @xmath225 fact  4 can now be exploited , leading to a bound on the degree of the resultant : @xmath226    next , we sum over the indices  @xmath35 corresponding to factors of  @xmath110 .",
    "this leads to the following bound for the degree in  @xmath18 of the result @xmath227 this bound being an increasing function of each of the degrees that appear , it is itself upper bounded by replacing any of those degrees by an upper bound .    in the context of theorem",
    "[ th : bronstein ] , the bidegrees of @xmath16 , @xmath44 and @xmath110 are bounded by @xmath228 , while those of  @xmath198 and @xmath161 are bounded by @xmath162 .",
    "this leads to the bound @xmath229 which rewrites as the bound in the theorem and completes that part of the proof .",
    "by fact  [ fact : sqfree ] , a square - free decomposition of @xmath110 can be computed using @xmath96 ops .",
    "we now focus on the computations performed inside the @xmath35th iteration of the loop and write @xmath230 for the bidegree of  @xmath42 .",
    "computing @xmath231 requires an exact division of polynomials of bidegrees at most @xmath232 ; this division can be performed by evaluation - interpolation in @xmath233 ops .",
    "similarly , the trivariate polynomial @xmath120 can be computed by evaluation - interpolation wrt @xmath211 in time @xmath234 . by eq .  , both @xmath235 and @xmath236 have bidegrees at most @xmath237 , where @xmath238 and @xmath239 .",
    "they can be computed by evaluation - interpolation in @xmath240 ops .",
    "finally , the resultant @xmath241 has bidegree at most @xmath242 , and since the degree in  @xmath19 of @xmath243 and  @xmath42 is at most  @xmath244 , it can be computed by evaluation - interpolation in @xmath245 ops by lemma  [ algo resultant ] .",
    "the total cost of the loop is thus @xmath246 , where @xmath247 using the ( crude ) bounds @xmath248 , @xmath249 , @xmath250 and @xmath251 shows that @xmath252 is bounded by @xmath253 which , by using the inequalities @xmath254 and @xmath255 , is seen to belong to @xmath256 , as was to be proved .",
    "this completes the proof of the theorem .",
    "* remark . *",
    "note that one could also use hermite reduction combined with the usual rothstein - trager resultant in order to compute a polynomial @xmath257 that annihilates the residues .",
    "indeed , hermite reduction computes an auxiliary rational function that admits the same residues as the input , while only having simple poles .",
    "a close inspection of this approach provides the same bound @xmath101 for the degree in @xmath19 of @xmath257 , but a less tight bound for its degree in @xmath18 , namely worse by a factor of @xmath101 .",
    "the complexity of this alternative approach appears to be @xmath258 ( using results from  @xcite ) , to be compared with the complexity bound from theorem  [ th : bronstein ] .",
    "given a polynomial  @xmath259 $ ] of degree  @xmath63 with coefficients in a field  @xmath9 of characteristic  0 , let @xmath260 be its ( not necessarily distinct ) roots in the algebraic closure of  @xmath9 . for any positive integer @xmath261 , the polynomial of degree @xmath262 defined by @xmath263 has coefficients in  @xmath9 .",
    "this section discusses the computation of  @xmath264 summarized in algorithm  [ algo : sigma_c ] , which can be seen as an additive analogue of the _ platypus algorithm _ of banderier and flajolet  @xcite .",
    "algorithm * * purecomposedsum**@xmath265    a polynomial @xmath16 of degree @xmath63 in @xmath92 $ ] , a positive integer @xmath266the polynomial @xmath267 from eq .",
    "@xmath268 @xmath269 @xmath270 @xmath271 @xmath272f)\\odot\\sum{n!y^n}\\bmod y^{d+1}$ ] @xmath273    we recall two classical formulas for the generating function of the newton sums ( see , eg , @xcite ) , the second one being valid for monic @xmath16 only : @xmath274 truncating these formulas at order  @xmath147 makes  @xmath36 a representation of the polynomial  @xmath16 ( up to normalization ) , since both conversions above can be performed quasi - optimally by newton iteration  @xcite . the key for algorithm  [ algo : sigma_c ] is the following variant of  @xcite .",
    "let  @xmath259 $ ] be a polynomial of degree  @xmath63 , let @xmath36 denote the generating series of its newton sums and let @xmath275 be the series @xmath276 .",
    "let @xmath277 be the polynomial in @xmath278 $ ] defined by @xmath279\\exp\\left(\\sum_{n \\ge 1}{(-1)^{n-1}t_n\\frac{z^n}{n } } \\right).\\ ] ] then the following equality holds @xmath280    by construction , the series @xmath275 is @xmath281 when applied to the polynomial  @xmath267 , this becomes @xmath282\\prod_{i=1}^{d}{\\left(1+z \\exp(\\alpha_i y)\\right)}.      \\end{aligned}\\ ] ] this expression rewrites : @xmath283\\exp\\left(\\sum_{i=1}^{d}\\log(1+z \\exp({\\alpha_i y}))\\right)&= [ z^c]\\exp\\left(\\sum_{i=1}^{d}\\sum_{m\\ge 1}{(-1)^{m-1}\\exp({\\alpha_i m y})\\frac{z^m}{m}}\\right)\\\\      & = [ z^c]\\exp\\left(\\sum_{m\\ge 1}{(-1)^{m-1}s(m y)\\frac{z^m}{m}}\\right ) ,      \\end{aligned}\\ ] ] and the last expression equals @xmath284 .",
    "the correctness of algorithm  [ algo : sigma_c ] follows from observing that the truncation orders @xmath285 in @xmath19 and @xmath286 in @xmath164 of the power series involved in the algorithm are sufficient to enable the reconstruction of  @xmath264 from its first newton sums by",
    ".    we will be interested in the case where  @xmath16 is a polynomial in  @xmath17 $ ] .",
    "then , the coefficients of @xmath264 wrt @xmath19 may have denominators .",
    "we analyze the structure of the coefficients of @xmath267 as elementary symmetric functions of the roots of @xmath16 in order to compute bounds on the bidegree of the polynomial obtained by clearing out these denominators .",
    "the rest of this section proves the following result .",
    "[ thm : platypus - bound ] let @xmath287_{d_x+1,d_y+1}$ ] , and let @xmath288 be a positive integer .",
    "let @xmath289 $ ] denote the leading coefficient of @xmath16 wrt @xmath19 and let @xmath267 be defined as in  eq .  .",
    "we also denote @xmath290 then @xmath291 is a polynomial in @xmath17 $ ] that cancels all sums @xmath292 of @xmath293 roots @xmath294 of @xmath16 , with @xmath295 , and satisfies @xmath296 moreover , this polynomial can be computed in @xmath297 ops .",
    "these bounds are sharp .",
    "experiments suggest that for generic @xmath16 of bidegree @xmath232 the minimal polynomial of @xmath292 has bidegree precisely @xmath298 . similarly , the complexity result is quasi - optimal up to a factor of @xmath293 only .",
    "we start with the following effective version of a very classical result on symmetric functions  ( * ? ? ?",
    "* theorem 6.21 ) .",
    "[ lem : symmetric functions ] let @xmath299 be indeterminates , and @xmath300 be the associated elementary symmetric functions .",
    "let @xmath301 $ ] be a symmetric polynomial satisfying @xmath302 then @xmath16 can be expressed as a polynomial in @xmath300 of total degree at most @xmath63 .",
    "this is a consequence of the form of the matrix of the change of bases from the elementary symmetric functions to the monomial symmetric functions as described for instance in the proof of ( * ? ? ?",
    "* theorem 7.4.4 ) .",
    "since @xmath16 is symmetric and has degree at most @xmath63 with respect to each variable , it can be written as a linear combination of monomial symmetric functions of the form @xmath303 , where @xmath304 for all @xmath35 .",
    "these monomial symmetric functions can in turn be written as linear combinations of elementary symmetric functions of the form @xmath305 where @xmath306 , which is exactly the result of the lemma .",
    "for the proof of the bounds in theorem  [ thm : platypus - bound ] , we write @xmath307 let @xmath308 denote the elementary symmetric functions of the @xmath309 s .",
    "then , the elementary symmetric functions of the roots @xmath310 of @xmath267 have degree @xmath311 in each @xmath309 .",
    "therefore , by lemma  [ lem : symmetric functions ] , the coefficients of @xmath267 are polynomials of total degree at most @xmath311 in @xmath312 .",
    "from there , the bound on @xmath313 is immediately derived from the classical relations @xmath314 .",
    "the computation is performed by evaluation and interpolation at @xmath315 values of  @xmath18 . by fact",
    "[ fact : complexity ] , at each of these values , the computation of the truncated series expansions  @xmath316 and @xmath275 in  @xmath317_{1+d_y}$ ] have complexity  @xmath318 ; so do the computations of @xmath319 and the last step ; the most expensive step is the computation of  @xmath0 , which costs  @xmath320 ops . in  @xmath9 .",
    "since this is executed @xmath321 times , the total cost is  @xmath322 .",
    "in this section we turn to our main topic , namely the computation of annihilating polynomials for diagonals of bivariate rational functions .",
    "the algorithm relies on a classical expression of the diagonal as a sum of residues ( see lemma  [ lem : diagonal - as - residues ] ) , and on the results of sections  [ sec : residues ] and  [ sec : summation of residues ] .",
    "the conclusions of the analysis of algorithm  [ algo : diagonal ] can be found in theorem  [ thm : bound diagonals ] and proposition [ prop : generic ] .",
    "let @xmath323 be a rational function in @xmath324 , whose denominator does not vanish at @xmath325",
    ". then the diagonal of @xmath0 is defined as @xmath326 .",
    "a first basic , but very important , remark is that @xmath327\\frac{1}{y}f\\!\\left(\\frac{t}{y } , y\\right).\\ ] ] when @xmath328 , this coefficient can be viewed as a cauchy integral and computed by the residue formula  @xcite . for general @xmath9 ( of characteristic @xmath329 ) , we proceed similarly with a purely algebraic approach , adapted from  ( * ? ?",
    "* theorem  6.1 ) .",
    "( the reader who is not interested in the general proof may also skip directly to lemma  [ lem : diagonal - as - residues ] . )",
    "the starting point is the partial fraction decomposition of @xmath330 considered as a rational function in @xmath331 : @xmath332 where @xmath333 in particular , @xmath334 is the residue of @xmath335 at @xmath336 for all @xmath337 . by puiseux s theorem",
    ", there exists @xmath338 such that the @xmath339 s and @xmath340 s all lie in the field @xmath341 . in order to apply the operator",
    "@xmath342 $ ] on both sides of equation  , it is necessary to find a ring where both the equality and the operator @xmath342 $ ] make sense .",
    "we are going to check that @xmath343 and @xmath342 $ ] computed coefficient - wise are suitable for this .",
    "first , as a rational function , it is immediate that @xmath344 belongs to @xmath345 . in order to expand the right - hand side",
    ", we consider each term separately and distinguish between the cases @xmath346 and @xmath347 .",
    "if @xmath348 , @xmath349 can be written as follows : @xmath350.\\ ] ] since @xmath351 , the series @xmath352 actually belongs to @xmath353[[y]]\\cong\\overline{\\kk}[[y]][[t^{1/n}]]$ ] .",
    "hence @xmath354((t^{1/n}))\\subset \\aa$ ] , and in particular @xmath342f_{i , j}=0 $ ] . on the other hand ,",
    "if @xmath347 then @xmath349 can be expanded directly in @xmath345 as : @xmath355 since @xmath356 and @xmath357 , this last quantity is the sum of a convergent series ( in the sense of formal laurent series ) of elements of @xmath345 , hence belongs to @xmath345 . in this case",
    "we obtain @xmath342f_{i , j}=r_{i,1}$ ] .",
    "we have everything we need to apply @xmath342 $ ] on both sides of equation  , leading to the generalization to any base field of characteristic @xmath329 of furstenberg s classical result  @xcite .",
    "[ lem : diagonal - as - residues ] if @xmath358 is a rational function in  @xmath324 whose denominator does not vanish at  @xmath325 , then @xmath359 where @xmath360 is the set of poles of @xmath361 .",
    "the poles @xmath362 such that @xmath363 are called the _ small branches _ of  @xmath44 and we denote their number by  @xmath364 .",
    "since the elements of  @xmath360 are algebraic and finite in number and residues are obtained by series expansion , which entails only rational operations , it follows that the diagonal is algebraic too .",
    "combining the algorithms of the previous section gives algorithm  [ algo : diagonal ] that produces a polynomial equation for @xmath1 .",
    "let @xmath144 be an integer , and let @xmath365 be the rational function @xmath366 .",
    "the diagonal of @xmath367 is equal to @xmath368 by the previous argument , it is an algebraic series , which is the sum of the residues of the rational function  @xmath369 of example  [ ex : bronstein ] over its small branches ( with @xmath18 replaced by @xmath370 ) . in this case , the denominator is  @xmath371 .",
    "it has one solution tending to  0 with  @xmath370 ; the other one tends to  @xmath372 .",
    "thus the diagonal is canceled by the quadratic polynomial  .",
    "algorithm * algebraicdiagonal*(a / b )    two polynomials @xmath55 and @xmath5 in @xmath324 , with @xmath373a polynomial @xmath374 $ ] such that @xmath375 @xmath376 , @xmath377 , @xmath378 @xmath379 @xmath380 @xmath381 number of small branches of @xmath44 @xmath382 @xmath383 @xmath384    for an integer  @xmath385 , we consider the rational function @xmath386 of bidegree  @xmath387 .",
    "the first step of algorithm  [ algo : diagonal ] produces @xmath388 of bidegree  @xmath389 , whose denominator is irreducible with @xmath63 small branches .",
    "from there , algorithm  [ algo : diagonal ] computes a polynomial  @xmath390 annihilating @xmath391 , which is experimentally irreducible and whose bidegrees for @xmath392 are @xmath393 , @xmath394 , @xmath395 , @xmath396 . from these values",
    ", it is easy to conjecture that the bidegree is given by  @xmath397 of exponential growth in the bidegree of @xmath367 . in general , these bidegrees do not grow faster than in this example . in theorem  [ thm : bound diagonals ] below , we prove bounds that are barely larger than the values above .",
    "* sloped diagonals . *",
    "if  @xmath398 and @xmath399 are relatively prime positive integers and @xmath400 , then the _ sloped diagonal _ of @xmath0 , @xmath401 is @xmath402 .",
    "direct manipulations show that @xmath403 so that our bounds and algorithm apply almost directly to these more general diagonals .",
    "the rest of this section is devoted to the derivation of bounds on the complexity of algorithm  [ algo : diagonal ] and on the size of the polynomial it computes , which are given in theorem  [ thm : bound diagonals ]",
    ".    * degrees . *",
    "a bound on the bidegree of @xmath404 will be obtained from the bounds successively given by theorems  [ th : bronstein ] and  [ thm : platypus - bound ] .    in order to follow the impact of the change of variables in the first step , we define the _ lower diagonal degree _ and _ upper diagonal degree _ of a polynomial @xmath405 respectively as the integers @xmath406    we collect the properties of interest in the following .",
    "[ lemma : slope ] for any  @xmath16 and  @xmath44 in  @xmath17 $ ] ,    @xmath407 and @xmath408 ;    @xmath409 ;    there exists a polynomial @xmath410 $ ] , such that + @xmath411 , with @xmath412 and @xmath413    @xmath414 .",
    "part  ( _ 1 ) _ is immediate .",
    "the quantities @xmath415 and @xmath416 are nothing else than @xmath417 and @xmath418 , which makes parts  ( _ 2 ) _ and  ( _ 3 ) _ clear too . from there , we get the identity @xmath419 for arbitrary  @xmath16 and  @xmath44 , whence @xmath420 and part  ( _ 4 ) _ is a consequence of parts  ( _ 1 ) _ and  ( _ 3)_.    thus , starting with a rational function @xmath421 , with @xmath232 a bound on the bidegrees of @xmath55 and @xmath5 , and @xmath162 a bound on the bidegree of a square - free part @xmath422 of @xmath5 , the first step of the algorithm constructs @xmath423 , with polynomials  @xmath16 and  @xmath44 and @xmath424 we first explain how to compute the number @xmath293 of small branches of @xmath44 .    * small branches . *",
    "it is classical that for a polynomial  @xmath425 $ ] , the number of its solutions tending to  0 can be read off its newton polygon ( see , e.g.  @xcite ) .",
    "this polygon is the lower convex hull of the union of @xmath426 for @xmath427 such that  @xmath428 .",
    "the number of solutions tending to  0 is given by the minimal @xmath19-coordinate of its leftmost points .",
    "since the number of small branches counts only distinct solutions , it is thus given by @xmath429p^\\star).\\ ] ]    the change of variables  @xmath430 changes the coordinates of the point corresponding to  @xmath431 into  @xmath432 .",
    "this transformation maps the vertices of the original newton polygon to the vertices of the newton polygon of the laurent polynomial @xmath433 . multiplying by  @xmath434 yields a polynomial and shifts the newton polygon up by  @xmath415 ,",
    "thus @xmath435    the number of small branches of the polynomial @xmath44 constructed above is then given by @xmath436    * degree in @xmath437 .",
    "* at this point , there is a slight difference between the cases @xmath438 and @xmath439 .",
    "indeed , in the latter case we have to take the additional small branch at @xmath329 into account .",
    "to do this , we denote by @xmath440 the residue of @xmath335 at @xmath329 .",
    "since @xmath440 is rational , we may compute a polynomial @xmath87 that vanishes only on the residues at non - zero small branches of the denominator of @xmath335 .",
    "if @xmath441 is the polynomial produced by applying algorithm  [ algo : sigma_c ] to @xmath442 , then the polynomial @xmath443 cancels @xmath1 . thus we apply algorithm  [ algo : bronstein ] to @xmath444 if @xmath438 , and to @xmath445 otherwise . by theorem",
    "[ th : bronstein ] , in both cases we obtain a polynomial @xmath87 of degree @xmath446 , with @xmath447 and applying algorithm  [ algo : sigma_c ] gives a polynomial @xmath404 with @xmath448 .",
    "* degree in @xmath370 .",
    "* to bound the degree of @xmath404 in @xmath370 , we can neglect our optimization and apply algorithm  [ algo : bronstein ] to @xmath449 or @xmath450 depending on wether @xmath438 or @xmath439 .",
    "indeed , the polynomial @xmath404 obtained this way is clearly a multiple of the one computed by the algorithm . by theorem",
    "[ th : bronstein ] , since the bidegrees of @xmath16 , @xmath451 , @xmath44 and @xmath452 are all bounded by @xmath453 , we compute a polynomial @xmath87 of degree bounded by @xmath454 , where @xmath455 applying theorem  [ thm : platypus - bound ] to @xmath442 or @xmath456 depending on the sign of @xmath114 yields in both cases @xmath457 .",
    "* complexity .",
    "* we now analyze the cost of algorithm  [ algo : diagonal ] .",
    "the computation of @xmath16 and @xmath44 does not require any arithmetic operation .",
    "next , the computation of  @xmath87 and @xmath440 takes @xmath458 ops .",
    "( see the comment after theorem  [ th : bronstein ] ) .",
    "the number of small branches is obtained with no arithmetic operation from a square - free decomposition computed in algorithm  [ algo : bronstein ] .",
    "the bounds of the discussion above and theorem  [ thm : platypus - bound ] show that algorithm  [ algo : sigma_c ] uses  @xmath459 ops .",
    "finally , if a translation of the variable is needed , it can be performed by evaluation - interpolation in @xmath460 ops .",
    "( one may as well evaluate and interpolate wrt @xmath18 and apply better algorithms for univariate translation @xcite . )",
    "we summarize all the results of this section in the following theorem .",
    "[ thm : bound diagonals ] let @xmath461 be a rational function in @xmath324 with @xmath462 .",
    "let @xmath232 ( resp .",
    "@xmath162 ) be a bound on the bidegrees of @xmath55 and  @xmath5 ( resp . a square - free part of  @xmath5 ) .",
    "let  @xmath463 be defined as in eqs .",
    "( [ eq : dx],[eq : dy],[eq : nb_small ] ) . then there exists a polynomial @xmath374 $ ] such that @xmath464 and @xmath465 algorithm  [ algo : diagonal ] computes it in  @xmath466 ops .",
    "a general bound on @xmath467 depending only on a bound @xmath468 on the bidegree of the input can be deduced from the above as @xmath469      assume that the denominator of  @xmath470 is already partially factored as @xmath471 , where the @xmath339 s are  @xmath472 distinct _ rational _ branches among the  @xmath293 small branches of  @xmath44 .",
    "then their corresponding ( rational ) residues @xmath473 contribute to the diagonal .",
    "the special case where @xmath474 and @xmath475 is exactly the situation that occurred in the discussion on @xmath476 before theorem  [ thm : bound diagonals ] , when @xmath439 .",
    "the trick that we used extends directly to the general case : it suffices to apply algorithm  [ algo : bronstein ] to @xmath477 , algorithm  [ algo : sigma_c ] with @xmath478 roots , and @xmath404 is then recovered through a change of variable .      the bounds from theorem  [ thm : bound diagonals ] on the bidegree of @xmath404 are slightly pessimistic wrt the variable @xmath370 , but generically tight wrt the variable  @xmath437 , as will be proved in proposition  [ prop : generic ] below .",
    "we first need a lemma .",
    "[ lemma : galois groups ] let @xmath9 be a field of characteristic @xmath329 , and @xmath479 $ ] be a polynomial of degree @xmath63 , with galois group @xmath480 over @xmath9 .",
    "assume that the roots @xmath260 of @xmath16 are algebraically independent over @xmath481 .",
    "then , for any @xmath266 , the degree @xmath262 polynomial @xmath264 is irreducible in @xmath92 $ ] .",
    "since @xmath482 is a root of @xmath267 , it suffices to prove that @xmath483 has degree @xmath262 over @xmath9 .",
    "the @xmath309 s being algebraically independent , any permutation @xmath484 of all the @xmath309 s that leaves  @xmath485 unchanged has to preserve the sets @xmath486 and @xmath487 .",
    "conversely , any such permutation induces an automorphism of @xmath488 that leaves @xmath485 invariant . in other words ,",
    "the galois group of @xmath488 over @xmath483 is equal to @xmath489 it follows that @xmath488 has degree  @xmath490 over  @xmath483 and degree  @xmath491 over  @xmath9 , so that  @xmath483 has degree  @xmath262 over  @xmath9 .",
    "[ prop : generic ] let @xmath55 be a polynomial in @xmath492 $ ] . let @xmath493 be non - negative integers , @xmath494 , @xmath495 , and @xmath496,\\ ] ] where the @xmath497 and @xmath498 are indeterminates and @xmath499 .",
    "then the polynomial computed by algorithm  [ algo : diagonal ] with input @xmath500 is irreducible of degree @xmath501 over @xmath502 $ ] .",
    "first apply the change of variables to obtain @xmath503 , with @xmath504 denote @xmath505 .",
    "then , the polynomial @xmath506 has the form @xmath507 where each of the @xmath508 s is the sum of one of the indeterminates and rational constants .",
    "this implies that the @xmath508 s are algebraically independent over @xmath481 .",
    "therefore , @xmath506 has galois group @xmath509 over @xmath510 and its roots are algebraically independent over @xmath481  @xcite .",
    "this property lifts to @xmath78 @xcite , which thus has galois group @xmath480 and algebraically independent roots , denoted @xmath511 .",
    "now define the polynomial @xmath512 , where @xmath513 if @xmath438 and @xmath514 otherwise . since @xmath44 has simple roots , this is exactly the polynomial that is computed by algorithm  [ algo : bronstein ] .",
    "the family @xmath515 is algebraically independent , since any algebraic relation between them would induce one for the @xmath339 s by clearing out denominators .",
    "in particular , the natural morphism @xmath516 is injective , whence an isomorphism .",
    "( here , @xmath517 denotes the galois group of @xmath259 $ ] over  @xmath9 . ) since an immediate investigation of the newton polygon of @xmath44 shows that it has @xmath518 small branches , we conclude using lemma  [ lemma : galois groups ] and the fact that the translation of the variable does nt change the irreducible character of @xmath404 .    proposition  [ prop : generic ] should be viewed as an optimality result .",
    "indeed , for a generic rational function @xmath500 as in the proposition , we have @xmath519 , @xmath520 , @xmath521 and @xmath5 has @xmath518 small branches .",
    "this implies that the bound of theorem  [ thm : bound diagonals ] for @xmath522 is optimal in this ( generic ) case .",
    "if one believes that random examples should behave like the generic case , then the proposition means that the polynomial computed by algorithm  [ algo : diagonal ] will be irreducible most of the time .    as an example",
    ", we consider the special case of proposition  [ prop : generic ] where @xmath523 . in this case",
    ", @xmath522 is @xmath524 .",
    "we compare this to the following experiment on random examples .",
    "we consider a rational function @xmath525 , where @xmath526 is a dense polynomial of bidegree @xmath468 chosen at random .",
    "for  @xmath392 , algorithm * algebraicdiagonal*(@xmath0 ) produces _ irreducible _ outputs with bidegrees @xmath527 , @xmath528 , @xmath529 , @xmath530 , that are matched by the formulas @xmath531 so that the bound on @xmath522 is tight in this case and the irreducibility of the output shows that theorem  [ thm : bound diagonals ] can not be improved further .",
    "the key ingredient in the fact that diagonals may have a big minimal polynomial was the possibility to write them as a sum of residues . the same exponential growth as in proposition  [ prop : generic ] therefore occurs for other functions bearing this same structure . for instance , constant terms of rational functions in @xmath532 $ ] can also be written as contour integrals of rational functions around the origin and thus by the residue theorem be expressed as a sum of residues .",
    "by contrast , such sums of residues of rational functions always satisfy a differential equation of only polynomial size  @xcite .",
    "thus , when an algebraic function appears to be connected to a sum of residues of a rational function , the use of this differential structure is much more adapted to the computation of series expansions , instead of going through a potentially large polynomial .",
    "as an example where this phenomenon occurs naturally , we consider here the enumeration of unidimensional lattice walks , following banderier and flajolet  @xcite and bousquet - mlou  @xcite .",
    "our goal in this section is to study , from the algorithmic perspective , the series expansions of various generating functions ( for bridges , excursions , meanders ) that have been identified as algebraic  @xcite .",
    "one of our contributions is to point out that although algebraic series can be expanded fast  @xcite , the precomputation of a polynomial equation could have prohibitive cost .",
    "we overcome this difficulty by precomputing differential ( instead of polynomial ) equations that have polynomial size only , and using them to compute series expansions to precision  @xmath2 for bridges , excursions and meanders in time quasi - linear in  @xmath2 .",
    "we start with some vocabulary on lattice walks .",
    "a _ simple step _ is a vector @xmath533 with @xmath534 .",
    "@xmath275 is a finite set of simple steps .",
    "a _ unidimensional walk _ in the plane @xmath535 built from @xmath275 is a finite sequence @xmath536 of points in @xmath535 , such that @xmath537 and @xmath538 with @xmath539 . in this case",
    "@xmath12 is called the _ length _ of the walk , and @xmath275 is the _ step set _ of the walk .",
    "the @xmath19-coordinate of the endpoint @xmath540 , namely @xmath541 , is called the final altitude of the walk .",
    "the characteristic polynomial of the step set @xmath275 is @xmath542    ' '' ''",
    "-10pt    following banderier and flajolet , we consider three specific families of walks : bridges , excursions and meanders  @xcite .",
    "_ bridges _ are walks with final altitude  @xmath329 , _ meanders _ are walks confined to the upper half plane , and _ excursions _ are bridges that are also meanders .",
    "figure  [ fig : bafl02 ] , taken from  @xcite , summarizes these definitions graphically .",
    "we define the full generating power series of walks @xmath543[[x]],\\ ] ] where @xmath544 is the number of walks with step set  @xmath275 , of length @xmath12 and final altitude @xmath472 .",
    "we denote by @xmath545 ( resp .",
    "@xmath546 , and @xmath547 ) the power series @xmath548 , where @xmath549 is the number of bridges ( resp .",
    "excursions , and meanders ) of length  @xmath12 with step set  @xmath275 .",
    "we omit the step set  @xmath275 as a subscript when there is no ambiguity .",
    "several properties of the power series @xmath550 , @xmath5 , @xmath6 and @xmath7 are classical :    @xcite[fact : walks ]  the power series @xmath550 , @xmath5 , @xmath6 and @xmath7 satisfy    @xmath551 is rational and @xmath552 ;    @xmath553 , @xmath554 and @xmath555 are algebraic ;    @xmath556w(x , y)$ ] ;    @xmath557 .    in",
    "what follows , we describe and analyze three methods to compute the power series expansions of @xmath5 , @xmath6 and @xmath7 . in the next two sections , we first study two previously known methods",
    ", then we introduce a new one .      from now on ,",
    "we fix a step set @xmath275 , and we denote by @xmath558 ( resp .",
    "@xmath559 ) the largest @xmath560 such that @xmath561 ( resp .",
    "@xmath562 ) .",
    "we also define @xmath563 .",
    "the integer @xmath63 measures the vertical amplitude of @xmath275 ; this makes @xmath63 a good scale for measuring the complexity of the algorithms that will follow .",
    "we assume that both @xmath558 and @xmath559 are positive , since otherwise the study of the bridges , excursions and meanders becomes trivial .    * the direct method . *",
    "the combinatorial definition of walks yields a recurrence relation for @xmath544 : @xmath564 with initial conditions @xmath565 if @xmath566 with @xmath567 , and @xmath568 .",
    "if @xmath569 denotes the number of walks of length @xmath12 and final altitude @xmath472 that never exit the upper half plane , then @xmath569 also satisfies recurrence  , but with the additional initial conditions @xmath570 for all @xmath571 .",
    "then the bridges ( resp . excursions , meanders ) are counted by the numbers @xmath572 ( resp .",
    "@xmath573 , @xmath574 ) .",
    "one can compute these numbers by unrolling the recurrence relation  .",
    "each use of the recurrence costs @xmath575 ops . , and in the worst case one has to compute @xmath576 terms of the sequence ( for example , if the step set is @xmath577 ) .",
    "this leads to the computation of each of the generating series in @xmath578 ops .",
    "this quadratic complexity in @xmath2 is unsatisfactory , and any method that requires the complete expansion of the generating series @xmath551 is bound to be quadratic in @xmath2 .",
    "the two other methods that we are going to present are designed to achieve linear or quasi - linear complexity in @xmath2 . as will be explained ,",
    "this comes at the cost of a precomputation that must be taken into account in the analysis .    * using algebraic equations . * in @xcite , a method relying on the algebraicity of @xmath5 , @xmath6 and @xmath7 ( fact  [ fact : walks]_(2 ) _ ) ) is suggested .",
    "the series @xmath6 and @xmath7 can be expressed as products in terms of the small branches of the characteristic polynomial @xmath579 ( see ( * ? ? ?",
    "1 ) ) . from there",
    ", a polynomial equation can be obtained using the platypus algorithm  @xcite , which computes a polynomial canceling the products of a fixed number of roots of a given polynomial .",
    "given a polynomial equation @xmath580 , another one for  @xmath5 can be deduced from the relation  @xmath581 as @xmath582 .",
    "once a polynomial equation is known for one of these three series , it can be used to compute a linear recurrence with polynomial coefficients satisfied by its coefficients  @xcite . the naive algorithm introduced above",
    "provides a way to compute a sufficiently large number of initial conditions to unroll this recurrence .",
    "( for a quantitative result on the required number of initial conditions , see corollary  [ coro : expand algebraic functions ] below . )",
    "this method produces an algorithm that computes the first  @xmath2 terms of  @xmath5 , @xmath6 and  @xmath7 in @xmath583 ops . for this to be an improvement over the naive method for large  @xmath2",
    ", the dependence on  @xmath63 of the constant in the @xmath584 should not be too large and the precomputation not too costly .    indeed , the cost of the precomputation of an algebraic equation is not negligible .",
    "the bound @xmath585 on the degrees of equations for excursions has been obtained by bousquet - mlou , and showed to be tight for a specific family of step sets , as well as generically  @xcite .",
    "this bound may be exponentially large with respect to @xmath63 .",
    "empirically , the polynomials for @xmath5 and @xmath7 are similarly large .",
    "the situation for differential equations and recurrences is different : @xmath5 satisfies a differential equation of only polynomial size ( see below ) , whereas ( empirically ) , those for @xmath6 and @xmath7 have a potentially exponential size .",
    "these sizes then transfer to the corresponding recurrences and thereby to the constant in the complexity of unrolling them .",
    "the purpose of theorem  [ thm : walks ] below is to give explicitly the polynomial dependence in @xmath63 when using this method , showing at the same time that a true improvement over the naive method can be achieved .    with the step set @xmath586 and @xmath587",
    ", the counting series @xmath588 equals @xmath589 experiments indicate that the minimal polynomial of @xmath545 has bidegree @xmath590 , exhibiting an exponential growth in  @xmath63 . on the other hand , they show that @xmath545 satisfies a linear differential equation of order @xmath591 and coefficients of degree @xmath592 for even  @xmath63 , and @xmath593 for odd @xmath63 .",
    "* new method .",
    "* we now give a method that runs in quasi - linear time ( with respect to @xmath2 ) and avoids the computation of an algebraic equation .",
    "our method relies on the fact that periods of rational functions such as the one in part  _ ( 3 ) _ of fact [ fact : walks ] satisfy differential equations of polynomial size in the degree of the input rational function  @xcite .",
    "we summarize our results in the following theorem , and then go over the proof in each case individually .",
    "[ thm : walks ] let @xmath275 be a finite set of simple steps and @xmath594 .",
    "the series @xmath595 ( resp . @xmath596 and @xmath597 ) can be expanded at order @xmath2 in @xmath598 ops .",
    "( resp . @xmath599 ops . ) , after a precomputation in @xmath600  ops .",
    "* bridges .",
    "* to expand @xmath553 , we rely on fact  [ fact : walks]_(3)_. the formula can be written @xmath601 , the integration path being a circle inside a small annulus around the origin  ( * ? ? ?",
    "* proof of th .  1 ) .",
    "moreover , @xmath602 is of the form @xmath99 , where @xmath603 and @xmath604 .",
    "since @xmath16 and @xmath44 are relatively prime and @xmath44 is primitive with respect to @xmath19 , algorithm * hermitetelescoping *  ( * ? ? ?",
    "3 ) computes a telescoper for @xmath99 , which is also a differential equation satisfied by @xmath5 .",
    "by fact  [ fact : sqfree]_(2 ) _ , the resulting differential equation has order at most  @xmath63 and degree @xmath605 , and is computed using @xmath600 ops .",
    "this differential equation can be turned into a recurrence of order @xmath606 in quasi - optimal time ( see the discussion after  ( * ? ? ?",
    "2 ) ) . we may use it to expand @xmath607 in @xmath608 ops , once enough initial conditions are known .",
    "again , the initial conditions are computed by means of the direct method .",
    "the only remaining question is the number of initial conditions needed .",
    "indeed , the recurrence may be singular , ie its leading coefficient may have positive integer roots .",
    "if we denote by @xmath114 the largest such root , then we need to compute the first terms of the recurrence up to @xmath609 . in order not to break the flow of reading",
    ", we postpone the discussion on the size of @xmath114 to the next section . for now , we only state the result .    [",
    "prop : initial conditions ] let @xmath275 be a set of simple steps , and @xmath610 .",
    "then the largest integer root of the leading term of the recurrence computed by algorithm  [ algo : bridges ] is at most @xmath611    see section  @xmath612 .",
    "thus , a sufficient number of initial conditions is computed with @xmath613 ops by the direct method , and the total cost of the precomputation is @xmath600 , as announced .",
    "algorithm * walks*(@xmath275 , @xmath2 )    a set @xmath275 of simple steps and an integer @xmath2@xmath614 @xmath615 [ case @xmath616 or @xmath617 [ case @xmath7 ] @xmath619 ( * ? ? ? * fig .",
    "3 ) @xmath620 the recurrence of order @xmath440 associated to @xmath91 @xmath621w(x , y)\\bmod x^{r+1}$ ] [ case @xmath622 + @xmath623yw(x , y)/(1-y)\\bmod x^{r+1}$ ] [ case @xmath7 ] @xmath624w(x , y)\\bmod x^{n+1}$ ] ( from @xmath625 ) @xmath626yw(x , y)/(1-y)\\bmod x^{n+1}$ ] ( from @xmath625 ) @xmath627 @xmath628 @xmath629    * excursions . * if @xmath630 is known , it is then possible to recover @xmath631 thanks to fact  [ fact : walks]_(4)_. expanding @xmath554 comes down to the computation of the exponential of a series , which can be performed using @xmath632 ops .",
    "( fact  [ fact : complexity]_(4 ) _ ) .",
    "* meanders . * as in the case of excursions , the logarithmic derivative of @xmath555 is recovered from a sum of residues by the following .",
    "[ walks - formulas2 ] the series  @xmath550 and  @xmath7 are related through @xmath633\\frac{y}{1-y}w(x , y),\\quad m(x ) = \\frac{\\exp\\left(-\\int\\frac{a(x)}{x}\\,\\mathrm{d}x\\right)}{1-x\\gamma(1)}.\\ ] ]    denote by @xmath634 the small branches of the polynomial @xmath635 .",
    "then @xmath7 is given as  ( * ? ? ?",
    "1 ) : @xmath636 on the other hand , @xmath637 where the integral has been taken over a circle around the origin and the small branches . differentiating the equation @xmath638 = 0 with respect to @xmath18 leads to @xmath639 , whence @xmath640 therefore , @xmath641 , finishing the proof .",
    "thus we apply the same method as in the case of the excursions .",
    "we first compute a differential equation for @xmath642 using the method of  @xcite .",
    "the computation of the initial conditions for @xmath55 can also be performed naively from its definition as a constant term , by simply expanding @xmath643 .",
    "the formula of the proposition then recovers @xmath555 .",
    "the complexity analysis goes exactly as in the previous case , giving a global cost of @xmath600 ops .",
    "we now come back to the problem of singular recurrences . in our context , the recurrences that we come across have a very specific structure : they are associated to differential resolvents of polynomials .",
    "( the differential resolvent of a polynomial is the least order differential operator canceling all of its roots . )",
    "this structure can be exploited to derive bounds on the singularities of our recurrences .",
    "if @xmath30[y]$ ] is a polynomial , consider the recurrence associated to its differential resolvent @xmath252 .",
    "the leading coefficient of this recurrence is called the indicial polynomial of @xmath252 at  0 .",
    "its largest integer root will be denoted @xmath114 .",
    "the fundamental idea is that there exists a laurent series solution of @xmath252 which has valuation @xmath114  @xcite therefore , it is sufficient to find bounds on the valuations of the solutions of @xmath252 .",
    "this is done in the following theorem .",
    "[ th : valuations ] let @xmath16 be a polynomial in @xmath11[y]$ ] , of bidegree at most @xmath232 , and @xmath252 be the differential resolvent of @xmath16 . then all the laurent series solutions @xmath644 of @xmath252 uniformly satisfy @xmath645    choose a subfamily @xmath646 of the puiseux series roots of @xmath16 that constitutes a basis of the solution space of the resolvent ( in particular , @xmath647 ) .",
    "let @xmath648 be a laurent series solution of the differential resolvent of @xmath16 .",
    "then the fact that @xmath649 for any laurent series @xmath650 $ ] implies that @xmath651 by the multilinearity of the wronskian , the left - hand side of this inequality is nothing more than @xmath652 . on the other hand , the absolute values of the valuations of the @xmath339 s",
    "are bounded by @xmath653 ( because they are slopes of edges in the newton polygon of @xmath16 ) .",
    "a bound for @xmath654 is thus obtained : @xmath655 the proof is then reduced to showing that @xmath656 .",
    "this is very similar to the computations conducted in @xcite .",
    "we start by recalling some facts that are proved there .",
    "there exist polynomials @xmath657 $ ] such that for all @xmath337 and all @xmath658 , the derivative @xmath659 can be expressed as @xmath660 moreover , the polynomials @xmath661 satisfy @xmath662    it follows that @xmath663 $ ] is a polynomial such that @xmath664 $ ] .",
    "we will denote by @xmath87 this last polynomial .",
    "@xmath87 is the determinant of the matrix @xmath665 @xmath87 is an anti - symmetric polynomial in @xmath646 , but @xmath666 is symmetric , as well as @xmath91 , so we can apply lemma  [ lem : symmetric functions ] to see that @xmath666 and @xmath91 belong to @xmath14 .",
    "therefore , the equality @xmath667 shows that @xmath668 is the square root of a rational function in @xmath18 .",
    "we are going to use this structure and lemma  [ lem : symmetric functions ] to derive the desired bound on the valuation of the wronskian determinant .",
    "if @xmath669 is viewed as a polynomial in @xmath670 $ ] , then @xmath671 and for all @xmath337 , @xmath672 similarly , when @xmath91 is viewed as a polynomial in @xmath670 $ ] , we have : @xmath673 applying lemma  [ lem : symmetric functions ] , we deduce that , denoting by @xmath674 the leading coefficient of @xmath77 , @xmath675 where @xmath676 finally , the inequalities @xmath677 and @xmath647 yield @xmath678 which concludes the proof .",
    "we immediately deduce the following corollary on the number of initial conditions required to expand an algebraic power series .",
    "[ coro : expand algebraic functions ] let @xmath679 $ ] be a polynomial of bidegree bounded by @xmath232 .",
    "let @xmath87 be the recurrence associated to the differential resolvent of @xmath16 .",
    "then the largest integer root of the leading coefficient of @xmath87 is at most @xmath680 .",
    "immediate from the theorem and the discussion that precedes it .",
    "we are now able to prove proposition  [ prop : initial conditions ] .",
    "( of proposition  [ prop : initial conditions ] ) we only treat the case where the recurrence is computed for @xmath5 , and the proof transposes directly to the case of @xmath55 .",
    "let @xmath275 and @xmath63 be as in the proposition , and denote by @xmath16 the minimal polynomial of @xmath5 .",
    "then the recurrence computed by algorithm  [ algo : bridges ] is associated to the minimal annihilating differential operator for @xmath5 , which is also the differential resolvent of @xmath16 .",
    "we denote it by @xmath681 .",
    "now since @xmath682w(x , y)/y$ ] , it can be written as a sum of residues similar to formula  ( [ eq : diagonal - as - residues ] ) .",
    "if we denote by @xmath87 the polynomial that cancels these residues , then @xmath16 divides @xmath683 for some @xmath293 .",
    "this implies in particular that all the solutions of @xmath681 are linear combinations of the roots of @xmath87 .",
    "thus , if @xmath684 is the differential resolvent of @xmath87 , then all the solutions of @xmath681 are solutions of @xmath684 .",
    "since @xmath550 has bidegree @xmath685 , theorem  [ th : bronstein ] and theorem  [ th : valuations ] show that all the roots of @xmath16 have valuation at most @xmath611 , and the result follows .",
    "we gave a complete and efficient algorithm that calculates a polynomial equation satisfied by the diagonal of a bivariate rational function in characteristic  @xmath329 .",
    "generically , the degree in @xmath437 of the polynomial @xmath686 output by the algorithm is optimal .",
    "the bound on the degree in  @xmath370 is not tight . the gap between this bound and the actual degrees is not yet fully understood : it is already present for the rothstein - trager and bronstein resultants .",
    "our complexity results are given in the arithmetic complexity model .",
    "the corresponding study in the binary model remains to be done .",
    "the case of positive characteristic requires different methods and algorithms . in that case , diagonals are algebraic even for rational functions with more than two variables . to the best of our knowledge , these questions have never been studied from the complexity viewpoint .",
    "one possible direction is to try and make effective the proof by furstenberg that these diagonals are algebraic  @xcite .",
    "some work has also been done by adamczewski and bell  @xcite who among other things studied how the sizes of the polynomial equations satisfied by diagonals vary with the characteristic of the base field ."
  ],
  "abstract_text": [
    "<S> the diagonal of a multivariate power series @xmath0 is the univariate power series @xmath1 generated by the diagonal terms of @xmath0 . </S>",
    "<S> diagonals form an important class of power series ; they occur frequently in number theory , theoretical physics and enumerative combinatorics . </S>",
    "<S> we study algorithmic questions related to diagonals in the case where @xmath0 is the taylor expansion of a bivariate rational function . </S>",
    "<S> it is classical that in this case @xmath1 is an algebraic function . </S>",
    "<S> we propose an algorithm that computes an annihilating polynomial for @xmath1 . </S>",
    "<S> we give a precise bound on the size of this polynomial and show that generically , this polynomial is the minimal polynomial and that its size reaches the bound . </S>",
    "<S> the algorithm runs in time quasi - linear in this bound , which grows exponentially with the degree of the input rational function . </S>",
    "<S> we then address the related problem of enumerating directed lattice walks . </S>",
    "<S> the insight given by our study leads to a new method for expanding the generating power series of bridges , excursions and meanders . </S>",
    "<S> we show that their first @xmath2 terms can be computed in quasi - linear complexity in @xmath2 , without first computing a very large polynomial equation . </S>"
  ]
}