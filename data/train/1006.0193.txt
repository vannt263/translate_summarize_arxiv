{
  "article_text": [
    "in this paper a bidirected ring means the union of two oppositely directed circuits on the same set of nodes .",
    "the motivation of the present paper is to compute a routing of demands in an sdh ( synchronous digital hierarchy ) based network .",
    "such a network is a transmission network and we will refer to it as the supply graph .",
    "also , we will refer to the set of demands as the demand graph .",
    "the backbone networks of the european telecommunication companies are based on the sdh technology .",
    "the ring architecture plays a key role in this technology , because it provides an efficient self - healing mechanism in case of failure : although the rings are bidirected , only one direction is used , while the other would be useful in case of a failure .",
    "most of the sdh backbone networks consist of such uni - directed circuits . from such uni - directed circuits different topologies",
    "have been built , like tree of circuits or cycle of circuits . in the next section",
    "we will show that the routing in a supply graph which is a cycle of circuits can be reduced to a routing problem in a bidirected ring .",
    "one can find more about the sdh transmission protocol in @xcite .",
    "formally , we are given a directed supply graph @xmath1 with capacity function @xmath2 and a directed demand graph @xmath3 on the same node set with demand values @xmath4 .",
    "a * routing * of @xmath3 is a collection of @xmath5-paths of value @xmath6 , one for each demand edge of @xmath7 joining @xmath8 to @xmath9 with value @xmath6 , satisfying the capacity constraint @xmath10 . since each demand",
    "is routed along a unique path we will speak about * unsplittable * routings . in this paper",
    "a routing is always unsplittable , unless when speaking about the fractional solution of the linear relaxation of the problem .",
    "we say that a routing of @xmath3 has * load at most ( less than ) @xmath10 * if for each edge @xmath11 the sum of the values of the paths using @xmath12 is at most ( less than ) @xmath13 .",
    "in this paper we consider the routing problem in bidirected rings . given a bidirected ring @xmath1 with capacity function @xmath14 , and a directed demand graph @xmath3 with demand values @xmath15 , we want to find the minimum @xmath0 for which there exists a routing of @xmath3 with load at most @xmath16 .",
    "this is called the balanced bidirected ring routing problem . under balancedness",
    "we mean that the value of @xmath0 is introduced to ensure that the remaining capacities are as large as possible , allowing the network to carry larger demands .",
    "the case when @xmath10 is uniform ( that is , all capacities are equal ) and each demand is 1 was solved with an elegant method by wilfong and winkler @xcite . in section [ approx ] we follow the lines of their proof to give an algorithm which returns a routing with load less than @xmath17 where @xmath18 is the optimum solution of the problem and @xmath19 is the maximum value of the demands .",
    "we also show that this error term can indeed occur .    in section [ khanna ] ,",
    "using a method of khanna @xcite , we show an approximation scheme to the problem which for any @xmath20 yields a routing with load less than @xmath21 , with a trade - off with the running time . here",
    "@xmath22 and @xmath23 is the sum of the capacities of the edges .    by solving a linear program , a fractional solution of the balanced bidirected ring routing problem",
    "can be given , that is , we can calculate the minimum @xmath0 , denoted by @xmath24 , such that there exists a fractional routing of @xmath3 with load at most @xmath16 .",
    "clearly @xmath25 .",
    "our approximation algorithm for the balanced bidirected ring routing problem gives a routing such that its load is actually less than @xmath26 .",
    "if @xmath27 then our solution may be considered good in practice since it requires less than @xmath28 additional capacity on each edge . on the other hand , if @xmath29 then there exists no feasible routing with the given capacities .",
    "hence we are facing a network design problem , and our goal is to increase the capacity function with minimum cost , in order to have a routing satisfying the increased capacity .",
    "we show in section [ design ] that even this problem can be handled with techniques similar to section [ approx ] .",
    "if the capacity function @xmath10 is uniform and the ring is _ undirected _ , the balanced ring routing problem was studied by many researchers due to its significance in telecommunication networks .",
    "this problem is called the undirected ring loading problem , first considered by cosares and saniee @xcite .",
    "schrijver , seymour , and winkler @xcite gave a combinatorial approximation algorithm for the undirected case , if @xmath10 is not necessarily uniform .",
    "their algorithm returns a routing requiring less than @xmath28 more capacities on each edge than in an optimum solution .",
    "the balanced bidirected ring routing problem was first considered by wilfong and winkler @xcite who gave an exact algorithm for finding an optimum routing in a bidirected ring , in case @xmath10 is uniform and each demand is 1 .",
    "our considerations in section [ approx ] are based on their method , yielding a generalization of their result .",
    "our result are more general than theirs in the aspect that in our case the demands are not restricted to be 1 , and the capacity function is not necessarily uniform .",
    "we point out that the balanced bidirected ring routing problem is np - complete .",
    "indeed , the partition problem can be reduced to it in a straightforward way , just as in the undirected case ( cosares , saniee @xcite ) . moreover , contrary to the undirected case , the cut condition is not sufficient for the existence of a fractional solution .",
    "that may be the reason that no combinatorial algorithm is known finding an optimum fractional solution of the bidirected ring routing problem , unlike in the undirected case .",
    "in some sdh backbone networks the supply graph @xmath1 forms a cycle of directed circuits , with capacity function @xmath30 . in this section",
    "we show that the routing in @xmath1 can be reduced to a routing problem in a bidirected ring .",
    "two neighboring circuits of @xmath1 meet in a node called a * common node*. the common nodes divide each directed circuit into two edge sets , called * arcs*. see  figure [ red ] .",
    "let @xmath31 be a demand edge with value @xmath32 joining @xmath33 to @xmath34 .",
    "let @xmath35 be the common node @xmath36 of @xmath1 minimizing @xmath37 .",
    "similarly , let @xmath38 be the common node @xmath36 minimizing @xmath39 .",
    "if @xmath34 is contained in the @xmath40-path of @xmath1 then only one @xmath41-path exists in @xmath1 so simply delete @xmath42 from @xmath3 and decrease the capacity of this path by @xmath32 .",
    "otherwise all @xmath41-paths use the supply edges on the @xmath40- and on the @xmath43-paths of @xmath1 .",
    "so replace @xmath42 by a new demand edge @xmath44 joining @xmath35 to @xmath38 with value @xmath32 and decrease the capacities of the supply edges on the @xmath40 and on the @xmath43-paths by @xmath32 .",
    "after doing so for each demand edge , the new demand graph @xmath45 has a routing in @xmath1 with load at most the new capacity function @xmath46 if and only if @xmath3 has a routing with load at most @xmath10 .",
    "moreover , the non - common nodes of @xmath1 are incident to no edge of @xmath45 , so we can think of an arc @xmath47 as only one edge with capacity the minimum of @xmath48 taken over all edges @xmath49 .",
    "the new supply graph is a bidirected ring with @xmath50 nodes and @xmath51 edges , where @xmath50 is the number of circuits in @xmath1 .",
    "in this section we show an algorithm yielding a routing in a bidirected ring with load less than @xmath52 where @xmath18 is the solution of the balanced bidirected ring routing problem and @xmath19 is the maximum value of the demands .",
    "our algorithm is a modification of that of wilfong and winkler @xcite who solved the balanced bidirected ring routing problem in the case if @xmath10 is uniform and the demands are @xmath53 .",
    "we do not count running times since solving a linear program is included .    from the two directions of the ring we say that one is the * forward * and the other one is the * backward * direction . accordingly , an edge @xmath11 can be forward or backward , and from the two possible @xmath5-paths ( @xmath54 ) one is the forward and the other one is the backward path . for an edge @xmath31 joining @xmath8 to @xmath9 ,",
    "an * @xmath42-path * refers to any of the two @xmath5-paths of @xmath1 .",
    "the edge sets of these two paths will be denoted by @xmath55 and @xmath56 , respectively .",
    "the first step is to solve the lp - relaxation of the problem .",
    "there are two possibilities of routing demand @xmath31 hence we introduce a variable @xmath57 with the meaning that @xmath58 fraction of the demand @xmath42 is routed forward and @xmath59 fraction is routed backward .",
    "so we have the following lp - relaxation , whose optimum solution is denoted by @xmath24 .",
    "both sums run on demand edges @xmath31 .",
    "@xmath60 @xmath61 @xmath62    note that we would get @xmath18 if @xmath63 was required to be integer .",
    "now we manipulate the demands @xmath31 with @xmath64 .",
    "such demands are called * split*. we say that demands @xmath65 , where @xmath66 joins @xmath67 to @xmath68 for @xmath69 , are * parallel * if the end nodes are placed in the ring in the order @xmath70 ( some of these nodes may coincide ) .",
    "assume that @xmath71 are parallel split demands .",
    "call the @xmath66-path containing both @xmath72 and @xmath73 the * long @xmath66-path * for @xmath69 .",
    "let @xmath74 denote the amount of flow of @xmath66 sent along the long @xmath66-path in our fractional solution .",
    "if we reroute @xmath75 amount of flow from the long @xmath66-path to the other @xmath66-path for @xmath69 then one of the demands @xmath76 will not be split any more , moreover , we do not increase the load of any edge of @xmath1 ( we may even decrease it somewhere ) .",
    "so at most @xmath77 such * uncrossing steps * are possible and finally we get a fractional solution where there are no pair of parallel split demands .",
    "especially , demands with the same source node are parallel .",
    "so it will hold that for each @xmath78 there exists at most one split demand @xmath31 with source @xmath79 .",
    "denote the nodes of @xmath1 by @xmath80 in the forward order .",
    "now we try to unsplit the remaining split demands .",
    "let @xmath66 be the split demand with source @xmath67 ( if any ) .",
    "assume that @xmath74 fraction of @xmath66 is routed forward and @xmath81 fraction backward .",
    "let @xmath82 if we would set @xmath83 to 1 and @xmath84 if @xmath83 would be set to 0 .",
    "if we round @xmath83 to 0 or 1 then the load of an edge @xmath11 increases by @xmath85 if @xmath12 is contained in the forward @xmath66-path , it decreases by @xmath85 if @xmath12 is contained in the backward @xmath66-path , and it does not change elsewhere .",
    "there are no two parallel split demands so the change of the load of an edge is @xmath86 for some @xmath87 where @xmath6 may be greater than @xmath50 but then the indices of @xmath88 are meant modulo @xmath50 . here",
    "the sign depends on whether @xmath12 is a forward or a backward edge .",
    "now we try to set the value of @xmath85 to @xmath81 or @xmath89 for all @xmath90 in such a way that @xmath91 holds for all @xmath87 . to achieve this",
    "it is clearly sufficient that @xmath92 ( [ d2 ] ) can be easily achieved by greedily setting the values @xmath85 to @xmath81 or @xmath89 one after another , since @xmath93 holds .",
    "hence by this procedure each load is increased by _",
    "less than _ @xmath28 .",
    "so the algorithm for the balanced bidirected ring routing problem is the following .    1 .",
    "solve the lp - relaxation of the balanced bidirected ring routing problem .",
    "2 .   uncross the parallel split demands .",
    "3 .   unsplit the remaining split demands in the above described greedy way .",
    "[ pol ] the algorithm gives a routing of @xmath3 with load less than @xmath94 .",
    "after the uncrossing procedure the routing still has load at most @xmath95 .",
    "moreover , as we observed , the load of each edge @xmath96 increases by less than @xmath28 during unsplitting .",
    "our goal was to find a routing with load at most @xmath97 , but actually , similarly to the undirected case @xcite , the routing we got has load less than @xmath98 .",
    "however , this fact does not always induce improved efficiency .",
    "indeed , next we show that for every @xmath99 there is an example where the output routing of the algorithm has load not less than @xmath100 .",
    "such _ tight examples _ are very important in understanding how algorithms can be improved in order to decrease running time .",
    "consider the capacities of the ring as shown in figure [ sharpgraph ] .",
    "the edges without capacity , as well as the dashed edges have large capacities in both directions and @xmath101 is a number which is small enough with respect to @xmath6 .",
    "all demands are of value @xmath53 .",
    "observe that the cut @xmath102 is tight , that is , the total value of the demands crossing it equals @xmath103 . it is easy to see that there is no integer routing with @xmath104 due to the cut @xmath102 with fractional capacities .",
    "the best integer solution is obtained if the capacity of @xmath105 is raised to @xmath106 , that is @xmath107 .",
    "indeed , @xmath101 is small enough so we can route the demand of node @xmath9 forward while all other demands backward .",
    "thus @xmath108 by an appropriate choice of @xmath109 .    clearly @xmath110 , and an optimum @xmath63 ( which is a vertex of the polyhedron ( [ lp ] ) ) is shown in brackets in figure [ sharpgraph ] .",
    "assume that the unsplitting procedure starts at node @xmath8 .",
    "the split demand at node @xmath8 is routed forward .",
    "now the split demand at node @xmath9 is routed backward and then the demand of node @xmath88 forward .",
    "all remaining demands will be routed backward , according to our greedy heuristic .",
    "now @xmath111 has load @xmath112 and so the error at @xmath111 tends to @xmath113 by choosing @xmath114 , and using that @xmath115 . note that the fractional capacities can be made integer by scaling .",
    "if the value of the demands are small with respect to the minimum load of an optimum routing then the @xmath28 additive error is a small deviation from the optimum solution .",
    "otherwise this error term can be significant . in this section",
    "we develop an approximation scheme for the balanced bidirected ring routing problem , which for any @xmath116 gives an algorithm polynomial in the number of nodes , finding a routing with load less than @xmath117 where @xmath22 , and @xmath118 .",
    "we use the solution method of khanna @xcite who presented an @xmath101-approximation scheme for the case of an undirected ring with @xmath10 uniform . by definition , an @xmath101-approximation scheme for a minimization problem is an algorithm which , for any @xmath20 , returns a solution with value at most @xmath119 times the optimum value . in this sense",
    "the method of this section is not an @xmath101-approximation scheme since it does not approximate @xmath18 .",
    "however , for @xmath120 , in the class of balanced bidirected ring routing problem instances , where @xmath121 holds for all edge @xmath12 , our method is an @xmath122-approximation scheme . many problem instances in practice arising from an sdh backbone network belong to such a class with reasonably small @xmath123 , in particular the instances where @xmath10 is uniform .    for @xmath124 the * long @xmath125-path *",
    "is defined to be the longest @xmath125-path in @xmath1 , or to be the forward one if the two paths are of equal length .",
    "recall that @xmath126 denotes the fractional optimum to the balanced bidirected ring routing problem .",
    "let @xmath127 be any real number and let    e=\\{fe(h ) : d(f ) > }.    note that    ",
    "_ ee(g ) c(e ) ^ * _ ee(g ) c(e ) _",
    "fed(f ) > |e|.    hence @xmath128 .",
    "if @xmath129 then less than @xmath130 edges of @xmath131 are routed in the long path in any optimum routing , since otherwise the sum of the loads would be more than    ",
    "= n = _ee(g ) c(e ) _",
    "opt_ee(g ) c(e ) ,    which is impossible . thus , independently of whether @xmath132 or not , for all subsets @xmath133 with @xmath134 we do the following .",
    "we route the demands of @xmath135 in the long paths and the demands of @xmath136 in the short paths .",
    "denote the load of @xmath11 in this routing of @xmath131 by @xmath137 .",
    "now denote by @xmath138 the optimum of the following linear program , where the sums run on @xmath139 .",
    "@xmath60 @xmath140 @xmath141    note that the maximum value of a demand in @xmath142 is at most @xmath143 .",
    "hence exactly as in the previous section , we can find a routing of @xmath142 with load less than @xmath144 . in the case",
    "when @xmath129 , in any optimum routing of @xmath3 less than @xmath130 edges of @xmath131 are routed in the long path , hence we get that one of the above routings has load less than @xmath145 . for any @xmath146 , from these @xmath147 routings of @xmath7",
    "choose the one with load at most @xmath148 , such that this @xmath0 is minimum .",
    "the number of subsets @xmath149 to consider is @xmath147 . using that @xmath150 holds for any integers @xmath151 , when @xmath152 we get @xmath153 since the left hand side is monotone increasing in @xmath154 , the above bound is valid when @xmath155 , too .",
    "hence the number of subsets @xmath149 to try is @xmath156 .",
    "now we show how @xmath146 can be chosen .",
    "it is clear that @xmath157 , since there are exactly two paths between any two nodes in @xmath1 .",
    "so first determine the value of @xmath24 and then run the above algorithm with @xmath158 for @xmath159 for some integer @xmath160 .",
    "as we mentioned , at the point when @xmath161 happens to hold , our routing has load less than @xmath162 .",
    "thus , finally , from these @xmath163 routings choose the one with load at most @xmath164 , such that this @xmath0 is minimum . in the beginning we should also replace @xmath101 by @xmath165 in the above scheme .",
    "the approximation algorithm presented in section [ approx ] gives a routing in a bidirected ring with load less than @xmath166 .",
    "recall that we can calculate the fractional optimum @xmath24 by solving a linear program .",
    "observe that @xmath27 means that there exists a fractional routing in the supply network @xmath1 with the given capacities .",
    "since our approximate integer solution requires less than @xmath28 additional capacity on each edge ( hopefully , much less on average ) , this solution may be considered good in practice . on the other hand , if @xmath29 then there exists no feasible routing with the given capacities .",
    "hence we are facing a network design problem , where we want to increase the capacity of some edges of the ring , with minimum cost , in order to guarantee the existence of a routing satisfying the increased capacities .",
    "formally , a * widening cost * @xmath167 is given on each edge @xmath96 , measuring the cost of increasing the capacity of edge @xmath12 by one unit .",
    "we aim to find the minimum of @xmath168 such that there exists an integer routing with load at most @xmath169 on any edge @xmath11 . here",
    "@xmath0 is some robustness factor known a priori .",
    "next we give a heuristic algorithm for this problem , with similar methods than that of section [ approx ] .",
    "first we solve the fractional relaxation of the problem .",
    "next uncross the split demands , and then unsplit the remaining split demands , just as in section [ approx ] .",
    "exactly as in section [ approx ] , we get an integer routing of @xmath3 with load less than @xmath172 , with the optimum @xmath173 .    hence we have a routing with widening cost which is at most @xmath174 more expensive than the optimum cost .",
    "we can also choose @xmath0 to ensure that the load of this routing is at most @xmath175 , yielding a feasible unsplit routing in the new , increased network .",
    "we mention that it is also possible to apply the method of section [ khanna ] to yield for any @xmath116 an algorithm polynomial in @xmath50 , finding a routing with widening cost at most @xmath176 more expensive than the optimum cost , where @xmath177 is the minimum sum of loads of fractional routings of @xmath3 in the uncapacitated ring @xmath1 ( one should simply define @xmath178 where @xmath179 ) ."
  ],
  "abstract_text": [
    "<S> given a bidirected ring with capacities and a demand graph , we present an approximation algorithm to the problem of finding the minimum @xmath0 such that there exists a feasible unsplittable routing of the demands after multiplying each capacity by @xmath0 . </S>",
    "<S> we also give an approximation scheme to the problem . </S>"
  ]
}