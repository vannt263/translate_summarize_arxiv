{
  "article_text": [
    "in computer science , complete objects play an extremely important role .",
    "if a certain class of problems has a complete representative , one can shift the analysis from the whole class ( where usually nothing can really be proven ) to this certain , well - specified complete problem .",
    "examples include satisfiability and graph coloring for ( see @xcite for a survey ) or , which is more closely related to our present work , post correspondence and matrix transformation problems for @xcite .    however , there are problems that are undoubtedly complete for their complexity classes but do not actually cause such a nice concept shift because they are too hard to analyze .",
    "such problems usually come from diagonalization procedures and require enumeration of all turing machines or all problems of a certain complexity class .",
    "our results lie in the field of cryptography . for a long time",
    ", little has been known about complete problems in cryptography . while `` conventional '' complexity classes got their complete representatives relatively soon , it had taken thirty years since the definition of a public - key cryptosystem @xcite to present a complete problem for the class of all public - key cryptosystems @xcite . however , this complete problem is of the `` bad '' kind of complete problems , requires enumerating all turing machines and can hardly be put to any use , be it practical implementation or theoretical complexity analysis .    before tackling public - key cryptosystems ,",
    "it is natural to ask about a seemingly simpler object : one - way functions ( public - key cryptography is equivalent to the existence of a trapdoor function , a particular case of a one - way function ) .",
    "the first big step towards useful complete one - way functions was taken by leonid a. levin who provided a construction of the first known complete one - way function @xcite ( see also @xcite ) .",
    "the construction uses a universal turing machine @xmath0 to compute the following function : @xmath1 where @xmath2 is the description of a turing machine @xmath3 .",
    "if there are one - way functions among @xmath3 s ( and it is easy to show that if there are any , there are one - way functions that run in , say , quadratic time ) , then @xmath4 is a ( weak ) one - way function .",
    "as the reader has probably already noticed , this complete one - way function is of the `` useless '' kind we ve been talking about .",
    "naturally , levin asked whether it is possible to find `` combinatorial '' complete one - way functions , functions that would not depend on enumerating turing machines or giving their descriptions as input . for @xmath5 years , the problem remained open and then was resolved by levin himself @xcite .",
    "levin devised a clever trick of having determinism in one direction and indeterminism in the other .",
    "having showed that a modified tiling problem is in fact a complete one - way function , levin asked to find other combinatorial complete one - way functions . in this work",
    ", we answer this open question .",
    "we take levin s considerations further to show how a complete one - way function may be derived from string - rewriting problems shown to be average - case complete in @xcite and a variation of the post correspondence problem .",
    "moreover , we discuss the general properties a combinatorial problem should enjoy in order to contain a complete one - way function by similar arguments .",
    "consider a finite alphabet @xmath6 .",
    "an ordered pair of strings @xmath7 over @xmath6 is called a _ rewriting rule _",
    "( sometimes also called a _ production _ ) .",
    "we write these pairs as @xmath8 because we interpret them as rewriting rules for other strings .",
    "namely , for two strings @xmath9 , @xmath10 we write @xmath11 if @xmath12 , @xmath13 for some @xmath14 .",
    "a set of rewriting rules is called a _ semi - thue system_. for a semi - thue system @xmath15 , we write @xmath16 if @xmath11 for some rewriting rule @xmath17 . slightly abusing notation",
    ", we extend it and write @xmath16 if there exists a finite sequence of rewriting rules @xmath18 such that @xmath19 for a more detailed discussion of semi - thue systems we refer the reader to @xcite .",
    "we can now define the distributional accessibility problem for semi - thue systems :    in @xcite , this problem was shown to be complete for .    for what follows ,",
    "we also need another notion of derivation in semi - thue systems .",
    "namely , for a semi - thue system @xmath15 we write @xmath20 if @xmath12 , @xmath13 for some @xmath21 and , moreover , there does not exist another rewriting rule @xmath22 such that @xmath23 and @xmath24 for some @xmath25 . similarly to @xmath26 , we extend @xmath27 to finite chains of derivations . in other words , @xmath20 if @xmath28 , and on each step of this derivation there was only one applicable rewriting rule .",
    "this uniqueness ( or , better to say , determinism ) is crucial to perform levin s trick .",
    "we also write @xmath29 if @xmath20 in at most @xmath30 steps .",
    "the following problem was proven to be complete for in @xcite ( see also remark @xmath31 in @xcite ) :    we need a modification of this problem .",
    "namely , we pose the question as follows : does @xmath32 hold for some @xmath33 ? if we remove the restriction @xmath30 , this problem is undecidable , but the bounded version is not known to be complete for .    given a nonempty list @xmath34 of pairs of strings",
    ", it will be convenient to view the function based on modified post correspondence problem as a derivation with pairs from @xmath35 as inference rules . a string @xmath36 _ yields _ a string @xmath33 _ in one step _ if there is a pair @xmath37 in @xmath35 such that @xmath38 .",
    "the `` _ _ yield _ _ '' relation @xmath39 is defined as the transitive closure of the `` yield - in - one - step '' relation .    to perform levin s trick , we need to get rid of the indeterminism .",
    "this time , the description of a deterministic version of @xmath40 is more complicated than in the case of semi - thue systems .",
    "if we simply required it to be deterministic , we would not be able to move the head of the turing machine to the left . to solve this problem",
    ", we have to look ahead by one step : if one of the two branches fails in two steps , we consider the choice deterministic",
    ".    formally speaking , we write @xmath41 if there are no more than two pairs @xmath42 such that @xmath43 and @xmath44 for some strings @xmath33 , @xmath45 ( where @xmath46 , but @xmath47 may equal @xmath48 : two possible different applications of the same rule are still nondeterministic ) and , moreover , we can not apply any rule in @xmath35 to @xmath45 .",
    "we write @xmath49 if @xmath50 in not more than @xmath30 steps .",
    "before presenting our own construction , we recall levin s complete one - way function from @xcite . in fact ,",
    "we slightly modify levin s construction and present an alternative proof based on ideas from @xcite .",
    "the difference with the original levin s construction is that he considered the tiling function for tiles with marked corners , namely , the corners of tiles , instead of edges , are marked with symbols . in the tiling of an @xmath51 square , symbols on touching corners of adjacent tiles should match .",
    "a _ tile _ is a square with a symbol for a finite alphabet @xmath6 on each size which may not be turned over or rotated .",
    "we assume that there exist infinite copies of each tile . by a _",
    "tiling _ of an @xmath51 square we mean a set of @xmath52 tiles covering the square in which the symbols on the common sides of adjacent tiles are the same",
    ".    it will be convenient for us to consider tiling as a string transformation system .",
    "fix a finite set of tiles @xmath53 .",
    "we say that @xmath53 _ transforms _ a string @xmath36 to @xmath33 , @xmath54 , if there is a tiling of an @xmath55 square with @xmath36 on the bottom and @xmath33 on top .",
    "we write @xmath56 in this case . by a _ tiling process _",
    "we mean the completion of a partially tiled square by one tile at the time .",
    "similarly to semi - thue systems , we define @xmath57 if and only if @xmath56 with an additional restriction : we permit the extension of a partially tiled square only if the possible extension is unique .    the _ tiling simulating function _ ( tiling ) is the function @xmath58 defined as follows :    * if the input has the form @xmath59 for a finite set of tiles @xmath53 and a string @xmath36 , then : * * if @xmath57 , then @xmath60 ; * * otherwise , @xmath61 returns its input ; * otherwise , @xmath61 returns its input .",
    "if one - way functions exist , then tiling is a weakly one - way function .",
    "let @xmath62 be the set of states of a turing machine @xmath3 , @xmath63 be the initial state of @xmath3 , @xmath64   the halting state , @xmath65   the transition function of @xmath3 , @xmath66   the tape symbols .",
    "by @xmath67 we denote the begin marker and by @xmath68   the end marker . we also introduce a new symbol for each pair from @xmath69 .",
    "we now present the construction of a tileset @xmath70 .    1 .   for each tape symbol",
    "@xmath71 we add @xmath72 2 .",
    "for each @xmath73 , @xmath74 , @xmath75 , if @xmath76 we add @xmath77 3 .   for each @xmath73 , @xmath74 , @xmath75 , if @xmath78 we add @xmath79 4 .",
    "finally , for @xmath67 and @xmath68 we add @xmath80    the following lemma is now obvious .",
    "[ tiling - turing ] for a deterministic turing machine @xmath3 that works @xmath52 steps and its corresponding tiling system @xmath70 , @xmath81    the rest of the proof closely follows @xcite .",
    "suppose that @xmath82 is a length - preserving one - way function that , on inputs of length @xmath30 , works for time not exceeding @xmath52 .",
    "by lemma  [ tiling - turing ] , there exists a finite system of tiles @xmath70 such that @xmath83 is equivalent to @xmath84 .",
    "therefore , with constant probability solving tiling is equivalent to inverting @xmath82 .",
    "our complete one - way function is based upon the distributional accessibility problem for semi - thue systems .",
    "first , we need to make this decision problem a function and then add levin s trick in order to assure length - preservation .    the _ semi - thue accessibility function _ ( staf )",
    "is the function @xmath58 that defined as follows :    * if the input has the form @xmath85 , consider the semi - thue system @xmath86 and : * * if @xmath87 , @xmath88 , there are no rewriting rules in @xmath35 that may be applied to @xmath33 , and @xmath89 , @xmath90 ; * * otherwise , @xmath61 returns its input ; * otherwise , @xmath61 returns its input .",
    "obviously , staf is easy to compute : one simply needs to use the first part of the input as a semi - thue system ( if that s impossible , return input ) and apply its rules until either there are two rules that apply , or we have worked for @xmath91 steps , or @xmath33 has been reached and no other rules can be applied . in the first two cases ,",
    "return input . in the third case , check that @xmath89 and return @xmath92 if so and input otherwise .    if one - way functions exist , then staf is a weakly one - way function .",
    "this time we need to encode turing machines into the string - rewriting setting .",
    "following @xcite , we have the following proposition :    for any finite alphabet @xmath6 with @xmath93 and any pair of binary strings @xmath36 and @xmath33 there exists a _ dynamic binary coding scheme _ of @xmath6 with @xmath94 with the following properties .    1 .",
    "all codes ( binary codes of symbols of @xmath6 ) have the same length @xmath95 .",
    "both strings @xmath36 and @xmath33 are distinguishable from every code , that is , no code is a substring of @xmath36 or @xmath33 .",
    "3 .   if a nonempty suffix @xmath96 of a code @xmath9 is a prefix of a code @xmath10 then @xmath97 ( one can always distinguish where a code ends and another code begins ) .",
    "strings @xmath36 and @xmath33 can be written as a unique concatenation of binary strings @xmath98 , @xmath99 , @xmath100 , and @xmath101 which are not prefixes of any code .",
    "now let us define the semi - thue system @xmath102 that corresponds to a turing machine @xmath3 .",
    "the rewriting rules are divided into three parts : @xmath103 .",
    "let us denote @xmath104 and fix a dynamic binary coding scheme and denote by @xmath105 the encoding of @xmath106 in this scheme .",
    "@xmath107 consists of the following rules for each @xmath108 : @xmath109 these rules are needed to rewrite the initial string @xmath110 into @xmath111 . since @xmath36 can be uniquely written as @xmath112 for some @xmath113 , this transformation can be carried out in @xmath114 steps .",
    "@xmath115 consists of rewriting rules corresponding to turing machine instructions . by @xmath64",
    "we denote the halting state , by @xmath63   the initial state , by @xmath116   the blank symbol , by @xmath117   the set of states of @xmath3 , by @xmath65   the transition function of @xmath3 , and by @xmath67 the begin / end marker .",
    "then @xmath115 consists of the following pairs :    1 .   for each state @xmath118 , @xmath75 , @xmath119 : @xmath120 2 .   for each state @xmath118 , @xmath75 , @xmath121 and @xmath122 , @xmath123 for @xmath124 , @xmath125 , or @xmath126",
    "@xmath107 and @xmath115 are completely similar to the construction presented in @xcite .",
    "the third part of his construction is supposed to reduce the result from @xmath127 , where @xmath33 is the result of the turing machine computation , to the protocol of the turing machine that is needed to prove that non - deterministic semi - thue systems are -hard .",
    "this time we have to deviate from @xcite : we need a different set of rules because we actually need the output of the machine , and not the protocol .",
    "thus , our version of @xmath128 looks like the following : @xmath129 this transformation can be carried out in at most @xmath130 steps .",
    "these rules simply translate @xmath131 back into the original @xmath33 and add @xmath64 in front of the output , thus achieving the actual output configuration of the original turing machine @xmath3 .",
    "the following lemma is now obvious .",
    "[ thue - turing ] for a deterministic turing machine @xmath3 and its corresponding semi - thue system @xmath102 , @xmath132 where @xmath133 , @xmath53 being the running time of @xmath3 on @xmath36 .",
    "again , the rest of the proof follows the lines of @xcite .",
    "there is a constant probability ( for the uniform distribution , it is proportional to @xmath134 ) that any given semi - thue system appears as the first part of the input .",
    "suppose that @xmath82 is a length - preserving one - way function .",
    "by @xcite , we can safely assume that there is a turing machine @xmath135 that computes @xmath82 and runs in quadratic time .",
    "by lemma  [ thue - turing ] , there exists a semi - thue system @xmath102 such that @xmath136 is equivalent to @xmath84 .",
    "therefore , with constant probability solving staf is equivalent to inverting @xmath82 .",
    "in this section , we describe a one - way function based on the post correspondence problem and prove that it is complete .",
    "the function is defined as follows .",
    "the _ post transformation function _ ( ptf ) is the function @xmath58 defined as follows :    * if the input has the form @xmath85 , considers the derivation system @xmath86 and : * * if @xmath137 , there are no rewriting rules in @xmath35 that may be applied to @xmath33 , and @xmath89 , then @xmath90 ; * * otherwise , @xmath61 returns its input ; * otherwise , @xmath61 returns its input .",
    "now , we reduce the computation of a universal turing machine to post correspondence in the way described in @xcite .    if one - way functions exist , then ptf is a weakly one - way function .    as usual",
    ", let @xmath62 be the set of states of a turing machine @xmath3 , @xmath63 be the initial state of @xmath3 , @xmath64   the halting state , @xmath65   the transition function of @xmath3 , @xmath138   the tape symbols . for all symbols we use the dynamic binary coding scheme described in section  [ semi - thue - owf ] .",
    "we now present the construction of a derivation set @xmath139 .    1",
    ".   [ rewriting_rule ] for every tape symbol @xmath36 : @xmath140 2 .",
    "[ first_rule ] for each state @xmath118 , @xmath75 , @xmath141 and rule @xmath142 : @xmath143 3 .   for each state @xmath118 , @xmath75 , @xmath144 and rule @xmath145 : @xmath146 4 .   for each state @xmath118 , @xmath75 , @xmath147 and rule @xmath148 : @xmath149 5 .",
    "[ last_rule ] for each state @xmath118 , @xmath75 , @xmath144 and rule @xmath150 : @xmath151    the configuration of @xmath3 after @xmath152 steps of computation is represented by a string @xmath153 , where @xmath154 is the current state of @xmath3 , @xmath36 is the tape before the head , and @xmath33 is the tape from the head to the first blank symbol .",
    "the simulation of a step of @xmath3 from a configuration @xmath153 consists of at most @xmath155 applications of the rule  [ rewriting_rule ] , followed by one application of one of the rules [ first_rule][last_rule ] , followed by @xmath156 applications of rule  [ rewriting_rule ] .",
    "note that before an application of a rule that moves head to the left one could also apply rule  [ rewriting_rule ] .",
    "if the turing machine @xmath3 is deterministic , then this `` wrong '' application leads to a situation where no rule from @xmath139 is applicable .",
    "thus , we have the following lemma .",
    "[ pcp - turing ] for a deterministic turing machine @xmath3 with running time at most @xmath52 and its corresponding post transformation system @xmath139 , @xmath157    as usual , the rest of the proof closely follows @xcite .",
    "suppose that @xmath82 is a length - preserving one - way function that works for time not exceeding @xmath52 .",
    "by lemma  [ pcp - turing ] , there exists a finite system of pair @xmath139 such that @xmath158 is equivalent to @xmath84 .",
    "therefore , with constant probability solving ptf is equivalent to inverting @xmath82 .",
    "note the slight change in distributions on inputs and outputs : ptf accepts as input @xmath159 and outputs @xmath160 , while the emulated machine @xmath82 accepts @xmath36 and outputs @xmath33 .",
    "such `` tiny details '' often hold the devil of average - case reasoning .",
    "fortunately , distributions on @xmath36 and @xmath159 can be transformed from one to another by a polynomial algorithm , so ptf is still a weak one - way function ( see @xcite for details ) .",
    "both our constructions of a complete one - way function look very similar to the construction on the tiling complete one - way function .",
    "this naturally leads to the question : in what other combinatorial settings can one apply the same reasoning to find a complete one - way function ?    the whole point of this proof is to keep the function both length - preserving and easily computable .",
    "obvious functions fall into one of two classes .    1 .",
    "_ easily computable , but not length - preserving_. for any -hard problem , one can construct a hard - to - invert function @xmath61 that transfers _ protocols _ of this problem into its results .",
    "this function is hard to invert on average , but it does not preserve length , and thus it is impossible to translate a uniform distribution on _ outputs _ of @xmath61 into a reasonable distribution on its _ inputs_. the reader is welcome to think of a reasonably uniform distribution on _ proper _ tilings that would result in a reasonably uniform distribution on their upper rows ; we believe that to construct such a distribution is either impossible or requires a major new insight .",
    "length - preserving , but hard to compute_. take a -hard problem and consider the function that sends its input into its output ( e.g. the lowest row of the tiling into its uppermost row ) .",
    "this function is hard to invert and length - preserving , but it is also hard to compute , because to compute it one needs to solve tiling .",
    "following levin , we get around these obstacles by having a _ deterministic _ version of a -hard problem .",
    "this time , a tiling problem produces nontrivial results only if there always is _ only one _ proper tile to attach .",
    "similarly , in section  [ semi - thue - owf ] we demanded that there is only one rewriting rule that applicable on each step ( we introduced @xmath161 for this very purpose ) . in section  [ pcp - owf ]",
    "we slightly generalized this idea of determinism , allowing fixed length deterministic backtrack .",
    "however , if for all @xmath162 we can do this deterministic procedure , then we can easily invert @xmath61 .",
    "so we need that for most @xmath96 an indeterminism appears and the procedure return @xmath96 .",
    "a combinatorial problem should have two properties in order to hold a complete one - way function .    1 .",
    "it should have a deterministic restricted version , like tiling , string rewriting and modified post correspondence .",
    "2 .   its deterministic version should be powerful enough to simulate a deterministic turing machine .",
    "for example , natural deterministic post correspondence ( without any backtrack ) is , of course , easy to formulate , but does not seem to be powerful enough .    keeping in mind these properties , one is welcome to look for other combinatorial settings with combinatorial complete one - way functions .",
    "we have shown a new complete one - way function and discussed possibilities of other combinatorial settings to hold complete one - way functions .",
    "these functions are combinatorial in nature and represent a step towards the easy - to - analyze complete cryptographic objects , much like is a perfect complete problem for",
    ".    however , we are still not quite there . basically , we sample a turing machine at random and hope to find precisely the hard one .",
    "this distinction is very important for practical implications of our constructions .",
    "we believe that constructing a complete cryptographic problem that has properties completely analogous to sat requires a major new insight , and such a construction represents one of the most important challenges in modern cryptography",
    ".    another direction would be to find other similar combinatorial problems that can hold a complete one - way function . by looking at our one - way functions and levin s tiling",
    ", one could imagine that every -complete problem readily yields a complete one - way function . however , there is also this subtle requirement that the problem ( or its appropriate restriction ) should be deterministic ( compare @xmath27 and @xmath26 )",
    ". it would be interesting to restate this requirement as a formal restriction on the problem setting .",
    "this would require some new definitions and , perhaps , a more general and unified approach to combinatorial problems .",
    "the authors are very grateful to dima grigoriev , edward a. hirsch and yuri matiyasevich for helpful comments and fruitful discussions ."
  ],
  "abstract_text": [
    "<S> in 2003 , leonid a. levin presented the idea of a combinatorial complete one - way function and a sketch of the proof that tiling represents such a function . in this paper , we present two new one - way functions based on semi - thue string rewriting systems and a version of the post correspondence problem and prove their completeness . besides , we present an alternative proof of levin s result . </S>",
    "<S> we also discuss the properties a combinatorial problem should have in order to hold a complete one - way function .        </S>",
    "<S> arist kojevnikov    sergey i. nikolenko </S>"
  ]
}