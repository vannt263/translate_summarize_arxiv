{
  "article_text": [
    "mathematics is useful for all branches of scientific research .",
    "the mastery of mathematical skills is an essential enabler of success in almost all sciences .",
    "the mastery of discrete mathematics , which studies discrete and distinct mathematical objects , is particularly important for many branches of scientific research , including , for example , the efficient production of correct and efficient software .",
    "unfortunately , globally - speaking , the mathematical skills of undergraduate and even graduate students are significantly lacking .",
    "many prospective scientists lack the basics of how to think mathematically and how to write a correct mathematical proof , despite the importance of such skills for their future success as scientists .    to help in addressing this situation , daniel velleman wrote a book in 1994 ( with a second edition in 2006 ) titled ` how to prove it : a structured approach '  @xcite , in which he likened constructing mathematical proofs to structured programming .",
    "velleman used in his book examples from arithmetic and high - school mathematics to present his ideas on how to construct mathematical proofs in a structured way .",
    "velleman encouraged the use of his book by referring to a pedagogic mathematics software that he developed called proof designer , by which readers of his book can apply the ideas they learn from the book .",
    "proof designer is freely - available online , as a java applet , to assist its users build mathematical proofs of elementary set theory theorems in a structured way .",
    "since 1994 , and more so since 2006 , many mathematics courses around the world have used velleman s book , and its accompanying software , as an essential references for teaching the skills of mathematical thinking and proof construction to graduate and undergraduate students . helping in the widespread use of the book",
    "was velleman s lucid writing style , his use of elementary mathematical examples in his book , and also the ease of use of proof designer when compared to that of other proof assistants .",
    "recently we started a project whose goal is to take proof designer to its next step ,",
    "so as to make it usable in wider contexts and to appeal to an even wider audience .",
    "nowadays , in the age of handheld devices ( such as tablets and smart - phones ) , proof designer is starting to show its age and limitations .",
    "for example , there is no portal of proof designer to any of the popular platforms for handheld devices .",
    "additionally , proof designer uses only english as the language of its proofs and the language of its graphical user interface .",
    "thus , compared to guis of modern educational software , despite its success and it fully serving its initial purpose , proof designer is now clearly lacking in many regards .",
    "the goal of our project is to eliminate most , if not all , of the limitations on proof designer that make it less - used today as a math education software than it was during the last ten years . in the following two sections we report , using software illustrations , on our effort so far .",
    "we first describe in the next section what we have done so far , then , in the following section , we describe what remains to be done .",
    "to describe what we have done so far , we first describe proof designer in its original form then describe changes we made to it . then we describe steps we made so far towards porting proof designer to the android platform .",
    "proof designer allows users to develop proofs using an intuitive interface .",
    "figures  [ fig : an - incomplete - proof]-[fig : proof - designer - reexpress ] , on pp .  - , show the main components of the proof designer user experience , which involve the presentation of structured complete and incomplete proofs , a theorem - entry dialog box , drop - down menus that the user uses to construct his or her proofs , and a dialog box for re - expressing mathematical formulas .",
    "proof designer , in its original form , is available for use as a java applet at http://www.cs.amherst.edu/~djv/pd/pd.html .",
    "instructions for how to setup and use proof designer can be found at http://www.cs.amherst.edu/~djv/pd/help/instructions.html .      before setting on building proof maker as a portal of proof designer to handheld devices",
    ", we set on making some improvements to proof designer itself . after communicating with professor velleman and consulting with him , he kindly sent us the source code of proof designer .",
    "we made many changes to proof designer , some of which are visible to the user , and some are not .",
    "first , to enhance our understanding of the proof designer code base and to facilitate its further development , we made some improvements to the software source code .",
    "in particular ,    1 .",
    "proof designer had little documentation for its source code .",
    "we thus added some unit tests , ` assert ` statements , and code comments .",
    "all classes of proof designer were in one java package ( the default package ) .",
    "based on uml class diagrams of the code base ( see figure  ) , we distributed the code among seven java packages ( a.k.a .",
    ", `` modules '' ) , the most important being packages for formula classes ( class ` formula ` and its descendant classes ) and for proof component classes ( class ` pcomponent ` and its descendants ) .",
    "we also had packages for class ` menuaction ` and all its ` dox ` descendant classes , and for class ` pdialog ` and all its descendant proof designer dialog box classes ( e.g. , class ` entrydlg ` , which is used to enter theorem statements in proof designer ) .",
    "proof designer was written using java 1.3 . hence , its code made no use of java generics or java enumerations , for example , which were introduced in java 1.5/5.0 .",
    "we thus used generics wherever possible in the proof designer source code to improve the reliability and maintainability of the code , and we also made use of ` enum`s ( instead of ` int`s ) , e.g. , for defining proof designer s formula and operator kinds .",
    "we also made changes that are visible to the user , to improve his or her user experience .    1 .",
    "we restructured menus so that some user actions , more intuitively , are viewed as either inferences ( from givens ) or are goal - oriented actions .",
    "( see figure  . ) 2 .",
    "we added the ability to save and load proof sessions ( as xml files ) .",
    "we added the ability to run proof designer , not only as a web browser applet but also as a standalone software ( a java jar file ) that can be downloaded and run without the need for a web browser .",
    "proof designer originally had the ability to a single undo / redo proof step .",
    "we added an unlimited undo / redo capability to proof designer .",
    "we also added a new unlimited undo / redo capability in proof designer s reexpress dialog .",
    "( see figure  . )",
    "we added limited support for automating proofs in proof designer by adding an ` auto ' command for use on proof goals .",
    "the auto command automatically decides and performs the next step in the proof , if any , based on the logical form of the goal statement .",
    "7 .   to ease the use of proof designer ( and to gear it more towards touch - based interaction ) , we added a toolbar that has the auto and undo / redo commands .",
    "( see figure  . )      after implementing the above - mentioned improvements to proof designer , we set on exploring porting proof designer to handheld devices .",
    "we decided to call the new software proof maker .",
    "given the global widespread use of the android platform , we picked the platform as our first choice for porting proof designer to .",
    "we call the portal to the android platform android proof maker ( or , apm for short ) .    given that typical android software",
    "is written using java , we initially assumed porting proof designer to android will be straightforward .",
    "in fact the ` formula ` package in proof designer ( after making the above - mentioned changes ) was ported without a single change to its code .",
    "however , we soon realized that there is no one - to - one correspondence between java swing ui ( user interface ) components ( used in proof designer ) and android ui components .",
    "the differences include , for example ,    * the android ` view ` class has a somewhat different semantics and a different behavior than the java swing ` jcomponent ` class . *",
    "the android s ` viewgroup ` class is different from its swing approximate counterpart class ` container ` . *",
    "although the android platform has dialog boxes , but the closest to a java swing dialog box is usually an android ` activity ` not an android dialog box .",
    "* similarly , ` jframe ` and ` jpanel ` in java swing have no exact counterparts in android ui components .",
    "the closest android classes to them seem to be ` activity ` and ` linearlayout ` , respectively . * in java",
    "swing the ` toolkit ` and ` font ` classes provide font services that in android are provided , using a different api , in classes ` paint ` and ` typeface ` .",
    "we thus started experimenting with android ui components to see which could suit our purposes and best approximate the proof designer user interface , and that will incur the least changes to the source code of proof designer so as to maintain as much as possible of its `` spirit '' .",
    "( see figure   and figure  . )",
    "even though not as polished as their proof designer counterparts , our portal of some of the main proof designer ui components to the android platform is a good proof of concept that the portal is possible , even when it will not be straightforward .",
    "our effort so far has provided us thus with an assurance that proof designer does not need a total rewriting to be ported to the android platform or to platforms of other handheld devices .",
    "it is worthy to mention that due to proof designer not employing the popular model - view - controller ( mvc ) model in its software design , we do though expect the differences between the android and swing ui apis to affect the final versions of android proof maker , particularly affecting the presentation of proofs , which in proof designer are modeled using descendants of class ` pcomponent ` .",
    "( contrary to the requirements of mvc , class ` pcomponent ` and its descendants in proof designer doubly function as model classes , modeling abstract proof components , but also as view classes that inherit from the swing ` jcomponent ` ui class and as such are used as part of the gui of proof designer ) .",
    "as demonstrated by the figures for apm as we have it today , proof maker is still far from complete .",
    "much remains to be done before we get to a final usable version of proof maker .",
    "we mention the most important remaining steps below .",
    "we first intend to make further improvements to proof designer .",
    "these include the following .      1 .   adding more unit tests , assertions , and code comments",
    "consider using the mvc software design model .",
    "mostly will affect proof components ( ` pcomponent ` and its subclasses ) .      1 .   improving auto ( expanding its scope to givens )",
    ". 2 .   supporting long variable names , and possibly expanding the role of variables along the lines of  @xcite .",
    "3 .   supporting named hypothesis , to allow easy reference .",
    "4 .   allow proof comments .",
    "5 .   adding syntax highlighting ( color coding of proofs ) .",
    "6 .   adding more toolbar buttons .",
    "updating html help files to reflect software changes",
    ".      then our remaining work on proof maker includes the following .    1 .   finishing and polishing the apm user interface ( ui ) as a genuine , fully - functioning android portal of the proof designer ui that has the look - and - feel but also the behavior and user experience of native android applications .",
    "2 .   adding more touch - aware interactions to proof maker ( e.g. , dragging - and - dropping of hypothesis , context menus ) .",
    "3 .   internationalizing proof maker ,",
    "so as to allow languages such as arabic , chinese , etc . , in its proofs and its gui .",
    "4 .   porting proof designer to other handheld device platforms such as windows 8 phone and ios .",
    "coq  @xcite and isabelle  @xcite are generic proof assistants .",
    "both build on a large tradition of scientific research in the area of proof automation , going back to lcf  @xcite and even further .",
    "compared to proof designer , coq and isabelle are vastly much more powerful ( they can help construct proofs in almost any mathematical domain ) , but the two proof assistants are much less user - friendly than proof designer .",
    "users of coq and isabelle have to write code to construct their proofs . as",
    "such , coq and isabelle users actually need to also be programmers , not only mathematicians or math students .",
    "since handheld devices typically lack a keyboard , writing capabilities are usually limited on them .",
    "this casts doubts on the likelihood of coq or isabelle getting ported to handheld devices .",
    "dc proof  @xcite is a more user friendly software when compared to coq and isabelle , and it is a bit more powerful than proof designer . given its ascii - based mathematical notation , however , dc proof is less user - friendly than proof designer .",
    "the following table summarizes some of the differences between these proof construction software tools .",
    "[ cols=\"^,^,^,^,^\",options=\"header \" , ]",
    "like proof designer , the scope of proofs doable in proof maker will be limited to elementary set theory .",
    "once done with proof maker , future work that could be built on top of it can include adding a type system ( and possibly later a type inference system ) that enables proof maker overcome this fundamental limitation that it inherited from proof designer . adding a type system to proof maker",
    "will enable it to assist in constructing proofs in mathematical domains other than set theory ( e.g. , number theory , group theory , order theory , domain theory , etc . ) , while maintaining the characteristic simplicity of the software and its user - friendliness .",
    "( this software , for example , may help in our formalization of an introductory domain theory textbook  @xcite . )",
    "lurch is a word processor that can check your math  @xcite . in particular , just as a word processor checks spelling and grammar in natural language documents , lurch aims to check any mathematical proofs included in a document ( e.g. , a school math homework , an exam , a research article , a book chapter , ... etc . ) with as little user guidance as possible ( in the form of document annotations ) . in its aims ,",
    "lurch was greatly influenced by proof designer . adding a _ customizable _ type system to lurch is another possible future work that can be done after adding a type system to proof maker . adding a customizable type system to lurch will add to lurch the ability to restrict its rule identifiers so that they can only be instantiated with an expression of a certain type ( like a statement , or a set , or a natural number , ... etc . ) .",
    "the type of an expression in lurch will also be customizable , and will be compatible with a customizable parser that the authors of lurch intend to soon add to lurch .",
    "moez  a. abdelgawad .",
    "finitary - based domain theory in coq : an early report ( extended abstract ) .",
    "technical report , the 7th coq workshop , sophia antipolis , france also available at arxiv.org:1506.nnnn [ cs.pl ] , 2015 ."
  ],
  "abstract_text": [
    "<S> proof designer is a computer software program designed to help mathematics students learn to write mathematical proofs . under the guidance of the user , proof designer assists in writing outlines of proofs in elementary set theory . </S>",
    "<S> proof designer was designed by daniel velleman in association with his book how to prove it : a structured approach to help students apply the methods discussed in the book , making classes based on the book more interactive .    </S>",
    "<S> this paper is an early report on the progress of our effort to `` bring set theory to the masses '' by developing proof maker , a new proof designer - inspired software that ports proof designer to hand - held devices such as smart - phones and tablets . </S>",
    "<S> proof maker , when completed , will allow students to use proof designer with the ease of a touch , literally , on their smart devices . </S>",
    "<S> our goal behind developing proof maker is to enable any one who is interested enough to develop elementary set theory proofs anywhere he or she might be ( think of doing proofs while waiting at a bus stop ! ) and at any time he or she wishes ( think of writing proofs before going to bed , or even in bed ! ) . in this paper </S>",
    "<S> we report on the improvements we made to proof designer so far , and on the ( many ) steps remaining for us to have a fully - functioning proof maker `` in our hands '' . </S>"
  ]
}