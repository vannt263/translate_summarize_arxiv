{
  "article_text": [
    "hausdorff in 1918 @xcite , in cooperation with besicovitch , calculated , for the first time , the dimension of some irregular sets as a fractional number .",
    "richardson , in his attempt to measure the real length of the borders between countries , presented in 1961 @xcite the relation @xmath0 , where @xmath1 is the actual length of a line , @xmath2 is the measurement scale , @xmath3 is the measure and @xmath4 is a constant .",
    "mandelbrot , in 1967 , realized that geographic borders can have a property of statistical self - similarity and that the exponent @xmath4 measures the hausdorff dimension of the border .",
    "the meaning of fractals and the physical meaning of @xmath4 though , was presented systematically for the first time by mandelbrot in 1977 in his famous book `` the fractal geometry of nature '' @xcite .",
    "mandelbrot defined a set as a fractal if it is a union of @xmath5 different subsets , each one a copy of the original in a scale @xmath6 in all coordinates .",
    "he defined the fractal dimension @xmath4 by the relation    @xmath7    in order to measure @xmath4 , one can use equation    @xmath8    where @xmath9 . in order to apply ( [ eq : dmeas ] ) to fractal dimension measuring , one can use the box counting ( bc ) algorithm , introduced by gagnepain and roques - carmes in 1986 @xcite as `` reticular cell counting '' .",
    "it works by iteratively scanning the volume @xmath10 in which the set is contained , with a box of size @xmath11 and counting of the number @xmath5 of non - empty boxes .",
    "the scan is carried out with non - overlapping boxes for @xmath12 , where @xmath13 is the iteration number , computing @xmath5 for each @xmath14 .",
    "the procedure stops when @xmath15 is less than or equals the size of the lattice on which the set is built .",
    "the fractal dimension can be calculated from the slope of the @xmath16 plot .",
    "the method of mass distribution for fractal measurement was presented by voss in 1986 @xcite and implemented by keller et al in 1989 @xcite for image segmentation .",
    "the box - size values are , according to this method , not standard but all the possible ones from 1 to @xmath1 . also , the box does not have predetermined grid positions but it centers in every data element of the 3-d space . for every box size and every box position ,",
    "the number of data elements @xmath17 inside the box is counted ( the mass ) .",
    "the number of boxes @xmath5 for each @xmath15 is computed from the counting of all the boxes of size @xmath15 with @xmath18 pixel inside , with @xmath19 , @xmath20 , ... @xmath21 .",
    "this method is more accurate and can easily compute local fractal dimension but it requires much more processing power .",
    "the binary concatenation variation of box counting was proposed by liebovitch and toth in 1989 @xcite and is as follows : for each element of the set , a string is created by concatenating the binary representations of its normalized coordinates on all the axes of the space . for each iteration ,",
    "a logic `` and '' is performed with a string formed by 1 s for the first @xmath22 digits and 0 s for the rest , where @xmath23 is the total iteration count .",
    "after that , these numbers are sorted and the number of changes between them is counted .",
    "the fractal dimension is computed as usual .    the gliding box method introduced by allain and cloitre in 1991",
    "@xcite uses a box of size @xmath15 which is successively centered in all pixel positions .",
    "the mass @xmath17 is measured and the probability distribution @xmath24 is obtained such that a gliding box of size @xmath15 contains mass @xmath17 . after computing the moments of this distribution , both @xmath4 and",
    "the lacunarity can be computed .",
    "the method of differential box counting ( dbc ) presented by sarkar and chaudhuri in 1992 @xcite substitutes the time - consuming scanning in vertical axis with a simple subtraction . instead of scanning the whole 3-d space",
    "in which the set is contained with a cube , one scans the x - y plane with a square and measures the height between the maximum and minimum values in z axis ; this is assumed to be the total number of boxes found over the square .",
    "this method only gives correct results if the set is dense and uniformly distributed in vertical axis .",
    "however , if , at the same column , only the topmost and lowermost partitions are non - empty , the dbc algorithm will measure @xmath25 in box units instead of 2 .",
    "another drawback is that it is not easily expandable to more than 3 dimensions ; it is theoretically possible , but implementing it was not deemed worth the effort .",
    "the successive partitioning algorithm , presented by molteno in 1993 @xcite , involves dividing each box into @xmath26 sub - boxes , disregarding all empty boxes for the rest of the process , thus saving processing time .",
    "a method of measuring of fractal dimension of colour images was made by lindstrom , in 2008 @xcite .",
    "the method used is an extension of the variation method ( essentially a `` sliding differential box counting '' ) in many dimensions .",
    "however , the proposed method needs more than 3 colour channels to be accurate and the computational resources it requires are very high .",
    "an extension to the above - mentioned mass distribution method in colour space has been done recently in an unpublished work of ivanovici and richard @xcite . for a certain square of size @xmath15 in the @xmath27 plane",
    ", they count the number of data elements ( pixels ) that fall inside a 3-d cube of size @xmath15 centered in the current pixel .",
    "for a variety of reasons , no `` proper '' box counting algorithms had been systematically applied to images thus far .",
    "instead , approximations such as dbc were commonly employed . in the present paper , it was decided that no such approximations were necessary : the method used is fast , reasonably accurate and easily expands to any number of dimensions . in particular , any new dimension the set might obtain merely adds a new column in a `` partition table '' , whose creation is detailed below . from it , @xmath5 can be easily computed , and then @xmath4 as usual .    in our method",
    ", no box is being moved around per se . instead , each axis of the image is first partitioned into @xmath14 partitions to create an e - dimensional grid .",
    "we start with the finest possible partitioning ,    @xmath28    the iterations will take place for the values of @xmath29 , where    @xmath30    is the maximum number of iterations if we halve the edges @xmath15 of the box in each iteration according to relation    @xmath31    for each axis .",
    "the partitioning on axis x will then be determined by    @xmath32    where @xmath33 is the coordinate of any pixel in the box and @xmath34 is the coordinate of the box .",
    "the same normalization applies for all axes .",
    "this means that , if we know the @xmath35 coordinates of the pixel we can find the box that this pixel belongs in , keeping in mind that @xmath36 .    in box merging",
    ", the first iteration is executed with the finest possible partitioning ( @xmath37 ) .",
    "the key idea is that , if the positions of its non - empty boxes are known , the non - empty boxes belonging to the immediately coarser partitioning ( @xmath38 ) can be found without further scanning .",
    "so , we construct a table @xmath39 with the coordinates of all the partitions which contain at least one element of the data set",
    ". the partition table of a new iteration can easily be produced by an integer division by 2 of all the contents of @xmath39 and merging of the identical rows , so no scanning is needed any more .",
    "the algorithm is as follows .",
    "@xmath40 ( [ eq : smax ] ) + calculate @xmath15 for all axes ( [ eq : els ] ) + for all pixel coordinates x , y + compute partition coordinates @xmath41 ( [ eq : part ] ) + put the @xmath41 values in a new row in partition table @xmath39 + end for + eliminate identical rows of @xmath39 + store the number @xmath5 of rows of @xmath39 and the current value of @xmath14 .",
    "+ calculate maximum number of iterations ( [ eq : numax ] ) + for all iterations but the previous one + divide the contents of @xmath39 by 2 and take the integer part + eliminate identical rows to create the new partition table @xmath39 + store the number @xmath5 of rows of @xmath39 + divide @xmath14 by 2 and store the new value + end for + calculate @xmath4 from stored values of @xmath5 and @xmath14 ( [ eq : dmeas ] ) and ( [ eq : lognmax ] ) +",
    "in order to better understand the way the shape of the @xmath16 plot affects the calculation of @xmath4 we selected a picture with high self - similarity ( a scene in a forest ) and calculated the log - log plots in various resolutions ( fig [ fig : resoltest ] ) and various blur radii ( fig [ fig : blurtest ] ) . it can be seen that , when the resolution falls , @xmath4 remains almost constant whereas it drops when the image is being blurred .",
    "it can easily be observed that , when the fractal dimension is high and the size of the picture is limited , the plot abruptly turns to a horizontal line at about the height that corresponds to the value @xmath43 .",
    "this is obviously caused by the fact that the picture is only finitely divisible ; the boxes that the algorithm counts could never be greater than the total amount of pixels in the picture .",
    "thus , even though the plot rises straightly at first , there is a cut - off at a predetermined height . taking this cut - off into account in calculating @xmath4",
    "will produce wrong results .",
    "if the horizontal part of the plot corresponds to the logarithm of the size , it means that this image needs more pixels to express its self - similarity . in other words ,",
    "the image has too high a fractal dimension to be kept in this size . to counteract",
    "that , it was decided that all the values of @xmath44 approximately equal to the logarithm of the size of the image must be disregarded , i.e.    @xmath45    the cut - off of 0.9 is a heuristic one and proved to give satisfactory results in all situations .",
    "box dimension is calculated from the slope of the linear fit of the non - rejected values .",
    "the colour image is a mapping from a 2-d space of pixel positions to the 3-d space of rgb colours .",
    "because the entire image frame in the @xmath27 plane is used , the minimum fractal dimension will be @xmath46 .",
    "on the other end , fractal dimension will always be smaller than the euclidean dimension of the space where the data set is contained , which means that @xmath47 . to create a shape with a fractal dimension smaller than 2",
    ", there would need to be an alpha channel that would define some pixels as transparent , disregarding their colour information .",
    "in such a situation , the fractal dimension of the colour image can become as low as 0 .",
    "for example , we can define a coloured line with fractal dimension 1 , where all of the pixels not belonging to it are transparent ; this means that the partition table will have less than @xmath48 rows ( pixels ) . as a first test ,",
    "we have created a line in the 5-d image space from ( x , y , r , g , b)=(0,0,255,0,0 ) to ( 255,255,0,255,255 ) ( fig [ fig : coloredline ] ) and checked its fractal dimension ; the program gave us d=1 exactly ( fig [ fig : plotsall ] ) .",
    "as a second test , we have created a set of four images with size @xmath49 pixels and known fractal dimensions . the first image ( fig .",
    "[ fig : noise0 ] ) has been formed by a plane in 5-d space .",
    "red channel has a gradient 0 - 255 along the x axis , green a gradient 255 - 0 along the y axis , and blue channel has constant value 128 .",
    "as expected , the fractal dimension was measured @xmath50 exactly ( fig . [",
    "fig : plotsall ] ) .",
    "the second image is a copy of the previous one , except that random numbers were placed in blue channel instead .",
    "its measured fractal dimension was @xmath51 .",
    "the third image has random values in green as well , and the last one has random numbers in all three channels ; the measured values were @xmath52 and @xmath53 respectively , as expected .",
    "of course , colour noise in all channels produces the earliest cut - off at all resolutions .    as an application of the box merging algorithm ,",
    "the fractal dimension of numerous known paintings was measured .",
    "a representative sample of the results , with low , medium and high @xmath4 can be seen in fig .",
    "[ fig : paintingstest ] .",
    "the biggest box dimension was measured ( not surprisingly ) in pollock .",
    "the elimination of identical rows shrinks the partition table , so the time required for each new iteration becomes significantly lower . if @xmath3 is the size of the image in pixels , the time complexity of the box merging algorithm is @xmath54 because it scans the pixels of the colour image only once . in our dual core",
    "32 bits system with matlab , the time the box merging method needs is 5 seconds per mega - pixel in the worst case .",
    "apart from the memory required for the colour image itself , the algorithm also needs some memory space for the partition table : 2 bytes for each spatial coordinate and 1 byte for each colour , 7 bytes per pixel in total .",
    "the method presented here is a variation of the box counting method so any evaluation of box counting , except that of time complexity and memory requirements , applies here as well , e.g. @xcite , @xcite and @xcite .",
    "the box merging algorithm presented here , based on box counting , is fast and very easily implemented from one to any number of dimensions . with the exception of time complexity , the presented algorithm has all the characteristics of the box counting method since it produces the same @xmath16 table .",
    "we have tested colour images and found that their measured fractal dimension varies between 2 and 5 , validating our algorithm .",
    "j.  m. keller , s.  chen , r.  m. crownover , texture description and segmentation through fractal geometry , computer vision , graphics , and image processing 45 ( 1989 ) 150  166 .",
    "http://dx.doi.org/doi : 10.1016/0734 - 189x(89)90130 - 8 [ ] .",
    "k.  foroutan - pour , p.  dutilleul , d.  l. smith , advances in the implementation of the box - counting method of fractal dimension estimation , applied mathematics and computation 105  ( 23 ) ( 1999 ) 195  210 .",
    "http://dx.doi.org/10.1016/s0096-3003(98)10096-6 [ ] .",
    "f.  peyrin , l.  ratton , n.  zegadi , s.  mouhamed , y.  ding , evaluation of the fractal dimension of an image using the wavelet transform : comparison with a standard method , in : time - frequency and time - scale analysis , 1994 . ,",
    "proceedings of the ieee - sp international symposium on , 1994 , pp .",
    "244  247 .",
    "http://dx.doi.org/10.1109/tfsa.1994.467247 [ ] ."
  ],
  "abstract_text": [
    "<S> the box counting method for fractal dimension estimation had not been applied to large or colour images thus far due to the processing time required . in this letter </S>",
    "<S> we present a fast , easy to implement and very easily expandable to any number of dimensions variation , the box merging method . </S>",
    "<S> it is applied here in rgb images which are considered as sets in 5-d space .    </S>",
    "<S> box counting , fractal dimension , fractals , image classification , image processing 07.05.pj , 07.05.kf </S>"
  ]
}