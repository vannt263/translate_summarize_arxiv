{
  "article_text": [
    "collision algorithms have been used to obtain polynomial ( typically square root ) speedups since the advent of computer science . indeed , there are even collision `` algorithms '' in the world of analog measurement @xcite .",
    "most collision algorithms exploit time - space tradeoffs , arriving at a quicker algorithm by storing part of the search space in memory and utilizing an efficient lookup scheme .",
    "one of the most famous of these collision - style methods is shanks s baby - step giant - step procedure for the discrete logarithm problem @xcite .",
    "traditionally , the discrete logarithm problem is the problem of finding an integer @xmath16 such that @xmath17 , where @xmath18 and @xmath19 are elements of a finite cyclic group of order @xmath20 and @xmath18 is a generator ( has order @xmath20 ) . then there is exactly one @xmath21 such that @xmath17 .",
    "shanks s baby - step giant - step algorithm then writes @xmath22 with @xmath23 and @xmath24 and looks for a collision in the equation : @xmath25 by precomputing values of @xmath26 ( or @xmath27 ) and storing them in a hash table , a collision can be found in @xmath28 time and @xmath28 space , recovering the solution @xmath16 .",
    "various extensions of the baby - step giant - step algorithm have been developed , mostly focusing on discrete logarithm problems in groups that are important to cryptography .",
    "for the classic problem , @xcite contributed two elegant methods that also exploit collision , but use very little space .",
    "( they have yet to be rigorously analyzed , in their original form . ) for more information about these algorithms , and more efficient methods that apply to specific groups of an arithmetic nature , we refer to surveys by @xcite and @xcite .",
    "ideas similar to the baby - step giant - step algorithm have been used on 0 - 1 integer programming problems .",
    "( this seems to be folklore . )",
    "suppose we want to solve @xmath29 , where @xmath30 is a 0 - 1 column vector .",
    "if we let @xmath31 and @xmath32 be half - length column vectors , and split @xmath11 down the central column into @xmath33 and @xmath34 , we can use collision to solve @xmath35 .",
    "( here , we exploit not a group structure , but rather , the associative law for matrix - vector multiplication . ) for a recent application , see @xcite . in this paper",
    ", we focus on a different discrete log generalization that can be stated as follows .",
    "suppose that @xmath0 is a finite group that acts on a set @xmath1 .",
    "denote by @xmath36 the action of @xmath3 on @xmath37 .",
    "then , given elements @xmath38 , the group action discrete logarithm problem is the problem of finding a @xmath19 such that @xmath4 .    the first step beyond brute force search for this problem is to design an analog to the shanks method .",
    "we will find appropriate splitting sets @xmath39 so that for any @xmath40 in the orbit @xmath41 , we have @xmath42 for some @xmath9 and @xmath10 . a match in the two sets @xmath43 recovers the solution @xmath44 .    in this work ,",
    "we treat two situations .",
    "the first is one of maximum generality : we know almost nothing about the structure of @xmath0 , and can only work with it by applying it to elements of @xmath1 .",
    "the second is maximally specific : @xmath0 is the symmetric group @xmath7 . in neither case",
    "do we assume any particular knowledge about the orbit of @xmath45 or @xmath40 .    for general groups ( the first case )",
    ", we analyze randomized methods that achieve square root speedups when compared to the naive approach of exhaustive search . for the important second case",
    ", we develop deterministic algorithms that utilize the structure of @xmath7 .",
    "these algorithms have close to square root complexity .",
    "to motivate our model and concentration on @xmath7 , we give several applications that fit into our framework .",
    "we first show how group actions lead to an unconventional algorithm for the graph isomorphism problem ( gi ) .",
    "let @xmath1 be the set of adjacency matrices for graphs on @xmath20 vertices .",
    "the symmetric group @xmath7 acts on @xmath1 , via @xmath46 .",
    "( @xmath47 is just the permutation matrix for @xmath19 . ) in this case , the group action discrete logarithm problem is exactly graph isomorphism : given adjacency matrices @xmath48 and @xmath49 , find @xmath50 to make @xmath51 , or determine no such @xmath19 exists .",
    "using our results , we arrive at a deterministic graph isomorphism procedure with run time about @xmath15 .",
    "although there are much faster algorithms than this , they are either conceptually involved @xcite , can not guarantee efficient performance in all cases @xcite , or both @xcite .",
    "the baby - step giant - step algorithm , on the other hand , gives an immediate proof that exhaustive search through permutations is not the best method for graph isomorphism .",
    "there are a variety of other gi - related problems that also fit in the discrete log symmetric group action framework .",
    "in particular , hypergraph isomorphism and equivalence of permutation groups via conjugation can both be formulated as symmetric group actions .",
    "furthermore , the latter problem has no known moderately exponential ( @xmath52 for @xmath53 ) algorithm @xcite .",
    "we further note that in cryptography , the solution of iterated block ciphers @xcite is closely related to a group - action discrete logarithm problem in a symmetric group",
    ". our approach may also be useful in computational galois theory , specifically , in computing the splitting field of a polynomial @xcite .    because our approach is orbit - oblivious",
    ", our framework is very general . in some problems , however , algorithms aware of orbit restrictions may benefit significantly by reducing the number of @xmath3 to consider .",
    "this is true , for example , in the graph isomorphism problem .",
    "an orbit - sensitive gi algorithm can utilize the fact that a vertex can only be mapped to another vertex of the same degree , whereas our approach will test every permutation . on the other hand , there seem to be problems where one can not exploit such orbit restrictions .    in our conference paper , we developed such an example using homomorphic encryption .",
    "the idea was that if we take a group action discrete logarithm problem and convert the objects @xmath45 , @xmath40 , and the action function @xmath36 , to ciphertext @xmath54 , @xmath55 , and an action function on ciphertext @xmath56 , then no orbit restrictions can be determined on the encrypted objects .",
    "unfortunately , there is a slight issue with this example , because encryption and functions on ciphertext are allowed to have different outputs for the same input ; in fact , the security of such cryptosystems require it .",
    "if this is the case , we ca nt compare ciphertexts for equality or use efficient lookup schemes on ciphertext .",
    "the basic idea of the example still works , however , and we can get around the issues by not explicitly using a homomorphic encryption system .    instead",
    ", imagine that you are given two ordered arrays of @xmath20 indistinguishable objects with unique identities and a hash function that maps each possible ordered array of @xmath20 objects uniquely to a positive integer .",
    "the problem is to compute the permutation that moves the objects of the first array into the same order as the second , if such a permutation exists , using only the hash function on permutations of the first and second arrays .",
    "the symmetric group acts by permuting arrays of indistinguishable objects , and we may store the integer given by the hash function for each permuted array to determine a collision . in this case , this is all we can do , since each permutation of the objects is indistinguishable and the associated integers say nothing about the particular permutation represented .",
    "our results show that we may solve this problem deterministically in time and space @xmath57 .",
    "although the above problem is only theoretical , it is likely a realization exists with the correct notion of indistinguishability and hash function that respects this notion .",
    "solving such group action discrete logarithm problems by means of collision reduces to efficient construction of the sets @xmath11 and @xmath12 . in the remainder of this paper , we shift our focus to the construction of these sets , rather than the mechanics of the algorithm itself .",
    "but before we do this , we give a hardness result that shows the group action discrete logarithm problem is as hard as the traditional discrete logarithm .",
    "in this section , we reduce the discrete logarithm problem to the group action discrete logarithm problem .    let @xmath58 be the cyclic group of order @xmath20 , with generator @xmath59 .",
    "the traditional discrete logarithm problem is the following . given @xmath60 ,",
    "find an @xmath61 for which @xmath62 .",
    "( note that @xmath58 is written multiplicatively . )",
    "this is not a group action discrete logarithm problem , because the @xmath30-th power map may not be 1 - 1 : consider @xmath63 .",
    "every group , however , is acted on by its group of automorphisms . in this way , we get an action of the group @xmath64 on @xmath58 .",
    "we now show how to reduce the traditional discrete logarithm problem to computation of a group action discrete logarithm .",
    "a randomized reduction is easiest to describe .",
    "given @xmath65 as above , choose a random integer @xmath45 with @xmath66 , and set @xmath67 .",
    "with probability @xmath68 , the ( unknown ) discrete log @xmath30 of @xmath59 will satisfy @xmath69 , thereby making the randomly shifted element @xmath70 a generator of @xmath58 . a solution to the group action discrete log problem @xmath71 then gives us @xmath30 , as @xmath72 .",
    "this reduction can be made deterministic .",
    "recall that jacobsthal s function @xmath73 denotes the maximum distance between consecutive units of @xmath74 .",
    "( distance is reckoned along the cycle , so that , for example , @xmath75 are 2 apart mod 7 , giving @xmath76 . )",
    "@xcite showed that @xmath77 , although sharper bounds have been conjectured , for example by @xcite .",
    "( no explicit bound that is polynomial in @xmath78 seems to be known , but @xcite come close : their estimate is @xmath79 . ) therefore , we can replace the random guess @xmath45 by a search through @xmath80  .",
    "for one of these choices , @xmath70 will generate @xmath58 .",
    "we use , at most , @xmath81 values of @xmath45 .    for many applications in cryptography",
    ", @xmath20 is chosen to be prime , and this case is of interest to us as well . here",
    ", there are only two `` types '' for the value @xmath30 . as an element of @xmath74 ,",
    "@xmath30 is either 0 , which we can test by comparing @xmath18 to 1 , or relatively prime to @xmath20 .",
    "so , the traditional discrete log problem in @xmath58 with @xmath20 prime reduces immediately to a group action discrete log problem .    using these reductions , we can draw conclusions about the hardness of the group action discrete log problem .",
    "@xcite showed that any generic probabilistic algorithm to solve the discrete log problem in @xmath58 must do @xmath82 operations , where @xmath83 is the largest prime factor of @xmath20 .",
    "informally , by a generic algorithm , we mean one that interacts with the group only by doing group operations and equality tests .",
    "( see shoup s paper for a precise definition . )",
    "earlier , @xcite had proved a similar result for a large class of deterministic algorithms .",
    "now , let us imagine that we have a generic algorithm @xmath84 that can solve the discrete log problem @xmath62 in @xmath58 , but only when @xmath59 and @xmath18 are generators .",
    "( if the condition is nt fulfilled , the algorithm fails . ) in effect , @xmath84 solves a group action discrete logarithm problem for the case @xmath85 and @xmath86 , under a certain promise about the inputs .",
    "using our reductions , we can extend @xmath84 to get a generic algorithm @xmath87 that solves traditional discrete log problems , with polynomial ( in @xmath78 ) overhead .",
    "the running time of @xmath84 must therefore obey shoup s lower bound : it must use @xmath82 group operations .    since generic algorithms can be randomized , a consequence of this is that the black - box algorithm based off of section 4 is best possible , since it applies to @xmath88 and @xmath89 .",
    "in this section our approach is general enough to work over any group @xmath0 where random elements can be generated efficiently .",
    "for the special case when @xmath5 , this is possible through random shuffling procedures . for arbitrary permutation groups ,",
    "this is also possible with an additive poly(@xmath20 ) overhead , where @xmath20 is the degree of the permutation group @xcite .",
    "the algorithmic approach to random sampling of an arbitrary ( permutation ) group is discussed more thoroughly in @xcite and @xcite .    in this",
    "setting , an obvious idea is to simply pick @xmath16 random elements of @xmath0 for the set @xmath11 and @xmath16 random elements of @xmath0 for the set @xmath12 .",
    "then , the probability a particular @xmath3 is present in @xmath90 will depend on the value of @xmath16 .",
    "for ease of notation , let @xmath91 .",
    "we have :    suppose we pick @xmath16 random elements of @xmath0 * without * replacement for the set @xmath11 and likewise for @xmath12 . then the probability a particular @xmath3 is present in @xmath90 satisfies : @xmath92 } } \\ge 1 - e^{-k^2/m}.\\ ] ]    observe that @xmath93 precisely when each @xmath10 avoids the set @xmath94 .",
    "the probability of this event is @xmath95 which is at most @xmath96 .",
    "rewriting the exponent and utilizing that @xmath97 gives us @xmath98 } }   \\le \\left ( \\left(1-\\frac{k}{m}\\right)^{m } \\right)^{k / m } \\le e^{-k^2/m},\\ ] ] from which the claim follows .    by setting @xmath99",
    ", we can make the probability that @xmath19 is present in @xmath90 constant .",
    "our analysis , however , assumed sampling without replacement .",
    "if we simply sample with replacement and redraw when a duplicate is found , it is not hard to see that as long as we are sampling @xmath100 elements , the number of extra draws is @xmath101 in expectation .    note that with this approach , there will always be a non - zero probability that some group elements are missing in @xmath90 , which will lead to one - sided error in our algorithm .",
    "namely , if no @xmath19 is found where @xmath4 , the randomized procedure only gives probabilistic evidence that no @xmath19 exists . furthermore , checking for missing elements of @xmath0 in @xmath90 takes @xmath102 time .",
    "while this would only need to be done once and work for any set @xmath0 acts on , it is prohibitively expensive .",
    "this leads us to ask for a deterministic algorithm to construct the sets @xmath11 and @xmath12 .",
    "this question inherently asks about structure of the group @xmath0 that can be exploited , similarly to the original shanks method for the traditional discrete logarithm .",
    "therefore , we will focus on the special case when @xmath5 .",
    "our deterministic algorithm will rely on some elementary group theory . for this , we state a few necessary results and definitions .",
    "all groups in this paper will be finite .",
    "if @xmath103 is a subgroup of @xmath0 , we write @xmath104 , and @xmath105 if the containment is proper .",
    "we do not assume that @xmath103 is normal in @xmath0 .    when @xmath104 , its left cosets are the @xmath106 sets @xmath107 with @xmath3 .",
    "right cosets are defined similarly .",
    "note that the set of left ( or right ) cosets of @xmath103 in @xmath0 forms a partition of @xmath0 . thus if we have a subgroup @xmath103 of @xmath0 , we can take @xmath108 and @xmath11 to be a set of elements of @xmath0 such that each left coset of @xmath103 in @xmath0 is represented in @xmath11",
    ". then every element of @xmath0 will be present in @xmath90 .    in group theory , a minimal perfect set @xmath11 of this kind",
    "is called a transversal .",
    "a left ( right ) transversal @xmath109 of a subgroup @xmath103 of @xmath0 is a set of elements of @xmath0 such that each left ( right ) coset of @xmath103 in @xmath0 has exactly one representative in @xmath109 .",
    "thus , @xmath109 is a minimal set of coset representatives of @xmath103 in @xmath0 .    to make this definition clear",
    ", we give the following :    let @xmath110 and let @xmath103 be the unique subgroup of @xmath0 with @xmath20 elements .",
    "then @xmath111 . if @xmath112 , @xmath113",
    "one transversal of @xmath103 in @xmath0 is @xmath114 .",
    "for this example , @xmath103 and @xmath109 are exactly the sets of giant steps and baby steps that the shanks algorithm would use .",
    "however , transversals are not unique ; for example , we could have taken @xmath109 to be any complete set of representatives modulo @xmath20 .",
    "combinatorially , a subgroup @xmath12 and its left transversal @xmath11 form a perfect splitting set for @xmath0 , in the sense that every @xmath3 is uniquely of the form @xmath8 , for @xmath9 and @xmath10 .",
    "perfect splitting sets need not be subgroups , as we could always replace @xmath11 by @xmath115 and @xmath12 by @xmath116 , choosing @xmath117 at will .    ideally , these splitting sets have cardinality exactly @xmath118 . however , @xmath119 is never a square for @xmath120 , so such perfect splitting sets can not exist for @xmath5 .",
    "therefore , we will either have to tolerate duplicated products ( as we did in the last section ) , or look for set sizes close to , but not exactly matching , @xmath15 .",
    "we now give some concepts that provide a `` data structure '' for working with permutation groups :    let @xmath0 act on @xmath121 .",
    "a base @xmath12 for @xmath0 is an ordered subset of @xmath121 ( i.e. a list ) with the following property : the only element of @xmath0 that stabilizes everything in @xmath12 is the identity .    for our purposes , @xmath5 , which stabilizes no element of @xmath122 .",
    "so , we will use @xmath123 $ ] ; that is , @xmath124 with the natural ordering of the integers . we could choose to not include any single integer from @xmath12 , since the action of a permutation on the missing integer can be inferred via its action on the other elements",
    "; however , it will be easier to describe the transversal algorithm with a more complete base , and no loss of efficiency will be incurred .",
    "a base provides a convenient form to represent elements of @xmath0 :    if @xmath3 and @xmath125 $ ] is a base for @xmath0 , then @xmath126 $ ] is called the base image of @xmath19 ( relative to @xmath12 ) .",
    "recall that @xmath127 means the result of applying the group element @xmath19 to the object @xmath128 .    with the base",
    "@xmath123 $ ] , the base image gives the typical vector notation of a permutation .",
    "the base image @xmath129 uniquely determines the element @xmath3 .",
    "in recent work , @xcite described a general framework to create deterministic collision algorithms for isomorphism problems . in his dissertation , rosenbaum does not initially give a way to apply this to permutation search , instead using a simpler problem to demonstrate the technique @xcite .",
    "we are not aware that the application of bidirectional collision detection to permutation search is known , so we describe and analyze what we believe is the most natural application in this section .",
    "let @xmath130 and @xmath84 be two objects that we wish to test for isomorphism . in bidirectional collision detection , potential isomorphisms are represented by root - to - leaf paths in a tree .",
    "the individual labelling of nodes at a particular level is not known , and is in general different between @xmath130 and @xmath84 .",
    "we choose one set of paths that reach all nodes halfway down the tree , extending to leaves arbitrarily , and apply these to @xmath130 .",
    "we choose one path to an arbitrary node halfway down the tree , extend it in all possible ways , and then apply each of these to @xmath84 .",
    "the shared path represents the isomorphism between @xmath130 and @xmath84 .",
    "[ searchtree ]    = [ circle , draw , minimum size=15pt , inner sep=0pt ] = [ draw ] = [ font= ]    ( n1 ) at ( -5.5 , 0 ) ; ( n2 ) at ( -4.5 , 0 ) ; ( n3 ) at ( -3.5 , 0 ) ; ( n4 ) at ( -2.5 , 0 ) ; ( n5 ) at ( -1.5 , 0 ) ; ( n6 ) at ( -0.5 , 0 ) ; ( n7 ) at ( 0.5 , 0 ) ; ( n8 ) at ( 1.5 , 0 ) ; ( n9 ) at ( 2.5 , 0 ) ; ( n10 ) at ( 3.5 , 0 ) ; ( n11 ) at ( 4.5 , 0 ) ; ( n12 ) at ( 5.5 , 0 ) ;    ( n13 ) at ( -4.5 , 1.5 ) ; ( n14 ) at ( -1.5 , 1.5 ) ; ( n15 ) at ( 1.5 , 1.5 ) ; ( n16 ) at ( 4.5 , 1.5 ) ;    ( n17 ) at ( 0 , 3 ) ;    ( n13 )  ( n17 ) ; ( n15 )  ( n17 ) ; ( n16 )  ( n17 ) ;    ( n1 )  ( n13 ) ; ( n9 )  ( n15 ) ; ( n10 )  ( n16 ) ;    ( n5 )  ( n14 ) ; ( n14 )  ( n17 ) ;    ( n4 ) ",
    "( n14 ) ; ( n6 )  ( n14 ) ;    ( n2 )  ( n13 ) ; ( n3 )  ( n13 ) ; ( n7 )  ( n15 ) ; ( n8 )  ( n15 ) ; ( n11 ) ",
    "( n16 ) ; ( n12 )  ( n16 ) ;    if we denote the set of transformations applied to @xmath130 as @xmath131 and to @xmath84 as @xmath132 , then , borrowing the group action notation , this framework finds paths @xmath133 and @xmath134 so that @xmath135 whenever there exists some @xmath19 such that @xmath136 thus , this approach writes @xmath137 , for some @xmath133 and @xmath134 .",
    "this means the sets @xmath131 and @xmath138 form a factorization of the search space in the same way as our sets @xmath11 and @xmath12 .",
    "note that by @xmath138 , we mean the set of all inverses of the elements in @xmath132 .    to split the search space for permutations ,",
    "the first level of our search tree will correspond to where we send the integer @xmath139 , the second the integer @xmath140 , and so on .",
    "we choose a @xmath16 with @xmath141 as our halfway point .",
    "the set @xmath131 will consist of @xmath142 ( @xmath20 pick @xmath16 ) permutations .",
    "each permutation sends @xmath143 to all possible @xmath16-tuples in @xmath144 .",
    "we can choose arbitrarily where to send @xmath145 .",
    "to make @xmath132 , we choose an image tuple for the first @xmath16 elements arbitrarily ( not moving them at all will do ) and then extend with all @xmath146 possible suffixes .    since @xmath147 and @xmath148 , the counting functions for these two sets are not interchangable .",
    "however , we can try to balance the values of @xmath142 and @xmath149 . since @xmath150 , finding a @xmath16 such that @xmath151 will , at least approximately , minimize @xmath152 , the cost of the collision algorithm .",
    "we will show that the `` right '' value of @xmath16 is roughly , but not exactly , @xmath153 .",
    "surprisingly , the performance of the algorithm is very sensitive to @xmath16 .    to proceed ,",
    "we must obtain asymptotics for the solution @xmath30 in @xmath154 .",
    "we will use @xmath155 as an abbreviation for @xmath156 and @xmath157 as the natural logarithm .",
    "[ xval ] for integer @xmath158 , let @xmath30 be the positive real solution to @xmath154 . then @xmath159    since log factorial is convex @xcite , and the central binomial coefficient is a positive integer , we have @xmath160 therefore , @xmath161 . from the enveloping property of stirling s series @xcite , we deduce that @xmath162 holds for @xmath163 .",
    "this implies @xmath164 so @xmath165 since @xmath166 as well , the claimed result follows .",
    "we can get more precise results than the above by taking an accurate form of stirling s formula , such as @xmath167 , and then `` bootstrapping '' @xcite .",
    "for example , @xmath168 this is already pretty good : if @xmath169 , @xmath170 , whereas @xmath171 .",
    "we now return to determining the best value of @xmath16 for bidirectional collision detection applied to permutation search , and analyze the performance of the technique with this choice .",
    "bidirectional collision detection applied to permutation search finds @xmath172 such that @xmath173 and @xmath174 @xmath175 @xmath176 .",
    "let @xmath30 be the positive real solution to @xmath154 .",
    "since @xmath155 increases for @xmath177 , there is an integer @xmath178 such that @xmath179 choose @xmath16 so that @xmath180 is the closest integer ( either @xmath178 or @xmath181 ) to @xmath30 .",
    "this will cause one of our sets to be larger than its `` ideal '' value @xmath15 , and we must estimate this disparity .",
    "let @xmath182 recall that @xmath183 as @xmath184 , in the sense that the limiting ratio is 1 .",
    "using this , and our asymptotic expression for @xmath30 from proposition [ xval ] , we have @xmath185 similarly , @xmath186 the bound on @xmath187 gives @xmath188    probably , the factor @xmath189 is best possible .",
    "examination of numerical data shows that @xmath190 varies irregularly within the interval @xmath191 , and we see no reason why this behavior should not continue . in particular",
    ", there is likely to be an infinite sequence of @xmath20 s on which @xmath190 s limiting value is @xmath192 .",
    "it is also interesting to compare our procedure to one that splits the permutation vectors exactly in half , as rosenbaum initially recommends @xcite .",
    "this splitting amounts to taking @xmath193 , and as a consequence of stirling s formula , @xmath194 when @xmath20 is even .",
    "therefore , the `` overhead '' for exact splitting is exponential in @xmath20 .",
    "it is not hard to see this intuitively , by considering a decision tree for generating permutations .",
    "each of the `` large '' branching factors @xmath195 , @xmath196 , is roughly twice as large as its `` small '' counterpart @xmath197 . by choosing the best splitting fraction for each @xmath20",
    ", we have reduced this overhead to a small power of @xmath20 .",
    "finally , we note that this approach indeed employs a subgroup and a corresponding transversal of that subgroup .",
    "the set @xmath132 fixes the first @xmath16 elements and permutes the remaining @xmath180 elements amongst themselves in all possible ways .",
    "so @xmath132 is isomorphic to @xmath198 . because of this , @xmath199 .",
    "then , since @xmath200 and @xmath201 , @xmath131 is a perfect set of left coset representatives of @xmath132 in @xmath7 , i.e. , a left transversal of @xmath198 in @xmath7 .",
    "in the conference version of this paper , we improved upon bidirectional collision detection by finding a subgroup of @xmath7 of size @xmath202 , with the plus or minus sign depending on the parity of @xmath20 . with its corresponding transversal ,",
    "this leads to sets @xmath11 and @xmath12 of size @xmath203 . in this version ,",
    "we find a subgroup of size @xmath204 , leading to sets @xmath11 and @xmath12 of size @xmath205 , which is optimal up to constant factors .",
    "our conference paper relied on a particular subgroup that was very close to @xmath15 in size .",
    "our new approach will be more similar to the previous section .",
    "in particular , instead of choosing a specific subgroup for each @xmath20 , we will choose a subgroup from a set of options with sizes roughly evenly ( geometrically ) distributed from @xmath139 to @xmath119 . to improve upon the @xmath28 size gap given by bidirectional collision detection",
    ", we will need to pick our subgroup from a larger set of options .",
    "one very simple idea is to take the symmetric group @xmath206 for @xmath207 and add an @xmath208-cycle on the remaining @xmath180 integers into the generating set , where @xmath208 may range from @xmath209 to @xmath180 .",
    "when @xmath210 or @xmath139 , we take the subgroup to be @xmath206 ; further , when @xmath211 or @xmath139 , we take the subgroup to be the powers of the @xmath208-cycle . without loss of generality , we assume either @xmath16 or @xmath208 is greater than @xmath209",
    ".    we will show that for large enough @xmath20 , there exists a choice of @xmath16 and @xmath208 that produces a subgroup of this structure with size very close to @xmath15 .",
    "[ subgroup ] denote by @xmath212 the @xmath208-cycle @xmath213 and by @xmath214 the subgroup of @xmath7 generated by @xmath206 and @xmath212 . here , we require @xmath215 and @xmath216 .",
    "wlog , we assume @xmath217",
    ". then @xmath218 when @xmath210 or @xmath139 and @xmath219 when @xmath220 .",
    "explicitly , the subgroup @xmath214 is generated by @xmath221    recall that @xmath206 is generated by @xmath222 and @xmath223 .",
    "when @xmath211 or @xmath139 , @xmath214 is the powers of the @xmath208-cycle @xmath212 , so @xmath224 if @xmath211 and @xmath225 if @xmath226 .    when @xmath210 or @xmath139 and @xmath227 , @xmath206 is our entire subgroup , therefore @xmath228 , and ( even if @xmath211 or @xmath139 ) @xmath218",
    "now assume @xmath220 and @xmath229 .",
    "the @xmath208-cycle @xmath230 is disjoint from @xmath206 , so we may compose any element of @xmath206 with a power of @xmath212 to produce a new element of @xmath214 . thus , in this case , @xmath231 .",
    "since there are @xmath208 distinct powers of @xmath212 , when @xmath220 , @xmath219 .",
    "now suppose we are looking for a subgroup of @xmath7 of size @xmath178 .",
    "assume @xmath232 .",
    "if @xmath233 , we may use @xmath7 itself .",
    "let @xmath30 be the largest integer such that @xmath234 we will show the following .",
    "[ hdistribution ] we may find a subgroup @xmath214 of @xmath7 of size within a factor of @xmath235 of @xmath178 .    by lemma [ subgroup ] ,",
    "we may find a subgroup @xmath214 for any @xmath236 .",
    "thus , we may find a subgroup of size @xmath237 for @xmath238 and @xmath239 .",
    "consider the sizes of these subgroups and the ratios of sizes between consecutive subgroups :        the extremal ratios are @xmath140 and @xmath240 .",
    "let @xmath241 then @xmath178 will reside within a factor of @xmath190 from the size of one of the above subgroups ; that is , we may find a subgroup @xmath214 with @xmath242    using theorem [ hdistribution ] , we may prove the following corollary for our specific choice of @xmath243 .    [",
    "optimal ] we may find a subgroup @xmath214 of @xmath7 of size @xmath244 for @xmath245 ; that is , we may find a subgroup @xmath214 of size @xmath204 in @xmath7 .    for @xmath246 ,",
    "the derivative with respect to @xmath30 of @xmath240 is @xmath247 , so this function is increasing on @xmath248 . solving for @xmath30 in @xmath249 yields @xmath250 .",
    "therefore , whenever @xmath251 , @xmath252 now let @xmath253 be the positive real solution to @xmath254 . as proven in proposition [ xval ] , the solution can be expressed asymptotically by @xmath255 if we let @xmath256 , as in theorem [ hdistribution ] , then for all sufficiently large @xmath20 , @xmath30 will be less than or equal to @xmath257 .",
    "examination of numerical data shows that for @xmath245 , @xmath258 .",
    "the above corollary says that there exists a subgroup @xmath214 within a constant factor of @xmath15 for sufficiently large @xmath20 . to find it",
    ", we may simply try all @xmath16 and @xmath208 with @xmath259 , @xmath260 , and choose the values that make @xmath261 closest to @xmath15 .",
    "charging @xmath101 time to multiply integers , this can be done in @xmath262 time , which will be much less than the cost of enumerating @xmath214 or its transversal .",
    "once these values are determined , we may run a closure algorithm using the generators from lemma [ subgroup ] to enumerate the elements of @xmath214 in @xmath263 time ( the @xmath264 factor is for representing the permutations themselves ) .",
    "there is an additional factor of @xmath140 or @xmath265 overhead with this approach because each permutation needs to be composed with the generating set before it can be determined all elements have been enumerated .",
    "this overhead can be avoided by instead using the structure of @xmath214 to construct the elements explicitly .",
    "we briefly give this algorithm .    1 .",
    "enumerate all elements of @xmath206 . if @xmath211 , enumerate the identity .",
    "2 .   for each permutation from 1 , output its composition with all powers of @xmath230 . if @xmath210 , simply output the permutation from 1 .    before analyzing the algorithm",
    ", we make a few statements regarding our model of computation . for the purposes of this paper",
    ", we will charge @xmath101 space for each integer and @xmath101 time for accessing elements of an array",
    ". we will not charge space for the output of an algorithm . in this model",
    ", we will represent each permutation using @xmath264 space and may compose two permutations in @xmath264 time .",
    "algorithm [ henumeration ] correctly enumerates the elements of @xmath214 in time @xmath266 and space @xmath264",
    ".    for correctness , lemma [ subgroup ] shows the set returned is @xmath214 .    to argue resource bounds , note that we may iterate through every permutation of @xmath206 in @xmath267 time and @xmath264 space @xcite . for every permutation",
    "generated , we may then iterate through the powers of @xmath212 in total time @xmath268 and again space @xmath264 .",
    "composing the pairs of permutations from 1 and 2 again takes total time @xmath268 and no additional space , thus in total the algorithm takes time @xmath269 and space @xmath264 .",
    "we now consider finding a transversal of @xmath214 in @xmath7 .",
    "although finding transversals can be complicated and require backtrack search through the parent group @xmath0 @xcite , we can take advantage of having @xmath270 .",
    "we first give the following definition , as in @xcite .",
    "let @xmath271 $ ] be a base .",
    "define a partial ordering @xmath272 on elements of @xmath121 by taking @xmath273 for all @xmath274 , and @xmath275 , for every @xmath276 not present in @xmath12 .",
    "we extend this to base images by saying that for @xmath277 , @xmath278 if @xmath19 precedes @xmath279 in the lexicographic ordering on the base vectors .    for our purposes",
    ", this is the natural ordering of the integers in @xmath12 .",
    "furthermore , this defines lexicographical ordering of permutations for base images @xmath129 and @xmath280 , @xmath277 .",
    "our transversal construction will exploit the following lemma .",
    "[ cosetordering ] let @xmath281 and let @xmath282 $ ] be a base of @xmath0 .",
    "then @xmath3 is the @xmath272-least element of its coset @xmath107 if and only if @xmath283 is the @xmath272-least element of its orbit in @xmath284 for @xmath285 .    in this lemma",
    ", @xmath284 denotes the subgroup of @xmath103 consisting of the elements that fix each of the elements listed as subscripts .",
    "( when @xmath286 , this subgroup is just @xmath103 . )",
    "although the result has been known since the work of charles sims , we present a proof in the interest of being self - contained .",
    "this lemma can be found ( without proof ) in @xcite .",
    "suppose that @xmath19 satisfies the property given in lemma [ cosetordering ] .",
    "we must show @xmath19 is @xmath272-least in @xmath107 .",
    "write : @xmath287.\\ ] ] now suppose there exists some @xmath288 such that @xmath289 .",
    "write : @xmath290.\\ ] ] since @xmath288 , we can write @xmath291 for some @xmath292 . therefore we can think of @xmath279 as applying some element @xmath16 to @xmath19 .",
    "now , since @xmath289 , there must be a first index @xmath293 such that @xmath294 ; so @xmath295 for all @xmath296",
    ". then @xmath16 must stabilize @xmath297 .",
    "since @xmath294 , @xmath16 must map @xmath298 to @xmath299 , therefore @xmath299 and @xmath298 are in the same orbit in @xmath300 .",
    "but by assumption , @xmath298 is the @xmath272-least such element in its orbit in @xmath300 .",
    "therefore the element @xmath279 can not exist and so @xmath19 is minimal in @xmath107 .    in the other direction ,",
    "suppose @xmath19 does not satisfy the property in lemma [ cosetordering ] .",
    "let @xmath293 be the first index such that @xmath298 is not @xmath272-least in its orbit in @xmath300",
    ". then there must be some @xmath292 that stabilizes @xmath297 and maps @xmath298 to some @xmath301 such that @xmath302 .",
    ".    we can apply lemma [ cosetordering ] to find base images that satisfy the property required to be @xmath272-least elements in their respective cosets .",
    "however , these base images might not necessarily correspond to elements of @xmath0 if @xmath0 is an arbitrary permutation group . here",
    "we take advantage of the fact @xmath5 . every base image that satisfies lemma [ cosetordering ] corresponds to some permutation on @xmath144 , which is necessarily an element of @xmath7 .",
    "thus , we may compute a transversal of @xmath214 efficiently if know the orbit structure after stabilizing in @xmath214 .",
    "[ hstabilizers ] the subgroup @xmath214 is initially composed of at most three categories of orbits , which further split after stabilizing the smallest integer in the following way :    a.   integers @xmath304 are in an orbit such that after repeatedly stabilizing the smallest integer , the remaining integers continue to stay in a single orbit .",
    "b.   integers @xmath305 are in an orbit such that after stabilizing @xmath306 , integers @xmath307 are all in their own orbits . c.   integers @xmath308 are in their own orbits .",
    "if @xmath211 , ( a ) disappears . if @xmath210 , ( b ) disappears . if @xmath309 , ( c ) disappears",
    ".    at ( -2 , 1.75 ) orbits in ( a ) ; at ( -2 , -.7 ) orbits in ( b ) ; at ( -2 , -3.15 ) orbits in ( c ) ;    ( a1 ) at ( 0 , 1.75 ) @xmath139 + @xmath140 + @xmath310 + @xmath16 ; ( a2 ) at ( 3 , 1.75 ) @xmath140 + @xmath265 + @xmath310 + @xmath16 ; ( a1 ) edge[- > ] node[above , black , align = center ] stabilize + @xmath139 ( a2 ) ; ( a3 ) at ( 6 , 1.75 ) @xmath311 ; ( a2 ) edge[- > ] node[above , black , align = center ] stabilize + @xmath140 ( a3 ) ; ( a4 ) at ( 9 , 1.75 ) @xmath16 ; ( a3 ) edge[- > ] node[above , black , align = center ] stabilize + @xmath312 ( a4 ) ;    ( b1 ) at ( 0 , -.7 ) @xmath306 + @xmath313 + @xmath310 + @xmath314 ; ( b2a ) at ( 3 , .2 ) @xmath313 ; ( b2a ) at ( 3 , -.4 ) @xmath315 ; ( b2c ) at ( 3 , -.9 ) @xmath310 ; ( b2a ) at ( 3 , -1.6 ) @xmath314 ; ( b1 ) edge[- > ] node[above , black , align = center ] stabilize + @xmath306 ( 2.5 , -.7 ) ;    ( c1 ) at ( 0 , -2.25 ) @xmath316 ; ( c2 ) at ( 0 , -2.85 ) @xmath317 ; ( c3 ) at ( 0 , -3.35 ) @xmath310 ; ( c4 ) at ( 0 , -4.05 ) @xmath20 ;    the subgroup @xmath214 is generated by @xmath206 and @xmath213 .",
    "therefore , the integers @xmath304 are in an orbit , @xmath318 are in an orbit , and @xmath308 are in their own orbits . if @xmath211 , there are no integers in this first category .",
    "if @xmath210 , there are no integers in this second category . if @xmath309 , there are no integers in this third category",
    "now consider the first orbit in category ( a ) .",
    "when we stabilize any integer , we are left with a subgroup isomorphic to @xmath319 .",
    "all other integers remain in the same orbit , and the structure will repeat itself if we continue to stabilize integers .",
    "now consider orbit ( b ) .",
    "this orbit comes from powers of @xmath230 .",
    "every power of @xmath212 moves every integer in @xmath320 .",
    "therefore , when we stabilize @xmath306 , no powers of @xmath212 will be in this stabilizer .",
    "thus , after stabilizing @xmath306 , integers @xmath307 will be in their own orbits .",
    "once an integer is in its own orbit , it will remain in its own orbit after further stabilizations .",
    "using lemma [ cosetordering ] and lemma [ hstabilizers ] , the algorithm to generate a transversal of @xmath214 in @xmath7 is relatively straightforward .",
    "we wish to backtrack through the orbits in all possible ways such that each base image generated through the procedure has the property of being @xmath272-least for its respective coset . for our subgroup",
    ", this means the integers @xmath321 must appear in this order and @xmath306 must appear before any of @xmath322 . any backtracking procedure that enumerates all base images with this property suffices to compute a transversal of @xmath214 in @xmath7 .",
    "we give one such backtracking procedure below .",
    "let @xmath323 $ ] .",
    "if @xmath324 , @xmath325 $ ] .",
    "2 .   enumerate all permutations on @xmath320 that start with integer @xmath306 .",
    "if @xmath210 , enumerate an `` empty '' permutation , @xmath326 $ ] .",
    "3 .   for each permutation from 2 , enumerate all permutations on @xmath327 .",
    "if @xmath328 , enumerate an `` empty '' permutation , @xmath326 $ ] .",
    "4 .   for each pair from steps 2 and 3 , combine them in all possible ways with each other and @xmath11 such that the integers from steps 1 , 2 , and 3 remain in the same relative order . for each combination ,",
    "output the resulting permutation .",
    "[ htransversal - lemma ] algorithm [ htransversal ] correctly enumerates a transversal of @xmath214 in @xmath7 in time @xmath329 and space @xmath264 .",
    "every permutation generated in the above procedure respects that integers @xmath321 appear in this same order and that @xmath306 appears before any of @xmath322 .",
    "furthermore , every permutation that respects this order is present in the returned set . to double check , we may count the number of permutations generated from the above procedure .",
    "steps 2 and 3 enumerate @xmath330 and @xmath331 permutations , respectively . for each pair from these steps ,",
    "we merge lists in all possible ways while still respecting relative order within each list .",
    "let @xmath332 denote the number of @xmath253-multisets taken from an @xmath30-set . then , using a stars and bars argument , the number of ways to merge lists while still respecting relative order is @xmath333 putting it together , we have @xmath334 which is exactly what we expect .    to prove resource bounds , observe that for steps 2 and 3 , we may use a procedure to iterate through permutations for a total time cost of @xmath335 and space cost of @xmath264 . to perform step 4",
    ", we may use a backtracking procedure to output all possible combinations in space @xmath264 and with an additional factor of @xmath20 time cost on the number of elements produced , for a total time cost of @xmath329 and total space cost of @xmath264 .",
    "finally , we note that the property exploited in computing the transversal was that every base image found directly via stabilizers and orbits is necessarily an element of the parent group @xmath0 if @xmath5 .",
    "this observation can be combined with black - box orbit , stabilizer , and base changing methods as discussed in @xcite to compute a transversal of an arbitrary permutation group @xmath336 efficiently .",
    "we will not discuss the details here , nor give exact asymptotic guarantees . for more information , consult the transversal algorithms discussed in holt s book .",
    "we have the following theorem :    [ ab ] we can compute sets @xmath11 and @xmath12 such that @xmath173 with @xmath337 . the computation can be done deterministically in time @xmath57 and space @xmath264 .",
    "corollary [ optimal ] states that for @xmath245 , we may find a subgroup @xmath214 within a factor of @xmath338 from @xmath15 .",
    "using algorithm [ henumeration ] , it can be enumerated deterministically in time @xmath263 and space @xmath264 . using algorithm [ htransversal ] ,",
    "its transversal can be found and enumerated deterministically in time @xmath339 and again space @xmath264 .",
    "therefore , we can find sets of permutations @xmath11 and @xmath12 deterministically in time @xmath57 and space @xmath264 such that every permutation of @xmath7 can be represented as a product @xmath8 , @xmath9 and @xmath10 .",
    "this lemma implies that the group action discrete logarithm problem in the symmetric group can be solved deterministically in about @xmath57 time and @xmath57 space , where the specifics depend on the ability to hash or compare elements of @xmath1 generated for the collision procedure .",
    "we note that while randomization may be used in the analysis of such hashing functions , the algorithm itself will always produce correct results .",
    "furthermore , regarding the space cost of solving the group action discrete logarithm problem , we require that one of the two sets @xmath340 be stored in memory . by storing the smaller set",
    ", we may take advantage of a time - space tradeoff .",
    "since the bounds in corollary [ optimal ] hold for any choice of @xmath341 , we may choose @xmath214 within a @xmath338 factor of any size @xmath341 .",
    "then we may solve the group action discrete logarithm problem in the symmetric group deterministically in space @xmath342 and time @xmath343 for any choice of @xmath341 .",
    "the computation of sets @xmath11 and @xmath12 , in comparison , will also take time @xmath57 by the randomized approach and time @xmath344 by bidirectional collision detection . in the former case , it is informative to know for what error bounds it becomes more efficient to use our deterministic method .",
    "our analysis of the randomized approach , applied to @xmath7 , shows that by picking @xmath16 random permutations for @xmath11 and @xmath12 , @xmath345 } } \\le e^{-k^2/n!}$ ] . as @xmath119 grows large , this inequality becomes increasingly tighter . taking it as a baseline for the probability of missing a particular permutation in @xmath90 ,",
    "if we set @xmath346 , this probability is @xmath98 } } \\approx e^{-2 } \\approx .1353.\\ ] ] thus , it is more efficient to use our deterministic method if we want more than about 86.47% accuracy ; that is , when the algorithm determines no such @xmath19 exists , this response is correct about 86.47% of the time .    on another practical note ,",
    "examination of numerical data shows the best @xmath214 for @xmath347 to @xmath348 is , at worst , off from @xmath15 by a factor of @xmath338 when @xmath349 ( as it must ) and approximately @xmath350 when @xmath351 . on average , from @xmath347 to @xmath348 , the best choice of @xmath214 has size only off by a factor of approximately @xmath352 of @xmath15 . combining these facts with the simplicity of algorithm [ henumeration ] and algorithm [ htransversal ]",
    ", we consider our approach a viable practical alternative to the randomized one .",
    "this research was supported in part by nsf : ccf-1420750 .",
    "we d like to thank derek holt , gene cooperman , and lszl babai for correspondence on computing transversals in permutation groups .",
    "we additionally thank the stackexchange community for their input on subgroup choices , general help with computational group theory , and innovative latex solutions .",
    "finally , we thank the anonymous reviewers for their constructive feedback during the review process .                c. j. etherington , m. w. anderson , e. bach , j. t. butler , and p. stnic . a parallel approach in computing correlation immunity up to six variables . _",
    "international journal of foundations of computer science _ , v. 27 , 2016 , 511 - 528 .",
    "v. i. nechaev .",
    "complexity of a determinate algorithm for the discrete logarithm . _ math .",
    "notes _ , v. 55 , 1994 , pp .",
    "165 - 172 .",
    "s. orange , g. renault , k. yokoyama . computation schemes for splitting fields of polynomials . in _ proc .",
    "2009 int . symp . on symbolic and algebraic computation _ , 2009 ,",
    "279 - 286 ."
  ],
  "abstract_text": [
    "<S> we study discrete logarithms in the setting of group actions . </S>",
    "<S> suppose that @xmath0 is a group that acts on a set @xmath1 . </S>",
    "<S> when @xmath2 , a solution @xmath3 to @xmath4 can be thought of as a kind of logarithm . in this paper , we study the case where @xmath5 , and develop analogs to the shanks baby - step / giant - step procedure for ordinary discrete logarithms . specifically </S>",
    "<S> , we compute two sets @xmath6 such that every permutation of @xmath7 can be written as a product @xmath8 of elements @xmath9 and @xmath10 . our deterministic procedure is optimal up to constant factors , in the sense that @xmath11 and @xmath12 can be computed in optimal asymptotic complexity , and @xmath13 and @xmath14 are a small constant from @xmath15 in size . </S>",
    "<S> we also analyze randomized `` collision '' algorithms for the same problem .    </S>",
    "<S> symmetric group , group actions , discrete logarithm , collision algorithm , computational group theory . </S>"
  ]
}