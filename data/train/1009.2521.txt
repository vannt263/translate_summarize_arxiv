{
  "article_text": [
    "in this paper , we study the problem of reconstructing a simple polygon @xmath0 from the visibility angles measured at the vertices of @xmath0 and from the cyclically ordered vertices of @xmath0 along its boundary .",
    "precisely , for an unknown simple polygon @xmath0 of @xmath1 vertices , suppose we are given ( 1 ) the vertices ordered counterclockwise ( ccw ) along the boundary of @xmath0 , and ( 2 ) for each vertex @xmath2 of @xmath0 , the angles between any two adjacent rays emanating from @xmath2 to the vertices of @xmath0 that are visible to @xmath2 such that these angles are in the ccw order as seen around @xmath2 , beginning at the ccw neighboring vertex of @xmath2 on the boundary of @xmath0 ( e.g. , see fig .",
    "[ fig : angles ] ) .",
    "a vertex @xmath6 of @xmath0 is _ visible _ to a vertex @xmath2 of @xmath0 if the line segment connecting @xmath6 and @xmath2 lies entirely in @xmath0 .",
    "the objective of the problem is to reconstruct the simple polygon @xmath0 ( up to similarity ) that fits all the given angles .",
    "we call this problem the _ polygon reconstruction problem from angles _ , or _ pra _ for short . figure  [ fig : example ] gives an example .",
    ": the angle sequence @xmath7 is given . ]",
    "the  problem has been studied by disser , mihalk , and widmayer @xcite , who showed that the solution polygon for the input is unique ( up to similarity ) and gave an @xmath3 time algorithm for reconstructing such a polygon . using the input",
    ", their algorithm first constructs the visibility graph @xmath8 of @xmath0 and subsequently reconstructs the polygon @xmath0 . as shown in @xcite , once @xmath8 is known , the polygon @xmath0 can be obtained efficiently ( e.g. , in @xmath4 time ) with the help of the angle data and the ccw ordered vertex sequence of @xmath0",
    ".    given a visibility graph @xmath8 , the problem of determining whether there is a polygon @xmath0 that has @xmath8 as its visibility graph is called the visibility graph _ recognition _ problem , and the problem of actually constructing such a polygon @xmath0 is called the visibility graph _ reconstruction _ problem .",
    "note that the general visibility graph recognition and reconstruction problems are long - standing open problems with only partial results known ( e.g. , see @xcite for a short survey ) .",
    "everett @xcite showed that the visibility graph reconstruction problem is in pspace , but no better upper bound on the complexity of either problem is known . in our problem setting , we have the angle data information and the ordered vertex list of @xmath0 ; thus @xmath0 can be constructed efficiently after knowing @xmath8 .",
    "hence , the major part of the algorithm in @xcite is dedicated to constructing the visibility graph @xmath8 of @xmath0 . as indicated in @xcite ,",
    "the key difficulty is that the vertices in this problem setting have no recognizable labels , e.g. , the angle measurement at a vertex @xmath2 gives angles between visible vertices to @xmath2 but does not identify these visible vertices globally .",
    "the authors in @xcite also showed that some natural greedy approaches do not seem to work .",
    "an @xmath3 time algorithm for constructing @xmath8 is given in @xcite .",
    "the algorithm , called the _ triangle witness algorithm _",
    ", is based on the following observation : suppose we wish to determine whether a vertex @xmath9 is visible to another vertex @xmath10 ; then @xmath9 is visible to @xmath10 if and only if there is a vertex @xmath11 on the portion of the boundary of @xmath0 from @xmath12 to @xmath13 in the ccw order such that @xmath11 is visible to both @xmath9 and @xmath10 and the triangle formed by the three vertices @xmath14 , and @xmath11 does not intersect the boundary of @xmath0 except at these three vertices ( such a vertex @xmath11 is called a _ triangle witness vertex _ ) .    in this paper , based on the triangle witness algorithm @xcite , by exploiting some new geometric properties , we give an improved algorithm with a running time of @xmath4 .",
    "the improvement is due to two key observations .",
    "first , in the triangle witness algorithm @xcite , to determine whether a vertex @xmath9 is visible to another vertex @xmath10 , the algorithm needs to determine whether there exists a triangle witness vertex along the boundary of @xmath0 from @xmath12 to @xmath13 in the ccw order ; to this end , the algorithm checks every vertex in that boundary portion of @xmath0 .",
    "we observe that it suffices to check only one particular vertex in that boundary portion .",
    "this removes an @xmath15 factor from the running time of the triangle witness algorithm @xcite .",
    "second , some basic operations in the triangle witness algorithm @xcite take @xmath16 time each ; by utilizing certain different data structures , our new algorithm can handle each of those basic operations in constant time .",
    "this removes another @xmath16 factor from the running time .",
    "note that since the input size is @xmath5 in the worst case ( e.g. , the total number of all visibility angles ) , our algorithm is worst - case optimal .",
    "as shown in @xcite , if only the angle measurements are given , i.e. , the ordered vertices along the boundary of @xmath0 are unknown , then the information is not sufficient for reconstructing @xmath0 . in other words , it may be possible to compute several simple polygons that are not similar but all fit the given measured angles ( see @xcite for an example ) .",
    "the problems of reconstructing geometric objects based on measurement data have been studied extensively ( e.g. , @xcite ) . as discussed above , the general visibility graph recognition and reconstruction problems are in pspace @xcite and no better complexity upper bound is known so far ( e.g. , see @xcite ) . yet , some results have been given for certain special polygons .",
    "for example , everett and corneil @xcite characterized the visibility graphs of spiral polygons and gave a linear time reconstruction algorithm .",
    "choi , shin , and chwa @xcite , and colley , lubiw , and spinrad @xcite characterized and recognized the visibility graphs of funnel - shaped polygons .    by adding extra information , some versions of the problems become more tractable .",
    "orourke and streinu @xcite considered the _ vertex - edge _ visibility graph that includes edge - to - edge visibility information .",
    "wismath @xcite introduced the _ stab graphs _ which are also an extended visibility structure and showed how parallel line segments can be efficiently reconstructed from it .",
    "snoeyink @xcite proved that a unique simple polygon ( up to similarity ) can be determined by the interior angles at its vertices and the cross - ratios of the diagonals of any given triangulation , where the cross - ratio of a diagonal is the product of the ratios of edge lengths for the two adjacent triangles .",
    "jackson and wismath @xcite studied the reconstruction of orthogonal polygons from horizontal and vertical visibility information and gave an @xmath17 time reconstruction algorithm .",
    "biedl , durocher , and snoeyink @xcite considered the problem of reconstructing the two - dimensional floor plan of a polygonal room using different types of scanned data , and proposed several problem models .",
    "sidlesky , barequet , and gotsman @xcite studied the problem of reconstructing a planar polygon from its intersections with a collection of arbitrarily - oriented  cutting \" lines .",
    "reconstructing a simple polygon from angle data was first considered by bil _",
    "et al_.  @xcite , who aimed to understand what kinds of sensorial capabilities are sufficient for a robot moving inside an unknown polygon to reconstruct the visibility graph of the polygon .",
    "it was shown in @xcite that if the robot is equipped with a compass to measure the angle between any two vertices that are currently visible to the robot and also has the ability to know where it came from when moving from vertex to vertex , then the visibility graph of the polygon can be uniquely reconstructed .",
    "reconstruction and exploration of environments by robots in other problem settings have also been studied ( e.g. , see @xcite ) .",
    "the rest of this paper is organized as follows . in section [ sec : pre ] , we give the problem definitions in detail and introduce some notations and basic observations .",
    "to be self - contained , in section [ sec : review ] , we briefly review the triangle witness algorithm given in @xcite .",
    "we then present our improved algorithm in section [ sec : improve ] .",
    "in this section , we define the  problem in detail and introduce the needed notations and terminology . for ease of discussion and comparison , some of our notations follow those in @xcite .",
    "let @xmath0 be a simple polygon of @xmath1 vertices @xmath18 in the ccw order along @xmath0 s boundary . denote by @xmath19 the visibility graph of @xmath0 , where @xmath20 consists of all vertices of @xmath0 and for any two distinct vertices @xmath9 and @xmath10 , @xmath21 contains an edge @xmath22 connecting @xmath9 and @xmath10 if and only if @xmath9 is visible to @xmath10 inside @xmath0 . in this paper ,",
    "the indices of all @xmath9 s are taken as congruent modulo @xmath1 , i.e. , if @xmath23 , then @xmath24 is the same vertex as @xmath11 , where @xmath25 ( or @xmath26 ) ; similarly , if @xmath27 , then @xmath28 is the same vertex as @xmath11 , where @xmath29 . for each @xmath30 ,",
    "denote by @xmath31 its degree in the visibility graph @xmath8 , and denote by @xmath32 the sequence of vertices in @xmath0 visible to @xmath9 from @xmath12 to @xmath33 ordered ccw around @xmath9 .",
    "we refer to @xmath34 as @xmath9 s _ visibility angle sequence_. note that since both @xmath33 and @xmath12 are visible to @xmath9 , @xmath35 and @xmath36 .",
    "for any two vertices @xmath14 in @xmath20 , let @xmath37 denote the sequence @xmath38 of the vertices ordered ccw along the boundary of @xmath0 from @xmath9 to @xmath10 .",
    "we refer to @xmath37 as a _",
    "chain_. let @xmath39 denote the number of vertices of @xmath0 in the chain @xmath37 .",
    "for any two distinct vertices @xmath40 , let @xmath41 be the ray emanating from @xmath9 and going towards @xmath10 .",
    "for any three vertices @xmath42 , denote by @xmath43 the ccw angle defined by rotating @xmath44 around @xmath2 to @xmath45 ( @xmath9 or @xmath10 need not be visible to @xmath2 ) .",
    "note that the values of all angles we use in this paper are in @xmath46 . for any vertex @xmath47 and @xmath48 , let @xmath49 be @xmath50",
    ".    the  problem can then be re - stated as follows : given a sequence of all vertices @xmath18 of an unknown simple polygon @xmath0 in the ccw order along @xmath0 s boundary , and the angles @xmath51 for each vertex @xmath2 of @xmath0 with @xmath52 , we seek to reconstruct @xmath0 ( up to similarity ) to fit all the given angles . without loss of generality , we assume that no three distinct vertices of @xmath0 are collinear .    it is easy to see that after @xmath4 time preprocessing , for any @xmath53 and any @xmath48 , the angle @xmath49 can be obtained in constant time . in the following discussion , we assume that this preprocessing has already been done . sometimes we ( loosely ) say that these angles are given as input .    the algorithm given in @xcite does not construct @xmath0 directly .",
    "instead , the algorithm first computes its visibility graph @xmath19 .",
    "as mentioned earlier , after knowing @xmath8 , @xmath0 can be reconstructed efficiently with the help of the angle data and the ccw ordered vertex sequence of @xmath0 .",
    "the algorithm for constructing @xmath8 in @xcite is called the _ triangle witness algorithm _ , which will be briefly reviewed in section [ sec : review ] .",
    "since @xmath20 consists of all vertices of @xmath0 , the problem of constructing @xmath8 is equivalent to constructing its edge set @xmath21 , i.e. , for any two distinct vertices @xmath54 , determine whether there is an edge @xmath22 in @xmath21 connecting @xmath9 and @xmath10 ( in other words , determining whether @xmath9 is visible to @xmath10 inside @xmath0 ) .    to discuss the involved algorithms , we need one more definition . for any two vertices",
    "@xmath55 with @xmath56 , suppose a vertex @xmath57 is visible to both @xmath9 and @xmath10 ; then we let @xmath58 be the _ first _ visible vertex to @xmath9 on the chain @xmath59 and let @xmath60 be the _",
    "last _ visible vertex to @xmath10 on the chain @xmath59 ( e.g. , see fig .  [",
    "fig : sangle ] ) .",
    "intuitively , imagine that we rotate a ray from @xmath61 around @xmath9 counterclockwise ; then the first vertex on the chain @xmath59 hit by the rotating ray is @xmath58 .",
    "similarly , if we rotate a ray from @xmath62 around @xmath10 clockwise , then the first vertex on the chain @xmath59 hit by the rotating ray is @xmath60 .",
    "note that if @xmath9 is visible to @xmath10 , then @xmath58 is @xmath10 and @xmath60 is @xmath9 .",
    "we denote by @xmath63 the angle @xmath64 and denote by @xmath65 the angle @xmath66 .",
    "it should be pointed out that for ease of understanding this paper , the above statement of defining @xmath67 is different from that in @xcite but they refer to the same angles in the algorithm .",
    "the motivation for defining @xmath67 will be clear after discussing the following lemma , which has been proved in @xcite .     and @xmath58 , and @xmath63 and @xmath65 which are the angles @xmath64 and @xmath66 , respectively .",
    "]    [ lem:10]@xcite for any two vertices @xmath55 with @xmath56 , @xmath9 is visible to @xmath10 if and only if there exists a vertex @xmath11 on @xmath68 such that @xmath11 is visible to both @xmath9 and @xmath10 and @xmath69 .",
    "since the above lemma is also critical to our improved algorithm in section [ sec : improve ] , we sketch the proof of the lemma below .    for any two vertices",
    "@xmath55 with @xmath56 , if @xmath9 is visible to @xmath10 , then it is not difficult to see that there must exist a vertex @xmath57 that is visible to both @xmath9 and @xmath10 .",
    "since the three vertices @xmath14 , and @xmath11 are mutually visible to each other , it is clear that the triangle formed by these three vertices does not intersect the boundary of @xmath0 except at the three vertices , implying that @xmath70 .",
    "such a vertex @xmath11 is called a _",
    "triangle witness _ of the edge @xmath22 in @xmath21 .",
    "suppose @xmath9 is not visible to @xmath10 ; then it is possible that there does not exist a vertex @xmath57 which is visible to both @xmath9 and @xmath10 .",
    "in fact , if there exists no vertex @xmath57 that is visible to both @xmath9 and @xmath10 , then @xmath9 can not be visible to @xmath10 .",
    "hence in the following , we assume that such a vertex @xmath11 exists , i.e. , a vertex @xmath71 is visible to both @xmath9 and @xmath10 ( yet @xmath9 is not visible to @xmath10 ) . note that @xmath11 is not collinear with @xmath9 and @xmath10 .",
    "if @xmath72 ( i.e. , the chain @xmath73 is part of the boundary of @xmath0 that blocks the visibility between @xmath9 and @xmath10 ) , then the lemma obviously holds .",
    "otherwise , @xmath74 , and in this case , the visibility between @xmath9 and @xmath10 is blocked by the chain @xmath75 . since @xmath9 is not visible to @xmath10 , for any choice of such a vertex @xmath11 , the angle @xmath76 is not given by @xmath9 s visibility angle sequence @xmath34 .",
    "the  closest approximation \" for @xmath76 in this case is determined by a vertex @xmath2 on the chain @xmath75 such that @xmath2 becomes @xmath10 if and only if @xmath10 is visible to @xmath9 . as in the definition of @xmath63 ,",
    "the vertex @xmath58 is such a vertex @xmath2 , i.e. , the first visible vertex to @xmath9 on the chain @xmath59 .",
    "similarly , the vertex @xmath9 in @xmath77 is  replaced \" in the definition of @xmath65 by @xmath60 , i.e. , the last visible vertex to @xmath10 on @xmath59 .",
    "clearly , when @xmath10 is not visible to @xmath9 , it must hold that @xmath78 and @xmath79 .",
    "therefore , @xmath80 .",
    "lemma [ lem:10 ] thus follows .",
    "in this section , we briefly review the triangle witness algorithm in @xcite that constructs the visibility graph @xmath19 of the unknown simple polygon @xmath0 .",
    "the triangle witness algorithm is based on lemma [ lem:10 ] .",
    "the algorithm has @xmath81 iterations . in the @xmath82-th iteration ( @xmath83 ) , the algorithm checks , for each @xmath84 , whether @xmath9 is visible to @xmath85 . after all iterations , the edge set @xmath21 can be obtained .",
    "to this end , the algorithm maintains two maps @xmath86 and @xmath87 : @xmath88[v_j]=t$ ] if @xmath10 is identified as the @xmath89-th visible vertex to @xmath9 in the ccw order , i.e. , @xmath90 ; the definition of @xmath87 is the same as @xmath86 . during the algorithm ,",
    "@xmath86 will be filled in the ccw order and @xmath87 will be filled in the clockwise ( cw ) order .",
    "when the algorithm finishes , for each @xmath9 , @xmath88 $ ] will have all visible vertices to @xmath9 on the chain @xmath91 while @xmath92 $ ] will have all visible vertices to @xmath9 on the chain @xmath93 .",
    "thus , @xmath88 $ ] and @xmath92 $ ] together contain all visible vertices of @xmath0 to @xmath9 .",
    "for ease of description , we also treat @xmath88 $ ] and @xmath92 $ ] as sets , e.g. , @xmath94 $ ] means that there is an entry @xmath88[v_l]$ ] and @xmath95|$ ] means the number of entries in the current @xmath88 $ ] .    initially , when @xmath96 , since every vertex is visible to its two neighbors along the boundary of @xmath0 , we have @xmath88[v_{i+1}]=1 $ ] and @xmath92[v_{i-1}]=deg(v_i)$ ] for each @xmath9 .",
    "in the @xmath82-th iteration , we determine for each @xmath9 , whether @xmath9 is visible to @xmath85 .",
    "below , we let @xmath97 .",
    "note that @xmath95|+1 $ ] is the index of the first visible vertex to @xmath9 in the ccw order that is not yet identified ; similarly , @xmath98|)$ ] is the index of the first visible vertex to @xmath99 in the cw order that is not yet identified .",
    "if @xmath9 is visible to @xmath99 , then we know that @xmath99 is the @xmath100|+1)$]-th visible vertex to @xmath9 and @xmath9 is the @xmath98|)$]-th visible vertex to @xmath99 , and thus we set @xmath88[v_{j}]=|f[v_i]|+1 $ ] and @xmath101[v_i]=deg(v_{j})-|b[v_{j}]|$ ] .",
    "if @xmath9 is not visible to @xmath99 , then we do nothing .",
    "it remains to discuss how to determine whether @xmath9 is visible to @xmath99 . according to lemma [ lem:10 ]",
    ", we need to determine whether there exists a triangle witness vertex @xmath11 in the chain @xmath68 , i.e. , @xmath11 is visible to both @xmath9 and @xmath99 and @xmath69 . to this end ,",
    "the algorithm checks every vertex @xmath11 in @xmath68 . for each @xmath11 ,",
    "the algorithm first determines whether @xmath11 is visible to both @xmath9 and @xmath99 , by checking whether there is an entry for @xmath11 in @xmath88 $ ] and in @xmath101 $ ] .",
    "the algorithm utilizes balanced binary search trees to represent @xmath86 and @xmath87 , and thus checking whether there is an entry for @xmath11 in @xmath88 $ ] and in @xmath102 $ ] can be done in @xmath16 time . if @xmath11 is visible to both @xmath9 and @xmath99 , then the next step is to determine whether @xmath69 .",
    "it is easy to know that @xmath103 is @xmath104[v_{j}],b[v_l][v_i])$ ] , which can be found readily from the input . to obtain @xmath63",
    ", we claim that it is the angle @xmath105[v_l],|f[v_i]|+1)$ ] .",
    "indeed , observe that all visible vertices in the chain @xmath68 are in the current @xmath88 $ ] .",
    "as explained above , @xmath95|+1 $ ] is the index of the first visible vertex to @xmath9 in the ccw order that has not yet been identified , which is the first visible vertex to @xmath9 in the chain @xmath59 , i.e , the vertex @xmath58 .",
    "thus , @xmath105[v_l],|f[v_i]|+1)$ ] is @xmath64 , which is @xmath63 .",
    "similarly , @xmath65 is the angle @xmath106|,b[v_j][v_l])$ ] .",
    "note that both the angles @xmath105[v_l],|f[v_i]|+1)$ ] and @xmath106|,b[v_j][v_l])$ ] are known .",
    "algorithm [ algo:10 ] in the appendix summarizes the whole algorithm @xcite .    to analyze the running time of the above triangle witness algorithm ,",
    "note that it has @xmath81 iterations . in each iteration",
    ", the algorithm checks whether @xmath9 is visible to @xmath85 for each @xmath107 . for each @xmath9 ,",
    "the algorithm checks every @xmath11 for @xmath108 , i.e , in the chain @xmath109 . for each such @xmath11 ,",
    "the algorithm takes @xmath16 time as it uses balanced binary search trees to represent the two maps @xmath86 and @xmath87 . in summary ,",
    "the overall running time of the triangle witness algorithm in @xcite is @xmath3 .",
    "in this section , we present an improved solution over the triangle witness algorithm in @xcite sketched in section [ sec : review ] .",
    "our improved algorithm runs in @xmath4 time . since the input size ( e.g. , the total number of visibility angles ) is @xmath5 in the worst case , our improved algorithm is worst - case optimal .",
    "our new algorithm follows the high - level scheme of the triangle witness algorithm in @xcite , and thus we call it the _ improved triangle witness algorithm_.    as in @xcite , the new algorithm also has @xmath81 iterations , and in each iteration , we determine whether @xmath9 is visible to @xmath85 for each @xmath107 .",
    "for every pair of vertices @xmath9 and @xmath85 , let @xmath97 . to determine whether @xmath9 is visible to @xmath10 , the triangle witness algorithm @xcite checks each vertex @xmath11 in the chain @xmath68 to see whether there exists a triangle witness vertex . in our new algorithm , instead , we claim that we need to check only one particular vertex , @xmath110|}(v_i)$ ] , i.e. , the last visible vertex to @xmath9 in the chain @xmath68 in the ccw order , as stated in the following lemma .",
    ": @xmath111 is @xmath110|}(v_i)$ ] , the last visible vertex to @xmath9 in @xmath68 ; @xmath9 is visible to @xmath10 if and only if @xmath111 is a triangle witness vertex . ]     for the example in fig .",
    "[ fig : visible ] : the gray ( pink ) area is @xmath112 , which is a star - shaped polygon with the vertex @xmath9 as a kernel point . ]     for the example in fig .",
    "[ fig : visible ] : the thick line segments form @xmath113 . ]",
    "[ lem:20 ] the vertex @xmath9 is visible to @xmath10 if and only if the vertex @xmath110|}(v_i)$ ] is a triangle witness vertex for @xmath9 and @xmath10 .",
    "let @xmath111 denote the vertex @xmath110|}(v_i)$ ] , which is the last visible vertex to @xmath9 in the chain @xmath68 in the ccw order . recall that @xmath111 being a triangle witness vertex for @xmath9 and @xmath10 is equivalent to saying that @xmath111 is visible to both @xmath9 and @xmath10 and @xmath114 .",
    "if @xmath9 is visible to @xmath10 , then we prove below that @xmath111 is a triangle witness vertex for @xmath9 and @xmath10 , i.e. , we prove that @xmath111 is visible to both @xmath9 and @xmath10 and @xmath114 .",
    "refer to fig .",
    "[ fig : visible ] for an example .",
    "let @xmath115 denote the subpolygon of @xmath0 that is visible to the vertex @xmath9 .",
    "usually , @xmath115 is called the _",
    "visibility polygon _ of @xmath9 and it is well - known that @xmath115 is a star - shaped polygon with @xmath9 as a kernel point ( e.g. , see @xcite ) . figure  [ fig : vispolygon ] illustrates @xmath115 .",
    "since @xmath111 is the last visible vertex to @xmath9 in @xmath68 and @xmath10 is visible to @xmath9 , we claim that @xmath10 is also visible to @xmath111 . indeed , since both @xmath111 and @xmath10 are visible to @xmath9 , @xmath111 and @xmath10 are both on the boundary of the visibility polygon @xmath115 .",
    "let @xmath116 denote the portion of the boundary of @xmath115 from @xmath111 to @xmath10 counterclockwise ( see fig .",
    "[ fig : boundary ] ) .",
    "we prove below that @xmath116 does not contain any vertex of @xmath0 except @xmath111 and @xmath10 .",
    "first , @xmath116 can not contain any vertex in the chain @xmath117 ( otherwise , @xmath10 would not be visible to @xmath9 ) .",
    "let the index of the vertex @xmath111 be @xmath118 , i.e. , @xmath119 .",
    "similarly , @xmath116 can not contain any vertex in the chain @xmath120 ( otherwise , @xmath111 would not be visible to @xmath9 ) .",
    "finally , @xmath116 can not contain any vertex in the chain @xmath121 , since otherwise @xmath111 would not be the last visible vertex to @xmath9 in @xmath68 .",
    "thus , @xmath116 does not contain any vertex of @xmath0 except @xmath111 and @xmath10 .",
    "therefore , the region bounded by @xmath116 , the line segment connecting @xmath9 and @xmath10 , and the line segment connecting @xmath9 and @xmath111 must be convex ( in fact , it is always a triangle ) and this region is entirely contained in @xmath0 .",
    "this implies that @xmath10 is visible to @xmath111 .",
    "hence , the three vertices @xmath14 , and @xmath111 are mutually visible to each other , and we have @xmath70 .    on the other hand , if @xmath111 is a triangle witness vertex for @xmath9 and @xmath10 , then by lemma [ lem:10 ] , the vertex @xmath9 is visible to @xmath10 .",
    "the lemma thus follows .    by lemma [ lem:20 ] , to determine whether @xmath9 is visible to @xmath10 , instead of checking every vertex in @xmath68 , we need to consider only the vertex @xmath110|}(v_i)$ ] in the current set @xmath88 $ ] .",
    "hence , lemma [ lem:20 ] immediately reduces the running time of the triangle witness algorithm by an @xmath15 factor .",
    "the other @xmath16 factor improvement is due to a new way of defining and representing the maps @xmath86 and @xmath87 , as elaborated below . in the following discussion .",
    "let @xmath111 be the vertex @xmath110|}(v_i)$ ] .    in our new algorithm ,",
    "to determine whether @xmath9 is visible to @xmath10 , we check whether @xmath111 is a triangle witness vertex for @xmath9 and @xmath10 . to this end , we already know that @xmath111 is visible to @xmath9 , but we still need to check whether @xmath111 is visible to @xmath10 . in the previous triangle witness algorithm @xcite , this step is performed in @xmath16 time by representing @xmath86 and @xmath87 using balanced binary search trees . in our new algorithm , we handle this step in @xmath122 time , by redefining @xmath86 and @xmath87 and using a new way to represent them .",
    "we redefine @xmath86 as follows : @xmath88[v_j]=t$ ] if @xmath10 is the @xmath89-th visible vertex to @xmath9 in the ccw order ; if @xmath10 is not visible to @xmath9 or @xmath10 has not yet been identified , then @xmath88[v_j]=0 $ ] . for convenience , we let @xmath88=f[v_i][v_{i+1},v_{i+2},\\ldots , v_{i-1}]$ ] .",
    "thus , in our new definition , the size of @xmath88 $ ] is fixed throughout the algorithm , i.e. , @xmath95|$ ] is always @xmath123 .",
    "in addition , for each @xmath9 , the new algorithm maintains two variables @xmath124 and @xmath125 for @xmath88 $ ] , where @xmath124 is the number of non - zero entries in the current @xmath88 $ ] , which is also the number of visible vertices to @xmath9 that have been identified ( i.e. , the number of visible vertices to @xmath9 in the chain @xmath109 ) up to the @xmath82-th iteration , and @xmath125 is the index of the last non - zero entry in the current @xmath88 $ ] , i.e. , @xmath125 is the last visible vertex to @xmath9 in the chain @xmath109 in the ccw order .",
    "similarly , we redefine @xmath87 in the same way as @xmath86 , i.e. , for each @xmath9 , @xmath92=b[v_i][v_{i+1},v_{i+2},\\ldots , v_{i-1}]$ ] and @xmath92[v_j]=t$ ] if @xmath10 is the @xmath89-th visible vertex to @xmath9 in the ccw order .",
    "further , for each @xmath9 , we also maintain two variables @xmath126 and @xmath127 for @xmath92 $ ] , where @xmath126 is the number of non - zero entries in the current @xmath92 $ ] , which is also the number of visible vertices to @xmath9 in the chain @xmath128 ( up to the @xmath82-th iteration ) , and @xmath127 is the index of the first non - zero entry in the current @xmath92 $ ] , i.e. , @xmath127 is the first visible vertex to @xmath9 in the chain @xmath128 in the ccw order . during the algorithm ,",
    "the array @xmath88 $ ] will be filled in the ccw order , i.e. , from the first entry @xmath88[v_{i+1}]$ ] to the end while the array @xmath92 $ ] will be filled in the cw order , i.e , from the last entry @xmath92[v_{i-1}]$ ] to the beginning .",
    "when the algorithm finishes , @xmath88 $ ] will contain all the visible vertices to @xmath9 in the chain @xmath129 , and thus only the entries of the first half of @xmath88 $ ] are possibly filled with non - zero values .",
    "similarly , only the entries of the second half of @xmath92 $ ] are possibly filled with non - zero values .",
    "below , we discuss the implementation details of our new algorithm , which is summarized in algorithm [ algo:20 ] .",
    "@xmath130    initially , when @xmath96 , for each @xmath9 , we set @xmath88[v_{i+1}]=1 $ ] and @xmath92[v_{i-1}]=deg(v_i)$ ] , and set all other entries of @xmath88 $ ] and @xmath92 $ ] to zero .",
    "in addition , we set @xmath131 , @xmath132 and @xmath133 , @xmath134 . in the @xmath82-th iteration , with @xmath135 , for each @xmath9 , we check whether @xmath9 is visible to @xmath10 , with @xmath97 .",
    "if @xmath9 is not visible to @xmath10 , then we do nothing . otherwise , we set @xmath88[v_j]=l_i+1 $ ] and increase @xmath124 by one ; similarly , we set @xmath136[v_i]=deg(v_j)-l'_j$ ] and increase @xmath137 by one .",
    "further , we set @xmath138 and @xmath139 .",
    "it remains to show how to check whether @xmath9 is visible to @xmath10 .",
    "by lemma [ lem:20 ] , we need to determine whether @xmath111 is a triangle witness vertex for @xmath9 and @xmath10 .",
    "since @xmath111 is the last visible vertex to @xmath9 in the chain @xmath68 in the ccw order , based on our definition , @xmath111 is the vertex @xmath125 . after knowing @xmath111",
    ", we then check whether @xmath111 is visible to @xmath10 , which can be done by checking whether @xmath136[v']$ ] is zero , in constant time . if @xmath136[v']$ ] is zero , then @xmath111 is not visible to @xmath10 and @xmath111 is not a triangle witness vertex ; otherwise , @xmath111 is visible to @xmath10 .",
    "( note that we can also check whether @xmath140[v_j]$ ] is zero . ) in the following , we assume that @xmath111 is visible to @xmath10 . the next step is to determine whether @xmath114 . to this end , we must know the involved three angles .",
    "similar to the discussion in section [ sec : review ] , we have @xmath141[v_j],b[v'][v_i])$ ] , @xmath142[v'],l_i+1)$ ] , and @xmath143[v'])$ ] .",
    "thus , all these three angles can be obtained in constant time .",
    "hence , the step of checking whether @xmath9 is visible to @xmath10 can be performed in constant time , which reduces another @xmath16 factor from the running time of the previous triangle witness algorithm in @xcite .",
    "algorithm [ algo:20 ] summarizes the whole algorithm .",
    "clearly , the running time of our new algorithm is bounded by @xmath4 .    [ theo:10 ] given the visibility angles and an ordered vertex sequence of a simple polygon @xmath0 , the improved triangle witness algorithm can reconstruct @xmath0 ( up to similarity ) in @xmath4 time .",
    "as discussed in @xcite , the above algorithm can also be used to determine whether the input angle data are consistent .",
    "namely , if there is no polygon that can fit the input angle data , then the algorithm in theorem [ theo:10 ] can be used to report this case as well .",
    "10    t.  asano , s.k .",
    "ghosh , and t.  shermer .",
    "chapter 19 : visibility in the plane , in _ handbook of computational geometry _ , j. sack and j. urrutia ( eds . ) , pages 829876 .",
    "elsevier , amsterdam , the netherlands , 2000 .",
    "t.  biedl , s.  durocher , and j.  snoeyink . reconstructing polygons from scanner data . in _ proc .",
    "of the 20th international symposium on algorithms and computation _ , volume 5878 of _ lecture notes in computer science _ , pages 862871 .",
    "springer - verlag , 2009 .",
    "d.  bil , y.  disser , m.  mihalk , s.  suri , e.  vicari , and p.  widmayer .",
    "reconstructing visibility graphs with simple robots . in _ proc .",
    "of the 16th international colloquium on structural information and communication complexity _ , volume 5869 of _ lecture notes in computer science _ , pages 8799 .",
    "springer - verlag , 2009 .",
    "choi , s.y .",
    "shin , and k .- y . chwa . characterizing and recognizing the visibility graph of a funnel - shaped polygon . , 14(1):2751 , 1995 .",
    "colley , a.  lubiw , and j.  spinrad .",
    "visibility graphs of towers .",
    ", 7(3):161172 , 1997 .",
    "y.  disser , m.  mihalk , and p.  widmayer .",
    "reconstructing a simple polygon from its angles . in _ proc .",
    "of the 12th scandinavian symposium and workshops on algorithm theory ( swat ) _ , volume 6139 of _ lecture notes in computer science _ , pages 1324 .",
    "springer , 2010 .",
    "g.  dudek , m.  jenkins , e.  milios , and d.  wilkes .",
    "robotic exploration as graph construction .",
    ", 7(6):859865 , 1991 .",
    "h.  everett . .",
    "phd thesis , university of toronto , toronto , 1990 .",
    "h.  everett and d.  corneil .",
    "recognizing visibility graphs of spiral polygons .",
    ", 11(1):126 , 1990 .",
    "h.  everett and d.  corneil .",
    "negative results on characterizing visibility graphs .",
    ", 5(2):5163 , 1995 .",
    "p.  flocchini , g.  prencipe , n.  santoro , and p.  widmayer .",
    "hard tasks for weak robots : the role of common knowledge in pattern formation by autonomous mobile robots . in _ proc . of the 10th international symposium on algorithms and computation _ , pages 93102 , 1999 .",
    "l.  jackson and s.  wismath .",
    "orthogonal polygon reconstruction from stabbing information .",
    ", 23(1):6983 , 2002 .",
    "j.  orourke and i.  streinu .",
    "the vertex - edge visibility graph of a polygon .",
    ", 10(2):105120 , 1998 .",
    "a.  sidlesky , g.  barequet , and c.  gotsman .",
    "polygon reconstruction from line cross - sections . in _ proc of the 18th canadian conference on computational geometry _ ,",
    "pages 8184 , 2006 .",
    "j.  snoeyink .",
    "cross - ratios and angles determine a polygon .",
    ", 22:619631 , 1999 .",
    "s.  suri , e.  vicari , and p.  widmayer .",
    "simple robots with minimal sensing : from local visibility to global geometry . , 27(9):10551067 , 2008 .",
    "s.  wismath .",
    "point and line segment reconstruction from visibility information .",
    ", 10(2):189200 , 2000 .",
    "@xmath144 $ ] @xmath145 $ ] @xmath130"
  ],
  "abstract_text": [
    "<S> in this paper , we study the following problem of reconstructing a simple polygon : given a cyclically ordered vertex sequence of an unknown simple polygon @xmath0 of @xmath1 vertices and , for each vertex @xmath2 of @xmath0 , the sequence of angles defined by all the visible vertices of @xmath2 in @xmath0 , reconstruct the polygon @xmath0 ( up to similarity ) . </S>",
    "<S> an @xmath3 time algorithm has been proposed for this problem . </S>",
    "<S> we present an improved algorithm with running time @xmath4 , based on new observations on the geometric structures of the problem . since the input size ( i.e. , the total number of input visibility angles ) is @xmath5 in the worst case , our algorithm is worst - case optimal .    </S>",
    "<S> = 14.0pt </S>"
  ]
}