{
  "article_text": [
    "bin packing problems ( bpps ) are well studied and highly popular combinatorial optimization problems .",
    "the main reason for their popularity is a large number of real - world applications .",
    "moreover , in general they can be easily expressed in mathematical terms . in this work",
    "we deal with a specific variant of the two - dimensional bin packing problem ( 2bp ) , which consists in packing a set @xmath0 of @xmath1 rectangular items into a minimum number of bins of height @xmath2 and width @xmath3 such that items do not overlap .",
    "each item @xmath4 is characterized by its height @xmath5 and its width @xmath6 .",
    "real world applications for the 2bp include , for example , cutting glass , wood or metal and packing in the context of transportation or warehousing ( see  @xcite ) . + according to lodi et .",
    "al  @xcite there are four different cases of the 2bp as described above .",
    "the differences between these four cases are based on two aspects : ( 1 ) a rotation of 90@xmath7 of the items may , or may not , be permitted ; ( 2 ) guillotine cutting may be required or free .",
    "the four resulting problem versions are as follows :    * 2bp@xmath8o@xmath8 g : items are oriented and guillotine cutting is required . *",
    "2bp@xmath8o@xmath8f : items are oriented and guillotine cuttings is free . *",
    "2bp@xmath8r@xmath8 g : items may be rotated by 90@xmath7 and guillotine cutting is required . *",
    "2bp@xmath8r@xmath8f : items may be rotated by 90@xmath7 and guillotine cutting is free .    in this paper",
    "we exclusively focus on the 2bp@xmath8o@xmath8f version of the problem .",
    "note that in the remainder of the paper the abbreviation 2bp will refer to this problem version .",
    "concerning the complexity of the 2bp , garey and johnson classified the problem as np - hard ( see  @xcite ) .      in general ,",
    "different versions of the 2bp have been tackled in the literature by means of different integer programing models , heuristics , and exact algorithms .",
    "a good overview on the early work regarding the 2bp can be obtained from  @xcite . in the following",
    "we will focus on existing heuristics as well as metaheuristics .",
    "concerning heuristics , the literature mainly distinguishes between _ one - phase _ and _ two - phase approaches_. one - phase algorithms pack the items directly into the bins , whereas two - phase algorithms first pack the items into levels of one infinitely high strip with width @xmath3 and then stack these levels into the bins .",
    "level - packing algorithms place items next to each other in each level . hereby , the bottom of the first level is the bottom of the bin .",
    "for the next level the bottom is a horizontal line coinciding with the highest item of the level below .",
    "note that , items can only be placed besides each other in each level , in contrast to packing items on top of each other .",
    "+ well known _",
    "level - packing algorithms _ are next - fit decreasing height ( nfdh ) , first - fit decreasing height ( ffdh ) and best - fit decreasing height ( bfdh )  @xcite .",
    "these strategies were originally developed for the one - dimensional bin packing problem , but have also been adapted to strip packing problems and for the application to the two - dimensional case .",
    "all three heuristics require the items to be sorted by non - increasing height , which represents the order in which they are packed .",
    "moreover , they pack the items into one bin of infinite hight . + next , _ two - phase level - packing algorithms _ are shortly described .",
    "hybrid next - fit ( hnf ) ( see  @xcite ) is based on nfdh , hybrid first - fit ( hff )  @xcite on ffdh and finite best - strip ( fbs )  @xcite , which is also sometimes referred to as hybrid best - fit , is based on bfdh .",
    "the first phase of all three algorithms consists in the execution of the heuristic on which they are based .",
    "this produces in each case a set of levels , which must then be packed into bins of finite hight .",
    "this is done by using the same strategy as the one that was used for the packing of the items into levels .",
    "another example for a two - phase level - packing algorithm is knapsack packing ( kp )  @xcite .",
    "phase one of kp consists in packing the levels by solving knapsack problems .",
    "hereby , the tallest unpacked item , say @xmath9 , initializes each new level .",
    "the remaining horizontal distance up to the right bin border ( @xmath10 ) is taken as the capacity of the knapsack problem to be solved .",
    "moreover , the width @xmath11 of any unpacked item @xmath12 is regarded as its weight , while the items area @xmath13 is regarded as its value ( or profit ) .",
    "this procedure is repeated until all items are packed into levels . in the second phase the remaining one - dimensional bin packing problem",
    "is solved by using a heuristic such as best - fit decreasing or an exact algorithm .",
    "finally , floor ceiling ( fc )  @xcite can be seen as an improvement over fbs .",
    "again , the first phase is used for packing items into levels , whereas these levels are packed into bins in the second phase .",
    "+ among the most important _ one - phase non - level - packing algorithms _ are alternate direction ( ad )  @xcite , bottom - left fill ( blf )  @xcite , improved lowest gap fill ( lgfi ) @xcite and touching perimeter ( tp )  @xcite . in the following",
    "we describe these techniques shortly .",
    "ad sorts the items by non - increasing height and initializes @xmath14 bins , where @xmath14 is a lower bound for the necessary number of bins .",
    "afterwards the bottom of the bins are filled from left to right using a best - fit decreasing strategy .",
    "then one bin after another is being filled . in this context items",
    "are packed in bands from left to right and from right to left until no more items can be packed into the current bin .",
    "blf initializes bins by placing the first item at the bottom left corner .",
    "the top left and bottom right corners of already placed items are positions at which the bottom left corner of new items may potentially be placed .",
    "blf tries to place the items starting from the lowest to the highest available position .",
    "when positions with an equal height are encountered , the position closer to the left is tried first .",
    "lgfi has a preprocessing and a packing stage . in the preprocessing stage ,",
    "items are sorted by non - increasing area as a first criterion .",
    "ties are broken by non - increasing absolute difference between height and width of the items .",
    "the packing stage starts by initializing a bin with the first unpacked item , which is placed at the bottom left corner",
    ". then items are placed at the bottom leftmost position .",
    "if possible , an item is chosen such that either the horizontal gap or the vertical gap is filled completely .",
    "if this is not possible , the largest fitting item is placed at this position .",
    "this is repeated until all items are packed .",
    "tp , the last one - phase non - level - packing algorithm considered here , first sorts the items by non - increasing area and initializes @xmath14 bins , where @xmath14 is a lower bound for the number of necessary bins .",
    "furthermore , depending on a specific position in the bin , a score is associated to each item : the percentage of the edges of the item touching either an edge of another item or the border of the bin .",
    "each item is now considered for different positions in the bin and for each of these positions the corresponding score is calculated .",
    "each item is then placed at the position at which its score is highest .",
    "+ the best heuristic for the 2bp which is currently available ( labelled sch ) is based on solving a set - covering formulation of the problem  @xcite by means of column generation . in the first phase ,",
    "a rather small subset of all possible columns is generated by using greedy procedures and fast constructive heuristic algorithms from the literature . in the second phase ,",
    "the resulting set - covering instance is solved by means of a lagrangian - based heuristic .",
    "+ in addition , some heuristics developed for three - dimensional packing can sometimes easily be applied to the 2bp .",
    "an example is the extreme point based heuristic from  @xcite .",
    "this heuristic uses extreme points to determine all points in the bin where items can be placed .",
    "extreme points can either be corners of the already placed items or points generated by the extended edges of the placed items .",
    "these points are updated every time an item is placed into the bin . for placing the items a modified version of bfdh is used .",
    "the earliest metaheuristic developed for the 2bp is _ tabu search _ ( ts )  @xcite .",
    "an initial solution is created using a heuristic such as fbs , kp , or ad .",
    "moreover , neighborhood moves are based on trying empty certain bins by repacking their items into other bins .",
    "a metaheuristic based on _ guided local search _",
    "( gls ) has been presented in  @xcite .",
    "this metaheuristic has its origins in constraint satisfaction applications .",
    "gls uses memory to guide the search process away from already explored regions of the search space .",
    "this is done by adding a penalty term to the objective function that penalizes bad solution features of previously visited solutions .",
    "a rather simple metaheuristic , labeled hbp , based on a greedy heuristic has been proposed in  @xcite .",
    "hbp assigns a score to each item .",
    "then , for the construction of a solution , the items are considered according to non - increasing values of the scores . after the construction of a solution the scores are updated using a certain criterion .",
    "this procedure is iterated until a pre - defined stopping criterion is met .",
    "an approach labeled _ weight annealing _ ( wa ) for solving the 2bp was proposed in  @xcite .",
    "the wa technique can be seen as an extension of a greedy heuristic .",
    "hereby , weights are assigned to different parts of the solution space .",
    "these weights are changed during the execution of the algorithm on the basis of the generated solutions .",
    "moreover , they have an influence on the decisions of the greedy heuristic when constructing a new solution .    finally , the currently best - performing metaheuristic is a hybrid between a greedy randomized adaptive search procedure ( grasp ) and variable neighborhood descent ( vnd )  @xcite .",
    "the solution construction phase of grasp is hereby based on a maximal - space heuristic from the field of container loading .      in this paper",
    "we propose two algorithms based on a randomized version of the lgfi heuristic from the literature .",
    "first , a multi - start algorithm is developed .",
    "second , our randomized version of lgfi is embedded into several operators of a comparatively simple evolutionary algorithm .",
    "extensive computational experiments on publicly available benchmark instances show that both algorithms compare very favorably with the state of the art .",
    "in fact , the proposed multi - start algorithm and the evolutionary algorithm are able to solve 4 previously unsolved problem instances to optimality . moreover , summing up the number of used bins concerning all",
    "500 problem instances the evolutionary algorithm reaches a value of 7239 , which is the best value reached by any algorithm that has been proposed for this problem .      in section  [ sec : problemformulation ] we first outline an ilp model for the tackled problem .",
    "the proposed algorithms are then presented in section  [ sec : solutionprocedure ] .",
    "finally , an experimental evaluation is provided in section  [ sec : evaluation ] , while conclusions and an outlook to the future are given in section  [ sec : conclusions ] .",
    "inspired by the models proposed in  @xcite and  @xcite we present in the following an alternative ilp model for the 2bp . for this purpose ,",
    "we denote by @xmath0 the set of all items and the set of all bins . @xmath3 and",
    "@xmath2 refer to the bin - width and the bin - height , while @xmath15 and @xmath16 refer to the width and the height of item @xmath17 .",
    "@xmath3 , @xmath2 , @xmath15 and @xmath16 are all integer values .",
    "the binary decision variable @xmath18 evaluates to 1 if item @xmath12 is packed into bin @xmath19 , and 0 otherwise .",
    "only variables @xmath18 where @xmath20 are created so that only @xmath21 instead of @xmath22 have to be initialized .",
    "furthermore items @xmath23 indicate if bins are opened or not .",
    "a bin is considered open if the item with the same index as the bin is placed in that bin . for example item 1 can not be placed in bin 3 but only in bin 1 .",
    "item 3 can be placed in bin 3 , in bin 2 in case item 2 is placed in bin 2 , or in bin 1 , which is always open as item 1 can only be placed in bin 1 .",
    "it is easy to see that , even with this restricted variable set , all combinations of items packed into one bin are still possible .",
    "the integer variables @xmath24 and @xmath25 decide the x- and y - coordinates of each item within a bin . for the overlapping constraints , which we will introduce in the next paragraph , we need the binary variables @xmath26 and @xmath27",
    ". each one of these four variables decides if item @xmath12 has to be to the left ( @xmath28 ) , above ( @xmath29 ) , to the right ( @xmath30 ) or underneath ( @xmath27 ) item @xmath9 .",
    "only variables for @xmath31 are created so that only @xmath32 instead of @xmath22 have to be initialized for each variable .",
    "this can be done because if item @xmath12 has to be to the left of item @xmath9 , item @xmath9 automatically has to be to the right of item @xmath12 which makes it unnecessary to initialize the corresponding variable of item @xmath9 .",
    "@xmath33    the objective function minimizes the number of bins used .",
    "the constraint ensures that each item is assigned to one and only one bin . that an item @xmath12 can only be assigned to an open / initialized bin is ensured by .",
    "constraints and ensure that each item is placed within the bin .",
    "equation states that item @xmath12 has to be placed either to the left , above , to the right or underneath item @xmath9 .",
    "the last four equations - ensure that two items do not overlap if assigned to the same bin .",
    "both algorithms that we present in this paper are strongly based on heuristic lgfi , as developed by wong and lee in  @xcite .",
    "lgfi itself is an improved version of the lgf heuristic presented by lee in  @xcite .",
    "note that lgfi is a two - stage heuristic . in the _ preprocessing stage _",
    "items are sorted into a list , while in the _ packing stage _ these items are packed from the list into bins .",
    "more specifically , in the preprocessing stage items are sorted by non - increasing area as a first criterion .",
    "ties are broken by non - increasing absolute difference between height and width of the items .",
    "the packing stage is an iterative process in which the following actions are performed at each iteration .",
    "first , the bottom leftmost position at which an item may be placed is identified .",
    "this position is henceforth called the _",
    "current position_. then , two gaps are calculated with respect to this position .",
    "the _ horizontal gap _ is defined as the distance between the current position and either the right border of the bin or the left edge of the first item between the current position and the right border of the bin .",
    "the distance between the current position and the upper border of the bin defines the value of the _ vertical gap_. the value of the smaller gap is called _",
    "current gap_. the current gap is compared to either the widths of the items from the list of unpacked items , if the horizontal gap is the current gap , or to the heights of the items from the list of unpacked items , if the vertical gap is the current gap .",
    "the first item that fills the gap completely is placed with its bottom left corner at the identified position .",
    "if no such item exists , the first item which fits without any overlap is placed with its bottom left corner at the current position . if no such item exists either , some of the area must be declared _ wastage area _ , which works as follows . a wastage area with the width of the horizontal gap",
    "is created .",
    "the height of the wastage area is chosen as the height of the upper edge of the lowest neighboring item , or , if no neighboring items exists , as the height of the bin . finally , if no current position can be found , and if unpacked items exist , a new bin is opened .",
    "[ [ example . ] ] example .",
    "+ + + + + + + +    figure  [ fig : example ] shows the working of lgfi by means of a simple example .",
    "the left - hand side of each graphic shows the bin which is currently packed .",
    "the cross marks the current position , while the dotted lines show the horizontal and the vertical gap ( indicated by hgap and vgap ) .",
    "the unpacked items are shown sorted from left to right at the right - hand side of each graphic .",
    "the body of each item shows its dimensions . in the initial situation ( see figure  [ fig : example : a ] ) , the current postion corresponds to the bottom left corner of the empty bin .",
    "as the current gap evaluates to 6 , no item is able to fill the current gap completely .",
    "therefore , the first item from the list is chosen and placed at the current position .",
    "after this first step ( see figure  [ fig : example : b ] ) , the current position is @xmath34 , and the current gap ( as defined by the horizontal gap ) evaluates to 3 .",
    "the first item from the list which fills this gap completely is the second item ( with dimensions @xmath35 ) .",
    "therefore , this item is chosen and placed at the current position . the packing stage of lgfi proceeds in the same way until reaching the situation shown in figure  [ fig : example : f ] .",
    "the current position at this point is @xmath36 , and the current gap ( corresponding to the horizontal gap ) evaluates to 1 .",
    "unfortunately , the only remaining unpacked item does not fit without overlap at this position .",
    "therefore , a wastage area must be declared .",
    "the width of this wastage space is equal to the horizontal gap .",
    "the height of the wastage space is 2 , because after two vertical space units , the upper border of the neighboring item to the left is reached . finally , as a last step",
    ", the last unpacked item is placed at position @xmath37 .",
    "the main idea of this paper is the use of the lgfi heuristic in a probabilistic way within the preprocessing stage .",
    "our first approach is described in the following .",
    "as mentioned before , the preprocessing stage of lgfi generates an input sequence of all items . in this input sequence ,",
    "items are ordered with respect to non - increasing area . in the following",
    ", @xmath38 refers to the position of an item @xmath12 in this sequence .",
    "multistart lgfi ( ms - lgfi ) works as follows . at each iteration ,",
    "a new input sequence @xmath39 is probabilistically generated on the basis of the original input sequence .",
    "then , this new input sequence is provided to lgfi for the generation of the packing . at the end of the algorithm ,",
    "the best found solution is provided as output .    in the following",
    "we explain the way in which a new input sequence @xmath39 is generated based on the original input sequence .",
    "remember that the total number of items is denoted by @xmath1 .",
    "a value @xmath40 is then assigned to each item @xmath12 in the following way : @xmath41 where @xmath42 is a parameter .",
    "the positions of @xmath39 are filled from 1 to @xmath1 in an iterative way . at each step , let @xmath43 be the set of items that are not yet assigned to @xmath39 .",
    "an item @xmath44 is chosen according to probabilities @xmath45 ( for all @xmath44 ) by roulette - wheel - selection .",
    "these probabilities @xmath45 are calculated proportional to @xmath40 : @xmath46 note that the larger parameter @xmath47 , the more similar the newly generated input sequence @xmath39 will be to the original deterministic sequence .",
    "the ms - lgfi algorithm , as proposed in the previous subsection , may have the disadvantage that no learning takes place over time .",
    "in other words , ms - lgfi may only find good input sequences for lgfi by chance .",
    "moreover , once a good input sequence has been found , the knowledge about this sequence is forgotten at the end of the corresponding iteration .",
    "therefore , we started to investigate if , for example , an evolutionary algorithm would is able learn good input sequences for lgfi .",
    "for this purpose the following evolutionary algorithm for the 2bp  henceforth labeled ea - lgfi  was devised .",
    "a solution in the context of ea - lgfi is an input sequence @xmath39 for lgfi .",
    "note that @xmath39 is an ordered list of all items that must be packed .",
    "the item at position @xmath9 of this list ( where @xmath48 ) is denoted by @xmath49 .",
    "the function value @xmath50 of a solution @xmath39 is calculated by applying lgfi to @xmath39 .",
    "the pseudo - code of ea - lgfi is shown in alg .",
    "[ algo : ea ] .",
    "the first step of ea - lgfi consists in generating the initial population of size @xmath51 ( see function @xmath52 ) .",
    "then , at each iteration a crossover operator is applied in function @xmath53 , recreating @xmath54 percent of the population .",
    "this provides a population @xmath55 with less than @xmath51 solutions .",
    "the missing @xmath56 solutions are generated by function @xmath57 . in the following the three functions of algorithm ea - lgfi",
    "are outlined in more detail .",
    "values for parameters @xmath51 , @xmath54 , @xmath47 and @xmath58 @xmath59 @xmath60 @xmath61 best solution found    [ [ textsfgenerateinitialpopulationp_mboxsmall - sizekappa ] ] @xmath52 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in this function , @xmath51 solutions are probabilistically generated in the same way as in ms - lgfi ( see section  [ sec : mslgfi ] ) .",
    "parameter @xmath47 is used for this purpose .",
    "[ [ textsfcrossoverpc_mboxsmall - ratedelta ] ] @xmath53 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    this operator applies recombination to each of the best @xmath62 solutions of @xmath63 , where @xmath64 is a parameter of the algorithm .",
    "extensive empirical tests have shown that a crossover rate @xmath65 works best for the instances at hand .",
    "for each solution @xmath39 from the set of best @xmath62 solutions of @xmath63 , a crossover parter @xmath66 ( such that @xmath67 ) is chosen from @xmath63 by means of roulette - wheel - selection .",
    "assume that @xmath63 is an ordered list in which solutions are sorted according to their objective function values in a non - increasing manner .",
    "ties are broken by the load of the last bin , that is , solutions with a lower load in the last bin are ordered first .",
    "let @xmath68 denote the position of a solution @xmath39 in @xmath63 .",
    "the probability @xmath69 for a solution @xmath67 to be chosen as a crossover partner for solution @xmath70 is as follows : @xmath71 where @xmath72 is a parameter of the algorithm . given two crossover partners @xmath39 and @xmath73 , one offspring solution @xmath74 is generated as explained in the following .",
    "first , three pointers ( @xmath19 , @xmath75 and @xmath76 ) are initialized to the first position . then",
    ", the @xmath1 positions of @xmath74 are filled from 1 to @xmath1 as follows . if @xmath77 then @xmath78 . in words ,",
    "if position @xmath19 of solution @xmath39 and position @xmath75 of solution @xmath73 contain the same item , then this item is placed at position @xmath76 of the offspring solution @xmath74 .",
    "next , position pointer @xmath76 is incremented , and position pointers @xmath19 and @xmath75 are moved to the right until reaching the closest position containing an item which does not yet appear in solution @xmath74 . in case @xmath79 , the item for position @xmath76 of solution @xmath74 is chosen probabilistically among @xmath80 and @xmath81 , where a probability of @xmath82 is given to the item originating from the better of the two solutions .",
    "afterwards , the position pointer @xmath76 is incremented .",
    "moreover , the position pointer of the solution from which the item was selected is moved to the right until reaching the closest position containing an item which does not yet appear in solution @xmath74 .",
    "the resulting solution @xmath74 is evaluated by using it as input for lgfi . in case @xmath83 or",
    "@xmath84 and @xmath74 has a lower load than @xmath39 in the last bin , solution @xmath74 is added to the new population @xmath55 , otherwise solution @xmath39 is added to @xmath55 .    [",
    "[ textsfaddnewsolutionspp_mboxsmall - sizekappa ] ] @xmath57 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    this function probabilistically generates @xmath85 solutions in the same way as in ms - lgfi ( see section  [ sec : mslgfi ] ) .",
    "parameter @xmath47 is used for this purpose .",
    "ms - lgfi and ea - lgfi were implemented in ansi c++ using gcc 4.4 for compiling the software .",
    "the experimental results that we outline in the following were obtained on a pc with an amd64x2 4400 processor and 4 gigabyte of memory .",
    "the proposed algorithms were applied to a benchmark set of 500 problem instances from the literature .",
    "after an initial study of the algorithms behavior , a detailed experimental evaluation is presented .",
    "ten classes of problem instances for the 2bp are provided in the literature .",
    "a first instance set , containing six classes ( i - vi ) , was proposed by berkey and wang in  @xcite . for each of these classes ,",
    "the widths and heights of the items were chosen uniformly at random from the intervals presented in table  [ tab : classesivi ] . moreover , the classes differ in the width ( @xmath3 ) and the height ( @xmath2 ) of the bins .",
    "instance sizes , in terms of the number of items , are taken from @xmath86 .",
    "berkey and wang provided 10 instances for each combination of a class with an instance size .",
    "this results in a total of 300 problem instances .",
    ".specification of instance classes i - vi ( as provided by  @xcite ) . [ cols=\"^,^,^,^,^\",options=\"header \" , ]     [ tab : classesviix ]    these 500 instances can be downloaded from http://www.or.deis.unibo.it/research.html .      in order to study the behavior of ms - lgfi we performed tests with a varying limit for the number of solution evaluations ( that is , algorithm iterations ) and for various settings of parameter @xmath47 . more specifically , we considered limits for the number of solution evaluations from @xmath87 and values for @xmath47 from @xmath88 . for each combination of the two parameters ms - lgfi",
    "was applied exactly once to each of the 500 problem instances .",
    "the sum of the number of bins used in the best solutions generated for all 500 problem instances is used as a measure .",
    "the graphic in figure  [ fig : ms - tuning ] provides this information for all parameter value combinations . the best performance is generally achieved ( for each solution evaluation limit ) with the setting @xmath89 .",
    "moreover , when increasing the number of solution evaluations from @xmath90 to @xmath91 , the algorithm performance improves only slightly .",
    "therefore , the final results of ms - lgfi that are presented in the following section are obtained with @xmath89 and a number of @xmath91 solutions evaluations .",
    "+        concerning ea - lgfi , the same number of solution evaluations as for ms - lgfi was chosen as a stopping criterion ( that is , @xmath91 solution evaluations ) .",
    "moreover , for parameter @xmath47 we chose value 10 , as in the case of ms - lgfi .",
    "however , we tested different population sizes ( @xmath92 ) and different values for parameter @xmath58 ( @xmath93 ) .",
    "remember that the value of @xmath58 is used for the calculation of the probabilities for solutions to be selected as crossover partners . in general , the higher the value of @xmath58 , the more are good solutions preferred over worse ones , when selecting a crossover partner @xmath73 for @xmath39 .",
    "ea - lgfi was applied for each combination of @xmath58 and @xmath92 exactly once to each of the 500 problem instances .",
    "the sum of the number of bins used in the best solutions generated for all 500 instances is shown in figure  [ fig : ea - tuning ] for each parameter value combination . even though differences in algorithm performance are quite small , higher values of @xmath58 seem to work better than smaller ones . moreover",
    ", a population size of 10 generally seems to work slightly better than a population size of 100 .",
    "the final results of ea - lgfi presented in the following section are the ones obtained with @xmath94 and @xmath95 .",
    "the following six benchmark algorithms were chosen from the literature : the set covering heuristic ( sch ) from  @xcite , the hybrid grasp approach from  @xcite , the hbp approach from  @xcite , the tabu search ( ts ) algorithm from  @xcite , the guided local search ( gls ) approach from  @xcite , and the weighted annealing ( wa ) metaheuristic from  @xcite . among these approaches , sch and grasp",
    "are currently regarded to be the state - of - the - art techniques for the 2bp .",
    "the results are shown in tables  [ tab : comparison-1 ] and  [ tab : comparison-2 ] in a way which is traditional for the 2bp .",
    "for each algorithm the results are shown in two columns . the first column ( with heading * value",
    "* ) provides the sum of the number of bins used in the best solutions generated for the 10 instances of a combination between instance class ( i  x ) and number of items ( 20  100 ) .",
    "for example , the best solutions generated for the 10 instances of class  i ( 20 items ) by algorithm sch occupy in total 71 bins . in case",
    "a value corresponds to the best result obtained by any algorithm , it highlighted in bold .",
    "moreover , in the case of ms - lgfi and ea - lgfi a value is marked by an asterisk if it is better than the best know value as of today .",
    "the second column ( with heading * time ( s ) * ) shows the average computation time ( in seconds ) necessary to find the best solutions for the 10 instances of a combination between instance class and number of items .",
    "for example , algorithm sch needed on average 0.06 seconds to find its best solutions for the 10 instances of class i ( 20 items ) .",
    "the only exception is gls for which the second column is missing , as the computation time information was not given in the original paper .",
    "finally , the last line of table  [ tab : comparison-2 ] provides a summary of the results over all 500 problem instances . for each algorithm",
    "is given the sum of number of bins used , as well as the average computation time , for the 500 instances .",
    "there are several aspects about the results that should be mentioned .",
    "first , the number bins used by the best solutions generated by ea - lgfi for the 500 problem instances amounts to 7239 , which is the best value ever achieved by any algorithm . the best algorithm so far ( grasp )",
    "achieved a value of 7241 .",
    "moreover , ms - lgfi achieves a value of 7247 , which is the 3rd best value ever obtained by any algorithm . only grasp ( 7241 ) and sch ( 7243 ) achieve better values .",
    "this is remarkable , because ms - lgfi is a simple multi - start algorithm .",
    "it is also interesting to note that both ms - lgfi and ea - lgfi are able to solve four problem instances to optimality that have never been solved before .",
    "this concerns instances 173 and 174 ( both from class iv , with 60 items ) , instance 197 ( from class iv , with 100 items ) , and instance 298 ( from class vi , with 100 items ) .",
    "detailed results for each single instance are shown in the 10 tables of appendix  a.    finally , we would like to comment on the computation times . due to the fact that different processors and different computation time limits have been used for the generation of the results , the computation times are certainly not directly comparable",
    ". however , the computation times of all algorithms are , in general , very low .",
    "therefore , no algorithm can be identified to have a particular advantage or disadvantage over the other algorithms for what concerns the computation time requirements . in the following",
    "we provide the information about processors and computation time limits for the competitor algorithms : sch was run on a digital alpha 533 mhz with a time limit of 100 seconds per instance .",
    "the same machine and time limit was used for hbp , because the results presented in tables  [ tab : comparison-1 ] and  [ tab : comparison-2 ] are the ones from a re - implementation from  @xcite .",
    "grasp was executed on a pentium mobile with 1500 mhz with a stopping criterion of 50000 iterations per application .",
    "furthermore , ts was tested on a silicon graphics indy r10000sc with 195 mhz and a computation time limit of 60 seconds per problem instance .",
    "finally , gls was executed on a digital 500au workstation with a 500 mhz 21164 cpu using a computation time limit of 100 seconds per problem instance , while wa was run on a pentium 4 with 3 ghz .",
    "[ tab : comparison-1 ]    [ tab : comparison-2 ]",
    "in this paper we presented two algorithms for tackling the oriented two - dimensional bin packing problem under free guillotine cutting ( 2bp ) .",
    "both algorithms are strongly based on a probabilistic version of an existing one - pass heuristic ( lgfi ) from the literature .",
    "the first algorithm is a simple multistart metaheuristics , whereas the second one is an evolutionary algorithm .",
    "the results have shown that both algorithms obtain very good results in comparison to current state - of - the - art approaches .",
    "in fact , both algorithms are able to solve four problem instances  which have not been solved yet by any algorithm  to optimality .",
    "moreover , the best solutions generated by the evolutionary algorithm for the 500 instances use , in total , a number 7239 bins .",
    "this is the best value ever achieved by any algorithm proposed for the 2bp .    in the future we plan to investigate additional ways in which the probabilistic version of lgfi might be exploited .",
    "for example , an ant colony optimization approach might be better suited than an evolutionary algorithm for learning input sequences for lgfi .",
    "moreover , we plan to add a local search procedure to our algorithms for improving the constructed solutions .",
    "this work was supported by the binational grant _ acciones integradas _ es16 - 2009 ( austria ) and mec ha2008 - 0005 ( spain ) , and by grant tin2007 - 66523 ( formalism ) of the spanish government .",
    "in addition , christian blum acknowledges support from the _ ramn y cajal _ program of the spanish government of which he is a research fellow .    10    b.  s. baker , e.  g. coffman jr . , and r.  l. rivest .",
    "orthogonal packings in two dimensions . , 9(4):846855 , 1980 .",
    "j.  o. berkey and p.  y. wang",
    ". two dimensional finite bin packing algorithms . , 38(5):423429 , 1987 .",
    "m.  a. boschetti and a.  mingozzi .",
    "two - dimensional finite bin packing problems .",
    "part ii : new lower and upper bounds .",
    ", 2:3044 , 2003 .",
    "f.  r.  k. chung , m.  r. garey , and d.  s. johnson .",
    "on packing two - dimensional bins . , 3(1):6676 , 1982 .",
    "e.  g. coffman , jr .",
    ", m.  r. garey , d.  s. johnson , and r.  e. tarjan .",
    "performance bounds for level - oriented two - dimensional packing algorithms . , 9(4):808826 , 1980 .",
    "t.  g. crainic , g.  perboli , and r.  tadei .",
    "extreme point - based heuristics for three - dimensional bin packing . , 20(3):368384 , 2008 .",
    "k.  a. dowsland and w.  b. dowsland .",
    "packing problems . , 56(1):214 , 1992 .",
    "o.  faroe , d.  pisinger , and m.  zachariasen .",
    "guided local search for the three - dimensional bin - packing problem .",
    ", 15(3):267283 , 2003 .",
    "j.  b.  g. frenk and g.  galambos .",
    "hybrid next - fit algorithm for the two - dimensional rectangle bin - packing problem .",
    ", 39(3):201217 , 1987 .",
    "m.  r. garey and d.  s. johnson . .",
    "w.  h.  freeman , 1979 .",
    "e.  hopper and b.  turton .",
    "a genetic algorithm for a 2d industrial packing problem .",
    ", 37(12):375378 , 1999 .",
    "l.  s. lee .",
    "a genetic algorithm for two - dimensional bin packing problem .",
    ", 2(1):3439 , 2008 .",
    "a.  lodi . .",
    "phd thesis , universit degli studio di bologna , 1999 .",
    "a.  lodi , s.  martello , and d.  vigo .",
    "approximation algorithms for the oriented two - dimensional bin packing problem .",
    ", 112(1):158166 , 1999 .",
    "a.  lodi , s.  martello , and d.  vigo .",
    "heuristic and metaheuristic approaches for a class of two - dimensional bin packing problems .",
    ", 11(4):345357 , 1999 .",
    "a.  lodi , s.  martello , and d.  vigo .",
    "recent advances on two - dimensional bin packing problems . , 123(1 - 3):379396 , 2002 .",
    "a.  lodi , s.  martello , and d.  vigo .",
    "two - dimensional packing problems : a survey . , 141(2):241252 , 2002 .",
    "loh , b.  golden , and e.  wasil .",
    ", volume  47 of _ research / computer science interfaces _ ,",
    "pages 121146 .",
    "springer , new york , ny , 2009 .",
    "s.  martello and d.  vigo . exact solution of the two - dimensional finite bin packing problem .",
    ", 44(3):388399 , 1998 .    m.  monaci and p.  toth . a set - covering - based heuristic approach for bin - packing problems",
    ". , 18(1):7185 , 2006 .",
    "f.  parreo , r.  alvarez - valdes , j.  f. oliveira , and j.  m. tamarit .",
    "a hybrid grasp / vnd algorithm for two- and three - dimensional bin packing .",
    ", 179(1):203220 , 2010 .",
    "d.  pisinger and m.  sigurd . using decomposition techniques and constraint programming for solving the two - dimensional bin - packing problem .",
    ", 19(1):3651 , 2007 .",
    "j.  puchinger and g.  raidl .",
    "models and algorithms for three - stage two - dimensional bin packing . , 183(3):13041327 , 2007 .",
    "p.  e. sweeney and e.  r. paternoster .",
    "cutting and packing problems : a categorized , application - orientated research bibliography .",
    ", 43(7):691706 , 1992 .",
    "l.  wong and l.  s. lee .",
    "heuristic placement routines for two - dimensional bin packing problem . , 5(4):334341 , 2009 .",
    "this appendix contains 10 tables , one for the 50 problem instances of each instance class .",
    "each table provides the results of ms - lgfi and ea - lgfi for each instance .",
    "the structure of the tables is as follows .",
    "the first column contains the number of items .",
    "the second column provides the instance number ( numbered from 1 to 500 ) .",
    "the next two columns contain information about the currently best known lower and upper bound values for each instance .",
    "finally , the results of ms - lgfi , as well as the results of ea - lgfi , are presented in three columns .",
    "the first one of these three columns ( with heading * res * ) provides the number of bins used in the best found solution . in case a value in this column",
    "is shown with a gray background , the upper bound for the corresponding problem instances was improved . on the other side , in case a value is shown within a frame of white background , the best known upper bound for the corresponding instance was not reached . the second column ( with heading * eval * )",
    "indicates after how many solution evaluations the best solution was found , while the third column ( with heading * time * ) provides the computation time ( in seconds ) after which the best solution was found ."
  ],
  "abstract_text": [
    "<S> two - dimensional bin packing problems are highly relevant combinatorial optimization problems . </S>",
    "<S> they find a large number of applications , for example , in the context of transportation or warehousing , and for the cutting of different materials such as glass , wood or metal . in this work we deal with the oriented two - dimensional bin packing problem under free guillotine cutting . in this specific problem a set of oriented rectangular items is given which must be packed into a minimum number of bins of equal size . </S>",
    "<S> the first algorithm proposed in this work is a randomized multi - start version of a constructive one - pass heuristic from the literature . </S>",
    "<S> additionally we propose the use of this randomized one - pass heuristic within an evolutionary algorithm . </S>",
    "<S> the results of the two proposed algorithms are compared to the best approaches from the literature . </S>",
    "<S> in particular the evolutionary algorithm compares very favorably to current state - of - the - art approaches . </S>",
    "<S> the optimal solution for 4 previously unsolved instances could be found . </S>"
  ]
}