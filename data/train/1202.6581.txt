{
  "article_text": [
    "lemmings is a popular computer game originally developed by dma design for pc and commodore amiga . since its first release in 1991 , by psygnosis",
    ", several ports , sequels and imitations have appeared , for various systems .",
    "the game revolves around the behavior of some creatures called _",
    "lemmings _ , which deterministically walk across a landscape , turning around at walls , and blindly falling into pitfalls or drowning in water .",
    "the player s goal is to guide the highest number of lemmings through the landscape , from their respective _ entrance locations _ to any _ exit location _",
    ", within a certain amount of time .",
    "to do so , the player has an arsenal of _ skills _ that he can individually assign to lemmings , in order to modify their behavior in different ways , and hopefully prevent them from perishing .",
    "because the number of available skills is limited , and most skills have just a temporary effect , the player must carefully plan his strategy , which makes lemmings a challenging puzzle game , especially at higher levels .",
    "in this paper we study the computational complexity of the optimization problem of saving the highest number of lemmings in a given level of the game , contributing to a fast - growing branch of research delightfully surveyed in @xcite .    in  @xcite ,",
    "mccarthy first studied the game of lemmings as an archetypical model for the logical approach to ai , attempting a formalization of the game using situation calculus , and discussing the features that make lemmings a challenge to both experimental and theoretical ai .",
    "spoerer later used genetic algorithms to generate successful solutions for a severely simplified version of lemmings  @xcite .    in  @xcite",
    ", cormode established several complexity results related to another simplified version of lemmings . in cormode s model",
    ", the landscape contains no _ deadly areas _ such as water , lava or traps , the player can assign skills to several different lemmings at the same time instant , and the time limit to complete each level is bounded by a polynomial in the size of the level itself .",
    "cormode s paper shows the * np*-completeness of deciding if a level of such game is solvable , even when only a single lemming is present , and only digger skills are available .",
    "it is further shown that , if only floater and climber skills are available , then solvability is decidable in .",
    "the rationale behind cormode s assumption on the time limit is the claim that any level of lemmings is either unsolvable or solvable within a polynomial amount of time .",
    "later , in  @xcite , foriek disproved such claim by constructing a class of levels whose solutions involve waiting an exponentially long time for certain configurations to occur , hence suggesting that the full lemmings game may fail to be in * np*. both cormode and foriek conjectured that lemmings , with no restrictions , is * pspace*-complete .",
    "cormode also asked for the computational complexity of classes of game instances with different combinations of initially available skills .",
    "recently , in  @xcite , the author gave an independent * np*-hardness proof that works for instances with only basher skills , and observed that a similar argument can be extended to instances with only miner skills .",
    "[ [ our - contribution . ] ] * _ our contribution . _",
    "* + + + + + + + + + + + + + + + + + + + + +    in section  [ s2 ] we define lemmings , the optimization problem of maximizing the number of saved lemmings in a given level .",
    "the novelty of our approach is that we do not aim at studying a simplified or conveniently modified version of the game , but our model incorporates every aspect and feature of the original lemmings game developed by dma design , including the known glitches  @xcite .",
    "( the only , obvious , exception is that we allow arbitrarily large levels with arbitrarily many _",
    "objects_. )    in section  [ s3 ] and section  [ s4 ] we argue that what separates the easier levels of lemmingsfrom the harder ones is the number of available builder skills .",
    "if it is exponential in the size of the level ( or _ unlimited _ ) , then we are able to construct a * pspace*-complete class of instances with the bonus feature of having only one lemming each .",
    "conversely , we show that the class of lemmingsinstances with only polynomially many available builder skills belongs to * npo*. we thus provide an adequate answer to the open problem of cormode and foriek on the complexity of the full lemmings game .    in section  [ s5 ]",
    "we discuss the restriction of lemmingsto instances with only climber skills , and we give a proof of its * apx*-hardness , which also implies that computing approximate solutions with a relative error lower than @xmath0 is * np*-hard . combined with cormode s results , this suggests that what makes levels with only climber skills hard is the presence of _ traps _ in the landscape .",
    "all our constructions have been tested with the dos version of the original lemmings game , and can be downloaded as a _ level pack _ at http://www.di.unipi.it/~vigliett/files/lemmings/level000.dat .",
    "we model lemmingsas an optimization problem ( refer to  @xcite ) whose instances are _ levels _ of the form @xmath1 .    [",
    "[ time . ] ] * _ time . _ * + + + + + + + + +    in lemmings , time is discretized and subdivided into _ time units_. accordingly , in each level of lemmings , _ time _ is the amount of time units that the player has to achieve his goal of saving as many lemmings as possible .",
    "the value of _ time _ is assumed to be at most exponential in the size of the landscape ( see below ) , or _",
    "unlimited_.    [ [ landscape . ] ] * _ landscape .",
    "_ * + + + + + + + + + + + + + +    _ terrain _ , _ steel _ and _ objects _ collectively define the _ landscape _ of the level :    * _ terrain _ is a rectangular array of _ cells _",
    ", each of which is the size of a pixel and can be _ empty _ or _",
    "solid_. informally , this is a bitmap containing the shape of the landscape : lemmings can freely walk across empty cells , but are stopped by solid cells .",
    "it is convenient to consider _ terrain _ as ( logically ) partitioned into @xmath2 _ blocks_. * _ steel _ is a rectangular array that tells whether each _ terrain _ block is made of steel or is permeable .",
    "it may be viewed as a block - aligned mask that is overlaid on _ terrain _ , and is used to check if solid _ terrain _",
    "cells may be excavated by bombers , bashers , miners or diggers ( see below ) .",
    "notice that each _ terrain _",
    "block is either entirely made of steel or entirely permeable , regardless of the amount of solid cells that it actually contains . *",
    "_ objects _ is an array ( of length polynomial in the size of _ terrain _ ) whose elements have a _ position _ within the landscape , a _ trigger area _ , a _ type _ , and an optional _ parameter _ ( whose value is bounded by a polynomial ) .",
    "like steel masks , trigger areas are block - aligned bitmaps that are overlaid on _",
    "terrain_. there are four types of objects : * * _ entrance_. each lemming enters the level through an entrance ( see below ) . * * _ exit_. a lemming reaching the trigger area of an exit is rescued and is removed from the game .",
    "there may be several exits in the same level .",
    "* * _ deadly zone_. a lemming lying in the trigger area of a deadly zone instantly dies and is removed from the game .",
    "however , after a deadly zone has killed a lemming , it remains harmless for @xmath3 time units , where @xmath3 is the object s parameter , and then it becomes deadly again . during that window of @xmath3 time units , lemmings can safely traverse its trigger area .",
    "deadly zones with @xmath4 are represented in lemmings as traps , such as presses , gallows poles and electrocuting devices ; deadly zones with @xmath5 are represented as water or lava . * * _ one - way wall_. the _ terrain _ cells underlying its trigger area are perceived as permeable by bashers and miners going in one direction , and made of steel by bashers and miners going in the opposite direction ( see below ) .",
    "notice that both _ steel _ and the trigger areas of objects have a coarser resolution than _ terrain _ , due to the file format that lemmings uses to store levels .",
    "this will add an extra challenge to the design of our gadgets .",
    "[ [ lemmings . ] ] * _ lemmings . _ * + + + + + + + + + + + + +    the _ lemmings _ parameter of a level is the total amount of lemmings that the level contains ( which is assumed to be bounded by a polynomial in the size of _ terrain _ ) .",
    "lemmings enter the game one at a time , at a frequency given by the parameter _",
    "rate_. if several entrances are present , they release lemmings in turns , following a circular order ( determined by their position in the _ objects _ array ) .    upon entering the land , each lemming is facing right , and",
    "is normally a _ faller _ , which falls vertically through empty _",
    "cells due to gravity , until it lands on a solid cell .",
    "then it becomes a _ walker _ , which keeps walking straight ( in the direction it is facing ) as long as it can . in lemmings ,",
    "the sprite of a lemming is between nine and ten pixels high , depending on the animation frame .",
    "however , only one cell matters for collision detection with the landscape , which is the lemming s _ pin_. the pin is located one cell below the lemming s feet , and its exact position varies depending on the animation frame and the direction the lemming is facing .    on flat ground , a walker s pin moves forward by eight cells every four time units . between time units ,",
    "the collision detection algorithm first moves the walker s pin forward by one cell , no matter if it is solid or empty . then _",
    "cells are checked to determine the lemming s behavior .",
    "if the pin has reached a solid cell , then the cells above are also checked .",
    "if the lowest empty cell is eight cells above the pin or higher , then the slope is too high and the walker reverses its direction .",
    "otherwise , the pin jumps above by at most two cells , and then goes further up by one cell per time unit , until the top is reached .",
    "otherwise , if the pin has reached an empty cell , the lemming falls down until it reaches a solid cell again . on the first time unit , the pin s position instantly drops by at most four cells .",
    "if a solid cell has not been reached yet , then the lemming becomes a faller and its pin gradually moves down , by at most two cells per time unit . if the fall is longer than 63 cells ( or crosses the bottom of _ terrain _",
    ") , the lemming dies and is removed from the game .    depending on the walker s animation frame",
    ", the above procedure may be repeated between one and three times per time unit ( on almost flat ground ) .",
    "figure  [ f1a ] illustrates an example , in which dots represent the final positions of the lemming s pin each time the collision detection algorithm is executed .    [",
    "[ skills . ] ] * _ skills . _ * + + + + + + + + + + +    finally , the level parameter _ skills _ is an array containing the number of skills that the player can assign to lemmings , by clicking on them .",
    "if several lemmings lie under the cursor at the same time , the skill is assigned only to the lemming that entered the level more recently .",
    "( similarly , if several lemmings enter the trigger area of a trap at the same time unit , the younger lemming is killed . ) at most one skill can be assigned per time unit .",
    "we will assume that all skill quantities are bounded by an exponential in the size of _ terrain _ , or _",
    "unlimited_. the skills are :    * _ climber_. a permanent skill that makes a lemming climb vertical rows of more than six solid cells , at an average speed of one cell every two time units , instead of turning around like a walker .",
    "as soon as a climber reaches the top of a wall , it starts behaving like a walker again .",
    "if it hits a ceiling while it is climbing , it turns around and falls back down . *",
    "_ floater_. a permanent skill that makes a lemming survive falls of any height . floaters also fall slower than fallers . *",
    "_ bomber_. makes a lemming explode after a short amount of time units .",
    "a bomber keeps behaving normally until it actually blows up , also turning the surrounding _ terrain _ cells from solid to empty , provided that the bomber s pin lies on a permeable cell .",
    "* _ blocker_. makes a lemming stand in place and act as a wall for the other lemmings .",
    "climbers can not climb on blockers . *",
    "_ builder_. makes a lemming construct a stairway by turning empty _ terrain _",
    "cells into solid ones .",
    "each step of the stairway is six cells wide and one cell high , and is laid on top of the builder s pin , as figure  [ f1b ] indicates .",
    "then three _ test cells _ , represented as asterisks in the figure , are checked for solidity .",
    "if all of them are empty , the builder s pin is moved one cell up and two cells forward , and a new step is laid .",
    "otherwise , the builder turns around and becomes a walker . after dropping 12 bricks ,",
    "a builder becomes a walker anyway , and proceeds forward as usual .",
    "* _ basher_. makes a lemming dig a horizontal hole in the direction it is facing , by turning solid _ terrain _",
    "cells into empty cells . upon assignment of the skill , the lemming checks the _ test cell _ marked by an asterisk in figure  [ f1c ] .",
    "if it is permeable ( no matter if it is solid or not ) , the lemming becomes a basher and makes a hole shaped like the dashed area .",
    "it then proceeds digging forward at five cells per _ stroke _ , until it encounters a steel cell or an empty cell , and becomes a walker again . *",
    "_ miner_. similar to basher , but a miner digs diagonally . * _ digger_. similar to basher , but a digger digs vertically .",
    "builders , bashers , miners , and diggers can be interrupted by the player at any time by assigning them a different skill ( that is not a climber or a floater skill ) .",
    "blockers can be interrupted only by digging the solid _ terrain _ cell on which they stand , or by killing them with a bomber skill .",
    "we remark that assigning a basher skill to a walker that is not facing a wall will make it stroke once , with no effect other than delaying its walk for a couple of time units .",
    "let @xmath6be the restriction of lemmingsto instances whose number of initially available builder skills is bounded by a polynomial in the size of the landscape .",
    "we will show that @xmath6is in * npo * , as defined in  @xcite .",
    "while the _ measure function _ of both lemmingsand @xmath6is obviously the number of lemmings that the player saves within the time limit , the set of _ feasible solutions _ of an instance begs for a careful definition .",
    "a player s _ move _ is the assignment of a certain skill to a certain lemming at a certain time .",
    "recall that at most one move can be done per time unit , and that , if several lemming pins share the same cell at the same time , only the youngest of those lemmings may be assigned a skill at that time .",
    "a _ feasible solution _ of lemmingsis then a finite sequence of moves that are compatible with each other and with the given amount of available skills . however , in order to prove our claim ( and complete the definition of @xmath6 )",
    ", we need to isolate a meaningful subset of polynomial - size feasible solutions .",
    "[ l1 ] if an instance of @xmath6 , viewed as an instance of lemmings , has a solution that saves @xmath3 lemmings , then it has a polynomial - size solution that also saves @xmath3 lemmings .",
    "recall that the total number of lemmings is polynomial in the number of _ terrain _ cells .",
    "it follows that permanent skills , i.e. , climber and floater skills , can be assigned only polynomially many times , and therefore involve a polynomial number of moves .",
    "the same holds , for obvious reasons , also for bomber skills .",
    "observe that miner and digger skills can be assigned only to lemmings that can effectively dig some solid cells . because the initial number of these cells is polynomial , and each cell can be restored at most once per available builder , it follows that miner and digger skills involve at most a polynomial number of moves .",
    "blocker skills can also be assigned polynomially many times , because a blocker can be interrupted only by killing it with a bomber skill , or by digging the terrain on which it stands .    as for basher skills , a similar reasoning holds , except that these skills can be assigned also ineffectively , i.e. , not to dig some terrain , but to delay a walker for a couple of time units ( refer to section  [ s2 ] ) .",
    "it follows that _ terrain _ may change only at polynomially many time units .",
    "let @xmath7 $ ] be a maximal timespan during which _ terrain _ does not change , no lemming dies , exactly @xmath8 basher skills are assigned , and no other skill is assigned .",
    "we will show that the _ combined configuration _ @xmath9 of all the lemmings at time @xmath10 can be obtained at most exponentially many time units after @xmath11 ( however , not after @xmath10 ) by assigning a number of basher skills that is bounded by a polynomial and does not exceed @xmath8 .",
    "observe that each lemming follows a polynomially long periodic path during @xmath7 $ ] , and that there is at most an exponential amount of combined configurations of all lemmings .",
    "suppose that @xmath12 basher skills are assigned to lemming @xmath13 in @xmath7 $ ] . in order to offset @xmath13 s phase within its own period by any desired amount , just polynomially",
    "many basher skills are sufficient , and may be assigned at any time .",
    "thus , without loss of generality , we can assign @xmath13 the correct amount of basher skills ( which is polynomially bounded and does not exceed @xmath14 ) during the first available time units , and then do the same for the other lemmings .",
    "any feasible combined position of all lemmings , including @xmath9 , can therefore be reached by using polynomially many basher skills ( however , not more than @xmath8 ) and then waiting for an exponentially long time ( however , not beyond @xmath10 ) .",
    "concluding , the overall number of moves can be bounded by a polynomial not exceeding the initial amount of skills , and each move is performed at a time unit that is bounded by an exponential ( which can be represented with polynomially many digits ) , even if the available time is unlimited .    as a consequence",
    ", we may safely restrict the set of feasible solutions of @xmath6to those made of polynomially many moves , each with a _ timestamp _",
    "whose value is at most exponential .",
    "this completes the definition of @xmath6 .",
    "[ t1 ] @xmath6belongs to * npo*.    it is easy to verify if a given polynomially long sequence of moves is a feasible solution , and compute the number of saved lemmings , in polynomial time . indeed , the polynomially many transitions between time units in which moves are made , or _ terrain _ changes , or some lemming dies can be simulated in polynomial time , because each transition involves a constant number of operations and tests for each lemming .",
    "the remaining time intervals are polynomially many and may be exponentially long . each of these is handled by computing each lemming s periodic path independently , and dividing the whole time interval by that period , to efficiently compute the lemming s final position ( with no need of explicitly simulating exponentially many transitions ) .",
    "the decision version of lemmings , restricted to levels with polynomially many builder skills , belongs to * np*.    by theorem  [ t1 ] and  ( * ? ? ?",
    "* theorem  1.1 ) , @xmath6is in * np*as a decision problem .",
    "the claim then follows from the definition of @xmath6and from lemma  [ l1 ] .",
    "next we show that there are classes of levels of lemmingsthat are * pspace*-hard . due to theorem  [ t1 ] , it comes as no surprise that such levels have exponentially many ( or unlimited ) available builder skills .",
    "[ t2 ] lemmingsis * pspace*-complete , even restricted to levels with only one lemming , and only builder and basher skills .",
    "membership in * npspace*of lemmingsis obvious , because each game configuration can be stored in polynomial space , and the configuration graph can be efficiently navigated .",
    "membership in * pspace*thus follows from savitch s theorem ( see  @xcite ) .    as for * pspace*-hardness",
    ", we apply  ( * ? ? ?",
    "* metatheorem  2.c ) , which is based on a reduction from quantified boolean formulainvolving a player - controlled _ avatar _ , a _ starting location _ , an _ exit location _",
    ", several _ paths _ , _ pressure plates _ and _ doors_. in our implementation , the only lemming in the level will be the avatar , which will be controlled by the player via the assignment of builder and basher skills at very specific locations . unless stated otherwise , each cell in the level",
    "is made of steel .",
    "figure  [ f2 ] shows how paths are implemented .",
    "white space denotes empty _ terrain _ cells , shaded space denotes solid cells , and each large crossed square represents a @xmath2 block containing the trigger area of a deadly zone .",
    "black dots mark the positions occupied by the lemming s pin as paths are traversed following the arrows .",
    "observe that no basher skill can be assigned in a path because every cell is made of steel , and no builder skill can be assigned without killing the lemming , due to the deadly zones .",
    "there is no need to implement a way of letting the avatar reverse its direction in the middle of a path , because this is not necessary to solve the levels constructed in the proof of  ( * ? ? ?",
    "* metatheorem  2.c ) .",
    "it is easy to see that any directed graph can be embedded in the plane by suitably arranging copies of the four gadgets in figure  [ f2 ] and their vertically symmetric equivalents , provided that _",
    "forks _ are implemented .",
    "this is done with the _ selector gadget _ in figure  [ f3a ] .",
    "the lemming enters from the left , and then the player may redirect it to any of the three exits on the right .",
    "each @xmath2 square with gray parallel lines is a permeable block , positioned in such a way that a builder can lay a single step of a stairway ( indicated by a dashed rectangle in figure  [ f3a ] ) , climb on it , and then immediately become a basher to stop building further steps and proceed to the right as a walker . moreover , if a step is already present when the lemming arrives , it can be removed by assigning a basher skill right before the lemming climbs on it .",
    "this will cause the lemming to excavate precisely the 6-cell step with one stroke ( refer to figure  [ f1c ] ) and then fall down .",
    "any other way of assigning skills is either ineffective , or deadly , or prevents lower areas to be reached ( which never helps the lemming reach its final goal ) .    finally , we need doors , which are areas that can be traversed by the avatar if and only if they are _",
    "open_. for each door , there are exactly two pressure plates located somewhere in the level , which open and close the door , respectively .",
    "pressure plates are activated whenever the avatar traverses them , but we observe that the proof of  ( * ? ? ?",
    "* metatheorem  2.c ) keeps working even if the pressure plates that open doors are implemented as _",
    "switches _ ,",
    "i.e. , the avatar is not forced to activate them upon traversal , but may or may not do it , at the player s will .",
    "indeed , opening a door has the only effect of extending the set of locations that can be reached by the avatar , so it is never wrong to do it as soon as possible .",
    "our _ door gadget _ is depicted in figure  [ f3b ] , where the door is considered open if and only if the central dashed rectangle is made of empty cells .",
    "a pressure plate is implemented indirectly , as a path that starts from the location that should contain it , reaches the corresponding door gadget from the proper direction , and then leads back to where it started .",
    "the two locations marked with a letter a ( respectively , b ) are connected to the pressure plate that closes ( respectively , opens ) the door .",
    "if the lemming is coming from a and the door is open , then it must construct a stairway step , thus closing the door , and then stop immediately , using a basher skill , in order to proceed to the right without hitting the ceiling and turning around ( refer to figure  [ f1b ] ) . if it does anything different , it is bound to enter some deadly zone and perish . in particular , it is straightforward to see that if it tries to build an additional stairway step when the door is already closed , then it can not become a basher because the permeable block is too low , so it eventually hits the ceiling , turns left and dies in the deadly zones no matter what it does .",
    "if the lemming is coming from b , then it can open the door with a basher skill , right before falling down , thanks to the permeable block on the left .",
    "if it ever becomes a builder , then it is bound to die in a few time units , as it can be easily verified .",
    "when the lemming actually attempts to cross the door , it enters from the arrow marked with a letter c , and survives if and only if the door is open .",
    "again , becoming a builder at any time would kill it , no matter what it does next .",
    "this completes the construction .",
    "it is clear , also referring to the proof of  ( * ? ? ?",
    "* metatheorem  2.c ) , that each of these levels is either unsolvable with any amount of builder and basher skills , or solvable with exponentially many of them .",
    "here we consider @xmath15 , the restriction of lemmingsto instances with only climber skills . by theorem  [ t1 ] ,",
    "@xmath15belongs to * npo * , while its further restriction to levels with no deadly zones belongs to * po * , due to  ( * ? ? ?",
    "* theorem  2 ) .",
    "we now show that the presence of deadly zones makes @xmath15*apx*-hard , and thus not in * po * , unless @xmath16 ( see  @xcite ) .",
    "we give an l - reduction from the * apx*-complete problem max-3-sat(refer to  @xcite ) , in which the number of satisfied clauses of a 3-cnf boolean formula has to be maximized .",
    "we need _ variable gadgets _ and _ clause gadgets _ ,",
    "both depicted in figure  [ f4 ] , wired together with the paths of figure  [ f2 ] , which have the same properties highlighted in the proof of theorem  [ t2 ] , no matter if several lemmings traverse them simultaneously , and some of them are climbers .      referring to figure  [ f4a ] , a gadget for variable @xmath17 is made of several _ layers _ , each containing an entrance for exactly one lemming ( vertical arrows ) .",
    "there are @xmath18 layers , where @xmath3 is the number of occurrences of @xmath17 in the formula .",
    "all lemmings are initially confined in a small area , until the player decides to make them escape , either from the left or from the right , by assigning them a climber skill at the correct time .",
    "all lemmings exiting from the same side eventually reach a common path , on which a row of @xmath19 traps is found ( not shown in figure  [ f4a ] ) , each with a parameter of eight time units . because each trap kills at least one lemming upon traversal , no two lemmings can exit the gadget from different sides and survive .",
    "the way to guarantee that @xmath3 lemmings may indeed safely exit the gadget ( all from the same side ) is to synchronize them by delaying those on lower layers , via a series of 3-cell _ bumps_. each bump delays a walker by exactly one time unit , so that the pins of all the @xmath18 lemmings will eventually lie within three cells from each other ( depending on their animation frames ) , and exactly one lemming will be killed by each of the @xmath19 traps .",
    "so , the truth value of @xmath17 will be encoded by the side from which @xmath3 ( or fewer ) lemmings exit the corresponding gadget . after coming out of the true ( respectively , false ) side of the variable gadget ,",
    "the group of lemmings traverses , one by one , all the clause gadgets containing a positive ( respectively , negative ) occurrence of @xmath17 .",
    "the group then reaches a pool of water , so that any remaining lemming is killed .",
    "figure  [ f4b ] shows a gadget for clause @xmath20 , in which a single lemming , entering from the top ( arrow with letter a ) , is bound to walk in a loop until the player assigns it a climber skill and makes it escape from one of three exits , each corresponding to a literal of the clause .",
    "after each exit , a trap is encountered ( only shown for literal @xmath21 in figure  [ f4b ] ) , and then a path safely leads to a level exit ( arrow with letter c ) .",
    "the same trap is also traversed , in the opposite direction , by a path coming from the variable corresponding to that literal ( arrows with letter b ) , in such a way that the clause lemming can be saved by the group of variable lemmings if and only if the literal is true according to the chosen assignment . in order to guarantee synchronization and make sure that the trap is reached by the head of the group of variable lemmings just a couple of time units before the upcoming clause lemming , a series of bumps",
    "is added to path b slightly before the gadget is reached . indeed , notice that all the clause gadgets have the same shape and size , so each clause lemming will complete its loop in a constant number of time units , say @xmath22 .",
    "hence , each clause lemming will have a chance of exiting the gadget from each of the three exits exactly once every @xmath22 time units , and therefore it is sufficient to add at most @xmath23 bumps to each path entering a clause gadget to enforce synchronization .",
    "clearly , only the clause lemmings can be possibly saved in these levels , and each of them may indeed be saved if and only if at least one literal of its clause gadget is true according to the assignment encoded by the corresponding variable lemmings .",
    "therefore , the reduction preserves the optimal value , and any solution that saves @xmath24 lemmings in one of these levels can be trivially converted into a variable assignment that satisfies exactly @xmath24 clauses of the corresponding boolean formula . as a consequence , this is an l - reduction .",
    "e.  d. demaine and r.  a. hearn .",
    "playing games with algorithms : algorithmic combinatorial game theory .",
    "in _ games of no chance 3 _ , edited by m.  h. albert and r.  j. nowakowski , msri publications , 56:356 , 2009 ."
  ],
  "abstract_text": [
    "<S> lemmings is a computer puzzle game developed by dma design and published by psygnosis in 1991 , in which the player has to guide a tribe of lemming creatures to safety through a hazardous landscape , by assigning them specific skills that modify their behavior in different ways . in this paper </S>",
    "<S> we study the optimization problem of saving the highest number of lemmings in a given landscape with a given number of available skills .    </S>",
    "<S> we prove that , if the number of builder skills is bounded by a polynomial in the size of the landscape , then the maximization problem belongs to * npo*. we also show that , with no such restriction , the game is * pspace*-complete , even if there is only one lemming to save . </S>",
    "<S> we thereby settle an open problem posed by cormode in 2004 , and again by foriek in 2010 .    </S>",
    "<S> furthermore , we show that saving the maximum number of lemmings is * apx*-hard , even when only climber skills are available . </S>",
    "<S> this contrasts with the membership in * po*of the same optimization problem restricted to landscapes with no deadly areas ( such as water or traps ) and only climber and floater skills , as previously established by cormode . </S>"
  ]
}