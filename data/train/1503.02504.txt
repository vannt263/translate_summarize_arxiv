{
  "article_text": [
    "i would like to thank dr .",
    "david b. penman for his meticulous advise and guidance , as i pursued this work .",
    "our fruitful conversations helped me to clearly express my ideas in this thesis .",
    "thanks are also due to dr .",
    "gerald williams for his comments and suggestions during board meetings .",
    "i dedicate this work to my family . without their support",
    ", i would nt be able to carry out and accomplish my research .",
    "the first chapter serves as an introduction to this work , where in a simple manner , useful notions of algorithmic analysis in general are presented , along with definitions that will be used throughout the thesis .",
    "we present an introduction to quicksort and this chapter ends with an outline and a summary of the main contributions of this thesis .",
    "an algorithm is a valuable tool for solving computational problems .",
    "it is a well defined procedure that takes some value or a set of values as input and is guaranteed to produce an answer in finite time .",
    "see e.g. @xcite",
    ". however the time taken may be impractically long .    as a useful introduction",
    ", we present a simple and intuitive algorithm known as euclid s algorithm which is still used today to determine the greatest common divisor of two integers .",
    "its definition follows @xcite :    given two integers @xmath0 greater than unity , we want to find their greatest common divisor , g.c.d.(a , c ) .    1 .",
    "if c divides a , then the algorithm terminates with c as the greatest common divisor .",
    "2 .   if @xmath1 is equal to unity , the numbers are either prime or relatively prime and the algorithm terminates . otherwise set @xmath2 , @xmath3 and return to step @xmath4 .    by @xmath1",
    ", we denote the remainder of the division of @xmath5 by @xmath6 , namely @xmath7 which is between @xmath8 and @xmath9 . here",
    "the floor function @xmath10 of a real number @xmath11 is the largest integer less than or equal to @xmath11 .",
    "we observe that this algorithm operates recursively by successive divisions , until obtaining remainder equal to @xmath8 or to @xmath4 .",
    "since the remainder strictly reduces at each stage , the process is finite and eventually terminates .",
    "two main issues in relation to an algorithm are its running time or time complexity , which is the amount of time necessary to solve the problem , and its space complexity , which is the amount of memory needed for the execution of the algorithm in a computer . in case of euclid s algorithm ,",
    "@xmath12 locations of memory are required for storing the integer numbers @xmath5 , @xmath6 and @xmath1 . in this thesis",
    ", we will mainly be concerned with time complexity .",
    "the aim is usually to relate the time complexity to some measure of the size of the instance of the problem we are considering .",
    "very often we are particularly concerned with what happens when the size @xmath13 is large  tending to infinity .",
    "the notations @xmath14 , @xmath15 , @xmath16 and @xmath17 , @xmath18 are useful in this context .      in this section ,",
    "we present primary definitions to the analysis presented in the thesis .",
    "these definitions come from @xcite , @xcite .",
    "let @xmath19 and @xmath20 be two functions with @xmath21 .",
    "we say that @xmath22 if and only if there exists a constant @xmath23 and @xmath24 , such that @xmath25 , @xmath26 .",
    "also , we say that @xmath27 if and only if there exists a constant @xmath28 and @xmath24 , such that @xmath29 , @xmath26 .",
    "furthermore , we say that @xmath30 if and only if there exist positive constants @xmath31 , @xmath32 and @xmath24 , such that @xmath33 , @xmath26 .",
    "equivalently , we can state that if @xmath34 and @xmath35 , then @xmath36 .",
    "we will also use the notations @xmath17 , @xmath18 .",
    "they provide the same kind of limiting bounds with the respective upper case notations .",
    "the difference is that for two functions @xmath19 and @xmath20 , the upper case notation holds when it does exist some positive constant @xmath37 . whereas , the respective lower case notation is true for every positive constant @xmath37 @xcite . in other words , @xmath17 is stronger statement than @xmath14 , since @xmath38 implies that @xmath39 is dominated by @xmath40 .",
    "equivalently , this can be stated as @xmath41 provided that @xmath20 is non - zero .",
    "the relation @xmath42 implies that @xmath39 dominates @xmath40 , i.e. @xmath43 the relation @xmath44 denotes the fact that @xmath19 and @xmath20 are asymptotically equivalent , i.e. @xmath45 further , best , worst and average case performance denote the resource usage , e.g. amount of memory in computer or running time , of a given algorithm at least , at most and on average , respectively . in other words ,",
    "these terms describe the behaviour of an algorithm under optimal circumstances ( e.g. best  case scenario ) , worst circumstances and on average @xcite . in this work",
    ", the study will be concentrated on the average and worst case performance of quicksort and its variants .    in our analysis",
    ", we will frequently come across with harmonic numbers , whose definition we now present .",
    "the sum @xmath46 is defined to be the generalised @xmath47 harmonic number of order @xmath48 .",
    "when @xmath49 , the sum denotes the @xmath47 harmonic number , which we simply write @xmath50 .",
    "we define also @xmath51 .",
    "there are numerous interesting properties of harmonic numbers , which are not yet fully investigated and understood .",
    "harmonic series have links with stirling numbers @xcite and arise frequently in the analysis of algorithms .",
    "for @xmath13 large , it is well - known that @xcite , @xmath52 where @xmath53 is the euler  mascheroni constant",
    ". we will use this often , especially in the form @xmath54 .",
    "note that throughout this thesis , we shall adopt the convention of writing explicitly the base of logarithms .",
    "for example , the natural logarithm of @xmath13 is denoted by @xmath55 , instead of @xmath56 .",
    "also , the end of a proof will be denoted by the symbol     ' '' ''    .      sorting an array of items is clearly a fundamental problem , directly linked to efficient searching with numerous applications .",
    "the problem is that given an array of keys , we want to rearrange these in non - decreasing order .",
    "note that the order may be numerical , alphabetical or any other transitive relation defined on the keys @xcite . in this work ,",
    "the analysis deals with numerical order , where the keys are decimal numbers and we particularly focus on quicksort algorithm and variants of it .",
    "quicksort was invented by c. a. r. hoare @xcite .",
    "here is the detailed definition .",
    "+   the steps taken by the quicksort algorithm are :    1 .",
    "choose an element from the array , called pivot .",
    "2 .   rearrange the array by comparing every element to the pivot , so all elements smaller than or equal to the pivot come before the pivot and all elements greater than or equal to the pivot come after the pivot .",
    "recursively apply steps @xmath4 and @xmath57 to the subarray of the elements smaller than or equal to the pivot and to the subarray of the elements greater than or equal to the pivot .",
    "note that the original problem is divided into smaller ones , with ( initially ) two subarrays , the keys smaller than the pivot , and those bigger than it .",
    "then recursively these are divided into smaller subarrays by further pivoting , until we get trivially sorted subarrays , which contain one or no elements .",
    "given an array of @xmath13 distinct keys @xmath58 that we want to quick sort , with all the @xmath59 permutations equally likely , the aim is to finding the unique permutation out of all the @xmath59 possible , such that the keys are in increasing order .",
    "the essence of quicksort is the partition operation , where by a series of pairwise comparisons , the pivot is brought to its final place , with smaller elements on its left and greater elements to the right .",
    "elements equal to pivot can be on either or both sides .",
    "as we shall see , there are numerous partitioning schemes , and while the details of them are not central to this thesis , we should describe the basic ideas . a straightforward and natural way",
    "( see e.g. @xcite ) uses two pointers  a left pointer , initially at the left end of the array and a right pointer , initially at the right end of the array .",
    "we pick the leftmost element of the array as pivot and the right pointer scans from the right end of the array for a key less than the pivot .",
    "if it finds such a key , the pivot is swapped with that key .",
    "then , the left pointer is increased by one and starts its scan , searching for a key greater than the pivot : if such a key is found , again the pivot is exchanged with it .",
    "when the pointers are crossed , the pivot by repeated exchanges will `` float '' to its final position and the keys which are on its left are smaller and keys on its right are greater .",
    "the data movement of this scheme is quite large , since the pivot is swapped with the other elements .",
    "a different partitioning scheme , described in @xcite is the following .",
    "two pointers @xmath60 ( the left pointer , initially @xmath4 ) and @xmath61 ( the right pointer , initially @xmath13 ) are set and a key is arbitrarily chosen as pivot .",
    "the left pointer goes to the right until a key is found which is greater than the pivot . if one is found , its scan is stopped and the right pointer scans to the left until a key less than the pivot is found .",
    "if such a key is found , the right pointer stops and those two keys are exchanged .",
    "after the exchange , both pointers are stepped down one position and the lower one starts its scan .",
    "when pointers are crossed , i.e. when @xmath62 , the final exchange places the pivot in its final position , completing the partitioning .",
    "the number of comparisons required to partition an array of @xmath13 keys is at least @xmath63 and the expected number of exchanges is @xmath64 .",
    "a third partitioning routine , called lomuto s partition , is mentioned in @xcite  this involves exactly @xmath63 comparisons , which is clearly best possible , but the downside is the increased number of exchanges .",
    "the expected number of key exchanges of this scheme is @xmath65 , @xcite .",
    "we now consider the worst case and best case , analysis of quicksort .",
    "suppose we want to sort the following array , @xmath66 and we are very unlucky and our initial choice of pivot is the largest element @xmath67 .",
    "then of course we only divide and conquer in a rather trivial sense : every element is below the pivot , and it has taken us @xmath63 comparisons with @xmath67 to get here .",
    "suppose we now try again and are unlucky again , choosing @xmath68 as pivot this time .",
    "again the algorithm performs @xmath69 comparisons and we are left with everything less than @xmath68 . if we keep being unlucky in our choices of pivot , and keep choosing the largest element of what is left , after @xmath60 recursive calls the running time of the algorithm will be equal to @xmath70 comparisons , so the overall number of comparisons made is @xmath71 thus quicksort needs quadratic time to sort already sorted or reverse - sorted arrays if the choice of pivots is unfortunate .    if instead we always made good choices , choosing each pivot to be",
    "roughly in the middle of the array we are considering at present , then in the first round we make @xmath63 comparisons , then in the two subarrays of size about @xmath72 we make about @xmath72 comparisons , then in each of the four subarrays of size about @xmath73 we make @xmath73 comparisons , and so on .",
    "so we make about @xmath13 comparisons in total in each round",
    ". the number of rounds will be roughly @xmath74 as we are splitting the arrays into roughly equally - sized subarrays at each stage , and it will take @xmath74 recursions of this to get down to trivially sorted arrays .    thus , in this good case we will need @xmath75 comparisons .",
    "this is of course a rather informal argument , but does illustrate that the time complexity can be much smaller than the quadratic run - time in the worst case .",
    "this is already raising the question of what the typical time complexity will be : we address this in the next chapter .",
    "we briefly discuss the space complexity of the algorithm .",
    "there are @xmath13 memory locations occupied by the keys .",
    "moreover , the algorithm , due to its recursive nature , needs additional space for the storage of subarrays .",
    "the subarrays boundaries are saved on to a stack , which is a data structure providing temporary storage . at the end of the partition routine",
    ", the pivot is placed in its final position between two subarrays ( one of them possibly empty ) .",
    "recursively , the algorithm is applied to the smaller subarray and the other one is pushed on to stack . since , in best and average case of quicksort , we have @xmath76 recursive calls , the required stack space is @xmath76 locations in memory",
    ". however , in worst case the stack may require @xmath77 locations , if the algorithm is applied to the larger subarray and the smaller one is saved to the stack @xcite .",
    "this discussion makes it clear that the pivot selection plays a vital role in the performance of the algorithm .",
    "many authors have proposed various techniques to remedy this situation and to avoid worst case behaviour , see @xcite , @xcite , @xcite , @xcite , @xcite and @xcite .",
    "these include the random shuffling of the array prior to initialisation of the algorithm , choosing as pivot the median of the array , or the median of a random sample of keys .",
    "scowen in his paper @xcite , suggested choosing as pivot the middle element of the array : his variant is dubbed `` quickersort '' .",
    "using this rule for the choice of partitioning element , the aim is the splitting of the array into two halves of equal size .",
    "thus , in case where the array is nearly sorted , quadratic time is avoided but if the chosen pivot is the minimum or maximum key , the algorithm s running time attains its worst case and this variant does not offer any more than choosing the pivot randomly .",
    "singleton @xcite suggested a better estimate of the median , by selecting as pivot the median of leftmost , rightmost and middle keys of the input array .",
    "hoare @xcite suggested the pivot may be chosen as the median of a random sample from the keys to be sorted , but he did nt analyse this approach .",
    "one point is that quicksort is not always very fast at sorting small arrays .",
    "knuth @xcite presented and analysed a partitioning scheme , which takes @xmath78 instead of @xmath63 comparisons and the sorting of small subarrays ( usually from about 9 to 15 elements ) is implemented using insertion sort , since the recursive structure of quicksort is better suited to large arrays .",
    "insertion sort is a simple sorting algorithm , which gradually ` constructs ' a sorted array from left to right , in the following manner .",
    "the first two elements are compared and exchanged , in case that are not in order .",
    "then , the third element is compared with the element on its left . if it is greater , it is left at its initial location , otherwise is compared with the first element and accordingly is inserted to its position in the sorted array of 3 elements .",
    "this process is iteratively applied to the remaining elements , until the array is sorted .",
    "see as well in cormen _",
    "@xcite , for a description of the algorithm .",
    "this thesis consists of seven chapters and one appendix .",
    "after the first , introductory chapter , the rest of the thesis is organised as follows :    in * chapter 2 * , we consider the first and second moments of the number of comparisons made when pivots are chosen randomly .",
    "the result for the mean is known and easy : the result for the variance is known , but less easy to find a full proof of in the literature .",
    "we supply one .",
    "we briefly discuss the skewness of the number of comparisons and we study the asymptotic behaviour of the algorithm .    in *",
    "chapter 3 * , we analyse the idea of choosing the pivot as a centered statistic of a random sample of the keys to be sorted and we obtain the average number of comparisons required by these variants , showing that the running time can be greatly improved .",
    "moreover , we present relevant definitions of entropy .",
    "not much of this is original , but some details about why various differential equations that arise in the analysis have the solutions they do ( i.e. details about roots of indicial polynomials ) are not in literature .    in * chapter 4 * , we analyse extensions of quicksort , where multiple pivots are used for the partitioning of the array .",
    "the main contributions in this chapter are in sections * 4.1 * and * 4.2*. the results in the former section were published in the paper @xcite , where the expected costs related to the time complexity and the second moment of the number of comparisons are computed .",
    "the latter section contains the analysis of the generalisation of the algorithm .",
    "we study the general recurrence model , giving the expected cost of the variant , provided that the cost during partitioning is linear , with respect to the number of keys .",
    "we also present the application of vandermonde matrices for the computation of the constants involved to the cost of these variants .    in * chapter 5 * , various cases of partially ordered sets are discussed and the number of comparisons needed for the complete sorting is studied .",
    "the ` information  theoretic lower bound ' is always @xmath79 in these cases and we show that the time needed for the sorting of partial orders is @xmath80 .",
    "the main contribution of this chapter , is the derivation of the asymptotic number of comparisons needed , for the sorting of various partially ordered sets .",
    "the basic ideas used here are due to , amongst others , cardinal _ et al . _",
    "@xcite , fredman @xcite , kahn and kim @xcite , kislitsyn @xcite , but the working out of the detailed consequences for these partial orders seems to be new .    in * chapter 6 * , we consider random graph orders , where the ` information  theoretic lower bound ' is of the same order of magnitude as the number of keys being sorted .",
    "we derive a new bound on the number of linear extensions using entropy arguments , though it is not at present competitive with an older bound in the literature @xcite .    in * chapter 7 * , we conclude the thesis , presenting future research directions . at this final chapter ,",
    "we derive another bound of the number of comparisons required to sort a random interval order and we discuss the merging of linearly ordered sets .    in * appendix a * , we present the maple calculations , regarding the derivation of the variance of the number of comparisons of dual pivot quicksort , analysed in subsection * 4.1.1*.",
    "in this chapter , the mathematical analysis of quicksort is presented , under the assumption that the pivots are uniformly selected at random .",
    "specifically , the major expected costs regarding the time complexity of the algorithm and the second moment are computed .",
    "the derivation of the average costs is unified under a general recurrence relation , demonstrating the amenability of the algorithm to a complete mathematical treatment .",
    "we also address the asymptotic analysis of the algorithm and we close this chapter considering the presence of equal keys .",
    "this discussion of lucky and unlucky choices of pivot suggests the idea of selecting the pivot at random , as randomisation often helps to improve running time in algorithms with bad worst - case , but good average - case complexity @xcite .",
    "for example , we could choose the pivots randomly for a discrete uniform distribution on the array we are looking at each stage .",
    "recall that the uniform distribution on a finite set assigns equal probability to each element of it .",
    "@xmath81 is the random variable giving the number of comparisons in quicksort of @xmath13 distinct elements when all the @xmath59 permutations of the keys are equiprobable .",
    "it is clear that for @xmath82 or @xmath83 , @xmath84 as there is nothing to sort .",
    "these are the initial or `` seed '' values of the recurrence relation for the number of comparisons , given in the following lemma .",
    "the random number of comparisons @xmath81 for the sorting of an array consisting of @xmath85 keys , is given by @xmath86 where @xmath87 follows the uniform distribution over the set @xmath88 and @xmath89 is identically distributed to @xmath90 and independent of it conditional on @xmath87 .",
    "the choice of @xmath87 as pivot , and comparing the other @xmath63 elements with it , splits the array into two subarrays .",
    "there is one subarray of all @xmath91 elements smaller than the pivot and another one of all @xmath92 elements greater than the pivot .",
    "obviously these two subarrays are disjoint .",
    "then recursively two pivots are randomly selected from the two subarrays , until the array is sorted , and so we get the equation .",
    "this allows us to find that the expected complexity of quicksort applied to @xmath13 keys is : @xmath93 using conditional expectation and noting that @xmath94 has probability @xmath95 , we get , writing @xmath96 for @xmath97 , that @xmath98 we have to solve this recurrence relation , in order to obtain a closed form for the expected number of comparisons .",
    "the following result is well - known ( e.g. see in @xcite , @xcite ) :    the expected number @xmath67 of comparisons for quicksort with uniform selection of pivots is @xmath99 .",
    "we multiply both sides of the formula for @xmath67 by @xmath13 , getting @xmath100 and similarly , multiplying by @xmath63 , @xmath101    subtracting @xmath102 from @xmath103 in order to eliminate the sum ",
    "see @xcite , we obtain @xmath104 `` unfolding '' the recurrence we get @xmath105 finally , @xmath106    we now show a slick way of solving the recurrence about the expected number of comparisons using generating functions .",
    "this approach is also noted in various places , e.g. @xcite , @xcite , @xcite .",
    "we again start from @xmath107 we multiply through by @xmath13 to clear fractions , getting @xmath108 letting @xmath109 , @xmath110 changing round the order of summation .",
    "to evaluate @xmath111 , simply note this is the 2nd derivative of @xmath112 . since the latter sum is equal to @xmath113 , for @xmath114 , its second derivative is easily checked to be @xmath115 .",
    "multiplying the sum by @xmath11 now gives @xmath116    we evaluate the last double - sum .",
    "the inner sum is of course @xmath117 being a geometric series .",
    "thus we get @xmath118 this is now a fairly standard kind of differential equation . multiplying both sides by @xmath119 , we see @xmath120 setting @xmath121 , we get @xmath122 on the left - hand side , and on the right - hand side we get @xmath37 , so @xmath123 .",
    "therefore @xmath124    expanding out @xmath125 as a series , @xmath126 , and similarly writing @xmath127 as the derivative of @xmath113 , we obtain @xmath128 thus , looking at coefficients of @xmath129 on both sides , we get on the left - hand side @xmath67 . on the right - hand side",
    ", we get the coefficient for each @xmath130 in the first series ( which is @xmath131 ) times the term for the @xmath132 in the other , namely @xmath133 . so we get @xmath134    some texts give a different argument for this , as follows .",
    "suppose that a pivot is chosen independently and uniformly at random from an array of @xmath13 keys , in which quicksort is applied .",
    "then , for any input , the expected number of comparisons made by randomised quicksort is @xmath135 .",
    "let @xmath136 be the input values and the output , after the termination of quicksort , ( i.e. keys in increasing order ) be a permutation of the initial array @xmath137 .",
    "for @xmath138 , let @xmath139 be a @xmath140-valued random variable , that takes the value @xmath4 , if @xmath141 and @xmath142 are compared over the course of algorithm and @xmath8 , otherwise .",
    "then , the total number of comparisons @xmath143 satisfies @xmath144 since @xmath145 , then @xmath146 .",
    "this event occurs when @xmath141 and @xmath142 are compared .",
    "clearly , this happens when @xmath141 or @xmath142 is the first number chosen as pivot from the set @xmath147 .",
    "( because otherwise if some element between them is chosen , @xmath148 say , @xmath141 and @xmath142 are compared to @xmath148 and @xmath141 is put below @xmath148 and @xmath142 above it with the result that @xmath141 and @xmath142 are never compared ) .    since the pivot is chosen uniformly at random",
    ", the probability the one of these two elements is the first of the @xmath149 elements chosen is equal to @xmath150 . substituting @xmath151",
    ", we obtain @xmath152 the change of sum is justified by writing out the possible rows for fixed @xmath60 and columns for a fixed @xmath48 , then changing round from summing rows first to summing columns first .",
    "this is , as @xmath153 does not depend on @xmath60 , equal to @xmath154 thus , @xmath155 proving the claim .",
    "also of some interest is the mean number of partitioning stages @xmath156 of the algorithm applied to @xmath13 keys as input . for the case where we simply use quicksort for all the sorting ,",
    "it is obvious that we will have @xmath157 and for @xmath158 , the number of partitioning stages @xmath159 obeys the following recurrence conditional on @xmath61 being the rank of the pivot @xmath160 observe that @xmath161 and @xmath162 . taking expectations , and noting that the pivot is uniformly chosen at random and that the two sums @xmath163 and @xmath164 are equal , we see @xmath165 multiplying both sides by @xmath13 and differencing the recurrence relation , as we did for the derivation of the expected number of comparisons , we have @xmath166 finally , @xmath167 .      here",
    "we consider the number of exchanges or swaps performed by the algorithm , which is mentioned by hoare @xcite as a relevant quantity .",
    "we assume that each swap has a fixed cost and as in the previous section , we assume that the keys are distinct and that all @xmath59 permutations are equally likely to be the input : this in particular implies that the pivot is chosen uniformly at random from the array .",
    "we should specify the partitioning procedure .",
    "assume that we have to sort @xmath13 distinct keys , where their locations in the array are numbered from left to right by @xmath168 .",
    "set two pointers @xmath169 and @xmath170 and select the element at location @xmath13 as a pivot .",
    "first , compare the element at location @xmath4 with the pivot .",
    "if this key is less than the pivot , increase @xmath60 by one until an element greater than the pivot is found .",
    "if an element greater than the pivot is found , stop and compare the element at location @xmath63 with the pivot .",
    "if this key is greater than the pivot , then decrease @xmath61 by one and compare the next element to the pivot .",
    "if an element less than the pivot is found , then the @xmath61 pointer stops its scan and the keys that the two pointers refer are exchanged .",
    "increase @xmath60 by one , decrease @xmath61 by one and in the same manner continue the scanning of the array until @xmath171 . at the end of the partitioning operation ,",
    "the pivot is placed in its final position @xmath48 , where @xmath172 , and quicksort is recursively invoked to sort the subarray of @xmath173 keys less than the pivot and the subarray of @xmath174 keys greater than the pivot @xcite .",
    "note that the probability of a key being greater than the pivot is @xmath175 the number of keys which are greater than pivot , and were moved during partition is @xmath176 therefore , considering also that pivots are uniformly chosen and noting that we have to count the final swap with the pivot at the end of partition operation , we obtain @xmath177    let @xmath178 be the total number of exchanges , when the algorithm is applied to an array of @xmath13 distinct keys .",
    "we have that @xmath179 and for @xmath85 , the following recurrence holds @xmath180 since the pivot is chosen uniformly at random , the recurrence for the expected number of exchanges is @xmath181    this recurrence relation is similar to the recurrences about the mean number of comparisons and will be solved by the same way .",
    "subtracting @xmath182 from @xmath183 , the recurrence becomes @xmath184 telescoping , the last relation yields @xmath185 tidying up , the average number of exchanges in course of the algorithm is @xmath186 its asymptotic value is @xmath187 it follows that asymptotically the mean number of exchanges is about @xmath188 of the average number of comparisons .    in a variant of the algorithm analysed in @xcite and @xcite , which we briefly mentioned in the introduction ,",
    "partitioning of @xmath13 keys takes @xmath78 comparisons and subfiles of @xmath189 or fewer elements are sorted using insertion sort .",
    "then the average number of comparisons , partitioning stages and exchanges respectively , are @xmath190 for @xmath191 , we obtain the average quantities when there is no switch to insertion sort .",
    "note that in this case the expected costs are @xmath192      we now similarly discuss the variance of the number of comparisons in quicksort . although the result has been known for many years ",
    "see @xcite , exercise 6.2.2 - 8 for an outline  there is not really a full version of all the details written down conveniently that we are aware of , so we have provided such an account  this summary has been put on the * arxiv * , @xcite .",
    "the sources @xcite , @xcite and @xcite were useful in putting the argument together . again , generating functions will be used .",
    "the result is :    the variance of the number of comparisons of quicksort on @xmath13 keys , with a pivot chosen uniformly at random is @xmath193    we start with a recurrence for the generating function of @xmath81 , namely @xmath194 .",
    "we will use this to reduce the proof of the theorem to proving a certain recurrence formula for the expression @xmath195 .    in random quicksort of @xmath13 keys , the generating functions @xmath196 satisfy @xmath197    we have , using the equation @xmath198 that @xmath199 noting that @xmath200 and @xmath201 are conditionally independent subject to the pivot .",
    "thus @xmath202 multiplying by @xmath203 and summing over @xmath48 , so as to get the generating function @xmath204 of @xmath81 on the left , we obtain @xmath205 as required .",
    "this of course will give a recursion for the variance , using the well - known formula for variance in terms of the generating function @xmath206 : @xmath207 we use this formula together with eq .",
    "the first order derivative of @xmath208 is @xmath209 from standard properties of generating functions , it holds that @xmath210 differentiating again we obtain @xmath211    setting @xmath212 @xcite , @xmath213 where @xmath214 are @xmath215 , @xmath216 , i.e. the mean number of comparisons to sort an array of @xmath217 and @xmath218 elements respectively . setting @xmath219",
    ", we obtain @xmath220 using the symmetry of the sums .",
    "what this argument has shown for us is the following  compare @xcite where it is also shown that this recurrence has to be solved , though no details of how to solve it are given .    in order to prove theorem @xmath221 , it is sufficient to show that this recurrence is given by @xmath222    combining the equations @xmath223 and @xmath224 , the result follows",
    ".    it will be convenient first to develop some theory on various sums involving harmonic numbers .",
    "often we used maple to verify these relations initially , but we provide complete proofs here .",
    "as a brief reminder , @xmath225 denotes the expected number of comparisons needed to sort an array of @xmath61 keys . recall that @xmath226 thus , @xmath227 for the computation of the first sum of eq .",
    "( 2.2 ) , a lemma follows    for @xmath21 @xmath228    the sum can be written as @xmath229 the last equation can be easily seen to be equivalent with the statement of the lemma .",
    "thus we can find out about the sum of the @xmath225s , that it holds for @xmath230    @xmath231    using lemma 2.3.4 and eq .",
    "( 2.2 ) , the proof is immediate .",
    "now , we will compute the term @xmath232 .",
    "we shall use three lemmas for the following proof .    for @xmath21",
    ", it holds that @xmath233    to do this , we will again use the formula obtained previously for @xmath225 .",
    "we have @xmath234    we need to work out the value of @xmath235 :    for @xmath21 holds @xmath236    using the same reasoning as in lemma @xmath237 , @xmath238 completing the proof .    we also need to compute @xmath239 .",
    "a lemma follows    for @xmath21 @xmath240    we can write @xmath241 . then , substituting @xmath242 @xmath243 these sums can be computed using lemmas @xmath237 and @xmath244 .    in the same manner",
    "we shall compute @xmath245 changing variables , the expression becomes @xmath246 .",
    "using the previous results , we have @xmath247 finishing the proof of lemma @xmath248 .",
    "after some tedious calculations , the recurrence relation becomes @xmath249    subtracting @xmath250 from @xmath251 , @xmath252 we obtain @xmath253 we have to work out the following sum @xmath254 we note that @xmath255    sedgewick @xcite , presents and proves the following result :    @xmath256    by the definition of harmonic numbers , we have @xmath257 and the above equation becomes @xmath258 using the identity @xcite , @xmath259    eq . ( 2.4 ) can be written as @xmath260 it can be easily verified that @xmath261 making repeated use of eq . ( 2.5 ) , we obtain the identity @xmath262 we have then @xmath263    the order of summation was interchanged .",
    "we can sum on all @xmath61 and for @xmath264 , we must count this term twice .",
    "we obtain @xmath265 finally @xmath266    the following corollary is a direct consequence of eq .",
    "( 2.5 ) and ( 2.6 ) .    for @xmath21",
    ", it holds @xmath267    @xmath268    we will use the above lemma and corollary in our analysis .",
    "we have that @xmath269 the second sum substituting @xmath270 becomes @xmath271 as we have seen it is equal to @xmath272    hence , by lemma 2.3.9 , @xmath273 using the above result and eq . (",
    "2.3 ) , we have @xmath274 having worked out all the expressions involved in the following relation @xmath275 this becomes @xmath276    dividing both sides by @xmath277 and unwinding the recurrence , @xmath278 hence @xmath279    finally , multiplying by @xmath280 we obtain @xmath281 consequently , by lemma 2.3.3 the variance of the number of comparisons of randomised quicksort is @xmath282 completing the proof of theorem 2.3.1 .",
    "we have computed the mean and variance of the number of comparisons made by quicksort that mainly contribute to its time complexity . because of the simple structure of the algorithm ( dividing into smaller subproblems ) we can in fact approach many other related problems in the same spirit .",
    "let @xmath283 denote the expected value of some random variable associated with randomised quicksort and @xmath284 be the average value of the `` toll function '' , which is the needed cost to divide the problem into two simpler subproblems .",
    "then @xmath283 is equal to the contribution @xmath284 , plus the measures required sort the resulting subarrays of @xmath285 and @xmath286 elements , where the pivot @xmath60 can be any key of the array with equal probability .",
    "thus , the recurrence relation is @xmath287 this is the general type of recurrences arising in the analysis of quicksort , which can be manipulated using the difference method or by generating functions .",
    "since an empty array or an one having a unique key is trivially solved , the initial values of the recurrence is @xmath288 the first method leads to the elimination of the sum , by subtracting @xmath289 from @xmath290  see @xcite .",
    "the recurrence becomes @xmath291 and dividing by @xmath292 we have @xmath293    this recurrence can be immediately solved by `` unfolding '' its terms .",
    "the general solution is @xmath294 when the sorting of subarrays of @xmath189 keys or less is done by insertion sort , the solution of the recurrence is @xmath295 since @xmath296 .",
    "another classic approach , which is more transparent and elegant , is the application of generating functions .",
    "the recurrence is transformed to a differential equation , which is then solved .",
    "the function is written in terms of series and the extracted coefficient is the solution .",
    "multiplying by @xmath297 and then summing with respect to @xmath13 , in order to obtain the generating function @xmath298 , we have @xmath299 the double sum is equal to @xmath300 and the differential equation is @xmath301 cancelling out @xmath11 and multiplying by @xmath119 , @xmath302 where @xmath6 is constant , which can be found using the initial condition @xmath303 .",
    "the solution then is being written as power series and the coefficient sequence found is the expected sought cost .",
    "now , one can obtain any expected cost of the algorithm , just by using these results . the `` toll function",
    "'' will be different for each case . plugging in the average value ,",
    "the finding becomes a matter of simple operations .",
    "this type of analysis unifies the recurrences of quicksort into a single one and provides an intuitive insight of the algorithm .",
    "we have effectively calculated the first and second moments of @xmath81 in quicksort .",
    "existing literature does not seem to address much questions about skewness and kurtosis , which are sometimes held to be interesting features of a random variable . here",
    ", we present an inconclusive discussion about the sign of the skewness .    using the probability generating function",
    ", we can obtain higher moments of the algorithm s complexity .",
    "a lemma follows    let a random variable @xmath143 having probability generating function : @xmath304 for the @xmath48-th order derivative it holds that @xmath305    simply by computing successively the @xmath48-th order derivative of @xmath206 , we obtain @xmath306 setting @xmath212 , the proof follows directly .",
    "note that the argument is similar to continuous random variables .",
    "using maple , we obtained a recursive form for the general @xmath48-th order derivative of the generating function .",
    "let @xmath307 be the generating function of quicksort s complexity in sorting @xmath13 keys .",
    "the @xmath308 order derivative is given by @xmath309 where the @xmath310 function is defined for complex variable @xmath311 as @xmath312 and when @xmath313 is a positive integer , then @xmath314 .",
    "for @xmath315 , the result follows trivially .",
    "assume that the statement of the lemma holds for @xmath316 .",
    "the @xmath317-th order derivative is @xmath318    note that @xmath319 therefore , @xmath320 the well - known identity , ( e.g. see @xcite ) @xmath321 completes the proof .    we should point out that lemma @xmath322 is an immediate consequence of leibniz s product rule .",
    "next , we shall ask a question about the sign of the skewness of the time complexity of the algorithm , as it is moderately difficult to solve the recurrence involved , in order to compute the third moment . we already have seen that the possibility of worst - case performance of the algorithm is rather small and in the majority of cases",
    "the running time is close to the average time complexity which is @xmath323 .",
    "intuitively , this suggests that the complexity is negatively skewed .",
    "we present the following question :    is the skewness @xmath324 of the random number of key comparisons of quicksort for the sorting of @xmath325 keys negative ?",
    "note that the cases @xmath326 are deterministic , since we always make @xmath8 and @xmath4 comparisons for the sorting .",
    "this question may have an affirmative answer , which can be possibly proven by an induction argument on the number of keys .",
    "however , great deal of attention must be exercised to the fact that the random number of comparisons required to sort the segment of keys less than the pivot and the segment of keys that are greater than the pivot are conditionally independent , subject to the choice of pivot .      after having examined the number of comparisons of quicksort , in terms of average and worst case scenarios , and its variance ,",
    "it is desirable also to study the concentration of the random variable @xmath81 about its mean .",
    "one might hope , by analogy with other probabilistic situations , that for large values of @xmath13 the number of comparisons is highly likely to be very close to the mean .",
    "the analysis will be confined to the number of comparisons , because this is the most relevant measure for this thesis . since",
    "our results will be asymptotic in nature , we need to have some relevant ideas about convergence of sequences of random variables .",
    "the following definitions come from @xcite , @xcite .",
    "+   ( i ) a sequence of random variables @xmath327 is said to converge in distribution ( or converge weakly ) to a random variable @xmath143 if and only if @xmath328 at every point @xmath11 where @xmath329 is continuous . here",
    "@xmath330 and @xmath331 are respectively the cumulative distribution functions of random variables @xmath332 and @xmath143 .",
    "we shall denote this type of convergence by @xmath333 .",
    "+ ( ii ) a sequence of random variables @xmath327 is said to converge in probability to a random variable @xmath143 if and only if @xmath334 holds @xmath335 we will denote this type of convergence by @xmath336 .",
    "+ ( iii ) a sequence @xmath327 of random variables is said to converge in @xmath337-norm to a random variable @xmath143 if and only if @xmath338    note that convergence in @xmath337-norm , for @xmath339 , implies convergence in probability , and it is also easy to see that convergence in probability implies convergence in distribution : see e.g. @xcite .",
    "both converse statements are false in general .",
    "we also present the definition of martingale , which shall be employed in a later stage of our analysis .",
    "let @xmath340 be a sequence of random variables .",
    "we say @xmath341 is a martingale if and only if ( i ) @xmath342 , @xmath343 . + ( ii ) @xmath344 .      in this subsection , a central notion to the analysis of quicksort , and in general to the analysis of algorithms is discussed .",
    "we begin with a definition .",
    "a graph is defined as an ordered pair of two sets @xmath345 .",
    "the set @xmath346 corresponds to the set of vertices or nodes .",
    "the set @xmath347 is the set of edges , which are pairs of distinct vertices .",
    "one kind of graph we concentrate on are trees .",
    "a definition of a tree ( which suits us ) is as follows @xcite :    tree is a finite set @xmath348 of nodes , such that : + ( i ) there is a unique node called the root of the tree .",
    "+ ( ii ) the remaining nodes are partitioned into @xmath308 disjoint sets @xmath349 and each of these sets is a tree .",
    "those trees are called the subtrees of the root .",
    "a particularly common tree is a binary tree .",
    "it is defined as a tree with the property that every node has at most @xmath57 subtrees , i.e. each node  excluding the root  is adjacent to one parent , so to speak , and up to two offspring , namely left and right child nodes .",
    "note here that nodes which do not have any child nodes are called external . otherwise , they are called internal .",
    "the size of a binary tree is the number of its nodes .",
    "the depth of a node is simply the number of edges from that node to the root in the ( unique ) shortest path between them and the height of a binary tree is the length from the deepest node to the root .",
    "an extended binary tree is a binary tree with the property that every internal node has exactly two offspring @xcite .",
    "let @xmath350 be the depth of insertion of a key in a random binary tree of size @xmath351 .",
    "since the root node is first inserted to an empty tree , it holds that @xmath352 .",
    "the next inserted key is compared with the key at the root and if it is smaller , is placed to the left ; otherwise is attached as a right subtree , thus @xmath353 .",
    "thus , we define the internal path length of an extended binary tree having @xmath13 internal nodes , to be equal to the sum over all internal nodes , of their distances to the root .",
    "let us denote this quantity by @xmath332 .",
    "we then have that @xmath354 similarly , the external path length is defined as the total number of edges in all the shortest paths from external nodes to the root node .",
    "the next lemma gives a relationship between those two quantities .",
    "for an extended binary tree with @xmath13 internal nodes it holds that @xmath355 where @xmath356 denotes the external path length of the tree .",
    "suppose that we remove the two offspring of an internal node @xmath357 , with its offspring being external nodes of the tree .",
    "we suppose that @xmath357 is at distance @xmath358 from the root .",
    "then the external path length is reduced by @xmath359 , as its two offspring are removed . at the same time , the external path length is increased by @xmath358 , because the vertex @xmath357 has just become an external node .",
    "thus , the net change is equal to @xmath360 . for internal path length",
    "the change is a reduction by @xmath361 as @xmath357 is no longer internal .",
    "thus , overall , the change in @xmath362 is equal to @xmath363 .",
    "the lemma follows by induction .",
    "binary trees play a fundamental and crucial role in computing and in the analysis of algorithms .",
    "they are widely used as data structures , because fast insertion , deletion and searching for a given record can be achieved . in quicksort , letting nodes represent keys , the algorithm s operation can be depicted as a binary tree .",
    "the root node stores the initial pivot element .",
    "since the algorithm at each recursion splits the initial array into two subarrays and so on , we have an ordered binary tree .",
    "the left child of the root stores the pivot chosen to sort all keys less than the value of root and the right child node stores the pivot for sorting the elements greater than the root .",
    "the process continues until the algorithm divides the array into trivial subarrays of order @xmath8 or @xmath4 , which do not need any more sorting .",
    "these elements are stored as external or leaf nodes in this binary structure .",
    "it easily follows that for any given node storing a key @xmath48 , its left subtree store keys less than @xmath48 and similarly its right subtree contain keys greater than @xmath48 .    in variants of quicksort , where many pivots are utilised to partitioning process",
    ", the generalisation of binary trees provides a framework for the analysis , though we do not develop this in detail here . in the next subsection",
    ", the limiting distribution of the number of comparisons will be analysed , in terms of trees .",
    "we have previously seen that the operation of the algorithm can effectively be represented as a binary tree .",
    "internal nodes store pivots selected at each recursion step of the algorithm : so the root vertex , for example , stores the first pivot with which all other elements are compared .",
    "we are interested in the total number of comparisons made . to understand this",
    ", we note that every vertex is compared with the first pivot which is at level @xmath8 of the tree .",
    "the array is divided into two parts  those above the pivot , and those below it .",
    "( either of these subarrays may be empty ) .",
    "if a subarray is not empty , a pivot is found in it and is attached to the root as a child on the left , for the elements smaller than the first pivot or on the right for the elements larger than the pivot .",
    "the process then continues recursively and each element at level @xmath48 in the tree is compared with each of the @xmath48 elements above it .",
    "thus the total number of comparisons made is the sum of the depths of all nodes in the tree .",
    "this is equivalent to the internal path length of the extended binary tree .",
    "thus , @xmath364 where @xmath356 is the external path length of the tree . to see this , we simply use lemma 2.6.5 .",
    "this fact can be also found in @xcite .",
    "generally , assume that we have to sort an array of @xmath13 distinct items with pivots uniformly chosen .",
    "all @xmath59 orderings of keys are equally likely .",
    "this is equivalent to carrying out @xmath13 successive insertions @xcite .",
    "initially , the root node is inserted .",
    "the second key to be inserted is compared with the key at the root .",
    "if it is less than that key , it is attached as its left subtree .",
    "otherwise , it is inserted as the right subtree .",
    "this process continues recursively by a series of comparisons of keys , until all @xmath13 keys have been inserted .",
    "traversing the binary search tree in order , i.e. visiting the nodes of the left subtree , the root and the nodes of the right subtree , keys are printed in ascending order .",
    "thus , quicksort can be explicitly analysed in this way .",
    "recall that each internal node corresponds to the pivot at a given recursion of the quicksort process ( e.g. the depth of a given node ) .",
    "thus the first pivot corresponds to the root node , its descendants or child nodes are pivots chosen from the two subarrays to be sorted , etc . eventually , after @xmath13 insertions",
    ", we have built a binary search tree from top to bottom .",
    "we can use this approach to understand the following theorem of rgnier @xcite .",
    "let random variables @xmath356 and @xmath332 denote respectively the external and internal path length of binary search tree , built by @xmath13 successive insertions of keys .",
    "then the random variables @xmath365 form a martingale with null expectations . for their variances it holds @xmath366    by induction on @xmath13 , the base case being trivial .",
    "suppose we have an @xmath367-vertex tree and consider the insertion of the @xmath368-th key in the random binary tree .",
    "its depth of insertion is @xmath369 , so that a formerly external node becomes an internal and we see that its two ( new ) descendants are both at depth @xmath370 .",
    "recall that @xmath371 is the random variable counting the depth of insertion of a key in a random binary tree of size @xmath63 , thus @xmath352 and @xmath353 .",
    "the following equation concerning conditional expectations holds : @xmath372 this recurrence yields @xmath373    summing and using that the left - hand side is a telescopic sum , @xmath374 the last equation is justified by lemma @xmath375 .",
    "also , we have @xmath376 thus , taking expectations and using @xmath377 , @xmath378 this recurrence has solution @xmath379    for @xmath341 , we deduce that @xmath380 therefore , @xmath341 form a martingale .",
    "further , note that @xmath341 is a linear transformation of the internal path length @xmath332 , so we get that @xmath381 previously , we saw that the number of comparisons is just the internal path length of a binary search tree . as a reminder",
    "the variance of the number of comparisons is equal to @xmath382 hence , @xmath383    for the purpose of obtaining the asymptotics of the variance , an important family of functions , which is called polygamma functions are discussed .",
    "the digamma function is @xmath384 and for complex variable @xmath311 can be written as @xcite , @xmath385 in general , @xmath386 , the set @xmath387 with @xmath388 , forms the family of polygamma functions .",
    "differentiating eq .",
    "( 2.7 ) , @xmath389 by eq . ( 2.7 ) , it easily follows that @xmath390 further , using the fact that @xmath391 @xcite , where @xmath392 is the riemann zeta function for @xmath393 , we obtain @xmath394    eq .",
    "( 2.9 ) is asymptotically equivalent to @xmath395 thus , the asymptotic variance is @xmath396    we note that there is a typo in the expression for the asymptotic variance in rgnier s paper @xcite , which is given as @xmath397 the correct formula for the asymptotic variance is stated in fill and janson @xcite .",
    "the key point about martingales is that they converge .",
    "let @xmath341 be a martingale , and suppose further that there is a constant @xmath6 such that @xmath398 for all @xmath13 .",
    "then there is a random variable @xmath399 to which @xmath341 converges , with probability @xmath4 .",
    "further , @xmath400 for all @xmath13 .",
    "we showed that @xmath401 it is important to emphasise that the random variable @xmath399 to which we get convergence is not normally distributed .",
    "we saw that the total number of comparisons to sort an array of @xmath85 keys , when the pivot is a uniform random variable on @xmath402 is equal to the number of comparisons to sort the subarray of @xmath91 keys below pivot plus the number of comparisons to sort the subarray of @xmath92 elements above pivot plus @xmath63 comparisons done to partition the array .",
    "therefore , @xmath403 where the random variables @xmath404 and @xmath405 are identically distributed and independent conditional on @xmath87 .",
    "consider the random variables @xmath406 the previous equation can be rewritten in the following form @xmath407 by a simple manipulation , it follows that @xcite , @xcite @xmath408 where @xmath409    the random variable @xmath410 converges to a uniformly distributed variable @xmath411 on @xmath412 $ ] .",
    "a lemma follows    let @xmath87 be a uniformly distributed random variable on @xmath413 .",
    "then @xmath414 where @xmath411 is uniformly distributed on @xmath412 $ ] .",
    "the moment generating function of @xmath87 is given by @xmath415 for the random variable @xmath410 , it is @xmath416    the random variable @xmath411 has moment generating function @xmath417 now the moment generating function of @xmath410 is an approximation to the average value of @xmath418 over the interval @xmath419 $ ] and so , as @xmath13 tends to infinity , we can replace it by its integral @xmath420_{0}^{1}=\\frac{e^{s}-1}{s}\\ ] ] and now all that is required has been proved .    for the function @xmath421 using the previous lemma and recalling that asymptotically the expected complexity of quicksort is @xmath422 it follows that @xmath423.$~}\\end{aligned}\\ ] ] thus @xmath424 converges to @xmath425 , ( see as well in @xcite ) .",
    "therefore , we obtain @xmath426    but this does not work for the normal . indeed , if @xmath427 ( and hence @xmath428 ) are normals with mean zero and variance @xmath429 , a necessary condition for @xmath430 to have mean 0 ( which would be needed for the equality to hold ) would be that @xmath431 .",
    "this equality happens with probability equal to @xmath8 , as we can easily deduce .",
    "thus , the distribution which the sequence @xmath356 converges is not gaussian .",
    "it is desirable to derive bounds on the deviation of the random number of pairwise comparisons , needed to sort an array of @xmath13 distinct elements from its expected value , as @xmath13 gets arbitrarily large .",
    "we remind ourselves that the pivot is uniformly chosen at random .",
    "we shall derive bounds on the following probability @xmath432 for @xmath433 , sufficiently small . from chebyshev s inequality ,",
    "we obtain a bound for the above probability .",
    "chebyshev s inequality is as follows @xcite :    let @xmath143 be a random variable , with @xmath434 .",
    "then , for any real number @xmath435 @xmath436 if @xmath437 and @xmath438 , then @xmath439    the random variable @xmath440 has mean and variance , @xmath441    for @xmath433 , we have @xmath442 it holds that , @xmath443 using that the other terms are negative and @xmath444 . further , using that @xmath445 we get @xmath446 from above inequalities , we deduce that @xmath447 .",
    "thus , @xmath448 rsler @xcite derived a sharper bound .",
    "he showed that this probability is @xmath449 , for fixed @xmath48 .",
    "mcdiarmid and hayward @xcite have further sharpened the bound .",
    "their theorem is     + let @xmath450 satisfy @xmath451 .",
    "then as @xmath452 , @xmath453 where @xmath454 and @xmath455 .    in the recent paper of mcdiarmid @xcite ,",
    "theorem @xmath456 is revisited using concentration arguments . by this result , it can be easily deduced , that quicksort with good pivot choices performs well , with negligible perturbations from its expected number of comparisons .",
    "as we previously saw , quicksort can be depicted as an ordered binary tree .",
    "the root node or node @xmath4 corresponds to the input array of length @xmath457 to be sorted .",
    "a pivot with rank @xmath458 is selected uniformly at random and the initial array is divided into two subarrays , one with elements less than the pivot and a second , with elements greater than the pivot .",
    "then , the node at the left corresponds to the subarray of keys that are less than the pivot , with length @xmath459 and the node at the right corresponds to the subarray of keys that are greater than the pivot , with length @xmath460 .",
    "recursively , quicksort runs on these two subarrays and split them in four subarrays , until we get trivial subarrays and the initial array is sorted . for @xmath461",
    "let @xmath462 be the length of the array to be sorted at @xmath61 node and @xmath463 be the maximum cardinality of the @xmath464 subarrays , after @xmath48 recursions of quicksort .",
    "it is @xcite , @xmath465    the following lemma gives an upper bound for the probability that the maximum length of @xmath464 subarrays @xmath463 , will exceed @xmath466 times the initial set s length @xmath13 .",
    "we easily see that the upper bound is rather small quantity .",
    "thus , we deduce that the length of the array is rapidly decreasing , as quicksort runs .",
    "+ for any @xmath467 and any integer @xmath468 it holds @xmath469    so far , the analysis explicitly assumed the presence of distinct numbers .",
    "however , in many sorting problems , one can come across with duplicates .",
    "as we will see next , we have to consider the presence of equal numbers and how this affects the algorithm s performance .      in this section ,",
    "we consider the presence of equal keys . in some cases",
    ", there may be multiple occurrences of some of the keys  so that there is a multiset of keys to be sorted .",
    "if a key @xmath470 appears @xmath471 times , we call @xmath471 the multiplicity of @xmath470 .    thus , we have a multiset of the array @xmath472 , with @xmath473 and @xmath13 is the number of distinct keys . without loss of generality , we assume that we have to sort a random permutation of the array @xmath474 . obviously , when @xmath475 , then the array contains @xmath476 distinct keys .",
    "consider an array consisting of keys with `` large '' multiplicities .",
    "the usual quicksort algorithm is quite likely to perform badly , since keys equal to the pivot are not being exchanged . recall that hoare s partitioning routine @xcite described in the previous chapter , utilises two pointers that scan for keys greater than and less than the pivot , so at the end of partition , keys equal to pivot may be on either or both subarrays , leading to unbalanced partitioning which we saw is usually undesirable .",
    "the algorithm can be further tweaked for efficient sorting of duplicates , using a ternary partition scheme @xcite .",
    "keys less than pivot are on left , keys equal to pivot on middle and on right , keys greater than the pivot .",
    "hoare s partitioning scheme can be easily modified , in order for the pointers to stop on equal keys with the pivot .",
    "in other words , the lower pointer searches for a key greater than or equal to the pivot and the upper one for a key smaller than or equal to the pivot .",
    "sedgewick @xcite considers a partitioning routine , where only one of the pointers stops on keys either greater or smaller than the pivot .",
    "the recurrence for the expected number of key comparisons @xmath477 is @xmath478 the analysis has been done in @xcite . the solution of the recurrence is @xmath479    note that when @xmath476 , i.e. the keys to be sorted are distinct , eq . ( 2.10 ) yields the expected number of comparisons , when the array is partitioned using @xmath63 comparisons . as we saw in the previous chapter , a different partitioning scheme proposed and analysed in @xcite , @xcite ,",
    "utilises @xmath480 comparisons for partitioning an array of @xmath481 keys . in this case , an upper bound for large @xmath13 to the expected number of comparisons is @xcite , @xmath482",
    "the preceding analysis has shown that quicksort is prone to poor performance , when the chosen pivots happen to be ( close to ) the smallest or greatest keys in the array to be sorted .",
    "the partitioning yields trivial subarrays , leading to quadratic running time taken by the algorithm , and increasing the chances of ` crashing ' , i.e. an application of quicksort may terminate unsuccessfully through running out of memory . on the other hand , good choices of pivot yield a much more efficient algorithm .",
    "the uniform model suggests that in fact any key has equal probability to be selected as pivot . in this chapter , we discuss and analyse the general idea of how one can increase the probability that the selected pivots will produce ( reasonably ) balanced partitions , by trying to ensure that their ranks are ` near ' the middle of the array .    a naive idea towards this ,",
    "would be finding the median of the keys and use this as pivot .",
    "however , it is obvious that the finding of median imposes additional costs to the algorithm",
    ". therefore , despite the always good choices , this method might not be better than choosing the pivot randomly . instead of finding the median of the array to be sorted",
    ", it might be more efficient to randomly pick a sample from the array , find its median and use this as pivot . in what it follows",
    ", we will analyse this idea and its variants .",
    "singleton @xcite suggested to randomly select three keys from the array to be sorted and use their median as pivot , leading to a better estimate of the median of the array and reducing further the chances of worst case occurrence .",
    "this modification can be generalised as to choosing a sample of @xmath483 keys at every recursive stage , computing their median and using that median as pivot , partitioning @xmath484 keys .",
    "arrays that contain at most @xmath483 keys are sorted by a simpler algorithm , such as insertion sort .",
    "the cost of sorting these small arrays is linear with respect to @xmath13 .    letting @xmath485 denote the number of comparisons required to sort @xmath13 keys when the pivot is the median of a random sample of @xmath483 elements , uniformly selected from the relevant array , the recurrence for the average number of comparisons is given by ( see @xcite ) @xmath486 multiplying both sides by @xmath487 , @xmath488 multiplying by @xmath489 and summing over @xmath13 , in order to obtain the generating function for the expected number of comparisons , @xmath490 @xmath491 it holds @xmath492 where @xmath493 denotes the @xmath483-th order derivative of @xmath494 . for the first sum in the right - hand side of eq .",
    "( 3.1 ) @xmath495 the @xmath496-th order derivative of @xmath497 can be easily seen by induction that is equal to @xmath498    expanding out the double sum of eq .",
    "( 3.1 ) , @xmath499 the recurrence is transformed to the following differential equation @xmath500 multiplying both sides by @xmath501 , @xmath502 which is a cauchy  euler differential equation .",
    "this type of differential equations arises naturally to the analysis of searching  sorting algorithms and urn models @xcite . substituting @xmath503 , and putting @xmath504",
    ", we get @xmath505    we use the differential operator @xmath16 for the solution of the differential equation .",
    "it is defined by @xmath506 and by induction @xmath507 applying the operator , our equation becomes @xmath508 where the indicial polynomial is equal to @xmath509    we proceed to identify the nature of the roots of the polynomial .",
    "a lemma follows :    the indicial polynomial @xmath510 has @xmath511 simple roots , with real parts greater than or equal to @xmath512 .",
    "the real roots are @xmath513 ; @xmath512 ; @xmath514 , if @xmath48 is odd and the @xmath515 complex roots @xmath516 with their conjugates @xmath517 .    let @xmath518 being a root of the polynomial",
    ". then @xmath519 from eq . ( 3.2 ) , we deduce that @xmath48 real roots of the polynomial @xmath510 are @xmath520 . for @xmath521",
    ", we have that @xmath522    suppose that @xmath523 then @xmath524{\\vdots } }   \\\\ \\left \\vert \\frac{\\alpha-2k}{2k+1 } \\right \\vert & = \\frac { \\sqrt{(x-2k)^{2}+y^{2}}}{2k+1 } > \\frac{\\sqrt{\\bigl ( -2(k+1 ) \\bigr ) ^{2}+y^{2}}}{2k+1 } \\geq \\dfrac{2k+2}{2k+1},\\end{aligned}\\ ] ] so the product of the moduli in eq",
    ". ( 3.3 ) is greater than or equal to the telescoping product @xmath525 , arriving in contradiction .",
    "thus , for any root @xmath466 of the polynomial , it is proved that @xmath526 . moreover",
    ", this argument shows that @xmath512 is the unique root with real part equal to @xmath512 . to see all roots are simple ,",
    "assume that there does exist a repeated root @xmath466 .",
    "differentiating the polynomial , @xmath527 and @xmath528 eq .",
    "( 3.2 ) and ( 3.4 ) imply that for a repeated root must hold @xmath529 or @xmath530 consequently , eq .",
    "( 3.5 ) implies that @xmath531 and @xmath532 . considering eq .",
    "( 3.2 ) , the left - hand side has modulus less than @xmath4 , since @xmath533 .",
    "however , the right - hand side of eq .",
    "( 3.2 ) has modulus greater than @xmath57 , leading to contradiction .",
    "since the roots are simple , we can factor our polynomial in the form @xmath534 the solution to the differential equation @xmath535 is @xcite , @xmath536 therefore , applying @xmath483 times the solution , we obtain @xmath537 where @xmath538 are the constants of integration . note that @xmath539 thus , the expression in the denominator @xmath540 is @xmath541 reverting to the previous notation , @xmath542    using the identity @xcite , @xmath543 and the binomial theorem , the solution of the differential equation can be written in terms of series , @xmath544    extracting the coefficients , the expected number of comparisons of ` median of @xmath483 ' quicksort is @xmath545 the real roots of the polynomial @xmath546 do not contribute to the expected number of comparisons , since @xmath547 and",
    "when @xmath48 is odd , the root @xmath548 adds a negligible constant contribution .",
    "further , note that the root @xmath549 , contributes @xmath550 , with @xmath551 .",
    "therefore @xmath552    the asymptotics of the real parts in the last sum is given in @xcite .",
    "it is proved that @xmath553 and asymptotically the expected number of key comparisons is @xmath554 since all the other roots have real parts greater than @xmath512 .",
    "the solution contains the case of ordinary quicksort , where the pivot is randomly selected and of ` median of @xmath12 ' quicksort .",
    "the coefficient of the leading term in the latter case is @xmath555 thus the expected number of key comparisons is @xmath556    van emden @xcite obtained the asymptotic cost of the expected number of comparisons , using entropy arguments .",
    "the leading term is equal to @xmath557 where @xmath558 here @xmath559 denotes the probability density of the median of a random sample of @xmath483 elements and @xmath560 is the expected information yielded from a comparison .",
    "the nice and simple asymptotic form for the mean number of comparisons is @xmath561 note that this result , yields the expected number of comparisons of standard quicksort , for @xmath315 . in this case , @xmath562 thus @xmath563    the notion of entropy is of great importance to the analysis presented in this thesis .",
    "entropy is a measure of uncertainty regarding the events of a random variable . in other words , a higher uncertainty about the outcome of",
    "a random variable pertains to increased entropy . in the trivial case , where the probability of occurrence of an event is @xmath4 ,",
    "the entropy is equal to @xmath8 , as there is no uncertainty .",
    "a formal definition follows @xcite .",
    "the shannon s entropy @xmath564 of a discrete random variable @xmath143 taking the values @xmath565 with probabilities @xmath566 is defined by , @xmath567    the base @xmath568 of the logarithm will be normally equal to two ; in this case we measure bits of entropy",
    ". we should mention that the notation @xmath569 does not merely denote a function of @xmath143 ; entropy is a function of the probability distribution .",
    "generally , in sorting algorithms that utilise comparisons for this task , entropy quantifies the amount of information gained from the sorting .",
    "consider an unsorted array , with all the @xmath59 permutations equally likely .",
    "a comparison gives @xmath4 bit of information , thus at least @xmath570 comparisons are needed for a complete sort  see in @xcite .",
    "this quantity is called information  theoretic lower bound .",
    "the range of entropy is given in the following lemma .",
    "@xmath571    since @xmath572 , the left inequality follows immediately . noting that the logarithm is concave function and applying jensen s inequality @xcite , which for a random variable @xmath143 and a concave function @xmath39 , states that @xmath573 we have @xmath574    the next four definitions can be found in @xcite , @xcite and @xcite .",
    "the joint entropy @xmath575 of two discrete random variables @xmath143 and @xmath427 is defined as @xmath576 where @xmath577 is the probability that @xmath143 takes the value @xmath11 and @xmath427 the value @xmath578 .",
    "the conditional entropy @xmath579 of two discrete random variables @xmath143 and @xmath427 is defined as @xmath580    the information content of a random variable @xmath143 , with probability distribution @xmath581 is @xmath582    from definition @xmath583 , one can easily deduce , that @xmath584 in other words , entropy is the expected value of the information .",
    "we proceed to the definition of mutual information .",
    "the mutual information of two discrete random variables @xmath143 and @xmath427 is defined as : @xmath585 and quantifies the amount of information provided about @xmath143 by @xmath427 .",
    "these definitions will be used in a later part of the thesis .",
    "we have to point out that up until now , our analysis did not take into account the added overhead of finding the median at each stage . in the simple case of three elements ,",
    "the overhead is not significant , but for larger samples this might have adversary effects to the efficiency of quicksort .    for the selection of the median , we use hoare s find algorithm @xcite or quickselect .",
    "this simple and intuitive algorithm searches for an element of a given rank @xmath189 in an array of @xmath13 keys . as in quicksort ,",
    "one partitions the array around a randomly chosen pivot , which at the end of the partition process is moved to its final position , @xmath61 . if @xmath586 , the pivot is the sought element and the search is completed . otherwise , if @xmath587 , quickselect is recursively invoked to the left subarray of @xmath351 keys .",
    "conversely , if @xmath588 , we search in the right subarray for the element of rank @xmath589 .",
    "quickselect is ideal in situations where we want to identify order statistics , without the need to do a complete sort .",
    "the average number of comparisons @xmath590 required for the retrieval of the @xmath189-th order statistic in an array of @xmath13 keys , is given by @xcite @xmath591 for the sample of @xmath483 keys , the rank of the median is @xmath592",
    ". therefore , @xmath593 the cost for finding the median of a random sample of @xmath12 keys is @xmath594 comparisons at each stage .",
    "however , as the sample of keys increases , in order to obtain a more accurate estimate of the median , the added overhead imposes a bottleneck to the efficiency of the algorithm .",
    "the computation of other measures of this variant , such as the expected number of exchanges and passes can be performed by solving analogous recurrences , as the one for the number of comparisons .",
    "the average number of passes is recursively given by @xmath595 where the `` toll function '' is now one recursive call to the algorithm , after the chosen pivot is the median of @xmath483 keys , which yields two subarrays .",
    "this recurrence can be turned to a differential equation with solution @xmath596 noting that for @xmath315 , the average number of passes is @xmath13 . in the scheme , where arrays containing @xmath189 or fewer keys are sorted by insertion sort ,",
    "the average costs are reduced .",
    "we refer to @xcite where this variant is analysed .      in the previous section",
    ", we analysed the modification of quicksort , where the pivot is selected as the median of a sample of @xmath483 elements .",
    "this variant offers better protection against the occurrence of trivial partitions .",
    "however , there are some cases , where the running time of this partitioning scheme can go quadratic . consider the application of ` median of @xmath12 ' quicksort in an array of @xmath13 numbers , where the keys at positions @xmath4 , @xmath13 and @xmath597 are selected as elements of the sample . in case that two keys of this sample happen to be the smallest ( or greatest ) elements of the array",
    ", the chosen pivot will be @xmath57 ( or @xmath63 ) , leading to trivial partitioning , making quicksort everything else , except quick ! in @xcite , a permutation of the array @xmath598 is given , which leads quicksort to worst - case performance and in @xcite , an algorithm is presented which forms the worst - case permutation .    in order to remedy this , a bigger sample of @xmath599 keys is randomly selected , its remedian is found and used as partitioning element of the array to be sorted .",
    "the remedian of the sample is recursively defined to be the median of @xmath483 remedians of @xmath600 elements , where the remedian of @xmath483 elements is the median , and is shown to be a robust estimator of the median @xcite , @xcite .",
    "a particular case of the remedian quicksort widely used in sorting applications is tukey s ` ninther ' , where the selected pivot is the median of three medians of three samples , each containing three elements @xcite , @xcite . in practical implementations ,",
    "this variant exhibits faster running time @xcite with little added overhead .",
    "specifically , the computation of the remedian of @xmath601 elements takes on average @xmath602 comparisons at each call  four times more than finding the median of @xmath12 randomly chosen keys .",
    "let @xmath603 denote the number of comparisons required for the complete sorting of an array of @xmath13 distinct keys , where the chosen pivot at each call is the remedian of a random sample of @xmath599 elements .",
    "the recurrence relation is much more complicated than the previous ones and the probability @xmath604 that the remedian of @xmath599 elements is the @xmath605-th element is @xmath606 where @xmath607 is the multinomial coefficient and @xmath608 is defined by @xmath609 with @xmath610 .",
    "see as well @xcite , where the ` splitting ' probabilities of @xmath611 remedian are presented .",
    "bentley s and mcilroy s experiments on the ` remedian of @xmath612 ' quicksort @xcite showed that the average number of key comparisons is @xmath613 , very close to the information ",
    "theoretic lower bound of @xmath614 .",
    "this quicksort utilises the ` ninther ' partitioning for large arrays , then the ` median of @xmath12 ' is used and as the algorithm proceeds , the partitioning strategy changes to the standard uniform pivot selection .",
    "the paper written by durand @xcite confirmed these experimental results , where the average number of comparisons is being given by @xmath615    from a theoretical point of view , this variant yields savings on the expected time needed for the sorting , with little additional cost of computing the remedian .",
    "however , the recurrences are quite involved , as the remedian has an inherent recursive definition",
    ". a different approach would be to randomly choose a larger sample and use its elements as pivots through complete sorting .",
    "an obvious advantage of this method , is that the cost of computing the median or remedian of a sample at each call of the algorithm is avoided and instead all the pivots for the subsequent calls belong in one sample .",
    "having examined the strategy of selecting the median of a sample as pivot and the more complicated ` remedian ' variant , we proceed to the analysis of samplesort algorithm invented by frazer and mckellar @xcite . instead to randomly select a sample of keys at each stage , computing the median and using it as pivot , a larger sample of @xmath616 keys is selected and extracted out of the array .",
    "it is sorted and its keys are being used as partitioning elements for the sorting of the array .",
    "first the median of the sample is used as pivot , then the lower quartile to the lower subarray and the upper one to the subarray of the elements that are greater than the median . when the sample is exhausted , the resulting subarrays can be recursively sorted by the same procedure or by standard quicksort .    for convenience ,",
    "let @xmath617 and let us denote the total number of comparisons of samplesort applied to @xmath13 keys by @xmath618 .",
    "then , @xmath618 is equal to the number of comparisons to sort the sample of @xmath616 elements , plus the number of comparisons to insert its elements to the remainder of the array , plus the number of comparisons required to sort the resulting @xmath464 subarrays , using ordinary quicksort @xcite . for the sorting of the sample , we use quicksort and",
    "the average number of comparisons is @xmath619    assume that the sorted sample is @xmath620 .",
    "first , the median @xmath621 is inserted to its final position in the array of @xmath622 keys , by pairwise comparisons of the @xmath623 keys to @xmath621 .",
    "the cost of partitioning is @xmath623 comparisons .",
    "then , the first quartile is inserted to the subarray of the elements less than the median @xmath621 and the third quartile to the subarray of the elements greater than @xmath621 .",
    "the cost of partitioning these two subarrays is @xmath623 comparisons , since the sum of their lengths is @xmath623 keys .",
    "the process is continued until all the elements of the sample are used as pivots and this will take @xmath624 partitioning stages .",
    "thus , an approximation to the average number of comparisons for the insertion of the sample is @xcite , @xcite , @xmath625    after all elements have inserted , there are @xmath626 subarrays to be sorted by quicksort .",
    "the expected number of comparisons is @xcite @xmath627 putting together eq .",
    "( 3.6 ) , ( 3.7 ) and ( 3.8 ) , we have that the expected number of comparisons of samplesort is @xmath628 for large values of @xmath13 , the expected number of comparisons is given by the following corollary .",
    "the asymptotic expected number of comparisons taken by samplesort for the sorting of an array of @xmath13 keys , using a randomly chosen sample of @xmath629 keys , is @xmath630    it is worthwhile to note that the programming of samplesort is simple and straightforward , thus making it a suitable candidate to sorting applications .",
    "it is proven in @xcite , that the procedure is asymptotically optimal , i.e. as @xmath452 , the expected number of comparisons approaches the information ",
    "theoretic bound .",
    "the process of randomly drawing the sample out of the array to be samplesorted should be carefully selected , to the effect that the elements of the sample will produce ` balanced ' partitions .",
    "the main feature of samplesort is that partitioning preserves the order of the sample , thus its keys are exchanged with the ones that they have to , so as to the exhaustion of the sample , its elements to be spread far apart .    in the direction of choosing a more ` centered ' sample",
    ", one can proceed by randomly selecting three samples  each containing three keys  and computing their medians , at an extra cost of @xmath631 comparisons . for the sorting of larger arrays ,",
    "the number of samples will obviously be greater .",
    "the medians will be used as elements of the sample and the remaining elements can be randomly chosen from the array .",
    "it should be noted , that this is an initial idea , lacking the mathematical analysis .",
    "albacea @xcite derived a modification of samplesort .",
    "this variant starts with @xmath4 key , that is used as pivot for the partition of @xmath57 keys , so to have a sorted array of @xmath12 keys .",
    "these keys are used as pivots for the partitioning of @xmath632 keys , so as to obtain a sorted array of @xmath633 keys and so on , until the whole array is sorted .",
    "it is proven @xcite that the estimated expected number of key comparisons is @xmath634 the derivation of the expected number of comparisons remains an open problem .",
    "in this chapter , different partitioning routines are analysed .",
    "these schemes utilise many pivots for the partitioning of the array and naturally arise as a generalisation of the algorithm .",
    "the pivots are chosen uniformly at random and the array is partitioned into more than two subarrays .",
    "there is an additional overhead of comparing the pivots before the partitioning , which adds very small contributions to the running time .",
    "the aim of this modification is twofold : first to study if the possibility of worst - case scenario of the algorithm can be reduced further and secondly , to provide a theoretical basis for the analysis of the generalisation of the algorithm .",
    "we show that the average case analyses of these variants can be fully described by a general recurrence model , which is transformed to a differential equation , whose solution provides the expected cost of these variants .",
    "further , we demonstrate that the integration constants involved in the solution , can be efficiently computed using vandermonde matrices .      along the following lines , we present a variant of quicksort , where @xmath57 pivots are used for the partitioning of the array .",
    "let a random permutation of the keys @xmath402 to be sorted , with all the @xmath59 permutations equally likely and let their locations in the array be numbered from left to right by @xmath402 .",
    "the keys at locations @xmath4 and @xmath13 are chosen as pivots and since all the @xmath59 permutations are equally likely to be the input , then all the @xmath635 pairs are equiprobable to be selected as pivots . at the beginning , the pivots are compared each other and are swapped , if they are not in order . if elements @xmath636 are selected as pivots , the array is partitioned into three subarrays : one with @xmath285 keys smaller than @xmath60 , a subarray of @xmath637 keys between two pivots and the part of @xmath218 elements greater than @xmath61 .",
    "the algorithm then is recursively applied to each of these subarrays .",
    "the number of comparisons during the first stage is @xmath638 for @xmath639 , and @xmath640 .",
    "note that in the specific partitioning scheme , each element is compared once to @xmath60 and elements greater than @xmath60 are compared to @xmath61 as well .",
    "the average number of comparisons for the partitioning of @xmath13 distinct keys is @xmath641    letting @xmath642 denote the number of comparisons of dual pivot quicksort applied to an array of @xmath13 items , the recurrence for the expected number of comparisons is @xmath643 note that the three double sums above are equal .",
    "therefore , the recurrence becomes @xmath644 letting @xmath645 , we have @xmath646 it holds that @xmath647 .",
    "multiplying both sides by @xmath648 , we obtain @xmath649 this recurrence will be solved by the difference method .",
    "we have @xmath650 applying the difference operator @xmath651 by definition , @xmath652 and the recurrence becomes @xmath653    dividing by @xmath277 , we obtain the telescoping recurrence @xmath654 which yields @xmath655 the recurrence is equivalent to @xmath656 multiplying by @xmath657 , this recurrence is transformed to a telescoping one @xcite , @xmath658 unwinding , we have @xmath659    the second sum of eq . ( 4.1 ) is @xmath660 thus @xmath661 the expected number of comparisons , when two pivots are chosen is @xmath662 this is exactly the same as the expected number of comparisons for ordinary quicksort .    next , the expected number of key exchanges will be computed .",
    "the exchanges during partitioning are performed as follows .",
    "set two pointers @xmath663 , @xmath664 and store temporarily the pivots in another array of size two , so the cells at locations @xmath4 and @xmath13 are empty , leaving two `` holes '' .",
    "after the pivots are sorted by one comparison , the key at position @xmath57 is compared to the first pivot ( i.e. the smaller of the two pivots ) ; if it is less than the pivot , it is put into the left hole , which now is moved one position to the right and @xmath629 is increased by one . if it ( i.e. the key at position @xmath57 ) is greater than the first pivot , it is compared to the second pivot ( i.e. the greater of the two pivots ) .",
    "if it is less than the second pivot , @xmath629 is increased by one , otherwise @xmath629 stops .",
    "now , the @xmath665 pointer starts its downward scan .",
    "if an examined key is greater than both pivots , it is put into the right hole , which is moved one position to the left and @xmath665 is decreased by one .",
    "if a key is less than the second pivot and greater than the first , then @xmath665 is decreased by one . in case",
    "that a key is less than the first pivot , then @xmath665 stops its scan and the key that is greater to the second pivot , where @xmath629 has stopped is put to the right hole , which is moved one position to the left and the key where @xmath665 has stopped is put to the left hole , which is moved one position to the right .",
    "then , @xmath629 is increased by one , @xmath665 is decreased by one and @xmath629 resumes its scan .",
    "when pointers are crossed , the first pivot is put to the left hole , the second pivot is put to the right hole and partition is completed , since keys less than the first pivot are on its left , keys between two pivots on the middle and keys greater than the second pivot are on its right subarray .",
    "note that the auxiliary space required for the storing of pivots is @xmath666 , since at the end of the partition routine , the pivots are moved back to the array and two other new pivots can be stored , as the algorithm operates on a given subarray .",
    "we refer to @xcite for further details of this scheme .",
    "the average number of swaps during the first stage is @xmath667 since @xmath285 keys are less than pivot @xmath60 .",
    "thus , the average contribution is @xmath668 for the @xmath218 keys greater than @xmath61 the average value is the same , because the sums are equal . adding the two final `` exchanges '' to get the pivots in place , the average number of exchanges during the partitioning routine is @xmath669 .",
    "letting @xmath670 denote the number of exchanges of dual pivot quicksort , the recurrence for the mean number of exchanges in course of the algorithm is @xmath671 multiplying both sides by @xmath648 , @xmath672",
    "this recurrence is solved in @xcite : here we present a solution using generating functions .",
    "letting @xmath673 and @xmath674 be the generating function of the average number of exchanges , the recurrence is transformed to the following differential equation : @xmath675 the double sum is equal to @xmath676 and our differential equation becomes @xmath677    changing variables @xmath678 , we have @xmath679 .",
    "thus , @xmath680 the differential equation can be simplified by multiplying both sides by @xmath681 , @xmath682 an elementary approach to solving this differential equation , is to assume that the solution is of the form @xmath683 @xcite . substituting the `` trial solution '' to eq .",
    "( 4.2 ) , the characteristic or indicial polynomial is @xmath684 with roots @xmath685 and @xmath686 .",
    "thus , the solution to the corresponding homogeneous equation is @xmath687 , with @xmath688 . a particular solution of eq .",
    "( 4.2 ) , which can be found e.g. using the method in @xcite , is @xmath689 by the initial conditions @xmath690 , the solution is @xmath691    in the next section , we will examine the generalised version of this differential equation .",
    "reverting to variable @xmath313 and discarding terms for @xmath692 , we see that , expanding out the fraction term as a series , @xmath693 finally , the mean number of swaps of dual pivot quicksort is @xmath694 which is nearly @xmath695 times greater than the expected number of exchanges of standard quicksort .",
    "the recurrence for the number of partitioning stages @xmath696 is much simpler ; @xmath697 by the same reasoning , as in the derivation of the expected number of exchanges , the solution is @xmath698      it is desirable to compute the variance of the number of key comparisons of dual pivot quicksort , as this measure provides a grip of the deviation of the random number of comparisons from its expected value . by the recursive relation",
    ", we have @xmath699 noting that the resulting subarrays are independently sorted , the above is @xmath700 letting @xmath701 be the ordinary probability generating function for the number of comparisons needed to sort @xmath13 keys , we obtain @xmath702    it holds that @xmath703 and @xmath704 .",
    "the second order derivative of eq .",
    "( 4.3 ) evaluated at @xmath212 is recursively given by @xmath705 the fourth and fifth sum turn out to be equal and by simple manipulation of indices , the sums involving products of expected values are equal .",
    "the double sum of the product of the mean number of comparisons can be simplified as follows , using corollary 2.3.5 : @xmath706 further , using @xmath707 , @xmath708 the four sums can be evaluated using corollary @xmath12 in @xcite .    after some computations in maple , that can be found in appendix a , the recurrence is @xmath709 subtracting @xmath710 from @xmath711 , we have @xmath712 using the identity @xcite",
    "@xmath713    also , it holds that @xmath714 the left - hand side of the previous equation is the same as @xmath715 and the recurrence becomes @xmath716 dividing by @xmath277 , we obtain the telescoping recurrence @xmath717 with solution @xmath718 which is equivalent to @xmath719    again as before , multiplying both sides by @xmath657 , the recurrence telescopes with solution @xmath720    using the well known fact that @xmath721 the variance of the number of key comparisons of dual pivot quicksort is @xmath722 note that the variance of dual pivot quicksort is identical with the variance of ordinary quicksort . in the next subsection",
    ", we provide the theoretical explanation of this fact .",
    "our results have shown that dual pivot quicksort has the same expected number of comparisons , and the same variance , as in the case of ` one - pivot ' quicksort .",
    "thus , it is natural to ask if the two random variables have the same distribution .",
    "we now show this , after an argument sketched by prof .",
    "colin mcdiarmid @xcite .",
    "suppose that an array of @xmath13 distinct keys @xmath723 is to be sorted by quicksort and let , as usual , @xmath81 be the random number of comparisons required for the sorting . obviously , @xmath724 , @xmath725 and for @xmath325 we pick uniformly at random an ordered pair of distinct indices @xmath726 in @xmath727=\\{1 , 2 , \\ldots , n\\}$ ] and we use @xmath728 as the first pivot .",
    "given that @xmath729 , the pivot @xmath730 partitions the array of @xmath13 keys to the subarray of @xmath285 keys less than @xmath730 and to the subarray of @xmath286 keys greater than @xmath730 by @xmath368 comparisons .    given that @xmath729 , if @xmath731 , then @xmath732 is a uniformly at random chosen pivot from the subarray of @xmath285 elements less than @xmath730 . in this case , for @xmath729 and @xmath733 , the subarray of @xmath285 keys is partitioned to the subarray of @xmath217 keys less than @xmath734 and to the subarray of @xmath735 keys greater than @xmath734 by @xmath736 comparisons .",
    "note that @xmath736 keys are compared to both pivots in two partitioning stages .",
    "therefore , the following recurrence holds : @xmath737 where @xmath738 , @xmath739 and @xmath740 are independent copies of @xmath81  that is , are random variables with the same distribution as @xmath81 , independent of it and each other .    if @xmath741 , then @xmath732 is a uniformly at random selected pivot from the subarray of @xmath286 keys greater than @xmath730 . given that @xmath729 and @xmath733 , the subarray of @xmath286 keys is partitioned to the subarray of @xmath637 keys less than @xmath734 and to the subarray of @xmath218 keys greater than @xmath734 by @xmath742 comparisons .",
    "the recurrence relation is @xmath743 where as in the previous recurrence , @xmath738 , @xmath739 and @xmath740 are independent copies of @xmath81 .",
    "observe that @xmath744 thus for any two pivots selected uniformly at random , the recurrences are the same .",
    "recall that for the random number of comparisons @xmath642 of dual pivot quicksort , it holds that @xmath745 , @xmath746 and for @xmath325 we choose uniformly at random an ordered pair of distinct indices @xmath726 in @xmath727=\\{1 , 2 , \\ldots , n \\}$ ] .",
    "the pivots @xmath728 and @xmath732 are sorted by one comparison and we assume that its outcome is @xmath747 . given that @xmath729 and @xmath733 , the array is partitioned to the subarray of @xmath285 keys less than @xmath730 , the subarray of @xmath637 keys between two pivots and the subarray of @xmath218 keys greater than @xmath734 . since keys greater than @xmath730 are compared with the other pivot as well ,",
    "the recurrence for the random number of comparisons is @xmath748 where @xmath749 , @xmath750 and @xmath751 are independent copies of @xmath642 .",
    "note that when @xmath752 , the recurrence is the same .",
    "thus , since dual pivot quicksort and ordinary quicksort satisfy the same recurrence and have the same initial conditions for @xmath326 , we deduce that the random variables @xmath642 and @xmath81 are identically distributed",
    ".      a natural extension of having two pivots would be to have some other number @xmath48 of pivots . here",
    ", we study the idea of randomly picking @xmath48 pivots @xmath753 and partitioning the array simultaneously according to these .    again ,",
    "let a random permutation of the array @xmath754 be given to be sorted using this variant , with all the @xmath59 permutations equally likely to be the input .",
    "the @xmath48 rightmost keys are chosen as pivots , are compared to each other and exchanged , if they are out of order .",
    "the sorting of the pivots can be efficiently implemented by insertion sort . since all @xmath59 permutations of the keys are equally likely to be the input , this amounts to the fact that any @xmath48-subset of keys has equal probability to be selected .",
    "the remaining @xmath755 keys are compared to the pivots and the array is partitioned to @xmath756 subarrays .",
    "the partitioning can be performed as follows .",
    "we compare the leftmost key to a randomly chosen pivot ; if it is smaller than this pivot , it is compared with another smaller pivot ( if one exists ) .",
    "otherwise it is compared with a larger pivot ( to the right ) and after a series of comparisons , is inserted to its place between any two pivots , or to the left of the smallest pivot or to the right of the greatest pivot .",
    "we continue in the same fashion , until all keys are examined .    in @xcite ,",
    "each of the @xmath755 keys is compared to the pivots by binary search , so a key is compared first to the median of the sorted array of the pivots .",
    "if it is less , is compared with the first quartile , otherwise is compared with the third quartile and after a series of comparisons is inserted to its position . in worst case , it takes @xmath757 comparisons for the insertion of a key .",
    "then , multipivot quicksort is recursively applied to each of the resulting segments that contains at least @xmath756 keys and arrays with less than @xmath756 keys are sorted by insertion sort in @xmath77 time .",
    "this is equivalent to @xmath756-ary search trees , which is a generalisation of binary trees . indeed ,",
    "if @xmath758 , the @xmath48 pivots are stored in the root node of the tree in increasing order and the remaining @xmath755 keys are placed in the resulting @xmath756 subtrees of the root . in case that @xmath82 , the tree is empty and if @xmath759 , the tree has a single node , which stores the keys in order . under the assumption of uniformity , this is a @xmath756-random tree of @xmath13 nodes  see the article of chern _ et al . _ @xcite and mahmoud s book @xcite for the correspondence between trees and variants of quicksort .",
    "let @xmath760 denote the expected cost of the algorithm applied to an array of @xmath13 keys .",
    "we deliberately allow some flexibility in the form of cost ; a typical example might be the number of comparisons .",
    "the expected cost of this variant is recursively given by @xmath761 where @xmath762 are the pivots in increasing order , @xmath763 is the average value of a `` toll function '' @xmath764 during the first recursive call and @xmath765 denotes the average cost for sorting the subarray of @xmath766 elements less than @xmath767 by multipivot quicksort on @xmath48 pivots .",
    "though this looks a complex @xmath48-index summation , the recursion can be simplified , by noting that the pivots are randomly selected and the sums are equal , @xmath768 multiplying both sides by @xmath769 , the recurrence relation becomes @xmath770 for notational convenience , let @xmath771 and consider the generating function @xmath772 ; @xmath773 the recurrence is transformed to a @xmath48-th order differential equation @xmath774 since it can be easily seen by induction that the @xmath48-th order derivative of @xmath775 is @xmath776    multiplying by @xmath777 , the differential equation is simplified to @xmath778 this differential equation is an equidimensional cauchy  euler equation , as the one encountered in the previous chapter .",
    "changing variables @xmath503 , it is @xmath779 .",
    "applying the differential operator @xmath16 , where @xmath780 , the differential equation becomes @xmath781 and the indicial polynomial @xmath782 is equal to @xmath783 using the notation from @xcite , @xmath784 with @xmath785 , denotes the falling factorial .",
    "again , we need a lemma regarding the roots of the indicial polynomial .",
    "the indicial polynomial @xmath782 has @xmath48 simple roots with real parts in the interval @xmath786 $ ] .",
    "the real roots are @xmath512 ; @xmath756 , if @xmath48 is even and the @xmath787 complex roots @xmath788 with their conjugates @xmath789    let @xmath790 be a root of the polynomial .",
    "it holds @xmath791 suppose that @xmath792",
    ". then @xmath793{\\vdots } }   \\\\",
    "\\left \\vert \\frac{\\alpha-(k-1)}{-(k+1 ) } \\right \\vert & =   \\frac { \\sqrt{\\bigl ( x-(k-1 ) \\bigr)^{2}+y^{2}}}{k+1 } >   \\frac{\\sqrt{\\bigl ( -(k+1 )",
    "\\bigr ) ^{2}+y^{2}}}{k+1 } \\geq 1.\\end{aligned}\\ ] ] considering the moduli in eq . ( 4.5 ) , we see that the left - hand side is a product of numbers which are all greater than @xmath4 , and so the overall product is greater than @xmath4 , but the right - hand side is equal to @xmath4 , leading to contradiction .",
    "therefore every root has real part greater than or equal to @xmath512 .",
    "further , looking over the same argument , we see that the only way we can have the real part being equal to @xmath512 is if the imaginary part is equal to zero .    by the fundamental theorem of algebra a polynomial of degree @xmath13",
    "has @xmath13 complex roots with multiplicities .",
    "note that @xmath512 is always a simple root since , @xmath794 suppose that @xmath466 is a repeated root .",
    "since @xmath795 , we can write @xmath796 with @xmath797 . by the above comments we have that @xmath798 in particular , @xmath799 .",
    "but that imaginary part is equal to @xmath800 which is clearly only equal to zero if @xmath801 i.e. the root is real .",
    "we will thus have obtained our contradiction if we can show that there are no real roots other than @xmath512 and ( for @xmath48 even ) @xmath592 .    to do this ,",
    "suppose that we did have a real root @xmath802 .",
    "we note first that @xmath803 : because if not , then since @xmath512 is also a root , there is a root of @xmath804 between @xmath512 and @xmath8 by rolle s theorem .",
    "but since @xmath805 implies that @xmath806 and when @xmath807 this number is clearly negative .",
    "thus any real root @xmath466 is positive .",
    "it is also @xmath808 as if it were greater than @xmath592 we would have @xmath809 .",
    "further , note that @xmath592 is a root if and only if @xmath48 is even and there can not be a root in @xmath810 as the product @xmath811 would be @xmath812 .",
    "suppose then that @xmath813 for some @xmath814 .",
    "then the product of the non - negative numbers in the sequence @xmath815 is at most @xmath816 .",
    "thus , to get @xmath466 being a root , we have to have that @xmath817 however the largest in modulus of @xmath818 is @xmath819 and so their product is less than @xmath820 .",
    "consequently our inequalities together imply @xmath821 and this is a contradiction , completing the proof .",
    "the differential equation can be written as @xmath822 letting @xmath823 and the remaining @xmath824 simple roots be @xmath825 , we have @xmath826 for the solution of our differential equation , let two functions @xmath827 .",
    "then @xmath828 and by the property of linearity of differential operator @xmath829 in the same manner as in the analysis of ` median of @xmath483 ' quicksort , applying @xmath48 times the solution , we obtain @xmath830 where @xmath831 and @xmath832 are constants of integration . in order to evaluate @xmath833 , note that @xmath834 thus @xmath835 moreover , @xmath836    combining both solutions , @xmath837 where @xmath838 . the constants of integration can be found solving the following system of equations @xmath839 in terms of series ; @xmath840 the third sum of eq .",
    "( 4.7 ) adds to the solution a constant negligible contribution .",
    "also , the root @xmath756 , when @xmath48 is even , contributes a constant and the root @xmath841 , adds @xmath842 , with @xmath843 extracting the coefficients , the expected cost of multipivot quicksort is @xmath844    the asymptotics of the last sum can be found by the well - known stirling s formula , that states @xcite @xmath845 expressing the binomial coefficient in terms of @xmath310 functions , we have @xmath846 the relation 6.1.26 in @xcite reads for @xmath847 @xmath848 thus @xmath849 using stirling s formula , @xmath850 where @xmath851 is an unimportant constant .    therefore the term is bounded by @xmath852 and asymptotically , the expected cost is @xmath853 since all the other roots have real parts greater than @xmath512 .    knowing the coefficients , any mean cost of the generalisation of the algorithm can be directly computed , using this solution , which assumes a simple form .",
    "these coefficients are related to the number of pivots used during the partitioning scheme . in @xcite ,",
    "the average number of comparisons of the first stage is given by : @xmath854 where @xmath855 denotes the number of partitions , when @xmath856 pivots are used or equivalently the maximum number of descendants of a node of an @xmath855ary tree .",
    "the coefficient @xmath857 is equal to @xmath858 thus , the average number of comparisons of quicksort on @xmath48 pivots is @xmath859      the constants of integration can be found using vandermonde matrices .",
    "differentiating @xmath189 times eq .",
    "( 4.6 ) , @xmath860 the result can be easily proven by induction or by leibniz s product rule . using the initial conditions ,",
    "namely that @xmath40 and its first @xmath824 derivatives are @xmath8 when evaluated at @xmath212 , we obtain @xmath861 for @xmath862 . in matrix form ,",
    "the linear system is    @xmath863    here we use the well - known identity @xmath864 @xcite , where @xmath865 are the stirling numbers of the second kind , to transform the coefficient matrix into a vandermonde matrix .",
    "the determinant of this vandermonde matrix is equal to @xmath866 as the roots are all simple . considering the expected number of passes of multipivot quicksort",
    ", it holds that @xmath867 and @xmath868 , for @xmath869  .",
    "the system is , @xmath870 turning the coefficient matrix into a vandermonde one and using the identity @xmath871 , ( see subsection 24.1.4 in @xcite ) , we obtain @xmath872    in @xcite and @xcite the inverse of vandermonde matrix is given , in terms of product of an upper and lower triangular matrices . letting @xmath873 denote the inverse , it is equal to @xmath874 it is clear that the lower triangular matrix , post  multiplied by the vector @xmath875 , will give us @xmath876 thus , the solution is @xmath877 and the expected number of partitioning stages of multipivot quicksort on @xmath48 pivots is @xmath878    note that @xmath879 therefore the mean number of partitioning stages is @xmath880 we remark that a generalised version of this result can be found in @xcite . in @xcite , it was shown that the constants of integration can be computed for arbitrary values of the coefficients @xmath881 and @xmath882 by the same method , as in the derivation of the integration constants in the simple case of @xmath883 and @xmath884 .",
    "at the end of this section , it should be noted that the worst - case probability is not eliminated , but is less likely to occur . in an unfortunate situation , where the @xmath48 smallest or greatest keys are selected as pivots ,",
    "partitioning will yield trivial subarrays and one containing the remaining elements .",
    "if the chosen pivots happen to be close to the quantiles of the array , this yields an optimal partitioning of the array . in the next section , we examine ways of a more efficient selection of pivots .      the preceding analysis of multipivot quicksort , where @xmath48 pivots are uniformly selected at random has showed that the worst - case scenario is less likely from the standard ` one  pivot ' model . is any other way , where we can reduce further the probability of such scenario ?",
    "we have seen that choosing the median from a random sample of the array to be sorted , yields savings to the running time of the algorithm .",
    "since we have examined the analysis of multiple pivots , then we can select these pivots as the quantiles of a bigger random sample .",
    "thus , one can randomly choose a larger sample of @xmath885 keys , find the @xmath886-st , @xmath626-th , ",
    ", @xmath887-th smallest keys and use these @xmath824 statistics as pivots .",
    "note that for @xmath888 , this variant contains the median of @xmath624 quicksort as a special case and for @xmath889 , we have the multipivot algorithm , whose mathematical analysis was presented in the previous section .",
    "this ` generalised quicksort ' was introduced by hennequin @xcite .",
    "let @xmath890 be the average of a `` toll function '' during the first pass and @xmath891 the total expected cost of this variant , when applied to an array of @xmath13 keys .",
    "the following recurrence ( which is not presented so simply in hennequin ) holds : @xmath892 since the pivots @xmath893 are selected to be the @xmath886-st ,  , @xmath887-th smallest keys of the sample and each of the @xmath48 resulting subarrays @xmath894 contain @xmath895 elements of the sample .",
    "as before , the general recurrence of average cost is translated to a differential equation with indicial polynomial @xcite , @xmath896 a lemma follows concerning the whereabouts of the roots of this polynomial :    the indicial polynomial @xmath897 has @xmath885 simple roots , with real parts greater than or equal to @xmath512 .",
    "the real roots are the integers @xmath898 , @xmath512 ; @xmath899 , when @xmath895 is odd and @xmath48 is even or when @xmath895 is even and @xmath48 is odd and the @xmath900 complex roots @xmath901 with their conjugates @xmath902 .",
    "it can be easily deduced that the integers @xmath898 and @xmath512 are roots of the polynomial .",
    "now , when @xmath895 is odd and @xmath48 is even , then @xmath885 is odd and so a root @xmath466 of the polynomial will satisfy @xmath903 and by simple manipulations we can now verify that @xmath899 is also a root . similarly ,",
    "if @xmath895 is even and @xmath48 is odd , we have that @xmath885 is even and eq . ( 4.8 ) is valid , again making @xmath899 a root .",
    "it will be proved by contradiction that all roots have real parts greater than or equal to @xmath512 .",
    "note that the argument is similar with the proofs of lemmas 3.1.1 and 4.2.1 . for any root @xmath904 , with @xmath905 holds @xmath906 for @xmath907 , eq .",
    "( 4.9 ) can be written as @xmath908 assume that @xmath909 , then @xmath910{\\vdots } }   \\\\",
    "\\left \\vert \\frac{r-\\bigl(k(t+1)-2\\bigr)}{k(t+1)-1 } \\right \\vert & =   \\frac { \\sqrt{\\bigl ( x - k(t+1)+2\\bigr)^{2 } + y^{2}}}{k(t+1)-1 } >   \\frac{\\sqrt{\\bigl ( -k(t+1)\\bigr ) ^{2}+y^{2}}}{k(t+1)-1 } \\\\ & \\qquad { } \\geq \\frac{k(t+1)}{k(t+1)-1}.\\end{aligned}\\ ] ] considering the product of moduli , we see that the left - hand side of eq .",
    "( 4.10 ) is greater than or equal to ( in modulus ) the telescoping product @xmath911 , which gives a contradiction .",
    "further , this argument shows that @xmath512 is the unique root with the least real part .",
    "we now show the roots are simple .",
    "assuming , for a contradiction , that @xmath912 is a repeated root , we get : @xmath913 eq .",
    "( 4.9 ) and ( 4.11 ) imply that @xmath914 or @xmath915 from eq . ( 4.12 ) , we deduce that @xmath916 and @xmath917 .",
    "however , the modulus in the left - hand side of eq . ( 4.9 ) is smaller than @xmath4 , while the right - hand side is greater than @xmath48 , proving that all roots are simple .    by the lemma",
    ", the polynomial can be written in terms of simple factors and the differential equation can be solved using the same way , as in other variants of quicksort , previously analysed .",
    "the average cost of ` generalised quicksort ' is @xmath918 when the `` toll function '' is linear and its average is @xmath919 .",
    "our analyses of the average cost of the algorithm and its variants has showed that any quicksort needs on average @xmath920 key comparisons for the complete sorting of a file consisting of @xmath13 distinct keys .",
    "the constant @xmath6 can be made very close to the information ",
    "theoretic bound , as we saw . in many sorting applications the ` median of @xmath12 ' is being used , with savings on the average time and little overhead for the computation of median . for large arrays",
    ", one can use the ` remedian of @xmath612 ' quicksort .",
    "here , we investigate the analysis of quicksort under the assumption of prior information of the order of keys . specifically , we assume that there is a partial order on the keys .",
    "the rough idea is to see how much having partial information compatible with the true order allows us to speed up the process of finding the true order .",
    "let us illustrate the idea first with a simple example .",
    "suppose that there are @xmath921 levels with @xmath48 keys at each level , so that @xmath922 .",
    "anything in a higher level is known to be above everything in a lower level .",
    "computing the ratio of the expected complexities , we have @xmath923 where @xmath924 and @xmath81 denote the number of comparisons of quicksort with uniform pivot selection and in case of partial order , respectively .",
    "we consider the following cases :    1 .   when d is fixed number , then as @xmath13 tends to infinity , @xmath925 thus , @xmath926 2 .",
    "@xmath928 we see that quicksort is on average twice as fast , when sorting a partially ordered array .",
    "@xmath929 where @xmath37 is a constant . then , @xmath930    where @xmath931 .    we should think a little about variability too .",
    "it is unsurprising that having the additional information about levels reduces variability of the number of comparisons , let us get a preliminary result . if we have the level structure , then @xmath932 is the sum of the variances of sorting each of the @xmath921 independent levels .",
    "each of these variances , since there are @xmath48 keys in each level , is just @xmath933 . for simplicity , we assume @xmath934 as @xmath935 and do asymptotics .",
    "we then have ( for @xmath189 either @xmath13 or @xmath48 ) @xmath936 and thus we get @xmath937 so the variance of the version with the presorting is reduced by a factor of about @xmath921 .",
    "these suggest there is interest in studying this situation , we now do so in more detail .",
    "an approach of having additional information is the partial order of the keys .",
    "we shall employ this assumption along the following lines .",
    "first , we present a definition @xcite .",
    "let a finite set @xmath938 equipped with a binary relation ` @xmath939 ' which has the following properties .",
    "( here , @xmath11 , @xmath578 and @xmath313 are elements of @xmath938 ) . (",
    "i ) @xmath940 , @xmath941 .",
    "( that is , @xmath942 is reflexive ) + ( ii ) if @xmath943 and @xmath944 , then @xmath945 .",
    "( @xmath939 is antisymmetric ) + ( iii ) if @xmath946 and @xmath947 , then @xmath948 .",
    "( @xmath939 is transitive ) + then the pair ( p , @xmath939 ) is called partially ordered set .    henceforth , in this thesis we abbreviate ` partially ordered set ' to ` poset ' .",
    "we also present two key definitions @xcite .",
    "let @xmath949 be a poset .",
    "we say that two elements @xmath11 and @xmath578 of this poset are comparable if @xmath943 or @xmath944 .",
    "otherwise they are incomparable .",
    "let @xmath949 be a poset .",
    "( i ) a minimal element of @xmath949 , is an element with the property that no other element is smaller than it .",
    "a maximal element of @xmath949 , is an element with the property that no other element is greater than it .",
    "+ ( ii ) a chain in @xmath938 is a set @xmath950 of elements , where every pair of elements of @xmath950 are comparable .",
    "the number of elements of @xmath938 in the longest chain in @xmath938 is called the height of @xmath938 and denoted by @xmath951 . + ( iii ) an antichain in @xmath938 is a set @xmath952 of elements , no two of which are comparable .",
    "the number of elements of @xmath938 in the order of the largest antichain is called the width of @xmath938 , and is denoted by @xmath953 .",
    "+ ( iv ) a total order in @xmath938 is a partial order where every pair of elements are comparable .",
    "for example , the set of subsets of @xmath954 has an antichain of order @xmath57 , namely @xmath955 and @xmath956 .",
    "a chain of length 3 in it , is @xmath957 .",
    "this partial order is not a total order as @xmath955 and @xmath956 are not comparable",
    ". usually , if we have a partial order on a set , there will be several ways of extending it to a total order on that set .",
    "often , we will use @xmath958 rather than @xmath959 to denote the partial order .",
    "further , we present the following definition , that we will come across later .    let a poset ( p , @xmath939 ) .",
    "its comparability graph @xmath960 is the graph with the poset s vertex set , such that the elements are adjacent if and only if they are comparable in ( p , @xmath939 ) .",
    "its incomparability graph @xmath961 is the graph , such that the elements are adjacent if and only if they are incomparable in ( p , @xmath939 ) .",
    "another example of a partial order which usually is not a total order is the collection of subsets of a fixed set @xmath143 , with the partial order @xmath939 being inclusion , normally denoted as @xmath962 .",
    "it is easy to check that , for any @xmath963 , we have that @xmath964 since any set is a subset of itself : if @xmath965 then we indeed have that @xmath966 , giving asymmetry : and finally , if @xmath967 then of course @xmath968 and so @xmath939 will be transitive .",
    "this is not a total order if @xmath143 has order at least 2 , as @xmath969 and @xmath970 are not comparable for @xmath971 members of @xmath143",
    ". however , when we have a partial order on a set @xmath938 there will be at least one total order on @xmath938 extending it , and in fact usually there will be several such :    a linear extension of a partial order @xmath972 is a total order @xmath959 on the set @xmath938 such that whenever @xmath973 in the partial order , then we have @xmath974 in the total order too . the number of linear extensions of a poset @xmath938 is denoted by @xmath975 .",
    "in other words , a linear extension of a partial order is a total order on the same set which is compatible with the partial order .",
    "this is of course of great relevance to us , as the situation we are in is that we are given partial information on the true order of the set of elements and want to know how many more pairwise comparisons we have to do to work out the true order on it : that is , we are trying to identify which of the numerous linear extensions of the partial order is the true order on it , with as few comparisons as possible .",
    "the number of linear extensions of a poset can vary substantially according to the structure of the poset .",
    "for example , trivially , if the partial order happens already to be a total order there is only one extension , namely itself . equally trivially , if the partial order contains no comparisons ",
    "i.e. it provides no information whatsoever ",
    "then all @xmath59 possible orderings of the @xmath13 elements of @xmath938 are linear extensions .",
    "here is a generic lower bound on the number of pairwise comparisons we need to make in order to find the true order of our data , given a partial ordering @xmath938 of it .    given a partial order @xmath972 which is partial information about the true total order on the underlying set @xmath938 , it takes at least @xmath976 pairwise comparisons to find the total order .",
    "recall that linear extension or total order of a poset @xmath972 is a total order compatible with the partial one .",
    "all elements are comparable , forming a unique chain .",
    "now let @xmath11 , @xmath578 be incomparable , distinct members of poset . in @xmath5 total orders , we will have that @xmath974 and in @xmath977 linear extensions , @xmath978 .",
    "it holds that @xmath979 so , @xmath980 thus , after making one comparison , there are at least @xmath981 candidates .",
    "similarly , of those number of linear extensions , choosing again two elements , we have to consider at least @xmath982 total orders .",
    "thus , after @xmath912 comparisons , we will examine at least @xmath983 linear extensions .",
    "we want to identify the unique total order among the number @xmath975 of all possible linear extensions .",
    "therefore , this fraction becomes equal to unity when @xmath984 comparisons .",
    "the quantity @xmath985 is the information ",
    "theoretic lower bound , that we first came across in section @xmath986 .",
    "kislitsyn @xcite and independently fredman @xcite , showed that often this lower bound is close to the truth .    sorting an array of @xmath13 keys , which obeying a partial order @xmath938 ,",
    "can be achieved in worst case by @xmath987 comparisons .    if @xmath938 is a poset for which @xmath988 grows faster than @xmath13 , we have that the number of comparisons of finding the true total order , in worst case , is @xmath989 .",
    "we have that this quantity is bounded below by @xmath988 and above by @xmath990 which is @xmath989 by the assumption in the statement of the corollary .",
    "kahn and kim @xcite gave an algorithm for actually doing the finding of the true total order , which uses at most @xmath991 comparisons .",
    "this has recently been reproved by cardinal _",
    "@xcite whose proof manages to avoid kahn and kim s use of the ellipsoid method , a technique which though it is in theory polynomial - time , is difficult to do in practice .",
    "what all this makes clear is that , in considering how much information we can deduce from a random partial order , we will need to know about the logarithm of the number of linear extensions the partial order typically has .    often",
    "a useful notion in studying posets is the theory of levels , @xcite , @xcite .",
    "if @xmath949 is a poset , we define @xmath992 the set of minimal elements of our poset to be the first level of our poset .",
    "the next level is the set of minimal elements in @xmath993 : each of these will have ( at least one ) element of @xmath994 below it .",
    "we then continue by induction , defining @xmath995 to be the level of minimal elements of @xmath996 .",
    "note that every level of a poset is an antichain : for two minimal elements in a poset can not be comparable with each other .",
    "moreover , every time you go up in a chain , you go up to a higher level .",
    "thus the height of the poset will be the number of levels .",
    "the linear sum of two posets @xmath997 and @xmath998 is a poset with vertex set the disjoint union of @xmath999 and @xmath1000 and with @xmath973 if and only if : + ( i ) if @xmath11 and @xmath578 are in @xmath999 and @xmath1001 : + ( ii ) if @xmath11 and @xmath578 are in @xmath1000 and @xmath1002 : + ( iii ) if @xmath1003 and @xmath1004 , then automatically we have @xmath1005 .    a useful definition for us will be the following @xcite .",
    "+   ( i ) suppose @xmath938 is a partially ordered set , and @xmath1006 is a particular total order on the same set which agrees with @xmath938 on every pair of elements which are comparable in @xmath938 .",
    "( in other words , @xmath1006 is one of the linear extensions of our partial order ) .",
    "then a setup is a pair @xmath1007 of elements which are incomparable in @xmath938 but are consecutive in @xmath1006 .",
    "+ ( ii ) the number of setups @xmath1008 which must be made comparable to obtain the linear extension @xmath1006 is denoted @xmath1009 .",
    "+ ( iii ) the setup number of @xmath938 is the minimum , over all the linear extensions @xmath1006 of @xmath938 , of @xmath1009 and it is denoted @xmath1010 .",
    "so the point is that , if information is given in the partial order @xmath938 and using pairwise comparisons to obtain the rest of the order , @xmath1010 is a lower bound on the number of comparisons which have to be done to find the true order .",
    "the setup number is also known as the jump number .",
    "the following lemma is used for the derivation of a simple lower bound on the setup number of a poset .    the minimum number of chains into which a poset @xmath938 can be partitioned is the width @xmath953 .",
    "this is standard and there are several proofs , we refer to @xcite .    for any poset @xmath938 , @xmath1011 .",
    "the best case is to partition the poset into @xmath953 chains @xmath1012 and hope that there is some ordering of these chains ( which without loss of generality is the order given ) such that every element in @xmath1013 is less than the minimum element of @xmath1014 for each @xmath1015 . because if this happens , then the total order is just the direct sum of the @xmath1013 and we only have to do @xmath1016 comparisons of the maximum element of @xmath1013 with the minimum element of @xmath1014 .",
    "what we will do for the next while is consider various ways in which we could have a partial order given to us before we start using quicksort to determine the complete order .",
    "so we are imagining that a previous researcher had carried out some of the comparisons and we want to know how many more comparisons we have to carry out to determine the total order .",
    "we will consider cases where the poset is randomly generated .",
    "a uniform random partial order is a partial order selected uniformly at random from all the partial orders on @xmath1017 .",
    "this means that all partial orders on @xmath1018 are equally likely to be chosen .",
    "the basic structural result on such posets is the following , rather surprising , one .",
    "[ kleitman and rothschild @xcite .",
    "alternative proof by brightwell , prmel and steger @xcite ] suppose that @xmath939 is a uniform random partial order on @xmath1019 .",
    "then , * whp . *",
    "( henceforth , ` * whp . * ' stands for ` with high probability ' , which denotes the fact that as @xmath452 , the probability of an event approaches @xmath4 ) there are three levels : the bottom level has approximately @xmath73 elements in it , the middle layer approximately @xmath72 elements and the top layer about @xmath73 elements in it .",
    "this feature of a uniform random partial order  that it has height only @xmath12  is surprising to most mathematicians when they hear it , and perhaps suggests that `` in nature '' posets do not occur uniformly at random ",
    "some posets are favoured over others .",
    "here is the key information on the number of linear extensions .    given any function @xmath79 tending to infinity with @xmath13 ( think of it as doing so extremely slowly ) the number of linear extensions of a random partial order chosen uniformly at random is * whp . * , between @xmath1020    we refer to brightwell @xcite , page 66 .",
    "when @xmath938 is selected uniformly at random , we have * whp . *",
    "@xmath1021    in other words , in this situation , the entropy lower bound on the number of comparisons required is essentially the right answer .",
    "we have by the previous result , taking @xmath79 to go to infinity very slowly , in particular more slowly than @xmath55 , that @xmath1022 as required .    using this corollary",
    ", a key result follows regarding algorithm s time complexity :    given a uniform partial order on a set of @xmath13 keys , the time taken to sort them by pairwise comparisons is approximately @xmath1023 times the number of comparisons required by quicksort to sort them without the partial information .",
    "the expected number of comparisons required by quicksort for the sorting of @xmath13 keys is @xmath1024 , and since the variance of this is asymptotically @xmath1025 , we have by chebyshev s inequality , letting @xmath81 be the number of comparisons @xmath1026 thus the probability of the complementary event , namely that @xmath81 is within @xmath1027 of its mean will tend to @xmath4 . therefore , * whp . *",
    "the number of comparisons is in @xmath1028 thus , * whp . *",
    "it takes about @xmath1029 on the other hand , we have just seen that with a uniform partial order of keys , it takes about @xmath1030 this number is indeed @xmath1031 times the number quicksort needs and the numerical value of this fraction is as stated .",
    "it is of interest to compare this with the naive lower bound on setup number , which performs rather poorly here .",
    "the setup number of a uniform random poset is at least @xmath1032    this is immediate from the lower bound @xmath1011 and the fact that , by the theorem of kleitman and rothschild @xcite , we clearly have that @xmath953 is greater than @xmath1033 .",
    "thus in this case the simplest setup number lower bound is not a very good one , as we have seen that the true answer is @xmath1034 in this model .",
    "this in turn implies that if we were to use quicksort , even in the optimal cases , we would have to compare @xmath1033 pairs of keys .",
    "the expected time to do this would be asymptotically @xmath1035 .      in this section ,",
    "we inspect the number of linear extensions for bipartite orders .",
    "let present a definition @xcite .",
    "let @xmath143 and @xmath427 be two disjoint sets , each one having cardinality equal to @xmath13 .",
    "a random bipartite order @xmath1036 is the poset @xmath1037 with both @xmath143 and @xmath427 antichains , and for each pair @xmath1038 there is a relation @xmath1005 with probability @xmath1039 and no relation ( i.e. they are incomparable ) with probability @xmath1040 , independently of all other pairs .",
    "we now think about the number of linear extensions .",
    "a linear extension of such an order will have to , amongst other things , put the set @xmath143 in order  there are @xmath59 ways to do this  and there are similarly @xmath59 ways to order @xmath427",
    ". however there will also be some choices to make elsewhere , because while we have some relations @xmath974 for @xmath1041 in the partial order , we will also have some incomparable pairs .",
    "more precisely , the probability that a total order on @xmath143 , a total order on @xmath427 and a decision rule @xmath466 for each pair @xmath1042 on whether @xmath973 or @xmath1043 , is a total order compatible with the partial order ",
    "i.e. a linear extension of the partial order  is @xmath1044 , where @xmath1045 is the number of reversals in @xmath466 , that is the number of pairs @xmath1046 such that @xmath978 in the total order .",
    "thus the expected number of linear extensions is @xmath1047 .",
    "the function multiplying @xmath1048 here is discussed at length in @xcite : it is defined @xmath1049 though some more work needs to be done to check this , it turns out that * whp . *",
    "the number of linear extensions is close to this mean value .",
    "we quote the result from brightwell @xcite .",
    "the number of linear extensions @xmath975 of a random bipartite partial order @xmath1050 with @xmath1051 and probability @xmath1039 such that @xmath1052 , satisfies * whp . * , @xmath1053    in particular this applies when @xmath1054 is a constant .",
    "more precisely , we have that * whp . *",
    "@xmath1055 thus , for @xmath1039 constant , letting @xmath1056 and noting that both logarithms approach @xmath4 as @xmath935 , we have that * whp . * @xmath1057 ( of course the two @xmath1058 terms are different ) .",
    "thus the order of magnitude of @xmath988 is * whp .",
    "* @xmath1059    we need to be careful about comparing this example with quicksort : we must remember that the total number of keys being sorted in this example is @xmath1060 .",
    "therefore , the expected time would be @xmath1061 .",
    "thus the factor by which we are quicker here is again @xmath1062 . in other words ,",
    "we get the same speed - up as for the uniform and bipartite cases .",
    "we now move forward to the analysis of random @xmath48-dimensional orders in quicksort .      here , the application of quicksort in a random k ",
    "dimensional order is considered . for this purpose ,",
    "a definition follows :    a random @xmath48-dimensional partial order on the set @xmath1063 is defined as follows .",
    "we select @xmath48 total orders on @xmath1019 uniformly at random from all @xmath59 total orders on that set , say we chose @xmath1064 .",
    "we then define the partial order @xmath958 by @xmath1065    of course it is highly likely that some of the total orders will be inconsistent with each other , and so we will only get a partial order .",
    "we now have to change perspective : we assume that the partial order which results from these @xmath48 total orders is given to us as partial information about the order on the set @xmath938 , and that we have to use pairwise comparisons to find the true total order on @xmath938 .",
    "therefore , the total order we are looking for , and the @xmath48 total orders we used to define the partial order , may have little to do with each other .    we aim to estimate time complexity of finding the true order when the partial information given is a random @xmath48-dimensional order .",
    "again , we use the theorem @xmath1066 coupled with the information lower bound .",
    "thus we need to know about the number of linear extensions of a random @xmath48-dimensional order .",
    "an important result follows ,    the number @xmath975 of linear extensions of a random @xmath48-dimensional partial order @xmath938 with @xmath1067 satisfies * whp . * @xmath1068    consequently we have that @xmath1069 is bounded below by @xmath1070 and similarly is bounded above by @xmath1071 .",
    "this is of course larger in order of magnitude ( for fixed @xmath48 , say ) than @xmath1072 so the information lower bound is tight .",
    "now , we deduce that    the time complexity of finding the true total order on a set given a random @xmath48-dimensional partial order on it , where @xmath48 is a constant , is * whp . * asymptotically equivalent to @xmath1073    for the logarithm of the number of the linear extensions as @xmath13 tends to infinity holds , @xmath1074 then",
    ", we obtain @xmath1075 which completes the proof .",
    "therefore , the speed up relating to quicksort with no prior information is on average @xmath1076    note that the factor @xmath1077 was previously encountered in uniform and bipartite random orders .",
    "it is worth to point out that for the multiplier @xmath1078 when @xmath48 is arbitrarily large , the speed up is as of the case of uniform random orders .",
    "whereas , having few @xmath48-dimensional orders , quicksort runs much faster .      in this section",
    ", we examine the case where poset forms an interval order .",
    "a definition follows @xcite , @xcite .",
    "a poset @xmath949 is called an interval order if there exists a function @xmath1079 such that each element @xmath1080 is mapped to a closed interval @xmath1081 \\subseteq \\mathbf r$ ] .",
    "then @xmath1082 , it holds that @xmath1005 if and only if @xmath1083 .    in other words , there exists a mapping @xmath1084 $ ] for every element of @xmath949 , having the property that any two elements of the poset are comparable if and only if their corresponding intervals do not intersect .",
    "otherwise , they are incomparable .",
    "hence , the size of the largest chain of the poset is the maximum number of pairwise non - intersecting intervals .",
    "conversely , the size of the largest antichain is the maximum number of intersecting intervals .",
    "we present the definition of random interval order .",
    "a random interval order is one where we generate @xmath1072 independent numbers @xmath1085 from the uniform distribution on @xmath419 $ ] and form @xmath13 closed intervals @xmath1086 , for @xmath1087 , where @xmath1088 $ ] if @xmath1089 and @xmath1090 $ ] otherwise .",
    "( the event that @xmath1091 has probability zero so can be ignored ) .",
    "then we define a partial order by saying that @xmath1092 if and only if the maximum element of @xmath1093 is less than the minimum element of @xmath1086 .",
    "in fact any continuous probability distribution can be chosen to the analysis of random interval orders .",
    "again , we want to estimate how many linear extensions there are of these .",
    "this time , there does not appear to be an immediate bound for the number of linear extensions in the literature .",
    "however one can obtain the relevant bound showing that @xmath988 is * whp .",
    "* at least @xmath1094 for some @xmath23 , which will of course be enough to show that the @xmath1072 term in the fredman @xcite ",
    "kislitsyn @xcite bound @xmath1095 is small compared with the term @xmath988 .",
    "the main results that we need in this direction are the following two theorems , regarding the size of the largest antichain and chain of a random interval order respectively . for their proofs , we refer to @xcite .",
    "let @xmath1096 denote the size of a largest set of pairwise intersecting intervals in a family of @xmath13 random intervals .",
    "then there exists a function @xmath1097 , such that * whp .",
    "* we have @xmath1098    let @xmath356 denote the maximum number of pairwise disjoint intervals in a family of @xmath13 random intervals .",
    "then @xmath1099 in probability .",
    "the following corollary gives a lower bound for the number of comparisons required to sort a random interval order :    the number of comparisons for sorting @xmath13 keys , given a random interval order is * whp .",
    "* at least @xmath1100 , where one can take @xmath1101 .",
    "theorem 5.6.4 shows that the largest antichain of the random interval order is * whp .",
    "* at least @xmath1102 for any @xmath433 .",
    "this is because a family of intersecting intervals forms an antichain .",
    "thus we need to sort all these @xmath912 incomparable elements of the partial order in a total order extending it , and there are at least @xmath1103 ways of doing this . using stirling s formula , we obtain @xmath1104 then we have that @xmath1105 has order of magnitude @xmath1106 : in particular @xmath1107 and so the complexity is @xmath989 .",
    "further , we have that @xmath988 is at least , by the above , @xmath1108 which is equal to @xmath1109 and so we can take the constant @xmath37 to be at least @xmath1110 .",
    "we now present a much stronger result that gives sharp bounds on the number of linear extensions of a random interval order , following the insightful suggestions of prof .",
    "colin mcdiarmid @xcite .",
    "the number of comparisons for sorting @xmath13 keys , given a random interval order is * whp .",
    "* for @xmath1111 , between : @xmath1112    let @xmath1113 and consider the interval @xmath1114 .",
    "let @xmath1115 be the interval @xmath1116 , where @xmath60 and @xmath61 are positive integers with @xmath60 odd and @xmath1117 .",
    "further , let @xmath1118 be the least @xmath61 such that @xmath1119 for some positive integer @xmath60 .",
    "there is a unique such @xmath60 since if there were at least two odd @xmath60 , then there is at least one even @xmath48 between them and considering @xmath1120 , we can replace it by @xmath1121 giving a smaller value of @xmath61 and contradicting the definition of @xmath61 .",
    "since @xmath60 is unique , we may call it @xmath1122 .",
    "we denote the interval @xmath1123 by @xmath1124 .",
    "recall that @xmath60 is odd with @xmath1125 and observe that if @xmath1126 , then @xmath1127 . for",
    "a given such @xmath60 and @xmath61 , let @xmath1128 be the set of all intervals @xmath1114 , such that @xmath1129 .",
    "the sets @xmath1128 are antichains : for if we had two intervals @xmath1130 and @xmath1131 in @xmath1128 with @xmath1130 being less than @xmath1132 ( of course this is equivalent to @xmath1133 ) then saying that @xmath1134 would imply that @xmath1135 and @xmath1136 . but",
    "given that @xmath1135 , there is clearly some @xmath1137 with @xmath60 odd in @xmath1130 which is less than any such in @xmath1132 and the result follows . indeed ,",
    "if the midpoint of @xmath1115 ( i.e. @xmath1138 is less than the midpoint of @xmath1139 ( i.e. @xmath1140 ) then no interval in @xmath1141 can precede any interval in @xmath1128 in the interval order .",
    "let @xmath143 and @xmath427 be independent and uniformly distributed random variables which denote the endpoints of a random interval in @xmath1142 .",
    "we have that @xmath1143 since @xmath1144 the last equation follows because the probability density of @xmath427 , @xmath1145 is @xmath4 on @xmath419 $ ] and @xmath8 elsewhere . given that @xmath1146 , the probability that @xmath143 is in the interval @xmath1147 is ( as it is uniformly distributed ) at most the length of the interval @xmath1148 .",
    "thus the random number @xmath1149 of intervals with length at most @xmath1150 is stochastically dominated by a binomial random variable @xmath1151 with @xmath13 independent trials and success probability @xmath1152 .",
    "therefore , @xmath1153 and this probability tends to @xmath8 , as @xmath452 .",
    "this is a consequence of chernoff s inequality , in the following form : if @xmath143 is a binomially distributed variable with @xmath13 independent trials and success probability @xmath1039 , then for @xmath1154 @xmath1155 chernoff s inequality appears in various places : we refer to @xcite and to @xcite .",
    "since the number being raised to the power @xmath13 is @xmath1156 , this will indeed tend to @xmath8 ( in fact will do so rapidly ) .",
    "the result in our case follows plugging in @xmath1157 and @xmath1158 and shows that the number of intervals with length at most @xmath1150 is * whp . *",
    "less than @xmath1159 .",
    "let @xmath1160 be a positive integer and @xmath189 be the number of intervals @xmath1161 with @xmath1162 .",
    "let @xmath1163 be a set of intervals and @xmath1164 be the set of intervals in @xmath1163 with length @xmath1165 .",
    "let @xmath1166 be the number of intervals of @xmath1164 in @xmath1128 .",
    "then , the number of linear extensions @xmath975 satisfies , since we have to put each of the antichains in order and there are @xmath1103 ways to order an antichain of @xmath912 elements , @xmath1167 and by convexity @xmath1168 choosing @xmath1160 sufficiently large that @xmath1169 , the number of intervals of length at most @xmath1170 is less than the number of intervals of length @xmath1171 which by chernoff s inequality is * whp . *",
    "@xmath1172 : thus almost all intervals have length at least @xmath1170 and so @xmath1164 has order at least @xmath1173 .",
    "this will give us that * whp .",
    "* @xmath1174 this completes the proof , as this gives the lower bound and the upper bound is just a consequence of the fact that there are at most @xmath59 linear extensions of a partially ordered set with @xmath13 keys , and then we use stirling s formula again .    in the next chapter",
    "we proceed to the analysis of partial orders where the information  theory lower bound is not @xmath79 .",
    "central to the subsequent analysis are random graphs .",
    "recall that in the previous chapter , we examined the number of linear extensions of various partial orders , where the information ",
    "theoretic lower bound dominated the linear term . in this chapter , we examine the case where both terms are asymptotically equivalent .",
    "we obtain bounds of the expected height of a random graph and we derive a new bound on the number of linear extensions of a random graph order .      in this section , we consider random graphs .",
    "a definition follows @xcite :    the erds ",
    "rnyi random graph @xmath1175 has labelled vertex set @xmath1176 and for each pair of vertices , the probability of an edge arising between them is @xmath1039 , independently of all the other pairs of vertices .    by the definition , here and throughout this thesis , a random graph @xmath1175 denotes a simple graph , without loops or multiple edges .",
    "an independent set of a graph is a subset of the vertex set , such that there is no edge connecting any two vertices . on the other hand ,",
    "a clique of a random graph @xmath1177 is a subset of its vertex set , with the property that an edge is arising between every two vertices .",
    "note that @xmath1039 may very well depend on @xmath13",
    ". we will usually be interested in the behaviour as @xmath452 .",
    "the random graph order @xmath1178 , with partial order relation @xmath958 , is a partially ordered set with underlying set the vertices of @xmath1177 and we initially say that @xmath1179 if and only if @xmath138 and the edge @xmath1180 is present in the random graph @xmath1175 .",
    "we then take the transitive closure of this relation to get a partial order .    in the same manner , we write @xmath1181 for the infinite",
    "partially ordered set obtained by taking vertex set @xmath1182 , the set of integer numbers , saying initially @xmath1183 if and only if @xmath138 in the usual total order on @xmath1184 and the edge @xmath1180 is present ( which it is with probability @xmath1039 independent of all other edges ) , and then taking the transitive closure .",
    "the point is that for a partial order we of course require transitivity by the axioms for a partially ordered set .",
    "but of course this is not guaranteed in a random graph .",
    "we could , for example , have the edges @xmath1185 and @xmath1186 in the random graph , but no edge between @xmath4 and @xmath12 . then of course we would have put in the edge @xmath1187 as since @xmath1188 and @xmath1189 we must have @xmath1190 by transitivity .",
    "note that there are efficient algorithms for finding the transitive closure of a relation .",
    "what we aim to do next , following the analysis in the last section , is to consider how many comparisons will be needed to finalise the order of a set of keys when a random graph partial order on the set is given already . for our needs ,",
    "we present the definition of graph entropy , introduced by krner @xcite .",
    "this definition is from simonyi s survey on graph entropy @xcite .",
    "let @xmath1191 be a random graph .",
    "let @xmath143 be a random variable taking its values on the vertices of @xmath1192 and @xmath427 taking its values on the stable ( independent ) sets of @xmath1192 .",
    "suppose further that their joint distribution is such that @xmath1193 with probability @xmath4 . also , the marginal distribution of @xmath143 on @xmath1194 is identical to the given distribution @xmath938 .",
    "then , the graph entropy @xmath1195 of the random graph @xmath1192 is @xmath1196 where @xmath1197 is as in definition 3.1.7 .    as in the last chapter , we need to know about the number of linear extensions .",
    "the following theorem from @xcite will give us what we need .",
    "let @xmath1054 be fixed and consider @xmath975 , where the partial order is from @xmath1198 .",
    "then we have that there are @xmath1199 and @xmath1200 such that @xmath1201    there is a constant @xmath1202 such that * whp .",
    "* we have @xmath1203 where @xmath79 is any function tending to infinity with @xmath13 ( we usually think of it as doing so very slowly ) .    for random variable @xmath1204 , the probability that it is between @xmath1205 and @xmath79 is @xmath1206 as @xmath452 .",
    "thus for large enough @xmath13 @xmath1207 changing the base of the logarithm , we get : @xmath1208 and this gives the claim , with @xmath1209 .    for a random partial order @xmath1198 with @xmath1054 constant",
    ", @xmath1210    the proof follows directly from the previous corollary .    in other words ,",
    "the logarithm of the number of linear extensions is linear in @xmath13 .",
    "thus when we use theorem 5.2.8 , we see that both terms in it @xmath985 and @xmath1072 are linear .",
    "so we do not get the exact asymptotics as in the previous chapter .",
    "recall that in that chapter , we always had @xmath1211 so outweighed the linear term .",
    "( in many cases , @xmath1069 was of order of magnitude @xmath1212 so won comfortably ) .",
    "however here it is not clear what multiple of @xmath13 will be the time complexity of finding the total order by pairwise comparisons .",
    "note that it will be at most some constant multiple of @xmath13 , so this will be quicker than just using about @xmath422 comparisons in quicksort  in other words , the partial order here does substantially speed up the process of finding the true order .    to deal with this question in more detail , we need to know about the structure of a random graph order .",
    "we concentrate to begin with on the case where @xmath1039 is a constant . in this case",
    ", we shall see that basically the partial order consists of a linear sum of smaller partial orders .",
    "a vertex @xmath357 in any partial order is said to be a post if and only if every other vertex of the partial order is comparable with it .",
    "if @xmath357 is a post in a partial order @xmath972 , then we can write the partial order as a linear sum of two subposets @xmath1213 and @xmath1214 , namely @xmath1215 clearly two elements in the same @xmath1216 which were comparable before still are , and any element @xmath11 in @xmath999 is smaller than any element @xmath578 in @xmath1000 since @xmath1217 by assumption .",
    "a parameter @xmath39 of partial orders is said to be additive if and only if , whenever @xmath938 is the linear sum of two subposets @xmath999 and @xmath1000 we have @xmath1218 .",
    "an example of an additive parameter is the height , as if we have a longest chain in @xmath999 and a longest chain in @xmath1000 , we can concatenate them to form a chain in the linear sum , so @xmath1219 : and in the other direction , given a longest chain in @xmath938 , we restrict to the subsets and get chains in @xmath999 and @xmath1000 , so @xmath1220 , and so they are equal .",
    "another example is the number of further comparisons needed to sort a partially ordered set which is a linear sum of two subposets .",
    "an important lemma follows    the number of further comparisons @xmath1221 of quicksort which need to be applied to a poset @xmath938 to obtain the true ordering , with knowledge of where the posts are and where elements are relative to the posts , is an additive parameter .",
    "write @xmath1222 .",
    "if we sort the whole linear sum of @xmath999 and @xmath1000 with @xmath48 comparisons , we have sorted @xmath999 and @xmath1000 as well .",
    "thus , taking @xmath1223 , we see that @xmath1224 .",
    "( we have sorted @xmath999 and @xmath1000 using @xmath48 comparisons : we might have done it with fewer ) .",
    "conversely , if we have sorted @xmath999 and @xmath1000 with a total of @xmath48 comparisons , then we have sorted the whole of @xmath938 because , by definition , everything in @xmath999 is above everything in @xmath1000 , thus @xmath1225 .",
    "the result follows .",
    "now here is a key result from brightwell @xcite .    with probability @xmath4",
    ", the set of posts in @xmath1181 for @xmath1054 constant , is infinite .",
    "basically , each bit between posts will be small .",
    "indeed brightwell s survey @xcite also shows that for sufficiently large @xmath48 , given our @xmath1039 ( which remember is constant ) there is a constant dependent of @xmath1039 , @xmath1226 such that the probability that none of @xmath1227 are posts is less than or equal to @xmath1228 .",
    "we can now start showing how to use this idea to break down various invariants of @xmath1198 into small units .",
    "we need some notation about posts .",
    "let their positions be @xmath1229 where @xmath1230 is the first post at or to the right of @xmath8 .",
    "then we say that @xmath1231 is the poset induced on the interval @xmath1232 $ ] .",
    "these posets are called the factors of the partial order . the next theorem from @xcite",
    "presents an important result , regarding convergence in distribution of additive parameters .",
    "let @xmath1039 be a constant with @xmath1054 .",
    "let @xmath39 be an additive parameter of partial orders which is not proportional to @xmath1233 .",
    "let @xmath427 and @xmath399 be the random variables @xmath1234 and @xmath1235 respectively .",
    "further , suppose that the moments @xmath1236 and @xmath1237 are finite for all @xmath1238 .",
    "then there exist constants @xmath1239 and @xmath1240 , such that @xmath1241 and @xmath1242 .",
    "furthermore @xmath1243 with convergence of all moments .",
    "the following corollary is a consequence of theorem @xmath1244 .",
    "given @xmath1054 constant , the height of @xmath1198 , which is an additive parameter is * whp .",
    "* equal to @xmath1245 .",
    "this follows easily from the previous theorem .",
    "what we really need to do now is to obtain bounds for the average number of linear extensions .",
    "albert and frieze @xcite , derived estimates for the average height of a random graph order , which is an additive parameter as we previously saw .",
    "the idea is the following .",
    "a random graph is sequentially constructed ; at each step a new vertex @xmath61 is added and the probability of an edge from it to any previously existing vertex @xmath60 with @xmath1246 is @xmath1247 .",
    "they consider both an underestimate of the height and an overestimate .",
    "we present a generalisation of this construction with a constant probability @xmath1248 of an edge arising .",
    "the underestimate @xmath1249 and overestimate @xmath1250 increments of the average height are given by : @xmath1251    let @xmath1252 be the length of the longest chain in a random graph order of size @xmath308 and @xmath1253 be the number of top endpoints of longest chains . consider the addition of vertex @xmath756 .",
    "the event that the new vertex @xmath756 is the new , unique , endpoint of a longest chain is the event that one or more of the edges from @xmath756 to the @xmath1253 endpoints actually arises . in this event",
    ", what will happen is that the length of the longest chain will increase by @xmath4 and the number of endpoints of longest chains will drop to @xmath4 , with probability @xmath1254 .",
    "the complementary event is that the number of endpoints will be increased by one .",
    "it is at the next step that we make a pessimistic assumption .",
    "the pessimistic assumption is that , in these cases where @xmath756 does not become the unique endpoint of a longest chain , the number of endpoints increases by @xmath4 with probability only @xmath1039 .",
    "in fact , though there will certainly be at least one vertex one level below all the @xmath1253 upper endpoints , in most cases there will be more than that ",
    "say @xmath912 of them  so if @xmath756 is joined to any of them the number of longest chains will increase , and the probability of this happening will be @xmath1255 . in this event , the number of endpoints will increase by at least @xmath4 , but the length of the longest chain will remain unchanged .",
    "let the random variables @xmath1256 and @xmath1257 denote the underestimates of the length of the longest chain and the number of endpoints of the longest chain(s ) respectively .",
    "these variables obey the following recurrence : @xmath1258 also , let @xmath1259 and @xmath1260 be the overestimates of the length of the longest chain and the number of endpoints of the longest chain(s ) respectively . in this case , the recurrence relation is : @xmath1261 we consider only the second component .",
    "this is clearly a positive recurrent , irreducible , aperiodic , markov process with state space the positive integers .",
    "thus a stationary distribution does exist with limiting probabilities @xmath1262 and when @xmath1263 , then this could come about from @xmath1264 being @xmath61 ( with probability @xmath1265 ) or from @xmath1264 being @xmath1266 ( with probability @xmath1267 .",
    "the solution giving the stationary distribution @xmath1268 for the first case is @xmath1269 the value of @xmath1270 can be found by the following equation @xmath1271 the expected height increment generally for @xmath1248 is @xmath1272 substituting @xmath1270 , which is a function of @xmath1039 , the average height increment is @xmath1273 which is equal to @xmath1274    for the second ( overestimate ) case , the stationary distribution obeys the following recursive relation @xmath1275 thus , the value of @xmath1270 can be retrieved by the following equation @xmath1276 and the average height increment is @xmath1277 which further simplified yields the simple expression @xmath1278 therefore , the average height increment in the overestimate case is @xmath1279 the argument is complete .",
    "we can rewrite the inverse of the overestimate as @xmath1280 the average height increment can be computed in terms of @xmath1257 elliptic functions .",
    "this class of functions arises in many different areas of mathematics and a comprehensive account of their analyses can be found at @xcite , @xcite .",
    "the overestimate height increment assumes the simple form of @xmath1281 { 1-p}}{\\theta_{2}(0 , \\sqrt{1-p})},\\ ] ] where the @xmath1282 function is defined by , ( see section 16.27 in abramowitz and stegun @xcite ) , @xmath1283 with @xmath1284 .",
    "the previous equation can be expressed as a product , instead of summation .",
    "it holds @xcite , @xmath1285 where @xmath1286 .",
    "therefore , the expected overestimate height increment becomes @xmath1287    the following maple graph plots the underestimate and the overestimate functions .",
    "note that for @xmath1288 , both @xmath1249 and the overestimate @xmath1250 are in fact very close to @xmath1039 .",
    "in the next section , we give sharp bounds for the average height .",
    "we have managed to obtain functions @xmath1249 , which is the underestimate increment of the expected height and @xmath1250 , which is the overestimate of the expected height of a random graph partial order .",
    "we first give a lower bound on the underestimate function , which is easier to work with ( more tractable ) .    for all @xmath1289 , @xmath1290 .",
    "the probability of an edge arising between a newly added vertex @xmath756 and any of the @xmath48 existing vertices in a random graph is @xmath1039 , independently of the other edges .",
    "thus , with probability @xmath1039 the length of a greedy chain will increase by one and with probability @xmath1291 , the length will remain unchanged .",
    "thus , the expected increase in the height of a chain is @xmath1039 and the claim follows immediately .    here is an upper bound on the overestimate function .",
    "it holds that @xmath1292    to obtain an upper bound on @xmath1293 it is enough to bound below the denominator @xmath1294  .",
    "a crude lower bound is @xmath1295 ( as all other terms are positive ) .",
    "thus @xmath1296 this in turn is @xmath1297    note that as @xmath1039 tends from the left to @xmath4 and this fact explains the convergence of the underestimate and overestimate , seen previously in figure @xmath1298 . collecting more terms",
    ", we will be able to obtain a sharper bound in the following manner .",
    "it holds that @xmath1299 for a finite number @xmath1300 , where @xmath1301 , so the bound has the form @xmath1302 its sharper than the previous one but again infinitely many terms are discarded . in order to obtain a bound using all terms , note that @xmath1303 and @xmath1304 the overestimate can be bounded above by another theta function",
    "therefore , a sharper bound is @xmath1305 the @xmath1306 function is defined @xcite , @xmath1307 thus , we obtained suitable bounds , such that @xmath1308    in the following section , we present bounds on the number of linear extensions .      here",
    "we obtain bounds on the average number of linear extensions of a random partial order .",
    "we start by quoting a useful theorem from @xcite ,    let a random variable @xmath427 be geometrically distributed , i.e. @xmath1309 , for @xmath869  .",
    "then , @xmath1310    where @xmath1311 is defined as , @xmath1312 with @xmath1284 .",
    "the following theorem regarding the expected number of linear extensions is the main contribution in this chapter .",
    "let @xmath1248 .",
    "the average increment of the natural logarithm of the number of linear extensions @xmath1313 is * whp . * bounded below by : @xmath1314    we consider the longest chain @xmath6 .",
    "we know that * whp .",
    "* @xmath1315 by theorem 6.3.1 .",
    "now , by lemma @xmath1316 of cardinal _ et al . _",
    "@xcite , which states that @xmath1317 , we deduce that @xmath1318 where @xmath1319 denotes the entropy of the incomparability graph . by lemma @xmath632 of that paper",
    ", we also have that @xmath1320 therefore @xmath1321 taking on both sides logarithms and applying jensen s inequality @xcite , we get that * whp .",
    "* @xmath1322 thus , @xmath1323 is * whp . * bounded below by @xmath1324 and",
    "the proof of the theorem is complete .",
    "as we can see from the following graph , the bound is nt tight compared with the one of alon _ et al .",
    "however , its derivation provides an insight into the relation of the height of a random graph order with the number of linear extensions .    .",
    ", width=340,height=340 ]",
    "at the last chapter of this thesis , the conclusions of the research and possible future directions are discussed . in the first section",
    ", we consider the sorting of partially ordered sets and in the second section , the fast merging of chains .",
    "central to the analysis of the time complexity of sorting partially ordered sets , was the number of linear extensions , as a measure of the ` presortedness ' of the array .",
    "recall that the quantity @xmath1325 is the lower bound of comparisons needed to sort an array of @xmath13 keys , with no prior information . in all cases of partially ordered sets considered in chapter @xmath1316 ,",
    "the constant @xmath1326 appeared to the asymptotic number of comparisons .",
    "a future direction to research might be the sharpening of these results .",
    "for example , one might ask , what is the average number of key exchanges or the computation of exact expected costs .    generalising albert  frieze argument @xcite and using entropy arguments , a new result was the lower bound on the number of linear extensions of a random graph order .",
    "however , we have seen that it does not directly compete the bounds of alon _ et al . _",
    "@xcite , thus there is space for further improvement of this bound or to derivation of new sharper ones and this might be a suitable topic for further research .",
    "a different bound on the number of linear extensions of a random interval order can be derived as follows . by theorem 5.6.5",
    ", one can deduce that * whp .",
    "* , the size of the longest chain c , is @xmath1327 using the result @xmath1317 from cardinal _ et al .",
    "_ , as in theorem 6.5.2 , we have @xmath1328 taking logarithms , a lower bound for the entropy of the incomparability random interval graph is , @xmath1329 by the following inequality @xcite @xmath1330 @xmath1331 is * whp .",
    "* bounded below by @xmath1332 thus , * whp .",
    "* @xmath1333    the speed up factor of the derived bound of the number of linear extensions of a random interval order is @xmath1334  exactly half of the constant stated in corollary 5.6.6 .",
    "this fact shows that the bound in this chapter performs rather poorly , comparing with the results in section 5.6 .",
    "note that , with further information about the entropy , improvement might be possible .      in the last section ,",
    "we consider the merging of chains .",
    "this problem is analysed in the paper of hwang and lin @xcite , where an efficient algorithm is presented .    here , we discuss some preliminary ideas , that might be worthwhile for further study . specifically , we propose the application of shellsort for the merging of linearly ordered sets .",
    "shellsort was invented by donald shell @xcite in 1959 and is based on insertion sort .",
    "the algorithm runs from left to right , by comparing elements at a given gap or increment @xmath1335 and exchanging them , if they are in reverse order , so in the array @xmath1336 the @xmath921 subarrays @xmath1337 , for @xmath1338 are separately sorted . at the second pass , shellsort runs on smaller increment , until after a number of passes , the increment becomes @xmath1339 .",
    "this final insertion sort completes the sorting of the array .",
    "the sequence of the increments is crucial for the running time of the algorithm , as the pivot selection is important to quicksort .",
    "shell @xcite proposed the sequence @xmath1340 , which leads to quadratic time .",
    "pratt @xcite suggested a sequence of the form @xmath1341 , where @xmath1342 , which yields @xmath1343 time .",
    "incerpi and sedgewick @xcite have shown that there do exist @xmath1344 increments , for which the running time of the algorithm is @xmath1345 , with @xmath1346 and @xmath1347 . despite the extensive analysis of shellsort",
    ", there are many open problems , as whether the algorithm can achieve on the average @xmath1348 run - time .    in our problem ,",
    "shellsort can be fruitfully applied to merging chains , which can be done quite fast , using the knowledge of the partial order .",
    "consider two chains @xmath1349 and @xmath1350 , @xmath1351 starting from @xmath1352 , with initial increment @xmath1353 , the algorithm separately sorts @xmath921 subarrays . at the second pass ,",
    "the algorithm iterates from @xmath1354 with increment @xmath1355 .",
    "the final comparison of the element occupying the location @xmath921 with its adjacent key in the position @xmath1356 , terminates the merging process .",
    "we illustrate this informal idea , with a simple example .",
    "suppose that we want to merge the chains @xmath1357 and @xmath1358 .",
    "we start with the array @xmath1359 and initial increment @xmath1360 .",
    "then , the following subarrays are independently sorted : @xmath1361 , @xmath1362 , @xmath1363 , so at the end of the first iteration , the array becomes @xmath1364 .",
    "starting from @xmath1365 , with increment equal to @xmath632 , the algorithm proceeds to the subarrays @xmath1366 , @xmath1367 , @xmath1368 , so we obtain @xmath1369 . in the same manner , starting from @xmath633 , with gap equal to @xmath12 , the subarrays @xmath1362 , @xmath1370 , @xmath1371 are sorted , giving @xmath1372 .",
    "then , the subarrays @xmath1373 and @xmath1368 are sorted , yielding @xmath1374 . the final comparison to @xmath1370 returns the merged chain .",
    "this algorithm took @xmath1375 comparisons for the merging of @xmath631 keys .",
    "a different increment sequence might speed up the process , noting that there are some redundant comparisons , e.g. the comparison of @xmath1367 in the second pass .",
    "its appealing feature is that it merges ` in - place ' , without the need of auxiliary memory .",
    "central to the argument is the number of inversions of a permutation of @xmath13 distinct keys @xmath1376 .",
    "an inversion is a pair of elements , such that for @xmath636 , @xmath1377 .",
    "obviously , an upper bound for the number of inversions is @xmath1378 . on the other hand ,",
    "a sorted array has @xmath8 inversions .",
    "in other words , the number of inversions determine the ` amount ' of work needed for the complete sorting .",
    "generally , when one has to merge @xmath48 chains , with cardinalities @xmath1379 and @xmath1380 , an upper bound to the number of inversions is @xmath1381 note that this bound corresponds to the case , where the chains are presented in completely wrong order , e.g. the elements of a chain @xmath1382 are greater from the elements of chains , which lie to its right . in practice , this case occurs rarely , so the bound can be greatly improved .",
    "the application of mergesort , as proposed by cardinal _",
    "@xcite for the merging of chains completes the sorting in @xmath1383 time  see their theorem @xmath12 .",
    "_ remark in their paper that their mergesort algorithm is better than an earlier one of kahn and kim @xcite , provided @xmath988 is super  linear . as we have seen in this chapter",
    ", @xmath1384 is linear , thus the application of shellsort might constitute an alternative choice for the merging of chains .",
    "here is the maple worksheet for the computation of the variance of the number of key comparisons of dual pivot quicksort .          .... >",
    "sum(sum((2n - i-2)^2 , j = i+1 .. n ) , i=1 .. n-1 ) ; >",
    "sum(sum((2n - i-2 ) , j = i+1 .. n ) , i=1 .. n-1 ) ; > 2(sum(sum((2n - i-2)(2iharmonic(i-1)-4(i-1 ) ) , j = i+1 .. n ) , i = 1 .. n-1 ) ) ; > simplify(% ) ; > 2(sum(sum((2n - i-2)((2(j - i))harmonic(j - i-1)-4(j - i-1 ) ) ,    j = i+1 .. n ) , i=1 .. n-1 ) ) ; > sum(4",
    "n harmonic(k)(k+i+1)-4nharmonic(k)i-2iharmonic(k)(k+i+1 )    + 2harmonic(k ) i^2 - 4harmonic(k)(k+i+1)+4iharmonic(k ) , k=0 .. n - i-1 ) ; > 2(sum(3n-3i+2nharmonic(n - i)(n - i)^2 -iharmonic(n - i)(n - i )    + 2nharmonic(n - i)(n - i)-(3(n - i))n+(3/2(n - i))i - iharmonic(n - i)(n - i)^2    -2harmonic(n - i ) ( n - i)^2    + ( 1/2)i(n - i)^2 - 2harmonic(n - i)(n - i)-n ( n - i)^2+(n - i)^2 , i=1 .. n-1 ) ) ; >",
    "2(sum(4nharmonic(j)(n - j)^2 - 5n^2harmonic(j)(n - j)-2nharmonic(j )    + ( n - j)harmonic(j)n+(2(n - j))harmonic(j)-(n - j)^2     harmonic(j)+2n^3 harmonic(j)-(n - j)^3 harmonic(j ) , j=1 .. n-1 ) ) ; > sum((2(k+1))harmonic(k)-4k , k = 0 .. n - i-1 ) ; > 2(sum((2iharmonic(i-1)-4(i-1))(2binomial(n - i+1 , 2 )    harmonic(n - i)+(n - i-5(n - i)^2)(1/2 ) ) , i=1 .. n-1 ) ) ; > sum((8(n - k))binomial(k+1 , 2)harmonic(k ) , k=1 ..",
    "sum(8binomial(k+1 , 2)harmonic(k ) , k=1 .. n-1 ) ; ....      .... >",
    "f''_n(1)=2 ( harmonic(n))^2 n^2 - 17/3 harmonic(n ) n^2 + 209/36 n^2    -2 harmonic(n,2 ) n^2 + 731/36 n-6 harmonic(n,2 ) n-47/3 harmonic(n ) n    + 6 ( harmonic(n))^2 n+4 ( harmonic(n))^2 - 4 harmonic(n,2)-6 harmonic(n )    + 13/6 + 6/(n(n-1))sum((n - i)f''_i-1(1 ) , i=1 .. n-1 ) ; > binomial(n , 2)f''_{n}(1 ) ; > binomial(n+1 , 2)f''_{n+1}(1)- binomial(n , 2)f''_{n}(1 ) ; > binomial(n+2 , 2)f''_{n+2}(1)-2binomial(n+1 , 2)f''_{n+1}(1 )    + binomial(n , 2)f''_{n}(1 ) ; ....                                cardinal , j. , fiorini , s. , joret , g. , jungers , r. and munro , i. ( 2010 ) _ `` sorting under partial information ( without the ellipsoid algorithm ) . '' _ stoc 10 proceedings of the 42nd acm symposium on theory of computing , 359368 .",
    "simonyi , g. ( 1995 ) _ `` graph entropy : a survey . '' _ in combinatorial optimization ( ed . w. cook , l. lovsz , and p. seymour ) .",
    "dimacs series in discrete mathematics and theoretical computer science .",
    ", 399441 .",
    "tukey , j. w. ( 1978 ) _ `` the ninther , a technique for low - effort robust ( resistant ) location in large samples . '' _ in contributions to survey sampling and applied statistics in honor of h. o. hartley , ed . by h. a. david .",
    "251258 , academic press ."
  ],
  "abstract_text": [
    "<S> sorting algorithms have attracted a great deal of attention and study , as they have numerous applications to mathematics , computer science and related fields . in this thesis </S>",
    "<S> , we first deal with the mathematical analysis of the quicksort algorithm and its variants . specifically , we study the time complexity of the algorithm and we provide a complete demonstration of the variance of the number of comparisons required , a known result but one whose detailed proof is not easy to read out of the literature . </S>",
    "<S> we also examine variants of quicksort , where multiple pivots are chosen for the partitioning of the array .    </S>",
    "<S> the rest of this work is dedicated to the analysis of finding the true order by further pairwise comparisons when a partial order compatible with the true order is given in advance . </S>",
    "<S> we discuss a number of cases where the partially ordered sets arise at random . to this end </S>",
    "<S> , we employ results from graph and information theory . </S>",
    "<S> finally , we obtain an alternative bound on the number of linear extensions when the partially ordered set arises from a random graph , and discuss the possible application of shellsort in merging chains . </S>"
  ]
}