{
  "article_text": [
    "a _ hamiltonian cycle _ is a cycle which passes through every vertex in a graph exactly once .",
    "a _ planar graph _ is a graph which can be drawn in the plane such that no edges intersect one another .",
    "cubic graph _ is a graph in which all vertices have degree 3 .",
    "finding a hamiltonian cycle in a cubic planar graph is proven to be an @xmath1-complete problem @xcite .",
    "this implies that unless @xmath2 , we could not find an efficient algorithm for this problem .",
    "most approaches to finding a hamiltonian cycle in planar graph utilises the _ divide - and - conquer _ method , or its derivation , the _ separator theorem _ which partitions the graph in polynomial time @xcite .",
    "exact algorithms using such methods were found to have the complexity of o@xmath3 @xcite @xcite , where _",
    "n _ denotes the number of vertices and _ c _ is a constant . in this paper",
    ", we consider only cubic planar graphs and attempt to find a new algorithm to provide researchers with a new method to approaching this problem .",
    "we first start by introducing our so - called _ expansion algorithm _ which increases the number of vertices in a cycle at each iteration .",
    "a cycle can be first found by taking the outer facial cycle of the planar graph .",
    "we define it as the _ base cycle _ , @xmath4 .",
    "this base cycle is then expanded by the expansion algorithm , which will be described in detail later .",
    "[ def1 ] consider a planar graph @xmath5    a _ complementary path _",
    ", @xmath6 , is a path between 2 adjacent vertices , @xmath7 connected by the edge , @xmath8 , s.t .",
    "@xmath6 is internally disjoint from @xmath9 .",
    "furthermore , @xmath6 and @xmath8 together will form the boundary of a face in @xmath10 .",
    "assuming we are not dealing with multigraphs , the complementary path will always have at least one other vertex besides @xmath11 .",
    "the restriction that @xmath6 and @xmath8 have to form the boundary of a face will be used later to prove corollary [ cor1 ] .",
    "[ def2 ] let @xmath12 and @xmath13 .",
    "then , @xmath14    [ alg1 ]    * let * @xmath4 be the outer facial cycle .",
    "+ * let * @xmath15    at each iteration , the algorithm removes an edge , @xmath8 and adds a path @xmath6 .",
    "since there are no vertices on @xmath8 and there is at least 1 vertex on @xmath6 , the number of vertices on the cycle will always increase at each iteration .",
    "since there is only a finite amount of vertices in the graph , the algorithm will have to terminate eventually .",
    "the _ interior _ of a cycle , @xmath16 , is the connected region lying to the left of an anticlockwise orientation of @xmath16 .",
    "[ lem2 ] at each iteration of the algorithm [ alg1 ] , all the vertices of g either lie in the interior of @xmath9 , or on @xmath9 .",
    "let @xmath17 be the statement that all the vertices of g either lie in the interior of @xmath18    * @xmath19 is true as @xmath4 is the outer facial cycle , with all the vertices either lie in the interior or on @xmath4 .",
    "* assume @xmath20 true .",
    "then all the vertices either lie in the interior or on @xmath21 .",
    "assume @xmath22 , then @xmath23 exists",
    ". let @xmath24 be the face bounded by @xmath25 and @xmath26 .",
    "the interior of @xmath24 originally lies inside @xmath21 .",
    "but by an iteration of algorithm [ alg1 ] , the interior of @xmath24 now lies outside the new base cycle , @xmath23 .",
    "however , since there are no vertices in the interior of a face , all the vertices in @xmath23 also lies either in the interior or on @xmath23 .",
    "therefore , if @xmath23 exists , then @xmath27 .    hence , by mathematical induction , @xmath17 is true @xmath28 as long as @xmath18 exists .",
    "[ cor1 ] if @xmath6 exists for an edge @xmath29 , then @xmath6 is unique .    by lemma [ lem2 ]",
    ", none of the vertices can lie outside @xmath9 , thus , @xmath6 also lies in the interior of @xmath9 .",
    "any edge @xmath8 lies on the boundary of 2 faces .",
    "if @xmath29 , then @xmath30 only 1 possible @xmath6 such that @xmath8 and @xmath31 forms the boundary of a face that lies in the interior of @xmath9 ( the other face that @xmath8 is a boundary of lies outside @xmath9 )    [ lem1 ] if @xmath10 have a hamiltonian cycle , then @xmath30 a choice of complementary paths that algorithm [ alg1 ] can use to find that hamiltonian cycle .",
    "consider a hamiltonian cycle , @xmath16 , in @xmath10 .",
    "if @xmath32 then the case is trivial . if @xmath33 , then by lemma [ lem2 ] , all vertices in @xmath16 lies either on or in the interior of @xmath4 since @xmath16 contains all the vertices of the graph . since @xmath16 contains all the vertices and @xmath4 is a cycle and therefore must contain at least 3 vertices , @xmath34 .",
    "suppose @xmath33 .",
    "let @xmath35 be consecutive vertices on @xmath4 about the clockwise rotation .",
    "let @xmath17 be the path connecting @xmath36 that is the subpath of @xmath16 .",
    "let the edge between @xmath37 and @xmath38 be @xmath39 which also lies on @xmath4 . since @xmath16 contains all the vertices in the graph , by iteratively finding @xmath6 , starting with @xmath40 , more subpath of @xmath17 will lie on @xmath9 at each iteration .",
    "the algorithm will only move on when @xmath41 .    repeating this process @xmath28",
    ", we will eventually end up with @xmath42 , in which the algorithm will terminate .",
    "with @xmath16 in red ]",
    "given a cubic planar graph , @xmath10 , and the corresponding dual graph , @xmath43 . a _ corresponding face _",
    ", @xmath44 , is the face corresponding to the vertex @xmath45 .    the _ outer vertex _ , @xmath46 , is the vertex in @xmath47 that corresponds to the outer face of @xmath10 .",
    "let @xmath48 be the shared boundary between @xmath49 .",
    "a _ dual edge _ , @xmath50 , is defined as an edge between @xmath51 .     and @xmath46 ]",
    "consider algorithm [ alg1 ] . since @xmath6 is unique for an edge @xmath8 by corollary [ cor1 ] , let @xmath53 be the edges chosen in the expansion algorithm in order .",
    "let @xmath54 be the corresponding dual edges in @xmath47 .     in purple ]",
    "[ lem3 ] @xmath55 is a tree ( @xmath56 ) .",
    "let @xmath57 be the statement that @xmath58 is a tree .",
    "* @xmath19 is true as 2 vertices connected by an edge , @xmath59 is considered a tree . *",
    "assume @xmath20 is true .",
    "then @xmath60 is a tree . from proof of corollary [ cor1 ]",
    ", @xmath61 is a boundary of 2 faces , one that lies inside @xmath23 ( @xmath62 ) and another that lies outside @xmath23 ( @xmath63 ) . from proof of lemma [ lem2 ] , by including path @xmath64 , the face bounded by @xmath39 and @xmath64 which originally lies in the interior of @xmath18 will now lie on the exterior of @xmath65 .",
    "therefore , the vertex in @xmath47 that corresponds to @xmath62 will lie outside @xmath56 while the vertex that corresponds to @xmath63 will lie inside @xmath56 .",
    "thus , @xmath66 will connect a vertex on @xmath56 to a vertex that is outside of @xmath56 , thus expanding the tree .",
    "hence @xmath67 is also a tree and therefore @xmath68 is true .",
    "thus , @xmath27 .    by mathematical induction",
    ", @xmath55 is a tree .    from lemma [ lem2 ] , we know that faces @xmath24 , bounded by @xmath26 and @xmath25 ,",
    "will be on the exterior of @xmath9 if @xmath26 was used in the algorithm .",
    "conversely , if @xmath26 was not used in the algorithm , then @xmath24 will be in the interior of the cycle @xmath9 .",
    "this is equivalent to stating that all the vertices in @xmath56 lies outside @xmath9 while all the vertices not in @xmath56 lies in the interior or @xmath9 .",
    "[ lem4 ] if @xmath45 lies on @xmath56 , then all the vertices in @xmath10 on @xmath69 lies on @xmath70 .",
    "if @xmath71 lies on the tree , then @xmath72 s.t .",
    "all its vertices in @xmath10 on @xmath69 lies on @xmath6 since the face is bounded by @xmath6 and @xmath8 . since each iteration of the algorithm",
    "will only remove an edge and not any vertices , all the vertices already on the cycle will remain on the cycle at each iteration .",
    "] @xmath10 has a hamiltonian cycle if and only if @xmath73 found by algorithm [ alg1 ] , with @xmath46 at the root , that satisfy the following properties :    1 .   for each vertex @xmath74 that lies on the boundaries of @xmath75 , at least one of the vertices , @xmath76 , lies on @xmath56 .",
    "no two vertices on @xmath56 can be joined by an edge @xmath77 unless @xmath78 .    by first taking the outer facial cycle , @xmath4 ,",
    "only @xmath46 lies outside our base cycle .",
    "hence , @xmath56 starts with @xmath46 as its root .",
    "( @xmath79 ) we will begin by proving each of the following property :    1 .   if @xmath10 has a hamiltonian cycle , then @xmath30 a cycle in @xmath10 that uses every vertex in @xmath10 .",
    "if none of the vertices , @xmath80 , lies on @xmath56 , then none of the @xmath6 found by algorithm [ alg1 ] could contain @xmath81 from negation of lemma [ lem4 ] .",
    "this contradicts the definition of a hamiltonian cycle .",
    "therefore , at least one of the vertices lies on @xmath56 .",
    "+   ( purple ) ] 2 .",
    "if 2 vertices , @xmath82 are adjacent , @xmath30 2 vertices shared by @xmath83 .",
    "however , the edge between them is not used on @xmath56 .",
    "this implies that the 2 vertices will lie on the corresponding path in @xmath10 twice , once from each face @xmath83 .",
    "this is a contradiction from the definition of a hamiltonian cycle .",
    "+ .5    and @xmath78,title=\"fig : \" ] + .5    and @xmath78,title=\"fig : \" ]    ( @xmath84 ) suppose that @xmath85 is a tree found by algorithm [ alg1 ] that @xmath56 satisfies those properties .",
    "from 2 , we apply restriction on @xmath56 such that the path in @xmath10 passes through each vertex at most once ( as proven previously ) . from 1",
    ", we know the path passes through every vertex in @xmath10 at least once .",
    "since there is a path in @xmath10 that passes through every vertex at most once and at least once , we know the path passes through every vertex in @xmath10 once .",
    "furthermore , we know that algorithm [ alg1 ] will always output a cycle , @xmath9 .",
    "therefore , we know that @xmath56 satisfying those properties will correspond to a hamiltonian cycle in @xmath47    note that theorem [ thm1 ] is a corollary of a theorem by skupie @xcite .",
    "we start solving the problem by modifying a backtracking algorithm ( * procedure * ` solve ` ) with restrictions ( * procedure * ` update ` ) to limit the amount of guessing required",
    ". restrictions from * procedure * ` update ` may cause the tree to form 2 disjoint graphs , in which case a new backtracking algorithm ( * procedure * ` disjoint ` ) is called to trace a path between the graphs .",
    "if a particular choice of paths does not work , the algorithm will negate that choice ( * procedure * ` backtrack ` ) .",
    "the algorithm will terminate if it successfully find @xmath56 ( all verties assigned ) or if all other choices are exhausted , concluding that the graph has no hamiltonian cycle .",
    "[ alg2 ] to find @xmath56 with properties in theorem [ thm1 ] , we use a modified backtracking algorithm .",
    "* procedure * update(@xmath86 ) : +    * procedure * backtrack(@xmath86 ) : + @xmath87 @xmath88    * procedure * solve(@xmath47 ) : +    disjoint(@xmath86 ) : +     + @xmath89 @xmath90 call solve(@xmath47 )    restrictions on vertices does not apply in disjoint graphs where the 2 vertices @xmath91 belongs to different sets due to the necessity of connecting the disjoint graphs into one tree .      in the worst case scenario , we expect to force at least one vertex into @xmath92 at each guess .",
    "this reduces the number of faces in which we have to check to @xmath93 where @xmath94 is the number of faces in @xmath10 . since we are working in planar graph , @xmath95 where @xmath96 is the number of vertices . using euler s formula :    @xmath97",
    "since we have 2 choices ( @xmath56 or @xmath92 ) that we have to guess , in the worst case , our algorithm runs in @xmath98 or @xmath99 .",
    "hence , our algorithm has a time complexity of o@xmath0 .",
    "we could modify theorem [ thm1 ] such that it encompasses any planar graph , @xmath13 however , caution is advised dealing with faces that share a single vertex , but not a boundary , as this is not reflected in the dual graph , @xmath100 . to overcome this",
    ", we introduce the _ imaginary edge_.    an _ imaginary edge _ , @xmath101 between vertices in @xmath102 if the corresponding faces in @xmath103 share a single vertex but not a boundary .    [ thm2 ] if @xmath103 has a hamiltonian cycle then @xmath73 found by algorithm [ alg1 ] , with @xmath46 at the root , that at least satisfy the following properties :    1 .   for each n degree vertex @xmath104 that lies on the boundaries of @xmath105 ,",
    "at least one of the vertices , @xmath106 , lies on @xmath56 2 .",
    "no two vertices on @xmath56 can be joined by an edge @xmath77 unless @xmath78 .",
    "3 .   no two vertices joined by an imaginary edge can lie on @xmath56    properties 1 and 2 are proven in theorem [ thm1 ] .",
    "the proof of property 3 follows from the proof of property 2 :    if 2 vertices , @xmath107 are joined by an imaginary edge , then the vertex in which @xmath108 and @xmath109 shares will be on the cycle twice . since this contradicts the definition of a hamiltonian cycle , property 3 holds .",
    "the author wishes to thank his supervisors , dr charl ras and hamid mokhtar , for their continued guidance and providing useful insights to this problem .",
    "f. dorn , e. penninkx , h. l. bodlaender , and f. v. foin .",
    "efficient exact algorithms on planar graphs : exploiting sphere cut branch decompositions . in",
    "_ algorithms - esa 2005 _ , pages 95 - 106 .",
    "springer , 2005 ."
  ],
  "abstract_text": [
    "<S> we first prove a one - to - one correspondence between finding hamiltonian cycles in a cubic planar graphs and finding trees with specific properties in dual graphs . using this information , we construct an exact algorithm for finding hamiltonian cycles in cubic planar graphs . </S>",
    "<S> the worst case time complexity of our algorithm is o@xmath0 . </S>"
  ]
}