{
  "article_text": [
    "since witten s discovery  @xcite that the strong coupling limit of the five consistent ten dimensional superstring theories may be an _ eleven_-dimensional theory whose low energy regime is the unique known eleven - dimensional supergravity , there has been a lot of activity trying to get a better understanding of the nature of this strong coupling regime of string theory , as this is is a highly promising candidate for the complete unified description of the dynamics of all the fundamental forces . while a lot could be derived about this theory in the last decade ,",
    "our picture is still quite incomplete , and this is mirrored by the preliminary incomplete name _",
    "m - theory_.    as the study of symmetries  possibly hidden and showing up only in certain limits of a model  has been extremely fruitful for the advancement of our understanding of fundamental physics , during the last century , often leading to a major breakthrough , any indication of a not yet well understood symmetry of m - theory should be considered as a potential important clue , and subjected to close investigation . while the existence of hidden exceptional symmetries of eleven - dimensional supergravity , especially the hidden global @xmath6 symmetry that occurs in kaluza - klein reduction on a @xmath7-dimensional torus , is well known ( see e.g. @xcite for an introduction ) , and speculations about a hidden global _ infinite - dimensional _ kac - moody symmetry also have been around for a long time  @xcite , the conjecture of a fundamental @xmath0 symmetry of m - theory recently gained interest by the discovery that for the bosonic sector of eleven - dimensional supergravity in a setting close to a spacelike ` big bang ' singularity ( where spatially separated points become causally disconnected ) , the degrees of freedom of the metric show chaotic oscillations of bkl type  @xcite that can be described by relativistic billiards  @xcite taking place in a region of the shape of the fundamental weyl chamber of @xmath0 .",
    "intriguingly , a one - dimensional @xmath2-model  @xcite constructed from a truncation of @xmath0 to the first three levels of a @xmath3 decomposition  @xcite is able to capture and reproduce the dynamics of a correspondingly truncated expansion in terms of gradients of @xmath1 supergravity in the previously described limit .",
    "while this already is a highly nontrivial result , one may still be sceptical whether this correspondence may be extended to higher levels .",
    "at least , @xmath0 seems to contain all the fields necessary to represent higher gradients of the @xmath8-form and @xmath9-form potential as well as the ` dual ' graviton .",
    "besides those , there are many other representations that are conjectured to be linked to other dynamical ( potentially even yet unknown ) degrees of freedom of m - theory .",
    "first promising indications that such a description of m - theory via an @xmath0 @xmath2-model may indeed work are given by the highly nontrivial observation that it may be reconciled ( in a truncation to low levels ) with both ( massive ) @xmath10 and @xmath11 supergravity  @xcite , as well as the possible correspondence of @xmath3 singlets at quite high levels to @xmath12 , @xmath13,  corrections of m - theory  @xcite .    clearly , it is essential to perform an extension of the construction beyond level three .",
    "as we will see , this is bound to require some quite involved algorithms , and hence this line of research may well benefit from scientific exchange with computer scientists specialized in symbolic algebra .",
    "therefore , the present article is somewhat more verbose than one targeted exclusively at a string theory audience .",
    "while it is not expected of readers with a specialization in symbolic algebra to comprehend all of the physics upon first reading , at least the relation between the relevant concepts should become clear .",
    "while we will be concerned exclusively with the determination of commutators for the borel subalgebra of @xmath0 in this work , details on the construction of the model up to level three can be found in  @xcite .",
    "in the following , we will make extensive use of irreducible representations of the @xmath14 lie algebra that are obtained by applying mixed - symmetry young projectors on tensor powers of the fundamental vector representation .",
    "we use the usual convention of first symmetrizing over rows , then symmetrizing over columns of a young tableau , i.e.    @xmath15    it is furthermore convenient to lay out all the indices of a tensor carrying a single irreducible representation in a form that directly mirrors the shape of the corresponding symmetrizer s tableau .",
    "however , as we will mostly have to deal with short symmetrizations and long anti - symmetrizations in the analysis of @xmath0 , we will rotate our tableaux by a counterclockwise quarter - turn . thus ,",
    "_ from now on _ , we write e.g. @xmath16 for the ` dual graviton ' generator at level three in the @xmath5 decomposition of @xmath0 .",
    "_ despite this notation , which is rotated solely for obvious typographic reasons , we will still speak of the _ symmetrization of rows _ and _ anti - symmetrization of columns _ ! _",
    "we will also extensively apply symmetrization and anti - symmetrization operations to groups of indices . while this is usually denoted with brackets or parentheses around groups of indices , such as in . ]",
    "@xmath17e}:=x_{ab'c'd'e}\\delta^{b'c'd'}_{b\\pp c\\pp d\\pp}\\ ] ] this ad - hoc notation has two important drawbacks :    * it is highly unpractical for more complicated situations with interlocking symmetrizations . *",
    "positional information is used to convey information about symmetrizations .",
    "in particular , there is no reasonable way to translate an expression like @xmath18 to full bracketed - indices symmetrization notation .",
    "such quantities are , however , bound to appear in the analysis of higher levels of hyperbolic kac - moody symmetries .",
    "the second problem mentioned has an important conceptual aspect : there are two different ways to apply an ( anti-)symmetrization to a given mixed - symmetry tensor .",
    "one has to discern between using the antisymmetry in indices of the same column to exchange boxes , i.e. @xmath19 and applying a symmetrization to index names , as in : @xmath20 which would correspond to ` placing brackets around @xmath21 $ ] ' .",
    "one can make the idea rigorous that the first operation acts on the right , while the second one acts on the left of the operation of _ naming _ tensor indices , hence we will denote the first kind of symmetrization as a _ box shifting _ symmetrization , and the second one as an _ index relabeling _ symmetrization",
    ". note that box shifting symmetrizations are conceptually tied to individual columns of a single ( mixed - symmetry ) tensor , while index relabeling symmetries are more naturally associated to entire sums , not individual summands , as they amount to introducing an extra @xmath22 factor .",
    "a large part of the algebraic complexity of the higher levels is related to the fundamental difference between these two concepts .",
    "we clearly need a new notation for index relabeling symmetrizations that overcomes the forementioned problems .",
    "we will use the convention to denote symmetrization in indices @xmath23 by appending a formal ( pseudo-)factor @xmath24 to the right of the term , and likewise anti - symmetrization in these indices by a formal factor @xmath25 .",
    "this definition implicitly contains the rule to apply such factors one by one from the left to the right to a term , replacing @xmath25 by @xmath26 , where @xmath27 are fresh indices , and substituting free indices @xmath28 , @xmath29 , etc . in all factors to the left of it .",
    "if it helps to make a point , we will occasionally include trivial one - index symmetrization factors like  @xmath30 in our formulae .",
    "to give an example , applying a specific young projector may now be written as : @xmath31 the numerical factor @xmath32 , @xmath33 in our example , that makes a sequence of a tableau symmetrization followed by a tableau anti - symmetrization an idempotent projector , is given by @xmath34 ( for every box in the tableau , there is exactly one hook , which consists of this box and all that lie either in the same row and to the right of it , or in the same column and further down . )    note that with this notation , it is very easy to make proper use of both box shifting and index relabeling symmetries .",
    "for example , we have :",
    "@xmath35    this raises the question how to define normal forms for such expressions .",
    "this is an involved issue that has many technical and algorithmic aspects and hence is discussed in detail in the appendix in section  [ normalforms ] . in brief",
    ", the idea behind the scheme used in this work is to treat all extra ( non - overlapping ) index symmetrizations on a tensor as being ordered lexicographically , then using them one after another to put as many lexically small tensor indices into columns to the far right as possible .",
    "this means in particular ( as is shown with an example in the appendix ) that submitting a mixed - symmetry tensor in normal form to its associated young symmetrization will in general produce a sum of _ more than one _ tensor in normal form .",
    "this is mostly due to our ignorance of more complicated relations between mixed symmetry representations with permuted indices , which are most easily expressed in terms of garnir symmetries  @xcite  these will be explained in some more detail at the end of section  [ l3mod ] .    defining a normal form that takes into account all three types of column antisymmetrization , index relabeling , and garnir symmetries , and",
    "can be computed with sufficient efficiency for an application to @xmath0 is not as inextricable as it may seem at first , but will not be discussed here , even if using such a normal form that differs from the one used here will eventually turn out to be inevitable when going to high levels . note that if one would not have to deal with index relabeling symmetries , it would be possible to define normal forms of filled tableaux just such that in a tensor in normal form , all indices appear in lexically ascending order in every column as well as in every row .",
    "any tensor can be transformed into a linear combination of tensors of that form by repeated application of garnir as well as column antisymmetries .",
    "it is easy to see that this prescription has to be refined further to get unique normal forms in the presence of index relabeling symmetries , as is demonstrated by the following example : @xmath36",
    "one can imagine that the situation will get far more involved in situations where e.g. index relabeling symmetries touch indices that are not located at the boundary of the tableau .",
    "a further issue concerns the use of epsilon tensors : in young tableau index notation , an element of the @xmath0 algebra which appears in the @xmath37-fold iterated commutator @xmath38,e_1^{ghi}],e_1^{jkl}]\\ldots]}_{n}$ ] will carry @xmath39 indices .",
    "typically , some of those will form columns of maximal length ( here @xmath40 ) that could be extracted as extra factors @xmath41 .",
    "for the sake of a homogeneous presentation , we will not do so , and instead keep all columns of maximal length explicit .",
    "we start this section by reviewing a few ideas and facts from cartan - dynkin theory and its application to @xmath0 .",
    "the roots of the @xmath0 algebra lie on the unique even unimodular lorentzian lattice @xmath43 .",
    "taking the ten - dimensional scalar product to be @xmath44 this lattice is spawned by these ten vectors of squared length two ( cf .",
    "@xcite ) @xmath45    the dynkin diagram encoding the geometrical structure of this lattice is given in figure  [ e10dynkin ] .",
    "the dynkin diagram of @xmath42 extended to @xmath0,width=302 ]      one key property of lie algebras is the geometry of their root lattice . choosing a hyperplane through the origin that does not contain any further lattice point in order to separate lattice vectors into a ` positive ' and ` negative ' half and denoting positive lattice vectors that can not be written as the sum of other positive lattice vectors as _ simple roots _ , this information can be concisely encoded in the cartan matrix @xmath46 , which contains the scaled ( not necessarily euclidean ) scalar products of the simple roots : @xmath47    the off - diagonal entries of a cartan matrix are nonpositive integers , due to the indecomposability of the simple roots .",
    "vice versa , it is possible to construct the lie algebra @xmath48 from a generalized cartan matrix : one first defines the chevalley generators @xmath49 , with commutators satisfying @xmath50&=&a_{ij}e_j&\\quad&[h_i , f_j]&=&-a_{ij}f_j\\\\ { } [ e_i , f_j]&=&\\delta_{ij}h_i&\\quad&[h_i , h_j]&=&0 .",
    "\\end{array}\\ ] ]    the algebra @xmath48 is then obtained first forming the free lie algebra , which is spawned by all the commutators that can be built recursively from these generators , modulo the jacobi identity @xmath51,z]+[[y , z],x]+[[z , x],y]=0.\\ ] ] this free lie algebra then has to be divided by the serre relations : @xmath52\\ldots]]=0\\\\ { } \\underbrace{[f_i,[f_i,\\ldots,[f_i}_{1-a_{ij}},f_j]\\ldots]]=0 .",
    "\\end{array}\\ ] ]    for finite - dimensional lie algebras , all roots have squared length @xmath53 . in the hyperbolic case  where we will take @xmath0 as our primary example  the metric on the root space is indefinite , and while there is just one generator associated to every root with @xmath53 ( as in the finite - dimensional case ) , the multiplicity of roots inside the ` light cone ' , with @xmath54 , increases quite dramatically with increasing @xmath55 . while the jacobi and serre relations determine the structure of the lie algebra , it is a difficult and basically still unsolved problem to effectively identify those multiple commutators of chevalley generators @xmath56 that vanish due to the serre relations , which may be revealed only after multiple applications of the jacobi identity .    while one may construct a lie algebra basis as well as determine the structure constants directly from the simple roots , it is frequently more convenient and more useful to identify a simple subalgebra that has a simple geometrical description by omitting one ( or more than one ) simple root , and slice the algebra into irreducible representations of this sub - algebra , graded by the number of occurrences of the operator @xmath57 or @xmath58 corresponding to the omitted root @xmath59",
    "this leads to the presentation of commutators in the language of tensors of the sub - algebra .",
    "an example of this technique , the decomposition of @xmath60 in terms of its @xmath61 sub - algebra , can be found in appendix  b of  @xcite .",
    "in this work , we limit our analysis to @xmath0 borel subalgebra commutation relations that are schematically of the form @xmath62.\\ ] ] most of the technical complication comes from the demand to work not with explicit roots , but abstract tensor equations , and the combinatorical infeasibility to use naive ( anti-)symmetrization by generating all permutations if more than eight indices have to be ( anti)-symmetrized . hence , the question arises how to organize calculations in such a way that maximal use can be made of overlaps with pre - existing symmetries .",
    "the determination of commutators for the @xmath0 algebra not only gets more and more voluminous with increasing @xmath5 level , one also has to use an increasing number of different algebraic tricks with increasing level .",
    "also , some steps performed for the first few levels of the construction can be interpreted in multiple  sometimes unexpected ",
    "ways , and often , only one interpretation can be suitably generalized to be of use for higher levels as well .    hence , it makes sense to start the discussion of higher levels with a brief review of the derivation of commutators up to level  @xmath4 , where we mark those steps in the construction that require closer inspection , resp .",
    "modification , when going to higher levels with @xmath64 . a more detailed discussion of the nature of these steps",
    "will then be given in section  [ l3mod ] .",
    "one important tool in the derivation of commutation relations is the representation table in  @xcite , whose first few entries we quote for convenience :    .[e10table]@xmath5 representations in @xmath0 up to level @xmath65 [ cols= \" > , > , > , > , > , > , > \" , ]     at level one , there is the single three - form corresponding to the root @xmath66 . as there is only a single six - form at level two ,",
    "the only sensible level two commutator that can be written down  @xmath67 is @xmath68=\\alpha e_2^{abcdef}.\\ ] ] as the normalization of @xmath69 can be chosen arbitrarily , we set the coefficient @xmath70 .    the level three , we get a single tensor of mixed symmetry . again",
    ", the most general ansatz for the level three commutator is @xmath71=\\left(\\alpha_1 e_3^{\\begin{young}a\\cr b&c&d&e&f&g&h&i\\cr\\end{young}}+\\alpha_2 e_3^{\\begin{young}g\\cr a&b&c&d&e&f&h&i\\cr\\end{young}}\\right)\\cdot\\alpha(abcdef)\\cdot\\alpha(ghi)\\ ] ] as there are only two different ways how to distribute indices from two columns of lengths ( 6,3 ) to two columns of lengths ( 8,1 ) .",
    "if we make use of the identity @xmath72 and the freedom in the normalization of @xmath73 , this can be reduced to @xmath74=e_3^{\\begin{young}g\\cr a&b&c&d&e&f&h&i\\cr\\end{young}}\\cdot\\alpha(abcdef)\\cdot\\alpha(ghi).\\ ] ]    in order to obtain an expression for @xmath73 without the extra index relabeling symmetrizations in terms of commutators @xmath75 $ ] , we first apply an index relabeling symmetrization  @xmath76 enforcing the column anti - symmetry of @xmath77 : to the entire expression : @xmath78\\cdot\\alpha(g)\\cdot\\alpha(abcdefhi)\\\\ = & \\frac{1}{3}\\left(e_3^{\\begin{young}g\\cr a&b&c&d&e&f&h&i\\cr\\end{young}}+2e_3^{\\begin{young}a\\cr b&c&d&e&f&g&h&i\\cr\\end{young}}\\right)\\cdot\\alpha(g)\\cdot\\alpha(abcdefhi ) .",
    "\\end{array}\\ ] ] from this point on , we will only work with terms with the proper column symmetry @xmath79 .",
    "besides the desired term , we get an extra contribution where the tableau structure does not match the index symmetrizations .",
    "this can be eliminated by making use of the jacobi identity @xmath80 in the form @xmath81,e_1^{ghi}]+[[e_1^{def},e_1^{ghi}],e_1^{abc}]+[[e_1^{ghi},e_1^{abc}],e_1^{def}]=0.\\ ] ] which can be reduced to an equation between @xmath73 tensors by use of the definitions  ( [ e3def - false - symmetry],[e2def ] ) @xmath82 which then has to be brought to @xmath79 symmetry : @xmath83 this can then be used to reduce  ( [ e3def - resymmetrized ] ) to @xmath84\\cdot\\alpha(g)\\cdot\\alpha(abcdefhi)=\\frac{1}{4}e_3^{\\begin{young}g\\cr a&b&c&d&e&f&h&i\\cr\\end{young}}\\ ] ] which is of the desired form .      when going to level @xmath85 , a few new features are encountered .",
    "first and foremost , the commutator @xmath86 $ ] will now contain two different representations .",
    "the most general ansatz which corresponds to  ( [ level3most - general ] ) for level @xmath4 now is @xmath87\\\\ = \\left(\\alpha_1 e_4^{\\begin{young}j&k&l\\cr a&b&c&d&e&f&g&h&i\\cr\\end{young } } + \\alpha_2 e_4^{\\begin{young}b&j&k\\cr a&c&d&e&f&g&h&i&l\\cr\\end{young}}\\right.\\\\ \\phantom= + \\alpha_3 e_4^{\\begin{young}a&j&k\\cr b&c&d&e&f&g&h&i&l\\cr\\end{young } } + \\alpha_4 e_4^{\\begin{young}b&c&j\\cr a&d&e&f&g&h&i&k&l\\cr\\end{young}}\\\\ \\phantom= + \\alpha_5 e_4^{\\begin{young}a&b&j\\cr c&d&e&f&g&h&i&k&l\\cr\\end{young } } + \\alpha_6 e_4^{\\begin{young}b&c&d\\cr a&e&f&g&h&i&j&k&l\\cr\\end{young}}\\\\ \\phantom= + \\alpha_7 e_4^{\\begin{young}a&b&c\\cr d&e&f&g&h&i&j&k&l\\cr\\end{young}}\\\\ \\phantom= + \\beta_1 e_4^{\\begin{young}j\\cr k\\cr a&b&c&d&e&f&g&h&i&l\\cr\\end{young } } + \\beta_2 e_4^{\\begin{young}a\\cr j\\cr b&c&d&e&f&g&h&i&k&l\\cr\\end{young}}\\\\ \\phantom= + \\beta_3 e_4^{\\begin{young}b\\cr j\\cr a&c&d&e&f&g&h&i&k&l\\cr\\end{young } } + \\beta_4 e_4^{\\begin{young}b\\cr c\\cr a&d&e&f&g&h&i&j&k&l\\cr\\end{young}}\\\\ \\phantom= \\left.+\\beta_5 e_4^{\\begin{young}a\\cr b\\cr c&d&e&f&g&h&i&j&k&l\\cr\\end{young } } \\right)\\cdot\\alpha(a)\\cdot\\alpha(bcdefghil)\\cdot\\alpha(jkl ) \\end{array}\\ ] ] taking into account all possible ways to re - distribute indices from the three columns @xmath88 to two columns of length @xmath89 , resp .",
    "three columns of length @xmath90 .",
    "clearly , we have @xmath91 , due to the anti - symmetry in @xmath92 .",
    "this approach , however , does not yet fully appreciate the mixed symmetry of the tensors on the right hand side .",
    "thinking of  @xmath93 as a linear combination of basis tensors that diagonalize the regular part of the corresponding young projector , we can use the fact that sequential application of any mixed - symmetry projection ( i.e. any arbitrary distribution of the indices to symmetrize and anti - symmetrize over ) corresponding to a tensor of this particular form to any such tensor , potentially with a different index distribution , followed by young projections to the symmetries of the tensors on the left hand side , yields either zero or ( up to an integer multiple that can be absorbed in the normalization ) just one specific combination : @xmath94    likewise for the symmetric rank-2 contribution : @xmath95    hence , if we start with @xmath96=z_1+z_2\\ ] ] we may in principle be able to derive the form of the @xmath97 $ ] commutator by making use of the jacobi identity in the schematic form @xmath98,e_1^{(ii)}]+[[e_1^{(i)},e_1^{(ii)}],e_2]+[[e_1^{(ii)},e_2],e_1^{(i)}]=0 $ ] . before we discuss this somewhat subtle issue further",
    ", we give the result .",
    "the only relevant nonvanishing commutator is : @xmath99\\cdot\\alpha(abcdefghi)\\cdot\\alpha(jkl)\\\\ = \\left(-\\frac{1}{28 } e_4^{\\begin{young}a&b&c\\cr d&e&f&g&h&i&j&k&l\\cr\\end{young } } -\\frac{3}{28 } e_4^{\\begin{young}a&j&k\\cr b&c&d&e&f&g&h&i&l\\cr\\end{young}}\\right.\\\\ \\phantom=\\left.-\\frac{3}{28 } e_4^{\\begin{young}a&b&j\\cr c&d&e&f&g&h&i&k&l\\cr\\end{young } } -\\frac{1}{28 } e_4^{\\begin{young}j&k&l\\cr a&b&c&d&e&f&g&h&i\\cr\\end{young}}\\right)\\\\ \\cdot\\alpha(abcdefghi)\\cdot\\alpha(jkl)\\\\ \\end{array}\\ ] ]      as the structure of the lie algebra is determined fully by the serre relations and the jacobi identity , and both enter ( indirectly ) into the determination of root multiplicities via the peterson formula , one may ask the question whether the problem that the serre relations and jacobi identity are interlocked in an unwieldy way may be circumnavigated by trying to trade the serre relations for the known root multiplicities in the level by level determination of the structure constants . in other words , taking a commutator definition of the form of  ( [ e4-e3e1 ] ) , what information can be extracted from the jacobi identity at the given level ? in particular , is it possible to derive further relations of the form  ( [ e3-jacobi ] ) that can be used to simplify the commutator ?    a head - on approach to this problem at level  @xmath100 is to systematically generate _ all _ possible commutator structures of @xmath100 tensors @xmath101 and all linear relations between three of them determined by the jacobi identity . taking all possible index distributions into account , and re - symmetrizing to a given desired young tableau column antisymmetry ,",
    "this is bound to produce all the relevant relations that can be obtained in such a way .",
    "clearly , this procedure soon becomes infeasible even on a powerful computer due to combinatorical explosion , but it is nevertheless important to try this for the following reasons : first of all , there are many opportunities where even a small mistake in the implementation of an extensive algebraic algorithm can lead to wrong results that are hard to detect with the naked eye , do not occur for many simple test cases , but lead to inconsistencies in large calculations . an extensive analysis like",
    "the one described is one of the few but crucially important ` smoke tests ' available that help to discover program bugs .",
    "unfortunately , it also can only give binary information : either simplification of a considerable number of linear equations ( typically @xmath102 equations containing in total @xmath103 summands with twelve - index tensors at level four ) gives nonsensical relations like a vanishing commutator that is known to be nonzero , or a set of equations that seem to make sense . in the former case ,",
    "the so far only way to find a bug seems to be to print out a detailed trace of all term transformations in the program and check this manually  which easily becomes highly frustrating sysiphus labour in the long run .",
    "the second reason is that this is the conceptually simplest approach to the systematic determination of commutators of the form @xmath104 $ ] for @xmath105 .",
    "while one might initially try to start with a definition for @xmath106 $ ] and use the jacobi identity to derive the commutator @xmath107 $ ] by splitting  @xmath108 to a term of the schematic form  @xmath109 $ ] , and then continue with this procedure to successively determine @xmath110 $ ] , etc .",
    ", this approach is complicated considerably by the fact that a direct application requires using a definition of the schematic form @xmath111 $ ] , while one starts with an equation of the form @xmath112=\\sum e_{\\ell - m}$ ] , with tensors belonging to a variety of irreducible representations on the right hand side , that first has to be solved . developing the relevant algorithmic techniques to efficiently automatize this",
    "is simplified greatly by knowing the right answer from the start from a conceptually simpler and hence more robust approach that may well be not efficient enough to be used for high levels .",
    "efficient algorithms to generate a complete set of level  @xmath100 double - commutator identities from the jacobi identity are described in appendices  [ all - cs],[all - jacobi ] .",
    "these furthermore have to be instantiated with all possible distributions of the indices @xmath113 to the fundamental @xmath101 tensors , modulo permutation of groups of three indices , e.g. @xmath114 , and then re - symmetrized in all possible different ways to the desired symmetry .",
    "special care has to be taken with substitutions of commutator definitions : it is easy to overlook that an equation of the form @xmath115\\cdot\\alpha(\\ldots)\\cdot\\alpha(\\ldots)=\\sum",
    "\\langle{\\rm tensors}\\rangle\\cdot\\alpha(\\ldots)\\cdot\\alpha(\\ldots)$ ] may only be substituted into a term containing @xmath115\\cdot\\alpha(\\ldots)\\cdot\\alpha(\\ldots)$ ] after suitable index re - labeling if the distribution of indices in the ( anti-)symmetrizers @xmath116 relative to the distribution of those indices to the columns of @xmath117 can be made to agree . efficiently finding suitable index relabelings",
    "so that a substitution can be applied is a further nontrivial task .",
    "looking at the step from level  @xmath4 to  @xmath85 , the major points that are not yet visible at level  @xmath4 and require generalization for an algorithmic approach are the following :    @xmath67 : for a simplified uniform systematic algorithmic treatment , all commutator definitions have to be given in a form such that both left hand side and right hand side make the column anti - symmetries of the tensors in the commutator explicit . hence , even the @xmath118 $ ] commutator should be given in the form @xmath68\\cdot\\alpha(abc)\\cdot\\alpha(def)=\\alpha e_2^{abcdef}\\cdot\\alpha(abc)\\cdot\\alpha(def),\\ ] ] whose anti - symmetrization redundancy might look slightly nonsensical , but actually helps greatly to simplify many algorithms .",
    "@xmath76 : one should use a sequence of young tableau projections instead of just the corresponding column anti - symmetrizations to reduce commutator definitions .",
    "@xmath80 : at least at level  @xmath85 , trying to use the jacobi identity to derive further relations between ` wrongly symmetrized ' tensors of mixed symmetry seems to be a red herring .",
    "the jacobi identity does not produce any new relations of the strict form @xmath119 . even at level  @xmath4 ,",
    "it is perhaps more helpful to think of the corresponding identity as a consequence of a garnir symmetry and not the jacobi identity : for every pair of horizontally adjacent boxes in a tableau , there is a linear relation between all tableaus with fillings that can be obtained by permuting the indices in those two boxes , plus all below the left one , plus all above the right one , in all possible ways .",
    "the coefficients in that linear relation are @xmath120 , and determined by the constraint that the relative sign between terms that differ by an exchange of adjacent boxes is @xmath121 .",
    "thus , for the two horizontally adjacent boxes in the tensor @xmath122 , we get the relation : @xmath123 anti - symmetrizing with @xmath124 then gives  ( [ e3-jacobi ] ) .",
    "hence , if the notion of a tensor normal form already respected garnir symmetries , the reduction from  ( [ e3def - resymmetrized ] ) to  ( [ e3-def ] ) would be automatic .",
    "there are a few obvious issues that have to be kept in mind when going from level four to level five .",
    "first of all , one no longer has one single commutator of the form @xmath125 $ ] , but two different level four representations whose commutators with @xmath101 have to be taken .",
    "furthermore , one no longer can just normalize @xmath126 tensors such that they appear with coefficient  @xmath127 in such a defining equation .",
    "the reason is that the @xmath128 representation at @xmath129 may a priori appear in the commutator of both @xmath85 representations with @xmath101 .",
    "one might still argue that it will presumably at least appear in the commutator of the @xmath130 representation with @xmath101 , as this commutator can not produce the only other @xmath129 representation .",
    "if it were zero , the generators belonging to @xmath130 would have to commute not only with @xmath101 , but ( via the jacobi identity ) also with @xmath69 , and ( inductively ) with all generators at higher level .",
    "hence , the coefficient could be set to one in this particular commutator .",
    "such reasoning can not be carried any further , however , as the @xmath131 representation at level @xmath65 is in the tensor product of both @xmath129 representations with the level - one representation , which both carry further tensors . at level @xmath132 ,",
    "we encounter outer multiplicities @xmath133 for the first time .",
    "lacking a powerful theory of the structure of hyperbolic kac - moody algebras , their possible relevance in gravitational physics  especially the conjectured role of @xmath0 for @xmath134-theory  probably justifies going to great lengths to obtain detailed information about even only the first few elements of a finite truncation .",
    "this is virtually impossible to achieve to satisfactory depth via manual calculation , both due to the sheer number of steps and due to the inherent ineptness of humans to execute them in such large numbers without making mistakes .",
    "hence , this task is bound to require computer aid .",
    "unfortunately , the algorithmic side of this problem turns out as being of unusually high complexity , hence despite considerable technical effort , only very little could be achieved in this work in terms of new data about @xmath0 structure constants .",
    "the most important obstacle to further progress seems to be the unavailability of powerful tests that simplify the discovery and analysis of flaws and errors in algorithms and their implementations : while it is essential to try out various approaches to individual sub - problems ( and , as it turns out , frequently change them when they have to be embedded into a larger context ) , all that can be done to validate an algorithm ( not to speak of verification ) is to use it to automatically generate all conceivable relations from a certain not too small set , semi - automatically check for inconsistencies , and ",
    "should they arise  eventually redo dozens of lengthy calculations by hand that involve tensors with more than ten indices , where one has to especially take great care about signs from index re - orderings .",
    "one has to note that certain problems are specific to situations with quite many indices , so that simple test cases frequently just do not exist .",
    "the problem may well be that even the appropriate questions have not yet been found that have to be asked , and answered , to make the validation phase more bearable . addressing this problem",
    "presumably should be the most reasonable next step before changing the definition of normal forms such that garnir symmetries are properly taken care of .",
    "then , the issue of a systematic determination of @xmath135 $ ] commutators has to be addressed before the @xmath0 sigma - model can be extended to higher levels . as it turned out that the task of actually implementing the relevant algorithms is highly prone to sign and similar errors , and as debugging is complicated by the fact that it is virtually impossible to develop an intuition for such terms , a reference implementation in lisp that also can be used to redo the calculations presented here within reasonable calculation time will be made publicly available in the next release of  @xcite .",
    "[ [ acknowledgments ] ] acknowledgments + + + + + + + + + + + + + + +    the analysis presented here could not have been performed without helpful and encouraging discussions with sophie de buyl , francois englert , marc henneaux , and laurent houart from ulb , and hermann nicolai , and kasper peeters , and especially axel kleinschmidt from aei .",
    "the author furthermore acknowledges financial support by the german academic exchange service via the daad postdoc research program .",
    "this work was partially supported by iisn - belgium ( convention 4.4505.86 ) , by the `` interuniversity attraction poles programme ",
    "belgian science policy '' and by the european commission fp6 programme mrtn - ct-2004 - 005104 , in which the author is associated to v.u .",
    "in this appendix we list algorithms that are used to address various parts of the problem .",
    "the naive translation of the symmetrization / anti - symmetrization prescriptions for young tableau projections to a computer algorithm reaches its limits quite early , often already with problems that  using some thought  easily can be done by hand .",
    "the primary underlying reason is that a naive execution of a task like e.g. the anti - symmetrization over nine indices generates @xmath136 different individual copies of a term with indices re - distributed in all possible ways which then usually have to be classified and subjected to further reductions .",
    "nevertheless , quite many research problems where such manipulations are necessary are of such a structure that , given an unlimited amount of time and energy , the analysis could be taken to almost arbitrary depth . not seldom , there is a considerable gap between the point where one can claim to have obtained a sufficiently deep understanding of the mathematical structure that going any further is not expected to produce valuable additional insights and the point where it becomes unfeasible to do calculations by hand .",
    "this raises the question how to formalize those ideas that make the simple cases feasible by hand in such a way that they can be executed as effectively by a machine , only much faster and much more reliable than by a human .",
    "the key idea here is to make as much use of overlapping symmetrizers and anti - symmetrizers as possible .",
    "while one may want to consider terms formed out of general products of tensors with mixed symmetry , we limit our discussion to the framework of lie algebras , where the only product of terms is the commutator . conceptually",
    ", this is also the most interesting case , as the issue of normal forms of terms will be more involved here than with simple tensor products .",
    "additionally , we restrict ourselves to tensors with contravariant indices belonging to one @xmath137 algebra only",
    ". this last restriction will eventually have to be softened , at the very least to allow indices to be either all contravariant or all covariant , in order to represent commutators of the @xmath135 $ ] type .",
    "the case of more general base algebras than @xmath137 may also be studied , but the price that has to be paid is that the relation between irreducible representations and corresponding tableaux gets much more involved , hence this is not considered here .      the most natural way to represent a tensor @xmath138 is as a tuple @xmath139 , where @xmath140 is the _ type _ of the tensor , @xmath141 is some abstract weight that will be used to normalize commutators , @xmath142 the shape of the young tableau , and @xmath143 a vector of indices . on the pragmatic level , @xmath140 will also include information about a printable tensor name .",
    "we furthermore assume a strict order @xmath144 as well as addition to be defined on tensor weights , which will be used for sorting tensors , e.g. to determine normal forms for sums .",
    "the tableau shape @xmath142 must provide information about where to place an index from the linearized presentation @xmath143 in the tableau .",
    "this can be achieved e.g. by just recording the lengths of the rows of the tableau , and using the convention to record indices in normal reading order .",
    "furthermore , @xmath142 must provide information that allows one to quickly extract all the indices belonging to a given column from @xmath143 . when building terms from tensors , it is useful not to put the tensor @xmath138 into the term as it is , but rather a tuple @xmath145 , where the tensor is supplemented by an extra bit of information describing whether reduction to normal form has been applied to this quantity or not .",
    "note that data representations in a real implementations may not strictly adhere to these lines , as there might be practical reasons to e.g. include normalization information directly in the tensor data structure .      from tensors , we can recursively form sums and commutators .",
    "this is formalized by the definition of a term  @xmath146 as a tuple @xmath147 , where @xmath148  is a ( sorted ) vector of summands  @xmath149 with @xmath150 either a tensor or a commutator , and @xmath151 a coefficient .",
    "we impose the restriction that all summands must be of the same weight .",
    "the weight of a commutator is just the sum of the weights of its summands , and the weight of a term is just the weight of any of its summands .",
    "@xmath152 describes all the non - overlapping symmetrizations or anti - symmetrizations applied to the indices occurring inside this term .",
    "as index - symmetrization is an operation that is performed by multiplying a @xmath153 tensor onto an expression , this is most naturally represented on the level of terms , not individual tensors . in particular",
    ", symmetrizations will frequently stretch over indices belonging to two different sides of a commutator .",
    "@xmath152 is a list of pairs  @xmath154 of a type bit discerning symmetrization from anti - symmetrization and a lexicographically ordered vector of index names .",
    "@xmath152 itself is ordered lexicographically with respect to the index name vectors .    as we may occasionally have to deal with the problem to extract a sign factor from a term , e.g. when bringing a commutator to normal form , which would have to be propagated through the ` outer context ' of a subterm that is embedded in a term for normalization purposes",
    ", it can be convenient to be able to define normal form modulo a constant factor , hence we consider augmented terms  @xmath155 which are tuples of a term  @xmath146 with coefficient of the leading summand being  @xmath127 , an overall factor  @xmath156 , and a bit denoting whether @xmath146 and all its summands are guaranteed to be in normal form .",
    "a commutator  @xmath157 is just a pair @xmath158 of a left and a right side , which both are augmented terms @xmath159 .",
    "again , we augment this structure by an additional bit , @xmath160 , that provides information whether both the left and right entry are guaranteed to be in normal form , and furthermore whether the left side is smaller than the right side with respect to the order on terms , to be described next .      consequent use of augmented tensors , commutators , and terms allows to do many symbolic manipulations without unnecessary normalization steps for subterms that already are in normal form .",
    "just as the definitions of commutators and terms have to recursively refer to one another , so do the definitions of their respective normal forms .",
    "we define a term to be in normal form , if its summands are in normal form and sorted in ascending order with respect to the order that treats a commutator as smaller than any tensor , compares commutators lexicographically , and orders tensors first by their type @xmath140 , then by their index distribution ( which is assumed to be normalized ) , and read for the purpose of ordering in kanji reading order ( column by column right to left , every column up to down ) .",
    "a commutator is in normal form if the summands of the left side are smaller in lexicographical comparison to the summands on the right side . for index symmetrizations ,",
    "normal form is defined by first ordering the indices in every symmetrization block lexically , then ordering symmetrizations lexicographically by their indices ( not symmetrizing / anti - symmetrizing type ) .",
    "commutator and tensor normalization is complicated by the fact that these may be subject to index symmetrizations that do not match their own structure ( i.e. indices to be antisymmetrized over may be spread out over both sides of a commutator , or multiple columns of a tableau ) .",
    "this is resolved as follows : when recursively traversing the tree of commutators and terms , and mapping it bottom - up to a tree in normal form , an environmental parameter that denotes the presently active index symmetrizations is set whenever recursion proceeds from a term with extra symmetries to its summands . in some programming languages like perl or lisp ,",
    "this is facilitated by the use of local variables , which , when set in the caller are visible to the callee and shadowed by inner local definitions .",
    "this can prove to be useful in order to unclutter code from extra function arguments that perhaps should be kept implicit .",
    "tensors are normalized by first normalizing all extra index symmetrizations that act on it to those indices that occur in the tensor , then applying them sequentially to bring as many lexically small indices to the rightmost column , then to the second rightmost , etc . then , tensor columns are sorted lexicographically , and extra indices protruding in the first column over the second , which are only subject to symmetrization from the young tableau projector , are brought to inverse lexical order ( which will again move the lexically smallest index to the rightmost column ) . clearly , great care has to be taken with signs introduced by these symmetrizations .    with the normalization of commutators , there are two aspects : first , which of the terms to place left , and second , how to distribute indices between them should an index symmetrization from the environment cover indices on both sides ? unfortunately ,",
    "these are somewhat interlocked , and while this issue may be resolved properly , this would mean both unnecessary code complexity and extra calculation time for many applications .",
    "hence , we use a somewhat simplistic approach to this and first compare the weights of the terms on both sides .",
    "should these turn out to be equal , we do a lexicographical comparison to the summand vectors , with the same order that is used to order summands .",
    "this is then used to decide which term to put to the left ( the one with larger weight , or the second in lexicographical comparison for equal weights ) in the commutator .",
    "then , we make use of the presently relevant symmetrizations one after another to rename the indices in the commutator in such a way that each one tries to bring as many lexically small indices to the left as possible",
    ".    one should keep in mind that with this definition of normal forms , applying a young symmetrization to a term containing a single tensor that is in normal form will in the general case produce a term that contains more than one tensor in normal form , as in :          taking a term  @xmath146 that carries  @xmath163 symmetrizations  @xmath164 , where we take the @xmath165 to cover all of the indices of  @xmath146 ( i.e. we include anti - symmetrizations over single indices for uniform treatment ) , it is comparatively easy to introduce a new symmetrization @xmath166 that completely covers a subset of the existing ones : the new index symmetries of the re - symmetrized tensor are just the pre - existing ones plus @xmath166 minus those absorbed into @xmath166 , brought to normal form .",
    "one only has to recursively traverse the term to bring it back to normal form with the new index relabeling symmetries in place .    for the case",
    "that a new symmetrization  @xmath166 will only overlap some of the pre - existing symmetrizations without covering them completely , a reasonable approach is to first split those overlapping symmetrizations one by one , and then proceed as above .",
    "splitting symmetrizers is such an important and ubiquitous function that a symbolic algebra library should export it to the user .",
    "while one normally would want all such functions to return normalized terms , it turns out that there are a few situations where such normalization is not immediately helpful , but computationally expensive , hence it should be possible to disable the final normalization step with an appropriate parameter .    besides the obvious term to be split , the further arguments to the index splitting function are the previously existing symmetry @xmath154 and a ( sorted ) vector of sub - indices @xmath167 .",
    "re - distribution of indices in all possible ways modulo permutation of those  @xmath168 indices that are in @xmath167 and permutation of those  @xmath169 indices that are in @xmath170 and not in @xmath167 generates  with our normalization conventions ",
    "@xmath171 contributions obtained by suitable index renamings , with extra coefficients @xmath172 , and  in the latter case  if the new index re - distribution is an even permutation of the former one or not .",
    "assuming the availability of an iteration construct ( to be discussed later ) that for a given pair of natural numbers @xmath173 implements systematic processing of all different pairs of vectors @xmath174 of respective lengths @xmath175 , @xmath176 for which the concatenation @xmath177 is a permutation of the vector of natural numbers @xmath178 $ ] and for which @xmath179 are each sorted in ascending order , index permutation splitting works in detail as follows :    2em=2em=2em=2em=2em=2em=2em + let + @xmath180 be a modifiable ( hash ) table mapping summands to coefficients , + @xmath181 be the list of symmetrizations , + with @xmath2 removed and @xmath182 added instead + @xmath183 be a vector of  @xmath168 natural numbers + such that @xmath184 is the position where the @xmath185-th index of @xmath167 + appears in @xmath170 , + @xmath186 be a vector of  @xmath169 natural numbers + such that @xmath187 is the position of the @xmath185-th index of @xmath170 + that does not appear in @xmath167 , + @xmath188 be the concatenation @xmath189 , + and  @xmath190 be a copy of the term  @xmath146 with its associated symmetrizations + replaced@xmath191 by @xmath181 + then + for all  @xmath192 ordered choices @xmath174 of vectors of natural numbers + of lengths @xmath193 , @xmath194 , with @xmath195 , + let + @xmath196 be the vector with entries @xmath197 , + @xmath142 be the permutation factor , @xmath198 , where the negative sign + only occurs for antisymmetrizations and + when @xmath196 is an odd permutation of @xmath170 , + @xmath199 be the term @xmath190 where indices are relabeled@xmath200 + such that @xmath201 , + then + add all the summands in @xmath199 multiplied with @xmath142 + ( also taking the overall factor @xmath156 from @xmath199 into account ) + to the result table @xmath180 .",
    "+ then + generate a result term from @xmath180 , + and normalize unless expressly wanted otherwise .            given a set of @xmath37 lie algebra generators @xmath204 , we want to generate all recursive commutator structures from them that are unique up to application of @xmath205=-[b , a]$ ] . for example , there is only one such structure at level  @xmath206 ( @xmath207 $ ] ) , while there are three at  @xmath4 ( @xmath208,x_3 ] , [ [ x_1,x_3],x_2 ] , [ [ x_2,x_3],x_1]$ ] ) and  15 at  @xmath85 ( three of type @xmath209,[x_c , x_d]]$ ] and twelve of type @xmath210,x],x]$ ] ) .",
    "we consider a commutator structure to be in normal form if all the commutator structures contained in it are in normal form , and it is either one of the @xmath213 or a commutator @xmath214 $ ] where @xmath215 .",
    "given that all commutator structures in normal form of level up to @xmath216 are known , we can form all commutator structures of level up to @xmath217 by taking all commutators @xmath218 $ ] of all level-@xmath185 commutator structures @xmath219 with all commutator structures @xmath220 of complementary level @xmath221 smaller than @xmath185 , where @xmath222 are formed from @xmath211 by suitable relabeling of indices .",
    "the @xmath223 index relabeling is done in two steps : first , one offsets all indices on the @xmath224 in @xmath225 by @xmath185 , then one performs all possible @xmath226 index permutations that preserve the relative order among the indices in the range @xmath227 and @xmath228 . for @xmath229 even , there are extra commutators with @xmath230 and @xmath225 of the same level , but one has to take care to take only those after relabeling where @xmath231 $ ] is in normal form .",
    "the commutator structures generated by the previous algorithm are not independent .",
    "while they honor the fact that @xmath205 $ ] and @xmath233 $ ] are dependent , they do not yet take into account the jacobi identity @xmath234,c]+[[b , c],a]+[[c , a],b]=0 $ ] .",
    "we want to systematically generate all such identities between three commutator structures that can be obtained by applying such a ` jacobi rotation ' to any double commutator . the list of identities generated in this step may not be algebraically independent , but will be complete and not contain duplicates .    for an efficient computer algorithm ,",
    "it is important to make use of the distinction between ` the same ' ( value in the computer s memory ) and ` equal ' ( with respect to comparison ) .",
    "while it is always easy to find out if two values are the same , finding out of they are equal may be costly for recursively built trees , hence the algorithm will contain canonicalization steps , where a freshly generated commutator structure is mapped to the one reference value in memory to which it is equal .",
    "we assume our memory representations to be such that two @xmath235 are equal iff they are the same value , while two commutators that were generated ( hence , memory - allocated ) independently at different steps in the algorithm will be assumed non - equal .    the input of the algorithm to generate all bare level @xmath100 jacobi relations is a list of all level @xmath100 commutator structures , as generated by the previous algorithm .",
    "we in particular assume that no two commutator structures in this list share any memory representations for commutators .",
    "( should the implementation of the previous algorithm not give that guarantee , we first perform a recursive copy on all structures to make every commutator unique . )    in a first step , we create a dictionary  @xmath157 that maps ( with respect to being the same , not equality ) commutator structures to pairs of an unique tag ( a number ) and the corresponding level .",
    "this is filled by recursively walking through all the input commutator structures .",
    "this means that for level  @xmath8 , this table would hold @xmath236 entries : the three top - level commutators , and the three inner commutators .    furthermore , we create a dictionary  @xmath134 that maps ( with respect to being equal ) level @xmath100 commutator structures to their canonical memory representation , which is just the input data .",
    "( for level  @xmath8 , there would be three entries in this table . ) a third dictionary @xmath138 is used to remember ( with respect to being the equal ) pairs of tags of outer / inner commutators appearing somewhere the canonical memory representation of commutator structures that already have been used in some jacobi relation .",
    "we then process the input commutator structures one after another , recursively walking through the tree of commutators , where at every place where we encounter a double commutator of either the form @xmath237,z]$ ] or @xmath238 $ ] , we obtain the tags of these commutators from  @xmath157 and check if these two generators were already used previously in the generation of a jacobi relation by checking whether there already is a corresponding entry in the tag - pair dictionary @xmath138 .",
    "if so , we do nothing at this position and just recurse further down .",
    "if not , we in addition make a corresponding new entry in @xmath138 and form the other two sub - structures obtained by cyclically rotating  @xmath239 .",
    "these are both brought to normal form , taking care of signs .",
    "note that the subtree depth that is stored in conjunction with the tag in @xmath157 is useful to speed up determination of this normal form .",
    "the problem now is to first form the complete modified level @xmath100 commutator structures for these , and second bring everything to canonical memory representation . a particularly useful technique to achieve this that is directly available in functional programming languages ( and has to be emulated in other languages ) is _ continuation coding _",
    ": when recursively traversing the commutator tree  @xmath240 down from the root , we hand over two functions as arguments in the recursive call to the function processing subtrees  @xmath146 : the first is a buildup function @xmath241 that , when called with a a commutator structure tree @xmath190 , will generate a commutator structure that equals @xmath240 with the subtree @xmath146 replaced by @xmath190 .",
    "the second is a selector function @xmath242 that , when called with a commutator structure tree @xmath243 will return ( if possible ) the subtree @xmath244 of @xmath243 that is situated in the same position relative to the root of @xmath243 as is @xmath146 relative to @xmath240 . in the recursive call to the left commutator structure subtree @xmath245 of a commutator structure @xmath146 ,",
    "the function arguments @xmath246 are : @xmath247 and likewise for the call to the right commutator structure subtree .",
    "first , the buildup function @xmath241 is used twice to generate the two other jacobi - rotated level  @xmath100 normalized commutator structures .",
    "these are then mapped to their canonical memory representation by use of the dictionary  @xmath134 .",
    "the selector function  @xmath242 now allows to locate the canonical memory representations of the rotated outer and inner commutator .",
    "these are looked up in  @xmath157 to form their tag pairs , which are then entered in  @xmath138 to ensure that the relation that just has been found is not generated again ( twice , even ) .",
    "the number of relations grows as follows with the level : @xmath248 for level  @xmath85 , we get explicitly : @xmath249,x_{3}],x_{4}]-[[x_{1},x_{2}],[x_{3},x_{4}]]-[[[x_{1},x_{2}],x_{4}],x_{3}]\\\\ 0=+[[[x_{1},x_{4}],x_{2}],x_{3}]-[[x_{1},x_{4}],[x_{2},x_{3}]]-[[[x_{1},x_{4}],x_{3}],x_{2}]\\\\ 0=+[[[x_{1},x_{3}],x_{2}],x_{4}]-[[x_{1},x_{3}],[x_{2},x_{4}]]-[[[x_{1},x_{3}],x_{4}],x_{2}]\\\\ 0=+[[[x_{3},x_{4}],x_{2}],x_{1}]-[[[x_{2},x_{4}],x_{3}],x_{1}]+[[[x_{2},x_{3}],x_{4}],x_{1}]\\\\ 0=+[[[x_{3},x_{4}],x_{1}],x_{2}]-[[[x_{1},x_{4}],x_{3}],x_{2}]+[[[x_{1},x_{3}],x_{4}],x_{2}]\\\\ 0=+[[[x_{2},x_{4}],x_{1}],x_{3}]-[[[x_{1},x_{4}],x_{2}],x_{3}]+[[[x_{1},x_{2}],x_{4}],x_{3}]\\\\ 0=+[[[x_{2},x_{3}],x_{1}],x_{4}]-[[[x_{1},x_{3}],x_{2}],x_{4}]+[[[x_{1},x_{2}],x_{3}],x_{4}]\\\\ 0=+[[x_{1},x_{4}],[x_{2},x_{3}]]+[[[x_{1},x_{4}],x_{3}],x_{2}]-[[[x_{1},x_{4}],x_{2}],x_{3}]\\\\ 0=+[[x_{1},x_{4}],[x_{2},x_{3}]]-[[[x_{2},x_{3}],x_{4}],x_{1}]+[[[x_{2},x_{3}],x_{1}],x_{4}]\\\\ 0=+[[x_{1},x_{3}],[x_{2},x_{4}]]+[[[x_{1},x_{3}],x_{4}],x_{2}]-[[[x_{1},x_{3}],x_{2}],x_{4}]\\\\ 0=+[[x_{1},x_{3}],[x_{2},x_{4}]]-[[[x_{2},x_{4}],x_{3}],x_{1}]+[[[x_{2},x_{4}],x_{1}],x_{3}]\\\\ 0=+[[x_{1},x_{2}],[x_{3},x_{4}]]+[[[x_{1},x_{2}],x_{4}],x_{3}]-[[[x_{1},x_{2}],x_{3}],x_{4}]\\\\ 0=+[[x_{1},x_{2}],[x_{3},x_{4}]]-[[[x_{3},x_{4}],x_{2}],x_{1}]+[[[x_{3},x_{4}],x_{1}],x_{2}]\\\\ \\end{array}\\ ] ]    these equations then have to be instantiated with @xmath250 , @xmath251 , etc .",
    ", before definitions of known commutators are applied to obtain relations between commutators and tensors at the given level . then , all different ways how to distribute indices from the groups @xmath252 , @xmath253 , etc . to the columns of a given young tableau have to be found ( modulo exchange of groups ) .",
    "these then have to be brought to the corresponding tensor s anti - symmetries in index columns .",
    "o.  barwald and r.  w.  gebert , `` explicit determination of a 727-dimensional root space of the hyperbolic lie algebra e(10 ) , '' j.  phys .",
    "a * 30 * ( 1997 ) 2433 [ arxiv : hep - th/9610182 ]",
    ". v.  a.  belinsky , i.  m.  khalatnikov and e.  m.  lifshitz , `` a general solution of the einstein equations with a time singularity , '' adv .",
    "phys .   * 31 * ( 1982 ) 639 .",
    "e.  cremmer , b.  julia , h.  lu and c.  n.  pope , `` dualisation of dualities .",
    "i , '' nucl .",
    "b * 523 * ( 1998 ) 73 [ arxiv : hep - th/9710119 ] .",
    "t.  damour and m.  henneaux , `` e(10 ) , be(10 ) and arithmetical chaos in superstring cosmology , '' phys .",
    "* 86 * ( 2001 ) 4749 [ arxiv : hep - th/0012172 ] . t.  damour and m.  henneaux , `` chaos in superstring cosmology , '' phys .",
    "* 85 * ( 2000 ) 920 [ arxiv : hep - th/0003139 ] .",
    "t.  damour , m.  henneaux , b.  julia and h.  nicolai , `` hyperbolic kac - moody algebras and chaos in kaluza - klein models , '' phys .",
    "b * 509 * , 323 ( 2001 ) [ arxiv : hep - th/0103094 ] . t.  damour , m.  henneaux and h.  nicolai , `` e(10 ) and a small tension expansion of m theory , '' phys .",
    "* 89 * ( 2002 ) 221601 [ arxiv : hep - th/0207267 ] .",
    "t.  damour and h.  nicolai , `` eleven dimensional supergravity and the e(10)/k(e(10 ) ) sigma - model at low a(9 ) levels , '' arxiv : hep - th/0410245 . t.  damour and h.  nicolai , `` higher order m theory corrections and the kac - moody algebra e10 , '' arxiv : hep - th/0504153 .",
    "t.  fischbacher , `` introducing lambdatensor1.0 : a package for explicit symbolic and numeric lie algebra and lie group calculations , '' arxiv : hep - th/0208218 . g. d. james , a. kerber , `` the representation theory of the symmetric group '' , addison - wesley , reading , ma , 1981 + ( for a brief exposition of central ideas freely available via the web , cf . e.g. t.a .",
    "welsh , `` two - rowed hecke algebra representations at roots of unity '' , [ arxiv : q - alg/9509006 ] . )",
    "a.  kleinschmidt and h.  nicolai , `` e(10 ) and so(9,9 ) invariant supergravity , '' jhep * 0407 * ( 2004 ) 041 [ arxiv : hep - th/0407101 ] .",
    "a.  kleinschmidt and h.  nicolai , `` iib supergravity and e(10 ) , '' phys .",
    "b * 606 * ( 2005 ) 391 [ arxiv : hep - th/0411225 ] .",
    "k.  koepsell , h.  nicolai and h.  samtleben , `` an exceptional geometry for d = 11 supergravity ? , '' class .",
    "* 17 * ( 2000 ) 3689 [ arxiv : hep - th/0006034 ] .",
    "h.  nicolai and t.  fischbacher , `` low level representations for e(10 ) and e(11 ) , '' arxiv : hep - th/0301017 ."
  ],
  "abstract_text": [
    "<S> the conjecture of a hidden @xmath0 symmetry of m - theory is supported by the close connection between the dynamics of @xmath1 supergravity near a spacelike singularity and a truncation of an one - dimensional @xmath2-model with @xmath0 symmetry where all representations beyond @xmath3 level @xmath4 are omitted . if this conjecture is right , higher - level representations should especially capture the dynamics of further m - theory degrees of freedom . </S>",
    "<S> unfortunately , the level by level determination of @xmath0 commutators which is necessary to extend the model to higher levels is both an involved and toilsome task that requires computer aid . in this work , </S>",
    "<S> some of the relevant problems are exposed and algorithmic methods are developed which simplify key steps in the determination of explicit @xmath0 commutators at higher levels . as an application , we compute the commutator of the level - two six - form with itself .    # 1#1 = 0.2pt    # 1tr#1 # 1tr#1 # 1res^+_#1    hep - th/0504230 + ulb - th 05 - 08    * the structure of @xmath0 at higher @xmath5 levels  a first algorithmic approach *    * thomas fischbacher + *     _ physique thorique et mathmatique and + international solvay institutes , universit libre de bruxelles , + campus plaine c.p . </S>",
    "<S> 231 , b1050 bruxelles , belgium + _ </S>"
  ]
}