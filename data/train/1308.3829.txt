{
  "article_text": [
    "knowledge compilation is a rewriting approach to propositional knowledge representation .",
    "the ` knowledge base ' is initially represented as a cnf or even as a boolean circuit . for these representations many important types of queries",
    "are np - hard to answer .",
    "therefore , the initial representation is compiled into another one for which the minimal requirement is that the clausal entailment query ( can the given partial assignment be extended to a complete satisfying assignment ? ) can be answered in a polynomial time @xcite .",
    "such transformation can result in exponential blow up of the representation size .",
    "a possible way to circumvent this issue is to identify a structural parameter of the input cnf such that the resulting transformation is exponential in this parameter and polynomial in the number of variables .",
    "a notable result in this direction is an @xmath0 upper bound on the size of decomposable negation normal form ( dnnf ) @xcite , where @xmath1 is the number of variables of the given cnf and @xmath2 is the treewidth of its primal graph .",
    "quite recently , the same upper bound has been shown to hold for sentential decision diagrams ( sdd ) @xcite , a subclass of dnnf that can be seen as a generalization of the famous ordered binary decision diagrams ( obdd ) and shares with the obdd the key nice features ( e.g. poly - time equivalence testing ) .",
    "it is known that a cnf of treewidth @xmath2 can be compiled into an obdd of size @xmath7 @xcite .",
    "a natural question is whether obdd , similarly to sdd , admits a fixed - parameter upper bound of form @xmath8 for some constant @xmath9 .    in this paper",
    "we provide a negative answer to this question .",
    "in particular , we demonstrate an infinite class of cnfs of the primal graph treewidth at most @xmath2 for which the obdd size is at least @xmath10 where @xmath11 is a function exponentially small in @xmath2 . in other words , we show that the obdd size of these cnfs is @xmath4 for every fixed @xmath2 .",
    "this result provides a _",
    "parameterized _ separation from sdd and essentially matches the upper bound of @xcite .",
    "in fact , this result shows impossibility of not only a fixed - parameter upper bound , but also of a sublinear dependence on @xmath2 in the base of the exponent or even of an exponent @xmath12 for some large constant @xmath13 .",
    "moreover , a corollary of this result is that there is an infinite class of instances ( obtained , roughly speaking , by setting @xmath14 ) on which the obdd size is at least @xmath5 , while the sdd size is @xmath6 thus separating obdd from sdd in the _ classical sense_.    our second result is ` strengthening ' of the upper bound @xmath7 of @xcite by showing that it holds if @xmath2 is the treewidth of the _ incidence _ graph of the given cnf thus extending the upper bound to the case of sparse cnfs with large clauses .    in order to obtain the parameterized lower bound ,",
    "we introduce a notion of _ matching width _ of a graph and prove that if a cnf @xmath15 of the considered class has matching width @xmath16 of the primal graph then for any ordering of the variables of @xmath15 there is a prefix @xmath17 such that the number of distinct functions that can be obtained from @xmath15 by assigning the variables of @xmath17 is at least @xmath18 .",
    "this will immediately imply that any obdd realizing @xmath15 will have at least @xmath18 nodes .",
    "finally we will prove that the matching width of the considered cnfs is @xmath19 . substituting this lower bound instead",
    "@xmath16 will get the desired lower bound for the obdd size .    similarly to the case of primal graph ,",
    "the upper bound is obtained by showing that if _ pathwidth _ of the incidence graph of the given cnf is at most @xmath20 then this cnf can be compiled into an obdd of size @xmath21 .",
    "then the @xmath3 upper bound is obtained using a well known relation @xmath22 between the treewidth and the pathwidth of the given graph . the approach to obtain the",
    "@xmath21 bound is similar to @xcite : variables are ordered along the path decomposition and it is observed that the for each prefix the number of functions caused by assigning the previous variables is @xmath23 .",
    "the technical difference is that in our case the bags of the path decomposition include clauses and this circumstance must be taken into account .",
    "the proposed results contribute to a large body of existing results concerning the space complexity of obdds . to begin with , there are many results concerning the complexity of obdds for _ particular _ classes of boolean functions , see e.g. the book @xcite and the survey @xcite .",
    "the space complexity of obdd remains polynomial if parameterized by the treewidth of a _ circuit _ representing the given function @xcite , however the dependence on the treewidth becomes double exponential .",
    "a fixed - parameter upper bound can be achieved if tree of obdds is used instead of a single obdd @xcite . in the complexity theory",
    "the obdd is classified as the _ oblivious read - once branching program _",
    ", see the book @xcite for the results concerning the complexity of branching programs on particular classes of formulas    the proposed lower bound also contributes to the understanding of relationship between obdd and sdd .",
    "other results in this direction are @xcite showing an exponential separation between sdd and obdd based on the same order of variables ( the order of variables for sdd is defined as the order of visiting the corresponding nodes of the underlying _ vtree _ by a left - right tree traversal algorithm ) and @xcite empirically showing that conceptually similar heuristics produce sdds orders of magnitude smaller than obdds .",
    "the rest of the paper is structured as follows .",
    "the next section introduces the necessary background . the section",
    "after that proves the lower bound , the proofs of auxiliary statements are provided in the two following sections . then follows the section presenting the upper bound for the parameterization by the treewidth of the incidence graph .",
    "the structure of this section is the following .",
    "first , we introduce notational conventions .",
    "then we define the obdd and specify the approach we use to prove the lower bound .",
    "next , we introduce terminology related to cnfs . finally , we define the notion of treewidth .    in this paper by a _ set of literals",
    "_ we mean one that does not contain an occurrence of a variable and its negation . for a set @xmath17 of literals we denote by @xmath24 the set of variables whose",
    "literals occur in @xmath17 . if @xmath15 is a boolean function or its representation by a cnf or obdd , we denote by @xmath25 the set of variables of @xmath15 .",
    "a truth assignment to @xmath25 on which @xmath15 is true is called a _ satisfying assignment _ of @xmath15 .",
    "a set @xmath17 of literals represents the truth assignment to @xmath24 where variables occurring positively in @xmath17 ( i.e. whose literals in @xmath17 are positive ) are assigned with @xmath26 and the variables occurring negatively are assigned with @xmath27 .",
    "we denote by @xmath28 a function whose set of satisfying assignments consists of @xmath29 such that @xmath30 is a satisfying assignment of @xmath15 .",
    "we call @xmath28 a _ subfunction _ of @xmath15 . in other words ,",
    "a boolean function @xmath31 is a subfunction of a boolean function @xmath15 is @xmath31 can be obtained from @xmath15 by giving a truth assignment to a subset of variables of @xmath15 .",
    "an obdd @xmath32 representing a boolean function @xmath15 is a directed acyclic graph ( dag ) with one root and two leaves labelled by @xmath26 and @xmath27 .",
    "the internal nodes are labelled with variables of @xmath15 .",
    "there is a fixed permutation @xmath33 of @xmath25 ( that is , elements of @xmath25 are linearly ordered according to @xmath33 ) so that the vertices along any path from the root to a leaf are labelled with variables according to this order .",
    "each internal vertex is associated with @xmath34 leaving edges labelled with @xmath26 and @xmath27 .",
    "each path @xmath35 from the root of @xmath32 is called a _ computational path _ and is associated with truth assignment to the variables labelling all the vertices but the last one .",
    "in particular , each variable is assigned with the value labelling the edge of the path that leaves the corresponding vertex .",
    "we denote by @xmath36 the assignment associated with the computational path @xmath35 .",
    "the set of all @xmath36 where @xmath35 is a computational path ending at the @xmath26 leaf is precisely the set of satisfying assignments of @xmath15 .     under permutation @xmath37,height=188 ]",
    "figure [ obddpic ] shows an obdd for the function @xmath38 under the permutation @xmath37 .",
    "consider the path @xmath39 .",
    "then @xmath40 .",
    "in order to obtain the lower bound on the obdd size we use a standard approach of counting subfunctions .",
    "see @xcite for examples of application of this approach .",
    "this approach is based on the following statement .",
    "[ paths ] let @xmath15 be a boolean function on a set @xmath41 of variables and let @xmath33 be a permutation of @xmath41 .",
    "partition @xmath33 into a prefix @xmath42 and a suffix @xmath43 and suppose that the number of distinct subfunctions of @xmath15 obtained by giving truth assignments to all the variables of @xmath42 is at least @xmath44 .",
    "then an obdd of @xmath15 with the underlying order @xmath33 contains at least @xmath44 nodes .",
    "the standard way to utilize proposition [ paths ] is to show that for _ any _ permutation @xmath33 of @xmath41 there is a partition of @xmath33 into a prefix @xmath42 and a suffix @xmath43 such that the instantiation of variables of @xmath42 results in at least @xmath44 different subfunctions .",
    "then proposition [ paths ] immediately implies that @xmath44 is a lower bound on the size of obdd for _ any _ underlying order .",
    "given a cnf @xmath15 , its _ primal graph _ has the set of vertices corresponding to the variables of @xmath15 .",
    "two vertices are adjacent if and only if there is a clause of @xmath15 where the corresponding variables both occur . in the _ incidence graph _ of @xmath15",
    "the vertices are partitioned into those corresponding to the variables of @xmath15 and those corresponding to its clauses .",
    "a variable vertex is adjacent to a clause vertex if and only if the corresponding variable occurs in the corresponding clause .",
    "given a graph @xmath45 , its _ tree decomposition _ is a pair @xmath46 where @xmath47 is a tree and @xmath48 is a set of bags @xmath49 corresponding to the vertices @xmath50 of @xmath47 .",
    "each @xmath49 is a subset of @xmath51 and the bags obey the rules of _ union _ ( that is , @xmath52 ) , _ containment _ ( that is , for each @xmath53 there is @xmath54 such that @xmath55 ) , and _ connectedness _ ( that is for each @xmath56 , the set of all @xmath50 such that @xmath57 induces a subtree of @xmath47 ) .",
    "the _ width _ of @xmath46 is the size of the largest bag minus one .",
    "the treewidth of @xmath45 is the smallest width of a tree decomposition of @xmath45 .",
    "if @xmath47 is a path then we use the respective notions of _ path decomposition _ and _",
    "pathwidth_.    [ h ]     figure [ twdpic ] shows a graph and its tree decomposition .",
    "the width of this tree decomposition is @xmath34 since the size of the largest bag is @xmath58 .",
    "in this section , given two integers @xmath16 and @xmath2 we define a class of cnfs , roughly speaking , based on complete binary trees of height @xmath16 where each node is associated with a clique of size @xmath2 .",
    "then we prove that the treewidth of the primal graphs of cnfs of this class is linearly bounded by @xmath2 .",
    "further on , we state the main technical theorem ( proven in the next section ) that claims that the smallest obdd size for cnfs of this class exponentially depends on @xmath59 .",
    "finally , we re - interpret this lower bound in terms of the number of variables and the treewidth to get the lower bound announced in the introduction .",
    "let @xmath45 be a graph .",
    "a _ graph based _ cnf denoted by @xmath60 is defined as follows .",
    "the set of variables consists of variables @xmath61 for each @xmath56 and variables @xmath62 for each @xmath53 .",
    "the set of clauses consists of clauses @xmath63 for each @xmath53 .",
    "in other words , the variables of @xmath60 correspond to the vertices and edges of @xmath45 .",
    "the clauses correspond to the edges of @xmath45 .",
    "denote by @xmath64 a complete binary tree of height @xmath16 .",
    "let @xmath65 be the graph obtained from @xmath64 by associating each vertex with a clique of size @xmath2 and , for each edge @xmath66 of @xmath45 , making all the vertices of the cliques associated with @xmath67 and @xmath68 mutually adjacent .",
    "denote @xmath69 by @xmath70 .     and",
    "@xmath71,height=188 ]    figure [ twpattern ] shows @xmath72 and @xmath71 . to avoid shading the picture of @xmath71 with many edges",
    ", the cliques corresponding to the vertices of @xmath72 are marked by circles and the bold edges between the circles mean that that there are edges between all pairs of vertices of the corresponding cliques .",
    "[ twf ] the treewidth of the primal graph of @xmath70 is at least @xmath73 at most @xmath74 .",
    "in fact , for @xmath75 , this treewidth is exactly @xmath74 .",
    "* proof . *",
    "the primal graph of @xmath70 can be obtained from @xmath65 by adding one vertex @xmath76 for each edge @xmath77 of @xmath65 and making this vertex adjacent to the ends of @xmath77 .",
    "the lower bound follows from existence of a clique of size @xmath2 in @xmath65 . indeed ,",
    "in any tree decomposition of @xmath65 , there is a bag containing all the vertices of such a clique @xcite .",
    "consequently , the width of any tree decomposition is at least @xmath73 .",
    "in fact if @xmath75 then @xmath65 has a clique of size @xmath78 created by cliques of two adjacent nodes .",
    "hence , due to the same argumentation , the treewidth of @xmath65 is at least @xmath74 for @xmath75 .    for the upper bound , consider the following tree decomposition @xmath46 of @xmath65 .",
    "@xmath47 is just @xmath64 .",
    "we look upon @xmath64 as a rooted tree , the centre of @xmath64 being the root .",
    "the bag @xmath79 of each node @xmath67 contains the clique of @xmath65 corresponding to @xmath67 .",
    "in addition , if @xmath67 is not the root vertex then @xmath79 also contains the clique corresponding to the parent of @xmath67 .",
    "observe that @xmath46 satisfies the connectivity property . indeed",
    ", each vertex appears in the bag corresponding to its ` own ' clique and the cliques of its children .",
    "clearly , the set of nodes corresponding to the bags induce a connected subgraph .",
    "the rest of the tree decomposition properties can be verified straightforwardly .",
    "we conclude that @xmath46 is indeed a tree decomposition of @xmath65 .    in order to ` upgrade ' @xmath46 , add @xmath80 new adjacent vertices to each vertex of @xmath47 .",
    "these vertices will correspond to the edges of cliques associated with the respective nodes of @xmath64 .",
    "in addition , add @xmath81 new adjacent vertices to each non - root vertex of @xmath47 .",
    "these vertices will correspond to the edges between the clique associated with the corresponding node of @xmath64 and the clique of its parent .",
    "the bag of each new vertex will contain @xmath76 , corresponding to the edge @xmath77 associated with this bag , plus the ends of @xmath77 .",
    "a direct inspection shows that this is indeed a tree decomposition of the primal graph of @xmath70 and that the size of each bag is at most @xmath78 .    notice that for @xmath75 the lower and upper bounds coincide , thus allowing to state the treewidth precisely .",
    "@xmath82    the following is the main technical result whose proof is given in the next section .",
    "[ maintheor ] the size of obdd computing @xmath70 is at least @xmath83 .",
    "the following corollary reformulates the lower bound in terms of the number of variables of @xmath70 and @xmath2 .",
    "[ reform1 ] let @xmath84 be the number of variables of @xmath70 .",
    "then the size of obdd computing @xmath70 is at least @xmath85^{-k/2}m^{k/2}$ ] where @xmath86    * proof . *",
    "recall that @xmath64 has @xmath87 nodes . for each node @xmath88 of @xmath64 ,",
    "@xmath70 has @xmath2 variables corresponding to the vertices of the clique of @xmath88 plus @xmath80 variables corresponding to the edges of this clique .",
    "in addition , if @xmath88 is a non - root node then it is associated with @xmath89 variables connecting the clique of @xmath88 with the clique of its parent .",
    "thus each node of @xmath64 is associated with at most @xmath90 variables and hence the total number of variables @xmath91 .",
    "thus @xmath92 . according to theorem [ maintheor ] ,",
    "the size of an obdd computing @xmath70 is at least @xmath93 as required .",
    "now we are ready to state the parameterized lower bound for obdds .",
    "[ paramlower ] there is a function @xmath11 such that for each @xmath94 there is an infinite sequence of cnfs @xmath95 of treewidth at most @xmath20 of their primal graphs such that for each @xmath96 the size of obdd computing it is at least @xmath97 where @xmath84 is the number of variables of @xmath96 .",
    "put it differently , for each fixed @xmath20 , there is a class of cnfs of treewidth at most @xmath20 of the primal graph for which the obdd size is @xmath98 .",
    "* for an odd @xmath20 , consider the cnfs @xmath99 for all @xmath75 and for an even @xmath20 , consider the cnfs @xmath100 for all @xmath75 . by lemma [ twf ] ,",
    "the treewidth of the primal graph of @xmath99 is at most @xmath20 and of @xmath100 at most @xmath101 .",
    "thus the treewidth requirement is satisfied regarding these classes .    by corollary [ reform1 ] ,",
    "the obdd size is lower - bounded by @xmath102^{-(p+1)/2}*m^{(p+1)/4}$ ] for the former class and by @xmath103^{-p/2}*m^{p/4}$ ] for the latter class .",
    "observe that @xmath102^{-(p+1)/2}*m^{p/4}$ ] is a lower bound for both these lower bound .",
    "hence , the corollary follows by assuming @xmath104^{-(p+1)/2}$ ] .",
    "@xmath82    corollary [ paramlower ] establishes _ parameterized _ separation between obdd and sdd .",
    "the next corollary shows that essentially the same method can be used to separate obdd and sdd in the _ classical sense_.    there is an infinite family of functions for which the smallest obdds are of size @xmath5 while there are sdds of size @xmath6 .",
    "* proof * consider functions @xmath105 .",
    "let us compute the number @xmath1 of variables of @xmath105 .",
    "following the calculation as in corollary [ reform1 ] , we observe that @xmath106    denote @xmath107 by @xmath108 and @xmath109 by @xmath110 .",
    "then @xmath111 .",
    "it follows from that for a sufficiently large @xmath16 , @xmath112 and hence @xmath113 .",
    "then it follows from theorem [ maintheor ] that for a sufficiently large @xmath16 , an obdd for @xmath105 is of size at least @xmath114 .    on the other hand",
    ", it follows from that for a sufficiently large @xmath16 , @xmath115 .",
    "thus , according to @xcite , the size of sdd for @xmath105 is bounded by @xmath116 , confirming the required separation .",
    "the plan of the proof is the following .",
    "we introduce the notion of matching width of a graph .",
    "then we provide two statements regarding this notion .",
    "the first statement ( lemma [ cltreemt ] ) claims a linear in @xmath59 lower bound for the matching width of graphs @xmath65 underlying the considered class @xmath70 ( the proof of the lemma is provided in the next section ) .",
    "the second statement ( lemma [ manyass ] ) claims that if a graph @xmath45 has a matching width @xmath50 then any permutation of the variables of @xmath60 can be partitioned into a suffix and a prefix so that there are at least @xmath117 subfunctions of @xmath60 resulting from instantiation of variables of the prefix .",
    "the proof of lemma [ manyass ] constitutes the essential part of this section .",
    "finally , we provide a proof of theorem [ maintheor ] . in this proof",
    "we notice that according to the approach outlined in the preliminaries section , lemma [ manyass ] together with proposition [ paths ] implies that the size of an obdd of @xmath60 is at least @xmath117 .",
    "taking @xmath65 as @xmath45 and substituting the lower bound claimed by lemma [ cltreemt ] , we obtain the desired lower bound for @xmath118 .",
    "the _ matching width _ is defined as follows .",
    "let @xmath33 be a _ permutation _ of the set @xmath119 of vertices of a graph @xmath45 .",
    "let @xmath120 be a _",
    "prefix _ of @xmath33 ( i.e. all vertices of @xmath121 are ordered after @xmath120 ) .",
    "let us call the matching width of @xmath120 , the largest _ matching _ ( that is , a set of edges not having common ends ) consisting of the edges between @xmath120 and @xmath122 ( we take the liberty to use sequences as sets , the correct use will be always clear from the context ) .",
    "further on , the matching width of @xmath33 is the largest matching width of a prefix of @xmath33 .",
    "finally the matching width of @xmath45 , denoted by @xmath123 , is the smallest matching width of a permutation of @xmath51 .",
    "consider a path of @xmath124 vertices @xmath125 so that @xmath126 is adjacent to @xmath127 for @xmath128 .",
    "the matching width of permutation @xmath129 is @xmath130 since between any suffix and prefix there is only one edge . however , the matching width of the permutation @xmath131 is @xmath132 as witnessed by the partition @xmath133 and @xmath134 . since the matching width of a graph",
    "is determined by the permutation having the smallest matching width , and , since the graph has edges , there can not be a permutation of matching width @xmath135 , we conclude that the matching width of this graph is @xmath130 .",
    "[ cltreemt ] for any @xmath16 , the matching width of @xmath65 is at least @xmath136 .",
    "the proof of lemma [ cltreemt ] is provided is the next section .",
    "* the above definition of matching width is a special case of a more general notion of _ maximum matching width _ as defined in @xcite . in particular",
    "our notion of matching width can be seen as a variant of maximum matching width of @xcite where the tree @xmath47 involved in the definition is a caterpillar .",
    "we are now showing that for cnfs of form @xmath60 , a large matching width of @xmath45 is sufficient for establishing a strong lower bound .",
    "[ manyass ] let @xmath45 be a graph having matching width @xmath50 .",
    "denote @xmath60 by @xmath15 .",
    "then any permutation @xmath137 of @xmath25 has a prefix @xmath138 such that there are at least @xmath117 different functions of form @xmath139 such that @xmath120 is a truth assignment to the variables of @xmath138 .",
    "* let us partition @xmath25 into sets @xmath140 of variables corresponding to the vertices of @xmath45 and @xmath141 of variables corresponding to the edges of @xmath45 .",
    "let @xmath33 be the permutation of @xmath140 ordered in the way as they are ordered in @xmath137 .",
    "let @xmath42 be a prefix of @xmath33 _ witnessing _ the matching width @xmath50 of @xmath33 .",
    "( recall that the matching width of @xmath33 is at least the matching width of @xmath45 . )",
    "the word ` witnessing ' in this context means that there is a matching @xmath142 between @xmath42 and @xmath143 .",
    "let @xmath138 be the prefix of @xmath137 ending with the last element of @xmath42 .",
    "thus the variables @xmath144 corresponding to @xmath145 belong to @xmath138 while the variables @xmath146 corresponding to @xmath147 do not .",
    "we denote the set of clauses @xmath148 by @xmath149 .    in the rest of the proof",
    "we essentially show that @xmath117 different assignments to variables @xmath144 produce @xmath117 different subfunctions of @xmath15 thus confirming the lemma .",
    "roughly speaking , this is done by showing that by a careful fixing the assignments to _ the rest _ of the variables of @xmath138 we can achieve the effect that an assignment to @xmath150 does not ` influence ' an assignment to @xmath151 for @xmath152 . as a result no two assignments to @xmath153 can have the same effect on @xmath146 and this guarantees that desired large set of subfunctions .",
    "we start from defining a set of @xmath117 assignments for which we then claim that any two assignments induce two distinct subfunctions of @xmath15 . in particular ,",
    "let @xmath154 be the set of all assignments to the variables of @xmath138 that assign the variables @xmath155 ( of course , those of them that belong to @xmath138 ) with @xmath27 and the rest of variables except @xmath153 with @xmath26 .",
    "it is easy to see by construction that @xmath154 is in a natural one - to - one correspondence with the set of possible assignments to @xmath153 . in particular",
    ", each @xmath156 corresponds to the assignment @xmath157 to @xmath158 contained in it .",
    "indeed , the assignments of the rest of the variables are fixed in @xmath154 by construction .",
    "it follows that the size of @xmath154 is @xmath117 .",
    "we are going to show that for any distinct @xmath159 , @xmath160 , confirming the lemma . due to the correspondence established above",
    ", we can specify @xmath161 such that @xmath120 and @xmath162 assign @xmath150 with distinct values .",
    "assume w.l.o.g .",
    "that @xmath150 is assigned with @xmath26 by @xmath120 and with @xmath27 by @xmath162 .",
    "observe that @xmath15 does not have a satisfying assignment including @xmath162 and assigning both @xmath155 and @xmath163 with @xmath27 . indeed , as a result , the clause @xmath148 is falsified .",
    "we are going to show that both @xmath155 and @xmath163 can be assigned with @xmath27 in a satisfying assignment of @xmath15 including @xmath120 .",
    "indeed , assign all the variables of @xmath164 with @xmath26 and see that the resulting assignment together with @xmath120 satisfies all the clauses of @xmath15 .",
    "indeed , if a clause @xmath165 does not belong to @xmath149 then @xmath166 is assigned with @xmath26 ( by construction , the only ` edge ' variables assigned by @xmath27 are @xmath155 , that is those that occur in the clauses of @xmath149 ) .",
    "furthermore , for any clause @xmath167 of @xmath149 such that @xmath152 , @xmath151 is assigned with @xmath26 . finally @xmath150 is assigned with @xmath26 by @xmath120 .",
    "it follows that indeed all the clauses of @xmath15 are satisfied .",
    "assume that @xmath168 .",
    "then , by the reasoning as above , @xmath139 has a satisfying assignment including @xmath169 while @xmath170 does not implying that @xmath160 .",
    "otherwise , if @xmath171 , it is assigned with @xmath27 in both @xmath120 and @xmath162 , by construction .",
    "it follows that @xmath139 has a satisfying assignment including @xmath172 while @xmath170 does not .",
    "it follows again that @xmath160 .",
    "@xmath82    * remark .",
    "* notice the role of variables @xmath166 in the proof of lemma [ manyass ] .",
    "they allow the values of @xmath150 to _ not influence _ the values of @xmath151 for @xmath152 and thus keep the number of different subfunctions up to the desired bound .",
    "due to the same reason , it is important that the edges @xmath173 constitute a _ matching _ , i.e. have disjoint ends .    *",
    "proof of theorem [ maintheor ] * lemma [ manyass ] combined with proposition [ paths ] says that if @xmath45 has matching width at least @xmath50 then for any permutation of @xmath174 the corresponding obdd has at least @xmath117 nodes . in other words",
    ", @xmath117 is a lower bound on the obdd size for @xmath60 .",
    "taking @xmath175 and hence @xmath176 and substituting @xmath136 for @xmath50 according to lemma [ cltreemt ] , we obtain a lower bound of @xmath83 on the obdd size of @xmath70 , as required .",
    "this section is organized as follows .",
    "first , we introduce the notion of _ induced permutation_. then we provide proof of lemma [ cltreemt ] for @xmath177 . after that",
    ", we outline how to upgrade this special case to a complete proof .",
    "finally , we provide the complete proof .",
    "note that the proof of the special case and the following outline are _ technically _ redundant .",
    "however , the reader may find them useful as they provide a _ sketch _ reflecting the proof idea .",
    "the notion of _ induced permutation _ is defined as follows .",
    "let @xmath178 be a permutation of elements of a set @xmath120 and let @xmath179 .",
    "then @xmath178 induces a permutation @xmath180 of @xmath162 where the elements of @xmath162 are ordered exactly as they are ordered in @xmath178 .",
    "for example , let @xmath181 and let @xmath162 be the subset of even numbers of @xmath120 .",
    ". then @xmath183 .",
    "* proof of the special case of lemma [ cltreemt ] for @xmath177 * we are going to prove that for an odd @xmath16 , the matching width of @xmath64 is at least @xmath184 . for an even @xmath16",
    "we can simply take a subgraph of @xmath64 isomorphic to @xmath185 ( it is not hard to see that the matching width of a graph is not less than the matching width of its subgraph ) .",
    "the proof goes by induction on @xmath16 . for @xmath186 ,",
    "this is clear , so consider the case @xmath187 .",
    "imagine @xmath64 rooted in the natural way , the root being its centre .",
    "then @xmath64 has @xmath188 grandchildren , the subtree rooted by each of them being @xmath189 .",
    "denote these grandchildren by @xmath190 .",
    "let @xmath191 be any permutation of the vertices of @xmath64 .",
    "this permutation induces respective permutations @xmath192 of vertices of @xmath190 being ordered exactly as in @xmath191 . by the induction assumption , we know that each of @xmath192 can be partitioned into a prefix and a suffix so that the edges between the prefix and the suffix induce graph having matching of size at least @xmath193 .",
    "each of these prefixes naturally corresponds to the prefix of @xmath191 ending with the same vertex .",
    "since @xmath192 are pairwise disjoint , this correspondence supplies @xmath188 _ distinct _",
    "prefixes @xmath194 of @xmath191 .",
    "moreover , for each @xmath195 we know that the graph @xmath196 induced by the edges between the vertices of @xmath195 and the rest of the vertices has a matching of size @xmath193 consisting _ only _ of the edges of @xmath197 . in order to ` upgrade ' this matching by @xmath130 and hence to reach the required size of @xmath184 , all we need to show is that in an least one @xmath196 there is an edge both ends are not vertices of @xmath197 and hence this edge can be safely added to the matching .    at this point",
    "we make a notational assumption that does not lead to loss of generality and is convenient for the further exposition . by construction , @xmath198",
    "are linearly ordered by containment and we assume w.l.o.g . that the ordering is by the increasing order of the subscript , that is @xmath199 .",
    "we claim that the upgrade to the matching as specified above is possible for @xmath200 .",
    "indeed , observe that @xmath201 is a connected graph .",
    "thus all we need to show is that at least one vertex of @xmath201 gets into @xmath200 and at least one vertex of @xmath201 gets outside @xmath200 , that is in @xmath202 .",
    "for the former , recall that @xmath203 and that by construction , @xmath204 contains @xmath193 vertices of @xmath205 being a subgraph of @xmath201 .",
    "thus we conclude that @xmath200 contains vertices of @xmath201 for the latter , observe that since @xmath206 , @xmath207 .",
    "furthermore , by construction , @xmath208 contains @xmath193 vertices of @xmath209 being a subgraph of @xmath201 .",
    "thus we conclude that @xmath202 contains vertices of @xmath201 as well , thus finishing the proof .",
    "@xmath82    a proof for the general case of lemma [ cltreemt ] proceeds by induction on @xmath16 similarly to the special case above . of course we need to keep in mind that instead of nodes of @xmath64 we have cliques of size @xmath2 .",
    "the consequence of this substitution is that at the inductive step of moving from @xmath189 to @xmath64 we can increase the matching width by @xmath2 rather than by @xmath130 as above .",
    "the auxiliary lemma [ kmatching ] allows us to demonstrate the possibility of this upgrade essentially in the same way as we did for @xmath177 : we just show that the considered prefix and suffix of the given permutation both contain at least @xmath2 vertices outside the grandchild serving the part of the matching guaranteed by the induction assumption .",
    "[ kmatching ] let @xmath47 be a tree with at least @xmath34 nodes and let @xmath2 be a positive integer .",
    "let @xmath210 be a graph obtained from @xmath47 by associating with each vertex of @xmath47 a clique of an arbitrary size @xmath211 and making the vertices of cliques associated with adjacent vertices of @xmath47 mutually adjacent .",
    "let @xmath212 standing for white and black be a partition of @xmath213 such that @xmath214 and @xmath215 .",
    "then @xmath210 has a matching of size @xmath2 formed by edges with one white and one black end .",
    "* proof . *",
    "the proof is by induction on the number of nodes of @xmath47 .",
    "it is clearly true when there are @xmath34 nodes .",
    "assume that the tree has @xmath216 nodes and let @xmath67 be a leaf of @xmath47 and @xmath68 be its only neighbour .",
    "let @xmath211 be the size of the clique @xmath217 associated with @xmath67 in @xmath210 .",
    "assume w.l.o.g .",
    "that @xmath218 .",
    "denote @xmath219 by @xmath220 .",
    "clearly , the @xmath220 vertices of @xmath221 can be matched with the vertices of @xmath222 . if @xmath223 , we are done .",
    "next , if @xmath224 , then the lemma follows by induction assumption applied on @xmath225 .    consider the remaining possibility where @xmath226 for some @xmath227 .",
    "observe that @xmath228 . indeed , the total number of vertices of @xmath229 is @xmath230 so , @xmath231 will imply @xmath232 , a contradiction .",
    "let @xmath140 be the clique associated with the neighbour @xmath68 of @xmath67 .",
    "it follows from our assumption that @xmath233 because at most @xmath234 vertices of @xmath140 can be black .",
    "match @xmath220 vertices of @xmath221 with vertices of @xmath222 ( this is possible due to our assumption that @xmath218 ) .",
    "match @xmath50 unmatched vertices of @xmath222 ( there are @xmath235 unmatched vertices of @xmath222 and we have just shown that @xmath228 ) with @xmath50 vertices of @xmath236 .",
    "we are in the situation where in @xmath237 there are at least @xmath234 vertices of @xmath238 , at least @xmath234 vertices of @xmath229 and the size of each associated clique is clearly at least @xmath234 .",
    "hence , the lemma follows by the induction assumption .",
    "@xmath82    * proof of lemma [ cltreemt ] .",
    "* we prove that for an odd @xmath16 , the matching width of @xmath65 is at least @xmath239 . for an even @xmath16",
    ", it will be enough to consider a subgraph of @xmath65 being isomorphic to @xmath240 .",
    "the proof is by induction on @xmath16 .",
    "assume first that @xmath186 .",
    "then the lemma holds according to lemma [ kmatching ] .    for @xmath187 ,",
    "let us view @xmath64 as a rooted tree with its centre @xmath241 being the root .",
    "let @xmath190 be the @xmath188 subtrees of @xmath64 rooted by the ` grandchildren ' of @xmath241 .",
    "let @xmath242 be the subgraphs of @xmath65 ` corresponding ' to @xmath190 .",
    "that is , each @xmath243 is a subgraph of @xmath65 induced by ( the vertices of ) cliques associated with the vertices of @xmath197 .",
    "it is not hard to see that each @xmath197 is isomorphic to @xmath189 and each @xmath243 is isomorphic to @xmath244 and that @xmath242 are pairwise disjoint .",
    "let @xmath191 be an arbitrary permutation of @xmath245 .",
    "let @xmath192 be the respective permutations of @xmath246 induced by @xmath191 .",
    "by the induction assumption for each @xmath247 there is a prefix @xmath248 such that the edges of @xmath243 with one end in @xmath248 and the other end in @xmath249 induce a graph having matching of size at least @xmath250 .",
    "let @xmath251 be the last vertices of @xmath252 , respectively .",
    "assume w.l.o.g . that these vertices occur in @xmath191 in exactly this order .",
    "let @xmath253 be the prefix of @xmath191 with final vertex @xmath254 .",
    "we are going to show that the subgraph of @xmath65 induced by the edges between @xmath253 and @xmath255 has matching of size at least @xmath239 .",
    "in fact , as specified above , we already have matching of size @xmath250 if we confine ourself to the edges between @xmath256 and @xmath257 .",
    "thus , it only remains to show the existence of matching of size @xmath2 in the subgraph of @xmath65 induced by the edges between @xmath258 and @xmath259 .",
    "observe that @xmath260 is a partition of vertices of @xmath261 .",
    "therefore , it is sufficient to show that @xmath262 and @xmath263 and then the existence of the desired matching of size @xmath2 will follow from lemma [ kmatching ] .    due to our assumption that @xmath264 precedes @xmath254 in @xmath191",
    ", it follows that @xmath265 is contained in @xmath253 .",
    "moreover , since @xmath266 and @xmath267 are disjoint , @xmath265 is disjoint with @xmath268 and hence @xmath269 . recall that by the induction assumption , the vertices of @xmath265 serve as ends of a matching of size @xmath250 with no two vertices sharing the same edge of the matching .",
    "that is @xmath270 . since @xmath187 by assumption",
    ", we conclude that @xmath271 and hence @xmath262 .    the proof that @xmath263 is symmetrical . by our assumption , @xmath254 precedes @xmath272 is @xmath191 and hence @xmath273 is contained in @xmath255 and due to the disjointness of @xmath267 and @xmath274 , @xmath273 is in fact contained in @xmath200 . that @xmath275 is derived analogously to the proof that @xmath271 .",
    "recall that the incidence graph of the given cnf @xmath15 has the set of vertices corresponding to its variables and clauses and a variable vertex is adjacent to a clause vertex if and only if the corresponding variable occurs in the corresponding clause .",
    "the upper bound of @xcite does not straightforwardly apply to the case of incidence graphs because there are classes of cnfs having constant treewidth of the incidence graph and unbounded treewidth of the primal graph .",
    "indeed , consider , for example a cnf with one large clause .",
    "nevertheless , we show in this section that the @xmath3 upper bound on the size of obdd holds if @xmath2 is the treewidth of the incidence graph of the considered cnf .    as in @xcite",
    ", we show that if @xmath20 is the pathwidth of the _ incidence graph _",
    "@xmath45 of the given cnf @xmath15 then the function of @xmath15 can be realized by an obdd of size @xmath21 implying ( through the @xmath276 ) the @xmath3 upper bound where @xmath2 is the treewidth of @xmath45 .",
    "the resulting obdd is seen as a dag whose nodes are partitioned into layers , each layer consisting of nodes labelled by the same variable .",
    "the main technical lemma shows that under the right permutation of variables the nodes of each layer correspond to @xmath23 subfunctions of @xmath15 .",
    "consequently , @xmath23 nodes per layer are sufficient , which in turn , immediately implies the desired upper bound .",
    "let us start from fixing the notation .",
    "let @xmath15 be a cnf and @xmath45 be its incidence graph , whose nodes are @xmath277 ( corresponding to the variables of @xmath15 ) and @xmath278 ( corresponding to the clauses of @xmath15 ) and @xmath279 and adjacent to @xmath280 if and only if @xmath279 occurs in @xmath280 ( for the sake of brevity , we identify the vertices of @xmath45 with the corresponding variables and clauses ) .",
    "let @xmath281 be a path decomposition of @xmath45 .",
    "fix an end vertex of @xmath35 and enumerate the vertices of @xmath35 along the path starting from this fixed vertex .",
    "let @xmath282 be the enumeration .",
    "for each @xmath279 , let @xmath283 be the smallest @xmath284 such that @xmath285 .",
    "we call a linear ordering @xmath33 of @xmath277 such @xmath286 whenever @xmath287 an ordering _ respecting _ @xmath11 .",
    "[ layersize ] let @xmath33 be an ordering respecting @xmath11 .",
    "let @xmath42 be a prefix of @xmath33 .",
    "then the number of distinct @xmath28 such that @xmath17 is an assignment to @xmath42 is at most @xmath288 where @xmath20 is the width of @xmath281 .",
    "* let @xmath289 be the last variable of @xmath42 .",
    "denote @xmath290 by @xmath291 .",
    "we assume w.l.o.g . that all the clauses of @xmath15 are pairwise distinct and hence identify a cnf with its set of clauses .",
    "partition @xmath15 into three sets of clauses : @xmath292 , consisting of those that appear in some @xmath293 for @xmath294 and do not appear in @xmath295 ; @xmath296 , consisting of those that appear in @xmath297 and @xmath298 consisting of those that appear in @xmath293 for some @xmath299 and do not appear in @xmath297 . observe that this is indeed a partition of clauses . indeed , otherwise @xmath300 as all other possibilities contradict the definition of the sets @xmath301 . then due to the connectedness property of @xmath281 , either @xmath302 or @xmath303",
    "however , both these possibilities contradict the definition of @xmath292 and @xmath298 .",
    "we conclude that @xmath301 indeed partition the clauses of @xmath15 . for a visual justification of their disjointness , see figure [ fpfcffpic ] .     of @xmath35 .",
    "clauses of @xmath292 and @xmath298 can not belong to @xmath295 by definition .",
    "suppose that a clause @xmath304 belongs to @xmath298 .",
    "then @xmath13 belongs to a bag of a vertex _ above _ @xmath305 and to a bag of a vertex _ below _",
    "by the connectivity property , @xmath13 must belong to @xmath295 , a contradiction.,height=226 ]    denote by @xmath306 the set of all functions @xmath28 such that @xmath17 is an assignment to @xmath42 .",
    "denote by @xmath307 , @xmath308 , @xmath309 the analogous sets regarding @xmath292 , @xmath296 , and @xmath298 , respectively .",
    "let us compute the sizes of the latter @xmath58 sets .",
    "let @xmath13 be a clause of @xmath292",
    ". by definition @xmath310 is a subset of variables appearing in the bags @xmath293 for @xmath294 . by definition",
    ", these variables are ordered _ before _",
    "it follows that @xmath311 and hence any assignment to @xmath42 either satisfies or falsifies @xmath13 .",
    "consequently @xmath312 is either @xmath26 or @xmath27 .",
    "it is not hard to see that @xmath313 is obtained from @xmath296 by removal of all the clauses that are satisfied by @xmath17 and removal of the occurrences of @xmath24 from the rest of the clauses .",
    "it follows that if @xmath314 and @xmath315 have the same set of satisfied clauses then @xmath316 in other words , @xmath313 is completely determined by a set of satisfied clauses .",
    "hence @xmath317 is bounded above by the number of subsets of clauses of @xmath318 , i.e. it is at most @xmath319 where @xmath320 is the number of clauses of @xmath318 .",
    "finally let @xmath321 .",
    "it is not hard to see that for an assignment @xmath17 to @xmath42 , @xmath322 is completely determined by the subset of @xmath17 assigning the variables of @xmath323",
    ". therefore , the number of distinct functions @xmath322 is at most as the number of distinct assignments to @xmath323 , which is @xmath324 where @xmath325 .",
    "let @xmath17 be an assignment on @xmath42 .",
    "it is not hard to see that @xmath326 . if @xmath327 then @xmath328",
    "otherwise , @xmath329 and hence @xmath330 . in other words",
    ", @xmath28 is either false or there are @xmath331 and @xmath332 such that @xmath333 .",
    "that is @xmath334 .",
    "we claim that @xmath335 implying the lemma . indeed",
    ", the clauses of @xmath296 all belong to @xmath295 by definition .",
    "observe that @xmath336 as well . indeed",
    ", let @xmath337 .",
    "since @xmath338 is either @xmath289 or ordered before @xmath289 , there must be @xmath339 such that @xmath340 . on the other hand , by definition of @xmath298",
    ", there must be @xmath341 such that @xmath342 . by the connectedness property @xmath343 .",
    "since @xmath296 and @xmath323 are clearly disjoint being a set of ` clause vertices ' and a set of ` variable vertices ' , the size of their union is the sum of their sizes and the size of their union can not be larger that @xmath344 , as required .",
    "* in fact we prove that the @xmath21 upper bound holds even for _ uniform _ obdds where each path from the root to a leaf includes _ all _ the variables .",
    "notice that the uniformity is not required by the definition of the obdd , only the order of variables along a computational path is essential .",
    "for instance , the obdd shown in figure [ obddpic ] is not uniform .",
    "let @xmath33 be an ordering respecting @xmath11 as above .",
    "let @xmath32 be a smallest possible uniform obdd of @xmath15 with @xmath33 being the underlying ordering .",
    "it is well known that the subgraph of @xmath32 induced by any internal node @xmath67 and all the vertices reachable from @xmath67 ( the labels on vertices and edges are retained ) is an obdd whose function is @xmath345 where @xmath35 is an arbitrary path from the root to @xmath67 ( recall that @xmath36 denotes the assignment associated with @xmath35 ) . moreover",
    ", the minimality of @xmath32 implies that all the nodes marked with the same variable represent distinct functions .",
    "indeed , if there are @xmath34 nodes representing the same function then one of them can be removed , with the in - edges of the removed node becoming the in - edges of another node associated with the same function and with possible removal of some nodes that become not reachable from the root .",
    "this produces another uniform obdd implementing the same function and having a smaller size in contradiction to the minimality of @xmath32 .    by construction",
    "the function of a node labelled with a variable @xmath44 of @xmath15 is a subfunction of @xmath15 obtained by an assignment to the variables preceding @xmath44 in @xmath33 . according to lemma [ layersize ]",
    "the number of such subfunctions is @xmath23 .",
    "since distinct nodes labelled by @xmath44 are associated with distinct subfunctions , there are @xmath23 nodes labelled by @xmath44 . multiplying this by the number @xmath1 of variables of @xmath15 , we obtain the desired @xmath21 bound on the number of nodes of @xmath32 .",
    "@xmath82      we close this section with discussion of yet another parameter of cnfs , introduced in @xcite , whose fixed value guarantees a linear size obdd . in @xcite",
    "this parameter has not been given a name so , let us name it _",
    "combined width_. let @xmath33 be a linear ordering on variables of the given cnf @xmath15 .",
    "for each variable @xmath44 in this ordering we define the _ cutwidth _ of @xmath44 ( w.r.t . to @xmath33 ) as the number of clauses with one variable being either @xmath44 or ordered before @xmath44 and one variable ordered after @xmath44 in @xmath33 .",
    "further on , we define the _ pathwidth _ of @xmath44 ( w.r.t . to @xmath33 ) as the number of variables that are either @xmath44 or ordered before @xmath44 that occur in clauses having at least one occurrence of a variable ordered after @xmath44 .",
    "the combined width of @xmath44 is the minimum of the cutwidth and the pathwdith of @xmath44 .",
    "the combined width of @xmath33 is the maximum over all the combined widths of the variables .",
    "finally , the combined width of @xmath15 is the minimum of combined widths of all possible orders of the variables of @xmath15 .",
    "it is shown in @xcite that a cnf of combined width @xmath346 can be complied into an obdd of size @xmath347 .",
    "the combined width of @xmath15 is a mixture of two parameters of the primal graph of @xmath15 : the cutwidth ( maximum cutwidth of a variable in the given permutation taken minimum over all permutations ) and the pathwidth .",
    "moreover , the combined width is not just their minimum but can in fact be much smaller than both cutwidth and pathwidth .",
    "consider for example a cnf @xmath348 where @xmath349 and @xmath350 are cnfs defined as follows .",
    "@xmath351 and @xmath352 we assume that the variables of @xmath349 are disjoint with the variables of @xmath350 and that @xmath84 can be arbitrarily large . the primal graph of @xmath349 has a large cutwidth .",
    "indeed , for any ordering of variables of @xmath349 there is a subset @xmath353 of @xmath354 of size at least @xmath355 that are either all smaller than @xmath44 or all larger than @xmath44 .",
    "specify a variable @xmath356 that is a median of @xmath353 according to the considered order .",
    "then the cutwidth of this variable will be about @xmath357 .",
    "furthermore , the pathwidth of the primal graph of @xmath350 is large because this graph is just one big clique . on the other hand ,",
    "the combined width of @xmath349 and @xmath350 is small . indeed ,",
    "order the variables as follows : @xmath358 .",
    "then the pathwidth index of the first @xmath359 variables is @xmath130 and hence the combined width will be at most @xmath130 as well .",
    "further , the cutwidth of the last @xmath84 variable is @xmath130 and hence the combined width of these variables is @xmath130 as well .",
    "thus the combined width of this order is @xmath130 and hence the combined width of @xmath360 is at most @xmath130 which is clearly much smaller than the minimum of the pathwdith and the cutwidth of @xmath15 ( determined by the respective connected components of the primal graph of @xmath15 ) .",
    "we leave the relationship between the incidence graph treewidth and the combined width as an open question ."
  ],
  "abstract_text": [
    "<S> knowledge compilation is a rewriting approach to propositional knowledge representation . </S>",
    "<S> the ` knowledge base ' is initially represented as a cnf for which many important types of queries are np - hard to answer . </S>",
    "<S> therefore , the cnf is compiled into another representation for which the minimal requirement is that the clausal entailment query ( can the given partial assignment be extended to a complete satisfying assignment ? ) can be answered in a polynomial time @xcite . </S>",
    "<S> such transformation can result in exponential blow up of the representation size . </S>",
    "<S> a possible way to circumvent this issue is to identify a structural parameter of the input cnf such that the resulting transformation is exponential in this parameter and polynomial in the number of variables . </S>",
    "<S> a notable result in this direction is an @xmath0 upper bound on the size of decomposable negation normal form ( dnnf ) @xcite , where @xmath1 is the number of variables of the given cnf and @xmath2 is the treewidth of its primal graph . </S>",
    "<S> quite recently this upper bound has been shown to hold for sentential decision diagrams ( sdd ) @xcite , a subclass of dnnf that can be considered as a generalization of the famous ordered binary decision diagrams ( obdd ) and shares with the obdd the key nice features ( e.g. poly - time equivalence testing ) . under the treewidth parameterization , </S>",
    "<S> the best known upper bound for an obdd is @xmath3 @xcite . </S>",
    "<S> a natural question is whether , similarly to sdd , a fixed parameter upper bound holds for obdd .    </S>",
    "<S> we provide a negative answer to the above question . in particular , for every fixed @xmath2 </S>",
    "<S> , we demonstrate an infinite class of cnfs of the primal graph treewidth at most @xmath2 for which the obdd size is @xmath4 , essentially matching the upper bound of @xcite . </S>",
    "<S> this result establishes a </S>",
    "<S> _ parameterized _ separation of obdd from sdd . </S>",
    "<S> we further show that the considered class of instances can be transformed into one for which the obdd size is at least @xmath5 and the sdd size is @xmath6 thus separating obdd from sdd in the _ classical sense_.    we also provide a more optimistic version of the @xmath3 upper bound for the obdd showing that it in fact holds when @xmath2 is the treewidth of the incidence graph of the given cnf . </S>"
  ]
}