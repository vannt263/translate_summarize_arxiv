{
  "article_text": [
    "this paper presents a computational model to interpret the mozart effect k488 .",
    "this effect has been discussed extensively and seriously among both psychology and music perception societies using various experimental techniques [ rauscher et al .",
    "1993 ] . instead of experiments",
    ", this paper constructs a computation model to resolve the effect .",
    "this model starts with a tree structure for quantized rhythm beats based on the theory by loguet - higgins [ longuet - higgins , 1987 ] .",
    "the tree is then modeled as an automata and its complexity is derived by way of the l - system [ prusinkiewicz and lindenmayer 1990 , prusinkiewicz 1986 ] .",
    "the quantization tree will be briefly introduced in this section .",
    "the l - system will be introduced in the next section .",
    "the automata rewriting rule associated with the l - system will be included also in the next section .",
    "the similarity between trees by way of rewriting rules is defined in section 3 .",
    "the tree complexity is derived in section 4 .",
    "this complexity serves as a measure for the perception of musical rhythms [ desain and windsor 2000 ; yeston 1976 ] and resolves the effect .",
    "the key features of music perception and composition are rhythm , melody and harmony .",
    "rhythm is formed through the alternation of long and short notes , or through repetition of strong and weak dynamics [ cooper and meyer 1960 ] . because one metrical unit , such as a measure or a half note , can often be divided into two or three sub - units ( illustrated in figures [ figure 1 ] and [ figure 2 ] ) , this rhythm is endowed with a clear hierarchical structure [ longuet - higgins , 1987 ; lerdahl and jackendoff 1983 ] .",
    "note that longuet higgins grammar for rhythm is different from his musical parser for handeling performances , which is far more sophisticated than time - grid round - off . to represent the hierarchical characteristics of rhythm , we need to seek a system that possesses such a nature .",
    "fortunately , the plant kingdom is rich with branching structures , in which branches are derived from roots .",
    "in fact , the structure shown in figure [ figure 1 ] is that of a binary tree .",
    "l - systems ( lindenmayer systems ) [ prusinkiewicz and lindenmayer 1990 , prusinkiewicz 1986 ] are designed to model plant development , see [ mccormack 1993 ] .",
    "therefore , it is natural to construct the rhythm representation by using an l - system [ prusinkiewicz 1986 ; worth and stepney 2005 ] .",
    "a background of l - systems applied to art and music is in the website in reference .",
    "we will show how such a tree structure and its related parts can be constructed .",
    "we expect that the l - system can capture the rhythm nature .",
    "we now review the music tree by loguet - higgins .",
    "figure [ figure 1 ] shows that in each level of a tree a half note is represented by a different metrical unit . in the highest level , the metrical unit is a half note ; in the next level , the unit is a quarter note ; in the lowest level , the unit is an eighth note .",
    "the total duration in each level is equal to a half note .",
    "this structure can be extended to a measure or more , a composition as in figure [ figure 2 ] .",
    "h. c. longuet - higgins introduced this kind of tree in the 1970s .",
    "the tree has been extensively studied both experimently and theoretically .",
    "note that there are many other theories [ cooper and meyer 1960 ; yeston 1976 ; lerdahl and jackendoff 1983 ; desain and windsor 2000 ] .",
    "since we prefer a computational approach to resolve the effect , we will not use their theories . in order to give computers the musicianship necessary to transcribe a melody into a score , he used tree structures to represent rhythmic groupings . in his theory of music perception , the essential task in perceiving the rhythmic structure of a melody is to identify the time of occurrence of each beat .",
    "therefore , his theory can be applied to western music with regular beats . in western music ,",
    "the most common subdivisions of each beat are into two or three shorter metrical units , and these shorter metrical units can be further subdivided into two or three units .",
    "tracking from the start of a melody , when a beat or a fraction of a beat is interrupted by the onset of a note , it is divided into shorter metrical units .",
    "after this process of division , every note will find itself at the beginning of an uninterrupted metrical unit .",
    "the metrical units can be considered as the nodes of a tree in which each non - terminal node has two or three descendants .",
    "the terminal nodes for a beat are the shortest metrical units that the beat is divided into .",
    "every terminal node in the tree will eventually be attached either to a rest or to a note sounded or tied .",
    "it is natural to include and elaborate rests in the tree model as those done in [ longuet - higgins , 1987 ] .",
    "we will employ the perception factors discussed by longuet - higgins , such as tolerance , syncopation , rhythmic ambiguity , regular passages , to construct l - systems for rhythms .",
    "a rhythmic tree as described above is a tree of which each subtree is also a rhythmic tree .",
    "each tree node has two or three children ( branches or descendants ) .",
    "each node in the tree represents the total beat duration that is equal to the sum of all those of its descendants .",
    "the root node has a duration length that is equal to the length of the whole note sequence .",
    "note that when we attempt to split a note sequence into two subsequences with equal duration lengths , we usually obtain two unequal length subsequences .",
    "this is because a note connecting the two subsequences has been split into two submetrical units .",
    "the preceding portion belongs to the preceding subsequences and the later portion belongs to the later subsequence .",
    "we will mark those units to identify their subsequences .",
    "these two subsequences represent two different subtrees of the root node .",
    "we further divide each subsequence into sub - subsequences , which are also rhythmic trees , and so on .",
    "this dividing process is completed when a tree node contains a single note .",
    "this single note may possibly be the one which has been split into two portions .",
    "this is in some sense similar to an algorithm for note quantization and is a standard practice in midi rendering of music . in practice",
    "we will quantize notes using the finest note among dotted notes ( e.g. , 1/4 , 1/8 , 1/16 , dotted notes , etc . ) without loosing most of the interesting details .",
    "we plot two such trees in figures [ figure 2 ] and [ figure 3 ] .",
    "the notes shown in figure [ figure 3 ] are part of the whole tree of the beginning of rachnaminoff s piano concerto no.3 , movement 1 .",
    "the two notes in the rectangle have been split using our rhythmic tree process .      to express the hierarchical characteristics of rhythm ,",
    "we need a data structure that possesses such a hierarchical nature .",
    "fortunately , the plant kingdom is dominated by branching structures , in which branches are derived from roots .",
    "l - systems are designed to model plant development . therefore , it is practicable to construct a rhythmic representation by using l - systems .",
    "the lindenmayer system , or l - system for short , was introduced by the biologist aristid lindenmayer in 1968 [ lindenmayer 1968 ] .",
    "it was conceived as a mathematical theory of plant development .",
    "the central concept of the l - system is rewriting . in general , rewriting is a technique used to define complex objects by successively replacing parts of a simple initial object , using a set of rewriting rules or productions .",
    "the l - system is a new type of string - rewriting mechanism .",
    "the essential difference between chomsky grammars and l - systems lies in the technique used to apply productions . in chomsky grammars , productions are applied sequentially , whereas in l - systems , they are applied in parallel and simultaneously to replace all the letters in a given word [ mccormack 1993 ] .",
    "this difference reflects the biological motivation of l - systems .",
    "productions are intended to capture cell divisions in multi - cellular organisms , where many divisions may occur at the same time . moreover , there are languages which can be generated by context - free l - systems but not by context - free chomsky grammars .    here",
    "we introduce the turtle graphical interpretation of l - systems .",
    "suppose that there is a turtle crawling on a plane .",
    "the state of the turtle is defined as a triplet @xmath1 , where the cartesian coordinates @xmath2 represent the turtle s position , and the angle @xmath3 , called the heading , is interpreted as the direction in which the turtle is facing . given the step size d and the angle increment @xmath4 , the turtle can respond to commands represented by the following symbols :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ [ cols= \" < , < \" , ]     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ * *  * * table 2 : classifying based on the similarity of rewriting rules .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    in table 1 , rules such as * @xmath5[+f]}$ ] * , * @xmath6[+f]}$ ] * are assigned to class 2 .",
    "there are eight such rules before classification , so we write ` * * @xmath7[+f]}$ ] * * ' .",
    "similar rules such as * @xmath8 * , * @xmath9 * , * @xmath10 * are isomorphic on depth @xmath11 , and there are @xmath12 such rules .",
    "they are assigned to class 1 .",
    "class 3 and class 4 are obtained by following a similar classification procedure .",
    "note that this section also presents a new way to convert a context - sensitive grammar to a context - free one .",
    "after we list the rewriting rules for a rhythmic tree and classify all those rules , we attempt to explore the redundancy in the tree ( the hidden structure in the beats ) that will be the base for building the cognitive map [ barlow 1989 ] . to accomplish this , we compute the complexity of the tree which those classified rules represent . we know that a classified rewriting rule set is also a context free grammar , so we can define the complexity of a rewriting rule set as follows :    * define : topological entropy of a context free grammar .",
    "*    the topological entropy @xmath13 of a cfg ( context free grammar ) can be evaluated by means of the following three procedure [ kuich 1970 ; badii and politi 1997 ] :    ( 1 ) for each variable @xmath14 with productions ( in greibach form ) ,    @xmath15    where @xmath16 are terminals and @xmath17 are non - terminals . the formal algebraic expression for each variable is    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath18 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _       \\(2 ) by replacing every terminal @xmath19 with an auxiliary variable @xmath20 , one obtains the generating function    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath21 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    where @xmath22 is the number of words of length @xmath23 descending from @xmath14 .",
    "\\(3 ) let @xmath24 be the largest one of @xmath22 , @xmath25over all @xmath26 .",
    "the above summation series converges when @xmath27 .",
    "the topological entropy is given by the radius of convergence @xmath28 as    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  @xmath29 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    however , we have found that this definition is slightly inconvenient for our binary tree case .",
    "thus , we rewrite it as follows :     * define : generating function of a context free grammar .",
    "*    assume that there are @xmath23 classes of rules and that each class @xmath30 contains @xmath31 rules .",
    "let @xmath32 , and @xmath33 , where each @xmath34 has the following form :    @xmath35    the generating function of @xmath14 , @xmath36 , has a new form as follows :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath37 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    if @xmath14 does nt have any non - terminal , we set @xmath38 . with this function , we can define the complexity of the rhythmic tree below .",
    "* define : complexity of rhythmic tree [ 6 ] . *    after formulate the generating function @xmath36 , we intend to find the largest value of @xmath20 , @xmath39 , at which @xmath40 converges .",
    "note that we use @xmath41 to denote the rule for the root node of the rhythmic tree . after obtaining the largest value , @xmath39 , of @xmath42 , we set @xmath43 , the radius of convergence of @xmath42 .",
    "we define the complexity of the rhythmic tree as @xmath44 .",
    "we use the simple example in tables 1 and 2 ( or figure [ figure 3 ] ) to show the computation procedure of the complexity . according to our definition the given values for the class parameters are @xmath45 @xmath46 @xmath47 @xmath48 .    substituting these values in the equation",
    ", we have @xmath49 and @xmath50 directly .",
    "then we obtain the formulas for @xmath51 , @xmath52 , and @xmath42 successively .",
    "they are    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "@xmath53    @xmath54    @xmath55    @xmath56    @xmath57 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    rearranging the above equation for @xmath58 , we obtain a quadratic equation for @xmath59    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath60 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    solving @xmath61 , we obtain the formula    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath62 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the radius of convergence , @xmath28 , and complexity , @xmath44 , can be obtained from this formula .",
    "in order to compute the complexity of a rhythmic tree , we have to determine @xmath63 , the radius of convergence of the rhythmic tree s rewriting rule set .",
    "we devise strategy to judge whether the function @xmath61 is convergent or divergent for a given value of @xmath64 .",
    "we construct an iteration technique to compute the value of this generating function . to facilitate the computation , we rewrite the generating function as follows :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath65 and    @xmath66 . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    here we use superscript @xmath67 in the variable @xmath68 to represent the iteration count .",
    "starting with @xmath69 in each iteration , we calculate a new value , @xmath70 .",
    "then we calculate @xmath71 , @xmath72 , ... , and @xmath73 successively , where @xmath67 is some positive integer number .",
    "when @xmath74 is equal to @xmath68 for all rules , this means that @xmath68 can not be improved anymore , we reach convergence .",
    "therefore , @xmath64 , the number we want to judge , is not the radius of convergence for the rules set but is smaller than the radius of convergence . in our simulations , we set @xmath75 .",
    "this means that if @xmath68 is not divergent for @xmath76 , then we judge @xmath64 to be convergent .",
    "once we can judge whether @xmath77  is convergent or divergent at a number @xmath64 , we can test every real number between 0 and 1 to find the number that is right on the border of the convergent region and use this number to calculate the radius of convergence .",
    "we may apply some advanced techniques to search for the radius of convergence , such as binary searching between 0 and 1 .",
    "this is exactly the technique we use in our algorithm .",
    "now we will present a practical example .",
    "we use beethoven s piano sonatas nos . 1 to 32 and mozart s piano sonatas nos . 1 to 19 as an example , and",
    "show their complexity .",
    "we list the complexity of each piano sonata by mozart in figures [ figure12]-[figure13 ] . in these figures ,",
    "we use two different isomorphic depths , 1 and 3 , to compute the complexity . from the figures we can see that the complexity is high for both composers .",
    "when we use higher depth isomorphism to classify rules , the complexity will decrease .",
    "this is because when we use higher depth isomorphism , redundancy between rules will decrease so the complexity will also decrease . eventually the complexity will decrease to zero for the highest depth isomorphism .",
    "conversely , lower depth isomorphism brings more rules in a class ; redundancy between rules will increase and the number of classes will decrease . if the depth of isomorphism is too low , the rules set will become too simple , thus the complexity will also become lower .",
    "we may compute the complexity for different depths to see the differences .",
    "beethoven and mozart s work have similar complexity , but beethoven s is slightly higher than mozart s .",
    "both their complexity isomorphic on level 2 are the highest .",
    "when we use the high level isomorphism to classify rules , the complexity of rules will decrease .",
    "reversely , the low level isomorphism collects many rules in a class ; redundancy between rules will increase and the number of classes will decrease . if the level of isomorphism is too low , the rules set will become too simple , thus the complexity will also become lower .",
    "we can try different level to see its complexity , and pick up the level with highest complexity .",
    "we tested a well - known music work studied by rauscher et al . [ 1993 ] .",
    "almost all the previous studies on the mozart effect have focused on a single piece of music , the sonata for two pianos in d major ( k448 ) .",
    "we have computed its complexity and found that it is generally higher than that of other sonatas by mozart , see figures [ figure12]-[figure13 ] .",
    "we have constructed the complexity for the l - system .",
    "this complexity resembles , in some sense , the redundancy [ pollack 1990 ; large et al .",
    "1995 ; chalmers 1990 ]",
    ". this complexity can facilitate many other studies such as bio - morphology , dna analysis , gene analysis and tree similarity .",
    "we closely followed the ideas of barlow [ barlow 1989 ] and feldman [ feldman 2000 ] to design this model . in his work , barlow wrote that : words are to the elements of our sensations like logical functions to the variables that compose them .",
    "we can not of course suppose that an animal can form an association with any arbitrary logical function of its sensory messages , but they have capacities that tend in that direction , and it is these capacities that the kind of representative schemes considered here might be able to mimic .",
    "human perception sometimes bases on external world s information redundancy .",
    "if we can extract any rules or patterns from a certain object as part of our cognition map for that object , it will be easy to memorize or comprehend it . in our model , rhythms resemble the words ; trees resemble the logical functions ; classes resembles rules and patterns ; complexity resembles redundancy .    man is not inherently musical , the distinguished scientist newton claimed ; natural singing is the sole property of birds .",
    "in contrast to our feathered friends , humans perform and understand only what they taught ..   this is why humans listen to music by training .",
    "one needs such redundancy to comprehend the music words .    but how can we pinpoint the rules or patterns in a music work , or even in a simple rhythm that may be formless ? as an attempt , we have defined homomorphism and isomorphism so as to characterize the similarity between sections of different rhythmic trees .",
    "but there still exist questions about the psychological implications of these characteristics , such as the depth of isomorphism .",
    "the proposed model can enable us to measure the psychological complexity [ feldman 2000 ] of rhythms . in our studies",
    ", we have found that different depths of isomorphism produce varying degree of complexity .",
    "if a rhythm is very simple , its complexity will be 0 .",
    "the same situation also occurred when we used isomorphism with a very high depth value to compute the complexity of mozart s and beethoven s piano sonatas .",
    "in general , the results confirm our intuition about these musical rhythms .",
    "we define the similarity between tree structures in section 3 .",
    "finding similarity between rules and classifying them in different subsets are in some sense similar to fractal compression , see the website in reference .",
    "this could be an alternate way to configure rhythmic complexity .",
    "we are still working on this .",
    "we are also working on an extension of the model to incorporate the rhythmic complexity for polyphonic music , superposition of different rhythms , tempo variation , grace notes , supra and irregular subdivisions of the beat ( e.g. triplets , quintuplets , ... ) .",
    "large , c. palmer and j.b .",
    "pollack , reduced memory representations for music , cognitive science , vol .",
    "19 , 1995 , pp .",
    "reprinted in musical networks : parallel distributed perception and performance , edited by niall griffith and peter m. todd . the mit press , 1999 , cambridge , massachusetts .",
    "lee and c .- y .",
    "liou , structural analysis of musical rhythm : a comprehensive review , technical report nsc 92 - 2213-e-002 - 002 , department of computer science and information engineering , national taiwan university , 2003 .",
    "j. mccormack , interactive evolution of l - system grammars for computer graphics modelling , in book complex systems : from biology to computation , edited by d. g. green and t. bossomaier , 1993 , pp.118 - 130 .",
    "p. worth and s. stepney , growing music : musical interpretations of l - systems , evomusart workshop , eurogp , lausanne , switzerland , lncs 3449 , pp .",
    "545 - 550 , springer , 2005 ."
  ],
  "abstract_text": [
    "<S> this paper constructs a tree structure for the music rhythm using the l - system . </S>",
    "<S> it models the structure as an automata and derives its complexity . </S>",
    "<S> it also solves the complexity for the l - system . </S>",
    "<S> this complexity can resolve the similarity between trees . </S>",
    "<S> this complexity serves as a measure of psychological complexity for rhythms . </S>",
    "<S> it resolves the music complexity of various compositions including the mozart effect k488 .    </S>",
    "<S> keyword : music perception , psychological complexity , rhythm ,    l - system , automata , temporal associative memory , inverse    problem , rewriting rule , bracketed string , tree similarity    the number of text pages of the manuscript 21    the number of figures 13    the number of tables  2    @xmath0correspondence : department of computer science and    information engineering , national taiwan university , taipei ,    taiwan , 106 , r.o.c . </S>",
    "<S> , tel : 8862 23625336 ext 515 ,    fax : 8862 23628167 , email : cyliou@csie.ntu.edu.tw </S>"
  ]
}