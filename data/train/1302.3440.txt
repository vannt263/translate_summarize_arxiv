{
  "article_text": [
    "the routing problem represents one of the central questions in today s internet traffic engineering @xcite .",
    "different routing protocols lead to different outcomes concerning the traffic flow throughout the network . in this respect",
    ", we can distinguish three classes of routing schemes @xcite .",
    "the first class uses a fixed routing strategy where the paths depend only on the physical structure of the network and are stored in a fixed routing table of each router .",
    "the second class consists of dynamic routing protocols where the decision to send a packet through a given link depends only on the traffic state . finally , in the third class , both the physical structure and the dynamic traffic information are used in order to take routing decisions @xcite .",
    "first methods present many advantages in terms of economical and technical costs compared with traffic aware methods and are widely used in mid and small systems @xcite .",
    "the traffic flow in communication networks is characterized by a phase transition from the free flow state , where the packet generation rate is balanced by the packet delivery rate , to the congested state where packets accumulate rapidly in the network .",
    "this happens when the traffic generation rate @xmath0 becomes greater than a threshold @xmath1 .",
    "the principal task of traffic engineering is to make @xmath1 as high as possible in order that the network could sustain much traffic load without congestion .    in this respect ,",
    "the shortest path routing ( spr ) used for forwarding information packets@xcite is not sufficient for this goal .",
    "indeed , the structure of complex networks @xcite such as the internet @xcite is best described by an underlying scale - free @xcite complex structure characterized by the existence of hubs ( highly connected nodes ) as well as peripheral nodes .",
    "routing based on shortest paths often tends to send more information packets towards the hubs which rapidly become congested resulting in general congestion of the whole network .",
    "other routing schemes have been proposed to overcome this difficulty .",
    "the so called efficient path routing ( epr ) ( ref .  ) was used instead of spr , with the cost of a path is chosen to depend on the degrees of its nodes : @xmath2 ( where @xmath3 is the degree of node i and @xmath4 is a control parameter ) .",
    "the best results are obtained with this algorithm for @xmath5 , though at the expense of the average packet travel time . on the other hand , in the hub avoidance ( ha ) routing@xcite , the authors remove , in a first step , some hubs from the network which becomes a set of disconnected clusters , and then build usual shortest paths between every pair of nodes in the same cluster before placing the hubs back and computing the paths between the remaining pairs of nodes .",
    "the results are found to be better than those obtained when using the shortest path ( spr ) protocol .",
    "although theses algorithms succeed in raising the critical packet generation rate , they do not explicitly take into account the true optimal paths that should be used for routing .",
    "another algorithm called `` optimal routing '' ( or)@xcite was proposed which tries to reduce the maximum node betweenness in a self - consistent manner reaching a near - optimal configuration of paths .",
    "good results are obtained by this algorithm despite its slow convergence .    in this paper",
    ", we propose a new algorithm which minimizes self - consistently , the number of intersection nodes between the resulting paths .",
    "the results of this `` self avoiding paths routing '' ( sapr ) algorithm show improvements in comparison to the epr presented in ref .   while at the same time reaching near - optimal path configuration in a relatively small number of iterations compared to the or ( refs .  ) .",
    "in fact , the paths generated by our algorithm are not `` self avoiding '' in the strict sens ; the sapr algorithm tries to find self avoiding paths in an optimal sens , that is , paths that are as much as possible `` self avoiding '' or with minimal intersection points .",
    "the principal idea behind the sapr algorithm is to execute iteratively the standard dijkstra s algorithm for finding shortest paths between any given pair of source and destination nodes with the following main modification : instead of using the cost associated with each path as a fixed input for a dijkstra s cycle , this cost is updated even during a cycle whenever a new path is discovered .",
    "this adaptive process permits us to take into account the previous situation in order to decide how to constract subsequent paths , by trying to avoid the existing ones for the remaining path finding process during the same cycle .",
    "the output costs of one iteration are used as an input for the following one .    a judicious choice for the cost associated with a path @xmath6 from node @xmath7 to node @xmath8 can be chosen according to the following form : @xmath9 where @xmath10 represents the cost associated with node @xmath11 given by @xmath12^\\alpha\\ ] ] where @xmath13 is the number of paths found by the algorithm in the current step and traversing node @xmath11 .",
    "@xmath14 is an adjustable parameter . for @xmath15",
    ", @xmath16 is just the number of nodes in the path @xmath6 , and so we recover the shortest path algorithm .",
    "@xmath13 is also calles the node betweenness ( see ref .  ) .",
    "the sapr algorithm evolves just like the dijkstra s one",
    ". we will not give the details of this algorithm , we will only show how to compute the costs associated with each node during the path construction process . in the following ,",
    "we will call a `` shortest path '' a path that will have the lowest cost .",
    "network nodes are visited in the same order used in the standard dijkstra s algorithm . in order to explore all shortest paths starting from a given source node @xmath17 to all the remaining @xmath18 nodes ,",
    "the algorithm starts at node @xmath17 and records the `` distance '' @xmath19 from @xmath17 to a any node @xmath20 .",
    "this distance is given by the total cost of the nodes which constitute the path @xmath21 : @xmath22 whenever a path with the lowest cost is discovered from @xmath17 to a node @xmath20 through an immediately preceeding node @xmath11 , we need to store @xmath11 as the antecedent of @xmath20 : @xmath23 . for the sake of simplicity , we will not cover the case where more than one shortest path is stored in the routing table , but will consider a unique path between any given pair of nodes .",
    "the generalization is straightforward .",
    "suppose that the algorithm is now on the current node @xmath11 , and that a neighbor @xmath20 of @xmath11 is checked ( see fig .",
    "[ pathconst ] ) .",
    "the node @xmath20 may have already a previously discovered lower cost path from source @xmath17 : @xmath24 , through another node @xmath25 with a corresponding distance : @xmath26 .",
    "so we are faced with the three following situations :    _ case 1 _ : if @xmath27 , then the path through @xmath25 still has the lowest cost , so nothing is done concerning node @xmath20 in this step .",
    "_ case 2 _ : if @xmath28 , then the the distance to @xmath20 from @xmath11 is discovered as the new lower cost path . in this case , we need to update the number of paths passing through all nodes of the path @xmath29 and the corresponding costs by traversing the path backward from node @xmath20 down to source node @xmath17 and adding @xmath30 to the number of paths of every node belonging to the path as is shown by the following pseudo - code :    @xmath31 @xmath32 @xmath33^\\alpha$ ] @xmath34    in the other hand , all nodes of the previous path @xmath24 should be updated according to :    @xmath35 @xmath36 @xmath33^\\alpha$ ] @xmath34    meaning that a path traversing the corresponding nodes is no longer used .",
    "so , before the updating , the path from node @xmath17 to node @xmath20 via node @xmath25 has the lowest cost : @xmath37 . after being updated , the path through node @xmath11 is discovered as the new lower cost one : @xmath38 .    _ case 3 _ : if @xmath39 , then the two paths through @xmath11 and through @xmath25 are of equal cost , so we choose either case  1 or case  2 randomly ( with probability @xmath40 ) in the case where we want to store in the routing table a unique shortest path between any pair of nodes .",
    "but in the contrary , the path through @xmath24 has to be stored as a shortest path as well .",
    "the algorithm proceeds according to the following steps :    1 .",
    "assign 1 to the cost of every node .",
    "2 .   compute the shortest paths from a given source node to every destination node ; and for every path found , update the number of paths for the corresponding nodes and compute the costs following the two pseudo - codes above .",
    "repeat step 2 without initializing the number of paths nor the costs associated with every node but with using them as input fot the next cycle .",
    "for most of our numerical simulations , we used a barbasi - albert ( ba ) network ( ref .  ) with @xmath41 nodes ( except for fig .",
    "[ small_world ] where we used values up to @xmath42 and fig .",
    "[ comp_or ] where @xmath43 ) .",
    "this network is built starting with @xmath44 fully connected nodes ; and at each time step , a new node with @xmath45 edges is added to the existing nodes with preferential attachment , that is with probability @xmath46 that depends on the node degree @xmath3 of every candidate node : @xmath47 the network generated has an average node degree : @xmath48 .",
    "furthermore , it has a power - law degree distribution characterized by the existence of highly connected nodes ( hubs ) and peripheral nodes .",
    "in addition , in order to test the proposed algorithm on different types of complex networks , we have done traffic simulations on a real autonomous system ( as ) network data which consist of periodic snapshots of bgp routing table dumps  . for our purpose , we used a network of size @xmath49 from the as-733 dataset .    using the ba network with the sapr algorithm",
    ", we first check for the number of necessary iterations to obtain the convergence of the algorithm . the average path length is calculated and its variation is reported in fig .",
    "[ path_iter ] in function of the number of iterations for @xmath50 and @xmath51 for the ba network .",
    "it can be seen that the algorithm quickly converges to a near - optimal value within just a few iterations .",
    "the simulations show that for small values of @xmath14 , the convergence is very fast ; for example , when @xmath52 , a number of @xmath53 iterations suffices while for @xmath54 , we need up to @xmath55 iterations",
    ". however , when @xmath14 becomes larger ( strong interacting paths ) , we need much more iterations , but in return , there is no substantial gain in terms of the performance as we will show later .    in fig .",
    "[ small_world ] , we have plotted the average path length @xmath56 as a function of the number of nodes in the ba network : @xmath57 for @xmath58 and @xmath59 .",
    "we can see that , even if @xmath56 is a monotonically increasing function of @xmath57 , the small world property@xcite is maintained for different values of @xmath14 , that is : @xmath60    we used the sapr algorithm to simulate traffic flow in the ba network where each node is treated as a host and a router , as follows : for each time step , we generate @xmath0 packets from random sources and assign them random destinations , then put each of them at the end of a queue on the corresponding source . at each time step",
    ", every node can deliver at most @xmath61 packets from the top of its queue towards their destinations ( here we set @xmath62 without loss of generality ) .",
    "the packets are navigated one step forward to their destinations by using the fixed routing table maintained at each router .",
    "if a packet s destination is found among the neighbors of the current node , it is directly sent to it ; else , it is sent to the neighboring node with the minimal distance to the destination of the packet and is put at the bottom of its queue .",
    "packets reaching their destinations are automatically removed from the system .    to characterize the traffic dynamics",
    ", we used the order parameter @xmath63 given by@xcite : @xmath64    where @xmath65 is the number of packets in the network at time @xmath25 and @xmath66 is the average over time windows of width @xmath67 . in fig .",
    "[ ord_param ] , we report the order parameter @xmath63 versus @xmath0 , the number of packets generated per unit time for @xmath68 and @xmath51 .",
    "we can distinguish two phases , for @xmath69 , where @xmath70 is a critical value , the system is in a free flow state where the number of generated packets is balanced by the number of packets delivered to their destinations and @xmath71 . while for @xmath72 , a congested phase takes place on the network and @xmath73 grows linearly with @xmath67 and thus @xmath63 tends towards a constant value for fixed @xmath61 and @xmath0 values .",
    "it is clear that @xmath70 increases with @xmath14 and we can conclude that the sapr algorithm is very efficient for larger values of @xmath14 .",
    "this result is consistent with the fact that when @xmath14 is large , the paths tend to be as much separated as possible .",
    "so when the information packets use these paths , they , more likely , try to generate an equally distributed load among the different routers ( regardless if they are hubs or peripheral nodes ) resulting in more traffic load in the free flow state .",
    "in order to compare the performance of the sapr algorithm ( for @xmath74 ) with the shortest path routing ( spr ) and the efficient path routing ( epr)(ref .  ) algorithms , we have plotted in fig.[compar ] , the variation of the average packet travel time @xmath75 in function of @xmath0 for the three algorithms which was found to have the same behaviour as the order parametet @xmath63 and the same transition point at @xmath70 .",
    "we can see clearly the large value of @xmath70 for the sapr algorithm compared with the others which is an indication that it is much more performant than spr and epr protocols .    the average travel time is also plotted in fig.[compar_real ] for the algorithm : spr , epr and sapr ( with @xmath76 ) for the as-733 network .",
    "the results clearly confirms the fact that the sapr algorithm shows its superiority not only for the theoretical ba networks , but also on real network data .",
    "moreover , we found that the average travel time @xmath75 is relatively lower for the sapr algorithm even in the free flow phase for some range of @xmath14 values .",
    "it is straightforward to see that the average travel time is equal to the average path length @xmath56 for low values of @xmath0 : @xmath77 in the case where the sources and destinations of packets are both chosen at random . in fig .",
    "[ avlength ] , we have reported @xmath56 as a function of @xmath14 .",
    "we can see that @xmath56 increases to a limiting value corresponding to @xmath78 .",
    "this is due to the fact that when @xmath15 , the sapr protocol is equivalent to the spr one and the average path length has its absolute minimal value because of the abscence of any `` interaction '' between the paths that are free of any constraint during their construction process .",
    "when @xmath14 increases , however , the mutual avoidance between the paths becomes more important and they are more and more constrained to look for less occupied nodes and thus become longer and try to choose their optimal configuration where the average path length reaches its maximum .",
    "although the average path length becomes somewhat longer , this is compensated by a larger value of the critical packet generation rate @xmath70 ( see fig .  [ gen_rate ] ) which has the same behaviour as @xmath56 with a low starting value for @xmath15 corresponding to the spr algorithm : @xmath79 to the value @xmath80 for @xmath81 which is larger even than the epr algorithm : @xmath82 . for further greater values of @xmath14 ,",
    "the increase of @xmath70 is very weak , and the gain in performance for the traffic flow is not important compared to the large number of iterations necessary for convergence .",
    "now we will try to explain the performance of the sapr algorithm compared especially to the epr one . to this end , we plotted in fig",
    ".  [ nb_paths ] , the number of paths @xmath83 traversing each node ( or its betweenness ) as a function of the node degree @xmath84 . as can be expected , the spr protocol results in a large number of paths traversing the hubs compared to the peripheral nodes . in contrast",
    ", the epr protocol succeeds in reducing the number of paths traversing the hubs while nodes with intermediate degree receive more paths .",
    "but we believe that this algorithm reduces the number of paths crossing the hubs more than necessary .",
    "indeed , as the figure shows , the sapr algorithm establishes a more equilibrated distribution of the paths among the hubs .    to further clarify our argument ,",
    "we have modified the cost in the epr algorithm ( @xmath85 see ref .  ) by reducing the cost of the hubs ( having @xmath86 ) with @xmath87 for example , at the expense of the other nodes , by using the simple formula @xmath85 for @xmath88 and @xmath89 otherwise ( @xmath90 is a parameter in the range @xmath91 $ ] and the factor @xmath92 guarantees continuity ) . for @xmath93 , this algorithm ( called epr2 ) performs better than the standard epr reaching @xmath94 instead of @xmath95 for the same ba network .",
    "this result was achieved by the fact that the paths distribution is more equilibrated than that of the epr protocol ( see fig .  [ nb_paths ] ) , though not optimal like the sapr protocol .    in another respect , although the sapr algorithm presents some similarities with the or one , in the fact that they are both heuristic algorithms that try iteratively to find a near optimal solution for the routing problem by acting on the node betweenness , we will discuss here some differences between them .",
    "while the sapr algorithm tries to redistribute paths across the whole network by acting on the node betweenness of all the network nodes in every move during every iteration of the algorithm , the or protocol , in the other hand , tries to reshape the betweenness landscape by minimizing the maximum betweenness @xmath96 by updating it at the end of each iteration .    from a computational point of view ,",
    "the or protocol runs in @xmath97 ( see refs . ) ) . in the other hand ,",
    "the sapr is based on the dijkstra s algorithm which runs in @xmath98 ( if implemented with the fibonacci heap ) , in order to find all the shortest paths starting from a given source node , where @xmath57 and @xmath99 are , respectively , the number of nodes and the number of links in the network .",
    "the sapr protocol uses the supplementing step of traversing the paths backwards to update their costs , so the time becomes @xmath100 ( @xmath56 is the average path length ) .",
    "taking into account the fact that the paths are constructed for the @xmath57 sites and that the simulation takes @xmath101 iterations , we conclude that the sapr algorithm takes @xmath102 execution time .    for networks that obey the small world property",
    "( eq .  [ small_world_eq ] ) , such as the ba network for example and the fact that @xmath99 is proportional to @xmath57 in this type of networks , we are left with the final running time of the sapr algorithm : @xmath97 in the worst case .",
    "then , we can say that sapr and the or algorithms ( see ref .  )",
    "perform in relatively the same computational time in the large networks limit .    for a direct quantitative comparision of the two algorithms , we have plotted in fig .",
    "[ comp_or ] , the variation of the average travel time for the spr , the or and the sapr protocols for the ba network with @xmath43 nodes .",
    "the results for the critical packet generation rates are respectively @xmath103 , @xmath104 and @xmath105 , showing some advantage of the sapr protocol .    in the other hand , although the two algorithms have the same execution time in the large network limit , we have experienced a very slow convergence using the or protocol wich needs up to @xmath106 iterations to obtain a satisfactory convergence for the maximum betweenness ( for the ba network with @xmath107 nodes ) . while to obtain convergence of the sapr protocol , we need only @xmath108 iterations ( see for example fig .",
    "[ path_iter ] ) .",
    "one possible explanation to this difference is the fact that the or is a form of extremal optimization which tries to reduce the quantity @xmath96 on a single node in every step , whereas the sapr takes advantage of the path interaction on each node during every single iteration and uses this collective information for optimization , thus reaching quickly an equilibrated path distribution landscape accross the network .",
    "we note here that we have done extensive traffic simulation for the goal of explicit comparison between the performance of the different algorithms in real traffic situation .",
    "but if the mere goal is to determine the transition point from free flow to congested state , it can be achieved directly from the maximal betweenness @xmath96 through the relation ( see ref  . ) : @xmath109 , where @xmath110 is the critical probability of packet insertion rate at a given node .",
    "in summary , we have proposed a new routing algorithm called the self avoiding path routing ( sapr ) algorithm where the paths are self - avoiding in the sens that the inetersection between them is reduced at its minimum .",
    "it uses the number of paths crossing each node of a given path as the cost associated with that path .",
    "theses costs are found self - consistently by updating them during each step of the path discovery process of the original dijksta s algorithm .",
    "this fact results in a more equilibrated path distribution especially among the hubs .    the direct result was the increase of the critical packet generation rate above which a jamming state occurs resulting in a much greater traffic load that can be sustained by the network without beeing congested .",
    "moreover , the average path length was found to be relatively small and obeys the small world property .",
    "the algorithm performs better than both the shortest path routing `` spr '' and the efficient path routing `` epr '' protocols .",
    "the former was shown to have the majority of paths concentrated on the hubs while the latter was shown to avoid hubs more than necessary .",
    "it was shown also that the sapr algorithm takes the same computational time as the or protocol but this latter have a slower convergence .",
    "30ifxundefined [ 1 ] ifx#1 ifnum [ 1 ] # 1firstoftwo secondoftwo ifx [ 1 ] # 1firstoftwo secondoftwo `` `` # 1''''@noop [ 0]secondoftwosanitize@url [ 0 ]  + 12$12  & 12#1212_12%12@startlink[1]@endlink[0]@bib@innerbibempty @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) doi:10.1142/s0219525903000803 [ * * ,   ( ) ] @noop _ _  ( ,  ) @noop * * , ( ) @noop * * , ( ) @noop * * ,   ( ) @noop _ _  ( ,  , ) @noop * * ,   ( ) @noop * * ,   ( ) @noop _ _  ( ,  ,  ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * , ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( )"
  ],
  "abstract_text": [
    "<S> in this paper , we present a new routing algorithm called `` the self avoiding paths routing algorithm '' . </S>",
    "<S> its application to traffic flow in sclae - free networks shows a great improvement over the so called `` efficient routing '' protocol while at the same time maintaining a relatively low average packet travel time . </S>",
    "<S> it has the advantage of minimizing path overlapping throughout the network in a self consistent manner with a relatively small number of iterations by maintaining an equilibrated path distribution especially among the hubs . </S>",
    "<S> this results in a significant shifting of the critical packet generation rate over which traffic congestion occurs , thus permitting the network to sustain more information packets in the free flow state . </S>",
    "<S> the performance of the algorithm is discussed both on a barbasi - albert ( ba ) network and real autonomous system ( as ) network data .    </S>",
    "<S> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ the understanding of information flow throughout a complex network is an important issue from both a theoretical and a practical point of view . </S>",
    "<S> the goal of such understanding is to control the traffic in complex systems such as the internet . </S>",
    "<S> indeed , the main problem with these systems is the emergence of congestion when the traffic load becomes higher than a certain threshold . to solve this problem , </S>",
    "<S> studies focus on the mechanism of routing of information packets to reach their destinations . in this respect , </S>",
    "<S> the well known shortest path protocol directs the traffic more likely towards the more connected nodes ( hubs ) . </S>",
    "<S> many alternative routing protocols ( static and traffic aware protocols ) have been proposed in order to obtain an equilibrated traffic load between the different paths . </S>",
    "<S> the latter protocols need extra communication between the routers compared to the static ones which can easily be implemented . </S>",
    "<S> but the proposed static algorithms , did not , in general , use the optimal paths explicitly . by introducing a self avoiding mechanism between the paths during the process of their construction </S>",
    "<S> , we were able to devise a new routing protocol called : `` the self avoiding paths routing algorithm '' which results in an optimal distribution of the paths and performs better than many of the previous protocols in raising the overall network capacity . _ </S>",
    "<S> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ </S>",

  ]
}