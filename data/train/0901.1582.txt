{
  "article_text": [
    "xstar is  a computer program for calculating the physical conditions and emission spectra of photoionized gases \" ( kallman & bautista 2001 ) ; the science it facilitates may be described most concisely by paraphrasing the documentation : _ a spherical gas shell surrounding a central source of ionizing radiation absorbs some of this radiation and reradiates it in other portions of the spectrum .",
    "xstar computes the effects on the gas of absorbing this energy , and the spectrum of reradiated light , while allowing for consideration of other sources ( or sinks ) of heat , such as mechanical compression & expansion , or cosmic ray scattering .",
    "_ coded in fortran 77 , xstar may be used as either a standalone executable or in the form of analytic models like warmabs , with the latter being compiled into shared objects and dynamically loaded into spectral modeling tools such as isis ( houck , 2002 ) .",
    "we are presently using xstar in isis to model active galactic nuclei and non - equilibrium ionization of photoionized plasmas .",
    "relative to classic spectral modeling conducted with interactive analysis tools , the scales of these efforts are large : analytic models with 20 or more components & roughly 300 parameters , scores of which may vary during fitting , or batch xstar runs on thousands of individual sets of parameters . the compute time required in both use cases , on the order of a week to a month for single end - to - end runs , precludes traditional use of xstar , which is coded for serial execution on one cpu . compounding the problem is the fact that most research efforts require multiple end - to - end runs , e.g. to experiment with different model components or parameter values , which can extend analysis timeframes into several months .",
    "part of our non - equilibrium ionization modeling includes large - scale simulations , wherein the xstar application is repeatedly invoked over sets of unique input parameter tuples ; one spectrum is generated per xstar run and saved as a fits file , and these are collated into a single fits table model that can be incorporated into an analytic model for fitting .",
    "historically , this process has been driven by the serial xstar2xspec script bundled with xstar and outlined in fig .",
    "[ flow ] . a representative simulation of 600 xstar jobs ,",
    "generating power spectra of hercules x1 , consumed 26.4 hours of wallclock time on a single 2.6ghz amd opteron processor with 2 gb ram ; a linear scaling to 4200 jobs would consume 7.5 days on the same machine .",
    "in contrast , a similar physical simulation of 4200 xstar jobs completed in 110 minutes when executed via pvm_xstar  on our beowulf cluster of 52 2.4ghz opteron ( 4 gb ram ) processors . as shown in fig . [ flow ]",
    ", pvm_xstar  consists of 4 scripts : 2 of these , pvm_xstar  proper and pvm_xstar_wrap ) , are coded in bourne shell , while the master / slave scripts are coded in s - lang using the s - lang pvm module ( davis et al 2005 , noble et al 2006 ) to interface with the parallel virtual machine toolkit ( geist et al 1994 ) .",
    "as noted earlier , xstar is also used in the form of dynamically loaded analytic models , as in this sequence of commands at the isis prompt :    ....          isis >   load_data(\"my_data.pha \" )          isis >   model(\"warmabs(1 ) + warmabs(2 ) + hotabs(1 ) \" )          isis >   set_params ( ... )          isis >   fit            parameters [ variable ]   = 48[21 ]                      data bins   = 3                      chi - square = 1.1118061 ....    the second step defines a 3-component model , consisting of two xstar warmabs components and one xstar hotabs component .",
    "the performance bottleneck here is that each component may take 15 or more seconds to evaluate just once on a modern cpu , or 45 seconds to compute the entire model expression for every iteration of the fit loop initiated by step 4 .",
    "a typical fit loop may contain hundreds of such iterations , with tens of thousands to millions of component evaluations often needed to conduct thorough walks through parameter space while generating error bars . in short , days or weeks of compute time",
    "can be needed for essential analysis when expensive models are involved .",
    "these lengthy runtimes may be shrunk by observing that there are two sources of parallelism inherent to model evaluation .",
    "first , whenever model components are mathematically independent of one another they may be evaluated concurrently . in the above model ,",
    "for example , each component may be evaluated simultaneously , potentially reducing the runtime of each fit loop iteration from 45 to 15 seconds ( the theoretical maximum of linear speedup on 3 cpus ) .",
    "this component independence is common in model expressions , which are evaluated from left to right under the associativity and precedence rules of classic algebra .",
    "the second form of parallelism arises from bin independence within models : when evaluating the model on the _",
    "i_-th bin`model(lo[i ] , hi[i ] , params)`requires no knowledge of bins _",
    "i+1 _ , then wavelength / energy grids of size nbins may be trivially decomposed    ....",
    "lo[1 , nbins ] = [ lo[1,n ] , lo[n+1 , 2n ] ...",
    "lo[nbins - n+1 , nbins ] ]        hi[1 , nbins ] = [ hi[1,n ] , hi[n+1 , 2n ] ...",
    "hi[nbins - n+1 , nbins ] ] ....    into nbins",
    "/ n subgrids and each ` model(lo_subgrid[j],hi_subgrid[j],params ) ` evaluated concurrently .",
    "this is relatively common in models of x - ray spectra .",
    "the pmodel  plugin for isis was written to exploit these latent sources of parallelism .",
    "loaded at runtime by a simple ` require(\"pmodel \" ) ` command , the package adds 4 primary functions to isis : pm_add ( ) , pm_mult ( ) , pm_func ( ) , & pm_subgrid(n ) .",
    "the first three are stub models , in that they contribute nothing to the physics being modeled , but can be used in a model expression to identify which portions to evaluate concurrently .",
    "the fourth function is not a stub model , but rather overrides the default model evaluation mechanisms in isis with routines that decompose the model grid into n independent subgrids . in this case the entire model is independently evaluated over pieces of the grid , while the first group of functions evaluates pieces of the model independently over the entire grid . using pmodel  is easy : in the context of our xstar example only step 2 would need to change , to    ....",
    "model(\"pm_add(warmabs(1 ) , warmabs(2 ) , hotabs(1 ) ) \" ) ....    for every iteration of the isis fit loop this revised model expression would cause the dispatch of each component evaluation to a distinct processor , with the results from each combined by a simple additive _ reduction _ operation .",
    "although pmodel  may be used to distribute virtually any expensive model components , the same ease of use would apply : the parallel use case bears an overwhelming resemblance to the serial one , with the differences being simple to identify and implement .",
    "this means that end - users need not learn to program for parallelism in order to use multiple processors in their models , a classic barrier to the adoption of parallel methods by non - specialists .",
    "the pmodel  functions will decompose the model or grid and combine results with either additive , multiplicative , or arbitrary functional reduction operations , all transparent to the top - level user interface .",
    "moreover , isis did not need to be recoded for parallelism , and in fact it does not even know the model is computed in parallel ; this knowledge is completely encoded within pmodel , whose functions isis simply calls in the same serial manner it would for any other physical model component . we have used these techniques to reduce the compute time of models with 20 + components , containing 10 or more xstar components and hundreds of parameters , from 4 + weeks when run serially to ` ~`22 hours on the aforementioned beowulf cluster .",
    "together , pvm_xstar  and pmodel  enable scientists to incorporate multiple processors in their xstar modeling without becoming experts in parallelism . amortizing the evaluation of expensive xstar components over many cpus allows larger and more physically realistic models to be computed , permitting us to probe thousands of physical scenarios in the time it has previously taken to compute only a handful of such models . insofar as analytic modeling of observational data is among the most common scientific activities in astronomy , pmodelhas a broad scope of applicability , particularly because it can in principle distribute the evaluation of _ any _ expensive model , not merely the xstar components shown here .",
    "both pvm_xstar  and pmodel  are small open source packages , and have been employed at several institutes , on multicore desktops , workstation clusters , and high - performance parallel computers",
    ". they may be obtained by download from http://space.mit.edu/cxc/pvm_xstar/ or by contacting the lead author .",
    "kallman , t. & bautista , m.  2001 , photoionization and high - density gas , , 133 , 221 - 253 , houck , j.  c.  2002 , isis : the interactive spectral interpretation system , high resolution x - ray spectroscopy with xmm - newton and chandra davis , j.  e. , houck , j.  c. , allen , g.  e. , and stage , m.  d. , 2005 , , 444 noble , m.  s. , houck , j.  c. , davis , j.  e. , young , a. , nowak , m.  2006 , using the parallel virtual machine for everyday analysis , , 481 a. geist , a. beguelin , j. dongarra , w. jiang , r. manchek , & v. sunderam 1994 , pvm : parallel virtual machine , a user s guide and tutorial for networked parallel computing"
  ],
  "abstract_text": [
    "<S> we describe two means by which xstar , a code which computes physical conditions and emission spectra of photoionized gases , has been parallelized . </S>",
    "<S> the first is pvm_xstar , a wrapper which can be used in place of the serial xstar2xspec script to foster concurrent execution of the xstar command line application on independent sets of parameters . </S>",
    "<S> the second is pmodel , a plugin for the interactive spectral interpretation system ( isis ) which allows arbitrary components of a broad range of astrophysical models to be distributed across processors during fitting and confidence limits calculations , by scientists with little training in parallel programming . </S>",
    "<S> plugging the xstar family of analytic models into pmodel  enables multiple ionization states ( e.g. , of a complex absorber / emitter ) to be computed simultaneously , alleviating the often prohibitive expense of the traditional serial approach . </S>",
    "<S> initial performance results indicate that these methods substantially enlarge the problem space to which xstar may be applied within practical timeframes . </S>"
  ]
}