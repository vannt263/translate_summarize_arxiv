{
  "article_text": [
    "recent years have seen substantial progress in developing algorithmic versions of the lovsz local lemma ( lll ) and some of its generalizations , starting with the breakthrough work of moser & tardos @xcite : see , e.g. , @xcite .",
    "however , one major relative of the lll that has eluded constructive versions , is the  lopsided \" version of the lll ( with the single exception of the cnf - sat problem @xcite ) . a natural setting for",
    "the lopsided lll is where we have one or many random permutations @xcite .",
    "this approach has been used for latin transversals @xcite , hypergraph packing @xcite , certain types of graph coloring @xcite , and in proving the existence of certain error - correcting codes @xcite . however",
    ", current techniques do not give constructive versions in this context .",
    "we develop a randomized polynomial - time algorithm to construct such permutation(s ) whose existence is guaranteed by the lopsided lll , leading to several algorithmic applications in combinatorics . furthermore , since the appearance of the conference version of this work @xcite , related works including @xcite have been published ; we make a comparison to these in sections [ sec : intro - comparison ] and [ achlioptas - sec ] , detailing which of our contributions do not appear to follow from the frameworks of @xcite .",
    "suppose we want to select permutations @xmath2 , where each @xmath3 is a permutation on the set @xmath4 = \\{1 , \\dots , n_k\\}$ ] .",
    "in addition we have a set @xmath5 of `` bad events . ''",
    "we want to select permutations @xmath6 such that no bad event is true . the _ lopsided version _ of the lovsz local lemma ( lll ) can be used to prove that such permutations exist , under suitable conditions .",
    "we suppose that that the family of bad events @xmath5 consists of _ atomic bad - events_. that is , each bad event @xmath7 is a set of tuples @xmath8 ; it is true iff we have @xmath9 .",
    "( complex bad - events can usually be decomposed into atomic bad - events , so this does not lose much generality . ) we will assume that no bad - event contains two tuples @xmath10 where @xmath11 , or two tuples @xmath12 where @xmath13 ; such a bad - event would have probability zero , and could be ignored .",
    "to apply the lopsided local lemma in this setting , we need to define a _ dependency graph _ with respect to these bad events .",
    "we connect two bad events @xmath14 by an edge iff they overlap in one slice of the domain or range of a permutation ; namely , iff there are some @xmath15 with @xmath16 _ or _ there are some @xmath17 with @xmath18 .",
    "we write this @xmath19 ; note that @xmath20",
    ". the following notation will be useful : for pairs @xmath21 , we write @xmath22 if @xmath23 _ or _ @xmath24 ( or both ) . thus , another way to write @xmath19",
    "is that  there are @xmath25 , @xmath26 with @xmath27 \" .",
    "we will use the following notation at various points : we write @xmath28 to mean any ( or all ) triples of the form @xmath29 , and similarly for @xmath30 , or @xmath31 etc .",
    "therefore , yet another way to write the condition @xmath19 is that there are @xmath32 or @xmath33 .",
    "now suppose we select each @xmath3 uniformly at random and independently .",
    "this defines a probability space @xmath34 , to which we can apply the lopsided lll .",
    "one can show that the probability of avoiding a bad event @xmath35 can only be _ increased _ by avoiding other bad events @xmath36 @xcite .",
    "thus , in the language of the lopsided lll , the relation @xmath37 defines a _ negative - dependence _",
    "graph among the bad - events .",
    "( see @xcite for a study of the connection between negative dependence , random injections / permutations , and the lopsided lll . ) hence , the standard lopsided - lll criterion is as follows :    [ thm : lopsided ] suppose that there is some assignment @xmath38 such that for all bad - events @xmath7 we have @xmath39 then the random process of selecting each @xmath3 uniformly at random and independently has a positive probability of selecting permutations that avoid all the bad - events .",
    "* remark : * the condition of theorem  [ thm : lopsided ] about the existence of such a @xmath40 is equivalent to the more - familiar lll formulation  there exists @xmath41 such that for all @xmath7 , @xmath42 \" : just set @xmath43 .",
    "the  positive probability \" of theorem  [ thm : lopsided ] is however typically exponentially small , as is standard for the lll .",
    "as mentioned above , a variety of papers have used the framework of theorem  [ thm : lopsided ] for proving the existence of various combinatorial structures .",
    "unfortunately , the algorithms for the lll , such as moser - tardos resampling @xcite , do not apply in this setting .",
    "the problem is that such algorithms have a more restrictive notion of when two bad - events are dependent ; namely , that they share variables .",
    "( the moser - tardos algorithm allows for a restricted type of dependence called _ lopsidependence _ : two bad - events which share a variable but always _ agree _ on that value , are counted as independent .",
    "this is not strong enough to generate permutations . )",
    "so we do not have an efficient algorithm to generate such permutations , we can merely show that they exist .",
    "we develop an algorithmic analogue of the lll for permutations .",
    "the necessary conditions for our swapping algorithm are the same as for the lll ( theorem  [ thm : lopsided ] ) ; however , we will construct such permutations in randomized polynomial ( typically linear or near - linear ) time .",
    "our setting is far more complex than in similar contexts such as those of @xcite , and requires many intermediate results first .",
    "the main complication is that when we encounter a bad event involving  @xmath44 \" , and perform our algorithm s random swap associated with it , we could potentially be changing any entry of @xmath3 .",
    "in contrast , when we resample a variable in @xcite , all the changes are confined to that variable .",
    "there is a further technical issue : the current witness - tree - based algorithmic versions of the lll such as @xcite , identify , for each bad - event @xmath35 in the witness - tree @xmath45 , some necessary event occurring with probability at most @xmath46 .",
    "this is not the proof we employ here ; there are significant additional terms ( `` @xmath47 ''  see the proof of lemma  [ witness - tree - lemma ] ) that are gradually `` discharged '' over time .",
    "we also develop rnc versions of our algorithms . going from serial to parallel",
    "is fairly direct in @xcite ; our main bottleneck here is that when we resample an  independent \" set of bad events , they could still influence each other .",
    "( note : we distinguish in this paper between the probability of events which occur in our algorithm , which we denote simply by @xmath48 , and the probabilities of events within the space @xmath34 , which we denote by @xmath49 . )      building on an earlier version of this work @xcite , there have been several papers which have developed generic frameworks for variations of the moser - tardos algorithm applied to other probability spaces . in @xcite ,",
    "achlioptas & iliopoulos gave an algorithm which is based on a compression analysis for a random walk ; this was improved for permutations and matchings by kolmogorov @xcite . in @xcite , harvey & vondrk",
    "gave a probabilistic analysis similar to the parallel moser - tardos algorithm .",
    "these frameworks both include the permutation lll as well as some other combinatorial applications .",
    "these papers give much simpler proofs that the swapping algorithm terminates quickly .",
    "the moser - tardos algorithm has many other powerful properties and extensions , beyond the fact that it efficiently finds a configuration avoiding bad - events .",
    "these properties include a well - characterized distribution on the output distribution at the end of the resampling process , a corresponding efficient parallel ( rnc ) algorithm , a partial - resampling variant ( as developed in @xcite ) , and an arbitrary ( even adversarial ) choice of which bad - event to resample .",
    "all of these properties follow from the witness tree lemma we show for our swapping algorithm .",
    "the more generalized llll frameworks of @xcite have a limited ability to show such extensions",
    ".    we will discuss the relationship between this paper and the other llll frameworks further in section  [ achlioptas - sec ] . as one example of the power of our proof method , we develop a parallel swapping algorithm in section  [ sec : parallel ] ; we emphasize that such a parallel algorithm can not be shown using the results of @xcite or @xcite .",
    "a second example is provided by theorem  [ szabo - thm ] , results such as which we do not see how to develop using the frameworks of @xcite .",
    "one of the main goals of our paper is to provide a model for what properties a generalized llll algorithm should have . in our view",
    ", there has been significant progress toward this goal but there remain many missing pieces toward a _ true _",
    "generalization of the moser - tardos algorithm .",
    "we will discuss this more in a concluding section , section  [ sec : conclusion ] .",
    "we present algorithmic applications for four classical combinatorial problems : latin transversals , rainbow hamiltonian cycles , strong chromatic number , and edge - disjoint hypergraph packing .",
    "in addition to the improved bounds , we wish to highlight that our algorithmic approach can go beyond theorem  [ thm : lopsided ] : as we will see shortly , one of our ( asymptotically - optimal ) algorithmic results on latin transversals , could not even have been shown non - constructively using the lopsided lll prior to this work .",
    "the study of latin squares and the closely - related latin transversals is a classical area of combinatorics , going back to euler and earlier @xcite .",
    "given an @xmath50 matrix @xmath51 with @xmath52 , a _",
    "transversal _ of @xmath51 is a choice of @xmath53 elements from @xmath51 , one from each row and at most one from any column .",
    "perhaps the major open problem here is : given an integer @xmath54 , under what conditions will @xmath51 have an _",
    "@xmath54-transversal _ : a transversal in which no value appears more than @xmath54 times @xcite ?",
    "the usual type of sufficient condition sought here is an upper bound @xmath55 on the number of occurrences of any given value in @xmath51 .",
    "that is , we ask : what is the maximum @xmath55 such that any @xmath50 matrix @xmath51 in which each value appears at most @xmath55 times , is guaranteed to have an @xmath54-transversal ?",
    "we denote this quantity by @xmath56 .",
    "the case @xmath57 is perhaps most studied , and @xmath58-transversals are also called _",
    "latin transversals_. the case @xmath59 is also commonly studied ( and includes latin squares as a special case ) , and we will also focus on these .",
    "it is well - known that @xmath60 @xcite . in perhaps the first application of the lopsided lll to random permutations , erds & spencer",
    "essentially proved a result very similar to theorem  [ thm : lopsided ] , and used it to show that @xmath61 @xcite .",
    "( their paper shows that @xmath62 ; the @xmath63 lower - bound follows easily from their technique . ) to our knowledge , this is the first @xmath64 lower - bound on @xmath65 .",
    "alon asked if there is a constructive version of this result @xcite .",
    "building on @xcite and using the connections to the lll from @xcite , bissacot _",
    "et al_.  showed non - constructively that @xmath66 @xcite .",
    "our result makes these results constructive .",
    "the lopsided lll has also been used to study the case @xmath67 @xcite . here , we prove a result that is asymptotically optimal for large @xmath54 , except for the lower - order @xmath68 term : we show ( algorithmically ) that @xmath69 .",
    "an interesting fact is that this was not known even non - constructively before : theorem  [ thm : lopsided ] roughly gives @xmath70 .",
    "we also give faster serial and perhaps the first rnc algorithms with good bounds , for the strong chromatic number .",
    "strong coloring is quite well - studied @xcite , and is in turn useful in _ covering _ a matrix with latin transversals @xcite .      in section  [ sec : swap - alg ] we introduce our swapping algorithm , a variant of the moser - tardos resampling algorithm . in it",
    ", we randomly select our initial permutations ; as long as some bad - event is currently true , we perform certain random swaps to randomize ( or resample ) them .",
    "section  [ witness - tree - sec ] introduces the key analytic tools to understand the behavior of the swapping algorithm , namely the witness tree and the witness subdag .",
    "the construction for witness trees follows @xcite ; it provides an explanation or history for the random choices used in each resampling .",
    "the witness subdag is a related concept , which is new here ; it provides a history not for each resampling , but for each individual swapping operation performed during the resamplings .    in section  [ perm - conditions ] , we show how these witness subdags may be used to deduce partial information about the permutations . as the swapping algorithm proceeds in time , the witness subdags can also be considered to evolve over time . at each stage of this process ,",
    "the current value of the witness subdags provides information about the current values of the permutations . in section  [ total - prob - sec ]",
    ", we use this process to make probabilistic predictions for certain swaps made by the swapping algorithm : namely , whenever the witness subdags change , the swaps must be highly constrained so that the permutations still conform to them .",
    "we calculate the probability that the swaps satisfy these constraints .",
    "section  [ constructive - lll - sec ] puts the analyses of sections  [ witness - tree - sec ] , [ perm - conditions ] , [ total - prob - sec ] together , to prove that our swapping algorithm terminates in polynomial time under the same conditions as those of theorem  [ thm : lopsided ] ; also , as mentioned in section  [ sec : intro - comparison ] , section  [ achlioptas - sec ] discusses certain contributions that our approach leads to that do not appear to follow from @xcite .    in section  [ sec :",
    "parallel ] , we introduce a parallel ( rnc ) algorithm corresponding to the swapping algorithm .",
    "this is similar in spirit to the parallel resampling algorithm of moser & tardos . in the latter algorithm ,",
    "one repeatedly selects a maximal independent set ( mis ) of bad - events which are currently true , and resamples them in parallel . in our setting ,",
    "bad - events which are `` independent '' in the lll sense ( that is , they are not connected via @xmath37 ) , may still influence each other ; a great deal of care must be taken to avoid these conflicts .",
    "section  [ alg - sec ] describes a variety of combinatorial problems to which our swapping algorithm can be applied , including latin transversals , strong chromatic number , and hypergraph packing .",
    "finally , we conclude in section  [ sec : conclusion ] with a discussion of future goals for the construction of a generalized lll algorithm .",
    "we will analyze the following _ swapping algorithm _ algorithm to find a satisfactory @xmath2 :    1 .   generate the permutations @xmath2 uniformly at random and independently .",
    "2 .   while there is some true bad - event : 1 .   choose some true bad - event @xmath7 arbitrarily .",
    "for each permutation that is involved in @xmath35 , we perform a _ swapping _ of all the relevant entries .",
    "( we will describe the swapping subroutine  swap \" shortly . )",
    "we refer to this step as a _ resampling _ of the bad - event @xmath35 .",
    "+ each permutation involved in @xmath35 is swapped independently , but if @xmath35 involves multiple entries from a single permutation , then all such entries are swapped _",
    "simultaneously_. for example , if @xmath35 consisted of triples @xmath71 , then we would perform @xmath72 and @xmath73 , where the  swap \" procedure is given next .    the swapping subroutine @xmath74 for a permutation @xmath75 \\rightarrow [ t]$ ] as follows :    repeat the following for @xmath76 :    * select @xmath77 uniformly at random among @xmath78 - \\{x_1 , \\dots , x_{i-1 } \\}$ ] . * swap entries @xmath79 and @xmath77 of @xmath6 .    note that at every stage of this algorithm all the @xmath3 are permutations , and if this algorithm terminates , then the @xmath3 must avoid all the bad - events .",
    "so our task will be to show that the algorithm terminates in polynomial time .",
    "we measure time in terms of a single iteration of the main loop of the swapping algorithm : each time we run one such iteration , we increment the time by one",
    ". we will use the notation @xmath80 to denote the value of permutation @xmath3 after time @xmath81 .",
    "the initial sampling of the permutation ( after step ( 1 ) ) generates @xmath82 .",
    "the swapping subroutine seems strange ; it would appear more natural to allow @xmath77 to be uniformly selected among @xmath78 $ ] .",
    "however , the swapping subroutine is nothing more than than the fisher - yates shuffle for generating uniformly - random permutations .",
    "if we allowed @xmath77 to be chosen from @xmath78 $ ] then the resulting permutation would be biased .",
    "the goal is to change @xmath3 in a minimal way to ensure that @xmath83 and @xmath84 are adequately randomized .",
    "there are alternative methods for generating random permutations , and many of these can replace the swapping subroutine without changing our analysis .",
    "we discuss a variety of such equivalencies in appendix  [ symmetry - sec ] ; these will be used in various parts of our proofs .",
    "we note that one class of algorithms that has a very different behavior is the commonly used method to generate random reals @xmath85 $ ] , and then form the permutation by sorting these reals . when encountering a bad - event , one would resample the affected reals @xmath86 . in our setting , where the bad - events are defined in terms of specific values of the permutation , this is not a good swapping method because a single swap can drastically change the permutation .",
    "when bad - events are defined in terms of the relative _ rankings _ of the permutation ( e.g. a bad event is @xmath87 ) , then this is a better method and can be analyzed in the framework of the ordinary moser - tardos algorithm .",
    "to analyze the swapping algorithm , following the moser - tardos approach @xcite , we introduce the concept of an execution log and a witness tree .",
    "the execution log consists of listing every resampled bad - event , in the order that they are resampled .",
    "we form a witness tree to justify the resampling at time @xmath88 .",
    "we start with the resampled bad - event @xmath35 corresponding to time @xmath88 , and create a single node in our tree labeled by this event .",
    "we move backward in time ; for each bad - event @xmath35 we encounter , we add it to the witness tree if @xmath19 for some event @xmath89 already in the tree : we choose such a @xmath89 that has the maximum depth in the current tree ( breaking ties arbitrarily ) , and make @xmath35 a child of this @xmath89 ( there could be many nodes labeled @xmath89 ) . if @xmath90 for all @xmath89 in the current tree , we ignore this @xmath35 and keep moving backward in time . to make this discussion simpler we say that the root of the tree is at the `` top '' and the deep layers of the tree are at the `` bottom '' .",
    "the top of the tree corresponds to later events , the bottom of the tree to the earliest events .    for the remainder of this section",
    ", the dependence on the `` justified '' bad - event at time @xmath88 at the root of the tree will be understood ; we will omit it from the notation .",
    "we will use the term `` witness tree '' in two closely - related senses in the following proof .",
    "first , when we run the swapping algorithm , we produce a witness tree @xmath91 ; this is a random variable .",
    "second , we might want to fix some labeled tree @xmath45 , and discuss hypothetically under what conditions it could be produced or what properties it has ; in this sense , @xmath45 is a specific object .",
    "we will always use the notation @xmath91 to denote the specific witness tree produced by running the swapping algorithm , corresponding to resampling time @xmath81 .",
    "we write @xmath92 as short - hand for @xmath91 where @xmath81 is understood from context ( or irrelevant ) .",
    "if @xmath45 is a witness tree , we say that @xmath45 _ appears _ iff @xmath93 for some @xmath94 .",
    "the critical lemma that allows us to analyze the behavior of this algorithm is the _ witness tree lemma _ :    [ witness - tree - lemma ] let @xmath45 be a witness tree , with nodes labeled @xmath95 .",
    "the probability that @xmath45 was produced as the witness tree corresponding any _ any _ resampling time @xmath96 , is at most @xmath97    note that the probability of the event @xmath35 within the space @xmath34 can be computed as follows : if @xmath35 contains @xmath98 elements from each of the permutations @xmath99 , ( and @xmath35 is not impossible ) then we have @xmath100    this lemma is superficially similar to the corresponding lemma in moser - tardos @xcite .",
    "however , the proof will be far more complex , and we will require many intermediate results first .",
    "the main complication is that when we encounter a bad - event involving @xmath44 , and we perform the random swap associated with it , then we could potentially be changing any entry of @xmath3 .",
    "by contrast , in the usual moser - tardos algorithm , when we resample a variable , all the changes are confined to that variable . however , as we will see , the witness tree will leave us with enough clues about which swap was actually performed that we will be able to narrow down the possible impact of the swap .    the analysis in the next sections can be very complicated .",
    "we have two recommendations to make these proofs easier .",
    "first , the basic idea behind how to form and analyze these trees comes from @xcite ; the reader should consult that paper for results and examples which we omit here .",
    "second , one can get most of the intuition behind these proofs by considering the situation in which there is a single permutation , and the bad - events all involve just a single element ; that is , every bad - event has the form @xmath101 . in this case , the witness subdags ( defined later ) are more or less equivalent to the witness tree .",
    "( the main point of the witness subdag concept is , in effect , to reduce bad - events to their individual elements . )",
    "when reading the following proofs , it is a good idea to keep this special case in mind . in several places",
    ", we will discuss how certain results simplify in that setting .",
    "the following proposition is the main reason the witness tree encodes sufficient information about the sequence of swaps :    [ change - prop ] suppose that at some time @xmath102 we have @xmath103 , and at some later time @xmath104 we have @xmath105",
    ". then there must have occurred at some intermediate time @xmath106 some bad - event including @xmath107 or @xmath108 .",
    "let @xmath109 $ ] denote the earliest time at which we had @xmath110 ; this must be due to encountering some bad - event including the elements @xmath111 ( and possibly other elements from other permutations ) .",
    "suppose that @xmath112 was first caused by swapping entry @xmath79 , which at that time had @xmath113 , with some @xmath114 .",
    "after this swap , we have @xmath115 and @xmath116 .",
    "evidently @xmath117 or @xmath118 . in the second case ,",
    "the bad event at time @xmath106 included @xmath119 as desired and we are done .",
    "so suppose @xmath120 and @xmath121 .",
    "so at the time of the swap , we had @xmath122 .",
    "the only earlier swaps in this resampling were with @xmath123 ; so at the beginning of time @xmath106 , we must have had @xmath124 for some @xmath125 .",
    "this implies that @xmath126 , so that the bad - event at time @xmath106 included @xmath127 as desired .    to explain some of the intuition behind lemma  [ witness - tree - lemma ]",
    ", we note that proposition  [ change - prop ] implies lemma  [ witness - tree - lemma ] for a _",
    "witness tree .",
    "suppose that @xmath45 is a singleton node labeled by @xmath35",
    ". then @xmath128 .",
    "suppose @xmath93 .",
    "we claim that @xmath35 must have been true of the initial configuration . for suppose that @xmath129 but in the initial configuration we have @xmath130 . at some later point in time",
    "@xmath131 , the event @xmath35 must become true . by proposition  [ change - prop ] , then there is some time @xmath132 at which we encounter a bad - event @xmath89 including @xmath28 or @xmath30 .",
    "this bad - event @xmath89 occurs earlier than @xmath35 , and @xmath133 .",
    "hence , we would have placed @xmath89 below @xmath35 in the witness tree @xmath91 .    in proving lemma  [ witness - tree - lemma ] , we will _ not _ need to analyze the interactions between the separate permutations , but rather we will be able to handle each permutation in a completely independent way . for a permutation @xmath3 , we define the _ witness subdag for permutation @xmath3 _ ; this is a relative of the witness tree , but which only includes the information for a single permutation at a time .    for a permutation @xmath3",
    ", a _ witness subdag for @xmath3 _ is defined to be a directed acyclic simple graph , whose nodes are labeled with pairs of the form @xmath134 . if a node @xmath135 is labeled by @xmath134 , we write @xmath136 .",
    "this graph must in addition satisfy the following properties :    1 .",
    "if any pair of nodes overlaps in a coordinate , that is , we have @xmath137 , then nodes @xmath138 must be comparable ( that is , either there is a path from @xmath135 to @xmath139 or vice - versa ) .",
    "every node of @xmath140 has in - degree at most two and out - degree at most two .",
    "we also may label the nodes with some auxiliary information , for example we will record that the nodes of a witness subdag correspond to bad - events or nodes in a witness tree @xmath45 .",
    "we will use the same terminology as for witness trees : vertices on the `` bottom '' are close to the source nodes of @xmath140 ( appearing earliest in time ) , and vertices on the `` top '' are close to the sink nodes of @xmath140 ( appear latest in time ) .",
    "the witness subdags that we will be interested in are derived from witness trees in the following manner .    for a witness tree @xmath45",
    ", we define the _ projection of @xmath45 onto permutation @xmath3 _ which we denote @xmath141 , as follows .",
    "suppose we have a node @xmath142 which is labeled by some bad - event @xmath143 .",
    "for each @xmath144 with @xmath145 , we create a corresponding node @xmath146 in the graph @xmath141 . we also include some auxiliary information indicating that these nodes came from bad event @xmath35 , and in particular that all such nodes are part of the same bad - event .",
    "the edges of @xmath141 are formed follows . for each node @xmath147 , labeled by @xmath134 and corresponding to @xmath142",
    ", we find the node @xmath148 ( if any ) which satisfies the following properties :    1 .",
    "the depth of @xmath149 is smaller than the depth of @xmath135 2 .",
    "@xmath149 is labeled by some bad - event @xmath89 which contains @xmath150 3 .   among all vertices satisfying ( p1 ) , ( p2 ) , the depth of @xmath149 is maximial    if this node @xmath148 exists , then it corresponds to a node @xmath151 labeled @xmath152 ; we construct an edge from @xmath139 to @xmath153 .",
    "note that , since the levels of the witness tree are independent under @xmath37 , there can be at most one such @xmath149 and at most one such @xmath153 .",
    "we similary define a node @xmath154 satisfying :    1 .",
    "the depth of @xmath154 is smaller than the depth of @xmath135 2 .",
    "@xmath154 is labeled by some bad - event @xmath89 which contains @xmath155 3 .   among all vertices satisfying ( p1 ) , ( p2 ) ,",
    "the depth of @xmath154 is maximial    if this node exists , we create an edge from @xmath139 to the corresponding @xmath156 labeled @xmath30 .    note that since edges in @xmath141 correspond to _ strictly _ smaller depth in @xmath45 , the graph @xmath157 is acyclic . also , note that it is possible that @xmath158 ; in this case we only add a single edge to @xmath141 .",
    "* expository remark : * in the special case when each bad - event contains a single element , the witness subdag is a  flattening \" of the tree structure .",
    "each node in the tree corresponds to a node in the witness subdag , and each node in the witness subdag points to the next highest occurrence of the domain and range variables .",
    "basically , the projection of @xmath45 onto @xmath159 tells us all of the swaps of @xmath3 that occur .",
    "it also gives us some of the temporal information about these swaps that would have been available from @xmath45 .",
    "if there is a path from @xmath135 to @xmath139 in @xmath141 , then we know that the swap corresponding to @xmath135 must come before the swap corresponding to @xmath139 .",
    "it is possible that there are a pair of nodes in @xmath141 which are incomparable , yet in @xmath45 there was enough information to deduce which event came first ( because the nodes would have been connected through some other permutation ) .",
    "so @xmath141 does discard some information from @xmath45 , but it turns out that we will not need this information .    to prove lemma  [ witness - tree - lemma ] , we will prove ( almost ) the following claim : let @xmath140 be a witness subdag for permutation @xmath3 ; suppose the nodes of @xmath140 are labeled with bad - events @xmath95 .",
    "then the probability that there is some @xmath160 such that @xmath161 , is at most @xmath162 where , for a bad - event @xmath35 we define @xmath163 in a similar manner to @xmath46 ; namely that if the bad - event @xmath35 contains @xmath164 elements from permutation @xmath159 , then we define @xmath165 .    unfortunately , proving this directly runs into technical complications regarding the order of conditioning .",
    "it is simpler to just sidestep these issues .",
    "however , the reader should bear in mind ( [ y1 ] ) as the _ informal _ motivation for the analysis in section  [ perm - conditions ] .",
    "in section  [ perm - conditions ] , we will fix a value @xmath167 , and we will describe conditions that @xmath168 must satisfy at various times @xmath88 during the execution of the swapping algorithm . _ in this section , we are only analyzing a single permutation @xmath167 . to simplify notation , the dependence on @xmath167",
    "will be hidden henceforth ; we will discuss simply @xmath169 , and so forth . _",
    "this analysis can be divided into three phases .    1 .",
    "we define the _ future - subgraph _ at time @xmath88 , denoted @xmath170 .",
    "this is a kind of graph which encodes necessary conditions on @xmath171 , in order for @xmath45 to appear , that is , for @xmath93 for some @xmath160 .",
    "importantly , these conditions , and @xmath170 itself , are independent of the precise value of @xmath81 .",
    "we define and describe some structural properties of these graphs . 2 .",
    "we analyze how a future - subgraph @xmath170 imposes conditions on the corresponding permutation @xmath171 , and how these conditions change over time .",
    "we compute the probability that the swapping satisfies these conditions .    we will prove ( 1 ) and ( 2 ) in section  [ perm - conditions ] . in section",
    "[ total - prob - sec ] we will put this together to prove ( 3 ) for all the permutations .",
    "suppose we have fixed a target graph @xmath140 , which could hypothetically have been produced as the projection of @xmath91 onto @xmath167 .",
    "we begin the execution of the swapping algorithm and see if , so far , it is still possible that @xmath172 , or if @xmath140 has been disqualified somehow .",
    "suppose we are at time @xmath88 of this process ; we will show that certain swaps must have already occurred at past times @xmath132 , and certain other swaps must occur at future times @xmath173 .",
    "we define the _ future - subgraph _ of @xmath140 at time @xmath88 , denoted @xmath170 , which tells us all the future swaps that must occur .",
    "[ future - defn ] we define the future - subgraphs @xmath170 inductively . initially @xmath174 .",
    "when we run the swapping algorithm , as we encounter a bad - event @xmath175 at time @xmath88 , we form @xmath176 from @xmath170 as follows :    1 .",
    "suppose that @xmath177 , and @xmath170 contains a source node @xmath135 labeled @xmath178",
    ". then @xmath179 .",
    "2 .   suppose that @xmath177 , and @xmath170 has a source labeled @xmath180 where @xmath181 or @xmath182 where @xmath183 .",
    "then , as will be shown in proposition  [ future - prop1 ] , we can immediately conclude @xmath140 is impossible ; we set @xmath184 , and we can abort the execution of the swapping algorithm .",
    "3 .   otherwise , we set @xmath185 .",
    "[ future - prop1 ] for any time @xmath96 , let @xmath186 denote the witness tree built for the event at time @xmath81 , but only using the execution log from time @xmath88 onwards . then if @xmath187 we also have @xmath188 .",
    "note that if @xmath189 , the latter condition is obviously impossible ; in this case , we are asserting that whenever @xmath189 , it is impossible to have @xmath187 .",
    "we omit @xmath81 from the notation , as usual .",
    "we prove this by induction on @xmath88 . when @xmath190 , this is obviously true as @xmath191 and @xmath174 .",
    "suppose we have @xmath192 ; at time @xmath88 we encounter a bad - event @xmath143 . by inductive hypothesis , @xmath193 .",
    "suppose first that @xmath194 does not contain any bad - events @xmath133 .",
    "then , by our rule for building the witness tree , we have @xmath195 .",
    "hence we have @xmath196 .",
    "when we project this graph onto permutation @xmath159 , there can not be any source node labeled @xmath197 with @xmath198 as such node would be labeled with @xmath133 .",
    "hence , according to our rules for updating @xmath170 , we have @xmath185 .",
    "so in this case we have @xmath195 and @xmath199 and @xmath193 ; it follows that @xmath200 as desired .",
    "next , suppose @xmath194 does contain @xmath133 .",
    "then bad - event @xmath35 will be added to @xmath201 , placed below any such @xmath89 .",
    "when we project @xmath201 , then for each @xmath144 with @xmath177 we add a node @xmath202 to @xmath203 .",
    "each such node is necessarily a source node ; if such a node @xmath202 had a predecessor @xmath204 , then the node @xmath205 would correspond to an event @xmath206 placed below @xmath35 .",
    "hence we see that @xmath203 is obtained from @xmath203 by adding source nodes @xmath178 for each @xmath207 .",
    "so @xmath208 plus the addition of source nodes for each @xmath209 .",
    "by inductive hypothesis , @xmath210 , so that @xmath196 plus source nodes for each @xmath209",
    ". now our rule for updating @xmath176 from @xmath170 is to remove all such source nodes , so it is clear that @xmath211 , as desired .",
    "note that in this proof , we assumed that @xmath192 , and we never encountered the case in which @xmath184 .",
    "this confirms our claim that whenever @xmath184 it is impossible to have @xmath192 .    by proposition  [ future - prop1 ] , the witness subdag @xmath140 and the future - subgraphs @xmath170 have a similar shape",
    "; they are all produced by projecting witness trees of ( possibly truncated ) execution logs .",
    "note that if @xmath212 for some tree @xmath45 , then for any bad - event @xmath213 , either @xmath35 is not represented in @xmath140 , or all the pairs of the form @xmath214 are represented in @xmath140 and are incomparable there",
    ".    the following structural decomposition of a witness subdag @xmath140 will be critical .    given a witness subdag @xmath140 , we define an _ alternating path _ in @xmath140 to be a simple path which alternately proceeds forward and backward along the directed edges of @xmath140 . for a vertex @xmath215 , the _ forward ( respectively backward ) path _ of @xmath135 in @xmath140 ,",
    "is the maximal alternating path which includes @xmath135 and all the forward ( respectively backward ) edges emanating from @xmath135 .",
    "because @xmath140 has in - degree and out - degree at most two , every vertex @xmath135 has a unique forward and backward path ( up to reflection ) ; this justifies our reference to  the \" forward and backward path .",
    "these paths may be even - length cycles .    note that if @xmath135 is a source node , then its backward path contains just @xmath135 itself .",
    "this is an important type of alternating path which should always be taken into account in our definitions .",
    "one type of alternating path , which is referred to as the _ w - configuration _ , plays a particularly important role .",
    "suppose @xmath216 has in - degree at most one , and the backward path contains an _ even _ number of edges , terminating at vertex @xmath217 .",
    "we refer to this alternating path as a _ w - configuration_. ( see figure  [ fig1 ] . )",
    "any w - configuration can be written ( in one of its two orientations ) as a path of vertices labeled @xmath218 here the vertices @xmath219 are at the `` base '' of the w - configuration .",
    "note here that we have written the path so that the @xmath220-coordinate changes , then the @xmath221-coordinate , then @xmath220 , and so on .",
    "when written this way , we refer to @xmath222 as the _ endpoints _ of the w - configuration .",
    "if @xmath136 is a source node , then it defines a w - configuration with endpoints @xmath134 .",
    "this should not be considered a triviality or degeneracy , rather it will be the most important type of w - configuration .",
    "( -200,70)@xmath223 ( -180,15)@xmath224 ( -135,-2)@xmath225 ( -70,70)@xmath226      at any @xmath88 , the future - subgraph @xmath170 gives certain necessary conditions on @xmath6 in order for some putative @xmath45 to appear .",
    "proposition  [ future - prop2 ] describes a certain set of conditions that plays a key role in the analysis .",
    "[ future - prop2 ] for any graph @xmath140 and integers @xmath131 , the following condition is necessary to have @xmath228 :    _ for every w - configuration in @xmath170 with endpoints @xmath222 , we must have @xmath229 _ , where @xmath171 denotes the value of the permutation at time @xmath88 .",
    "for example , if @xmath136 is a source node of @xmath170 , then @xmath230 .",
    "we prove this by induction on @xmath54 .",
    "the base case is @xmath231 ; in this case we have a source node @xmath232 .",
    "suppose @xmath233 . in order for @xmath91 to contain some bad - event containing @xmath234",
    ", we must at some point @xmath173 have @xmath235 ; let @xmath236 be the minimal such time . by proposition  [ change - prop ]",
    ", we must encounter a bad - event containing @xmath237 or @xmath238 at some intervening time @xmath239 .",
    "if this bad - event contains @xmath240 then necessarily @xmath241 contradicting minimality of @xmath236 .",
    "so there is a bad - event @xmath242 or @xmath243 earlier than the earliest occurrence of @xmath244 .",
    "this event @xmath245 or @xmath243 projects to a source node @xmath246 or @xmath247 in @xmath170 .",
    "but then @xmath134 can not also be a source node of @xmath170 .",
    "we now prove the induction step .",
    "suppose we have a w - configuration with base @xmath219 , and suppose the endpoints of this w - configuration are vertices @xmath138 labeled @xmath248 and @xmath249 respectively .    at some future time @xmath250",
    "we must encounter a bad - event @xmath35 involving some subset of the source nodes , say that @xmath35 includes @xmath251 for @xmath252 . as these were necessarily source nodes , we had @xmath253 .",
    "after the swaps , these source nodes are removed and so the updated @xmath254 has @xmath255 new w - configurations , whose length is all smaller than @xmath54 . by inductive hypothesis , the updated permutation @xmath256 must then satisfy @xmath257 .    by proposition  [ swap - invariant - prop2 ]",
    ", we may suppose without loss of generality that the resampling of the bad event first swaps @xmath258 in that order .",
    "let @xmath259 denote the result of these swaps ; there may be additional swaps to other elements of the permutation , but we must have @xmath260 for @xmath261 .    in this case , we see that evidently @xmath262 swapped with @xmath263 , then @xmath263 swapped with @xmath264 , and so on , until eventually @xmath265 was swapped with @xmath266 . at this point",
    ", we have @xmath267 . later swaps during time @xmath236 may swap @xmath114 with some other @xmath220 , where @xmath268 .",
    "thus , at time @xmath269 we either have @xmath270 or @xmath271 where @xmath268 .",
    "recall that @xmath272 ; thus either @xmath273 or @xmath274 .    in the latter case , @xmath275 .",
    "thus implies that , when we encounter the bad - event @xmath35 at time @xmath236 , there is a source node labeled @xmath276 .",
    "this node @xmath277 would also be a node in the graph @xmath170 ; thus @xmath135 has two in - neighbors in @xmath170 labeled @xmath277 and @xmath278 , which contradicts that it is part of a w - configuration of @xmath170 .",
    "thus , we conclude that @xmath273 .",
    "this implies that we must have @xmath279 ; that is , that @xmath280 .",
    "this in turn implies that @xmath229 . for , by proposition",
    "[ change - prop ] , otherwise we would have encountered a bad - event involving @xmath281 or @xmath282 ; these would imply an additional in - neighbor of either @xmath135 or @xmath139 respectively , which contradicts that it is part of a w - configuration of @xmath170 .",
    "proposition  [ future - prop2 ] can be viewed equally as a definition :    we refer to the conditions implied by proposition  [ future - prop2 ] as the _ active conditions _ of the graph @xmath170 .",
    "more formally , we define @xmath283 we also define @xmath284 to be the cardinality of @xmath285 , that is , the number of active conditions of permutation @xmath3 at time @xmath88 .",
    "( the subscript @xmath159 may be omitted in context , as usual . )    when we remove source nodes @xmath286 from @xmath170 , the new active conditions of @xmath176 are related to @xmath287 in a particular way .",
    "[ active - change - lemma ] suppose @xmath140 is a future - subgraph with source nodes @xmath288 .",
    "let @xmath289 denote the graph obtained from @xmath140 by removing these source nodes .",
    "then there is a set @xmath290 with the following properties :    1 .",
    "there is an _ injective _ function @xmath291 , with the property that @xmath292 for all @xmath293 2 .",
    "@xmath294    * expository remark : * we have recommended bearing in mind the special case when each bad - event consists of a single element . in this case , we would have @xmath295 ; and the stated theorem would be that either @xmath296 ; or we have @xmath297 and @xmath298 .    intuitively , we are saying that every node @xmath232 we are removing is either explicitly constrained in an  independent way \" by some new condition in the graph @xmath299 ( corresponding to @xmath300 ) , or it is almost totally unconstrained .",
    "we will never have the bad situation in which a node @xmath134 is constrained , but in some implicit way depending on the previous swaps .",
    "let @xmath301 denote the graph @xmath302 .",
    "we will recursively build up set @xmath303 and functions @xmath304 , where @xmath305 , and which satisfy the given conditions up to stage @xmath144 .    now , suppose we remove the source node @xmath306 from @xmath307 .",
    "observe that @xmath308 , but ( unless there is some other vertex with the same label in @xmath140 ) , @xmath309 .",
    "thus , the most obvious change when we remove @xmath306 is that we destroy the active condition @xmath202 .",
    "this may add or subtract other active conditions as well .",
    "we will need to update @xmath310 .",
    "most importantly , @xmath311 may have mapped @xmath312 for @xmath313 , to an active condition of @xmath307 which is destroyed when @xmath306 is removed . in this case",
    ", we must re - map this to a new active condition .",
    "note that we can not have @xmath314 for @xmath313 , as @xmath315 and @xmath316 .",
    "there are now a variety of cases depending on the forward - path of @xmath306 in @xmath307 .    1 .",
    "this forward path consists of a cycle , or the forward path terminates on both sides in forward - edges .",
    "this is the easiest case",
    ". then no more active conditions of @xmath307 are created or destroyed .",
    "we update @xmath317 .",
    "one active condition is removed , in net , from @xmath307 ; hence @xmath318 .",
    "this forward path contains a forward edge on one side and a backward edge on the other .",
    "for example , suppose the path has the form @xmath319 , where the vertices @xmath320 are at the base , and the node @xmath321 has out - degree 1 , and the node @xmath322 has in - degree 1 .",
    "suppose that @xmath323 for some @xmath324 .",
    "( see figure  [ fig2 ] . ) in this case , we do not destroy any w - configurations , but we create a new w - configuration with endpoints @xmath325 .",
    "+ we now update @xmath326 .",
    "we define @xmath327 plus we map @xmath202 to the new active condition @xmath328 . in net , no active conditions were added or removed , and @xmath329 . + ( -185,15)@xmath330 ( -170,70)@xmath331 ( -105,70)@xmath332 3 .",
    "this forward path was a w - configuration @xmath333 with the pairs @xmath320 on the base , and we had @xmath323 .",
    "this is the most complicated situation ; in this case , we destroy the original w - configuration with endpoints @xmath334 but create two new w - configurations with endpoints @xmath335 and @xmath336 .",
    "we update @xmath326 .",
    "we will set @xmath327 , except for a few small changes as follows .",
    "+ now , suppose @xmath337 for some @xmath338 ; so either @xmath339 or @xmath340 .",
    "if it is the former , we set @xmath341 . if it is the latter , we set @xmath342 . if @xmath343 then we simply set @xmath344 . + in any case , @xmath345 is updated appropriately , and in the net no active conditions are added or removed , so we have @xmath329 .",
    "in the previous sections , we determined necessary conditions for the permutations @xmath171 , depending on the graphs @xmath170 . in this section",
    ", we finish by computing the probability that the swapping subroutine causes the permutations to , in fact , satisfy all such conditions .",
    "proposition  [ exchange - prop2a ] states the key randomness condition satisfied by the swapping subroutine .",
    "the basic intuition behind this is as follows : suppose @xmath346 \\rightarrow [ n]$ ] is a fixed permutation with @xmath244 , and we call @xmath347 .",
    "then @xmath348 has a uniform distribution over @xmath349 $ ] .",
    "similarly , @xmath350 has a uniform distribution over @xmath349 $ ] .",
    "however , the joint distribution is _ not _ uniform  there is essentially only one degree of freedom for the two values . in general , any subset of the variables @xmath351 will have the uniform distribution , _ as long",
    "as the subset does not simultaneously contain @xmath352 for some @xmath353 $ ] . _",
    "[ exchange - prop2a ] suppose @xmath354 are non - negative integers obeying the following constraints :    1 .",
    "@xmath355 2 .",
    "@xmath356    let @xmath6 be a fixed permutation of @xmath349 $ ] , and let @xmath357 $ ] be distinct , and let @xmath358 for @xmath76 .",
    "let @xmath359 be a given list with the following properties :    1 .",
    "all @xmath360 are distinct ; all @xmath361 are distinct 2 .",
    "for @xmath362 we have @xmath363 or @xmath364 .",
    "let @xmath365 .",
    "then the probability that @xmath259 satisfies all the constraints @xmath225 is at most @xmath366    * expository remark : * consider the special case when each bad - event contains a single element . in that case",
    ", we have @xmath295 .",
    "there are two possibilities for @xmath54 ; either @xmath231 in which case this probability on the right is @xmath367 ( i.e. the probability that @xmath368 ) ; or @xmath57 in which case this probability is @xmath369 ( i.e. the probability that @xmath370 ) .",
    "define the function @xmath371 .",
    "we will prove this proposition by induction on @xmath372 .",
    "there are a few cases we handle separately :    1 .",
    "suppose @xmath373 and @xmath374 .",
    "then , in order to satisfy the desired conditions , we must swap @xmath375 to @xmath376 ; this occurs with probability @xmath369 .",
    "the subsequent @xmath377 swaps starting with the permutation @xmath378 must now satisfy the conditions @xmath379 .",
    "we claim that we have @xmath380 for @xmath381 . if @xmath382 , this is immediately clear",
    ". otherwise , suppose @xmath383 .",
    "if @xmath384 , then we again still have @xmath385 . if @xmath386 , then this implies that @xmath387 , which contradicts that the @xmath388 .",
    "+ so we apply the induction hypothesis to @xmath389 ; in the induction , we subtract one from @xmath390 .",
    "this gives @xmath391 as desired .",
    "2 .   similarly , suppose @xmath373 and suppose @xmath392 . by proposition  [ exchange - sym - prop ] , we would obtain the same distribution if we executed @xmath393 .",
    "hence we have @xmath394 now , the right - hand side has swapped the roles of @xmath395 ; in particular , it now falls under the previous case ( 1 ) already proved , and so the right - hand side is at most @xmath396 as desired .",
    "3 .   suppose @xmath231 and that there is some @xmath353 , j \\in [ q]$ ] with @xmath397 .",
    "by proposition  [ swap - invariant - prop2 ] , we can assume without loss of generality that @xmath398 .",
    "so , in this case , we are really in the case with @xmath57 .",
    "this is covered by case ( 1 ) or case ( 2 ) , which have already shown .",
    "thus , we have that @xmath399 here , we are using our hypothesis that @xmath400 .",
    "4 .   finally ,",
    "suppose @xmath231 and @xmath401 are distinct from @xmath402 and @xmath403 are distinct from @xmath404 . in this case , a necessary ( although not sufficient ) condition to have @xmath405 is that there are some @xmath406 , distinct from each other and distinct from @xmath407 , with the property that @xmath408 for @xmath409 . by the union bound , we have @xmath410 for each individual summand",
    ", we apply the induction hypothesis ; the summand has probability at most @xmath411 .",
    "as there are @xmath412 possible values for @xmath406 , the total probability is at most @xmath413 .",
    "we apply proposition  [ exchange - prop2a ] to upper - bound the probability that the swapping algorithm successfully swaps when it encounters a bad event .",
    "[ exchange - prop2 ] suppose we encounter a bad - event @xmath35 at time @xmath88 containing elements @xmath414 , @xmath415 , @xmath416 from permutation @xmath159 ( and perhaps other elements from other permutations ) .",
    "then the probability that @xmath417 satisfies all the active conditions of its future - subgraph , conditional on all past events and all other swappings at time @xmath88 , is at most @xmath418    recall that we have defined @xmath419 to be the number of active conditions in the future - subgraph corresponding to permutation @xmath3 at time @xmath88 , and we have defined @xmath420    * expository remark : * consider the special case when each bad - event consists of a single element . in this case , we would have @xmath421 .",
    "the stated theorem is now : either @xmath422 , in which case the probability that @xmath6 satisfies its swapping condition is @xmath369 ; or @xmath423 ; in which case the probability that @xmath6 satisfies its swapping condition is @xmath424 .",
    "let @xmath299 denote the future - subgraph @xmath425 after removing the source nodes corresponding to the pairs @xmath426 . using the notation of lemma  [ active - change - lemma ]",
    ", we set @xmath427 and @xmath428 .",
    "we have @xmath429 .    for each @xmath293",
    ", we have @xmath430 , and there is an injective function @xmath431 and @xmath432 . by proposition  [ swap - invariant - prop2 ] , we can assume without loss of generality @xmath433 and @xmath434 . in order to satisfy the active conditions on @xmath425 ,",
    "the swapping must cause @xmath435 for @xmath436 .    by lemma  [ active - change - lemma ]",
    ", we have @xmath437 .",
    "note that @xmath438 .",
    "so all the conditions of proposition  [ exchange - prop2a ] are satisfied .",
    "thus this probability is at most @xmath439 .",
    "we have finally all the pieces necessary to prove lemma  [ witness - tree - lemma ] .",
    "let @xmath45 be a witness tree , with nodes labeled @xmath95 .",
    "the probability that @xmath45 appears is at most @xmath440    the swapping algorithm , as we have defined it , begins by selecting the permutations uniformly at random .",
    "one may also consider fixing the permutations to some arbitrary ( not random ) value , and allowing the swapping algorithm to execute from that point onward .",
    "we refer to this as _ starting at an arbitrary state of the swapping algorithm .",
    "_ we will prove the following by induction on @xmath441 : the probability , starting at an arbitrary state of the swapping algorithm , that the subsequent swaps would produce the subtree @xmath441 , is at most @xmath442    when @xmath443 , the rhs of ( [ wt1 ] ) is equal to one so this is vacuously true .    to show the induction step , note that in order for @xmath441 to be produced as the witness tree for some @xmath94 , it must be that some @xmath35 is resampled , where some node @xmath444 is labeled by @xmath35 .",
    "suppose we condition on that @xmath135 is the first such node , resampled at time @xmath88 .",
    "a necessary condition to have @xmath445 for some @xmath446 is that @xmath447 satisfies all the active conditions on @xmath176 . by proposition  [ exchange - prop2 ] ,",
    "the probability that @xmath447 satisfies these conditions is at most @xmath448 .",
    "next , if this event occurs , then subsequent resamplings must cause @xmath449 . to bound the probability of this , we use the induction hypothesis . note",
    "that the induction hypothesis gives a bound conditional on _ any _ starting configuration of the swapping algorithm , so we may multiply these probabilities . thus @xmath450 completing the induction argument .",
    "we now consider the necessary conditions to produce the _ entire _ witness tree @xmath45 , and not just fragments of it .",
    "first , the _ original permutations _ @xmath451 must satisfy the active conditions of the respective witness subdags @xmath141 . for each permutation",
    "@xmath159 , this occurs with probability @xmath452 .",
    "next , the subsequent sampling must be compatible with @xmath45 ; by ( [ wt1 ] ) this has probability at most @xmath453 . again",
    ", note that the bound in ( [ wt1 ] ) is conditional on any starting position of the swapping algorithm , hence we may multiply these probabilities .",
    "in total we have @xmath454    we note one counter - intuitive aspect to this proof . the natural way of proving this lemma would be to identify , for each bad - event @xmath213 , some necessary event occurring with probability at most @xmath46 .",
    "this is the general strategy in moser - tardos @xcite and related constructive lll variants such as @xcite , @xcite , @xcite .",
    "this is _ not _ the proof we employ here ; there is an additional factor of @xmath47 which is present for the original permutation and is gradually `` discharged '' as active conditions disappear from the future - subgraphs .",
    "now that we have proved the witness tree lemma , the remainder of the analysis is essentially the same as for the moser - tardos algorithm @xcite . using arguments and proofs from @xcite with our key lemma",
    ", we can now easily show our key theorem :    [ thm : constr - lll ] suppose there is some assignment of weights @xmath455 which satisfies , for every @xmath7 the condition @xmath456 then the swapping algorithm terminates with probability one .",
    "the expected number of iterations in which we resample @xmath35 is at most @xmath457 .    in the `` symmetric '' case ,",
    "this gives us the well - known lll criterion :    suppose each bad - event @xmath7 has probability at most @xmath458 , and is dependent with at most @xmath459 bad - events .",
    "then if @xmath460 , the swapping algorithm terminates with probability one ; the expected number of resamplings of each bad - event is @xmath461 .    some extensions of the lll , such as the moser - tardos distribution bounds shown in @xcite , the observation of pegden regarding independent sets in the dependency graph @xcite , or the partial - resampling of @xcite ,",
    "follow almost immediately here .",
    "there are a few extensions which require slightly more discussion :      as in @xcite , it is possible to slightly restrict the notion of dependence .",
    "two bad - events which share the same valuation of a variable are not forced to be dependent .",
    "we can re - define the relation @xmath37 on bad - events as follows : for @xmath462 , we have @xmath19 iff    1 .   @xmath463 , _ or _ 2 .   there is some @xmath464 with either @xmath465 or @xmath466 .",
    "in particular , bad - events which share the same triple @xmath29 , are _ not _ caused to be dependent .",
    "proving that the swapping algorithm still works in this setting requires only a slight change in our definition of @xmath141 .",
    "now , the tree @xmath45 may have multiple copies of any given triple @xmath29 on a single level .",
    "when this occurs , we create the corresponding nodes @xmath467 ; edges are added between such nodes in an arbitrary ( but consistent ) way .",
    "the remainder of the proof remains as before .",
    "the analysis of @xcite considers a slightly more general setting for the lll , in which we select random _ injections _",
    "\\rightarrow [ n_k]$ ] , where @xmath469 .",
    "in fact , our swapping algorithm can be extended to this case .",
    "we simply define a permutation @xmath3 on @xmath4 $ ] , where the entries @xmath470 are `` dummies '' which do not participate in any bad - events .",
    "the lll criterion for the extended permutation @xmath3 is exactly the same as the corresponding lll criterion for the injection @xmath471 . because all of the dummy entries have the same behavior ,",
    "it is not necessary for the swapping algorithm to keep track of the dummy entries exactly ; they are needed only for the analysis .",
    "achlioptas & iliopoulos @xcite and harvey & vondrk @xcite gave generic frameworks for analyzing variants of the moser - tardos algorithm , applicable to different types of combinatorial configurations .",
    "these frameworks can include vertex - colorings , permutations , hamiltonian cycles of graphs , spanning trees , matchings , and other settings .",
    "for the case of permutations , both of these frameworks give a version of the swapping algorithm and show that it terminates under the same conditions as we do , which in turn are the same conditions as the lll ( theorem  [ thm : lopsided ] ) .",
    "the key difference between our approach and @xcite is that they enumerate the entire history of all resamplings to the permutations . in contrast , our proof is based on the witness tree lemma ; this is a much more succinct structure that ignores most of the resamplings , and only enumerates the few resamplings that are necessary to justify a single item in the execution log .",
    "their proofs are much simpler than ours ; a major part of the complexity of our proof lies in the need to argue that the bad - events which were ignored by the witness tree do not affect the probabilities .",
    "( the ignored bad - events _ do _ interact with the variables we need to track for the witness tree , but do so in a `` neutral '' way . )    _ if our only goal is to prove that the swapping algorithm terminates in polynomial time , then the other two frameworks give a better and simpler approach .",
    "_ however , the witness tree lemma allows much more precise estimates for many types of events .",
    "the main reason for this precision is the following : suppose we want to show that some event @xmath472 has a low probability of occurring during or after the execution of the swapping algorithm . the proof strategy of moser & tardos is to take a union - bound over all witness trees that correspond to this event . in this case , we are able to show a probability bound which is proportional to the total weight of all such witness trees .",
    "this can be a relatively small number as only the witness trees connected to @xmath472 are relevant .",
    "our analysis , which is also based on witness trees , is able to show similar types of bounds .",
    "however , the analysis of achlioptas & iliopoulos and harvey & vondrk is not based on witness trees , but the much larger set of _ full execution logs_. the number of possible execution logs can be exponentially larger than the number of witness trees .",
    "it is very inefficient to take a union bound over all such logs .",
    "hence , achlioptas & iliopoulos and harvey & vondrk give bounds which are exponentially weaker ( in a certain technical sense ) than the ones we provide .",
    "many properties of the swapping algorithm depend on the fine degree of control provided by the witness tree lemma , and it seems difficult to obtain them from the alternate llll approaches .",
    "we list a few of these properties here .",
    "* the lll criterion without slack .",
    "* as a simple example of the problems caused by taking a union bound over execution logs , suppose that we satisfy the lll criterion without slack , say @xmath473 ; here , as usual , @xmath458 and @xmath459 are bounds respectively on the probability of any bad event and the degree of any bad event in the dependency graph . in this case",
    ", we show that the expected time for our swapping algorithm to terminate is @xmath474 .",
    "in contrast , in achlioptas & iliopoulous or harvey & vondrk , they require satisfying the lll criterion with slack @xmath475 , and achieve a termination time of @xmath476 . they require this slack term in order to damp the exponential growth in the number of execution logs .",
    "( harvey & vondrk show that if the symmetric lll criterion is satisfied without slack , then the shearer criterion @xcite is satisfied with slack @xmath477 .",
    "thus , they would achieve a running time of @xmath478 without slack . )",
    "* arbitrary choice of which bad - event to resample . * the swapping algorithm as we have stated it is actually under - determined , in that the choice of which bad - event to resample is arbitrary . in contrast , in both achlioptas & iliopoulos and harvey & vondrk , there is a fixed priority on the bad - events .",
    "( the work of @xcite has shown that this restriction can be removed in certain special cases of the achlioptas & iliopoulous setting , including for random permutations and matchings . )",
    "this freedom can be quite useful .",
    "for example , in section  [ sec : parallel ] we consider a parallel implementation of our swapping algorithm .",
    "we will select which bad - events to resample in a quite complicated and randomized way .",
    "however , the correctness of the parallel algorithm will follow from the fact that it simulates some serial implementation of the swapping algorithm .",
    "* the moser - tardos distribution . * the witness tree lemma allows us to analyze the so - called `` moser - tardos ( mt ) distribution , '' first discussed by @xcite . the lll and its algorithms ensure that bad - events @xmath5 can not possibly occur . in other words , we know that the configuration produced by the lll has the property that no @xmath7 is true . in many applications of the lll , we may wish to know more about such configurations , other than they exist .",
    "there are a variety of reasons we might want this ; we give two examples for the ordinary , variable - based lll .",
    "suppose that we have some weights for the values of our variables , and we define the objective function on a solution @xmath479 ; in this case , if we are able to estimate the probability that a variable @xmath480 takes on value @xmath481 in the _ output _ of the lll ( or moser - tardos algorithm ) , then we may be able to show that configurations with a good objective function exist .",
    "a second example is when the number of bad - events becomes too large , perhaps exponentially large . in this case , the moser - tardos algorithm can not test them all .",
    "however , we may still be able to ignore a subset of the bad events , and argue that the probability that they are true at the end of the moser - tardos algorithm is small even though they were never checked .",
    "the witness tree lemma gives us an extremely powerful result concerning this mt distribution , which carries over to the swapping algorithm .",
    "let @xmath482 .",
    "then the probability that @xmath472 is true in the output of the swapping algorithm , is at most @xmath483 .",
    "see @xcite for the proof of this for the ordinary mt algorithm ; the extension to the swapping algorithm is straightforward .    * bounds on the depth of the resampling process .",
    "* one key requirement for parallel variants of the moser - tardos algorithm appears to be that the resampling process has logarithmic depth .",
    "this is equivalent to showing that there are no deep witness trees .",
    "this follows easily from the witness tree lemma , along the same lines as in the original paper of moser & tardos , but appears to be very difficult in the other llll frameworks .",
    "* partial resampling . * in @xcite , a partial resampling variant of the moser - tardos algorithm was developed . in this variant ,",
    "one only resamples a small , random subset of the variables ( or , in our case , permutation elements ) which determine a bad - event . to analyze this variant",
    ", @xcite developed an alternate type of witness tree , which only records the variables which were actually resampled .",
    "ignoring the other variables can drastically prunes the space of witness trees . again",
    ", this does not seem to be possible in other llll frameworks in which the _ full _ execution log must be recorded .",
    "we will see an example of this in theorem  [ szabo - thm ] ; we do not know of any way to show results such as theorem  [ szabo - thm ] using the frameworks of either achlioptas & iliopoulos or harvey & vondrk .",
    "the moser - tardos resampling algorithm for the ordinary lll can be transformed into an rnc algorithm by allowing a slight slack in the lll s sufficient condition @xcite .",
    "the basic idea is that in every round , we select a _",
    "maximal independent set _ of bad - events to resample . using",
    "the known distributed / parallel algorithms for mis , this can be done in rnc ; the number of resampling rounds is then shown to be logarithmic whp (  with high probability \" ) , in @xcite .    in this section , we will describe a parallel algorithm for the swapping algorithm , which runs along the same lines .",
    "however , everything is more complicated than in the case of the ordinary lll . in the moser - tardos algorithm ,",
    "events which are not connected to each other can not affect each other in any way .",
    "for the permutation lll , such events can interfere with each other , but do so rarely .",
    "consider the following example .",
    "suppose that at some point we have two active bad - events ,  @xmath484 \" and  @xmath485 \" respectively , and so we decide to resample them simultaneously ( since they are not connected to each other , and hence constitute an independent set ) .",
    "when we are resampling the bad - event @xmath484 , we may swap @xmath58 with @xmath486 ; in this case , we are automatically fixing the second bad - event as well .",
    "the sequential algorithm , in this case , would only swap a single element .",
    "the parallel algorithm should likewise _ not _ perform a second swap for the second bad - event , or else it would be over - sampling .",
    "avoiding this type of conflict is quite tricky .    let @xmath487 ; since the output of the algorithm will be the contents of the permutations @xmath488 , this algorithm should be measured in terms of @xmath489 , and we must show that this algorithm runs in @xmath490 time .",
    "we will make the following assumptions in this section .",
    "first , we assume that @xmath491 , the total number of potential bad - events , is polynomial in @xmath489 .",
    "this assumption can be relaxed if we have the proper kind of `` separation oracle '' for @xmath5 .",
    "next , we assume that every element @xmath7 has size @xmath492 ; this holds in many cases .",
    "we describe the following parallel swapping algorithm :    1 .   in parallel , generate the permutations @xmath2 uniformly at random .",
    "we proceed through a series of _ rounds _ while there is some true bad - event . in round @xmath144 ( @xmath493 )",
    "do the following : 1 .",
    "let @xmath494 denote the set of bad - events which are currently true at the beginning of round @xmath144 .",
    "we will attempt to fix the bad - events in @xmath495 through a series of _ sub - rounds_. this may introduce new bad - events , but we will not fix any newly created bad - events until round @xmath496 . +",
    "we repeat the following for @xmath497 as long as @xmath498 : 1 .   let @xmath499 be a maximal independent set ( mis ) of bad - events in @xmath500 .",
    "2 .   for each true bad - event @xmath501 , choose the swaps corresponding to @xmath35 .",
    "namely , if we have some bad - event @xmath35 involving triples @xmath175 , then we select each @xmath502 $ ] , which is the element to be swapped with @xmath503 according to procedure swap . _",
    "do not perform the indicated swaps at this time though ! _",
    "we refer to @xmath504 as the swap - sources of @xmath35 and the @xmath505 , @xmath415 , @xmath506 as the swap - mates of @xmath35 .",
    "3 .   select a random ordering @xmath507 of the elements of @xmath499 . consider the graph @xmath508",
    "whose vertices correspond to elements of @xmath499 : add an edge connecting @xmath35 with @xmath89 if @xmath509 _ and _ one of the swap - mates of @xmath35 is a swap - source of @xmath89 .",
    "generate @xmath510 as the _ lexicographically - first mis _ ( lfmis ) of the resulting graph @xmath508 , with respect to the vertex - ordering @xmath507 .",
    "4 .   for each permutation @xmath3 , enumerate all the transpositions @xmath511 corresponding to elements of @xmath512 , arranged in order of @xmath507 .",
    "say these transpositions are , in order @xmath513 , where @xmath514 .",
    "compute , in parallel for all @xmath3 , the composition @xmath515 .",
    "update @xmath516 from @xmath500 by removing all elements which are either no longer true for the current permutation , _ or _ are connected via @xmath37 to some element of @xmath512 .",
    "most of the steps of this algorithm can be implemented using standard parallel algorithms .",
    "for example , step ( 1 ) can be performed simply by having each element of @xmath4 $ ] choose a random real and then executing a parallel sort .",
    "the independent set @xmath499 can be found in time in polylogarithmic time using @xcite .",
    "the difficult step to parallelize is in selecting the lfmis @xmath512 . in general ,",
    "the problem of finding the lfmis is p - complete @xcite , hence we do not expect a generic parallel algorithm for this .",
    "however , what saves us it that the ordering @xmath507 and the graph @xmath508 are constructed in a highly random fashion .",
    "this allows us to use the following greedy algorithm to construct @xmath512 , the lfmis of @xmath508 :    1 .",
    "let @xmath517 be the directed graph obtained by orienting all edges of @xmath508 in the direction of @xmath507 .",
    "repeat the following for @xmath518 : 1 .",
    "if @xmath519 terminate .",
    "find all source nodes of @xmath520 .",
    "add these to @xmath512 .",
    "3 .   construct @xmath521 by removing all source nodes and all successors of source nodes from @xmath522 .",
    "the output of this algorithm is the lfmis @xmath512 .",
    "each step can be implemented in parallel time @xmath461 .",
    "the number of iterations of this algorithm is the length of the longest directed path in @xmath523 .",
    "so it suffices it show that , whp , all directed paths in @xmath523 have length at most polylogarithmic in @xmath489 .",
    "let @xmath524 be an an arbitrary independent set of true bad - events , and suppose all elements of @xmath5 have size @xmath525 .",
    "let @xmath526 be the graph constructed in step ( 6 ) of the parallel swapping algorithm .",
    "then whp , every directed path in @xmath140 has length @xmath527 .",
    "one of the main ideas below is to show that for the _ typical _ @xmath528 , where @xmath529 , the probability that @xmath530 form a directed path is small .",
    "suppose we select @xmath528 uniformly at random without replacement .",
    "let us analyze how these could form a directed path in @xmath140 .",
    "( we may assume @xmath531 or otherwise the result holds trivially . )",
    "first , it must be the case that @xmath532 .",
    "this occurs with probability @xmath533 .",
    "next , it must be that the swap - mates of @xmath534 overlap the swap - sources of @xmath535 , for @xmath536 .",
    "now , @xmath534 has @xmath537 swap - mates ; each such swap - mate can overlap with at most one element of @xmath538 , since @xmath538 is an independent set .",
    "conditional on having chosen @xmath95 , there are a remaining @xmath539 choices for @xmath535 .",
    "this gives that the probability of having @xmath534 with an edge to @xmath535 , conditional on the previous events , is at most @xmath540 .",
    "( the fact that swap - mates are chosen randomly does not give too much of an advantage here . )    putting this all together , the total probability that there is a directed path on @xmath530 is @xmath541    since the above was for a random @xmath530 , the probability that there is _ some _ such path ( of length @xmath542 ) is at most @xmath543 since @xmath529 .",
    "so far , we have shown that each sub - round of the parallel swapping algorithm can be executed in parallel time @xmath490 .",
    "next , we show that whp that number of sub - rounds corresponding to any round is bounded by @xmath490 .",
    "suppose @xmath544 and all elements @xmath7 have size @xmath545 . then whp , we have @xmath546 for some @xmath547",
    ".    we will first show the following : let @xmath548 , where @xmath538 is an arbitrary independent set of @xmath5 .",
    "then with probability at least @xmath549 we have @xmath550 as well , where @xmath551 is the lfmis associated with @xmath538 .",
    "observe that if there is no @xmath552 such that @xmath553 and such that a swap - mate of @xmath89 overlaps with a swap - source of @xmath35 , then @xmath550 ( this is not a necessary condition ) .",
    "we will analyze the ordering @xmath554 using the standard trick , in which each element @xmath548 chooses a rank @xmath555 $ ] , independently and identically .",
    "the ordering @xmath554 is then formed by sorting in increasing ordering of @xmath556 . in this way",
    ", we are able to avoid the dependencies induced by the rankings . for the moment , let us suppose that the rank @xmath557 is _ fixed _ at some real value @xmath558 .",
    "we will then count how many @xmath552 satisfy @xmath559 and a swap - mate of @xmath89 overlaps a swap - source of @xmath35 .",
    "so , let us consider some swap - source @xmath54 of @xmath35 in permutation @xmath159 , and consider some @xmath560 which has @xmath561 other elements in permutation @xmath159 .",
    "for @xmath562 , there are @xmath563 possible choices for the @xmath564 swap - mate from @xmath565 , and hence the total expected number of swap - mates of @xmath89 which overlap @xmath54 is at most @xmath566 & \\leq \\sum_{l=1}^{r'_j } \\frac{1}{n_k - l + 1 } \\\\ & \\leq \\int_{l=1}^{r'_j+1 } \\frac{1}{n_k - l + 1 } dl \\\\ & = \\ln ( \\frac{n_k}{n_k - r'_j})\\end{aligned}\\ ] ]    next , sum over all @xmath560 . observe that since @xmath538 is an independent set , we must have @xmath567 .",
    "thus , @xmath568 & \\leq \\sum_j \\ln(\\frac{n_k}{n_k - r'_j } ) \\\\   & \\leq \\ln(\\frac{n_k}{n_k-\\sum_j r'_j } ) \\qquad \\text{by concavity } \\\\   & \\leq \\ln n_k \\leq \\ln n \\\\\\end{aligned}\\ ] ]",
    "thus , summing over all swap - sources of @xmath35 , the total probability that there is some @xmath89 with @xmath569 and for which a swap - mate overlaps a swap - source of @xmath35 , is at most @xmath570 . by markov s inequality , we have @xmath571    integrating over @xmath558 , we have that @xmath572 with probability at least @xmath573    now , using this fact , we show that @xmath500 is decreasing quickly in size . for",
    ", suppose @xmath574 .",
    "so @xmath19 for some @xmath575 , as @xmath499 is a maximal independent set ( possibly @xmath463 ) .",
    "we will remove @xmath35 from @xmath516 if @xmath576 , which occurs with probability at least @xmath549 . as @xmath35 was an arbitrary element of @xmath500",
    ", this shows that @xmath577 \\leq ( 1 - \\frac{1}{2 m \\ln n } ) |\\mathcal v_{i , j}|$ ] .    for @xmath578 , this implies that @xmath579 & \\leq   ( 1 - \\frac{1}{2 m \\ln n})^{\\omega(m \\log^2 n ) } |\\mathcal v_{i,1}| \\leq n^{-\\omega(1)}\\end{aligned}\\ ] ]    this in turn implies that @xmath546 with high probability , for @xmath580 .",
    "to finish the proof , we must show that the number of rounds is itself bounded whp .",
    "we begin by showing that witness tree lemma remains valid in the parallel setting .",
    "when we execute this parallel swapping algorithm , we may generate an `` execution log '' according to the following rule : suppose that we resample @xmath35 in round @xmath581 and @xmath89 in round @xmath582",
    ". then we place @xmath35 before @xmath89 iff :    1 .",
    "@xmath583 ; or 2 .",
    "@xmath584 and @xmath585 ; or 3 .",
    "@xmath584 and @xmath586 and @xmath587    that is , we order the resampled bad - events lexicographically by round , sub - round , and then rank @xmath554 .",
    "given such an execution log , we may also generate witness trees in the same manner as the sequential algorithm .",
    "now let @xmath45 be any witness tree ; we have @xmath588    observe that the choice of swaps for a bad - event @xmath35 at round @xmath144 , subround @xmath481 , and rank @xmath589 , is only affected by the events in earlier rounds / subrounds as well as other @xmath575 with @xmath590 .",
    "thus , we can view this parallel algorithm as simulating the sequential algorithm , with a particular rule for selecting the bad - event to resample .",
    "namely , we keep track of the sets @xmath591 and @xmath499 as we do for the parallel algorithm , and within each sub - round we resample the bad - event in @xmath499 with the minimum value of @xmath589 .",
    "this is why it is critical in step ( 6 ) that we select @xmath512 to be the lexicographically - first mis ; this means that the presence of @xmath592 can not be affected with @xmath89 with @xmath593 .",
    "let @xmath35 be any resampling performed at the @xmath594 round of the parallel swapping algorithm ( that is , @xmath592 for some integer @xmath595 ) then the witness tree corresponding to the resampling of @xmath35 has height exactly @xmath144 .",
    "first , note that if we have @xmath19 in the execution log , where @xmath35 occurs earlier in time , and the witness tree corresponding to @xmath35 has height @xmath144 , then the witness tree corresponding to @xmath89 must have height @xmath496 .",
    "so it will suffice to show that if @xmath592 , then we must have @xmath19 for some @xmath596 .    at the beginning of round @xmath144",
    ", it must be the case that @xmath597 makes the bad - event @xmath35 true . by proposition  [ change - prop ] ,",
    "either the bad - event @xmath35 was already true at the beginning of round @xmath598 , or some bad - event @xmath133 was resampled at round @xmath598 .",
    "if it is the latter , we are done .",
    "so suppose @xmath35 was true at the beginning of round @xmath598 .",
    "so @xmath35 was an element of @xmath599 . in order for @xmath35 to have been removed from @xmath600 ,",
    "then either we had @xmath601 , in which case we are also done , or after some sub - round @xmath602 the event @xmath35 was no longer true . but again by proposition  [ change - prop ] , in order for @xmath35 to become true again at the beginning of round @xmath144 , there must have been some bad - event @xmath133 encountered later in round @xmath598 .",
    "this gives us the key bound on the running time of the parallel swapping algorithm .",
    "we give only a sketch of the proof , since the argument is identical to that of @xcite .",
    "suppose that @xmath603 and that there is some assignment of weights @xmath455 which satisfies , for every @xmath7 , the condition @xmath604 then , whp , the parallel swapping algorithm terminates after @xmath605 rounds .",
    "consider the event that for some @xmath7 , that @xmath35 is resampled after @xmath144 rounds of the parallel swapping algorithm . in this case",
    ", @xmath92 has height @xmath144 .",
    "as shown in @xcite , the sum , over all witness trees of some height @xmath606 , of the product of the probabilities of the constituent events in the witness trees , is decreasing exponentially in @xmath606 .",
    "so , for any fixed @xmath35 , the probability that this occurs is exponentially small ; this remains true after taking a union - bound over the polynomial number of @xmath7 .",
    "we can put this analysis all together to show :    [ parallel - thm ] suppose @xmath544 and that for all @xmath607 we have @xmath608 .",
    "suppose also that @xmath603 and that there is some assignment of weights @xmath455 which satisfies , for every @xmath7 , the condition @xmath604 then , whp , the parallel swapping algorithm terminates after @xmath609 time .",
    "the number of rounds , the number of sub - rounds per round , and the running time of each sub - round , are all polylogarithmic in @xmath489 whp .",
    "the lll for permutations plays a role in diverse combinatorial constructions . using our algorithm ,",
    "nearly all of these constructions become algorithmic .",
    "we examine a few selected applications now .",
    "suppose we have an @xmath0 matrix @xmath51 .",
    "the entries of this matrix come from a set @xmath610 which are referred to as _ colors_. a _ latin transversal _ of this matrix is a permutation @xmath611 , such that no color appears twice among the entries @xmath612 ; that is , there are no @xmath613 with @xmath614 .",
    "a typical question in this area is the following : suppose each color @xmath615 appears at most @xmath55 times in the matrix .",
    "how large can @xmath55 be so as to guarantee the existence of a latin transversal ?    in @xcite ,",
    "a proof using the probabilistic form of the lovsz local lemma for permutations was given , showing that @xmath616 suffices .",
    "this was the first application of the lll to permutations .",
    "this bound was subsequently improved by @xcite to the criterion @xmath617 ; this uses a variant of the probabilistic local lemma which is essentially equivalent to pegden s variant on the constructive local lemma . using our algorithmic lll",
    ", we can almost immediately transform the existential proof of @xcite into a constructive algorithm . to our knowledge , this is the first polynomial - time algorithm for constructing such a transversal .",
    "suppose @xmath617 .",
    "then there is a latin transversal of the matrix .",
    "furthermore , the swapping algorithm selects such a transversal in polynomial time .    for any quadruples @xmath618 with @xmath619",
    ", we have a bad - event @xmath620 .",
    "such an event has probability @xmath621 .",
    "we give weight @xmath622 to every bad event @xmath35 , where @xmath623 is a scalar to be determined .",
    "this bad - event can have up to four types of neighbors @xmath624 , which overlap on one of the four coordinates @xmath625 ; as discussed in @xcite , all the neighbors of any type are themselves neighbors in the dependency graph .",
    "since these are all the same , we will analyze just the first type of neighbor , one which shares the same value of @xmath144 , that is @xmath626 .",
    "we now may choose any value for @xmath627 ( @xmath489 choices ) .",
    "at this point , the color @xmath628 is determined , so there are @xmath629 remaining choices for @xmath630 .    by lemma  [ witness - tree - lemma ] and",
    "pegden s criterion @xcite , a sufficient condition for the convergence of the swapping algorithm is that @xmath631    routine algebra shows that this has a positive real root @xmath623 when @xmath617 .    in @xcite , szab considered a generalization of this question : suppose that we seek a transversal , such that no color appears more than @xmath54 times .",
    "when @xmath57 , this is asking for a latin transversal .",
    "szab gave similar criteria ",
    "@xmath632 \" for @xmath54 a small constant .",
    "such bounds can be easily obtained constructively using the permutation lll as well .    by combining the permutation lll with the partial resampling approach of @xcite",
    ", we can provide asymptotically optimal bounds for large @xmath54 :    [ szabo - thm ] suppose @xmath633 , where @xmath615 is a sufficiently large constant .",
    "then there is a transversal of the matrix in which each color appears no more than @xmath54 times .",
    "this transversal can be constructed in polynomial time .    for each set of @xmath54 appearances of any color",
    ", we have a bad event .",
    "we use the partial resampling framework , to associate the fractional hitting set which assigns weight @xmath634 to any @xmath635 appearances of a color , where @xmath636 .",
    "we first compute the probability of selecting a given @xmath635-set @xmath637 . from the fractional hitting set ,",
    "this has probability @xmath634 .",
    "in addition , the probability of selecting the indicated cells is @xmath638 .",
    "so we have @xmath639 .",
    "next , we compute the dependency of the set @xmath637 .",
    "first , we may select another @xmath640 which overlaps with @xmath637 in a row or column ; the number of such sets is @xmath641 .",
    "next , we may select any other @xmath635-set with the same color as @xmath637 ( this is the dependency due to @xmath642 in the partial resampling framework ; see @xcite for more details ) . the number of such sets is @xmath643 .",
    "so the lll criterion is satisfied if @xmath644    simple calculus now shows that this can be satisfied when @xmath645 . also , it is easy to detect a true bad - event and resample it in polynomial time , so this gives a polynomial - time algorithm .",
    "our result depends on the swapping algorithm in a fundamental way  it does not follow from theorem  [ thm : lopsided ] ( which would roughly require @xmath646 ) . hence , prior to this paper , we would not have been able to even show the existence of such transversals ; here we provide an efficient algorithm as well . to see that our bound is asymptotically optimal , consider a matrix in which the first @xmath647 rows all contain a given color , a total multiplicity of @xmath648 .",
    "then the transversal must contain that color at least @xmath647 times .",
    "the problem of finding hamiltonian cycles in the complete graph @xmath649 , with edges of distinct colors , was first studied in @xcite .",
    "this problem is typically phrased in the language of graphs and edges , but we can rephrase it in the language of latin transversals , with the additional property that the permutation @xmath6 has full cycle .",
    "how often can a color appear in the matrix @xmath51 , for this to be possible ? in @xcite , it was shown that such a transversal exists if each color appears at most @xmath650 times .",
    "is symmetric .",
    "furthermore , since @xmath651 and @xmath652 always have the same color , one only counts this as a single occurrence of that color .",
    "thus , for example , in @xcite , the stated criterion is that the matrix @xmath51 is symmetric and a color appears at most @xmath653 times . ]",
    "this proof is based on applying the non - constructive lovsz local lemma to the probability space induced by a random choice of full - cycle permutation .",
    "this result was later generalized in @xcite , to show the following result : if each color appears at most @xmath654 times for a certain constant @xmath655 , then not only is there a full - cycle latin transversal , but there are also cycles of each length @xmath656 .",
    "the constant @xmath657 was somewhat small , and this result was also non - constructive .",
    "theorem  [ thm : rainbow - cycles ] uses the swapping algorithm to construct latin transversals with essentially arbitrary cycle structures ; this generalizes @xcite and @xcite quite a bit .",
    "[ thm : rainbow - cycles ] suppose that each color appears at most @xmath658 times in the matrix @xmath51 , and @xmath489 is sufficiently large .",
    "let @xmath45 be any permutation on @xmath489 letters , whose cycle structure contains no fixed points nor swaps ( 2-cycles ) .",
    "then there is a latin transversal @xmath6 which is conjugate to @xmath45 ( i.e. , has the same cycle structure ) ; furthermore the swapping algorithm finds it in polynomial time .",
    "also , the parallel swapping algorithm finds it in time @xmath490 .",
    "we can not apply the swapping algorithm directly to the permutation @xmath6 , because we will not be able to control its cycle structure .",
    "rather , we will set @xmath659 , and apply the swapping algorithm to @xmath660 .",
    "a bad - event is that @xmath661 for some @xmath13 .",
    "using the fact that @xmath45 has no fixed points or 2-cycles , we can see that this is equivalent to one of the following two situations : ( a ) there are @xmath662 such that @xmath663 , and @xmath664 are distinct , and @xmath665 are distinct , and @xmath666 or ( b ) there are @xmath667 with @xmath668 , and all of @xmath669 are distinct , and @xmath670 .",
    "we will refer to the first type of bad - event as an event of type a led by @xmath144 ( such an event is also led by @xmath671 ) ; we will refer to the second type of bad - event as type b led by @xmath144 .",
    "note that in an a - event , the color is repeated in distinct column and rows , and in a b - event the column of one coordinate is the row of another .",
    "so , to an extent , these events are mutually exclusive .",
    "much of the complexity of the proof lies in balancing the two configurations . to a first approximation ,",
    "the worst case occurs when a - events are maximized and b - events are impossible .",
    "this intuition should be kept in mind during the following proof .",
    "we will define the function @xmath40 as follows .",
    "each event of type a is assigned the same weight @xmath672 , and each event of type b is assigned weight @xmath673 .",
    "the event of type a has probability @xmath674 and each event of type b has probability @xmath675 .",
    "in the following proof , we shall need to compare the relative magnitude of @xmath676 .",
    "in order to make this concrete , we set @xmath677 ( in deriving this proof , we left these constant coefficients undetermined until the end of the computation , and we then verified that all desired inequalities held . )    now , to apply pegden s criterion @xcite for the convergence of the swapping algorithm , we will need to analyze the independent sets of neighbors each bad - event can have in the dependency graph . in order to keep track of this neighborhood structure",
    ", it will be convenient to define the following sums .",
    "we let @xmath88 denote the sum of @xmath678 over all bad - events @xmath637 involving some fixed term @xmath679 .",
    "let @xmath54 denote the sum of @xmath678 over all bad - events @xmath637 ( of type either a or b ) led by some fixed value @xmath144 , and let @xmath680 denote the sum of @xmath678 over b - events @xmath637 alone . recall that each bad - event of type a is led by @xmath144 and also by @xmath671 .",
    "we now examine how to compute the term @xmath88 .",
    "consider a fixed value @xmath220 ; we will enumerate all the bad - events that involve @xmath679 .",
    "these correspond to color - repetitions involving either row or column @xmath220 in the matrix @xmath51 .",
    "let @xmath681 ( respectively @xmath86 ) denote the number of occurrences of color @xmath144 in column ( respectively row ) @xmath220 of the matrix , excluding @xmath651 itself .",
    "we can have a color repetition of the form @xmath682 where @xmath11 ; or we can have repetitions of the form @xmath666 or @xmath683 , where @xmath684 ( but possibly @xmath685 ) .",
    "the total number of repetitions of the first type is @xmath686 .",
    "the total number of repetitions of the second type is at most @xmath687 .",
    "the total number of repetitions of the third type is at most @xmath688 .    for a repetition of the first type",
    ", this must correspond to an b - event , in which @xmath689 for some @xmath144 . for a repetition of the second type ,",
    "if @xmath690 this correspond to an a - event in which @xmath691 for some @xmath692 _ or _",
    "alternatively if @xmath685 it correspond to a b - event in which @xmath693 for some @xmath144 .",
    "a similar argument holds for the third type of repetition .    summing all these cases",
    ", we have @xmath694    observe that the the rhs is maximized when there are @xmath489 distinct colors with @xmath695 and @xmath489 distinct colors with @xmath696 . for",
    ", suppose that a color has ( say ) @xmath697 .",
    "if we decrement @xmath698 by 1 while adding a new color with @xmath699 , this changes the rhs by @xmath700 .",
    "this gives us @xmath701    similarly , let us consider @xmath54 .",
    "given @xmath144 , we choose some @xmath221 with @xmath702 .",
    "now , we again list all color repetitions @xmath703 or @xmath670 .",
    "the number of the former is at most @xmath704 and the number of the latter is at most @xmath705 .",
    "as before , this is maximized when each color appears once in the column , leading to @xmath706    for term @xmath680 , the worst case is when each color appears @xmath707 times in the row and column of @xmath221 ; this yields @xmath708    now consider a fixed bad - event a , with parameters @xmath709 , and let us count the sum over all independent sets of neighbors , of @xmath40 .",
    "this could have one or zero children involving @xmath679 and similarly for @xmath710 ; this gives a total contribution of @xmath711 .",
    "the children could also overlap on @xmath144 ; the total set of possibilities is either zero children , a b - child led by @xmath712 , a b - child led by @xmath712 and a child led by @xmath144 , a child led by @xmath598 , a child led by @xmath598 and a child led by @xmath496 , a child led by @xmath144 , a child led by @xmath496 .",
    "there is an identical factor for the contributions of bad - events led by @xmath713 . in total",
    ", the criterion for a is that we must have @xmath714    applying the same type of analysis to an event of type b gives us the criterion : @xmath715    putting all these constraints together gives a complicated system of polynomial equations , which can be solved using a symbolic algebra package .",
    "indeed , the stated values of @xmath676 satisfy these conditions when @xmath716 and @xmath489 is sufficiently large .",
    "hence the swapping algorithm terminates , resulting in the desired permutation @xmath659 .",
    "it is easy to see that the parallel swapping algorithm works as well .",
    "we note that for certain cycle structures , namely the full cycle @xmath717 and @xmath718 transpositions @xmath719 , one can apply the llll directly to the permutation @xmath6 .",
    "this gives a qualitatively similar condition , of the form @xmath720 , but the constant term is slightly better than ours .",
    "for some of these settings , one can also apply a variant of the moser - tardos algorithm to find such permutations @xcite .",
    "however , these results do not apply to general cycle structures , and they do not give parallel algorithms .",
    "suppose we have a graph @xmath140 , with a given partition of the vertices into @xmath159 blocks each of size @xmath680 , i.e. , @xmath721 .",
    "we would like to @xmath680-color the vertices , such that every block has exactly @xmath680 colors , and such that no edge has both endpoints with the same color ( i.e. , it is a proper vertex - coloring ) .",
    "this is referred to as a _ strong coloring _ of the graph . if this is possible for _ any _ such partition of the vertices into blocks of size @xmath680",
    ", then we say that the graph @xmath140 has strong chromatic number @xmath680 .    a series of papers @xcite have provided bounds on the strong chromatic number of graphs , typically in terms of their maximum degree @xmath55 .",
    "in @xcite , it is shown that when @xmath722 , such a coloring exists ; this is the best bound currently known .",
    "furthermore , the constant @xmath723 can not be improved to any number strictly less than @xmath486 .",
    "the methods used in most of these papers are highly non - constructive , and do not provide algorithms for generating such colorings .    in this section ,",
    "we examine two routes to constructing strong colorings .",
    "the first proof , based on @xcite , builds up the coloring vertex - by - vertex , using the ordinary lll .",
    "the second proof uses the permutation lll to build the strong coloring directly .",
    "the latter appears to be the first rnc algorithm with a reasonable bound on @xmath680 .",
    "we first develop a related concept to the strong coloring known as an _",
    "independent transversal_. in an independent transversal , we choose a single vertex from each block , so that the selected vertices form an independent set of the graph .",
    "[ it - prop ] suppose @xmath724 .",
    "then @xmath140 has an independent transversal , which can be found in expected time @xmath725 .",
    "furthermore , let @xmath215 be any fixed vertex .",
    "then @xmath140 has an independent transversal which includes @xmath135 , which can be found in expected time @xmath726 .",
    "use the ordinary lll to select a single vertex uniformly from each block .",
    "see @xcite , @xcite for more details .",
    "this shows that , under the condition @xmath724 , an independent transversal exists and is found in expected time @xmath725 .    to find an independent transversal including @xmath135",
    ", we imagine assigning a weight @xmath58 to vertex @xmath135 and weight zero to all other vertices .",
    "as described in @xcite , the expected weight of the independent transversal returned by the moser - tardos algorithm , is at least @xmath727 , where @xmath728 is the total weight of all vertices .",
    "this implies that that vertex @xmath135 is selected with probability @xmath729 .",
    "hence , after running the moser - tardos algorithm for @xmath730 separate independent executions , one finds an independent transversal including @xmath135 .    using this as a building block",
    ", we can form a strong coloring by gradually adding colors :    [ strong - color - thm2 ] suppose @xmath731 .",
    "then @xmath140 has a strong coloring , which can be found in expected time @xmath732 .",
    "( this proof is almost identical to the proof of theorem 5.3 of @xcite ) .",
    "we maintain a _ partial coloring _ of the graph @xmath140 , in which some vertices are colored with @xmath733 and some vertices are uncolored .",
    "initially all vertices are uncolored .",
    "we require that in a block , no vertices have the same color , and no adjacent vertices have the same color .    now , suppose some color is partially missing from the strong coloring ; say without loss of generality there is a vertex @xmath558 missing color @xmath58 . in each block @xmath734",
    ", we will select some vertex @xmath306 to have color 1 . if the block does not have such a vertex already",
    ", we will simply assign @xmath306 to have color 1 .",
    "if the block @xmath144 _ already _ had some vertex @xmath735 with color @xmath58 , we will swap the colors of @xmath306 and @xmath735 ( if @xmath306 was previously uncolored , then @xmath735 will become uncolored ) .",
    "we need to ensure three things .",
    "first , the vertices @xmath736 must form an independent transversal of @xmath140 .",
    "second , if we select vertex @xmath306 and swap its color with @xmath735 , this can not cause @xmath735 to have any conflicts with its neighbors .",
    "third , we insist of selecting @xmath558 itself for the independent traversal",
    ".    a vertex @xmath735 will have conflicts with its neighbors if @xmath306 currently has the same color as one of the neighbors of @xmath735 . in each block",
    ", there are at least @xmath737 possible choices of @xmath306 that avoid that ; we must select an independent transversal among these vertices , which also includes the designated vertex @xmath558 . by proposition  [ it - prop ] , this can be done in time @xmath732 as long as @xmath724 .    whenever we select the independent transversal @xmath736 , the total number of colored vertices increases by at least one : for , the vertex @xmath558 becomes colored while it was not initially , and in every other block the number of colored vertices does not decrease .",
    "so , after @xmath489 iterations , the entire graph has a strong coloring ; the total time is @xmath732 .",
    "the algorithm based on the ordinary lll is slow and is inherently sequential . using the permutation lll",
    ", one can obtain a more direct and faster construction ; however , the hypothesis of the theorem will need to be slightly stronger .",
    "suppose we have a given graph @xmath140 of maximum degree @xmath55 , whose vertices are partitioned into blocks of size @xmath680 .",
    "then if @xmath738 , it is possible to strongly color graph @xmath140 in expected time @xmath725 .",
    "if @xmath739 for some constant @xmath603 , there is an rnc algorithm to construct such a strong coloring .",
    "we will use the permutation lll .",
    "for each block , we assume the vertices and colors are identified with the set @xmath740 $ ]",
    ". then any proper coloring of a block corresponds to a permutation of @xmath741 .",
    "when we discuss the color of a vertex @xmath135 , we refer to @xmath742 where @xmath159 is the block containing vertex @xmath135 .    for each edge @xmath743 and any color @xmath744 $ ] , we have a bad - event that both @xmath745 and @xmath135 have color @xmath615 .",
    "( note that we can not specify simply that @xmath745 and @xmath135 have the _ same color _ ; because we have restricted ourselves to _ atomic _ bad - events , we must list every possible color @xmath615 with a separate bad event . )",
    "each bad - event has probability @xmath746 .",
    "we give weight @xmath622 to every bad event , where @xmath623 is a scalar to be determined .",
    "now , each such event @xmath747 is dependent with four other types of bad - events :    1 .",
    "an event @xmath748 where @xmath139 is connected to vertex @xmath745 ; 2 .",
    "an event @xmath749 where @xmath750 is connected to vertex @xmath135 ; 3 .",
    "an event @xmath751 where @xmath750 is in the block of @xmath745 and @xmath139 is connected to @xmath750 ; 4 .",
    "an event @xmath751 where @xmath139 is in the block of @xmath135 and @xmath750 is connected to @xmath139    there are @xmath752 neighbors of each type . for any of these four types ,",
    "all the neighbors are themselves connected to each other .",
    "hence an _ independent _ set of neighbors of the bad - event @xmath747 can contain one or zero of each of the four types of bad - events .",
    "using lemma  [ witness - tree - lemma ] and pegden s criterion @xcite , a sufficient condition for the convergence of the swapping algorithm is that @xmath753    when @xmath738 , this has a real positive root @xmath754 ( which is a complicated algebraic expression ) .",
    "furthermore , in this case the expected number of swaps of each permutation is @xmath755 .",
    "so the swapping algorithm terminates in expected time @xmath725 .",
    "a similar argument applies to the parallel swapping algorithm .      in @xcite ,",
    "the following packing problem was considered .",
    "suppose we are given two @xmath635-uniform hypergraphs @xmath756 and an integer @xmath489 .",
    "is it possible to find two injections @xmath757 $ ] with the property that @xmath758 is edge - disjoint to @xmath759 ? ( that is , there are no edges @xmath760 with @xmath761 . ) .",
    "a sufficient condition on @xmath762 was given using the llll .",
    "we achieve this algorithmically as well :    suppose that @xmath756 have @xmath763 edges respectively .",
    "suppose that each edge of @xmath301 intersects with at most @xmath764 other edges of @xmath301 , and suppose that @xmath765    then the swapping algorithm finds injections @xmath757 $ ] such that @xmath758 is edge - disjoint to @xmath759 .",
    "suppose further that @xmath766 and @xmath767    then the parallel swapping algorithm finds such injections with high probability in @xmath768 time and using @xmath769 processors .",
    "@xcite proves this fact using the llll , and the proof immediately applies to the swapping algorithm as well .",
    "we review the proof briefly : we may assume without loss of generality that the vertex set of @xmath517 is @xmath349 $ ] and the vertex set of @xmath770 has cardinality @xmath489 and that @xmath771 is the identity permutation ; then we only need to select the bijection @xmath772 $ ] . for each pair of edges @xmath773 , and each ordering @xmath774",
    ", there is a separate bad - event @xmath775 .",
    "now observe that the lll criterion is satisfied for these bad - events , under the stated hypothesis .",
    "the proof for the parallel swapping algorithm is almost immediate .",
    "there is one slight complication : the total number of atomic bad - events is @xmath776 , which could be super - polynomial for @xmath777 .",
    "however , it is easy to see that the total number of bad - events _ which are true at any one time _ is at most @xmath778 ; namely , for each pair of edges @xmath779 , there may be at most one @xmath660 such that @xmath775 .",
    "it is not hard to see that theorem  [ parallel - thm ] still holds under this condition .",
    "the original formulation of the llll @xcite applies in a natural way to general probability spaces .",
    "there has been great progress over the last few years in developing constructive algorithms , which find in polynomial time the combinatorial structures in these probability spaces whose existence is guaranteed by the lll .",
    "these algorithms have been developed in great generality , encompassing the swapping algorithm as a special case .    however , the moser - tardos algorithm has uses beyond simply finding a object which avoids the bad - events . in many ways ,",
    "the moser - tardos algorithm is more powerful than the lll .",
    "we have already seen problems that feature its extensions : e.g. , theorem  [ szabo - thm ] requires the use of the partial resampling variant of the moser - tardos algorithm , and proposition  [ it - prop ] requires the use of the moser - tardos distribution ( albeit in the context of the original moser - tardos algorithm , not the swapping algorithm ) .    while the algorithmic frameworks of achlioptas & iliopoulous and harvey & vondrk achieve the main goal of a generalized constructive lll algorithm , they do not match the full power of the moser - tardos algorithm .",
    "however , our analysis shows that the swapping algorithm matches nearly all of the additional features of the moser - tardos algorithm . in our view",
    ", one main goal of our paper is to serve as a roadmap to the construction of a _ true _ generalized lll algorithm .",
    "behind all the difficult technical analysis , there is the underlying theme : even complicated probability spaces such as permutations can be reduced to `` variables '' ( the domain and range elements of the range ) which interact in a somewhat `` independent '' fashion .",
    "encouragingly , there has been progress toward this goal . for example , one main motivation of @xcite was to generalize the swapping algorithm .",
    "then , kolmogorov noticed in @xcite that our swapping algorithm had a certain nice property , namely the ability to select the resampled bad - event in an arbitrary fashion , that the analysis of @xcite lacked ; this led to the work of @xcite which partially generalized that property ( which kolmogorov refers to as _ commutativity _ ) .    at the current time",
    ", we do not even know how to define a truly generalized lll algorithm , let alone analyze it .",
    "but we hope that we have at least provided an example approach toward such an algorithm .",
    "we would like to thank the anonymous reviewers of the conference and journal versions of this paper , for their helpful comments and suggestions .",
    "in the following series of propositions , we show a variety of symmetry properties of the swapping subroutine .",
    "this analysis will use simple results and notations of group theory .",
    "we let @xmath780 denote the symmetric group on @xmath542 letters , which we identify with the set of permutations of @xmath781 $ ] .",
    "we let @xmath782 denote the permutation ( of whatever dimension is appropriate ) that swaps @xmath783 and is the identity otherwise .",
    "we write multiplications on the right , so that @xmath784 denotes the permutation which maps @xmath220 to @xmath785 .",
    "finally , we will sometimes write @xmath786 instead of the more cumbersome @xmath679 .      we prove this by induction on @xmath635 .",
    "the following equivalence will be useful .",
    "we can view a single call to swap as follows : we select a random @xmath790 and swap @xmath375 with @xmath790 ; let @xmath791 denote the permutation after this swap .",
    "now consider the permutation on @xmath792 letters obtained by removing @xmath375 from the range and @xmath348 from the range of @xmath259 ; we use the notation @xmath793 to denote this restriction of range / domain .",
    "we then recursively call @xmath794 .",
    "[ swap - invariant - prop2 ] let @xmath611 be fixed , and let @xmath357 $ ] be fixed as well .",
    "let @xmath799 \\rightarrow [ r]$ ] be a permutation on @xmath635 letters ; then for any permutation @xmath800 we have @xmath801        at this point , consider the following simple fact about permutations : for any @xmath804 $ ] with @xmath805 , we have @xmath806 this fact is simple to prove by case analysis considering which of the letters @xmath807 are equal to each other .      in our analysis and algorithm , we will seek to maintain the symmetry between the  domain \" and  range \" of the permutation .",
    "the swapping subroutine seems to break this symmetry , inasmuch as the swaps are all based on the _ domain _ of the permutation .",
    "however , this symmetry - breaking is only superficial as shown in proposition  [ exchange - sym - prop ] .      1 .",
    "suppose @xmath6 is a permutation of @xmath349 $ ] .",
    "repeat the following for @xmath76 : 2 .",
    "select @xmath811 uniformly at random among @xmath349 - \\{y_1 , \\dots , y_{i-1 } \\}$ ] .",
    "swap entries @xmath812 and @xmath813 of the permutation @xmath6 .",
    "a similar recursive definition applies to swap2 as for swap : we select @xmath790 uniformly at random , swap @xmath817 , and then call @xmath818 .",
    "the main difference is that we remove the image point @xmath819 instead of the domain point @xmath820 ."
  ],
  "abstract_text": [
    "<S> while there has been significant progress on algorithmic aspects of the lovsz local lemma ( lll ) in recent years , a noteworthy exception is when the lll is used in the context of random permutations . </S>",
    "<S> the breakthrough algorithm of moser & tardos only works in the setting of independent variables , and does not apply in this context . </S>",
    "<S> we resolve this by developing a randomized polynomial - time algorithm for such applications . </S>",
    "<S> a noteworthy application is for latin transversals : the best - known general result here ( bissacot et al . </S>",
    "<S> , improving on erds and spencer ) , states that any @xmath0 matrix in which each entry appears at most @xmath1 times , has a latin transversal . </S>",
    "<S> we present the first polynomial - time algorithm to construct such a transversal . </S>",
    "<S> we also develop rnc algorithms for latin transversals , rainbow hamiltonian cycles , strong chromatic number , and hypergraph packing .    </S>",
    "<S> in addition to efficiently finding a configuration which avoids bad - events , the algorithm of moser & tardos has many powerful extensions and properties . these include a well - characterized distribution on the output distribution , parallel algorithms , and a partial resampling variant . </S>",
    "<S> we show that our algorithm has nearly all of the same useful properties as the moser - tardos algorithm , and present a comparison of this aspect with recent works on the lll in general probability spaces . </S>"
  ]
}