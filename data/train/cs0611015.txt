{
  "article_text": [
    "there are several fairness criteria in rate allocation .",
    "the simplest one is to mandate that all users have the same data rate and maximize this common data rate within the capacity region .",
    "this allocation is equitable and maximize the data rate of the worst user .",
    "however , it often does not effectively utilize system resources .",
    "another criterion is called _ max - min fairness_. it relaxes equity and allows increasing the rates of some users without lowering the minimum data rate in the system . under such an allocation policy",
    ", nobody can be benefited by worsening anybody who has lower data rate .",
    "it can be rephrased as follows .",
    "if we take some resources from a wealthy user to a relatively poor user ( without reversing the order of wealthiness ) , the resulting allocation is considered fairer .",
    "such operation is called a robinhood operation .",
    "we say that an allocation is max - min fair if no robinhood operation is possible without violating feasibility .",
    "the max - min fairness is considered quite stringent .",
    "any decrease of rate of a user with low data rate can not be compensated by increasing the rate of any user with higher rate , no matter how small the decrease is .",
    "kelly considers logarithmic utility function and proposes proportional fairness for network flow control  @xcite . roughly speaking",
    ", we say that a rate allocation is _ proportionally fair _ if any adjustment will decrease the sum of percentage change over all users . a framework of optimization is thereby introduced using lagrangian technique . both max - min and proportional fairness are popular criteria for flow control in unicast and multicast networks  @xcite .",
    "another classical notion of fairness is the _",
    "nash bargaining solution _ coined by nash in the 50 s  @xcite . in fact , proportional fairness is its special case .",
    "the nash bargaining solution is a standard tool in cooperative game theory , and is applied widely in network resource allocation .",
    "for example , see @xcite for application to orthogonal frequency division multiple - access networks .",
    "yet there is another fairness criterion based on the theory of _ majorization_. we will give formal definitions of all the above criteria in the next section .",
    "in this paper , the problem of picking a point in the capacity region of gaussian mac and bc according to some fairness criteria is considered .",
    "some works have been done on gaussian mac .",
    "the sum rate at the max - min fair allocation is characterized in  @xcite .",
    "the polymatroid structure of the capacity region of gaussian mac is exploited in  @xcite , and algorithms for locating the max - min fair point are found .",
    "implementation issue is addressed in  @xcite .",
    "the organization of this paper is as follows . in section  [ sec : definitions ] , we give precise definitions of fairness , and review the theory of majorization and schur - convexity .",
    "the results are summarized in section  [ results ] , and the details for the gaussian mac and bc are in section  [ sec : mac ] and  [ sec : bc ] respectively .",
    "the appendix contains some proofs of the theorems in section  [ sec : mac ] .",
    "the set of all users is denoted by @xmath0 .    in this section ,",
    "we review several fairness criteria , and the theory of majorization . we will use the symbol @xmath1 to represent capacity region , which is assumed to be a closed and convex set throughput this section .",
    "an allocation is _ symmetric _ if every user has the same data rate . _",
    "symmetric capacity _ is the maximal sum rate of all symmetric allocations , @xmath2    an allocation is called _ max - min fair _ if we can not increase the rate @xmath3 of user @xmath4 without decreasing @xmath5 for some @xmath6 , while maintaining feasibility . at the max - min fair allocation , no user can increase the data rate without compromising users with lower data rate .",
    "formally speaking , a rate allocation @xmath7 is max - min fair in @xmath1 if for any @xmath8 such that @xmath9 for some @xmath4 , then we can find @xmath10 such that @xmath11 .",
    "the sum of rate at the max - min fair allocation for capacity region @xmath1 is called the _ max - min capacity _ and is denoted by @xmath12 .    _ proportional fair _ ( pf )",
    "rate allocation @xmath13 is the data rate allocation that maximizes @xmath14 the _ proportional fair capacity _ is the corresponding sum rate , @xmath15 since the capacity region @xmath1 is closed and convex , and the @xmath16 function is concave , the maximization is well - defined .",
    "another characterization of the proportional fair allocation @xmath17 is @xmath18 for all point @xmath19 in the capacity region @xmath1 .    in the _ nash bargaining solution _",
    ", there is a notion of _ disagreement point _ , which is the default operating point if the users fail to reach any agreement .",
    "user @xmath4 will not accept any data rate lower than @xmath20 .",
    "the rate allocated to user @xmath4 in the nash bargaining solution should be larger than or equal to @xmath20 ( fig .",
    "[ fig : dp ] ) .",
    "if we are given a disagreement point @xmath21 in the capacity region , the nash bargaining solution maximizes @xmath22 over all points in the region @xmath23 the nash bargaining solution satisfies several desirable properties .",
    "see  @xcite for details .",
    "it is obviously identical to the proportional fair solution when the origin is chosen as the disagreement point .",
    "is the disagreement point .",
    "the shaded area is the acceptable rate allocation.,width=226 ]    for a vector @xmath24 , we denote the components in nondecreasing order by @xmath25 } \\leq x_{[2 ] } \\leq \\ldots \\leq x_{[k]}.\\ ] ] we say that vector @xmath26 is _ majorized _ by vector @xmath27 , written as @xmath28 , if for @xmath29 , @xmath30 } & \\geq \\sum_{i=1}^k y_{[i ] } , \\text { and } \\\\    \\sum_{i=1}^k x_{[i ] } & = \\sum_{i=1}^k y_{[i]}.\\end{aligned}\\ ] ] in other words , if we sort the components of @xmath26 and @xmath27 in nondecreasing order , the cumulative sum of the components of @xmath26 is larger than the corresponding cumulative sum of @xmath27 .",
    "majorization induces a partial order that measures dispersion .",
    "it is known as the lorenz order in economics , and is used for comparing income distributions .",
    "when @xmath31 , we say that the distribution according to @xmath26 is less spread out , and is thus fairer than that of @xmath27 .",
    "a canonical example is that the vector @xmath32 is majorized by any vector in @xmath33 whose components sum to 1 .",
    "a function @xmath34 is called _ schur convex _ if @xmath35 if the inequality above is reversed , then we say that the function @xmath36 is _",
    "schur concave_. a class of schur - convex functions is constructed using the following lemma .    if @xmath37 is convex ( concave ) , then the function @xmath38 is schur - convex ( schur - concave ) .",
    "[ lemma : schur ]    a useful criterion for schur - convexity is as follows .",
    "suppose that @xmath39 is differentiable and symmetric , meaning that @xmath40 for any @xmath26 and permutation @xmath41 of @xmath42",
    ". then    1 .",
    "@xmath43 is schur - convex if @xmath44 for all @xmath4 and @xmath45 , 2 .",
    "@xmath43 is schur - concave if @xmath46 for all @xmath4 and @xmath45 .",
    "see @xcite for more on the theory of majorization and schur - convexity .",
    "usually there is a tradeoff between sum rate and fairness .",
    "the next theorem illustrates such a tradeoff .",
    "it shows that the requirement of symmetric fairness is more stringent than proportional fairness in the sense that the symmetric capacity is always less than or equal to the proportional - fair capacity .",
    "we use the notation @xmath47 for the sum capacity , defined as @xmath48    for any convex region @xmath1 , @xmath49 @xmath50 equality holds in the first inequality in the first line only if the pf allocation is symmetric .",
    "all inequalities are obvious except the the first inequality in the first line , i.e. , @xmath51 .",
    "let @xmath52 be the maximal symmetric rate allocation , and @xmath53 be the proportional fair rate allocation in region @xmath1 .",
    "we have @xmath54 the first inequality comes from the defining property of proportional fairness , and the second is the am - gm inequality .",
    "thus , @xmath55 when equality holds , then we must have @xmath56 .",
    "this proves the first inequality .    in general , the max - min capacity may or may not be larger than the proportional fair capacity .",
    "however , in gaussian mac , both max - min and proportional fair capacity achieve the sum capacity .",
    "in fact , the max - min fair and proportional fair rate allocation in gaussian mac coincide . it is hence not necessary to distinguish between max - min and proportional fairness in gaussian mac .",
    "meanwhile , in gaussian bc , max - min capacity is the same as symmetric capacity .",
    "given a rate allocation @xmath19 , we define its _ efficiency _ , @xmath57 , as the ratio between the sum rate at @xmath19 and the maximal sum capacity .",
    "obviously , this is a number between zero and one . for proportional fairness",
    ", we have the following lower bound on @xmath57 .",
    "let @xmath1 be a convex region in @xmath33 , the efficiency for proportional fairness , @xmath58 , is lower bounded by  @xmath59 .    by the definition of proportional fairness , the region @xmath1 is contained in the polyhedron @xmath60 defined by @xmath61 and @xmath62 for all @xmath4 .",
    "therefore , @xmath63 is not larger than @xmath64 , which is equal to @xmath65 .",
    "hence , @xmath66    we will show that in gaussian mac , @xmath58 is exactly 1 ; it achieves the maximal value .",
    "in gaussian bc , the lower bound @xmath59 is attained , i.e. , @xmath67 with the infimum taken over all @xmath68-user gaussian bc .",
    "the major results are summarized in table  [ table : mac ] and  [ table : bc ] . for both gaussian mac and bc",
    ", we also devise efficient algorithms that compute the fair solutions .",
    ".(summary of results for gaussian mac ) capacities as a function of the power constraint vector @xmath69 are schur concave . for max - min fair or proportional fair , the rates are in increasing order if the power constraints are sorted in increasing order . if the power constraints are more spread out , so does the associated rate allocation .",
    "[ cols=\"^,^,^,^\",options=\"header \" , ]",
    "in a scalar gaussian mac with @xmath68 users , the received signal is @xmath70 where @xmath71 is zero - mean guassian with variance at most @xmath72 and @xmath73 is gaussian noise with power @xmath74 .",
    "let @xmath75 denote the shannon capacity formula @xmath76 the capacity region of a scalar gaussian mac is @xcite @xmath77 the faces of the capacity region are hyper - planes in the form @xmath78 for some subset @xmath79 of @xmath80 and constant  @xmath81 .    in vector gaussian mac ,",
    "the received signal is @xmath82 the @xmath83 s are unit - norm column vectors of length  @xmath84 , @xmath71 is a gaussian random variable with zero mean and variance at most @xmath72 , and @xmath85 is the gaussian noise vector with zero mean and covariance matrix @xmath86 , where @xmath87 is the @xmath88 identity matrix .",
    "the capacity region of a vector gaussian mac is  @xcite @xmath89    a typical capacity region of gaussian mac for 3 users is illustrated in figure  [ fig : capacity_region ] .        as in  @xcite",
    ", we will unify our treatment and present the results for mac in more general terms .",
    "for any subset @xmath90 and @xmath91 , we use the shorthand notation @xmath92 for the summation of components of @xmath19 with indices in  @xmath79 .    for any function",
    "@xmath93 mapping subsets of @xmath80 to @xmath94 , let @xmath95 denote the polyhedron @xmath96    if the function @xmath93 satisfies ( i ) @xmath97 , ( ii ) @xmath98 if @xmath99 , and ( iii ) @xmath100 for all subsets @xmath79 and @xmath101 of @xmath80 , then @xmath93 is called a _",
    "rank function_. property ( ii ) and ( iii ) are called the _ monotonic _ and _ submodular _ property respectively .",
    "we say that the polyhedron @xmath95 is a _ polymatroid _ when @xmath93 is a rank function .",
    "the capacity regions of scalar and vector gaussian mac are polymatroids . for scalar gaussian mac",
    ", we define the rank function as @xmath102    on the vector case , we define the rank function as @xmath103    the collection of points that achieve equality on total data rate @xmath104 is called the _",
    "dominant face_. given a vector @xmath19 in @xmath95 , we say that the set @xmath79 is a _ bottelneck _ of @xmath19 if @xmath105 for any function @xmath106 , if @xmath107 whenever @xmath108 and @xmath109 , then we say that @xmath93 satisfies the _ order property_. the heuristic meaning is as follow .",
    "if the achievable sum rate of group @xmath110 is less than or equal to that of group @xmath111 , then even if they cooperate with users in group @xmath75 , the sum rate of group @xmath112 is still less than that of the group  @xmath113 .",
    "[ [ example-1 ] ] example 1 + + + + + + + + +    consider the function @xmath93 defined as @xmath114 , @xmath115 , @xmath116 , @xmath117 .",
    "we have @xmath118 but @xmath119 .",
    "this function does not satisfy the order property .",
    "the scalar gaussian mac satisfies the order property , but the vector gaussian mac in general does not .    in both the scalar and vector gaussian mac , there is a canonical choice of disagreement point for the nash bargaining solution . each user can treat the signal of the others as noise and decode independently . for scalar gaussian mac ,",
    "the resulting data rate for user @xmath4 is @xmath120 in the vector case , if user @xmath4 uses linear mmse receiver with no joint processing with others , the data rate is  @xcite @xmath121 where @xmath122 is the matrix @xmath123    in both cases , they can be expressed in terms of the rank function as @xmath124 the rate vector @xmath125 is called the _",
    "canonical disagreement point_.    the next lemma is a useful consequence of the order property .",
    "the proof is straightforward and is omitted .",
    "let @xmath106 be a function that satisfies the order property .    1 .",
    "if @xmath126 are in nondecreasing order , then @xmath127 for all @xmath128 of size @xmath4 .",
    "2 .   for any subset @xmath110",
    ", the function @xmath129 defined for @xmath130 also satisfies the order property .",
    "[ lemma : order ]      the computation of the symmetric capacity in @xmath95 amounts to finding the tightest constraint among @xmath131 for all subsets @xmath79 .",
    "each component of the symmetric rate can not exceed @xmath132 for all @xmath128 .",
    "the symmetric rate allocation can be computed by checking @xmath133 constraints .",
    "if @xmath93 satisfies the order property , the symmetric capacity can be computed more efficiently using lemma  [ lemma : order ] .",
    "the computation requires taking the minimum of only @xmath68 numbers .",
    "let @xmath134 be a function that satisfies the order property .",
    "by relabeling we can assume that @xmath135 whenever @xmath136 .",
    "the symmetric capacity in the polyhedron @xmath95 equals @xmath137    the infimum of fair efficiency of symmetric fairness , taken over all @xmath68-user mac , is zero .",
    "suppose that the power of user 1 , @xmath138 , is much less than the others , so that @xmath139 we see that the symmetric capacity approaches zero when @xmath138 approaches zero , while the maximal sum approaches a positive constant .",
    "we next compare two macs with different power constraints .",
    "if the power constraints @xmath140 become more disperse , then the symmetric capacity will decrease .",
    "let @xmath141 be the symmetric capacity of a scalar gaussian mac with power constraints @xmath69 and noise power  @xmath74 . if @xmath142 , then @xmath143 , i.e. the symmetric capacity of multiple - access channel with fixed noise power is a schur - concave function .",
    "[ thm:_mac_sym_schur ]    without loss of generality , we assume that the power constraints are sorted in nondecreasing order , @xmath144 , and @xmath145 . since scalar gaussian mac satisfies the order property , the corresponding symmetric rate allocations @xmath146 and @xmath147 are given by @xmath148 and @xmath149 for all @xmath4 .",
    "as @xmath150 for all @xmath151 , we have @xmath152 therefore @xmath153 .",
    "the following is a useful characterization of max - min fairness  @xcite .",
    "for any function @xmath106 , a vector @xmath19 is max - min fair in the polyhedron @xmath95 if and only if for all @xmath4 , the @xmath4th component is largest in some bottleneck . in other words , for @xmath154 , @xmath4 is contained in a bottleneck @xmath111 and @xmath155 for all @xmath156 .",
    "[ lemma : maxmin ]    the proof of lemma  [ lemma : maxmin ] is contained in the appendix .",
    "the next theorem is the main theorem in this section .",
    "the proof of theorem  [ theorem : mmpf ] is in the appendix ( see prop .  [",
    "prop : dominant_face ] and  [ prop : nested ] . )",
    "suppose that @xmath134 satisfies the submodular property .",
    "the max - min fair point @xmath7 in @xmath95 is on the dominant face , and is majorized by every point on the dominant face .",
    "[ theorem : mmpf ]    it is noted that in the theorem we do not assume that the function @xmath93 is a rank function .",
    "the result holds as long as we have the submodular property .",
    "the max - min fair allocation is fairer than any other point on the dominant face in the sense of fairness induced by majorization .",
    "the max - min fair solution also has the following interpretations .    if @xmath157 satisfies the submodular property , the order property and @xmath158 , then the max - min fair ( and hence the proportional fair ) solution @xmath159 maximizes @xmath160}$ ] , @xmath160}+r_{[2 ] } , \\ldots , $ ] and @xmath161}$ ] simultaneously over all points on the dominant face .",
    "if @xmath93 satisfies the submodular property , then the max - min point and the proportional fair point in @xmath95 coincide .",
    "[ cor : maxmin_pf ]    since @xmath16 is a concave function , @xmath162 is schur - concave by lemma  [ lemma : schur ] .",
    "because the max - min point @xmath7 is majorized by any point @xmath19 on the dominant face , we have @xmath163 hence @xmath164 .    if @xmath93 satisfies the submodular property , then the max - min ( and the proportional fair ) point in @xmath95 is the point on the dominant face that minimizes the euclidean norm .",
    "the function @xmath165 is convex .",
    "the proof is similar to the proof of the last corollary .",
    "if @xmath93 satisfies the submodular property , the fairness efficiency of max - min fairness and proportional fairness is equal to 1 .",
    "suppose that @xmath106 satisfies both submodular and order property , and assume @xmath166 after suitable relabeling .",
    "then the components of max - min fair ( and hence the proportional fair ) solution @xmath159 in @xmath95 are in nondecreasing order , @xmath167 .",
    "[ theorem : order ]    consider any @xmath4 in @xmath80 .",
    "the index @xmath4 is contained in a bottleneck @xmath168 of @xmath159 so that @xmath169 . if @xmath170 , then @xmath171 .",
    "otherwise , suppose @xmath172 and let @xmath79 denote @xmath173 .",
    "then @xmath174 we have used the order property in the second inequality .",
    "this implies that @xmath175 .    a typical class of functions that satisfies the order property is the generalized symmetric functions .",
    "a rank function @xmath93 is said to be _",
    "generalized symmetric _ if it has the form @xmath176 where @xmath177 is a monotonic increasing and concave function with @xmath178 and @xmath179 .",
    "the rank function in the scalar mac is an example of generalized symmetric function .",
    "the next theorem compares two gaussian macs , with the same total power but different distribution in the power constraints .",
    "it shows that if the distribution of power constraints is more spread out , so does the corresponding max - min fair rate allocation .",
    "the proof is relegated to the appendix .",
    "let @xmath93 be a generalized symmetric rank function defined as @xmath180 , for some vector @xmath181 .",
    "let @xmath182 be a vector that majorizes @xmath69 , and @xmath183 be the generalized symmetric rank function @xmath184 .",
    "then the max - min fair capacity associated to @xmath69 is the same as the max - min fair capacity associated with @xmath182 , and he max - min fair point in @xmath95 is majorized by the max - min fair point in @xmath185 . [",
    "theorem : mac_majorization ]    let @xmath186 be max - min fair in a gaussian mac with power constraints @xmath187 and noise power @xmath188 . if @xmath142 , then @xmath189 .",
    "[ cor : mac_majorization ]      we present a general recursive algorithm that computes the fair solution in gaussian mac .",
    "it is a variation of the algorithm in  @xcite , which computes the max - min fair rate vector in flow control problem .",
    "the algorithm to be described below exploits the submodular property , and has shorter running time .",
    "the basic idea is contained in the next proposition .",
    "let @xmath93 be a function mapping @xmath190 to @xmath94 , and let @xmath191 be a subset of @xmath80 that achieves the minimum @xmath192 let @xmath159 denote the the max - min or proportional fair point ( they are the same by corollary  [ cor : maxmin_pf ] ) in  @xmath95 , we have @xmath193 for all @xmath4 , with equality when @xmath194 .",
    "[ prop : slow_algorithm ]    for each @xmath4 , @xmath4 is contained in a bottleneck @xmath195 of @xmath159 , so that @xmath155 for all @xmath196 .",
    "so @xmath3 must be larger than or equal to the average @xmath197 , and thereby @xmath198 therefore @xmath193 for all @xmath4 .",
    "summing over all @xmath199 , we obtain @xmath200 we must have equality in all the above inequalities .",
    "in particular , @xmath201 for all @xmath199 .",
    "the set @xmath191 is in fact a bottleneck of @xmath159 .",
    "this motivates the max - min algorithm .",
    "[ [ max - min - algorithm ] ] max - min algorithm + + + + + + + + + + + + + + + + +    the algorithm starts by first obtaining the subset @xmath202 described in proposition  [ prop : slow_algorithm ] , and set the rate of users in @xmath191 to @xmath203 .",
    "the rate of other users are computed by recursively applying the above computation to @xmath204 with @xmath205 for @xmath206 .    _",
    "remark : _ it is noted that we only need the submodular property in proving the correctness of the max - min algorithm . the function @xmath93",
    "need not satisfy the monotonic property or @xmath158 . we will use the following lemma in proving the correctness of the algorithm . note that the lemma holds in general for arbitrary @xmath93 .",
    "let @xmath93 be a function from @xmath190 to @xmath94 , and @xmath207 be chosen such that @xmath208 define the function @xmath209 for @xmath210 .    1 .",
    "( non - negativity ) @xmath211 , for all @xmath206 .",
    "[ item1 ] 2 .",
    "( extension of bottleneck ) let @xmath19 be a vector in @xmath95 such that @xmath212 .",
    "let @xmath213 be the restriction of the vector @xmath19 on @xmath214 . if @xmath215 is a bottleneck of @xmath213 in @xmath185 , then @xmath216 is a bottleneck of @xmath19 in @xmath95 .",
    "[ item2 ] 3 .",
    "( preservation of order property ) if @xmath93 satisfies the order property , so does  @xmath183 .",
    "[ item3 ]    ( [ item1 ] ) by construction , we have @xmath217 hence @xmath218 .",
    "( [ item2 ] ) @xmath219 equals @xmath220 , which is @xmath221 by definition . therefore @xmath222 and @xmath223 is a bottleneck of @xmath19 in @xmath95 .",
    "( [ item3 ] ) let @xmath79 , @xmath101 and @xmath224 be subsets of @xmath225 so that @xmath226 and @xmath227 .",
    "if @xmath228 , then @xmath229    suppose @xmath134 satisfies the submodular property . in the polyhedron @xmath95 , the result obtained by the max - min algorithm is the max - min fair vector .",
    "let @xmath19 be the vector returned by the max - min algorithm , and let @xmath191 be a subset of @xmath80 such that @xmath230 . if @xmath231 , then the components in @xmath19 are constant and equal @xmath203 .",
    "it belongs to @xmath95 because for any @xmath128 @xmath232 it is easy to see that @xmath19 is max - min fair .    otherwise , if @xmath233 , then we have to apply the algorithm recursively . in this case",
    ", the vector @xmath19 satisfies the following properties : ( i ) @xmath234 for all @xmath235 and ( ii ) the components of @xmath19 with index in @xmath236 yield the max - min solution to the polymatroid @xmath237 on @xmath236 with rank function @xmath183 defined as in  .",
    "it is easy to check that @xmath183 also satisfies the submodular property .",
    "we first verify that @xmath19 is in @xmath95 . for any subset @xmath238 , we can write @xmath110 as @xmath239 with @xmath240 and @xmath241 .",
    "we decompose @xmath242 as @xmath243 in the last inequality , we have used the defining property of @xmath191 , i.e. , @xmath244 . by the submodularity of @xmath93 , we have @xmath245 therefore @xmath246 , and thus @xmath19 is in @xmath95 .    we now show that for each @xmath154 , @xmath4 is in some bottleneck @xmath168 such that @xmath247 .",
    "we will apply lemma  [ lemma : maxmin ] and conclude that @xmath19 is the max - min vector in  @xmath95 . for @xmath199",
    ", we can take @xmath191 as the required bottleneck @xmath168 . for @xmath248",
    ", @xmath4 is an element of some bottleneck @xmath215 in the polyhedron @xmath185 such that @xmath155 for all @xmath249 . by part  ( [ item2 ] ) in the previous lemma",
    ", @xmath250 is a bottleneck of  @xmath185 . by prop .",
    "[ prop : slow_algorithm ] , we can show that @xmath155 for all @xmath251 .",
    "indeed , @xmath252    therefore @xmath4 is in the bottleneck @xmath253 and @xmath155 for all @xmath254 .",
    "the vector @xmath19 is thereby max - min fair by lemma  [ lemma : maxmin ]    [ [ example-1-continued ] ] example 1 ( continued ) + + + + + + + + + + + + + + + + + + + + +    we compute the max - min fair vector in example 1 .",
    "the minimum @xmath255 is achieved when @xmath256 .",
    "we set @xmath257 .",
    "next define @xmath258 for @xmath259 .",
    "now @xmath260 and @xmath261 .",
    "so in this recursive step , we have the minimum @xmath262 the resulting max - min fair solution is @xmath263    in the max - min algorithm , if we compute the minimum of @xmath132 , @xmath264 , in a straightforward manner by comparing @xmath133 numbers , the complexity of the algorithm is exponential in the number of users .",
    "a more efficient implementation was described in  @xcite if @xmath93 is a rank function . however , when the function @xmath93 satisfies the order property , we have a much faster algorithm .",
    "if the function @xmath93 satisfies the order property and the submodular property , then the max - min fair point in @xmath95 can be computed in @xmath265 time .    in the max - min algorithm , instead of finding the minimum @xmath266 over all subsets of @xmath80 , we sort @xmath267 in nondecreasing order .",
    "this can be done in @xmath268 time . for notational convenience ,",
    "we relabel the users so that @xmath269    since function @xmath93 satisfies the order property , for any @xmath151 , the minimum @xmath270 is achieved by @xmath271 by lemma  [ lemma : order ] . instead of comparing @xmath132 over all subsets @xmath79 of @xmath80 , it is sufficient to examine @xmath272 , for @xmath273 .",
    "the minimum can be found in @xmath274 time . in the next recursion",
    ", the function @xmath275 also satisfies the order property , and @xmath276 the recursion can continue without any further sorting .",
    "there are at most @xmath68 recursive steps and each step takes @xmath274 time .",
    "the total complexity is therefore @xmath265 .",
    "[ [ example-2 ] ] example 2 + + + + + + + + +    consider a scalar gaussian mac with 4 users .",
    "their power constraints are 2 , 8 , 200 , and 300 .",
    "we let @xmath69 be the vector @xmath277 .",
    "the noise power at the receiver is equal to 1 .",
    "let @xmath278 for @xmath128 .",
    "here we use the natural logarithm function .",
    "we want to find the max - min fair rate allocation or the proportional fair rate allocation in @xmath279 .",
    "the function @xmath280 is a rank function and satisfies the order property .",
    "we first compute the minimum of @xmath281 , @xmath282 , @xmath283 and @xmath284 .",
    "the minimum is @xmath285 .",
    "we set @xmath286 .    in the next recursive step ,",
    "set @xmath287 for @xmath288 .",
    "the minimum of @xmath289 , @xmath290 and @xmath291 is @xmath289 .",
    "we set @xmath292 .",
    "let @xmath293 for @xmath294 , and compute the minimum of @xmath295 and @xmath296 .",
    "the minimum is @xmath297 , and we assign @xmath298 to both @xmath299 and @xmath300 .",
    "the max - min fair rate allocation is thus @xmath301    the computation of the nash bargaining solution in @xmath95 with disagreement point @xmath21 amounts to finding the max - min fair solution in  @xmath185 , where @xmath302 it is noted that if @xmath93 is a rank function , the translated @xmath183 in general does not satisfy the monotonic property .",
    "however , the max - min algorithm works without assuming the monotonic property .",
    "we can apply the max - min algorithm to find the nash bargaining solution for any disagreement point .",
    "we conclude this section by presenting an algorithm for computing nash bargaining solution when the rank function is generalized symmetric .",
    "let @xmath93 be a generalized symmetric rank function on @xmath80 , @xmath303 for @xmath128 , and @xmath69 is a vector in @xmath33 such that .",
    "@xmath304 then for any @xmath305 , the minimum @xmath306 is equal to @xmath307    let @xmath308 denote @xmath309 , where the summation is over all indices except  @xmath4 .",
    "the lemma claims that @xmath310 , is the minimum . by lemma  [ lemma : schur",
    "] , it suffices to show that @xmath311 is majorized by @xmath312 for any choice of @xmath313 , @xmath314 .    by subtracting @xmath315 from both vectors ,",
    "we only need to show that @xmath316 where @xmath111 denote the set @xmath317 .",
    "let @xmath318 be the vector @xmath319 , and @xmath320}$ ] , @xmath321 } , \\ldots , q_{[k]}$ ] be the components of @xmath318 in nondecreasing order .",
    "it is easy to see that @xmath322}.\\ ] ] therefore @xmath323 majorizes @xmath318 .",
    "this finishes the proof of the lemma .    for a generalized symmetric rank function @xmath93 , the nash bargaining solution in @xmath95 with the canonical disagreement point",
    "can be computed in @xmath265 time .",
    "assume without loss of generality that the power constraints are arranged in nondecreasing order .",
    "let @xmath324 denote the canonical disagreement point , i.e. , for @xmath154 , @xmath325 .",
    "let @xmath326 we relabel the users so that @xmath327 . by the previous lemma",
    ", the minimum @xmath328 is @xmath329 .",
    "therefore , @xmath330 the minimum can be obtained efficiently after sorting @xmath331 .",
    "suppose that the minimum is @xmath332 .",
    "we set @xmath333 to @xmath334 for @xmath335 .",
    "we next show that the same procedure can be repeated in the next recursive step .",
    "let @xmath336 , and @xmath337 for @xmath338 .",
    "it is easy to see that @xmath183 is generalized symmetric .",
    "also , we can verify that @xmath339 is the canonical disagreement point for @xmath183 .",
    "indeed , @xmath340 for all @xmath248 .",
    "each recursive step takes @xmath341 .",
    "as there are at most @xmath68 steps , the complexity for computing the nash bargaining solution with the canonical disagreement point is @xmath265 .",
    "[ [ example-2-contd ] ] example 2 ( contd ) + + + + + + + + + + + + + + + + + +    we compute the nash bargaining solution in the mac as in example 2 , with the canonical disagreement point @xmath324 .",
    "@xmath342    the minimum of @xmath343 for @xmath344 , is @xmath345 .",
    "therefore , @xmath346    for @xmath347 , let @xmath348 .",
    "@xmath349 the last equation yields the bottleneck .",
    "we set @xmath350    the resulting nash bargaining solution is @xmath351",
    "in a @xmath68-user gaussian broadcast channel , the received signal of the @xmath4th user is @xmath352 where @xmath353 is a zero - mean gaussian random variable with variance @xmath354 and @xmath355 is the noise at the @xmath4th receiver , which is modeled as a gaussian variable with mean zero and variance  @xmath356 .",
    "we will assume that @xmath357 throughout this section .",
    "every point @xmath19 on the boundary of the capacity region satisfies @xmath358 for some @xmath359 such that @xmath360      in order to obtain the symmetric capacity in a bc , we solve a related problem of finding the power distribution so that the users have a common sinr @xmath361 , i.e. , @xmath362 the noise vector @xmath363 can be expressed in terms of the power vector @xmath364 by a matrix multiplication @xmath365 let @xmath366 denote the lower triangular matrix in the above equation .",
    "the diagonal elements of @xmath366 all equal @xmath367 , and the elements below the diagonal are all  @xmath368 .",
    "the following lemma is obtained by straightforward calculation .",
    "the inverse of @xmath366 is a non - negative matrix .",
    "the @xmath369-entry of @xmath370 is @xmath371_{ij } = \\begin{cases } 0 & \\text{if } i < j , \\\\",
    "\\gamma & \\text{if } i = j , \\\\   \\gamma^2 ( 1+\\gamma)^{i - j-1 }     & \\text{otherwise}. \\end{cases}\\ ] ]    hence , given the noise powers @xmath372 and the sinr requirement @xmath361 , we get the corresponding power allocation by multiplying @xmath370 by @xmath363 .",
    "the following theorem is an immediate consequence .",
    "it says that in a gaussian bc , users with lower noise power uses less power .    in a gaussian bc with noise powers @xmath373 ,",
    "the powers corresponding to the symmetric rate allocation are in increasing order , @xmath374 [ theorem : bc_sym_power_order ]    let @xmath364 be the power vector so that all users have sinr @xmath361 , and let @xmath375 be the @xmath369-entry of @xmath370 .",
    "the power of user @xmath4 can be obtained by @xmath376 since the first term is nonnegative , we can remove the first term and get @xmath377 it is clear from the previous lemma that @xmath375 depends only on @xmath378 , hence @xmath379 we now use the assumption @xmath373 to obtain @xmath380 consequently @xmath381 .",
    "we denote the required total power by @xmath382 , which can be computed by @xmath383 \\cdot g_\\gamma^{-1 } { \\mathbf{n } }   \\\\   & = n_1\\theta_1(\\gamma ) + n_2\\theta_2(\\gamma ) + \\ldots + n_k   \\theta_k(\\gamma)\\end{aligned}\\ ] ] where @xmath384 denote the sum of elements in the @xmath45th column of @xmath370 .",
    "it is noted that the function @xmath384 is a convex function of @xmath361 for all @xmath45 .",
    "furthermore , we have @xmath385 given a noise vector @xmath363 , the function @xmath177 is a convex and monotonically increasing function of @xmath361 .",
    "the next theorem compares the symmetric capacity of two broadcast channels with the same total power constraint .",
    "if @xmath386 , then @xmath387 . in other words , @xmath388 is a schur - convex function .",
    "[ theorem : bc_sym_schur ]    assume without loss of generality that the components of @xmath389 and @xmath390 are sorted in nondecreasing order .",
    "for a given total power constraint and noise vector @xmath363 , we can obtain the sinr by solving the equation @xmath391 the proof is complete if we can show that @xmath392 for all @xmath361 , i.e. , @xmath393 is schur - concave for all  @xmath361 ( fig .",
    "[ fig : phi ] ) . indeed , for @xmath394",
    ", we have @xmath395 and @xmath396 by .",
    "therefore @xmath393 is schur - concave by schur s criterion .        for fixed noise powers",
    ", the symmetric capacity is a convex function of the total power .    for a fixed noise vector @xmath363 ,",
    "the function @xmath382 is a convex function of @xmath361 .",
    "hence the inverse function @xmath397 is a concave function .",
    "[ [ algorithm-1 ] ] algorithm + + + + + + + + +    we have a numerical algorithm computing the symmetric capacity in gaussian bc by means of the function @xmath382 . for a given total power @xmath354 , we search for the value of @xmath361 so that @xmath398 . this can be done easily as @xmath177 is a monotonic function of @xmath361 .",
    "we then compute the data rate from @xmath361 .",
    "the infimum of @xmath399 , taken over all @xmath68-user gaussian bc , is zero .",
    "the sum capacity is attained if we allocate all power to user 1 , @xmath400 suppose the noise power of user @xmath68 , @xmath401 , is increased , while the others are fixed , the value of the function @xmath382 is increased for all  @xmath361",
    ". then the symmetric capacity is decreased , but the sum capacity remains constant . by taking @xmath401 approaching infinity , @xmath399 approaches zero .",
    "the capacity region written in the following form is useful for computing the proportional fair allocation : @xmath402 with @xmath403 the quantity @xmath404 represents the sum of powers @xmath405 .",
    "let @xmath406 be a concave and monotonically increasing function for @xmath407 .",
    "using the notation in  , the point that maximizes @xmath408 in the capacity region of a bc with total power @xmath354 and noise powers @xmath373 satisfies @xmath409 for @xmath410 .    in particular a proportional fair allocation satisfies the equation @xmath411 for @xmath410 . [",
    "theorem : broadcast_pf ]    suppose that @xmath412 maximizes @xmath413 .",
    "this point lies on the boundary of the capacity region .",
    "the tangent plane at @xmath19 must be orthogonal to the gradient",
    "@xmath414 i.e. , it must be orthogonal to @xmath415 for all @xmath213 on the tangent plane .",
    "differentiate with respect to @xmath416 , we obtain for @xmath410 , @xmath417 the two fractions in the above vector is in the @xmath4th and @xmath418st component .",
    "this must be orthogonal to the gradient @xmath419 .",
    "equating the dot product to zero , we get @xmath420    for the proportional fair point , we take @xmath406 to be the log function for all @xmath4 .",
    "let @xmath17 and @xmath421 be the rate vector and sinr vector corresponding to the proportional fair allocation , with @xmath422 .",
    "then the rates and sinr of the users are in decreasing order ,",
    "i.e. , @xmath423 and @xmath424 [ cor : bc_pf_rate_order ]    from , we have @xmath425 since the rate is a monotonically increasing function of the sinr , the inequalities about sinr follows immediately .",
    "the infimum of @xmath58 , taken over all @xmath68-user gaussian bc , is equal to the lower bound @xmath59 .",
    "suppose that we fix the noise powers @xmath426 and take @xmath427 .",
    "equation   implies that @xmath428 for all @xmath4 and @xmath45 .",
    "when @xmath354 is small , @xmath429 hence @xmath430 for all @xmath4 and @xmath45 , and @xmath431 at the proportional fair allocation as @xmath427 .",
    "we have the following limits , @xmath432 and @xmath433 we obtain @xmath434 the right hand side can be arbitrarily close to @xmath59 if @xmath435 for all @xmath436 .    in a gaussian bc with noise power @xmath437 ,",
    "the corresponding powers corresponding to the proportional fair allocation are in increasing order , @xmath438 [ theorem : bc_pf_power_order ]    we first prove the theorem in a two - user case .",
    "the noise power of user @xmath4 is @xmath356 , ( @xmath439 ) with @xmath440 . by theorem  [ theorem : broadcast_pf ] , the proportional fair rate allocation is @xmath441 where @xmath442 , @xmath443 is chosen such that @xmath444 that is , the value of @xmath442 satisfies @xmath445 the power of user 1 is @xmath446 and the power of user 2 is @xmath447 .",
    "we want to show that   can not hold if @xmath448 .",
    "we will apply the inequality @xmath449 which holds for @xmath450 .",
    "this inequality is an immediate consequence of the inequality @xmath451 applying the inequality , we get an upper bound @xmath452 and a lower bound @xmath453 if @xmath448 , we can combine the two bounds above , @xmath454 therefore , we must have strict inequality in   when @xmath448 .",
    "it is noted that the bounds in the above argument is valid for any @xmath455 and @xmath456 .    in a gaussian bc with @xmath68 users , consider the pair of consecutive users @xmath4 and  @xmath457 . at the proportional fair point in the capacity region ,",
    "@xmath458 by theorem  [ theorem : broadcast_pf ] . by setting @xmath459",
    "we get @xmath460 we can proceed as in the 2-user case and conclude that @xmath461 .    from numerical examples , we have the following conjecture .",
    "let @xmath462 denote the proportional fair capacity of a gaussian bc with noise vector @xmath363 and total power  @xmath354 .",
    "if @xmath386 , then @xmath463 [ conjecture ]      we will use the notation for the capacity region in  , and present an numerical algorithm that maximizes @xmath464 in the capacity region of a gaussian  bc .",
    "it is assumed that @xmath406 is a strictly monotonically increasing and concave function , so that the inverse of the derivative @xmath465 is easy to compute . if @xmath406 is the logarithm function , then the resulting point is the proportional fair solution . if @xmath466 , the result is the nash bargaining solution with disagreement point @xmath21 .",
    "theorem  [ theorem : broadcast_pf ] says that the equation @xmath467 must holds for the optimal solution .",
    "we use this equation to express @xmath468 in terms of @xmath416 for @xmath469 .",
    "it reduces the problem to a one dimensional search . given any @xmath470 we",
    "first compute @xmath471 by @xmath472 and get @xmath473 by solving @xmath474    in similar way , we compute @xmath3 and @xmath416 for @xmath475 .",
    "finally @xmath476 can be obtained once we know @xmath477 .",
    "define the function @xmath478 as @xmath479 it is a function of @xmath470 as the variable @xmath476 , @xmath480 , @xmath481 and @xmath477 all depend on @xmath470 .",
    "we can now search for the zero of @xmath478 numerically , say @xmath482 . from @xmath483 ,",
    "we get @xmath484 by method described above",
    ". the vector @xmath485 will satisfy the condition in theorem  [ theorem : broadcast_pf ] and hence is the optimal solution . since any zeros of @xmath486 gives rise to an optimal solution and",
    "we know that there the optimal solution is unique , the function @xmath486 has only one zero .",
    "we show how to pick a point in the capacity region of gaussian mac and bc according to some fairness criteria . in the gaussian mac",
    ", there is a strong notion of fairness , namely there is a point on the dominant face that are majorized by all other points on the dominant face , and are both max - min and proportional fair .",
    "we can thus call this _ the _ fair point in the capacity region . in some particular cases , the fair point can be computed in @xmath265 time . for the gaussian bc , the problem of locating the proportional fair solution or nash bargaining solution reduces to a one - dimensional search . in both channels ,",
    "fair rate allocation can be compute efficiently .",
    "( @xmath487 ) for any @xmath488 , suppose that @xmath4 is contained in a bottleneck @xmath111 , and @xmath489 .",
    "if we want to increase @xmath3 , we have to decrease @xmath490 for some other @xmath491 .",
    "since @xmath3 is the largest in @xmath492 , we must have @xmath493 .",
    "the vector @xmath19 is thus max - min fair .",
    "( @xmath494 ) conversely , suppose that @xmath19 is a vector such that @xmath495 are all the bottlenecks that contain @xmath4 , and @xmath3 is not maximal in all such bottlenecks , i.e. , @xmath496 for all @xmath497 .",
    "we can choose @xmath498 in @xmath499 such that @xmath500 .",
    "if we increase @xmath3 by @xmath501 and decrease each @xmath502 by sufficiently small @xmath501 , the resulting vector remains in  @xmath95 .",
    "the vector @xmath19 is thereby not max - min fair .",
    "suppose that @xmath79 and @xmath101 are both bottlenecks of @xmath19 , i.e. , @xmath503 and @xmath504 .",
    "@xmath505 therefore , all inequalities above are in fact equalities .",
    "in particular , @xmath506 and @xmath507 .",
    "suppose that @xmath7 be the max - min fair point in  @xmath95 , where @xmath93 satisfies the order property . by relabeling",
    ", we can assume without loss of generality that @xmath508 where @xmath509 the sets @xmath510 , @xmath511 , are bottlenecks of @xmath7 . in particular , we have @xmath512 i.e. , the max - min fair solution lies on the dominant face of  @xmath95 .",
    "[ prop : dominant_face ]      for any element @xmath515 , there is a bottleneck @xmath516 so that @xmath517 . if @xmath515 and @xmath518 , then @xmath519 . hence @xmath516 must be a subset of  @xmath520 , for all @xmath515 . by taking the union of @xmath516 over all @xmath521",
    ", we get @xmath522 and we can conclude that @xmath520 is also a bottleneck of @xmath7 by lemma  [ lemma : polymatroid_lemma ] .",
    "suppose that @xmath533 is a point in  @xmath1 that does not majorize @xmath527 .",
    "there is an index @xmath151 , @xmath534 , such that @xmath535 } > \\sum_{i=1}^k w_i.\\ ] ] we can find an @xmath536 so that @xmath537 .",
    "( define @xmath538 and @xmath539 if necessary . )",
    "consider the collection @xmath540 of all subsets @xmath90 such that @xmath541 and @xmath542 .",
    "the number of such subsets is @xmath543 since @xmath544 is constant for @xmath545 , we have @xmath546 for all @xmath547 . hence @xmath548 } > \\sum_{i=1}^k w_i = \\sum_{i\\in   s } w_i.\\ ] ] we sum the above over all @xmath549 , @xmath550 the left hand side in the above inequality equals @xmath551 where @xmath552 similarly , the right hand side of   equals @xmath553 we rewrite as @xmath554 or equivalently @xmath555      suppose without loss of generality that @xmath187 and @xmath559 .",
    "let @xmath159 and @xmath560 be the max - min fair point in @xmath95 and @xmath185 respectively .",
    "it is clear that @xmath561 , @xmath562 , and both @xmath93 and @xmath183 satisfy the order property . by theorem  [ theorem :",
    "order ] , we obtain @xmath563 and @xmath564 .",
    "we want to show @xmath565 for @xmath29 .    as in the proof of prop .",
    "[ prop : dominant_face ] , a bottleneck of the max - min fair vector is of the form @xmath566 . we can disregard all constraints except those in the form @xmath567 for @xmath568 , @xmath569 .",
    "let @xmath151 be any integer between 1 and @xmath68 . by prop .",
    "[ prop : nested ] , the point @xmath159 maximizes @xmath570 in the region      expressed in terms of matrix , the constraints become @xmath572 , where @xmath573\\ ] ] and @xmath574.\\ ] ] let @xmath575 denote the column vector @xmath576^t$ ] in which exactly @xmath151 components are equal to 1 . the maximal value in the linear program @xmath577 is equal to @xmath570 . by duality of linear programming , the minimal value of the dual problem , with @xmath578 s as the dual variables , @xmath579 coincides with @xmath570 .    since @xmath142",
    ", we know that @xmath580 for @xmath581 . if we replace @xmath582 by @xmath583 , we obtain another linear program , @xmath584 the minimal value equals @xmath585 .",
    "we are optimizing a smaller objective function over the same feasible region . as a result",
    ", we must have @xmath586 ."
  ],
  "abstract_text": [
    "<S> the capacity region of a channel consists of all achievable rate vectors . picking a particular point in the capacity region </S>",
    "<S> is synonymous with rate allocation . </S>",
    "<S> the issue of fairness in rate allocation is addressed in this paper . </S>",
    "<S> we review several notions of fairness , including max - min fairness , proportional fairness and nash bargaining solution . </S>",
    "<S> their efficiencies for general multiuser channels are discussed . </S>",
    "<S> we apply these ideas to the gaussian multiple access channel ( mac ) and the gaussian broadcast channel ( bc ) . </S>",
    "<S> we show that in the gaussian mac , max - min fairness and proportional fairness coincide . for both gaussian mac and bc </S>",
    "<S> , we devise efficient algorithms that locate the fair point in the capacity region . </S>",
    "<S> some elementary properties of fair rate allocations are proved . </S>"
  ]
}