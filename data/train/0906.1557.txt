{
  "article_text": [
    "in the _ unweighted set cover problem _ , we are given @xmath0 base elements and a finite collection of subsets of them . our objective is to find a _",
    "i.e. , a subcollection of subsets which covers all the elements , of minimum - cardinality .",
    "this problem has applications in diverse contexts such as efficient testing , statistical design of experiments , crew scheduling for airlines , and it also arises as a subproblem of many integer programming problems . for more information ,",
    "see , e.g. , @xcite , chapter 3 .",
    "when we consider instances of unweighted set cover such that each subset has at most @xmath2 elements , we obtain the _ unweighted @xmath2-set cover problem_. this problem is known to be np - complete @xcite , and it is max snp - hard for all @xmath11 @xcite .",
    "= -1it is well known ( see @xcite ) that a greedy algorithm is an @xmath8-approximation algorithm for unweighted @xmath2-set cover , where @xmath12 is the @xmath2th harmonic number and that this bound is tight @xcite .",
    "for unbounded values of @xmath2 , slavk @xcite showed that the approximation ratio of the greedy algorithm for unweighted set cover is @xmath13 .",
    "feige @xcite proved that unless @xmath14 , unweighted set cover can not be approximated within a factor @xmath15 for any @xmath16 .",
    "raz and safra @xcite proved that if @xmath17 , then for some constant @xmath18 , unweighted set cover can not be approximated within a factor @xmath19 .",
    "this result shows that the greedy algorithm is an asymptotically best possible approximation algorithm for this problem ( unless @xmath14 ) .",
    "goldschmidt , hochbaum , and yu @xcite modified the greedy algorithm for unweighted @xmath2-set cover and showed that the resulting algorithm has a performance guarantee of @xmath20 .",
    "halldrsson @xcite presented an algorithm based on a local search that has an approximation ratio of @xmath21 for unweighted @xmath2-set cover and a ( @xmath22)-approximation algorithm for unweighted 3-set cover .",
    "duh and frer @xcite later improved this result and presented an ( @xmath23)-approximation algorithm for unweighted @xmath2-set cover .",
    "levin @xcite improved their result and obtained an ( @xmath24)-approximation algorithm for @xmath25 , and athanassopoulos et al .",
    "@xcite presented a further improved algorithm for @xmath26 with approximation ratio approaching @xmath27 for large values of @xmath2 .",
    "all of these improvements @xcite are essentially the greedy algorithm , with modifications on the way it handles small subsets .",
    "that is , they are all based on running the greedy algorithm until each new subset covers at most @xmath28 new elements ( the specific value of @xmath28 depends on the exact algorithm ) , and then use a different method to cover the remaining base elements .    in @xcite ,",
    "hochbaum and levin consider the problem of covering the edges of a bipartite graph @xmath29 using a minimum number of @xmath30 bicliques ( which need not be subgraphs of @xmath29 ) .",
    "this problem arises in the context of optical networks design ( see @xcite ) , where @xmath1 is typically @xmath31 or @xmath32 .",
    "in addition , it can be viewed as an instance of unweighted @xmath33set cover , where the base elements are @xmath29 s edges , and the input collection consists of all @xmath30 graphs over @xmath29 s vertices . in that paper , they analyze the greedy algorithm applied for this special case , and show that it returns a solution whose cost is at most @xmath34 ( where @xmath35 is the optimal cost ) .",
    "they also present an improved algorithm for the case @xmath36 based on the property of the bipartite graph @xmath29 , achieving an approximation ratio of @xmath37 .    if , in addition , the input collection contains some graphs that have",
    "up to @xmath2 edges , @xmath38 , then the resulting problem is an instance of the _ @xmath39-uniform unweighted set cover problem _ ( see @xcite ) , which we denote by @xmath39-uusc .",
    "that is , it is the variant of unweighted set cover where the size of every subset varies between @xmath1 to @xmath2 ( @xmath3 ) , and the input contains all possible subsets of size @xmath1 .",
    "in fact , their analysis of the greedy algorithm is for this generalization .",
    "thus , the algorithms for unweighted @xmath2-set cover serve as a benchmark for our algorithms for this problem .",
    "recall that the dual problem of unweighted @xmath2-set cover is the _ ( maximum ) unweighted @xmath2-set packing problem _ : we are given @xmath0 base elements and a collection of subsets of them .",
    "our objective is to find a _ packing _",
    ", i.e. , a subcollection of _ disjoint _ subsets , of maximum - cardinality . the fractional version of unweighted set packing is the dual linear program of the fractional version of unweighted set cover .",
    "the greedy algorithm for this problem , which returns any maximal subcollection of subsets , achieves an approximation ratio of @xmath40 .",
    "hurkens and schrijver @xcite proved that for unweighted @xmath2-set packing , a local search algorithm is a @xmath41-approximation algorithm .",
    "athanassopoulos et al .",
    "@xcite use this local search algorithm in each of their `` packing phases '' , and then use the method of duh and frer @xcite in a final phase .",
    "the weighted @xmath2-set cover problem and the weighted @xmath2-set packing problem are defined analogously . however , this time each set has a cost ( in the set cover variant ) or a profit ( in the set packing variant ) and the goal is to minimize the total cost or to maximize the total profit , respectively . the greedy algorithm for the unweighted versions and the weighted versions",
    "have the same approximation guarantee ( for each of the two problems ) .",
    "hassin and levin @xcite improved the resulting approximation ratio for the weighted @xmath2-set cover problem for constant values of @xmath2 , and arkin and hassin @xcite improved the greedy algorithm for the weighted @xmath2-set packing problem .",
    "the method of _ local search _ has been widely used in many hard combinatorial optimization problems .",
    "the idea is simple : start with an arbitrary ( feasible ) solution . at each step , search a ( relatively small ) neighborhood for an improved solution .",
    "if such a solution is found , replace the current solution with it .",
    "repeat this procedure until the neighborhood ( of the current solution ) contains no improving solutions . at this point ,",
    "return the current solution , which is _ locally optimal _ , and terminate .",
    "observe that in order for this method to run in polynomial time , each local change should be computable in polynomial time , and the number of iterations should be polynomially bounded .",
    "local search algorithms are mainly used in the framework of metaheuristics , such as simulated annealing , taboo search , genetic algorithms , etc . from a practical point of view",
    ", they are usually very efficient and achieve excellent results - the generated solutions are near optimal .",
    "however , from a theoretical point of view , there is usually no guarantee on the their worst - case performance . in the thorough survey @xcite",
    ", angel reviews the main results on local search algorithms that have a worst - case performance guarantee .",
    "see also halldrsson @xcite for applications of this method to @xmath2-dimensional matching , @xmath2-set packing , and some variants on independent set , vertex cover , set cover and graph coloring problems .    in @xcite ,",
    "khanna et al .",
    "present the paradigm of _ non - oblivious _ local search .",
    "the idea , as they comment , has been implicitly used in some known algorithms such as interior - point methods . in that paper , they define the formal general algorithm in the context of max snp .",
    "then , they develop non - oblivious local search algorithms for max @xmath2-sat , and for the problem max @xmath2-csp which they define , which is a generalization of all the problems in max snp .",
    "the idea in the context of set cover is as follows .",
    "any standard ( i.e. , _ oblivious _ ) local search algorithm must explicitly have the same objective : minimizing the number of picked sets .",
    "( different such algorithms may look at different neighborhoods ) .",
    "however , a _",
    "non - oblivious _ local search algorithm may have a different objective function to direct the search .",
    "* paper overview . * in section  [ generalalg ] , we present an algorithm for @xmath39-uusc ( for any values of @xmath42 ) .",
    "this algorithm is based on applying the best known approximation algorithm for set packing ( described in @xcite ) in each of the packing phases .",
    "for @xmath39-uusc where @xmath43 , this algorithm exhibits all previously known methods to improve upon the greedy algorithm for unweighted @xmath44set cover .",
    "hence , this algorithm serves as a benchmark for our improved algorithm .",
    "for the special case of @xmath4 it achieves an asymptotic approximation ratio of @xmath9 . in section [ alg24 ] , we present an improved algorithm for the case of @xmath4 , which is based on non - oblivious local search , and we show that its ( absolute ) approximation ratio is at most @xmath45 . in section  [ concluding ] , we discuss some open questions .",
    "our algorithm is described in figure [ fig : a1alg ] .",
    "+ * packing phases : * + for @xmath6 downto @xmath46 do : + find a maximal collection of disjoint @xmath5-sets using + a @xmath47-approximation algorithm .",
    "+   + * phase @xmath1 : * + cover the remaining base elements with disjoint @xmath1-sets .",
    "+    we analyze this algorithm using a _ factor revealing linear program_. we assume that @xmath48 , @xmath49 , @xmath50 .",
    "we also assume that the input satisfies the subset closure property and , consequently , that the cover consists of disjoint subsets .",
    "note that in explicit representation , this causes the input size to increase by a factor of @xmath51 at the most , since for each subset , all its non - trivial subsets are added to the collection",
    ". however , such explicit representation is not necessary for our algorithm , and we use it only for the analysis .",
    "another simplifying assumption for the analysis is :    [ apx_opt ] the input consists exclusively of the sets in @xmath52 and @xmath35 . in addition , @xmath53 .",
    "the justification of this assumption is fairly simple .",
    "regarding its first part , observe that if the sets selected by @xmath54 in phase @xmath5 can not be improved , then this collection of @xmath55sets can not be improved by replacing some of them by subsets of @xmath35 ( or subsets of them ) .",
    "hence , subsets outside @xmath56 can be removed .",
    "for the second part , observe that if there is a subset @xmath57 in both @xmath52 and @xmath35 , removing @xmath57 and its elements from the input results in an instance for which @xmath58 is a feasible solution and @xmath59 is an optimal solution .",
    "but the approximation ratio for this new instance is @xmath60 .    at any point in the execution of the algorithm",
    ", we define an @xmath55set to be a subset of size @xmath5 , such that all of its elements are uncovered .",
    "we define @xmath61 to be the ratio of the number of @xmath62sets in _ opt _ in the beginning of packing phase @xmath5 , to @xmath63 , @xmath64 , @xmath65 , and for phase @xmath1 we define @xmath66 to be the ratio of the number of uncovered elements in the beginning of phase @xmath1 , to @xmath67 .",
    "our analysis of algorithm @xmath54 is similar to that of @xcite . in each packing phase",
    "@xmath5 @xmath68 we find a collection of @xmath55sets which is maximal .",
    "therefore , in all of the next phases @xmath69 @xmath70 there are no @xmath55sets available .",
    "similarly , in phase @xmath1 there are no @xmath55sets available , @xmath71 .",
    "thus : @xmath72    denote by @xmath73 the remaining uncovered elements in the beginning of phase @xmath5 , @xmath74 . by definition of @xmath61 ,",
    "their number is @xmath75 . in packing phase @xmath5 , we pick @xmath55sets that cover the elements in @xmath76 . since @xmath77",
    "their number is : @xmath78 at the beginning of packing phase @xmath5 , there are at least @xmath79 available @xmath55sets .",
    "therefore , the @xmath80 approximation algorithm picks at least @xmath81 @xmath55sets , thus covering at least @xmath82 new elements .",
    "hence , @xmath83 . using ( [ numofdiffv ] ) and omitting the @xmath84 term , this yields : @xmath85 define @xmath86 to be the number of @xmath55sets that are picked in packing phase @xmath5 , @xmath64 .",
    "then ( [ numofdiffv ] ) yields : @xmath87 and for phase @xmath1 define @xmath88 as : @xmath89 note that @xmath90 is the number of @xmath91sets that are picked and possibly an additional set of size less than @xmath1 , covering the remaining elements . due to this",
    "last set , we obtain an _ asymptotic",
    "_ approximation ratio .",
    "specifically , it is @xmath92 .",
    "using ( [ t_i]),([t_p ] ) , we obtain : @xmath93    thus , maximizing the right - hand side of ( [ primalub ] ) subject to the constraints ( [ sumle1a]),([sumle1b]),([approxcons ] ) and @xmath94 , yields an upper - bound on the approximation ratio of algorithm @xmath54 .",
    "observe that asymptotically , the term @xmath95 is arbitrarily small .",
    "for convenience , since it is a constant in the objective function , we omit it .",
    "the resulting lp is : + * program * @xmath96 @xmath97 it is possible to derive a closed - form solution for this lp .",
    "[ lp_solution ] the solution of program @xmath96 is given by :    * * case 1 : * @xmath98 even : [ primalsolevendiff ] @xmath99 for all @xmath100 , @xmath101 , and all other @xmath61 s are zeros . * * case 2 : * @xmath98 odd : [ primalsolodddiff ] @xmath99 for all @xmath102 , @xmath103 , and all other @xmath61 s are zeros .",
    "@xmath54 is an asymptotic @xmath104-approximation algorithm for @xmath39-uusc , where @xmath105 is @xmath96 s objective function value , and is given by : @xmath106    the proof is technical , and can be found in the appendix .",
    "this is an asymptotic approximation ratio due to the @xmath107 term which we neglected .",
    "@xmath54 is an asymptotic @xmath108-approximation algorithm for @xmath109-uusc .",
    "in this section , we describe an improved algorithm for the case @xmath4 .",
    "that is , subsets sizes are between @xmath31 to @xmath110 , and all possible @xmath111sets are available . our algorithm is based on a _ non - oblivious _ local search .",
    "specifically , denote by @xmath112 , the number of @xmath113-sets in @xmath52 , respectively .",
    "then the number of base elements is @xmath114 and the set cover objective is to minimize @xmath115 .",
    "however , the objective of our algorithm is to _ maximize _ @xmath116 .",
    "this is equivalent to minimize @xmath117 . intuitively , the large sets are given higher priority because a cover which consists of many large sets is good ( due to the disjointness assumption ) .",
    "observe that this objective function is related to that of packing problems , which are the dual of covering problems .",
    "our local search algorithm is described in figure [ fig : a2alg ] .",
    "it is parameterized by @xmath84 , which we assume to be small enough , say @xmath118 , and in addition , without loss of generality we assume that @xmath119 is an integer .",
    "+ 1 . start with an arbitrary feasible cover .",
    "perform a _ local search improvement step : _ + remove up to @xmath119 @xmath120 and @xmath121sets , + insert any number of @xmath120 and @xmath121sets , so as to maximize @xmath122 .",
    "goto step 2 , until no local search improvement step exists .",
    "cover the remaining base elements with @xmath111sets .",
    "+    @xmath52 , the cover returned by the algorithm , is a _",
    "local optimum_. the following observation is trivial :    [ apxoptsameorder ] every feasible solution @xmath123 is of size @xmath124 .",
    "consequently , @xmath125 , @xmath126 .",
    "note that this observation implies that if @xmath127 , then @xmath52 is also an optimal solution .",
    "we use the following definition for convenience :    the @xmath55sets in @xmath35 are called _",
    "@xmath55columns _ ; the @xmath55sets in @xmath52 are called _",
    "@xmath55rows_. we simply use _ columns _ and _ rows _ in places where their size is irrelevant or clear from the context .      in order to analyze the performance of algorithm @xmath128 , we assume , as in the previous section , that the input collection satisfies the subset closure property , and that feasible solutions consist of disjoint subsets .",
    "we also continue to assume assumption [ apx_opt ] , i.e. , that the input is @xmath56 , where @xmath53 .",
    "the next assumption , which is less trivial , restricts the type of instance in the bad examples for the algorithm :    [ opt4sets ] the instance belongs to one of the following two types :    * type a : @xmath35 consists exclusively of @xmath121columns , @xmath52 consists of @xmath129 and @xmath121rows , * type b : @xmath35 consists exclusively of @xmath120 and @xmath121columns , @xmath52 consists exclusively of @xmath111 and @xmath121rows .    in order to justify this assumption , we prove the following result :    [ lemma_opt4sets ] let @xmath130 be a given instance .",
    "let @xmath52 be a local optimum in @xmath130 , let @xmath123 be an arbitrary ( feasible ) solution in @xmath130 with @xmath131 , and let @xmath132 .",
    "then there exists an instance @xmath133 having solutions denoted by @xmath134 and @xmath135 , satisfying : ( i ) @xmath135 is a local optimum in @xmath133 achieving the same approximation ratio , i.e. , @xmath136 , ( ii ) @xmath134 contains no @xmath111columns , ( iii ) @xmath134 contains no @xmath120columns or @xmath135 contains no @xmath120rows .",
    "recall that @xmath137 by assumption .",
    "we refer to @xmath123 s sets as columns . given @xmath130",
    ", we construct the new instance @xmath133 in two phases . in phase",
    "@xmath138 we eliminate the @xmath111columns in @xmath123 ( if any ) ; in phase @xmath31 we try to eliminate the @xmath120columns in it .",
    "we begin by describing phase @xmath138 .",
    "denote by @xmath139 the number of @xmath111 and @xmath120rows in @xmath52 , and by @xmath140 the number of @xmath111columns in @xmath123 .",
    "we may assume that @xmath141 , otherwise both @xmath52 and @xmath123 are optimal solution ( consisting entirely of @xmath121sets ) .",
    "we show how to eliminate @xmath142 @xmath111columns from @xmath123 .",
    "thus , if @xmath143 we may recursively apply this transformation to the resulting new instance , until ( the new ) @xmath123 contains no @xmath111columns .",
    "in addition , the approximation ratio , @xmath105 , remains the same .",
    "let @xmath144 be a collection of @xmath142 @xmath111columns in @xmath123 ( if @xmath145 then it is unique ) .",
    "then for each @xmath111column @xmath146 , there exists a distinct @xmath111 or @xmath120row in @xmath52 which we denote by @xmath147 .",
    "let @xmath133 be the instance in which each @xmath146 is extended to a @xmath120column @xmath148 and @xmath149 is extended to @xmath150 , where @xmath151 is a distinct new base element corresponding to @xmath18 .",
    "these extended sets will be referred to as _",
    "new_. sets from which new sets were obtained will be called _ source sets_.    construct from @xmath52 a feasible solution for @xmath133 by replacing each source row by the new row extending it .",
    "denote the resulting collection by @xmath135 .",
    "similarly , construct @xmath134 from @xmath123 by replacing each source column in @xmath123 by the new column extending it .",
    "that is , @xmath134 contains new @xmath120columns obtained from source @xmath111columns in @xmath123 ; @xmath135 contains new @xmath120 and @xmath121rows obtained from source @xmath111 and @xmath120rows in @xmath52 .",
    "we show that @xmath135 is a local optimum in @xmath133 .",
    "suppose to the contrary that this is not so .",
    "then there exist a row collection @xmath152 , and a subset collection @xmath153 consisting of columns and ( possibly , by the subset - closure assumption ) of sub - rows of @xmath154 satisfying : ( i ) @xmath155 , and ( ii ) replacing @xmath154 by @xmath153 improves the objective function value .",
    "more specifically , for @xmath156 , denote by @xmath157 and @xmath158 the number of @xmath62sets in @xmath154 and @xmath153 , respectively .",
    "then by assumption : @xmath159 let @xmath160 consist of the source ( @xmath111 and @xmath120)rows from which the new ( @xmath120 and @xmath121)rows in @xmath154 were obtained , and of all the remaining non - new rows in @xmath154 .",
    "similarly , let @xmath57 consist of the source ( @xmath111)columns from which the new ( @xmath120)columns in @xmath153 were obtained , and of all the remaining non - new columns in @xmath153 .",
    "let @xmath161 be the number of new @xmath120,@xmath121rows in @xmath154 , respectively ( i.e. , @xmath57 has @xmath162 source ( @xmath111)columns which were extended to new ( @xmath120)columns in @xmath153 ) .",
    "thus , @xmath163 using ( [ contralo ] ) and ( [ s_t_treat2columns ] ) , we obtain : @xmath164 that is , @xmath165 .",
    "but this implies that the algorithm can replace @xmath166 by @xmath57 in @xmath130 and improve the objective function .",
    "this is a contradiction to @xmath52 being a local optimum in @xmath130 .",
    "finally , since @xmath167 and @xmath168 , it follows that @xmath169 .",
    "thus , at the end of phase @xmath138 , properties ( i),(ii ) stated in the lemma hold .",
    "we now proceed to describe phase @xmath31 .",
    "the idea is similar to that of phase @xmath138 , but with two differences : first , the new rows which are used to cover the new base elements in the new ( @xmath121)columns are only @xmath121rows ( extending @xmath120rows in @xmath52 ) .",
    "( this is so because extending a @xmath111row in @xmath52 to a @xmath120row may result in a non - local optimum ) ; second , let @xmath170 ( @xmath171 ) denote the number of @xmath120rows ( columns ) in @xmath52 ( @xmath123 ) . then this time , as opposed to what we did in phase @xmath138 , if @xmath172 , we can not repeatedly perform the transformation on the new instance , since it is possible for a local optimum to contain no @xmath120rows . thus , @xmath134 - the new solution constructed from @xmath123 , is only guaranteed to have @xmath173 less @xmath120columns than @xmath123 .    with a slight abuse of notation ,",
    "we let @xmath130 denote the instance resulted from phase @xmath138 , with @xmath52 and @xmath123 its corresponding solutions , and let @xmath133 denote the new instance which we construct in this phase , with @xmath135 and @xmath134 its corresponding solutions .",
    "let @xmath144 be a collection of @xmath173 @xmath120columns in @xmath123 .",
    "thus , for each @xmath146 , there exists a distinct @xmath120row in @xmath52 , denoted @xmath147 .",
    "define @xmath133 to be the instance in which each @xmath146 is extended to the new @xmath121column @xmath148 and @xmath149 is extended to the new @xmath121row @xmath150 , for a new distinct element @xmath151 .",
    "as was done in phase 1 , construct @xmath135 ( @xmath134 ) from @xmath52 ( @xmath123 ) by replacing source sets by the new sets extending them .",
    "that is , @xmath134 contains new @xmath121columns extending source @xmath120columns in @xmath123 ; @xmath135 contains new @xmath121rows extending source @xmath120rows in @xmath52 .",
    "we show that @xmath135 is a local optimum in @xmath133 .",
    "if this is not the case , there exists @xmath152 , with @xmath155 that can be replaced by a collection @xmath153 consisting of columns and subsets of rows , improving the objective function value . that is , using the notation @xmath157 and @xmath158 from before , the inequality ( [ contralo ] ) holds",
    ".    let @xmath160 ( @xmath57 ) consist of the source @xmath120sets in @xmath52 ( @xmath123 ) from which the new sets in @xmath154 @xmath174 were obtained from , and all the other non - new sets in @xmath154 ( @xmath153 ) .",
    "let @xmath175 be the number of new columns in @xmath153 , which is equal to that of the new rows in @xmath154 .",
    "thus , @xmath176 using ( [ contralo ] ) and ( [ s_t ] ) , we obtain : @xmath177 that is , @xmath165 - contradicting the fact the @xmath52 is a local optimum in @xmath130 . finally , we have @xmath167 , @xmath168 , implying that @xmath169 .    at the end of phase @xmath31 ,",
    "the constructed instance @xmath133 with its corresponding solutions @xmath135 and @xmath134 satisfy properties ( i),(ii),(iii ) .",
    "+ note that @xmath116 , the objective function of algorithm @xmath128 , does not take into account the number of @xmath111rows ( as the algorithm only uses them to cover the remaining elements that were failed to be covered by @xmath120 or @xmath121rows ) .",
    "this observation motivates the following terminology , which we make solely for convenience : we will refer to the base elements which are covered by @xmath111rows as _ uncovered_.    once again , we use a factor revealing lp to bound the approximation ratio of the algorithm .",
    "that is , our goal is to formulate an lp whose objective function value is an upper bound on the worst case approximation ratio of @xmath128 ( denoted by @xmath105 ) . we treat each of the two instance types separately .      in this subsection we assume that the instance is of type a , that is , @xmath35 consists exclusively of @xmath121columns , while there is no restriction on @xmath52 .",
    "we use the following notation :    for given @xmath35 and @xmath52 , let @xmath178 be the set of columns in which @xmath5 elements are covered by @xmath121rows and @xmath69 elements are covered by @xmath120rows , @xmath179 , and let @xmath180 be the proportion of @xmath178-columns in @xmath35 .    observe that all @xmath181 s are non - negative and that they sum up to @xmath138 .",
    "we would like to express the objective function of set cover in terms of these new variables .",
    "we do so using a simple pricing method : as each row of @xmath52 costs @xmath138 and as the rows are disjoint , an element covered by an @xmath55row costs @xmath182 , @xmath183",
    ". thus , an @xmath178-column costs @xmath184 therefore : @xmath185 dividing by @xmath63 gives the approximation ratio of the given instance , which is @xmath186 .",
    "thus , @xmath187 ( the maximum taken over all legal instances ) , so our lp s objective is : @xmath188 in order to bound this function , we derive additional linear constraints .",
    "our goal is to bound the @xmath181 s with the highest @xmath189 coefficients . in light of our pricing scheme ,",
    "this is interpreted as not buying too many expensive columns .",
    "starting by considering the most expensive ones , the following constraints are easy to establish :    [ zeroxij ] for any type a - instance , @xmath190 .",
    "equivalently , + @xmath191 .",
    "consider @xmath192 , @xmath193 .",
    "if , by contradiction , @xmath194 for some @xmath5 , then there exists a column @xmath57 with @xmath5 of its elements covered by @xmath120rows , and the other elements are uncovered . removing these @xmath120rows from @xmath52 and inserting @xmath57 would increase @xmath128 s objective function .",
    "thus , @xmath195 . if @xmath196 then there exists a column @xmath57 having one element covered by a @xmath121row , which we denote by @xmath197 , and the other elements are uncovered . removing @xmath197 from @xmath52 , inserting @xmath57 and",
    "the @xmath120row subset of @xmath197 : @xmath198 ( recall the subset closure assumption ) , would again , increase @xmath128 s objective function . in either case",
    "we obtained a contradiction to @xmath52 being a local optimum .",
    "+ among the remaining variables , the two @xmath181 s which have the largest coefficients in the objective function of the lp are , according to ( [ cij ] ) , @xmath199 , with @xmath200 , and @xmath201 , with @xmath202 .",
    "we would like to obtain an upper - bound on them , using a linear inequality . for this purpose",
    ", we use an _",
    "intersection graph_. + * the intersection graph @xmath29 * + with a little abuse of terminology we will refer to @xmath52 , @xmath35 , and to subsets of them , as both the sets of indices representing the subsets of base elements , and the sets of vertices representing them in the following graph .    for a given instance , let @xmath203 be a bipartite graph , in which one partite is the set of all @xmath120 and @xmath121row members of @xmath52 , and the second partite is @xmath35",
    ". for @xmath204 a @xmath120 or @xmath121row in @xmath52 and @xmath205 there are @xmath206 ( parallel ) edges connecting @xmath204 and @xmath207 if the intersection of ( the subsets represented by ) @xmath204 and @xmath207 consists of @xmath206 base elements .",
    "thus , for @xmath208 , @xmath209 .",
    "@xmath29 is _ the intersection graph corresponding to @xmath52 and @xmath35 _ , or , _ the intersection graph of the given instance _",
    ", where @xmath52 is a local optimum and @xmath35 is an optimal solution of that instance .",
    "let @xmath29 be an intersection graph of a given instance , and let @xmath210 be any induced subgraph of @xmath29 .",
    "denote by @xmath211 the columns in @xmath212 which are in @xmath178 , and denote by @xmath213 and @xmath214 the number of rows and columns in @xmath212 , respectively ( i.e. , @xmath215 , @xmath216 ) .",
    "also let @xmath217 , @xmath218 .",
    "note that @xmath219 , and that @xmath220 ( due to the uncovered elements , i.e. , those covered by @xmath111rows ) .",
    "finally , @xmath212 is called _ small _ if @xmath221 , otherwise it is called _",
    "big_. ( the reason for defining small subgraphs as those of size at most @xmath222 rather than @xmath119 will be clear in the sequel ) .    throughout the rest of the paper",
    ", we use cc as an abbreviation for connected component. we analyze the performance of algorithm @xmath128 by considering @xmath29 s cc s . recall that when we stated the algorithm , we observed that it is optimal for instances in which an optimal solution consists of @xmath223 sets at the most . in terms of @xmath29 ,",
    "this is generalized to small cc s :    [ smallcc ] let @xmath29 be an intersection graph of a given instance , and let @xmath212 be a small cc of @xmath29",
    ". then the base elements covered by @xmath212 s columns are covered optimally by algorithm @xmath128 , and @xmath224 , implying that @xmath225 for all @xmath226 .",
    "the algorithm , which has no access to @xmath29 , performs local improvement steps on collections of @xmath120 and @xmath121rows of size at most @xmath119 .",
    "thus , it can remove all the @xmath227 rows of @xmath212 and replace them with @xmath212 s columns , which optimally cover the base elements in this cc .",
    "the rest of the claim follows from the fact that the instance is of type a.     + our goal is to upper - bound @xmath128 s approximation ratio .",
    "since the following analysis can be performed componentwise on each of @xmath29 s cc s , lemma [ smallcc ] implies that small cc s in @xmath29 can only improve the algorithm s performance , decreasing its approximation ratio .",
    "thus , we may assume , without loss of generality :    [ gconnected ] the intersection graph @xmath29 is connected and big .",
    "we now turn to deal with @xmath201 and @xmath199 .",
    "we derive a linear inequality in the @xmath181 variables which will be an additional constraint in the lp that we construct .",
    "it is derived using a special graph , which we construct in two stages . +",
    "* the @xmath228 subgraph * + we define the following subgraph of @xmath29 , which we refer to as _ the @xmath228 subgraph _ : it is the subgraph of @xmath29 induced by the set of @xmath229 and @xmath230 columns and the set of @xmath121rows which intersect at least one @xmath229 or @xmath230 column .",
    "see an example in figure [ exampleh ] .    [ t ! ]      subgraph . in ( a ) , the given instance is shown , where only the @xmath121rows intersecting @xmath231 are included .",
    "a - stands for an uncovered base element , and a * stands for an element covered by a @xmath120row .",
    "thus , @xmath232 , @xmath233 , and @xmath234 . also observe that @xmath235 , @xmath236 , and @xmath237.,title=\"fig:\",scaledwidth=45.0% ]    observe that @xmath228 need not be connected ( as opposed to @xmath29 , by assumption [ gconnected ] ) . also observe that since the only rows in @xmath228 are @xmath121rows , each @xmath229 vertex has a single neighbor in @xmath228 ( i.e. , the @xmath121row intersecting it ) .",
    "we record this fact for future reference :    [ o11_leafh ] each @xmath229 vertex is a leaf in @xmath228 .    for any subgraph @xmath212 of @xmath228 , let @xmath238 denote the maximum degree of a vertex in @xmath212 .",
    "in addition , for @xmath239 , let @xmath240 denote the set of row vertices in @xmath212 of degree @xmath5 in @xmath212 for some @xmath241 .",
    "we start by investigating the number of @xmath229 vertices in @xmath228 .",
    "the following result implies that there can not be too many of them :    [ bigcc ] let @xmath242 be two distinct column vertices in @xmath229 which belong to the same cc of @xmath228 .",
    "then every @xmath243 path @xmath244 in @xmath228 has @xmath245 row vertices .",
    "we may assume that @xmath18 and @xmath246 are connected by a ( simple ) path @xmath244 of minimum length among the paths in @xmath228 connecting a pair of @xmath229 vertices . let @xmath247 .",
    "by lemma [ o11_leafh ] , the @xmath229 vertices are leaves in @xmath228 .",
    "therefore , the vertices @xmath248 are @xmath230 columns , and @xmath249 are @xmath121rows .",
    "denote by @xmath250 and @xmath251 the @xmath120row neighbors in @xmath29 of @xmath18 and @xmath246 , respectively , and define @xmath252 .",
    "observe that @xmath253 can not be a cycle : if @xmath254 , then removing ( the @xmath120row ) @xmath250 from @xmath52 , and inserting the two @xmath120column subsets @xmath255 ( i.e. , @xmath18 s two uncovered base elements and the singleton @xmath256 ) and @xmath257 increases the objective function by @xmath138 , which is a contradiction to @xmath52 being a local optimum .",
    "thus , @xmath253 is path from @xmath250 to @xmath251 . if @xmath258 , the algorithm can replace the rows @xmath259 with the columns @xmath260 , again increasing its objective function , which is a contradiction .",
    "thus , @xmath261 , implying @xmath262 .    [ smallccone11 ] every small cc of @xmath228 has at most one @xmath229 vertex .    as for big ccs",
    ", we have :    [ voronoi ] let @xmath212 be a big cc of @xmath228",
    ". then @xmath263 .",
    "assume that @xmath264 , otherwise the claim is trivial .",
    "construct a voronoi diagram on the set of @xmath212 s vertices , with centers being its @xmath229 columns . by lemma [ bigcc ] , any path connecting two distinct such centers has at least @xmath265 row vertices .",
    "therefore , each voronoi cell contains at least @xmath266 vertices .",
    "thus , @xmath267 , implying @xmath263 .",
    "thus , the @xmath229 vertices are `` negligible '' in @xmath228 , both in small and big components .",
    "we proceed to investigate the number of @xmath230 vertices .",
    "we specify two useful properties of @xmath228 : the first states that small ccs are either double edges ( i.e. , two parallel edges between a pair of vertices ) , cycles , or trees , and the second is a characterization of a local optimum .    [ smallcc_h ] every small cc of @xmath228 is either a double edge , a cycle , or a tree .",
    "we prove the claim by showing that a small cc of @xmath228 can not include a double edge or a cycle as a proper subset .",
    "thus , any small cc which is not a double edge or a cycle must be a tree .",
    "we start by showing that two vertices that are connected by a double edge have no other neighbors in @xmath228 , implying that a cc of @xmath228 can not include a double edge as a proper subset .",
    "suppose that a column @xmath18 and a row @xmath250 are connected by a double edge .",
    "since , by lemma [ o11_leafh ] , the @xmath229 vertices are leaves , it follows that @xmath268 .",
    "thus , @xmath269 ( i.e. , @xmath250 covers two base elements of @xmath18 ) , and @xmath18 has no neighbors other than @xmath250 .",
    "so suppose to the contrary that @xmath250 has an additional neighbor @xmath270 .",
    "if @xmath250 covers two elements of @xmath246 , then replacing @xmath250 with @xmath242 produces a better solution , which is a contraction .",
    "otherwise , @xmath271 and @xmath246 has an additional neighbor , which we denote by @xmath251 . then removing @xmath250 and inserting @xmath18 and @xmath272 ( i.e. , the @xmath32-row subset of @xmath246 consisting of @xmath246 s two uncovered elements and the singleton @xmath273 ) again produces a better solution , which is a contradiction .    in order to complete the proof ,",
    "we show that a small cycle has no neighbors outside it , again , implying that a cc of @xmath228 can not include it as a proper subset .",
    "let @xmath274 be a small cycle in @xmath228 .",
    "we show that for each vertex in @xmath274 , its neighbors in @xmath228 are precisely its two neighbors in @xmath274 . again , since @xmath229 vertices are leaves ( by lemma [ o11_leafh ] ) , it follows that @xmath274 s vertices alternate between rows and @xmath230-columns . by definition ,",
    "each @xmath230 column has exactly two @xmath275row neighbors , hence , they are in @xmath274 . as for the rows of @xmath274 , suppose to the contrary that there exists a @xmath275row vertex @xmath276 that has a neighbor @xmath277 . first observe that @xmath250 can not be connected to @xmath18 by a double edge since in that case , as we just proved , that double edge is by itself a cc , which is a contradiction .",
    "thus @xmath250 covers a single base element of @xmath18 .",
    "let @xmath278 be the @xmath120column subset of @xmath18 consisting of @xmath18 s two uncovered base elements and ( the singleton ) @xmath279 .",
    "as @xmath280 , the following local step can be applied : remove @xmath274 s rows from the current solution and insert @xmath274 s columns and @xmath278 .",
    "the number of @xmath121sets in the new solution is the same , while the number of @xmath120sets increases by one .",
    "thus , this step is a local improvement one , which is a contradiction .",
    "+    [ rowleavesint ] let @xmath166 be a small subtree of @xmath228 .",
    "( i ) if all the leaves in @xmath166 are @xmath275row vertices , then their number , @xmath281 , is at most @xmath110 .",
    "( ii ) if @xmath166 has exactly @xmath282 leaves , then @xmath166 contains no @xmath229 vertices .",
    "assume @xmath283 , otherwise the claim is trivial ( note that for part ( ii ) , if @xmath284 then @xmath166 can not have @xmath110 leaves ) . hence @xmath285 .",
    "+ ( i ) since @xmath166 s vertices alternate between rows and columns , it follows that @xmath286 to see this , partition @xmath166 into edge - disjoint paths by the following iterative procedure : start with any path @xmath244 connecting two arbitrary leaves , and mark its vertices . clearly , @xmath287 .",
    "as long as there exist unmarked vertices , choose a minimal ( with respect to inclusion ) path @xmath288 connecting an unmarked leaf to a marked vertex @xmath204 .",
    "note that @xmath289 , i.e. , @xmath290 , and since @xmath288 is minimal , all of @xmath288 s vertices except for @xmath204 are unmarked . marking @xmath288 s vertices , the number of row vertices which are marked for the first time is equal to the number of such column vertices .",
    "summing over all paths , we obtain @xmath291 .",
    "observe that for each row leaf @xmath292 , @xmath250 s neighbor is a column in @xmath230 , since the @xmath229 are leaves ( by lemma [ o11_leafh ] ) and @xmath283 by assumption .",
    "as @xmath293 , the following local step can be applied :    * remove the @xmath294 rows of @xmath166 from the current solution , * insert the @xmath295 columns of @xmath166 , * for each ( @xmath121row ) leaf @xmath292 , insert its @xmath120row subset consisting of the three elements which are not covered by @xmath250 s ( @xmath230 ) neighbor in @xmath166 .",
    "thus , we traded one @xmath121row for @xmath281 @xmath120sets .",
    "due to our objective function , we must have @xmath296 , otherwise this step would be a local improvement one , which is a contradiction .",
    "+ ( ii ) suppose to the contrary that there exists a subtree @xmath297 with @xmath282 row leaves such that @xmath298 .",
    "denote these row leaves by @xmath299 , and let @xmath300 be their corresponding neighbors .",
    "observe that @xmath301 , since if @xmath302 for some @xmath5 , then by lemma [ o11_leafh ] it is a leaf , implying that @xmath303 is an isolated edge , contradicting the assumption that @xmath166 is a tree with four leaves . by corollary [ smallccone11 ] ,",
    "there is exactly one @xmath304 vertex , which we denote by @xmath18 .",
    "let @xmath250 be @xmath18 s @xmath120row neighbor , and let @xmath305 .",
    "thus , all the leaves in @xmath154 are row vertices .",
    "it then follows , by exactly the same argument in part ( i ) , that @xmath306 .",
    "therefore , in @xmath166 we have : @xmath307 . as @xmath308 ,",
    "we can remove the @xmath294 @xmath121rows and ( the @xmath120row ) @xmath250 , and insert the @xmath295 columns and the four @xmath120row subsets of the leaves : @xmath309 , @xmath310 .",
    "the number of @xmath121sets remain the same , while the number of @xmath120sets increases by @xmath32 , which is a contradiction .",
    "+ we emphasize that @xmath166 need not be a cc of @xmath228 .",
    "it may be a proper subset of a cc .",
    "if @xmath166 is a cc , the following result holds :    [ cortreer1r34 ] let @xmath166 be a small cc of @xmath228 which is a tree .",
    "then @xmath296 , @xmath311 .",
    "consequently , @xmath312 .",
    "the leaves of @xmath166 are either @xmath313 or @xmath229 vertices . if all of them are @xmath313 vertices , then by lemma [ rowleavesint ] ( i ) : @xmath296 .",
    "otherwise , corollary [ smallccone11 ] implies that @xmath166 contains exactly one @xmath229 vertex . deleting it from @xmath166",
    ", we obtain a subtree @xmath154 whose all leaves are the @xmath314 vertices . by lemma [ rowleavesint ] ( i ) : @xmath315 .",
    "for the second part , recall from graph theory that the number of leaves in a nontrivial connected graph @xmath29 with @xmath316 vertices of degree @xmath5 , @xmath317 , is bounded by : @xmath318 ( this follows from @xmath319 ) .",
    "if @xmath29 is a tree , then ( [ graphtheoryineq ] ) holds as an equality , which we apply to @xmath166 and obtain : @xmath320 ( the last inequality follows from the first part ) . thus @xmath311 .",
    "+ corollary [ cortreer1r34 ] implies that most of the rows in a small tree @xmath166 have degree @xmath31 , i.e. , they are the @xmath321 vertices .",
    "this is intuitive , as we can view these rows as `` links '' connecting two columns in a `` chain '' , while very few rows are `` end - rows '' ( namely , the @xmath313 ones ) , and even fewer rows are `` links '' to other `` chains '' ( the @xmath322 ones ) .",
    "observe that for @xmath212 a cycle or a double edge , it is trivial that _ all _ the rows have degree @xmath31 , i.e. @xmath323 , @xmath324 . for the big ccs of @xmath228 , the dominance of the @xmath325 rows still holds , but in a weaker sense . in order to establish it , we look at small neighborhoods around the vertices of a big cc @xmath212 , bound the number of vertices of degrees @xmath32 or @xmath110 , and by summation obtain a bound on @xmath326 .",
    "a bound on @xmath327 then follows naturally .",
    "+    for @xmath328 and @xmath329 , let @xmath330 be the neighborhood of radius @xmath331 centered at @xmath207 in @xmath228 , i.e. , the set of all vertices @xmath204 in @xmath228 such there exists a @xmath332 path in @xmath228 of length at most @xmath331 .",
    "observe that @xmath333 may be greater than @xmath119 .",
    "in addition , it is possible for a `` boundary '' vertex @xmath334 that @xmath335 , i.e. , if its distance from @xmath207 is exactly @xmath331 .",
    "+    [ r34inneighborhoodhle2 ] for any @xmath329 , @xmath330 contains at most two vertices of degree @xmath32 or @xmath110 in @xmath228 , i.e. , @xmath336 .",
    "suppose to the contrary that there exists @xmath329 such that @xmath330 contains at least @xmath32 vertices in @xmath337 .",
    "pick any three of these vertices and denote them by @xmath338 .",
    "let @xmath339 be a spanning tree of @xmath330 , and let @xmath340 be the @xmath341 path in @xmath339 , @xmath342 .",
    "let @xmath166 be the subtree of @xmath339 defined by @xmath343 .",
    "we first show how to augment @xmath166 to obtain a subtree @xmath344 with at least @xmath345 leaves which are column vertices :    * case 1 : @xmath166 has at least two leaves in @xmath346 , say @xmath347 and @xmath348 .",
    "then each of @xmath349 has at least two neighbors which are not in @xmath166 , and in addition , either @xmath207 is a leaf or @xmath350 has at least one neighbor which is not in @xmath166 .",
    "these neighbors are distinct and are different from @xmath207 , otherwise @xmath228 contains a small cycle as a proper subset , contradicting lemma [ smallcc_h ] .",
    "let @xmath154 be the tree obtained by adding the edges connecting these neighbors to @xmath166 .",
    "then @xmath154 has at least @xmath345 leaves , which are columns .",
    "* case 2 : @xmath166 is a simple path from @xmath207 to ( say ) @xmath347 : then @xmath347 has at least two neighbors which are not in @xmath166 , and each of @xmath351 has at least one neighbor which is not in @xmath166 .",
    "these neighbors are distinct by an argument similar to that in case 1 .",
    "let @xmath154 be the tree obtained by adding the edges connecting these neighbors to @xmath166 .",
    "then again , @xmath154 has at least @xmath345 column leaves ( @xmath207 being one of them ) .    in both cases",
    ", we obtained a tree @xmath154 of size at most @xmath352 , which we clearly may assume to be less than @xmath119 , with at least @xmath345 leaves which are column vertices .",
    "now , since @xmath154 is small , it follows by corollary [ smallccone11 ] that among these @xmath345 column leaves , at most one is an @xmath229 column vertex .",
    "thus , at least @xmath110 leaves are @xmath230 columns .",
    "each such @xmath230 leaf has an additional row neighbor outside @xmath154 .",
    "again , these neighbors are distinct , otherwise there is a contradiction to lemma [ smallcc_h ] . adding the edges connecting these row neighbors to @xmath154",
    ", we obtain a tree of size at most @xmath353 .",
    "it either has @xmath345 or more row leaves , or exactly @xmath110 row leaves and one @xmath229 leaf . in both cases",
    "we obtain a contradiction to lemma [ rowleavesint ] .",
    "+ we are now ready to upper - bound the number of vertices of degree @xmath354 , and @xmath110 in the big ccs of @xmath228 . in particular , this establishes the dominance ( in terms of a lower bound ) of rows of degree @xmath31 which we previously stated .",
    "since , as we mentioned , we look at each cc separately , all bounds are in terms of the total number of rows in the specific cc .",
    "[ way2boundrbig ] let @xmath212 be a big cc of @xmath228 .",
    "( i ) @xmath355 , ( ii ) @xmath356 , ( iii ) @xmath357 .    for part ( i ) ,",
    "observe that : @xmath358 where the inequality follows from the fact that for @xmath207 in a big cc , @xmath359 .    now , consider the _ multi - set _ of vertices which belong to the ( possibly overlapping ) neighborhoods around all of @xmath360 vertices , that is , we look at @xmath361 where we allow repetitions of elements in @xmath57 .",
    "every vertex appears at most twice in @xmath57 . to see this ,",
    "suppose to the contrary that there is a vertex @xmath204 which appears at least three times in @xmath57",
    ". then any three centers of neighborhoods which cover @xmath204 are three @xmath360 vertices in @xmath362 .",
    "@xmath212 is a cc of @xmath228 , therefore @xmath363 , implying @xmath364 , which is a contradiction to lemma [ r34inneighborhoodhle2 ] .",
    "hence , latexmath:[$\\sum_{v",
    "\\in r_{\\{3,4\\}}^f }    inequality , we obtain : latexmath:[\\[\\label{boundr34big_n_f }    bound in terms of @xmath213 , the number of rows in @xmath212 .",
    "observe that each column intersects at most @xmath110 rows .",
    "thus , @xmath366 , implying that @xmath367 . substituting this in ( [ boundr34big_n_f ] ) ,",
    "we obtain : @xmath368 ) to @xmath212 , we obtain : @xmath369 where the third inequality follows from ( [ way2boundr34big ] ) , and the last one from the assumption that @xmath212 is big .",
    "this proves part ( ii ) .",
    "part ( iii ) follows from parts ( i ) and ( ii ) ( as @xmath370 ) .",
    "this completes the proof .     + now consider the @xmath371 columns for some big cc @xmath212 of @xmath228 .",
    "we show that their number is about the same as that of @xmath372 vertices . intuitively , this is true since , as we proved , most of @xmath212 s columns are in @xmath371 , most of its rows are in @xmath372 , and in every path the vertices alternate between rows and columns . formally :    [ boundo20 ] for a big cc @xmath212 of @xmath228 : @xmath373 .",
    "let @xmath212 be a big cc of @xmath228 .",
    "we bound @xmath374 from below and from above to obtain : @xmath375 where the last inequality follows from lemma [ way2boundrbig](i),(ii ) .",
    "counting @xmath212 s edges using each of its two partite sets , we obtain : @xmath376 where the last equality is by lemma [ voronoi ] .",
    "thus : @xmath377 subtracting @xmath378 from all sides and dividing by @xmath31 yields the claim .",
    "+     + we note that for small cc s , the last result holds in a stronger sense :    [ o20negsmallcch ] let @xmath212 be a cc of @xmath228 .",
    "( i ) if @xmath212 is a small tree then @xmath379 .",
    "( ii ) if @xmath212 is a small cycle or a double edge then @xmath380 .",
    "\\(i ) let @xmath212 be a small cc of @xmath228 which is a tree .",
    "first suppose that @xmath212 contains no @xmath229 vertices , i.e. , all of its leaves the @xmath381 vertices .",
    "then equality ( [ nr_nc1 ] ) holds for @xmath212 , i.e. , @xmath382 ( this is true by the argument used in the proof of lemma [ rowleavesint ] ( i ) ) .",
    "thus , @xmath383 .",
    "we now bound @xmath384 from above and from below : @xmath385 where the inequality follows from corollary [ cortreer1r34 ] , and trivially : @xmath386 thus , @xmath379 , as required .",
    "if @xmath298 then by corollary [ smallccone11 ] , @xmath212 contains exactly one @xmath229 vertex .",
    "we delete it from @xmath212 to obtain a tree , denoted @xmath387 , with all its leaves being @xmath388 vertices .",
    "thus , the last result holds for @xmath387 , i.e. , @xmath389 . by observing that @xmath390 and @xmath391",
    ", we establish the result for @xmath212 as well .",
    "+ ( ii ) this is trivial .",
    "+ recall that our goal is to bound @xmath199 and @xmath201 - the proportions of @xmath229 and @xmath230 in @xmath29 .",
    "so far we obtained a good estimation of their proportions in @xmath228 : corollary [ smallccone11 ] and lemma [ voronoi ] imply that the @xmath229 vertices are negligible in small and big ccs of @xmath228 , respectively ; lemma [ boundo20 ] and remark [ o20negsmallcch ] imply that intuitively , the proportion of @xmath230 in @xmath228 is about one half ( the other half consists mainly of rows of degree @xmath31 ) .",
    "however , in order to bound the proportions _ in @xmath29 _ , we need to take into account the columns which are not in @xmath229 or @xmath230 but intersect some row in that cc .",
    "this motivates the following construction : + * the @xmath392 graph * + denote those columns which intersect some row in @xmath228 and are not in @xmath393 by @xmath394 .",
    "we construct the @xmath392 graph , which need not be a subgraph of @xmath29 , in two steps .",
    "first , let @xmath392 be the graph obtained from @xmath228 by connecting each row in @xmath228 to distinct new vertices representing the @xmath394-columns intersecting it .",
    "we emphasize that an @xmath394-column may appear in a few ccs of @xmath392 : suppose @xmath395 and @xmath396 , @xmath397 are ccs of @xmath228 such that each one contains a row intersecting @xmath398 .",
    "then each corresponding cc in @xmath392 will have its own ( distinct ) vertex representing @xmath398 .",
    "thus , in terms of vertex labels ( where each vertex has a label of the set represented by it ) , the ccs of @xmath392 are not @xmath394-column - disjoint .",
    "but they are @xmath393-column - disjoint as well as row - disjoint , and hence in particular are edge - disjoint .",
    "figure [ exampletildeh ] shows the @xmath392 graph corresponding to the instance given in figure [ exampleh ] up to this step .",
    "[ t ! ]   graph corresponding to the instance given in figure [ exampleh ] prior to the addition of the @xmath399 subgraph.,title=\"fig:\",scaledwidth=60.0% ]    at a final step in the construction , we add to @xmath392 the subgraph of @xmath29 induced by the set of remaining vertices ( if any ) , that is , all vertices which do not belong to any cc from the previous step .",
    "denote this subgraph by @xmath399 .",
    "note that @xmath399 need not be connected .",
    "let @xmath144 denote the collection of @xmath392 s ccs .",
    "the disjointness of the rows implies : @xmath400 we use the following notation .",
    "let @xmath401 .",
    "denote by @xmath402 the @xmath394-columns in @xmath212 .",
    "denote by @xmath403 the set of edges incident to the @xmath371 columns , by @xmath404 the set of edges incident to the @xmath304 columns , and by @xmath405 the set of remaining edges , i.e. @xmath406 .",
    "note that for @xmath407 ( @xmath408 ) , all the edges in @xmath405 are incident to columns in @xmath402 .",
    "define @xmath409 , @xmath410 , and @xmath411 .",
    "finally , denote by @xmath412 the number of rows in @xmath413 .",
    "the following observations are trivial ( the first two hold in @xmath228 as well ) :    [ trivialh0properties ] ( i ) for each @xmath401 , @xmath414 and @xmath415 , ( ii ) for each @xmath407 , each vertex @xmath416 is a leaf in @xmath212 , ( iii ) for each @xmath407 , a row in @xmath212 which belongs to @xmath417 contributes @xmath5 edges to @xmath418 and @xmath419 edges to @xmath405 , @xmath310 , that is : @xmath420    [ lem_e_tilde_le_long_sum ] for any type a - instance , @xmath421    consider a vertex @xmath422 , @xmath423 , @xmath424 .",
    "@xmath395 if there exist an @xmath230-column @xmath425 and a @xmath121row @xmath250 such that @xmath426 and @xmath427 . in this case",
    ", @xmath398 contributes at most @xmath5 edges ( possibly in different ccs ) to @xmath428 .",
    "( otherwise it contributes zero ) .",
    "+ we now derive a linear inequality , which provides an upper - bound on the number of edges in @xmath429 and @xmath430 .    [ e20etilde ] for any type a - instance , @xmath431 .",
    "we show that for every @xmath401 , we have : latexmath:[\\[\\label{e20f }    by definitions of @xmath429 , @xmath430 and @xmath428 , and using ( [ sumrowh ] ) , the claim then follows by summing over all @xmath401 .",
    "we distinguish four cases , according to the type of @xmath212 .    *",
    "* case 1 : @xmath433 *   + since @xmath399 contains no @xmath229 and @xmath230 vertices , it follows that @xmath434 .",
    "hence ( [ e20f ] ) trivially holds . *",
    "* case 2 : @xmath212 is a cc of @xmath392 obtained from a double edge or a small cycle in @xmath228 *   + denote by @xmath274 the double edge or the cycle in @xmath228 from which @xmath212 is obtained .",
    "then @xmath274 is a cc of @xmath228 , and its rows are precisely the rows of @xmath212 ( because @xmath392 was obtained from @xmath228 by adding columns ) .",
    "@xmath274 has even length , with its vertices alternating between @xmath230 columns and @xmath435 @xmath275rows .",
    "thus , each such row has two @xmath230 column neighbors ( in @xmath274 and therefore in @xmath212 ) and two @xmath394 column neighbors ( in @xmath436 ) .",
    "therefore , it contributes two edges to @xmath403 and two to @xmath405 , i.e. : @xmath437 : this is true because as we just noted , @xmath274 s columns are only in @xmath230 , and @xmath212 was obtained from @xmath274 by adding @xmath394 columns ( which , by definition , are not in @xmath229 ) .",
    "thus , @xmath438 , implying that @xmath439 .",
    "this fact and ( [ e20cycle ] ) establish ( [ e20f ] ) . * * case 3 : @xmath212 is a cc of @xmath392 obtained from a small tree in @xmath228 *   + the rows of @xmath212 are precisely the rows of the tree in @xmath228 which @xmath212 is obtained from .",
    "thus , subtracting ( [ cyclee20 ] ) from ( [ cycleetilde ] ) , we obtain : @xmath440 where the last equality follows from @xmath441 , which holds due to ( [ graphtheoryeq ] ) .",
    "this implies : @xmath442 , @xmath212 can have at most one @xmath229 vertex . by lemma [ trivialh0properties ] ( ii ) ,",
    "such a vertex is a leaf in @xmath212 , implying that @xmath443 . combining this with ( [ diffe20etildecycle ] )",
    ", we obtain : @xmath444 establishing ( [ e20f ] ) . *",
    "* case 4 : @xmath212 is a cc of @xmath392 obtained from a big cc of @xmath228 *   + we have : @xmath445 where the first inequality follows from ( [ cycleetilde ] ) , the second inequality follows from lemma [ boundo20 ] , and the equality follows from lemma [ trivialh0properties ] ( i ) . in order to complete the proof , it suffices to show that @xmath446 .",
    "denote by @xmath387 the ( big ) cc of @xmath228 from which @xmath212 is obtained . by lemma [ voronoi ] , we have @xmath447 .",
    "since @xmath448 and similarly , the rows of @xmath387 are precisely the rows of @xmath212 , we also have : @xmath263 . by lemma [ trivialh0properties ] ( i ) : @xmath414 .",
    "hence @xmath446 , as required .",
    "we are now ready to bound a linear combination of @xmath201 and @xmath199 :    [ lp_ineq_type a ] for any type a - instance : + @xmath449    from lemma [ e20etilde ] we have : @xmath431 . from observation [ apxoptsameorder ]",
    "we obtain @xmath450 , so we also have : @xmath451 .",
    "we would like to write this inequality in terms of the column sets . by summation ,",
    "lemma [ trivialh0properties](i ) implies that @xmath452 and @xmath453 .",
    "thus , we obtain : @xmath454 using lemma [ lem_e_tilde_le_long_sum ] , we obtain : @xmath455 dividing both sides by @xmath219 , we obtain the required inequality .",
    "+ by providing the last constraint , lemma [ lp_ineq_type a ] concludes our construction of the lp , which upper - bounds @xmath105 - the approximation ratio of the algorithm ( for type a - instances ) .",
    "recall that the other constraints are that the variables are non - negative and that their sum is @xmath138 .",
    "in addition , the variables @xmath456 are zero , by lemma [ zeroxij ] . the objective function was stated in ( [ objfunc ] ) .",
    "thus , the complete program is : @xmath457 ( inequality ( [ a2primalcons1 ] ) is obtained from ( [ x20inequality ] ) by rearranging terms ) .",
    "specifically , given @xmath16 , the ratio @xmath105 is upper - bounded by the objective function value of the lp .",
    "we now turn to solve this program .",
    "we simplify it , first by omitting the zero variables @xmath456 .",
    "denote the set of ( remaining ) relevant indices by @xmath458 .",
    "next , since our goal is to solve the lp for arbitrarily small values of @xmath84 , we replace @xmath459 in the constraint ( [ a2primalcons1 ] ) by zero . using ( [ cij ] ) to obtain the explicit values of @xmath189 s ,",
    "the modified lp is : @xmath460 in order to solve this lp , we use the dual program .",
    "let @xmath461 be the dual variables corresponding to constraints ( [ modcons1]),([modcons2 ] ) , respectively .",
    "the dual program is then : + @xmath462 let @xmath463 be the vector consisting of @xmath464 , and @xmath465 for all @xmath466 .",
    "it is clear that @xmath463 is a feasible primal solution .",
    "the corresponding objective function value is @xmath467 .",
    "let @xmath468 .",
    "it is straightforward to verify that it is a feasible dual solution .",
    "the corresponding objective function value is @xmath469 , which is equal to that of the primal .",
    "thus , from the duality theorem , we conclude that @xmath463 and @xmath470 are optimal solutions to the primal and dual programs , respectively . by the construction of the ( primal ) lp",
    ", we conclude the following result :    [ apxratiotypea ] for type a - instances , @xmath128 is a @xmath104-approximation algorithm for @xmath109-uusc , where @xmath471      in this subsection we assume that the instance is of type b , that is , @xmath35 consists of @xmath120 and @xmath121columns , and @xmath52 consists of @xmath111 and @xmath121rows .",
    "we use the analogous notation to that of the previous section .    for given @xmath35 and @xmath52 , let @xmath472 be the set of @xmath121columns in which @xmath5 elements are covered ( by @xmath121rows ) , @xmath473 , and",
    "let @xmath474 be the proportion of these columns in @xmath35 .",
    "similarly , let @xmath475 be the set of @xmath120columns in which @xmath5 elements are covered ( by @xmath121rows ) , @xmath193 , and let @xmath476 .",
    "for any graph @xmath212 , let @xmath477 , @xmath478 , @xmath479 .",
    "the objective function of set cover in terms of these new variables is : @xmath480 where @xmath481 and @xmath482 explicitly , the column costs are : @xmath483 observe that @xmath484 from the previous section ( @xmath473 ) .",
    "the objective function of our lp , which bounds @xmath105 from above , is : @xmath485 considering the highest @xmath486 s ( i.e. , the costs of the most expensive columns ) , the following result is analogous to lemma [ zeroxij ] and therefore its proof is omitted :    [ zerox34 ] for any type b - instance , @xmath487 .",
    "equivalently , @xmath488 .",
    "the next highest coefficient is @xmath489 , so we derive a bound on @xmath490 .",
    "the intersection graph @xmath29 is defined exactly the same , and we assume that it is connected and big ( i.e. , assumption [ gconnected ] holds for this instance type as well ) .",
    "formally , it consists of @xmath120 and @xmath121columns in the @xmath35 partite , and @xmath121rows in the @xmath52 one . as for @xmath228 and @xmath392 : + * the @xmath228 subgraph * + @xmath228 is the subgraph of @xmath29 induced by the @xmath491-columns and the ( @xmath121)rows intersecting them .",
    "note that these columns are analogous to the @xmath230 columns of type a - instance , while there is no analog to @xmath229 columns .",
    "thus , @xmath228 s structure is the same , that is , @xmath228 obtained from a type b - instance is a special case of @xmath228 obtained from a type a - instance , with no @xmath229 columns .",
    "thus , the results from the previous section hold trivially .",
    "specifically , regarding the @xmath228 subgraph , lemmas [ o11_leafh ] , [ bigcc ] and [ voronoi ] are irrelevant , lemma [ smallcc_h ] holds , lemma [ rowleavesint ] ( i ) holds ( part ( ii ) is irrelevant ) , lemma [ r34inneighborhoodhle2 ] holds , and lemma [ way2boundrbig ] holds .",
    "the analog of lemma [ boundo20 ] is :    [ boundo20_in_typeb ] for any type b - instance , for each big cc f : @xmath492    * the @xmath392 graph * + @xmath392 is , again , similar to @xmath392 from the previous section , but with no columns analogous to @xmath229 .",
    "specifically , let @xmath394 be the set of columns which intersect some row in @xmath228 ( i.e. , a @xmath121row intersecting some @xmath491 column ) .",
    "for each cc @xmath212 of @xmath228 , connect each row in @xmath212 to distinct vertices representing the @xmath394-columns intersecting it .",
    "denote these vertices by @xmath402 .",
    "let @xmath428 be the set new edges used to connect those vertices .",
    "also , let @xmath399 denote the subgraph of @xmath29 induced by the remaining vertices ( which include all the @xmath120rows ) , and add it to @xmath392 .",
    "finally , let @xmath493 , @xmath405 , @xmath494 denote the set of edges incident to @xmath495 , @xmath402 , @xmath491 vertices , respectively .",
    "the analog of lemma [ trivialh0properties ] is ( only parts ( i ) and ( iii ) are relevant ) :    [ trivialh0properties_typeb ] ( i ) for each @xmath496 , latexmath:[\\[\\label{typeb_e2o }    @xmath407 , a row in @xmath212 which belongs to @xmath417 contributes @xmath5 edges to @xmath493 and @xmath419 edges to @xmath405 , @xmath310 .",
    "the analogs of lemmas [ lem_e_tilde_le_long_sum ] and [ e20etilde ] are , respectively :    [ lem_e_tilde_le_long_sum_typeb ] for any type b - instance , @xmath498    [ e20etilde_typeb ] for any type b - instance , @xmath499 is identical to that of lemma [ e20etilde ] with substituting @xmath493 for @xmath403 and @xmath500 for @xmath404 ) .",
    "+ using ( [ typeb_e2o ] ) and summing over all @xmath496 , we obtain : @xmath501 now , substituting ( [ e24_2o24_typeb ] ) in the left - hand side of ( [ typeb_e_epluso ] ) , and ( [ ineq_e_tilde_le_long_sum_typeb ] ) in its right - hand side , and using @xmath450 ( from observation [ apxoptsameorder ] ) , we obtain : @xmath502 dividing by @xmath219 , we obtain the analog of lemma [ lp_ineq_type a ] :    [ lp_ineq_type b ] for any type b - instance : @xmath503    using ( [ ci34values ] ) , the inequality from lemma [ lp_ineq_type b ] , and substituting @xmath488 ( by lemma [ zerox34 ] ) , we obtain the following lp , which upper - bounds @xmath105 for type b - instances : @xmath504 the dual program is : @xmath505 it is straightforward to verify that : @xmath506 and @xmath507 are primal and dual feasible solutions , respectively , achieving the same objective function value of @xmath508 .",
    "thus , they are optimal solution , which implies :    [ apxratiotypeb ] for type b - instances , @xmath128 is a @xmath104-approximation algorithm for @xmath109-uusc , where @xmath509 .",
    "combining theorems [ apxratiotypea ] and [ apxratiotypeb ] , and using assumption [ opt4sets ] , altogether we obtain :    @xmath128 is a @xmath104-approximation algorithm for @xmath109-uusc , where @xmath471 .    in the following , we provide an example for which @xmath510",
    ". the instance is of type a. let @xmath511 for any fixed @xmath175 , that is , @xmath35 consists of @xmath512 @xmath121columns , denoted @xmath513 , covering @xmath514 base elements .",
    "the construction of a local optimum @xmath52 is as follows .",
    "the @xmath121rows in @xmath52 consist of two sets : in the first one , for each @xmath515 , there is a @xmath121row which intersects ( i.e. , covers a single element of ) the four columns @xmath516 , and there is one additional @xmath121row intersecting @xmath517 .",
    "thus , the first set contains @xmath518 rows . in the second set , for each @xmath519",
    ", there are _ two _ @xmath121rows : one intersecting @xmath520 , and another one intersecting @xmath521 .",
    "thus , the second set contains @xmath522 rows , so the total number of @xmath121rows in @xmath52 is @xmath523 .    as for the @xmath120rows in @xmath52 , for each @xmath524",
    ", there is one @xmath120row intersecting @xmath525 , and another one intersecting @xmath526 .",
    "thus , the total number of @xmath120rows is @xmath527 .    for a given @xmath328 , taking @xmath175",
    "large enough ensures that @xmath52 is a local optimum . using the pricing scheme",
    ", it is easily verified that the @xmath518 columns : @xmath528 , @xmath529 , are in @xmath230 , and the remaining @xmath530 columns are in @xmath531 .",
    "hence @xmath532 , @xmath533 .",
    "the corresponding costs are , by ( [ cij ] ) , @xmath534 , @xmath535 . the obtained approximation ratio is therefore : @xmath536",
    "in this paper we focused on a special case of the unweighted @xmath2-set cover problem .",
    "we proposed a new paradigm to approach instances of this problem , and we showed that it gives better results than the previous known algorithms for unweighted @xmath2-set cover .",
    "our proof is for a restricted case in which the instance contains all the pairs of elements .",
    "the technical reason to consider this special case is that all previous known improvements over the greedy algorithm have a special treatment of singletons , which makes the algorithms and their analysis much more complicated . by neglecting this technical problem ,",
    "we can concentrate on the way to handle the selection of large sets .    in this paper we showed that the non - oblivious local search methodology can outperform the other methods to approximate unweighted @xmath2-set cover , and we conjecture that this is the case for the generalized case and not only for @xmath109-uniform instances .",
    "we leave as major open problems the tuning of the parameters for the non - oblivious local search algorithm ( i.e. , the weights used in the objective function of the local search ) , as well as the analysis of the resulting algorithm for unweighted @xmath2-set cover",
    ".    bccm    e.  angel , `` a survey of approximation results for local search algorithms , '' efficient approximation and online algorithms , lncs , * 3484 * , 30 - 73 , 2006 .",
    "e.m .  arkin and r.  hassin ,",
    "`` on local search for weighted @xmath2-set packing , '' _ mathematics of operations research _ , * 23 * , 640 - 648 , 1998 .",
    "s.  athanassopoulos , i.  caragiannis and c.  kaklamanis , `` analysis of approximation algorithms for @xmath2-set cover using factor - revealing linear programs '' , _ theory of computing systems , in press , doi 10.1007/s00224 - 008 - 9112 - 3 . _    r.  bar - yehuda and s.  even , `` a linear time approximation algorithm for the weighted vertex cover problem , '' _ journal of algorithms _ , * 2 * , 198 - 203 , 1981 .",
    "v.  chvtal , `` a greedy heuristic for the set - covering problem , '' _ mathematics of operations research _ , * 4 * , 233 - 235 , 1979 .",
    "p.  crescenzi and v.  kann , `` a compendium of np optimization problems '' , http://www.nada.kth.se/theory/problemlist.html , 1995 .    r.  duh and m.  frer , `` approximation of @xmath2-set cover by semi local optimization , '' _ proc .",
    "stoc 1997 _ , 256 - 264 , 1997 .",
    "u.  feige , `` a threshold of @xmath537 for approximating set cover , '' _ journal of the acm _ , * 45 * , 634 - 652 , 1998 .",
    "o.  goldschmidt , d.  s.  hochbaum and g.  yu , `` a modified greedy heuristic for the set covering problem with improved worst case bound , '' _ information processing letters _",
    ", * 48 * , 305 - 310 , 1993 .",
    "m.  m.  halldrsson , `` approximating discrete collections via local improvemtns , '' _ proc .",
    "soda 1995 _ , 160 - 169 , 1995 .",
    "m.  m.  halldrsson , `` approximating @xmath2 set cover and complementary graph coloring , '' _ proc .",
    "ipco 1996 _ , 118 - 131 , 1996 .",
    "r.  hassin and a.  levin , `` a better - than - greedy approximation algorithm for the minimum set cover problem , '' _ siam journal on computing _ , * 35 * , 189 - 200 , 2005",
    ".    d.  s.  hochbaum .",
    ". _ approximation algorithms for np - hard problems .",
    "_ pws publishing , boston , ma , 1997 .",
    "d.  s.  hochbaum and a.  levin , `` covering the edges of bipartite graphs using @xmath538 graphs , '' _ proc .",
    "waoa 2007 , lncs 4927 _ , 116 - 127 , 2008 .",
    "c.  a.  j.  hurkens and a.  schrijver , `` on the size of systems of sets every @xmath28 of which have an sdr , with an application to the worst - case ratio of heuristics for packing problems '' , _ siam journal on discrete mathematics _ , * 2 * , 68 - 72 , 1989 .    d.  s.  johnson , `` approximation algorithms for combinatorial problems , '' _ journal of computer and system sciences _ , * 9 * , 256 - 278 , 1974 .    r.  m.  karp , `` reducibility among combinatorial problems , '' complexity of computer computations ( r.e . miller and j.w .",
    "thatcher , eds . ) , plenum press , new - york , 1972 , 85 - 103 .",
    "s.  khanna , r.  motwani , m.  sudan and u.  v.  vazirani , `` on syntactic versus computational views of approximability , '' _ siam journal on computing _ , * 28 * , 164 - 191 , 1998 .",
    "a.  levin , `` approximating the unweighted @xmath2-set cover problem : greedy meets local search , '' _ siam journal on discrete mathematics _ , * 23 * , 251 - 264 , 2008 .",
    "l.  lovsz , `` on the ratio of optimal integral and fractional covers , '' _ discrete mathematics _ ,",
    "* 13 * , 383 - 390 , 1975 .",
    "v.  t.  paschos , `` a survey of approximately optimal solutions to some covering and packing problems , '' _ acm comput . surveys _ , * 29 * , 171 - 209 , 1997 .    c.  h.  papadimitriou and m.  yannakakis , `` optimization , approximation and complexity classes , '' _ journal of computer system sciences _ , * 43 * , 425 - 440 , 1991 .",
    "r.  raz and s.  safra , `` a sub - constant error - probability low - degree test , and sub - constant error - probability pcp characterization of np , '' _ proc .",
    "stoc 1997 _ , 475 - 484 , 1997 .",
    "a.  schrijver , _ theory of linear and integer programming _ , john wiley & sons .",
    "p.  slavk , `` a tight analysis of the greedy algorithm for set cover , '' _ journal of algorithms _ , * 25 * , 237 - 254 , 1997 .",
    "we prove that the solution for @xmath96 stated in the theorem is optimal , and then compute its objective function value . in order to show optimality",
    ", we construct the dual program of @xmath96 , denoted @xmath539 , provide a feasible solution to it , and then use a complementary slackness argument . by the complementary slackness , we conclude that both solutions are optimal . then , we compute the objective function value of the primal solution .",
    "we start by constructing @xmath539 .",
    "the dual decision variables are :      the dual program is : + * program * @xmath539 @xmath543 for this lp , the primal variables @xmath544 correspond to the set of constraints ( [ dualcons1 ] ) .",
    "@xmath545 corresponds to ( [ dualcons2 ] ) .",
    "@xmath61 , @xmath546 , @xmath547 correspond to ( [ dualcons3 ] ) .",
    "@xmath548 , @xmath546 correspond to ( [ dualcons4 ] ) , and @xmath66 corresponds to ( [ dualcons5 ] ) .",
    "[ primalfeastight ] ( primal feasibility ) + the primal solution stated in theorem [ lp_solution ] is feasible for @xmath96 .",
    "moreover , the set of constraints ( [ primalcons1]),([primalcons2 ] ) and ( [ primalcons3 ] ) are tight , except for ( [ primalcons3 ] ) for the value of @xmath550 when @xmath98 is odd .    first , it is trivial that the non - negativity constraints are satisfied since our solution is @xmath551 .",
    "the set of constraints ( [ primalcons1 ] ) are satisfied , and tight , since for each @xmath64 , there exists exactly one @xmath69 index such that @xmath552 and for all other @xmath69 values @xmath553 .",
    "similarly , the constraint ( [ primalcons2 ] ) is tight , as @xmath554 . as for the set of constraints ( [ primalcons3 ] ) , which for convenience we rewrite as : @xmath555 we distinguish :    * *",
    "case 1 : * @xmath98 even : * * for even values of @xmath206 , @xmath556 , the first sum is @xmath557 since @xmath558 ( and all other terms are zero ) , the second sum is also @xmath557 because @xmath559 , and the last term is zero .",
    "thus , the left - hand side is zero and the constraint is tight . * * for odd values of @xmath206 , @xmath560 , the first sum is @xmath561 since @xmath562 , the second sum is zero , and the last term is @xmath561 since @xmath563 .",
    "the constraint is tight . * * case 2 : * @xmath98 odd : * * for even values of @xmath206 , @xmath564 , the first sum is @xmath557 since @xmath558 , the second sum is @xmath557 because @xmath559 , and the last term is zero .",
    "the constraint is tight . * * for odd values of @xmath206 , @xmath565 the first sum is @xmath561 since @xmath562 , the second sum is zero , and the last term is @xmath561 since @xmath563 .",
    "the constraint is tight .",
    "* * for @xmath566 , the first sum is @xmath567 since @xmath568 , the second sum is zero , and the last term is @xmath567 since @xmath101 .",
    "the constraint is tight . * * for @xmath569 , the first sum is @xmath570 since @xmath571 , the second sum is @xmath567 because @xmath568 and the last term is zero .",
    "thus , the left - hand side is @xmath572 , so the constraint is satisfied but not tight .",
    "observe that this case corresponds to the value @xmath550 in the original formulation ( [ primalcons3 ] ) .",
    "we next consider the feasibility of the dual solution given by ( [ dual_solution ] ) .",
    "first of all , it is trivial that @xmath573 , @xmath64 . next , by straightforward substitution , it is easily verified that the dual constraints ( [ dualcons2 ] ) and ( [ dualcons5 ] ) are tight . for the other constraints , we use the following auxiliary calculations :      the first part is proved by induction : the case @xmath550 is immediate since @xmath577 and @xmath578 .",
    "assume that ( [ sum_2_consec_gams ] ) holds for @xmath5 , @xmath579 .",
    "then for @xmath580 , we have : @xmath581 where the last equality holds by the induction hypothesis .",
    "for the second part , observe that @xmath582 where the inequality holds since @xmath573 and the equality is by ( [ sum_2_consec_gams ] ) .",
    "the result follows .",
    "[ dualfeastight ] ( dual feasibility ) + the dual solution defined by ( [ dualsol ] ) is feasible for @xmath539 .",
    "moreover , the tight constraints are ( [ dualcons2]),([dualcons4]),([dualcons5 ] ) , and ( [ dualcons3 ] ) for @xmath5 and @xmath69 values such that @xmath583 .",
    "we first identify the tight constraints in @xmath539 .",
    "consider the set of constraints ( [ dualcons4 ] ) .",
    "for @xmath5 values",
    "@xmath584 , it is easily seen that they are tight , by the definition of @xmath585 . for @xmath7 , substituting the definition of @xmath586 , we obtain @xmath587 by ( [ sum_2_consec_gams ] ) , the inequality is tight .",
    "consider the set of constraints ( [ dualcons3 ] ) , for @xmath69 values @xmath583 . from @xmath586 s definition , it follows immediately that the case @xmath7 ( hence @xmath588 ) is tight .",
    "for @xmath589 , substituting @xmath585 s definition yields : @xmath590 again , ( [ sum_2_consec_gams ] ) yields that it is tight .",
    "+ we are done identifying the tight dual constraints .",
    "we now turn to verify feasibility for the rest of the constraints .",
    "consider the set of constraints ( [ dualcons1 ] ) .",
    "substituting the definitions of @xmath591 and @xmath592 , we obtain : @xmath593 the inequality clearly holds for @xmath594 . for @xmath595 it evaluates to @xmath596 , which holds , as @xmath49 .",
    "+ consider the set of constraints ( [ dualcons3 ] ) , for @xmath546 and @xmath597 ( we have shown that cases for the values @xmath583 are tight ) . for @xmath584 ,",
    "we evaluate @xmath585 s definition to obtain : @xmath598 where the third equality follows from ( [ sum_2_consec_gams ] ) and the inequality follows from ( [ diff_2_consec_gams ] ) .",
    "this proves that for @xmath584 , the constraints ( [ dualcons3 ] ) hold , and also that @xmath599 . for @xmath7 ( and @xmath600 ) , we evaluate @xmath586 s definition : @xmath601 where again , the inequality follows from ( [ diff_2_consec_gams ] ) .",
    "this establishes that ( [ dualcons3 ] ) holds for @xmath46 @xmath602 and that @xmath603 .",
    "it remains to show that @xmath604 and @xmath591 are nonnegative .",
    "as @xmath605 and @xmath49 , it immediately follows from the definition that @xmath606 . for @xmath604 ,",
    "we use ( [ sum_2_consec_gams ] ) to obtain : @xmath607     + we now show that the solutions @xmath608 @xmath609 @xmath610 @xmath611 and @xmath612 @xmath613 satisfy the complementary slackness conditions with respect to programs @xmath96 and @xmath539 .",
    "thus , they are both optimal .",
    "( primal and dual optimality ) + the primal solution @xmath608 @xmath609 @xmath610 @xmath611 stated in theorem [ lp_solution ] is optimal for @xmath96 .",
    "the dual solution @xmath612 @xmath613 defined by ( [ dualsol ] ) is optimal for @xmath539 .",
    "consider @xmath96 .",
    "by lemma [ primalfeastight ] , all of @xmath96 s constraints are tight except for ( [ primalcons3 ] ) for the value of @xmath550 ( and when @xmath98 is odd ) . but the dual variable corresponding to this constraint , @xmath614 , is zero .",
    "hence , all primal complementary slackness conditions are satisfied .",
    "consider @xmath539 . from lemma [ dualfeastight ]",
    ", it follows that the constraints which are not tight are ( [ dualcons1 ] ) , and ( [ dualcons3 ] ) for the case @xmath597 . the primal variables corresponding to ( [ dualcons1 ] ) are @xmath544 , and are all zeros .",
    "hence the conditions are satisfied .",
    "the variables corresponding to ( [ dualcons3 ] ) for @xmath597 are @xmath61 , @xmath546 , @xmath615 .",
    "all of them are zeros , so again , the conditions are satisfied .",
    "therefore , all dual complementary slackness conditions are satisfied . since the complementary slackness conditions hold , the primal ( as well as the dual ) solution is optimal .",
    "+ we now compute the primal objective function , denoted @xmath616 . this time we distinguish four cases , depending on the parity of both @xmath2 and @xmath1 .",
    "in each case , we substitute the primal solution in the objective function .    * * case 1 : * @xmath1 even , @xmath2 even ( the term @xmath138 is for @xmath545 ) : + @xmath617 * * case 2 : * @xmath1 even , @xmath2 odd ( the first two terms are for @xmath545 , @xmath618 respectively ) : + @xmath619 * * case 3 : * @xmath1 odd , @xmath2 even ( the first two terms are for @xmath545 , @xmath618 respectively ) : + @xmath620 where the last equality follows from the straightforward identity : @xmath621 * * case 4 : * @xmath1 odd , @xmath2 odd ( the term @xmath138 is for @xmath545 ) : + @xmath622 where again , we used ( [ oddharmonic ] ) ."
  ],
  "abstract_text": [
    "<S> we are given @xmath0 base elements and a finite collection of subsets of them . </S>",
    "<S> the size of any subset varies between @xmath1 to @xmath2 ( @xmath3 ) . in addition , we assume that the input contains all possible subsets of size @xmath1 . </S>",
    "<S> our objective is to find a subcollection of minimum - cardinality which covers all the elements . </S>",
    "<S> this problem is known to be np - hard . </S>",
    "<S> we provide two approximation algorithms for it , one for the generic case , and an improved one for the special case of @xmath4 .    </S>",
    "<S> the algorithm for the generic case is a greedy one , based on packing phases : at each phase we pick a collection of disjoint subsets covering @xmath5 new elements , starting from @xmath6 down to @xmath7 . at a final step </S>",
    "<S> we cover the remaining base elements by the subsets of size @xmath1 . </S>",
    "<S> we derive the exact performance guarantee of this algorithm for all values of @xmath2 and @xmath1 , which is less than @xmath8 , where @xmath8 is the @xmath2th harmonic number </S>",
    "<S> . however , the algorithm exhibits the known improvement methods over the greedy one for the unweighted @xmath2-set cover problem ( in which subset sizes are only restricted not to exceed @xmath2 ) , and hence it serves as a benchmark for our improved algorithm .    the improved algorithm for the special case of @xmath4 is based on non - oblivious local search : it starts with a feasible cover , and then repeatedly tries to replace sets of size 3 and 4 so as to maximize an objective function which prefers big sets over small ones . for this case , our generic algorithm achieves an asymptotic approximation ratio of @xmath9 , and the local search algorithm achieves a better ratio , which is bounded by @xmath10 . + </S>",
    "<S> * keywords : * + approximation algorithms , set cover , local search .    </S>"
  ]
}