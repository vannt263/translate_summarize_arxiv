{
  "article_text": [
    "feynman integrals in perturbative quantum field theory are generically expressed in terms of the classical polylogarithm functions @xmath3 and the nielsen polylogarithms @xmath4  @xcite . in the late nineties , it was realized that these classes of functions are too restricted when going beyond one - loop level in the perturbative expansion , where new functions appear that can no longer be expressed in terms of the classical polylogarithm functions . while a completely generic generalization of polylogarithms has been studied in the mathematical literature ( going under the name of multiple polylogarithms  @xcite ) , it is mostly only a specific subset of multiple polylogarithms , the so - called harmonic polylogarithms  @xcite and their two - dimensional and cyclotomic generalizations  @xcite , that make their appearance in the theoretical predictions of physical quantities beyond leading - order .    in this paper",
    "we concentrate exclusively on harmonic polylogarithms ( hpl s ) up to weight four , which since their introduction have found many applications in computations up to two - loop order in the perturbative expansion , _",
    "e.g. _ ,  @xcite . in order to confront the theoretical next - to - next - to - leading order ( nnlo ) predictions to experiment , it is mandatory to be able to evaluate hpl s numerically in a fast and accurate way .",
    "the requirements to such a numerical code are twofold : first , the evaluation should be fast , because the use of nnlo matrix elements in monte carlo integration codes may require thousands , if not millions , of function calls .",
    "second , it is desirable to be able to compute hpl s for arbitrary complex arguments , which appear for example when the complex mass scheme is employed or for certain kinematic configurations in loop calculations involving massive particles @xcite . in the last decade , various codes have been developed to evaluate hpl s numerically .",
    "while the code hplog  @xcite , written in fortran , is restricted to the evaluation of hpl s up to weight four and for real values of the arguments , the code hpl ( mathematica)@xcite and the implementation of the harmonic polylogarithms into the ginac framework ( c++ )  @xcite are generic and allow to evaluate in principle any harmonic polylogarithm with arbitrary precision for any complex argument .",
    "the focus of this paper is the chaplin ( complex harmonic polylogarithms in fortran ) library , a new fortran code that allows to evaluate numerically all harmonic polylogarithms up to weight four for arbitrary complex arguments . while chaplin is similar in spirit to the aforementioned codes ,",
    "its main advantages lie in speed , through the use of fortran as a programming language , and in its capability to compute hpl s numerically for any point in the complex plane .",
    "chaplin reduces each of the 120 hpl s up to weight four to a set of 32 basis functions  @xcite , which are entirely expressed through only two new functions of weight four besides the classical polylogarithms .",
    "the basis functions are then mapped to the interior of the unit circle , where they are computed numerically using suitably chosen series expansions that allow to obtain a fast numerical convergence .",
    "the paper is organized as follows : in section  [ sec : hpl_review ] we give a short review of harmonic polylogarithms and of their main algebraic and analytic properties . in section  [ reductionchapter ]",
    "we review the reduction of all hpl s up to weight four to the set of basis functions introduced in ref .",
    "the series expansions used by chaplin to compute the basis functions numerically are derived in section  [ sec : series ] , while the chaplin library itself , together with comparisons to hplog , hpl and ginac , is presented in section  [ sec : chaplin ] .",
    "in this section we give a short review of harmonic polylogarithms ( hpl s ) , as they are at the heart of the chaplin library .",
    "hpl s are defined recursively via the iterated integrals  @xcite [ eq : hpldef ] h(a_1, ",
    ",a_n ; z ) = _ 0^z tf(a_1;t ) h(a_2,  ,a_n ; t ) , where @xmath5 and [ eq : faz ] f(-1;z ) = 11+z , f(0,z ) = 1z , f(1;z ) = 11-z , and where we defined @xmath6 .",
    "if all the @xmath7 are simultaneously zero , the integral   is divergent , and so in this case we use the definition , [ eq : h000 ] h(0_n;z ) = 1n!^n z , where we used the obvious vector notation @xmath8 . note that the number @xmath9 of indices is usually referred to as the _ weight _ of the hpl .",
    "harmonic polylogarithms are a generalization of the classical polylogarithm functions , defined recursively by , [ eq : lin_int ] _",
    "n(z ) = _ 0^ztt_n-1(t )  and   _ 1(z ) = -(1-z ) .",
    "iterated integrals are well - known to form a shuffle algebra , and so in particular we can express a product of two harmonic polylogarithms of weight @xmath10 and @xmath11 as a linear combination of hpl s of weight @xmath12 , [ eq : shuffle ] h(a_1;z ) h(a_2;z ) = _ a = a_1a_2 h(a;z ) , where @xmath13 denotes the shuffle of the two weight vectors @xmath14 and @xmath15 , _",
    "i.e. _ , all possible concatenations of @xmath14 and @xmath15 in which relative orderings of @xmath14 and @xmath15 are preserved .",
    "up to weight three , hpl s are known to be expressible through ordinary logarithms and the classical polylogarithms @xmath16 only .",
    "starting from weight four , not all hpl s can be expressed in terms of classical polylogarithms , and genuine new functions appear . for special classes of hpl s , however , it is possible to find closed expressions in terms of other functions .",
    "an example of this was already given in eq .",
    "moreover , we have , h(s_n;z ) = ( -s)^nn!^n(1-sz )  and   h(0_n-1,1;z ) = _ n(z ) , _ i.e. _ , harmonic polylogarithms contain the classical polylogarithms as special cases",
    ".    apart from the shuffle relation  , hpl s satisfy various intricate functional equations , relating hpl s with different arguments among each other . as an example",
    ", the functional equation relating hpl s with opposite arguments reads , h(a ;- z ) = ( -1)^p h(-a;z ) , where @xmath17 denotes the number elements in @xmath18 equal to @xmath19 .",
    "furthermore , it is always possible to express harmonic polylogarithms of the form @xmath20 as a linear combination of hpl s of the form @xmath21 .",
    "this allows in particular to analytically continue the harmonic polylogarithms outside the unit disc , a property that will be used later in the numerical implementation of the hpl s into the chaplin library .",
    "additional relations among hpl s with related arguments have been presented in ref .",
    "@xcite .",
    "let us conclude this section by discussing some special values of the argument @xmath22 for which the hpl s can be expressed in terms of known transcendental numbers .",
    "first , it is easy to see that , unless @xmath23 , all hpl s vanish for @xmath24 .",
    "second , if the argument @xmath22 of a harmonic polylogarithm is @xmath19 , then it can be expressed in terms of so - called _ _ colored multiple zeta values _ _ ( cmzv s ) , h&(_m_1 - 1,s_1, ",
    ",_m_k-1,s_k;1 ) + & = ( -1)^m+p(m_1,  ,m_k;s_1,s_2/s_1,  ,s_k / s_k-1 ) , with @xmath25 and @xmath26 , and @xmath17 denotes the number of elements in @xmath27 equal to + 1 .",
    "the cmzv s are defined by nested sums , [ eq : cmzv_def ] ( m_1,  ,m_k;_1,  ,_k ) = _ 0<n_1<n_2<  <n_k , with @xmath28 .",
    "cmzv s are convergent if and only if @xmath29 .",
    "it follows then immediately that hpl s of the form @xmath30 are in general divergent . ] .",
    "from the previous section it is clear that many hpl s are not independent functions , but they are related among themselves by various intricate relations . in order to achieve an efficient numerical implementation , it is desirable to have as few independent functions as possible , _",
    "i.e. _ , we would like to resolve all the identities in order to arrive at a minimal set of functions , which are ` as simple as possible ' and through which all other hpl s can be expressed .    all the functional equations among harmonic polylogarithms ( or , more generically , among multiple polylogarithms ) can be resolved through the so - called symbol calculus . at the heart of the symbol calculus",
    "is the so - called _ symbol map _",
    "@xcite , a linear map that associates to an hpl of weight @xmath9 a tensor of rank @xmath9 . as an example",
    ", the tensor associated to the classical polylogarithm @xmath31 reads ,    s    ( _ n(z ) ) = -(1-z)_(n-1 ) .",
    "furthermore , the symbol maps products that appear inside the tensor product to a sum of tensors ,  ( xy)  =  x  +  y  .",
    "it is conjectured that all the functional identities among ( multiple ) polylogarithms are mapped under the symbol map @xmath32 to algebraic relations among the tensors .",
    "hence , the symbol calculus provides an effective way to resolve all the functional equations among ( a certain class of ) multiple polylogarithms .    in ref .",
    "@xcite , the symbol map was used to obtain a set of basis functions through which all hpl s up to weight four can be expressed . the basis functions obtained in ref .",
    "@xcite read ,    * for weight one , [ eq : b1 ] + b + _ 1^(1)(z)= z , + b + _ 1^(2)(z)= ( 1-z ) , + b + _ 1^(3)(z)= ( 1+z ) , * for weight two , [ eq : b2 ] + b + _ 2^(1)(z)= _ 2(z ) , + b + _ 2^(2)(z)= _ 2(-z ) , + b + _ 2^(3)(z)= _ 2(1-z2 ) , * for weight three , [ eq : b3 ] & + b + _ 3^(1)(z)= _ 3(z ) , + b + _ 3^(2)(z)= _ 3(-z ) , + b + _ 3^(3)(z)= _ 3(1-z ) , + & + b + _ 3^(4)(z)= _ 3(11+z ) , + b + _ 3^(5)(z)= _ 3(1+z2 ) , + b + _ 3^(6)(z)= _ 3(1-z2 ) , + & + b + _ 3^(7)(z)= _ 3(1-z1+z ) , + b + _ 3^(8)(z)= _ 3(2zz-1 ) , * for weight four , [ eq : b4 ] & + b + _ 4^(1)(z)= _ 4(z ) , + b + _ 4^(2)(z)= _ 4(-z ) , + & + b + _ 4^(3)(z)= _ 4(1-z ) , +",
    "b + _ 4^(4)(z)= _ 4(11+z ) , + & + b + _ 4^(5)(z)= _ 4(zz-1 ) , +",
    "b + _ 4^(6)(z)= _ 4(zz+1 ) , + & + b + _ 4^(7)(z)= _ 4(1+z2 ) , +",
    "b + _ 4^(8)(z)= _ 4(1-z2 ) , + & + b + _ 4^(9)(z)= _ 4(1-z1+z ) , + b + _ 4^(10)(z)= _ 4(z-1z+1 ) , + & + b + _ 4^(11)(z)= _ 4(2zz+1 ) , + b + _ 4^(12)(z)= _ 4(2zz-1 ) , + & + b + _ 4^(13)(z)= _ 4(1-z^2 ) , + b + _ 4^(14)(z)= _ 4(z^2z^2 - 1 ) , + & + b + _ 4^(15)(z)= _ 4(4z(z+1)^2 ) .",
    "all harmonic polylogarithms up to weight three can be expressed through the basis functions in eq .",
    "( [ eq : b1 ] - [ eq : b4 ] ) . starting from weight four , we need to extend the set of functions by adjoining three new elements to the basis , [ eq : b11 ]    b",
    "_ 4^(16)(z ) = _ 2,2(-1,z ) , &    b    _",
    "4^(17)(z ) = _ 2,2(12,2zz+1 ) , +    b    _ 4^(18)(z ) & = _",
    "2,2(12,2zz-1 ) , where @xmath33 denotes a two - variable multiple polylogarithm that can not be expressed through classical polylogarithms only , _",
    "2,2(z_1,z_2 ) = _ n_1=1^_n_2=1^n_1 - 1z_1^n_1n_1 ^ 2z_2^n_2n_2 ^ 2 . for practical purposes",
    "we find it more convenient to use a different set of multiple polylogarithms as basis functions than the one used in ref .",
    "more specifically , we find it more convenient to perform a change of basis and replace the functions @xmath34 , for @xmath35 , by the functions @xmath36 , which are directly expressed as hpl s , [ eq : b4p ]    b    _",
    "4^(16)(z ) & = h(0,1,0,-1;z ) =    b    _ 4^(16)(-z ) , +    b    _ 4^(17)(z ) & = h(0,1,1,-1;z ) , +    b    _ 4^(18)(z ) & = h(0,1,1,-1;-z ) .",
    "the set of the 32 functions @xmath37 defines a basis through which all hpl s up to weight four can be expressed . as a consequence , any numerical code to evaluate this set of basis functions will automatically be able to evaluate all 120 hpl s up to weight four .",
    "furthermore , as the basis functions only involve the two genuine multiple polylogarithms @xmath38 and @xmath39 besides the ordinary logarithms and the classical polylogarithms @xmath40 , @xmath41 and @xmath42 , it is enough to have numerical routines for these latter functions . in this way we can reduce the problem of evaluating the 120 hpl s up to weight four to only a handful of non - trivial numerical routines . in the chaplin library , these routines consist of series expansions for the aforementioned functions that will be described in the next section .",
    "let us conclude this section by reviewing some of the properties of the basis functions @xmath37 derived in ref .",
    "first , it is easy to check that all the basis functions are real for @xmath43 $ ] .",
    "however , we stress that the expressions in eq .",
    "( [ eq : b1 ] - [ eq : b4p ] ) are strictly valid only for @xmath43 $ ] .",
    "while most of the expressions are valid everywhere throughout the unit disc , the analytic form of @xmath44 valid on the whole interior of the disc reads  @xcite , [ eq : li41mz2 ] &    b    _",
    "4^(13)(z ) + & = \\",
    "4(1-z^2 ) , ( z ) > 0 & ( z)=0 ( z)0 ) , + _",
    "4(1-z^2)-i3(z)^3(1-z^2 ) , & ,    . where @xmath45 .",
    "second , since it is our goal to build a numerical code to evaluate hpl s for arbitrary complex arguments , we need to analytically continue the basis functions outside the unit disc . in ref .",
    "@xcite inversion relations of the form    b    _ j^(i)(z ) = _ k , lc_ijkl    b    _ k^(l)(1z)+ were derived that can be used for this purpose .",
    "finally , we note that there is a subtlety in the basis function @xmath46 when going from the interior to the exterior of the unit disc because @xmath47 has a branch cut along the unit circle in the complex @xmath22-plane . in ref .  @xcite it was shown that if we want @xmath47 to be continuous and real for @xmath43 $ ] , we need to choose the following prescription for @xmath48 ,    b    _ 4^(15)(z ) = _ 4(4z(1+z)^2+i(z ) ) .",
    "in the previous section we introduced a set of basis functions through which every hpl up to weight four can be expressed .",
    "the basis has the property that it only involves two types of new functions , besides the ordinary logarithm and the classical polylogarithms .",
    "these two new functions can be chosen to correspond to the two harmonic polylogarithms @xmath38 and @xmath39 . in this section",
    "we present series expansions of these functions which are used inside chaplin to evaluate the basis functions .",
    "let us start by introducing some notations and conventions . as we will deal with series expansions , we define some operations on the coefficients of the series , _",
    "i.e. _ , on sequences of complex numbers . for two sequences of complex numbers @xmath49 and @xmath50",
    ", @xmath51 , we define their convolution product as the sequence @xmath52 defined by [ eq : convolution_def ] ( ab)_n = _ k=0^na_kb_n - k .",
    "it is easy to check by manipulating the sum that this operation is associative , commutative and has the sequence @xmath53 , where @xmath54 is the kronecker symbol , as a neutral element , [ eq : convol_props ] a(bc ) = ( ab)c , ab = ba , a= a = a. the fact that @xmath55 is a neutral element is obvious , and the commutativity follows immediately from changing the summation variable from @xmath56 to @xmath57 .",
    "associativity is less obvious , and is proved in appendix  [ app : associativity ] .",
    "furthermore , this operation is compatible with the usual termwise addition and scalar multiplication of sequences , a(b+c ) = ab + ac,(a)b = ( ab ) , where @xmath58 , @xmath59 and @xmath60 are sequences of complex numbers and @xmath61 is a constant complex number .",
    "the convolution product allows us to write the coefficients that appear in the product of two power series as the convolution of the coefficients of the individual factors , _",
    "e.g. _ , ( _ m=0^x^m ) ( _ n=0^x^n ) = _ n=0^x^n . finally ,",
    "for later convenience , we define for a given sequence @xmath49 of complex numbers the three new sequences @xmath62 , @xmath63 and @xmath64 by [ eq : bar_tilde ] a_n = a_nn+1,|a_n = ( -1)^na_n , s(a)_n=\\ {    lla_n-1 , & n1 + 0 , &    .. the bar - operation allows us to define the coefficients of the series expansion of @xmath65 in terms of the coefficients of the series expansion of @xmath66 .",
    "more precisely , the two series expansions are related by f(z ) = _",
    "n=0^f_nz^n  and   f(-z ) = _ n=0^|f_nz^n . we also define the composition of the ` @xmath67'-operation and the convolution and shift operations , ( ab)_n = ( ab)^_n = ( ab)_nn+1  and  ( a)_n = s(a)_nn+1 .",
    "note that the @xmath68-operation is commutative , but not associative . for later convenience",
    "we introduce the following convention , abc a(bc ) .",
    "the operations on sequences of complex numbers we just defined allow us to write the coefficients appearing in the series expansion of the basis functions in a compact closed form .",
    "the sequences of complex numbers that appear inside these closed - form expressions are well - known sequences of ( rational ) numbers which we recall in the following .    1 .   * ( shifted ) @xmath69 values * : ^(k)_n = \\ { + ll _ k - n , & k - n 1 , + h_k-1 , & k - n = 1 , + . where @xmath70 denotes the riemann @xmath69 function and @xmath71 the @xmath72-th harmonic number , ( z ) = _",
    "n=1^ h_m = _ n=1^m1n .",
    "note that @xmath73 is rational for @xmath74 and transcendental of weight @xmath75 otherwise .",
    "* bernoulli numbers : * the bernoulli numbers @xmath76 are defined through the generating series [ eq : bernoulli ] ze^z-1 = _",
    "n=0^b_nz^nn!. note that @xmath77 , @xmath78 .",
    "the bernoulli numbers are related to @xmath69 values via the formula , [ eq : bernoulli_zeta ] _ 0 = b_1=-12  and",
    "_ -n = -b_n+1n+1 n1 .",
    "* genocchi numbers : * the genocchi numbers are defined through the generating series [ eq : gen_func_genocchi ] 2t1+e^t = _ n=0^t^n .",
    "they are related to the bernoulli numbers via g_n = 2(1 - 2^n)b_n .",
    "note that @xmath79",
    ". 0.3 cm 4 .",
    "* polylogarithms in half - integer values : * the series expansion of the basis functions also involve the following sequences of numbers _",
    "n = ( -1)^n_-n(12 ) .",
    "the sequence @xmath80 admits the generating function , = _",
    "n=0^_nz^nn!.      in this section we discuss series expansions of classical polylogarithms that can be used to obtain reliable numerical results for these functions ( at least in some regions of the complex plane )",
    ". in particular , truncated versions of these series are used by chaplin to evaluate the classical polylogarithms . as the goal of chaplin is to provide an efficient way to evaluate harmonic polylogarithms for arbitrary complex arguments ,",
    "we divide the problem into two regions : for complex numbers @xmath22 with @xmath81 we use the series expansions to evaluate the basis functions numerically , whereas points with @xmath82 are mapped back into the interior of the unit disc using the inversion formul  for the classical polylogarithms . hence , from here on we will only concentrate on complex number @xmath22 with @xmath81 .",
    "classical polylogarithms can be expanded into a power series around @xmath24 , [ eq : lin_power_series ] _ n(z ) = _ k=1^. even though this series is convergent for @xmath83 , the convergence is rather slow .",
    "a faster convergence can be achieved by using the so - called bernoulli substitution  @xcite , which consists in expanding @xmath3 into a series in .",
    "while this expansion converges much faster for @xmath84 than the taylor expansion  , it fails to produce reliable results when @xmath22 approaches 1 . in ref .",
    "@xcite an alternative expansion of the classical polylogarithms into a series in @xmath85 was derived . in this case",
    "the convergence is fast inside an annulus around @xmath24 , but fails to converge for @xmath84 .",
    "the strategy seems thus clear : we can split the interior of the unit disc into two distinct regions , and in each region one of the two series expansions converges quickly .",
    "similar expansions can also be derived for the two remaining basis functions , @xmath38 and @xmath39 ( and in principle for every hpl ) and are discussed in the rest of this section .",
    "we start by deriving in detail the expansions of the dilogarithm , because even though these results are well - known , the techniques used in the derivation will be the starting point for the higher - weight cases .",
    "[ [ series - expansions - of - mathrmli_2z . ] ] series expansions of @xmath40 .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let us start by deriving the expansion of @xmath40 into a series in @xmath86 .",
    "letting @xmath87 , this is equivalent to finding the taylor series expansion of the function @xmath88 .",
    "we start from the integral representation   and we get , _",
    "2(1-e^-x ) = _ 0 ^ 1-e^-xtt_1(t)=- _ 0 ^ 1-e^-xtt(1-t ) .",
    "performing the change of variables @xmath89 and using eq .  , we obtain , _",
    "2(1-e^-x ) = -_0^xe^-tt1-e^-t(-t ) = _ 0^xtte^t-1 = _ k=0^x^k+1 , or equivalently in terms of the original variable @xmath22 , [ eq : bernoulli_li2 ] _",
    "2(z ) = _ k=0^(-(1-z))^k+1 .",
    "the series expansion   converges rather quickly inside a disc around @xmath24 of radius @xmath90 ( the precise value of @xmath91 used by chaplin will be given in the next section ) . in the remaining annulus",
    "@xmath92 the dilogarithm admits a series expansion in @xmath85  @xcite , [ eq : li2_clz ] _",
    "2(z ) = -z(-z ) + _ k=0^^kz .",
    "let us sketch the derivation of eq .  .",
    "letting @xmath93 , we start from the integral representation of the dilogarithm and perform the change of variable @xmath94 , [ eq : li2_clz_derivation ] _",
    "2(e^x ) = _ 2+_1^e^xtt_1(t ) = _ 2 + _ 0^xt_1(e^t ) . in order to proceed ,",
    "we need the taylor expansion of @xmath95 . using the integral representation of @xmath96 as well as eq .  , we obtain , [ eq : li1_clz_derivation ] _",
    "1(e^x ) & = _ 0^e^xt1-t = _ 0 + & = _ 0 . the last term in eq .",
    "is finite , whereas the logarithmic divergences cancel between the first two terms , _ 0 & = _ 0 + & = _ 0 = -(-x ) .",
    "hence , using eq .   and the fact that @xmath97 for even @xmath9 , we get , [ eq : li1_clz_derivation_2 ] _",
    "1(e^x ) & = -(-x ) -_n=1^ = -(-x ) + _ 0x+_n=1^ ( -x)^n+1 + & = -(-x ) + _",
    "n=0^ x^n+1 . inserting eq .   into eq .",
    "and integrating term by term immediately reproduces eq .",
    "( after identification @xmath93 ) . note the appearance of the nested logarithm , @xmath98 in eq .  , which seems to be divergent for @xmath22 close to 1 .",
    "it is however easy to check that _",
    "z1 ^ -z(-z ) = 0 , and so the whole expression is well behaved .",
    "[ [ series - expansions - of - mathrmli_nz - n2 ] ] series expansions of @xmath3 , @xmath99 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    .",
    "the derivations of the series expansions of @xmath40 presented in the previous section are by no means restricted to the weight two case , but we can repeat exactly the same steps for classical polylogarithms of arbitrary weight . in ref",
    ".  @xcite the following more general version of eq .",
    "was proven , [ eq : lin_clz ] _",
    "n(z ) = -1(n-1)!^n-1z(-z ) + _ k=0^^kz .",
    "the proof goes by recursion in the weight , and we refer to ref .",
    "@xcite for more details .",
    "the generalization of eq .",
    "to arbitrary weight is simply given by , [ eq : lin_bernoulli ] _",
    "n(z ) = _ k=0^[b(_n-2 ) ] _ k(-(1-z))^k+1 .",
    "the proof goes by recursion in the weight .",
    "we have shown in the previous section that eq .",
    "is true for @xmath100 . if we assume in addition eq .",
    "true up to weight @xmath9 , then we obtain , _",
    "n+1(1-e^-x ) & = _ 0 ^ 1-e^-xtt_n(t ) + & = _ l=0^[b(_n-2 ) ] _ l_0^xtte^t-1t^l + & = _",
    "l=0^(_n-1 ) _ l_m=0^x^l+m+1l+m+1 + & = _",
    "k=0^[b(_n-1 ) ] _ kx^k+1k+1 .",
    "the series expansions in @xmath85 and @xmath86 for the classical polylogarithms are enough to evaluate all basis functions , except @xmath101 , for @xmath102 , numerically in a fast and reliable way . for @xmath101 , for @xmath102 we need to extend these series expansions beyond the case of classical polylogarithms .",
    "in this section we present the analogues of the series expansions in @xmath86 and @xmath85 of the previous section for the three remaining basis functions that can not be expressed in terms of classical polylogarithms only , namely @xmath101 , for @xmath102 . as the derivation of the expansions follows exactly the same lines as for the classical polylogarithms , we content ourselves to present the results and refer to appendix  [ app : proofs ] for details .",
    "let us start by deriving the expansion of @xmath101 , @xmath102 into a series in @xmath86 .",
    "we can obtain these expansions as a corollary of a more general result : if a function @xmath103 admits a taylor expansion of the form    h    ( 1-e^-x ) = _ n=0^x^n+1 , then for @xmath104 the functions @xmath105 defined by [ eq : ch_int ]    h    _",
    "a(z ) = _ 0^ztf(a;z )    h    ( t ) , where @xmath106 was defined in eq .  ,",
    "admit the following taylor expansions [ eq : hpl_log(1-x)_recursive ]    h    _",
    "1(1-e^-x ) & = _ n=0^x^n+1=_n=0^x^n+2 , +    h    _ 0(1-e^-x ) & = _ n=0^x^n+1 , +    h    _ -1(1-e^-x ) & = _ n=0^x^n+1 .",
    "to prove these identities we start from the integral representation   and , after having performed the change of variable @xmath89 , we insert the series expansion for the integrand and integrate term by term , which yields immediately eq .  .",
    "combined with the expansions for hpl s of weight one , eq .",
    "allows us in principle to recursively expand hpl s of arbitrary weight into a series in @xmath86 .",
    "a similar iterative procedure was already described in ref .",
    "@xcite . as",
    "the classical polylogarithms are just a special case of the harmonic polylogarithms , eq .",
    "can be seen as a special solution of eq .   for @xmath107",
    "moreover , we can easily read off from eq .   the corresponding expansions of @xmath38 and @xmath39 , [ eq : logx_h ] h(0,1,0,-1;z ) & = _ n=0^(-(1-z))^n+1 , + h(0,1,1,-1;z ) & = _ n=0^(-(1-z))^n+1 , + with @xmath108 .",
    "the expansions   are used inside chaplin to evaluate the basis functions @xmath109 , @xmath102 for @xmath22 close to the origin .",
    "similar to the case of the classical polylogarithms , these series converge rather slowly if @xmath22 is close to 1 .",
    "we therefore need additional expansions in @xmath85 that have a good convergence behavior in that region .    in an annulus inside the unit disc ,",
    "the basis functions @xmath109 , @xmath102 can be expanded into a series in @xmath85 .",
    "as these basis functions are entirely expressed through @xmath38 and @xmath39 , it is enough to find the expansions for these cases .",
    "we obtain , [ eq : hpl_logx ] h&(0,1,0,-1;z ) = -4 _ 4()- _ 3 2 + -^42 + & + ^22 - 58_3z+^262z + ^212_2(z ) + & + 2z_2(z)-22_3(z ) + 12_n=0^^n+2z , + h&(0,1,1,-1;z ) = _ 4()- _ 3 2++^42 + & + ( ^22-)_2(z)+ ( _ 3 + ^32- 2 ) z + & -12_n=0 ^ 1n^n+1z , with _ n = g_nn  and  _ n=(b)_nn .",
    "the proof of the eq .   is sketched in appendix  [ app : proofs ] .",
    "a similar expansion in the particular case of @xmath110 has already been considered in ref .",
    "we stress that the relations   are only valid in the region @xmath111 and @xmath112 , for some @xmath91 ( we give a precise value for @xmath91 in the next section when discussing the implementation of these expansions into chaplin ) . for @xmath113",
    ", we proceed in following way ,    * for @xmath38 , we map the problem to @xmath114 via the functional equation h&(0,1,0,-1;z ) = -h(0,-1,0,1;-z ) + & = h(0,1,0,-1;-z)-_4(1-z^2)+ _ 4 ( ) + & -2 _ 4()+2 _ 4(-z)+2 _",
    "4(z)-2 _ 4 ( ) + & -2 _ 4()+2 _ 4(1+z)-2 _",
    "3(-z ) ( 1-z ) + & -2 _",
    "3(z ) ( 1+z)- _ 3 ( 1-z)- _ 3 ( 1+z ) + & - ^4(1-z)- ^4(1+z)+ ( -z ) ^3(1-z ) + & + ( 1+z ) ^3(1-z)+ ^3(1+z ) ( 1-z ) & + ( -z )",
    "^3(1+z)+ ^2(1+z ) ^2(1-z ) + & - ( -z ) ( 1+z ) ^2(1-z)+ ^2(1-z ) + & - ( -z ) ^2(1+z ) ( 1-z)- ^2(1+z ) + & -_2(-z ) _ 2(z)+ ( 1+z ) ( 1-z)+ . * for @xmath39 , we use the following expansion , valid for @xmath113 , h&(0,1,1,-1;z ) = 2 _ 4()-+^42 + ^22 + & + ( _ 3-^32 + 2)z-(-^22)_2(-z ) + & -14_n=0 ^ 1n^n+1(-z)((-(-z))-1n+1 - 1n ) + & + 14_n=0 ^ 1n^n+1(-z)+14_n=0^^n+2(-z ) , with g^(i)_n = g_nn^i  and   _",
    "n = _ -n .    at this stage",
    "we have all the ingredients to evaluate all harmonic polylogarithms up to weight four numerically for arbitrary complex arguments .",
    "to this effect , we have implemented the decomposition of hpl s to the basis defined by eq .",
    "( [ eq : b1 ] - [ eq : b4p ] ) and the series expansions presented in this section into the chaplin library , which we will present in the next section .",
    "the chaplin code is available as a ` .tar ` archive on the website + http://projects.hepforge.org/chaplin/ .",
    "once unpacked , the code can be compiled via    ....",
    "./configure   make install ....    as a result , both a static and a shared library are created in the directory ` /usr",
    "/ lib ` , which may require root privileges .",
    "the directory which the library is installed in can be changed during configuration via    ....",
    "./configure --prefix=/\"path to chaplin/ \" ....    this feature allows to create the library even without root privileges .",
    "we advocate the use of the shared library when linking chaplin to a fortran code , such that the routines needed by the program will only be called during run - time .",
    "static linking , on the contrary , puts all the chaplin functions into the executable chaplin is linked against , which might result in long compilation times and rather large executables .",
    "once compiled , the chaplin library can be linked to other programs in the same way as any other library .",
    "this enables the user to call the numerical routines of chaplin from within his / her own program .",
    "the function calls to the numerical routines of chaplin are done via the following functions ,    ....   double complex hpl1(n1 , z )   double complex hpl2(n1 , n2 , z )   double complex hpl3(n1 , n2 , n3 , z )   double complex hpl4(n1 , n2 , n3 , n4 , z ) ....    with ` ni ` @xmath115 and ` z ` being any ` double complex ` number .",
    "the return value is @xmath116 , _ i.e. _ , the hpl with weight vector @xmath117 at the point @xmath22 .",
    "alternatively , in case only the real and/or imaginary parts of an hpl are needed , the user might find the following functions convenient ,    ....   double precision hpl2real(n1 , n2 , xr , xi )   double precision hpl2im(n1 , n2 , xr , xi ) ....    and similarly for ` hpl3 , hpl4 ` .",
    "the variables ` xr , xi ` are ` double precision ` variables , denoting the real and imaginary parts of the argument of the hpl . note that these functions are useful to call chaplin from within a ` c++ ` program , where complex numbers are not natively supported .",
    "when one of the aforementioned functions is called , chaplin starts by decomposing the corresponding hpl internally into the basis of 32 functions described in section  [ reductionchapter ] . in a second step ,",
    "chaplin proceeds to the numerical evaluation of the individual basis functions appearing in the decomposition .",
    "the numerical routines called to this effect are different depending on the value of the argument @xmath22 of the hpl .",
    "more precisely , the complex plane is divided into six regions ( see fig .  [ fig ] ) ,    * region i : inside an annulus @xmath118 , the basis functions are evaluated by using the expansions in @xmath86 presented in section  [ sec : series ] . *",
    "region ii : inside an annulus @xmath119 , the basis functions are evaluated by using the expansions in @xmath85 presented in section  [ sec : series ] .",
    "* region iii : points outside the unit disc , @xmath82 , are mapped back to the interior of the unit disc via inversion relations .",
    "* regions iv & v : the basis of section  [ reductionchapter ] involves functions that are logarithmically divergent at @xmath19 , leading to spurious singularities in the basis expansion . to avoid numerical instabilities caused by these spurious singularities , we use taylor expansions close to @xmath120 to evaluate the individual hpl s without proceeding to a decomposition into basis functions .",
    "* region vi : in order to achieve a good numerical precision close to the origin of the complex plane , we use taylor expansions in a disc @xmath121 without proceeding to a decomposition into basis functions .        at the end of this procedure",
    ", chaplin returns the numerical value of the hpl given as an input . in case",
    "the numerical evaluation of a divergent quantity is attempted ( _ e.g. _ , @xmath122 or @xmath30 ) an exception is thrown and the evaluation is aborted . note that for real values of the argument , chaplin uses the ` @xmath123 ' prescription , _",
    "i.e. _ , for @xmath124 , @xmath21 is interpreted as @xmath125 .",
    "we conclude this section by giving an example of a sample program that prints all nine hpl s of weight two at the point @xmath126 .    ....",
    "program chaplintest          double complex hpl2,z      integer n1,n2        z = dcmplx(1.54d0,0.91d0 )      do n1=-1,1        do n2=-1,1          print * , hpl2(n1,n2,z )        enddo      enddo        end program ....      we have compared the results obtained by chaplin against hplog and ginac for real values of the argument and against hpl and ginac for complex values of the argument . the results for some sample points are summarized in tab .",
    "[ tab : z=0.5 ] - [ tab : z=2 + 2i ] .",
    "for real arguments , a small imaginary part is assumed .",
    "note that the reduction of @xmath127 to basis functions is among the most complicated cases , involving almost 50 lines of fortran code .    in order to give an idea of the cpu time needed per function call , we present in tab .",
    "[ tab : time ] the time for one million function calls on a 3 ghz intel x5450 processor for some hpl s in the six different regimes of the complex plane shown in fig .",
    "the running time varies only marginally inside a given region .",
    "the resulting average times for a single function call are given in tab .",
    "[ tab : time ] in units of microseconds ( @xmath2 ) .",
    "@xmath128 @xmath128    .average time per function call in microseconds ( @xmath2 ) , for the six regions of the complex plane shown in fig .",
    "[ cols=\"^,^,^,^,^,^,^\",options=\"header \" , ]        & chaplin & 5.8224052646501201e-01 @xmath129 0 .",
    "@xmath130 + @xmath131 & hplog & 5.8224052646501256e-01 @xmath129 0 .",
    "@xmath130 + & ginac & 5.8224052646501245e-01 @xmath129 0 .",
    "@xmath130 + & chaplin & 5.3721319360804021e-01 @xmath129 0 .",
    "@xmath130 + @xmath132 & hplog & 5.3721319360804010e-01 @xmath129 0 .",
    "@xmath130 + & ginac & 5.3721319360804021e-01 @xmath129 0 . @xmath130",
    "+ & chaplin & 5.1747906167389901e-01 @xmath129 0 .",
    "@xmath130 + @xmath133 & hplog & 5.1747906167389945e-01 @xmath129 0 .",
    "@xmath130 + & ginac & 5.1747906167389934e-01 @xmath129 0 .",
    "@xmath130 + & chaplin & 7.7856141848313908e-02 @xmath129 0 .",
    "@xmath130 + @xmath134 & hplog & 7.7856141848313090e-02 @xmath129 0 .",
    "@xmath130 + & ginac & 7.7856141848313215e-02 @xmath129 0 . @xmath130",
    "+ & chaplin & -6.3908284909225732e-02 @xmath129 0 . @xmath130 + @xmath135 & hplog & -6.3908284909226009e-02 @xmath129 0 .",
    "@xmath130 + & ginac & -6.3908284909226135e-02 @xmath129 0 .",
    "@xmath130 +     & chaplin & 2.4674011002723404e+00 @xmath129 2.1775860903036022e+00 @xmath130 + @xmath131 & hplog & 2.4674011002723399e+00 @xmath129 2.1775860903036017e+00 @xmath130 + & ginac & 2.4674011002723395e+00 @xmath136 2.1775860903036022e+00 @xmath130 + & chaplin & 2.7620719062289245e+00 @xmath129 7.5469382946024677e-01 @xmath130 + @xmath132 & hplog & 2.7620719062289241e+00 @xmath129 7.5469382946024799e-01 @xmath130 + & ginac & 2.7620719062289241e+00 @xmath136 7.5469382946024810e-01 @xmath130 + & chaplin & 2.4278628067547032e+00 @xmath129 1.7437130002545320e-01 @xmath130 + @xmath133 & hplog & 2.4278628067547032e+00 @xmath129 1.7437130002545298e-01 @xmath130 + & ginac & 2.4278628067547032e+00 @xmath136 1.7437130002545306e-01 @xmath130 + & chaplin & 5.1994752047739468e-01 @xmath129 1.7909927717176168e+00 @xmath130 + @xmath134 & hplog & 5.1994752047739512e-01 @xmath129 1.7909927717176164e+00 @xmath130 + & ginac & 5.1994752047739445e-01 @xmath136 1.7909927717176168e+00 @xmath130 + & chaplin & 8.0548200591357266e-01 @xmath136 1.3189461296972327e+00 @xmath130 + @xmath135 & hplog & 8.0548200591356789e-01 @xmath136 1.3189461296972333e+00 @xmath130 + & ginac & 8.0548200591356811e-01 @xmath129 1.3189461296972318e+00 @xmath130 +     & chaplin & 4.5398526915029508e-01 @xmath129 6.4376733288926902e-01 @xmath130 + @xmath131 & hpl & 4.5398526915029541e-01 @xmath129 6.4376733288926879e-01 @xmath130 + & ginac & 4.5398526915029558e-01 @xmath129 6.4376733288926880e-01 @xmath130 + & chaplin & 4.8615953708555987e-01 @xmath129 5.7007740708876864e-01 @xmath130 + @xmath132 & hpl & 4.8615953708556014e-01 @xmath129 5.7007740708876930e-01 @xmath130 + & ginac & 4.8615953708556009e-01 @xmath129 5.7007740708876897e-01 @xmath130 + & chaplin & 4.9578112182183881e-01 @xmath129 5.3402238407975344e-01 @xmath130 + @xmath133 & hpl & 4.9578112182183897e-01 @xmath129 5.3402238407975377e-01 @xmath130 + & ginac & 4.9578112182183876e-01 @xmath129 5.3402238407975355e-01 @xmath130 + & chaplin & -3.6325772179994109e-02 @xmath129 1.384991682646747e-01 @xmath130 + @xmath134 & hpl & -3.6325772179994879e-02 @xmath129 1.3849916826467456e-01 @xmath130 + & ginac & -3.6325772179994845e-02 @xmath129 1.3849916826467457e-01 @xmath130 + & chaplin & 9.1142643382278842e-02 @xmath136 9.8191320890700317e-02 @xmath130 + @xmath135 & hpl & 9.1142643382278176e-02 @xmath136 9.8191320890700678e-02 @xmath130 + & ginac & 9.1142643382278163e-02 @xmath136 9.8191320890700595e-02 @xmath130 +     & chaplin & 3.4497312626178323e-01 @xmath129 2.7342872186403562e+00 @xmath130 + @xmath131 & hpl & 3.4497312626178264e-01 @xmath129 2.7342872186403560e+00 @xmath130 + & ginac & 3.4497312626178261e-01 @xmath129 2.7342872186403562e+00 @xmath130 + & chaplin & 1.2370548907501702e+00 @xmath129 2.7024607822310069e+00 @xmath130 + @xmath132 & hpl & 1.2370548907501697e+00 @xmath129 2.7024607822310064e+00 @xmath130 + & ginac & 1.2370548907501697e+00 @xmath129 2.7024607822310065e+00 @xmath130 + & chaplin & 1.7008027579027265e+00 @xmath129 2.4625762177390942e+00 @xmath130 + @xmath133 & hpl & 1.7008027579027260e+00 @xmath129 2.4625762177390939e+00 @xmath130 + & ginac & 1.7008027579027261e+00 @xmath129 2.4625762177390937e+00 @xmath130 + & chaplin & -1.3092921033357463e+00 @xmath129 8.6009513536901472e-01 @xmath130 + @xmath134 & hpl & -1.3092921033357458e+00 @xmath129 8.6009513536901561e-01 @xmath130 + & ginac & -1.3092921033357459e+00 @xmath129 8.6009513536901561e-01 @xmath130 + & chaplin & 1.3154184588794104e+00 @xmath136 2.6274818437873471e-01 @xmath130 + @xmath135 & hpl & 1.3154184588794054e+00 @xmath136 2.6274818437872689e-01 @xmath130 + & ginac & 1.3154184588794056e+00 @xmath136 2.6274818437872688e-01 @xmath130 +",
    "in this paper we have presented chaplin , a new fortran library to compute harmonic polylogarithms up to weight four for arbitrary complex argument .",
    "the algorithm is based on a reduction of hpl s to a set of basis functions which are then evaluated numerically using series expansions allowing for a very fast numerical convergence , hence rendering the computational cost of a function call quite modest .",
    "we have checked our numerical results against well - established codes  @xcite and found agreement to at least 14 digits for any argument in the complex plane .",
    "the authors are grateful to b.  anastasiou , h.  gangl , t.  gehrmann and j.  rhodes for valuable discussions and comments .",
    "this work was supported by the research executive agency ( rea ) of the european union under the grant agreement number pitn - ga-2010 - 264564 ( lhcphenonet ) and by the swiss national foundation under contract snf 200020 - 126632 .",
    "in this appendix we proof the associativity of the convolution product , eq .  .",
    "using the definition of the convolution product , eq .  , we obtain , ( ( ab)c)_n = _ m=0^n(ab)_mc_n - m = _ m=0^n_n=0^m a_nb_m - nc_n - m .",
    "we now exchange the sums over @xmath72 and @xmath9 and shift the summation variable such that all sums start from zero .",
    "this gives , ( ( ab)c)_n & = _",
    "n=0^n_m = n^n a_nb_m - nc_n - m + & = _ n=0^n_m=0^n - n a_nb_mc_n - m - n + & = _",
    "n=0^n_m=0^n a_n - nb_mc_n - m , where the last step follows from changing the summation variable according to @xmath138 .",
    "the product of binomials can be simplified , & = n!(n+m - n)!(n - m)!(n+m - n)!m!(n - n ) ! + & = n!n!(n - n)n!m!(n - m ) !",
    "= , yielding , ( ( ab)c)_n = _",
    "n=0^n_m=0^n a_n - nb_mc_n - m = ( a(bc))_n .",
    "in this appendix we present the derivation of the series expansions given in eq .  .",
    "the derivations follow the same spirit as in all other cases discussed in section  [ sec : series ] , _ i.e. _ , we start from the integral representation and perform a change of variable , before inserting the taylor expansions of the integrand .",
    "the proof involves some technical issues , which are discussed in detail in the following on the example of @xmath139 .",
    "all other cases are similar .    to derive the taylor expansion of @xmath139 , we start from the series expansion of @xmath140 and then integrate up to @xmath139 . the series expansion of @xmath140 is easily obtained from the integral representation and the generating function of the genocchi numbers , eq .",
    "letting @xmath141 , we get h(-1;e^x ) & = h(-1;1 ) + _ 1^e^xt1+t=2 - 12_0^xtt2(-t)1+e^-t + & = 2 - 12_n=0^_0^xtt^n-1=2 - 12_n=0^x^nn + & = 2 - 12_n=0^x^n , where we introduced the shorthand _ n = g_nn .",
    "next we determine the series expansion of @xmath142 . repeating exactly the same steps as for @xmath143",
    ", we obtain h(0,-1;e^x ) & = -_2(-1 ) + _ 1^e^xtth(-1;t ) = ^212+_0^xth(-1;e^t ) + & = ^212 + 2x-12_n=0^x^n+1 .",
    "if we try to repeat the same procedure for @xmath144 , a technical difficulty arises : in the previous example we had the split the integral over @xmath145 $ ] into two contributions from @xmath146 $ ] and @xmath147 $ ] . in the present case , however , we can not do this , because @xmath148 is divergent .",
    "we therefore introduce a regulator @xmath149 and split the integration region into @xmath150 $ ] and @xmath151 $ ] , and we will take the limit @xmath152 at the very end .",
    "we then obtain , h(1,0,-1;e^x ) & = h(1,0,-1;e^ ) + _ e^^e^xt1-th(0,-1;t ) + & = h(1,0,-1;e^ ) - _ ^xtt(-t)e^-t-1h(0,-1;e^t ) + & = h(1,0,-1;e^ ) + ^212[h(1;e^x ) - h(1;e^ ) ] + & + 2[h(1,0;e^x ) - h(1,0;e^ ) ] + 12_n=0^x^n+1 .",
    "we now have to send the regulator to zero . concentrating only on terms depending on @xmath149 and using the shuffle algebra for hpl s ,",
    "we obtain , h&(1,0,-1;e^ ) -^212h(1;e^)-2h(1,0;e^ ) + & = h(1;e^)h(0,-1;e^ ) - ^212h(1;e^ ) + & - h(0,1,-1;e^)- h(0,-1,1;e^)-2 h(1,0;e^ ) .",
    "all the terms in the second line have a smooth limit as @xmath152 , and the two divergent terms in the first line cancel exactly .",
    "this leaves us with h(1,0,-1;e^x ) & = -_3- 2+^212h(1;e^x ) + 2 h(1,0;e^x ) + & + 12_n=0^x^n+1 .",
    "the last integration is easy to perform and we immediately obtain h&(0,1,0,-1;e^x ) = -4 _ 4()- _ 3 2 + -^42 + & + ^22 - 58_3x+^262x + ^212_2(e^x ) + & + 2x_2(e^x)-22_3(e^x ) + 12_n=0^x^n+2 , which agrees with eq .   after replacing @xmath93 .",
    "99 n.  nielsen , `` der eulersche dilogarithmus und seine verallgemeinerungen , '' nova acta leopoldina ( halle ) 90 ( 1909 ) 123 .",
    "a.  b.  goncharov , `` multiple polylogarithms , cyclotomy and modular complexes , '' math .",
    "research  letters * 5 *  no .  4 ( 1998 ) .",
    "a.  b.  goncharov , `` multiple polylogarithms and mixed tate motives , '' ( 2001 ) [ ] .",
    "e.  remiddi and j.  a.  m.  vermaseren , `` harmonic polylogarithms , '' int .",
    "j.  mod .",
    "a * 15 * , 725 ( 2000 ) [ ] .",
    "t.  gehrmann and e.  remiddi , `` two loop master integrals for @xmath153 3 jets : the planar topologies , '' nucl",
    ".  phys .",
    "b * 601 * ( 2001 ) 248 , [ ] .",
    "j.  ablinger , j.  blumlein and c.  schneider , `` harmonic sums and polylogarithms generated by cyclotomic polynomials , '' [ ] . j.  a.  m.  vermaseren , a.  vogt and s.  moch , `` the third - order qcd corrections to deep - inelastic scattering by photon exchange , '' nucl .",
    "b * 724 * ( 2005 ) 3 [ ] .",
    "s.  moch , j.  a.  m.  vermaseren and a.  vogt , `` the longitudinal structure function at the third order , '' phys .",
    "b * 606 * ( 2005 ) 123 [ ] .",
    "a.  vogt , s.  moch and j.  a.  m.  vermaseren , `` the three - loop splitting functions in qcd : the singlet case , '' nucl .",
    "b * 691 * ( 2004 ) 129 [ ] .",
    "s.  moch , j.  a.  m.  vermaseren and a.  vogt , `` the three loop splitting functions in qcd : the nonsinglet case , '' nucl .",
    "b * 688 * ( 2004 ) 101 [ ] .",
    "r.  bonciani , p.  mastrolia and e.  remiddi , `` master integrals for the two loop qcd virtual corrections to the forward backward asymmetry , '' nucl .",
    "b * 690 * ( 2004 ) 138 [ ] .",
    "w.  bernreuther , r.  bonciani , t.  gehrmann , r.  heinesch , t.  leineweber , p.  mastrolia and e.  remiddi , `` two - loop qcd corrections to the heavy quark form - factors : the vector contributions , '' nucl .",
    "b * 706 * ( 2005 ) 245 [ ] .",
    "w.  bernreuther , r.  bonciani , t.  gehrmann , r.  heinesch , t.  leineweber , p.  mastrolia and e.  remiddi , `` two - loop qcd corrections to the heavy quark form - factors : axial vector contributions , '' nucl .",
    "b * 712 * ( 2005 ) 229 [ ] .",
    "w.  bernreuther , r.  bonciani , t.  gehrmann , r.  heinesch , t.  leineweber , e.  remiddi , `` two - loop qcd corrections to the heavy quark form - factors : anomaly contributions , '' nucl .",
    "* b723 * ( 2005 ) 91 - 116 .",
    "p.  mastrolia and e.  remiddi , `` two loop form - factors in qed , '' nucl .",
    "b * 664 * ( 2003 ) 341 [ ] .",
    "r.  bonciani , a.  ferroglia , p.  mastrolia , e.  remiddi and j.  j.  van der bij , `` two - loop n(f ) = 1 qed bhabha scattering : soft emission and numerical evaluation of the differential cross - section , '' nucl .",
    "b * 716 * ( 2005 ) 280 [ ] .",
    "r.  bonciani , a.  ferroglia , p.  mastrolia , e.  remiddi and j.  j.  van der bij , `` two - loop n(f)=1 qed bhabha scattering differential cross section , '' nucl .",
    "b * 701 * ( 2004 ) 121 [ ] .",
    "m.  czakon , j.  gluza and t.  riemann , `` master integrals for massive two - loop bhabha scattering in qed , '' phys .",
    "d * 71 * ( 2005 ) 073009 [ ] .",
    "z.  bern , m.  czakon , l.  j.  dixon , d.  a.  kosower and v.  a.  smirnov , `` the four - loop planar amplitude and cusp anomalous dimension in maximally supersymmetric yang - mills theory , '' phys .",
    "d * 75 * ( 2007 ) 085010 [ ] .",
    "g.  heinrich and v.  a.  smirnov , `` analytical evaluation of dimensionally regularized massive on - shell double boxes , '' phys .",
    "b * 598 * ( 2004 ) 55 [ ] .",
    "v.  a.  smirnov , `` analytical result for dimensionally regularized massive on - shell planar double box , '' phys .",
    "b * 524 * ( 2002 ) 129 [ ] .",
    "l.  v.  bork , d.  i.  kazakov and g.  s.  vartanov , `` on form factors in n=4 sym , '' jhep * 1102 * ( 2011 ) 063 [ ] . v.  del duca , c.  duhr and v.  a.  smirnov , `` the two - loop hexagon wilson loop in n = 4 sym , '' jhep * 1005 * ( 2010 ) 084 [ ] . j.  m.  henn , s.  g.  naculich , h.  j.  schnitzer and m.  spradlin , `` more loops and legs in higgs - regulated n=4 sym amplitudes , '' jhep * 1008 * ( 2010 ) 002 [ ] .",
    "u.  aglietti , r.  bonciani , g.  degrassi and a.  vicini , `` analytic results for virtual qcd corrections to higgs production and decay , '' jhep * 0701 * ( 2007 ) 021 [ ] .",
    "u.  aglietti , r.  bonciani , g.  degrassi and a.  vicini , `` master integrals for the two - loop light fermion contributions to @xmath154 and @xmath155 , '' phys .",
    "b * 600 * ( 2004 ) 57 [ ] .",
    "u.  aglietti , r.  bonciani , g.  degrassi and a.  vicini , `` two loop light fermion contribution to higgs production and decays , '' phys .",
    "b * 595 * ( 2004 ) 432 [ ] .",
    "t.  gehrmann and e.  remiddi , `` two loop master integrals for @xmath153 3 jets : the nonplanar topologies , '' nucl .",
    "b * 601 * ( 2001 ) 287 [ ] . c.  anastasiou , s.  beerli , s.  bucherer , a.  daleo and z.  kunszt , `` two - loop amplitudes and master integrals for the production of a higgs boson via a massive quark and a scalar - quark loop , '' jhep * 0701 * ( 2007 ) 082 [ ] . t.  gehrmann and e.  remiddi , `` numerical evaluation of harmonic polylogarithms , '' comput .",
    "commun .   * 141 * , 296 ( 2001 ) [ ] .",
    "d.  maitre , `` hpl , a mathematica implementation of the harmonic polylogarithms , '' comput .",
    "commun .   * 174 * , 222 ( 2006 ) [ ] .",
    "d.  maitre , `` extension of hpl to complex arguments , '' [ ] .",
    "j.  vollinga and s.  weinzierl , `` numerical evaluation of multiple polylogarithms , '' comput .",
    "commun .   * 167 * , 177 ( 2005 ) [ ] .",
    "a.  b.  goncharov , `` a simple construction of grassmannian polylogarithms , '' [ ] .",
    "h.  cohen , l.  lewin and d.  zagier , `` a sixteenth - order polylogarithm ladder , '' + experimental mathematics , vol . 1 , no . 1 , 1992 , pp .",
    "25 - 34 . c.  duhr , h.  gangl and j.  rhodes , `` symbol calculus for polylogarithms and feynman integrals , '' _ in preparation_. h.  gangl , `` regulators via iterated integrals ( numerical computations ) , '' clay mathematics proceedings , vol . 12 , 2009"
  ],
  "abstract_text": [
    "<S> we present a new fortran library to evaluate all harmonic polylogarithms up to weight four numerically for any complex argument . </S>",
    "<S> the algorithm is based on a reduction of harmonic polylogarithms up to weight four to a minimal set of basis functions that are computed numerically using series expansions allowing for fast and reliable numerical results .    </S>",
    "<S> pacs : 12.38.bx , perturbative calculations    harmonic polylogarithms , fortran , loop computations .    </S>",
    "<S> ippp/11/36 , dcpt/11/72    ,    ,    * program summary *    _ manuscript title : _ chaplin - complex harmonic polylogarithms in fortran + _ authors : _ stephan buehler , claude duhr + _ program title : _ </S>",
    "<S> chaplin + _ journal reference : _ </S>",
    "<S> + _ catalogue identifier : _ + _ licensing provisions : _ </S>",
    "<S> + _ programming language : _ fortran 77 + _ computer : _ computing systems on which fortran 77 compilers are available . </S>",
    "<S> + _ operating system : _ operating systems on which fortran 77 compilers are available . </S>",
    "<S> + _ keywords : _ harmonic polylogarithms , fortran , loop computations . </S>",
    "<S> + _ pacs : _ </S>",
    "<S> 12.38.bx , perturbative calculations . </S>",
    "<S> + _ classification : _ 11.1 general , high energy physics and computing + _ nature of problem : _ numerical evaluation of harmonic polylogarithms . </S>",
    "<S> + _ solution method : _ inside the unit circle : series expansion . </S>",
    "<S> outside the unit circle : inversion relations . </S>",
    "<S> + _ restrictions : _ only harmonic polylogarithms up to weight four are supported . </S>",
    "<S> + _ unusual features : _ allows to evaluate hpl s numerically for any point in the complex plane . + _ running time : _ depending on the weight vector and argument of the hpl , between @xmath0 and @xmath1 @xmath2 . </S>",
    "<S> +   + </S>"
  ]
}