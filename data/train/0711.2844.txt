{
  "article_text": [
    "we follow the terminology and notations of @xcite and , without loss of generality , consider simple connected graphs only . @xmath4 and @xmath5 denote , respectively , the minimum and maximum degree of a graph @xmath1 . for a vertex @xmath6 , the _ neighborhood _ of @xmath7 in @xmath1 is @xmath8 is adjacent to @xmath7 in @xmath9 , and the degree of @xmath7 is @xmath10 .",
    "vertices in @xmath11 are called _ neighbors of _ @xmath7 .",
    "@xmath12 denotes the path on @xmath13 vertices .",
    "a subset @xmath14 of @xmath15 is called an _ independent set _ of @xmath1 if no two vertices of @xmath14 are adjacent in @xmath1 .",
    "an independent set @xmath14 is _ maximum _ if @xmath1 has no independent set @xmath16 with @xmath17 .",
    "the number of vertices in a maximum independent set of @xmath1 is called the _ independence number _ of @xmath1 and is denoted by @xmath18 .    for an integer @xmath19 .",
    "a _ proper @xmath0-coloring _ of a graph @xmath1 is a surjective mapping @xmath20 such that if @xmath21 are adjacent vertices in @xmath1 , then @xmath22 . the smallest @xmath0 such that @xmath1 has a proper @xmath0-coloring is the _ chromatic number _ of @xmath1 , denoted by @xmath23 .",
    "the _ dynamic coloring _ of a graph @xmath1 is defined as a proper coloring of @xmath1 such that any vertex of degree at least 2 in @xmath1 is adjacent to more than one color class . for an integer @xmath19 , a",
    "_ proper dynamic @xmath0-coloring _ of a graph @xmath1 is thus a surjective mapping @xmath24 such that both of the following two conditions hold :    * if @xmath25 are adjacent vertices in @xmath1 , then @xmath22 ; and * for any @xmath6 , @xmath26 , where and in what follows , @xmath27 for a set @xmath28 .",
    "we call the first condition , which characters proper coloring , the _ adjacency condition _ , and we call the second condition the _ double - adjacency condition_. the smallest integer @xmath19 such that @xmath1 has a proper dynamic @xmath0-coloring is the _ dynamic chromatic number _ of @xmath1 , denoted by @xmath29 .    in order to show the results in this paper , we will give some new definitions .",
    "similar to the definition of the dynamic coloring , a _",
    "dynamic @xmath0-edge - coloring _ of a graph @xmath1 is a proper @xmath0-edge - coloring of @xmath1 such that every edge with at least 2 adjacent edges in @xmath1 will be adjacent to edges with at least two different colors .",
    "the smallest number @xmath0 for which a graph @xmath1 can have a dynamic @xmath0-edge - coloring is the _ dynamic edge chromatic number _ , denoted by @xmath30 .",
    "the dynamic chromatic number has very different behaviors from the traditional chromatic number .",
    "for example , from @xcite we know that for many graphs @xmath1 , @xmath31 for at least one vertex @xmath7 of @xmath1 , and there are graphs @xmath1 for which @xmath32 may be very large .    from @xcite",
    "we know that if @xmath33 , we can easily have a polynomial time algorithm to give the graph @xmath1 a dynamic @xmath34-coloring . in @xcite ,",
    "lai , montgomery and poon got an upper bound of @xmath2 that if @xmath35 , then @xmath36 .",
    "the proof is very long compared with the proof of a similar result in the traditional coloring . in @xcite and @xcite , lai , lin , montgomery , shui and fan got many new and interesting results on the dynamic coloring . recently , in @xcite we proved that it is @xmath3-complete to determine if a triangle - free graph with maximum degree 3 is dynamically 3-colorable .",
    "this is a little interesting because we know that for graphs @xmath1 with @xmath37 the @xmath38-colorable problem of the traditional vertex coloring can be solved in polynomial time .",
    "let @xmath1 be a graph with maximum degree 3 .",
    "we define a family of subgraphs @xmath39 of @xmath1 , in which every @xmath39 is a path with @xmath40 vertices such that the @xmath41 internal vertices have degree 2 in @xmath1 , and the two end - vertices have degree 3 in @xmath1 .",
    "a _ pendant path _ of a graph @xmath1 is such a path that the internal vertices have degree 2 in @xmath1 , one end - vertex has degree 1 and the other end - vertex has degree 3 . in the present paper ,",
    "we concentrate on the dynamically 3-colorable problem for claw - free graphs .",
    "first , we prove that for a claw - free graph @xmath1 with @xmath42 it is still @xmath3-complete to decide if @xmath1 is dynamically 3-colorable .",
    "this is also an interesting result which is different from a result for the traditional colorings . in order to find some kind of graphs for which the dynamically 3-colorable problem is polynomially solvable",
    ", we consider the subclass of the claw - free graphs with maximum degree 3 , in which every graph is @xmath39-free @xmath43 .",
    "we find that this kind of graphs can be recognized in @xmath44 time , and it can be done in @xmath44 time to determine whether they are dynamically 3-colorable , and we will give an @xmath44 time algorithm to find a dynamic 3-coloring of the graphs .",
    "in @xcite , the authors proved the following theorem :    [ thm1 ] if @xmath1 is claw - free , then @xmath45 , and the equality holds if and only if @xmath1 is a cycle of length 5 or of even length not a multiple of 3 .",
    "so , apart from some special cycles , the difference between the dynamic chromatic number and the chromatic number for claw - free graphs is at most one .",
    "if we know @xmath46 and there would be a polynomial time algorithm to determine @xmath47 or @xmath48 except the special cycles described in theorem [ thm1 ] , we can get some results on dynamic colorings by those on the traditional colorings for claw - free graphs .",
    "but unfortunately , we will show that even if we know the chromatic number of claw - free graphs , we can not get the dynamic chromatic number in polynomial time unless @xmath49 . by the relation between the edge - coloring of a graph @xmath1 and the vertex coloring of the line graph @xmath50 of @xmath1",
    ", we will get the result immediately after we finish the proof of the following theorem [ thm2 ] .",
    "first , we give a formal definition of the _ dynamically 3-edge - colorable problem _ , denoted by * dy-3-edge - col * , which is stated as follows :    * input * : a bipartite graph @xmath51 and @xmath52 .",
    "* question * : can one assign each edge a color , so that only 3 colors are used and this is a dynamic edge - coloring ?",
    "i.e. , is @xmath53 ?    in @xcite , the author proved that it is @xmath3-complete to determine whether a cubic graph is 3-edge - colorable .",
    "we will use the result to prove that the dy-3-edge - col is @xmath3-complete .",
    "[ thm2 ] the dy-3-edge - col is @xmath3-complete .",
    "first , it is obvious that the problem is in @xmath3 .",
    "second , given a cubic graph @xmath54 .",
    "for every edge in @xmath54 , we will use a @xmath55 to replace the edge and construct a new graph @xmath56 , i.e. , we subdivide every edge exact 3 times . the local transformation is shown in figure [ eps1 ] .",
    "it is easy to see that @xmath54 is 3-edge - colorable if and only if @xmath56 is dynamically 3-edge - colorable . and ,",
    "by the structure of @xmath56 , the length of every cycle of @xmath56 is a multiple of 4 .",
    "so @xmath56 does not have any odd cycles , and thus is a bipartite graph .",
    "it is obvious that @xmath52 .",
    "since the 3-edge - colorability for cubic graphs is @xmath3-complete , the dy-3-edge - col must be @xmath3-complete .",
    "* remark . * in the proof , we can subdivide each edge @xmath57 times for some @xmath58 , instead of 3 times , and the proof can still hold .",
    "different edge could use different @xmath59 .",
    "therefore , we have the following stronger statement .    [ thm2 ]",
    "it is @xmath3-complete to determine whether a graph @xmath1 is dynamically 3-edge - colorable , obtained from a cubic graph @xmath54 by subdividing each edge of @xmath54 @xmath57 times for some @xmath58 .    for traditional edge - colorings , if a graph @xmath1 is bipartite , then @xmath60 and there is a polynomial time algorithm to color it",
    "so , theorem [ thm2 ] is different from the result for traditional edge - colorings .",
    "next , we give a formal definition of _ dynamically 3-colorable problem _ , denoted by * dy-3-col * , which is stated as follows :    * input * : a graph @xmath61 .",
    "* question * : can one assign each vertex a color , so that only 3 colors are used and this is a dynamic coloring ?",
    "i.e. , is @xmath62 ?    by the structure of the bipartite graph @xmath56 in the proof of theorem [ thm2 ] , we know that @xmath63 is a line graph with maximum degree 3 . notice that a graph @xmath1 is dynamically @xmath0-edge - colorable if and only if the line graph @xmath50 of @xmath1 is dynamically @xmath0-colorable .",
    "so , we have    [ thm3 ] it is @xmath3-complete to determine whether the line graph @xmath63 with maximum degree 3 is dynamically 3-colorable . as a result , it is @xmath3-complete to determine whether a line graph with maximum degree 3 is dynamically 3-colorable .    since line graphs are claw - free graphs , then we have    [ thm3 ] for claw - free graphs @xmath1 with @xmath64 , the dy-3-col is @xmath3-complete .    for traditional colorings ,",
    "it is polynomially solvable whether a graph @xmath1 is 3-colorable when @xmath65 .",
    "so we can see that the dynamic coloring problem is very difficult to deal with even for claw - free graphs with maximum degree 3 . in next section",
    "we will find some reasonable kind of graphs in which we can determine if a graph is dynamically 3-colorable in polynomial time .",
    "theorems [ thm2 ] and [ thm3 ] could be omitted as intermediate results .",
    "but , we prefer to list them in order to understand why we choose to study this kind of graphs in next section .",
    "from theorem [ thm3 ] , the dy-3-col is @xmath3-complete for claw - free graphs with maximum degree 3 , and because of theorem [ thm3 ] , the problem is @xmath3-complete even for the line graph @xmath63 , where @xmath56 is built up from a cubic graph by subdividing every edge exact 3 times . by reviewing the proof of theorem [ thm2 ] , we notice that there are many @xmath66 in @xmath63 .",
    "the question is : can the dy-3-col be solved in polynomial time for both claw - free and @xmath66-free graphs @xmath1 with @xmath64 ?",
    "the answer is no , because in the local transformation , we can use any @xmath67 @xmath68 to replace the edges of the cubic graph @xmath54 to get another graph @xmath69 , and @xmath54 is 3-edge - colorable if and only if @xmath69 is dynamically 3-edge - colorable .",
    "although @xmath69 may not be bipartite , we can still get theorem [ thm3 ] .",
    "so , another question is : can the dy-3-col be solved in polynomial time for both claw - free and @xmath39-free ( for all @xmath70 ) graphs @xmath1 with @xmath64 ?",
    "the answer is yes . for convenience , we denote by @xmath71 the set of graphs @xmath1 with @xmath72 which are both claw - free and @xmath39-free @xmath73",
    ". then we have    [ thm4 ] the dy-3-col is polynomially solvable for graphs in @xmath71 .    given a graph @xmath1 in @xmath71 .",
    "first , delete all the vertices in the pendant paths of @xmath1 except the end - vertices of degree 3 , to get the first graph @xmath74 .",
    "it is easy to see that @xmath1 is dynamically 3-colorable if and only if @xmath74 is dynamically 3-colorable .",
    "then @xmath74 has vertices of only degrees 2 and 3 .",
    "second , delete all the internal vertices in @xmath39 @xmath68 of @xmath74 , and make the two end - vertices of each @xmath39 @xmath75 be adjacent , to get the second graph @xmath76 .",
    "it is easy to see that @xmath74 is dynamically 3-colorable if and only if @xmath76 is dynamically 3-colorable .",
    "third , delete all the internal vertices in @xmath39 @xmath77 of @xmath76 , and make the two end - vertices of each @xmath39 @xmath78 be adjacent , to get the third graph @xmath79 .",
    "it is easy to see that @xmath76 is dynamically 3-colorable if and only if @xmath79 is dynamically 3-colorable .",
    "fourth , consider the subgraphs @xmath80 in @xmath79 , and there will be two kinds of @xmath80 in @xmath79 : one kind is denoted by @xmath81 , in which the two end - vertices of @xmath80 is adjacent ( it means that the internal vertex is contained in a triangle ) , the other kind is denoted by @xmath82 , in which the two end - vertices of @xmath80 is nonadjacent ( it means that the internal vertex is not contained in a triangle ) .",
    "we delete all the internal vertices in @xmath82 of @xmath79 , and make the two end - vertices of each @xmath82 be adjacent , to get the fourth graph @xmath83 .",
    "it is easy to see that @xmath79 is dynamically 3-colorable if and only if @xmath83 is dynamically 3-colorable . by noticing that in @xmath83 every vertex is contained in a triangle",
    ", we have that @xmath83 is dynamically 3-colorable if and only if @xmath83 is 3-colorable . as a consequence ,",
    "@xmath1 is dynamically 3-colorable if and only if @xmath83 is 3-colorable , and it is polynomially solvable whether @xmath83 is 3-colorable since @xmath84 . because we can get @xmath83 from @xmath1 in polynomial time , the dy-3-col is polynomially solvable when @xmath1 is in @xmath71 .    for traditional colorings , the only graph @xmath1 with @xmath72 which is not 3-colorable is @xmath85 by brook s theorem . by the proof of theorem [ thm4 ]",
    "we can easily get that there is only one class of graphs in @xmath71 which are not dynamically 3-colorable .",
    "the graphs in the exceptional class , denoted by @xmath86 , can be gotten by using a @xmath67 ( @xmath87 or @xmath88 ) to replace an edge of @xmath85 .    for the graphs in @xmath71 we can determine whether they are dynamically 3-colorable in polynomial time and",
    "we have also characterized the exceptional graphs .    in next section",
    ", we will give a linear time algorithm to recognize the graphs in @xmath71 and another linear time algorithm to determine whether the graphs in @xmath71 are dynamically 3-colorable .",
    "at last we will give a linear time algorithm to color the graphs by 3 colors such that the adjacency condition and the double - adjacency condition are both satisfied .",
    "first , we will give a linear time algorithm to recognize the graphs in @xmath71 .",
    "the input is a graph @xmath61 with @xmath89 .",
    "the following are the main steps of the _ recognition algorithm_.      step 1 . : :    check if the degree of every vertex in @xmath1 is not more    than 3 . if not , return the answer that @xmath1 is not in    @xmath71 ; otherwise , go to step 2 .",
    ": :    check if the graph @xmath1 is claw - free .",
    "if not , return the    answer that @xmath1 is not in @xmath71 ;    otherwise , go to step 3 .",
    ": :    check if the graph @xmath1 is @xmath39-free    @xmath90 . if not , return the answer that @xmath1 is    not in @xmath71 .",
    "otherwise , return the answer that    @xmath1 is in @xmath71 .",
    "the following are the complexity analysis of the recognition algorithm : it is obvious that step 1 can be done in @xmath44 time .",
    "if @xmath65 , we go to step 2 , otherwise @xmath1 is not in @xmath71 . since @xmath72 , we just need to check the vertices of degree 3 . for every vertex of degree 3 ,",
    "if there is no claw in the subgraph induced by the vertex and its neighbors , @xmath1 is claw - free .",
    "so step 2 can be done in @xmath44 time . if @xmath1 is claw - free , we go to step 3 , otherwise @xmath1 is not in @xmath71 . in step 3 ,",
    "we just need to check the edges whose two incident vertices are of degree 2 in @xmath1 .",
    "if the paths induced by the edges are not @xmath67 ( @xmath91 ) , then @xmath1 is @xmath39-free @xmath73 .",
    "if @xmath1 is @xmath39-free @xmath92 , then @xmath1 is in @xmath71 , otherwise @xmath1 is not in @xmath71 . since the number of edges in @xmath1 is no more than @xmath93 , step 3 can be done in @xmath44 time .",
    "second , we give a linear time algorithm to determine if a graph in @xmath71 is dynamically 3-colorable .",
    "the input is a graph @xmath61 in @xmath71 with @xmath89 .",
    "the following are the main steps of the _ determination algorithm_.      step 1 . : :    check if there is a vertex of degree 1 .",
    "if so , return the answer that    @xmath1 is dynamically 3-colorable ; otherwise , go to step 2 .",
    ": :    find the number of vertices whose degrees are 3 .",
    "if the number is not    4 , return the answer that @xmath1 is dynamically 3-colorable ;    otherwise , go to step 3 .",
    ": :    check if the graph @xmath1 is in @xmath86 .",
    "if    so , return the answer that @xmath1 is not dynamically    3-colorable ; otherwise , return the answer that @xmath1 is    dynamically 3-colorable .",
    "the following are the complexity analysis of the determination algorithm : it is easy to see that step 1 can be done in @xmath44 time .",
    "if there is a vertex with degree 1 , the graph @xmath1 is dynamically 3-colorable .",
    "if there is no vertex with degree 1 , we go to step 2 .",
    "step 2 can also be done in @xmath44 time .",
    "if the number of vertices of degree 3 is 4 , we go to step 3 . in step 3 ,",
    "we just need to consider the edges whose two incident vertices are of degree 2 in @xmath1 . if there is no such edge",
    ", @xmath1 is dynamically 3-colorable if and only if @xmath1 is not @xmath85 .",
    "if there are some such edges , we can determine if @xmath1 is dynamically 3-colorable by the subgraph induced by such edges .",
    "if there are more than one path in the subgraph , @xmath1 is dynamically 3-colorable . otherwise , @xmath1 is in @xmath86 , and is not dynamically 3-colorable .",
    "since the number of edges in @xmath1 is no more than @xmath94 , step 3 can be done in @xmath44 time .",
    "third , we will give an @xmath44 time algorithm to color the graphs in @xmath71 by 3 colors such that the adjacency condition and the double - adjacency condition are both satisfied .",
    "the input is a graph @xmath61 with @xmath89 .",
    "before we give the algorithm , we will define a set of graphs , denoted by @xmath95 , and give some results about the graphs in @xmath95 .",
    "* construct even number of vertex - disjoint triangles ( 3-cycles ) , and the set of edges in the triangles is denoted by @xmath96 ; * for each triangle , let every vertex of the triangle be connected by an edge to a vertex of another triangle , to construct a 3-regular graph . and the set of added edges in this step ( it means that the set of the edges are not in any of the triangles ) is denoted by @xmath97 .      by the special structure of @xmath1 that every vertex is contained in a triangle , we can see that @xmath99 and the three color classes have the same cardinality @xmath13 .",
    "so , @xmath100 . if @xmath101 , there must be a triangle that contains 2 vertices in the maximum independent set , which is impossible , and so @xmath98 .      by lemma [ lem1 ] , we know that @xmath103 , and every triangle contains a vertex in @xmath14 .",
    "so , in @xmath102 the degrees of the vertices are 1 and 2 .",
    "then the components of @xmath102 are only vertex - disjoint paths and cycles .",
    "furthermore , no two edges in @xmath96 are adjacent in @xmath102 .",
    "also , no two edges in @xmath97 are adjacent in @xmath102 .",
    "so , the cycles in @xmath102 must be alternating and have even number of edges , i.e. , there are no odd cycles in @xmath102 , and thus @xmath102 is bipartite .",
    "* we contract every triangle in @xmath1 into a vertex , and if there are two edges which are incident to the same two end - vertices , we can delete any one of the two edges , to get a simple graph @xmath104 ; * by depth - first or breadth - first algorithm , we can find a spanning tree of a graph in @xmath105 time . in our case",
    ", it is a linear time algorithm to find the spanning tree @xmath106 of @xmath104 ; * find a vertex @xmath107 which is adjacent to a leaf @xmath108 in @xmath106 as the root of the tree .",
    "if @xmath109 , we delete @xmath108 to ensure @xmath110 in the new tree @xmath111 we will consider later . if @xmath110 , then @xmath112=@xmath106 ; * for every edge @xmath113 in @xmath112 , there are two vertices @xmath114 and @xmath115 incident to it , and @xmath114 is the child of @xmath115 . by step ( a ) , we know that there is an @xmath116 in @xmath1 corresponding to @xmath113 in @xmath112 , and there is a vertex @xmath117 in the triangle corresponding to @xmath114 which is incident to @xmath116 .",
    "so , we can define an injection @xmath118 from @xmath119 , the set of edges in @xmath112 , to @xmath120 such that @xmath121 .",
    "then we can find a vertex set @xmath122 , and it is easy to see that @xmath123 is an independent set ; * consider the three vertices in the triangle in @xmath1 corresponding to @xmath107 , there is just one vertex @xmath124 of the three which can be added into @xmath123 such that @xmath125 is an independent set . if @xmath110 in @xmath106 , then let @xmath126 , which is a maximum independent set of @xmath1 .",
    "if @xmath109 , there is still a triangle in @xmath1 corresponding to @xmath108 in @xmath106 that needs us to consider .",
    "notice that except the vertex in the triangle which is adjacent to @xmath124 , any one of the other two vertices in the triangle ( assume the vertex we choose is @xmath127 ) can be added into @xmath125 such that @xmath128 is a maximum independent set of @xmath1 .",
    ": :    delete all the pendant paths except the vertices with degree 3 , to    construct a graph @xmath74 , if there are some pendant paths    in @xmath1 ; step 2 .",
    ": :    if there are some @xmath39 ( @xmath130 ) and    @xmath80 whose two end - vertices are nonadjacent in    @xmath74 , we delete all the internal vertices and make the    two end - vertices of each @xmath39 be adjacent , then we get a    graph @xmath76 ; step 3 . : :    if there is a vertex in @xmath76 having degree 2 , then it    must be contained in a triangle .",
    "we let the two vertices which are    adjacent to the triangle be adjacent , and delete the triangle to    construct a new graph @xmath131 ; and we will do the operation    again if there is still a vertex of degree 2 in @xmath131 ;    similarly , we will do the operation at most @xmath13 times to    construct a graph @xmath79 . then @xmath79 is    3-regular ; step 4 .",
    ": :    if there is a subgraph @xmath132 in @xmath79 , we do    a transformation shown in figure [ eps2 ] to get a graph    @xmath133 . and we will do the transformation again if there    is a subgraph @xmath132 in @xmath133 .",
    "similarly , we    will do the transformation at most @xmath13 times to get a    graph @xmath83 which does not contain the subgraph    @xmath132 ; step 5 .",
    ": :    now @xmath83 is in @xmath95 . by lemma    [ lem3 ] ,",
    "we can find a maximum independent set @xmath14 in    @xmath83 in linear time ; step 6 .",
    ": :    by lemma [ lem2 ] , we know that @xmath134 is    bipartite , so we can color @xmath134 by 2 colors in    linear time .",
    "we give the vertices in @xmath14 the third color ,    then we have colored @xmath83 by 3 colors ; step 7 .",
    ": :    color the vertices deleted before to get a dynamic 3-coloring of    @xmath1 .",
    "more detailed complexity analysis about the algorithm [ alg3 ] : it is obvious that step 1 through step 6 can be done in linear time . in step 7 ,",
    "we first color the vertices in @xmath135 ; second , color the vertices in @xmath136 ; third , color the vertices in @xmath137 ; forth , color the vertices in @xmath137 ; at last , we color the vertices in @xmath138 . in each sub - step of step 7 , we can easily find a linear time algorithm to color the vertices such that the adjacency condition and the double - adjacency condition are satisfied in every @xmath139 ( @xmath140 ) and @xmath1 .",
    "so , the algorithm [ alg3 ] is an @xmath44 time dynamic 3-coloring algorithm for graphs in @xmath71 .",
    "at last , because the dynamic 3-coloring is also a 3-coloring , the dynamic 3-coloring algorithm is also a 3-coloring algorithm for the graphs in @xmath71 .",
    "furthermore , it can also become a 3-coloring algorithm for the claw - free graphs with maximum degree 3 if we modify the algorithm a little bit ."
  ],
  "abstract_text": [
    "<S> a _ dynamic @xmath0-coloring _ of a graph @xmath1 is a proper @xmath0-coloring of the vertices of @xmath1 such that every vertex of degree at least 2 in @xmath1 will be adjacent to vertices with at least 2 different colors . </S>",
    "<S> the smallest number @xmath0 for which a graph @xmath1 can have a dynamic @xmath0-coloring is the _ dynamic chromatic number _ , denoted by @xmath2 . in this paper </S>",
    "<S> , we investigate the dynamic 3-colorings of claw - free graphs . </S>",
    "<S> first , we prove that it is @xmath3-complete to determine if a claw - free graph with maximum degree 3 is dynamically 3-colorable . </S>",
    "<S> second , by forbidding a kind of subgraphs , we find a reasonable subclass of claw - free graphs with maximum degree 3 , for which the dynamically 3-colorable problem can be solved in linear time . </S>",
    "<S> third , we give a linear time algorithm to recognize this subclass of graphs , and a linear time algorithm to determine whether it is dynamically 3-colorable . </S>",
    "<S> we also give a linear time algorithm to color the graphs in the subclass by 3 colors . + </S>",
    "<S> * keywords : * claw - free graph ; vertex coloring ; dynamic coloring ; ( dynamic ) chromatic number ; @xmath3-complete ; linear time algorithm </S>"
  ]
}