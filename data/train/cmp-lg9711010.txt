{
  "article_text": [
    "although we have reached a situation in computational linguistics where large coverage grammars are well developed and available in several formal traditions , the use of these research results in actual applications and for application to specific domains is still unsatisfactory .",
    "one reason for this is that large - scale grammar specifications incur a seemingly unnecessarily large burden of space and processing time that often does not stand in relation to the simplicity of the particular task .",
    "the usual alternatives for natural language generation to date have been the handcrafted development of application or sublanguage specific grammars or the use of template based generation grammars . in @xcite",
    "both approaches are combined resulting in a practical small generation grammar tool .",
    "but still the grammars are handwritten or , if extracted from large grammars , must be adapted by hand . in general , both ",
    "the template and the handwritten application grammar approach  compromise the idea of a general nlp system architecture with reusable bodies of general linguistic resources .",
    "we argue that this customization bottleneck can be overcome by the automatic extraction of application - tuned consistent generation subgrammars from proved given large - scale grammars . in this paper",
    "we present such an automatic subgrammar extraction tool .",
    "the underlying procedure is valid for grammars written in typed unification formalisms ; it is here carried out for systemic grammars within the development environment for text generation kpml @xcite .",
    "the input is a set of semantic specifications covering the intended application .",
    "this can either be provided by generating a predefined test suite or be automatically produced by running the particular application during a training phase .",
    "the paper is structured as follows .",
    "first , an algorithm for automatic subgrammar extraction for arbitrary systemic grammars will be given , and second the application of the algorithm for generation in the domain of ` encyclopedia entries ' will be illustrated .",
    "to conclude , we discuss several issues raised by the work described , including its relevance for typed unification based grammar descriptions and the possibilities for further improvements in generation time .",
    "systemic functional grammar ( sfg )  @xcite is based on the assumption that the differentiation of syntactic phenomena is always determined by its function in the communicative context .",
    "this functional orientation has lead to the creation of detailed linguistic resources that are characterized by an integrated treatment of content - related , textual and pragmatic aspects .",
    "computational instances of systemic grammar are successfully employed in some of the largest and most influential text generation projects  such as , for example , penman  @xcite , communal  @xcite , techdoc  @xcite , drafter  @xcite , and gist  @xcite .    for our present purposes , however , it is the formal characteristics of systemic grammar and its implementations that are more important .",
    "systemic grammar assumes multifunctional constituent structures representable as feature structures with coreferences . as shown in the following function structure example for the sentence `` the people that buy silver love it . '' , different functions can be filled by one and the same constituent :     + @xmath0 \\\\ \\mbox{thing : } & \\mbox{\\footnotesize \\em noun }   \\left [ \\begin{array}{l } \\mbox{spelling : } \\mbox{``people '' } \\end{array } \\right ] \\\\ \\mbox{qualifier : } & \\mbox{\\footnotesize \\em dependent - clause } \\\\   &   \\left [ \\begin{array}{l } \\mbox{spelling : } \\\\",
    "\\mbox{\\ \\ \\ `` that buy silver '' } \\end{array } \\right ] \\end{array } \\right ]   \\\\ \\mbox{process:}\\ \\ \\     \\mbox{\\footnotesize \\em finite }   \\left [ \\begin{array}{ll } \\mbox{spelling : } & \\mbox{``love '' } \\end{array } \\right ] \\\\ \\mbox{phenomenon : } \\ \\ \\",
    "\\parbox[t]{2in}{$ \\fbox{\\footnotesize 2}~\\mbox{\\footnotesize \\em    nominal - group } \\\\    \\left [ \\begin{array}{ll } \\mbox{thing : } & \\mbox{\\footnotesize \\em pronoun } \\\\                & \\left [ \\begin{array}{ll } \\mbox{spelling : } & \\mbox{``it '' } \\end{array } \\right ] \\end{array } \\right ] $ }   \\\\ \\mbox{subject : } \\ \\ \\    \\fbox{\\footnotesize 1 } \\\\[0.1 in ] \\mbox{theme : } \\ \\ \\   \\fbox{\\footnotesize 1 } \\\\",
    "\\mbox{directcomplement:}\\ \\ \\",
    "\\fbox{\\footnotesize 2 } \\\\",
    "\\end{array } \\right]\\ ] ]    given the notational equivalence of hpsg and systemic grammar first mentioned by @xcite and @xcite , and further elaborated in @xcite , one can characterize a systemic grammar as a large type hierarchy with multiple ( conjunctive and disjunctive ) and multi - dimensional inheritance with an open - world semantics .",
    "the basic element of a systemic grammar ",
    "a so - called _",
    "system_is a type axiom of the form ( adopting the notation of cuf  @xcite ) :    ....   entry = type_1 | type_2 | ... | type_n . ....    where @xmath1 to @xmath2 are exhaustive and disjoint subtypes of type @xmath3 . @xmath3",
    "need not necessarily be a single type ; it can be a logical expression over types formed with the connectors and and or .",
    "a systemic grammar therefore resembles more a type lattice than a type hierarchy in the hpsg tradition . in systemic grammar ,",
    "these basic type axioms , the systems , are named ; we will use @xmath4 to denote the left - hand side of some named system @xmath5 , and @xmath6 to denote the set of subtypes \\{@xmath7} the output of the system .",
    "the following type axioms taken from the large systemic english grammar nigel @xcite shall illustrate the nature of systems in a systemic grammar :    .... nominal_group = class_name | individual_name .",
    "nominal_group = wh_nominal | nonwh_nominal .",
    "( or class_name wh_nominal ) = singular | plural . ....",
    "the meaning of these type axioms is fairly obvious : nominal groups can be subcategorized in class - names and individual - names on the one hand , they can be subcategorized with respect to their wh - containment into wh - containing nominal - groups and nominal - groups without wh - element on the other hand .",
    "the singular / plural opposition is valid for class - names as well as for wh - containing nominal groups ( be they class or individual names ) , but not for individual - names without wh - element .",
    "systemic types inherit constraints with respect to appropriate features , their filler types , coreferences and order . here",
    "are the constraints for some of the types defined above :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _   [ thing : _ noun _ ] + _ class - name _ [ thing : _ common - noun _ , + deictic : _ top _ ] + _ individual - name _ [ thing : _ proper - noun _ ] + _ wh - nominal _ [ wh : _ top _ ] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    universal principles and rules are in systemic grammar not factored out .",
    "the lexicon contains stem forms and has a detailed word class type hierarchy at its top .",
    "morphology is also organized as a monotonic type hierarchy .",
    "currently used implementations of sfg are the penman system @xcite , the kpml system  @xcite and wag - krl  @xcite .",
    "our subgrammar extraction has been applied and tested in the context of the kpml environment .",
    "kpml adopts the processing strategy of the penman system and so it is necessary to briefly describe this strategy .",
    "penman performs a semantic driven top - down traversal through the grammatical type hierarchy for every constituent .",
    "passed types are collected and their feature constraints are unified to build a resulting feature structure .",
    "substructure generation requires an additional grammar traversal controlled by the feature values given in the superstructure .",
    "in addition to the grammar in its original sense , the penman system provides a particular interface between grammar and semantics .",
    "this interface is organized with the help of so - called _",
    "choosers_these are decision trees associated with each system of the grammar which control the selection of an appropriate subtype during traversal .",
    "choosers should be seen as a practical means of enabling applications ( including text planners ) to interact with the grammar using purely semantic specifications even though a fully specified semantic theory may not yet be available for certain important areas necessary for coherent , fluent text generation .",
    "they also serve to enforce deterministic choice  an important property for practical generation ( cf .",
    "@xcite ) .",
    "the basic form of a chooser node is as follows .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ( * ask * _ query _ + ( _ answer1 actions _ ) + ( _ answer2 actions _ ) + ... ) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the nodes in a chooser are queries to the semantics , the branches contain a set of actions including embedded queries .",
    "possible chooser actions are the following :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ( * ask * _ query _ ( .. ) ...",
    "( .. ) ) + ( * choose * _ type _ ) + ( * identify * _ function concept _ ) + ( * copyhub * _ function1 function2 _ ) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    a choose action of a chooser explicitly ( * choose * _ type _ ) selects one of the output types of its associated system . in general",
    ", there can be several paths through a given chooser that lead to the selection of a single grammatical type : each such path corresponds to a particular configuration of semantic properties sufficient to motivate the grammatical type selected .",
    "besides this , choosers serve to create a binding between given semantic objects and grammatical constituents to be generated .",
    "this is performed by the action ( * identify * _ function _ _ concept _ ) . because of the multifunctionality assumed for the constituent structure in systemic grammar , two grammatical functions can be realized by one and the same constituent with one and the same underlying semantics .",
    "the action ( * copyhub * _",
    "function1 function2 _ ) is responsible for identifying the semantics of both grammatical functions .",
    "within such a framework , the first stage of subgrammar extraction is to ascertain a representative set of grammatical types covering the texts for the intended application .",
    "this can be obtained by running the text generation system within the application with the full unconstrained grammar .",
    "all grammatical types used during this training stage are collected to form the backbone for the subgrammar to be extracted .",
    "we call this cumulative type set the _",
    "goal - types_.    the list of _ goal - types _ then gives the point of departure for the second stage , the automatic extraction of a consistent subgrammar .",
    "_ goal - types _",
    "is used as a filter against which systems ( type axioms ) are tested .",
    "types not in _ goal - types _ have to be excised from the subgrammar being extracted .",
    "this is carried out for the entries of the systems in a preparatory step .",
    "we assume that the entries are given in disjunctive normal form .",
    "first , every conjunction containing a type which is not in _ goal - types _ is removed .",
    "after this deletion of unsatisfiable conjunctions , every type in an entry which is not in _ goal - types _ is removed .",
    "the restriction of the outputs of every system to the _ goal - types _ is done during a simulated depth - first traversal through the entire grammatical type lattice .",
    "the procedure works on the type lattice with the revised entries . starting with the most general type _",
    "start _ ( and the most general system called _ rank _ which is the system with _ start _ as entry ) , a hierarchy traversal looks for systems which although restricted to the type set _ goal - types _ actually branch , i.e. have more than one type in their output .",
    "these systems constitute the new subgrammar .",
    "in essence , each grammatical system @xmath5 is examined to see how many of its possible subtypes in @xmath6 are used within the target grammar .",
    "those types which are not used are excised from the subgrammar being extracted .",
    "more specific types that are dependent on any excised types are not considered further during the traversal .",
    "grammatical systems where there is only a single remaining unexcised subtype collapse to form a degenerated pseudo - system indicating that no grammatical variation is possible in the considered application domain .",
    "for example , in the application described in section 3 the system    indicative = declarative @xmath8 interrogative .",
    "collapses into    indicative = declarative .    because questions do not occur in the application domain .",
    "pseudo - systems of this kind are not kept in the subgrammar .",
    "the types on their right - hand side ( pseudotypes ) are excised accordingly , although they are used for deeper traversal , thus defining a path to more specific systems .",
    "such a path can consist of more than one pseudotype , if the repeated traversal steps find further degenerated systems .",
    "constraints defined for pseudo - types are raised , chooser actions are percolated down  i.e . , more precisely , constraints belonging to a pseudo - type are unified with the constraints of the most general not pseudo type at the beginning of the path .",
    "chooser actions from systems on the path are collected and extend the chooser associated with the final ( and first not pseudo ) system of the path .",
    "however , in the case that a maximal type is reached which is not in _ goal - types _ , chooser actions have to be raised too .",
    "the number of _ goal - types _ is then usually larger than the number of the types in the extracted subgrammar because all pseudotypes in _ goal - types _ are excised .    as the recursion criteria in the traversal",
    ", we first simply look for a system which has the actual type in its revised entry regardless of the fact if it occurs in a conjunction or not .",
    "this on its own , however , oversimplifies the real logical relations between the types and would create an inconsistent subgrammar .",
    "the problem is the conjunctive inheritance .",
    "if the current type occurs in an entry of another system where it is conjunctively bound , a deeper traversal is in fact only licensed if the other types of the conjunctions are chosen as well . in order to perform such a traversal , a breadth traversal with compilation of all crowns of the lattice ( see @xcite )",
    "would be necessary . in order to avoid this potentially computationally very expensive operation , but not to give up the consistency of the subgrammar , the implemented subgrammar extraction procedure sketched in figure  [ alg ]",
    "maintains all systems with complex entries ( be they conjunctive or disjunctive ) for the subgrammar even if they do not really branch and collapse to a single - subtype system .",
    "a related approach can be found in @xcite for the extraction of smaller systemic subgrammars for analysis .",
    "if the lexicon is organized as or under a complex type hierarchy , the extraction of an application - tuned lexicon is carried out similarly .",
    "this has the effect that closed class words are removed from the lexicon if they are not covered in the application domain .",
    "open class words belonging to word classes not covered by the subgrammar type set are removed .",
    "some applications do not need their own lexicon for open class words because they can be linked to an externally provided domain - specific thesaurus ( as is the case for the examples discussed below ) . in this case , a sublexicon extraction is not necessary .",
    "the first trial application of the automatic subgrammar extraction tool has been carried out for an information system with an output component that generates integrated text and graphics .",
    "this information system has been developed for the domain of art history and is capable of providing short biography articles for around 10  000 artists .",
    "the underlying knowledge base , comprising half a million semantic concepts , includes automatically extracted information from 14  000 encyclopedia articles from mcmillans planned publication `` dictionary of art '' combined with several additional information sources such as the getty `` art and architecture thesaurus '' ; the application is described in detail in  @xcite . as input",
    "the user clicks on an artist name .",
    "the system then performs content selection , text planning , text and diagram generation and page layout automatically .",
    "possible output languages are english and german .",
    "the grammar necessary for short biographical articles is , however , naturally much more constrained than that supported by general broad - coverage grammars .",
    "there are two main reasons for this : first , because of the relatively fixed text type `` encyclopedia biography '' involved , and second , particularly in the example information system , because of the relatively simple nature of the knowledge base  this does not support more sophisticated text generation as might appear in full encyclopedia articles . without extensive empirical analysis",
    ", one can already state that such a grammar is restricted to main clauses , only coordinative complex clauses , and temporal and spatial prepositional phrases .",
    "it would probably be possible to produce the generated texts with relatively complex templates and aggregation heuristics : but the full grammars for english and german available in kpml already covered the required linguistic phenomena .",
    "the application of the automatic subgrammar extraction tool to this scenario is as follows .    ' '' ''    ( 210,140 ) ( 0,0)(210,140)(30,10)[0,120 ] ( 0,-120 )    example textsroger hilton was an english painter .",
    "he was born at northwood on 23 march 1911 , and he died at botallack on 23 february 1975 .",
    "he studied at slade school in 1929 - 1931 .",
    "he created `` february - march 1954 '' , `` grey figure '' , `` oi yoi yoi '' and `` june 1953 ( deep cadmium ) '' .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ anni albers is american , and she is a textile designer , a draughtsman and a printmaker .",
    "she was born in berlin on 12 june 1899 .",
    "she studied art in 1916 - 1919 with brandenburg . also , she studied art at thekunstgewerbeschule in hamburg in 1919 - 1920 and the bauhaus at weimar and dessau in 1922 - 1925 and 1925 - 1929 . in 1933",
    "she settled in the usa . in 1933 - 1949",
    "she taught at black mountain college in north carolina .",
in the training phase , the information system runs with the full generation grammar .",
    "all grammatical types used during this stage are collected to yield the cumulative type set _ goal - types_. how many text examples must be generated in this phase depends on the relative increase of new information ( occurrence of new types ) obtained with every additional sentence generated .",
    "we show here the results for two related text types : ` short artist biographies ' and ` artist biography notes ' .",
    "figure  [ longer - stats ] shows the growth curve for the type set ( vertical axis ) with each additional semantic specification passed from the text planner to the sentence generator ( horizontal axis ) for the first of these text types .",
    "the graph shows the cumulative type usage for the first 90 biographies generated , involving some 230 sentences .",
    "the subgrammar extraction for the `` short artist biographies '' text type can therefore be performed with respect to the 246 types that are required by the generated texts , applying the algorithm described above .",
    "the resulting extracted subgrammar is a type lattice with only 144 types .",
    "the size of the extracted subgrammar is only 11% of that of the original grammar .",
    "run times for sentence generation with this extracted grammar typically range from 55%75% of that of the full grammar ( see table  [ runtime])in most cases , therefore , less than one second with the regular kpml generation environment ( i.e. , unoptimized with full debugging facilities resident ) .    ' '' ''    [ cols= \" < , < , < , < , < \" , ]     ( under allegro common lisp running on a sparc10 . )    ' '' ''",
    "the generation times are indicative of the style of generation implemented by kpml .",
    "clause types with more subtypes are likely to cause longer processing times than those with fewer subtypes .",
    "when there are in any case fewer subtypes available in the full grammar ( as in the existential shown in table  [ runtime ] ) , then there will be a less noticeable improvement compared with the extracted grammar .",
    "in addition , the run times reflect the fact that the number of queries being asked by choosers has not yet been maximally reduced in the current evaluation . noting the cumulative set of inquiry responses during the training phase would provide sufficient information for more effective pruning of the extracted choosers .    ' '' ''    ( 210,100 ) ( 0,0)(210,100)(30,10)[0,120 ] ( 0,-120 )    example text :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ nathan drake was an english painter .",
    "he was born at lincoln in 1728 , and he died at york on 19 february 1778 . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    ' '' ''    the second example shows similar improvements .",
    "the very short biography entry is appropriate more for figure headings , margin notes , etc .",
    "the cumulative type use graph is shown in figure  [ eg2 ] . with this ` smaller ' text type , the cumulative use stabilizes very quickly ( i.e. , after 39 sentences ) at 205 types .",
    "this remained stable for a test set of 500 sentences . extracting the corresponding subgrammar yields a grammar involving only 101 types , which is 7% of the original grammar .",
    "sentence generation time is accordingly faster , ranging from 40%60% of that of the full grammar . in both cases ,",
    "it is clear that the size of the resulting subgrammar is dramatically reduced .",
    "the generation run - time is cut to 2/3 .",
    "the run - time space requirements are cut similarly .",
    "the processing time for subgrammar extraction is less than one minute , and is therefore not a significant issue for improvement .",
    "in this paper , we have described how generation resources for restricted applications can be developed drawing on large - scale general generation grammars .",
    "this enables both re - use of those resources and progressive growth as new applications are met .",
    "the grammar extraction tool then makes it a simple task to extract from the large - scale resources specially tuned subgrammars for particular applications .",
    "our approach shows some similarities to that proposed by @xcite for improving parsing performance by grammar pruning and specialization with respect to a training corpus .",
    "rule components are ` chunked ' and pruned when they are unlikely to contribute to a successful parse . here",
    "we have shown how improvements in generation performance can be achieved for generation grammars by removing parts of the grammar specification that are not used in some particular sublanguage .",
    "the extracted grammar is generally known to cover the target sublanguage and so there is no loss of required coverage .    another motivation for this work is the need for smaller , but not toy - sized , systemic grammars for their experimental compilation into state - of - the - art feature logics .",
    "the ready access to consistent subgrammars of arbitrary size given with the automatic subgrammar extraction reported here allows us to investigate further the size to which feature logic representations of systemic grammar can grow while remaining practically usable .",
    "the compilation of the full grammar nigel has so far only proved possible for cuf ( see @xcite ) , and the resulting type deduction runs too slowly for practical applications .",
    "it is likely that further improvements in generation performance will be achieved when both the grammatical structures and the extracted choosers are pruned .",
    "the current results have focused primarily on the improvements brought by reconfiguring the type lattice that defines the grammar .",
    "the structures generated are still the ` full ' grammatical structures that are produced by the corresponding full grammar : if , however , certain constituent descriptions are always unified ( conflated in systemic terminology ) then , analogously to  @xcite , they are candidates for replacement by a single constituent description in the extracted subgrammar .",
    "moreover , the extracted choosers can also be pruned directly with respect to the sublanguage .",
    "currently the pruning carried out is only that entailed by the type lattice , it is also possible however to maintain a record of the classificatory inquiry responses that are used in a subgrammar : responses that do not occur can then motivate further reductions in the choosers that are kept in the extracted grammar .",
    "evaluation of the improvements in performance that these strategies bring are in progress .",
    "one possible benefit of not pruning the chooser decision trees completely is to provide a fall - back position for when the input to the generation component in fact strays outside of that expected by the targetted subgrammar .",
    "paths in the chooser decision tree that do not correspond to types in the subgrammar can be maintained and marked explicitly as ` out of bounds ' for that subgrammar .",
    "this provides a semantic check that the semantic inputs to the generator remain within the limits inherent in the extracted subgrammar .",
    "if it sufficiently clear that these limits will be adhered to , then further extraction will be free of problems .",
    "however if the demands of an application change over time , then it is also possible to use the semantic checks to trigger regeneration with the full grammar : this offers improved average throughput while maintaining complete generation .",
    "noting exceptions can also be used to trigger new subgrammar extractions to adapt to the new applications demands .",
    "a number of strategies therefore present themselves for incorporating grammar extraction into the application development cycle .",
    "although we have focused here on run - time improvements , it is clear that the grammar extraction tool has other possible uses .",
    "for example , the existence of small grammars is one important contribution to providing teaching materials .",
    "also , the ability to extract consistent subcomponents should make it more straightforward to combine grammar fragments as required for particular needs .",
    "further validation in both areas forms part of our ongoing research .",
    "moreover , a significantly larger reduction of the type lattice can be expected by starting not from the cumulative set of goal - types for the grammar reduction , but from a detailed protocol of jointly used types for every generated sentence of the training corpus .",
    "a clustering technique applied to such a protocol is under development .",
    "finally , the proposed procedure is not bound to systemic grammar and can also be used to extract common typed unification subgrammars . here",
    ", however , the gain will probably not be as remarkable as in systemic grammar .",
    "the universal principles of , for example , an hpsg can not be excised .",
    "hpsg type hierarchies usually contain mainly general types , so that they will not be affected substantially . in the end , the degree of improvement achieved depends on the extent to which a grammar explicitly includes in its type hierarchy distinctions that are fine enough to vary depending on text type .",
    "robin  p. fawcett and gordon  h. tucker .",
    "demonstration of genesys : a very large , semantically based systemic functional grammar . in _ 13th .",
    "international conference on computational linguistics ( coling-90 ) _ , volume  i , pages 47  49 , helsinki , finland .",
    "thomas kamps , christoph hser , wiebke mhr , and ingrid schmidt .",
    "knowledge - based information acess for hypermedia reference works : exploring the spread of the bauhaus movement . in maristella agosti and alan  f. smeaton , editors ,",
    "_ information retrieval and hypertext _ , pages 225255 .",
    "kluwer academic publishers , boston / london / dordrecht .",
    "christian  m.i.m . matthiessen .",
    "1983 . systemic grammar in computation : the nigel case . in _ proceedings of the first annual conference of the european chapter of the association for computational linguistics_.    elena not and oliviero stock",
    "automatic generation of instructions for citizens in a multilingual community . in _ proceedings of the european language engineering convention _ ,",
    "paris , france , july .",
    "michael odonnell .",
    "technical report , fujitsu limited , tokyo , japan . ( internal report of project carried out at fujitsu australia ltd . ,",
    "sydney , project leader : guenter plum , document engineering centre ) .",
    "ehud reiter .",
    "1994 . has a consensus nl generation architecture appeared , and is it psychologically plausible ? in _ proceedings of the 7th . international workshop on natural language generation ( inlgw 94 )",
    "_ , pages 163170 , kennebunkport , maine .",
    "dietmar rsner and manfred stede .",
    "generating multilingual documents from a knowledge base : the techdoc project . in _ proceedings of the 15th .",
    "international conference on computational linguistics ( coling 94 ) _ , volume  i , pages 339  346 , kyoto , japan ."
  ],
  "abstract_text": [
    "<S> the space and run - time requirements of broad coverage grammars appear for many applications unreasonably large in relation to the relative simplicity of the task at hand . on the other hand , handcrafted development of application - dependent grammars </S>",
    "<S> is in danger of duplicating work which is then difficult to re - use in other contexts of application . to overcome this problem , </S>",
    "<S> we present in this paper a procedure for the automatic extraction of application - tuned consistent subgrammars from proved large - scale generation grammars . </S>",
    "<S> the procedure has been implemented for large - scale systemic grammars and builds on the formal equivalence between systemic grammars and typed unification based grammars . </S>",
    "<S> its evaluation for the generation of encyclopedia entries is described , and directions of future development , applicability , and extensions are discussed . </S>"
  ]
}