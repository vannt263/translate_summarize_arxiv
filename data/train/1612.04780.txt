{
  "article_text": [
    "connectivity augmentation is a classical problem in combinatorial optimization . given a graph @xmath0 and a parameter @xmath9 ,",
    "add a set of new edges @xmath3 of minimum cardinality or weight such that the augmented graph @xmath10 is @xmath11-connected ( resp .",
    ", @xmath11-edge - connected ) .",
    "efficient algorithms are known for both connectivity and edge - connectivity augmentation over abstract graphs and constant @xmath11  @xcite . in this paper",
    "we consider weighted connectivity augmentation for planar straight - line graphs ( pslgs ) .",
    "the vertices are points in euclidean plane , the edges are noncrossing line segments between the corresponding vertices , and the weight of an edge is its euclidean length .",
    "the edge- and node - connectivity of a planar graph is at most 5 by euler s theorem .",
    "further , not every pslg can be augmented to a 3-connected ( resp .",
    ", 4-edge - connected ) pslg ; see  @xcite for feasibility conditions",
    ". finding the minimum _ number _ of edges to augment a given pslg to @xmath11-connectivity or @xmath11-edge - connectivity is np - complete  @xcite for @xmath12 ; the reduction requires the input graph @xmath5 to be disconnected ( the np - hardness claim for connected input  ( * ? ? ?",
    "* corollary  2 ) turned out to be flawed ) .",
    "worst case bounds are known for the most important cases : every pslg @xmath5 with @xmath13 vertices can be augmented to 2-edge - connectivity with at most @xmath14 edges  @xcite ; and at most @xmath15 new edges if @xmath5 is already connected  @xcite . at most @xmath16",
    "suffice for 2-connectivity , where @xmath17 is the number of 2-blocks in @xmath5  @xcite .",
    "all these bounds are the best possible .    * our results .",
    "* we show that every connected pslg @xmath0 with @xmath13 vertices in general position can be augmented to a 2-connected pslg @xmath10 by adding new edges of total euclidean length @xmath2 ( section  [ sec : augment ] ) .",
    "a set @xmath3 that minimizes @xmath18 can be computed in @xmath4 time ( section  [ sec : dp ] ) ; however the problem becomes np - hard when @xmath5 is disconnected ( section  [ sec : hardness ] ) .",
    "further , there is a sequence of edge insertions and deletions that transforms a connected pslg @xmath5 into a planar straight - line cycle @xmath6 such that the graph at all stages remains connected with the sum of euclidean edge lengths below @xmath8 , and , at termination , @xmath7 , where @xmath19 denotes the euclidean minimum spanning tree of @xmath20 ; these bounds are the best possible ( section  [ sec : dynamic ] ) .",
    "our proof is constructive , and yields a polynomial - time algorithm for computing such sequences .    *",
    "related previous work . * biconnectivity augmentation over _ planar _ graphs ( where no embedding of @xmath5 is given ) is also np - complete  @xcite . over planar graphs",
    "_ with fixed combinatorial embedding _",
    ", biconnectivity augmentation remains np - hard for disconnected graphs ; but there is a near - linear time algorithm when the input is already connected  @xcite .",
    "frederickson and jaja  @xcite show that the _ weighted _ augmentation of a tree to be 2-connected or 2-edge - connected ( without planarity constraint ) is np - complete even if the weights are restricted to @xmath21 .",
    "the problem is apx - hard , and breaking the approximation ratio of 2 is a major open problem  @xcite . in the _ geometric _ setting , we show ( in section  [ sec : dp ] )",
    "that the minimum - weight augmentation of a planar straight - line tree to a 2-connected ( 2-edge - connected ) pslgs can be computed efficiently .",
    "the length of the edges in planar connectivity augmentation was studied only recently in the context of wireless networks .",
    "given a plsg @xmath22 where the vertices induce a 2-edge - connected unit disk graph , dobrev et al .",
    "@xcite compute a 2-edge - connected pslg by adding edges of length at most 2 .",
    "kranakis et al .",
    "@xcite studied the combined problem of adding the minimum _ number _ of edges of _ bounded length _ : a 2-edge - connected augmentation is possible such that @xmath23 is at most the number of bridges in @xmath5 and @xmath24 .",
    "however , finding the minimum number of new edges of bounded length is np - hard .",
    "let @xmath0 be a planar straight - line graph ( pslg ) , where @xmath20 is a set of @xmath13 points in the plane , no three of which are collinear , and @xmath25 is a set of open line segments between pairs of points in @xmath20 .",
    "the length of an edge @xmath26 , denoted @xmath27 , is the euclidean distance between @xmath28 and @xmath29 ; the total length of the edges is @xmath30 .",
    "denote by @xmath31 the set of faces of @xmath5 .",
    "the _ faces _ of @xmath5 are the connected components of the complement of all vertices and edges of @xmath5 , that is , @xmath32 . if @xmath5 is connected , then every bounded face is simply connected .    a _ walk _ is an alternating sequence of points ( vertices ) and line segments ( edges ) whose consecutive elements are incident , and hence it is uniquely described by the sequence of its vertices @xmath33 .",
    "a walk is _ closed _ if @xmath34 .",
    "a walk is called a _ path _ if no vertex appears more than once .",
    "every face @xmath35 defines a closed walk @xmath36 that contain all edges on the boundary of @xmath31 , called _ facial walk _",
    ", where every edge @xmath37 is incident to the face @xmath38 , and consecutive edges in the path , @xmath37 and @xmath39 , are also consecutive in the counterclockwise rotation of all edges incident to @xmath40 ( see fig .  [ fig:2](a ) ) .",
    "note that every edge @xmath41 occurs twice in the facial walks of the faces of @xmath5 : a _ cut vertex _",
    "( resp . , _ bridge _ ) occurs twice in some facial walk .",
    "a walk @xmath42 is _ convex _ if @xmath43 for @xmath44 ( for closed walks , @xmath45 ) , where @xmath46 is the measure of the minimum counterclockwise angle that rotates the ray @xmath47 into @xmath48 .",
    "a vertex of @xmath5 is called _ convex _ if @xmath43 for each pair @xmath37 and @xmath39 of consecutive edges in the counterclockwise rotation of edges incident to @xmath40 ; and _ reflex _ otherwise . a convex walk",
    "@xmath49 is _ safe _ if not all of its vertices are collinear , and the vertices lie on the boundary of the convex hull of @xmath50 with the possible exception of the first or last vertex .",
    "let @xmath49 be a walk contained in the boundary walk of a face @xmath35 .",
    "the shortest walk from @xmath51 to @xmath52 homotopic to @xmath53 , denoted @xmath54 , is called the _ geodesic _ between @xmath51 and @xmath52 . for a walk @xmath53 ,",
    "let @xmath55\\rightarrow \\mathbb{r}^2 $ ] be a piecewise linear arc from @xmath51 to @xmath52 that traverses the edges of @xmath53 in the given order .",
    "a _ homotopy _ between two walks , @xmath49 and @xmath56 , is a continuous function @xmath57\\times[0,1]\\rightarrow \\mathbb{r}^2 $ ] such that @xmath58 , @xmath59 , @xmath60 , @xmath61 , @xmath62 for all @xmath63 .",
    "intuitively , the walk @xmath53 can be continuously deformed into @xmath64 in the face @xmath38 .",
    "the walks @xmath53 and @xmath64 are _ homotopic _ if such a homotopy exists .",
    "( 1,0.25453794 ) ( 0,0 ) with vertices in convex position .",
    "( b ) a convex path @xmath65 , where @xmath66 .",
    "( c ) a convex path @xmath67 with four edges , where @xmath54 contains edge @xmath68.,title=\"fig : \" ] ( 0.28871011,0.04562865)(0,0)[lb ] ( 0,0 ) with vertices in convex position .",
    "( b ) a convex path @xmath65 , where @xmath66 .",
    "( c ) a convex path @xmath67 with four edges , where @xmath54 contains edge @xmath68.,title=\"fig : \" ] ( 0.12182641,0.00579987)(0,0)[lb ] ( 0,0 ) with vertices in convex position .",
    "( b ) a convex path @xmath65 , where @xmath66 . ( c ) a convex path @xmath67 with four edges , where @xmath54 contains edge @xmath68.,title=\"fig : \" ] ( 0.48033978,0.00580222)(0,0)[lb ] ( 0,0 ) with vertices in convex position .",
    "( b ) a convex path @xmath65 , where @xmath66 . ( c )",
    "a convex path @xmath67 with four edges , where @xmath54 contains edge @xmath68.,title=\"fig : \" ] ( 0.82863433,0.00580222)(0,0)[lb ] ( 0.2537617,0.23149408)(0,0)[lb ] ( 0.0668696,0.03822856)(0,0)[lb ] ( 0.05432268,0.13912942)(0,0)[lb ] ( 0.60850681,0.04221873)(0,0)[lb ] ( 0.51319131,0.24042385)(0,0)[lb ] ( 0.38191831,0.03798715)(0,0)[lb ] ( 0.43719944,0.15077211)(0,0)[lb ] ( 0.81877382,0.24583347)(0,0)[lb ] ( 0.68479637,-0.00034599)(0,0)[lb ] ( 0.96493903,0.04462578)(0,0)[lb ] ( 0.75089298,0.0516515)(0,0)[lb ] ( 0.8487234,0.13190323)(0,0)[lb ]    given a walk @xmath49 and polygonal environment @xmath69 with @xmath13 vertices , the geodesic can be computed in @xmath70 time  @xcite .",
    "it is known  @xcite that all interior vertices of @xmath54 are reflex vertices of @xmath5 ; and if @xmath53 is a convex chain , then so is @xmath54 ( it may be a straight - line segment ) .",
    "geodesics play a crucial role in our worst - case bounds , since @xmath71 by definition , and the edges of @xmath54 do not cross any existing edges of @xmath5 .",
    "we show the following .",
    "[ lem:1 ] let @xmath0 be a pslg , and let @xmath72 be a safe convex walk contained in some facial walk of @xmath5 .",
    "then @xmath54 is a simple path that does not contain any vertices of @xmath53 except for @xmath51 and @xmath52 at its endpoints .",
    "let @xmath73 be the convex hull of @xmath74 . by assumption , the vertices of @xmath53 lie on @xmath75 with the possible exception of @xmath51 and @xmath52 , which may lie in the interior of @xmath73 . by construction",
    ", @xmath54 lies in @xmath76 with the possible exception of its endpoints @xmath51 and @xmath52 .",
    "hence , @xmath54 does not contain any interior vertex of @xmath53 .",
    "[ lem:1 + ] let @xmath0 be a pslg , and let @xmath72 be a convex walk contained in some facial walk of @xmath5 .",
    "if @xmath77 is a simple path that contains none of the vertices @xmath51 , @xmath78 , then @xmath54 is also a simple path that does not contain any of the vertices @xmath79 .    by lemma  [ lem:1 ]",
    ", @xmath80 is a simple cycle .",
    "let @xmath81 be the first edge of @xmath77 .",
    "since @xmath77 is homotopic to @xmath82 , the edge @xmath81 lies in the angular domain @xmath83 , and @xmath84 .",
    "consequently , the edge @xmath68 lies in the exterior of the cycle @xmath85 .",
    "note that @xmath86 .    since @xmath77 is a convex chain ,",
    "the interior of triangle @xmath87 lies in the exterior of @xmath85 . on the other hand",
    ", @xmath88 lies in @xmath87 , and so it is disjoint from the vertices @xmath89 .",
    "we conclude that @xmath54 is a simple path that does not contain any of the vertices @xmath79 .",
    "let @xmath5 be a pslg with no three collinear vertices . denote by @xmath90 the set of maximal convex walks contained in the facial walks of @xmath5 ( note that @xmath91 can be computed with a graph traversal in @xmath92 time ) .",
    "partition @xmath91 into three subsets : @xmath93 contains the convex walks that consist of a single edge ; @xmath94 contains the closed convex walks @xmath95 , i.e. , @xmath34 ; and @xmath96 contains all open convex walks of two or more edges .",
    "we define a _ dual graph _",
    "@xmath97 where the nodes correspond to the convex walks in @xmath98 , and two nodes are adjacent if and only if the corresponding convex chains share an edge in @xmath25 .",
    "[ lem:2 ] let @xmath0 be a connected pslg with @xmath99",
    ". then    1 .",
    "every edge in @xmath25 is part of a convex chain in @xmath98 , 2 .",
    "the dual graph @xmath97 is connected ,    \\(a ) let @xmath100 .",
    "since @xmath5 has at least three vertices and is connected , we may assume that @xmath17 is incident to two or more edges .",
    "assume that @xmath101 and @xmath102 are the edges preceding and following @xmath103 in the clockwise rotation of edges around @xmath17 respectively ( possibly @xmath104 ) .",
    "then the boundary walks of the faces incident to @xmath17 contain the paths @xmath105 and @xmath106 . since @xmath17 is the apex of at most one reflex angle , we may assume that @xmath107 or @xmath108 is convex ; and so @xmath109 is part of a maximal convex walk of 2 or more edges .",
    "this walk is in either @xmath94 or @xmath96 .",
    "\\(b ) for every vertex @xmath110 , every angle @xmath111 formed by consecutive incident edges @xmath26 and @xmath112 is convex with the possible exception of one reflex angle ( since the sum of these angles is @xmath113 . consequently ,",
    "the walks @xmath114 where @xmath115 are part of distinct convex chains in @xmath98 that induce a path or a cycle in the dual graph .",
    "now consider two chains @xmath116 , and two arbitrary edges @xmath117 and @xmath118 from them .",
    "since @xmath5 is connected , there is a path @xmath119 such that @xmath120 and @xmath121 . since every two consecutive edges of @xmath64 are part of convex cycles in the same component of @xmath97 , the chains @xmath122 and @xmath123 are also part of the same component of @xmath97 .",
    "the proof of lemma  [ lem:2 ] is provided in the appendix .",
    "when we modify a given pslg with edge insertion operations , we prove the following .",
    "[ thm:1 ] let @xmath124 be a connected pslg with @xmath125 and no three collinear vertices .",
    "then @xmath5 can be augmented to a 2-edge - connected pslg @xmath10 such that @xmath126 , and this bound is the best possible .",
    "we prove the upper bound constructively , augmenting a connected pslg @xmath0 incrementally into a 2-edge - connected pslg @xmath10 .",
    "then decompose every convex walk in @xmath91 of two or more edges into edge - disjoint convex walks of two or three edges .",
    "let @xmath127 be the set of all resulting convex paths of two or three edges ( that is , we discard convex walks that consist of a singe edge and convex cycles of 3 edges ) .",
    "see fig .",
    "[ fig:2](b ) for an illustration .",
    "( 1,0.19059586 ) ( 0,0 ) is its boundary walks .",
    "( b ) dashed lines indicate convex paths of two or three edges in @xmath127 ; dotted lines indicate maximal convex paths of a single edge , and triangles .",
    "( c ) the 2-edge - connected pslg @xmath10 produced by our algorithm.,title=\"fig : \" ] ( 0.1414397,0.00392041)(0,0)[lb ] ( 0.49326912,0.00392041)(0,0)[lb ] ( 0.84646753,0.00392041)(0,0)[lb ] ( 0,0 ) is its boundary walks .",
    "( b ) dashed lines indicate convex paths of two or three edges in @xmath127 ; dotted lines indicate maximal convex paths of a single edge , and triangles .",
    "( c ) the 2-edge - connected pslg @xmath10 produced by our algorithm.,title=\"fig : \" ]    for each convex path @xmath128 , augment @xmath5 with the edges of @xmath54 ( refer to fig .",
    "[ fig:2](c ) ) , and denote by @xmath129 the resulting graph .",
    "note that @xmath129 is 2-edge - connected since every edge in @xmath25 is part of a cycle by lemma  [ lem:2](a ) : each cycle is either a triangle in @xmath5 , or a cycle @xmath130 for some @xmath131 ; and every edge in @xmath3 is part of a cycle by construction .",
    "next , we derive an upper bound for @xmath18 .",
    "every @xmath41 appears twice in the boundary walks of the faces of @xmath5 , and so it appears in at most two convex paths in @xmath132 . by definition ,",
    "@xmath71 for every @xmath131 .",
    "overall , we have @xmath133    ( 1,0.18503062 ) ( 0,0 ) with three solid edges , where the augmentation to 2-edge - connectivity requires the addition of the dashed edges.,title=\"fig : \" ] ( 1.00869647,0.10597043)(0,0)[lb ] ( 0,0 ) with three solid edges , where the augmentation to 2-edge - connectivity requires the addition of the dashed edges.,title=\"fig : \" ] ( -0.04272756,-0.02722992)(0,0)[lb ] ( 0.46769892,-0.02384202)(0,0)[lb ] ( -0.0440314,0.22161412)(0,0)[lb ] ( 0.96983538,-0.0114394)(0,0)[lb ] ( 0.96983538,0.22090027)(0,0)[lb ] ( -0.04964884,0.09439476)(0,0)[lb ]    we now show a matching lower bound . for every @xmath134 ,",
    "let @xmath135 be defined on four vertices @xmath136 , @xmath137 , @xmath138 , and @xmath139 with edge set @xmath140 ; refer to figure [ fig:3 ] .",
    "since @xmath122 and @xmath141 are leaves in @xmath5 , and @xmath142 would cross @xmath143 , both @xmath144 and @xmath145 have to be added .",
    "we have @xmath146 , and the ratio @xmath147 is the best possible .",
    "we strengthen theorem  [ thm:1 ] to vertex - connectivity .",
    "[ thm:2 ] let @xmath124 be a connected pslg with @xmath125 and no three collinear vertices .",
    "then @xmath5 can be augmented to a 2-connected pslg @xmath148 such that @xmath126 , and this bound is the best possible .",
    "we prove the upper bound constructively .",
    "consider the convex walk in @xmath98 , defined above .",
    "we augment @xmath5 into @xmath10 such that the vertex set of each convex walk in @xmath98 induces a 2-connected subgraph in @xmath129 ; and every new edge in @xmath3 is part of one of these subgraphs . note",
    "that this implies that @xmath129 is 2-connected : by lemma  [ lem:2](a ) , every vertex is part of a 2-connected subgraph ; if two 2-connected subgraphs share two vertices , then their union is 2-connected . by lemma",
    "[ lem:2](b ) the union of the subgraphs induced by the convex chains is 2-connected . in the remainder of the proof",
    ", we consider a single convex walks @xmath149 .    * case  1 : @xmath150 . *",
    "if the vertices @xmath151 are distinct , then @xmath53 is a cycle , and all vertices of the walk are part of a 2-connected component . otherwise @xmath152 . in this case ,",
    "@xmath153 forms a convex polygon , whose interior contains @xmath34 but no other vertices .",
    "consequently , @xmath154 , and the only cut vertex along the walk is @xmath122 .",
    "add the edge @xmath155 , where @xmath156 by the triangle inequality ( fig .",
    "[ fig:2-con - upperbound](a ) ) . as a result ,",
    "the vertices of @xmath53 induce a 2-connected subgraph .",
    "* case  2 : @xmath157 .",
    "* we decompose @xmath53 into edge - disjoint walks recursively as follows .",
    "if @xmath54 does not contain any interior vertex of @xmath53 , then we are done .",
    "otherwise , let @xmath73 be the convex hull of @xmath74 and let @xmath158 be the subchain along @xmath75 .",
    "by lemma  [ lem:1 ] , the set of interior vertices of @xmath159 does not contain any vertex of @xmath160 .",
    "starting from @xmath160 , successively append the edges of @xmath53 proceeding @xmath40 or following @xmath161 while the path @xmath160 maintains the property that @xmath160 contains no interior vertices of @xmath159 .",
    "then recurse on any prefix or suffix path in @xmath162 .",
    "we obtain a decomposition of @xmath53 into subpaths @xmath160 such that @xmath163 is a simple cycle ( fig .",
    "[ fig:2-con - upperbound](b ) ) . by lemma",
    "[ lem:1 + ] , any two such consecutive paths share two vertices .",
    "consequently , the union of the cycles @xmath163 is a 2-connected graph .",
    "analogously to the proof of theorem  [ thm:1 ] , we have @xmath2 , and the same lower bound construction shows that this bound is the best possible .",
    "( 1,0.2037577 ) ( 0,0 ) ( 0.14552631,0.0058292)(0,0)[lb ] ( 0.72101208,0.0058292)(0,0)[lb ]",
    "let @xmath31 be a face of a pslg @xmath5 , and let @xmath164 , @xmath165 be the ( closed ) facial walk of @xmath31 .",
    "we define the graph @xmath166 , where @xmath167 is the set of vertices in @xmath168 and @xmath169 . given a walk @xmath170 contained in @xmath168 , a vertex @xmath171 is a _ cut vertex relative to @xmath172 _ if it appears more than once in @xmath172 .",
    "for every pair @xmath173 , we introduce a weight function , corresponding to the feasibility of an edge @xmath174 .",
    "let @xmath175 if the line segment @xmath174 does not cross any edge in @xmath176 , lies in the face @xmath31 and in the wedges @xmath46 and @xmath177 ; and let @xmath178 otherwise .",
    "note that two feasible edges , @xmath179 and @xmath180 , do not cross if their indices do not interleave ( i.e. , if @xmath181 ) .",
    "we present a dynamic programming algorithm @xmath182 that finds a set @xmath3 of edges of minimum total weight such that @xmath183 is a 2-connected pslg .",
    "we call an optimal solution @xmath184 .",
    "[ rem : separation ] every edge in @xmath184 lies in the face @xmath31 . indeed , suppose @xmath183 is a 2-connected pslg and @xmath185 is outside @xmath31 .",
    "then @xmath40 and @xmath161 are part of a simple cycle formed by some edges of @xmath186 , and @xmath187 is also 2-connected , showing that @xmath3 is not optimal .    by remark  [ rem :",
    "separation ] , each face of the input can be treated independently .",
    "if we insert an edge in face @xmath31 , then it decomposes @xmath31 into two faces @xmath188 and @xmath189 that can be considered independently .",
    "however , defining subproblems in terms of faces might generate an exponential number of subproblems .",
    "instead we define our subproblems in term of continuous intervals of the facial walk of @xmath31 .",
    "we characterize an optimal solution @xmath184 for @xmath186 in terms of local properties of the subproblems @xmath172 .",
    "let @xmath190 be a cut vertex with respect to a walk @xmath172 .",
    "the vertices between two consecutive occurrences of @xmath190 in @xmath172 are called _ descendants _ of @xmath190 .",
    "non - descendant _ of @xmath190 in @xmath191 is a vertex in @xmath168 that is neither a descendant in @xmath191 nor equal to @xmath190 .",
    "the _ @xmath192-th group _ of descendants is the set of vertices between the @xmath192-th and @xmath193-st occurrence of @xmath190 .",
    "a set @xmath194 of feasible edges _ satisfies _ a group if there is a cycle in the graph @xmath195 that contains a descendant in that group and a non - descendant of @xmath190 ; and @xmath194 satisfies a cut vertex @xmath190 if it satisfies all of its groups .",
    "if @xmath183 is a 2-connected pslg , then @xmath3 satisfies all cut vertex in @xmath196 . indeed , suppose @xmath3 does not satisfy a vertex @xmath190 , then the deletion of @xmath190 would disconnect one of its groups of descendants from the rest of @xmath186 , hence @xmath190 would be a cut vertex in @xmath183 .",
    "let @xmath197 $ ] , @xmath198 , be the minimum weight of an edge set @xmath194 that satisfies all groups of all cut vertices relative to @xmath172 and such that @xmath199 , @xmath200 and @xmath201 is a pslg .",
    "algorithm @xmath182 uses the following recursive relation to compute subproblems @xmath197 $ ] and returns @xmath202 $ ] .    1 .",
    "if @xmath172 does not contain any cut vertex relative to @xmath172 , then @xmath197=0 $ ] .",
    "2 .   if @xmath203 and @xmath204 , then @xmath197=\\infty$ ] .",
    "3 .   if @xmath205 is not a cut vertex relative to @xmath172 , then @xmath197=\\min\\{c[s+1,t]$ ] , + and @xmath206+c[k , t]+f(s , k)\\}\\}$ ] .",
    "if @xmath205 is a cut vertex relative to @xmath172 , then let + @xmath207 .",
    "+ set @xmath197=\\min _ { ( p_i , p_j)\\in x}\\ { c[s , i]+c[i , j]+c[j , t]+f(i , j)\\}$ ] .    ( 1,0.22557258 ) ( 0,0 ) ( 0.09403438,0.16538865)(0,0)[lb ] ( 0.20893672,0.16538865)(0,0)[lb ] ( 0,0 ) ( 0.50768916,0.19887505)(0,0)[lb ] ( 0.43349221,0.05705054)(0,0)[lb ] ( 0,0 ) ( 0.45647476,0.13978147)(0,0)[lb ] ( 0.66884885,0.18311674)(0,0)[lb ] ( 0,0 ) ( 0.84649214,0.19887505)(0,0)[lb ] ( 0.77229519,0.05705054)(0,0)[lb ] ( 0,0 ) ( 0.8697669,0.08856708)(0,0)[lb ] ( 0,0 ) ( 0.95808963,0.0373527)(0,0)[lb ] ( 0.16095829,0.00207535)(0,0)[lb ] ( 0.5352174,0.00207535)(0,0)[lb ] ( 0.87008081,0.00207535)(0,0)[lb ]    * correctness . *",
    "we show that @xmath182 correctly computes @xmath197 $ ] and that @xmath202 $ ] corresponds to an optimal edge set @xmath194 .",
    "the base case ( i ) is trivial .    in case ( ii ) , @xmath203 is a cut vertex of @xmath168 , and all other vertices in @xmath208 $ ] are descendants of @xmath205 .",
    "therefore , there is no edge incident to a non - descendant of @xmath205 in @xmath172 , and @xmath205 can not be satisfied in @xmath172 ( fig .",
    "[ fig : dynamicprog](a ) ) .    in case",
    "( iii ) , since @xmath205 does not have descendants , the set @xmath194 corresponding to @xmath197 $ ] either has no edge incident to @xmath205 or it has an edge between @xmath205 and some descendant @xmath209 of a cut vertex @xmath190 in @xmath172 . in the former case , we have @xmath197=c[s+1,t]$ ] since @xmath194 satisfies all cut vertices relative to @xmath210 . in the latter",
    ", the edge @xmath211 creates a cycle satisfying the group of descendants containing @xmath212 for every cut vertex in @xmath213 .",
    "it divides @xmath31 into two faces : @xmath188 ( resp .",
    ", @xmath189 ) whose facial walk contains @xmath214 ( resp .",
    ", @xmath215 ) .",
    "every group that still needs to be satisfied is either in @xmath188 or @xmath189 . if @xmath216 ( resp . , @xmath217 )",
    "is the set with minimum weight between vertices in @xmath214 ( resp . ,",
    "@xmath215 ) that satisfies the groups of descendants in @xmath188 ( resp . ,",
    "@xmath189 ) , then @xmath218 .    in case ( iv ) , all non - descendants of @xmath205 in @xmath172 are in the set @xmath219 , where @xmath209 is the last occurrence of @xmath205 in @xmath172 .",
    "@xmath194 must contain at least one edge in @xmath220 in order to satisfy @xmath205 .",
    "let @xmath221 be an edge that minimizes @xmath222 , breaking ties by maximizing @xmath223 .",
    "then , every edge @xmath224 such that @xmath225 is between vertices in @xmath191 .",
    "in particular , there exist no edge in @xmath194 between a vertex in @xmath226 and @xmath227 .",
    "we can partition @xmath194 into @xmath216 , @xmath217 , and @xmath228 such that they each contain only edges between vertices in @xmath229 , @xmath230 , and @xmath231 respectively , each of them being the minimum - weight set that satisfies the groups of descendants in their respective subproblems .",
    "the edges in @xmath216 , @xmath217 , @xmath228 can not cross since they correspond to edge - disjoint walks in @xmath168 .",
    "thus , we have @xmath197=c[s , i']+c[i',j']+c[j',t']+f(i',j')$ ] .",
    "let @xmath194 be the edge set corresponding to @xmath202 $ ] .",
    "since @xmath194 satisfies all cut vertices in @xmath196 , which corresponds to the cut vertices of @xmath186 , the graph @xmath201 is 2-connected .",
    "since @xmath194 is a minimum - weight edge set that satisfies all groups of @xmath196 by definition , we have @xmath232 .    * running time . *",
    "the feasible edge weights @xmath233 can be precomputed in @xmath234 time  @xcite for all @xmath235 .",
    "there are @xmath234 subproblems , and each can be computed in @xmath234 time since it depends on @xmath234 smaller subproblems .",
    "hence algorithm @xmath182 takes @xmath236 time .",
    "[ thm : alg - pvca ] for a connected pslg @xmath237 , an edge set @xmath3 of minimum weight such that @xmath1 is 2-connected can be computed in @xmath4 time .",
    "we identify the faces of @xmath237 and run algorithm @xmath182 in all faces . by remark  [ rem : separation ]",
    ", the union of the optimal solutions for all faces is the optimal solution for @xmath5 .",
    "since the size of the union of all facial walks is @xmath238 , algorithm @xmath182 takes @xmath4 time .",
    "[ thm : alg - peca ] for a connected pslg @xmath237 , an edge set @xmath3 of minimum weight such that @xmath1 is 2-edge - connected can be computed in @xmath4 time .",
    "we modify algorithm @xmath182 into algorithm @xmath239 , which computes the set @xmath3 .",
    "let an edge @xmath240 be a _ bridge relative to @xmath172 _",
    ", @xmath241 , if it appears twice in @xmath172 ( recall that an edge can only appear up to two times in a facial walk ) .",
    "assume that @xmath240 and @xmath242 are the first and second occurrences .",
    "call @xmath243 the descendants of @xmath240 in @xmath172 , and all other vertices non - descendants .",
    "replace the recurrence relation as follows .    1 .",
    "if @xmath172 does not contain a bridge relative to @xmath172 , then @xmath197=0 $ ] .",
    "2 .   if @xmath244 is not a bridge relative to @xmath172 , then @xmath197=\\min\\{c[s+1,t],$ ] @xmath206+c[k , t]+f(s , k)\\}\\}$ ] .",
    "3 .   if @xmath244 is a bridge relative to @xmath172 , then let @xmath245descendants of @xmath244 in @xmath246 @xmath244 in @xmath247 . set @xmath197=\\min_{(p_i , p_j)\\in x}\\ { c[s , i]+c[i , j]+c[j , t]+f(i , j)\\}$ ] .",
    "the proof of correctness and runtime analysis are similar to algorithm @xmath182 .",
    "theorems  [ thm : alg - pvca ] and [ thm : alg - peca ] extend to any nonnegative weight function . in particular , a minimum cardinality edge set @xmath3 can also be computed in @xmath4 time .",
    "[ thm : hardness ] given a ( disconnected ) pslg @xmath0 and a positive integer @xmath192 , deciding whether there exists an edge set @xmath3 such that @xmath248 and @xmath1 is a 2-edge - connected pslg is np - hard .",
    "we reduce from planar - monotone-3sat , which is np - complete  @xcite .",
    "an instance of this problem is given by a plane bipartite graph between @xmath13 _ variables _ and @xmath249 _ clauses _ such that the variables are embedded on the @xmath250-axis , no edge crosses the @xmath250-axis and every clause has degree 2 or 3 .",
    "a clause is called _ positive _ if it is embedded on the upper half - plane and _ negative _ otherwise .",
    "planar - monotone-3sat asks if there is an assignment from @xmath251 to variables such that each positive ( resp . , negative )",
    "clause is adjacent to at least one ` true ` ( resp .",
    ", ` false ` ) variable .",
    "given such an instance we build a pslg @xmath0 as follows .",
    "we divide the reduction into variable , wire and clause gadgets .",
    "( 1,0.67445368 ) ( 0,0 ) ( 0.15789859,0.66727207)(0,0)[lb ] ( 0.7739534,0.396809)(0,0)[lb ] ( 0,0 ) ( 0.29932747,0.3118339)(0,0)[lb ] ( 0.87515493,0.3118339)(0,0)[lb ] ( 0.29097977,0.00297177)(0,0)[lb ] ( 0.77164448,0.00297177)(0,0)[lb ] ( 0,0 ) ( 0.88375018,0.4835537)(0,0)[lb ] ( 0,0 ) ( -0.00070631,0.48362432)(0,0)[lb ] ( 0,0 ) ( 0.6339468,0.48362432)(0,0)[lb ] ( 0,0 ) ( 0.82544268,0.15465722)(0,0)[lb ]    * variable gadget .",
    "* a gadget of a variable adjacent to two positive and one negative clause is shown in fig .",
    "[ fig : reduction](a ) .",
    "the gray boxes and small disks represent 2-connected components and leaves respectively .",
    "each leaf requires at least one edge for the augmentation and the closest node from each of them is 1 unit apart .",
    "a pair of leaves can possibly share an edge and the @xmath222-th gadget for each @xmath252 has an even number of leaves @xmath253 , hence the gadget requires at least @xmath254 length .",
    "there are exactly two possible ways to achieve this bound and they encode the ` true`/`false ` value of the variable .",
    "[ fig : reduction](a ) can be generalized to other variables by repeating , omitting and changing the length and number of leaves of the component highlighted in the figure .",
    "* wire gadget . * the wire gadget that connects the @xmath222-th variable to the @xmath255-th clause , denoted as the @xmath256-wire , share the edge @xmath257 with the @xmath222-th variable gadget and its first leaf is called @xmath258 ( fig .",
    "[ fig : reduction](b ) )",
    ". turns , if needed , can be done as in fig .",
    "[ fig : reduction](c ) .    * clause gadget .",
    "* the @xmath255-th clause gadget contains a special leaf called @xmath259 shown in red in fig .",
    "[ fig : reduction](d ) that is located at an odd distance @xmath260 from at most three leaves , say @xmath258 , @xmath261 , and @xmath262 .",
    "if the clause is incident to two variables , use the turn shown in fig .",
    "[ fig : reduction](c ) as a clause gadget , naming the upper left leaf @xmath259 .",
    "if the @xmath255-th clause is positive , we place all @xmath258 at an even distance from each other , which makes the position of @xmath259 always realizable .",
    "use reflections through the @xmath250-axis for negative clauses .",
    "let @xmath263 denote the number of leaves of the @xmath256-wire .",
    "we set @xmath264    assume that the planar - monotone-3sat instance have a satisfying assignment .",
    "we build @xmath3 as follows . for each variable",
    "assigned ` false ` ( resp . , `",
    "true ` ) add the edges shown as dashed ( resp .",
    ", dotted ) lines of fig .",
    "[ fig : reduction](a ) to @xmath3 . for",
    "each @xmath256-wire add to @xmath3 all dashed lines shown in fig .",
    "[ fig : reduction](b ) , ( c ) and the closest dashed line in fig .  [",
    "fig : reduction](d ) from the @xmath256-wire if the @xmath222-th variable is assigned ` false ` and the @xmath255-th clause is positive ; or if the @xmath222-th variable is assigned ` true ` and the @xmath255-th clause is negative .",
    "add the dotted lines otherwise .",
    "we obtain @xmath3 such that @xmath265 and the graph @xmath1 is 2-edge - connected .",
    "assume that there exists @xmath3 such that @xmath265 and the graph @xmath1 is 2-edge - connected .",
    "we call _ @xmath256-leaves _ the set of all leaves in the @xmath256-wire and the two leaves in the clause gadget adjacent to it .",
    "since the number of @xmath256-leaves is odd and the closest point from any such leaf is at least 1 unit away , the minimum length required to have at least an edge in @xmath3 incident to each leaf is @xmath266 . since @xmath192 is the sum of all such lower bounds , then : ( i ) the subset of @xmath3 that is incident to a @xmath256-leaf must have exactly @xmath266 unit length edges ; and ( ii ) the subset of @xmath3 that is incident to the @xmath222-th variable gadget must be either the set of dashed or dotted lines in fig .  [ fig : reduction](a ) .",
    "assume that @xmath3 contains the dotted lines in fig .",
    "[ fig : reduction](a ) in the @xmath222-th variable gadget .",
    "then , for a positive clause @xmath255 , @xmath3 must contain an edge between @xmath258 and a point in the maximal 2-connected component of @xmath5 that contains @xmath257 , or else the bridge in @xmath5 that connects such 2-connected component will remain a bridge in @xmath1 .",
    "therefore , all other @xmath256-leaves must be matched in order to satisfy ( i ) .",
    "since @xmath1 is 2-edge - connected , @xmath259 is connected to some other leaf .",
    "then , if it is connected to a @xmath256-leaf , the @xmath222-th variable gadget uses the dotted edges ( ` true ` ) . by applying the symmetric argument for negative clauses",
    ", all such clauses must be incident to a variable gadget using dashed edges ( ` false ` ) .",
    "then we have also a satisfying assignment for the planar - monotone-3sat instance .    given a ( disconnected ) pslg @xmath0 and @xmath267 , finding a set @xmath3 such that @xmath248 and @xmath1 is a 2-connected pslg is np - hard .    the same reduction used in the proof of theorem  [ thm : hardness ] also works for 2-connectivity .",
    "notice that the length required by leaves is the same and any @xmath3 , @xmath248 , that augments @xmath5 to 2-edge - connected also achieves 2-connectivity .",
    "[ thm : dynamic ] let @xmath124 be a connected pslg with @xmath125 and no three collinear vertices .",
    "then there exists a sequence of edge insertion and deletion operations that transforms @xmath5 into a planar straight - line cycle @xmath268 such that @xmath7 and that every intermediate graph is a connected planar straight - line graph of weight at most @xmath8 .",
    "these bounds are the best possible .",
    "[ [ phase2-from - an - arbitrary - tree - to - a - tree - in - the - delaunay - triangulation . ] ] phase  2 : from an arbitrary tree to a tree in the delaunay triangulation .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +      lawson  @xcite showed that every triangulation of a point set @xmath20 can be transformed into the delaunay triangulation of @xmath20 , denoted @xmath274 , through a sequence of edge flips .",
    "if an edge @xmath109 in a triangulation is adjacent to two triangles , @xmath275 and @xmath276 , where @xmath277 is in convex position , then an _ edge flip _ replaces edge @xmath109 by a new edge @xmath278 , and produces a new triangulation on @xmath20 .",
    "lawson  @xcite also showed that there is a sequence of so - called _ delaunay flips _",
    ", where point @xmath279 lies in the interior of the circumcircle of @xmath280 .",
    "the length of the flip sequence is @xmath234 ; this bound is the best possible  @xcite , but finding the minimum length of flip - sequence between two triangulations is apx - hard  @xcite .",
    "let @xmath281 be a sequence of triangulations on @xmath20 , where @xmath282 and @xmath283 is obtained from @xmath284 by an edge flip described above for @xmath285 .",
    "we now describe how to construct a sequence of spanning trees @xmath286 , where @xmath287 is a spanning tree in the triangulation @xmath283 ; and @xmath287 is obtained from @xmath288 by an edge insertion followed by an edge deletion ( such that the intermediate graph is also a connected pslg ) .",
    "suppose that @xmath283 is obtained from @xmath284 by an edge flip that replaces @xmath109 by @xmath278 .",
    "we distinguish two cases :      assume that @xmath293 . since edge @xmath109 violates the delaunay condition , point @xmath279 lies in the interior of the circumcircle of @xmath280 .",
    "consequently , @xmath294 ( equality would imply that @xmath295 , @xmath17 , @xmath296 , and @xmath279 are cocircular ) . without loss of generality ,",
    "assume @xmath297 , that is @xmath298 is an obtuse triangle . by the sine theorem , @xmath109 is the longest side of @xmath298 , and so @xmath299 .",
    "the deletion of edge @xmath109 disconnects the spanning tree @xmath288 into two trees in which @xmath295 and @xmath17 are in different components .",
    "vertex @xmath296 is in one of the two components .",
    "if @xmath296 and @xmath295 are in the same component , then @xmath296 and @xmath17 are in different components and @xmath300 is a spanning tree .",
    "otherwise @xmath296 and @xmath295 are in different components , and @xmath301 is a spanning tree .",
    "since the edge @xmath109 was replaced by a shorter edge , @xmath302 or @xmath303 , we have @xmath304 .",
    "note also that the intermediate graph , @xmath305 or @xmath305 , is connected and its length is bounded above by @xmath306 .",
    "[ [ phase3-from - an - arbitrary - tree - in - the - delaunay - triangulation - to - rm - mstv . ] ] phase  3 : from an arbitrary tree in the delaunay triangulation to @xmath19 .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to transform @xmath307 into the @xmath19 , we add the @xmath19 edges to @xmath307 one at a time as described below .",
    "it is well known that @xmath274 contains the euclidean spanning tree @xmath19 of @xmath20 as a subgraph .",
    "let @xmath308 be an edge in @xmath19 that is not in @xmath307 .",
    "add @xmath308 to @xmath307 creating a connected graph @xmath309 whose total weight is at most @xmath310 . since @xmath307 is a spanning tree ,",
    "there exist exactly one cycle in @xmath309 and it contains @xmath308 .",
    "delete a longest edge of such cycle which results in a connected graph @xmath311 that weighs at most @xmath312 . by repeating this procedure at most @xmath313 times ,",
    "we obtain @xmath314 .",
    "given a graph @xmath315 , pick an arbitrary edge @xmath26 of the convex hull of @xmath20 that is not present in @xmath316 .",
    "let @xmath53 be the unique path between @xmath28 and @xmath29 in @xmath316 , where @xmath317 by the triangle inequality .",
    "augment @xmath316 with the edge @xmath26 into a pslg @xmath272 , and let @xmath318 be the planar straight - line cycle formed by @xmath26 and @xmath319 .",
    "we apply a sequence of edge insertion and deletions to @xmath272 . in each step",
    "@xmath222 , we maintain a pslg @xmath320 , a weakly simple polygon @xmath321 whose edges are contained in @xmath287 , and an ordering among the multi - edges of @xmath322 ( any multi - edge of @xmath322 is present as a single edge in @xmath287 ) , such that all edges induced by @xmath323 are in @xmath324 and @xmath325 ( where the weight of any multi - edges of @xmath322 are counted with multiplicity , all other edges in @xmath326 are counted once ) .",
    "the vertex set @xmath323 will grow monotonically until @xmath327 .    given @xmath287 and @xmath322",
    ", we construct @xmath311 and @xmath328 as follows .",
    "assume that @xmath329 .",
    "since @xmath287 is connected , there is a vertex @xmath330 in @xmath322 adjacent to some vertex outside of @xmath322 . in the counterclockwise order of edges incident to @xmath330 there",
    "must exist at least two transitions between edges to vertices in @xmath323 and not in @xmath323 , that is , a pair of consecutive edges @xmath331 and @xmath332 such that @xmath333 and @xmath334,i.e . ,",
    "@xmath335 and @xmath336 .",
    "since no three vertices are collinear , at least one of such pairs forms a convex walk @xmath337 . without loss of generality , assume that @xmath338 and @xmath339 .",
    "an example is shown in fig .",
    "[ fig : phase4 - 5](left ) .",
    "construct @xmath328 from @xmath322 by replacing edge @xmath340 with the path @xmath341 .",
    "similarly , we construct @xmath311 from @xmath287 by adding the geodesic path @xmath342 ( if an edge of @xmath342 is already present in @xmath287 , we increment its multiplicity by one ) , and then deleting ( one copy of ) the edge @xmath340 , and any other edges that are induced by @xmath343 but not present in @xmath344 .    by the triangle inequality we have @xmath345 .",
    "we then have @xmath346 , since we added @xmath342 and removed ( one copy of ) @xmath340 .",
    "each step strictly increased the number of vertices in @xmath323 .",
    "consequently , phase  4 executes at most @xmath347 times and the resulting graph @xmath348 contains the weakly simple polygon @xmath349 @xmath350 .",
    "[ [ phase5-from - a - weakly - simple - polygon - c - to - a - simple - polygon - p . ] ] phase  5 : from a weakly simple polygon @xmath85 to a simple polygon @xmath319 .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let @xmath351 be a weakly simple polygon on vertex set @xmath352 and edge multiset @xmath353 .",
    "( since no three vertices are collinear , no vertex lies in the relative interior of an edge ) .",
    "we construct a sequence of edge insertions and deletions that transform @xmath351 into a simple polygon on @xmath20 , while monotonically decreasing the total edge length ( counted with multiplicity ) of intermediate weakly simple polygons @xmath322 until @xmath322 becomes hamiltonian .",
    "this monotonicity ensures that the algorithm terminates .",
    "we describe a generic step of the algorithm , where @xmath354 , @xmath355 , is a weakly simple polygon with vertex set @xmath327 .",
    "if every vertex has multiplicity one , then @xmath322 is a simple polygon , and our algorithm is complete .",
    "otherwise , let @xmath110 be a vertex of multiplicity two or higher .",
    "see fig .",
    "[ fig : phase4 - 5 ] for examples .",
    "since no three vertices are collinear , any two consecutive edges of @xmath322 define a convex and a concave angle @xmath356 and @xmath357 .",
    "let @xmath223 , @xmath358 , be an index such that @xmath359 and @xmath360 is minimal .",
    "construct @xmath328 from @xmath322 by replacing the walk @xmath361 with @xmath362 .",
    "the minimality of the angle guarantees that @xmath328 is a weakly simply polygon , and the triangle inequality yields @xmath363 , as required .",
    "we now show our lower bounds , proving that the upper bound @xmath364 on the length of the output and @xmath8 on the length of all intermediate graphs are the best possible . for every @xmath134 ,",
    "let @xmath365 be a graph with 4 vertices @xmath136 , @xmath137 , @xmath138 , and @xmath139 , and edge set @xmath140 ; depicted in figure [ fig:3 ] .",
    "we have @xmath366 .",
    "an @xmath367 of these four points is the path @xmath368 , with @xmath369 .",
    "the graph @xmath135 is a path , which is not 2-connected .",
    "no edge of @xmath135 can be deleted without disconnecting the graph , and only @xmath144 or @xmath145 can be inserted without introducing crossings , each of which has length 1 .",
    "hence the length of the 2nd graph in the sequence leading to 2-connectivity is @xmath370 , which tends to @xmath8 when @xmath371 goes to 0 .",
    "every 2-connected graph @xmath6 contains at least two edges between @xmath372 and @xmath373 , and the length of any edge between these vertex sets is at least 1 . if @xmath129 contains exactly two edges between @xmath372 and @xmath373 , then it must contain the edges @xmath374 and @xmath375 .",
    "consequently , every 2-connected graph @xmath6 satisfies @xmath376 , and this bound is attained for the cycle @xmath368 .",
    "we have @xmath377 , and the ratio @xmath378 is the best possible .",
    "s.  dobrev , e.  kranakis , d.  krizanc , o.  morales ponce , and l.  stacho , approximating the edge length of 2-edge connected planar geometric graphs on a set of points . in _ proc .",
    "10th latin _ , lncs 7256 , springer , 2012 , pp ."
  ],
  "abstract_text": [
    "<S> we consider edge insertion and deletion operations that increase the connectivity of a given planar straight - line graph ( pslg ) , while minimizing the total edge length of the output . </S>",
    "<S> we show that every connected pslg @xmath0 in general position can be augmented to a 2-connected pslg @xmath1 by adding new edges of total euclidean length @xmath2 , and this bound is the best possible . </S>",
    "<S> an optimal edge set @xmath3 can be computed in @xmath4 time ; however the problem becomes np - hard when @xmath5 is disconnected . </S>",
    "<S> further , there is a sequence of edge insertions and deletions that transforms a connected pslg @xmath0 into a planar straight - line cycle @xmath6 such that @xmath7 , and the graph remains connected with edge length below @xmath8 at all stages . </S>",
    "<S> these bounds are the best possible . </S>"
  ]
}