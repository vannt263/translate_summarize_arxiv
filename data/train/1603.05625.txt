{
  "article_text": [
    "we denote by @xmath4 $ ] first - order logic with the order relation @xmath5 , interpreted in finite words over a finite alphabet @xmath6 variables in first - order formulas are interpreted as positions in a word , and for each letter @xmath7 there is a unary predicate @xmath8 interpreted to mean ` the letter in position @xmath2 is @xmath1 ' . thus sentences in this logic define properties of words , or , what is the same thing , languages @xmath9 the logic @xmath4 $ ] over words has been extensively studied , and has many equivalent characterizations in terms of temporal logic , regular languages , and the algebra of finite semigroups .",
    "( see , for instance ,  @xcite and the many references cited therein . )",
    "it is well known that every sentence of @xmath4 $ ] is equivalent to one using only three variables , but that the family of languages definable with two - variable sentences is strictly smaller @xcite .",
    "the fragment @xmath0,$ ] consisting of the two - variable formulas , has also been very thoroughly investigated , and once again , there are many equivalent characterizations @xcite .",
    "the reason @xmath0 $ ] is strictly contained in @xmath4 $ ] is that one can not express ` betweenness ' with only two variables .",
    "more precisely , the following predicate @xmath10 which asserts that there is an occurrence of the letter @xmath1 strictly between @xmath2 and @xmath11 is not expressible using only two variables .",
    "let us denote this predicate , which has two free variables , by @xmath12 and the resulting logic by .",
    "what properties can we express when we adjoin these new predicates to @xmath0 $ ] ?",
    "the first obvious question to ask is whether we recover all of @xmath4 $ ] in this way .",
    "the answer , as we shall see , is ` no ' , but we will give a much more precise description .",
    "the present article is a study of this extended two - variable logic .",
    "our investigation is centered around two quite different themes .",
    "one theme investigates several different logics , based in @xmath4 $ ] as well as in temporal logic @xmath13 for expressing this betweenness , and establishes their expressive equivalence .",
    "we explore the complexity of satisfiability checking in these logics as a measure of their descriptive succinctness .",
    "15cmll > lll complexity / variety & * ap * & * w * & * da@xmath14d * & * da * + nonelementary & @xmath15 $ ] & & & + & & , & & + & & , & ( binary  notation ) & + & & , & & + & & & & + & & & & + & & & & ( unbounded  alphabet ) + & & , & & + & & & & + & & & & + & & & & ( bounded  alphabet ) , + & & & & +    the second theme is devoted to determining , in a sense that we will make precise , the exact expressive power of this logic .",
    "here we draw on tools from the algebraic theory of semigroups .    owing to considerations of length , we will for the most part confine ourselves to careful statements of our main results , and provide only outlines of the proofs , omitting some technical details .    in section  [ basicproperties ]",
    "we will give the precise definition of our logic @xmath16$\\/}}$ ] ( although there is not much more to it than what we have written in this introduction ) .",
    "we introduce a related logic which enforces quantitative constraints on counts of letters , and we show that it has the same expressive power , although it can result in formulas that are considerably more succinct . in addition , we introduce two temporal logics , one qualitative and one quantitative , but again with the same expressive power as our original formulation .    in section  [ kamalparitosh ]",
    "we determine the complexity of formula satisfiability for each of these logics .",
    "section  [ andreashoward ] is devoted to a characterization of the expressive power of this logic in terms of the algebra of finite semigroups .",
    "this builds on earlier algebraic studies of the regular languages definable in @xmath0 $ ] @xcite , and makes critical use of the algebraic theory of finite categories , as developed by tilson  @xcite .",
    "we find an effective necessary condition for a language to be definable in .",
    "we conjecture that this condition is also sufficient , and prove that it is sufficient for languages over a two - letter alphabet .",
    "one consequence is that we are able to determine effectively whether a given formula of @xmath4 $ ] over a two - letter alphabet is equivalent to a formula in the new logic .",
    "we use these results to show that is strictly less expressive than @xmath4.$ ] we also provide a detailed study of the quantifier alternation depth ( or , what is more or less the same thing , the so - called ` dot - depth ' ) of languages definable in this logic .",
    "table [ tab : results ] gives a map of our results and compares them to those of previous related work .",
    "et al . _",
    "@xcite as well as weis and immerman @xcite have explored logics and , as well as matching temporal logics and their decision complexities .",
    "thrien and wilke  @xcite found characterizations of the expressive power of these same logics , using algebraic methods .",
    "we find that our new logics are more expressive but this comes at the cost of some computational power .",
    "some counting extensions of full @xmath17 $ ] have been studied by laroussinie _",
    "@xcite , and by alur and henziger as discrete time metric temporal logic @xcite .",
    "sketches of the proofs of the main results appear in section  [ proofsketches ] .",
    "@xmath4 $ ] is first - order logic interpreted in words over a finite alphabet @xmath18 , with a unary predicate @xmath19 for each @xmath20 interpreted to mean that the letter in position @xmath2 is @xmath21 if @xmath22 is a sentence of @xmath4,$ ] then the set of words @xmath23 such that @xmath24 is a language in @xmath25 in fact a regular language    for each @xmath7 we adjoin to this logic a _ binary _ predicate @xmath26 which is interpreted to mean @xmath27 this predicate can not be defined in ordinary first - order logic over @xmath5 without introducing a third variable .",
    "we will investigate the fragment , obtained by restricting to formulas that use both the unary and binary @xmath1 predicates , along with @xmath28 but use only two variables .",
    "there is an even simpler predicate that is not expressible in two - variable logic that we could have adjoined : this is the successor relation @xmath29 the logic @xmath0 $ ] supplemented by successor , which we denote by @xmath30 $ ] has also been extensively studied , and the kinds of questions that we take up here for have already been answered for @xmath30.$ ] ( see , for example ,  @xcite ) .",
    "* example .",
    "* the successor relation @xmath31 is itself definable in , by the formula @xmath32 as a result , we can define the set @xmath33 of words over @xmath34 in which there is no occurrence of two consecutive @xmath35 s by a sentence of .",
    "we can similarly define the set of words without two consecutive @xmath1 s . since we can also say that the first letter of a word is @xmath1 ( by @xmath36 and that the last letter is @xmath37 we can define the language @xmath38 in .",
    "this language is not , however , definable in @xmath39 $ ] .",
    "* example .",
    "* let @xmath40 be the language defined by the regular expression @xmath41 this language is definable in by the sentence @xmath42 where @xmath43 is @xmath44 and @xmath45 is @xmath46 as we shall see further on , this language is not definable in , so our new logic has strictly more expressive power than .",
    "* example .",
    "* has the ability to represent an @xmath47-bit counter ( modulo @xmath48 ) in a word and to assert properties based on the counter value .",
    "this is done by having successive substrings @xmath49 of length @xmath47 , with @xmath50 representing the least significant bit of the counter , separated by a marker ( denoted here by letter @xmath51 ) .",
    "we use two letters @xmath52 and @xmath53 for the bit values , which the @xmath54 will range over .",
    "the representation of an @xmath47-bit constant is described by the @xmath55 size formula : @xmath56 where @xmath57 is defined by @xmath58    clearly each specific number such as @xmath52 , @xmath59 or a threshold value can be defined by an @xmath55 formula .",
    "after the number ends we will have a marker symbol again to begin the next number .",
    "the formula @xmath60 jumps from start of one number to the next one .",
    "the @xmath61 formula @xmath62 below checks equality of two numbers by comparing the @xmath47 bits in succession .",
    "we use the fact that the bit string always has @xmath47 bits over the letters @xmath63 and if we do not have @xmath52 where we expect a bit then we must have @xmath53 .",
    "@xmath64    by small variations of this formula , we can define formulae @xmath65",
    ", @xmath66 etc , to make other comparisons . incrementing the counter modulo @xmath48",
    "is encoded by an @xmath67 formula @xmath68 which converts a least significant block of @xmath53s to @xmath52s , using @xmath47 disjunctions of @xmath61 formulas .",
    "@xmath69 we can also define @xmath70 which checks that the number at position @xmath3 of the word is obtained by incrementing the number at position @xmath2 by a constant @xmath71 .",
    "in contrast , it is quite difficult to find examples of languages definable in @xmath4 $ ] that are _ not _ definable in .",
    "much of this paper is devoted to establishing methods for generating such examples .",
    "we generalize as follows : let @xmath72 and @xmath73 we define @xmath74 to mean that @xmath75 and that there are at least @xmath76 occurrences of @xmath1 between @xmath2 and @xmath77 adding these ( infinitely many ) predicates gives a new logic @xmath78.$ ]    * examples . * the language @xmath79 consists of all words @xmath80 over @xmath81 which have a subword of the form @xmath82 with at least @xmath76 occurrences of @xmath1 .",
    "this can be specified by sentence @xmath83 .",
    "+ threshold logic is quite useful in specifying quantitative properties of systems .",
    "for example , a bus arbiter circuit may have the property that if @xmath84 is continuously on for @xmath85 cycles then there should be at least @xmath86 occurrences of @xmath87 .",
    "this can be specified by @xmath88 .    since @xmath26 is equivalent to @xmath89 @xmath78 $ ] is at least as expressive as . what is less obvious is that the converse is true , albeit at the cost of a large blowup in the quantifier complexity of formulas .",
    "[ thm.invequalsthr ] considered as language classes , @xmath90$\\/}}=fo^2[<,th].\\ ] ]    there is a bit more to this than meets the eye : the predicates @xmath74 for @xmath91 are not themselves expressible by single formulas of , and therefore the proof of theorem  [ thm.invequalsthr ] is not completely straightforward .",
    "we denote by @xmath92$}}$ ] temporal logic with two operators @xmath93 and @xmath94 atomic formulas are the letters @xmath73 formulas are built from atomic formulas by applying the boolean operations @xmath95 and @xmath96 and the modal operators @xmath97 @xmath98    we interpret these formulas in _ marked words _ @xmath99 where @xmath23 and @xmath100 thus @xmath101 if @xmath102 where @xmath103 denotes the @xmath104 letter of @xmath105 boolean operations have the usual meaning .",
    "we define @xmath106 if there is some @xmath107 such that @xmath108 and @xmath109 if there is some @xmath110 with @xmath111    we can also interpret a formula in ordinary , that is , unmarked words , by defining @xmath24 to mean @xmath112 thus temporal formulas , like first - order sentences , define languages in @xmath113 the temporal logic @xmath92$}}$ ] is known to define exactly the languages definable in @xmath0 $ ] @xcite .",
    "we now define new temporal logics by modifying the modal operators @xmath93 and @xmath114 with _",
    "threshold constraints_these are versions of the between predicates @xmath26 and @xmath74 that we introduced earlier .",
    "let @xmath115 a threshold constraint is an expression of the form @xmath116 where @xmath117 and @xmath118 is one of the symbols @xmath119 let @xmath23 and @xmath120 we say that @xmath121 satisfies the threshold constraint @xmath122 if @xmath123 we can combine threshold constraints with boolean operations @xmath124 we define satisfaction of a boolean combination of threshold constraints in the obvious way  that is , @xmath125 satisfies @xmath126 if and only if @xmath121 satisfies @xmath127 or @xmath128 and likewise for the other boolean operations .",
    "if @xmath129 is a boolean combination of threshold constraints , then our new operators @xmath130 and @xmath131 are defined as follows : @xmath132 if there exists @xmath107 such that @xmath121 satisfies @xmath129 and @xmath133 , @xmath134 if and only if there exists @xmath110 such that @xmath135 satisfies @xmath129 and @xmath133 .",
    "* examples .",
    "*    we can express @xmath136 with threshold constraints as @xmath137    we use @xmath138 to denote the ` next ' operator : @xmath139 if and only if @xmath140 we can express this with threshold constraints by @xmath141    we can define the language @xmath142 over the alphabet @xmath34 as the conjunction of several subformulas : @xmath143 says that the first letter is @xmath1 and the second @xmath144 @xmath145 says that no occurrence of @xmath1 after the first letter is immediately followed by another @xmath146 and similarly we can say that no occurrence of @xmath35 is followed immediately by another @xmath144 the formula @xmath147 says that the last letter is @xmath144    it is useful to have boolean combinations of threshold constraints .",
    "the language @xmath79 given in section [ sec : twotwo ] can be defined by @xmath148 .",
    "we denote by @xmath149$}}$ ] temporal logic with these modified operators @xmath130 and @xmath150 where @xmath129 is a boolean combination of threshold constraints .",
    "we also define several fragments of @xmath149$}}$ ] : in @xmath151$}}$ ] we restrict the constraints @xmath129 to be atomic threshold constraints , rather than boolean combinations . in @xmath152$}}$ ] we restrict to constraints of the form @xmath153we call these _ invariant constraints _ and in @xmath154$}}$ ] to boolean combinations of such constraints .",
    "[ thm.tlequivalence ] the logics @xmath151$}},$ ] @xmath149$}},$ ] @xmath152$}},$ ] @xmath154$}},$ ] @xmath78,$ ] and all define the same family of languages .",
    "given a formula in one of these logics , what is the computational complexity of determining whether it has a model , that is , whether the language it defines is empty or not ?",
    "this is the _ satisfiability problem _ for the logic . to determine this",
    ", we require some way to measure the size of the input formula . for formulas containing threshold constraints",
    ", we code the threshold value in binary , so that mention of a threshold constant @xmath71 contributes @xmath155 to the size of the formula .",
    "mention of a subalphabet @xmath156 contributes @xmath157 to the size of the formula .    in the verification literature",
    "( @xcite is relevant for this paper ) the syntax allows a finite set of propositional letters @xmath158 which may or may not simultaneously hold at a position of a word .",
    "this allows us to compactly talk about large alphabets .",
    "one can think of the alphabet @xmath18 as the set of valuations @xmath159 to get finite word models over @xmath18 .",
    "thus the alphabet @xmath18 is given a boolean algebra structure and subsets of @xmath18 are specified using propositions over @xmath158 .",
    "our results below hold for bounded and unbounded alphabets , which may be explicitly specified or symbolically specified by propositions .",
    "[ thm.utlsat ] satisfiability of the temporal logics @xmath160 ( with invariant constraints ) and @xmath161 ( with threshold constraints ) is complete for and , respectively .",
    "[ thm.fo2sat ] satisfiability of the two - variable logics @xmath16$\\/}}$ ] and @xmath162$\\/}}$ ] is -complete .",
    "for further background on the basic algebraic notions in this section , see pin  @xcite .",
    "a _ monoid _ is a set together with an associative multiplication ( that is , it is a _ semigroup _ ) and a multiplicative identity 1 .",
    "all of the languages defined by sentences of @xmath4 $ ] are regular languages .",
    "our characterization of languages in is based on properties of the _ syntactic monoid _",
    "@xmath163 of a regular language @xmath164 this is the transition monoid of the minimal deterministic automaton recognizing @xmath165 and therefore a finite monoid .",
    "equivalently , @xmath163 is the smallest monoid @xmath166 that _ recognizes _",
    "@xmath33 in the following sense : there is a homomorphism @xmath167 and a subset @xmath168 such that @xmath169    let @xmath166 be a finite monoid . an _ idempotent _",
    "@xmath170 is an element satisfying @xmath171 if @xmath172 then there is some @xmath173 such that @xmath174 is idempotent .",
    "this idempotent power of @xmath175 is unique , and we denote it by @xmath176    a finite monoid is _ aperiodic _ if it contains no nontrivial groups , equivalently , if it satisfies the identity @xmath177 for all @xmath178 we denote the class of aperiodic finite monoids by @xmath179 @xmath180 is a _ variety _ of finite monoids : this means that it is closed under finite direct products , submonoids , and quotients .",
    "a well - known theorem , an amalgam of results of mcnaughton and papert  @xcite and of schtzenberger  @xcite , states that @xmath181 is definable in @xmath4 $ ] if and only if @xmath182 this situation is typical : under very general conditions , the languages definable in fragments of @xmath4 $ ] can be characterized as those whose syntactic monoids belong to a particular variety @xmath183 of finite monoids.(see straubing  @xcite . )",
    "if @xmath166 is a finite monoid and @xmath184 we write @xmath185 if @xmath186 for some @xmath187 this is a preorder , the so - called @xmath188-ordering on @xmath189 if @xmath170 is idempotent , then we denote by @xmath190 the submonoid of @xmath166 generated by elements @xmath175 such that @xmath191 observe that @xmath192 is a subsemigroup of @xmath193 in fact a monoid whose identity element is @xmath194    if @xmath183 is a variety of finite monoids , then we can form a new variety @xmath195 as follows : @xmath196    [ prop.emee ] @xmath195 is a variety of finite monoids .",
    "let @xmath197 denote the variety consisting of the trivial one - element monoid alone .",
    "we define the class @xmath198 that is , @xmath199 consists of those finite monoids @xmath166 for which @xmath200 for all idempotents @xmath201 by proposition  [ prop.emee ] , @xmath199 is a variety of finite monoids .",
    "the variety @xmath199 was introduced by schtzenberger  @xcite and it figures importantly in work on two - variable logic .",
    "thrien and wilke showed that a language @xmath33 is definable in @xmath0 $ ] if and only if @xmath202  @xcite .",
    "* example . *",
    "consider the language @xmath203 consisting of all words whose first and last letters are the same .",
    "the syntactic monoid of @xmath33 contains five elements @xmath204 with multiplication given by @xmath205 for all @xmath206 observe that every element of @xmath163 is idempotent . for every @xmath207 @xmath208 and",
    "if @xmath209 then @xmath210 thus , @xmath211 the logical characterization then tells us that @xmath33 is defined by a sentence of @xmath0.$ ] indeed , @xmath33 is defined by @xmath212    * example .",
    "* consider the language @xmath38 .",
    "we claimed earlier that it is not definable in @xmath0.$ ] we can prove this using the algebraic characterization of the logic .",
    "the elements of the syntactic monoid @xmath166 are @xmath213 the multiplication is determined by the rules @xmath214 @xmath215 and @xmath216 then @xmath217 and @xmath218 are idempotents , and @xmath219 thus @xmath220 which shows that @xmath221 and thus @xmath38 is not definable in @xmath0.$ ] .",
    "* example .",
    "* now consider the language given by the regular expression @xmath222 we saw earlier that it is definable in , and claimed that it could not be defined in .",
    "thrien and wilke  @xcite also give an algebraic characterization of : let @xmath223 be subsemigroup of the syntactic monoid of @xmath33 generated by nonempty words ( the _ syntactic semigroup _ of @xmath224 ) .",
    "@xmath33 is definable in if and only if for each idempotent @xmath225 the monoid @xmath226 is in * da*. for the language under discussion , let us denote the image of a word @xmath80 in the syntactic monoid by @xmath227 then @xmath228 is idempotent , and @xmath229 is an idempotent in @xmath230 let @xmath231 then @xmath232 and @xmath233 so @xmath234 we now have @xmath235 since @xmath236 is the zero of @xmath237 thus @xmath238 contains more than one element , so @xmath239 consequently this language , while definable in , can not be defined in .",
    "[ thm.maintheorem ] let @xmath9 if @xmath33 is definable in then @xmath240 further , if @xmath241 and @xmath242 then @xmath33 is definable in .",
    "we conjecture that sufficiency of the condition holds for all finite alphabets , not just those with two letters .",
    "we can prove from rather abstract principles that there is some variety @xmath243 of finite monoids that characterizes definability in in this way .",
    "our results imply that @xmath243 coincides with @xmath244 for monoids generated by two elements .",
    "the theorem provides an effective method for determining whether a given language over @xmath245 ( given , say , by a finite automaton that recognizes it , or by a regular expression ) is definable in , since we can compute the multiplication table of the syntactic monoid , and check whether it belongs to @xmath246    * example . * in our example above , where @xmath247 all the submonoids @xmath192 are either trivial , or are two - element monoids isomorphic to @xmath248 which is in * da*. thus @xmath38 is definable in , as we saw earlier by construction of a defining formula .",
    "the following corollary to our main theorem answers our original question of whether @xmath4 $ ] has strictly more expressive power than . to prove it , we need only calculate the syntactic monoid of the given language , and verify that it is in * ap * but not in @xmath246    [ cor.strictinclusion ] the language given by the regular expression @xmath249 is definable in @xmath4 $ ] but not in .",
    "we are interested in how sits inside @xmath4.$ ] one way to measure the complexity of a language in @xmath4 $ ] is by the smallest number of alternations of quantifiers required in a defining formula , that is the smallest @xmath76 such that the language is definable by a boolean combination of sentences of @xmath250.$ ] we will call this the _ alternation depth _ of the language .",
    "( this is closely related to the _ dot - depth _ , which can be defined the same way , but with slightly different base of atomic formulas . )    [ thm.alternationdepth ]    the alternation depth of languages in is unbounded . if @xmath241 then the alternation depth of languages in @xmath251 definable in is bounded above by 3 .    for alphabets of more than two letters ,",
    "we conjecture that the alternation depth is also bounded by a linear function of @xmath252    we stress that the alternation depth is measured with respect to arbitrary first - order sentences , not the variable - restricted sentences of .",
    "we write @xmath254 if these two marked words satisfy exactly the same formulas of   with one free variable of quantifier depth no more than @xmath255    we overload this notation , and also write @xmath256 if @xmath257 and @xmath258 are ordinary words that satisfy exactly the same _ sentences _ of with quantifier depth @xmath259    let @xmath260 the game is played for @xmath76 rounds in two marked words @xmath261 and @xmath262 with a single pebble on each word . at the start of the game ,",
    "the pebbles are on the marks @xmath263 and @xmath264 in each round , the pebble is moved to a new position in both words , producing two new marked words .",
    "suppose that at the beginning of a round , the marked words are @xmath265 and @xmath266 player 1 selects one of the two words and moves the pebble to a different position .",
    "let s say he picks @xmath267 and moves the pebble to @xmath268 with @xmath269 player 2 moves the pebble to a new position @xmath270 in @xmath271 this response is required to satisfy the following properties :    1 .",
    "the moves are in the same direction : @xmath272 iff @xmath273 2 .",
    "the letters in the destination positions are the same : @xmath274 3 .",
    "the set of letters jumped over is the same  that is , assuming @xmath272 : @xmath275    player 2 wins the 0-round game if @xmath276 otherwise , player 1 wins the 0-round game .",
    "player 2 wins the @xmath76-round game for @xmath277 if she makes a legal response in each of @xmath76 successive rounds , otherwise player 1 wins .",
    "the following theorem is the standard result about ehrenfeucht - frass games adapted to this logic .",
    "[ thm.game_equiv ] @xmath278 if and only if player 2 has a winning strategy in the @xmath76-round game in the two marked words .",
    "we now define the @xmath76-round game in ordinary unmarked words @xmath279 player 1 begins in the first round by placing a pebble on a position in one of the two words , and player 2 must respond on a position in the other word containing the same letter .",
    "thereafter , they play the game in the two marked words that result for @xmath280 rounds .",
    "the following is a direct consequence of the preceding theorem .",
    "[ cor.game_equiv ] player 2 has a winning strategy in the @xmath76-round game in @xmath257 and @xmath258 if and only if @xmath281      we introduce a game characterizing @xmath78.$ ] let @xmath282 be a function from @xmath18 to the positive integers .",
    "we consider formulas in @xmath78 $ ] in which for all @xmath283 every occurrence of the predicate @xmath74 has @xmath284 let s call these _ @xmath282-bounded _ formulas .",
    "the rules of the game are the same as those for the game , with this difference : at each move , for each @xmath283 the number @xmath285 of @xmath1 s jumped by player 1 must be equivalent , threshold @xmath286 to the number @xmath287 of @xmath1 s jumped by player 2 .",
    "that is , either @xmath285 and @xmath287 are both greater than or equal to @xmath286 or @xmath288 observe that the game for is the case @xmath289 for all @xmath73    let us define , for marked words @xmath290 @xmath291 if and only if they satisfy exactly the same @xmath282-bounded formulas of quantifier depth less than or equal to @xmath255 as with the case of , we also have a version of both the game and the equivalence relation for ordinary words .    it is easy to show that the analogues of theorem  [ thm.game_equiv ] and corollary  [ cor.game_equiv ] hold in this more general setting : player 2 has a winning strategy in the @xmath76-round game in @xmath292 if and only if @xmath293 and likewise for ordinary words .",
    "let @xmath294 be two functions from @xmath18 to the natural numbers that differ by one in the following sense : @xmath295 for exactly one @xmath296 and @xmath297 for all @xmath298 obviously @xmath299 is finer than @xmath300 what we will show precisely is this : @xmath301 refines @xmath302 we prove refinement by a simple game argument , showing that if player 2 has a winning strategy in the @xmath303-move @xmath282 game in @xmath304 then she has a strategy in the @xmath76-move @xmath305 game in the same two words",
    ".    this will give the desired result , because any threshold function @xmath282 can be built from the base threshold function that assigns 1 to each letter of the alphabet by a sequence of steps in which we add 1 to the threshold of each letter .",
    "so it follows by induction that for any @xmath306 @xmath307 is refined by @xmath308 where @xmath309 in particular , each @xmath307-class is definable by a sentence , although the quantifier depth of this sentence is exponential in the thresholds used .",
    "so given a fixed @xmath78 $ ] sentence @xmath22 there is a threshold such that the sentence is @xmath282-bounded .",
    "let @xmath76 be the quantifier depth of @xmath22 , then the sentence can not distinguish words that are in the same equivalence class with respect to @xmath307 . as there are only finitely many @xmath282-bounded sentence of quantifier depth at most @xmath76 , there are only finitely many such equivalence classes .",
    "by the argument above we can find a  sentence for each equivalence class accepted by @xmath22 and the disjunction of these will be a sentence in  that accepts the same models as @xmath22 .    observe that this argument applies to both ordinary words and marked words , and thus each formula of @xmath78 $ ] with one free variable can similarly be replaced by an equivalent formula of .      in terms of language classes",
    ", we obviously have @xmath310$}}\\subseteq{\\mbox{$\\mathit{{\\mbox{$\\mathit{binvtl}$}}}[{\\textsf{f}},{\\textsf{p}}]$}}\\subseteq{\\mbox{$\\mathit{{\\mbox{$\\mathit{bthtl}$}}}[{\\textsf{f}},{\\textsf{p}}]$}},\\ ] ] and @xmath310$}}\\subseteq{\\mbox{$\\mathit{{\\mbox{$\\mathit{thtl}$}}}[{\\textsf{f}},{\\textsf{p}}]$}}\\subseteq{\\mbox{$\\mathit{{\\mbox{$\\mathit{bthtl}$}}}[{\\textsf{f}},{\\textsf{p}}]$}}.\\ ] ]    so it is enough to show that @xmath149$}}\\subseteq{\\mbox{$\\mathit{{\\mbox{$\\mathit{invtl}$}}}[{\\textsf{f}},{\\textsf{p}}]$}}.$ ] in performing these translations , we will only discuss the future modalities , since the past modalities can be treated the same way .",
    "we can directly translate any formula in @xmath149$}}$ ] into an equivalent formula of @xmath78 $ ] with a single free variable @xmath2 : a formula @xmath311 where @xmath129 is a boolean combination of threshold constraints , is replaced by a quantified formula @xmath312 , where @xmath313 is a boolean combination of formulas @xmath74 and @xmath314 is the translation of @xmath315    we know from theorem  [ thm.invequalsthr ] that any formula of @xmath78 $ ] can in turn be translated into an equivalent formula of . furthermore , is equivalent to @xmath154$}}$ ]",
    ": a simple game argument shows that equivalence of marked words with respect to @xmath154$}}$ ] formulas of modal depth @xmath76 is precisely the relation @xmath316 of equivalence with respect to formulas with quantifier depth @xmath255    so it remains to show that @xmath154$}}\\subseteq { \\mbox{$\\mathit{{\\mbox{$\\mathit{invtl}$}}}[{\\textsf{f}},{\\textsf{p}}]$}}$ ] : we do this by translating @xmath317 , where @xmath129 is a boolean combination of constraints of the form @xmath318 into a formula that uses only single constraints of this form .",
    "we can rewrite the boolean combination as the disjunction of conjunctions of constraints of the form @xmath319 and @xmath320 since , easily , @xmath321 is equivalent to @xmath322 we need only treat the case where @xmath129 is a conjunction of such constraints .",
    "we illustrate the general procedure for translating such conjunctions with an example .",
    "suppose @xmath18 includes the letters @xmath323 how do we express @xmath324 where @xmath129 is @xmath325 ?",
    "the letters @xmath35 and @xmath71 must appear in the interval between the current position and the position where @xmath22 holds .",
    "suppose that @xmath35 appears before @xmath71 does .",
    "we write this as @xmath326 we take the disjunction of this with the same formula in which the roles of @xmath35 and @xmath71 are reversed .",
    "satisfiability of is -hard @xcite since it includes .",
    "we observe that can be translated into in polynomial time , hence its satisfiability is -complete @xcite .",
    "using a threshold constant @xmath327 , written in binary in the formula with size @xmath328 , the @xmath327-iterated next operator @xmath329 can be expressed in , so we obtain that its satisfiability is -hard @xcite . by an exponential translation of into ( the proof of theorem  [ thm.invequalsthr ]",
    "shows that such translation exists ) , or alternately by a polynomial translation into @xcite ) , its satisfiability is -complete .",
    "we begin by reducing the exponential corridor tiling problem to satisfiability of .",
    "it is well known that this problem is -complete @xcite .",
    "[ [ the - exponential - corridor - tiling - problem ] ] the exponential corridor tiling problem : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    an instance @xmath166 is given by @xmath330 where @xmath331 is a finite set of tile types with @xmath332 , the horizontal and vertical tiling relations @xmath333 , and @xmath328 is a natural number .",
    "a solution of the @xmath327 sized corridor tiling problem is a natural number @xmath175 and map @xmath334 from the grid of points @xmath335 to @xmath331 such that : + @xmath336 , @xmath337 and for all @xmath338 , @xmath339 on the grid , + @xmath340 and @xmath341 .    [ lem.tiling ] satisfiability of the two - variable logic is -hard .",
    "given an instance @xmath166 as above of a corridor tiling problem , we encode it as a sentence @xmath342 of size @xmath343 with a modulo @xmath327 counter @xmath344 encoded serially with @xmath345 letters as in the example in section [ sec : examples ] .",
    "the marker now represents a tile and a colour from @xmath346 , @xmath347 and @xmath348 ( requiring subalphabet size @xmath349 ) .",
    "thus the @xmath350 tiling is represented by a word of length @xmath351 over an alphabet of size @xmath352 .",
    "the claim is that @xmath166 has a solution iff @xmath342 is satisfiable .",
    "the sentence @xmath353$\\/}}$ ] is a conjunction of the following properties .",
    "the key idea is to cyclically use monadic predicates @xmath354 for assigning colours to rows .",
    "* each marker position has exactly one tile and one colour . *",
    "the starting tile is @xmath355 , the initial colour is @xmath346 , the initial counter bits read @xmath356 , the last tile is @xmath357 . *",
    "tile colour remains same in a row and it cycles in order @xmath358 on row change . * the counter increments modulo @xmath327 in consecutive positions .",
    "* for horizontal compatibility we check : + @xmath359 . * for vertical compatibility , we check that @xmath360 are in adjacent rows by invariance of lack of one colour .",
    "we check that @xmath2 and @xmath3 are in the same column by checking that the counter value ( which encodes column number ) is the same : + @xmath361 .",
    "it is easy to see that we can effectively translate an instance @xmath166 of the exponential corridor tiling problem into @xmath342 in time polynomial in @xmath328 .",
    "the translation preserves satisfiability .",
    "hence , by reduction , satisfiability of @xmath16$\\/}}$ ] over bounded as well as unbounded alphabets is @xmath362-hard .",
    "[ lem.reduction ] there is a satisfiability - preserving polynomial time reduction from the logic to the logic .",
    "we give a polytime reduction from to which preserves satisfiability .",
    "we consider in the extended syntax a threshold constraint @xmath363 where @xmath1 is a letter or a proposition and @xmath76 is a natural number .",
    "the key idea of the reduction is illustrated by the following example .",
    "for each threshold constraint @xmath129 of the form @xmath364 , we specify a _ global _ modulo @xmath48",
    "counter @xmath365 using monadic predicates @xmath366 .",
    "( this requires a symbolic alphabet where several such predicates may be true at the same position . ) by `` global '' we mean that the counter @xmath365 has value @xmath52 at the beginning of the word and it increments whenever @xmath19 is true .",
    "this is achieved using the formula : @xmath367 also , we have three colour predicates @xmath368 , @xmath369 and @xmath370 where the colour at the beginning of the word is @xmath371 , and we change the colour cyclically each time the counter @xmath365 resets to zero by overflowing . as in the proof of lemma  [ lem.tiling ] , invariance of lack of one colour and",
    "the fact that @xmath360 have different colours ensures that the counter overflows at most once .",
    "we replace the constraint @xmath129 of the form @xmath364 by an equisatisfiable formula : @xmath372 more generally , we define a polynomial sized quantifier free formula @xmath373 for any given constant @xmath71 with @xmath374 using propositions @xmath375 and three colour predicates .",
    "the formula asserts that @xmath376 .",
    "using this we can encode the constraint @xmath377 for any @xmath71 . similarly to @xmath378 , we can also define formulae @xmath379 to denote that its counter @xmath380 , @xmath381 to denote that @xmath382 , etc .",
    "hence any form of threshold counting predicate can be replaced by an equisatisfiable formula , with all these global counters running from the beginning of the word to the end .",
    "thus we have a polynomially sized equisatisfiable reduction from to .    to complete the proof of theorem  [ thm.fo2sat ] , the upper bound for comes from lemma [ lem.reduction ] , an exponential translation from to using an order type argument similar to @xcite ( our theorem  [ thm.tlequivalence ] also points to this equivalence ) , and the upper bound for ( theorem  [ thm.utlsat ] ) .",
    "here we outline the proof of the direction of theorem  [ thm.maintheorem ] stating that every language definable in has its syntactic monoid in @xmath246 this is all we will need to prove corollary  [ cor.strictinclusion ] and the first assertion of theorem  [ thm.alternationdepth ] .",
    "we first use a game argument to prove the following fact :    [ lem.morphismclosure ] lef @xmath383 @xmath384 finite alphabets , and @xmath385 a monoid homomorphism .",
    "let @xmath386 if @xmath387 then @xmath388    now let @xmath181 be definable by a sentence of .",
    "@xmath33 is a union of @xmath316-classes for some @xmath389 and thus @xmath33 is recognized by the quotient monoid @xmath390 so @xmath163 is a homomorphic image of this monoid .",
    "consequently , it is sufficient to show that @xmath391 itself is a member of the variety @xmath246 we denote by @xmath392 the projection morphism onto this quotient .",
    "take @xmath393 and @xmath394 we will show @xmath395 this identity characterizes the variety * da * ( see , for example diekert , _ et al . _",
    "@xcite ) , so this will prove @xmath396 as required .",
    "we can write @xmath397 where each @xmath398 and @xmath399 is @xmath400-above @xmath194 thus we have @xmath401 for some @xmath402    now let @xmath156 be the alphabet @xmath403 we define a homomorphism @xmath404 by mapping each @xmath405 to @xmath406 @xmath407 to @xmath408 and @xmath409 to @xmath410 since @xmath392 is onto , we also have a homomorphism @xmath385 satisfying @xmath411 we define words @xmath412 where @xmath413 as follows : @xmath414 @xmath415 @xmath416    observe that @xmath417 since all languages recognized by @xmath391 are definable in @xmath4,$ ] @xmath391 is aperiodic , and thus for sufficiently large values of @xmath418 we have @xmath419 thus for sufficiently large @xmath331 and all @xmath223 we have @xmath420 @xmath421    by lemma  [ lemma.xst ] ( proved next ) ,    @xmath422    then by lemma  [ lem.morphismclosure ] ,    @xmath423 so @xmath424 as claimed .",
    "the essential idea is to show that a certain identity is satisfied defining this variety of finite monoids , which we do by application of our game characterization of @xmath425.$ ]    we begin by considering an alphabet @xmath156 of the form @xmath426 where @xmath427 let @xmath428 be the word @xmath429 let @xmath430 we will build words by concatenating the factors @xmath431    for example , with @xmath432 two such words are    @xmath433 if the first and last factors of such a word are @xmath434 and if two consecutive factors always include at least one @xmath434 then we call it an _ @xmath435-word_. the first word in the example above is a 4-word , but the second is not , because of the consecutive factors * b * and * a*. in what follows , we will concern ourselves exclusively with @xmath435-words .",
    "the way in which we have defined the word @xmath436 ensures that the factorization of an @xmath435-word in the required form is unique .",
    "let @xmath437 and @xmath438 we ll define special factors in @xmath435-words that we call _ @xmath175-neighborhoods_.",
    "one kind of @xmath175-neighborhood is a factor of the form @xmath439 or @xmath440 where the @xmath441 or @xmath442 is one of the original factors used to build the word .",
    "in addition , we say that the prefix @xmath443 and suffix @xmath443 are also @xmath175-neighborhoods .",
    "so , for example , the 1-neighborhoods in the 4-word in the example above are indicated here by underlining :    @xmath444    the condition @xmath445 ensures that @xmath175-neighborhoods are never directly adjacent , so that every position belongs to at most one @xmath175-neighborhood , and some of the @xmath436 factors are contained in no @xmath175-neighborhood .",
    "consider two marked words @xmath446 where @xmath447 are @xmath435-words .",
    "we say these marked words are @xmath448-equivalent if @xmath449 and if either @xmath263 and @xmath450 are in the same position in identical @xmath175-neighborhoods , or if neither @xmath263 nor @xmath450 belongs to a neighborhood .",
    "for instance , if @xmath451 and @xmath263 is on the third position of a 2-neighborhood @xmath452 in @xmath267 then @xmath450 will be on the third position of a 2-neighborhood @xmath452 of @xmath271 if @xmath453 then we only require @xmath449",
    "so @xmath454 equivalence is the same as @xmath455-equivalence .",
    "we now play our game in marked words @xmath456 where @xmath447 are @xmath435-words .",
    "we add the rule that at the end of every round , the two marked words @xmath265 and @xmath457 are @xmath448-equivalent .",
    "if player 2 has a winning strategy in the @xmath76-round game with this additional rule , we say that the starting words @xmath261 and @xmath458 are @xmath459-equivalent . once again , the case @xmath460 corresponds to ordinary @xmath316-equivalence",
    ".    we will call this stricter version of the game the",
    "_ @xmath175-enhanced game_. as with the original game , we can define a version of the @xmath175-enhanced game for ordinary ( that is , unmarked ) @xmath435- words : in the first round , player 1 places his pebble on a position in either of the words , and player 2 responds so that the resulting marked words are @xmath448-equivalent .",
    "play then proceeds as described above for @xmath280 additional rounds .",
    "we write @xmath461 if player 2 has a winning strategy in this @xmath76-round @xmath175-enhanced game .",
    "let @xmath413 and let @xmath462 denote the @xmath223-word    @xmath463    we claim :    [ lemma.xst ] for each @xmath437 @xmath464 there exists @xmath435 such that if @xmath465 @xmath466    we prove this by induction on @xmath389 first considering the case @xmath467 with arbitrary @xmath468 choose @xmath469 and @xmath470 if player 1 plays in either word inside one of the factors @xmath471 then player 2 might try to simply mimic this move in the corresponding factor @xmath462 in the other word .",
    "this works unless player 1 moves near the center of one of the two words .",
    "for example , if player 1 moves in the final position of the first @xmath462 in @xmath472 then this position is contained inside a factor @xmath436 and does not belong to any @xmath175-neighborhood , but the corresponding position in the other word belongs to a neighborhood of the form @xmath473 so the response is illegal . of course we can solve this problem : @xmath462 itself contains factors @xmath436 that do not belong to any @xmath175-neighborhood ( because @xmath445 ) .",
    "conversely , if player 1 moves anywhere in the central @xmath175-neighborhood @xmath439 in @xmath474 then player 2 can find an identical neighborhood inside @xmath462 and reply there .    now let @xmath173 and suppose that the proposition is true for this fixed @xmath76 and all @xmath468 we will show the same holds for @xmath475 let @xmath468 then by the inductive hypothesis , there exist @xmath476 such that @xmath477 we will establish the proposition by showing @xmath478 observe that @xmath479 @xmath480 we will call the factors @xmath481 occurring in these two words the _ peripheral factors _ ; the remaining letters make up the _ central regions_. we prove the proposition by presenting a winning strategy for player 2 in the @xmath482-round @xmath175-enhanced game in these two words .",
    "for the first @xmath76 rounds , player 2 s strategy is as follows :    * if player 1 moves into either of the peripheral factors in either of the words , player 2 responds at the corresponding position of the corresponding peripheral factor in the other word . *",
    "if player 1 moves from a peripheral factor into the central region of one word , player 2 treats this as the opening move in the @xmath76-round @xmath483-enhanced game in the central regions , and responds according to her winning strategy in this game . * if player 1 moves from one position in the central region of a word to another position in the central region , player 2 again responds according to her winning strategy in the @xmath76-round @xmath483-enhanced game in the central regions .",
    "we need to show that each move in this strategy is actually a legal move in the game  that in each case the sets of letters jumped by the two players are the same , and that the @xmath175-neighborhoods match up correctly .",
    "it is trivial that the @xmath175-neighborhoods match up  in fact , the @xmath483-neighborhoods do , so we concentrate on showing that the sets of jumped letters are the same .",
    "this is clearly true for moves that remain within a single peripheral factor or move from one peripheral factor to another .",
    "what about the situation where player 1 moves from a peripheral factor to the central region ?",
    "we can suppose without loss of generality that the move begins in the @xmath104 position of the left peripheral factor in one word , and jumps right to the @xmath484 position of the central region of the the word .",
    "if @xmath485 then this move is within an @xmath175-neighborhood of the central factor , namely the prefix of the central factor of the form @xmath486 so player s 2 reply will be at the identical position in the corresponding neighborhood , and thus at position @xmath339 of the central factor in the other word .",
    "thus the two moves jumped over precisely the same set of letters .",
    "if @xmath487 then player 1 s move jumps over all the letters of @xmath488 since player 2 s response , owing to the condition on neighborhoods , can not be within the first @xmath489 letters of the central factor of the other word , her move too must jump over all the letters of @xmath488 the same argument applies to moves from the central region into a peripheral factor .",
    "this shows that player 2 s strategy is successful for the first @xmath76 rounds , but we must also show that player 2 can extend the winning strategy for one additional round . if after the first @xmath76 rounds , the two pebbles are in peripheral factors , then player 1 s next move is either within a single peripheral factor , from one peripheral factor to another , or from a peripheral factor into the central region . in all these cases player 2",
    "responds exactly as she would have during the first @xmath76 rounds . as we argued above",
    ", this response is a legal move .    if player 1 moves from the central region to one of the peripheral factors , player 2 will move to the same position in the corresponding peripheral factor in the other word .",
    "again , we argue as above that this is a legal move .",
    "the crucial case is when player 1 s move is entirely within one of the central factors .",
    "now we can no longer use the winning strategy in the game in the central factors to determine player 2 s response , because she has run out of moves .",
    "we may suppose , without loss of generality , that player 1 s move is toward the left .",
    "we consider whether or not the set of letters that player 1 jumps consists of all the letters in @xmath490 if it does , then player 2 can just locate a matching neighborhood somewhere in the left peripheral factor in the other word and move there . in the process ,",
    "player 2 also jumps to the left over all the letters of @xmath490    what if player 1 jumps over a proper subset of the letters of @xmath156 ?",
    "player 2 responds by moving the same distance in the same direction in the other word . why does this work ?",
    "after @xmath76 rounds , the pebbles in the two words must be on the same letters and in the same positions within matching @xmath483-neighborhoods , or outside of any @xmath483-neighborhood .",
    "thus we can not have the situation where , for example , the pebble in one word is on a letter @xmath54 within a factor @xmath491 and in the other word on the same letter @xmath54 within a factor @xmath488 if player 1 moves the pebble from a factor @xmath436 into a factor @xmath442 or @xmath441let us say @xmath442 then the original position of the pebble was within a 1-neighborhood .",
    "therefore player 2 s pebble was in the corresponding position in a matching 1-neighborhood , so the response moves this pebble to @xmath442 as well , and thus jumps over the same set of letters .",
    "( this is the only potentially problematic case . )",
    "how can we ensure that the @xmath175-neighborhoods match up correctly after this move ?",
    "if the move takes player 1 s pebble into an @xmath175-neighborhood , then the move stayed within a single @xmath483-neighborhood .",
    "this means that the original position of player 2 s pebble was in the corresponding position of an identical @xmath483-neighborhood , so that after player 2 s response , the two pebbles are in matching @xmath175-neighborhoods .",
    "let @xmath492 it is easy to construct a sentence of @xmath4 $ ] defining @xmath164 we can give a more algebraic proof by working directly with the minimal automaton of @xmath33 and showing that its transition monoid is aperiodic .",
    "this automaton has three states @xmath493 along with a dead state . for each state",
    "@xmath494 we define @xmath495 @xmath496 where this transition is understood to lead to the dead state if @xmath497 or @xmath498 the transition monoid has a zero , which is the transition mapping every state to the dead state .",
    "it is then easy to check that every @xmath499 is either idempotent , or has @xmath500 and thus @xmath163 is aperiodic .",
    "we now show that @xmath33 can not be expressed in . by theorem  [ thm.maintheorem ] ,",
    "if @xmath33 is expressible then @xmath240 as before , we will denote the image of a word @xmath80 in @xmath163 by @xmath501 easily , @xmath502 is an idempotent in @xmath503 and both @xmath504 and @xmath505 are elements of @xmath506 with @xmath357 idempotent and @xmath507 in @xmath508 so if @xmath509 we would have @xmath510 now @xmath357 is the transition that maps state 0 to 0 and all other states to the dead state , and @xmath175 is the transition that maps 0 to 1 and all other states to the dead state .",
    "thus @xmath511 so @xmath512      we sketch the proof that languages over a two - letter alphabet whose syntactic monoids are in @xmath244 are definable in , which will complete the proof of the main theorem .",
    "this relies heavily on an algebraic theory of finite categories developed by tilson  @xcite .",
    "the category @xmath513 and the congruence @xmath514 described below were first introduced by straubing  @xcite in the study of languages of dot - depth 2 .    in this and the following sections , we assume that @xmath515 that @xmath516 and that @xmath167 is a homomorphism onto @xmath189 our ultimate goal is to show that @xmath517 is definable in for all @xmath518 this implies that every language recognized by a monoid in @xmath516 is definable in the logic , and thus that @xmath33 is definable if @xmath519 .      a _ category _ @xmath520 consists of a set @xmath521 of _ objects _ , and , for each @xmath522 a set @xmath523 of _ arrows _ from @xmath71 to @xmath524 given a pair of consecutive arrows @xmath525 there is a product arrow @xmath526 the product of nonconsecutive arrows is not defined",
    ". we will sometimes denote arrows in this way by showing their start and end objects , and sometimes just write them as @xmath527 @xmath528 @xmath529 _",
    "etc._. for each @xmath530 there is an arrow @xmath531 that is a right identity for arrows ending at @xmath71 and a left identity for arrows starting at @xmath532 this is the traditional definition of a category , but we are not doing ` category theory ' in the traditional sense : we will only consider categories in which both the object set and every arrow set is finite , and essentially treat categories as generalized monoids .",
    "note that a monoid is the same thing as a category with a single object .",
    "furthermore , for each object @xmath71 of a category @xmath533 the set @xmath534 of arrows that both begin and end at @xmath71 is a finite monoid , called the _ base monoid _ at @xmath532    there is a preorder on categories called _ division _ and denoted @xmath535 the ingredients of a division @xmath536 are an object map @xmath537 and for each arrow @xmath538 a set of arrows in @xmath539 that are said to _ cover _ @xmath540 the covering relation is required to satisfy a number of properties :    1 .",
    "an arrow in @xmath539 can cover at most one arrow in @xmath541 ( it might cover several different arrows with different starting and ending objects . )",
    "the covering relation is multiplicative : if @xmath542 covers @xmath543 and @xmath544 covers @xmath528 then the product arrow @xmath545 covers @xmath546 3 .   for each @xmath547 @xmath548 is covered by @xmath549    an important special case occurs when the category @xmath550 is a monoid , and an even more special case when @xmath520 and @xmath550 are both monoids . in this instance",
    ", category division reduces to monoid division : @xmath520 is a quotient of a submonoid of @xmath551    we will employ a special property of the monoid variety * da * with respect to categories : it is _ local_. this means that if every base monoid of a category @xmath520 divides a monoid in @xmath552 then @xmath520 itself divides a monoid in * da * ( see almeida  @xcite , place and segoufin  @xcite ) .",
    "the objects of @xmath513 are pairs @xmath553 where @xmath170 is idempotent , @xmath554 and @xmath555 for some word @xmath23 with @xmath556 ( we write @xmath557 for the set of letters of @xmath105 ) an arrow from @xmath558 to @xmath559 is represented by a triple    @xmath560    where @xmath23 and @xmath561    two such arrows @xmath562 are identified if @xmath563 ( that is , an arrow is actually an equivalence class modulo this identification . )    we multiply arrows by the rule @xmath564 is equal to @xmath565 where @xmath566 @xmath567 @xmath568    it is straightforward to verify that this multiplication is well - defined and associative , and that @xmath569 where @xmath570 and @xmath571 represents the identity arrow @xmath572 thus @xmath513 is indeed a category .",
    "the base monoid at @xmath558 in @xmath513 is in @xmath573 since @xmath574 the result about locality of * da * cited above implies that @xmath513 divides a monoid in * da*.      we describe an equivalence relation on @xmath576 since @xmath574 @xmath166 is aperiodic , and therefore if @xmath577 @xmath578 for all @xmath518    given a word @xmath579 we factor it into maximal factors each of which consists entirely of @xmath1 s or entirely of @xmath35 s .",
    "we call these factors _ sub - blocks_. for example , @xmath580 in this example the word begins with a sub - block of @xmath1 s and ends with a sub - block of @xmath35 s , but of course any of the four possibilities can occur .",
    "we call the factors @xmath581 the _ blocks _ of the factorization . in case",
    "the number of sub - blocks is odd , the leftmost block will be incomplete , in the sense that it contains only @xmath1 s or only @xmath35 s .",
    "observe that we number the blocks from right to left , and call the rightmost block the first block .",
    "let @xmath582 we define @xmath583 if the following conditions hold :    * the number of blocks in @xmath80 and the number of blocks in @xmath584 are equivalent threshold @xmath585 * the rightmost letters of @xmath586 are the same .",
    "* let @xmath223 be the number of blocks in @xmath105 let @xmath587 and let @xmath588 @xmath589 be the @xmath104 blocks of @xmath590 respectively .",
    "then @xmath591 and @xmath592 are equivalent threshold @xmath418 and @xmath593 and @xmath594 are equivalent threshold @xmath585 ( this assumes that the rightmost letter of both words is @xmath37 so that blocks have the form @xmath595 but the analogous definition is made if the rightmost letter is @xmath1 . )    we have the following easy lemma .    [ lemma.congcong ] the equivalence relation @xmath514 is a congruence of finite index on @xmath576    we let @xmath596 denote the quotient monoid @xmath597 and @xmath598 the projection homomorphism onto this quotient .",
    "we define another category @xmath599 , called the _ derived category _ , that depends on the homomorphisms @xmath600 @xmath601 ( in tilson s formulation , this is called the derived category of the _ relational morphism _",
    "@xmath602 )    the objects of @xmath599 are elements of @xmath603 the arrows are represented by triples @xmath604 where @xmath605 and @xmath606 two such triples @xmath607 are identified if for all words @xmath543 such that @xmath608 @xmath609 triples are composed in the obvious way : the product @xmath610 is represented by the triple @xmath611 it is straightforward to verify that this composition law is associative , respects the equivalence of arrows . and that @xmath612 is a left and right identity at the object @xmath255 so this is indeed a category .    the crucial property of @xmath599 that we will use is :    [ lemma.derivedcategory ] @xmath599 divides a monoid in * da*.    the proof of this lemma is given in straubing  @xcite , where both the category @xmath513 and the congruence @xmath514 are introduced .      let @xmath613 consider the path traced out in the derived category @xmath599 by this word , starting at the object @xmath614 : @xmath615 we view this sequence of arrows as a word over the alphabet @xmath156 of all arrows in @xmath616 this defines a length - preserving function ( but not a homomorphism ) @xmath617 by lemma  [ lemma.derivedcategory ] , @xmath599 divides a monoid @xmath618 so we can map each arrow @xmath619 to an element @xmath620 that covers it .",
    "let @xmath621 we claim that if both @xmath622 and @xmath623 then @xmath624 this is because the product @xmath625 of the sequence of arrows @xmath626 is covered by @xmath627 which consequently covers the product @xmath628 of the arrows in @xmath629 as these products have the same start and end object , they are accordingly equal , which implies @xmath624    thus if @xmath172 the language @xmath517 is a finite union of sets of the form @xmath630 for @xmath631 and @xmath632 we will show that each of these sets of words is definable in , and thus , by theorem  [ thm.invequalsthr ] , by a sentence of . to express @xmath633 we need to be able to describe a @xmath514-class in .",
    "a single example will illustrate the general procedure .",
    "suppose that @xmath634 and we want to write a sentence satisfied by a word @xmath80 if and only if @xmath80 is congruent to @xmath635 this word has four blocks , and the leftmost block is incomplete , but only the three rightmost blocks matter for the congruence class . to describe the class ,",
    "we first say that we jump left from the right - hand end of of word , over a single @xmath1 , to the rightmost @xmath35 : @xmath636 we now jump from the rightmost @xmath35 over no @xmath1 s and at least one @xmath35 to the leftmost @xmath35 of the first block .",
    "observe that the condition is ` at least one @xmath35 , ' because we want to express that the size of this sub - block is at least 3 .",
    "thus our sentence has now grown to @xmath637 where @xmath638 is @xmath639 we continue in this manner , now jumping to the rightmost @xmath35 of the next block , and then the leftmost @xmath35 of the same sub - block . note that we grow the sentence from the outside in , at each step adding another existential quantifier and atomic formulas of . when we reach the leftmost letter of the third block we will have to add that either we are on the leftmost letter of the word , or that the letter immediately to the left is @xmath21 the end result is a sentence of defining a congruence class of @xmath640 and we can treat every class similarly .",
    "how do we express that @xmath641 ?",
    "since @xmath282 is a morphism into @xmath618 the set of @xmath428 such that @xmath642 is expressed by a sentence of @xmath0 $ ] over the alphabet @xmath490 to convert this into a sentence over @xmath643 we have to translate each atomic formula @xmath644 into a formula of over @xmath6 we write this as @xmath645 where @xmath313 says that the word consisting of letters to the left of @xmath2 belongs to the @xmath514-class @xmath255 we then proceed to write @xmath313 as formula over , following the same procedure we used above to obtain sentences describing @xmath514-classes . in fact",
    ", this formula is simpler , in terms of alternation depth , than the one we produced earlier : using the same @xmath514-class as in our example , our formula construction will begin with @xmath646 the result is a sentence of defining @xmath647 as required .",
    "we first show that contains languages of arbitrarily large alternation depth .",
    "consider an alphabet consisting of the symbols @xmath648 we define a sequence of languages by regular expressions as follows : @xmath649 @xmath650 for even @xmath651 @xmath652 @xmath653 for odd @xmath651 @xmath654",
    "@xmath655    observe that @xmath656 and @xmath657 are languages over a finite alphabet of @xmath658 letters .",
    "@xmath656 denotes the set of prefix encodings of depth @xmath175 boolean circuits with 0 s and 1 s at the inputs . in these circuits the input layer of 0 s and 1 s is followed by a layer of unbounded fan - in or gates , then alternating layers of unbounded fan - in and and or gates ( strictly speaking , these circuits are trees of and and or gates ) .",
    "@xmath657 denotes the set of encodings of those circuits in @xmath656 that evaluate to _ true . _",
    "we obtain a sentence defining @xmath659 by saying that the first symbol is @xmath660 and every symbol after this is either 0 or 1 .",
    "@xmath661 we obtain a sentence for @xmath662 by taking the conjunction of this sentence with @xmath663    for the inductive step , we suppose that we have a sentence defining @xmath664 for @xmath665 let s suppose first that @xmath76 is odd .",
    "thus @xmath664 is a union of @xmath666-classes for some @xmath667 which we assume to be at least 2 .",
    "consequently , whenever @xmath668 and @xmath669 player 1 has a winning strategy in the @xmath47-round game in @xmath436 and @xmath670 the proof now proceeds by showing that whenever @xmath671 and @xmath672 player 1 has a winning strategy in the @xmath673-round game in these two words .",
    "this implies that the @xmath666-class of @xmath80 is contained within @xmath674 and thus @xmath675 is a union of such classes , and hence definable by a sentence in our logic .    the argument for the case where @xmath76 is even , and for the classes",
    "@xmath676 is identical .",
    "observe that since @xmath662 is defined by a formula of quantifier depth 2 , we can take @xmath677    it remains to prove the claim about unbounded alternation depth .",
    "it is possible to give an elementary proof of this using games .",
    "however , by deploying some more sophisticated results from circuit complexity , we can quickly see that the claim is true .",
    "let us suppose that we have a language @xmath678 recognized by a constant - depth polynomial - size family of unbounded fan - in boolean circuits ; that is , @xmath33 belongs to the circuit complexity class @xmath679 we can encode the pair consisting of a word @xmath80 of length @xmath328 and the circuit for length @xmath328 inputs by a word @xmath680 we now have @xmath681 if and only if @xmath682    now if the alternation depth of all the @xmath683 is bounded above by some fixed integer @xmath684 then we can recognize every @xmath683 by a polynomial - size family of circuits of depth @xmath524 we can use this to obtain a polynomial family of circuits of depth @xmath685 recognizing @xmath164 this contradicts the fact ( see sipser  @xcite ) that the required circuit depth of languages in @xmath686 is unbounded .    to prove the claim about bounded alternation depth in the two - letter case , we re - examine the construction of the formulas in section  [ section.translation ] .",
    "the formula defining the condition @xmath641 is constructed by writing a sentence of @xmath0 $ ] over a base that includes the atomic formulas @xmath644 .",
    "the formula @xmath687 used to express this atomic formula is in @xmath688.$ ] the @xmath0 $ ] sentence itself can be replaced ( thrien and wilke  @xcite ) by an equivalent @xmath688 $ ] sentence or a @xmath689 sentence , so the result is a @xmath690 $ ] sentence defining @xmath691 the formula sentence defining @xmath692 can itself be replaced by a @xmath688 $ ] or @xmath693 $ ] sentence , because @xmath596 is @xmath694-trivial and thus itself in * da*.",
    "much of this research was carried out while the various authors were guests of the tata institute for fundamental research in mumbai , the chennai mathematical institute and the institute of mathematical sciences in chennai , and the university of montreal , and participated in the dagstuhl seminar ` circuits , logic and games ' in september , 2015 .",
    "martin frer .",
    "the computational complexity of the unconstrained domino problem ( with implications for logical decision problems ) , proc .",
    "logic and machines : decision problems and complexity , mnster ( egon brger , gisbert hasenjaeger and dieter rdding , eds . ) , lncs 171 , 1984 , 312319 ."
  ],
  "abstract_text": [
    "<S> we study an extension of @xmath0,$ ] first - order logic interpreted in finite words , in which formulas are restricted to use only two variables . </S>",
    "<S> we adjoin to this language two - variable atomic formulas that say , ` the letter @xmath1 appears between positions @xmath2 and @xmath3 ' . </S>",
    "<S> this is , in a sense , the simplest property that is not expressible using only two variables .    </S>",
    "<S> we present several logics , both first - order and temporal , that have the same expressive power , and find matching lower and upper bounds for the complexity of satisfiability for each of these formulations . </S>",
    "<S> we also give an effective necessary condition , in terms of the syntactic monoid of a regular language , for a property to be expressible in this logic . </S>",
    "<S> we show that this condition is also sufficient for words over a two - letter alphabet . </S>",
    "<S> this algebraic analysis allows us us to prove , among other things , that our new logic has strictly less expressive power than full first - order logic @xmath4.$ ] </S>"
  ]
}