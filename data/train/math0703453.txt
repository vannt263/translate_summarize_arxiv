{
  "article_text": [
    "the rotor - router model is a simple deterministic process suggested by jim propp .",
    "it can be viewed as an attempt to derandomize random walks on graphs .",
    "so far , the `` propp machine '' has mainly been regarded on infinite grids @xmath0 . there , each vertex @xmath1 is equipped with a `` rotor '' together with a cyclic permutation ( called `` rotor sequence '' ) of the @xmath2 cardinal directions of @xmath0 . while a chip ( particle , coin ,  ) performing a random walk",
    "leaves a vertex in a random direction , in the propp model it always goes into the direction the rotor is pointing .",
    "after a chip is sent , the rotor is rotated according to the fixed rotor sequence .",
    "this shall ensure that the chips are distributed highly evenly among the neighbors .",
    "the propp machine has attracted considerable attention recently .",
    "it has been shown that it closely resembles a random walk in several respects .",
    "the first result is due to @xcite who compared random walk and propp machine in an _ aggregating model _ called internal diffusion - limited aggregation ( idla )  @xcite . there",
    ", each chip starts at the origin of @xmath0 and walks till it reaches an unoccupied site , which it then occupies . in the random walk model",
    "it is well known that the shape of the occupied locations converges to a euclidean ball in @xmath3  @xcite .",
    "recently , @xcite proved an analogous result for the propp machine .",
    "surprisingly , the convergence seems to be much faster .",
    "@xcite showed experimentally that for circular rotor sequences after three million chips the radius of the inscribed and circumscribed circle differs by approximately @xmath4 .",
    "hence , the occupied locations almost form a perfect circle . some more results on this aggregating model in two dimensions can be found in  section  [ sec : blob ] .",
    "@xcite compared the propp machine and the random walk in terms of the _ single vertex discrepancy_. apart from a technicality which we defer to section  [ sec : preliminaries ] , they place arbitrary numbers of chips on the vertices .",
    "then they run the propp machine on this initial configuration for a certain number of rounds .",
    "a round consists of each chip ( in arbitrary order ) doing one move as directed by the propp machine . for the resulting position , for each vertex they compare the number of chips that end up there with",
    "the expected number of chips that a random walk in same number of rounds would have gotten there starting from the initial configuration .",
    "cooper and spencer showed that for all grids @xmath0 , these differences can be bounded by a constant @xmath5 independent of the initial set - up ( in particular , the total number of vertices ) and the run - time .",
    "for the case @xmath6 , that is , the graph being the infinite path , @xcite showed among other results that this constant @xmath7 is approximately @xmath8 .",
    "they further proved that to have the discrepancy on a particular vertex maximal it suffices that each location has an odd number of chips at at most one time .    in this paper",
    ", we rigorously analyze the propp machine on the two - dimensional grid  @xmath9 .",
    "a particular difference to the one - dimensional case is that now there are two non - isomorphic orders in which the four neighbors can be served .",
    "the first are clockwise and counterclockwise orders of the four cardinal directions .",
    "these are called circular rotor sequences .",
    "all other orders turn the rotor by @xmath10 at one time and are called non - circular rotor sequences .",
    "we prove @xmath11 for circular rotor sequences and @xmath12 otherwise . to the best of our knowledge ,",
    "this is the first paper showing that the rotor sequence can make a difference .",
    "we also characterize the respective worst - case configurations .",
    "in particular , we prove that the maximal single vertex discrepancy can only be reached if there are vertices which send a number of chips not divisible by four at at least three different times .    the remainder of this paper is organized as follows .",
    "the basic notations are given in section  [ sec : preliminaries ] . in section  [ sec : lower ] we roughly speaking show that , by suitably choosing the initial configuration , we may prescribe the number of chips on each vertex at each time modulo  4 .",
    "this will yield sharp lower bounds , since in section  [ sec : basic ] we see that the discrepancy on a vertex can be expressed by exactly this information . in sections  [ sec : inf ] and",
    "[ sec : upper ] , we derive sufficient information about initial configurations leading to maximal discrepancies on a vertex so that we then can estimate the maximum possible discrepancy numerically . this estimate is shown to be relatively tight in section  [ sec : error ] .",
    "since the investigation up to this point in particular showed that different rotor sequences lead to different results , we briefly examine the aggregating model in this respect in section  [ sec : blob ] .",
    "we summarize our results in the last section .",
    "[ sec : notations ]    to bound the single vertex discrepancy between propp machine and random walk on the two - dimensional grid we need several preliminaries , which will be introduced in this section .",
    "first , it will be useful to use a different representation of the two - dimensional grid  @xmath9 .",
    "let @xmath13 .",
    "define a graph @xmath14 via @xmath15 and @xmath16 . clearly , @xmath17 is isomorphic to the standard two - dimensional grid @xmath18 with @xmath19",
    ". therefore , our results on @xmath17 immediately translate to @xmath20 .",
    "the advantage of our representation is that now each direction @xmath21 can be uniquely expressed as @xmath22 with @xmath23 .",
    "this allows a convenient computation of the probability distribution of the random walk on the grid ( see equation   below ) . for convenience we will also use the symbols @xmath24 to describe the directions in the obvious manner .    in order to avoid discussing all equations in the expected sense and thereby to simplify the presentation",
    ", one can treat the expectation of the random walk as a _ linear machine _  @xcite . here",
    ", in each time step a pile of @xmath25 chips is split evenly , with @xmath26 chips going to each neighbor .",
    "the ( possibly non - integral ) number of chips at vertex  @xmath27 at time  @xmath28 is exactly the expected number of chips in the random walk model .    for @xmath29 and @xmath30 ,",
    "let @xmath31 denote that @xmath32 and @xmath33 denote that @xmath34 .",
    "a vertex  @xmath27 is called _ even _ or _ odd _ if @xmath35 or @xmath36 , respectively .",
    "a _ configuration _ describes the current `` state '' of linear or propp machine .",
    "a configuration of the linear machine assigns to each vertex @xmath37 its current ( possibly fractional ) number of chips .",
    "a configuration of the propp machine assigns to each vertex @xmath37 its current ( integral ) number of chips and the current direction of the rotor .",
    "a configuration is called _ even _ ( _ odd _ ) if all chips lie on even ( odd ) vertices .    as pointed out in the introduction ,",
    "there is one limitation without which neither the results of @xcite nor our results hold .",
    "note that since @xmath17 is a bipartite graph , chips that start on even vertices never mix with those starting on odd vertices .",
    "it looks like we are playing two games at once .",
    "however , this is not true , because chips at different parity vertices may affect each other through the rotors .",
    "we therefore require the initial configuration to have chips only on _ one _ parity . without loss of generality , we consider only even initial configurations .",
    "a random walk on @xmath17 can be described nicely by its probability density . by @xmath38",
    "we denote the probability that a chip from vertex  @xmath27 arrives at the origin after  @xmath28 random steps ( `` at time  @xmath28 '' ) in a simple random walk .",
    "then , @xmath39 for @xmath31 and @xmath40 , and @xmath41 otherwise .",
    "we now describe the _ propp machine _ in detail .",
    "first , we define a rotor sequence by a cyclic permutation @xmath42 .",
    "that is , after a chip has been sent in direction  @xmath43 , the rotor moves such that afterwards it points in direction @xmath44 . instead of using @xmath45 directly",
    ", it will often be more handy to describe a _ rotor sequence _ as a 4-tuple @xmath46 .",
    "we distinguish between circular and non - circular rotor sequences .",
    "_ circular _ rotor sequences are either clockwise @xmath47 or counter - clockwise @xmath48 .",
    "all other rotor sequences are called _ non - circular_. our main focus is on the classical propp machine in which all vertices have the same rotor sequence . in @xcite , @xcite",
    "allow different rotor sequences for each vertex  @xmath27 .",
    "our results also hold in this general setting .",
    "however , to simplify the presentation we will typically assume that there is only one rotor sequence for all vertices  @xmath27 .    in the following notations ,",
    "we implicitly fix the rotor sequence as well as the initial configuration ( that is , chips on vertices and rotor directions at time @xmath49 ) . in one step of the propp machine ,",
    "each chip does exactly one move , that is , it moves in the direction the arrow associated with his current position is pointing and updates the arrow direction according to the rotor sequence .",
    "note that the particular order in which the chips move within one step is irrelevant ( as long as we do not label the chips ) . by this rule ,",
    "all subsequent configurations are determined by the initial configuration .",
    "for all @xmath50 and @xmath51 let @xmath52 denote the number of chips on vertex  @xmath27 and @xmath53 the direction of the rotor associated with  @xmath27 after @xmath28 steps of the propp machine .    to describe the linear machine we use the same fixed initial configuration as for the propp machine . in one step , each vertex  @xmath27 sends a quarter of its ( possibly fractional ) number of chips to each neighbor .",
    "let @xmath54 denote the number of chips at vertex  @xmath27 after  @xmath28 steps of the linear machine .",
    "this is equal to the expected number of chips at vertex  @xmath27 after a random walk of all chips for  @xmath28 steps .",
    "note that @xmath55 by definition .",
    "for a deterministic process like the propp machine , it is obvious that the initial configuration ( that is , the location of each chip and the direction of each rotor ) , determines all subsequent configurations .",
    "the following theorem shows a partial converse , namely that ( roughly speaking ) we may prescribe the number of chips modulo 4 on all vertices at all times and still find an initial configuration leading to such a game .",
    "an analogous result for the one - dimensional propp machine has been shown in @xcite .    for any initial direction of the rotors and any @xmath56 with @xmath57 for all  @xmath58 , there is an initial even configuration with @xmath59 , @xmath37 that results in subsequent configurations with @xmath60 for all  @xmath27 and  @xmath28 .",
    "[ thm : parityforcing ]    let @xmath61 describe the initial rotor directions given in the assumption .",
    "the sought - after configuration can be found iteratively .",
    "we start with @xmath62 chips at location  @xmath27 .",
    "now assume that our initial ( even ) configuration is such that for some @xmath63 we have @xmath60 for all  @xmath64 .",
    "we modify this initial configuration by defining @xmath65 for even  @xmath27 , while we have @xmath66 for odd  @xmath27 . here , @xmath67 are to be determined such that @xmath68 for all  @xmath69 .",
    "observe that a pile of @xmath70 chips splits evenly  @xmath71 times .",
    "hence for all choices of the @xmath72 we still have @xmath68 for all  @xmath64 . at time",
    "@xmath71 , the extra piles of @xmath73 chips have spread as follows : @xmath74    let initially @xmath75 for all  @xmath76 . by induction on @xmath77 , we change the @xmath78 to their final value .",
    "we keep @xmath79 for all  @xmath80 with @xmath81 .",
    "assume that for some @xmath82 , the current @xmath83 fulfill @xmath84 for all  @xmath27 with @xmath85 .",
    "we now determine @xmath83 for all  @xmath80 with @xmath86 in such a way that @xmath84 for all  @xmath87 such that @xmath88 .",
    "fortunately , to achieve @xmath84 for some @xmath87 such that @xmath89 , it suffices to change a single @xmath90 , @xmath91 , @xmath92 . without loss of generality ,",
    "let @xmath37 , @xmath93 , and @xmath94 such that @xmath95 .",
    "let @xmath96 . now choosing @xmath97 such that @xmath98 yields @xmath99 and @xmath100 for all other  @xmath87 such that @xmath101 .",
    "hence for each @xmath87 such that @xmath89 , we find a @xmath102 and a value for @xmath103 such that the resulting @xmath104 are as desired .",
    "all other @xmath105 with @xmath86 remain fixed to zero .",
    "this shows that for all  @xmath106 , we may choose @xmath83 , @xmath91 , such that @xmath68 for all  @xmath69 and all @xmath87 such that @xmath88 . by compactness principle , this yields the existence of @xmath83 , @xmath76 , such that @xmath68 for all  @xmath69 and @xmath87 .    up to this point",
    ", we proved that for all  @xmath63 , there is an even initial configuration such that @xmath68 holds for all  @xmath107 and @xmath87 . invoking",
    "the compactness principle again finishes the proof .",
    "in this section , we lay the foundations for our analysis of the maximal possible single - vertex discrepancy . in particular",
    ", we will see that we can determine the contribution of a vertex to the discrepancy at another one independent from all other vertices .    in the following , we re - use several arguments from @xcite .",
    "for the moment , in addition to the notations given in section  [ sec : preliminaries ] , we also use the following mixed notation . by @xmath108 we denote the ( possibly fractional ) number of chips at location @xmath109 after first performing @xmath110 steps with the propp machine and then @xmath111 steps with the linear machine .",
    "we are interested in bounding the discrepancies @xmath112 for all vertices  @xmath27 and all times  @xmath28 .",
    "since we aim at bounds independent of the initial configuration , it suffices to regard the vertex @xmath113 . from @xmath114",
    "we obtain @xmath115    now @xmath116 motivates the definition of the _ influence _ of a propp move ( compared to a random walk move ) from vertex  @xmath27 in direction @xmath43 on the discrepancy of @xmath117 ( @xmath28 time steps later ) by @xmath118    to finally reduce all @xmath119s involved to the initial arrow settings @xmath120 , we define @xmath121 for all @xmath122 . hence at time @xmath123 the location  @xmath27 is occupied by its @xmath124-th chip ( where , to be consistent with  @xcite , we start counting with the @xmath125-th chip ) .    let  @xmath71 be a time at which we regard the discrepancy at @xmath117 . then the above yields    [ eq : basic1 ] f(@xmath126,t ) & - e(@xmath126,t )  =  _ @xmath127v _ inf(@xmath127,next^i(arr(@xmath127,0)),t - s_i(@xmath127 ) ) .",
    "since the inner sum of equation   will occur frequently in the remainder , let us define the _ contribution _ of a vertex  @xmath27 to be @xmath128 where we both suppress the initial configuration leading to the @xmath129 as well as the run - time  @xmath71 .",
    "occasionally , we will write @xmath130 to specify the underlying initial configuration .",
    "the first main result of this section , summarized in the following theorem , is that it suffices to examine each vertex  @xmath27 separately .",
    "[ thm : main ] the discrepancy between propp machine and linear machine after  @xmath71 time steps is the sum of the contributions @xmath131 of all vertices  @xmath27 , i.e. , @xmath132    our aim in this paper is to prove a sharp upper bound for the single - vertex discrepancies @xmath133 for all  @xmath80 and  @xmath71 .",
    "as discussed already , by symmetry we may always assume @xmath134 .",
    "to get rid of the dependency of  @xmath71 , let us define @xmath135 to be the supremum contribution of  @xmath27 over all initial configurations and all  @xmath71 .",
    "we will shortly see that the supremum actually is a maximum ( corollary  [ cor : onlyex ] ) , that is , there is an initial configuration and a time  @xmath71 such that @xmath136 .",
    "since the contribution only depends on @xmath137 and the ( mod-4)-forcing theorem tells us how to manipulate the @xmath123 , we may choose  @xmath71 as large as we like ( and still have a configuration leading to @xmath136 ) .",
    "provided that @xmath138 is finite ( which we prove in the remainder ) , we obtain that @xmath138 is a _",
    "tight _ upper bound for @xmath139 , where the supremum is taken over all initial configurations and all  @xmath71 .    to bound @xmath140 , we need an analogous discussion for negative contributions .",
    "let @xmath141 be the infimum contribution of  @xmath27 over all initial configurations and all @xmath71 .",
    "fortunately , using symmetries , we can show that @xmath142 , hence it suffices to regard positive contributions .",
    "let us shortly sketch the symmetry argument and then summarize the above discussion .",
    "observe that sending one chip in each direction at the same time does not change @xmath131 .",
    "that is , for all  @xmath27 and  @xmath28 we have @xmath143 this follows right from the definition of @xmath144 and the elementary fact @xmath145 .",
    "based on equation   we will ignore piles of four chips ( and multiples ) at a common time  @xmath28 in the remainder of this section .",
    "the remaining one to three chips are called _",
    "odd chips_. note that there is _ no _ relation between odd chips and odd vertices / configurations as defined in section  [ sec : preliminaries ] .    to describe the symmetries of @xmath146",
    ", we further distinguish the non - circular rotor sequences .",
    "[ alternating ] we call @xmath147 and @xmath148 _ @xmath109-alternating _ and @xmath149 and @xmath150 _",
    "@xmath151-alternating_. now a short look at the definition of @xmath152 reveals symmetries like @xmath153 for circular rotor sequences , @xmath154 for @xmath109-alternating rotor sequences , and @xmath155 for @xmath151-alternating rotor sequences .",
    "the following lemma exhibits symmetries for @xmath152 and @xmath156 .",
    "it shows that the discrepancies caused by having too few or too many chips have the same absolute value .",
    "[ lem : sym ] for all @xmath50 , the following symmetries hold for    * circular rotor sequences : @xmath157 , * @xmath109-alternating rotor sequences : @xmath157 , * @xmath151-alternating rotor sequences : @xmath158 .",
    "the proofs are not difficult , so we only give the one for the first statement .",
    "we show that for each configuration @xmath159 there is another configuration @xmath160 and a simple permutation @xmath161 of @xmath162 with @xmath163 for all implicit run - times @xmath71 and assuming the clockwise rotor sequence @xmath164 for both @xmath159 and @xmath160 . by theorem  [ thm : parityforcing ]",
    ", there is a configuration @xmath165 which sends , using the rotor sequence @xmath48 , an odd chip from @xmath166 in direction @xmath167 at time  @xmath28 if and only if @xmath159 sends an odd chip from  @xmath168 in direction  @xmath169 at time  @xmath28 .",
    "note that @xmath170 .",
    "a configuration @xmath160 which sends for each single chip @xmath165 sends , _ three _ chips from the same vertex in the same direction at the same time obeys rotor sequence @xmath171 and gives by equation   a contribution @xmath172 . in consequence ,",
    "@xmath173 for the clockwise rotor sequence @xmath171 .",
    "now lemma  [ lem : sym ] immediately yields @xmath174 .",
    "therefore , it suffices to regard maximal contributions .",
    "[ thm : tight ] @xmath175 is a _",
    "tight _ upper bound for the single vertex discrepancies .",
    "in theorem  [ thm : tight ] we expressed the discrepancy as sum of contributions @xmath131 , which in turn are sums of the influences @xmath176 . to bound the discrepancy , we are now interested in the extremal values of such sums . in this section",
    "we derive some monotonicity properties of these sums . for this",
    ", we define @xmath177 for a finite sequence @xmath178 of rotor directions ordered according to a fixed rotor sequence . in the remainder of the article all finite sequences of rotor directions for which we use the calligraphic @xmath179",
    "are ordered according to their respective rotor sequence .",
    "[ def : unimodal ] let @xmath180 .",
    "we call a mapping @xmath181 _ unimodal _ , if there is a @xmath182 such that @xmath183 as well as @xmath184 are monotone .",
    "we call a mapping @xmath181 _ bimodal _ , if there are @xmath185 such that @xmath183 , @xmath186 , and @xmath187 are monotone .",
    "we call a mapping @xmath181 _ strictly bimodal _ , if it is bimodal , but not unimodal . in the following ,",
    "we show that all @xmath188 are bimodal in  @xmath28 .    from equation",
    "we see that @xmath189{200pt } \\vspace{-.7\\baselineskip } \\begin{align }      { \\textsc{inf}}({{\\ensuremath { \\mathbf{x}}}},({{\\ensuremath { \\mathbf{a}^{\\!(1)}}}},{{\\ensuremath { \\mathbf{a}^{\\!(2)}}}},{{\\ensuremath { \\mathbf{a}^{\\!(3)}}}}),t ) & =           -{\\textsc{inf}}({{\\ensuremath { \\mathbf{x}}}},{\\textsc{dir}}\\setminus\\{{{\\ensuremath { \\mathbf{a}^{\\!(1)}}}},{{\\ensuremath { \\mathbf{a}^{\\!(2)}}}},{{\\ensuremath { \\mathbf{a}^{\\!(3)}}}}\\},t ) \\text{\\ \\",
    "and}\\notag\\\\      { \\textsc{inf}}({{\\ensuremath { \\mathbf{x}}}},({{\\ensuremath { \\mathbf{a}^{\\!(1)}}}},\\ldots,{{\\ensuremath { \\mathbf{a}^{\\!(k)}}}}),t ) & = { \\textsc{inf}}({{\\ensuremath { \\mathbf{x}}}},({{\\ensuremath { \\mathbf{a}^{\\!(1)}}}},\\ldots,{{\\ensuremath { \\mathbf{a}^{\\!(k-4)}}}}),t ) \\text{\\ \\ for $ k\\geq4$.}\\notag \\end{align } \\end{minipage }      \\label{eq : inf0}\\ ] ] this shows that it suffices to examine @xmath188 for @xmath179 of length one and two , which is done in lemmas  [ lem : inf ] and  [ lem : inff ] , respectively . for both proofs , we need descartes rule of signs , which can be found in  @xcite .",
    "the number of positive roots counting multiplicities of a non - zero polynomial with real coefficients is either equal to its number of coefficient sign variations ( i.e. , the number of sign changes between consecutive nonzero coefficients ) or else is less than this number by an even integer .",
    "[ thm : descartes ]    with this , we are now well equipped to analyze the monotonicity of @xmath190 for @xmath191 .    for all  @xmath37 and @xmath192 , @xmath176 is bimodal in  @xmath28 .",
    "it is strictly bimodal if and only if    1 .",
    "@xmath193  and 2 .",
    "@xmath194 or @xmath195 .",
    "[ lem : inf ]    a chip at vertex  @xmath27 requires at least @xmath196 time steps to arrive at the origin .",
    "hence , @xmath197 for @xmath198 .",
    "we show that @xmath199 has at most two extrema larger than @xmath196 .",
    "the discrete derivative of @xmath176 in  @xmath28 is @xmath200 with @xmath201 we observe that the number of extrema of @xmath199 is exactly the number of roots of @xmath202 . since this a polynomial of degree 4 in  @xmath28 , we can use descartes sign rule and some elementary case distinctions to show that @xmath202 has at most two roots larger than @xmath196 .",
    "a closer calculation reveals that @xmath202 has precisely two roots larger than @xmath196 if @xmath193 and one of @xmath194 and @xmath195 hold .    for all @xmath37 and @xmath203 such that @xmath204 , @xmath205 is unimodal in  @xmath28 .",
    "[ lem : inff ]    the discrete derivative of @xmath205 is @xmath206 with @xmath207 as defined in the proof of lemma  [ lem : inf ] .",
    "as there , the extrema of @xmath144 are the roots of the quartic function @xmath208 .",
    "descartes sign rule now shows that @xmath208 has at most one root larger than @xmath196 for all  @xmath27 and @xmath204 .",
    "we now fix a position  @xmath27 and a rotor sequence @xmath171 to examine @xmath135 .",
    "lemmas  [ lem : inf ] and  [ lem : inff ] show that @xmath209 is bimodal in  @xmath28 for all finite sequences @xmath178 of rotor directions ordered according to @xmath171 .",
    "hence , for all @xmath179 there are at most two times at which the monotonicity of @xmath209 changes .",
    "a time  @xmath28 at which the monotonicity of @xmath209 changes for some @xmath179 is called _ extremal_. in case of ambiguities , we define the first such time to be extremal .",
    "that is , for unimodal @xmath209 , we choose the first time @xmath110 such that @xmath209 is monotone for @xmath210 and @xmath211 .",
    "analogously , for strictly bimodal @xmath209 , we choose the first times @xmath110 and @xmath212 such that @xmath209 is monotone for @xmath210 , @xmath213 , and @xmath214 .",
    "the set of all _ extremal times _ is denoted by @xmath215 .",
    "@xmath215 can be computed easily . by equation",
    "it suffices to consider @xmath179 of length one and two .",
    "the corresponding extremal times are the ( rounded ) roots of the polynomials @xmath207 and @xmath208 given in lemma  [ lem : inf ] .",
    "the following lemma shows that the number of extremal times is very limited .",
    "@xmath216 [ lem : smallex ]    according to lemma  [ lem : inf ] , there is at most one rotor direction  @xmath43 for which @xmath176 is _ strictly _ bimodal in  @xmath28 .",
    "hence , the number of extremal times of @xmath188 with @xmath217 is at most five . for a rotor sequence @xmath218 , equation   and lemma  [ lem : inff ]",
    "show that @xmath219 and @xmath220 are unimodal in  @xmath28 .",
    "therefore , the total number of extremal times of @xmath205 with @xmath221 obeying @xmath171 is at most two .",
    "between two successive times @xmath222 , @xmath209 is monotone in  @xmath28 for all @xmath179 .",
    "such periods of time @xmath223 $ ] we call a _ phase_. note that @xmath209 could also be constant in a certain phase .",
    "this implies that it is monotonically increasing as well as monotonically decreasing .",
    "[ def : inc ] to avoid this ambiguity , we use the terms increasing and decreasing ( in contrast to monotonically increasing and decreasing ) based on the minima and maxima at extremal times @xmath215 , which are unambiguously defined and alternating .",
    "we now define precisely when a function @xmath209 is increasing or decreasing .",
    "consider the set @xmath224 of the extremal times of @xmath209 as defined above . by lemmas  [ lem : inf ] and  [ lem : inff ]",
    "we know that @xmath225 .",
    "we call @xmath209 _ increasing _ at @xmath28 if it has a minimum at the maximal @xmath226 with @xmath227 or a maximum at the minimal @xmath226 with @xmath228 .",
    "analogously , we call @xmath209 _ decreasing _ at @xmath28 if has a maximum at the maximal @xmath226 with @xmath227 or a minimum at the minimal @xmath226 with @xmath228 .    by abuse of language ,",
    "let us say that @xmath27 sends odd chips at time @xmath28 if @xmath229 @xmath230 .",
    "[ lem : onlyex ] let @xmath159 be an arbitrary configuration with run - time @xmath231 and let @xmath232 be the corresponding contribution of  @xmath27 . then there is a configuration @xmath165 with the same run - time and @xmath233 that sends odd chips only at extremal times , i.e. , for the associated @xmath234 satisfies @xmath229 @xmath230 only if @xmath235 .    let @xmath165 be a configuration with @xmath236 and a minimal number of non - extremal times at which odd chips are sent from  @xmath27 .",
    "we assume this number to be greater than zero and show a contradiction .",
    "the sum of the @xmath144s of all chips sent at a certain non - extremal time  @xmath28 is either increasing or decreasing in the phase @xmath28 lies in .",
    "let us first assume that it is increasing .",
    "let @xmath237 be the minimal @xmath237 such that @xmath238 or there are odd chips sent at time @xmath237 ( assume for the moment that such a @xmath237 exists ) . then , sending the considered pile of odd chips at time @xmath237 instead of time  @xmath28 decreases the number of non - extremal times while not decreasing its contribution .",
    "such a modified configuration exists by theorem  [ thm : parityforcing ] and contradicts our assumption on @xmath165 .",
    "therefore , there is no such time @xmath237 .",
    "this implies that  @xmath28 lies in the last phase and that the odd chips sent at time  @xmath28 are the last to be sent at all .",
    "by @xmath239 for all  @xmath43 , the contribution of the chips sent at time  @xmath28 is negative ( since increasing ) .",
    "hence , not sending these chips at all does not decrease @xmath240 , but the number of non - extremal times .",
    "the same line of argument holds if the sum of the @xmath144s is decreasing instead of increasing . in this case",
    "we use that @xmath197 for all @xmath241 .",
    "lemma  [ lem : onlyex ] immediately gives the following corollary .",
    "there is an initial configuration and a time  @xmath71 such that @xmath242 .",
    "the configuration can be chosen such that @xmath229 @xmath230 only if @xmath235 .",
    "@xmath71 can be chosen arbitrarily as long as @xmath243 .",
    "[ cor : onlyex ]    lemma  [ lem : smallex ] and corollary  [ cor : onlyex ] already give a simple , but costly approach to calculate @xmath135 : there are four different initial rotor directions for  @xmath27 and at each ( of the at most seven ) extremal time we can either send 0 , 1 , 2 , or 3 odd chips . as all subsequent rotor directions are chosen according to @xmath171 , there are only a constant @xmath244 configurations to consider .",
    "the maximum of the respective @xmath131 will be @xmath135 by corollary  [ cor : onlyex ] .",
    "fortunately , we can also find the worst - case configuration directly .",
    "block _ of a phase @xmath223 $ ] is a 4-tupel @xmath245 of rotor directions in the order of @xmath171 such that @xmath246 is increasing in  @xmath28 in this phase for all  @xmath247 . by equation  , this is equivalent to @xmath248 being decreasing in  @xmath28 within the phase for all  @xmath249 .",
    "each phase has a unique block .",
    "this is determined by the monotonicities of @xmath188 with @xmath191 .",
    "[ lem : uniq_block ]    consider a fixed phase .",
    "we want to show that for all valid combinations of monotonicities of @xmath188 with @xmath191 within this phase , there is exactly one permutation @xmath250 of @xmath251 obeying @xmath171 such that @xmath250 forms a block .    to describe the _ type _ of monotonicity of @xmath176 within the phase , we use a function @xmath252 with @xmath253 if @xmath176 is increasing and @xmath254 if it is decreasing .",
    "this notation should indicate the direction in which the respective @xmath176 is increasing . as a short form we also use @xmath255 .    by equation",
    ", we know that there is at least one  @xmath43 of type  @xmath256 . if there is exactly one direction  @xmath43 of type  @xmath256 , then the unique permutation @xmath250 of @xmath251 obeying @xmath171 such that @xmath257 is the uniquely defined block . if there are three rotor directions  @xmath43 of type  @xmath256 , the block is analogously uniquely defined by @xmath258 .",
    "it remains to examine the case of exactly two rotor directions of type  @xmath256 .",
    "if these two directions are consecutive in @xmath171 , @xmath259 again defines the unique block .",
    "otherwise , rotor directions of type  @xmath256 and @xmath260 are alternating in the rotor sequence and @xmath261 is the only type possible for a block .",
    "this allows two blocks @xmath250 and @xmath262 .",
    "the choice between these two is uniquely fixed by the monotonicity of @xmath205 .",
    "therefore , in all cases there is exactly one unique block .",
    "we now use lemma  [ lem : uniq_block ] to define a particular configuration , which we call _ block configuration_. by theorem  [ thm : parityforcing ] , we may specify a configuration sufficiently well by fixing the number of odd chips at all times and locations . in a block configuration @xmath263 , a vertex  @xmath27 sends odd chips only at extremal times @xmath235 .",
    "let @xmath264 and @xmath265 denote the blocks in the phases ending and starting at  @xmath28 .",
    "then  @xmath27 sends @xmath25  chips at time  @xmath28 in directions @xmath266 , where @xmath25 is such that @xmath267 and @xmath268 obeys @xmath171 .",
    "this uniquely defines when and in which directions odd chips are sent .",
    "note that we used the blocks only as a technical tool .",
    "there are not necessarily chips sent corresponding to @xmath269 and @xmath270 . by theorem  [ thm : parityforcing ] , there are configurations @xmath263 as just defined and for all  @xmath27 all of them have the same contribution @xmath271 .    _ example . _",
    "we now derive the block configuration of the position @xmath272 with the clockwise rotor sequence @xmath273 . by calculating the roots of the polynomials @xmath207 and @xmath208 given in lemma  [ lem : inf ] ,",
    "it is easy to verify that    * @xmath274 is unimodal with minimum at @xmath275 .",
    "* @xmath276 is bimodal with minimum at @xmath277 and maximum at @xmath278 , * @xmath279 is unimodal with maximum at @xmath280 , * @xmath281 is unimodal with minimum at @xmath282 , * @xmath283 and @xmath284 are unimodal with minimum at @xmath275 .",
    "* @xmath285 and @xmath286 are unimodal with maximum at @xmath275 .    hence , the extremal points are @xmath287 .",
    "figure  [ fig : inf59 ] depicts the plots of @xmath176 .",
    "the modes of @xmath188 listed above uniquely determine the blocks of each phase .",
    "the following table lists rotor directions and type of the block of each phase .",
    "[ cols=\"^,^,^,^,^ \" , ]     as one might have expected , for random initial rotor directions the two non - circular rotor sequences ( columns one and three ) are statistically not distinguishable .",
    "the results above again show that different rotor sequences do make a difference .",
    "the main open problem , however , remains to show the conjectured constant upper bound for  @xmath288 .",
    "one way of comparing the propp machine with a random walk is in terms of the maximal discrepancy that can occur on a single vertex .",
    "it has been shown by @xcite that for the underlying graph being an infinite grid  @xmath0 , this single vertex discrepancy can be bounded by a constant @xmath5 independent of the particular initial configuration . for @xmath6 ,",
    "this constant has been estimated as @xmath289 in  @xcite . also , the initial configurations leading to a high discrepancy have been described . for @xmath290 ,",
    "no such results were known .    in this paper , we regarded the case @xmath291 .",
    "we chose the case @xmath291 out of two considerations .",
    "on the one hand , from dimension two on , there is more than one rotor sequence available , which raises the question if different rotors sequences make a difference .",
    "one the other hand , we restrict ourselves to @xmath291 , because for larger @xmath292 a nice expression for the probability @xmath38 that a chip from vertex  @xmath27 arrives at the origin after @xmath28 random steps is missing . this probably makes it very hard to find sufficiently sharp estimates for the single vertex discrepancies .",
    "we were able to give relatively tight estimates for the constants @xmath293 taking into account different rotor sequences and obtain several interesting facts about the worst - case initial configurations .",
    "the maximal single vertex discrepancy @xmath293 satisfies the following .",
    "if all vertices have the same circular rotor sequence , @xmath294 . if all vertices have the same non - circular rotor sequence , @xmath295 .",
    "if all vertices may have different rotor sequences , and we assume that each vertex has a rotor sequence leading to a maximal contribution , then @xmath296 . in particular , we see that non - circular rotor sequences seem to produce smaller discrepancies than circular one .",
    "the gaps between upper and lower bounds stem from the fact that we used a computer to calculate the precise maximal contribution @xmath297 of vertex  @xmath27 on the discrepancy at @xmath80 .",
    "hence the lower bounds are the maximal discrepancies obtained from initial configurations such that all vertices  @xmath27 with @xmath298 at all times contain numbers of chips only that are divisible by 4 .",
    "we also learned that the initial configurations leading to such discrepancies are more complicated than in the one - dimensional case .",
    "recall from  @xcite that in the one - dimensional case in a worst - case setting each position needs to have an odd number of chips only once .",
    "if we aim at a surplus of chips in the propp model , these odd chips were always sent towards the position under consideration , otherwise away from it .    in the two - dimensional case ,",
    "things are more complicated . here",
    "it can be necessary that a position holds a number of chips not divisible by 4 up to three times .",
    "also , the number of `` odd '' chips ( those which can not be put into piles of four ) can be as high as nine . in consequence",
    ", it can make sense to send odd chips in the wrong direction ( e.g. , away from the position where we aim at a surplus of chips ) .",
    "an example showing this was analyzed in section  [ sec : upper ] .",
    "the reason for such behavior seems to be that the influences @xmath299 of odd chips sent from  @xmath27 in direction @xmath300 at time @xmath28 are not unimodal functions in @xmath28 anymore ( as in the one - dimensional case ) .    in figures  [ fig : plotdirs ] to  [ fig : val ] , more information about the behavior of different positions in a worst - case setting ( aiming at a surplus of chips at the origin ) is collected .",
    "we also briefly regarded the idla aggregation model .",
    "we saw that the surprisingly strong convergence to a eucledian ball observed in earlier research also holds for non - circular rotor sequences and non - regular initial rotor settings .",
    "however , the suspected constant again seems to depend on the rotor sequences , and again , the circular ones seem to behave slightly worse than the non - circular ones .",
    "we would like to thank joel spencer and jim propp for several very inspiring discussions .",
    "joshua cooper , benjamin doerr , joel spencer , and gbor tardos .",
    "deterministic random walks on the integers . _",
    "european journal of combinatorics_. to appear , preliminary version available from arxiv : math/0602300 ."
  ],
  "abstract_text": [
    "<S> jim propp s rotor router model is a deterministic analogue of a random walk on a graph . instead of distributing chips randomly , each vertex serves its neighbors in a fixed order . </S>",
    "<S> we analyze the difference between propp machine and random walk on the infinite two - dimensional grid . </S>",
    "<S> it is known that , apart from a technicality , independent of the starting configuration , at each time , the number of chips on each vertex in the propp model deviates from the expected number of chips in the random walk model by at most a constant . </S>",
    "<S> we show that this constant is approximately 7.8 , if all vertices serve their neighbors in clockwise or counterclockwise order and 7.3 otherwise . </S>",
    "<S> this result in particular shows that the order in which the neighbors are served makes a difference . </S>",
    "<S> our analysis also reveals a number of further unexpected properties of the two - dimensional propp machine .    </S>",
    "<S> [ firstpage ] </S>"
  ]
}