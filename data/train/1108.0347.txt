{
  "article_text": [
    "hidden markov models ( _ hmms _ ) are standard probabilistic models for state sequences in sequential data labeling @xcite .",
    "subsequence constrained entropy of _ hmm _ explaining an observation sequence and state sequence entropy , are useful quantities which provide a measure of _ hmm _ uncertainty .",
    "one criterion for the estimation of the _ hmm _ quality is the entropy of state sequence explaining an observation sequence , which provides a measure of its uncertainty @xcite , @xcite .",
    "the algorithms for _ hmms _ mostly consider efficient marginalization which is usually performed using the forward - backward algorithm ( @xcite ) , which runs in @xmath0 time , where @xmath1 denotes the number of states and @xmath2 is the length of sequence .",
    "recently , mann and maccllum have developed an algorithm for computation of _ hmm _ subsequence constrained entropy for similar probabilistic model conditional random fields ( _ crf _ ) , which is based on the marginal probabilities computation @xcite with the same asymptotical complexity as @xmath3 .",
    "this algorithm can be adapted to work with _ hmms _ , but when the sequence length is large it becomes memory demanding , since it needs @xmath4 memory . on the other hand , hernando et al .",
    "@xcite developed the memory efficient algorithm for state sequence entropy computation which requires @xmath5 memory .",
    "the algorithm has the same time complexity as _ fb _ , but it is not applicable for the computation of subsequence constrained entropy .    in this paper",
    "we develop a new algorithm which can be used for both types of computations .",
    "the algorithm is based on forward - backward recursion over the entropy semiring @xcite and is called entropy semiring forward - backward algorithm ( _ esrfb _ ) . _ esrfb _ has lower memory requirement than mann - maccallum s algorithm subsequence constrained entropy computation .",
    "furthermore , when it is used with the forward pass only it can compute the entropy in the same time and space as hernando et al.s algorithm .",
    "moreover , it is shown how the hernando et al.s algorithm can be derived from _",
    "esrfb_.    the paper is organized as follows . in section",
    "ii we define the _ hmm _ and present the forward - backward algorithm ( _ fb _ ) for efficient marginalization of _",
    "hmm_. section iii reviews the algorithms by hernando et .",
    "al . and mann and mccallum , for efficient computation of _ hmm _ entropy and subsequence constrained entropy for a given observation sequence .",
    "section iv gives the general _ fb _ algorithm which operates over the commutative semiring .",
    "finally , section v considers the _ fb _ over the entropy semiring and its application to _ hmm _ entropy computation .",
    "in this paper , we adopt the following notation :    * the sequence @xmath6 is shortly denoted with @xmath7 , and the sequence @xmath8 is denoted with @xmath9 * big letters are used for random variables ( @xmath10 ) and the small ones for their realizations ( @xmath11 ) . *",
    "the sequence of symbols is @xmath12 is denoted with @xmath13 , the sequence @xmath14 with @xmath15 and similarly for @xmath16 , @xmath17 and @xmath18 for @xmath19 . *",
    "the sequences @xmath20 , @xmath21 , @xmath22 and @xmath23 are denoted with @xmath24 , @xmath25 , @xmath26 and @xmath27 , respectively . *",
    "the variables are omitted in probability notation .",
    "thus , @xmath28 stands for @xmath29 , @xmath30 for @xmath31 and so on .    hidden markov model (",
    "_ hmm _ ) consists of the following elements :    * a markov chain @xmath32 , represented by an @xmath33 stochastic matrix @xmath34 , which describes the transition probabilities @xmath35 between the @xmath1 states of the model , together with a probability distribution @xmath36 , where @xmath37 .",
    "* a set of probability distributions , one for each hidden state , @xmath38 , which model the emission of such observations .",
    "if there are @xmath39 possible distinct observations , we accommodate the probability distributions to be in the rows of an @xmath40 matrix @xmath41 .    with these settings , the joint probability that state sequence @xmath24 takes value @xmath26 and the observation sequence @xmath25 takes value @xmath27",
    "is given with : @xmath42    using the probability conditions @xmath43 and @xmath44 , we can derive two important equations which characterizes _ hmm _ and will be used in the rest of the paper : @xmath45    one of the main problems in _ hmms _ is efficient marginalization of computation of the _ hmm _ conditional probability @xmath46 : @xmath47    the computation of ( [ hmm : p_lr ] ) by enumerating all the @xmath48 requires about @xmath49 additions and multiplications , which would be infeasible even for small values of @xmath1 and @xmath2 ( for @xmath50 and @xmath51 , the total number of operations has an order @xmath52 ) .",
    "a more efficient way is the _ forward - backward_(_fb _ ) algorithm which solves the problems by use of @xmath53 operations . in this paper",
    "we present a numerical stable variant of _",
    "fb_. for another variants see @xcite , @xcite , @xcite    the forward - backward algorithm recursively computes desired quantities using the _ hmm _ forward and backward probabilities : @xmath54 as follows .",
    "for @xmath55 : @xmath56      for @xmath57 , @xmath55 : @xmath58      for @xmath59 : @xmath60      for @xmath61 , @xmath62 : @xmath63    the normalization factors @xmath64 ensure that the probabilities sums to one and represents the conditional observational probabilities : @xmath65 once the forward and backward probabilities are computed we can compute the marginal as @xmath66 two most commonly used marginals @xmath67 and @xmath68 can be computed as follows @xmath69    the majority of computations are performed in the forward and backward recursion phases , which results in the time complexity @xmath0 .",
    "the storing of all forward and backward vectors along with the normalization factors requires @xmath4 memory .",
    "the conditional entropy of _ hmm _ is given with @xmath70 while , the subsequence constrained entropy is @xmath71 if we introduce @xmath72 we can derive the following equality @xmath73    a direct evaluation of ( [ hmm_en : h_s_o ] ) is infeasible as there are @xmath74 terms . in the following text we consider efficient algorithms for the entropy computation .",
    "first , in the next two subsections , we review two algorithms based on the entropy decomposition rules @xcite @xmath75 after that , in the next section we derive the new algorithms based on the _ esrfb _ algorithm .",
    "mann and mccallum proposed the algorithm for the linear chain _ conditional random fields _ entropy gradient computation @xcite , which can also be used for _ hmms_. the algorithm uses the conditional probabilities @xmath76 which , in turn , are computed using the _ fb _ algorithm and the forward and backward entropies , which , in turn , are computed with the recursive procedure based on the entropy decomposition formulas ( [ hmm_en : h_dec ] ) .",
    "the forward entropy @xmath77 at time @xmath78 is defined as the entropy of state sequence @xmath79 which ends in @xmath80 , for a given observation sequence @xmath27 : @xmath81 while the backward entropy @xmath82 at time @xmath78 is the entropy of state sequence @xmath83 which starts in @xmath80 : @xmath84 using the forward and backward entropies , subsequence constrained entropy conditional _ hmm _ entropy can be recursively computed as in the following algorithm .",
    "compute and store forward and backward probabilities using _ fb _ algorithm .      for @xmath85 : @xmath86      for @xmath87 , @xmath88 : @xmath89 where @xmath90 is computed using ( [ hmm_en : fbe : p_t_t+1 ] ) , ( [ hmm : xi_t ] ) and ( [ hmm : gamma_t ] ) .",
    "for @xmath85 : @xmath91      for @xmath87 , @xmath88 : @xmath92 where @xmath90 is computed using ( [ hmm_en : fbe : p_t_t-1 ] ) , ( [ hmm : xi_t ] ) and ( [ hmm : gamma_t ] ) .",
    "@xmath93    the time complexity of algorithm is @xmath94 , where @xmath53 is for the forward - backward entropy computation and @xmath95 for the termination phase .",
    "the memory complexity depends on the sequence length since all forward and backward vectors should be available in forward and backward entropy recursion phases ; regarding @xmath95 space required for storing the results in the termination phase , the total memory complexity is @xmath96 .",
    "the algorithm can also be used for the computation of entropy using the equality @xmath97 which follows from the entropy decomposition formulas and definition of forward entropy . in this case , the backward entropy pass is not needed , but the time and memory complexity are not reduced , since the forward and backward probabilities still need to be computed . in the following subsection we review the algorithm developed in @xcite by hernando et al . , which computes the entropy with the memory complexity independent of the sequence length .      in @xcite ,",
    "herando et al .",
    "develop the recursive algorithm for the computation of hidden markov model entropy .",
    "it uses _ hmm _ forward probability @xmath98 conditional probability @xmath99 and intermediate entropy @xmath100 _ hmm _ entropy is computed as follows .    0.5 cm      for @xmath85 set : @xmath101 @xmath102      for @xmath103 and @xmath85 set : @xmath104 @xmath105",
    "@xmath106      @xmath107    the algorithm runs with the linear time complexity @xmath108 and in fixed memory space independent of sequence length , @xmath109 , since the vectors @xmath110 , @xmath111 and the matrix @xmath112 should be computed only once in @xmath113-th iteration and , after having been used for the computation of @xmath114 , they can be deleted .",
    "the _ fb _ algorithm for _ hmms _ works for more general models in which the factors in ( [ hmm p expanded ] ) are not probabilities but the functions whose range is a commutative semiring @xcite . in this section we present the forward - backward over the commutative semiring and",
    "derive the _",
    "fb _ for _ hmms _ as a special case .",
    "we begin with the definition of the commutative semiring .    a _",
    "commutative semiring _ is a set @xmath115 with operations @xmath116 and @xmath117 such that both @xmath116 and @xmath117 are commutative and associative and have identity elements in @xmath115 ( @xmath118 and @xmath119 respectively ) , and @xmath117 is distributive over @xmath116 .    let @xmath120 be a set of variables taking values from the set @xmath121 .",
    "we define the _ local kernel _ functions , @xmath122 , @xmath123 for @xmath124 , and the _ global kernel _ function @xmath125 , assuming that the following factorization holds @xmath126 for all @xmath127 .",
    "the _ fb _ algorithm solves two problems    1 .",
    "the _ marginalization problem : _ compute the sum @xmath128 2 .",
    "the _ normalization problem : _ compute the sum @xmath129    similarly as in _ hmm _ , the _ fb _ recursively computes the _ forward variable _ @xmath130 which is initialized to @xmath131 and recursively computed using @xmath132and the _ backward variable _ @xmath133 which is recursively computed using @xmath134 and initialized to @xmath135 once , the forward @xmath136 and backward @xmath137 variables are computed , we can solve the marginalization problem by use of the formula @xmath138    the normalization problem can be solved with the forward pass only according to @xmath139    in the following subsection we derive the _ fb _ algorithm for _ hmms _ as a special case of the _ fb _ over the commutative semiring .      the conditional _",
    "hmm _ probability @xmath46 can be seen as a special case of the global kernel factorization ( [ fsr : u - chain ] ) if @xmath116 and @xmath117 stand for the addition and multiplication of the real numbers . to clarify this ,",
    "recall that join _ hmm _ probability ( [ hmm p expanded ] ) has the form @xmath140 and that according to the chain rule , conditional observational probability can be represented as @xmath141 where @xmath142 and @xmath143 as in ( [ hmm : c0_ct ] ) .",
    "then , @xmath144 where @xmath145 according to the equation ( [ hmm : p_subseq ] ) , the subsequence conditional probabilities can be represented as @xmath146 , and the forward variable ( [ fsr : alpha_def ] ) has the form @xmath147 in agreement with ( [ hmm : alpha_def ] ) .",
    "the recursive equations ( [ fsr : alpha_rec ] ) , ( [ fsr : alpha_init ] ) for the forward variable have the form @xmath148 @xmath149 and the normalization factors can be computed using the probability condition @xmath150 which gives @xmath151 and the definition of forward variable and its recursive equations agrees with the equations from section [ hmm ] .",
    "similarly , according to the equation ( [ hmm : p_subseq_right ] ) , @xmath152 , the backward variable is @xmath153 with the recursive equation : @xmath154 @xmath155 finally , in the same manner , the equation ( [ fsr : v_ab ] ) reduces to ( [ hmm : p_lr_solution ] ) @xmath156 which retrives the _ hmm _ forward - backward algorithm .",
    "in this section we consider the forward - backward algorithm over the entropy semiring ( _ esrfb _ ) and its application to _ hmm _ entropy computation .",
    "the entropy semiring ( _ esr _ ) , which is introduced in @xcite and @xcite , is defined as follows .",
    "[ esrfa : esr_operations_def ] the entropy semiring is a the commutative semiring for which @xmath157 and the semiring operations are defined with : @xmath158 for all @xmath159 , @xmath160 from @xmath161 .",
    "the identities for @xmath116 and @xmath117 are @xmath162 and @xmath163 , respectively .    the first component of an ordered pair",
    "is called a @xmath164-part , while the second one is an @xmath165-part .",
    "the following lemma can be proven by the induction ( see @xcite ) .",
    "[ esrfa : lema : 1 ] let @xmath166 for all @xmath167 . then , the following equality holds :    @xmath168    let the local kernels in ( [ fsr : u - chain ] ) have the form : @xmath169 where @xmath170 with @xmath142 , @xmath143 and @xmath171 from lemma 1 , it follows that the @xmath164 and @xmath165 parts of the global kernel @xmath172 are given with : @xmath173 note that @xmath174 and , according to the factorization ( [ fsr : hmm : p_s_o_fact ] ) for _ hmm _ conditional probability @xmath175 , we can represent the global kernel as follows @xmath176 hence , by summing of the global kernel we can obtain the entropies @xmath177 or @xmath178 as the @xmath165 part of the sum , which depends on the set of the variables which are summed out .",
    "two types of the summation correspond to the normalization and marginalization of the global kernel which can be solved with the forward - backward algorithm over the entropy semiring .",
    "the @xmath164 and @xmath165 parts of the forward and backward variables in the entropy semiring can also be derived using lemma [ esrfa : lema : 1 ] . for the forward vector , @xmath179",
    "we have @xmath180 and by use of the equality @xmath181 , we obtain @xmath182 the @xmath164-part of the _ esr _ forward vector is the _ hmm _ forward probability as defined in the sections [ hmm ] and [ fsr : hmm ] , while the information about subsequence entropies is propagated through the @xmath165-part , so that at each step we have @xmath183    the forward vector is initialized to @xmath184 and regarding ( [ jt_esr_factor_zero ] ) we have : @xmath185    the @xmath164 and @xmath165 forward recursive equation @xmath186can be determined using the definition of the entropy semiring as @xmath187 or equivalently @xmath188 similarly as in sections [ hmm ] and [ fsr : hmm ] , factors @xmath64 can be found by normalization of @xmath164-parts : @xmath189    the backward vector @xmath190 has corresponding @xmath164 and @xmath165 parts @xmath191 the equality ( [ hmm : p_subseq_right ] ) implies @xmath192 and we have @xmath193 which gives the @xmath164-part of the _ esr _ backward vector , the same as _ hmm _ backward probability from the sections [ hmm ] and [ fsr : hmm ] .",
    "the backward vector is initialized according to @xmath194 : @xmath195    while the recursive equation @xmath134 reduces to @xmath196 or equivalently @xmath197 where the normalization constants @xmath64 are computed in the forward pass .",
    "if the summation of the global kernel ( [ esrfa : u_p_plogp ] ) is performed over the whole sequence @xmath198 the @xmath164 and @xmath165 parts of the sum reduce to @xmath199 the @xmath165 part of the sum corresponds to the _ hmm _ entropy and it can be found as a solution of the normalization problem @xmath200 using only the forward pass , according to equations ( [ emp_hmm : alpha_z_init])-([emp_hmm : alpha_h_init ] ) , ( [ emp_hmm : alpha_z_rec])-([emp_hmm : c_t ] ) , as follows .",
    "for @xmath201 set : @xmath202 @xmath203      for @xmath103 , @xmath85 compute @xmath204      terminate algorithm with summations : @xmath205    the _ esrfb _ algorithm runs in @xmath53 time using @xmath5 space as in hernando et al.s algorithm .",
    "moreover , both algorithms recursively compute the forward probability @xmath206 the difference in two algorithms is in the second quantity which is computed - in hernando et al.s algorithm it is the intermediate entropy @xmath207 while in the _ esrfb _ it is the @xmath165-part of the forward vector : @xmath208 the relation between the quantities @xmath209 can easily be derived by use of the elementary probability transformations .",
    "furthermore , from _ hmm _ joint probability factorization ( [ hmm p expanded ] ) we can derive the markov properties @xmath210 which imply the following equalities : @xmath211 where @xmath212 as defined in the hernando et al.s algorithm .",
    "then , the recursive equations for @xmath213 derived by hernando et al . can also be obtained from the _ esrfb _ algorithm by substituting ( [ emp_hmm : en : z ] ) and ( [ emp_hmm : en : alpha_ht ] ) in recursive equations for @xmath214 in _ esrfb _ algorithms , which give us the close relation between two algorithms .",
    "if the summation of the global kernel is performed over a subsequence @xmath215 @xmath216 the @xmath164 and @xmath165 parts of the sum are @xmath217 the @xmath165 part of the sum corresponds to the _ hmm _ subsequence constrained entropy and it can be found as a solution of the marginalization problem @xmath218 the @xmath164 and @xmath165 parts can be found using the definition for the entropy semiring operations : @xmath219    @xmath220    to compute the @xmath165-part of the marginal , we need @xmath221-th forward and @xmath222-th backward vectors .",
    "the @xmath221-th forward vector can be computed by _ esr _ forward algorithm using recursive equations ( [ emp_hmm : en : c_0])-([emp_hmm : en : alpha_t_h ] ) .",
    "however , the recursive steps ( [ emp_hmm : en : c_t])-([emp_hmm : en : alpha_t_h ] ) for the normalization constants @xmath64 and the @xmath164 part of forward vectors should be performed for all @xmath78 , because the normalization constants @xmath223 should be available in the backward pass .",
    "once the normalization constants are computed , the backward pass can be performed according to the equations ( [ emp_hmm : beta_z_init ] ) , ( [ emp_hmm : beta_z_rec])-([emp_hmm : beta_h_rec ] ) , and , after that , we can compute the subsequence constrained entropy using the equalities ( [ emp_hmm : suben : v_lr_z])-([emp_hmm : suben : v_lr_h ] ) and ( [ hmm_en : h_s_lr_final ] ) .",
    "the algorithm follows .",
    "for @xmath201 set : @xmath224 @xmath203      for",
    "@xmath225 , @xmath85 compute @xmath226      for @xmath227 , @xmath85 compute @xmath228      for @xmath201 set : @xmath229      for @xmath230 , @xmath85 compute @xmath231      for @xmath232 , @xmath233 , compute the subsequence constrained entropy : @xmath234    @xmath235    @xmath236    the time complexity of the algorithm is @xmath94 , where @xmath53 is for the forward - backward recursion , and @xmath95 for the termination phase , which is the same time complexity as in mann - maccallum s algorithm .    on the other hand , full forward recursion phase",
    "can be realized in @xmath237 time and in fixed size memory @xmath5 , since @xmath238 , @xmath239 and @xmath240 can be deleted after having been used for the computation of @xmath241 , @xmath214 and @xmath64 .",
    "similarly , the forward @xmath164-part recursion and backward pass requires @xmath5 space .",
    "only additional space depending on the sequence length @xmath242 should be available for normalization constants in the forward @xmath164-part recursion phase , since they should be available in the backward and termination phases . finally , regarding @xmath95 space required for storing the results in the termination phase ,",
    "the total memory complexity is @xmath243 , which slightly increases with @xmath2 then @xmath244 , as required by mann - maccallum s algorithm .",
    "this paper proposes a new algorithm for memory efficient computation of the _ hmm _ entropy and subsequence constrained entropy when the observation sequence is given .",
    "the algorithm is called entropy semiring forward - backward ( _ esrfb _ ) since it is based on forward - backward recursion over the entropy semiring in the same manner as in our previous paper @xcite .",
    "_ esrfb _ has the same time complexity as a previously developed algorithm for subsequence constrained _ hmm _ entropy computation developed by mann and maccallum @xcite , but with lower memory requirements .",
    "it is also applicable to state sequence entropy computation running with the same time and memory complexity as the recursive algorithm proposed by hernando et al .",
    "in addition , we have shown how the recursive equations in hernando et al.s algorithm can be derived from the _ esrfb _ recursive equations .",
    "jason eisner .",
    "parameter estimation for probabilistic finite - state transducers . in _ proceedings of the 40th annual meeting on association for computational linguistics _ , acl 02 , pages 18 , morristown , nj , usa , 2002 .",
    "association for computational linguistics .",
    "gideon  s. mann and andrew mccallum .",
    "efficient computation of entropy gradient for semi - supervised conditional random fields . in _",
    "human language technologies 2007 : the conference of the north american chapter of the association for computational linguistics ; companion volume , short papers on xx _ , naacl 07 , pages 109112 , morristown , nj , usa , 2007 . association for computational linguistics ."
  ],
  "abstract_text": [
    "<S> the paper presents entropy semiring forward - backward algorithm ( _ esrfb _ ) and its application for memory efficient computation of the subsequence constrained entropy and state sequence entropy of a hidden markov model ( _ hmm _ ) when an observation sequence is given . </S>",
    "<S> _ esrfb _ is based on forward - backward recursion over the entropy semiring , having the lower memory requirement than the algorithm developed by mann and maccallum , with the same time complexity . furthermore , when it is used with forward pass only , it is applicable for the computation of _ hmm _ </S>",
    "<S> entropy for a given observation sequence , with the same time and memory complexity as the previously developed algorithm by hernando et al . </S>"
  ]
}