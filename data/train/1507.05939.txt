{
  "article_text": [
    "the model of first come first served ( fcfs ) infinite bipartite matching was introduced in @xcite , to answer some questions raised in @xcite . at that point the model looked highly intractable .",
    "it was followed by @xcite , where surprisingly it was found that the model is highly tractable , in fact a markov chain associated with the model turned out to have a product form stationary distribution .",
    "a more general infinite bipartite matching model was described in @xcite .",
    "the fcfs infinite matching model was found to be closely related to several queueing models with parallel skill based service @xcite , which surprisingly also have product form solutions .",
    "furthermore , it appears that the fcfs infinite matching model may also be very useful for heavy traffic and for many server approximations of highly intractable queueing models of that form @xcite . in this paper",
    "we continue to derive further properties of the fcfs infinite matching model .",
    "our main results here are to provide a loynes type construction of the stationary model , to show that the model is dynamically reversible , and to reveal its extreme , almost embarrassing , simplicity .",
    "it follows from this underlying structural understanding , that we can obtain stationary distributions and calculate additional performance measures related to the model .",
    "similar to @xcite we consider two independent random sequences : @xmath8 which are chosen respectively i.i.d . from types",
    "@xmath0 and from types @xmath1 according to probabilities @xmath9 , and @xmath10 , and a bipartite compatibility graph @xmath11 , with @xmath12 , where @xmath13 denotes that types @xmath6 and @xmath7 are compatible .",
    "we assume throughout that @xmath2 is connected .",
    "the role of the two sequences is entirely symmetric .",
    "the parameter set can be finite , for instance @xmath14 , one sided infinite , @xmath15 , or two sided infinite , @xmath16 .",
    "we study _ first come first served ( fcfs ) matchings _ between the two sequences , as defined precisely in @xcite . loosely speaking it means that a server is matched to the earliest possible compatible customer , and a customer",
    "is matched to the earliest possible compatible server .",
    "figure [ fig.match1 ] illustrates fcfs matching of two sequences , for a given compatibility graph .",
    "* notation * : throughout the paper we shall use the following notations , terms , and illustrations to accompany our mathematical analysis . for convenience we shall refer to @xmath17 as servers , to @xmath18 as customers ( we could equally well call them , according to the context , donors and patients , calls and agents , males and females , buy bids and sell bids ) , and we shall refer to @xmath19 as time ( equivalently we could call it location , position , event ) .",
    "we use @xmath20 to denote the different types of customers , and we use @xmath18 to denote the customer at time ( position ) @xmath21 , and we let the value of @xmath18 be the type of that customer , which is one of @xmath22 .",
    "similarly @xmath7 denotes the types of server , and @xmath17 denotes the server at time ( position ) @xmath23 . in the accompanying figures we will simplify the notation by writing @xmath24",
    "if @xmath25 , and @xmath26 if @xmath27 , and we will arrange the sequences in two lines , the top containing the ordered customers , and the bottom containing the ordered servers . at a later stage",
    "we will sometimes swap items between the lines in a way to be explained then . in illustrations we put a line from @xmath17 to @xmath18 if they are matched , and we call this line a link in the matching , characterized by the pair of times @xmath28",
    ".    we now briefly describe the contents of the sections of the paper . in section [ sec.fcfs ] we state the definition of fcfs matching and summarize some results from @xcite .",
    "these include uniqueness of the fcfs matching of two sequences over @xmath29 , and two specific markovian mechanisms to construct the matching .",
    "we define two markov chains associated with these two mechanisms , which we call _ the natural markov chains _ , and state the necessary and sufficient condition for their ergodicity , given by _",
    "complete resource pooling_.    in section [ sec.loynes ] we use a loynes type construction to obtain fcfs matching of two sequences over @xmath30 .",
    "we show that if complete resource pooling holds then the loynes construction , matching all customers and servers with @xmath31 and letting @xmath32 , converges almost surely to a unique fcfs matching .",
    "this also yields the unique stationary version of the markov chains associated with the construction of the matching .",
    ", after the exchange transformation , width=504 ]    in section [ sec.reversibility ] we discuss the _ exchange transformation _ , in which for a matched pair @xmath33 , we exchange the customer and the server , as illustrated in figure [ fig.match2 ] .",
    "we show the following reversibility result : starting from two independent i.i.d .",
    "sequences over @xmath30 with fcfs matching between them , and performing the exchange transformation , we obtain two sequences of exchanged customers and servers and a matching between them . it is then true that the sequences are again independent i.i.d . , and the matching between them is fcfs in the reversed time direction .    in section [ sec.stationary ]",
    "we consider several markov chains and related processes which accompany the process of constructing fcfs matching . as indicated by the reversibility , these have product from stationary distributions .",
    "the stationary probabilities have extremely simple structure looking like multi - bernoulli probabilities .",
    "we also derive an expression for the normalizing constant of the stationary distributions . as is often the case , its calculation is not easy , and we conjecture it is @xmath34 .",
    "we illustrate these results for an example that is described in @xcite .",
    "finally , in section [ sec.perfomance ] we calculate some performance measures of the stationary fcfs matching .",
    "one such a performance measure is the matching rates , @xmath5 , the frequency of matches of customer type @xmath6 with server type @xmath7 .",
    "an explicit expression for @xmath5 was derived in @xcite .",
    "another performance mesure is the random link length , @xmath35 , given by @xmath36 for a match of @xmath33 , where @xmath37 .",
    "we derive the stationary distribution of these .",
    "in this section we provide a precise definition of bipartite fcfs matching , quote the result of uniqueness of the matching for @xmath38 , describe two mechanisms to construct this unique matching , define complete resource pooling , and quote the result that these mechanisms are ergodic if and only if complete resource pooling holds .",
    "[ def.fcfs ] let @xmath39 and @xmath40 be some fixed sequences of customers and servers . here",
    "@xmath41 and @xmath42 are index sets which are either finite , one - sided infinite or bi - infinite .",
    "a _ partial matching _ of @xmath43 and @xmath44 is a set @xmath45 corresponding to customer - server pairs satisfying : @xmath46    for a partial matching @xmath47 , we denote @xmath48    a partial matching @xmath47 is a _ complete matching _",
    "if there are no unmatched compatible pairs left outside of @xmath47 , that is : @xmath49    a matching @xmath47 is fcfs if for every @xmath50 , @xmath51    a matching is _ perfect _ if @xmath52 , and all customers and servers are matched .",
    "the following lemma was proved by induction on @xmath53 and @xmath54 , in @xcite .",
    "[ thm.unique ] for every finite index sets @xmath55 , there exists a complete fcfs matching , and it is unique .",
    "[ def.fair ] the sequences @xmath56 are fair if the number of type @xmath6 customers and the number of type @xmath7 servers is infinite for all @xmath57 and @xmath58 .",
    "the sequences @xmath59 are fair if the same also holds for times @xmath60 .",
    "[ thm.oneside ] for any two sequences , @xmath61 , @xmath62 with infinite number of customers and servers of each type ( i.e. fair sequences ) , there exists a unique perfect fcfs matching .",
    "furthermore , this is not just an existence result , the matching can be constructed up to arbitrary length .",
    "the uniqueness follows from lemma [ thm.unique ] .",
    "if we matched all servers up to server @xmath17 , then we can find an unmatched customer that will match @xmath63 , because there is an infinite number of customers of each type , and similarly for @xmath64 . by the uniqueness lemma ,",
    "any construction in which complete @xmath65 matchings are extended by letting @xmath66 increase to infinity in any order will lead to the same infinite perfect matching over @xmath29 .",
    "we present two constructive methods in the next paragraphs .",
    "we consider two methods of constructing a fcfs matching step by step , and define two markov chains associated with them :    ( i ) : :    adding a customer - server pair : proceeding from a complete fcfs    matching of @xmath67 , we add the pair    @xmath68 , and match them fcfs to compatible    previously unmatched servers and customers if possible , or to each    other if possible , or else leave one or both unmatched . with each step",
    "we associate a state that consists of the ordered lists of the    unmatched servers and customers .",
    "it is easy to see that the step by    step evolution of the state defines a countable state discrete time    irreducible and aperiodic markov chain .",
    "we denote it by    @xmath69 , this is the ` natural ' pair by pair    fcfs markov chain .",
    "( ii ) : :    matching server by server : proceeding from the fcfs matching of all    the servers @xmath70 , we add the next server    @xmath71 , and match it to the first compatible customer    that has not yet been matched . with each step",
    "we associate a state    that consists of the ordered list of skipped customers .",
    "this again    defines a countable state discrete time irreducible and aperiodic    markov chain",
    ". we denote it by @xmath72 , this    is the ` natural ' server by server fcfs markov chain . matching customer    by customer is analogous , with a markov chain    @xmath73 .",
    "all three markov chains have a common state if at time @xmath54 a perfect matching of all previous customers and servers is reached , in which case the state consists of empty lists and is denoted by @xmath74 or by @xmath75 .",
    "because these markov chains have a common state , they will be transient , null recurrent , or ergodic together",
    ". we will define several additional markov chains associated with the construction of fcfs matching .",
    "all of them will be transient , null recurrent , or ergodic together , and have a common empty , @xmath74 , 0 , state .",
    "we will say that the fcfs bipartite matching for given @xmath76 is ergodic if the recurrence time of the empty state is finite and has finite expectation .",
    "we introduce some further notation to formulate the condition for ergodicity : we let @xmath77 be the set of server types compatible with customer type @xmath6 , and @xmath78 be the set of customer types compatible with server type @xmath7 . for a subset of customer types",
    "@xmath79 we define the set of server types of @xmath80 : @xmath81 , and for a subset of server types @xmath82 we define the set of customer types of @xmath82 : @xmath83 .",
    "we also define @xmath84 , ( where @xmath85 denotes complement ) which is the set of customer types that can only be served by the servers in @xmath82 , the unique customer types of @xmath82 . finally , we let @xmath86 , @xmath87 .    we say",
    "that @xmath76 satisfy complete resource pooling if the following three equivalent conditions hold for all subsets @xmath88 , and all subsets @xmath89 : @xmath90    the fcfs bipartite matching for @xmath76 is ergodic if and only if complete resource pooling holds .",
    "we will derive a simple confirmation of this result in section [ sec.marginals ] .",
    "in this section we show that if complete resource pooling holds , then for two independent bi - infinite sequences of i.i.d . customers and servers , @xmath91 there exists almost surely a unique fcfs matching .",
    "this matching coincides with the stationary versions of the various markov chains that describe the construction of the matching .",
    "the matching is obtained using a loynes type scheme @xcite : we consider the ( unique by theorem [ thm.oneside ] ) matching of @xmath92 , and let @xmath93 .        at first glance",
    "we notice that as we let @xmath94 increase the matching changes , as the following example , in figure [ fig.loynes ] , shows . in this example",
    "there are two types of servers and two types of customers and `` n '' compatibility graph .",
    "if @xmath95 and @xmath96 , then starting empty at @xmath97 the state at @xmath98 can not be empty , so the matching starting from @xmath98 is different from the matching starting from @xmath97 . nevertheless , as @xmath93 , the matching does converge , and if we consider the ` natural ' markov chain of pair by pair matching , as @xmath99 we obtain the stationary version of @xmath69 .",
    "we denote by @xmath100 the stationary version of the natural pair by pair fcfs matching process , and by @xmath101}=(o^{[k]}_n)_{n \\ge -k}$ ] the process that starts at @xmath101}_{-k}=\\emptyset$ ] .",
    "we assume throughout this section that complete resource pooling holds , so that @xmath102 is an ergodic markov chain and the stationary version exists .",
    "our first task is to show forward coupling , namely that @xmath103 and @xmath104}$ ] coincide after a finite time @xmath19 with @xmath105 . following that we use standard arguments to show backward coupling and convergence to a unique matching .",
    "the following lemma is a property of fcfs matching , and does not depend on the distribution of @xmath106 .",
    "[ thm.monotonicity ] consider @xmath107 and @xmath108 , and complete fcfs matching between them .",
    "assume there are @xmath94 customers and @xmath109 servers left unmatched .",
    "consider now an additional customer @xmath110 , and the complete fcfs matching between @xmath111 and @xmath108 .",
    "then this matching will have no more than @xmath112 customers and @xmath109 servers unmatched .",
    "denote @xmath113 and @xmath114 . in the match of @xmath115 and @xmath116 ,",
    "if @xmath110 has no match , then all the other links in the matching are the same as in the matching of @xmath47 and @xmath116 , so the total number of unmatched customers is @xmath112 and unmatched servers is @xmath109 .",
    "if @xmath110 is matched to @xmath17 and @xmath17 is unmatched in the matching of @xmath47 and @xmath116 , then @xmath117 is a new link and all the other links in the matching of @xmath115 and @xmath116 are the same as in the matching of @xmath118 , so the total number of unmatched customers is @xmath94 and unmatched servers is @xmath119 .",
    "if @xmath110 is matched to @xmath120 and @xmath120 was matched to @xmath121 in the @xmath118 matching , then @xmath122 is a new link , and the link @xmath123 in the @xmath118 matching is disrupted .",
    "we now look for a match for @xmath121 in the matching of @xmath115 and @xmath116 .",
    "clearly , @xmath121 is not matched any of @xmath124 , since in the construction of the @xmath118 match @xmath121 was not matched by any of those .",
    "so @xmath121 will either remain unmatched , or it will be matched to some @xmath125 , where @xmath126 . in the former case ,",
    "all the links of the @xmath118 matching except @xmath123 remain unchanged in the @xmath115 and @xmath116 matching , and so the unmatched numbers remain @xmath127 . in the latter case , there are again two possibilities : if @xmath125 is unmatched in the @xmath118 matching , then the @xmath128 matching will have disrupted one link and added 2 links retaining all other links of the @xmath118 matching , so the unmatched numbers are @xmath94 and @xmath119 . if @xmath125 is matched to @xmath129 in the @xmath118 matching , then the link @xmath130 is disrupted , and we now look for a match for @xmath129 in the @xmath128 matching . similar to @xmath121 , either @xmath129 remains unmatched , resulting in @xmath127 unmatched in the @xmath128 matching , or , by the same argument as before , @xmath129 will be matched to @xmath131 , where @xmath132 . repeating these arguments for any additional disrupted links , we conclude that we either end up with one more link , so the numbers unmatched are @xmath133 , or we have the same number of links and the numbers unmatched are @xmath127 .",
    "[ thm.subadditivity ] let @xmath134 and @xmath135 and let @xmath113 , @xmath114 .",
    "consider the complete fcfs matching of @xmath136 , of @xmath137 , and of @xmath118 let @xmath138 be the number of unmatched customers and @xmath139 the number of unmatched servers in the three matchings . then @xmath140 and @xmath141 .",
    "let @xmath142 and @xmath143 be the ordered unmatched customers and servers from the complete fcfs matching of @xmath136",
    ". then the fcfs matching of @xmath144 and @xmath145 will have exactly the same ordered unmatched customers and servers as the fcfs matching of @xmath47 and @xmath116 .",
    "we now construct the matching of @xmath144 and @xmath145 in steps .",
    "we look first at the matching of @xmath146 with @xmath147 , next the matching of @xmath146 with @xmath148 , and so on , pre - pending each of @xmath149 and @xmath150 in reverse order , to the current matching . at each step , by lemma [ thm.monotonicity ] , the number of links is unchanged or increased by 1 , and the number of unmatched goes down by one or is increased by 1 .",
    "it follows that the total number unmatched customers is @xmath151 and of unmatched servers is @xmath152 .",
    "[ thm.decrease ] consider an incompatible pair @xmath153 .",
    "then there exists a sequence @xmath154 with @xmath155 , where @xmath156 are compatible , such that the fcfs matching of @xmath157 is perfect .",
    "the probability of the occurrence of such a sequence is greater or equal to @xmath158    because the bipartite graph is connected , and there is no direct edge between @xmath153 , there exists a non - repeating path , @xmath159 which connects them , with @xmath160 .",
    "clearly , the fcfs matching of @xmath157 , where @xmath161 is perfect , with exactly the links of the path , where @xmath110 is matched to @xmath162 , and @xmath163 is matched to @xmath164 .",
    "note that fcfs matching of @xmath154 consists of @xmath165 perfectly matched blocks of length one .",
    "the probability of this sequence occurring is @xmath166 which is bounded below by the product of the probabilities of any path in the bipartite graph @xmath2 , which is bounded below by @xmath167 .",
    "[ thm.forward ] let @xmath103 be the stationary pair by pair fcfs matching process , and let @xmath104}$ ] be the process starting empty at time 0 .",
    "then the two processes will couple after a finite time @xmath19 , with @xmath105 .",
    "denote by @xmath168 the number of unmatched customers ( equal to the number of unmatched servers ) , for any state @xmath169 of the pair by pair matching process , we refer to it as the length of the state .",
    "consider the sequence of times @xmath170 at which @xmath171 .",
    "this sequence is infinite with probability 1 , and @xmath172 by the ergodicity .",
    "consider the state @xmath173}_{m_0}$ ] .",
    "then @xmath174 . by the monotonicity result of lemma [ thm.monotonicity ] and corollary [ thm.subadditivity ] , the states of @xmath104}$ ]",
    "satisfy @xmath175}_{m_1}| \\ge \\ldots \\ge |o^{[0]}_{m_\\ell}|$ ] , i.e. the length of the state of @xmath104}$ ] at the times @xmath176 is non - increasing .",
    "furthermore , there is a positive probability @xmath177 that every @xmath178 steps along this sequence the length will actually decrease by at least 1 , as shown in lemma [ thm.decrease ] .",
    "hence , there will be coupling after at most @xmath179 perfect matching blocks of @xmath103 , where @xmath180 are i.i.d .",
    "geometric random variable with @xmath167 probability of success .",
    "so coupling occurs almost surely , and the expected time of coupling , @xmath19 satisfies @xmath181 .",
    "note that once @xmath104}$ ] and @xmath103 couple they stay together for ever .",
    "we now need to show backward coupling .    [ thm.backcoupling ]",
    "let @xmath103 be the stationary pair by pair fcfs matching process , and let @xmath182}$ ] be the process starting empty at time @xmath183 . then @xmath184}_n = o^*_n$ ] for all @xmath185 almost surely .",
    "the statement of almost surely refers to @xmath186 which is the sample space of all the sequences @xmath187 , and the probability measure of these sequences .",
    "define @xmath188}_n = o^*_n \\}$ ] . by the forward coupling theorem [ thm.forward ] , @xmath189 is almost surely finite",
    ". let @xmath190 .",
    "it is @xmath191 , and is also almost surely finite for any @xmath94 .",
    "define the event @xmath192}_{\\hat{t}_k } = o^*_{\\hat{t}_k } \\}$ ] , in words , those @xmath193 for which the process starting empty at any time before @xmath75 , will merge with @xmath103 at time @xmath194 .",
    "we claim that @xmath195 .",
    "we evaluate @xmath196 .",
    "the event @xmath197 will happen if for some @xmath198 , @xmath199}_{\\hat{t}_k } \\ne o^*_{\\hat{t}_k}$ ] .",
    "this can only happen if starting at the last time prior to @xmath98 at which the process @xmath199}$ ] was empty , the next time that it is empty is after time @xmath75 .",
    "let @xmath200 denote the recurrence time of the empty state .",
    "then : @xmath201 . since @xmath202 by the ergodicity , we have that @xmath203 as @xmath99 .",
    "hence , @xmath195 for large enough @xmath94 , and @xmath204 as @xmath93 .",
    "note also that @xmath205 .",
    "define now @xmath206 .",
    "we claim that @xmath207 is finite a.s .",
    "consider any @xmath193 .",
    "then by @xmath204 as @xmath93 and by the monotonicity of @xmath208 , almost surely for this @xmath193 there exists a value @xmath209 such that @xmath210 .",
    "but if @xmath211 , then @xmath212 .",
    "so , all processes starting empty before time @xmath75 will couple with @xmath103 by time @xmath207 . by the stationarity of the sequences @xmath187 and of @xmath103 , all processes starting empty before @xmath183 will couple with @xmath103 by time 0 , if @xmath213 . hence using the loynes scheme of starting empty at @xmath183 and letting @xmath32",
    "the constructed process will merge with @xmath103 at time 0 .",
    "but the same argument holds not just for 0 , but for any negative time @xmath214 .",
    "hence @xmath182}$ ] and @xmath103 couple at @xmath214 ( and stay coupled ) for any @xmath215 .",
    "this completes the proof .    for two independent i.i.d .",
    "sequences @xmath91 , if complete resource pooling holds , there is a unique fcfs matching over all of @xmath30 almost surely , and it can be constructed using the loynes scheme .",
    "we saw that @xmath184}_n = o^*_n$ ] for all @xmath54 almost surely . but @xmath216 determines for every server @xmath17 and every customer @xmath217 his match .",
    "this proves the corollary .",
    "in fact , the proof of forward coupling and of backward coupling holds under far more general conditions , as we describe now .",
    "let @xmath218 be two stochastic sequences , and define the process @xmath219 by a stochastic recursion : proceeding from @xmath220 where all customers and servers are incompatible , obtain @xmath221 , where in this stochastic recursion the operation @xmath222 is to complete the fcfs matching of @xmath169 with @xmath223 and retain as @xmath224 the remaining ordered unmatched customers and servers .",
    "we list the following three assumptions :    h1 : :    the sequence @xmath218 is    stationary .",
    "h2 : :    the recurrence time @xmath200 from empty state to empty state    is finite with @xmath225 .",
    "h3 : :    there exist constant @xmath226 and    @xmath227 such that for any state @xmath169 , if    @xmath228 and @xmath229 ,    @xmath230 .",
    "we then have :    if h1h3 hold then there exists a stationary version of @xmath231 , @xmath216 , so that @xmath232}_n)_{n\\ge -k}$ ] with @xmath182}_{-k } = \\emptyset$ ] satisfy : @xmath233}_n = o^*_n$ ] for all @xmath54 , almost surely .",
    "the sub - additivity property of lemma [ thm.monotonicity ] and corollary [ thm.subadditivity ] hold for fcfs regardless of the distributions of @xmath218 .",
    "existence of a stationary version follows from assumptions h1 , h2 ( see @xcite ) .",
    "if h3 also holds , then the proofs of theorems [ thm.forward ] and [ thm.backcoupling ] now go through unchanged",
    ".    conditions h1h3 hold , under appropriate assumptions , for some more general fcfs matching models .",
    "in particular , it follows that under ergodicity the loynes construction converges to the unique stationary version for the models which are described in @xcite",
    "the fcfs matching depends on the direction in which it is constructed .",
    "the simple example in figure [ fig.noreverse ] shows that fcfs is not preserved if the time direction is reversed    nevertheless , this model has an elegant reversibility result . in this section",
    "we introduce the exchange transformation , in which we switch the positions of each matched customer and server .",
    "figures [ fig.match1 ] , [ fig.match2 ] illustrate the exchange transformation . we show that the exchanged sequences are independent i.i.d . and the matching is fcfs in reversed time .    consider a fcfs bipartite matching of sequences @xmath234 . the exchange transformation of the matched pair @xmath61 , is the matched pair @xmath235 where @xmath236 and @xmath237 .",
    "[ thm.reverse ] let @xmath47 be a perfect matching of @xmath107 , and @xmath238 .",
    "let @xmath239 , @xmath240 be the sequences obtained by the exchange transformation , retaining the same links of the matched pairs .",
    "the resulting matching of @xmath239 , @xmath240 is fcfs in reversed time .",
    "denote by @xmath241 the matching of @xmath239 , @xmath240 obtained by retaining the links of @xmath47 .",
    "then @xmath242 if and only if @xmath50 .",
    "take @xmath242 , i.e. @xmath243 and @xmath244 are matched ( and of course , @xmath245 ) . to show that @xmath241 is fcfs in reversed time we need to show that : @xmath246    assume to the contrary that there exists @xmath247 such that @xmath248 , and @xmath249 , and there is no @xmath250 such that @xmath251 .",
    "because this is a complete matching , there exists an @xmath252 such that @xmath253 is matched to @xmath254 , and because @xmath255 is matched to @xmath256 , we actually have @xmath257 .",
    "so we have that @xmath248 is matched to @xmath258 , where @xmath247 and @xmath259 .",
    "consider now the original matching .",
    "we have that @xmath260 is matched to @xmath261 , and we have @xmath262 and @xmath263 which are matched .",
    "but , @xmath264 , and @xmath259 while @xmath247 .",
    "this contradicts the fcfs property of the matching @xmath47 of the unexchanged sequences .",
    "a similar contradiction is obtained if we assume the second part of the definition is violated . the proof is illustrated in the following figure :        [ thm.blocks ] consider the fcfs matching of two i.i.d .",
    "sequences , and let @xmath265 , @xmath266 be a perfectly matched block within this matching . then the conditional probability of observing such @xmath267 , given that it is a perfect matching , is @xmath268 where @xmath269 is a constant that may depend on @xmath53 , and @xmath270 , @xmath271 count the number of type @xmath6 , and type @xmath7 in the block .",
    "@xmath272    where @xmath273 .    [ thm.symmetric ]",
    "let @xmath274 be obtained from @xmath267 by performing the exchange transformation and time reversal .",
    "then @xmath274 is a fcfs perfectly matched block , and @xmath275    that @xmath274 is a fcfs perfectly matched block follows from lemma [ thm.reverse ] and that @xmath276 follows from lemma [ thm.blocks ] .",
    "we now assume that the system is ergodic , i.e. the markov chains @xmath277 are ergodic ( which holds if and only if complete resource pooling holds , though we do not require the form of the condition ) .",
    "we have shown in theorem [ thm.backcoupling ] that for i.i.d independent sequences of servers and customers over @xmath30 , under ergodicity , there exists a.s . a unique fcfs matching , which corresponds to the stationary version of the markov chains associated with the fcfs matching ( generated by the loynes construction )",
    ". we define @xmath278 as the probability measure of these fcfs matching paths over @xmath30 .",
    "we also define @xmath279 as the palm version of the measure @xmath278 , with sample paths in which all servers and customers prior and up to 0 are matched perfectly , and @xmath280 .",
    "we can construct all sample paths of @xmath279 by taking paths of @xmath278 , locating the position of the last perfect match that precedes 0 , and shifting it to position 0 .",
    "we can also construct sample paths of @xmath279 by generating a doubly infinite sequence @xmath281 of perfectly matched blocks of i.i.d customers and servers .",
    "we now consider the exchange transformation on paths of @xmath282 , and denote by @xmath283 the path obtained from a fcfs matched path @xmath284 .",
    "the transformed path @xmath285 consists of two doubly infinite sequences of customers and of servers @xmath286 , and a matching between them that retains the links of @xmath284 . as we saw in lemma [ thm.reverse ] , this matching is fcfs in reversed time direction .",
    "let @xmath287 be the time reversal of @xmath285 .",
    "we let @xmath288 be the probability measure of the time reversed exchanged paths obtained from @xmath282 , and let @xmath289 be its palm version .",
    "the measure @xmath288 is identical to @xmath282 .    by lemmas [ thm.reverse ] and [ thm.blocks ] , @xmath289 is identical to @xmath290 . but",
    "this implies that the stationary versions of these palm versions are also identical , i.e. @xmath288 and @xmath282 are identical .",
    "let @xmath291 be independent i.i.d .",
    "sequences , with the unique fcfs matching between them ( exists and is unique a.s . ) .",
    "then the exchanged paths @xmath285 will consist of two i.i.d . sequences @xmath292 , and the fcfs matching in reverse time between them , using loynes construction in reversed time , will consist of the same links as the matching between @xmath291 .    that @xmath292 are independent i.i.d .",
    "sequences follows from the identity of @xmath288 with @xmath282 . that the loynes construction in reversed time will use the same links",
    "follows since the links of @xmath291 are the fcfs in reversed time between @xmath292 , and by theorem [ thm.backcoupling ] this matching is unique .",
    "we have found that for any two independent i.i.d .",
    "sequences of customers @xmath293 and of servers @xmath294 , under complete resource pooling , there is a unique fcfs matching almost surely . furthermore , if we exchange every matched pair @xmath295 of customers and servers and retain the matching , we obtain two permuted sequences , of matched and exchanged customers @xmath296 , and of matched and exchanges servers @xmath297 .",
    "these new sequences are again independent and i.i.d . , and the retained matching between them is fcfs in reversed time direction , and it is the unique fcfs matching of @xmath298 in reversed time .",
    "we make two observations : first , if we exchange some of the customer server matched pairs and keep some of the others not exchanged , and consider any subset of these , the types in the subset should have multi - bernoulli probabilities , i.e. probability of observing type @xmath6 is @xmath299 , probability of observing type @xmath7 is @xmath300 , independent of all the others in the subset , whether the items are exchanged with their matches or not .    for the second observation consider markovian constructions of the fcfs matching of @xmath301 , moving step by step from the past up to position @xmath54 , where we add matches and perform exchanges at each step from @xmath54 to @xmath302 .",
    "four ways in which this can done are illustrated in figure [ fig.markov ] where light circles represent customers and dark circles represent servers ( in original or exchanged positions ) . in each of these , if we reverse the time direction we get a markovian construction of fcfs matches between @xmath303 that moves from @xmath302 to @xmath54 and at each of these steps adds matches for elements @xmath304 and exchanges them back to @xmath33 .",
    "while these observations are hard to formalize , they suggest how to proceed . in this section",
    "we obtain stationary distributions of various markov chains associated with the construction of fcfs matching . some of them are multi - bernoulli , as suggested by the first observation , and it is easy to verify them by using the second observation .",
    "we first determine the distributions of the lightly encircled regions in each of the four panels of figure [ fig.markov ] ( sections [ sec.sbsmatching ] , [ sec.pairs ] ) .",
    "next we obtain the stationary distributions of the ` natural ' markov chains , @xmath305 ( section [ sec.natural ] ) .",
    "we illustrate this with the stationary distribution for the fcfs `` nn '' compatibility graph that was discussed in @xcite ( section [ sec.example ] ) .",
    "all these stationary distributions are determined up to a constant , which surprisingly is the same for all of them .",
    "we obtain several marginal stationary distributions and determine the constant in section [ sec.marginals ] .",
    "we suspect that numerical calculation of this constant may be @xmath306p - hard .",
    "consider server by server fcfs matching where at time @xmath54 all servers @xmath307 have been matched and exchanged with the customers to which they were matched , as illustrated in panel ( i ) of figure [ fig.markov ] . at this point the servers line has @xmath308 customers that matched and replaced servers @xmath307 , and servers @xmath309 are still unmatched . on the customers line",
    "there is a position @xmath310 such that all the customers @xmath311 have been matched and replaced by @xmath256 , and @xmath312 is the first unmatched customer , and there is a position @xmath313 such that all customers @xmath314 have not yet been matched , and @xmath315 is the last customer that has been matched , so that now @xmath316 is the matched and exchanged server in position @xmath313 . if the matching for @xmath317 is perfect then @xmath318 , otherwise @xmath319 .",
    "we let @xmath320 in the former case ( sometimes we write @xmath321 ) , and in the latter case we let @xmath322 be the ordered sequence of unmatched customers and of matched and exchanged servers so that @xmath323 , @xmath324 and @xmath325 is either @xmath326 if unmatched or @xmath327 if matched and exchanged .",
    "we define the _ server by server fcfs detailed matching process _",
    "@xmath328 with @xmath329 .",
    "it is a markov chain where the transition from @xmath330 to @xmath331 depends on the current state @xmath332 , and on the innovation variables which are the types of server @xmath71 and of customers @xmath314 .    in the same way we define a _ customer by customer fcfs detailed matching process _ ,",
    "@xmath333 which describes the state after all customers @xmath334 have been matched and exchanged with servers , as illustrated in panel ( ii ) of figure [ fig.markov ] so that the state @xmath335 is @xmath336 for perfect match and otherwise @xmath337 where @xmath338 is the first unmatched server on the servers line , @xmath339 is the last matched and exchanged customer , and @xmath325 is either @xmath340 if unmatched or @xmath341 if matched and exchanged .",
    "examining panel ( i ) of figure [ fig.markov ] we see that it illustrates fcfs matching and exchange of server and customer lines @xmath80 and @xmath82 all the way from @xmath342 up to position @xmath54 , and at the same time it also illustrates matching and exchange of server and customer lines @xmath343 and @xmath344 fcfs in reversed time , all the way from @xmath345 to @xmath302 .",
    "our main observation now is that if @xmath346 , then @xmath347 is exactly the state of the customer by customer fcfs matching in reversed time of the sequences @xmath298 , when all customers @xmath348 have been matched to some @xmath256 , and exchanged back to a customer @xmath18 and server @xmath17 . for @xmath322",
    "we denote @xmath349 .",
    "we denote the markov chain of customer by customer fcfs matching of @xmath298 in reversed time by @xmath350 , so that @xmath351 , is the state where all @xmath352 have been matched .",
    "we then state formally ( see figure [ fig.reversal1 ] ) :    [ thm.timereversal ] the markov chain @xmath351 of customer by customer fcfs matching of @xmath298 in reversed time , is the time reversal of the markov chain @xmath330 of server by server fcfs matching of @xmath301 , in the sense that @xmath353 this implies that the reversal of the transition @xmath354 is exactly the transition @xmath355 . in other words ,",
    "if the transition of @xmath356 matches and exchanges @xmath17 with @xmath18 , then the transition of @xmath357 matches and exchanges @xmath255 with @xmath256 .",
    "the only thing to note is that if @xmath358 are matched in the forward fcfs direction , then @xmath359 are matched in the reversed fcfs direction .",
    "this is so by the uniqueness of the matching as shown in theorem [ thm.backcoupling ] , and by lemma [ thm.reverse ] .    [ thm.stationary ]",
    "the stationary distribution of @xmath330 and of @xmath360 is given , up to a normalizing constant , by @xmath361 where @xmath270 is the number of customers of type @xmath6 in @xmath332 , and @xmath271 is the number of servers of type @xmath7 in @xmath332 .",
    "we use kelly s lemma ( @xcite , section 1.7 ) : for a markov chain @xmath362 , if we can find @xmath363 and @xmath364 such that @xmath365 then @xmath366 is the stationary distribution of @xmath362 , and @xmath364 are the transition rates of the reversed stationary process , @xmath367 .",
    "lemma [ thm.timereversal ] shows that the time reversed transition probabilities of @xmath330 are @xmath368    the condition of summation to 1 in ( [ eqn.conditions ] ) is satisfied since @xmath369 are transition probabilities .    to check the condition of detailed balance in ( [ eqn.conditions ] ) all we need to do",
    "is check that the conjectured form of @xmath370 in ( [ eqn.stationrydist ] ) satisfies @xmath371 there are three types of transitions of @xmath372 ( see figure [ fig.serverbyserver ] ) , with analogous transitions for @xmath373    ]    we check ( [ eqn.checking1 ] ) for each of them .    _",
    "( i ) simple exchange : _ if @xmath374 and @xmath375 , then according to ( [ eqn.stationrydist ] ) we have @xmath376 and the direct and reversed transition rates are : @xmath377    _ ( ii ) deletion of elements from start of @xmath332 _ : if @xmath378 , and @xmath379 , and the deleted part is @xmath380 , then according to ( [ eqn.stationrydist ] ) we have @xmath381 and the direct and reversed transition rates are : @xmath382    _ ( iii ) addition of elements to @xmath332 _ :",
    "if @xmath383 and @xmath384 , then according to ( [ eqn.stationrydist ] ) we have @xmath385 and the direct and reversed transition rates are : @xmath386 it is now immediate to check that that the balance condition of ( [ eqn.conditions ] ) holds .",
    "this also proves the form of @xmath387 , as the reversed process .",
    "the analysis of pair by pair matching follows similar lines to that of server by server matching .",
    "we consider two mechanisms .",
    "for pair by pair backward fcfs matching ( illustrated in panel ( iii ) of figure [ fig.markov ] ) we assume that all possible fcfs matches between @xmath388 have been made and exchanged , and in step @xmath302 we add the pair @xmath389 , and if possible match and exchange each of them fcfs to previous unmatched items or to each other .",
    "for pair by pair forward fcfs matching ( illustrated in panel ( iv ) of figure [ fig.markov ] ) we assume all customers @xmath388 have been matched and exchanged .",
    "after step @xmath54 we consider the pair in position @xmath302 , which may contain either items which were matched and exchanged already , or items which are still unmatched , and then in step @xmath302 the items which are still unmatched after step @xmath54 are matched and exchanged with each other or with items in positions @xmath390 .",
    "we define the pair by pair backwards detailed fcfs matching process @xmath391 as @xmath392 , where @xmath322 describes the customers line and @xmath393 describes the server line . here",
    "@xmath394 is the first unmatched customer , in position @xmath395 , and the remaining items of @xmath332 are either unmatched customers or matched and exchanged servers , @xmath396 is the first unmatched server , in position @xmath397 , and the remaining items of @xmath398 are either unmatched servers or matched and exchanged customers . the number of unmatched customers in @xmath332 needs to be equal to the number of unmatched servers in @xmath399 .",
    "we may have @xmath400 if there is a perfect match , otherwise both @xmath401 and @xmath402 .",
    "this is a markov chain , whose next state depends on the current state and the random innovation consists of the types of @xmath389 .",
    "we define the pair by pair forward fcfs matching process @xmath403 as @xmath404 , where @xmath393 lists items in positions @xmath405 on the customer line , where @xmath406 is the last matched and exchanged server @xmath407 , and @xmath408 is either an unmatched customer or a matched and exchanged server in position @xmath409 , and where @xmath410 lists items in positions @xmath411 on the server line , where @xmath412 is the last matched and exchanged customer @xmath413 and @xmath414 is either an unmatched server , or a matched and exchanged customer in position @xmath409 .",
    "@xmath415 after a perfect match , otherwise @xmath416 .",
    "@xmath417 is a markov chain , whose next state depends on the current state , and the random innovation consists of the @xmath418 and @xmath419 .",
    "examining panel ( iii ) of figure [ fig.markov ] we again see that it illustrates fcfs matching and exchange of server and customer lines @xmath80 and @xmath82 all the way from @xmath342 up to position @xmath54 , and at the same time it also illustrates matching and exchange of server and customer lines @xmath343 and @xmath344 fcfs in reversed time , all the way from @xmath345 to @xmath302 .",
    "our main observation now is that if @xmath420 , then @xmath421 is exactly the state of the pair by pair forward detailed fcfs matching in reversed time , of the sequences @xmath298 , when all customers and servers @xmath422 have been matched and exchanged back to a customer @xmath18 and server @xmath17 .",
    "we denote the pair by pair forward detailed fcfs matching of @xmath298 in reversed time by @xmath423 . we then state formally ( see figure [ fig.reversal2 ] ) :    [ thm.timereversal2 ] the markov chain @xmath423 of pair be pair forward fcfs matching of @xmath298 in reversed time , is the time reversal of the markov chain @xmath424 of pair by pair backward fcfs matching of @xmath301 , in the sense that @xmath425 this implies that the reversal of the transition @xmath426 is exactly the transition @xmath427 .",
    "in other words , if the transition of @xmath428 looks for matches for @xmath68 and exchanges @xmath17 with @xmath18 , then the transition of @xmath429 considers the elements in position @xmath54 , and transforms them back .        the only thing to note , as in the proof of lemma [ fig.reversal1 ] , is that if @xmath358 are matched in the forward fcfs direction , then @xmath359 are matched in the reversed fcfs direction .",
    "similar to theorem [ thm.stationary ] , we have :    [ thm.pairdist ] the stationary distribution of @xmath424 and of @xmath417 is given , up to a normalizing constant , by @xmath430 where @xmath431 counts the number of @xmath6 and @xmath7 that appear in both @xmath169 and @xmath398 .",
    "the proof is similar to the proof of theorem [ thm.stationary ] .",
    "we need to verify that the proposed @xmath432 , similar to ( [ eqn.checking1 ] ) , satisfy : @xmath433    there are 10 types of transitions from @xmath424 to @xmath434 and from @xmath435 to @xmath436 , and some special cases when the matching is perfect .",
    "we verify ( [ eqn.checking2 ] ) for a few of them , the verification for the remaining types is similar .",
    "( case i ) in the transition from @xmath424 to @xmath434 , customer @xmath437 is matched and exchanged with some @xmath438 where @xmath439 , while server @xmath440 remains unmatched .",
    "this happens if @xmath441 , and @xmath442 .",
    "the transition probability is @xmath443 . in this transition",
    "the length of @xmath398 and @xmath169 is increased by 1 .",
    "the transition is @xmath444    in the reversed transition from @xmath445 to @xmath423 , we see : @xmath446 which is the same as the transition @xmath447 the length of @xmath398 and @xmath169 is reduced by 1 , and this transition is deterministic , it happens with probability 1 .",
    "verification of ( [ eqn.checking2 ] ) follows from : @xmath448    ( case ii ) in the tranistion from @xmath424 to @xmath434 , customer @xmath437 is matched and exchanged with @xmath449 , and @xmath440 is matched and exchanged with @xmath450 .",
    "the resulting transition is either : @xmath451 or @xmath452 and the corresponding reversed transition is in the former case @xmath453 and in the latter case @xmath454 verification of ( [ eqn.checking2 ] ) follows in the former case from : @xmath455 and in the latter case from : @xmath456    ( case iii ) transition from empty state to empty state , @xmath457 : @xmath458    ( case",
    "iv ) transition from empty state to state @xmath459 .",
    "the reversed transition is from @xmath460 to @xmath461 , which is the same transition as @xmath462 to @xmath463 .",
    "recall that if @xmath462 then all customers and servers preceding position @xmath53 have been matched and exchanged , and in particular , @xmath464 and @xmath465 are matched and exchanged with the original @xmath466 and so the transition from @xmath462 to @xmath463 is deterministic , and has probability 1 . to verify ( [ eqn.checking2 ] ) : @xmath467    the normalizing constants of @xmath468 are all equal .",
    "we denote this common normalizing constant by @xmath116 .",
    "we show that there is a one to one correspondence between the states of @xmath330 and of @xmath424 , such that the stationary probabilities of corresponding states are equal up to the normalizing constants .",
    "this implies equality of the normalizing constants of @xmath469 and @xmath370 .",
    "the other processes have the same normalizing constants by the time reversibility .",
    "we note first that a sequence of servers and customers @xmath410 is a possible state @xmath332 of @xmath372 if and only if @xmath470 implies @xmath471 , and similarly it is a possible state @xmath399 of @xmath373 if and only if @xmath472 implies @xmath471 .",
    "necessity follows from fcfs , sufficiency follows by constructing sequences @xmath473 and @xmath474 whose matching yields @xmath475 on the customer line for @xmath332 , or on the server line for @xmath399 .    to show the correspondence consider a state @xmath476 .",
    "then @xmath477 is a possible state of @xmath372 .",
    "we need to show that any customer ( unmatched , or matched and exchanged ) in the sequence @xmath478 is incompatible with any server ( unmatched , or matched and exchanged ) that appears later in the sequence .",
    "consider @xmath479 , i.e. @xmath480 is unmatched .",
    "then it is incompatible with any @xmath481 , because it was skipped by them in the matching of the customer line , and it is incompatible with any of @xmath482 because all unmatched customers in @xmath332 are incompatible with all unmatched servers in @xmath399 .",
    "consider then @xmath483 .",
    "it is incompatible with any @xmath484 , because it was skipped by @xmath485 in the matching of the server line .",
    "this shows the correspondence in one direction .",
    "consider now a state of @xmath372 , @xmath486 .",
    "if we break it into @xmath410 and @xmath487 , we get two subsequences , @xmath488 and @xmath489 . by the above arguments ,",
    "any matched and exchanged @xmath490 in @xmath332 can not be matched to any earlier unmatched customer in the sequence @xmath491 or to any customer in @xmath399 , and any matched and exchanged @xmath492 in @xmath399 can not be matched to any earlier unmatched server in @xmath399 or to any matched and exchanged server in @xmath491 .",
    "so it remains to choose @xmath109 in such a way that the number of unmatched customers in @xmath491 is equal to the number of unmatched servers in @xmath399 .",
    "we do that as follows : we count the same number of customers @xmath480 from the left of @xmath332 as of servers @xmath254 from the right of @xmath332 , for as long as @xmath493",
    ". the final pair will either be @xmath494 in which case we take @xmath495 , or @xmath496 . in that case",
    "all of @xmath497 must all be either servers , in which case we let @xmath498 , or all of them are customers , in which case we let @xmath495 .",
    "this shows the correspondence in the other direction .",
    "we note that two corresponding states have the same set of customers and the same set of servers .",
    "hence their steady state probabilities are equal up to the normalizing constant .",
    "this shows that they have the same normalizing constant , and competes the proof .",
    "we now consider the ` natural ' markov chain @xmath231 of pair by pair and @xmath499 , @xmath500 of server by server and customer by customer fcfs matching .",
    "the state consists of the ordered list of unmatched customers and/or servers .",
    "the stationary distributions for @xmath501 , for @xmath502 and for @xmath503 are given by @xmath504 @xmath505 @xmath506    to prove ( [ eqn.stationaryqs ] ) , we need to sum @xmath507 over all states @xmath332 of the form : @xmath508 where for @xmath509 the range of @xmath510 is @xmath511 and for @xmath512 the range is @xmath513 , and where each of @xmath514 ranges over possible values @xmath515 .",
    "we therefore have , by ( [ eqn.stationrydist ] ) , that @xmath516 which proves formula ( [ eqn.stationaryqs ] ) . formula ( [ eqn.stationaryqc ] ) is proved in the same way .",
    "to prove ( [ eqn.stationaryo ] ) , we need to sum @xmath517 over all states @xmath518 of the form : @xmath519 where for @xmath520 the range of @xmath521 is @xmath522 , and where each of @xmath514 ranges over possible values @xmath515 , and each of @xmath523 ranges over possible values @xmath524 . performing the summation as in ( [ eqn.summation ] ) we obtain ( [ eqn.stationaryo ] ) .",
    "consider server by server fcfs matching when all servers up to position @xmath54 have been matched and exchanged . for the pair by pair",
    "fcfs detailed matching process we defined @xmath330 as the sequence of elements from position @xmath310 of the first unmatched customer to position @xmath313 of the last matched and exchanged server on the customer line .",
    "we now consider positions @xmath525 and @xmath526 such that the interval of positions @xmath527 to @xmath528 contains at least one type of matched and exchanged server and at least one type of unmatched customer , and the interval is minimal .",
    "let @xmath486 where @xmath529 , @xmath530 , @xmath531 , and for @xmath532 , @xmath533 is either an unmatched customer or a matched and exchanged server in position @xmath534 .",
    "we consider the process @xmath535 where @xmath536 .",
    "note that @xmath536 differs from @xmath330 by the addition of some servers before @xmath537 and some customers after @xmath316 .",
    "we always have @xmath538 .",
    "we define also the _ pair by pair fcfs augmented matching process _",
    "@xmath539 with state @xmath322 with @xmath540 , which includes elements from positions @xmath527 to @xmath313 on the customer line , starting with @xmath530 and ending with @xmath541    [ thm.stationary2 ] the stationary distributions of @xmath542 and of @xmath543 are given by @xmath544 where @xmath270 is the number of customers of type @xmath6 in @xmath332 , and @xmath271 is the number of servers of type @xmath7 in @xmath332 .",
    "the proof of the form of @xmath545 , up to the normalizing constant , is similar to the proof or theorem [ thm.stationary ] , since the reversed process corresponds to the customer by customer matching of @xmath546 .",
    "the proof of the form of @xmath547 is obtained by summing @xmath548 over all sequences of customers @xmath549 , which sum up to 1 , because we are summing over all outcomes of one or more geometric distributions .",
    "finally , the proof that the normalizing constant is again equal to @xmath116 is obtained by summing also over all sequences @xmath550 .",
    "summation over all added servers and customers returns us to @xmath551 .",
    "the motivation for considering the augmented process @xmath543 is that each state @xmath552 can be written in a different form , and in that form we can actually enumerate all the possible states .",
    "this enables us to obtain stationary distributions of various marginal processes , and finally to derive an explicit expression for the normalizing constant @xmath116 .",
    "we now rewrite the state @xmath553 as follows : let @xmath554 be the type of server @xmath541 . define recursively , for @xmath555 , @xmath556 as the type of the last server in the sequence @xmath557 which is different from @xmath558 .",
    "then @xmath559 is a permutation of the server types @xmath560 .",
    "let @xmath561 be the subsequences of customer and server types between the locations of @xmath562 in @xmath332 .",
    "we will then write the state as @xmath563 .",
    "the idea of presenting the state in this form stems from visschers and adan @xcite and was used in @xcite .",
    "the main feature of @xmath563 is that all the customers in @xmath564 are of types in @xmath565 and all the servers in @xmath564 are of types in @xmath566 .",
    "of course we can write the stationary distribution of states of @xmath543 , given in ( [ eqn.stationrydist4 ] ) , also as : @xmath567 where @xmath568 , @xmath569 count the number of type @xmath6 customers and of type @xmath7 servers in @xmath564 . we will use the notation @xmath570 .",
    "we now consider several processes , some of them markovian and some of them not markovian , which are derived by aggregating the states of the detailed augmented markov chain @xmath543 .    the process @xmath571 , where @xmath572 is obtained from @xmath564 by replacing each @xmath18 with a @xmath75 , and each @xmath573 with a @xmath574 , so each @xmath572 is a sequence of @xmath75 and @xmath574 .    the process @xmath575 where @xmath576 is the number of unmatched customers between @xmath577 and @xmath578 .",
    "the process @xmath579 where @xmath580 is the number of matched and exchanged servers between @xmath577 and @xmath578 .",
    "the process @xmath581 which records both the number of unmatched customers and matched and exchanged servers between @xmath577 and @xmath578 .",
    "the process @xmath582 which records the lengths of the @xmath572 .",
    "the process @xmath583 which is the permutation of server types after the @xmath54th match .",
    "the stationary distributions of @xmath584 are given by : @xmath585    to obtain ( [ eqn.stationaryw ] ) we sum ( [ eqn.stationaryz ] ) , where each 0 in @xmath572 can be any @xmath586 , and each 1 in @xmath572 can be any @xmath587 .    to obtain ( [ eqn.stationaryu ] ) we sum ( [ eqn.stationaryw ] ) over the different locations of the 0 s in each @xmath572 .",
    "to obtain ( [ eqn.stationaryx ] ) we sum ( [ eqn.stationaryu ] ) where each @xmath588 needs to range from 0 to @xmath345 .",
    "we use newton s binomial formula for @xmath589 , and replace that by @xmath590 .",
    "( [ eqn.stationaryy ] ) is obtained similar to ( [ eqn.stationaryx ] ) summing ( [ eqn.stationaryu ] ) over the @xmath591 .    to obtain ( [ eqn.stationaryv ] ) we sum ( [ eqn.stationaryu ] ) , where @xmath591 ranges from 0 to @xmath592 .",
    "we use newton s binomial formula for @xmath593 .    finally , to obtain ( [ eqn.stationaryr ] ) we sum ( [ eqn.stationaryv ] ) over each @xmath594 ranging form 0 to @xmath345 , and replace @xmath595 by @xmath596 .",
    "we are now ready to obtain the normalizing constant @xmath116 ( see @xcite ) .",
    "the normaliazing constant @xmath116 is given by : @xmath597 where the summation is over all permutations of @xmath560 in the first expression , and over all permutations of @xmath598 in the second expression .",
    "we obtain @xmath599 by summation of ( [ eqn.stationaryr ] ) over all permutations of @xmath560 , and obtain @xmath116 by dividing it by @xmath600 .",
    "the second expression is obtained by using the symmetric derivation for customer by customer matching .    by observing",
    "when @xmath116 is finite we obtain :    a necessary and sufficient condition for ergodicity of all the fcfs matching markov chains is complete resource pooling ( [ eqn.pooling ] ) .",
    "the conditional distributions of the numbers of unmatched customers and of matched and exchanged servers , given the permutation is a product of geometric probabilities : @xmath601      we consider the `` nn '' system , which is illustrated in figure [ fig.nnsystem ] .",
    "this system was studied in @xcite ,        where ergodicity under complete resource pooling was demonstrated but stationary probabilities were not obtained .",
    "we can easily calculate stationary probabilities of the pair by pair , server by server and customer by customer ` natural ' fcfs processes , using formulae ( [ eqn.stationaryqs])([eqn.stationaryo ] ) , ( [ eqn.b ] ) .",
    "the conditions for stability , complete resource pooling , are : @xmath602    some examples ( we write @xmath603 for @xmath604 ) @xmath605 the value of the normalizing constant is : @xmath606",
    "assume ergodicity ( complete resource pooling ) holds . the _ matching rate _",
    "@xmath5 is the a.s .",
    "limit of the fraction of matches of customer of type @xmath6 with server of type @xmath7 , in the complete fcfs matching of @xmath607 , as @xmath608 .",
    "an expression for @xmath5 was derived in @xcite .",
    "we include this expression here for completeness and also because of its close similarity to the derivation of the distribution of _ link lengths _",
    "@xmath609 , in section [ sec.linklengths ] .    both @xmath5 and the distribution of @xmath35 are obtained by considering the state @xmath610 which is the state of the process @xmath611 or of the process @xmath543 with the addition of @xmath612 , where @xmath612 is the sequence of @xmath549 .",
    "the final expressions include summation over all the permutations @xmath613 of the servers @xmath560 .    for convenience",
    "we use the following notations relative to each permutation @xmath562 : @xmath614 note that if @xmath615 then @xmath616 , @xmath617 here @xmath618 express the conditional probability that @xmath440 and @xmath619 form an @xmath620 match , or an @xmath621 match , or no match at all , respectively .",
    "assume ergodicity ( complete resource pooling ) holds , and consider a stationary fcfs matching over @xmath30 .",
    "for each server @xmath17 , if @xmath17 is matched to @xmath18 we let @xmath623 denote the link length .",
    "we define the random variable @xmath624 to have the stationary distribution of link lengths of servers of type @xmath7 .",
    "we define the random variable @xmath625 to have the stationary distribution of link lengths of matches between servers of type @xmath7 and customers of type @xmath6 . in this section",
    "we derive the distributions of of @xmath624 and of @xmath625 .",
    "they are mixtures of convolutions of some positively signed and some negatively signed geometric random variables .",
    "consider the system following server by server fcfs matching and exchanging of all servers up to @xmath54 .",
    "the state is @xmath626 .",
    "let @xmath440 .",
    "@xmath71 will be matched to one of the elements of @xmath627 , since @xmath627 contains customers of all types .",
    "say it is matched to @xmath18 .",
    "we are interested in @xmath628 .",
    "we are also interested in the special case that @xmath25 .",
    "the conditional random variable , conditional on @xmath71 matches with @xmath629 is then @xmath630 .",
    "we introduce the following additional notation . for the state @xmath627 ,",
    "we let @xmath631 and @xmath632 count respectively the number of unmatched customers and the number of matched exchanged servers in @xmath627 .",
    "also for @xmath18 we let @xmath633 , @xmath634 , @xmath635 , @xmath636 count respectively the number of customers and of servers , to the left ( preceding ) and to the right ( succeeding ) of @xmath18 in @xmath627 .",
    "if @xmath71 is matched to @xmath18 , then @xmath637 is equal to the total number of unmatched customers preceding @xmath18 minus the total number of matched exchanged servers following @xmath18 , that is : @xmath638          we now need to count the number of matched customers preceding @xmath18 , and matched and exchanged servers succeeding @xmath18 .",
    "we condition on @xmath440 , and on @xmath641",
    ". then @xmath564 consist of sequences of skipped customers of type @xmath642 , and exchanged servers of type @xmath643 , and their number is geometrically distributed ( values @xmath644 as in ( [ eqn.geometric-c ] ) , ( [ eqn.geometric-s ] ) : @xmath645      we count the @xmath633 , the number of skipped customers prior to a match @xmath18 . within the word @xmath646 , following each skipped customer or at the beginning of the word , we can encounter either a next skipped customer , or the end of the word , or a match for @xmath440 .",
    "when a match occurs it can be with @xmath25 , or it can be with @xmath647 . the probabilities for these outcomes are given in figure [ fig.trees ] .",
    "consider the event that @xmath71 finds a match of any type within @xmath564 , after skipping @xmath648 customers in @xmath649 .",
    "the probability of this event is : @xmath650   \\left ( \\frac{\\alpha_{(\\ell)}}{\\beta_{(\\ell ) } } \\chi_\\ell \\right)^{r_\\ell }   \\frac{\\alpha_{(\\ell)}}{\\beta_{(\\ell ) } } ( \\phi_\\ell + \\psi_\\ell ) , \\ ] ] we rewrite it as : @xmath651 here the @xmath652 are seen to have a geometric distribution , and the probability multiplying the geometric distribution terms is the probability that the match will occur in the word @xmath564 .",
    "consider next the same event conditional on the match being of type @xmath6 . we need to divide the probabilities in each step by @xmath653 .",
    "the resulting probability is : @xmath654   \\left ( \\frac{\\alpha_{(\\ell ) } \\chi_\\ell}{\\beta_{(\\ell ) } - \\alpha_{(\\ell ) } \\psi_\\ell }   \\right)^{r_\\ell } \\frac{\\alpha_{(\\ell ) } \\phi_\\ell}{\\beta_{(\\ell ) } - \\alpha_{(\\ell ) } \\psi_\\ell},\\ ] ] we rewrite it as : @xmath655 where again we have @xmath652 with geometric distributions , multiplied by the probability that the match with @xmath6 happens in word @xmath564 .    we see that conditional on @xmath562 the value of @xmath633 in the match of @xmath440 with @xmath18 , is a mixture of geometric random variables : @xmath656 and in the match of of @xmath440 with @xmath657 : @xmath658    the number of matched and exchanged servers succeeding the match , @xmath636 , is independent of the number of skipped customers prior to the match .",
    "also , if the match occurs in @xmath564 , the number of matched and exchanged servers after @xmath18 is geometric by the memoryless property of geometric random variables .",
    "hence , conditional on @xmath562 in the match of @xmath440 with @xmath18 , @xmath659 is a mixture of geometric random variables , plus the succeeding servers @xmath643 @xmath660 * note * : in all these equations , empty sums , empty products , and 0 probabilities occur when necessary ."
  ],
  "abstract_text": [
    "<S> the model of fcfs infinite bipartite matching was introduced in @xcite . in this model </S>",
    "<S> there is a sequence of items that are chosen i.i.d . from @xmath0 and an independent sequence of items that are chosen i.i.d . from @xmath1 , and a bipartite compatibility graph @xmath2 between @xmath3 and @xmath4 . items of the two sequences are matched according to the compatibility graph , and the matching is fcfs , each item in the one sequence is matched to the earliest compatible unmatched item in the other sequence . in @xcite </S>",
    "<S> a markov chain associated with the matching was analyzed , a condition for stability was verified , a product form stationary distribution was derived and and the rates @xmath5 of matches between compatible types @xmath6 and @xmath7 were calculated . in the current paper </S>",
    "<S> we present further results on this model . </S>",
    "<S> we use a loynes type scheme to show that if the system is stable there is a unique matching of the sequence over all the integers . </S>",
    "<S> we show dynamic reversibility : if in every matched pair we exchange the positions of the items the resulting permuted sequences are again independent and i.i.d . , and the matching between them is fcfs in reversed time . </S>",
    "<S> we use these results to derive stationary distributions of various markov chains associated with the model . </S>",
    "<S> we also calculate the distribution of the link lengths between matched items .    _ </S>",
    "<S> keywords : _ infinite bipartite matching ; first come first served policy ; loynes type construction ; dynamic reversibility ; product form solutions ; link lengths .    _ </S>",
    "<S> 2000 mathematics subject classification : _ </S>",
    "<S> primary 60j10 ; secondary 90b22 ; 68m20 . </S>"
  ]
}