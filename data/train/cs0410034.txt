{
  "article_text": [
    "in @xcite , roversi pointed out that the turing machine encoding of girard s seminal paper @xcite has a flaw .",
    "the flaw is due to how to encode configurations of turing machines : girard chooses @xmath0 as the type of the configurations , where the first argument @xmath1 represents the left parts of tapes , the second argument @xmath1 the right parts , and the third argument @xmath2 states .",
    "but it is impossible to communicate data between the first and the second in this type : the communication is needed in transitions of configurations .",
    "roversi changed the type of configurations in order to make the communication possible and showed that an encoding of turing machines based on the type works in _ light affine logic _",
    ", which is intuitionistic light linear logic with unconstrained weakening and without additives .",
    "but he did not sufficiently discuss whether his encoding works in _ light linear logic_. + in this paper , we show an encoding of turing machines in _ light linear logic_. this completes * p*-time completeness of light linear logic with girard s theorem @xcite that states computations on proof nets with fixed depth in light linear logic belong to class * p*. the idea of the encoding is based on a remark of girard s tutorial paper on linear logic @xciteaffine linear logic _ is the system of linear logic enriched ( ? ) with weakening .",
    "there is no much use for this system since the affine implication between @xmath3 and @xmath4 can be faithfully mimicked by @xmath5 . _",
roversi s encoding exploits weakening to discard some information after applications of iterations .",
    "our encoding uses @xmath6 as type of data that may be discarded . on",
    "the other hand light linear logic retains principle @xmath7 . because of this principle",
    ", we can obtain a proof of @xmath8 or @xmath9 from a proof of @xmath5 in light linear logic .",
    "the obtained proof behaves like a function from @xmath10 to @xmath11 or @xmath12 , not that of @xmath13 : in other words , outside boxes we can hide additive connectives which are inside boxes .",
    "that is a reason why the encoding works in light linear logic .",
    "+ on the other hand we also try to simplify lazy cut elimination procedure of light linear logic in @xcite .",
    "the attempt is based on the notion of chains of @xmath14-links .",
    "the presentation of girard s light linear logic  @xcite by sequent calculus has the _ comma _ delimiter , which implicitly denotes the @xmath14-connective .",
    "the comma delimiter also appears in girard s proof nets for light linear logic .",
    "the introduction of two expressions for the same object complicates the presentation of light linear logic .",
    "we try to exclude the comma delimiter from our proof nets .",
    "+ next , we consider a nondeterministic extension of the light linear logic system .",
    "our approach is to introduce a self - dual additive connective .",
    "the approach is also discussed in a recently appeared paper  @xcite .",
    "but the approach was known to us seven years ago  @xcite . moreover ,",
    "our approach is different from that of @xcite , because we directly use the self - dual additive connective , not sum rule in @xcite and we use a polymorphic encoding of nondeterminism .",
    "in particular , our approach does not bother us about commutative reduction between nondeterministic rule and other rules unlike @xcite .",
    "in this section , we define a simplified version of the system of light linear logic ( for short lll )  @xcite .",
    "first we present the formulas in the lll system .",
    "these formulas ( @xmath15 ) are inductively constructed from literals ( @xmath16 ) and logical connectives :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath17 + @xmath18 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we say unary connective @xmath19 is _",
    "neutral_. girard @xcite used the symbol @xmath20 for the connective .",
    "but we use @xmath19 since this symbol is an ascii character .",
    "negations of formulas are defined as follows :    * @xmath21 * @xmath22 * @xmath23 * @xmath24 * @xmath25 * @xmath26 * @xmath27    we also define linear implication @xmath28 in terms of negation and @xmath29-connective : @xmath30    in this paper we do not present sequent calculus for light linear logic . instead of that , we present a subclass of girard s proof nets for light linear logic , _ simple proof nets _ ( precisely , simple proof nets can be mapped into a subclass of girard s proof nets ) .",
    "although there is a proof net that is not simple in the sense of @xcite , simple proof nets are sufficient for our purpose , encoding of turing machines , because nonsimple proof nets never occur in our encoding .",
    "moreover it is possible to translate proof nets in the sense of @xcite into simple proof nets although simple proof nets are generally more redundant than nonsimple proof nets . + a simple proof net consists of formulas and links .",
    "figure  [ fig : links ] shows the _ links _ in lll : @xmath31 represents a formula that is generated from formulas @xmath32 by using @xmath14-connective and is called _",
    "general @xmath14-formula_. @xmath33 represents a list of several general @xmath14-formulas that are generated from @xmath32 .",
    "figure  [ simple ] shows simple proof nets are defined inductively .",
    "the formulas and links in simple proof nets have weights .",
    "these weights are generated from eigenweights that are associated with @xmath34-links occurring in simple proof nets by using boolean product operator @xmath35. if a formula or a link has the weight @xmath36 , then we omit the weight .",
    "moreover we must take care of the case of @xmath34-links .",
    "for example from two simple proof nets of figure  [ glueing - pre - ex1 ] we can construct a simple proof net with the conclusions @xmath37 of figure  [ glueing - after - ex1 ] . as shown in the figure ,",
    "context_-formulas must be shared .",
    "-links ]    moreover sharing of context - formulas may be complex .",
    "for example , from two simple proof nets of figure  [ glueing - ex2 ] we can construct a simple proof net with @xmath38 but it is difficult to write down this on a plane in a concise way .",
    "so we omit this .",
    "figure  [ nonsimplepnex ] shows an example that is a proof net in the sense of @xcite . the proof net satisfies the correctness condition of @xcite .",
    "but it is not simple .",
    "however we can easily construct a simple proof net that has the same conclusions as the proof net .",
    "for example a simple proof net corresponding to that of figure  [ nonsimplepnex ] is that of figure  [ simplepnex ] .",
    "but such a simple proof net is not uniquely determined .",
    "for instance , figure  [ another - simplepnex ] shows another simple proof net corresponding to that of figure  [ nonsimplepnex ] .",
    "besides , in the introduction rules of @xmath39-box and @xmath19-box when we replace @xmath14-occurrences of generalized @xmath14-formulas by comma delimiters , we can easily find that any modified simple proof net in this manner is a proof net of girard by induction on derivations of simple proof nets .",
    "figure  [ figcutelim ] shows the _",
    "rewrite rules _ in the lll system except for contraction , neutral , @xmath39-@xmath39 , and @xmath39-@xmath19 rewrite rules .",
    "fusion and c - w rewrite rules first appeared in @xcite .",
    "the other rewrite rules in figure  [ figcutelim ] are standard in linear logic .",
    "figure  [ neutral ] shows neutral rewrite rule .",
    "figure  [ contraction ] shows contraction rewrite rule , where @xmath40 , @xmath41 , @xmath42 and @xmath43 represent sequences of proof nets and *w* a sequence of weakening links .",
    "the length of @xmath40 must be the same as that of @xmath41 and the length of @xmath42 the same as that of @xmath43 .",
    "let @xmath44 , @xmath45 , @xmath46 , @xmath47 .",
    "each @xmath48 and @xmath49 must have the following conditions :    1 .   the conditions on @xmath50 .",
    "+ each @xmath50 must have the form of the upper proof net of figure  [ new - contraction - contractum - whynot - nonfake ] or that of figure  [ new - contraction - contractum - whynot - fake ] . in both proof nets , the first @xmath51 arguments of @xmath52 are all @xmath53 occurrences and all the links from @xmath54 to @xmath52 are @xmath14-links that have weight @xmath36 ( therefore all the formulas from @xmath54 to @xmath52 are not conclusions of two links .",
    "we call such a sequence of @xmath14-links _ @xmath14-chain _ ) . in the former case",
    "@xmath54 is equal to @xmath53 ( in this case @xmath55 ) and in the latter case @xmath54 not ( in this case @xmath56 ) .",
    "we call the former @xmath14-chain _ non - fake _ and the latter _",
    "fake_. 2 .   the conditions on @xmath57 .",
    "+ each @xmath57 must have the form of the upper proof net of figure  [ new - contraction - contractum - newtral - nonfake-90 ] or that of figure  [ new - contraction - contractum - newtral - fake-90 ] . in the former case",
    "there are some non - fake chains , but in the latter case all the @xmath14-chains are fake",
    ".    in other words each proof net in @xmath40 and @xmath42 must have at least one @xmath14-chain . moreover",
    "each @xmath58 and @xmath59 must have the following forms according to @xmath57 and @xmath50 :    1 .",
    "the case where the @xmath60-chain of @xmath50 is non - fake : + then @xmath61 must be the lower proof net of figure  [ new - contraction - contractum - whynot - nonfake ] .",
    "the case where the @xmath14-chain of @xmath50 is fake : + then @xmath61 must be the lower proof net of figure  [ new - contraction - contractum - whynot - fake ] .",
    "the case where some @xmath14-chains of @xmath57 are non - fake : + then @xmath62 must be the lower proof net of figure  [ new - contraction - contractum - newtral - nonfake-90 ] .",
    "the notation @xmath63 of the right side means that the weakening link with conclusion @xmath64 is missing in the proof net .",
    "the case where all the @xmath14-chains of @xmath57 are fake : + then @xmath62 must be the lower proof net of figure  [ new - contraction - contractum - newtral - fake-90 ] .",
    "note that neither the left hand side nor the right hand side of figure  [ contraction ] is a simple proof net .",
    "if we find a pattern of the left hand side of figure  [ contraction ] in a simple proof net , we can apply the contraction rule to the simple proof net and replace the pattern by an appropriate instantiation of the right hand side of figure  [ contraction ] .",
    "has the non - fake @xmath14-chain ]     has the fake @xmath14-chain ]     has non - fake @xmath14-chains ]     does not have any non - fake @xmath14-chains ]    let us recall lazy cut elimination in @xcite .",
    "let @xmath65 be a cut - link in an additive proof net .",
    "when two premises of @xmath65 are @xmath3 and @xmath53 , @xmath65 is _ ready _ if    1 .",
    "@xmath65 has the weight @xmath36 ; 2 .",
    "both @xmath3 and @xmath53 are the conclusion of exactly one link .",
    "for example , in figure  [ readynonreadyex ] , the right cut is ready , but the left not . after the right cut is rewritten , the left become ready .",
    "_ lazy cut elimination _ is a reduction procedure in which only ready cuts are redexes ( of course , in the contraction rewrite rule the above mentioned conditions must be satisfied ) .",
    "the definition also applies to our rewrite rules .",
    "so we use the definition . by @xmath66",
    "we denote one step reduction of lazy cut elimination .",
    "let @xmath67 be a simple proof net .",
    "if @xmath68 , then @xmath69 is also a simple proof net .",
    "induction on the construction of simple proof net @xmath67 and an easy argument on permutations of links .",
    "next , we relate lazy cut elimination of simple proof nets with that of girard s proof nets .    one step of lazy cut elimination of simple proof nets can be simulated by several steps of that of girard s proof nets .",
    "we do not present the proof because in order to prove this we must rephrase the full details of girard s proof nets .",
    "we just show the difference between them .",
    "the left cut of figure  [ nonsimpleredex - ex1 ] is a redex of girard s lazy cut elimination , but not of that of simple proof nets . in girard s lazy cut elimination , figure  [ nonsimpleredex - ex1 ]",
    "can be reduced to figure  [ nonsimple - contractum - ex1 ] .",
    "that does not happen to simple proof nets . instead of",
    "that , in lazy cut elimination of simple proof nets the right cut of figure  [ nonsimpleredex - ex1 ] is ready and figure  [ nonsimpleredex - ex1 ] can be reduced to figure  [ simpleredex - ex1 ] . then the residual left cut of figure  [ simpleredex - ex1 ] become ready . in lazy cut elimination of simple proof nets , figure  [ simpleredex - ex1 ]",
    "is reduced to figure  [ girard - lazy - red - ex2 ] by _ one - step_. but in girard s lazy cut elimination this reduction takes _ two - steps_. for example we need an intermediate proof net like figure  [ girard - lazy - red - ex1 ] .",
    "it is obvious that there is a proof net that is reduced to a cut - free form in girard s lazy cut elimination , but not in lazy cut elimination of simple proof nets .",
    "hence , in this sense , our lazy cut elimination is weaker than that of girard s proof nets .",
    "but , when we execute theorem  [ maintheorem2 ] , that is , compute polynomial bounded functions on binary integers in proof nets , our lazy cut eliminations and girard s always return the same result , since this is due to the following girard s theorem and our binary integer encoding in simple proof nets does not have any @xmath34-occurrences .",
    "[ notwiththeorem ] let @xmath70 be a proof - net whose conclusions do not contain the connective @xmath34 and @xmath71 and without ready cut ; then @xmath70 is cut - free .                ]",
    "let @xmath72 be a turing machine and @xmath73 be the number of the states of @xmath72 . without loss of generality",
    ", we can assume that only @xmath74 , @xmath36 , and @xmath75 occur in the tape of @xmath72 , where @xmath75 is the blank symbol of @xmath72 .",
    "we use @xmath76 for the type of the states of @xmath72 .",
    "in contrast to @xmath77 in @xcite , @xmath77 in this paper does not include the neutral connective @xmath19 .",
    "figure  [ boolex ] shows an example of @xmath77 proofs .",
    "after @xmath74 or @xmath36 @xmath78-link , @xmath79-links follow @xmath80 or @xmath81 times .",
    "proofs ]    in addition we use @xmath82 for the type of configurations of @xmath72 .",
    "the type represents the current configuration of running @xmath72 , that is , the 3-tuple of the left part of the current tape , the right part , and the current state .",
    "figure  [ configex ] shows an example of @xmath83 proofs . in the @xmath84-notation ,",
    "the example is @xmath85 , where @xmath86 is a @xmath77-value .",
    "hence the example denotes configuration @xmath87 .",
    "proofs ]    for shorthand , we use @xmath88 to represent @xmath89 .",
    "then we write down the transition function of @xmath72 in light linear logic , which is the main task of the paper .",
    "figure  [ transition ] shows our encoding of the transition function , where @xmath90 is an abbreviation of @xmath91 .",
    "the formula @xmath90 is fed to the second - order variable that is bound by the @xmath92-link in an input proof of @xmath83 .",
    "three proof nets apply_step(@xmath93 ) , apply_step(@xmath94 ) , and apply_step(@xmath95 ) in figure  [ transition ] are made up by giving a @xmath96 proof ( @xmath74 , @xmath36 , or @xmath75 ) to step of figure  [ step ] ( see figure  [ applystep ] ) , where @xmath93 , @xmath94 , and @xmath95 are different normal proof net of @xmath96 .",
    "@xmath93 , @xmath94 , and @xmath95 represent the symbols @xmath74 , @xmath36 , and @xmath75 on the tape of @xmath72 .",
    "the main purpose of these apply_step(@xmath97 ) is to decompose the left or right part of the tape of a given configuration into data with type @xmath98 , where both @xmath99 and @xmath100 represent the top symbol of the left or right part of the tape and @xmath3 represents the rest except for the top symbol .",
    "the principle by which the encoding works is the same as that used in writing down the predecessor function .",
    "there is just one proof net of @xmath96 that are different from these three .",
    "let the proof net be @xmath101 .",
    "the proof net @xmath101 do not have any corresponding symbol on the tape of @xmath72 : the proof net is used in apply_base of figure  [ baseandapplybase ] in order to make our encoding easy .",
    "the proof net main$ in the @xmath19-box in figure  [ transition ] is shown in figure  [ mainneutral ] .",
    "proof net apply_base in figure  [ mainneutral ] are made up by giving a @xmath96 proof empty to base of figure  [ baseandapplybase ] , where as we mentioned before , @xmath101 is a normal proof net of @xmath96 , which is different from @xmath93 , @xmath94 , and @xmath95 .",
    "the proof net apply_base is used in order to feed an initial value to apply_step(@xmath97 ) .",
    "proof net extract in figure  [ mainneutral ] is shown in figure  [ extract ] .",
    "the intention of extract was to transform an input of the net @xmath102 with type @xmath103 into @xmath104 with type @xmath105 .",
    "the top symbol of the left part of the current tape must be left with type @xmath88 since this is used in order to be attached to the left or right part of the tape of the next configuration .",
    "the top symbol of the right part of the current tape , at which the head of @xmath72 currently points , must be left with type @xmath96 since this is used in order to choose one of select functions ( which are defined later ) .",
    "note that to do this one must use additive connectives and multiplicative constants .",
    "proof net comp in figure  [ mainneutral ] is shown in figure  [ comp ] , where @xmath106 and @xmath107 the main purpose of extract is to transform an input of the net @xmath108 with type @xmath105 into the next configuration @xmath109 with type @xmath110 .",
    "data @xmath86 with type @xmath96 and @xmath111 with type @xmath77 in the input are used in order to choose one of select functions ( which are defined later ) .",
    "proof net matrix in figure  [ comp ] is shown in figure  [ matrix ] , where @xmath112 are proof nets that have the form of figure  [ row ] .",
    "the main purpose of matrix is to retain @xmath73 proof nets of the form of figure  [ row ] .",
    "proof nets @xmath113 and @xmath114 in figure  [ row ] have the form of figure  [ shiftleft ] or figure  [ shiftright ] .",
    "we call such proof nets _ shift functions_. proof nets that have the form of figure  [ shiftleft ] represent left moves of the head of @xmath72 . on the other hand proof nets that have the form of figure  [ shiftright ]",
    "represent right moves of the head of @xmath72 .",
    "proofs ( left move ) ]     proofs ( right move ) ]            from what precedes it is obvious that we can encode the transition function of @xmath72 into a proof net with conclusions @xmath115 of light linear logic . by using the proof net ,",
    "as shown in appendix  [ appendtm ] , * p*-time turing machines can be encoded . in other terms , we obtain the following theorem :    [ maintheorem ] let @xmath116 be @xmath117 .",
    "let @xmath72 be a turing machine with time bound of a polynomial with degree @xmath73 .",
    "in light linear logic @xmath72 can be represented by a proof net with conclusions @xmath118 .",
    "furthermore , we can strengthen the above theorem as follows :    [ maintheorem2 ] let @xmath119 be a polynomial - time function with degree @xmath73 . in light linear logic @xmath119 can be represented by a proof net with conclusions @xmath120 .    in order to prove the theorem",
    ", we need a proof net that transforms @xmath83 into @xmath116 . in appendix",
    "[ appendcfgtobint ] , we show a proof net that performs the translation .",
    "in this section we consider a nondeterministic extension of the lll system called the _ ndlll",
    "_ system . in this extended system",
    "we introduce a new self - dual additive connective `` nondeterministic with '' @xmath121",
    ". then the formulas of ndlll are constructed by adding the following clause to that of lll : @xmath122 since @xmath121 is a self - dual connective , the negation of the formula @xmath123 is defined as follows :    * @xmath124    the link newly introduced in ndlll is the form of figure  [ nddef ] .",
    "proof nets for the ndlll system are inductively defined from the rules of figure  [ simple ] and in the middle of figure  [ nddef ] . in a simple proof net for ndlll a unique eigenweight",
    "is assigned to each @xmath121-link occurrence in the same manner as that of @xmath34-link .",
    "+ finally the rewrite rules of ndlll are that of lll plus the nondeterministic rewrite rule of figure  [ nddef ] . in the rewrite rule for @xmath121",
    "any of the two contractums is nondeterministically selected . if the left contractum ( resp .",
    "the right contractum ) of figure  [ nddef ] is selected , then all the occurrences of both eigenweights for @xmath123 and @xmath125 are assigned to 1 ( resp . 0 ) . in the next section we explain a usage for the @xmath121 .          our usage of @xmath121-connective is to use @xmath121 in proof nets on datatypes like @xmath126 which use the standard additive connectives @xmath34 and @xmath14 . as an example , we consider cut - elimination of figure  [ ndwith - ex1 ] , where note that the sub - proof net with conclusion @xmath127 of the right premise of cut is constructed by using @xmath121 . from figure  [ ndwith - ex1 ] to figure  [ ndwith - ex5 ] the standard lazy cut elimination procedure is performed . in figure  [ ndwith - ex5 ]",
    "the nondeterministic cut elimination procedure defined in previous section is performed .",
    "figure  [ ndwith - ex6-a ] is one choice and figure  [ ndwith - ex6-b ] the other choice .",
    "an encoding of a nondeterministic turing machine into ndlll uses the same idea .",
    "the encoding is the same as that of a deterministic turing machine into lll except for comp of figure  [ comp ] .",
    "the comp proof net is replaced by the nd - comp of figure  [ comp - ndlll ] , where @xmath128 the idea is completely the same as that of the above example .",
    "the information about nondeterministic transitions of a nondeterministic turing machine is stored in a proof of @xmath129        by the completely same manner as theorem  [ maintheorem ] except for nd - comp the following theorem holds .",
    "[ maintheoremndlll ] let @xmath72 be a nondeterministic turing machine with time bound of a polynomial with degree @xmath73 . in nondeterministic light linear logic @xmath72",
    "can be represented by a proof net with conclusions @xmath118 .",
    "usually a nondeterministic turing machine characterizes a language accepted by the machine . without loss of generality",
    ", we can assume that nondeterministic turing machine has two special state symbols @xmath130 and @xmath131 which judge whether a word is accepted by the machine .",
    "moreover we can prove the following theorem .",
    "[ maintheorem2ndlll ] let @xmath132 be a language whose is accepted by a nondeterministic polynomial - time turing machine @xmath72 with degree @xmath73 . in nondeterministic light linear logic",
    "the characterization function of @xmath65 from @xmath133 to @xmath134 can be represented by a proof net with conclusions @xmath135 .    in order to obtain such a proof net from the proof net with conclusions @xmath118 constructed from theorem  [ maintheoremndlll ] , at first we construct a proof net which extracts a @xmath77 proof from a @xmath83 proof .",
    "figure  [ config2boolk ] shows the proof net .",
    "next we construct a proof net which maps a @xmath77 proof to a @xmath136 proof .",
    "the specification of proof net is that    1 .",
    "if a given @xmath77 proof net represents @xmath130 , then the return value is a @xmath136 proof net that represents @xmath130 ; 2 .   otherwise , the return value is a @xmath136 proof net that represents @xmath131 .",
    "we can easily construct such a proof net .",
    "next we discuss the * p*-time bound of lazy cut elimination .",
    "we define the _ size _ of a link to be the number of the conclusions of the link .",
    "moreover we define the _ size _ of a nd - simple proof net @xmath70 ( denoted by @xmath137 to be the sum of the sizes of the links in @xmath70 .",
    "the _ depth _ of @xmath70 ( denoted by @xmath138 ) is defined to be the maxmal nesting number of the boxes ( @xmath39-boxes or @xmath19-boxes ) in @xmath70 . as discussed in @xcite",
    ", @xmath137 is quadratic w.r.t the encoded data generated from @xmath70 .",
    "when @xmath68 by nondeterministic choice , it is obvious that the size of @xmath69 is strictly less than that of @xmath67 .",
    "we suppose that @xmath139 , where @xmath140 is the reflexive transitive closure of @xmath66 . from the above observation and the discussion in @xcite on the lll system ,",
    "the following proposition is obvious .    in the ndlll system , if @xmath139 , then the size of @xmath141 is bounded by @xmath142 .",
    "it is easy to see that on the above proposition we can lazily reduce @xmath70 to @xmath141 in a polynomial time w.r.t @xmath142 , because @xmath137 is quadratic w.r.t the encoded data generated from @xmath70 .",
    "[ ndptime ] in the ndlll system , if @xmath139 , then @xmath70 is reduced to @xmath141 in a polynomial time w.r.t @xmath142 .",
    "let @xmath72 be a nondeterministic polynomial - time turing machine with degree @xmath73 . then by theorem  [ maintheoremndlll ] we can construct a nd - simple proof net @xmath67 with conclusions @xmath118 .",
    "then let @xmath69 be a simple proof net with the conclusion @xmath116 representing a binary integer with length @xmath143 . then from proposition  [ ndptime ] we can see the proof net constructed by connecting @xmath67 and @xmath69 via cut - link is lazily and nondeterministically reduced to a normal form in a polynomial time w.r.t @xmath144 .",
    "it seems possible that a * p*-time turing machine encoding in light affine logic is mechanically translated into that in light linear logic . a given proof of the * p*-time turing machine encoding in light affine logic , we replace all the formula occurrences @xmath3 in the proof by @xmath6 and then apply an extract function like figure  [ extract ] to the resulting proof .",
    "but we did not adopt the method , since the simple transition makes a too redundant proof in light linear logic .",
    "so we made some optimizations .",
    "for example , in @xcite @xmath145 was used as the boolean type .",
    "the above mentioned translation makes @xmath146 .",
    "the study to find optimal translations seems interesting .",
    "the author thanks luca roversi for discussions at his visit to university of torino",
    ".    100 asperti ,  a. and roversi ,  l. intuitionistic light affine logic .",
    "_ acm transactions on computational logic _ ,",
    "* 3 *  ( 1),139 , 2002 .    asperti ,  a. light affine logic . in",
    "lics98 _ , 1998 .",
    "di cosmo ,  r. and kesner ,  d. strong normalization of explicit substitutions via cut elimination in proof nets . in _ lics97 _ , 1997 .",
    "girard ,  j .- y .",
    "linear logic .",
    "_ theoretical computer science _ ,",
    "* 50*,1102 , 1987 .",
    "girard ,  j .- y .",
    "linear logic : its syntax and semantics .",
    "_ advances in linear logic , london mathematical society lecture notes series _ * 222 * , 1995 .",
    "girard ,  j .- y .",
    "( 1996 ) proof - nets : the parallel syntax for proof - theory . in ursini and agliano , editors , _ logic and algebra , new york , marcel dekker _ , 1996 .",
    "girard ,  j .- y .",
    "light linear logic . _",
    "information and computation _ , * 143 * , 175204 , 1998 .",
    "matsuoka ,  s. nondeterministic linear logic .",
    "ipsj signotes programming no.12 , 1996 .",
    "murawski ,  a.  s. and ong ,  c .- h .",
    "l. can safe recursion be interpreted in light logic ? .",
    "available from luke ong s home page ( http://web.comlab.ox.ac.uk/oucl/work/luke.ong/ ) , 2000 .",
    "maurel ,  f. nondeterministic light logics and np - time .",
    "tlca 2003 , lncs 2701 , 2003 .",
    "papadimitriou ,  c. computational complexity , addison wesley , 1994 .",
    "roversi ,  l. a p - time completeness proof for light logics . in _ ninth annual conference of the eacsl ( csl99 ) ,",
    "lecture notes in computer science _ , * 1683 * , 469483 , 1999 .",
    "for shorthand , we use @xmath147 to represent @xmath148 .",
    "we also use @xmath149 and @xmath150 in addition , we implicitly assume coercion for @xmath151 . in other terms",
    ", we assume that by using a proof net with conclusions @xmath152 we can construct a proof net with conclusions @xmath153 provided @xmath154 .",
    "this is done by using @xmath155 proof nets that have the forms of figure  [ botcoercion ] , cut - links , and one contraction - link .",
    "+    ]    unlike @xcite , we do not use @xmath156 for our turing machine encoding : we only use @xmath157 instead of @xmath158 since we would like to reduce the number of proof nets appearing in this paper .",
    "it is possible to construct a turing machine encoding from our transition function encoding by using @xmath158 . in the following",
    "we show three basic functions for @xmath116 : two successor function and addition .",
    "figure  [ suc0 ] and figure  [ suc1 ] show two successor functions for @xmath116 : we call these suc0 and suc1 respectively . unlike @xmath158 , @xmath116 has two successor functions .",
    "+            figure  [ badd ] shows the analogue in @xmath116 to the addition in @xmath158 : we call the proof net badd .",
    "if we regard two inputs proofs of @xmath116 of the proof net as two lists which only have @xmath74 and @xmath36 , then we can regard badd as a concatenation function of two inputs .",
    "+        figure  [ bmul ] shows a proof net called bmul . in the figure , empty is a proof net of @xmath116 that does not have exponential - links except for two weakening - links with @xmath159 .",
    "let @xmath67 be a @xmath116 proof that is supplied to @xmath160 port of bmul and @xmath69 be a proof net with @xmath161 as one of conclusions that is supplied to @xmath162 port of bmul .",
    "let @xmath163 be the length of @xmath67 .",
    "the evaluated result of bmul provided inputs @xmath67 and @xmath69 are given , is @xmath163 copies of @xmath69 .",
    "let @xmath164 be the length of @xmath69 .",
    "the length of the result is @xmath165 .",
    "the proof net bmul is analogous to multiplication of @xmath158 .",
    "+        the proof net shown in figure  [ bint2config ] transform a @xmath116 proof into a @xmath83 proof that is a initial configuration of turing machines .",
    "we call the proof net bint2config . by using bint2config and transition , our encoding of the transition function of @xmath72",
    ", we can construct the engine part of turing machines shown in figure  [ tmengine ] .",
    "but it is not sufficient for a proof of theorem  [ maintheorem ] : besides we need constructions for polynomial time bound .",
    "to do this , we prepare several proof nets .",
    "+            the proof net @xmath166 of figure  [ coercion ] is the @xmath116 version of @xmath158 coercion of @xcite",
    ". then @xmath155 must be greater than @xmath74 .",
    "this proof net is used in figure  [ kcomposition ] and figure  [ tm ] .    ]",
    "the proof net k - contraction of figure  [ kcontraction ] is also the @xmath116 version of @xmath158 contraction of @xcite .",
    "this proof net is used in figure  [ kcomposition ] and figure  [ kpolynomial ] .",
    "+        the proof net in figure  [ kcomposition ] is used in figure  [ kpolynomial ] .",
    "this is basically @xmath73 compositions of bmul .",
    "the @xmath116 proof @xmath167 in figure  [ kcomposition ] is a constant that does not depend on the lengths of inputs of turing machine @xmath72 .",
    "+        the proof net kpolynomial of figure  [ kpolynomial ] is our polynomial construction with degree @xmath73 .",
    "let @xmath70 be a proof net of @xmath116 and @xmath163 be the length of @xmath70 .",
    "the evaluated result of kpolynomial provided an input @xmath70 is given , is a nest of @xmath19-boxes which has an inside proof net of @xmath116 with the length @xmath168 .",
    "+        finally we obtain our encoding of a turing machine with polynomial time bound of figure  [ tm ] .",
    "this completes our proof of theorem  [ maintheorem ] .",
    "at first we remark that when a given proof net with conclusion @xmath169 , we can construct a proof net with @xmath170 as shown in figure  [ bool - weakening ] .",
    "it is easy to extend the remark to the general @xmath77 case for @xmath171 .",
    "+ then based on the above remark , as a derived rule , we introduce @xmath77-axiom as shown in figure  [ boolk - axiom ] in order to keep figures as simple as possible .    -weakening ]    -axiom ]    in order to translate * config * proofs into * bint * proofs , we introduce an immediate type @xmath172 .",
    "+ figure  [ config2bint ] shows our translator from * config * proofs into * bint * proofs .",
    "when a given * config * proof , at first we duplicate the proof by using 2-contraction - config proof net .",
    "a construction of 2-contraction - config proof net is not so easy as that of 2-contraction for * bint*. appendix  [ constractionofcontractionconfig ] is devoted to the construction .",
    "after that , each duplicated * config * proof net is projected into a tint proof by using prj1 or prj2 shown in figure  [ prj1orprj2 - 90 ] .",
    "the purpose of prj1 is to extract the left parts of configurations of turing machines and similarly that of prj2 is to extract the right parts .",
    "+ proof net prj1 has proof net prj1sub shown in figure  [ prj1sub ] as a sub - proof net and prj2 has prj2sub shown in figure  [ prj2sub ] .",
    "proof net prj1 also has proof nets @xmath173 , @xmath174 , and @xmath175 as sub - proof nets and prj2 has tsuc0 , tsuc1 , and tsuc*. figure  [ tsuc0 ] and figure  [ tsuc0r ] show proof net tsuc0 and @xmath173 respectively .",
    "we omit tsuc1 , tsuc * , @xmath174 , and @xmath175 , since the constructions of these proof nets are easy exercise .",
    "note that in order to recover tapes correctly we need to reverse the left parts of tapes .",
    "next we concatenate obtained two * tint * proofs by tadd of figure  [ tadd ] .                    ]",
    "we distinguish the two normal proofs of @xmath176 .",
    "one is called @xmath177 . and the other @xmath178 ( see figure  [ pi01andpistar ] ) .",
    "next we apply distill of figure  [ distill ] to the obtained * tint * proof . the construction of the proof net distill is inspired by that of strip term in @xcite .",
    "the intention of the distill proof net is to keep occurrences of @xmath74 and @xmath36 until the first @xmath75 occurrence is reached .",
    "after that , the rest are discarded .",
    "figure  [ distillstepx ] shows three sub - proof nets distill_step_x ( x=1,2 , and @xmath75 ) of the distill proof net .",
    "moreover , two sub - proof nets @xmath179 and @xmath180 of @xmath181 have the forms of figure  [ distillstepsubjoin ] or figure  [ distillstepsubdiscard ] . table  [ distillstepsubxd ] shows the correspondence .",
    "+ figure  [ tint2bint ] shows tint2bint proof .",
    "the intention is to remove @xmath75-entry .     and",
    "@xmath178 ]                    .@xmath183 [ cols=\"^,^,^\",options=\"header \" , ]",
    "in this section we give how to construct 2-contraction - config proof net .",
    "in config2bint of appendix  [ appendcfgtobint ] we do not need the @xmath184-part of a given * config * proof .",
    "hence in the construction of 2-contraction - config proof net we could discard @xmath184-parts .",
    "but we give a general construction that duplicates @xmath184-parts here .",
    "figure  [ config2contraction ] shows 2-contraction - config proof net . in this proof net ,    1 .",
    "when given a * config * proof net , pre_config_dup of figure  [ preconfigdup ] outputs a quartet of * config * proof nets , where two * config * proofs are the same and only keep the left part and @xmath184 of the input , and the rest , which are two * config * proofs , are also the same and only keep the right part and @xmath184 of the input ; 2 .",
    "each configadd of figure  [ configadd ] concatenate two * config * proof nets in the quartet .      in pre_config_dup , at first",
    ", we make @xmath188 * config * proofs . then according to the @xmath184-value of the input @xmath83 proof",
    ", we choose 4 * config * proofs .",
    "that is why we use @xmath73-ary tuples by @xmath34-connectives in @xmath189 .",
    "in addition we need to distinguish the left part and the right part of the input @xmath83 proof .",
    "that is why we use one @xmath14-connective in @xmath185 .",
    "+ figure  [ preconfigdupmain ] shows sub - proof net pre_config_dup_main of pre_config_dup .",
    "note that as shown in figure  [ bdup ] , we can duplicate @xmath190 proof without using @xmath19 ( of course we can easily extend this construction to the @xmath77 case ) .",
    "+ proof nets @xmath191 ( where @xmath192 and @xmath193 ) shown in figure  [ dconfigk2 ] occur in + pre_config_dup_main as sub - proof nets .",
    "figure  [ suc0l ] and figure  [ suc0r ] show proof nets suc0l and suc0r .",
    "we omit suc1l , suc1r , suc@xmath75l and suc@xmath75r since the constructions of these proof nets are easy exercise ."
  ],
  "abstract_text": [
    "<S> in csl99 roversi pointed out that the turing machine encoding of girard s seminal paper `` light linear logic '' has a flaw . </S>",
    "<S> moreover he presented a working version of the encoding in light affine logic , but not in light linear logic . in this paper </S>",
    "<S> we present a working version of the encoding in light linear logic . </S>",
    "<S> the idea of the encoding is based on a remark of girard s tutorial paper on linear logic . </S>",
    "<S> the encoding is also an example which shows usefulness of additive connectives . </S>",
    "<S> + moreover we also consider a nondeterministic extension of light linear logic . </S>",
    "<S> we show that the extended system is * np*-complete in the same meaning as * p*-completeness of light linear logic . </S>"
  ]
}