{
  "article_text": [
    "increasing throughput / connectivity within scarce resources has been the main motivation for modern wireless communications . among the various proposed techniques ,",
    "the concept of _ relaying _ has attracted much attention as a cost - effective enabler to extend the network coverage and capacity . in recent 5 g discussions , relaying became one of the core parts for the future cellular architecture including techniques of small cell managements and device - to - device communications between users @xcite .    in network information theory",
    ", many intelligent and cooperative relaying strategies have been devised such as decode - and - forward / compress - and - forward for relay networks @xcite , network coding for noiseless networks @xcite , and general noisy network coding for discrete memoryless networks @xcite . among them , network coding has emerged as a promising technique for a practical wireless networking solution , which models the underlying wireless channels by a simple but non - trivial random packet erasure network . that is , each node is associated with its own broadcast packet erasure channel ( pec ) .",
    "namely , each node can choose a symbol @xmath6 $ ] from some finite field @xmath7 $ ] , transmits @xmath8 , and a random subset of receivers will receive the packet . in this",
    "setting , @xcite proved that the _ linear network coding _ ( lnc ) , operating only by  linear \" packet - mixings , suffices to achieve the single - multicast capacity .",
    "moreover , recent wireless testbeds have also demonstrated substantial lnc throughput gain for multiple - unicasts over the traditional store - and - forward 802.11 routing protocols @xcite .",
    "\\(s ) at ( 0,0 ) @xmath0 ; ( [ shift=(-60:0.3)]s ) arc ( -60:60:0.3 ) ; ( [ shift=(-60:0.4)]s ) arc ( -60:60:0.4 ) ; ( r ) at ( [ shift=(1,0,0)]s ) @xmath2 ; ( [ shift=(-60:0.3)]r ) arc ( -60:60:0.3 ) ; ( [ shift=(-60:0.4)]r ) arc ( -60:60:0.4 ) ; ( d1 ) at ( [ shift=(15:2.25)]s ) @xmath9 ; ( d2 ) at ( [ shift=(-15:2.25)]s)@xmath10 ; at ( [ shift=(1.6,0)]s ) ( a ) @xmath11-node @xmath12-hop relay network ; ( s ) at ( 3.3,0 ) @xmath0 ; ( spec ) at ( [ shift=(1.0,0)]s ) ; ( r ) at ( [ shift=(2,0,0)]s ) @xmath2 ; ( rpec ) at ( [ shift=(1.0,0)]r ) ; ( d1 ) at ( [ shift=(15:2.25)]r ) @xmath9 ; ( d2 ) at ( [ shift=(-15:2.25)]r)@xmath10 ; ( s )  ( spec ) ; ( spec ) .. controls([shift=(-2.1,0)]d1 ) .. ( d1 ) ; ( spec )",
    ".. controls([shift=(-2.1,0)]d2 ) .. ( d2 ) ; ( spec )  ( r ) ; ( r )  ( rpec ) ; ( rpec ) .. controls([shift=(0.7,0)]rpec ) .. ( d1 ) ; ( rpec ) .. controls([shift=(0.7,0)]rpec ) .. ( d2 ) ; at ( [ shift=(2.65,0)]s ) ( b ) the pec network model ;     +    ( n1 ) at ( 0,0 ) @xmath0 ; ( pec1 ) at ( [ shift=(0.75,0)]n1 ) ; ( n2 ) at ( [ shift=(25:1.5)]n1 ) @xmath9 ; ( n3 ) at ( [ shift=(-25:1.5)]n1 ) @xmath10 ; ( n1 )  ( pec1 ) ; ( pec1 ) .. controls([shift=(0.9,0)]n1 ) .. ( n2 ) ; ( pec1 ) .. controls([shift=(0.9,0)]n1 ) .. ( n3 ) ; at ( [ shift=(0.2,0.4)]n1 ) @xmath13 $ ] ; at ( [ shift=(0.2,0)]n2 ) @xmath14 ; at ( [ shift=(0.2,0)]n3 ) @xmath8 ; at ( [ shift=(-1.2,0)]n1 ) ( c ) a @xmath15-to-@xmath12 pec without relay ; ( s1 ) at ( 4,0.5 ) @xmath16 ; ( s1pec ) at ( [ shift=(0.75,0)]s1 ) ; ( s2 ) at ( 4,-0.5 ) @xmath17 ; ( s2pec ) at ( [ shift=(0.75,0)]s2 ) ; ( r ) at ( [ shift=(1.6,-0.5)]s1 ) @xmath2 ; ( rpec ) at ( [ shift=(0.75,0)]r ) ; ( d1 ) at ( [ shift=(25:1.5)]r ) @xmath9 ; ( d2 ) at ( [ shift=(-25:1.5)]r)@xmath10 ; ( s1 )  ( s1pec ) ; ( s1pec ) .. controls([shift=(-2.1,0.2)]d1 ) and ( [ shift=(-0.5,0.2)]d1 ) .. ( d1 ) ; ( s1pec ) .. controls([shift=(-2.0,0)]d2 ) .. ( d2 ) ; ( s1pec )  ( r ) ; ( s2 )  ( s2pec ) ; ( s2pec ) .. controls([shift=(-2.0,0)]d1 ) .. ( d1 ) ; ( s2pec ) .. controls([shift=(-2.1,-0.2)]d2 ) and ( [ shift=(-0.5,-0.2)]d2 ) .. ( d2 ) ; ( s2pec )  ( r ) ; ( r )  ( rpec ) ; ( rpec )",
    ".. controls([shift=(0.2,0)]rpec ) .. ( d1 ) ; ( rpec ) .. controls([shift=(0.2,0)]rpec ) .. ( d2 ) ; at ( [ shift=(-0.7,0)]s1 ) @xmath8 ; at ( [ shift=(-0.7,0)]s2 ) @xmath14 ; at ( [ shift=(0.2,0.4)]r ) @xmath13 $ ] ; at ( [ shift=(0.2,0)]d1 ) @xmath14 ; at ( [ shift=(0.2,0)]d2 ) @xmath8 ; at ( [ shift=(-0.6,-0.5)]s1 ) ( d ) a 2-flow wireless butterfly ;    motivated by these results , we are interested in finding an optimal or near - optimal lnc strategy for wireless relaying networks . to simplify the analysis",
    ", we consider a @xmath11-node @xmath12-hop network with one source @xmath0 , two destinations @xmath1 , and a common relay @xmath2 inter - connected by two broadcast pecs .",
    "see fig .",
    "[ fig : srp : model](a - b ) for details .",
    "we assume time - sharing between @xmath0 and @xmath2 so that interference is fully avoided , and assume the causal packet acknowledgment feedback @xcite . in this way",
    ", we can concentrate on how the relay @xmath2 and source @xmath0 can jointly exploit the broadcast channel diversity within the network .    when relay @xmath2 is not present , fig .",
    "[ fig : srp : model](b ) collapses to fig .",
    "[ fig : srp : model](c ) , the @xmath12-receiver broadcast pec .",
    "it was shown in @xcite that a simple lnc scheme is capacity - achieving .",
    "the idea is to exploit the wireless diversity created by random packet erasures , i.e. , overhearing packets of other flows . whenever a packet @xmath8 intended for @xmath9 is received only by @xmath10 and a packet @xmath14 intended for @xmath10",
    "is received only by @xmath9 , @xmath0 can transmit their linear mixture @xmath18 $ ] to benefit both receivers simultaneously .",
    "this simple but elegant  butterfly - style \" lnc operation achieves the shannon capacity of fig .",
    "[ fig : srp : model](c ) @xcite .",
    "another related scenario is a @xmath12-flow wireless butterfly network in fig .",
    "[ fig : srp : model](d ) that contains two separate sources @xmath16 and @xmath17 instead of a single source @xmath0 as in our setting . in this butterfly scenario ,",
    "two separate sources are not coordinating with each other and thus each source can only mix packets of their own flow .",
    "@xcite showed that the same butterfly - style lnc is no longer optimal but very close to optimal .",
    "in contrast , in our setting of fig .  [",
    "fig : srp : model](b ) , the two flows are originating from the same source @xmath0 .",
    "therefore , @xmath0 can perform `` inter - flow nc '' to further improve the performance .",
    "as we will see , relay @xmath2 should not just `` forward '' the packets it has received and need to actively perform coding in order to approach the capacity .",
    "this is why we call such a scenario the smart repeater problem .",
    "* contributions : * this work investigates the lnc capacity region @xmath5 of the smart repeater network . the outer bound",
    "is proposed by leveraging upon the algebraic structure of the underlying lnc problem .",
    "for the achievability scheme , we show that the classic butterfly - style is far from optimality and propose new lnc operations that lead to close - to - optimal performance . by numerical simulations",
    ", we demonstrate that the proposed outer / inner bounds are very close , thus effectively bracketing the lnc capacity of the smart repeater problem .",
    "the @xmath12-flow wireless smart repeater network with broadcast pecs , see fig .",
    "[ fig : srp : model](b ) , can be modeled as follows .",
    "consider two traffic rates @xmath5 and assume slotted transmissions . within a total budget of @xmath19 time slots ,",
    "source @xmath0 would like to send @xmath20 packets , denoted by a row vector @xmath21 , to destination @xmath22 for all @xmath23 with the help of relay @xmath2 .",
    "each packet is chosen uniformly randomly from a finite field @xmath7 $ ] with size @xmath24 . to that end",
    ", we denote @xmath25 as an @xmath26-dimensional row vector of all the packets , and define the linear space @xmath27)^{n\\rsum}$ ] as the _ overall message / coding space_.    to represent the reception status , for any time slot @xmath28 , we define two _ channel reception status vectors _ : @xmath29 where  @xmath15 \" and  @xmath30 \" represent successful reception and erasure , respectively . for example , @xmath31 and @xmath30 represents whether @xmath9 can receive the transmission from source @xmath0 or not at time slot @xmath32 .",
    "we then use @xmath33 to describe the @xmath34-dimensional channel reception status vector of the entire network .",
    "we also assume that @xmath35 is memoryless and stationary , i.e. , @xmath35 is independently and identically distributed over the time axis @xmath32 .",
    "we assume that either source @xmath0 or relay @xmath2 can transmit at each time slot , and express the _ scheduling decision _ by @xmath36 .",
    "for example , if @xmath37 , then source @xmath0 transmits a packet @xmath38 $ ] ; and only when @xmath39 , node @xmath40 ( one of @xmath3 ) will receive @xmath41 . in all other cases ,",
    "node @xmath40 receives an erasure @xmath42 .",
    "the reception @xmath43 of relay @xmath2 s transmission is defined similarly .",
    "assuming that the @xmath34-bit @xmath35 vector is broadcast to both @xmath0 and @xmath2 after each packet transmission through a separate control channel , a _",
    "linear network code _ contains @xmath19 scheduling functions @xmath44_{1}^{t-1}),\\ ] ] where we use brackets @xmath45_{1}^{\\tau}$ ] to denote the collection from time @xmath15 to @xmath46 .",
    "namely , at every time @xmath32 , scheduling is decided based on the network - wide channel state information ( csi ) up to time @xmath47 .",
    "if source @xmath0 is scheduled , then it can send a linear combination of any packets .",
    "that is , @xmath48 where @xmath49 is a row coding vector in @xmath50 .",
    "the choice of @xmath49 depends on the past csi vectors @xmath51_{1}^{t-1}$ ] , and we assume that @xmath49 is known causally to the entire network . can either be appended in the header or be computed by the network - wide causal csi feedback @xmath51_1^{t\\!-\\!1}$ ] . ] therefore , decoding can be performed by simple gaussian elimination .",
    "we now define two important linear space concepts : the _ individual message subspace _ and the _ knowledge subspace .",
    "_ to that end , we first define @xmath52 as an @xmath26-dimensional elementary row vector with its @xmath53-th coordinate being one and all the other coordinates being zero .",
    "recall that the @xmath26 coordinates of a vector in @xmath50 can be divided into @xmath12 consecutive `` intervals '' , each of them corresponds to the information packets @xmath21 for each flow from source to destination @xmath22 .",
    "we then define the _ individual message subspace _",
    "@xmath54 : @xmath55 that is , @xmath54 is a linear subspace corresponding to any linear combination of @xmath21 packets . by , each @xmath54 is a linear subspace of the overall message space @xmath50 and @xmath56 .",
    "we define the knowledge space for @xmath3 .",
    "the knowledge space @xmath57 in the end of time @xmath32 is defined by @xmath58 where @xmath59 .",
    "for example , @xmath60 is the linear space spanned by the packets successfully delivered from source to relay up to time @xmath32 .",
    "@xmath61 is the linear space spanned by the packets received at destination @xmath9 up to time @xmath32 , either transmitted by source or by relay .    for shorthand",
    ", we use @xmath62 and @xmath63 instead of @xmath61 and @xmath64 , respectively .",
    "then , by the above definitions , we quickly have that destination @xmath22 can decode the desired packets @xmath21 as long as @xmath65 .",
    "that is , when the knowledge space in the end of time @xmath19 contains the desired message space .    with the above linear space concepts",
    ", we now can describe the packet transmission from relay .",
    "recall that , unlike the source where the packets are originated , relay can only send a linear mixture of _ the packets that it has known .",
    "_ therefore , the encoder description from relay can be expressed by @xmath66    for comparison , in ( [ eq : srp : lin_enc_src ] ) , the source @xmath0 chooses @xmath49 from @xmath50 .",
    "we can now define the lnc capacity region .",
    "[ def : srp : lnccapacity ] fix the distribution of @xmath35 and finite field @xmath7 $ ] .",
    "a rate vector @xmath5 is achievable by lnc if for any @xmath67 there exists a joint scheduling and lnc scheme with sufficiently large @xmath19 such that @xmath68 for all @xmath69 .",
    "the lnc capacity region is the closure of all lnc - achievable @xmath5 .      in our network model , there are two broadcast pecs associated with @xmath0 and @xmath2 . for shorthand ,",
    "we call those pecs the @xmath0-pec and the @xmath2-pec , respectively . the distribution of the network - wide channel status vector @xmath70 can be described by the probabilities @xmath71 for all @xmath72 , and @xmath73 for all @xmath74 . in total",
    ", there are @xmath75 channel parameters . to be correlated ( i.e. , spatially correlated as it is between coordinates , not over the time axis ) ,",
    "our setting can also model the scenario in which @xmath9 and @xmath10 are situated in the same physical node and thus have perfectly correlated channel success events . ]    for notational simplicity , we also define the following two probability functions @xmath76 and @xmath77 , one for each pec . the input argument of @xmath78 is a collection of the elements in @xmath79 .",
    "the function @xmath76 outputs the probability that the reception event is compatible to the specified collection of @xmath79 . for example",
    ", @xmath80 is the probability that the input of the source - pec is successfully received by @xmath10 but not by @xmath2 .",
    "herein , @xmath9 is a dont - care receiver and @xmath81 thus sums two joint probabilities together ( @xmath9 receives it or not ) as described in ( [ eq : srp : chex ] ) .",
    "another example is @xmath82 , which is the marginal success probability that a packet sent by @xmath2 is heard by @xmath10 .",
    "to slightly abuse the notation , we further allow @xmath76 and @xmath77 to take multiple input arguments separated by commas . with this new notation , they can represent the probability that the reception event is compatible to at least one of the input arguments .",
    "for example , @xmath83 that is , @xmath84 represents the probability that @xmath85 @xmath86 equals one of the following @xmath34 vectors @xmath87 , @xmath88 , @xmath89 , @xmath90 , and @xmath91 .",
    "note that these @xmath34 vectors are compatible to either @xmath92 or @xmath2 or both .",
    "another example of this @xmath76 notation is @xmath93 , which represents the probability that a packet sent by @xmath0 is received by at least one of the three nodes @xmath9 , @xmath10 , and @xmath2 .",
    "the indicator function and taking expectation is denoted by @xmath94 and @xmath95 , respectively .",
    "since the coding vector @xmath49 has @xmath26 number of coordinates , there are exponentially many ways of jointly designing the scheduling @xmath96 and the coding vector @xmath49 choices over time when sufficiently large @xmath19 and @xmath7 $ ] are used .",
    "therefore , we will first simplify the aforementioned design choices by comparing @xmath49 to the knowledge spaces @xmath97 , @xmath98 .",
    "such a simplification allows us to derive proposition  [ prop : srp : lp - outer ] , which uses a linear programming ( lp ) solver to exhaustively search over the entire coding and scheduling choices and thus computes an lnc capacity outer bound . to that end , we use @xmath99 as shorthand for @xmath100 , the knowledge space of destination @xmath22 in the end of time @xmath101 .",
    "we first define the following @xmath102 linear subspaces of @xmath50 .",
    "@xmath103 where @xmath104 is the _ sum space _ of any @xmath105 .",
    "in addition , we also define the following eight additional subspaces involving @xmath106 :    @xmath107 where @xmath108 is a shorthand notation for @xmath106 , the knowledge space of relay @xmath2 in the end of time @xmath101 .    in total , there are @xmath109 linear subspaces of @xmath50 .",
    "we then partition the overall message space @xmath50 into @xmath110 disjoint subsets by the _ venn diagram _ generated by these @xmath111 subspaces .",
    "that is , at any time @xmath32 , we can place any coding vector @xmath49 in exactly one of the @xmath110 disjoint subsets by testing whether it belongs to which @xmath112-subspaces . in the following discussion",
    ", we often drop the input argument  @xmath113 \" when the time instant of interest is clear in the context .",
    "we now use @xmath111 bits to represent each disjoint subset in @xmath50 . for any @xmath111-bit string @xmath114",
    ", we define  the coding type-@xmath115 \" by @xmath116    where the regions of these @xmath110 disjoint coding types may vary at every time instant as the @xmath111 @xmath112-subspaces defined in ( [ def : srp : aset1 ] ) to ( [ def : srp : asetr2 ] ) will evolve over the course of time .",
    "the superscript `` ( s ) '' indicates the source , meaning that @xmath0 can send @xmath49 in any coding type since source @xmath0 knows all @xmath117 and @xmath118 packets to begin with .",
    "note that not all @xmath110 disjoint subsets are feasible .",
    "for example , any @xmath119 with @xmath120 but @xmath121 is always empty because any coding vector that lies in @xmath122 can not lie outside the larger @xmath123 , see ( [ def : srp : aset4 ] ) and ( [ def : srp : asetr1 ] ) , respectively .",
    "we say those always empty subsets _",
    "infeasible coding types _ and the rest is called _ feasible coding types _ ( @xmath124 ) . by exhaustive computer search",
    ", we can prove that out of @xmath125 subsets , only @xmath126 of them are feasible .",
    "namely , the entire coding space @xmath127 can be viewed as a union of @xmath128 disjoint coding types .",
    "source @xmath0 can choose a coding vector @xmath49 from one of these @xmath128 types .",
    "see ( [ eq : srp : lin_enc_src ] ) .    for coding vectors that relay @xmath2 can choose",
    ", we can further reduce the number of possible placements of @xmath49 in the following way . by ( [ eq : srp : lin_enc_rly ] ) , we know that when @xmath129 , the @xmath49 sent by relay must belong to its knowledge space @xmath106 . hence , such @xmath49 must always lie in @xmath106 , which is @xmath130 , see ( [ def : srp : asetr2 ] ) . as a result , any coding vector @xmath49 sent by relay @xmath2 must lie in those @xmath128 subsets @xmath124 that satisfy : @xmath131    again by computer search , there are @xmath132 such coding types out of 154 subsets @xmath124 .",
    "we call those @xmath132 subsets as _ relay s feasible coding types _ ( @xmath133 ) . obviously , @xmath134",
    ". see appendix  [ app : srp : netori ] for the enumeration of those @xmath124 and @xmath133 .",
    "we can then derive the following upper bound .",
    "[ prop : srp : lp - outer ] a rate vector @xmath5 is in the lnc capacity region only if there exists @xmath128 non - negative variables @xmath135 for all @xmath136 , @xmath132 non - negative variables @xmath137 for all @xmath138 , and @xmath139 non - negative @xmath140-variables , @xmath141 to @xmath142 , such that jointly they satisfy the following three groups of linear conditions :    @xmath143 group  1 , termed the _ time - sharing condition _ , has @xmath15 inequality : @xmath144",
    "@xmath143 group  2 , termed the _ rank - conversion conditions _ , has @xmath139 equalities : @xmath145    @xmath143 group  3 , termed the _ decodability conditions _ , has @xmath34 equalities : @xmath146    the intuition is as follows .",
    "since we are partitioning @xmath50 ( the entire coding space ) and @xmath108 ( the knowledge space of @xmath2 ) into @xmath128 feasible coding types @xmath124 and @xmath132 subsets @xmath133 , any lnc scheme can be classified as either @xmath0 or @xmath2 sending a coding vector @xmath49 in certain coding type at each time instant .",
    "more specifically , consider an achievable rate vector @xmath5 and the associated lnc scheme . in the beginning of any time @xmath32",
    ", we can always compute the knowledge spaces @xmath147 , @xmath148 , and @xmath106 by ( [ def : srp : sp ] ) and use them to compute the @xmath112-subspaces in ( [ def : srp : aset1])([def : srp : asetr2 ] ) .",
    "then suppose that for some specific time @xmath46 , the given scheme chooses the source @xmath0 to transmit a coding vector @xmath149 . by the previous discussions , we can classify which coding type @xmath119 this @xmath149 belongs to , by comparing it to those computed @xmath111 @xmath112-subspaces . after running the given scheme from time @xmath15 to @xmath19 , we can thus compute the variable @xmath150 @xmath151 for each @xmath136 as the _ frequency _ of scheduling source @xmath0 with the chosen coding vectors being in @xmath119 .",
    "similarly for the relay @xmath2 , we can compute the variable @xmath152 @xmath153 for each @xmath138 as the _ frequency _ of scheduling relay @xmath2 with the chosen coding vectors being in @xmath154 .",
    "obviously , the computed variables @xmath155 satisfy the time - sharing inequality ( [ prop : srp : lp - outer : ts ] ) .",
    "we then compute the @xmath140-variables by @xmath156 as the normalized expected ranks of @xmath112-subspaces in the end of time @xmath19 .",
    "we now claim that these variables satisfy ( [ prop : srp : lp - outer : a1 ] ) to ( [ prop : srp : lp - outer : dec2 ] ) .",
    "this claim implies that for any lnc - achievable @xmath5 , there exists @xmath135 , @xmath137 , and @xmath140-variables satisfying proposition  [ prop : srp : lp - outer ] , thus constituting an outer bound on the lnc capacity .    to prove that ( [ prop : srp : lp - outer : a1 ] ) to ( [",
    "prop : srp : lp - outer : a14 ] ) are true ,- error probability . for ease of discussion ,",
    "the corresponding technical details are omitted when discussing the intuition of proposition  [ prop : srp : lp - outer ] .",
    "] consider an @xmath112-subspace , say @xmath157 as defined in ( [ def : srp : aset2 ] ) and ( [ def : srp : sp ] ) . in the beginning of time",
    "@xmath15 , destination @xmath9 has not received any packet yet , i.e. , @xmath158 .",
    "thus the rank of @xmath159 is @xmath160 .",
    "the fact that @xmath147 contributes to @xmath161 implies that @xmath162 will increase by one whenever the destination @xmath9 receives a packet @xmath163 satisfying @xmath164 . specifically , whenever source @xmath0 sends a @xmath49 in @xmath119 with @xmath165 ,",
    "such @xmath49 is not in @xmath161 , and whenever @xmath9 receives it , @xmath162 increases by @xmath15 .",
    "moreover , whenever relay @xmath2 sends a @xmath49 in @xmath154 with @xmath165 and @xmath9 receives it , @xmath162 also increases by @xmath15 .",
    "therefore , in the end of time @xmath19 , we have @xmath166    taking the normalized expectation of ( [ eq : srp : evproc ] ) , we have proven ( [ prop : srp : lp - outer : a3 ] ) . by similar _ rank - conversion",
    "_ arguments , ( [ prop : srp : lp - outer : a1 ] ) to ( [ prop : srp : lp - outer : a14 ] ) can be shown to be true .    in the end of time",
    "@xmath19 , since the given scheme is `` decodable '' ( i.e. , both @xmath9 and @xmath10 can decode the desired packets @xmath117 and @xmath118 , respectively ) , we must have @xmath167 and @xmath168 , or equivalently @xmath169 for all @xmath69 .",
    "this implies that the ranks of @xmath170 and @xmath171 , and the ranks of @xmath172 and @xmath173 are equal , respectively .",
    "together with ( [ eq : srp : yi ] ) , we thus have the first two equalities in ( [ prop : srp : lp - outer : dec1 ] ) .",
    "similarly , one can prove that the remaining equalities in ( [ prop : srp : lp - outer : dec1 ] ) and ( [ prop : srp : lp - outer : dec2 ] ) are satisfied as well .",
    "the claim is thus proven .",
    "in the smart repeater problem , @xmath0 can always take over relay s operations , and thus @xmath2 becomes useless when the @xmath2-pec is weaker than the @xmath0-pec . to fully fetch the coding and diversity benefits using relay , we first focus on the following assumption .",
    "[ def : srp : strong - relaying ] the smart repeater network with @xmath1 is _ strong - relaying _ if @xmath174 for all @xmath175 .",
    "that is , the given @xmath2-pec is stronger than the given @xmath0-pec for all non - empty subsets of @xmath1 .",
    "we describe our capacity - approaching achievability scheme based on the strong - relaying scenario . the general inner bound that works in arbitrary @xmath0-pec and @xmath2-pec distributions , and introduces more advanced lnc operations",
    "will be described in proposition  [ prop : srp : sim - innerv2 ] .",
    "[ prop : srp : sim - inner ] a rate vector @xmath5 is lnc - achievable if there exist @xmath12 non - negative variables @xmath176 and @xmath177 , @xmath178 non - negative @xmath0-variables : @xmath179    and @xmath180 non - negative @xmath2-variables : @xmath181 } { } \\;:\\ ; \\text{for all}\\;k\\in\\{1,2\\ } \\big\\ } , \\;\\ ; \\big\\ { \\rnumrc,\\ ; \\rnumox{},\\ ; \\rnumcx { } \\big\\},\\end{aligned}\\ ] ]    such that jointly they satisfy the following five groups of linear conditions :    @xmath143 group  1 , termed the _ time - sharing conditions _ , has @xmath182 inequalities : @xmath183}{}\\right ) + \\rnumrc + \\rnumox { } + \\rnumcx{}. \\label{prop : srp : sim - inner : ts3}\\end{aligned}\\ ] ]    @xmath143 group  2 , termed the _ packets - originating condition _",
    ", has @xmath12 inequalities : consider any @xmath184 satisfying @xmath185 . for each @xmath186 pair ( out of the two choices @xmath187 and @xmath188 ) , @xmath189 @xmath143 group  3 , termed the _ packets - mixing condition _",
    ", has @xmath11 inequalities : for each @xmath186 pair , @xmath190 and the following one inequality : @xmath191 @xmath143 group  4 , termed the _ classic xor condition by source only _ , has @xmath11 inequalities : for each @xmath186 pair , @xmath192    @xmath143 group  5 , termed the _ xor condition _ ,",
    "has @xmath182 inequalities : @xmath193 and for each @xmath186 pair , @xmath194 } { } \\right)\\cdot\\psrpsimt{r}{d_i}. \\tag{x}\\label{prop : srp : sim - inner : x}\\end{aligned}\\ ] ]    @xmath143 group  6 , termed the _ decodability condition _ , has @xmath12 inequalities : for each @xmath186 pair , @xmath195}{}\\right)\\cdot\\psrpsimt{r}{d_i } \\geq \\rb{i}. \\tag{d}\\label{prop : srp : sim - inner : d}\\end{aligned}\\ ] ] the intuition is as follows .",
    "proposition  [ prop : srp : sim - inner ] can be described based on packet movements in a queueing network , governed by the proposed lnc operations .",
    "each @xmath0- and @xmath2-variable ( except @xmath32-variables for time - sharing ) is associated with a specific lnc operation performed by the source @xmath0 and the relay @xmath2 , respectively .",
    "the inequalities ( [ prop : srp : sim - inner : e ] ) to ( [ prop : srp : sim - inner : d ] ) then describe the queueing process , where lhs and rhs of each inequality implies the packet insertion and removal condition of a queue . for the notational convenience , we define the following queue notations associated with these @xmath139 inequalities ( [ prop : srp : sim - inner : e ] ) to ( [ prop : srp : sim - inner : d ] ) :    where we use the index - after - reference to distinguish the session ( i.e. flow ) of focus of an inequality . for example , ( [ prop : srp : sim - inner : e]1 ) and ( [ prop : srp : sim - inner : e]2 ) are to denote the inequality ( [ prop : srp : sim - inner : e ] ) when @xmath196 and @xmath197 , respectively .    for example , suppose that @xmath198 packets and @xmath199 packets are initially stored in queues @xmath200 and @xmath201 , respectively , at source @xmath0 .",
    "the superscript @xmath69 indicates that the queue is for the packets intended to destination @xmath22 .",
    "the subscript indicates that those packets have not been heard by any of @xmath3 . the lnc operation corresponding to the variable @xmath202 ( resp .",
    "@xmath203 ) is to send a session-@xmath15 packet @xmath204 ( resp .",
    "a session-@xmath12 packet @xmath205 ) uncodedly",
    ". then the inequality ( [ prop : srp : sim - inner : e]1 ) ( resp .",
    "( [ prop : srp : sim - inner : e]2 ) ) implies that whenever it is received by at least one of @xmath3 , this packet is removed from the queue of @xmath206 ( resp .",
    "@xmath207 ) .    depending on the reception status",
    ", a packet will either be moved to another queue or remain in the same queue .",
    "for example , the use of the @xmath202-operation ( sending @xmath208 uncodedly from source ) will take @xmath204 from @xmath206 and insert it into @xmath209 as long as @xmath210 in the reception status @xmath211 , i.e. , when the intended destination @xmath9 correctly receives it .",
    "similarly , when the reception status is @xmath212 but @xmath213 , this packet will be inserted to the queue @xmath214 according to the packet movement rule of ( [ prop : srp : sim - inner : a]1 ) ; inserted to @xmath215 when @xmath216 but @xmath217 by ( [ prop : srp : sim - inner : s]1 ) ; and inserted to @xmath218 when @xmath219 but @xmath220 by ( [ prop : srp : sim - inner : x]1 ) .",
    "obviously when none of @xmath3 has received it , the packet @xmath221 simply remains in @xmath206 .",
    "[ fig : srp : qnetwork ] illustrates the proposed queueing network and movement process represented by proposition  [ prop : srp : sim - inner ] .",
    "the full / detailed descriptions of the lnc operations and the corresponding packet movement process following the inequalities in proposition  [ prop : srp : sim - inner ] are relegated to appendix  [ app : srp : queue_invariance ] .",
    "( l0 ) at ( 0.0,0 ) ; ( e1 ) at ( [ shift=(-8.5,0)]l0 ) @xmath206 ; ( e2 ) at ( [ shift=(+8.5,0)]l0 ) @xmath207 ; ( l1 ) at ( [ shift=(0,-1.0)]l0 ) ; ( pm1 ) at ( [ shift=(-3.5,0)]l1 ) @xmath222 ; ( pm2 ) at ( [ shift=(+3.5,0)]l1 ) @xmath223 ; ( uc1 ) at ( [ shift=(-8,0)]l1 ) @xmath202 ; ( uc1dec ) at ( [ shift=(-0.7,-0.6)]uc1 ) ; ( uc1 ) .. controls([shift=(0,-0.3)]uc1 ) .. ( uc1dec ) ; ( uc2 ) at ( [ shift=(+8,0)]l1 ) @xmath203 ; ( uc2dec ) at ( [ shift=(+0.7,-0.6)]uc2 ) ; ( uc2 ) .. controls([shift=(0,-0.3)]uc2 ) .. ( uc2dec ) ; ( l2 ) at ( [ shift=(0,-1.5)]l1 ) ; ( b1 ) at ( [ shift=(-5,0)]l2 ) @xmath224 ; ( a1 ) at ( [ shift=(-2,0)]l2 ) @xmath214 ; ( a2 ) at ( [ shift=(+2,0)]l2 ) @xmath225 ; ( b2 ) at ( [ shift=(+5,0)]l2 ) @xmath226 ; ( rc1 ) at ( [ shift=(-1.5,0)]b1 ) @xmath227 ; ( rc1dec1 ) at ( [ shift=(-0.7,-0.6)]rc1 ) ; ( rc1 ) .. controls([shift=(0,-0.3)]rc1 ) .. ( rc1dec1 ) ; ( rc1dec2 ) at ( [ shift=(+0.7,-0.6)]rc1 ) ; ( rc1 ) .. controls([shift=(0,-0.3)]rc1 ) .. ( rc1dec2 ) ; ( rc2 ) at ( [ shift=(+1.5,0)]b2 ) @xmath228 ; ( rc2dec1 ) at ( [ shift=(-0.7,-0.6)]rc2 ) ; ( rc2 ) .. controls([shift=(0,-0.3)]rc2 ) .. ( rc2dec1 ) ; ( rc2dec2 ) at ( [ shift=(+0.7,-0.6)]rc2 ) ; ( rc2 ) .. controls([shift=(0,-0.3)]rc2 ) .. ( rc2dec2 ) ; ( e1 ) .. controls([shift=(+1,0.1)]e1 ) and ( [ shift=(-1,0.1)]pm1 ) .. ( pm1 ) ; ( e2 ) .. controls([shift=(-1,0.1)]e2 ) and ( [ shift=(+1,0.1)]pm2 ) .. ( pm2 ) ; ( a2 ) .. controls([shift=(-1,0)]a2 ) and ( [ shift=(+4,0.1)]pm1 ) .. ( pm1 ) ; ( a1 ) .. controls([shift=(+1,0)]a1 ) and ( [ shift=(-4,0.1)]pm2 ) .. ( pm2 ) ; ( pm1 ) .. controls([shift=(0,-0.6)]pm1 ) and ( [ shift=(0,+1)]b1 ) .. ( b1 ) ; ( pm1 ) .. controls([shift=(0,-0.6)]pm1 ) and ( [ shift=(0,+1)]a1 ) .. ( a1 ) ; ( pm2 ) .. controls([shift=(0,-0.6)]pm2 ) and ( [ shift=(0,+1)]b2 ) .. ( b2 ) ; ( pm2 ) .. controls([shift=(0,-0.6)]pm2 ) and ( [ shift=(0,+1)]a2 ) .. ( a2 ) ; ( e1 )  ( uc1 ) ; ( e2 )  ( uc2 ) ; ( b1 )  ( rc1 ) ; ( b2 )  ( rc2 ) ; ( uc1 ) .. controls([shift=(0,-0.6)]uc1 ) and ( [ shift=(-0.5,+1)]a1 ) .. ( a1 ) ; ( uc2 ) .. controls([shift=(0,-0.6)]uc2 ) and ( [ shift=(+0.5,+1)]a2 ) .. ( a2 ) ; ( l3 ) at ( [ shift=(0,-3.0)]l2 ) ; ( s1 ) at ( [ shift=(-6,0)]l3 ) @xmath215 ; ( t1 ) at ( [ shift=(-1,0)]l3 ) @xmath229 ; ( t2 ) at ( [ shift=(+1,0)]l3 ) @xmath230 ; ( s2 ) at ( [ shift=(+6,0)]l3 ) @xmath231 ; ( am1 ) at ( [ shift=(+1.0,+1.5)]s1 ) @xmath232 ; ( am1dec ) at ( [ shift=(-0.7,-0.6)]am1 ) ; ( am1 ) .. controls([shift=(0,-0.3)]am1 ) .. ( am1dec ) ; ( am2 ) at ( [ shift=(-1.0,+1.5)]s2 ) @xmath233 ; ( am2dec ) at ( [ shift=(+0.7,-0.6)]am2 ) ; ( am2 ) .. controls([shift=(0,-0.3)]am2 ) .. ( am2dec ) ; ( dx1 ) at ( [ shift=(-2.0,0)]s1 ) @xmath234 ; ( dx1dec ) at ( [ shift=(-0.7,-0.6)]dx1 ) ; ( dx1 ) .. controls([shift=(0,-0.3)]dx1 ) .. ( dx1dec ) ; ( dx2 ) at ( [ shift=(+2.0,0)]s2 ) @xmath235 ; ( dx2dec ) at ( [ shift=(+0.7,-0.6)]dx2 ) ; ( dx2 ) .. controls([shift=(0,-0.3)]dx2 ) .. ( dx2dec ) ; ( dx1 * ) at ( [ shift=(-2.0,0)]t1 ) @xmath236 ; ( dx1*dec ) at ( [ shift=(-0.7,-0.6)]dx1 * ) ; ( dx1 * ) .. controls([shift=(0,-0.3)]dx1 * ) .. ( dx1*dec ) ; ( dx2 * ) at ( [ shift=(+2.0,0)]t2 ) @xmath237 ; ( dx2*dec ) at ( [ shift=(+0.7,-0.6)]dx2 * ) ; ( dx2 * ) .. controls([shift=(0,-0.3)]dx2 * ) .. ( dx2*dec ) ; ( rc1 ) .. controls([shift=(0,-0.6)]rc1 ) .. ( s1 ) ; ( rc1 ) .. controls([shift=(0,-1.7)]rc1 ) and ( [ shift=(0,+3)]t2 ) .. ( t2 ) ; ( rc2 ) .. controls([shift=(0,-0.6)]rc2 ) .. ( s2 ) ; ( rc2 ) .. controls([shift=(0,-1.7)]rc2 ) and ( [ shift=(0,+3)]t1 ) .. ( t1 ) ; ( s2 ) .. controls([shift=(-1.5,0)]s2 ) and ( [ shift=(+7.0,0)]am1 ) .. ( am1 ) ; ( s1 ) .. controls([shift=(+1.5,0)]s1 ) and ( [ shift=(-7.0,0)]am2 ) .. ( am2 ) ; ( s1 )  ( dx1 ) ; ( s2 )  ( dx2 ) ; ( t1 )  ( dx1 * ) ; ( t2 )  ( dx2 * ) ; ( a1 )  ( am1 ) ; ( a2 )  ( am2 ) ; ( uc1 ) .. controls([shift=(0,-2.0)]uc1 ) and ( [ shift=(-0.7,+1)]s1 ) .. ( s1 ) ; ( uc2 ) .. controls([shift=(0,-2.0)]uc2 ) and ( [ shift=(+0.7,+1)]s2 ) .. ( s2 ) ; ( l4 ) at ( [ shift=(0,-3.0)]l3 ) ; ( cx1 ) at ( [ shift=(-0.5,0)]l4 ) @xmath238 ; ( cx2 ) at ( [ shift=(-1.5,0)]l4 ) @xmath239 ; ( cx3 ) at ( [ shift=(+1.5,0)]l4 ) @xmath240 ; ( cx4 ) at ( [ shift=(+0.5,0)]l4 ) @xmath241 ; ( bracestart ) at ( [ shift=(-0.5,0)]cx2 ) ; ( braceend ) at ( [ shift=(+0.5,0)]cx3 ) ; ( bracestart ) ",
    "( braceend ) ; ( cx0 ) at ( [ shift=(0,-0.3)]l4 ) ; ( cx0dec1 ) at ( [ shift=(-0.7,-0.5)]cx0 ) ; ( cx0 ) .. controls([shift=(0,-0.2)]cx0 ) .. ( cx0dec1 ) ; ( cx0dec2 ) at ( [ shift=(+0.7,-0.5)]cx0 ) ; ( cx0 ) .. controls([shift=(0,-0.2)]cx0 ) .. ( cx0dec2 ) ; ( pm1tom ) at ( [ shift=(-2.5,0)]cx2 ) ; ( pm2tom ) at ( [ shift=(+2.5,0)]cx3 ) ; ( am1tom ) at ( [ shift=(-3.0,0)]cx2 ) ; ( am2tom ) at ( [ shift=(+3.0,0)]cx3 ) ; ( rc1tom ) at ( [ shift=(-1.0,0)]s1 ) ; ( rc2tom ) at ( [ shift=(+1.0,0)]s2 ) ; ( s1 ) .. controls([shift=(+0.3,-1)]s1 ) and ( [ shift=(-0.5,+1)]cx1 ) .. ( cx1 ) ; ( s2 ) .. controls([shift=(-0.3,-1)]s2 ) and ( [ shift=(+0.5,+1)]cx1 ) .. ( cx1 ) ; ( s1 ) .. controls([shift= ( 0,-1)]s1 ) and ( [ shift=(-0.5,+1)]cx2 ) .. ( cx2 ) ; ( t2 ) .. controls([shift=(-0.3,-1)]t2 ) and ( [ shift=(+0.5,+1)]cx2 ) .. ( cx2 ) ; ( t1 ) .. controls([shift=(+0.3,-1)]t1 ) and ( [ shift=(-0.5,+1)]cx3 ) ..",
    "( cx3 ) ; ( s2 ) .. controls([shift= ( 0,-1)]s2 ) and ( [ shift=(+0.5,+1)]cx3 ) .. ( cx3 ) ; ( t1 ) .. controls([shift= ( 0,-1)]t1 ) and ( [ shift=(-0.5,+1)]cx4 ) .. ( cx4 ) ; ( t2 ) .. controls([shift= ( 0,-1)]t2 ) and ( [ shift=(+0.5,+1)]cx4 ) .. ( cx4 ) ; ( l5 ) at ( [ shift=(0,-2.0)]l4 ) ; ( m ) at ( [ shift=(-2,0)]l5 ) @xmath242 ; ( mleft ) at ( [ shift=(-1.0,-0.5)]m ) ; ( mright ) at ( [ shift=(+1.0,-0.5)]m ) ; ( x0 ) at ( [ shift=(+2,0)]l5 ) @xmath243 ; ( x0left ) at ( [ shift=(-1.0,0)]x0 ) ; ( x0right ) at ( [ shift=(+1.0,0)]x0 ) ; ( pm1 ) .. controls([shift=(0,-0.6)]pm1 ) and ( [ shift=(0,+0.5)]pm1tom ) .. ( pm1tom ) .. controls([shift=(0,-1.5)]pm1tom ) and ( [ shift=(0,+1.0)]mleft ) .. ( mleft ) ; ( am1 ) .. controls([shift=(0,-0.6)]am1 ) and ( [ shift=(0,+0.5)]am1tom ) .. ( am1tom ) .. controls([shift=(0,-1.0)]am1tom ) and ( [ shift=(-1.0,+1.75)]mleft ) .. ( mleft ) ; ( rc1 ) .. controls([shift=(0,-0.6)]rc1 ) and ( [ shift=(0,+0.5)]rc1tom ) .. ( rc1tom ) .. controls([shift=(0,-3.5)]rc1tom ) and ( [ shift=(-1.5,+2.0)]mleft ) .. ( mleft ) ; ( pm2 ) .. controls([shift=(0,-0.6)]pm2 ) and ( [ shift=(0,+0.5)]pm2tom ) .. ( pm2tom ) .. controls([shift=(0,-2.0)]pm2tom ) and ( [ shift=(+0.5,+2.2)]mright ) .. ( mright ) ; ( am2 ) .. controls([shift=(0,-0.6)]am2 ) and ( [ shift=(0,+0.5)]am2tom ) .. ( am2tom ) .. controls([shift=(0,-2.0)]am2tom ) and ( [ shift=(+1.0,+2.0)]mright ) .. ( mright ) ; ( rc2 ) .. controls([shift=(0,-0.6)]rc2 ) and ( [ shift=(0,+0.5)]rc2tom ) .. ( rc2tom ) .. controls([shift=(0,-6.0)]rc2tom ) and ( [ shift=(+1.5,+2.0)]mright ) .. ( mright ) ; ( cx0 ) .. controls([shift=(0,-1.2)]cx0 ) and ( [ shift=(0,+1.0)]x0 ) .. ( x0 ) ; ( l6 ) at ( [ shift=(0,-1.0)]l5 ) ; ( ruc1 ) at ( [ shift=(-5.1,0)]l6 ) @xmath244 ; ( ruc1dec ) at ( [ shift=(-0.7,-0.6)]ruc1 ) ; ( ruc1 ) .. controls([shift=(0,-0.3)]ruc1 ) .. ( ruc1dec ) ; ( ruc2 ) at ( [ shift=(+5.1,0)]l6 ) @xmath245 ; ( ruc2dec ) at ( [ shift=(+0.7,-0.6)]ruc2 ) ; ( ruc2 ) .. controls([shift=(0,-0.3)]ruc2 ) .. ( ruc2dec ) ; ( rrc ) at ( [ shift=(-2,0)]l6 ) @xmath246 ; ( rrcdec1 ) at ( [ shift=(-0.7,-0.6)]rrc ) ; ( rrc )",
    ".. controls([shift=(0,-0.3)]rrc ) .. ( rrcdec1 ) ; ( rrcdec2 ) at ( [ shift=(+0.7,-0.6)]rrc ) ; ( rrc ) .. controls([shift=(0,-0.3)]rrc ) .. ( rrcdec2 ) ; ( rox ) at ( [ shift=(+2,0)]l6 ) @xmath247 ; ( roxdec1 ) at ( [ shift=(-0.7,-0.6)]rox ) ; ( rox ) .. controls([shift=(0,-0.3)]rox ) .. ( roxdec1 ) ; ( roxdec2 ) at ( [ shift=(+0.7,-0.6)]rox ) ; ( rox )",
    ".. controls([shift=(0,-0.3)]rox ) .. ( roxdec2 ) ; ( rdx1 * ) at ( [ shift=(-4.2,-1.0)]l6 ) @xmath248 ; ( rdx1*dec ) at ( [ shift=(-0.7,-0.6)]rdx1 * ) ; ( rdx1 * ) .. controls([shift=(0,-0.3)]rdx1 * ) .. ( rdx1*dec ) ; ( rdx2 * ) at ( [ shift=(+4.2,-1.0)]l6 ) @xmath249 ; ( rdx2*dec ) at ( [ shift=(+0.7,-0.6)]rdx2 * ) ; ( rdx2 * ) .. controls([shift=(0,-0.3)]rdx2 * ) .. ( rdx2*dec ) ; ( m )  ( rrc ) ; ( x0 )  ( rox ) ; ( a1 ) .. controls([shift=(-1.0,0)]dx1 * ) .. ( ruc1 ) ; ( a2 ) .. controls([shift=(+1.0,0)]dx2 * ) .. ( ruc2 ) ; ( t1 ) .. controls([shift=(-0.3,-1)]t1 ) and ( [ shift=(-3.5,1.0)]cx2 ) .. ( rdx1 * ) ; ( t2 ) .. controls([shift=(+0.3,-1)]t2 ) and ( [ shift=(+3.5,1.0)]cx3 ) .. ( rdx2 * ) ; ( l7 ) at ( [ shift=(0,-3.0)]l6 ) ; ( cx5 ) at ( [ shift=(-8,+1.5)]l7 ) @xmath250 ; ( cx7 ) at ( [ shift=(-7,+1.5)]l7 ) @xmath251 ; ( bracestart ) at ( [ shift=(-0.5,0)]cx5 ) ; ( braceend ) at ( [ shift=(+0.5,0)]cx7 ) ; ( bracestart )  ( braceend ) ; ( cx57 ) at ( [ shift=(-7.5,+1.2)]l7 ) ; ( cx57dec1 ) at ( [ shift=(-0.7,-0.5)]cx57 ) ; ( cx57 ) .. controls([shift=(0,-0.2)]cx57 ) .. ( cx57dec1 ) ; ( cx57dec2 ) at ( [ shift=(+0.7,-0.5)]cx57 ) ; ( cx57 ) .. controls([shift=(0,-0.2)]cx57 ) .. ( cx57dec2 ) ; ( cx6 ) at ( [ shift=(+8,+1.5)]l7 ) @xmath252 ; ( cx8 ) at ( [ shift=(+7,+1.5)]l7 ) @xmath253 ; ( bracestart ) at ( [ shift=(-0.5,0)]cx8 ) ; ( braceend ) at ( [ shift=(+0.5,0)]cx6 ) ; ( bracestart )  ( braceend ) ; ( cx68 ) at ( [ shift=(+7.5,+1.2)]l7 ) ; ( cx68dec1 ) at ( [ shift=(-0.7,-0.5)]cx68 ) ; ( cx68 ) .. controls([shift=(0,-0.2)]cx68 ) .. ( cx68dec1 ) ; ( cx68dec2 ) at ( [ shift=(+0.7,-0.5)]cx68 ) ; ( cx68 ) .. controls([shift=(0,-0.2)]cx68 ) .. ( cx68dec2 ) ; ( x1 ) at ( [ shift=(-5,0)]l7 ) @xmath254 ; ( x1left ) at ( [ shift=(-0.3,-0.5)]x1 ) ; ( x1forrc ) at ( [ shift=(-0.3,+0.2)]x1 ) ; ( x2 ) at ( [ shift=(+5,0)]l7 ) @xmath255 ; ( x2right ) at ( [ shift=(+0.3,-0.5)]x2 ) ; ( x2forrc ) at ( [ shift=(+0.3,+0.2)]x2 ) ; ( rrc ) .. controls([shift=(0,-2.0)]rrc ) and ( [ shift=(+2.0,+1.0)]x1 ) .. ( x1 ) ; ( rrc ) .. controls([shift=(0,-1.5)]rrc ) and ( [ shift=(-3.0,+1.0)]x2 ) .. ( x2 ) ; ( rox ) .. controls([shift=(0,-1.5)]rox ) and ( [ shift=(+3.0,+1.0)]x1 ) .. ( x1 ) ; ( rox ) .. controls([shift=(0,-2.0)]rox ) and ( [ shift=(-2.0,+1.0)]x2 ) .. ( x2 ) ; ( uc1 ) .. controls([shift=(0,-1.0)]uc1 ) and ( [ shift=(-2.7,0.0)]dx1 ) .. ( x1left ) ; ( uc2 ) .. controls([shift=(0,-1.0)]uc2 ) and ( [ shift=(+2.7,0.0)]dx2 ) .. ( x2right ) ; ( rc1 ) .. controls([shift=(0,-1.0)]rc1 ) and ( [ shift=(-2.0,-0.5)]rc1tom ) .. ( x1forrc ) ; ( rc1 ) .. controls([shift=(0,-1.0)]rc1 ) and ( [ shift=(-4.0,-6.0)]rc1tom ) .. ( x2 ) ; ( rc2 ) .. controls([shift=(0,-1.0)]rc2 ) and ( [ shift=(+2.0,-0.5)]rc2tom ) .. ( x2forrc ) ; ( rc2 ) .. controls([shift=(0,-1.0)]rc2 ) and ( [ shift=(+4.0,-6.0)]rc2tom ) .. ( x1 ) ; ( am1 ) .. controls([shift=(0,-2.0)]am1 ) and ( [ shift=(-3.0,+1.5)]x1 ) .. ( x2 ) ; ( am2 ) .. controls([shift=(0,-2.0)]am2 ) and ( [ shift=(+3.0,+1.5)]x2 ) .. ( x1 ) ; ( cx0 ) .. controls([shift=(0,-4.0)]cx0 ) and ( [ shift=(+4.0,0)]x1 ) .. ( x1 ) ; ( cx0 ) .. controls([shift=(0,-4.0)]cx0 ) and ( [ shift=(-4.0,0)]x2 ) .. ( x2 ) ; ( dx1 ) .. controls([shift=(0,-3.0)]dx1 ) and ( [ shift=(-1.0,0.5)]x1 ) .. ( x1 ) ; ( dx2 ) .. controls([shift=(0,-3.0)]dx2 ) and ( [ shift=(+1.0,0.5)]x2 ) .. ( x2 ) ; ( dx1 * ) .. controls([shift=(0,-2.0)]dx1 * ) and ( [ shift=(-3.5,0)]am1tom ) .. ( x1 ) ; ( dx2 * ) .. controls([shift=(0,-2.0)]dx2 * ) and ( [ shift=(+3.5,0)]am2tom ) .. ( x2 ) ; ( ruc1 ) .. controls([shift=(0,-2.0)]ruc1 ) .. ( x1 ) ; ( ruc2 ) .. controls([shift=(0,-2.0)]ruc2 ) .. ( x2 ) ; ( s1 ) .. controls([shift=(-0.3,-1)]s1 ) and ( [ shift=(0.0,+3.0)]cx5 ) .. ( cx5 ) ; ( x2 ) .. controls([shift=(-6,-3.5)]x1 ) and ( [ shift=(-1.0,0.0)]cx5 ) .. ( cx5 ) ; ( t1 ) .. controls([shift=(-0.7,-1)]t1 ) and ( [ shift=(0.0,+3.5)]cx7 ) .. ( cx7 ) ; ( cx5left ) at ( [ shift=(-0.7,0)]cx5 ) ; ( x2 ) .. controls([shift=(-2.5,-1.5)]x1 ) and ( [ shift=(0,-3.0)]cx5left ) .. ( cx5left ) .. controls([shift=(0,+1.5)]cx5left ) and ( [ shift=(-1.0,+1.5)]cx7 ) .. ( cx7 ) ; ( s2 ) .. controls([shift=(+0.3,-1)]s2 ) and ( [ shift=(0.0,+3.0)]cx6 ) .. ( cx6 ) ; ( x1 ) .. controls([shift=(+6,-3.5)]x2 ) and ( [ shift=(+1.0,0.0)]cx6 ) .. ( cx6 ) ; ( t2 ) .. controls([shift=(+0.7,-1)]t2 ) and ( [ shift=(0.0,+3.5)]cx8 ) .. ( cx8 ) ; ( cx6right ) at ( [ shift=(+0.7,0)]cx6 ) ; ( x1 ) .. controls([shift=(+2.5,-1.5)]x2 ) and ( [ shift=(0,-3.0)]cx6right ) .. ( cx6right ) .. controls([shift=(0,+1.5)]cx6right ) and ( [ shift=(+1.0,+1.5)]cx8 ) .. ( cx8 ) ; ( cx57 ) .. controls([shift=(0,-0.2)]cx57 ) and ( [ shift=(-2.5,0.5)]x1 ) .. ( x1 ) ; ( cx68 ) .. controls([shift=(0,-0.2)]cx68 ) and ( [ shift=(+2.5,0.5)]x2 ) .. ( x2 ) ; ( rdx1 * ) .. controls([shift=(0,-1.0)]rdx1 * ) .. ( x1 ) ; ( rdx2 * ) .. controls([shift=(0,-1.0)]rdx2 * ) .. ( x2 ) ; ( l8 ) at ( [ shift=(0,-2.0)]l7 ) ; ( rcx ) at ( [ shift=(0,0)]l8 ) @xmath256 ; ( rcxdec1 ) at ( [ shift=(-0.7,-0.6)]rcx ) ; ( rcx )",
    ".. controls([shift=(0,-0.3)]rcx ) .. ( rcxdec1 ) ; ( rcxdec2 ) at ( [ shift=(+0.7,-0.6)]rcx ) ; ( rcx ) .. controls([shift=(0,-0.3)]rcx ) .. ( rcxdec2 ) ; ( rdx1 * * ) at ( [ shift=(-5,0)]l8 ) @xmath257}{}$ ] ; ( rdx1**dec ) at ( [ shift=(-0.7,-0.6)]rdx1 * * ) ; ( rdx1 * * ) .. controls([shift=(0,-0.3)]rdx1 * * ) .. ( rdx1**dec ) ; ( rdx2 * * ) at ( [ shift=(+5,0)]l8 ) @xmath258}{}$ ] ; ( rdx2**dec ) at ( [ shift=(+0.7,-0.6)]rdx2 * * ) ; ( rdx2 * * ) .. controls([shift=(0,-0.3)]rdx2 * * ) .. ( rdx2**dec ) ; ( d1 ) at ( [ shift=(-8.0,-1.0)]l8 ) @xmath209 ; ( d1dec ) at ( [ shift=(+0.8,+1.0)]d1 ) ; ( d1dec ) .. controls([shift=(0,+0.5)]d1 ) .. ( d1 ) ; ( d2 ) at ( [ shift=(+8.0,-1.0)]l8 ) @xmath209 ; ( d2dec ) at ( [ shift=(-0.8,+1.0)]d2 ) ; ( d2dec ) .. controls([shift=(0,+0.5)]d2 ) .. ( d2 ) ; ( x1 ) .. controls([shift=(+0.5,-0.5)]x1 ) .. ( rcx ) ; ( x2 ) .. controls([shift=(-0.5,-0.5)]x2 ) .. ( rcx ) ; ( x1 )  ( rdx1 * * ) ; ( x2 )  ( rdx2 * * ) ;      each queue in the queueing network , see fig .",
    "[ fig : srp : qnetwork ] , is carefully designed to store packets in a specific format such that the queue itself can represent a specific scenario to be beneficial . in this subsection ,",
    "we highlight the properties of the queues , which later will be used to prove the correctness of our achievability scheme of proposition  [ prop : srp : sim - inner ] .    to that end",
    ", we first describe the properties of @xmath206 , @xmath209 , @xmath214 , and @xmath215 since their purpose is clear in the sense that these queues collect pure session-@xmath15 packets ( indicated by the superscript ) , but heard only by the nodes ( in the subscript @xmath259 ) or correctly decoded by the desired destination @xmath9 ( by the subscript @xmath260 .",
    "after that , we describe the properties of @xmath261 , and then explain @xmath224 , @xmath229 , and @xmath218 focusing on the queues of session-@xmath15 .",
    "for example , @xmath224 implies the queue that contains the packet mixtures ( the superscript @xmath262 ) , each of session-@xmath15 and session-@xmath12 , where such mixtures are known by @xmath10 and those session-@xmath12 packets used for mixtures related to a session-@xmath15 packet that is mixed with a session-@xmath12 packet , where such mixture is known by @xmath10 but the session-@xmath12 packet is known by @xmath2 as well .",
    "the properties of the queues related to the session-@xmath12 packets , i.e. , @xmath207 , @xmath263 , @xmath225 , @xmath231 , @xmath226 , @xmath230 , and @xmath264 , will be symmetrically explained by simultaneously swapping ( a ) session-@xmath15 and session-@xmath12 in the superscript ; ( b ) @xmath8 and @xmath14 ; ( c ) @xmath265 and @xmath266 ; and ( d ) @xmath9 and @xmath10 , if applicable .",
    "the property of @xmath243 will be followed at last .    to help aid the explanations , we also define for each node in @xmath3 , the _ reception list _ @xmath267 , @xmath268 , and @xmath269 , respectively , that records how the received packet is constituted .",
    "the reception list is a binary matrix of its column size fixed to @xmath270 but its row size being the number of received packets and thus variable ( increasing ) over the course of total time slots .",
    "for example , suppose that @xmath9 has received a pure session-@xmath15 packet @xmath271 , a self - mixture @xmath272 $ ] , and a cross - mixture @xmath273 $ ]",
    ". then @xmath267 will be    ( c1 ) at ( 0,0 ) ; at ( [ shift=(0,0)]c1 ) @xmath274 ; ( bracestart ) at ( [ shift=(-1.5,0)]c1 ) ; ( braceend ) at ( [ shift=(+1.5,0)]c1 ) ; ( bracestart )  ( braceend ) ; ( c2 ) at ( [ shift=(3,0)]c1 ) ; at ( [ shift=(0,0)]c2 ) @xmath275 ; ( bracestart ) at ( [ shift=(-1.5,0)]c2 ) ; ( braceend ) at ( [ shift=(+1.5,0)]c2 ) ; ( bracestart )  ( braceend ) ; at ( [ shift=(0,-0.5)]c1 ) @xmath15 @xmath276 @xmath277 @xmath277 @xmath277 @xmath277 ; at ( [ shift=(0,-0.9)]c1 ) @xmath15 @xmath15 @xmath278 @xmath279 @xmath277 @xmath277 ; at ( [ shift=(0,-1.3)]c1 ) @xmath276 @xmath276 @xmath15 @xmath276 @xmath277 @xmath277 @xmath277 ; at ( [ shift=(0,-0.5)]c2 ) @xmath276 @xmath276 @xmath277 @xmath277 @xmath277 @xmath277 ; at ( [ shift=(0,-0.9)]c2 ) @xmath276 @xmath276 @xmath277 @xmath277 @xmath277 @xmath277 ; at ( [ shift=(0,-1.3)]c2 ) @xmath15 @xmath276 @xmath277 @xmath277 @xmath277 @xmath277 ;    such that the first row vector represents the pure @xmath271 received , the second row vector represents the mixture @xmath272 $ ] received , and the third row vector represents the mixture @xmath273 $ ] received , all in a binary format .",
    "namely , whenever a node receives a packet , whether such packet is pure or not , a new @xmath270-dimensional row vector is inserted into the reception list by marking the corresponding entries of @xmath204 or @xmath205 as flagged (  1 \" ) or not flagged (  0 \" ) accordingly .",
    "from the previous example , @xmath272 $ ] in the reception list @xmath267 means that the list contains a @xmath270-dimensional row vector of exactly @xmath280 .",
    "we then say that a pure packet is _ not flagged _ in the reception list , if the column of the corresponding entry contains all zeros . from the previous example , the pure session-@xmath12 packet @xmath281 is not flagged in @xmath267 , meaning that @xmath9 has neither received @xmath281 nor any mixture involving this @xmath281 .",
    "note that  not flagged \" is a stronger definition than  unknown \" . from the previous example",
    ", the pure session-@xmath15 packet @xmath282 is unknown to @xmath9 but still flagged in @xmath267 as @xmath9 has received the mixture @xmath273 $ ] involving this @xmath282 .",
    "another example is the pure @xmath283 that is flagged in @xmath267 but @xmath9 knows this @xmath283 as it can use the received @xmath271 and the mixture @xmath272 $ ] to extract @xmath283 .",
    "we sometimes abuse the reception list notation to denote the collective reception list by @xmath284 for some non - empty subset @xmath72 .",
    "for example , @xmath285 implies the vertical concatenation of all @xmath267 , @xmath268 , and @xmath269 .",
    "we now describe the properties of the queues .",
    "every packet in this queue is _ of a pure session-@xmath15 _ and _ unknown _ to any of @xmath3 , even _ not flagged _ in @xmath285 .",
    "initially , this queue contains all the session-@xmath15 packets @xmath117 , and will be empty in the end .",
    "every packet in this queue is _ of a pure session-@xmath15 _ and _ known _ to @xmath9 .",
    "initially , this queue is empty but will contain all the session-@xmath15 packets @xmath117 in the end .",
    "every packet in this queue is _ of a pure session-@xmath15 _ and _ known _ by @xmath2 but _ unknown _ to any of @xmath1 , even _ not flagged _ in @xmath286 .",
    "every packet in this queue is _ of a pure session-@xmath15 _ and _ known _ by @xmath10 but _ unknown _ to any of @xmath287 , even _ not flagged _ in @xmath288 .",
    "every packet in this queue is _ of a linear sum @xmath289 $ ] _ from a session-@xmath15 packet @xmath204 and a session-@xmath12 packet @xmath205 such that at least one of the following conditions hold :    * @xmath289 $ ] is in @xmath267 ; @xmath204 is _ unknown _ to @xmath9 ; and @xmath205 is _ known _ by @xmath2 but _ unknown _ to @xmath10 . * @xmath289 $ ] is in @xmath268 ; @xmath204 is _ known _ by @xmath2 but _ unknown _ to @xmath9 ; and @xmath205 is _ unknown _ to @xmath10 .",
    "the detailed clarifications are as follows . for a nc designer ,",
    "one important consideration is to generate as many  all - happy \" scenarios as possible in an efficient manner so that single transmission benefits both destination simultaneously .",
    "one famous example is the _ classic xor _ operation that a sender transmits a linear sum @xmath289 $ ] when a session-@xmath15 packet @xmath204 is not yet delivered to @xmath9 but overheard by @xmath10 and a session-@xmath12 packet @xmath205 is not yet delivered to @xmath10 but overheard by @xmath9 .",
    "namely , the source @xmath0 can perform such classic butterfly - style operation of sending the linear mixture @xmath289 $ ] whenever such pair of @xmath204 and @xmath205 is available .",
    "similarly , @xmath261 represents such an  all - happy \" scenario that the relay @xmath2 can benefit both destinations simultaneously by sending either @xmath204 or @xmath205 . for example , suppose that the source @xmath0 has transmitted a packet mixture @xmath289 $ ] and it is received by @xmath10 only . and assume that @xmath2 already knows the individual @xmath204 and @xmath205 but @xmath204 is unknown to @xmath9 , see fig .",
    "[ fig : srp : queue_scenario](a ) .",
    "this example scenario falls into the second condition of @xmath261 above .",
    "then sending @xmath204 from the relay @xmath2 simultaneously enables @xmath9 to receive the desired @xmath204 and @xmath10 to decode the desired @xmath205 by subtracting the received @xmath204 from the known @xmath289 $ ] .",
    "@xmath261 collects such all - happy mixtures @xmath289 $ ] that has been received by either @xmath9 or @xmath10 or both . in the same scenario ,",
    "however , notice that @xmath2 can not benefit both destinations simultaneously , if @xmath2 sends @xmath205 , instead of @xmath204 .",
    "as a result , we use the notation @xmath289\\!:\\!w$ ] to denote the specific packet @xmath290 ( known by @xmath2 ) that @xmath2 can send to benefit both destinations . in this second condition scenario of fig .",
    "[ fig : srp : queue_scenario](a ) , @xmath261 is storing @xmath289\\!:\\!x_i$ ] .",
    "every packet in this queue is _ of a linear sum @xmath289 $ ] _ from a session-@xmath15 packet @xmath204 and a session-@xmath12 packet @xmath205 such that they jointly satisfy the following conditions simultaneously .",
    "* @xmath289 $ ] is in @xmath268 .",
    "* @xmath204 is _ unknown _ to any of @xmath3 , even _ not flagged _ in @xmath288 .",
    "* @xmath205 is _ known _ by @xmath2 but _ unknown _ to any of @xmath1 , even _ not flagged _ in @xmath267 .",
    "the scenario is the same as in fig .",
    "[ fig : srp : queue_scenario](a ) when @xmath2 not having @xmath204 . in this scenario",
    ", we have observed that @xmath2 can not benefit both destinations by sending the known @xmath205 .",
    "@xmath224 collects such unpromising @xmath289 $ ] mixtures .",
    "\\(r ) at ( 0,0 ) @xmath2 ; ( [ shift=(-60:0.3)]r ) arc ( -60:60:0.3 ) ; ( [ shift=(-60:0.4)]r ) arc ( -60:60:0.4 ) ; at ( [ shift=(0,0.45)]r ) @xmath204 , @xmath205 ; ( d1 ) at ( [ shift=(25:1.25)]r)@xmath9 ; ( d2 ) at ( [ shift=(-25:1.25)]r)@xmath10 ; at ( [ shift=(0.9,0)]d2 ) @xmath291 $ ] ; at ( [ shift=(1.5,0)]r ) ( a ) example scenario for @xmath261 ; ( r ) at ( 4,0 ) @xmath2 ; ( [ shift=(-60:0.3)]r ) arc ( -60:60:0.3 ) ; ( [ shift=(-60:0.4)]r ) arc ( -60:60:0.4 ) ; at ( [ shift=(0,0.45)]r ) @xmath204 ; ( d1 ) at ( [ shift=(25:1.25)]r)@xmath9 ; at ( [ shift=(0.9,0)]d1 ) @xmath292 $ ] ; ( d2 ) at ( [ shift=(-25:1.25)]r)@xmath10 ; at ( [ shift=(0.5,0)]d2 ) @xmath293 ; at ( [ shift=(1.9,0)]r ) ( b ) scenario for @xmath294 ; at ( [ shift=(1.9,0)]r ) @xmath295 it must be @xmath296 ;     +    \\(r ) at ( 0,0 ) @xmath2 ; ( [ shift=(-60:0.3)]r ) arc ( -60:60:0.3 ) ; ( [ shift=(-60:0.4)]r ) arc ( -60:60:0.4 ) ; at ( [ shift=(0,0.45)]r ) @xmath204 ; ( d1 ) at ( [ shift=(25:1.25)]r)@xmath9 ; ( d2 ) at ( [ shift=(-25:1.25)]r)@xmath10 ; at ( [ shift=(0.5,0)]d2 ) @xmath204 ; at ( [ shift=(1.5,0)]r ) ( c ) case  1 : @xmath297 ; ( r ) at ( 4,0 ) @xmath2 ; ( [ shift=(-60:0.3)]r ) arc ( -60:60:0.3 ) ; ( [ shift=(-60:0.4)]r ) arc ( -60:60:0.4 ) ; at ( [ shift=(0,0.45)]r ) @xmath293 ; ( d1 ) at ( [ shift=(25:1.25)]r)@xmath9 ; at ( [ shift=(0.9,0)]d1 ) @xmath292 $ ] ; ( d2 ) at ( [ shift=(-25:1.25)]r)@xmath10 ; at ( [ shift=(0.5,0)]d2 ) @xmath293 ; at ( [ shift=(1.9,0)]r ) ( d ) case  2 : @xmath298 ; at ( [ shift=(1.9,0)]r ) @xmath295 it must be @xmath296 ;     +    \\(r ) at ( 0,0 ) @xmath2 ; ( [ shift=(-60:0.3)]r ) arc ( -60:60:0.3 ) ; ( [ shift=(-60:0.4)]r ) arc ( -60:60:0.4 ) ; at ( [ shift=(0,0.45)]r ) @xmath299 $ ] ; ( d1 ) at ( [ shift=(25:1.25)]r)@xmath9 ; at ( [ shift=(0.5,0)]d1 ) @xmath300 ; ( d2 ) at ( [ shift=(-25:1.25)]r)@xmath10 ; at ( [ shift=(0.9,0)]d2 ) @xmath299 $ ] ; at ( [ shift=(1.5,0)]r ) ( e ) case  3 : @xmath299\\!\\in\\!\\srpqx{1}{2}$ ] ; ( r ) at ( 4,0 ) @xmath2 ; ( [ shift=(-60:0.3)]r ) arc ( -60:60:0.3 ) ; ( [ shift=(-60:0.4)]r ) arc ( -60:60:0.4 ) ; at ( [ shift=(0,0.45)]r ) @xmath299 $ ] ; ( d1 ) at ( [ shift=(25:1.25)]r)@xmath9 ; at ( [ shift=(0.5,0)]d1 ) @xmath300 ; ( d2 ) at ( [ shift=(-25:1.25)]r)@xmath10 ; at ( [ shift=(0.5,0)]d2 ) @xmath301 ; at ( [ shift=(1.9,0)]r ) ( f ) scenario for ; at ( [ shift=(1.9,0)]r ) @xmath295 @xmath299\\!\\in\\!\\srpqstar$ ] ;    every packet in this queue is _ of a pure session-@xmath12 _",
    "packet @xmath293 such that there exists a pure session-@xmath15 packet @xmath204 that @xmath293 is information equivalent to , and they jointly satisfy the following conditions simultaneously .",
    "* @xmath302 $ ] is in @xmath267 .",
    "* @xmath204 is _ known _ by @xmath2 but _ unknown _ to any of @xmath1 .",
    "* @xmath293 is _ known _ by @xmath10 ( i.e. already in @xmath263 ) but _ unknown _ to any of @xmath287 , even not flagged in @xmath269 .",
    "the concrete explanations are as follows .",
    "the main purpose of this queue is basically the same as @xmath215 , i.e. , to store session-@xmath15 packet overheard by @xmath10 , so as to be used by the source @xmath0 for the classic xor operation with the session-@xmath12 counterparts ( e.g. , any packet in @xmath231 ) .",
    "notice that any @xmath303 is unknown to @xmath2 and thus @xmath2 can not generate the corresponding linear mixture with the counterpart .",
    "however , because @xmath204 is unknown to the relay , @xmath2 can not even naively deliver @xmath204 to the desired destination @xmath9 . on the other hand",
    ", the queue @xmath229 here not only allows @xmath0 to perform the classic xor operation but also admits naive delivery from @xmath2 . to that end , consider the scenario in fig .",
    "[ fig : srp : queue_scenario](b ) . here",
    ", @xmath9 has received a linear sum @xmath302 $ ] .",
    "whenever @xmath9 receives @xmath293 ( session-@xmath12 packet ) , @xmath9 can use @xmath293 and the known @xmath302 $ ] to decode the desired @xmath204 .",
    "this @xmath293 is also known by @xmath10 ( i.e. , already in @xmath263 ) , meaning that @xmath293 is no more different than a session-@xmath15 packet overheard by @xmath10 but not yet delivered to @xmath9 .",
    "namely , such @xmath293 can be treated as _ information equivalent to @xmath204_. that is , using this session-@xmath12 packet @xmath293 for the sake of session-@xmath15 does not incur any information duplicity because @xmath293 is already received by the desired destination @xmath10 .",
    "does not require @xmath293 any more , and thus @xmath0 or @xmath2 can freely use this @xmath293 in the network to represent not - yet - decoded @xmath204 instead .",
    "] for shorthand , we denote such @xmath293 as @xmath304 . as a result , the source @xmath0 can use this @xmath293 as for session-@xmath15 when performing the classic xor operation with a session-@xmath12 counterpart .",
    "moreover , @xmath2 also knows the pure @xmath204 and thus relay can perform naive delivery for @xmath9 as well .",
    "every packet in this queue is _ of either a pure or a mixed _",
    "packet @xmath305 satisfying the following conditions simultaneously .",
    "* @xmath305 is _ known _ by both @xmath2 and @xmath10 but _ unknown _ to @xmath9 .",
    "* @xmath9 can extract a desired session-@xmath15 packet when @xmath305 is further received .",
    "specifically , there are three possible cases based on how the packet @xmath306 is constituted :    * @xmath305 is a pure session-@xmath15 packet @xmath204 .",
    "that is , @xmath204 is known by both @xmath2 and @xmath10 but unknown to @xmath9 as in fig .",
    "[ fig : srp : queue_scenario](c ) . obviously , @xmath9 acquires this new @xmath204 when it is further delivered to @xmath9 .",
    "* @xmath305 is a pure session-@xmath12 packet @xmath296 .",
    "that is , @xmath293 is already received by @xmath10 and known by @xmath2 as well but unknown to @xmath9 . for such @xmath293 , as similar to the discussions of @xmath229 , there exists a session-@xmath15 packet @xmath204 still unknown to @xmath9 where @xmath307 , and their mixture @xmath302 $ ] is in @xmath267 , see fig .",
    "[ fig : srp : queue_scenario](d ) .",
    "one can easily see that when @xmath9 further receives this @xmath293 , @xmath9 can use the received @xmath293 and the known @xmath302 $ ] to decode the desired @xmath204 .",
    "* @xmath305 is a mixed packet of the form @xmath308 $ ] where @xmath301 and @xmath300 are pure but generic that can be either a session-@xmath15 or a session-@xmath12 packet .",
    "that is , the linear sum @xmath308 $ ] is known by both @xmath2 and @xmath10 but unknown to @xmath9 . in this case , @xmath301 is still unknown to @xmath9 but @xmath300 is already received by @xmath9 so that whenever @xmath308 $ ] is delivered to @xmath9 , @xmath301 can further be decoded .",
    "see fig .",
    "[ fig : srp : queue_scenario](e ) for details",
    ". specifically , there are two possible subcases depending on whether @xmath301 is of a pure session-@xmath15 or of a pure session-@xmath12 : * * @xmath301 is a session-@xmath15 packet @xmath204 . as discussed above , @xmath204 is unknown to @xmath9 and it is obvious that @xmath9 can decode the desired @xmath204 whenever @xmath308 $ ] is delivered to @xmath9 . * * @xmath301 is a session-@xmath12 packet @xmath296 . in this subcase",
    ", there exists a session-@xmath15 packet @xmath204 ( other than @xmath300 in the above case  3 discussions ) still unknown to @xmath9 where @xmath307 .",
    "moreover , @xmath302 $ ] is already in @xmath267 . as a result",
    ", @xmath9 can decode the desired @xmath204 whenever @xmath308 $ ] is delivered to @xmath9 .",
    "the concrete explanations are as follows .",
    "the main purpose of this queue is basically the same as @xmath229 but the queue @xmath218 here allows not only the source @xmath0 but also the relay @xmath2 to perform the classic xor operation . as elaborated above , we have three possible cases depending on the form of the packet @xmath306 . specifically , either a pure session-@xmath15 packet @xmath309 ( case  1 ) or a pure session-@xmath12 packet @xmath296 ( case  2 ) or a mixture @xmath308 $ ] ( case  3 ) will be used when either @xmath0 or @xmath2 performs the classic xor operation with a session-@xmath12 counterpart .",
    "for example , suppose that we have a packet @xmath310 ( case  2 ) as a session-@xmath12 counterpart .",
    "symmetrically following the case  2 scenario of @xmath218 in fig .  [",
    "fig : srp : queue_scenario](d ) , we know that @xmath311 has been received by both @xmath2 and @xmath9 . there also exists a session-@xmath12 packet @xmath14 still unknown to @xmath10 where @xmath312 , of which their mixture @xmath18 $ ] is already in @xmath268 . for this session-@xmath12 counterpart @xmath8 ,",
    "consider any packet @xmath305 in @xmath218 .",
    "obviously , the relay @xmath2 knows both @xmath305 and @xmath8 by assumption . as a result",
    ", either @xmath0 or @xmath2 can send their linear sum @xmath313 $ ] as per the classic pairwise xor operation .",
    "since @xmath9 already knows @xmath8 by assumption , such mixture @xmath313 $ ] , when received by @xmath9 , can be used to decode @xmath305 and further decode a desired session-@xmath15 packet as discussed above . moreover , if @xmath10 receives @xmath313 $ ] , then @xmath10 can use the known @xmath305 to extract @xmath8 and further decode the desired @xmath14 since @xmath18 $ ] is already in @xmath268 by assumption .",
    "every packet in this queue is _ of a linear sum _ @xmath308 $ ] that satisfies the following conditions simultaneously .",
    "* @xmath308 $ ] is in @xmath269 .",
    "* @xmath301 is _ known _ by @xmath10 but _ unknown _ to any of @xmath287 .",
    "* @xmath300 is _ known _ by @xmath9 but _ unknown _ to any of @xmath314 .    where @xmath301 and @xmath300 are pure but generic that can be either a session-@xmath15 or a session-@xmath12 packet .",
    "specifically , there are four possible cases based on the types of @xmath301 and @xmath300 packets :    * @xmath301 is a pure session-@xmath15 packet @xmath204 and @xmath300 is a pure session-@xmath12 packet @xmath205 . *",
    "@xmath301 is a pure session-@xmath15 packet @xmath204 and @xmath300 is a pure session-@xmath15 packet @xmath315 . for the latter @xmath316 packet , as similar to the discussions of @xmath229 , there also exists a pure session-@xmath12 packet @xmath205 still unknown to @xmath10 where @xmath317 and their mixture @xmath318 $ ] is already in @xmath268 . as a result ,",
    "later when @xmath10 decodes this @xmath316 , @xmath10 can use @xmath316 and the known @xmath318 $ ] to decode the desired @xmath205 .",
    "* @xmath301 is a pure session-@xmath12 packet @xmath296 and @xmath300 is a pure session-@xmath12 packet @xmath205 . for the former @xmath293 packet",
    ", there also exists a pure session-@xmath15 packet @xmath204 still unknown to @xmath9 where @xmath307 and @xmath302 $ ] is already in @xmath267 . as a result ,",
    "later when @xmath9 decodes this @xmath293 , @xmath9 can use @xmath293 and the known @xmath302 $ ] to decode the desired @xmath204 .",
    "* @xmath301 is a pure session-@xmath12 packet @xmath296 and @xmath300 is a pure session-@xmath15 packet @xmath315 . for",
    "the former @xmath293 and the latter @xmath316 packets , the discussions follow the case  3 and case  2 above , respectively .",
    "the concrete explanations are as follows .",
    "this queue represents the  all - happy \" scenario as similar to the butterfly - style operation by the relay @xmath2 , i.e. , sending a linear mixture @xmath308 $ ] using @xmath301 heard by @xmath10 and @xmath300 heard by @xmath9 .",
    "originally , @xmath2 must have known both individuals packets @xmath301 and @xmath300 to generate their linear sum . however , the sender in fact does not need to know both individuals to perform this classic xor operation .",
    "the sender can still do the same operation even though it knows the linear sum @xmath308 $ ] only .",
    "this possibility only applies to the relay @xmath2 as all the messages including both individual packets are originated from the source @xmath0 . as a result ,",
    "this queue represents such scenario that the relay @xmath2 only knows the linear sum instead of individuals , as in fig .",
    "[ fig : srp : queue_scenario](f ) .",
    "more precisely , cases  1 to  4 happen when the source @xmath0 performed one of four classic xor operations @xmath238 to @xmath241 , respectively , and the corresponding linear sum is received only by @xmath2 , see appendix  [ app : srp : queue_invariance ] for details .    based on the properties of queues",
    ", we now describe the correctness of proposition  [ prop : srp : sim - inner ] , our lnc inner bound . to that end",
    ", we first investigate all the lnc operations involved in proposition  [ prop : srp : sim - inner ] and prove the  queue invariance \" , i.e. , the queue properties explained above _ remains invariant regardless of an lnc operation chosen_. such long and tedious investigations are relegated to appendix  [ app : srp : queue_invariance ] . then , the decodability condition ( [ prop : srp : sim - inner : d ] ) , jointly with the queue invariance , imply that @xmath209 and @xmath263 will contain at least @xmath274 and @xmath275 number of pure session-@xmath15 and pure session-@xmath12 packets , respectively , in the end .",
    "this further means that , given a rate vector @xmath5 , any @xmath32- , @xmath0- , and @xmath2-variables that satisfy the inequalities ( [ prop : srp : sim - inner : e ] ) to ( [ prop : srp : sim - inner : d ] ) in proposition  [ prop : srp : sim - inner ] will be achievable .",
    "the correctness proof of proposition  [ prop : srp : sim - inner ] is thus complete .    for readability , we also describe for each queue , the associated lnc operations that moves packet into and takes packets out of , see table  [ tab : srp : queue_in - out ] .",
    "the lnc inner bound in proposition  [ prop : srp : sim - inner ] has focused on the strong - relaying scenario and has considered mostly on cross - packets - mixing operations ( i.e. , mixing packets from different sessions when benefiting both destinations simultaneously ) .",
    "we now describe the general lnc inner bound that works in arbitrary @xmath0-pec and @xmath2-pec distributions , and also introduces self - packets - mixing operations ( i.e. , mixing packets from the same session for further benefits ) .",
    "[ prop : srp : sim - innerv2 ] a rate vector @xmath5 is lnc - achievable if there exist @xmath12 non - negative variables @xmath176 and @xmath177 , @xmath319 non - negative @xmath0-variables : @xmath320    and @xmath321 non - negative @xmath322-variables : for all @xmath323 , @xmath324 } { } \\;:\\ ; \\text{for all}\\;k\\in\\{1,2\\ } \\big\\ } , \\\\ & \\big\\ { \\wnumrc{h},\\ ; \\wnumox{h}{},\\ ; \\wnumcx{h } { } \\big\\},\\end{aligned}\\ ] ]    such that jointly they satisfy the following five groups of linear conditions :    @xmath143 group  1 , termed the _ time - sharing condition _ ,",
    "has @xmath182 inequalities : @xmath325}{}\\right ) \\nn \\\\ & \\qquad + \\wnumrc{s } + \\wnumox{s } { } + \\wnumcx{s } { } , \\label{prop : srp : sim - innerv2:ts2 } \\\\ t_r & \\geq \\!\\sum_{k\\in\\{1,2\\ } } \\!\\!\\ !",
    "\\left ( \\wnumuc{r}{k } \\!+\\ ! \\wnumdx{r}{(\\!k\\ ! ) } { } \\!+\\ !",
    "\\wnumdx{r}{[k]}{}\\right ) + \\wnumrc{r } + \\wnumox{r } { } + \\wnumcx{r}{}. \\label{prop : srp : sim - innerv2:ts3}\\end{aligned}\\ ] ]    @xmath143 group  2 , termed the _ packets - originating condition _ ,",
    "has @xmath12 inequalities : consider any @xmath184 satisfying @xmath185 . for each @xmath186 pair ( out of the two choices @xmath187 and @xmath188 ) , @xmath326",
    "where ( [ prop : srp : sim - innerv2:e ] ) is the same to ( [ prop : srp : sim - inner : e ] ) in proposition  [ prop : srp : sim - inner ] .",
    "@xmath143 group  3 , termed the _ packets - mixing condition _ , has @xmath11 inequalities : for each @xmath186 pair , @xmath327 and the following one inequality : @xmath328 where ( [ prop : srp : sim - innerv2:b ] ) is the same to ( [ prop : srp : sim - inner : b ] ) in proposition  [ prop : srp : sim - inner ] .    @xmath143 group  4 , termed the _ classic xor condition by source only _ , has @xmath11 inequalities : @xmath329 @xmath143 group  5 , termed the _ xor condition _ , has @xmath182 inequalities :    @xmath330    and for each @xmath186 pair , @xmath331 } { } \\right)\\cdot\\psrpsimt{h}{d_i}. \\label{prop : srp : sim - innerv2:x}\\end{aligned}\\ ] ]    @xmath143 group  6 , termed the _ decodability condition _ , has @xmath12 inequalities : for each @xmath186 pair , @xmath332}{}\\right)\\cdot\\psrpsimt{h}{d_i } \\geq \\rb{i } , \\label{prop : srp : sim - innerv2:d}\\end{aligned}\\ ] ] the main difference to proposition  [ prop : srp : sim - inner ] ( for the strong - relaying scenario ) can be summarized as follows . recall that all the messages @xmath333 are originated from the source @xmath0 and the knowledge space of the relay @xmath2 at time @xmath32 , i.e. , @xmath60 always satisfies @xmath334 . as a result",
    ", @xmath0 can always mimic any lnc encoding operation that @xmath2 can perform regardless of any time @xmath28 .",
    "therefore , we allow @xmath0 to mimic the same encoding operations that @xmath2 does and thus the @xmath2-variables in proposition  [ prop : srp : sim - inner ] is now replaced by the @xmath322-variables associated with both @xmath0 and @xmath2 , where the performer is distinguished by the superscript @xmath335 , @xmath323 .",
    "for that , the conditions ( [ prop : srp : sim - inner : a ] ) , ( [ prop : srp : sim - inner : t ] ) , ( [ prop : srp : sim - inner : x0 ] ) , and ( [ prop : srp : sim - inner : x ] ) that are associated with @xmath2-variables has changed to ( [ prop : srp : sim - innerv2:a ] ) , ( [ prop : srp : sim - innerv2:t ] ) , ( [ prop : srp : sim - innerv2:x ] ) , and ( [ prop : srp : sim - innerv2:x ] ) , respectively , by replacing @xmath2-variables into @xmath322-variables with the superscript @xmath335 , @xmath323 .",
    "the @xmath2-pec probabilities are also replaced by a generic notation @xmath336 , @xmath323 . on the other hand ,",
    "the other conditions that are associated only with @xmath0-variables , i.e. , ( [ prop : srp : sim - inner : e ] ) , ( [ prop : srp : sim - inner : b ] ) , ( [ prop : srp : sim - inner : m ] ) , and ( [ prop : srp : sim - inner : s ] ) remain the same as before by ( [ prop : srp : sim - innerv2:e ] ) , ( [ prop : srp : sim - innerv2:b ] ) , ( [ prop : srp : sim - innerv2:m ] ) , and ( [ prop : srp : sim - innerv2:s ] ) , respectively .",
    "in addition to the above systematic changes , we also consider the more advanced lnc encoding operations that the source @xmath0 can do , i.e. , self - packets - mixing operations @xmath337 . by these newly added @xmath338 @xmath0-variables , ( [ prop : srp : sim - innerv2:a ] ) , ( [ prop :",
    "srp : sim - innerv2:s ] ) to ( [ prop : srp : sim - innerv2:t ] ) , and ( [ prop : srp : sim - innerv2:x ] ) to ( [ prop : srp : sim - innerv2:d ] ) are updated accordingly .",
    "the queueing network described in section  [ sec : srp : queue - property ] remains the same as before , but we have additional self - packets - mixing operations @xmath337 for the general lnc inner bound . the lnc encoding operations and the packet movement process of the newly added @xmath0-variables @xmath339 can also be found in appendix  [ app : srp : queue_invariance : v2 ] .",
    ", width=340,height=170 ]    consider a smart repeater network with marginal channel success probabilities : ( a ) @xmath0-pec : @xmath340 , @xmath341 , and @xmath342 ; and ( b ) @xmath2-pec : @xmath343 and @xmath344 . and",
    "we assume that all the erasure events are independent .",
    "we will use the results in propositions  [ prop : srp : lp - outer ] and  [ prop : srp : sim - inner ] to find the largest @xmath5 value for this example scenario .",
    "[ fig : srp : comp ] compares the lnc capacity outer bound ( proposition  [ prop : srp : lp - outer ] ) and the lnc inner bound ( proposition  [ prop : srp : sim - inner ] ) with different achievability schemes .",
    "the smallest rate region is achieved by simply performing uncoded direct transmission without using the relay @xmath2 .",
    "the second achievability scheme is the @xmath12-receiver broadcast channel lnc from the source @xmath0 in @xcite while still not exploiting @xmath2 at all .",
    "the third and fourth schemes always use @xmath2 for any packet delivery .",
    "namely , both schemes do not allow @xmath12-hop delivery from @xmath0 .",
    "then @xmath2 in the third scheme uses pure routing while @xmath2 performs the @xmath12-user broadcast channel lnc in the fourth scheme .",
    "the fifth scheme performs the time - shared transmission between @xmath0 and @xmath2 , while allowing only intra - flow network coding .",
    "the sixth scheme is derived from using only the classic butterfly - style lncs corresponding to @xmath345 , @xmath256 , and @xmath247 .",
    "that is , we do not allow @xmath0 to perform fancy operations such as @xmath346 , @xmath347 , @xmath348 , and @xmath246 .",
    "one can see that the result is strictly suboptimal .    in summary",
    ", one can see that our proposed lnc inner bound closely approaches to the lnc capacity outer bound in all angles .",
    "this shows that the newly - identified lnc operations other than the classic butterfly - style lncs are critical in approaching the lnc capacity .",
    "the detailed rate region description of each sub - optimal achievability scheme can be found in appendix  [ app : srp : schemes ] .    , and",
    "the inner bounds are described in propositions  [ prop : srp : sim - inner ] and  [ prop : srp : sim - innerv2 ] , respectively.,width=340,height=170 ]    fig .",
    "[ fig : srp : cdf1 ] examines the relative gaps between the outer bound and two inner bounds by choosing the channel parameters @xmath76 and @xmath77 uniformly randomly while obeying ( a ) the strong - relaying condition in definition  [ def : srp : strong - relaying ] when using proposition  [ prop : srp : sim - inner ] ; and ( b ) the arbitrary @xmath0-pec and @xmath2-pec distributions when using proposition  [ prop : srp : sim - innerv2 ] . for any chosen parameter instance",
    ", we use a linear programming solver to find the largest sum rate @xmath349 of the lnc outer bound in proposition  [ prop : srp : lp - outer ] , which is denoted by @xmath350 .",
    "similarly , we find the largest sum rate @xmath349 that satisfies the lnc inner bound in proposition  [ prop : srp : sim - inner ] ( resp . proposition  [ prop : srp : sim - innerv2 ] ) and denote it by @xmath351 .",
    "we then compute the relative gap per each experiment , @xmath352 , and then repeat the experiment @xmath353 times , and plot the cumulative distribution function ( cdf ) in unit of percentage .",
    "we can see that with more than @xmath354 of the experiments , the relative gap between the outer and inner bound is smaller than @xmath355 for case  ( a ) and @xmath356 for case  ( b ) .",
    "this work studies the lnc capacity of the smart repeater packet erasure network for two unicast flows .",
    "the capacity region has been effectively characterized by the proposed linear - subspace - based outer bound , and the capacity - approaching lnc scheme with newly identified lnc operations other than the previously well - known classic butterfly - style operations .",
    "we enumerate the @xmath128 _ feasible types _ ( fts ) defined in ( [ def : srp : type ] ) that the source @xmath0 can transmit in the following way : @xmath357 where each @xmath34-digit index @xmath358 represent a @xmath111-bitstring @xmath115 of which @xmath359 is a hexadecimal of first four bits , @xmath360 is a octal of the next three bits , @xmath361 is a hexadecimal of the next four bits , @xmath362 is a octal of the next three bits , and @xmath363 is binary of the last bit .",
    "the subset of @xmath124 that the relay @xmath2 can transmit , i.e. , @xmath133 are listed separately in the following : @xmath364    recall that the @xmath365 of a @xmath111-bitstring @xmath115 represents whether the coding subset belongs to @xmath130 or not , and @xmath366 by definition ( [ def : srp : asetr2 ] ) . as a result ,",
    "any coding type with @xmath367 implies that it lies in the knowledge space of the relay @xmath2 .",
    "the enumerated @xmath133 in the above is thus a collection of such coding subsets in @xmath124 with @xmath368 .",
    "in the following , we will describe all the lnc encoding operations and the corresponding packet movement process of proposition  [ prop : srp : sim - inner ] one by one , and then prove that the queue invariance explained in section  [ sec : srp : queue - property ] always holds .    to simplify the analysis",
    ", we will ignore the null reception , i.e. , none of @xmath3 receives a transmitted packet , because nothing will happen in the queueing network .",
    "moreover , we exploit the following symmetry : for those variables whose superscript indicates the session information @xmath23 ( either session-@xmath15 or session-@xmath12 ) , here we describe session-@xmath15 ( @xmath369 ) only . those variables with @xmath370 in the superscript will be symmetrically explained by simultaneously swapping ( a ) session-@xmath15 and session-@xmath12 in the superscript ; ( b ) @xmath8 and @xmath14 ; ( c ) @xmath265 and @xmath266 ; and ( d ) @xmath9 and @xmath10 , if applicable .",
    "the source @xmath0 transmits @xmath371 .",
    "depending on the reception status , the packet movement process following the inequalities in proposition  [ prop : srp : sim - inner ] is summarized as follows .    * * departure * : one property for @xmath371 is that @xmath204 must be unknown to any of @xmath3 . as a result ,",
    "whenever @xmath204 is received by any of them , @xmath204 must be removed from @xmath206 for the queue invariance . * * insertion * : one can easily verify that the queue properties for @xmath214 , @xmath215 , @xmath209 , and @xmath218 hold for the corresponding insertions .",
    "@xmath0 transmits @xmath372 .",
    "the movement process is symmetric to @xmath202 .",
    "@xmath0 transmits a mixture @xmath289 $ ] from @xmath371 and @xmath373 .",
    "the movement process is as follows .    * * departure * : the property for @xmath371 is that @xmath204 must be unknown to any of @xmath3 , even not flagged in @xmath285 . as a result , whenever the mixture @xmath289 $ ] is received by any of @xmath3 , @xmath204 must be removed from @xmath206 .",
    "similarly , the property for @xmath373 is that @xmath205 must be unknown to any of @xmath1 , even not flagged in @xmath286 .",
    "therefore , whenever the mixture is received by any of @xmath1 , @xmath205 must be removed from @xmath225 . * * insertion * : when only @xmath2 receives the mixture , @xmath2 can use the known @xmath205 and the received @xmath289 $ ] to extract the pure @xmath204 . as a result , we can insert @xmath204 to @xmath214 as it is not flagged in @xmath286 .",
    "the case when only @xmath10 receives the mixture satisfies the properties of @xmath224 as @xmath2 knows the pure @xmath205 only while @xmath10 knows the mixture @xmath289 $ ] only . as a result",
    ", we can insert @xmath289 $ ] to @xmath224 .",
    "the remaining reception cases fall into at least one of two conditions of @xmath261 .",
    "for example when only @xmath9 receives the mixture , now @xmath289 $ ] is in @xmath267 while @xmath205 is still known by @xmath2 only .",
    "this corresponds to the first condition of @xmath261 .",
    "one can easily verify that other cases satisfy either one of or both properties of @xmath261 .",
    "following the packet format for @xmath261 , we insert @xmath289:w$ ] into @xmath261 where @xmath290 denotes the packet in @xmath2 that can benefit both destinations when transmitted . from the previous example when only @xmath9 receives the mixture , we insert @xmath289:y_j$ ] into @xmath261 as sending the known @xmath205 from @xmath2 simultaneously enables @xmath10 to receive the desired @xmath205 and @xmath9 to decode the desired @xmath204 by subtracting @xmath205 from the received @xmath289 $ ] .",
    "@xmath0 transmits a mixture @xmath291 $ ] from @xmath374 and @xmath372 .",
    "the movement process is symmetric to @xmath222 .",
    "@xmath0 transmits a mixture @xmath289 $ ] from @xmath374 and @xmath375 .",
    "the movement process is as follows .    *",
    "* departure * : the property for @xmath374 is that @xmath204 must be unknown to any of @xmath1 , even not flagged in @xmath286 . as a result , whenever the mixture @xmath289 $ ] is received by any of @xmath1 , @xmath204 must be removed from @xmath214 .",
    "similarly , the property for @xmath375 is that @xmath205 must be unknown to any of @xmath314 , even not flagged in @xmath376 .",
    "therefore , whenever the mixture is received by any of @xmath314 , @xmath205 must be removed from @xmath231 . * * insertion * : whenever @xmath9 receives the mixture , @xmath9 can use the known @xmath205 and the received @xmath289 $ ] to extract the pure / desired @xmath204 . as a result , we can insert @xmath204 into @xmath209 whenever @xmath9 receives .",
    "the cases when @xmath10 receives but @xmath9 does not fall into the second condition of @xmath261 as @xmath289 $ ] is in @xmath268 and @xmath204 is known by @xmath2 only .",
    "namely , @xmath2 can benefit both destinations simultaneously by sending the known @xmath204 .",
    "for those two reception status @xmath377 and @xmath378 , we can thus insert this mixture into @xmath261 as @xmath289\\!:\\!x_i$ ] .",
    "whenever @xmath2 receives the mixture , @xmath2 can use the known @xmath204 and the received @xmath289 $ ] to extract the pure @xmath205 .",
    "now @xmath205 is known by both @xmath2 and @xmath9 but still unknown to @xmath10 even if @xmath10 receives this mixture @xmath289 $ ] as well . as a result",
    ", @xmath205 can be moved to @xmath264 as the case  1 insertion .",
    "but for the reception status of @xmath378 , note from the previous discussion that we can insert the mixture into @xmath261 since @xmath10 receives the mixture but @xmath9 does not . in this case , we chose to use more efficient @xmath261 that can handle both sessions simultaneously . finally when the reception status is @xmath379 , we have that @xmath204 is known by both @xmath2 and @xmath9 while the mixture @xmath289 $ ] is received by @xmath10 .",
    "namely , @xmath204 is still unknown to @xmath10 but when it is delivered , @xmath10 can use @xmath204 and the received @xmath289 $ ] to extract a desired session-@xmath12 packet @xmath205 .",
    "moreover , @xmath204 is already in @xmath209 and thus can be used as an information - equivalent packet for @xmath205 .",
    "this scenario is exactly the same as the case  2 of @xmath264 and thus we can move @xmath204 into @xmath264 as the case  2 insertion .",
    "@xmath0 transmits a mixture @xmath289 $ ] from @xmath303 and @xmath373 .",
    "the movement process is symmetric to @xmath232 .",
    "@xmath0 transmits @xmath204 of the mixture @xmath289 $ ] in @xmath224 .",
    "the movement process is as follows .    * * departure * : one condition for @xmath289\\!\\in\\!\\srpqb{1}{2}$ ] is that @xmath204 is unknown to any of @xmath3 . as a result , whenever @xmath204 is received by any of @xmath3 , the mixture @xmath289",
    "$ ] must be removed from @xmath224 . * * insertion * : from the conditions of @xmath224 , we know that @xmath204 is unknown to @xmath9 and @xmath205 is known only by @xmath2 . as a result , whenever @xmath9 receives @xmath204 , @xmath9 receives the new session-@xmath15 packet and thus we can insert @xmath204 into @xmath209 . whenever @xmath10 receives @xmath204",
    ", @xmath10 can use the known @xmath289 $ ] and the received @xmath204 to subtract the pure @xmath205 .",
    "we can thus insert @xmath205 into @xmath263 .",
    "the case when only @xmath2 receives @xmath204 falls into the first condition of @xmath261 as @xmath289 $ ] is in @xmath268 and @xmath204 is known by @xmath2 only . in this case , @xmath2 can benefit both destinations simultaneously by sending the received @xmath204 .",
    "for this reception status of @xmath380 , we thus insert the mixture into @xmath261 as @xmath289\\!:\\!x_i$ ] . the remaining reception status to consider are @xmath377 , @xmath381 , @xmath378 , and @xmath382 .",
    "the first when only @xmath10 receives @xmath204 falls into the property of @xmath215 as @xmath204 is known only by @xmath10 and not flagged in @xmath288 .",
    "thus we can insert @xmath204 into @xmath215 .",
    "obviously , @xmath10 can decode @xmath205 from the previous discussion .",
    "for the second when only @xmath9 receives @xmath204 , we first have @xmath383 while @xmath204 is unknown to any of @xmath314 .",
    "moreover , @xmath205 is known by @xmath2 only and @xmath289 $ ] is in @xmath268 .",
    "this scenario falls exactly into @xmath231 and thus we can insert @xmath204 into @xmath231 . the third case when both @xmath10 and @xmath2 receive @xmath204 falls exactly into case  1 of @xmath218 as @xmath204",
    "is now known by both @xmath10 and @xmath2 but still unknown to @xmath9 . and obviously , @xmath10 can decode @xmath205 from the previous discussion .",
    "for the fourth case when both @xmath9 and @xmath2 receive @xmath204 , we now have that @xmath2 contains @xmath384 ; @xmath9 contains @xmath204 ; and @xmath10 contains @xmath289 $ ] .",
    "that is , @xmath204 is already in @xmath209 and known by @xmath2 as well but still unknown to @xmath10 .",
    "moreover , @xmath10 can decode the desired session-@xmath12 packet @xmath205 when it receives @xmath204 further . as a result",
    ", @xmath204 can be used as an information - equivalent packet for @xmath205 and can be moved into @xmath264 as the case  2 insertion .",
    "@xmath0 transmits @xmath205 of @xmath289\\in\\srpqb{2}{1}$ ] .",
    "the movement process is symmetric to @xmath227 .",
    "@xmath0 transmits @xmath385 .",
    "the movement process is as follows .    * * departure * : one condition for @xmath303 is that @xmath204 must be unknown to any of @xmath287 . as a result",
    ", @xmath204 must be removed from @xmath215 whenever it is received by any of @xmath287 .",
    "* * insertion * : whenever @xmath9 receives @xmath204 , it receives a new session-@xmath15 packet and thus we can insert @xmath204 into @xmath209 . if @xmath204 is received by @xmath2 but not by @xmath9 , then @xmath204 will be known by both @xmath10 and @xmath2 ( since @xmath10 already knows @xmath204 ) but still unknown to @xmath9 .",
    "this falls exactly into the first - case scenario of @xmath218 and thus we can move @xmath204 into @xmath218 as the case  1 insertion .",
    "@xmath0 transmits @xmath386 .",
    "the movement process is symmetric to @xmath234 .",
    "@xmath0 transmits @xmath387 .",
    "the movement process is as follows .",
    "* * departure * : one property for @xmath294 is that @xmath293 must be unknown to any of @xmath287 . as a result , whenever @xmath293 is received by any of @xmath287 , @xmath293 must be removed from @xmath229 . * * insertion * : from the property of @xmath294 , we know that @xmath296 ; there exists a session-@xmath15 packet @xmath204 still unknown to @xmath9 where @xmath307 ; and @xmath302 $ ] is in @xmath267 . as a result ,",
    "whenever @xmath9 receives @xmath293 , @xmath9 can use the received @xmath293 and the known @xmath302 $ ] to extract @xmath204 and thus we can insert @xmath204 into @xmath209 . if @xmath293 is received by @xmath2 but not by @xmath9 , then @xmath293 will be known by both @xmath10 and @xmath2 but unknown to @xmath9 , where @xmath302 $ ] is in @xmath267 .",
    "thus when @xmath9 receives @xmath293 , @xmath9 can further decode the desired @xmath204 .",
    "moreover , @xmath293 is already in @xmath263 . as a result",
    ", we can move @xmath293 into @xmath218 as the case  2 insertion .",
    "@xmath0 transmits @xmath388 .",
    "the movement process is symmetric to @xmath389 .",
    "@xmath0 transmits @xmath289 $ ] from @xmath385 and @xmath386 .",
    "the movement process is as follows .    * * departure * : one condition for @xmath303 is that @xmath204 must be unknown to any of @xmath287 , even not flagged in @xmath288 . as a result ,",
    "whenever the mixture is received by any of @xmath287 , @xmath204 must be removed from @xmath215 .",
    "symmetrically for @xmath375 , whenever the mixture is received by any of @xmath314 , @xmath205 must be removed from @xmath231 . * *",
    "insertion * : whenever @xmath9 receives the mixture @xmath289 $ ] , @xmath9 can use the known @xmath375 and the received @xmath289 $ ] to extract the desired @xmath204 and thus we can insert @xmath204 into @xmath209 . similarly ,",
    "whenever @xmath10 receives this mixture , @xmath10 can use the known @xmath303 and the received @xmath289 $ ] to extract the desired @xmath205 and thus we can insert @xmath205 into @xmath263 .",
    "the remaining reception status are @xmath380 , @xmath378 , and @xmath390 .",
    "the first when only @xmath2 receives the mixture exactly falls into the first - case scenario of @xmath243 as @xmath289 $ ] is in @xmath269 ; @xmath303 is known by @xmath10 only ; and @xmath375 is known by @xmath9 only . as a result , @xmath2 can then send this mixture @xmath289 $ ] to benefit both destinations .",
    "the second case when both @xmath10 and @xmath2 receive the mixture , jointly with the assumption @xmath375 , falls exactly into the third - case scenario of @xmath218 where @xmath301 is a pure session-@xmath15 packet . as a result",
    ", we can move @xmath289 $ ] into @xmath218 as the case  3 insertion .",
    "( and obviously , @xmath10 can decode @xmath205 from the previous discussion . ) the third case when both @xmath9 and @xmath2 receive the mixture follows symmetrically to the second case of @xmath378 and thus we can insert @xmath289 $ ] into @xmath264 as the case  3 insertion .",
    "@xmath0 transmits @xmath391 $ ] from @xmath385 and @xmath388 .",
    "the movement process is as follows .    * * departure * : one condition for @xmath303 is that @xmath204 must be unknown to any of @xmath287 , even not flagged in @xmath288 . as a result , whenever the mixture @xmath392 $ ] is received by any of @xmath287 , @xmath204 must be removed from @xmath215 . from the property for @xmath393 , we know that @xmath316 is unknown to any of @xmath314 , even not flagged in @xmath269 . as a result ,",
    "whenever @xmath2 receives the mixture @xmath392 $ ] , @xmath316 must be removed from @xmath230 . moreover ,",
    "whenever @xmath10 receives this mixture , @xmath10 can use the known @xmath303 and the received @xmath392 $ ] to decode @xmath316 and thus @xmath316 must be removed from @xmath230 . *",
    "* insertion * : from the properties of @xmath303 and @xmath393 , we know that @xmath2 contains @xmath205 ( still unknown to @xmath10 and @xmath317 ) ; @xmath9 contains @xmath316 ; and @xmath10 contains @xmath394\\}$ ] already . therefore ,",
    "whenever @xmath9 receives the mixture @xmath392 $ ] , @xmath9 can use the known @xmath316 and the received @xmath392 $ ] to extract the desired @xmath204 and thus we can insert @xmath204 into @xmath209 . similarly , whenever @xmath10 receives this mixture , @xmath10 can use the known @xmath394\\}$ ] and the received @xmath392 $ ] to extract the desired @xmath205 , and thus we can insert @xmath205 into @xmath263 . the remaining reception status are @xmath380 , @xmath378 , and @xmath390 .",
    "one can see that the case when only @xmath2 receives the mixture exactly falls into the case  2 scenario of @xmath243 . for the second case",
    "when both @xmath10 and @xmath2 receive the mixture , now @xmath2 contains @xmath395\\}$ ] ; @xmath9 contained @xmath316 before ; and @xmath10 contains @xmath394,[x_i+x_j]\\}$ ] .",
    "this falls exactly into the third - case scenario of @xmath218 where @xmath301 is a pure session-@xmath15 packet @xmath204 . as a result",
    ", we can move @xmath392 $ ] into @xmath218 as the case  3 insertion .",
    "( and obviously , @xmath10 can decode the desired @xmath205 from the previous discussion . ) for the third case when both @xmath9 and @xmath2 receive the mixture , now @xmath2 contains @xmath395\\}$ ] ; @xmath9 contains @xmath396\\}$ ] ; and @xmath10 contained @xmath394\\}$ ] before , where we now have @xmath383 from the previous discussion .",
    "this falls exactly into the third - case scenario of @xmath264 where @xmath300 is a pure session-@xmath15 packet @xmath315 .",
    "note that delivering @xmath392 $ ] will enable @xmath10 to further decode the desired @xmath205 .",
    "thus we can move @xmath392 $ ] into @xmath264 as the case  3 insertion .",
    "@xmath0 transmits @xmath397 $ ] from @xmath387 and @xmath386 .",
    "the movement process is as follows .    * * departure * : from the property for @xmath294 , we know that @xmath293 is unknown to any of @xmath287 , even not flagged in @xmath269 . as a result ,",
    "whenever @xmath2 receives the mixture @xmath397 $ ] , @xmath293 must be removed from @xmath229 . moreover ,",
    "whenever @xmath9 receives this mixture , @xmath9 can use the known @xmath375 and the received @xmath397 $ ] to decode @xmath293 and thus @xmath293 must be removed from @xmath229 .",
    "one condition for @xmath375 is that @xmath205 must be unknown to any of @xmath314 , even not flagged in @xmath376 . as a result , whenever the mixture @xmath397 $ ] is received by any of @xmath314 , @xmath205 must be removed from @xmath231 . * * insertion * : from the properties of @xmath294 and @xmath375 , we know that @xmath2 contains @xmath204 ( still unknown to @xmath9 and @xmath307 ) ; @xmath9 contains @xmath398\\}$ ] ; and @xmath10 contains @xmath293 already .",
    "therefore , whenever @xmath9 receives the mixture @xmath397 $ ] , @xmath9 can use the known @xmath398\\}$ ] and the received @xmath397 $ ] to extract the desired @xmath204 and thus we can insert @xmath204 into @xmath209 . similarly , whenever @xmath10 receives this mixture , @xmath10 can use the known @xmath293 and the received @xmath397 $ ] to extract the desired @xmath205 , and thus we can insert @xmath205 into @xmath263 . the remaining reception status are @xmath380 , @xmath378 , and @xmath390 .",
    "one can see that the first case when only @xmath2 receives the mixture exactly falls into the case  3 scenario of @xmath243 . for the second case",
    "when both @xmath10 and @xmath2 receive the mixture , now @xmath2 contains @xmath399\\}$ ] ; @xmath9 contained @xmath398\\}$ ] before ; and @xmath10 contains @xmath400\\}$ ] , where we now have @xmath401 from the previous discussion .",
    "this falls exactly into the third - case scenario of @xmath218 where @xmath301 is a pure session-@xmath12 packet @xmath293 .",
    "note that delivering @xmath397 $ ] will enable @xmath9 to further decode the desired @xmath204 .",
    "thus we can move @xmath397 $ ] into @xmath218 as the case  3 insertion . for the third case",
    "when both @xmath9 and @xmath2 receive the mixture , now @xmath2 contains @xmath399\\}$ ] ; @xmath9 contains @xmath398,[y_i+y_j]\\}$ ] ; and @xmath10 contained @xmath293 before .",
    "this falls exactly into the third - case scenario of @xmath264 where @xmath300 is a pure session-@xmath12 packet @xmath205 . as a result",
    ", we can move @xmath397 $ ] into @xmath264 as the case  3 insertion .",
    "( and obviously , @xmath9 can decode the desired @xmath204 from the previous discussion . )",
    "@xmath0 transmits @xmath402 $ ] from @xmath387 and @xmath388 .",
    "the movement process is as follows .    * * departure * : from the property for @xmath294 , we know that @xmath293 is unknown to any of @xmath287 , even not flagged in @xmath269 . as a result ,",
    "whenever @xmath2 receives the mixture @xmath402 $ ] , @xmath293 must be removed from @xmath229 .",
    "moreover , @xmath393 is known by @xmath9 . as a result ,",
    "whenever @xmath9 receives the mixture , @xmath9 can use the known @xmath316 and the received @xmath402 $ ] to decode @xmath293 and thus @xmath293 must be removed from @xmath229 .",
    "symmetrically for @xmath393 , whenever the mixture is received by any of @xmath314 , @xmath316 must be removed from @xmath230 . * * insertion * : from the properties of @xmath294 and @xmath393 , we know that @xmath2 contains @xmath384 where @xmath204 ( resp .",
    "@xmath205 ) is still unknown to @xmath9 ( resp . @xmath403 and @xmath307 ( resp .",
    "@xmath317 ) ; @xmath9 contains @xmath404,x_j\\}$ ] ; and @xmath10 contains @xmath405\\}$ ] already .",
    "therefore , whenever @xmath9 receives the mixture @xmath402 $ ] , @xmath9 can use the known @xmath404,x_j\\}$ ] and the received @xmath402 $ ] to extract the desired @xmath204 and thus we can insert @xmath204 into @xmath209 . similarly , whenever @xmath10 receives this mixture , @xmath10 can use the known @xmath405\\}$ ] and the received @xmath402 $ ] to extract the desired @xmath205 , and thus we can insert @xmath205 into @xmath263 . the remaining reception status are @xmath380 , @xmath378 , and @xmath390 .",
    "one can see that the first case when only @xmath2 receives the mixture exactly falls into the case  4 scenario of @xmath243 .",
    "for the second case when both @xmath10 and @xmath2 receive the mixture , now @xmath2 contains @xmath406\\}$ ] ; @xmath9 contained @xmath404,x_j\\}$ ] before ; and @xmath10 contains @xmath405,[y_i+x_j]\\}$ ] where we now have @xmath315 from the previous discussion .",
    "this falls exactly into the third - case scenario of @xmath218 where @xmath301 is a pure session-@xmath12 packet @xmath293 .",
    "note that delivering @xmath402 $ ] will enable @xmath9 to further decode the desired @xmath204 .",
    "thus we can move @xmath402 $ ] into @xmath218 as the case  3 insertion . for the third case",
    "when both @xmath9 and @xmath2 receive the mixture , now @xmath2 contains @xmath406\\}$ ] ; @xmath9 contains @xmath404,x_j,[y_i+x_j]\\}$ ] ; and @xmath10 contained @xmath405\\}$ ] before , where we now have @xmath296 from the previous discussion .",
    "this falls exactly into the third - case scenario of @xmath264 where @xmath300 is a pure session-@xmath12 packet @xmath316 .",
    "note that delivering @xmath402 $ ] will enable @xmath10 to further decode the desired @xmath205 .",
    "thus we can move @xmath402 $ ] into @xmath264 as the case  3 insertion .",
    "@xmath0 transmits @xmath407 $ ] from @xmath385 and @xmath408 .",
    "the movement process is as follows .    * * departure * : the property for @xmath303 is that @xmath204 must be unknown to any of @xmath287 , even not flagged in @xmath288 . as a result , whenever the mixture @xmath407 $ ] is received by any of @xmath287 , @xmath204 must be removed from @xmath215 .",
    "similarly , one condition for @xmath409 is that @xmath410 must be unknown to @xmath10 .",
    "however when @xmath10 receives the mixture , @xmath10 can use the known @xmath303 and the received @xmath407 $ ] to decode @xmath410 .",
    "thus @xmath410 must be removed from @xmath264 whenever @xmath10 receives . * * insertion * : from the properties of @xmath303 and @xmath409 , we know that @xmath2 contains @xmath410 ; @xmath9 contains @xmath410 ; and @xmath10 contains @xmath204 already .",
    "therefore , whenever @xmath9 receives this mixture , @xmath9 can use the known @xmath410 and the received @xmath407 $ ] to extract the desired @xmath204 and thus we can insert @xmath204 into @xmath209 . similarly , whenever @xmath10 receives this mixture , @xmath10 can use the known @xmath204 and the received @xmath407 $ ] to extract @xmath410 .",
    "we now need to consider case by case when @xmath410 was inserted into @xmath264 . if it was the case  1 insertion",
    ", then @xmath410 is a pure session-@xmath12 packet @xmath205 and thus we can simply insert @xmath205 into @xmath263 . if it was the case  2 insertion , then @xmath410 is a pure session-@xmath12 packet @xmath315 and there exists a session-@xmath12 packet @xmath205 still unknown to @xmath10 where @xmath317 .",
    "moreover , @xmath10 has received @xmath411 $ ] . as a result",
    ", @xmath10 can further decode @xmath205 and thus we can insert @xmath205 into @xmath263 .",
    "if it was the case  3 insertion , then @xmath410 is a mixed form of @xmath308 $ ] where @xmath301 is already known by @xmath10 but @xmath300 is not . as a result , @xmath10 can decode @xmath300 upon receiving @xmath412 $ ] .",
    "note that @xmath300 in the case  3 insertion @xmath412\\!\\in\\!\\srpqx{2}{1}$ ] comes from either @xmath231 or @xmath230 .",
    "if @xmath300 was coming from @xmath231 , then @xmath300 is a session-@xmath12 packet @xmath205 and we can simply insert @xmath205 into @xmath263 . if @xmath300 was coming from @xmath230 , then @xmath300 is a session-@xmath15 packet @xmath316 and there also exists a session-@xmath12 packet @xmath205 still unknown to @xmath10 where @xmath317 .",
    "moreover , @xmath10 has received @xmath411 $ ] . as a result",
    ", @xmath10 can further use the known @xmath411 $ ] and the extracted @xmath316 to decode @xmath205 and thus we can insert @xmath205 into @xmath263 . in a nutshell ,",
    "whenever @xmath10 receives the mixture @xmath407 $ ] , a session-@xmath12 packet @xmath205 that was unknown to @xmath10 can be newly decoded .",
    "the remaining reception status are @xmath380 and @xmath378 . for both cases",
    "when @xmath2 receives the mixture but @xmath9 does not , @xmath2 can use the known @xmath410 and the received @xmath407 $ ] to extract @xmath204 . since @xmath204 is now known by both @xmath2 and @xmath10 but unknown to @xmath9 , we can thus move @xmath204 into @xmath218 as the case  1 insertion .",
    "@xmath0 transmits @xmath413 $ ] from @xmath414 and @xmath386 .",
    "the movement process is symmetric to @xmath250 .",
    "@xmath0 transmits @xmath415 $ ] from @xmath387 and @xmath408 .",
    "the movement process is as follows .    * * departure * : from the property for @xmath294 , we know that @xmath293 is unknown to any of @xmath287 , even not flagged in @xmath269 . as a result ,",
    "whenever @xmath2 receives the mixture @xmath415 $ ] , @xmath293 must be removed from @xmath229 .",
    "moreover , @xmath409 is known by @xmath9 . as a result ,",
    "whenever @xmath9 receives the mixture , @xmath9 can use the known @xmath410 and the received @xmath415 $ ] to decode @xmath293 and thus @xmath293 must be removed from @xmath229 .",
    "similarly , one condition for @xmath409 is that @xmath410 must be unknown to @xmath10 .",
    "however when @xmath10 receives the mixture , @xmath10 can use the known @xmath294 and the received @xmath415 $ ] to decode @xmath410 .",
    "thus @xmath410 must be removed from @xmath264 whenever @xmath10 receives . * * insertion * : from the properties of @xmath294 and @xmath409 , we know that @xmath2 contains @xmath416 ; @xmath9 contains @xmath404,\\overline{w}_j\\}$ ] ; and @xmath10 contains @xmath293 already .",
    "therefore , whenever @xmath9 receives this mixture , @xmath9 can use the known @xmath404,\\overline{w}_j\\}$ ] and the received @xmath415 $ ] to extract the desired @xmath204 and thus we can insert @xmath204 into @xmath209 . similarly , whenever @xmath10 receives this mixture , @xmath10 can use the known @xmath293 and the received @xmath415 $ ] to extract @xmath410 .",
    "we now need to consider case by case when @xmath410 was inserted into @xmath264 . if it was the case  1 insertion",
    ", then @xmath410 is a pure session-@xmath12 packet @xmath205 and thus we can simply insert @xmath205 into @xmath263 . if it was the case  2 insertion ,",
    "then @xmath410 is a pure session-@xmath15 packet @xmath315 and there exists a session-@xmath12 packet @xmath205 still unknown to @xmath10 where @xmath317 .",
    "moreover , @xmath10 has received @xmath411 $ ] . as a result",
    ", @xmath10 can further decode @xmath205 and thus we can insert @xmath205 into @xmath263 .",
    "if it was the case  3 insertion , then @xmath410 is a mixed form of @xmath308 $ ] where @xmath301 is already known by @xmath10 but @xmath300 is not . as a result",
    ", @xmath10 can decode @xmath300 upon receiving @xmath412 $ ] .",
    "note that @xmath300 in the case  3 insertion @xmath412\\!\\in\\!\\srpqx{2}{1}$ ] comes from either @xmath231 or @xmath230 .",
    "if @xmath300 was coming from @xmath231 , then @xmath300 is a session-@xmath12 packet @xmath205 and we can simply insert @xmath205 into @xmath263 . if @xmath300 was coming from @xmath230 , then @xmath300 is a session-@xmath15 packet @xmath316 and there also exists a session-@xmath12 packet @xmath205 still unknown to @xmath10 where @xmath317 .",
    "moreover , @xmath10 has received @xmath411 $ ] . as a result ,",
    "@xmath10 can further use the known @xmath411 $ ] and the extracted @xmath316 to decode @xmath205 and thus we can insert @xmath205 into @xmath263 . in a nutshell ,",
    "whenever @xmath10 receives the mixture @xmath415 $ ] , a session-@xmath12 packet @xmath205 that was unknown to @xmath10 can be newly decoded .",
    "the remaining reception status are @xmath380 and @xmath378 .",
    "for both cases when @xmath2 receives the mixture but @xmath9 does not , @xmath2 can use the known @xmath410 and the received @xmath415 $ ] to extract @xmath293 . since @xmath293 is now known by both @xmath2 and @xmath10 but @xmath302 $ ] is in @xmath267",
    ", we can thus move @xmath293 into @xmath218 as the case  2 insertion .",
    "@xmath0 transmits @xmath417 $ ] from @xmath414 and @xmath388 .",
    "the movement process is symmetric to @xmath251 .",
    "@xmath2 transmits @xmath204 from @xmath418 .",
    "the movement process is as follows .    * * departure * : one condition for @xmath374 is that @xmath204 must be unknown to any of @xmath1 . as a result ,",
    "whenever @xmath204 is received by any of @xmath1 , @xmath204 must be removed from @xmath214 . * * insertion * : from the above discussion , we know that @xmath204 is unknown to @xmath9 . as a result , whenever @xmath204 is received by @xmath9 , we can insert @xmath204 to @xmath209 .",
    "if @xmath204 is received by @xmath10 but not by @xmath9 , then @xmath204 is now known by both @xmath10 and @xmath2 but still unknown to @xmath9 .",
    "this exactly falls into the first - case scenario of @xmath218 and thus we can move @xmath204 into @xmath218 as the case  1 insertion .",
    "@xmath2 transmits @xmath205 from @xmath419 .",
    "the movement process is symmetric to @xmath244 .",
    "@xmath2 transmits @xmath204 that is known by @xmath2 only and information equivalent from @xmath294 .",
    "the movement process is as follows .    * * departure * : from the property for @xmath294 , we know that there exists an information - equivalent session-@xmath15 packet @xmath204 that is known by @xmath2 but unknown to any of @xmath1 . as a result , whenever @xmath204 is received by any of @xmath1 , @xmath293 must be removed from @xmath229 . *",
    "* insertion * : from the above discussion , we know that @xmath204 is unknown to @xmath9 and thus we can insert @xmath204 to @xmath209 whenever @xmath204 is received by @xmath9 . if @xmath204 is received by @xmath10 but not by @xmath9 , then @xmath204 is now known by both @xmath10 and @xmath2 but still unknown to @xmath9 .",
    "this exactly falls into the first - case scenario of @xmath218 and thus we can move @xmath204 into @xmath218 as the case  1 insertion .",
    "@xmath2 transmits @xmath205 that is known by @xmath2 only and information equivalent from @xmath393 .",
    "the movement process is symmetric to @xmath420 .",
    "@xmath2 transmits @xmath290 known by @xmath2 for the packet of the form @xmath289:w\\!\\in\\!\\srpqm$ ] .",
    "the movement process is as follows .    * * departure * : from the conditions of @xmath289:w\\!\\in\\!\\srpqm$ ] , we know that @xmath261 is designed to benefit both destinations simultaneously when @xmath2 transmits @xmath290 .",
    "that is , whenever @xmath9 ( resp .",
    "@xmath10 ) receives @xmath290 , @xmath9 ( resp .",
    "@xmath10 ) can decode the desired @xmath204 ( resp .",
    "@xmath205 ) , regardless whether the packet @xmath290 is of a session-@xmath15 or of a session-@xmath12 .",
    "however from the conditions of @xmath261 , we know that @xmath204 is unknown to @xmath9 and @xmath205 is unknown to @xmath10 .",
    "therefore , whenever @xmath290 is received by any of @xmath1 , @xmath289:w$ ] must be removed from @xmath218 .",
    "* * insertion * : from the above discussions , we know that @xmath9 ( resp .",
    "@xmath10 ) can decode the desired @xmath204 ( resp .",
    "@xmath205 ) when @xmath290 is received by @xmath9 ( resp .",
    "@xmath10 ) . as a result",
    ", we can insert @xmath204 into @xmath209 ( resp . @xmath205 into @xmath263 ) when @xmath9 ( resp .",
    "@xmath10 ) receives @xmath290 .",
    "we now consider two reception status @xmath421 and @xmath92 . from the conditions of @xmath261 ,",
    "note that @xmath290 is always known by @xmath2 and can be either @xmath204 or @xmath205 . moreover , @xmath204 ( resp .",
    "@xmath205 ) is unknown to @xmath9 ( resp .",
    "@xmath10 ) . for the first reception case @xmath421 ,",
    "if @xmath204 was chosen as @xmath290 to benefit both destinations , then @xmath204 is now known by both @xmath10 and @xmath2 but still unknown to @xmath9 .",
    "this exactly falls into the first - case scenario of @xmath218 and thus we move @xmath204 into @xmath218 as the case  1 insertion . on the other hand ,",
    "if @xmath205 was chosen as @xmath290 to benefit both destinations , then we know that @xmath205 is now known by both @xmath10 and @xmath2 , and that @xmath289 $ ] is already in @xmath267 .",
    "this exactly falls into the second - case scenario of @xmath218 and thus we can move @xmath401 into @xmath218 as the case  2 insertion . the second reception case @xmath92 will follow the the previous arguments symmetrically .    @xmath2 transmits @xmath308\\!\\in\\!\\srpqstar$ ] .",
    "the movement process is as follows .    * * departure * : from the property for @xmath308\\!\\in\\!\\srpqstar$ ] , we know that @xmath301 is known only by @xmath10 and that @xmath300 is only known by @xmath9 . as a result ,",
    "whenever @xmath9 receives this mixture , @xmath9 can use the known @xmath300 and the received @xmath308 $ ] to extract @xmath301 and thus the mixture must be removed from @xmath243 .",
    "similarly , whenever @xmath10 receives this mixture , @xmath10 can use the known @xmath301 and the received @xmath308 $ ] to extract @xmath300 and thus the mixture must be removed from @xmath243 .",
    "* * insertion * : from the above discussions , we have observed that whenever @xmath9 ( resp .",
    "@xmath10 ) receives the mixture , @xmath9 ( resp .",
    "@xmath10 ) can extract @xmath301 ( resp .",
    "@xmath300 ) . from the four cases study of @xmath243 , we know that @xmath9 ( resp .",
    "@xmath10 ) can decode a desired session-@xmath15 packet @xmath204 ( resp .",
    "session-@xmath12 packet @xmath205 ) whenever @xmath9 ( resp .",
    "@xmath10 ) receives the mixture , and thus we can insert @xmath204 ( resp .",
    "@xmath205 ) into @xmath209 ( resp .",
    "@xmath263 ) .",
    "we now consider the reception status @xmath421 and @xmath92 .",
    "if @xmath10 receives the mixture but @xmath9 does not , then @xmath9 contained @xmath300 and @xmath10 now contains @xmath308 $ ] .",
    "moreover , @xmath308 $ ] was transmitted from @xmath2 .",
    "this falls exactly into the third - case scenario of @xmath218 . as a result",
    ", we can move @xmath308 $ ] into @xmath218 as the case  3 insertion .",
    "the case when the reception status is @xmath92 can be symmetrically followed such that we can move @xmath308 $ ] into @xmath264 as the case  3 insertion .",
    "@xmath2 transmits @xmath422 .",
    "the movement process is as follows .    * * departure * : one condition for @xmath422 is that @xmath423 is known by @xmath10 unknown to @xmath9 . as a result ,",
    "whenever @xmath9 receives , @xmath423 must be removed from @xmath218 .",
    "since @xmath422 is already known by @xmath10 , nothing happens if it is received by @xmath10 .",
    "* * insertion * : from the previous observation , we only need to consider the reception status when @xmath9 receives @xmath423 . for those @xmath92 and @xmath424",
    ", we need to consider case by case when @xmath423 was inserted into @xmath218 . if it was the case  1 insertion",
    ", then @xmath423 is a pure session-@xmath15 packet @xmath204 and thus we can simply insert @xmath204 into @xmath209 . if it was the case  2 insertion ,",
    "then @xmath423 is a pure session-@xmath12 packet @xmath296 and there exists a session-@xmath15 packet @xmath204 still unknown to @xmath9 where @xmath307 .",
    "moreover , @xmath9 has received @xmath302 $ ] . as a result",
    ", @xmath9 can further decode @xmath204 and thus we can insert @xmath204 into @xmath209 .",
    "if it was the case  3 insertion , then @xmath423 is a mixed form of @xmath308 $ ] where @xmath300 is already known by @xmath9 but @xmath301 is not . as a result",
    ", @xmath9 can decode @xmath301 upon receiving @xmath425 $ ] .",
    "note that @xmath301 in the case  3 insertion @xmath425\\!\\in\\!\\srpqx{1}{2}$ ] comes from either @xmath215 or @xmath229 .",
    "if @xmath301 was coming from @xmath215 , then @xmath301 is a session-@xmath15 packet @xmath204 and we can simply insert @xmath204 into @xmath209 . if @xmath301 was coming from @xmath229 , then @xmath301 is a session-@xmath12 packet @xmath293 and there also exists a session-@xmath15 packet @xmath204 still unknown to @xmath9 where @xmath307 .",
    "moreover , @xmath9 has received @xmath302 $ ] . as a result",
    ", @xmath9 can further use the known @xmath302 $ ] and the extracted @xmath293 to decode @xmath204 and thus we can insert @xmath204 into @xmath209 . in a nutshell , whenever @xmath9 receives @xmath423 , a session-@xmath15 packet @xmath204 that was unknown to @xmath9 can be newly decoded .",
    "@xmath2 transmits @xmath409 .",
    "the movement process is symmetric to @xmath257}{}$ ] .",
    "@xmath2 transmits @xmath426 $ ] from @xmath422 and @xmath409 .",
    "the movement process is as follows .    * * departure * : from the property for @xmath422 , we know that @xmath423 is known by @xmath10 but unknown to @xmath9 .",
    "symmetrically , @xmath409 is known by @xmath9 but unknown to @xmath10 . as result , whenever @xmath9 ( resp .",
    "@xmath10 ) receives the mixture , @xmath9 ( resp .",
    "@xmath10 ) can use the known @xmath410 ( resp .",
    "@xmath423 ) and the received @xmath426 $ ] to extract @xmath423 ( resp .",
    "@xmath410 ) .",
    "therefore , we must remove @xmath423 from @xmath218 whenever @xmath9 the mixture and remove @xmath410 from @xmath264 whenever @xmath10 receives . * * insertion * : from the above discussions , we have observed that whenever @xmath9 ( resp .",
    "@xmath10 ) receives the mixture , @xmath9 ( resp .",
    "@xmath10 ) can extract @xmath423 ( resp .",
    "@xmath410 ) .",
    "we first focus on the case when @xmath9 receives the mixture . for those @xmath92 and @xmath424",
    ", we can use the same arguments for @xmath423 as described in the insertion process of @xmath257}{}$ ] . following these case studies",
    ", one can see that a session-@xmath15 packet @xmath204 that was unknown to @xmath9 can be newly decoded whenever @xmath9 receives @xmath423 .",
    "the reception status when @xmath10 receives the mixture can be followed symmetrically such that @xmath10 can always decode a new session-@xmath12 packet @xmath205 that was unknown before .",
    "in the following , we will describe the newly added @xmath338 self - packets - xor operations and the corresponding packet movement process of proposition  [ prop : srp : sim - innerv2 ] one by one , and then prove that the queue invariance explained in section  [ sec : srp : queue - property ] always holds .",
    "again , to simplify the analysis , we will ignore the null reception and we will exploit the following symmetry : for those variables @xmath339 whose superscript indicates the session information @xmath23 ( either session-@xmath15 or session-@xmath12 ) , here we describe session-@xmath15 ( @xmath369 ) only . those variables with @xmath370 in the superscript will be symmetrically explained by simultaneously swapping ( a ) session-@xmath15 and session-@xmath12 in the superscript ; ( b ) @xmath8 and @xmath14 ; ( c ) @xmath265 and @xmath266 ; and ( d ) @xmath9 and @xmath10 , if applicable .",
    "the source @xmath0 transmits @xmath427 $ ] from @xmath428 and @xmath385 .",
    "the movement process is as follows .    * * departure * : the property for @xmath429 is that @xmath8 must be unknown to any of @xmath1 , even not flagged in @xmath286 . as a result , whenever the mixture @xmath430 $ ] is received by any of @xmath1 , @xmath8 must be removed from @xmath214 .",
    "similarly , the property for @xmath303 is that @xmath204 must be unknown to any of @xmath287 , even not flagged in @xmath288 . as a result , whenever the mixture is received by any of @xmath287 , @xmath204 must be removed from @xmath215 . * * insertion * : whenever @xmath2 receives the mixture , @xmath2 can use the known @xmath8 and the received @xmath427 $ ] to extract @xmath204 .",
    "moreover , whenever @xmath10 receives the mixture , @xmath10 can use the known @xmath204 and the received @xmath427 $ ] to extract @xmath8 . from the above observations , we describe one by one for each reception status .",
    "when the reception status is @xmath431 , now @xmath204 is known by both @xmath10 and @xmath2 but still unknown to @xmath9 while @xmath8 is still at @xmath2 .",
    "this @xmath204 falls exactly into the first - case scenario of @xmath218 and thus we move @xmath204 into @xmath218 as the case  1 insertion . when the reception status is @xmath377 , now @xmath8 is known by both @xmath10 and @xmath2 but still unknown to @xmath9 while @xmath204 is still at @xmath10 . as a result",
    ", we can move @xmath8 into @xmath218 as the case  1 insertion .",
    "when the reception status is @xmath381 , we now have @xmath8 at @xmath2 ; @xmath427 $ ] at @xmath9 ; and @xmath204 at @xmath10 . in this case",
    ", whenever @xmath204 or @xmath8 is further delivered , @xmath9 can decode both @xmath8 and @xmath204 simultaneously .",
    "we can thus treat @xmath204 as information - equivalent to @xmath8 or vice versa .",
    "but since @xmath204 is overheard by @xmath10 , we chose to treat @xmath204 as already decoded  in advance \" ; insert @xmath204 into @xmath209 ; and treat @xmath8 as not - yet decoded by @xmath9 . for such @xmath8 , note that now @xmath2 can perform the naive delivery to @xmath9 .",
    "this exactly falls into the scenario of @xmath229 when we substitute @xmath293 by @xmath204 .",
    "originally , @xmath229 holds packets of pure session-@xmath12 where such a session-@xmath12 packet @xmath294 is information equivalent to a session-@xmath15 packet not yet delivered to @xmath9 .",
    "@xmath204 here plays the same role as @xmath293 as we treat @xmath432 and that @xmath8 is not yet delivered to @xmath9 . as a result",
    ", we move @xmath204 into @xmath229 .",
    "when the reception status is @xmath378 , we have both @xmath8 and @xmath204 known by both @xmath10 and @xmath2 but still unknown to @xmath9 . as a result , we can move both @xmath8 and @xmath204 into @xmath218 as the case  1 insertion .",
    "when the reception status is @xmath382 , we now have @xmath433 at @xmath2 ; @xmath427 $ ] at @xmath9 ; and @xmath204 at @xmath10 . following the discussion when @xmath381 , we can treat either @xmath8 or @xmath204 as already decoded .",
    "but here we choose to treat @xmath204 as already decoded since @xmath204 is known by both @xmath10 and @xmath2 .",
    "such @xmath204 falls exactly into the second - case scenario of @xmath218 when we substitute @xmath293 by @xmath204 . as a result",
    ", we move @xmath204 into @xmath209 , and also into @xmath229 as the case  2 insertion .",
    "when the reception status is @xmath379 , we now have @xmath8 at @xmath2 ; @xmath427 $ ] at @xmath9 ; and @xmath433 at @xmath10 . similarly following the discussion when @xmath381 , here we choose to treat @xmath8 as already decoded since @xmath8 is known by both @xmath10 and @xmath2",
    "similarly following the above discussions , we move @xmath8 into @xmath209 , and also into @xmath229 as the case  2 insertion .",
    "finally when the reception status is @xmath434 , we now have @xmath433 at @xmath2 ; @xmath427 $ ] at @xmath9 ; and @xmath433 at @xmath10 . following the similar discussion of when @xmath379 , we know that we can treat either @xmath8 or @xmath204 as already decoded because both @xmath8 and @xmath204 are known by @xmath10 and @xmath2 . as a result ,",
    "if we treat @xmath8 as already decoded by @xmath9 , then we move @xmath8 into @xmath218 as the case  2 insertion . on the other hand , if we treat @xmath204 as already decoded , then we move @xmath204 into @xmath218 as the case  2 insertion .",
    "@xmath0 transmits @xmath435 $ ] from @xmath436 and @xmath375 .",
    "the movement process is symmetric to @xmath437 .",
    "@xmath0 transmits @xmath438 $ ] from @xmath428 and @xmath439 .",
    "the movement process is as follows .    * * departure * : the property for @xmath429 is that @xmath8 must be unknown to any of @xmath1 , even not flagged in @xmath286 . as a result , whenever the mixture @xmath440 $ ] is received by any of @xmath1 , @xmath8 must be removed from @xmath214 .",
    "similarly , one property for @xmath441 is that @xmath423 must be unknown to any of @xmath287 , even not in @xmath269 . as a result ,",
    "whenever @xmath423 is received by any of @xmath287 , @xmath423 must be removed from @xmath229 .",
    "similarly , one property for @xmath441 is that @xmath423 must be unknown to any of @xmath287 and for @xmath2 not allowed to even have @xmath423 in a mixed form with any other packet . as a result ,",
    "whenever the mixture is received by @xmath2 , it must be removed from @xmath229 .",
    "we now need to consider the case when the mixture is received by both @xmath1 but not @xmath2 . to that end ,",
    "first note that since @xmath429 and @xmath441 , we already have @xmath433 at @xmath2 ; @xmath442\\}$ ] at @xmath9 ; and @xmath423 at @xmath10 , where @xmath309 is the information - equivalent pure session-@xmath15 packet corresponding to @xmath423 from the property of @xmath441 .",
    "now assume that the mixture is received only by both @xmath9 and @xmath10 .",
    "we then have @xmath433 at @xmath2 ; @xmath442,[x\\!+\\!\\overline{w}_i]\\}$ ] at @xmath9 ; and @xmath443\\}$ ] at @xmath10 .",
    "then @xmath10 can now use the known @xmath423 and the received @xmath438 $ ] to further extract @xmath8 . in this case , whenever @xmath423 or @xmath8 is delivered to @xmath9 , it can decode @xmath8 and @xmath204 simultaneously .",
    "but notice that @xmath9 also knows @xmath444 $ ] by manipulating its received mixtures @xmath442,[x\\!+\\!\\overline{w}_i]\\}$ ] .",
    "moreover , @xmath8 is known by both @xmath314 while @xmath204 is known by @xmath2 only . as a result",
    ", we chose to use @xmath8 further and thus treat @xmath8 as already decoded .",
    "the reason is because , for such @xmath8 , this exactly falls into case  2 of @xmath218 where @xmath445 is known by both @xmath314 and @xmath9 has @xmath446\\!=\\![x_i\\!+\\!x]$ ] where @xmath309 . in a nutshell , when the reception status is @xmath379 , we can treat @xmath8 as if @xmath447 .",
    "therefore , @xmath8 must be removed from @xmath214 . * * insertion * : whenever @xmath2 receives the mixture , @xmath2 can use the known @xmath8 and the received @xmath438 $ ] to extract @xmath423 .",
    "also , whenever @xmath10 receives the mixture , @xmath10 can use the known @xmath423 and the received @xmath438 $ ] to extract @xmath8 . from these observations , we describe one by one for each reception status .",
    "when the reception status is @xmath431 , now @xmath423 is known by both @xmath314 where @xmath8 is still at @xmath2 .",
    "since @xmath423 was coming from @xmath229 , @xmath9 also knows @xmath448 $ ] for some @xmath309 where @xmath449 . for such @xmath423 ,",
    "this exactly falls into case  2 of @xmath218 and thus we move @xmath423 into @xmath218 as the case  2 insertion . when the reception status is @xmath377 , now @xmath8 is known by both @xmath314 where @xmath423 is still at @xmath10 . for such @xmath8 ,",
    "this exactly falls into case  1 of @xmath218 and thus we move @xmath8 into @xmath218 as the case  1 insertion .",
    "when the reception status is @xmath381 , we now have @xmath433 at @xmath2 ; @xmath442,[x\\!+\\!\\overline{w}_i]\\}$ ] at @xmath9 ; and @xmath423 at @xmath10 . in this case",
    ", whenever @xmath423 or @xmath8 is further delivered to @xmath9 , it can decode both @xmath8 and @xmath204 simultaneously .",
    "but since @xmath423 is overheard by @xmath10 , we chose to treat @xmath8 as already decoded and insert @xmath8 into @xmath209 , while still keeping @xmath309 as not - yet decoded .",
    "since @xmath309 is kept intact and the mixture is received by @xmath9 only , in order for @xmath9 to further decode @xmath204 , @xmath9 needs to have either @xmath204 in @xmath2 or @xmath423 in @xmath10 .",
    "namely , the original scenario of @xmath441 is still kept intact . as a result",
    ", we just insert @xmath8 into @xmath209 . when the reception status is @xmath378 , we now have that both @xmath8 and @xmath423 are known by both @xmath314 and thus both @xmath8 and @xmath423 falls into case  1 and case  2 of @xmath218 , respectively .",
    "we thus move both @xmath8 and @xmath423 into @xmath218 as the case  1 and case  2 insertion , respectively .",
    "when the reception status is @xmath382 , we now have @xmath450 at @xmath2 ; @xmath442,[x\\!+\\!\\overline{w}_i]\\}$ ] at @xmath9 ; and @xmath423 at @xmath10 . following the discussion when @xmath381 , we can treat either @xmath8 or @xmath204 as already decoded .",
    "but here we chose to treat @xmath204 as already decoded since @xmath423 is overheard by both @xmath314 and @xmath9 contains @xmath438 $ ] .",
    "namely , by treating @xmath383 , we can switch the @xmath423-associated pure session-@xmath15 packet from @xmath204 to @xmath451 since @xmath9 now knows @xmath438 $ ] .",
    "this is exactly the same to case  2 of @xmath218 where @xmath452 is known by both @xmath314 and @xmath9 has @xmath453 $ ] where @xmath451 . as a result , we can further move @xmath423 into @xmath218 as the case  2 insertion .",
    "when the reception status is @xmath379 , we now have @xmath433 at @xmath2 ; @xmath442,[x\\!+\\!\\overline{w}_i]\\}$ ] at @xmath9 ; and @xmath454 at @xmath10 . following the * departure * discussion when @xmath381 , we can choose to treat @xmath8 as already decoded and use @xmath8 as for case  2 of @xmath218 where @xmath445 is known by both @xmath314 and @xmath9 has @xmath446\\!=\\![x_i\\!+\\!x]$ ] where @xmath309 .",
    "as a result , we can further move @xmath8 into @xmath218 as the case  2 insertion .",
    "finally when the reception status is @xmath434 , we now have @xmath450 at @xmath2 ; @xmath442,[x\\!+\\!\\overline{w}_i]\\}$ ] at @xmath9 ; and @xmath454 at @xmath10 .",
    "from the previous discussions , we know that we can treat either @xmath8 or @xmath204 as already decoded where both @xmath8 and @xmath423 are known by both @xmath314 . if we treat @xmath8 as already decoded , then since @xmath449 was from @xmath229 and is known by both @xmath314 , we can thus move @xmath423 into @xmath218 as the case  2 insertion . on the other hand ,",
    "if we treat @xmath204 as already decoded , then since @xmath451 is known by both @xmath314 , we can thus move @xmath8 into @xmath218 as the case  1 insertion .",
    "@xmath0 transmits @xmath455 $ ] from @xmath456 and @xmath457 .",
    "the movement process is symmetric to @xmath458 .",
    "@xmath0 transmits @xmath459 $ ] from @xmath385 and @xmath460 .",
    "the movement process is as follows .    * * departure * : one property for @xmath303 is that @xmath204 must be unknown to any of @xmath287 , not even in a mixed form with any other packet . as a result ,",
    "whenever the mixture is received by any of @xmath287 , it must be removed from @xmath215 .",
    "similarly , one property for @xmath441 is that there exists a pure session-@xmath15 packet @xmath461 that is information - equivalent to @xmath423 and is known by @xmath2 only .",
    "note that whenever the mixture @xmath459 $ ] is received by @xmath10 , it can use the known @xmath204 and the received @xmath459 $ ] to extract the pure @xmath462 . as a result",
    ", @xmath423 must be removed from @xmath229 .",
    "we now need to consider the case when the mixture is received by both @xmath287 but not @xmath10 . to that end , first note that since @xmath303 and @xmath441 , we have @xmath462 at @xmath2 ; @xmath463 $ ] at @xmath9 ; and @xmath464 at @xmath10 , where @xmath461 is the information - equivalent pure session-@xmath15 packet corresponding to @xmath423 from the property of @xmath441 .",
    "now assume that the mixture is received only by both @xmath9 and @xmath2 .",
    "we then have @xmath465\\}$ ] at @xmath2 ; @xmath466,[x_i\\!+\\!x^\\ast_i]\\}$ ] at @xmath9 ; and @xmath464 still at @xmath10 .",
    "then @xmath2 can now use the known @xmath462 and the received @xmath459 $ ] to further extract @xmath204 . in this case",
    ", whenever @xmath204 or @xmath462 is delivered to @xmath9 , it can decode both @xmath204 and @xmath462 simultaneously since @xmath9 has received @xmath459 $ ] .",
    "moreover , @xmath204 is known by both @xmath314 while @xmath462 is known by @xmath2 only . as a result",
    ", we chose to use @xmath204 further and thus treat @xmath204 as already decoded .",
    "the reason is because , for such @xmath204 , this exactly falls into case  2 of @xmath218 where @xmath467 is known by both @xmath314 and @xmath9 has @xmath468\\!=\\![x^\\ast_i\\!+\\!x_i]$ ] where @xmath461 . in a nutshell , when the reception status is @xmath382 , we can replace @xmath423 by @xmath383 for decoding @xmath462 later .",
    "therefore , @xmath423 must be removed from @xmath229 . *",
    "* insertion * : whenever @xmath2 receives the mixture , @xmath2 can use the known @xmath462 and the received @xmath459 $ ] to extract @xmath204 . also , whenever @xmath10 receives the mixture , @xmath10 can use the known @xmath204 and the received @xmath459 $ ] to extract @xmath462 . from these observations , we describe one by one for each reception status .",
    "when the reception status is @xmath431 , now @xmath204 is known by both @xmath314 where @xmath462 is still at @xmath2 . for such @xmath204 ,",
    "this exactly falls into case  1 of @xmath218 and thus we move @xmath204 into @xmath218 as the case  1 insertion .",
    "when the reception status is @xmath377 , now @xmath462 is known by both @xmath314 where @xmath204 is still at @xmath10 . for such @xmath462 ,",
    "this exactly falls into case  1 of @xmath218 and thus we move @xmath462 into @xmath218 as the case  1 insertion .",
    "when the reception status is @xmath381 , we now have @xmath462 at @xmath2 ; @xmath466,[x_i\\!+\\!x^\\ast_i]\\}$ ] at @xmath9 ; and @xmath464 at @xmath10 . in this case",
    ", whenever @xmath204 or @xmath462 is further delivered to @xmath9 , it can decode both @xmath204 and @xmath462 simultaneously .",
    "we then chose to treat @xmath204 as already decoded and insert @xmath204 into @xmath209 , while still keeping @xmath461 as not - yet decoded .",
    "since @xmath461 is kept intact and the mixture @xmath463 $ ] was known by @xmath9 before , in order for @xmath9 to further decode @xmath462 , @xmath9 needs to have either @xmath462 in @xmath2 or @xmath423 in @xmath10 .",
    "namely , the original scenario of @xmath441 is still kept intact . as a result ,",
    "we just insert @xmath204 into @xmath209 . when the reception status is @xmath378 , we now have that both @xmath204 and @xmath462 are known by both @xmath314 and thus both @xmath204 and @xmath462 falls into case  1 of @xmath218 .",
    "we thus move both @xmath204 and @xmath423 into @xmath218 as the case  1 insertions .",
    "when the reception status is @xmath382 , we now have @xmath469 at @xmath2 ; @xmath466,[x_i\\!+\\!x^\\ast_i]\\}$ ] at @xmath9 ; and @xmath464 at @xmath10 . following the * departure * discussion when @xmath382 , we can choose to treat @xmath204 as already decoded and use @xmath204 as for case  2 of @xmath218 where @xmath470 is known by both @xmath314 and @xmath9 has @xmath468\\!=\\![x_i\\!+\\!x^\\ast_i]$ ] where @xmath461 . as a result",
    ", we can further move @xmath204 into @xmath218 as the case  2 insertion .",
    "when the reception status is @xmath379 , we now have @xmath462 at @xmath2 ; @xmath466,[x_i\\!+\\!x^\\ast_i]\\}$ ] at @xmath9 ; and @xmath471 at @xmath10 . following the discussion",
    "when @xmath381 , we can treat either @xmath204 or @xmath462 as already decoded .",
    "but here we chose to treat @xmath204 as already decoded since @xmath462 is now overheard by both @xmath314 and @xmath9 contains @xmath459 $ ] .",
    "namely , by treating @xmath383 , we can simply focus on delivering @xmath461 to @xmath9 that is known by both @xmath314 .",
    "this is exactly the same to case  1 of @xmath218 . as a result",
    ", we can further move @xmath462 into @xmath218 as the case  1 insertion .",
    "finally when the reception status is @xmath434 , we now have @xmath469 at @xmath2 ; @xmath466,[x_i\\!+\\!x^\\ast_i]\\}$ ] at @xmath9 ; and @xmath471 at @xmath10 . from the previous discussions ,",
    "we know that we can treat either @xmath204 or @xmath462 as already decoded where both @xmath204 and @xmath462 are known by both @xmath314 .",
    "if we treat @xmath204 as already decoded , we can simply move @xmath461 into @xmath218 as the case  1 insertion . similarly ,",
    "if we treat @xmath462 as already decoded , then since @xmath309 is known by both @xmath314 , we can thus move @xmath204 into @xmath218 as the case  1 insertion .",
    "@xmath0 transmits @xmath472 $ ] from @xmath473 and @xmath474 .",
    "the movement process is symmetric to @xmath475 .    in the following table  [ tab :",
    "srp : queue_in - out_v2 ] , we also described for each queue , the associated lnc operations that moves packet into and takes packets out of in the general lnc inner bound of proposition  [ prop : srp : sim - innerv2 ] .",
    "note that @xmath2-variables are the same as @xmath322-variables where the superscript @xmath476 is by @xmath477 , and thus they represent @xmath322-variables accordingly .",
    "in the following , we describe @xmath5 rate regions of each suboptimal achievability scheme used for the numerical evaluation in section  [ sec : srp : eval ] .    @xmath143 * :* the rate regions can be described by proposition  [ prop : srp : sim - inner ] , if the variables @xmath478 , @xmath479 , @xmath480 are all hardwired to @xmath276 .",
    "namely , we completely shut down all the variables dealing with cross - packet - mixtures .",
    "after such hardwirings , proposition  [ prop : srp : sim - inner ] is further reduced to the following form : @xmath481}{}\\right),\\end{aligned}\\ ] ] and consider any @xmath482 satisfying @xmath185 . for each @xmath186 pair ( out of the two choices @xmath187 and",
    "@xmath188 ) , @xmath483}{}\\cdot\\psrpsimt{r}{d_i } , \\\\ \\big ( \\snumuc{i } + \\snumdx{i } { } \\big)\\cdot\\psrpsimt{s}{d_i } + \\big(\\rnumuc{i } & + \\rnumdx{[i]}{}\\big)\\cdot\\psrpsimt{r}{d_i } \\geq \\rb{i}.\\end{aligned}\\ ] ]    @xmath143 * :* this scheme requires that all the packets go through @xmath2 , and then @xmath2 performs @xmath12-user broadcast channel nc .",
    "the corresponding rate regions can be described as follows : @xmath484    @xmath143 * :* this scheme requires that all the packets go through @xmath2 as well , but @xmath2 performs uncoded routing for the final delivery .",
    "the corresponding rate regions can be described as follows : @xmath485    @xmath143 * :* this scheme completely ignores the relay @xmath2 in the middle , and @xmath0 just performs @xmath12-user broadcast channel lnc of @xcite .",
    "the corresponding rate regions can be described as follows : @xmath486                        d.  koutsonikolas , c .- c .",
    "wang , and y.  hu , `` efficient network coding based opportunistic routing through cumulative coded acknowledgment , '' _ ieee / acm trans .",
    "19 , no .  5 , pp .",
    "13681381 , 2011 .",
    "l.  georgiadis and l.  tassiulas , `` broadcast erasure channel with feedback - capacity and algorithms , '' in _ proc .",
    "5th workshop on network coding , theory , and applications ( netcod ) _ , lausanne , switzerland , june 2009 , pp .",
    "kuo and c .- c .",
    "wang , `` on the capacity of 2-user 1-hop relay erasure networks - the union of feedback , scheduling , opportunistic routing , and network coding , '' in _ proc .",
    "ieee intl symp .",
    "inform . theory .",
    "_ , st . peterburg , russia , july 2011 , pp . 13371341 .",
    "wang and d.  j. love , `` linear network coding capacity region of @xmath12-receiver mimo broadcast packet erasure channels with feedback , '' in _ proc .",
    "ieee intl symp .",
    "inform . theory .",
    "_ , boston , ma , usa , july 2012 , pp .",
    "20622066 .",
    "m.  gatzianas , l.  georgiadis , and l.  tassiulas , `` multiuser broadcast erasure channel with feedback - capacity and algorithms , '' _ ieee trans .",
    "inform . theory _",
    "59 , no .  9 , pp .",
    "57795804 , september 2013 .",
    "wang , `` linear network coding capacity for broadcast erasure channels with feedback , receiver coordination , and arbitrary security requirement , '' in _ proc .",
    "ieee intl symp .",
    "inform . theory .",
    "_ , istanbul , turkey , july 2013 , pp .",
    "29002904 .",
    "wang and j.  han , `` the capacity region of 2-receiver multiple - input broadcast packet erasure channels with channel output feedback , '' _ ieee trans .",
    "inform . theory _",
    "60 , no .  9 ,",
    "pp . 55975626 , sept .",
    "kuo and c .- c .",
    "wang , `` robust and optimal opportunistic scheduling for downlink 2-flow inter - session network coding , '' in _ proc .",
    "33rd ieee conf .",
    "( infocom ) _ , toronto , canada , may 2014 , pp .",
    "655663 .",
    "a.  papadopoulos and l.  georgiadis , `` multiuser broadcast erasure channel with feedback and side information and related index coding results , '' in _ proc .",
    "52st annual allerton conf . on comm .",
    ", contr . , and computing . _ , monticello , illinois , usa , october 2014 ."
  ],
  "abstract_text": [
    "<S> this work considers the smart repeater network where a single source @xmath0 wants to send two independent packet streams to destinations @xmath1 with the help of relay @xmath2 . </S>",
    "<S> the transmission from @xmath0 or @xmath2 is modeled by packet erasure channels : for each time slot , a packet transmitted by @xmath0 may be received , with some probabilities , by a random subset of @xmath3 ; and those transmitted by @xmath2 will be received by a random subset of @xmath1 . </S>",
    "<S> interference is avoided by allowing at most one of @xmath4 to transmit in each time slot . </S>",
    "<S> one example of this model is any cellular network that supports two cell - edge users when a relay in the middle uses the same downlink resources for throughput / safety enhancement .    in this setting </S>",
    "<S> , we study the capacity region of @xmath5 when allowing linear network coding ( lnc ) . </S>",
    "<S> the proposed lnc inner bound introduces more advanced packing - mixing operations other than the previously well - known butterfly - style xor operation on overheard packets of two co - existing flows . a new lnc outer bound </S>",
    "<S> is derived by exploring the inherent algebraic structure of the lnc problem . </S>",
    "<S> numerical results show that , with more than 85% of the experiments , the relative sum - rate gap between the proposed outer and inner bounds is smaller than 0.08% under the strong - relaying setting and 0.04% under arbitrary distributions , thus effectively bracketing the lnc capacity of the smart repeater problem .    </S>",
    "<S> packet erasure networks , channel capacity , network coding </S>"
  ]
}