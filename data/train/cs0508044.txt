{
  "article_text": [
    "_ presburger arithmetic _",
    "@xcite is the first - order theory of the structure @xmath0 , where @xmath1 denotes the set of natural numbers .",
    "the satisfiability problem for presburger arithmetic is decidable , but of super - exponential worst - case complexity  @xcite .",
    "fortunately , for many applications , such as in program analysis ( e.g. ,  @xcite ) and hardware verification ( e.g. ,  @xcite ) , the quantifier - free fragment suffices .",
    "a formula @xmath2 in quantifier - free presburger arithmetic ( qfp ) is constructed by combining linear constraints with boolean operators ( @xmath3 , @xmath4 , @xmath5 ) .",
    "formally , the @xmath6 linear constraint is of the form @xmath7 , where the coefficients and the constant terms are integer constants and the variables @xmath8 are integer - valued , we interpret the variables over @xmath9 as it is general and more suitable for applications .",
    "it is straightforward to translate a formula with integer variables to one where variables are interpreted over @xmath1 , and vice - versa , by adding ( linearly many ) additional variables or constraints . ] . in this paper , we are concerned with the satisfiability problem for qfp , viz . , that of finding a valuation of the variables such that @xmath2 evaluates to * true*. the np - hardness of this problem follows from a straightforward encoding of the @xmath10sat problem as a @xmath11-@xmath12 integer linear program . that it is moreover in np , and hence np - complete , can be concluded from the result that integer linear programming is in np  @xcite .",
    "thus , if there is a satisfying solution to a qfp formula , there is one whose size , measured in bits , is polynomially bounded in the problem size .",
    "problem size is traditionally measured in terms of the parameters @xmath13 , @xmath14 , @xmath15 , and @xmath16 , where @xmath13 is the total number of constraints in the formula , @xmath14 is the number of variables , and @xmath17 and @xmath18 are upper bounds on the absolute values of coefficients and constant terms respectively .",
    "the above result suggests the following approach to checking the satisfiability of a qfp formula @xmath2 :    1 .",
    "compute the polynomial bound @xmath19 on solution size .",
    "2 .   search for a satisfying solution to @xmath2 in the bounded space @xmath20 .",
    "this approach has been successfully applied to highly restricted sub - classes of qfp , such as _ equality logic _",
    "@xcite and _ difference logic _",
    "@xcite , and is termed as _ finite instantiation _ or the _ small - domain encoding _ approach . the basic idea is to translate @xmath2 to a boolean formula by encoding each integer variable as a vector of boolean variables ( a `` symbolic bit - vector '' ) of length @xmath19 .",
    "the resulting boolean formula is checked using a boolean satisfiability ( sat ) solver .",
    "this approach leverages the dramatic advances in sat solving made in recent years ( e.g. ,  @xcite ) .",
    "it is straightforward to extend the approach to additionally handle the theory of uninterpreted functions and equality , by using , for example , ackermann s technique of eliminating function applications  @xcite .",
    "however , a nave implementation of a decision procedure based on finite instantiation fails for qfp formulas encountered in practice .",
    "the problem is that the bound on solution size , @xmath19 , is @xmath21)$ ] . in particular",
    ", the presence of the @xmath22 term means that , for practical problems involving hundreds of linear constraints , the boolean formulas generated are likely to be too large to be decided by present - day sat solvers .     & non - difference constraints & non - difference constraint + blast & 0.0255 & 6 + magic & 0.0032 & 2 + mit & 0.0087 & 3 + wisa & 0.0091 & 4 +    in this paper , we explore the above finite instantiation - based approach to deciding qfp formulas , but with a focus on formulas generated in software verification .",
    "it has been observed , by us and others , that formulas from this domain have :    1 .",
    "_ mainly difference constraints : _ of the @xmath13 constraints , @xmath23 are _ difference _ constraints , where @xmath24 .",
    "difference constraints , also called _ separation _ or _ difference - bound _",
    "constraints , are of the form @xmath25 or @xmath26 , where @xmath27 is an integer constant , and @xmath28 stands for a relational symbol in the set @xmath29 .",
    "sparse structure : _ the @xmath30 non - difference constraints are sparse , with at most @xmath31 variables per constraint , where @xmath31 is `` small ''",
    ". we will refer to @xmath31 as the _ width _ of the constraint .",
    "pratt  @xcite observed that most inequalities generated in program verification are difference constraints .",
    "more recently , the authors of the theorem prover simplify observed in the context of the extended static checker for java ( esc / java ) project that `` the inequalities that occur in program checking rarely involve more than two or three terms ''  @xcite .",
    "we have performed a study of formulas generated in various recent software verification projects : the blast project at berkeley  @xcite , the magic project at cmu  @xcite , the wisconsin safety analyzer ( wisa ) project  @xcite , and the software upgrade checking project at mit  @xcite .",
    "the results of this study , indicated in table  [ tbl : mostly - sep ] , support the afore - mentioned observations regarding the `` sparse , mostly difference '' nature of constraints in qfp formulas . to our knowledge ,",
    "no previous decision procedure for qfp has attempted to exploit this problem structure .",
    "we make the following novel contributions in this paper :    1 .",
    "we derive bounds on solutions for qfp formulas , not only in terms of the traditional parameters @xmath13 , @xmath14 , @xmath32 , and @xmath33 , but also in terms of @xmath30 and @xmath31 .",
    "in particular , we show that the worst - case number of bits required per integer variable is linear in @xmath30 , but only logarithmic in @xmath31 . unlike previously derived bounds , ours is not in terms of the total number of constraints @xmath13 .",
    "we use the derived bounds in a sound and complete decision procedure for qfp based on finite instantiation , and present empirical evidence that our method can greatly outperform other decision procedures",
    ".    * related work .",
    "* there has been much work on deciding quantifier - free presburger arithmetic ; we present a brief discussion here and refer the reader to a recent survey  @xcite for more details .",
    "recent techniques fall into four categories :    1 .",
    "the first class comprises procedures targeted towards solving conjunctions of constraints , with disjunctions handled by enumerating terms in a disjunctive normal form ( dnf ) .",
    "examples include the omega test  @xcite ( which is an extension of fourier - motzkin elimination for integers ) and solvers based on other integer linear programming techniques .",
    "the drawback of these methods is the need to enumerate the potentially exponentially many terms in the dnf representation .",
    "our work is targeted towards solving formulas with a complicated boolean structure , which often arise in verification applications .",
    "2 .   the second set of methods attempt to remedy this problem by instead relying on modern sat solving strategies .",
    "the approach works as follows .",
    "a boolean abstraction of the qfp formula @xmath2 is generated by replacing each linear constraint with a corresponding boolean variable .",
    "if the abstraction is unsatisfiable , then so is @xmath2 .",
    "if not , the satisfying assignment ( model ) is checked for consistency with the theory of quantifier - free presburger arithmetic , using a ground decision procedure for conjunctions of linear constraints ( i.e. , a procedure for checking feasibility of integer linear programs ) .",
    "assignments that are inconsistent are excluded from later consideration by adding a `` lemma '' to the boolean abstraction .",
    "the process continues until either a consistent assignment is found , or all ( exponentially many ) assignments have been explored .",
    "examples of decision procedures in this class that have some support for qfp include cvc  @xcite and ics  @xcite .",
    "the ground decision procedures used by provers in this class employ a combination framework such as the nelson - oppen architecture for cooperating decision procedures  @xcite or a shostak - like combination method  @xcite .",
    "these methods are only defined for combining disjoint theories . in order to exploit the mostly - difference structure of a formula",
    ", one approach could be to combine a decision procedure for a theory of difference constraints with one for a theory of non - difference constraints , but this needs an extension of the combination methods that applies to these non - disjoint theories .",
    "strichman  @xcite presents sat - based decision procedures for linear arithmetic ( over the rationals ) and qfp . for qfp ,",
    "the basic idea is to create a boolean encoding of all the possible variable projection steps performed by the omega test .",
    "since fourier - motzkin elimination ( and therefore , the omega test ) has worst - case double - exponential complexity in both time and space  @xcite , this approach leads to a sat problem that , in the worst - case , is doubly - exponential in the size of the original formula and takes doubly - exponential time to generate .",
    "in contrast , in our approach the sat - encoding is polynomial in the size of the original formula , and is generated in polynomial time .",
    "the final class of methods are based on automata theory ( e.g. ,  @xcite ) .",
    "the basic idea in these methods is to construct a finite automaton corresponding to the input qfp formula @xmath2 such that the language accepted by the automaton consists of the binary encodings of satisfying solutions of @xmath2 . according to a recent experimental evaluation with other methods  @xcite , these techniques are better than others at solving formulas with very large coefficients , but do not scale well with the number of variables and constraints .",
    "the approach we present in this paper is distinct from the categories mentioned above . in particular , the following unique features differentiate it from previous methods :    1 .",
    "it is the first finite instantiation method and the first tractable procedure for translating a qfp formula to sat in a single step .",
    "the clear separation between the translation and the sat solving allows us to leverage future advances in sat solving far more easily than other sat - based procedures .",
    "it is the first technique , to the best of our knowledge , that formally exploits the structure of formulas commonly encountered in software verification .",
    "in addition to the above , the bounds we derive in this paper are also of independent theoretical interest .",
    "for instance , they indicate that the solution bound does not depend on the number of difference constraints",
    ".    * outline of the paper . * the rest of this paper is organized as follows . in section  [ sec :",
    "backgnd ] , we discuss background material on bounds on satisfying solutions of integer linear programs .",
    "an integer linear program ( ilp ) is a conjunction of linear constraints , and hence is a special kind of qfp formula .",
    "the bounds for qfp follow directly from those for ilps .",
    "our main theoretical results are presented in section  [ sec : theory - main ] .",
    "section  [ sec : sep ] gives bounds for ilps for the case of @xmath34 , when all constraints are difference constraints . in section  [ sec : main ] , we compute a bound for ilps for arbitrary @xmath30 . in section  [ sec : disjunctive ] , we show how our results extend to arbitrary qfp formulas .",
    "techniques for improving the bound in practice are discussed in section  [ sec : enhancements ] .",
    "we report on experimental results in section  [ sec : results ] , and conclude in section  [ sec : concl ] .",
    "in this section , we define the integer linear programming problem formally and state the previous results on bounding satisfying solutions of ilps . a more detailed discussion on the steps outlined in section  [ sec : probdef ] can be found in reference books on ilp ( e.g.  @xcite ) .",
    "consider a system of @xmath13 linear constraints in @xmath14 integer - valued variables : @xmath35 here @xmath36 is an @xmath37 matrix with integral entries , @xmath38 is a @xmath39 vector of integral entries , and @xmath40 is a @xmath41 vector of integer - valued variables .",
    "a satisfying solution to system  ( [ eqn : ineq - system - probdef ] ) is an evaluation of @xmath40 that satisfies  ( [ eqn : ineq - system - probdef ] ) .    in system  ( [ eqn :",
    "ineq - system - probdef ] ) , the entries in @xmath40 can be negative .",
    "we can constrain the variables to be non - negative by adding a dummy variable @xmath42 that refers to the `` zero value , '' replacing each original variable @xmath43 by @xmath44 , and then adjusting the coefficients in the matrix @xmath36 to get a new constraint matrix @xmath45 and the following system : . the statistics in table  [ tbl : mostly - sep ] shows the width before this procedure is applied , computed from constraints as they appear in the original formulas . ] @xmath46 here the system has @xmath47 variables , and @xmath48^t$ ] .",
    "@xmath45 has the structure that @xmath49 for @xmath50 and @xmath51 .",
    "note that the last column of @xmath45 is a linear combination of the previous @xmath14 columns .",
    "it is easy to show that system  ( [ eqn : ineq - system - probdef ] ) has a solution if and only if system  ( [ eqn : ineq - nz - system - probdef ] ) has one .    finally , adding surplus variables to the system , we can rewrite system  ( [ eqn : ineq - nz - system - probdef ] ) as follows : @xmath52 where @xmath53 $ ] is an @xmath54 integer matrix formed by concatenating @xmath36 with the negation of the @xmath55 identity matrix @xmath56 .",
    "+ @xmath57 for convenience we will drop the primes , referring to @xmath58 and @xmath59 simply as @xmath60 and @xmath40 . rewriting system  ( [ eqn : eq - system - probdef - primed ] ) thus , we get @xmath61 hereafter we will mostly use the definition in  ( [ eqn : eq - system - probdef ] ) .    a solution to system  ( [ eqn : eq - system - probdef ] ) also satisfies system  ( [ eqn : ineq - nz - system - probdef ] ) . [",
    "remark : eq - ineq - nz - solutions ]    we next define two useful terms : _ solution bound _ and _ enumeration bound_.    given a qfp formula @xmath62 , a _ solution bound _ is an integer @xmath63 such that @xmath62 has an integer solution if and only if it has an integer solution in the @xmath14-dimensional hypercube @xmath64 $ ] .    given a qfp formula @xmath62 , an _ enumeration bound _ is an integer @xmath63 such that @xmath62 has an integer solution if and only if it has an integer solution in the @xmath14-dimensional hypercube @xmath65 $ ]",
    ". the interval @xmath66 $ ] is termed as an _",
    "enumeration domain_.    the following proposition is easily obtained .    a solution bound @xmath67 for system  ( [ eqn : ineq - nz - system - probdef ] ) is an enumeration bound for system  ( [ eqn : ineq - system - probdef ] ) .",
    "[ thm : sol - enum - bound ]    given a solution @xmath68 to system  ( [ eqn : ineq - nz - system - probdef ] ) , we construct a solution @xmath69 to system  ( [ eqn : ineq - system - probdef ] ) by setting @xmath70 .",
    "since each @xmath71 and @xmath72 are in @xmath73 $ ] , @xmath74 $ ] for all @xmath75 .    similarly , if @xmath76 is an enumeration bound for system  ( [ eqn : ineq - system - probdef ] ) , then @xmath77 is a solution bound for system  ( [ eqn : ineq - nz - system - probdef ] ) .    finally , we introduce symbols @xmath32 and @xmath33 with the following associated meanings : @xmath17 and @xmath78 . in words ,",
    "@xmath32 and @xmath33 are tight upper bounds on the absolute values of entries of @xmath36 and @xmath38 respectively .",
    "the results of this paper build on results obtained by borosh , treybig , and flahive  @xcite on bounding the solutions of systems of the form  ( [ eqn : eq - system - probdef ] ) .",
    "we state their result in the following theorem :    consider the augmented matrix @xmath79 $ ] of dimension @xmath80 .",
    "let @xmath81 be the maximum of the absolute values of all minors of this augmented matrix .",
    "then , the system  ( [ eqn : eq - system - probdef ] ) has a satisfying solution if and only if it has one with all entries bounded by @xmath82.[thm : borosh - treybig ]    however , note that the determinant of a matrix can be more than exponential in the dimension of the matrix  @xcite . in the case of the borosh - flahive - treybig result , it means that @xmath81 can be as large as @xmath83 , where @xmath84 .",
    "papadimitriou  @xcite also gives a bound of similar size , stated in the following theorem :    if the ilp of  ( [ eqn : eq - system - probdef ] ) has a satisfying solution , then it has a satisfying solution where all entries in the solution vector are bounded by @xmath85.[thm : papadim - steiglitz ]    papadimitriou s bound implies that we need @xmath21)$ ] bits to encode each variable ( assuming @xmath86 ) .",
    "the borosh - flahive - treybig bound implies needing @xmath87)$ ] bits per variable , which is of the same order .",
    "let us first consider computing solution bounds for an ilp for the case where @xmath88 , i.e. , system  ( [ eqn : eq - system - probdef ] ) comprises only of difference constraints .    in this case",
    ", the left - hand side of each equation comprises exactly three variables : two variables @xmath43 and @xmath89 where @xmath90 and one surplus variable @xmath91 where @xmath92 .",
    "the @xmath93 equation in the system is of the form @xmath94 .    as we noted in section",
    "[ sec : probdef ] , the matrix @xmath36 can be written as @xmath95 $ ] where @xmath96 comprises the first @xmath97 columns , and @xmath56 is the @xmath55 identity matrix .",
    "the important property of @xmath96 is that each row has exactly one @xmath98 entry and exactly one @xmath99 entry , with all other entries @xmath11 .",
    "thus , @xmath100 can be interpreted as the node - arc incidence matrix of a directed graph .",
    "therefore , @xmath100 is _ totally unimodular _ ( tum ) , i.e. , every square submatrix of @xmath100 has determinant in @xmath101  @xcite .",
    "therefore , @xmath96 is tum , and so is @xmath102 $ ] .",
    "now , let us consider using the borosh - flahive - treybig bound stated in theorem  [ thm : borosh - treybig ] .",
    "this bound is stated in terms of the minors of the matrix @xmath103 $ ] .",
    "for the special case of this section , we have the following bound on the size of any minor :    the absolute value of any minor of @xmath104 $ ] is bounded above by @xmath105 , where @xmath106 .",
    "[ thm : sep - bound ]    consider any minor @xmath107 of @xmath103 $ ] .",
    "let @xmath108 be the order of @xmath107 .",
    "if the minor is obtained by deleting the last column ( corresponding to @xmath38 ) , then it is a minor of @xmath36 , and its value is in @xmath109 since @xmath36 is tum .",
    "thus , the bound of @xmath105 is attained for any non - trivial minor with @xmath110 and @xmath111 .",
    "suppose the @xmath38 column is not deleted .",
    "first , note that the matrix @xmath36 is of the form @xmath95 $ ] where the rank of @xmath96 is at most @xmath112 .",
    "this is because @xmath96 has dimensions @xmath113 , and the last column of @xmath96 , corresponding to the variable @xmath42 , is a linear combination of the previous @xmath14 columns .",
    "( refer to the construction of system  ( [ eqn : ineq - nz - system - probdef ] ) from system  ( [ eqn : ineq - system - probdef ] ) . )",
    "next , suppose the sub - matrix corresponding to @xmath107 comprises @xmath114 columns from the @xmath115 part , @xmath116 columns from the @xmath96 part , and the one column corresponding to @xmath38 .",
    "since permuting the rows and columns of @xmath107 does not change its absolute value , we can permute the rows of @xmath107 and the columns corresponding to the @xmath115 part to get the corresponding sub - matrix in the following form : @xmath117    expanding @xmath107 along the last column , we get @xmath118 where each @xmath119 is a minor corresponding to a submatrix of @xmath36 .    however ,",
    "notice that @xmath120 for all @xmath121 , since each of those minors have an entire column ( from the @xmath115 part ) equal to @xmath11 .",
    "therefore , we can reduce the right - hand side to the sum of @xmath122 terms : @xmath123    notice that , so far , we have not made use of the special structure of @xmath36 .    now , observing that @xmath36 is tum , @xmath124 for all @xmath125 .",
    "@xmath126    for all @xmath125 , @xmath127 . further , since each non - zero @xmath119 can be of order at most @xmath128 , @xmath129 . and not @xmath128 to account for the case where @xmath130 .",
    "the minimum with @xmath13 is taken because @xmath131 can exceed @xmath13 but @xmath38 has only @xmath13 elements . ]",
    "therefore , we get @xmath132 , we have @xmath133 .",
    "thus , the bound in this case is @xmath134 .",
    "thus , @xmath19 , the bound on the number of bits per variable , is @xmath135 formulas generated from verification problems tend to be overconstrained , so we assume @xmath136 .",
    "thus , @xmath137 , and the bound reduces to @xmath138 bits per variable .    _",
    "remark : _ the only property of the @xmath36 matrix that the proof of theorem  [ thm : sep - bound ] relies on is the totally unimodular ( tum ) property .",
    "thus , theorem  [ thm : sep - bound ] would also apply to any system of linear constraints whose coefficient matrix is tum .",
    "examples of such matrices include _ interval _ matrices , or more generally _ network _ matrices .",
    "note that the tum property can be tested for in polynomial time  @xcite .",
    "we now consider the general case for ilps , where we have @xmath30 non - difference constraints , each referring to at most @xmath31 variables .    without loss of generality",
    ", we can reorder the rows of matrix @xmath36 so that the @xmath30 non - difference constraints are the top @xmath30 rows , and the difference constraints are the bottom @xmath23 rows . reordering the rows of @xmath36 can only change the sign of any minor of @xmath103 $ ] , not the absolute value .",
    "thus , the matrix @xmath103 $ ] can be put into the following form : @xmath139 here , @xmath140 is a @xmath141 dimensional matrix corresponding to the non - difference constraints , @xmath142 is a @xmath143 dimensional matrix with the difference constraints , @xmath56 is the @xmath55 identity corresponding to the surplus variables , and the last column is the vector @xmath38 .    for ease of presentation , we will assume in the rest of sections  [ sec : main ] and  [ sec : disjunctive ] that @xmath144 .",
    "we will revisit this assumption at the end of section  [ sec : theory - main ] .",
    "the matrix composed of @xmath140 and @xmath142 will be referred to , as before , as @xmath96 .",
    "note that each row of @xmath140 has at most @xmath31 non - zero entries , and each row of @xmath142 has exactly one @xmath98 and one @xmath99 with the remaining entries @xmath11 .",
    "thus , @xmath142 is tum .",
    "we prove the following theorem :    the absolute value of any minor of @xmath104 $ ] is bounded above by @xmath145 , where @xmath106 .",
    "[ thm : main - bound ]    consider any minor @xmath107 of @xmath104 $ ] , and let @xmath108 be its order .    as in theorem",
    "[ thm : sep - bound ] , if @xmath107 includes @xmath114 columns from the @xmath146 part of @xmath36 , then we can infer that @xmath147 .",
    "( our proof of this property in theorem  [ thm : sep - bound ] made no assumptions on the form of @xmath96 . )",
    "if @xmath107 includes the last column @xmath38 , then as in the proof of theorem  [ thm : sep - bound ] , we can conclude that @xmath148   \\label{eqn : main - bound - minor}\\ ] ] where @xmath149 is a minor of @xmath96 .",
    "if @xmath107 does not include @xmath38 , then it is a minor of @xmath36 . without loss of generality",
    ", we can assume that @xmath107 does not include a column from the @xmath115 part of @xmath36 , since such columns only contribute to the sign of the determinant .",
    "so , let us consider bounding a minor @xmath149 of @xmath96 of order @xmath108 ( or @xmath150 , if @xmath107 includes the @xmath38 column ) .    since @xmath151 , consider expanding @xmath149 , using the standard determinant expansion by minors along the top @xmath30 rows corresponding to non - difference constraints .",
    "each term in the expansion is ( up to a sign ) the product of at most @xmath30 entries from the @xmath140 portion , one from each row , and a minor from @xmath142 . since @xmath142 is tum , each product term",
    "is bounded in absolute value by @xmath152 .",
    "furthermore , there can be at most @xmath153 non - zero terms in the expansion , since each non - zero product term is obtained by choosing one non - zero element from each of the rows of the @xmath140 portion of @xmath149 , and this can be done in at most @xmath153 ways .",
    "therefore , @xmath154 is bounded by @xmath155 . combining this with the inequality  ( [ eqn : main - bound - minor ] ) , and since @xmath147 , we get @xmath156 which is what we set out to prove .    thus , we conclude that @xmath157 , where @xmath158 . from theorems  [ thm : borosh - treybig ] and",
    "[ thm : main - bound ] , and remark  [ remark : eq - ineq - nz - solutions ] , we obtain the following theorem :    a solution bound for the system  ( [ eqn : ineq - nz - system - probdef ] ) is @xmath159 [ thm : sol - bound - conjunction ]    thus , the solution size @xmath19 is @xmath160    we make the following observations about the bound derived above , assuming as before , that @xmath136 , and so @xmath137 :    1 .",
    "_ dependence on parameters : _ we observe that the bound is linear in @xmath30 , logarithmic in @xmath32 , @xmath31 , @xmath14 , and @xmath33 . in particular , the bound is not in terms of the total number of linear constraints , @xmath13 .",
    "2 .   _ worst - case asymptotic growth _ : in the worst case , @xmath161 , @xmath162 , and @xmath163 , and we get the @xmath21)$ ] bound of papadimitriou .",
    "_ typical - case asymptotic growth : _ as observed in our study of formulas from software verification , @xmath31 is typically a small constant , so the number of bits needed per variable is @xmath164 . in many cases , @xmath32 and @xmath30",
    "are also bounded by a small constant .",
    "thus , @xmath19 is typically @xmath138 .",
    "this reduces the search space by an exponential factor over using the bound expressed in terms of @xmath13 .",
    "4 .   _ representing non - difference constraints : _ there are many ways to represent non - difference constraints and these have an impact on the bound we derive . in particular , it is possible to transform a system of non - difference constraints to one with at most three variables per constraint .",
    "for example , the linear constraint @xmath165 can be rewritten as : @xmath166 for the original representation , @xmath167 and @xmath168 , while for the new representation @xmath169 and @xmath170 . since",
    "our bound is linear in @xmath30 and logarithmic in @xmath31 , the original representation would yield a tighter bound .",
    "+ similarly , one can eliminate variables with coefficients greater than @xmath12 in absolute value by introducing new variables ; e.g. , @xmath171 is represented as @xmath172 with an additional difference constraint @xmath173 .",
    "this can be used to adjust @xmath31 , @xmath32 , and @xmath14 so that the overall bound is reduced .",
    "the derived bound only yields benefits in the case when the system has few non - difference constraints which themselves are sparse . in this case",
    ", we can instantiate variables over a finite domain that is much smaller than that obtained without making any assumptions on the structure of the system .",
    "finally , from proposition  [ thm : sol - enum - bound ] and theorem  [ thm : sol - bound - conjunction ] , we obtain an enumeration bound for system  ( [ eqn : ineq - system - probdef ] ) :    an enumeration bound for system  ( [ eqn : ineq - system - probdef ] ) is @xmath174 [ thm : enum - bound - conjunction ]    note that the values of @xmath32 and @xmath31 in the statement of theorem  [ thm : enum - bound - conjunction ] are those for system  ( [ eqn : ineq - nz - system - probdef ] ) .",
    "we now return to the original goal of this paper , that of finding a solution bound for an arbitrary qfp formula @xmath2 .",
    "suppose that @xmath2 has @xmath13 linear constraints @xmath175 , of which @xmath176 are difference constraints , and @xmath14 variables @xmath8 .",
    "as before , we assume that each non - difference constraint has at most @xmath31 variables , @xmath32 is the maximum over the absolute values of coefficients @xmath177 of variables , and @xmath33 is the maximum over the absolute values of constants @xmath178 appearing in the constraints .",
    "furthermore , let us assume that the zero variable ( used in transforming system  [ eqn : ineq - system - probdef ] to system  [ eqn : ineq - nz - system - probdef ] ) have already been introduced into the constraints .",
    "we prove the following theorem .",
    "if @xmath2 is satisfiable , there is a solution to @xmath2 that is bounded by @xmath82 where @xmath179 and @xmath106 .",
    "[ thm : disj - bound ]    let @xmath180 be a ( concrete ) model of @xmath2 .",
    "let @xmath181 constraints , @xmath182 , evaluate to @xmath183 under @xmath180 , the rest evaluating to @xmath184 .",
    "let @xmath185 $ ] be a @xmath186 matrix in which each row comprises the coefficients of variables @xmath8 in a constraint @xmath187 , @xmath188 .",
    "thus , @xmath185 $ ] where @xmath189 .",
    "now consider a constraint @xmath187 where @xmath190 , that evaluates to @xmath184 under @xmath180 .",
    "@xmath187 is the inequality @xmath191 then @xmath180 satisfies @xmath192 which is the inequality @xmath193 or equivalently , @xmath194 let @xmath58 be a @xmath195 matrix corresponding to the coefficients of variables in constraints @xmath196 , @xmath197 , @xmath198 , @xmath199 .",
    "thus , @xmath200 $ ] where @xmath201 .",
    "finally , let @xmath202^t$ ]    clearly , @xmath180 is a satisfying solution to the ilp given by @xmath203 also , if the system  ( [ eqn : ilp - disj - thm ] ) has a satisfying solution then @xmath2 is satisfied by that solution .",
    "thus , @xmath2 and the system  ( [ eqn : ilp - disj - thm ] ) are equi - satisfiable , for every possible system  ( [ eqn : ilp - disj - thm ] ) we construct in the manner described above .    by theorems  [ thm : borosh - treybig ] and",
    "[ thm : main - bound ] , we can conclude that if system  ( [ eqn : ilp - disj - thm ] ) has a satisfying solution , it has one bounded by @xmath82 where @xmath179 and @xmath106 .",
    "moreover , this bound works for every possible system  ( [ eqn : ilp - disj - thm ] ) .    therefore , if @xmath2 has a satisfying solution , it has one bounded by @xmath82 .",
    "thus , to generate the boolean encoding of the starting qfp formula , we must encode each integer variable as a symbolic bit - vector of length @xmath19 given by @xmath204 \\rceil     = \\lceil \\log ( n+2 ) + \\log s + \\log ( { \\ensuremath{b_{\\max}}}+ 1 ) + k ( \\log { \\ensuremath{a_{\\max}}}+ \\log w ) \\rceil\\ ] ]    if the zero variable is not introduced into the formula @xmath62 , we can search for solutions in @xmath65 $ ] , where @xmath205 . as noted earlier ,",
    "values of @xmath32 and @xmath31 used in computing @xmath81 are those obtained after introducing the zero variable .    in section  [ sec : main ] , we assumed , for ease of presentation , that @xmath144 .",
    "if this does not hold , we can simply replace @xmath30 in the results of sections  [ sec : main ] and  [ sec : disjunctive ] by @xmath206 .",
    "this is because the dimension of the minor @xmath149 of @xmath96 ( mentioned in the proof of theorem  [ thm : main - bound ] ) is limited by @xmath207 .",
    "we conclude this section by summarizing the symbols used to represent formula parameters and the quantities derived therefrom . for easy reference , they are listed in table  [ tbl : symbols ] .",
    ".*parameters and derived quantities . * [ cols=\"^,<\",options=\"header \" , ]",
    "the bounds we derived in the preceding section are conservative . for a particular problem instance",
    ", the size of minors can be far smaller than the bound we computed .",
    "however , this can not be directly exploited by enumerating minors , since the number of minors grows exponentially with the dimensions of the constraint matrix .",
    "also , there is a special case under which one can improve the @xmath82 bound .",
    "if all the constraints are originally equalities and the system of constraints has full rank , a bound of @xmath81 suffices  @xcite .",
    "however , in our experience , even if the linear constraints are all equalities , they still tend to be linearly dependent .",
    "thus , we have not been able to make use of this special case result .",
    "fortunately , there are other techniques for improving the solution bound that we have found to be fairly useful in practice .",
    "these include theoretical improvements as well as heuristics that are useful in practice .",
    "we describe these methods in this section .",
    "so far , we have used a single bit - vector length for all integer variables appearing in the formula @xmath2 .",
    "this is overly conservative . in general",
    ", we can partition the set of variables into classes such that two variables are placed in the same class if there is a constraint in which they both appear with non - zero coefficients .",
    "note , moreover , that this partitioning optimization can be performed _ before _ adding the `` zero '' variable @xmath42 .",
    "a different zero variable is then used for each variable class . for each class , we separately compute parameters @xmath14 , @xmath30 , @xmath33 , @xmath32 , and @xmath31 , resulting in a separately computed bit - vector length for each class .    for example , consider the formula @xmath208 in this case , variables @xmath209 , @xmath210 , and @xmath211 fall into one class , while @xmath212 and @xmath213 will be put into a different class .",
    "the correctness of this partitioning optimization follows from a reduction to ilp as performed in the proof of theorem  [ thm : disj - bound ] , along with the following two observations :    1 .   by construction ,",
    "different variable classes share neither variables nor constraints .",
    "a different zero variable can be introduced for each class because that transformation preserves solutions in the same way as the transformation from system  ( [ eqn : ineq - system - probdef ] ) to system  ( [ eqn : ineq - nz - system - probdef ] ) does .",
    "a satisfying solution to a system of ilps , no two of which share a variable , can be obtained by solving them independently and concatenating the solutions .",
    "consider specializing the solution bound of section  [ sec : disjunctive ] to the special cases of equality logic and difference logic .",
    "( an equality logic formula only has constraints of the form @xmath214 . )    for equality logic , @xmath88 , and @xmath215 .",
    "thus , our bound specializes to @xmath216 , which , assuming @xmath136 , is @xmath217 . for separation logic too , @xmath88 .",
    "this yields a bound of @xmath218 .    however , both of these bounds are too conservative .    for an equality logic formula with @xmath14 variables , it is well - known that a solution bound of @xmath14 suffices to decide the satisfiability of the formula .",
    "similarly , if the formula is in difference logic , a solution bound of @xmath219 suffices .",
    "we sketch the proof of this result here , omitting details . the proof is based on a graph - theoretic view of difference - bound constraints , with each variable corresponding to a vertex , and a constraint @xmath220 corresponding to an edge from @xmath43 to @xmath89 of weight @xmath27 .",
    "( the graph is constructed after first putting the formula into negation normal form ; see the paper by strichman et al .",
    "@xcite for details on graph construction . )",
    "a satisfying assignment is an assignment of integers to vertices such that the graph has no positive cycles .",
    "now note that , in this graph , the longest path is of length @xmath219 , since there are @xmath207 vertices in the graph ( including that for the zero variable ) and the weight of any edge is at most @xmath221 .",
    "thus , if there is a satisfying assignment , there is one in which the separation between the minimum and maximum integer value does not exceed @xmath219 .",
    "this concludes the proof sketch .    clearly , if the formula is purely in equality logic or purely in difference logic , we can use the tighter bounds for the appropriate logic",
    "however , the optimization of computing variable classes ( presented in section  [ sec : var - classes ] ) allows us to exploit the tighter bounds even if the overall formula is not in equality logic or difference logic : the tighter bounds can be used for encoding variables in variable classes that comprise purely equality or purely difference constraints .",
    "the correctness of this optimization follows for the same reasons as that of the original variable class partitioning optimization .      in the expression for @xmath19 , the term involving @xmath32 ( and @xmath31 )",
    "is multiplied by a factor of @xmath30 .",
    "thus , any increase in @xmath15 gets amplified by a factor of @xmath30 .",
    "it is therefore useful , in practice , to more carefully model the dependence of @xmath19 on coefficients .",
    "we present two techniques to alleviate the problem of dealing with large coefficients .",
    "these techniques also apply to dealing with large constraint widths .",
    "the coefficient of the zero variable @xmath42 has , so far , been used in computing @xmath32 .",
    "we will now show that we can ignore this coefficient , and also ignore any contribution of @xmath42 to the width @xmath31 .",
    "this optimization can result in a reduction of up to a factor of @xmath222 in the solution bound @xmath63 .",
    "the largest reduction occurs when , in the original formula , we have a constraint of the form @xmath223 , where @xmath224 is the largest coefficient in absolute value . after adding the zero variable , this constraint is transformed to @xmath225",
    "thus , @xmath32 now equals @xmath226 , a factor of @xmath14 times greater than in the original formula .",
    "let us revisit the transformation performed in section  [ sec : probdef ] to convert system  ( [ eqn : ineq - system - probdef ] ) to system  ( [ eqn : ineq - nz - system - probdef ] ) . a different and commonly - used transformation to non - negative variables is to write each @xmath89 as @xmath227 , where @xmath228 for all @xmath75 .",
    "let the resulting system be referred to as system  ( [ eqn : ineq - nz - system - probdef] ) .",
    "let us assume that this different transformation is used in place of the original one that generates system  ( [ eqn : ineq - nz - system - probdef ] ) , leaving all successive transformations the same .",
    "now , consider the form of the matrix @xmath103 $ ] , as used in section  [ sec : main ] , reproduced below : @xmath139 with the new transformation method , @xmath140 is a @xmath229 dimensional matrix corresponding to the non - difference constraints , @xmath142 is a @xmath230 dimensional matrix with the difference constraints , @xmath56 is the @xmath55 identity corresponding to the surplus variables , and the last column is the vector @xmath38 .    importantly , note that @xmath142 is _ still _ totally unimodular and the ranks of @xmath140 and @xmath142 are the same as they were with the use of the single zero variable @xmath42 .",
    "this is because any non - singular sub - matrix of @xmath96 must include exactly one of the columns corresponding to @xmath231 and @xmath232 , since they are negations of each other .",
    "therefore , the values of @xmath31 and @xmath32 used in the proof of theorem  [ thm : main - bound ] are those for the system  ( [ eqn : ineq - system - probdef ] ) .",
    "thus , if we use the transformation method of replacing @xmath43 with @xmath227 , the values of @xmath31 and @xmath32 used in the statement of theorem  [ thm : main - bound ] are those for the system  ( [ eqn : ineq - system - probdef ] ) .",
    "note , however , that by replacing @xmath43 with @xmath227 , the number of variables in the problem doubles , and in particular , the number of input variables in the sat - encoding is doubled .",
    "this is rather undesirable .",
    "fortunately , there are two solutions that avoid the doubling of variables at the minor cost of only @xmath12 extra bit per variable .    1 .",
    "the first solution is based on the following proposition that mirrors proposition  [ thm : sol - enum - bound ] .",
    "+ a solution bound @xmath67 for system  ( [ eqn : ineq - nz - system - probdef] ) is an enumeration bound for system  ( [ eqn : ineq - system - probdef ] ) .",
    "[ thm : sol - enum - bound2 ] + given a solution @xmath68 within the solution bound @xmath63 to system  ( [ eqn : ineq - nz - system - probdef] ) , we construct a solution @xmath69 to system  ( [ eqn : ineq - system - probdef ] ) by setting @xmath233 .",
    "clearly , @xmath74 $ ] for all @xmath75 .",
    "+ thus , we can restrict our search to the hypercube @xmath65 $ ] , where the solution bound @xmath63 is computed using the values of @xmath31 and @xmath32 for the system  ( [ eqn : ineq - system - probdef ] ) .",
    "the second solution uses the following proposition showing that we can use the technique of adding a zero variable @xmath42 and the values of @xmath31 and @xmath32 for the system  ( [ eqn : ineq - system - probdef ] ) , while paying only a minor penalty of @xmath12 extra bit per variable .",
    "+ suppose @xmath67 is a solution bound such that system  ( [ eqn : ineq - nz - system - probdef] ) has a solution in @xmath73 $ ] iff system  ( [ eqn : ineq - system - probdef ] ) is feasible .",
    "then , system  ( [ eqn : ineq - nz - system - probdef ] ) has a solution in @xmath234 $ ] iff system  ( [ eqn : ineq - nz - system - probdef] ) has a solution in @xmath73 $ ] . + _",
    "( if part ) _ : suppose system  ( [ eqn : ineq - nz - system - probdef] ) has a solution in @xmath73 $ ] ; i.e. , @xmath235 $ ] for all @xmath75 .",
    "then , we construct a satisfying assignment to system  ( [ eqn : ineq - nz - system - probdef ] ) as follows : * @xmath42 is assigned the value @xmath236 .",
    "* @xmath89 , for @xmath237 , is assigned the value @xmath238 .",
    "+ since @xmath239 , we can conclude that @xmath240 for all @xmath75 .",
    "it is easy to see that the resulting assignment satisfies system  ( [ eqn : ineq - nz - system - probdef ] ) .",
    "( only if part ) _ : suppose system  ( [ eqn : ineq - nz - system - probdef ] ) has a solution in @xmath234 $ ] .",
    "this means that the original system  ( [ eqn : ineq - system - probdef ] ) is feasible .",
    "it follows that system  ( [ eqn : ineq - nz - system - probdef] ) has a solution in @xmath73 $ ] .    in both solutions",
    ", we must search @xmath241 values for each variable @xmath89 , @xmath242 .",
    "however , the former avoids the need to add @xmath42 , and hence will have fewer input variables in the sat - encoding .",
    "hence , the former solution is preferable .",
    "the reader must note , though , that this optimization is only relevant when the introduction of the zero variable ( significantly ) affects the value of @xmath243 .",
    "( the impact on @xmath31 is minor . )",
    "if the value of @xmath243 is unaffected by the introduction of the zero variable @xmath42 , using @xmath42 can result in a more compact sat - encoding than using an enumeration domain of @xmath66 $ ] for each variable .",
    "if one uses the @xmath42 variable , one introduces @xmath244 input boolean variables for @xmath42 in the sat - encoding .",
    "on the other hand , without the @xmath42 variable , one introduces @xmath14 additional boolean variables to encode sign bits .",
    "the relative size of the sat - encoding , and hence the decision to introduce @xmath42 , would depend on whether @xmath14 significantly exceeds @xmath244 .",
    "there is a simpler optimization which we have found to be useful in practice .    in the proof of theorem  [ thm : main - bound ] , in deriving the @xmath245 term , we have assumed the worst - case scenario of each term in the determinant expansion equaling @xmath152 and there being @xmath31 terms to choose from in each row .",
    "in fact , we can replace @xmath152 with @xmath246 , where @xmath247 denotes the largest coefficient in row @xmath125 , in absolute value .",
    "similarly , @xmath153 can be replaced with @xmath248 , where @xmath249 is the width of constraint @xmath125 .",
    "for some formulas , the value of @xmath33 is very large due to the presence of a single large constant ( or very few of them ) . in such cases , a less conservative analysis or other problem transformations",
    "are useful .",
    "we present two such techniques here .",
    "it is easy to see that , in the proof of theorem  [ thm : main - bound ] , the @xmath105 term can be replaced by @xmath251 , where @xmath252 are the @xmath250 largest elements of @xmath38 in absolute value .",
    "similarly , the expression for @xmath81 derived in theorem  [ thm : disj - bound ] gets modified to @xmath253    like the optimization of section  [ sec : large - coeff - simple ] , this has also proved fairly useful in practice .",
    "another transformation that can be useful for dealing with large constant terms is to replace a variable @xmath89 by @xmath254 ; this corresponds to shifting the origin in @xmath255 by @xmath256 along the @xmath89-axis .    the @xmath6 constraint is then transformed into @xmath257 . rewriting this",
    ", we obtain the form @xmath258 , where @xmath259 .",
    "the new value of @xmath33 , after the transformation , is @xmath260 .",
    "therefore , we wish to find values of @xmath256s so as to minimize the value of @xmath260",
    ".    this problem can be phrased as the following integer linear program : @xmath261 this ilp has @xmath207 variables and @xmath262 constraints ( including the non - negativity constraint on @xmath263 ) .",
    "in fact , one can write one such ilp for each variable class , since they do not share any variables or constraints . then , the optimum value for each class will indicate the new value of @xmath33 to use for that class .",
    "we used the bound derived in the previous section to implement a decision procedure based on finite instantiation .",
    "the procedure starts by analyzing the formula to obtain parameters , and computes the solution bound .",
    "we found that the optimizations of section  [ sec : var - classes ] , [ sec : spl - case - bounds ] , and  [ sec : coeff - zero - var - opt ] are always useful , especially since formulas tend to contain many variables classes comprising of only difference constraints .",
    "hence , our base - line implementation always includes these optimizations .",
    "the impact of other optimizations is reported in section  [ sec : results - opts ] .",
    "given the solution bound , integer variables in the qfp formula are encoded as symbolic bit - vectors large enough to express any integer value within the bound .",
    "arithmetic operators are implemented as arbitrary - precision bit - vector arithmetic operations .",
    "equalities and inequalities over integer expressions are translated to corresponding relations over bit - vector expressions .",
    "the resulting boolean formula is passed as input to a sat solver .",
    "we implemented our procedure as part of the uclid verifier  @xcite , which is written in moscow ml  @xcite . in our implementation",
    "we used the zchaff sat solver  @xcite version 2004.5.13 . in the sequel",
    ", we will refer to our decision procedure as the `` uclid '' procedure .",
    "we report here on a series of experiments we performed to evaluate our decision procedure against other theorem provers , as well as to assess the impact of the various optimizations discussed in section  [ sec : enhancements ] .",
    "all experiments were performed on a pentium - iv @xmath264 ghz machine with @xmath12 gb of ram running linux .",
    "a timeout of @xmath265 seconds ( @xmath12 hour ) was imposed on each run .      for benchmarks",
    ", we used @xmath266 formulas from the wisconsin safety analyzer ( wisa ) project on checking format string vulnerabilities , and @xmath10 generated by the blast software model checker .",
    "the benchmarks include both satisfiable and unsatisfiable formulas in an extension of qfp with uninterpreted functions .",
    "uninterpreted functions were first eliminated using ackermann s technique  @xcite , is translated to the function - free formula @xmath267 . ] and the decision procedures were run on the resulting qfp formula .",
    "some characteristics of the formulas are displayed in table  [ tbl : benchmarks ] .",
    "for each formula , we indicate whether it is satisfiable or not .",
    "we give the values of parameters @xmath14 , @xmath13 , @xmath30 , @xmath31 , @xmath32 and @xmath33 corresponding to the variable class for which @xmath268 \\rceil$ ] is largest ,",
    "i.e , for which we need the largest number of bits per variable .",
    "the values of the parameters for the overall formula are also given ( although these are not used in computing @xmath19 for any variable class ) ; thus , the values of @xmath13 and @xmath14 in these columns are the _ total _ numbers of variables and constraints for the entire formula .",
    "the top @xmath266 formulas listed in the table are from the wisa project",
    ". one key characteristic of these formulas is that they involve a significant number of boolean operators ( @xmath3 , @xmath4 , @xmath5 ) , and in particular there is a lot of alternation of @xmath3 and @xmath4 .",
    "the other important characteristic of these benchmarks is that , although they vary in @xmath14 , @xmath13 , and @xmath33 , the values of @xmath30 , @xmath31 , and @xmath32 are fixed at a small value .",
    "three formulas from the blast suite are listed at the bottom of table  [ tbl : benchmarks ] .",
    "all these formulas are unsatisfiable .",
    "each formula is a conjunction of two sub - formulae : a large conjunction of linear constraints , and a conjunction of congruence constraints generated by ackermann s function elimination method .",
    "thus , there is only one alternation of @xmath3 and @xmath4 in these formulas .",
    "& & @xmath14 & @xmath13 & @xmath30 & @xmath31 & @xmath32 & @xmath33 & @xmath19 & @xmath14 & @xmath13 & @xmath30 & @xmath31 & @xmath32 & @xmath33 +    s-20 - 20 & sat & 28 & 263 & 5 & 4 & 4 & 21 & 36 & 64 & 550 & 5 & 4 & 4 & 255 + s-20 - 30 & sat & 28 & 263 & 5 & 4 & 4 & 30 & 36 & 64 & 550 & 5 & 4 & 4 & 255 + s-20 - 40 & uns & 28 & 263 & 5 & 4 & 4 & 40 & 37 & 64 & 550 & 5 & 4 & 4 & 255 + s-30 - 30 & sat & 38 & 383 & 5 & 4 & 4 & 31 & 37 & 82 & 800 & 5 & 4 & 4 & 255 + s-30 - 40 & sat & 38 & 383 & 5 & 4 & 4 & 40 & 37 & 82 & 800 & 5 & 4 & 4 & 255 + xs-20 - 20 & sat & 49 & 323 & 5 & 4 & 4 & 21 & 37 & 84 & 632 & 5 & 4 & 4 & 255 + xs-20 - 30 & sat & 49 & 323 & 5 & 4 & 4 & 30 & 38 & 84 & 632 & 5 & 4 & 4 & 255 + xs-20 - 40 & uns & 49 & 323 & 5 & 4 & 4 & 40 & 38 & 84 & 632 & 5 & 4 & 4 & 255 + xs-30 - 30 & sat & 69 & 473 & 5 & 4 & 4 & 31 & 39 & 114 & 922 & 5 & 4 & 4 & 255 + xs-30 - 40 & sat & 69 & 473 & 5 & 4 & 4 & 40 & 39 & 114 & 922 & 5 & 4 & 4 & 255 +    blast - tl2 & uns & 54 & 67 & 7 & 3 & 1 & 0 & 24 & 145 & 274 & 7 & 3 & 1 & 128 + blast - tl3 & uns & 201 & 2669 & 19 & 6 & 1 & 15 & 70 & 260 & 2986 & 19 & 6 & 1 & 128 + blast - f8 & uns & 255 & 6087 & 0 & 2 & 1 & 2560 & 20 & 321 & 7224 & 0 & 2 & 1 & 2560 +      in this section , we discuss the impact of optimizations discussed in sections  [ sec : large - coeff ] and  [ sec : large - constterm ] .    table  [ tbl : results - opts ] compares the following @xmath269 different encoding options based on different ways of computing the solution bound :    * the base - line method of computing the solution bound . * using the optimization of section  [ sec : large - coeff - simple ] alone .",
    "* using the optimization of section  [ sec : large - constterm - simple ] alone . * using optimization methods of both sections  [ sec : large - coeff - simple ] and  [ sec : large - constterm - simple ] .",
    "the comparison is made with respect to the largest number of bits needed for any variable class , and the run - times for both generating the sat - encoding and for sat solving .    first , we note that and both generate more compact encodings than ; on the wisa benchmarks , they use about @xmath270-@xmath266 fewer bits per variable in the largest variable class .",
    "the reduction in the total number of bits , summed over all variables in all variable classes , is similar , since most variables fall into a single class .",
    "the encoding times decrease with reduction in number of bits ; this is just as one would predict .",
    "however , the comparison of sat solving times is more mixed ; on a few benchmarks and outperform , and on others , they do worse .",
    "the latter behavior is observed especially on satisfiable formulas .",
    "the reason for this appears to be a relative ease in finding larger solutions for those formulas than finding smaller solutions .    when and are both used ( indicated as `` '' ) , we find that not only are encoding times smaller than the technique , but sat solving times are also smaller in all cases .",
    "this seems to indicate that a reduction in sat - encoding size beyond a certain limit overcomes any negative effects of restricting the search to smaller solutions .",
    "we also performed an experiment to explore the use of the _ shift - of - origin _ optimization described in section  [ sec : shift - of - origin ] .",
    "uclid automatically formulated the ilp and solved it using the cplex optimization tool  @xcite ( version 8.1 ) .",
    "since none of the benchmarks listed in table  [ tbl : benchmarks ] have especially large constants , we used a different , unsatisfiable formula from the blast suite which has only difference constraints , but with large constants .",
    "table  [ tbl : shift - of - origin ] summarizes the key characteristics of this formula as well as the results obtained by comparing versions of the base - line ( ) implementation with and without the optimization enabled .",
    "we list the values of parameters , with and without the shift - of - origin optimization enabled , for the variable classes that yield the two largest values of @xmath19 when the optimization is disabled .",
    "enabled ? & @xmath14 & @xmath13 & @xmath33 & @xmath19 & @xmath14 & @xmath13 & @xmath33 & @xmath19 & # bits & enc . & sat +    no & 230 & 6417 & 2162688 & 29 & 2 & 2 & 261133242 & 28 & 7510 & 24.68 & 0.70 + yes & 230 & 6417 & 432539 & 27 & 2 & 2 & 0 & 1 & 6833 & 25.78 & 0.71 +    with the optimization turned on , the largest constant in the _ entire _ formula falls from @xmath271 to @xmath272 , a @xmath273-fold reduction .",
    "however , if we restrict our attention to the largest variable class , comprising @xmath274 variables , the reduction in @xmath33 is more modest , about a factor of @xmath269 .",
    "this yields a saving of @xmath264 bits per variable for that variable class .",
    "the saving in the total number of bits , summed over all variable classes , is @xmath275 .",
    "this is , however , not large enough to reduce either the encoding time or the sat time .",
    "in fact , the encoding time increases by about a second ; this is the time required to run cplex and for the processing overhead of creating the ilp .",
    "even though the shift - of - origin optimization has not resulted in faster run - times in our experiments , it clearly has the potential to greatly reduce the number of bits , and might prove useful on other benchmarks .",
    "we compared uclid s performance with that of the sat - based provers ics  @xcite ( version 2.0 ) and cvc - lite  @xcite ( the new implementation of cvc , version 2.0.0 ) , as well as the automata - based procedure lash  @xcite ( version 0.9 ) .",
    "while cvc - lite and lash are sound and complete for qfp , ics 2.0 is incomplete ; i.e. , it can report a formula to be satisfiable when it is not .",
    "the ground decision procedure ics uses is the simplex linear programming algorithm with some additional heuristics to deal with integer variables .",
    "however , in our experiments , both uclid and ics returned the same answer whenever ics terminated within the timeout .",
    "the ground decision procedure for cvc - lite is a proof - producing variant of the omega test  @xcite .",
    "lash was unable to complete on any benchmark within the timeout since it was unable to construct the corresponding automaton ; we attribute this to the relatively large number of variables and constraints in our formulas , and note that ganesh et al . obtained similar results in their study  @xcite .     & & & # ( inc . & & total time + & & enc . & sat & total & assn . ) & ground & total & ( sec . )",
    "+ s-20 - 20 & sat & 0.73 & 0.20 & 0.93 & 904 & 23.32 & 23.76 & 1.45 + s-20 - 30 & sat & 0.76 & 0.36 & 1.12 & 1887 & 51.68 & 52.29 & 1.73 + s-20 - 40 & uns & 0.73 & 0.39 & 1.12 & 25776 & 658.01 & 669.99 & * + s-30 - 30 & sat & 1.13 & 0.63 & 1.76 & 2286 & 268.21 & 269.42 & 3.83 + s-30 - 40 & sat & 1.13 & 1.08 & 2.21 & 14604 & 1621.27 & 1625.15 & 4.28 + xs-20 - 20 & sat & 1.04 & 0.31 & 1.35 & 2307 & 97.21 & 98.32 & 1.78 + xs-20 - 30 & sat & 1.08 & 0.69 & 1.77 & 33103 & 1519.77 & 1540.27 & 2.04 + xs-20 - 40 & uns & 1.09 & 2.80 & 3.89 & 97427 & 3468.91 & * & * + xs-30 - 30 & sat & 1.57 & 0.88 & 2.45 & 72585 & 3287.47 & * & 4.90 + xs-30 - 40 & sat & 1.61 & 1.55 & 3.16 & 33754 & 3082.34 & * & 4.36 +    blast - tl2 & uns & 0.50 & 0.01 & 0.51 & 1 & 0.01 & 0.01 & 0.15 + blast - tl3 & uns & 16.94 & 0.49 & 17.43 & 0 & 0.00 & 0.01 & 2.66 + blast - f8 & uns & 10.36 & 0.96 & 11.32 & 1 & 0.01 & 0.05 & 14.55 +    a comparison of uclid versus ics and cvc - lite is displayed in table  [ tbl : results ] . from table  [ tbl : results ] , we observe that uclid outperforms ics on all the wisa benchmarks , terminating within a few seconds on each one .",
    "however , ics performs best on the blast formulas , finishing within a fraction of a second on all .",
    "cvc - lite runs much faster than ics on the satisfiable wisa formulas , but does not finish on either of the unsatisfiable wisa formulas , and does not outperform uclid on any of the wisa benchmarks .",
    "however , it outperforms uclid on one of the blast formulas .",
    "due to the unavailability of statistics on where cvc - lite spends its time , we can only present a detailed comparison between uclid and ics here .",
    "we believe that cvc - lite s superior performance to ics on satisfiable formulas is mainly due to improved boolean simplification heuristics and , to a lesser extent , due to a faster ground decision procedure . the better performance compared to uclid on one of the blast formulas",
    "is because that formula is propositionally unsatisfiable , as we will discuss in more detail below .",
    "let us consider the wisa benchmarks first .",
    "these formulas have a non - trivial boolean structure that requires ics to enumerate many inconsistent boolean assignments before being able to decide the formula .",
    "the ics run - time is dominated by the time taken by the ground decision procedure .",
    "we observe that the number of inconsistent boolean assignments alone is not a precise indicator of total run - time , which also depends on the time taken by the ground decision procedure in ruling out a single boolean assignment .",
    "further optimization of ics s ground decision procedure might improve its overall run - time , at least on the satisfiable formulas .",
    "+ @xmath57 the reason for uclid s superior performance is the formula structure , where @xmath30 , @xmath31 , and @xmath32 remain fixed at a low value while @xmath13 , @xmath14 , and @xmath33 increase .",
    "thus , the maximum number of bits per variable stays about the same even as @xmath13 increases substantially , and the resulting sat problem is within the capacity of zchaff .",
    "the times for both encoding and sat solving phases are small .",
    "in particular , the small sat solving time on the unsatisfiable instances indicates that the proof of unsatisfiability is also small .    next ,",
    "consider the results on the blast formulas .",
    "the reason for ics s superior performance on these can be gauged by the number of inconsistent boolean assignments it has to enumerate . on the formula named `` blast - tl3 '' , purely boolean reasoning suffices to decide unsatisfiability . for the other two formulas ,",
    "the reason for unsatisfiability is a mutually - inconsistent subset amongst all the linear constraints that are conjoined together , and a single call to ics s ground decision procedure suffices to infer the inconsistency . in all three cases , the `` proof of unsatisfiability '' that ics must find is small .",
    "+ @xmath57 on the other hand , uclid s run - time is dominated by the encoding time .",
    "once the encoding is generated , the sat solver decides unsatisfiability easily .    to summarize",
    ", it appears that decision procedures like ics and cvc - lite , which are based on a lazy translation to sat , are effective when the formula structure is such that only a few calls to the ground decision procedure are required ( i.e. , satisfiable solutions are easy to find , or the proof of unsatisfiability is shallow ) , and the ground decision procedure is itself efficient .",
    "uclid performs better on formulas with complicated boolean structure and comprising linear constraints with the sparse structure formalized in this paper .",
    "in this paper , we have presented a formal approach to exploiting the `` sparse , mainly difference constraint '' nature of quantifier - free presburger formulas encountered in software verification .",
    "our approach is based on formalizing this sparse structure using new parameters , and deriving a new parameterized bound on satisfying solutions to qfp formulas .",
    "we have also proposed several ways in which the bound can be reduced in practice .",
    "experimental results show the benefits of using the derived bound in a sat - based decision procedure based on finite instantiation .",
    "the work described in this paper can be extended in a few new directions .",
    "some of these are discussed below .      in our implementation , we compute a conservative bound and translate a qfp formula to a boolean formula in a single step .",
    "an alternative approach is to perform this transformation _",
    "lazily _ , increasing the solution bound `` on demand '' .",
    "one such lazy encoding approach works , in brief , as follows .",
    "( details can be found in the paper by kroening et al .",
    "@xcite . )",
    "we start with an encoding size for each integer variable that is smaller than that prescribed by the conservative bound ( say , @xmath12 bit per variable ) .",
    "if the resulting boolean formula is satisfiable , so is the original qfp formula . if not , the proof of unsatisfiability generated by the sat solver is used to generate a sound abstraction of the original formula , which can be checked with a sound and complete decision procedure for qfp ( such as the one proposed in this paper ) .",
    "if this decision procedure concludes that the abstraction is unsatisfiable , so is the original formula , but if not , it provides a counterexample which indicates the necessary increase in the encoding size .",
    "a new sat - encoding is generated , and the procedure repeats .",
    "the bound @xmath19 on solution size that we derive in this paper implies an upper bound @xmath276 on the number of iterations of this lazy encoding procedure ; thus the lazy encoding procedure needs only polynomially many iterations before it terminates with the correct answer .",
    "the potential advantage of this lazy approach is two - fold : ( 1 ) it avoids using the conservative bounds we have derived in this paper , and ( 2 ) if the generated abstractions are small , the sound and complete decision procedure used by this approach will run much faster than if it were fed the original formula .    for the wisa benchmarks discussed in section  [ sec : results ]",
    ", we found that a solution bound of @xmath277 , i.e. , @xmath278 bits per variable , is sufficient to decide satisfiability .",
    "however , the time required to derive this bound using the method of  @xcite is much greater than the run - times we report in section  [ sec : results ] .",
    "still , the lazy approach might prove especially useful in cases in which @xmath19 is so large that the sat problem is outside the reach of current sat solvers .      in section  [ sec : spl - case - bounds ]",
    ", we saw that if all linear constraints are difference constraints , a tighter solution bound can be used .",
    "recently , we have derived a tighter bound for a special class of constraints that is a superset of difference constraints .",
    "constraints in this class refer to at most two variables ( @xmath279 ) , and all variable coefficients are in @xmath101 ( i.e. , @xmath280 ) . these constraints are referred to in literature as either _",
    "generalized 2sat constraints _ or _ unit two - variable per inequality _ constraints . for this special case",
    ", we have derived a solution bound of @xmath281  @xcite , exactly twice the bound for difference logic .",
    "the proof techniques for deriving this bound are quite different from those used in this paper",
    ".    it would be interesting to find other special constraint classes for which the bounds presented in this paper can be further tightened .      as we have observed in section  [ sec : results ] , the impact of reduction of number of bits on the sat solving time is not always predictable .",
    "we are currently trying to better understand the reasons for this .",
    "encoding to sat is not the only way in which the bounds presented in this paper can be used",
    ". it would be interesting to explore non - sat - based decision procedures based on the bounds we derive .",
    "the theoretical results of this paper rest heavily on the bound @xmath282 given by borosh , treybig , and flahive , stated in theorem  [ thm : borosh - treybig ] . in their 1992 paper",
    "@xcite , borosh and treybig conjectured that this bound can be improved to just @xmath81 . to our knowledge , this conjecture is still open .    finally , it would also be interesting to apply our work to areas outside of software verification that share the special structure of linear constraints exploited in this paper .",
    "we are grateful to jol ouaknine for his inputs and a careful reading of the proofs , and to ofer strichman and k. subramani for valuable discussions .",
    "we thank sagar chaki , michael ernst , vinod ganapathy , somesh jha , ranjit jhala , and stephen mccamant for providing us with benchmark formulas .",
    "we also thank sergey berezin , leonardo de moura , and louis latour for help with cvc - lite , ics , and lash respectively .",
    "this research was supported in part by aro grant daad19 - 01 - 1 - 0485 .            c.  barrett , d.  l. dill , and a.  stump .",
    "checking satisfiability of first - order formulas by incremental translation to sat . in e.",
    "brinksma and k.  g. larsen , editors , _ proc .",
    "14th intl .",
    "conference on computer - aided verification ( cav02 ) _ , lncs 2404 , pages 236249 .",
    "springer - verlag , july 2002 .",
    "s.  berezin , v.  ganesh , and d.  l. dill .",
    "an online proof - producing decision procedure for mixed - integer linear arithmetic . in _ proc .",
    "tools and algorithms for the construction and analysis of systems ( tacas03 ) _ , lncs 2619 , pages 521536 , april 2003 .",
    "r.  e. bryant , s.  k. lahiri , and s.  a. seshia . modeling and verifying systems using a logic of counter arithmetic with lambda expressions and uninterpreted functions . in e.",
    "brinksma and k.  g. larsen , editors , _ proc .",
    "computer - aided verification ( cav02 ) _ , lncs 2404 , pages 7892 , july 2002 .",
    "sagar chaki , edmund  m. clarke , alex groce , somesh jha , and helmut veith . modular verification of software components in c. in _ proc .",
    "25th international conference on software engineering ( icse ) _",
    ", pages 385395 , 2003 .",
    "leonardo de  moura , harald rue , and maria sorea .",
    "lazy theorem proving for bounded model checking over infinite domains . in _ proc .",
    "18th international conference on automated deduction ( cade ) _ , pages 438455 , 2002 .",
    "v.  ganesh , s.  berezin , and d.  l. dill .",
    "deciding presburger arithmetic by model checking and comparisons with other methods . in _",
    "formal methods in computer - aided design ( fmcad 02 ) _ , lncs 2517 , pages 171186 .",
    "springer - verlag , november 2002 .",
    "r.  kannan and c.  l. monma . on the computational complexity of integer programming problems . in _ optimisation and operations research _ ,",
    "volume 157 of _ lecture notes in economics and mathematical systems _ ,",
    "pages 161172 .",
    "springer - verlag , 1978 .",
    "daniel kroening , jol ouaknine , sanjit  a. seshia , and ofer strichman .",
    "abstraction - based satisfiability solving of presburger arithmetic . in _ proc .",
    "16th international conference on computer - aided verification ( cav ) _ , pages 308320 , july 2004 .",
    "stephen mccamant and michael  d. ernst .",
    "predicting problems caused by component upgrades . in _ proceedings of the 11th acm",
    "sigsoft symposium on foundations of software engineering ( fse ) _ , pages 287296 , 2003 .",
    "a.  pnueli , y.  rodeh , o.  shtrichman , and m.  siegel .",
    "deciding equality formulas by small - domain instantiations . in n.",
    "halbwachs and d.  peled , editors , _ computer - aided verification _ , volume 1633 of _ lecture notes in computer science _ , pages 455469 .",
    "springer - verlag , july 1999 .",
    "o.  strichman , s.  a. seshia , and r.  e. bryant .",
    "deciding separation formulas with sat . in e.",
    "brinksma and k.  g. larsen , editors , _ proc .",
    "14th intl .",
    "conference on computer - aided verification ( cav02 ) _ , lncs 2404 , pages 209222 .",
    "springer - verlag , july 2002 .",
    "steven  a. wolfman and daniel  s. weld . the lpsat engine and its application to resource planning . in _ proceedings of the international joint conference in artificial intelligence ( ijcai ) _ ,",
    "pages 310317 , 1999 ."
  ],
  "abstract_text": [
    "<S> given a formula in quantifier - free presburger arithmetic , if it has a satisfying solution , there is one whose size , measured in bits , is polynomially bounded in the size of the formula . in this paper </S>",
    "<S> , we consider a special class of quantifier - free presburger formulas in which most linear constraints are difference ( separation ) constraints , and the non - difference constraints are sparse . this class has been observed to commonly occur in software verification . </S>",
    "<S> we derive a new solution bound in terms of parameters characterizing the sparseness of linear constraints and the number of non - difference constraints , in addition to traditional measures of formula size . </S>",
    "<S> in particular , we show that the number of bits needed per integer variable is linear in the number of non - difference constraints and logarithmic in the number and size of non - zero coefficients in them , but is otherwise independent of the total number of linear constraints in the formula . </S>",
    "<S> the derived bound can be used in a decision procedure based on instantiating integer variables over a finite domain and translating the input quantifier - free presburger formula to an equi - satisfiable boolean formula , which is then checked using a boolean satisfiability solver . </S>",
    "<S> in addition to our main theoretical result , we discuss several optimizations for deriving tighter bounds in practice . </S>",
    "<S> empirical evidence indicates that our decision procedure can greatly outperform other decision procedures . </S>"
  ]
}