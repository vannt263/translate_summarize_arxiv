{
  "article_text": [
    "let @xmath0 be a finite alphabet and let @xmath1 be an enumerable set of @xmath0-strings . consider all biinfinite @xmath0-sequences ( i.e. , mappings of type @xmath2 ) that do not contain substrings from @xmath1 .",
    "the set of these sequences is effectively closed ( its complement is a union of an enumerable set of intervals in cantor topology ) and invariant under ( left and right ) shifts .",
    "sets constructed in this way are called _ effectively closed 1d subshifts . _",
    "effectively closed 2d subshifts are defined in a similar way ; instead of biinfinite sequences we have configurations , i.e. , mappings of type @xmath3 , and instead of forbidden strings we have forbidden patterns ( rectangles filled with @xmath0-letters ) .",
    "given the set @xmath1 of forbidden patterns , we consider the set of all configurations where no elements of @xmath1 appear .",
    "this set of configurations is closed under vertical and horizontal shifts . if @xmath1 is enumerable , we get _ effectively closed 2d subshifts _ ; if @xmath1 is finite , we get _ 2d subshifts of finite type . _",
    "2d subshifts of finite type are closely related to tilings .",
    "a _ tile _ is a square with colored sides ( colors are taken from some finite set @xmath4 ) .",
    "tile set _ is a set of tiles , i.e. , a subset of @xmath5 , since each tile is determined by four colors ( upper , lower , left , and right ) . for a tile set @xmath6",
    ", we consider all _ @xmath6-tilings _ , i.e. , the tilings of the entire plane by translated copies of @xmath6-tiles with matching colors .    tilings can be considered as a special case of 2d subshifts of finite type .",
    "indeed , subshift is governed by local rules ( forbidden pattern say what is not allowed according to these rules ) . in tilings",
    "the rules are extremely local : they say that the neighbor tiles should have matching colors , i.e. , @xmath7 rectangles where the colors do not match , are forbidden .",
    "so every tile set determines a subshift of finite type ( the alphabet is a tile set ) .",
    "the reverse statement is also true if we allow the extension of an alphabet .",
    "( it is natural since we have to simulate any local rule by a more restricted class of matching rules . ) formally , for every alphabet @xmath0 and subshift @xmath8 of finite type we can find :     a set of colors @xmath4 ;    a tile set @xmath9 ;    a mapping @xmath10    such that every @xmath6-tiling after applying @xmath11 to each tile becomes an element of @xmath8 and every element of @xmath8 can be obtained in this way from some @xmath6-tiling .",
    "such a correspondence between tilings and subshifts of finite type works in any dimension : @xmath12-dimensional tilings correspond to @xmath12-dimensional subshifts of finite type ( modulo the alphabet extension ) .",
    "now we want to compare subshifts in different dimensions .",
    "let @xmath8 be a 1d subshift .",
    "we can make a 2d subshift from it by copying each letter vertically .",
    "it is easy to see that an effectively closed 1d subshift becomes an effectively closed 2d subshift ( we use rules that guarantee the vertical propagation , i.e. , require that vertical neighbors should have the same letter , and the rules of the original 1d subshift in horizontal direction ) .",
    "this 2d shift , denoted by @xmath13 , is not of finite type , if the original 1d shift was not of finite type .",
    "however , @xmath13 is _ sofic _ , i.e. , is a projection by a subshift of finite type in extended alphabet :    [ hochman ] for every effectively closed 1d subshift @xmath8 in alphabet @xmath0 there exists an alphabet @xmath14 , a finite @xmath15 subshift @xmath16 in alphabet @xmath14 , and a mapping @xmath17 such that the image of @xmath16 under @xmath11 ( applied in each place ) is @xmath13 .",
    "this theorem ( with 3d instead of 2d , which makes it easier ) was proved by michael hochman  @xcite who asked whether the same is true for 2d .",
    "his motivation came from ergodic theory .",
    "it turned out that the tools needed to prove theorem  [ hochman ] for 2d tilings were already developed in the framework of tilings theory when hochman asked his question .",
    "moreover , there are two different sets of tools that can be used ; one was used by nathalie aubrun and mathieu sablik  @xcite ( and goes back to leonid levin  @xcite ) , the other one was used in  @xcite ( and goes back to peter gcs  @xcite ) . in the sequel",
    "we discuss informally how these tools work , and what are the similarities and the differences .",
    "let us describe informally our problem .",
    "in 2d we have local rules that guarantee that each vertical line contains some letter . we need to add some other rules to guarantee that the emerging horizontal sequence of letters does not have substrings from some enumerable set @xmath1 .",
    "we are allowed to superimpose additional structure to the configuration ( by extending the alphabet : we let @xmath14 be a product of @xmath0 and some other finite set )",
    ". rules for this extended configuration should guarantee that its base belongs to @xmath13 .",
    "so we need to run a computation that generates @xmath1 and some process that compares generated elements with substrings in the horizontal sequence .",
    "it is well known ( since the first papers of wang  @xcite where the notion of a tile set was introduced ) that tile sets can simulate computation easily : indeed , a time - space diagram of a turing machine ( or a cellular automaton ) obeys local rules that guarantee that computation is performed correctly when started .",
    "the problem is to initiate the computation : there is no special point in the plane where the computation can be started , so we need to `` break the translational symmetry '' somehow .",
    "this problem was solved by berger  @xcite who proved that there exists an aperiodic tile set , i.e. , a tile set @xmath6 such that @xmath6-tilings exist but all are aperiodic .",
    "( a tiling is _ periodic _ if there is a non - zero translation that does not change it .",
    "one can show that if a tile set has a periodic tiling then it has a @xmath18-periodic tiling where some finite block is repeated horizontally and vertically . )",
    "berger used a complicated multi - level construction that was later simplified in different ways by robinson  @xcite and others .",
    "the simplification made clear that berger s construction is essentially based on self - similarity : any tiling can be divided into blocks that behave like individual tiles .",
    "( in the original construction this similarity was obscured by some irregularities ; the cleaned versions could be found in  @xcite or  @xcite . )",
    "this self - similarity creates some kind of a skeleton that can be used to initiate computations .",
    "however , the problem is that we necessarily initiate them in many different places , and these `` geometrically parallel '' computation should be organized to achieve some goal .",
    "berger used them to prove the undecidability of the domino problem ( to determine whether a given tile set has at least one tiling ) ; for that purpose it is enough to initiate multiple copies of the same computation : all are limited in time and space , but among them there are computations of arbitrary length . for that we split the plane into different zones used for different computations .",
    "it is possible to find such an arrangement ; in each zone the standard local rules for a computation are used but zones are not contiguous .",
    "so we need additional efforts to transmit the information from one zone to another one .",
    "this all can be done ( with limited overlap , so the total density of information in a given cell remains finite ) .",
    "then hanf  @xcite and myers  @xcite proved that there are tile sets that admit only non - recursive tilings ( a much stronger statement than the existence of an aperiodic tile set ) .",
    "this was done by embedding a separation problem for two inseparable enumerable sets , and for this we need that all the parallel computations not only share the same ( finite ) program , but also share the same ( infinite ) input .",
    "therefore , some additional machinery is needed to synchronize the inputs of all the computations ( each computation gets a finite part of the infinite input sequence , but these finite parts are consistent pieces of an infinite input ) .",
    "when simulating 1d effectively closed subshift , we need more : the input is given to us externally ( the contents of the vertical lines that carry @xmath0-letters ) and we need to check this input against all possible forbidden substrings .",
    "this means that we are very limited in space ( and can not distribute pieces of input sparsely over the entire plane as before ) .",
    "the way to do this was developed in  @xcite . at each level of self - similarity",
    "we have _ computation squares _ that are arranged in _",
    "computational stripes_. such a stripe is infinite in vertical direction and carries an infinite computation of a finite - space cellular automaton .",
    "( one can wonder whether it makes sense to have an infinite computation in a finite space .",
    "indeed , it is not really infinite ; it runs for some time ( exponential in the width of the stripe ) and then is restarted .",
    "the repeated computations are not necessarily identical , since they interact with the other computations which could be different . )",
    "each stripe performs some checks for the part of the horizontal sequence that is near it . when the level ( and the size of the stripe ) increases , the checked zone and the time allowed for the computation increase .",
    "working together , the stripes can check the horizontal sequence against all forbidded substrings .    in",
    "@xcite this technique was used for one specific 1d effectively closed subshift with a binary alphabet ( for some fixed @xmath19 we forbid all sufficiently long strings whose kolmogorov complexity is less than @xmath20 times length ) . however , this technique is quite general and can be used for any 1d effectively close subshift modulo some technical problem .",
    "this technical problem is that the underlying self - similar structure may be `` degenerate '' in the sense that the plane is divided in two parts that have no common ancestors . in this case",
    "we need some additional tricks ( extending the zone of responsibility of each stripe ) that were not needed for the specific subshift of  @xcite .",
    "the reason why they were not needed : if a string of low complexity ( compared to length ) is split into two parts , one of then has low complexity , too .",
    "there is a different way to organize the computations that uses fixed - point self - similar tiling .",
    "the idea of a self - similar fixed - point tile set can be explained as follows .",
    "we already know ( since wang papers ) that tiling can be used to simulate computations .",
    "this computation , in its turn , can be used to guarantee the desired behavior of bigger blocks , called _ macro - tiles_. so for a desired behavior of macro - tiles we can construct tiling rules ( i.e. , tile set ) that guarantees this behavior . if , by chance , these tiling rules coincide with the rules for macro - tiles , we get self - similarity as a consequence .",
    "but there is a classical tool to get this coincidence intentionally , not by chance : the kleene fixed - point construction .",
    "it was used by kleene in the recursion theory and later by von neumann to construct self - reproducing automata .",
    "usually it is illustrated as follows : for every program @xmath21 ( in fact , for every string @xmath21 ) there exists a program @xmath22 that prints the text of @xmath21 .",
    "kleene s theorem guarantees that one can find @xmath21 such that @xmath22 is equivalent to @xmath21 , i.e. , the program @xmath21 prints its own text . the same trick ( though not just the statement of kleene s recursion theorem ) can be used for 2d computations .",
    "this was done first by gcs  @xcite in a complicated setting ( error - correction in 2d computations ) ; we use the same idea in a much simpler environment . for each tile",
    "set @xmath6 one can construct a set @xmath23 of tiles that force macro - tiles to behave like @xmath6-tiles ; kleene s trick can then be used to make @xmath6 isomorphic to @xmath23 .",
    "this construction is explained in  @xcite .",
    "then some additional structure can be superimposed with this self - similar skeleton ( by adding some other computations ) ; kleene s trick can still be used to achieve self - similarity ( in some extended sense ) ."
  ],
  "abstract_text": [
    "<S> michael hochman showed that every 1d effectively closed subshift can be simulated by a 3d subshift of finite type and asked whether the same can be done in 2d . </S>",
    "<S> it turned out that the answer is positive and necessary tools were already developed in tilings theory .    </S>",
    "<S> we discuss two alternative approaches : first , developed by n.  aubrun and m.  sablik , goes back to leonid levin ; the second one , developed by the authors , goes back to peter gacs .    </S>",
    "<S> bruno durand    andrei romashchenko    alexander shen </S>"
  ]
}