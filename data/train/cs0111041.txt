{
  "article_text": [
    "logic programming is a suitable paradigm for supporting methods and techniques of software engineering , as shown in @xcite . however , there are relatively few attempts to bring software support to logic program construction .",
    "the interest in having computer tools to help logic program development is twofold : tools can help novice programmers and students to get skills in the programming paradigm ; on the other hand , in an industrial context , tools can make logic programming more widely used in the development of large software systems .",
    "tools are usually designed to give ( semi)automatic support to methodologies of program development .",
    "well defined methodologies help the programmer in the construction process , starting from a specification , to get a program which is correct with respect to that specification .",
    "there are several methods to support the construction of logic programs .",
    "we can mention deville s methodology @xcite , stepwise enhancement @xcite with its higher order extensions @xcite and synthesis from schemas @xcite .",
    "in this paper we present some notes on the design of a tool to support prolog program develoment based on a variant of deville s methodology @xcite .",
    "this variant adds a type system and the notion of typed logic description , which allows a possible adaptation of the methodology for program construction in typed logic languages like mercury @xcite .",
    "our tool is designed to help students in their learning of logic programming , and to bring another chance in the development of case tools for this paradigm .",
    "the paper is structured as follows .",
    "the next section describes the variant to deville s methodology for logic program development .",
    "section 2 gives details on the design of a tool to support the methodology .",
    "section 3 will conclude and give perspectives for further work .",
    "the original methodology proposed by deville in @xcite consists of three steps :    1 .",
    "elaboration of a specification 2 .",
    "construction of a logic description 3 .",
    "derivation of a logic procedure    the result of the application of the methodology is the set of clauses for a logic procedure _",
    "p / n _ , this is , clauses with the same head p(x1, ... ,xn ) . when the methodology is correctly applied , the logic procedure is correct with respect to its specification .",
    "our new contribution to the original methodology is the division in the second step :    1 .",
    "elaboration of a specification 2 .   1 .",
    "_ construction of a typed logic description _ 2 .",
    "_ conversion of the typed logic description into a non - typed logic description _ 3 .",
    "derivation of a logic procedure    we add a simple type system to support the construction of typed logic descriptions . such typed logic descriptions are more suitable to be translated to typed logic languages .",
    "specifications follows the template proposed by deville and revised in the folon project @xcite , with slight modifications .",
    "the specification template is shown in fig .",
    "1 .    p12 cm + * procedure p(x@xmath0, ... ,x@xmath1 ) * +   + _ types : _",
    "+ x@xmath0 : type@xmath0 + .",
    "+ x@xmath1 : type@xmath1 +   + _ relation : _ + description of a relation between the parameters x@xmath0, ...",
    ",x@xmath1 +   + _ directionalities : _ + description of directionalities , with mode , determinism and no sharing information +   + _ external conditions : _ + description of the external environment preconditions and side effects",
    "+    we use the same approach of the methodology of having types as sets of ground terms .",
    "however , we also define a type system to restrict the sets that can be considered as a type .",
    "the type system is described in the next section .    a directionality for a procedure _ p / n _ has the form :    ( @xmath2 ) : @xmath3 : @xmath4    where :    * @xmath5 , @xmath6 \\{ground , ngv , var , novar , gv , noground , any}. a singleton @xmath7 abbreviates @xmath8 .",
    "* @xmath9 where min , max @xmath10 * @xmath4 is a set of pairs @xmath11 and @xmath12    the @xmath13 bindings are usually called the _ modes _ of the procedure .",
    "we decided to represent them in the form @xmath14 to make them more intuitive and closer to mode declarations in mercury .",
    "@xmath3 is the _ determinism _ associated with modes @xmath13 .",
    "it estimates the lower and upper bounds indicates infinite answer substitutions ] in the number of answer substitutions of the procedure when it is invoked with a entry substitution respecting to the @xmath15 in the mode declaration .",
    "2 shows a correspondance between mode and determinism declaration in our specification template and the ones used by mercury .",
    "* 2p6.5 cm    [ cols= \" < , < \" , ]     however , the programmer must be restricted to use only one implementation of a particular type , when he is developing a procedure that uses a type with many implementations .      in the interactive mode ,",
    "the programmer is guided by means of _ suggestion mechanisms _ on the knowledge base , which represent techniques for constructing typed logic descriptions .",
    "the knowledge base could be fed with new techniques .    the techniques that will be available for constructing typed logic descriptions are :    * structural induction * tupling generalization * generalization by acummulator introduction    the programmer will also be able to write directly the typed logic description in a file .",
    "the tool will parse it and will translate it automatically in a non typed logic description .",
    "one of our goals is to be able to extend the tool with different code generators , one for each possible implementation language . at this moment",
    "we are just implementing the code generator for prolog .",
    "the first subcomponent of a prolog code generator is a _",
    "derivator _ which receive the non typed logic description and transforms it to a first version of the logic procedure .",
    "this first version is processed by a _ type - mode analyzer _ , which will elminate redundant type - checking literals and will find a permutation of literals in the clauses that satisfies the specified directionalities .",
    "the analyzer will use abstract interpretation techniques and will take as starting point the results of the folon project about static analysis of types @xcite and program verification @xcite .",
    "if there is no permutation satisfying the directionalities , the tool will suggest two alternatives : either to generate separate versions of the procedure for each directionality , or to change the specification adapting the directionalities",
    ".    the programmer will be able to modify manually the order of literals in the clauses or delete type - checking literals .",
    "after the analysis , the programmer will receive the source code with some messages about warnings on possible inconsistencies .",
    "the prolog code generator is enriched with language - dependent optimizers , based on program transformation techniques .",
    "some optimizations like cut introductions can be made according to the specification of directionalities .    for mercury ,",
    "the code generator is simpler .",
    "the declarations of types and modes are derived from the declaration of types and directionalities in the specification , following a correspondance like the one described in fig .",
    "the generation of code is made directly from the typed logic description , since the mercury compiler makes itself the analysis of types and modes .",
    "some mechanismes of source - to - source transformation for could be added to get a more optimal code .",
    "programming environments have two basic utilities : to facilitate the learning of a programming language and its computation model , and to help programmers to build correct programms in an efficient way .",
    "we have presented a variant of a general methodology for developing logic programs .",
    "this variant adds a simple type system and the notion of typed logic description , which give facilities for the development of programs in typed logic languages .",
    "we also present the design of a computational tool that supports our variant of the methodology .",
    "the tool is directed to two different publics . in one hand ,",
    "students and novice programmers who wants to learn the logic programming paradigm with small programs . in the other hand , more experienced programmers who looks for a semiautomatic support on development of middle - scale software systems .",
    "we believe that other techniques of logic program development can be adapted to the methodology .",
    "stepwise enhancement @xcite and synthesis from schemas @xcite could be used at the step of the construction of the typed logic description .    at this moment",
    ", we are working on the implementation of a prototype of the tool using the mercury logic programming language . with the use of mercury as implementation language",
    "we intend to show that logic programming is a good alternative to build case tools .",
    "de boeck p. , le charlier b. static type analysis of prolog procedures for ensuring correctness .",
    "in _ proceedings of the fourth international workshop on programming language implementation and logic programming ( plilp90 ) _ , lecture notes in computer science .",
    "springer - verlag , linkping , sweden .",
    "august 1990          henrard j. , le charlier b. folon : an environment for declarative construction of logic programs ( extended abstract ) . in _ proceedings of the fourth international workshop on programming language implementation and logic programming ( plilp92 )",
    "_ , lecture notes in computer science .",
    "springer - verlag , berlin , 1992    jain a. , sterling l. a methodology for program construction by stepwise structural enhancement .",
    "technical report ces-94 - 10 , department of computer science and engineering , case western reserve university .",
    "june 1994    le charlier b. , rossi s. automatic derivation of totally correct prolog programs from logic descriptions .",
    "technical report rp-95 - 009 , institut of computer science , university of namur , belgium .",
    "march 1995      ospina g. a. , takahashi s. spg : a tool for the support of logic program development . in _ proceedings of the conference on practical applications of prolog ( pappact98 ) _ the practical application company ."
  ],
  "abstract_text": [
    "<S> environments for systematic construction of logic programs are needed in the academy as well as in the industry . </S>",
    "<S> such environments should support well defined construction methods and should be able to be extended and interact with other programming tools like debuggers and compilers . </S>",
    "<S> we present a variant of the deville methodology for logic program development , and the design of a tool for supporting the methodology . </S>",
    "<S> our aim is to facilitate the learning of logic programming and to set the basis of more sophisticated tools for program development . </S>"
  ]
}