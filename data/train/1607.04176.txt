{
  "article_text": [
    "for a given nonsingular polynomial matrix @xmath8 in @xmath9}^{{}\\times { } } } } $ ] , one can find a unimodular matrix @xmath10}^{{}\\times { } } } } $ ] such that @xmath11 is in triangular form .",
    "unimodular means that there is a polynomial inverse matrix , or equivalently , the determinant is a nonzero constant from @xmath1 . triangularizing a matrix is useful for solving linear systems and computing matrix operations such as determinants or normal forms . in the latter case ,",
    "the best - known example is the hermite normal form , first defined by hermite in 1851 in the context of triangularizing integer matrices  @xcite . here , @xmath12\\ ] ] with the added properties that each @xmath13 is monic and @xmath14 for all @xmath15 .",
    "classical variations of triangularization include specifying row rather than column forms , in which case the unimodular matrix multiplies on the left rather than the right , and specifying upper rather than lower triangular forms .",
    "the goal of this paper is the fast , deterministic computation of the determinant and hermite normal form of a nonsingular polynomial matrix . the common thread in both algorithms is a method for the fast computation of the diagonal entries of a matrix triangularization .",
    "the product of these entries gives , at least up to a constant , the determinant while hermite forms are determined from a given triangularization by reducing the remaining entries modulo the diagonal entries .",
    "in the case of determinant computation , there has been a number of efforts directed to obtaining algorithms whose complexities are given in terms of exponents of matrix multiplication .",
    "interestingly enough , in the case of matrices over a field , bunch and hopcroft @xcite showed that if there exists an algorithm for matrix multiplication for some exponent @xmath4 , then there also exists an algorithm for determinant computation with the same exponent . in the case of an arbitrary commutative ring ( with multiplicative unit ) or of the integers ,",
    "fast determinant algorithms have been given by kaltofen @xcite , abbott _",
    "@xcite , eberly _",
    "@xcite , and kaltofen and villard @xcite .",
    "we refer the reader to the last named paper and the references therein for more details on efficient determinant computation of such matrices .",
    "in the specific case of the determinant of a matrix of polynomials @xmath8 with @xmath16 , storjohann @xcite gave a recursive deterministic algorithm making use of fraction - free gaussian elimination with a cost of @xmath17 operations .",
    "a deterministic @xmath18 algorithm was later given by mulders and storjohann @xcite , modifying their algorithm for weak popov form computation .",
    "using low rank perturbations , eberly _",
    "@xcite gave a probabilistic determinant algorithm using @xmath19 field operations .",
    "storjohann @xcite later used high order lifting to give a probabilistic algorithm which computes the determinant using @xmath20 field operations .",
    "the algorithm of giorgi _ et al . _",
    "@xcite has a similar cost but only works on a class of generic input matrices , matrices that are well behaved in the computation .",
    "similarly there has been considerable progress in the efficient computation of the hermite form of a polynomial matrix .",
    "hafner and mccurley @xcite and iliopoulos @xcite give algorithms with a complexity bound of @xmath21 operations from @xmath1 where @xmath22 .",
    "they control the size of the matrices encountered during the computation by working modulo the determinant . using matrix multiplication the algorithms of hafner and mccurley @xcite , storjohann and labahn @xcite and villard @xcite reduce the cost to @xmath23 operations where @xmath4 is the exponent of matrix multiplication .",
    "the algorithm of storjohann and labahn worked with integer matrices but the results directly carry over to polynomial matrices .",
    "mulders and storjohann @xcite then gave an iterative algorithm having complexity @xmath24 , thus reducing the exponent of @xmath25 but at the cost of increasing the exponent of @xmath26 .    during the past decade , there has been a goal to design algorithms that perform various @xmath27}$]-linear algebra operations in the time that it takes to multiply two polynomial matrices having the same dimension and degree as the input matrix , namely at a cost @xmath28 .",
    "_ probabilistic _ algorithms with such a cost already exist for a number of polynomial matrix problems , for example for linear system solving @xcite , smith normal form computation @xcite , row reduction @xcite and small nullspace bases computation @xcite . in the case of polynomial matrix inversion ,",
    "the probabilistic algorithm in @xcite costs @xmath29 , which is quasi - linear in the number of field elements used to represent the inverse . for hermite form computation ,",
    "gupta and storjohann @xcite gave a _",
    "las vegas randomized _ algorithm with expected cost @xmath30 , later improved to @xmath20 in  @xcite .",
    "their algorithm was the first to be both softly cubic in @xmath25 and softly linear in @xmath26 .",
    "recently , _ deterministic _",
    "fast algorithms have been given for linear system solving and row reduction @xcite , minimal nullspace bases @xcite , and matrix inversion @xcite .",
    "having a deterministic algorithm has many advantages . as a simple example this allows for use over small finite fields @xmath1 without the need for resorting to field extensions . in this paper , we give deterministic fast algorithms for computing hermite forms and determinants .",
    "our approach relies on an efficient method for determining the diagonal elements of a triangularization of the input matrix @xmath8 .",
    "we do this recursively by determining , for each integer @xmath31 , a partition @xmath32 where @xmath33 has @xmath31 rows , @xmath34 has @xmath31 columns and @xmath35 is of size @xmath36 . the subscripts for @xmath8 and @xmath37 are meant to denote up , down , left and right . as @xmath8 is nonsingular , @xmath33 has full rank and hence one has that @xmath38 is a basis for the kernel of @xmath33 .",
    "furthermore the matrix @xmath35 is nonsingular and is therefore a column basis of @xmath33 .",
    "unfortunately as described above such a recursion is not necessarily efficient for our applications . in the case of determinants , @xmath39 being lower triangular implies that we need both the product of the diagonals and also the determinant of the unimodular multiplier . for the case of hermite form computation",
    "a sensible approach would be to first determine a triangular form of @xmath8 and then reduce the lower triangular elements using the diagonal entries with unimodular operations . in both applications",
    "it appears that we would need to know @xmath40 .",
    "however the degrees in such a unimodular multiplier can be too large for efficient computation . indeed there are examples where the sum of the degrees in @xmath37 is @xmath41 ( see [ sec : diagonals ] ) , in which case computing @xmath37 is beyond our target cost @xmath20 .    in order to achieve the desired efficiency ,",
    "our triangularization computations need to be done without actually determining the entire unimodular matrix @xmath37 .",
    "we accomplish this by making use of shifted minimal kernel bases and column bases of polynomial matrices , whose computations can be done efficiently using algorithms from @xcite and @xcite .",
    "shifts are weightings of column degrees which basically help us to control the computations using column degrees rather than the degree of the polynomial matrix .",
    "using the degree becomes an issue for efficiency when the degrees in the input matrix vary considerably from column to column .",
    "we remark that shifted minimal kernel bases and column bases , used in the context of fast block elimination , have also been used for deterministic algorithms for inversion @xcite and unimodular completion @xcite of polynomial matrices .",
    "fast algorithms for computing shifted minimal kernel bases  @xcite and column bases  @xcite imply that we can deterministically find the diagonals in @xmath42 field operations , where @xmath3 is the average of the column degrees of @xmath8 .",
    "we recall that the ceiling function indicates that for matrices with very low average column degree @xmath43 , this cost is still @xmath6 . by modifying this algorithm",
    "slightly we can also compute the determinant of the unimodular multiplier , giving our first contribution . here",
    "@xmath44 is the so - called _ generic determinant bound _ as defined in @xcite ( see also ) .",
    "it has the important property that @xmath45 is bounded from above by both the average of the degrees of the columns of @xmath8 and that of its rows .",
    "[ thm : determinant ] let @xmath8 be a nonsingular matrix in @xmath9}^{{}\\times { } } } } $ ] .",
    "there is a deterministic algorithm which computes the determinant of @xmath8 using @xmath46 operations in @xmath1 , with @xmath3 being the minimum of the average of the degrees of the columns of @xmath8 and that of its rows .",
    "applying our fast diagonal entry algorithm for hermite form computation has more technical challenges .",
    "the difficulty basically comes from the unpredictability of the diagonal degrees of @xmath47 , which coincide with its row degrees .",
    "indeed , we know that the sum of the diagonal degrees in @xmath47 is @xmath48 , and so the sum of the degrees in @xmath47 is @xmath49 .",
    "still , the best known _ a priori _ bound for the degree of the @xmath50-th diagonal entry is @xmath51 and hence the sum of these bounds is @xmath49 , a factor of @xmath25 larger than the actual sum .",
    "determining the diagonal entries gives us the row degrees of @xmath47 and thus solves this issue .",
    "still , it remains a second major task : that of computing the remaining entries of @xmath47",
    ".    the probabilistic algorithm of gupta and storjohann  @xcite solves the hermite form problem using two steps , which both make use of the smith normal form @xmath52 of @xmath8 and partial information on a left multiplier @xmath53 for this smith form .",
    "the matrices @xmath52 and @xmath53 can be computed with a las vegas randomized algorithm using an expected number of @xmath20 field operations  @xcite , relying in particular on high - order lifting  ( * ? ? ?",
    "* section  17 ) .",
    "the first step of their algorithm consists of computing the diagonal entries of @xmath47 by triangularization of a @xmath54 matrix involving @xmath52 and @xmath53 , a computation done in @xmath20 operations  @xcite .",
    "the second step sets up a system of linear modular equations which admits @xmath8 as a basis of solutions : the matrix of the system is @xmath53 and the moduli are the diagonal entries of @xmath52 .",
    "the degrees of the diagonal entries obtained in the first step are then used to find @xmath47 as another basis of solutions of this system , computed in @xmath20  @xcite using in particular fast minimal approximant basis and partial linearization techniques  @xcite .",
    "the algorithm presented here for hermite forms follows a two - step process similar to the algorithm of gupta and storjohann , but it avoids using the smith form of @xmath8 , whose deterministic computation in @xmath20 still remains an open problem . instead ,",
    "as explained above , we compute the diagonal entries of @xmath47 deterministically via [ eqn : diag_recursion ] using @xmath42 field operations , where @xmath3 is the average of the column degrees of @xmath8 . as for the second step , using the knowledge of the diagonal degrees of @xmath47 combined with partial linearization techniques from  ( * ? ? ?",
    "* section  6 ) , we show that @xmath47 can then be computed via a single call to fast deterministic column reduction  @xcite using @xmath55 field operations . this new problem reduction illustrates the folklore fact that knowing in advance the degree shape of reduced or normal forms makes their computation much easier , something already observed and exploited in  @xcite .",
    "this approach results in a deterministic @xmath55 algorithm for hermite form computation , which is satisfactory for matrices @xmath8 that have most entries of similar degree @xmath22 .",
    "however , inspired from other contexts such as approximant and kernel basis computations  @xcite as well as polynomial matrix inversion  @xcite and the determinant algorithm in this paper , one may hope for algorithms that are even faster than @xmath55 when the degrees in @xmath8 are non - uniform , for example , if all high - degree entries are located in a few rows and columns of @xmath8 . in the present paper we use ideas in  @xcite to reduce the non - uniformity of the degrees in @xmath8 in the context of hermite form computation , thus obtaining [ thm : hermite ] .",
    "[ thm : hermite ] let @xmath8 be a nonsingular matrix in @xmath9}^{{}\\times { } } } } $ ] .",
    "there is a deterministic algorithm which computes the hermite form of @xmath8 using @xmath46 operations in @xmath1 , with @xmath3 being the minimum of the average of the degrees of the columns of @xmath8 and that of its rows .",
    "the remainder of this paper is organized as follows . in [ sec : preliminaries ] we give preliminary information on shifted degrees as well as kernel and column bases of polynomial matrices .",
    "we also detail why it is interesting to have cost bounds involving the generic determinant bound rather than the degree of the matrix .",
    "contains the fast algorithm for finding the diagonal entries of a triangular form .",
    "this is followed in [ sec : determinant ] by our algorithm for finding the determinant .",
    "the reduction of degrees of off diagonal entries in the hermite form is then given in [ sec : hermite ] .",
    "it computes the remaining entries by relying in particular on fast deterministic column reduction . in [ sec : parlin ] we then give the details about how to use partial linearization to decrease the non - uniformity of the degrees in the input matrix for hermite form computation .",
    "the paper ends with a conclusion and topics for future research .",
    "in this section we first give the basic notations for _ column degrees _ and _ shifted degrees _ of vectors and matrices of polynomials .",
    "we then present the building blocks used in our algorithms , namely the concepts of _ kernel basis _ and _ column basis _ for a matrix of polynomials .",
    "finally , we explain our interest in having cost bounds involving the so - called _ generic determinant bound_.      our methods make use of the concept of _ shifted _ degrees of polynomial matrices @xcite , basically shifting the importance of the degrees in some of the rows of a basis . for a column vector @xmath56^\\mathsf{t}}$ ] of univariate polynomials over a field @xmath1 ,",
    "its column degree , denoted by @xmath57 , is the maximum of the degrees of the entries of @xmath58 , that is , @xmath59 the _ shifted column degree _ generalizes this standard column degree by taking the maximum after shifting the degrees by a given integer vector that is known as a _",
    "shift_. more specifically , the shifted column degree of @xmath58 with respect to a shift @xmath60 , or the _ @xmath61-column degree _ of @xmath58 , is @xmath62 where @xmath63 for a matrix @xmath64 , we use @xmath65 and @xmath66 to denote respectively the list of its column degrees and the list of its shifted @xmath61-column degrees .",
    "for the _ uniform shift _ @xmath67 , the shifted column degree specializes to the standard column degree .",
    "similarly , @xmath68 is equivalent to @xmath69 for all @xmath50 and @xmath70 , that is , @xmath61 bounds the row degrees of @xmath71 .",
    "the shifted row degree of a row vector @xmath72 $ ] is defined similarly as @xmath73 =    \\deg(\\mathbf{q}\\cdot { { \\mathbf{{x}}}^{{{{\\vec{\\mkern0mus}}}}\\,}}).\\ ] ] shifted degrees have been used previously in polynomial matrix computations and in generalizations of some matrix normal forms @xcite .",
    "the shifted column degree is equivalent to the notion of _ defect _ commonly used in the rational approximation literature .    along with shifted degrees",
    "we also make use of the notion of a polynomial matrix being column reduced . a full - rank polynomial matrix @xmath74_{i , j}$ ] is column reduced if its leading column coefficient matrix , that is the matrix @xmath75_{1\\leq i , j \\leq    { n } } , \\text { with } ( d_1,\\ldots , d_{n } ) = { { \\rm cdeg}_{}({\\mathbf{a}})},\\ ] ] has full rank . then , the polynomial matrix @xmath8 is @xmath61-column reduced if @xmath76 is column reduced .",
    "the concept of @xmath8 being shifted row reduced is similar .",
    "the usefulness of the shifted degrees can be seen from their applications in polynomial matrix computation problems such as hermite - pad and m - pad approximations @xcite , minimal kernel bases @xcite , and shifted column reduction  @xcite .",
    "an essential fact needed in this paper , also based on the use of shifted degrees , is the efficient multiplication of matrices with unbalanced degrees ( * ? ? ?",
    "* theorem 3.7 ) .",
    "[ thm : multiplyunbalancedmatrices ] let @xmath77}^{{}\\times { } } } } [ n]$ ] with @xmath78 , @xmath79 a shift with entries bounding the column degrees of @xmath8 , and @xmath80 a bound on the sum of the entries of @xmath61 .",
    "let @xmath81}^{{}\\times { } } } } [ k]$ ] with @xmath82 and the sum @xmath83 of its @xmath61-column degrees satisfying @xmath84",
    ". then we can multiply @xmath8 and @xmath85 with a cost of @xmath86 , where @xmath87 is the average of the entries of @xmath61 .",
    "the kernel of @xmath77}^{{}\\times { } } } } [ n]$ ] is the @xmath27}$]-module @xmath88}^{{}\\times { } } } } [ 1 ] \\;\\;|\\;\\ ; { \\mathbf{a } } { \\mathbf{p } } = 0\\}$ ] . such a module is free and of rank @xmath89 ( * ? ? ?",
    "* chapter  12 , theorem  4 ) ; any of its bases is called a kernel basis of @xmath8 . in other words :    [ def : kernelbasis ] given @xmath77}^{{}\\times { } } } } [ n]$ ] , a polynomial matrix @xmath90}^{{}\\times { } } } } [ k]$ ] is a ( right ) kernel basis of @xmath8 if the following properties hold :    1 .",
    "@xmath91 has full rank , 2 .",
    "@xmath91 satisfies @xmath92 , 3 .   any @xmath93}^{{}\\times { } } } } [ 1]$ ] satisfying @xmath94 can be written as a linear combination of the columns of @xmath91 , that is , there exists @xmath95}^{{}\\times { } } } } [ 1]$ ] such that @xmath96 .",
    "it is easy to show that any pair of kernel bases @xmath91 and @xmath97 of @xmath8 are unimodularly equivalent .",
    "an @xmath61-minimal kernel basis of @xmath8 is a kernel basis that is @xmath61-column reduced .",
    "given @xmath77}^{{}\\times { } } } } [ n]$ ] , a matrix @xmath98}^{{}\\times { } } } } [ k]$ ] is an @xmath61-minimal ( right ) kernel basis of @xmath8 if @xmath91 is a kernel basis of @xmath8 and @xmath91 is @xmath61-column reduced .",
    "a column basis of @xmath8 is a basis for the @xmath27}$]-module @xmath99}^{{}\\times { } } } } [ 1]\\}$ ] , which is free of rank @xmath100 .",
    "such a basis can be represented as a full rank matrix @xmath101}^{{}\\times { } } } } [ r]$ ] whose columns are the basis elements .",
    "a column basis is not unique and indeed any column basis right multiplied by a unimodular matrix gives another column basis .",
    "[ eg : ctd_kernel_column_bases ] let @xmath102 be a @xmath103 matrix over @xmath104 $ ] having column degree @xmath105 .",
    "then a column basis @xmath85 , and a kernel basis @xmath91 , of @xmath8 are given by @xmath106 for example , if @xmath107 and @xmath108 denote the columns of @xmath85 then the third column of @xmath8 , denoted by @xmath109 , is given by @xmath110 here @xmath111 with shifted leading coefficient matrix @xmath112 since @xmath113 has full rank we have that @xmath91 is an @xmath61-minimal kernel basis of @xmath8 .",
    "9999    fast algorithms for kernel basis computation and column basis computation are given in @xcite and in @xcite , respectively .",
    "in both cases they make use of fast methods for order bases ( often also referred to as minimal approximant bases ) @xcite .",
    "[ thm : fastkercolbasis ] let @xmath77}^{{}\\times { } } } } [ n]$ ] with @xmath114 and @xmath115 , and let @xmath116 .",
    "then , there exist deterministic algorithms which compute    * an @xmath61-minimal kernel basis of @xmath8 using @xmath117 field operations , * a column basis of @xmath8 using @xmath118 field operations ,    where @xmath119 is the average column degree of @xmath8 .      for a nonsingular @xmath120 matrix @xmath121}^{{}\\times { } } } } $ ] , the degree of the determinant of @xmath8 provides a good measure of the size of the output @xmath47 in the case of hermite form computation .",
    "indeed , if we denote by @xmath122 the degrees of the diagonal entries of @xmath47 , then we have @xmath123 in what follows , we write @xmath124 for the sum of the entries of a tuple @xmath125 with nonnegative entries .",
    "since the diagonal entries are those of largest degree in their respective rows , we directly obtain that @xmath47 can be represented using @xmath126 field elements .",
    "the size of the input @xmath8 can be measured in several ways which always involve an upper bound on the degree of the determinant of @xmath8 . a first",
    ", coarse bound is given by the maximum degree of the entries of the matrix : @xmath8 can be represented by @xmath127 field elements . on the other hand , by definition of the determinant we have that @xmath128 has degree at most @xmath129 . a second , finer",
    "bound can be obtained using the _ average _ of the row degrees and of the column degrees : the size of @xmath8 in terms of field elements is at most @xmath130 ; again we have the related bound @xmath131 an even finer bound on the size of @xmath8 is given by the _ generic determinant bound _ , introduced in  ( * ? ? ?",
    "* section  6 ) . for @xmath132 \\in { \\renewcommand{}{{n}}{{{\\mathbb{k}}[{x}]}^{{}\\times { } } } }",
    "$ ] , this is defined as @xmath133 where @xmath134 is the set of permutations of @xmath135 , and where @xmath136 by definition , we have the inequalities @xmath137 and it is easily checked that @xmath8 can be represented using @xmath138 field elements .",
    "thus in hermite form computation both the input and the output have average degree in @xmath139 and can be represented using @xmath140 field elements .",
    "furthermore @xmath44 gives a more precise account of the degrees in @xmath8 than the average row and column degrees , and an algorithm with cost bound @xmath141 is always faster , sometimes significantly , than an algorithm with cost bound @xmath2 where @xmath3 is the average column degree or the average row degree , let alone @xmath142 .",
    "let us justify why this can sometimes be _ significantly _ faster .",
    "we have seen that @xmath143 is bounded from above by both the average column degree and the average row degree of @xmath8 .",
    "it turns out that , in some important cases @xmath45 may be substantially smaller than these averages .",
    "for example , consider @xmath8 with one row and one column of uniformly large degree @xmath26 and all other entries of degree @xmath144 : @xmath145     & [ d ] & \\cdots & [ d ] \\\\    [ d ]     & [ 0 ] & \\cdots & [ 0 ] \\\\",
    "\\vdots & \\vdots & \\ddots & \\vdots \\\\    [ d ]     & [ 0 ]     & \\cdots & [ 0 ] \\end{bmatrix } \\;\\ ; \\in { \\renewcommand{}{{n}}{{{\\mathbb{k}}[{x}]}^{{}\\times { } } } } .\\ ] ] in this example the average row degree and the average column degree are both exactly @xmath26 while the generic determinant bound is @xmath26 as well . here",
    ", @xmath146 is much smaller than @xmath147 .",
    "in this section we show how to determine the diagonal entries of a triangular form of a nonsingular matrix @xmath121}^{{}\\times { } } } } $ ] with @xmath8 having column degrees @xmath61 .",
    "our algorithm makes use of fast kernel and column bases computations .",
    "as mentioned in the introduction , we consider unimodularly transforming @xmath8 to @xmath148 which eliminates a top right block and gives two square diagonal blocks @xmath35 and @xmath149 in @xmath85 .",
    "after this block triangularization step , the matrix is now closer to being in triangular form . applying this procedure recursively to @xmath35 and @xmath149 , until the matrices reach dimension @xmath150 , gives the diagonal entries of a triangular form of @xmath8 .",
    "these entries are unique up to multiplication by a nonzero constant from @xmath1 , and in particular making them monic yields the diagonal entries of the hermite form of @xmath8 .    in this procedure ,",
    "a major problem is that the degrees in the unimodular multiplier @xmath37 can be too large for efficient computation .",
    "for example , the matrix @xmath151}^{{}\\times { } } } } \\ ] ] of degree @xmath152 is unimodular and hence its hermite form is the identity .",
    "however the corresponding unimodular multiplier is @xmath153 with the sum of the degrees in @xmath37 being in @xmath41 , beyond our target cost @xmath154 .",
    "our approach is to make use of fast kernel and column basis methods to efficiently compute the diagonal blocks @xmath35 and @xmath149 while at the same time avoiding the computation of all of @xmath37 .",
    "partition @xmath155 , with @xmath33 and @xmath156 consisting of the upper @xmath157 and lower @xmath158 rows of @xmath8 , respectively .",
    "then both upper and lower parts have full - rank since @xmath8 is assumed to be nonsingular . by partitioning @xmath159 , where the column dimension of @xmath34 matches the row dimension of @xmath33 , then @xmath160 becomes @xmath161 notice that the matrix @xmath35 is nonsingular and is therefore a column basis of @xmath33 .",
    "as such this can be efficiently computed as mentioned in [ thm : fastkercolbasis ] . in order to compute @xmath162 , notice that the matrix @xmath38 is a right kernel basis of @xmath163 , which makes the top right block of @xmath85 zero .",
    "the following lemma states that the kernel basis @xmath38 can be replaced by any other kernel basis of @xmath163 thus giving another unimodular matrix that also works .",
    "[ lem : onestephermitediagonal ] partition @xmath164 and suppose @xmath35 is a column basis of @xmath33 and @xmath91 a kernel basis of @xmath33 .",
    "then there is a unimodular matrix @xmath165 such that @xmath166 where @xmath167",
    ". if @xmath8 is square nonsingular , then @xmath35 and @xmath149 are also square nonsingular .",
    "this follows from lemma 3.1 in @xcite .",
    "note that we do not compute the blocks represented by the symbol @xmath168 .",
    "thus [ lem : onestephermitediagonal ] allows us to determine @xmath35 and @xmath149 independently without computing the unimodular matrix .",
    "this procedure for computing the diagonal entries is presented in [ alg : hermitediagonal ] .",
    "formally the cost of this algorithm is given in [ prop : diagonalcost ] .      before giving a cost bound for our algorithm ,",
    "let us observe its correctness on an example .",
    "[ eg : ctd_hermitediagonal ] let @xmath169 working over @xmath170 $ ] .",
    "considering the matrix @xmath163 formed by the top two rows of @xmath8 , then a column basis @xmath171 and kernel basis @xmath91 of @xmath163 were given in [ eg : ctd_kernel_column_bases ] .",
    "if @xmath172 denotes the bottom row of @xmath8 , then this gives diagonal blocks @xmath173 and @xmath174 recursively computing with @xmath171 , we obtain a column basis and kernel basis for the top row @xmath175 of @xmath171 , as @xmath176 if @xmath177 denote the bottom row of @xmath171 , we get @xmath178 , which gives the second diagonal block from @xmath171 .",
    "thus we have the diagonal entries of a triangular form of @xmath171 . on the other hand , since @xmath179 is already a @xmath180 matrix we do not need to do any extra work . as a result we have that @xmath8 is unimodularly equivalent to @xmath181 giving , up to making them monic , the diagonal entries of the hermite form of @xmath8 .",
    "9999    [ prop : diagonalcost ] costs @xmath182 field operations to compute the diagonal entries of the hermite normal form of a nonsingular matrix @xmath121}^{{}\\times { } } } } $ ] , where @xmath183 is the average column degree of @xmath8 .",
    "the three main operations are computing a column basis of @xmath33 , computing a kernel basis @xmath91 of @xmath33 , and multiplying the matrices @xmath184 .",
    "set @xmath185 , an integer used to measure size for our problem .    for the column basis computation , by [ thm : fastkercolbasis ]",
    "( see also ( * ? ? ? * theorem  5.6 ) ) we know that a column basis @xmath35 of @xmath33 can be computed with a cost of @xmath186 . by ( * ? ? ?",
    "* lemma  5.1 ) the column degrees of the computed column basis @xmath35 are also bounded by the original column degrees @xmath61 . similarly , from [ thm : fastkercolbasis ] ( see also ( * ? ? ? * theorem  4.1 ) ) , computing a @xmath61-minimal kernel basis @xmath91 of @xmath33 also costs @xmath187 operations .    by theorem 3.4 of @xcite",
    "we also know that the sum of the @xmath61-column degrees of the output kernel basis @xmath91 is bounded by @xmath80 . for the matrix multiplication @xmath184 , we have that the sum of the column degrees of @xmath156 and the sum of the @xmath61-column degrees of @xmath91 are both bounded by @xmath80",
    ". therefore [ thm : multiplyunbalancedmatrices ] applies and the multiplication can be done with a cost of @xmath182 .",
    "if we let the cost of [ alg : hermitediagonal ] be @xmath188 for an input matrix of dimension @xmath25 then @xmath189 as @xmath190 depends on @xmath25 we use @xmath191 with @xmath80 not depending on @xmath25 .",
    "then we solve the recurrence relation as @xmath192",
    "in this section , we show how to recursively and efficiently compute the determinant of a nonsingular matrix @xmath193}^{{}\\times { } } } } $ ] having column degrees @xmath61 .",
    "our algorithm follows a strategy similar to the recursive block triangularization in [ sec : diagonals ] , making use of fast kernel basis and column basis computation .",
    "indeed , after unimodularly transforming @xmath8 to @xmath194 as in [ eq : block_triangularization ] , the determinant of @xmath8 can be computed as @xmath195 which requires us to first compute @xmath196 , @xmath197 , and @xmath198 .",
    "the same procedure can then be applied to compute the determinant of @xmath35 and the determinant of @xmath149 . however , as @xmath37 is unimodular we will handle its determinant differently .",
    "this can be repeated recursively until the dimension becomes @xmath150 .",
    "one major obstacle for efficiency of this approach is that we do want to compute the scalar @xmath198 , and as noted in [ sec : diagonals ] , the degrees of the unimodular matrix @xmath37 can be too large for efficient computation . to sidestep this issue",
    ", we will show that @xmath198 can be computed with only partial knowledge of the matrix @xmath37 . combining this with the method of [ sec : diagonals ] to compute the matrices @xmath35 and @xmath149 without computing all of @xmath85 and @xmath37 , we obtain an efficient recursive algorithm .    in some cases",
    ", the computation of the determinant is easily done from the diagonal entries of a triangular form .",
    "indeed , let @xmath121}^{{}\\times { } } } } $ ] be nonsingular and assume that we have computed the diagonal entries @xmath199 of its hermite form .",
    "then , @xmath200 for some nonzero constant @xmath201 .",
    "if the constant coefficient of @xmath202 is nonzero , we can retrieve @xmath203 by computing the constant coefficient of @xmath204 , which is found by @xmath1-linear algebra using @xmath205 operations since @xmath206 . more generally ,",
    "if we know @xmath207 such that @xmath208 , then we can deduce @xmath204 efficiently . yet , this does not lead to a fast deterministic algorithm in general since it may happen that @xmath209 for all field elements @xmath210 , or that finding @xmath210 with @xmath211 is a difficult task .",
    "we now focus on computing the determinant of @xmath37 , or equivalently , the determinant of @xmath212 .",
    "the column basis computation from @xcite for computing the @xmath213 diagonal block @xmath35 also gives @xmath38 , the matrix consisting of the right @xmath214 columns of @xmath37 , which is a right kernel basis of @xmath33 .",
    "in fact , this column basis computation also gives a right factor multiplied with the column basis @xmath35 to give @xmath33 .",
    "the following lemma shows that this right factor coincides with the matrix @xmath215 consisting of the top @xmath216 rows of @xmath53 .",
    "the column basis computation therefore gives both @xmath38 and @xmath215 with no additional work .",
    "let @xmath216 be the dimension of @xmath35 .",
    "the matrix @xmath217}^{{}\\times { } } } } [ { n}]$ ] satisfies @xmath218 if and only if @xmath215 is the submatrix of @xmath212 formed by the top @xmath216 rows of @xmath53 .",
    "the proof follows directly from @xmath219    while the determinant of @xmath53 or the determinant of @xmath37 is needed to compute the determinant of @xmath8 , a major problem is that we do not know @xmath34 or @xmath220 , which may not be efficiently computed due to their possibly large degrees .",
    "this means we need to compute the determinant of @xmath53 or @xmath37 without knowing the complete matrix @xmath53 or @xmath37 .",
    "the following lemma shows how this can be done using just @xmath38 and @xmath215 , which are obtained from the computation of the column basis @xmath35 .",
    "[ lem : scalingtodeterminant ] let @xmath221 and @xmath8 satisfy , as before , @xmath222 where the row dimension of @xmath33 , the column dimension of @xmath34 , and the dimension of @xmath35 are @xmath216 .",
    "let @xmath223 be the inverse of @xmath37 with @xmath216 rows in @xmath215 and @xmath224}^{{}\\times { } } } } [ m]$ ] be a matrix such that @xmath225 is unimodular",
    ". then @xmath226 is unimodular and @xmath227    since @xmath228 , we just need to show that @xmath229 .",
    "this follows from @xmath230 in particular @xmath231 is a nonzero constant and thus @xmath226 is unimodular .",
    "shows that the determinant of @xmath53 can be computed using @xmath215 , @xmath38 , and a unimodular completion @xmath232 of @xmath38 .",
    "in fact , this can be made more efficient still by noticing that since we are looking for a constant determinant , the higher degree parts of the matrices do not affect the computation .",
    "[ lem : determinantofunimodular ] if @xmath233}^{{}\\times { } } } } $ ] is unimodular , then @xmath234 .",
    "note that @xmath235 for any @xmath236 , that is , the result is the same whether we do evaluation before or after computing the determinant .",
    "taking @xmath237 , we obtain @xmath238    allows us to use just the degree zero coefficient matrices in the computation .",
    "hence [ lem : scalingtodeterminant ] can be improved as follows .",
    "[ lem : scalingtodeterminantsimplified ] let @xmath8 , @xmath239 , and @xmath223 be as before .",
    "let @xmath240 and @xmath241 be the constant matrices of @xmath38 and @xmath215 , respectively .",
    "let @xmath242 $ ] be a matrix such that @xmath243 is nonsingular .",
    "then @xmath244    suppose we have a matrix @xmath245}^{{}\\times { } } } } [ m]$ ] such that @xmath246 and @xmath247 is unimodular . using [ lem : scalingtodeterminant ] and [ lem : determinantofunimodular ] , we have that @xmath226 is unimodular with @xmath248 and thus @xmath249    let us now show how to construct such a matrix @xmath250 . let @xmath251}^{{}\\times { } } } } [ m]$ ] be any matrix such that @xmath252 is unimodular and let @xmath253 denote its constant term @xmath254 .",
    "it is easily checked that @xmath255 for some nonsingular @xmath256 and some @xmath257 $ ] .",
    "define the matrix @xmath258 in @xmath9}^{{}\\times { } } } } [ m]$ ] .",
    "on the one hand , we have that the matrix @xmath259 is unimodular . on the other hand , by construction we have that @xmath260 .",
    "thus [ lem : scalingtodeterminantsimplified ] requires us to compute @xmath242 $ ] a matrix such that @xmath261 is nonsingular .",
    "this can be obtained from the nonsingular matrix that transforms @xmath262 to its reduced column echelon form computed using the gauss jordan transform algorithm from @xcite with a cost of @xmath263 field operations .",
    "we now have all the ingredients needed for computing the determinant of @xmath8 .",
    "a recursive algorithm is given in [ alg : determinant ] , which computes the determinant of @xmath8 as the product of the determinant of @xmath53 and the determinant of @xmath85 .",
    "the determinant of @xmath85 is computed by recursively computing the determinants of its diagonal blocks @xmath35 and @xmath149 .",
    "[ prop : det ] [ alg : determinant ] costs @xmath182 field operations to compute the determinant of a nonsingular matrix @xmath121}^{{}\\times { } } } } $ ] , where @xmath3 is the average column degree of @xmath8 .    from [ lem : onestephermitediagonal ] and [ prop : diagonalcost ] the computation of the two diagonal blocks @xmath35 and @xmath149 costs @xmath264 field operations .",
    "as mentioned above , computing @xmath265 at step 6 of the algorithm costs @xmath205 operations .",
    "step 7 involves only constant matrices so that @xmath266 can be computed @xmath205 .",
    "finally , @xmath196 and @xmath197 are computed recursively and multiplied .",
    "since these are two univariate polynomials of degree at most @xmath267 , their product @xmath268 is obtained in @xmath269 operations .",
    "therefore , the recurrence relation for the cost of the [ alg : determinant ] is the same as that in the proof of [ prop : diagonalcost ] , and the total cost is @xmath182 .    [",
    "prop : det ] can be further improved using the following result from  ( * ? ? ?",
    "* corollary  3 ) .",
    "[ prop : reduction_determinant ] let @xmath121}^{{}\\times { } } } } $ ] be nonsingular . using no operation in @xmath1 , one can build a matrix @xmath270}^{{}\\times { } } } } $ ] such that    a.   @xmath271 and @xmath272 , b.   the determinant of @xmath8 is equal to the determinant of @xmath273 .",
    "the reduction in [ prop : reduction_determinant ] , proves [ thm : determinant ] .",
    "[ eg : ctd_determinant ] in order to observe the correctness of the algorithm , let @xmath274 working over @xmath104 $ ] .",
    "if @xmath163 denotes the top three rows of @xmath8 , then we have a column basis @xmath275 and a minimal kernel basis @xmath276 for @xmath163 . the second block diagonal is then given by @xmath277 the computation of the column basis @xmath171 also gives the right factor @xmath278 and so the constant term matrices are then @xmath279 with gaussian - jordan elimination used to find a nonsingular completion of @xmath280 as @xmath281 the determinant of @xmath37 is then computed as @xmath282 the determinants of @xmath171 and @xmath179 are then computed recursively . in the case of @xmath171 a minimal kernel basis and column basis are given by @xmath283 this gives the remaining diagonal block as @xmath284 .",
    "the corresponding constant term matrices @xmath285 and @xmath286 and nonsingular completion @xmath287 are then given by @xmath288 which gives @xmath289 .",
    "hence @xmath290 .",
    "a similar argument gives @xmath291 and hence @xmath292",
    "in [ sec : diagonals ] , we have shown how to efficiently determine the diagonal entries of the hermite normal form of a nonsingular input matrix @xmath121}^{{}\\times { } } } } $ ] .",
    "one then still needs to determine the remaining entries for the complete hermite form @xmath47 of @xmath8 .    here , we observe that knowing the diagonal degrees of @xmath47 allows us to use partial linearization techniques  ( * ? ? ?",
    "* section 6 ) to reduce to the case of computing a column reduced form of @xmath8 for an almost uniform shift . along with the algorithm in [ sec : diagonals ] , this gives an algorithm to compute the hermite form of @xmath8 in @xmath293 field operations using fast deterministic column reduction  @xcite .",
    "it is known that the hermite form @xmath47 of @xmath8 is a _ shifted _ reduced form of @xmath8 for a whole range of shifts . without further information on the degrees in @xmath47 , one appropriate shift is @xmath294 where @xmath22 ( cf .",
    "* lemma 2.6 ) ) . note that this shift has a large amplitude , namely @xmath295 .",
    "unfortunately there does not appear to be a deterministic shifted reduction algorithm that would compute an @xmath296-reduced form of @xmath8 in @xmath20 field operations .",
    "now , let us consider the degrees @xmath297 of the diagonal entries of @xmath47 .",
    "then we have that @xmath47 is a @xmath298-column reduced form of @xmath8 and , in addition , that @xmath47 can be easily recovered from any @xmath298-column reduced form of @xmath8 .",
    "more precisely , suppose that we know @xmath299 , for example thanks to the algorithm in [ sec : diagonals ] .",
    "then , we claim that @xmath47 can be computed as follows , where @xmath300 : @xmath301 where @xmath302 is any @xmath298-column reduced form of @xmath8 . to show this",
    ", we will rely on the following consequence of ( * ? ? ?",
    "* lemma 17 ) .",
    "[ lem : popov_normalize0 ] let @xmath8 and @xmath85 be column reduced matrices in @xmath9}^{{}\\times { } } } } $ ] with uniform column degree @xmath303 , for some @xmath304 . if @xmath8 and @xmath85 are right - unimodularly equivalent then @xmath305    the matrix @xmath8 is column reduced with uniform column degree @xmath303 . as such @xmath306 is its popov form according to ( * ? ? ?",
    "* lemma 17 ) ( i.e. its leading coefficient matrix is the identity ) .",
    "similarly , @xmath307 is the popov form of @xmath85 in this case .",
    "we recall that the popov form is a canonical form under right - unimodular equivalence for nonsingular matrices in @xmath9}^{{}\\times { } } } } $ ] ; for a general definition we refer the reader to  @xcite .",
    "thus , since @xmath8 and @xmath85 are right - unimodularly equivalent , the uniqueness of the popov form implies @xmath308 .",
    "as we often wish to apply lemma [ lem : popov_normalize0 ] with shifts we also include the following .",
    "[ lem : popov_normalize ] let @xmath309 be a shift , and let @xmath8 and @xmath85 be @xmath61-column reduced matrices in @xmath9}^{{}\\times { } } } } $ ] with uniform @xmath61-column degree @xmath303 , for some @xmath310 .",
    "if @xmath8 and @xmath85 are right - unimodularly equivalent then @xmath311    we simply replace @xmath8 and @xmath85 by @xmath312 and @xmath313 in the previous proof .",
    "in addition , since the hermite form of @xmath8 is the shifted popov form of @xmath8 for the shift @xmath296 in [ eqn : popov - shift ] , we can state the following specific case of  ( * ? ? ?",
    "* lemma 4.1 ) .",
    "[ cor : hermite_knowndeg ] let @xmath121}^{{}\\times { } } } } $ ] be nonsingular and @xmath125 denote the degrees of the diagonal entries of the hermite form @xmath47 of @xmath8 .",
    "if @xmath302 is a @xmath298-column reduced form of @xmath8 , then @xmath302 has @xmath298-column degree @xmath314 , row degree @xmath315 , and @xmath316 .",
    "note that @xmath317 is the identity matrix , so that @xmath47 is a @xmath298-reduced form of @xmath8 .",
    "furthermore , @xmath47 has @xmath298-column degree @xmath318 which implies that @xmath314 and thus @xmath319 componentwise . by [ lem : popov_normalize ] we obtain @xmath320 .",
    "in addition , we must have @xmath321 , since otherwise @xmath322 would have a zero row .",
    "thus we can start with the matrix @xmath323 , column reduce this matrix and then normalize it to get our normal form .",
    "however @xmath323 may have some entries of large degree .",
    "indeed , @xmath324 may be as large as @xmath128 while having @xmath325 , in which case the degree of @xmath323 is at least @xmath128 .",
    "for efficient deterministic shifted column reduction we would need the degree of @xmath323 to be in @xmath326 .      in the strategy presented in the previous subsection ,",
    "the main obstacle to obtaining an efficient algorithm is that the diagonal degrees of @xmath47 might have a large amplitude . in this subsection",
    ", we will show how _ partial linearization _",
    "techniques allow us to build a matrix @xmath327 such that @xmath47 can be obtained from a @xmath328-reduced form of @xmath327 for a shift @xmath329 that has a small amplitude .",
    "a key fact is that the average of the degrees @xmath299 is controlled .",
    "namely , denoting by @xmath330 the average of @xmath299 , we have that @xmath331 . indeed ,",
    "the product of the diagonal entries of @xmath47 is @xmath332 which , up to a constant multiplier , is the same as @xmath204 and thus the degree of this product is @xmath333 in order to reduce the amplitude of @xmath299 , one can split the entries that are larger than @xmath330 into several entries each at most @xmath330 . from this",
    "we obtain another tuple @xmath334 with @xmath335 and having length @xmath336 less than @xmath337 .",
    "most importantly for our purpose , there is a corresponding transformation of matrices which behaves well with regards to shifted reduction .",
    "namely , this transformation is a type of _ row partial linearization _",
    "* section 6 ) .",
    "let us consider the case of the hermite form @xmath47 of @xmath8 .",
    "for each @xmath50 , we consider the row @xmath50 of @xmath47 .",
    "if its degree @xmath338 is larger than @xmath330 then the row is expanded into @xmath339 rows of degree at most @xmath330 .",
    "this yields a @xmath340 matrix @xmath341 of degree at most @xmath330 .",
    "furthermore , certain elementary columns are inserted into @xmath341 resulting in a square nonsingular matrix @xmath342 which preserves fundamental properties of @xmath47 ( for example , its smith factors and its determinant ) .",
    "namely , @xmath342 has dimension @xmath343 and degree at most @xmath330 , which in this case is the average row degree of @xmath47 .",
    "consider for example a @xmath344 matrix @xmath47 in hermite form with diagonal entries having degrees @xmath345 .",
    "such a matrix has degree profile @xmath346 & ( 37 ) &       &       \\\\    [ 6 ] & [ 6 ] & ( 7 ) &       \\\\    [ 17 ] & [ 17 ] & [ 17 ] & ( 18 )    \\end{bmatrix},\\ ] ] where @xmath347 $ ] stands for an entry of degree at most @xmath26 and @xmath348 stands for a monic entry of degree exactly @xmath26 .",
    "here @xmath47 has row degree @xmath349 .",
    "let us now construct the row partial linearization @xmath342 .",
    "considering the upper bound @xmath350 on the average row degree of @xmath47 , we will split the high - degree rows of @xmath47 in several rows having degree less than @xmath330 .",
    "the first row is unchanged ; the second row is expanded in two rows of degree @xmath351 and one row of degree @xmath352 ; the third row is unchanged ; and finally the last row is expanded in one row of degree @xmath351 and one row of degree @xmath150 .",
    "then , the matrix with expanded rows is @xmath353 & [ 16 ] &       &       \\\\    [ 16 ] & [ 16 ] &       &       \\\\    [ 2 ] & ( 3 ) &       &       \\\\    [ 6 ] & [ 6 ] & ( 7 ) &       \\\\    [ 16 ] & [ 16 ] & [ 16 ] & [ 16 ] \\\\    [ 0 ] & [ 0 ] & [ 0 ] & ( 1 ) \\end{bmatrix}.\\ ] ] note that @xmath47 and @xmath354 are related by the identity @xmath355 , where @xmath356 is the so - called _ expansion - compression",
    "_ matrix @xmath357    we can insert elementary columns in @xmath354 by @xmath358 & { x}^{17 } &         & [ 16 ]                          \\\\    [ 16 ] &   -1     & { x}^{17 } & [ 16 ]                          \\\\    [ 2 ]   &         &    -1    & ( 3 )                          \\\\    [ 6 ] &         &         & [ 6 ] & ( 7 )                   \\\\    [ 16 ] &         &         & [ 16 ] & [ 16 ] & { x}^{17 } & [ 16 ]   \\\\    [ 0 ] &         &         & [ 0 ] & [ 0 ] &    -1    & ( 1 )   \\end{bmatrix}\\ ] ] which indicate the row operations needed to keep track of the structure of the original rows of @xmath359 . now the reduced tuple of row degrees @xmath360 has as its largest entry the _ average _ row degree @xmath361 of @xmath47 .",
    "furthermore , @xmath47 can be reconstructed from @xmath342 , without field operations , as a submatrix of @xmath362 .",
    "formally we define the partial linearization for a matrix @xmath8 and a tuple @xmath299 , with the latter not necessarily related to @xmath363 . indeed",
    ", we will apply this in a situation where the tuple @xmath299 is formed by the diagonal degrees of the hermite form of @xmath8 .",
    "[ defn : rowparlindiag ] let @xmath121}^{{}\\times { } } } } $ ] , @xmath364 and set @xmath365 for any @xmath366 write @xmath367 with @xmath368 and @xmath369 if @xmath370 , while @xmath371 and @xmath372 if @xmath373 .",
    "set @xmath374 and define @xmath375 as @xmath376 as well as the row expansion - compression matrix @xmath377}^{{}\\times { } } } } [ { \\widetilde{{n}}}]$ ] as @xmath378 let @xmath379}^{{}\\times { } } } } [ { n}]$ ] be such that @xmath380 with all the rows of @xmath381 having degree at most @xmath330 except possibly at indices @xmath382 .",
    "define @xmath383}^{{}\\times { } } } } $ ] as :    * for @xmath384 , the column @xmath385 of @xmath327 is the column @xmath50 of @xmath381 ; * for @xmath386 and @xmath387 , the column @xmath388 of @xmath327 is the column @xmath389^\\mathsf{t } } \\in        { \\renewcommand{}{{\\widetilde{{n}}}}{{{\\mathbb{k}}[{x}]}^{{}\\times { } } } } [ 1]\\ ] ] with the entry @xmath390 at row index @xmath388 .",
    "it follows from this construction that any matrix @xmath121}^{{}\\times { } } } } $ ] is the submatrix of @xmath391 formed by its columns at indices @xmath392 .",
    "it is important to note that this transformation has good properties regarding the computation of @xmath298-shifted reduced forms of @xmath8 , where @xmath299 is the tuple of diagonal degrees of the hermite form of @xmath8 .",
    "indeed , it transforms any @xmath298-reduced form @xmath302 of @xmath8 into a @xmath328-reduced form @xmath393 of the transformed @xmath327 . in other words",
    ", we have the following diagram : @xmath394 where @xmath395 is the uniform tuple @xmath396 of length @xmath336 . in terms of efficiency , it is more interesting to perform the reduction step on @xmath397 with the shift @xmath328 , rather than on @xmath8 with the shift @xmath298 .",
    "indeed , using the fastest known deterministic reduction algorithm  @xcite , the latter computation uses @xmath398 field operations . on the other hand ,",
    "the former is in @xmath399 , since @xmath400 and @xmath401 .",
    "we recall that @xmath330 is close to the average of @xmath299 .",
    "we state this formally in the following lemma . for the sake of presentation",
    "we postpone the proof until later in [ subsec : properties_proof ] .",
    "[ lem : rowparlindiag ] let @xmath402 , and define @xmath329 as in [ eqn : expandmindegs ] .",
    "a.   if a matrix @xmath403}^{{}\\times { } } } } $ ] is @xmath298-reduced with @xmath298-column degree @xmath404 , then @xmath393 is @xmath328-reduced with @xmath328-column degree @xmath404 . b.   if two matrices @xmath8 and @xmath85 in @xmath9}^{{}\\times { } } } } $ ] are right unimodularly equivalent , then @xmath327 and @xmath405 are also right unimodularly equivalent .",
    "c.   if @xmath121}^{{}\\times { } } } } $ ] is nonsingular , @xmath302 is a @xmath298-reduced form of @xmath8 , and @xmath302 has @xmath298-column degree @xmath404 , then @xmath393 is a @xmath328-reduced form of @xmath327 with @xmath328-column degree @xmath404 .",
    "our algorithm will first build @xmath327 and then find a @xmath328-reduced form @xmath406 for this new matrix .",
    "we note that , for any @xmath298-reduced form @xmath302 of @xmath8 , the matrix @xmath407 is a suitable reduced form and , as remarked earlier , has the property that it is easy to recover @xmath302 .",
    "however , it is not the case that any @xmath406 computed by shifted reduction from @xmath327 will have the form @xmath408 . in order to solve this issue",
    ", we will rely on normalization as in [ lem : popov_normalize ] .",
    "this allows us to deduce @xmath342 from @xmath406 , and then the entries of @xmath47 can be read off from those of @xmath342 .",
    "diagrammatically we have @xmath409    [ cor : reduction_pivdeg ] let @xmath121}^{{}\\times { } } } } $ ] be nonsingular and let @xmath364 denote the degrees of the diagonal entries of the hermite form @xmath47 of @xmath8 . using the notation from [ defn : rowparlindiag ] , we have that    a.   @xmath410 is the identity matrix , b.   if @xmath411}^{{}\\times { } } } } $ ] is a @xmath328-reduced form of @xmath327 , then @xmath412 .",
    "@xmath413 follows from the construction of @xmath342 . from [ lem : rowparlindiag ] we have that @xmath342 is a @xmath328-reduced form of @xmath8 , so that @xmath414 follows from @xmath413 and [ lem : popov_normalize ] .    in particular",
    ", @xmath47 can be recovered as being the submatrix of @xmath415 formed by its columns @xmath392 .",
    "[ eg : reducing_mindeg ] consider a matrix @xmath416}^{{}\\times { } } } } $ ] such that its hermite form @xmath47 has diagonal degrees @xmath417 .",
    "as shown earlier , @xmath418 & { x}^{17 } &         & [ 16 ]                          \\\\      [ 16 ] &   -1~     & { x}^{17 } & [ 16 ]                          \\\\      [ 2 ]   &         &    -1~    & ( 3 )                          \\\\      [ 6 ] &         &         & [ 6 ] & ( 7 )                   \\\\      [ 16 ] &         &         & [ 16 ] & [ 16 ] & { x}^{17 } & [ 16 ]   \\\\      [ 0 ] &         &         & [ 0 ] & [ 0 ] &    -1~    & ( 1 )     \\end{bmatrix}.\\ ] ] we see that @xmath419 corresponds to the row degree of @xmath342 , that this matrix has @xmath328-column degree @xmath404 and that its @xmath328-leading matrix is the identity .",
    "in particular , it is @xmath328-reduced .",
    "in addition , from @xmath414 of [ lem : rowparlindiag ] , @xmath342 and @xmath327 are right - unimodularly equivalent . as a result",
    ", @xmath342 is a @xmath328-reduced form of @xmath327 .",
    "let @xmath406 be any @xmath328-reduced form of @xmath327 .",
    "then @xmath406 also has @xmath328-column degree @xmath404 , its @xmath328-leading matrix is invertible , and its degree profile is @xmath420 & [ 2 ] & [ 2 ] & [ 2 ] & [ 2 ] & [ 2 ] & [ 2 ] \\\\      [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] \\\\      [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] \\\\      [ 3 ] & [ 3 ] & [ 3 ] & [ 3 ] & [ 3 ] & [ 3 ] & [ 3 ] \\\\      [ 7 ] & [ 7 ] & [ 7 ] & [ 7 ] & [ 7 ] & [ 7 ] & [ 7 ] \\\\      [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] & [ 17 ] \\\\      [ 1 ] & [ 1 ] & [ 1 ] & [ 1 ] & [ 1 ] & [ 1 ] & [ 1 ]    \\end{bmatrix}.\\ ] ] while @xmath406 is generally not of the form @xmath393 for @xmath302 some @xmath298-reduced form of @xmath8 , it still follows from [ lem : popov_normalize ] that @xmath421 .",
    "9999      the results in the previous subsection lead to [ algo : hermite_knowndeg ] for the computation of the hermite form @xmath47 from @xmath8 and @xmath299 .",
    "its main computational task is to compute a column reduced form of a matrix of dimension @xmath422 and degree @xmath326 ( step  12 ) .",
    "this can be done efficiently and deterministically with the algorithm in  ( * ? ? ? * section  8) .",
    "[ prop : knowndeg_hermite ] let @xmath121}^{{}\\times { } } } } $ ] be nonsingular , and let @xmath423 be the degrees of the diagonal entries of the hermite form of @xmath8 .",
    "on input @xmath8 and @xmath299 , [ algo : hermite_knowndeg ] computes the hermite form of @xmath8 using @xmath293 field operations .",
    "the correctness of the algorithm follows directly from [ cor : reduction_pivdeg ] and from the remark that a matrix @xmath424}^{{}\\times { } } } } $ ] is @xmath328-column reduced if and only if @xmath425 is column reduced ( for the uniform shift ) , where @xmath426 is the diagonal matrix at step  11 .",
    "furthermore , we have @xmath427 and @xmath428 . since @xmath429 , and",
    "as @xmath47 is in hermite form and @xmath299 are the degrees of its diagonal entries , we have @xmath430 .",
    "thus , @xmath431 and the degrees of @xmath426 and @xmath327 are both at most @xmath432 .",
    "their product @xmath433 therefore has degree at most @xmath434 . on the other hand , these matrices",
    "have dimension @xmath435 as a result , step  12 uses @xmath293 field operations  ( * ? ? ? * theorem  18 ) .",
    "concerning step  13 , from [ cor : reduction_pivdeg ] the matrix @xmath406 has row degree @xmath329 , and @xmath436 is a constant matrix .",
    "thus the computation of @xmath437 can be performed via complete linearization of the rows of @xmath406 , using @xmath438 operations .",
    "this concludes the proof since @xmath439 .    combining [ algo : hermite_knowndeg , alg : hermitediagonal ] results in a deterministic algorithm for computing the hermite form of @xmath8 in @xmath293 field operations .",
    "[ eg : ctd_knowndeg ] let @xmath440 be the field with @xmath441 elements , and consider the matrix @xmath442}^{{}\\times { } } } } $ ] from [ eg : ctd_hermitediagonal ] : @xmath443 according to [ eg : ctd_hermitediagonal ] the diagonal entries of the hermite form of @xmath8 have degrees @xmath444 .",
    "note that @xmath299 is non - uniform , and @xmath445 .    using the column reduction algorithm in @xcite to compute a @xmath298-reduced form of @xmath8",
    "would imply working on the matrix @xmath446 , which has degree @xmath447 . in this case",
    "partial linearization gives us a @xmath448 matrix @xmath327 and a shift @xmath329 such that @xmath401 and @xmath449 .",
    "in particular , the matrix @xmath450 to be reduced has degree @xmath451 .    to see this , [ defn : rowparlindiag ] gives the parameters @xmath452 , @xmath453 , @xmath454 , @xmath455 , the expansion - compression matrix @xmath456 and finally @xmath457 computing a @xmath328-reduced form for @xmath327 gives @xmath458",
    "note that @xmath459 , and more precisely , @xmath460 normalizing @xmath406 via @xmath461 gives @xmath462 performing the inverse linearization , by taking columns @xmath463 of @xmath362 , directly gives the entries in the hermite form of @xmath8 : @xmath464 with @xmath465      let us now give the detailed proof of [ lem : rowparlindiag ] .",
    "@xmath413 since @xmath403}^{{}\\times { } } } } $ ] is @xmath298-reduced with @xmath298-column degree @xmath404 , it has row degree @xmath299 since otherwise the invertible matrix @xmath322 would have a zero row .",
    "we show that @xmath466 is a permutation of the rows and columns of @xmath467 .",
    "in particular , @xmath466 is invertible and thus @xmath393 is @xmath328-reduced .",
    "let us first observe it on an example .",
    "we consider the case @xmath349 .",
    "then @xmath302 has the following degree profile , @xmath468 & [ 2 ] & [ 2 ] & [ 2 ] \\\\      [ 37 ] & [ 37 ] & [ 37 ] & [ 37 ] \\\\      [ 7 ] & [ 7 ] & [ 7 ] & [ 7 ] \\\\      [ 18 ] & [ 18 ] & [ 18 ] & [ 18 ]    \\end{bmatrix}\\ ] ] with invertible @xmath298-leading matrix . following the construction in [ defn : rowparlindiag ] , we have @xmath469 and @xmath470 &         &         & [ 2 ] & [ 2 ] &         & [ 2 ] \\\\",
    "[ 16 ] & { x}^{17 } &         & [ 16 ] & [ 16 ] &         & [ 16 ] \\\\    [ 16 ] &   -1     & { x}^{17 } & [ 16 ] & [ 16 ] &         & [ 16 ] \\\\",
    "[ 3 ] &         &    -1    & [ 3 ] & [ 3 ] &         & [ 3 ] \\\\    [ 7 ] &         &         & [ 7 ] & [ 7 ] &         & [ 7 ] \\\\    [ 16 ] &         &         & [ 16 ] & [ 16 ] & { x}^{17 } & [ 16 ] \\\\    [ 1 ] &         &         & [ 1 ] & [ 1 ] &    -1    & [ 1 ]   \\end{bmatrix}.\\ ] ] observe that @xmath302 has @xmath328-column degree at most @xmath404 componentwise , and that its @xmath328-leading matrix is @xmath471 where @xmath472 .",
    "since @xmath322 is invertible , @xmath466 is invertible as well .",
    "furthermore @xmath393 is @xmath328-reduced and that it has @xmath328-column degree @xmath404 .    in the general case , by construction of @xmath393 one can check that @xmath466 is a matrix in @xmath473 such that    * its @xmath0 submatrix with row and column indices in @xmath392 is equal to @xmath322 , * its @xmath474 submatrix with row and column indices in @xmath475 is equal to the identity matrix , * its other entries are all zero .",
    "this directly implies that @xmath466 is invertible .",
    "in addition by construction @xmath393 has @xmath328-column degree at most @xmath404 componentwise .",
    "the fact that @xmath466 is invertible also implies that @xmath393 has @xmath328-column degree exactly @xmath404 .",
    "@xmath414 denote by @xmath476}^{{}\\times { } } } } [ { \\widetilde{{n}}}-{n}]$ ] the submatrix of @xmath327 formed by its columns at indices @xmath477 .",
    "up to a permutation of its columns , @xmath327 is then @xmath478 $ ] . in particular , @xmath479 is right - unimodularly equivalent to @xmath480 = [ { \\mathbf{0 } } \\;\\ ; { \\mathbf{a}}]$ ] . for the remainder of this proof we will use the shorthand notation",
    "@xmath481 $ ] .",
    "define the matrix @xmath482 $ ] whose row @xmath483 is the coordinate vector with @xmath150 at index @xmath484 , for all @xmath485 and @xmath386 .",
    "that is , we have @xmath486 by construction , the matrix @xmath487 is upper triangular with diagonal entries @xmath488 , and thus unimodular . as a result , @xmath489",
    "similarly , we have that @xmath490 .    since @xmath491 by assumption",
    ", we obtain @xmath492 .",
    "this implies that @xmath493 since the matrix @xmath494 is invertible ( more precisely , its determinant is @xmath150 ) .",
    "@xmath495 is a direct consequence of @xmath413 and @xmath414 .",
    "as mentioned in [ subsec : degdet ] , we aim at a cost bound which involves the generic determinant bound . in [ sec : diagonals ] we showed how to compute the diagonal entries of @xmath47 in @xmath496 operations , with @xmath3 the average column degree of the input matrix .",
    "however , this does not take into account the fact that the degrees of its rows are possibly unbalanced . in [ sec : hermite ] , we were only able to obtain the cost bound @xmath293 for computing the remaining entries of @xmath47 .",
    "the goal of this section is to give a reduction from the general case of hermite form computation to the case where the degree of the input matrix @xmath8 is in @xmath497 . for this , we make use of the partial linearization framework from  ( * ? ? ?",
    "* section 6 ) already used in the previous section . a reduction given in  ( * ? ? ?",
    "* proposition  3.2 ) for the computation of shifted popov forms , gives , in the specific case of hermite form computation , the following result .",
    "[ prop : reduction_hermite ] let @xmath121}^{{}\\times { } } } } $ ] be nonsingular . using no operation in @xmath1 , one can build a matrix @xmath270}^{{}\\times { } } } } $ ] such that    a.   @xmath498 and @xmath499 , b.   the hermite form of @xmath8 is the trailing principal @xmath0 submatrix of the hermite form of @xmath273 .",
    "while ( * ? ? ?",
    "* proposition 3.2 ) works with general shifted popov form , it is not immediately clear in that paper what shifts should be considered and how @xmath273 should be built in order to ensure that the hermite form of @xmath8 directly appears as a submatrix of the hermite form of @xmath273 .",
    "we give these details here , along with some examples .",
    "to get a rough idea of how partial linearization works and how it benefits hermite form computation , consider the matrix @xmath500 in this case the column degrees of the matrix are quite unbalanced as @xmath150 and @xmath501 have an average column degree of @xmath502 .",
    "however we can create a second matrix , of slightly larger dimension , as @xmath503\\ ] ] which shares some nice properties with @xmath8 ( here , the superscript `` @xmath504 '' is used to indicate that we are doing _ column _ partial linearization ) .",
    "this matrix is constructed by dividing the third column into its two @xmath505-adic coefficients ( rows @xmath506 and @xmath352 ) and then including an additional row ( row @xmath150 ) which provides the single column operation which would undo the division .",
    "thus by construction this matrix is unimodularly equivalent to @xmath507\\ ] ] and it is easily seen that the hermite form of @xmath508 will be given by the @xmath509 trailing submatrix of the hermite form of @xmath510 .",
    "as such we rely on the computation of the hermite form of a matrix , not much larger than the original matrix , but having the nice property that the degrees are much more uniformly distributed .",
    "[ rem : parlin ] because the purpose is different , the partial linearization used in this section is defined in a way that is slightly different from what was done in [ subsec : hermite_knowndeg ] .",
    "it would be possible to use the same linearizations but at the cost that the proofs would involve permutation matrices and would be considerably more difficult to follow .",
    "as in [ subsec : hermite_knowndeg ] , column partial linearization of @xmath8 transforms the columns of large degree into several columns of lower degree , and for each new column it also augments @xmath8 with a kind of elementary row .",
    "the latter rows allow us to preserve properties of the matrix , including for example its determinant , its smith form , and most importantly for us , its hermite form .",
    "we first describe the elementary rows . in the definition below , @xmath511 is typically , but not necessarily , the column degree of @xmath8 .",
    "[ dfn : linmats ] let @xmath512 and @xmath513 . for each @xmath366 , write @xmath514 with @xmath515 and @xmath516 , and let @xmath517 . define the expansion - compression matrix @xmath518}^{{}\\times { } } } } [ { n}]$ ] as @xmath519\\ ] ] and the matrix @xmath520}^{{}\\times { } } } } [ { \\widetilde{{n}}}]$ ] as follows :    * for @xmath384 with @xmath521 , the @xmath522 row of @xmath523 is @xmath524\\ ] ] with the entry @xmath525 at index @xmath526 and the entry @xmath150 on the diagonal , * for @xmath384 and @xmath527 , the @xmath528 row of @xmath523 is @xmath529\\ ] ] with the entry @xmath150 on the diagonal .    by construction",
    "the principal @xmath530 submatrix of @xmath523 is lower triangular with  @xmath150 on the diagonal and hence is unimodular .",
    "this will play an important role in the properties of the partial linearization of @xmath8 .",
    "the column partial linearization is formed by this block @xmath523 of elementary rows , and by another block of @xmath25 rows containing the expanded columns of @xmath8 .",
    "the @xmath50-th column of @xmath8 is expanded into @xmath339 columns , all having degree at most @xmath330 except possibly the one which contains the highest degree entries , whose index is denoted by @xmath531 .",
    "[ dfn : parlin ] let @xmath121}^{{}\\times { } } } } $ ] and @xmath532 . using the notation in [ dfn : linmats ] ,",
    "let @xmath533 with @xmath534 the _ column partial linearization of @xmath8 _ is the matrix @xmath535}^{{}\\times { } } } } $ ] defined by :    * the first @xmath536 rows of @xmath510 are @xmath523 , * the last @xmath25 rows of @xmath510 form the unique matrix @xmath537}^{{}\\times { } } } } [ { \\widetilde{{n}}}]$ ] such that @xmath538 and @xmath381 has all columns of degree less than @xmath330 except possibly those at indices @xmath533 .",
    "[ exmp : colparlin ] let @xmath1 be the finite field with @xmath539 elements . using a computer algebra system , we choose @xmath540}^{{}\\times { } } } } $ ] with prescribed degrees and random coefficients from @xmath1 .",
    "instead of showing the entire matrix let us only consider the degree profile which in this case is @xmath541 & [ 10 ] & [ 63 ] & [ 5 ] \\\\        [ 75 ] & [ 51 ] & [ 95 ] & [ 69 ] \\\\        [ 4 ] & [ 5 ] & [ 48 ] & [ 7 ] \\\\        [ 10 ] & [ 54 ] & [ 75 ] & [ 6 ]    \\end{bmatrix},\\ ] ] where @xmath347 $ ] for @xmath304 indicates an entry of degree @xmath26 .",
    "we take @xmath542 rather than the column degrees of @xmath8 , for reasons that we make clear below , in particular in [ exmp : reducing_degrees ] .",
    "then the degree of linearization is @xmath543 , and we have @xmath544 .",
    "this implies that columns @xmath150 and @xmath545 of @xmath8 will not be expanded , column @xmath506 of @xmath8 will be expanded into @xmath506 columns , and column @xmath352 of @xmath8 will be expanded into @xmath352 columns .",
    "thus , @xmath546 and the indices of the columns containing the high - degree entries for each column of @xmath8 are @xmath547 . then @xmath548 &    0   & [ 2 ] & [ 10 ] & [ 39 ] & [ 5 ] \\\\        [ 11 ] & [ 39 ] & [ 15 ] & [ 75 ] & [ 39 ] & [ 39 ] & [ 69 ] \\\\          0   & [ 8 ] &    0   & [ 4 ] & [ 5 ] & [ 39 ] & [ 7 ] \\\\",
    "[ 14 ] & [ 35 ] &    0   & [ 10 ] & [ 39 ] & [ 39 ] & [ 6 ]    \\end{bmatrix}. { {    \\leavevmode\\unskip\\penalty9999 \\hbox{}\\nobreak\\hfill    \\quad\\hbox{$\\diamond$}}}\\ ] ]    the key observations now are that @xmath549 is not much larger than @xmath8 and that the hermite form of @xmath8 is the trailing submatrix of the hermite form of @xmath549 .",
    "[ lem : colparlin ] let @xmath121}^{{}\\times { } } } } $ ] , @xmath125 , @xmath550 , and @xmath551}^{{}\\times { } } } } [ { \\widetilde{{n}}}]$ ] as in [ dfn : linmats ] .",
    "then ,    a.   @xmath552 ; b.   if @xmath553 componentwise then @xmath554 ; c.   the hermite form of @xmath549 is @xmath555 , where @xmath47 is the hermite form of @xmath8 .    using the notation in [ dfn : linmats ] , we have @xmath556 , as well as @xmath557 for all @xmath50 . hence @xmath558 which gives part @xmath413 .",
    "part @xmath414 directly follows from the construction of @xmath510 : the @xmath50-th column of @xmath8 is split into @xmath339 columns in @xmath549 , all of degree at most @xmath330 except possibly one , which has degree at most @xmath559 if we have @xmath560 componentwise .    to see part @xmath495 let @xmath561 denote the principal @xmath474 submatrix of @xmath523 .",
    "since @xmath561 is unit lower triangular , it is unimodular .",
    "let also @xmath37 be unimodular such that @xmath562 .",
    "then , by construction we have @xmath563      the previous subsection shows how to reduce the non - uniformity of the degrees of the columns of @xmath8 , if one takes @xmath564 .",
    "now , we perform a similar action on the rows of @xmath8 .    for a matrix @xmath121}^{{}\\times { } } } } $ ] and a tuple @xmath565 , one defines the _ row partial linearization _",
    "@xmath327 of @xmath8 in a similar way as its column partial linearization .",
    "precisely , these linearizations are linked by the identity @xmath566 . however , as we are interested in _ right_-unimodular equivalence ( i.e. using column operations ) and not _",
    "left_-unimodular equivalence ( i.e. using row operations ) we can not simply make use of the results from the previous subsection .",
    "instead here we give properties of the _ row _ partial linearization of @xmath8 related to _",
    "right_-unimodular equivalence .",
    "[ lem : rowparlin ] let @xmath121}^{{}\\times { } } } } $ ] , @xmath567 , and @xmath568 $ ] be as in [ eqn : expandmatparlin ] .",
    "then , the hermite form of @xmath569 is @xmath570 , where @xmath47 is the hermite form of @xmath8 .",
    "let @xmath561 be the principal @xmath571 submatrix of the transpose @xmath572}^{{}\\times { } } } } [ ( { \\widetilde{{n}}}-{n})]$ ] .",
    "@xmath561 is unit upper triangular and thus unimodular . then by construction @xmath573 with the right - hand side being right - unimodularly equivalent to @xmath574 . as a result",
    ", @xmath569 is right - unimodularly equivalent to @xmath575    the hermite form @xmath47 is in particular row reduced and so one can consider the _ remainder of @xmath576 modulo @xmath47 _ ( * ? ? ? * theorem  6.3 - 15 ) .",
    "this is the unique matrix @xmath302 such that @xmath577 for some matrix @xmath578 with the degrees of the rows of @xmath302 being less than those of the corresponding rows of @xmath47 .",
    "since @xmath579 with the right - hand side being in hermite form , the result follows .",
    "the properties of row and column partial linearizations given above imply that for any tuples @xmath511 and @xmath580 the hermite form of @xmath8 appears as a submatrix of the hermite form of @xmath581 .",
    "furthermore , from part @xmath413 of [ lem : colparlin ] we also know that @xmath273 is @xmath582 with @xmath583 .",
    "thus , to obtain [ prop : reduction_hermite ] , it remains to give a choice of @xmath511 and @xmath580 such that the degree of @xmath273 is at most @xmath584 .",
    "for this , we use ideas from ( * ? ? ? * section 6 ) .    let @xmath585 be permutation matrices such that @xmath586_{i , j}$ ] satisfies @xmath587 of course these permutations",
    "@xmath588 may not be unique : in what follows , we fix any such pair of permutations .",
    "it can be found in @xmath589 integer comparisons by sorting the @xmath590 triples @xmath591 in non - increasing order , where @xmath592 is the coefficient of @xmath8 at index @xmath593 .",
    "if we define @xmath594 by @xmath595 then @xmath596 by definition of @xmath44 in .",
    "set @xmath597 , where @xmath598 is seen as a row vector .",
    "then @xmath599 leads to the desired degree property . before proving this ,",
    "let us first observe it on the matrix of [ exmp : colparlin ] .",
    "[ exmp : reducing_degrees ] let @xmath8 be the matrix from [ exmp : colparlin ] .",
    "one can verify that @xmath600 .",
    "also @xmath601 & [ 10 ] & [ 63 ] & [ 5 ] \\\\",
    "[ 75 ] & [ 51 ] & [ 95 ] & [ 69 ] \\\\        [ 4 ] & [ 5 ] & [ 48 ] & [ 7 ] \\\\        [ 10 ] & [ 54 ] & [ 75 ] & [ 6 ]      \\end{bmatrix }      \\begin{bmatrix }        0 & 0 & 0 & 1 \\\\        0 & 1 & 0 & 0 \\\\        1 & 0 & 0 & 0 \\\\        0 & 0 & 1 & 0      \\end{bmatrix }      \\\\      & =      \\begin{bmatrix }        [ 95 ] & [ 51 ] & [ 69 ] & [ 75 ]   \\\\        [ 75 ] & [ 54 ] & [ 6 ] & [ 10 ]   \\\\         [ 48 ] & [ 5 ] & [ 7 ] & [ 4 ]   \\\\        [ 63 ] & [ 10 ] & [ 5 ] & [ 2 ]      \\end{bmatrix}.    \\end{aligned}\\ ] ] this gives @xmath602 and @xmath542 , with @xmath603 .",
    "@xmath510 has its degrees as shown in [ exmp : colparlin ] , and in particular we have @xmath604 thus , we obtain @xmath605 &    0       &    0       & [ 24 ] \\\\          0         &    1   &    0       &    0   &    0   & -{x}^{40 } &    0       &    0   \\\\          0         &    0   &    1       &    0   &    0   &    0       & -{x}^{40 } &    0   \\\\          0         &    0   & -{x}^{40 } &    1   &    0   &    0       &    0       &    0   \\\\          0         &    0   & [ 23 ]      &    0   & [ 2 ] & [ 10 ]      & [ 39 ]      & [ 5 ] \\\\          -{x}^{45 } & [ 11 ] & [ 39 ]      & [ 15 ] & [ 44 ] & [ 39 ]      & [ 39 ]      & [ 44 ] \\\\          0         &    0   & [ 8 ]      &    0   & [ 4 ] & [ 5 ]      & [ 39 ]      & [ 7 ] \\\\          0         & [ 14 ] & [ 35 ]      &    0   & [ 10 ] & [ 39 ]      & [ 39 ]      & [ 6 ]    \\end{bmatrix},\\ ] ] which has degree @xmath606 . this is less than @xmath607 .",
    "9999    coming back to the general case , we want to prove that @xmath608}^{{}\\times { } } } } $ ] has degree at most @xmath609 .",
    "first , we show that the sum of the components of @xmath580 is less than @xmath610 .",
    "indeed , by construction , the first @xmath611 rows of @xmath549 have degree at most @xmath612 , and its last @xmath25 rows have degree at most @xmath613_{1\\le i\\le { n}}$ ] componentwise , where @xmath329 is considered as a column vector and @xmath614 stands for the @xmath50-th entry of @xmath615 .",
    "therefore , @xmath616    since @xmath617 the result in [ lem : colparlin ] translated for row partial linearization ensures that @xmath618 has degree at most @xmath619 .",
    "[ eg : ctd_parlin ] let @xmath440 be the field with @xmath441 elements , and consider the matrix @xmath442}^{{}\\times { } } } } $ ] from [ eg : ctd_hermitediagonal ] : @xmath443 after sorting the triples we obtain the linearization degrees @xmath620 resulting in @xmath621 and @xmath622 giving @xmath623    computing the diagonal entries of the hermite form of @xmath624 as in [ sec : diagonals ] , we obtain their degrees @xmath625 .",
    "proceeding as in [ sec : hermite ] we can to compute the complete hermite form using the knowledge of these degrees giving @xmath626 with @xmath627 and @xmath47 the hermite form of @xmath8 as given in [ eg : ctd_knowndeg ] .",
    "in this paper we have given new , deterministic algorithms for computing the hermite normal form and the determinant of a nonsingular polynomial matrix .",
    "our methods are based on the efficient , deterministic computation of the diagonal elements of the hermite form .",
    "while our algorithms are fast in terms of operations over the field @xmath628 , they do not take into consideration when there is growth of coefficients in the field , an issue for example when working over fields such as @xmath629 .",
    "kannan @xcite was the first to show that computing hermite normal forms over @xmath630 $ ] can be done in polynomial time .",
    "fraction - free algorithms for hermite form computation which take into consider coefficient growth have been given in @xcite ( using a shifted popov algorithm ) and @xcite ( where the problem is converted into a large linear system ) .",
    "we plan to investigate exact algorithms for hermite and determinant computation based on chinese remaindering . in this case",
    "the reduced domains ( e.g. @xmath631 $ ] ) do not encounter coefficient growth which allows for effective use of the algorithms in this paper .",
    "the issue in this case is the reconstruction of the images , where we expect the techniques used in @xcite will be helpful .    in terms of additional future research",
    "we are interested in finding efficient , deterministic algorithms for other forms such as the popov normal form , or more generally the shifted popov normal forms .",
    "in addition we are interested in fast normal form algorithms where the entries are differential operators rather than polynomials .",
    "such algorithms are useful for reducing systems of linear differential equations to solvable first order systems @xcite .",
    "j.  abbott , m.  bronstein , and t.  mulders .",
    "fast deterministic computation of determinants of dense matrices . in _ proceedings of the international symposium on symbolic and algebraic computation _ , issac99 , pages 197204 .",
    "acm press , 1999 .",
    "b.  beckermann , g.  labahn , and g.  villard . shifted normal forms of polynomial matrices . in _ proceedings of the international symposium on symbolic and algebraic computation _ , issac99 , pages 189196 , 1999 .",
    "w.  eberly , m.  giesbrecht , and g.  villard .",
    "on computing the determinant and smith normal form of an integer matrix . in _ proceedings of 41st ieee symposium on foundations of computer science ( focs2000 ) _ , pages 675687 , 2000 .",
    "p.  giorgi , c .- p .",
    "jeannerod , and g.  villard . on the complexity of polynomial matrix computations . in _ proceedings of the international symposium on symbolic and algebraic computation , philadelphia , pennsylvania , usa _ , issac03 , pages 135142 .",
    "acm press , 2003 .",
    "jeannerod , v. neiger , e. schost and g. villard .",
    "fast computation of minimal interpolation bases in popov form for arbitrary shifts . in _ proceedings of the international symposium on symbolic and algebraic computation _ , issac16 , pages ?  ? .",
    "acm , 2016 .",
    "v. neiger .",
    "fast computation of shifted popov forms of polynomial matrices via systems of modular polynomial equations . in _ proceedings of the international symposium on symbolic and algebraic computation _ , issac16 , pages ?  ? .",
    "acm , 2016 .",
    "a.  storjohann and g. villard .",
    "computing the rank and a small nullspace basis of a polynomial matrix . in _ proceedings of the international symposium on symbolic and algebraic computation _ , issac05 , pages 309316 , 2005 .",
    "w.  zhou and g.  labahn",
    ". fast computation of column bases of polynomial matrices . in _ proceedings of the international symposium on symbolic and algebraic computation _ , issac13 , pages 379387 .",
    "acm , 2013 .    w.  zhou and g.  labahn .",
    "fast computation of unimodular completion of polynomial matrices . in _ proceedings of the international symposium on symbolic and algebraic computation _ , issac14 , pages 413420 .",
    "acm , 2014 ."
  ],
  "abstract_text": [
    "<S> given a nonsingular @xmath0 matrix of univariate polynomials over a field @xmath1 , we give fast and deterministic algorithms to compute its determinant and its hermite normal form . </S>",
    "<S> our algorithms use @xmath2 operations in @xmath1 , where @xmath3 is bounded from above by both the average of the degrees of the rows and that of the columns of the matrix and @xmath4 is the exponent of matrix multiplication . </S>",
    "<S> the soft-@xmath5 notation indicates that logarithmic factors in the big-@xmath5 are omitted while the ceiling function indicates that the cost is @xmath6 when @xmath7 . </S>",
    "<S> our algorithms are based on a fast and deterministic triangularization method for computing the diagonal entries of the hermite form of a nonsingular matrix .    </S>",
    "<S> hermite normal form ; determinant ; polynomial matrix . </S>"
  ]
}