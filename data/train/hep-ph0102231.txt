{
  "article_text": [
    "the purpose of this paper is twofold .",
    "first , we introduce a new method to code xloops  in c@xmath0  with the help of the ginac  library  @xcite .",
    "this also serves as an introduction to ginac  for symbolic computations .",
    "second , we introduce a new procedure for tensor reduction which allows us to manipulate one - loop one- , two- and three - point feynman integrals with arbitrary tensor rank and arbitrary powers of propagators . working in orthogonal and parallel space of momentum configuration @xcite",
    ", this procedure allows one to reduce the one - loop tensor integrals to a basis of simpler integrals without using the passarino - veltman procedure .",
    "this procedure has been implemented in the new version of the xloops  program , called xloops - ginac .",
    "unlike the original xloops , xloops - ginac  currently only handles the one - loop case ( and as such competes with existing programs for one - loop calculations such as those presented in  @xcite ) but it has been designed with being a prerequisite for two - loop problems in mind , and the authors goal is to make xloops - ginac  a powerful tool for one- and two - loop analytical feynman integrations .    in sections 2 and 3 we introduce briefly the motivation to rewrite xloops  in c@xmath0 , and the ginac  library . in section 4",
    "the procedure used to reduce one - loop two- and three - point integrals is presented . in two appendices simple examples of c@xmath0  programs using the ginac  library and the xloops - ginacinterface for one - loop integrals are presented .",
    "in the past , the xloops  package @xcite has been developed in a heterogenous environment : the core routines for transforming feynman graphs into the basic integrals and for analytic integration are implemented in the language of the maple  @xcite computer algebra system , the graphical user interface is written in tcl / tk  @xcite , and the numerical integration is done by c programs that are generated and compiled at run - time by xloops .",
    "this way of implementation has a couple of drawbacks :    * while maple  and other computer algebra systems provide sophisticated mathematical capabilities , it is not suited as an environment for developing large applications such as xloops , as it was not primarily intended as a programming language and only offers limited support for modern software engineering .",
    "for example , the only structured data type in maple  is the list , the distinction between local and global variables is not consistently enforced by all language constructs , and tools such as debuggers are very rudimentary .",
    "* different versions of maple  are in places incompatible with respect to the language .",
    "this leads to xloops  having to provide two versions of all program parts written in maple one for maple  v release 1 and one for release 3 . with release 4 and later",
    "releases xloops  can not currently be run .",
    "not only does the parallel development of multiple program versions require higher maintenance effort , but it is also impractical for the user to require the installation of a specific version of maple  just to run xloops . *",
    "maple  is a commercial system , which prevents xloops  from getting a wide reach of distribution , especially in academic institutions .",
    "* the communication between different program parts is difficult because maple  has insufficient support for embedding programs written in other languages , it requires higher efforts for the conversion of data and , in some cases , for the multiple storing of redundant information ( for example , the information about graph topologies has to be duplicated for the calculation and for the graphical interface ) . * in general , it is more difficult to maintain and develop a heterogenous program package .",
    "for the programmer it is necessary to become acquainted with three different environments ( maple , tcl / tk , and c ) .    the listed drawbacks and the observation of bugs related to the internal structure of xloops  led to the conclusion that the program had reached a state in which further development was almost impossible ( approx .",
    "15000 lines of badly documented source code , in some places very obscure programming techniques like identifiers whose meaning depends on capitalization ) .",
    "thus , the decision was made to rewrite xloops  from scratch , putting it on more solid grounds .",
    "in particular , it was decided that the new version of xloops  should be written in one uniform programming language .",
    "as the essential part of xloops  are the analytical calculations , traditional computer algebra systems ( maple , mathematica  @xcite , reduce  @xcite and mupad  @xcite ) were envisaged at first .",
    "but all these share more or less the same deficiencies as maple , especially the low suitability of the built - in language for the development of large systems .",
    "it was therefore decided to use an established programming language as the foundation and extend it by the required algebraic capabilities . during the development of xloops",
    "it was noted that only a small subset of the mathematical functions provided by maple  are actually needed .",
    "these are :    * complex arithmetic with arbitrary precision ; * simple manipulation of symbolic expressions , like expansion , collection , substitution of variables ; * simplification of rational functions ; * symbolic differentiation ; * special functions like polylogarithms and the gamma function ; * laurent series expansion of expressions containing these functions ; * solving systems of linear equations for the analysis of the tensor structure of the integrals ; * handling expressions containing elements of some particular non - commutative algebras such as clifford and su(3 ) lie algebras ; * numeric integration .",
    "features that are particularly _ not _ required are :    * symbolic integration since only few master integrals need to be really integrated and they will be done by hand ; * calculation of limits ; * treatment of domains and assumptions about the range of values of variables .    due to the following reasons , c@xmath0  has been chosen as the programming language :    * c@xmath0  is officially standardized  @xcite , so fewer complications are expected from the future development of the language .",
    "* c@xmath0  allows to write down symbolic expressions in their natural mathematical notation by means of operator overloading ( e.g. ` 4*a+b ` instead of something like ` add(mul(4,a),b ) ` ) . *",
    "c@xmath0  is available for virtually all computer platforms .",
    "in particular , there are free compilers for the unix systems predominant in the academic area .",
    "* there is a large assortment of development tools available like powerful source - level debuggers and systems for version control and documentation .",
    "* there is also a large number of existing libraries , especially for arbitrary precision arithmetics .",
    "* as a compiled language , c@xmath0  is also suitable for numeric integration .",
    "based on c@xmath0 we developed a system called `` ginac '' that is primarily aimed at the re - implementation of xloops , but is also suited for the development of other systems that integrate algebraic and numeric calculations with user interfaces for methods of data acquisition .",
    "ginac  @xcite is a c@xmath0  library for handling symbolic mathematical expressions .",
    "some of the features of the library are    * complex arithmetic with arbitrary precision , based on the cln  library by bruno haible  @xcite ; * manipulation of symbolic expressions ; * normalization of rational functions ; * matrices and systems of linear equations ; * numerous special functions ( trigonometric and hyperbolic functions , exponential functions , logarithms , gamma und polygamma functions ) ; * symbolic differentiation ; * series expansion of functions ( taylor and laurent series ) ; * clifford and su(3 ) color algebras ( this is a recently added feature in ginac , making it especially suited for applications in particle physics ) ; * it is open source , licensed under the gnu general public license .",
    "this means that it is not only freely available but also free in the sense that users have access to the sources and are allowed to modify or extend the library and to redistribute the modified version .",
    "this is in sharp contrast to most other cas that place heavy restrictions on their legal use .",
    "ginac  is designed in an object - oriented fashion .",
    "the central class of ginac  is the class ` ex ` that stores a symbolic expression . strictly speaking , `",
    "ex ` only represents a `` smart '' pointer to the real expression which is stored as a tree whose nodes are objects subclassed from the abstract base class ` basic ` .",
    "the operators ` + ` , ` - ` , ` * ` und ` / ` are overloaded to simplify the creation of expressions in the program code .",
    ".the most important ginac  classes [ cols= \" > , < \" , ]     table  [ classes ] gives an overview of the most important subclasses of ` basic ` .",
    "the classes can be categorized into the `` atomic '' classes ` numeric ` , ` symbol ` and ` constant ` which are at the leaves of an expression tree , and the container classes ( all others ) which themselves contain expressions .",
    "the representation of sums and products with numeric coefficients and powers was chosen for reasons of efficiency ( see  @xcite and  @xcite ) .",
    "a detailed description of the internal functionality of the basic classes and methods of ginac  is given in  @xcite and  @xcite .",
    "in this section we present our algorithm for tensor reduction , which was introduced by collins  @xcite and further developed by kreimer  @xcite .",
    "a similar approach was used in a subsequent paper by ghinculov and yao  @xcite .",
    "the advantages of this approach compared to other procedures like the passarino - veltman procedure , especially with regard to future two - loop applications , are outlined in  @xcite .    to regularize uv - divergences",
    ", we are working in @xmath1 dimensional space - time .",
    "the main idea is to split the space of integration in a parallel and an orthogonal space .",
    "we define the parallel space to be the linear span of the @xmath2-external momenta @xmath3 ( @xmath4 ) involved in the integrand .",
    "this parallel space has a finite dimension @xmath5 .",
    "the remaining @xmath6 dimensions span an orthogonal complement of the parallel space called the orthogonal space @xcite .",
    "once an explicit configuration of external momenta is chosen , the dimension of the parallel space @xmath7 is known , and the scalar products are written explicitly in terms of the components of the external momenta @xmath8 a general one - loop integral can be written as @xmath9 in the usual passarino - veltman approach , to keep an explicitly covariant form , one expands tensor integrals of the type @xmath10 in a basis of lorentz tensors constructed from the metric tensor @xmath11 and the external momenta @xmath3 .",
    "since @xmath12 is symmetric , one can re - group indices belonging to the parallel space and to the orthogonal space together @xmath13 where @xmath14 denote the numbers of indices for the 0- , 1- ,  components . the indices @xmath15 ,",
    "@xmath16 in the orthogonal space have to result in a symmetric combination of metric tensors in the orthogonal space @xmath17 @xmath18 with @xmath19 .",
    "the normalization can be derived by looking at contractions with @xmath17 and observing that @xmath20 one obtains @xmath21",
    "the coefficients needed for the calculation of a specific component of a general one - loop tensor integral therefore have the form @xmath22 in the next sections , we present an algorithm to calculate @xmath23 for the one - loop two- and three - point tensor integrals .",
    "in the rest of this paper , we call @xmath23 tensor integrals .      in this section , the algorithm for an automatic calculation of one - loop two - point tensor integrals is presented .",
    "we first consider the case where @xmath24 is timelike , @xmath25",
    ". then one can choose a reference frame where @xmath26 = @xmath27 .",
    "the general integral for a tensor feynman diagram shown in fig.[fig1 ] has the form @xmath28 with @xmath29 where @xmath30 and @xmath31 span the parallel and orthogonal subspaces respectively and the integral vanishes unless @xmath32 is even . in the spacelike and lightlike cases where @xmath33 or @xmath34 one can choose a reference frame where @xmath26 = @xmath35 or @xmath26 = @xmath36 respectively and the integral space can be split into a two - dimensional parallel and a @xmath37 dimensional orthogonal subspace .",
    "we will consider these cases later in section  [ spacelike ] .",
    "a genuine one - loop integral has @xmath38 , but the more general case is needed in the case of the reduction of integrals with more than one loop .",
    "the strategy now is to express @xmath39 as a polynomial of simpler integrals .",
    "it turns out that the usual scalar one- and two - point integrals @xmath40 and @xmath41 ( in passarino - veltman notation @xcite ) are sufficient .",
    "this expansion is always possible except for some special cases that we will consider later .",
    "firstly consider the general case where @xmath42 .",
    "we express the numerator of the integral in eq.([eq1 ] ) as a function of @xmath43 and @xmath44 . from eq.([eq2 ] ) we get : @xmath45 inserting eq.([eq3 ] ) into eq.([eq1 ] ) and expanding the numerator of the integrand , one obtains @xmath46 with @xmath47 being simple functions of @xmath48 , @xmath49 , @xmath50 , and @xmath51 we see that the second case actually corresponds to a scalar two - point function . for the last two cases , from eq.([eq2 ] ) one can insert @xmath52 or @xmath53 and expand the numerator of the integrands in eq.([eq5 ] ) .",
    "then eq.([eq2 ] ) can be completely reduced to the one - point functions @xmath54      if @xmath55 , eq.([eq5 ] ) must be rewritten using @xmath56 if @xmath57 then @xmath58 and @xmath39 has the simple form @xmath59 that is actually the one - loop one - point function .",
    "if @xmath60 , one performs partial fraction decomposition and finds @xmath61 which is a combination of one - loop one - point functions .",
    "the notation we use for one - loop three - point functions is shown in fig.[fig2 ] .",
    "we are working in the frame of reference where the external momentum configuration is @xmath62 , @xmath63 .",
    "the parallel space is now two - dimensional and the general form of the one - loop three - point tensor function is @xmath64 with @xmath65 where \\{@xmath30 , @xmath66 } and @xmath31 span the parallel and orthogonal subspaces , respectively .",
    "firstly we consider the case where @xmath67 and @xmath68 .",
    "then we are always able to express @xmath30 , @xmath66 , @xmath31 in terms of @xmath43 , @xmath44 , @xmath69 : @xmath70 \\\\      & = { \\frac{1}{2 q_{21}}}\\left[c_{10}l_0+(p_3-p_2)+c_{11}\\right ] , \\\\",
    "l_\\perp^2 & = l_0 ^ 2-l_1 ^ 2-p_3-c_{20 } \\end{split}\\ ] ] with @xmath71 again , as in the case of two - points functions , one substitutes eq.([eq11 ] ) into eq.([eq9 ] ) and obtains a combination of scalar three - point functions @xmath72 with @xmath73 being simple functions of masses and components of external momenta . more explicitly , the integrand on the right hand side of eq.([eq12 ] ) contains terms like @xmath74 with @xmath75 and positive @xmath76 . other possible combinations lead to a vanishing integral",
    ".    the first group of terms can be obtained from derivatives of scalar three - point functions . for the last two cases , using eq.([eq10 ] ) one can expand the numerator in terms of propagators @xmath77 in the denominator .",
    "this expansion is always possible and reduces the second group of terms to one - point functions .",
    "similarly the third group of terms can be reduced to one - loop two - point functions .",
    "note that in this step we meet two kinds of one - loop two - point functions .",
    "the first kind is the one - loop two - point function with one parallel dimension that was already found in the previous section .",
    "the second kind is the one - loop two - point function with two parallel dimensions of the internal momentum @xmath78 that is not trivial and will be given in the section 4.2.3 as a separate case .      in this case",
    "the expansions in eq.([eq11 ] ) can not be used .",
    "however , eq.([eq9 ] ) can be reduced by partial fraction decomposition .",
    "first consider the case @xmath80 with arbitrary values of @xmath81 .",
    "eq.([eq10 ] ) simplifies to @xmath82    if @xmath83 , partial fraction decomposition leads to a separation into terms which contain only two propagators @xmath84 if @xmath85 , two propagators are equal and it is sufficient to calculate @xmath86 the three - point integrals are then reduced to combinations of two - point integrals with two parallel dimensions .",
    "we will treat this class of two - point functions in section 4.2.3 .      in this special case , the integrals collapse from two parallel dimensions to one and eq.([eq10 ] ) reads @xmath89 where the components @xmath66 and @xmath31 can be combined into @xmath90 to form a new @xmath91 dimensional orthogonal subspace with @xmath92 then the integral can be reduced to a simpler integral with only one parallel dimension @xmath93 again , one can use the same procedure as in the general case @xmath94 that reduces eq.([eq17 ] ) to a form similar to eq.([eq12 ] ) .      in the preceding section",
    "we have shown that general one - loop three - point tensor functions can be reduced to the usual scalar integrals and one new two - point function corresponding to a tensor component in a two - dimensional parallel space .",
    "explicitly , this integral reads @xmath96^{t_1}\\;[(l_0+q_{20})^2-(l_1+q_{21})^2-l_\\perp^2-m_2 ^ 2+i \\rho]^{t_2 } } \\\\   & = { \\int \\!\\ !",
    "d^dl}\\ , \\frac{(l_0-q_{10})^i\\;l_1^j\\;l_\\perp^k}{[l_0 ^ 2-l_1 ^ 2-l_\\perp^2-m_1 ^ 2+i \\rho]^{t_1}\\;[(l_0+q_0)^2-(l_1+q_1)^2-l_\\perp^2-m_2 ^ 2+i \\rho]^{t_2 } } \\end{split}\\ ] ] with @xmath97 , @xmath98 ; @xmath99 .",
    "if @xmath100 , this integral reduces to the one - loop two - point function in one - dimensional parallel space as found in the previous section . if , on the other hand , @xmath101 , one can always find a lorentz boost which transforms into a reference frame where the transformed 4-momentum @xmath102 has either only one non - zero component ( @xmath103 or @xmath104 if @xmath105 is timelike or spacelike ) or where @xmath106 if @xmath105 is lightlike .",
    "the loop momentum has to be boosted accordingly which , however , modifies only the numerator of the integrand in eq.([eq19 ] ) .",
    "explicitly , consider the boost @xmath107 then the three sub - cases are treated as follows .      in this case , under the transformation in eq.([eq20 ] )",
    "the integral will be reduced to one - loop two - point functions with a one - dimensional parallel space as found in the previous section : @xmath109^i\\;\\left[\\gamma\\left(\\beta\\ , l_0^{\\prime}+l_1^{\\prime}\\right)\\right]^j\\;l_\\perp^{\\prime \\,k}}{\\left[l_0^{\\prime\\,2}-l_1^{\\prime\\,2}-l_\\perp^{\\prime\\,2}-m_1 ^ 2+i \\rho\\right]^{t_1}\\,\\left[(l_0^{\\prime}+p)^2-l_1^{\\prime\\,2}-l_\\perp^{\\prime\\,2}-m_2 ^ 2+i \\rho\\right]^{t_2}}\\ ] ] with @xmath110 , @xmath111 and @xmath112 .      in this case",
    "the boost with @xmath114 , @xmath115 and @xmath116 transforms to a reference frame in which the integral reads @xmath117^i\\;\\left[\\gamma\\left(\\beta\\ , l_0^{\\prime}+l_1^{\\prime}\\right)\\right]^j\\;l_\\perp^{\\prime \\,k}}{\\left[l_0^{\\prime\\,2}-l_1^{\\prime\\,2}-l_\\perp^{\\prime\\,2}-m_1 ^ 2+i \\rho\\right]^{t_1}\\,\\left[l_0^{\\prime\\,2}-(l_1^{\\prime}+p)^2-l_\\perp^{\\prime\\,2}-m_2 ^ 2+i \\rho\\right]^{t_2}}\\ ] ] the components @xmath118 and @xmath119 can be combined to form a new @xmath91 dimensional orthogonal subspace while @xmath66 spans the parallel subspace . using the same procedure as in the previous sections one can reduce the integral completely to the scalar one- and two - point functions .      in this case the transformation in eq.([eq20 ] ) is singular and the integral @xmath95 becomes @xmath121^{t_1}\\,[(l_0+q_0)^2-(l_1+q_0)^2-l_\\perp^2-m_2 ^ 2+i \\rho]^{t_2}}. \\label{eq21}\\ ] ] by solving the system of equations @xmath122 one obtains @xmath123 inserting eq.([eq22 ] ) into eq.([eq21 ] ) and expanding the numerator of the integrand , the integral will be reduced to scalar one - point functions and a simpler tensor integral @xmath124^{t_1}\\,[(l_0+q_0)^2-(l_1+q_0)^2-l_\\perp^2-m_2 ^ 2+i \\rho]^{t_2 } } .\\ ] ] the explicit calculation of this integral is given in @xcite .",
    "this completes the description of our algorithm for tensor reduction .",
    "we did not reproduce explicit expressions for the basic scalar integrals in this paper since these can be found in the literature  @xcite .",
    "due to the limitations of maple and the internal structure of xloops  we decided to rewrite xloops  from scratch , based on ginac , a c@xmath0  library to replace maple as an algebraic programming environment @xcite .",
    "an efficient algorithm for one - loop one- , two- and three - point tensor reduction was also successfully implemented . at this stage of the project ,",
    "a package for calculating one - loop one- , two- and three - point tensor integrals is available and can be downloaded from http://wwwthep.physik.uni-mainz.de/~xloops . like ginac",
    ", it is distributed under the terms of the gnu general public license .    as the next step",
    ", we plan to rewrite the module for two - loop one- , two- and three - point integrals and to completely recode xloops  in c@xmath0  using the ginac  library , providing a package for doing particle physics in a homogenous c@xmath0  environment .",
    "part of this work is supported by the dfg - forschungsproject `` ko 1069/6 - 1 '' and the `` graduiertenkolleg eichtheorien  experimentelle tests und theoretische grundlagen '' at the university of mainz .",
    "the authors would like to thank jrgen krner , dirk kreimer and hubert spiesberger for many fruitful comments and corrections , and lars brcher , alexander frink and richard kreckel for inspiring discussions .",
    "in this section we introduce the definitions for the one - loop integral functions in xloops - ginac .",
    "the xloops - ginac  package provides the three ginac  functions ` oneloop1pt ( ) ` , ` oneloop2pt ( ) ` , and ` oneloop3pt ( ) ` , which can be used in algebraic expressions like any other predefined ginac  function :    * the one - point function @xmath125^t}.\\ ] ] * the two - point function @xmath126^{t_1}\\,[l_0 ^ 2\\,-\\,l_\\perp^2\\,-\\,m_2 ^ 2\\,+\\,i\\rho]^{t_2}}.\\end{gathered}\\ ] ] * the three - point function @xmath127 with @xmath128    as with any ginac  function , the arguments and return values of the above functions are objects of type ` ex ` so the return values as well as input parameters can be any symbolic or numeric expression .    in order to illustrate the output of xloops - ginac , we give one example program that calculates and prints out both analytical and numerical results of the uv - divergent and the finite terms of the integral @xmath129    # include < iostream > # include < ginac / ginac.h > # include < xloops / xloops.h > using namespace ginac ; using namespace xloops ;    int main ( ) \\ { symbol q(``q '' ) , m1(``m1 '' ) , m2(``m2 '' ) , eps(``eps '' ) , rho(``rho '' ) ; ex a = oneloop2pt(1 , 0 , q , m1 , m2 , 1 , 1 , rho ) ; a = a.series(eps = = 0 , 4 ) ; ex a1 = a.coeff(eps , -1).subs(rho = = 0 ) ; ex a2 = a.coeff(eps , 0).subs(rho = = 0 ) ; cout < < `` order eps^-1 is '' < <",
    "endl < < a1.normal ( ) < < endl ; cout < < `` order eps^0 is '' < < endl <",
    "< a2.normal ( ) < < endl ; ex b1 = a.subs(rho==0).subs(m1==80).subs(m2==80).subs(q==100).evalf ( ) ; cout < < `` numerical value up to order eps^2 is '' < < endl < < b1 < < endl ; return 0 ; }    the output of this program reads    order eps^-1 is -1/2*i*pi^2*q    order eps^0 is ( -1/2*q^(-1)*m2 ^ 2 - 1/2*q+1/2*q^(-1)*m1 ^ 2)*(i*pi^2*q^(-1)*((1/2*q-1/2*q^(-1)*(m1 + ^2-m2 ^ 2))*r2ex1(-m2 ^ 2,-(1/2*q-1/2*q^(-1)*(m1 ^ 2-m2 ^ 2))^2)+r2ex1(-m1 ^ 2,-(1/2*q+1 + /2*q^(-1)*(m1 ^ 2-m2 ^ 2))^2)*(1/2*q+1/2*q^(-1)*(m1 ^ 2-m2 ^ 2)))+q*(-i*pi^2*log(pi)*q + ^(-1)+pi^(3/2)*(i*sqrt(pi)*q^(-1)*(-2*log(2)-euler)+2*i*log(2)*sqrt(pi)*q^(-1 ) + + 2*i*sqrt(pi)*q^(-1)))-pi^3)+1/2*q^(-1)*(-i*pi^2*m2 ^ 2*log(m2 ^ 2)-i*pi^2*log(pi ) + * m2 ^ 2+pi^2*(i - i*euler)*m2 ^ 2)-1/2*q^(-1)*(pi^2*(-i*m1 ^ 2*log(m1 ^ 2)-i*euler*m1 ^ 2 + + i*m1 ^ 2)-i*pi^2*log(pi)*m1 ^ 2 )    numerical value up to order eps^2 is ( -493.48022005446793098*i)*eps^(-1)+(5019.9161138633880865*i)+(-4.6074255521 + 943996428e-15 - 25944.085010687200793*i)*eps+order(eps^2 )",
    "in order to illustrate the use of xloops - ginac  for calculating one - loop feynman diagrams , we give one example program that is actually part of the automated regression tests of the package .",
    "it checks that the longitudinal part of the vacuum polarization in qed vanishes on the one - loop level as required by gauge invariance , i.e. @xmath130 where @xmath131 the general tensor structure of @xmath132 is @xmath133 with functions @xmath134 and @xmath135 that , because of  , satisfy @xmath136 this expression is obtained by contracting @xmath132 with @xmath137 : @xmath138 the following program verifies that this expression vanishes for the first three orders of the regularization parameter :            ex i = -pow(e , 2 ) / pow(q , 2 ) * dirac_slash(q , d ) * ( dirac_slash(l , d ) + dirac_slash(q , d ) + m * dirac_one ( ) ) * dirac_slash(q , d ) * ( dirac_slash(l , d ) + m * dirac_one ( ) ) ; i = dirac_trace(i).simplify_indexed(sp ) ;            lp15 cm * line * & * explanation * +   + 1 - 4 & include the header files for the ginac  and xloops  libraries .",
    "+ 8 - 10 & declaration of all appearing symbols .",
    "these are the spacetime dimension @xmath139 , the loop and external momenta @xmath78 and @xmath140 , the mass @xmath141 , the parallel and orthogonal space loop components @xmath30 and @xmath31 , the dimensional regularization parameter @xmath142 , and the infinitesimal imaginary part of the propagator @xmath143 .",
    "with ginac it is necessary to specify the name used for printing expressions because c@xmath0  does not provide the names of variables at run - time .",
    "+ 12 - 15 & the possible scalar products of the momenta are expressed in terms of @xmath140 , @xmath30 and @xmath31 and are registered in a ` scalar_products ` object which is later passed to ` simplify_indexed ( ) ` : @xmath144 ` pow ( ) ` is used for exponentiation because the c@xmath0  operator @xmath145 has the wrong precedence in relation to the operator @xmath146 .",
    "+ 17 - 21 & the numerator of the integrand of eq.([eqn : ward2 ] ) is constructed using clifford algebra objects in a nearly 1-to-1 translation of the right - hand side of that equation .",
    "note that ginac does not require the use of a special operator for non - commutative products here .",
    "+ 22 & the trace is taken and the resulting expression which contains metric tensors is simplified , inserting the scalar products defined above ( the result for ` i ` is @xmath147 ) .",
    "expressions are usually manipulated in the c@xmath0  oriented notation _ _",
    "_ ) , but the functional notation _ _",
    "_ ) is also available , as shown .",
    "+ 24 - 29 & the integral is now expressed in terms of the basic ` oneloop2pt ( ) ` integral functions by assembling the coefficients of all powers of @xmath30 and @xmath31 .",
    "+ 30 & to get the uv divergence as well as the finite part , one needs to take the series expansion of the integral at the pole @xmath149 .",
    "+ 32 - 34 & the coefficients of the series for the orders @xmath150 , @xmath151 and @xmath152 are extracted and the limit @xmath153 is taken by calling the function ` subs ( ) ` .",
    "+ 36 - 38 & the three coefficients are simplified with ` expand ( ) ` and printed to the standard output stream .",
    "when run , this program will output all three coefficients as ` 0 ` .",
    "+   +    99 c.  bauer , a.  frink , r.  kreckel , _ introduction to the ginac framework for symbolic computation within the c@xmath0  programming language _ ,",
    "arxiv : cs.sc/0004015 , to appear in j. symb .",
    "d.  kreimer , _ dimensional regularization in the standard model _ , dissertation , universit@xmath154 t mainz 1992 .",
    "d.  kreimer , _ tensor integrals for two - loop standard model calculations _ , univ . of tasmania preprint utas - phys-93 - 40 , hep - ph/9312223 j.  collins , _ renormalization",
    "_ , cambridge univ . press , 1984 a.  ghinculov , y .- p .",
    "yao , nucl .",
    "b 516:385 - 401 , 1998 , hep - ph/9702266 l.  brcher , j.  franzkowski , d.  kreimer , + _ a new method for computing one - loop integrals _ , comput . phys . commun .",
    "85 ( 1995 ) 153 ; + _ oneloop 2.0  a program package calculating one - loop integrals _ , comput .",
    "commun . 107",
    "( 1997 ) 281 - 292 ; + l.  brcher , j.  franzkowski , a.  frink , d.  kreimer , _ introduction to xloops _ ,",
    "meth . a389 ( 1997 ) 323 - 342",
    ". t.  hahn , _ automatic loop calculations with feynarts , formcalc and looptools _ , nucl .",
    "proc . suppl .",
    "89:231 - 236 , 2000 , hep - ph/0005029 b.  w.  char et al . ,",
    "_ maple  v language reference manual _ , springer , new york , 1991 .",
    "j.  ousterhout , _ tcl and the tk toolkit _ , addison - wesley , redwood city , calif . , 1994 .",
    "s.  wolfram , _ mathematica : a system for doing mathematics by computer , 2nd edition _ , addison - wesley , redwood city , calif .",
    "a.  c.  hearn , _ reduce  user s manual version 3.5 _ , rand publication , santa monica , 1993 .",
    "w.  oevel , f.  postel , g.  rscher , s.  wehmeier , _ das mupad  tutorium _ , springer , berlin , 1999 .",
    "american national standards institute , iso / iec 14882 - 1998(e ) , _ programming languages  c@xmath0 _ , 1998 .",
    "b.  haible , _ cln , a class library for numbers _ , http://clisp.cons.org/~haible/packages-cln.html k.  o.  geddes , s.  r.  czapor , g.  labahn , _",
    "algorithms for computer algebra _ ,",
    "kluwer academic publishers , boston , 1992 .",
    "a.  frink , _ computer - algebraische und analytische methoden zur berechnung von vertexfunktionen i m standardmodell _ , dissertation , universitt mainz , 2000",
    ". l.  brcher , _ automatische berechnung von strahlungskorrekturen in perturbativen quantenfeldtheorien _ ,",
    "dissertation , universitt mainz , 1997 .",
    "g.  passarino , m.  veltman , nucl .",
    "b160 ( 1979 ) 151 .",
    "g.  t hooft , m.  veltman , nucl .",
    "b153 ( 1979 ) 365 - 401 .",
    "+ a.  davydychev , r.  delbourgo , j. math . phys .",
    "39 , ( 1998 ) , 4299 , hep - th/9709216 ."
  ],
  "abstract_text": [
    "<S> we present a new algorithm for the reduction of one - loop tensor feynman integrals within the framework of the xloops  project , covering both mathematical and programming aspects . </S>",
    "<S> the new algorithm supplies a clean way to reduce the one - loop one- , two- and three - point feynman integrals with arbitrary tensor rank and powers of the propagators to a basis of simple integrals . </S>",
    "<S> we also present a new method of coding xloops  in c@xmath0  using the ginaclibrary . </S>"
  ]
}