{
  "article_text": [
    "in this paper , we consider vertex - weighted graphs and denote the weight of vertex @xmath8 as @xmath9 .",
    "let @xmath10 be a graph with an initial weight of 1 on each vertex . for adjacent @xmath11",
    ", weight can be transferred from @xmath8 to @xmath12 via an _ acquisition move _ if the initial weight on @xmath12 is at least as great as the weight on @xmath8 . when there are no remaining acquisition moves , the set of vertices with non - zero weight forms an independent set referred to as the _ residual set_. the minimal cardinality of this set , @xmath0 , is the _ total acquisition number _ of @xmath10 .",
    "a set of acquisition moves that results in a residual set is referred to as an _ acquisition protocol _ and is _ optimal _ if the independent set has cardinality @xmath13 this conception of acquisition number was first introduced by @xcite and has subsequently been investigated in @xcite .",
    "when acquisition moves are allowed to transfer any integral amount of weight from a vertex , the minimum cardinality of the residual set is called the _ unit acquisition number _ , denoted @xmath14 ; see @xcite .",
    "if acquisition moves are allowed to transfer any non - zero amount of weight from a vertex , the minimum cardinality of the residual set is called the _ fractional acquisition number _ , denoted @xmath15 ; see @xcite . because we consider only total acquisition number , any instances of the term  acquisition number \" in this paper should be understood to mean  total acquisition number \" .",
    "although we offer a few minor results for graphs with the canonical weighting scheme ( where each vertex has initial weight 1 ) , we primarily consider variants on that weighting scheme where the initial weights of vertices are allowed to assume any integral value . any @xmath2-vertex graph with vertex labels @xmath16",
    "can be associated with an integer sequence @xmath17 where @xmath18 denotes the initial weight given to vertex @xmath19 . for such _ weight sequences _ and particular classes of graphs , we consider in section 2 the size @xmath20 of the largest possible residual set , whether @xmath0 changes or remains the same as the unit weight case , and the existence of legal residual sets with sizes equal to every integral value in the interval @xmath21 $ ] .",
    "our primary focus is , however , on the total acquisition number of graphs with randomly weighted vertices .",
    "although there exists work on random graphs whose vertices each begin with unit weight due to @xcite , we are not aware of any existing work on graphs with randomly - weighted vertices . in section  2 , we make some preliminary remarks . in section 3 ,",
    "we obtain bounds on the total expected acquisition number of the randomly weighted path , where vertex weighting is assigned according to both the poisson and maxwell - boltzman distributions ( in the latter case , the chips are thus considered to be distinguishable , and obviously the bose - einstein distribution might yield completely different results ! ) .",
    "we also show that the limiting ratio @xmath7 exists , and that the acquisition number is tightly concentrated around its expected value . additionally , in a different context , we offer a non - optimal acquisition protocol algorithm for the randomly weighted path and exactly compute the expected size of the resultant  residual \" set .",
    "in this section , we provide some basic results . the proofs of these results are not very difficult , but the underlying logic is important for section 3 .      in this subsection",
    ", we consider graphs in which the vertices can have any non - negative integer weight .",
    "one question we could ask is what is the smallest maximum vertex weight necessary to drive @xmath0 down to 1 ?",
    "denote such a value as @xmath23 .",
    "we specifically consider the complete graph @xmath24 on @xmath2 vertices ; the @xmath2-cycle and @xmath2-path @xmath25 ; and the star , wheel , and complete bipartite graphs denoted respectively by @xmath26 and @xmath27 .",
    "it is clear that the @xmath28 , because we can have a special vertex ( the center vertex for @xmath29 and @xmath30 ; any vertex for @xmath24 ) absorb the weight of its neighbors first and thus make it the largest weighted vertex in @xmath31 .    for @xmath27 ,",
    "its @xmath32 value is 1 as well .",
    "let @xmath33 be the two vertex sets of @xmath27 , where @xmath34 .",
    "let the initial weight of all vertices be 1 .",
    "let two vertices @xmath35 be two arbitrary vertices from @xmath36 and @xmath37 . at the first step , @xmath38 can acquire all the weight from vertices in @xmath39 and @xmath40 can acquire all the weight from vertices in @xmath41 . because @xmath42 , @xmath43 and @xmath40 can acquire the weight from @xmath38 .",
    "thus , the @xmath32 value for complete bipartite graphs is also 1 . we next consider paths and cycles , for which the situation is more nuanced .",
    "let @xmath44 be a path on @xmath45 vertices , where @xmath46 and @xmath47 are the endpoints of the path .",
    "let each vertex have weight at least one .",
    "in order for @xmath47 to be the only vertex in the residual set , its initial weight must be at least @xmath48 .",
    "we prove this lemma by inducting on @xmath2 .",
    "the base cases are trivial ( simply assign both vertices in @xmath49 an initial weight of 1 , and use the configuration 1 - 1 - 2 for @xmath50 as the minimal cases ; higher initial weights on the non - terminal vertices would simply need us to have more weight on @xmath47 ) .",
    "suppose the statement is true for @xmath51 with initial configuration @xmath52 and let us consider @xmath53 .",
    "after acquiring all the weights from @xmath46 through @xmath54 , @xmath47 has weight at least @xmath55 .",
    "thus , @xmath56 must have initial weight at least @xmath55 as well .",
    "the problem of finding the smallest maximum vertex weight necessary to drive @xmath0 down to 1 for a path on @xmath2 vertices is equivalent to finding the smallest initial weight for the middle vertex to absorb all the weight in that path . by lemma 2.1",
    ", a weight of @xmath57 is needed to take all the weight on an @xmath58-path to a leaf vertex ; applying this fact to the two middle vertices , we see that a weight of @xmath57 suffices to move all the weight on @xmath59 to these vertices and then to one of them . solving @xmath60 for @xmath61",
    ", we get @xmath62 for even @xmath2 .",
    "if @xmath2 in odd , we get @xmath63 by the same reasoning .",
    "it follows immediately that @xmath64 as well .",
    "the @xmath32 value for a @xmath65 grid graph is thus at most @xmath66 ; here we use the strategy of moving all the weight in each row to the center vertex , and then all the weight in the middle column to the center of the grid .",
    "for the lower bound , let us note that , regardless where the absorbing vertex @xmath8 is , at least one of the four corners is at distance @xmath67 from @xmath8 . hence ,",
    "at the time when the weight from this corner is pushed to the final destination , the weight at @xmath8 must be at least @xmath68 .",
    "however , perhaps some of this weight comes from the other three neighbours of @xmath8 . as a result",
    ", we only get that the initial weight at @xmath8 is at least @xmath69 , which is matching the upper bound for @xmath70 both even , and is always by a multiplicative factor of at least @xmath71 away from it .",
    "let @xmath72 be an arbitrary graph .",
    "note that the size of the maximum independent set is a natural upper bound of the size of an residual set . by choosing the weight of vertices in @xmath10 strategically ,",
    "how many different sizes of residual sets can we get for a given graph ? in this subsection , we focus on @xmath73 , and @xmath27 .",
    "it is clear that the size of the residual set of @xmath24 must be 1 for any assignment of weights , because the maximum independent set of @xmath24 has size 1 .",
    "now , consider @xmath74 . because the size of the maximum independent set is @xmath75",
    ", the residual set can be no larger than @xmath75 .",
    "indeed , by assigning the vertices in a largest independent set of @xmath74 the first @xmath75 largest weights , we can obtain a residual set with @xmath75 vertices .",
    "for example , @xmath76 2 s and @xmath77 1 s can do the job .",
    "now , to obtain a residual set of size @xmath19 , where @xmath78 , we need to choose @xmath19 vertices which form an independent set that are  equally spaced to the extent possible \" , and strategically assign the values of the @xmath19 largest weights to these vertices so as to enable those vertices to acquire the weights of the other vertices .",
    "this can be achieved because of the reasoning in section 2.1 by using weights of @xmath79 on each of the @xmath19 paths that the cycle can be thought of as being comprised of .",
    "next we see that the size of the residual set of @xmath29 can be any integer from @xmath80 to @xmath75 as well .",
    "we can place the smallest weight on the center vertex to reduce the problem to the problem of @xmath74 after the first move . with the same argument , paths can have residual set with size from @xmath80 to @xmath81 , where the upper bound is the size of the largest independent set of @xmath51 .",
    "the size of the residual set of @xmath82 for @xmath83 can be any integer from 1 to @xmath61 . by placing the @xmath61 largest numbers of the sequence on the vertices of the larger side of the bipartite graph",
    ", we ensure that no vertex on the smaller side can acquire any additional chips , thus resulting in a residual set including all vertices of the larger side . after choosing appropriate weights of vertices",
    ", we can ensure that exactly one vertex on the larger side is acquired by assigning the smallest number to one vertex on the larger side , then assigning the next @xmath2 smallest numbers to the vertices of the smaller side .",
    "then , as long as the sum of the smallest number and the @xmath84 largest number is smaller than the @xmath85 largest number , we have a residual set of size @xmath86 .",
    "we can use a similar strategy to get any other number between 1 and @xmath87 .",
    "now , we consider @xmath51 with unit weights . without making use of the fact that @xmath88",
    ", we can show that :    [ pathsubadd ] the sequence @xmath89 is subadditive .",
    "consider the graph @xmath90 , with @xmath91 .",
    "if @xmath90 is subdivided into @xmath51 and @xmath92 and distinct acquisition protocols are run on each , then the resulting residual set has size @xmath93 because @xmath94 is definitionally the size of the minimal residual set , the fact that it is possible to obtain a residual set of size @xmath95 gives the bound @xmath96 as desired .    [ fekete ] for @xmath97 ,",
    "the limit @xmath98 exists and is equal to @xmath99 .",
    "this result follows directly from lemma 2.2 and fekete s lemma .",
    "although it is intuitively obvious that this limit equals @xmath71 , the power of subadditivity will become clear in the next section , where we use random weights .",
    "in this section , we consider the total acquisition number of @xmath51 when each vertex begins with weight @xmath100 , i.e.  the vertices have random weights determined by a sequence of independent poisson variables with unit mean .",
    "we denote this specific configuration as @xmath101 . in general",
    ", the upper case letter @xmath36 will be used for the acquisition number when it is viewed as a random variable .",
    "we can begin by proving that the limit @xmath102 exists , and provide upper and lower bounds for @xmath103 .",
    "we start with a few remarks",
    ".    * remarks . *",
    "first , let us note that checking whether a given weighting of @xmath104 can be used to move the total weight onto one vertex can be done as follows .",
    "starting from @xmath46 , we push its weight to the right as much as possible , ending at @xmath105 for some @xmath106 . then , independently ( and using the initial weighting ) , we start from @xmath47 and push its weight to the left as much as possible , ending at @xmath107 for some @xmath108 .",
    "it is straightforward to see that if @xmath109 , then our task is possible ; otherwise , it is not .",
    "next , finding @xmath110 ( for a given weighting ) can be easily done as follows .",
    "suppose that weights on the subpath @xmath111 can be moved to one vertex .",
    "if weights on the subpath @xmath112 can also be moved to one vertex , then this is at least as good strategy as moving only weighs from @xmath113 and then applying the best strategy for the remaining path ( consider simple coupling between the two strategies ) . as a result ,",
    "finding @xmath110 for any weighting can be done with an easy greedy algorithm ( and with the support of a computer ) .",
    "finally , we get from the above remarks that @xmath114 is an increasing function of @xmath2 .",
    "[ pathsubadd ] the sequence @xmath115 is subadditive .",
    "same as the proof of lemma 2.2 for each sample realization .",
    "we then take expectations to get the result .",
    "[ fekete ] the limit @xmath116 exists and is equal to @xmath117    this result follows directly from lemma  [ pathsubadd ] and fekete s lemma .",
    "[ poissonbounds ] the expected acquisition number of @xmath118 is bounded as @xmath119    define an _ island _ as the `` clump '' of vertices to the left of the first zero weight ; to the right of the last zero weight ; or in between any two successive zero weights .",
    "islands are of non - negative size , and thus each consist of a possibly empty set of non - zero numbers .",
    "the island size thus has a geometric distribution with ",
    "success \" probability @xmath120 and expected size @xmath121 , yielding an expected number of @xmath122 , for the random number @xmath123 of islands .",
    "( note that the expected number of zeros is @xmath124 . )",
    "theoretically , the expected total acquisition number could be calculated using the conditional probability expression @xmath125\\\\ & = & \\lr\\frac{n}{e}+c\\rr e[a_t(p_{\\vert\\lambda_1\\vert})]\\\\ & = & \\lr \\frac{n}{e}+c\\rr \\sum_{j=0}^n e(a_t(p_j^{\\rm{poi}}))p(\\vert\\lambda_1\\vert = j ) , \\end{aligned}\\ ] ] where the second equality follows from wald s lemma . however , calculating @xmath126 $ ] is difficult for arbitrary @xmath127 .",
    "the probability that an island is of size @xmath127 equals @xmath128 .",
    "thus , there is a roughly @xmath129 probability that an island has size three or less , and a reasonable lower bound can be obtained by restricting the calculation to those cases .",
    "it is clear that @xmath130 = 0 $ ] and that @xmath131 = e\\left[a_t(p_2^{\\rm{poi } } ) \\right ] = 1.$ ] for @xmath50 , however , it is possible to have @xmath132 or @xmath133 because @xmath134 requires that @xmath135 and @xmath136 , we condition on each of @xmath137 , and @xmath138 being non - negative , and , setting @xmath139 , we get @xmath140 & = & \\sum_{k\\ge1}\\frac{e^{-1}}{1-e^{-1}}\\frac{1}{k!}\\lr\\sum_{j\\ge k+1}\\frac{e^{-1}}{(1-e^{-1})}\\frac{1}{j!}\\rr^2\\\\ & = & \\frac{1}{(e-1)^3}\\sum_{k\\ge1}\\frac{1}{k!}\\lr\\sum_{j\\ge k+1}\\frac{1}{j!}\\rr^2\\\\ & = & \\frac{e^2}{(e-1)^3}\\sum_{k=1}^{\\infty}\\frac{1}{k!}\\lr1-\\frac{\\gamma(k+1,1)}{\\gamma(k+1)}\\rr^2\\\\ & \\approx & 0.10648.\\end{aligned}\\ ] ] thus @xmath141 $ ] can be calculated as @xmath142 = p\\left[a_t(p_3 ) = 1 \\right](1 ) + p\\left[a_t(p_3 ) = 2 \\right](2 ) \\approx 1.10648.\\ ] ] using ( 1 ) and the monotonicity of @xmath114 , we can now calculate a lower bound for @xmath143 as @xmath144    to obtain an upper bound , we use the fact that @xmath145 for any @xmath127 . returning to our conditional probability expression ,",
    "this allows us to construct an upper bound for @xmath114 as @xmath146 which gives us the desired bounds for @xmath147    the above bounds can certainly be improved , but we do not do so here  rather , we point out methods that might lead to a tightening .",
    "first we can compute @xmath148 or even more higher order terms so as to improve the lower bound .",
    "for the upper bound , one may do a more careful calculation by using the fact that @xmath149 , and separating the argument for @xmath150 into the even and odd cases .",
    "however , these methods are likely to yield only incremental improvements , and so we next report on the results of simulations which yield theoretical bounds that are vastly better than the ones above , and also suggest the value of the limiting constant .      as we already remarked in subsection  3.1 , with the support of a computer",
    ", it is easy to find @xmath151 for a given initial weighting . by considering all possible @xmath152 configurations of weights at most @xmath153",
    ", we can easily estimate @xmath154 from below and above .",
    "we considered all paths on at most 21 vertices to obtain the following bounds ( for more details , see  @xcite ) .    [",
    "cols=\"^,^,^,^\",options=\"header \" , ]     based on that we get the following .",
    "the expected acquisition number of @xmath118 is bounded as @xmath155    moreover , we performed a number of experiments on paths of length @xmath156 .",
    "simulations _ suggest _ that @xmath157 ( again , for more details , see  @xcite ) .",
    "although considering a poisson model for weight distribution makes it significantly easier to bound @xmath143 , there is typically more interest in models where a fixed amount of weight is distributed on @xmath51 . in order to translate our result for the poissonized model to this depoissonized model , we begin by establishing two lemmas .    for @xmath51 , assigning an initial weight of @xmath100 chips to each vertex is equivalent to considering the model in which we generate the total number of chips according to a @xmath158 distribution , and then distribute them independently and uniformly on the @xmath2 vertices .",
    "one half of the proof follows from the fact that the sum of independent poi(1 ) variables has a poi(@xmath2 ) distribution .",
    "next , consider a random distribution of @xmath159 chips on @xmath51 as in the statement of the lemma .",
    "the probability that two particular vertices , @xmath160 , receive @xmath161 chips respectively ( the same argument holds for any number of vertices ) is given by @xmath162 & = \\sum_{r=0}^{\\infty } p\\left[\\sum_{i=1}^n w(v_i ) = r \\right]p\\left[w(u ) = x , w(v)=y",
    "\\left| \\sum_{i=1}^n w(v_i ) = r \\right .",
    "\\right ] \\\\ & = \\sum_{r = x+y}^{\\infty } e^{-n } \\frac{n^r}{r ! } { r \\choose { x , y } } \\left(\\frac{1}{n } \\right)^{x+y}\\left(1 - \\frac{2}{n } \\right)^{r - x - y } \\\\ & = \\frac{e^{-n}}{x!y ! } \\sum_{r = x+y}^{\\infty } \\frac{(n-2)^{r - x - y}}{(r - x - y ) ! } \\\\ & = \\frac{e^{-2}}{x!y!}\\end{aligned}\\ ] ] which we recognize as the product of the probability that @xmath163 if the initial weights on the vertices are determined by an independent @xmath100 process , as desired .",
    "the following lemma is critical and valid only for special graphs such as @xmath51 :    [ azumasetup ] changing the initial weight on a single vertex can change @xmath110 by at most @xmath80 .",
    "the proof is an easy consequence of the remarks at the beginning of section 3.1 . indeed , after applying the greedy algorithm mentioned there , we decompose @xmath51 into @xmath110 subpaths ; each subpath has the total acquisition of 1 ( with the initial weighting induced on corresponding vertices ) .",
    "now , changing the initial weight on a single vertex can increase the total acquisition of the corresponding path by 1 . hence , globally , @xmath110 can increase by at most 1 .",
    "this finishes the proof as it also implies that it can not decrease by more than 1 ( if it decreases by more than that , then after switching back to the original weighting , the parameter increases by more than one ) .",
    "even though the main intent of the use of lemma 3.4 is depoissonization , it also quickly gives a very sharp concentration of @xmath164 around @xmath143 .",
    "for @xmath164 determined by a series of random unit poisson trials , @xmath165 and any @xmath166 , @xmath167 \\rightarrow 0\\end{aligned}\\ ] ] as @xmath168 and @xmath169 is therefore tightly concentrated in an interval of width @xmath170 around @xmath171 .",
    "[ expectedconcentration ] from lemma  [ azumasetup ] , we know that for every @xmath19 and any two sequences of possible outcomes @xmath172 and @xmath173 , @xmath174 it follows from the hoeffding - azuma inequality that @xmath175 \\le",
    "2e^{-\\phi(n)}\\to0,\\]]as desired .    we will let @xmath176 and @xmath177 respectively denote the expected total acquisition number when @xmath2 and @xmath178 tokens are randomly placed on @xmath51 .    for all @xmath179 $ ] , where @xmath166 is arbitrary",
    ", @xmath180    this follows immediately from lemma 3.4 , and , moreover , holds for the random variable @xmath181 as well , before expectations are taken .",
    "together , these lemmas can be used to show that , when @xmath2 is sufficiently large , the bounds from theorem  [ poissonbounds ] also apply to the depoissonized model .    for the depoissonized chip distribution process on @xmath51 , @xmath182 that is , the limit both exists and is identical to the limit for the poissonized model .    by chebychev s inequality , with probability at most @xmath183",
    "we have @xmath184 if @xmath185 , so that by lemma 3.6 @xmath186 on the other hand , if @xmath187 , then trivially @xmath188 combining the above two facts , we see that for any fixed @xmath189 such that @xmath190 as @xmath191 , and with @xmath192 $ ] @xmath193 as @xmath194 .",
    "likewise by just including the first term in ( 2 ) , we get that @xmath195 inequalities ( 3 ) and ( 4 ) prove the result .",
    "so far , our discussion has focused primarily on optimal acquisition protocols . for small examples or particularly simple graphs ,",
    "it is often possible to definitively determine the optimal acquisition protocol . in larger or more complicated cases , however ,",
    "doing so becomes laborious and complexity issues become more relevant . in order to sidestep this issue",
    ", we shift in this section to considering the size of the residual set produced by an algorithmic acquisition protocol",
    ". we will consider the process which is defined in theorem  [ yiguangalg ] , which offers an algorithmic acquisition protocol for instances of the randomly weighted path where each vertex has a unique weight . in order to motivate the use of this algorithm , however , we first state below one of the main results of [ 2 ] , namely that if a total of @xmath196 chips are distributed on @xmath51 using a uniform random process , the probability that two or more vertices have the same initial weight goes to zero as @xmath197 .",
    "( if @xmath198 this probability is tending to 1 as @xmath191 . )",
    "this result exhibits a scenario under which the conditions of theorem 3.9 are satisfied .",
    "[ unique ] let a total of @xmath199 chips , where @xmath200 , be distributed on @xmath51 using a uniform random process and let @xmath201 denote the number of pairs of vertices that receive the same number of chips .",
    "then , @xmath202 = 0.\\end{aligned}\\ ] ]    in what follows , we assume that the path is weighted such that vertex weights are distinct . according to lemma 3.8 , this",
    "may be realized with high probability by placing , e.g. , @xmath203 tokens randomly on @xmath51 but we do not use this fact explicitly or implicitly .",
    "[ yiguangalg ] let @xmath51 be weighted by using a random permutation of @xmath2 distinct integers @xmath204 .",
    "if each acquisition move consists of the vertex with the highest weight receiving the weight of its immediate neighbors , then the expected acquisition number @xmath205 satisfies @xmath206}{n } = \\frac{e^2 - 1}{2e^2}.\\ ] ]    let the chips be randomly distributed on @xmath51 .",
    "let @xmath207 , for @xmath208 , denote the weight of vertex @xmath19 after the @xmath209th step of the algorithm . initially , each vertex is equally likely to have the largest weight . without loss of generality ,",
    "suppose @xmath210 for all @xmath211 and @xmath212 .",
    "if @xmath127 has two neighbors , then at the end of the first step @xmath213 .",
    "if @xmath127 has one neighbor , then @xmath214 or @xmath215 .",
    "after the first step , vertex @xmath127 can not acquire the weight of any other vertices in the path because all its neighbors have zero weight .",
    "therefore , calculating the acquisition number of @xmath51 reduces to calculating the acquisition numbers of the resulting smaller path or paths , as shown in figure  [ fig : algreduction ] , since @xmath216    0.4   before ( left ) and after ( right ) the first step of the algorithm . if vertex @xmath127 has the highest weight , then calculating the acquisition number of @xmath217 reduces to calculating the acquisition numbers of @xmath218 and @xmath219.,title=\"fig : \" ]    0.4   before ( left ) and after ( right ) the first step of the algorithm .",
    "if vertex @xmath127 has the highest weight , then calculating the acquisition number of @xmath217 reduces to calculating the acquisition numbers of @xmath218 and @xmath219.,title=\"fig : \" ]    we therefore obtain the identity @xmath220= 1 + \\frac{1}{n}\\left(\\sum_{i=0}^{n-2}e[a_{td}(p_i ) ] + e[a_{td}(p_{n-2-i})]\\right ) = 1 + \\frac{2}{n}\\sum_{i=0}^{n-2}e[a_{td}(p_i)].\\ ] ] let @xmath221x^i$ ] be the generating function for @xmath222 $ ] . in order to obtain a closed form expression for @xmath223 ,",
    "we apply standard generating function techniques to calculate : @xmath224 = n + 2\\sum_{i=0}^{n-2}e[a_{td}(p_i ) ] \\\\",
    "xg'(x)=\\frac{x}{(1-x)^2}+2g(x)\\frac{x^2}{1-x}.\\end{aligned}\\ ] ] solving the resulting differential equation , we find @xmath225 where @xmath226 is an unknown constant .",
    "we would like to find an explicit formula for @xmath222 $ ] .",
    "to do so , we use known generating series representations to note that @xmath227 and equate the @xmath228 coefficients to obtain @xmath229 = c\\sum_{i=0}^n(n+1-i)\\frac{(-2)^i}{i ! } + \\frac{n+1}{2}.\\end{aligned}\\ ] ] we then use the fact that @xmath230 to determine that @xmath231 .",
    "therefore , @xmath229 = -\\frac{1}{2}\\sum_{i=0}^n(n+1-i)\\frac{(-2)^i}{i ! } + \\frac{n+1}{2}\\end{aligned}\\ ] ] and @xmath232}{n } = \\frac{e^2 - 1}{2e^2}.\\end{aligned}\\ ] ] this finishes the proof of the result .",
    "assuming that each vertex has unique weight , we can similarly apply this algorithm to cycles , stars , wheels , and complete bipartite graphs .",
    "after a single iteration of the algorithm , the cycle graph @xmath74 reduces to @xmath233 and therefore @xmath234= 1 + e[a_{td}(p_{n-3})].\\end{aligned}\\ ] ] for the star graph @xmath235 , there are two possible cases .",
    "let @xmath236 denote the center vertex of @xmath235 .",
    "if @xmath236 has the highest weight , then during the first iteration it will acquire the weight of all other vertices and the acquisition number will trivially be @xmath80 . if @xmath236 is not the vertex with highest weight , then during the first iteration one of the leaves will acquire the weight on @xmath236 , leaving @xmath237 unconnected vertices and giving the graph the acquisition number @xmath237 .",
    "thus , we have @xmath238 = \\frac{(n-1)^2}{n } + \\frac{1}{n } = \\frac{n^2 - 2n}{n}.\\end{aligned}\\ ] ] for the wheel graph @xmath29 , there are again two cases . again , let @xmath236 denote the center vertex of @xmath29 . if @xmath236 has the highest weight , then it will similarly acquire the weight of all other vertices , producing an acquisition number of 1 .",
    "if @xmath236 is not the vertex with highest weight , then after the first iteration @xmath29 will reduce to @xmath74 .",
    "it follows that we have @xmath239 & =    \\frac{1}{n } + \\frac{n-1}{n}\\left(1 + e[a_{td}(p_{n-3 } ) ] \\right)\\end{aligned}\\ ] ] finally , let us consider the complete bipartite graph @xmath240 .",
    "let @xmath241 denote the vertex with highest weight .",
    "if @xmath242 then during the first iteration of the algorithm @xmath241 will acquire the weight of all vertices in @xmath243 , leaving @xmath2 vertices in @xmath244 totally disconnected and producing an acquisition number of @xmath2 . if @xmath245 then during the first iteration @xmath241 will similarly acquire the weight of all vertices in @xmath244 , producing an acquisition number of @xmath61 .",
    "thus , we have @xmath246 = \\frac{n^2 + m^2}{n+m}.\\end{aligned}\\ ] ] similarly , the multipartite graph @xmath247 has @xmath248 = \\frac{\\sum_{i=1}^k n_i^2}{\\sum_{i=1}^k n_i}.\\end{aligned}\\ ] ]",
    "finally , we can conclude by offering some open questions that arose during our investigation of randomly - weighted graphs .",
    "( diameter 2 graph ) for any graph @xmath10 with diameter two , it s known that @xmath253 @xcite and conjectured that @xmath254 ( where perhaps @xmath255 ) .",
    "if we instead randomly distribute @xmath2 chips on a graph with diameter two , can @xmath0 be similarly bounded ?",
    "what if we randomly distribute @xmath199 chips ?    in our acquisition protocol algorithm ,",
    "each acquisition move involves transferring weight to the highest weighted vertex .",
    "can an acquisition protocol algorithm where acquisition moves are confined to transferring weight away from the vertex with lowest weight be well defined ?",
    "if so , what is the expected size of the resultant residual set ?",
    "[ ques : algprotocol ]    for the canonical acquisition problem , where each vertex of @xmath10 begins with weight 1 , there exists an _ acquisition game _",
    "variant where two players , max and min , make alternate acquisition moves in an attempt to , respectively , maximize and minimize the size of the residual set .",
    "the _ game acquisition number _ , @xmath256 , is defined as the size of the residual set under optimal play .",
    "similar investigations could be done on the game acquisition number of randomly weighted graphs .    in our preliminary investigation into question  [ ques : algprotocol ]",
    ", we found that the major difficulty in designing such an algorithm is in ensuring that it is well - defined . even if all vertices of @xmath51 initially have unique weight , it is possible that an acquisition move could result in two vertices subsequently having equal weight . in such a case , it is not clear which vertex should transfer its weight in the next step of the algorithm .",
    "any well - defined algorithm must be able to handle this case without influencing the size of the resulting residual set .",
    "e.  czabarka , m.  marsili , and l.  a. szkely ( 2013 ) .",
    "threshold functions for distinct parts : revisiting erds - lehner . in _ information theory , combinatorics , and search theory ( in memory of rudolph ahlswede )",
    "_ , eds .",
    "h.  aydinian , f.  cicalese , c.  deppe , springer - verlag , _ lecture notes in computer science _ , 7777 : 463471 ."
  ],
  "abstract_text": [
    "<S> there exists a significant body of work on determining the acquisition number @xmath0 of various graphs when the vertices of those graphs are each initially assigned a unit weight . </S>",
    "<S> we determine properties of the acquisition number of the path , star , complete , complete bipartite , cycle , and wheel graphs for variations on this initial weighting scheme , with the majority of our work focusing on the expected acquisition number of randomly weighted graphs . </S>",
    "<S> in particular , we bound the expected acquisition number @xmath1 of the @xmath2-path when @xmath2 distinguishable  units \" of integral weight , or chips , are randomly distributed across its vertices between @xmath3 and @xmath4 . with computer support , </S>",
    "<S> we improve it by showing that @xmath1 lies between @xmath5 and @xmath6 . </S>",
    "<S> we then use subadditivity to show that the limiting ratio @xmath7 exists , and simulations reveal more exactly what the limiting value equals . </S>",
    "<S> the hoeffding - azuma inequality is used to prove that the acquisition number is tightly concentrated around its expected value . </S>",
    "<S> additionally , in a different context , we offer a non - optimal acquisition protocol algorithm for the randomly weighted path and exactly compute the expected size of the resultant residual set .    _ </S>",
    "<S> keywords : total acquisition number , poissonization , depoissonization , maxwell - boltzman and bose - einstein allocation _ </S>"
  ]
}