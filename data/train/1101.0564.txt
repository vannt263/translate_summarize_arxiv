{
  "article_text": [
    "let @xmath3 be a sequence of elements in a finite group @xmath0 of order @xmath10 , written multiplicatively .",
    "we say that @xmath3 _ represents _ @xmath0 if every element of @xmath0 can be expressed as the ( ordered ) product of a subsequence of  @xmath3 .",
    "ideally , we want  @xmath3 to be short , say @xmath11 for some constant @xmath12 known as the _ density _ of @xmath3 .    in order for @xmath3 to represent @xmath0 ,",
    "we clearly require @xmath13 , and for sufficiently large  @xmath10 , any @xmath14 suffices .",
    "more precisely , babai and erds  @xcite show that for all @xmath15 there exists a sequence @xmath3 of length @xmath16 that represents  @xmath0 .",
    "their proof is non - constructive , but , in the case that @xmath0 is abelian , erds and rnyi  @xcite show that a randomly chosen sequence of length @xmath17 represents @xmath0 with probability approaching @xmath18 as @xmath19 , provided that @xmath20 .",
    "the randomness assumption is necessary , since it takes much larger values of @xmath16 to ensure that _ every _ sequence of length @xmath16 represents @xmath0 , see  @xcite .    in",
    "related work , impagliazzo and naor prove that for a random sequence  @xmath3 of density @xmath14 , the distribution of subsequence products almost surely converges to the uniform distribution on @xmath0 as @xmath10 goes to infinity  ( * ? ? ?",
    "* proposition  4.1 ) .",
    "this result allows us to bound the complexity of our algorithm for almost all  @xmath3 with @xmath8 .",
    "given a sequence @xmath3 that represents @xmath0 ( or a large subset of @xmath0 ) , we wish to find an explicit representation of a given group element @xmath2 as the product of a subsequence of @xmath3 ; we call this a _ short product representation _ of  @xmath2 . in the special case that @xmath0 is abelian and the elements of @xmath3 are distinct , this is the _ subset sum problem _ in a finite group",
    ". variations of this problem and its decision version have long been of interest to many fields : complexity theory  @xcite , cryptography  @xcite , additive number theory  @xcite , cayley graph theory  @xcite , and information theory  @xcite , to name just a few .    as a computational framework",
    ", we work with a generic group @xmath0 whose elements are uniquely identified , and assume that all group operations are performed by a black box that can also provide random group elements ; see  ( * ? ? ?",
    "* chapter  1 ) for a formal model .",
    "time complexity is measured by counting group operations ( calls to the black box ) , and for space complexity we count the number of group elements that are simultaneously stored . in most practical applications ,",
    "these metrics are within a polylogarithmic factor of the usual bit complexity .",
    "working in this model ensures that our algorithms apply to any finite group for which a suitable black box can be constructed .",
    "it also means that finding short product representations is provably hard .",
    "indeed , the discrete logarithm problem in a cyclic group of prime order has a lower bound of @xmath21 in the generic group model  @xcite , and is easily reduced to finding short product representations .    in the particular group @xmath22",
    ", we note that finding short product representations is easier for non - generic algorithms : the problem can be lifted to @xmath16 subset sum problems in @xmath23 , which for suitable inputs can be solved with a time and space complexity of @xmath24 via  @xcite , beating the @xmath21 generic lower bound noted above .",
    "this is not so surprising , since working with integers is often easier than working in generic groups ; for instance , the discrete logarithm problem in @xmath23 corresponds to integer division and can be solved in quasi - linear time .",
    "a standard technique for solving subset sum problems in generic groups uses a baby - step giant - step approach , which can also be used to find short product representations ( section  [ sec : bsgs ] ) .",
    "this typically involves @xmath25 group operations and storage for @xmath25 group elements .",
    "the space bound can be improved to @xmath26 via a method of schroeppel and shamir  @xcite .    here , we give a pollard-@xmath1 type algorithm  @xcite for finding short product representations in a finite group ( section  [ sec : pollard ] ) .",
    "it only needs to store @xmath9 group elements , and , assuming @xmath3 is a random sequence of density @xmath27 , we prove that its expected running time is @xmath28 group operations ; alternatively , by dedicating @xmath29 space to precomputations , the time complexity can be reduced to @xmath30 ( section  [ sec : analysis ] ) .",
    "we also consider two applications : representing elements of the class group of an imaginary quadratic number field as short products of prime ideals with small norm ( section  [ sec : relations ] ) , and finding an isogeny between two elliptic curves defined over a finite field ( section  [ sec : isogenies ] ) . for the latter , our method combines the advantages of  @xcite and  @xcite in that it requires little memory and finds an isogeny that can subsequently be evaluated in polynomial time .    in practice",
    ", our algorithm performs well so long as @xmath6 , and its low space complexity allows it to feasibly handle much larger problem instances than other generic methods ( section  [ sec : comput ] ) .",
    "let @xmath3 be a sequence of length @xmath16 in a finite group @xmath0 of order @xmath10 , let @xmath2 be an element of @xmath0 , and let @xmath31 denote the set of all subsequences of  @xmath3 .",
    "our goal is to find a preimage of @xmath2 under the product map @xmath32 that sends a subsequence of  @xmath3 to the ( ordered ) product of its elements .",
    "let us first recall the baby - step giant - step method .",
    "we may express  @xmath33 as the concatenation of two subsequences of roughly equal length .",
    "for any sequence @xmath34 , let @xmath35 , so that @xmath36 and @xmath37 are inverses in  @xmath0 .",
    "we then search for @xmath38 ( a baby step ) and @xmath39 ( a giant step ) which `` collide '' in the sense that @xmath40 , where @xmath41 denotes the sequence @xmath42 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ baby - step giant - step algorithm + * input : * a finite sequence @xmath3 in a group @xmath0 and a target @xmath43 . +",
    "* output : * a subsequence of @xmath3 whose product is  @xmath2 .",
    "+    [ cols= \" > , < \" , ]     the expected values of @xmath44 and @xmath45 listed in table  [ table : comput ] were computed under the heuristic assumption that @xmath46 and @xmath47 are both random functions .",
    "this implies that while iterating @xmath48 we are effectively performing simultaneous independent random walks on @xmath0 and @xmath49 .",
    "let @xmath50 and @xmath51 be independent random variables for the number of steps these walks take before reaching a collision , respectively .",
    "the probability that @xmath52 in step  5 is @xmath53 , and the algorithm then proceeds to find a short product representation with probability @xmath54 .    using the probability density @xmath55 of @xmath56 and @xmath57",
    ", we find @xmath58 } = 2/{p(x{\\leqslant}y ) } = 2(1+r),\\ ] ] where @xmath59 .",
    "one may also compute @xmath60 } = { \\operatorname{\\mathbf{e}}[c]}{\\operatorname{\\mathbf{e}}[\\min(x , y ) ] } = \\sqrt{2\\pi n(1+r)}.\\ ] ] for @xmath61 , we have @xmath62 for large @xmath10 , so that @xmath63}\\approx 2 $ ] and @xmath64}\\approx \\sqrt{2\\pi n}$ ] . for @xmath65",
    ", we have @xmath63}=3 $ ] and @xmath64}=\\sqrt{3\\pi n}$ ] ( when @xmath16 is even ) . for @xmath66 ,",
    "the value of @xmath63}$ ] increases with @xmath10 and we have @xmath64}=o(n^{(4-d)/4})$ ] .",
    "in addition to the tests summarized in table  [ table : comput ] , we applied our low memory algorithm to some larger problems that would be quite difficult to address with the baby - step giant - step method .",
    "our first large test used @xmath67 with @xmath68 , which is a cyclic group of order @xmath69 , and the sequence @xmath70 with points @xmath71 defined as above with @xmath72 , which gives @xmath73 .",
    "our target element was @xmath74 with @xmath75-coordinate @xmath76 .",
    "the computation was run in parallel on @xmath77 cores ( 3.0  ghz amd phenom  ii ) , using the distinguished points method .- collision ) , or a single walk may collide with itself ( a @xmath1-collision ) .",
    "both types are useful . ]",
    "the second collision yielded a short product representation after evaluating the map  @xmath48 a total of @xmath78 times .",
    "after precomputing @xmath79 partial products ( as discussed in section  [ sec : analysis ] ) , each evaluation of @xmath48 used @xmath80 group operations , compared to an average of @xmath81 without precomputation , and this required just @xmath82 megabytes of memory .",
    "the entire computation used approximately @xmath83  days of cpu time , and the elapsed time was about @xmath84  days .",
    "we obtained a short product representation for @xmath2 as the sum of @xmath85 points @xmath71 with @xmath75-coordinates less than @xmath76 .",
    "in hexadecimal notation , the bit - string that identifies the corresponding subsequence of @xmath3 is :    ` 542ab7d1f505bdaccdbeb6c2e92180d5f38a20493d60f031c1 `    our second large test used the group @xmath86 , which is isomorphic to @xmath87 see  ( * ? ? ?",
    "* table b.4 ) .",
    "we used the sequence @xmath88 with @xmath72 , and chose the target @xmath89 $ ] with @xmath90 .",
    "we ran the computation in parallel on @xmath91 cores , and needed @xmath92 collisions to obtain a short product representation , which involved a total of @xmath93 evaluations of @xmath48 .",
    "as in the first test , we precomputed @xmath79 partial products so that each evaluation of @xmath48 used @xmath80 group operations .",
    "approximately @xmath94 days of cpu time were used ( the group operation in @xmath95 is slower than in the group @xmath96 used in our first example ) .",
    "we obtained a representative for the ideal class @xmath2 as the product of @xmath97 ideals with prime norms less than @xmath98 . the bit - string that encodes",
    "the corresponding subsequence of @xmath88 is :    ` 5cf854598d6059f607c6f17b8fb56314e87314bee7df9164cd `",
    "the authors are indebted to andrew shallue for his kind help and advice in putting our result in the context of subset sum problems , and to steven galbraith for his useful feedback on an early draft of this paper .",
    "noga alon , amnon barak , and udi manber . on disseminating information reliably without broadcasting . in radu",
    "popescu - zeletin , gerard le lann , and kane  h. kim , editors , _ proceedings of the 7^th^ international conference on distributed computing systems _ , pages 7481 .",
    "ieee computer society press , 1987 .",
    "steven  d. galbraith , florian hess , and nigel  p. smart . extending the ghs weil descent attack . in lars  r. knudsen , editor , _ advances in cryptology ",
    "eurocrypt 02 _ , volume 2332 of _ lecture notes in computer science _ ,",
    "pages 2944 .",
    "springer , 2002 .",
    "nick howgrave - graham and antoine joux .",
    "new generic algorithms for hard knapsacks . in henri gilbert , editor ,",
    "_ advances in cryptology ",
    "eurocrypt 10 _ , volume 6110 of _ lecture notes in computer science _ ,",
    "pages 235256 .",
    "springer , 2010 .        richard  m. karp .",
    "reducibility among combinatorial problems . in raymond",
    "e. miller , james  w. thatcher , and jean  d. bohlinger , editors , _ complexity of computer computations _ , pages 85103 .",
    "plenum press , 1972 .",
    "arnold schnhage .",
    "fast reduction and composition of binary quadratic forms . in stephen",
    "m. watt , editor , _ international symposium on symbolic and algebraic computation ",
    "issac 91 _ , pages 128133 .",
    "acm press , 1991 .",
    "victor shoup .",
    "lower bounds for discrete logarithms and related problems . in _ advances in cryptology ",
    "eurocrypt 97 _ , volume 1233 of _ lecture notes in computer science _ ,",
    "pages 256266 .",
    "springer - verlag , 1997 .",
    "revised version ."
  ],
  "abstract_text": [
    "<S> we describe a space - efficient algorithm for solving a generalization of the subset sum problem in a finite group @xmath0 , using a pollard-@xmath1 approach . given an element @xmath2 and a sequence of elements @xmath3 , our algorithm attempts to find a subsequence of @xmath3 whose product in @xmath0 is equal to  @xmath2 . for a random sequence @xmath3 of length @xmath4 , where @xmath5 and @xmath6 is a constant , we find that its expected running time is @xmath7 group operations ( we give a rigorous proof for @xmath8 ) , and it only needs to store @xmath9 group elements . </S>",
    "<S> we consider applications to class groups of imaginary quadratic fields , and to finding isogenies between elliptic curves over a finite field . </S>"
  ]
}