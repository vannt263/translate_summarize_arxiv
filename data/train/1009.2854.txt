{
  "article_text": [
    "we say a logic @xmath3 has a decidable characterization inside a logic @xmath4 if the following decision problem is decidable : `` given as input a formula of the logic @xmath4 , decide if it is equivalent to some formula of the logic @xmath3 '' .",
    "we are interested in the case when the logic @xmath4 is mso on words or trees , and @xmath3 represents some fragment of @xmath4 .",
    "this type of problem has been successfully studied in the case when @xmath4 is mso on finite words . in other words @xmath4 , represents the class of regular word languages .",
    "arguably best known is the result of mcnaughton , papert and schtzenberger  @xcite , which says that the following two conditions on a regular word language @xmath5 are equivalent : a ) @xmath5 can be defined in first - order logic with order and label tests ; b ) the syntactic semigroup of @xmath5 does not contain a non - trivial group .",
    "since condition b ) can be effectively tested , the above theorem gives a decidable characterization of first - order logic .",
    "this result demonstrates the importance of this type of work : a decidable characterization not only gives a better understanding of the logic in question , but it often reveals unexpected connections with algebraic concepts . during several decades of research , decidable characterizations have been found for fragments of first - order logic with restricted quantification and various signatures ( typically subsets of the order relation and the successor relation ) , as well as a large group of temporal logics , see @xcite and @xcite for references .",
    "an important part of this research has been devoted to the quantifier alternation hierarchy , where each level counts the alterations between @xmath6 and @xmath7 quantifiers in a first - order formula in prenex normal form .",
    "the quantifier free part of such a formula is built using a binary predicate @xmath8 representing the linear order on the word .",
    "formulas that have @xmath9 alternations ( and therefore @xmath10 blocks of quantifiers ) are called @xmath11 if they begin with @xmath7 , and @xmath12 if they begin with  @xmath6 .",
    "for instance , the word property `` some position has label @xmath13 '' can be defined by a @xmath14 formula @xmath15 , while the language `` nonempty words with at most two positions that do not have label @xmath13 '' can be defined by the @xmath16 formula @xmath17    a lot of attention has been devoted to analyzing the low levels of the quantifier alternation hierarchy for word languages .",
    "the two lowest levels are easy : a word language is definable in @xmath14 ( resp .",
    "@xmath18 ) if and only if it is closed under inserting ( removing ) letters .",
    "both properties can be tested in polynomial time based on a recognizing automaton , or semigroup .",
    "however , just above @xmath19 , and even before we get to @xmath20 , we already find two important classes of languages .",
    "a fundamental result , due to simon  @xcite , says that a language is defined by a boolean combination of @xmath14 formulas if and only if its syntactic monoid is @xmath21-trivial . above the boolean combination of @xmath14 , we find @xmath22 , i.e.  languages that can be defined simultaneously in @xmath16 and @xmath23 .",
    "as we will describe later on , this class turns out to be surprisingly robust , and it is the focus of this paper .",
    "another fundamental result , due to pin and weil  @xcite , says that a regular language is in @xmath22 if and only if its syntactic monoid is in da .",
    "the limit of our knowledge is level @xmath16 : it is decidable if a language can be defined on level @xmath16  @xcite , but there are no known decidable characterization for boolean combinations of @xmath16 , for @xmath24 , for @xmath25 , and upwards .    for trees",
    "even less is known .",
    "no decidable characterization has been found for what is arguably the most important proper subclass of regular tree languages , first - order logic with the descendant relation , despite several attempts .",
    "similarly open are chain logic and the temporal logics ctl , ctl * and pdl .",
    "however , there has been some recent progress . in  @xcite ,",
    "decidable characterizations were presented for some temporal logics , while benedikt and segoufin  @xcite characterized tree languages definable in first - order logic with the successor relation ( but without the descendant relation ) .",
    "this paper is part of a program to understand the expressive power of first - order logic on trees , and the quantifier alternation hierarchy in particular .",
    "the idea is to try to understand the low levels of the quantifier alternation hierarchy before taking on full first - order logic ( which is contrary to the order in which word languages were analyzed ) .",
    "we focus on two signatures .",
    "the first signature contains unary predicates for label tests and the ancestor order on nodes , denoted @xmath8 .",
    "the second signature assumes that the trees have an order on siblings , which induces a lexicographical linear order on nodes , denoted @xmath26 .",
    "both signatures generalize the linear order on words .",
    "as shown in  @xcite , there is a reasonable notion of concatenation hierarchy for tree languages that corresponds to the quantifier alternation hierarchy .",
    "levels @xmath14 and @xmath18 are as simple for trees as they are for words .",
    "a recent result  @xcite extends simon s theorem to trees , by giving a decidable characterization of tree languages definable by a boolean combination of @xmath14 formulas , and also a decidable characterization of boolean combinations of @xmath27 formulas .",
    "there is no known decidable characterization of tree languages definable in @xmath11 for @xmath28 .",
    "the contribution of this paper is a decidable characterization of tree languages definable in @xmath22 , i.e.  definable both in @xmath16and @xmath23 .",
    "we also provide a decidable characterization of tree languages definable in @xmath29 .",
    "as we signaled above , for word languages the class @xmath22 is well studied and important , with numerous equivalent characterizations . among them",
    "one can find  @xcite : a ) word languages that can be defined in the temporal logic with operators @xmath30 and @xmath31 ; b ) word languages that can be defined by a first - order formula with two variables , but with unlimited quantifier alternations ; c ) word languages whose syntactic semigroup belongs to the semigroup variety da ; d ) word languages recognized by two - way ordered deterministic automata ; e ) a certain form of `` unambiguous '' regular expressions .",
    "it is not clear how to extend some of these concepts to trees .",
    "even when natural tree counterparts exist , they are not equivalent . for instance",
    ", the temporal logic in a ) can be defined for trees  by using operators `` in some descendant '' and `` in some ancestor '' .",
    "this temporal logic was studied in  @xcite , however it was shown to have an expressive power incomparable with that of @xmath22 .",
    "a characterization of @xmath22was left as an open problem , one which is solved here .",
    "we provide an algebraic characterization of tree languages definable in @xmath22and in @xmath29 .",
    "this characterization is effectively verifiable if the language is given by a tree automaton .",
    "it is easy to see that the word setting can be treated as a special case of the tree setting .",
    "hence our characterization builds on the one over words .",
    "however the added complexity of the tree setting makes both formulating the correct condition and generalizing the proof quite nontrivial .",
    "in this section , we present some basic definitions regarding trees . we also present the formalism of forest algebra , which is used in our characterizations .",
    "in this paper we work with finite , unranked , ordered trees and forests over a finite alphabet @xmath32 formally , these are expressions defined inductively as follows : if @xmath33 is a forest and @xmath34 then @xmath35 is a tree .",
    "if @xmath36 is a finite sequence of trees , then @xmath37 is a forest .",
    "this applies as well to the empty sequence of trees , which is called the _",
    "empty forest , _ and denoted 0 ( and which provides a place for the induction to start ) .",
    "forests and trees alike will be denoted by the letters @xmath38 when necessary , we will remark which forests are trees , i.e.  contain only one tree in the sequence .",
    "the notion of node , as well as the descendant and ancestor relations are defined in the usual way .",
    "we write @xmath39 to say that @xmath40 is a strict ancestor of @xmath41 or , equivalently , that @xmath41 is a strict descendant of @xmath40 . as usual , we write @xmath42 when @xmath43 or @xmath39 .",
    "the parent of a node @xmath40 is its immediate ancestor .",
    "two nodes @xmath40 and @xmath41 are _ siblings _ if they have the same parent .",
    "we also use the lexicographic order on nodes , written @xmath26 . recall that @xmath44 holds if either @xmath39 , or there are nodes @xmath45 and @xmath46 such that @xmath47 is a sibling to the left of @xmath48 .",
    "if we take a forest and replace one of the leaves by a special symbol @xmath49 , we obtain a _ context .",
    "_ contexts will be denoted using letters @xmath50 .",
    "a forest @xmath33 can be substituted in place of the hole of a context @xmath51 , the resulting forest is denoted by @xmath52 .",
    "there is a natural composition operation on contexts : the context @xmath53 is formed by replacing the hole of @xmath54 with @xmath51 .",
    "this operation is associative , and satisfies @xmath55 for all forests @xmath33 and contexts @xmath51 and @xmath54 .",
    "we say a forest @xmath33 is an _ immediate piece _ of a forest @xmath56 if @xmath57 can be decomposed as @xmath58 and @xmath59 for some context @xmath51 , some label @xmath13 , and some forest @xmath60 .",
    "the reflexive transitive closure of the immediate piece relation is called the _ piece _ relation .",
    "we write @xmath61 to say that @xmath33 is a piece of @xmath60 . in other words ,",
    "a piece of @xmath60 is obtained by removing nodes from @xmath60 .",
    "we extend the notion of piece to contexts . in this case",
    ", the hole must be preserved while removing the nodes .",
    "the notions of piece for forests and contexts are related , of course .",
    "for instance , if @xmath51 , @xmath54 are contexts with @xmath62 , then @xmath63 . also , conversely , if @xmath61 , then there are contexts @xmath62 with @xmath64 and @xmath65 .",
    "( for instance , one can take @xmath66 and @xmath67 . ) the picture below depicts two contexts , the left one being a piece of the right one , as can be seen by removing the white nodes .",
    "we will be considering three types of languages in the paper : _ forest languages _",
    "i.e.  sets of forests , denoted @xmath5 ; _ context languages _ , i.e.  sets of contexts , denoted @xmath68 , and _ tree languages _ , i.e.  sets of trees , denoted @xmath69 .",
    "note that a forest language can contain trees .",
    "_ forest algebras _ were introduced by bojaczyk and walukiewicz as an algebraic formalism for studying regular tree languages  @xcite . here",
    "we give a brief summary of the definition of these algebras and their important properties . a forest algebra consists of a pair @xmath70 of finite monoids , subject to some additional requirements , which we describe below .",
    "we write the operation in @xmath71 multiplicatively and the operation in @xmath72 additively , although @xmath72 is not assumed to be commutative .",
    "we accordingly denote the identity of @xmath71 by @xmath49 and that of @xmath72 by 0 .",
    "we require that @xmath71 act on the left of @xmath72 .",
    "that is , there is a map @xmath73",
    "such that @xmath74 for all @xmath75 and @xmath76 we further require that this action be _ monoidal , _ that is , @xmath77 for all @xmath78 and that it be _ faithful , _ that is , if @xmath79 for all @xmath78 then @xmath80 finally we require that for every @xmath81 @xmath71 contains elements @xmath82 and @xmath83 defined by @xmath84 for all @xmath85    a morphism @xmath86 of forest algebras is actually a pair @xmath87 where @xmath88 is a monoid morphism between @xmath89 and @xmath90 and @xmath91 is a monoid morphism between @xmath92 and @xmath93 , such that @xmath94 for all @xmath78 @xmath95 however , we will abuse notation slightly and denote both component maps by @xmath96    let @xmath97 be a finite alphabet , and let us denote by @xmath98 the set of forests over @xmath99 and by @xmath100 the set of contexts over @xmath32 each of these is a monoid , with the operations being forest concatenation and context composition , respectively . the pair @xmath101 , with forest substitution as action , forms a forest algebra , which we denote @xmath102    we say that a forest algebra @xmath70 _ recognizes _ a forest language @xmath103 if there is a morphism @xmath104 and a subset @xmath105 of @xmath72 such that @xmath106 a forest language is regular , i.e.  recognized by any of the many equivalent notions of automata for unranked trees that can be found in the literature , if and only if it is recognized by a finite forest algebra  @xcite .",
    "given any finite monoid @xmath69 , there is a number @xmath107 ( denoted by @xmath108 when @xmath69 is understood from the context ) such that for all elements @xmath40 of @xmath69 , @xmath109 is an idempotent : @xmath110 .",
    "therefore for any forest algebra @xmath70 and any element @xmath111 of @xmath71 and @xmath112 of @xmath72 we will write @xmath113 and @xmath114 for the corresponding idempotents . the element @xmath113 is idempotent with respect to the operation in @xmath71 .",
    "the element @xmath114 , which is the same as @xmath115 and the same as @xmath116 , is idempotent with respect to the operation in @xmath72 .    given a forest language @xmath103",
    "we define an equivalence relation @xmath117 on @xmath98 by setting @xmath118 if and only if for every context @xmath119 the forests @xmath52 and @xmath120 are either both in @xmath5 or both outside of @xmath121 we further define an equivalence relation on @xmath100 , also denoted @xmath122 by setting @xmath123 if for all @xmath124 @xmath125 this pair of equivalence relations defines a congruence of forest algebras on @xmath126 and the quotient @xmath127 is called the _",
    "syntactic forest algebra _ of @xmath121 each equivalence class of @xmath117 is called a _",
    "type_. we now extend the notion of piece to elements of a forest algebra @xmath70 .",
    "the general idea is that a context type @xmath128 is a piece of a context type @xmath129 if one can construct a term ( using elements of @xmath72 and @xmath71 ) which evaluates to @xmath130 , and then take out some parts of this term to get @xmath131 .",
    "[ df : piece - alg ] let @xmath70 be a forest algebra .",
    "we say @xmath128 _ is a piece _ of @xmath129 , denoted by @xmath132 , if there is an alphabet @xmath97 such that @xmath133 and @xmath134 hold for some morphism @xmath135 and some contexts @xmath62 over @xmath97 .",
    "the relation @xmath136 is extended to @xmath72 by setting @xmath137 if @xmath138 and @xmath139 for some context types @xmath132 .",
    "the focus of this paper is the expressive power of first - order logic on trees .",
    "a forest can be seen as a logical relational structure .",
    "the domain of the structure is the set of nodes .",
    "( we allow empty domains , which happens when an empty forest @xmath140 is considered . )",
    "we consider two different signatures .",
    "both of them contain a unary predicate @xmath141 for each symbol @xmath13 of the alphabet @xmath97 , as well as a binary predicate @xmath8 for the ancestor relation .",
    "furthermore , the second signature also contains a binary predicate @xmath26 for the lexicographic order on nodes .",
    "a formula without free variables over these signatures defines a set of forests , these are the forests where it is true .",
    "we are particularly interested in formulas of low quantifier complexity .",
    "a @xmath142 formula is a formula of the form @xmath143 where @xmath144 is quantifier free .",
    "languages defined in @xmath142 are closed under disjunction and conjunction , but not necessarily negation .",
    "the negation of a @xmath142 formula is called a @xmath145 formula , equivalently this is a formula whose quantifier prefix is @xmath146 . a forest property",
    "is called @xmath0 if it can be expressed both by a @xmath142 and a @xmath145 formula .",
    "we will use @xmath16and @xmath147to specify which predicates are used in the signature , similarly for @xmath145 and @xmath0 .    with limited quantification ,",
    "the choice of signature is a delicate question .",
    "for instance , adding a child relation changes the expressive power .",
    "we want an algorithm deciding whether a given regular forest language is definable in @xmath29and another one for deciding whether it is in @xmath22 .",
    "as noted earlier , the corresponding problem for words was solved by pin and weil  @xcite : a word language @xmath5 is definable in @xmath22if and only if its syntactic monoid @xmath148 belongs to the variety da , i.e.  it satisfies the identity @xmath149 for all @xmath150 .",
    "the power @xmath108 means that the identity holds for sufficiently large powers ( in different settings , @xmath108 is defined in terms of idempotent powers , but the condition on sufficiently large powers is good enough here ) . since one can effectively test if a finite monoid satisfies the above property ( it is sufficient to verify the power @xmath151 ) , it is decidable whether a given regular word language is definable in @xmath22 .",
    "we assume that the language @xmath5 is given by its syntactic monoid and syntactic morphism , or by some other representation , such as a finite automaton , from which these can be effectively computed .",
    "we will show that a similar characterization can be found for forests ; although the identities will be more involved . for decidability , it is not important how the input language is represented . in this paper",
    ", we will represent a forest language by a forest algebra that recognizes it .",
    "forest algebras are described in the next section .",
    "we give an algorithm which says when a forest language belongs to a class @xmath152 , which is either @xmath22or @xmath29 .",
    "what about tree languages ? there are two ways of getting a class of tree languages from a class of forest languages @xmath152 .    1 .   the class of tree languages that belong to @xmath152 .",
    "the class of tree languages of the form @xmath153 , where @xmath97 is an alphabet , @xmath154 is the set of all trees over alphabet @xmath97 , and @xmath155 is a forest language over @xmath97 .    our algorithm gives a decision procedure under the first definition",
    ". the usual understanding of tree languages definable in @xmath22or @xmath29corresponds to the second definition .",
    "fortunately , the two definitions are equivalent when @xmath152 is either @xmath22or @xmath29 .",
    "this is because in both cases , @xmath152 is closed under intersection and contains the languages @xmath154 .",
    "closure under intersection is immediate .",
    "why does @xmath152 contain the languages @xmath154 ?",
    "since @xmath22is the less powerful logic , it suffices to show how to define @xmath154 using a @xmath16formula , and also using a @xmath23formula .",
    "the @xmath16formula says there exists a node that is an ancestor of all other nodes , while the @xmath23formula says that for every two nodes , there exists a common ancestor .    in general",
    ", the definitions of tree language classes are not equivalent .",
    "consider as @xmath152 the class of forest languages defined by purely existential formulas .",
    "in particular , if a language @xmath155 contains a tree @xmath60 , then it also contains the forest @xmath156 .",
    "this means that under the first definition , the only tree languages we get are the empty tree languages . under the second definition ,",
    "we get some more tree languages , such as `` trees with at least two nodes '' .      most of the proofs in the paper will work with @xmath16or @xmath147formulas .",
    "we present some simple properties of such formulas in this section .    apart from defining forest languages",
    ", we will also be using formulas to define languages of contexts . to define a context language we use formulas with a free variable ; such a formula is said to hold in a context if it is true when the free variable is mapped to the hole of the context. for instance , the formula @xmath157 with a free variable @xmath40 defines the set of contexts where every ancestor of the hole has label @xmath13 .",
    "we begin by describing the expressive power of purely universal formulas @xmath158 .",
    "[ lem : pi1-lemma ] a forest language is closed under pieces if and only if it is definable in @xmath158 . likewise for context languages .",
    "it is clear that a forest language definable in @xmath158 is closed under pieces as the models of a @xmath158 formula are closed under substructures .    for the converse ,",
    "let @xmath5 be a forest language that is closed under pieces , and let @xmath159 be its syntactic algebra .",
    "thanks to a pumping argument , any forest has a piece with the same type , but at most @xmath160 nodes .",
    "let @xmath161 be the finite set of forests with at most @xmath160 nodes that are outside @xmath5 .",
    "thanks to the pumping argument , a forest belongs to @xmath5 if and only if it has no piece in the set @xmath161 .",
    "the latter is a property that can be expressed in @xmath162 .",
    "if , additionally , the language @xmath5 is commutative , then we do not need to worry about the lexicographic order when talking about the pieces in @xmath161 , only the descendant order is relevant .",
    "we now turn to the formulas from @xmath142 .",
    "we begin with @xmath147 , since it has the better closure properties .",
    "[ fact : simple - lex ] let @xmath163 be context languages and @xmath164 be forest languages . if these languages are all definable in @xmath147 , then so are    1 .",
    "the forest language @xmath165 , 2 .   the forest language @xmath166 , 3 .",
    "the context language @xmath167 , 4 .",
    "the forest language @xmath168 , 5 .",
    "the context language @xmath169 ,    we only do the proof for @xmath170 , the others are treated similarly . when does a forest @xmath60 belong to @xmath170 ?",
    "there must exist two siblings @xmath171 and @xmath172 such that the set , call it @xmath105 , of gray nodes in the picture below        describes a forest in @xmath5 , and the other nodes describe a context in @xmath68 .",
    "below we define this property more precisely , and show that it can be defined in @xmath147 .",
    "first , we want to say that the nodes @xmath171 and @xmath172 are siblings . this can be expressed by a formula , call it @xmath173 , of @xmath147 .",
    "the formula quantifies existentially a common ancestor and uses universal quantification to check that this common ancestor is a parent of both nodes : @xmath174    next , we describe the set @xmath105 .",
    "membership @xmath175 is defined by a quantifier - free formula @xmath176    next , we say what it means for the part inside @xmath105 describes a forest in @xmath5 .",
    "suppose that the forest language @xmath5 is defined by a formula @xmath177 of @xmath147 .",
    "to say that @xmath105 describes a forest in @xmath5 we use the formula @xmath178 obtained from @xmath177 by restricting quantification to nodes satisfying @xmath179 .",
    "note that @xmath180 has free variables @xmath181 from @xmath179 . since @xmath179 is quantifier - free",
    ", the formula @xmath180 is also in @xmath147 .",
    "finally , we say that the part outside @xmath105 describes a context in @xmath68 .",
    "the idea is that the hole of this context corresponds to the set @xmath105 .",
    "the logical formula is constructed below .",
    "suppose that @xmath182 is a formula of @xmath147that describes @xmath68 .",
    "note that this formula has a free variable , as with formulas for contexts , which corresponds to the hole .",
    "let @xmath183 be the formula obtained from @xmath182 by restricting quantification to nodes not satisfying @xmath179 .",
    "the remaining question is : which node should we use for @xmath40 ?",
    "any node from @xmath105 will do , since for each node @xmath184 , all nodes from @xmath105 have the same relationship to @xmath41 , with respect to the descendant and lexicographic orders .",
    "we use the node @xmath171 for @xmath40 .",
    "summing up , the formula for @xmath170 is written below .",
    "@xmath185      in the proofs , it will sometimes be more convenient to use a type of regular expression instead of formulas .",
    "these are called _",
    "@xmath142 forest expressions _ and _ @xmath142 context expressions _ , and are defined below by mutual recursion :    1 .   any forest ( respectively , context ) language that is closed under pieces is a @xmath142 forest ( respectively , context ) expression . for any label @xmath186",
    ", @xmath187 is a @xmath142 context expression .",
    "likewise for @xmath188 , the language containing only the empty context .",
    "if @xmath163 are @xmath142 context expressions and @xmath164 are @xmath142 forest expressions , then 1 .",
    "@xmath189 is a @xmath142 context expression ; 2 .",
    "@xmath190 is a @xmath142 forest expression ; 3 .",
    "@xmath191 is a @xmath142 forest expression .",
    "4 .   @xmath192 is a @xmath142 forest expression .",
    "@xmath193 is a @xmath142 forest expression .",
    "@xmath194 is a @xmath142 forest expression .",
    "@xmath195 is a @xmath142 forest expression .    from lemmas  [ lem : pi1-lemma ] and  [ fact :",
    "simple - lex ] it follows that languages defined by @xmath142 forest and context expressions are definable in @xmath147 .",
    "the main result of this paper is the following theorem :    [ thm : main ]   + a forest language is definable in @xmath29if and only if its syntactic forest algebra satisfies the following identity , called the @xmath0 identity , @xmath196    before we prove the main theorem , we state and prove an important corollary .",
    "[ cor : decid ] it is decidable whether a forest language can be defined in @xmath29 .",
    "we assume that the language is represented as a forest algebra .",
    "this representation can be computed based on other representations , such as automata or monadic second - order logic .",
    "once the forest algebra is given , the @xmath0 identity can be tested in polynomial time by searching through all elements of the algebra .",
    "the relation @xmath136 can be computed in polynomial time , using a fixpoint algorithm as in  @xcite .",
    "the following lemma gives the easier implication from the main theorem .",
    "[ lemma : correctness ] let @xmath177 be a formula of @xmath147and let @xmath197 be two contexts . for @xmath198 sufficiently large , forests satisfying @xmath177 are closed under replacing @xmath199 with @xmath200 .",
    "assume that @xmath177 is @xmath201 , with @xmath202 quantifier - free .",
    "any first - order definable tree language is aperiodic  @xcite , i.e.  there is a number @xmath203 such that any context @xmath204 can be replaced by @xmath205 without affecting membership in the language , for any @xmath206 .",
    "we set @xmath207 .",
    "consider a forest @xmath208 that satisfies @xmath177 .",
    "we want to show that the forest @xmath209 also satisfies @xmath177 . by aperiodicity , it is sufficient to show that for some numbers @xmath210 , @xmath211 satisfies @xmath177 .",
    "because @xmath60 satisfies @xmath177 we can fix @xmath212 nodes @xmath213 that make @xmath214 true . by the choice of @xmath10",
    ", @xmath60 can be decomposed as @xmath215 such that @xmath206 and the middle @xmath216 part contains none of the nodes @xmath217 .",
    "we show that @xmath218 satisfies @xmath177 , which will conclude the proof of the lemma .",
    "we identify the nodes of @xmath60 with the nodes of @xmath219 outside the inserted context @xmath54 .",
    "consider the valuation of the variables @xmath220 that we fixed above .",
    "we show that this valuation , when seen as nodes of @xmath219 , makes @xmath177 true . indeed , for any valuation for the variables @xmath221 in @xmath219",
    ", we show that the valuation makes the quantifier - free part @xmath202 true .",
    "this is obvious if none of the @xmath222 are in @xmath54 because @xmath177 holds in @xmath60 and the insertion of @xmath54 does not affect the relationship @xmath8 and @xmath26 between the selected nodes .",
    "if some of the @xmath222 are in @xmath54 then one of the contexts @xmath51 in the middle block @xmath216 of @xmath219 does not contain any variable . as removing the context @xmath51",
    "that does not contain any variable does not affect the relationship @xmath8 and @xmath26 between the selected nodes , @xmath223 holds on @xmath224 iff it holds on @xmath225 .",
    "moreover , because @xmath54 is a piece of @xmath51 , replacing @xmath54 by @xmath51 does not affect the relationship @xmath8 and @xmath26 between the selected nodes and therefore @xmath223 holds on @xmath225 iff it holds on @xmath226 .",
    "hence @xmath202 must hold with the new valuation .",
    "the rest of the paper contains the more difficult implication of theorem  [ thm : main ] which is a consequence of the proposition below .",
    "[ prop : bottom - up ] fix a morphism @xmath227 , with @xmath70 satisfying the @xmath0 identity . for each @xmath228 ,",
    "the set @xmath229 of forests @xmath60 with type @xmath230 is definable by a @xmath142 forest expression , and thus also by a formula of @xmath147 .    before proving this proposition , we show how it concludes the proof of theorem  [ thm : main ] . since @xmath142 expressions allow union , the above proposition shows that any language recognized by @xmath231 can be defined by a @xmath142 forest expression . in particular , if @xmath5 is recognized by @xmath231 , then both @xmath5 and its complement can be defined by @xmath142 forest expressions , and consequently formulas of @xmath147 .",
    "since the complement of a @xmath147formula is a @xmath232formula , we get the right - to - left implication in theorem  [ thm : main ] .",
    "the rest of the paper is devoted to showing proposition  [ prop : bottom - up ] .",
    "the proof is by induction on two parameters . for the second parameter , we need to define a pre - order on @xmath72 .",
    "we say that a type @xmath233 is _ reachable from _ a type @xmath112 if there is a context type @xmath128 such that @xmath234 .",
    "if @xmath233 and @xmath112 are mutually reachable from each other , then we write @xmath235 .",
    "note that @xmath236 is an equivalence relation .",
    "note also that if @xmath112 is reachable from @xmath233 , then @xmath233 is a piece of @xmath112 .",
    "we write @xmath237 for the set of types @xmath233 that can be reached from every type @xmath238 .",
    "note that @xmath237 is not empty , since it contains the type @xmath239 , for any enumeration @xmath240 .",
    "the proof of proposition  [ prop : bottom - up ] is by induction on the size of the algebra @xmath70 and then on the position of @xmath233 in the reachability pre - order .",
    "the two parameters are ordered lexicographically , the most important parameter being the size of the algebra .",
    "that is we will either decrease the size of the algebra or stay within the same algebra , but go from a type @xmath112 to a type @xmath233 such that @xmath233 is reachable from @xmath112 but not vice versa .",
    "as far as @xmath233 is concerned , the induction corresponds to a bottom - up pass , where types close to the leaves are treated first .",
    "part of the induction proof is presented in section  [ sec : induction - step ] .",
    "however , the induction breaks down for types from @xmath237 , which are treated in section  [ sec : top - down ] .",
    "in this section we prove proposition  [ prop : bottom - up ] for forest types outside @xmath237 .",
    "we fix such a forest type @xmath233 for the rest of the section . by induction assumption , for each type @xmath241 from which @xmath233 is reachable , we have a @xmath142 forest expression defining the language @xmath242 of forests of type @xmath112 . ( the case when there are no such types @xmath112 corresponds to the induction base , which is treated the same way as the induction step . ) in this section we assume that @xmath233 is outside @xmath237 , and we will produce a @xmath142 forest expression for @xmath229 . the case where @xmath233 is in @xmath237 will be treated in section  [ sec : top - down ] .    in the following , we will be using the _ stabilizer _ of @xmath233 , defined as @xmath243 we say that a context type @xmath131 stabilizes @xmath233 if it belongs to the stabilizer of @xmath233 .",
    "the key lemma is that the @xmath0 identity implies that the stabilizer is a submonoid of @xmath71 .",
    "[ lemma : closed - under - comp ] the stabilizer of @xmath233 only depends on the @xmath236-class of @xmath233 .",
    "in particular , it is a submonoid of @xmath71 .    we need to show that if @xmath244 then @xmath245 .",
    "assume @xmath246 . then @xmath247 .",
    "hence we have @xmath248 such that @xmath249 and @xmath250 .",
    "this implies that @xmath251 and therefore @xmath252 . from the @xmath0 identity we have that @xmath253 hence @xmath254 is reachable from @xmath255 .",
    "since @xmath255 is clearly reachable from @xmath254 , we get @xmath256 and @xmath257 .    to see that @xmath258 is a submonoid consider @xmath259 .",
    "we need to show that @xmath260 .",
    "let @xmath261 . because @xmath262 we have @xmath263 .",
    "as @xmath264 we have @xmath265 and hence @xmath266 .",
    "recall now the piece order on forest types from the end of section  [ sec : forest - algebra ] , which corresponds to removing nodes from a forest .",
    "we say a set @xmath267 of forest types is _ closed under pieces _ if any piece of a forest type @xmath268 also belongs to @xmath269 .",
    "a similar definition is also given for sets of context types .",
    "another consequence of the @xmath0 identity is :    [ lemma : closed - under - piece ] each stabilizer is closed under pieces .",
    "we need to show that if @xmath111 stabilizes @xmath233 , then each piece @xmath270 of @xmath111 also stabilizes @xmath233 . by definition of the stabilizer we have a context type @xmath131 such that @xmath271 .",
    "we are looking for a context type @xmath130 such that @xmath272 .",
    "from @xmath271 we get @xmath273 .",
    "hence by the @xmath0 identity we have @xmath274 as desired .",
    "we now consider two possible cases : either @xmath275 , or not .",
    "equivalently , we could have asked if @xmath276 stabilizes @xmath233 .",
    "again equivalently , we could have asked if @xmath277 stabilizes @xmath233 .",
    "when @xmath275 , we will conclude by induction on the size of the algebra .",
    "when @xmath278 , we will conclude by induction on the reachability pre - order .",
    "these cases are treated separately in sections  [ sec : h - does - not - preserve - itself ] and  [ sec : h - preserves - itself ] , respectively .",
    "let @xmath279 be the set of pieces of @xmath233 .",
    "by assumption that @xmath275 , we know that both @xmath280 and @xmath281 stabilize @xmath233 .",
    "[ lem : sub - forest - algebra ] if @xmath282 then @xmath283 is a forest algebra .",
    "we need to show that the two sets are closed under all operations : @xmath284 the first of the above inclusions follows from lemma  [ lemma : closed - under - comp ] . for the second inclusion",
    ", we note that @xmath285 is a piece of @xmath233 by assumption on @xmath275 .",
    "in particular , each forest type in @xmath286 is a piece of @xmath233 . for the third inclusion",
    ", @xmath275 implies that both @xmath280 and @xmath281 stabilize @xmath233 . since by lemma  [ lemma : closed - under - piece ] the stabilizer is closed under pieces , we get the third inclusion . for the last inclusion , consider @xmath246 and @xmath287 .",
    "we need to show that @xmath288 .",
    "this holds because @xmath289 is a piece of @xmath290 , which is a piece of @xmath233 as @xmath291 .",
    "recall that in this section we are dealing with the case when @xmath233 is outside @xmath237 , i.e.  there are some forest types that can be reached from @xmath233 but not vice versa . in this case",
    "we show that @xmath279 is a proper subset of @xmath72 . to see this ,",
    "we show that for @xmath292 , @xmath293 .",
    "assume for contradiction that @xmath294 .",
    "then @xmath295 is a piece of @xmath233 and because @xmath296 and @xmath258 is closed under pieces ( lemma  [ lemma : closed - under - piece ] ) , we infer @xmath297 and @xmath233 is reachable from @xmath295 , a contradiction .",
    "therefore the algebra from the above lemma is a proper subalgebra of the original @xmath70 .",
    "furthermore , this algebra contains all pieces of @xmath233 ; so it still recognizes the language @xmath229 ; at least as long as the alphabet in the morphism is reduced to include only letters that can appear in @xmath233 .",
    "we can then use the induction assumption on the smaller algebra to get a @xmath142 forest expression for @xmath229 .      for @xmath128 , we write @xmath298 for the set of contexts of type @xmath131 . for @xmath238 , we write @xmath242 for the set of forests of type @xmath112 , and @xmath299 for the set of trees of type @xmath112 .",
    "let @xmath279 be the set of forest types @xmath112 such that @xmath233 is reachable from @xmath112 but not vice - versa .",
    "by induction assumption , for each @xmath287 , the language @xmath242 is definable by a @xmath142 forest expression .",
    "our goal is to give a @xmath142 forest expression for @xmath229 .    [",
    "lem : decompo - nonminim ] any forest @xmath60 of type @xmath233 can be decomposed as @xmath300 , with @xmath33 a forest whose type is reachable from @xmath233 , and which furthermore is :    1 .",
    "a tree @xmath301 with the type of @xmath56 in @xmath279 ; or 2 .   a forest @xmath302 with the types of @xmath303 in @xmath279",
    ".    consider decompositions of @xmath60 as @xmath300 . among such decompositions ,",
    "take a decomposition where the forest @xmath33 has a type reachable from @xmath233 , but @xmath33 has no subforest with a type reachable from @xmath233 .",
    "such a decomposition always exists as @xmath60 is of type @xmath233 .",
    "if @xmath33 is a tree , we get case ( 1 ) , if @xmath33 is a forest , we get case ( 2 ) .    note that in the above lemma , the type of the context @xmath51 must stabilize @xmath233 , since both the type of @xmath33 and the type of the whole forest @xmath60 are in the class of @xmath233 .",
    "therefore , thanks to the above lemma , the set @xmath229 of forests with type @xmath233 can be decomposed as @xmath304 note that @xmath242 , @xmath305 and @xmath306 can all be written as @xmath142 forest expressions thanks to the induction assumption from proposition  [ prop : bottom - up ] .",
    "the only thing that remains is showing that the context language @xmath307 can be defined by a @xmath142 context expression .",
    "for this , we use the following proposition .    [ prop : context - expression ] for any @xmath128 , the language @xmath298 of contexts of type @xmath131 is defined by a finite union of concatenations of the form @xmath308 where each context language @xmath309 is either :    1 .   a singleton language @xmath310 for some @xmath186 ; or 2 .   a context language closed under pieces ; or 3",
    ".   a context language @xmath311 or @xmath312 for some @xmath238 .",
    "the proof of this proposition will be presented in section  [ sec : treat - cont - like - words ] .",
    "meanwhile , we show how the proposition gives a @xmath142 context expression for each language @xmath307 in  ( [ eq : lh - nonmaximal - decomp ] ) .",
    "the singleton languages , and the languages closed under pieces are @xmath142 context expressions by definition .",
    "the only potential problem is with the languages @xmath313 or @xmath312 that appear in the proposition .",
    "since the context types @xmath111 that appear in  ( [ eq : lh - nonmaximal - decomp ] ) stabilize @xmath233 , the forest type @xmath112 has to be such that @xmath314 or @xmath315 stabilizes @xmath233 . in either case , @xmath112 can not be reachable from @xmath233 , since @xmath316 and the stabilizer is closed under pieces .",
    "as @xmath233 is obviously reachable from @xmath112 , the language @xmath242 is definable by a @xmath142 forest expression thanks to the induction assumption from proposition  [ prop : bottom - up ] .",
    "finally , @xmath299 is the intersection of @xmath242 with the set of all trees , which is definable by a @xmath142 forest expression .",
    "in this section , we prove proposition  [ prop : context - expression ] .",
    "the basic idea is that a context is treated as a word , whose letters are smaller contexts .",
    "the proof strategy is as follows .",
    "first , in section  [ sec : inter - words ] , we present the characterization of @xmath22for words , which was shown by pin and weil in  @xcite . this characterization is slightly strengthened to include what we call stratified monoids , which are used to model the contexts that appear in proposition  [ prop : context - expression ] .",
    "then , in section  [ sec : proof - prop - refpr ] , we apply the word result , in its strengthened form , to prove proposition  [ prop : context - expression ] .      in this section",
    "we present the characterization of @xmath22for words , extended to stratified monoids .",
    "stratified monoid _ is a monoid @xmath69 along with a pre - order @xmath317 that satisfies the following property : @xmath318 a subset @xmath319 is called _ downward closed under @xmath136 _ if for every @xmath320 , and every @xmath321 , we also have @xmath322 .",
    "[ prop : word - da ] let @xmath97 be an alphabet ( possibly infinite ) , and let @xmath323 be a morphism into a stratified monoid @xmath324 that satisfies the identity @xmath325 for any @xmath326 , the language @xmath327 is defined by a finite union of expressions @xmath328 where each @xmath329 is of the form @xmath330 for some @xmath331 , and each @xmath332 is of the form @xmath333 for some @xmath319 downward closed under @xmath136 .",
    "the difference between the above result and the main technical result in pin and weil is twofold .",
    "first , we use infinite alphabets here .",
    "second , we use stratified monoids to get a stronger conclusion , where the letters in the blocks @xmath334 are downward closed .",
    "both differences are necessary for our application to context languages .",
    "our proof is a straightforward adaptation of a proof of thrien and wilke in  @xcite , which analyzed the languages recognized by semigroups in da .    before proving this result",
    ", we remark how proposition  [ prop : word - da ] gives the characterization of @xmath22presented by pin and weil :    a word language ( over a finite alphabet ) is definable @xmath22if and only if its syntactic monoid satisfies the identity  ( [ eq : da ] ) .",
    "the only if implication is shown using a standard ehrenfeucht - frass argument , we only consider the if implication .",
    "let then @xmath335 be a language recognized by a morphism @xmath336 , with @xmath69 satisfying ( [ eq : da ] ) .",
    "we can see this @xmath69 as a stratified monoid under the identity pre - order . by applying proposition  [ prop : word - da ] ,",
    "we see that each inverse image @xmath337 is defined by an expression as in proposition  [ prop : word - da ] ( the downward closure is a vacuous condition , since the order is trivial ) .",
    "since each such expression is clearly expressible in @xmath16 , we get that @xmath5 is definable in @xmath16 .",
    "furthermore , by proposition  [ prop : word - da ] also the complement of @xmath5 is definable in @xmath16 , and therefore @xmath5 is also definable in @xmath23 .",
    "we now proceed to the proof of proposition  [ prop : word - da ] .",
    "the proof is by induction on the size of @xmath338 or , equivalently , the number of elements in the monoid that correspond to single letters . in the proof of thrien and wilke ,",
    "the induction was simply on the size of the alphabet , but this will not work here , since the alphabet is infinite .",
    "we use the term _",
    "@xmath142 word expression _ for the word expressions as in the statement of the proposition  [ prop : word - da ] .",
    "it is not difficult to show that languages defined by @xmath142 word expressions are closed under union , intersection and concatenation .",
    "we will use the following notation . given two elements @xmath203 and @xmath10 of @xmath69 we say that @xmath339 if there exist @xmath340 such that @xmath341 and @xmath342 .",
    "we say that @xmath343 if there exist @xmath340 such that @xmath344 and @xmath345 .",
    "these are the left and right green s relations .",
    "a classical consequence of aperiodicity , itself a consequence of  ( [ eq : da ] ) , is : @xmath346    we will also use the following property of monoids satisfying  ( [ eq : da ] ) , which can be proved along the lines of lemma  [ lemma : closed - under - comp ] . @xmath347    [ lemma : wilke3 ] for all @xmath326 , the language @xmath348 is definable by a @xmath142 word expression .",
    "let @xmath349 be the set of letters @xmath13 of @xmath97 such that @xmath350 .",
    "in other words , @xmath351 , where @xmath352 is the set @xmath353 .    we will show that @xmath354 .",
    "stated differently , a word belongs @xmath355 if and only if all of its letters belong to @xmath349 .",
    "thanks to  ( [ eq : wilke1 ] ) , for all @xmath356 we have @xmath357 .",
    "hence by induction on the length of @xmath358 we can prove @xmath359 .",
    "for the converse implication , let @xmath130 be a word outside @xmath360 , of the form @xmath361 with @xmath362 and @xmath363 .",
    "then @xmath364 for some @xmath365 , and from the discussion above we have @xmath356 .",
    "hence by  ( [ eq : wilke1 ] ) and by hypothesis on @xmath13 , @xmath366 and @xmath130 can not be in @xmath355 .",
    "to conclude , we need to show that @xmath352 is closed under @xmath136 .",
    "indeed , let @xmath367 and let @xmath320 .",
    "by assumption on the monoid being stratified , we have @xmath368 .",
    "in particular , we have @xmath369 from the above it follows that @xmath370 , which gives @xmath371 by  ( [ eq : wilke1 ] ) , and hence @xmath372 .    note that by  ( [ eq : wilke1 ] ) we have @xmath373 whenever @xmath343 .",
    "[ lemma : wilke4 ] for any @xmath326 , the following language can be defined by a @xmath142 word expression : @xmath374    before we give the proof , we show how it concludes the proof of proposition  [ prop : word - da ] . consider the set @xmath375 .",
    "each word @xmath130 in this set can be written as @xmath376 where @xmath111 is the smallest prefix of @xmath130 such that @xmath377 .",
    "hence we have : @xmath378 since @xmath142 word expressions are closed under union and concatenation , the above language is definable by a @xmath142 word expression thanks to lemmas  [ lemma : wilke3 ] and [ lemma : wilke4 ] . using a symmetric version of lemma  [ lemma : wilke3 ] and lemma  [ lemma : wilke4 ] for @xmath379 , we can get an @xmath142 word expression for @xmath380 .",
    "but we also know from  ( [ eq : wilke2 ] ) that @xmath381 and the result follows by closure of @xmath142 word expressions under intersection .",
    "we say that @xmath203 is _ a prefix _ of @xmath10 if there exists @xmath382 such that @xmath383 .",
    "this defines a pre - order in @xmath69 .",
    "the proof is by induction on the position of @xmath203 relative to this pre - order .",
    "the induction base is when @xmath203 has no proper prefixes : if @xmath344 then @xmath356 . in this case",
    "the language @xmath384 contains at most the empty word , since the condition on @xmath385 is infeasible .",
    "clearly both languages @xmath386 and @xmath387 are @xmath142 word expressions .",
    "assume now that @xmath203 is not minimal .",
    "each word @xmath130 of @xmath384 can be written as @xmath388 where @xmath186 , @xmath389 and @xmath390 .",
    "furthermore , @xmath111 can be written as @xmath391 where @xmath392 is the smallest prefix of @xmath111 such that @xmath393 .",
    "we therefore have : @xmath394 where the union is taken for @xmath395 such that @xmath396 , @xmath397 a prefix of @xmath203 and for @xmath186 with @xmath398 . by induction",
    "the language @xmath399 is definable by a @xmath142 word expression .",
    "it is also clear that @xmath400 .",
    "recall from the proof of lemma  [ lemma : wilke3 ] that @xmath401 where @xmath402 for some @xmath319 .",
    "therefore we also have @xmath403 .",
    "from  ( [ eq : wilke1 ] ) and the fact that @xmath390 we know that @xmath404 , therefore @xmath405 is a proper subset of @xmath97 .",
    "let @xmath406 be the restriction of @xmath179 to @xmath405 .",
    "we have @xmath407 , from induction on the size of the alphabet in proposition  [ prop : word - da ] we obtain a @xmath142 word expression for @xmath408 .",
    "this concludes the proof of this lemma as @xmath142 word expressions are closed under concatenation and union .",
    "we now proceed to show how the word result stated in proposition  [ prop : word - da ] can be lifted to the context result in proposition  [ prop : context - expression ] .",
    "proposition  [ prop : context - expression ] says that for any context type @xmath128 , the set of contexts of type @xmath131 is described by a finite union of expressions of the form @xmath409 where each @xmath309 is either : a singleton language @xmath310 ; or closed under pieces ; or an expression @xmath311 or @xmath312 .",
    "the basic idea is that we treat the context as a word over an infinite alphabet , which we call @xmath410 .",
    "this alphabet has two kinds of letters . both kinds are contexts :    1 .",
    "contexts of the form @xmath411 , for @xmath186 .",
    "contexts of the form @xmath412 or @xmath413 , for @xmath60 a tree over @xmath97 .",
    "consider now the morphism @xmath414 , which is simply @xmath231 restricted to the contexts in  @xmath415 .",
    "every context @xmath51 in @xmath298 can be decomposed as @xmath416 . in particular , we have @xmath417    we can treat @xmath71 as a stratified monoid , by using the piece relation @xmath136 as the pre - order . by applying proposition  [ prop : word - da ] ,",
    "we see that the inverse image @xmath418 can be presented as a finite union of expressions of the form : @xmath419 where @xmath420 are elements of @xmath71 , and @xmath421 are a subsets of @xmath71 that are downward closed under @xmath136 .",
    "we need to show that the expressions used above are of the three forms allowed by proposition  [ prop : context - expression ] .",
    "consider first an expression @xmath422 , where @xmath423 is closed under pieces .",
    "since @xmath424 is closed under pieces ( as a set of context types ) , then so is the language @xmath425 ( as a set of contexts ) .",
    "consider next an expression of the form @xmath426 .",
    "this context language is a union of languages of the first ( singleton ) and third ( @xmath427 or @xmath312 ) types described in proposition  [ prop : context - expression ] .",
    "the union is not a problem for a @xmath142 word expression , since union distributes across concatenation .",
    "recall that in section  [ sec : induction - step ] , we managed to find a @xmath142 forest expression for each set @xmath229 , assuming @xmath233 was outside @xmath237 .",
    "our techniques failed for forest types @xmath428 , i.e.  forest types reachable from every other forest type . in this section , we deal with these forest types .    in order to deal with the types from @xmath237 , we will have to do a different induction , this time on context types .",
    "this induction , stated in proposition  [ prop : contexts ] , is expressed in terms of an equivalence relation @xmath429 . given a context type @xmath128 and two forest types @xmath430 ,",
    "we write @xmath431 we extend this equivalence relation to context types , by @xmath432 by abuse of notation , we also lift the equivalence relation @xmath429 to forests , considering two forests @xmath433 equivalent when their forest types are equivalent .",
    "it is this meaning that is used in the statement below .",
    "[ prop : contexts ] for any context type @xmath131 , every equivalence class of forests under @xmath429 is forest language definable by a @xmath142 forest expression .    from proposition  [ prop : contexts ]",
    "we immediately obtain a @xmath142 forest expression for @xmath229 , as the equivalence class of @xmath429 containing @xmath233 , where @xmath434 .",
    "hence the proof of proposition  [ prop : contexts ] ends the proof of proposition  [ prop : bottom - up ] .",
    "we note that the proof of proposition  [ prop : contexts ] will be using the @xmath142 forest expressions @xmath229 for types @xmath435 that have been developed in section  [ sec : induction - step ] . in particular",
    "if an equivalence class of @xmath429 is contained in @xmath436 , then it can easily be defined by the disjunction of all the @xmath142 forest expressions corresponding to each type .",
    "the difficulty is to handle equivalence classes that intersect @xmath237 .",
    "the rest of section  [ sec : top - down ] is devoted to proving proposition  [ prop : contexts ] .",
    "the proof uses the following pre - order on context types .",
    "we say that a context type @xmath111 is a _ prefix _ of a context type @xmath131 if there exists a context type @xmath130 such that @xmath437 ( we also say that @xmath131 is an _ extension _ of @xmath111 ) .",
    "we overload the use of @xmath236 and denote by @xmath438 the equivalence relation induced by the prefix pre - order , i.e.  @xmath439 holds if @xmath131 is both a prefix and an extension of @xmath130 .",
    "the proof of proposition  [ prop : contexts ] is by induction on the position of @xmath131 in the prefix pre - order , starting with context types that have no proper extension , and ending at the context type @xmath434 that has no proper prefix .",
    "the base of the induction in the proof of proposition  [ prop : contexts ] is when the context type @xmath131 has no proper extension , i.e.  @xmath439 holds for all extensions @xmath130 of @xmath131",
    ". we will show that such a context type is necessarily _ constant _ , i.e.  @xmath440 holds for all forest types @xmath441 .",
    "this gives the induction base , since for a constant context type @xmath131 , there is only one equivalence class of @xmath429 , and this class is , by definition , the set of all forests , which can be defined by a @xmath142 forest expression ( it is closed under pieces ) .",
    "[ lemma : minimal - then - constant ] a context type has no proper extension if and only if it is constant .",
    "the if direction is immediate : if a context type @xmath131 is constant , then @xmath442 holds for all context types @xmath111 , and therefore @xmath131 has no proper extension . for the converse implication , as well as in the rest of section  [ sec : top - down ] , we will use the notion of stabilizers for context types : @xmath443 when @xmath444 , we say that _ @xmath111 stabilizes @xmath131_. as for stabilizers of forest types ( recall lemma  [ lemma : closed - under - comp ] and lemma  [ lemma : closed - under - piece ] ) , the @xmath0 identity implies that the stabilizer @xmath445 is a submonoid of @xmath71 and it is closed under pieces .",
    "the following lemma implies lemma  [ lemma : minimal - then - constant ] , since its assumptions are met by a context type without proper extensions .",
    "recall that @xmath237 is the equivalence class of @xmath236 that contains all types reachable from any other type .",
    "[ lemma : at - least - one - disjoint ] if both @xmath446 and @xmath447 intersect @xmath445 , then the context type @xmath131 is constant .    first note that if some context type in @xmath446 stabilizes @xmath131 , then all context types in @xmath446 stabilize @xmath131 , likewise for @xmath448 .",
    "this is because the stabilizer is closed under pieces , and every type in @xmath449 is a piece of every type in @xmath446 .",
    "let @xmath450 , for some arbitrary enumeration @xmath451 of @xmath72 .",
    "as we noted above , both @xmath452 and @xmath453 stabilize @xmath131 .",
    "therefore , @xmath454 the context type @xmath455 is constant , since any forest type @xmath228 is a piece of @xmath456 , and therefore by  ( [ eq : swallow ] ) we have @xmath457 hence the context type @xmath131 is constant as it is equal to @xmath458 for some context type @xmath130 .",
    "we now proceed to the induction step in proposition  [ prop : contexts ] .",
    "recall that our goal is to find a @xmath142 forest expression for every equivalence class of @xmath429 . for a forest language @xmath5 ,",
    "we denote by @xmath459_v$ ] the union of equivalence classes of @xmath429 that intersect @xmath5 , i.e. @xmath460_v =   \\set { t : t \\equiv_v s \\mbox { for some } s \\in l } \\quad    \\supseteq l\\ .\\ ] ] we use a similar notation @xmath461_v$ ] for languages of contexts .",
    "we say that a forest language is a _ @xmath131-overapproximation _ of a forest language @xmath5 if it contains @xmath5 , but is contained in @xmath459_v$ ] .",
    "in other words , a @xmath131-overapproximation may add forests to @xmath5 , but it adds no new forest types , at least as far as the context type @xmath131 is concerned .",
    "note that a language may have several @xmath131-overapproximations .",
    "[ prop : overapprox ] for every @xmath228 , some @xmath131-overapproximation of @xmath229 can be defined by a @xmath142 forest expression .",
    "the above result concludes the proof of proposition  [ prop : contexts ] . to see this , consider an equivalence class consisting of forest types @xmath462 .",
    "the set of forests with a type in the class is by definition equal to @xmath463 . by definition of @xmath131-overapproximation",
    "this set is also equal to @xmath464 where @xmath465 is any @xmath131-overapproximation of @xmath466 .",
    "hence it is definable by a @xmath142 forest expression by proposition  [ prop : overapprox ] .",
    "the rest of this section is devoted to proving proposition  [ prop : overapprox ] .",
    "when @xmath233 is outside @xmath237 , then @xmath229 itself , which is its own @xmath131-overapproximation , is definable by a @xmath142 forest expression by the results from the previous sections .",
    "the problem is when @xmath233 is in @xmath237 . because @xmath131 has some proper extension , from lemma  [ lemma : at - least - one - disjoint ] we know that at least one of @xmath467 or @xmath446 is disjoint with the stabilizer of @xmath468 . without loss of generality",
    "we assume @xmath469 in other words , if the type of a context stabilizes @xmath131 , then it is possible that some tree to the left of the hole has a type in @xmath237 , however all trees to the right of the hole must have types outside @xmath237 .",
    "in order to obtain a @xmath131-overapproximation of @xmath229 for @xmath470 we will use the following decomposition of forests with types in @xmath237 .",
    "[ lemma : decomp ] any forest @xmath60 of type in @xmath237 has a decomposition @xmath300 where @xmath51 is a context whose type stabilizes @xmath131 , and @xmath33 is a forest of type in @xmath237 that has one of the two forms below .    1 .   [ item : decomp2bis ] @xmath301 with the type of the forest @xmath56 outside @xmath237 ; or 2 .   [ item : decomp2 ] @xmath301 with the type of the context @xmath471 not stabilizing @xmath131 ; or 3 .   [ item : decomp3bis ] @xmath302 with the types of the forests @xmath303 outside @xmath237 ; or 4 .",
    "[ item : decomp3 ] @xmath302 and 1 .",
    "if @xmath472 has type in @xmath237 , then the type of @xmath473 does not stabilize @xmath131 .",
    "if @xmath474 has type in @xmath237 , then the type of @xmath475 does not stabilize @xmath131 .",
    "consider the set @xmath476 of all possible pairs @xmath477 such that @xmath300 , the type of @xmath51 preserves @xmath131 and the type of @xmath33 is in @xmath237 .",
    "take a pair @xmath478 that is maximal in the following sense : if @xmath54 is a nonempty context , then @xmath476 has no pair with @xmath479 on the first coordinate .",
    "suppose @xmath33 is a tree of the form @xmath301 . if @xmath56 has a type outside @xmath237 , we get item  ( [ item : decomp2bis ] ) .",
    "if @xmath56 has type in @xmath237 , then by maximality , the context type of @xmath480 does not stabilize @xmath131 , and therefore @xmath411 has a type that does not stabilize @xmath131 , so we get item  ( [ item : decomp2 ] ) .",
    "suppose @xmath33 is a forest of at least two trees .",
    "consider any partition of @xmath33 into two nonempty forests @xmath302 .",
    "if both @xmath303 have type outside @xmath237 , then we get item  ( [ item : decomp3bis ] ) .",
    "otherwise , we get case  ( [ item : decomp3 ] ) by maximality of @xmath477 .    from lemma  [ lemma :",
    "decomp ] , we have for @xmath470 : @xmath481 where @xmath482 stands for the set of all forests @xmath33 that have type @xmath483 and that satisfy one of the conditions  ( [ item : decomp2bis])-([item : decomp3 ] ) of lemma  [ lemma : decomp ] . to get the @xmath131-overapproximation of @xmath229 we will use @xmath131-overapproximations for the smaller expressions above , as stated by the following two lemmas .",
    "the first lemma is concerned with languages of the form @xmath482 .",
    "[ lemma : y - approx ] for every @xmath483 , some @xmath131-overapproximation @xmath484 of @xmath482 can be defined by a @xmath142 forest expression .",
    "for the second lemma , concerning @xmath307 , we need a more careful statement .",
    "the overapproximation that we give is not really an overapproximation of @xmath307 , but it is an overapproximation that works as long as a forest of type in @xmath237 is inserted into the hole .",
    "[ lemma : k - approx ] for any @xmath444 , one can define a @xmath142 context expression @xmath485 such that for any forest @xmath33 of type in @xmath237 , @xmath486 is a @xmath131-overapproximation of @xmath487 .",
    "these two lemmas are proved in sections  [ sec : proof - lemma - y ] and  [ sec : proof - lemma - k ] , respectively .",
    "first we show how they complete the proof of proposition  [ prop : overapprox ] .",
    "we write @xmath488 for the set of all forests with a type in @xmath237 .",
    "we claim that the following language @xmath489 is a @xmath131-overapproximation of @xmath229 .",
    "the first property required from a @xmath131-overapproximation , @xmath490 , is immediate . for the second part , @xmath491_v$ ]",
    ", we need a bit more effort .",
    "we show a stronger result , namely that for any @xmath111 and @xmath456 as in the summation above , we have @xmath492_v\\ ] ] this completes the proof of @xmath493_v$ ] , since @xmath494_v$ ] distributes across union . to prove the above",
    ", we apply the properties of @xmath485 and @xmath484 to get @xmath495_v \\quad   \\subseteq \\quad    [ k_u   \\cdot { \\hat{y}}_f    ] _ v \\quad   \\subseteq \\quad    [ k_u   \\cdot [ y_f]_v    ] _ v\\ ] ] to complete the proof , we would like to replace @xmath496_v$ ] by @xmath482 in the last expression above .",
    "this can be done thanks to the following easily verifiable consequence of the fact that @xmath429 is a congruence for forest algebras .",
    "for any set of contexts @xmath68 and set of languages @xmath5 , we have @xmath497_v]_v=[kl]_v$ ] .",
    "thanks to lemmas  [ lemma : k - approx ] and  [ lemma : y - approx ] , the only thing keeping @xmath498 from being defined by a @xmath142 forest expression is the language @xmath488 .",
    "we deal with this language in the following lemma .",
    "the language @xmath488 is definable by a @xmath142 forest expression .",
    "a subforest of @xmath60 is a forest @xmath33 such that @xmath300 for some context @xmath51 .",
    "take a forest @xmath499 and consider a subforest @xmath33 of @xmath60 that is in @xmath488 , but has no proper subforests in @xmath488 .",
    "then either @xmath33 is a tree @xmath500 with @xmath501 , or @xmath302 with @xmath502 .",
    "therefore , a forest is in @xmath488 if and only if it has a subforest in @xmath503 containing such a subforest can be expressed by a @xmath142 forest expression , by prefixing the set above with the set of all contexts .",
    "the expressions for @xmath504 and @xmath306 are @xmath142 forest expressions by the results from the section on types outside @xmath237 .",
    "our goal in this section is to prove lemma  [ lemma : k - approx ] , which says that for any context type @xmath111 stabilizing @xmath131 , there is a @xmath142 context expression @xmath485 such that for any forest @xmath33 with a type in @xmath237 , @xmath486 is a @xmath131-overapproximation of @xmath487 .",
    "we apply proposition  [ prop : context - expression ] to get an expression for the context language @xmath307 of the form @xmath505 the problem with the expression above is that it may use , in some of the subexpressions @xmath506 , languages @xmath507 or @xmath508 that involve forest types @xmath483 , and we do not know how to describe types in @xmath237 .",
    "this is where the overapproximation comes in .",
    "we show that if the languages for types in @xmath237 are overapproximated , then the result satisfies the properties required by lemma  [ lemma : k - approx ] .",
    "a more detailed argument is described below .",
    "we say a context language @xmath68 satisfies ( * ) if it has the property required from @xmath307 by lemma  [ lemma : k - approx ] , namelythere is a @xmath142 context expression @xmath509 such that for any forest @xmath33 with a type in @xmath237 , the language @xmath510 is a @xmath131-overapproximation of @xmath511 .",
it is not difficult to see that property ( * ) is preserved by unions and compositions of context languages . in particular , in order to prove lemma  [ lemma : k - approx ] , it suffices to show ( * ) is satisfied by all languages @xmath506 that appear in  ( [ eq : ku - decomp ] ) .",
    "the only problem with the overapproximation is when @xmath506 is of the form @xmath507 or @xmath508 , for @xmath483 . in all the other cases ,",
    "@xmath506 is known to be definable by a @xmath142 context expression , and no overapproximation is needed .",
    "note that by  ( [ eq : assumption - left ] ) , the expressions @xmath512 can not be used , since a forest type from @xmath237 can not appear to the right of the hole in a context type that stabilizes @xmath131 .",
    "therefore , to complete the proof of lemma  [ lemma : k - approx ] , it remains to show that for any @xmath483 , the context language @xmath507 satisfies ( * ) .    in the following , we use an equivalence relation @xmath513",
    "this is defined to be the intersection of all equivalence relations @xmath514 , for context types @xmath111 that do not stabilize @xmath131 ( and hence @xmath131 is a strict prefix of @xmath515 ) . for a forest language @xmath5 , we write @xmath516_{v+ } = \\bigcap_{u \\not \\in stab(v ) } [ l]_{vu}\\ ] ] by the induction assumption in proposition  [ prop : contexts ] , each equivalence class of @xmath513 is definable by a @xmath142 forest expression and therefore so is each language @xmath459_{v+}$ ] , as a union of equivalence classes of @xmath513 .",
    "we will show that , for any @xmath517 , the context language @xmath518 satisfies ( * ) with @xmath519_{v+}+{\\box}$ ] .",
    "assume that the type of @xmath33 is in @xmath237 .",
    "then we have : @xmath520_{v+ } + s    \\quad \\subseteq \\quad [ ks]_v = [ l_f+s]_v \\ .\\ ] ] the first inequality is clear . for the second inequality , we need to show that @xmath521_{v+ } + s ) \\qquad",
    "\\subseteq \\qquad v \\cdot    \\alpha(l_f + s)\\ ] ] this inclusion holds because we have : @xmath521_{v+ } + s ) = v \\cdot ( { \\box}+    \\alpha(s ) ) \\cdot \\alpha([l_f]_{v+ } )   =     v \\cdot ( { \\box}+    \\alpha(s ) ) \\cdot \\alpha(l_f )   = v \\cdot    \\alpha(l_f + s)\\ ] ] in the second equality , we used the definition of @xmath522_{v+}$ ] and the assumption that @xmath523 does not stabilize @xmath131 .",
    "the latter follows from assumption  ( [ eq : assumption - left ] ) since the type of @xmath33 is in @xmath237 .      in this section",
    ", we show that for every type @xmath483 , a @xmath131-overapproximation of @xmath482 can be defined by a @xmath142 forest expression .",
    "recall that the language @xmath482 was defined based on a case distinction in lemma  [ lemma : decomp ] , and therefore it can be decomposed into a union of four languages , one for each of the four cases in the lemma . as @xmath131-overapproximations are closed under union , for each of these languages , we provide a @xmath131-overapproximation defined by a @xmath142 forest expression .    for the languages corresponding to cases ( [ item : decomp2bis ] ) and ( [ item : decomp3bis ] )",
    ", we use the assumption that @xmath229 can be defined by a @xmath142 expression for every type @xmath524 .",
    "the interesting cases are ( [ item : decomp2 ] ) and  ( [ item : decomp3 ] ) .",
    "the language corresponding to case ( [ item : decomp2 ] ) is a union of forest languages of the form @xmath525 ranging over letters @xmath13 such that @xmath471 does not stabilize @xmath131 , and forest types @xmath233 with @xmath526 .",
    "we treat each language @xmath527 separately",
    ".    it may be the case that @xmath233 belongs to @xmath237 and therefore we have no @xmath142 forest expression for @xmath229 .",
    "however , we can use overapproximation . as",
    "@xmath13 does not stabilize @xmath131 , we can apply the induction assumption in proposition  [ prop : contexts ] and obtain a @xmath142 forest expression for @xmath528_{v+}$ ] .",
    "but then the @xmath142 forest expression @xmath529_{v+ } $ ] is a @xmath131-overapproximation of @xmath527 .",
    "it clearly contain @xmath527 so it remains to show that it is included in @xmath530_v$ ] .",
    "to see this consider a forest @xmath531_{v+}$ ] of type @xmath112 and an arbitrary @xmath532 .",
    "as @xmath13 does not stabilize @xmath131 , @xmath388 does not stabilize @xmath131 .",
    "hence by the choice of @xmath112 we have @xmath533 and @xmath534 is in @xmath530_v$ ] .    it remains to consider the case of ( [ item : decomp3 ] ) , where have a union of sets @xmath535 ranging over @xmath536 that satisfy the two implications in item ( [ item : decomp3 ] ) of lemma  [ lemma : decomp ] .",
    "we do each pair @xmath536 separately .",
    "we consider three subcases .",
    "the first subcase is when @xmath537 .",
    "therefore we have a @xmath142 forest expression for @xmath538 . in this case",
    "we claim that @xmath539_{v+}\\ ] ] is a @xmath131-overapproximation of of @xmath540 .",
    "the first requirement of @xmath131-overapproximation , @xmath541_{v+}\\ , \\ ] ] is immediate . for the other requirement",
    ", we need to show that for any forests @xmath542 and @xmath543_{v+}$ ] , the type of @xmath544 is @xmath545-equivalent to @xmath546 . from @xmath547 , we know that the type of @xmath548 is @xmath549 , but all we know about @xmath550 is that its type @xmath551 satisfies @xmath552 .",
    "consider an arbitrary @xmath553 .",
    "since @xmath554 does not stabilize @xmath131 , we also have @xmath555 does not stabilize @xmath131 . hence from @xmath552",
    "we get @xmath556 .",
    "the second subcase , when @xmath557 , is treated as above by symmetry .",
    "the third subcase is when both @xmath549 and @xmath558 are in @xmath237 . as a consequence of @xmath559 and the second condition of item  ( [ item : decomp3 ] ) in lemma  [ lemma : decomp ]",
    "is that @xmath560 we claim that a @xmath131-overapproximation of @xmath561 is @xmath562_{v+ } \\cap l_\\bot ) \\quad    + \\quad      ( [ l_{h_2}]_{v+ }      \\cap l_\\bot)\\ .\\ ] ] as before , the problem boils down to showing that for any forests @xmath563_{v+ } \\cap l_\\bot   \\qquad       t_2 \\in [ l_{h_2}]_{v+ }      \\cap l_\\bot\\ , \\ ] ] the types @xmath564 of @xmath548 and @xmath551 of @xmath550 satisfy @xmath565 . in other words ,",
    "we need to show that for an arbitrary @xmath566 @xmath567 since @xmath568 , then by  ( [ eq : case - with - intersection ] ) the context type @xmath569 does not stabilize @xmath131 and therefore the same holds for @xmath570 .",
    "hence , we can use the assumption on @xmath571 to infer @xmath572 in a similar way , we use @xmath559 , the assumption  ( [ eq : assumption - left ] ) , and @xmath573 , to complete the proof of this case , and of lemma  [ lemma : y - approx ] .",
    "in this section , we consider the logic @xmath22where only the descendant order , and not the lexicographic order , is available . we give an effective characterization in the following theorem .",
    "[ thm : main - commutative ]   + a forest language is definable in @xmath22if and only if its syntactic forest algebra satisfies the @xmath0 identity , as well as horizontal commutativity : @xmath575    the `` only if '' implication is easy : we have already shown that the @xmath0 identity must hold in the syntactic forest algebra of a language definable in @xmath29 , and @xmath22is a fragment of @xmath29 .",
    "horizontal commutativity must also hold : the logic only has the descendant relation , and therefore its formulas are invariant under rearranging sibling subtrees .",
    "the `` if '' implication is a minor variation on the work done in the previous sections . recall that we proved before that if the syntactic forest algebra of a language @xmath5 satisfies the @xmath0 identity , then both @xmath5 and its complement can be defined by @xmath142 forest expressions .",
    "we apply this result also in our case .",
    "the problem is that the @xmath142 forest expressions are not commutative , and thus need not be definable in @xmath16 .",
    "we will show , however , that their commutative closure can be defined in @xmath16 . here , we use the term _ commutative closure of @xmath5 _ for the smallest language that contains @xmath5 and is closed under rearranging sibling subtrees .",
    "the commutative closure of a @xmath142 forest expression is definable in @xmath16 .",
    "before we prove this proposition , we remark that this is not a completely generic result .",
    "for instance consider the following language over a one letter alphabet : `` each node is a leaf or has two children , and some leaf has an even number of ancestors '' .",
    "this language is definable in @xmath576 and is horizontally commutative ( the formula comes from potthoff  @xcite ) .",
    "however , this language can not be defined in @xmath25 .",
    "actually , an ehrenfeucht - fraiss argument shows that every first - order formula , that has quantifier depth @xmath10 and only uses the descendant order , will give the same result for all balanced binary trees of depths larger than @xmath577 .",
    "the proof of the above proposition is by induction on the size of the @xmath142 forest expression .",
    "the base case is when the @xmath142 expression is either @xmath578 , or a language that is closed under pieces . in the first case ,",
    "the language is clearly definable in @xmath16 . in the second case",
    ", we revisit the proof of lemma  [ lem : pi1-lemma ] , which showed that a language @xmath5 that is closed under pieces is definable in @xmath158 .",
    "if we take the commutative closure of @xmath5 , we get a commutative language closed under pieces . in the proof of lemma  [ lem : pi1-lemma ]",
    ", we constructed the @xmath158 formula by forbidding a finite number of pieces ; in the commutative case the formula does not need to worry about the order of siblings in the forbidden pieces .    in the induction step",
    ", we have to consider the operations that are allowed by @xmath142 expressions : union , intersection , ( horizontal ) concatenation @xmath579 and ( vertical ) composition @xmath580 for a forest languages @xmath164 and context languages @xmath163 .",
    "union and intersection are easy .",
    "concatenation and composition are more problematic .",
    "actually , @xmath581 is not closed under these two operations .",
    "for instance ,",
    "the languages @xmath582 are both definable in @xmath581 , but their concatenation @xmath583 is not , since it does not contain the forest @xmath584",
    ".    nevertheless , if we use commutative closure , the problem disappears .",
    "that is , we will show that if the languages @xmath585 are definable in @xmath16 , then the commutative closure of each of the languages in  ( [ eq : concat ] ) and  ( [ eq : compos ] ) can be defined in @xmath16 .",
    "we only do the cases @xmath586 and @xmath189 , the language @xmath191 is done the same way .",
    "[ oplus - forests ] if forest languages @xmath164 are definable in @xmath16 , then so is the commutative closure of @xmath586 .    we write @xmath587 for the commutative closure of @xmath190",
    ".    consider first the case when @xmath588 is a _ tree _ language definable in @xmath16 . in this case , the formula for @xmath587 formula places an existentially quantified variable over the root of one tree , and then relativizes the formulas for @xmath5 and @xmath588 , respectively , to the nodes the are not descendants ( respectively , are descendants ) , of this existentially quantified root .",
    "for the general case , we use the following lemma on forest languages definable in @xmath581 .    [",
    "lem : experimental ] every forest language @xmath5 definable in @xmath581 can be written as a finite union of languages @xmath589 , where @xmath590 is a forest language definable in @xmath18 , and @xmath591 are tree languages definable in @xmath16 .",
    "the statement of the lemma immediately follows from the following claim on formulas of @xmath581 .",
    "we claim that any formula @xmath177 of @xmath581 is equivalent to a finite disjunction of formulas of the form @xmath592 where @xmath593 , and @xmath594 are formulas such that    1 .",
    "each formula @xmath595 has all quantification relativized to descendants of @xmath596 .",
    "2 .   the formula @xmath202 has all quantification relativized to nodes that are not descendants of any of the nodes @xmath597 .",
    "the idea , of course , is that the @xmath596 describe the roots of the trees that contain the existentially quantified nodes @xmath598 in the original formula @xmath177 of @xmath581 .",
    "the straightforward proof of the claim is omitted .",
    "the finite disjunction ranges over all possible repartitions of the nodes @xmath598 into distinct trees .    from this normal form ,",
    "since @xmath599 distributes across union , it suffices to give a @xmath16formula for languages of the form @xmath600 where the @xmath69 languages are tree languages definable in @xmath16and where @xmath601 are forest languages definable in @xmath18 . by the technique shown at the beginning of the proof , it is sufficient to obtain a formula for @xmath602 .",
    "but the language @xmath602 is closed under pieces , and therefore it is definable in @xmath18 .    if context languages @xmath163 are definable in @xmath16 , then so is the commutative closure of @xmath603 .    we write @xmath604 for the commutative closure of @xmath189 .",
    "consider first the case when either @xmath68 or @xmath605 is a language @xmath578 .",
    "the formula places a variable on node corresponding to @xmath606 , and relativizes the formula for the remaining context language to the remaining nodes .",
    "consider now the general case .",
    "again , we use a normal form lemma for languages definable in @xmath581 .",
    "this lemma is prove the same way as lemma  [ lem : experimental ] .",
    "[ lem : experimental2 ] every context language @xmath68 definable in @xmath581 can be written as a finite union of languages of the kinds @xmath607 where @xmath608 and @xmath5 are context language and forest languages definable in @xmath16 .",
    "we now use lemma  [ lem : experimental2 ] to finish the proof of lemma  [ lem : experimental2 ] .",
    "we want to show that @xmath604 is definable in @xmath581 .",
    "we apply lemma  [ lem : experimental2 ] to the languages @xmath68 and @xmath605 .",
    "since the operation @xmath609 distributes across union , we can assume that the unions describing @xmath68 and @xmath605 use just one language , of either of the two kinds .",
    "we have four cases to consider , we only do the most difficult one @xmath610 this language is the same as @xmath611 let @xmath612 be the @xmath16formula defining the context language @xmath613 , obtained from the first case considered in the proof",
    ". let @xmath614 be the @xmath16formula defining @xmath615 obtained in the same way .",
    "both of these formulas have a free variable , which describes the hole of the context . using lemma  [ oplus - forests ]",
    "we also have a @xmath16formula @xmath616 defining @xmath587 .",
    "the desired @xmath16formula puts an existentially quantified variable @xmath40 on the node corresponding to @xmath471 , another existentially quantified variable @xmath47 on the node corresponding to @xmath617 , and then runs three subformulas , for @xmath608 , @xmath618 , and @xmath619 , on the remaining nodes , appropriately relativizing the quantification . more specifically , this is the formula @xmath620 where @xmath621 is the @xmath158 formula stating that @xmath40 is a proper ancestor of @xmath47 and there are no nodes in between , @xmath622 is constructed from @xmath612 by relativizing all quantification to the ancestors of @xmath40 , @xmath623 is constructed from @xmath614 by relativizing all quantification to the descendants of @xmath40 , and @xmath624 is constructed from @xmath616 by relativizing all quantification to the nodes that are neither ancestor of @xmath40 nor descendant of @xmath47 .",
    "in this paper we considered a signature with the descendant and lexicographic orders .",
    "it would be interesting to know what happens in the presence of other predicates such as the closest common ancestor , next sibling or child .",
    "probably the most natural continuation of this work would be an effective characterization of @xmath16or @xmath147 .",
    "note that this would strengthen our result : a language @xmath5 is definable in @xmath0 if and only if both @xmath5 and its complement are definable in  @xmath142 .",
    "we conjecture that , as in the case for words  @xcite , the characterization of @xmath147requires replacing the equivalence in the @xmath0 identity by a one - sided implication , which says that a language definable in @xmath147is closed under replacing @xmath625 by @xmath626 , for @xmath627 ."
  ],
  "abstract_text": [
    "<S> we study tree languages that can be defined in @xmath0 . these are tree languages definable by a first - order formula whose quantifier prefix is @xmath1 , and simultaneously by a first - order formula whose quantifier prefix is @xmath2 . for the quantifier free part we consider two signatures , either the descendant relation alone or together with the lexicographical order relation on nodes . </S>",
    "<S> we provide an effective characterization of tree and forest languages definable in @xmath0 . </S>",
    "<S> this characterization is in terms of algebraic equations . over words , </S>",
    "<S> the class of word languages definable in @xmath0 forms a robust class , which was given an effective algebraic characterization by pin and weil  @xcite . </S>"
  ]
}