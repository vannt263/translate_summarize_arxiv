{
  "article_text": [
    "the single pair shortest path problem in real - world road networks , also known as route planning , has many important everyday applications .",
    "there are two most significant variants of the problem ",
    "static and dynamic route planning .    in the",
    "variant , a road network is fixed during the computation of optimal routes ( _ query _ ) .",
    "static route planning received a lot of attention during the last decades . on the other hand , in the _ dynamic",
    "_ variant a road network is subject to change in time ",
    "some new roads are built , some other are closed , traffic jams or car accidents happen , some routes must be avoided due to turn angle limits , and so on .",
    "clearly , the latter is a more realistic scenario .",
    "actually , even time - dependent cost functions can be modeled in dynamic route planning to some extent .",
    "classical algorithms such as dijkstra s @xcite or a * @xcite and their dynamic adaptions @xcite are not well suitable neither for static nor for dynamic variants because of huge road networks size .",
    "thus , a feasible solution lies in computing suitable auxiliary data of the road network ( _ preprocessing _ ) in order to improve both time and space complexity of subsequent queries .",
    "this technique led to several very interesting static approaches in the last decade , see extensive surveys , for instance , in @xcite .",
    "some of these algorithms such as highway - hierarchies @xcite , alt @xcite or , for example , geometric containers @xcite were proved to work fine also in the dynamic scenario @xcite .",
    "recently , in order to fill a gap between a variety of exact route planning approaches , we have published @xcite a different novel approach aimed at `` reasonable '' routes .",
    "it is based on a concept of scope , whose core idea can be informally outlined as follows : the edges of a road network are associated with a _ scope _",
    "map such that an edge @xmath0 assigned scope @xmath1 is admissible on a route @xmath2 if , before or after reaching @xmath0 , such @xmath2 travels distance less than a value associated with @xmath1 on edges with scope higher than  @xmath1 .",
    "the desired effect is that low - level roads are fine near the start or target positions , while only roads of the highest scope are admissible in the long middle sections of distant routing queries .",
    "overall , this nicely corresponds with human thinking of intuitive routes , and allows for a very space - efficient preprocessing , too .",
    "[ [ new - contribution . ] ] new contribution .",
    "+ + + + + + + + + + + + + + + + +    in the dynamic scenario , however , a static scope map may badly fail .",
    "imagine , for instance , a closure of a motorway tunnel which can be bypassed only on low - level mountain roads . then a detour would not be scope admissible in the aforementioned sense , and so a dynamic adjustement of this definition is needed .",
    "we present such an adjusted definition here , along with a modification of dijkstra s algorithm for scope admissible routes in this dynamic scenario .",
    "our algorithm is exact , and its time complexity grows only slightly over ordinary dijkstra if few negative changes are introduced in the network .",
    "a _ directed graph _",
    "@xmath3 is a pair of a finite set @xmath4 of vertices and a finite multi - set @xmath5 of edges .",
    "@xmath6 is an alternating sequence @xmath7 of vertices and edges of @xmath3 such that @xmath8 for @xmath9 .",
    "the _ weight _ of a walk @xmath6 w.r.t .",
    "a weighting @xmath10 of @xmath3 is defined as @xmath11 where @xmath12 .",
    "an _ optimal walk _ between two vertices achieves the minimum weight over all walks .",
    "a road network is referred to as a pair @xmath13 where @xmath3 is a directed graph ( such that the junctions are represented by @xmath4 and the roads by @xmath14 ) , and @xmath15 ( cost function ) is given as a _ non - negative _ edge weighting @xmath16 . in the dynamic scenario , @xmath15 is simply replaced with @xmath17 ( differing from @xmath15 only on few edges , say ) .",
    "if @xmath0 is removed then let @xmath18 .    driven by real - world motivation , we focus on negative ( increased weight , even to @xmath19 ) changes in @xmath15 .",
    "we thus now for simplicity omit the possibility of adding new edges to @xmath3 , though we understand it may be useful when , e.g. , a designated detour locally changes the road network .",
    "a simplified version of the scope concept is briefly introduced here .",
    "we strongly recommend reading @xcite for more detailed treatment and , due to lack of space , omit most details here .",
    "[ def : scope ] let @xmath13 be a road network .",
    "_ a scope mapping _ is defined as @xmath20 such that @xmath21 .",
    "elements of the image @xmath22 are called _",
    "scope levels_. each scope level @xmath23 is assigned a constant value of _ scope _",
    "@xmath24 such that @xmath25 .    in practice",
    "there are only a few scope levels ( say ,  5 ) .",
    "the desired effect , as formalized next , is in admitting low - level roads only near the start or target positions until higher level roads become widely available .",
    "[ def : xadmissible ] let @xmath13 be a road network and @xmath26 . an edge @xmath27 is _",
    "@xmath28-admissible _ in @xmath3 for a scope mapping @xmath29 if , and only if , there exists a walk @xmath30 from @xmath28 to @xmath31 such that    1 .",
    "each edge of @xmath32 is @xmath28-admissible in @xmath33 for @xmath29 , 2 .",
    "@xmath32 is optimal subject to ( 1 ) , and 3 .   for @xmath34 ,   @xmath35 .",
    "[ def : stadmissible ] let @xmath13 be a road network and @xmath29 a scope mapping . for a walk @xmath36 in @xmath3 ; @xmath32 is _",
    "@xmath37-admissible _ in @xmath3 for @xmath29 if every @xmath38 is @xmath37-admissible in @xmath3 for @xmath29 .",
    "[ [ static - cals - dijkstras - algorithm . ] ] static @xmath29-dijkstra s algorithm .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    seemingly complicated definitions can be smoothly integrated into ( the bidirectional variants of ) dijkstra s or a * algorithms , simply keeping track of the extreme @xmath37-admissibility ( or @xmath39-adm .  in reverse dir .",
    ") condition :    * for every accessed vertex @xmath40 and each scope level @xmath41 , the algorithm keeps , as @xmath42 $ ] , the best achieved value of the sum @xmath43 . *",
    "the @xmath37-admissibility of edges @xmath0 starting in @xmath40 then depends just on @xmath44\\leq \\nu^{\\cal{s}}_{{\\cal s}(e)}$ ] , and only edges are relaxed further .",
    "[ thm : sdijkstra ] _",
    "@xmath29-dijkstra s algorithm _",
    "( uni - directional ) , for a road network @xmath13 , a scope mapping @xmath45 , and a start vertex @xmath46 , computes an optimal @xmath37-admissible walk from @xmath37 to every @xmath47 in time latexmath:[${\\cal o}\\big(|e(g)|\\cdot|im({\\cal{s}})|+     the most important computational aspect of scope lies in the fact that only the edges of _ unbounded _ scope level @xmath19 matter for global preprocessing ( an idea related to better known _",
    "informally , the query algorithm of @xcite works in stages : in the _ opening cellular phase _ , the road network is locally searched ( uni - directional @xmath29-dijkstra ) from both start and target vertices until only edges of unbounded scope are admissible .",
    "then a small preprocessed `` boundary graph '' is searched by another algorithm ( e.g.  hub - based labeling @xcite ) in the _",
    "boundary phase_. finally , in the _ closing cellular phase _ , the scope - unbounded long middle section of the route is `` unrolled '' in the whole network .",
    "we remark that the boundary graph will remain static even in the dynamic scenario ( due to expensive preprocessing ) , and dynamic changes will be mainly dealt with in the closing cellular phase .",
    "yet we have to pay attention to scope admissibility since it is the key to much improved preprocessing @xcite to the boundary graph .",
    "it is therefore essential to `` dynamize '' our definition and @xmath29-dijkstra s algorithm for that purpose .",
    "in the rest , due to limited space , we only briefly sketch the uni - directional _ dynamic @xmath29-dijkstra s algorithm _ used locally in the opening cellular phase ( while the admissibility definition is implicitly embedded in it ) .",
    "this procedure can be routinely turned into bidirectional and then used to resolve dynamic changes in cells during the closing cellular phase .",
    "we first remark on the `` only negative change '' assumption of our approach ( sec .",
    "[ sec : prelimin ] ) .",
    "this well corresponds with a real - world situation in which just `` bad things happen on the road '' , and the driver thus usually has to find an available detour , instead of looking for unlikely road improvements .",
    "therefore , we are content if our query algorithm finds that an optimal route of the original network ( wrt .",
    "@xmath15 ) is admissible , though not perfectly optimal , in the changed network ( @xmath17 ) .",
    "however , when things go worse with @xmath17 , then our algorithm will always find an optimal dynamic - scope admissible detour in the changed network .",
    "[ [ main - informal - idea . ] ] main informal idea .",
    "+ + + + + + + + + + + + + + + + + + +    imagine a driver approaching a road restriction or closure .",
    "what would she do ?",
    "intuitively , the best solution is for her to slip off the original route ( even ahead of the restriction ) , and re - allow the use of low - level ( i.e. , inadmissible in the ordinary setting ) roads nearby the restriction .",
    "of course , she still wants to minimize detour costs and drive reasonably in terms of such adjusted scope admissibility .    [ [ triple - search . ] ] triple search .",
    "+ + + + + + + + + + + + + +    dynamic changes in our @xmath29-dijkstra s algorithm , starting from @xmath37 , are resolved by a _ detour procedure _",
    "executed whenever an @xmath37-admissible changed edge @xmath49 , i.e.  with @xmath50 , is going to be relaxed . for simplification",
    "we assume that there is only one such changed edge  @xmath0 in the whole network .",
    "the detour procedure is analogical to ordinary dijkstra , except that to its single ( called _ live _ ) search it adds two other auxiliary searches called _ dead _ and _ detour_. their roles are as follows :    * _ live _ ( the original )  running as in static , relaxes only @xmath37-admissible edges while using dynamic @xmath17 .",
    "let @xmath51 denote its queue of discovered vertices , @xmath52 its temporary distance estimates , and @xmath53 its scope condition vector .",
    "* _ dead _  started from the end @xmath40 of @xmath0 as if @xmath54 was not changed .",
    "so , initially , @xmath55 and @xmath56 except @xmath57=d_{live}[u]+w(e)$ ] .",
    "the purpose of @xmath58 is to later identify which alternative walks are actual detours for  @xmath0 . *",
    "_ detour _ - the core new search started from @xmath31 . upon reaching @xmath0 ,",
    "it resets @xmath59 $ ] to @xmath60 on all scope levels @xmath61 .",
    "then it fills @xmath62 with @xmath31 and vertices @xmath28 on the access route from @xmath37 to  @xmath31 such that a reverse search from @xmath31 to @xmath28 does not exhaust @xmath63 yet . note that @xmath63 is normally updated with this reverse search .",
    "however , @xmath64=d_{live}[x]$ ] for those added @xmath65 .",
    "the search then continues concurrently with all the three queues ( so , starting turns will likely be taken by @xmath62 ) .",
    "every relaxation from one of the queues is done as in the static @xmath29-dijkstra s algorithm , i.e. , updating also the appropriate @xmath66 vector .",
    "rules which relate together the three searches are outlined below .",
    "[ [ live - or - dead . ] ] live or dead .",
    "+ + + + + + + + + + + + +    our driver s desire is to get back to her original route represented by the dead search .",
    "this happens when the dead search meets either with the live search ( no need to bypass the problematic edge  @xmath0 ) or with the detour search ( a detour is found ) .    for more details",
    "( see also fig .",
    "[ fig : detour ] ) , imagine a vertex @xmath67 being relaxed from one of the three queues .",
    "* suppose @xmath68 is relaxed from @xmath51 .",
    "if @xmath69\\geq d_{live}[y]$ ] or @xmath70\\geq d_{live}[y]$ ] , then @xmath68 is removed from @xmath58 or @xmath62 , respectively .",
    "* suppose @xmath68 is relaxed from @xmath62 .",
    "if @xmath69\\leq d_{detour}[y ] < d_{live}[y]$ ] , then @xmath68 is moved from @xmath62 ( implic .  with all its descendants ) into @xmath51 setting new distance estimate @xmath71:=d_{detour}[y]$ ] .",
    "* suppose @xmath68 is relaxed from @xmath58 .",
    "if @xmath70\\leq d_{dead}[y ] < d_{live}[y]$ ] , then again , @xmath68 is moved into @xmath51 with new distance estimate @xmath70 $ ] .",
    "notice that whenever @xmath58 or @xmath62 becomes empty , the other one may also be removed and the algorithm then continues as original @xmath29-dijkstra .    altogether , the above described dynamic @xmath29-dijkstra s algorithm adds at most a constant multiplicative factor to the complexity of static @xmath29-dijkstra , and we propose that usually this increase is only by an additive factor ( the dead and detour searches restricted to a neighbourhood of @xmath0 ) .    [ [ borrowing - scope - in - detour . ] ] borrowing scope in detour .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    there is one more specific aspect of the aforementioned detour search .",
    "we not only want to reset @xmath59 $ ] upon reaching changed @xmath0 in the forward direction , but we intend to do the same for @xmath72 $ ] `` backwards '' .",
    "informally , we would like to allow low - level roads not only to slip off the original route , but also to return to it from a detour .",
    "however , this can not be done simply in a backward search , and so we instead `` borrow '' a needed scope value for @xmath63 .",
    "precisely , the detour search is allowed to relax even non-@xmath37-admissible edges , keeping track of the limited scope value _ debt _ ( on each level ) .",
    "this debt must then be repaid `` from @xmath40 '' when the detour search meets the dead search ( if it is not repaid in full , then this search branch subsequently dies ) .",
    "again , due to lack of space , we omit further details .",
    "[ [ multiple - changes . ] ] multiple changes .",
    "+ + + + + + + + + + + + + + + + +    the previous dynamic algorithm may be extended to handle multiple changed edges in @xmath17 , too , as we very briefly outline now .",
    "we introduce multiple dead and detour searches , each labeled by a set of all changed edges that affected it . in this view , the original live search is actually the dead search with the empty label .",
    "all these concurrent searches are related together by a complex set of rules depending on their label sets ( such as , finishing an @xmath73-labeled detour of an edge @xmath74 moves it to the search labeled by @xmath75 ; etc ) .",
    "we summarize :    [ thm : dsdijkstra ] _ dynamic @xmath29-dijkstra s algorithm _",
    "( uni - directional ) , for a road network @xmath13 dynamically changed to @xmath76 , a scope mapping @xmath45 , and a start vertex @xmath46 , computes a dynamically @xmath37-admissible walk from @xmath37 to every @xmath47 .",
    "this computed walk is optimal in @xmath76 , or in @xmath13 . to @xmath40 which may not be found . ]",
    "if @xmath77 denotes the number of edges @xmath0 such that @xmath50 , then the algorithm runs in time at most @xmath78 may look horrible , we believe the actual effect on time complexity is marginal in real - world scenarios with not - so - many dynamic changes ( due to typical `` locality '' of detours ) .",
    "a thorough experimental evaluation of the complexity of our algorithm is the subject of ongoing research .",
    "we have outlined the current state of our work on dynamization of the scope - base route planning technique @xcite for both unexpected and predictable ( to some extend ) road network changes .",
    "our approach is aimed at a proper relaxation of scope admissibility when a driver approaches changed road segment , by locally re - allowing nearby roads of lower scope level . at the same time",
    "we claim that the computed detour minimizes costs and still remains reasonable in terms of scope admissibility .",
    "however , formalized algorithm , its complexity analysis , rigorous proof of correctness and most details are omitted due to lack of space .    in a summary , we have shown that a scope - based route planning approach with cellular preprocessing @xcite can be used not only in static but also in dynamic road networks .",
    "our immediate future work in this direction will include the following points ;    * precise definition of dynamic scope admissibility , * adding new edges and positive dynamic changes , * incorporating so called maneuvers , and * experimentally evaluating this dynamic algorithm on real - world map data .",
    "valerie king .",
    "fully dynamic algorithms for maintaining all - pairs shortest paths and transitive closure in digraphs . in _ proceedings of the 40th annual symposium on foundations of computer science _ , focs 99 , pages 81 , washington , dc , usa , 1999 .",
    "ieee computer society .",
    "ron  gutman .",
    "reach - based routing : a new approach to shortest path algorithms optimized for road networks . in _",
    "proceedings 6th workshop on algorithm engineering and experiments ( alenex ) _ , pages 100111 , 2004",
    ".              daniel delling and dorothea wagner .",
    "landmark - based routing in dynamic graphs . in _ proceedings of the 6th international conference on experimental algorithms _",
    ", wea07 , pages 5265 , berlin , heidelberg , 2007 .",
    "springer - verlag .",
    "dominik schultes and peter sanders .",
    "dynamic highway - node routing . in _",
    "wea07 : proceedings of the 6th international conference on experimental algorithms _ , pages 6679 ,",
    "berlin , heidelberg , 2007 .",
    "springer - verlag .",
    "ittai abraham , daniel delling , andrew  v. goldberg , and renato  f. werneck . a hub - based labeling algorithm for shortest paths in road networks . in _ proceedings of the 10th international conference on experimental algorithms _",
    ", sea11 , pages 230241 , berlin , heidelberg , 2011 .",
    "springer - verlag ."
  ],
  "abstract_text": [
    "<S> we briefly report on the current state of a  new dynamic algorithm for the route planning problem based on a concept of scope ( the static variant presented at esa11 , @xcite ) . </S>",
    "<S> we first motivate dynamization of the concept of scope admissibility , and then we briefly describe a modification of the scope - aware query algorithm of  @xcite to dynamic road networks . finally , we outline our future work on this concept . </S>"
  ]
}