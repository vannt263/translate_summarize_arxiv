{
  "article_text": [
    "domain - specific languages ( dsls ) are languages tailored to a specific application domain .",
    "dsls are typically devised with the goal of increased expressiveness and ease of use compared to general - purpose programming languages in their domains of application ( @xcite ) .",
    "examples of dsls include _ lex _ and _ yacc _",
    "( @xcite ) for lexical analysis and parsing , regular expressions for pattern matching , html for document mark - up , vhdl for electronic hardware descriptions and many other well - known instances .",
    "dsls are also known as `` _ _ little languages _ _ ''  ( @xcite ) , where `` little '' primarily refers to the typically limited intended or main practical application scope of the language .",
    "for example , postscript is a `` little language '' for page descriptions .",
    "clp(fd ) , constraint logic programming over finite domains , is a declarative formalism for describing combinatorial problems such as scheduling , planning and allocation tasks  ( @xcite ) .",
    "it is one of the most widely used instances of the general  clp(@xmath0 ) scheme that extends logic programming to reason over specialized domains .",
    "since  clp(fd ) is applied in many industrial settings like systems verification , it is natural to ask : how can we implement constraint solvers that are more reliable and more concise ( i.e. , easier to read and verify ) while retaining their efficiency ? in the following chapters , we present little languages that we devised towards this purpose .",
    "they are already being used in a constraint solver over finite domains , available as ` library(clpfd ) ` in swi - prolog and yap - prolog , and can be used in other systems as well .",
    "in the context of clp(fd ) , _ indexicals _  ( @xcite ) are a well - known example of a  dsl .",
    "the main idea of indexicals is to declaratively describe the domains of variables as functions of the domains of related variables .",
    "the indexical language consisting of the constraint  `` ` in ` '' and expressions such as ` min(x) .. max(x ) ` also includes specialized constructs that make it applicable to describe a large variety of arithmetic and combinatorial constraints .",
    "gnu  prolog  ( @xcite ) and sicstus prolog  ( @xcite ) are well - known prolog systems that use indexicals in the implementation of their finite domain constraint solvers .",
    "the usefulness of deriving large portions of code automatically from shorter descriptions also motivates the use of _ variable views _ , a dsl to automatically derive _ perfect _ propagator variants , in the implementation of gecode  ( @xcite )",
    ".    _ action rules _  ( @xcite ) and constraint handling rules  ( @xcite ) are turing - complete languages that are very well - suited for implementing constraint propagators and even entire constraint systems ( for example , b - prolog s finite domain solver ) .    these examples of  dsls are mainly used for the description and generation of constraint _ propagation _ code in practice . in the following chapters ,",
    "we contribute to these uses of  dsls in the context of clp(fd ) systems by presenting  dsls that allow you to concisely express selection of propagators and constraint reification with desirable properties .",
    "to motivate the dsl that we now present , consider the following quote from neng - fa zhou , author of b - prolog  ( @xcite ) :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ a closer look reveals the reason [ for failing to solve the problems within the time limit ] : almost all of the failed instances contain non - linear ( e.g. , @xmath1 , @xmath2 , and @xmath3 ) and disjunctive constraints which were not efficiently implemented in the submitted version of the solver . _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    consider the specific example of  @xmath2 : it is clear that instead of decomposing the constraint into  @xmath4 , @xmath5 , a specialized combined propagator can be implemented and applied , avoiding auxiliary variables and intermediate propagation steps to improve efficiency .",
    "it is then left to detect that such a specialized propagator can actually be applied to a given constraint expression .",
    "this is the task of _ matching _ available propagators to given constraint expressions , or equivalently , mapping constraint expressions to propagators .",
    "manually selecting fitting propagators for given constraint expressions is quite error - prone , and one has to be careful not to accidentally unify variables that occur in the expression with subexpressions that one wants to check for . to simplify this task",
    ", we devised a dsl in the form of a simple committed - choice language .",
    "the language is a list of rules of the form  @xmath6 , where  @xmath7 is a matcher and  @xmath8 is a list of actions that are performed when  @xmath7 matches a posted constraint .    more formally , a _ matcher _",
    "@xmath7 consists of the term  @xmath9 .",
    "@xmath10  denotes a _ pattern _ involving a constraint _ relation _ like  ` # = ` , ` # > ` etc . and its arguments , and  @xmath11 is a  _ condition _ ( a prolog goal ) that must hold for a rule to apply .",
    "the basic building - blocks of a pattern are explained in table  [ margs ] .",
    "these building - blocks can be nested inside all symbolic expressions like addition , multiplication etc .",
    "a rule is applicable if a given constraint is matched by  @xmath10 ( meaning it unifies with  @xmath10 taking the conditions induced by  @xmath10 into account ) , and additionally  @xmath11 is true .",
    "a matcher  @xmath12 , can be more compactly written as  @xmath13 .",
    ".basic building - blocks of a pattern [ cols=\"^ , < \" , ]",
    "we have presented dsls that are used in the implementation of a finite domain constraint programming system .",
    "they enable us to capture the intended functionality with concise declarative specifications .",
    "we believe that identical or similar dsls are also useful in the implementation of other constraint systems . in the future ,",
    "we intend to generate even more currently hand - written code automatically from smaller declarative descriptions ."
  ],
  "abstract_text": [
    "<S> in this paper , we present domain - specific languages  ( dsls ) that we devised for their use in the implementation of a finite domain constraint programming system , available as ` library(clpfd ) ` in swi - prolog and  yap - prolog . </S>",
    "<S> these dsls are used in propagator selection and constraint reification . in these areas , they lead to concise specifications that are easy to read and reason about . at compilation time , these specifications are translated to prolog code , reducing interpretative run - time overheads . </S>",
    "<S> the devised languages can be used in the implementation of other finite domain constraint solvers as well and may contribute to their correctness , conciseness and efficiency . </S>"
  ]
}