{
  "article_text": [
    "the quadratic assignment problem ( qap ) is a combinatorial optimization problem first introduced by koopmans and beckman ( 1957 ) .",
    "it is np - hard and is considered to be one of the most difficult problems to be be solved optimally .",
    "the problem was defined in the following context : a set of @xmath1 facilities are to be located at @xmath1 locations .",
    "the distance between locations @xmath5 and @xmath6 is @xmath7 and the quantity of materials which flow between facilities @xmath5 and @xmath6 is @xmath8 .",
    "the problem is to assign to each location a single facility so as to minimize the cost @xmath9 where @xmath10 represents the location to which facility @xmath5 is assigned",
    ". it will be helpful to think of the @xmath1 facilities and the matrix of flows between them in graph theoretic terms as a graph of @xmath1 nodes and weighted edges , respectively .",
    "there is an extensive literature which addresses the qap and is reviewed in pardalos et al .",
    "( 1994 ) , cela ( 1998 ) , anstreicher ( 2003 ) , loiola et al .",
    "( 2007 , and james et al .",
    "( 2009a ) . with the exception of specially constructed cases ,",
    "optimal algorithms have solved only relatively small instances with @xmath11 .",
    "various heuristic approaches have been developed and applied to problems typically of size @xmath12 or less .",
    "one of the most successful heuristics to date for large instances is _ robust tabu search _ , rts , ( taillard ( 1991 ) .",
    "the use of tabu search for the quadratic assignment problem has been studied extensively ( drezner ( 2005 ) , hasegawa et al .",
    "( 2000 ) , james et al , ( 2009a , 2009b ) , mcloughlin and cedeno ( 2005 ) , misevicius ( 2007 ) , misevicius and ostreika ( 2007 ) , skorinkapov ( 1994 ) , and wang ( 2007 ) ) .",
    "some of the best available algorithms for the solution of the qap are the hybrid genetic algorithms that use tabu search as an improvement mechanism .",
    "( see drezner ( 2008 ) ) .",
    "here we will consider the robust tabu heuristic applied to _ sparse _ qap instances .",
    "that is , the number of non - zero entries in the either the flow matrix and/or the distance matrix is of @xmath4 as opposed to @xmath0 . without loss of generality",
    "we will assume the flow matrix is sparse .",
    "many real world problems are sparse . in fact , this work was motivated by the study of random regular sparse graphs .",
    "these graphs are very robust to partitioning and collapse due to removal of nodes or edges .",
    "we are interested in the problem of determining how to assign the nodes of such a graph to locations in a metric space such that the total edge length of the graph is minimized ; this problem maps directly to a quadratic assignment problem .",
    "there has been some previous work on sparse quadratic assignment problems .",
    "milos and magirou ( 1995 ) developed a lagrangian - relaxation lower - bound algorithm for sparse problems and panos et al .",
    "( 1997 ) developed a version of their grasp heuristic for sparse problems .",
    "however , to the best of our knowledge , an efficient implementation of the robust tabu heuristic for sparse qap instances has not been proposed .",
    "the tabu heuristic for the quadratic assignment problem consists of repeatedly swapping locations of two nodes . a single iteration of the heuristic consists of    * determining the move which most decreases the total cost . under certain conditions ( see section 4 ) , if a move which lowers the cost is not available , a move which raises the cost is made .",
    "so that cycles of the same moves are avoided , the same move is forbidden ( _ taboo _ ) until a specified later iteration ; we call this later iteration the _ eligible iteration _ for a given move .",
    "this eligible iteration is traditionally stored in a _",
    "tabu list _ or _",
    "tabu table_. * making the move .",
    "* recalculating the new cost of all moves .",
    "the process is repeated for a specified number of iterations .",
    "traditional implementations of robust tabu search require @xmath0 operations per iteration .",
    "the complexity of @xmath0 is achieved by maintaining a matrix containing the cost @xmath13 of swapping @xmath14 and @xmath15 for all @xmath14 and @xmath15 , given a current assignment @xmath16 .",
    "the complexity of the each step above is as follows :    * @xmath0 - all possible @xmath17 moves are considered .",
    "the cost of each move is retrieved from @xmath18 * @xmath19 - the locations of the two swapped nodes are simply transposed .",
    "* @xmath0 - based on the following observations of taillard ( 1991 ) : + following taillard ( 1991 ) , starting from an assignment of facilities @xmath16 let the resulting assignment after swapping facilities @xmath20 and @xmath21 be @xmath22 .",
    "that is : @xmath23 for a symmetrical matrix with a null - diagonal , the cost @xmath18 of swapping @xmath20 and @xmath21 is : @xmath24 + to calculate @xmath25 for any @xmath14 and @xmath15 with complexity o(n ) , we can use equation xx . for asymmetric matices or matrices with non - null diagonals , a slightly more complicated version of equation ( [ eqfull ] ) also of complexity o(n )",
    "is given by burkhard and rendl ( 1984 ) .",
    "+ to calculate @xmath25 in the case that the swapped facilities @xmath14 and @xmath15 are different from @xmath20 or @xmath21 , we use the value @xmath13 calculated in the previous iteration and find : @xmath26 * * the cost of moves which do not involve the two nodes in the previous move can be calculated in time @xmath19 .",
    "there are @xmath0 of these moves . *",
    "* the cost of moves which do involve the two nodes in the previous move must be calculated from scratch .",
    "there are @xmath4 of these moves and the complexity of calculating each is @xmath4 .",
    "to reduce the complexity of step ( a ) , instead of scanning all possible moves , we use multiple _ priority queues _ ( pqs ) to determine the best move .",
    "a priority queue is a data structure for maintaining a set of elements each of which has an associated value ( priority ) .",
    "a pq supports the following operations :    * insert an item * remove an item * return the item with the highest value    priority queues are used to efficiently find an item with the highest value without searching through all of the items .",
    "the maximum complexity of pq operations is @xmath27 .",
    "we will see below that there will be @xmath4 insertions and deletions in the pqs for each iteration so the asymptotic complexity of this step is reduced to @xmath28 .",
    "furthermore , we will show that for problems of any practical size , pq operations are not the determinant of total complexity .",
    "the complexity to recalculate the cost of moves in step ( c ) , can be reduced to @xmath4 as follows :    * as in the traditional robust tabu implementation , the cost of moves which do not involve the two nodes in the previous move can be calculated in time @xmath19 . on average , there are @xmath29 nodes which are connected to the two nodes in the previous moves , where @xmath30 is the average degree ( average number of nodes adjacent to a given node ) of the graph corresponding to the flow matrix . for each of these @xmath31 nodes we must calculate the cost of @xmath32 possible moves .",
    "thus , the cost is @xmath33 .",
    "* the cost of moves which do involve the two nodes in the previous move must be calculated from scratch .",
    "there are @xmath4 of these moves and the complexity of calculating each is @xmath34 since the cost of a node , @xmath14 , being in a specific location depends only on the on - average @xmath35 nodes adjacent to @xmath14 .",
    "thus the complexity of step ( c ) is reduced to @xmath4 .",
    "to describe our implementation , we must first describe the rules for determining the next move of taillard s robust tabu heuristic ( taillard ( 1991 ) ) .",
    "the following definitions for the possible _ state _ of a potential move are useful :    * if the current iteration is less than or equal to the eligible iteration , the move is _",
    "ineligible_. * if the current iteration is greater than the eligible iteration , the move is _",
    "authorized_. * if the current iteration minus an _ aspiration constant _ is greater than the eligible iteration the move is _",
    "aspired_.    the rules for determining the next move can then be stated as ( taillard ( 1991 ) ) :    * if a move which decreases the lowest total cost found so far is available , the move which most decreases this total cost is chosen , independent of whether the move is ineligible , authorized or aspired . * if no move meets criterion ( 1 ) , the aspired move , if one is available , which most decreases the current total cost is chosen . *",
    "if no moves meet criteria ( 1 ) or ( 2 ) , the lowest cost authorized move is chosen .    to implement these rules for sparse problems , we use two types of pqs : _ delta _ pqs which contain the cost delta for a given move and _ tabu _ pqs which contain entries ordered by the eligible iteration for the move . the tabu pqs control the change of state of a move .",
    "the delta pqs determine the lowest cost move in each state .",
    "five pqs are used :    * _ ineligible tabu pq _ - this pq contains moves , ordered by eligible iteration , which are in the ineligible state .",
    "this pq allows us to efficiently determine when the state of a move can be changed to authorized . * authorized tabu pq - this pq contains moves , ordered by eligible iteration , which are in the authorized state .",
    "this pq allows us to efficiently determine when the state of a move can be changed to aspired . * ineligible delta pq - this pq contains moves , ordered by the cost of the move , which are in the ineligible state .",
    "this pq together with the two other delta pqs allows for efficient determination of the overall lowest cost move as required by rule 1 . * aspired delta pq - this pq contains moves , ordered by the cost of the move , which are in the aspired state .",
    "this pq allows for efficient determination of the lowest cost aspired move as required by rule 2 . *",
    "authorized delta pq - this pq contains moves , ordered by the cost of the move , which are in the authorized state .",
    "this pq allows us to determine the lowest cost authorized move as needed by rule 3 .    as illustrated in fig .",
    "[ pqs ] , moves are inserted and removed in the pqs under the following circumstances :    * at initialization all moves are inserted into the ineligible pqs .",
    "* at the beginning of each iteration , any moves on the ineligible pqs which become authorized , because the iteration has increased by one , are moved from the ineligible pqs to the authorized pqs . * at the beginning of each iteration , any moves on the authorized pqs which become aspired , because the iteration has increased by one , are moved to the aspired pq . * after each move , any move for which the move cost or eligible iteration has changed is removed from the pq in which it is present and inserted in the appropriate pq based on move state and move cost .",
    "( however , see lazy update discussion below . )    using these pqs we obtain _ exactly _ the same results as the traditional robust tabu implementation .",
    "we minimize the time updating pqs by performing _",
    "lazy updates_. after a change in the eligible iteration or move cost , if the state is changed or the value is increased , we update the pqs involved ; otherwise , we perform a lazy update and store the value in a data structure associated with the move and only do the update in the pq when and if the move becomes the move with the smallest value in the pq .",
    "this use of lazy updates significantly decreases the time spent on pq operations .",
    "= 7.0 cm    .",
    "[ ratio ]    = 7.0 cm    = 7.0 cm",
    "we test our algorithm on instances with @xmath1 locations on a square grid with a euclidean metric .",
    "the flow matrix for the @xmath1 facilities corresponds to an adjacency matrix for a @xmath35-regular random graph ; that is , each facility has flows of value one to @xmath35 other random facilities .",
    "we run both the traditional non - sparse implementation and our new sparse implementation .",
    "the non - sparse implementation is the code of taillard ( 1991 ) . to implement the priority queues in the sparse implementation , we use the complete balanced tree code of marin and cordero ( 1995 ) .",
    "we perform a minimum of @xmath36 iterations for each instance .    for @xmath37 ,",
    "priority queue update operations consume just @xmath38 of the total time . assuming a @xmath39 behavior for pq operations , it is not until @xmath1 becomes astronomically large that the pq operations would take the majority of the time and the behavior of our implementation crosses over from @xmath4 to @xmath3 complexity .",
    "we thus expect @xmath4 complexity for our sparse implementation for any practical sized problems .    in fig .",
    "[ ratio ] , for @xmath40 , we plot the ratio @xmath20 of the time per iteration of the non - sparse implementation to the time per iteration of the sparse implementation versus @xmath1 .",
    "as expected , the plot is consistent with @xmath41 where @xmath42 .",
    "this reflects the reduction in complexity from @xmath0 to @xmath4 . in fig .",
    "[ comb ] we plot separately the time per iteration for the original and the sparse implementations .",
    "consistent with fig .",
    "[ ratio ] , the slopes on the log - log plot differ by 1 but the slopes are 2.5 and 1.5 , respectively , as opposed to the theoretical values of 2.0 and 1.0 . as explained in paul ( 2007 ) and saavedra and smith ( 1995 ) ,",
    "this is due to the finite size of processor cache memory ; as the problem size ( and memory needed ) increases , there are a smaller percentage of cache hits causing slower operation .    in fig .",
    "[ tk ] we plot the time per iteration versus values of degree @xmath35 .",
    "the plot is linear with a slight deviation with increasing @xmath35 .",
    "this deviation from linear is due to the fact that as @xmath35 increases there is an increasing chance that a node @xmath14 will be connected to both nodes involved in the previous move ; however , the updated costs of moving node @xmath14 must be calculated only once .",
    "we also performed numerical experiments on a class of problems known in the literature ( see drezner et al .",
    "( 2005 ) ) .",
    "these problems denoted as drexx are sparse and are designed to be very difficult to solve with heuristics .",
    "we obtained results similar to those for described above ; performance is o(n ) .",
    "for sparse quadratic assignment problems , we reduce the asymptotic complexity per iteration of robust tabu search to @xmath28 from @xmath0 ; for practical size problems , the complexity is reduced to @xmath4 .",
    "central to achieving this reduction is the use of multiple priority queues and lazy updates to these queues .",
    "the code which implements our approach and test qap instances used for this paper are available as supplementary material .",
    "we thank jia shao for helpful discussions and the defense threat reduction agency ( dtra ) for support .",
    "anstreicher , k. , 2003 .",
    "recent advances in the solution of quadratic assignment problems . mathematical programming 97 , 27 - 42 .",
    "drezner , z. , hahn , p.m .",
    ", taillard  .",
    "d. , 2005 .",
    "recent advances for the quadratic assignment problem with special emphasis on instances that are difficult for meta - heuristic methods .",
    "annals of operations research 139 , 65 - 94 .",
    "drezner z. and marcoulides g. , 2009 . on the range of tabu tenure in solving quadratic assignment problems recent advances in computing and management information systems . in : recent advances in computing and management information systems ,",
    "157 - 169 , p. petratos and g. a. marcoulides ( eds ) , atiner .",
    "james , t. , rego , c. , glover , f. , 2009a .",
    "multistart tabu search and diversification strategies for the quadratic assignment problem .",
    "ieee tran . on systems ,",
    "man , and cybernetics part a : systems and humans 39 , 579 - 596 .",
    "mcloughlin , j. f. , cedeno , w. , 2005 . the enhanced evolutionary tabu search and its application to the quadratic assignment problem .",
    "gecco 2005 : genetic and evolutionary computation conference 1 , 975 - 982 .",
    "pardalos , p.m. , rendl , f. , wolkowicz , h. , 1994 .",
    "the quadratic assignment problem : a survey and recent developments . in : pardalos , p.m. , wolkowicz , h. , ( eds . ) , quadratic assignment and related problems .",
    "dimacs series on discrete mathematics and theoretical computer science 16 , amer .",
    "baltimore , md . 1 - 42 .",
    "pardalos , p. m. , pitsoulis , l. s. , resende , m. g. c. , 1997 .",
    "algorithm 769 : fortran subroutines for approximate solution of sparse quadratic assignment problems using grasp .",
    "acm transactions on mathematical software ( toms ) 23 , 196 - 208 ."
  ],
  "abstract_text": [
    "<S> we propose and develop an efficient implementation of the robust tabu search heuristic for sparse quadratic assignment problems . </S>",
    "<S> the traditional implementation of the heuristic applicable to all quadratic assignment problems is of @xmath0 complexity per iteration for problems of size @xmath1 . using multiple priority queues to determine the next best move instead of scanning all possible moves , and using adjacency lists to minimize the operations needed to determine the cost of moves , we reduce the asymptotic ( @xmath2 ) complexity per iteration to @xmath3 . for practical sized problems , </S>",
    "<S> the complexity is @xmath4 .    </S>",
    "<S> combinatorial optimization , computing science , heuristics , tabu search </S>"
  ]
}