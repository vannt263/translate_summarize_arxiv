{
  "article_text": [
    "network science has emerged as an important framework to study complex systems  @xcite .",
    "one of the most important properties of networks is the existence of modules / communities ; communities are subgraphs of densely inter - connected nodes , and nodes in a community are considered to share common characteristics  @xcite .",
    "proper community detection allows one to determine potentially hidden relationships between nodes , and also allows one to reduce a large complex network into smaller and comprehensible ones . for this reason",
    ", good community detection within networks has been a subject of great interest .",
    "there exist various definitions of community  @xcite .",
    "the most widely used approach to detect such sub - groups of nodes with non - random connections involves the use of modularity to quantify the quality of a given partition of a network  @xcite . using modularity ,",
    "the community detection problem is thus recast as a global optimization problem . however , finding the _ maximum _ modularity solution is an np - hard problem  @xcite , and enumeration of all possible partitions is intractable in general .",
    "therefore , an efficient optimization algorithm is required to obtain high modularity solutions .",
    "most of the modularity optimization studies have focused on developing fast heuristic methods generating reasonable quality community structures .",
    "currently , simulated annealing ( sa ) is considered to be the best algorithm  @xcite and has been adopted in many theoretical and practical studies where communities with high modularity are required  @xcite . in this paper",
    ", we propose a new modularity maximization method based on conformational space annealing ( csa ) algorithm  @xcite .",
    "we show that csa outperforms sa both in generating better community structures and in computational efficiency .",
    "csa consistently finds community structures with higher modularity using less computational resources .",
    "moreover , for networks containing approximately up to 1000 nodes , csa repeatedly finds converged solutions . considering the stochastic nature of the algorithm",
    ", this suggests that the converged solution is likely to be the optimal solution of the network .",
    "let us consider a network with @xmath0 nodes and @xmath1 edges .",
    "modularity measures the fraction of intra - community edges minus its expected value from the null model , a randomly rewired network with the same degree assignments .",
    "modularity is defined as @xmath2 where @xmath3 is the number of assigned communities , @xmath4 is the number of edges within the community @xmath5 and @xmath6 is the sum of degrees of nodes in the community @xmath5 . to benchmark the performance of csa against that of sa , we implemented sa following existing studies  @xcite . initially , using @xmath7 ,",
    "a simulation starts at a high temperature @xmath8 , to sample _ broad _ range of the solution space as well as to avoid trapping in local - minima .",
    "as the simulation proceeds , @xmath8 is slowly decreased to more completely explore basins of high modularity . at a given @xmath8 , a set of stochastic movements including @xmath9 single - node moves and @xmath0 collective moves consisting of random merges and splits of communities ,",
    "are carried out . to split a community ,",
    "a nested sa method is used  @xcite , which isolates a target community from the entire network and split it into two communities .",
    "each nested sa starts with two randomly separated groups for short annealing and the annealed solution serves as a collective move . for each trial movement , if @xmath10 increases , the movement is accepted , otherwise it is accepted with probability @xmath11 .",
    "after a set of movements are tried , @xmath8 is decreased to @xmath12 , where @xmath13 .",
    "our method , csa , is a global optimization method which combines essential ingredients of three methods : monte carlo with minimization ( mcm )  @xcite , genetic algorithm ( ga )  @xcite , and sa  @xcite . as in mcm , we consider only the phase / conformational space of local minima ; i.e. , all solutions are minimized by a local minimizer . as in ga",
    ", we consider many solutions ( called _ bank _ in csa ) collectively , and we perturb a subset of bank solutions by cross - over between solutions and mutation . finally , as in sa",
    ", we introduce a parameter @xmath14 , which plays the role of the temperature in sa . in csa , each solution is assumed to represent a hyper - sphere of radius @xmath15 in the solution space .",
    "diversity of sampling is directly controlled by introducing a distance measure between two solutions and comparing it with @xmath14 , to deter two solutions from coming too close to each other .",
    "similar to the reduction of @xmath8 in sa , the value of @xmath14 is slowly reduced in csa ; hence the name conformational space annealing . to apply csa to optimize modularity ,",
    "three ingredients are required : ( a ) we need a local modularity maximizer for a given network partition , ( b ) we need a distance measure between two @xmath10-maximized network partitions , and ( c ) we need ways to combine two parent partitions to generate a daughter partition which will be @xmath10-maximized subsequently . here , the community structure is represented by assigning an index to each node , where nodes with an identical index belong to the same community . for local maximization of @xmath10 , we use a quench procedure which accepts a move if and only if it improves @xmath10 , equivalent to sa at @xmath16 .",
    "the distance between two community structures is measured by the variation of information ( vi )  @xcite . for two given partitions of @xmath17 and @xmath18 ,",
    "@xmath19 is defined as @xmath20 where @xmath21 is the entropy function and @xmath22 is the mutual information function of the probability @xmath23 , where @xmath24 is the number of total nodes , @xmath25/@xmath26 refers to a community from @xmath17/@xmath18 , and @xmath27 is the number of nodes shared by @xmath25 and @xmath26 . with @xmath21 and @xmath22",
    "defined by @xmath28    @xmath29    @xmath19 can be reduced to @xmath30 where @xmath31 and @xmath32 is the number of nodes in community @xmath25 . if @xmath17 is identical to @xmath18 , it is easy to show that @xmath33 .",
    "we have also tried other measures such as rand index  @xcite and normalized mutual information ( nmi )  @xcite and they gave no significant difference in results . in csa , we first generate 50 random partitions which are subsequently maximized by quench procedures .",
    "we call these solutions as the _ first bank _ which is kept unchanged during the optimization .",
    "we make a copy of the first bank , and call it the _ bank_. the partitions in the bank are updated by better solutions found during the course of optimization .",
    "the initial value of @xmath14 is set as @xmath34 , where @xmath35 is the average distance between partitions in the first bank .",
    "a number of partitions ( 30 in this study ) in the bank are selected as _ seed _ partitions . with each seed ,",
    "20 trial partitions are generated by cross - over between the seed and a randomly chosen partition from either the bank or the first bank .",
    "an additional 5 are generated by random mutation of the seed . for a cross - over",
    ", we use two operations , a convergent copy and a divisive copy , shown in figure  [ fig : fig1 ] . in both cases , one community represented by an index",
    "is randomly selected from a source solution and it is copied into a target solution after assigning a new index . for the convergent copy ,",
    "the new index is chosen from one of the neighboring indices of the copied nodes from the target in a random fashion .",
    "for the divisive copy , a new index not present in the target is chosen .",
    "the rationale of using these operators is that the community index itself has no particular meaning , while a well - defined community structure from one solution can serve as an advantageous feature that should be preserved to generate a better solution . for each operation , the minimum number of nodes that should be copied are randomly determined between 1% to 40% of total nodes and the above operation is repeated until the total number of copied nodes exceeds the number . for mutation ,",
    "random merge and split operators were introduced .",
    "the random merge was carried out by combining two adjacent communities .",
    "the random split operator divides a community into two randomly assigned groups .",
    "all trial conformations generated by cross - over and mutation operations are optimized by quench procedures .",
    "it should be noted that only _",
    "local _ moves are used in the quench procedures since the divergent and divisive copy operators can act as the merge and split moves used in sa .     and @xmath36 .",
    "in ( b ) the community indexed by 3 from the source is copied into the target and the new index 2 is assigned . ]",
    "after local - maximization of trial partitions , these partitions are used to update the bank .",
    "the modularity of a trial partition @xmath37 is compared with the modularities of partitions in the bank .",
    "if @xmath37 is worse than the worst partition of the bank , it is discarded . otherwise , we find the partition @xmath38 in the bank which is closest to @xmath37 , as determined by distance @xmath39 .",
    "if @xmath40 , @xmath37 is considered as similar to @xmath38 and it replaces @xmath38 if @xmath41 . if @xmath42 it is discarded .",
    "if @xmath43 , @xmath37 is regarded as a new partition similar to none in the bank , and it replaces the worst existing partition , that is , it replaces the lowest modularity partition in the bank .",
    "we carry out this operation for all trial partitions . with updated bank ,",
    "new seed partitions are selected again from the bank which have not yet been used as seeds .",
    "this entire process of generating partitions by perturbation and subsequent local maximization and updating bank is repeated until all partitions in the bank are used as seeds . at each iteration step , @xmath14 is reduced with a pre - determined ratio .",
    "after @xmath14 reaches to its final value , @xmath44 , it is kept constant . once all partitions in the bank are used as seeds without generating better partitions , implying that the procedure might have reached a deadlock , we reset all bank partitions to be eligible for seeds and repeat another round of search procedure . after this additional search also reaches a deadlock , we expand our search space by adding an additional 50 randomly generated and optimized partitions to the bank , and repeat the whole procedure . in this study",
    ", we terminated our calculation after 100 partitions were used as seeds . additional adding cycles should be considered for more rigorous optimization , especially for problems with high complexity",
    ".number of nodes and edges of benchmark networks used in this study are displayed . [ cols=\"^,^,^\",options=\"header \" , ]     it should be noted that csa can be applied to networks containing more than @xmath45 nodes where for sa this is impractical .",
    "for the three largest networks in table  [ tb : t1 ] , csa found good solutions within a reasonable computational time whereas sa runs did not yield reasonable value of modularity within 2 days of wall clock time .",
    "this difference in computational time reflects a number of factors .",
    "it is partly due to the high parallel efficiency of the csa algorithm  @xcite . in sa ,",
    "generation of a trial solution is dependent on its previous state , which makes it impractical to implement the algorithm in a parallel fashion .",
    "however , the majority of computation in csa consists of independent local maximization procedures on hundreds of trial solutions generated by cross - over and mutation , and each maximization can be separately carried out .",
    "the quench procedure in csa consists of local moves only , which is rather fast with large networks . on the other hand ,",
    "the most time - consuming operation in sa is the splitting move by the nested sa procedure which we find is indeed essential to obtain good sa solutions . in csa ,",
    "the operation of the divisive copy when generating trial solutions plays the equivalent role of the split move in sa . to compare the computing efficiency of csa with existing methods , the time complexities of csa and sa",
    "are estimated based on the simulation results with the benchmark networks .",
    "as shown in figure  [ fig : fig2 ] , the time complexity of csa is estimated to be @xmath46 which is comparable to other heuristic methods  @xcite and better than that of sa , @xmath47 , where @xmath24 is the number of nodes .        in terms of convergence , csa yields more robust solutions than sa .",
    "except the political books and college football networks , the maximum modularity solution found by sa varied from simulation to simulation . for networks containing over 300 nodes",
    ", sa failed to sample the optimal solution , which raises serious concerns when applying sa to modularity optimization for practical use  @xcite .",
    "however , for all test networks up to about @xmath48 nodes , all csa runs converged to the same solution , except the e - mail network where 41 out of 50 converged . considering the small size of networks and the stochastic nature of the algorithm ,",
    "we believe that the converged solution of each network is likely to be the true maximum modularity of the network . we also compared maximum modularities obtained by csa with the maximum values from previous publications ; see table  [ tb : t2 ] .",
    "csa finds equivalent or higher @xmath10 values compared to existing studies in all networks tested .",
    "recently , the exact maximum modularity values of several small benchmark networks up to 512 nodes were reported ; they are displayed in table  [ tb : t2 ] as @xmath49  @xcite .",
    "we performed 50 independent runs for these networks and all runs converged to the optimal solutions _ without exception_. this result supports the hypothesis that csa is efficient enough to find the putative maximum modularity solution for a network containing up to @xmath48 nodes .",
    "csa algorithm presented in this work aims to obtain optimal modularity solutions and the method is not free from the problem of the resolution limit arising from using modularity  @xcite .",
    "however , the csa procedure and operators proposed in this work are general , and can be used to optimize other fitness functions . to overcome the resolution limit issue ,",
    "more robust fitness functions should be considered to be combined with csa , such as the map equation  @xcite or the partition density  @xcite .",
    "it should be noted that the current work can be extended to deal with directed or weighted networks in conjunction with modified modularity functions  @xcite . in order to handle large networks ,",
    "csa can be combined with other efficient heuristics , such as the fast unfolding method  @xcite , instead of the stochastic quench procedure used in this study .",
    "in this paper , we propose a new modularity optimization method based on conformational space annealing algorithm , mod - csa . compared to sa ,",
    "our method is faster .",
    "further , while it finds equivalent modularity partitions for relatively small networks , for the larger more challenging ones , it typically finds higher modularity partitions . for small networks consisting up to @xmath48 nodes , despite its stochastic nature ,",
    "mod - csa solutions converge to an identical solution , which appears to be the best solution possible ; this is not possible in other stochastic algorithms .",
    "mod - csa can be implemented in a highly parallel fashion and is thus applicable to large networks where sa is not .",
    "in addition , mod - csa can be extended to deal with large networks by using fast heuristic methods as a local optimizer .",
    "the authors acknowledge support from creative research initiatives ( center for in silico protein science , 20110000040 ) of mest / kosef .",
    "we thank korea institute for advanced study for providing computing resources ( kias center for advanced computation linux cluster ) for this work .",
    "42ifxundefined [ 1 ] ifx#1 ifnum [ 1 ] # 1firstoftwo secondoftwo ifx [ 1 ] # 1firstoftwo secondoftwo `` `` # 1''''@noop [ 0]secondoftwosanitize@url [ 0 ]",
    " + 12$12  & 12#1212_12%12@startlink[1]@endlink[0]@bib@innerbibempty @noop _ _ ,",
    "( ,  )  p.   @noop _ _  ( ,  )  p.   link:\\doibase 10.1073/pnas.122653799 [ * * ,   ( ) ]",
    "@noop * * ,   ( ) @noop _ _ ( , ) @noop * * ,   ( ) link:\\doibase 10.1038/nature09182 [ * * ,   ( ) ] @noop * * ,   ( ) @noop * * ,   ( ) @noop ( ) @noop * * ,   ( ) @noop * * ,   ( ) link:\\doibase    10.1371/journal.pcbi.1001139 [ * * ,   ( ) ] link:\\doibase 10.1371/journal.pcbi.0030107 [ * * , ( ) ] @noop * * ,   ( ) link:\\doibase 10.1073/pnas.96.5.2025 [ * * ,   ( ) ] @noop * * ,   ( ) @noop * * ,   ( ) link:\\doibase 10.1002/prot.23059 [ * * ,   ( ) ] http://stacks.iop.org/1742-5468/2005/i=02/a=p02001 [ * * ,   ( ) ] http://www.pnas.org/content/84/19/6611.abstract [ * * ,   ( ) ] @noop _ _  ( ,  ) link:\\doibase 10.1126/science.220.4598.671 [ * * ,   ( ) ] @noop * * ,   ( ) @noop * * , ( ) \\doibase    http://doi.ieeecomputersociety.org/10.1109/cvpr.2003.1211462 [ * * ,   ( ) ] @noop * * ,   ( ) http://dx.doi.org/10.1140/epjb/e2008-00425-1 [ * * ,   ( ) ] link:\\doibase    10.1103/physreve.82.046112 [ * * ,   ( ) ] in  http://dx.doi.org/10.1007/978-3-642-02011-7_24[__ ] ,  , vol .  ,   ( ,  )  pp .   link:\\doibase    10.1103/physreve.78.046115 [ * * ,   ( ) ] link:\\doibase 10.1103/physreve.77.046112 [ * * ,   ( ) ] @noop * * ,   ( ) link:\\doibase 10.1016/j.physa.2009.12.019 [ * * ,   ( ) ] @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) link:\\doibase 10.1073/pnas.0605965104 [ * * ,   ( ) ] link:\\doibase 10.1073/pnas.0706851105 [ * * ,   ( ) ] @noop * * ,   ( ) link:\\doibase 10.1088/1367 - 2630/9/6/176 [ * * ,   ( ) ] @noop * * , ( )"
  ],
  "abstract_text": [
    "<S> we propose a new modularity optimization method , mod - csa , based on stochastic global optimization algorithm , conformational space annealing ( csa ) . </S>",
    "<S> our method outperforms simulated annealing in terms of both efficiency and accuracy , finding higher modularity partitions with less computational resources required . </S>",
    "<S> the high modularity values found by our method are higher than , or equal to , the largest values previously reported . </S>",
    "<S> in addition , the method can be combined with other heuristic methods , and implemented in parallel fashion , allowing it to be applicable to large graphs with more than 10000 nodes . </S>"
  ]
}