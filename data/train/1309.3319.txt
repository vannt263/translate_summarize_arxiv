{
  "article_text": [
    "classic literature on the design of peer - to - peer ( p2p ) topologies typically considers the optimization of _ static _ properties , such as the peer degree or the network diameter in the worst case .",
    "an appealing alternative is to optimize a p2p system ( or more generally , a distributed data structure ) based on the communication or usage patterns , either statically ( based on known traffic statistics ) or dynamically , exploiting temporal localities for self - adjustments .",
    "one of the main metrics to evaluate the performance of a self - adjusting network is the _ amortized cost _ : the worst - case communication cost over time and per request .",
    "splay trees are the most prominent example of the self - adjustment concept in the context of classic data structures : in their seminal work , sleator and tarjan  @xcite proposed self - adjusting binary search trees where popular items or _",
    "nodes _ are moved closer to the _ root _ ( where the lookups originate ) , exploiting potential non - uniformity in the access patterns .    * our contributions . *",
    "this paper initiates the study of how to extend the splay tree concepts  @xcite to multiple trees , in order to design self - adjusting p2p _",
    "overlays_. concretely , we propose a _ distributed variant _ of the splay tree to build the @xmath5 overlay : in this overlay , frequently communicating partners are located ( in the static case ) or moved ( in the dynamic case ) topologically close(r ) , without sacrificing local routing benefits : while in a standard _ binary search tree ( bst ) _ a request always originates at the root ( we will refer to this problem as the _ lookup problem _ ) , in the distributed bst variant , _ any pair _ of nodes in the network can communicate ; we will refer to the distributed variant as the _ routing problem_.    the reasons for focusing on bsts are based on their simplicity and powerful properties : they naturally support local , greedy routing , they are easily self - adjusted , they support join - leave operations in a straight - forward manner , and they require low peer degrees .",
    "the main drawback is obviously the weak robustness imposed by the tree structure , and we address this by using multiple trees .",
    "the proposed @xmath0 overlay consists of set of _",
    "@xmath1 distributed bsts_. ( see figure  [ fig : mosts ] for an example of a @xmath6 . )",
    "we first study how the communication cost in a static @xmath0 depends on the number @xmath1 of bsts , and give an upper bound which shows that the overlay strictly improves with larger @xmath1 .",
    "in fact , we will show that in some situations , changing from @xmath1 to @xmath7 bsts can make a critical difference in the _ routing _ cost .",
    "interestingly , such a drastic effect is not possible on the classical _ lookup _ operations in a bst .",
    "this demonstrates that the problem of optimizing _ routing _ on a bst has some key differences from the _ lookup _ problem that was , and still is , extensively researched .",
    "consisting of two bsts .",
    "top left : bst 1 ( e.g. , rooted at peer @xmath8 ) .",
    "top right : bst 2 ( e.g. , rooted at peer @xmath9 ) .",
    "bottom : combined bsts.,title=\"fig : \" ]   consisting of two bsts .",
    "top left : bst 1 ( e.g. , rooted at peer @xmath8 ) .",
    "top right : bst 2 ( e.g. , rooted at peer @xmath9 ) .",
    "bottom : combined bsts.,title=\"fig : \" ] +   consisting of two bsts .",
    "top left : bst 1 ( e.g. , rooted at peer @xmath8 ) .",
    "top right : bst 2 ( e.g. , rooted at peer @xmath9 ) .",
    "bottom : combined bsts.,title=\"fig : \" ] +    after studying the static case , we also describe a dynamic and self - adjusting variant of @xmath5 which is inspired by classic splay trees : communication partners are topologically `` splayed together '' .",
    "these splay operations are completely local and hence efficient .",
    "we complement our formal analysis by extensive simulations .",
    "these simulation results confirm our theoretical bounds but also reveal some desirable properties in the time domain ( e.g. , robustness to failures and churn , or convergence to our static examples ) .    * paper organization .",
    "* the remainder of this paper is organized as follows .",
    "section  [ sec : model ] introduces our formal model and the definitions , and section  [ sec : background ] provides the necessary background on binary search and splay trees .",
    "we study static @xmath0 overlays in section  [ sec : staticopt ] and dynamic @xmath0 overlays in section  [ sec : dynopt ] .",
    "section  [ sec : simulations ] reports on our simulation results .",
    "the routing model is compared to classic lookup model in section  [ sec : discussion ] . after reviewing related work in section  [ sec : relwork ]",
    ", we conclude our paper in section  [ sec : conclusion ] .",
    "finally , in the appendix , the existence and limitations of optimal overlays are discussed .",
    "we describe the p2p overlay network as a graph @xmath10 where @xmath11 is the set of peers and @xmath12 represents their connections . for simplicity",
    ", we will refer by @xmath13 both to the corresponding peer as well as the peer s ( unique ) identifier ; sometimes , we will simply write @xmath14 instead of @xmath13 . moreover , we will focus on bidirected overlays , i.e. , we will ensure that if a peer @xmath15 is connected to another peer @xmath16 , denoted by @xmath17 , then also @xmath18 is connected to @xmath19 ( i.e. , @xmath20 ) .",
    "sometimes we will refer to the two bidirected edges @xmath17 and @xmath20 simply by @xmath21 .",
    "we will assume that peers communicate according to a certain pattern .",
    "this pattern may be _ static _ in the sense that it follows a certain probability distribution ; or it may be _ dynamic _ and change arbitrarily over time .",
    "static communication patterns may conveniently be represented as a weighted directed graph @xmath22 : any peer pair @xmath17 communicating with a non - zero probability is connected in the graph @xmath23 .",
    "we will sometimes refer to the sequence of communication events between peers as _ communication requests _ @xmath24 .",
    "in the static case , we want the overlay @xmath25 be as similar as possible to the communication pattern @xmath23 ( implied by @xmath24 ) , in the sense that an edge @xmath26 is represented by a short route in @xmath25 ; this can be seen as a graph embedding problem of @xmath23 ( the `` guest graph '' ) into @xmath25 ( the `` host graph '' ) . in the dynamic setting",
    ", the topology @xmath25 can be adapted over time depending on @xmath24 .",
    "these topological transformations should be _ local _ , in the sense that only a few peers and links in a small subgraph are affected .",
    "our proposed topology @xmath0 can be described by a simple graph @xmath25 which consists of a set of @xmath1 _ binary search trees ( bst ) _",
    ", for some @xmath27 .",
    "consider a set @xmath28 of @xmath1 bsts .",
    "@xmath0 is an overlay over the peer set @xmath29 where connections are given by the bst edges , i.e. , @xmath30 .    our topological transformations to adapt the @xmath0 are _ rotations _ over individual bsts : minimal and local transformations that preserve a bst .",
    "informally , a rotation in a sorted binary search tree changes the local order of three connected nodes , while keeping subtrees intact .",
    "note that it is possible to transform any binary search tree into any other binary search tree by a sequence of local transformations ( e.g. , by induction over the subtree roots ) .",
    "let @xmath31 be a sequence of @xmath32 _",
    "requests_. each request @xmath33 is a pair of a source peer and a destination peer .",
    "let @xmath34 be an algorithm that given the request @xmath35 and the graph @xmath36 at time @xmath37 , transforms the current graph ( via local transformations ) to @xmath38 at time @xmath39 .",
    "we will use @xmath40 to refer to an any static ( i.e. , non - adjusting ) `` algorithm '' which does not change the communication network over time ; however , @xmath40 is initially allowed to choose an overlay which reflects the statistical communication pattern .",
    "the cost of the network transformations at time @xmath37 are denoted by @xmath41 and capture the number of rotations performed to change @xmath36 to @xmath38 ; when @xmath34 is clear from the context , we will simply write @xmath42 .",
    "we denote with @xmath43 the distance function between nodes in @xmath25 , i.e. , for two nodes @xmath44 we define @xmath45 to be the number of edges of a _",
    "shortest _ path between @xmath46 and @xmath47 in @xmath25 .",
    "( the subscript @xmath25 is optional if clear from the context . )",
    "note that for a bst @xmath48 , the shortest path between @xmath46 and @xmath47 is unique and can be found and routed locally via a greedy algorithms .    for a given sequence of communication requests",
    ", the cost for an algorithm is given by the number of transformations and the distance of the communication requests .",
    "formally , we will make use of the following standard definitions ( see also  @xcite ) .    for an algorithm @xmath34 and given an initial network @xmath49 with node distance function @xmath50 and a sequence @xmath51 of communication requests over time , we define the _ ( average ) cost _ of @xmath34 as : @xmath52 @xmath53 @xmath54 the _ amortized cost _ of @xmath34 is defined as the worst possible cost of @xmath34 , i.e. , @xmath55 .",
    "one may consider two different routing models on @xmath5 .",
    "( we will review how to do local routing in bsts in section  [ sec : background ] . ) in the first model , two peers will always communicate along a _",
    "single _ bst : one which minimizes the hop length ; the best bst may be found , e.g. , via a probe message along the trees : the first response is taken . in the second model ,",
    "we allow routes to cross different bsts , and take the globally shortest path ; this can be achieved , e.g. , by using a standard routing protocol ( e.g. , distance vector ) in the background . in the following ,",
    "if not stated differently , we will focus on the first model , which is more conservative in the sense that it yields higher costs .",
    "the following facts are useful in the remainder of this paper .",
    "theorem  [ static_lookup_lower_single ] bounds the lookup cost in an optimal binary search tree under a given _ lookup _ sequence @xmath24 : a sequence of requests all originating from the root of the tree .",
    "[ static_lookup_lower_single ] given @xmath24 , for any ( optimal ) bst @xmath48 , the amortized cost is at least @xmath56 where @xmath57 is the empirical measure of the frequency distribution of @xmath24 and @xmath58 is its empirical entropy .",
    "knuth @xcite fist gave an algorithm to find optimal bst , but mehlhorn @xcite proved that a simple greedy algorithm is near optimal with an explicit bound :    [ static_lookup_upper_single ] given @xmath24 , there is a bst , @xmath59 that can be computed using a balancing argument and has the amortized cost that is at most @xmath60 where @xmath57 is the empirical measure of the frequency distribution of @xmath24 and @xmath58 is its empirical entropy .",
    "sleator and tarjan were able to show that splay trees , a self - adjusting bst with an algorithm which we denote @xmath61 , yields the same amortized cost as an optimal binary search tree .",
    "let @xmath24 be a sequence of lookup requests where each item is requested at least once , then for any initial tree @xmath48 @xmath62 where @xmath58 is the empirical entropy of @xmath24 .    in @xcite , avin et al",
    ".  proposed a _",
    "single _ dynamic splay bst for routing , and a double splay algorithm we denote as @xmath63 .",
    "for the single tree case and any initial tree @xmath48 the authors proved the following lower bound for @xmath40 : @xmath64 and the following upper bound for @xmath63 : @xmath65 where @xmath66 and @xmath67 are the empirical measures of the frequency distribution of the sources and destinations from @xmath24 , respectively and @xmath68 is the entropy function .    finally , it is easy to see that bsts support simple and local routing . for completeness ,",
    "let us review the proof from  @xcite ( adapted to our terminology ) .",
    "[ clm : locrouting ] bsts support local routing .",
    "let us regard each peer @xmath46 in the bst @xmath48 as the root of a ( possibly empty ) subtree @xmath69 .",
    "then , a node @xmath46 simply needs to store the smallest identifier @xmath70 and the largest identifier @xmath71 currently present in @xmath69 .",
    "this information can easily be maintained , even under the topological transformations performed by our algorithms .",
    "when @xmath46 receives a packet for destination address @xmath47 , it will forward it as follows : ( 1 ) if @xmath72 , the packet reached its destination ; ( 2 ) if @xmath73 , the packet is forwarded to the left child and similarly , if @xmath74 , it is forwarded to the right child ; ( 3 ) otherwise , the packet is forwarded to @xmath46 s parent .",
    "we will first study static overlay networks which are optimized towards a request distribution given beforehand .",
    "the number of bsts @xmath1 is given together with the sequence of communication requests @xmath75 .",
    "the goal is to find the optimal @xmath0 to minimize @xmath76 .    in @xcite",
    "it is was proved that for any @xmath24 , the optimal @xmath77 can be found in polynomial time . here",
    "we first provide a new upper bound for the optimal @xmath0 and show how it can improve with @xmath1 .    for communication requests",
    "@xmath24 let @xmath78 ( or for short @xmath79 ) be the frequency of @xmath13 as a _ source _ in @xmath24 , similarly let @xmath80 be the frequency of @xmath13 as a _ destination _ and @xmath81 be the frequency of the request @xmath82 in @xmath24 .",
    "define @xmath83 and note that by definition @xmath84 .",
    "let @xmath85 be a random variable ( r.v . ) with a probability distribution defined by the @xmath86 .",
    "for any @xmath1 partition of the requests in @xmath24 into disjoint sets @xmath87 , let @xmath88 be the frequency measure of the partition , i.e. , @xmath89 .",
    "first we can prove a new bound on the optimal static @xmath77 :    [ static_lookup_upper_1_set ] given @xmath24 , there exists a @xmath77 such that : @xmath90    where @xmath91 is the entropy of @xmath85 as defined earlier .",
    "the result follows from theorem [ static_lookup_upper_single ] with some modifications .",
    "consider a tree @xmath48 and let @xmath92 denote the distance of node @xmath14 from the root .",
    "we will assume the following non - optimal strategy : each request @xmath93 is first routed from @xmath14 to the root and then from the root to @xmath94 .",
    "the amortized cost of @xmath24 can be written as the sum of @xmath14 routing to and from the root @xmath95 now given @xmath96 , the problem of finding the tree that minimizes @xmath97 is exactly the lookup problem of theorem [ static_lookup_upper_single ] and the result follows .",
    "consider now the @xmath0 overlay which consists of @xmath1 bsts .",
    "assume again a non - optimal strategy : we partition @xmath24 into @xmath1 disjoint sets of requests @xmath87 , and each request is routed on its unique bst .",
    "in each tree we use the previous method , and the messages are routed from the source to the root and from the root to the destination .",
    "we can now prove an upper bound on @xmath0 that improves with @xmath1 .",
    "[ static_lookup_upper_k_set ] given @xmath24 , there exists a @xmath0 such that :    @xmath98    where @xmath91 is the entropy of @xmath85 as defined earlier .    for a subset @xmath99 , @xmath100 , let @xmath101 denote the frequency measure defined as @xmath85 , but limited to the requests in @xmath99 .",
    "now :    @xmath102    where the last step is based on the decomposition property of entropy .    note that this approach can yield a cost reduction of up to @xmath103 , when the @xmath104 values are equal .",
    "the problem of equally partition @xmath24 into @xmath1 sets in order to maximize @xmath105 is np - complete , since even the partition problem ( i.e. , @xmath106 ) and in particular the balanced partition problem ( with @xmath106 ) are np - complete @xcite .",
    "interestingly , for those cases , @xmath106 , a pseudo - polynomial time dynamic programming algorithm exist .",
    "the bound in theorem  [ static_lookup_upper_k_set ] is conservative in the sense that sometimes , a single additional bst can reduce the optimal communication cost of @xmath0 from worst possible ( e.g. , @xmath107 ) to a constant cost in @xmath108 .",
    "[ thm:2trees - bad ] a single additional bst can reduce the amortized costs from a best possible value of @xmath2 to @xmath3 .",
    "the formal proof appears in the appendix .",
    "essentially , it follows from the two bsts @xmath109 and @xmath110 shown in figure  [ fig : twotrees ] : obviously , the two bsts can be perfectly embedded into @xmath6 consisting of two bsts as well .",
    "however , embedding the two trees at low cost in one bst is impossible , since there is a large cut in the identifier space .",
    "see the proof for details",
    ".     originating from these specific trees can yield high amortized costs.,title=\"fig : \" ] +    interestingly , as we will discuss in section  [ sec : discussion ] , such a high benefit from one additional bst is unique to the routing model and does not exist for classic lookup data structures .",
    "moreover , as we will see in section  [ sec : simulations ] , theorem  [ thm:2trees - bad ] even holds in a dynamic setting , i.e. , a p2p system can also _ converge _ to such a bad situation .",
    "given our first insights on the performance of static @xmath0 networks , let us now initiate the discussion of self - adjusting variants : bsts which adapt to the demand , i.e. , the sequence @xmath24 .",
    "we initialize @xmath0 as follows : each bst connects _ all _ peers @xmath111 as a random and independent binary search tree .",
    "when communication requests occur , bsts start to adapt . in the following , we will adjust the overlay at each interaction ( `` communication event '' or `` request '' ) of two peers .",
    "of course , in practice , such frequent changes are undesirable .",
    "while our protocol can easily be adapted such that peers only initiate the topological rearrangements after a certain number of interactions ( within a certain time period ) , in order to keep our model simple , we do not consider these extensions here .",
    "concretely , we propose a straight - forward _ splay _ method ( inspired from the classical splay trees ) to change the @xmath0 : whenever a peer @xmath46 communicates with a peer @xmath47 , we perform a distributed splay operation in _ one _ of the bsts , namely in the bst @xmath48 in which the two communication partners @xmath112 are the topologically closest .    concretely , upon a communication request @xmath112 , we determine the bst @xmath48 ( in case multiple trees yield similar cost , an arbitrary one is taken ) , as well as the least common ancestor @xmath113 of @xmath46 and @xmath47 in @xmath48 : @xmath114 .",
    "subsequently , @xmath46 and @xmath47 are splayed to the root of the subtree ( henceforth denoted by @xmath115 ) of @xmath48 rooted at @xmath113 ( a so - called _",
    "double - splay _",
    "operation  @xcite ) .",
    "( * upon request @xmath112 * ) find bst @xmath116 where @xmath46 and @xmath47 are closest ; @xmath114 ; @xmath117 @xmath118 * splay * @xmath46 to root of @xmath115 ; * splay * @xmath47 to the child of @xmath119 ;    figure  [ fig : sa ] gives an example : upon a communication request between peers @xmath120 and @xmath121 , the two peers are splayed to their least common ancestor , peer @xmath8 , in bst @xmath122 .     of figure",
    "[ fig : mosts].,title=\"fig : \" ] +      note that @xmath0 automatically supports joins and leaves of peers . in order for a peer @xmath47 to join @xmath0",
    ", it is added as a _ leaf _ to each bst constituting the overlay ( according to the search order ) .",
    "similarly for leaving : in order for a peer @xmath47 to leave , for each bst , @xmath47 is first swapped with either the rightmost peer of its left subtree ( its in - order predecessor ) or the leftmost node of its right subtree ( its in - order successor ) ; subsequently it is removed . in case of crash failures , a neighboring peer is responsible to detect that @xmath47 left and to perform the corresponding operations .",
    "in order to study the behavior of the self - adjusting @xmath0 , we conducted an extensive simulation study . in particular , we are interested in how the performance of @xmath5 depends on the number of bsts @xmath1 and the specific communication patterns .",
    "we generated the following artificial communication patterns .",
    "these patterns were obtained by first constructing some guest graph @xmath23 , and then generating @xmath24 from @xmath23 .    to model communication patterns , we implemented four guest graphs @xmath23 : + * ( 1 ) * bittorrent swarm connectivity ( bt ) : @xmath23 models the p2p connectivity patterns measured by zhang et al .",
    "the model is taken from  @xcite and combines preferential attachment aspects ( for swarm popularity ) with clustering ( for common interest types ) .",
    "concretely , the network is divided into a collection of ( fully connected ) swarms , and the join probability of a peer is proportional to the number of _ its neighbors _ participating in that swarm . + * ( 2 ) * facebook ( fb ) : @xmath23 is a connected subset of the facebook online social network ( obtained from @xcite ) .",
    "the graph consists of roughly @xmath123 nodes and @xmath124 edges .",
    "the peer identifiers were chosen according to a breadth first search , starting from the peer with the highest degree ( breaking ties at random ) . for graphs with less then 63k peers ( @xmath125k ) ,",
    "the subgraph with @xmath4 peers with the smallest identifiers was extracted .",
    "+ * ( 3 ) * @xmath126 : @xmath23 is simply an @xmath5 with ( 16 ) randomly generated bsts .",
    "+ * ( 4 ) * @xmath127 : @xmath23 is an @xmath5 with ( two ) bsts generated specifically for the worst routing cost in @xmath128 .    to generate @xmath24 ,",
    "we used three methods : + * ( 1 ) * match : the sequence @xmath24 is generated from a random maximal matching on @xmath23 .",
    "after each matching edge has been used once , the next random matching is generated .",
    "+ * ( 2 ) * rw-0.5 : the sequence @xmath24 models a random walked performed on @xmath23 .",
    "every edge ( i.e. , request ) @xmath112 of the random walk is repeated with probability @xmath129 ; with probability @xmath129 , another random request @xmath130 is generated .",
    "+ * ( 3 ) * rw-1.0 : like rw-0.5 , but without repetitions .",
    "let us first study how the routing cost depends on @xmath1 , the number of bsts in @xmath0 .",
    "the routing cost of a communication request @xmath112 in @xmath131 is given by the shortest distance @xmath132 ( among all the @xmath1 bsts ) .",
    "figure  [ fig : fb_pref_ktg16_match ] plots the average routing cost for our guest graphs bt , fb , and @xmath5 , under the maximal matching request pattern ( match ) .",
    "for each experiment , we generate @xmath133 requests ( i.e. , @xmath24 is a sequence of @xmath133 pairs ) , which is sufficient to explore the performance of @xmath5 over time .",
    "( the variance over different runs is very low . )",
    "we observe that bt typically yields slightly higher costs than fb and especially obst . as a rule of thumb ,",
    "doubling @xmath1 roughly yields a constant additive improvement in the routing cost , in all the scenarios .",
    "interestingly , @xmath0 is indeed able to perfectly embed @xmath134 requests with @xmath135 : @xmath5 converges to the optimal structure in which every bst of @xmath25 serves a specific bst of @xmath23 .",
    "but even for @xmath136 , @xmath0 is able to exploit locality and the cost is relatively stable and independent of the size of the p2p system .",
    "figure  [ fig : worst_requests ] shows the routing cost for @xmath77 and @xmath6 , for a @xmath127 scenario on fb .",
    "the figure confirms theorem [ thm:2trees - bad ] and extends it for the dynamic case : @xmath5 may also converge to a situation as shown to exist in theorem [ thm:2trees - bad ] , and a single additional bst improves the routing cost by an order of magnitude .",
    "the figure also confirms that multiple bsts are more useful than in the pure lookup model of section  [ sec : discussion ] . finally , note that unlike figure  [ fig : fb_pref_ktg16_match ] ( c )",
    ", the cost is not independent of the network size under this worst - case request pattern .     with match on fb . ]",
    "let us now compare the alternative request sequences @xmath24 , generated using match , rw-0.5 , and rw-1.0 on the facebook graph @xmath137 .",
    "figure  [ fig : fb_match_and_rw ] shows that for @xmath128 , the match pattern yields the highest cost , but also improves the most for increasing @xmath1 .",
    "the rw-1.0 generally gives lower costs and as expected , rw-0.5 reduces the costs further due to the temporal locality of the communications . again , all @xmath0 overlays benefit from higher @xmath1 values .    , the middle for @xmath138 , and the lowest for @xmath139 . ]    finally , figure  [ fig : box_plots ] studies the evolution of classical topology metrics over time , namely the min edge cut and the diameter . in general",
    ", we observe that @xmath0 is relatively stable and behaves well also regarding these properties and even for small @xmath1 .",
    "as shown in figure  [ fig : fb_diam_over_time ] , the diameter also scales well in the number of peers , although under match it is slightly larger than under rw and subject to more variance .",
    "+    however , let us emphasize that @xmath0 is optimized for amortized routing costs rather than mincut and diameter , and we suggest using an additional , secondary overlay ( e.g. , a hypercubic topology ) if these criteria are important .",
    "initializing @xmath5 trees at random typically yields relatively low costs from the beginning .",
    "figure  [ fig : cost_plots ] shows that the overlay subsequently also adjusts relatively quickly to the specific demand .",
    "( other scenarios yield similar results . )",
    "this indicates that the system is able to adapt to new communication patterns and/or joins and leaves relatively quickly .",
    "request model and for 1000 peers . ]",
    "the bsts in @xmath5 are also relatively independent in the sense that different links are used .",
    "we performed an experiment in which we run a long sequence of routing requests on the @xmath140 and then started to remove random peers .",
    "after each peer removal we measured the _ largest connected component _ and the fraction of peer pairs that can communicate _ within a single connected bst _ , and with respect to the overall @xmath140 graph connectivity .",
    "single tree connectivity assumes that we only allow for local routing over a given bst , while the overall graph connectivity assumes that we can route on all the graph edges .",
    "figure  [ fig : robustness ] shows that a large fraction of peers indeed stays connected by a single bst , even under a large number of peer removals .",
    "but the figure also shows that if the connectivity is not counted with respect to a single bst ( `` tree '' curve in the plot ) but over all bsts ( `` graph '' curve in the plot ) , not surprisingly , the robustness would be much higher .",
    "our current @xmath5 overlay employs routing on single bsts only . in order to exploit inter - bsts links , either alternative routing protocols ( for instance a standard distance vector solution )",
    "could be used , or one may locally recompute bsts within the connected component .",
    "we leave these directions for future research , and conclude that there is a potential for improvement in such scenarios .",
    "+      peer - to - peer systems are typically highly dynamic , especially _ open _",
    "p2p networks where users can join and leave arbitrarily .",
    "this raises the question of how well @xmath5 can be tailored towards a traffic pattern under churn : how does the routing cost deteriorate with higher churn rates ? to investigate this question , we consider a simple scenario where after every routing request ( in @xmath24 ) , @xmath141 many random peers leave @xmath5 ( i.e. , are removed from all bsts , according to the procedure sketched in section  [ ssec : joinleave ] ) . in order to keep the same dimension of the traffic matrix , upon the removal of each of the @xmath141 peers",
    ", we immediately join another , new peer at the leaf of a corresponding bst .",
    "figure  [ fig : churn ] shows how the routing cost depends on the churn rate @xmath141 .",
    "we can see that for increasing churn rates ( and under traffic patterns generated using the @xmath126 guest graph ) , the routing cost increases moderately ; for larger @xmath141 , the marginal cost effect becomes smaller . in additional experiments",
    ", we also observed that for the @xmath142 and @xmath143 guest graphs , the cost is almost agnostic to @xmath141 , implying that if @xmath0 is not perfectly adaptable to the traffic pattern , nodes can join and leave without affecting the routing cost by much .",
    "nodes leave and rejoin between every routing request . ]",
    "interestingly , it turns out that while having multiple bsts can significantly improve the routing cost ( see theorem  [ thm:2trees - bad ] ) , the benefit of having parallel bsts is rather limited in the context of classical lookup data structures , i.e. , if all requests originate from a single node ( the root ) .",
    "consider a sequence @xmath144 , @xmath145 of _ lookup _ requests , and @xmath146 .",
    "theorem  [ static_lookup_lower_single ] can be generalized to @xmath1 parallel lookup bsts .",
    "[ static_lookup_lower_k_set ] given @xmath24 , for any @xmath0 : @xmath147 where @xmath57 is the empirical frequency distribution of @xmath24 and @xmath58 is its empirical entropy .",
    "let @xmath148 denote the number of times the node @xmath13 appeared in the lookup sequence @xmath24 .",
    "the empirical frequency distribution is @xmath149 for all @xmath14 , and the entropy is given by @xmath150 .",
    "since it is sufficient to serve a node by one bst only , we can assume w.l.o.g .",
    "each bst @xmath151 is used to serve the lookup requests for a specific subset @xmath152 , and that @xmath153 and @xmath154 .",
    "let @xmath155 be the empirical measure of the frequency distribution of the nodes in @xmath156 with respect to the lookup sequence @xmath24 .",
    "using entropy decomposition property , we can write : @xmath157 @xmath158 , where @xmath159 .    always performing lookups on the optimal bst ,",
    "we get using theorem [ static_lookup_lower_single ] : @xmath160 @xmath161 @xmath162 @xmath163 .",
    "the high rate of peer joins and leaves is arguably one of the unique challenges of open p2p networks . in order to deal with such transient behavior or even topological attacks , many robust and self - repairing overlay networks",
    "have been proposed in the literature :  @xcite .",
    "however , much less is known on networks which automatically optimize towards a changing _ communication pattern_.    the p2p topologies studied in the literature are often hypercubic ( e.g. , chord , kademlia , or skip graph  @xcite ) , but there already exist multi - tree approaches , especially in the context of multicast  @xcite and streaming systems  @xcite .",
    "we are only aware of two papers on demand - optimized or self - adjusting overlay networks : leitao et al .",
    "@xcite study an overlay supporting gossip or epidemics on a dynamic topology .",
    "in contrast to our work , their focus is on unstructured networks ( e.g. , lookup or routing is not supported ) , and there is no formal evaluation .",
    "the paper closest to ours is  @xcite .",
    "avin et al .",
    "initiate the study of self - adjusting splay bsts and introduce the double - splay algorithm .",
    "although their work regards a distributed scenario , it focuses on a single bst only .",
    "our work builds upon these results and investigates the benefits of having multiple trees , which is also more realistic in the context of p2p computing .",
    "more generally , one may also regard geography  @xcite or latency - aware  @xcite p2p systems as providing a certain degree of self - adaptiveness . however , these systems are typically optimized towards more static criteria , and change less frequently .",
    "this also holds for the p2p topologies tailored towards the isps infrastructures  @xcite .",
    "our work builds upon classic data structure literature , and in particular on the splay tree concept  @xcite .",
    "splay trees are optimized bsts which move more popular items closer to the root in order to reduce the average access time .",
    "regarding the splay trees as a network , @xcite describes self - adjusting networks for _ lookup _ sequences , i.e. , where the source is a _ single ( virtual ) node _ that is connected to the root .",
    "splay trees have been studied intensively for many years ( e.g.  @xcite ) , and the famous dynamic optimality conjecture continues to puzzle researchers  @xcite : the conjecture claims that splay trees perform as well as any other binary search tree algorithm .",
    "recently , the concurrent splay tree variant cbtrees  @xcite has been proposed .",
    "unlike splay trees , cbtrees perform rotations infrequently and closer to the leaves ; this improves scalability in multicore settings .    regarding the static variant of our problem ,",
    "our work is also related to network design problems ( e.g. ,  @xcite ) and , more specifically , graph embedding algorithms  @xcite , e.g. , the _ minimum linear arrangement _ ( mla ) problem , originally studied by harper  @xcite to design error - correcting codes . from our perspective , mla can be seen as an early form of a `` demand - optimized '' embedding on the _ line _ ( rather than the bst as in our case ) : given a set of communication pairs , the goal is to flexibly arrange the nodes on the line network such that the average communication distance is minimized .",
    "while there exist many interesting algorithms for this problem already ( e.g. , with sublogarithmic approximation ratios  @xcite ) , no non - trivial results are known about distributed and local solutions , or solutions on the tree as presented here .",
    "this paper initiated the study of p2p overlays which are statically optimized for or adapt to specific communication patterns .",
    "we understand our algorithms and bounds as a first step , and believe that they open interesting directions for future research .",
    "for example , it would be interesting to study the multi - splay overlay from the perspective of online algorithms : while computing the competitive ratio achieved by classic splay trees ( for lookup ) arguably constitutes one of the most exciting open questions in theoretical computer science  @xcite , our work shows that the routing variant of the problem is rather different in nature ( e.g. , results in much lower cost ) .",
    "another interesting research direction regards alternative overlay topologies : while we have focused on a natural bst approach , other graph classes such as the frequently used hypercubic networks and skip graphs  @xcite may also be made self - adjusting . since these topologies also include tree - like subgraphs , we believe that our results may serve as a basis for these extensions accordingly .",
    "* acknowledgments .",
    "* we are grateful to chao zhang , prithula dhungel , di wu and keith w.  ross  @xcite for providing us with the bittorrent data .",
    "[ thm:2trees - bad2 ] a single additional bst can reduce the amortized costs from a best possible value of @xmath2 to @xmath3 .",
    "consider the two bsts @xmath109 and @xmath110 in figure  [ fig : twotrees ] .",
    "clearly , the two bsts can be perfectly embedded into @xmath6 consisting of two bsts as well . however , embedding the two trees at low cost in one bst is hard , as we will show now .",
    "formally , we have that , where @xmath164 ( for an even @xmath4 ) : @xmath165 @xmath166 ) $ ] @xmath167 ) $ ] @xmath168 ) $ ] @xmath169 ) $ ] , and @xmath170 ) $ ] @xmath171 ) $ ] i.e. , bst @xmath172 is `` laminated '' over the peer identifier space , and bst @xmath122 consists of two laminated subtrees over half of the nodes each . consider a request sequence @xmath24 generated from these two trees with a uniform empirical distribution over all source - destination requests . clearly , optimal @xmath6 will serve all the requests with cost 2 , since all the requests will be neighbors in @xmath6 . in order to show the logarithmic lower bound for the optimal @xmath77",
    ", we leverage the interval cut bound from theorem  11 in  @xcite .",
    "concretely , we will show that for any interval @xmath173 of size @xmath174 an @xmath175 ( and hence an @xmath176 ) fraction of requests have one endpoint inside @xmath173 and the other endpoint outside @xmath173 .",
    "in other words , each interval has a linear cut , and the claim follows since the empirical entropy is @xmath107 .",
    "the proof is by case analysis .",
    "_ case  1 _ : consider an interval @xmath177 $ ] where @xmath178 .",
    "then , the claim follows directly from tree @xmath172 , as each node smaller or equal @xmath179 communicates with at least one node larger than @xmath179 , so the cut is of size @xmath175 . similarly in _",
    "case  2 _ for an interval @xmath177 $ ] where @xmath180 . in _",
    "case  3 _ , the interval @xmath177 $ ] crosses the node @xmath179 , i.e. , @xmath181 and @xmath182 .",
    "moreover , note that since @xmath174 , @xmath183 and @xmath184 hold .",
    "the lower bound on the cut size then follows from tree @xmath122 : each node @xmath185 is connected to a node @xmath186 outside the interval , and each node @xmath187 is connected to a node @xmath188 outside the interval .",
    "we examine in more detail the special case of _ perfect _ overlays : overlays which accommodate a given communication pattern with the minimum amortized costs of one .",
    "it is not surprising that many bsts are required for perfect overlays , i.e. , @xmath1 must be large in the @xmath0 overlay .",
    "w.l.o.g . , assume @xmath193 , @xmath195 , @xmath196 , and that peer @xmath94 appears as a left child of peer @xmath14 .",
    "then , @xmath197 should be embedded into the right subtree of @xmath94 ( since @xmath198 ) .",
    "there are two cases : @xmath199 and @xmath200 .",
    "if @xmath199 , then @xmath201 can not be in the left subtree of @xmath14 , thus @xmath194 ( since @xmath197 is in the left subtree of @xmath14 ) .",
    "if @xmath200 , then @xmath201 can not be in the right subtree of @xmath94 , thus @xmath194 ( since @xmath197 is in the right subtree of @xmath94 ) .",
    "[ thm : nobody - is - perfect ] let @xmath24 be a sequence of communication requests coming from a random perfect matching on the complete peer graph . then , with probability at least @xmath202",
    ", there is no perfect overlay with @xmath203 or less bsts , for any @xmath204 ( a parameter ) .",
    "we want to show that for @xmath205 , there exists , with high probability , a set of mutually intersecting requests of size @xmath203 , and thus , we need at least @xmath1 trees to achieve perfect embedding ( according to lemma  [ lemma : intersected_req ] ) .",
    "let us split all the @xmath4 nodes into @xmath203 consecutive non - overlapping intervals , each of size @xmath206 : @xmath207 , @xmath208 , ",
    ", @xmath209 . if there is at least one edge between a node in interval @xmath14 and a node in interval @xmath94 , we say that these intervals are connected , and we denote this as : @xmath210 .",
    "a connection between a specific node @xmath46 to some node in the interval @xmath211 , is denoted as @xmath212 .",
    "now we find a bound on the probability that @xmath213 .",
    "let @xmath214 : @xmath215 , so @xmath216 , and @xmath217 .",
    "assuming that the number of intervals @xmath197 is even , consider the following scenario @xmath232 : @xmath233 . clearly , in this scenario , we have at least @xmath197 mutually intersecting requests .",
    "we can compute the probability for this to happen as : @xmath234 @xmath235 @xmath236 ."
  ],
  "abstract_text": [
    "<S> the design of scalable and robust overlay topologies has been a main research subject since the very origins of peer - to - peer ( p2p ) computing . </S>",
    "<S> today , the corresponding optimization tradeoffs are fairly well - understood , at least in the static case and from a worst - case perspective .    </S>",
    "<S> this paper revisits the peer - to - peer topology design problem from a self - organization perspective . </S>",
    "<S> we initiate the study of topologies which are _ optimized to serve the communication demand _ , or even self - adjusting as demand changes . </S>",
    "<S> the appeal of this new paradigm lies in the opportunity to be able to go beyond the lower bounds and limitations imposed by a static , communication - oblivious , topology . </S>",
    "<S> for example , the goal of having short routing paths ( in terms of hop count ) does no longer conflict with the requirement of having low peer degrees .    </S>",
    "<S> we propose a simple overlay topology @xmath0 which is composed of @xmath1 ( rooted and directed ) _ binary search trees ( bsts ) _ , where @xmath1 is a parameter . </S>",
    "<S> we first prove some fundamental bounds on what can and can not be achieved optimizing a topology towards a _ static _ communication pattern ( a static @xmath0 ) . in particular </S>",
    "<S> , we show that the number of bsts that constitute the overlay can have a large impact on the routing costs , and that a single additional bst may reduce the amortized communication costs from @xmath2 to @xmath3 , where @xmath4 is the number of peers . </S>",
    "<S> subsequently , we discuss a natural self - adjusting extension of @xmath0 , in which frequently communicating partners are `` splayed together '' . </S>"
  ]
}