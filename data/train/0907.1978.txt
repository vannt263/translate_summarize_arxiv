{
  "article_text": [
    "today , the design of business processes often requires both managerial and technical expertise . for this reason , the business process modeling notation ( bpmn ) has been developed and then standardized ( by the omg ) with the explicit aim of being understandable and usable by people with different roles and backgrounds , from top - level managers to it personnel .",
    "the availability of a modeling language , together with tools and methodologies , is a key factor enabling the design of complex processes .",
    "however , currently this notation has a strong limitation , that we highlight and address in this paper : its weak data representation capabilities .",
    "the bpmn specification states that data and information models _ are not part _ of the notation , that data objects can be represented _ but _ business process diagrams _ are not _ data flow diagrams , and that data objects _ do not have any direct effect _ on process flows @xcite .",
    "nonetheless , data objects have been defined as a predefined artifact of bpmn ( together with comments and associations ) , because the bpmn specification itself declares that in some diagrams they represent _ the most important information to be modeled_. for instance , one of the main advantages of enterprise resource planning ( erp ) systems is to provide unified access to the data .",
    "master data management enables the interaction of different actors in a supply chain , to provide services like collaborative fulfillment networks .",
    "supply chain management systems deal with flows of materials , information and money , product lifecycle management systems concern the transformation of materials into final products , and customer relationship management systems manipulate customers data to offer customized services .",
    "basically , data is ubiquitous as far as business processes are concerned . in bpmn",
    ", we can represent data using _ data objects _ @xcite .",
    "data objects are rectangles with a folded corner , where we can specify a state , like ` approved ` or ` purchased ` .",
    "if we compare this shape with the process - specific notation of bpmn ( version 1.2 ) , it clearly appears that information modeling capabilities are much less powerful and very informal , as illustrated in figure  [ fig : current ] .",
    "some of the ideas presented in this paper and in its previous versions will probably be included in the forthcoming bpmn specification version 2.0 , in particular the concept of data store ( figure  [ fig : current2 ] ) and extended icons to represent alternative kinds of data objects / stores ( figure  [ fig : current3 ] ) .",
    "however , this document has not been released yet , and is not definitive , therefore in the following we will refer to the current official version of bpmn @xcite .                in summary ,",
    "data objects are _ too simple _ to enable a proper representation of data , although data and processes are closely related in real business scenarios .",
    "while it is reasonable that bpmn has been developed focusing on a single aspect of a business , i.e. , processes , we think that data should not be modeled using a separate language , because we would not be able to represent the _ connection _ between business processes and the data they transform .",
    "this is a very important aspect of an enterprise , because it is _ there _ that new value is generated .",
    "the main contribution of this paper is a conservative extension of bpmn , that we call business process and data modeling notation ( bpdmn ) .",
    "bpdmn has been defined as a result of three main activities :    * the _ mapping of real business processes _ of a leading international mechanical company from informal descriptions to bpmn diagrams , as exemplified in section  [ examples ] .",
    "this has provided most of the requirements of the notation and motivated the development of a data - driven modeling methodology and a design tool supporting it , introduced in @xcite . *",
    "the analysis of the data representation and manipulation capabilities of _ related business process management languages _ , e.g. , xpdl and bpel , performed using existing requirement analyses .",
    "this motivated the inclusion of a * structure * into bpdmn data * objects * , and the definition of * data mappings*. * the analysis of existing conceptual _ data representation notations_.      in the next section we introduce our notation , focusing on the new constructs ( for details about other bpmn shapes the reader may consult @xcite ) . in section  [ mapping ]",
    "we evaluate our proposal according to related works : we recall the notations that influenced bpdmn , we review our notation according to the workflow data patterns , and indicate a mapping to the main xml - based languages used to represent and execute business processes .",
    "then , in section  [ examples ] we present some examples of bpdmn diagrams .",
    "we conclude the paper with some final remarks .",
    "this work is part of a more general attempt to make bpmn a complete notation to support the design and the evaluation of business processes @xcite .",
    "it is worth noticing that , given the complexity of this topic , we do not claim or expect to be exhaustive . by the way , the bpmn specification itself misses many formal aspects , because we are dealing with a conceptual language whose flexibility and ( sometimes ) ambiguity may be used to adapt to different application contexts .",
    "however , we highlight the problem , introduce a candidate solution , provide an assessement of this solution and a comparison with other languages ( using the well known data patterns ) , examples , and most importantly we expect to raise a discussion on a topic which is usually considered very important both by academics and pratictioners , according to our previous experiences . at the end of the next section ,",
    "after having presented an overview of the notation , we discuss in more detail what has not been covered in the current version of our proposal , again with the aim of fostering discussions .",
    "in this section we introduce the new notation .",
    "we first present its basic constructs , i.e. , objects and stores , then we show how they are used inside diagrams ( their dynamics ) .",
    "finally , we introduce the idea of _ structured _ stores and objects , allowing the representation of different levels of abstraction , and we provide some clarifications on what has not been included into the notation .",
    "* stores * allow us to represent several facts about an enterprise , like that some information is available in the company databases , that some other information must be retrieved or bought by external information sources , or that products and documents ( like invoices ) are stored in specific locations and their insertion triggers other processes that can start working on them .",
    "a store can represent a physical store , a digital store , or a set of variables that should be available throughout a process .",
    "the concept of _ store _ and its icon have been taken from data flow diagrams , as we have illustrated in figure  [ fig : extension1](a ) .",
    "stores contain * objects * , of which we can describe the dynamics  how they are produced and manipulated .",
    "objects are used to represent generic physical and digital objects , like invoices , raw materials , products , or transactional data .",
    "the large number of entities that can be represented makes objects very powerful , but also potentially confusing and not self - understandable .",
    "therefore , the first difference between objects in bpmn and in bpdmn is that we allow the usage of different icons to represent different kinds of objects ( like uml stereotypes ) , with the aim of improving the readability of the diagrams @xcite .",
    "this extensibility is very important , because icons that are intuitive in some contexts may not be the same in others , in addition vendors may wish to design specific icons for their products .",
    "we define two ways to extend an object : either by adding a marker inside its basic icon , or by including a small basic icon on the top - right corner of the extension , as exemplified in figure  [ fig : extension1](b )  this can also be used as a way to distinguish between digital and physical objects , without introducing yet another visual construct .    in the following section",
    ", we will introduce specific constructs to represent the life cycle ( dynamics ) of objects , i.e. , * explicit and implicit data flows * , and * data mappings*.          when objects are used inside bpdmn diagrams , where they do influence process flows , they must have a source and a target : they can be extracted from a store , produced by an activity , or received as a message from outside the diagram or from another pool , e.g. , from a private process ( figure  [ fig : extension2](a ) ) . for example , a document can be taken from an archive , it can be produced by a ` write document ` task , or it can be received by mail from a customer ( pool ) .",
    "similarly , objects can be inserted into a store , sent to an external recipient or to another pool in the diagram , or provided to another task . in these cases ,",
    "object icons are added on top of the corresponding connectors , as illustrated in the figure , and a small `` @xmath0 '' on the corresponding flow indicates when the input is optional  this is often the case when objects represent documentation or handbooks , that may or may not be necessary to the performers of the activity .",
    "notice that objects can be exchanged between different pools through messages , supporting choreography .",
    "* data flows * naturally extend control flows ( traditional bpmn flows ) : without data objects , the activity with the incoming flow must wait for the previous activity to finish , while with data objects it must wait for the previous activity to finish _ and _ for the input data represented by the object ( except when it is indicated as optional )",
    ". we can also represent an * explicit data flow * using a dashed line , as in the top left corner of figure  [ fig : extension2 ] . in addition , notice that objects are not restricted to single pools , but can be used to represent messages exchanged between different pools . with regard to bpdmn editors , we suggest to have an option to hide / unhide data objects on control flows , to provide the user a tool to focus on the data or process specific features of the diagram .        finally , when an object is exchanged between two activities , it is possible that the output format of the first does not correspond to the input format of the other . this is frequent when processes are obtained as compositions of independent services , like in service oriented architectures",
    "in this case , we indicate the translation between the two objects using a solid arrow , as illustrated in figure  [ fig : extension2](b ) .",
    "this notation indicates a * data mapping * , and has associated metadata to store the mapping between input and output variables , like in bpel  we can not provide additional details because of space limitations .",
    "stores refer to physical or digital archives , or process variables when processes are executable .",
    "stores can have a complex internal structure , and to represent it we will use the basic er constructs : entities ( i.e. , stores ) , relationships ( lines with diamonds ) and generalizations ( arrows ) .",
    "each entity can be seen as a separate store , and different entities may be summarized using a higher - level entity at a different abstraction level , as we have exemplified in figure  [ fig : store_abs ] . in this way , managers will have a few high level icons on their diagrams , while system administrators and programmers will unhide the entire data / object structures to implement them on the enterprise information system .",
    "it is worth noticing that stores may become quite complex , as it happens in many large companies with very large databases and physical locations .",
    "however , this kind of information is usually not process - specific , but concerns many processes inside an organization .",
    "therefore , we may expect that its models are already available somewhere , and must only be imported inside new diagrams .",
    "for instance , schemata are already available in erp systems , therefore we expect that many stores will not be designed inside process diagrams , but only linked to the process tasks that get or put objects from / into them .",
    "this concept can already be found in xpdl , where a _ package _ is defined as a context which can contain several processes and make variables and resources available to all of them , without duplication and additional efforts .    in bpdmn , objects may refer to sets of variables , that will be associated to xml documents or wsdl messages at execution time .",
    "therefore , also objects can be structured . in the same way",
    ", we can also associate a url to an object , e.g. , a link to an on line document .",
    "currently , in our tool we do not represent structures _ inside _",
    "the diagrams , but on a panel accessible by clicking on the object icon  the internal structure of objects does not have to be connected to other graphical constructs .",
    "objects can represent both global variables , when they are extracted from stores ( in which case they will contain subsets of the store variables ) , or local variables , when they are generated by a task and sent to another through a sequence or message flow .      before introducing some example diagrams ,",
    "it is important to clarify what bpdmn _ is not_. in @xcite the authors claim the importance of data modeling in business process languages to enable process validation .",
    "however , they also point out that it is not realistic to include `` all the relevant information on underlying databases '' into process diagrams .",
    "it is therefore necessary to find a compromise between the included features and the readability of the resulting diagrams .",
    "bpdmn enables the description of the dynamics ( flow and manipulation ) of data , but only up to a plausible level of detail , e.g. , sql queries and updates will not be visible on diagrams , but implicitly represented by bpmn activities like ` submit form ` .",
    "the typical approach used in statechart diagrams , i.e. , representing how the state of an object changes , works only when objects are simple ( like in bpmn ) .",
    "this is _ no longer possible _ if we take into consideration complex data  think of illustrating a database before and after an update ! in addition , although it is possible to simulate the behavior of bpmn diagrams to evaluate their cost and performance , consider that bpmn constructs describe a static view of processes , and not their real - time execution ( e.g. , there is not any concept of _ state _ of the execution ) .",
    "aspects like versioning of documents , which are very important , should not be dealt with in bpmn or bpdmn diagrams , but inside business process ( workflow ) execution systems . moreover , while data is a fundamental aspect of processes , there are specific features of the data that are independent of the peculiar process manipulating it , like consistency and replication .",
    "similarly , access rights are an important feature of the data , but are usually not modeled at the conceptual level  even if we do not exclude their inclusion into future extensions .",
    "we do not deal with methodologies to develop bpdmn ( or bpmn ) diagrams and cost analysis  these are fundamental problems , out of the scope of our contribution and discussed separately in @xcite .",
    "finally , we do not provide a metamodel and a formal semantics for the notation : a standard meta model for bpmn is still under discussion , therefore it can not be defined for our extended notation .",
    "similarly , bpmn is not intended to be directly executable , and its behavior is currently described in the omg specification using mappings to bpel  accordingly , we provide the mappings for our new constructs in section  [ mapping ] .",
    "bpdmn has been defined on the basis of existing requirement analyses . the requirements for a data and process modeling language identified in @xcite regard the _ type _ , the _ sources _ and the _ structure _ of data .",
    "in bpdmn , all the identified relevant data types ( reference , operational , decision and contextual ) can be represented using data objects , that belong to different classes depending on the context in which they are used , e.g. , inside a data - based gateway ( decision ) or inside a sub - process ( operational ) .",
    "we do not provide additional details here , because these aspects are already covered in bpmn . with regard to contextual data",
    ", the authors claim the necessity of representing complex structures , as in xml - based data exchange . also this aspect is covered by our notation .",
    "finally , all the three alternative _ implementation models _ ( as they are called in the paper ) to exchange data inside a diagram can be modeled using bpdmn , as we have illustrated in figure  [ fig : implementation ] .",
    "bpmn has not been defined as a competitor of existing workflow and business process management languages like uml 2.0 activity diagrams , yawl , xpdl and bpel @xcite . on the contrary",
    ", it has been intended as an alternative and complementary language to be used by business analysts without technical knowledge , while uml was designed by and for software engineers , yawl and bpel provided respectively graphical and xml - based notations for executable processes and xpdl was intended as a portable exchange format .",
    "however , it is important to relate the data - specific capabilities of bpdmn to these languages . with regard to yawl and uml activity diagrams",
    ", this can be done using the workflow data patterns as a common criterion of comparison @xcite  the analysis of these languages using the same patterns is reported in @xcite .",
    "the relationship with the aforementioned xml based languages ( bpel and xpdl ) will be discussed later in this section by indicating mappings from bpdmn to them , as it has already been done for bpel in the bpmn specification @xcite .",
    ".comparison of data representation capabilities of ( 1 ) bpmn and ( 2 ) bpdmn , according to the workflow data patterns and some additional requirements taken from @xcite .",
    "+ means supported , + /-",
    "partially supported , - not supported [ cols=\"<,^,^,<,^,^\",options=\"header \" , ]",
    "in this section we present two examples of bpdmn diagrams .",
    "the first concerns an automated process defined using the bpel language .",
    "the second is a real and typical example of a human - performed process , manipulating physical data ( an instruction manual ) but also interacting with a database .",
    "these two examples show how bpdmn can be used for both automated and non - automated processes , present cases where data modeling enhances the communication power of the diagrams , and illustrate how our extensions naturally blend into bpmn constructs , without any significant increase in the visual complexity of diagrams .        in figure",
    "[ fig : example2 ] we have illustrated a bpdmn diagram corresponding to a bpel travel booking process , designed using ibm websphere and previously used to exemplify a translation to bpmn @xcite . at first glance",
    ", we can immediately appreciate the readability of bpdmn diagrams with respect to lower level languages , without losing the ability to represent data  this will be removed in case of acceptance of the paper ] . in this process ,",
    "all data objects are digital documents ( in particular , messages ) , and we have to apply the _ data mapping _ feature of bpdmn to represent how values are passed through the diagram . in particular , expanding the data object originating from the _ message _ start event we may see that it contains many variables ( the ` part ` xml attribute in bpel ) , e.g. , ` cardnumber ` , ` carcompany ` and ` hotelcompany ` . if the credit card information is correct , then three services are invoked to check the hotel reservation , the car reservation and the flight reservation .",
    "each service has its own input format , that can be seen expanding the data mapping before each of them .",
    "for example , the ` check hotel reservation ` task requires a ` name ` attribute as input , and we must indicate that its value corresponds to the value of the ` hotelcompany ` attribute coming from the ` check credit card ` task .",
    "this association is indicated in the data mapping . to further enrich the diagram ,",
    "we have also added the registration of the travel plan into a database , indicated by the ` archive ( db ) ` store , to allow subsequent processes and users to retrieve information about current and past reservations .",
    "figure  [ fig : example1 ] represents part of a real business process regarding the upgrade of a mechanical device , and in particular the substitution of a component @xcite .",
    "this bpdmn diagram shows the definition of an _ engineering change order _ ( eco ) , i.e. , the step in which the details of the upgrade are defined and checked .",
    "the process starts with the reception of a message with a request for an engineering change order . from this request ,",
    "the technical office prepares the data to be inserted into an oracle database , filling in a form whose fields , like ` component i d ` , ` device i d ` , ` replaced component ` , and ` procedure manager ` , can be visualized by expanding the ` form data ` object .",
    "if needed , it is possible to consult a document with instructions on how to fill the form , that can be visualized by expanding the ` filling instructions ` object ( this is in fact a link to a ms word document available on line ) .",
    "then , the i d of the order is sent to the maintenance department , that uses it to get the data from the database and verify it through the ` check eco data ` activity .",
    "if the maintenance department can not process the eco , e.g. , if the new components are not available or do not conform with the specification of the device , then the technical office is notified and the process ends .",
    "otherwise , the eco can be processed .",
    "documents , data , physical objects and several kinds of store are all fundamental aspects to determine the outcome of a business process . in the bpel specification , it is clearly stated that _",
    "business processes include data  dependent behavior .",
    "for example , a supply  chain process depends on data such as the number of line items in an order , the total value of an order , or a deliver  by deadline _ @xcite . therefore ,",
    "in this paper we have identified some relevant constructs of the main existing formalisms to represent these aspects of a business , we have merged them into bpmn , and we have shown how these new visual constructs relate and can be mapped to other business process management languages .",
    "we expect that the results of this effort and the refinements of our model that will be determined by practical applications and further dissemination will be an added value for business process designers , and a first step towards the definition of standard languages and tools to support design methodologies",
    ".    10 object management group : bpmn specification ( 2009 )    white , s.a . , miers , d. : modeling and reference guide .",
    "strategies inc .",
    "( 2008 )    magnani , m. , montesi , d. : bpm + dm = bpdm ( business process modeling + data modeling = business process and data modeling ) . technical report ublcs-2007 - 14 , university of bologna ( www.cs.unibo.it/pub/tr/ublcs/2007/2007-14.pdf ) ( may 2007 )    magnani , m. , montesi , d. : modeling with bpmn and ` chorda ` : a top - down , data - driven methodology and tool ( poster paper ) . in : 11th international conference on enterprise information systems ( iceis ) .",
    "( 2009 )    magnani , m. , montesi , d. : : how much does it cost ? an incremental approach . in : business process management .",
    "( 2007 )    omg : unified modeling language ( uml ) specification .",
    "( 2005 ) iso / iec 196501 .",
    "sadiq , s.w . ,",
    "orlowska , m.e . ,",
    "sadiq , w. , foulger , c. : data flow and validation in workflow modelling . in : fifteenth australasian database conference .",
    "volume  27 of crpit .",
    "( 2004 )    van  der aalst , w.m.p . , ter hofstede , a.h.m .",
    ": yawl : yet another workflow language .",
    "information systems * 30*(4 ) ( 2005 )    workflow management cohalition : process definition interface  xml process definition language ( xpdl ) specification ( 2005 )    oasis : business process execution language for web services ( ws - bpel ) specification .",
    "( 2007 )    russell , n. , ter hofstede , a.h.m . ,",
    "edmond , d. , van  der aalst , w.m.p .",
    ": workflow data patterns . technical report , queensland university of technology ( 2004 )    russell , n. , ter hofstede , a.h.m . ,",
    "edmond , d. , van  der aalst , w.m.p .",
    ": workflow data patterns : identification , representation and tool support . in : er ( 2005 )",
    "russell , n. , van  der aalst , w.m.p . ,",
    "ter hofstede , a.h.m . , wohed , p. : on the suitability of uml 2.0 activity diagrams for business process modelling . in : third asia - pacific conference on conceptual modelling ( apccm ) .",
    "volume  53 .",
    "( 2006 )    wohed , p. , van  der aalst , w.m.p .",
    ", dumas , m. , ter hofstede , a.h.m . , russell , n. : on the suitability of bpmn for business process modelling . in : business process management .",
    "( 2006 )    white , s.a . :",
    "mapping bpmn to bpel .",
    "available at www.bpmn.org ( 2005 )    cl , l. : modellazione di processi aziendali di g.d tramite la notazione bpmn : un caso di studio .",
    "master s thesis , university of bologna ( 2008 )",
    "+ a graphical view of a bpel process about travel booking + ( source : websphere information center )",
    "in this section we show the relationships between bpel , xpdl and bpdmn , as they have been summarized in table  [ tab : comp ] .",
    "bpel mainly concerns the automated execution of processes . with regard to bpdmn ,",
    "stores and objects define which variables are used inside the process , objects indicate where these variables are used , and data mappings dictate how data is passed from one variable to another . in the following",
    "we will use the ` travel booking ` process as an example , and in particular we will show how the data received at the beginning of the process and stored into the ` input ` object traverses the ` check credit card ` activity  then , the same translation can be applied to all subsequent activities .        in the previous bpel fragment ,",
    "` input ` and ` docreditcardcheckingrequest ` are references to wsdl message definitions , defining the parts and types of the variables  we omit the details , that are not specific to bpdmn . at this point ,",
    "a data mapping is used to map parts of the ` input ` variable to the input of the ` check credit card ` activity , represented in the diagram by the ` request ` object .",
    "a data mapping is directly translated into a bpel ` assign ` element , where each expression corresponds to a ` copy ` element .",
    "although we allow complex mappings , looking at bpel it appears that data transformations usually correspond to simple assignments ( as witnessed by the names of the corresponding bpel constructs ) .    ....",
    "< assign name=\"dm1 \" >     < copy >        < from variable=\"input \" part=\"cardnumber\"/ >        < to variable=\"request \" part=\"cardnumber\"/ >     <",
    "/copy >     < copy >        < from variable=\"input \" part=\"cardtype\"/ >        < to variable=\"request \" part=\"cardtype\"/ >     < /copy >",
    "< /assign > ....            in * xpdl * , with regard to stores , each variable can be mapped to a data field ( following the usual rules of scope , so that if a store is defined inside a sub - process those variables will be defined in the corresponding sub - process section of the xpdl file ) .",
    "for example , in the _ eco definition _ process the oracle database contains a ` device ` table with a ` deviceid ` column , that will be mapped to the following code :      similarly , each object has a corresponding ` dataobject ` element , indicating the variables ( data fields ) to which it refers .",
    "the ` eco_data ` object , which is extracted from the database and should thus refer to its data fields , will contain some of the variables defined in the ` oracle db ` store :    .... < dataobject id=\"eco_data \" name=\"eco data \" ... >",
    "< datafields >         < datafield id=\"device.deviceid \" ... / >         < datafield id=\"device.description \" ... / >         ...",
    "< /datafields >",
    "< /dataobject > ....    in addition , objects determine input and output of activities . in the translation to xpdl , differently from bpel , we can represent both the graphical behavior , using ` inputset ` and ` outputset ` elements with the identifiers of the objects , and the execution - related information , using ` actualparameter ` elements to provide input and output to the corresponding application ( which is defined elsewhere in the xpdl file , and not represented here ) .",
    "the following code corresponds to the ` check eco data ` activity , and shows its input ( ` eco_data ` ) and output ( ` checked_data ` ) objects in addition to the data fields processed by the activity :    .... < activity name=\"check eco data \" >     < inputsets><inputset><input artifactid=\"eco_data\"/></></ >     < outputsets><outputset><output artifactid=\"checked_data\"/></></ >     < implementation >        < task><taskapplication ... >           < actualparameters > ...              < actualparameter > eco_data.device.deviceid</ >              ...",
    "< actualparameters >     < /></></",
    "< /activity > ....    data mappings are translated into assignments among variables . in the working example , data mappings were not necessary , therefore to exemplify this case we may assume that the ` check eco data ` activity has been automated , and that its associated web service requires a specific ` input ` object . in this case , we should map the fields of the ` eco_data ` object to the fields of the new ` input ` object , as follows :"
  ],
  "abstract_text": [
    "<S> the design of business processes involves the usage of modeling languages , tools and methodologies . in this paper we highlight and address a relevant limitation of the business process modeling notation ( bpmn ) : its weak data representation capabilities . in particular , we extend it with data - specific constructs derived from existing data modeling notations and adapted to blend gracefully into bpmn diagrams . </S>",
    "<S> the extension has been developed taking existing modeling languages and requirement analyses into account : we characterize our notation using the workflow data patterns and provide mappings to the main xml - based business process languages . </S>"
  ]
}