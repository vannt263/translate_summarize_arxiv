{
  "article_text": [
    "the finite size effect is an important issue in practical quantum key distribution ( qkd ) systems .",
    "the first detailed finite - size analysis for general coherent attacks was given by hayashi @xcite using the normal approximation .",
    "later , scarani and renner @xcite gave a simple analysis based on the quantum de finetti theorem , but their results are valid only against collective attacks .",
    "matsumoto and uyematsu also gave a simple analysis @xcite , but again , essentially valid only for collective attacks .",
    "later , tomamichel et al .",
    "@xcite gave a tighter bound with unconditional security by using the uncertainty relations ( see .",
    ", e.g. , @xcite ) .    in this paper",
    ", we present a concise analysis for the bennett - brassard 1984 ( bb84 ) protocol @xcite that takes the finite key effect into account and yields better key generation rates , with and without relying on the normal approximation . our analysis is valid for general coherent attacks and thus our results guarantee the unconditional security . for the sake of simplicity , we consider the case where the sender , alice , has a perfect single photon source .",
    "we also assume that alice and the receiver , bob , calculate an upper bound on the phase error rate of a sifted key , from that of the corresponding sample bits ; hence the key generation rate can vary each time alice and bob run of the protocol .    throughout the paper we use the security criteria with universal composability ; the same criteria as used by many researcher , particularly by renner and his coworkers @xcite .",
    "hence our final goal is to show that the trace distance between the actual and the ideal states can be bounded from above .",
    "however , in the mathematical analysis for obtaining upper bounds on the trace distance , we do not use renner s approach based on the smooth minimum entropy @xcite .",
    "instead , we bound the trace distance using the argument by shor and preskill @xcite , as well as its modification by hayashi @xcite . in section",
    "[ sec : security_criteria ] , by using these formalisms , we show that the trace distance can be bounded by using the decoding error probability @xmath0 of the virtual phase error correction ; in other words , the universally composable security can be guaranteed by bounding @xmath0 . to the best of our knowledge ,",
    "our argument here is the first rigorous treatment of the universally composable security based on the shor - preskill formalism , applicable to linear universal hash functions with variable final key lengths .    as we shall also discuss at the end of section [ sec : security_criteria ] , in order to achieve high key generation rates and strong bounds on @xmath0 simultaneously , it is crucial to estimate the phase error rate @xmath1 of the sifted key with a high accuracy .",
    "note here that the quantity @xmath1 can not be measured directly in the bb84 protocol .",
    "hence in section [ sec : upper_confidence_limit ] , we solve an interval estimation problem on @xmath1 using the hypergeometric distribution @xmath2 .",
    "then by using the obtained result , we give explicit bounds on @xmath0 in section [ sec : upper_decoding_error_probability ] .",
    "in particular , in order to clarify the argument , we present two versions of analysis : we first derive a simple bound that we call the _ straightforward bounds _ ( propositions 1 and 2 ) ; and then next give a more complicated bound called the _ gaussian bounds _ ( theorems 2 and 3 ) , which yield a better final key rate if the raw key is sufficiently large . for the both types of bounds , we first present a simple analysis based on the normal approximation of the hypergeometric function ( proposition 1 and theorem 2 ) , and then next show that a similarly tight bound can also be obtained by a rigorous argument without relying on any approximation ( proposition 2 and theorem [ thm : exact_upperbound ] ) .",
    "since this paper is not aimed only at theorists , but also at experimentalists who wish to evaluate the security of their qkd systems , we include explicit procedures of security evaluation .",
    "we begin in section [ sec : protocol_description ] by explaining explicit procedures of our key distillation .",
    "then after theoretical arguments of the security , we demonstrate in section [ sec : how_to_use ] how to use our theorems to calculate the secret key rate and the security parameter ( i.e. , an upper bound on the trace distance ) from a given set of experimental parameters . besides the exact values of key rates and security parameters , we also present how to obtain their rough estimates using the normal approximation .    in order to show that our rates are indeed better than in existing literatures , e.g. , refs .",
    "@xcite , we draw in section [ sec : numerical_results ] example curves of key generation rates ( figs . 1 and 2 ) .",
    "there are several reasons for this improvement .",
    "first , our upper bounds are close to the approximated value of the hypergeometric distribution obtained by the normal approximation , while the existing results @xcite did not discuss the closeness to the normal approximation .",
    "second , in our method , the adversary s information is estimated in terms of the shannon entropy , whereas in @xcite they use the minimum entropy , which is a lower bound on the shannon entropy .",
    "finally , we use an error margin that depends on the measured error rates of sample bits , while in refs .",
    "@xcite the margin is a constant .",
    "we also treat the sacrifice bit length with the second order coding rate , which draws the attention from information theory community @xcite .",
    "the conventional asymptotic theory treats the coding length with the first order coefficient .",
    "it is impossible to treat the approximation value of the best error probability with the first order coefficient of the coding length .",
    "however , it becomes possible if we consider the coding length up to the second order coefficient . in this paper",
    ", we derive an asymptotic approximation value of the upper bound of the universally composable security criterion when the sacrifice bit length is given as the form @xmath3 with the measured phase error rate , where a function @xmath4 of @xmath5 will be given with a concrete form in section [ sec : upper_confidence_limit ] ( theorem [ thm : gauss_asymptotic ] ) .",
    "the differences from our previous papers are as follows . in refs .",
    "@xcite , hayashi simply approximated the hypergeometric distribution by the normal distribution having the same variance , without showing its validity .",
    "in this paper , we present a rigorous analysis without relying on any approximation ( proposition 2 and theorem [ thm : exact_upperbound ] ) , by using upper bounds on the hypergeometric distribution obtained from the stirling s formula and inequalities proved in ref . @xcite .",
    "as mentioned above , we also included the first rigorous treatment of the universally composable security based on the shor - preskill formalism , applicable to linear universal hash functions with variable final key lengths .",
    "we consider the following type of the bb84 protocol .",
    "this protocol differs from existing versions ( e.g. , @xcite ) only in the phase estimation and the privacy amplification steps .",
    "[ [ generation - of - a - sifted - key - and - sample - bits ] ] generation of a sifted key and sample bits + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    alice and bob start the protocol with a quantum communication and obtain a sifted key of @xmath6 bits and sample bits of @xmath7 bits . here",
    "we assume that raw key bits are chosen from the uniform distribution .",
    "the sample bits must be selected randomly , and a sifted key and the sample bits must be measured in different bases .",
    "for example , suppose that alice and bob exchange @xmath8 qubits , choosing the @xmath9 basis with probability @xmath10 , and the @xmath11 basis with @xmath12 .",
    "then , on average , @xmath13 bits coincide in the @xmath9 basis , and @xmath14 in the @xmath11 basis . by assinging the @xmath9 basis for a sifted key , and the @xmath11 basis for sample bits",
    ", they have @xmath15 , @xmath16 .    [ [ bit - error - correction ] ]",
    "bit error correction + + + + + + + + + + + + + + + + + + + +    bob corrects bit errors in his sifted key using a linear error correcting code .",
    "for example , as in shor - preskill s case @xcite , alice may announce a random bit string xored with her sifted key ; or alternatively , as in koashi s case @xcite , she may send a syndrome of her sifted key encrypted with a previously shared secret key . in either case ,",
    "alice and bob end up with @xmath17 bits of reconciled key @xmath18 , with the bit error rate @xmath19 of a sifted key . here",
    "@xmath20 is the binary entropy function defined as @xmath21 , and value @xmath22 corresponds to the efficiency of the error correcting code used . for practical codes , @xmath23 .",
    "it should be noted that here the sizes of bit error correcting codes are independent of the security , and thus alice and bob may perform bit error correction by dividing a sifted key @xmath24 of @xmath6 bits to arbitrarily smaller blocks .    in many cases",
    ", one needs to guarantee the correctness of the shared keys , that is , one has to minimize the probability @xmath25 that alice s and bob s secret keys do not match and the protocol does not abort .",
    "one way for minimizing @xmath25 is that alice calculates an @xmath26-bit hash value of her reconciled key @xmath18 using universal@xmath27 hash functions .",
    "then she encrypts it with the one - time pad using a previously shared secret key , and sends it to bob .",
    "bob also calculates his own hash value , and if it does not match alice s , they abort the protocol . by doing this , we have @xmath28 .    [ [ estimation - of - the - number - of - phase - errors - in - the - channel ] ] estimation of the number of phase errors in the channel + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in order to use privacy amplification properly and guarantee the security of a secret key , alice and bob need to know an upper bound on the number of phase errors occurring in the channel . it should be noted here that the phase error is a completely different concept from the bit error mentioned above ( for details , see section [ sec : security_criteria ] ) .",
    "since the phase error rate can not be measured directly in practical qkd systems , we estimate its upper bound from the measured error rate of samples .",
    "we denote the number of bit errors occurring in a sample bits by @xmath29 , and the corresponding bit error rate by @xmath30 .",
    "we also call the union of a sifted key and the sample bits _ total bits _ , and denote the number of their bit errors by @xmath31 . hence the error rate of total bits is given by @xmath32 , and that of a sifted key by @xmath33 .",
    "note here that measuring @xmath29 corresponds to randomly sampling phase errors in the total bits , because a sifted key and the samples are measured in different bases . due to this fact",
    ", the measured value of @xmath34 is used to estimate an upper bound on @xmath35 . in the asymptotic limit @xmath36",
    ", alice and bob may assume @xmath37 .",
    "in practical qkd systems , however , the two values differ in general due to statistical fluctuations .",
    "thus they obtain a statistically estimated upper bound of @xmath35 as a function of the measured value @xmath29 , which we denote by @xmath38 . throughout the paper ,",
    "we make it a rule to denote an estimated upper bound of a random variable @xmath39 by @xmath40 .",
    "the explicit functional form of @xmath41 is discussed later , and is given in eq .",
    "( [ eq : def_hat_p_sft ] ) .    [ [ privacy - amplification - pa ] ] privacy amplification ( pa ) + + + + + + + + + + + + + + + + + + + + + + + + + +    the estimated phase error rate @xmath38 can be used to obtain an upper bound the amount of information that is leaked to eve . in order to cancel eve s information , alice and bob",
    "perform a classical data processing called privacy amplification on the reconciled key @xmath18 to generate the secret key @xmath42 ; very roughly speaking , pa randomizes and shrinks @xmath18 so that eve s information is canceled by the remaining fraction that is unknown to eve .",
    "the number of bits to be reduced in this process ( sacrifice bits ) is determined from @xmath38 in the following manner .",
    "we set two limits @xmath43 and @xmath44 ( @xmath45 on the sample bit error @xmath29 , depending on which alice and bob change their procedures .",
    "* if @xmath46 , alice and bob abort the protocol .",
    "* if @xmath47 , alice and bob generate a secret key as the hash value of their sifted key by using a linear and surjective universal@xmath27 hash functions .",
    "the number @xmath48 of sacrifice bits , i.e. , the number of bits reduced in pa , is given by @xmath49 here @xmath50 denotes the smallest integer larger than or equal to @xmath9 .",
    "hence , as a result , they obtain a secret key @xmath42 of @xmath51-\\lceil nh\\left(\\hat{p}_{{\\rm sft},\\varepsilon}(c+2)\\right)\\rceil - d$ ] bits . of ( [ eq : def_g_c ] )",
    "differs from the asymptotic case ( @xmath52 ) essentially only in the definition of phase error rate @xmath53 .",
    "hence the estimation of @xmath53 is the key point of our finite size analysis . ] * if @xmath54 , alice and bob generate a secret key in the same way as above , except that they sacrifice @xmath55 bits for pa . as a result",
    ", they obtain a secret key @xmath42 of @xmath51-\\lceil nh\\left(\\hat{p}_{{\\rm sft},\\varepsilon}(c_{\\min}+2)\\right)\\rceil - d$ ] bits .",
    "alternatively , we can combine these three case as follows : define the sacrificed bit length @xmath48 to be @xmath56 + 2\\right)\\right)\\rceil+d .",
    "\\label{eq : def_alpha_1}\\ ] ] if @xmath57 , alice and bob sacrifice @xmath48 bits for pa and obtain the final key of length @xmath58-\\alpha(c ) .",
    "\\label{eq : def_g_c}\\ ] ] if @xmath59 , they abort the protocol .    in practice ,",
    "the most efficient implementation of pa is to use the toeplitz matrices : alice and bob select a bit - valued toeplitz matrix @xmath60 randomly by communicating over the public channel , multiply it with a reconciled key @xmath18 modulo 2 , and obtain the secret key @xmath61 ( for details , see .",
    ", e.g. , @xcite ) .    in this paper",
    ", we additionally require the surjectivity for all of hash functions . to the best of our knowledge ,",
    "the most efficient implementation of linear and surjective universal@xmath27 functions is by using the modified toeplitz matrix , introduced in @xcite ; in this case we replace @xmath60 above by a concatenation @xmath62 of the ( square ) identity matrix @xmath63 and a toeplitz matrix @xmath64 . note that this modification @xmath65 is slightly more efficient than @xmath60 above . also note that unlike @xmath65 , the normal toeplitz matrix @xmath60 gives a non - surjective map with a very small but nonzero probability ; e.g. , for @xmath60 being an all - zero or all - one matrix .",
    "it should be noted here that , unlike in bit error correction , one is not allowed to perform pa by dividing @xmath18 and @xmath42 into smaller blocks , because doing so will destroy the universal@xmath27 property of the ( modified ) toeplitz matrix . also note here that the both key lengths , @xmath66 $ ] and @xmath67 , are of order @xmath68 . if one applies a naive multiplication algorithm , the computational complexity ( i.e. , the processing time ) increases as @xmath69 ( i.e. , @xmath68 per key ) , and thus becomes a severe bottle neck of the key distillation .",
    "this is in fact the most explicit impact of the finite size effect on practical qkd systems .",
    "one way around this problem is to use an efficient multiplication algorithm for a toeplitz matrix and a vector exploiting the fast fourier transform ( fft ) algorithm ( see , e.g. , @xcite ) .",
    "the complexity of this efficient algorithm scales as @xmath70 , or @xmath71 per bit , which can be regarded as a constant in practice .",
    "an actual implementation shows that the throughput exceeds 1mbps for @xmath72 on software , as demonstrated , e.g. , in ref .",
    "@xcite .",
    "number of bits & @xmath73 & @xmath6 & @xmath7 + number of errors & @xmath31 & @xmath74 & @xmath29 + error rate & @xmath75 & @xmath76 & @xmath77 +    .notations of the key lengths , total bits , and sample bits .",
    "functions @xmath78 and @xmath41 denote the estimated upper bounds of @xmath79 and @xmath35 , under the condition that there are @xmath29 errors in sample bits .",
    "parameter @xmath80 denotes the probability that the estimation fails .",
    "see section [ sec : upper_confidence_limit ] for details . [",
    "cols=\"^ \" , ]     & @xmath78 & @xmath41 & +",
    "we employ the definition of the security of qkd with universal composability in the variable length case @xcite . in order to guarantee the security for our protocol ,",
    "we need to evaluate the security criteria with universal composability after the privacy amplification @xcite . in this paper",
    ", we apply the above definition with the variable length case to the final state after the privacy amplification @xcite .    for this purpose",
    ", we describe all public information by @xmath9 , including the choice of a hash function ( which corresponds , e.g. , to  @xmath22 \" of @xcite ) , and the length of the final key ( e.g. ,  @xmath81 \" of @xcite ) .",
    "however , here we do not restrict ourselves with those two cases ; it may contain other public information , e.g. , the choice of a code for bit error correction .",
    "hence the length @xmath81 of the final key is of course a function of @xmath9 .",
    "we denote the probabilistic distribution of @xmath9 in the actual protocol by @xmath82 .",
    "then we consider the hilbert space @xmath83 , consisting of alice s final key @xmath84 , eve s system @xmath85 , and the public information @xmath86 .",
    "we define @xmath87 with @xmath60 sufficiently large ; so that when @xmath88 , alice uses the ( preassigned ) subspace of @xmath84 .",
    "also , following @xcite , we define the composite system of @xmath89 and @xmath90 to be @xmath91 , i.e. , @xmath92 .",
    "we denote by @xmath93 the state of alice and eve after privacy amplification , conditioned on public information @xmath9 .",
    "hence , the state after privacy amplification takes the form @xmath94 .    in this notation , we consider conditional probabilities with respect to length @xmath81 of the final key .",
    "the actual protocol generates the final key of @xmath81 bits with probability @xmath95 .",
    "the public information @xmath9 obeys the conditional distribution @xmath96 ; hence the conditional actual state given @xmath81 is a density matrix @xmath97 .",
    "the corresponding ideal state given @xmath81 is defined to be @xmath98 , where @xmath99 is the completely mixed state in the @xmath81-qubit subsystem of @xmath100 , and @xmath101 .",
    "thus , under the condition that the final key length is @xmath81 , the universal compsable security can be guaranteed by bounding the trace distance of these two states , i.e. , @xmath102 @xcite .",
    "parameter @xmath81 is a random variable in our protocol ; hence following @xcite , we define the universally composable security by bounding the average trace distance @xmath103 . in this case , it is convenient to define @xmath104 .",
    "then the average trace distance can be rewritten as @xmath105 where @xmath106 .",
    "hence one may instead bound the sum of the second and the third lines .",
    "here we used the fact that @xmath107 for the first equality ; and @xmath108 for the second equality .",
    "the quantity of ( [ eq : bound_ideal_alices_partial ] ) measures the non - uniformity of alice s final key ; i.e. , it gives the averaged distance between alice s partial state @xmath109 and the ideally mixed state @xmath110 .",
    "note that these two states equal when alice and bob choose a surjective hash function , because we assume that alice s raw key obeys the uniform distribution .",
    "in particular , if alice and bob use a hash function family which consists only of surjective functions ( such as the modified toeplitz matirices @xcite mentioned in the previous section ) , it suffices to bound ( [ eq : bound_ideal_real ] ) only .",
    "we believe that the above definition of security based on the trace distance is the same as the one used by renner and others @xcite . throughout the paper",
    "we employ this definition of security . however ,",
    "in the remaining part where we actually obtain upper bounds on the trace distance , we do not use renner s approach based on the smooth minimum entropy @xcite .",
    "instead , we bound the trace distance @xmath111 appearing in ( [ eq : bound_ideal_real ] ) using the well - known argument by shor and preskill @xcite , as well as its modification by hayashi @xcite .",
    "as we shall see shortly , in these formalisms , the trace distance is bounded from above by using the decoding error probability of the ( virtual ) phase error correction , which can be identified with the privacy amplification in the actual protocol .",
    "the first step of the proof is to consider a virtual protocol where alice and bob correct bit errors as well as phase errors occurring in the quantum channel ( under eve s influence ) by using the calderbank - shor - steane ( css ) code . by correcting these two types of errors , alice and bob",
    "can guarantee that their virtual channel ( obtained as a result of quantum error correction ) is noiseless and decoupled from eve ; thus the key they exchange there is unconditionally secure .",
    "the second step of the proof is to note that , from eve s view point , this virtual protocol is completely indistinguishable from the actual protocol . by using this indistinguishability",
    ", the security of the actual protocol follows automatically from that of the virtual protocol .    in these formalisms , phase error correction in the virtual protocol",
    "is transformed to a simple classical data processing in the actual protocol .",
    "that is , alice and bob do not need to perform phase error correction in the actual protocol ; instead it suffices to perform a projection @xmath112 , where @xmath113 , @xmath114 are the classical css code .",
    "the projection @xmath112 is often called privacy amplification ( pa ) . this is why we often identify pa with the virtual phase error correction in this paper .",
    "@xcite , we have shown that the projection @xmath112 can be replaced by an @xmath80-almost dual universal@xmath27 hash function family . )    the original argument of shor and preskill was later improved in refs .",
    "@xcite , where it was shown that the virtual phase error correction and the bit error correction can be discussed separately .",
    "in fact the virtual phase error correction is essential for guaranteeing security , while the bit error correction is necessary only for equalizing alice s and bob s final keys . as a result of this observation",
    ", the trace distance @xmath115 of ( [ eq : bound_ideal_real ] ) can be bounded as @xcite @xmath116 where @xmath117 denotes the conditional decoding error probability of the virtual phase error correction , given public information @xmath9 . by taking the average of ( [ eq : averaged_distance_concave_condition_x ] ) with respect to @xmath9 , and by noting that the function @xmath118 is concave , we have @xmath119 where @xmath0 denotes the decoding error probability of the virtual phase error correction .    as to the non - uniformity of the final key given in ( [ eq : bound_ideal_alices_partial ] ) , recall that we assumed that alice s random variable obeys the uniform distribution .",
    "then the left over hash lemma @xcite yields @xmath120 where @xmath121 is the number of sacrifice bits in the privacy amplification .    hence by combining ( [ eq : def_uniersal_composability])@xmath122([eq : bound_ideal_alices_partial ] ) , ( [ eq : averaged_distance_concave ] ) , and ( [ eq : bound_ideal_parital_hash_lemma ] ) we obtain @xmath123 in other words , in order to guarantee the security with universal composability , it suffices to bound the quantity on the right hand side of ( [ eq : trace_distance_less_than_pph_and_exp_alpha ] ) . in particular , as we have noted below ( [ eq : bound_ideal_alices_partial ] ) , the second term on the right hand side of ( [ eq : trace_distance_less_than_pph_and_exp_alpha ] ) is exactly zero when all of the hash functions are surjective ; in this case the above inequality is replaced by @xmath124 hence , in order to guarantee the universally composable security , it suffices to bound @xmath0 .      in this subsection",
    "we show that , in order to bound the decoding error probability @xmath0 of the virtual phase error correction , it is sufficient to bound @xmath125 for all @xmath31 , where @xmath125 denotes the corresponding conditional probability given @xmath31 . we also show that a bound on @xmath125 can be given in a concise form using the hypergeometric distribution @xmath126 and binary entropies .    first note that , without loss of generality , eve s eavesdropping strategy can be described by the probability distribution @xmath127 of @xmath31 , which is the number of errors in the total bits @xmath73 .",
    "in order to treat such a case , we introduce the distribution @xmath127 here . ] .",
    "then @xmath0 can be rewritten as @xmath128 , where @xmath125 denotes the conditional decoding error probability given @xmath31 .",
    "next we consider the conditional probability @xmath126 of @xmath29 given @xmath31 ; i.e. , the probability that @xmath29 bits of errors are found in sample bits when there are @xmath31 errors in the total bits .",
    "since sample bits are sampled without replacement , @xmath29 obeys the hypergeometric distribution for a fixed value of @xmath31 : @xmath129 with the average @xmath130 and the deviation @xmath131 given by @xmath132 in the following , @xmath133 is simplified to @xmath134 .",
    "hence values of @xmath135 occurs with probability @xmath136 .",
    "( here sample bits are sampled without replacement simply because one can not measure both the phase and the bit values of a qubit simultaneously , and thus alice and bob can not reuse the sample bits as a sifted key .",
    "if one could somehow sample them with replacements , the hypergeometric distribution here would of course be replaced by the binomial distribution , which is much simpler . )",
    "finally we consider the conditional decoding error probability @xmath137 for fixed values of @xmath31 and @xmath29 . in this case , the number of phase error patterns of total bits is bounded from above by @xmath138 ( see , e.g. , lemma 4.2.2 , ref .",
    "@xcite ) . due to the construction of the procotocl ,",
    "the number of the sacrificed bits @xmath48 is fixed . as we have shown in ref .",
    "@xcite , if alice and bob use a linear universal@xmath27 hash function family for pa in the actual protocol , it can be considered as the situation in the virtual protocol where they use a 2-almost universal@xmath27 linear code family for phase error correction ( i.e. , a linear 2-almost universal@xmath27 hash function family is used as the syndrome function for correcting phase errors ) .",
    "then the decoding error probability @xmath137 of the virtual phase error correction can be bounded as @xmath139 ^ -}=2^{\\left[g(k , c)\\right]^-+1 } , \\label{eq : upper_bound_s_pa}\\\\ g(k , c):&=&nh\\left((k - c)/n\\right)-\\alpha(c)\\nonumber\\\\ & = & nh\\left((k - c)/n\\right)-nh\\left(\\hat{p}_{\\rm sft}(c+2)\\right)-d \\label{eq : def_g_k_c } \\\\ & = & nh\\left(p_{\\rm sfc}(k , c)\\right)-nh\\left(\\hat{p}_{\\rm sft}(c+2)\\right)-d,\\nonumber\\end{aligned}\\ ] ] where @xmath140 ^ -:=\\min(x,0)$ ] .",
    "it is easy to see that inequality ( [ eq : upper_bound_s_pa ] ) holds when the completely random matrices ( a type of universal@xmath27 hash functions ) are used for pa , as in koashi s case @xcite .",
    "it is also shown to hold when the toeplitz matrices ( another universal@xmath27 hash function family ) are used for pa , by using the fact that dual matrices of the toeplitz matrices generate universal@xmath27 hash functions @xcite . more generally , in ref .",
    "@xcite , we have further shown that inequality ( [ eq : upper_bound_s_pa ] ) is valid when an arbitrary family of universal@xmath27 functions is used for pa .",
    "hence , to summarize , under eve s strategy @xmath127 , error numbers @xmath135 are distributed by @xmath136 . for fixed values of @xmath135 ,",
    "the virtual phase error correction fails with a probability less than @xmath141 given in ( [ eq : upper_bound_s_pa ] ) . combining these probabilities",
    ", we see that the decoding error probability @xmath0 of the virtual phase correction can be bounded as @xmath142 where @xmath143 is defined by @xmath144 since eve s strategy @xmath127 can be arbitrary , @xmath0 can be bounded if and only if @xmath145 is bounded .",
    "hence in what follows , we will concentrate on obtaining upper bounds on @xmath145 .",
    "as one can see from the definition of @xmath141 in ( [ eq : upper_bound_s_pa ] ) , ( [ eq : def_g_k_c ] ) , a straightforward way of minimizing @xmath145 is to define the function @xmath38 so that it always gives a large value ; this corresponds to the situation where , looking at @xmath29 , alice and bob always give a pessimistic estimate @xmath38 that is much larger than the actual value @xmath35 .",
    "however , as one can see from the definition of @xmath48 in ( [ eq : def_alpha_1 ] ) and the final key length @xmath146 given in the previous section , a large @xmath38 results in a poor key generation rate .",
    "rather , in order to achieve high key generation rates and the high - level security simultaneously , one needs to minimize @xmath145 by considering the contributions of the two factors , @xmath147 and @xmath141 .",
    "hence we define @xmath38 so that it becomes as close as possible ( and larger ) to the actual value @xmath35 , in the regions of @xmath135 where @xmath126 is not negligible .",
    "this is equivalent to the estimation problem of an upper bound of @xmath35 :    1 .   for a given @xmath29",
    ", we give a suitable choice of the estimated value @xmath38 for the phase error rate of a sifted key .",
    "alice and bob use this value to calculate the value of @xmath48 of ( [ eq : def_alpha_1 ] ) , and obtain the final key length @xmath146 .",
    "this will be done in section [ sec : upper_confidence_limit ] .",
    "2 .   with the suitable choice of @xmath38",
    ", we obtain a universal upper bound on the rhs of ( [ eq : s_av_bound_1 ] ) that is independent of @xmath31 , and thus an upper bound of @xmath0 without the summation .",
    "this corresponds to the probability that a certain set of values @xmath31 and @xmath29 occur _ and then _ the virtual phase error correction by alice and bob fails . ] .",
    "this will be done in section [ sec : upper_decoding_error_probability ] .",
    "now let us turn to the definition of @xmath38 . as mentioned above",
    ", since length @xmath7 of sample bits is finite in practical qkd systems , the phase error rate of a sifted key @xmath35 deviates from that of sample bits , @xmath34 , due to statistical fluctuations .",
    "hence , in order to guarantee the security by privacy amplification , instead of @xmath34 , one needs to use the estimated upper bound @xmath38 of @xmath35 , defined with the statistical effect taken into account .    as long as @xmath35 is estimated larger than the actual value , i.e. , @xmath148",
    ", there is no loss of security , because then , more information is erased by the privacy amplification than is actually leaked to eve . on the other hand",
    ", however , one needs to avoid a situation where @xmath35 is estimated smaller as @xmath149 .",
    "in such a case , the privacy amplification of the previous section does not work since @xmath150 ^ -=0 $ ] .",
    "hence , at least as a necessary condition , the function @xmath151 needs to satisfy that @xmath152 where @xmath153 denotes the probability that @xmath29 occurs satisfying a condition @xmath154 , under the hypergeometric distribution @xmath126 . in order to maximize the key generation rate for fixed values of @xmath155",
    ", we wish to minimize @xmath38 as small as possible . in statistics",
    ", this corresponds to an interval estimation problem .",
    "that is , finding @xmath38 satisfying ( [ eq : estimation_necessary_condition ] ) is to obtain an upper confidence limit on @xmath35 from an observed value of @xmath29 , with significance level @xmath80 ( see , e.g. , @xcite ) .    in the following ,",
    "we derive the minimum estimate @xmath156 satisfying the condition ( [ eq : estimation_necessary_condition ] ) under the normal approximation of @xmath126 by employing interval estimation of @xmath31 .",
    "although there is a standard procedure found in every textbook for this analysis ( e.g. , @xcite ) , we reproduce it below for the sake of explanation .",
    "first we define the normal distribution function by @xmath157 and @xmath158 as the deviation corresponding to @xmath80 , e.g. , @xmath159 such that @xmath160 . in what follows ,",
    "we often abbreviate @xmath158 to @xmath161 .",
    "then , by applying the normal approximation to @xmath126 , we have the relation @xmath162 for any integer @xmath31 ; that is , @xmath163 holds at least with probability @xmath164 for any integer @xmath31 . note that this condition is equivalent to @xmath165 or @xmath166 .",
    "we rewrite this condition further as @xmath167 where @xmath168 , @xmath169 , and @xmath170    the condition ( [ eq : p_hat_quadratic_eq ] ) is equivalent to @xmath171 , where @xmath78 is a solution of @xmath172 given by @xmath173 that is , @xmath174 holds at least with probability @xmath164 for any integer @xmath31 . in other words ,",
    "the rate @xmath175 gives the upper bound of one - sided interval estimation of @xmath168 . using this estimate",
    ", we define another function @xmath176 then , again , the inequality @xmath177 holds at least with probability @xmath164 for any integer @xmath31 . as a result , by choosing @xmath38 as @xmath41 , we can satisfy the condition ( [ eq : estimation_necessary_condition ] ) . throughout the paper",
    ", we will use these definitions of @xmath78 and @xmath41 in calculating @xmath48 .",
    "now two remarks are in order .",
    "first , if there are sufficiently many samples ( i.e. , with @xmath7 large and thus @xmath178 sufficiently small ) , the error number @xmath29 has roughly the same distribution , irrespective of whether the samples are picked up with or without replacement .",
    "in such a case , as we mentioned under eq .",
    "( [ eq : def_barc_sigma ] ) , the hypergeometric distribution @xmath126 can be approximated by the binomial distribution .",
    "indeed , to the first order of @xmath179 , the estimated value @xmath78 of eq .",
    "( [ eq : def_hat_p ] ) can be approximated as @xmath180 where @xmath181 denotes the deviation of the binomial distribution with the error rate of the sample bits being @xmath169 .",
    "furthermore , by using the inequality @xmath182 , and by noting that the larger @xmath78 always gives better a security bound , we can instead use a simpler approximation given by @xmath183 the approximated upper bound of ( [ eq : approx_hat_p ] ) can also be obtained by an argument similar to the above , with the hypergeometric distribution replaced by the binomial distribution .",
    "this means that , for @xmath7 sufficiently large , one can conclude that the phase error rate @xmath184 of the total bits can be bounded from above by @xmath78 of ( [ eq : approx_hat_p ] ) , which is simply the measured error rate @xmath34 of the samples , plus @xmath161 times its standard deviation @xmath185 .",
    "the actual value deviates this bound only with a probability less than @xmath186 ; or in other words , this estimation fails only with a probability less than @xmath186 .",
    "throughout the paper , we assume that alice and bob perform the protocol specified in section [ sec : protocol_description ] , using the estimated upper bound @xmath41 of ( [ eq : def_hat_p ] ) and ( [ eq : def_hat_p_sft ] ) , obtained in the previous section .",
    "that is , we here substitute @xmath41 for @xmath188 in ( [ eq : def_alpha_1 ] ) , and as a result of that , alice and bob use sacrifice bits of @xmath189)\\right)+d$ ] in the pa step . in this setting , we evaluate the decoding error probability evaluate @xmath0 and obtain several upper bounds .      in section [ sec :",
    "upper_bound_pph_each_k ] , we showed that , in order to bound @xmath0 , it suffices to bound @xmath143 of ( [ eq : s_av_bound_1 ] ) for all values of @xmath31 . in this subsection , we first present a simple evaluation of @xmath0 , where we divide the summation @xmath143 , given in ( [ eq : s_av_bound_1 ] ) , into two regions of @xmath29 .",
    "this method is similar to those used in preceding literature @xcite , and we call it here the _ straightforward method_.    for each value of @xmath31 , we set the boundary value @xmath190 , and divide the summation of ( [ eq : s_av_bound_1 ] ) as @xmath191}s_{\\rm pa}(k , c ) .",
    "\\label{eq : straightforward_division_two_regions}\\end{aligned}\\ ] ] ( in what follows , we often write @xmath130 , @xmath131 , @xmath161 instead of @xmath192 , @xmath193 , @xmath158 . ) then , by using the properties of @xmath41 given in the preceding section , the two terms of ( [ eq : straightforward_division_two_regions ] ) can be evaluated as follows :    1 .",
    "the first summation of ( [ eq : straightforward_division_two_regions ] ) is the probability @xmath194 .",
    "as we have shown in the preceding section , this term is less than @xmath80 ( see ( [ eq : condition_pr_k_approx ] ) ) , if one applies the normal approximation to @xmath126 . to put it more explicitly ,",
    "apply the normal approximation of the form : @xmath195 with @xmath196 .",
    "then it follows that the first term of ( [ eq : straightforward_division_two_regions ] ) is less than @xmath197 , where @xmath186 is the normal distribution function given in ( [ eq : def_normal_distribution_function ] ) .",
    "2 .   in the second term of ( [ eq : straightforward_division_two_regions ] ) ,",
    "the function @xmath198 ^ -+1}$ ] is maximized at @xmath199 , because @xmath200 , defined in ( [ eq : def_g_k_c ] ) , is decreasing with @xmath29 .",
    "also note that @xmath201 holds by the definition of @xmath41 , given in ( [ eq : def_hat_p ] ) and ( [ eq : def_hat_p_sft ] ) .",
    ": as mentioned in sentences below ( [ eq : p_ph_upper_bound_by_delta ] ) , the function @xmath78 is defined so that the condition @xmath202 is satisfied for all @xmath31 .",
    "this condition is equivalent to @xmath203 , due to definitions of @xmath41 and @xmath35 given in ( [ eq : def_hat_p_sft ] ) and in table [ table : notations ] . ]",
    "thus from ( [ eq : def_g_k_c ] ) , we have @xmath204 for the inequality of the second line , we used the fact that @xmath189 + 2)\\right)\\ge h\\left(\\hat{p}_{{\\rm sft},\\varepsilon}(c)\\right)$ ] .",
    "this means that the second summation of ( [ eq : straightforward_division_two_regions ] ) can be bounded by @xmath205 .",
    "we remark that , unlike the first term of ( [ eq : straightforward_division_two_regions ] ) , this upper bound is valid without relying on the normal approximation .",
    "note here that the both bounds are valid for all values of @xmath31 .",
    "hence by combining these two upper bounds , we obtain the following proposition .",
    "[ thm : st_upperbound ] for a given @xmath80 ( and the corresponding @xmath206 ) , suppose that @xmath207 , and that alice and bob perform the qkd protocol specified in section [ sec : protocol_description ] .",
    "then by applying the normal approximation to @xmath126 , @xmath0 can be bounded as @xmath208    if one wishes to bound @xmath0 by a certain value , say @xmath209 , a convenient choice of parameters is @xmath210 , or equivalently , @xmath211 and @xmath212 . and @xmath213 , and then find the optimal @xmath214 that yields the largest key generation rate .",
    "however , we do not pursue this optimality in the rest of the paper , since varying @xmath215 contributes very little to the key rate in typical situations .",
    "] then inequality ( [ eq : trace_distance_less_than_pph ] ) guarantees that the trace distance is bounded as @xmath216 , if alice and bob use a universal@xmath27 hash function family that consists of linear and surjective functions .",
    "further , if parameters @xmath7 and @xmath6 are sufficiently large , we can also obtain a tight bound on the first term of ( [ eq : straightforward_division_two_regions ] ) _ without _ relying on the normal approximation of @xmath126 .",
    "[ lmm : upperbound_simple_bound ] if @xmath217 , @xmath218 , and @xmath219 , we have @xmath220 where @xmath221 .",
    "note that this bound holds rigorously , without relying on the normal approximation of @xmath126 .",
    "this lemma will be proved in [ proof_lemma_simple_bound ] .",
    "now recall that the upper bound @xmath205 , obtained above for the second term of ( [ eq : straightforward_division_two_regions ] ) , does not rely on any approximation either .",
    "hence , besides proposition 1 , we can obtain another bound on @xmath0 that is similarly tight , and is valid rigorously _ without _ relying on any approximation :    [ thm : exact - st_upperbound ] suppose that @xmath217 , and @xmath219 are satisfied for a given @xmath80 ( i.e. , with @xmath222 ) .",
    "also assume that alice and bob perform the qkd protocol specified in section [ sec : protocol_description ] .",
    "then without using the normal approximation of @xmath126 , we have @xmath223      in the above analysis of the straightforward bounds , if one wishes to bound @xmath0 by a certain value , say @xmath209 , it is necessary to let @xmath224 .",
    "hence , if one choose a very small @xmath209 in order to achieve a high level security , this @xmath225 can decrease the final key length severely through the sacrificed bit length ( [ eq : def_alpha_1 ] ) .    in this subsection , we derive improved bounds that holds with @xmath226 .",
    "we call them here the _ gaussian bounds _ for the following reason . the first step of the analysis is similar to that of the previous section ; i.e. , we divide the summation of @xmath143 as in ( [ eq : straightforward_division_two_regions2 ] ) and obtain upper bounds for each term .",
    "for the first term of ( [ eq : straightforward_division_two_regions2 ] ) , we use the normal approximation ( [ eq : def_normal_approx_hypergeo ] ) again and bound it by @xmath80 .",
    "however , for the second term of ( [ eq : straightforward_division_two_regions2 ] ) , we employ a quite different strategy : we approximate @xmath147 by using ( [ eq : def_normal_approx_hypergeo ] ) , and also upper bound @xmath141 by an exponential function of a simple linear function of @xmath29 ( specified below in ( [ eq : inequality_upper_bound_s_pa_by_beta ] ) ) . by using this simple form",
    ", we evaluate the summation over @xmath29 as a gaussian integral . as a result of this integration , instead of @xmath205 appearing in the previous subsection",
    ", we obtain an upper bound @xmath227 on the second term , with @xmath228 being small for large @xmath155 .    in order for this strategy using the gaussian integration to work properly",
    ", parameter @xmath31 must be confined to a specific region .",
    "thus as a preparation , we consider the following three cases depending on the value of @xmath31 :    1 .",
    "if @xmath31 is too small ( i.e. , @xmath229 ) , it can be shown that @xmath141 is always bounded by @xmath80 , by using the properties of @xmath200 .",
    "thus @xmath230 .",
    "2 .   for the intermediate domain where @xmath231 , the function @xmath200 ( used for @xmath232 ^ -+1}$ ] ) can be bounded from above by a simple function , i.e. , a constant or a linear function of @xmath29 .",
    "if @xmath31 is too large ( i.e. , @xmath233 ) , we can also show that @xmath143 is less than @xmath234 .",
    "the more precise argument will be given in [ sec : proof_theorem_1 ] , and we have the following theorem .    [ thm : the_first_theorem ] let @xmath226 .",
    "if @xmath207 and @xmath235 , then @xmath143 is bounded from above as follows    * ( case 1 ) if @xmath229 , @xmath236 * ( case 2 ) if @xmath237 , for an arbitrary possible outcome @xmath29 , we have @xmath238 where @xmath239 thus @xmath240 * ( case 3 ) if @xmath233 , then @xmath241 holds by the definition of @xmath41 . hence @xmath242    ( for the proof of this theorem , see [ sec : proof_theorem_1 ] . )",
    "we stress that the normal approximation to @xmath126 is not yet applied , and thus all inequalities are rigorous at this stage in ( [ eq : def_hat_p_sft ] ) and ( [ eq : def_hat_p ] ) , and that @xmath41 is used in the statement of theorem [ thm : the_first_theorem ] .",
    "however , in the proof of theorem 1 we use no approximation ; thus the theorem holds rigorously , without any approximation . ]",
    "then in the rest of this subsection , we will show that the right hand side of each inequality of theorem [ thm : the_first_theorem ] can be bounded from above by @xmath243 , with @xmath228 being smaller than one for sufficiently large @xmath155 .",
    "in other words , we obtain an upper bound on @xmath143 that is valid for all @xmath31 ; and thus an upper bound on @xmath0 ( recall the argument of section [ sec : upper_bound_pph_each_k ] ) .",
    "can be bounded from above by ( and thus @xmath0 ) from above by @xmath80 .",
    "let us first discuss the easier cases , namely , cases 1 and 3 .",
    "as mentioned above , for these two cases @xmath143 can be easily shown to be less than @xmath80 : for case 1 , it is already proved in theorem [ thm : the_first_theorem ] . for case 3 ,",
    "if one applies the normal approximation to @xmath126 , @xmath143 is bounded by @xmath80 , as can be seen by the same argument as in the previous section ( see the paragraph of ( [ eq : def_normal_approx_hypergeo ] ) ) .",
    "hence it remains to evaluate case 2 , where parameter @xmath31 is restricted as @xmath237 . as mentioned above , we here show that @xmath143 can be rewritten as the gaussian integration in this case . in inequality ( [ eq : case2_upperbound ] ) , the first term on the right hand side can be bounded by @xmath80 , with the approximation applied to @xmath126 . for the second term , which is a summation over @xmath29 , we replace @xmath126 with the the normal approximation .",
    "in addition to that , we replace @xmath141 appearing in the same summation by the right hand side of ( [ eq : inequality_upper_bound_s_pa_by_beta ] ) .",
    "then the summation can be rewritten a gaussian integral : @xmath244dx.\\nonumber\\\\ & \\le & \\frac1{\\sqrt{2\\pi}}\\int_{-s}^{\\infty } \\exp\\left[-\\frac{x^2}2-s\\left(x+s\\right)\\xi_{\\varepsilon}(k)\\right]dx.\\\\ & = & e^{\\frac12{\\xi_{\\varepsilon}}(\\xi_{\\varepsilon}-2)s^2 } \\frac1{\\sqrt{2\\pi}}\\int_{(\\xi_{\\varepsilon}-1)s}^\\infty e^{-x^2/2}dx\\\\ & = : & i_2\\left(\\xi_{\\varepsilon}(k)\\right),\\nonumber\\end{aligned}\\ ] ] where @xmath245    further , in order to bound @xmath246 using @xmath80 , we introduce the inequalities @xmath247 where @xmath248 is the normal distribution function given in ( [ eq : def_normal_distribution_function ] ) .",
    "( inequalities ( [ eq : inequality_phi_both_sides ] ) will also be proved in [ sec : proof_theorem_1 ] . ) by using ( [ eq : inequality_phi_both_sides ] ) , the integral @xmath246 can be evaluated further as @xmath249 note here that @xmath193 is an increasing function of @xmath31 , because @xmath250 is .",
    "thus the final term of ( [ eq : i_2_bound_by_xi ] ) is maximized at the lower boundary @xmath251 , and we obtain finally @xmath252 with @xmath253 .",
    "we now have the following theorem :    [ thm : gauss_upperbound ] for a given @xmath80 , suppose that @xmath207 , @xmath235 and @xmath254 with @xmath255 here @xmath41 is defined in eq .",
    "( [ eq : def_hat_p_sft ] ) , @xmath131 in eq .",
    "( [ eq : def_barc_sigma ] ) , and @xmath256 .",
    "also assume that alice and bob perform the qkd protocol specified in section [ sec : protocol_description ] .",
    "then with the normal approximation applied to @xmath126 , @xmath187 can be bounded as @xmath257 where @xmath258    note here that none of @xmath43 , @xmath259 or @xmath178 depends on @xmath31 or @xmath29 , which can vary for each run of the protocol ; thus @xmath260 can be calculated as a fixed value specified by the protocol .",
    "( in other words , @xmath260 is the constant and thus calculated at the preparation stage prior to the protocol . )",
    "further , as we have done in the previous subsection , if parameters @xmath7 and @xmath6 are sufficiently large , we can also obtain a similarly good bound _ without _ relying on the normal approximation of @xmath126 ( in eq .",
    "( [ eq : def_normal_approx_hypergeo ] ) ) . by using exact upper bounds on @xmath126 including lemma [ lmm : upperbound_simple_bound ]",
    ", we obtain the following theorem :    [ thm : exact_upperbound ] suppose that @xmath261 , @xmath262 , and @xmath263 are satisfied for a given @xmath80 .",
    "also assume that alice and bob perform the qkd protocol specified in section [ sec : protocol_description ] .",
    "then _ without _ using the normal approximation of @xmath126 , we have @xmath264 where @xmath265 where @xmath266 , @xmath267 .    the proof of this theorem is given in [ sec : proof_theorem_3 ] .",
    "now , we roughly estimate the relation between the sacrifice bit length and the upper bound @xmath268 of the phase error . for this purpose , we focus on the asymptotic expansion for the sacrifice bit . in the protocol discussed in the above ,",
    "the sacrifice bit length @xmath48 is @xmath269 with @xmath270 and @xmath271 . when the ratio @xmath272 is @xmath273 , we obtain the asymptotic expansion : @xmath274 where @xmath275 .",
    "when we use only the first term in the above expansion , the upper bound @xmath268 for the phase error converges to zero or one .",
    "the limit value zero or one can not be used for the approximation for the upper bound @xmath268 because the real value of the upper bound @xmath268 takes a value between zero and one , which is different from zero or one .",
    "however , when we use up to the second order @xmath276 in the asymptotic expansion of @xmath48 , the upper bound @xmath268 converges to a value between zero and one . in this case",
    ", we can use the limit for the approximation for the upper bound @xmath268 .",
    "that is , by using the above asymptotic expansion , the virtual phase error can be abounded as the following way .",
    "[ thm : gauss_asymptotic ] for a given @xmath80 , @xmath277 , and @xmath278 , we choose @xmath43 and @xmath44 as @xmath279 and @xmath280 , and assume that @xmath281 .",
    "also suppose that alice and bob perform the qkd protocol specified in section 2 , except that the sacrifice bit length @xmath48 is less than @xmath282 for @xmath283 $ ] .",
    "then , the maximum @xmath284 of @xmath143 with given @xmath6 and @xmath273 can be asymptotically characterized as @xmath285    the proof will be given in [ proof - gauss_asymptotic ] .",
    "in this section we summarize what we have proved so far , and then explain how one can use proposition 1 or 2 , or theorem 2 or 3 to evaluate the security of one s qkd system .      as discussed in section [ sec : security_criteria ] , the standard quantitative measure of the security of qkd is the trace distance @xmath286 between the actual state @xmath287 and the ideal state @xmath288 , given in ( [ eq : def_uniersal_composability ] ) . inequalities ( [ eq : trace_distance_less_than_pph_and_exp_alpha ] ) and ( [ eq : trace_distance_less_than_pph ] ) claim that this trace distance can be bounded from above by the averaged decoding error probability @xmath187 of the virtual phase error correction . throughout the paper ,",
    "we are interested in bounding @xmath0 by using the shor - preskill s formalism .",
    "also in section [ sec : security_criteria ] , we have shown that in order to bound @xmath0 under an arbitrary attack by eve , it suffices to bound the probability @xmath289 , with @xmath143 defined in ( [ eq : s_av_bound_1 ] ) ( or equivalently , for all @xmath31 , one needs to bound @xmath143 by a certain value ) . here",
    "the function @xmath143 gives an upper bound on the failure probability @xmath141 of the virtual phase error correction , averaged with respect to the hypergeometric distribution @xmath126 .",
    "our analyses of sections [ sec : upper_confidence_limit ] and [ sec : upper_decoding_error_probability ] are devoted for obtaining an upper bound on @xmath145 .    in section",
    "[ sec : upper_confidence_limit ] , we determined the suitable functional form of the upper bound @xmath38 on the phase error rate @xmath290 of the sifted key , such that we can achieve high key generation rates and the high - level security simultaneously .",
    "the function @xmath38 is used for calculating the sacrifice bit length @xmath48 of eq .",
    "( [ eq : def_alpha_1 ] ) , i.e. , the number of bits that needs to be erased in privacy amplification ( pa ) .",
    "this problem can be reduced to determining an upper bound on parameter @xmath31 , or equivalently , that on the phase error rate @xmath35 of a sifted key . for this purpose , we derived an upper bound @xmath41 of eqs .",
    "( [ eq : def_hat_p ] ) and ( [ eq : def_hat_p_sft ] ) on @xmath35 , as a function of the measured error rate @xmath169 of sample bits .",
    "we here used the standard method of interval estimation , and the upper bound @xmath41 is defined so that , for any value of @xmath31 , the undesired case @xmath291 occurs with a probability @xmath292 ( see eqs .",
    "( [ eq : estimation_necessary_condition ] ) and ( [ eq : condition_pr_k_approx ] ) ) . then in section [ sec : upper_decoding_error_probability ] , by using this @xmath41 and the corresponding sacrificed bit length @xmath48 given in ( [ eq : def_alpha_1 ] ) , we obtained the upper bounds on @xmath143 that holds for all @xmath31 . by the argument of the paragraph of ( [ eq : s_av_bound_1 ] ) , this means that we have given upper bounds on @xmath0 . for the sake of simplicity",
    ", we first gave straightforward bounds in proposition 1 ( with the approximated values of the hypergeometric distribution @xmath126 ) and proposition 2 ( without any approximation ) .",
    "next we gave the other bounds exploiting the properties of the gaussian integration , which yield larger final key length @xmath146 for sufficiently large @xmath155 ; namely , theorem 2 ( with the approximated @xmath126 ) and theorem 3 ( without any approximation ) .",
    "here we present how to calculate the secret key length of one s qkd system using the straightforward upper bound on @xmath0 obtained in propositions 1 .    * preparation steps : 1 .",
    "determine one s desired upper bound @xmath293 on trace distance .",
    "2 .   calculate the corresponding upper bound on the phase error rate by @xmath294 .",
    "[ item : straightforward_choose_s ] let the confidence limit be @xmath295 .",
    "then calculate parameter @xmath296 , as the inverse value of the normal distribution function @xmath248 ( see the definitions of @xmath248 and @xmath158 given in ( [ eq : def_normal_distribution_function ] ) , ( [ eq : def_s_epsilon ] ) ) .",
    "4 .   let @xmath297 . 5 .",
    "determine @xmath43 and @xmath44 .",
    "[ item : straightforward_set_epsilon ] ( parameter check : ) no parameter check is necessary for proposition 1 .    under this setting of parameters , one can guarantee that @xmath298 , by applying the normal approximation to @xmath126 and by using proposition 1 .",
    "then inequality ( [ eq : trace_distance_less_than_pph ] ) guarantees that the trace distance is bounded as @xmath299 .",
    "( as specified below , we here assume that alice and bob use a universal@xmath27 hash function family that consists of linear and surjective functions . )    * for each run of the protocol : 1 .",
    "[ step : each_run_of_the_protocol ] perform the protocol as specified in section [ sec : protocol_description ] .",
    "in particular in the pa step , for the calculation of the length @xmath48 of ( [ eq : def_alpha_1 ] ) , use @xmath41 defined in eqs .",
    "( [ eq : def_hat_p ] ) and ( [ eq : def_hat_p_sft ] ) , as well as parameters @xmath161 and @xmath225 obtained in the preparation steps above . from their averages",
    "when the bases @xmath300 are chosen with a constant probability , and assume that they are constant .",
    "] then use a universal@xmath27 hash function family that consists of linear and surjective functions , to convert the reconciled key to the secret key .    as",
    "noted in section [ sec : protocol_description ] , as a result of this protocol , alice and bob obtain the final key of length @xmath301 with @xmath48 given in ( [ eq : def_alpha_1 ] ) , and @xmath302 being the reconciled key length . if an error correcting code with efficiency @xmath22 is used , we have @xmath303 , with @xmath19 being the bit error rate of the sifted key .",
    "thus alice and bob obtain the final key of length @xmath146 , given in ( [ eq : def_g_c ] ) .      by using proposition 2 , an exact upper bound on @xmath0 can be obtained , without relying on the normal approximation of @xmath126 . in this case",
    "all the steps are the same as those given in section [ sec : how_to_use_proposition1 ] , except for steps ( [ item : straightforward_choose_s ] ) and ( [ item : straightforward_set_epsilon ] ) :    * choose parameter @xmath161 such that @xmath304 is satified , where @xmath266 . *",
    "( parameter check : ) check that @xmath305 and @xmath219 are satisfied . if not , set @xmath293 smaller and restart from step ( i ) .    as a result of step ( [ item : straightforward_choose_s] )",
    ", we have @xmath306 .",
    "this means that , for a fixed value of @xmath307 , one needs to choose @xmath160 to be smaller than that obtained in section [ sec : how_to_use_proposition1 ] , by a factor of @xmath308 . as a result",
    ", @xmath161 also turns out to be larger , one ends up with a smaller final key length .",
    "note , however , that such increment of @xmath161 is negligible for sufficiently large @xmath161 ( e.g. , for @xmath309 ) , because @xmath186 scales as @xmath310 and thus a very small increment of @xmath161 compensates the factor of @xmath308 in front of @xmath311 .",
    "hence the decrement in the final key length is very small .",
    "we will demonstrate this fact in the next section by a numerical calculation in section [ sec : exact_vs_approximate ] .      as mentioned in section [ sec : upper_bounds_by_gaussian_integration ] , if parameters @xmath7 and @xmath6 are sufficiently large , we can set @xmath226 and still obtain similarly tight bounds on @xmath0 as given in theorems 2 and 3 ; thereby we can improve the final key length @xmath146 .",
    "for these cases too , we summarize how to calculate the secret key length of one s qkd system .      for theorem 2 ,",
    "the preparation steps are modified as follows :    * preparation steps : 1 .",
    "determine one s desired upper bound on trace distance @xmath293 .",
    "2 .   calculate the corresponding upper bound on the phase error rate by @xmath312 .",
    "3 .   [ item : set_epsilon_smaller ] set the confidence limit @xmath80 to be slightly smaller than @xmath307 .",
    "( for example , if @xmath155 are sufficiently large , @xmath313 is usually sufficient . ) then calculate parameter @xmath296 , as the inverse value of the normal distribution function @xmath248 given in ( [ eq : def_normal_distribution_function ] ) .",
    "4 .   let @xmath226 . 5 .",
    "determine @xmath43 and @xmath44 , such that the conditions in the first sentence of theorem 2 are all satisfied .",
    "[ item : step_before_final ] 6 .",
    "( parameter check : ) check if @xmath228 is small enough so that inequality ( [ eq : p_ph_upper_bound_by_delta ] ) is satisfied . if not , go back to step ( [ item : set_epsilon_smaller ] ) and set @xmath80 smaller .",
    "[ item : final_step ]    after these preparation steps , alice and bob run the protocol as in previous sections .",
    "that is , they run the protocol as specified in step ( [ step : each_run_of_the_protocol ] ) of section [ sec : how_to_use_proposition1 ] .",
    "as we have done for the case of the straightforward bounds , we also obtained in theorem [ thm : exact_upperbound ] the exact version of the gaussian bound that does not rely on the normal approximation of @xmath126 .",
    "this theorem was derived using essentially the same idea as theorem 2 and achieves a similarly tight bound , but it does not rely on any approximation .    for theorem [ thm : exact_upperbound ]",
    ", the preparation steps are the same as theorem 2 ( i.e. , the same as in section [ sec : gaussian_bound_without_approximation ] ) , except for steps ( [ item : step_before_final ] ) and ( [ item : final_step ] ) :    * determine @xmath43 and @xmath44 , such that the conditions in the first sentence of theorem [ thm : exact_upperbound ] are all satisfied . *",
    "( parameter check : ) check if @xmath314 is small enough so that inequality ( [ eq : theorem_3_exact_upperbound ] ) is satisfied . if not , go back to step ( [ item : set_epsilon_smaller ] ) and set @xmath80 smaller .",
    "after these preparation steps , alice and bob run the protocol as in previous sections .",
    "that is , they run the protocol as specified in step ( [ step : each_run_of_the_protocol ] ) of section [ sec : how_to_use_proposition1 ] .",
    "we note here that if @xmath155 are sufficiently large , parameters @xmath178 and @xmath228 becomes sufficiently small , and the approximate evaluation of the key length @xmath146 of ( [ eq : def_g_c ] ) can be greatly simplified .",
    "as one can see from steps ( i ) and ( ii ) of section [ sec : how_to_use_gaussian_bounds ] , bounding @xmath0 is enough for the security .",
    "if @xmath228 is sufficiently small , then according to theorem 2 ( or or step ( iii ) of section [ sec : how_to_use_gaussian_bounds ] ) , @xmath0 can be bounded approximately by @xmath80 , which determines the value of @xmath41 via eqs .",
    "( [ eq : def_hat_p ] ) and ( [ eq : def_hat_p_sft ] ) .",
    "then as we discussed in the paragraph of eq .",
    "( [ eq : approx_hat_p ] ) , if @xmath178 is sufficiently small , @xmath315 can be approximated by using @xmath316 .    as a result , if the conditions of the first sentence of theorem 2 are satisfied for a given set of experimental parameters , and if @xmath178 and @xmath228 are sufficiently small , one has the following rough estimates .",
    "the trace distance is approximately bounded by the square root of @xmath80 as @xmath317 parameter @xmath161 is chosen to be the deviation of the standard deviation , i.e. , @xmath296 .",
    "then this @xmath161 determines the final key length @xmath146 as @xmath318,\\\\ \\hat{p}_{{\\rm sft},\\varepsilon}(c)&=&\\frac{n+l}{n}\\hat{p}_{\\varepsilon}(c)-\\frac{l}{n}p_{\\rm smp}(c),\\\\ p_{\\rm smp}(c)&=&c / l,\\\\ \\hat{p}_{\\varepsilon}(c)&\\simeq&p_{\\rm smp}(c)+\\frac{s}{l}\\sigma_{\\rm bin}(c)\\\\ & = & p_{\\rm smp}(c)+\\frac{s}{l}\\sqrt{lp_{\\rm smp}(c)(1-p_{\\rm smp}(c))}.\\end{aligned}\\ ] ] we expect that these relation will be useful for experimentalists and theorists who wish to obtain a rough estimate of the key length with the finite size effect taken into account .",
    "we demonstrate the tightness of our bound with numerical results . we consider a quantum channel in the absence of eavesdropper , and assume that it can be described as a binary symmetric channel with quantum bit error rate ( qber ) .",
    "first , as a comparison to preceding literature @xcite , we plot key rates for the case where alice and bob choose the @xmath9 and the @xmath11 bases with the equal probability .",
    "we present two types of evaluations given in section [ sec : how_to_use ] ; one is the analysis of section [ sec : how_to_use_proposition2 ] using the straightforward bound of proposition 2 , the other is that of section [ subsec - exact ] using the gaussian bound of theorem 3 .",
    "note that both these bounds are derived _ without _ using the normal approximation ; thus the all key generation rates obtained in this subsection are rigorous .",
    "we assume that alice and bob choose both the phase basis and the bit basis with probability @xmath320 , and thus @xmath321 .",
    "we also assume that alice and bob consume @xmath322 bits of a previously shared secret key for exchanging the hash value , in order to guarantee that @xmath323 ( in the following , these @xmath322 bits will be subtracted from the final key length @xmath146 ) .",
    "then we choose @xmath209 to be @xmath324 , so that the trace distance @xmath325 is guaranteed to be less than @xmath326 . by these choices of parameters ,",
    "we can guarantee @xmath327 , which is the same condition as used in ref .",
    "@xcite .    because @xmath322 bits are consumed for guaranteeing that alice s and bob s final keys are equal",
    ", the effective final key length is @xmath328 , with @xmath329 defined in ( [ eq : def_g_c ] ) .",
    "hence in this section , we define the final key rate to be @xmath330.\\nonumber\\end{aligned}\\ ] ] the efficiency of bit error correction is chosen to be @xmath331 .      with the above choices of parameters , we perform the analysis of section [ sec : how_to_use_proposition2 ] , and obtain the corresponding final key rate @xmath332 . here",
    "we restrict ourselves to the case where parameters @xmath155 satisfy @xmath333 .",
    "parameters @xmath209 and @xmath293 are already specified above . as to parameter @xmath161 , we follow step ( iii ) and let @xmath334 , so that @xmath335 according to step ( iv ) , we choose @xmath336 ; next according to step ( v ) , @xmath337 and @xmath338 .",
    "it is easy to verify that all these parameters are compatible with the parameter checks of step ( vi ) .",
    "then we assume that alice and bob perform the bb84 protocol ( i.e. , step ( vii ) ) , in the quantum channels with @xmath339 , and @xmath340 .",
    "the corresponding key rates @xmath341 ( with @xmath342 ) are shown in bold curves in fig .",
    "[ key_rate.fig ] , versus @xmath73 .",
    "for the same choice of parameters @xmath343 , and for the same ratio of @xmath338 with respect to @xmath7 , we perform the analysis of section [ subsec - exact ] .",
    "the remaining parameters to be fixed are @xmath161 and @xmath43 ; hence we here numerically calculate the pairs of @xmath161 and @xmath43 that gives the best key rate @xmath341 .",
    "that is , we first fix @xmath7 and @xmath6 , and then search for the pair of @xmath161 and @xmath43 that is compatible with the parameter check and gives the largest @xmath341 .",
    "( this corresponds to repeating steps ( iii ) through ( vi ) of section [ subsec - exact ] , by letting @xmath80 smaller each time , until the largest key length @xmath329 is obtained . )",
    "the results are shown in thin curves in fig .",
    "[ key_rate.fig ] .    as one can see from fig .",
    "[ key_rate.fig ] , if qber=5% , the gaussian bound gives better key rate than the straightforward bound for all @xmath155 . on the contrary , for smaller",
    "qber ( 1% and 2.5% ) , the straightforward bound becomes better for @xmath344 .",
    "the dots in fig .",
    "[ key_rate.fig ] represents the key rates obtained by tomamichel et al .",
    "@xcite under the same condition .",
    "it can be clearly seen that our key rates @xmath332 are better in all parameter regions .",
    "for example , fig .",
    "[ key_rate.fig ] gives @xmath345 for @xmath346 and @xmath347 , while tomamichel et al .",
    "gave @xmath348 in this region @xcite .",
    "as @xmath73 becomes larger , @xmath332 converge very fast to the asymptotic values ; all three curves reach more than 80% of the asymptotic values at @xmath349 .",
    "in particular , as the key size becomes larger , @xmath332 converge very fast to the asymptotic values , more than 80% of the asymptotic values at @xmath349 .",
    "as we have noted in section [ sec : protocol_description ] , key distillation is quite practical even in this region .",
    "that is , the sizes of bit error correcting codes are independent of security , and thus alice and bob may perform bit error correction by dividing a sifted key of @xmath6 bits to arbitrarily smaller blocks . as to privacy amplification , one can use the efficient algorithm for the multiplication of the ( modified ) toeplitz matrix and a vector .     versus @xmath73 , which is the sum of lengths of a sifted key and sample bits . here",
    "we assume that @xmath9 and the @xmath11 bases are chosen with the equal probability , i.e. , @xmath319 .",
    "the typical qber are chosen to be 1% ( red ) , 2.5% ( blue ) , and 5% ( black ) .",
    "as to the security , we set @xmath322 and @xmath350 , so that @xmath351 . that is , the sum of the trace distance and @xmath25 is less than @xmath352 .",
    "we have used two types of analysis to achieve this value of @xmath307 : the bold curves represent the key rates based on the straightforward bound given in proposition 2 and in section [ sec : how_to_use_proposition2 ] .",
    "the thin curves are based on the gaussian bound given in theorem [ thm : exact_upperbound ] and in section [ subsec - exact ] .",
    "we stress that these curves are obtained _ without _ using the normal approximation .",
    "dots of the same color are the rates obtained in figure 2 of ref .",
    "width=566 ]      next , as a more practical setting , we consider the case where alice and bob choose the @xmath9 and the @xmath11 bases with varying probabilities @xmath10 , @xmath12 ( thus , @xmath353 , @xmath354 ) .",
    "then we maximize the secret fraction @xmath355 , defined by @xmath356\\nonumber\\end{aligned}\\ ] ] with respect a fixed raw key length @xmath8 , where @xmath146 denotes the final key length .",
    "we use the analysis of section [ subsec - exact ] based on the gaussian bound of theorem 3 ( without any approximation ) ; hence again , all the final key rates obtained in this subsection are rigorous .",
    "we choose parameters @xmath357 , @xmath25 are chosen to be the same as in the previous subsection . according to step ( iii ) , we let @xmath358 so that @xmath359 .",
    "the channel error rates are chosen to be @xmath360 , @xmath361 , and @xmath340 , respectively .    under these settings , for each fixed value of @xmath8 , we performed numerical simulations to select the optimal values of @xmath10 and @xmath43 that give the maximum value of @xmath362 .",
    "that is , we first fix @xmath8 , and then search for the pair of @xmath10 and @xmath43 that is compatible with the parameter check of step ( vi  ) and gives the largest @xmath362 .",
    "the results are shown in figure [ asymmetric_key_rate.fig ] .",
    "versus raw key length @xmath8 . here",
    "we assume that alice and bob choose the @xmath9 and the @xmath11 bases with varying probabilities @xmath10 , @xmath12 .",
    "the probability @xmath10 and the minimum errors @xmath363 are also optimized to give maximum @xmath355 .",
    "the typical qber are chosen to be 1% ( red ) , 2.5% ( blue ) , and 5% ( black ) .",
    "parameters @xmath187 , @xmath25 are chosen to be the same as in figure [ key_rate.fig ] , so that @xmath351 is satisfied .",
    ", width=566 ]      all the key rates of the previous two subsections are rigorous , in the sense that they are obtained without using any approximation . in this final subsection , we demonstrate that , for practical parameter regions , the key rates are almost the same , whether one uses the analysis based on the normal approximation ( i.e. , proposition 1 and theorem 2 ) , or those without any approximation ( i.e. , proposition 2 and theorem 3 ) .    in fig .",
    "[ exact_vs_approximate1.fig ] , the solid curve shows @xmath341 obtained in section [ sec : numerical_half_straight ] with qber=1% . on the other hand ,",
    "the dashed curve in the same figure is the key rate @xmath341 obtained for the same values of qber and @xmath364 by the procedure of section [ sec : how_to_use_proposition1 ] ; hence this curve is obtained by using proposition 1 , and thus relies on the normal approximation of @xmath2 . similarly in fig .",
    "[ exact_vs_approximate2.fig ] , the solid curve shows @xmath362 obtained in section [ sec : numerical_half_gaussian ] with qber=5% , whereas the dashed curve is obtained by using theorem 2 , which relies on the normal approximation ( here we performed the optimization of @xmath161 and @xmath43 ) .    note that for both of these cases , the exact key rate and approximate key rate are almost identical .",
    "these results suggest that the simple analysis using the normal approximation ( i.e. , proposition 1 or theorem 2 ) can be justified for the security evaluations of practical qkd systems .",
    "obtained for the same values of qber , @xmath364 , using the straightforward bounds of proposition 1 ; hence this curve is obtained using the normal approximation .",
    "note that the two curves are almost identical .",
    ", width=566 ]     obtained for the same values of qber , @xmath364 , using the straightforward bounds of theorem 2 ; hence this curve is obtained using the normal approximation .",
    "note again that the two curves are almost identical .",
    ", width=566 ]",
    "in this paper , we presented a concise analysis for the bb84 protocol that takes the finite key effect into account and yields better key generation rates , with and without relying on the normal approximation .",
    "our results are indeed an improvement of preceding literature ; as we have shown in figure [ key_rate.fig ] , our analysis give better key generation rates @xmath332 in practical settings than in refs .",
    "@xcite .    in order to serve the convenience of experimentalists who wish to evaluate the security of their qkd systems , we included explicit procedures of security evaluation in sections [ sec : security_criteria ] and [ sec : how_to_use ] .",
    "in particular , in addition to presenting the exact values of key rates and security parameters , we also presented how to obtain their rough estimates using the normal approximation .    for the sake of simplicity , we restricted ourselves to the simple case where alice has a perfect single photon source . on the other hand , in order to achieve a long communication distance by a practical qkd system using a weak coherent light source , decoy pulses are necessary @xcite .",
    "this situation was analyzed by one of the authors @xcite , relying on the normal approximation . a thorough and exact analysis in this direction without any approximation remains as future work .",
    "* acknowledgments * the authors thank ryutaroh matsumoto for valuable comments .",
    "mh is partially supported by a mext grant - in - aid for young scientists ( a ) no .",
    "20686026 and grant - in - aid for scientific research ( a ) no .",
    "the center for quantum technologies is funded by the singapore ministry of education and the national research foundation as part of the research centres of excellence programme .",
    "mh and tt are partially supported by the national institute of information and communication technolgy ( nict ) , japan .",
    "99 m. hayashi , phys .",
    "a 76 , 012329 ( 2007 ) ; ibid .",
    "79 , 019901(e ) ( 2009 ) .    v. scarani and r. renner , phys .",
    "100 , 200501 ( 2008 ) .",
    "y. sano , r. matsumoto , and t. uyematsu , j. phys .",
    "a 43 , 495302 ( 2010 ) .",
    "m. tomamichel , c. c. w. lim , n. gisin , and r. renner , arxiv:1103.4130v1 [ quant - ph ] .",
    "h. maassen , and j. b. m. uffink , phys .",
    "60 , 1103 ( 1988 ) .",
    "j. m. renes and j. -c .",
    "boileau , phys .",
    "103 , 020402 ( 2009 ) .    c. h. bennett and g. brassard , in proceeding of the ieee international conference on computers , systems , and signal processing , bangalore , india ( ieee , new york , 1984 ) , pp.175 - 179 .",
    "r. renner , security of quantum key distribution , phd thesis , dipl .",
    "eth , switzerland , 2005 ; arxiv : quant - ph/0512258 .",
    "r. renner , and r. knig , `` universally composable privacy amplification against quantum adversaries , '' theory of cryptography : second theory of cryptography conference , tcc 2005 , j.kilian ( ed . ) springer verlag 2005 , vol .",
    "3378 of lecture notes in computer science , pp .",
    "407 - 425 .",
    "lo and h. f. chau , science 283 , 2050 , ( 1999 ) ; p. w. shor and j. preskill , phys .",
    "85 , 441 ( 2000 ) .",
    "v. strassen , `` asymptotische abschtzugen in shannon s informationstheorie , '' in transactions of the third prague conference on information theory etc , 1962 .",
    "czechoslovak academy of sciences , prague , pp .",
    "689 - 723 .",
    "m. hayashi , `` information spectrum approach to second - order coding rate in channel coding , '' ieee transactions on information theory , vol.55 , no.11 , 4947 - 4966 ( 2009 ) ;    y. polyanskiy , h.v .",
    "poor , s. verd , `` channel coding rate in the finite blocklength regime , '' ieee trans .",
    "theory , vol .",
    "56 , 2307 - 2359 ( 2010 ) .",
    "m. b. ruskai and e. werner , eprint arxiv : math/9711207    v. chvtal , discrete mathematics 25 , 285 ( 1979 ) .",
    "m. koashi , arxiv : quant - ph/0505108 ; new j. phys .",
    "11 , 045018 ( 2009 ) .",
    "t. tsurumaru and m. hayashi , arxiv:1101.0064v3 [ quant - ph ] .",
    "t. asai , and t. tsurumaru ,  efficient privacy amplification algorithms for quantum key distribution \" ( in japanese ) , ieice technical report , isec2010 - 121 ( 2011 ) .",
    "g. h. golub , and c. f. van loan , matrix computation , third edition , ( johns hopkins university press , 1996 ) .",
    "m. ben - or , michal horodecki , d. w. leung , d. mayers , j. oppenheim `` the universal composable security of quantum key distribution , '' theory of cryptography : second theory of cryptography conference , tcc 2005 , j.kilian ( ed . ) springer verlag 2005 , vol .",
    "3378 of lecture notes in computer science , pp .",
    "386 - 406 .",
    "s. watanabe , r. matsumoto , t. uyematsu , and y. kawano , phys .",
    "a 76 , 032312 ( 2007 ) .",
    "m. hayashi , phys .",
    "a 74 , 022307 ( 2006 ) .",
    "s. watanabe , r. matsumoto , and t. uyematsu , international journal of quantum information , vol .",
    "4 , no . 6 , pp .",
    "935 - 946 , ( 2006 ) .",
    "j. hstad , r. impagliazzo , l. a. levin , and m. luby , `` a pseudorandom generator from any one - way function , '' siam j. comput .",
    "28 , 1364 ( 1999 )    c.h.bennett , g. brassard , c. crepeau , and u.m .",
    "maurer , `` generalized privacy amplification , '' _ ieee trans .",
    "inform . theory _ , vol . *",
    "41 * , 19151923 , 1995 .    c. -h .",
    "f. fung , x. ma , and h. f. chau , phys .",
    "a * 81 * , 012318 ( 2010 ) .",
    "p. g. hoel , elementary statistics , 4th ed .",
    ", ( john wiley & sons , new york , 1969 ) .",
    "hwang , phys .",
    "91 , 057901 ( 2003 ) ; h .- k .",
    "lo , x. ma , and k. chen , phys .",
    "94 , 230504 ( 2005 ) ; x. -b .",
    "wang , phys .",
    "94 , 230503 ( 2005 ) .",
    "j. justesen and t. hoholdt , course in error correcting codes , european mathematical society ( 2004 ) .",
    "lahiri , a. chatterjee , t. maiti , `` normal approximation to the hypergeometric distribution in nonstandard cases and a sub - gaussian berry - esseen theorem , '' journal of statistical planning and inference vol .",
    "137 , 3570 - 3590 ( 2007 ) .",
    "the generalized pauli channel is defined to be a channel where the phase error and the bit errors occur stochastically ( i.e. , with a classical probability ) .",
    "it is easy to see that , in this setting , the virtual phase error probability @xmath0 after the privacy amplification , mentioned in the main text , can clearly be defined . in ref .",
    "@xcite , it is shown that the trace distance can be bounded from above by using @xmath0 .    here",
    "we demonstrate that , without loss of generality , this argument can be extended to the case where the quantum channel @xmath365 between alice and bob is arbitrary and general .",
    "first , we consider the discrete twirling . for @xmath6-bits sequence @xmath366 and @xmath367 ,",
    "define the unitary matrix @xmath368 , where @xmath90 is the bit flip operator and @xmath369 the phase flip operator .",
    "then , the discrete twirling of @xmath365 is defined as @xmath370 , where @xmath371 and @xmath372 . in this paper",
    ", we treat the phase error and the bit error of the channel @xmath373 due to the following reason .",
    "now , we denote the final state and the ideal state with the public information @xmath9 by @xmath374 and @xmath375 when the channel between alice and bob is @xmath365 . hence , our security criterion is @xmath376 .",
    "indeed , the distribution @xmath82 depends on the channel @xmath365 in general , however , it does not change even if the channel is replaced by @xmath377 because the initial random variable is uniform and the hash function and error correction are linear . also for the same reason",
    ", we have @xmath378 .",
    "the state @xmath379 and @xmath380 can be regarded as the state @xmath381 and @xmath382 because the classical information @xmath383 can be treated as a part of eve s system with the channel @xmath373 .",
    "hence , @xmath384 therefore , it is enough to consider the case when the channel is @xmath373 even if the used channel @xmath365 is not a pauli channel .",
    "in order to prove this lemma , we introduce several new lemmas . in the first part ,",
    "i.e , [ sec : uppr_bounds_p_hg ] , we derive exact upper bounds on @xmath126 given in terms of @xmath7 or @xmath158",
    ". then in [ sec : upper_and_lowe_bounds_on_phi ] , we show that those upper bounds can also be bounded by @xmath385 . finally in [ proof_lemma_simple_bound ] , using the obtained results , we prove lemma [ lmm : upperbound_simple_bound ] .",
    "[ lmm : upperbound_dlnk ] if @xmath386 and @xmath387 , @xmath388 where @xmath389 @xmath390    _ proof : _ by using the stirling s formula @xmath391 we have @xmath392 where @xmath393 for @xmath387 and @xmath386 . combining ( [ eq : nchoosek - c_over_n+lchoosek ] ) with @xmath394 ( see , e.g. , lemma 4.2.2 of @xcite ) , we obtain ( [ eq : upperbound_dlnk ] ) .",
    "@xmath395    for @xmath386 , @xmath396 , and @xmath397 @xmath398 [ lmm : entropy_relation ]    _ proof : _ since @xmath399 decreases monotonically , we have @xmath400 ( let @xmath401 be the lhs minus the rhs .",
    "it is easy to verify that @xmath402 and that @xmath403 is a decreasing function .",
    "then by integrating @xmath404 three times , one can show that @xmath405 . ) applying inequality ( [ eq : hx_hx0_derivatives ] ) for @xmath406 and @xmath407 , and also for @xmath408 , we have @xmath409 since @xmath410 , @xmath411 , and @xmath412 are all non - negative by the conditions stated in the lemma , the second term on the right hand side is non - positive . then by noting @xmath413 we have inequality ( [ eq : lmm_nh_n+lh_lh ] ) .",
    "@xmath395    [ lmm : c_upperbound ] if @xmath414 , we have @xmath415    _ proof : _ let @xmath416 then it suffices to show @xmath417 for @xmath418 .",
    "the function @xmath419 inside the square root is a concave parabola with its vertex at @xmath420 .",
    "this means that @xmath421 , and thus @xmath422 .",
    "then it is straightforward to verity @xmath423 and @xmath424 . @xmath395",
    "[ lmm : upperbound_sum_psi ] if @xmath386 , @xmath218 , @xmath414 and @xmath425 , we have @xmath426.\\ ] ]    _ proof : _ combine lemmas [ lmm : upperbound_dlnk ] , [ lmm : entropy_relation ] and [ lmm : c_upperbound ] .",
    "@xmath395    [ lmm : chvatal ] if @xmath427 , @xmath428 and @xmath425 , @xmath429.\\ ] ]    _ proof : _ according to @xcite , @xmath430},\\end{aligned}\\ ] ] where @xmath431 . since @xmath432 increases monotonically for @xmath433 , we have @xmath434 that is , @xmath435\\le \\frac{lt^2}2h''(p ) \\ ] ] @xmath395      [ lmm : normal dstr ] the normal distribution function , defined in ( [ eq : def_normal_distribution_function ] ) , is bounded as @xmath436    _ proof : _ according to ref .",
    "@xcite , the function @xmath248 satisfies @xmath437 where @xmath438 then it is straightforward to show that for @xmath439 , @xmath440 combining ( [ eq : ruskai_bound_phi ] ) and ( [ eq : bound_tilde_g ] ) , we obtain the lemma .",
    "@xmath395    [ lmm : e - s2_le_epsilon ] if @xmath441 , and @xmath442 , @xmath443    _",
    "proof : _ from lemma [ lmm : normal dstr ] , @xmath444 then by noting @xmath445 for @xmath442 , we obtain the lemma .",
    "@xmath395      if @xmath446 , by combining lemmas [ lmm : upperbound_sum_psi ] and [ lmm : normal dstr ] , we obtain @xmath447 on the other hand , if @xmath448 , by lemma [ lmm : chvatal ] , we have @xmath449\\nonumber\\\\ & \\le & e^{-\\frac{2}{5}l}\\le e^{-\\frac{s^2}{2}}.\\end{aligned}\\ ] ] then by using lemma [ lmm : normal dstr ] , we have @xmath450",
    "since @xmath451 , we have for arbitrary @xmath452 $ ] , @xmath453 further , from the concavity of @xmath20 and from the monotonicity of @xmath454 , @xmath455\\\\ & \\le & nh'(\\hat{p}_{{\\rm sft},\\varepsilon}(c_{\\max}))\\left[p_{\\rm smp}(c_{\\min})-\\hat{p}_{{\\rm sft},\\varepsilon}(c_{\\min})\\right].\\end{aligned}\\ ] ] then by using eq .",
    "( [ eq : def_hat_p_sft ] ) and by noting that @xmath172 ( see below eq .",
    "( [ eq : def_gamma ] ) ) , @xmath456-d\\\\ & = & -(n+l)h'(\\hat{p}_{{\\rm sft},\\varepsilon}(c_{\\max}))\\\\ & & \\quad\\times\\sqrt{4\\gamma}\\sqrt{\\hat{p}_\\varepsilon(c_{\\min})(1-\\hat{p}_\\varepsilon(c_{\\min}))}-d\\\\ & = & -(1 + 4\\gamma)s(\\varepsilon)\\beta\\sigma\\left((n+l)\\hat{p}_\\varepsilon(c_{\\min})\\right)-d\\\\ & \\le&-\\frac{\\xi_{\\min,\\varepsilon } s(\\varepsilon)^2}{\\ln2}-d.\\end{aligned}\\ ] ] the last inequality follows by noting that @xmath457 , and thus @xmath458 . then by using lemma [ lmm : e - s2_le_epsilon ]",
    ", we have for @xmath254 and @xmath226 , @xmath459 ^ -+1}\\le 2e^{-\\xi_{\\min,\\varepsilon } s(\\varepsilon)^2 } < \\varepsilon\\\\\\ ] ] @xmath395      this part is immediate from the following lemma .",
    "[ lmm : g_upperbound ] suppose @xmath261 , @xmath460 .",
    "then , for any integer @xmath31 , any real number @xmath461 and any @xmath462 $ ] , we have @xmath463 with @xmath464 defined in ( [ eq : def_beta ] ) .    _",
    "proof : _ with @xmath20 being concave , and with @xmath41 increasing monotonically , @xmath465 the quantity @xmath466 on the right hand side can be bounded as follows .",
    "first note @xmath467 by the definition of @xmath41 , given in ( [ eq : def_hat_p ] ) and ( [ eq : def_hat_p_sft ] ) . also by the definition of @xmath41",
    ", we have that @xmath468 , and that @xmath469 by the definition of @xmath35 ; hence @xmath470 . thus @xmath471 .",
    "then for @xmath472 , we have @xmath473 @xmath395    plugging this upper bound on @xmath200 ( for @xmath226 ) to @xmath141 ( given in ( [ eq : upper_bound_s_pa ] ) and ( [ eq : def_g_k_c ] ) ) , we obtain case 2 of theorem 1 .",
    "next we prove theorem [ thm : exact_upperbound ] starting from theorem 1 . in the following , @xmath158",
    "is simplified to @xmath161 .    under the conditions of case 1 of theorem 1 , inequality ( [ eq : case1_upperbound ] ) holds independently of the normal approximation , and thus we readily see that ( [ eq : theorem_3_exact_upperbound ] ) holds .",
    "[ lmm : upperbound_p_k_c_1 ] if @xmath261 , @xmath218 , @xmath414 and @xmath474 , we have @xmath475,\\ ] ] with @xmath476 defined in ( [ eq : def_mu ] ) , and @xmath477    _ proof : _ by using the stirling s formula ( [ eq : stirlings_formula ] ) , we have @xmath478 where @xmath479 then by combining inequality ( [ eq : l_choose_c_upperbound ] ) with ( [ eq : nchoosek - c_over_n+lchoosek ] ) and ( [ eq : lmm_nh_n+lh_lh ] ) , and by using lemma [ lmm : c_upperbound ] , we obtain @xmath480.\\ ] ] then by noting @xmath481 we obtain the lemma",
    ". @xmath395    [ lmm : upperbound_p_k_c_2 ]",
    "if @xmath386 , @xmath482 , @xmath483 , @xmath484 and @xmath474 , we have @xmath485,\\ ] ] with @xmath476 , @xmath486 defined in ( [ eq : def_mu ] ) , ( [ eq : def_nu ] )    _ proof : _ from the definition of @xmath193 , we have @xmath487 by noting that @xmath483 , we have @xmath488 hence @xmath489 .",
    "the assumption yields that @xmath490 , which implies @xmath491 combining this inequality with lemma [ lmm : upperbound_p_k_c_1 ] , we obtain lemma [ lmm : upperbound_p_k_c_2 ] .",
    "@xmath395      if @xmath492 , this case can be proved by exactly the same argument as in [ proof_lemma_simple_bound ] ( note here that the condition @xmath262 , appearing in theorem 3 , implies @xmath493 ) . hence in this subsection , we assume that @xmath397 .",
    "we also assume that @xmath218 , because the case @xmath494 is already considered in case 1 of theorem 1 .",
    "first we divide the right hand side of ( [ eq : case2_upperbound ] ) into three parts , @xmath495 the first term on the right hand side can be bounded from above by lemma 1 .",
    "the second term can be bounded as @xmath496\\\\ & & \\hspace{15ex}\\times 2^{-\\beta(c-(\\bar{c}(k)-s\\sigma(k))+1)}\\\\ & \\le & \\frac{e^{\\mu+\\nu}}{\\sqrt{1-\\frac{s}{\\sqrt{c_{\\min } } } } } \\frac{1}{\\sqrt{2\\pi } } \\int_{-s}^{\\infty}dx\\ e^{-x^2/2}2^{-\\beta\\sigma(k)(x+s)}\\\\ & \\le & \\frac{e^{\\mu+\\nu}}{\\sqrt{1-\\frac{s}{\\sqrt{c_{\\min } } } } } i_2\\left(\\xi_{\\varepsilon}(k)\\right).\\end{aligned}\\ ] ] then @xmath246 appearing in the last line can be bounded by inequality ( [ eq : upper_bound_i_2 ] ) .",
    "( note that the argument in the paragraph of inequality ( [ eq : upper_bound_i_2 ] ) does not rely on the normal approximation . )",
    "the third summation on the right hand side of ( [ eq : exact_case2_divided ] ) can be bounded as @xmath497",
    "first , we fix arbitrary @xmath498 .",
    "since the function @xmath20 and its derivative @xmath454 are uniformly continuous in the range @xmath499 $ ] , there exists an integer @xmath8 such that @xmath500 for @xmath501 and @xmath502 . using theorem 1 of @xcite",
    ", we can choose constants @xmath113 and @xmath114 such that @xmath503 . here",
    "note that the constants @xmath113 and @xmath114 are different from those defined in theorem 1 of @xcite .",
    "using @xmath504 , we obtain @xmath505 hence , theorem [ thm : gauss_upperbound ] yields that @xmath506 where @xmath507 is the maxumum of @xmath228 given in theorem [ thm : gauss_upperbound ] with the condition @xmath502 .    since @xmath508 as @xmath509",
    ", we obtain @xmath510 .",
    "also we can show that @xmath511 .",
    "thus , we obtain @xmath512 . since @xmath513 is an arbitrary real number satisfying that @xmath514 .",
    "hence , @xmath515 ."
  ],
  "abstract_text": [
    "<S> we present a tight security analysis of the bennett - brassard 1984 protocol taking into account the finite size effect of key distillation , and achieving unconditional security . </S>",
    "<S> we begin by presenting a concise analysis utilizing the normal approximation of the hypergeometric function . </S>",
    "<S> then next we show that a similarly tight bound can also be obtained by a rigorous argument without relying on any approximation .    in particular , for the convenience of experimentalists who wish to evaluate the security of their qkd systems </S>",
    "<S> , we also give explicit procedures of our key distillation , and also show how to calculate the secret key rate and the security parameter from a given set of experimental parameters . besides the exact values of key rates and security parameters , we also present how to obtain their rough estimates using the normal approximation . </S>"
  ]
}