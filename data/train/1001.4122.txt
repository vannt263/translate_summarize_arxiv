{
  "article_text": [
    "a wide variety of distributed systems composed by autonomous agents are able to display a remarkable level of self - organization despite the absence of a centralized coordinator @xcite .",
    "for example , the structure of many `` self - engineered '' networks , such as social and economic networks , emerges from local interactions between agents aiming to optimize their local utilities @xcite .",
    "motivated by the implications of a network s laplacian spectrum on its structure ( i.e. , number of connected components ) and behavior of dynamical processes implemented on it ( i.e. , speed of convergence of distributed consensus algorithms ) , we propose a distributed model of graph evolution in which autonomous agents can modify their local neighborhood in order to control a set of moments of the network laplacian spectrum .",
    "the eigenvalue spectra of a network provide valuable information regarding the behavior of many dynamical processes running within the network @xcite .",
    "for example , the eigenvalue spectrum of the laplacian matrix of a graph affects the mixing speed of markov chains @xcite , the stability of synchronization of a network of nonlinear oscillators @xcite , the spreading of a virus in a network @xcite , as well as the dynamical behavior of many decentralized network algorithms @xcite .",
    "similarly , the second smallest eigenvalue of the laplacian matrix ( also called spectral gap ) is broadly considered a critical parameter that influences the stability and robustness properties of dynamical systems that are implemented over information networks @xcite .",
    "optimization of the spectral gap has been studied by several authors both in a centralized @xcite and decentralized context @xcite .",
    "in contrast , our approach focuses on controlling the moments of the laplacian eigenvalue spectrum . in this way",
    ", we can influence the behavior of certain dynamical processes run within the network . as we show",
    ", the benefit of controlling the spectral moments , and especially the lower order ones , lies in lower computational cost and elegant distributed implementation .",
    "a major challenge in our approach is to efficiently control the spectral moments of a network in a _ fully distributed fashion _ while maintaining _ network connectivity _ in the presence of link deletions .",
    "our work is related to @xcite , where a fully distributed algorithm is proposed to compute the full set of eigenvalues and eigenvectors of a matrix representing the network topology .",
    "however , our approach is computationally cheaper since computation of the spectral moments does not require a complete eigenvalue decomposition , but can be performed distributively by averaging local network information , such as node degrees . on the other hand , control of the network structure to the desired set of spectral moments",
    "is based on greedy actions ( link additions and deletions ) that are the result of distributed agreement protocols between the agents .",
    "we show that our distributed topology control algorithm is stable and converges to a network with spectral moments `` close '' to the desired . the performance of our algorithm is illustrated in computer simulations .    the rest of this paper is organized as follows . in section  [ sec : problem ]",
    ", we formulate the problem under consideration and review some terminology . in section  [ sec : compute_moments ] , we derive closed - form expressions for the first four moments of the laplacian spectrum in terms of graph properties that can be measured locally",
    ". based on these expressions , we introduce a distributed algorithm to compute these moments . in section",
    "[ sec : control_moments ] , we propose an efficient distributed algorithm to control of the spectral moments of a network . finally , in section  [",
    "sec : simulations ] , we illustrate our approach with several computer simulations .",
    "let @xmath0 denote a graph on @xmath1 nodes , where @xmath2 denotes the set of nodes and @xmath3 is the set of edges .",
    "if @xmath4 whenever @xmath5 we say that @xmath6 is _ undirected _ and call nodes @xmath7 and @xmath8 _ adjacent _ ( or neighbors ) , which we denote by @xmath9 .",
    "the set of all nodes adjacent to node @xmath10 constitutes the _ neighborhood _ of node @xmath10 , defined by @xmath11 , and the number of those neighbors is called the _ degree _ of node @xmath10 , denoted by @xmath12 . in this paper",
    ", we consider finite _ simple _ graphs , meaning that two nodes are connected by at most one edge and self - loops are not allowed .",
    "we define a _ walk _ from @xmath13 to @xmath14 of length @xmath15 to be an ordered sequence of nodes @xmath16 such that @xmath17 for @xmath18 .",
    "we say that a graph @xmath6 is _ connected _ if there exists a walk between every pair of nodes . if @xmath19 , then the walk is closed .",
    "a closed walk with no repeated nodes ( with the exception of the first and last nodes ) is called a _ cycle_.",
    "_ triangles _ and _ quadrangles _ are cycles of length three and four , respectively .",
    "let @xmath20 denote the _ distance _ between two nodes @xmath10 and @xmath21 , i.e. , the minimum length of a walk from @xmath10 to @xmath21 .",
    "we say that @xmath10 and @xmath21 are @xmath15-th order neighbors if @xmath22 and define the @xmath15-th order neighborhood of a node @xmath10 as the set of nodes within a distance @xmath15 from @xmath10 , i.e. , @xmath23 .",
    "a @xmath15-th order neighborhood , induces a subgraph @xmath24 with node - set @xmath25 and edge - set @xmath26 defined as the set of edges in @xmath27 that connect two nodes in @xmath28 .",
    "we say that a graphical property @xmath29 is _ locally measurable within a radius _ @xmath15 _ around a node _",
    "@xmath10 if @xmath30 is exclusively a function of the neighborhood subgraph , i.e. , @xmath31 . for example , both the degree and the number of triangles touching a node are locally measurable within a radius @xmath32 . also , the number of quadrangles touching a node is locally measurable within a radius @xmath33 .",
    "graphs can be algebraically represented via the _ adjacency _ and _ laplacian _ matrices .",
    "the _ adjacency matrix _ of an undirected graph @xmath6 , denoted by @xmath34 $ ] , is an @xmath35 symmetric matrix defined entry - wise as @xmath36 if nodes @xmath37 and @xmath8 are adjacent and @xmath38 otherwise . for all @xmath39 . ]",
    "the powers of the adjacency matrix is related to walks in a graph .",
    "in particular we have the following results @xcite :    [ lem : biggs]the number of closed walks of length @xmath40 joining node @xmath37 to itself is given by the @xmath39-th diagonal entry of the matrix @xmath41 .",
    "[ cor : biggs ] let @xmath6 be a simple graph .",
    "denote by @xmath42 and @xmath43 the number of triangles and quadrangles touching node @xmath37 , respectively . then @xmath44 , @xmath45 , @xmath46 and @xmath47 .    arranging the node degrees on a diagonal matrix yields the degree matrix @xmath48 .",
    "then , the _ laplacian matrix _ @xmath49 of a graph @xmath6 can be defined by @xmath50 .",
    "let @xmath51 be the eigenvalues of @xmath52 , where @xmath53 is the vector of all ones .",
    "one can prove that @xmath49 is positive semidefinite and @xmath54 .",
    "furthermore , @xmath55 is connected if and only if @xmath56 , or equivalently , if @xmath57 @xcite . as a result , we have the following well - known result :    [ thm : consensus ] consider a fixed undirected graph @xmath6 on @xmath58 nodes and let @xmath59 denote the state variable of node @xmath39 .",
    "let @xmath60\\in\\mathbb{r}^n$ ] be the vector of all states and assume @xmath61 . then the network @xmath6 is connected if and only if , @xmath62 for all initial conditions @xmath63 .",
    "theorem  [ thm : consensus ] says that the graph @xmath6 is connected if and only if all nodes eventually reach a consensus on their state values @xmath64 , for all initial conditions .",
    "therefore , connectivity of a network @xmath6 can be verified almost surely by comparing the asymptotic state values ( [ final_value ] ) of all agents , for any random initialization .",
    "note that a similar result can be obtained by application of a _ finite - time _ maximum ( or minimum ) consensus @xcite .",
    "consider a discrete - time sequence of graphs @xmath65 where @xmath66 is the discrete time index .",
    "we denote by @xmath67 the set of laplacian eigenvalues of @xmath68 .",
    "we define the @xmath15-th spectral moment of the laplacian matrix of @xmath69 at time @xmath70 as : @xmath71 similarly , the @xmath15-th centralized spectral moment of the laplacian can written as : @xmath72 the first four centralized spectral moments of the laplacian corresponds to the mean , variance , skewness and kurtosis of the eigenvalue spectrum and they play a central role in this paper .",
    "define further the error function : @xmath73 ^{2 } ,   \\label{eqn : cme}\\]]where @xmath74 denotes a given set of desired centralized moments . since the @xmath15-th moment is the @xmath15-th power - sum of the laplacian eigenvalues , we include the exponents @xmath75 in the above error function with the purpose of assigning the same dimension to the summands in ( [ eqn : cme ] ) .",
    "then , the problem addressed in this paper is :    [ problem ] given an initially connected graph @xmath76 , design a distributed algorithm that iteratively adds or deletes links from @xmath68 , so that the connectivity of @xmath68 is maintained for all time @xmath70 and the error function @xmath77 is locally minimized for large enough @xmath70 .    in what follows ,",
    "we first propose a distributed algorithm to efficiently compute and update @xmath77 without any explicit eigendecomposition ( section  [ sec : compute_moments ] ) .",
    "then , in section  [ sec : control_moments ] , we propose a greedy algorithm where the most beneficial edge addition / deletion is determined based on a distributed agreement over all possible actions that satisfy network connectivity ( theorem  [ thm : consensus ] ) . in this framework ,",
    "the time variable @xmath70 increases by one whenever an action is taken ( i.e. , an addition or deletion of a link ) . for simplicity , we assume that actions are taken one at a time , although this assumption can be relaxed to accommodate more complex action schemes .",
    "in what follows , we assume that the agents in the network have very limited knowledge of the network topology . in particular , we assume that every agent @xmath10 only knows the topology of the second - order neighborhood subgraph around it , @xmath78 .",
    "( this is the case , for example , for many online social networks , where each individual can retrieve a list of his friends friends . )",
    "then , computing the first four laplacian spectral moments relies on counting the presence of certain subgraphs , such a triangles and quadrangles , in every agent s neighborhood and averaging these quantities via distributed average consensus .",
    "in particular , since the matrix trace operator is conserved under diagonalization ( in general , under any similarity transformation ) the first three spectral moments of the laplacian matrix of a graph can be written as @xmath79 for @xmath80 , where we have used the fact that the trace is preserved under cyclic permutations ( i.e. , tr @xmath81=tr @xmath82= tr @xmath83 ) .",
    "we can not use newton s binomial expansion for the forth moment ; nevertheless , we may still obtain the following closed form solution : @xmath84 . \\nonumber\\end{aligned}\\ ] ] expanding the traces that appear in ( [ newton expansion ] ) and ( [ expansion for m4 ] ) we get @xmath85 and @xmath86 which substituted back in equations ( [ newton expansion ] ) and ( [ expansion for m4 ] ) give the following expression for @xmath80 @xmath87 for @xmath88 , we can also simplify the laplacian spectral moment , which now becomes @xmath89 .\\end{aligned}\\ ] ]    substituting the expressions for @xmath90 from lemma  [ lem : biggs ] and corollary  [ cor : biggs ] in equations ( [ newton - like ] ) and ( [ expansion moments k4 ] ) we obtain the first four spectral moments of the laplacian matrix @xmath49 as a function of the second - order neighborhood subgraphs only    [ moments main expression ] @xmath91 , \\\\ m_{3}\\left ( l_{\\mathcal{g}}\\right ) & = \\frac{1}{n}\\sum_{i=1}^{n}\\,\\left [ \\left ( \\deg v_{i}\\right ) ^{3}+3\\left ( \\deg v_{i}\\right ) ^{2}-2t_{i}\\right ] , \\\\ m_{4}\\left ( l_{\\mathcal{g}}\\right ) & = \\frac{1}{n}\\sum_{i=1}^{n}\\left [ \\,\\left ( \\deg v_{i}\\right ) ^{4}+4\\,\\left ( \\deg v_{i}\\right ) ^{3}+\\left ( \\deg v_{i}\\right ) ^{2}-\\right .   \\\\ & \\left .",
    "\\hspace{-4em}-\\deg v_{i}+\\left ( 2\\deg v_{i}+1\\right ) \\sum_{j\\in",
    "n_{i}}\\deg v_{j}-8t_{i}\\deg v_{i}+2q_{i}\\right ] .",
    "\\nonumber\\end{aligned}\\ ] ]    note that the expressions for the spectral moments in equations ( [ moments main expression ] ) are all _ averages _ of locally measurable quantities ( within a 2-hop neighborhood ) , namely , node degrees , triangles and quadrangles touching the node .",
    "hence , we can apply consensus and use the result of theorem  [ thm : consensus ] to obtain the first four moments in a distributed way .",
    "the possible actions ( or control variables ) we consider are local link _ additions _ and local link _ deletions_. a link addition is _ local _ if it connects a node with another node within its second - order neighborhood .",
    "since agents in the network only know their local neighborhood , a fully distributed algorithm must limit edge additions to be local .",
    "( one could extend the algorithm to allow connections between nodes being further than two hops away , but this option would require much more computation and communication . )",
    "let @xmath92 and @xmath93 denote the sets of neighbors and two - hop neighbors of node @xmath39 at time @xmath94 , respectively . since any of the two nodes adjacent to a link can take an action to delete that link , we need to decide which of the two nodes has the authority to delete the link . to avoid ambiguities",
    ", we define the set of edges that node @xmath39 has authority to remove as : @xmath95 .",
    "similarly , to disambiguate between nodes adding a ( still non - existing ) link between them , we define the set of potential edges that node @xmath39 can create as : @xmath96 . in other words ,",
    "node @xmath39 can either _ add _ a link @xmath97 , or _",
    "delete _ a link @xmath98 .",
    "note that link deletions may violate network connectivity . in this case",
    ", those link deletions should be excluded from the set of allowable actions . in the next two sections we address the cases of link deletions and link additions separately .",
    "network connectivity is typically inferred from the number of trivial eigenvalues of the laplacian matrix",
    ". however , such approaches are not applicable in our framework , since we assume no global knowledge of the network topology @xmath68 , but only knowledge of local neighborhoods . instead",
    ", we employ finite - time - maximum consensus which is a distributed algorithm and converges to equal values on nodes belonging to the same connected component of a graph ( theorem  [ thm : consensus ] ) . therefore , if deletion of a link violates connectivity , both nodes adjacent to that link will lie in different connected components and will have different consensus values . in what follows",
    ", we extend this idea to simultaneously checking connectivity for all possible edge deletions in the graph using a single high - dimensional consensus algorithm .",
    "consider node @xmath99 that has authority to remove any of the links in the set @xmath100 .",
    "each one of these links needs to be checked with respect to connectivity and each connectivity verification relies on a scalar consensus update , according to theorem  [ thm : consensus ] . therefore , checking all links in @xmath100 requires @xmath101 consensus updates .",
    "the cardinality of the set @xmath102 . ] we associate with every link in @xmath100 a consensus variable , and stacking all these variables in a vector we obtain the state vector @xmath103 . running a distributed consensus over the network , requires participation of all other nodes @xmath104 .",
    "this is possible by defining the state variables @xmath105 .",
    "all vectors @xmath106 are initialized randomly and are updated by node @xmath39 according to the following maximum consensus : + _ case i _ : if @xmath107 , i.e. , if nodes @xmath39 and @xmath99 are not neighbors , then @xmath108 with the maximum taken elementwise on the vectors , + _ case ii _ :",
    "if @xmath109 , i.e. , if nodes @xmath39 and @xmath99 are neighbors and node @xmath99 has authority over link @xmath110 , then @xmath111_{(i , j ) } : = \\max_{k\\in\\mathcal{n}_1^i(s)\\backslash\\{j\\}}\\left\\{[{\\bf x}_{ij}(s)]_{(i , j)},[{\\bf x}_{kj}(s)]_{(i , j)}\\right\\},\\ ] ] and @xmath112_{(l , j ) } : = \\max_{k\\in\\mathcal{n}_1^i(s)}\\left\\{[{\\bf x}_{ij}(s)]_{(l , j)},[{\\bf x}_{kj}(s)]_{(l , j)}\\right\\},\\ ] ] for @xmath113 , where @xmath114_{(l , j)}\\in\\mathbb{r}$ ] denotes the entry of @xmath115 corresponding to the link @xmath116 , + _ case iii _ : if @xmath117 , i.e. , if nodes @xmath39 and @xmath99 are neighbors and node @xmath39 has authority over link @xmath110 , then @xmath118_{(i , j ) } : = \\max_{k\\in\\mathcal{n}_1^i(s)\\backslash\\{j\\}}\\left\\{[{\\bf x}_{ii}(s)]_{(i , j)},[{\\bf x}_{ki}(s)]_{(i , j)}\\right\\}.\\ ] ]    once consensus ( [ eqn : deletion_1])([eqn : deletion_4 ] ) has converged , node @xmath39 compares the entries @xmath119_{(i , j)}$ ] and @xmath120_{(i , j)}$ ] for all @xmath117 . since , violation of connectivity due to deletion of the link @xmath110 would result in nodes @xmath39 and @xmath99 being in different connected components of the network , @xmath121_{(i , j)}=[{\\bf x}_{ji}(s)]_{(i , j)}$ ] implies that the reduced network is still connected .",
    "hence , we can define a set @xmath122_{(i , j)}=[{\\bf x}_{ji}(s)]_{(i , j ) } \\right\\},\\ ] ] containing the _ safe _ links adjacent to node @xmath39 that if deleted , connectivity is maintained .",
    "@xmath123 for all @xmath124 ; @xmath125^t$ ] , @xmath126;update @xmath127 by ( [ eqn : deletion_1])([eqn : deletion_4]);@xmath128;update @xmath129 by ( [ eqn : safe_deletions ] ) ;    the connectivity verification of link deletions , discussed in section  [ sec : link_deletions ] , is illustrated in alg .",
    "[ alg : connect_verif ] .",
    "convergence of the finite - time consensus ( [ eqn : deletion_1])([eqn : deletion_4 ] ) is captured by a vector of tokens @xmath130 , initialized as @xmath131^t$ ] for all @xmath124 and indicating that node @xmath39 has initialized the consensus variables for link deletions for which node @xmath99 is responsible . in particular , when all tokens of all nodes have been collected ( line 4 , alg .",
    "[ alg : connect_verif ] ) , then consensus has converged and the set of safe link deletions @xmath132 can be computed ( line 5 , alg .  [ alg : connect_verif ] ) .",
    "note that node @xmath39 does not need to know the neighbor sets of its non - neighbors in the network , neither their size .",
    "instead , the vectors @xmath106 are initialized both in values and dimension as soon as vectors @xmath115 are received from a neighbor @xmath133 .",
    "clearly , @xmath134 are initialized first and then propagated in the network via maximum consensus until the information they contain reaches node @xmath39 .      as discussed in problem  [ problem ] , the objective of this work is to minimize the error function @xmath77 .",
    "for this we propose a greedy algorithm , which for every time @xmath70 selects the action that maximizes the quantity @xmath135 , if such an action exists , and terminates if no such action exists . by construction ,",
    "such an algorithm converges to a network that _ locally _ minimizes @xmath77 , while in section  [ sec : simulations ] , we show that it performs well in practice too .    in what follows",
    "we first compute the effect of a link addition or deletion on the four first spectral moments .",
    "although distributed consensus could be used to compute the new moments resulting from each possible action , as in section  [ sec : compute_moments ] , this would clearly be computationally very expensive .",
    "instead , we can achieve this goal locally and with minor computational overhead , based on the observation that the addition or removal of an edge @xmath136 only influences the degrees of nodes @xmath39 and @xmath99 , as well as and the triangles and quadrangles touching their neighboring nodes .",
    "hence , agents @xmath39 and @xmath99 can communicate to compute the net increment in the spectral moments due to the addition or deletion of edge @xmath136 . in particular , we get the following expressions for the increments in the first three moments    @xmath137 , \\\\",
    "\\delta m_{3}^{\\pm \\left ( i , j\\right ) } & = \\frac{1}{n}\\left [ \\left ( 3\\pm 6\\right ) ( d_{i}+d_{j})\\pm 3(d_{i}^{2}+d_{j}^{2})+\\left ( 6\\pm 2\\right)\\mp 6t_{ij}\\right]\\end{aligned}\\ ] ]    where the notation @xmath138 indicates a link addition @xmath139 or deletion @xmath140 and the dependence on time @xmath70 has been dropped for simplicity .",
    "( similarly , one can obtain a complicated closed - form expression for @xmath141 , which we omit due to space limitations . ) then , agent s @xmath39 copy of the @xmath15-th spectral moment @xmath142 becomes @xmath143 and the associated centralized moment @xmath144 can be computed using ( [ eqn : central_moments ] ) .",
    "then , for all possible actions discussed in section  [ sec : local_actions ] , agent @xmath39 computes the error function @xmath145 ^{2}.\\ ] ] then , the local _ most beneficial action _ to the target centralized moments , namely , the action that results in the maximum decrease in the error function @xmath146 , can be defined by in the expression bellow indicates that in case of ties in the @xmath147 , the highest index node wins . ]",
    "@xmath148 where @xmath149 denotes agent @xmath39 s copy of @xmath150 , and the largest decrease in the error associated with action @xmath151 becomes : @xmath152 if @xmath153 and @xmath154 , otherwise .",
    "note that @xmath155 is nontrivially defined only if the exists a link adjacent to node @xmath39 that if added or deleted decreases the error function @xmath146 .",
    "otherwise , a large value @xmath156 is assigned to @xmath155 to indicate that this action is not beneficial to the final objective .",
    "we can include all information of a best local action in the vector @xmath157^t \\in\\mathbb{r}^{7}\\ ] ] containing the local best action @xmath158 , the associated distance to the desired moments @xmath155 , and the vector of centralized moments @xmath159 due to this action .",
    "in the following section we discuss how to compare all local actions @xmath160 for all nodes @xmath161 to obtain the one that decreases the distance to the desired moments the most .      to obtain the overall most beneficial action ,",
    "all local actions need to be propagated in the network and compared against each other .",
    "for this we require minimal storage and communication as well as no propagation of any information regarding the network topology . as in section",
    "[ sec : local_actions ] , we achieve this goal using a finite time minimum consensus algorithm .",
    "@xmath162^{t}$];@xmath163^t$];@xmath164 , with @xmath165_3,[{\\bf v}_{k}]_3\\}$];@xmath166;update @xmath167 , @xmath168 and @xmath169 according to ( [ eqn : update_neighbors_1])([eqn : update_cme]);no beneficial action .",
    "algorithm has converged ;    in particular , the desired local actions @xmath160 are propagated in the network , along with vectors of tokens @xmath170 , initialized as @xmath171^t$ ] , indicating that node @xmath39 has transmitted its desired action . during every iteration of the algorithm",
    ", every node @xmath39 communicates with its neighbors and updates its vector of tokens @xmath172 ( line 3 , alg .",
    "[ alg1 ] ) , as well as its desired action @xmath160 with the action @xmath173 corresponding to the node @xmath99 that contains the smallest distance to the target moments @xmath174_3 $ ] , i.e. , @xmath175_3,[{\\bf v}_{k}(s)]_3\\}.\\ ] ] in case of ties in the distances to the targets @xmath176_3 $ ] , i.e. , if @xmath177_3,[{\\bf v}_{k}(s)]_3\\}$ ] contains more than one nodes , then the node @xmath99 with the largest label is selected ( line 2 , alg .  [ alg1 ] ) .",
    "note that line 2 of alg .",
    "[ alg1 ] is essentially a minimum consensus update on the entries @xmath178_3 $ ] and will converge to a common outcome for all nodes when they have all been compared to each other , which is captured by the condition @xmath179 ( lines 4 and 6 , alg .",
    "[ alg1 ] ) . when the consensus has converged ,",
    "if there exists a node whose desired action decreases the distance to the target moments , i.e. , if @xmath178_3<d$ ] ( line 4 , alg .",
    "[ alg1 ] ) , then alg .",
    "[ alg1 ] terminates with a greedy action and node @xmath39 updates its set of neighbors @xmath180 and vector of centralized moments @xmath181 ( line 5 , alg .",
    "[ alg1 ] ) .",
    "if the optimal action is a link addition , i.e. , if @xmath178_2\\not\\in\\mathcal{n}_1^i(s)$ ] , then @xmath182_2\\right\\}.\\ ] ] on the other hand , if the optimal action is a link deletion , i.e. , if @xmath178_2\\in\\mathcal{n}_1^i(s)$ ] , then @xmath183_2\\right\\}.\\ ] ] in all cases , the centralized moments and error function are updated by @xmath184_{4:7}\\ ] ] and @xmath185_{3},\\ ] ] respectively , where @xmath178_{4:7 } = \\left[[{\\bf v}_{i}(s)]_4 \\dots [ { \\bf v}_{i}(s)]_{7}\\right]^t$ ] . finally , if all local desired actions increase the distance to the target moments , i.e. , if @xmath178_3=d$ ] ( line 6 , alg .  [ alg1 ] ) , then no action is taken and the algorithm terminates with a network topology with almost the desired spectral properties .",
    "this is because no action exists that can further decrease the distance to the target moments .",
    "communication time delays , packet losses , and the asymmetric network structure , may result in runs of the algorithm starting asynchronously , outdated information being used for future decisions , and consequently , nodes reaching different decisions for the same run . in the absence of a common global clock ,",
    "the desired synchronization is ideally _ event triggered _ , where by a triggering event we understand the time instant that a message @xmath186 $ ] has been received by any of node @xmath39 s neighbors @xmath187 .",
    "we achieve such a synchronization by labeling every algorithm run in the set @xmath188 and requiring that all information exchange takes place among neighbors that are in equally labeled runs @xcite .",
    "essentially , `` fast '' nodes wait for their `` slower '' peers and , hence , all nodes are always synchronized in the sequence @xmath189 ( fig .",
    "[ fig : synchronization ] ) .",
    "is in run 1 .",
    "necessary for node @xmath39 to transition to run 2 is that all other nodes are also in run 1 , since otherwise node @xmath39 will be missing tokens from the nodes that are not in run 1 yet ( currently in run 3 ) and alg .",
    "[ alg1 ] will not be able to converge .",
    "once node @xmath39 transitions to run 2 , it initializes all variables for that run with the latest values from run 1 , while it maintains the variables of run 1 for nodes that are still in run 1 and it clears all variables of run 3 since , no node is in this run any more.,width=288 ]",
    "in this section we illustrate our algorithm with several numerical examples .",
    "[ exmp : stars ] consider a star network on @xmath190 nodes .",
    "the first four central moments of the associated laplacian matrix are : @xmath191 , @xmath192 , @xmath193 , and @xmath194 .",
    "our objective is to control the topology of a randomly initialized network on 10 nodes so that it eventually has the same set of moments as the given star network .",
    "we observe in fig .",
    "[ fig : star_network ] that our algorithm decreases the error function ( blue line ) to zero in finite time .",
    "similar performances are observed when we repeat this procedure for star networks of any size .",
    "furthermore , although we are controlling the first four moments solely , the resulting network structures are exactly the star topologies whose moments we were trying to approximate . the perfect reconstruction observed in this case is due to the fact that a star graph is a extreme case in which the graph topology is uniquely defined by their eigenvalue spectrum . moreover , if each agent in a star network has access to its second - order neighborhood , it has access to the complete star topology .     for the star graph ( blue plot ) and the two - stars graph ( red plot ) .",
    "the subgraph in the upper right corner shows the behavior of the error function in a neighborhood of zero .",
    "observe that our algorithm can match the first four moments of the star network with zero error in finite time , but can not exactly match the moments of a the two - stars graph , although the final error is very small . ]",
    "[ exmp:2stars ] although our approach works very well for star networks , the case of two - stars networks points out one of its weaknesses , namely , its limitation in modeling network communities . in this example , we consider two star graphs on 10 nodes each , and connect their two central hubs with a link .",
    "the resulting graph is the two - stars graph shown in fig .",
    "fig:2_star_network(a ) . as before ,",
    "we initialize our algorithm with a random graph on 20 nodes and try to approximate the first four central moments of the two - stars graph . in fig .",
    "[ fig : star_network ] , we observe that the error function ( red line ) quickly reaches a neighborhood of zero but does not reach zero exactly . therefore , although our algorithm tries to generate the two hubs in the two - star network , its local nature will not allow it recover the highly - structured two - stars graph . instead , it returns the final network shown in fig .",
    "[ fig:2_star_network](b ) . nevertheless , the eigenvalue spectra of the desired two - star network and the network in fig .  [ fig:2_star_network](b ) are still very similar , as shown in fig .",
    "[ fig : cdfs ] .",
    "[ exmp : chains_rings ] the objective of this example is to illustrate how two structurally very similar ( but topologically different ) target graphs , such as a chain and a ring , may affect the performance of our algorithm . in particular ,",
    "if we run our algorithm to control the first four centralized moments of an initially random graph towards the moments of a chain graph , we observe how the error function converges exactly to zero in finite time .",
    "furthermore , the final result of our algorithm is an exact reconstruction of the chain graph .",
    "nevertheless , when transforming the target graph from a chain graph into a ring graph ( by adding a single link ) , an exact reconstruction is very difficult . in fig .",
    "[ fig : ring_networks ] , we illustrate some graphs returned by our algorithm for different initial conditions when we control the set of moments toward the moments of a ring network on 20 nodes .",
    "observe that , although the algorithm tends to create long cycles and the majority of nodes have degree two , it fails to recreate the exact structure of the ring graph due to the local nature of the algorithm ( as in example  [ exmp:2stars ] ) .",
    "however , although the structure of the resulting networks is not exactly the desired ring graph , their spectral properties are remarkably close to those of a ring . in fig .",
    "fig : cdf_ring , we illustrate the empirical cumulative distribution functions of the eigenvalues of the ring graph ( blue plot ) , versus the four empirical cumulative distribution functions corresponding to the graphs in fig .  [",
    "fig : ring_networks ] .",
    "( b ) ( green ) , fig .",
    "[ fig : ring_networks](c ) ( magenta ) and fig .",
    "[ fig : ring_networks](d ) ( cyan ) . ]",
    "[ exmp : small_world ] in our final example , we use our algorithm to control the moments of a randomly generated graph to those of a small - world network .",
    "we consider small - world graphs as defined in @xcite , namely , we take a ring of @xmath58 nodes , and connect each node in the ring with all the nodes in its 3-hop neighborhood .",
    "then , we randomly rewire a fraction of the resulting edges with probability @xmath195 as proposed by watts and strogatz ws98 .",
    "our objective is to approximate the first four centralized moments of a random instance of a small world graph with @xmath196 nodes and link probability @xmath197 .",
    "we observed a fast convergence of the error to a neighborhood of zero , i.e. , @xmath198 , which suggests ( although does not guarantee ) a good approximation between the spectra of the target small - world graph and the graph returned by our algorithm .",
    "we repeated this process for a link probability @xmath199 and similar results were obtained .",
    "we should note , however , that although the spectral properties between the target small - world graphs and the graphs returned by our algorithm are remarkably similar ( fig .",
    "fig : cdf_small_world ) , the resulting structures are not isomorphic , as in example  [ exmp : chains_rings ] .",
    "( left ) and @xmath199 ( right ) . ]",
    "in this paper , we have described a fully decentralized algorithm that iteratively modifies the structure of a network of agents with the objective of controlling the spectral moments of the laplacian matrix of the network .",
    "although we assume that each agent has access to local information regarding the graph structure , we show that the group is able to collectively aggregate their local information to take a global optimal decision .",
    "this decision corresponds to the most beneficial link addition / deletion in order to minimize an error function that involves the first four laplacian spectral moments of the network .",
    "the aggregation of the local information is achieved via gossip algorithms , which are also used to ensure network connectivity throughout the evolution of the network .",
    "future work involves identifying sets of spectral moments that are reachable by our control algorithm .",
    "( we say that a sequence of spectral moments is reachable if there exists a graph whose moments match the sequence of moments . )",
    "furthermore , we observed that fitting a set of low - order moments does not guarantee a good fit of the complete distribution of eigenvalues .",
    "in fact , there are important spectral parameters , such as the algebraic connectivity , that are not captured by a small set of spectral moments",
    ". nevertheless , we observed in numerical simulations that fitting the first four moments of the eigenvalue spectrum often achieves a good reconstruction of the complete spectrum .",
    "hence , a natural question is to describe the set of graphs most of whose spectral information is contained in a relatively small set of low - order moments ."
  ],
  "abstract_text": [
    "<S> it is well - known that the eigenvalue spectrum of the laplacian matrix of a network contains valuable information about the network structure and the behavior of many dynamical processes run on it . in this paper </S>",
    "<S> , we propose a _ fully decentralized _ algorithm that iteratively modifies the structure of a network of agents in order to control the moments of the laplacian eigenvalue spectrum . </S>",
    "<S> although the individual agents have knowledge of their _ local _ network structure only ( i.e. , myopic information ) , they are collectively able to aggregate this local information and decide on what links are most beneficial to be added or removed at each time step . </S>",
    "<S> our approach relies on gossip algorithms to distributively compute the spectral moments of the laplacian matrix , as well as ensure network connectivity in the presence of link deletions . </S>",
    "<S> we illustrate our approach in nontrivial computer simulations and show that a good final approximation of the spectral moments of the target laplacian matrix is achieved for many cases of interest . </S>"
  ]
}