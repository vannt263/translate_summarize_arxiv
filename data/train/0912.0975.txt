{
  "article_text": [
    "the all - pairs shortest path problem @xcite consists of solving @xmath6 for all vertices @xmath7 , where @xmath8 is the space of all paths connecting @xmath9 to @xmath10 in @xmath11 , and @xmath12 is the path length , i.e. , @xmath13 where @xmath14 is the weight of the edge connecting @xmath15 to @xmath16 , or @xmath17 if no such edge exists .    a simple divide - and - conquer solution to ( eq .  [ eq : problem ] )",
    "can be obtained by defining @xmath18 to be the shortest path between @xmath19 and @xmath9 containing at most @xmath20 edges .",
    "this solution exploits the fact that @xmath21 this allows us to solve the all - pairs shortest path problem via algorithm [ alg : apsp ] , which we requires @xmath22 time ( this is by no means the optimal solution , though it is this version to which our improvements apply ) .",
    "algorithm [ alg : apsp ] , line [ line : min ] requires that we solve a problem of the form @xmath23 although this appears to be a _ linear - time _ operation ( in @xmath1 ) , we note that it can be reduced to @xmath24 ( in the expected - case ) if we know the permutations that sort @xmath25 and @xmath26 .",
    "the sorted values of @xmath26 will be reused for every value of @xmath27 , and likewise the sorted values of @xmath25 will be reused for every value of @xmath28 .",
    "lines [ line : funnystart][line : min ] of algorithm [ alg : apsp ] are sometimes referred to as the `` funny matrix multiplication '' problem : replacing @xmath29 with @xmath30 yields the traditional version of matrix multiplication .",
    "kerr @xcite showed that it is @xmath5 if only the operations @xmath31 and @xmath32 are allowed .",
    "we find that under reasonable conditions on @xmath25 and @xmath26 , an expected - case sub - cubic solution exists , requiring only @xmath31 and @xmath32 .    a graph @xmath11 @xmath33 [ line : funnystart ] @xmath34 [ line : min ]",
    "the following elementary lemma is the key observation required in order to solve ( eq .  [ eq : max3 ] ) efficiently :    if the @xmath35 smallest element of @xmath25 has the same index as the @xmath36 smallest element of @xmath26 , then we only need to search through the @xmath37 smallest values of @xmath25 , and the @xmath38 smallest values of @xmath26 ; any values ` behind ' these can not possibly contain the smallest solution .",
    "[ main_lemma ]    this observation is used to construct algorithm [ alg1 ] .",
    "here we iterate through the indices starting from the smallest values of @xmath25 and @xmath26 , stopping once both indices are ` behind ' the minimum value found so far ( which we then know is the minimum ) . this algorithm is demonstrated pictorially in figure [ fig : alg1 ] .",
    "two vectors @xmath25 and @xmath26 , and permutation functions @xmath39 and @xmath40 that sort them in increasing order ( so that @xmath41 $ ] is the smallest element in @xmath25 ) * initialize : * @xmath42 , @xmath43 $ ] , @xmath44 $ ] + @xmath45 $ ] , @xmath46+\\mathbf{v}_b[\\mathit{best}]$ ] @xmath47 $ ] , @xmath46+\\mathbf{v}_b[\\mathit{best}]$ ] [ line2 ] @xmath48",
    "[ if1 ] @xmath49 $ ] @xmath46 + \\mathbf{v}_b[\\mathit{best}]$ ] @xmath50 $ ] [ endif1 ] [ line : repeat ]   @xmath51    an upper - bound on the expected - case running time of algorithm [ alg1 ] is given by the following theorem :    the _ expected _ running time of algorithm [ alg1 ] is @xmath24 .",
    "[ the : alg1 ]    the expected - case running time arises under the assumption that @xmath25 and @xmath26 are uncorrelated .",
    "the running time approaches @xmath52 as @xmath25 and @xmath26 become increasingly correlated , and it approaches @xmath53 as @xmath25 and @xmath26 become increasingly anti - correlated . algorithm [ alg1 ] shall be analysed in detail in section [ sec : analysis ] .",
    "a graph @xmath11 @xmath33   @xmath54 @xmath55      using algorithm [ alg1 ] , we can solve the all - pairs shortest path problem in @xmath4 in the expected - case , for graphs with edge - weights in @xmath3 with no negative cycles .",
    "this is shown in algorithm [ alg : fast ] .",
    "for dense graphs , our method has worst - case performance @xmath22 , and best - case performance @xmath56 .",
    "our algorithm requires @xmath57 memory .",
    "also note that algoritm [ alg1 ] can exploit sparsity in the graph structure : the algorithm may terminate as soon as it reaches entries with infinite weight  thus if only @xmath58 edges are viable , our algorithm has worst - case performance @xmath59 ( meaning that it does not surpass johnson s algorithm on sparse graphs @xcite ) .      to our knowledge , the only existing sub - cubic approach is due to @xcite ( for edge weights taking small integer values ) ; our algorithm shall not surpass this _",
    "per se _ , as it is not _",
    "deterministic _ ",
    "it depends on the distribution of the edge weights , and it is certainly possible to adversarially generate graphs yielding worst - case performance .",
    "our algorithm has best - case and worst - case performance of @xmath56 and @xmath22 respectively ; thus it does not surpass floyd - warshall on dense graphs in the worst - case .",
    "unlike floyd - warshall it is able to exploit graph sparsity , though it does not have better worst - case performance than johnson s algorithm . in short , our algorithm does not improve upon existing solutions in the worst - case , though under reasonable conditions , it has lower complexity than existing algorithms .",
    "we shall see in section [ sec : experiments ] that our algorithm is significatly faster than floyd - warshall in practice , making it a viable solution to real - world all - pairs shortest path problems , despite its lack of worst - case guarantees .",
    "in this section we shall determine the expected - case running time of algorithm [ alg1 ] .",
    "algorithm [ alg1 ] traverses @xmath25 and @xmath26 until it reaches the smallest value of @xmath60 for which there is some @xmath61 for which @xmath62 $ ] . if @xmath2 is a random variable representing this smallest value of @xmath60 , then we wish to find @xmath63 .    by representing a permutation of the digits @xmath64 to @xmath1 as shown in figure [ fig : perms ]",
    ", we observe that @xmath60 is simply the width of the smallest square ( expanding from the top left ) that includes an element of the permutation ( i.e. , it includes @xmath65 and @xmath66 $ ] ) .    [ cols=\"^,^,^,^ \" , ]     simple analysis reveals that the probability of choosing a permutation that does not contain a value inside a square of size @xmath60 is @xmath67 this is precisely @xmath68 , where @xmath69 is the cumulative density function of @xmath2 .",
    "it is immediately clear that @xmath70 , which defines the best and worst - case performance of algorithm [ alg1 ] .    using the identity @xmath71 ,",
    "we can write down a formula for the expected value of @xmath2 : @xmath72 thus the expected - case running time of our all - pairs shortest path solver ( assuming uncorrelated sub - problems ) is @xmath73 . we show in the following section that @xmath74 .",
    "although ( eq .  [ eq : runtimek1 ] ) precisely defines the running time of algorithm [ alg1 ] , it is not easy to ascertain the speed improvement it achieves , as the values to which the summations converge for large @xmath1 are not obvious . here , we shall try to obtain an upper - bound on their performance , which we shall assess experimentally in section [ sec : experiments ] . in doing so we shall prove theorem [ the : alg1 ] .",
    "consider the shaded region in figure [ fig : perms ] ( c ) .",
    "this region has a width of @xmath58 , and its height @xmath60 is chosen such that it contains precisely one non - zero value .",
    "let @xmath75 be a random variable representing the height of the grey region needed in order to include a non - zero entry .",
    "we note that @xmath76 our aim is to find the smallest @xmath58 such that @xmath77 .",
    "the probability that none of the first @xmath60 samples appear in the shaded region is @xmath78 next we observe that if the entries in our @xmath79 grid do not define a permutation , but we instead choose a _ random _ entry in each row , then the probability ( now for @xmath80 ) becomes @xmath81 ( for simplicity we allow @xmath60 to take arbitrarily large values ) .",
    "we certainly have that @xmath82 , meaning that @xmath83 is an upper bound on @xmath84 , and therefore on @xmath63 .",
    "thus we compute the expected value @xmath85 this is just a geometric progression , which sums to @xmath86 .",
    "thus we need to find @xmath58 such that @xmath87 clearly @xmath88 will do .",
    "thus we conclude that @xmath89    we will show that this upper bound is empirically tight in the following section .",
    "for our first experiment , we compare the performance of algorithm [ alg1 ] to the nave linear time solution .",
    "we generate @xmath90 uniform samples from @xmath91 to obtain the lists @xmath25 and @xmath26 .",
    "@xmath1 corresponds to the size of the graph in question .",
    "the performance of algorithm [ alg1 ] is shown in figure [ fig : exp1 ] ; the value reported is simply the value of @xmath92 upon termination of the algorithm ; this is compared to @xmath1 itself , which is the number of elements read by the nave solution .",
    "the upper - bounds we obtained in the previous section are also reported , while the true expected performance ( i.e. , ( eq .",
    "[ eq : runtimek1 ] ) ) .",
    "visually , we find that our upper - bound is empirically very close to the true performance , suggesting that the bound is reasonably tight .",
    "the expected - case running time of our algorithm was obtained under the assumption that the variables were uncorrelated , as was the case for the previous experiment .",
    "we suggested that we will obtain worse performance in the case of negatively correlated variables , and better performance in the case of positively correlated variables ; we will assess these claims in this experiment .",
    "we report the performance for two lists ( i.e. , for algorithm [ alg1 ] ) , whose values are sampled from a 2-dimensional gaussian , with covariance matrix @xmath93,\\ ] ] meaning that the two lists are correlated with correlation coefficient @xmath94 .",
    "performance is shown in figure [ fig : correlated ] for different values of @xmath94 ( @xmath95 , is not shown , as this is the case observed in the previous experiment ) .    in real graphs",
    ", @xmath94 shall be the correlation coefficient between @xmath96 and @xmath97 ( which is free over @xmath98 ) . unless @xmath94 is equal to precisely @xmath99 for all @xmath19 , @xmath9 , and @xmath65",
    ", we obtain a sub - cubic solution .",
    "whether we observe positive , negative , or zero correlation will depend on the statistics of the graphs in question .",
    "we generate dense graphs of size @xmath1 with edge weights sampled uniformly in @xmath101 .",
    "the performance of our algorithm , compared to algorithm [ alg : apsp ] and the floyd - warshall algorithm is shown in figure [ fig : compare ] .",
    "we note that our algorithm is faster than algorithm [ alg : apsp ] after only @xmath102 , meaning that its computational overhead is negligible .",
    "it is faster than floyd - warshall after @xmath103 .",
    "we have presented an expected - case subcubic solution to the problem of funny matrix multiplication , resulting in an expected - case @xmath4 solution to the all - pairs shortest path problem .",
    "the running time of our method depends on the distribution of edge weights for the graph in question , though we achieve performance at least as good as the expectation under reasonable conditions .",
    "our algorithm is significantly faster than floyd - warshall in practice , making it a viable solution to real - world all - pairs shortest path problems .",
    "we would like to thank pedro felzenszwalb for alerting us to the link between inference in graphical models and the all - pairs shortest path problem .",
    "nicta is funded by the australian government s _ backing australia s ability _ initiative , and the australian research council s _ ict centre of excellence _ program ."
  ],
  "abstract_text": [
    "<S> it has been shown by alon et al .  that the so - called ` all - pairs shortest - path ' problem can be solved in @xmath0 for graphs with @xmath1 vertices , with integer distances bounded by @xmath2 . </S>",
    "<S> we solve the more general problem for graphs in @xmath3 ( assuming no negative cycles ) , with expected - case running time @xmath4 . while our result appears to violate the @xmath5 requirement of `` funny matrix multiplication '' ( due to kerr ) </S>",
    "<S> , we find that it has a sub - cubic _ expected time _ </S>",
    "<S> solution subject to reasonable conditions on the data distribution . </S>",
    "<S> the expected time solution arises when certain sub - problems are uncorrelated , though we can do better / worse than the expected - case under positive / negative correlation ( respectively ) . whether we observe positive / negative correlation depends on the statistics of the graph in question . in practice , </S>",
    "<S> our algorithm is significantly faster than floyd - warshall , even for dense graphs . </S>"
  ]
}