{
  "article_text": [
    "turbulence is one of the most challenging and unsolved problems of physics . theoretical or exact analysis of turbulence has been rare due to the complex nonlinearities present in the equations .",
    "therefore , major attempts to understand turbulence has been through experiments and numerical simulations . over time very powerful supercomputers and software tools have emerged , that have propelled the computational capabilities of turbulent flows to unimaginable heights .    some of the popular schemes to solve fluid flows are _ finite difference , finite element , finite volume , spectral elements , pseudo - spectral , vortex method _ ,",
    "the pseudo - spectral method  @xcite is most accurate among them , and it employed for studying small - scale turbulence . in the present paper",
    "we will describe the design and capability of a pseudo - spectral code named `` tarang '' , which has been developed by our group .",
    "tarang is a sanskrit word that means  waves \" .",
    "tarang is an object - oriented parallel pseudo - spectral code that can simulate flows in fluids , magnetofluids , convection , magnetoconvection etc .",
    "the convective flow module can also be used to solve rayleigh - taylor instability and turbulence , stratified flows , nonboussinesq convection , and passive scalars , etc .",
    "we designed tarang in an object - oriented fashion for generality and easy adoptability to solve varied problems .",
    "we make use of fast libraries , fftw ( fastest fourier transform in the west ) and blitz++ for efficiency .",
    "the code is neatly segregated into libraries and src directory .",
    "the fluid , magnetohydrodymics ( mhd ) , convection solvers etc .",
    "make use of the libraries , and they are arranged in the src directory .",
    "we will describe the design issues and various features of tarang in the following sections .",
    "in tarang we use the object - oriented features of c++ to design general purpose libraries to create solvers for the incompressible fluid flows .",
    "for example , a library function _ compute_nlin",
    "_ computes @xmath0 for all basis functions . a solver containing many complex features and boundary conditions , and more field variables",
    "are easily constructed using these functions .",
    "main features including the class structures of tarang are described below .",
    "the handling of arrays and mathematical functions is computationally slow in c++ .",
    "fortunately , several efficient c++ libraries are available to perform the above tasks .",
    "blitz_++ for tarang since it handles multidimensional arrays in a nice and succinct manner .",
    "the other libraries with similar functions are _ boost , ndarrays _ , and _ eigen _ , but presently we continue our development with blitz++ .",
    "pseudospectral codes use fft ( fast fourier transforms ) heavily . in a typical code , approximately 80% of the computational time is spent of fft .",
    "fftw is the most popular and the most efficient parallel fft library available today , therefore we use fftw in our code .      a pseudo - spectral code uses basis functions to expand the real - space functions .",
    "the choice of the basis functions depend critically on the boundary conditions .",
    "@xmath1 , where @xmath2 are the wavenumber and real - space coordinates respectively , is the natural choice for periodic boundary conditions .",
    "convection , channel flows etc .",
    "however involves walls .",
    "all the components of the velocity fields at the wall must vanish for the no - slip boundary condition .",
    "chebyshev and legandre polynomials are used to expand such functions . for the free - slip boundary condition ,",
    "the velocity field perpendicular to the wall , and the perpendicular gradient of the horizontal velocity components are zero .",
    "sine and cosine functions are obvious and simple choices for such simulations .",
    "spherical harmonics are natural choice for spherical simulations .",
    "tarang focusses on basis - independent libraries , so we have designed the basis functions in a modular fashion . at present tarang",
    "has four and scft ( sin / cos - fourier ) basis functions that can simulate flows in a box geometry under periodic boundary conditions ( all directions ) and free - slip boundary conditions along @xmath3 , and periodic along @xmath4 and @xmath5 directions .",
    "the scft basis functions with appropriate modifications has been also used to simulate flows with free - slip boundary conditions along all the directions .",
    "the no - slip boundary conditions has been successfully tested for channel flow , but this module will be integrated with tarang soon .",
    "the spherical geometry and cylindrical geometry will be implemented in future .",
    "primary functions related to the basis functions are _ forward_transform _",
    "( transformation from the real space to fourier space ) , _ inverse_transform _ ( transformation from the fourier space to the real space ) ,",
    "computation of energy spectrum etc .",
    "we use fftw for majority of transform operations .",
    "the class structure of tarang is illustrated in fig .",
    "[ fig : incfluid ] .",
    "the class _ incfluid _ contains the incompressible velocity field and the associate solvers .",
    "this is the final class that inherits more classes .",
    "we describe the main features of the classes below .              the class _ cvf _ stands for _ complex vector field_. it contains three dynamic arrays associated with the three components of the velocity or magnetic fields in the fourier space . as mandated by fftw",
    ", the size of each array is @xmath6 that spans wavenumbers @xmath7 $ ] in four basis , and @xmath8 $ ] in scft basis .",
    "these arrays contains complex numbers that represent the fourier amplitude of the vector field .",
    "the arrays are created dynamically at the run - time .",
    "forward and inverse transforms , and input / output of the vector fields are some of the main functions of the class _ cvf_.      the class _ rvf _ stands for _ real vector field _ , and it contains three dynamic arrays to represent the vector fields in the real space .",
    "we still create complex arrays of the size @xmath6 for ease of fftw and blitz++ operations ; here the real and imaginary parts of a complex number represent two adjacent points in the real space .",
    "the class _ csf _ stands for _ complex scalar field_. it contains a dynamic arrays associated with a scalar field , e.g. , temperature in the fourier space .",
    "the indexing of the array is similar to that of _",
    "cvf_.      the class _ rsf _ stands for _ real scalar field _ , and it contains a dynamic array associate with a scalar .",
    "the array features are same as that for * rvf*.    the above four classes reside in directory named _",
    "fields_.      the class _",
    "incvf _ , acronym for _ incompressible vector field _ , contains most crucial functions of the solver .",
    "_ incvf _ inherits classes _ cvf , rvf , nlin _ , _",
    "energytr_. the classes _ cvf , rvf _ contain the velocity field in the fourier and real space respectively .",
    "the class _ nlin _ contains three arrays for storing the nonlinear term @xmath9 , where the symbol @xmath10 represents the fourier transform .",
    "in addition , _ nlin _ inherits _ csf _ , whose array is used for storing the pressure field .",
    "the class _ energytr _ contains function for computing energy flux , shell - to - shell energy transfer etc .",
    "@xcite .",
    "the class _ incvf _ also contains three arrays _ force_i _ to store the force fields , and two array _",
    "vf_temp , * vf_temp2 _ to save temporary fields .",
    "it also has an array _",
    "vf_temp_r _ that is used for storing temporary arrays in real space .      the class _ incsf _ is used for a scalar field accompanying incompressible velocity field . for example , in rayleigh bnard convection this class is used to represent the temperature field .",
    "_ incsf _ inherits a _ csf _ and a _ rsf _ to store the scalar field in the fourier and real space respectively ( see fig .",
    "[ fig : incsf ] ) .",
    "it also contains arrays _ nlin , force _ , and _",
    "sf_temp _ to store nonlinear term @xmath11 , forcing , and temporary array .",
    "the class _ incvf _ has many functions .",
    "however , _",
    "compute_nlin _ is one of the most important functions of this class .",
    "we will describe this function as an illustration of tarang function :    .... void incvf::compute_nlin ( )   {                         * v1r = * v1 ;        * v2r = * v2 ;       * v3r = * v3 ;       //",
    "inverse transform of * vir using       // * vf_temp_r as temporary array      rv_inverse_transform(*vf_temp_r ) ;                             //",
    "vr[i ] - > vr[i]^2 stored in nlin[i ]                                           compute_rsprod_diag ( ) ;                                            //",
    "nlin[i]= di t[vr[i]^2 ] ;       //",
    "t = forward transform      // di = derivative along i - th dirn      nlin_diag_forward_transform_derivative(*vf_temp_r ) ;               //",
    "vr[i ] = vr[i]*vr[j ]      compute_rsprod_offdiag ( ) ;         //",
    "vr[i ] = t(vr[i]*vr[j ] )                                                                     rv_forward_transform_rsprod(*vf_temp_r ) ;                          //",
    "nlin[i ] = dj[t(uj * ui ) ]      derivative_rsprod_vv ( ) ;                                       } ....    the comments above the c++ statements explain the logic of the functions .",
    "related functions compute the nonlinear term in the presence of scalar field and another vector field .",
    "* void compute_nlin_scalar(incsf & t ) : nlin_i = @xmath9 and t.nlin_i = @xmath12 , where t.f is the scalar field . * void compute_nlin_rb(incsf & t ) : same as compute_nlin_scalar(incsf & t ) . * void compute_nlin(incvf & w ) : nlin_i = @xmath13 and w.nlin_i = @xmath14 , where @xmath15 is the vector field associated with the _ incvf _ class _ w_. * void compute_nlin(incvf & w , incsf & t ) : nlin_i = @xmath13 , and w.nlin_i = @xmath14 , and t.nlin = @xmath12 , with the same interpretation as given above .",
    "the class _ incfluid _ inherits _ incvf _ and _ time_. major functions of this class deal with time advancement of solver , forcing function , and input / output .",
    "the files and their associated functions are defined within this class . at present , the code includes euler , runge - kutta second order ( rk2 ) , and runge - kutta fourth order ( rk4 ) for the time advance function . the forcing function is used to include the buoyancy term in rayleigh - bnard convection ( rbc ) , coriolis force in the rotating turbulence etc .    for input / output , we have the option of reading / writing the data either the ascii format or in high density format(hdf5 ) format .",
    "the hdf5 part of the code is being integrated with the main code .",
    "also note that the classes _ incvf _ and _ incfluid _ have multiple inheritance .",
    "we invoke the library functions discussed above to create solvers for fluid , magnetohydrodynamics , passive scalar , rbc flows etc .",
    "we illustrate a code segment containing the time - loop of fluid solver for an illustration .    .... //   a code segment of the fluid solver   //",
    "read initial condition         u.read_init_cond ( ) ;       int   iter=0 ;   //",
    "iterations       u.tnow = u.tinit ;      do       {          u.compute_force ( ) ;            u.compute_nlin ( ) ;          u.add_force ( ) ;                u.compute_pressure ( ) ;            u.tdt = u.get_dt ( ) ;          u.tnow = u.tnow + u.tdt ;          iter++ ;           u.time_advance ( ) ;          // field at new time          u.output_all_inloop ( ) ;      }      while ( u.tnow < u.tfinal ) ; ....    in the above code segment , _ u _ is an instantiation of the class _ incfluid _ which contains the incompressible velocity field .",
    "most of the functions are obvious .",
    "the function _",
    "u.get_dt ( ) _ computes @xmath16 using cfl condition .",
    "for the rbc , the above code segment is modified slightly .",
    "we create an instantiation @xmath17 of the class _ incsf _ to represent the temperature field .    ....",
    "// a code segment of the rbc solver   //",
    "read initial condition         u.read_init_cond(t ) ;          int   iter=0 ;   //",
    "iterations       u.tnow = u.tinit ;      do       {          u.compute_force(t ) ;           u.compute_nlin(t ) ;          u.add_force(t ) ;               u.compute_pressure ( ) ;            u.tdt = u.get_dt(t ) ;          u.tnow = u.tnow + u.tdt ;          iter++ ;           u.time_advance(t ) ;          // field at new time          u.output_all_inloop(t ) ;      }      while ( u.tnow < u.tfinal ) ; ....",
    "we have performed simulations on fluids , convective , and mhd flows using tarang on grids from @xmath18 to @xmath19  @xcite .",
    "the reader is referred to the published work for the scientific details . in the following discussion",
    "we detail some of the validations we performed before we launched large simulations .",
    "rayleigh - bnard convection ( rbc ) is an idealized version of the thermal convection in fluid . in the set up",
    ", a layer of incompressible fluid is confined between two thermally conducting plates separated by a distance @xmath20 .",
    "the bottom plate is heated and an adverse temperature gradient @xmath21 is set across the fluid layer .",
    "the system is governed by the following equations : @xmath22 where @xmath23 is the velocity field , @xmath24 is the perturbation in the temperature field from the steady conduction profile , and @xmath25 is the vertically directed unit vector .",
    "the equations are nondimensionalized by choosing length scale as @xmath20 , velocity scale as @xmath26 , and temperature scale as @xmath27 , where @xmath28 is the thermal diffusivity of the fluid .",
    "two non dimensional parameters in the equations are the rayleigh number , @xmath29 and the prandtl number , @xmath30 , where @xmath31 is the coefficient of the volume expansion , @xmath32 is the acceleration due to gravity , and @xmath33 is the kinematic viscosity of the fluid .",
    "we also use another parameter , reduced rayleigh number @xmath34 , where @xmath35 is the critical rayleigh number .",
    "the top and bottom boundaries are considered to be stress free and perfectly conducting : @xmath36 we assume periodic boundary conditions along the horizontal direction ( @xmath3 and @xmath4-direction ) .",
    "the boundary conditions chosen here are ideal .",
    "however they allow us to choose fourier and @xmath37 or @xmath38 basis functions ( scft ) in our dns .",
    "the amount of heat transported in the convection process is measured by the nusselt number ( @xmath39 ) , which is defined as the ratio of total heat flux to the conductive heat flux .",
    "using the nondimensionalization defined earlier , it can be shown @xmath40 where , @xmath41 stands for spatial averaging .",
    "please refer to thual  @xcite , for a detailed derivation of the expression for nusselt number .",
    "thual  @xcite numerically solved the eqs .",
    "[ eq : ns]-[eq : continuity ] under the above boundary conditions ( eq .  [ eq : bc ] ) using a pseudo - spectral code .",
    "his simulations were performed in a two - dimensional ( 2d ) box ( aspect ratio @xmath42 ) for @xmath43 to 70 and @xmath44 . to verify tarang we compare nusselt numbers obtained in our simulations with those of thual s . the above set of eqs .",
    "( [ eq : ns]-[eq : continuity ] ) are solved numerically using tarang under the above boundary conditions ( eq .  [ eq : bc ] ) .",
    "we use same geometry ( _ i.e. _  2d box with aspect ratio @xmath45 ) as used by thual .",
    "we use fourier basis functions for representation along the @xmath3 , and @xmath37 or @xmath38 functions for representation along the @xmath5 direction ( scft basis ) .",
    "the validation results are shown in table  [ rbc_table ] .",
    "@xmath39 values obtained with tarang are in very good agreement with those of thual s until oscillation sets in the system .",
    "c c c c c @xmath46 & thu1 & thu2 & thu3 & tarang +   + 2 & 2.142 &  &  & 2.142 + 3 & 2.678 &  &  & 2.678 + 4 & 3.040 & 3.040 &  & 3.040 + 6 & 3.553 & 3.553 &  & 3.553 + 10 & 4.247 & 4.244 &  & 4.243 + 20 & 5.363 & 5.333 & 5.333 & 5.333 + 30 & 6.173 & 6.105 & 6.105 & 6.105 + 40 & 6.848 & 6.742 & 6.740 & 6.740 + 50 & 7.441 & 7.298 & 7.295 & 7.295 + 70 &  & oscil . &",
    "& 8.267 +    [ rbc_table ]",
    "tarang has been organized in a modular manner , so parallelization of the code was quite straight forward .",
    "another major advantage was availability of parallel fftw .",
    "we essentially adopt fftw s strategy for dividing the arrays etc . if @xmath47 is the number of available processors , we divide each of the arrays into @xmath47 segments .",
    "for example , a complex array @xmath48 is split into @xmath49 segments , each of which is handled by a processor .",
    "the other major parallel tasks needed is the multiplication in real space , which is handled by individual processors .",
    "input / output is presently handled by the master node that collects / distributes data from the processor nodes .",
    "we are planning to implement parallel input / output using hdf5 functions .",
    "graphics processing units ( gpus ) are getting popular in high performance computing due to their larger number of cores .",
    "we have ported the fft part of tarang to gpus , and have observed a reasonable speedup .",
    "we are in the process of porting the entire code to multiple gpu platform .",
    "we have successfully performed simulations for fluid , mhd , and convective flows for grids up to @xmath19 on several platforms including param yuva ( centre for advanced computing , pune ) , eka ( computational research laboratory , pune ) , hpc and chaos ( both at iitk kanpur ) .",
    "attempts are being made to run turbulence simulations on higher grids .",
    "we have solved channel flow using chebyshev and fourier basis functions .",
    "we will be porting the full implementation of the above basis function to be able to solve rbc and mhd flows under no - slip or mixed boundary conditions at the walls .",
    "the other planned modules are flows for the cylindrical and spherical geometry .",
    "we are also attempting to test and operationalize the magnetoconvection module .",
    "tarang exploits the object - oriented programming features of c++ to build flow solvers for incompressible fluid , mhd , and convection .",
    "we adopt a modular approach where general purpose functions are assembled to create solvers for different situations .",
    "this approach is proving to be very useful for constructing a large scale parallel softwares for fluid flows ."
  ],
  "abstract_text": [
    "<S> in this paper we describe the design and implementation of tarang , a pseudospectral code to simulate turbulent flows in fluids , magnetohydrodynamics ( mhd ) , convection , passive scalar , etc . </S>",
    "<S> we use the object - oriented features of c++ to abstract operations involved in the simulation . </S>",
    "<S> tarang has been validated and used for solving problems in convection and mhd . </S>"
  ]
}