{
  "article_text": [
    "in supervisory control theory ( sct ) @xcite @xcite , the control problem associated with a discrete - event system ( des ) is to enforce controllable and nonblocking behavior of the plant that is admissible by the specification . when applying sct to a real application , there are two big questions that require a user to answer , that is , are we doing the right thing , and are we doing things in the right way .",
    "the first question is about the correctness of the plant and requirement models .",
    "the second question is about correctness of supervisor synthesis , which , if the computational complexity is not a concern , has been properly answered in the sct community .",
    "when computational complexity is indeed a big concern , several efficient synthesis approaches have been proposed in the literature , e.g. , @xcite @xcite @xcite , which can ensure correct behaviours of the closed - loop system with low computational complexity .",
    "the first question , on the other hand , has been a long - standing hurdle for the sct to be adopted by the industry because so far there is no efficient way to identify potential errors in plant models or requirement models .",
    "the current practice is to synthesize a supervisor based on a given plant model and requirements .",
    "an empty supervisor is usually an indication that something is wrong either in the model or in the requirements , which will prompt a system designer to undertake model or requirement updates .",
    "the current sct and its relevant tools can assist the designer to quickly locate the problems in the model that lead to emptiness of the supervisor .",
    "the real challenge is how to determine whether the plant model and the requirements are correct , when the supervisor synthesis returns a non - empty supervisor . in this case",
    "it usually requires not only syntactic correctness but also semantic correctness , i.e. , the designer has to understand the true meaning and impact of every transition in the synthesized supervisor .",
    "thus , to make a supervisor small enough for a designer to understand its function becomes extremely important .",
    "+ a supervisor carries two kinds of information : the key information at each state for event enabling / disabling and marking , and the information that tracks the evolution of the plant . the latter may contain some redundancy because the plant itself also carries such evolution information . in principle",
    ", it is possible to remove redundant transitional information from the supervisor , which will not mess up with the first kind of information , i.e. , a reduced supervisor can still ensure the same control capability as that of the original supervisor .",
    "this is the key idea used in vaz and wonham s paper on supervisor reduction @xcite , which relies on the concept of control cover .",
    "they proved two useful reduction theorems , and proposed a corresponding ( exponential time ) reduction algorithm . to overcome the computational complexity involved in supervisor reduction , su and wonham made a significant extension in @xcite by first relaxing the concept of control cover , then providing a polynomial - time reduction algorithm based on a special type of control cover called control congruence , and finally showing that the minimal supervisor problem ( msp ) of computing a supervisor with minimal state size is np - hard . a polynomial - time lower bound estimation algorithm provided in @xcite",
    "has indicated that in many applications minimum supervisors can be achieved by using control congruence in polynomial time . since then , this reduction algorithm has been used in many case studies , and the outcomes are promising .",
    "one major application of supervisor reduction is in supervisor localization @xcite , which aims to create a control - equivalent distributed implementation of a given centralized supervisor .",
    "+ the supervisor reduction theory proposed in @xcite has two major setup assumptions : ( 1 ) only full observation is considered ; ( 2 ) a supervisor under consideration is a sublanguage of the plant , and there exists a one - to - one mapping from the state set of the supervisor to the state set of the plant , which can be easily satisfied by applying supremal synthesis . since then , many questions have been raised by users .",
    "for example , can we apply supervisor reduction on partially reduced supervisors , which may not necessarily be sublanguages of a given plant , or can we apply supervisor reduction in cases with partial observation ? some result has been reported in the literature about the second question , see e.g. , [ zcw16 ] .",
    "the main objective of supervisor reduction is to ensure control equivalence between the original supervisor and a reduced supervisor .",
    "the fundamental questions are ( 1 ) * q1 : * what information ensures control equivalence , even under partial observation , and ( 2 ) * q2 : * what information determines the reduction rate , which is the main performance index of supervisor reduction .",
    "after so many years since @xcite @xcite were published , these questions are still open . in this paper",
    "we would like to provide an answer .",
    "we will first propose a generalized supervisor reduction theory , which is applicable to all feasible supervisors , regardless of whether they are under full observation or partial observation - in the latter case , a supervisor is in general not a sublanguage of the plant .",
    "we will show that for each feasible supervisor @xmath0 of a plant @xmath1 , there exists a feasible supervisor @xmath2 derivable from subset construction on the synchronous product of @xmath1 and @xmath0 such that all feasible supervisors that are control equivalent to @xmath0 with respect to @xmath1 and normal with respect to @xmath0 , i.e. , all transitions in those supervisors are not redundant , can be derived via quotient construction based on a properly chosen control cover on @xmath2 .",
    "this result will answer our first question : ( * q1 * ) what information is critical for ensuring control equivalence .",
    "after that , we will define a partial order `` @xmath3 '' on those feasible supervisors by using the key information about event enabling / disabling and state marking such that for any two control equivalent supervisors @xmath4 and @xmath5 with respect to @xmath1 , if @xmath4 is finer than @xmath5 , i.e. , @xmath6 , then the minimum reduced supervisor induced by a minimum control cover on @xmath4 is no bigger than the one induced by a minimum control cover on @xmath5 .",
    "this result provides an answer to the second question : ( * q2 * ) what information determines the reduction rate . as a direct consequence of this result ,",
    "as long as control equivalence holds , a feasible supervisor under full observation always results in a reduced supervisor no bigger than the one induced from a supervisor under partial observation .",
    "the whole theory is independent of a specific choice of the observability definition such as observability @xcite , normality @xcite or relative observability @xcite - these definitions are lumped into the property of control feasibility , which states that a feasible supervisor must apply the same control law to all transitional sequences which can not be distinguished based on observations .",
    "+ the remaining of the paper is organized as follows . in section",
    "ii , we provide preliminaries on supervisor reduction . in section iii",
    "we discuss critical information for ensuring control equivalence .",
    "then in section iv we talk about information that determines reduction efficiency .",
    "we draw conclusions in section v.",
    "given an arbitrary finite alphabet @xmath7 , let @xmath8 be the free monoid with the empty string @xmath9 being the unit element and the string concatenation being the monoid operation .",
    "given two strings @xmath10 , @xmath11 is called a _",
    "prefix substring _ of @xmath12 , written as @xmath13 , if there exists @xmath14 such that @xmath15 , where @xmath16 denotes the concatenation of @xmath11 and @xmath17 .",
    "any subset @xmath18 is called a _",
    "language_. the _ prefix closure _ of @xmath19 is defined as @xmath20 . given two languages @xmath21 , let @xmath22 denote the concatenation of two sets .",
    "let @xmath23 .",
    "a mapping @xmath24 is called the _ natural projection _ with respect to @xmath25 , if    1 .",
    "@xmath26 , 2 .",
    "@xmath27 3 .",
    "@xmath28 .    given a language @xmath18 , @xmath29 .",
    "the inverse image mapping of @xmath30 is @xmath31 given @xmath32 and @xmath33 , the _ synchronous product _ of @xmath34 and @xmath35 is defined as @xmath36 , where @xmath37 and @xmath38 are natural projections .",
    "clearly , @xmath39 is commutative and associative . +",
    "a plant is modelled as a _ deterministic finite - state automaton _ , @xmath40 , where @xmath41 stands for the state set , @xmath7 for the alphabet , @xmath42 for the ( partial ) transition function , @xmath43 for the initial state and @xmath44 for the marker state set . here",
    "we follow the notation system in @xcite and use @xmath45 to denote that the transition @xmath46 is defined .",
    "the domain of @xmath47 can be extended to @xmath48 , where @xmath49 for all @xmath50 , and @xmath51 .",
    "the _ closed _ behavior of @xmath1 is defined as @xmath52 , and the _ marked _ behavior of @xmath1 is @xmath53 .",
    "@xmath1 is _ nonblocking _ if @xmath54 .",
    "we say @xmath1 is _ reachable _ if for each @xmath50 there exists @xmath55 such that @xmath56 .",
    "from now one we will only consider reachable automata . we will use @xmath57 to denote the size of the state set @xmath41 . in some circumstances ,",
    "when the state set is not explicitly mentioned , we also use @xmath58 to denote the size of an automaton , which is equal to the size of its state set .",
    "+ given two finite - state automata @xmath59 ( @xmath60 ) , the _ synchronous product _ of @xmath61 and @xmath62 , denoted as @xmath63 , is a ( reachable ) finite - state automaton @xmath64where the ( partial ) transition map @xmath47 is defined as follows : @xmath65 it has been shown that the automaton synchronous product is commutative and associative .",
    "thus , it can be applied to an arbitrarily finite number of finite - state automata . in this paper",
    "we will only focus finite - state automata , whose alphabets are the same . in this case , a transition is allowed in the synchronous product if all component automata allow it .",
    "+ let @xmath66 , where disjoint @xmath67 ( @xmath68 ) and @xmath69 ( @xmath70 ) denote respectively the sets of _ controllable _ ( _ observable _ ) and _ uncontrollable _ ( _ unobservable _ ) events .",
    "let @xmath71 be the collection of all _ control patterns_. a _",
    "( feasible ) supervisor of @xmath1 under partial observation @xmath72 _ is defined as a finite - state automaton @xmath73 such that    * @xmath74 } ( \\forall z\\in z)\\ , \\{\\sigma\\in\\sigma|\\delta(z,\\sigma)!\\}\\in\\gamma$ ] , * @xmath75 } ( \\forall s , s'\\in l(s))\\ , p_o(s)=p_o(s')\\rightarrow \\delta(z_0,s)=\\delta(z_0,s')$ ] .",
    "the first property says that a supervisor can only disable controllable events , thus , all uncontrollable events must be allowed in the control pattern ( or command ) at each state @xmath76 .",
    "this property can be ensured by enforcing controllability @xcite on the closed - loop system behaviors .",
    "the second property says that a supervisor will issue the same control pattern ( or command ) to strings , which are observation equivalent under @xmath77 .",
    "this property ensures implementation feasibility of the supervisor , and can be enforced by various types of observability properties proposed in the ramadge - wonham supervisor control paradigm , e.g. , observability @xcite , normality @xcite , and relative observability @xcite .",
    "it can be checked that the second property implies that @xmath78 namely unobservable events can only be selflooped at some states , and any transition between two different states must be observable .",
    "the closed - loop behavior of the system is denoted by two languages : the closed behavior @xmath79 and the marked behavior @xmath80 .",
    "+ to illustrate the aforementioned concepts and facilitate subsequent development , we use a simple running example of a single - tank system depicted in figure [ fig : cyber - security-1 ] , which consists of        one water supply source whose supply rate is @xmath81 , one tank , and one control valve at the bottom of the tank controlling the outgoing flow rate @xmath82 , whose value depends on the valve opening and the water level @xmath83 .",
    "we assume that the valve can only be fully open or fully closed to simplify our illustration , and in case of a full opening , the water level @xmath83 can only go down .",
    "the water level @xmath83 can be measured , whose value can trigger some predefined events , denoting the water levels : _ low _",
    "( h = l ) , _ medium _ ( h = m ) , _ high _ ( h = h ) , and _ extremely high _ ( h = eh ) .",
    "a simple plant model @xmath1 of the system is depicted in figure [ fig : cyber - security-2 ] ,    , scaledwidth=90.0% ]    where the alphabet @xmath7 contains all events shown in the figure .",
    "the actions of opening the valve ( @xmath84 ) and closing the valve ( @xmath85 ) are controllable but unobservable , and all water level events are observable but uncontrollable . in the model",
    "we use a shaded oval to denote a marker state , i.e. , state 5 and state 9 in figure [ fig : cyber - security-2 ] .",
    "assume that we do not want the water level to be extremely high , i.e. , the event h = eh should not occur . to prevent state 9 from being reached , we compose a requirement @xmath86 shown in figure [ fig : cyber - security-3 ] , whose alphabet is @xmath87h = l , h = m",
    ", h = h , h = eh@xmath88 , but the event h = em is never allowed in the model .",
    "a controllable and observable sublanguage , i.e. , a closed - loop behavior @xmath89 , can be synthesized by using the standard ramadge - wonham supervisory control paradigm , which is also depicted in figure [ fig : cyber - security-3 ] .",
    "( left ) and the controllable and observable sublanguage @xmath90 ( right),scaledwidth=90.0% ]    the corresonding feasible supervisor @xmath0 via subset construction on @xmath90 is depicted in figure [ fig : supervisor - reduction-1 ] .    ,",
    "scaledwidth=80.0% ]    we can see that in @xmath0 all unobservable events are selflooped at some states , and transitions between different states are all labeled by observable events .",
    "+ for a plant @xmath1 , there may exist more than one supervisor that can fulfil a control objective , e.g. , to ensure the closed - loop system behavior to be contained in a predefined requirement language @xmath91 .",
    "two supervisors @xmath4 and @xmath5 of @xmath1 are _ control equivalent _",
    "@xcite if @xmath92 and @xmath93 .",
    "let @xmath94 be the collection of all feasible supervisors of @xmath1 under partial observation @xmath77 , which are control equivalent to a given supervisor @xmath0 .",
    "it is desirbale to find one supervisor @xmath95 such that for all @xmath96 we have @xmath97 , i.e. , the supervisor @xmath98 has the minimum number of states .",
    "unfortunately , it has been shown in @xcite that finding @xmath98 is np - hard , even for a supervisor under full observation , which relies on the concept of _ control covers _ - each control cover is a group of states in @xmath0 that are `` control compatible'',whose exact meaning will be explained shortly .",
    "thus , by groupong those compatible states of @xmath0 together , we may get a new supervisor @xmath99 such that ( 1 ) @xmath99 is control equivalent to @xmath0 ; ( 2 ) @xmath100 ( ideally , @xmath101 ) . in the next couple of sections",
    "we will investigate which information is responsible for control consistency , and which is for size reduction .",
    "given a plant @xmath40 and a supervisor @xmath102 , at each state @xmath103 there are four pieces of information shown below :    * let @xmath104 with @xmath105 be the ( @xmath0-)enabled event set at state @xmath103 .",
    "* let @xmath106 with @xmath107 be the ( @xmath0-)disabled event set at state @xmath103 .",
    "* let @xmath108 with @xmath109 be the @xmath0-marking indicator at state @xmath103 .",
    "* let @xmath110 with @xmath111 be the @xmath1-marking indicator at state @xmath103 .",
    "the @xmath112enabled event sets can be easily obtained by simply checking the transition structure of @xmath0 . to determine other sets for each state @xmath103",
    ", we can first construct the synchronous product @xmath113 , and then check each state tuple @xmath114 in the product associated with the state @xmath103 .",
    "+ as an illustration , let s revisit that supervisor @xmath0 for the single - tank system depicted in figure [ fig : supervisor - reduction-1 ] . by undertaking the synchronous product @xmath113 we can obtain the transition structure recognizing @xmath90 shown in the right picture of figure [ fig : cyber - security-3 ] . from that structure",
    "we can get the following :    * @xmath115h = l , h = m@xmath88 , @xmath116 , @xmath117 , @xmath118 , * @xmath119q@xmath120=0 , q@xmath120=1 , h = l , h = m@xmath88 , @xmath121 , @xmath122 , @xmath123 , * @xmath124q@xmath120=0 , q@xmath120=1 , h = l , h = m , h = h@xmath88 , @xmath125 , @xmath126 , @xmath127 , * @xmath128q@xmath120=1 , h = m , h = h@xmath88 , @xmath129q@xmath120=0@xmath88 , @xmath130 , @xmath131 .",
    "+    let @xmath132 be a binary relation , where @xmath133 iff the following two properties hold :    1 .",
    "@xmath134 , 2 .",
    "@xmath135 .",
    "the first condition requires that any event enabled at one state can not be disabled at the other state .",
    "the second condition requires that both states must have the same marking status , if they are reachable by strings from the marked behavior of @xmath1 .",
    "notice that @xmath136 is not transitive , thus , it is not an equivalence relation .",
    "any two states satisfying @xmath136 may potentially be merged together , if their suffix behaviors are `` compatible '' , which is precisely captured in the following concept .",
    "+    given a control cover @xmath137 on @xmath0 , we construct an induced supervisor @xmath138 , where @xmath139 such that @xmath140 , @xmath141 , and @xmath142 is the partial transition map such that for each @xmath143 and @xmath144 , @xmath145 if @xmath146 is chosen to satisfy the following property : @xmath147.\\ ] ] in general , there may exist more than one choice of @xmath146 satisfying the above property . a random selection among multiple choices is usually adopted .",
    "we now have the first result .",
    "+    @xmath148 constructed above is a feasible supervisor , which is control equivalent to @xmath0 .",
    "@xmath149    proof : 1 .",
    "we first claim that @xmath150 .",
    "let @xmath151 . if @xmath152 , then @xmath153 . since @xmath140 , we have @xmath154 .",
    "therefore @xmath155 , namely @xmath156 .",
    "let @xmath157 ( @xmath158 ) . because    @xmath159 we have    @xmath160",
    "since @xmath161 is a control cover on @xmath162 , by definition 1 and the definition of @xmath163 we have @xmath164 therefore , @xmath165 . since @xmath151 , we have @xmath166 .",
    "therefore @xmath167 , namely @xmath168 by taking the prefix closure on both sides , and recall that @xmath169 , we have @xmath170    \\2 . for the reverse inclusion , let @xmath171 .",
    "if @xmath152 then , as @xmath172 , @xmath173 .",
    "suppose @xmath174 . then @xmath165 , so there are @xmath175 and @xmath176 such that @xmath177 , namely @xmath178 . by the definition of the control",
    "cover @xmath179 , @xmath180 , so either @xmath181 or @xmath182 but since @xmath183 , we conclude @xmath181 , namely @xmath173 . of course",
    ", by definition of the control cover @xmath179 , there follows @xmath184 for some @xmath185 . in general , let @xmath186 . repeating the foregoing argument k - fold",
    ", we see that @xmath171 implies @xmath173 .",
    "this shows that @xmath187 .",
    "let @xmath167 .",
    "as shown above , @xmath188 with @xmath189 . since @xmath190 , there exists @xmath191 , namely @xmath192 . by the definition of control",
    "cover , we know that there is @xmath193 such that @xmath194 , namely @xmath195 . at the same time , @xmath196 implies @xmath197 . by definition of control",
    "cover @xmath179 , we get @xmath198 , namely @xmath199 , and @xmath151 , as required .    so far we have shown that @xmath200 and @xmath201 . finally , we need to show that @xmath148 is a feasible supervisor , namely those two conditions must hold .",
    "the control existence condition obviously hold because the construction of @xmath148 from @xmath0 does not disable any event more than @xmath0 does .",
    "since @xmath0 is feasible , namely the control existence condition holds , we know that this condition must hold for @xmath148 . for the second condition of control feasibility , notice that all unobservable events are selflooped at some states in @xmath0 , by the definition of control cover @xmath179 , it is clear that those unobservable events are also selflooped in some states in @xmath148 .",
    "thus , the control feasibility condition holds for @xmath148 , which completes the proof.@xmath202 + theorem 1 indicates that we can start with any given plant @xmath1 and feasible supervisor @xmath0 to generate another feasible supervisor @xmath99 , which is control equivalent to @xmath0 with respect to @xmath1 , by applying the aforementioned construction induced by a properly chosen control cover on @xmath0 .",
    "the interesting part of this story is that we do not need to know how we get that @xmath0 in the first place .",
    "thus , we have a unified way of undertaking supervisor reduction regardless of whether @xmath0 is under full observation or partial observation . as an illustration ,",
    "let s revisit that single - tank system , whose feasible supervisor @xmath0 is depicted in figure [ fig : supervisor - reduction-1 ] .",
    "based on the aforementioned analysis about those four sets , i.e. , @xmath203 , @xmath204 , @xmath205 and @xmath206 , for each state @xmath103 , we can check that the set @xmath207 is a control cover .",
    "the resulting induced supervisor @xmath148 is depicted in figure [ fig : supervisor - reduction-2 ] .",
    ", scaledwidth=60.0% ]    we can easily check that @xmath148 is control equivalent to @xmath0 with respect to @xmath1 . from @xmath148",
    "we can see that what @xmath0 really does is to prevent the valve from being closed when the water level is high , which matches our expectation perfectly .",
    "+ next , we will present a result similar to the generalized quotient theorem in @xcite .",
    "+    given a plant @xmath1 and a feasible supervisor @xmath0 , by computing the synchronous product of @xmath1 and @xmath0 , i.e. , @xmath113 , we can obtain the closed - loop ( closed and marked ) behaviours .",
    "it is well know that , by applying subset construction on @xmath113 with respect to @xmath208 followed by insering selfloops of projected unobservable events at appropriate states in the resulting automton , we can derive a feasible supervisor , say @xmath2 , which can be shown control equivalent to @xmath0 .",
    "the following main result shows that any normal feasible supervisor , which is control equivalent to @xmath0 with respect to @xmath1 , can be constructed from @xmath2 by using a proper control cover on @xmath0 .",
    "+    let @xmath2 be constructed as above .",
    "then for any normal feasible supervisor @xmath209 with respect to @xmath0 , which is control equivalent to @xmath0 with respect to @xmath1 , there exists a control cover @xmath179 on @xmath2 such that some induced feasible supervisor @xmath148 is des - isomorphic to @xmath209.@xmath149    proof : with @xmath210 and @xmath211 , for each @xmath212 , let @xmath213 and define @xmath214 .",
    "we now check that @xmath179 is a control cover on @xmath2 .    by normality of @xmath209",
    ", we have @xmath215 for all @xmath212 .",
    "since @xmath2 is obtained by the subset construction , for each @xmath103 , there is @xmath216 with @xmath217 and @xmath218 .",
    "hence , @xmath219 .",
    "this shows that @xmath220 covers @xmath162 .",
    "next , fix @xmath212 and let @xmath221 with @xmath222 .",
    "we need to show that @xmath223 . since @xmath2 is constructed via subset construction , we know that for all @xmath173 , there exists @xmath224 such that @xmath225 . in addition , @xmath226 .",
    "since @xmath227 , there exists @xmath228 such that @xmath229 and @xmath230 .",
    "thus , we know that there exists @xmath231 such that @xmath232 and @xmath233 . since @xmath209 is a feasible supervisor , we know that @xmath234 .",
    "thus , @xmath235 .",
    "since @xmath236 , there exists @xmath237 such that @xmath238 and @xmath239 .",
    "if there exists @xmath240 such that @xmath241 , we know that there must exist @xmath242 such that @xmath243 , @xmath244 and , because @xmath209 is a feasible supervisor , we have @xmath245 . since @xmath246 , we know that @xmath247",
    "thus , @xmath223 , namely @xmath248 , as required .",
    "next , we show that @xmath249 to this end , let @xmath212 and @xmath250 with @xmath251 . without loss of generality , assume that @xmath252 and @xmath253 .",
    "since @xmath252 , there exists @xmath151 such that @xmath254 .",
    "thus , @xmath255 .",
    "since @xmath227 , we know that there exists @xmath256 such that @xmath226 and @xmath257 . due to the subset construction , we know that there exists @xmath258 such that @xmath229 and , because @xmath209 is a feasible supervisor , we have @xmath230 .",
    "this means @xmath259 . since @xmath236 , for all @xmath237 with @xmath238 ,",
    "due to the subset construction and @xmath209 is a feasible supervisor , we can deduce that there exists @xmath260 such that @xmath244 , @xmath245 and @xmath261 .",
    "since @xmath253 , we know that @xmath262 . since @xmath259 , we can deduce that @xmath263 .",
    "thus , @xmath264 .",
    "since @xmath12 is arbitrarily chosen , we know that @xmath265 . thus , we have @xmath266 which is equivalent to @xmath249    finally , we need to show that for each @xmath212 and @xmath144 , there exists @xmath267 such that @xmath268 let @xmath269 and @xmath270 .",
    "clearly , there exists @xmath271 such that @xmath272 . by using an argument similar as above , we know that there exists @xmath224 such that @xmath273 , @xmath257 , and @xmath225",
    ". clearly , @xmath235 .",
    "thus , @xmath274 , as required .",
    "so far we have shown that @xmath179 is a control cover on @xmath2 . by theorem 1 we know that an induced @xmath148 is a feasible supervisor , which is control equivalent to @xmath0 with respect to @xmath1 .",
    "in addition , there exists a natural des - isomorphism @xmath275 thus , @xmath148 is des - isomorphic to @xmath209 , which completes the proof .",
    "@xmath202 + up to now we have developed a general theory on supervisor reduction , which unifies both the full observation case and the partial observation case . as a matter of fact",
    ", we can see that the concrete way of ensuring observability in a feasible supervisor is not important in achieving control equivalence during supervisor reduction . by knowing the plant @xmath1 and a feasible supervisor @xmath0 will be sufficient for us to construct a feasible supervisor , which is control equivalent to @xmath0 , and hopefully has a ( significantly ) smaller size .",
    "our case studies indicate that a supervisor with full observation usually allows a much higher reduction rate than what a supervisor with partial observation allows .",
    "an interesting question is what causes such discrepancy . in this section",
    "we will try to answer this question , which provides a deep insight on the actual effects of full / partial observations on supervisor reduction .",
    "+ given a plant @xmath1 and a feasible supervisor @xmath0 , each feasible supervisor @xmath96 carried four pieces of critical information captured by @xmath276 .",
    "we define a partial order `` @xmath3 '' among elements of @xmath277 , where for all @xmath278 ( @xmath60 ) , we say @xmath4 is _ finer than _ @xmath5 , denoted as @xmath6 , if for all @xmath173 let @xmath279 and @xmath280 , and we have    * @xmath281 and @xmath282 , * @xmath283 , * @xmath284 .    in other words , @xmath4 is finer than @xmath5 if for each pair of states @xmath285 in @xmath4 and @xmath286 in @xmath5 reachable by the same string in @xmath287 , the enaling and disablig event sets at @xmath285 are subsets of those at @xmath286 , and the values of the @xmath0-marking indicator and the @xmath1-marking indicator at @xmath285 are true imply that those values at @xmath286 are also true . informally speaking",
    ", @xmath4 carries less redundant ( or finer ) information than what @xmath5 does , in terms of ensuring control equivalence .",
    "+ we now use a simple example depicted in figure [ fig : supervisor - reduction-3 ] to illustrate this idea of partial order over control equivalent feasible supervisors .",
    "the alphabet of the plant @xmath1 is     ( left ) , supervisors @xmath4 ( right top ) and @xmath5 ( right bottom),scaledwidth=80.0% ]    @xmath288 , @xmath289 , and all events are observable for the sake of simplicity .",
    "it is not difficult to check that @xmath4 and @xmath5 are control equivalent , which essentially disable events @xmath290 and @xmath291 after firing the event @xmath292 . to check that @xmath4 is finer than @xmath5 , we notice that we only need to check those conditions for two strings @xmath293 and @xmath294 because for other strings in @xmath287 , @xmath4 and @xmath5 are the same . for @xmath293",
    ", we have @xmath295 in @xmath4 and @xmath296 in @xmath5 . clearly , @xmath297 , and @xmath298 .",
    "in addition , we can check that @xmath299 and @xmath300 , and @xmath301 and @xmath302 .",
    "thus , those conditions hold for @xmath293 . for @xmath294",
    "we have @xmath303 in @xmath4 and @xmath296 in @xmath5 . clearly , @xmath304 , and @xmath305 .",
    "in addition , we can check that @xmath306 , and @xmath307 .",
    "thus , we can conclude that @xmath4 is finer than @xmath5 .",
    "+    proof : recall that @xmath2 is obtained by applying subset construction on @xmath113 .",
    "thus , we know that the following properties hold :    * @xmath308 , * @xmath309 , * for any two strings @xmath310 , if @xmath311 , then @xmath312    thus , we know that @xmath313 from which we conclude that statement 1 ) is true",
    ".    to show statement 2 ) , let @xmath314 .",
    "then @xmath315 but there exists @xmath316 such that @xmath317 . clearly , @xmath256 but @xmath318 .",
    "in addition , due to the natural of subset construction , we can choose @xmath17 in such a way that @xmath319 .",
    "thus , we know that @xmath320 which means @xmath321 to show the opposite direction of set inclusion , let @xmath322",
    ". then there exists @xmath316 such that @xmath319 , @xmath323 and @xmath318 . by property ( b ) we know that @xmath317 . since @xmath0 is a feasible supervisor , by the property of control feasibility ,",
    "we know that for all @xmath324 with @xmath325 , if @xmath326 .",
    "thus , we can conclude that @xmath327 .",
    "thus , @xmath314 , which means @xmath328@xmath202 +    given a plant @xmath1 and a feasible supervisor @xmath0 , let * super * be constructed above .",
    "then for all @xmath96 , we have @xmath329.@xmath149    proof : for an arbitrary feasible supervisor @xmath96 , properties ( a)-(b ) in proposition 1 still hold . but property ( c ) does not necessarily hold . for this reason , by ( the first part of the proof of ) proposition 1 , it is not difficult to see that for all @xmath173 let @xmath330 and @xmath280 , and we have @xmath331 by using a similar argument as in the second part of the proof in proposition 1 , and the fact that the choice of @xmath17 to ensure @xmath319 may not be feasible for an arbitrary feasible supervisor @xmath99",
    ", we can easily conclude that @xmath332 . by definitions of functions of @xmath333 and @xmath334",
    ", we can check that @xmath335 implies @xmath300 , and @xmath336 implies @xmath302 .",
    "thus , we have @xmath329.@xmath202 + theorem 3 indicates that for all feasible supervisors in @xmath277 , @xmath2 has the finest information , which still ensures control equivalence .",
    "the interesting point is that for any feasible supervisor @xmath96 , we can construct @xmath2 by applying subset construction on @xmath337 , namely we can always obtain the finest feasible supervisor , which is control equivalent to @xmath0 with respect to @xmath1 .",
    "nevertheless , the size of @xmath2 could be big for a practical application .",
    "thus , supervisor reduction may be directly applied to any attainable feasible supervisor @xmath96 .",
    "the following result indicates that the supervisor reduction rate , which is defined as the ratio of the size of a ( minimally ) reduced supervisor and the size of the supervisor that we start with , solely depends on the fineness of the key information specified by those four functions - the finer the information , the higher the reduction rate . +    given a plant @xmath1 and a feasible supervisor @xmath0 , let @xmath338 be normal with respect to @xmath0 , and assume that @xmath6 .",
    "let @xmath339 and @xmath340 be minimum control covers of @xmath4 and @xmath5 respectively . then @xmath341.@xmath149    proof : let @xmath342 ( @xmath343 ) , and @xmath344 the compatibility binary relation .",
    "let @xmath345 be a minimum _ control cover _ on @xmath5 . by definition 1 ,    1 .",
    "@xmath346 , 2 .",
    "@xmath347 $ ] .    since @xmath5 is normal with respect to @xmath0",
    ", we can derive that for each @xmath348 there exists @xmath173 such that @xmath349 .",
    "for each @xmath350 , let @xmath351 we can easily check that @xmath352 since @xmath353 , we know that @xmath354 .",
    "let @xmath355\\wedge i\\in i_2\\}.\\ ] ] we now show that @xmath356 is a control cover of @xmath4 .",
    "first , we show that @xmath356 is a cover of @xmath357 . to see this , notice that @xmath358 .",
    "since @xmath4 is also normal with respect to @xmath0 , we know that @xmath356 must be a cover of @xmath357 .    to show that @xmath356 is a control cover of @xmath4 , we need to show that those two conditions hold . to see the satisfaction of the first condition ,",
    "for each @xmath359 and for all @xmath360 , we know that there exist @xmath361 such that @xmath362 and @xmath363 . on the other hand , let @xmath280 and @xmath364 .",
    "since @xmath6 , we know that    * @xmath281 and @xmath282 , * @xmath283 , * @xmath365 ,    and    * @xmath366 and @xmath367 , * @xmath368 , * @xmath369 .    since @xmath370",
    ", we have    * @xmath371 , * @xmath372 .",
    "thus , we can easily conclude that @xmath373 to show that @xmath374 it is clear that if @xmath375 , then by the definition of @xmath376 we know that @xmath377 .",
    "so we only need to show that when @xmath378 , we have @xmath379 .",
    "suppose it is not true .",
    "then with loss of generality , let @xmath380 and @xmath381 .",
    "since @xmath381 and @xmath382 , we can conclude that @xmath383 due to the control equivalence of @xmath4 and @xmath5 .",
    "but on the other hand , since @xmath6 , we know that @xmath380 implies that @xmath300 . thus , we have @xmath384 , @xmath300 , and @xmath383 , which contradicts our assumption that @xmath385 thus , we can only have @xmath379 , which means @xmath386 .    to see the satisfaction of the second condition , for each @xmath387 , @xmath144 , we know that there exists @xmath388 such that @xmath389 for each @xmath390 , if @xmath391 , there there are two cases .",
    "case 1 : there exists @xmath392 such that @xmath393 and @xmath271 . since @xmath394 and @xmath395 , we know that @xmath396 .",
    "thus , @xmath397 .",
    "case 2 : for all @xmath398 with @xmath399 , we have @xmath400 .",
    "then clearly @xmath401 because otherwise the first condition of control cover will be violated .",
    "thus , we still have that @xmath402 .",
    "thus , @xmath397 . so in either case , we can conclude that @xmath403 which completes our proof that @xmath356 is a contol cover of @xmath4 .    clearly , @xmath404 . on the other hand , if @xmath339 is a minimum control cover of @xmath4 , we know that @xmath405 .",
    "thus , we can conclude that @xmath341 .",
    "@xmath202 + as an illustration , in example 2 depicted in figure [ fig : supervisor - reduction-3 ] we know that @xmath6 .",
    "we can easily compute @xmath406 and @xmath407 , which are the minimum feasibles supervisors control equivalent to @xmath4 and @xmath5 respectively .",
    "the results are shown in figure [ fig : supervisor - reduction-4 ] below .",
    "( right top ) and @xmath407 ( right bottom),scaledwidth=80.0% ]    it is clear that @xmath408 , which matches the conclusion made in theorem 4 .",
    "+ with theorem 1 and theorem 4 we are finally able to answer the question : why the reduction rate is higher for a supervisor under full observation than that for a supervisor under partial observation . given a plant @xmath1 and a feasible supervisor @xmath409 , if @xmath410 happens to be observable with respect to @xmath411 @xcite for some observable alphabet @xmath412 , then there exists another feasible supervisor @xmath413 such that @xmath413 is control equivalent to @xmath409 with respect to @xmath1 , namely @xmath414 and @xmath415 . but notice that @xmath409 and @xmath413 work under different observation scenarios .",
    "the interesting part is that the same supervisor reduction procedure can be applied to both @xmath409 and @xmath413 , which again indicates that a specific choice of observability to derive @xmath413 is not critical .",
    "we have the following result .",
    "+    given a plant @xmath1 , let @xmath409 and @xmath413 be constructed above .",
    "assume that @xmath409 is des - isomorphic to @xmath416 and @xmath413 is des - isomorphic to the subset construction of @xmath417 .",
    "let @xmath418 and @xmath419 be the minimum reduced supervisors of @xmath409 and @xmath413 respectively , based on control cover construction .",
    "then we have @xmath420.@xmath149    proof : since @xmath409 is des - isomorphic to @xmath416 and @xmath413 is des - isomorphic to the subset construction of @xmath417 , both @xmath409 and @xmath413 are the finest supervisor of their kinds . since @xmath409 and @xmath413 are control equivalent with respect to @xmath1 , it is not difficult to check that for all @xmath421 , let @xmath422 and @xmath423 , and we have    1 .",
    "@xmath424 , 2 .",
    "@xmath425 , 3 .",
    "@xmath426 .",
    "thus , we can derive that @xmath427 , which by theorem 4 we can derive that the minimum control covers @xmath428 of @xmath409 and @xmath429 of @xmath413 satisfie @xmath430 . thus , by theorem 1 , we know that @xmath420 .",
    "@xmath202 + corollary 1 indicates that , for two control equivalent feasible supervisors , the one under full observation always results in a ( typically much ) smaller reduced supervisor than what the one under partial observation can achieve .",
    "for example , in the aforementioned example 2 , no matter whether the event @xmath292 is observable or unobservable , the closed - loop behavior @xmath431 is always controllable and observable , thus , @xmath4 and @xmath5 depicted in figure [ fig : supervisor - reduction-3 ] can be considered as supervisors under full observation and partial observation , respectively .",
    "it is clear that the supervisor @xmath4 under full observation results in a smaller reduced supervisor @xmath406 , which is control equivalent to @xmath4 .",
    "so far we have developed a generalized supervisor reduction theory , which is applicable to all feasible supervisors , regardless of whether they are under full observation or partial observation .",
    "we have shown that the generalized quotient theorem in @xcite for supervisors with full observation has a counterpart in the generalized reduction theory , which states that for each feasible supervisor @xmath0 of a plant @xmath1 , there exists a feasible supervisor @xmath2 derivable from subset construction on @xmath113 such that all feasible supervisors that are control equivalent to @xmath0 with respect to @xmath1 and normal with respect to @xmath0 can be derived via quotient construction based on a properly chosen control cover on @xmath2 .",
    "in addition , we have provided a specific way of ordering those feasible supervisors by using the key information described in those four functions such that for any two control equivalent supervisors @xmath4 and @xmath5 with respect to @xmath432 , if @xmath4 is finer than @xmath5 , i.e. , @xmath6 , then the minimum reduced supervisor induced from @xmath4 is no bigger than the one induced from @xmath5 . as a direct consequence of this result together with theorem 1 on the quotient construction , we know that , as long as control equivalence holds , a feasible supervisor under full observation always results in a reduced supervisor no bigger than the one induced from a supervisor under partial observation .",
    "our theory indicates that a specific choice of observability , e.g. , observability , normality or relative observability , does not play any significant role in supervisor reduction - they are all lumped into the property of control feasibility ."
  ],
  "abstract_text": [
    "<S> to make a supervisor comprehensible to a layman has been a long - lasting goal in the supervisory control community . </S>",
    "<S> one strategy is to reduce the size of a supervisor to generate a control equivalent version , whose size is hopefully much smaller than the original one so that a user or control designer can easily check whether a designed controller fulfils its objectives and requirements . after the first journal paper on this topic appeared in 1986 by vaz and wonham , which relied on the concept of control covers , in 2004 su and wonham proposed to use control congruences to ensure computational viability . </S>",
    "<S> this work is later adopted in the supervisor localization theory , which aims for a control equivalent distributed implementation of a given centralized supervisor . </S>",
    "<S> but after so many publications , some fundamental questions , which should have been addressed in the first place , have not been answered yet , namely what information is critical to ensure control equivalence , what information is responsible for size reduction , and whether the partial observation really makes things different . in this paper </S>",
    "<S> we will address these fundamental questions by showing that there does exist a unified supervisor reduction theory , which is applicable to all feasible supervisors regardless of whether they are under full observation or partial observation . </S>",
    "<S> our theory provides a partial order over all control equivalent feasible supervisors based on their enabling , disabling and marking information , which can be used to categorize the corresponding reduction rates . </S>",
    "<S> based on this result we can see that , given two control equivalent feasible supervisors , the one under full observation can always result in a reduced supervisor no bigger than that induced by a supervisor under partial observation .    supervisory control , supervisor reduction , control equivalence , partial observation </S>"
  ]
}