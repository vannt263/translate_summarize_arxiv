{
  "article_text": [
    "databases have become a vital part of the lhc experiments s software .",
    "the large amount of data needed to describe , set up and operate the detectors makes the db system an essential service for the experiments to run : these data , indeed , are used for the calibration of the physical responses of the detectors themselves .",
    "therefore , a project was started inside cms many years ago to set up a system able to populate the condition data efficiently .    this system has been successfully deployed and operated nicely last year during cosmic runs with and without magnetic field .",
    "important requirements constraining the possible db model design are :    * cms always requires to be able to operate without network connection to the outside world ( it meyrin included ) .",
    "therefore , an independent db infrastructure should reside in cms p5 network . * condition / calibration data access for the offline reconstruction shall hide to the user any underlying database technology .",
    "the storing and access mechanism should best match the object oriented paradigm for the ` c++ ` programming language used in the cms offline software ( ` cmssw`@xcite ) * offline condition data work - flow should fit a multi - tier structure as in the case for the event data .    having to tackle all these constraints ,",
    "the team involved in the cms db project@xcite , working in collaboration with the cern - it department , chose to rely on 3 database instances for storing non - event data :    1 .",
    "* omds * ( * o*nline * m*aster * * d**atabase * s*ystem ) is located in the online network at ip5 ; it stores the data needed for the configuration and proper settings of the detector , and the condition data produced directly from the front - end electronics .",
    "all tables contained in it are purely relational .",
    "* orcon * ( * o*ffline * r*econstruction * * c**ondition db * on*line subset ) is also located in the online network : it stores all the condition data needed for the reconstruction of physics quantities as well as for detector performance studies .",
    "these are a small subset of all the online quantities .",
    "the data in it are written using the pool - ora@xcite technology and are retrieved by the hlt programs as ` c++ ` objects for the offline software .",
    "* orcoff * ( * o*ffline * r*econstruction * * c**ondition db * o*ffline subset ) is located at the tier-0 site ( cern meyrin ) : it contains a copy of orcon , made through oracle streaming .",
    "it contains the entire history of all cms condition data and serves as an input source for both prompt reconstruction and the condition deployment service at tier-1/tier-2 sites .",
    "data contained in it are retrieved by the reconstruction algorithms as ` c++ ` objects for the offline software .",
    "the actual policy of the cms community is to write any condition / calibration data needed for offline purposes in orcon .",
    "oracle streaming provides the transfer from orcon to orcoff . in this paper",
    "we will mainly describe the condition data work - flow , i.e. non event data , stored in orcon / orcoff .",
    "attention will be focused on the system set - up to populate centrally the cms condition database and to monitor the database activity itself .",
    "non - event data can be classified in three main groups :    * * configuration data * : the data needed to bring the detector in running mode .",
    "this class includes voltage settings of power supplies , gas pressures , and any programmable parameter for front end electronics and trigger . * * condition data * : the data from any detector subsystem describing its state , usually uploaded in omds directly from detector back - end devices . for example the data control system ( dcs ) information are stored with the oracle interface provided by pvss@xcite . only a subset of these data is transferred to the offline system for detector performance studies . *",
    "* calibration data * : the data describing the calibration and alignment of the single pieces of the different sub - detectors . these quantities ( such as pedestal offsets , drift values , noise , alignments , etc ) are evaluated by running offline dedicated algorithms . since these data are needed both online , in order to be used by the hlt algorithms , and offline , in order to reconstruct properly the physical quantities coming from collision events , they must be stored in the offline condition databases .",
    "therefore , they should match the corresponding raw data coming from the collision events revealed by the detector .",
    "all these data need a tag and an interval of validity as meta - data .",
    "the interval of validity ( iov ) is the contiguous ( in time ) set of events for which non - event data are to be used in reconstruction .",
    "according to the use - case , the iov will be defined in terms either of gps - time ( mainly for condition data ) or run - number range ( usually for calibrations ) .",
    "while the iov for some electronic related conditions ( pedestals and noise ) is identical to the time interval in which these data were used in the online operations , some calibration data may posses an iov different from the time range in which they have been calculated .",
    "for this reason , the iov assignment for a given set of condition data is carried out at the offline level .",
    "each payload object , i.e. each data stored as pool - ora object in orcon / orcoff , is indexed by its iov and a tag , a label describing the calibration version , while the data themselves do not contain any time validity information ; when new better calibrations are evaluated , the tag labelling the data should be changed .",
    "the matching with the raw data from the collision events is indeed possible via these meta - data : the reconstruction algorithms for the analysis of a given run query the offline condition data corresponding to the same run grouped through a set of tags , called _ global tag_.",
    "different data usage and access from online to offline determines the overall architecture . in the online network ,",
    "the data are mainly written into the database .",
    "data size is expected to become very large ( several tbs ) , and , since condition data will constantly flow into the db , the time needed to store these data in omds is a critical issue .",
    "the online data are stored at random time , and the time when their storage occurs is usually not synchronous with respect to the time when they are read , since these data can be taken by different sources .",
    "furthermore , different data items must be accessible in order to be compared between each other .",
    "therefore , omds is designed with relational schemas : each sub - detector group designed its own db schema , reflecting as much as possible the detector structure .    on the contrary , in the offline network data",
    "are mainly read from the databases .",
    "these data must be synchronized with the event reprocessing , and grouped before they are read , so that they can be decoded according to predefined rules .",
    "an object oriented solution has been adopted for data stored in orcon / orcoff .",
    "the general data flow of non event data is the following@xcite : configuration data are prepared using the equipment management information and are loaded into the detector ( hardware and software ) . during data taking , the detector produces condition data , which are first stored in omds .",
    "the offline conditions subset is extracted and sent to the offline sites , as shown in figure [ fig : conddbarchitecture ] .",
    "the condition data needed by the hlt farm are loaded from orcon .",
    "a software application named popcon ( populator of condition objects ) operates the online to offline condition data transfer and encapsulates the relational data as pool - ora objects .",
    "popcon adds meta - data information ( tag and iov ) to the condition data , so that they can be read by the offline / hlt software .",
    "finally , data are transferred to orcoff , which is the main condition database for the cms tier-0 , using oracle streaming .    from orcoff data will be distributed to the other tier centers , through frontier@xcite packages .",
    "calibration data evaluated offline will be written to orcon , using popcon .",
    "collision event data are therefore processed using the offline condition data . as data taking proceeds",
    ", we can understand better and better how the detector works ; therefore , this will require new calibrations , hence new versions of condition data , identified by new tags .",
    "popcon@xcite transfers the conditions objects from a user - defined data source to the off - line database .",
    "popcon is based on the cmsrun infrastructure@xcite , so the base popcon application class is the edanalyzer@xcite . however , it is possible to use different data sources such as databases , root files , ascii files , etc . for each conditions",
    "object ( payload ) class a popcon application is created .",
    "the core framework consists of three parameterized classes , as can be seen in figure [ fig : popconschema ] :    * popcon * popconsourcehandler * popconanalyzer    the `` detector user '' provides the code which handles the data source and specifies the destination for the data , writing a derived class of popconsourcehandler , where all the online ( source handling ) code goes .",
    "the user instantiates his / her objects , provides the iov information for such objects and configures the database output module .",
    "popcon configuration file associates the tag name defined according to some specific rules , to the condition object .",
    "once the object is built , the popcon application writes the data to the specified database .",
    "subdetector code does not access the target output database : it only passes the objects to the output module .",
    "the analyzer object holds the source handling object .",
    "it also serves some additional functionality such as :    * locking mechanism * transfer logging * payload verification ( iov sequence ) * application state management * database output service    the writer in popcon iterates over the container of user objects and stores it in the user - configured data destination .    any transaction towards orcon",
    "is logged by popcon , and the process information is sent to a database account .",
    "a monitoring tool for this information was developed , in order to check the correctness of the various transactions , and to keep trace of every upload for condition data .",
    "in the 2008 global runs ( with or without the magnetic field ) the great majority of the condition data was transferred offline using a popcon application .",
    "great effort was devoted by the cms database project team in the integration of all the software and the infrastructural chain used to upload the calibration constants into the cms condition databases .",
    "many tools were provided in order to help the sub - detector responsible people to populate the database .",
    "indeed , a central procedure , based on an automatic uploader into orcon on a dedicated machine in the online network , was successfully deployed during 2008 , and will be the recommended way to populate orcon during 2009 data taking .      as stated above , each piece of condition data ( pedestals , lorentz angles , drift time , etc . )",
    "corresponds to a ` c`++ object ( `` condobjects '' ) in the cms software .",
    "each object is associated with a popcon application which writes the payload into orcon .",
    "table [ tab : page_layout ] lists all the condobjects used in 2008 , grouped according to the subsystem they belong to . for each object the type , the approximate data size in orcon and the upload frequency",
    "are also reported .",
    ".2008 cms condition objects list [ cols= \" < , < , < , < , < \" , ]      a central procedure@xcite was set up in 2008 for populating the cms condition databases : it exploits a central account , explicitly devoted to condition database population , in the cms online network . on that account a set of automatic jobs were centrally set up for any single sub - detector user , in order to both populate orcon and monitor any transaction to it .",
    "two possibilities are given to users :    1 .",
    "running automatically the application that reads from any online source , assigns tag and interval of validity , and uploads the constants into orcon ( mainly for condition ) .",
    "the time interval of the automatic jobs are negotiated with the users .",
    "using the account as a drop - box : users copy the calibrations in a light format into a dedicated folder , one for each sub - detector , and then these data are automatically exported in orcon ( mainly for offline calibrations ) .",
    "figure [ fig : dropbox ] shows a sketch of the central system used to populate the condition database .",
    "each sub - detector may transfer the payload onto the central popcon pc , that then automatically manages the exportation into the orcon db ( using a specific set of subdetector exports scripts ) .",
    "other automatic scripts ( e.g. ecal020 , dt020 ... ) check to see if new conditions have appeared in the online table , and , if so , perform the data transfer from omds to orcon .",
    "the popcon applications transfer each payload into the corresponding account , and all the log information in the popconlog account on orcon itself .",
    "each automatic job is associated with a `` watchdog '' tool that monitors its status .",
    "the job monitoring information are also logged into the popconlog account on orcon .",
    "a dedicated web interface , _ popcon monitor web interface _ , was set up on a cms web server in order to provide access to all the logged information for monitoring purposes .",
    "the monitor system is made of three layers :    * _ python _ code to query the popconlog account . * _ python - json _ code to produce a json ( javascript object notation ) string . *",
    "css web interface to configure the look and fill of the overall information .",
    "two important monitor web pages are then produced :    1 .",
    "an activity summary , in which the number of orcon transactions , the subsystem involved , the iov and tag can be displayed , according to the users requests .",
    "an example is shown in figure [ fig : popconact ] .",
    "2 .   the logs of all the central scripts , as produced by the watchdog tools . looking at these logs , the correct behaviour of the central uploader machine can be controlled , so that an alarm system , based on that information , can recognize if some exportations were not successful and , eventually , inform the end - user of the error occurred .",
    "a screenshot of the page is shown in figure  [ fig : watchdog ] .",
    "figure [ fig : popconact ] reports all the transactions towards the condition database accounts that occurring in a month of cosmic data taking . as the summary plot points out ,",
    "almost all sub - detectors used popcon to upload calibration constants to the condition databases .",
    "an average of one hundred popcon applications per day were run during the test runs in summer / fall 2008 , hence one hundred connections per day to the condition databases took place .    during the entire year 2008",
    ", the total amount of condition data written in the production database was approximatively 1 tb .",
    "indeed , no network problems , neither for the online - offline streaming , nor for frontier were detected .",
    "all the conditions and calibrations were properly evaluated during the cosmic ray test - runs in 2008 , leading to several global tags that were used for the reconstruction and the analysis of the cosmic ray data by the whole cms community .",
    "a robust system was set - up in order to upload , store and retrieve all calibration constants for the cms experiment .",
    "the system relies on oracle databases for data storage , and on the pool - ora technology , embedded in the popcon farmework ( written in ` c++ ` ) integrated in the overall cmssw architecture , for data handling .",
    "the whole chain was deployed and tested successfully during 2008 commissioning exercises with cosmic rays : these tests have demonstrated that the system we described is stable and robust enough for the 2009 - 2010 collision data taking .",
    "10 analysis environments for cms , c.d .",
    "jones et al . _",
    "j. phys . : conf .",
    "119 032027 _ .",
    "`` https://twiki.cern.ch/twiki/bin/view/cms/databasewikihome '' pool persistency framework for the lhc new developments and cms applications , z.xie et al .",
    "`` frontier science 2005 : new frontiers in sub nuclear physics , september 12 - 17,2005 milan , italy''_. the joint controls project framework , m. gonzalez - berges _ int . conf . on computing in high energy physics , march 2003 , la jolla , california_. cms offline conditions framework and services - chep 09 .",
    "cms conditions data access using frontier , b.blumenfeld et al .",
    "_ 2008 j. phys .",
    "119 072007_. `` https://twiki.cern.ch/twiki/bin/view/cms/swguidepopcondevelopersmanual '' the new cms event data model and framework , c.d .",
    "jones et al . , em proc . intl",
    "computing in high - energy physics ( chep 06 ) , cern , 2006 ; `` https://twiki.cern.ch/twiki/bin/view/cms/popconoperationsupport ''"
  ],
  "abstract_text": [
    "<S> reliable population of the condition databases is critical for the correct operation of the online selection as well as of the offline reconstruction and analysis of data . </S>",
    "<S> we will describe here the system put in place in the cms experiment to populate the database and make condition data promptly available both online for the high - level trigger and offline for reconstruction . </S>",
    "<S> the system , designed for high flexibility to cope with very different data sources , uses pool - ora technology in order to store data in an object format that best matches the object oriented paradigm for ` c++ ` programming language used in the cms offline software . in order to ensure consistency among the various subdetectors , a dedicated package , popcon ( populator of condition objects ) , </S>",
    "<S> is used to store data online . </S>",
    "<S> the data are then automatically streamed to the offline database hence immediately accessible offline worldwide . this mechanism was intensively used during 2008 in the test - runs with cosmic rays . </S>",
    "<S> the experience of this first months of operation will be discussed in detail . </S>"
  ]
}