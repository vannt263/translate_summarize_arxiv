{
  "article_text": [
    "software is hard to maintain .",
    "one cause for the difficulty lies in the increasing complexity of software systems . to accomplish a software maitenance task ,",
    "a developer needs to explore the information space of a software system and comprehend all relevant parts of the codebase .",
    "this exploration is both tedious and time - consuming . according to singer et al . , developers spend over @xmath0 of their time in navigating , searching and reading source code  @xcite .    due to the overwhelming complexity of software systems",
    ", developers often start maintenance tasks by searching for a starting point in the local codebase . a recent study conducted by ko et al .",
    "indicates that most ( @xmath1 out of @xmath2 ) software maintenance tasks start with local code search  @xcite .    to help developers search their codebase ,",
    "researchers have proposed several local code search tools that are integrated into popular ides .",
    "for instance , sando enhances the visual studio ide and instasearch is aimed for eclipse developers  @xcite .",
    "both of these search tools significantly improve upon the built - in search tools available in these ides in the following aspects : ( 1 ) they retrieve different levels of software entities , such as fields , methods , and classes , as search results , instead of retrieving lines of text ; ( 2 ) they rank the search results according to their relevance to the given search query ; and ( 3 ) these tools support multi - word searches , that is , querying by space - separated terms and retrieving software entities containing any of these terms .    regardless of their sophistication ,",
    "all search tools require developers issuing both specific and relevant queries to produce useful results .",
    "however , the size of the codebase under search as well as the vocabulary mismatch problem , where a domain concept is expressed differently in the code , often make this requirement unreasonable .",
    "empirical data collected from sando usage in the field further substantiates this conjecture . specifically , about @xmath3 of all sando queries fail , returning no results at all , which suggests developers in the field are facing difficulties in writing effective queries .    to solve this problem , we improve sando by a set of query recommendation techniques .",
    "these techniques fall into two categories : pre - search recommendations and post - search recommendations .",
    "the former recommends queries before a developer starts searching and the later recommends queries after a developer s search fails , that is , when the search returns no results .",
    "below , we present how these recommendation techniques assist developers to compose queries in a semi - automatic fashion that are better at finding the relevant code snippets .",
    "before detailing the recommendation techniques , we first briefly introduce the local code search tool called sando , the platform on which our query recommendation techniques are implemented and evaluated .",
    "sando is a state - of - the - art code search tool for visual studio developers  @xcite , which up to this point has been downloaded over three thousand times . according to our usage data collected from sando users , roughly forty developers use sando on a daily basis .",
    "figure  [ fig : sando ] presents the user interface of sando .",
    "sando supports multiple programming languages including c # , c++ , c and xml .    after installing sando ,",
    "a developer can issue queries in the search box at a , press the button on the right , and be presented by search results at b. next , the developer can examine the search results in one of two ways : by single clicking on a search result or by double clicking the search result .",
    "a single click triggers a pop - up menu that summarizes the search result , as illustrated by c and d in figure  [ fig : sando ] , where c shows the entire software entity , which can be the declaration of a class , a method , or a field ; and d shows the lines of code containing the search query ; the developer can also double click the search result to open the containing file in the visual studio editor .          to recommend queries , our recommendation techniques rely on five different data source components , namely the local dictionary , the term co - occurrence matrix , the verb - direct - object pairs , the software engineering thesaurus , and the general english thesaurus , which we will explain next .",
    "the first component used by our recommendation techniques is the local dictionary of the codebase under search .",
    "specifically , the local dictionary contains terms that appear in the codebase at least once . to construct the dictionary",
    ", we reuse the indexing performed by the sando search engine .",
    "the indexing process breaks each software entity from the codebase into terms ; later , after a developer issues a search query , the search engine retrieves the software entities whose indexed terms match with the given query as search results . taking the following code snippet as an example ,",
    "the sando search engine indexes the method ` perform ` to the terms of `` perform '' , `` output '' , `` func '' , `` invoke '' , `` input '' , `` finished '' , `` event '' , and `` finishedevent '' .",
    "in addition to indexing raw identifiers , sando indexes the terms that result from splitting the identifiers that are in camel case or underscore delimited format .    ....      void perform ( )      {          var output = func.invoke(input ) ;          if(finishedevent !",
    "= null )              finishedevent(this , output ) ;      } ....    sando performs either a entire indexing or an incremental indexing : entire indexing , performed when a developer opens a new project that sando has no cached index , traverses and collects terms for the entire project ; incremental indexing , on the other hand , monitors the changed part of a cached project and re - indexes that part .",
    "indexing the entire project of @xmath4 loc takes about @xmath5 seconds to finish ; incrementally indexing an updated c # file takes about @xmath5 milliseconds .",
    "the local dictionary consists of all the terms collected from indexing without redundancy . to facilitate searching this dictionary",
    ", we construct a binary search tree on these terms . taking the codebase of sando as an example",
    ", the local dictionary contains about two thousand different terms . finding a given term in the local dictionary costs trivial time to finish . using the local dictionary ,",
    "our recommendation technique can ensure that the recommended queries actually appear in the local codebase under search .",
    "in addition to the local dictionary , we maintain the collected terms from the local codebase through a co - occurrence matrix .",
    "the matrix has an equal number of rows and columns ; each column or row represents one term appearing in the local dictionary .",
    "each element in the matrix saves the count of two terms , as represented by the row and the column that occur together in the codebase .",
    "for instance , the element at [ red , blue ] is the count of occurrences of `` red '' and `` blue '' together . by appearing together ,",
    "we mean these two terms appear in the same software entity . again taking the method `",
    "perform ` in section  [ sec : local]as an example , because the method is an independent software entity , any two of the indexed eight terms appear together .    literally keeping",
    "the full co - occurrence matrix in memory is inefficient due to the observation that the matrix is usually sparse . to improve the memory - efficiency , our technique keep the matrix by using yale format , a data structure that maintains a sparse matrix using three rows of integers  @xcite .",
    "many code snippets conceptually correspond to performing certain actions on certain objects , such as `` open file '' , `` close stream '' and `` create instance '' .",
    "based on this observation , fry et al .",
    "proposed a text mining technique that collects these concepts , or verb - direct - object pairs , from a given codebase  @xcite . applying this technique , sando mines the verb - direct - object pairs from the code base under search , and",
    "caches them for recommending either the verb or the object when the developer queries the other part .",
    "for instance , supposing sando mined the verb - direct - object pair `` open file '' from the codebase under search .",
    "if the developer queries `` open '' , sando recommends `` file '' to the search query .",
    "similarly , if the developer queries `` file '' , sando recommends `` open '' to the original query .",
    "sando s recommendation techniques also tries to solve the vocabulary mismatch problem , which happens when a developer queries terms that do not appear in the codebase , however semantically relate to some terms that do .",
    "for instance , if the codebase under search uses `` retrieval '' consistently , then the developer s querying of `` search '' are unlikely to return useful results .",
    "to solve this problem , we applied a thesaurus - based technique . taking a term as input , the thesauri return synonyms that appear in the codebase as recommended queries .",
    "only using general english thesaurus is not enough because software development has developed many field - specific synonyms , such as `` instantiate '' to `` create '' and `` update '' to `` refresh '' .",
    "therefore , we apply the work of gupta et al .",
    "that mined the source code of open software projects , generating @xmath6 pairs of related terms . among these pairs ,",
    "about @xmath7 are field - specific  @xcite .",
    "in addition to the field - specific thesaurus , we also include a general english thesaurus to help the developer when the field - specific thesaurus fails .",
    "we derive the general english thesaurus from wordnet , which is database of english words with the relationship between them  @xcite .",
    "keeping the entire wordnet in memory is costly ; hence we only include the top @xmath8 most frequent terms in the english language .",
    "based on the aforementioned components , we next detail how sando computes and presents the recommended queries .",
    "the first category of our recommendation techniques assists developers before they query .",
    "these pre - search recommendations allow developers to select terms that are either frequent in the local codebase or closely related to the input .",
    "more precisely , the recommended queries originate from the following three sources : ( 1 ) the verb - direct - object pairs , ( 2 ) the identifiers , and ( 3 ) the co - occurring terms .    when the developer inputs a verb or a noun in the search box , a drop - down menu presents the verb - direct - object pairs which contain the term given in the search box .",
    "for instance , as illustrate in figure  [ fig : verbdo ] , when the developer inputs `` parse '' to the search box , the drop - down menu lists pairs such as `` parse file '' and `` parse method '' .",
    "when the developer inputs the prefix of cached identifiers , the drop - down menu presents the identifiers starting with the given prefix .",
    "for instance , the drop - down menu in figure  [ fig : identifiers ] shows identifiers starting with `` create '' , which is the developer s input in the search box",
    ". these identifiers could be method names , class names , and field names .",
    "sando retrieves these identifiers from the local dictionary .",
    "the third source of the recommended terms is the co - occurrence matrix .",
    "after the developer inputs a term in the search box , she can view the terms that co - occur with the term .",
    "different from the aforementioned two sources , sando presents the co - occurring terms through a tag cloud .",
    "the size of a term in the tag cloud indicates the comparative co - occurrence count .",
    "the bigger the font size of a term , the more frequent the term co - occurs with the term in the search box .    for instance , after the developer inputs `` program '' in the search box and clicks the cloud button near the search box , a tag cloud appears as illustrated in figure  [ fig : tagcloud ] . from the tag cloud",
    ", the developer can infer that `` code '' appears with `` program '' more frequently than `` data '' does .",
    "furthermore , each term in the tag cloud is a hyper link , the click on which adds the term to the original query .",
    "the reason for using the tag cloud instead of the drop - down menu is that the co - occurring terms significantly outnumber the identifiers and the verb - direct - object pairs ; presenting the co - occurring terms through the drop - down menu may be inconvenient for the developer to browse .",
    "the second category of the recommendation techniques helps developers when their manual queries fail , which happens when the queries contain terms not appearing in the local codebase .",
    "the post - search recommendation assumes that the failure is either due to the vocabulary mismatch problem or to misspelling .",
    "hence , the recommended terms are either the synonyms to the original terms or the original terms with corrected typos .",
    "figure  [ fig : post ] depicts the ui of the post - search recommendations after searching `` choice '' fails .    for a query leading to no search results",
    ", the recommendation technique first pre - processes the query by splitting it . using the terms in the local dictionary , we greedily extract the terms of the query that appear in the local codebase .",
    "our recommendation technique does not recommend replacements for these terms .",
    "for the remaining terms that do not appear in the local dictionary , the post - search recommendation goes through the following steps to compute the recommended replacements :        * step 1 : * for a term that does not appear in the local dictionary , sando first queries the software engineering thesaurus to find the synonyms of the term . after finding several synonyms",
    ", sando recommends them to the developer .",
    "sando filters the the recommended sysnonyms with the local dictionary to ensure that every recommended term appears in the local codebase at least once .",
    "* step 2 : * when finding no field - specific synonyms , our technique queries the general english dictionary to find synonyms . after finding several synonyms",
    ", sando recommends them to the developer .",
    "similar with step 1 , sando also filters these sysnonmys .    *",
    "step 3 : * if neither thesauri contains the synonyms of the given term , sando considers the term a typo .",
    "therefore , sando corrects the typo by using the terms in the local dictionary .",
    "a large body of existing research relates to ours . we briefly summarize them according to two aspects : search tools and recommendation techniques",
    ".    * search tools . * similar to sando , researchers have proposed multiple tools allowing developers to efficiently access the enormous information space . for instance , grechanik et al . proposed a search engine called exemplar that retrieves function - level code elements from the web and also visualizes them  @xcite .",
    "bazrafshan et al .",
    "presented a search tool that can retrieve code across the boundary of versions and branches in the source control system  @xcite .",
    "differing from these tools , sando searches code snippets from the local codebase .    * recommender systems .",
    "* recommender systems play an important role in the software engineering research .",
    "for instance , thummalapenta and xie presented parseweb that recommends method invocations sequence that bridges the starting object with the destination object  @xcite .",
    "ankolekar et al .",
    "proposed dhruv to recommend reusable artifacts to open source developers  @xcite . differing from these techniques , the recommendation techniques adopted by sando assist developers in composing promising queries .",
    "facing an ever - increasing codebase , developers often start tasks with searching their local code . however , even the state - of - the - art code search tools require developers recalling the text of the intended code snippets . to further bridge the gap between developers and their intended code snippets , we demonstrate a set of recommendation techniques integrated into sando . issuing recommendations both before and after a developer s search",
    ", our technique potentially mitigates developers cognitive burden when using local code search tools .",
    "this research was conducted during the first author s internship at abb research .",
    "we thank the help from vinay augustine , patrick francis , and will snipes .",
    "we also thank the comments from the development liberation front group members titus barik , michael bazik , brittany johnson , kevin lubick , john majikes , yoonki song and jim witschey .",
    "a. j. ko , b. a. myers , m. j. coblenz , and h. h. aung .",
    "_ an exploratory study of how developers seek , relate , and collect relevant information during software maintenance tasks_. ieee tse , 32(12):971 - 987 , 2006 ."
  ],
  "abstract_text": [
    "<S> developers spend a significant amount of time searching their local codebase . to help them search efficiently </S>",
    "<S> , researchers have proposed novel tools that apply state - of - the - art information retrieval algorithms to retrieve relevant code snippets from the local codebase . however , these tools still rely on the developer to craft an effective query , which requires that the developer is familiar with the terms contained in the related code snippets . </S>",
    "<S> our empirical data from a state - of - the - art local code search tool , called sando , suggests that developers are sometimes unacquainted with their local codebase . in order to bridge the gap between developers and their ever - increasing local codebase , in this paper we demonstrate the recommendation techniques integrated in sando . </S>"
  ]
}