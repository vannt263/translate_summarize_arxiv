{
  "article_text": [
    "_ program title : _ candia + _ journal reference : _ + _ catalogue identifier : _",
    "+ _ licensing provisions : _ none + _ programming language : _ c and fortran + _ computer : _ all + _ operating system : _ linux + _ ram : _ in the given examples , it ranges from 4 mb to 490 mb + _ keywords : _ dglap evolution equation , parton distribution functions , @xmath0-space solutions , qcd + _ pacs : _ 11.10.hi + _ classification : _ 11.5 quantum chromodynamics , lattice gauge theory , 11.1 general , high energy physics and computing .",
    "+ _ nature of problem : _ + the program provided here solves the dglap evolution equations for the parton distribution functions up to nnlo .",
    "+ _ solution method : _ + the algorithm implemented is based on the theory of the logarithmic expansions in bjorken-@xmath0 space + _ additional comments : _ + in order to be sure to get the last version of the program , we suggest to download the code from our official website of candia is ` http://www.le.infn.it/candia ` .",
    "+ _ running time : _ + in the given examples , it ranges from 1 to 40 minutes .",
    "the jobs have been executed on an intel core 2 duo t7250 cpu at 2 ghz with a 64 bit linux kernel .",
    "the test run script included in the package contains 5 sample runs and may take a number of hours to process , depending on the speed of your processor and the amount your ram . +",
    "perturbative predictions in qcd are going to be essential for the discovery of new physics at the lhc , the new hadron collider at cern , and for this reason the determination of the qcd background for important processes requires the analysis of cross sections at higher perturbative orders in an expansion in the strong coupling constant @xmath1 .",
    "by now , the level of theoretical accuracy reached in the calculation of several hadronic observables for lhc studies is rather impressive , and this has been possible thanks to the development of new perturbative techniques which have allowed to move from previous next - to - leading - order ( nlo ) determinations of several key processes , to the next order in accuracy , which is the next - to - next - to - leading order ( nnlo ) .",
    "these computations of the hard scatterings need to be accompanied by the corresponding nnlo dglap evolution in order to be phenomenologically and theoretically consistent",
    ". some available codes that deal with the dglap evolution are pegasus @xcite , based on the use of mellin moments , qcdnum @xcite and hoppet @xcite , both based on a discretization of @xmath0 and @xmath2 .",
    "there are several issues that need to be addressed when we move to this perturbative order .",
    "one of them concerns the size of the corrections , which are quite small compared to the nlo case ( respect to the leading order ( lo ) result ) , while another one is their dependence on the relevant scales ( factorization , renormalization ) of the process , which are arbitrary .",
    "the sensitivity on these scales is reduced by increasing the order of the perturbative expansion .",
    "a second point concerns the specific dependence of the result on the renormalization group evolution ( rge ) and on the way we select the solution of the corresponding equations .",
    "when a generic equation is defined in terms of a power expansion in some parameter ( coupling ) , its solution can be either power expanded in the same parameter or can be computed exactly , both approaches being legitimate options .",
    "this indetermination should be interpreted as a _ theoretical error _ which needs to be quantified .",
    "in fact , solving the rges in one way or in another is equivalent to a summation or to a resummation of the perturbative solution , with differences between the various methods which start appearing beyond a certain order .",
    "it is probably convenient , in order to understand the motivations for writing candia , to briefly go over a classification of the ways the dglap equation is solved numerically and characterize the difference between `` brute - force '' and `` expansion - based '' solutions of these equations .",
    "a brute - force solution is obtained by simply discretizing the equation by a finite difference method , and neglecting all the issues of perturbative accuracy that we have just mentioned .",
    "candia , on the other hand , is based on the implementation of analytical anstze which have been shown @xcite to be solutions of the evolution equations .",
    "these allow to keep track systematically of the logarithmic corrections which are included in the final solution and to control directly its logarithmic accuracy .",
    "being the logarithms accompanied by powers of @xmath1 , all the expanded solutions correspond to solutions of a given ( and different ) accuracy in the strong coupling .",
    "in particular , the program implements also resummed expansions , such as ( [ nlo_ansatz ] ) and ( [ nnlo_ansatz ] ) , which involve logarithms of more complicated functions .",
    "notice that in the dglap case  but the same issue appears in any equation whose right - hand - side is of a given accuracy in a parametric expansion  the kernel is only known up to a fixed order in @xmath1 , and therefore it is legitimate  in establishing the recursive form of the ansatz  to decide whether or not to drop all the information coming from the higher orders , orders over which we do not have complete control from the perturbative side and that are also present in the recursion relations .    in this sense , it is clear that the `` brute force '' solution is just one of the many solutions which can be obtained by the analytical expansions .",
    "it can be reproduced from an expansion - based approach by extending the ansatz so to include all the logarithmic powers of the form @xmath3 , with @xmath4 integers . in practice @xmath5 and @xmath6",
    "are finite integers , but chosen sufficiently large in the actual implementation of the numerical code .",
    "the approach followed in our program , though entirely formulated in @xmath0-space , shares some of the features which are typical of those mellin methods that also rely on an analytical ansatz .",
    "in fact also in this case the exact solution is obtained recursively @xcite .",
    "we also remark that the mellin method , such as the one implemented in @xcite , and our method overlap as for overall treatment of the logarithms , though they implement different partial summations .",
    "the proof that the various analytical anstze used by us are solutions of the evolution equations is obtained by construction , solving the recursion relations for the unknown coefficient functions of the expansion in mellin space @xcite .",
    "we have implemented two classes of solutions : the `` exact '' solutions and the `` truncated '' ones .",
    "the latter are obtained by retaining contributions to the expansion up to a certain power of @xmath1 , which can be chosen by the user .",
    "we have found that the numerical change induced by the variation of the ansatz on some hadronic observables at nnlo is of the order of a percent . though this variation is indeed small",
    "if compared to the change from lo to nlo of the cross section , it is comparable to its change from nlo to nnlo ( quantified to be around @xmath7 on the @xmath8 peak @xcite ) .",
    "for this reason , we think that candia can be of help in the studies of resonant processes where a large amount of experimental data can be collected , such as on the @xmath8 peak . here",
    "the small theoretical errors that are due either to the various ways of handling the evolution or to the changes induced by going from nlo to nnlo in the hard scatterings are far larger than the experimental statistical errors coming from the direct measurements at the lhc . in this work we are going to describe the basic features of our program and focus essentially on the evolution part . more tools which may be useful for qcd partonometry and for the search of extra @xmath9 will be released in the near future .",
    "we start by summarizing the notations and definitions that we will be using in the description of the program .",
    "the general mathematical structure of the dglap equation is @xmath10 where the convolution product is defined by @xmath11(x)=\\int_{x}^{1}\\frac{\\textrm{d}y}{y}a\\left(\\frac{x}{y}\\right)b(y)=\\int_{x}^{1}\\frac{\\textrm { d}y}{y}a(y)b\\left(\\frac{x}{y}\\right)\\ ] ] and the perturbative expansion of the kernels and of the beta function up to nnlo are respectively @xmath12 and @xmath13 where @xmath14 and @xmath15 @xmath16 is the number of colors and @xmath17 is the number of active flavors , selected by the mass condition @xmath18 , for a given factorization scale @xmath19 .",
    "we also denote with @xmath20 the renormalization scale .",
    "the evolution ( dglap ) kernels are distributions whose general form is given by @xmath21 with a regular part @xmath22 , a `` plus - distribution '' part @xmath23 and a delta - function term @xmath24 . given a continuous and differentiable function @xmath25 defined in the @xmath26 interval , but singular at @xmath27 , the action of the plus - distribution @xmath28_{+}$ ] is defined by@xmath29_{+}\\textrm{d}x=\\int_{0}^{1}\\left(f(x)-f(1)\\right)\\alpha(x)\\textrm{d}x,\\ ] ] where @xmath30 is a regular test function .",
    "alternatively , an operative definition ( that assumes full mathematical meaning only when integrated ) is the following @xmath31_{+}=\\alpha(x)-\\delta(1-x)\\int_{0}^{1}\\alpha(y)\\textrm{d}y.\\label{eq : def_plus}\\ ] ]    the parton distribution functions ( pdfs ) appear in the evolution , in general , multiplied by a factor @xmath0 .",
    "( [ eq : dglap ] ) for @xmath32 then reads @xmath33 .\\ ] ] we are now going to compute the convolution products that we actually evaluate in the program , having in mind the general form of the kernel ( [ eq : general_kernel ] ) .",
    "the treatment of the delta - function part is trivial @xmath34 = xp_{3}\\int_{x}^{1}\\frac{\\textrm{d}y}{y}\\delta(1-y)f\\left(\\frac{x}{y}\\right)= p_{3}\\bar{f}(x ) , \\label{eq : conv_3}\\ ] ] while for the regular part we get @xmath35 = x\\int_{x}^{1}\\frac{\\textrm{d}y}{y}p_{1}\\left(\\frac{x}{y}\\right)f(y)=\\int_{x}^{1}\\frac{\\textrm{d } y}{y}\\frac{x}{y } p_{1}\\left(\\frac{x}{y}\\right)\\bar{f}(y ) .",
    "\\label{eq : conv_1}\\ ] ] since the functions that we have to integrate are strongly varying or even singular at low @xmath0 , to enhance the numerical accuracy we introduce a new integration variable @xmath36 defined by @xmath37 , and eq .",
    "( [ eq : conv_1 ] ) is mapped into @xmath38 = -\\ln x\\int_{0}^{1}\\textrm{d}z\\ , x^{1-z}p_{1}(x^{1-z})\\bar{f}(x^z ) .",
    "\\label{eq : conv_1_mapped}\\ ] ]    finally , for the plus - distribution part we get , after some algebraic manipulations the relation @xmath39 = \\int_{x}^{1}\\textrm{d}y\\frac{p_{2}(y)\\bar{f}(x / y)-p_{2}(1)\\bar{f}(x)}{1-y}+p_2(1)\\bar{f}(x)\\ln(1-x ) \\label{eq : conv_2}\\ ] ] that with the mapping @xmath37 becomes @xmath39 = -\\ln x\\int_{0}^{1}\\textrm{d}z\\ , x^z\\frac{p_{2}(x^z)\\bar{f}(x^{1-z})-p_{2}(1)\\bar{f}(x)}{1-x^z}+p_2(1)\\bar{f}(x)\\ln(1-x ) .",
    "\\label{eq : conv_2_mapped}\\ ] ] the program , being entirely developed in ( bjorken s ) @xmath0-space uses the iteration of the convolution in the form defined above both in the non - singlet and singlet sectors .",
    "we start by defining the combinations @xmath40 @xmath41 from a mathematical point of view , the distributions belonging to the non - singlet sector evolve with a decoupled dglap equation of form ( [ eq : dglap ] ) , while the singlet combinations mix with the gluon distribution .",
    "the singlet dglap matrix equation is    @xmath42    or , in vectorial notation @xmath43    the general structure of the non - singlet splitting functions is given by @xmath44 @xmath45 where @xmath46 and @xmath47 are usually referred to as the `` valence '' and `` sea '' contributions .",
    "this leads to three types of non - singlet distributions which evolve independently : the flavor asymmetries @xmath48 governed by the combinations @xmath49 and the sum of the valence distributions of all flavors @xmath50 which evolves with @xmath51 notice that the quark - quark splitting function @xmath52 can be expressed as @xmath53 with @xmath54 denoting the so - called `` pure singlet '' terms .",
    "we remark that the non - singlet contribution is the most relevant one in eq .",
    "( [ eq : pqq ] ) at large @xmath0 , where the _ pure singlet _",
    "term @xmath55 is very small . at small @xmath0 ,",
    "on the other hand , the latter contribution takes over , as @xmath56 does not vanish for @xmath57 , unlike @xmath58 .",
    "the gluon - quark and quark - gluon entries are given by @xmath59 @xmath60 in terms of the flavor - independent splitting functions @xmath61 and @xmath62 .",
    "with the exception of the first order part of @xmath63 , neither of the quantities @xmath64 , @xmath65 and @xmath66 vanish for @xmath57 .    in the expansion in powers of @xmath67 of the evolution equations , the flavor - diagonal ( valence )",
    "quantity @xmath68 is of order @xmath67 , while @xmath69 and the flavor - independent ( sea ) contributions @xmath70 and @xmath71 are of order @xmath72 .",
    "a non - vanishing difference @xmath73 is present at order @xmath74 .",
    "the next step is to choose a proper basis of non - singlet distributions that allows us to reconstruct , through linear combinations , the distribution of each parton .",
    "the singlet evolution gives us 2 distributions , @xmath75 and @xmath76 , so we need to evolve @xmath77 independent non - singlet distributions . at nnlo",
    "we choose    1 .",
    "@xmath50 , evolving with @xmath78 ; 2 .",
    "@xmath79 ( for @xmath80 ) , evolving with @xmath81 ; 3 .",
    "@xmath82 ( for @xmath80 ) , evolving with @xmath83 ,    and use simple relations such as @xmath84 to perform the reconstructions of the various flavors .",
    "choosing @xmath85 in ( [ eq : comb_linns ] ) , we compute @xmath86 from the evolved non - singlets of type 1 and 2 and @xmath87 from the evolved singlet @xmath76 and non - singlet of type 3",
    ". then from the non - singlets 2 and 3 we compute respectively @xmath88 and @xmath89 for each @xmath90 such that @xmath80 , and finally @xmath91 and @xmath92 .    moving from nnlo to nlo things",
    "simplify , as we have @xmath93 .",
    "this implies ( see eq .",
    "( [ eq : pnsv ] ) ) that @xmath94 , i.e.  the non - singlets @xmath50 and @xmath95 evolve with the same kernel , and the same does each linear combination thereof , in particular @xmath88 for each flavor @xmath90 .",
    "the basis of the @xmath77 non - singlet distributions that we choose to evolve at nlo is    1 .",
    "@xmath88 ( for each @xmath96 ) , evolving with @xmath97 , 2 .",
    "@xmath82 ( for each @xmath90 such that @xmath80 ) , evolving with @xmath98 ,    and the same we do at lo , where we have in addition @xmath99 , being @xmath100 .",
    "we briefly review in this section the algorithm on which candia is based . more details and a theoretical discussion",
    "can be found in our previous papers @xcite .",
    "the proof of equivalence between the logarithmic expansions implemented in candia and the alternative approach based on the use of mellin moments , as used in reference @xcite , is easily established at leading order . for this",
    "we recall the definition of the mellin transform of a given function @xmath101 , @xmath102 that maps convolution products into ordinary products@xmath103(n)=a(n)b(n).\\ ] ] traditional algorithms based on mellin space solve the equations algebraically in @xmath104 and then perform a numerical inversion using a saddle path evaluation of the complex contour .",
    "this technique is completely bypassed in our approach .",
    "one of the advantage of candia is that a given initial condition for the pdfs , usually formulated in @xmath0-space , _ does not _ need to be fitted to a given functional form in moment space , which is instead typical of a given numerical implementation of the mellin algorithm .",
    "in fact , the functional form in moment space in some cases may even not be general enough , and may not allow the evolution of quite singular distributions at small @xmath0 . from our experience , we have found that fitting special initial conditions in @xmath0-space forces the user , in codes based in mellin space , to modify the evolution code by himself , with dubious results .",
    "candia , by eliminating this unappealing feature of algorithms based in mellin space , allows any initial condition to be considered and removes the initial numerical error due to the fit of the initial condition to the pre - assigned functional form in moment space .",
    "having clarified this point , we introduce a single evolution scale @xmath105 , leaving to the next sections the discussion of the separation between the factorization and renormalization scales .",
    "switching to @xmath67 as the independent variable , the dglap equation ( [ eq : dglap ] ) is rewritten in the form    @xmath106      inserting in eq .",
    "( [ eq : dglap_mellin ] ) the perturbative expansions of @xmath107 and @xmath108 ( equations ( [ eq : kernel_expansion ] ) and ( [ eq : beta_exp ] ) ) arrested at lo , we get @xmath109 which is solved by @xmath110 where we have set @xmath111 and @xmath112 . performing a taylor expansion of the exponential we get@xmath113 the @xmath0-space logarithmic ansatz , that parallels",
    "this solution is    @xmath114    where the @xmath115 s are unknown functions . setting @xmath116 in ( [ eq : loansatz ] ) we get the initial condition@xmath117 inserting our ansatz ( [ eq : loansatz ] ) into the dglap equation ( [ eq : dglap ] ) and using the expansion of the kernels and of the beta function ( [ eq : kernel_expansion ] , [ eq : beta_exp ] ) arrested at the first term , after some algebra we derive the recursion relation @xmath118(x ) .",
    "\\label{an_recurrence}\\ ] ]    in the code , the value of @xmath119 for the pdf with index ` i ` ( see table [ tab : indices ] ) , is stored in the variable ` a[i][n][k ] ` ; @xmath120 is the @xmath0-grid point stored in ` x[k ] ` .",
    "let s now move to the higher orders .    at nlo",
    "( [ eq : dglap_mellin ] ) reads @xmath121 the solution of which is @xmath122 where we have set @xmath123 we then assume an @xmath0-space solution of the form @xmath124 where in the first step we have re - arranged the product of the two series into a single series with a total exponent @xmath125 , and in the last step we have introduced the functions@xmath126    setting @xmath116 in ( [ eq : nloansatz ] ) we derive the initial condition on the recursive coefficients @xmath127 inserting the ansatz ( [ eq : nloansatz ] ) into the dglap equation ( [ eq : dglap ] ) , using the expansions ( [ eq : kernel_expansion ] , [ eq : beta_exp ] ) arrested at the second terms , and equating the coefficients of @xmath128 and @xmath129 , we find the recursion relations @xmath130(x)\\label{eq : nlo_rec_diagonale}\\\\ b_{n}^{s}(x ) & = & -b_{n+1}^{s}(x)-\\frac{4}{\\beta_{1}}\\left[p^{(1)}\\otimes b_{n}^{s-1}\\right](x).\\label{eq : nlo_rec_verticale}\\end{aligned}\\ ] ] these relations allow to compute all the coefficients @xmath131 @xmath132 up to a chosen @xmath133 starting from @xmath134 , the value of which is given by the initial conditions . eq .",
    "( [ eq : nlo_rec_diagonale ] ) allows to follow a diagonal arrow in the scheme shown in table [ cap : schemanlo ] ; eq .",
    "( [ eq : nlo_rec_verticale ] ) instead allows to compute a coefficient once we know the coefficients at its right and over it ( horizontal and vertical arrows ) .",
    "if more than one recursion relation can be used to compute a coefficient @xmath135 , the program follows the fastest recursion chain to determine these , i.e.  ( [ eq : nlo_rec_diagonale ] ) that involves @xmath136 instead of @xmath137 . for each @xmath133",
    "the code does the following :    1 .",
    "computes all the coefficients @xmath138 with @xmath139 using ( [ eq : nlo_rec_diagonale ] ) ; 2 .",
    "computes the coefficient @xmath140 using ( [ eq : nlo_rec_verticale ] ) .    in the code ,",
    "the value of @xmath141 for the pdf with index ` i ` ( see table [ tab : indices ] ) , is stored in the variable ` b[i][s][n][k ] ` .",
    "@xmath142      at nnlo eq .",
    "( [ eq : dglap_mellin ] ) reads @xmath143 the solution of which is @xmath144 where we have introduced the definitions @xmath145 notice that , if @xmath146 ( it occurs for @xmath147 ) , @xmath148 has to be analytically continued @xmath149 we then assume an @xmath0-space solution of the form@xmath150 where in the first step we have transformed the product of three series into a single series in the total exponent @xmath151 , and we have set @xmath152 . in the last step we have introduced the functions@xmath153 setting @xmath116 in ( [ eq : nnloansatz ] ) we get the initial condition@xmath154 inserting the ansatz ( [ eq : nnloansatz ] ) into the dglap equation ( [ eq : dglap ] ) and using the expansions of the kernel and the beta function ( [ eq : kernel_expansion ] , [ eq : beta_exp ] ) arrested at the third order , equating the coefficients of @xmath128 , @xmath129 and @xmath155 we find the recursion relations @xmath156(x)\\label{eq : nnlo_rec_diagonale}\\\\ c_{t , n}^{s}(x ) & = & -\\frac{1}{2}c_{t , n+1}^{s}(x)-\\frac{4}{\\beta_{2}}\\left[p^{(2)}\\otimes c_{t-1,n}^{s-1}\\right](x)\\label{eq : nnlo_rec_verticale}\\\\ c_{t , n}^{s}(x ) & = & -2\\beta_{1}\\left(c_{t+1,n}^{s}(x)+c_{t+1,n+1}^{s}(x)\\right)-8\\left[p^{(1)}\\otimes c_{t , n}^{s-1}\\right](x).\\label{eq : nnlo_rec_orizzontale}\\end{aligned}\\ ] ] also in this case , as before , when we have to compute a given coefficient @xmath157 , if more than one recursion relation is applicable , the program follows the fastest recursion chain , i.e.  in order ( [ eq : nnlo_rec_diagonale ] ) , ( [ eq : nnlo_rec_orizzontale ] ) and ( [ eq : nnlo_rec_verticale ] ) . at fixed @xmath133",
    "the algorithm performs the following steps :    1 .",
    "computes all the coefficients @xmath157 with @xmath139 using ( [ eq : nnlo_rec_diagonale ] ) ; 2 .   computes the coefficient @xmath158 using ( [ eq : nnlo_rec_verticale ] ) ; 3 .",
    "computes the coefficient @xmath159 with @xmath160 using ( [ eq : nnlo_rec_orizzontale ] ) , in decreasing order of @xmath161 .",
    "this procedure is exemplified in the scheme shown in table [ cap : schemannlo ] for @xmath162 .    in the numerical program",
    ", the value of @xmath163 for the pdf with index ` i ` ( see table [ tab : indices ] ) , is stored in the variable ` c[i][s][t][n][k ] ` .",
    "@xmath164      besides the class of solutions of eq .",
    "( [ eq : dglap ] ) described in section [ subsec : exact_solution ] , which we have called _ exact _ , there is another important class of solutions , that we will call _ truncated _ , which are interesting since they correspond to @xmath0-space solutions which are accurate up to a certain order in @xmath1 . while in an exact solution all the logarithmic structures are resummed into few functions ( equations  ( [ eq : l_nlo],[eq : m_nlo ] ) at nlo and ( [ eq : l_nnlo],[eq : m_nnlo],[eq : t_nnlo ] ) at nnlo ) , the truncated ones are characterized by expansions in terms of simple logarithms of @xmath165 , retained up to a chosen order .",
    "we give below some details on these expansions .",
    "notice that all the recursive solutions built in the singlet sector - except for the lowest order ones , which are exact in any approach , either in mellin space or in @xmath0-space - are of this type . in this sector",
    "we can build solutions of increased accuracy by using truncated solutions of higher order . to briefly discuss these types of solutions , we perform an expansion in @xmath1 of the quantity @xmath166 in the eq .",
    "( [ eq : dglap_mellin ] ) and re - arrange the dglap equation ( nlo or nnlo ) into the form = ( n,_s ) , + [ trunc_singlet ] where we have considered the expansion up to order @xmath167 and we have defined the following linear combinations of the @xmath168 kernels & & _",
    "0=-^(0 ) + & & _ 1=- + & & _ 2=- ( + + ) . + & & we call eq .",
    "( [ trunc_singlet ] ) the _ truncated _ version of the dglap equation , both in the singlet and non - singlet cases .    the truncated equation , in mellin space , can be solved in closed form , at least in the non - singlet case , obtaining a solution which is different from the exact solution of eq .",
    "( [ eq : dglap_mellin ] ) discussed before and having the following general form ( n,_s)= ( ) ^_0 \\{_1 ( _ s-_0)+ _ 2(_s^2-_0 ^ 2)+  + _ ( _ s^-_0^ ) } ( n,_0 ) . + even after a truncation of the equation , the corresponding solution is still affected by higher order terms , and can be truncated . to obtain the truncated version of this solution is then necessary a further taylor expansion around the point @xmath169 for the two couplings -initial and final- ( n,_s)= ( ) ^_0 ( n,_0 ) . again",
    ", this expression holds in both singlet and non - singlet cases , thus we can generate _ truncated _ solutions for the parton densities .    passing to the singlet case , which is more involved , the truncated solutions of eq .",
    "( [ trunc_singlet ] ) in mellin space can be obtained ( for a review see @xcite ) by the use of the @xmath170-matrix ansatz .",
    "basically this method consists of an expansion of the general solution around the lo solution as & & ( n,_s)= ( _ s,_0,n ) + & & ^-1 ( n,_0 ) , + [ uansatz ] where the @xmath171 is defined as ( _ s,_0,n)= ( ) ^ with the @xmath172 operators defined through a chain of recursion relations , obtained by substituting eq .",
    "( [ uansatz ] ) into the truncated equation & & = _ 1-_1 , + & & = -_2 -_1_1 + 2_2 + & & with a taylor expansion of the second line in eq .",
    "( [ uansatz ] ) we obtain the truncated solution of order @xmath167 for the singlet / non - singlet case in mellin space .",
    "once we have obtained such a solution , the @xmath0-space result is achieved by a mellin inversion .",
    "this and the @xmath0-space approach merge as we increase the order of the expansion .",
    "working directly in @xmath0-space , one can generate truncated solutions up to certain order @xmath167 in a very general way by considering the following logarithmic ansatz @xmath173\\ln^{n}\\frac{\\alpha_{s}(q^{2})}{\\alpha_{s}(q_{0}^{2 } ) } \\right\\ } , \\label{ktruncatedseries}\\ ] ] which is stunningly simple .",
    "one can demonstrate @xcite that inserting this expression in the @xmath0-space version of eq .",
    "( [ trunc_singlet ] ) the solution obtained is equivalent to that of the @xmath170-matrix prescription , in the sense that the terms of the two expansions are the same as far as the two expansions are implemented up to a sufficiently large order . in our approach",
    "the solution is expanded in terms of logarithms of @xmath165 and one controls the accuracy by inserting powers of @xmath1 .",
    "the coefficients @xmath174 are determined by solving the chain of recursion relations generated by inserting the logarithmic ansatz in the dglap , grouping the terms proportional to the same power of @xmath1 and neglecting the terms in @xmath175 and higher powers .",
    "we obtain the following recursion relation for the @xmath176 coefficient @xmath177(x)\\ , , \\label{trunc_rec0}\\ ] ] while for @xmath178 we have @xmath179(x ) -\\frac{1}{\\pi\\beta_0}\\left[\\mathbf{p}^{(1)}\\otimes\\mathbf{s}_n^0\\right](x)\\ , .",
    "\\label{trunc_rec1}\\end{aligned}\\ ] ] the recursion relations for the @xmath180 coefficients @xmath181 are , at nlo @xmath182(x ) -\\frac{1}{\\pi\\beta_0}\\left[\\mathbf{p}^{(1)}\\otimes\\mathbf{s}_n^{i-1}\\right](x ) \\label{trunc_rec_i_nlo}\\end{aligned}\\ ] ] and at nnlo @xmath183(x ) -\\frac{1}{\\pi\\beta_0}\\left[\\mathbf{p}^{(1)}\\otimes\\mathbf{s}_n^{i-1}\\right](x ) -\\frac{1}{2\\pi^2\\beta_0}\\left[\\mathbf{p}^{(2)}\\otimes\\mathbf{s}_n^{i-2}\\right](x ) \\label{trunc_rec_i_nnlo}\\end{aligned}\\ ] ] these relations hold both in the non - singlet and singlet cases and can be solved either in @xmath0-space or in @xmath104-space in terms of the initial conditions @xmath184",
    ". a further check of the overlap of the two methods is obtained numerically .",
    "since there is no closed form solution for the singlet dglap equation , we always use the method described in the current section in this specific sector . on the other hand , we leave to the user the possibility to choose the method of solution for the non - singlet equations , exact or truncated that they can be , and this choice can be made at compilation time ( see section [ subsec : compiling ] ) .",
    "if one chooses the exact method implemented in ` candia.c ` , we need to define the @xmath185 coefficients of eq .",
    "( [ ktruncatedseries ] ) only for the singlet sector : @xmath186 in the code , the value of @xmath187 for the gluon is stored in the variable ` s[i][0][n][k ] ` and for @xmath76 in ` s[i][1][n][k ] ` .",
    "if one chooses instead to solve both the singlet and the non - singlet with the truncated method ( implemented in ` candia_trunc.c ` ) the array ` s ` has to accommodate also the non - singlet distributions , and the value of @xmath188 for the pdf with index ` j ` ( see table [ tab : indices ] ) is stored in the variable ` s[i][j][n][k ] ` .",
    "we remark that in a previous nlo version of the implementation of the algorithm both the singlet and the non - singlet sectors had been solved using truncated ansatz with @xmath189 @xcite .",
    "as we move to higher orders in the expansion of the kernels , the presence of the strong coupling constant @xmath1 allows an independent renormalization scale @xmath20 on the right - hand - side of the evolution equation .",
    "this dependence is , in general , completely unrelated to the factorization scale .",
    "thus , we can formally rewrite the dglap equation as follows @xmath190 where the splitting functions have acquired a @xmath20 dependence simply by expanding @xmath191 in terms of @xmath192 @xmath193\\,.\\ ] ] the explicit replacements of the kernels in this new re - organization of the defining equation are given by @xmath194 where the logarithmic structures are identified by @xmath195 candia allows a determination of the evolution with the two scales held separate @xmath196 .",
    "in particular we have implemented the case in which @xmath19 and @xmath20 are proportional . the proportionality factor @xmath197",
    "is entered by the user as a command - line argument ( see section [ subsec : running ] ) .",
    "one can easily figure out , practicing with the program , that on increasing the perturbative order the dependence on the renormalization / factorization scale reduces .",
    "if candia is executed with the variable flavor number scheme ( vfns ) option ( ` fns ` set to 1 in the command line ) and with the macro ` hft ` set to 1 ( that is the default value ) in the file ` constants.h ` , the program will implement the matching conditions with @xmath198 and @xmath199 light flavors both for the running coupling @xmath1 and for the parton distributions .",
    "the transition from the effective theory with @xmath198 light flavors to the one with @xmath199 is made when the factorization scale reaches the renormalized pole mass of a heavy quark , @xmath200 .",
    "the matching condition up to nnlo for the running coupling is @xcite @xmath201 ^ 2 \\frac{l}{6\\pi}+ \\left[\\alpha_s^{(n_f)}\\right]^3 \\left\\{\\frac{1}{\\pi^2}\\left[\\frac{l^2}{36}-\\frac{19}{24}l-\\frac{7}{24}\\right]\\right\\}+ o\\left(\\left[\\alpha_s^{(n_f)}\\right]^4\\right ) \\label{eq : pre}\\ ] ] or , otherwise @xmath202 ^ 2 \\frac{l}{6\\pi}+ \\left[\\alpha_s^{(n_f)}\\right]^3 \\left\\{\\frac{1}{48\\pi^2}\\left[14 + 38l+\\frac{4}{3}l^2\\right]\\right\\}+ o\\left(\\left[\\alpha_s^{(n_f)}\\right]^4\\right ) , \\label{eq : post}\\ ] ] where @xmath203 .",
    "the matching conditions for the parton distributions up to nnlo are @xcite @xmath204(x ) \\label{eq : matching1}\\ ] ] where @xmath205=@xmath206 and @xmath207 , are the light quark / antiquark flavours ; @xmath208(x)+ \\left[a^{s,(2)}_{gg , h}\\otimes g^{(n_f)}\\right](x)\\right\\}\\ ] ] for the gluons , and @xmath209(x)+ \\left[\\tilde{a}^{s,(2)}_{hg}\\otimes g^{(n_f)}\\right](x)\\right\\ } \\label{eq : matching3}\\ ] ] for the heavy flavors .",
    "the code is unpacked with the command    .... tar zxvf candia_1.0.tar.gz ....    that will create the directory ` candia_1.0 ` , containing the following files .",
    "* ` candia.c ` and ` candia_trunc.c ` are the files including the ` main ` function , each one implementing a different method of solution : the former solves the non - singlet sector with the exact solution , while the latter uses the truncated method . *",
    "` makefile ` and ` makefile_trunc ` are the corresponding makefiles . if one is using other compilers than ` gcc ` and ` gfortran `",
    "these files need to be edited . * ` constants.h ` is a header file containing some parameters that the user may want to edit . * ` xpns2p.f ` and ` xpij2p.f ` are fortran codes @xcite in which a parametrized form of the nnlo kernels is defined .",
    "very few modifications have been done to make them compatible with our code .",
    "* ` hplog.f ` is a fortran code @xcite in which a subroutine that computes numerically the harmonic polylogarithms up to weight 4 is implemented .",
    "harmonic polylogarithms are defined in @xcite . * ` partonww.f ` is just a merging of the three fortran codes ` mrst2001lo.f ` , ` mrst2001.f ` and ` mrstnnlo.f ` by the mrst group @xcite to access their grids of lo , nlo and nnlo parton densities .",
    "very few modifications have been done . * ` lo2002.dat ` , ` alf119.dat ` and ` vnvalf1155.dat ` are the mrst parton densities grids at lo , nlo and nnlo respectively . * ` a02m.f ` is the fortan code by alekhin @xcite to access his grids of lo , nlo and nnlo parton densities . *",
    "` a02m.pdfs_i_vfn ` and ` a02m.dpdfs_i_vfn ` with @xmath210 are the files in which the grids of the alekhin parton densities in the variable flavor number scheme are stored .",
    "let us describe the different steps that the user will encounter in a run of candia .",
    "the header file ` constants.h ` contains some macros and two arrays that the user may want to change before compiling . the macros are described in table [ tab : macros ] .",
    ".macros defined in ` constants.h ` . [ cols=\"<,<,<\",options=\"header \" , ]",
    "we have presented a new evolution program , candia , which solves the dglap equation with high precision and is completely implemented in @xmath0-space .",
    "we have also briefly discussed the types of solutions which are implemented in the program , from the truncated to the exact ones . in the non - singlet sector",
    "we have shown how to construct the exact solutions analytically by the iteration of expressions which resum the simple logarithms of the ratio of the two couplings at the initial and final evolution scales .",
    "we have also addressed the issue of accuracy of the solutions and illustrated the difference between _ brute force _ and analytical methods , showing the connection between our approach and more traditional approaches based on the inversion of mellin moments .",
    "we hope to return in the near future with additional numerical implementations , which will provide the user with all the necessary tools so to proceed with an independent partonometric analysis of the lhc data on the pdfs .",
    "m.g .  thanks the theory group at the univ . of liverpool or hospitality and partial financial support .",
    "the work of c.c .  was supported ( in part ) by the european union through the marie curie research and training network `` universenet '' ( mrtn - ct-2006 - 035863 ) and by the interreg ii crete - cyprus program .",
    "he thanks the theory group at crete for hospitality .",
    "the work of a.c .  is supported by the transfer of knowledge program algotools ( mtkd - ct-2004 - 014319 ) .",
    "a. cafarella , c. corian and m. guzzi , nucl .",
    "b748 ( 2006 ) 253 , hep - ph/0512358 .",
    "ellis , z. kunszt and e.m .",
    "levin , nucl .",
    "b420 ( 1994 ) 517 .",
    "a. cafarella , c. corian and m. guzzi , jhep 08 ( 2007 ) 030 , hep - ph/0702244 .",
    "a. cafarella and c. corian , comput .",
    "commun . 160",
    "( 2004 ) 213 , hep - ph/0311313 .",
    "chetyrkin , b.a .",
    "kniehl and m. steinhauser , phys .",
    "79 ( 1997 ) 2184 , hep - ph/9706430 .",
    "m. buza et  al .",
    "j. c1 ( 1998 ) 301 , hep - ph/9612398 .",
    "s. moch , j.a.m .",
    "vermaseren and a. vogt , nucl .",
    "b688 ( 2004 ) 101 , hep - ph/0403192 .",
    "a. vogt , s. moch and j.a.m .",
    "vermaseren , nucl .",
    "b691 ( 2004 ) 129 , hep - ph/0404111 .",
    "t. gehrmann and e. remiddi , comput .",
    "commun . 141 ( 2001 ) 296 , hep - ph/0107173 .",
    "e. remiddi and j.a.m .",
    "vermaseren , int .",
    "a15 ( 2000 ) 725 , hep - ph/9905237 .",
    "martin et  al .",
    "j. c23 ( 2002 ) 73 , hep - ph/0110215 .",
    "martin et  al .",
    "b531 ( 2002 ) 216 , hep - ph/0201127 .",
    "s. alekhin , phys .",
    "d68 ( 2003 ) 014002 , hep - ph/0211096 .",
    "w. press et  al .",
    ", numerical recipes in c , 2nd ed .",
    "( cambridge university press , cambridge , uk , 1992 ) ."
  ],
  "abstract_text": [
    "<S> we summarize the theoretical approach to the solution of the nnlo dglap equations using methods based on the logarithmic expansions in @xmath0-space and their implementation into the c program candia 1.0 . </S>",
    "<S> we present the various options implemented in the program and discuss the different solutions . </S>",
    "<S> the user can choose the order of the evolution , the type of the solution , which can be either exact or truncated , and the evolution either with a fixed or a varying flavor number , implemented in the varying - flavour - number scheme ( vfns ) . </S>",
    "<S> the renormalization and factorization scale dependencies are treated separately . in the non - singlet sector </S>",
    "<S> the program implements an exact nnlo solution . </S>"
  ]
}