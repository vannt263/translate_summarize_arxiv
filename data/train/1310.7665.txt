{
  "article_text": [
    "many massive graphs appear in practice as a temporal _ stream of edges_. people call each other on the phone , exchange emails , or co - author a paper ; computers exchange messages ; animals come in the vicinity of each other ; companies trade with each other .",
    "each such interaction is modeled as an edge in the graph , and has a natural timestamp .    due to the need for real - time awareness despite the volume of such transactions , there is much interest in processing temporal graphs using fast , limited - memory algorithms .",
    "formally , think of the input as a sequence of edges @xmath0 .",
    "some of the edges may be repeated , meaning that ( say ) @xmath1 .",
    "we are interested in small space streaming algorithms that make a _ single pass _ over the stream @xmath0 . such an algorithm maintains data structures that are many orders of magnitude smaller than the stream itself . at every timestep @xmath2 , these data structures are updated rapidly ( possible randomly ) .",
    "the algorithm computes an accurate estimate for the property of interest on the graph seen so far . because of the single pass and small space",
    ", the algorithm can not revisit edges that it has forgotten .",
    "furthermore , it can not always determine if the new edge , @xmath3 , has appeared before .",
    "this work focuses on triangle counting in this setting .",
    "* graph vs multigraph : * previous results assume that the edge stream forms a simple graph , and no edge is repeated in the stream .",
    "this is a useful assumption for algorithmic progress ; yet , often false in practice .",
    "real - world graph streams are multigraphs , in that same edges can occur repeatedly in the data stream .",
    "the simple graph representation is obtained by removing duplicate edges .",
    "for example , the classic enron email dataset is really a multigraph with 1.14 m edges , while the underlying simple graph has only 297k edges .",
    "similarly , a dblp co - authorship graph recently collected is a multigraph with 3.63 m edges , but the underlying simple graph has only 2.54 m edges .",
    "close to 10 million edges in a popular dynamic flickr network dataset ( see  @xcite ) are repeated .",
    "the assumption of simplicity is implemented in practice with an extra pass to remove duplicate edges .",
    "_ this pass requires storage of the entire simple graph , which is completely ignored in all previous work .",
    "_ indeed , if one can store the entire simple graph , there exist much better algorithms for triangle counting  @xcite .",
    "we posit that for streaming algorithms to be actually useful in practice , multiple edges must be dealt with small space .",
    "there is much work on streaming graph algorithms ( see surveys  @xcite ) .",
    "yet this algorithmic work ignores important issues such as repeated edges and temporal aggregation that arise when looking at a real - world graph stream , as demonstrated in .    * aggregation over time : * given a stream of edges , what is the actual graph ?",
    "the most common answer is to simply aggregate all edges ever seen .",
    "again , this is a useful assumption for algorithmic progress , but ignores the temporal aspect of the edges .",
    "time is a complex issue and there are no clear solutions .",
    "one may consider sliding windows in time or have some decay of edges .",
    "for simplicity , we focus on sliding time windows ( like edges seen in the past month , or past year ) . even for sliding windows , it is not clear what the width should be",
    ". observations can often be an artifact of the window size  @xcite .",
    "therefore , it is essential to observe multiple time windows at the same time , instead of committing to a single one .    shows how our algorithm mg - triangle  can analyze different time windows with a single run .",
    "our algorithm estimates the triangle counts for any time window without altering its data structures , as the time window is only used in calculating the estimate .",
    "the abundance of triangles has been observed in networks arising in numerous scenarios , such as social sciences  @xcite , spam detection  @xcite , community detection  @xcite , finding common topics on the web  @xcite , bioinformatics  @xcite , and modeling and characterizing real - world networks  @xcite .",
    "subsequently , there has been a lot of work on triangle counting in graph streams @xcite , and in various other settings ( see e.g. , @xcite and references therein ) .",
    "the result of ahmed et al .",
    "@xcite is arguably the state - of - the - art , with a storage significantly smaller than previous algorithms .",
    "none of these results explicitly deal with multigraphs .",
    "formally , we are processing a multigraph stream @xmath0 . at every time @xmath2 ,",
    "consider the underlying _ simple _ graph @xmath4 formed by edges @xmath5 .",
    "so take all these edges , and remove duplicates .",
    "we wish to output the triangle count ( alternately , the transitivity ) of @xmath4 for all times @xmath2 . the window length @xmath6 may be defined in different ways",
    ". it could either be in terms of number of edges ( say , the past 10k edges ) , or in terms of the semantics of timestamps ( say , edges seen in the past month ) .",
    "most importantly , we want a single - pass small space algorithm to handle multiple windows lengths and do not want different passes for each window length .",
    "a reader may wonder why we only output estimates for the underlying simple graph .",
    "ideally , we would like to compute measures that involve the multigraph structure .",
    "we agree that this is an interesting problem , and duplicates have their own significance .",
    "currently , it is standard to focus on simple graphs , and there is no consensus on how to define triadic measures on multigraphs .",
    "this is an exciting avenue for future work .",
    "* why is this a difficult problem ?",
    "* multigraphs are a major challenge for triangle counting algorithms .",
    "edges appears with varying frequencies , and ( in our setting ) we do not wish to be biased by this .",
    "furthermore , triangles can be formed in different ways .",
    "consider edges @xmath7 , and @xmath8 that form a triangle .",
    "these edges may appear in the multigraph stream in many different ways .",
    "for example , these edges could come as @xmath9 , or as @xmath10 .",
    "( observe how this is _ not _ an issue for simple graphs . )",
    "these patterns create biases for existing triangle counting algorithms , which we explain in more detail later .    for now , it suffices to say that existing algorithms  @xcite will give different estimates for triangle counts of different multigraphs streams that contain the same simple graph .",
    "this is demonstrated in , where we run previous streaming triangle counting algorithms on the raw dblp multigraph stream .",
    "previous algorithms converge to an incorrect value as their storage increases .",
    "they all perform extremely well if all duplicates were removed from the stream ( ) .",
    "previous work on multigraph mining explicitly states triangle counting of streaming multigraphs as an open problem  @xcite .",
    "the edge stream is denoted by @xmath0 .",
    "we focus on undirected graphs , so each edge is an unordered pair of vertex ids . the simple graph formed by edges @xmath11",
    "is denoted by @xmath12 $ ] .",
    "a _ wedge _ is a path of length @xmath13 .",
    "the set of wedges in a simple graph @xmath14 is denoted @xmath15 , and the set of triangles by @xmath16 .",
    "a wedge in @xmath15 is _ closed _ if it participates in a triangle and _ open _ otherwise .",
    "the _ transitivity _ is the fraction of closed wedges , @xmath17 .",
    "our aim is to maintain the transitivity and triangle count ( for all @xmath2 ) of the graph @xmath18 $ ] , where @xmath6 is the desired window of aggregation .",
    "the window is usually specified as a fixed number of edges or a fixed interval of time ( like month , year , etc . ) , though the algorithm works for windows lengths that change with time . for convenience ,",
    "we denote @xmath19 $ ] , @xmath20 , @xmath21 , @xmath22 , and @xmath23 .",
    "we design a small space streaming algorithm , mg - triangle , to estimate transitivity and triangle counts for multiple time windows on multigraphs .",
    "as mentioned earlier , the main technical contribution is in handling repeated edges without a separate storage - intensive deduplication process .",
    "we consider this work as a first step towards small space streaming analytics for real - world graph streams .",
    "* the multiedge problem : * we applied previous streaming triangle algorithms  @xcite on multigraph streams , and showed that they fail to give correct answers . shows how all these algorithms converge as their storage increases to an incorrect estimate on a dblp multigraph stream . of course",
    ", these algorithms were designed with the assumption of simple graph streams , and have excellent convergence properties ( ) .",
    "these results show how repeated edges are a problem and why we need new algorithms for multigraph streams .",
    "* theoretical and empirical proofs of convergence : * we give proofs of convergence for mg - triangle . our algorithm is based on wedge sampling  @xcite and borrows ideas from  @xcite .",
    "it is provably correct on expectation .",
    "we also prove variance bounds , but mg - triangle shows much better performance in practice than such bounds would indicate .",
    "we perform detailed experiments to prove that our algorithm gives accurate estimates with little storage ( less than 5% of the stream in all instances ) . in , we observe how mg - triangle converges to the correct value storing at most 60k edges ( the stream size is 3 m ) .    * low storage required on real - world graphs : * our algorithm stores less than 5% of the stream in all instances , and gives accurate estimates for transitivity and triangles counts .",
    "for example , we converted a 223 m edge orkut graph  @xcite to a 500 m edge multigraph , where our algorithm produced triangles estimates within @xmath24 relative error .",
    "the storage required was just 1.2 m edges , less than @xmath25 of the stream .",
    "our algorithm s worst performance ( on a livejournal social network ) only led to @xmath26 additive error in transitivity , and 8.7% relative error in triangle count .    * multiple time window estimates in real - world graph",
    "streams : * presents an example output of mg - triangle on a dblp coauthorship graph stream .",
    "mg - triangle makes a single pass and stores less than 100k edges ( @xmath27 of total stream ) .",
    "it gives estimates for transitivity and triangles count at every year for window sizes of 5 , 10 , 15 , 20 years , and all of time .",
    "in other words , at year ( say ) 2013 , it gives triangle estimates for the simple graphs that aggregates edges in the following intervals : 20092013 , 20042013 , 19992013 , 19942013 , and 19382013 .",
    "we immediately detect specific trends for different windows , like increasing window size decreases transitivity ( even though triangle count naturally goes up ) . also note the overall decrease of transitivity over time .",
    "we also perform such analyses on an email network and a social network , and observe differences between these graphs .",
    "we describe previous practical streaming triangle algorithms and explain why repeated edges is a challenge .",
    "we hope that this provides better context for our work and explains how important the assumption of simple graphs is for previous work .",
    "our focus is on the neighborhood sampler of pavan et al .",
    "@xcite , the wedge sampler of jha et al .",
    "@xcite , and the sample - and - hold algorithm of ahmed et al .",
    "@xcite . to the best of our knowledge ,",
    "these are the algorithms with established practical performance and good theoretical guarantees .",
    "( we omit the algorithm of buriol et al .",
    "@xcite , since its practical performance is not good even for million edge streams  @xcite . ) for the sake of exposition , we formulate and describe the algorithms in slightly different terms from the original papers .    * reservoir sampling vs hashing : * all algorithms sample uniform random edges from the stream , either by reservoir sampling or sampling an edge with fixed probability , which poses a problem in multigraph streams , since frequent edges have a higher probability of being sampled .",
    "this problem can be mitigated by using random hash functions .",
    "suppose we wish to store each edge of the underlying simple graph from the stream with probability @xmath28",
    ". each edge should be equally likely to be selected , independent of its frequency .",
    "let @xmath29 be a uniform random function into the range @xmath30 .",
    "when the algorithm sees an edge @xmath31 in the stream , it stores the edge if @xmath32 .",
    "observe that the probability that an edge is selected only depends on its hash value and _ is independent of its frequency_. we also stress that , for simple graph streams , hash based sampling is essentially equivalent to any other uniform random method .",
    "hashing provides an easy fix for the basic sampling problem , and is actually a convenient implementation method even for simple graphs .",
    "( we implemented all previous algorithm using hashing . ) but the real challenge is debiasing , which comes next .",
    "* neighborhood sampling  @xcite : * let edge @xmath33 be a neighbor of @xmath31 , if @xmath31 and @xmath33 intersect .",
    "the main idea of  @xcite is to pick a uniform random edge @xmath31 , and then pick a uniform random neighbor @xmath33 of @xmath31 from the subsequent edges .",
    "this provides a wedge @xmath34 , which is then checked for closure to provide a triangle . this process samples triangles non - uniformly .",
    "pavan et al",
    ". cleverly debias by counting the number of following edges adjacent to @xmath31 .",
    "( equivalently , keeping track of the degree of vertices after storing @xmath31 . )",
    "the algorithm takes a number of independent samples to get a low - error estimate .",
    "the method is provably correct and has excellent behavior in practice .",
    "but multigraphs affect this debiasing .",
    "tracking ( simple ) degrees of a vertex @xmath35 is a non - trivial task , and requires counting the number of distinct edges incident to @xmath35 .",
    "this itself requires a space overhead and it is not clear how to get a complete small - space extension of this approach for multigraphs .",
    "* sample - and - hold  @xcite and wedge sampling  @xcite : * ahmed et al .",
    "give an elegant algorithm for triangle counting . simply store",
    "every edge with some fixed ( small ) probability . for",
    "every edge @xmath31 in the stream , count the number of triangles formed by @xmath31 and a wedge among the stored edges .",
    "the sum of these counts can be used to estimate the total number of triangles .",
    "the final algorithm is simple , converges extremely rapidly , and is space efficient ( to date , it is arguably the best streaming triangle counting algorithm ) .",
    "the wedge sampling algorithm of jha et al  @xcite can also be thought of in this framework , except that it tracks a subset of the wedges created by stored edges . without getting into details ,",
    "it suffices to say that the correctness of these algorithms hinges on a critical fact .",
    "every triangle ( in a simple graph ) stream has a unique wedge that closes in the future .",
    "suppose edges @xmath36 form a triangle , and edges appear in order @xmath37 .",
    "then the wedge @xmath34 is closed subsequently by edge @xmath38 .",
    "it can be shown that both algorithms sample triangles uniformly , leading to unbiased estimates .",
    "this is not true for multigraph streams .",
    "if they appear in the stream as @xmath39 , there is no unique wedge closed in the future .",
    "( indeed , all wedges are closed in the future . )",
    "this is a significant problem and increasing storage does not mitigate this problem . as demonstrated in ,",
    "these algorithms converge to an incorrect estimate as storage increases .",
    "our algorithm mg - triangle takes as input sampling rates @xmath40 and a window @xmath6 .",
    "the window is specified as a fixed number of edges or a fixed interval of time ( like month , year , etc . ) .",
    "we describe the data structures used by mg - triangle .",
    "lists _ e - list _ , _ w - list _ : these are lists consisting of random edges and wedges , respectively .",
    "the sizes of these lists are controlled by @xmath28 and @xmath41 .",
    "flags @xmath42 : for each wedge @xmath43 _ w - list _ , we have a boolean flag @xmath42 supposed to denote whether it is open or closed .",
    "as mentioned earlier , it is convenient to think of @xmath29 as a uniform random function into the range @xmath30 .",
    "abusing notation , we will use @xmath29 to map various different objects such as edges , wedges , etc .      the first step on encountering edge",
    "@xmath3 is to update the lists _ e - list _ and _ w - list_. this is done in procedure update .",
    "the idea is based on standard hash - based sampling .",
    "we add @xmath3 to _ e - list _ if @xmath44 and @xmath3 is not already in _",
    "e - list_. then , we look at all the wedges that @xmath3 creates with existing edges in _ e - list_. we apply another round of hash - based sampling to put these wedges in _ w - list_.    critically , if an edge @xmath31 enters _ e - list _ , it never leaves . if @xmath31 enters _ e - list",
    "_ , it does so the first time it appears in the stream . the probability of an edge entering _ e - list _ is independent of its frequency in the stream .",
    "this is vital to get unbiased samples of edges in the underlying simple graph @xmath4 .",
    "similar statements hold for wedges .",
    "* checking for closures and debiasing : * we encounter edge @xmath3 and have updated _ e - list _ and _ w - list_. for each wedge @xmath43 _ w - list _ , we have a boolean variable @xmath42 .",
    "if @xmath3 closes @xmath45 ( so @xmath45 and @xmath3 form a triangle ) , we set @xmath46 .",
    "this is the standard wedge - sampling approach  @xcite . at this point",
    ", the algorithm would basically be that of  @xcite , implemented with hash - based sampling .",
    "as argued earlier and shown in  , this algorithm does not work .",
    "to fix the biasing , we perform a somewhat mysterious step .",
    "we have wedge @xmath43 _ w - list _ and encounter @xmath3 . if @xmath3 is already part of @xmath45 , we simply reset @xmath42 to @xmath47 .",
    "so even though @xmath45 may be closed , we just assume it is open .",
    "this completely resolves the biasing , and we give a formal proof in .    * outputting the estimate : * finally , we need to output estimates,@xmath48 for @xmath49 , respectively .",
    "this is the only step where the time window @xmath6 is used .",
    "we look at all wedges in _ w - list _ that formed in the time @xmath50 $ ] .",
    "the total number of these wedges can be scaled to estimate @xmath51 .",
    "the number of these wedges , where @xmath52 is scaled to estimate @xmath53 , and the appropriate ratio estimates @xmath54 .",
    "we prove that the mg - triangle is correct on expectation and prove weak concentration results bounding the variance .",
    "we also show some basic bounds on the storage of mg - triangle . throughout this section ,",
    "we focus at some time @xmath2 and the simple graph @xmath4 . we stress that there is no distributional assumption on the graph or the stream .",
    "all the probabilities are over the internal randomness of the algorithm ( which is encapsulated in the random behavior of @xmath29 ) .",
    "lemproblemma [ lem : prob ] consider time @xmath2 . for any edge @xmath55 , the probability that @xmath56 _ e - list _ is @xmath28 . for any wedge @xmath57 ,",
    "the probability that @xmath43 _ w - list _ is @xmath58 .",
    "consider edge @xmath31 .",
    "we first argue that @xmath59 _ e - list _ iff @xmath60 ( note that this is independent of the frequency of @xmath31 ) .",
    "suppose @xmath61 .",
    "at its first occurrence , @xmath31 enters _ e - list _  and remains in _ e - list_. suppose @xmath62",
    ". at no timestep will @xmath31 be added to _ e - list _ , regardless of how many times it appears . from the randomness of @xmath29 , @xmath60 with probability @xmath28 .",
    "hence , @xmath56 _ e - list _ with probability @xmath28 .    for wedge @xmath63 to be in _ w - list",
    "_ , both its edges must be in _ e - list_. that means both @xmath64 and @xmath65 are at most @xmath28 .",
    "suppose the first occurrence of @xmath31 is before that of @xmath66 .",
    "at the first time @xmath66 occurs , procedure update will add @xmath45 to _ w - list _  iff @xmath67 .",
    "at any subsequent occurrence of @xmath31 or @xmath66 , the wedge @xmath45 is not considered for adding to _ w - list _ ( simply because @xmath31 and @xmath66 are already in _",
    "e - list _ ) .",
    "the total probability ( by the randomness of @xmath29 ) is @xmath58 .",
    "@xmath68    the following hold just by linearity of expectation .",
    "we move proofs to the = 1supplementary file attached with the submission .",
    "thmspacethm [ thm : space ] the expected size of _ e - list _ is @xmath69)$ ] and the expected size of _ w - list _ is @xmath70)$ ] .",
    "thmwedgethm [ thm : wedge ] @xmath71 = |w_t|$ ] .",
    "now we come to a key theorem that shows that @xmath72 is correct on expectation .",
    "this is where we prove that our proposed debiasing technique works .",
    "thmmainthm [ thm : main ] @xmath73 = |t_t|$ ] .",
    "we extend the definition of boolean flag @xmath42 to every wedge @xmath45 in @xmath74 .",
    "let @xmath75 if @xmath45 is not present in _ w - list _ ( at time @xmath2 ) .",
    "note that @xmath76 .",
    "for every edge @xmath31 in @xmath77 , let @xmath78 be the maximum time @xmath79 such that @xmath80 . fix a triangle @xmath81 formed by edges @xmath82 and @xmath8 , and assume ( by relabeling if required ) that @xmath8 is the last edge to appear in the stream among @xmath7 , and @xmath8 .",
    "in other words , @xmath83 . since @xmath84 are wedges , it makes sense to talk about @xmath85 , etc .",
    "the following is the debiasing argument , showing that exactly one wedge in @xmath86 has @xmath52 .",
    "[ lem : debias ] @xmath87 .",
    "moreover , @xmath88 iff @xmath89 is in _ w - list_.    consider the moment @xmath90 when @xmath91 .",
    "if wedge @xmath92 _ w - list _ , then by definition , @xmath93 is @xmath47 . if @xmath94 _ w - list _ , then by step  [ step : reset ] of algorithm  [ algo : estimate ]",
    ", the value of @xmath95 is reset to @xmath47 .",
    "no subsequent change is made to this value .",
    "an identical argument shows the same for @xmath96 .",
    "finally , @xmath85 is set to 1 at this moment iff if wedge @xmath89 is in _ e - list _ , and once again , this value is not changed subsequently .",
    "@xmath68    by lemma  [ lem : debias ] , @xmath97   = { \\mathbf{e}}[x_{\\{c , a\\ } } ] = 0 $ ] , while @xmath98 $ ] is the probability that this wedge is in _ w - list_. this is exactly @xmath58 . therefore , the sum of expectations of @xmath42 over all three wedges @xmath45 of the triangle @xmath99 is @xmath100 = \\alpha^2\\beta$ ] .",
    "observe this is true for any fixed triangle in @xmath101 .",
    "for any wedge @xmath45 that does not participate in a triangle , @xmath42 is obviously zero . by linearity of expectation ,",
    "@xmath73 = ( \\alpha^2\\beta)^{-1 } { \\mathbf{e}}[\\sum_{w \\in w_t } x_w ] $ ] @xmath102 $ ] .",
    "plugging in the value of @xmath103 $ ] , this is @xmath104 . @xmath68",
    "using methods from  @xcite , we can prove weak concentration bounds for @xmath72 and @xmath105 ( by bounding their variance ) .",
    "we need to assume that @xmath28 and @xmath41 are large enough to ensure that enough wedges of @xmath74 are in _ w - list _ , and there are at least as many wedges in @xmath4 as edges .",
    "the latter is needed to rule out extreme cases like @xmath4 being a path or a matching .",
    "this assumption is reasonable for real - world networks , as can be seen in  .",
    "proof is in the = 1supplementary file attached with the submission .",
    "thmconcthm [ thm : conc ] fix some sufficiently small @xmath106 .",
    "suppose that @xmath107 ( the expected number of wedges in @xmath74 that are in _ w - list _ ) is at least @xmath108 .",
    "furthermore @xmath109 ( there are at least as many wedges in @xmath4 as edges )",
    ". then , @xmath110 < \\gamma$ ] , @xmath111 < \\gamma$ ] , and @xmath112 < 4\\gamma$ ] .",
    "we implemented our algorithm in c++ and ran it on a macbook air laptop with 1.7 ghz intel core i7 processor and 8 gb 1600 mhz ddr3 ram .",
    "we applied mg - triangle on a variety of real - world datasets .",
    "refer to for details about these datasets .",
    "+ * dblp : * this is a co - authorship network for papers on the dblp website . from the raw data at dblp",
    "@xcite we extracted 786,719 papers by ignoring papers with ( i ) a single author , ( ii ) more than 100 authors , and ( iii ) missing `` year '' metadata . for each paper",
    "we put an edge corresponding to every distinct pair of co - authors resulting in a total of 3,630,374 ( multi)edges .",
    "+   * enron : * this network is derived from emails between enron employees between 1999 and 2003  @xcite .",
    "nodes correspond to employees while edges represent their email correspondence .",
    "multiple emails between the same pair of individuals result in a multigraph . +",
    "* flickr : * this dataset consists of friendship connections of users of flickr , obtained from @xcite .",
    "originally , the data was collected in @xcite .",
    "( results on flickr given in the = 1supplementary file attached with the submission . ) + * snap : * we extended our data set to include networks from snap @xcite . we synthetically replicate edges of these datasets to get a multigraph .    [ cols=\"<,^,^,^,^,^,^,^,^,^ \" , ]     * convergence of estimate : * and demonstrate convergence of the _ final estimates _",
    "( i.e. for @xmath113 ) for increasing space .",
    "we define storage as the number of edges stored by our algorithm : @xmath114 .",
    "we first choose @xmath41 in @xmath115 and then vary @xmath28 in increments of @xmath116 up to @xmath117 .",
    "for each setting of @xmath28 and @xmath41 , we plot 5 runs of the algorithm .",
    "one can see that both the transitivity and triangles estimates converge rapidly to true values as we increase the space .",
    "our estimates for various time windows also converge rapidly , as we demonstrate in . for these experiments",
    ", we picked specific time windows on dblp , namely , 19892008 , 19992008 , and 19382008 .",
    "this is mostly for demonstrating the convergence of differing window sizes .",
    "we chose @xmath41 from @xmath115 and varied @xmath28 in increments of @xmath118 up to @xmath119 .",
    "for each value of @xmath28 and @xmath41 , we give 5 runs of the algorithm . in the plots @xmath120-axis gives increasing space (",
    "i.e. , increasing @xmath28 ) and the @xmath121-axis is the estimate .    across the board",
    ", we see rapid convergence as storage increases . for dblp ,",
    "storage of 60k is enough to guarantee extremely accurate results ( relative errors within 5% ) , for all the time windows .",
    "this is even true for the 10 year window , which is quite small compared to the entire stream of data ( mg - triangle will not work for window sizes of a year , since there are not enough samples from such a window .",
    "but the number of edges in a year is small enough to store explicitly ) .",
    "* space usage : * shows the space used by our algorithm in terms of parameters @xmath28 and @xmath41 .",
    "we measure both _",
    "e - list _ and _ w - list _ for varying values of @xmath28 and @xmath41 , and plot the predictions of .",
    "we see almost perfect alignment of the predictions with .    * comparison with previous work : * we run the algorithms of  @xcite ,  @xcite , and  @xcite , using hash based sampling to recreate uniform edge sampling in a multigraph .",
    "we first note that our implementations work correctly on the simple graph version of dblp , shown in .",
    "all algorithms converge extremely rapidly . when these algorithms are applied to the multigraph version of dblp",
    ", then they all converge to incorrect triangle estimates ( ) .    * tests on a broader data set : * for more validation of mg - triangle , we run it on a large set of real - world graphs .",
    "most of these graphs are neither temporal nor multigraphs .",
    "we construct a multigraph stream from each graph as follows : every edge @xmath31 of the graph is independently replicated with probability @xmath122 ( specifically @xmath123 times where @xmath123 is uniform in @xmath124 ) .",
    "the stream is obtained by randomly permuting these multiedges . for each graph",
    ", we only use mg - triangle record to transitivity and triangle count of the entire stream ( the graph @xmath125 $ ] ) .",
    "the results are presented in . for these runs ,",
    "we set @xmath126 and capped the size of wedge reservoir to @xmath127 ( by choosing @xmath41 appropriately ) .",
    "we observe that transitivity estimates are very sharp ( matching the true values up to the third decimal point in many cases ) .",
    "the relative error in triangles estimates is less than @xmath128 for most cases and never exceeds @xmath129 .",
    "the overall space used by the algorithm is at most @xmath130 of the number of edges of the underlying _ simple _ graph .",
    "we point out that for orkut which has nearly half a billion edges ( after injecting duplicate edges ) , the transitivity estimate closely matches with the true value and the relative error in triangles is less than @xmath24 .",
    "the total storage used is less than @xmath25 of the edge stream .",
    "mg - triangle takes as input a single time window length @xmath6 . but observe that the primary data structures _",
    "e - list _ , _ w - list _ , and @xmath42 are independent of this window . as a result , mg - triangle can handle multiple time windows with the _ same _ data structure .",
    "we only maintain the latest timestamp for each edge , and do not store any history .",
    "if the time window @xmath50 $ ] is too small , it is unlikely that _ e - list _ will have any edges from this window . on the other hand ,",
    "small time windows can be stored explicitly to get exact answers .    * triangle trends in dblp : * in our opinion , the following results are the real achievement of mg - triangle .",
    "we wish to understand transitivity and triangle trends for dblp in various time windows .",
    "we focus on 5-year , 10-year , 15-year , 20-year , and entire history windows .",
    "so think of a ( say ) 5-year sliding time window in dblp , and the aim is to report the transitivity in each such window .",
    "refer to (  all \" refers to the window that contains the entire history ) . _",
    "the algorithm mg - triangle makes a single pass over dblp without preprocessing and provides results for all these windows at every year . _",
    "the transitivity reveals intriguing trends .",
    "firstly , smaller windows have higher transitivity .",
    "it shows that network clustering tends to happen in shorter time intervals .",
    "this is probably because of the affiliation structure of coauthorship networks .",
    "the increase of triangle counts over time ( for the same window size ) may not be too surprising , given that the volume of research increasing . but juxtapose this with the _ decreasing _ of transitivity over time .",
    "this means that ( say ) the transitivity in 20042008 is higher than 20092013 , even though there are more papers ( and more triangles ) in the latter interval .",
    "why is this the case ?",
    "is it because of increasing of interdisciplinary work , which might create more open wedges ? or is it simply some issue with the recording of dblp data ?",
    "will the decreasing transitivity converge in the future , or do we expect it to simply go to zero ? can we give a reasonable model of this behavior ?",
    "we believe that the output of mg - triangle will lead to many data science questions , and this is the real significance of the algorithm",
    ".    * triangle trends in enron : * in and , we present triangles and transitivity estimates for enron for various windows . for this dataset",
    ", we think of a window as being defined by a specified number of past edges .",
    "in particular , apart from considering the entire past , we look at windows formed by past 200k , 400k , and 800k edges",
    ". observe that in the beginning of the stream all these windows coincide , since the windows are equivalent .",
    "focusing on the triangles estimate , it is clear that the estimate corresponding to the larger window size dominates that of a smaller window size .",
    "what is interesting for enron dataset is that the same ordering is observed even for transitivity estimates .",
    "that is , in general , a transitivity estimate curve corresponding to the larger size window dominates the one corresponding to the smaller size .",
    "we observe a completely opposite behavior with dblp transitivity curves , see .",
    "another interesting observation is that in case of enron , the curves for triangles estimates for smaller window lengths flattens out whereas that in dblp the curves for triangle estimates continue to rise even for smaller time windows .",
    "this indicates that the growth of _ total number of triangles _ is superlinear in dblp ( with respect to the number of years ) whereas it is nearly linear ( with respect to the number of edges seen so far ) in case of enron .",
    "indeed the final estimate for the number of triangles in enron is almost the same as the number of edges in the stream .",
    "we thank ashish goel for suggesting the use of hash - function based reservoir sampling .",
    "this was a key step towards the development of the final algorithm ."
  ],
  "abstract_text": [
    "<S> real - world graphs often manifest as a massive temporal  stream \" of edges . </S>",
    "<S> the need for real - time analysis of such large graph streams has led to progress on low memory , one - pass streaming graph algorithms . </S>",
    "<S> these algorithms were designed for simple graphs , assuming an edge is not repeated in the stream . </S>",
    "<S> real graph streams however , are almost always multigraphs i.e. , they contain many duplicate edges . </S>",
    "<S> the assumption of no repeated edges requires an extra pass _ storing all the edges _ just for deduplication , which defeats the purpose of small memory algorithms . </S>",
    "<S> we describe an algorithm , mg - triangle , for estimating the triangle count of a multigraph stream of edges . </S>",
    "<S> we show that all previous streaming algorithms for triangle counting fail for multigraph streams , despite their impressive accuracies for simple graphs . </S>",
    "<S> the bias created by duplicate edges is a major problem , and leads these algorithms astray . </S>",
    "<S> mg - triangle avoids these biases through careful debiasing strategies and has provable theoretical guarantees and excellent empirical performance . </S>",
    "<S> mg - triangle builds on the previously introduced wedge sampling methodology . </S>",
    "<S> another challenge in analyzing temporal graphs is finding the right temporal window size . </S>",
    "<S> mg - triangle seamlessly handles multiple time windows , and does not require committing to any window size(s ) a priori . </S>",
    "<S> we apply mg - triangle to discover fascinating transitivity and triangle trends in real - world graph streams . </S>"
  ]
}