{
  "article_text": [
    "in recent years , both computer scientists and pure mathematicians have become increasingly interested in the class of _ @xmath0-automata _ , or finite state automata augmented with a memory register which stores at any given time an element of a given monoid @xmath0 .",
    "the register is initialised with the identity element of the monoid ; while reading an input word the automaton can modify the register contents by multiplying by elements of the monoid .",
    "a word is accepted by the automaton if , having read the entire word , the automaton reaches a final state , with the register returned to the identity element .",
    "such automata have arisen repeatedly , both explicitly and implicitly , in the theory of computation .",
    "for example , the blind @xmath2-counter machines studied by greibach @xcite are simply @xmath3-automata .",
    "related examples have also been studied by ibarra , sahni and kim @xcite .",
    "@xmath0-automata are also equivalent to a class of regulated grammars , known as",
    "_ regular valence grammars",
    "more recently , there has been increasing interest in this idea from pure mathematicians , especially in the case that the register monoid is a group .",
    "an area of lasting interest in combinatorial group theory is the connection between structural properties of infinite discrete groups , and language theoretic properties of their _",
    "word problems_. results of gilman and shapiro @xcite , of elston and ostheimer @xcite and of the author @xcite have demonstrated that @xmath0-automata can play a useful role in this area .",
    "moreover , recent research of the author , silva and steinberg @xcite has established a connection between the theory of @xmath1-automata and the _ rational subset problem _ for groups , allowing language - theoretic results to be applied to decision problems in group theory .",
    "one aim of the present paper is to provide a self - contained introduction to the theory of this important area , in a form intelligible both to pure mathematicians and to computer scientists . in doing so",
    ", we aim to make explicit and transparent the connections between the computational and the algebraic approaches to @xmath0-automata and @xmath1-automata .",
    "this is especially important since , to date , group theorists , semigroup theorists and computer scientists have all worked on this topic , often unaware of crucial results from the other discipline .",
    "another objective is to establish a number of new results of a foundational nature .",
    "in addition to this introduction , this paper comprises three sections .",
    "section  [ sec_prelim ] briefly recalls some necessary preliminaries , and gives suggested references to more detailed treatments .",
    "section  [ sec_basics ] introduces @xmath0-automata and the families of languages they define .",
    "we also explain their relationship to the theory of rational transductions , and study the connection between algebraic properties of monoids and closure properties of the language classes they define . in section  [ sec_contextfree ] ,",
    "we proceed to show how @xmath0-automata techniques can be used to obtain a group - theoretic interpretation and proof of one of the most important results in formal language theory ",
    "namely , the chomsky - schtzenberger theorem characterising context - free languages as the images under rational transductions of 2-sided dyck languages @xcite .",
    "in this section , we introduce the basic definitions which will be required in this paper .",
    "we begin with a very brief introduction to formal languages and automata ; a more comprehensive exposition can be found in any of the numerous texts on the subject , such as @xcite .",
    "we assume a familiarity with some basic definitions from algebra , such as semigroups and monoids @xcite , groups , generating sets and presentations @xcite .",
    "more specialist notions from algebra will be defined as and when they are needed .",
    "let @xmath4 be a finite set of symbols , called an _",
    "alphabet_. a _ word _ over @xmath4 is a finite sequence of zero or more symbols from @xmath4 ; the unique _ empty word _ of length zero is denoted @xmath5 .",
    "the set of all words over @xmath4 forms a monoid under the operation of _ concatenation _ ; this is called the _ free monoid _ on @xmath4 and denoted @xmath6 .",
    "a _ language _ over @xmath4 is a set of words over @xmath4 , that is , a subset of the free monoid @xmath6 .",
    "a _ finite automaton _ over a monoid @xmath0 is a finite directed graph , possibly with loops and multiple edges , with each edge labelled by element of @xmath0 , together with a designated _ initial vertex _ and a set of designated _ terminal vertices_. the vertices and edges of an automaton are often called _ states _ and _ transitions _ respectively .",
    "the labelling of edges extends naturally to a labelling of ( directed ) paths by elements of @xmath0 .",
    "the _ subset accepted _ or _ recognised _ by the automaton is the set of all elements of @xmath0 which label paths between the initial vertex and some terminal vertex .",
    "a subset recognised by some automaton is called a _ rational subset of @xmath0_. notice that finitely generated submonoids of @xmath0 are examples of rational subsets .    of particular interest",
    "is the case where @xmath7 is a free monoid on an alphabet @xmath4 , so that the automaton accepts a set of words over @xmath4 , that is , a language over @xmath4 .",
    "a language accepted by such an automaton is called a _ rational language _ or a _ regular language_. the formal study of languages in general , and of regular languages in particular , is of fundamental importance in theoretical computer science , and increasingly also in combinatorial algebra .",
    "another interesting case is that where @xmath8 is a direct product of free monoids .",
    "such an automaton is called a _ finite transducer _ from @xmath6 to @xmath9 ; it recognises a relation , termed a _",
    "rational transduction_. relations between free monoids , and rational transductions in particular , are a powerful tool for studying relationships between languages . if @xmath10 then we say that the _ image _ of a language @xmath11 under @xmath12 is the language of all words @xmath13 such that @xmath14 for some @xmath15 .",
    "we say that a language @xmath16 is a _ rational transduction _ of a language @xmath17 if @xmath16 is the image of @xmath17 under some rational transduction . for a detailed exposition of the theory of rational transductions ,",
    "see @xcite .",
    "in this section , we introduce the definitions and some basic properties of @xmath0-automata and @xmath1-automata . let @xmath0 be a monoid with identity @xmath18 and @xmath4 a finite alphabet .",
    "@xmath0-automaton over @xmath4 _ is a finite automaton over the direct product monoid @xmath19 . for simplicity ,",
    "we assume that the edges are labelled by elements of @xmath20 .",
    "we identify the free monoid @xmath6 with its natural embedding into @xmath19 as @xmath21 ; thus , a word @xmath22 is _ accepted _ by the automaton if there is a path from the initial vertex to a terminal vertex labelled @xmath23 .",
    "the _ language accepted _ by the automaton is the set of all words in @xmath6 accepted by the automaton ; it is the intersection of the _ subset _ accepted with the embedded copy @xmath21 of @xmath6 .",
    "we denote by @xmath24 the family of all languages accepted by @xmath0-automata .    from a mathematical perspective , then , the theory of @xmath0-automata can be viewed as an attempt to understand certain properties of a space ( the free monoid @xmath6 ) by embedding it into a larger space ( @xmath19 ) with more structure ; in this sense , it is very roughly analoguous to the embedding of the real numbers into the complex numbers . from a computational perspective , an @xmath0-automaton can be thought of as a ( non - deterministic ) finite automaton augmented with an extra memory register , which stores at any point an element of the monoid @xmath0 .",
    "the register is initialised with the identity element of the monoid , and at each stage in its operation , the automaton can modify the contents of the register by multiplication on the right by some element of the monoid @xmath0 .",
    "of course it can also leave the register unchanged , simply by multiplying by the identity .",
    "the automaton can not read the register during operation , but the contents act as an extra barrier to acceptance  a word is accepted only if reading it can result in reaching a final state in which the register value has returned to the identity .",
    "as an example , recall that a _ blind @xmath2-counter automaton _ is a finite automaton augmented with @xmath2 registers , each of which stores a single integer value @xcite .",
    "the registers can be incremented and decremented but not read ; they are initialised to zero , and a word is accepted exactly if , when reading it , the automaton can reach a final state with all registers returned to zero . in view of the discussion above , it is clear that a blind @xmath2-counter automaton is essentially the same thing as a @xmath3-automaton , where @xmath25 denotes the group of integers under addition , that is , the infinite cyclic group .",
    "notice that we have not required that the register monoid be finitely generated .",
    "however , the following elementary observation will often allow us to restrict attention to the case in which it is .",
    "[ prop_fingensub ] let @xmath0 be a monoid , and suppose that @xmath17 is accepted by an @xmath0-automaton .",
    "then there exists a finitely generated submonoid @xmath26 of @xmath0 such that @xmath17 is accepted by a @xmath26-automaton .",
    "since an @xmath0-automaton has finitely many edges , only finitely many elements of @xmath0 can feature as the left - hand component of edge labels in a given automaton .",
    "clearly , the register can only ever hold values in the submonoid @xmath26 of @xmath0 generated by these elements , so it suffices to view the automaton as an @xmath26-automaton .",
    "notwithstanding proposition  [ prop_fingensub ] , it is occasionally useful to consider the _ class _ of all @xmath0-automata where @xmath0 is not finitely generated , since the corresponding class of languages ( the union of the classes corresponding to the finitely generated submonoids of @xmath0 ) may not be defined by a single finitely generated monoid . see , for example , ( * ? ? ?",
    "* theorem  6.2 ) , for an application of this approach .",
    "if @xmath0 is a monoid generated by a set @xmath27 , we say that the _ identity language _",
    "@xmath28 of @xmath0 with respect to @xmath27 is the set of all words over @xmath27 representing the identity . in the case",
    "@xmath0 is a group , the identity language is traditionally called the _ word problem _ of the group ; this terminology is justified by the fact that the membership problem of this language is algorithmically equivalent to the problem of deciding whether two given words represent the same element of the group , that is , to the word problem in the sense of universal algebra . in a general monoid there is no such equivalence , and so the term word problem is less appropriate .",
    "the following simple observation has been made by several authors ( see , for example , @xcite ) , but apparently overlooked by a number of others .",
    "it allows us to apply many standard results from the theory of formal languages to the study of @xmath0-automata .",
    "[ prop_mauto_transduction ] let @xmath17 be a language and @xmath0 a finitely generated monoid .",
    "then the following are equivalent :    * @xmath17 is accepted by an @xmath0-automaton ; * @xmath17 is a rational transduction of the identity language of @xmath0 with respect to some finite generating set ; * @xmath17 is a rational transduction of the identity language of @xmath0 with respect to every finite generating set .",
    "we begin by proving the equivalence of ( i ) and ( ii ) .",
    "first suppose ( i ) holds , and let @xmath29 be an @xmath0-automaton accepting @xmath17 .",
    "let @xmath30 be the ( necessarily finite ) set of elements of @xmath0 which occur on the left - hand - side of edge labels in @xmath29 .",
    "extend @xmath30 to a finite generating set @xmath27 for @xmath0 .",
    "now @xmath29 can be viewed as a finite transducer from @xmath31 to @xmath6 .",
    "it follows easily from the relevant definitions that the image of @xmath28 is exactly the language @xmath17 , so that ( ii ) holds .",
    "conversely , suppose ( ii ) holds .",
    "then there is a finite generating set @xmath27 for @xmath0 and a finite transducer @xmath29 from @xmath31 to @xmath6 such that @xmath17 is the image of @xmath28 under @xmath29 .",
    "we obtain from @xmath29 an @xmath0-automaton , by replacing each edge label @xmath32 with @xmath33 where @xmath34 is the element of @xmath0 represented by @xmath35 .",
    "again , it follows easily from the definitions that the resulting @xmath0-automaton accepts exactly the language @xmath17 .    since the monoid is assumed to be finitely generated , it is immediate that ( iii ) implies ( ii ) .",
    "it remains only to show that ( ii ) implies ( iii ) .",
    "let @xmath36 and @xmath27 be finite generating sets for a monoid @xmath0 .",
    "for each symbol @xmath37 , choose a word @xmath38 representing the same element of @xmath0 .",
    "now let @xmath12 be the submonoid of @xmath39 generated by the ( finitely many ) pairs of the form @xmath40 .",
    "@xmath12 is a finitely generated submonoid , and hence also , by our observations above , a rational transduction . now",
    "if @xmath17 is the image of @xmath28 under a rational transduction @xmath30 then the relational composition @xmath41 is a rational transduction ( * ? ? ? * theorem  ii.4.4 ) , and it is easily verified that @xmath17 is the image of @xmath42 under @xmath43 .",
    "proposition  [ prop_mauto_transduction ] tells us that the theory of @xmath0-automata can be viewed as a special case of the well - established field of rational transductions .",
    "indeed , we can easily and profitably translate a large body of existing theory concerning rational transductions into the @xmath0-automaton setting .",
    "for two main reasons , however , the study of @xmath0-automata retains a distinct flavour , and remains of interest in its own right .",
    "firstly , the structure of the register monoid can be used to prove interesting things about the accepting power of @xmath0-automata .",
    "secondly , @xmath0-automata can be used to gain insight into computational and language - theoretic aspects of monoids .",
    "both of these factors have special weight in the case that the register monoid is a group , with all the extra structure that entails .",
    "the following result , which has been observed independently by several authors @xcite , is an immediate corollary of proposition  [ prop_mauto_transduction ] together with the fact that rational transductions are closed under composition ( * ? ? ?",
    "* theorem  iii.4.4 ) .",
    "[ cor_wordproball ] let @xmath0 and @xmath26 be finitely generated monoids .",
    "then the identity language of @xmath26 is accepted by an @xmath0-automaton if and only if every language accepted by an @xmath26-automaton is accepted by an @xmath0-automaton .",
    "we end this section with a discussion of closure properties of language families of the form @xmath24 .",
    "first , we observe that every language class of the form @xmath24 is easily seen to be closed under finite union , as a simple consequence of non - determinism . on the other hand , a class @xmath24 need not be closed under intersection . the following theorem will allow us to provide a straightforward characterisation of when such a class is intersection - closed .",
    "the converse part was essentially proved by mitrana and stiebe @xcite in the case that the register monoids are groups .",
    "recall that a morphism between free monoids is called _ alphabetic _ if it maps each letter of the domain alphabet to either a single letter or the empty word ; one language is said to be _ an alphabetic morphism of _ another if the former is the image of the latter under an alphabetic morphism of free monoids .",
    "[ thm_directproduct ] let @xmath44 be monoids .",
    "then a language is accepted by an @xmath45-automaton if and only if it is an alphabetic morphism of a language of the form @xmath46 where each @xmath47 is accepted by an @xmath48-automaton .",
    "suppose first that @xmath11 is accepted by an @xmath45-automaton .",
    "it follows easily from proposition  [ prop_fingensub ] that @xmath17 is accepted by an @xmath49-automaton where each @xmath50 is a finitely generated submonoid of @xmath48 . for each @xmath50",
    "choose a finite generating set @xmath51 and let @xmath52 so that @xmath27 is a finite generating set for @xmath53 .",
    "now by proposition  [ prop_mauto_transduction ] , @xmath17 is the image of the identity language @xmath54 under some rational transduction @xmath55 .",
    "we claim that @xmath56 can be written as @xmath57 where each @xmath58 lies in @xmath59 .",
    "let @xmath60 be the set of all words @xmath35 such that @xmath61 represents a tuple in @xmath53 with the identity element @xmath18 in the @xmath62th position .",
    "it is readily verified that @xmath60 is accepted by an @xmath50-automaton with a single ( initial and terminal ) state @xmath63 , and a loop at @xmath63 labelled @xmath64 whenever the letter @xmath65 represents a tuple with @xmath66 in the @xmath62th position .",
    "now a word @xmath61 represents the identity of @xmath53 if and only if @xmath61 lies in @xmath60 for all @xmath62 , so that @xmath56 is the intersection of the @xmath60 as required .",
    "now by ( * ? ? ?",
    "* theorem  iii.4.1 ) , there exists an alphabet @xmath67 , a regular language @xmath68 and two alphabetic morphisms @xmath69 and @xmath70 such that @xmath71 it is easy to check that inverse morphisms distribute over intersection , so that @xmath72 thus we obtain @xmath73 each @xmath59 is closed under rational transductions , and hence also under inverse morphisms and intersection with regular languages .",
    "it follows that @xmath74 for each @xmath62 , so setting @xmath75 completes the proof of the direct implication .    for the converse ,",
    "it is easy to check that the graph of an alphabetic morphism between free monoids is a ratonal transduction ; it follows that the family @xmath76 is closed under alphabetic morphisms .",
    "thus , it suffices to suppose @xmath77 where each @xmath47 is in @xmath78 , and show that @xmath79 . for this , it is clearly sufficient to prove the case @xmath80 and then apply induction .",
    "suppose , then , that @xmath81 and that each @xmath47 is accepted and by an @xmath48-automaton @xmath82 with state set @xmath83 .",
    "recall that the edges of each @xmath82 are labelled by elements of @xmath84 .",
    "we define an @xmath85-automaton @xmath29 with :    * state set @xmath86 ; * an edge from @xmath87 to @xmath88 labelled @xmath89 whenever @xmath90 has an edge from @xmath91 to @xmath92 labelled @xmath93 and @xmath94 has an edge from @xmath95 to @xmath96 labelled @xmath97 for some letter @xmath98 ; * an edge from @xmath87 to @xmath99 labelled @xmath100 whenever @xmath90 has an edge from @xmath91 to @xmath92 labelled @xmath101 ; * an edge from @xmath87 to @xmath102",
    "labelled @xmath103 whenever @xmath94 has an edge from @xmath95 to @xmath96 labelled @xmath104 ; * start state @xmath105 where @xmath106 and @xmath107 are the start states of @xmath90 and @xmath94 respectively ; and * final states @xmath108 such that @xmath109 and @xmath63 are final states of @xmath90 and @xmath94 respectively .",
    "it is an easy exercise to verify that @xmath29 accepts exactly the intersection @xmath110 .",
    "returning to our example , an elementary application of theorem  [ thm_directproduct ] is the following characterisation of the classes of languages accepted by blind @xmath2-counter automaton .",
    "[ cor_greibach ] a language is recognised by a blind @xmath2-counter automaton if and only if it is an alphabetic morphism of the intersection of @xmath2 languages recognised by blind @xmath18-counter automata .",
    "we also obtain a characterisation of those monoids @xmath0 for which @xmath24 is closed under intersection .",
    "[ cor_intersectionclosure ] let @xmath0 be a finitely generated monoid .",
    "then @xmath24 is closed under finite intersection if and only if there exists an @xmath0-automaton accepting the identity language of @xmath111 .    if there exists an @xmath0-automaton accepting the identity language of @xmath111 then by corollary  [ cor_wordproball ] , every language recognised by an @xmath112-automaton is recognised by an @xmath0-automaton .",
    "but by theorem  [ thm_directproduct ] , this means that every intersection of two @xmath0-automaton languages is recognised by an @xmath0-automaton .",
    "it follows by induction that @xmath24 is closed under finite intersection .",
    "conversely , the identity language of @xmath111 is certainly recognised by an @xmath112-automaton , and hence by theorem  [ thm_directproduct ] is an alphabetic morphism of the intersection of two languages in @xmath24 .",
    "thus , if the latter is intersection - closed then it contains the identity language of @xmath111 , as required .",
    "corollary  [ cor_intersectionclosure ] has a particularly interesting interpretation in the case that the monoid @xmath0 is a free group .",
    "we shall see in section  [ sec_contextfree ] below that a language is context - free if and only if it is recognised by a free group automaton .",
    "a well - known theorem of muller and schupp @xcite , combined with a subsequent result of dunwoody @xcite , tells us that a finitely generated group has context - free word problem if and only if it is _ virtually free _ , that is , has a free subgroup of finite index .",
    "it follows that the fact that context - free languages are not intersection closed can be viewed as a manifestation of the fact that a direct product of virtually free groups is not , in general , virtually free .",
    "in this section we consider @xmath0-automata where @xmath0 is drawn from two particularly significant classes of monoids ; namely , polycyclic monoids and free groups . from the perspective of algebra , these may be considered the motivating examples for the subject .",
    "we observe that an important theorem of chomsky and schtzenberger @xcite has a natural interpretation in terms of @xmath0-automata , and show how @xmath0-automata techniques can be used to provide an algebraic and automata - theoretic proof of the theorem .",
    "we begin by recalling a basic definition from automata theory .",
    "let @xmath27 be a finite alphabet .",
    "a _ pushdown store _ or _ stack _ with alphabet @xmath27 is a storage device which stores , at any one time , a finite but unbounded sequence of symbols from @xmath27 , the basic operations permitted are appending a new symbol to the right - hand end of the sequence ( `` pushing '' a symbol ) , removing the rightmost symbol from the sequence (  popping  ) and reading the rightmost symbol on the stack .",
    "the possible configurations of a pushdown store are naturally modelled by elements of the free monoid @xmath31 .",
    "the operations of pushing and popping can be modelled by partial functions , defined upon subsets of @xmath31 .",
    "specifically , for each symbol @xmath65 we define a function @xmath113 which models the operation pushing the symbol @xmath114 onto the stack .",
    "the corresponding operation of popping @xmath114 can only be performed when the stack is in certain configurations ",
    "namely , when it has an @xmath114 as the rightmost symbol  and so is modelled by a partial function . @xmath115",
    "the set of functions @xmath116 generates a submonoid of the monoid of all partial functions on @xmath31 , under the natural operation of composition .",
    "this monoid , which was first explicitly studied by nivat and perrot @xcite , is called the _ polycyclic monoid on @xmath27 _ and denoted @xmath117 .",
    "the elements of @xmath117 encapsulate the various sequences of operations which can be performed upon a pushdown store with alphabet @xmath27 .",
    "the _ rank _ of @xmath117 is defined to be the size @xmath118 of the alphabet @xmath27 ; a polycyclic monoid is uniquely determined ( up to isomorphism ) by its rank .",
    "polycyclic monoids also arise naturally in the structural theory of semigroups ; of particular importance is that of rank @xmath18 , which is known as the _ bicyclic monoid_. for more general information see ( * ? ? ?",
    "* section 9.3 ) .",
    "there is a natural embedding of the free monoid @xmath31 into the polycyclic monoid @xmath117 , which takes each symbol @xmath114 to @xmath119 . with this in mind",
    ", we shall identify @xmath119 with @xmath114 itself .",
    "the element @xmath120 is an _",
    "inverse _ to @xmath119 in the sense of inverse semigroup theory @xcite ; hence , we shall denote it @xmath121 .",
    "thus , the monoid @xmath117 is simply generated by the set @xmath122 and we shall have no further need of the notation @xmath119 and @xmath120 .",
    "the inversion operation extends to the whole of @xmath117 , by defining @xmath123 for each @xmath65 , and @xmath124 for @xmath125 .",
    "if @xmath114 and @xmath126 are distinct elements of @xmath27 then the product @xmath127 is the _ empty partial function _ and forms a _ zero _ in the semigroup @xmath117 .",
    "we shall define a _",
    "pushdown automaton _ to be a polycyclic monoid automaton .",
    "the equivalence of this definition to the standard one is straightforward and well - documented , for example in @xcite . for those familiar with the usual definition , we remark that the top symbol on the stack corresponds to the rightmost position of the word , and that the automaton accepts with empty stack .",
    "the attentive reader may have noticed that our polycyclic monoid model of the pushdown store does not provide explicitly for `` reading '' the contents of the stack .",
    "however , a polycyclic monoid automaton can use non - determinism to test the rightmost stack symbol , by attempting to pop every possible symbol and moving to different states depending upon which succeeds ; all but one attempt will result in the register containing a zero value , which effectively constitutes failure .",
    "this is an example of a more general phenomenon , in which the apparent blindness of an @xmath0-automaton can be overcome by the use of non - determinism .",
    "the languages accepted by pushdown automata are called _ context - free_. the class of context - free languages , which also admits an equivalent definition in terms of generating grammars @xcite , is one of the most important languages classes in computer science .",
    "we recall also a key notion from combinatorial group theory .",
    "recall that the _ free group _ on the alphabet @xmath27 is the group defined by the monoid presentation @xmath128 generators from @xmath27 we shall call _ positive generators _ , while those from @xmath129 are _ negative generators_. free groups are of central importance in combinatorial and geometric group theory ; see @xcite or @xcite for a detailed introduction .",
    "the identity languages of the free group @xmath130 and the polycyclic monoid @xmath117 , with respect to the standard generating set @xmath131 , are well - known in formal language theory .",
    "they are called the _ 2-sided dyck language _ ( or just _ dyck language _ ) on @xmath131 and the _ 1-sided dyck language _ ( or _ restricted dyck language _ or _ semi - dyck language _ ) on @xmath131 respectively .",
    "the former consists of all words over @xmath131 which can be reduced to the empty word by successive deletion of factors of the form @xmath132 or @xmath133 where @xmath65 .",
    "the latter contains all words which can be reduced to the empty word by deleting only factors of the form @xmath132 with @xmath65 .",
    "in particular , we see that the latter is ( strictly ) contained in the former .",
    "thus , any word over @xmath131 representing the identity in @xmath117 also represents the identity in @xmath130 ; the converse does not hold .    a well - known theorem of chomsky and schtzenberger states that the context - free languages are exactly the rational transductions of 1-sided dyck languages , and of 2-sided dyck languages ( * ? ? ?",
    "* proposition  2 ) . by proposition  [ prop_mauto_transduction ]",
    "this result has the following interpretation in the @xmath0-automaton setting .",
    "[ thm_chomschut ] let @xmath17 be a language .",
    "then the following are equivalent :    * @xmath17 is context - free ; * @xmath17 is accepted by a polycyclic monoid [ of rank @xmath134 automaton ; * @xmath17 is accepted by a free group [ of rank @xmath134 automaton .",
    "we have already remarked that the equivalence of ( i ) and ( ii ) is the usual equivalence of context - free grammars and pushdown automata , and so is well - known .",
    "it is also straightforward to show that a pushdown automaton can simulate a free group automaton , so that ( iii ) implies ( ii ) ; this is left as an exercise for the interested reader .",
    "the restriction to polycyclic monoids [ respectively , free groups ] of rank 2 is a simple consequence of the well - known fact that every polycyclic monoid [ free group ] of countable rank embeds into the polycyclic monoid [ free group ] of rank 2 .",
    "what remains , which is the real burden of the proof , is to show that ( i ) and/or ( ii ) implies ( iii ) .",
    "the original proof of chomsky and schtzenberger starts with a context - free grammar , and produces from it an appropriate rational transduction ; an example of this approach can be found in @xcite .",
    "a direct group - theoretic proof of this result was claimed by dassow and mitrana @xcite ; however , their construction was fundamentally flawed @xcite .",
    "a correct algebraic proof has recently been provided by corson @xcite , who exhibited a free group automaton accepting the identity language of a polycyclic monoid automaton .",
    "the authors of both @xcite and @xcite appear to have overlooked the equivalence of the statement to the theorem of chomsky and schtzenberger .",
    "theorem  [ thm_chomschut ] is quite surprising , in view of our comments above regarding the method used by a polycyclic monoid automaton to read the rightmost symbol of the stack .",
    "a polycyclic monoid automaton apparently makes fundamental use of its ability to `` fail '' , by reaching a zero configuration of the register monoid .",
    "since a free group has no zero , a free group automaton seems to have no such capability , and appears to be `` blind '' in a much more fundamental way .",
    "however , it transpires that a carefully constructed interplay between the finite state control and the group register can achieve the desired `` failing '' effect .",
    "we remark also upon an interesting corollary to theorem  [ thm_chomschut ] .",
    "it is well known that every recursively enumerable language is a homomorphic image ( and hence a rational transduction ) of the intersection of two context - free languages .",
    "hence , combining theorems  [ thm_directproduct ] and [ thm_chomschut ] , we immediately obtain the following result , which was first observed in the group case by mitrana and stiebe @xcite .",
    "let @xmath0 be a free group of rank @xmath135 or more , or a polycyclic monoid of rank @xmath135 or more",
    ". then @xmath136 is the class of all recursively enumerable languages .    in the rest of this section",
    ", we present an alternative group- and automata - theoretic proof of theorem  [ thm_chomschut ] .",
    "in particular , we show explicitly how a free group automaton can simulate the operation of a pushdown automaton . in the process",
    ", we also obtain some technical results relating polycyclic monoids to free groups , which may be of independent interest .",
    "we begin by introducing a construction of a free group automaton from a polycyclic monoid automaton , that is , a pushdown automaton .",
    "suppose @xmath11 is the language accepted by a @xmath117-automaton @xmath29 with state set @xmath137 , that is , by a pushdown automaton with state set @xmath137 and stack alphabet @xmath27 .",
    "let @xmath138 be a new symbol not in @xmath27 , and let @xmath139 denote the alphabet @xmath140 .",
    "we construct from @xmath29 an new finite automaton @xmath141 with edges labelled by elements of @xmath142 .",
    "it has :    * state set @xmath143 where @xmath144 are disjoint sets in bijective correspondence with @xmath137 ; * start state @xmath145 where @xmath63 is the start state of @xmath29 ; * final states of the form @xmath146 where @xmath63 is a final state of @xmath29 ; * an edge from @xmath147 to @xmath145 labelled @xmath148 whenever @xmath29 has an edge from @xmath109 to @xmath63 labelled @xmath149 with @xmath114 a positive generator . * an edge from @xmath150 to @xmath145 labelled @xmath151 whenever @xmath29 has an edge from @xmath109 to @xmath63 labelled by @xmath152 with @xmath153 a negative generator ; * an edge from @xmath147 to @xmath145 labelled @xmath154 whenever @xmath29 has an edge from @xmath109 to @xmath63 labelled @xmath154 ; * for each @xmath155 , an edge from @xmath145 to @xmath146 labelled @xmath156 ; and * for each @xmath155 , a loop at state @xmath146 labelled @xmath157 .",
    "( 80,40 ) pda=(10,20 ) ( pda ) ( pda ) plus=(40,20 ) ( plus)@xmath158 minus=(70,20 ) ( minus)@xmath159 ( pda)@xmath160 ( pda)@xmath161    ( plus)@xmath162 ( minus , plus)@xmath163 ( minus)@xmath157 ( plus , minus)@xmath164    the automaton @xmath141 can be interpreted either as a @xmath165-automaton or as an @xmath166-automaton ; it transpires that the language accepted is the same for each choice .",
    "figure  1 illustrates a @xmath167-automaton accepting the 1-sided dyck language on the alphabet @xmath168 , together with the automaton constructed from it by the procedure above .    in general",
    ", we make the following claim .",
    "[ thm_constructionworks ] the free group automaton @xmath141 and the polycyclic monoid automaton @xmath141 both accept exactly the language @xmath17 .",
    "the rest of this section is devoted to the proof of theorem  [ thm_constructionworks ] .",
    "we shall need a number of preliminary definitions and results .",
    "let @xmath169 and @xmath170 .",
    "let @xmath138 be a new symbol not in @xmath131 .",
    "a _ permissible padding _ of @xmath61 is a word of the form @xmath171 where @xmath172 and for each @xmath173 we have @xmath174    thus , a permissible padding of @xmath61 is obtained by inserting the symbol @xmath138 after every generator in @xmath61 , and zero or more @xmath175s before each _ negative _ generator , and at the end of the word .",
    "the following lemma connects the above definition to our free group automaton construction ; it can be routinely verified .",
    "[ lemma_autopermissible ] the automaton @xmath141 accepts @xmath149 if and only if there exists a word @xmath176 such that @xmath114 is a permissible padding of @xmath126 , and @xmath177 is accepted by @xmath29 .",
    "we shall also use the following straightforward lemma concerning words representing the identity in the free group .",
    "[ lemma_freegroupdecompose ] let @xmath178 be a word representing the identity in a free group @xmath130 , and suppose @xmath179 where @xmath180 are words and @xmath181 .",
    "then either @xmath95 has a suffix @xmath182 where @xmath183 represents the identity , or @xmath96 has a prefix @xmath184 where @xmath183 represents the identity .",
    "we have seen that any word in the 2-sided dyck language , that is , any word representing the identity in the free group , can be reduced to the empty word by successively removing factors of the form @xmath185 and @xmath186 where @xmath65 .",
    "such a reduction process for @xmath61 must eventually bring the given occurrence of the generator @xmath114 next to some occurrence @xmath121 , by deleting the letters between them .",
    "but the product of these letters must be a factor representing the identity ; setting @xmath183 equal to this factor will give an appropriate factorisation of either @xmath95 or @xmath96 ( depending upon whether the given occurrence of @xmath121 occurs before or after that of @xmath114 ) .",
    "recall that an element of the free group @xmath130 is called _ positive _ if it can be written as a product of one or more positive generators .",
    "the following definition facilitates a geometric interpretation of the positive elements .",
    "let @xmath178 and let @xmath187 .",
    "we say that @xmath114 is a _",
    "minimum _ of @xmath61 , if    * @xmath61 has a prefix representing @xmath114 ; and * no prefix of @xmath61 which represents @xmath114 is immediately followed by a negative generator .",
    "[ prop_positive ] let @xmath61 be a word representing the identity in @xmath130 .",
    "then the following are equivalent :    * @xmath61 represents the identity in the polycyclic monoid @xmath117 ; * every prefix of @xmath61 represents a positive or identity element ; * the only minimum of @xmath61 is the identity of @xmath130 .",
    "the equivalence of ( i ) and ( ii ) is well - known , and easily deduced from the definitions .",
    "suppose now that ( ii ) holds , that is , that every prefix of @xmath61 represents a positive or identity element .",
    "it is easily seen that the identity is a minimum of @xmath61 . moreover ,",
    "if @xmath114 is a non - identity element represented by a prefix of @xmath61 then consider the longest prefix of @xmath61 representing @xmath114 .",
    "considering the path traced through the cayley graph of @xmath130 , and recalling that the latter is a tree , it is clear that the letter following this prefix must be a negative generator .",
    "thus , @xmath114 can not be a minimum of @xmath61 , and so ( iii ) is satisfied .",
    "conversely , suppose that ( ii ) does not hold , that is , that some prefix of @xmath61 represents a non - positive , non - identity element .",
    "suppose further for a contradiction that ( iii ) holds , that is , that the identity is the only minimum of @xmath61 .",
    "let @xmath183 be a non - positive , non - identity element represented by a prefix of @xmath61 .",
    "since @xmath183 is not a minimum for @xmath61 , there is a prefix @xmath95 of @xmath61 representing @xmath183 , which is followed by a negative generator @xmath188 .",
    "but now @xmath189 represents another non - positive , non - identity element . continuing in this way",
    ", we obtain an infinite sequence of prefixes of @xmath95 , which must clearly all represent distinct elements .",
    "since @xmath61 is a finite word , this gives the required contradiction .",
    "[ lemma_insertpad ] let @xmath190 be a word representing the identity in @xmath165 and suppose @xmath191 .",
    "then there exists a factorisation @xmath192 such that    * either @xmath193 or @xmath92 begins with a negative generator ; and * @xmath194 also represents the identity in @xmath165 .",
    "if @xmath95 represents the identity then @xmath96 also represents the identity , so it suffices to take @xmath195 and @xmath193 .",
    "assume now that @xmath95 does not represent the identity , and consider the path traced through the cayley graph of the free group @xmath166 when starting from the identity and reading @xmath61 .",
    "since @xmath61 represents the identity in @xmath165 , it also represents the identity in @xmath166 , so having reached the element represented by @xmath95 , this path must return to the identity .",
    "since the cayley graph is a tree , the path must either leave in the direction of the identity , in which case we take @xmath196 , or leave away from the identity and then return to the element represented by @xmath95 having read a word @xmath91 , before leaving in the direction of the identity . by proposition  [ prop_positive ]",
    ", @xmath95 represents a positive element , so `` in the direction of the identity '' means following a negative generator . defining @xmath92 to be such that @xmath192 , it is now clear that @xmath91 and the corresponding @xmath92 have the desired properties .",
    "the following proposition , which may also be of interest in its own right , is the main step in the proof .    [ prop_identitypadding ]",
    ". then the following are equivalent .",
    "* @xmath61 represents @xmath18 in the polycyclic monoid @xmath117 ; * @xmath61 admits a permissible padding which represents @xmath18 in the polycyclic monoid @xmath165 ; * @xmath61 admits a permissible padding which represents @xmath18 in the free group @xmath166 .",
    "first suppose ( i ) holds . by repeated application of lemma  [ lemma_insertpad ]",
    ", we can insert the symbol @xmath138 between every pair of generators and the symbol @xmath175 in appropriate places , so as to obtain a permissible padding of @xmath61 which represents @xmath18 in @xmath165 .",
    "thus , ( ii ) holds .    clearly every word representing",
    "the identity in @xmath165 also represents the identity in @xmath166 , so that ( ii ) implies ( iii ) .    finally , suppose ( iii ) holds , and let @xmath197 be a permissible padding of @xmath61 which represents @xmath18 in @xmath166 .",
    "suppose for a contradiction that @xmath61 does not represent @xmath18 in @xmath117 .",
    "certainly since @xmath197 represents @xmath18 in @xmath166 we must have that @xmath61 represents @xmath18 in @xmath130 .",
    "so by proposition  [ prop_positive ] , @xmath61 contains a minimum which is not the identity .",
    "let @xmath95 be the shortest prefix of @xmath61 representing this minimum , and write @xmath191 .",
    "it follows that we can write @xmath198 where @xmath199 and @xmath200 are paddings of @xmath95 and @xmath96 respectively .",
    "certainly , since @xmath95 is the shortest prefix representing the given element , @xmath95 has no suffix representing the identity in @xmath130 .",
    "it follows that @xmath199 has also no suffix representing the identity in @xmath130 .",
    "hence , by lemma  [ lemma_freegroupdecompose ] , we can write @xmath201 where @xmath202 represents the identity",
    ".    let @xmath63 and @xmath183 be the words over @xmath203 obtained by deleting all occurences of the letters @xmath138 and @xmath175 from @xmath204 and @xmath202 respectively . since @xmath205 is a permissible padding of @xmath61 , it follows that @xmath206 or @xmath63 begins with a negative letter .",
    "but we have @xmath207 where @xmath183 represents the identity .",
    "if @xmath206 then @xmath95 must represent the identity , which is a contradiction . on the other hand , if @xmath63 begins with a negative letter , then this contradicts the assumption that @xmath95 is a minimum of @xmath61 .",
    "we are now ready to complete the proof of theorem  [ thm_constructionworks ] .",
    "suppose a word @xmath61 is accepted by the pushdown automaton @xmath29 .",
    "then by definition , there exists a word @xmath208 such that @xmath114 represents the identity in @xmath117 , and @xmath149 is accepted by @xmath29 when viewed as a usual finite automaton .",
    "now by proposition  [ prop_identitypadding ] , @xmath114 admits a permissible padding @xmath126 which represents @xmath18 in the polycyclic monoid @xmath165 , and hence also in the free group @xmath166 .",
    "now by lemma  [ lemma_autopermissible ] , @xmath177 is accepted by @xmath141 as a finite automaton over @xmath209 and over @xmath210 .",
    "hence , @xmath61 is accepted by @xmath141 as both a free group automaton and a polycyclic monoid automaton .",
    "conversely , if @xmath61 is accepted by @xmath141 as a free group automaton [ polycyclic monoid automaton ] , then by definition there exists a word @xmath126 such that @xmath177 is accepted by @xmath141 as an automaton over @xmath209 [ respectively , @xmath210 ] and @xmath126 represents @xmath18 in the free group [ polycyclic monoid ] .",
    "now by lemma  [ lemma_autopermissible ] , @xmath126 is a permissible padding of some word @xmath114 , such that @xmath149 is accepted by @xmath29 viewed as a finite automaton over @xmath212 .",
    "but by proposition  [ prop_identitypadding ] , @xmath114 represents @xmath18 in the polycyclic monoid @xmath117 , so that @xmath61 is accepted by @xmath29 , as required .",
    "this research was conducted while the author was at universitt kassel , and was supported by a marie curie intra - european fellowship within the 6th european community framework programme .",
    "the author would like to thank the many people with whom he had helpful discussions , and especially gretchen ostheimer for her comments on the first draft of this article .",
    "he would also like to thank kirsty for all her support and encouragement ."
  ],
  "abstract_text": [
    "<S> we present an exposition of the theory of _ @xmath0-automata _ and _ @xmath1-automata _ , or finite automata augmented with a multiply - only register storing an element of a given monoid or group . </S>",
    "<S> included are a number of new results of a foundational nature . </S>",
    "<S> we illustrate our techniques with a group - theoretic interpretation and proof of a key theorem of chomsky and schtzenberger from formal language theory .    </S>",
    "<S> mark kambites +    school of mathematics ,   university of manchester + manchester m60 1qd ,   england    ` mark.kambites@manchester.ac.uk ` + </S>"
  ]
}