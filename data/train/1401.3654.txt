{
  "article_text": [
    "the job shop scheduling ( js ) problem can be stated as follows .",
    "consider a set of machines and a set of jobs .",
    "each job consists of a sequence of operations to be processed in a given order .",
    "each operation must be processed individually on a specific machine , without preemption .",
    "the objective is to find a processing sequence for each machine that minimizes the makespan , which is the completion time of the last operation to be processed .",
    "the flexible job shop scheduling ( fjs ) problem is a generalization of the js problem in which there may be several machines , not necessarily identical , capable of processing an operation .",
    "specifically , for each operation , we are given the set of machines on which that operation can be processed .",
    "the goal is to decide on which machine each operation will be processed , and in what order the operations will be processed on each machine , so that the makespan is minimized .",
    "the js problem is known to be np - hard  @xcite .",
    "it is one of the most difficult combinatorial optimization problems according to lawler _",
    "et al . _",
    "since the fjs problem is at least as difficult as the js , it is also np - hard .",
    "many researchers use heuristic methods to deal with ( the minimization of makespan of ) the fjs problem .",
    "see for example @xcite .",
    "in contrast , the number of publications concerned with the exact solution of the fjs problem is very small .",
    "fattahi , mehrabad , and jolai  @xcite presented one of the most relevant papers in this direction .",
    "they proposed a mixed integer linear programming ( milp ) model for the fjs problem and used it to solve a set of 20 instances of small and medium size with the lingo software .",
    "the results were compared to those obtained by heuristic methods .",
    "zgven , zbakir , and yavuz  @xcite elaborated a more concise milp model for the fjs problem , modifying an earlier one by manne  @xcite to incorporate machine flexibility .",
    "we shall name their model  y .",
    "zgven  _ et al .",
    "_  tested their model by solving the 20 instances mentioned above with the cplex solver .",
    "they obtained optimal solutions for the 10 small size instances faster than fattahi  _ et al._they also obtained optimal solutions for five of the medium size instances and better bounds for the other five , while fattahi _",
    "_   did not find optimal solutions for any of those instances .    in the literature ,",
    "each job in the fjs problem consists of a sequence of operations to be processed in a given order , just as in the ordinary js problem . in an industrial environment",
    ", however , it is common to have jobs some of whose operations can be processed simultaneously .",
    "moreover , some mutually independent sequences of operations may feed into an `` assembling '' operation .",
    "similarly , there may be `` disassembling '' operations which split the sequence of subsequent operations into two or more mutually independent sequences .",
    "a representation of this kind of job is shown in figure  [ forkjob](a ) .    in a real problem from the printing industry",
    "@xcite , for example , some jobs consist of two independent sequences of operations followed by a third that puts together the results of the first two .",
    "a representation of this kind of job is shown in figure  [ forkjob](b ) .",
    "we say that such configuration is a _ y - job _ , while the traditional type of job ( a simple sequence of operations ) is a _ path - job_.    vilcot and billaut  @xcite have already considered a class of instances that includes y - jobs and path - jobs .",
    "they describe an environment , coming from the printing and boarding industry , where each operation in a job can have more than one predecessor , but at most one direct successor .",
    "alvarez - valds _ et al . _",
    "@xcite describe yet another environment , coming from a glass factory , that requires an even more general variant of the fjs problem .    in this paper ,",
    "we extend the usual definition of the fjs problem to allow a job to be a set of operations with an arbitrary precedence relation , thus including general types of jobs like those in figure  [ forkjob ] .",
    "then we propose a new milp model for the extended fjs problem that focuses on the operations and the precedences among them , and leaves the jobs only implicitly defined .",
    "[ cols=\"^,^,^ \" , ]     to solve the milps , we used the ibm ilog cplex 12.1 solver with the following settings : 3600s for time limit , 1 for maximum number of threads , and 2048 mb for working memory .",
    "all other parameters were left at their default values .",
    "the computer used in the experiments has an intel xeon e5440 2.83ghz processor .",
    "the computational experiments compare the y@xmath2  model with our proposed model . in a set of prelimary experiments ,",
    "cplex was not able to find a feasible solution to a few of the instances within the time limit , regardless of the model used . to remedy this",
    ", we gave cplex an initial feasible solution produced by a constructive heuristic we call est , for `` earliest starting time '' .",
    "( the makespan of the schedule found by est was also used to set the value of parameter  @xmath3 . )",
    "the est heuristic produces a permutation @xmath4 of the set @xmath5 of operations such that @xmath6 whenever @xmath7 , and a corresponding sequence @xmath8 of machines .",
    "of course @xmath9 for each  @xmath10 , and @xmath11 is to be processed on machine  @xmath12 .",
    "this pair of sequences defines an admissible selection : just take the set of all ordered pairs @xmath13 in @xmath14 such that @xmath6 and @xmath15 .",
    "each iteration of est starts with sequences @xmath16 and @xmath17 such that no arc in @xmath18 enters the set @xmath19 .",
    "let @xmath20 , and let @xmath21 be the set of all pairs @xmath13 in @xmath22 such that @xmath6 and @xmath15 .",
    "let @xmath23 be the tight schedule for @xmath24 , where @xmath25 .",
    "then the completion time of @xmath11 will be @xmath26 and each machine @xmath27 will become available at time @xmath28 ( or @xmath29 if there is no @xmath10 such that @xmath30 ) . from this information ,",
    "the heuristic chooses @xmath31 in @xmath32 and @xmath33 in  @xmath34 .",
    "the idea is to choose a pair @xmath35 whose execution can start the earliest .",
    "this rule is , in general , satisfied by several pairs .",
    "experience shows that an additional tie - breaking rule can significantly improve the heuristic .",
    "let @xmath36 be the mean processing time , i.e.  @xmath37 for each operation  @xmath38 .",
    "the tie - breaking rule can be stated as follows .",
    "if there are several candidate pairs @xmath39 for the role of @xmath35 , choose a pair that maximizes the largest sum of the form @xmath40 , where @xmath41 is a path in  @xmath42 .",
    "this heuristic takes time @xmath43 .",
    "table  [ tab : fattahih ] shows the results for the instances of fattahi _ et al . _",
    "@xcite and table  [ tab : brandimarteh ] for the instances of brandimarte  @xcite .",
    "these two sets of instances contain only path - jobs .",
    "tables  [ tab : newinstancesh ] and  [ tab : newinstancesg ] show the results for the two new sets of instances , generated as described above .",
    "the instance column records the names of the instances .",
    "the size column contains the number of jobs , the number of operations per job ( or an interval @xmath44-@xmath45 , when the jobs have between @xmath44 and @xmath45 operations ) , and the number of machines .",
    "column est shows the makespan of the schedule produced by the heuristic .",
    "for each model , the @xmath46 column records the optimal makespan or the lower and upper bounds found by cplex , followed by the relative gap ( the difference between upper and lower bounds , divided by the upper bound ) .",
    "the cpu column records the cpu time , in seconds , taken by cplex to solve the milp ( or  3600 , if cplex did not solve the milp in one hour ) . in all cases ,",
    "the est heuristic used no more than a hundredth of a second .    in table",
    "[ tab : fattahih ] we observe that , for most instances , cplex ran fastest under the new model . moreover , cplex found an optimal solution for instance mfjs07 with the new model , while it did not find one ( within the time limit ) with y@xmath2 .",
    "on the other hand , for instance mfjs09 , cplex obtained a solution with better makespan and better lower bound using y@xmath2  than using the new model .",
    "recall that model y@xmath2  reduces to the original y  model when applied to the instances considered in table  [ tab : fattahih ] and that , moreover , numerical experiments of zgven  _ et al . _",
    "@xcite show that their model is several orders of magnitude faster than the model introduced in  fattahi  _ et al . _",
    "@xcite .",
    "the instances in table  [ tab : brandimarteh ] are larger , in terms of total number of operations , and clearly more difficult . under the new model ,",
    "cplex obtained better bounds for most of them .",
    "for the instance mk01 , it found an optimal solution in just 60 seconds but could not raise the lower bound to prove the optimality of the solution . under the y@xmath2  model",
    ", cplex found an optimal solution in 1621 seconds .",
    "table  [ tab : newinstancesh ] shows that , on instances with y - jobs , cplex performed better with the new model , running significantly faster and obtaining better bounds , except on instances yfjs17 and yfjs18 .",
    "most of the instances in table  [ tab : newinstancesg ] seem to be more difficult .",
    "cplex found an optimal solution for instances dafjs01 and dafjs02 with the new model , while it could not find one ( within the time limit ) with y@xmath2 . for instances dafjs03 and dafjs04 , cplex found an optimal solution under the new model considerably faster than it did under y@xmath2 .",
    "for the other 26 instances , cplex did not find an optimal solution with either model .",
    "for only two of these  26 instances , cplex achieved better bounds when using the y@xmath2  model . for eight of the  26 instances",
    ", cplex ended with the same bounds for both models , and for  16 of the  26 instances , cplex achieved better bounds when using the new model .",
    "here is a summary of our results . for 34 of the 85 instances considered ,",
    "cplex found an optimal solution and proved its optimality when using the new model . using the y@xmath2  model , cplex did so for 27 of the 85 instances .",
    "for all but 7 of the 85 instances , cplex produced at least as good a lower bound under the new model as under y@xmath2 . for 27 of the 85 instances ,",
    "cplex was strictly faster under the new model . for 11 of the 85 instances ,",
    "cplex was faster under the y@xmath2  model , and for 49 instances , under both models , cplex ran for one hour without finding an optimal solution . on the instances with y - jobs and the more general ones ,",
    "cplex performed especially well under the new model .",
    "taking all this into account , we conclude that , in general , cplex produced better results with the new model than with  y@xmath2 .",
    "the fjs problem is a generalization of the js problem in which there may be several machines , not necessarily identical , capable of processing an operation . in the literature on the problem ,",
    "each job consists of a sequence of operations to be processed in a given order , as in the ordinary js problem . in the present paper , we extended the definition of the fjs problem to allow an arbitrary precedence relation over the set of operations and we presented a new milp model for the extended problem .",
    "we also presented computational experiments indicating that the proposed model is better than that of zgven , zbakir , and yavuz  @xcite .",
    "some of our experiments were done on a new set of instances , inspired by a real application .",
    "this set can be used as benchmark in future computational experiments on the fjs problem .    for benchmarking purposes , and to allow reproduction of the results presented in this paper , the c / c++ code for the milp models ( using the ibm ilog cplex concert technology , version 12.1 ) , as well as the code of the est heuristic , the code of the two generators , and the four sets of instances used in the experiments are available for download at http://www.ime.usp.br/~cris / fjs/.                    e.  lawler , j.  lenstra , a.  rinnooy  kan , and d.  shmoys .",
    "sequencing and scheduling : algorithms and complexity . in a.h.g .",
    "rinnooy  kan s.c  graves and p.h .",
    "zipkin , editors , _ logistics of production and inventory _ , volume  4 , chapter 9 , pages 445522 .",
    "elsevier , 1993 ."
  ],
  "abstract_text": [
    "<S> a milp model for an extended version of the flexible job shop scheduling problem is proposed . </S>",
    "<S> the extension allows the precedences between operations of a job to be given by an arbitrary directed acyclic graph rather than a linear order . </S>",
    "<S> the goal is the minimization of the makespan . </S>",
    "<S> theoretical and practical advantages of the proposed model are discussed . </S>",
    "<S> numerical experiments show the performance of a commercial exact solver when applied to the proposed model . the new model is also compared with a simple extension of the model described by zgven , zbakir , and yavuz   ( mathematical models for job - shop scheduling problems with routing and process plan flexibility , _ applied mathematical modelling _ , 34:15391548 , 2010 ) , using instances from the literature and instances inspired by real data from the printing industry .    * </S>",
    "<S> * a milp model for an extended version + of the flexible job shop problem * *    june 28 , 2013    ernesto g. birgin@xmath0 , paulo feofiloff@xmath0 , cristina g. fernandes@xmath0 ,    everton l. de melo@xmath1 , marcio t. i. oshiro@xmath0 , dbora p. ronconi@xmath1    @xmath0 dept .  of computer science , ime , university of so paulo , brazil    egbirgin@ime.usp.br , pf@ime.usp.br , cris@ime.usp.br , oshiro@ime.usp.br    @xmath1 dept .  of production engineering , epusp , university of so paulo , brazil    everton.melo@usp.br , dronconi@usp.br </S>"
  ]
}