{
  "article_text": [
    "texts , data , objects ( digital or otherwise ) can be viewed from different perspectives .",
    "no perspective depends upon another and each exists separate from the other . by attempting to encode different perspectives that are independent of each other",
    ", one can encounter `` overlapping elements '' .",
    "the most common example is a document with two distinct structural views , when the logical view is _ section / subsection/ paragraph _ and the physical view is _ page / column_. each single structural view of this document is a hierarchy and the components are either disjoint or nested inside each other .",
    "the overlapping issue arises when one structural element can not be neatly nested into others .",
    "for instance , when a paragraph starts in one page and terminates in the next page .",
    "similar situations can appear in videos and other multimedia contents , where temporal or spatial constituents of a media file may overlap each other @xcite .    the most used model for expressing structure of documents",
    "is based on hierarchies , which ensures that each region is nested within another and the regions can be accessed by use of parent - child or ancestor - descendant relationships . this tree data structure requires organizing structural information of digital objects in a single tree , which is not applicable for overlapping structures . in other words , tree - based markup languages -such as xml- and the corresponding indexing and retrieval techniques are not sufficient for documents with non - hierarchical structures .",
    "scholars have introduced several solutions for overlapping problem .",
    "tei ( text encoding initiative ) consortium @xcite suggests several methods to deal with non - hierarchical structures in sgml or xml context .",
    "however , these methods are just syntactical solutions to represent non - hierarchical structures and non of them are based on a well - defined data model . on the other hand ,",
    "there are some non - xml markup languages such as sgml concur @xcite , lmnl @xcite and texmecs @xcite , in which texmecs is based on a data well - defined model called goddag .    in order to efficiently query over overlapping structures in large data repositories , the structural elements of an overlapping data model",
    "should be efficiently summarized and indexed . to this end , we consider documents with continuous , ordered structural elements ( as common features of non - hierarchical structures ) and introduce a data model together with an xml - compatible parsing and indexing method .",
    "in other words the scope of this paper is overlap - only marked up documents , such that the order of appearance of document elements is unique .",
    "overlap - only documents are also addressed in @xcite and @xcite , where the authors mostly focused on serializability of the data model .",
    "the contributions of this paper are three - fold : 1 ) we formally define tgsa ( tree - like graph for structural annotations ) as a new data model for overlapping structures , which preserves simplicity while being expressive .",
    "2 ) we introduce an efficient algorithm to map annotated documents to the tgsa data model .",
    "our algorithm is compatible with xml parsing algorithms and can efficiently generate overlapping data model ( tgsa ) comparing to @xcite .",
    "3 ) we extend xml pre - post indexing method to the tgsa data model , which can represent parent - child and ancestor - descendant relationships as well as overlaps .",
    "this paper is organized as follows .",
    "section 2 motivates this research by providing use cases and applications of non - hierarchical structures .",
    "section 3 presents the background and related works . modelling and indexing methods",
    "are represented in section 4 , where subsection 4.1 , 4.2 and 4.3 describe the tgsa data model , the tgsa construction algorithm and indexing methods , respectively .",
    "section 5 concludes the paper .",
    "overlapping is a situation that is more common than it may be thought of . in general , annotating several aspects of an object ( i.e. stream of data ) implies overlapping structures .",
    "lots of scholars encounter overlaps in the area of computational linguistic , speech and complex text analysis .",
    "some of these situations are as follows :    [ [ content - analysis - of - textual - data ] ] content analysis of textual data + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    many search applications use a pipeline process for analysing input data .",
    "for instance , fsis ( fast search for internet sites ) , which is a microsoft search platform , uses such pipeline to detect content of unstructured or semi - structured documents @xcite . as shown in figure [ pipe ] , this pipeline consists of several components , where each component analyses one aspect of data and adds annotations to the input .",
    "these annotations can be structural information such as sentences , paragraphs and links or extracted entities such as addresses , locations and names .",
    "since each component extracts annotations independent of other components , some annotations may overlap each other .",
    "[ [ question - answering - systems ] ] question answering systems + + + + + + + + + + + + + + + + + + + + + + + + + +    qa systems need to search among a large collection of annotated documents to find the answer for a natural language query .",
    "these systems , mostly have access to a rich linguistic and semantic annotation of data , where overlapping is very likely to happen . as it is discussed in @xcite , in order to get effective results for complex queries , a qa system needs to handle overlaps for both indexing and query processing .",
    "[ [ annotating - non - textual - objects ] ] annotating non - textual objects + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    overlapping structures can be seen not only in documents , but also while encoding other kinds of digital data . for instance , to classify a movie database based on genres , the time interval of each genre should be annotated by movie analysers . among these annotations",
    ", there might be scenes that are annotated for more than one genres .",
    "example 1 illustrates this scenario , where _  dream \" _ scene overlaps both _",
    " romance \" _ and _  musical \" _ genres .",
    "handling overlapping annotations , allows classical structural information retrieval systems to answer the queries like :    * find all scenes that only contain romance content ( i.e. no overlaps with other genres ) .",
    "* find all scenes that have both musical and romance contents ( i.e. scenes that overlap two genres ) .    ....",
    "< sample >    < video >      <",
    "scene id=\"love \" s=\"00:00 \" e=\"00:38\"/ >      <",
    "scene id=\"dream \" s=\"00:39 \" e=\"01:44\"/ >    < /video",
    ">    < genres >",
    "< genre id=\"romance \" s=\"00:00 \" e=\"00:45\"/ >      < genre id=\"musical \" s=\"00:46 \" e=\"01:34\"/ >      < genre id=\"romance \" s=\"01:00 \" e=\"01:44\"/ >    < /genres > < /sample > ....    as shown in example 1 , video annotations are encoded using stand - off annotations , where the original data is separated from structural views .",
    "stand - off annotation is a natural technique to encode annotations of non - textual data and also linguistic annotations of text documents @xcite .",
    "[ [ change - tracking - of - documents ] ] change tracking of documents + + + + + + + + + + + + + + + + + + + + + + + + + + + +    text change tracking is a feature provided by text editors such as microsoft office to allow users to revise a document .",
    "tracking of text changes is a known challenging topic , since this information needs to be stored in a markup language and the new structure of text may conflict with the former one . in other words , whenever a change affects the structure of a text ( such as merging two paragraphs or splitting a paragraph ) , the notations of this change break the hierarchical structure of current text encoding .",
    "example 2 demonstrates a case where the text change overlaps existing structure of document @xcite .    ....",
    "< p > the end of one paragraph     < change - start change - id= \" 1\"/ > < /p >   < p > and < change - end change - id=\"1\"/ >     the start of another paragraph</p > ....    [ [ digitizing - old - manuscripts ] ] digitizing old manuscripts + + + + + + + + + + + + + + + + + + + + + + + + + +    this task is another domain that needs dealing with non - hierarchical structures .",
    "building electronic version of old manuscripts requires encoding massive amounts of information , such as textual content , physical location of texts , linguistic information , visibility of characters and information about damages of manuscript @xcite .",
    "the difficulty of handling overlaps is that overlapping structures are not hierarchies and the popular markup languages , such as xml are based on hierarchies . as a result of lacking an adequate overlapping data model , several data structures have been proposed to describe overlapping structures . in the following , we discuss these data structures and their abilities to model different types of overlaps .    [ [ multiple - hierarchies - sgml - concur ] ] multiple hierarchies ( sgml concur ) + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the most straightforward model for the overlapping problem is to keep multiple hierarchies in a single document .",
    "this model is captured by the concur feature of sgml , which maintains multiple structural views of a document .",
    "it actually extends the sgml / xml data model to a model , where multiple trees ( with the same frontier ) can be encoded within a single document .",
    "the concur model is represented as a part of sgml and consequently it is a legitimate and maintainable approach for overlapping problem .",
    "however , this model is not widely implemented as a solution of overlaps .",
    "here is a list of concur drawbacks @xcite :    1 .",
    "the model is not able to constrain relations among dtds .",
    "for example a quote element may overlap paragraph elements but not chapter elements in the other dtd @xcite .",
    "2 .   concur does not provide self - overlaps , where two elements , with the same name , coinciding each other . in such cases one element have to be moved to another hierarchy , which means concur should support unpredictable dtds .",
    "concur can not simply model the deletion , insertion , duplication , or reordering of data in the various views @xcite .",
    "[ [ mct ] ] mct + + +    the multi - coloured tree ( mct ) @xcite data structure was introduced for storing multiple hierarchies . in mct ,",
    "different coloured hierarchies are built on top nodes , where they can share the same nodes .",
    "as discussed in @xcite , mcts are not suitable for representing multiple hierarchies in document - centric xml .",
    "one important issue is that there is no global order for children in different hierarchies .",
    "[ [ lmnl ] ] lmnl + + + +    lmnl ( layered markup and annotation language ) is a data model associated with a markup language @xcite .",
    "lmnl data model is based on layers rather than hierarchies.it represents documents without forcing elements into a hierarchy and can capture overlaps .",
    "[ [ goddags ] ] goddags + + + + + + +    goddag ( generalized ordered descendant directed acyclic graph ) @xcite is a well - defined data model , which is introduced to represent documents with overlapping structures . principally , goddag is a directed acyclic graph ( dag ) , where each non - terminal node has ordered descendants .",
    "goddag has two variations : restricted and generalized goddag .",
    "restricted goddag is capable of representing overlaps ; however its constraints rules out the possibility of modelling non - contiguous elements . here",
    "are three constraints of restricted goddag , which are relaxed in generalized goddag : 1 ) leaf nodes are ordered .",
    "2 ) each non - terminal dominates a contiguous subsequence of leaves .",
    "3 ) no two nodes dominate the same subsequence of the frontier . by relaxing these constraints",
    ", generalized goddag can represent discontinuous elements .",
    "sperberg - mcqueen et al . introduced and algorithm to convert mecs encoded documents to restricted goddag @xcite , while no algorithms is suggested for generalized goddag . in this paper , we show that the tgsa data model and its corresponding algorithm outperforms goddags in efficiency .",
    "querying over non - hierarchical structures requires a mechanism that relates structural regions to each other .",
    "iacob et al .",
    "@xcite extended xpath as expath to query overlaps over goddag structures .",
    "xiraf @xcite is another system that allows querying over overlapping annotations by moving from one hierarchy to another hierarchy .",
    "xiraf s query approach is based on burkowski s @xcite work , which adds four new overlapping operations to xpath queries .",
    "it should be noted that all of these query approaches are developed for domain specific applications .",
    "however , query processing for large data repositories needs investigations on indexing structures .",
    "overlapping data structures can be modelled by either graphs or tree - like structures , such as goddags . to the best of our knowledge",
    ", there is no research directly investigating on the overlapping indexing , however there has been large number of studies on xml and graph indexing .    according to @xcite , there are two main classes of structural indexing for xml data : numbering schemes and index graph schemes .",
    "the former is used for path joining , while the latter is for path selection in answering xml queries .",
    "zhang et al .",
    "@xcite proposed a numbering scheme for xml documents , called _ prepost _ encoding .",
    "this model is capable of processing parent - child as well as ancestor - descendant relationships . _",
    "dewey coding _",
    "@xcite is another famous numbering scheme , which can be maintained easier than prepost method .",
    "jin @xcite introduced a 3-hop indexing scheme , which is targeted for directed graphs with high edge - vertex density .",
    "in this section , we divide the problem of handling non - hierarchical structures into three issues and we dig into each issue in the following subsections .",
    "the first issue is which data model can represent hierarchies as well as overlaps ?",
    "although graphs can represent any relationships , we need less generalized but expressive enough data model that can represent overlapping structures efficiently .",
    "the second is how to parse and convert encoded documents to the data model ? and the third is how to index these structures to efficiently process structural queries ?          in general , structural annotations of documents are represented with graphs",
    ". however , for well - formed xml documents , these graphs are basically tree data structures , where edges represent parent - child relationships that are explicitly encoded in the document . in order to extend this data model to capture overlapping annotations",
    ", we introduce a new type of edge that represents overlapping relationship .",
    "in addition , we allow nodes to have more than one parent . as a result , the new data model would be a graph that satisfies some properties of trees .",
    "we call this new data model tgsa , which stands for tree - like graph for structural annotations .",
    "tgsa is basically a directed graph that has a set of nodes and arcs .",
    "the nodes correspond to the structural elements or text - nodes .",
    "each arc in tgsa graph is labelled with either ",
    "p - c \" ( parent - child ) or  o \" ( overlapping ) .",
    "examples of the data model are shown in figure [ tgsaex ] and figure [ tgsacons ] ( d ) , in which overlapping and parent - child relationships are shown using dashed and solid arcs , respectively .",
    "we consider tgsa as a two relational directed graph , defined as follows :    two - relational graph @xmath0 has a set of vertices @xmath1 and a set of arcs @xmath2 denoted by triples of form @xmath3 , where @xmath4 .",
    "based on this definition , we define tgsa as follows :    let @xmath0 be a two - relational directed graph .",
    "g is tgsa _ iff _ :",
    "g is connected and has no loops",
    "all modes have * atleast * one incoming edge except one root node that has no incoming edge .",
    "3 .   given nodes @xmath5 and @xmath6 , @xmath7 _ iff _ @xmath5 is parent of @xmath6 .",
    "4 .   given nodes @xmath5 and @xmath6 , @xmath8 _ iff _ @xmath5 precedes @xmath6 and @xmath5 and @xmath6 are overlapping .",
    "5 .   given nodes @xmath5 and @xmath6 ,",
    "if there is an indirect path from @xmath5 to @xmath6 , then the arc @xmath9 can not exist .",
    "paths in tgsa are defined whenever two nodes are connected via @xmath10 arcs . in other words",
    ", @xmath11 arcs do not create paths between nodes .",
    "a path in tgsa is a sequence of @xmath12 such that @xmath13 , @xmath14 , ... , @xmath15 are graph arcs of the type @xmath10 and the @xmath16 are distinct .",
    "paths in tgsa are transitive relations , in which given a path from @xmath17 to @xmath18 and @xmath18 to @xmath19 , there is always a path from @xmath17 to @xmath19 . unlike paths ,",
    "overlapping relations are not transitive .    given a tgsa graph @xmath0 and arcs @xmath20 and @xmath21 , *",
    "does not * imply that @xmath5  overlaps \" @xmath22 .",
    "based on the above definitions , tgsa can represent elements that overlap each other in very complex ways .",
    "moreover , tgsa does not constrain relationships between annotations across the document ; except that each annotation is related to a continuous piece of text and the document elements are ordered .",
    "[ [ tgsa - vs .- goddag ] ] tgsa vs. goddag + + + + + + + + + + + + + + +    tgsa is similar to restricted goddag in three aspects : 1 ) cycles are not allowed in both data models .",
    "2 ) the constraint of being only one path between two nodes is relaxed in both of them , which is one of the main properties of trees .",
    "this implies that each node can have multiple parents and in tgsa , each node can overlaps multiple nodes .",
    "3 ) each node dominates or overlaps a contiguous set of nodes , which means discontinuous elements can not be modelled .    on the other hand , unlike restricted goddag , tgsa mark overlapping elements using a different arcs type . by introducing _ overlapping _ arcs , tgsa can represent order of overlapping nodes , which is not possible in restricted goddag .",
    "tgsa can represent continuous , ordered elements , while goddags can handle disordered elements ( e.g. two parents with the same order but in different order )",
    ". such constraints together with introducing _ overlapping _ relations , makes tgsa a data model that be efficiently indexed , queried and converted from structural annotations .",
    "we now present an algorithm for building tgsa from annotated text documents , as shown in algorithm [ alg1 ] .",
    "the input to the algorithm is an in - line tagged document , where start and end of each node is labelled in the text .",
    "such documents ensure that the document elements are ordered .",
    "the algorithm is independent of encoding format of input , in which any encoding method or markup language can be used to represent overlaps .",
    "the only requirement is that , the start and end delimiters should be specified among the text .",
    "it must be stated that stand - off annotations , where the start and end of nodes are specified by positional values are not supported by this algorithm . however ,",
    "if the elements of a document are continuous and ordered , they can be converted to tgsa , even if they are encoded by stand - off annotations . for the sake of simplicity",
    ", we consider in - line tagged documents as the input of algorithm [ alg1 ] and show how document elements are mapped to tgsa .",
    "annotated document @xmath23 tgsa graph @xmath24    * begin *    @xmath25 , @xmath26 @xmath27 initialize a list for open nodes @xmath28 read next physical unit @xmath29 @xmath30 @xmath31 @xmath32 initialize a set @xmath33 @xmath34 @xmath35 @xmath36 @xmath37 @xmath38 @xmath39 @xmath40    * end *    @xmath41 is not descendant of @xmath42 @xmath43 @xmath44        to construct the tgsa graph @xmath24 , we need to initialize a list called @xmath45 to keep track of open elements .",
    "a node will be added to and removed from this list when an open and end tag is seen , respectively . as shown in figure [ tgsacons ] ( b ) , we first assume that the document is hierarchical and every two adjacent open nodes have parent - child relationship . whenever an end tag is seen , we need to check weather the node is overlapping with other nodes or not .",
    "if the node is the latest element added to the list @xmath45 , then it is not overlapping , otherwise the node is overlapping with the nodes added after it .",
    "the situation is demonstrated in figure [ tgsacons ] ( c ) , where node @xmath46 overlaps node @xmath47 . in such cases , four changes should be applied to the tgsa graph : 1 ) remove  p - c \" arcs between @xmath46 and @xmath47 .",
    "2 ) add  o \" arcs from @xmath46 to @xmath47 .",
    "3 ) define a new parent for node @xmath47 by adding ",
    "p - c \" arcs from parent of node @xmath46 to node @xmath47 .",
    "4 ) define new children for node @xmath46 by adding ",
    "p - c \" relation from node @xmath46 to the children of node @xmath47 .",
    "one of the challenges of the tgsa construction algorithm is when a new node should be added as a child of an overlapping node ( the last step in the above paragraph ) . in this step ,",
    "we need to be sure adding this relationship is legal and satisfies the last item of definition 2 .    to clarify ,",
    "let us consider two overlapping nodes @xmath48 and @xmath49 in figure [ tgsaex ] . when the algorithm reaches the end tag of node @xmath48 , children of node @xmath49 are  could be \" and  increased \" .",
    "here we should only add  increased \" as a child of node @xmath48 , since there is a path from @xmath48 to  could be \" through node @xmath50 .",
    "the straightforward solution to overcome this problem is to check all possible paths from node @xmath48 to all children of node @xmath49 and add ones that are not descendants of node @xmath48 .",
    "this solution is very costly and will increase time complexity of the algorithm drastically .",
    "we efficiently address this issue by introducing a new set for each node in the list of open nodes @xmath45 .",
    "this set keeps the descendants of each node that are assigned to the node due to overlapping relations .",
    "for each node in the list @xmath45 , we initialize this empty set , which is called @xmath23 in algorithm [ alg1 ] .",
    "function @xmath51 describes how we use this set to add new children to each overlapping node .",
    "given node @xmath42 and node @xmath41 as a child of node @xmath52 , the function first checks whether @xmath41 is member of @xmath53 or not .",
    "if not , a new arc will be added from node @xmath42 to @xmath41 .",
    "in addition , node @xmath41 will be added to the @xmath23 set of all nodes added before @xmath42 to the list @xmath45 .",
    "the following proof describes how this solution will guarantee that every node will be added to the tgsa graph according to its definition .",
    "given tgsa graph @xmath54 and a list of open elements @xmath55 , if node @xmath50 overlaps node @xmath42 and @xmath56 is a child of node @xmath42 , then there is an indirect path from each precedents of node @xmath50 in the list @xmath45 to node @xmath56 .    to prove that there exists indirect path between two nodes , we need to proves that two nodes have ancestor - descendant relationship ( and not parent - child relationship ) .",
    "node @xmath50 overlaps node @xmath42 implies that node @xmath48 is parent of node @xmath50 .",
    "therefore , node @xmath48 is ancestor of node @xmath56 .",
    "all other precedents of node @xmath50 in list @xmath45 are either ancestor / parent of node @xmath48 or overlaps node @xmath48 .",
    "assuming node @xmath57 as one of precedents of node @xmath48 :    1 .   if node @xmath57 is ancestor / parent of node @xmath48 , then node @xmath57 is ancestor of node @xmath56 .",
    "if node @xmath57 overlaps node @xmath50 , then children of node @xmath48 are assigned as children of node @xmath57 .",
    "since node @xmath48 is ancestor of node @xmath56 , then node @xmath57 is also ancestor of node @xmath56 .",
    "the tgsa construction algorithm is a very efficient way of processing and representing overlapping structures , which is also compatible to hierarchical structures .",
    "given @xmath42 as number of nodes in an annotated document , time complexity of this algorithm for hierarchical structures is @xmath58 .",
    "for non - hierarchical structures , we do not consider lookup costs of function _ addparentchildrelation _ , since the algorithms only needs to test that a node is not definitely in a set and this can be efficiently done by bloom filters @xcite .",
    "comparing the tgsa algorithm to the algorithm represented in @xcite , our algorithm has less time complexity than goddag construction algorithm .",
    "goddag algorithm needs to remove illegal arcs from goddag after the whole graph is build , which means the algorithm requires to find all possible paths in the graph , and remove redundant ones . since there are multiple paths between two nodes , this process has large affect on the performance of algorithm .",
    "indexing is an essential method for providing high - performance query processing for large data repositories . like tree - based data ,",
    "non - hierarchical data needs efficient methods of storage to summarize the structural view of a document . without indexing",
    ", one should traverse the data model forward and backward to find structural relationships .",
    "motivated by this , indexing method for non - hierarchical structures can be inspired by xml indexing methods .",
    "xml indexes include value and structural indexes , where the former is to index string literals and the later is to index structure of documents . in this paper , we extend xml pre - post indexing to non - hierarchical structures , as it provides more efficient support for finding relationships between nodes .",
    "pre - post indexing labels each node with two numbers , @xmath59 , which corresponds to the position of start and end tag of each element . by the help of @xmath59",
    ", we can easily find the ancestor - descendant and overlapping relationships relationships .",
    "however , this information is not enough to determine parent - child relationships .",
    "this relationship can be supported by only adding parent(s ) of each to the @xmath59 pair .",
    "figure [ tgsaindex ] illustrates an example of pre - post indexing for non - hierarchical structures .",
    "it should be stated that unlike xml , each entry in the structural index can have multiple parents , which is the intrinsic feature of tgsa . for hierarchical structures",
    ", this indexing method only contains one parent for each node .",
    "the following properties show how different relationships are supported by this indexing method .",
    "( overlapping relationship ) node @xmath60 precedes and overlaps node @xmath57 _ iff _ @xmath61 and @xmath62    ( ancestor - descendant relationship ) node @xmath60 is ancestor of node @xmath57 _ iff _ @xmath63 and @xmath64    ( parent - child relationship ) node @xmath60 is parent of node @xmath57 _ iff _",
    "interval indexing requires much less storage space than storing the whole tgsa data model .",
    "moreover , it provides very efficient support of different relationships by few numerical comparison . on the other hand ,",
    "the drawback of this indexing method is the difficulty in maintaining the index , since updating the data will result major changes in the @xmath66 and @xmath67 position of each node .",
    "while xml is the dominant format for storing structural information , studies show that there are a series of structural data that can not be presented and stored in hierarchical formats . in order to query these non - hierarchical structures ,",
    "the first need is an expressive and simple data model that can represent different structural relationships .    in this paper , we considered documents with continuous , ordered structural elements , and we formally introduced a novel data model called tgsa , which can handle overlapping and parent - child relationships .",
    "the main features of this data model are its compatibility with hierarchical data and handling overlapping elements .",
    "converting structural elements to the tgsa data model is the second step on handling overlapping structures . to this end",
    ", we introduced an efficient algorithm for constructing tgsa , which is validated with formal proofs .",
    "we also proposed an extension of xml pre - post indexing method to address high performance query analysis for large data repositories .",
    "this indexing method can represent parent - child , ancestor descendant and overlapping relationships between two nodes .",
    "the focus of this paper was on theoretical aspects of non - hierarchical structures .",
    "the on - going research is likely to focus on experimental aspects of these structures using real world data sets and to adapt hierarchical query processing methods to non - hierarchical structures .",
    "another directions of research we hope to pursue in near future is investigating on serializability between tgsa and annotated documents and supporting stand - off annotated documents in the tgsa construction algorithm ."
  ],
  "abstract_text": [
    "<S> overlap is a common phenomenon seen when structural components of a digital object are neither disjoint nor nested inside each other . </S>",
    "<S> overlapping components resist reduction to a structural hierarchy , and tree - based indexing and query processing techniques can not be used for them . </S>",
    "<S> our solution to this data modeling problem is tgsa ( tree - like graph for structural annotations ) , a novel extension of the xml data model for non - hierarchical structures . </S>",
    "<S> we introduce an algorithm for constructing tgsa from annotated documents ; the algorithm can efficiently process non - hierarchical structures and is associated with formal proofs , ensuring that transformation of the document to the data model is valid . to enable high performance query analysis in large data repositories , we further introduce an extension of xml pre - post indexing for non - hierarchical structures , which can process both reachability and overlapping relationships .    </S>",
    "<S> = 1 </S>"
  ]
}