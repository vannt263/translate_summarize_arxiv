{
  "article_text": [
    "modern application development is extremely complicated . today",
    "s developers , as members of large teams , are building desktop applications with millions of lines of code .",
    "large - scale applications must be built by judicious use of existing code and ideas : code and design reuse , compositional architectures , patterns , and other similar models are the modern tools of our trade .      but how do most developers do development and testing ? while the majority of developers use advanced integrated modeling and development environments , they also use a smattering of low - tech print statements for system monitoring and debugging .    what is wrong with this scenario ?    1",
    "it is an undisciplined development methodology : there is little or no relationship between application requirements and monitoring , debugging , and test code .",
    "2 .   there is no relationship between a component s specification and the component test code .",
    "test code is manually embedded in the code that is sometimes shipped , leaving a host of deployment issues to deal with at delivery - time .",
    "output is unstructured and often unparseable .",
    "finally , there is no easy way to redirect or log test output to any destination other than a pipe or a file .",
    "while `` archaic '' languages like c and fortran have an assertion mechanism , surprisingly , some modern popular languages are designed without regard for system debugging and some do not support even simplistic debugging constructs like assertions .",
    "for example , the java programming language provides very few built - in constructs for debugging classes , components , and systems .",
    "typically , a java programmer relies upon language features and development tools for debugging .",
    "java provides array bounds checking , static type checking , variable initialization testing , and exceptions to assist in code debugging . while programming environments provide sophisticated source - code debuggers , most developers seem fixated on using primitive ` println ` s to debug their code .",
    "java is missing several traditional core debugging constructs as well , the most critical of which is _ _",
    "assertions__. typically , if an assertion is violated , a program is aborted . in modern object - oriented systems",
    "we often need to have options other than halting the program execution ( e.g , throwing an exception ) .",
    "idebug has been designed to `` fill the holes in java '' .",
    "it is a monitoring framework composed of a set of components that provide fundamental monitoring and debugging constructs like assertions , error messages , logging , and more .",
    "applications and/or components using idebug have a unified , manageable , flexible and extensible interface for monitoring and debugging .    the point of this paper is not to describe idebug in full detail . instead",
    ", our primary focus is to discuss what we believe are the fundamental aspects of such a monitoring and debugging subsystem , particular for concurrent or distributed systems .",
    "we hope to convince the reader that the complex applications and components being developed today _ necessitate _ a new view on monitoring , debugging , and testing frameworks .",
    "in particular , with the range of application domains assaulting the average developer ( everything from embedded to distributed systems ) , a comprehensive and flexible monitoring , debugging , and testing subsystem is _",
    "programming technologies have evolved rapidly over the years .",
    "new programming models have emerged , new languages have gained popularity , new tools have been adopted , and yet , several core monitoring and debugging constructs have changed very little .",
    "the primary constructs for monitoring and debugging are the _ call stack _ , the _ logging message _ , and the _ assertion_. a _ call stack _ is the sequence of nested function or method calls of a specific execution context .",
    "the _ logging message _ is a structured message that logs special events ( errors , warnings , etc . ) .",
    "they are usually time - stamped , have priority levels , and are organized according to some taxonomy .",
    "finally , an _ assertion _ is a boolean predicate that , if false , indicates an error in program code .",
    "since idebug is an object - oriented monitoring and debugging framework , a review of object - oriented debugging and frameworks is in order .",
    "debugging object - oriented programs is not the same as debugging procedural or functional programs .",
    "because most object models enforce modularity and encapsulation , one must test the implementation _ and _ the interface of a class or module .    a specification of an interface is called a _ contract",
    "_  @xcite .",
    "a class s contract specifies the externally visible behavior that a class guarantees .",
    "contracts are typically specified via three constructs : _ pre - conditions _ , _ post - conditions _ , and _ invariants_. using these three constructs , many of the safety properties of a class can be specified .",
    "a _ framework _ is a collection of programming constructs ( e.g. , classes , components , interfaces , etc . ) that provides a unified model and interface to a specific set of functionality .",
    "frameworks are integrated into a system via inheritance and client relationships .    a framework in java is typically implemented as a collection of classes organized into one or more _",
    "packages_. idebug is just such a framework since it is implemented as a set of javabeans and other classes collected into the package ` idebug ` .",
    "these classes are used either ( _ a _ ) as `` normal '' classes with standard manual debugging techniques , or ( _ b _ ) as components within visual javabean programming tools .",
    "the core set of monitoring and debugging constructs : the assertion , call stack , and logging message , are provided by simple language constructs .",
    "assertions are simply provided via method calls .",
    "when an assertion fails , one of the following takes place : a specific exception is thrown , the current thread is stopped , the current context is halted ( e.g. , an applet or servlet is stopped ) , or the system is halted .    call stack introspection is provided as part of the java language specification . the call stack is used in several ways by the functionality introduced in the next few sections .",
    "logging messages are simple formatted text strings that are sent to one of several _",
    "output channels_. an output channel is simply any data channel through which we can send logging messages .",
    "examples include the java console , a ` stringbuffer ` , a file , etc .",
    "this basic set of constructs is only the beginning of the story .",
    "they are generally only sufficient for simple , sequential , non - distributed systems .",
    "we augment this set by several new constructs specifically for concurrent and distributed systems based upon requirements imposed by development ( how software is written ) and system ( how software is executed ) contexts .",
    "the development of complex systems often involves dozens to hundreds of developers located at several sites .",
    "this situation necessitates a decomposition of responsibilities in the development process .",
    "collaboration between teams and individuals working on different parts of the system is often ad hoc and opportunistic .",
    "thus , a system - wide , regimented , fixed monitoring , debugging , and testing process is out of the question .    as a result ,",
    "development groups define their own terminology and priority structure specific to their problem domain .",
    "the definition of such structure is accomplished with _ levels _ and _ categories _ in _",
    "priority structures are realized by _ levels _ that let a developer assign a priority to actions .",
    "levels organize debug information into a totally ordered set .",
    "the default levels range from 1 to 9 with well - defined increments : notice ( 1 ) , warning ( 3 ) , error ( 5 ) , critical ( 7 ) , and failure ( 9 ) .",
    "localized error messages are associated with these standardized levels for regular logging output .",
    "the range of levels , like all other customization , is refined on a per - context basis ( see below ) .",
    "for example , for a more complex system with subtle failure modes , perhaps a range of 1 to 100 is more appropriate .",
    "terminology is realized by an ontology of _ categories _ , strings like ` network ` and ` garbage_collector ` that denote the subsystem correlated with a specific debugging action .",
    "each category has a level associated with it as well for filtering purposes .    at runtime ,",
    "both categories and levels are used to prune information according to the demands of the current execution .",
    "this mechanism is discussed in detail in the next section since it interplays with the concurrency constructs .",
    "additionally , subgroups of large development teams often have independent process and practices .",
    "but , especially during integration testing and system maintenance , they often need to understand , share , and utilize a codification of these practices . to satisfy this need",
    "we introduce the first - class notion of a _",
    "context_.    a _ context _ is an object that captures the full monitoring , debugging , and testing context of a subsystem .",
    "independent ontologies ( set of categories ) , level sets , filtering ( see the next section ) , and more are bound to a context . this context is saved and restored as needed and is exchanged among teams like any other development artifact .",
    "finally , a major challenge after constructing a complex system is understanding what it is actually doing as it runs .",
    "this understanding goes a long way toward helping with system evolution , maintenance , and optimization .",
    "we introduce a _ statistic _ construct to assist with exactly this problem .",
    "each statistic has a unique identifier and a description .",
    "it also has a unit ( e.g. , meters , frames per second , etc . ) , a scaling factor , initial values , and default increment and decrement values",
    ". we can also arbitrarily manipulate ( reset , set , increment and decrement ) a statistic . finally , each statistic has report generation facilities specific to its domain .    for example",
    ", suppose we needed to gather statistics on a message passing system .",
    "we define a statistic called ` msgpersecond ` whose units are ` messages per second ` , scale is ` 1000 ` , default value is 0 , and default increment and decrement are both 0.001 .",
    "this means that this statistic is initialized to zero and each time the statistic is incremented it gains 0.001 * 1000 = 1 message per second .",
    "the information on units is used when generating statistics reports .",
    "monitoring and debugging concurrent systems necessitates the introduction of new concepts specific to concurrent environments .",
    "concurrent systems have multiple threads of control .",
    "typically , each thread of control accomplishes some specific task : it transfers data , refreshes a gui , etc .",
    "thus , each thread is potentially the jurisdiction of a different development team .",
    "also , concurrent systems often have a hierarchical arrangement for threads of control .",
    "java s _ thread groups _ are one example .",
    "threads are collected into named groups for security , management , and control purposes .",
    "therefore , we `` tune '' functionality on both a per - execution thread and a per - thread group basis . each thread and each thread group has a context .",
    "these contexts are exactly the same as the contexts discussed earlier except they are bound to a single thread of execution or a thread group of such threads .",
    "contexts can be manipulated in a concurrency - safe fashion at runtime to dynamically change the monitoring behavior of an application .",
    "the primary manipulations of such contexts are changes in their filter specifications .",
    "contexts can be tuned in several ways .",
    "monitoring is tuneable on a :    1 .",
    "global basis by turning monitoring on or off as a whole , independent of any other settings .",
    "2 .   per - class basis .",
    "individual classes can be identified as being important or unimportant to monitoring .",
    "threshold basis using monitoring levels .",
    "a _ current monitoring level _ can be set , after which time all monitoring code that is annotated with at least this level is evaluated .",
    "4 .   per - category basis .",
    "specific categories can be identified as being important or unimportant to monitoring .",
    "for all of the above functionality , the monitoring system uses the call stack to support runtime - configurable filters for logging messages based upon the current execution context of a thread .         consider figure  [ fig : tuning_idebug ] . if a thread @xmath0 specifies that it is interested in a class @xmath1 but not a second class @xmath2 ,",
    "then monitoring statements in @xmath1 will be executed when @xmath0 is inside of @xmath1 , but monitoring statements in @xmath2 will be ignored .",
    "these contexts are saved to persistent storage , thus `` named '' special - purpose contexts are created for reuse across a development team to help support and enforce a monitoring process .",
    "additionally , these _ concurrent contexts _ can be shared across threads and thread groups . a shared context that is tuned",
    "immediately impacts all execution constructs to which it is bound .",
    "the framework supports several extensions for monitoring distributed systems .",
    "one problem typical of monitoring distributed systems is a loss of execution context when communication between two non - local entities takes place .",
    "consider the top - half of figure  [ fig : call_stack_currying ] .",
    "when object @xmath3 invokes a method @xmath4 on object @xmath5 , the thread within @xmath4 does not have access to the call stack from the calling thread in @xmath3 .",
    "the idebug package supports what we call _ call stack currying _ to solve this problem .",
    "information such as source object identity , calling thread call stack , and more is available to the monitoring framework on both sides of a communication .",
    "such information is curried across arbitrary communication media ( sockets , rmi , etc . ) , as seen in the bottom - half of the figure .",
    "the idebug package also supports the monitoring of mobile agent systems .",
    "mobile agent architectures often support disconnected computing .",
    "for example , in figure  [ fig : mobile_monitoring ] , ( 1 ) an object @xmath6 migrates from machine @xmath3 to machine @xmath5 . for some time ( 2 ) , @xmath6 can log debug information back to host @xmath3 , but then ( 3 ) @xmath5 might become disconnected from the network . since @xmath5 can no longer communicate with @xmath3 , and printing monitoring information on @xmath5 s display is not useful , or perhaps even possible , @xmath5 must log monitoring information for later inspection ( 4 ) .    to support this functionality",
    ", the idebug package provides serializable debug logs .",
    "these logs are carried around by a mobile object and inspected later , perhaps when the object migrates back to its original host .",
    "the impact of a monitoring framework like idebug to systems design and development is extensive .    * _ analysis . _",
    "the assumption of the availability of a flexible and comprehensive monitoring framework results in a conscientious domain analysis from a monitoring , debugging , and testing perspective .",
    "+ normally , this type of analysis either ( _ a _ ) never happens or ( _ b _ ) is rolled in late to system design or development .",
    "an example of such analysis is highlighted in section  [ sec : application_requirements ] .",
    "* _ design .",
    "_ design schedules are shorter than otherwise because the monitoring subsystem does not have to be designed by scratch as an afterthought , as is typical in many design efforts .",
    "likewise , a new focus is found with respect to design integration of monitoring , debugging , testing , deployment , and management .",
    "standardized methodologies and semantics for monitoring are considered early in system design . *",
    "_ process .",
    "_ with the availability of such a monitoring framework , especially when coupled with complementary tools like jpp  @xcite and the cdl parser  @xcite , the development process becomes much more focused on specification and rigorous testing .",
    "likewise , component and system documentation is more organized , uniform , and complete . *",
    "_ testing . _ in our experience , components and systems built with such a framework are _ much _ more robust .",
    "more thought has been put into monitoring , debugging , and testing because of the process imposed by the use of such tools . * _ deployment . _ since monitoring functionality is tuneable at runtime , some debug code can be shipped with product at no loss in performance , though at the cost of slightly larger executable size .",
    "system monitoring , debugging , and testing in the field is straightforward , empowering end - users contributions to the process , and potentially lowering support costs .",
    "in this section we will briefly present our project analysis , including our project concept dictionary , a review of our requirements for the monitoring package , and our goals .      at the beginning of the project analysis phase ,",
    "a dictionary of concepts was developed so that all designers , developers , and users would have a clear and common language .",
    "the dictionary of terms is available in the full , high - level ebon specification of the system included with the package and available http://www.kindsoftware.com/products/opensource/idebug/docs/bon/[online ] .",
    "we require that the idebug framework support the following requirements .",
    "the framework must :    1 .   _",
    "provide an assertion mechanism .",
    "_ assertions are the core construct of any debugging system .",
    "assertions are inserted in program code either manually or automatically , and , if an assertion is violated , an error message is logged and/or a runtime exception is thrown and the program ( potentially ) halts .",
    "2 .   _ support the output of logging messages .",
    "_ printing miscellaneous monitoring messages , perhaps outside the context of the primary interface of a component , is essential in a good monitoring suite .",
    "3 .   _ support multiple monitoring levels .",
    "_ different types of errors , messages , and situations require different levels of response .",
    "an adequate monitoring framework should not only support levels , but the set should be ordered so that user- or developer - tuneable filtering of debug output can take place .",
    "4 .   _ complement the standard java exception mechanism .",
    "_ since this is a monitoring framework built for the java language , it should work with , not against , the built - in exception mechanisms . in particular , prudent use of exception types ( ` exception ` verses ` error ` ) is necessary so that the framework is not overly intrusive to the developer .",
    "_ work with all development environments .",
    "_ idebug must work with everything from the most flashy ide to the lowly cli runtime .",
    "this means that idebug must be implemented as `` 100% pure java '' ; no proprietary extensions or native code may be used .",
    "because our group builds a wide range of java applications and components , we needed idebug to support monitoring with all types of java programs .",
    "this means that the framework must provide debug functionality that complements the following application types .",
    "each type of application listed below is followed by a ( non - unique ) implication of that particular application assumption . in other words , each different domain implies the necessity of new piece of functionality .    1 .   _ console - based applications .",
    "_ sometimes we want to send logging messages to an output stream different from our system s stdout or stderr streams . 2 .   _ graphical user interface applications . _",
    "occasionally , we want to send logging messages to independent windows or message sub - frames within a larger application .",
    "3 .   _ console - less applications . _",
    "if there is no output channel , logging messages for later analysis is a reasonable course of action .",
    "_ independent components such as beans , servlets , doclets , etc .",
    "_ independent components should be able to maintain independent semantics and contexts .",
    "conversely , sometimes it is useful to have a compositional application share a debug context among its components .",
    "mobile agent / object applications .",
    "_ if an application has mobile sub - components , their debug contexts need to be mobile as well .",
    "additionally , logging message output and/or storage should be location - independent and location - aware . 6 .   _ distributed applications .",
    "_ distributed applications imply ( at least ) distributed control , distributed context , and distributed logging .",
    "finally , we wish to support a set of ( what we consider ) `` innovative '' capabilities . while most of these goals are independent of the target language , they are facilitated by many of java s more advanced features .",
    "the list of innovative requirements includes support for :    1 .",
    "_ categorized monitoring . _ monitoring messages , errors , warnings , etc .",
    "should not only have a value ( the debug level ) , but should have a category ( a classification or taxonomy ) .",
    "2 .   _ per - class",
    "_ a developer should be able to selectively turn monitoring on or off at a per - class level .",
    "3 .   _ a configurable runtime . _ we should not force developers to adopt our monitoring semantics .",
    "new semantics ( ranges , base categories , etc . )",
    "should be configurable at design- and run - time .",
    "_ multiple output interfaces . _",
    "all logging messages need not be sent to the same output channel .",
    "consider messages generated by unix s _ syslog _ facility .",
    "some messages are sent to the console , some are logged in a file , and some are sent directly to the system administrator via email .",
    "_ concurrent monitoring .",
    "_ each thread and thread group within a runtime should be able to construct its own context .",
    "more precisely , most of the above configurable options ( categories , classes , semantics , output interface , and level ) should be configurable on a per - thread and per - thread group basis .",
    "additionally , these options should be configurable at runtime .",
    "_ persistent contexts .",
    "_ once a context is created , it should be possible to save it to storage for later access . this way , contexts can not only be shared across sets of components , but they can be shared across groups of developers .",
    "7 .   _ statistics gathering . _",
    "gathering information about key system aspects over a long time - frame helps us understand critical bottlenecks and hot - spots in our systems .",
    "this information can also help the system _ self - tune _ , changing resource utilization or operating practices at run - time depending upon the current situation .",
    "now that we have a common vocabulary and understand the problem domain and the design goals , we will consider idebug s design .",
    "due to space restrictions , we will only briefly cover the design of idebug in this section",
    ". we will describe idebug s organization , its primary subsystems , and give an example of its use .",
    "readers interested in more information should see the idebug home page , available via http://www.kindsoftware.com/products/opensource/idebug/[kindsoftware ] .",
    "several group members helped with idebug s initial analysis and design in a whiteboard - brainstorming session .",
    "design refactoring first was done `` by - hand '' , then was moved to the java design tool http://www.togetherj.com/[together/j ] .",
    "idebug s primary interfaces are called ` debugoutput ` and ` debugconstants ` .    debugoutput . : :    this is the interface to output methods that are used to send logging    messages to various output channels .",
    "features include methods like    ` printmsg ` , ` print ` , and ` println ` . debugconstants .",
    ": :    this is the interface that collects the semantics of the package    including monitoring level ranges , standard logging messages , etc .",
    "it    can be extended to change these values for specific monitoring    sub - packages , applications , etc .",
    "an example of such a subtype is    included as ` idebug.examples.frenchconstants ` .",
    "a set of default    categories are specified in the specification of this interface , as    discussed in section  [ sec : levels ] .",
    "the primary classes of note are ` debug ` , ` assert ` , and ` context ` .",
    ": :    debug is the core class of idebug s monitoring facilities .",
    "the debug    class is used to configure monitoring for a component .",
    "debug has    methods for configuring the following options :    +    * global , per - thread , and per - thread group monitoring activation    ( i.e. , whether _ any _ debugging predicates are checked or monitoring    commands are executed ) ,    * global debug output interface , debug semantics , and debug levels ,    * categories and class - level tuning at the global , per - thread , and    per - thread group level ,    * configure contexts ( see ` context ` below ) on a per - thread and    per - thread group basis .",
    ": :    the class used to make assertions . a reference to an ` assert ` object    is obtained by calling the ` getassert ` method of the ` debug ` class .",
    "assertions are made in program code by calling the ` assert.assert `    method which has several polymorphic forms .",
    "the class also provides a    static interface to making assertions . context . : :    this class is the data structure that contains the information    relevant to monitoring on a per - thread and a per - thread group basis .",
    "output interface , semantics , categories , class - level tuning , and    current level are all configured with this class .",
    "example extension classes and blackbox test code are provided with idebug ; they are collected in the ` idebug.examples ` package . in particular , the ` frenchconstants ` interface implements the ` debugconstants ` interface and is an example set of alternative debug semantics where error messages are in french and debug ranges are integers ranging from 1 to 100 .",
    "the ` debugtests ` class is the main class for all test code ; ` testsuitethread ` contains the actual blackbox test code .",
    "the full behavioral specification of idebug is included with the package as ( a ) a set of uml state , collaboration , and sequence diagrams , and ( b ) a full extended bon ( ebon ) specification  @xcite .",
    "we will not provide these diagrams here due to space restrictions .",
    "instead , we will summarize how one interacts with the idebug framework from a developer s point of view .",
    "readers should refer to appendix  [ app : example_code ] for example code using idebug .",
    "line numbers referenced below refer to the lines labeled in this example code .",
    "these code examples are from http://www.jiki.org/[jiki ] , an open source collaborative web architecture based on distributed components , thus the feature naming conventions .",
    "note that almost all comments have been removed from the example code and it has been edited for relevant content .      `",
    "idebug.debug ` is the core class of the idebug monitoring facilities .",
    "the ` debug ` class is used as the central facility for configuring monitoring for a component or application ( lines 3 , 12 , 13 , 15 ) .",
    "all logging commands , on the other hand , are handled in the ` debugoutput ` classes ( lines 5 , 14 , 15 , 25 - 26 ) . finally , all assertions are handled in the ` assertion ` class ( lines 4 , 13 , 23 - 24 ) .",
    "[ [ core - configuration - and - global - options . ] ] core configuration and global options .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the ` debug ` class is non - static below for a discussion of this design choice . ] .",
    "the first step a component or application must take is the construction a new instance of a ` debug ` object ( line 12 ) . if an alternate implementation of monitoring semantics ( i.e. , categories , levels , error messages , etc . )",
    "is needed , the implementation is passed a ` debugconstants ` interface via a constructor of ` debug ` ( lines 11 - 12 ) .    [ [ per - thread - and - per - thread - group - contexts . ] ] per - thread and per - thread group contexts .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    each thread needs to construct a debugging context to detail its specific debugging needs . after creating a valid debugging context , encapsulated in the ` context ` object ,",
    "this object is passed to the instance of ` debug ` via the ` addcontext ` method so that the debugging runtime system has a record of the thread s context .",
    "note that the debug runtime keeps a reference to the passed ` context ` object , it does not make a copy of it .",
    "thus , you can modify the ` context ` ( change debugging levels , add new thread - specific categories , etc . ) after the context is installed and changes will be noted immediately by the debug runtime .    [ [ debug - output - configuration . ] ] debug output configuration .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + +    finally , the output medium of the debugging runtime has to configured .",
    "this is accomplished by constructing an implementation of the ` debugoutput ` interface , e.g. , ` consoleoutput ` .",
    "this object is then passed to the ` debug ` object via the ` debug.setoutputinterface ` method ( lines 14 - 15 ) .",
    "[ [ usage . ] ] usage .",
    "+ + + + + +    the idebug framework is now fully configured .",
    "a call to ` debug.getassert ` at any time returns a reference to the debug run - time s ` assert ` object ( line 13 ) .",
    "if a non - default implementation of ` debugconstants ` interface is not installed , a call to ` debug.getdebugconstants ` returns a reference to these debug constants .",
    "our code sample installed its own version of this interface , thus this call is unnecessary .",
    "finally , one calls the various methods of ` assert ` and ` debugoutput ` . the ` assert ` method of the `",
    "assert ` object is used to make code assertions ( lines 23 - 24 ; note the mapping between the specification of the ` doget ` method in lines 19 - 20 and the corresponding assertion ) . the ` print ` , ` println ` , and ` printmsg ` methods of the ` debugoutput ` instance are used to output logging messages ( lines 25 - 26 ) .",
    "additionally , methods like ` utilities.dumpstack ` can be used to perform full stack dumps .",
    "several non - trivial decisions were made during the design and implementation of idebug .",
    "some of these decisions are summarized below .",
    "the original implementation of idebug had a ` debug ` class that was completely static .",
    "meaning , all methods of ` debug ` were declared ` static ` so that it behaved more like the interface to a library than an object in a framework . since an instance of ` debug ` did nt have to be constructed",
    ", a reference to the object did not need to be handed around to various subsystems of the larger system being monitored .",
    "we found that there were several drawbacks to this approach .",
    "first , changes to the interface of ` debug ` necessitated a potentially large set of changes to program code .",
    "second , most systems have a shared debugging context across subcomponents , so even though a reference to an instance of ` debug ` did nt have to be shared across components , an instance of ` context ` often did .",
    "this restriction destroyed the whole reason for making ` debug ` static in the first place .    since moving to a non - static design , we have come across a few restricted situations where a static interface would be useful .",
    "thus , the next release of idebug will likely support both methodologies .",
    "the ` context ` class is the only class in the idebug package that implements the ` serializable ` interface .",
    "we decided that centralizing idebug s configurability in a single class would facilitate configuration reuse .",
    "these contexts can be saved to storage and reused across application executions , project teams , or different component design and development efforts to standardize the design and execution of the testing process .      as mentioned previously , changes to the state of an installed ` context",
    "` object has instant effect on the debug runtime .",
    "thus , we provide a ` clone ` method so that multiple identical base contexts can be used across a set of threads or thread - groups for independent configurability .",
    "note that if a single context is installed for many threads , changes to its state instantly affect all related thread s debug contexts .      to simplify framework extension we designed two orthogonal interfaces for extensibility : ` debugoutput ` and ` debugconstants ` .",
    "if a new output interface for logging messages and assertions is needed , a developer simply implements ` debugoutput ` .",
    "see section  [ sec : future_work ] for ideas about such extensions .",
    "new semantics can be configured by implementing the ` debugconstants ` interface .",
    "see the next section for details on how semantics are refined .",
    "a decision was made to make all class - specific debugging configuration additive _ and _ reductive .",
    "one can either remove all classes from the debugging table then add classes one by one , or one can add all potential classes then remove them one by one .",
    "meaning , when one adds `` * '' ( a wildcard indicating that _ all classes _ should be added to the debug context ) , one is _ not _ adding all classes _ currently defined in this vm _ ; one is adding _ all classes currently defined and all classes that might ever be defined _ in this vm .",
    "see section  [ sec : future_work ] for a discussion of future work along these lines .      as mentioned previously",
    ", debugging options should be configurable on a per - thread or per - thread group basis .",
    "on further consideration , we decided that two configurable settings should _ not _ be switchable at runtime : debug semantics and output interface .",
    "the reason for this decision might not be immediately obvious , but consider the following two points :    * debugging output might be queued due to the temporary unavailability of an output channel or user , and * source code that uses a debugging package makes explicit assumptions about the semantics of the package .",
    "meaning , while debugging semantics might be switchable at runtime by the _ framework _ , it is not ( usually ) switchable at runtime for the application _ using _ the framework .    due to these factors ,",
    "the configuration of debugging semantics and output interface is immutable .",
    "meaning , once these options are set for a debugging context , they can not be changed .",
    "note that a new context can be _ created _ and installed . all the other flexibility mentioned in section  [ sec : innovative_requirements ]",
    "is fully configurable at runtime on a per - thread and per - thread group basis .",
    "the idebug framework is extensible in two dimensions : _ debug semantics _ and _",
    "output interfaces_.      the semantics of the package can be changed by implementing new versions of ` debugconstants ` .",
    "an example of such an extension is provided in the form of the ` frenchconstants ` class in the ` idebug.examples ` package .",
    "this class provides an implementation of ` debugconstants ` that differs from the default implementation ( ` defaultdebugconstants ` ) in two ways :    1 .",
    "debug levels range from 1 to 100 instead of 1 to 10 , 2 .",
    "default debugging levels have been adjusted for this new granularity of debug levels , and 3 .",
    "default logging messages , categories , and documentation are provided in french .",
    "new implementations of ` debugoutput ` can be designed to support sending logging messages to alternative output media / channels .",
    "the framework comes with several implementations : ` consoleoutput ` , which sends messages to the console of a java runtime ; ` writeroutput ` , which sends messages to a ` writer ` which can be used as part of a normal ` java.io ` compositional data stream ; ` windowoutput ` , which sends messages to a swing window ; and ` servletlogoutput ` which sends messages to a servlet logging interface .",
    "now , we ll briefly discuss the implementation of the idebug framework .",
    "as mentioned previously , idebug is implemented as a collection of java classes organized into two packages .",
    "idebug is shipped as either a jar or zip file with full documentation , formal specification ( uml and ebon ) , user s guide , and more .",
    "+ * total number of packages * & 3 + * total number of classes * & 20 + * total number of kb of java * & 187.7 kb + ( includes code , documentation , & + and whitespace ) & + * total number of kb of classfiles * & + independent class files & 58 kb + jar ( compressed ) format & 32.1 kb + * total number of lines of code * & 3808 + * total number of lines of comments * & 2639 + * comments / code * & 69% +    the implementation size of idebug is summarized in table  [ tab : impl_summary ] .",
    "it is clear that , since the whole of idebug is around 32 kb of bytecode , it will not adversely impact the deployment size of all but the smallest applications or components .",
    "the relatively large comment / code ratio is due to two reasons .",
    "first , we use _ semantic properties _ for program specification  @xcite .",
    "thus , this system witnesses a full formal specification using both code - external documents , written in the ebon specification language , as well as in - code , using semantic properties in javadoc - style comments .",
    "the other reason for the large numbers of comments is that we used jass for contract specification and run - time testing  @xcite .",
    "we actually provide two versions of idebug ; one for rigorous testing and one for shipped code .",
    "the first version is the standard package that is ready for delivery .",
    "it has all assertions turned off , no contracts enabled , etc .",
    "this is the version that we reported on above with respect to code size .",
    "this version is assembled in the ` idebug ` package .",
    "the second , called _ idebug high - confidence _",
    ", is a version of the framework where we have used jass to generate generate test code for all contracts .",
    "this means that the resulting source code , collected in the ` idebughc ` package , as well as the compiled class files , are significantly larger that the non - augmented version .",
    "in fact , it is nearly twice the size of the ` idebug ` package and is significantly slower because of the high overhead of all of jass s run - time assertion analysis .",
    "performance characteristics of the idebug framework are entirely based upon the speed of the java run - time s `",
    "throwable.printstacktrace ` method and ` hashtable ` and ` stringbuffer ` implementations , since these classes are at the core of the exception and assertion - handling mechanisms in idebug .",
    "the ` throwable.printstacktrace ` method is important to performance because , each time a message or assertion guard is triggered , the idebug runtime has to determine if it should , in fact , execute the corresponding output code .",
    "it has to determine which class is currently in scope , which thread is currently running , etc .",
    "all of this information is gleaned by parsing the results of a ` printstacktrace ` method call .",
    "admittedly , a profile analysis of idebug could reveal performance weaknesses .",
    "in general , any performance tuning would mean replacing data structures rather than changing core algorithms , since the algorithms are highly optimized in the current version .    in general , we believe that performance is not a high - priority issue in debugging complex systems , especially distributed or object - oriented ones .",
    "we make this claim for two reasons :    1 .",
    "the debugging phase of an implementation should be part of an ordered and reasoned test suite , and thus the use of the debugging framework should also be logical and methodical .",
    "in other words , rarely will it be the case that all threads within a complex application will have all their debugging options turned on simultaneously .",
    "we believe that debugging statements should not be written by hand or statically inserted into program code .",
    "debug code should be `` tuneable '' at compile time , not just runtime for more information .",
    "] , and thus debug framework performance should only matter for critical debug paths , of which there should be few .",
    "static debugging statements can clutter source code , increase object code size , and reduce execution speed .",
    "we have developed a application called jpp , the java parsing pre - processor , that helps avoid this problem by automatically transforming semantic property - based specifications into test code  @xcite . in short",
    ", jpp performs transformations of embedded program specification , in the form of _ design by contract_-like  @xcite predicates in documentation comments , into idebug test code at compile time .",
    "we are also looking into extended other similar open source tools so that they can optionally use an idebug - based interface .",
    "such tools include icontract , jass , and the jml tools  @xcite .",
    "of course , our own ebon tool suite will also support such functionality .",
    "while several feature - full commercial java development environments are on the market , none that we have reviewed come with an integrated debugging framework like idebug .",
    "several have single classes that provide some kind of logging interface , but the configurability and extensibility of idebug are absent .    * jakarta s http://jakarta.apache.org/log4j/[log4j ] package is the most popular similar framework for system logging .",
    "it supports notions of categories and logging messages to a small number of output channels , but provides no support for concurrent or distributed systems . *",
    "jdk 1.4 comes with a logging interface , as specified in http://jcp.org/aboutjava/communityprocess/review/jsr047/[jsr 47 ] .",
    "it too is quite immature when compared to idebug , with support similar to that of log4j , with handlers used for output interfaces , runtime configuration , and functional areas for categories .",
    "it , too , has no support for concurrent or distributed systems monitoring .",
    "* several articles in industry magazines such as java developer s journal and java report have discussed java debugging frameworks .",
    "all support assertions and integrate into the java exception model , but none support even the most basic features of idebug .",
    "* microsoft s visual j++ comes with a ` com.ms.cfc.util.debug ` class that provides a simple interface to message logging and assertions .",
    "the supplied implementation is not extensible , does not support concurrency nor any of the other advanced features of idebug , but does support conditional compilation and a system to switch messages on and off at runtime .",
    "debugging output simply goes to the console or to a dialog box .",
    "idebug is one of the most advanced debugging frameworks available today for java .",
    "it is extremely configurable , supports a wide range of application types , and , because it is an open system , is extensible by the developer .",
    "this work was originally accomplished in 1997 , prior to any other logging system being available .",
    "we have since used it in several major complex systems , both in academia and industry . in a non - concurrent or distributed context , it is equivalent to the popular log4j and the new ` java.util.logging ` package in jdk 1.4 .",
    "but because neither supports complex concurrent or distributed systems , we hope that their developers , or developers of non - java complex systems , will learn from our experience and incorporate some of the ideas from this system into their future work .",
    "we encourage developers to extend idebug .",
    "in particular , we are interested in alternative implementations of the ` debugoutput ` and ` debugconstants ` interfaces .",
    "below , we list a series of possibilities for output interfaces .    * ` debugoutputdb `  used to log messages to a database via jdbc . * ` debugoutputeventsource `  send messages to arbitrary listeners within a java virtual machine , perhaps as part of a compositional javabeans - based application . * ` debugoutputframe `  to send messages to an arbitrary ( swing / awt ) frame within a larger gui . * ` debugoutputlog `  to persistently log messages for off - line debugging . * ` debugoutputmessager `  send messages via a jms - conformant messaging infrastructure . * ` debugoutputremoteeventsource `  to provide messages as distributed events , perhaps as part of a jini  @xcite application .",
    "* ` debugoutputspace `  store debugging events in a javaspace  @xcite",
    ".      we also plan on extending the logging subsystem to provide the developer with the ability to customize the format of log messages .",
    "in particular , we think that the addition of a time - stamp and thread identification would be particularly useful .",
    "this extension will be added via ` debugcontext ` , thus will be configurable at all levels .",
    "adding support for the use of arbitrary regular expressions to denote per - class and per - package monitoring is also of interest .",
    "in general , we have found the current design adequate , but can see the potential scalability problems for extremely large - scale applications .",
    "we believe that a debugging gui that supports both design - time and runtime customization of ` debugcontext ` would be useful .",
    "this functionality would likely be accomplished via a new ` beaninfo ` subsystem .",
    "such a gui would integrate nicely with existing graphical ides , could be used for tutorials , and would be beneficial to non - expert developers .",
    "finally , we are investigating integrating idebug with the bernet distributed messaging infrastructure  @xcite .",
    "our primary goal is to support the currying of call stacks across execution contexts .",
    "this would mean that assertions and exceptions on remote ( receiver ) machines would have access to the call stack of the sending thread .",
    "currying across other networking layers , especially rmi , is also of interest to us .",
    "the author would like to thank the infospheres group for help with the initial problem analysis and early idebug design .",
    "in particular , the comments of mani chandy , dan zimmerman , wesley tanaka , and adam rifkin were invaluable .",
    "also , nelson minar used the first version of idebug as part of his thesis work ; his comments were very helpful .",
    "matt hanna helped review a previous version of this paper .",
    "10    graham hamilton , michael  l. powell , and james  g. mitchell .",
    "subcontract : a flexible base for distributed programming . in _ proceeings of the 14th symposium on operating systems principles_. sun microsystems , inc . , december 1993 .",
    "richard helm , ian  m. holland , and dipayan gangopadhyay .",
    "contracts : specifying behavioral compositions in object - oriented systems . in _",
    "european conference on object - oriented programming / acm conference on object - oriented programming systems , languages , and applications _ ,",
    "volume 25/10 of _ acm sigplan notices _ , pages 169180 .",
    "acm sigplan : programming languages , acm press and addison - wesley publishing company , october 1990 .    ian  m. holland . specifying reusable components using contracts . in",
    "acm conference on object - oriented programming systems , languages , and applications _ , pages 287308 .",
    "acm sigplan : programming languages , acm press and addison - wesley publishing company , 1992 .",
    "the jass homepage , 2001 .",
    "available via http://semantik.informatik.uni-oldenburg.de/~jass/[http://semantik.informatik.uni-oldenburg.de/@xmath7jass/ ] .",
    "joseph  r. kiniry . : a component description language . in _ proceedings of the coots 99 advanced topics workshop on validating the composition / execution of component - based systems _ , 1999 .",
    "joseph  r. kiniry .",
    "the extended bon tool suite .",
    "http://ebon.sourceforge.net/ , 2001 .",
    "joseph  r. kiniry .",
    "semantic properties for lightweight specification in knowledgeable development environments .",
    "submitted for publication , 2002 .",
    "joseph  r. kiniry and elaine cheong . : a java pre - processor .",
    "technical report cs - tr-98 - 15 ,",
    "department of computer science , california institute of technology , november 1998 .",
    "gary  t. leavens , k. rustan  m. leino , erik poll , clyde ruby , and bart jacobs . : notations and tools supporting detailed design in java . technical report 00 - 15 , department of computer science , iowa state university , august 2000 .",
    "bertrand meyer . .",
    "prentice - hall , inc .",
    ", second edition , 1988 .",
    "bertrand meyer .",
    ", chapter design by contract .",
    "prentice - hall , inc . , 1992 .    . ,",
    "revision 1.0 beta edition , july 1998 .",
    "jim waldo . . , 1998",
    "daniel  m. zimmerman .",
    ", 1.0a1 edition , february 1998 .",
    "....          ( 1 )      public abstract class jikicomponent extends httpservlet          ( 2 )        implements servlet                  {          ( 3 )        public static debug debug ;          ( 4 )        public static assert assert ;          ( 5 )        public static debugoutput debugoutput ;          ( 6 )        public static jikiidebugconstants debugconstants ;                    ... etc ...                  }                           ( 7 )      public class dummycomponent extends jikicomponent          ( 8)        implements servlet                  {                    ... etc ...          ( 9 )        public dummycomponent ( )                    {          ( 10 )         if ( debug = = null )                      {          ( 11 )           debugconstants = new jikiidebugconstants ( ) ;          ( 12 )           debug = new debug(debugconstants ) ;          ( 13 )           assert = debug.getassert ( ) ;          ( 14 )           debugoutput = new consoleoutput(debug ) ;          ( 15 )           debug.setoutputinterface(debugoutput ) ;                                               //",
    "turn on debugging if appropriate          ( 16 )           checkdebugging(debug ) ;                      }                    }                    ... etc ...                  }                           ( 17 )     public class dispatcher extends jikicomponent          ( 18 )       implements servlet                  {                    ... etc ...",
    "*          ( 19 )        * @precondition ( ( req ! = null ) & & ( resp ! = null ) )           ( 20 )        * parameters must be non - null .                     * /                           ( 21 )       protected void doget(httpservletrequest req ,           ( 22 )                            httpservletresponse resp )                     {          ( 23 )         assert.assert(((req",
    "! = null ) & & ( resp !",
    "= null ) ) ,          ( 24 )                       \" parameters must be non - null \" ) ;                           ( 25 )         debugoutput.println(debugconstants.transaction ,          ( 26 )                             \" dispatcher get : \" + req ) ;                      ... etc ...                    }                    ... etc ...                  }     ...."
  ],
  "abstract_text": [
    "<S> a major part of debugging , testing , and analyzing a complex software system is understanding what is happening within the system at run - time . </S>",
    "<S> some developers advocate running within a debugger to better understand the system at this level . </S>",
    "<S> others embed logging statements , even in the form of hard - coded calls to print functions , throughout the code . </S>",
    "<S> these techniques are all general , rough forms of what we call _ system monitoring _ , and , while they have limited usefulness in simple , sequential systems , they are nearly useless in complex , concurrent ones . </S>",
    "<S> we propose a set of new mechanisms , collectively known as a _ monitoring system _ , for understanding such complex systems , and we describe an example implementation of such a system , called idebug , for the java programming language .    </S>",
    "<S> [ testing and debugging ] </S>"
  ]
}