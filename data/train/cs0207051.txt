{
  "article_text": [
    "prolog has been around for nearly thirty years . its ability to survive as a general purpose programming language can be mainly attributed to the fact that it is complimentary to the major players in the field . without disregard to the many commercial products written in prolog",
    ", the language , arguably , thrives in academic environments , and in particular in ai and proof - of - concept computer science research .",
    "an important element in such projects is that the developers are only expected to write code in a part - time basis within a volatile environment . as a result",
    ", programs evolve from few hundred lines to several thousands in an evolutionary manner , that is , without prior overall design of the final product .",
    "indeed , it is seldom the case that an identifiable final product stage is ever reached .",
    "this is contrary to expectations in non - academic settings . as is the fact that sharing and publishing of unfinished source code is desirable .",
    "furthermore tools such as the unix make utility , @xcite which admittedly targets a different set of objectives , requires duplication of work and discourages re - usability of prolog code .",
    "in contrast , we present exlibris which makes use of the directives present in prolog source files to overcome these problems .",
    "a convenient method for including relatively positioned source code is by using the library alias present in most modern prolog systems .",
    "this mechanism is used primarily for system code that implements useful common predicates .",
    "for example the lists library present in most prolog systems defines , among others , predicates member/ and append/. exlibris extends the idea by allowing , during project development , access to code from a number of _ home _ library directories .",
    "when one wants to export the project for public use , the source files that are relevant are bundled into a local library directory .",
    "the only change required is that the local directory is added as a library directory in the top source files .",
    "this library oriented approach encourages the writing of reusable code .",
    "for instance , predicates that accomplish generic tasks should be developed in the home library .",
    "furthermore , it promotes a library oriented way of thinking , where useful code can become independent and in later stages part of the system libraries .",
    "for example , the pillow program @xcite has been incorporated in the current sicstus 3.9.0 release @xcite .    unlike the @xmath0 system ,",
    "@xcite we have chosen to use the underlying file store , and to provide in - source support for system - dependent configuration .",
    "@xmath0 stores predicates in a relational database and uses table attributes to achieve a more holistic approach to prolog based software engineering .",
    "dependence on source files means that in order to accommodate multiple prolog engines and runtime loading we need to introduce some new primitives . in this paper",
    "we present a minimum set of such primitives which we believe are interesting in , at least , pointing some of the support needed for such tasks .",
    "exlibris can be used for configuring both coarse and fine grain libraries .",
    "coarse libraries define many predicates per file , whereas finer grains reduce this to a possibly minimum of one predicate per file .",
    "exlibris depends for the grouping of source files to the primitives provided by the file - system , that is on the subdirectory relation .    the remaining of this paper is organised as follows .",
    "section 2 deals with some preliminary prolog definitions that deal with conditional loading and tentative dependencies of source files .",
    "section 3 , presents the functionality of exlibris .",
    "section 4 , provides some comments on the features , limitations , and possible future work .",
    "finally , section 5 serves as the concluding section .",
    "the standard development and configuration phases supported by exlibris are shown in fig .  [",
    "fig : libs ] .",
    "development happens at a project directory which , possibly , contains a local library directory . during this phase ( an example depicted in top part of fig .",
    "[ fig : libs ] ) files in the project directory can use the library alias to load any of the following three : system files ; which are part of the supported prolog engines , home files ; part of the developer s or the developing team s filespace , and local files ; which are within the project s space . in top part of fig .",
    "[ fig : libs ] file1 of project1 depends on files lists , maplist and flatten which reside within system , local and home libraries respectively .",
    "exlibris is a tool that helps to create an export directory that is independent of home library dependencies .",
    "this is illustrated in the lower part of fig .",
    "[ fig : libs ] . in the exported code",
    ", dependencies are either to system or to local libraries .",
    "all files that are relevant to files in project1 and reside within the home library are copied across to the local directory . although single system , local and home directories are shown in fig .  [ fig : libs ] , multiple , or alternative as is the case for system , ones , are supported .          since the publication of the prolog iso standard @xcite the vast majority of systems have strove for compliance .",
    "this has made the idea of the same prolog code running on different engine feasible .",
    "still differences exist , and it is necessary to take these into account .    the two issues we need to address are , uniform structured prolog identification and conditional loading .",
    "these tasks are useful in their own right , so we collect the relevant predicates in the pl library .",
    "this has been implemented and tested for sicstus , swi @xcite , and yap @xcite .",
    "firstly , pl defines predicate pl/(pl(-pl ) ) .",
    "its argument identifies the running prolog system with a compound term , we refer to this term as pl - term .",
    "the name of the functor of the term identifies the prolog system and the term s single argument the version , pl - version .",
    "the version should be such that the term order imposes the relevant order on the versions .",
    "for example the terms for the three most recent versions of the supported systems are : sicstus(3:9:0 ) , swi(5:0:7 ) , and yap(4:3:23 ) .",
    "a first use for pl/ is for defining suitability of particular prolog engines for predicates present in a source file .",
    "we define directives ,    .... : - defines ( + functors ) .",
    ": - defines ( + ifpls , + functors ) .",
    "....    we will treat the first directive as a special case of the second where @xmath1 is instantiated to all indicating suitability for all prolog systems .",
    "apart from the special value all @xmath1 may be a single , or a list of if - pl - term . in turn , an if - pl - term may be a if - term or a pair of the form ( @xmath2,@xmath3 ) .",
    "@xmath2 is a valid name for the functor of some pl - term and @xmath3 is a list of ( @xmath4,@xmath5 ) pairs .",
    "the intuition is that definitions for predicates corresponding to @xmath6 are given in the source file in which the directive appear , provided that the underlying engine matches one of the if - pl - terms in @xmath7 . to find a match , elements in @xmath7",
    "are considered disjunctively whereas @xmath3 are considered conjunctively .",
    "predicate mkindex/ takes a number of options that are not discussed here in full .",
    "its core operation is to create an index file ( index.pl ) for a given , library , directory .",
    "the index file , contains fact definitions for index/ multifile predicate .",
    ".... index ( -name , -arity , -ifpls , -module , -file ) .",
    "....    @xmath8 and arity refer to the functor of a predicate defined in file @xmath9 and module @xmath10 .",
    "@xmath1 is of the same form as that described in section  [ sec : defines ] and indicate that the definition in @xmath9 should only be used for prolog system with matching pl - term .",
    "mkindex/ has three sources for finding this information .",
    "firstly , module definitions ( in which case @xmath1 = = any ) the defines/ , directives as already defined and in the case where neither of the two is present , it can be instructed to attempt and extract it from the clausal definitions . in the last case @xmath1 is again instantiated to any .      with indices such as those described above , source files can ensure the presense of specific predicates without reference to the executing prolog system while ensuring that the correct versions will be loaded at loading time .    .... : - requires ( + functors ) . ....",
    "directive requires/ instructs that at loading time the files corresponding to each functor and the running system will be loaded .    following from the example in fig .",
    "[ fig : libs ] at development phase the mentioned files might contain    .... \\% file1 : - requires ( [ member/2,maplist/3,flatten/2 ] ) .    \\% syslib / index.pl index ( member , 2 , sicstus ( _ ) , lists , lists )",
    ".    \\% locallib / index.pl index ( maplist , 3 , any , user , ' meta / maplist ' ) .",
    "\\% homelib / index.pl index ( flatten , 2 , swi ( _ ) , built_in , ' compat / swi / built_ins ' ) . index ( flatten , 2 , not(swi ( _ ) ) , user , ' list / flatten ' ) . index ( member , 2 , swi ( _ ) , built_in , ' compat / swi / built_ins ' ) .",
    "....    module name built_in means that the predicate is a built - in . as can be seen above",
    ", flatten/ is a built - in in swi so no file will be loaded .",
    "the file present is simply where our instruction that this is a built - in for this system resides . on the other hand",
    "if file1 is loaded in sicstus then the definition in homelib / list / flatten will be used .",
    "similarly for member/ although in the later case it will be loaded from syslib / lists .",
    "for either system maplist/ is loaded from locallib / meta / maplist .",
    "files can also be loaded conditionally to the current system by using the introduced pl - term within the loading file .",
    "predicates if_pl/ , provide means for accomplishing this , and can be called as follows :    .... if_pl ( + ifpls , + call ) .",
    "if_pl ( + ifpls , + call , + elsecall ) .",
    "....    the predicate is quite general since calls @xmath11 and @xmath12 can be any callable term . here",
    "we are interested in the cases where if_pl is used as a directive and the calls is of the form @xmath13 .",
    "@xmath1 is identical to the one described in section  [ sec : defines ] . here ,",
    "if the running engine has a match , then @xmath11 is called . in if_pl/ @xmath12",
    "is called if there is no match .",
    "exlibris recursively de - constructs if_pl/ directives , and recognises any loading predicates within @xmath11 and @xmath12 , and thus can provide information similar to to the that gathered in index/ by mkindex/. contrary to the information is present on the caller file rather than the defining file , so it is not as clean an approach .",
    "we have included if_pl/ firstly because it is a useful predicate taking advantage of pl/ and secondly because it might be useful in cases when one chooses not to use index.pl files .",
    "finally , we need to address a discrepancy that arises from loading code at runtime . unlike when using directives these situations give no easily accessible information about the files a program depends upon .",
    "although it seems useful to have a directive declaring tentative dependencies such feature is not present in any of the discussed systems .",
    "we propose a very simple mechanism facilitated by may_load/ directives .",
    ": - may_load ( + files ) . declares that a single or a list of files may be loaded at runtime by the program present in the same source file .    in this way",
    "we make the dependency of the two files more accessible .",
    "the dependant file is the file in which the directive appears in .",
    "this , depends on the file pointed to by the argument of may_load/. such a directive assists exlibris in ensuring that all files that may be loaded , depending on the execution path of a predicate , will be exported .",
    "predicate exlibris/ is used to create an export directory structure from the developer s source code .",
    "the emphasis is placed in integrating relevant parts of private libraries when building software for exportation .",
    "its single argument is a list of options .",
    "the recognised options are as follows .",
    "dest(@xmath14 ) the destination directory where the exported files will be copied .",
    "this should not exist prior to the call .",
    "this option does not have a default value .",
    "source(@xmath15 ) a single file or directory or a list of source files and directories .",
    "each is considered to be either an _ entry _ level source file , or a directory containing entry level source files .",
    "an entry level file is one that a user is expected to load directly . in the case of directories",
    "all source files within are considered entry level source files .",
    "there is no default value for this option .",
    "copy(@xmath16 ) whether directories containing entry files should also be copied recursively , @xmath16 = = recursive , or entry files should be copied individually , @xmath16 = = selective .",
    "default is @xmath16 = = selective .",
    "syslib(@xmath17 ) usually is a single system library path , but a list of paths can also be given .",
    "the provided path should point to the developing prolog s system library directory .",
    "default is the first directory given as the answer to query ?",
    "- library_directory ( l ) . and conforms to system dependant criteria .",
    "effectively we try to guess which library directory is the system one , since this is not an information prolog engines currently provide .",
    "homelibs(@xmath18 ) a list of private libraries holding source files that are loaded from entry files or their dependents by the library alias .",
    "the intuition is that during development these directories are defined using + library_directory/ in entry files or some appropriate start file .",
    "the default value is the instantiations of ?",
    "- library_directory ( l ) . that did nt match the syslib criteria .",
    "loclib(@xmath19 ) a path for the local library .",
    "this is considered relatively to @xmath14 .",
    "all referenced files in @xmath18 will be copied into @xmath19 .",
    "the relative path of any such file from the appropriate @xmath20 will be recreated within @xmath19 .",
    "note that this may be an existing directory within some source directory .",
    "default value : lib .",
    "pls(@xmath21 ) a single or a list of pl - terms . only files pertinent to systems corresponding to these pl - terms are copied .",
    "these are identified from if_pl/ directives as discussed in section  [ sec : plload ] .",
    "the default value is for all prologs which is equivalent to pls(@xmath22 )    the exported files are identical to the development ones proviso two transformations .",
    "entry level files loose any library_directory/ definition and instead the following lines are added on the top of each such file    .... % following line added by exlibris .",
    ": - library_directory ( ' relpathtoloclib ' ) . ....    when exporting , the value of directory @xmath23 is known and it is the path to @xmath19 relative to the particular entry level file .",
    "the second transformation is to remove any if_pl/ that does not match any of the system pl - term in @xmath21 .",
    "our approach uses the file - system s directory structure as its medium of grouping predicates at the level of source files .",
    "this , supports both fine and coarse grain groupings .",
    "examples of coarse groupings are the system libraries defining a score of predicates for source file .",
    "whereas , fine grouping would favour single predicate definition per source file or module files exporting a single predicate .",
    "however , operations such as moving source files within the home directory structure will need to be accommodated by future tools .",
    "currently , exlibris runs on sicstus v3.9.0 .",
    "swi v5.0.7 and yap v4.3.23 ( cvs ) or later under unix - like file - systems .",
    "our belief is that like - minded systems such as ciao @xcite and gnuprolog @xcite will be easy to support . for sicstus and yap , and since layout option only provides the start line of read terms , exlibris requires that if_pl terms are the only terms on the text line in which they appear , and also that there are no new line characters to the end of the term ( to the period ) .",
    "other operating systems may be supported via the support prolog systems provide for translation of unix paths to other operating system paths .",
    "all code described in this paper can be found at http://www.doc.ic.ac.uk/`~`nicos/exlibris/ .",
    "about half of the code used was code drawn from pre - existing private libraries .    a number of additional tools may be constructed that can help with keeping projects and libraries consistent as well as facilitating library merging . for such tasks ,",
    "as is also true for other source code manipulation , it will be useful to have a structured form of comments .    in the future we will like to implement non - recursive library copies .",
    "that is , the relative path of a home library file is reconstructed into the exported local library directory .",
    "this feature is currently not supported because it requires code transformations to a degree greater than we wish the core program to have .",
    "one possibility would be to add this as an additional tool that can flatten out any arbitrary library while updating project source files and inter - library dependencies .",
    "the first contribution of this paper was to propose simple mechanisms for conditional , depending on the underlying system , loading and execution , and for declaring tentative source file dependencies .",
    "apart from the suitability of the particular suggestions it is important that some of the issues raised here and which have remained dormant should attract some attention from the prolog community .",
    "based on the proposed primitives we also presented a straightforward procedure for code configuration and exportation .",
    "we have kept core functionalities to a minimum as to encourage simplicity and thus usage .",
    "exlibris encourages development of reusable code .",
    "we perceive this as the most desirable feature of exlibris .",
    "pearl brereton and paul singleton .",
    "deductive software building . in jacky estublier , editor , _ software configuration management .",
    "icse scm-4 and scn-5 workshops .",
    "selected papers _ , number 1005 in lncs , pages 8187 .",
    "springer , 1995 ."
  ],
  "abstract_text": [
    "<S> in this paper we present a simple source code configuration tool . </S>",
    "<S> exlibris operates on libraries and can be used to extract from local libraries all code relevant to a particular project . </S>",
    "<S> our approach is not designed to address problems arising in code production lines , but rather , to support the needs of individual or small teams of researchers who wish to communicate their prolog programs . in the process </S>",
    "<S> , we also wish to accommodate and encourage the writing of reusable code . </S>",
    "<S> moreover , we support and propose ways of dealing with issues arising in the development of code that can be run on a variety of _ like - minded _ prolog systems . with consideration to these aims </S>",
    "<S> we have made the following decisions : ( i ) support file - based source development , ( ii ) require minimal program transformation , ( iii ) target simplicity of usage , and ( iv ) introduce minimum number of new primitives . </S>"
  ]
}