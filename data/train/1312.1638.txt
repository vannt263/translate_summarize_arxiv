{
  "article_text": [
    "authors : :    f. d. witherden , a. m. farrington , p. e. vincent program title : :    pyfr v0.1.0 licensing provisions : :    new style bsd license programming language : :    python , cuda and c computer : :    variable , up to and including gpu clusters operating system : :    recent version of linux / unix ram : :    variable , from hundreds of megabytes to gigabytes number of processors used : :    variable , code is multi - gpu and multi - cpu aware through a combination    of mpi and openmp external routines / libraries : :    python 2.7 , numpy , pycuda , mpi4py , sympy , mako nature of problem : :    compressible euler and navier - stokes equations of fluid dynamics ;    potential for any advection - diffusion type problem . solution method",
    ": :    high - order flux reconstruction approach suitable for curved , mixed ,    unstructured grids .",
    "unusual features : :    code makes extensive use of symbolic manipulation and run - time code    generation through a domain specific language . running time : :    many small problems can be solved on a recent workstation in minutes    to hours .",
    "throughout we adopt a convention in which dummy indices on the right hand side of an expression are summed . for example @xmath0 where the limits are implied from the surrounding context .",
    "all indices are assumed to be zero - based",
    ".    2    = + @xmath1 kronecker delta + @xmath2 matrix determinant + @xmath3 matrix dimensions +   + * indices . *",
    "+ @xmath4 element type + @xmath5 element number + @xmath6 field variable number + @xmath7 summation indices + @xmath8 summation indices +   + * domains .",
    "* + @xmath9 solution domain + @xmath10 all elements in @xmath9 of type @xmath4 + @xmath11 a _ standard _ element of type @xmath4 + @xmath12 boundary of @xmath11 + @xmath13    @@totalleftmargin@-curtab@    element @xmath5 of type @xmath4 in @xmath9     + @xmath14 number of elements of type @xmath4 +   + * expansions . *",
    "+ @xmath15 polynomial order + @xmath16 number of spatial dimensions + @xmath17 number of field variables + @xmath18    @@totalleftmargin@-curtab@    nodal basis polynomial @xmath19 for element type @xmath4     + @xmath20 physical coordinates + @xmath21 transformed coordinates + @xmath22 transformed to physical mapping +   + * adornments and suffixes .",
    "* + @xmath23    @@totalleftmargin@-curtab@    a quantity in transformed space     + @xmath24    @@totalleftmargin@-curtab@    a vector quantity of unit magnitude     + @xmath25 transpose + @xmath26 a quantity at a solution point + @xmath27 a quantity at a flux point + @xmath28    @@totalleftmargin@-curtab@    a normal quantity at a flux point     +   + * operators . * + @xmath29    @@totalleftmargin@-curtab@    common solution at an interface     + @xmath30    @@totalleftmargin@-curtab@    common normal flux at an interface     +   +",
    "there is an increasing desire amongst industrial practitioners of computational fluid dynamics ( cfd ) to undertake high - fidelity scale - resolving simulations of transient compressible flows within the vicinity of complex geometries .",
    "for example , to improve the design of next generation unmanned aerial vehicles ( uavs ) , there exists a need to perform simulations  at reynolds numbers @xmath31@xmath32 and mach numbers @xmath33@xmath34of highly separated flow over deployed spoilers / air - brakes ; separated flow within serpentine intake ducts ; acoustic loading in weapons bays ; and flow over entire uav configurations at off - design conditions .",
    "unfortunately , current generation industry - standard cfd software based on first- or second - order accurate reynolds averaged navier - stokes ( rans ) approaches is not well suited to performing such simulations .",
    "henceforth , there has been significant interest in the potential of high - order accurate methods for unstructured mixed grids , and whether they can offer an efficient route to performing scale - resolving simulations within the vicinity of complex geometries .",
    "popular examples of high - order schemes for unstructured mixed grids include the discontinuous galerkin ( dg ) method , first introduced by reed and hill @xcite , and the spectral difference ( sd ) methods originally proposed under the moniker ` staggered - gird chebyshev multidomain methods ' by kopriva and kolias in 1996 @xcite and later popularised by sun et al .",
    "@xcite . in 2007",
    "huynh proposed the flux reconstruction ( fr ) approach @xcite ; a unifying framework for high - order schemes for unstructured grids that incorporates both the nodal dg schemes of @xcite and , at least for a linear flux function , any sd scheme .",
    "in addition to offering high - order accuracy on unstructured mixed grids , fr schemes are also compact in space , and thus when combined with explicit time marching offer a significant degree of element locality . as such , explicit high - order fr schemes are characterised by a large degree of structured computation .    over the past two decades improvements in the arithmetic capabilities of processors",
    "have significantly outpaced advances in random access memory .",
    "algorithms which have traditionally been compute bound  such as dense matrix - vector products  are now limited instead by the bandwidth to / from memory .",
    "this is epitomised in . whereas the processors of two decades ago had flops - per - byte of @xmath35 more recent chips have ratios upwards of @xmath36 .",
    "this disparity is not limited to just conventional cpus .",
    "massively parallel accelerators and co - processors such as the nvidia k20x and intel xeon phi 5110p have ratios of @xmath37 and @xmath38 , respectively .",
    "trends in the peak floating point performance ( double precision ) and memory bandwidth of sever - class intel processors from 19942013 .",
    "the quotient of these two measures yields the flops - per - byte of a processor .",
    "data courtesy of jan treibig . ]",
    "a concomitant of this disparity is that modern hardware architectures are highly dependent on a combination of high speed caches and/or shared memory to maintain throughput .",
    "however , for an algorithm to utilise these efficiently its memory access pattern must exhibit a degree of either spatial or temporal locality . to a first - order approximation",
    "the spatial locality of a method is inversely proportional to the amount of memory indirection . on an unstructured grid indirection",
    "arises whenever there is coupling between elements .",
    "this is potentially a problem for discretisations whose stencil is not compact .",
    "coupling also arises in the context of implicit time stepping schemes .",
    "implementations are therefore very often bound by memory bandwidth . as a secondary trend",
    "we note that the manner in which flops are realised has also changed . in the early 1990s commodity cpus",
    "were predominantly scalar with a single core of execution . however in 2013 processors with eight or more cores are not uncommon .",
    "moreover , the cores on modern processors almost always contain vector processing units .",
    "vector lengths up to 256-bits , which permit up to four double precision values to be operated on at once , are not uncommon .",
    "it is therefore imperative that compute - bound algorithms are amenable to both multithreading and vectorisation .",
    "a versatile means of accomplishing this is by breaking the computation down into multiple , necessarily independent , streams . by virtue of their independence",
    "these streams can be readily divided up between cores and vector lanes .",
    "this leads directly to the concept of _ stream processing_. we will refer to architectures amenable to this form of parallelisation as streaming architectures .    a corollary of the above discussion is that compute intensive discretisations which can be formulated within the stream processing paradigm are well suited to acceleration on current  and likely future  hardware platforms .",
    "the fr approach combined with explicit time stepping is an archetypical of this .",
    "our objective in this paper is to present pyfr , an open - source python based framework for solving advection - diffusion type problems on streaming architectures using the fr approach .",
    "the framework is designed to solve a range of governing systems on mixed unstructured grids containing various element types .",
    "it is also designed to target a range of hardware platforms via use of an in - built domain specific language derived from the mako templating engine .",
    "the current release of pyfr is able to solve the compressible euler and navier - stokes equations on unstructured grids of quadrilateral and triangular elements in two - dimensions , and unstructured grids of hexahedral elements in three - dimensions , targeting clusters of cpus , and nvidia gpus .",
    "the paper is structured as follows . in",
    "we provide a overview of the fr approach for advection - diffusion type problems on mixed unstructured grids . in",
    "we proceed to describe our implementation strategy , and in we present the euler and navier - stokes equations , which are solved by the current release of pyfr .",
    "the framework is then validated in , single - node performance is discussed in , and scalability of the code is demonstrated on up to 104 nvidia m2090 gpus in . finally , conclusions are drawn in .",
    "a brief overview of the fr approach for solving advection - diffusion type problems is given below .",
    "extended presentations can be found elsewhere @xcite .",
    "consider the following advection - diffusion problem inside an arbitrary domain @xmath9 in @xmath16 dimensions @xmath39 where @xmath40 is the _ field variable _ index , @xmath41 is a conserved quantity , @xmath42 is the flux of this conserved quantity and @xmath43 . in defining the flux we have taken @xmath44 in its unscripted form to refer to all of the @xmath17 field variables and @xmath45 to be an object of length @xmath46 consisting of the gradient of each field variable .",
    "we start by rewriting as a first order system    @xmath47    where @xmath48 is an auxiliary variable . here , as with @xmath45 ,",
    "we have taken @xmath48 in its unsubscripted form to refer to the gradients of all of the field variables .",
    "take @xmath49 to be the set of available element types in @xmath50 .",
    "examples include quadrilaterals and triangles in two dimensions and hexahedra , prisms , pyramids and tetrahedra in three dimensions .",
    "consider using these various elements types to construct a conformal mesh of the domain such that @xmath51 where @xmath10 refers to all of the elements of type @xmath4 inside of the domain , @xmath14 is the number of elements of this type in the decomposition , and @xmath5 is an index running over these elements with @xmath52 . inside each element",
    "@xmath13 we require that    @xmath53    it is convenient , for reasons of both mathematical simplicity and computational efficiency , to work in a transformed space . we accomplish this by introducing , for each element type , a standard element @xmath54 which exists in a transformed space , @xmath55 .",
    "next , assume the existence of a mapping function for each element such that @xmath56 along with the relevant jacobian matrices @xmath57 these definitions provide us with a means of transforming quantities to and from standard element space .",
    "taking the transformed solution , flux , and gradients inside each element to be    @xmath58    and letting @xmath59 , it can be readily verified that    @xmath60    as required .",
    "we note here the decision to multiply the first equation through by a factor of @xmath61 .",
    "doing so has the effect of taking @xmath62 which allows us to work in terms of the physical solution .",
    "this is more convenient from a computational standpoint .",
    "we next proceed to associate a set of solution points with each standard element . for each type @xmath63 take @xmath64 to be the chosen set of points where @xmath65 .",
    "these points can then be used to construct a nodal basis set @xmath66 with the property that @xmath67 . to obtain such a set we first take @xmath68 to be any basis which spans a selected order @xmath15 polynomial space defined inside @xmath69 .",
    "next we compute the elements of the generalised vandermonde matrix @xmath70 . with these",
    "a nodal basis set can be constructed as @xmath71 . along with the solution points inside of each element",
    "we also define a set of flux points on @xmath72 .",
    "we denote the flux points for a particular element type as @xmath73 where @xmath74 .",
    "let the set of corresponding normalised outward - pointing normal vectors be given by @xmath75 .",
    "it is critical that each flux point pair along an interface share the same coordinates in physical space . for a pair of flux points @xmath76 and @xmath77 at a non - periodic interface",
    "this can be formalised as @xmath78 .",
    "a pictorial illustration of this can be seen in .",
    "solution points ( blue circles ) and flux points ( orange squares ) for a triangle and quadrangle in physical space . for the top edge of the quadrangle",
    "the normal vectors have been plotted .",
    "observe how the flux points at the interface between the two elements are co - located . ]",
    "the first step in the fr approach is to go from the discontinuous solution at the solution points to the discontinuous solution at the flux points @xmath79 where @xmath80 is an approximate solution of field variable @xmath6 inside of the @xmath5th element of type @xmath4 at solution point @xmath81 .",
    "this can then be used to compute a _ common solution _",
    "@xmath82 where @xmath83 is a scalar function that given two values at a point returns a common value . here",
    "we have taken @xmath84 to be the element type , flux point number and element number of the adjoining point at the interface .",
    "since grids in fr are permitted to be unstructured the relationship between @xmath76 and @xmath84 is indirect .",
    "this necessitates the use of a lookup table . as the common solution function",
    "is permitted to perform upwinding or downwinding of the solution it is in general the case that @xmath85 .",
    "hence , it is important that each flux point pair only be visited _ once _ with the same common solution value assigned to both @xmath86 and @xmath87 .",
    "further , associated with each flux point is a vector correction function @xmath88 constrained such that @xmath89 with a divergence that sits in the same polynomial space as the solution . using these fields we can express the solution to as @xmath90_{\\tilde{{\\mathbf{x } } }",
    "= \\tilde{{\\mathbf{x}}}^{(u)}_{e\\sigma}},\\ ] ] where the term inside the curly brackets is the ` jump ' at the interface and the final term is an order @xmath91 approximation of the gradient obtained by differentiating the discontinuous solution polynomial . following the approaches of kopriva @xcite and sun et al .",
    "@xcite we can now compute physical gradients as @xmath92 where @xmath93 .",
    "having solved the auxiliary equation we are now able to evaluate the transformed flux @xmath94 where @xmath95 .",
    "this can be seen to be a collocation projection of the flux . with this",
    "it is possible to compute the normal transformed flux at each of the flux points @xmath96 considering the physical normals at the flux points we see that @xmath97 which is the outward facing normal vector in physical space where @xmath98 is defined as the magnitude . as the interfaces between two elements conform we must have @xmath99 . with these definitions we are now in a position to specify an expression for the _ common normal flux _ at a flux point pair as @xmath100 the relationship @xmath101 arises from the desire for the resulting numerical scheme to be conservative ; a net outward flux from one element must be balanced by a corresponding inward flux on the adjoining element .",
    "it follows that that @xmath102 .",
    "the common normal fluxes in can now be taken into transformed space via @xmath103 where @xmath104 .",
    "it is now possible to compute an approximation for the divergence of the _ continuous _ flux .",
    "the procedure is directly analogous to the one used to calculate the transformed gradient in @xmath105_{\\tilde{{\\mathbf{x } } } =      \\tilde{{\\mathbf{x}}}^{(u)}_{e\\rho}},\\ ] ] which can then be used to obtain a semi - discretised form of the governing system @xmath106 where @xmath107 .",
    "this semi - discretised form is simply a system of ordinary differential equations in @xmath108 and can be solved using one of a number of schemes , e.g. a classical fourth order runge - kutta ( rk4 ) scheme .",
    "pyfr is a python based implementation of the fr approach described in section .",
    "it is designed to be compact , efficient , and platform portable .",
    "key functionality is summarised in table .",
    ".[tab : pyfr - func]key functionality of pyfr . [ cols= \"",
    "> , < \" , ]",
    "in this paper we have described pyfr , an open source python based framework for solving advection - diffusion type problems on streaming architectures .",
    "the structure and ethos of pyfr has been explained including our methodology for targeting multiple hardware platforms .",
    "we have shown that pyfr exhibits spatial super accuracy when solving the 2d euler equations and the expected order of accuracy when solving couette flow problem on a range of grids in 2d and 3d .",
    "qualitative results for unsteady 3d viscous flow problems on curved grids have also been presented .",
    "performance of pyfr has been validated on an nvidia m2090 gpu in three dimensions .",
    "it has been shown that the compute bound kernels are able to obtain between @xmath109 and @xmath110 of realisable peak flop / s whereas the bandwidth bound point - wise kernels are , across the board , able to obtain in excess of @xmath111 realisable peak bandwidth .",
    "the scalability of pyfr has been demonstrated in the strong sense up to 32 nvidia m2090s and in the weak sense up to 104 nvidia m2090s when solving the 3d navier - stokes equations .",
    "the authors would like to thank the engineering and physical sciences research council for their support via two doctoral training grants and an early career fellowship ( ep / k027379/1 ) .",
    "the authors would also like to thank the e - infrastructure south centre for innovation for granting access to the emerald supercomputer , and nvidia for donation of three k20c gpus .",
    "it is possible to cast the majority of operations in an fr step as matrix - matrix multiplications of the form @xmath112 where @xmath113 are constants , @xmath114 is a constant operator matrix , and @xmath115 and @xmath116 are state matrices . to accomplish this we start by introducing the following constant operator matrix @xmath117 and the following state matrices @xmath118 in specifying the state matrices there is a degree of freedom associated with how the @xmath17 field variables for each element are packed along a row of the matrix , with the possible packing choices being discussed in . using these matrices we are able to reformulate as @xmath119 in order to apply a similar procedure to we let @xmath120_{\\tilde{{\\mathbf{x } } }      = \\tilde{{\\mathbf{x}}}^{(u)}_{e\\sigma } } , & \\dim { \\bm{\\mathsf{m}}}^{4}_{e } ,    & = n_{d}n_{e}^{(u ) } \\times n_{e}^{(u)},\\\\    \\big({\\bm{\\mathsf{m}}}^{6}_{e}\\big)_{\\rho\\sigma } & =    \\big[\\hat{\\tilde{{\\mathbf{n}}}}^{(f)}_{e\\rho}\\cdot \\tilde{{\\bm{\\nabla } } } \\cdot    { \\mathbf{g}}^{(f)}_{e\\rho}(\\tilde{{\\mathbf{x}}})\\big]_{\\tilde{{\\mathbf{x } } } =      \\tilde{{\\mathbf{x}}}^{(f)}_{e\\sigma } } , & \\dim { \\bm{\\mathsf{m}}}^{6}_{e } ,    & = n_{d}n_{e}^{(u ) } \\times n_{e}^{f},\\\\   \\big({\\bm{\\mathsf{c}}}^{(f)}_{e}\\big)_{\\rho(n\\alpha ) } & =    \\mathfrak{c}_{\\alpha}u^{(f)}_{e\\rho n\\alpha } ,    & \\dim { \\bm{\\mathsf{c}}}^{(f)}_{e } & = n^{(f)}_{e } \\times    n_v{\\left\\lvert{\\mathbf{\\omega}}_e\\right\\rvert},\\\\    \\big(\\tilde{{\\bm{\\mathsf{q}}}}^{(u)}_{e}\\big)_{\\sigma(n\\alpha ) } & =    \\tilde{{\\mathbf{q}}}^{(u)}_{e\\sigma n\\alpha } , &    \\dim \\tilde{{\\bm{\\mathsf{q}}}}^{(u)}_{e }   & = n_dn^{(u)}_{e } \\times    n_v{\\left\\lvert{\\mathbf{\\omega}}_e\\right\\rvert},\\end{aligned}\\ ] ] here it is important to qualify assignments of the form @xmath121 where @xmath122 is a @xmath16 component vector . as above",
    "there is a degree of freedom associated with the packing . with the benefit of foresight",
    "we take the stride between subsequent elements of @xmath122 in a matrix column to be either @xmath123 or @xmath124 depending on the context . with these matrices",
    "reduces to @xmath125 applying the procedure to we take @xmath126 hence @xmath127 where we note the block diagonal structure of @xmath128 .",
    "this is a direct consequence of the above choices for @xmath129 .",
    "finally , to rewrite we write @xmath130^t_{\\tilde{{\\mathbf{x } } }      = \\tilde{{\\mathbf{x}}}^{(u)}_{e\\sigma } } , & \\dim { \\bm{\\mathsf{m}}}^{1}_{e } & =    n^{(u)}_{e } \\times n_dn^{(u)}_{e},\\\\    \\big({\\bm{\\mathsf{m}}}^{2}_{e}\\big)_{\\rho\\sigma } & =    \\big[\\ell^{(u)}_{e\\rho}(\\tilde{{\\mathbf{x}}}^{(f)}_{e\\sigma } )    \\hat{\\tilde{{\\mathbf{n}}}}^{(f)}_{e\\sigma}\\big]^t , & \\dim { \\bm{\\mathsf{m}}}^{2}_{e } & =    n^{(f)}_{e } \\times n_dn^{(u)}_{e},\\\\    \\big({\\bm{\\mathsf{m}}}^{3}_{e}\\big)_{\\rho\\sigma } & = \\big[\\tilde{{\\bm{\\nabla } } } \\cdot    { \\mathbf{g}}^{(f)}_{e\\sigma}(\\tilde{{\\mathbf{x}}})\\big]_{\\tilde{{\\mathbf{x } } } =      \\tilde{{\\mathbf{x}}}^{(u)}_{e\\rho } } , & \\dim { \\bm{\\mathsf{m}}}^{3}_{e } & =    n^{(u)}_{e }    \\times n^{(f)}_{e},\\\\    \\big(\\tilde{{\\bm{\\mathsf{d}}}}^{(f)}_{e}\\big)_{\\sigma(n\\alpha ) } & =    \\mathfrak{f}^{\\vphantom{(f_\\perp)}}_{\\alpha}\\tilde{f}^{(f_\\perp)}_{e\\sigma      n\\alpha } , & \\dim \\tilde{{\\bm{\\mathsf{d}}}}^{(f)}_{e } & = n^{(f)}_{e } \\times n_v{\\left\\lvert{\\mathbf{\\omega}}_e\\right\\rvert},\\\\    \\big(\\tilde{{\\bm{\\mathsf{f}}}}^{(u)}_{e}\\big)_{\\rho(n\\alpha ) } & =    \\tilde{{\\mathbf{f}}}^{(u)}_{e\\rho n\\alpha } , & \\dim    \\tilde{{\\bm{\\mathsf{f}}}}^{(u)}_{e } & = n_dn^{(u)}_{e } \\times    n_v{\\left\\lvert{\\mathbf{\\omega}}_e\\right\\rvert},\\\\    \\big(\\tilde{{\\bm{\\mathsf{r}}}}^{(u)}_{e}\\big)_{\\rho(n\\alpha ) } & = ( \\tilde{{\\bm{\\nabla } } }    \\cdot \\tilde{{\\mathbf{f}}})^{(u)}_{e\\rho n\\alpha } , & \\dim    \\tilde{{\\bm{\\mathsf{r}}}}^{(u)}_{e } & = n_e^{(u ) } \\times n_v{\\left\\lvert{\\mathbf{\\omega}}_e\\right\\rvert},\\end{aligned}\\ ] ] and after substitution of for @xmath131 obtain @xmath132",
    "in the following section we take @xmath133 and @xmath134 to be the two discontinuous solution states at an interface and @xmath135 to be the normal vector associated with the first state . for convenience",
    "we take @xmath136 , and @xmath137 with inviscid fluxes being prescribed by .",
    "also known as the local lax - friedrichs method a rusanov type riemann solver imposes inviscid numerical interface fluxes according to @xmath138 where @xmath139 is an estimate of the maximum wave speed @xmath140",
    "to incorporate boundary conditions into the fr approach we introduce a set of boundary interface types @xmath141 . at a boundary interface",
    "there is only a single flux point : that which belongs to the element whose edge / face is on the boundary .",
    "associated with each boundary type are a pair of functions @xmath142 and @xmath143 where @xmath133 , @xmath144 , and @xmath135 are the solution , solution gradient and unit normals at the relevant flux point .",
    "these functions prescribe the common solutions and normal fluxes , respectively .    instead of directly imposing solutions and normal fluxes",
    "it is oftentimes more convenient for a boundary to instead provide ghost states . in its simplest formulation @xmath145 and @xmath146 where @xmath147 is",
    "the ghost solution state and @xmath148 is the ghost solution gradient .",
    "it is straightforward to extend this prescription to allow for the provisioning of different ghost solution states for @xmath149 and @xmath150 and to permit @xmath148 to be a function of @xmath133 in addition to @xmath144 .",
    "patrice castonguay , pe  vincent , and antony jameson .",
    "application of high - order energy stable flux reconstruction schemes to the euler equations . in _",
    "49th aiaa aerospace sciences meeting _ , volume 686 , 2011 ."
  ],
  "abstract_text": [
    "<S> high - order numerical methods for unstructured grids combine the superior accuracy of high - order spectral or finite difference methods with the geometric flexibility of low - order finite volume or finite element schemes . </S>",
    "<S> the flux reconstruction ( fr ) approach unifies various high - order schemes for unstructured grids within a single framework . additionally , the fr approach exhibits a significant degree of element locality , and is thus able to run efficiently on modern streaming architectures , such as graphical processing units ( gpus ) . </S>",
    "<S> the aforementioned properties of fr mean it offers a promising route to performing affordable , and hence industrially relevant , scale - resolving simulations of hitherto intractable unsteady flows within the vicinity of real - world engineering geometries . in this paper </S>",
    "<S> we present pyfr , an open - source python based framework for solving advection - diffusion type problems on streaming architectures using the fr approach . </S>",
    "<S> the framework is designed to solve a range of governing systems on mixed unstructured grids containing various element types . </S>",
    "<S> it is also designed to target a range of hardware platforms via use of an in - built domain specific language based on the mako templating engine . </S>",
    "<S> the current release of pyfr is able to solve the compressible euler and navier - stokes equations on grids of quadrilateral and triangular elements in two dimensions , and hexahedral elements in three dimensions , targeting clusters of cpus , and nvidia gpus . </S>",
    "<S> results are presented for various benchmark flow problems , single - node performance is discussed , and scalability of the code is demonstrated on up to 104 nvidia m2090 gpus . </S>",
    "<S> the software is freely available under a 3-clause new style bsd license ( see www.pyfr.org ) .    _ </S>",
    "<S> keywords : _ high - order ; flux reconstruction ; parallel algorithms ; heterogeneous computing </S>"
  ]
}