{
  "article_text": [
    "sequence of approximation ( b ) .",
    "( d ) : the amino - acid sequence of 2hiu .",
    "( the figure ( a ) is prepared using * weblab viewer * ( molecular simulations inc . ) . ) ]    in nature the three - dimensional structure of a protein is encoded in the corresponding gene . in this paper",
    "we describe a new method for encoding the three - dimensional structure of a protein into a binary sequence ( fig.[fighiu ] ) .    in the method",
    "a protein is approximated by a tetrahedron sequence .",
    "for example , approximation fig.[fighiu](b ) is obtained by folding tetrahedron sequence fig.[fighiu](c ) , where three tetrahedrons are assigned for each amino - acid .",
    "we would obtain more precise approximation if we use more tetrahedrons .",
    "the feature of the method is the correspondence between protein - folding and `` integration '' . and",
    "the binary sequence is obtained as the `` second derivative '' of the shape of the folded tetrahedron sequence .    with this method at hand",
    ", we can extract static structural information of a protein from its gene .",
    "and we can describe the distribution of three - dimensional structures of proteins without any subjective hierarchical classification .",
    "and its projection on @xmath0 .",
    "( b ) : slant - tile sequences and flat - tile sequences defined by @xmath1 .",
    "( c ) : slant - tiles over a flat - tile on @xmath0 . ]    for simplicity we shall explain the basic idea behind the paper in the case of two - dimensional objects , where we use triangle sequences for approximation .      consider a unit cube in the three - dimensional euclidean space @xmath2 whose vertices are given by @xmath3 , @xmath4 , @xmath5 , @xmath6 , @xmath7 , and @xmath8 , where @xmath9 ( fig.[fig1](a ) ) . and draw lines @xmath10 , @xmath11 and @xmath12 .",
    "then , each of three upper faces is divided into two slant - triangle - tiles .",
    "for example , @xmath13 is divided into two slant - tiles @xmath14 and @xmath15 .",
    "firstly , by piling up these unit cubes in the direction from @xmath8 to @xmath3 , we obtain `` peaks and valleys '' with a `` drawing '' on it .",
    "the drawing is uniquely determined by its peaks and divides the surface into a collection of slant - triangle - tile sequences .",
    "for example , the drawing of fig.[fig1](b ) is determined by two peaks , left @xmath16 and right @xmath17 .",
    "and we denote the drawing by @xmath1 .",
    "secondly , by the projection onto the hypersurface @xmath18 , we obtain a division of @xmath0 into a collection of flat - triangle - tile sequences .",
    "for example , the gray slant - tile sequence is projected onto the gray flat - tile sequence on @xmath0 in fig.[fig1](b ) .",
    "we write @xmath19 $ ] for slant - tile @xmath20 and @xmath21\\rvert}$ ] for the corresponding flat - tile .",
    "for example , @xmath22 $ ] for @xmath14 .",
    "note that there are three types of slant - tiles over a flat - tile ( fig.[fig1](c ) ) .",
    "we shall see in the appendix that `` peaks and valleys '' specifies a `` discrete vector field '' of flat - tiles on @xmath0 .",
    "finally we obtain a binary code of the shape of a flat - tile sequence by arranging up ( @xmath23 ) and down ( @xmath24 ) of the corresponding slant - tile sequence .",
    "for example , the gray flat - tile sequence in fig.[fig1](b ) is encoded into @xmath25 sequence @xmath26 in general we need more than one drawing to encode a flat - tile sequence because of overlaps among its peaks ( fig.[fig2](c ) ) .",
    "each drawing encodes a part of the flat - tile sequence and its code is obtained by patching those `` local codes '' together .      now let s encode the two - dimensional object shown in fig.[fig2](a ) .",
    "first of all we should give a flat - tile sequence which approximates the object ( fig.[fig2](b ) ) .",
    "then , using encoding table table [ tab1](a ) , we obtain a binary code of the object ( fig.[fig2](c ) ) .",
    "the process is going on as follows :    1 .",
    "choose an initial value , say @xmath23 , 2 .",
    "by the second row of the table , the second value is @xmath23 , 3 .   by the fourth row of the table ,",
    "the third value is @xmath24 ,  .    as the result",
    "we obtain @xmath25 sequence @xmath27     and @xmath28 which encode approximation ( b ) . ]",
    "fig.[fig2](c ) shows the corresponding slant - tile sequence . in this case",
    "we need two drawings because of the overlap between two peaks @xmath29 and @xmath30 .",
    "the left drawing @xmath31 corresponds to the first sixteen tiles and the right drawing @xmath28 to the last five tiles .      to decode @xmath25 sequences in @xmath32 we use decoding table table [ tab1](b )",
    "for example , decoding process of @xmath25 sequence ( [ seq : basic ] ) is going on as follows :    1 .",
    "choose an initial flat - tile , say @xmath33\\rvert}$ ] , 2 .   by the fourth row of the table ,",
    "the second flat - tile is @xmath34\\rvert}$ ] , 3 .   by the third row of the table ,",
    "the third flat - tile is @xmath35\\rvert}$ ] ,  .    as the result",
    "we obtain the flat - tile sequence shown in fig.[fig2](b ) .",
    "if we consider unit cubes in the four - dimensional euclidean space @xmath36 , we shall obtain a three - dimensional drawing made up of slant-``tetrahedron''-tiles . and we approximate a three - dimensional object by a tetrahedron sequence ( fig.[fighiu](c ) ) , where    1 .",
    "each tetrahedron consists of four short edges and two long edges , where the ratio of the length is @xmath37 and 2 .",
    "successive tetrahedrons are connected via a long edge and have the rotational freedom around the edge .       and its projection on @xmath0 .",
    "( b ) : slant - tile sequence and flat - tile sequence defined by three peaks @xmath38 , @xmath39 , and @xmath40 .",
    "( c ) : slant - tiles over a flat - tile on @xmath0 .",
    "( in the figures arrows indicate the direction of `` down '' . ) ]    consider a unit cube in the four - dimensional euclidean space @xmath36 whose vertices are given by @xmath3 , @xmath4 , @xmath5 , @xmath6 , @xmath41 , @xmath7 , and @xmath42 , where @xmath43 ( fig.[fig3](a ) ) . and divide each of four upper three - dimensional faces into six slant - tetrahedron - tiles .",
    "for example , the face defined by @xmath3 , @xmath4 , @xmath6 , and @xmath5 is divided into six slant - tiles @xmath44 , @xmath45 , @xmath46 , @xmath47 , @xmath48 , and @xmath49 .",
    "firstly , by piling up these unit cubes in the direction from @xmath42 to @xmath3 , we obtain four - dimensional `` peaks and valleys '' with a three - dimensional `` drawing '' on it .",
    "the drawing is uniquely determined by its peaks and divides the three - dimensional surface into a collection of slant - tetrahedron - tile sequences .",
    "for example , the drawing of fig.[fig3](b ) is determined by three peaks @xmath50 , @xmath51 and @xmath52 .",
    "and we denote the drawing by @xmath53 .",
    "secondly , by the projection onto the hypersurface @xmath54 , we obtain a division of @xmath0 into a collection of flat - tetrahedron - tile sequences .",
    "for example , fig.[fig3](b ) shows a slant - tile sequence and its projection onto @xmath0 .",
    "we write @xmath55 $ ] for slant - tile @xmath56 and @xmath57\\rvert}$ ] for the corresponding flat - tile .",
    "note that there are four types of slant - tiles over a flat - tile ( fig.[fig3](c ) ) .",
    "for example , @xmath58\\rvert}={\\lvertx[yzw]\\rvert}={\\lvertxy[zwx]\\rvert}={\\lvertxyz[wxy]\\rvert}$ ] .",
    "finally we obtain a binary code of the shape of a flat - tile sequence by arranging up ( @xmath23 ) and down ( @xmath24 ) of the corresponding slant - tile sequence .",
    "for example , the flat - tile sequence shown in fig.[fig3](b ) is encoded into @xmath25 sequence @xmath59      to encode three - dimensional objects we use encoding table table [ tab2](a ) .",
    "for example , encoding of the flat - tile sequence shown in fig.[fig3](b ) proceeds as follows :    1 .",
    "choose an initial value , say @xmath23 , 2 .",
    "by the second row of the table , the second value is @xmath23 , 3 .   by the second row of the table ,",
    "the third value is @xmath23 ,  .    as the result",
    "we obtain @xmath25 sequence ( [ seq : three - dim ] ) .      to decode @xmath25 sequences in @xmath2 we use decoding table table [ tab2](b ) . for example",
    ", decoding of @xmath25 sequence ( [ seq : three - dim ] ) proceeds as follows :    1 .",
    "choose an initial flat - tile , say @xmath60\\rvert}$ ] , 2 .   by the fourth row of the table ,",
    "the second flat - tile is @xmath61\\rvert}$ ] , 3 .   by the fourth row of the table ,",
    "the third flat - tile is @xmath62\\rvert}$ ] ,  .    as the result",
    "we obtain the flat - tile sequence shown in fig.[fig3](b ) .",
    "here let s consider the double helix shown in fig.[fighelix](a ) which has @xmath63 tiles per turn .",
    "dna has an average of @xmath64 ( type a ) or @xmath65 ( type b ) nucleotide pairs per turn ( @xcite ) . ) to encode the shape of the helix , it is enough to consider the flat - tile sequence shown in fig.[fighelix](b ) .",
    "using table [ tab2](a ) with initial slant - tile @xmath66 $ ] , we obtain two drawings of fig.[fighelix](c ) .",
    "@xmath67 ( left ) encodes the first ten tiles .",
    "and @xmath68 ( right ) encodes the last ten tiles . by patching these local codes together , we obtain the @xmath25 code of helix fig.[fighelix](b ) : @xmath69    , @xmath70 , and @xmath71 . ]",
    "next let s consider the three - dimensional structure of 2hiu chain a ( fig.[fighiu ] ) .",
    "using table [ tab2](a ) with initial slant - tile @xmath72 $ ] , we obtain eight drawings : @xmath73$,\\ } \\\\ & \\text{-\\ \\ } cone^\\ast \\ { 1/(xy ) , 1/(x^2w ) , 1/(x^2z)\\ } \\quad & \\text{for $ [ 7,18]$,\\ } \\\\ & \\text{-\\ \\ } cone^\\ast \\ { 1/(xy ) , 1/(x^3zw ) , 1/(x^3z^2 ) , w/(xyz)\\ } \\quad & \\text{for $ [ 13,29]$ , } \\\\ & \\text{-\\ \\ } cone^\\ast",
    "\\ { 1/(xyz^2 ) , 1/(x^3zw ) , 1/(x^3z^2 ) , xw / y^2\\ } \\quad & \\text{for $ [ 16,42]$ , }",
    "\\\\ & \\text{-\\ \\ } cone^\\ast \\ { xw^2/(yz ) , w / y , xw / y^2\\ } \\quad & \\text{for $ [ 36,45]$ , } \\\\ & \\text{-\\ \\ } cone^\\ast \\ { xw^2/(yz ) , 1/y^2 , x / y^3\\ } \\quad & \\text{for $ [ 40,51]$ , } \\\\ & \\text{-\\ \\ } cone^\\ast \\ { x/(y^4z ) , 1/y^2 , x/(y^4w)\\ } \\quad & \\text{for $ [ 45,57]$ , } \\\\ & \\text{-\\ \\ } cone^\\ast \\ { x/(y^4z ) , 1/(y^4w^2)\\ } \\quad & \\text{for $ [ 52,63]$.}\\end{aligned}\\ ] ] ( @xmath74 $ ] denotes the part of the sequence from the @xmath75-th tile to the @xmath76-th tile . )    by patching these local codes together , we obtain the @xmath25 code of the three - dimensional structure of the protein ( fig.[fighiu])(c ) ) : @xmath77 table [ tab3 ] shows the correspondence between the @xmath25 code and the amino - acid sequence of the protein .",
    "( also see fig.[fighiu](c ) and ( d ) . )",
    "let @xmath80 be the collection of all integer points of the @xmath79-dimensional euclidean space @xmath81 : @xmath82 and consider the collection @xmath83 of all `` slant '' @xmath79-hedrons defined by @xmath84 : @xmath85               \\",
    "|\\    a \\in l_n{}^\\ast , \\   \\rho \\in \\mathit{s_n } \\right\\},\\ ] ] where @xmath86 is the @xmath79-th symmetric group and @xmath87 $ ] denotes the convex hull @xmath88 $ ] of @xmath79 points @xmath89 @xmath90 in @xmath81 : @xmath91:=   \\left\\ { \\prod_{0 \\le i < n }   a_i^{\\lambda_i}\\ |\\     0\\le \\lambda_i \\in \\mathbb{r } \\text { s.t . }",
    "\\sum_{0 \\le i < n } \\lambda_i=1    \\right\\}.\\ ] ]    the collection @xmath92 of all `` flat '' @xmath79-hedrons is defined as the quotient of @xmath83 by `` shift operator '' @xmath93 on @xmath83 ( fig.[figapp](a ) ) .",
    "that is , @xmath94 , where @xmath95\\right )   : = ax_{\\rho(1)}\\left[x_{\\rho(2 ) } \\cdots x_{\\rho(n)}\\right].\\ ] ]      `` tangent bundle '' @xmath96 $ ] on @xmath92 is defined as the quotient of @xmath83 by @xmath97 : @xmath98:= s/ \\sigma^n , \\\\   &",
    "\\pi : t[b ] \\to b , \\   \\pi\\left(s \\mod \\sigma^n\\right):= s \\mod \\sigma.\\end{aligned}\\ ] ]    we identify @xmath96 $ ] with @xmath99 ( @xmath100 ) by one - to - one correspondence @xmath101 where the `` gradient '' @xmath102 of @xmath103 is defined by @xmath104 : = x_{\\rho(1 ) } \\cdots x_{\\rho(n-1)}=e/ x_{\\rho(n)}.\\ ] ]    let @xmath105 \\in s$ ]",
    ". then @xmath106 $ ] specifies `` local trajectory '' @xmath107 at @xmath108 ( fig.[figapp](b ) ) , where @xmath109 , \\\\ & s_d:=ax_{\\rho(1)}\\left[x_{\\rho(2 ) } \\cdots x_{\\rho(n-1 ) } x_{\\rho(1)}\\right].\\end{aligned}\\ ] ] and we shall obtain a flow on @xmath92 by patching these local trajectories together .",
    "let @xmath110 , where @xmath111 that is , @xmath112 is the collection of all `` cones '' defined by @xmath84 .",
    "and we denote the `` boundary surfaces '' of @xmath113 by @xmath114 : @xmath115 \\in s \\ | \\",
    "\\text{$l_w(a_i ) = 0 $ for all $ i$ } \\right\\},\\ ] ] where @xmath116 for @xmath117 .        let @xmath113 .",
    "then @xmath114 specifies a unique @xmath79-hedron @xmath118 over each @xmath119 , which we denote by @xmath120 : @xmath121 and @xmath122 induces vector field @xmath123 over @xmath92 : @xmath124    let @xmath125 \\ } \\subset b$ ] be a trajectory defined by vector field @xmath123 .",
    "and we define the `` second derivative '' @xmath126)$ ] of @xmath122 along @xmath127\\}$ ] as a @xmath128-valued function by @xmath129):=   \\begin{cases }                     d^2 \\gamma_w(t[i ] )   \\quad   \\text{if   $ x_w(t[i+1])=x_w(t[i])$ } , \\\\                     - d^2 \\gamma_w(t[i ] )   \\quad   \\text{else } ,                     \\end{cases}\\ ] ] where @xmath130 and @xmath131 ( fig.[figapp](c ) ) ."
  ],
  "abstract_text": [
    "<S> in nature the three - dimensional structure of a protein is encoded in the corresponding gene . in this paper </S>",
    "<S> we describe a new method for encoding the three - dimensional structure of a protein into a binary sequence . </S>",
    "<S> the feature of the method is the correspondence between protein - folding and `` integration '' . </S>",
    "<S> a protein is approximated by a folded tetrahedron sequence . and </S>",
    "<S> the binary code of a protein is obtained as the `` second derivative '' of the shape of the folded tetrahedron sequence . with this method at hand </S>",
    "<S> , we can extract static structural information of a protein from its gene . </S>",
    "<S> and we can describe the distribution of three - dimensional structures of proteins without any subjective hierarchical classification . </S>"
  ]
}