{
  "article_text": [
    "graphs are simple data structures that help us model a wide variety of problems .",
    "they are broadly used , being key elements in our understanding of science ( genetics , proteomics , computer networks or social sciences ) ; and of industries , like network operators , travel , online dating , marketing companies or hospitals .",
    "these organisations store more data in the hope to better understand their own processes and achieve their goals .",
    "graphs promise ease to model complicated scenarios and applicability in a variety of application domains .",
    "consequently , a wide variety of large - scale graph processing systems has arisen to make sense of data @xcite .",
    "in addition to handling large volumes of data , organisations need to make faster decisions ( e.g. early detection of fraud in online auctions @xcite ; online recommendations or click stream processing @xcite ) .",
    "unfortunately , this task has become increasingly difficult given that we produce information much faster than ever before .",
    "there are few graph analysis systems that can deal with large - scale graphs in near real - time .    to make matter worse graphs are changing entities ( like the real - world systems they represent ) @xcite .",
    "as we will see below , only a handful of systems are capable of responding in near real - time at scale , while adapting to changes in : 1 ) the information stored in edges and nodes ( e.g. people s age , router load ) ; 2 ) the graph topology ( e.g. adding new users / edges or considering user churn ) @xcite ; 3 ) the type of graph processing or load required by end users .",
    "for example , banks must be able to detect frauds as soon as possible @xcite , and analyse call records in telecom networks @xcite and news article recommendations in social networks must be delivered within minutes @xcite .",
    "coping with many changes in large - scale graphs while preserving near real - time processing times is a challenging task .",
    "a broad perspective on the recent advances is missing in current literature review efforts .",
    "in this paper we review the main strategies to create large - scale near real - time graph processing systems and provide readers with the most salient examples ( section [ sec : gralsota ] ) . in section [ sec : dynamic ] , we present this need for dynamic adaptation and the types of runtime changes that can affect a graph processing system .",
    "adaptation comes at a price : additional overhead and performance degradation .",
    "the techniques used by some systems to prevent this performance decay are presented in section [ sec : dynsys ] . in section",
    "[ sec : discussion ] we discuss the main features and current trends in large - scale near real - time graph processing .",
    "finally , section [ sec : conclusion ] wraps up the main conclusions of this analysis .",
    "the most straightforward way of processing a graph is loading the graph in the memory of a single machine .",
    "large graphs can be handled in a standard desktop machine by accessing graph data from the hard drive .",
    "the main memory only holds the graph elements needed for a computation .",
    "this approach is followed by graph databases like neo4j @xcite , see top - left quadrant in table [ table : classification ] .",
    "disk access times are slow ; with smarter ( not random ) access to disk data resulting in significant performance improvements processing large - scale graphs @xcite .",
    "however , disk - based systems are not the best option for large - scale scenarios because throughput is limited by the lack of parallelism and near real - time processing can not be achieved due to large disk seek latencies .",
    "there are several single machine systems that keep the whole graph in memory to help deliver timely responses and avoid unnecessary usage of the disk ( used just to load and persist data ) @xcite . however , these systems do not scale to large graphs , being unable to host the whole graph in memory .",
    "the graph must , therefore , be partitioned into separate subgraphs to be stored and processed in different machines .",
    "graph - oriented distributed databases like titan , flockdb or allegrodb @xcite store massive amounts of information on disks to enable a variety of graph queries ( see top - right cell in table [ table : classification ] ) .",
    "these systems can be adapted to support graph dynamism ( adapting the topology of time dependent graphs , see @xcite , for instance ) .",
    "unfortunately , disk - based access to data makes computation too slow for near real - time large - scale graph processing .    from the discussion above it seems that we need",
    "horizontally scalable distributed systems and in - memory processing to cope with near real - time large scale graphs .",
    "the need for fast processing at scale has led to the creation of a myriad of distributed systems that load the whole graph in memory @xcite .    [ cols=\"<,^,^\",options=\"header \" , ]     [ table : adddel ]    cortes et al .",
    "@xcite explain the importance of graph topology changes and present a sliding window criteria for adding and removing elements based on an incoming stream of information .",
    "they show that new nodes ( nodes seen in week @xmath0 that were not there in week @xmath1 ) are added and old ones ( nodes not seen at week @xmath0 that were seen at week @xmath1 ) deleted at a similar rate of approximately 1 % per week . while nodes in their user network were very stable , edges seemed to be more volatile having higher replacement rates .",
    "cheng et al .",
    "@xcite provide a configurable regular interval in which they buffer new tweets before applying changes to the graph .",
    "window size is important for timeliness ( availability of the changes for processing ) .",
    "cheng et al . and vaquero et al .",
    "@xcite were the only ones to provide some figures on timeliness related to the number of new nodes to be added .",
    "more detailed studies are needed to draw any definitive conclusion .",
    "many models of how real world graphs expand report a preferential attachment model @xcite and apply to real - world phenomena ( e.g. death of myocytes during cardiac infarction would imply preferential deletion of `` nodes '' in the vicinity of the infarcted area @xcite ) .",
    "table 6 summarises the main techniques ( buffering and preferential addition / attrition ) observed in dynamic graphs .",
    "more experimental analysis on dynamic graphs are required to determine and understand the processes ruling topology changes . in general , dealing with highly dynamic graphs or graphs where bursts of changes occur ( see @xcite ) calls for continuous optimisation that can rapidly absorb changes , while sparse optimisation runs may be enough for slowly changing graphs ( @xcite ) .",
    "another important aspect from the systems perspective is how to efficiently apply these changes to the topology .",
    "cheng et al .",
    "study the effects of adding more of these change - applying entities ( parallelising changes ) and reveal how throughput can be increased by parallelisation .",
    "[ [ can - we - have - it - all ] ] can we have it all ?",
    "+ + + + + + + + + + + + + + + + + + +    the analysis of the available art has revealed how complicated it is to achieve near real - time responses at scale ; much more so in a dynamic context . distributed systems classically reach near real - time capabilities at large scales by relaxing the accuracy of the obtained results .",
    "the idea is that one can live with less precise responses as long as they are delivered fast ( see @xcite or blinkdb @xcite as recent examples ) .    indeed ,",
    "graph processing systems such as trinity @xcite also perform some tradeoffs between accuracy and real - time / scale : the authors claim that they `` perform graph computation locally on each machine and then aggregate their answers to derive the answer for the entire graph , or can we use probabilistic inference to derive the answer for the entire graph from the answer on a single machine '' .",
    "these three elements ( large - scale , accuracy and real - time ) can be visualised as a triangle ( see figure [ fig : bar ] ) .",
    "most systems strive to contain all three vertices of the triangle , but graph analysis systems , like other distributed systems , typically cope with just two of the variables in the triangle .",
    "[ [ trends - in - system - architectures ] ] trends in system architectures + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    gpu - enabled graph analytics systems vastly boost the available compute power @xcite .",
    "it is just recently that they have reached a very mature status for large - scale graph analytics @xcite .",
    "while these architectures are very likely to gain more relevance in the short term , they do not solve some of the main problems for near real - time responses we found in our analysis : distribution and disk access make systems incur in higher than acceptable latencies",
    ".    malewicz et al .",
    "@xcite report how the message passing rate and the volume of information exchanged between worker nodes causes link congestion .",
    "available ram is also a limiting factor .",
    "larger memory banks would allow for larger partitions and reduced overhead .",
    "this is worsened in very dynamic scenarios where vertices need to be moved or replicated .",
    "industrial efforts follow common practise in the research community , like keeping everything in memory , and advocate for more centralised solutions where a single machine hosts all the data / processing in massive memory banks ( getting rid of network congestion and disk seeks ) .",
    "the gradual introduction of solid state drives in the mass market also highlights this trend . as prize and latency of memory decrease and its capacity increases we are likely to see how most systems go for single machine in - memory designs ( see table [ table : classification ] ) .    in this setting of hundreds of cores using shared memory in a single machine , new techniques for",
    "concurrency control and cache coherence may take over current distributed system designs .",
    "these centralised massive memory banks face the challenge of failure tolerance management , where properly implemented distributed systems excel .",
    "more research is granted in this space too .",
    "parallel random access machine ( pram ) systems keep in globally - shared memory and there is implicit communication by updating memory .",
    "some pram systems have specialised architectures for graph processing , like cray xmt2 , bluegene or sgi uv2 .",
    "cray xmt2 , for instance , tolerates high memory latencies using massive hardware multithreading .",
    "fine - grained synchronization constructs are supported through full - empty bits and atomic fetch - and - add instructions .",
    "each processor within a cray xmt contains 128 hardware streams that may block temporarily while waiting for a long - latency instruction to return .",
    "the processor will execute one instruction per cycle from hardware streams that have instructions ready to execute .",
    "this survey has focused on distributed memory systems where data is distributed to local memory partitions and communication takes place by explicitly sending messages across them for the following reasons : 1 ) they run on commodity machines and scale by adding more machines ( synchronization , deadlock , hot - spotting , and others can be barriers to obtaining linear scalability in shared - memory systems @xcite ) ; 2 ) they can be ported to a cloud , reducing operational costs ( at 10 cents per kwh , this implies $ 7 million per year to keep lights on ) ; 3 ) implementing parallel graph algorithms in large , shared memory machines , such as the cray xmt , can be challenging for programmers @xcite .",
    "most graph processing algorithms force systems to do lots of random access to memory causing many cache and tlb misses .",
    "same way an organised access to disk enabled systems in a single machine to scale @xcite , these techniques could be applied to make a smarter use of the memory hierarchy of the machines in the cluster .",
    "[ [ algorithms - for - near - real - time - large - scale - dynamic - graph - processing ] ] algorithms for near real - time large - scale dynamic graph processing + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    algorithms should ideally be independent of the system executing them . the actual implementation of these algorithms is also determined by the architecture of the underlying system . in this section we analyse current support for dynamic graphs from a more algorithmic perspective .",
    "faloutsos and kang @xcite describe algorithms for mining large - scale graphs .",
    "the algorithms they deal with are general and cover diverse cases including structural analysis , eigensolver , storage / indexing , and compression .",
    "unfortunately , no attention is paid to real - time processing and the effect of runtime optimisation on the accuracy of the obtained results .",
    "the idea of building dynamic graph algorithms that could update the result of the computation in near real - time is not at all new .",
    "cooke and halsey @xcite pioneered this area back in the 60s .",
    "more recently klein et al .",
    "@xcite continued this work by enabling dynamism for shortest path graph algorithms .",
    "henzinger and king @xcite presented a set of fully dynamic algorithms that maintain connectivity , bipartiteness , and approximate minimum spanning trees in poly - logarithmic time per edge insertion or deletion .    following this line of work ,",
    "most of the algorithms that support dynamic changes are focused on introducing a temporal dimension on classic topological metrics of the graph like time - respecting paths , connectivity , distances / latencies , network efficiency , centrality , patterns / motifs , etc .",
    "( see @xcite for recent review ) .",
    "let us give a few recent examples for illustration purposes only .",
    "nicosia et al . @xcite",
    "re - define the concept of connectedness to consider nodes that are connected by a path that is never fully there , but can be built in different time stages .",
    "similar work has arisen from the field of delay - tolerant networks were paths are re - defined as `` journeys '' @xcite .",
    "journeys can be seen as a particular kind of path whose edges do not necessarily follow one another instantly , but instead induces waiting times at intermediate nodes . as a consequence",
    "all the concepts built on top of paths take a temporal dimension themselves @xcite .",
    "this idea has also been applied to detecting overlapping time dependent communities , creation of clusters or analysis of the dynamism of disconnected components @xcite .",
    "some work has been done beyond topological measurements : information - theoretical adaptive algorithms .",
    "@xcite use network entropy for detecting temporal uncertainty in communication networks .",
    "also , some studies focus on measuring vertex / edge dynamism and hiw changes occur ( see @xcite ) .",
    "more work is needed to make dynamic other algorithms for graph analysis that are not purely focused on the topology of the graph , but also on the data associated to each element in the graph .",
    "this is a challenging task .",
    "when the information of the graph or the topology of the graph itself changes before the computation has finished , the algorithm may return inaccurate results",
    ". this may be reasonable in some cases ( slight variations in page rank get eventually fixed in an iterative processing of the graph ) , but it may have catastrophic consequences for some other applications ( e.g. a graph representing the stock exchange in a high frequency trading setting ) .",
    "the algorithmic examples given so far are based on incremental approaches to update the topology of the graph .",
    "approximation strategies to graph analysis have also been around for a while and new solutions keep appearing @xcite .",
    "the use of these approximations will most likely simplify the design of far more scalable and nearer real time systems ( as hypothesised by the bar conjecture above ) .",
    "even when the body of work in graph algorithms that can adapt to changes in the graph at runtime is still small , the relevance of this type of problems will likely bring more research and new solutions to this area in the near future .",
    "[ [ other - aspects ] ] other aspects + + + + + + + + + + + + +    while this short survey has tried to focus on the large scale near real - time dynamic graphs , there is a myriad of other features that should be considered in the system . while it is beyond the scope of this survey to have an exhaustive list of them , we felt obliged to mention a few important issues that will gain relevance in the short term .",
    "most of the graph processing systems above support a single algorithm to be run at one time by a single user ( multi - tenancy is not easily supported at this scale ) .",
    "some recent attemps try to let several users share the same data by creating `` job - specific '' vertices @xcite .",
    "unfortunately , all thevertices execute the same algorithm .",
    "more generic software platforms that support the concurrent execution of several algorithms graph processing are needed .",
    "a second aspect of the usability is not just multitenancy , but also the ease of use ( complexity ) of the programming model .",
    "many of the systems above are based on google s pregel .",
    "still most business analysts like to think of problems in terms of sql queries on a set of entities in their data warehouse .",
    "also , scientists tend to analyse their data using popular statistical packages like spss or r or mathematical libraries like mathematica or matlab .",
    "ideally one would like to treat graphs as a first class data structure ( no need to traverse it from the analyst s perspective ) that has a set of associated functions ( e.g. _ pagerank(graph ) _ ) .",
    "therefore , it seems that functional @xcite , data flow @xcite and domain specific @xcite graph analysis languages are being created to ease our graph processing tasks .    beyond the user s view of these graphs , running these very large graphs implies having very large underlying systems .",
    "data centre operators are also concerned about the actual utilisation of these machines ( are users querying all the time or just in bursts ) and the cost of running such systems @xcite .    comparing the actual scale or energy consumption of these systems is tricky and subject to many factors .",
    "benchmarks are therefore needed to support a better standardisation and comparison of features for graph processing systems . in this",
    "regard , graph500 and greengraph500 offer a starting point to measure and compare these aspects @xcite .",
    "we have reviewed the main graph analysis systems that can cope with billions of vertices / edges and revealed how there are just a few of them capable of processing near real - time queries when the topology of the graph changes .",
    "streaming of the graph is the most commonly employed procedure for real - time processing .",
    "dynamic repartitioning or replication and load balancing are the two main techniques used to adapt to changes in the topology of the graph .",
    "while repartitioning supports highly dynamic graphs and long - lived queries of a few users over a big portion of the graph , replication techniques serve best when there are short - lived queries of millions of users on small areas of the graph .",
    "more work is needed to understand the rates of graph changes and how these affect real world systems and algorithms .",
    "the survey led us to the bar conjecture , which indicates that systems can have only two of the following features at the same time : big data , adaptability and real - time responses .",
    "the authors would like to thank alessandra sala , luis rodero - merino , dionysios logothetis and claudio martella for fruitful discussions and proofreading previous versions of this manuscript .",
    "r.  ananthanarayanan , v.  basker , s.  das , a.  gupta , h.  jiang , t.  qiu , a.  reznichenko , d.  ryabkov , m.  singh , and s.  venkataraman .",
    "photon : fault - tolerant and scalable joining of continuous data streams . in sigmod 13 .",
    "a.  mandal and s.  c. pal . an empirical study and analysis of the dynamic load balancing techniques used in parallel computing systems .",
    "proceedings of international conference on computational science , 2010 .",
    "n.  santoro , w.  quattrociocchi , p.  flocchini , a.  casteigts , and f.  amblard .",
    "time - varying graphs and social network analysis : temporal indicators and metrics . in _",
    "3rd aisb social networks and multiagent systems symposium_.                    r.  timo , k.  blackmore , and l.  hanlen . on entropy measures for dynamic network topologies : limits to manet . in hanlen , editor ,",
    "australian communication theory workshop ( ausctw ) _ , pages 8994 , birsbane / australia , february 2005 ."
  ],
  "abstract_text": [
    "<S> graphs are widespread data structures used to model a wide variety of problems . </S>",
    "<S> the sheer amount of data to be processed has prompted the creation of a myriad of systems that help us cope with massive scale graphs . </S>",
    "<S> the pressure to deliver fast responses to queries on the graph is higher than ever before , as it is demanded by many applications ( e.g. online recommendations , auctions , terrorism protection , etc . ) . </S>",
    "<S> in addition , graphs change continuously ( so do the real world entities that typically represent ) . </S>",
    "<S> systems must be ready for both : near real - time and dynamic masive graphs . </S>",
    "<S> we survey systems taking their scalability , real - time potential and capability to support dynamic changes to the graph as driving guidelines . </S>",
    "<S> the main techniques and limitations are distilled and categorised . </S>",
    "<S> the algorithms run on top of graph systems are not ready for prime time dynamism either . </S>",
    "<S> therefore , a short overview on dynamic graph algorithms has also been included . </S>"
  ]
}