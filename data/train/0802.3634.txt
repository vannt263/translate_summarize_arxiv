{
  "article_text": [
    "complex networks can be used to model a wide range of physical and technological systems .",
    "one of the most interesting dynamical problems on network is transport , which can give us some insight into the transport of information in technology based communication networks like the internet @xcite , the world wide web @xcite,@xcite or phone call networks @xcite .",
    "here we use the term _ transport _ to mean transport of particles , which are packets in a network .",
    "thus our model falls within the network layer of the osi reference model and the algorithms described in section @xmath0 are routing algorithms that belong to the network layer of the osi reference model .",
    "of particular interest is the phenomenon of load in a network , as a function of the rate of packet creation r , which has been investigated for models of communication networks @xcite,@xcite,@xcite and in real networks @xcite .",
    "typically the problem of transport is investigated using either a random walk algorithm @xcite , or the shortest path algorithm used by most internet protocols .",
    "the difficulty with these approaches is that random walk algorithm is very inefficient for transport in technology based communication networks and shortest path algorithm requires , for its implementation , information about all connections in network . in this paper",
    "we focus on algorithms that use local information about the topology , along with information about the flux of packets between neighbors , the link load and the time taken to deliver packets .",
    "we propose four algorithms that use some or all of these properties to deliver packets in a network .    in section 2",
    "we describe the algorithm that we use to perform numerical simulations of our models . in section 3",
    "we discuss the algorithms that packets use to find their destinations and in section 4 we show our results . in section 5",
    "we summarise our results .",
    "a program was written to simulate packet transport on a network that does not depend on the size of the network or its topology . at the beginning of the program",
    "an external file with the adjacency matrix of the network is read in .",
    "we focus on the internet and consequently we treat nodes in our network as if they were routers .",
    "the connections between the routers have the same capacity for all networks .",
    "such a model can not only be used to model internet packet transport but also for a range of transport networks in which the nodes have local routing information .    *",
    "each node * :    * generates a new packet with probability @xmath1 and with a randomly chosen destination , where @xmath2 is a fixed rate for the whole network , and @xmath3 is the number of nodes in network .",
    "* stores packets in a queue , which has maximum length is @xmath4 .",
    "packets are despatched from the queue in a first in first out ( fifo ) order .",
    "* sends packets to its neighbours .    *",
    "each node has information about * :    * the address of all its neighbours ( they have unique indices @xmath5 ) .",
    "* the degree of its neighbours - @xmath6 . * flow through all its neighbours , which is measured by * * the number of packets posted down each edge to neighbour @xmath7 - the link load - @xmath8 . * * the number of packets sends through neighbour @xmath7 , which have reached their destination - @xmath9 . * * the sum of the delivery times of all the packets sent through neighbour @xmath7 that have reached their destination - @xmath10 . * * the time interval since an edge last transmitted a packet to neighbour @xmath7 and current time step - @xmath11 .",
    "the index @xmath7 enumerates each neighbour of node @xmath12 and each node keeps all the statistics about its neighbours .",
    "quantities @xmath8 , @xmath9 , @xmath10 and @xmath11 describe node @xmath7 from the perspective of node @xmath12 .",
    "each node is described by its neighbours and all properties can be different for all neighbours that describe node @xmath7 .",
    "the initialization part of the program sets up the network topology , the nodes and all the tables used by them . inside the main loop",
    "a time step is incremented , and within that a loop over all nodes calculates and updates the statistics .",
    "the loop over all nodes includes three basics routines , which are run for each node ; generating new packets , checking its queue for packets with its address and sending packets to its neighbours .",
    "each node generates a packet with a randomly chosen destination with probability @xmath13 .",
    "the node checks its own queue for packets addressed to itself .",
    "when it finds one of these it deletes it from the queue and updates the statistics @xmath9 and @xmath10 for all the nodes on the packet s path .",
    "each packet keeps track of its own path .",
    "the node sends packets to its neighbours by taking the first packet in its queue and checking the packet destination address .",
    "if the packet is addressed to one of its neighbour , the node will send it to the neighbour .",
    "if it is not , the node will use the _ algorithm _ to find where to send the packet . during this posting step",
    "the @xmath8 property is updated .",
    "when node @xmath12 sends packets to node @xmath7 , the number of sent packets @xmath8 increases . after this loop over all the nodes is completed the quantities @xmath11 and the mean delivery time of packets sent down each edge @xmath14 are updated for all nodes .",
    "the most important element in transport is the rule that determines the direction in which a packet is sent .",
    "a transport network without a rule is a random walk network .",
    "we call this rule the _ algorithm_. it describes how nodes deal with packets and should help packets to get to their destination .",
    "not all algorithms help packets to reach destinations , poor algorithms can easily be worse than the random walk algorithm .",
    "all algorithms considered in this paper work withdeterministic rules .",
    "the _ shortest time_(st ) algorithm is our basic algorithm that uses information about the mean delivery time @xmath15 and the time interval between the last packet that came to node @xmath7 and actual time step .",
    "the st algorithm finds the minimum value @xmath16_{i=1\\ldots n}\\ ] ] in order to determine which node to send the packet to .",
    "the idea of this algorithm is to try and find the minimum travel time for each packet between source and destination . at the start of the simulation",
    "@xmath17 is equal to @xmath18 for all neighbours . because the update of @xmath15 only occurs when a packet arrives at its destination",
    ", it can take a number of time steps before @xmath19 becomes non - zero .",
    "the inclusion of the reciprocal of @xmath20 in @xmath17 ensures that the algorithm does not get into a state where it never sends a packet down certain links which have a large mean delivery time .",
    "this state is particularly likely to occur at the start of the simulation .",
    "the inclusion of the reciprocal of @xmath11 in @xmath17 also prevents overcrowding when a node finds a node which is clearly better than all its other neighbours .",
    "hence , because of the inclusion of @xmath11 more nodes take part in the transport and in this way the large node do not become overcrowded .",
    "because the algorithm with @xmath15 is looking for minimum delivery time we call it the _ shortest time _ ( st ) algorithm . to start this algorithm , and the std algorithm , which we will introduce",
    "shortly , we use the random walk algorithm .",
    "we only use the deterministic algorithms at a node when all the values of @xmath17 of its neighbours are greater than 0 . without this initial random walk procedure both the st and the std algorithms",
    "would jam almost immediately .",
    "the _ shortest time and degree _",
    "( std ) algorithm is a modification of the st algorithm .",
    "it uses information about the local topology , the degree .",
    "this helps packets avoid the nodes with the largest degree , which are mostly overcrowded .",
    "the idea of incorporating information about the degree of nodes in the transport algorithm was discussed in @xcite and @xcite . in these papers models",
    "were introduced in which nodes were selected at a rate proportional to a power of their degree . it was found that the most efficient algorithm was one in which the the probability of selecting a node of degree @xmath12 was proportional to @xmath21 @xcite and @xcite .",
    "the std algorithm is defined by @xmath22_{i=1\\ldots n}\\ ] ] where @xmath6 is a degree of node @xmath7 and @xmath23 .",
    "this last assumption allows the algorithm to avoid dead - end nodes . a node with degree @xmath24 can only receive a packet that is addressed to itself",
    "the std algorithm uses both temporal properties and also information about the local connectivity . for transport in a scale - free network the most important nodes are those with the largest degree . but because their neighbours send these nodes a large number of packets the queues at these nodes can become overcrowded .",
    "information about the degree helps the algorithm to avoid these nodes , but it does not mean than they are not used .    the _ connections and degree _",
    "( cd ) algorithm and the _ connections , degree and shortest time _ ( cdt ) algorithm use information about the link load @xmath8 . because of this the random walk starting procedure used in the st and std algorithms is not required for the cd and cdt algorithms .",
    "the cd algorithm uses only information about the link load and the degree .",
    "the cd algorithm is defined by @xmath25_{i=1\\ldots n}\\ ] ] where @xmath8 is a number of packets that node @xmath12 sends to node @xmath7 .    for this algorithm",
    "@xmath17 equals @xmath18 at the start , but @xmath8 is updated almost immediately .",
    "when node @xmath12 sends a packet then it automatically increases the value of @xmath8 .",
    "there is no need to wait for information from the destination about the delivery time like in the st and std algorithms . in this way cd algorithm improves very quickly and the random walk is not needed .",
    "the link load , @xmath8 , quantity helps the algorithm to deliver packets and ensures that almost all nodes take part in the transport .",
    "the degree quantity helps to prevent the largest nodes from becoming overcrowded . in this algorithm",
    "there is no property that can be optimised , unlike in the st and std algorithms where the delivery time is optimised .",
    "the cdt algorithm is intermediate between the cd and the st algorithms .",
    "it optimises the delivery time and does not need the random the walk starting procedure because it includes a dependance on the link load , @xmath8 . the dependence on degree prevents large nodes becoming overcrowded . for the cdt algorithm ,",
    "the starting procedure is the same as for the cd algorithm except that we set @xmath26 equal to @xmath27 at the start to avoid @xmath18 value .",
    "this means that we do not need to start off with a random walk algorithm as in the st and std algorithms .",
    "the cdt algorithm is defined by @xmath28_{i=1\\ldots n}\\qquad\\mbox{with } k(i)>1.\\ ] ]    we use the learning property to describe behavior of an algorithm in the beginning . by learning we mean the proportion of links whose value of @xmath17 has changed since @xmath29 .",
    "the cd and cdt algorithms learn the most quickly .",
    "after @xmath30 time steps they tried @xmath31 of links .",
    "this is because the link load , @xmath8 , changes when a packet is sent down it whereas @xmath15 , used by the st and std algorithms , only changes when a packet sent down it gets to its destination .",
    "that is way the st and std algorithms need the random walk starting procedure . with this procedure after @xmath30 time steps @xmath32 of links were tried . for the st algorithm without the random",
    "walk starting procedure it was @xmath33 .",
    "the speed of learning is important because when a network learns slowly , the network only uses a small proportion of its links for transport over a long period of time , which means that the network is easily jammed when a region of the network becomes overcrowded .",
    "we consider transport on the barabasi and albert model of a network @xcite with @xmath34 nodes and @xmath35 .",
    "the parameter @xmath36 is the number of links of a new node that is added to network .",
    "when @xmath35 the network includes loops and has relative small number of connections . our research show",
    "that this network jams for lower values of the posting rate than networks with @xmath37 or @xmath38 and higher . in this work",
    "we use a posting rate of @xmath39 .",
    "this means that each node creates a packet with probability @xmath13 .",
    "the number of time steps for all our simulations is @xmath40 .",
    "we present results for the std , cd and cdt algorithms .",
    "we do not consider the st algorithm any further because it is nt stable and always jams .    in figure [ loadprop]a",
    "we show the load in the network , the number of packets that are still in the network .",
    "all three algorithms are stable .",
    "we compared the level of load by finding the mean value of the number of packets in the network . the best algorithm with smallest mean",
    "value is the std algorithm . for the cd and cdt the values are almost the same .",
    "the number of packets in network can be treated as a noise in the network .",
    "measuring the power spectrum of this noise shows that there are correlations in the number of packets in network . for all our algorithms the power spectrum ( fig.[loadprop]b )",
    "is the same and the slope has @xmath41 .",
    "it means that the noise in network is like @xmath42 ; uncorrelated noise with short - range correlations only .",
    "we measured the distribution of the time interval @xmath11 , the time that nodes wait for packets , and the results are shown in figure [ tiddt ] .",
    "this is an important quantity for the sdt and cdt algorithms as without the @xmath11 term these networks easily jam . for the std algorithm",
    "the distribution of @xmath11 has a tail and on a double logarithmic scale has a slope @xmath43 .",
    "the cut - off comes from the finite time of the simulation .",
    "the first part of the distribution for all algorithms is flat . for the cdt algorithm",
    "the function falls faster than for the std .",
    "this is connected with the inclusion of the link load in the cdt algorithm , which means that more links are used and long time intervals of @xmath11 do not occur as frequently as in the std algorithm .",
    "the cd algorithm does not use @xmath11 but we measured it to compare it to the other models .    the distribution of packet delivery time ( fig.[timeprop]a ) is similar for all the algorithms .",
    "however the distribution shows that the number of packets delivered in a short time is different for each algorithm for the std algorithm packets are delivered quickly more frequently than for the cd and cdt algorithms .",
    "the std algorithm finds the paths with the shortest delivery time because , whilest the cd and cdt algorithms are distributing the transport across the network , because their algorithms use the link load @xmath8 , the std algorithm is looking for shortest delivery times .",
    "the distribution for the cdt algorithm is intermediate between the std and cd algorithms because the cdt algorithm depends on the link load @xmath8 and the shortest time statistics .",
    "the time series for the overall mean delivery time ( fig.[timeprop]b ) show that algorithms involving the statistics for @xmath44 do not learn .",
    "the mean delivery time for cd and cdt is almost the same .",
    "the algorithms reach a stable mean delivery time and do not optimise it . obviously for the cd algorithm",
    "no optimisation is possible because there is no quantity that could be optimized .",
    "the result for the std and cdt algorithms arise through two effects .",
    "the first is the inclusion of @xmath11 in @xmath17 that send packets to rarely used links that often are not the best ones for transport . on the other hand without @xmath11 all the algorithms with the mean time",
    "property start jamming .",
    "secondly is the inclusion of the degree in @xmath17 , which means that algorithms prefer to send packets to nodes with a small degree which makes the delivery time long .",
    "the algorithms std , cd and cdt work well ; for the same network and for the same value of @xmath2 the random walk algorithm jams , and these algorithms do not .",
    "one might expect that including the mean delivery time of packets sent to node @xmath7 , @xmath44 , in @xmath17 would optimize the delivery time .",
    "this does not happen because of the dependence of @xmath17 on the delivery time , link load and degree .",
    "but on the other hand without dependence on these terms the algorithms can not work properly .",
    "this the case in the st algorithm , which works better than the random walk algorithm , but much worse than the other algorithms . when the shortest time property is used in the scale - free network it needs to be balanced be degree quantity .",
    "the existence of nodes with large degrees causes traffic congestion for the shortest time algorithm . using an algorithm which depends on local degree information but without dependence on the mean time ( cd algorithm ) works correctly but an algorithm without local degree dependence and with the mean time dependence ( st algorithm ) jams easily .",
    "the biggest problem in implementing the std and cdt algorithms is in finding accurate value for the edge dependent properties .",
    "a node needs a lot of connections through one link to find it proper time statistics .",
    "because the mean delivery time is very long , it takes a lot of time to set up the edges dependent properties for all nodes .",
    "in particular , the algorithms that depend on the time @xmath11 and the degree @xmath6 do not jam but the cost is in learning and the mean delivery time .",
    "the inclusion of the @xmath11 quantity in @xmath17 , avoids jamming but destroys the learning behavior promoted by the inclusion of the mean time property in @xmath17 .",
    "the degree property helps the algorithm to avoid nodes with large degree , and hence helps prevent overcrowding , but it also results in long delivery times .",
    "our results show that in scale free networks we can not avoid using nodes with large degree .    in future work , it may be possible to develop an algorithm that uses information on the mean local delivery time to find the optimal path for transport",
    ". one possible extension of this work would be to use an algorithm that allows a number of packets to be sent to a node in one time step , depending on the degree of the node .",
    "this is realistic because normally routers can use all their outputs almost in a parallel way .",
    "the biggest problem in networks is that nodes with a very high degree can receive as many packets as they have inputs in one time step , but they usually send only one packet .",
    "when we allow them to use all their outputs in one time step then jamming will disappear .",
    "11 m. faloutsos , p. faloutsos and c. faloutsos , ( 1999 ) comp .",
    "comm . rev .",
    "* 29 * , 251 .",
    "r. albert , h. jeong and a .-",
    "barabasi , ( 1999 ) nature * 401 * , 130 .",
    "b. huberman and l. adamic , ( 1999 ) nature * 401 * , 131 .",
    "l. a. adamic , r. m. lukose , a. r. puniyani and b. a. huberman , phys . rev .",
    "e ( 2001 ) * 64 * , 046135",
    ". b. tadic , s. thurner and g. j. rodgers , ( 2004 ) phys .",
    "e * 69 * , 036102 .",
    "a. arenas , a. diaz - guilera and r. guimera , ( 2001 ) phys . rev .",
    "lett . * 86 * , 3196 .",
    "r. sole and s. valverde , ( 2001 ) physica a * 289 * , 595 .",
    "v. jacobson , in proceedings of sigcomm 88 ( acm , standford , ca , 1988 ) .",
    "g. yan , t. zhuo , b. hu , z .- q .",
    "fu and b .- h .",
    "wang , ( 2005 ) cond - mat/0505366 .",
    "c .- y . yin , b .- h .",
    "wang , w .- x .",
    "wang , t. zhou and h .- j .",
    "yang , ( 2005 ) cond - mat/0506204 .",
    "r. albert and a .-",
    "barabasi , ( 2002 ) rev .",
    "phys . * 74 * , 47 ."
  ],
  "abstract_text": [
    "<S> * * we introduce four algorithms for packet transport in complex networks . </S>",
    "<S> these algorithms use deterministic rules which depend , in different ways , on the degree of the node , the number of packets posted down each edge , the mean delivery time of packets sent down each edge to each destination and the time since an edge last transmitted a packet . on scale - free networks </S>",
    "<S> all our algorithms are considerably more efficient and can handle a larger load than the random walk algorithm . </S>",
    "<S> we consider in detail various attributes of our algorithms , for instance we show that an algorithm that bases its decisions on the mean delivery time jams unless it incorporates information about the degree of the destination node . </S>"
  ]
}