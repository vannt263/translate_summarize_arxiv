{
  "article_text": [
    "the considerable , ongoing interest in quantum algorithms has been sparked by the possibility of practical solutions to problems that can not be efficiently solved by classical computers .",
    "in other words , the opportunity to achieve exponential speedups over classical techniques by harnessing entanglement between densely encoded states in a quantum computer .",
    "quantum walks have been the focus of several recent studies ( see for example , @xcite ) , with particular interest in possible algorithmic applications of the walks @xcite .",
    "a few such algorithms have already been developed , perhaps the most notable being the ` glued trees ' algorithm developed by childs _",
    "et al_. @xcite , in which quantum walks are shown to traverse a family of graphs exponentially faster than any possible classical algorithm , given a certain quantum oracle .",
    "in this paper we discuss the possibility of a quantum walk algorithm providing such an exponential speedup over possible classical algorithms without the use of an oracle .",
    "firstly , we present a formal construction of quantum walks , and show that they can be implemented classically in a time that scales polynomially with the size of the state space .",
    "we then consider an efficient quantum implementation of quantum walks to be one in which the resources required scales logarithmically with the size of the state space , and present examples of graphs for which such an implementation is possible .",
    "quantum walks can be thought of as the quantum analogue of simple classical random walks .",
    "they are a unitary process , and can be naturally implemented by quantum systems .",
    "the discrete - time walk consists of a unitary operator @xmath0 , where @xmath1 and @xmath2 are termed the shifting and coin operators respectively , acting on the state space .",
    "consider a discrete - time quantum walk along a general undirected graph @xmath3 , with vertex set @xmath4 , and edge set @xmath5 , being unordered pairs connecting the vertices .",
    "the quantum walk acts on an extended position space , in which each node @xmath6 with valency @xmath7 is split into @xmath7 subnodes .",
    "this space then consists of all states @xmath8 , where @xmath9 and @xmath10 .",
    "the shifting operator acts on this extended position space , with its action defined by : @xmath11 for some @xmath12 such that @xmath13 .",
    "the coin operator comprises a group of unitary operators , or a set of coins , each of which independently mix the probability amplitudes associated with the group of sub - nodes of a given node .",
    "for example , given a vertex @xmath6 with valency @xmath7 , the coin can be represented by a unitary @xmath14 matrix .",
    "this definition is necessarily vague , allowing significant freedom in the construction of shifting and coin operators , depending on the desired properties .",
    "if , for example , a specific labeling of the vertices of the graph was not known , the shifting and coin operators may be required to act symmetrically with respect to any arbitrary labeling .",
    "this means that the coin matrix must be symmetric , and the shifting can take place only along edges , with @xmath15 equaling the identity operator .",
    "consider an undirected graph , having order @xmath16 and @xmath17 edges , with no self loops or multiple edges between pairs of vertices .",
    "then the above definition yields a state space with @xmath18 states .",
    "the shifting operator @xmath1 can then be represented by a @xmath19 permutation matrix , and if we group the states derived from a common vertex , the coin operator @xmath2 can be represented by a @xmath19 block diagonal matrix .",
    "since @xmath17 has an upper bound of @xmath20 , it follows that a step of the walk , @xmath21 , can be simulated efficiently on a classical computer , in a time that scales with @xmath22 .",
    "in fact , the shifting operator , being a permutation of the @xmath18 states , can be implemented more efficiently with an upper bound scaling of @xmath23 @xcite , as can the coin operator , containing @xmath16 blocks of size at most @xmath16 .",
    "hence , quantum walks on graphs can be classically simulated in polynomially time , scaling with graph size .",
    "so for even the possibility of exponential speedups , quantum implementations must scale logarithmically with graph size .",
    "many of the currently proposed ` natural ' physical implementations of quantum walks @xcite can not achieve this , as the walks evolve on nodes that are implemented by physical states , on which operations are directly performed . hence the resource requirements grow polynomially with the state space . in order to achieve an exponential gain , the nodes need to foremost be encoded by a string of entangled states , such as qubits in a quantum computer , making use of memory that grows exponentially with the number of qubits .",
    "in addition , the number of elementary gates required to perform the walk needs also grow logarithmically with the size of the state space .",
    "so far , this has only been found to be possible for structures with a high degree of symmetry - where symmetry in this case refers to the ability to characterize the structure by a small number of parameters , increasing at most logarithmically with the number of nodes .",
    "note that this may not necessarily imply that the structure has geometric or combinatorial symmetry in the typical sense of the terms .",
    "for instance , sparse graphs with efficiently computable neighbors fall into this category , and as a consequence of @xcite have been shown to allow efficient implementations of quantum walks . here sparse graphs of order @xmath16 are defined as in @xcite to have degree bounded by o(polylog(@xmath16 ) ) , with the further condition that the neighbors of each vertex are efficiently computable . possessing efficiently computable neighbors implies the existence of an o(log(@xmath16 ) ) sized function characterizing the graph , such that the information contained in the o(@xmath16 ) edges can be compressed to size o(log(@xmath16 ) ) .",
    "this compression seems to require the presence of some kind of structure to the system , for example , the graph can not contain more than o(log(@xmath16 ) ) completely random edges .",
    "an interesting open question is whether sparse graphs can have no automorphisms apart from the identity .",
    "in this section , we give examples of a few such graphs for which relatively simple quantum circuits can be designed to efficiently implement quantum walks along them .",
    "firstly , we will look at a simple cycle . to implement a quantum walk along it",
    ", we first note that each node has two adjacent edges , and hence two subnodes . proceeding systematically around the cycle",
    ", we assign each node a bit - string value in lexicographic order , such that adjacent nodes are given adjacent bit - strings . for a cycle of order @xmath24",
    ", @xmath16 qubits are required to encode the nodes , and an additional qubit to encode the subnodes .",
    "the coin operation can be implemented by a single hadamard gate acting on the subnode qubit , and the shifting operation by a cyclic permutation of the node states , in which each state ( or bit - string ) is mapped to an adjacent state ( either higher or lower depending on the value of the subnode qubit ) .",
    "this permutation can be achieved via ` increment ' and ` decrement ' gates , shown in figure [ incdec ] , made up of generalized cnot gates .",
    "these gates produce cyclic permutations ( in either direction ) of the node states .",
    "the resulting shifting operator is @xmath25 . here",
    "the tensor space description separates the node and subnode states .",
    "so to implement a walk along a cycle of size @xmath24 we require @xmath26 qubits .",
    "@xmath27 additional ancillary qubits may also be required for the generalized cnot gates involved in the cyclic permutations , depending on the specific implementation used .",
    "the number of elementary gates required is limited to @xmath27 , hence both memory and resource requirements scale logarithmically with graph size .",
    "an example of the circuit for a cycle of size 16 is given in figure [ circuit_cycle ] .",
    "note that although this specific implementation requires a cycle of order @xmath24 , only trivial alterations are required to efficiently implement cycles of any size .",
    "for instance , an equivalent circuit for a cycle of size 25 is given in figure [ cycle_25 ] .",
    "increment and decrement gates on @xmath16 qubits , producing cyclic permutations in the @xmath24 bit - string states.,width=226 ]     quantum circuit implementing a quantum walk along a 16-length cycle.,width=302 ]     quantum circuit implementing a quantum walk along a 25-length cycle.,width=340 ]    a similar method can be used to efficiently implement a walk along a @xmath24 dimensional grid or hypercube , by partitioning the labels of the nodes into @xmath16 distinct sets , corresponding to each coordinate .",
    "an example for the 2d ( @xmath28 ) hypercycle is given in figure [ circuit_grid ] .",
    "as an extension , a quantum circuit implementing a walk along a twisted toroidal supergraph as shown in figure [ toroid ] is given in figure [ circuit_toroid ] .",
    "this structure was employed by menicucci _",
    "et al _ @xcite to set up qc - universal toroidal lattice cluster states .",
    "quantum circuit implementing a quantum walk along a 2d hypercycle.,width=340 ]     ` twisted ' toroidal lattice graph .",
    "each node in the representation on the left contains four sub - nodes of the graph , as indicated on the right.,title=\"fig:\",width=170 ]   ` twisted ' toroidal lattice graph .",
    "each node in the representation on the left contains four sub - nodes of the graph , as indicated on the right.,title=\"fig:\",width=132 ]     quantum circuit implementing a quantum walk along the twisted toroidal of figure [ toroid ] , of dimension @xmath29 .",
    ", width=359 ]    other highly symmetric structures , such as the complete @xmath30 graph , a complete @xmath24 graph with self loops and a binary tree also allow efficient implementations of quantum walks with a qubit based quantum circuit . walking along the complete @xmath24 graph , using the hadamard coin operator ,",
    "can be naturally implemented using only single qubit gates and cnot gates ( @xmath16 hadamard gates and @xmath31 cnot gates ) .",
    "the circuit for a complete @xmath24 graph ( @xmath32 ) , in which each node has a self loop , is shown in figure [ circuit_complete ] , and is fairly intuitive . alternatively ,",
    "if the grover coin operator is used , @xmath33 extra single qubit gates , one extra @xmath34 gate ( which is a generalized cnot gate with @xmath35 control bits and one target bit ) , and @xmath16 hadamard gates are required , as shown in figure [ complete_2_grover ] . here",
    "@xmath36 is a permutation of the hadamard operator .",
    "note that even using the grover coin @xmath37 , the coin operator is still mostly separable , requiring only single qubit operators apart from the one @xmath34 gate .",
    "quantum circuit implementing a quantum walk along a complete 16-graph.,width=340 ]     quantum circuit implementing a quantum walk along a complete 8-graph , using a grover coin.,width=321 ]    walks along highly symmetric variants of the complete graph ( as opposed to sparse graphs , such as those considered previously ) can also be efficiently implemented .",
    "for instance if we consider the complete graph on @xmath24 vertices , together with an arbitrary labeling of the nodes from 1 to @xmath24 .",
    "removing edges between nodes whose labels differ by a multiple of 2 leads to a regular graph of degree @xmath38 , shown in figure [ complete_variant ] for @xmath39 .",
    "this is then a complete bipartite graph , and a walk along such a graph can be efficiently implemented by the circuit of figure [ complete_variant ] , an even simpler circuit than for the complete @xmath24 graph .",
    "quantum circuit implementing a quantum walk along a complete 16-graph with every second edge removed.,width=264 ]    given the results of childs _ et al_. @xcite and cleve _",
    "et al_. @xcite , in which quantum walks are shown to traverse a family of ` glued trees ' exponentially faster than any possible classical algorithm , relative to a quantum oracle , we decided to look into quantum walks along glued trees in the non - oracular setting .",
    "note that the algorithm presented in @xcite employs continuous - time quantum walks , while in @xcite it was shown to also be implementable by discrete - time quantum walks .",
    "both require the use of a quantum oracle . in the non - oracular case ,",
    "efficient implementation of a quantum walk along the glued trees is not possible given random interconnections between the central levels ( as in figure [ glued_tree](a ) ) , since this would be equivalent to performing a random permutation of @xmath24 states in time @xmath40 .",
    "instead we are restricted to considering regular interconnections , such as those of figure [ glued_tree](b ) . here",
    "` regular ' interconnections are those that can be completely characterized by @xmath40 parameters .",
    "the algorithm of @xcite requires a symmetric coin operator - hence we use the grover coin , defined on @xmath41 dimensions by @xmath42 , the only purely real symmetric coin @xcite .",
    "we also restrict the shifting operator to @xmath43 , where @xmath44 is the identity operator . in this case",
    "an efficient quantum circuit can be constructed , for example that of figure [ circuit_tree ] , for tree depth 4 ( with 62 nodes ) . here",
    "the @xmath45 gate represents a three dimensional grover coin operator acting on two qubits ( mixing three of the four states , while the fourth is not accessed ) . for a tree depth of @xmath46 ,",
    "the circuit requires @xmath47 qubits , together with @xmath48 elementary gates .",
    "binary glued trees with random ( a ) and regular ( b ) interconnections between the central levels.,width=264 ]     quantum circuit implementing a quantum walk along a glued tree with a regular labeling of the nodes.,width=340 ]    related to the problem of which structures quantum walks can be efficiently implemented on is the question of which permutations of a set of states can be efficiently implemented .",
    "given a set of @xmath16 qubits encoding @xmath24 quantum states , we wish to know which permutations of these states can be implemented using @xmath49 elementary gate operations .",
    "cyclic rotations of the states ( relative to the lexicographic order of their bit - strings ) can be implemented efficiently , as shown above .",
    "in fact any rotation of the states can be performed efficiently , by first decomposing it into a series of rotations of size @xmath50 , for some integer @xmath51 .",
    "for instance , an incremental rotation of 7 states applied to the 32 states represented by 5 qubits is explicitly shown in figure [ rotation ] .",
    "generalized control - not operations can also be used to transpose pairs of states differing in label by a single qubit .",
    "similarly , any two states differing by @xmath51 qubits can be efficiently transposed using @xmath52 generalized cnot operations .",
    "for example , given 16 states encoded by 4 qubits , the lexicographically 1st and 10th states ( represented by @xmath53 and @xmath54 respectively ) can be transposed via 3 controlled swap operations , as shown in figure [ transpose ] . using this method any transposition of states on @xmath16 qubits",
    "can be performed using a maximum of @xmath55 generalized cnot gates , or @xmath56 @xmath57 gates .",
    "this may not be the optimal way to implement a particular transposition , however it does scale logarithmically with the number of states .     a rotation of 7 states , split into the composite powers of 2 , being three rotations of size 4 , 2 and 1 states respectively.,width=302 ]     a transposition of the @xmath53 and @xmath54 states.,width=113 ]    using similar methods , other permutations with essentially binary characters can also be efficiently implemented , such as swapping every second state , or performing some given internal permutation to each consecutive group of 8 states ( or @xmath50 states , for some fixed integer @xmath51 ) .",
    "note that permutations which may not seem to have a binary character can be transformed to efficiently implementable permutations .",
    "for instance , if we wished to split the set of states into groups of 6 , and swap every 4th element , we could achieve this by expanding the state space - embedding each group of 6 into a group of 8 , with the last two states remaining unused , ` empty states ' .    for simplicity ,",
    "given an implementation on qubits , the preceding examples have all been essentially binary in nature .",
    "efficient implementations using qubits are equally possible on other , non - binary structures , such as ternary trees or complete @xmath58 graphs . for example , implementing the complete @xmath58 graph ( with self - loops ) using a qubit circuit requires many more 2-qubits gates , given the need to approximate a 9d hadamard or grover coin operator over 16 states , without mixing into the other 7 states . as would be expected , a more natural implementation is possible if qutrits are used instead . in this case , the coin operator is again nearly separable if using the grover coin operator , and completely separable if using a qutrit equivalent of the hadamard operator . here",
    "we take a qutrit equivalent of the hadamard operator to be an operator @xmath59 acting on @xmath16 qutrits , satisfying : @xmath60 @xmath61 qutrit circuits implementing a quantum walk along the complete-@xmath58 graph using the @xmath62 coin operator or the grover coin operator can then be constructed as in figure [ complete_3 ] .",
    "nevertheless , the use of a more natural base still provides a polynomial efficiency gain .",
    "qutrit - based quantum circuit implementing a quantum walk along a complete @xmath58-graph.,width=302 ]",
    "we have presented here a set of highly symmetric graphs all amenable to exact , efficient quantum circuits implementing quantum walks along them .",
    "the examples considered here are quite simple , and more complex variations can still be efficiently implemented such as composites of highly symmetric graphs , symmetric graphs with a small number of ` imperfections ' , as well as graphs possessing a certain bounded level of complexity .",
    "quantum walks have been used to search for marked vertices along highly symmetric graphs , including the hypercube , complete graphs and complete multipartite graphs @xcite .",
    "these studies have dealt with the computational complexity of such searches relative to an oracle - looking at the number of steps of a quantum walk required to find a marked vertex , with individual steps of the walk itself largely left to the oracle . in such cases searching using quantum walks",
    "has yielded a quadratic speedup over classical search algorithms .    in a practical implementation of such a search algorithm , the computations performed by the oracle ( that is , performing a step of the walk in which the coin operator differs for marked and unmarked nodes ) would of course affect the running time .",
    "the work presented here can be used to efficiently implement such an oracle - using o(log(@xmath16 ) ) elementary gates for a graph of order @xmath16 - given a highly symmetric graph such as those considered in @xcite and in this paper ."
  ],
  "abstract_text": [
    "<S> quantum walks , being the quantum analogue of classical random walks , are expected to provide a fruitful source of quantum algorithms . </S>",
    "<S> a few such algorithms have already been developed , including the ` glued trees ' algorithm , which provides an exponential speedup over classical methods , relative to a particular quantum oracle . here </S>",
    "<S> , we discuss the possibility of a quantum walk algorithm yielding such an exponential speedup over possible classical algorithms , without the use of an oracle . </S>",
    "<S> we provide examples of some highly symmetric graphs on which efficient quantum circuits implementing quantum walks can be constructed , and discuss potential applications to quantum search for marked vertices along these graphs . </S>"
  ]
}