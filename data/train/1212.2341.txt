{
  "article_text": [
    "in this chapter we present some basics principles of common web architecture and in which javascriptapplications are deployed .",
    "the web is based on the client - server architectural pattern :    * the client role is played by a web browser with limited resources and technologies  often html , css and javascript .",
    "its usual main responsibilities are user interface and interaction as well as data validation . *",
    "the server role is fulfilled by a program implemented in a wide variety of technologies , with a controlled set of resources .",
    "its usual responsibilities are to serve pages to web - browsers , enforce business rules , and persist and validate data .",
    "the client and server processes communicate though the http protocol @xcite : the client makes http requests and , for each , the server answers with an http response , as illustrated in .",
    "when the response arrives , the web browser normally discards the current content and loads the new one , causing a full _ refresh _ of the user interface . since http is a stateless protocol ",
    "requests are independent from each others  several mechanisms were built to maintain state between a client and a server ( _ e.g. , _ cookies , see ) .    as computers running _",
    "web browsers _ become more and more powerful , there is a tendency to move responsibilities from the server to the client ( _ e.g. , _ page creation and business rules enforcement ) .",
    "these new responsibilites are mostly implemented in javascriptand javascript - based languages .",
    ", width=377 ]      a web page is composed of several html widgets including frames and iframes , which insert an existing web page into the current one .",
    "_ frames _ and _ iframes _ are considered web pages by themselves , therefore having the ability to contain other ones , following the composite design pattern @xcite .    while loading a web page , a web browser generates an internal structure of javascriptobjects .",
    "each web page is represented as a object referencing its parent and children through the and properties .",
    "each web page also references a document object , which is the root of the _ dom _  document object model  representation of the web page tags .",
    ", width=377 ]    [ [ web - browser - javascriptimplementation - differences ] ] web browser javascriptimplementation differences    as each web browser has its own implementation of the _ dom _ and javascript , one of the hardest tasks of javascriptdevelopment is to build browser - agnostic applications .",
    "there exist several libraries to reduce the difficulty of this task such as _ _ extjs__,__jquery _ _ and _",
    "scriptaculous_.      a cookie is a string that is exchanged between the client and the server @xcite .",
    "cookies are normally stored on the client machines to let web application state survive after the client process is stopped ( _ i.e.,_the browser or the browsing tab is closed ) .",
    "cookies are key - value pairs associated with the equals character = and separated from each other with a semi colon ( _ e.g. , _ ,",
    "_ `` name = john;expires=2013 - 01 - 15t21:47:38z '' _ ) .",
    "the expiration date tells the browser when to delete it .",
    "a cookie can contain other properties like and , that tells the browser in which requests it should be exchanged , which by default are the current domain and path .",
    "cookies can be changed from javascriptcode accessing the property of the current object .",
    "cookies can contain sensible data ( _ e.g.,_emails and passwords ) and must be studied for a security analysis .",
    "_ ajax _ stands for asynchronous javascriptand xml : it is a mechanism to send xmlhttprequest requests to a web server .",
    "xmlhttprequest is used to retrieve data from a url without reloading the complete web page @xcite .",
    "the request is sent by the client through a javascriptapi and handled asynchronously .",
    "formerly , ajax was used to exchange information in xml format , but xmlhttprequest can be used to transfer any kind of data . nowadays , one of the most used formats is _ json _ , which stands for javascriptobject notation .",
    "illustrated in , the `` test.json '' service is requested to the server via ajax , and a function is used to determine how the response will be handled at the time it arrives .    ....",
    "$ .ajax ( {      url : \" http://www.webcompany.com/api/test.json \" , } ) .done (      // function is evaluated   after the json service responds : function ( ) {      // adds a ' class ' attribute to current html node      $ ( this).addclass(\"done \" ) ; } ) ; ....    ajax is becoming more and more popular as the client machines become more powerful and can perform heavier processing tasks .",
    "in this chapter we present key aspects of ecmascript3 and 5 to provide a common context .",
    "this document has been written in the context of the resilience project .",
    "this study is focused on the semantic aspects of javascriptin the context of securing untrusted third party javascriptcode in a web browser . in this context ,",
    "one of the key aspects is to forbid the access to the object ( the global object of the web browser frame , see [ sec : window ] ) .",
    "accessing the object of the frame would lead to possible page - data leak ( is the root of the dom of the page ) , sensitive information leak ( from the object private information in cookies can be accessed ) , and even user actions sniffing ( having access to dom elements means that one can add listeners to dom events ) . in the next deliverable we will describe the state of the art of javascriptsandboxing .",
    "one of the different aspects in javascriptsandboxing is to securely forbid access to potentially sensitive objects , including , the root object .      javascriptis a loosely - typed dynamic programming language where everything is an object .",
    "each object contains a set of properties ( also named slots ) that represent data ( other objects ) and operations ( function objects ) .",
    "these properties are always public and can be accessed and modified using the dot or squared - bracket notation :    .... // we create a new empty object var person = new object ( ) ;    // write a property person.age = 5 ; person['age ' ] = 5 ; // equivalent    //",
    "read a property and store it into some variable var theage = person.age ; var theage = person['age ' ] ; //",
    "equivalent ....    in this script we create a new object that we assign to the variable .",
    "then the expression adds a property to the newly created object and stores the value 5 into it .",
    "note that objects are hash tables .",
    "the expression thus creates an object with one property named with value 0 .",
    "because of this , properties can be accessed and set using both the and notations .",
    "ecmascript s property lookup is done at runtime ( see ) and never throws errors .",
    "example [ lst : runtime_property ] defines an object containing two properties and with values 10 and 5 respectively .",
    "the function is then defined .",
    "this function takes as argument a property s name and returns the corresponding property s value of the object . in the last line of example [ lst : runtime_property ]",
    ", the function is called twice to access the values of the properties and .",
    ".... var object = { a : 10 , b : 5 } ; var get = function(property ) {    return object[property ] } ; get(\"a \" ) + get(\"b \" ) ; //",
    "answers 15 ....    if a property does not exist , the object is returned , as shown in .",
    ".... var object = { a : 1 , b : 2 } ; object.c // answers ' undefined ' ....    example [ lst : updating_properties ] shows how to update , create and delete properties .",
    "the first instruction sets 10 to the property of object .",
    "therefore the expression returns an object with the property with 10 as a value .",
    "the second instruction shows that if a property does not exist then it will be created automatically .",
    "hence , returns an object with two properties and .",
    "finally , the third instruction removes the property of the object using the keyword .    .... // updating a property { a : 0}[a ] = 10 ; //",
    "answers { a : 10 }    // creating a new property using the same syntax { a : 0}[b ] = 10 ; // answers { a : 0 , b : 10 }    // deleting a property delete { a : 0 , b : 5}[b ] ; // answers { a : 0 } ....      functions are the behavioral units of javascript .",
    "a function performs a side effect ( _ e.g.,_alters an object ) and/or returns a value .",
    "functions can be defined via a function declaration or a function expression .",
    "a function declaration defines a function at compile time , as seen in .",
    "a function expression creates a new function at runtime .",
    "function expressions are also called anonymous functions , since they are not associated with any name .",
    "the creation of a function from a function expression is illustrated in .",
    ".... function sum(a , b ) {      return a + b ; } ....    .... var sum = function ( a , b ) {      return a + b ; } ....    a function can be called by passing arguments between parenthesis as shown in .    ....",
    "sum(1 , 2 ) ; somefunctionwithnoarguments ( ) ; ....    functions are important because they constitute the basic building block of code execution in a javascriptprogram .",
    "the built - in and functions are two methods of the object .",
    "these functions are thus called on other functions and execute them .",
    "these functions both take the receiver of the function to execute as first parameter and arguments of the function to execute as the other parameters . when using these methods , the pseudo - variable in the function to execute",
    "is bound to the first parameter of and .",
    "receives the arguments of the function to execute as comma - separated values whereas receives an array ( see ) .",
    ".... function someglobalfunction(value1 , value2 ) {      this.value1 = value1 ;      this.value2 = value2 ; }    // the regular invocation binds ' this ' to the global object as //",
    "we will see later on    someglobalfunction(5,6 ) ; window.value1        //",
    "answers 5    var someobject = new object ( ) ; someglobalfunction.call(someobject , 5 , 6 ) ; someobject.value1 // answers 5    someglobalfunction.apply(someobject , [ 5 , 6 ] ) ; //",
    "equivalent ....    [ [ turning - text - into - function - at - runtime . ] ] turning text into function at runtime .    using the built - in function , it is possible to evaluate a string at runtime .",
    "makes static analysis of programs difficult @xcite : at runtime a string can be composed and evaluated without restriction in the global environment and scope .",
    ".... var a = 2 ; eval('a++ ' ) ; a // answers 3 ....      in javascript , methods are just functions attached to an object as can be seen in .",
    ".... var person = new object ( ) ; person.name = ' john ' ; person.surname = ' foo ' ; person.getfullname = function ( ) {      return this.name + ' ' + this.surname ; } ....    in a method , a developer can refer to the owner object using the keyword .",
    "we will see later that has a different semantics than in java or smalltalk since depending on how the function is accessed can be bound to the object owner of the property or any other object ( see ) .",
    "_ functions _ in javascript , as first class citizens , can be passed as parameters to functions and returned from functions . _ higher - order functions _",
    "are most commonly seen when implementing filtering , selection and sorting algorithms to make them independent of their content . in , we define a new property inherited by all arrays that is a function to filter elements of the receiver array according to a given criteria .",
    "then , we define a function that will play the role of the criteria and an array of numbers .",
    "the last statement calls the new property function on with the criteria .    ....",
    "array.prototype.filter = function",
    "( criteria ) {      newarray = new array ( ) ;      for ( var i = 0 ; i < this.length ; i++ ) {          // we keep the elements of the array that respects          // a certain criteria          if ( criteria(this[i ] ) )              newarray.push(this[i ] ) ;      }      return newarray ; }    var iseven = function(elem ) { return ( elem % 2 ) = = 0 ; } ; var array = new array(9 , 58 , 42 , 12 , 1001 , 1000 ) ; array.filter(iseven ) ; // answers [ 58 , 42 , 12 , 1000 ] ....      _ constructors _ are used to structure object creation in ecmascript3@xcite .",
    "a constructor is a standard function object whose name is by convention capitalized to indicate to the programmer that the function must not be directly called .",
    "the keyword is used to invoke a function as a constructor .",
    "using the keyword instantiates an object and executes the constructor on that object , binding the pseudo - variable to the newly created object",
    ".    .... var animal = function ( name ) {      this.name = name ;      this.describe = function ( ) {          return this.name + ' , an animal ' ;      } } ;    //invoking the constructor with the ' new ' keyword var animal = new animal(\"pilou \" ) ;    animal.name ;        // ' pilou ' animal.describe ( )   // ' pilou , an animal ' ....      there are three properties that are key to the execution of any javascriptapplication :    * is a property that contains the reference to the function that was used to create the object using the keyword . in , the object has a property containing a reference to the constructor that was used to create .",
    "* is a property that is used by constructors to initialize the inheritance chain ( modeled by the property ) of objects they create .",
    "this property only makes sense on function objects that are used as constructors . in",
    ", the constructor has a property containing a reference to an object ( with an property ) that will be the parent of all objects creates .",
    "* is a property that contains a reference to an object ( the parent ) where properties will be looked up when not present in the receiver .",
    "when an object is created , the value of its property is initialized to the property of the constructor function used to create this object . in",
    ", the object has as parent the object whose only property is : this object is the prototype of the constructor .",
    "_ attention : _ this property is not always visible from a developer s point of view depending on the javascriptimplementation : you should avoid manipulating if you want to write portable code .",
    "demonstrates that the property is initialized to the constructor s property value .",
    "first , a function is defined and assigned to a new variable .",
    "the prototype of new functions is always an empty object . in this case , we add the property to this empty object .",
    "all objects created from the function will then inherit the property .",
    "the variable is then set to a new .",
    "the rest of the statements describe the relationship between and its constructor",
    ".    .... var animal = function ( name ) { this.name = name ; } ; animal.prototype.isananimal = true ;    var animal = new animal(\"pilou \" ) ;    animal.constructor = = animal ; //",
    "answers true animal.__proto _ _ = = animal.constructor.prototype ;    //",
    "answers true animal.isananimal ;   //",
    "answers true animal.isananimal ; //",
    "answers false , ' isananimal ' is not a property of                      //",
    "the constructor but of objects it constructs ....",
    "in the following we present the subtle aspects of javascriptthat have an impact on security such as unbound variables @xcite .",
    "all objects inside a web browser frame share the same environment without any restriction .",
    "this is a security problem because it allows dynamic modifications of the program and full access to all the objects defined inside this environment .    to declare a variable local in a particular scope such as a function scope",
    "the keyword is needed , as illustrated in . here",
    "the variable is local and only accessible from within the body of the function .    ....",
    "function myfunction(arg ) {      var mylocalvariable = arg + 5 ;      return mylocalvariable ; } ....    not using causes our program to create a global variable ( see ) @xcite .    ....",
    "( function ( ) { globalvar = ' setting global ' ; } ) ( )    window.globalvar // answers ' setting global ' ....    in this example , becomes a property of the global environment .",
    "the object represents the of the current html document .",
    "each web browser s tab , frame , or window has its own object .",
    "the object is the global object of the javascriptenvironment .",
    "each function that is not attached to another object is attached to , as illustrated in .",
    "this behavior combined with the dynamic binding of the pseudo - variable ( see [ sec : this ] ) can have deep side effects on security of your applications .    .... window.ping //",
    "answers ' undefined '    var ping = function ( string ) {    return string ; } ;    window.ping ; //",
    "answers the ping function window.ping('foo ' ) ; // answers ' foo ' ....",
    "the example starts by checking that the object has no property named .",
    "then we define a new function at the top level , which is automatically added to the object . accessing returns the function .",
    "we check that we can effectively execute it .      while at first sight",
    ", may look like the pseudo - variable in java , c # and smalltalk ( named in this case ) , in javascripthas a special semantics . is a dynamically bound builtin pseudo - variable of javascript .",
    "when used inside a function scope , the value of the pseudo - variable is determined by the syntactic shape of the function invocation @xcite . by syntactic shape ,",
    "we mean that is bound to a different object depending on the way the invocation expression is written .    in , while the same function is shared between two different objects , depending on the function invocation , is bound to a different object .",
    ".... var o = new object ( ) ; // a new function is attached to ' o ' on property ' f ' o.f = function ( ) { return this ; } ;    //",
    "f is invoked from o o.f ( ) ; //",
    "answers o , so ' this ' was bound to ' o '    var o2 = new object ( ) ;    // o2.f and o.f point to the same function object o2.f = o.f ;    //",
    "f is invoked from o2 o2.f ( ) ; //",
    "answers o2 , so ' this ' was bound to ' o2 ' ....    the behavior described by the previous example looks natural and similar to the one of java and c # where is bound to the receiver . however , the semantics behind is more complex",
    ". thus , depending on the way the function is invoked , may not refer to the object which defines the function but to the global object . as explained in , every object",
    "not attached to another object is implicitly attached to the global object .",
    "the following example illustrates this behavior .",
    "first , a simple object , named , with a method is created that simply returns .",
    "when the expression is executed , is returned as expected .",
    "then the variable is defined in the context of the global environment and its value is set to the method .",
    "now when is executed , the global object is returned instead of the object , which defines the method .",
    "we see that assigning a pointer to a function and invoking this function via this pointer changes what is bound to inside the function .    .... // creates a new object with a ' yourself ' method var o = {    yourself : function ( ) { return this ; } } ;    o.yourself ( ) // answers o    //we",
    "attach o.yourself to window var yourselffunction = o.yourself ;    yourselffunction ( ) // answers the ' window ' object ....    as can be seen in taken from @xcite , one of the dangerous side effects of the semantics is the ability to retrieve the object from a function .    in this example , an object , named , is created with a property and a method named which mutates .",
    "the return value of the expression shows that does not have a property .",
    "then the expression sets the value of the property of to .",
    "then the variable named points to the mutator method of object .    executing the mutator via the reference through with as a value will add a variable to and assign it . here",
    "the syntax of the method invocation binds to the global object instead of .",
    "the value returned from the expression shows that the property did not change and is still holding .",
    "finally , the value returned from the expression shows that the object got a new property holding the value .    .... var obj = {    \" x \" : 0 ,    \" setx \" : function(val ) { this.x = val } } ;",
    "window.x      // answers ' undefined ' obj.setx(10 ) ; obj.x          // answers 10 var f = obj.setx ; f(90 ) ; obj.x // answers 10 ( obj.x was not updated ) window.x // answers 90 (",
    "window.x was created ) ....    this section has shown that is dynamically bound and that its binding depends on the syntactic expression from which a function is invoked . in particular , imprecise use of may lead to a security breach granting access to the top - level object ( and thus any object of the web browser frame ) .",
    "[ [ constructors - used - without - new . ] ] constructors used without new .    when invoked without the keyword ,",
    "the function gets evaluated in the global context .",
    "is then bound to the object as seen in .",
    ".... var person = function ( name , surname , age ) {    this.name = name ;    this.surname = surname ;    this.age = age ; } ;    // invoking the constructor as a simple function var person = person('john ' , ' foo ' , 27 ) ; person // answers ' undefined ' person.age // raises an error window.surname //",
    "answers ' foo ' ....    note that in , is undefined since the constructor does not return the object .",
    "in addition gets an additional property as shown by the last statement of the example .    objects created using the same constructor will not share functions and data set in the constructor . each object will have its own copy of the initialization values .",
    "sharing can be achieved using the prototype as will be shown in .",
    "[ [ constructors - returning - objects . ] ] constructors returning objects",
    ".    shows that values returned by functions invoked as constructors ( with the operator ) are ignored by the compiler .",
    ".... var dog = function ( ) {    this.name = ' milou ' ;    return 3 ; //",
    "this statement is ignored by the compiler }    var dog = new dog ( ) ; dog ; // answers { name : ' milou ' } as expected ....    shows that when the returned object of a constructor function is not a primitive one , the constructor actually returns it .",
    "this behavior is unspecified by ecmascript5 and leads to misleading results .",
    "constructor functions should never explicitly return anything .",
    "the keyword takes care of returning the newly created object .",
    ".... var dog = function ( ) {    this.name = ' milou ' ;    return { name : ' tintin ' } ; // this statement is not ignored }    var dog = new dog ( ) ; dog ; // unexpectedly answers { name : ' tintin ' } ....      javascriptfunctions are lexical closures @xcite .",
    "each lexical environment depends on its outer context .",
    "the closure scope grants access to the function arguments ( accessed by value ) , as well as all variables accessible from the outer context scope , including all global variables .    in the",
    ", we show how a function has access to its outer scope s variables .",
    "is a function which returns another function whose role is to increment a private variable and set the value to an object s property .",
    "we can see that has access to the variable defined in .",
    "we can also see that the two functions returned by the two calls to have access to two different copies of .",
    ".... function outerfunction(obj ) {      var localtoouterfunction = 0 ;      var innerfunction = function ( ) {          localtoouterfunction++ ;          obj.someproperty = localtoouterfunction ;      }      return innerfunction ; } o = new object ( ) ; returnedfunction = outerfunction(o ) ; returnedfunction ( ) ; returnedfunction ( ) ; o.someproperty //",
    "answers 2    o2 = new object ( ) ; returnedfunction = outerfunction(o2 ) ; returnedfunction ( ) ; o2.someproperty // answers 1 o.someproperty //",
    "answers 2 ....    a naive use of closures may lead to issues as described in where all handlers will unexpectedly always return the value .",
    ".... var handlers = [ ] ; for(var i=0 ; i < 10 ; i++ ) {    handlers[i ] = function ( ) { return i ; } ; } ; handlers[3 ] ( ) ; // answers 10 ....    in the loop we iterate over from to . in each iteration of the loop",
    "a closure is created and stored into the array .",
    "when one of these closures is evaluated ( the fourth one here ) , the value returned by the closure is the current value of , not the value of at the time of the closure creation .",
    "the illustrates how to use closures to solve the issue described before .",
    "this example is the same as the previous one , only surrounding the closure creation with an additional closure capturing the value of inside the loop .",
    "when one of the closures is evaluated , the expected number is returned .",
    ".... var handlers = [ ] ; for(var i=0 ; i < 10 ; i++ ) {    ( function ( j ) {       handlers[j ] = function ( ) { return j ; } ;     } ) ( i ) ; } ; handlers[3 ] ( ) ; //",
    "answers 3 ....      as described in ecmascript3 , the javascript statement adds all properties of an object to the scope of the statement as shown in .    .... var someglobal = ' pilou ' ; var obj = new object ( ) ; obj.propertya = 1 ;    with ( obj ) {      someglobal = propertya ; } ;    someglobal ; //",
    "answers 1 ....    the scope of the statement includes all the variables of its outer scope ( including global variables ) and the object properties , overriding outer scope variables as shown in . in this example , inside the statement",
    ", there is potentially two targets for the name : this name could be referring to either the global variable ( with value ) or to the property of ( with value ) .",
    "when using , properties of the object passed as parameter to always take precedence .",
    ".... var propertya = ' property ' ; var someglobal = ' pilou ' ; var obj = new object ( ) ; obj.propertya = 1 ;    with ( obj ) {      someglobal = propertya ; // ' propertya ' is the property of obj } ;    someglobal ; //",
    "answers 1 ....    using is not recommended and is even forbidden in ecmascript5 strict mode .",
    "the recommended alternative is to assign the object s wanted properties to a temporary variable .",
    "the dynamic nature of javascriptcombined with scope mixture lowers the predictability of javascriptprograms .",
    "local variables are automatically lifted to the top of the function in which they appear .",
    "for example in the following function , the return statement has access to the variable that was defined inside the if branch .    .... function foo ( ) {      if ( true ) {          var x = 10 ;      }      return x ; }    foo ( ) ; // answers 10 ....    this happens because javascript automatically rewrite the previous code to something like the following :    .... function foo ( ) {      var x ;      if ( true ) {          x = 10 ;      }      return x ; }    foo ( ) ; // answers 10 ....    such behavior can lead to unintuitive results as demonstrated in the following example .    ....",
    "function foo(x ) {      return function ( ) {          var x = x ;          return x ;      } }    foo(200 ) ( ) ; //",
    "answers undefined ....    the function returned by the function does not return the value passed to but ( the value of unaffected variables ) . in this last example we might expect the on the right - hand side of to reference the argument of",
    ". nevertheless , due to lifting , all bound occurrences of in the nested function refer to the local variable as is made clear in the following rewrite :    .... function foo(x ) {      return function ( ) {          var x ; //",
    "javascript splits \" var x = x \" in two statements          x = x ;          return x ;      } }    foo(200 ) ( ) ; //",
    "answers undefined ....    the expression reads and writes back the initial value of x ( _ i.e.,_undefined ) .",
    "works as hence the right - hand of the assignment refer to the local variable .",
    "javascriptperforms type coercion ( implicit type conversion ) over objects on , for example , comparisons and statements checks .",
    "the automatic type coercions performed by javascriptare well known causes of bugs which lower the robustness of javascriptapplications .",
    "the basic rules about type coercion are @xcite :    [ [ boolean - coercion . ] ] boolean coercion .",
    "when expecting a boolean value , as in the statements , javascripttransforms the result of our expression automatically into a boolean value .",
    "values equivalent to are , , , , , and the empty string .",
    "the rest of the javascriptobjects are coerced to true .    .... var falsyvalue = false ; if ( ! \" \" ) {    falsyvalue = true ; } falsyvalue //",
    "answers true    falsyvalue = false ; if(0 ) {    falsyvalue = true ; } falsyvalue //",
    "answers false ....    [ [ equality - coercion . ] ] equality coercion .",
    "when two objects are compared ( as via the equality operator ) , depending on their types , none , one or both objects are coerced before being compared . after coercion , if both operands have the same type , the comparison is finally resolved by the strict equality operator .",
    "depending on the type , or may be implicitely performed on the compared objects .",
    "in addition , when performing an equality comparison , the following objects are considered as : , , , and .",
    ".... false = = 0 // answers true    0 = = false //",
    "answers true    \" \" = = 0 // answers true    false = = \" \" //",
    "answers true    { } = = { } // answers false    var n = {      valueof : function ( ) {          return 1 ;      } ,      tostring : function ( ) {          return \" 2 \" ;      } } ;    n = = 1 ; // answers true n = = \" 2 \" ; // answers false    var n = {      tostring : function ( ) {          return \" 2 \" ;      } } ;    n = = 1 ; // answers false n = = \" 2 \" ; //",
    "answers true    [ [ [ 42 ] ] ] = = 42 ; //",
    "answers true .",
    "valueof ( ) an array with one element answers its element    true + 3 ; //",
    "answers 4 ....    [ [ strict - equality - coercion . ] ] strict equality coercion .",
    "the strict equality operator compares both type and value of the operands , without performing type coercions .",
    "it only resolves to true , when both operands have the same type and value .",
    "the only exception are non - primitive objects , which are strictly equal if they are the same object",
    ".    .... false = = = 0 // answers false 0 = = = false // answers false \" \" = = = 0 // answers false false = = = \" \" //",
    "answers false    1 = = = 1 //",
    "answers true { } = = = { } // answers false ....",
    "this section presents different coding practices in javascriptdevelopment ( ecmascript3 ) that result in robust , extensible and understandable sofware .",
    "in particular , we stress the semantics of the constructor and its impact on inheritance @xcite .",
    "javascriptas defined in ecmascript3 is a prototype - based object - oriented language where each object has a prototype ( referenced in the core property ) .",
    "the object inherits all properties from it .",
    "since the prototype is also an object , the prototype chain inheritance is similar to a class hierarchy in class - based object - oriented languages .",
    "constructors structure object creation and initialize properties .",
    "each time an object is created , a different copy of each attribute specified in the constructor is assigned to the object . when sharing is needed between objects ,",
    "the shared properties must be defined in the constructor s prototype as can be seen in and .    .... var cat = function ( color , name ) {    this.color = color ;    this.name = name || ' default name ' ; }    cat.prototype.numberoflegs = 4 ;    var garfield = new cat('red ' , ' garfield ' ) ; var azrael = new cat('black ' , ' azrael ' ) ;    garfield.color ; // answers ' red ' garfield.numberoflegs ; //",
    "answers 4    azrael.color ; // answers ' black ' azrael.numberoflegs ; //",
    "answers 4    cat.prototype.numberoflegs = 5 ; garfield.numberoflegs ; //",
    "answers 5 azrael.numberoflegs ; //",
    "answers 5    azrael.color = ' grey ' ; garfield.color ; // answers ' red ' azrael.color ; // answers ' grey ' ....        when a new object is created by calling a constructor , its core property is initialized to the constructor s property value . in",
    "we set the prototype of function to be an object created from function ( see ) .",
    "note that we have to set the constructor of the prototype to be the function .",
    "then when an object created from the function is asked for a property that it does not define locally , the lookup is performed following the prototype chain ( _ i.e. , _ , looking inside the core property value ) . here",
    "the property is found in the prototype of which is an object created from the constructor .",
    ".... var animal = function ( ) { } ;    animal.prototype.isananimal = true ;    var animal = new animal ( ) ;    var dog = function ( ) { } ;    // the prototype of dog is set to a new animal , // so that future dog objects will inherit from animal.prototype dog.prototype = new animal ( ) ;    // we need to manually change dog.prototype.constructor so that // future dog objects will have dog as constructor // ( instead of animal ) .",
    "dog.prototype.constructor = dog ;    // all dog objects must share this property dog.prototype.isadog = true ;    var dog = new dog ( ) ; dog.isananimal ; // answers true dog.isadog ; //",
    "answers true ....        [ [ accessing - overridden - functions . ] ] accessing overridden functions .",
    "other object - oriented languages have a message resend mechanism , often implemented as _ super _ sends . to perform _ super",
    "_ sends in javascript , the lookup must be explicitly forwarded to the prototype ( see and ) .    .... // ' object ' being a function , we add a new method to all objects object.prototype.supersend = function ( selector , args ) {    // we use ' inheritsfrom ' to reference the prototype and we search    // the property in variable ' selector ' from this prototype :",
    "return this.inheritsfrom[selector].apply(this , args ) ; } ;    var animal = function ( ) { } ; animal.prototype.say = function ( string ) {      return ' hello ' + string ; } ;    var dog = function ( ) { } ; dog.prototype = new animal ( ) ; // we add our own property to retain inheritance // without using the not standard _ _ proto _",
    "_ dog.prototype.inheritsfrom = dog.prototype.constructor.prototype ; dog.prototype.constructor = dog ;    new dog().inheritsfrom = = = new dog().__proto__.__proto _ _ ; //",
    "answers true    dog.prototype.say = function ( string ) {      return this.supersend('say',['wouf wouf ' ] ) ; } ;    new dog().say(\"i'm a dog \" ) ; //",
    "answers ' hello wouf wouf ' ....        the dynamic capabilities of javascriptallow the usage of this mechanism to extend existing objects like _ arrays _ , _ numbers _ , and _ functions _ , through the addition of properties and methods to their prototype constructors .",
    "we ve previously shown an example of how to provide an inheritance - like relation in javascriptusing prototypes , allowing us to share properties and methods between our objects .",
    "unfortunately , the builtin inheritance mechanism of ecmascript3 has several drawbacks : ( 1 ) it depends on many implementation details that could lead to several mistakes , ( 2 ) it does not provide any access protection between objects , their prototypes , and the outer scope .    in a javascriptidiom",
    "appears showing how we can use closures to support visibility principles such as private attributes and inheritance @xcite instead of the typical prototype relationship we just described .",
    "the main idea is to create functions that create and initialize an object  declared as in the example  with default values and methods .",
    "the values set in the object s properties will be public values .",
    "we can also define and use variables and functions with the keyword to make them private to our object . to customize the initialization",
    ", we can also pass an object as a parameter to this function as a spec hash - table .    .... var animal = function ( spec ) {    // we take either the parameter or the empty object if    // spec is null    spec = spec || { } ;    var that = { } ;      // initialization    that.isananimal = true ;",
    "// private    var name = spec.name || ' unnamed ' ;      //",
    "public    that.getname = function ( ) {      return name ;    } ;      return that ; } ;    var dog = function ( spec ) {    spec = spec || { } ;    var that = animal(spec ) ; // makes dog inherits from animal      that.isadog = true ;      return that ; } ;    var adog = dog({name : ' milou ' } ) ; adog.isananimal ; //",
    "answers ' true ' adog.isadog ;      // answers ' true ' adog.getname ( ) ;   // answers ' milou ' adog.name ;        // answers ' undefined ' ....",
    "we also present an overview of the features of ecmascript5 @xcite",
    ".    released in june 2011 , ecmascript5 defines the latest standarized version of the javascriptlanguage .",
    "this release includes improvements and clarifications compared to ecmascript4 . in this section",
    "we propose a survey of two important aspects of ecmascript5 : object creation and properties access .",
    "these aspects improve object encapsulation , giving a finer - grained object - property definition and thus improving security .",
    "ecmascript5 offers a new way to instantiate objects with the ability to specify the new object s prototype and properties .",
    ".... var objold = new object ( ) ; var objnew = object.create(null ) ; // new function from ecmascript 5    //",
    "a.isprototypeof(b ) checks if ' a ' is in the _ _ proto _ _ inheritance // chain of b ( i.e. , b is derived from a ) object.prototype.isprototypeof(objold ) ;   //",
    "answers true object.prototype.isprototypeof(objnew ) ;   //",
    "answers false    objold.tostring ;   // answers a function objnew.tostring ;   // answers",
    "' undefined ' ....    example [ lst : create_object_null_ecma5 ] shows how to create a new object named that has no prototype and no inherited property .    when passed an argument , sets the property of the object to the argument . as a result ,",
    "is equivalent to .",
    "also optionally accept a second argument that is an object whose properties serve to initialize the new object .",
    "in , the object inherits all standard properties from and defines a new property whose value is the string .    .... var obj = object.create(object.prototype , {    foo : { writable : true , configurable : true , value : \" hello \" } , } ) ; obj.__proto _ _ = = = object.prototype ;",
    "// answers true obj.tostring ; // answers a function obj.foo ; //",
    "answers \" hello \" ....    the keys and are described below .",
    "security wise , ecmascript3 does nt have any concept of private properties .",
    "all object properties are publicly visible , inherited and modifiable at will .",
    "ecmascript5 improves the situation by introducing a fine - grain protocol to define object properties .",
    "[ [ section ] ]    is one of the core changes to javascriptdefined in ecmascript5 .",
    "this function takes three parameters : the object on which the property is defined , a string ( name of the new property ) and a descriptor object .",
    "the descriptor object can be a data descriptor or a getter / setter descriptor .",
    "a descriptor object can have the following optional keys :    * : if , the property shows up during enumeration of the properties of the receiver ; * : if , the property can be deleted , and the descriptor can be changed afterwards .    in case of an accessor descriptor ,",
    "two keys and can be used to define accessor methods to the property .    in case of a data descriptor ,",
    "two keys and can be used to respectively set an initial value and specify if the property can be written .    .... var dog = { } ; object.defineproperty(dog , '",
    "name ' , {      enumerable : true ,      configurable : false ,      value : ' pilou ' ,      writable : false } ) ;    dog.name ; //",
    "answers ' pilou ' , the default value dog.name = ' another name ' ; // tries to set a new value dog.name ; // answers ' pilou '",
    "as the property is not writable    delete dog.name ; // tries to remove the property from the object dog.name ; // answers ' pilou '",
    "as the property is not configurable ....    example [ lst : defineproperty ] shows how to use .",
    "first an empty object is created .",
    "a property is added to and set a default value of .",
    "this property is neither configurable nor writable . as a result , trying to change the value of the property or trying to delete it both fail .",
    "[ [ section-1 ] ] .",
    "ecmascript5 introduces two important functions regarding object extensions : and , both available from .",
    "as seen in takes an object as argument and prevents any further addition of properties .",
    "existing properties may still be deleted though . is a testing function answering a boolean value that indicates whether properties can be added or not .    ....",
    "var dog = { } ; object.defineproperty(dog , ' name ' , {      enumerable : true ,      configurable : false ,      value : ' pilou ' ,      writable : false } ) ;    object.isextensible(dog ) ; //",
    "answers true object.preventextensions(dog ) ; object.isextensible(dog ) ; //",
    "answers false    dog.age = 5 ; // tries to add a new property to ' dog ' dog.age //",
    "anwers undefined because ' dog ' is not extensible ....",
    "ecmascript5 also introduces full immutability of objects through , and can be tested with , and seen in .    .... var dog = { } ; object.defineproperty(dog , ' name ' , {      enumerable : true ,      configurable : false ,      value : ' pilou ' ,      writable : false } ) ;    object.isfrozen(dog ) ; //",
    "answers false object.freeze(dog ) ; object.isfrozen(dog ) ; //",
    "answers true    dog.age = 5 ; // tries to add a new property to ' dog ' dog.age //",
    "anwers undefined because ' dog ' is not extensible    delete dog.name //",
    "answers false dog.name // answers ' pilou ' ....    by adding the functions mentioned in this section ( notably , , and ) , ecmascript5 makes it possible for developers to secure their objects .",
    "here we present the key and limited articles that we encourage you to read if you want to get deeper into the semantics of javascript .    * sergio maffeis , john c. mitchell , and ankur taly . an operational semantics for javascript . in proceedings of the 6th asian symposium on programming languages and systems , aplas",
    "08 , pages 307 - 325 , berlin , heidelberg , 2008 .",
    "springer - verlag .",
    "the paper presents a 30-page operational semantics , based directly on the javascript specification .",
    "the semantics covers most of javascript directly , but does omit a few syntactic forms .",
    "they discuss various differences between the standard and implementations . *",
    "arjun guha , claudiu saftoiu , and shriram krishnamurthi .",
    "the essence of javascript . in proceedings of the 24th european conference on object - oriented programming , ecoop10 , pages 126 - 150 , berlin , heidelberg , 2010 .",
    "springer - verlag . in this article",
    "a core calculus is defined .",
    "based on it , several aspects of javascript are described .",
    "some badly designed features of javascript are described .",
    "* ecmascript version 3.0 specification ( 188 pages ) .",
    "* ecmascript version 5.1 specification ( 255 pages ) .",
    "this deliverable has introduced an overall picture of javascriptas defined in ecmascript3 and ecmascript5 , focusing on security aspects of its semantics . we offered a detailed review of javascriptsubtle points concerning security and application predictability .",
    "we have described scoping issues and the possible resulting security leaks .",
    "for example , the pseudo variable is bound to a different object depending on the way the function invocation expression is written ( syntactic shape of the function invocation in which is used ) .",
    "this dynamic behavior can be exploited by an attacker to leak private objects . as another example , the fact that javascriptlifts variable definitions inside functions ( _ i.e.,_moves to the top ) leads to unsuspected variable shadowing , dramatically lowering behavior predictability .",
    "arjun guha , claudiu saftoiu , and shriram krishnamurthi .",
    "the essence of javascript . in _ proceedings of the 24th european conference on object - oriented programming _",
    ", ecoop10 , pages 126150 , berlin , heidelberg , 2010 .",
    "springer - verlag .",
    "lynette  i. millett , batya friedman , and edward felten .",
    "cookies and web browser design : toward realizing informed consent online . in _ proceedings of the sigchi conference on human factors in computing systems",
    "_ , chi 01 , pages 4652 , new york , ny , usa , 2001 .",
    "sergio maffeis , john  c. mitchell , and ankur taly .",
    "an operational semantics for javascript . in _ proceedings of the 6th asian symposium on programming languages and systems _ , aplas 08 , pages 307325 , berlin , heidelberg , 2008 .",
    "springer - verlag .",
    "ali mesbah and arie van deursen . migrating multi - page web applications to single - page ajax interfaces . in",
    "_ proceedings of the 11th european conference on software maintenance and reengineering _ , csmr 07 , pages 181190 , washington , dc , usa , 2007 .",
    "ieee computer society ."
  ],
  "abstract_text": [
    "<S> there is a plethora of research articles describing the deep semantics of javascript . </S>",
    "<S> nevertheless , such articles are often difficult to grasp for readers not familiar with formal semantics . in this report </S>",
    "<S> , we propose a digest of the semantics of javascriptcentered around security concerns . </S>",
    "<S> this document proposes an overview of the javascript language and the misleading semantic points in its design . </S>",
    "<S> the first part of the document describes the main characteristics of the language itself . </S>",
    "<S> the second part presents how those characteristics can lead to problems . </S>",
    "<S> it finishes by showing some coding patterns to avoid certain traps and presents some ecmascript5 new features .       </S>",
    "<S> copyright   2012 by s. ducasse , n. petton , g. polito , d. cassou . + </S>",
    "<S> the contents of this deliverable are protected under creative commons attribution - noncommercial - sharealike 3.0 unported license .    </S>",
    "<S> _ you are free : _    to share : :     to copy , </S>",
    "<S> distribute and transmit the work to remix : :     to adapt the work    _ under the following conditions : _    attribution . </S>",
    "<S> : :    you must attribute the work in the manner specified by the author or    licensor ( but not in any way that suggests that they endorse you or    your use of the work ) . </S>",
    "<S> noncommercial . </S>",
    "<S> : :    you may not use this work for commercial purposes . </S>",
    "<S> share alike . </S>",
    "<S> : :    if you alter , transform , or build upon this work , you may distribute    the resulting work only under the same , similar or a compatible    license .    * for any reuse or distribution , you must make clear to others the license terms of this work . the best way to do </S>",
    "<S> this is with a link to this web page : creativecommons.org/licenses/by-sa/3.0/ * any of the above conditions can be waived if you get permission from the copyright holder . * nothing in this license impairs or restricts the author s moral rights .     </S>",
    "<S> +    [ [ deliverable-7.3.2.1-failles - de - scurit - en - javascript ] ] deliverable : 7.3.2.1 failles de scurit en javascript + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    [ [ title - semantics - and - security - issues - in - javascript ] ] title : semantics and security issues in javascript + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    [ [ titre - smantique - et - problmes - de - scurit - en - javascript ] ] titre : smantique et problmes de scurit en javascript + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    [ [ version-1.2 ] ] version : 1.2 + + + + + + + + + + + +    [ [ authors - stphane - ducasse - nicolas - petton - guillermo - polito - damien - cassou ] ] authors : stphane ducasse , nicolas petton , guillermo polito , damien cassou + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    [ [ description - de - la - tche-7.3.2.1-task-7.3.2.1-description ] ] description de la tche 7.3.2.1 / task 7.3.2.1 description : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    les environnements dexcution javascript comportent des failles de scurit lies  la smantique decmascript ainsi qu la prsence de certains constructeurs . </S>",
    "<S> dautres failles sont lies  la mise en oeuvre pratique decmascript par les navigateurs . </S>",
    "<S> lobjectif de cette tche est didentifier et classer les types de failles de scurit dans le monde javascript . </S>",
    "<S> on consultera notamment les travaux de miller autour de caja et ainsi que les approches proposes par seaside un framework pour le dveloppement dapplications scurises en smalltalk . </S>",
    "<S> lobjectif de la tche est de formaliser les mcanismes de scurit en javascript de faon  augmenter la connaissance des partenaires et des utilisateurs de javascript sur ce sujet . </S>"
  ]
}