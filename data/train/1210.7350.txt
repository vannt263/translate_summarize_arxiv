{
  "article_text": [
    "according to a well - known clich , there are three aspects of data :  _ volume _ , _ velocity _ , and _ variety_. to date",
    ", most of the focus , both in academia and industry , has been on volume , although many realize the importance of velocity ( exemplified by work on streaming and online algorithms  @xcite and recent open - source projects such as storm ) as well as variety ( exemplified by attempts at integrating structured , semi - structured , unstructured , and even multimedia data ) .",
    "this paper tells the story of how we tried to deal with velocity with an architecture designed for volume , learned about the limitations of the approach , and completely rewrote the system to handle `` fast data '' .",
    "the process has been instructive , and we wish to share our designs and the lessons learned with the community .    the context of this work is related query suggestion and spelling correction in search , which we collectively called `` search assistance '' at twitter .",
    "although both problems have been studied in detail in the web context  @xcite , twitter brings a new `` twist '' to the problem :  search assistance needs to be provided in real time and must dynamically adapt to the rapidly evolving `` global conversation '' .",
    "what exactly do we mean by `` real time '' ? in providing search assistance , we need to balance accumulating sufficient evidence to return relevant results with responsiveness to newly - formed associations between queries that often derive from breaking news stories . for example , prior to marissa mayer s appointment as yahoo s ceo , the query `` marissa mayer '' had little semantic connection to the query `` yahoo '' ; but following news of that appointment , the connection is immediate and obvious .",
    "based on our study of how rapidly twitter queries evolve to reflect users interests , we aim for a target latency of ten minutes .",
    "that is , ten minutes after a major news event breaks , the service should be displaying relevant related query suggestions .",
    "delivering this level of service requires us to tackle the `` velocity '' challenge mentioned above .",
    "our first solution took advantage of twitter s hadoop - based analytics stack built primarily around pig and did not require building any additional infrastructure . since the analytics platform was designed to handle petabyte - scale datasets through large batch jobs , it proved to be ill - suited for the strict latency requirements of the search assistance application . as a result , we abandoned our original implementation and designed a completely different architecture specifically for real - time processing . throughout the process",
    ", we gained a better understanding of how fundamental assumptions in hadoop s design make it a poor fit for real - time applications .",
    "we detail the shortcomings of our initial hadoop implementation and describe how they are addressed in the actual deployed system .",
    "note that the focus of this work is on data processing architectures and not the algorithms for computing related queries and spelling corrections ; the algorithms are discussed only to the extent necessary to help the reader understand the architecture .    to be explicit ,",
    "this paper is meant as a case study and not intended to present novel research contributions . nevertheless , we believe that `` war stories '' and practical experiences with building large - scale data processing systems form a valuable part of the literature .",
    "we view this paper as having three contributions :    = 1em    first , we introduce the _ real - time _ related query suggestion problem , attempt to define what `` real time '' actually means in this context , and articulate how it is different from similar problems in the web context .",
    "second , we describe two separate working systems that were built to solve the problem :  the initial hadoop - based implementation and the deployed in - memory processing engine",
    ". these experiences are valuable for understanding the limitations of hadoop - based stacks .",
    "third , our experiences highlight a gap between architectures for processing `` big data '' and those for `` fast data '' .",
    "we present thoughts on a future research direction for the field of data management in bridging these two worlds .",
    "organizationally , this paper makes the following progression :  after providing background , we present the first iteration of the system ( the hadoop - based implementation ) .",
    "we then describe the system written to replace it ( the deployed system ) .",
    "finally , we discuss the need for a _ general _ and _ unified _ data processing platform for `` big '' and `` fast '' data .",
    "we begin with a more detailed description of the problem and challenges .",
    "related query suggestion is a feature that most searchers are likely familiar with :  when the searcher types in a query ( e.g. , `` obama '' ) , in addition to showing results for the query , the system suggests queries that might also be of interest ( e.g. , `` white house '' ) .",
    "spelling correction can be viewed as a special case , where the suggested query is a closely - related form of the original :  perhaps a missing or transposed character .",
    "for example , `` justin beiber '' is a common misspelling for `` justin bieber '' .      in information retrieval ( ir ) , the general idea of augmenting a user s query",
    "is closely related to relevance feedback , which dates back to the 1960s  @xcite .",
    "one specific form , _ pseudo - relevance feedback _ , automatically extracts expansion terms from an initial query s top - ranked results ( see  @xcite for a more modern formulation ) .",
    "whether the user controls the use of these additional query terms is an interface design decision  @xcite .",
    "we can consider the case where expansion terms are explicitly controlled by the user an early form of query suggestion  these and related techniques have been widely known in the ir literature for decades and predate the web .",
    "prior to the web , most query expansion work focused on capturing term correlations across global and local contexts in the document collection  @xcite .",
    "the advent of web search engines , however , provided a new and much richer resource to mine :  query , clickthrough , and other behavioral interaction logs .",
    "one of the earliest use of logs for query expansion is the work of cui et al .",
    "@xcite , who used clickthrough data to establish correlations between query terms and document terms , which were then extracted for query expansion .",
    "related , a family of query suggestion techniques involves constructing a bipartite graph of query and clicked urls , on which random walks  @xcite or clustering can be performed  @xcite ; cf .",
    "another use of query logs is to extract query substitutions from search sessions by mining statistical associations from users successive queries  @xcite  this is the general approach we adopt .",
    "similar techniques are also effective for spelling correction  @xcite .",
    "there has been much related work on analyzing temporal patterns of web search queries .",
    "vlachos et al .",
    "@xcite were among the first to model bursts in web queries to identify semantically similar queries from the msn query logs .",
    "the temporal profile of queries has been analyzed  @xcite and exploited to capture lexical semantic relationships  @xcite .",
    "forecasted query frequency has also been shown to be helpful in query auto - completion  @xcite .",
    "most recently , radinsky al .",
    "@xcite proposed a general temporal modeling framework for user behavior in terms of queries , urls , and clicks .",
    "we argue that the related query suggestion problem takes on additional , richer dimensions in the twitter context .",
    "a key characteristic of twitter is that it provides up - to - the - second updates on major events around the world , ranging from arab spring protests to the outcome of major sporting events to the sudden occurrences of natural disasters .",
    "this means that related query suggestions must be _ real - time _ :  in particular , results need to be temporally relevant and timely .",
    "we consider these two points in detail below .    in the information retrieval literature , relevance captures the notion of the `` goodness '' of a result .",
    "it is a somewhat fuzzy notion , and ir researchers have devoted countless pages over the past several decades trying to more precisely define relevance  @xcite .",
    "most operational definitions of relevance focus on _ topicality _ , or the `` aboutness '' of a particular result . despite a thread of work that attempts to capture temporality  @xcite , in the standard treatment , relevance is _ atemporal _ ,",
    "i.e. , merely a function of the query and result , irrespective of _ when _ the result was returned .",
    "applied to evaluate the relevance of related query suggestions , we are not aware of any previous work that explicitly attempts to factor in temporal issues .    it is clear that real - time related query suggestion has a strong temporal component .",
    "consider an example :  on june 28 , 2012 , the hashtag , short for supreme court of the united states , was trending on twitter , which indicates a large ( and atypical ) volume of tweets on the topic . on that day , the supreme court delivered its judgment on the constitutionality of president obama s health care reform . a click on the trend automatically triggers a query for the hashtag :  related query suggestions on that day included `` healthcare '' and `` # aca '' ( short for affordable care act , the name of the legislation ) . in this case",
    ", the service accurately captured the connections between those keywords within the temporal context .",
    "the same suggestions would have not been relevant a few days before , when the supreme court was ruling on immigration legislation , and would not be relevant some time later , when the court moves on to consider other cases .",
    "another important difference between related query suggestion for web search and the real - time variant of the problem is the narrow time frame in which suggestions have maximal impact .",
    "often , the temporal progression of breaking news events on twitter follows a `` hockey puck '' curve .",
    "when plotting , say , number of queries as a function of time , we typically observe a region when the volume is increasing at a moderate slope , followed by a transition to where the volume increases at an accelerated rate ( often exhibiting exponential growth ) .",
    "ideally , we would like to start making related query suggestions at the `` knee '' of that curve , which requires a delicate balancing act .",
    "if we make the suggestion too early , the connections might be too tenuous due to scant evidence .",
    "on the other hand , making suggestions too late would lessen the impact , since users might have already found out about related queries through other means .",
    "this issue of timeliness is less important in the context of suggesting web queries ( and as far as we are aware , mostly ignored in the research literature ) .    to render the problem more challenging , rapid changes in the query stream corresponding to breaking news events are intermixed with slower moving signals that persist over longer periods of time :  `` michelle obama '' vs. `` flotus '' ( first lady of the united states )",
    "would be an example .",
    "furthermore , tail queries require accumulation of statistical evidence across longer periods of time to make meaningful suggestions , due to low query volume .",
    "an example might be plausibly making the suggestion `` # bigdata '' for `` hadoop '' .",
    "ideally , we desire a system that deals with rapidly changing signals ( high - volume , by definition ) as well as slowly changing signals , which may either be high or low volume .          when the search assistance project began , one of our first tasks was to better understand the temporal dynamics of user queries on twitter and to more precisely quantify the real - time requirements of the related query suggestion application .",
    "these results were separately published  @xcite , but here we provide a summary .",
    "our study of how user interests rapidly evolve focused on `` churn '' , informally characterized as the process by which terms and queries become prevalent and then `` drop out of the limelight '' .",
    "we refer the reader to the full paper , but here we provide some highlights :    examining all search queries from october 2011 , we see that , on average , about 17% of the top 1000 query terms from one hour are no longer in the top 1000 during the next hour . in other words , 17% of the top 1000 query terms `` churn over '' on an hourly basis . repeating this at the granularity of days instead of hours , we find that about 13% of the top 1000 query terms from one day are no longer in the top 1000 during the next day .    during major events ,",
    "the frequency of queries increase dramatically . for example , on october 5 , immediately following the death of apple co - founder and ceo steve jobs , the query `` steve jobs '' spiked from a negligible fraction of the query volume to 15% of the query stream .",
    "figure  [ figure : stevejobs-5-min ] ( reprinted from  @xcite ) shows the frequency of a few queries related to steve jobs as a function of time .",
    "a short while after the query `` steve jobs '' spiked , related queries such as `` apple '' and `` stay foolish '' ( one of his mottos ) spiked as well .",
    "one of our conclusions from this study was that for real - time applications on twitter , we need to keep track of term statistics at a fine granularity .",
    "a window of approximately five minutes seems to be the sweet spot in being able to reflect large - scale changes ; any longer we d be reacting too slowly , but any shorter it would be difficult to accumulate sufficient counts for anything other than the head of the vocabulary distribution . although the death of steve jobs is an extraordinary event , this episode is typical of how fast twitter reacts to significant breaking news . from this",
    ", we established a target of returning relevant related query suggestions within ten minutes after an event has occurred .      at the core of twitter",
    "s search assistance is a simple idea :  if query @xmath0 and query @xmath1 are seen in the same context , it provides evidence that they are related . in many cases @xmath0 precedes @xmath1 in time :",
    "this suggests that @xmath1 may be a query that is interesting to searchers who found @xmath0 interesting .",
    "furthermore , if @xmath0 and @xmath1 are very similar , as measured , for example , by edit distance , @xmath1 is likely a spell - corrected version of @xmath0 ( especially if @xmath0 returns far fewer results than @xmath1 or no results at all ) .",
    "naturally , we accumulate evidence across many different contexts before surfacing a suggestion to the user .    this simple idea admits a large design space for instantiating the actual algorithm .",
    "first , how do we define `` context '' ?",
    "presently , we rely on two different types of context :  a user s search session and tweets themselves .",
    "user search sessions that span multiple queries provide valuable signal  for example , the user might issue query @xmath0 , browse the results and notice something interesting that leads to query @xmath1 .",
    "this is exactly the type of connection that we want to learn .",
    "terms that appear together in tweets also provide valuable evidence  this is closely related to the vast computational linguistics literature on extracting collocations and other semantically - related terms  @xcite .    after defining the context , the next question :",
    "how do we quantitatively measure how often @xmath0 and @xmath1 appear together in the same context ?",
    "once again , there is a large number of metrics to choose from :  conditional relative frequency , pointwise mutual information , log - likelihood ratio , the @xmath2 statistic , just to name a few popular ones .    of course , we need to take into account the temporal aspects of the evidence we have observed .",
    "there are several ways to accomplish this , and our general approach is to `` decay '' observed counts over time , which affects correlation statistics and gradually lessen the importance of observed events as they age . however",
    ", even this simple decay strategy leads to a wide range of choices for the decay function :  exponential , step - function , linear are obvious choices , each with free parameters to tune ( e.g. , the @xmath3 decay constant for exponentials or the slope for linear decay ) .",
    "finally , we require a mechanism to combine all the evidence from each individual relevance signal ( i.e. , a ranking algorithm ) .",
    "the simplest workable strategy is a linear combination , with either hand - tuned or machine - learned weights , but here is an opportunity to leverage learning - to - rank techniques  @xcite such as gradient - boosted regression trees and ensemble methods  @xcite .",
    "note that in reality the production system runs multiple algorithms , either as part of a / b testing experiments or as part of ensembles whose results are then combined .",
    "the purpose of this description is to illustrate the types of signals and features that are exploited by the search assistance service without describing the actual algorithm ( which we hope to detail in a future paper ) .",
    "however , we believe this outline provides the reader with sufficient context to understand the remainder of the paper and appreciate the architectural challenges involved in this problem . at an abstract level , the relevance signals can be thought of as the problem of computing functions over the query space crossed with itself ( i.e. , all possible @xmath0 s crossed with all possible @xmath1 s ; cf .",
    "the `` all - pairs '' problem  @xcite ) . in theory , the query space is the power set of the vocabulary space ( ignoring queries that return zero results ) , but in practice queries are short , and we only consider @xmath4-grams up to @xmath5 .",
    "however , even with this simplification the event space is quite large and can not be fully materialized in memory .",
    "we return to this issue later .",
    "our general approach is closest to the session - based technique described by jones et al .",
    "@xcite , but only begins to scratch the surface in terms of algorithms that can be brought to bear in tackling the real - time related query suggestion problem .",
    "although not currently implemented yet , we have given some thought to how more sophisticated algorithms , such as random walks on the query - clickthrough graph  @xcite , can be adapted to the real - time context , but leave these interesting enhancements for future work .",
    "when the search assistance project began , the most obvious solution was to take advantage of the existing analytics platform for data processing . over the past several years , twitter has built a robust , production petabyte - scale analytics platform , primarily based on hadoop , but also incorporating other components such as pig , hbase , zookeeper , and vertica .",
    "the first ( complete ) version of search assistance was built using this platform , but was later replaced . before discussing the reasons for this , we provide a brief overview our hadoop platform here , and refer the reader to previously - published papers for more details  @xcite .",
    "a large hadoop cluster lies at the core of the analytics infrastructure that serves the entire company .",
    "data is written to the hadoop distributed file system ( hdfs ) via a number of real - time and batch processes , in a variety of formats .",
    "these data can be bulk exports from databases , application logs , and many other sources . when the contents of a record are well - defined , they are serialized using either protocol buffers or thrift , and typically lzo - compressed .",
    "we have written an open - source system called elephant bird , that hooks into the serialization frameworks to automatically generate code for reading , writing , and manipulating arbitrary protocol buffer and thrift messages .    instead of directly writing hadoop code in java , analytics at twitter",
    "is performed mostly using pig , a high - level dataflow language that compiles into physical plans that are executed on hadoop  @xcite .",
    "pig provides concise primitives for expressing common operations such as projection , selection , group , join , etc .",
    "this conciseness comes at low cost :  pig scripts approach the performance of programs directly written in hadoop java . yet",
    ", the full expressiveness of java is retained in the ability to call arbitrary user - defined functions ( udfs ) .",
    "production pig analytics jobs are coordinated by our workflow manager called oink , which schedules recurring jobs at fixed intervals ( e.g. , hourly , daily ) .",
    "oink handles dataflow dependencies between jobs ; for example , if job _",
    "b _ requires data generated by job _ a _ , then oink will schedule _ a _ , verify that _ a _ has successfully completed , and then schedule job _ b _",
    "( all while making a best - effort attempt to respect periodicity constraints ) .",
    "finally , oink preserves execution traces for audit purposes :  when a job began , how long it lasted , whether it completed successfully , etc . each day , oink schedules hundreds of pig scripts , which translate into thousands of hadoop jobs .    the first version of search assistance was written in pig , with custom java udfs for computations that could not be directly expressed with pig primitives .",
    "a pig script that aggregates user search sessions , computes term and co - occurrence statistics , and ranks related queries and spelling suggestions would run on our hadoop stack ; a lightweight frontend periodically loaded the output and served the results for incoming requests .",
    "the system worked reasonably in terms of output quality and allowed us to experiment and discover useful signals , but the latency was unacceptable .",
    "related query suggestions were not available until several hours after the collection of the data those suggestions were based on . initially , we were somewhat surprised by this lag and spent some effort to understand the issues involved .",
    "next , we detail the two primary bottlenecks and why they existed .",
    "the first bottleneck involved the data import pipeline  moving log data from tens of thousands of production hosts onto hdfs .",
    "in particular , search assistance made use of `` client event '' logs , which capture records of users interactions across the various twitter clients ( e.g. , the twitter.com site , iphone and android apps , etc . ) .",
    "these logs , on the order of a terabyte a day ( compressed ) as of summer 2012 , capture everything from site navigation to page impressions , and of course , include the query contexts for search assistance .",
    "for additional details on the client event logging infrastructure , we refer the reader to a recent paper  @xcite .    for gathering log data , twitter uses scribe , a system for aggregating high volumes of streaming log data in a robust , fault - tolerant , distributed manner .",
    "it was originally developed and later open sourced by facebook .",
    "although it has since been augmented by other systems , scribe remains an integral part of facebook s logging infrastructure .",
    "twitter s scribe infrastructure is illustrated in figure  [ figure : scribe ] , and is similar to the design presented in  @xcite .",
    "a scribe daemon runs on every production host and is responsible for sending local log data across the network to a cluster of dedicated aggregators in the same datacenter .",
    "each log entry consists of two strings , a category and a message .",
    "the category is associated with configuration metadata that determine , among other things , where the data is written .",
    "the aggregators in each datacenter are co - located with a staging hadoop cluster .",
    "their task is to merge per - category streams from all the server daemons and write the merged results to hdfs ( of the staging hadoop cluster ) , compressing data on the fly .",
    "another process is responsible for moving these logs from the per - datacenter staging clusters into the main hadoop data warehouse .",
    "it applies certain sanity checks and transformations , such as merging many small files into a few big ones and building any necessary indexes .",
    "lastly , it ensures that by the time logs are made available in the main data warehouse , all datacenters that produce a given log category have transferred their logs .",
    "once all of this is done , the log mover atomically slides an hour s worth of logs into the main data warehouse . at the end of the log mover pipeline , logs arrive in the main data warehouse and are deposited in per - category , per - hour directories ( e.g. , /logs / category / yyyy / mm / dd / hh/ ) . within each directory",
    ", log messages are bundled in a small number of large files . from here , our oink workflow manager fires off a cascade of pig jobs that compute the related query suggestions .",
    "unfortunately , there is a substantial delay from when the logs are generated to when they are available in the main data warehouse .",
    "typically , we observe lag on the order of a couple of hours , although delays of up to six hours are not uncommon .",
    "this clearly does not meet the real - time demands of our application .",
    "it is important to note that our scribe architecture adopts standard best practices in the industry , and there are good reasons for each aspect of the design .",
    "the hierarchical aggregation scheme is necessary because hdfs can not handle large numbers of small files ",
    "otherwise , a simpler design is to have production hosts directly write logs into hdfs .",
    "the aggregators allow log data from many scribe daemons to be `` rolled up '' into a smaller number of large files  this also provides a hook for etl operations such as compression , data cleaning , building indexes , etc .",
    "data import is also bounded by the slowest task to complete , because the process was designed to appear atomic to downstream consumers .",
    "for example , when the workflow scheduler oink observes that a newly - created hourly log directory appears , it assumes that all logs are present .",
    "this assumption simplifies the design of oink in not having to deal with partially transferred data .",
    "it is not uncommon for some aggregators to lag a bit behind , perhaps due to an idiosyncratic distribution of scribe daemons that are connected to it .",
    "furthermore , the log mover operates across geographically - distributed datacenters , and therefore is subjected to the uncertainties of copying large amounts of data over a wide - area network .",
    "there are possible ways to reduce the latency in the log import pipeline within the existing scribe architecture .",
    "we could , for example , implement sub - hour incremental importing .",
    "this would come at the cost of additional complexity to data consumers since we d need a signaling mechanism to notify that all data for a particular hour has arrived .",
    "this is not impossible , but would require substantially re - engineering the analytics stack .",
    "incremental importing , however , might exacerbate the small files problem in hdfs  we still need to accumulate log data over some interval to avoid a proliferation of small files . in the best case , we could probably achieve latencies in the tens of minutes from when the logs are generated to when they are available on hdfs for processing .",
    "this latency still remains too high for our application .",
    "we are aware that since the development of scribe there have been advances that tackle the issue of real - time log processing , for example , facebook s ptail and puma combination  @xcite and linkedin s kafka  @xcite .",
    "we return to discuss this in more detail in section  [ section : future ] .",
    "the second bottleneck in our initial implementation on the hadoop analytics platform had to do with the latencies associated with mapreduce jobs themselves .",
    "there were two issues , discussed in detail below :    the first issue involved contention on the hadoop cluster , which is a shared resource across the company . on a typical day",
    ", it runs tens of thousands of _ ad hoc _ and production jobs from dozens of teams around the company .",
    "we use the fairscheduler , which does have a notion of task pools with different priorities .",
    "however , this is not the best mechanism for our purposes , since we do nt care about resource allocation as much as having predictable bounds on end - to - end job completion times . perhaps as a testimony to the success of `` big data '' analytics ,",
    "cluster usage outpaces the growth of physical cluster resources .    the second issue involved the speed of mapreduce jobs and the complexity of the search assistance algorithm itself .",
    "an initial prototype in pig translated into roughly a dozen mapreduce jobs and took around 1520 minutes to process one hour of log data ( without resource contention ) .",
    "complexity of the algorithm aside ( some of which was unavoidable to generate high quality results ) , there were several contributing factors to the slow speed :  hadoop was simply not designed for jobs that are latency sensitive . on a large cluster",
    ", it can take tens of seconds for a large job to start up , regardless of the amount of data it processes .",
    "another issue we observed was the sensitivity of job completion times to stragglers .",
    "many aspects of natural language , for example , the distribution of vocabulary terms , follow zipfian distributions , for which a simple hash partitioning scheme creates chunks of `` work '' that vary greatly in size . for many jobs ,",
    "the mean running time for map or reduce tasks was substantially shorter than the maximum ( which bounds the job completion time ) . in a complex pig script that chains together a dozen or more hadoop jobs ,",
    "the end - to - end critical path is the slowest task in each mapreduce cycle .",
    "the issue of stragglers has been studied by researchers  @xcite , but even in pig there are a number of ways to address the issue with careful software engineering  for example , properly setting the parallel factor ( albeit , a brute force solution ) , using certain types of joins when appropriate , etc .",
    "however , even with careful software engineering , the best case scenario for computing query suggestions is on the order of ten minutes ( without resource contention ) , due to the need to compute many features and the amount of data involved .",
    "coupling this with the delay from log import , we arrive at , optimistically , an end - to - end latency of a few tens of minutes . based on the analysis presented in section  [ section : bg : churn ] , this does not seem quick enough  by the time we begin to make relevant related query suggestions , the breaking news event might have already passed us by .      while the issues with the hadoop implementation seem obvious with the benefit of hindsight , several factors made the pig implementation a natural starting point .",
    "first , because twitter already had a mature hadoop - based analytics platform , implementing the search assistance algorithms as pig scripts required no additional infrastructure , and a working prototype was built within a short time .",
    "various aspects of building production pig workflows using oink , such as scheduling , resource management , error handling , notifications , etc .",
    ", are well established .",
    "therefore , it was easy to immediately get started and rapidly iterate .",
    "second , and related to the first , the search team had already written a large number of pig scripts that analyzed search logs . these range from relatively simple aggregation jobs that fed frontend dashboards ( fully productionized , running daily ) to sophisticated _ ad hoc _ analyses that were designed to answer some specific question .",
    "there was a large body of code we could borrow from to serve as the basis of the initial search assistance prototype .",
    "third , when we started the project we did not yet have the in - depth understanding of query churn on twitter that we described in section  [ section : bg : churn ] .",
    "one of the benefits of the initial system , in addition to code and data that could be reused later , was insight into the rapid changes in the query stream , which forced us to focus on a more real - time solution .",
    "although we eventually replaced the hadoop - based architecture described in the previous section due to its inability to meet the latency requirements of the search assistance application , in no way did we consider it a `` failure '' .",
    "quite the contrary , developing on the hadoop - based analytics stack allowed us to experiment on a large amount of retrospective data and to conveniently explore the algorithm design space . although _ architecturally _ , the deployed solution was completely redesigned , many of the _ algorithms _ and some of the code ( e.g. , inside pig udfs )  remained unchanged .",
    "one advantage of the hadoop - based architecture was its generality , since it had access to logs that captured a wide range of user interactions  not only searches and tweet activity , but also impressions , clicks , etc .",
    "this in theory allowed us to deploy very sophisticated algorithms , including those that operate on clickthrough graphs and those that take into account twitter idioms such as retweets , replies , and favorites .",
    "however , we discovered that using two sources of context  search sessions and tweets  were sufficient to provide good results , at least for an initial implementation .",
    "thus , our deployed solution amounted to a custom in - memory processing engine that focused on these two sources of data , augmented by offline processing components .",
    "the remainder of this section describes the architecture of our deployed system , which then sets up our discussion of future work in section  [ section : future ] .",
    "the limitations of what we have built gives us some idea of where the gap is between processing `` big '' and `` fast '' data .",
    "the relevant parts of the overall twitter search architecture is shown in figure  [ figure : search ] .",
    "a frontend called the search `` blender '' brokers all requests ( for example , from the twitter.com web client ) to twitter s family of search services ( searching for tweets , searching for user accounts , search assistance , etc . ) .",
    "earlybird  @xcite is the name of our inverted indexing engine . a fleet of these servers ingests tweets from the `` firehose''a streaming api providing access to all tweets as they are published  to update in - memory indexes .",
    "because of this architecture , the blender has a complete record of users search sessions  there is no need for client event scribe logs ( as detailed in section  [ section:1:scribe ] ) .",
    "the blender makes these queries ( and associated session data ) available internally as a `` query hose '' service , akin to the firehose .",
    "note , however , data available to the blender is relatively limited ; for example , it does nt have access to clickthrough data .",
    "this is a limitation in the future when we wish to augment the search assistance algorithm to take advantage of more relevance signals .",
    "twitter search assistance is provided by a custom , in - memory processing engine that consumes two sources of input :  the tweet firehose and the blender query hose ( as described above ) . the design is shown in figure  [ figure : engine ] and comprises two decoupled components :  lightweight in - memory caches , which periodically read fresh results from hdfs , serve as the frontend nodes , while actual computations are performed on backend nodes .",
    "each of the frontend caches is implemented as a thrift service , and together they form a single replicated , fault - tolerant service endpoint that can be arbitrarily scaled out to handle increased query load .",
    "request routing to the replicas is handled by a twitter abstraction called a serverset , which provides client - side load - balanced access to a replicated service , coordinated by zookeeper  @xcite for automatic resource discovery and robust failover .",
    "details about the serverset abstraction were presented in a previous paper  @xcite .",
    "the backend processing engine is replicated for fault tolerance , but not sharded ( i.e. , each instance independently holds the entire state of the application ) .",
    "every five minutes , computed results are persisted to hdfs  the instances perform leader election using zookeeper , and the winner proceeds to write its results .",
    "every minute , the frontend caches poll a known hdfs location for updated results , thus ensuring freshness of query suggestions and spelling corrections .",
    "we adopted this decoupled frontend and backend design for a few reasons :  first , due to different scalability requirements .",
    "the frontend caches need to scale out with increased query load , whereas the backends face no such pressure  we simply need to guarantee sufficient fault tolerance so that _ some _ instance persists updated results every five minutes . persisting data to hdfs has many advantages :  upon a cold restart , the frontend caches can serve the most - recently written results immediately without waiting for the backend .",
    "persisted results can also be analyzed retrospectively with pig to better understand how the service is being used  since the data are on hdfs , it is easy to join them with log data for behavior analysis and user data to slice - and - dice by demographic characteristics .",
    "the search assistance frontend implementation is fairly straightforward so we leave out further details . each backend instance is a multi - threaded application that consists of three major components :  the stats collector , which reads the firehose and query hose , in - memory stores , which hold the most up - to - date statistics , and rankers , which periodically execute one or more ranking algorithm by consulting the in - memory stores for the raw features .",
    "there are three separate in - memory stores to keep track of relevant statistics :    the _ sessions store _ , which keeps track of ( anonymized ) user sessions observed in the query hose , and for each , the history of the queries issued in a linked list .",
    "note that we only keep a limited history of session data , so sessions older than a threshold are discarded ; effectively , the sessions are sliding windows holding the users most recent search activity . separately",
    ", we keep track of metadata about each session :  the unique queries contained in each session , the unique query cooccurrence pairs , and so on .    the _ query statistics store _ , which retains up - to - date statistics about individual queries .",
    "these include the count of the number of sessions they ve been observed in as well as a weighted count based on a custom scoring function .",
    "scoring is used to capture some twitter - specific aspects of search :  for example , queries may originate from different sources , such as typing in the search box , clicking a hashtag , or clicking a related query .",
    "the association strength between consecutive queries depends on their sources :  intuitively , two hashtag clicks are not as strongly indicative as consecutive typed - in queries , and this is reflected in the incremental weight added to individual queries when a query instance is observed . in this store",
    "we also periodically decay weights to reflect decreasing importance over time , in the absence of additional statistical evidence from the query hose .",
    "finally , we keep additional metadata about the query such as its detected language for the purpose of serving different results in different international markets .",
    "the _ query cooccurrence statistics store _ , which is similar to the query statistics store , except that it holds data about _ pairs _ of cooccurring queries ( stored in a sparse data structure ) .",
    "we apply a similar weighting and decay scheme as above .",
    "in addition , for each query , we store all unique queries that follow it in at least one session , and all unique queries that precede it in at least one session .",
    "note that we use a single data structure to keep track of cooccurrences in both search sessions and tweets .",
    "there are naturally many more cooccurring terms in tweets , but we do not keep track of pairs that are not observed in queries , which significantly reduces the event space .      in more detail , the following takes place in a search assistance backend node .    _ the query path _ :",
    "as a query from a given user is delivered through the query hose , the following actions are taken :    = 1em    query statistics are updated in the query statistics store :  raw counts and scored weights based on interaction type ( e.g. , click on hashtag , typed - in ) .    the query is added to the sessions store .",
    "a new session is created if necessary . if needed , old queries are removed from the session to preserve the sliding window size .    for each previous query in the session ,",
    "a query cooccurrence is formed with the new query .",
    "statistics are updated in the query cooccurrence statistics store accordingly .",
    "note that once session statistics are available , new queries are subject to rate - limiting and other checks .    _ the tweet path _ :  as a tweet is delivered through the firehose , all _",
    "n_-grams from it are processed to determine whether they are query - like or not ( i.e. , whether they are observed often enough as standalone queries ) .",
    "all _ n_-grams that match queries are processed in a similar way to the query path above , except that the `` session '' is the tweet itself .    _ decay / prune cycles _ :  periodically , all weights ( queries and query cooccurrences ) are decayed ; queries or cooccurrences with scores falling under predefined thresholds are removed to control the overall memory footprint of the service . similarly , user sessions with no recent activity are pruned .    _ ranking cycles _ :  in a separate periodic process , a particular ranker ( consisting of an algorithm and the parameters for its execution ) is triggered .",
    "the ranker traverses the entire query statistics store and generates suggestions for each query based on the various accumulated statistics ; top results are then persisted to hdfs .",
    "there are two scalability bottlenecks in our design .",
    "the first is the fact that each instance of the backend processing engine must consume the entire firehose and query hose .",
    "since there is no partitioning of the data streams , a single server must keep up with the incoming data .",
    "the stats collector is multi - threaded , with threads in two separate thread pools pulling from the firehose and query hose . in our benchmarks",
    ", cpu is not a limiting resource , and we appear to have plenty of headroom for the foreseeable future .    the other scalability bottleneck is memory for retaining the various statistics , particularly since the event space for cooccurring queries is quite large without any pruning .",
    "this is not merely a performance issue , as it can have substantial impact on the quality and coverage of the results .",
    "the coverage versus memory footprint tradeoff is fairly obvious :  we can reduce memory consumption by only keeping track of frequently - occurring query terms ( above a threshold ) , but at the cost of coverage , i.e. , for how many queries we can generate meaningful suggestions .",
    "another approach to reducing memory footprint is to store less session history and more aggressively decay weights .",
    "however , these are exactly the decisions that impact result relevance .",
    "ideally , we should be able to isolate algorithmic parameter setting from performance considerations , but in reality both are at least partially intertwined .",
    "the search assistance engine described above tracks recent queries in real - time , but has limited temporal coverage . statistics belonging to queries that are more than a day old have sufficiently decayed to a point where their impact on the final results is negligible , or have been completely pruned out of the stores .",
    "to boost query coverage ( the number of queries for which we generate suggestions or spelling corrections ) , we have a couple of additional mechanisms .",
    "the first involves running the same search assistance backend , except over data spanning much longer periods of time ( on the order of several months ) , but with different parameter settings ( decay , pruning , etc . ) . these processes",
    "run periodically ( currently , every six hours ) and provide a `` background model '' to capture slower - moving trends and suggestions that are persistent over time .",
    "as another useful feature for spelling correction , we perform a pairwise edit distance variant calculation between all queries observed within a long span of time ( the variant accounts for some spelling - specific issues , such as mistakes being more frequently observed in internal characters of a word rather than at the beginning or the end , as well as accounting for twitter specifics such as  @mentions and hashtags ) .",
    "this captures misspelling such as `` justin biber '' , which is common and persistent . for this",
    ", we run a pig job .",
    "the results of these less - frequent jobs are also deposited on hdfs :  the frontend caches load them and perform interpolation with the real - time results to serve the final output .",
    "in the process of twice implementing the search assistance service , we gained experience working with `` fast data '' and the limitations of a hadoop - based analytics stack .",
    "the custom deployed solution works well but is inflexible .",
    "we do not believe that the requirements of related query suggestion are unique , but rather represent a gap between platforms for processing `` big data '' and `` fast data '' in general . in this section",
    ", we attempt to better articulate an important future direction in data management and discuss current work in this direction .      at an abstract level",
    ", we desire a _",
    "general _ and _ unified _ data processing framework that can execute complex queries involving arbitrary user - specified computations , at varying levels of temporal granularity , with varying latency requirements . in the case of related query suggestion",
    ", we need to compute functions over the space of user search queries crossed with itself , since we re accumulating evidence on _ pairs _ of queries .",
    "the results of these computations are then combined by the ranking algorithm , but this part is relatively straightforward compared to computing , storing , and updating the raw statistics .",
    "the challenge lies in the fact that we need statistics across temporal granularities that differ by several orders of magnitude .",
    "we need evidence at the minute - by - minute level to track fast moving , breaking events , as well as evidence accumulated across days , weeks , or even months for slower moving and tail queries .",
    "our deployed solution is neither general nor does it represent a unified processing framework .",
    "we were able to build a custom in - memory processing engine for search assistance because we learned from the hadoop implementation that two signals ( tweets and search sessions )  were sufficient to generate good results ",
    "the fact that the search blender had access to the query stream made it easier to feed session data directly to the search assistance backend .",
    "however , we are unable to exploit ( without additional custom workarounds ) the far richer sources of signal in the full client event logs  clicks , impressions , etc .",
    "furthermore , the deployed system remains a patchwork of different processing paradigms :  the search assistance engine running on real - time data , the same engine running on larger amounts of retrospective data , and pig jobs handling the long tail of query misspelling .",
    "this situation is far from ideal , since it results in code duplication and increased complexity from coordinating multiple processes .",
    "the need to compute statistics across very different temporal granularities with different latency tolerances creates additional processing constraints .",
    "real - time processing generally implies holding all data in memory . in many cases",
    "this is not possible , thus necessitating approximations or pruning to avoid out - of - memory errors . on the other hand , batch computations on hadoop",
    "generally do not have this limitation since intermediate data are materialized to disk , and because there are far less stringent latency requirements we can afford to compute statistics for the entire long tail .",
    "currently , we must manage these constraints by hand  for example , hand tuning pruning and decay parameters depending on how much data we are processing . once again",
    ", it would be desirable for a data processing framework to `` figure out '' these issues and adapt a query plan accordingly .",
    "although the challenges we sketched out are couched in the context of related query suggestion , these issues are certainly not unique to us  for example , the literature discusses real - time computation of clickthrough rates ( ctr ) , particularly in the context of online advertising  @xcite .",
    "the nature of the marketplace demands that ad placement algorithms have access to the most recent statistics .",
    "however , there is often a need to perform analytics over longer periods of time ( e.g. , across days or weeks ) to uncover underlying trends . in most setups ,",
    "some sort of online processing engine is used for the real - time case , and a batch analytics platform for the latter case .",
    "it would be desirable to have a single _ unified _ data processing platform that `` does it all '' .",
    "one important future direction in data management is bridging the gap between platforms for `` big data '' and `` fast data '' .",
    "we believe that pieces of the solution already exist , but to our knowledge there hasnt been anything published that integrates everything into a unified data processing framework .",
    "we discuss some relevant work :    large - scale publish - subscribe systems such as hedwig and kafka  @xcite present nice solutions to the problem of moving large amounts of data around in a robust and scalable manner . according to linkedin  @xcite ,",
    "kafka handles more than 10 billion message writes each day with a sustained peak of over 172,000 messages per second . for real - time processing",
    ", this seems like a superior solution to scribe . however , kafka alone is not sufficient , as it lacks a processing engine and the ability to persist data over long spans ( but in fairness , the system was not designed for those two tasks ) . in linkedin",
    "s architecture , there is a process that consumes kafka messages and persists them to hdfs at ten - minute intervals ( presumably , because of the small file problem ) .",
    "even with this architecture we would be unable to meet our freshness requirements . for search assistance",
    "the target latency is ten minutes _ end - to - end _ ( including data processing and candidate ranking ) , which would still preclude a kafka / hadoop solution .",
    "interestingly , facebook adopts a completely different architecture with a combination of ptail and puma  @xcite . on top of a scribe infrastructure ,",
    "facebook has implemented ptail , which is like the unix `` tail '' command , except for hdfs data .",
    "a process runs ptail , consuming the end of logs as they are written to hdfs , and pipes it to puma , which is their in - memory aggregation engine .",
    "aggregates are `` flushed '' periodically to hbase , which is the system of record for real - time results . since",
    "this design has been in production at facebook , we assume that it scales in practice , although it is unclear whether the solution is a clever hack or a general design that can be elevated to the status of `` best practice '' .",
    "stream - oriented databases have a long history  @xcite .",
    "typically , users issue standing queries in a variant of sql with temporal extensions and results are returned via some sort of callback .",
    "one advantage of these systems is that they build on widespread familiarity of sql by developers and data scientists .",
    "in addition , most systems already have built - in primitives representing various temporal constructs such as sliding windows , which makes a large class of queries very easy to write ( e.g. , counting clicks and clickthrough frequencies ) . in a similar vein ,",
    "stream processing engines have received renewed interest in the open source community :  s4  @xcite and storm are two examples .",
    "however , we see a few issues :  it is unclear to what extent these systems address the data persistence problem . for example , storm and s4 do not provide a built - in solution , other than having one of their processing elements write to hdfs  but this begs the question of whether hdfs should be the _ source _ as in the facebook design or _ sink _ as in the linkedin design . in general",
    ", stream - oriented databases primarily operate in memory and were not designed to persistent large amounts of data ( if at all)likely not the terabytes - of - data - per - day scale that is common in popular web services .",
    "the other issue with stream processing engines is that they are , for the most part , not designed for queries with large temporal spans .",
    "handling a ctr calculation over a 30 second interval is surely doable , but it is unclear whether they were designed for answering similar types of queries over one week s worth of log data ( potentially tens of terabytes or more ) . in other words , although stream processing engines excel at the real - time processing aspects , it is not clear if they can handle more traditional complex _",
    "ad hoc _ queries at a massive scale that is the bread and butter of hadoop - based stacks today . the recent work of chandramouli et al .",
    "@xcite in _ embedding _ a stream processing engine inside a batch analytics framework appears to be a step in the right direction .",
    "another interesting architecture that tries to address incremental online computations at scale is google s percolator  @xcite , which can be summarized as database triggers for bigtable  @xcite .",
    "one application of percolator is incremental web indexing , which has elements of both velocity and volume .",
    "we see , however , two potential issues for a percolator - type architecture as a general model of online data processing .",
    "first , it assumes a bigtable - like data model , and although such a data model is fairly general , it is not appropriate for all cases .",
    "second , by the authors own account , percolator uses approximately 30 times more cpu per transaction than a commercial dbms on the tpc - e benchmark , which seems costly to scale out , even with cheap commodity servers .",
    "according to experiments reported in the paper , the system achieves reads and writes in the tens of thousands per second range , on a fairly large cluster :  this falls short of the hundreds of thousand of messages per second range needed for log processing at scale ( see kafka performance statistics above ) . in fairness , we re comparing apples to oranges , since percolator supports multi - row transactions , but such a consistency model is perhaps overkill for the types of applications we re focused on . although interesting , percolator occupies a different point in the design space .    most recently , lam et al .",
    "@xcite proposed mapupdate , an attempt to generalize mapreduce to streams .",
    "since streams may never end , `` updaters '' use storage called _ slates _ to summarize the data they have seen so far , serving as `` memories '' of updaters , distributed across multiple machines and persisted in a key  value store for later processing .",
    "the muppet implementation of mapupdate focuses on how to efficiently execute arbitrary code , but does not presently handle dynamic load partitioning ( except in event of machine failure )",
    ". it also lacks a higher - level query language for concisely expressing common computations . while interesting and definitely a step in the right direction , it is unclear if mapupdate adequately covers all the use cases we are interested in .",
    "we envision a data processing framework that combines elements of a stream processing engine to handle real - time computations and a hadoop - based batch analytics platform to perform `` roll ups '' and handle large - scale analytical queries over long timespans .",
    "internally , we have been experimenting with various elements of the technologies discussed above and have a few working prototypes that incrementally move toward the vision discussed above .",
    "we hope that when these systems reach maturity we will have the opportunity to share our designs with the community .",
    "there is a growing recognition that volume , velocity , and variety require different models of computation and alternative processing platforms .",
    "we certainly learned this lesson first hand in trying to deploy a hadoop - based solution for a problem it was ill - suited to solve .",
    "this led us to implement the search assistance service twice .",
    "although the experience was instructive , we hope that future system designers can benefit from our story and build the right solution _",
    "the first time_. even better , it would be desirable to build a generic data processing platform capable of handling both `` big data '' _ and _ `` fast data '' .",
    "a.  gates , o.  natkovich , s.  chopra , p.  kamath , s.  narayanamurthy , c.  olston , b.  reed , s.  srinivasan , and u.  srivastava . building a high - level dataflow system on top of mapreduce :",
    "the pig experience . in _",
    "vldb _ , 2009 ."
  ],
  "abstract_text": [
    "<S> we present the architecture behind twitter s real - time related query suggestion and spelling correction service . </S>",
    "<S> although these tasks have received much attention in the web search literature , the twitter context introduces a real - time `` twist '' :  after significant breaking news events , we aim to provide relevant results within minutes . </S>",
    "<S> this paper provides a case study illustrating the challenges of real - time data processing in the era of `` big data '' . </S>",
    "<S> we tell the story of how our system was built twice :  our first implementation was built on a typical hadoop - based analytics stack , but was later replaced because it did not meet the latency requirements necessary to generate meaningful real - time results . the second implementation , which is the system deployed in production , is a custom in - memory processing engine specifically designed for the task . this experience taught us that the current typical usage of hadoop as a `` big data '' platform , while great for experimentation , is not well suited to low - latency processing , and points the way to future work on data analytics platforms that can handle `` big '' as well as `` fast '' data . </S>"
  ]
}