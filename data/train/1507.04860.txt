{
  "article_text": [
    "industrial control systems ( ics ) and supervisory control and data acquisition ( scada ) systems traditionally relies on communication technology such as rs-232 and rs-485 , and field buses such as profibus . due to the long lifetime of industrial components in such settings , transitions to technology such as ethernet , tcp / ip , and related protocols",
    "are only implemented now . the adoption to the standard internet protocol suite",
    "is expected to enhance interoperability of the equipment , and reduce overall communication costs .",
    "the growing connectivity is also expected to introduce novel security threats , in particular when systems are communicating over public networks such as the internet .",
    "while a great amount of research has been conducted on network security of office and home networks , recently the security of cps and related systems has gained a lot of attention  @xcite .",
    "unfortunately , real - world cps are often not open to security researchers , and as a result no reference systems are available . in addition , physical layer interactions between components need to be considered besides network communications .",
    "we believe that this will require novel simulation environments , that are specifically adapted to cater for the requirements of cps and ics .    in this work ,",
    "we present _ minicps _ , a cps simulation toolbox intended to alleviate this problem .",
    "the goal of minicps is to create an extensible , reproducible research environment targeted towards cps .",
    "minicps will allow researchers to emulate the network of an industrial control system , together with simulations of components such as plcs .",
    "in addition , minicps supports a basic api to capture physical layer interactions between components . based on minicps ,",
    "it is possible replicate emulate ics in real - time , for example to develop novel intrusion prevention systems , or own software to interact with industrial protocols .",
    "while not all cps systems are using ethernet - based communication so far , we see a general trend towards wide adoption of ethernet , even in applications such as airplanes , vehicles , and embedded systems .",
    "minicps can also be used to share different system setup easily , and can be extended by standard linux tools or projects . due to our use of mininet for the network emulation part , minicps is especially well suited to perform research on software - defined networking in the context of industrial control systems .",
    "we summarize our contributions as following :    * we identify the issue of missing network simulation environments for applications such as cyber - physical systems",
    ". in particular , such simulation environment should support physical interactions , detailed communication links , and specific industrial protocols that are used .",
    "* we present minicps , a framework built on top of mininet , to provide such a simulation environment .",
    "* we present an example application cases in which we use minicps to develop and refine a specific attack , which we later validated in a real testbed . *",
    "we propose the use of software - defined networking for cps networks to enable efficient detection and prevention of the attack presented earlier .",
    "we design an implement a matching controller in minicps .",
    "the structure of this work is as follows : in section  [ sec : background ] , we introduce mininet and cps networks in general .",
    "we propose our minicps framework in section  [ sec : minicps ] , and provide an application example in section  [ sec : examples ] . in section  [ sec :",
    "sdn ] , we show how minicps can be used to develop a cps network specific sdn controller .",
    "related work is summarized in section  [ sec : related ] .",
    "we conclude the paper in section  [ sec : conclusions ] .",
    "in this section , we will introduce some of the more salient properties of industrial control system ( ics ) networks that we have found so far .",
    "in addition , we will briefly introduce mininet , the network simulation tool we use as part of minicps .      in the context of this work",
    ", we consider industrial control systems that are used to supervise and control system like public infrastructure ( water , power ) , manufacturing lines , or public transportation systems .",
    "in particular , we assume the system consists of programmable logic controllers , sensors , actuators , and supervisory components such as human - machine interfaces and servers .",
    "we focus on single - site systems with local connections , long distance connections would in addition require components such as remote terminal units ( see below ) . all these components are connected through a common network topology .    * programmable logic controllers . *",
    "( plcs ) are directly controlling parts of the system by aggregating sensor readings , and following their control logic to produce commands for connected actuators .",
    "* sensors and actuators .",
    "* are directly connected to the network ( or indirectly via remote ios or plcs ) .",
    "* network devices . * ics often use _ gateway _ devices to translate between different industrial protocols ( e.g. modbus / tcp and modbus / rtu ) or communication media . in the case where these gateways connect to a wan ,",
    "they are usually called _ remote terminal units _ ( rtus ) .",
    "* network topology . *",
    "traditionally , industrial control systems have seen a wide deployment of direct links between components , based on communication standards like rs-232 .",
    "in addition , bus systems such as rs-485 and profibus have been used . in particular , focus on reliability led to a wide deployment of topologies such as rings , which could tolerate failure of a single component without loss of communications , with very low reaction time ( typically in the order of milliseconds ) .    in recent years",
    ", industrial networks are transitioning to mainstream consumer networking technology ( i.e. ethernet , ip , tcp ) . nevertheless , the need for reliability and interoperability with existing equipment leads to use of additions that are uncommon in typical home and office networks , such as ethernet rings , use of ip - layer multicasting , and custom protocols such as ethernet / ip ( enip ) .",
    "enip is an application - layer protocol that transports _ common industrial protocol _",
    "( cip ) messages that can be used to query sensor readings from components , set configuration options , or even download new logic on a plc . in that model ,",
    "sensor readings or control values are represented by _",
    "tags _ ( which can be roughly related to public variables in programming ) .",
    "cip uses a request - response model where a client sends a request to a server ( for example to read a _ tag _ containing a value read from a hardware component ) and where the server then sends back a reply ( e.g.with the requested value or an error code ) .",
    "such requests can operate on _ tags _ and also on the metadata associated with the tag , like access control and data type , which are stored in _",
    "attributes_. enip handles the _ session _ aspect of communications , for example with connected sessions ( with handshake and tear - down messages ) and unconnected sessions ( without any handshake but with more contextual data in every cip packet ) .    * topology layers .",
    "* networks for industrial control systems are often grouped in several layers ( more detail on such networks in  @xcite ) . on the lowest layer ( which we call layer 0 or l0 )",
    ", sensors and actuators are connected to controllers such as plc .",
    "the sensors and actuators are either capable of connecting to a network directly ( e.g. , using enip ) , or they use basic analog or digital signaling , which has to be converted to ethernet - based communications by _ remote input / output _ ( rio ) devices .",
    "only if actuators and sensors are physically very close to the plc , the io modules will be installed as part of the plc .",
    "the next higher layer ( layer 1/ l1 ) will connect the different controllers ( plcs ) with each other , together with local control such as human - machine - interfaces ( hmi ) , local engineering workstations , and data historians . for simplicity ,",
    "all these devices are often kept in the same ip - layer subnetwork , although more complex topologies are possible .",
    "we also note that industrial ethernet switches are often focused on electrical reliability , instead of ip - layer functionality ( e.g. the stratix 5900 switch ) .",
    "we provide the network topology of a generic ics network as an example in figure  [ fig : generic ] .",
    "mininet  @xcite is a network simulator that allows to emulate a collection of end - hosts , switches , routers , middle boxes , and links with high level of fidelity .",
    "it enables rapid testing and prototyping of large network setups on constrained resources , such as a laptop .",
    "furthermore , it was build around software - defined networking paradigm , facilitating sdn research and development  @xcite .",
    "mininet exploits lightweight system virtualization using linux _ containers_.",
    "a container can group a subset of processes and give them independent view of system resources .",
    "this approach presents various advantages over a full system virtualization : mininet runs on a single kernel , its computational overhead is lower and the emulator can easily tolerate scalability issues ( e.g. one thousand containers instead of one thousand dedicated virtual machines ) .",
    "each virtual host is a collection of processes isolated into a container .",
    "a _ virtual network namespace _ is attached to each container and it provides a dedicated virtual interface and private network data .",
    "link are emulated using virtual ethernet ( ` veth ` ) and they can be shaped through linux traffic control ( ` tc ` ) .",
    "each virtual host utilizes its virtual interface to send packets to a software switch .",
    "mininet can be used in multiple scenarios and can be easily adapted over time to track the evolution of cps networks .",
    "it provides a realistic simulation environment to the user , and one can work with the same addresses , protocol stacks and network tools of a physical network , it is even possible to reuse helper scripts and configuration files from the simulated environment directly in the physical network .",
    "mininet ships with a set of prepared topologies , in addition the user can easily extend this collection through the provided python apis .",
    "dynamic interaction within any chosen topology can be achieved through a convenient command line interface .",
    "mininet is free , open - source , well documented and actively maintained by a strong and competent community .",
    "furthermore , mininet gives the opportunity to the user to develop openflow network architectures with transparent integration of experimental code into production code .",
    "in this section , we will introduce _",
    "minicps provides a set of python tools to enable real - time emulation of network traffic in cps such as ics .",
    "this emulated system will allow ( a ) researchers to build , investigate , and exchange ics networks , ( b ) network engineers to experiment with planned topologies and setups , and ( c ) security experts to test exploits and countermeasures in realistic virtualized environments .    in minicps ,",
    "components such as plcs are emulated by python scripts that manage the decoding of industrial protocols and physical layer sensors and actuators signals . all networked system components ( including switches )",
    "are emulated using mininet , discussed in detail in section [ sec : background ] .",
    "physical layer interactions are currently modeled by a simple api ( based on shared read / write to files ) .",
    "in addition to the general application goal as outlined above , our design of the minicps toolkit is based on the following goals .    * cost - effectiveness ( in particular , compared to real testbed ) * compatibility ( you can deploy results on hardware ) * realistic simulation of industrial traffic ( e.g. , enip ) * open - source licenses ( research friendly ) * future readiness ( support application of sdn to cps ) * usability : the tool should be easy configure ( api hides low - level details ) * reproducibility : the tool should enable easy sharing of results between users    while most of these goals should be quite intuitive",
    ", we will comment on selected ones in the following .",
    "* reproducibility . * in  @xcite ,",
    "the authors proposed to use tools such as mininet to disseminate reproducible research results .",
    "in particular , researchers can make the scripts to generate their network setups public , which allows other researchers to reproduce the exact same environments for their experiments .",
    "we strongly believe that such dissemination of results would also be helpful in the context of security research , in particular when systems which are less mainstream are considered . while it is relatively easy to replicate office network settings as related software is well - known , specialized application setups such as ics would be valuable to share .",
    "* compatibility .",
    "* we aim to provide a platform that allows direct application of standard networking tools , as well as applications designed for the target cps . in particular , we aim to not only provide an abstraction of the network to perform simulations on ( similar to network simulators such as ns2  @xcite , omnet  @xcite ) , but we target a network emulation that is largely identical to a real network , without the cost or overhead of running a real network or a set of virtual machines . in particular , this would allow us to develop components that are directly using industrial protocols to communicate .",
    "in addition , detailed network emulation will allow us to use novel concepts such as software defined networking in the context of cps networks ( see section  [ sec : sdn ] ) .",
    "we note that to achieve this compatibility , we will be constrained to real - time simulation instead of being able to simulate with arbitrary speedup .    *",
    "what minicps does not aim for .",
    "* minicps does not aim to be a performance simulator , or tool for optimizations .",
    "in addition , we currently put very little emphasis on gui or visualization .",
    "we note that building on top of the physical layer api , and by extending the component logic scripts in general , it should be possible to easily create real - time charts of physical process parameters or controller states .",
    "components in minicps interact on several layers ( see figure  [ fig : blockscheme ] ) . on the top layer , we have the network through which messages are exchanged on top of enip , or other protocols .",
    "connected to this network are components , their logic is implemented in simple scripts or more advanced software packages . if the real - world counterpart of these components is interacting with the physical layer , the simulated components will also have access to specific physical layer properties through a second api , which abstracts the physical layer . to simulate chemical or physical processes , a selection of their properties",
    "are made available through the api , and updated in real - time by simulation scripts .",
    "for the main network emulation layer of minicps , we are using mininet ( see section  [ sec : background ] ) .",
    "mininet allows basic properties such as delay , loss rates , and capacity of all links .",
    "in minicps , we use this functionality to allow individual links to be configured with individual settings . as a result",
    ", we can emulate wide area network connections and local are network connections with different properties easily .",
    "based on mininet , the network communication in minicps uses the default linux networking stack based on ethernet .",
    "all components have virtualized network interfaces that are connected to each other . in particular",
    ", this setup allows us to construct arbitrary topologies such as simple star topologies of switches connected to devices , intermediate routers and firewalls , and topologies such as ethernet rings .",
    "protocols such as the spanning - tree - protocol or other routing algorithms can be used to automatically avoid looping configurations , and to establish routes .",
    "all standard protocols such as icmp , http , ntp , etc . can be used right away . on top of that , specific industrial protocols can be used .",
    "in particular , we use the cpppo python library to provide fundamental ethernet / ip ( enip ) services  @xcite .",
    "in addition to enip , cpppo also supports protocols such as modbus / tcp .",
    "in addition to cpppo , we also use the pycomm library for enip communications  @xcite .",
    "physical layer interactions between different components in the systems are captured by our phy - sim api .",
    "this api is essentially a set of resources ( currently files ) , that provide data in real - time .",
    "these resources can be read by components ( i.e. a sensor reading some physical property ) , or written to ( typically , by a script that emulates physical processes ) .",
    "the main purpose of the simple api is to allow different tools to interact with it as easily as possible , e.g. matlab , python scripts , or dedicated physics simulators .",
    "representing the physical layer properties as file resources makes this api independent of any particular library or programming language .",
    "the files contain json data structures , which are easy to parse and update .",
    "we also envision that it is possible to connect these files to an actual physical process , i.e. to have the process _ in the loop _",
    "( if suitable interfaces to the physical system are provided ) . in the long term",
    ", the simple api could be extended to a more generic api , for example a restful api using http .",
    "minicps is essentially a set of tools that extends mininet , in particular by adding simulation scripts for components such as plcs , hmis , and historians , and by adding the physical layer api and simulation part . as a result",
    ", the network emulation layer is built on top of mininet apis .",
    "our class hierarchy follows object oriented design principles : every reusable , self - contained piece of code is wrapped inside a class ( such as a topology , a topology manager or an sdn controller ) .",
    "our implementation contains three core modules : constants , topologies , and devices .",
    "the _ constants _ module collects data objects and helper function common to all the codebase .",
    "the _ topologies _ module is a collection of ad - hoc cps and ics topologies with realistic addresses and configurable link performance .",
    "the _ devices _ module contains a set of control logic applications developed using the pox platform .",
    "each core module is mirrored with a testing module counterpart ( even the constants ) .",
    "our class hierarchy design easily allows test driven development because each topology manager potentially can select a network configuration , a controller , the performance of the virtual links and even the cpu allocation for each virtual host . in other words ,",
    "a topology manager it is a self - contained topology test .",
    "indeed each test module is a collection of _ test_something _ classes with appropriate fixtures e.g. set the mininet log level at setup and clean mininet containers at tear - down .",
    "we used the python _ nosetests _ module to automate test design , discovery , execution , profiling and report . the _ logging _ module enables interactive code debugging / alerting and long time information storage . each core module and",
    "its testing counterpart append information to the same log file , that rotates automatically through five time - sorted backups .",
    "sdn controllers log on separated files that are ( over)written at runtime .",
    "sdn code integration is obtained by means of soft links using an initialization bash script .",
    "we have implemented a first prototype version of minicps , and are currently in the process of testing and extending its functionality .",
    "we plan to release the tool to the public in the near future , using an open source license .",
    "all extensions are using the python programming language , and are documented using the sphinx package .",
    "we mainly use minicps to model the communications and control aspects of a water treatment testbed at our institution .",
    "while the testbed is intended for security research , we find it useful to have the minicps emulation environment to replicate the network settings outside the lab .",
    "in addition to simulated interactions with plcs and sensors , the minicps model also allows us to experiment with different network topologies , and test sdn - related prototypes . in the following ,",
    "we highlight two such projects based on the minicps model of our testbed .",
    "the first application aims to provide on - the - fly manipulation of enip / cip traffic to change commands and sensor values as exchanged between an hmi and a plc . the second application ( in section  [ sec : sdn ] )",
    "concerns sdn controller - based detection and mitigation of arp spoofing attacks in the testbed .",
    "arp spoofing is a well - known attack in computer networks  @xcite .",
    "the attacker is connected to the same link layer network segment as two victims , that are exchanging messages .",
    "the attacker then sends specifically crafted address resolution protocol ( arp ) packets to both victims to cause them to send their messages to the attacker , instead of each other .",
    "the attacker then forwards the redirected messages to the original recipient , which allows him to perform a stealthy man - in - the - middle attack .",
    "we will show a possible countermeasure against this attack in section  [ sec : sdn ] .",
    "using arp - spoofing , an attacker in the layer 1 network of an ics system ( see figure  [ fig : normalcontrol ] ) can redirect all traffic between two victim , e.g. plc1 and the hmi .",
    "let us assume the following setting : the hmi is used to manually control the valve of a water feed line towards a water storage tank .",
    "the control decision is done on the hmi ( e.g. operated by a human ) , based on the fill - level of the tank as reported by a sensor in the tank . in this",
    "setting , the attacker now aims to arbitrarily change the fill state of the tank , e.g. by filling it over allowed maximal capacity , without being detected .",
    "based on that scenario , we modeled the network , hmi , plc , and the physical layer interaction between the valve and the tank in minicps .",
    "in particular , we modeled the valve as a simple boolean value , and the fill - state of the tank as a normal integer number .",
    "the valve value is periodically read by a process simulation script .",
    "if the valve is open , the current fill - state of the tank is increased by a fixed amount .",
    "both the valve and fill - state are also used by the plc simulation script , which periodically reads the fill - state and provides it as read - only cip _ tag _ to the emulated network .",
    "the simulated plc also provides a writable cip tag for the valve control .    in practice we found that such settings are common .",
    "an attacker could potentially overwrite the valve control tag ( as there is no direct access control in enip ) , but the hmi will continuously overwrite the setting to its intended state ( in our system , with 10hz ) . as a result , to continuously change the valve setting",
    ", the attacker has to send a large amount of traffic to compete with the intended control by the hmi , potentially interrupting normal operations .",
    "we developed an alternative attack that does not increase the traffic load on either hmi or plc , and without interfering with other data exchanged between plc and hmi .      in a first simple attack ( see figure  [ fig : arpcontrol ] ) , we used ettercap to install the attacker as man - in - the - middle between the hmi and the plc .",
    "we then wrote a set of ettercap filter rules to change the value written by the hmi to the valve tag at the plc . as a result , each time the hmi sent a control message to the plc to keep the valve closed , the attacker could then change this setting to `` open '' , without fearing the hmi from overwriting it again .",
    "we developed and deployed this attack in minicps , and were able to successfully change the valve tag to arbitrary values as attacker .          in our minicps setup , we also simulated physical layer interactions as outlined above .",
    "as result , the valve opened by the attacker led to an increasing fill - state of the tank , which was in turn reported by the plc when queried by the hmi . in practice",
    ", this would allow the hmi to at least trigger an alarm condition after the tank is exceeding the maximal fill state . to prevent this detection , we extended our attack by a seconds set of filter rules in the attacker .",
    "in addition to rewriting the valve control values , the attacker now also rewrote the value of the fill - state tag as reported from the plc to the hmi .",
    "in particular , the attacker could set this value to a constant , or apply some noise to it if wanted .",
    "we successfully applied this attack in the minicps environment .",
    "afterwards , we were able to apply the same attack to the real physical testbed , with only minor modifications .",
    "the modifications were necessary as the exact cip messages exchanged between the hmi and plc in the physical testbed are not yet fully identical to the ones exchanged in our minicps environment .",
    "there are a number of known countermeasures against the arp spoofing attack from the previous section ( e.g. , static arp tables in the hosts , traffic monitoring with an ids ) . in the context of this project",
    ", we were interested to see how a customized software - defined network ( sdn ) controller could be used to detect and prevent the attack outlined in the previous section .",
    "we now introduce sdn in general , the pox controller project in particular , and then show how we used minicps to prototype a simple pox controller design to prevent such arp spoofing completely in our testbed .",
    "in  @xcite , the authors have presented a number of motivations to use sdn in the context of smart power grid communications .",
    "we compare our work with that work in more detail in section  [ sec : related ] . in a more general context",
    ", related work was published recently in  @xcite .",
    "software defined networking ( sdn ) is a novel architectural way to think about building networks and openflow is the de - facto standard interface protocol between the sdn controlling logic and the network devices ( physical and virtual ) .",
    "both ideas were proposed by m. casado and they derives from sane  @xcite , a protection architecture for enterprise networks .",
    "the implementation defines a set of abstractions to provide separation of concerns at the control plane , in a similar way as the layering model that is used at the data plane . at the bottom of the stack",
    "there are network devices that form the physical topology . on top of",
    "that there is a network operating system ( nos ) able to talk to each device and to serve a network view , in the form of an _ annotated graph _",
    ", to the layer above .",
    "a virtualization layer is able to process this graph and provide only relevant details to the level above through an api . at the top of the stack",
    "there is the control logic that defines policy over the network assessing the processed graph .",
    "communications between the control logic and the physical devices is bi - directional : network device messages will update the network graph and control plane messages will update the network policy . with this setting the end - to - end principle , that again comes from the data plane management ,",
    "is reinforced also for the control plane .",
    "the ( complex ) management of the network is shifted on the edges and central network devices merely act as relays , becoming an homogeneous set of forwarding objects referred as _",
    "datapaths_.    in practice , in software defined networks , messages from the switches ( e.g. sent using openflow ) will be processed by a _",
    "controller_. for example , when a switch encounters a new flow ( e.g. a tcp connection with new target or new source ) , it will report this flow to the controller via openflow .",
    "the controller will then analyze the flow , and informs the switch about appropriate actions to take for the received messages ( e.g. forwarding to a certain port ) .",
    "such controllers are realized by several open source software projects .      *",
    "why sdn for cps networks . *",
    "the sdn paradigm presents some interesting new possibilities when applied to cps network design .",
    "the control plane abstractions allow the designer to concentrate on the network policy design .",
    "in addition , it is easier to develop , debug and compare various control programs according to the requirements ( e.g. routing , isolation , traffic engineering ) . for further motivation of sdn in the context of smart power grids",
    ", we refer to  @xcite . while in many applications",
    ", sdn is used to address highly dynamic network conditions , traffic in industrial control systems is usually quite predictable . in particular , topologies and",
    "the set of hosts remain static ( until the system is updated with new components ) .",
    "in addition , we noticed that components exchange the essentially the same traffic ( with varying data payload of course ) .",
    "for example , tag values could be queried every 100ms , and control commands could be sent every second , resulting into regular traffic patterns .",
    "in the following , we use the sdn paradigm to extract and enforce these traffic patterns , which allows us to detect and prevent arp spoofing attacks .    * sdn controller software .",
    "* there are various interesting projects regarding sdn and openflow and it is relatively easy to find a platform that implements the core modules , namely the nos and the virtualization abstractions . in our work",
    "we decided to use the pox  @xcite platform because it is targeted for the research community , it offers out of the box libraries and components , and it is object - oriented , event - driven with synchronous and asynchronous handling capabilities .",
    "in addition , pox is completely written in python and it integrates well with our set of tools ( scapy , cpppo , mininet , minicps ) .    in a nutshell ,",
    "events model communications from the network to the controller ( e.g. new datapath connection ) and callback functions model communications from the controller to the network ( e.g. add a new rule ) . in the next section we will introduce , as an illustrative example , our arp poisoning detection and handling scheme .",
    "we now present our sdn controller design , which aims to prevent the arp spoofing attacks as discussed in the previous section . in particular , our controller will analyze all arp traffic , classify it as malicious or benign , and then update the sdn switches with suitable rules to prevent malicious attacks .",
    "our threat model consists of an attacker able to impersonate a cps network device that aims to mount a passive or active man - in - the - middle attack using arp poisoning .",
    "our pox controller implements a fully centralized sdn control plane with per - flow forwarding rules .",
    "our control plane program uses both a proactive approach to perform a static pre - mapping and a reactive approach to adapt dynamically to the context .",
    "the detection and prevention code runs with higher priority than the management code and it is able to block the event handling chain .",
    "* abstract overview . * every time a new switch is connected to the network , our control logic will create a new reference to the network state accessible by the switch .",
    "the network map comprises an ` ip_to_mac ` and ` mac_to_port ` python dictionaries . according to openflow protocol , when a switch does nt know how to forward a packet it sends ( a part of ) it to the controller .",
    "our control logic process arp reply and arp request messages verifying their consistency according to the map .",
    "currently , suspicious arp request are signaled and logged as warnings .",
    "suspicious arp replies are actively managed : let s say that an attacker wants to impersonate a plc in the network , then our arp handling will detect the spoofing by telling to the relevant switch to block all the traffic coming from the attacker port and with the attacker mac .",
    "our mechanism detects both internal and external arp spoofing attempt and prevents both passive and active arp mitm attacks . under normal",
    "arp request / reply circumstances our controller dynamically update the map of the network . in listing  [ arp - code ] , we present an extract of our arp request detection code .    ....",
    "if sender_ip in self.ip_to_mac :    if sender_mac ! = self.ip_to_mac[sender_ip ] :      # internal attack      if sender_mac in self.ip_to_mac.values ( ) :        for key , value in self.ip_to_mac.items ( ) :            if value = = sender_mac :                attacker_ip = key                break        self.log_internal ( )        return true      # external attack      else :        self.log_external ( )        return true return false ....    our implementation defines a set of ad - hoc handling functions that are called before the standard pox event handlers .",
    "our switch potentially can redirect traffic to a dedicated intrusion detection system system for deep packet inspection .",
    "we are using permanent flow rules to model our static cps testbed configuration .",
    "our code can easily be integrated on any other pox - based sdn controller _ without _ changing the standard control logic .",
    "in addition to this simple attack detection and prevention strategy , we are currently developing more elaborated arp detection and mitigation techniques , in particular ( i ) an _ arp cache restoring _ handler , and ( ii ) spoofing detection based on _ static mapping _ of mac / ip pairs .",
    "the arp restoring feature periodically or asynchronously sends arp replies to potentially every host in the network forcing it to update its arp cache with fresh and consistent data .",
    "the second technique is the _ strong static premap _",
    "method , which allows the controller to send to every new datapaths a set of predefined flow rules to speedup initial traffic congestion and policy establishment ( e.g. who can talk to who ) .",
    "eventually , this mechanism can be extended a dynamic policy checker component , that is able to validate and restore the correct network state requesting and processing general and aggregated flow statistics directly from the datapaths .",
    "lastly , we would plan to extend our current centralized design into a more robust distributed scheme by using multiple synchronized controllers able to tolerate single point of failure in the control plane domain .",
    "security aspects of cps have been discussed in  @xcite , in particular in the context of smart power grid infrastructure and control .    in  @xcite , dong _",
    "et al _ propose a testbed that is similar to our minicps platform in several ways .",
    "in particular , they propose to use mininet as network emulation platform , a power grid simulation server , and a control center simulation server .",
    "the envisioned testbed uses mininet to simulate delays related to dynamic network reconfigurations in the case of failures . in general",
    ", the authors just discuss the use case of the smart power grid , with component such as sensors and actuators connected to a central control via rtus .",
    "we note that minicps differs from the testbed in  @xcite in several ways .",
    "most importantly , minicps focus is on sharing reproducible cps network topologies , in particular related to industrial control systems .",
    "minicps focuses on using a set of plc simulation tools , that directly interact with the network traffic , and the physical layer api .",
    "the physical layer api abstraction is not present in  @xcite , as the authors propose the use of a powerful power - grid simulation tool ( powerworld ) . in minicps ,",
    "the ( generic ) api would allow to combine different types of physical layer simulations ( e.g. , combining water flow , mechanical levers , temperature transfer ) . finally , the industrial protocol differs ( enip vs. dnp3 ) . from  @xcite",
    ", it seems that the proposed testbed was not yet fully implemented .    in  @xcite , a framework with similar intent as minicps has been proposed .",
    "the framework uses omnet++ as network simulation tool , and also features simulation of physical layer ( e.g. a chemical plants ) .",
    "the authors simulated denial of service attacks on the sensor data , and the resulting control actions .",
    "as omnet++ was used for network simulations , network communication was simulated as abstract messages that were routed through components , instead of simulating the full tcp / ip+industrial protocol stack . as a result",
    ", attacks such as our mitm ettercap manipulation could not be simulated in detail ( i.e. considering all fields of the cip / enip messages ) . on the other hand , simulations like  @xcite",
    "allow to use timescales other than real - time .    on the topic of sdn , sane  @xcite represents one the first practical sdn - based solution for secure network design .",
    "the proposed implementation already included common sdn core concepts like centralized control logic , high level network policy design and easy network scalability .    sdn and",
    "openflow projects involved from the beginning both academia and leading it industries , that eventually found the open networking foundation ( onf ) .",
    "there are several other recommended papers about sdn  @xcite and openflow  @xcite .",
    "in this work , we proposed minicps , which uses mininet together with a physical layer api and a set of matching component simulation tools to build a versatile and lightweight simulation system for cps networks . while currently the physical layer simulation is very simplistic ,",
    "we believe that our general framework will ( a ) researchers to build , investigate , and exchange ics networks , ( b ) network engineers to experiment with planned topologies and setups , and ( c ) security experts to test exploits and countermeasures in realistic virtualized environments .",
    "minicps builds on mininet to provide lightweight real - time network emulation , and extends mininet with tools to simulate typical cps components such as programmable logic controllers , which use industrial protocols ( ethernet / ip , modbus / tcp ) .",
    "in addition , minicps defines a simple api to enable physical - layer interaction simulation .",
    "we demonstrated applications of minicps in two example scenarios , and showed how minicps can be used to develop attacks and defenses that are directly applicable to real systems .",
    "we thank nicolas iooss for his support and contributions related to ethernet / ip support in minicps and the demonstrated attacks , and pierre gaulon for his help on the physical layer simulation .",
    "r.  de  oliveira , a.  shinoda , c.  schweitzer , and l.  rodrigues  prete .",
    "using mininet for emulation and prototyping software - defined networks . in _ communications and computing ( colcom ) , 2014 ieee colombian conference on _ , pages 16 , june 2014 .",
    "x.  dong , h.  lin , r.  tan , r.  k. iyer , and z.  kalbarczyk .",
    "software - defined networking for smart grid resilience : opportunities and challenges . in _ in proceedings of the cyber - physical system security workshop ( cpss ) _ , april 2015 .",
    "n.  handigol , b.  heller , v.  jeyakumar , b.  lantz , and n.  mckeown .",
    "reproducible network experiments using container - based emulation . in _ proceedings of the 8th international conference on emerging networking experiments and technologies _ , conext 12 , pages 253264 , new york , ny , usa , 2012 .",
    "acm .",
    "b.  lantz , b.  heller , and n.  mckeown . a network in a laptop : rapid prototyping for software - defined networks . in _ proc .",
    "of the sigcomm workshop on hot topics in networks _ , pages 19:119:6 , new york , ny , usa , 2010 .",
    "j.  lin , w.  yu , x.  yang , g.  xu , and w.  zhao . on false data injection attacks against distributed energy routing in smart grid . in _",
    "acm / ieee third international conference on cyber - physical systems ( iccps ) _ , 2012 .",
    "e.  wang , y.  ye , x.  xu , s.  yiu , l.  hui , and k.  chow .",
    "security issues and challenges for cyber physical system . in _ green computing and communications ( greencom ) , ieee / acm intl conference on intl conference on cyber , physical and social computing ( cpscom ) _ , pages 733 738 , december 2010 .",
    "a.  zaalouk , r.  khondoker , r.  marx , and k.  bayarou .",
    "orchsec : an orchestrator - based architecture for enhancing network - security using network monitoring and sdn control functions . in _",
    "network operations and management symposium ( noms ) _ , pages 19 , may 2014 .    b.  zhu , a.  joseph , and s.  sastry .",
    "a taxonomy of cyber attacks on scada systems . in _ internet of things ( ithings / cpscom ) ,",
    "2011 international conference on and 4th international conference on cyber , physical and social computing _ , pages 380388 , 2011 ."
  ],
  "abstract_text": [
    "<S> in recent years , tremendous effort has been spent to modernizing communication infrastructure in cyber - physical systems ( cps ) such as industrial control systems ( ics ) and related supervisory control and data acquisition ( scada ) systems . </S>",
    "<S> while a great amount of research has been conducted on network security of office and home networks , recently the security of cps and related systems has gained a lot of attention . </S>",
    "<S> unfortunately , real - world cps are often not open to security researchers , and as a result very few reference systems and topologies are available .    in this work , </S>",
    "<S> we present _ minicps _ , a cps simulation toolbox intended to alleviate this problem . </S>",
    "<S> the goal of minicps is to create an extensible , reproducible research environment targeted to communications and physical - layer interactions in cps . </S>",
    "<S> minicps builds on mininet to provide lightweight real - time network emulation , and extends mininet with tools to simulate typical cps components such as programmable logic controllers , which use industrial protocols ( ethernet / ip , modbus / tcp ) . </S>",
    "<S> in addition , minicps defines a simple api to enable physical - layer interaction simulation . in this work , </S>",
    "<S> we demonstrate applications of minicps in two example scenarios , and show how minicps can be used to develop attacks and defenses that are directly applicable to real systems . </S>"
  ]
}