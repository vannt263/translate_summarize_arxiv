{
  "article_text": [
    "in this paper , we study the approximation of multivariate integrals of smooth functions defined over the @xmath0-dimensional unit cube @xmath1 , @xmath2 by averaging function evaluations at @xmath3 points @xmath4 @xmath5 whereas simple monte carlo methods use randomly chosen sample points and achieve the root mean square error of order @xmath6 , quasi - monte carlo ( qmc ) methods aim at improving the convergence rate of the worst - case error by employing carefully designed deterministic point sets as quadrature points that are distributed as uniformly as possible .",
    "the koksma - hlawka inequality states that the integration error @xmath7 is bounded above by the star - discrepancy of a point set times the variation of an integrand in the sense of hardy and krause , see for example ( * ? ? ?",
    "* chapter  2 ) .",
    "since the variation of an integrand is independent of a point set , qmc methods have a deterministic worst - case error whose order equals that of the star - discrepancy and is typically given by @xmath8 for any @xmath9 .",
    "there are two prominent families for constructing qmc point sets : integration lattices @xcite and digital nets and sequences @xcite . regarding explicit constructions of classical digital sequences",
    ", we refer to ( * ? ? ?",
    "* chapter  8) and ( * ? ? ?",
    "* chapter  4 ) .",
    "polynomial lattice point sets that were first proposed in @xcite are one of the special constructions for classical digital nets and have been extensively studied in the literature , see for example ( * ? ? ?",
    "* chapter  10 ) and @xcite .",
    "we refer to qmc rules using a polynomial lattice point set as polynomial lattice rules .",
    "the drawback of classical digital nets and sequences is that they can not exploit the smoothness ( in the classical , non - digital sense ) of a function for numerical integration beyond order 1 , and thus , it is not possible for them to achieve a higher convergence rate for smooth integrands .",
    "higher order digital nets and sequences were introduced in @xcite , and they exploit the smoothness of an integrand and achieve the improved rate of convergence of order @xmath10 for any @xmath9 , where @xmath11 is an integer greater than 1 which measures the smoothness of a function .",
    "recent applications in the area of uncertainty quantification , in particular partial differential equations with random coefficients , are in need of using these types of quadrature rules , see for example @xcite .    two construction principles of higher order digital nets and sequences have been proposed so far .",
    "one is known as higher order polynomial lattice rules that are given by generalizing the definition of polynomial lattice rules , see for instance @xcite .",
    "the other is based on a digit interlacing function applied to classical digital nets and sequences whose number of components is a multiple @xmath12 of the dimension , see for instance @xcite .    in this study , we focus on the latter construction principle , wherein we use polynomial lattice point sets for interlaced components .",
    "we call such point sets _ interlaced polynomial lattice point sets _ and quadrature rules using interlaced polynomial lattice point sets _ interlaced polynomial lattice rules_. in this context , randomization of interlaced polynomial lattice point sets using digital shift and scrambling has been studied very recently in @xcite and @xcite respectively . what we are concerned with in this study is to construct _",
    "interlaced polynomial lattice rules that achieve the optimal convergence rate of the worst - case error for numerical integration of smooth functions .    in order to make interlaced polynomial lattice rules available",
    ", we need to have a computable quality criterion that enables us to obtain explicit constructions of good polynomial lattice point sets used for interlaced components . in this study , we consider weighted walsh spaces of smoothness @xmath11 with general weights and derive two upper bounds on the worst - case error for interlaced polynomial lattice rules . here",
    "we note that the weights model the dependence of an integrand on certain projections as discussed in @xcite .",
    "one bound applies to the cases @xmath13 and @xmath14 , while the other tighter bound applies only to the case @xmath13 . employing either of these bounds as a quality criterion",
    ", we show that the component - by - component ( cbc ) construction and the korobov construction can be used to obtain explicit constructions of good polynomial lattice point sets as basis for interlacing construction .",
    "interlaced polynomial lattice rules thus constructed achieve the worst - case error of order @xmath15 . when @xmath16 , this convergence rate is best possible @xcite ( apart from the power of the hidden @xmath17 factor ) .",
    "the resulting advantage of interlaced polynomial lattice rules over higher order polynomial lattice rules lies in the significantly reduced construction cost , which is an important aspect from a practical viewpoint .",
    "another resulting advantage of interlaced polynomial lattice rules over the use of digital @xmath18-nets or digital @xmath19-sequences for interlaced components as in @xcite are the better dependence of the worst - case error on the dimension and the possibility to construct the rules for a given set of weights in the walsh space ( as needed for instance in @xcite ) .",
    "the remainder of this paper is organized as follows . in section  [ sec : pre ] , we describe the necessary background and notation . in section  [ sec : error ]",
    ", we introduce the weighted walsh space of smoothness @xmath11 as in @xcite and derive two upper bounds on the worst - case error for interlaced polynomial lattice rules . in sections",
    "[ sec : cbc ] and  [ sec : korobov ] , we investigate the cbc construction and korobov construction respectively , and discuss the dependence of the worst - case error on the dimension for each construction .",
    "we use the following notation . let @xmath20 be the set of positive integers and @xmath21 . given a prime @xmath22 , let @xmath23 be the finite field consisting of @xmath22 elements .",
    "we identify the elements of @xmath24 with the set of integers @xmath25 .",
    "for @xmath26 such that @xmath27 we denote by @xmath28 the index set @xmath29 .",
    "given a prime @xmath22 , let us denote by @xmath30 the field of formal laurent series over @xmath24 .",
    "every element of @xmath30 has the form @xmath31 where @xmath32 is an arbitrary integer and all @xmath33 .",
    "furthermore , we denote by @xmath34 $ ] the set of all polynomials over @xmath24 . for a given integer @xmath35 , we define the mapping @xmath36 from @xmath30 to the interval @xmath37 by @xmath38 a non - negative integer @xmath39 whose @xmath22-adic expansion is given by @xmath40 will be identified with the polynomial @xmath41 $ ] . for @xmath42)^s$ ] and @xmath43)^s$ ] , we define the inner product as @xmath44 ,    \\end{aligned}\\ ] ] and we write @xmath45 if @xmath46 divides @xmath47 in @xmath34 $ ] . using this notation , a polynomial lattice point set is constructed as follows .",
    "[ def : polynomial_lattice](polynomial lattice rules ) let @xmath48 .",
    "let @xmath49 $ ] such that @xmath50 and let @xmath51)^s$ ] .",
    "a polynomial lattice point set @xmath52 is a point set consisting of @xmath53 points @xmath54 that are defined as @xmath55 for @xmath56 . a qmc rule using this point set",
    "is called a _ polynomial lattice rule _ with generating vector @xmath57 and modulus @xmath46 .",
    "in the remainder of this paper , we denote by @xmath52 a polynomial lattice point set , implicitly meaning that @xmath50 and the number of components in the vector @xmath57 is @xmath0 .",
    "we add one more notation and introduce the concept of the so - called _ dual polynomial lattice _ of a polynomial lattice point set . for",
    "@xmath58 with @xmath22-adic expansion @xmath59 , let @xmath60 be the polynomial of degree less than @xmath35 obtained by truncating the associated polynomial @xmath61 $ ] as @xmath62 where we set @xmath63 if @xmath64 .",
    "for a vector @xmath65 , we define @xmath66 .",
    "then the dual polynomial lattice is defined as follows .",
    "[ def : dual_net ] let @xmath52 be a polynomial lattice point set . then the dual polynomial lattice of @xmath52 is defined as @xmath67 where the inner product is defined in the sense of ( [ eq : inner_product ] ) .",
    "higher order digital nets exploit the smoothness of an integrand so that they achieve the optimal order of convergence of the deterministic worst - case error for functions with smoothness @xmath68 .",
    "the result is based on a bound on the decay of the walsh coefficients of smooth functions , see @xcite .",
    "we refer to @xcite for a brief introduction of the central ideas .    as mentioned in the introduction ,",
    "there exist two construction principles of higher order digital nets and sequences so far .",
    "one is called higher order polynomial lattice rules that are defined as follows . in definition",
    "[ def : polynomial_lattice ] , we set @xmath46 with @xmath69 and replace @xmath36 with @xmath70 for the mapping function .",
    "then a higher order polynomial lattice point set consists of the first @xmath53 points of a classical polynomial lattice point set with @xmath71 points ( where @xmath72 is recommended to equal @xmath73 for integrands of smoothness @xmath11 ) . to summarize , a higher order polynomial lattice point set is constructed as follows .",
    "[ def : ho_polynomial_lattice](higher order polynomial lattice rules ) let @xmath74 be such that @xmath75 .",
    "let @xmath49 $ ] such that @xmath76 and let @xmath51)^s$ ] .",
    "a higher order polynomial lattice point set is a point set consisting of @xmath53 points @xmath54 that are defined as @xmath77 for @xmath56 .",
    "a qmc rule using this point set is called a _ higher order polynomial lattice rule _ with generating vector @xmath57 and modulus @xmath46 .",
    "the existence of higher order polynomial lattice rules achieving the optimal order of convergence was established in @xcite and the cbc construction was proved to achieve the optimal order of convergence in @xcite .",
    "using an efficient calculation of the worst - case error in the weighted walsh space with product weights as implemented in @xcite , the computational cost of @xmath78 operations using @xmath79 memory is required for the cbc construction to find a good set of polynomials @xmath80 .",
    "thus the computational cost depends exponentially on @xmath11 when @xmath81 .",
    "the other construction principle of higher order digital nets is based on a digit interlacing function applied to classical digital nets and sequences whose number of components is @xmath12 , where @xmath82 is an integer greater than 1 , which is called the interlacing factor . in the digit interlacing approach ,",
    "we first construct a point set consisting of @xmath53 points in @xmath83 instead of @xmath84 . here",
    "we denote each point in @xmath83 by @xmath85 for @xmath56 .",
    "then every consecutive @xmath82 components of a point @xmath86 are digitally interlaced according to the following digit interlacing function of order @xmath82 for real numbers @xmath87 for @xmath88 and @xmath56 , where we denote the @xmath22-adic expansion of @xmath89 by @xmath90 for @xmath91 , and where we assume that the expansion of @xmath89 is unique in the sense that infinitely many digits are different from @xmath92 . in this way , the @xmath93-th point @xmath94 is obtained .",
    "thus , we have @xmath95 in the following , we simply write @xmath96 when @xmath97 is obtained by digitally interlacing every @xmath82 components of @xmath86 .    in this paper , we are concerned with the use of polynomial lattice point sets to generate a point set in @xmath83 that are used as interlaced components for higher order digital nets .",
    "we call qmc rules using such point sets _ interlaced polynomial lattice rules ( of order @xmath82)_. for clarity , we give the definition of interlaced polynomial lattice rules below .",
    "[ def : interlacing_polynomial_lattice](interlaced polynomial lattice rules ) let @xmath98 , @xmath99 .",
    "let @xmath49 $ ] such that @xmath50 and let @xmath100)^{ds}$ ] .",
    "an interlaced polynomial lattice point set of order @xmath82 is a point set consisting of @xmath53 points @xmath54 that are defined as @xmath101 where the point @xmath86 is the @xmath93-th point of a polynomial lattice point set @xmath102 which is given as @xmath103 for @xmath104 .",
    "a qmc rule using this point set is called an _",
    "interlaced polynomial lattice rule ( of order @xmath82 ) _ with generating vector @xmath57 and modulus @xmath46 .    by definition [ def : interlacing_polynomial_lattice ] , in order to construct good interlaced polynomial lattice rules , one needs to find suitable generating vectors @xmath105 . in the following ,",
    "we discuss computer search algorithms which find good generating vectors .    in the remainder of this paper , we simply write @xmath106 for an interlaced polynomial lattice point set of order @xmath82 , implicitly meaning that @xmath50 and the number of components in the vector @xmath57 is @xmath12 . in order to introduce the dual polynomial lattice of @xmath106 , we need one more notation .    for an interlacing factor @xmath99 and @xmath107 ,",
    "we denote the @xmath22-adic expansion of @xmath108 by @xmath109 for @xmath110 . then the digit interlacing function of order @xmath82 for non - negative integers is defined as @xmath111 we extend this function to vectors consisting of @xmath12 components as @xmath112 then the dual polynomial lattice of @xmath106 is defined as follows .",
    "[ def : dual_net2 ] let @xmath106 be an interlaced polynomial lattice point set of order @xmath82 . then the dual polynomial lattice of @xmath106 is defined as @xmath113 where @xmath114 is the dual polynomial lattice of @xmath102 as given in definition  [ def : dual_net ] , in which @xmath0 is replaced with @xmath12 .",
    "in this section , we first recall walsh functions and then introduce the weighted walsh space of smoothness @xmath11 as in @xcite , which contains all functions whose partial mixed derivatives up to @xmath11 in each variable are square integrable , where @xmath11 is an integer greater than 1 .",
    "next , we derive two upper bounds on the worst - case error for interlaced polynomial lattice rules of order @xmath82 .",
    "the first bound covers both the cases @xmath13 and @xmath14 , while the second tighter bound applies only to the case @xmath13 .      in order to introduce the weighted walsh space of smoothness @xmath11",
    ", we need to recall the definition of walsh functions .",
    "walsh functions were first introduced in @xcite for the case of base 2 and were generalized later , see for example @xcite .",
    "we refer to ( * ? ? ?",
    "* appendix  a ) for more information on walsh functions in the context of numerical integration .",
    "we first give the definition for the one - dimensional case .",
    "recall that every @xmath115 has a @xmath22-adic expansion @xmath116 with @xmath117 and that the coefficients @xmath118 are uniquely determined if we require that infinitely many of them are different from @xmath92 . in this paper",
    ", we will always assume this unique expansion .",
    "let @xmath22 be a prime and @xmath119 .",
    "we denote the @xmath22-adic expansion of @xmath58 by @xmath120 with @xmath121 .",
    "then the @xmath39-th @xmath22-adic walsh function @xmath122 is defined as @xmath123 for @xmath115 with its unique @xmath22-adic expansion @xmath116 .",
    "this definition can be generalized to the higher - dimensional case .    for a dimension @xmath124 ,",
    "let @xmath125 and @xmath65 .",
    "then the @xmath126-th @xmath22-adic walsh function @xmath127 is defined as @xmath128    we note that the system @xmath129 is a complete orthonormal system in @xmath130 , see ( * ? ? ?",
    "* theorem  a.11 ) . since we shall always use walsh functions in a fixed prime base @xmath22 , we omit the subscript and simply write @xmath131 or @xmath132 in the remainder of this paper . here",
    "we introduce the important connection between an interlaced polynomial lattice point set and walsh functions .",
    "[ lemma : dual_net_walsh ] let @xmath133 be an interlaced polynomial lattice point set of order @xmath82 and @xmath134 be its dual polynomial lattice as defined in definition  [ def : dual_net2 ] .",
    "then we have @xmath135    from the definition of @xmath136 , for any @xmath137 we have a unique @xmath138 such that @xmath139 .",
    "let us recall that @xmath96 for @xmath56 .",
    "then we have @xmath140 where the second equality stems from the definitions of @xmath141 , @xmath136 and the walsh functions .",
    "moreover , since @xmath142 is a polynomial lattice point set , the last expression equals 1 if @xmath143 and 0 otherwise , which is straightforward by combining definition  [ def : dual_net ] , ( * ? ? ?",
    "* lemma  10.6 ) and ( * ? ? ?",
    "* lemma  4.75 ) . considering definition  [ def : dual_net2 ]",
    ", the result follows .",
    "let us consider the walsh series of an integrand @xmath144 .",
    "because of the orthonormal property of walsh functions , we have @xmath145 where @xmath146 is the @xmath147-th walsh coefficient given by @xmath148 we refer to ( * ? ? ?",
    "* appendix  a.3 ) for a discussion on the pointwise absolute convergence of the walsh series .",
    "in fact , for any function @xmath149 in the weighted walsh space of smoothness @xmath11 which we shall consider in this paper , its walsh series converges to @xmath150 pointwise absolutely .    for functions with square integrable partial mixed derivatives up to @xmath11 in each variable , upper bounds on the walsh coefficients were previously obtained in @xcite .",
    "this result motivates the introduction of the weighted walsh space of smoothness @xmath11 , which we denote by @xmath151 .",
    "as shown in @xcite , the space @xmath151 contains certain weighted sobolev spaces of smoothness of order @xmath11 .",
    "we denote the @xmath22-adic expansion of @xmath152 by @xmath153 such that @xmath154 , @xmath155 and @xmath156 . given an integer @xmath157 , we define @xmath158 where @xmath159 is given by @xmath160 furthermore , we define @xmath161 and @xmath162 for @xmath163 and @xmath164 .",
    "we put @xmath165 and thus @xmath166 .",
    "then the weighted walsh space @xmath151 with general weights @xmath167 is defined as follows .",
    "[ def : walsh_space ] for smoothness @xmath68 and a set of weights @xmath167 , the weighted walsh space @xmath151 is a function space consisting of functions @xmath149 for which the norm @xmath168 is finite , where @xmath169 is the vector from @xmath170 with all the components whose indices are not in @xmath171 equal @xmath172 , and @xmath173 denotes the cardinality of @xmath171 .    in this study",
    ", we are interested in the worst - case error for numerical integration in @xmath151 using an interlaced polynomial lattice point set @xmath106 .",
    "the initial error for numerical integration in @xmath151 is defined by @xmath174 where @xmath175 denotes the empty point set . the worst - case error for numerical integration in @xmath151 using a point set @xmath176",
    "is defined by @xmath177 applying definition  [ def : dual_net2 ] and lemma  [ lemma : dual_net_walsh ] to ( * ? ? ?",
    "* theorem  5.1 ) , we have the following .    [ theorem : worst - case_error ] let @xmath106 be an interlaced polynomial lattice point set of order @xmath82 and @xmath134 be its dual polynomial lattice as defined in definition [ def : dual_net2 ] .",
    "then the initial error for numerical integration in @xmath151 is given by @xmath178 the worst - case error for numerical integration in @xmath151 using @xmath106 is given by @xmath179    from definition  [ def : dual_net2 ] , we obtain the following corollary of theorem  [ theorem : worst - case_error ] .",
    "it rewrites the worst - case error in terms of the dual polynomial lattice not of @xmath106 but of @xmath102 .",
    "[ corollary : worst - case_error ] let @xmath106 be an interlaced polynomial lattice point set of order @xmath82 and @xmath114 be the dual polynomial lattice of @xmath102 .",
    "the worst - case error for numerical integration in @xmath151 using @xmath106 is given by @xmath180 where @xmath181 is the vector from @xmath182 with all the components whose indices are not in @xmath183 equal @xmath172 , and we denote by @xmath184 the set of @xmath88 such that @xmath185 .    according to definition  [ def : dual_net2 ] , for any @xmath186 we have a unique @xmath187 such that @xmath139 . in the following ,",
    "we denote by @xmath188 the vector of @xmath189 non - negative integers @xmath190 .",
    "then we have @xmath191 swapping the order of sums , the result follows .      as shown in corollary  [ corollary : worst - case_error ] , the worst - case error can be represented in terms of the dual polynomial lattice of @xmath102 . however , it is hard to give a concise formula for the term @xmath192 in ( [ eq : worst_case_error ] ) , and thus , @xmath193 can not be employed as a quality criterion for searching for a good set of polynomials @xmath57 . as a remedy ,",
    "we derive an upper bound on @xmath193 for which a concise formula can be provided .    in order to derive an upper bound on the worst - case error , which covers the cases @xmath13 and @xmath194",
    ", we shall use the following lemma from ( * ? ? ?",
    "* lemma  4 ) about the lower bound on @xmath195 .",
    "[ lemma : weight ] for @xmath196 and @xmath197 , we have @xmath198 where @xmath199 is defined in ( [ eq : dick_weight ] ) .",
    "let us introduce the following notation @xmath200 further we write @xmath201 .",
    "then we have the following .    [ theorem : bound1 ] let @xmath106 be an interlaced polynomial lattice point set of order @xmath82 and @xmath114 be the dual polynomial lattice of @xmath102 .",
    "the worst - case error for numerical integration in @xmath151 using @xmath106 is bounded as @xmath202 where we have defined @xmath203    applying lemma  [ lemma : weight ] to corollary  [ corollary : worst - case_error ] , we have @xmath204 from the above definition of @xmath205 , the result follows .",
    "as we shall show below , the upper bound given in theorem  [ theorem : bound1 ] has a concise formula , so that we can employ this bound as a quality criterion for searching for a good set of polynomials @xmath57 . for simplicity , we denote this bound by @xmath206    [ corollary : criterion ] let @xmath106 be an interlaced polynomial lattice point set of order @xmath82 and @xmath207",
    "be a polynomial lattice point set with generating vector @xmath57 and modulus @xmath46 .",
    "we have a concise formula for @xmath208 , which is given by @xmath209 ,    \\end{aligned}\\ ] ] where @xmath210 and where @xmath211 for any @xmath212 in which we set @xmath213 .",
    "as in the proof of lemma  [ lemma : dual_net_walsh ] , for any @xmath196 and @xmath197",
    "@xmath214 using this property we have @xmath215 following similar lines as in ( * ? ? ?",
    "* section  2.2 ) , we obtain for any @xmath212 @xmath216 thus we have @xmath217 ,    \\end{aligned}\\ ] ] where the last equality stems from the fact that at least one element of @xmath218 must be chosen in @xmath183 for any @xmath219 .",
    "hence , the result follows .",
    "we derive another upper bound on the worst - case error , which applies to the case @xmath13 only . in the above subsection",
    ", we have used lemma  [ lemma : weight ] from ( * ? ? ?",
    "* lemma  4 ) to cover both cases @xmath13 and @xmath194 .",
    "that lemma was obtained through the averaging argument on the digit interlacing function for non - negative integers , see the proof of ( * ? ? ?",
    "* lemma  4 ) .",
    "focusing on the case @xmath13 , it is possible to obtain a tighter bound on the worst - case error without using the averaging argument .    as a counterpart of lemma  [ lemma : weight ] , we use the following lemma .",
    "[ lemma : weight2 ] let @xmath13 .",
    "for @xmath196 and @xmath197 , we have @xmath220 ,    \\end{aligned}\\ ] ] where @xmath199 is defined in ( [ eq : dick_weight ] ) .    for @xmath221 ,",
    ". then we have @xmath223 where @xmath224 is the vector in @xmath225 such that @xmath226 for @xmath227 and @xmath228 for @xmath229 .",
    "thus it suffices to prove that for any @xmath230 @xmath231 .",
    "\\end{aligned}\\ ] ]    let us consider the definition of the weight @xmath232 as in ( [ eq : dick_weight ] ) .",
    "in order to evaluate the weight @xmath233 for a given @xmath107 precisely , we need to reorder the summand in ( [ eq : integer_interlace ] ) according to the value of @xmath234 .",
    "instead we give a lower bound by only looking at the most significant digits for @xmath235 based on their @xmath22-adic expansions .",
    "since we have @xmath236 , it follows that @xmath237 \\\\      & = \\sum_{l\\in u_j}\\left [ d\\mu_{1}(k_{l})+l - jd \\right ] .",
    "\\end{aligned}\\ ] ] considering @xmath238 for any @xmath227 , the proof is complete .",
    "let us introduce the following notation @xmath239 further we write @xmath240 .",
    "then we have the following result , whose proof is almost the same as the proof of theorem  [ theorem : bound1 ] .    [",
    "theorem : bound2 ] let @xmath106 be an interlaced polynomial lattice point set of order @xmath82 and @xmath114 be the dual polynomial lattice of @xmath102 . for @xmath13 , the worst - case error for numerical integration in @xmath151 using @xmath106 is bounded as @xmath241    since the upper bound given in theorem  [ theorem : bound2 ] has a concise formula , we can also employ this bound as a quality criterion for searching for a good set of polynomials @xmath57 .",
    "for simplicity , we denote this bound by @xmath242 we note that @xmath243 does not depend on @xmath244 , so that we have omitted @xmath11 from the subscript . in the following ,",
    "we provide a concise formula for @xmath243 .",
    "since the proof is almost the same as that of corollary  [ corollary : criterion ] , we omit it .    [",
    "corollary : criterion2 ] let @xmath106 be an interlaced polynomial lattice point set of order @xmath245 and @xmath207 be a polynomial lattice point set with generating vector @xmath57 and modulus @xmath46 .",
    "we have a concise formula for @xmath243 , which is given by @xmath246 ,    \\end{aligned}\\ ] ] where we define @xmath247 for any @xmath212 in which we set @xmath213 .",
    "for the first criterion @xmath208 , every @xmath82 components have equal weights in the innermost product .",
    "this is essentially due to the averaging argument applied to obtain lemma  [ lemma : weight ] , see the proof of ( * ? ? ?",
    "* lemma  4 ) . for the second criterion @xmath243 on the other hand , every @xmath82 components have different weights @xmath248 for @xmath249 in the innermost product , indicating the relative importance of components with small @xmath250 .",
    "we employ @xmath208 or @xmath243 as a quality criterion in a component - by - component ( cbc ) algorithm and investigate the cbc construction as a means of finding a good set of polynomials @xmath57 .",
    "we show that interlaced polynomial lattice rules thus constructed achieve the optimal rate of convergence of the worst - case error and discuss the dependence of the worst - case error on the dimension for the cbc construction .      in the cbc construction",
    ", we set @xmath251 without loss of generality and restrict @xmath252 for @xmath253 such that @xmath254 and @xmath255 . in the following ,",
    "we denote by @xmath256 the set of all non - zero polynomials over @xmath24 with degree less than @xmath35 , that is , @xmath257:\\ ; \\deg(q)<m\\ ; \\text{and}\\ ; q\\ne 0\\}.    \\end{aligned}\\ ] ] assume that @xmath258 is given for some @xmath259 .",
    "the idea of the cbc construction is to search for a polynomial @xmath260 which minimizes @xmath261 or @xmath262 with @xmath263 unchanged .",
    "thus we need to define @xmath264 or @xmath265 for @xmath266 . using the formula in corollary  [ corollary : criterion ] , we have @xmath267 \\\\       & +",
    "\\frac{1}{b^m}\\sum_{n=0}^{b^m-1}\\sum_{v\\subseteq \\{1:j_0 - 1\\}}\\tilde{\\gamma}_{v\\cup \\{j_0\\}}\\prod_{j\\in v}\\left [ -1+\\prod_{l=1}^{d}\\left ( 1+\\phi_{\\alpha , d,(1)}(z_{n,(j-1)d+l})\\right)\\right ] \\\\       & \\times \\left [ -1+\\prod_{l=1}^{d_0}\\left ( 1+\\phi_{\\alpha , d,(1)}(z_{n,(j_0 - 1)d+l})\\right)\\right ] ,    \\end{aligned}\\ ] ] where @xmath268 and @xmath269 .",
    "we also have a similar formula for @xmath265 , which is obvious from corollary [ corollary : criterion2 ] .",
    "now the cbc construction employing @xmath208 as a quality criterion can be summarized as follows .",
    "[ algorithm : cbc ] for @xmath270 with @xmath271 and @xmath167 , do the following :    1 .",
    "choose an irreducible polynomial @xmath272 $ ] such that @xmath50 .",
    "2 .   set @xmath251 .",
    "3 .   for @xmath273 ,",
    "find @xmath274 which minimizes @xmath275 as a function of @xmath276 .",
    "when we employ @xmath243 as a quality criterion , we need to add one more condition @xmath13 and replace @xmath275 with @xmath262 in step 3 .",
    "we have the following theorems , which states that interlaced polynomial lattice rules constructed by algorithm [ algorithm : cbc ] achieve the optimal rate of convergence of the worst - case error . since the proof follows along almost the same argument as the proofs of ( * ? ? ?",
    "* theorem  2 ) and ( * ? ? ?",
    "* theorem  1 ) , we omit it .    [",
    "theorem : cbc_bound1 ] let @xmath270 , @xmath271 , and @xmath167 be given .",
    "suppose @xmath105 is found by algorithm  [ algorithm : cbc ] .",
    "then for any @xmath277 we have @xmath278^{1/\\lambda } ,    \\end{aligned}\\ ] ] for @xmath279 , where we write @xmath268 , @xmath269 and @xmath280 for @xmath281 , in which we define @xmath282    [ theorem : cbc_bound2 ] let @xmath270 , @xmath283 , and @xmath167 be given .",
    "suppose @xmath105 is found by algorithm  [ algorithm : cbc ] , where @xmath275 is replaced with @xmath284 .",
    "then for any @xmath277 we have @xmath285^{1/\\lambda } ,    \\end{aligned}\\ ] ] for @xmath279 , where we write @xmath268 , @xmath269 and @xmath286 ,    \\end{aligned}\\ ] ] for @xmath281 , in which we define @xmath287    we compare the bounds on @xmath208 and @xmath243 , which are given in theorems [ theorem : cbc_bound1 ] and [ theorem : cbc_bound2 ] respectively , with the bound on the worst - case error in @xmath151 for higher order polynomial lattice rules constructed component - by - component , which is given in ( * ? ? ?",
    "* theorem  3.1 ) .",
    "we consider @xmath288 and the unweighted case , that is , @xmath289 for all @xmath163 . in figure",
    "[ fig : bound_on_error ] , we compare these three bounds on the worst - case error in @xmath151 for @xmath290 and @xmath291 as a function of @xmath292 such that @xmath293 . in each graph , the number of points ranges from @xmath294 to @xmath295 .    for @xmath296 ,",
    "interlaced polynomial lattice rules based on @xmath208 are comparable to higher order polynomial lattice rules .",
    "for @xmath297 , however , interlaced polynomial lattice rules based on @xmath208 are inferior to higher order polynomial lattice rules . in every case , on the other hand , interlaced polynomial lattice rules based on @xmath243 are superior to higher order polynomial lattice rules especially for large @xmath292 , indicating the usefulness of interlaced polynomial lattice rules .     of higher order polynomial lattice rules ( lines ) and upper bounds on @xmath208 and @xmath243 of interlaced polynomial lattice rules ( dots and dashed - lines , respectively ) for @xmath298 with various choices of @xmath0 and @xmath299 . ]    in the following remark , we use the inequality , which states that for a sequence @xmath300 of non - negative real numbers we have @xmath301 for any @xmath292 with @xmath302 .    [",
    "remark : cbc_propagation ] let @xmath270 such that @xmath303 , and @xmath167 be given .",
    "suppose @xmath105 is found by algorithm  [ algorithm : cbc ] . from theorem  [ theorem : cbc_bound1 ]",
    ", we know @xmath304 for any @xmath9 .",
    "let @xmath305 be an integer such that @xmath306 and we consider @xmath307 for all @xmath163 .",
    "we simply write @xmath308",
    ". then we have @xmath309 for any @xmath9 , where we have used ( [ eq : jensen ] ) in the above inequality .",
    "this implies that interlaced polynomial lattice rules constructed by algorithm  [ algorithm : cbc ] for functions of smoothness @xmath11 still achieve the optimal rate of convergence of the worst - case error for functions of smoothness @xmath305 , as long as @xmath306 holds .",
    "[ remark : fast_cbc ] in a similar way to ( * ? ? ?",
    "* subsection  4,2 ) and ( * ? ? ? * subsection  4,2 ) , it is possible to apply the fast cbc construction using the fast fourier transform as in @xcite to our current setting .",
    "when @xmath310 for all @xmath311 , for example , interlaced polynomial lattice rules of order @xmath82 can be constructed in @xmath312 operations using @xmath313 memory .",
    "as mentioned in subsection  [ ssec : ho_digital_nets ] , the fast cbc construction of higher order polynomial lattice rules requires @xmath314 operations using @xmath315 memory when @xmath316 in definition  [ def : ho_polynomial_lattice ] .",
    "this significant reduction in the construction cost enhances the practical usefulness of interlaced polynomial lattice rules .",
    "we discuss the dependence of the worst - case error bounds on the dimension for the cbc construction . from theorem  [ theorem :",
    "cbc_bound1 ] , we have the following corollary .",
    "it is straightforward to show a similar corollary for theorem  [ theorem : cbc_bound2 ] .",
    "[ cor : tractability_cbc ] let @xmath270 , @xmath271 , and @xmath167 be given .",
    "suppose @xmath105 is found by algorithm  [ algorithm : cbc ] .",
    "we define @xmath317 .",
    "\\end{aligned}\\ ] ]    1 .",
    "assume @xmath318 for some @xmath319 .",
    "then the worst - case error is bounded independently of the dimension .",
    "2 .   assume @xmath320 for some @xmath319 and @xmath321 .",
    "then the worst - case error satisfies a bound which depends only polynomially on the dimension .",
    "assume @xmath320 for some @xmath319 and @xmath322 .",
    "from this assumption and theorem  [ theorem : cbc_bound1 ] together with the fact that @xmath208 is a bound on @xmath193 , we have @xmath323^{1/\\lambda } \\\\      & \\le \\frac{(a_{\\lambda , q}s^q)^{1/\\lambda}}{(b^m-1)^{1/\\lambda } } .",
    "\\end{aligned}\\ ] ] thus , the worst - case error is bounded independently of the dimension when @xmath324 , and satisfies a bound which depends only polynomially on the dimension when @xmath321 .",
    "as another means of finding a good set of polynomials @xmath57 , we investigate the korobov construction .",
    "we show that interlaced polynomial lattice rules thus constructed achieve the optimal rate of convergence of the worst - case error and discuss the dependence of the worst - case error on the dimension for the korobov construction .      in the korobov construction",
    ", we set @xmath251 without loss of generality and restrict @xmath252 for @xmath253 such that @xmath325 for a common @xmath326 .",
    "that is , we only consider a generating vector of the form @xmath327 for @xmath328 .",
    "the idea of the korobov construction is to search for a polynomial @xmath328 which minimizes @xmath329 or @xmath330 .",
    "thus the korobov construction employing @xmath331 as a quality criterion can be summarized as follows .",
    "[ algorithm : korobov ] for @xmath270 , @xmath271 , and @xmath167 , do the following :    1 .",
    "choose an irreducible polynomial @xmath272 $ ] such that @xmath50 .",
    "2 .   find @xmath47 which minimizes @xmath332 as a function of @xmath333 .",
    "when we employ @xmath243 as a quality criterion , we need to add one more condition @xmath13 and replace @xmath332 with @xmath334 in step 2 .",
    "we have the following theorems , which states that interlaced polynomial lattice rules thus constructed achieve the optimal rate of convergence of the worst - case error .    [",
    "theorem : korobov_bound1 ] let @xmath270 , @xmath271 , and @xmath167 be given .",
    "suppose that @xmath335 is found by algorithm  [ algorithm : korobov ] .",
    "then we have @xmath336^{1/\\lambda } ,    \\end{aligned}\\ ] ] for @xmath279 , where we write @xmath337 in which we define @xmath338    [ theorem : korobov_bound2 ] let @xmath270 , @xmath283 , and @xmath167 be given .",
    "suppose that @xmath335 is found by algorithm  [ algorithm : korobov ] , in which @xmath339 is replaced with @xmath340 .",
    "then we have @xmath341^{1/\\lambda } ,    \\end{aligned}\\ ] ] for @xmath279 , where we write @xmath342 ,    \\end{aligned}\\ ] ] in which we define @xmath343    the proof of these theorems follows along similar lines as the proof of ( * ? ? ?",
    "* theorem  4.7 ) , while additional treatment is required for interlacing components . in the following ,",
    "we only focus on theorem  [ theorem : korobov_bound1 ] and give its proof . in the proof",
    ", we shall use inequality ( [ eq : jensen ] ) and the following lemma .",
    "[ lemma : sum_weight ] for any @xmath292 with @xmath319 and any @xmath344 , we have @xmath345 where @xmath346 is defined as in theorem  [ theorem : korobov_bound1 ] .    from the definition of @xmath347 , we have @xmath348 thus we obtain @xmath349 hence the result follows .    since @xmath350 for all @xmath333",
    ", @xmath351 has to be less than or equal to the average of @xmath352 over @xmath333 for @xmath319 .",
    "thus , we have @xmath353 for @xmath319 , where we have used ( [ eq : jensen ] ) in the second inequality and introduced the notation @xmath354",
    ".    we now follow along an argument as in the proof of ( * ? ? ?",
    "* theorem  4.7 ) to count the number of @xmath333 satisfying @xmath355 for a given @xmath197 .",
    "first , we recall that for an irreducible polynomial @xmath272 $ ] with @xmath50 and a non - zero @xmath356 , the congruence @xmath357 has at most @xmath358 solutions @xmath333 .    for @xmath196 , we consider two cases :    1 .",
    "for all @xmath359 , let @xmath360 be such that @xmath361 .",
    "in this case , we have @xmath362 for all @xmath359 .",
    "thus we have @xmath363 2 .",
    "let @xmath364 be any non - empty subset of @xmath183 .",
    "for all @xmath365 , let @xmath360 be such that @xmath361 .",
    "further , for all @xmath366 , let @xmath367 be such that @xmath361 and @xmath368 . in this case , we have @xmath362 for all @xmath365 and @xmath369 for all @xmath366 .",
    "thus we have @xmath370    now we obtain @xmath371 \\\\      = & \\sum_{\\emptyset \\ne u\\subseteq \\{1:ds\\}}\\tilde{\\gamma}_{w(u)}^\\lambda\\left(\\frac{\\tilde{h}_{\\alpha , d,\\lambda,(1)}}{b^{\\lambda \\min(\\alpha , d)m}}\\right)^{|u| } \\\\      & + \\frac{ds-1}{b^m-1}\\sum_{\\emptyset \\ne u\\subseteq \\{1:ds\\}}\\tilde{\\gamma}_{w(u)}^\\lambda\\left [ \\tilde{h}_{\\alpha , d,\\lambda,(1)}^{|u|}-\\left ( \\frac{\\tilde{h}_{\\alpha , d,\\lambda,(1)}}{b^{\\lambda \\min(\\alpha , d)m}}\\right)^{|u|}\\right ] \\\\",
    "\\le & \\frac{1}{b^m-1}\\sum_{\\emptyset \\ne u\\subseteq \\{1:ds\\}}\\tilde{\\gamma}_{w(u)}^\\lambda \\tilde{h}_{\\alpha , d,\\lambda,(1)}^{|u|}+\\frac{ds-1}{b^m-1}\\sum_{\\emptyset \\ne u\\subseteq \\{1:ds\\}}\\tilde{\\gamma}_{w(u)}^\\lambda \\tilde{h}_{\\alpha , d,\\lambda,(1)}^{|u| } \\\\      = & \\frac{ds}{b^m-1}\\sum_{\\emptyset \\ne u\\subseteq \\{1:ds\\}}\\tilde{\\gamma}_{w(u)}^\\lambda \\tilde{h}_{\\alpha , d,\\lambda,(1)}^{|u| } \\\\      = & \\frac{ds}{b^m-1}\\sum_{\\emptyset \\ne v\\subseteq \\{1:s\\}}\\tilde{\\gamma}_{v}^\\lambda \\sum_{\\substack{\\emptyset \\ne u\\subseteq \\{1:ds\\}\\\\ w(u)=v}}\\tilde{h}_{\\alpha , d,\\lambda,(1)}^{|u| } \\\\",
    "= & \\frac{ds}{b^m-1}\\sum_{\\emptyset \\ne v\\subseteq \\{1:s\\}}\\tilde{\\gamma}_{v}^\\lambda \\left [ -1+(1+\\tilde{h}_{\\alpha , d,\\lambda,(1)})^d\\right]^{|v| } ,    \\end{aligned}\\ ] ] where we have used lemma  [ lemma : sum_weight ] in the first equality . hence the result follows .",
    "[ remark : korobov_propagation ] let @xmath270 , @xmath271 , and @xmath167 be given .",
    "suppose @xmath105 is found by algorithm  [ algorithm : korobov ] . from theorem [ theorem : korobov_bound1",
    "] , we know @xmath372 for any @xmath9 . as in remark",
    "[ remark : cbc_propagation ] , it can be concluded that interlaced polynomial lattice rules constructed by algorithm  [ algorithm : korobov ] for functions of smoothness @xmath11 still achieve the optimal rate of convergence of the worst - case error for functions of smoothness @xmath305 , as long as @xmath306 holds .    [",
    "remark : korobov_comparison ] for the korobov construction of higher order polynomial lattice rules , we need to search for @xmath47 not from @xmath373 but from @xmath374 such that it minimizes the worst - case error , see @xcite .",
    "it implies that @xmath47 has the exponentially larger number of candidates when @xmath316 as compared to algorithm  [ algorithm : korobov ] .",
    "therefore , interlaced polynomial lattice rules can significantly reduce the number of candidates while still achieving the optimal rate of convergence of the worst - case error as shown in theorems  [ theorem : korobov_bound1 ] and  [ theorem : korobov_bound2 ] .      as in subsection  [ ssec : tractability_cbc ] , here we discuss the dependence of the worst - case error bounds on the dimension for the korobov construction . from theorem  [ theorem :",
    "korobov_bound1 ] , we have the following corollary .",
    "it is straightforward to show a similar corollary for theorem  [ theorem : korobov_bound2 ] .",
    "since the proof is almost the same as that of corollary  [ cor : tractability_cbc ] , we omit it .",
    "let @xmath270 , @xmath271 , and @xmath167 be given .",
    "suppose @xmath105 is found by algorithm  [ algorithm : korobov ] .",
    "we define @xmath375 .",
    "\\end{aligned}\\ ] ] assume @xmath376 for some @xmath319 and @xmath322 .",
    "then the worst - case error satisfies a bound which depends only polynomially on the dimension .",
    "this work was supported by grant - in - aid for jsps fellows no.24 - 4020 .",
    "the author would like to thank josef dick and two anonymous referees for their valuable comments ."
  ],
  "abstract_text": [
    "<S> quadrature rules using higher order digital nets and sequences are known to exploit the smoothness of a function for numerical integration and to achieve an improved rate of convergence as compared to classical digital nets and sequences for smooth functions . </S>",
    "<S> a construction principle of higher order digital nets and sequences based on a digit interlacing function was introduced in [ j. dick , siam j. numer . </S>",
    "<S> anal . </S>",
    "<S> , 45 ( 2007 ) pp .  21412176 ] , which interlaces classical digital nets or sequences whose number of components is a multiple of the dimension .    in this paper </S>",
    "<S> , we study the use of polynomial lattice point sets for interlaced components . </S>",
    "<S> we call quadrature rules using such point sets _ interlaced polynomial lattice rules_. we consider weighted walsh spaces containing smooth functions and derive two upper bounds on the worst - case error for interlaced polynomial lattice rules , both of which can be employed as a quality criterion for the construction of interlaced polynomial lattice rules . </S>",
    "<S> we investigate the component - by - component construction and the korobov construction as a means of explicit constructions of good interlaced polynomial lattice rules that achieve the optimal rate of the worst - case error . through this approach </S>",
    "<S> we are able to obtain a good dependence of the worst - case error bounds on the dimension under certain conditions on the weights , while significantly reducing the construction cost as compared to higher order polynomial lattice rules .    </S>",
    "<S> _ keywords _ : quasi - monte carlo ; numerical integration ; higher order digital nets ; interlaced polynomial lattice rules </S>"
  ]
}