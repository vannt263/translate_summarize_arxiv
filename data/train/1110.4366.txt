{
  "article_text": [
    "searching is undoubtedly one of the most basic problems in computer science and computational physics . in this context ,",
    "searching is not just restricted to a physical database but could also be searching through a state space for an entry which fulfills a specific clause such as the constraint satisfiability problem ( @xmath0-sat ) .",
    "the classical complexity of such a task scales linearly with the size of the dataset , @xmath1 , to be searched .",
    "intuitively , it is easy to see this must be the case as every item must be checked in turn until the specific item is found . on average , half the items will have to be checked before the correct one is located .",
    "this leads to the best classical scaling which can be achieved , @xmath2 .",
    "one of the most important quantum algorithms discovered thus far is the searching algorithm of grover @xcite .",
    "grover showed that an item could be found from a set of @xmath1 in a time quadratically faster than the classical case , @xmath3 .",
    "grover s algorithm has been shown to be both optimal and also one of the few quantum algorithms which is provably faster than any possible classical algorithm @xcite .",
    "several years after the introduction of this algorithm , shenvi , kempe and whaley @xcite gave a quantum search algorithm based instead on the discrete time quantum walk , which was first introduced with algorithmic applications in mind by aharonov et al .",
    "@xcite and ambainis et al .",
    "this quantum walk approach to the search problem is able to match the quadratic speed up of grover s algorithm .",
    "the quantum walk search algorithm has been studied in detail and many improvements have been made since its introduction .",
    "in fact , due to the many uses of searching in algorithms , the quantum walk search algorithm has become a standard tool in developing new quantum algorithms @xcite .",
    "the quantum walk has also recently been shown to be universal for quantum computation and hence a computational primitive @xcite , again showing it is a powerful tool .    in @xcite ,",
    "the items of the dataset are laid out as the vertices of an undirected graph , specifically a hypercube of dimension @xmath4 , on which the quantum walk can be solved analytically @xcite",
    ". other recent work by potoek et al .",
    "@xcite has improved the original algorithm by adding an additional coin dimension , allowing the probability of the marked state to approach unity after just one run of the algorithm .",
    "this brings the running time of the quantum walk search algorithm very close to the optimal for searching an unsorted dataset , @xmath5 .",
    "zalka @xcite has previously shown that , for a probability of finding the marked state to be one , this is the best that can be achieved .",
    "however , the hypercube studied in @xcite is a highly connected but non - physical structure . in order to make the algorithm more physical ,",
    "the study of the search algorithm on lower dimensional structures was started by benioff @xcite .",
    "he considered the additional cost of the time it would take a robot searcher to move between different spatially separated data points on @xmath6-dimensional lattices , stating that in two spatial dimensions , @xmath7 , no speedup was apparent .",
    "subsequently , aaronson and ambainis ( aa03 ) @xcite introduced an algorithm based on a divide and conquer approach , contradicting this claim with a run time of @xmath3 in dimensions @xmath8 and @xmath9 when @xmath10 .",
    ".summary of runtimes of quantum search algorithms in various dimensions . [ cols=\"<,^,^,^,^\",options=\"header \" , ]     [ percprobs ]    it is fairly obvious that at this critical percolation threshold , the properties of the lattice change significantly . for lattices with a percolation probability below the percolation threshold , it is clear that many of the sites in the lattice will be unreachable , whereas above the threshold the opposite is true ( though perhaps through a less direct route than in a fully connected lattice ) . due to their transport properties , percolation lattices",
    "are widely used to model various phenomena including forest fires , disease spread and the size and movement of oil deposits . for a good introduction to both the theory and use of percolation lattices ,",
    "see stauffer and aharony @xcite .      we are using the percolation lattices as a description for the database arrangement that we wish to run the quantum walk search algorithm upon . as",
    "the disorder introduced by using percolation lattices is random , we ran the search algorithm on many different percolation lattices ( 5000 ) , and averaged over the results .",
    "it is obvious that at low probabilities of vertices ( or edges ) existing , that there may be sections of the graph that the quantum walk is unable to reach .",
    "in fact , at very low probabilities , it is likely that the marked state will be in a small , unconnected region of the lattice where it will never be ` found ' . in these cases , this means the marked state will only ever be able to attain a small portion of the total probability .",
    "we set the condition on the algorithm that the probability of the marked state must reach at least twice the value of the initial superposition in order for it to succeed .",
    "similarly , the time to find this maximum probability is artificially smaller than it should be if the entire lattice was connected .",
    "this is due to the walker only having to coalesce on the marked state over a small piece of the lattice . in order to combat this",
    ", we set the time to find the marked state as zero if the algorithm failed .",
    "if it succeeded , we took the reciprocal of the time to find the marked state .",
    "after averaging over many different percolation lattices , we again took the reciprocal of this averaged time in order to give a clearer view on how the algorithm scaled with time .",
    "we also set the probability of the marked state to be zero if the algorithm failed .    in order to run the quantum walk search algorithm on percolation lattices",
    ", we have to deal with the fact that the lattice is not @xmath6-regular . in this",
    "setting , we can not just add self loops to make the lattice regular as in @xcite as we want to know exactly how the disorder affects the algorithm .",
    "instead , we take the grover coin for the degree of the vertex in question and ` pad ' it out with the identity operator for the edges that are missing .",
    "for example if we have a vertex with just edge 3 missing , the operator would be @xmath11 where @xmath12 represents the grover coin with edges 1 , 2 and 4 present . in the case of a two dimensional percolation lattice , there are 16 combinations of edges that can be present / missing . for a three dimensional percolation lattice ,",
    "this increases to 64 combinations . in order to deal with this",
    ", we maintain the labelling of the edges as previously and assign a binary number to each edge , depending on whether an edge is present or not .",
    "the example above , eq .  ( [ percgrover ] ) , would therefore be @xmath13 .",
    "this creates the @xmath14 combinations we require .",
    "there is then a fixed mapping between each binary number and the correct coin for each vertex .",
    "in addition to the coin operator changing , we must also modify the initial state to account for the missing vertices or edges .",
    "this could be done in several ways .",
    "we try to stick as closely to the initial state of the basic quantum walk search algorithm by just splitting the state into an equal superposition over all the possible edges present .",
    "we now show our initial results for the quantum walk search algorithm on two dimensional site percolation lattices .",
    "we firstly show , fig .",
    "[ twodprobperc ] , how the maximum probability of the marked state varies with both the size of the dataset and the percolation probability .",
    "we see , as we would think intuitively , that as the percolation probability drops and the structure becomes less connected , the maximum probability of the marked state decreases .        , varies with the size of the dataset and the percolation probability for site percolation in two dimensions.,scaledwidth=75.0% ]    we note that the scaling of the maximum probability initially maintains the logarithmic scaling of the basic 2d lattice before eventually reverting to the scaling of the line , @xmath15 , at lower percolation probabilities . in the case of site percolation",
    ", this change in scaling seems to occur at roughly probabilities below @xmath16 , not significantly higher than the critical percolation threshold .",
    "this is expected as at the critical threshold , the structure has in general a single path from one side to the other , effectively a 1d lattice .",
    "our numerical results match this behaviour , with the scaling of the probability of the marked state matching that of the line at this point . at",
    "percolation probabilities higher than the critical threshold , we see a change in the prefactor to the scaling of the maximum probability of the marked state .",
    "we show this prefactor to the logarithmic scaling in fig .",
    "[ twodpercprobscaling ] .",
    "it is easy to see that as soon as the percolation probability passes the critical threshold , @xmath17 , the scaling increases in a linear fashion .",
    "we also note here , after investigation on a finer scale , that there is a gradual change in this prefactor scaling around the critical percolation threshold .",
    "the time to find the marked state follows a similar behaviour , gradually changing from the quadratic scaling of the 2d lattice to a classical linear scaling as @xmath18 reduces .",
    "we show the time to find the marked state for site percolation in fig .",
    "[ twodtimesite ] .        , to the scaling of the time to find the maximum probability of the marked state , from the data in fig .",
    "[ twodtimesite ] , varies with the size of the dataset and the percolation probability for site percolation in two dimensions .",
    "also shown is @xmath19 to indicate the lower bound of the algorithm ( dashed line).,scaledwidth=75.0% ]    we see that when @xmath20 , the scaling of the time to find the marked state is very similar to the classical run time , @xmath2 .",
    "the kinks in this scaling ( and the other percolation probabilities ) are just from averaging over many percolation lattices . given more time , a higher number could be run and thus a smoother scaling obtained .",
    "it can be seen that the time to find the marked state seems to retain the quadratic quantum speed up , even in the presence of a non - trivial level of disorder . as in the work of leung",
    "@xcite , it seems as though the scaling of the time to find the marked state may follow a fractional scaling from quadratic back to linear as , @xmath21 where @xmath22 is the time to find the marked state and @xmath1 is the size of the dataset .",
    "we follow the analysis in @xcite to establish how the scaling of the time to find the marked state varies with the percolation probability .",
    "we show , in fig .",
    "[ twodperctimescaling ] , how the value of the coefficient @xmath23 varies as the level of disorder is increased .",
    "we can see the quadratic speedup is maintained , @xmath24 , for percolation probabilities of roughly @xmath25 .",
    "below this probability , the quantum speed up disappears gradually to end at the classical run time when @xmath26 .",
    "this is for the same reason as in the scaling of the maximum probability of the marked state , at the critical threshold the structure is effectively a line . below the critical threshold ,",
    "the algorithm fails ( the marked state is probably in a disconnected region ) .",
    "we note here that the coefficient , @xmath23 , is not exactly 0.5 as we expect for the quadratic speed up .",
    "this is most probably due to the fact that percolation lattices are random in nature , and we only average over a specific number . if we averaged over more , then we would see a more constant scaling of the coefficient at @xmath19 , i.e. a full quadratic speed up .",
    "we now turn our attention to three dimensional site percolation lattices .",
    "we follow the same analysis as in the two dimensional case .",
    "we firstly show , fig .",
    "[ threedprobperc ] , how the maximum probability of the marked state varies as the percolation probability is decreased .",
    "we see , as in the two dimensional case , that the basic scaling of the maximum probability matches that of the three dimensional lattice until the percolation probability drops to roughly the critical percolation threshold , @xmath27 .",
    "we show in fig .",
    "[ threedpercprobscaling ] , how the prefactor to this scaling of the maximum probability varies with the percolation probability . in the same way as the two dimensional case , we see an almost linear scaling of the prefactor once the percolation probability has passed the critical threshold",
    ". the scaling here does nt seem to be as close as in the two dimensional case .",
    "this is probably because in the case of three dimensional percolation lattices , there are many more combinations of lattice which can be created . averaging over more of these lattices would most probably give a smoother fit .",
    ", varies with the size of the dataset and the percolation probability for site percolation in three dimensions.,scaledwidth=75.0% ]    the time to find the marked state , in the three dimensional case , follows the same behaviour as in the two dimensional percolation lattices .",
    "we show in fig .",
    "[ threedtimesite ] , how the time to find the marked state varies with the percolation probability .",
    "we see , fig .  [ threedperctimescaling ] , as in the two dimensional case , that the scaling coefficient , @xmath23 , gradually changes from the quadratic speed up to the classical run time .",
    "again , we note that the quadratic speed up is maintained for a non - trivial amount of disorder before gradually changing to the classical run time at the point @xmath26 .        , to the scaling of the time to find the maximum probability of the marked state , from the data in fig .",
    "[ threedtimesite ] , varies with the size of the dataset and the percolation probability for site percolation in three dimensions .",
    "also shown is @xmath19 to indicate the lower bound of the algorithm ( dashed line).,scaledwidth=75.0% ]    we do note , as in the two dimensional case , that the coefficient is not exactly 0.5 .",
    "this can be explained in the same way as the two dimensional percolation lattices , and averaging over more lattices should give a constant value of the coefficient @xmath23 .",
    "in this paper , we have discussed various factors which affect the efficiency of the quantum walk search algorithm .",
    "we introduce a simple form of tunnelling which allows us to modify the substrate we use as the database arrangement , and use this to interpolate between structures with varying dimensionality and degree .",
    "we find that although the dependence on the spatial dimension of the underlying substrate is strong , it is not the only factor which affects the efficiency of the algorithm .",
    "we also find secondary dependencies on the connectivity and symmetry of the structure .",
    "in addition , we use percolation lattices to model disorder in the lattice in a simple way . in this case",
    "we find , counter - intuitively , that the algorithm is able to maintain the quantum speed up even in the presence of non trivial levels of disorder .",
    "we now discuss our findings for each factor in turn .",
    "we have shown two different ways in which we can interpolate between structures of differing spatial dimension .",
    "firstly , we use a tunnelling operator to vary specific edges of a lattice enabling us to gradually change the spatial dimension of the lattice . in this case",
    ", we find a sudden change in the scaling of the maximum probability of the marked state as soon as there is even a very small probability of the edges existing .",
    "this seems to indicate that the ` strength ' of the edges in the lattice is of little importance , with the dependence on the specific spatial dimension taking precedence .",
    "however , we find that the prefactor to the scaling of this probability varies with the strength of the tunnelling edges , increasing as the tunnelling strength increases .",
    "the basic scaling of the time to find the marked state is not affected by the change in dimensionality , we note though that the prefactor to the scaling decreases as the tunnelling strength increases , hence the algorithm becomes more efficient .",
    "the other case we consider is the case of lattices with varying height or depth , for example , a 3d lattice with fixed width and height but of varying depth .",
    "although this structure is still strictly three dimensional , when the depth is very low and the width ( height ) is large , the quantum walker will see the structure as almost a basic 2d cartesian lattice .",
    "suprisingly , in this case we see a gradual change in scaling in the maximum probability of the marked state . at low depths of the lattice ,",
    "the scaling is almost the same as the lower spatial dimensional structure gradually changing to the higher dimensional structure scaling as the depth increases to become equal to that of the other dimensions .",
    "this highlights the importance of full symmetry in the quantum walk search algorithm .",
    "we show how the search algorithm is affected by varying connectivity in regular lattices .",
    "we use our simple model of tunnelling to allow us to interpolate between structures such as the square lattice ( @xmath28 ) and the triangular lattice ( @xmath29 ) . with this model , we are able to identify how the prefactors to the scaling of both the maximum probability of the marked state and the time to find the marked state vary with the connectivity of the structure .",
    "the basic scaling of the time to find the marked state , @xmath3 , is not affected by the increase in connectivity but we find the prefactor to this scaling reduces as the connectivity of the structure being searched increases .",
    "this is due to the additional paths the walker can take to coalesce on the marked state , thus increasing the efficiency of the algorithm in both two and three dimensions .",
    "the maximum probability of the marked state is also affected by the connectivity of the underlying structure .",
    "we find that the additional connectivity does not affect the basic scaling of @xmath30 in the two dimensional case . only moving to three spatial dimensions",
    "allows the walker to find the marked state with a constant probability , @xmath31 .",
    "however , we do note that in both two and three dimensions the prefactors to this scaling , in general , increase as the connectivity of the structure increases .",
    "again , this increases the efficiency of the algorithm as it may not have to be repeated so many times .",
    "we also find that the probability of the marked state does not increase uniformly with the additional connectivity .",
    "we see the prefactor in the scaling drop and then recover itself before increasing as the tunnelling strength increases .",
    "this is due to the dynamics of the quantum walk on a structure with some broken symmetry , i.e. low tunnelling strength between vertices .",
    "we briefly investigated the dynamics of the walk by starting the walker in a single location and monitoring how quickly it spread outwards with varying tunnelling strengths .",
    "this confirmed our results for the search algorithm as we found that the spread of the quantum walk also dropped for lower tunnelling strengths before recovering and eventually increasing at higher tunnelling probabilities .",
    "however , this work on the spreading of the walk compared to tunnelling strength is by no means exhaustive and it would be interesting to look more deeply into this in the future .",
    "we studied both two and three dimensional percolation lattices as a way to model disorder in the quantum walk search algorithm .",
    "we are interested in how the algorithm performs with increasing disorder .",
    "we use percolation lattices as a random substrate for the database arrangement we wish to search .",
    "we find , in both the two and three dimensional cases , that as the level of disorder increases , the maximum probability of the marked state decreases . whilst the percolation probability is higher than the critical percolation threshold , the basic scaling of the maximum probability of the marked state matches that of the basic lattice ( in that spatial dimension ) .",
    "once the percolation probability drop to the critical threshold , this scaling changes to that of the line , @xmath15 . this",
    "is expected as at this point the structure is effectively a line .",
    "we also note the prefactor to the scaling of the maximum probability of the marked state increases linearly once the percolation probability is greater than the critical threshold .",
    "the time to find the marked state follows a similar behaviour .",
    "we find that as the disorder increases , the time to find the marked state also increases .",
    "surprisingly though , we note that the quadratic speed up is maintained for a non - trivial level of disorder , before gradually reverting to the classical run time , @xmath2 , as the disorder reaches the critical percolation threshold .",
    "this seems to match the results of @xcite , which show a fractional scaling for the spreading of the quantum walk from a maximal quantum spreading to a classical spreading at and below the critical threshold .",
    "however , this is in contrast to the work of krovi and brun @xcite who highlight the effect of localisation on the quantum walk when defects are introduced into the substrate .",
    "both these factors indicate that the quantum walk search algorithm seems to be more robust to the effects of disorder and symmetry than the basic spreading of the quantum walk .",
    "this could be due to the fact that the initial state of the walker is spread across the whole lattice .",
    "we have seen that the algorithm becomes less efficient as the disorder increases , but at percolation probabilities greater than the critical threshold , the algorithm still seems to be viable , although more amplification of the result may be required .",
    "+   + _ acknowledgments _ the authors would like to thank jiannis pachos and noah linden for useful and interesting discussions .",
    "nl was funded by the uk engineering and physical sciences research council .",
    "vk is funded by a uk royal society university research fellowship .",
    "f.  magniez , a.  nayak , p.  c. richter , and m.  santha . .",
    "in _ proceedings of the 20th annual acm - siam symposium on discrete algorithms ( soda ) _ , pages 8695 .",
    "society for industrial and applied mathematics , 2009 ."
  ],
  "abstract_text": [
    "<S> we numerically study the quantum walk search algorithm of shenvi , kempe and whaley [ pra * 67 * 052307 ] and the factors which affect its efficiency in finding an individual state from an unsorted set . </S>",
    "<S> previous work has focused purely on the effects of the dimensionality of the dataset to be searched . here </S>",
    "<S> , we consider the effects of interpolating between dimensions , connectivity of the dataset , and the possibility of disorder in the underlying substrate : all these factors affect the efficiency of the search algorithm . </S>",
    "<S> we show that , as well as the strong dependence on the spatial dimension of the structure to be searched , there are also secondary dependencies on the connectivity and symmetry of the lattice , with greater connectivity providing a more efficient algorithm . </S>",
    "<S> in addition , we also show that the algorithm can tolerate a non - trivial level of disorder in the underlying substrate . </S>"
  ]
}