{
  "article_text": [
    "efficient multiplication in finite fields is a central task in the implementation of most public key cryptosystems .",
    "a great amount of work has been devoted to this topic ( see @xcite or @xcite for a comprehensive list ) .",
    "the two types of finite fields which are mostly used in cryptographic standards are binary finite fields of type @xmath6 and prime fields of type @xmath7 , where @xmath8 is a prime ( cf .",
    "efforts to efficiently fit finite field arithmetic into commercial processors resulted into applications of medium characteristic finite fields like those reported in @xcite and @xcite .",
    "medium characteristic finite fields are fields of type @xmath9 , where @xmath8 is a prime slightly smaller than the word size of the processor , and has a special form that simplifies the modular reduction .",
    "mersenne prime numbers constitute an example of primes which are used in this context .",
    "the security parameter is given by the length of the binary representations of the field elements , and the extension degree @xmath2 is selected appropriately .",
    "due to security considerations , the extension degree for fields of characteristic @xmath10 or medium characteristic is usually chosen to be prime .    with the introduction of the method of duursma and lee for the computation of the tate pairing ( see @xcite ) , fields of type @xmath3 for @xmath2 prime have attracted special attention .",
    "computing the tate pairing on elliptic curves defined over @xmath3 requires computations both in @xmath11 and in @xmath1 . in the paper @xcite",
    ", calculations are implemented using the tower of extensions @xmath12 multiplications in @xmath13 and @xmath1 are done using @xmath0 and @xmath14 multiplications , respectively .",
    "this requires a total @xmath4 multiplications in @xmath3 . in this paper",
    "we make use of the same extension tower , using @xmath0 multiplications in @xmath3 to multiply elements in @xmath13 . since we represent the elements of @xmath15 as polynomials with coefficients in @xmath13 , we can use lagrange interpolation to perform the multiplication .",
    "this requires only @xmath16 multiplications in @xmath13 , thus reducing the total number of @xmath3 multiplications from @xmath4 to @xmath5 .",
    "the method that we propose has a slightly increased number of additions in comparison to the karatsuba method .",
    "notice however that for @xmath17 ( which is the range used in the cryptographic applications ) a multiplication in @xmath3 requires many more resources than an addition , therefore the overall resource consumption is reduced , as also shown by the results of our software experiments shown in section  [ sec : efficient ] .    in comparison to the classical multiplication method",
    ", the karatsuba method ( see @xcite , @xcite , and @xcite ) reduces the number of multiplications while introducing extra additions . since the cost of addition grows linearly in the length of the polynomials , when the degree of the field extension gets larger multiplication will be more expensive than addition .",
    "hence the above tradeoff makes sense .",
    "the negligibility of the cost of addition compared to that of multiplication has gone so far that the theory of multiplicative complexity of bilinear maps , especially polynomial multiplication , takes into account only the number of variable multiplications ( see e.g. @xcite and @xcite ) .",
    "obviously this theoretical model is of practical interest only when the number of additions and the costs of scalar multiplications can be kept small . a famous result in the theory of multiplicative complexity establishes a lower bound of @xmath18 for the number of variable multiplications needed for the computation of the product of two polynomials of degree at most @xmath19 .",
    "this lower bound can be achieved only when the field contains enough elements ( see @xcite or  @xcite ) .",
    "the proof of the theorem uses lagrange evaluation - interpolation , which is also at the core of our approach .",
    "this is similar to the short polynomial multiplication ( convolution ) methods for complex or real numbers in  @xcite . in order for this method to be especially efficient ,",
    "the points at which evaluation and interpolations are done are selected as primitive @xmath20st roots of unity . in a field of type @xmath13",
    ", fifth roots of unity do not exist for odd @xmath2 .",
    "we overcome this problem by using fourth roots of unity instead .",
    "notice that a primitive fourth root of unity always exist in a field of type @xmath21 we use an extra point to compute the fifth coefficient of the product .",
    "an advantage of using a primitive fourth root of unity is that the corresponding interpolation matrix will be a @xmath22 dft matrix , and the evaluations and interpolations can be computed using radix-@xmath10 fft techniques ( see @xcite or @xcite ) to save some further number of additions and scalar multiplications .",
    "the current work can be considered as the continuation of that in @xcite for combination of the linear - time multiplication methods with the classical or karatsuba ones to achieve efficient polynomial multiplication formulas .",
    "our work is organized as follows .",
    "section  [ sec : lagrange ] is devoted to explaining how evaluation - interpolation can be used in general to produce short polynomial multiplication methods . in section  [ sec : rootsofunity ] we show how to apply this method to our special case , and produce explicit formulas for multiplication of polynomials of degree at most @xmath10 over @xmath13 . in section  [ sec : efficient ] we fine - tune our method using fft techniques , and give timing results of software implementations and also explicit multiplication formulas .",
    "section  [ sec : anotherexample ] shows how our results can be used in conjunction with the method of duursma - lee for computing the tate pairing on some elliptic and hyperelliptic curves .",
    "section  [ sec : conclusion ] contains some final remarks and conclusions .",
    "we now explain the lagrange evaluation - interpolation for polynomials with coefficients in @xmath9 . throughout this section @xmath2",
    "is not assumed to be prime ( in the next section we will replace @xmath2 by @xmath23 ) .",
    "let @xmath24\\\\ & b(z ) = a_{0}+a_{1}z+ \\cdots + a_{n}z^{n } \\in \\f_{p^{m}}[z]\\end{aligned}\\ ] ] be given such that @xmath25 we represent the product of the two polynomials by @xmath26 and let @xmath27 be a vector with @xmath18 distinct entries .",
    "evaluation at these points is given by the map @xmath28 @xmath29 \\rightarrow \\f_{p^{m}}^{2n+1}\\\\ & \\phi_{e}(f ) = ( f(e_{0 } ) , \\cdots , f(e_{2n})).\\end{aligned}\\ ] ] let @xmath30 denote the vectors @xmath31 , @xmath32 , and @xmath33 , respectively .",
    "using the above notation we have @xmath34 where @xmath35 is the vandermonde matrix @xmath36    the @xmath18 coefficients of the product @xmath37 can be computed using interpolation applied to the evaluations of @xmath38 at the chosen @xmath18 ( distinct ) points of @xmath39 .",
    "these evaluations can be computed by multiplying the evaluations of @xmath40 and @xmath41 at these points .",
    "this can be formally written as @xmath42 where we denote componentwise multiplication of vectors by @xmath43 .",
    "equivalently , if we let @xmath44 be the inverse of the matrix @xmath45 , we have that @xmath46 which allows us to compute the vector @xmath47 , whose entries are the coefficients of the polynomial @xmath38 .",
    "when condition ( [ equ : fieldsizecondition ] ) is satisfied , the polynomial multiplication methods constructed in this way have the smallest multiplicative complexity , i.e. the number of variable multiplications in @xmath39 achieves the lower bound @xmath18 ( see  @xcite ) .",
    "indeed ( [ equ : fieldsizecondition ] ) can be relaxed to hold even for @xmath48 . in this case",
    ", a virtual element @xmath49 is added to the finite field .",
    "this corresponds to the fact that the leading coefficient of the product is the product of the leading coefficients of the factors .",
    "application of this method to practical situations is not straightforward , since the number of additions increases and eventually dominates the reduction in the number of multiplications . in order for this method to be efficient",
    ", @xmath19 must be much smaller than @xmath50 .",
    "an instance of this occurs when computing in extensions of medium size primes ( see e.g.  @xcite ) .",
    "the case of small values of @xmath8 is more complicated , even for small values of @xmath19 .",
    "we recall that in this case the entries of the matrix @xmath35 are in @xmath9 and are generally represented as polynomials of length @xmath51 over @xmath7 . for multiplication of @xmath35 by vectors to be efficient , the entries of this matrix must be chosen to be sparse .",
    "however , this gives no control on the sparsity of the entries of @xmath52 .",
    "indeed one requirement for the entries of @xmath52 , in the basis @xmath53 , to be sparse is that the inverse of the determinant of @xmath35 , namely @xmath54 has a sparse representation in @xmath53 .",
    "we are not aware of any method which can be used here . on the other hand",
    ", it is known that if the @xmath55 s are the elements of the geometric progression @xmath56 , @xmath57 , and @xmath58 is a @xmath20st primitive root of unity , then the inverse @xmath52 equals @xmath59 times the vandermonde matrix whose @xmath55 s are the elements of the geometric progression of @xmath60 ( see  @xcite ) .",
    "we denote these two matrices by @xmath61 and @xmath62 , respectively .",
    "the above fact suggests that choosing powers of roots of unity as interpolation points should enable us to control the sparsity of the entries of the corresponding vandermonde matrix .",
    "roots of unity are used in different contexts for multiplication of polynomials , e.g. in the fft ( see @xcite ) or for the construction of short multiplication methods in @xcite . in the next section",
    "we discuss how to use fourth roots of unity to compute multiplication in @xmath63 , using only @xmath16 multiplications in @xmath13 .",
    "elements of @xmath1 can be represented as polynomials of degree at most @xmath10 over @xmath13 .",
    "therefore , their product is given by a polynomial of degree at most @xmath64 with coefficients in @xmath13 . in order to use the classical evaluation - interpolation method",
    "we would need a primitive fifth root of unity .",
    "this would require @xmath65 to be a multiple of @xmath16 , and this is never the case unless @xmath2 is even ( recall that cryptographic applications require @xmath2 to be prime ) .",
    "however using the relation @xmath66 we can compute the coefficients of @xmath67 via @xmath68 where @xmath58 is a fourth root of unity .",
    "now we apply ( [ equ : interpolateinfinity ] ) and ( [ equ:2nfirst ] ) to find explicit formulas for multiplying two polynomials of degree at most @xmath10 over @xmath13 , where @xmath69 is a prime .",
    "we follow the tower representation of @xcite , i.e. @xmath70/(f(x))\\\\   \\f_{3^{2 m } } \\cong \\f_{3^{m}}[y]/(y^2 + 1)\\\\      \\end{array } \\label{equ : towerf2}\\ ] ] where @xmath71 $ ] is an irreducible polynomial of degree @xmath2 .",
    "denote by @xmath72 the equivalence class of @xmath73 .",
    "note that for odd @xmath74 , @xmath75 and hence @xmath76 is irreducible over @xmath11 since the roots of @xmath76 are fourth roots of unity .",
    "let @xmath77 be polynomials in @xmath78^{\\le 2}.$ ] our goal is computing the coefficients of the polynomial @xmath79 evaluation of @xmath40 and @xmath41 at @xmath80 can be done by multiplying the vandermonde matrix of powers of @xmath72 @xmath81 by the vectors @xmath82 and @xmath83 , respectively .",
    "this yields the vectors @xmath84 let @xmath85 be the componentwise product of @xmath86 and @xmath87 @xmath88 using ( [ equ : interpolateinfinity ] ) and ( [ equ:2nfirst ] ) we get @xmath89 where @xmath90 and @xmath91 thus the explicit formulas for the coefficients of the product are @xmath92",
    "we owe the efficiency of our method to the cooley - tukey factorization of the dft matrix ( @xcite ) .",
    "the matrices @xmath93 and @xmath94 in ( [ equ : vs ] ) and ( [ equ : ws ] ) are not sparse , but they are the dft matrices of the fourth roots of unity @xmath72 and @xmath95 , respectively . hence they can be factored as a product of two sparse matrices as shown in ( [ equ : vsfactor ] ) and ( [ equ : wsfactor ] ) .",
    "@xmath96 the factorizations in ( [ equ : vsfactor ] ) and ( [ equ : wsfactor ] ) allow us to efficiently compute the product of the matrices @xmath93 and @xmath94 with vectors .",
    "notice also that the product of an element @xmath97^{\\leq 1}\\cong\\f_{3^{2m}}$ ] with @xmath72 equals @xmath98 . hence multiplying by @xmath72 an element of @xmath13 is not more expensive than a change of sign .",
    "notice that in alternative to the vandermonde matrix corresponding to @xmath72 we could use the matrix @xmath99 whose inverse is @xmath100 obviously the latter matrices are sparse but since they do not possess any special structure up to our knowledge , multiplying them by vectors is more expensive than multiplying @xmath93 and @xmath94 .",
    "multiplying elements in the field @xmath101 is required in the tate pairing computation on the group of @xmath102-rational points of the elliptic curves @xmath103 defined over @xmath104 .",
    "an efficient algorithm for the computation of the tate pairings on these curves is discussed in @xcite .",
    "we have implemented the multiplication over @xmath105 using the karatsuba method , the montgomery method from @xcite , and our proposed method on a pc with an amd athlon 64 processor 3500 + .",
    "the processor was running at 2.20  ghz and we have used the ntl library ( see @xcite ) for multiplication in @xmath102 .",
    "please note that although we have chosen @xmath106 for benchmarking purposes , these methods can be applied to any odd @xmath74 as mentioned in section  [ sec : rootsofunity ] .",
    ".comparison of the execution times of the karatsuba and montgomery multipliers with the proposed method for @xmath1 . [ cols=\"<,^\",options=\"header \" , ]     the execution times are shown in table  [ tab : runningtime ] .",
    "for the karatsuba and the proposed methods we have used the tower of extensions @xmath107 where @xmath108/(x^{97}+x^{16}+2)\\\\ \\f_{3^{2 \\cdot 97 } } & \\cong \\f_{3^{97}}[y]/(y^2 + 1)\\\\ \\f_{3^{6 \\cdot 97 } } & \\cong \\f_{3^{2 \\cdot 97}}[z]/(z^{3}-z-1),\\end{aligned}\\ ] ] whereas for the montgomery method the representation @xmath109/(y^{6}+y-1)\\ ] ] has been used .",
    "our implementations show that the new method is almost @xmath110% faster than the karatsuba and @xmath111% faster than the montgomery method , which is almost the ratio of saved multiplications .",
    "this provides further evidence for the fact that the number of multiplications in @xmath102 is a good indicator of the performance of the method for @xmath105 .",
    "our multiplications are based on the following formulas .",
    "let @xmath112 be given as : @xmath113 where @xmath114 and @xmath115 , @xmath116 are roots of @xmath117 and @xmath118 , respectively .",
    "let their product @xmath119 be @xmath120 the coefficients @xmath121 , for @xmath122 are computed using : @xmath123",
    "consider the family of hyperelliptic curves @xmath124 defined over @xmath125 , for @xmath126 mod .",
    "@xmath64 . let @xmath2 be such that @xmath127 ( in practice @xmath2 will often be prime ) , and consider the @xmath39-rational points of the jacobian of @xmath128 .",
    "an efficient implementation of the tate pairing on these groups is given by duursma and lee in @xcite and @xcite , where they extend analogous results of barreto et .",
    "al . and of galbraith et .",
    "for the case @xmath126 .",
    "notice that this family of curves includes the elliptic curves @xmath129 that we mentioned in the last section . in the aforementioned papers",
    "it is also shown that the curve @xmath128 has embedding degree @xmath130 . in order to compute the tate pairing on this curve ,",
    "one works with the tower of field extensions @xmath131 where the fields are represented as @xmath132/(y^2 + 1)\\;\\;\\;\\mbox{and}\\;\\;\\ ; \\f_{p^{2pm}}\\cong\\f_{p^{2m}}[z]/(z^p - z+2d).\\ ] ] let @xmath133^{\\leq p-1}$ ] , @xmath134 @xmath135 then @xmath136 has @xmath137 coefficients , two of which can be computed as @xmath138 in order to determine the remaining @xmath139 coefficients , we can write a vandermonde matrix with entries in @xmath140 using , e.g. , the elements @xmath141    another option is writing a vandermonde matrix using a primitive @xmath142-st root of unity combined with the relation : @xmath143 notice that there is an element of order @xmath142 in @xmath144 , since @xmath145 .",
    "if @xmath146 is a primitive element in @xmath144 , then @xmath147 is a primitive @xmath142st root of unity .",
    "in this paper we derived new formulas for multiplication in @xmath1 , which use only @xmath5 multiplications in @xmath3 .",
    "being able to efficiently multiply elements in @xmath1 is a central task for the computation of the tate pairing on elliptic and hyperelliptic curves .",
    "our method is based on the fast fourier transform , slightly modified to be adapted to the finite fields that we work on .",
    "our software experiments show that this method is at least @xmath111% faster than other proposed methods in the literature .",
    "we have also discussed use of these ideas in conjunction with the general methods of duursma - lee for tate pairing computations on elliptic and hyperelliptic curves .",
    "the research described in this paper was funded in part by the swiss national science foundation , registered there under grant number 107887 , and by the german research foundation ( deutsche forschungsgemeinschaft dfg ) under project ru 477/8 .",
    "we thank also the reviewers for their precise comments .",
    "bailey , d.v . , paar , c. : optimal extension fields for fast arithmetic in public - key algorithms . in krawczyk , h. , ed .",
    ": advances in cryptology : proceedings of crypto  98 , santa barbara  ca .",
    "number 1462 in lecture notes in computer science , springer - verlag ( 1998 ) 472485    avanzi , r.m . , mihilescu , p. : generic efficient arithmetic algorithms for paffs ( processor adequate finite fields ) and related algebraic structures ( extended abstract ) . in : selected areas in cryptography ( sac 2003 ) , springer - verlag ( 2003 ) 320334      kerins , t. , marnane , w.p . ,",
    "popovici , e.m . ,",
    "barreto , p.s.l.m . : efficient hardware for the tate pairing calculation in characteristic three . in : cryptographic hardware and embedded systems ,",
    "number 3659 in lecture notes in computer science , springer - verlag ( 2005 ) 412426    karatsuba , a. , ofman , y. : multiplication of multidigit numbers on automata .",
    "soviet physics ",
    "doklady * 7 * ( 1963 ) 595596 translated from doklady akademii nauk sssr , vol .",
    "145 , no .  2 , pp .",
    "293294 , july , 1962 .",
    "von  zur gathen , j. , shokrollahi , j. : . in preneel , b. , tavares , s. , eds . : selected areas in cryptography ( sac 2005 ) .",
    "number 3897 in lecture notes in computer science , kingston , on , canada , springer - verlag ( 2005 ) 359369        duursma , i. , lee , h.s . : tate pairing implementation for hyperelliptic curves @xmath148 . in : advances in cryptology ",
    "asiacrypt 2003 .",
    "volume 2894 of lecture notes in comput .",
    "springer , berlin ( 2003 ) 111123"
  ],
  "abstract_text": [
    "<S> efficient computation of the tate pairing is an important part of pairing - based cryptography . recently with the introduction of the duursma - lee method </S>",
    "<S> special attention has been given to the fields of characteristic @xmath0 . </S>",
    "<S> especially multiplication in @xmath1 , where @xmath2 is prime , is an important operation in the above method . in this paper </S>",
    "<S> we propose a new method to reduce the number of @xmath3-multiplications for multiplication in @xmath1 from @xmath4 in recent implementations to @xmath5 . </S>",
    "<S> the method is based on the fast fourier transform and its explicit formulas are given . </S>",
    "<S> the execution times of our software implementations for @xmath1 show the efficiency of our results .    </S>",
    "<S> * keywords : * finite field arithmetic , fast fourier transform , lagrange interpolation , tate pairing computation </S>"
  ]
}