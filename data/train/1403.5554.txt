{
  "article_text": [
    "in sequential decision making , adaptive sensing , and adaptive control , we are frequently faced with optimally choosing a string ( finite sequence ) of actions over a finite horizon to maximize an objective function .",
    "however , computing the optimal strategy ( optimal sequence of actions ) is often difficult .",
    "one approach is to use dynamic programming via bellman s principle for optimality ( see , e.g. , @xcite ) .",
    "however , the computational complexity of this approach grows exponentially with the size of the action space and the decision horizon . because of this inherent complexity , for years",
    ", there has been interest in developing approximation methods for solving dynamic programming problems .",
    "although a wide range of approximate dynamic programming ( adp ) methods have been developed ( see , e.g. , @xcite ) , a general systematic technique to provide performance guarantees for them has remained elusive . in this paper",
    ", we will develop a systematic approach to deriving guaranteed bounds for adp schemes .",
    "our approach is inspired by our recent results in @xcite and @xcite ) on bounding the performance of greedy strategies in optimization of string - submodular functions .",
    "submodularity of functions over finite sets plays an important role in discrete optimization ( see , e.g. , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , and @xcite ) . it has been shown that , under submodularity , the greedy strategy provides at least a constant - factor approximation to the optimal strategy .",
    "for example , the celebrated result of nemhauser _ et al .",
    "_  @xcite states that for maximizing a monotone submodular function @xmath1 over a uniform matroid such that @xmath2 ( here @xmath3 denotes the empty set ) , the value of the greedy strategy is no less than a factor @xmath4 of that of the optimal strategy .",
    "this is a powerful result .",
    "but a drawback is that submodular functions studied in most previous papers are defined on the power set of a given finite set .",
    "in contrast , in adaptive control and sensing , we are interested in choosing a string of action sequentially , and the value of the objective function depends on the _ order _ of these actions . in consequence , we can not apply the result of nemhauser _ et al . _",
    "@xcite or its related results on submodularity over finite sets .    to compare the greedy and optimal strategies for functions defined over strings , in @xcite and @xcite ,",
    "we have introduced the notion of _ string_-submodularity , which builds on the notion of set - submodularity in combinatorial optimization .",
    "we have shown that , under string - submodularity , any greedy strategy is suboptimal by a factor of at worst @xmath4 , entirely consistent with the result of nemhauser _ et al . _",
    "our framework also includes characterizing the _ curvature _ of string - submodular functions , which roughly corresponds to the quantitative `` degree '' of submodularity .",
    "in fact , there are several notions of curvature ( to be described later ) .",
    "subject to curvature , we have derived suboptimality bounds for greedy strategies that are strictly better than @xmath4 .",
    "these results represent the state - of - the - art in bounding greedy strategies in string - submodular optimization problems .    in this paper , inspired by the bounding techniques in @xcite and @xcite",
    ", we develop the first systematic approach to deriving performance bounds for general adp methods for optimal control problems . to set up our approach , in section [ sc : ii ] , we review our string - submodularity results , notions of curvature , and the corresponding bounds from . in section [ sc : iii ]",
    ", we first describe a general optimal control problem and a class of adp schemes for approximating optimal control solutions .",
    "we then describe our approach to bounding the performance of such adp schemes .",
    "the idea is to define a string - submodular optimization problem for which the optimal strategy is the optimal control solution , and the greedy strategy is the adp solution .",
    "though , inspired by our previous work , the bounding of adp schemes is based on a new technique for general string - optimization problems . the results in section [ sc : ii ] , simply set the stage and terminology for new developments and results that we will present in section [ sc : iv ] .",
    "we show that any adp solution achieves a performance that is at least a factor of @xmath0 of the performance of the optimal control solution ( satisfying bellman s optimality principle ) .",
    "the factor @xmath0 depends on the specific adp scheme , in way that we will explicitly characterize . in section [ sc :",
    "v ] , we present a few examples of adp schemes to illustrate the application of our results .",
    "in particular , we consider rollout policies which represent a well - studies family of adp schemes ( see , e.g. , @xcite ) . finally , in section [ sc : vi ]",
    ", we present our concluding remarks .",
    "in this section , we review our string - submodularity results , notions of curvature , and the corresponding bounds from @xcite and @xcite .",
    "these results show that greedy strategies for optimizing a string - submodular function achieve at least a factor of @xmath5 of the performance of optimal strategies , which are characterized by bellman s optimality principle .",
    "the factor @xmath5 depends on the specific objective function to be optimized and its various curvatures , but it is at least @xmath4 .",
    "the results presented here set the stage , terminology , and the inspiration for our new developments in section [ sc : iv ] for bounding the performance of adp schemes .",
    "let @xmath6 be a set of possible actions . at each stage @xmath7 , we choose an action @xmath8 from @xmath6 .",
    "let @xmath9 be a _ string _ of actions taken over @xmath10 consecutive stages , where @xmath11 for @xmath12 .",
    "let @xmath13 be the set of all possible strings of actions .",
    "note that @xmath14 corresponds to the empty string ( no action taken ) , denoted by @xmath15 .    for a given string @xmath9 ,",
    "we define its _ string length _ as @xmath10 , denoted @xmath16 .",
    "if @xmath17 and @xmath18 are two strings in @xmath19 , we say @xmath20 if @xmath21 and @xmath22 for each @xmath23 .",
    "moreover , we define string _ concatenation _ as @xmath24 .",
    "if @xmath25 and @xmath26 are two strings in @xmath19 , we write @xmath27 if we have @xmath28 for some @xmath29 . in other words , @xmath25 is a _ prefix _ of @xmath26 .",
    "* string submodularity . * a function from strings to real numbers , @xmath30 , is _ string submodular",
    "_ if    * @xmath31 has the _ forward - monotone _ property , i.e. , @xmath32 @xmath33 . *",
    "@xmath31 has the _ diminishing - return _ property , i.e. , @xmath34 , @xmath35 .    we assume , without loss of generality , that @xmath36 .",
    "otherwise , we can replace @xmath31 with the marginalized function @xmath37 . from the forward - monotone property , we know that @xmath38 for all @xmath39",
    ".    * curvatures . *",
    "we define several notions of curvature for @xmath31 as follows",
    ".    1 .   _ total backward curvature _ of @xmath31 : @xmath40 2 .",
    "_ total backward curvature of @xmath31 with respect to string @xmath39 _ : @xmath41 3 .",
    "_ total forward curvature of @xmath31 : _ @xmath42 4",
    ".   _ total forward curvature of @xmath31 with respect to @xmath25 _ : @xmath43 5 .",
    "_ elemental forward curvature of @xmath31 _ : @xmath44      consider the problem of finding a string @xmath39 , with a length @xmath45 not larger than @xmath46 ( prespecified ) , to maximize the objective function @xmath31 , that is @xmath47    we define optimal and greedy strategies for as follows :    * _ optimal strategy _ : consider the problem of finding a string that maximizes @xmath31 under the constraint that the string length is not larger than @xmath46 .",
    "we call a solution of this problem an _ optimal strategy _",
    "( a term we already have used repeatedly before ) .",
    "note that if the function @xmath31 is forward monotone and there exists an optimal strategy , then there exists one with length @xmath46 . *",
    "_ greedy strategy _ : a string @xmath48 is called _ greedy _ if @xmath49 @xmath50 where @xmath51 denotes the set of actions that maximize @xmath52 .",
    "let @xmath53 be the subset of @xmath19 with maximal string length @xmath46 : @xmath54 we call @xmath53 a _",
    "uniform structure_. note that the way we define uniform structures is similar to the way independent sets associated with uniform matroids are defined .",
    "we now present the relationship between total curvatures and approximation bounds for the greedy strategy .",
    "@xcite ( greedy approximation bounds involving total curvatures ) .",
    "consider a string submodular function @xmath31 .",
    "let @xmath55 be a solution to .",
    "then , any greedy string @xmath56 satisfies    * @xmath57 * @xmath58    [ thm1 ]    under the framework of maximizing submodular set functions , similar results are reported in @xcite . however , the forward and backward algebraic structures are not exposed in @xcite because the total curvature there does not depend on the order of the elements in a set . in the setting of maximizing string submodular functions",
    ", the above theorem exposes the roles of forward and backward algebraic structures in bounding the greedy strategy .",
    "the results in theorem 1 imply that for a string submodular function , we have @xmath59 . otherwise , part ( i ) of theorem  1 would imply that @xmath60 , which is absurd . moreover ,",
    "recall that if the function is backward monotone , then @xmath61 and we have the following result .",
    "@xcite ( universal greedy approximation bounds involving total curvatures ) .",
    "suppose that @xmath31 is string - submodular and backward monotone .",
    "then ,    * @xmath62 * @xmath63    [ cor1 ]    note that the bounds @xmath64 and @xmath65 are independent of the length constraint @xmath46 .",
    "therefore , the above bounds are universal lower bounds for the greedy strategy for all possible length constraints . part ( i ) of corollary  [ cor1 ] implies that in the backward monotone case , where @xmath66 , any greedy string @xmath56 satisfies the universal bound @xmath67 .",
    "@xcite ( greedy approximation bounds involving elemental curvature ) .",
    "consider a forward - monotone function @xmath31 with elemental forward curvature @xmath68 .",
    "let @xmath55 be an optimal solution to .",
    "suppose that @xmath69 for @xmath70 .",
    "then , any greedy string @xmath56 satisfies @xmath71 where @xmath72 if @xmath73 and @xmath74 if @xmath75 .",
    "[ thm2 ]    recall that @xmath68 does not depend on the length constraint @xmath46 .",
    "therefore , the lower bound using @xmath76 is a universal lower bound for the greedy strategy .",
    "now suppose that @xmath31 is string submodular .",
    "then , we have @xmath77 . because @xmath78 is decreasing as a function of @xmath68 , an immediate consequence of theorem  [ thm2 ]",
    "is that any greedy string @xmath56 satisfies the universal bound @xmath67 .      in the previous section , we considered the case where @xmath53 is a uniform structure . in @xcite and @xcite",
    ", we have also studied the case where @xmath53 is a _ non - uniform _ structure , by introducing the notion of string - matroid , and have derived bounds that quantify the performance of greedy strategies relative to optimal strategies in terms of various curvatures of the objective function .",
    "we leave these results out for the sake of brevity and refer the reader to @xcite and @xcite for details .",
    "a number of other researchers ( see @xcite , @xcite , and @xcite ) have also considered bounding the performance of greedy strategies using extensions of set submodularity to string - submodularity . in particular",
    ", streeter and golovin  @xcite showed that if the function @xmath31 is _ forward _ and _ backward _ monotone : @xmath79 and @xmath80 for all @xmath81 , and @xmath31 has the diminishing - return property : @xmath82 for all @xmath83 , @xmath81 such that @xmath25 is a prefix of @xmath26 , then the greedy strategy achieves at least a @xmath4-approximation of the optimal strategy .",
    "however , the notions of string submodularity and various curvature that we have introduced in our recent work @xcite , @xcite provide us with weaker sufficient conditions under which the greedy strategy still achieves at least a @xmath4-approximation of the optimal strategy .",
    "in this section , we first describe a general optimal control problem and a class of adp schemes for approximating optimal control solutions .",
    "we then describe our approach to bounding the performance of such adp schemes .      to begin our formulation of a general optimal control problem , let @xmath84 denote a set of states and @xmath85 a set of control actions .",
    "given @xmath86 and functions @xmath87 and @xmath88 for @xmath89 , consider the optimal control problem @xmath90    think of @xmath91 as the _ control action _",
    "applied at time @xmath10 and @xmath92 the _ state _ visited at time @xmath10 .",
    "the real number @xmath93 is the _ reward _ accrued at time @xmath10 by applying @xmath91 at state @xmath92 .",
    "this form of optimal control problem covers a wide variety of optimization problems found in many areas , ranging from engineering to economics .",
    "in particular , many adaptive sensing problems have this form ( see , e.g. , @xcite ) .",
    "the solution to the optimal control problem above is characterized by bellman s principle of dynamic programming .",
    "to explain , for each @xmath89 , define functions @xmath94 by @xmath95 where @xmath96 , @xmath97 .",
    "the optimal control problem can be written as @xmath98 wher @xmath99 is given .",
    "let @xmath100 be an optimal solution to this problem , and given @xmath99 , define @xmath101 and @xmath102 , @xmath103 .",
    "this is the sequence of states visited as a result of the optimal control actions @xmath100 .",
    "then , bellman s principle states that for @xmath89 , we have @xmath104 with the convention that @xmath105",
    ". moreover , any sequence of control actions satisfying ( [ eqn:3 ] ) above is optimal .",
    "the term @xmath106 is called the _ value - to - go _ ( vtg ) .",
    "bellman s principle provides a method to compute an optimal solution : we use ( [ eqn:3 ] ) to iterate backwards over the time indices @xmath107 , keeping the states as variables , working all the way back to @xmath108 .",
    "this is the familiar _ dynamic programming algorithm_. however , the procedure suffers from the _ curse of dimensionality _ and is therefore impractical for many problems of interest : merely storing the iterates @xmath109 requires an exponential amount of memory .",
    "therefore , designing computationally tractable approximation methods remains a topic of active research .      a well - studied class of _ approximate dynamic programming _ ( adp ) approaches rests on approximating the vtg @xmath106 by some other term @xmath110 .",
    "in this method , we start at time @xmath108 , at state @xmath111 , and for each @xmath89 , we compute the control action and state using @xmath112 the vtg approximation @xmath110 can be based on a number of methods , ranging from heuristics to reinforcement learning @xcite to rollout @xcite .",
    "a natural question is `` what is the performance of the adp approach above relative to the optimal solution ? ''",
    "the answer , of course , depends on the specific vtg approximation .",
    "if the vtg approximation is equal to the true vtg , then the procedure above generates an optimal solution .",
    "in general , the procedure produces something suboptimal . but",
    "how suboptimal ?",
    "this question has alluded general treatment but has remained an issue of great interest to designers and users of adp methods . in the following section , we develop a systematic approach to answering this fundamental question .",
    "we now describe our approach to bounding the performance of such adp schemes .",
    "the idea is to define a string - submodular optimization problem for which the optimal strategy is the optimal control solution , and the greedy strategy is the adp solution .",
    "though inspired by our previous work ( reviewed in section [ sc : ii ] ) , the bounding of adp schemes is based on a new technique for general string - optimization problems .    to see how our approach works",
    ", let @xmath113 be the set of all strings of symbols in @xmath85 with length not exceeding @xmath10 .",
    "define the function @xmath114 by @xmath36 and @xmath115 for @xmath89 , where @xmath116 as before and @xmath117 by convention . using this string function @xmath31",
    ", we can now define the optimization problem of finding a string @xmath118 to maximize @xmath119 .",
    "this is an instance of the string - optimization problem described earlier .",
    "it is clear that @xmath120 , which is the objective function in ( [ eqn:2 ] ) .",
    "hence , the string - optimization problem defined above is equivalent to the optimal control problem ( [ eqn:2 ] ) .",
    "next , notice that a greedy scheme by definition has the following form , given @xmath121 : @xmath122 this is simply the adp scheme in ( [ eqn:4 ] ) .",
    "hence , we have the following result .",
    "the adp scheme in ( [ eqn:4 ] ) is a greedy strategy for the string - optimization problem @xmath123    using this proposition , we can show that any adp solution achieves a performance that is at least a factor of @xmath0 of the performance of the optimal control solution ( satisfying bellman s optimality principle ) .",
    "the factor @xmath0 depends on the specific adp scheme as we will explicitly show in the next section .",
    "in the last section , we introduced a general optimal control problem and an associated class of adp schemes .",
    "we then formulated a string - optimization problem associated with a given optimal control problem and adp scheme with the property that any optimal strategy for the string - optimization problem is an optimal control solution and any greedy strategy is the adp solution .",
    "this allows us to use bounding methods for greedy strategies for string - optimization to derive bounds for adp methods .",
    "however , it turns out that the results in section  [ sc : ii ] do not directly apply to the string - optimization problem we formulated in section  [ sc : iii ] .",
    "more specifically , the function @xmath31 in section  [ sc : iii ] is defined only on @xmath124 ( i.e. , strings of length at most @xmath46 ) , whereas the results in section  [ sc : ii ] require @xmath31 to be defined on strings of length greater than @xmath46 . to address this issue",
    ", we now present a _ new _",
    "result for bounding greedy strategies for string - optimization problems .",
    "let @xmath125 be an objective function .",
    "consider the optimization problem @xmath126 let @xmath127 be optimal for ( [ eqn : max ] ) .",
    "let @xmath128 be a greedy strategy for ( [ eqn : max ] ) , defined as before : given @xmath129 , @xmath130 as before , write @xmath131 and for @xmath89 , @xmath132 and @xmath133",
    ".    inspired by the results in section  [ sc : ii ] , define the _ forward curvature of @xmath31 with respect to @xmath134 _ by @xmath135 notice that @xmath136 .",
    "next , define the _ elemental forward curvature of @xmath31 with respect to @xmath137 _ by @xmath138 notice that @xmath139 .",
    "we now present a result that bounds @xmath140 relative to @xmath141 , using the definitions above .",
    "[ thm : bounds ] the following bound holds : @xmath142 , where @xmath143    using the definition of the forward curvature of @xmath31 with respect to @xmath134 , we have @xmath144 which leads to @xmath145 by the definition of elemental forward curvature of @xmath31 with respect to @xmath137 , we have @xmath146 where @xmath147 for any @xmath148 by .",
    "therefore , @xmath149 combining ( [ eqn : gk1 ] ) and ( [ eqn : g1o ] ) , we get @xmath150 as desired .",
    "_ remarks : _    * notice that the bound above holds without any assumption on the monotonicity of @xmath31 . however , the bound is only meaningful if @xmath151 .",
    "a sufficient condition for this is the monotonicity of @xmath31 .",
    "more precisely , if @xmath31 is forward monotone with respect to @xmath134 , then @xmath152 for each @xmath10 , and @xmath153 , in which case @xmath154 . *",
    "it is easy to check that if @xmath155 then @xmath156 ; i.e. , the greedy strategy is optimal",
    ".      we can now apply the result of theorem  [ thm : bounds ] to the function @xmath31 defined in section  [ sc : iii ] .",
    "doing so will provide bounds on general adp schemes relative to optimal control solutions . to begin , recall that @xmath157 assume without loss of generality that @xmath31 is a nonnegative function ( for otherwise , we can simply add a constant to each @xmath158 term ) .",
    "for this form of @xmath31 , we have @xmath159 and @xmath160 hence , applying theorem  [ thm : bounds ] , we have that for the adp scheme @xmath56 , @xmath161 where @xmath0 is related to the above @xmath162 and @xmath163 as given in theorem  [ thm : bounds ] . in the next section ,",
    "we provide some examples of special cases to illustrate this bound .",
    "for the remainder of the paper , assume that @xmath99 is a given state .",
    "suppose that @xmath164 is a given policy .",
    "consider the associated adp where @xmath165 , where @xmath166 and @xmath167 for @xmath168 .",
    "this adp method is called _ rollout _ @xcite ; the policy @xmath169 is called the _ base policy_. for rollout , we have @xmath170 where @xmath171 moreover , we have @xmath172 where @xmath173 we now show that for rollout , the function @xmath31 is forward monotone with respect to @xmath134 , which implies that @xmath152 and @xmath154 ( see remark  1 in section  [ sc : iv ] ) .",
    "[ thm : rollout_monotone ] in rollout , @xmath174 for @xmath89 .",
    "we have @xmath175 by ( [ eqn:5 ] ) , we have that @xmath176 which implies that @xmath177 .",
    "suppose that the base policy is the optimal policy . in this case , the vtg approximation term @xmath158 is equal to the true vtg . as pointed out in section  [ sc : iii ] ,",
    "the resulting rollout scheme is optimal and satisfies bellman s optimality principle . in this case , of course @xmath178 . to illustrate that the bound in theorem  [ thm : bounds ] is tight in this case",
    ", we will show that @xmath179 .",
    "we do this by showing that @xmath180 ( see remark  2 in section  [ sc : iv ] ) . to see this , by ( [ eqn : cur1 ] ) , we have @xmath153 and @xmath181 for @xmath182 . by ( [ eqn : cur2 ] ) , we have @xmath183 and @xmath184 for @xmath182 .",
    "therefore , @xmath185 , which implies that @xmath179 .      consider the special case where @xmath186 for each @xmath10 .",
    "in other words , for each @xmath10 , @xmath187 .",
    "we call this the",
    "_ myopic policy_. for the myopic policy , we have that @xmath188 , @xmath189 where @xmath190 for @xmath191 , and @xmath192 where @xmath193 for @xmath191 .",
    "it is clear that because @xmath194 , we have @xmath195 , in which case @xmath196 .",
    "in fact , it is easy to check that @xmath31 is forward monotone with respct to @xmath134 in this case .      consider the rollout method where the base policy is the myopic policy defined above .",
    "it is well known that the resulting rollout scheme performs at least as well as the myopic policy @xcite . here",
    ", we will calculate a bound on the amount by which the rollout scheme outperforms the myopic base policy in terms of @xmath162 and @xmath163 .",
    "this calculation involves introducing some additional notation ( which seems unavoidable ) .",
    "let @xmath197 be the myopic strategy and @xmath198 the corresponding rollout strategy .",
    "more specifically , given @xmath199 , @xmath200 where @xmath201 is given and @xmath202 for @xmath203 .",
    "moreover , the rollout scheme with the myopic base policy is as follows : given @xmath204 , @xmath205 where @xmath206 @xmath207 is given , @xmath208 for @xmath191 , and @xmath209 for @xmath210 .",
    "let @xmath211 and @xmath212 respectively denote the objective functions corresponding to the myopic and rollout ( with myopic base policy ) strategies",
    ". then we have that @xmath213 where @xmath202 for @xmath191 , and @xmath201 is given .",
    "moreover , @xmath214 where @xmath215 for @xmath216 , @xmath217 for @xmath218 , and @xmath219 is given .",
    "we claim that @xmath220 .",
    "tos see this , for the myopic policy , we have @xmath221 for @xmath89 . for rollout with the myopic base policy , we have @xmath222 because @xmath223 and @xmath224 , we have that @xmath225 which means that @xmath220 , as desired .",
    "combining ( [ eqn : gk1 ] ) , ( [ eqn : g1o ] ) , and the inequality @xmath220 , we have @xmath226 which provides a bound on the amount by which the rollout scheme outperforms the myopic base policy .",
    "we have developed a systematic approach to deriving guaranteed bounds for approximate dynamic programming ( adp ) schemes in optimal control problems .",
    "the approach is to formulate a string - submodular optimization problem for which the optimal strategy is the optimal control solution , and the greedy strategy is the adp solution . using this approach ,",
    "we have shown that any adp solution achieves a performance that is at least a factor of @xmath0 of the performance of the optimal control solution ( satisfying bellman s optimality principle ) .",
    "the factor @xmath0 depends on the specific adp scheme .",
    "we have explicitly characterized this dependence and we have illustrated the the applicability of our bounding technique to a few examples of adp schemes , including the popular rollout method .",
    "a.  a. ageev and m.  i. sviridenko , `` pipage rounding : a new method of constructing algorithms with proven performance guarantee , '' _ journal of combinatorial optimization _ , vol .  8 , no .  3 , pp .",
    "307328 , 2004 .",
    "m.  conforti and g.  cornuejols , `` submodular set functions , matroids and the greedy algorithm : tight worst - case bounds and some generalizations of the rado - edmonds theorem , '' _ discrete applied mathematics _ , vol .  7 , no .  3 , pp .",
    "251274 , 1984 .",
    "d.  golovin and a.  krause , `` adaptive submodularity : theory and applications in active learning and stochastic optimization , '' _ journal of artificial intelligence research _ , vol .",
    "42 , no .  1",
    "427486 , sep . 2011 .",
    "e. liu , e. k. p. chong , and l. s. scharf , `` greedy adaptive measurements with signal and measurement noise , '' in _ proceedings of the asilomar conference on signals , systems , and computers _ , asilomar hotel and conference grounds , pacific grove , california , november 47 , 2012 , paper tp3a-3 , pp .",
    "12291232 .                          z. zhang , z. wang , e. k. p. chong , a. pezeshki , and w. moran , `` near optimality of greedy strategies for string submodular functions with forward and backward curvature constraints , '' in _ proceedings of the 52nd ieee conference on decision and control _ , florence , italy , december 1013 , 2013 , pp ."
  ],
  "abstract_text": [
    "<S> in this paper , we will develop a systematic approach to deriving guaranteed bounds for approximate dynamic programming ( adp ) schemes in optimal control problems . </S>",
    "<S> our approach is inspired by our recent results on bounding the performance of greedy strategies in optimization of string - submodular functions over a finite horizon . </S>",
    "<S> the approach is to derive a string - submodular optimization problem , for which the optimal strategy is the optimal control solution and the greedy strategy is the adp solution . using this approach </S>",
    "<S> , we show that any adp solution achieves a performance that is at least a factor of @xmath0 of the performance of the optimal control solution , which satisfies bellman s optimality principle . </S>",
    "<S> the factor @xmath0 depends on the specific adp scheme , as we will explicitly characterize . to illustrate the applicability of our bounding technique , we present examples of adp schemes , including the popular rollout method . </S>"
  ]
}