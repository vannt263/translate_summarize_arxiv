{
  "article_text": [
    "cloud computing provides end - users the capability to securely access the shared pool of resources such as computational power and storage .",
    "it enables end - users to utilize those resources in a pay - per - use manner . among all types of computations , exponential operation in a finite group",
    "is almost ubiquitous in public - key cryptosystems .",
    "however , due to large integers involved , exponentiation is considered prohibitively expensive for resource - constrained devices such as mobile phones .",
    "thus , outsourcing exponentiation operation to the cloud servers becomes an appealing choice .",
    "however , when sensitive data is outsourced to the untrusted cloud , security of the data as well as the result is at risk .",
    "moreover , many cryptographic applications , such as digital signature , require to verify the validity of the results of modular exponentiation .",
    "thus result verification is also a crucial issue .",
    "in contrast , the cloud can not be fully trusted for at least three reasons .",
    "first , the cloud could be curious .",
    "that is , it may try to `` mine '' as much information as possible from the outsourced data .",
    "second , the computational resource is commodity .",
    "the cloud has the motivation to cheat in the computation process in order to save computational resources .",
    "third , the cloud is a shared environment .",
    "it is hard to secure individual data using just regular processor .",
    "thus , security and verifiability are two major concerns for computation outsourcing .    to address these two issues , various computation outsourcing mechanisms",
    "have been proposed , including outsourcing of modular exponentiation operations @xcite . in @xcite",
    ", the authors considered outsourcing modular exponentiation to two servers assuming that they would not collude .",
    "the basic idea of the proposed scheme in @xcite is to split the base and exponent of modular exponentiation into random looking pieces that are separately outsourced to two servers .",
    "then the end - user can combine the results returned by the servers to recover the desired result . under this scheme",
    ", the end - user can check the validity of the returned results with probability @xmath1 .",
    "following @xcite , the authors in @xcite proposed a similar scheme and improved the performance by reducing one query to the servers and increasing the verifiability to @xmath2 . in order to eliminate the assumption that the two servers would not collude , the authors in @xcite proposed a scheme to outsource modular exponentiation to one single server .",
    "however , at local side , the end - user still needs to carry out some exponentiation operations . as a result ,",
    "the computational gain is limited for the end - user .",
    "moreover , all these three schemes rely on pre - computation of modular exponentiation of some random integers .",
    "this will cause extra overhead to end - user s limited computational power or storage space depending on the method by which pre - computation is implemented .    from the above analysis of several previous schemes",
    ", we can summarize some basic requirements of secure outsourcing of modular exponentiation .",
    "first , for the system model , it is much more desirable to outsource exponentiation operations to one single server instead of two servers with security based on the assumption that two servers would not collude .",
    "second , the secure outsourcing scheme should not impose expensive computational overhead at local side .",
    "otherwise , the performance gain from outsourcing would diminish .",
    "third , the scheme should provide a high verifiability .",
    "ideally , the end - user should be able to verify the validity of the returned result with probability @xmath0 .    in this paper ,",
    "we extend the notion of exponentiation from modular exponentiation to general exponential operations in a finite group , including scalar multiplication on elliptic curves . in general ,",
    "each exponential operation consists of a series of basic group operations .",
    "the number of such operations varies with the exponent . in this sense ,",
    "modular exponentiation and scalar multiplication can both be regarded as exponentiation operations .",
    "thus , we propose a secure outsourcing scheme for general exponential ( expsos ) operations .",
    "the proposed expsos is based on ring homomorphism . specifically , we map the integers in the ring @xmath3 to the ring @xmath4 so that the computation in @xmath4 is homomorphic to that in @xmath3 .",
    "we let the cloud carry out the computation in @xmath4 and from the result returned by the cloud , the end - user is able to recover the result back to @xmath3 efficiently .",
    "the ring homomorphism has two features : i ) the mapping between @xmath3 and @xmath4 is computationally efficient , and ii ) without possessing the secret key , it is computationally infeasible to derive any key information of the result in @xmath3 from that in @xmath4 .",
    "the main contributions of this paper can be summarized as follows :    * we formally define a secure outsourcing scheme and four outsourcing models .",
    "the proposed expsos is shown to be effective under all four different models .",
    "* we develop schemes to securely outsource exponentiation operations in a general finite group , including modular exponentiation and scalar multiplication on elliptic curves . *",
    "we outsource exponential operation to one single untrusted server eliminating the non - collusion assumption between multiple servers . *",
    "our proposed expsos is efficient in that it requires only a small number of modular multiplications at local side .",
    "* we propose a verification scheme such that the end - user can verify the validity of the result with probability approximately @xmath0 .",
    "the rest of this paper is organized as follows . in section",
    "[ sec : secure - outsourcing - model ] , we introduce four secure outsourcing models and formally define a secure outsourcing scheme . in section [ sec : proposed - scheme ] , we present the design of expsos for both modular exponentiation and scalar multiplication based on ring homomorphism .",
    "we propose the verification scheme in section [ sec : result - verification ] .",
    "the complexity and security analysis of expsos are given in section [ sec : complexity - and - security ] .",
    "then we apply expsos to outsource several cryptographic protocols in section [ sec : application ] . in section [",
    "sec : performance - comparison ] , we compare the performance of expsos with several existing works and give some numeric results .",
    "we conclude in section [ sec : conclusion ] .",
    "[ [ system - model ] ] system model + + + + + + + + + + + +    in the general settings of computation outsourcing , the system consists of two entities : an end - user @xmath5 and the cloud @xmath6 . the end - user @xmath5 is resource - constrained .",
    "it has limited computational power and storage space .",
    "the cloud @xmath6 is regarded as possessing abundant resources and is able to carry out expensive computations .",
    "the cloud can be further modeled as the _ single - server _ model and the _ multiple - servers _ model . in the single - server model",
    ", the cloud is viewed as one unit .",
    "in contrast , in the multiple - servers model , the cloud is divided into two or more individual units .",
    "each unit carries out the computational tasks independently .",
    "while communication between different units is allowed , key information is only limited to individual unit since otherwise security of the whole system maybe in jeopardy .",
    "suppose the end - user @xmath5 wishes to accomplish a computationally expensive task @xmath7 , where @xmath8 is the input and @xmath9 is the output of the task",
    ". however , due to the limited resources , @xmath5 may not be able to finish the task using the locally available resources .",
    "the computational task @xmath10 could be outsourced to @xmath6 . unfortunately",
    ", the cloud is only a shared server and can not be fully trusted .",
    "therefore , we have to make sure that it is infeasible for @xmath6 to derive any key information about both @xmath8 and @xmath9 from the outsourced task .",
    "[ [ threat - model ] ] threat model + + + + + + + + + + + +    we propose two threat models for the cloud .",
    "first , the cloud @xmath6 is _ honest but curious_. that is , the cloud will honestly fulfill its advertised functionality",
    ". however , @xmath6 could be curious .",
    "it may try to exploit any key information from the outsourced task , which may include the input , the output as well as the intermediate computational results .",
    "when the outsourced data is sensitive , this could cause severe security and privacy issues .",
    "second , the cloud @xmath6 is _ malicious _ , meaning that the cloud @xmath6 may not carry out the desired computation truthfully .",
    "this can happen for various reasons .",
    "a simple scenario could be that the cloud simply returns some trivial results since the computational resource is a commodity for the cloud server . as a consequence ,",
    "the end - user @xmath5 is unable to receive a valid result from the cloud server @xmath6 .",
    "based on the above system model and threat model , we can divide the computation outsourcing scenarios into four types in a hierarchical manner :    * * ms * : malicious cloud under single - server model .",
    "* * hcs * : honest but curious cloud under single - server model .",
    "* * mm * : malicious cloud under multiple - servers model . * * hcm * : honest but curious cloud under multiple - servers model .",
    "it is hierarchical in the sense that a secure outsourcing scheme designed for single - server model can be extended to multiple - servers model and a scheme for malicious cloud can be extended to honest but curious cloud .",
    "specifically , these four models can be organized into three layers : at the bottom layer is the hcm model , in the middle are the mm and hcs and on the top is ms .",
    "a secure outsourcing scheme designed for a model in an upper layer is also suitable for that in a lower layer .",
    "thus , a secure outsourcing scheme for ms is most widely applicable and achieves the highest security standard . in this paper , we first propose a secure outsourcing scheme for the hcs model .",
    "then a verification scheme is proposed for ms model .",
    "a secure computation outsourcing scheme mainly addresses two issues : the security of the outsourced computational problem and the validity of the returned results .",
    "we formally define a secure outsourcing scheme ( sos ) as a 4-tuple @xmath11 consisting of four different functions :    1 .",
    "* problem transformation * @xmath12 .",
    "the end - user @xmath5 locally transforms the problem @xmath13 to a new form @xmath14 , where @xmath15 is the new input and @xmath16 is the new problem description .",
    "@xmath5 then outsources @xmath14 to the cloud server @xmath6 .",
    "* cloud computation * @xmath17 .",
    "the cloud @xmath6 solves the transformed problem @xmath14 to obtain the corresponding result @xmath18 . at the same time ,",
    "@xmath6 returns @xmath19 that is a proof of the validity of the result .",
    "* result recovery * @xmath20 . based on the returned result @xmath18",
    ", the end - user @xmath5 recovers the result @xmath9 of the original problem @xmath13 .",
    "4 .   * result verification * @xmath21 . based on @xmath22 and the proof @xmath19 ,",
    "the end - user @xmath5 verifies the validity of the result .",
    "an sos should satisfy the following two requirements :    1 .   * soundness * : given that the cloud is honest but curious , @xmath5 can successfully recover the correct result @xmath9 from the returned result @xmath18 .",
    "that is @xmath23 .",
    "* security * : the cloud is unable to derive any key information about the original input @xmath8 and output @xmath9 from the transformed problem @xmath16 , the new input @xmath15 and the new output @xmath18 .    to measure the performance of an sos",
    ", we adopt a similar definition of efficiency and verifiability as proposed in @xcite .",
    "we introduce the following two definitions :    [ def : efficient ] suppose the running time of a task @xmath10 for @xmath5 is @xmath24 . under an sos ,",
    "the running time of local processing for @xmath5 is @xmath25",
    ". then the sos is @xmath26-efficient if @xmath27 .",
    "[ def : checkable ] given the returned output @xmath18 and the proof @xmath19 , denote the probability that @xmath5 is able to verify the validity of the result @xmath9 as @xmath28",
    ". then an sos is @xmath29-verifiable if @xmath30 .    from the definition",
    "above , we can see that a larger @xmath26 indicates a better performance of a secure outsourcing scheme , while a larger @xmath29 means a better verifiability .",
    "in this section , we first define a ring homomorphism @xmath31 . based on this ring homomorphism , we propose a secure outsourcing scheme for exponentiation operations . in this section",
    ", the threat model is assumed to be hcs.however , our proposed verification scheme ensures that expsos is secure under the ms model .",
    "consider two rings and their corresponding operations @xmath32 and @xmath33 and a mapping function @xmath34 .",
    "we define ring homomorphism as follows :    given @xmath32 and @xmath33 , a mapping function @xmath34 is a ring homomorphism if there exists an inverse mapping function @xmath35 and the pair @xmath36 possesses the following two properties :    * * additive homomorphism * : @xmath37 , @xmath38 ; * * multiplicative homomorphism * : @xmath37 , @xmath39 .    in this paper",
    ", we assume that exponentiation operations are operated in the ring @xmath3 .",
    "we note that @xmath40 is not necessarily a prime .",
    "it can also be product of large primes .",
    "then , our primitive goal is to construct a proper ring homomorphism @xmath41 that maps elements in @xmath3 to elements in another ring denoted as @xmath4 . in this way",
    ", the computations in @xmath3 can be concealed when transformed to the corresponding computations in @xmath4 so that the computations in @xmath3 can be concealed .",
    "define @xmath41 as follows :    @xmath42    where @xmath43 is a random integer in @xmath3 , @xmath44 and @xmath45 is a large prime .",
    "the following theorem states that the proposed @xmath46 achieves ring homomorphism .",
    "[ thm : ring - homo]@xmath47 , the mapping @xmath46 defined in equation ( [ eq : ring - homomorphism ] ) is a ring homomorphism .    we show that there exists an inverse mapping function @xmath48 and the pair @xmath36 possesses both the additive and the multiplicative homomorphic properties .",
    "define the inverse mapping function @xmath49 as @xmath50    suppose @xmath51 , @xmath52 and @xmath53 , where @xmath54 are randomly selected integers .",
    "we can verify that    @xmath55    thus , we have proved that @xmath36 has additive homomorphic property .",
    "similarly , we can verify that @xmath36 is also multiplicative homomorphic as follows :    @xmath56    hence , the proposed mapping function @xmath57 is a ring homomorphism .",
    "the above proposed ring homomorphism enables us to transform the addition and multiplication in a ring into the corresponding operations in another large ring .",
    "we further explore the polynomial homomorphic property of the ring homomorphism that is defined as follows .",
    "suppose @xmath58 and @xmath59 is a polynomial function defined on @xmath8 .",
    "a mapping function @xmath60 is polynomial homomorphic if there exists an inverse mapping function @xmath61 such that @xmath62 where @xmath46 is applied on @xmath8 opponent - wise .",
    "[ thm : the - proposed - ring]the proposed ring homomorphism @xmath57 is polynomial - homomorphic .",
    "the proof of the above theorem is straightforward given the additive and multiplicative homomorphic properties of the ring homomorphism .      in this section",
    ", we will consider two kinds of exponentiation operations , that are modular exponentiation and scalar multiplication on elliptic curves",
    ".      consider modular exponentiation @xmath63 .",
    "we assume that @xmath40 is either a large prime or a product of large prime numbers , which is the typical situation in cryptosystems .",
    "theorem [ thm : ring - homo ] states that the result of multiplication in the ring @xmath3 can be obtained from the multiplication in @xmath4 through the transformation function and the inverse function .",
    "if we take @xmath64 , we can get @xmath65 if we repeat the multiplication in @xmath3 for @xmath66 times , we have the following corollary .",
    "[ cor : exponentiation ] for @xmath67 , we have @xmath68    corollary [ cor : exponentiation ] gives us a way to conceal the base when outsourcing modular exponentiation .",
    "that is , we can first transform the original base @xmath69 to @xmath70 , where @xmath71 is a random integer .",
    "then the cloud can compute @xmath72 based on which the result can be recovered by computing @xmath73 . as long as @xmath40 is kept secret , the cloud can not learn the value of @xmath69 due to the randomness of @xmath74 .",
    "the remaining task is to conceal the exponent @xmath66 .",
    "we have the following theorem .",
    "[ thm : euler ] for @xmath75 , where @xmath76 are distinct prime numbers , we have @xmath77 where @xmath43 is a random integer and @xmath78 is the euler s totient function .",
    "we first prove @xmath79 . consider a prime factor @xmath80 of @xmath40 , @xmath81 .",
    "there are two cases :    * case 1 : @xmath82 , that is @xmath69 and @xmath80 are not relatively prime . in this case , we have @xmath83 .",
    "thus @xmath84 which means that @xmath85 .",
    "* case 2 : @xmath86 , that is @xmath69 and @xmath80 are relatively prime .",
    "then , by the euler s theorem , we have @xmath87 . from the multiplicative property of the euler s totient function , we have @xmath88 .",
    "let @xmath89 .",
    "then , @xmath90 + that is @xmath91 .",
    "+ thus , in both cases , we have proved that @xmath92 since @xmath80 is arbitrarily selected and @xmath76 are distinct primes , we have @xmath93 + hence , @xmath79 .",
    "multiplying both sides of the equation by @xmath94 , we can obtain @xmath95    in theorem [ thm : euler ] , we do not require that @xmath69 and @xmath40 to be co - prime as required in the euler s theorem . instead , we assume that @xmath40 is the product of distinct primes that is typical in cryptosystems . for instance , in rsa , the modulus @xmath96 is the product of two distinct prime numbers .",
    "theorem [ thm : euler ] introduces a way to conceal the exponent @xmath66 .",
    "that is , by transforming the original exponent @xmath66 to @xmath97 , where @xmath43 is a random integer , we can conceal @xmath66 due to the randomness of @xmath43 .",
    "now , based on theorem [ thm : ring - homo ] and theorem [ thm : euler ] , we can construct our secure outsourcing scheme for modular exponentiation . in the secure outsourcing scheme",
    ", the function @xmath98 outsourced to the could can be expressed as a modular exponentiation @xmath99 .",
    "the result recovery function is @xmath100 .",
    "the secure outsourcing scheme for modular exponentiation under hcs model is given in algorithm [ alg : expsos - under - hcs ] .",
    "* input : * @xmath101 . + * output : * @xmath102 .",
    "@xmath103 :    @xmath5 generates a large prime @xmath45 and calculate @xmath104 .",
    "the public key is @xmath105 , and the private key is @xmath106 .",
    "@xmath107 :    @xmath5 selects random integers @xmath108 as the temporary key .",
    "@xmath5 calculates @xmath109 , @xmath110 .",
    "@xmath5 outsources @xmath98 to the cloud .",
    "@xmath111 :    @xmath6 computes @xmath112 . @xmath6 returns @xmath113 to @xmath5 .",
    "@xmath114 :    @xmath5 recovers the result as @xmath115 .    the soundness of the outsourcing scheme is guaranteed by the following theorem :    [ thm : correctness ] the secure outsourcing scheme for modular exponentiation is sound .",
    "that is @xmath116 .",
    "the proof of theorem [ thm : correctness ] is straightforward based on theorem [ thm : ring - homo ] and theorem [ thm : euler ] . specifically , by transforming the original problem of modular exponentiation to a disguised form , our proposed expsos under hcs model is sound .      in this section , we consider secure outsourcing of scalar multiplication @xmath117 on an elliptic curve @xmath118 described by the following short weierstrass equation :    @xmath119    where the coefficients @xmath120 and the coordinates of the points are all in a finite field @xmath121 .",
    "furthermore , for cryptographic applications , we usually work with points in a set of @xmath122-torsion points @xmath123 $ ] defined as @xmath123=\\{p\\in e(f_{p}):[m]p=\\mathcal{o}\\}$ ] , where @xmath124 is the point at infinity .",
    "thus , we assume @xmath125 $ ] and @xmath126 .",
    "the secure outsourcing of scalar multiplication relies on two basic operations that are point addition and point doubling .",
    "they play a similar role as modular multiplication in the outsourcing of modular exponentiation . specifically , the `` double - and - add '' algorithm to calculate scalar multiplication on elliptic curves consists of a series of point addition and point doubling .",
    "thus intuitively , we can regard secure outsourcing of point addition and point doubling as two building blocks to implement scalar multiplication .",
    "we utilize projective coordinate to represent a point @xmath127 corresponding to the point @xmath128 in the affine coordinates . as a result , the computation of point addition and point doubling consists of only modular addition and multiplication .",
    "specifically , given two points @xmath129 and @xmath130 such that @xmath131 , the point addition @xmath132 can be calculated as follows : @xmath133 where @xmath134 the point doubling @xmath135 can be calculated as follows : @xmath136 where @xmath137 in projective coordinates , one point addition and doubling take @xmath138 multiplications and @xmath139 multiplications , respectively .",
    "theorem [ thm : the - proposed - ring ] states that by mapping the variables of a polynomial from a finite field to variables in a ring , we can evaluate the polynomial in the ring and recover the result in the finite field .",
    "this gives us the insight of our proposed scheme since essentially , point addition and point doubling are both the process of evaluating polynomials on the coordinates of the points .",
    "thus , we can construct the secure computation scheme for point addition and point doubling as in algorithm [ alg : secure - point - addition ] .",
    "* input : * @xmath140 , @xmath141 and @xmath142 . + * output : * point @xmath143 .",
    "select a large prime @xmath45 and compute @xmath96 . for a coordinate @xmath144 ,",
    "select a random integer @xmath145 and compute @xmath146 .",
    "transform the points @xmath147 and the elliptic curve @xmath5 to @xmath148 , @xmath149 and @xmath150 respectively as described in step 2 .",
    "outsource @xmath151 and @xmath152 to the cloud .",
    "cloud computes @xmath153 following the point doubling or point addition prodecure .",
    "on receiving @xmath154 , recover @xmath155 as @xmath156 .",
    "[ thm : the - proposed - secure]the proposed secure point addition and point doubling algorithm is sound .    the proof of theorem [ thm : the - proposed - secure ] is straightforward from the polynomial - homomorphic property of the ring homomorphism .    the above theorem enables us to conceal the points as well as the parameters of the elliptic curve from the cloud .",
    "to outsource scalar multiplication @xmath117 , the remaining part is to conceal the multiplier @xmath157 .",
    "we utilize the property of the order @xmath122 of the torsion group that is @xmath158 , for an arbitrary point @xmath159(\\mathbb{f}_{p})$ ] and any integer @xmath74 . as a result",
    ", we can conceal @xmath157 by adding it to a multiple of @xmath122 as @xmath160 , where @xmath74 is a random integer .",
    "now , we can summarize the secure outsourcing scheme of scalar multiplication as in algorithm [ alg : secure - outsourcing ] .",
    "* input : * @xmath140 , @xmath157 , @xmath161 and @xmath122 . + * output : * point @xmath162 .",
    "@xmath163 :    end - user selects a large prime @xmath164 and compute @xmath165 .",
    "@xmath166 :    end - user generates random integers @xmath167 .",
    "computes @xmath168 , @xmath169 , @xmath170 , @xmath171 , @xmath172 , @xmath173 .",
    "end - user outsources",
    "@xmath148 , @xmath174 and @xmath175 .",
    "@xmath176 :    the cloud computes @xmath177 utilizing the double - and - add algorithm .",
    "@xmath178 :    the end - user recovers the result @xmath155 as @xmath179 .",
    "the secure outsourcing scheme for scalar multiplication is sound .",
    "that is @xmath162 .    from theorem [ thm : the - proposed - secure ]",
    ", we know that the secure computation scheme for point addition and point doubling is sound . since the double - and - add algorithm to compute scalar multiplication consists of a series of point addition and point doubling , we have @xmath180 .    in the next section",
    ", we propose a verification scheme to ensure that expsos is secure under the ms model .",
    "in this section , we first analyze the necessary properties of a result verification scheme through some counter examples .",
    "we then propose a result verification scheme for the outsourcing of modular exponentiation under ms model .",
    "we show that the verification scheme can also be applied to the outsourcing of scalar multiplication .    in the hcs model discussed in the previous section",
    ", we assume that the cloud will honestly conduct its advertised functionality .",
    "that is , to compute the function @xmath98 and return the correct result @xmath181 .",
    "however , in the ms model , the cloud may manipulate the result in order to save computational resources .",
    "thus , to verify the soundness of the result returned by the cloud is a critical issue .    a natural way to verify the result , as utilized in many previous works @xcite , is to outsource the problem multiple times and verify whether the returned results satisfy certain criteria .",
    "however , this methodology may cause potential security problems if it is not carefully designed .",
    "this is because outsourcing multiple times essentially gives more information about the original problem to the cloud , which may increase the probability for the cloud to recover the original problem .",
    "moreover , the cloud may manipulate the results in order to satisfy the criteria , thus passing the verification .",
    "therefore , we believe that an effective verification scheme should at least have the following two properties :    * * security * : the verification process should not reveal any key information about the original problem to the cloud . * * anti - manipulation * : it is infeasible for the cloud to manipulate the result and pass the verification process .",
    "we utilize two counter - examples in verifying modular exponentiation to illustrate the significance of the above properties and emphasize the key issues in designing a verification scheme .",
    "transform the exponent @xmath66 to @xmath182 and @xmath183",
    ". the cloud returns results @xmath184 and @xmath185 .",
    "the end - user checks whether the condition @xmath186 holds .    unfortunately , the above example violates the security property .",
    "when the cloud possesses @xmath187 and @xmath188 , it can calculate @xmath189 , which is a multiple of the euler s totient function @xmath190 . in this case",
    ", the cloud can factorize @xmath191 based on which , the cloud may be able to check the primality of @xmath40 . since @xmath40 is a product of large primes ,",
    "the consequence is that the cloud can limit the valid value of @xmath40 to a short list .",
    "that is the cloud have a good chance to guess the value of @xmath40 .",
    "this means that the cloud can derive some key information from the outsourced problem thus making outsourcing insecure .",
    "similarly , some variances of this type of method ( e.g. , @xmath192 and @xmath193 , where @xmath194 is a known constant ) may also have security problems .",
    "transform the exponent @xmath66 to @xmath195 and @xmath196 , where @xmath197 is a relatively small integer and calculating @xmath198 is within the end - user s computational ability",
    ". the cloud returns results @xmath199 and @xmath185 .",
    "the end - user checks whether the condition @xmath200 holds .    due to the randomness of @xmath197 ,",
    "the cloud is not able to obtain a multiple of @xmath190 .",
    "however , from the equality condition @xmath201 , we have @xmath202 , which is equivalent to    @xmath203    in this case , the cloud can manipulate two arbitrary integers @xmath204 and @xmath205 as long as @xmath206 . the results will pass the verification but the recovered result @xmath207 is incorrect .",
    "this means that the cloud can manipulate a false result while passing the verification process .    from the above two counter examples",
    ", we can see that security and anti - manipulation are two critical issues in result verification schemes . in the following algorithm [ alg : result - verification - scheme ]",
    ", we propose a verification scheme for modular exponentiation .    *",
    "input : * @xmath101 . +",
    "* output : * @xmath208 , @xmath209    @xmath163 :    @xmath5 generates a large prime @xmath45 and calculate @xmath104 .",
    "the public key is @xmath105 , and the private key is @xmath106 .",
    "@xmath210 :    @xmath5 selects random integers @xmath211 as the ephemeral key with the constraint that @xmath212 .",
    "@xmath5 calculates @xmath213 , @xmath214 and @xmath110 . @xmath5 outsources @xmath215 and @xmath216 to the cloud .",
    "@xmath217 :    @xmath6 computes @xmath218 and @xmath219 . @xmath6 returns @xmath113 and @xmath220 to @xmath5 .",
    "@xmath221 :    @xmath5 checks @xmath222 .",
    "if the equality holds , set @xmath223 . otherwise , set @xmath224 .",
    "@xmath225 :    @xmath5 recovers the result as @xmath226 .",
    "now , we utilize an example to illustrate our proposed expsos under ms model .",
    "suppose the end - user @xmath5 wants to calculate @xmath227 , where @xmath228 is a prime , @xmath229 and @xmath230 .",
    "@xmath5 can outsource @xmath227 as follow :    1 .",
    "@xmath103 : @xmath5 select a prime number @xmath231 and calculate @xmath232 .",
    "then @xmath5 selects random integers @xmath233 and @xmath234 with @xmath235 .",
    "@xmath236 : @xmath5 calculates @xmath237 , @xmath238 and @xmath239 .",
    "@xmath5 then queries @xmath240 and @xmath241 to the cloud @xmath6 .",
    "@xmath242 : @xmath6 computes @xmath243 , @xmath244 and returns @xmath245 and @xmath246 to @xmath5 .",
    "@xmath247 : @xmath5 calculates @xmath248 and @xmath249 that satisfy @xmath250 .",
    "thus the returned results are correct .",
    "result recovery : @xmath5 recovers the result as @xmath251 that is equal to @xmath252 .    in algorithm [ alg : result - verification - scheme ] , the two outsourced exponential operations are related through an affine function . as a consequence ,",
    "the cloud is unable to derive a multiple of @xmath190 only based on @xmath187 and @xmath188 .",
    "moreover , the cloud can not manipulate the results to create a verifiable equality .",
    "this verification scheme can also be applied to the outsourcing of scalar multiplications .",
    "the base point @xmath253 can be transformed to @xmath254 as described in algorithm [ alg : secure - outsourcing ] .",
    "the exponent @xmath157 can be transformed to @xmath255 and @xmath256 , where @xmath257 are random integers and @xmath258 .",
    "then the end - user can check the condition @xmath259 , where @xmath260 and @xmath261 .",
    "in this section , we analyze the security and the computational complexity of expsos .",
    "we utilize the secure outsourcing of modular exponentiation as a representative to perform the analysis .",
    "the analysis of outsourcing scalar multiplication can be conducted in a similar way .",
    "we show that expsos is secure under both hcs and ms model . specifically , under the hcs model , the expsos is @xmath262-efficient . under the ms model ,",
    "the expsos is @xmath263-efficient and @xmath264-verifiable , where @xmath66 is the exponent and @xmath265 is the security parameter .      in expsos , we conceal the base @xmath69 through a ring homomorphism @xmath266 and the exponent @xmath66 is mapped to @xmath267 . in our analysis , we show that given the public information @xmath268 , the cloud can not derive any key information about the input @xmath269 and the output @xmath270 .",
    "first , the following theorem shows that the ring homomorphism is secure .",
    "[ thm : ring - security ] when the integers @xmath40 and @xmath45 are sufficiently large , it is computationally infeasible to recover @xmath69 from the ring homomorphism @xmath271 .",
    "the security is based on the hardness of integer factorization .",
    "that is , given @xmath44 , where @xmath45 and @xmath40 are large prime numbers , it is computationally infeasible to factorize @xmath272 to get @xmath45 and @xmath40 . in our case , we consider the module @xmath40 as a large prime number or a product of large prime numbers , which is typical in cryptosystems .",
    "thus , given @xmath272 , the cloud is unable to recover @xmath40 .",
    "furthermore , as @xmath74 is a random integer , given @xmath70 , the cloud is also unable to recover @xmath69 .    in the expsos scheme ,",
    "it is computationally infeasible to recover the exponent @xmath66 under both hcs and ms model .",
    "the proof is straightforward since under the hcs model , the cloud obtains @xmath97 , while under the ms model , the cloud obtains @xmath192 and @xmath273 . in both cases ,",
    "the randomness of @xmath274 and security of the totient function @xmath190 make it infeasible for the cloud server to derive the exponent @xmath275    we show that the proposed verification scheme has the security and effectiveness properties as described previously .",
    "first , the security is based on the likelihood of finding two integers @xmath245 and @xmath246 so that @xmath250 holds true , and deriving a multiple of @xmath190 from @xmath192 , and @xmath273 .",
    "the former would enable the cloud server to cheat the end - user without conducting the actual computation and the latter could make it possible for the cloud server to recover @xmath190 and then perform collision attacks .",
    "for any two randomly selected integers @xmath245 and @xmath276 the probability that @xmath250 is @xmath277    the proof of this theorem is straightforward since only one pair of @xmath278 will make the equality holds true , while the total number of possible combinations for the @xmath278 pair is @xmath279    this theorem indicates that if the cloud wants to manipulate the result , it has to guess the random integers , the probability to succeed is only @xmath280 .",
    "in fact , if we outsource @xmath240 and @xmath241 in a random order , we can further reduce the probability for the cloud to guess the correct randoms to @xmath281 according to definition [ def : checkable ] , expsos is at least @xmath282-verifiable .",
    "for any two randomly selected integer @xmath283 and @xmath284 the probability to derive a multiple of @xmath190 is at most @xmath277    since @xmath192 and @xmath273 , and @xmath283 is a randomly chosen integer from @xmath285,$ ] the cloud server has probability @xmath286 to get the right @xmath283 and derive the following equation @xmath287 where @xmath187 and @xmath188 are known and @xmath288 are secretly selected . for the right - hand side of this equation , if further @xmath289 is known , then its integer factorization could potentially reveal the factors of @xmath290 however , since @xmath289 is randomly chosen in the range @xmath285 $ ] , the likelihood to get a proper @xmath289 is @xmath291 therefore , the overall probability to obtain equation ( [ eq : verification - collision ] ) is @xmath277    the upper bound @xmath265 is a security parameter that measures the confidence of the end - user about the returned result . in practical computation outsourcing systems , the cloud would be severely punished if cloud manipulation is detected .",
    "therefore , the benefit for the cloud to cheat would be hardly justifiable in this setting .",
    "we utilize outsourcing of modular exponentiation as a representative to analysis complexity .",
    "the analysis can be applied to scalar multiplication similarly .",
    "the essence of expsos is to limit the number of modular multiplications for the end - user to compute modular exponentiation with the aid of the cloud . in our analysis",
    ", we utilize the number of modular multiplications , denoted as @xmath292 , as a measurement .",
    "to calculate @xmath227 , the number of multiplications is @xmath293 , where @xmath294 is the bit length of @xmath66@xcite .",
    "therefore , in calculating the modular exponentiation @xmath227 , @xmath295 and @xmath296 .    in expsos , under the hcs model , to calculate @xmath297 and @xmath272 , the end - user needs @xmath298 multiplications .",
    "we notice that when the end - user knows the factors of @xmath40 , it is computationally easy to calculate @xmath190 .",
    "for example , when @xmath40 is a prime , @xmath299 . moreover , the calculation of @xmath190 is a one - time process .",
    "the computational overhead for calculating @xmath190 is negligible especially when the end - user outsources modular exponentiation multiple times .",
    "thus , under hcs model , we have @xmath300 .",
    "hence , the computational gain from outsourcing is @xmath301 . from definition [ def : efficient ] , expsos is @xmath262-efficient under the hcs model .    under the ms model",
    ", the calculation of @xmath302 will take @xmath303 multiplications . in the verification scheme",
    ", the end - user has to calculate @xmath304 and @xmath305 .",
    "thus , @xmath306 .",
    "since @xmath283 and @xmath289 are upper - bounded by @xmath265 , we have @xmath307 .",
    "hence the computational gain from outsourcing is @xmath308 thus under the ms model , expsos is at least @xmath263-efficient .",
    "the above security and complexity analysis reveal the trade - off between computational overhead and security . in the ms model ,",
    "expsos is at least @xmath263-efficient and @xmath282-verifiable .",
    "both measurements relate to the same parameter @xmath265 . on one hand",
    ", @xmath265 is the upper bound of the computational overhead that the end - user can tolerate . on the other hand",
    ", @xmath265 reveals the confidence of the end - user about the returned result which is also regarded as the security level of the result .",
    "when @xmath265 increases , the end - user has to carry out more computation .",
    "however , the probability that the end - user can verify the validity of the result also increases .",
    "thus , the proposed expsos is cost - aware in the sense that it enables the end - user to have the flexibility to choose the most suitable outsourcing scheme according to its computational constraint and security demand .",
    "this is important especially when the end - users vary in computational power and security demands .",
    "it also makes expsos widely applicable .",
    "the proposed expsos is able to conceal the base , the exponent and the module of the modular exponentiation @xmath227 .",
    "it can also be used to conceal the base point @xmath253 and multiplier @xmath157 of the scalar multiplication @xmath117 . with this feature ,",
    "the parameters ( private or public ) within the cryptosystem are totally concealed from the outside especially the cloud .",
    "thus , the cryptosystem is isolated from the outsourced system . in this sense",
    ", expsos can be regarded as a black box that takes as input @xmath309 and creates the output @xmath227 as @xmath310 , where @xmath265 is security parameter selected by the end - user .",
    "the end - user will have a performance gain of @xmath263 and can verify the validity of the result with probability @xmath311 .    in this section",
    ", we will explore efficient outsourcing of exponential operations in some typical cryptographic protocols to the cloud .",
    "we will first introduce the outsourcing of digital signature algorithm ( dsa ) that involves only modular exponentiation .",
    "then , we illustrate how to outsource the encryption part of identity based encryption ( ibe ) system involving both modular exponentiation and scalar multiplication .",
    "we utilize dsa @xcite as an example of digital signature schemes . in dsa , the global public key component @xmath312 is shared by a group of users . here , @xmath313 are prime numbers and @xmath164 is a divisor of @xmath314 .",
    "@xmath315 with @xmath316 such that @xmath317 .",
    "the algorithm can be divided into the following three phases :    1 .   * key generation * : the signer @xmath5 generates a private key @xmath318 with @xmath319 and calculates the public key as @xmath320 .",
    "* signing * : @xmath5 selects a private key @xmath43 with @xmath321 and calculates @xmath322 , @xmath323 , where @xmath324 is the message and @xmath325 is the hash value of @xmath324 using sha-1 .",
    "the signature of @xmath324 is @xmath326 .",
    "* verifying * : a verifier @xmath327 calculates @xmath328 , @xmath329 , @xmath330 and @xmath331 . then the verifier checks whether @xmath332 is true .",
    "@xmath163 :    @xmath5 selects a large prime number @xmath333 and calculate @xmath334 .",
    "@xmath210 :    @xmath5 selects temporary key @xmath335 with @xmath336 .",
    "@xmath5 calculates @xmath337 , @xmath338 , @xmath339 and @xmath340 . @xmath5 outsources @xmath341 , @xmath342 and @xmath343 in random order to the cloud @xmath6 .",
    "@xmath217 :    @xmath6 computes @xmath344 , @xmath345 and @xmath346 . @xmath6 returns the results @xmath113 , @xmath220 and @xmath347 to @xmath5 .",
    "@xmath221 :    @xmath5 verifies the results by checking @xmath348 .",
    "@xmath225 :    @xmath5 recovers the results @xmath349 and @xmath350 .",
    "@xmath351 :    @xmath5 generates the signature @xmath326 by calculating @xmath352 .",
    "@xmath5 shares the public information @xmath353 within the group of users .",
    "@xmath210 :    the verifier @xmath327 generates temporary key @xmath354 with @xmath355 .",
    "@xmath327 calculates @xmath356 , @xmath357 , @xmath358 and @xmath359 . @xmath327 outsources @xmath360 , @xmath361 , @xmath362 and @xmath363 to the cloud .",
    "@xmath217 :    @xmath6 calculates @xmath364 , @xmath365 , @xmath366 , @xmath367 @xmath6 returns the results @xmath368 to @xmath327 .",
    "@xmath221 :    @xmath327 verifies the results by checking @xmath369 and @xmath370 .",
    "@xmath225 :    @xmath327 recovers the results @xmath371 and @xmath372 .",
    "@xmath373 :    @xmath327 calculates @xmath374 and check @xmath332 .",
    "we can see that the computational bottleneck of dsa is the calculation of @xmath375 , @xmath376 for the signer and @xmath377 for the verifier .",
    "we formulate the outsourcing of dsa in algorithms [ alg : securedsa - sign ] and algorithm [ alg : securedsa - verification ] . to outsource the two exponentiation operations @xmath375 , @xmath376",
    ", the signer @xmath6 makes @xmath298 queries to the cloud and carries out @xmath378 modular multiplications . in comparison ,",
    "the original computational burden is @xmath379 . for the verifier @xmath327",
    ", the computational overhead becomes @xmath380 in comparison with the original @xmath381 .",
    "identity based encryption ( ibe ) system is proposed to alleviate the process of public key certification in traditional public key cryptosystems . in ibe system",
    ", a user can utilize his identity such as his email address _ _ as the public key .",
    "then a trusted authority will generate and distribute private key to the message receiver .",
    "the idea of ibe was initialized by shamir in @xcite .",
    "a practical ibe system was proposed in @xcite based on bilinear pairing on elliptic curves .    in an implementation of ibe system (",
    "* chapter 5 ) , the public parameters are an elliptic curve @xmath382 $ ] and a base point @xmath383 $ ] .",
    "also , the trusted authority will publish his own public key @xmath384 $ ] .",
    "the parameters are known to the authenticated users in the system .",
    "we assume that a user alice uses the hash of her own identity to generate the public key which is a point on the elliptic curve , that is @xmath385 $ ] . for any other user bob who desires to send a message @xmath324 to alice",
    ", he will conduct the following encryption process :    1 .",
    "bob selects a random integer @xmath386 ; 2 .",
    "bob computes @xmath387 ; 3 .",
    "bob computes @xmath388 ; 4 .",
    "bob sets the cipher text as @xmath389 .",
    "in the above encryption algorithm , @xmath390 denotes the pairing between public points @xmath391 and @xmath392 and @xmath393 is a hash .",
    "we note that both the input and output of the pairing @xmath390 are public .",
    "thus , the end - user bob can obtain the pairing result denoted as @xmath394 .",
    "to this end , we can see that the computational burden for bob lies in the scalar multiplication @xmath395 and the modular exponentiation @xmath396 .",
    "we summarize the outsourcing of ibe as in algorithm [ alg : secureibe ] .",
    "@xmath397 : @xmath127 , @xmath74 , @xmath398 + @xmath399 : @xmath400 , @xmath401    @xmath163 :    bob selects a large prime @xmath164 and calculates @xmath402 .",
    "@xmath210 :    bob generates temporary key @xmath403 with @xmath404 .",
    "bob calculates @xmath405 , @xmath406 , @xmath407 , @xmath408 , @xmath409 .",
    "bob sets @xmath410 .",
    "bob outsources @xmath411 , @xmath412 , @xmath413 and @xmath414 to the cloud , where @xmath152 is the transformed elliptic curve .",
    "@xmath217 :    @xmath6 calculates @xmath415 , @xmath416 , @xmath417 and @xmath418 .",
    "@xmath6 returns the results @xmath419 to bob .",
    "@xmath221 :    bob verifies the results by checking @xmath420 and @xmath421 , where the modular is applied coordinate - wise .",
    "@xmath225 :    bob recovers the results @xmath422 and @xmath423 .    from the above two applications , we can summarize some techniques in designing secure outsourcing scheme utilizing the outsourcing of exponential operation as a building block .",
    "* it is more efficient and secure to share some common parameters in different subroutines of the outsourcing process .",
    "for example , in outsourcing of dsa , the signer and verifier share the same disguised base @xmath16 and @xmath245 .",
    "the benefits are that on one hand , the computational overhead is reduced ; on the other hand , less information is exposed to the cloud . *",
    "when outsourcing modular exponentiation with the same base , the computational overhead can be reduced by jointly verifying the result .",
    "for example , in outsourcing of of the dsa , the results of @xmath375 and @xmath376 can be jointly verified by constructing a common exponent @xmath424 that is a linear combination of the two disguised exponents @xmath425 and @xmath426 .",
    "therefore , the signer does not have to carry out the extra exponentiation .",
    "* when making multiple queries to the cloud , the end - user can randomize the order of queries to increase verifiability .",
    "for example , in outsourcing of dsa , the signer and the verifier need to make @xmath298 and @xmath303 queries to the cloud , respectively .",
    "if the order of queries are randomized , the cloud has to guess the correct orders before guessing the correct parameters . as a result , the verifiability for the signing process increases to @xmath427 and that of the verifying process increases to @xmath428 .",
    "to the best of our knowledge , previous research on secure outsourcing of cryptographic computations mainly focuses on modular exponentiation . in this section ,",
    "we first compare expsos with three existing works on secure outsourcing of modular exponentiation .",
    "then we give some numeric results to show the efficiency of expsos .",
    "1.1    [ cols=\"^,^,^,^,^,^,^\",options=\"header \" , ]     * input : * @xmath101 . +",
    "* output : * @xmath208 , @xmath209    @xmath163 :    @xmath5 generates a large prime number @xmath45 and calculate @xmath104 .",
    "the public key is @xmath429 and the private key is @xmath106 .",
    "@xmath5 selects random integers @xmath430 as the temporary key .",
    "@xmath166    @xmath5 calculates @xmath109 and @xmath110 .",
    "@xmath5 then outsources @xmath431 to both cloud servers @xmath432 and @xmath433 .",
    "@xmath434 :    @xmath432 computes @xmath435 and @xmath433 computes @xmath436 .",
    "the results @xmath113 and @xmath220 are returned to @xmath5 .",
    "@xmath437    @xmath5 checks @xmath186 .",
    "set @xmath438 if the equality holds ; otherwise set @xmath439 .",
    "@xmath178 :    @xmath5 recovers the result as @xmath440 .    in @xcite , the authors assume a malicious single server ( ms ) model .",
    "similarly , the scheme utilizes a subroutine @xmath441 via some pre - processing techniques such as @xmath442 that is a modified version of @xmath443 .",
    "the scheme in @xcite can be summarized as follows .",
    "first , the end - user runs @xmath441 @xmath444 times to obtain random pairs @xmath445 @xmath446 .",
    "then it calculates @xmath447 @xmath448 and @xmath449 , where @xmath450 are randomly selected and @xmath451 for @xmath452 .",
    "the end - user then queries to a single cloud server @xmath6 @xmath453 .",
    "the result is recovered as @xmath454 .",
    "the result verification is carried out by checking whether @xmath455 is true .",
    "similarly , the queries can be divided as test queries and computation queries . as a consequence ,",
    "the cloud can compute honestly on the test queries and cheat on the computation queries .",
    "thus , due to the random order of the queries , the verifiability of this scheme is @xmath1 .",
    "we note that in the result recovery process , the end - user has to compute an exponentiation @xmath456 which takes @xmath457 multiplications .",
    "the whole scheme will take @xmath444 @xmath441 , @xmath458 @xmath459 , @xmath303 @xmath460 and make @xmath303 queries to the cloud server . in comparison",
    ", expsos can avoid inversion and only needs @xmath461 @xmath459 , where @xmath265 is a small integer .    in terms of security",
    ", we have shown that expsos can successfully conceal the base , exponent and the modulus of the modular exponentiation .",
    "it is computationally infeasible for the cloud to derive any key information from the disguised problem . in comparison ,",
    "all the above three schemes @xcite can only conceal the exponent and base while the modulus is exposed to the cloud .",
    "thus expsos can provide much improved security .",
    "moreover , the three schemes in @xcite,@xcite and @xcite achieve verifiability of @xmath1 , @xmath2 and @xmath1 respectively . in comparison ,",
    "the verifiability of expsos is @xmath311 that is close to @xmath0 .",
    "this means that the end - user is more confident about the results returned by the cloud .",
    "furthermore , the security of the schemes in @xcite and @xcite relies on the assumption that the two cloud servers will not collude .",
    "the scheme @xcite and our proposed expsos are applicable to one single untrusted server hence eliminating the non - collusion assumption .",
    "the comparison of expsos and the schemes in @xcite is summarized in table [ tab : performance - comparison-1 ] .",
    "we can see that our proposed expsos outperforms other schemes in both computational complexity and security .",
    "expsos also makes the least queries to the cloud that will introduce the least communication overhead .",
    "moreover , expsos is cost - aware in computational overhead and security such that the end - users can select the most suitable outsourcing scheme according to their own constraints and demands .",
    "also , expsos can be modified such that it is applicable to hcs , mm and ms model .      in this section ,",
    "we measure the performance of expsos for modular exponentiation through simulation in mobile phones .",
    "the computation of both the end - user and the cloud server is simulated in the same phone samsung gt - i9100 with android 4.1.2 operating system .",
    "the cpu is dual - core 1.2 ghz cortex - a9 with @xmath0 gb ram . in the outsourcing process",
    ", we focus on the computational gain , denoted as @xmath462 , from the outsourcing .",
    "we measure the local processing time ( @xmath24 ) to compute the modular exponentiation @xmath227 without outsourcing and the local processing time ( @xmath463 ) with outsourcing which includes the problem transformation , result recovery and result verification . to measure the performance of expsos under different levels of complexity",
    ", we let the size of the ring @xmath464 vary from @xmath465 bits to @xmath466 bits . also , to show the cost - awareness of expsos , we let the size of the security parameter @xmath467 vary from @xmath303 bits to @xmath468 bits .",
    "the processing time is averaged over @xmath469 independent rounds .",
    "the numeric result is shown in table [ tab : numeric - results ] where each number stands for the average processing time for @xmath470 rounds .",
    "we can see that when the size of the ring @xmath464 increases , the performance gain @xmath462 also increases for the same security parameter @xmath265 .",
    "this means that when the original problem is more complex , expsos would have a better performance .",
    "the reason is that the complexity of modular exponentiation depends on the number of multiplications that is positively correlated to the logarithm of the size of the ring @xmath464 .",
    "however , in expsos the local processing takes almost the same number of multiplications for a fixed security parameter @xmath265 .",
    "we can also see that there exists a trade - off between security and computational overhead . when @xmath265 increases , the computational overhead increases accordingly .",
    "since the verifiability is @xmath311 , a bigger @xmath265 means better security guarantees .",
    "in this paper , we design a secure outsourcing scheme expsos that can be widely used to outsource general exponentiation operations for cryptographic computations , including modular exponentiation and scalar multiplication .",
    "the proposed expsos enables end - users to outsource the computation of exponentiation to a single untrusted server at the cost of only a few multiplications .",
    "we also provide a verification scheme such that the result is verifiable with probability @xmath311 . with the security parameter @xmath265 ,",
    "expsos is cost - aware in that it can provide different security levels at the cost of different computational overhead .",
    "the comprehensive evaluation demonstrates that our scheme expsos can significantly improves the existing schemes in efficiency , security and result verifiability .",
    "m.  j. atallah and k.  b. frikken , `` securely outsourcing linear algebra computations , '' in _ proceedings of the 5th acm symposium on information , computer and communications security _ , pp .  4859 , acm , 2010 .",
    "y.  wang , q.  wu , d.  s. wong , b.  qin , s.  s. chow , z.  liu , and x.  tan , `` securely outsourcing exponentiations with single untrusted program for cloud storage , '' in _",
    "computer security - esorics 2014 _ , pp .  326343 , springer , 2014 .",
    "p.  q. nguyen ,",
    "i.  e. shparlinski , and j.  stern , `` distribution of modular sums and the security of the server aided exponentiation , '' in _ cryptography and computational number theory _ , pp .  331342 , springer , 2001 .",
    "m.  van  dijk , d.  clarke , b.  gassend , g.  e. suh , and s.  devadas , `` speeding up exponentiation using an untrusted computational resource , '' _ designs , codes and cryptography _ , vol .",
    "39 , no .  2 , pp .",
    "253273 , 2006 ."
  ],
  "abstract_text": [
    "<S> discrete exponential operation , such as modular exponentiation and scalar multiplication on elliptic curves , is a basic operation of many public - key cryptosystems . </S>",
    "<S> however , the exponential operations are considered prohibitively expensive for resource - constrained mobile devices . in this paper </S>",
    "<S> , we address the problem of secure outsourcing of exponentiation operations to one single untrusted server . </S>",
    "<S> our proposed scheme ( expsos ) only requires very limited number of modular multiplications at local mobile environment thus it can achieve impressive computational gain . </S>",
    "<S> expsos also provides a secure verification scheme with probability approximately @xmath0 to ensure that the mobile end - users can always receive valid results . </S>",
    "<S> the comprehensive analysis as well as the simulation results in real mobile device demonstrates that our proposed expsos can significantly improve the existing schemes in efficiency , security and result verifiability . </S>",
    "<S> we apply expsos to securely outsource several cryptographic protocols to show that expsos is widely applicable to many cryptographic computations .    mobile cloud computing , secure outsourcing , modular exponentiation , scalar multiplication , result verification </S>"
  ]
}