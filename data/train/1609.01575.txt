{
  "article_text": [
    "the presentation in the following is based on the account of ( * ? ? ? * chp.5 ) . throughout the paper ,",
    "let @xmath12 be the alphabet over which our strings and encodings will be defined using regular expression notation . given a word @xmath13",
    ", we write @xmath14 for the length of @xmath11 , i.e. , the number of bits @xmath15 making up @xmath16 .",
    "the symbol @xmath17 is the integer obtained by treating the word @xmath10 as a binary number , with the convention of the least significant bit is located at the right end of @xmath11 . in the following , we assume the reader to be familiar with and circuit models of computation . our presentation will thus be confined to the minimum of necessary detail , based on the old yet excellent account of @xcite .      quite apparently ,",
    "the words in @xmath18 do not uniquely correspond to the elements of @xmath19 , due to the identity @xmath20 for all @xmath21 and all @xmath13 ( as leading zeros would leave the `` integer value '' of @xmath11 unchanged ) . towards establishing a one - to - one mapping , a _ gdel numbering _ , define the function @xmath22 where we implicitly adopt the convention @xmath23 .",
    "the function @xmath24 thus merely prefixes its input with a `` 1 '' and returns the respective integer .",
    "it is immediately visible that @xmath24 is injective and computable , and that @xmath25 is decidable with @xmath26 being computable on all @xmath19 .",
    "thus , @xmath24 is an admissible gdelization @xcite , and establishes a bijection between @xmath19 and @xmath18 .",
    "a subset @xmath27 is called a _",
    "language_. its complement set ( w.r.t .",
    "@xmath18 ) is denoted as @xmath28 . for every language @xmath29",
    ", we define its _ density function _ as the mapping    @xmath30 i.e. , @xmath31 is the number of words whose gdel number as defined by is bounded by @xmath32",
    ".    for the gdelization of , a(ny ) string encoding is useable that satisfies the following ( common ) assumptions ; cf .",
    "@xcite :    1 .",
    "every string over @xmath7 represents _ some _ ( easy to assure by executing an invalid code as a canonic that instantly halts and rejects its input ) , 2 .   every is represented by infinitely many strings .",
    "this is easy by introducing the convention to ignore a prefix of the form @xmath33 then the string representation is being executed .    for a @xmath34",
    ", we write @xmath35 for the resulting string ( encoding ) that represents @xmath34 , and @xmath36 for its integer gdel number .    besides turing machines",
    ", we will also use circuits as a computational model ( to properly state the relevant definitions ) .",
    "circuits are here understood as a network of interconnected logical gates , all of which have a constant maximal number of input signals ( bounded fan - in ) . for a circuit @xmath37",
    ", we write @xmath38 to mean the number of gates in @xmath37 ( circuit complexity ) .",
    "formally , the circuit is represented as a directed acyclic graph , whose nodes are annotated with the specific functions that they compute ( logical connectives , arithmetic operations , etc . ) .",
    "both , and circuits will be designed as decision procedures for a language @xmath29 ; the output is hence a single 1 or 0 bit interpreted as either `` yes '' or `` no '' for the decision problem @xmath39 upon the input word @xmath11 .",
    "a complexity class is a set of languages that are decidable within the same time - limits .",
    "concretely , for a @xmath34 , let @xmath40 denote the number of transitions that @xmath34 takes to halt on input @xmath11 .",
    "a language @xmath29 is said to be in the complexity class @xmath41 , if a deterministic exists that outputs `` yes '' if @xmath42 or `` no '' if @xmath43 , on input @xmath11 within time @xmath44 .",
    "the language @xmath45 decided by a @xmath34 is defined as the set of all words @xmath13 that @xmath34 accepts by outputting `` yes '' ( or any equivalent representation thereof ) .      throughout this work , the symbol @xmath46 will denote different ( and not further specified ) univariate polynomials in the variable @xmath47 .",
    "we call a function @xmath48 _ length regular _ , if @xmath49 implies @xmath50 . the function @xmath51 is defined by restricting @xmath52 to inputs of length @xmath47 , i.e. , @xmath53 .",
    "if @xmath52 is length regular , then for any @xmath54 , there is an integer @xmath55 so that @xmath56 . if the converse relation @xmath55 is also satisfied , then we say that @xmath52 has _ polynomially related input and output lengths_. this technical assumption is occasionally also stated as the existence of an integer @xmath57 for which @xmath58 .",
    "it is required to preclude trivial and uninteresting cases of one - way functions that would shrink their input down to exponentially shorter length , so that any inversion algorithm would not have enough time to expand its input up to the original size .",
    "polynomially related input and output lengths avoid this construction , which is neither useful in cryptography nor in complexity theory @xcite .    with this preparation , we can state the general definition of one - way functions , for which we prove non - emptiness in a particular special case ( definition [ def : weak - owf ] ) :    [ def : owf ] let @xmath59 $ ] and @xmath60 be two functions that are considered as parameters .",
    "a length regular function @xmath48 with polynomially related input and output lengths is a _ @xmath61-one - way function _",
    ", if both of the following conditions are met :    1 .   there is a deterministic polynomial - time algorithm @xmath34 such that , for all @xmath13 , @xmath62 2 .   for all sufficiently large @xmath47 and for any circuit @xmath37 with @xmath63 , @xmath64<{\\varepsilon}(\\ell)\\ ] ]",
    "observe that definition [ def : owf ] does not require @xmath52 to be a bijection ( we will exploit this degree of freedom later ) .    in definition [ def :",
    "owf ] , we can w.l.o.g .",
    "replace the deterministic algorithm to evaluate an by a probabilistic such algorithm , considering the understanding of a probabilistic as being a particular type of _ nondeterministic _ that admits at most two choices per transition @xcite .",
    "this creates a total of @xmath65 execution branches over @xmath57 steps in time . assuming a uniformly random bit @xmath66 to determine the next configuration ( where the transition is ambiguous )",
    ", we can equivalently think of the probabilistic using a total of @xmath57 stochastically independent bits ( denoted by @xmath67 ) to define one particular execution branch @xmath68 , with likelihood @xmath69=2^{-k}$ ] . in this notation",
    ", @xmath70 is an auxiliary string that , for each ambiguous transition , pins down the next configuration to be taken .",
    "so we can think as a probabilistic to act _ deterministically _ on its input word @xmath11 _ and _ an _ auxiliary input _",
    "@xmath70 , whose bits are chosen uniformly and stochastically independent .",
    "this view of probabilistic as deterministic with auxiliary input will become important in later stages of the proof .    for cryptographic purposes",
    ", we are specifically interested in strong one - way functions , which are defined as follows :    [ def : strong - owf ] a length - regular function @xmath48 with polynomially related input and output lengths is a _ strong one - way function _ if for any polynomial @xmath71 , @xmath52 is @xmath72-one - way .",
    "actually , a much weaker requirement can be imposed , as strong one - way functions can efficiently be constructed from weak one - way functions ( see ( * ? ? ? *",
    "thm.5.2.1 ) for a proof ) , defined as :    [ def : weak - owf ] a length - regular function @xmath48 with polynomially related input and output lengths is a _ weak one - way function _ if there is a polynomial @xmath73 such that for any polynomial @xmath71 , @xmath52 is @xmath74-one - way .",
    "our main result is the following , here stated in its short version :    [ thm : weak - owf - exist ] weak one - way functions exist ( unconditionally ) .",
    "the rest of the paper is devoted to proving this claim . as a well - known implication , we obtain the following separation theorem :    [ cor : n - not - equal - to - np ] @xmath75 .",
    "the unconditionality of corollary [ cor : n - not - equal - to - np ] hinges on theorem [ thm : weak - owf - exist ] to be true .",
    "note that some proof techniques , such as relativization , are known to fail in deducing corollary [ cor : n - not - equal - to - np ] , which in turn tells us to avoid any such method when proving theorem [ thm : weak - owf - exist ] . before that , however , we give a proof of corollary [ cor : n - not - equal - to - np ] for convenience of the reader .",
    "let @xmath48 be a strong one - way function , whose existence is implied by that of weak one - way functions by ( * ? ? ?",
    "* thm.5.2.1 ) .",
    ", we may assume @xmath12 ( otherwise , we just use a prefix - free binary encoding to represent all symbols in the finite alphabet @xmath76 ) .",
    "moreover , let @xmath77 be a gdel numbering , for which @xmath78 and @xmath79 are both computable in polynomial time in @xmath14 and @xmath80 , respectively .",
    "our choice here is the function @xmath24 from section [ sec : goedel - and - density ] .",
    "we put @xmath81 as @xmath82 , and observe that by , @xmath83 inherits the length regularity property from @xmath52 ( where the integer @xmath84 has a length @xmath85 equal to the number of bits needed to represent it ) .",
    "furthermore , @xmath83 is as well strongly one - way : if it were not , i.e. , if @xmath86 would be computable in time @xmath87 , then @xmath88 would also be computable in time @xmath89 ( since @xmath24 and @xmath26 are both efficiently computable ) .",
    "precisely , if some circuit @xmath37 of @xmath90 computes @xmath91 with a likelihood of @xmath92 , then each of these cases is `` positive '' for the computation of @xmath93 on the entirety of the preimage set @xmath94 with @xmath95 ( where the @xmath96 is due to the application of @xmath24 and @xmath26 ) .",
    "this means that the circuit @xmath37 could be extended into a ( polynomial size ) circuit @xmath97 that evaluates @xmath93 according to correctly with a likelihood @xmath98 , contradicting the strong one - wayness of @xmath52 .    upon @xmath83",
    ", we define a language @xmath99 in which every pair @xmath100 can be represented by a word @xmath101 using a proper prefix - free encoding ( which includes the symbols to separate the binary strings for @xmath102 and @xmath103 ) .",
    "that is , @xmath104 is the set of @xmath102 for which a preimage within a specified ( numeric ) range @xmath105 $ ] exists .",
    "our goal is showing that @xmath106 but @xmath107 .",
    "the observation that @xmath106 is immediate , since a preimage @xmath32 for @xmath108 has length @xmath109 , so it can act as a polynomial witness , guessed by a nondeterministic to decide @xmath110 and @xmath111 , both doable in time @xmath112 ( as @xmath83 is length - regular and strongly one - way ) .",
    "conversely , if we assume @xmath113 , then we could efficiently compute @xmath114 for every given @xmath108 by the following method : since @xmath83 is length regular , it satisfies @xmath115 , where @xmath116 when @xmath32 is treated as a word in binary representation .",
    "thus , we have the upper bound @xmath117 , and therefore @xmath32 lies inside the discrete interval @xmath118 for some constant @xmath119 and sufficiently large @xmath32 ( implied by a sufficiently large @xmath102 via the length - regularity of @xmath83 ) . with the so - computed @xmath103 ,",
    "we run a binary search on @xmath120 : per iteration , we can invoke the polynomial - time decision algorithm @xmath121 available for @xmath113 to decide whether to take the left half ( if @xmath121 returns `` yes '' ) or the right half ( if @xmath121 returns `` no '' ) of the current search space . after @xmath122 iterations , the interval has been narrowed down to contain a single number @xmath123 , which is the sought preimage of @xmath102 .",
    "the whole procedure takes @xmath124 steps ( one decision of @xmath104 per iteration of the binary search ) , and thus is polynomial in @xmath125 since @xmath57 is a constant .",
    "therefore , @xmath126 would be computable in @xmath127 steps in the worst case . since our choice of @xmath102 was arbitrary",
    ", it follows that @xmath126 takes @xmath127 in _ all _ cases , which clearly contradicts the average - case hardness of the strong one - way function @xmath83 .",
    "hence , @xmath128 , and @xmath75 consequently .    now , let us turn to the proof of the main theorem [ thm : weak - owf - exist ] .",
    "continuing the outline in the abstract , we will start from a preliminary definition of an that will successively be modified into the final construction .",
    "take some ( difficult to decide ) language @xmath29 and consider the mapping @xmath129 where for each @xmath130 , we use some ( random ) @xmath131 a first seemingly suitable language @xmath29 will be found by inspecting the proof of the time hierarchy theorem [ thm : time - hierarchy ] in section [ sec : time - hierarchy - theorem ] : upon certainly related functions @xmath132 , theorem [ thm : time - hierarchy ] constructs a language @xmath0 that is decidable in @xmath133 steps but not decidable within @xmath134 steps for words of length @xmath47 . for our , we will choose @xmath135 to be superpolynomial but subexponential , and @xmath136 to be exponential ( we can not set @xmath136 to anything larger than @xmath4 , since finding a preimage for a function @xmath137 is never more expensive than successively testing all @xmath4 words to map to the given image @xmath138 ) .    note",
    "that our use of the hierarchy theorem is not towards contradicting it upon assuming the absence of one - way functions .",
    "apparently , there is no inconsistency in the claim of theorem [ thm : weak - owf - exist ] and the asserted truth of theorem [ thm : time - hierarchy ] , due to the hardness of owf being measured by average case complexity , whereas the hierarchy theorem speaks about worst - case complexity .",
    "therefore , our construction of the language @xmath29 in will be based on the theorem s implied language @xmath0 , but suitably modify it into another language @xmath139 ( whose construction is sketch across the next paragraphs ) to make the worst case of the related decision problem occur with the frequency as desired in definition [ def : weak - owf ] .",
    "the necessary modification includes using a ( wasteful ) encoding of introduced in section [ sec : tm - encoding ] .",
    "it is important to define this _ before _ proving the hierarchy theorem [ thm : time - hierarchy ] , since the language @xmath0 must be constructed using this particular encoding ( though we will make explicit use of it not until near the end of the proof ) .",
    "so far , this is still only half the story , since we need a way to efficiently sample yes- and no - instances of the decision problem @xmath39 , according to the prescription in . to this end",
    ", we will randomly draw words from an urn @xmath140 of size @xmath141 elements at a rate that ( probabilistically ) either assures or avoids retrieving an element from @xmath29 .",
    "the density functions introduced in section [ sec : preliminaries ] will be the technical vehicle to quantify the likelihood of hitting @xmath0 within @xmath142 .    because @xmath0 arises from a diagonalization argument within the proof of theorem [ thm : time - hierarchy ] ( reviewed in section [ sec : time - hierarchy - theorem ] ) , its scattering over @xmath7 and so the likelihood to draw from the subset @xmath143 can not be captured directly . to fix this",
    ", we will intersect @xmath0 with the set @xmath144 of integer squares ( called @xmath6 in the abstract ) , which are scattered over @xmath19 in a trivial pattern ( and whose density is worked out explicitly in section [ sec : density - functions ] ) .",
    "section [ sec : hard - languages ] then continues to define the new language @xmath145 as a ( still not final ) replacement for @xmath0 in , showing that the hardness of deciding @xmath9 is inherited from @xmath0 .",
    "also , the known density of @xmath144 lets us find an upper bound ( lemma [ lem : density - upper - bound ] ) and a lower bound ( using a reduction argument as lemma [ lem : dtime - t - hardness ] ) to the density of @xmath9 up to a given limit , which is the numerically maximal element of @xmath142 ( in terms of its gdel numbering ) .",
    "the result is a provably hard - to - decide language @xmath9 with known bounds to its density function ( lemma [ lem : hard - language ] ) .    still , having an approximate frequency of words from @xmath9 to occur in @xmath2 quantified by lemma [ lem : hard - language ] is not enough , as we can not deliberately choose to hit or miss @xmath9 within @xmath2 upon random draws , depending on whether we seek a yes- or no - instance in . towards controlling the sampling in the desired way , we will again modify @xmath9 into the family @xmath146 of @xmath103-element sets @xmath147 , with the property that @xmath148 .",
    "for @xmath146 , we will show that it is still difficult to decide ( lemma [ lem : l - star - hardness ] ) , so that @xmath9 can finally be replaced by @xmath146 in towards the final definition of our by .",
    "more importantly , the property of a set @xmath149 to contain a word from @xmath9 is monotone , so it has a threshold function @xcite .",
    "the crucial feature for our purposes is the fact that depending on whether few or many elements are drawn from @xmath142 relative to the entirety of it , the event of getting at least one element from @xmath9 , i.e. , a yes - instance of @xmath146 , has a likelihood of either zero or one in the limit as @xmath150 .    that is , in making the size @xmath151 of the urn @xmath142 large and with lemma [ lem : hard - language ] helping to bound the likelihood @xmath152 to hit an element of @xmath9 among @xmath153 , we can choose to draw yes- or no - instances of @xmath146 by either sampling more or less elements than what the threshold function tells us .",
    "we call this technique _ threshold sampling _ and develop its details in section [ sec : threshold - sampling ] .",
    "the main insight herein is the fact that threshold sampling either draws an element from @xmath9 , or avoids this , both with high probability , depending on the input bit @xmath154 ( as prescribed by ) .",
    "moreover , what counts for the threshold is the _ relative _ number of elements drawn from @xmath142 , so instead of drawing few elements for a no- and many elements for a yes - instance of @xmath155 , we will draw _ the same _ number @xmath156 of elements from urns @xmath142 of _ different size _ ( small urn for a yes - instance ; large urn for a no - instance ) .",
    "the exact likelihood of an error in this procedure is quantified by lemma [ lem : threshold - sampling ] , and asymptotically approaches zero , by virtue of the threshold .",
    "the key point , however , is that our threshold sampling algorithm [ alg : threshold - sampling ] itself has no information to efficiently decide which elements in the output set @xmath149 were drawn from @xmath9 or its complement .",
    "this is because the size of the urn remains internal knowledge to the sampling algorithm and does not show up in its output ( otherwise , it would provide a trivial auxiliary information to quickly invert the mapping ) .",
    "it then remains to specify the details of the uniformly random draws .",
    "specifically , we will take the random coins @xmath67 directly from the input word @xmath11 and only map the remainder of the input using the randomness @xmath67 .",
    "section [ sec : derandomization ] is devoted to counting the necessary lot of bits , showing it to be @xmath89 . in this regard",
    ", we make use of the fact that definition [ def : owf ] does not require an to be a bijection .",
    "instead , it is only necessary that every circuit errs on inverting the function only on a prescribed fraction of cases .",
    "section [ sec : bijectivity ] quantifies this error rate by restricting invertibility to refer only on the first bit of the input , and by using the encoding of introduced at the beginning in section [ sec : tm - encoding ] .",
    "the idea is that any circuit that errs on the first bit has already made the necessary error .",
    "this inversion error , together with the only asymptotically assured correctness of the sampling will establish condition of definition [ def : owf ] .",
    "that argument is made rigorous in section [ sec : weak - owf - exist ] , where also the remaining properties of weak one - way functions are verified .",
    "having said this , let us move on to the formal details .",
    "the proof will cook up a weak from the ingredients outlined in section [ sec : outline ] , in the logical order induced by the described intuition . throughout this work ,",
    "all logarithms have base 2 , unless stated otherwise .",
    "the definition of density functions immediately delivers a first useful inequality : for every two languages @xmath157 , we have @xmath158 since there can not be more words in @xmath159 than words in @xmath160 ( or @xmath161 , respectively ) .",
    "our first subgoal is the ability to construct random yes- and no - instances of a difficult decision problem .",
    "so , we first need to relate the density function for a language @xmath29 to the likelihood of retrieving elements from it upon uniformly random draws . in the following ,",
    "let @xmath29 be arbitrary but fixed .",
    "assume the opposite , i.e. , the existence of some @xmath123 for which @xmath164 .",
    "in that case , there must be at least @xmath165 words @xmath166 in @xmath29 for which @xmath167 for all @xmath168 .",
    ", let @xmath169 be the word whose gdel number @xmath170 is maximal .",
    "since @xmath24 is injective , all other @xmath123 words map to distinct smaller integers , thus making @xmath171 at least .",
    "this clearly contradicts our assumption that @xmath172 .",
    "lemma [ eqn : density - bounded - by - argument ] permits the use of the density function to define an urn experiment as follows : let the urn be @xmath173 , and let each element in it correspond to a word @xmath13 by virtue of @xmath26 . then the likelihood to draw an element from @xmath29 addressed by a random index in @xmath142",
    "is @xmath174 , by counting the number of positive cases relative to all cases .    to illustrate the practical use of a density function ,",
    "let us consider the following example of a language that we will heavily use throughout this work .",
    "the language of _ integer squares _ is defined as @xmath175 .",
    "each element @xmath176 can be identified with a string ( in regular expression notation ) @xmath177 , for which @xmath178 .",
    "the gdel number of @xmath179 can be computed from @xmath102 by @xmath180 , with the padding function @xmath181 let us extend our definition of @xmath24 to a mapping from @xmath182 , where @xmath183 for @xmath108 is defined as @xmath184 with @xmath178 . using the previous formula to compute @xmath183 , note that the expression @xmath185 ultimately becomes numerically trapped within the interval @xmath186 $ ] for @xmath187 ( the lower bound is immediate ; the upper bound follows from @xmath188 ) .",
    "thus , @xmath189 moreover , it is easy to see that for @xmath190 , @xmath191    using both facts , we discover that for any two @xmath192 that satisfy @xmath193 , also @xmath194 holds by .",
    "thus , @xmath195{\\rightarrow}[z^2\\leq x]$ ] and hence @xmath196 .",
    "the cardinalities of these sets satisfy the respective inequality , and gives @xmath197    conversely , @xmath198 asymptotically by means that for sufficiently large @xmath199 , @xmath200 .",
    "thus , @xmath201{\\rightarrow}[\\frac 1 5\\cdot gn(z^2)\\leq x]$ ] , and the last condition is equivalent to @xmath202 .",
    "therefore , @xmath203 , and the cardinalities satisfy the respective inequality .",
    "it follows that @xmath204 , or after substituting and renaming the variables , @xmath205 .          as a purely technical matter",
    ", we will adopt a specific encoding convention for . while the following facts are almost trivial , it is important to establish them a - priori ( and thus independently ) of our upcoming arguments , since the scattering and density of the languages that we construct will depend on the chosen encoding scheme of .",
    "specifically , we will encode a @xmath34 into a string @xmath208 as outlined in section [ sec : goedel - and - density ] , with a few adaptations when it comes to executing a code for a :    * when a as specified by an input @xmath13 is to be executed by a universal @xmath209 , then the code @xmath208 that defines @xmath34 s actions is obtained by @xmath142 as follows : * * the input @xmath11 is treated as an integer @xmath210 in binary and all but the most significant @xmath211 bits are ignored .",
    "call the resulting word @xmath212 . * * from @xmath212 , we drop all preceding @xmath213-bits and the first 0-bit , i.e. , if @xmath214 , then @xmath215 after discarding the prefix padding @xmath216 .",
    "[ rem : exponential - growth ] note that exponential difference in the size of @xmath208 and its representation @xmath11 in fact does _ not _ preclude the efficient execution of @xmath11 as input code and data to the universal , because it only executes a logarithmically small fraction of its input code .",
    "conversely , the wastefulness of our encoding only means that we have to reach out exponentially far on @xmath19 to see the first occurrence of a with a code of given size ; this is , however , not forbidden by any of the relevant definitions .",
    "although this encoding  depicted in figure [ fig : encoding ]  is incredibly wasteful ( as the code for a is taken as padded with an exponential lot of bits , it assures several properties that will become useful at the beginning and near the end of this work :    1 .",
    "the aforementioned mapping @xmath217 shrinks the entirety of @xmath218 words in @xmath2 down to only @xmath219 distinct prefixes .",
    "each of these admits a lot of @xmath220 suffixes that are irrelevant for the encoding of the .",
    "thus , an arbitrary word @xmath212 encoding a has at least @xmath221 equivalents @xmath11 in the set @xmath2 that map to @xmath212 .",
    "thus , if a @xmath34 is encoded within @xmath47 bits , then counts how many equivalent codes for @xmath34 are found at least in @xmath2 .",
    "this will be used in the concluding section [ sec : weak - owf - exist ] , when we establish failure of any inversion circuit in a polynomial number of cases ( second part of definition [ def : owf ] ) .",
    "2 .   the retraction of preceding @xmath213-bits creates the needed infinitude of equivalent encodings of _ every _ possible @xmath34 , as we can embed any code @xmath208 in a word of length @xmath47 for which @xmath222 .",
    "we will need this to prove the hierarchy theorem in section [ sec : time - hierarchy - theorem ] .",
    "let @xmath223 be an enumeration of all under the encoding just described ; that is , @xmath224 is the set of all @xmath13 for which a @xmath34 with encoding @xmath208 exists that is embedded inside @xmath11 as shown in figure [ fig : encoding ] .",
    "observe that the first @xmath213-bit ( mandatory in our encoding ) when being stripped from a word @xmath11 by @xmath26 leaves the inner representation of @xmath34 intact ( since the @xmath225-prefix is ignored for the `` execution '' of @xmath11 anyway ) .",
    "we write @xmath226 to mean the encoded by @xmath11 .",
    "a simulation by the universal @xmath209 thus takes the program @xmath11 and input @xmath32 to act on the initial tape configuration @xmath227 , or in expanded form ( cf .",
    "figure [ fig : encoding ] ) , @xmath228 where @xmath229 marks spaces on the tape , and the head position is marked by the underlining .      returning to the proof outline ,",
    "our next goal is to find a proper difficult language @xmath0 that we can use for the encoding of input bits into yes / no instances of a decision problem . to this end",
    ", it is useful to take a close look at the proof of the deterministic time hierarchy theorem known from complexity theory .",
    "the theorem s hypothesis is summarized as follows :      theorem [ thm : time - hierarchy ] is obtained by diagonalization ( * ? ? ?",
    "* thm.12.9 ) : we construct a @xmath34 that halts within no more than @xmath233 steps upon input of a word @xmath11 of length @xmath84 , and differs in its output from every other @xmath234 that is @xmath235-time - limited .    on input of a word @xmath11 of length @xmath236 , the sought @xmath34 will employ a universal @xmath209 to simulate an execution of @xmath226 on input @xmath11",
    ". the simulation of @xmath134 steps of @xmath226 can be done by @xmath34 taking no more than @xmath237 steps ( * ? ? ?",
    "* thm.12.6 ) , where @xmath238 is a constant that depends only on the number of states , tapes , and tape - symbols that @xmath226 uses , but not the length of the input to ( @xmath34 s simulation of ) @xmath226 .    to assure that @xmath34 always halts within the limit @xmath133 , it simultaneously executes a `` stopwatch '' @xmath239 on the input @xmath11 , which exists since @xmath136 is fully time - constructible .",
    "once @xmath239 has finished , @xmath34 terminates the simulation of @xmath226 too , and outputs `` accept '' if and only if two conditions are met :      the `` diagonal - language '' @xmath0 is thus defined over the alphabet @xmath12 as @xmath240 the hierarchy theorem is then found by observing that @xmath0 can not be accepted by any @xmath135-time - limited @xmath34 : if @xmath34 were @xmath135-time - limited with encoding @xmath241 , then the list @xmath224 contains another ( equivalent ) encoding @xmath11 of length @xmath236 so that @xmath242 and @xmath226 compute identical functions , and @xmath243 so that @xmath226 can carry to completion within the time limit @xmath133 .",
    "now , @xmath244 implies @xmath245 , so that @xmath246 .",
    "since @xmath34 was @xmath135-time - limited and arbitrary , and @xmath226 decides the same language as @xmath34 , we have @xmath247 for all @xmath34 that are @xmath135-time - limited , and therefore @xmath248 .",
    "the existence of a language @xmath0 that is hard to decide allows the construction of another language whose scattering over @xmath18 can be quantified explicitly .",
    "we will intersect @xmath0 with another language with known density estimates , and show that the hardness of the implied decision problem is retained .",
    "our language of choice will be already known set of integer squares , @xmath250 , having @xmath207 by lemma [ lem : density - of - squares ] .",
    "we claim that the language @xmath251 is at least as difficult to decide as @xmath0 .",
    "assume the opposite @xmath252 towards a contradiction , and let a word @xmath253 be given . to ease our notation in this subsection ( and only here ) , we let @xmath11 synonymously denote a bistring or the represented integer @xmath254 .",
    "cast @xmath11 into the smallest square @xmath255 that approximates @xmath11 from above , and observe that two adjacent integer squares @xmath256 and @xmath257 are separated by no more than @xmath258 .",
    "therefore , putting @xmath259 , we find that the difference @xmath260 between @xmath11 and its upper square approximation @xmath212 satisfies @xmath261 .",
    "taking logarithms to get the bitlength , we find that @xmath260 takes no more than @xmath262 bits .    by adding @xmath260 to @xmath11 to get the sought square @xmath263 , note that the shorter bitlength of @xmath260 relative to @xmath11 makes @xmath11 and @xmath212 different in the lower half + 4 bits ( including the carry from the addition of @xmath260 ) .",
    "equivalently , @xmath11 and @xmath212 have a hamming distance @xmath264 .    since @xmath265 for sufficiently large @xmath47",
    ", we conclude that @xmath11 and its square approximation @xmath212 will eventually have an identical lot of @xmath266 most significant bits ( cf .",
    "figure [ fig : encoding ] ) .",
    "that is , the header of the word that is relevant for @xmath0 is not touched when @xmath11 is converted into a square number @xmath212 .",
    "this means that @xmath267 , so that the decision remains unchanged upon the switch from @xmath11 to @xmath212 .",
    "since @xmath268 holds by construction , we could decide @xmath269 by deciding whether @xmath270 , so that @xmath271 by our initial assumption on @xmath9 .",
    "this contradiction puts @xmath272 , as claimed . to retain @xmath273",
    ", we must choose @xmath136 so large that the decision @xmath274 is possible within the time limit incurred by @xmath136 , so we add @xmath275 to our hypothesis besides assumption [ asm : time - hierarchy ] ( note that we do not need an optimal complexity bound here ) .",
    "we need to show that for every @xmath282 , there exists a poly - time reduction @xmath283 to the language @xmath9 .",
    "remember that by definition , @xmath0 is the set of all words @xmath11 that when being interpreted as an encoding of a turing machine @xmath226 , this machine would reject `` itself '' as input within time @xmath233 .",
    "take any @xmath282 , then there is a @xmath284 that decides @xmath285 in time @xmath286 .",
    "let @xmath287 be the that decides @xmath288 ( i.e. , by simply inverting the answer of @xmath284 ) . to construct a proper member of @xmath289 that equivalently delivers this answer , we define the reduction @xmath290 for an integer @xmath291 that is specified later .",
    "that is , the word @xmath212 contains a description of @xmath287 , followed by the original input @xmath11 and a number @xmath291 of trailing zeroes that will later be used to cast this word into a square .",
    "the three blocks in @xmath292 are separated by $ -symbol , assuming that $ is not used in any of the relevant tape alphabets .",
    "* @xmath292 is poly - time computable when @xmath293 , since @xmath294 is merely a constant prefix being attached .",
    "it is especially crucial to remark here that the exponential expansion of a of length @xmath47 into an encoding of size @xmath295 ( cf .",
    "remark [ rem : exponential - growth ] ) _ does not _ make the complexity to evaluate @xmath283 exponential , since the universal @xmath209 merely drops padding from the code , but not from the entire input word .",
    "indeed , the ( padded ) code @xmath296 appearing on the s tape ( see ) is exponentially longer than the `` pure '' code for @xmath287 , but it is nevertheless a _ constant _ prefix used by the reduction @xmath283 . as such , its attachment is doable in @xmath297 time .",
    "+ a slight difficulty arises from the need to make @xmath298 sufficiently long to give the simulation of @xmath299 enough time to finish .",
    "this is resolved by increasing @xmath291 ( thus making the zero - trailer @xmath300 longer ) , so as to enlarge @xmath212 until condition is satisfied .",
    "note that the increase of @xmath291 depends on @xmath135 and @xmath136 only and is as such a fixed number ( constant ) . *",
    "the output length @xmath301 is again polynomial in @xmath14 under the condition that @xmath293 .",
    "* @xmath283 is injective , since @xmath302 implies @xmath303 .    to see",
    "why @xmath304 , let us agree on the convention that the @xmath305 executes @xmath287 only on that part of @xmath212 that is enclosed within $ -symbols .",
    "leaving our universal unmodified , this restriction can be implemented by a proper modification of @xmath287 to ignore everything before and after the $ -symbols during its execution ( thus slightly changing the definition of our reduction to respect this ) .",
    "let us call the so - modified @xmath306 , and alter the reduction into @xmath307 .      1 .",
    "the simulation of @xmath308 on input @xmath212 is actually a simulation of @xmath287 on input @xmath11 , and has  by construction ( a suitably large padding of @xmath291 trailing bits )  enough time to finish , and , 2",
    ".   the deciding @xmath0 will accept @xmath212 if and only if @xmath287 rejects @xmath11 .",
    "in that case , however , @xmath284 would have accepted @xmath11 , thus @xmath309 .",
    "it remains to modify our reduction a last time to assure that @xmath310 for _ every _ possible @xmath11 , so as to complete the reduction @xmath311 .",
    "for that matter , we will utilize the previously introduced trailer of zeroes @xmath312 in @xmath292 .",
    "define the number @xmath313 , where @xmath314 is a constant that counts the length of @xmath315 and the $ -symbols when everything is encoded in binary .",
    "we will enforce @xmath316 by interpreting @xmath317 as a binary number with @xmath291 trailing zeroes , and add a proper value to it so as to cast @xmath318 into the form @xmath319 for some integer @xmath32 .",
    "the argument is exactly as in the proof of lemma [ lem : density - upper - bound ] , and thus not repeated but visualized in figure [ fig : lagged - square ] .",
    "now , let @xmath291 be such that @xmath320 for some ( sufficiently large ) integer multiple @xmath321 ( see figure [ fig : lagged - square ] to see how @xmath322 and @xmath323 are related ) . to cast @xmath292 into the sought form @xmath324 , we need to add some @xmath260 ( to reach a square ) . if we choose @xmath323 so large that @xmath325 , then @xmath326 zero - bits ( plus the additional lot to satisfy condition if necessary ) at the end of @xmath212 suffice to take up all bits of @xmath260 , and @xmath327 ( with @xmath199 being the binary representation of @xmath260 ) is a square . since @xmath323 can be chosen as a fixed integer multiplier for @xmath328 , the above requirement @xmath293 is satisfied , and @xmath316 holds for _ every _ input word @xmath11 .",
    "lemma [ lem : dtime - t - hardness ] lets us lower bound the number of words in @xmath9 by using any known lower bound for any language in @xmath41 , and knowing that all these words map into @xmath9 ( see figure [ fig : lower - bound - illustration ] ) .",
    "our language of choice will be @xmath144 once again , with lemma [ lem : density - of - squares ] providing the necessary bounds .",
    "this is admissible if we add the hypothesis @xmath331 so that @xmath332 .",
    "furthermore , assumption [ asm : time - hierarchy ] then implies that @xmath333 as well , so that this requirement in lemma [ lem : density - upper - bound ] becomes redundant under our so - extended hypothesis .",
    "we consider the length of word @xmath11 being mapped to a word @xmath334 . by definition , there are @xmath335 many words being mapped to @xmath336 many words , since @xmath283 is by construction monotonously increasing ( recall that two words @xmath337 would appear as `` middle '' blocks in the bistrings @xmath338 , where they determine the order @xmath339 , as the remaining higher - order bits are the same in both , @xmath340 and @xmath341 , and the lower - order bits contributed by the individual @xmath260 can not change the ordering ) .",
    "this means that @xmath342 because at least the words @xmath11 up to @xmath343 in @xmath144 are contained in @xmath9 when being restricted up to @xmath344 ( again , here we treat the words as numbers and consider their numeric magnitudes ) .",
    "let us change variables in inequality : since @xmath283 is not surjective , we can not hope to find a preimage for every argument @xmath345 , but let us for the moment assume that @xmath346 , i.e. , @xmath212 has a preimage @xmath347 that is unique since @xmath283 is injective . by substitution , we get @xmath348 for such a @xmath349 , where @xmath274 , it is a simple matter to extract the preimage @xmath11 , located `` somewhere in the middle '' of @xmath212 .",
    "precisely , @xmath11 is located in the left - most @xmath57-bit block ( among the total of @xmath323 such blocks ) , and has a length equal to @xmath350 , where the constant @xmath351 accounts for the length of @xmath352 , the separator symbols @xmath353 , and a possible remainder of zeroes from the @xmath300-trailer .",
    "moreover , @xmath11 can be assumed to have the form @xmath354 , since the reduction @xmath283 can discard all leading zeroes from the `` number '' @xmath11 for the decision by @xmath355 ( one check that this machine does is testing its input for not being a square number basically tests membership @xmath144 and inverts the answer . ] ) . in the following ,",
    "remember that we use @xmath11 to synonymously mean a string or the integer @xmath254 .      substituting this into",
    ", we get @xmath359{w'})\\leq{\\text{dens}}_{l_0}(w')$ ] . using that @xmath207 ( lemma [ lem : density - of - squares ] )",
    ", we end up finding that for a constant @xmath360 ( implied by the @xmath96 ) , another constant @xmath361 ( dependent on @xmath358 ) and sufficiently long @xmath212 , @xmath362{w'}}=d\\cdot\\sqrt[\\beta]{w'}\\leq{\\text{dens}}_{l_0}(w'),\\ ] ] where @xmath363 is yet another constant .",
    "observe that the construction requires @xmath321 and therefore makes @xmath364 ( we will use this observation later ) .",
    "now , let us turn to the other case of @xmath212 _ not _ having a preimage under @xmath283 .",
    "the key insight here is that for lower - bounding the count ( the density function ) , it suffices to identify _ some _ @xmath11 that under @xmath283 maps to something smaller than @xmath212 in terms of gdel numbers .",
    "a simple and reliable way to find such a value is to apply the previous extraction , and divide its output by 2 , so that we effectively take away one bit from the middle block . calling this result @xmath11 again",
    ", it maps to @xmath365 , where @xmath11 has been extracted from the given value @xmath366 , in which the prefix and suffix are dropped from @xmath292 upon the extraction ) . since we shrunk @xmath11 by one bit",
    ", we have @xmath367 , and therefore the same inequality if we treat @xmath212 and @xmath292 as numeric quantities .",
    "this is not a preimage in the sense from before , but its choice assures that all values up to ( the so obtained value ) @xmath11 map under @xmath283 to words with gdel numbers less than @xmath368 ( cf . figure [ fig : lower - bound - illustration ] to visually confirm that this procedure delivers a valid estimate ) .",
    "so , we may rewrite into @xmath369{w'/2}=d\\cdot\\sqrt[\\beta]{w'}\\leq { \\text{dens}}_{l_0}(w'),\\ ] ] where @xmath370{2}$ ] is a constant again .",
    "in particular , notice that the bound has become looser compared to ( since the density function is monotone ) , and thus remains valid in both cases .",
    "[ rem : hard - language - remark ] note that ( some of ) the constants involved in the lower bounds and actually and ultimately depend ( through a chain of implications ) on the choices of the two functions @xmath135 and @xmath136 .",
    "these give rise to the language @xmath0 and determine the `` stopwatch '' that we must attach to the simulation of @xmath371 when reducing the language @xmath372 to our hard - to - decide language @xmath373 .",
    "this in turn controls the overhead for the reduction function @xmath283 in lemma [ lem : dtime - t - hardness ] and the magnitude of the constants @xmath374 , etc .",
    "[ lem : hard - language ] let @xmath249 be as in assumption [ asm : time - hierarchy ] and assume @xmath375",
    ". then , there exists a language @xmath280 together with an integer constant @xmath364 and a real constant @xmath376 , and some @xmath377 for which @xmath378{x}\\leq{\\text{dens}}_{l_0}(x)\\leq \\sqrt x\\ ] ] for all @xmath379 .      as the time to evaluate our sought",
    "is limited to be polynomial , we can not construct yes- and no - instances of @xmath380 by directly testing a randomly chosen word @xmath11 .",
    "instead , we will sample a set of @xmath156 such words in a way that probabilistically assures at least one of them to be in @xmath9 without having to check membership explicitly .",
    "that is , we will randomly draw elements from the family @xmath381 where the role and definition of the size @xmath103 will be discussed in detail below .",
    "[ lem : l - star - hardness ] let @xmath9 be as in lemma [ lem : hard - language ] , let @xmath382 and let @xmath146 be defined by",
    ". then @xmath383 . here , the input arguments of @xmath135 and @xmath136 are the maximal bitlengths of the words in @xmath384 .",
    "let us keep @xmath103 fixed for the moment and take @xmath394 as a finite set ( urn ) with @xmath103 elements .",
    "then , sampling from @xmath146 amounts to drawing a subset @xmath395 , hoping that the resulting set intersects @xmath9 , i.e. , @xmath396 . to avoid deciding",
    "if @xmath397 $ ] , which would take @xmath398 time , we use a probabilistic method from random graph theory .",
    "the predicate @xmath399 for a @xmath57-element subset of words @xmath400 is defined as `` true '' if @xmath396 ( that is , @xmath401 is yet another way of defining @xmath146 ) . in the following ,",
    "let us slightly abuse our notation and write @xmath402 to also mean the _ event _ that @xmath403 for a randomly chosen @xmath400 of cardinality @xmath57 .",
    "the likelihood for @xmath402 to occur under a uniform distribution is , with @xmath404 , @xmath405 hereafter , we omit the subscript and write only @xmath406 whenever we refer to the general property ( not specifically for sets of given size ) .",
    "lemma [ lem : hard - language ] tells us that the element count of @xmath9 up to a number @xmath407 is at least @xmath408{x}>0 $ ] and @xmath409 , when @xmath32 and @xmath103 are sufficiently large .",
    "this implies that @xmath402 is actually a _ non - trivial _ property of subsets of @xmath142 ( in the sense of describing neither the empty nor the full set ) .",
    "moreover , it is a _ monotone increasing _ property , since once @xmath399 holds , then @xmath410 trivially holds for every superset @xmath411 .",
    "as it is known that all monotone properties have a threshold @xcite , we now go on looking for one explicitly , at which the following result helps :          the next steps are thus working out @xmath418 explicitly , with the aid of lemma [ lem : hard - language ] .",
    "our first task on this agenda is therefore estimating @xmath419 , so as to determine the function @xmath418 .",
    "define @xmath420 as the fraction of elements of @xmath9 among the entirety of @xmath103 elements will later be made dependent on the input length @xmath47 , so that @xmath71 as defined here is actually @xmath3 as announced in the abstract . ] ( cf .",
    "lemma [ eqn : density - bounded - by - argument ] ) in @xmath421 , whose corresponding words in @xmath142 are recovered by virtue of @xmath26 .",
    "the total number of @xmath57-subsets from @xmath103 elements is @xmath422 , among which there are @xmath423 elements that are _ not _ in @xmath9 ( note that @xmath424 is an integer ) .",
    "thus , the likelihood to draw a @xmath57-element subset that contains at least one element from @xmath9 is given by @xmath425 the threshold obviously depends on @xmath71 ( through the predicate / event @xmath402 that is determined by it ) , and is by theorem [ thm : threshold - function ] @xmath426 to simplify matters in the following , let us think of the factorial being evaluated as a @xmath427-function ( omitted in the following to keep the formulas slightly simpler ) , so that all expressions _ continuously _ depend on the involved variables ( whenever they are well - defined ) .",
    "this relaxation lets us work with the real value @xmath428 ( replacing the integer @xmath57 for the moment ) that satisfies the identity @xmath429 instead of having to look for the ( discrete ) maximal @xmath430 so that @xmath431 .",
    "the sought integer solution to is then ( relying on the continuity ) obtained by rounding @xmath432 towards an integer .",
    "since the expressions @xmath433 and @xmath434 in the nominator and denominator , respectively , do not depend on @xmath432 , let us expand the remaining quotient @xmath435 which has exactly @xmath436 factors ( notice that @xmath436 is indeed an integer , since this is just the element count on the condition @xmath437 for @xmath438 ) .",
    "trivial upper and lower bounds on are obtained by using @xmath436-th powers of the largest or smallest term in the product .",
    "that is , @xmath439 equation can be stated more generally as solving the equation @xmath440 for @xmath432 , given a right - hand side value @xmath102 .",
    "the bounds on @xmath441 then imply bounds on the solutions of equation , which are @xmath442 by substituting @xmath443 into the last expression , we obtain the sought bounds @xmath444 the threshold @xmath445 is defined as the maximal such @xmath430 , but must respect the same upper and lower limits , where the rounding operations on the bounds ( @xmath446 and @xmath447 ) preserve the validity of the limits when @xmath432 is rounded towards an integer .",
    "thus , the bound is now @xmath448 with functions @xmath449 induced by the language @xmath9 through the parameter @xmath71 .",
    "our next step is using the bounds obtained on the fraction @xmath71 of elements in @xmath9 that fall into the discrete interval @xmath105=u\\subset{\\mathds{n}}$ ] to refine the above bounds on the threshold @xmath418 .",
    "first , we use lemma [ lem : hard - language ] to bound @xmath71 as @xmath450{n}}{n}\\leq p\\leq \\frac{\\sqrt n}{n } = : p^*\\ ] ] for sufficiently large @xmath103 . furthermore , observe that the threshold @xmath445 is monotonously decreasing in @xmath71 , since the more `` good '' elements ( those from @xmath9 ) we have in the set of @xmath103 , the less elements",
    "do we need to draw until we come across a `` good '' one .",
    "thus , for @xmath451 , we have @xmath452      note that @xmath456 may in some cases take on negative values , but it is nonetheless an asymptotic nontrivial ( i.e. , positive and increasing ) lower bound . to see this , let us expand the product @xmath457 occurring in the definition of @xmath458 .",
    "take @xmath459 in @xmath460 and raise both sides to the @xmath461-th power , to reveal that each factor satisfies @xmath462 .",
    "likewise , @xmath463{1/2}\\to 1 $ ] for @xmath150 , so that @xmath464 , and we get @xmath465 where @xmath455 induces a growth towards @xmath466 .",
    "regardless of whether we wish to draw some @xmath384 or @xmath467 , our sampling algorithm will in any case output a set @xmath149 of cardinality @xmath156 . the difference between an output @xmath384 or @xmath468 is being made on the number @xmath103 of elements from which we draw @xmath149 .",
    "the key step towards sampling @xmath468 is therefore to thin out @xmath142 by dropping elements at random , until the cardinality @xmath141 is so small that @xmath469 _ exceeds _ the threshold @xmath418 ( that applies to the now smaller urn @xmath142 ) .",
    "otherwise , we choose @xmath142 so large that @xmath156 _ undercuts _ the threshold @xmath418 that applies to the full set @xmath142 .    specifically , we need to suitably thin out @xmath142 to @xmath470 so that pulling out the _ same _ number of @xmath156 elements either makes or from theorem [ thm : threshold - function ] apply . in the following ,",
    "let the smaller set @xmath470 have @xmath84 entries , and let the larger set @xmath142 have @xmath471 entries is arbitrary and for convenience , to ease the algebra and to let the expressions nicely simplify .",
    "] , where @xmath361 is the constant from lemma [ lem : hard - language ] .",
    "[ rem : choice ] observe that the threshold function @xmath445 that applies to sampling from a set @xmath142 with @xmath103 elements must always satisfy @xmath472 . by choosing @xmath473",
    ", we assure that the threshold @xmath418 ( and hence also the selection count @xmath156 ) is polynomial in @xmath84 .      *",
    " a no - instance @xmath467 , we use a set @xmath474 elements .",
    "let us write @xmath475 for the likelihood to hit an element from @xmath9 within @xmath142 , then we actually undercut the threshold by drawing @xmath476{n}}\\mu_*(n , p^*)\\leq\\mu_*(n , p^*)\\stackrel{\\eqref{eqn : mu - bounds}}{\\leq } m^*(n , p^*),\\ ] ] elements ( note that @xmath477 for @xmath478 ) .",
    "this gives @xmath479n=\\infty ,        \\end{aligned}\\ ] ] so @xmath453 asymptotically stays under the threshold @xmath418 . *",
    " a yes - instance @xmath384 , we cut down the cardinality by a factor of @xmath480 , i.e. , we drop elements from @xmath142 until only @xmath481 entries remain .",
    "like before , let us write @xmath482 for the likelihood to draw a member of @xmath9 from @xmath483 , and keep in mind that the threshold @xmath418 is designed for the smaller urn with only @xmath484 entries , from which we nonetheless draw @xmath156 elements .",
    "+ intuitively , observe that the _ relative _ amount @xmath485 of elements from @xmath9 within @xmath470 remains unchanged ( in the limit ) upon the drop - out process , provided that the deletion disregards the specific structure of a word @xmath11 ( which is trivial to implement ) .",
    "+ formally , we have @xmath486 , and @xmath487 .",
    "the latter is @xmath488 where the third equality follows from the selection of @xmath11 into @xmath470 being stochastically independent of the other events .",
    "later , this is achieved by specifying algorithm [ alg : selection ] ( function select ) to _ not _ care about how @xmath11 looks like or relates to any language .",
    "+ so , there is no need to distinguish the parameter @xmath71 for @xmath142 and @xmath470 and we can consider @xmath489n\\cdot\\mu^*(n / s , p_*)}{\\mu_*(n , p^*)}.\\ ] ] we substitute @xmath490 and the bounds , rearrange terms , and cast the factorials into @xmath427-functions , which turns the last quotient into ( dropping the @xmath491 and @xmath492 to ease matters w.l.o.g . ) , @xmath493 where @xmath376 and @xmath494 are the constant appearing in lemma [ lem : hard - language ] . towards showing that @xmath495 for some constant @xmath496 , it is useful to consider the nominator and denominator of separately , as well as the terms @xmath497 and @xmath37 therein .",
    "+ : towards showing that term @xmath121 is bounded , let us first raise the whole expression to the constant @xmath498 , which removes this variable and leaves the claim regarding boundedness unchanged .",
    "then , within term @xmath121 , consider the quotient @xmath499 where the second identity follows by repeated application of the relation @xmath500 .",
    "+ above , we noted that @xmath364 , so @xmath501 and therefore @xmath502 for @xmath503 .",
    "since @xmath427 is continuous on the ( strictly ) positive real line , the quotient approaches @xmath213 as @xmath503 .",
    "thus , writing out term @xmath121 and letting @xmath503 , @xmath504 thus , for some constant @xmath505 , we have the nominator of asymptotically bounded as @xmath506 .",
    "+ : term @xmath37 is , @xmath507 in which @xmath508 as @xmath503 .",
    "since @xmath509 are both integers , the quotient of @xmath427-functions expands into @xmath510 raising both sides to @xmath511 , each factor on the right of satisfies @xmath512 as @xmath503 .",
    "thus , approaches 1 as @xmath503 .",
    "the denominator of is therefore dominated by term @xmath68 , and asymptotically grows as @xmath513 , where the lower - bound is intentionally chosen crude here only for technical convenience .",
    "+ combining the asymptotic bounds on the nominator and denominator , we end up asserting @xmath514 it is easily discovered that @xmath515 , if @xmath516 ( previously , we noted that @xmath364 ) and @xmath517 .",
    "thus , we are free to put @xmath518 in ( note that @xmath455 since @xmath516 ) , to achieve @xmath519 where @xmath520 .",
    "thus , @xmath156 grows faster than the threshold @xmath418 in this case .",
    "now , let us use and to work out the likelihoods of sampling an element from @xmath146 or @xmath521 , which is the set of sample sets that do ( not ) contain a word from @xmath9 . in the following ,",
    "let us write @xmath453 in omission of the unknown parameter @xmath71 , since this one is replaced by its upper approximation @xmath522 that depends on @xmath103 ( through ) .      1 .",
    "case 1 of theorem [ thm : threshold - function ] applies if @xmath523 .",
    "this is equivalent to @xmath524 , so that @xmath525{n}}\\mu_*(n , p^*)}=\\sqrt[\\alpha]n,\\ ] ] so that we can take @xmath526n\\geq 1 $ ] ( as required ) . + the likelihood to sample an element from @xmath146 thus asymptotically satisfies @xmath527n}\\to 0.\\ ] ] 2 .",
    "case 2 of theorem [ thm : threshold - function ] applies if @xmath528 . from",
    ", we have @xmath529 , where @xmath471 .",
    "this , and the previously established growth of @xmath530 by , reveals that when @xmath103 ( and hence also @xmath84 ) becomes large enough , @xmath531 for a constant @xmath532 implied by the @xmath533 .",
    "thus , @xmath534 and so we can take @xmath535 after rearranging terms . to analyze the growth of @xmath67 ,",
    "we substitute the values for @xmath536 and @xmath537 and use for the asymptotic bound @xmath538 for some constant @xmath539 . after some algebra",
    ", we discover @xmath540 + therefore , by theorem [ thm : threshold - function ] , the likelihood to sample from @xmath146 asymptotically satisfies @xmath541    at this point , let us briefly resume our sampling method as algorithm [ alg : threshold - sampling ] .",
    "the constants @xmath542 and @xmath361 will appearing therein depend on the language @xmath9 .",
    "its correctness is established by lemma [ lem : threshold - sampling ] as our next intermediate cleanup .",
    "an input bit @xmath66 and an integer @xmath21.output of a random finite set @xmath543 whose cardinality is polynomial in @xmath84 , and which either satisfies @xmath544 or @xmath545 , with high probability , depending on whether @xmath546 or @xmath547 was supplied .",
    "@xmath548 choose @xmath549 with @xmath550[lbl : threshold - sampling - select1 ] @xmath551select @xmath400 with @xmath552[lbl : threshold - sampling - select2 ]    [ lem : threshold - sampling ] algorithm [ alg : threshold - sampling ] runs in polynomial time in @xmath84 ( assuming an effort of @xmath297 for the random selection in lines [ lbl : threshold - sampling - select1 ] and [ lbl : threshold - sampling - select2 ] ) and outputs a set @xmath149 of cardinality that is polynomial in @xmath84 , which satisfies :        the events @xmath545 or @xmath544 correspond to the previously predicate / event @xmath557 and its negation .",
    "thus , the asserted likelihoods follow from and , obviously conditional on the input bit @xmath558 .",
    "the time - complexity of algorithm [ alg : threshold - sampling ] is polynomial in @xmath84 , since we draw no more than @xmath559 elements , each of which has @xmath560 bits , where @xmath361 is a constant determined by @xmath9",
    ".    it may be tempting to think of threshold sampling to be conceptually flawed here , if the experiment is misleadingly interpreted in the following sense : assume that we would draw a constant number of balls from two urns , one with few balls in them , the other containing many balls , but with the fraction of `` good ones '' being the same in both urns .",
    "then , the likelihood to draw at least one `` good ball '' should intuitively be the same upon an equal number of trials .",
    "however , it must be stressed that the number of balls in the larger urn grows asymptotically different ( and faster ) than the ball count in the smaller urn .",
    "thus , sticking with a fixed number of trials in both urns , the _ absolute _ number of balls that we draw from either urn is indeed identical , but the _ fraction _ ( relative number ) of balls is eventually different in the long run .",
    "since algorithm [ alg : threshold - sampling ] relies on i.i.d .",
    "uniform sampling of @xmath156 elements from the set @xmath561 or a subset thereof , we need to know how well a bunch of @xmath57 random bits can approximate such a choice , given that @xmath156 is not necessarily a power of two . for the time being , let us call @xmath562 an auxiliary lot of random coins that is ( implicitly ) available to algorithm [ alg : threshold - sampling ] .",
    "our goal is proving @xmath563 to verify that the selection is doable by a probabilistic polynomial - time algorithm , to which we can add @xmath67 as another input .    specifically , the problem is to choose a random subset ( of size @xmath84 in line [ lbl : threshold - sampling - select1 ] or size @xmath156 in line [ lbl : threshold - sampling - select2 ] of algorithm [ alg : threshold - sampling ] ) from a given total of @xmath103 elements in @xmath142 . in the following ,",
    "let us write @xmath156 for the size of the selected subset .",
    "furthermore , assume @xmath142 to be canonically ordered ( as a subset of @xmath19 ) .",
    "we do the selection by randomly permuting a vector of indicator variables , defined with @xmath156 1 s followed by @xmath564 zeroes ( i.e. , permute the bits of the word @xmath565 ) . the selected subset @xmath566 is retrieved from the permuted output @xmath567 by including @xmath568 .",
    "this procedure is indeed correct for our purposes , since every @xmath156-element subset @xmath400 corresponds to a word @xmath569 , where @xmath212 contains exactly @xmath156 1-bits at the positions of elements that were selected into @xmath149 .",
    "the representative word @xmath212 can thus be obtained by permuting the word @xmath570 , and we count the number of permutations @xmath571 that yield @xmath572 .",
    "there are @xmath434 permutations in total . for any fixed permutation @xmath571 , swapping the 1 s within their fixed positions",
    "leaves @xmath571 unchanged , so the number @xmath434 reduces by a factor of @xmath573 for @xmath156 1-bits . likewise , permuting the @xmath574 zero - bits only has no effect , so another @xmath575 cases are divided out .",
    "if our choice of @xmath571 is uniform , the chance to draw any @xmath156-element subset by this permutation approach is therefore given by @xmath576 , which matches our assumption for the threshold functions in section [ sec : threshold - sampling ] .",
    "thus , the random selection of an @xmath156-element subset boils down to a matter of producing a random permutation of @xmath141 elements .",
    "we use a fisher - yates shuffle to do this , which requires a method to uniformly select an integer @xmath577 in a prescribed range @xmath578 .",
    "the necessary random integers are obtained by virtue of the auxiliary string @xmath67 . for a single integer ,",
    "let us take @xmath57 bits @xmath579 from @xmath67 , where the exact count will be specified later .",
    "these @xmath57 bits define a real - valued random quantity @xmath580 by setting @xmath581 .",
    "note that @xmath580 actually ranges within the discrete set @xmath582 . to convert @xmath580 into a random integer in the desired range @xmath583",
    ", we divide the interval @xmath584 into @xmath585 equally spaced intervals of width @xmath586 , and output the index of the sub - interval that covers @xmath580 ( the process is very similar to the well - known inversion method to sample from a given discrete probability distribution ) .",
    "this method only works correctly if @xmath580 is a continuously distributed random quantity within @xmath584 , and is biased when @xmath580 has a finite mantissa ( i.e. , is a rational value ) .",
    "so , our first step will be comparing the `` ideal '' to the `` real '' setting .",
    "if the sampling were `` ideal '' , then @xmath580 would be continuously and uniformly ( @xmath587 ) distributed over @xmath584 . with @xmath588 being the spacing of @xmath584 , the method outputs the index @xmath589 with likelihood @xmath590    next",
    ", we consider the event of outputting @xmath589 considering that @xmath580 is discrete and uniformly ( @xmath591 ) distributed over @xmath592 , with the probabilities @xmath593 .",
    "the output index is @xmath589 if @xmath594 .",
    "this interval covers all indices @xmath595 satisfying @xmath596 and @xmath597 , i.e. , all of which lead to the same output @xmath589 . since each possible",
    "@xmath580 occurs with the same likelihood @xmath598 , we get @xmath599 consider the approximation @xmath600 , where @xmath601 .",
    "obviously , @xmath602 , so that @xmath603 , and therefore , since @xmath604 , @xmath605 where @xmath589 is an arbitrary integer in the prescribed range @xmath606 , and @xmath57 is the number of bits in the value @xmath607 , which determines the output @xmath589 as @xmath608 for @xmath586 .    for the complexity of this procedure , note that all these operations are doable in polynomial time in @xmath609 and @xmath610 .",
    "let us now turn back to the problem of producing a `` almost uniform '' random permutation by the fisher - yates algorithm . in essence , the sought permutation is created by choosing the first element @xmath611 from the full set of @xmath103 elements , then retracting @xmath611 from @xmath142 , and choosing the second element from the remaining @xmath612 elements , and so forth .",
    "if we denote the so - obtained sequence of integers as @xmath613 , a uniform choice of the permutation means to draw any possible such sequence with likelihood @xmath614 since the bits taken from @xmath67 to define @xmath580 are stochastically independent in each round .    our current task is thus comparing this likelihood to the probability of drawing the same sequence under random choices made upon repeatedly taking chunks of @xmath57 bits from the auxiliary input @xmath67 . as a reminder of this ,",
    "let us replace the measure @xmath615 by @xmath616 in the following , and keep in mind that the two are the same ( based on the procedure described before ) .",
    "note that the output in the @xmath595-th step is the integer @xmath617 that satisfies @xmath618 , where @xmath619 is the spacing of the interval ( determined by the size of the urn from which we draw ; in the @xmath595-th step , we have @xmath620 ) .",
    "next , we shall pin down the number @xmath57 , which determines how accurate approximates .",
    "fix @xmath623 , so that ( asymptotically in @xmath103 and hence @xmath57 ) for @xmath624 , @xmath625 combining this with and recalling that @xmath626 , we can bound every term in as @xmath627,\\frac 1{n - j}\\cdot\\left[1 + 2^{-n}\\right]\\right).\\end{aligned}\\ ] ] in particular , this gives a nontrivial lower bound to , @xmath628    the important part herein was the setting of @xmath623 to draw a single integer .",
    "our goal was the selection of a set of @xmath629 out of @xmath103 elements , and we need @xmath103 integers to get the entire permutation of @xmath630 .",
    "so , the total lot of necessary i.i.d .",
    "random coins in @xmath67 is @xmath631 . since , @xmath632 in every case ( see algorithm [ alg : threshold - sampling ] )",
    ", we have @xmath633 as claimed .    for another intermediate cleanup ,",
    "let us compile our findings into the probabilistic selection algorithm [ alg : selection ] ( that is actually a deterministic procedure with an auxiliary lot @xmath67 of random coins ) .",
    "note that our specification of the algorithm returns the ( potentially empty ) remainder of unused bits in @xmath67 .",
    "this will turn out necessary over several invocations of the selection algorithm during the threshold sampling , to avoid re - using randomness there .          to finally specify algorithm [ alg : threshold - sampling ] with the auxiliary input @xmath67",
    ", we simply need to replace the truly random and uniform selection of subsets in algorithm [ alg : threshold - sampling ] ( lines [ lbl : threshold - sampling - select1 ] and [ lbl : threshold - sampling - select2 ] ) by our described selection procedure based on random coins from @xmath67 , which is algorithm select . for convenience of the reader , the result is given as algorithm [ alg : derandomized - threshold - sampling ] .",
    "a bit @xmath66 , an integer @xmath21 , and a word @xmath644.a random finite set @xmath543 whose cardinality is polynomial in @xmath84 , and rest of the bits in @xmath67 that have not been used.@xmath548 @xmath645 @xmath551@xmath646    to lift lemma [ lem : threshold - sampling ] to the new setting of algorithm [ alg : derandomized - threshold - sampling ] , let us apply to the likelihood of the events @xmath557 and @xmath647 , which mean `` hitting an element from @xmath146 within a selection of @xmath156 elements '' , or not , respectively .    specifically , we are interested in the likelihoods @xmath648 and @xmath649 , which under `` idealized '' sampling are bounded from below by and , but are now to be computed under the sampling using the auxiliary string @xmath67 .    for the general event @xmath650 , let us write the likelihood @xmath651 as a sum over all its ( disjoint ) atoms , we get @xmath652 so , we can re - state lemma [ lem : threshold - sampling ] in its new version , using :    [ lem : probabilistic - threshold - sampling ] algorithm [ alg : derandomized - threshold - sampling ] runs in polynomial time in @xmath84 ( including the polynomial effort to draw uniformly random subsets ) and outputs a set @xmath149 of cardinality polynomial in @xmath84 , which satisfies : @xmath653 where the ( positive ) constants @xmath555 and @xmath556 depending on the language @xmath9 .",
    "it is of central importance to note that our proof is based on random draws of sets that provably contain the sought element with a probabilistic assurance but without an explicit certificate . in other words , although the sampling guarantees high chances of the right elements being selected and despite that we know what we are looking for , we can not efficiently single out any particular output elements , which was the hit .      by definition [ def : owf ] , we can consider the input string @xmath654 to our ( to be defined ) as a bunch of i.i.d .",
    "uniformly random bits , which we can split into a prefix word @xmath655 of length @xmath656 and a postfix @xmath657 so that @xmath658 ( as algorithm [ alg : selection ] requires ) , with @xmath471 . for sufficiently large @xmath47",
    ", this division yields nonempty strings @xmath659 and @xmath67 , when @xmath84 is set to @xmath660 , i.e. , the largest length @xmath84 for which the remainder @xmath67 is sufficient to do the probabilistic sampling under algorithm [ alg : derandomized - threshold - sampling ] .",
    "it is easy to see that @xmath661 as @xmath662 , and the time - complexity to compute @xmath663 is @xmath46 .    following , our @xmath51",
    "will then be defined on @xmath11 as a bitwise mapping of the prefix @xmath659 under the probabilistic threshold sampling algorithm [ alg : derandomized - threshold - sampling ] , which `` encodes '' the @xmath664-bits of @xmath659 as yes / no - instances of the decision problem @xmath146 .",
    "formally , this is :      our objective in the following is _ partial bijectivity _ of that mapping , in the sense of assuring that the first bit of the unknown input prefix @xmath11 to @xmath51 can uniquely be computed from the image @xmath666 , even though @xmath51 may not be bijective .",
    "this invertibility will of course depend on the parameter @xmath47 , which determines the value @xmath84 and through it controls the likelihood for a sampling error ( as quantified by lemma [ lem : probabilistic - threshold - sampling ] ) .",
    "if this likelihood is `` sufficiently small '' in the sense that the next lemma [ lem : bijectivity - criterion ] makes rigorous , then @xmath51 is indeed invertible on its first input bit .",
    "[ lem : bijectivity - criterion ] let @xmath667 be finite sets of equal cardinality and let @xmath668 be a deterministic function , where @xmath669 for any distinct @xmath670 drawn independently uniform at random . if @xmath671 , then @xmath52 is bijective .",
    "it suffices to show injectivity of @xmath52 , since the finiteness of @xmath672 and @xmath673 together with @xmath674 and injectivity of @xmath52 implies surjectivity and hence invertibility of @xmath52 . towards the contradiction ,",
    "assume that two values @xmath675 exist that map onto @xmath676 , i.e. , @xmath52 is not injective .",
    "call @xmath71 the probability for this to happen , taken over all pairs @xmath677 ( the probability can be taken as relative frequency ; the counting works since @xmath52 is deterministic ) .",
    "this means that @xmath678 , which contradicts our hypothesis .      since the input to @xmath680 is a pair @xmath681 , we can partition the pre - image space @xmath672 , based on the first input bit , into the two - element family @xmath682,[1]\\right\\}}$ ] with @xmath683:={\\left\\{b\\omega : \\omega\\in{\\left\\{0,1\\right\\}}^{\\ell-1}\\right\\}}$ ] for @xmath684 . in this view",
    ", we can think of @xmath680 acting _ deterministically _ on @xmath685 , since the randomness @xmath67 used in algorithm [ alg : derandomized - threshold - sampling ] is supplied with the input , but the equivalence class is the same for all possible @xmath67 .",
    "for the sake of having @xmath680 map into a two - element image set , we will partition the output set @xmath686 with @xmath687 in a similar manner as @xmath688 with @xmath689)$ ] and @xmath690)$ ] for @xmath691,[1]\\in{\\mathcal{x}}_\\ell$ ] . then , @xmath692 , with @xmath693 for every @xmath47 .",
    "take @xmath694 as random representatives of @xmath691 $ ] and @xmath695 $ ] .",
    "the likelihood of the coincidence @xmath696 is then determined by the random coins @xmath697 in @xmath32 and @xmath698 , which directly go into algorithm [ alg : derandomized - threshold - sampling ] .",
    "the partition induces an equivalence relation @xmath699 on the image set of @xmath680 , by an appeal to which we can formulate the criterion of lemma [ lem : bijectivity - criterion ] , @xmath700)\\sim f_{\\ell,1}([1]))=\\pr_{\\omega,\\omega'}\\left(\\substack{\\phantom{\\lor}\\left[f_{\\ell,1}([0])\\in{\\mathcal{y}}_\\ell^{(0)}\\land f_{\\ell,1}([1])\\in{\\mathcal{y}}_\\ell^{(0)}\\right]\\\\\\lor\\left[f_{\\ell,1}([0])\\in{\\mathcal{y}}_\\ell^{(1)}\\land f_{\\ell,1}([1])\\in{\\mathcal{y}}_\\ell^{(1)}\\right]}\\right)\\nonumber\\\\ & \\leq\\pr_{\\omega,\\omega'}\\left(f_{\\ell,1}([0])\\in{\\mathcal{y}}_\\ell^{(0)}\\land f_{\\ell,1}([1])\\in{\\mathcal{y}}_\\ell^{(0)}\\right)\\nonumber\\\\ & \\qquad+ \\pr_{\\omega,\\omega'}\\left(f_{\\ell,1}([0])\\in{\\mathcal{y}}_\\ell^{(1)}\\land f_{\\ell,1}([1])\\in{\\mathcal{y}}_\\ell^{(1)}\\right)\\nonumber\\\\ & \\leq\\pr_{\\omega}\\left(f_{\\ell,1}([0])\\in{\\mathcal{y}}_\\ell^{(1)}\\right)+\\pr_{\\omega'}\\left(f_{\\ell,1}([1])\\in{\\mathcal{y}}_\\ell^{(0)}\\right)\\label{eqn : invertibility - criterion},\\end{aligned}\\ ] ] where the first inequality is the union bound , and the second inequality follows from the general fact that for any two events @xmath497 , we have @xmath701 .      1 .   @xmath702)$ ] means sampling towards avoidance of drawing an element from @xmath9 , the likelihood of which is bounded by .",
    "therefore , @xmath703)\\in{\\mathcal{y}}_\\ell^{(1)})=\\pr(w\\cap",
    "l_0\\neq\\emptyset|b=0)\\leq 1-(1 - 2^{-{n^{2\\beta}}})^{n^{2\\beta}}\\cdot        2^{-n^{-2\\beta/\\alpha}}$ ] 2 .",
    "@xmath704)$ ] means sampling towards drawing at least one element from @xmath146 , which by , implies @xmath705)\\in{\\mathcal{y}}_\\ell^{(0)})=\\pr(w\\cap        l_0=\\emptyset|b=1)\\leq        1-(1 - 2^{-{n^{2\\beta}}})^{n^{2\\beta}}\\cdot(1 - 2^{-\\omega(n^\\gamma)})$ ] .    substituting these bounds into",
    ", the hypothesis of lemma [ lem : bijectivity - criterion ] is verified if we let @xmath47 grow so large that the implied value of @xmath84 satisfies @xmath706<\\frac 2{{\\left|{\\mathcal{x}}\\right|}^2-{\\left|{\\mathcal{x}}\\right|}}=1,\\ ] ] to certify the invertibility of @xmath680 .",
    "note that lemma [ lem : bijectivity - criterion ] asserts only that the first bit of the preimage @xmath11 is determined by the image under @xmath680 , but does so nonconstructively .",
    "that is , we only know the the action of @xmath680 to be either @xmath707\\mapsto { \\mathcal{y}}_\\ell^{(0 ) } , & \\quad [ 1]\\mapsto { \\mathcal{y}}_\\ell^{(1)}\\label{eqn : mapping1}\\\\ \\text{or}\\quad[0]\\mapsto { \\mathcal{y}}_\\ell^{(1 ) } , & \\quad [ 1]\\mapsto { \\mathcal{y}}_\\ell^{(0)}\\label{eqn : mapping2},\\end{aligned}\\ ] ] where even the possibility of @xmath708 being defined alternatingly by both , and , is not precluded .",
    "conditional on , the inverse @xmath708 is actually the characteristic function @xmath709 of the language @xmath146 ( as defined in lemma [ lem : l - star - hardness ] ) .",
    "however , claiming that @xmath710 uniformly holds is only admissible if holds for the inputs to @xmath680 .",
    "we define this to be an event on its own in the following , denoted as @xmath711 by construction , conditioning on @xmath712 is a rather mild and even fading away asymptotically , as told by the next result :      observe that @xmath714)\\in{\\mathcal{y}}_\\ell^{(1)}\\lor f_{\\ell,1}([1])\\in{\\mathcal{y}}_\\ell^{(0)})$ ] , and that the last expression , as was shown before , tends to zero as @xmath662 .",
    "then , expanding @xmath715 conditional on @xmath712 and @xmath716 into @xmath717 , the claim follows from @xmath718 and @xmath719 when @xmath662 .",
    "conditional on @xmath712 , we can state that a circuit computing @xmath708 equivalently decides @xmath146 .",
    "but lemma [ lem : l - star - hardness ] asserts this decision to be impossible with less than a certain minimum of @xmath135 steps .",
    "this , together with lemma [ lem : conditioning ] , will be the fundament for the concluding arguments in the next section .        in the following , we let @xmath54 be arbitrary .",
    "our final @xmath721 will be a slightly modified version of , @xmath722,[w_2],\\ldots,[w_n]),\\\\ \\text{where } n & : = & \\max{\\left\\{i\\in{\\mathds{n } } : i^{6\\beta}+2i^{2\\beta}+i\\leq\\ell\\right\\}},\\\\ \\omega_0 & : = & b_{n+1}b_{n+2}\\ldots b_\\ell\\in{\\left\\{0,1\\right\\}}^*,~\\text{and}\\\\ ( w_i,\\omega_i ) & : = & \\textsc{ptsamp}(b_i,\\omega_{i-1})\\text { for } i=1,2,\\ldots , n .",
    "\\end{array } \\right\\}\\ ] ]      * polynomially related input and output lengths : let the length of the output be @xmath723 , and note that @xmath724 in every case .",
    "assume that all words in the set @xmath142 , from which algorithm [ alg : derandomized - threshold - sampling ] samples , are padded up to the maximal bitlength needed for ( the numeral ) @xmath559 . since @xmath725 , we get @xmath726 .",
    "thus , @xmath727 .",
    "conversely , we can solve for @xmath47 to get @xmath728 , and @xmath729 .",
    "thus , @xmath51 has polynomially related input and output length .",
    "* length regularity of @xmath51 : evaluating @xmath666 means sampling from a domain @xmath142 whose maximal element has magnitude @xmath730 , where @xmath84 satisfies the bound @xmath731",
    ". since the numeric range of @xmath142 is determined by the length of the input , equally long inputs result in equally long outputs of @xmath51 .",
    "thus , @xmath51 is length regular .",
    "* @xmath51 can be computed by a deterministic algorithm in polynomial time : this is trivial since @xmath51 is defined by algorithm [ alg : derandomized - threshold - sampling ] , which is actually a deterministic procedure that takes its random coins from its input only .",
    "furthermore , it runs in polynomial time in @xmath84 ( by lemma [ lem : probabilistic - threshold - sampling ] and the fact that @xmath84 in can be computed in time @xmath46 ) . since @xmath725 ,",
    "the overall time - complexity is also polynomial in @xmath47 , so definition [ def : owf ] is satisfied up to including condition 1 , since the ( component - wise ) equality of @xmath666 and the output of algorithm [ alg : derandomized - threshold - sampling ] demanded by definition [ def : owf ] is here in terms of equivalence classes and not their ( random ) representatives .",
    "it remains to verify condition 2 of definition [ def : owf ] , and definition [ def : weak - owf ] , respectively .",
    "this amounts to exhibiting a polynomial @xmath73 so that for any polynomial that was used in section [ sec : threshold - sampling ] , we refrain from denoting the polynomial @xmath71 appearing in definition [ def : weak - owf ] explicitly , and write @xmath46 here instead ( also to remind that the choice of @xmath71 would be arbitrary anyway ) . ] @xmath46 ( determining the size of the inversion circuit @xmath37 ) , our constructed function is @xmath732-one - way for sufficiently large @xmath47 .",
    "observe the order of quantifiers in definition [ def : weak - owf ] , which allows the minimal magnitude of @xmath47 to depend on all the parameters @xmath61 of the definition , especially the polynomials @xmath73 and @xmath46 that define @xmath733 and @xmath734 .",
    "we will keep this in mind in the following . throughout the rest of this work ,",
    "let @xmath735 denote the class of all circuits of size polynomial in @xmath47 .",
    "note that even though @xmath51 is not ( required to be ) bijective , the first bit @xmath736 in the unknown preimage @xmath737 is nevertheless uniquely pinned down upon knowledge of the first set - valued entry in our s output @xmath738 ( where @xmath156 is computed internally by algorithm [ alg : derandomized - threshold - sampling ] ) .",
    "so , to clear up things and prove @xmath51 to be one - way , let us become specific on the language @xmath9 that we will use . to define this hard - to - decide language , we instantiate @xmath249 as follows , where our choice is easily verified to satisfy assumption [ asm : time - hierarchy ] :        note that constructing the diagonal language @xmath0 with our chosen superpolynomial function @xmath135 already prevents any polynomial time machine @xmath34 from correctly computing a preimage bit .",
    "however , we need to be more specific on the _ probability _ for such a failure ( the construction in the time hierarchy theorem shows only the necessity of such errors , but not its frequency ) .",
    "the event @xmath746 $ ] implies that @xmath37 must in particular compute @xmath736 correctly , since @xmath51 is bijective on its first input bit .",
    "conversely , this means that an incorrect such computation implies the event @xmath747 $ ] , and in turn @xmath748\\nonumber\\\\          & \\geq \\pr_{w\\in\\sigma^\\ell}[c\\text { incorrectly computes } b_1\\text { from } f_\\ell(w)]\\label{eqn : c - error - bound},\\end{aligned}\\ ] ] where @xmath736 denotes the first bit in @xmath11 .",
    "so , we may focus our attention on the right hand side probability in the following .",
    "remember that we constructed our sampling algorithm to output a set @xmath749 and @xmath750 . despite this , note that a correct computation of @xmath736 is indeed _ not equivalent _ to the computation of the characteristic function @xmath709 of @xmath146 , since an incorrect mapping of @xmath736 on the output equivalence class @xmath751 $ ] is nevertheless possible ( the sampling made by algorithm [ alg : derandomized - threshold - sampling ] is still probabilistic ) .",
    "so , to properly formalize the event `` @xmath37 correctly computes @xmath736 '' , we must make our following arguments conditional on the event @xmath712 of a correct mapping , so that @xmath752 and in turn @xmath753 are both valid assertions in light of @xmath712 .",
    "let us consider the second last likelihood @xmath754 more closely ( where the equality is due to the inclusion @xmath755 ) .    if there were a circuit @xmath742 that decides @xmath146 , then lemma [ lem : l - star - hardness ] ( more specifically its proof ) gives us an injective reduction @xmath756 , where @xmath757 is a fixed word .",
    "note that @xmath758 can be computed by a polynomial size circuit ( simply by adding hardwired multiple outputs of @xmath757 ) . by this reduction , we have @xmath759 , or equivalently , @xmath760 .",
    "let @xmath761 be a `` positive case '' ( i.e. , a word for which @xmath762 holds ) , then this decision is also correctly made for @xmath9 , using another polynomial size circuit @xmath763 .",
    "this means that @xmath764 , because @xmath758 is injective ( otherwise , it could happen that some instances of @xmath765 are mapped onto the same image @xmath761 , which could reduce the total count ) .",
    "this leads to the implication @xmath766\\nonumber\\\\    & \\quad \\to[\\exists c'\\in{\\mathcal{c}_{{\\text{poly}}(\\ell ) } } : \\pr_{w\\in e_{\\ell}}(c'\\text { decides } l_0)>{\\varepsilon}]\\label{eqn : l_n - implies - l_0},\\end{aligned}\\ ] ] where the abbreviation `` @xmath37 decides @xmath29 '' is a shorthand for @xmath37 computing the characteristic function of @xmath29 ( the free variable @xmath767 is @xmath768-quantified , but omitted here to ease our notation ) .",
    "similarly , assuming the existence of a circuit @xmath769 that decides @xmath9 , lemma [ lem : dtime - t - hardness ] gives us another mapping @xmath770 for which @xmath283 modifies the right half of its input string accordingly so that @xmath292 becomes a square , while retaining the left part of @xmath11 that determines membership of @xmath11 in @xmath0 .",
    "thus , @xmath771 , or equivalently , @xmath772 .",
    "this mapping is also injective , so we reach a similar implication as by the same token , which is @xmath773\\nonumber\\\\    & \\quad \\to[\\exists c''\\in{\\mathcal{c}_{{\\text{poly}}(\\ell ) } } : \\pr_{w\\in e_{\\ell}}(c''\\text { decides } l_d)>{\\varepsilon}]\\label{eqn : l_0-implies - l_d},\\end{aligned}\\ ] ] in which @xmath774 is of polynomial size , since @xmath283 can be computed in polynomial time ( and therefore is also computable by a polynomial size circuit ) .    upon chaining and and switching to the converse implication ( with negated sides ) ,",
    "we get @xmath775\\to[\\forall c\\in{\\mathcal{c}_{{\\text{poly}}(\\ell ) } } : \\pr_{w\\in e_\\ell}(c=\\chi_{{\\mathcal{l}_n}})\\leq{\\varepsilon}],\\ ] ] and by taking the likelihoods for the converse events with @xmath776 , @xmath777\\nonumber\\\\ & \\quad \\to[\\forall c\\in{\\mathcal{c}_{{\\text{poly}}(\\ell ) } } : \\pr_{w\\in e_\\ell}(c\\neq \\chi_{{\\mathcal{l}_n}})\\geq\\delta]\\label{eqn : forall - implication},\\end{aligned}\\ ] ] using the notation @xmath778 and @xmath779 to mean that @xmath37 correctly or incorrectly decides the respective language .",
    "thus , to prove that every circuit of polynomial size will incorrectly decide @xmath146 , and therefore incorrectly recover the first input bit @xmath736 , conditional on @xmath712 , we need to lower - bound the likelihood for a polynomial - size circuit to err on deciding @xmath0 , and get rid of the conditioning on @xmath712 .",
    "lemma [ lem : conditioning ] helps with the latter , as we get an @xmath780 so that for all @xmath781 ,      two further intuitive reasons for the convergence of @xmath783 can be given : first , note that our consideration of the decision on @xmath0 is focused on the first bit @xmath736 , while the event @xmath712 is determined by the other bits @xmath784 of the input , where @xmath785 . since these are stochastically independent of @xmath736 , the related events are also independent .",
    "second , the selection algorithm is constructed to take elements disregarding their particular inner structure , and hence independent of the condition @xmath786 .",
    "thus , the event of a correct selection ( @xmath712 ) is independent of the event @xmath269 .    because @xmath37 is by definition an acyclic graph ,",
    "the computation of @xmath787 can be done by a via evaluating all gates in the topological sort order of ( the graph - representation of ) @xmath37 .",
    "moreover , it is easy to design a universal such circuit interpreter @xmath788 taking a description of a circuit @xmath37 and a word @xmath11 as input to compute @xmath787 in time @xmath789 . in our case , since @xmath37 has @xmath790 , where @xmath791 is a polynomial , the simulation of @xmath37 by @xmath788 takes polynomial time @xmath792 again .    remembering our notation from section [ sec : tm - encoding ] , we write @xmath226 for the being represented by a word @xmath13 .",
    "likewise , let us write @xmath793 for the that merely runs the universal circuit interpreter machine @xmath788 on the description of the circuit @xmath37 . if , for some word @xmath11 and circuit @xmath37 , @xmath226 and @xmath793 compute the same function on all @xmath18 , we write @xmath794 ( to mean `` functional equivalence '' of @xmath226 and @xmath793 ) . with this notation ,",
    "let the event `` @xmath795 '' be defined identically to `` @xmath779 '' .    to quantify the right - hand side probability in ,",
    "let us return to the proof of theorem [ thm : time - hierarchy ] again : the key insight is that the language @xmath0 is defined to include all words @xmath11 for which the @xmath226 would reject `` itself '' , i.e. , @xmath11 , as input , and has enough time to carry to completion . since the @xmath793 that equivalently represents the circuit @xmath37 above would accept its own string representation @xmath11 but @xmath0 is defined to _ exclude _",
    "exactly this word , @xmath793 ( and therefore also @xmath37 ) would incorrectly compute the output for at least all words that represent sufficiently large encodings of @xmath793 .",
    "formally , @xmath796 where we have used the ( wasteful ) encoding of introduced in section [ sec : tm - encoding ] . plugging this into tells us that @xmath797 which is a universal bound that is independent of the particular circuit @xmath37 .",
    "so , let @xmath37 be arbitrary and of polynomial size @xmath798 .",
    "we use implication with , to conclude @xmath799 .",
    "the actual interest , however , is on the _ unconditional _ likelihood of @xmath37 outputting @xmath736 incorrectly . for that matter , we invoke lemma [ lem : conditioning ] on , to obtain a value @xmath800 so that for all @xmath801",
    ", @xmath802\\geq \\frac 1 2\\cdot\\pr_{w\\in e_\\ell}(c\\neq \\chi_{{\\mathcal{l}_n}})\\geq \\frac 1{8\\ell}.\\ ] ] by taking the converse probabilities again in , we end up with @xmath803<1-\\frac 1{8\\ell},\\ ] ] for all @xmath804 and every circuit @xmath37 of polynomial size @xmath743 ."
  ],
  "abstract_text": [
    "<S> this note is an attempt to unconditionally prove the existence of weak . starting from a provably intractable decision problem @xmath0 ( whose existence is nonconstructively assured from the well - known discrete time - hierarchy theorem from complexity theory ) , we construct another intractable decision problem </S>",
    "<S> @xmath1 that has its words scattered across @xmath2 at a relative frequency @xmath3 , for which upper and lower bounds can be worked out . </S>",
    "<S> the value @xmath3 is computed from the density of the language within @xmath2 divided by the total word count @xmath4 . </S>",
    "<S> it corresponds to the probability of retrieving a yes - instance of a decision problem upon a uniformly random draw from @xmath2 . </S>",
    "<S> the trick to find a language with known bounds on @xmath3 relies on switching from @xmath0 to @xmath5 , where @xmath6 is an easy - to - decide language with a known density across @xmath7 . in defining @xmath6 properly ( and upon a suitable gdel numbering ) </S>",
    "<S> , the hardness of deciding @xmath8 is inherited from @xmath0 , while its density is controlled by that of @xmath6 . </S>",
    "<S> the lower and upper approximation of @xmath3 then let us construct an explicit threshold function ( as in random graph theory ) that can be used to efficiently and intentionally sample yes- or no - instances of the decision problem ( language ) @xmath9 ( however , without any auxiliary information that could ease the decision like a polynomial witness ) . in turn , this allows to construct a weak that encodes a bit string @xmath10 by efficiently ( in polynomial time ) emitting a sequence of randomly constructed intractable decision problems , whose answers correspond to the preimage @xmath11 . </S>"
  ]
}