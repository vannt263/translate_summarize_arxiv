{
  "article_text": [
    "specifying safety - critical systems , it is not enough to use controlled languages and semiformal languages  the precise and easy - to - read formal specification is essential to ensure that the safety properties of the system really hold .",
    "moreover , the software development process should include aspects of human factors engineering , to improve the quality of software and to deal with human factors in a systematic way , cf .",
    "human factor aspects usually cover the design of human - computer interface of the software , human - related aspects of the development process , as well as the corresponding automatisation . by the engineering error paradigm @xcite ,",
    "humans are seen as a `` component of the system '' ( almost equivalent to software and hardware components in the sense of operation with data and other components ) , which is the most unreliable in the system .",
    "software errors can cause wasting of resources @xcite .",
    "an estimate of one trillion us dollars was spent on it hardware , software and services by governments around the world .",
    "software errors can also be fatal , and in many cases they might be prevented by having a more human - oriented development process and methods . as per statistics presented by dhillon @xcite ,",
    "humans are responsible for 30% to 60% the total errors which directly or indirectly lead to the accidents , and in the case of aviation and traffic accidents , 80% to 90% of the errors were due to humans .",
    "thus , it is necessary to have human factors engineering as a part of the software development process .",
    "one of the widely cited accidents in safety - critical systems are the accidents involved massive radiation overdoses by the therac-25 ( a radiation therapy machine used in curing cancer ) that lead to deaths and serious injuries of patients which received thousand times the normal dose of radiation @xcite .",
    "the causes of these accidents were software failures as well as problems with the system interface .",
    "the error was improbable to reproduce because it required very specific sequence of commands in order to occur .",
    "the improbability of the sequence makes the error unlikely to be noticed with manual testing because it is almost impossible to think of all combinations of commands and edge cases .",
    "automatisation might solve this problem , but the challenge is to create an automatisation which is not only efficient but also easy - to - use , i.e. , is human - oriented .",
    "one of the challenges in software engineering is to develop correct software .",
    "the software should meet user requirements , its properties should satisfy the model corresponding to design objective and the implementation should pass all functional tests .",
    "rigorous reasoning is the only way to avoid subtle errors in algorithms , and it should be as simple as possible by making the underlying formalism simple tools @xcite .",
    "formal methods ( fms ) refer to a class of mathematical techniques used in development of large scale complex systems .",
    "these techniques can result in high - quality systems that can be implemented on - time , within budgets and satisfy user requirements @xcite .",
    "the value of fms in real systems has far reaching consequences .",
    "for instance , fms help engineers get the code right by getting the design right in the first place .",
    "secondly , fms help engineers gain a better understanding of the design . despite all advantages ,",
    "formal methods are not widely used in large - scale industrial software projects for many reasons @xcite .",
    "one of the core obstacles is the lack of readability and usability .",
    "the syntax of fms is often too complicated and unreadable for novices , which makes an impression that all the fms require huge amount of training .",
    "there also is a prejudice that the return of investment is very minimal and only justified in critical systems such as medical devices , what is generally not true @xcite .",
    "spatio - temporal aspects of safety - critical systems are crucial to verify and to test a system , as in most cases the system properties should be analysed in relation to the time and to the location . to analyse spatio - temporal phenomena",
    ", we have to specify the corresponding spatial , temporal and event semantics formally and in a human - oriented way .",
    "the goal of our work is to increase usability of the analysis ( in the sense of verification and testing ) of the spatio - temporal aspects on the base of the corresponding formal models .    _",
    "property based testing _ allows us to generate huge numbers of system operations ( e.g api calls or external events ) and permute these operations in ways that is difficult for humans to think of .",
    "these combinations are then used to verify the system under test according to the spatio - temporal specification .    _",
    "contributions : _ the proposed framework will help to reduce the impedance mismatch between formal methods and model - based representations and system code , which in turn will help in increasing the adoption rate by practitioners .",
    "our framework aims at providing a set of application programming interfaces ( apis ) to map programming language constructs to the formal methods representation .",
    "the usability of formal methods will be improved indirectly , as the formal method constructs will be expressed in terms of system code .",
    "formal methods were introduced as a means of clearly specifying system requirements .",
    "hinchey @xcite argues that although formal methods are essential in the development of critical systems , they have not achieved the level of acceptance , nor level of use , that many believe they should .",
    "the uptake of formal methods has been far from ideal because many still believe that formal methods are difficult to use and require great mathematical expertise @xcite .",
    "spichkova reports @xcite that in many cases simple changes of a specification method can make it more understandable and usable .",
    "she argues that such a simple kind of optimisation is often overlooked just because of its obviousness , and it would be wrong to ignore the possibility to optimise the language without much effort .",
    "for example , simply adding an enumeration to the formulas in a large formal specification makes its validation on the level of specification and discussion with cooperating experts much easier .",
    "hinchey @xcite also assert that in addition to the benefits of abstraction , clarification , and disambiguation , using formal methods at the formal specification level are invaluable documentation that greatly assist future system maintenance .",
    "this research incorporates specifications used in property - based testing to further help in precisely documenting the system .",
    "lamport @xcite states two reasons for using formal methods formulas instead of programming language tailored to the specific problem :    * specialized languages often have limited realms of applicability .",
    "a language that permits a simple specification for one system require a very complicated one for a different kind of system .",
    "the duration calculus seems to work well for real - time properties ; but it can not express simple liveness properties . a formalism like tla+ that , with no built - in primitives for real - time systems or procedures , can easily specify gas burner for example , it is not likely to have difficulty with a different kind of gas burner . *",
    "formalisms are easy to invent .",
    "however , practical methods must have a precise language and robust tools .",
    "there are many examples where applying formal methods has lead to increasing reliability of systems .",
    "for example , a model checker tlc was developed for tla formula was used to find errors in the cache coherence protocol for a compaq multiprocessor @xcite .",
    "in addition , @xcite includes many examples of successfully using formal methods to design systems .",
    "there are many styles in testing software .",
    "one popular style is that of _ example based testing_. in this style , test cases requires one to provide an example scenario for each feature .",
    "that is , each example may exercise one feature of the system under test and the test runs only once with relevant input .",
    "dually , _ property based testing _ allows for the use of randomly generated tests based on system properties to test systems against their specifications and one test can run hundreds of times with different input values .",
    "an example of such library in haskell programming language is _",
    "quickcheck_. hughes ( inventor of _ quickcheck _ ) showed that using this library allowed him to discover hundreds of bugs in critical systems such as automobiles and the dropbox file sharing service @xcite .",
    "however , _ quickcheck _ uses haskell programming language specific constructs ( such as arrays , integers ) and more complicated data types ( such as algebraic data types ) to model the specification of a system",
    ". therefore , this research will investigate the possibility to have formal models ( bespaced , tla+ or focus@xmath0   formulas ) as specifications instead of haskell constructs , as well as applicability of this approach for property based testing of real systems .",
    "hughes @xcite asserts that dijkstra was wrong when he claimed that testing can never demonstrate the absence of bugs in software , only their presence .",
    "hughes argues that if we test properties that completely specify a function ( such as the properties of reversing a list ) then property based testing will eventually find every possible bug . in practice",
    "this is not true , since we usually do not have a complete specification , but this style of testing is very effective in exploring scenarios that no human can think of trying .",
    "_ quickcheck _ started as a testing framework for testing pure functional programs @xcite .",
    "however , recent development in the area of property - based testing @xcite incorporates the state - fulness of systems . that allowed for the testing of state - ful systems and even test programs written in imperative languages such as c.",
    "hughes assert that testing state - ful systems is challenging .",
    "he argues that the state is an implicit argument to and result from every api call , yet it is not directly accessible to the test code .",
    "therefore , his solution was to model the state abstractly and introduce state transition function that model the operations in api under test .    however , the state transition in _ quickcheck _ is modelled manually using _ pre _ , _ post _ and _ next _ functions for every operation in the system under test . on the other hand",
    ", our framework will generate these transitions automatically using specification formulas .",
    "figure [ fig : proposed_model ] depicts the proposed model that will allow for combining formal methods with property - based - testing .",
    "the first row ( api calls ) represents the actual system under test .",
    "the second row represents the world in which the specification formulas lives .",
    "the time between subsequent api calls is modelled through a function of discreet time .",
    "time functions are mapped to the corresponding state transitions between states .",
    "the general idea is to start with specifying the system using human - oriented modelling techniques founded on formal methods .",
    "then , to develop system software according to the specifications . finally , to run the test suite to verify that the system runs according to the specification .",
    "if a test fails , it will be the judgment of the engineer to decide whether the errors were in the system software or in the specification formulas for which the system was not correctly specified .",
    "the implementation language of choice is scala programming language .",
    "it was selected for many reasons .",
    "first of all , it is one of the most popular languages on the java virtual machine .",
    "the ecosystem will make it possible to find quick answers for questions that are related to technical aspects .",
    "secondly , bespaced is implemented in scala .",
    "this will lower the impedance mismatch between research model and bespaced .",
    "finally , scala , is a functional language .",
    "this will make working with the concepts of property based testing more natural and simple .    for the property - based testing",
    ", we are going to apply the _ scalacheck library_. however , since the research will investigate the substitution of the simplistic state machine in scalacheck with formal methods , the use of this library might be limited .",
    "to relate the different modeling and abstraction layers to each other in the proposed framework , we are using category theory .",
    "category theory helps in illuminating the relations of many aspects of the proposed ingredients that would be unseen otherwise .",
    "figure  [ fig : proposed_model ] relates the human actions ( api call ) , system states ( state model ) and results to each other .",
    "our formal methods - based techniques will only be applied to the state - model level .",
    "this will help to stair the direction of future investigation of the proposed model .",
    "to create the initial set of formal methods - based modeling languages and tools , we have selected the following ingredients , which have a number of similarities in syntax and semantics and are also covering spatio - temporal aspects of the specifications :    * tla+ : temporal logic of actions ( tla ) is a logic developed by leslie lamport , which combines temporal logic with a logic of actions .",
    "it is used to describe behaviours of concurrent systems , cf .",
    "* focus@xmath0 : formal language providing concise but easily understandable specifications that is focused on timing and spatial aspects of the system behaviour , cf . @xcite . * bespaced : a framework for modelling and checking behaviour of spatially distributed component systems , cf .",
    "@xcite .",
    "the focus@xmath0  language was inspired by focus @xcite , a framework for formal specification and development of interactive systems . in both languages ,",
    "specifications are based on the notion of streams .",
    "however , in the original focus input and output streams of a component are mappings of natural numbers to single messages , whereas a focus@xmath0stream is a mapping from natural numbers to lists of messages within the corresponding time intervals . moreover , the syntax of focus@xmath0is particularly devoted to specify spatial ( s ) and timing ( t ) aspects in a comprehensible fashion , which is the reason to extend the name of the language by st .",
    "the focus@xmath0  specification layout also differs from the original one : it is based on human factor analysis within formal methods @xcite .",
    "design goals of bespaced include :    * ability to model spatial behaviour in a component oriented , simple and intuitive way * automatically analyse and verify systems and integration possibilities with other modelling and verification tools .",
    "blech and schmidt proposed a process for checking properties of models and described the approach using different examples @xcite . in our current work ,",
    "we only focus on the spatio - temporal aspects of bespaced .    from a programming language perspective",
    ", we create bespaced models by using scala case classes . during the specification process , this gives a functional abstract datatype feeling with a domain specific language flavour .",
    "a typical bespaced formula is shown below    ....   implies(and(timeinterval(300,605),owner(\"areaofinterest \" ) ) ,       occupybox(1051,3056,1505,3603 ) ) ....    the language constructs comprise basic logical operators ( such as and and implies ) .",
    "furthermore special constructs for space , time , and topology are incorporated . in the example , occupybox represents a rectangular two - dimensional space while constructs such as timeinterval allow for the modeling of temporal aspects possible .",
    "a variety of different operators exist which facilitates the reasoning about geometric and topological constraints .",
    "furthermore , connections to data sources from cyber - physical systems exists ( e.g. , lego - trains @xcite and event analysis for industrial automation facilities @xcite ) which facilitates the construction of demonstrators and conduction of experiments .    in our work",
    "we are using focus@xmath0   and tla+ for modelling the behaviour of systems , whereas the bespaced functionality is invoked at a lower level to check and test properties of the specified systems .",
    "to understand the workflow of the proposed model , we use the example of therac25 mentioned in the introduction .",
    "the machine included vt-100 terminal which controlled the pdp-11 computer . the sequence of user actions leading to the accidents was as follows :    * user selects 25 mev photon mode * user enters `` cursor up '' * user select 25 mev electron mode * previous commands have to take place in eight seconds    therefore , we use algebraic data types to model the operations of the machine .",
    "then we provide formal specification formulas and feed them to the framework .",
    ".... sealed abstract class operation case object cursorup extends operation case object select25mevphotonmode extends operation case object select25mevelectronmode extends operation case object otherkindofoperation extends operation    type therac25 = sut    val init : tlainit =   { .. some predicate ... } val next : tlanext = { .. another predicate ... }    val correctbehaviours : list[tlastate ] =      therac25.correctbehaviours(init , next )   therac25.checkagainst(correctbehaviours , randoms(operation ) ) ....    the framework would generate large number of _ operation _ combinations that are more likely to catch the error that caused the fatal accidents .",
    "frequencies of generated commands can be tailored to match real system behaviour .",
    "the example used tla+ formulas .",
    "however , focus@xmath0   formulas could have been used instead to specify the system .    to achieve",
    "that , we have partially implemented the code that is responsible to generate random bespaced constructs using techniques from functional programming .",
    "the invariant generator is composed of smaller generators such as integer and string generators as shown in the code below :    ....    trait generator[+t ] {      self = >          def generate : t           def map[u](f : t = > s ) : generator[u ] = new generator[u ] {          def generate = f(self.generate )      }    }       val integers = new generator[int ] {       def generate = scala.util.random.nextint ( )    }       val booleans = integers.map(_ > = 0 )       val strings = integers.map(_.tostring )       def bspaced : generator[invariant ] = for {        int1   < - integers        int2   < - integers        int3   < - integers        int4   < - integers        int5   < - integers        str",
    "< - strings    } yield implies(and(timeinterval(int1 , int2),owner(str ) ) ,                occupybox(int3 , int4 , int5 , int6 ) )    ....",
    "the evaluation is based on a case study that involves robotics that are installed in the virtual experiences lab(vxlab ) at rmit university , australia .",
    "the implemented model will be installed in the robotic arms or simulations of them .",
    "for instance , assuming the existence of the function _ initialiseposition ( ) : future[position ] _ which is responsible to move a robotic arm to an initial position .",
    "the _ future _ data type is used because moving arms takes long time and we need to verify the final position the arm reached after the api call .",
    "however , since _ initialiseposition ( ) _ is just returning the initial position , it will return instantly .",
    "the framework will call this api function and simultaneously check whether it is in accordance to the specified state . failing tests for the intended framework might indicate :    *",
    "failure in the software of the system under test .",
    "this is one of the benefits of property based testing .",
    "the found error may have never been discovered otherwise . *",
    "wrong specification .",
    "the system under test may have been wrongly underspecified . in this case , the engineer might change the formulas to reflect system required properties .",
    "therefore , the input to the framework is formal - methods formulas and the output is the correct behaviours specified by these formulas . the formulas are written in host programming language ( scala in this research ) .",
    "for example , the initial state for the aforementioned robotic example would be specified as follows :    .... val position : tlavariable = tlavariable(\"y \" ) val init : tlainit =   position ....    for this simple example ( the _ next _ formula has been omitted for simplicity ) , the only possible correct behaviour for this specification formula is that _ position _ should equal to `` y '' .",
    "the framework will then check whether the position was indeed `` y '' after the call to _ initialiseposition ( ) _ , otherwise , it reports an error .",
    ".evaluating cases with tla+ init formulas [ cols=\"^,^,^,^\",options=\"header \" , ]     [ tab : table2 ]    table [ tab : table2 ] shows some examples for the evaluation of the intended framework using tla+ formula ( focus@xmath0   evaluation will follow similar pattern ) . the first call to _ initialiseposition ( ) _",
    "is correctly specified and the actual result reflects the specification ( assuming arm initial position is `` y '' ) , as a result , it is regarded as a successful case . the second call to _ initialiseposition ( ) _ is different from the actual position , therefore , its was reported as an error .",
    "although the result is expected for the call to _ movetoq ( ) _ in the third case , the framework reports an error because the specification is not correct ( the arm can not logically move to its current position ) . finally , _",
    "movetor _ is reported as error because the actual result ( reached position ) is not correct .",
    "the result column is calculated by getting the value from the _ future _ dataype that each api call returns through _ oncomplete _ callback as follows :    ....    initialiseposition ( ) oncomplete {    case success(position ) = > println(position )    case failure(t ) = > println(\"an error has occured : \" + t.getmessage ) }    ....",
    "in this paper , we have presented ongoing work on the use of spatio - temporal models for formal methods - based analysis and testing .",
    "we have described different ingredients and their interplay : testing frameworks , tla+ , focus@xmath0   and bespaced .",
    "the overall goal of our research is the reduction of the impedance mismatch between formal methods and practitioners .",
    "j.  blech , i.  peake , h.  schmidt , m.  kande , a.  rahman , s.  ramaswamy , s.  sudarsan , and v.  narayanan . .",
    "ieee 20th conference on emerging technologies factory automation ( etfa)_. ieee computer , sept 2015 .",
    "m.  g. hinchey .",
    "confessions of a formal methodist . in _ proceedings of the seventh australian workshop conference on safety critical systems and software 2002 - volume 15 _ , scs 02 , pages 1720 .",
    "australian computer society , inc .",
    "l.  lamport .",
    "hybrid systems in tla+ . in r.",
    "l. grossman , a.  nerode , a.  p. ravn , and h.  rischel , editors , _ hybrid systems _",
    ", number 736 in lecture notes in computer science , pages 77102 .",
    "springer berlin heidelberg . : 10.1007/3 - 540 - 57318 - 6_25 .",
    "s.  patra .",
    "worst - case software safety level for braking distance algorithm of a train . in _",
    "system safety , 2007 2nd institution of engineering and technology international conference on _ , pages 206210 .",
    "iet , 2007 .",
    "a.  zamansky , g.  rodriguez - navas , m.  adams , and m.  spichkova .",
    "formal methods in collaborative projects . in _",
    "11th international conference on evaluation of novel approaches to software engineering_. ieee , 2016 ."
  ],
  "abstract_text": [
    "<S> this paper presents our ongoing work on spatio - temporal models for formal analysis and property - based testing . </S>",
    "<S> our proposed framework aims at reducing the impedance mismatch between formal methods and practitioners . </S>",
    "<S> we introduce a set of formal methods and explain their interplay and benefits in terms of usability . </S>"
  ]
}