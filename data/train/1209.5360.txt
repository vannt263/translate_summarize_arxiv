{
  "article_text": [
    "the standard balanced allocation paradigm works as follows : suppose @xmath6 balls are sequentially placed into @xmath6 bins , where each ball is placed in the least loaded of @xmath5 uniform independent choices of the bins . then the maximum load ( that is , the maximum number of balls in a bin ) is @xmath7 , much lower than the @xmath8 obtained where each ball is placed according to a single uniform choice @xcite .    the assumption that each ball obtains @xmath5 independent uniform choices is a strong one , and a reasonable question , tackled by several other works , is how much randomness is needed for these types of results ( see related work below ) . here",
    "we consider a novel approach , examining balanced allocations in conjunction with _",
    "double hashing_. in the well - known technique of standard double hashing for open - addressed hash tables , the @xmath9th ball obtains two hash values , @xmath10 and @xmath11 . for a hash table of size @xmath6 ,",
    "@xmath12 $ ] and @xmath13 $ ] .",
    "successive locations @xmath14 , @xmath15 , are tried until an empty slot is found . as discussed later in this introduction ,",
    "double hashing is extremely conducive to both hardware and software implementations and is used in many deployed systems .    in our context",
    ", we use the double hashing approach somewhat differently .",
    "the @xmath9th ball again obtains two hash values @xmath10 and @xmath11 .",
    "the @xmath5 choices for the @xmath9th ball are then given by @xmath16 , @xmath17 , and the ball is placed in the least loaded .",
    "we generally assume that @xmath10 is uniform over @xmath18 $ ] , @xmath11 is uniform over all numbers in @xmath19 $ ] relatively prime to @xmath6 , and all hash values are independent .",
    "( it is convenient to consider @xmath6 a prime , or take @xmath6 to be a power of 2 so that the @xmath11 are uniformly chosen random odd numbers , to ensure the @xmath20 values are distinct . )",
    "it might appear that limiting the space of random choices available to the balls in this way might change the behavior of this random process significantly .",
    "we show that this is not the case both in theory and in practice .",
    "specifically , by `` essentially indistinguishable '' , we mean that , empirically , for any constant @xmath21 and sufficiently large @xmath6 the fraction of bins of load @xmath21 is well within the difference expected by experimental variance for the two methods .",
    "essentially indistinguishable means that in practice for even reasonable @xmath6 one can not readily distinguish the two methods . by `` vanishing '' we mean",
    "that , analytically , for any constant @xmath21 the asymptotic fraction of bins of load @xmath21 for double hashing differs only by @xmath22 terms from fully independent choices with high probability .",
    "a related key result is that @xmath23 bounds on the maximum load hold for double hashing as well .",
    "surprisingly , the difference between @xmath5 fully independent choices and @xmath5 choices using double hashing are essentially indistinguishable for sufficiently large @xmath6 and vanishing asymptotically .",
    "the difference is vanishing ( theorem  [ mainthm ] and corollary  [ cormain ] ) , and for finite @xmath6 the results from our experiments demonstrate the difference is essentially indistinguishable ( section  [ sec : sims ] ) . ]    as an initial example of empirical results , table  [ table_example ] below shows the fraction of bins of load @xmath0 for various @xmath0 taken over 10000 trials , with @xmath24 balls thrown into @xmath6 bins using @xmath25 and @xmath26 choices , using both double hashing and fully random hash values ( where for our proxy for `` random '' we utilize the standard approach of simply generating successive random values using the drand48 function in c initially seeded by time ) .",
    "most values are given to five decimal places .",
    "the performance difference is essentially indistinguishable , well within what one would expect simply from variance from the sampling process .",
    "0.45    [ cols=\"^,^,^\",options=\"header \" , ]     we note that we obtain similar results under variations of the standard @xmath5-choice scheme .",
    "for example , using vcking s approach of splitting in @xmath5 subtables and breaking ties to the left , we obtain essentially indistinguishable load distributions with fully random hashing and double hashing . table  [ table_4 ] shows results from a representative case where @xmath26 , again averaging over 10000 trials .",
    "the case of @xmath27 is instructive ; this appears very close to the threshold where bins with load 3 can appear .",
    "while there appears to be a deviation , with double hashing have some small fraction of bins with load 3 , this corresponds to exactly 2 bins over the 10000 trials .",
    "further simulations suggest that this apparent gap is less significant than it might appear ; over 100000 trials , for random , the maximum load was 3 for three trials , while for double hashing , it was 3 for four trials .    in the standard queueing setting ,",
    "balls arrive as a poisson process of rate @xmath28 for @xmath29 to a bank of @xmath6 first - in first - out queues , and have exponentially distributed service times with mean 1 .",
    "jobs are placed by choosing @xmath5 queues and going to the queue with the fewest jobs .",
    "the asymptotic equilibrium distributions for such systems with independent , uniform choices can be found by fluid limit models @xcite .",
    "we ran 100 simulations of 10000 seconds , recording the average time over all packets after time 1000 ( allowing the system to `` burn in '' . )",
    "an example appears in table  [ table_5 ] .",
    "while double hashing performs slightly worse in these trials , the gap is far less than 0.1% in all cases .",
    "we sketch an approach to extend the fluid limit result to provide an @xmath23 result .",
    "in fact , we show here that for @xmath6 balls being thrown into @xmath6 bins via double hashing , we obtain a load of @xmath30 , avoiding the @xmath31 term of section  [ sec : witness ] . while this is technicality for the case of @xmath5 constant , this approach could be used to obtain bounds for super - constant values of @xmath5 .",
    "the basic approach is not new , and has been used in other settings , such as @xcite .",
    "essentially , we can repeat the `` layered induction '' approach of @xcite in the setting of double hashing , making use of the results of section  [ sec : fluid ] that the deviations from the fully random setting are at most @xmath22 for a suitable number of levels .",
    "suppose @xmath6 balls are placed into @xmath6 bins using the balanced allocation scheme with double hashing . then with @xmath32 choices ( for @xmath5 constant ) the maximum load is @xmath30 with high probability .",
    "let @xmath33 be the number of bins of load @xmath21 after all @xmath6 balls have been thrown .",
    "we will follow the framework of the original balanced allocations paper @xcite , and start by noting that @xmath34 . now from the argument of section  [ sec : fluid ] , the probability that the @xmath35th ball chooses @xmath5 bins all with load at least @xmath36 is bounded above by @xmath37 , where @xmath38 was determined in lemma  [ lem : mainlemma ] , as long as , up to that point , we can condition on all the ancestry lists being suitably small , which is a high probability event .",
    "we will denote the event that the ancestry lists are suitably small throughout the process by @xmath39 .",
    "finally , let @xmath40 and @xmath41 for @xmath42 .",
    "let @xmath43 be the event that @xmath39 occurs and that @xmath44 .",
    "( we choose @xmath45 values similarly to @xcite for convenience , but use the constant 4 on the right hand side whereas @xcite uses the constant @xmath46 to account for the extra @xmath47 in our probability over just the value @xmath48 . ) a simple induction using the formula for @xmath45 yields @xmath49 for @xmath32 .",
    "now we fix some @xmath50 and consider random variables @xmath51 , where @xmath52 if the following conditions all hold : all @xmath5 choices for the @xmath35th ball have load at least @xmath53 , the number of bins with load at least @xmath53 before the ball is thrown is at most @xmath54 , and the ancestry lists are all suitably small when the ball is thrown so the polylogarithmic bound on the `` extra probability '' that a ball ends up with all @xmath5 choices having load at least @xmath53 holds .",
    "let @xmath55 otherwise .",
    "we note that the number of bins with load at least @xmath21 is at most the sum of the @xmath51 .",
    "let @xmath56 . conditioned on @xmath57",
    ", we have @xmath58 now the sum @xmath51 are dominated by a binomial random variable @xmath59 of @xmath6 trials , each with probability @xmath60 of success , because of the definition of the @xmath61 .    as in @xcite",
    ", we can use the simple chernoff bound from @xcite @xmath62 note that , for large enough @xmath6 and @xmath54 , @xmath63 , as @xmath47 will be a lower order term .",
    "hence for such values , @xmath64 with these choices , we see that as long as @xmath65 ( note that for this value of @xmath60 , @xmath47 is indeed a lower order term ) , @xmath66 and using @xmath67 we have @xmath68 recall again that @xmath69 depended on @xmath70 and @xmath71 , and the latter holds with certainty .",
    "note that we only require @xmath72 before @xmath73 , based on the bound for the @xmath45 .",
    "hence the total probability that the required events @xmath74 do not hold up to this point is bounded by @xmath75 hence , as long @xmath76 is @xmath77 ( which we argued in section  [ sec : fluid ] ) , we are good for loads up to @xmath78 . after only one more round , using the same argument , we can get to the point where @xmath79 , using the same chernoff bound argument , since the expected number of bins with load at least @xmath80 would be dominated by @xmath81 .    from this point",
    ", one can show that the maximum load is @xmath82 for some constant @xmath83 with high probability by continuing with a variation of the _ layered induction _",
    "argument as used in @xcite .",
    "if we condition on there being @xmath84 bins with load at least @xmath85 for some @xmath86 , for a ball have all @xmath5 choices have bins with at least @xmath87 , it must have at least two of its bin choices have load at least @xmath85 .",
    "even when using double hashing , for any ball , any pair of the @xmath5 choices of bins are chosen independently from all possible pairs of distinct bins is prime ; if not , we need to take into account the issue that the offset is relatively prime to @xmath6 . ]",
    "; hence , by a union bound the probability any ball causes a bin to have load at least @xmath87 is at most @xmath88 , giving an expected number of bins of load at least @xmath87 of at most @xmath89 .",
    "( here this step is slightly different than the corresponding step in @xcite ; because of the use of double hashing in place of independent hashes , we use a union bound over the @xmath90 pairs of bins .",
    "this avoids the issue of the ancestry lists completely at this point of the argument , which we take advantage of once we ve gotten down to a small enough number of bins to complete the argument . )",
    "applying the same chernoff bounds as previously , we find @xmath91 with high probability , @xmath92 with high probability . by a union bound ,",
    "the probability of any ball having at least 2 choices with load at least @xmath93 is at most @xmath94 , and hence @xmath95 with probability @xmath77 .",
    "note can make the probability smaller ( such as @xmath96 ) by taking a larger constant @xmath97 term .",
    "this gives that the maximum load is @xmath30 with high probability under double hashing ."
  ],
  "abstract_text": [
    "<S> with double hashing , for an item @xmath0 , one generates two hash values @xmath1 and @xmath2 , and then uses combinations @xmath3 for @xmath4 to generate multiple hash values from the initial two . </S>",
    "<S> we show that the performance difference between double hashing and fully random hashing appears negligible in the standard balanced allocation paradigm , where each item is placed in the least loaded of @xmath5 choices , as well as several related variants . </S>",
    "<S> we perform an empirical study , and consider multiple theoretical approaches . while several techniques can be used to show asymptotic results for the maximum load , we demonstrate how fluid limit methods explain why the behavior of double hashing and fully random hashing are essentially indistinguishable in this context . </S>"
  ]
}