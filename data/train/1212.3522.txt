{
  "article_text": [
    "the basic and simplest way to communicate between _ mathematica _ and form  @xcite is using input and output files .",
    "this method has been used in feyncalc  @xcite and formcalc  @xcite , which prepares the symbolic expressions of the diagrams in an input file for form , runs form , and retrieves the results back to _",
    "mathematica_.    another method to exchange data between different processes is to use pipes .",
    "the detailed usage of pipe communication between form and other external programs is described in @xcite . in this article",
    "we implement a user - friendly communication between _ mathematica _ and using both possibilities .",
    "we would like to note that formcalc and ` formget.tm ` , mentioned at http://www.feynarts.de/formcalc , also use _ mathlink _ and pipes , but do not provide a general interface from _ mathematica _ to form .",
    "the remainder of this section is intended for programmers only and not needed to understand how to use formlink .",
    "the basic idea is that we create two unnamed pipes , one is the read - only descriptor with file handler ` r # ` , the other is the write - only descriptor with file handler ` w # ` , then start form with the pipe option automatically through the _ mathlink _ executable formlink    ....      form -pipe r#,w # init ....    where init refers to the form code ` init.frm ` , which is discussed in the following .",
    "when the pipe connection has been established successfully , form sends its process identifer ( pid ) in ascii decimal format with an appended newline character to the descriptor w # and then form will wait for the answer from the descriptor r#. the answer must be two comma - separated integers in ascii decimal format followed by a newline character .",
    "the first integer corresponds to the form pid while the second one is the pid of parent process which started form . if the answer is not obtained after some time - out , or if it is not correct , i.e. it is not a list of two integers or the first integer is not the form pid , then form fails .",
    "when the channel has been established successfully , form will run the code in the init.frm file , containing the following instructions :    ....      off statistics ;      # ifndef ` pipes _ '          # message \" no pipes found \" ;          .end ;      # endif      # if ( ` pipes _ ' < = 0 )          # message \" no pipes found \" ;          .end ;      # endif      # procedure put(fmt , mexp )          # toexternal ` fmt ' , ` mexp '          # toexternal \" # the - end - mark # \"      # endprocedure      # setexternal ` pipe1 _ ' ;      # toexternal \" ok \"      # fromexternal      .end ....    the core parts are the last two lines before the .end instruction .",
    "the first line , ` # toexternal \" ok \" ` , sends the word ` ok ` in ascii string format from form to formlink , it confirms that the communication channel has been established successfully , otherwise formlink will treat it as failed .",
    "the second line blocks form and waits for the code which will be sent from _",
    "mathematica_. when the prompt arrives , form will continue to execute code from ` # fromexternal ` .",
    "we defined a procedure named put to send data from form back to _",
    "mathematica_. note that if you want to send data without this procedure , you need to send the end mark , i.e. the string ` # the - end - mark # ` , to indicate that the data is complete , otherwise formlink will be blocked until the end mark has been received .",
    "until now we have demonstrated a round communication from _ mathematica _ to form , and then back to _",
    "mathematica _ again .",
    "this procedure can be looped if we put another ` # fromexternal ` in the code sent from _",
    "mathematica _ to form , and in this sense , we get an interactive form , which can not be easily achieved by the first way which exchanges data by input and output files .",
    "to install the formlink and feyncalcformlink packages , run the following instruction in a kernel or notebook session of _ mathematica _ 7 , 8 or 9 on linux , macosx , or windows .",
    "import[\"http://www.feyncalc.org / formlink / install.m \" ]",
    "....    the installer will automatically download ` formlink.zip ` from the url and extract the files from the archive to the directory ` applications ` in the directory ` $ userbasedirectory ` , which is by default located in the search path of _ mathematica_. their values for different platform are listed in table  [ userbasedirectory ] .",
    "specifying    ....      $ installdirectory = mydir ....    before running the installer will change the installation directory .",
    "it is recommended to use a directory which is on the _ mathematica _ path , e.g. , ` homedirectory [ ] ` , or ` $ basedirectory ` .    for user convenience , the binary files of formlink , form and tform for linux ,",
    "microsoft windows and mac os x are also installed .",
    "furthermore the latest version of feyncalc is downloaded from http://www.feyncalc.org and installed automatically into the same directory unless it has been already installed somewhere on the _ mathematica _ path .",
    "0.9cc1cmx platform & & $ userbasedirectory + & & c:\\users\\_username_\\appdata\\roaming\\mathematica + linux & & ~/.mathematica + mac os x & & ~/library / mathematica +    at the end of the installation formlink and feyncalcformlink are loaded and two simple examples are run , one uses ` formlink ` :                    the other example executes ` feyncalcformlink ` , which generates and runs the corresponding form program , substituting ascii values for greek indices intermediately :        ' '' ''     +    ` autodeclare index lor ; format mathematica ; l resfl = ( g\\_(1,lor2)*g\\_(1,lor3)*g\\_(1,lor4)*g\\_(1,lor5)*g\\_(1,lor6)*g\\_(1,lor1 ) ) ; trace4,1 ; contract 0 ; .sort ; \\#call put(\\%e  , resfl ) \\#fromexternal `    ' '' ''                        cc.5cmx platform & & make commands + & & make -f makefile.cygwin",
    "+ & & make -f makefile.cygwin install + & & make -f makefile.linux32   + & & make -f makefile.linux32 install + & & make -f makefile.linux64   + & & make -f makefile.linux64 install + & & make -f makefile.macosx64   + & & make -f makefile.macosx64 install +    the source code of formlink is included in the ` src ` folder .",
    "the scripts for compilation are listed in table  [ makecommands ] .",
    "we used the gnu compiler ` gcc ` , producing an executable ` formlink ` in the corresponding subdirectory in ` bin ` .",
    "the basic functions are ` formlink ` to execute form programs written as a string in _ mathematica _ and ` feyncalcformlink ` to run a program specified in feyncalc syntax through form .",
    "these two _ mathlink_-based functions are easy to use for form and feyncalc practicioners .",
    "* ` formlink ` + ` formlink [ \" form statements \" ] ` runs the form statements in form and returns the result to _",
    "mathematica_. if only one ` local ` assignment is present the return value is the result .",
    "if more form ` local ` variables are present , a list of results is returned . `",
    "formlink ` has several options , the default values are as follows , +    + here we only explain the most important ones .",
    "+ the option ` form2 m ` can be used to specify the function which translates the expression from form to _ mathematica _ format , its default value is function ` form2 m ` , which has the following usage : form2m[string , replist ] translates string by toexpression[stringreplace[string , replist],traditionalform ] to _ mathematica_. ` form2 m ` can also be set to identity , which means that the result from form will be returned as a string , containing the exact output for the ` local ` expression .",
    "if conversion to _ mathematica _ is straighforward , i.e. , there are no bracketed expressions or other syntaxes not easily interpreted by _",
    "mathematica _ , then it is best to use the setting ` form2m\\totoexpression ` , which will just call ` toexpression ` on the string result coming from form .",
    "+ the option ` replace ` is a list of string replacements , its default setting is ` $ form2 m ` , containing a list of user - changeable ( e.g. in config.m ) basic function - name translations from form to _",
    "mathematica_. +    + the option ` print ` can be used to switch informative messages on or off during execution .",
    "the option ` formsetup ` can be a list of form settings , like ` tempdir ` which dynamically produces a ` form.set ` file next to the binary which is then called automatically upon starting form .    * ` feyncalcformlink ` + ` feyncalcformlink[expr ] ` translates the feyncalc expression ` expr ` to a form program , identifying automatically traces , symbols , vectors , indices and the dimension , calculates it , pipes it back to _",
    "mathematica _ and translates it to feyncalc syntax .",
    "+ there are several options for ` feyncalcformlink ` , the default settings are as follows , +    + most of the options are similar to ` formlink ` , we only explain functions , ` extradeclare ` , ` idstatements ` and form2fc .",
    "+ if the option functions is set to `` cfunctions '' , then all non - system  functions , except those present in $ m2form and some feyncalc functions , are automatically declared cfunctions in form .",
    "if functions option is set to `` functions '' , then they are declared noncommutative functions , i.e. , functions in form .",
    "+ the option extradeclare can be used to put any extra valid form declarations which are not identified automatically , for example : + ` extradeclare\\to{cfunctions gammafunction ; , functions myoperator ; } ` + the option ` idstatements ` can be set to a string or a list of strings corresponding to form ` identify ` statement like ` { \" i d k1.k1=mass^2 ; \" } ` .",
    "+ the option form2fc is set to the function being used to translate expression from form to feyncalc format , the default is form2fc .",
    "the basic internal procedure to use formlink is to start form with ` formstart ` , then send the code to form for execution using ` formwrite ` and ` formprompt ` , read and convert the result back to _ mathematica _ through ` formread ` , finally , stop form by calling ` formstop ` .",
    "all these calls can be encoded into a single function named ` formlink ` which has been introduced in the previous section .",
    "* ` formstart ` + ` formstart [ ] ` automatically determines the path of the ` form ` executable , which is located in the corresponding subfolder in the ` bin ` directory , and then starts form in pipe mode .",
    "you can also call ` formstart[formpath ] ` with explicit full path ` formpath ` of the ` form ` excutable . * ` formwrite ` + ` formwrite[script ] ` sends the ` script ` with an appended newline character , to form .",
    "notice that form will not start to execute the script right away and you can send your scripts by using the ` formwrite[script ] ` many times .",
    "when you are finished , send the prompt , then form executes all instructions sent .",
    "+ ` formwrite[scripts ] ` , where ` scripts ` is a list of strings , will call ` formwrite[script ] ` for each element ` script ` in the list scripts , so if your code spans several lines , you can also put them as a list with each element corresponding to a single line of your scripts . * ` formprompt ` + ` formprompt [ ] ` sends the prompt to form , which will make form continue to execute the code you have sent .",
    "the default prompt in form is a blank line , formlink has adopted this default option , so do not send blank lines unintentionally . * ` formread ` + ` formread [ ] ` reads the data from form .",
    "it should be noted that if no data is sent from form , the calling thread will be blocked until data is available .",
    "you can use the procedure ` put ` defined in ` init.frm ` to send the data from form .",
    "+ ` formread [ ] ` will first check whether the pipe has been closed or not , if the pipe has been closed , for example when form has encountered some problems , ` formread [ ] ` will redirect the standard output from form to _ mathematica _ , so the user can check the error messages . * ` formstop ` + ` formstop [ ] ` uninstalls the link to form . `",
    "formstop[all ] ` kills all running formlink processes .    as we discussed in section  [ basic ideas",
    "] , there are two ways to communicate between form and _ mathematica _ , the functions introduced above are all used with the method of piping .",
    "we also provide two functions which are not using _ mathlink _ , but deal with input and output files only .    * ` runform ` + runform[script ] runs script in form and writes the result to runform.frm and the log file to form.log in the current directory , i.e. , the value returned by the _ _ m__athematica function directory [ ] .",
    "+ runform[script , formfile ] uses formfile instead of runform.frm .",
    "the first argument script can be a string or a list of strings .",
    "+ an optional third argument can be given to use a specific form executable , otherwise a form executable from $ formlinkdir / bin is used .",
    "* ` readstring ` + readstring[str ] imports str as _ text _ and translates it to _ mathematica _ syntax by using $ form2 m .",
    "you can use ` # write ` preprocessor to write your data to the output file by form , and use readstring to read it into _",
    "mathematica_.    to facilitate the usage of formlink with feyncalc , two functions are provided for performing the conversions between feyncalc and form :    * ` fc2form ` + ` fc2form[exp ] ` translates exp in feyncalc format to form format . `",
    "fc2form[exp ] ` returns a list of two elements , the first one is a list containing the script which will be sent to form .",
    "you can use the function ` showscript[script ] ` to display the script .",
    "the second one is a list of replacement rules , which will be used in ` form2fc ` to translate the result from form format back to feyncalc . `",
    "fc2form ` has the options : functions , dimension , extradeclare , idstatements , print and replace : +    * ` form2fc ` + ` form2fc[formexpr ] ` is used to translate formexpr which is in form format back to the feyncalc one . `",
    "form2fc[formexpr , replacelist ] ` applies the substitution list replacelist at the end .",
    "the second argument is usually the second item of of the list returned by ` fc2form ` .",
    "so the general steps to use the package with feyncalc are to convert feyncalc code to form , and then send the converted code to form for executing with formlink , and finally convert the results in form format back to feyncalc .",
    "all these steps are implemented into a single function feyncalcformlink , which has been introduced in the previoius section .",
    "we list a few examples using the formlink , feyncalcformlink and runform functions .",
    "more examples can be found in the examples directories of both packages .",
    "formlink is a function for running form from _ mathematica _ and returning the result to _",
    "mathematica_.                            using the option form2m@xmath0identity returns a string :                                                                        objects like in form are translated to ( 1-x ) in _ mathematica _ :                                                            alternatively we may just enter the _ mathematica _ expression which is then automatically translated to a form program :                    the default option setting of form2 m does general translation of form syntax to _ mathematica_/feyncalc . here",
    "we can use the simpler toexpression as a setting of form2 m .    while it is possible to use even 42 instead of 21",
    ", we see already for power 21 that it takes longer to transfer the large expression between form and _ mathematica _ than to calculate it in either form or _ mathematica _ directly .",
    "so it is best not to transfer large expressions , if possible .",
    "so for somewhat larger expressions there is noticable overhead for piping the expression back to _",
    "mathematica _ as a string by formread and for translating the string to _ mathematica _ syntax ( toexpression ) .",
    "an accurate timing of form can be done by using runform :            last[stringsplit[@xmath1,@xmath2n]]@xmath3 is a pure function to extract the last line of the string output of runform , returning the timing .",
    "so mresult has more than 12 million terms and it occupies around 2 gb . for this example with",
    "a lot of terms form 4 is slightly slower than _ mathematica _ 9 .",
    "to do the same in _ mathematica _ requires more work :                                                                                                                                    this sets back the default output format type to standardform .",
    "calculate a trace @xmath4 .",
    "using diractrace in feyncalc does not calculate immediately :            feeding this into feyncalcformlink has enough information to tell form to do the trace in d dimensions :        ' '' ''     ` symbol d ; dimension d ; autodeclare index lor ; format mathematica ; l resfl = ( g\\_(1,lor1)*g\\_(1,lor2)*g\\_(1,lor3)*g\\_(1,lor4)*g\\_(1,lor5)*g\\_(1,lor4 ) ) ; tracen,1 ; contract 0 ; .sort ; \\#call put(\\%e  , resfl ) \\#fromexternal `    ' '' ''                                    ' '' ''     ` autodeclare index lor ; format mathematica ; l resfl = ( g\\_(1,lor1)*g\\_(1,lor2)*g\\_(1,lor3)*g\\_(1,lor4)*g5\\_(1 ) ) ; trace4,1 ; contract 0 ; .sort ; \\#call put(\\%e  , resfl ) \\#fromexternal `    ' '' ''                        notice that loading feyncalcformlink by default sets $ levicivitasign =- i , such that traces involving @xmath5 agree .                ' '' ''     ` symbols bla , sym1,sym2 ; autodeclare index lor ; autodeclare symbol sym ; cfunctions anotherfunction , fun , somefunction ; format mathematica ; l resfl = ( anotherfunction(sym2)*fun(bla)*g\\_(1,lor1)*g\\_(1,lor2)*g\\_(1,lor3)*g\\_(1,lor4 ) * ( g7\\_(1)/2)*somefunction(sym1 ) ) ; trace4,1 ; contract 0 ; .sort ; \\#call put(\\%e  , resfl ) \\#fromexternal `    ' '' ''                                    ' '' ''     ` symbols m , m ; vectors p , q ; format mathematica ; l resfl = ( ( m*gi\\_(1)+g\\_(1,p))*(m*gi\\_(1)+g\\_(1,q ) ) ) ; trace4,1 ; contract 0 ; .sort ; \\#call put(\\%e  , resfl ) \\#fromexternal `    ' '' ''                        define simple typesetting rules for p1 , ... p8 :        enter a trace @xmath6 $ ] like this in feyncalc :            calculate it through form :        ' '' ''     ` symbols d , m ; dimension d ; vectors k , p1,p2 ; autodeclare index lor ; format mathematica ; l resfl = ( ( m*gi\\_(1)+g\\_(1,p1))*g\\_(1,lor1)*(m*gi\\_(1)+g\\_(1,k)+g\\_(1,p2))*g\\_(1,lor1 ) * g\\_(1,p2 ) ) ; tracen,1 ; contract 0 ; .sort ; \\#call put(\\%e  , resfl ) \\#fromexternal `    ' '' ''                        check with direct calculation in feyncalc :                          runform runs a form program without _ mathlink _ , but by calling form directly .                ' '' ''     +    ` form 4.0 ( aug 31 2012 ) 32-bits run : we d dec 12 13:21:06 2012 symbol a , b , c ; format nospaces ; on shortstats ; l res= ( a+b+c){}^{\\wedge}5 ; .sort 0.00s 1 > 21 - - > 21 : 380 res \\#write",
    "< res.txt >  ( \\%e )  , res .end 0.00s 21 > 21 - - > 21 : 380 res 0.00 sec out of 0.00 sec `    ' '' ''                    ' '' ''     +    ` form 4.0 ( aug 31 2012 ) 32-bits run : we d dec 12 13:21:06 2012 symbol a , b , c ; off statistics ; l res= ( a+b+c){}^{\\wedge}199 ; .sort ; \\#write < res.txt >  ( \\%e )  , res .end 1.21 sec out of 1.22 sec `    ' '' ''                    ' '' ''     +    ` form 4.0 ( aug 31 2012 ) 32-bits run : we d dec 12 13:21:12 2012 symbol a , b , c ; off statistics ; l res= ( a+b+c){}^{\\wedge}199 ; .sort ; \\#write < res.txt >  ( \\%e )  , res .end 1.21 sec out of 1.21 sec `    ' '' ''                for such simple algebraic operations _",
    "mathematica _ is actually much faster .                ' '' ''",
    "+    ` form 4.0 ( aug 31 2012 ) 32-bits run : we d dec 12 13:21:14 2012 symbol a , b , c , d , e , f , g ; format nospaces ; off statistics ; l res= ( a+b+c+d+e+f+g){}^{\\wedge}21 ; .sort",
    "\\#write < res.txt >  ( \\%e )  , res .end 1.34 sec out of 1.35 sec `    ' '' ''",
    "let us consider some applications of formlink combined with feyncalc . we take the process : @xmath7 as an example , which has been considered in the form courses@xcite .",
    "we can express the squared amplitude as : the expression in ( [ squared amplitude ] ) can be easily translated to feyncalc syntax and then executed by ` feyncalcformlink ` , it takes a fraction of a second to run the code .",
    "the program is :                            ' '' ''     ` symbols emass , mass3,mass4,mass5,mass6,mass7,mass8,s , tmass ; indices m1,m2,m3,n1,n2,n3 ; vectors p1,p2,p3,p4,p5,p6,p7,p8,q1,q2 ; format mathematica ; l resfl = ( ( ( -(emass*gi\\_(1))+g\\_(1,p2))*g\\_(1,m1)*(emass*gi\\_(1)+g\\_(1,p1 ) ) * g\\_(1,n1)*(mass4*gi\\_(2)+g\\_(2,p4))*g\\_(2,m2)*(g7\\_(2)/2)*(-(mass5*gi\\_(2 ) ) + g\\_(2,p5))*g\\_(2,n2)*(g7\\_(2)/2)*(mass7*gi\\_(3)+g\\_(3,p7))*g\\_(3,m3 ) * ( g7\\_(3)/2)*(-(mass8*gi\\_(3))+g\\_(3,p8))*g\\_(3,n3)*(g7\\_(3)/2)*(mass3 * gi\\_(4)+g\\_(4,p3))*g\\_(4,m2)*(g7\\_(4)/2)*(tmass*gi\\_(4)+g\\_(4,q1 ) ) * g\\_(4,m1)*(tmass*gi\\_(4)-g\\_(4,q2))*g\\_(4,m3)*(g7\\_(4)/2)*(-(mass6 * gi\\_(4))+g\\_(4,p6))*g\\_(4,n3)*(g7\\_(4)/2)*(tmass*gi\\_(4)-g\\_(4,q2 ) ) * g\\_(4,n1)*(tmass*gi\\_(4)+g\\_(4,q1))*g\\_(4,n2)*(g7\\_(4)/2))/256 ) ; trace4,1 ; trace4,2 ; trace4,3 ; trace4,4 ; contract 0 ; .sort ; i d q1.q1 = tmass{}^{\\wedge}2 ; i d q2.q2 = tmass{}^{\\wedge}2 ; i d p1.p2 = s/2-emass{}^{\\wedge}2 ; i d q1.q2 = s/2-tmass{}^{\\wedge}2 ; .sort ; \\#call put(\\%e  , resfl ) \\#fromexternal `    ' '' ''                                                          this example is provided by matteo fael , it refers to a part of the calculation done in @xcite .                                                                            attention ! the tensor of neutrini changes in the double photon emission !                                ' '' ''     ` symbols e , gsubf , m , m ; vectors k1,k2,p1,p2 ; autodeclare index lor ; format mathematica ; l resfl = ( ( d\\_(lor3,lor4)*d\\_(lor5,lor6)*(-((e{}^{\\wedge}2*gsubf*g\\_(1,lor1)*(g7\\_(1)/2)*(m - g\\_(1,k1 ) -g\\_(1,k2)+g\\_(1,p1))*g\\_(1,lor5)*(m - g\\_(1,k1)+g\\_(1,p1))*g\\_(1,lor3))/(sqrt\\_(2 ) * p1(k1)*(2*k2(k1)-2*p1(k1)-2*p1(k2))))-(e{}^{\\wedge}2*gsubf*g\\_(1,lor1)*(g7\\_(1)/2 ) * ( m - g\\_(1,k1)-g\\_(1,k2)+g\\_(1,p1))*g\\_(1,lor3)*(m - g\\_(1,k2)+g\\_(1,p1 ) ) * g\\_(1,lor5))/(sqrt\\_(2)*(2*k2(k1)-2*p1(k1)-2*p1(k2))*p1(k2))-(e{}^{\\wedge}2*gsubf * g\\_(1,lor3)*(m+g\\_(1,k1)+g\\_(1,p2))*g\\_(1,lor1)*(g7\\_(1)/2)*(m - g\\_(1,k2 ) + g\\_(1,p1))*g\\_(1,lor5))/(2*sqrt\\_(2)*p1(k2)*p2(k1))-(e{}^{\\wedge}2*gsubf*g\\_(1,lor5 ) * ( m+g\\_(1,k2)+g\\_(1,p2))*g\\_(1,lor1)*(g7\\_(1)/2)*(m - g\\_(1,k1)+g\\_(1,p1 ) ) * g\\_(1,lor3))/(2*sqrt\\_(2)*p1(k1)*p2(k2))+(e{}^{\\wedge}2*gsubf*g\\_(1,lor3)*(m+g\\_(1,k1 ) + g\\_(1,p2))*g\\_(1,lor5)*(m+g\\_(1,k1)+g\\_(1,k2)+g\\_(1,p2))*g\\_(1,lor1 ) * ( g7\\_(1)/2))/(sqrt\\_(2)*p2(k1)*(2*k2(k1)+2*p2(k1)+2*p2(k2)))+(e{}^{\\wedge}2*gsubf * g\\_(1,lor5)*(m+g\\_(1,k2)+g\\_(1,p2))*g\\_(1,lor3)*(m+g\\_(1,k1)+g\\_(1,k2)+g\\_(1,p2 ) ) * g\\_(1,lor1)*(g7\\_(1)/2))/(sqrt\\_(2)*p2(k2)*(2*k2(k1)+2*p2(k1)+2*p2(k2 ) ) ) ) * ( m*gi\\_(1)+g\\_(1,p1))*(-((e{}^{\\wedge}2*gsubf*g\\_(1,lor4)*(m - g\\_(1,k1)+g\\_(1,p1 ) ) * g\\_(1,lor6)*(m - g\\_(1,k1)-g\\_(1,k2)+g\\_(1,p1))*(g6\\_(1)/2)*g\\_(1,lor2))/(sqrt\\_(2 ) * p1(k1)*(2*k2(k1)-2*p1(k1)-2*p1(k2))))-(e{}^{\\wedge}2*gsubf*g\\_(1,lor6)*(m - g\\_(1,k2 ) + g\\_(1,p1))*g\\_(1,lor4)*(m - g\\_(1,k1)-g\\_(1,k2)+g\\_(1,p1))*(g6\\_(1)/2 ) * g\\_(1,lor2))/(sqrt\\_(2)*(2*k2(k1)-2*p1(k1)-2*p1(k2))*p1(k2))-(e{}^{\\wedge}2*gsubf*g\\_(1,lor6 ) * ( m - g\\_(1,k2)+g\\_(1,p1))*(g6\\_(1)/2)*g\\_(1,lor2)*(m+g\\_(1,k1)+g\\_(1,p2 ) ) * g\\_(1,lor4))/(2*sqrt\\_(2)*p1(k2)*p2(k1))-(e{}^{\\wedge}2*gsubf*g\\_(1,lor4)*(m - g\\_(1,k1 ) + g\\_(1,p1))*(g6\\_(1)/2)*g\\_(1,lor2)*(m+g\\_(1,k2)+g\\_(1,p2))*g\\_(1,lor6))/(2 * sqrt\\_(2)*p1(k1)*p2(k2))+(e{}^{\\wedge}2*gsubf*(g6\\_(1)/2)*g\\_(1,lor2 ) * ( m+g\\_(1,k1)+g\\_(1,k2)+g\\_(1,p2))*g\\_(1,lor6)*(m+g\\_(1,k1)+g\\_(1,p2 ) ) * g\\_(1,lor4))/(sqrt\\_(2)*p2(k1)*(2*k2(k1)+2*p2(k1)+2*p2(k2)))+(e{}^{\\wedge}2*gsubf * ( g6\\_(1)/2)*g\\_(1,lor2)*(m+g\\_(1,k1)+g\\_(1,k2)+g\\_(1,p2))*g\\_(1,lor4 ) * ( m+g\\_(1,k2)+g\\_(1,p2))*g\\_(1,lor6))/(sqrt\\_(2)*p2(k2)*(2*k2(k1)+2*p2(k1 ) + 2*p2(k2))))*(m*gi\\_(1)+g\\_(1,p2))*((-k1(lor1)-k2(lor1)+p1(lor1)-p2(lor1))*(-k1(lor2 ) -k2(lor2)+p1(lor2)-p2(lor2))-d\\_(lor1,lor2)*(m{}^{\\wedge}2+m{}^{\\wedge}2 + 2*k2(k1 ) -2*p1(k1)-2*p1(k2)+2*p2(k1)+2*p2(k2)-2*p2(p1))))/(3*pi\\ _ ) ) ; trace4,1 ; contract 0 ; .sort ; i d k1.k1 = 0 ; i d k2.k2 = 0 ; i d p1.p1 = m{}^{\\wedge}2 ; i d p2.p2 = m{}^{\\wedge}2 ; .sort ; \\#call put(\\%e  , resfl ) \\#fromexternal `    ' '' ''                                                    the naive approach is too slow .",
    "do this instead ( also still quite slow , but good enough for checking equality )                                        the results of form and feyncalc agree , but form is much faster .",
    "there is a some noticeable overhead in translating the returned string to feyncalc . in a future version of formlink",
    "we will improve this by either using parallel features of _ mathematica _ or by writing a special _ mathlink _ program similar to ` formget.tm ` .",
    "we have implemented formlink and feyncalcformlink , two _",
    "mathlink_-based programs implemented in _ mathematica _",
    ", c and form , which embed form in _ mathematica _ and feyncalc . a non-_mathlink_-based file - based function runform has been also put into the formlink package . for both packages we provide configurable functions for the syntax conversions . a limited subset of the syntaxes from both programs are automatically translated to each other by our two _ mathematica _ packages . in this way",
    "we can combine the speed of form with the generality of _ mathematica_. a simple installation facility has been provided .",
    "we hope to be able to extend the functionality and range of applicability of the packages in the future .",
    "formlink and feyncalcformlink are covered by the gnu lesser general public license , like form .",
    "the conditions for the use of form are laid out here : http://www.nikhef.nl/~form/license/license.html and should be followed of course also when using formlink / feyncalcformlink .",
    "the license for using _ mathematica _ is given here : http://www.wolfram.com/legal/agreements/wolfram-mathematica.html    we would like to thank matteo fael for providing us with the example about double bremsstrahlung in @xmath8 leptonic radiative decay .",
    "rolf mertig would like to thank prof dr thomas gehrmann from the institut fr theoretische physik , universitt zrich , for the invitation to teach _ mathematica _ for high energy physics students , which encouraged him to work on ` formlink / feyncalcformlink ` .",
    "j.  a.  m.  vermaseren , math - ph/0010025 .",
    "j.  a.  m.  vermaseren , form development , pos cpp * 2010 * , 012 ( 2010 ) [ arxiv:1101.0511 [ hep - ph ] ] .",
    "j.  a.  m.  vermaseren , form facts , nucl .",
    "suppl .   * 205 - 206 * , 104 ( 2010 )",
    "[ arxiv:1006.4512 [ hep - ph ] ] . m.  tentyukov and j.  a.  m.  vermaseren , current status of form parallelization , pos acat * 08 * ( 2008 ) 119 . j.  a.  m.  vermaseren , the form project , nucl .",
    "suppl .   * 183 * , 19 ( 2008 ) [ arxiv:0806.4080 [ hep - ph ] ] .",
    "r.  mertig , m.  bohm and a.  denner , feyncalc : computer algebraic calculation of feynman amplitudes , comput .",
    "commun .",
    "* 64 * ( 1991 ) 345 .",
    "t.  hahn and m.  perez - victoria , automatized one loop calculations in four - dimensions and d - dimensions , comput .",
    "commun .  * 118 * , 153 ( 1999 ) [ hep - ph/9807565 ] .",
    "m.  tentyukov and j.  a.  m.  vermaseren , extension of the functionality of the symbolic program form by external software , comput .",
    "commun .   * 176 * , 385 ( 2007 ) [ cs/0604052 [ cs - sc ] ] .",
    "jos vermaseren , introduction to form , + http://www.nikhef.nl/~form/maindir/courses/course1/sheets5.pdf"
  ],
  "abstract_text": [
    "<S> form , a symbolic manipulation system , has been widely used in a lot of calculations for high energy physics due to its high performance and efficient design . </S>",
    "<S> _ mathematica _ , another computational software program , has also widely been used , but more for reasons of generality and user - friendliness than for speed . </S>",
    "<S> especially calculations involving tensors and noncommutative operations like calculating dirac traces can be rather slow in _ mathematica _ , compared to form .    in this article </S>",
    "<S> we describe formlink and feyncalcformlink , two _ mathematica _ packages to link _ mathematica _ and feyncalc with form . </S>",
    "<S> formlink can be used without feyncalc and feyncalcformlink , which is an extension loading formlink and feyncalc automatically .    with these two packages the impressive speed and other special features of form </S>",
    "<S> get embedded into the generality of _ mathematica _ and feyncalc in a simple manner .    </S>",
    "<S> feyncalcformlink provides a form - based turbo for feyncalc , making it much more efficient . </S>",
    "<S> formlink turns _ </S>",
    "<S> mathematica _ into an editor and code organizer for form .    </S>",
    "<S> = 1    * _ title of program : _ formlink / feyncalcformlink * _ available from : _ http://www.feyncalc.org/formlink/ * _ programming language : _ _ mathematica _ 7 , 8 or 9 ; c ; form 4 * _ computer : _ any computer running _ mathematica _ and form . * </S>",
    "<S> _ operating system : _ linux , windows , mac os x. * _ external routines : _ form , c , feyncalc . * </S>",
    "<S> _ keywords : _ _ mathematica _ , _ mathlink _ , form , feyncalc , formlink , feyncalcformlink . * </S>",
    "<S> _ nature of physical problem : _ the functionality of form is restricted compared with _ mathematica _ , which is broader , while its speed is slower for larger calculations involving tensors and noncommutative expansions . </S>",
    "<S> so how can we combine the speed of form with the versatility and broadness of _ mathematica _ ? * </S>",
    "<S> _ method of solution : _ named pipes , _ mathlink _ , c , _ mathematica _ pre- and postprocessing . * </S>",
    "<S> _ typical running time : _ seconds , minutes , or more , depends on the complexity of the calculation . </S>",
    "<S> there is some overhead for conversion of larger expressions . </S>"
  ]
}