{
  "article_text": [
    "bylander @xcite made an extensive analysis of the computational complexity of propositional strips  under various restrictions , like limiting the number of preconditions or effects .",
    "bckstrm and nebel @xcite made a similar analysis of planning with multi - valued state variables in the sas@xmath0  formalism , investigating the complexity of all combinations of the p , u , b and s restrictions introduced by bckstrm and klein @xcite .",
    "these were among the first attempts to understand why and when planning is hard or easy and have had heavy influence on recent research in planning , of which we list a few representative examples .",
    "gimnez and jonsson @xcite , chen and gimnez @xcite as well as katz and domshlak @xcite have studied the complexity of planning for various restrictions on the causal graph , the latter also considering combinations with restrictions p and u. katz and domshlak further pointed out a particularly important usage of such results , saying :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ computational tractability can be an invaluable tool even for dealing with problems that fall outside all the known tractable fragments of planning .",
    "for instance , tractable fragments of planning provide the foundations for most ( if not all ) rigorous heuristic estimates employed in planning as heuristic search .",
two examples of slightly different ways to do this are the following .",
    "helmert @xcite used a planning algorithm for a simpler restricted problem to compute heuristic values for subproblems and then combine these values .",
    "similarly , the popular @xmath1 heuristic @xcite exploits bylander s results that planning is simpler with only positive preconditions and uses this as a relaxation for computing a heuristic value . as a complement to such analyses of restricted planning lanugages , helmert @xcite studied the complexity and inherent restrictions in a number of application problems .",
    "we revisit these early classifications of strips  and of sas@xmath0 , but using parameterized complexity analysis rather than standard complexity analysis .",
    "parameterized complexity analysis was invented to enable a more fine - grained analysis than standard complexity analysis allows , by treating a parameter as independent of the instance rather than being a part of it .",
    "somewhat simplified , the idea is as follows .",
    "consider some problem and let @xmath2 denote the instance size .",
    "we usually consider a problem as tractable if it can be solved by some algorithm in @xmath3 time , that is , in polynomial time .",
    "for many problems , like the -hard problems , we do not know of any significantly faster way to solve them than doing brute - force search , which typically requires requires exponential , or at least super - polynomial , time in @xmath2 . in practice",
    "the search is often not exponential in the size of the whole instance , but rather in some smaller hard part of it . in these cases",
    "the complexity may rather be something like @xmath4 where @xmath5 is a parameter that is typically independent of the instance size @xmath2 .",
    "thus , the combinatorial explosion is confined to the parameter  @xmath5 .",
    "we say that a problem is _ fixed - parameter tractable ( fpt ) _ if it can be solved in this way .",
    "this is the essence of parameterized complexity theory and provides a tractability concept which is more relaxed than the usual one , while correlating better with tractability in practice for real - world problems .",
    "the theory also offers various classes for problems that are not fpt , for example @xmath6}}}$ ] and @xmath7}}}$ ] .",
    "parameterized complexity analysis has contributed fundamental new insights into complexity theory @xcite .",
    "it is nowadays a very common technique in many areas of computer science , including many subareas of ai , like non - monotonic reasoning @xcite , constraints @xcite , social choice @xcite and argumentation @xcite .",
    "the examples in planning are rare , however .",
    "downey , fellows and stege @xcite proved that strips  planning is @xmath6}}}$]-hard and conjectured that it is also complete for @xmath6}}}$ ] .",
    "we disprove this conjecture and show that strips   planning is actually @xmath7}}}$]-complete .",
    "there is also a result by bckstrm and jonsson @xcite that strips  planning is fpt under a certain restriction that deliberately lower - bounds the plan length , thus not contradicting our results .",
    "this restriction was motivated by a different agenda , studying the expressive power of planning languages in general rather than subclasses of a particular  language .",
    "the parameterized analyses of planning that we provide in this paper does not replace the earlier results or make them obsolete .",
    "since the parameterized complexity classes and the standard ones are not comparable , our results must be viewed as supplementary , providing further information .",
    "if we consider the previous classifications together with our parameterized classification we get a more detailed and informative picture of planning complexity than by considering either of them alone .",
    "this sheds new light on the discrepancy between theoretical and practical results regarding the difficulty of planning .",
    "for instance , while bckstrm and nebel proved that restriction u ( actions can change only one variable ) does not make planning easier under standard analysis , we show that it is actually easier from a parameterized point of view .",
    "this is interesting since restriction u has been considered acceptable in some practical applications of planning , for instance on - board planning in spacecrafts @xcite .",
    "furthermore , bckstrm and nebel showed that planning is -hard under restriction p ( there are never two actions that set the same variable value ) but did not provide any better upper bound than in the unrestricted case .",
    "we show that planning is actually fpt under this restriction .",
    "we also show that a standard partial - order planning algorithm @xcite can exploit this fact with a minor modification that could be implemented as a heuristic .",
    "this suggests that many successful applications of planning might be cases where the problem is `` almost tractable '' and the algorithm used happens to implicitly exploit this .",
    "this is in line with the claim by downey et .",
    "@xcite that in many cases existing algorithms with heuristics turn out to already be fpt algorithms .",
    "the rest of the paper is laid out as follows .",
    "section 2 defines some concepts of parameterized complexity theory and section 3 defines the sas@xmath0   and strips  languages .",
    "the hardness results are collected in section 4 and the membership results in section 5 , including the result on using an existing planning algorithm .",
    "section 6 summarizes the results of the paper and discusses some observations and consequences .",
    "the paper ends with a discussion in section  7 .",
    "we define the basic notions of parameterized complexity and refer to other sources  @xcite for an in - depth treatment .",
    "parameterized problem _ is a set of pairs @xmath8 , the _ instances _ , where @xmath9 is the main part and @xmath5 the _ parameter_.",
    "the parameter is usually a non - negative integer .",
    "a parameterized problem is _ fixed - parameter tractable ( fpt ) _ if there exists an algorithm that solves any instance @xmath8 of size @xmath2 in time @xmath10 where @xmath11 is an arbitrary computable function and @xmath12 is a constant independent of both @xmath2 and @xmath5 .  is the class of all fixed - parameter tractable decision problems .",
    "parameterized complexity offers a completeness theory , similar to the theory of np - completeness , that allows the accumulation of strong theoretical evidence that some parameterized problems are not fixed - parameter tractable .",
    "this theory is based on a hierarchy of complexity classes @xmath13 } } } \\subseteq { { { { { { \\mbox{\\textnormal{\\textbf{w}}}}}}}}{{[2 ] } } } \\subseteq { { { { { { \\mbox{\\textnormal{\\textbf{w}}}}}}}}{{[3 ] } } } \\subseteq \\cdots\\ ] ] where all inclusions are believed to be strict .",
    "each class @xmath14}}}$ ] contains all parameterized decision problems that can be reduced to a certain canonical parameterized problem ( known as weighted @xmath15-normalized satisfiability ) under _ parameterized _ reductions . a parameterized problem @xmath16 reduces to a parameterized problem @xmath17 if there is a mapping @xmath18 from instances of @xmath16 to instances of @xmath17 such that
    "@xmath8 is a yes - instance of @xmath16 if and only if @xmath19 is a yes - instance of @xmath17 , 2 .",
    "there is a computable function @xmath20 such that @xmath21 , and 3 .",
    "there is a computable function @xmath11 and a constant @xmath12 such that @xmath18 can be computed in time @xmath22 , where @xmath2 denotes the size of @xmath8 . _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    not much is known about the relationship between the parameterized complexity classes and the standard ones , except that @xmath23 .",
    "let @xmath24 be a finite set of _ variables _ over a finite _ domain _ @xmath25 .",
    "implicitly define @xmath26 , where @xmath27 is a special value not present in @xmath25 .",
    "then @xmath28 is the set of _ total states _ and @xmath29 is the set of _ partial states _ over @xmath30 and @xmath25 , where @xmath31 .",
    "the value of a variable @xmath32 in a state @xmath33 is denoted @xmath34}}$ ] .",
    "sas@xmath0  instance _ is a tuple @xmath35 where @xmath30 is a set of variables , @xmath25 is a domain , @xmath36 is a set of _ actions _ , @xmath37 is the _ initial state _ and @xmath38 is the _",
    "goal_. each action @xmath39 has a _ precondition _ @xmath40 and an _ effect _ @xmath41 .",
    "we will frequently use the convention that a variable has value @xmath27 in a precondition / effect unless a value is explicitly specified .",
    "let @xmath39 and let @xmath42",
    ". then @xmath43 is _ valid in @xmath44 _ if for all @xmath45 , either @xmath46 } } = { { s[{v}]}}$ ] or @xmath46 } } = { \\mathbf{u}}$ ] .",
    "furthermore , the _ result of @xmath43 in @xmath44 _ is a state @xmath47 defined such that for all @xmath45 , @xmath48 } } = { { { \\mathrm{eff}}(a)[{v}]}}$ ] if @xmath49 } } \\neq { \\mathbf{u}}$ ] and @xmath48 } } = { { s[{v}]}}$ ] otherwise .",
    "let @xmath50 and let @xmath51 be a sequence of actions .",
    "then @xmath52 is a _",
    "plan from @xmath53 to @xmath54 _ if either + 1 ) @xmath55 and @xmath56 or + 2 ) there are states @xmath57 such that for all @xmath15 , where @xmath58 , @xmath59 is valid in @xmath60 and @xmath61 is the result of @xmath59 in @xmath60 .",
    "a state @xmath42 is a _ goal state _ if for all @xmath45 , either @xmath62 } } = { { s[{v}]}}$ ] or @xmath62 } } = { \\mathbf{u}}$ ] .",
    "an action sequence @xmath52 is a _",
    "plan for @xmath63 _ if it is a plan from @xmath64 to some goal state @xmath42 .",
    "we will study the following problem :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ bounded sas@xmath0  planning + _ instance : _ a tuple @xmath65 where @xmath63 is a sas@xmath0   instance and @xmath5 is a positive integer .",
    "+ _ parameter : _ the integer @xmath5 .",
    "+ _ question : _ does @xmath63 have a plan of length at most @xmath5 ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we will consider the following four restrictions , originally defined by bckstrm and klein @xcitep : : :    for each @xmath45 and each @xmath66    there is at most one @xmath39 such that    @xmath49 } } = x$ ] .",
    "u : : :    for each @xmath39 ,    @xmath49 } } \\neq { \\mathbf{u}}$ ] for exactly    one @xmath45 .",
    "b : : :    @xmath67 .",
    "s : : :    for all @xmath68 and all @xmath45 , if    @xmath46 } } \\neq { \\mathbf{u}}$ ] ,    @xmath69 } } \\neq { \\mathbf{u}}$ ] and    @xmath49 } } = { { { \\mathrm{eff}}(b)[{v } ] } } = { \\mathbf{u}}$ ] ,    then    @xmath46 } } = { { { \\mathrm{pre}}(b)[{v}]}}$ ] .",
for any set @xmath18 of such restrictions we write to denote the restriction of bounded sas@xmath0  planning  to only instances satisfying the restrictions in @xmath18 .",
    "the propositional strips  language can be treated as the special case of sas@xmath0  satisfying restriction b. more precisely , this corresponds to the variant of strips   that allows negative preconditions .",
    "in this section we prove the two main hardness results of this paper .",
    "for the first proof we need the following [ 2]-complete problem  @xcite .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ hitting set + _ instance : _ a finite set @xmath70 , a collection @xmath71 of subsets of @xmath70 and an integer @xmath72 .",
    "+ _ parameter : _ the integer @xmath5 .",
    "+ _ question : _ is there a hitting set @xmath73 such that @xmath74 and @xmath75 for every @xmath76 ?",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    [ arb - hard ] @xmath77-bounded sas@xmath0  planning   is @xmath7}}}$]-hard , even when the actions have no preconditions .    by parameterized reduction from hitting set",
    "let @xmath78 be an instance of this problem .",
    "we construct an instance @xmath79 , where @xmath80 , of the @xmath77-bounded sas@xmath0  planning   problem such that @xmath9 has a hitting set of size at most @xmath5 if and only if there is a plan of length at most @xmath81 for @xmath82 as follows .",
    "let @xmath83 and let @xmath84 where @xmath85=1 $ ] if @xmath86 and @xmath85={\\mathbf{u}}$ ] otherwise .",
    "we set @xmath87 and @xmath88 .",
    "clearly , @xmath63 satisfies restrictions b and s , and the actions have no preconditions .",
    "it is now routine to show that @xmath63 has a plan of length at most @xmath89 if and only if @xmath9 has a hitting set of size  @xmath5 .",
    "we continue with the second result .",
    "the following problem is [ 1]-complete  @xcite .    _",
partitioned clique + _ instance : _ a @xmath5-partite graph @xmath90 with partition @xmath91 such that @xmath92 for all @xmath15 , where @xmath93 .",
    "+ _ parameter : _ the integer @xmath5 .",
    "+ _ question : _ are there nodes @xmath94 such that @xmath95 for all @xmath15 , where @xmath96 and , @xmath97 for all @xmath15 , where @xmath98 ? ( the graph @xmath99 is a _",
    "@xmath5-clique _ of @xmath100 . )",
unary - hard ] @xmath101-bounded sas@xmath0  planning   is @xmath6}}}$]-hard , even for instances where every action has at most one precondition and one postcondition .",
    "by parameterized reduction from partitioned clique .",
    "let @xmath102 be a @xmath5-partite graph where @xmath103 is partitioned into @xmath104 .",
    "let @xmath105 and @xmath106 .",
    "we define @xmath107 for every @xmath108 .    for the @xmath101-bounded sas@xmath0  planning  instance @xmath63",
    "we introduce four kinds of variables : + 1 ) for every @xmath109 we introduce an _ edge variable _ @xmath110 .",
    "+ 2 ) for every @xmath96 and @xmath111 we introduce @xmath112 _ vertex variables _ @xmath113 where @xmath114 .",
    "+ 3 ) for every @xmath115 and every @xmath116 we introduce a _ checking variable _ @xmath117 .",
    "+ 4 ) for every @xmath118 , we introduce a _",
    "clean - up variable _ @xmath119 .",
    "we also introduce five kinds of actions :    \\1 ) for every @xmath109 we introduce an action @xmath120 such that @xmath121 = 1 $ ] .",
    "+ 2 ) for every @xmath122 where @xmath123 and @xmath124 , we introduce two actions @xmath125 and @xmath126 such that @xmath127 = 1 $ ] , @xmath128=1 $ ] , @xmath129 = 1 $ ] and @xmath130=1 $ ] .",
    "+ 3 ) for every @xmath131 and @xmath116 , we introduce an action @xmath132 such that @xmath133 = 1 $ ] and @xmath134 = 1 $ ] .",
    "+ 4 ) for every @xmath135 , we introduce an action @xmath136 such that @xmath137 = 1 $ ] .",
    "+ 5 ) for every @xmath111 , for some @xmath96 , and @xmath116 , we introduce an action @xmath138 such that @xmath139 = 1 $ ] and @xmath140 = 0 $ ] .",
    "+ let @xmath141 be sets of actions corresponding to these five groups , and let @xmath142 be the set of all actions .",
    "let @xmath87 and define @xmath143 such that all checking variables @xmath117 are @xmath144 , all vertex variables @xmath113 are @xmath145 and the rest are @xmath27 .",
    "we now need to prove that @xmath100 has a @xmath5-clique if and only if there is a plan for @xmath63 of length at most @xmath89 .",
    "we sketch the leftward direction ; the opposite is similar .",
    "assume @xmath100 has a @xmath5-clique @xmath146 where @xmath147 with @xmath95 for every @xmath96 .",
    "for all @xmath148 , we apply the actions @xmath149 and @xmath150 .",
    "this gives @xmath151 actions .",
    "then for each checking variable @xmath117 , for every @xmath115 and @xmath116 , we apply @xmath152 .",
    "this gives @xmath153 actions .",
    "now we have all checking variables set to the required value @xmath144 , but the vertex variables @xmath154 , for @xmath115 and @xmath116 , still bear the value @xmath144 which will have to be set back to @xmath145 in the goal state .",
    "so we need some actions to `` clean up '' the values of these vertex variables .",
    "first we set up a cleaner for each vertex @xmath155 by applying @xmath156 .",
    "this gives @xmath5 actions .",
    "then we use @xmath157 for all @xmath116 to set the vertex variables @xmath154 to @xmath145 .",
    "this requires @xmath153 actions .",
    "we observe that all the checking variables are now set to @xmath144 , and all vertex variables are set to @xmath145 . the goal state is therefore reached from the initial state by the execution of exactly @xmath158 actions , as required .",
    "our membership results are based on _ first - order ( fo ) model checking _ ( sec .  [",
    "sec : modelcheck ] ) and _ partial - order planning _ ( sec .",
    "[ sec : partialplan ] ) .      for a class of fo formulas",
    "@xmath159 we define the following parameterized decision problem .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath159-fo model checking + _ instance : _ a finite structure @xmath160 , an fo formula @xmath161 .",
    "+ _ parameter : _ the length of @xmath162 .",
    "+ _ question : _ does @xmath162 have a model ?",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    let @xmath163 be the class of all fo formulas of the form @xmath164 where @xmath165 is arbitrary and @xmath162 is a quantifier - free fo formula . for arbitrary positive integer @xmath166 , let @xmath167 denote the class of all fo formulas of the form @xmath168 where @xmath165 is arbitrary and @xmath162 is a quantifier - free fo formula .",
    "flum and grohe  ( * ? ? ?",
    "* theorem 7.22 ) have shown the following result .",
    "[ pro : fo - model - w1 ] [ pro : fo - model - w2 ] the problem @xmath163-fo model checking is @xmath6}}}$]-complete . for every positive integer @xmath166 the problem @xmath167-fo model checking is @xmath7}}}$]-complete .",
    "we will reduce planning to model checking , so for an arbitrary planning instance @xmath169 ( where @xmath80 ) of the bounded sas@xmath0  planning  problem we need a relational structure @xmath170 defined as :    * the universe of @xmath170 is @xmath171 .",
    "* @xmath170 contains the unary relations @xmath172 , @xmath173 , and @xmath174 together with the following relations of higher arity : * * @xmath175={x}\\se$ ] , * * @xmath176={x}\\neq { { \\mathbf{u}}}\\se$ ] , * * @xmath177 \\neq { { \\mathbf{u}}}\\se$ ] , * * @xmath178 \\neq { { \\mathbf{u}}}\\se$ ] , * * @xmath179 = { x}\\neq { { \\mathbf{u}}}\\se $ ] * * @xmath180={x}\\neq { { \\mathbf{u}}}\\se$ ] .    [ in - w2 ] bounded sas@xmath0  planning   is in @xmath7}}}$ ] .    by parameterized reduction to the @xmath7}}}$]-complete problem",
    "@xmath181-fo model checking .",
    "let @xmath169 ( where @xmath80 ) be an instance of bounded @xmath182 planning .",
    "we construct an instance @xmath183 of @xmath181-fo model checking such that @xmath184 has a solution if and only if @xmath185 has a solution and the size of the formula @xmath162 is bounded by some function that only depends on @xmath5 .",
    "assume without loss of generality that @xmath186 contains a dummy action @xmath187 with no preconditions and no effects . to define @xmath162 we first need the following definitions .",
    "we define a formula @xmath188 such that @xmath189 and @xmath190 for every @xmath191 , which holds if applying @xmath192 in state @xmath64 results in a state @xmath44 such that @xmath193={x}$ ] .",
    "we also define a formula @xmath194 for all @xmath108 , that is , @xmath195 holds if all preconditions of action @xmath59 are satisfied after actions @xmath196 have been executed in state @xmath64 .",
    "we similarly define a formula @xmath197 that `` checks '' the preconditions of all actions in a sequence .",
    "finally , define @xmath198 .",
    "the formula @xmath199 holds if the goal state is reached after the execution of the sequence @xmath200 in the state @xmath64 .",
    "we can now define the formula @xmath162 itself as : @xmath201 evidently @xmath202 , the length of @xmath162 is bounded by some function that only depends on @xmath5 and @xmath203 if and only if @xmath63 has a plan of length at most @xmath5 .",
    "the dummy action guarantees that there is a plan exactly of length @xmath5 if there is a shorter plan .",
    "the proof of the next theorem resembles the previous proof but the details are a bit involved .",
    "thus , we only provide a high - level description of it .",
    "[ in - w1 ] @xmath204-bounded sas@xmath0  planning   is in @xmath6}}}$ ] .    in order to show @xmath6}}}$]membership of @xmath204-bounded sas@xmath0  planning   we will reduce this problem to @xmath163fo model checking and the basic idea is fairly close to the proof of theorem  [ in - w2 ]",
    "however , we can not directly express within @xmath163 that all the preconditions of an action are satisfied , as this would require a further universal quantification and thus move the formula to @xmath167 .",
    "hence , we avoid the universal quantification with a trick : we observe that the preconditions only need to be checked with respect to at most @xmath5 `` important '' variables , that is , the variables in which the preconditions of an action differ from the initial state .",
    "if the precondition differs in more than  @xmath5 variables from the initial state , then it can not be used in any plan of length @xmath5 .",
    "it is now possible to guess the important variables with existential quantifiers .",
    "it remains to check that all the significant variables are among these guessed variables .",
    "we do this without universal quantification by adding dummy elements @xmath205 and a relation @xmath206 to the relational structure @xmath170 .",
    "the relation associates with each action exactly @xmath5 different elements .",
    "these elements consist of all the important variables of the action , say the number of these variables is @xmath89 , plus @xmath207 dummy elements .",
    "hence , by guessing these @xmath5 elements and eliminating the dummy elements , the formula knows all the significant variables of the action and can check the preconditions without a universal quantification .",
    "to prove that @xmath208-bounded sas@xmath0  planning is in   we use a slight modification of the well - known planning algorithm by mcallester and rosenblitt @xcite , which we refer to as mar .",
    "it appears in figure  [ alg : mar ] , combining the original and the modified versions into one .",
    "the only modification is the value of @xmath17 , which could easily be implemented as a heuristic for the original algorithm .",
    "the algorithm is generalized to sas@xmath0  rather than propositional strips , which is straightforward and appears in the literature @xcite .",
    "we only explain the algorithm and our notation , referring the reader to the original paper for details .",
    "the algorithm works on a partially ordered set of _ action occurences _ , each occurence being a unique copy of an action . for each precondition",
    "@xmath209 } } \\neq { \\mathbf{u}}$ ] of an occurence @xmath210 , the algorithm uses a _ causal link _",
    "@xmath211 to explicitly keep track of which other occurence @xmath212 with @xmath213}}=x$ ] guarantees this precondition .",
    "an occurence @xmath214 is a _ threat _ to @xmath211 if @xmath215 } } \\neq { \\mathbf{u}}$ ] and @xmath216 .",
    "plan structure _ for a planning instance @xmath35 is a tuple @xmath217 where @xmath218 is a finite set of action occurences over @xmath36 , @xmath219 is a binary relation over @xmath218 and @xmath220 is a set of causal links .",
    "we write @xmath221 for @xmath222 .",
    "furthermore , @xmath218 always contains the two special elements @xmath223 , where @xmath224 , @xmath225 and @xmath226 .",
    "an _ open goal _ in @xmath227 is a tuple @xmath228 such that @xmath229 , @xmath230 } } = x \\neq { \\mathbf{u}}$ ] and there is no @xmath231 such that @xmath232 .",
    "we say @xmath227 is _ complete _ if both the following conditions hold : 1 ) for all @xmath233 and all @xmath45 such that @xmath209 } } = x \\neq { \\mathbf{u}}$ ] , there is a causal link @xmath234 .",
    "2 ) for every @xmath234 and every threat @xmath235 to @xmath211 , either @xmath236 or @xmath237 . mcallester and rosenblitt proved that if starting with @xmath238 then the algorithm fails if there is no plan and otherwise returns a plan structure @xmath239 such that any topological sorting of @xmath240 consistent with @xmath219 is a plan .",
    "[ cols= \" < \" , ]     since [ 1 ] and [ 2 ] are not directly comparable to the standard complexity classes we get interesting separations from combining the two methods .",
    "for instance , we can single out restriction u as making planning easier than in the general case , which is not possible with standard analysis .",
    "since restrictions b and s remain as hard as the general case even under parameterized analysis , this shows that u is a more interesting and important restriction than the other two .",
    "even more interesting is that planning is in  under restriction p , making it easier than the combination restriction us , while it seems to be rather the other way around for standard analysis where restriction p is only known to be hard for . in general , we see that there are still a number of open problems of this type in both figure  [ fig : pubs - lattice ] and table  [ tbl : bylander ] for the standard analysis , while there is only one single open problem for the parameterized analysis : hardness for the case where @xmath241 and @xmath242 is fixed .",
    "this work opens up several new research directions .",
    "we briefly discuss some of them below .",
    "although a modification was needed to make mar an fpt algorithm for restriction p , no modification is necessary if also the number of preconditions of each action is bounded by a constant @xmath12 .",
    "then we can even relax p , such that for some constant @xmath243 there can be at most @xmath243 actions with the same effect .",
    "the proof is similar to the one for theorem  [ th : fpt ] , using that the total number of causal links is bounded by @xmath244 and the branching factor in line 7 is @xmath245 .",
    "this is an important observation since many application and example problems in planning satisfy these constraints , for instance , many variants of the logistics domain used in the international planning competitions .",
    "since planners like nonlin and snlp are practical variants of mar , this may help to explain the gap between empirical and theoretical results for many applications .",
    "the use of parameterized analysis in planning is by no means restricted to using plan length as parameter .",
    "we did so only to get results that are as comparable as possible with the previous results .",
    "for instance , downey et .",
    "@xcite show that strips  planning can be recast as the signed digraph pebbling problem which is modelled as a special type of graph .",
    "they analyse the parameterized complexity of this problem considering also the treewidth of the graph as a parameter . as another example ,",
    "chen and gimnez @xcite show that planning is in  if the size of the connected components in the causal graph is bounded by a constant , and otherwise unlikely to be in .",
    "it seems natural to study this also from a parameterized point of view , using the component size as the parameter .",
    "it should also be noted that the parameter need not be a single value ; it can itself be a combination of two or more other parameters .",
    "there are close ties between model checking and planning and this connection deserves further study .",
    "for instance , model - checking traces can be viewed as plans and vice versa  @xcite , and methods and results have been transferred between the two areas in both directions @xcite .",
    "our reductions from planning to model - checking suggest that the problems are related also on a more fundamental level than just straightforward syntactical translations .",
    "we would like to thank the anonymous reviewers for constructive comments .",
    "chen , ordyniak , and szeider acknowledge the support from the european research council ( erc ) , project complex reason , 239962 .",
    "bckstrm , c. , and jonsson , p. 2011 .",
    "all pspace - complete planning problems are equal but some are more equal than others . in _",
    "4th intl symp .",
    "combinatorial search ( socs-2011 ) castell de cardona , barcelona , spain _ , 1017 .",
    "bckstrm , c. 1994 .",
    "planning using transformation between equivalent formalisms : a case study of efficiency . in _",
    "workshop comparative analysis of ai planning systems , at 12th natl conf .",
    "( aaai94 ) , seattle , wa , usa_.      brandt , f. ; brill , m. ; and seedig , h.  g. 2011 . on the fixed - parameter tractability of composition - consistent tournament solutions . in _",
    "22nd intl joint conf .",
    "( ijcai11 ) , barcelona , spain _ , 8590 .",
    "edelkamp , s. ; leue , s. ; and visser , w. 2007 .",
    "summary of dagstuhl seminar 06172 on directed model checking . in _ directed model checking _ , number 06172 in dagstuhl seminar proceedings .",
    "dagstuhl , germany .",
    "wehrle , m. , and helmert , m. 2009 .",
    "the causal graph revisited for directed model checking . in _",
    "static analysis , 16th intl symp . , ( sas09 ) , los angeles , ca , usa _ , volume 5673 of _ lecture notes in computer science _ , 86101 ."
  ],
  "abstract_text": [
    "<S> the early classifications of the computational complexity of planning under various restrictions in strips  ( bylander ) and sas@xmath0  ( bckstrm and nebel ) have influenced following research in planning in many ways . </S>",
    "<S> we go back and reanalyse their subclasses , but this time using the more modern tool of parameterized complexity analysis . </S>",
    "<S> this provides new results that together with the old results give a more detailed picture of the complexity landscape . </S>",
    "<S> we demonstrate separation results not possible with standard complexity theory , which contributes to explaining why certain cases of planning have seemed simpler in practice than theory has predicted . in particular , we show that certain restrictions of practical interest are tractable in the parameterized sense of the term , and that a simple heuristic is sufficient to make a well - known partial - order planner exploit this fact . </S>"
  ]
}