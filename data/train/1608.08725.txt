{
  "article_text": [
    "many routing protocols have been proposed for mobile ad - hoc networks ( manet ) , and can be categorized as proactive , reactive , and hybrid routing protocols @xcite .",
    "proactive or table - driven routing protocols maintain routes to every network destination independently of the data traffic being forwarded .",
    "reactive or on - demand routing protocols maintain routes for only this destinations for which there are data packets to be forwarded .",
    "hybrid protocols use proactive and on - demand mechanisms .",
    "section [ manet ] provides a brief summary of the basic operation of proactive and on - demand routing .",
    "the proactive routing approach has the potential of high packet - delivery ratios and shorter end - to - end delays , because routes are established before data packets requiring those routes are offered to the network .",
    "the price paid for such responsiveness is that signaling overhead is incurred even for those destinations that are not needed , which may be too high . in theory , on - demand routing is designed to address this problem by requiring signaling overhead only for active destinations at the expense of incurring slightly longer latencies , because some data packets must wait for routes to be found .",
    "however , as prior comparative analysis of the performance of on - demand versus proactive routing schemes show @xcite , on - demand routing protocols end up incurring more overhead than proactive routing protocols in manets when topology changes that impact existing data flows increase .",
    "many techniques ( e.g. , see @xcite ) have been proposed to reduce the overhead incurred in the dissemination of each route request ( rreq ) , including clustering , location information , dominating sets , and virtual coordinates .",
    "however , no prior work has addressed the impact of having relay routers aggregate rreqs they need to forward when they are intended for the same destinations .",
    "the main contribution of this paper is the introduction of a fault - tolerant approach for routers to aggregate rreqs originated by different sources and intended for the same destinations .",
    "the proposed _ route - request aggregation _ approach can be applied to any on - demand routing protocol ( e.g. , aodv or dsr @xcite ) and can make any routing protocol that uses on - demand routing techniques more efficient .    section [ adara ] introduces the ad - hoc demand - aggregated routing with adaptation ( adara ) protocol as a specific example of the rreq aggregation approach . like aodv , adara uses destination - based sequence numbers to prevent routing - table loops and request identifiers to denote each rreq uniquely as in aodv .",
    "adara introduces route - request aggregation and the use of broadcast signaling packets ( rreqs , route replies and route errors ) to substantially reduce signaling overhead .",
    "section [ example ] presents an example of the operation of adara and how it improves performance compared to aodv @xcite .",
    "however , the approach used in adara can be applied with proper modifications to on - demand routing based on source routes ( e.g. , dsr @xcite ) or path information @xcite .",
    "it can also be used in combination with prior techniques aimed at reducing signaling overhead , such as the use of geographical coordinates of destinations @xcite , virtual coordinates , connected dominating sets @xcite , address aggregation @xcite , and clustering @xcite .",
    "section [ performance ] presents the results of simulation experiments used to compare adara with two routing protocols that are representative of the state of the art in proactive routing and on - demand routing for manets , namely olsr @xcite and aodv .",
    "the experiments were designed to study the impact of node speed , pause times , number of sources , and network size on the packet - delivery ratio , average end - to - end delay , and signaling overhead .",
    "the results show that adara performs better than olsr and aodv in all cases .",
    "the key reason for this is that adara is able to establish routes on demand incurring far less overhead than aodv and olsr .",
    "many manet routing protocols have been proposed since the introduction of the routing protocol for the darpa packet - radio network @xcite and excellent surveys and comparative studies of this prior work have been presented over the years @xcite .",
    "olsr is the best - known example of proactive routing for manets @xcite .",
    "it uses hello messages to maintain neighbor connectivity , and topology control ( tc ) messages to disseminate link - state information throughout the network . to reduce signaling overhead , olsr takes advantage of connected dominating sets .",
    "some nodes are elected as multipoint relays ( mprs ) and only mprs forward tc messages , and only link - state information needed to connect mprs is advertised in the network .",
    "aodv @xcite is the most popular example of the on - demand routing approach . to find a route to an intended destination",
    ", a source broadcasts a rreq stating the source and destination nodes , the most recent sequence number known for each , a a broadcast i d , and a hop count to the source .",
    "a router that forwards a rreq for the first time creates a record for the rreq stating the source and broadcast - id pair of the rreq ; and a a reverse route to the source of the rreq stating the next hop and hop count to the source , and the sequence number of the source .",
    "it maintains any rreq record and reverse route for a finite time .",
    "a router discards any received rreq that states a source and broadcast - id pair for which it has a rreq record .    the intended destination or a router with a valid route to the destination responds to the rreq by sending a route reply ( rrep ) over the reverse route from which the rreq was received .",
    "the rrep states the destination and the source of the rreq , the destination sequence number , and the hop count to the destination .",
    "a router receiving a rrep establishes a route record to the destination stating the destination sequence number , the next hop to it , and the neighbors using the route ( precursors ) .",
    "a router forwards only the first copy of a rrep ( based on the destination sequence number ) and increments by one the hop count to the destination when it forwards a rrep .",
    "link failures can be recognized in aodv by the absence of hello messages sent periodically between neighbors . when a node detects a link failure",
    ", it sends a route error ( rerr ) to all neighbor nodes that are precursors of a route that is broken because of the link failure .",
    "nodes receiving a rerr message invalidate all routes that were using the failed link and propagate the rerr message to their precursor nodes .",
    "hybrid routing protocols attempt to reduce the signaling overhead of proactive and on - demand schemes by combining the two .",
    "this has been done by either using clusters within which routes to destinations are maintained proactively and using on - demand routing across clusters ( e.g. , zrp @xcite ) , or by maintaining routes to certain destinations proactively and using on - demand routing for the rest of destinations @xcite .",
    "interestingly , all prior approaches proposed for on - demand and hybrid routing have assumed that a router that receives route - requests ( rreq ) regarding destinations for which it does not have valid routes forwards _ each _ new rreq it receives , and replicas of the same rreq are silently dropped .",
    "this constitutes a major performance limitation for all on - demand and hybrid routing schemes proposed to date . intuitively , as the number of destinations increase",
    ", the failure of just a few links may cause many sources to engage in the discovery of new routes to those destinations , with each source flooding rreqs . because a router forwards each rreq it receives as long",
    "as it does not state the same source and request i d pair , the flooding of rreqs grows linearly with the number of sources , even if the sources are seeking the same few destinations .",
    "the following section describes our approach to address this problem crated by too many rreqs .",
    "we use a specific protocol as an example of the basic approach .",
    "the design rational for adara is twofold .",
    "first , for the performance of an on - demand routing protocol to be comparable to or better than the performance of a proactive routing protocol , the number of rreqs that sources initiate in the route - discovery process must be kept to a minimum when the network supports many data flows and experiences topology changes .",
    "second , if the number of data flows intended for the same destination node is larger than the number of neighbors of that destination , the routes from the sources of the flows to the destinations _ must _ have some routing relays in common .",
    "accordingly , allowing routers to aggregate rreqs intended for the same destination is bound to have a positive effect on the overall performance of the network .",
    "adara ( ad - hoc demand - aggregated routing with adaptation ) is the first on - demand routing protocol in which a router aggregates rreqs from different sources intended for the same destination .",
    "adara adopts the use of destination - based sequence numbers as in aodv to avoid routing - table loops , as well as the use of the source address and a request identifier created by the source to identify each rreq .",
    "other approaches have been proposed to avoid routing - table loops when routers maintain routes on - demand @xcite and can be used instead of the specific approach based on destination sequence numbers assumed in this paper .",
    "adara uses four types of signaling packets , all of which are sent in broadcast mode .",
    "a route request ( * rreq * ) is denoted by @xmath0 @xmath1 @xmath2 @xmath3 @xmath4 @xmath5 $ ] and contains : a request identifier ( @xmath6 ) , the address of the origin or source of the rreq ( @xmath7 ) , a sequence number created by the origin ( @xmath8 ) , the address of the intended destination ( @xmath9 ) , the most recent sequence number known from @xmath9 ( @xmath10 ) , a hop count to the origin of the rreq ( @xmath11 ) , and a hello sequence number @xmath12 ) .    a route reply ( * rrep * ) is denoted by @xmath13 @xmath14 @xmath15 @xmath16 @xmath5 $ ] and contains : the address of the destination ( @xmath9 ) , the most recent sequence number known from @xmath9 ( @xmath10 ) , a hop count to the destination ( @xmath17 ) , a list of designated neighbors ( @xmath18 ) from which valid rreqs for destination @xmath9 have been received , and a hello sequence number @xmath12 ) .    a route error ( * rerr * )",
    "is denoted by @xmath19 $ ] and contains a hello sequence number @xmath12 ) and a list of unreachable addresses ( @xmath20 ) .",
    "a hello message ( * hello * ) is denoted by @xmath21 $ ] and contains the sequence number of the sending node .",
    "each router @xmath22 maintains a routing table ( @xmath23 ) and a pending request table ( @xmath24 ) .",
    "each entry of @xmath23 specifies : the address of the destination , a sequence number created by the destination , a hop count to the destination , next hop to the destination , a list of precursor neighbors for the destination , and a lifetime .",
    "@xmath24 is used to keep track of the rreqs received by router @xmath22 , aggregate rreqs received for the same destination , and discard duplicates of the same rreq .",
    "an entry in @xmath24 lists a destination address , a list of precursor tuples , and a lifetime .",
    "each precursor tuple consists of : the address of an origin node , the rid stated by that node , and the address of the precursor neighbor from which a rreq was received .",
    "adara is a soft - state protocol .",
    "each entry in @xmath24 and @xmath23 has a finite lifetime to allow router @xmath22 to delete entries that become obsolete as a result of topology changes ( e.g. , the network is partitioned or a node fails ) .      whenever a router receives a hello message , a rreq , a rrep , or a rerr , it calls the hello process function shown in algorithm [ process hello ] to update routes to neighbor routers .",
    "this process uses the hsn included in each signaling packet .",
    "the hsn a router includes in a rreq , rrep or rerr is simply the value of its current sequence number .",
    "a router originates a rreq when it has no valid route to an intended destination as a result of topology changes or because a new destination is of interest to the router .",
    "algorithm [ process rreq ] shows the steps taken by a router to process a rreq it receives from a neighbor .",
    "after the neighbor information is updated according to algorithm [ process hello ] , router @xmath22 updates its routing information regarding the origin of the rreq .",
    "router @xmath22 uses algorithm [ aggregate rreq ] to process the rreq based on its origin , the rid created by the origin , and the entries in @xmath24 .",
    "router @xmath22 sends back a rrep to the rreq it receives if it is the intended destination or @xmath23 contains a valid entry for the destination stated in the rreq with a sequence number that is higher than or equal to the destination sequence number stated in the rreq .",
    "the rrep is broadcast to all neighbors and states the hop count to the destination , the destination sequence number , a hello sequence number for itself , and the list of designated neighbors .",
    "if router @xmath22 has no valid route to the intended destination in the rreq and there is no entry in @xmath24 for that destination , router @xmath22 creates a @xmath24 for the destination and broadcasts the rreq to its neighbor routers with its own hsn and its own hop count to the origin of the rreq . on the other hand ,",
    "if there is an entry for the destination in @xmath24 , there are various cases to consider .",
    "if the rreq is a replica of a rreq received from the same origin ( i.e. , there is a pending rreq for the destination from the same origin and with the same rid ) , the rreq is silently dropped .",
    "if the rreq is not a replica of a rreq already received , but is a retransmission of a rreq from one of the origins of the request , it means that the origin is retransmitting its rreq due to a timeout expiration .",
    "accordingly , router @xmath22 updates the rid of the corresponding precursor tuple and broadcasts the rreq to its neighbor routers .",
    "lastly , if the rreq is from a different source than those listed in @xmath24 , router @xmath22 simply adds a precursor tuple @xmath24 with the address of the origin , the rid created by the origin , and the address of the neighbor that sent the rreq .",
    "we say that the rreq is aggregated in such a case .",
    "when router @xmath22 receives a rrep , it updates its neighbor information according to algorithm [ process hello ] .",
    "router @xmath22 accepts the information in the rrep and updates @xmath23 for the destination stated in the rrep if either the destination sequence number is higher than the destination sequence number in @xmath23 or the sequence numbers are the same but the hop count to the destination in the rrep is smaller than the corresponding hop count in @xmath23",
    ".    for the case of a valid rrep , router @xmath22 creates or updates the entry in @xmath23 for the destination .",
    "the entry states the destination sequence number obtained in the rrep , its hop count to the destination , and the list of precursor neighbors for the destination .",
    "the precursor neighbors are simply those neighbors listed in precursor tuples for the destination in @xmath24 . if the router is a member of ldn of rrep , then the router @xmath22 broadcasts the rrep to its neighbors stating its own hop count to the destination , its own hello sequence number , and a list of designated neighbors of router @xmath22 that need to process and perhaps forward the rrep .",
    "router @xmath22 can then delete the entry for the destination in @xmath24 . in case",
    "the router is not in ldn , after updating the routes , router will drop the rrep to limit the region within which the rrep is re - broadcast .",
    "route error messages are created when no route is found toward a destination router or a link break is detected .",
    "a router assumes that a link with a neighbor is down when it fails to receive any signaling packet within interval defined for the reception of signaling packets from a neighbor .",
    "an error message states all the destinations for which routes are broken as a result of the link failure .",
    "algorithm [ process rerr ] shows the steps taken by router @xmath22 to process a rerr from a neighbor .",
    "router @xmath22 invalidates all the routes to destinations listed in the rerr that require the router sending the rerr as the next hop .",
    "router @xmath22 broadcasts a rerr it receives if at least one precursor neighbor exists for the destinations listed in the rerr .",
    "accordingly , only routers that established routes to destinations by forwarding rreqs may have to forward rerrs .",
    "figure [ topology ] shows a small wireless network in which adara is used .",
    "the network consists of six relay routers ( @xmath25 , @xmath26 , @xmath7 , @xmath27 , @xmath28 , and @xmath29 ) , three source routers ( @xmath30 , @xmath31 , and @xmath32 ) , and one destination router @xmath33 .",
    "the example assumes that no router has valid routes for destination @xmath33 , and shows router @xmath30 generating and broadcasting a rreq for destination @xmath33 at time @xmath34 .",
    "the propagation of this rreq is indicated by thin arrows in the figure , and the propagation of rreps is shown with thick blue arrows .",
    "the rreq from router @xmath30 states @xmath35 @xmath36 @xmath37 @xmath38 @xmath39 @xmath40 @xmath41 $ ]        when router @xmath25 receives the rreq from source @xmath30 , it adds a route for destination router @xmath30 as a destination in @xmath42 with a hop count of one and @xmath30 as the next hop .",
    "router @xmath25 also creates an entry for @xmath33 in @xmath43 listing the precursor tuple @xmath44 $ ] , which states @xmath30 as the origin of the rreq with a rid equal to @xmath45 and source @xmath30 as the neighbor from which the rreq was received .",
    "the example shows routers @xmath31 and @xmath32 originating rreqs for destination @xmath33 at time @xmath46 .",
    "as the figure shows , router @xmath29 forwards the rreq at time @xmath47 .",
    "however , when router @xmath25 receives the rreq from router @xmath32 for destination @xmath33 shortly after time @xmath48 , it simply aggregates the rreq , because @xmath43 contains an entry for @xmath33 .",
    "router @xmath25 does this by adding the precursor tuple @xmath49 $ ] to its entry for destination @xmath33 in @xmath43 .",
    "router @xmath7 creates an entry for @xmath33 in @xmath50 after receiving the rreq forwarded by router @xmath25 , and that entry lists the precursor tuple @xmath51 $ ] .",
    "accordingly , when router @xmath7 receives the rreq forwarded by router @xmath29 shortly after time @xmath52 , it can simply aggregate the rreq .",
    "it does this by adding the precursor tuple @xmath53 $ ] to the entry for destination @xmath33 in @xmath50 .",
    "similarly , when router @xmath29 receives the rreq forwarded by router @xmath7 ( originated by source @xmath30 ) shortly after time @xmath52 , it already has an entry for destination @xmath33 in @xmath54 and hence aggregates the rreq received from router @xmath7 by adding the precursor tuple @xmath55 $ ] to its list of precursor tuples for destination @xmath33 .",
    "we note that , shortly after time @xmath52 , routers @xmath26 and @xmath7 receive the rreq originated by source @xmath30 from each other . both routers simply ignore the replicas of the rreq originated by router @xmath30 because they each have an entry for destination @xmath33 in their prts listing a precursor tuple with the same source router and source sequence number than the ones included in the rreq they receive from each other .    as the rreqs from sources @xmath30 , @xmath31 , and @xmath32",
    "are disseminated in the network , relaying routers add precursor tuples to their prts for destination @xmath33 .",
    "these tuples allow each relay router to decide whether to broadcast a rrep for @xmath33 when it receives a rrep from a neighbor .",
    "destination @xmath33 generates a rrep for itself at time @xmath56 when it receives the rreq from router @xmath28 . starting with router @xmath28",
    ", the rrep is disseminated back to the sources that originated rreqs for @xmath33 along the reverse paths traversed by the rreqs thanks to the precursor tuples maintained in the prts of routers .",
    "each relaying router re - broadcasts the rrep for destination @xmath33 if it has at least one precursor tuple for @xmath33 in its prt , which results in rreps being disseminated along a directed acyclic graph as illustrated in figure 1 .",
    "each router that forwards a rrep copies the precursor neighbors for @xmath33 to its rt .",
    "a rrep contains the list of designated neighbors ( ldn ) that may forward the rrep as needed , and is based on the precursors stated for a given destination in the prts of routers . in the example , the ldn of the rrep from router @xmath28 lists router @xmath7 , and the ldn of the rrep from router @xmath7 states routers @xmath25 and @xmath29 . accordingly , as shown in figure 1 , when router @xmath26 receives the rrep from router @xmath7 , it does not forward the rrep , given that it is not listed in the ldn of the rrep from router @xmath7 .",
    "however , router @xmath26 adds a routing entry for @xmath33 in @xmath57 .",
    "routers @xmath25 and @xmath29 forward the rreps they receive from router @xmath7 .",
    "router @xmath29 forwards the rrep with an ldn listing routers @xmath7 and @xmath31 .",
    "router @xmath7 simply ignores the rrep from @xmath29 , and source @xmath31 is able to start sending data packets to @xmath33 . by the same token , routers that receive rreps from the next hops to the sources of rreqs",
    "can ignore the rreps because they are not listed in the ldns of those rreps .",
    "in contrast to the above , aodv and other on - demand routing protocols would require the dissemination of the rreqs from @xmath30 , @xmath31 and @xmath32 throughout the entire network , and for each origin router , a rrep would be sent on the path from source to destination .",
    "figure [ compare ] shows the number of signaling packets sent in the topology of figure [ topology ] .",
    "the number of rreqs in adara is much smaller compared to aodv , which is a direct result of rreq aggregation .",
    "using adara , the rreq generated by @xmath31 is only sent by routers @xmath31 and @xmath29 , and the rreq from router @xmath32 is sent once by router @xmath32 and aggregated at router @xmath25 .",
    "on the other hand , using aodv , the rreqs from routers @xmath30 , @xmath32 , and @xmath31 are flooded in the network .",
    "the number of rreps sent over the network in adara is also lower than aodv as a result of the aggregation or rreqs . in adara",
    ", rreps are sent once on the path up to an aggregation point . in aodv , each rrep sent once on each path . as a result",
    ", the number of rreqs and rreps in aodv is 2.5 times larger than in adara for this example .",
    "furthermore , since all rreps are broadcast messages , routers on the path from a source to a destination do not generate hello messages for a time interval .",
    "for the case of aodv , hello messages are generated independently of the rreps being sent .",
    "we implemented adara in ns3 and used the ns3 implementations of aodv and olsr without modifications to compare their performance .",
    "figure [ simset ] shows simulation - environment settings for aodv , olsr , and adara .",
    "the distributed coordination function ( dcf ) of ieee 802.11n 2.4 ghz with rate of 2mbps is used as the mac - layer protocol for unicast data transmission . to avoid incorrect paths resulting from transmission - range differences between unicast and broadcast transmissions",
    ", we made sure that both broadcast and unicast packets are sent with the same rate ( 2mbps ) and range .",
    "transmission power is adjusted to fix the transmission range to 250 meters .",
    "both aodv and adara use a sending buffer of 64 packets .",
    "these buffers store packets waiting for rrep message to the desired destination for 30 seconds .",
    "simulations include 50 routers spread uniformly in a @xmath58 area .",
    "for other scenarios , 25 , 75 , and 100 routers are uniformly spread in a @xmath58 , @xmath58 , and @xmath58 respectively .",
    "routers use the random - waypoint mobility model with a randomly - chosen moving speed between 0 and 20 m / s and pause time of 0 seconds .",
    "a router chooses a destination location randomly and moves toward that destination with a randomly chosen speed between zero and the specified maximum speed .",
    "when a destination location is reached , the router remains there for a specified pause time .",
    "the scenarios include 25 data flows from 25 different source routers .",
    "the destination router for each flow is a specific router with probability 0.5 and is chosen randomly from all routers with probability 0.5 .",
    "traffic sources are on - off applications with on and off time of 1 second , which generate packets of size 512 bytes and rate of 15 packets per second . for network sizes of 25 and 50 routers ,",
    "simulations are run for 900 seconds , and for networks sizes of 75 and 100 routers , the simulation time is 500 seconds .    the signaling overhead in aodv includes its five types of packets : rreq , rrep , rerr , route reply ack , and hello messages . in olsr ,",
    "the signaling overhead includes , topology control ( tc ) messages and hello messages .",
    "in adara , the signaling overhead includes all its different types of signaling packets .",
    "we compared adara , aodv and olsr based on the packet delivery ratios ( pdr ) , the average end - to - end delay , and the number of signaling packets sent by all routers .",
    "pdr indicates the number of packets received by destination routers divided by number of packets sent by the source routers .",
    "the average end - to - end delay is the time elapsed from the time a packet is sent by a source until it is received by its destination . for the case of adara and aodv",
    ", this delay includes the duration packet is buffered waiting for rreps .",
    "the scenarios used to compare the three routing protocols were chosen to stress all three protocols , rather than to attain good performance for either on - demand or proactive routing .      in this scenario ,",
    "50 routers are spread randomly in a @xmath58 area , with 25 of the routers generating traffic , each with 15 packets per second .",
    "the destination for each flow is a specific router with probability of 0.5 and is chosen randomly from all routers with probability of 0.5 .",
    "we tried different maximum mobility speeds of 5 m / s to 30 m / s with a zero pause .",
    "figure [ sim speed ] shows the pdr , average end - to - end delays , and the signaling overhead incurred by the three protocols as a function of router speed .    higher router speed results in more topology changes .",
    "the drastic drop in pdr in all protocols is due to routes breaking due to router mobility and the time needed by the routing protocols to obtain new routes .",
    "olsr requires routers to detect link failures and additions based on the absence or reception of hello messages , and tc messages to inform all routers of the topology so that new routes can be established .",
    "given that tc messages are sent periodically listing one or multiple link states , the signaling overhead in olsr remains fairly constant as a function of router speed .",
    "however , this means that more link changes take place between periodic transmissions of tc messages as router speed increases , which results in more data packets being lost as they traverse paths that are broken .",
    "link failures in aodv and adara are detected by the absence of a number of consecutive hello messages , and a route discovery process is done to inform sources of new routes to destinations . because of the delays incurred in detecting link failures and in establishing new routes after that , as router speed increases more and more data packets traversing failed routes end up being dropped .",
    "the lower delays obtained with adara can be attributed to the aggregation of rreqs , which reduces the number of rreqs being flooded and hence reduces network congestion , as well as the fact that each signaling packet is sent in broadcast mode containing the current sequence number of the transmitting router , which helps routers detect link failures and repair routes more quickly .",
    "the enormous impact of rreq aggregation in adara is evident in figure [ sim speed ] . in olsr",
    ", tc messages must be disseminated by mprs throughout the network and in aodv , each rreq is flooded throughout the network . by contrast , a rreq in adara is disseminated throughout the network only when no other rreq asking for a route for the same destination has been forwarded recently .",
    "the size of tc messages in olsr is much larger than the size of rreqs in aodv , which accounts for the similarity in signaling overhead between the two even though routers in olsr disseminate fewer signaling packets than in aodv .",
    "figure [ sim pause ] shows the performance comparison of the three protocols as a function of mobility pause time . for this simulation",
    "runs , we considered 50 routers in a area of @xmath58 with 25 flows as described previously .",
    "pause times vary from 0 seconds ( i.e. , constant mobility ) to to 900 seconds ( i.e. , almost static routers ) .",
    "the speed of routers is chosen randomly between zero and 20 meters per second .",
    "as it is can be seen from the figure , the packet delivery ratio for adara is very close to that of olsr , while aodv is much lower for all pause times .",
    "average delays in adara are much lower than those attained in olsr and aodv over all pause times , and aodv renders the higher delays in all cases .",
    "it is also evident that adara incurs far less signaling overhead than olsr and aodv for all pause times .",
    "as should be expected , less signaling overhead is incurred by all protocols as the pause time increases .",
    "figure [ sim flow ] shows the comparison of the three protocols as a function of number of sources in the network . for all cases ,",
    "sources are different routers . for each flow ,",
    "one specific router is selected as the destination with probability 0.5 and a random destination is selected with probability 0.5 .",
    "the pdr decreases and the average end - to - end delays increase for all three protools as the number of sources increases .",
    "these results can be explained from the additional congestion created in the channel as a result of having more data packets when more sources are added .",
    "the results for signaling overhead as a function of the number of sources clearly show the benefits of rreq aggregation in adara compared to aodv and olsr .",
    "although the signaling traffic in adara does increase as the number of sources increases , many of those sources share common destinations and this results in many rreqs being aggregated , which in turn results in much smaller overhead than with the other two protocols .",
    "figure [ sim networksize ] shows the performance of the three protocols as a function of the number of routers .",
    "we considered different network sizes of 25 , 50 , 75 , and 100 routers spread randomly in a area of @xmath59 , @xmath60 , @xmath61 , and @xmath62 with 15 , 25 , 40 and 50 flows respectively .",
    "similar to the previous scenarios , a destination is a specific router with probability of 0.5 and it chosen randomly with probability of 0.5 .",
    "as we have stated , the scenarios were selected to stress all protocols , rather than to show likely operating points .",
    "for all three protocols , as the network size increases the pdr drops , end - to - end delays increase , and signaling overhead increases .",
    "this is unavoidable , given that olsr must send more link states , and aodv and adara must send more route requests as the network size increases . however , it is clear that adara is more scalable than olsr and aodv , and is far more efficient than aodv .",
    "we introduced route - request aggregation as an effective mechanism to significantly reduce the signaling overhead incurred in route discovery , and presented adara as an example of the basic approach .",
    "adara uses destination - based sequence numbers to avoid routing - table loops like aodv does , and uses rreq aggregation and broadcast signaling packets to reduce signaling overhead .",
    "we compared the performance of adara , aodv , and olsr and analyzed the effect of mobility , number of flows , and network size on the performance of the protocols .",
    "the simulation results show that , in terms of packet delivery ratio , adara performs much better than aodv and performs very close to olsr in all cases .",
    "the signaling overhead incurred with adara is much smaller than the overhead in aodv and olsr .",
    "furthermore , the use of rreq aggregation and broadcast signaling packets in adara leads to fewer packets contenting for the channel and results in lower end - to - end delays for adara compared to aodv and olsr .",
    "as we have stated , the basic approach of using rreq aggregation can be applied to any on - demand routing protocol .",
    "accordingly , our results offer a great opportunity to improve the performance of on - demand routing protocols being considered for standardization .",
    "our results indicate that rreq aggregation can make aodv , dsr , or other on - demand routing protocols , far more attractive compared to olsr and other proactive routing protocols .",
    "our description of adara assumed single - path routing .",
    "however , multi - path routing @xcite can be easily supported as well .",
    "furthermore , as we we have stated , rreq aggregation can be used together with other techniques that have been proposed to improve the performance of on - demand routing in manets .",
    "the next steps for our work on unicast routing include the definition and analysis of multi - path routing based on adara , the use of loop - avoidance techniques other than destination - based sequence numbers in the context of route - request aggregation , the use of geographical coordinates as in @xcite , and the use of clustering techniques .",
    "in addition , it is clear that the use of route - request aggregation can be applied to improve the performance of on - demand multicast routing @xcite .",
    "this work was supported in part by the baskin chair of computer engineering at ucsc .",
    "j. wu and h. li ,  on calculating connected dominating set for efficient routing in ad hoc wireless networks , \" _ proc .",
    "acm intl workshop on discrete algorithms and methods for mobile computing and communications _ , 1999 ."
  ],
  "abstract_text": [
    "<S> in theory , on - demand routing is very attractive for mobile ad hoc networks ( manet ) , because it induces signaling only for those destinations for which there is data traffic . </S>",
    "<S> however , in practice , the signaling overhead of existing on - demand routing protocols becomes excessive as the rate of topology changes increases due to mobility or other causes . </S>",
    "<S> we introduce the first on - demand routing approach that eliminates the main limitation of on - demand routing by aggregating route requests ( rreq ) for the same destinations . </S>",
    "<S> the approach can be applied to any existing on - demand routing protocol , and we introduce the ad - hoc demand - aggregated routing with adaptation ( adara ) as an example of how rreq aggregation can be used . </S>",
    "<S> adara is compared to aodv and olsr using discrete - event simulations , and the results show that aggregating rreqs can make on - demand routing more efficient than existing proactive or on - demand routing protocols .    </S>",
    "<S> = 10000 = 10000    < ccs2012 > < concept > < concept_id>10003033.10003039.10003045.10003046</concept_id > < concept_desc > networks  routing protocols</concept_desc > < concept_significance>500</concept_significance > </S>",
    "<S> < /concept > < concept > < concept_id>10003033.10003106.10010582.10011668</concept_id > < concept_desc > networks  mobile ad hoc networks</concept_desc > < concept_significance>500</concept_significance > < /concept > </S>",
    "<S> < /ccs2012 > </S>"
  ]
}