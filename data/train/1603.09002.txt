{
  "article_text": [
    "dataflow matrix machines  @xcite can be understood as recurrent neural networks ( rnns ) generalized as follows .",
    "neurons can have different types .",
    "neurons are not limited to receiving and emitting streams of real numbers , but can receive and emit streams of other vectors ( depending on the type of a neuron ) .    among possible types of vectors are probability distributions and signed measures over a wide class of spaces ( including spaces of discrete objects ) , and samples from the underlying spaces can be passed over the links as the representations of the distributions and measures in question .",
    "thus it is possible to send streams of discrete objects overs the links of so generalized neural nets while retaining the capabilities to take meaningful linear combinations of those streams ( section  [ sec : linear_streams ] ) .",
    "because built - in neurons can be pretty powerful , dataflow matrix machines of very small size can already exhibit complex dynamics .",
    "so meaningful dataflow matrix machines can be quite compact , which is typical also for probabilistic programs and less typical for conventional rnns .    as a powerful new tool , dataflow matrix machines can be used in various ways . here",
    "we would like to focus on the aspects related to program synthesis ( also known as program learning , symbolic regression , etc ) .",
    "one way which might improve the performance of program learning systems would be to find continuous models of computations allowing for continuous deformations of software .",
    "computational architectures which admit the notion of linear combination of execution runs are particularly attractive in this sense and allow to express regulation of gene expression in the context of genetic programming  @xcite .",
    "it turns out that if one computes with linear streams , such as probabilistic sampling and generalized animations , one can parametrize large classes of programs by matrices of real numbers  @xcite , obtaining _ dataflow matrix machines_.    in particular , recurrent neural networks provide examples of such classes of programs , where linear streams are taken to be streams of real numbers with element - wise arithmetic , and there is usually a very limited number of types of non - linear transformations of those streams associated with neurons ( it is often the case that all neurons are of the same type ) .    turing universality of some classes of recurrent neural networks and first schemas to compile conventional programming languages into recurrent neural networks became known at least 20 years ago ( see  @xcite and references therein ) . nevertheless , recurrent neural networks are not used as a general purpose programming platform , or even as a platform to program recurrent neural networks themselves .",
    "the reason is that universality is not enough , one also needs practical convenience and power of available primitives .",
    "dataflow programming languages , including languages oriented towards work with streams of continuous data ( e.g. labview , pure data ) , found some degree of a more general programming use within their application domains .",
    "dataflow matrix machines have architecture which generalizes both recurrent neural networks and the core architecture of dataflow languages working with the streams of continuous data .",
    "dataflow matrix machines allow to include neurons encoding primitives which transform the networks ( as long as it makes sense for those primitives to be parts of linear combinations ) , and thus potentially allow to move towards using generalized rnns to program generalized rnns in a higher - order fashion .",
    "this gives hope that , on one hand , one would be able to use methods proven successful in learning the topology and the weights of recurrent neural networks to synthesize dataflow matrix machines , and that at the same time one would be able to use dataflow flow matrix machines as a software engineering platform for various purposes , including the design , transformation , and learning of recurrent neural networks and dataflow matrix machines themselves .",
    "two prominent and highly expressive classes of linear streams are probabilistic sampling and generalized animations  @xcite .    the linear combinations for each type of linear stream might be implemented on the level of vectors , which is what we do for the streams of real numbers in the recurrent neural networks , and for the streams of generalized images in generalized animations .",
    "however , the linear combination might be also implemented only on the level of streams , which allows to represent large or infinite vectors by their compact representatives .",
    "for example , probability distributions can be represented by samples from those distributions , and linear combinations with positive coefficients can be implemented as stochastic remixes of the respective streams of samples  @xcite .",
    "this provides opportunities to consider the architectures which are hybrid between probabilistic programming and rnns .",
    "here we briefly describe the formal aspect of dataflow matrix machines .",
    "we follow  @xcite , but transpose the matrix notation .",
    "we fix a particular _ signature _ by taking a finite number of neuron types , each with its own fixed finite non - negative arity ( zero arity corresponds to inputs ) and associated nonlinear transform .",
    "we take a countable number of copies of neurons for each neuron type from the signature .",
    "then we have a countable set of inputs of those operations , @xmath0 , and a countable set of their outputs , @xmath1 .",
    "associate with each @xmath0 a linear combination of all @xmath1 with real coefficients @xmath2 .",
    "we require that no more than finite number of elements of the matrix @xmath3 are nonzero .",
    "thus we have a countable - sized program , namely a countable dataflow graph , all but a finite part of which is suppressed by zero coefficients . any finite dataflow graph over a particular signature",
    "can be embedded into a universal countable dataflow graph over this signature in this fashion .",
    "hence we represent programs over a fixed signature as countable - sized real - valued matrices with no more than finite number of nonzero elements , and any program evolution would be a trajectory in this space of matrices .",
    "there is quite a bit of interest recently in using recurrent neural networks and related machines to learn algorithms ( see e.g.  @xcite and references therein ) .",
    "however , a typical result of program learning is a program which is functional , but is almost impossible to read and comprehend . at the same time",
    ", there is a lot of interest and progress in learning readable structures in various areas , and in understanding the details of learned models .",
    "for example , in recent years people demonstrated progress in automatic generation of readable mathematical proofs , in automatically capturing syntactic patterns of software written by humans , and in understanding and visualization the details of functioning of learned neural models  @xcite .",
    "bukatin , m. , matthews , s. : linear models of computation and program learning , in : gottlob , g. , , sutcliffe , g. , voronkov a. ( eds . ) , gcai 2015 , easychair proceedings in computing , vol .",
    "6678 , http://easychair.org/publications/download/linear_models_of_computation_and_program_learning"
  ],
  "abstract_text": [
    "<S> dataflow matrix machines are a powerful generalization of recurrent neural networks . </S>",
    "<S> they work with multiple types of arbitrary linear streams , multiple types of powerful neurons , and allow to incorporate higher - order constructions . </S>",
    "<S> we expect them to be useful in machine learning and probabilistic programming , and in the synthesis of dynamic systems and of deterministic and probabilistic programs . </S>"
  ]
}