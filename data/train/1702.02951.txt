{
  "article_text": [
    "plenty of tools in astrophysics are developed using system programming languages such as fortran , c or c++ .",
    "these languages are known to provide high performance and fast executions but they rely heavily on the developer for concurrency and memory control , which may lead to common errors as shown in fig.[fig1 ] : a ) access to invalid memory regions , b ) dangling pointers and attempts to free already freed memory , c ) memory leaks and , d ) race conditions .",
    "this can produce random behaviors and affect the scientific interpretation of the results .",
    "the recently created language rust prevents such problems and fields like bioinformatics @xcite have already started to take advantage of it .",
    "astroinformatics can benefit from it too .",
    "we first discuss the general principles behind this new language and what makes it attractive when compared to more traditional languages such as c or fortran .",
    "we then show that this language can reach the same performance as a fortran n - body simulator , mercury - t @xcite , designed for the study of the tidal evolution of multi - planet systems .",
    "mozilla research , motivated by the development of a new web browser engine @xcite , released in 2015 the first stable version of a new open source programming language named rust .",
    "it uses patterns coming from functional programming languages @xcite and it is designed not only for performance and concurrency , but also for safety .",
    "rust introduces concepts like ownership , borrowing and variable lifetime , which :    1 .   facilitates the automatic control of the lifetime of objects during compilation time .",
    "there is no need for manually freeing resources or for an automated garbage collector like in java or go ; 2 .   prevents the access to invalid memory regions ; 3 .",
    "enforces thread - safety ( race conditions can not occur ) .",
    "these zero - cost abstraction features make rust very attractive for the scientific community with high performance needs .    in rust , variables are non - mutable by default ( unless the mutable keyword is used ) and they are bound to their content ( i.e , they own it or they have ownership of it ) .",
    "when you assign one variable to another ( case a in fig.[fig2 ] ) , you are not copying the content but transferring the ownership , so that the previous variable does not have any content ( like when we give a book to a friend , we stop having access to it ) .",
    "this transfer takes also place when we call functions ( case b in fig.[fig2 ] ) , and it is important to note that rust will free the bound resource when the variable binding goes out of scope ( at the end of the function call for case b ) .",
    "hence , we do not have to worry about freeing memory and the compiler will validate for us that we are not accessing a memory region that has already been freed ( errors are caught at compilation time , before execution time ) .    additionally , apart from transferring ownership",
    ", we can borrow the content of a variable ( case c in fig.[fig2 ] ) . in this case ,",
    "two variables have the same content but none of them can be modified , thus protecting us from race conditions .",
    "alternatively , we can borrow in a more traditional way ( like when we borrow a book from a friend , he is expecting to get it back when we stop using it ) like in case d in fig.[fig2 ] , where the function borrows the content of a variable , operates with it ( in this case , it could modify its content ) and returns it to the original owner ( not destroying it as shown in case b ) .    exceptionally , all these rules can be violated if we make use of unsafe blocks , which is strongly discouraged but necessary in certain situation ( e.g. , dealing with external libraries written in fortran , c or c++ ) .",
    "if present , unsafe blocks allow us to clearly identify parts of the code which should be carefully audited , keeping it isolated and not making the whole program unsafe by default like in fortran , c or c++ .",
    "we explored the advantages and drawbacks of rust for astrophysics by re - implementing the fundamental parts of mercury - t @xcite , a fortran code that simulates the dynamical and tidal evolution of multi - planet systems .",
    "we developed a simple n - body dynamical simulator ( without tidal effects ) based on a leapfrog integrator in rust , fortran , c and go ( which provide a garbage collector for memory management ) .",
    "the software design and implementation does not include any language - specific optimization that a developer with basic knowledge would not do .",
    "we compiled the four implementations with an optimization level 3 ( rustc / gfortran / gcc compiler ) and the standard compilation arguments in the case of go .",
    "we selected the best execution time out of five for an integration of 1 million years and the results are in table  [ table ] .",
    "for this particular problem , rust is as efficient as fortran , and both surpass c and go implementations    [ cols=\"^,^,^,^\",options=\"header \" , ]     [ table ]    time might be improved if language - specific optimizations were implemented .",
    "based on mercury - t , we implemented the additional acceleration produced by tidal forces between the star and its planets into our rust and fortran leapfrog integrators .    to test the codes , we ran a simulation of 100 million years with the same initial conditions as the case 3 described in the mercury - t article @xcite , hence a single planet with a rotation period of 24 hours , orbiting a brown dwarf ( 0.08  @xmath0 ) at 0.018  au with an eccentricity of 0.1 .",
    "the results are shown in fig .",
    "[ fig3 ] , the rust and fortran code are practically identical and they reproduce a similar behavior to what is shown in the mercury - t article . nevertheless , leapfrog is a very simple integrator and not very accurate .",
    "this can be seen in the eccentricity evolution , which is slightly different from the mercury - t article and appears noisy .",
    "as an additional exercise , we implemented the whfast integrator @xcite in rust ( black line in fig .",
    "[ fig3 ] ) .",
    "this better integrator leads to a better agreement with mercury - t thus demonstrating that a high level of accuracy can also be achieved with rust .",
    "we have shown the reliability of rust as a programming language as opposed to fortran , c or even go .",
    "rust allows the user to avoid common mistakes such as the access to invalid memory regions and race conditions .",
    "we have also shown that it is a competitive language in terms of speed and accuracy .",
    "the main challenge we experienced was the initial learning curve , it was necessary to really understand and get used to the ownership and borrowing concepts .",
    "once the paradigm shift is done , the benefits are immediate .",
    "we therefore encourage the community to consider rust as a language that will help us produce good quality , memory safe , concurrent and high - performance scientific code ."
  ],
  "abstract_text": [
    "<S> the astrophysics community uses different tools for computational tasks such as complex systems simulations , radiative transfer calculations or big data . </S>",
    "<S> programming languages like fortran , c or c++ are commonly present in these tools and , generally , the language choice was made based on the need for performance . however , this comes at a cost : safety . for instance , a common source of error is the access to invalid memory regions , which produces random execution behaviors and affects the scientific interpretation of the results .    in 2015 , mozilla research released the first stable version of a new programming language named rust . </S>",
    "<S> many features make this new language attractive for the scientific community , it is open source and it guarantees memory safety while offering zero - cost abstraction .    </S>",
    "<S> we explore the advantages and drawbacks of rust for astrophysics by re - implementing the fundamental parts of mercury - t , a fortran code that simulates the dynamical and tidal evolution of multi - planet systems . </S>"
  ]
}