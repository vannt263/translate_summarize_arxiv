{
  "article_text": [
    "a _ matching _ between two sets defines a relationship between their elements .",
    "the matching is used in various fields such as computational biology @xcite , pattern recognition @xcite , computer vision @xcite , music information retrieval @xcite , and computational music theory @xcite .",
    "a _ many - to - many matching _ between @xmath10 and @xmath6 assigns each point in @xmath10 to one or more points in @xmath6 , and vise versa .",
    "let @xmath10 and @xmath6 be two sets with @xmath15 , eiter and mannila @xcite proposed an @xmath16 algorithm for the minimum many - to - many matching problem between @xmath10 and @xmath6 by reducing the problem to the minimum - weight perfect matching problem in a bipartite graph .    _ the minimum many - to - many matching with demands and capacities _ , here called _",
    "mmdc _ matching , is a matching in which each point @xmath17 is matched to at least @xmath4 and at most @xmath5 points in @xmath6 , and each point @xmath18 is matched to at least @xmath8 and at most @xmath9 points in @xmath10 , such that sum of the matching costs is minimized .",
    "schrijver @xcite solved the mmdc matching problem in strongly polynomial time . in this paper , we present a new algorithm that computes an mmdc matching between @xmath10 and @xmath6 in @xmath13 time using @xmath14 space . in section [ preliminaries ]",
    ", we review the basic hungarian algorithm and some preliminary definitions . in section [ newalgorithms ]",
    ", we present our new algorithm .",
    "given an undirected bipartite graph @xmath19 , a _ maximum matching _",
    "@xmath20 is a matching that for any other matching @xmath21 , we have @xmath22 .",
    "a path with the edges alternating between @xmath20 and @xmath23 is called an _ alternating path_. each vertex @xmath24 that is incident to one edge in @xmath20 is called a _ matched vertex _ ; otherwise it is a _",
    "free vertex_. an alternating path that its both endpoints are free is called an _ augmenting path_. note that if the @xmath20 edges of an augmenting path is replaced with the @xmath23 ones , its size increases by @xmath25 .",
    "let @xmath26 , a _",
    "vertex labeling function _",
    "@xmath27 assigns a label to each vertex @xmath28 . a vertex labeling that in which @xmath29 for all @xmath30 and @xmath31 is called a _",
    "feasible labeling_. the equality graph of a feasible labeling @xmath32 is a graph @xmath33 such that @xmath34 .",
    "the _ neighbors _ of a vertex @xmath35 is defined as @xmath36 .",
    "consider a set of the vertices @xmath37 , the neighbors of @xmath38 is @xmath39 .",
    "[ lem1 ] consider a feasible labeling @xmath32 of an undirected bipartite graph @xmath40 and @xmath41 with @xmath42 , let @xmath43 if the labels of the vertices of @xmath44 is updated such that : @xmath45 then , @xmath46 is also a feasible labeling .",
    "* proof . *",
    "note that @xmath32 is a feasible labeling , so we have @xmath47 for each edge @xmath48 of @xmath49 .",
    "after the update four cases arise :    * @xmath50 and @xmath51 . in this case @xmath52 * @xmath53 and @xmath54 .",
    "we have @xmath55 * @xmath53 and @xmath51 .",
    "we see that @xmath56 * @xmath50 and @xmath54 . in this situation",
    "we have @xmath57 two cases arises : * * @xmath58 .",
    "so @xmath59 hence , @xmath60 . * * @xmath61 .",
    "obviously @xmath62",
    "if @xmath32 is feasible labeling and @xmath20 is a perfect matching in @xmath63 , then @xmath20 is a max - weight matching @xcite .    *",
    "* suppose that @xmath21 is a perfect matching in @xmath44 , since each vertex is incident to exactly one edge of @xmath21 we have : @xmath64 so @xmath65 is an upper bound for each perfect matching .",
    "now assume that @xmath20 is a perfect matching in @xmath63 : @xmath66 it is obvious that @xmath20 is an optimal matching .    in the following ,",
    "we briefly describe the basic hungarian algorithm which computes the maximum many to many matching between two sets .",
    "the input bipartite graph @xmath19 is a complete bipartite graph that in which @xmath67 .    find an initial feasible labeling @xmath32 and a matching @xmath20 in @xmath63 let @xmath68 @xmath69 @xmath70    select a free vertex @xmath71 and set @xmath72 , @xmath73 update the labels according to lemma [ lem1 ] select @xmath74 ( @xmath75 is matched to the vertex @xmath76 , extend the alternating tree ) @xmath77 .",
    "@xmath20    in line @xmath25 , we label all points of @xmath6 with zero and each point @xmath3 with @xmath78 to get an initial feasible labeling . note that @xmath20 can be empty .",
    "it is obvious that for computing the minimum cost many to many matching using the hungarian algorithm we must weight the edge @xmath79 by @xmath80 .",
    "each augmenting path is a 4-vertex path .",
    "* proof . *",
    "suppose that the lemma is false .",
    "let @xmath81 be an augmenting path with more than four vertices , that is @xmath82 .",
    "note that @xmath83 and @xmath84 are free nodes .",
    "it is obvious that the first edge is in @xmath23 , so the second , third , and fourth edges of @xmath85 are in @xmath20 , @xmath23 , and @xmath20 , respectively . since the third edge @xmath86 is in @xmath23 , the fourth edge @xmath87 must be in @xmath20 .",
    "note that @xmath88 is a free node . a contradiction .",
    "in this section , we describe our new algorithm which is based on the well known hungarian algorithm .",
    "consider two point sets @xmath0 and @xmath89 with @xmath90 .",
    "let @xmath91 and @xmath92 denote the demand sets of @xmath10 and @xmath6 , respectively .",
    "let @xmath93 and @xmath94 be the capacity sets of @xmath10 and @xmath6 , respectively . without loss of generality , we assume that @xmath95 .",
    "let @xmath10 and @xmath6 be two sets with @xmath15 , an mmdc matching between @xmath10 and @xmath6 can be computed in @xmath13 time .",
    "*    we first construct a bipartite graph as follows .",
    "consider the complete bipartite graph @xmath96 where @xmath97 and @xmath98 ( see figure [ fig:1 ] ) .",
    "complete connection _ between two sets is a connection that in which each element of one set is connected to all elements of the other set .",
    "we show each set of the vertices by a rectangle and the complete connection between them by a line connecting the two corresponding rectangles .    given @xmath99 and @xmath100 , there exists a complete connection between @xmath10 and @xmath6 such that the weight of @xmath101 is equal to the cost of matching the point @xmath102 to @xmath75 for all @xmath103 and @xmath104 .",
    "let @xmath105 and @xmath106 , each point of @xmath10 is connected to the all points of @xmath107 such that the weight of @xmath108 is equal to the weight of @xmath109 .",
    "there exists also a complete connection between the sets @xmath6 and @xmath110 such that the weight of @xmath111 is equal to the weight of @xmath109 .",
    "we have a set @xmath112 that in which @xmath113 .",
    "in fact , we use @xmath114 to get @xmath115 .",
    "each vertex of @xmath110 is connected to all vertices of @xmath114 with zero weighted edges .",
    "now we apply our new algorithm , algorithm [ mmdc ] , on above bipartite graph @xmath44 .",
    "let @xmath116 and @xmath117 denote the capacity and the demand of the vertex @xmath118 ; so for all @xmath119 we have @xmath120 , @xmath121 , @xmath122 , and @xmath123 .    in our algorithm ,",
    "a vertex @xmath124 is free to another vertex @xmath125 if @xmath124 is not matched with @xmath125 in @xmath20 and has at least one empty capacity .",
    "so @xmath3 and @xmath126 are called free vertices to a vertex @xmath127 that are not matched with it in @xmath20 , if @xmath128 and @xmath129 , respectively . also the vertices @xmath75 and @xmath130 are free to another vertex that is not incident in @xmath20 to them , when @xmath131 and @xmath132 , respectively .    in fact , we save the current number of the vertices that are matched to the vertices of @xmath10 , @xmath6 , @xmath110 , and @xmath107 in the arrays @xmath133 $ ] , @xmath134 $ ] , @xmath135 $ ] , and @xmath136 $ ] , respectively ; for example @xmath137 $ ] shows the number of the nodes that are matched to @xmath102 .",
    "the initial values of the arrays is @xmath138 ; when a new point is matched to their representing node their values are increased by @xmath25 .",
    "assume that @xmath139 returns the number of the vertices that are matched to @xmath118 so far .",
    "so @xmath140 $ ] , @xmath141 $ ] , @xmath142 $ ] , and finally @xmath143 $ ] .",
    "note that the procedures @xmath144 and @xmath145 return @xmath146 if @xmath147 and @xmath148 , respectively .",
    "so in the augmenting path @xmath149 , @xmath150 is free to @xmath127 , @xmath127 is matched to @xmath151 , and @xmath152 is free to @xmath151 .",
    "now we change the basic hungarian algorithm as follows .",
    "find an initial feasible labeling @xmath32 and a matching @xmath20 in @xmath63 let @xmath153 @xmath154 @xmath155@xmath156 let @xmath157    select @xmath158 with @xmath144 set @xmath159    update the labels according to lemma [ lem1 ]    let @xmath160 let @xmath161    select @xmath162 ( @xmath163 ) ( @xmath125 is matched to some vertices @xmath76 )    @xmath164 .",
    "@xmath165    we first label the vertices of our bipartite graph @xmath44 using an initial feasible labeling in lines @xmath166 . algorithm [ mmdc ] has a @xmath167 loop where @xmath168 times iterates and @xmath169 edges are selected . in each iteration of our algorithm",
    "@xmath170 increases by @xmath25 .",
    "let @xmath171 in line @xmath172 ofalgorithm [ mmdc ] , the values of all slacks must be updated when a vertex is moved form @xmath173 to @xmath38 .",
    "this is done in @xmath14 time . during our algorithm @xmath90 vertices",
    "are moved from @xmath173 to @xmath38 , so it takes the total time of @xmath168 .    in lines",
    "@xmath174 , we can compute the value of @xmath175 by : @xmath176 in @xmath14 time . after computing the value of @xmath175 and updating the labels of the vertices",
    ", we must also update the values of the slacks .",
    "this can be done using : @xmath177 in each iteration the value of @xmath175 may be computed at most @xmath14 times , that takes @xmath14 time each time , so running each iteration takes at most @xmath168 time .",
    "our algorithm has @xmath168 iteration with @xmath168 time , so it runs in @xmath13 time .",
    "in this paper , we presented an @xmath13 time and @xmath14 space algorithm for computing an mmdc matching between @xmath10 and @xmath6 with total cardinality @xmath178 .",
    "in fact , we modified the basic hungarian algorithm to get a new algorithm , called the mmdc matching algorithm .",
    "then , we construct a bipartite graph @xmath44 and apply our new algorithm on @xmath44 ."
  ],
  "abstract_text": [
    "<S> let @xmath0 and @xmath1 with @xmath2 , _ the many to many point matching with demands and capacities _ matches each point @xmath3 to at least @xmath4 and at most @xmath5 points in @xmath6 , and each point @xmath7 to at least @xmath8 and at most @xmath9 points in @xmath10 for all @xmath11 and @xmath12 . in this paper , we present an @xmath13 time and @xmath14 space algorithm for this problem .    </S>",
    "<S> many to many matching , hungarian method , bipartite graph , points with demands and capacities </S>"
  ]
}