{
  "article_text": [
    "the quadratic knapsack problem ( qkp ) can be defined in graph theoretic terms as follows .",
    "let @xmath3 be a graph with vertices @xmath4 with costs @xmath5 associated with the vertices and profits @xmath6 associated with each edge @xmath7 and each vertex @xmath8 ( corresponding to @xmath9 .",
    "given a cost limit @xmath10 the problem is to find a collection of vertices with total cost at most @xmath10 with the total profit ( the sum of all profits of vertices and edges in the induced subgraph ) as large as possible . a particular form of this problem where the costs and profits are all @xmath11 is equivalent to the densest k - subgraph problem ( dks ) .",
    "thus dks asks for the selection of @xmath12 vertices so that the induced subgraph on those vertices has a maximum number of edges .",
    "the reader is referred to @xcite for a survey of the qkp problem , and the recent article @xcite on approximating qkp for special graph classes .",
    "in particular we note that @xcite has no results on approximating qkp in the general case , and the author is not aware of any such previously published results .",
    "note that the related problem where negative profits are allowed is known to be inapproximable @xcite .",
    "* theorem . * let @xmath13 be any approximation algorithm for dks that has an approximation ratio within @xmath14 , @xmath0 and runs within time @xmath15 . then @xmath13 can be used to construct an approximation algorithm @xmath16 for qkp that has an approximation ratio within @xmath17 and runs within time @xmath18 .",
    "since @xcite provides , for any @xmath0 , an approximation algorithm for dks with ratio @xmath19 and runs within time @xmath15 the following corollary follows from the theorem immediately ( given @xmath20 select @xmath13 to have approximation ratio @xmath21 and run time @xmath18 ) . +",
    "* corollary .",
    "* there is an algorithm for the quadratic knapsack problem that has , for any @xmath22 , an approximation ratio within @xmath1 and a run time within @xmath2 .",
    "+ * proof of the theorem .",
    "* let @xmath3 be a graph with cost limit @xmath10 , and @xmath13 an approximation algorithm for dks that has an approximation ratio of @xmath23 and runs in time @xmath15 .",
    "we sketch the main flow of the proof method .",
    "we group the costs and profits of the original instance into @xmath24 many buckets .",
    "this allows us to split the original instance into @xmath25 sub - instances each with a simplified structure .",
    "one of these sub - instances has costs and profits on the vertices only , while each of the others have closely bounded costs , no vertex costs and the same edge profits . in this way we group these sub - instances into five classes :",
    "the first is an instance of the classical knapsack problem ; while for the other four classes the qkp can be approximated provided we have an approximation for the dks problem . finally by a simple averaging argument",
    "at least one of the sub - instances must have a profit within a factor of @xmath25 of the original instance .",
    "see also @xcite where this argument is used to approximate the weighted dks problem from approximations of the dks problem .",
    "this paper extends the method further to the qkp .",
    "we may prune all vertices with @xmath26 and all edges @xmath7 where @xmath27 since these can not be part of a feasible solution .",
    "further if @xmath28 then the vertex can be pruned and the attached edge values added to the neighbouring vertices without affecting the problem . also if @xmath29 then the edge @xmath7 can be pruned .",
    "+ notation : let @xmath30 $ ] be the maximum total profit of the solution to qkp applied to the graph @xmath3 with cost limit @xmath10 .",
    "let @xmath31 $ ] be a subgraph of @xmath3 corresponding to a maximum solution ( so the vertex costs of @xmath31 $ ] are at most @xmath10 , and the profits @xmath30 $ ] ) .",
    "let any subgraph in which the total cost of the vertices is at most @xmath10 be termed _",
    "feasible_. let @xmath32 denote the number of edges in any graph @xmath3 .",
    "now let @xmath33 be the largest @xmath34 and @xmath35 the largest power of @xmath36 at most @xmath33 .",
    "form the graph @xmath37 from @xmath3 with each @xmath34 rounded down to the nearest profit among @xmath38 where @xmath39 is the smallest integer above @xmath40 .",
    "then @xmath41 \\geq 1/4max[g , c]$ ] since the effect of deleting all edges with profits less than @xmath42 and rounding down the remaining profits each reduce the maximum total profit by a factor of at most @xmath43 .",
    "similarly let @xmath44 be the largest @xmath45 and @xmath46 the smallest power of @xmath36 at least @xmath44 .",
    "now group the vertices into buckets @xmath47 where @xmath48 is the smallest integer above @xmath49 and @xmath50 is the collection of vertices @xmath51 where @xmath52 and @xmath53 is the collection of vertices @xmath51 where @xmath54 .",
    "the edge and vertex profits of @xmath37 can be shared among at most @xmath55 subgraphs within five classes , with classes 2 - 5 constructed based on the cost groupings and profit roundings .",
    "we shall show how to obtain @xmath56 or better approximations for each of these classes in time @xmath57 or less .",
    "+ class 1 : the subgraph of @xmath37 obtained by removing all of the edges .",
    "+ class 2 : subgraphs with costs within @xmath53 and edge profits some power of 2 , and no vertex profits .",
    "+ class 3 : subgraphs with costs within @xmath58 and edge profits some power of 2 , and no vertex profits .",
    "+ class 4 : bipartite subgraphs with one part having costs within @xmath53 , the other with costs within @xmath58 , and edge profits some power of 2 , and no vertex profits .",
    "+ class 5 : bipartite subgraphs with one part having costs within @xmath58 , the other with costs within @xmath59 , and edge profits some power of 2 , and no vertex profits .",
    "class 1 corresponds to the knapsack problem and so has an algorithm that has an approximation ratio within @xmath60 and a run time within @xmath61 @xcite , @xcite . since @xmath62 then @xmath63 so that class 2 subgraphs have the sum of all vertex costs at most @xmath10 .",
    "thus the maximum edge profit is found by summing all the edge profits .",
    "+ class 3 : let @xmath64 be any subgraph in this class . let the equal edge profits be @xmath65 .",
    "we can simplify by scaling the costs and profits so that the vertex costs are between 1 and 2 , and the edge profits are all 1 .",
    "specifically form a modified subgraph @xmath66 by dividing the ( vertex ) costs by @xmath67 , and setting the edge profits to @xmath11 .",
    "set the cost limit @xmath68 for @xmath66 to @xmath69",
    ". then @xmath70=\\frac{1}{2^{x}}max[\\tilde{h},\\tilde{c}].\\ ] ] thus approximating the qkp for @xmath71 is equivalent to approximating the qkp for @xmath72 .",
    "we now analyse the graph @xmath66 with cost limit @xmath68 .",
    "observe that the number of vertices @xmath73 in any maximum solution must be between @xmath74 and @xmath68 .",
    "so let @xmath75 $ ] have @xmath73 vertices .",
    "we may assume @xmath76 or else the problem is trivial .",
    "let @xmath77 be any subgraph of @xmath66 with a maximum number of edges formed by choosing @xmath78 vertices .",
    "in particular we can choose @xmath78 vertices from @xmath79 $ ] in @xmath80 ways and the collection of these choices counts each edge of @xmath79 $ ] @xmath81 times .",
    "it follows that some such subgraph with @xmath78 vertices must have a number of edges at least @xmath82=\\frac{t(t-1)}{r(r-1)}\\tilde{h}^{max}[\\tilde{c } ] \\geq \\frac{1}{10}\\tilde{h}^{max}[\\tilde{c}]\\ ] ] the minimum corresponding to @xmath83 .",
    "thus @xmath84 must have at least as many edges as this subgraph and is also feasible .",
    "@xmath84 can be approximated by algorithm @xmath13 applied to the dks problem for @xmath85 and this provides an @xmath86 approximation algorithm that runs in time @xmath15 .",
    "we note that @xmath87 .",
    "this completes this class .    in the following for a bipartite graph",
    "@xmath88 $ ] with parts @xmath89 and @xmath90 , if @xmath91 , @xmath92 then @xmath93 $ ] refers to the subgraph of @xmath88 $ ] induced by @xmath94 and @xmath95 .",
    "+ class 4 : let @xmath88 $ ] be any subgraph in this class with parts @xmath89 and @xmath90 , with the vertex costs of @xmath89 between 0 and @xmath96 , and the vertex costs of @xmath90 between @xmath97 and @xmath98 , @xmath97 a power of 2 . since the edge profits are all equal we can scale them as in class 3 , so that they are all 1 in the modified graph @xmath99 $ ] with cost limit @xmath68 .",
    "we may assume @xmath100 otherwise the problem is essentially finite by considering all choices of at most 4 of the vertices of @xmath101 .",
    "for each such choice the choice of corresponding vertices from @xmath102 amounts to an instance of the knapsack problem .",
    "similarly we assume @xmath103 .",
    "select @xmath104 to be the @xmath105 highest degree vertices of @xmath101 in @xmath99 $ ]",
    ". then @xmath106)|$ ] is at least @xmath107 $ ] since any feasible solution has at most @xmath108 vertices from @xmath101",
    ". now select @xmath109 to be the @xmath110 highest degree vertices of @xmath102 in @xmath111 $ ] .",
    "then @xmath112)| \\geq ( 1/4)|e(\\tilde{h}[\\tilde{a},\\tilde{b}'])|$ ] .",
    "thus @xmath112)| \\geq ( 1/16)max[\\tilde{h},\\tilde{c}]$ ] , and since @xmath113 the subgraph @xmath112)|$ ] is also feasible as the total cost of vertices in each part is at most @xmath74 .",
    "this completes this class .",
    "+ class 5 : let @xmath88 $ ] be any subgraph in this class with parts @xmath89 and @xmath90 . as in classes 3 and 4",
    "we modify @xmath88 $ ] to @xmath99 $ ] and the cost limit @xmath10 to @xmath68 , where in @xmath99 $ ] the edge profits are 1 , the vertices in @xmath102 have costs between 1 and 2 , and the vertices of @xmath101 have costs between @xmath97 and @xmath98 , where @xmath97 is a positive power of 2 as in figure 1 .",
    "we may also assume @xmath100 ( see the argument in class 4 ) .",
    "we consider two cases .",
    "+ case 1 : @xmath114 : select the @xmath105 highest degree vertices @xmath104 of @xmath101 .",
    "then @xmath106)| \\geq 1/4max[\\tilde{h},\\tilde{c}]$ ] since any feasible solution can have at most @xmath108 vertices of @xmath101 .",
    "now select the @xmath115 highest degree vertices @xmath109 of @xmath102 in @xmath111 $ ] .",
    "then @xmath116 $ ] must have at least @xmath117 of the edges of @xmath111 $ ] .",
    "so @xmath116 $ ] is feasible and since @xmath118 @xmath119)| \\nonumber \\\\   & \\geq & \\frac{1}{16}n^{\\frac{-2\\alpha}{1+\\alpha}}max[\\tilde{h},\\tilde{c}].\\end{aligned}\\ ] ] case 2 : @xmath120 : this case is the most challenging and we provide a graph transformation method to deal with it .",
    "construct a graph @xmath121 from @xmath66 by replacing @xmath101 by @xmath97 copies @xmath122 of the vertices of @xmath101 with edges between @xmath102 and each @xmath123 copying the edges between @xmath102 and @xmath101 .",
    "thus if @xmath124 , @xmath125 and @xmath126 then @xmath127 in @xmath121 set cost@xmath128=@xmath129cost@xmath130 and so each cost@xmath128 is between 1 and 2 ( see figure 1 ) .",
    "now @xmath131 \\geq dmax[\\tilde{h},\\tilde{c}]$ ] since any feasible subgraph of @xmath66 can be replicated @xmath97 times to a feasible solution of @xmath121 .",
    "use algorithm @xmath13 to approximate the dks problem for @xmath121 with @xmath132 to within an approximation ratio of say @xmath133 .",
    "let @xmath134 $ ] be an induced subgraph corresponding to this approximation .",
    "define @xmath135 be the degree of @xmath136 in @xmath137 ( if @xmath136 is not in @xmath137 then @xmath138 ) , and @xmath139 .",
    "now choose a subgraph of @xmath66 as follows .",
    "select @xmath95 to be those @xmath140 for which @xmath141 is among the @xmath105 highest values among @xmath142 .",
    "then since @xmath143 contains at most @xmath68 vertices @xmath144)| \\geq \\frac{1}{4d}|e(\\tilde{h}^{**}[\\tilde{a}',\\tilde{b}'_1,\\tilde{b}'_2, .. ,\\tilde{b}'_d])| \\geq \\frac{1}{4ds}max[\\tilde{h}^*,\\tilde{c}].\\ ] ] now select @xmath145 to be the @xmath115 highest degrees of @xmath109 in @xmath116 $ ] . since @xmath146 is at most @xmath68 , @xmath147)| \\geq ( 1/4)|e(\\tilde{h}[\\tilde{a}',\\tilde{b}'])|$ ] and so @xmath148)| \\geq \\frac{1}{16ds}max[\\tilde{h}^*,\\tilde{c } ] \\geq \\frac{1}{16s}max[\\tilde{h},\\tilde{c}].\\ ] ] @xmath149 $ ]",
    "is feasible since the total cost of vertices in each part is at most @xmath74 . by the inequality defining this case",
    "@xmath150 so @xmath121 has at most @xmath151 vertices where @xmath152 thus @xmath153^{\\alpha+\\epsilon})=o(n^{\\frac{2\\alpha}{1+\\alpha}+\\frac{2\\epsilon}{1+\\alpha}}).\\ ] ] similarly the time taken for @xmath13 to run is @xmath154^{1/\\epsilon})=o(n^{\\frac{2}{\\epsilon(1+\\alpha)}}).\\ ] ] noting that @xmath155 and @xmath156 the selection of @xmath149 $ ] through the use of @xmath13 provides an approximation ratio of at most @xmath157 to @xmath158 $ ] by inequality 6 , and this is obtained within time @xmath57 .",
    "this completes this case and also this class .    to complete the proof of the theorem we note that @xmath159 $ ] must share a vertex / edge profit of at least @xmath160 $ ] of @xmath41 $ ] with at least one of the subgraphs @xmath64 in classes 1 - 5 .",
    "thus the largest profit found among the approximations to @xmath161 $ ] over the subgraphs must approximate @xmath41 $ ] , and so @xmath30 $ ] , to within @xmath162 for @xmath163 sufficiently large the term @xmath164 is less than @xmath20 and the desired approximation bound follows .",
    "the order of the run time can similarly be shown to be at most @xmath18 .",
    "a  bhaskara , c  charikar , e  chlamtac , detecting high log - densities - an @xmath165 approximation for densest k - subgraph , stoc10 , june 5 - 8 2010 , cambridge massachusetts , usa , berlin , ( 2010 ) u  feige , g  kortsarz , d  peleg , the dense k - subgraph problem , algorithmica , 29(13 ) , pp 410 - 421 , ( 2001 ) v  vazirani , approximation algorithms , springer , ( 2003 ) m  garey , d  johnson , computers and intractability - a guide to the theory of np - completeness ( 1979 ) d  pisinger , the quadratic knapsack problem - a survey , discrete applied mathematics 155 , pp 623 - 648 ( 2007 ) u  pferschy , j  schauer , approximating the quadratic knapsack problem , informs journal on computing 28(2 ) , pp 308 - 318 ( 2016 ) d  rader jr , g  woeginger , the quadratic 0 - 1 knapsack problem with series parallel support , operations research letters 30 ( 3 ) , pp 159 - 166 ( 2002 )"
  ],
  "abstract_text": [
    "<S> for any given @xmath0 we provide an algorithm for the quadratic knapsack problem that has an approximation ratio within @xmath1 and a run time within @xmath2 .    quadratic knapsack approximation algorithm </S>"
  ]
}