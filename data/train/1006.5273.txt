{
  "article_text": [
    "time - series data are of growing importance in data mining and data warehousing@xcite .",
    "a time - series is a sequence of real numbers representing values at specific points in time .",
    "typical examples include stock prices , music data , network traffic data , moving object trajectories , and biomedical data@xcite .",
    "the time - series data stored in a database are called _ data sequences _ , and those given by users are called _ query sequences_. finding data sequences similar to the given query sequence from the database is called _ similar sequence matching _ or _ time - series matching_@xcite . in many similar sequence matching models , two sequences @xmath0 , \\ldots , x[n[\\}$ ] and @xmath1 , \\ldots , y[n]\\}$ ]",
    "are said to be _",
    "similar _ if the distance @xmath2 , where @xmath3 is the user - specified tolerance . in this paper",
    "we use the euclidean distance(@xmath4-y[i]|^2}$ ] ) as the distance function of @xmath5 .    _",
    "linear trend _",
    ", a representative distortion of time - series data@xcite , shows the directionality of a time - series , and _ linear detrending _ in similar sequence matching is crucial to get the more intuitive matching results .",
    "figure [ fig : ldex ] shows an example of comparing two sequences before and after linear detrending : figure [ fig : ldex](a ) represents the original sequences @xmath6 and @xmath7 ; figure [ fig : ldex](b ) the linear detrended sequences @xmath8 and @xmath9 .",
    "we obtain @xmath8 and @xmath9 by linear detrending , i.e. , by subtracting the corresponding trend lines @xmath10 and @xmath11 from @xmath6 and @xmath7 , respectively . in figure",
    "[ fig : ldex ] , there is a big distance between @xmath6 and @xmath7 , and these two sequences will be determined to be non - similar .",
    "in contrast , the distance between @xmath8 and @xmath9 is very small in figure [ fig : ldex](b ) , and they will be determined to be similar .",
    "it means that non - similar sequences can be identified as similar ones after linear detrending , and vice versa . likewise , linear detrending is useful to know similarity of changes which is hidden by the linear trend of time - series data@xcite .",
    "motivated by this example , we attack the problem of linear detrending in similar sequence matching , especially in subsequence matching@xcite .     and @xmath6 _ before _ and _ after _ linear detrending.,title=\"fig:\",width=453 ] +    in this paper we address the problem of linear detrending in subsequence matching .",
    "supporting the linear detrending is simple in whole matching since all data and query sequences have the same length .",
    "but , it is a challenging problem in subsequence matching because we need to consider a huge number of possible data subsequences to be linear detrended .",
    "we call this matching scheme the _ linear detrending subsequence matching_. formally speaking , for a query sequence @xmath6 and a data sequence @xmath7 , linear detrending subsequence matching finds all subsequences @xmath12 $ ] such that @xmath13 } ) \\leq \\epsilon$ ] , where @xmath14 and @xmath15}$ ] are the linear detrended ( sub)sequences of @xmath6 and @xmath12 $ ] , respectively .",
    "we propose an _ index - based _",
    "solution for linear detrending subsequence matching . to this end",
    ", we first present a novel notion of _ ld - windows _",
    ", linear detrending - windows .",
    "suppose a subsequence @xmath12 $ ] include a window @xmath16 $ ] ( i.e. , @xmath17 ) , then we obtain the ld - window of @xmath16 $ ] by eliminating the linearity of subsequence @xmath12 $ ] rather than that of window @xmath16 $ ] itself .",
    "this notion enables an ld - window to represent multiple subsequences of different lengths , and eventually , we can use only one index in subsequence matching@xcite . using the ld - windows we next present a lower bounding theorem for the index - based matching solution and",
    "formally prove its correctness .",
    "based on this lower bounding theorem , we then propose the index building and subsequence matching algorithms , respectively .",
    "we finally showcase the superiority of our index - based solution through extensive experiments .",
    "experimental results show that , compared with the sequential scan , our solution improves the matching performance by one or two orders of magnitude .",
    "similar sequence matching can be classified into whole matching and subsequence matching@xcite .",
    "the whole matching@xcite finds data sequences similar to a query sequence , where the lengths of data and query sequences are all identical .",
    "the subsequence matching@xcite finds subsequences , contained in data sequences , similar to a query sequence of arbitrary length .",
    "likewise , subsequence matching is a generalization of whole matching@xcite , and we thus focus on subsequence matching in this paper .",
    "many efficient solutions have been proposed for subsequence matching@xcite .",
    "these solutions consists of index - building and subsequence matching algorithms . in the index - building algorithm",
    ", the solution constructs an @xmath18-tree as follows : it divides data sequences into multiple windows of size @xmath19 ; transforms those windows to @xmath20-dimensional points using the lower - dimensional transformation such as discrete fourier transform(dft ) and piecewise aggregate approximation(paa ) ; and stores the points ( or minimum bounding rectangls(mbrs ) containing multiple points ) into the r@xmath21-tree . in the subsequence",
    "matching algorithm , the solution finds similar subsequences as follows : it divides the query sequence into multiple windows of the same size @xmath19 ; transforms each window to an @xmath22-dimensional point ; makes a range query using the point and the tolerance ; constructs a candidate set by searching the @xmath18-tree ; and finally obtain actual similar subsequences by eliminating _",
    "false alarms _ through the post - processing step@xcite .",
    "representative distortions embedded in time - series are offset translation , amplitude scaling , noise , and linear trend@xcite . in similar sequence matching ,",
    "there have been many efforts to remove these distortions from time - series data .",
    "for example , offset translation and amplitude scaling can be solved by the normalization transform , and its subsequence matching solutions were proposed in @xcite .",
    "also , the moving average transform can alleviate noise of time - series , and its subsequence matching solution was proposed in @xcite . to our best knowledge",
    ", however , there is no solution to linear detrending subsequence matching , and in this paper we define the problem first and present an efficient index - based solution .",
    "for a time - series , its linear trend is a straight line that most likely reflects its directionality .",
    "the _ least square method _ is most widely used to obtain the line of a time - series@xcite . for a sequence @xmath0 , \\ldots , x[n]\\}$ ] ,",
    "a linear function by the least square method is given by @xmath23 , where @xmath24 and @xmath25 are obtained by eq .",
    "( [ eq : lsm])@xcite . @xmath26-\\sum_{k=1}^{n}k\\cdot\\sum_{k=1}^{n}x[k]}{n\\sum_{k=1}^{n}k^2-(\\sum_{k=1}^{n}k)^2 } , \\nonumber \\\\",
    "\\beta & = & \\frac{\\sum_{k=1}^{n}x[k]}{n } - \\alpha\\frac{\\sum_{k=1}^{n}k}{n}. \\label{eq : lsm}\\end{aligned}\\ ] ] _ linear detrending _ is the process of obtaining a new time - series from an original time - series by removing the corresponding linear trend .",
    "the following is the formal definition of linear detrending .",
    "[ def : ld ] for a sequence @xmath0 , \\ldots x[n]\\}$ ] and its trend line @xmath23 , the _ linear detrending sequence _ of @xmath27 , _ ld - sequence _ of @xmath27 in short , is defined as @xmath28 , \\ldots , { \\overline}{x}[n]\\}$ ] , where @xmath29 = x[k ] - g(k ) , k = 1 , 2 , \\ldots , n$ ] .",
    "@xmath30    linear detrending is simply solved in whole matching , but it is a challenging problem in subsequence matching . in whole matching ,",
    "the lengths of data and query sequences are all identical , and we simply use the whole matching solution@xcite after linear detrending of all time - series . in contrast , the solution is not simple in subsequence matching by the following reasons : ( 1 ) data subsequences in different positions have different linear trend even though they have the same length ; and ( 2 ) data subsequences of different lengths also have different linear trend even though they start from the same position .",
    "therefore , we need to consider different linear trend for all possible query lengths and for all possible positions , and we can not use the traditional whole / subsequence matching solutions for linear detrending subsequence matching .",
    "we formally define the problem of linear detrending subsequence matching .",
    "we first present similarity of two sequences by considering the linear detrending .",
    "[ def : ld - sim ] for two sequences @xmath27 and @xmath31 of the same length and their ld - sequences @xmath32 and @xmath33 , we define that @xmath27 and @xmath31 ( or @xmath32 and @xmath33 ) are _ ld - similar _ if the euclidean distance between @xmath32 and @xmath33 is less than or equal to the tolerance @xmath3 , i.e. , if @xmath34 .",
    "@xmath30    using the concept of ld - similarity , we now define the problem of linear detrending subsequence matching as follows :    [ def : ldsm ] for a data sequence @xmath7 , a query sequence @xmath6 , and the tolerance @xmath3 , _ linear detrending subsequence matching _ is the problem of finding all subsequences @xmath12 $ ] which are ld - similar to @xmath6 , i.e. , finding all subsequences @xmath12 $ ] such that @xmath13 } ) \\leq \\epsilon$ ] .",
    "@xmath30      sequential scan accesses every subsequence @xmath12 $ ] sequentially and investigates its ld - similarity by computing @xmath13})$ ] .",
    "algorithm [ alg : seqscan ] shows the sequential scan algorithm , ldseqscan , which is simple and self - explained .",
    "algorithm ldseqscan accesses all possible subsequences one by one in lines 3 to 7 and returns ld - similar subsequences by investigating the ld - similarity .",
    "compute a trend line @xmath35 from @xmath6 using the least square method ; obtain @xmath14 from @xmath6 and @xmath35 through linear detrending ; subsequence @xmath12 $ ] of length @xmath36 * do * ;  compute a trend line @xmath37 from @xmath12 $ ] using the least square method ;  obtain @xmath15}$ ] from @xmath12 $ ] and @xmath37 through linear detrending ;  return the subsequence @xmath12 $ ] if @xmath13 } ) \\leq \\epsilon$ ] ;  // ld - similar    the sequential scan algorithm has an advantage of simplicity , but has a disadvantage of incurring severe cpu and i / o overhead .",
    "first , the algorithm causes many disk accesses since it accesses an entire data sequence in a database .",
    "second , the algorithm also causes severe cpu overhead since it investigates the ld - similarity for every individual subsequence by performing the linear detrending and by computing the euclidean distance .",
    "this cpu and i / o overhead makes ldseqscan impractical for a large time - series database . to solve this problem",
    ", we propose an efficient index - based solution in the next section [ subsec : ibsol ] .      as in the traditional subsequence matching@xcite",
    ", we use the window construction mechanism that divides data and query sequences into disjoint / sliding windows of the fixed size .",
    "however , our solution quite differs from the traditional ones in constructing windows due to use of linear detrending .",
    "each window should be mapped to multiple windows in the linear detrending subsequence matching while it does not in the traditional subsequence matching .",
    "this is because , in linear detrending subsequence matching , each window has multiple trend lines by different lengths and different positions of subsequences that include the window . formally speaking , for a given window @xmath16 $ ] , there are many different subsequences @xmath12 $ ] s that include @xmath16 $ ] ; their trend lines are also different from each other ; and the window @xmath16 $ ] is mapped to multiple windows due to different trend lines .",
    "we call this complex property the _ multiple mapping property _ , which was already presented in the normalization - transformed subsequence matching@xcite . the traditional subsequence matching solutions@xcite do not have the multiple mapping property , but we need to support this property in linear detrending subsequence matching .    to support the multiple mapping property , for a given window , we do not remove the linear trend of the window itself , but we instead remove the linear trend of a subsequence including that window . to this end , we present a notion of ld - windows as follows :    [ def : ld - win ] suppose @xmath12 $ ] be a subsequence of a sequence @xmath7 , @xmath35 be a linear function of @xmath12 $ ] , and @xmath16 $ ] be a window included in @xmath12 $ ] , then _ ld - windows _ of @xmath16 $ ] against @xmath12 $ ] , denoted by @xmath38}$ ] , is defined as a new window whose entry @xmath39}(k = a , a+1 , \\ldots , b)$ ] is set to @xmath40 - g(k)$ ] .",
    "@xmath30    definition [ def : ld - win ] means that a window @xmath16 $ ] is mapped to an ld - window @xmath38}$ ] by the trend line of a subsequence @xmath12 $ ] which includes @xmath16 $ ] .",
    "because of the multiple mapping property , there are many subsequences @xmath12 $ ] s that include @xmath16 $ ] , and thus , each window @xmath16 $ ] is mapped to multiple ld - windows @xmath38}$ ] s for different subsequences @xmath12 $ ] s .    like the traditional subsequence matching algorithms@xcite",
    ", our index - based solution first transforms each _ high - dimensional _ window to a _ low - dimensional _ point and then stores the point into the multidimensional index . unlike the traditional algorithms , however , our solution maps each high - dimensional window to a low - dimensional mbr that bounds multiple low - dimensional points .",
    "this is due to the multiple mapping property that a window is mapped to multiple ld - windows . constructing an mbr from a window",
    "is performed as follows : ( 1 ) the given window is mapped to multiple ld - windows ; ( 2 ) ld - windows are transformed to low - dimensional points by the lower - dimensional transformation ; and ( 3 ) a low - dimensional mbr is constructed by bounding the transformed points .",
    "we call this mbr _ ld - mbr _ and formally define it as follows :    [ def : ld - mbr ] suppose @xmath41 be a window of a sequence @xmath7 , @xmath42 be \\{@xmath43 @xmath44 @xmath43 is an ld window of @xmath41 } , and @xmath45 be a function of lower - dimensional transformation , then _ ld - mbr _ of @xmath41 , denoted by @xmath46 ) , is defined as a low - dimensional mbr that bounds all low - dimensional points @xmath47 for all @xmath48 .",
    "@xmath30    figure [ fig : ld - mbr ] shows the process of constructing an ld - mbr of a window @xmath16 $ ] .",
    "the process is as follows : ( 1 ) the window @xmath16 $ ] is mapped to multiple ld - windows @xmath49}$ ] s by considering possible subsequences @xmath50 $ ] s ; ( 2 ) each ld - window is transformed to a low - dimensional point ; and ( 3 ) an ld - mbr is constructed by bounding those points .",
    "$ ] .,title=\"fig:\",width=453 ] +    our index - based solution is developed from the following theorem [ th : ldsm ] .",
    "[ th : ldsm ] _ for a query sequence @xmath6 , a data subsequence @xmath12 $ ] , a tolerance @xmath3 , a function @xmath45 of lower - dimensional transformation , if @xmath6 and @xmath12 $ ] are ld - similar , that is , if @xmath13 } ) \\leq \\epsilon$ ] , the distance between @xmath51 and @xmath52 @xmath53 , where @xmath54 and @xmath55 are @xmath56 disjoint windows of @xmath14 and @xmath15}$ ] , respectively , and @xmath57 is the set of ld - windows of @xmath58 .",
    "that is , the following eq .",
    "( [ eq : ldsm ] ) holds : _",
    "@xmath59 } )    \\leq \\epsilon \\longrightarrow \\bigvee_{k=1}^{p}d(t({\\overline}{q_k}),\\mathbb{m}(t(\\mathbb{s}_k ) ) ) \\leq \\epsilon/\\sqrt{p}.\\ ] ] proof : the proof is similar to that of _ normalization - transformed subsequence matching _ in the previous work@xcite . refer to the proof of theorem 1 in @xcite for the detailed proof .",
    "@xmath30    theorem [ th : ldsm ] guarantees correctness of our index - based solution to linear detrending subsequence matching . like the traditional subsequence",
    "matching solutions , our solution also consists of two algorithms : ( 1 ) the index - building algorithm and ( 2 ) the subsequence matching algorithm .",
    "algorithm [ alg : bi ] shows the index - building algorithm . in line 2",
    "we divide the given data sequence into sliding or disjoint windows of size @xmath19 .",
    "for the first subsequence matching solution of @xcite , we use the sliding window ; in contrast , for the recent dualmatch@xcite , we use the disjoint window . in lines 4 to 14",
    ", we build a multidimensional index by repeating the following three steps for each window @xmath16 $ ] : ( 1 ) compute trend lines of all possible subsequences(line 8) ; obtain ld - windows using those trend lines(line 9 ) ; and ( 3 ) map those ld - windows to an ld - mbr(line 10 ) . after obtaining an ld - mbr from a window , we store it into the index with its starting offset @xmath60(line 13 ) .",
    "once we build an index by algorithm buildindex , we use it repeatedly in the subsequence matching algorithm .",
    "algorithm [ alg : sm ] shows the subsequence matching algorithm . in line 2",
    "we first eliminate the linear trend from the query sequence @xmath6 . in line 3",
    "we divide the ld sequence @xmath14 into disjoint or sliding windows @xmath61 of size @xmath19 . for the first solution of @xcite",
    ", we use the disjoint window ; in contrast , for dualmatch@xcite , we use the sliding window . in lines 5 to 11 , we find candidate subsequences by repeating the following steps for each query window @xmath61 : ( 1 ) transform a high - dimensional window @xmath61 to a low - dimensional point(line 6 ) ; ( 2 ) make a range query using that point and the given tolerance(line 7 ) ; and ( 3 ) find candidate subsequences by evaluating the range query on the index(lines 8 and 9 ) . after obtaining the candidate subsequences , we finally perform the post - processing step@xcite to identify true ld - similar subsequences by accessing actual subsequences and eliminating false alarms .    let the window size be @xmath19 and the maximum / minimum query lengths be @xmath62 , @xmath63;divide @xmath7 into windows of size @xmath19 ;  //",
    "_ sliding _ windows for @xcite ; _ disjoint _ windows for dualmatch@xcite .",
    "window @xmath16 $ ] in @xmath7 * do *  make an @xmath22-dimensional mbr @xmath64 which is initially empty ;  * for each * query length @xmath65 $ ] * do *  * for each * subsequence @xmath12 $ ] of length @xmath66 that includes @xmath16 $ ] * do *  compute a trend line of @xmath12 $ ] based on the least square method ;  obtain the ld - window @xmath38}$ ] ; //",
    "linear detrending  transform @xmath38}$ ] to an @xmath22-dimensional point and include it into @xmath64 ;  * end - for *  * end - for *  make a record @xmath67@xmath64 , offset = @xmath60@xmath68 for @xmath16 $ ] , and store it into the index ;    let the window size be @xmath19 ; //",
    "@xmath19 is the same one used in algorithm [ alg : bi ] .",
    "obtain @xmath14 from @xmath6 by eliminating the linear trend ; divide @xmath14 into windows of size @xmath19 ;  // _ disjoint _",
    "windows for @xcite ; _ sliding _ windows for dualmatch@xcite .",
    "window @xmath61 * do *  transform @xmath61 to an @xmath22-dimensional point ; // lower - dimensional transformation  construct a range query using that point and @xmath69 ;  //",
    "@xmath56 is the number of included windows in @xmath6@xcite .",
    "evaluate the query on the index and find the record of the form @xmath67@xmath70@xmath68 ;  include in the candidate set the subsequences @xmath12 $ ] obtained from @xmath67@xmath70@xmath68 ; perform the post - processing step@xcite to eliminate false alarms ;",
    "we have performed experiments using three real data sets , which also used in the previous work@xcite .",
    "a data set consists of a long data sequence and has the same effect as the one consisting of multiple data sequences@xcite .",
    "the first data set contains electrocadiogram(ecg ) data , and we call this data set _ ecg - data_. the second data set shows tax growth rates , and we call this data set _ tax - data_. the third data set contains exchange rate data , and we call this data set _ exch - data_. the length of each data set is 100,000 , that is , each data set consists of 100,000 entries(time points ) .    in the experiment we have compared two matching solutions : ( 1 ) ldseqscan , a sequential scan solution presented in section 3.2 ; ( 2 ) an index - based matching solution proposed in section 3.3 . we have adopted the first subsequence matching solution of @xcite and implemented our index - based approach to that subsequence matching solution . for simplicity , we call this index - based solution ldindexmatch . we have performed two different experiments . in the first experiment we set the window size and the selectivity]@xcite to 256 and @xmath71 , respectively , and vary the query sequence length from 256 to 1024 . in the second experiment we set the window size and the query sequence length to 256 and 512 , respectively , and vary the selectivity from @xmath72 to @xmath73 .",
    "we obtain the desired selectivity by controlling the tolerance @xmath3@xcite . as the metric of efficiency , we measure the elapsed time of each solution .",
    "we generate query sequences from the data sequence by taking subsequences of length @xmath74 starting from random offsets@xcite . to avoid effects of noise , we experiments with 20 different query sequences of the same length and use their average as the result .",
    "the hardware platform was sun ultra 25 workstation equipped with ultrasparc iiii 1.34ghz cpu , 1.0 gb ram , and an 80 gb hard disk ; its software platform was solaris 10 .",
    "we used c / c++ language for implementing two matching solutions . in ldindexmatch , we used paa@xcite as the lower - dimensional transformation and extracted eight features from an window of size 256 .",
    "as the multidimensional index , we used the r@xmath21-tree@xcite for ldindexmatch .",
    "figure [ fig : query ] shows the results of the first experiment that uses different lengths of query sequences .",
    "we first note that , in figure [ fig : query](a ) of ecg - data , ldindexmatch significantly outperforms ldseqscan .",
    "this means that the notion of ld - windows works properly , and it prunes many unnecessary accesses on subsequences at the index level . as shown in figure [ fig : query](a ) , as the query sequence length decreases ,",
    "the performance difference between two solutions becomes larger .",
    "for example , compared with ldseqscan , ldindexmatch reduces the elapsed time by 38.0 times for the query sequence of length 1024 ; in contrast , it reduces the elapsed time by 1.60 times only for the query sequence of length 256 .",
    "this is explained by the _ window size effect_@xcite that the performance of index - based solutions decreases as the query sequence length on the given window size increases .",
    "we can solve this problem by using the _ index interpolation _",
    "technique@xcite which uses multiple indexes ( for multiple window sizes ) to obtain the better performance .",
    "figures [ fig : query](b ) and [ fig : query](c ) of tax - data and exch - data show the very similar trend with figure [ fig : query](a ) of ecg - data .",
    "it means that the proposed ldindexmatch exploits the pruning effect efficiently , regardless of data types . in summary of figure",
    "[ fig : query ] , our index - based solution , ldindexmatch , improves the overall performance by 1.57 to 38.0 times compared with the straightforward solution , ldseqscan .",
    "+    figure [ fig : tol ] shows the results of the second experiment that uses difference selectivities ( i.e. , different tolerances ) . as in figure [ fig : query ] , ldindexmatch also outperforms ldseqscan in all selectivity ranges of figure [ fig : tol ] .",
    "we note that , in figure [ fig : tol](a ) of ecg - data , the performance difference between ldindexmatch and ldseqscan increases as the selectivity decreases .",
    "this is because , as the selectivity decreases , the number of candidate subsequences also decreases .",
    "more precisely , as shown in lines 7 to 10 of algorithm 3 , the smaller selectivity incurs the smaller number of candidate subsequences at the index level , and this reduces the false alarms that cause the disk accesses and the expensive computations on the actual subsequences . as in figure [ fig : query ] , figures [ fig : tol](b ) and [ fig : tol](c ) of tax - data and exch - data show the very similar trend with figure [ fig : tol](a ) of ecg - data .",
    "figure [ fig : tol ] demonstrates that ldindexmatch beats ldseqscan in all selectivity ranges , and this means that ldindexmatch does not much depend on the selectivity values .",
    "in this paper we introduced a new problem of linear detrending subsequence matching and proposed an efficient index - based solution .",
    "contributions of the paper are summarized as follows .",
    "first , we formally defined the linear detrending subsequence matching and presented its sequential scan - based solution .",
    "second , we presented a novel notion of _ ld - windows _ , and using ld - windows we proposed an index - based solution .",
    "we here formally proved correctness of our index - based solution .",
    "third , we described the index - building and subsequence matching algorithms of the index - based solution .",
    "fourth , we showcased that , compared with the straightforward sequential scan , our index - based solution significantly improved the matching performance by one or two orders of magnitude .",
    "we believe that the linear detrending subsequence matching and its index - based solution will be very helpful to find meaningful time - series patterns hidden by the linear trend .",
    "this work was partially supported by defense acquisition program administration and agency for defense development under the contract . ( ud060048ad )",
    "99 agrawal , r. , faloutsos , c. , and swami , a. , `` efficient similarity search in sequence databases , '' in _ proc . of the 4th intl conf . on foundations of data organization and algorithms _ , chicago , illinois , pp .",
    "69 - 84 , oct . 1993 .",
    "barrena , m. , jurado , e. , marquez - neila , p. , and pachon , c. , `` a flexible framework to ease nearest neighbor search in multidimensional data spaces , '' _ data and knowledge engineering _ , vol .",
    "116 - 136 , jan .",
    "bu , y. , chen , l. , fu , a. w .- c . , and liu , d. , `` efficient anomaly monitoring over moving object trajectory streams , '' in _ proc . of the 15th intl conf .",
    "on knowledge discovery and data mining _ , acm sigkdd , paris , france , pp .",
    "159 - 168 , june 2009 .",
    "chan , k .-",
    ", fu , a. w .- c . , and yu , c. t. , `` haar wavelets for efficient similarity search of time - series : with and without time warping , '' _ ieee trans . on knowledge and data",
    "engineering _ , vol .",
    "3 , pp . 686 - 705 , jan./feb . 2003 .",
    "faloutsos , c. , ranganathan , m. , and manolopoulos , y. , `` fast subsequence matching in time - series databases , '' in _ proc . of intl conf . on management of data",
    "_ , acm sigmod , minneapolis , minnesota , pp .",
    "419 - 429 , may 1994 .",
    "han , w .- s . , lee , j. , moon , y .- s . , and",
    "jiang , h. , `` ranked subsequence matching in time - series databases , '' in _ proc .",
    "of the 33rd intl conf . on very large data bases",
    "_ , vienna , austria , pp .",
    "423 - 434 , sept . 2007 .",
    "lian , x. , chen , l. , yu , j. x. , han , j. , and ma , j. `` multiscale representations for fast pattern matching in stream time series , '' _ ieee trans . on knowledge and data engineering _ , vol .",
    "568 - 581 , apr . 2009 .",
    "loh , w .- k . ,",
    "kim , s .- w . , and whang ,",
    "k .- y . , `` a subsequence matching algorithm that supports normalization transform in time - series databases , '' _ data mining and knowledge discovery _ ,",
    "1 , pp . 5 - 28 , july 2004 .      moon , y .- s . , whang , k .- y . , and han , w .- s .",
    ", `` generalmatch : a subsequence matching method in time - series databases based on generalized windows , '' in _ proc . intl conf . on management of data",
    "_ , acm sigmod , madison , wisconsin , pp .",
    "382 - 393 , june 2002 .",
    "yi , b .- k . , jagadish , h. v. , and faloutsos , c. , `` efficient retrieval of similar time sequences under time warping , '' in _ proc . of the 14th ieee intl conf . on data",
    "engineering _ , orlando , florida , pp .",
    "201 - 208 , feb ."
  ],
  "abstract_text": [
    "<S> each time - series has its own linear trend , the directionality of a time - series , and removing the linear trend is crucial to get the more intuitive matching results . </S>",
    "<S> supporting the linear detrending in subsequence matching is a challenging problem due to a huge number of possible subsequences . in this paper </S>",
    "<S> we define this problem the _ linear detrending subsequence matching _ and propose its efficient _ index - based _ solution . to this end </S>",
    "<S> , we first present a notion of _ ld - windows_(ld means linear detrending ) , which is obtained as follows : we eliminate the linear trend from a subsequence rather than each window itself and obtain ld - windows by dividing the subsequence into windows . using the ld - windows </S>",
    "<S> we then present a lower bounding theorem for the index - based matching solution and formally prove its correctness . </S>",
    "<S> based on the lower bounding theorem , we next propose the index building and subsequence matching algorithms for linear detrending subsequence matching . </S>",
    "<S> we finally show the superiority of our index - based solution through extensive experiments .    </S>",
    "<S> mining , time - series databases , similar sequence matching , linear detrending , subsequence matching </S>"
  ]
}