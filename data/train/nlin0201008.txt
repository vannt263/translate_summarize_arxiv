{
  "article_text": [
    "the appearance of solitary wave solutions in nature is quite common .",
    "bell shaped sech - solutions and kink shaped tanh - solutions model wave phenomena in fluids , plasmas , elastic media , electrical circuits , optical fibers , chemical reactions , bio - genetics , etc .",
    "the travelling wave solutions of the korteweg - de vries ( kdv ) and boussinesq equations , which describe water waves , are famous examples .",
    "apart from their physical relevance , the knowledge of closed - form solutions of nonlinear ordinary and partial differential equations ( odes and pdes ) facilitates the testing of numerical solvers , and aids in the stability analysis .",
    "indeed , the exact solutions given in this paper correspond to homoclinic and heteroclinic orbits in phase space , which are the separatrices of stable and unstable regions .    travelling wave solutions of many nonlinear odes and pdes from soliton theory ( and beyond ) can often be expressed as polynomials of the hyperbolic tangent and secant functions .",
    "an explanation is given in , for example , hereman and takaoka ( 1990 ) .",
    "the existence of solitary wave solutions of evolution equations is addressed in kichenassamy and olver ( 1993 ) .",
    "the tanh - method provides a straightforward algorithm to compute such particular solutions for a large class of nonlinear pdes .",
    "consult malfliet ( 1992 , 2003 ) , malfliet and hereman ( 1996 ) , and das and sarma ( 1999 ) for a multitude of references to tanh - based techniques and applications .",
    "the tanh - method for , say , a single pde in @xmath0 works as follows : in a travelling frame of reference , @xmath1 one transforms the pde into an ode in the new independent variable @xmath2 since the derivative of @xmath3 is polynomial in @xmath4 i.e. , @xmath5 all derivatives of @xmath6 are polynomials of @xmath7 via a chain rule , the polynomial pde in @xmath0 is transformed into an ode in @xmath8 which has polynomial coefficients in @xmath6 .",
    "one then seeks polynomial solutions of the ode , thus generating a subset of the set of all solutions .    along the path ,",
    "one encounters odes which are nonlinear , higher - order versions of the ultraspherical differential equation , @xmath9 with integer @xmath10 and @xmath11 real , whose solutions are the gegenbauer polynomials .",
    "( [ ultraspherical ] ) includes the legendre equation @xmath12 satisfied by the legendre polynomials , and the odes for chebeyshev polynomials of type i @xmath13 and type ii @xmath14 likewise , the associated legendre equation , @xmath15 y(x ) = 0,\\ ] ] with @xmath16 and @xmath17 non - negative integers , appears in solving the sturm - liouville problem for the kdv with a sech - square potential ( see drazin and johnson , 1989 ) .",
    "the appeal and success of the tanh - method lies in the fact that one circumvents integration to get explicit solutions .",
    "variants of the method appear in mathematical physics , plasma physics , and fluid dynamics .",
    "for early references see e.g.  malfliet , 1992 ; yang , 1994 ; and das and sarma , 1999 .",
    "recently , the tanh - methods have been applied to many nonlinear pdes in multiple independent variables ( see fan , 2002abc , 2003abc ; fan and hon , 2002 , 2003ab ; gao and tian , 2001 ; li and liu , 2002 ; yao and li , 2002ab ) .    in this paper",
    "we present three flavors of tanh- and sech - methods as they apply to nonlinear polynomial systems of odes and pdes .",
    "based on the strategy of the tanh - method , we also present algorithms to compute polynomial solutions in terms of the jacobi @xmath18 and @xmath19 functions . applied to the kdv equation , the so - called cnoidal solution ( drazin and johnson , 1989 ) is obtained . for duffing s equation ( lawden , 1989 ) ,",
    "we recover known @xmath18 and cn - solutions which model vibrations of a nonlinear spring .",
    "sn- and cn - methods are quite effective for symbolically solving nonlinear pdes as shown in fu _",
    "( 2001 ) , parkes _",
    "( 2002 ) , liu and li ( 2002ab ) , fan and zhang ( 2002 ) , fan ( 2003abc ) , chen and zhang ( 2003ab ) , and yan ( 2003 ) .",
    "we also present our package , ` pdespecialsolutions.m ` ( baldwin _ et al .",
    "_ , 2001 ) in _ mathematica _ , which implements the five methods .",
    "without intervention by the user , our software computes travelling wave solutions as polynomials in either @xmath20 , @xmath21 combinations thereof , @xmath22 , or @xmath23 with @xmath24 the coefficients of the spatial coordinates are the components of the wave vector ; the time coefficient is the angular frequency of the wave .",
    "the wave travels in the direction of the wave vector ; its plane wave front is perpendicular to that wave vector .",
    "@xmath25 is the constant phase . for systems of odes or pdes with constant parameters",
    ", the software automatically determines the conditions on the parameters so that the equations might admit polynomial solutions in @xmath26 both , @xmath18 or @xmath27    parkes and duffy ( 1996 ) mention the difficulty of using the tanh - method by hand for anything but simple pdes .",
    "therefore , they automated to some degree the tanh - method using _",
    "mathematica_. their code atfm carries out some ( but not all ) steps of the method .",
    "( 1998 ) also considered solutions to ( odd - order generalized kdv ) equations in even powers of @xmath28 the code atfm does not cover solutions involving odd powers of @xmath28 recently , parkes _",
    "( 2002 ) extended their methods to cover the jacobi elliptic functions .",
    "( 2002 ) produced the function seriessn to partially automate the elliptic function method .",
    "li and liu ( 2002 ) designed the _ maple _",
    "package rath to automate the tanh - method . in liu and li ( 2002a )",
    "they announce their _ maple _ code ajfm for the jacobi elliptic function method . in section  [ reviewsoftware ]",
    "we review the codes atfm , rath , ajfm , and seriessn and compare them with pdespecialsolutions.m .",
    "the paper is organized as follows : in sections  [ tanhmethodpdes ] and  [ sechmethodpdes ] , we give the main steps of the algorithms for computing tanh- and sech - solutions of nonlinear polynomial pdes .",
    "we restrict ourselves to polynomial solutions in either @xmath3 or @xmath28 the boussinesq equation and hirota - satsuma system of coupled kdv equations illustrate the steps . for references to both equations",
    "see e.g.  ablowitz and clarkson ( 1991 ) . in section  [ sechtanhmethodpdes ]",
    "we consider a broader class of polynomial solutions involving both @xmath3 and @xmath28 the tanh - sech algorithm is used to solve a system of pdes due to gao and tian ( 2001 ) . in section  [ cnmethodpdes ]",
    "we show how modifying the chain rule allows us to find polynomial solutions in cn and sn .",
    "the kdv equation is used to illustrates the steps . in section  [ algorithms ]",
    "we give details of the algorithms to compute the highest - degree of the polynomials , to analyze and solve nonlinear algebraic systems with parameters , and to numerically and symbolically test solutions .",
    "the coupled kdv equations illustrate the subtleties of these algorithms . in section  [ examplespdes ] we present exact solutions for several nonlinear odes and pdes . in section  [ relatedalgossoftware ]",
    "we address other perspectives and extensions of the algorithms , and review related software packages .",
    "we discuss the results and draw some conclusions in section  [ conclusions ] .",
    "the use of the package pdespecialsolutions.m is shown in appendix a.",
    "in this section we outline the tanh - method ( malfliet and hereman , 1996 ) for the computation of closed - form @xmath3-solutions for nonlinear pdes ( and odes ) .",
    "each of the five main steps of our algorithm is illustrated for the boussinesq equation .",
    "details of steps t2 , t4 and t5 are postponed to section  [ algorithms ] .",
    "given is a system of polynomial pdes with constant coefficients , @xmath29 where the dependent variable @xmath30 has @xmath31 components @xmath32 the independent variable @xmath33 has @xmath34 components @xmath35 and @xmath36 denotes the collection of mixed derivative terms of order @xmath37 lower - case greek letters will denote parameters in ( [ originalsystempdes ] ) .    for notational simplicity , in section  [ examplespdes ] we will use dependent variables @xmath38 etc .  and independent variables @xmath39 and @xmath40 * example : * the classical boussinesq equation , @xmath41 with real parameter @xmath42 was proposed by boussinesq to describe surface water waves whose horizontal scale is much larger than the depth of the water ( ablowitz and clarkson , 1991 ) . variants of ( [ orgboussinesq ] ) were recently solved by fan and hon ( 2003a ) .",
    "while one could apply the tanh - method directly to ( [ orgboussinesq ] ) , we recast it as a first order system in time to show the method for a simple system of pdes .",
    "so ,    [ boussinesq ] & & u_1,x_2 + u_2,x_1 = 0 , + & & u_2,x_2 + u_1,x_1 - 3 u_1 u_1,x_1 - u_1,3 x_1 = 0 ,    where @xmath43 and @xmath44 we use @xmath45 through out this paper .    * step t1:@xmath46transform the pde into a nonlinear ode * we seek solutions in the travelling frame of reference , @xmath47 where @xmath48 and @xmath25 are constant .",
    "the tanh - method seeks polynomial solutions expressible in the hyperbolic tangent , @xmath2 based on the identity @xmath49 one computes    [ tanhderivative ] ^&= & ^2= 1-^2 , + ^&= & -2 + 2 ^3 ,    therefore , the first and , consequently , all higher - order derivatives are polynomials in @xmath7 since @xmath50 repeatedly applying the chain rule , @xmath51 transforms the system of pdes into a coupled system of nonlinear odes , @xmath52 with @xmath53 each component of @xmath54 is a nonlinear ode with polynomial coefficients in @xmath7 * example : * substituting    [ derivativesxitanhpdes ] u_i , x_j & = & c_j ( 1-t^2 ) u_i^ , + u_i , 2x_j & = & c_j^2 ( 1-t^2 ) ^ = c_j^2 ( 1-t^2 ) [ -2 t u_i^ + ( 1-t^2 ) u_i^ ] , + u_i , 3x_j & = & c_j^3 ( 1-t^2 ) ^ + & = & c_j^3 ( 1-t^2 ) ,    into ( [ boussinesq ] ) , and cancelling common @xmath55 factors , yields    [ boussinesqlegendre ] & & c_2 u_1^+c_1 u_2^=0 , + & & c_2 u_2^+c_1u_1 ^ -3c_1u_1u_1^ + c_1 ^ 3 = 0 ,    where @xmath56 and @xmath57 * step t2:@xmath46determine the degree of the polynomial solutions * seeking polynomial solutions of the form @xmath58 we must determine the leading exponents @xmath59 before the @xmath60 can be computed .",
    "we assume that @xmath61 to avoid trivial solutions . substituting @xmath62 into ( [ legendretypetanhpdes ] )",
    ", the coefficients of every power of @xmath6 in every equation must vanish .",
    "in particular , the highest degree terms must vanish .",
    "since the highest degree terms depend only on @xmath63 in ( [ polynomialsolutiontanhpdes ] ) , it suffices to substitute @xmath64 into the left hand side of ( [ legendretypetanhpdes ] ) . in the resulting polynomial system @xmath65 equating every two possible highest exponents in every component @xmath66 gives a linear system for the @xmath67 that linear system is then solved .",
    "if one or more exponents @xmath59 remain undetermined , assign an integer value to the free @xmath59 so that every equation in ( [ legendretypetanhpdes ] ) has at least two different terms with equal highest exponents .",
    "carry each solution to step t3 .",
    "* example : * for the boussinesq system , substituting @xmath68 and @xmath69 into ( [ boussinesqlegendre ] ) , and equating the highest exponents of @xmath6 for each equation , gives @xmath70 then , @xmath71 and @xmath72 .005pt * step t3:@xmath46derive the algebraic system for the coefficients @xmath60 * to generate the system for the unknown coefficients @xmath60 and wave parameters @xmath48 , substitute ( [ polynomialsolutiontanhpdes ] ) into ( [ legendretypetanhpdes ] ) and set the coefficients of @xmath73 to zero . the resulting nonlinear algebraic system for the unknowns @xmath60 is parameterized by the @xmath74 and the external parameters ( in lower - case greek letters ) of system ( [ originalsystempdes ] ) , if any . * example : * continuing with the boussinesq system , after substituting ( [ boussinesqpols ] ) into ( [ boussinesqlegendre ] ) , and collecting the terms of like degree in @xmath75 we get ( in order of complexity ) :    [ boussinesqalgsys ] a_21 c_1 + a_11 c_2 & = & 0 , + a_22 c_1 + a_12 c_2 & = & 0 , + a_11 c_1 ( 3 a_12 + 2 c_1 ^ 2 ) & = & 0 , + a_12 c_1 ( a_12 + 4 c_1 ^ 2 ) & = & 0 , + a_11 c_1 - 3 a_10 a_11 c_1 + 2 a_11 c_1 ^ 3 + a_21 c_2 & = & 0 , + -3 a_11 ^ 2 c_1 + 2 a_12 c_1 -6 a_10 a_12 c_1 + 16 a_12 c_1 ^ 3 + 2 a_22 c_2 & = & 0 ,    with unknowns @xmath76 and parameters @xmath77 and @xmath78 * step t4:@xmath46solve the nonlinear parameterized algebraic system * the most difficult step is solving the nonlinear algebraic system .",
    "to do so , we designed a customized , yet powerful , nonlinear solver ( see section  [ analyzeandsolve ] for details ) .",
    "the nonlinear algebraic system is solved with the following assumptions : 0.50pt ( i ) all parameters , @xmath79 etc .",
    ", in ( [ originalsystempdes ] ) are strictly positive .",
    "vanishing parameters may change the exponents @xmath59 in step t2 . to compute solutions corresponding to negative parameters , reverse the signs of the parameters in the pde .",
    "for example , replace @xmath11 by @xmath80 in ( [ orgboussinesq ] ) .",
    "( ii ) the coefficients of the highest power terms @xmath81 in ( [ polynomialsolutiontanhpdes ] ) are all nonzero ( for consistency with step t2 ) .",
    "( iii ) all @xmath48 are nonzero ( demanded by the physical nature of the solutions ) .",
    "* example : * assuming @xmath82 and @xmath11 nonzero , the solution of ( [ boussinesqalgsys ] ) is    [ boussinesqalgsol ] a_10 & = & ( c_1 ^ 2 -c_2 ^ 2 + 8 c_1 ^ 4)/(3 c_1 ^ 2 ) , a_11 = 0 , a_12 = - 4 c_1 ^ 2 , + a_20 & = & arbitrary , a_21 = 0 , a_22 = 4 c_1 c_2",
    ".    in this case , there are no conditions on the parameters @xmath83 and @xmath78 * step t5:@xmath46build and test the solitary wave solutions * substitute the solutions obtained in step t4 into ( [ polynomialsolutiontanhpdes ] ) and reverse step t1 to obtain the explicit solutions in the original variables .",
    "it is prudent to test the solutions by substituting them into ( [ originalsystempdes ] ) . for details about testing see section  [ testing ] .",
    "* example : * inserting ( [ boussinesqalgsol ] ) into ( [ boussinesqpols ] ) , and replacing @xmath84 the closed form solution for ( [ boussinesq ] ) ( or ( [ orgboussinesq ] ) ) is    [ boussinesqtanhsolution ] u(x , t ) & = & u_1(x , t ) = ( c_1 ^ 2 - c_2 ^ 2 + 8 c_1 ^ 4)/(3 c_1 ^ 2 )",
    "- 4 c_1 ^ 2 ^2(c_1 x + c_2 t + ) , + u_2(x , t ) & = & - u_1,t(x , t ) dx = a_20 + 4 c_1 c_2 ^2(c_1 x + c_2 t + ) ,    where @xmath85 and @xmath25 are arbitrary . steps t1-t5 must be repeated if one or more of the external parameters ( lower - case greeks ) are set to zero .",
    "in this section we restrict ourselves to polynomial solutions of ( [ originalsystempdes ] ) in @xmath28 polynomial solutions involving both @xmath86 and @xmath3 are dealt with in section  [ sechtanhmethodpdes ] .",
    "details of the algorithms for steps s2 , s4 and s5 are in section  [ algorithms ] .    using @xmath87 solution ( [ boussinesqtanhsolution ] ) of ( [ boussinesq ] ) can be expressed as    [ boussinesqsechsolution ] u_1(x , t ) & = & ( c_1 ^ 2 - c_2 ^ 2 - 4 c_1 ^ 4)/(3 c_1 ^ 2 ) + 4 c_1 ^ 2 ^2(c_1 x + c_2 t + ) , + u_2(x , t ) & = & a_20 + 4 c_1 c_2 - 4 c_1 c_2 ^2(c_1 x + c_2 t + ) .",
    "obviously , any even order solution in @xmath3 can be written in even orders of @xmath28 some pdes however have polynomial solutions of odd - order in @xmath28 for example , the modified kdv equation ( ablowitz and clarkson , 1991 ) , @xmath88 has the solution @xmath89 which can not be found using the tanh - method .",
    "* example : * the five main steps of the @xmath86-algorithm are illustrated with the hirota - satsuma system of coupled kdv equations ( ablowitz and clarkson , 1991 ) ,    [ orgckdv ] & & u_t - ( 6 u u_x + u_xxx ) + 2 v v_x = 0 , + & & v_t + 3 u v_x + v_xxx = 0 ,    with real parameters @xmath90 sech - type solutions were reported in hereman ( 1991 ) and fan and hon ( 2002 ) .",
    "variants and generalizations of ( [ orgckdv ] ) were solved in chen and zhang ( 2003a ) and yan ( 2003 ) .",
    "letting @xmath91 and @xmath92 eq .  ( [ orgckdv ] ) is then    [ ckdv ] & & u_1,x_2 - ( 6 u_1 u_1,x_1 + u_1,3x_1 ) + 2 u_2 u_2,x_1 = 0 , + & & u_2,x_2 + 3 u_1",
    "u_2,x_1 + u_2,3x_1 = 0 .",
    ".005pt * step s1:@xmath46transform the pde into a nonlinear ode * adhering to the travelling frame of reference ( [ framepde ] ) , and using @xmath93 @xmath94 setting @xmath95 and repeatedly applying the chain rule , @xmath96 ( [ originalsystempdes ] ) is transformed into a system of nonlinear odes of the form : @xmath97 where @xmath98 and all components of @xmath99 and @xmath100 are odes with polynomial coefficients in @xmath101 if either @xmath99 or @xmath100 is identically @xmath102 then @xmath103 where @xmath54 is either @xmath99 or @xmath104 whichever is nonzero . for this to occur , the order of all terms in any equation in ( [ originalsystempdes ] ) must be even or odd ( as is the case in ( [ ckdv ] ) ) .    any term in ( [ originalsystempdes ] ) for which the total number of derivatives is even contributes to the first term in ( [ generaltypesech ] ) ; while any term of odd order contributes to the second term . section  [ sechtanhmethodpdes ] deals with any case for which neither @xmath99 or @xmath100 is identically @xmath105 * example : * substituting    [ derivativesxisechpdes ] u_i , x_j & = & - c_j s u_i^ , + u_i , x_j x_k & = & c_j c_k s ^ + & = & c_j c_k s [ ( 1 - 2 s^2 ) u_i^ + s ( 1-s^2 ) u_i^ ] , + u_i , x_j x_k x_l & = & -c_j c_k c_l s ^ + & = & -c_j c_k c_l s ,    into ( [ ckdv ] ) , and cancelling the common @xmath106 factors yields    [ ckdvlegendre ] & & c_2 u_1 ^",
    "-6c_1 u_1 u_1 ^ -c_1 ^ 3 + 2c_1 u_2 u_2^=0 , + & & c_2 u_2^+3c_1 u_1 u_2^ + c_1 ^ 3 = 0 ,    with @xmath56 and @xmath57 note that ( [ ckdvlegendre ] ) matches ( [ legendretypesech ] ) with @xmath107 since @xmath108 * step s2:@xmath46determine the degree of the polynomial solutions * we seek polynomial solutions of the form , @xmath109 to determine the @xmath59 exponents , substitute @xmath110 into the left hand side of ( [ legendretypesech ] ) and proceed as in step t2 .",
    "continue with step s3 for each solution of @xmath67 if some of the @xmath59 exponents are undetermined , try all legitimate values for the free @xmath67 see section  [ msolve ] for more details .",
    "* example : * for ( [ ckdv ] ) , substituting @xmath111 into ( [ ckdvlegendre ] ) and equating the highest exponents in the second equation yields @xmath112 or @xmath113 the maximal exponents coming from the first equation are @xmath114 ( from the @xmath115 term ) , @xmath116 ( from @xmath117 and @xmath118 ( from @xmath119 using @xmath120 two cases emerge : ( i ) the third exponent is less than the first two ( equal ) exponents , i.e. , @xmath121 so @xmath122 or ( ii ) all three exponents are equal , in which case @xmath123 for the case @xmath124 and @xmath122 @xmath125 and , for the case @xmath71 @xmath126 * step s3:@xmath46derive the algebraic system for the coefficients @xmath60 * follow the strategy in step t3 .",
    "* example : * after substituting ( [ ckdvchoice1 ] ) into ( [ ckdvlegendre ] ) , cancelling common numerical factors , and organizing the equations ( according to complexity ) one obtains    [ ckdvalgsys1 ] a_11 a_21 c_1 & = & 0 , + a_11 c_1 ( 3 a_12 - c_1 ^ 2 ) & = & 0 , + a_12 c_1 ( a_12 - 2 c_1 ^ 2 ) & = & 0 , + a_21 c_1 ( a_12 - 2 c_1 ^ 2 ) & = & 0 , + a_21 ( 3 a_10 c_1 + c_1 ^ 3 + c_2 ) & = & 0 , + 6 a_10 a_11 c_1 - 2 a_20 a_21 c_1 + a_11 c_1 ^ 3 - a_12 c_2 & = & 0 , + 3 a_11 ^ 2 c_1 + 6 a_10 a_12 c_1 - a_21 ^ 2 c_1 + 4 a_12 c_1 ^ 3 - a_12 c_2 & = & 0 .",
    "similarly , after substitution of ( [ ckdvchoice2 ] ) into ( [ ckdvlegendre ] ) , one gets @xmath127",
    "@xmath128 .005pt * step s4:@xmath46solve the nonlinear parameterized algebraic system * similar strategy as in step t4 .",
    "* example : * for @xmath129 and @xmath130 all nonzero , the solution of ( [ ckdvalgsys1 ] ) is    [ ckdvalgsol1 ] a_10 & = & -(c_1 ^ 3 + c_2)/(3 c_1 ) , a_11 = 0 , a_12 = 2 c_1 ^ 2 , + a_20 & = & 0 , a_21 = .    for @xmath129 and @xmath131 nonzero ,",
    "the solution of ( [ ckdvalgsys2 ] ) is    [ ckdvalgsol2 ] a_10 & = & -(4 c_1 ^ 3 + c_2)/(3 c_1 ) , a_11 = 0 , a_12 = 4 c_1 ^ 2 , + a_20 & = & ( 4c_1 ^ 3 + ( 1 + 2)c_2)/(c_1 ) , a_21 = 0 , a_22 = 2 c_1 ^ 2 .    * step s5:@xmath46build and test the solitary wave solutions * substitute the result of step s4 into ( [ polynomialsolutionsechpdes ] ) and reverse step s1 .",
    "test the solutions . *",
    "example : * the solitary wave solutions of ( [ ckdv ] ) are    [ ckdvsechsol1 ] u(x , t ) & = & -(c_1 ^ 3 + c_2)/(3 c_1 ) + 2 c_1 ^ 2 ^2(c_1 x + c_2 t + ) , + v(x , t ) & = & ( c_1 x + c_2 t + ) ,    and    [ ckdvsechsol2 ] u(x , t ) & = & -(4 c_1 ^ 3 + c_2)/(3 c_1 ) + 4 c_1 ^ 2 ^2(c_1 x + c_2 t + ) , + v(x , t ) & = & ( 4c_1 ^ 3+(1 + 2)c_2)/(c_1 ) 2 c_1 ^ 2 ^2(c_1 x+c_2 t+ ) .    in both cases @xmath132 and @xmath25 are arbitrary .",
    "these solutions contain the solutions reported in hereman ( 1991 ) .",
    "steps s1-s5 must be repeated if any of the parameters in ( [ originalsystempdes ] ) are set to zero .",
    "the five main steps of our algorithm to compute mixed tanh - sech solutions for ( [ originalsystempdes ] ) are presented below . here",
    "we seek particular solutions of ( [ generaltypesech ] ) when @xmath133 and @xmath134 on could apply the method of section  [ sechmethodpdes ] to ( [ generaltypesech ] ) in ` squared ' form @xmath135 for anything but simple cases , the computations are unwieldy .",
    "alternatively , since @xmath136 eq .",
    "( [ generaltypesech ] ) may admit solutions of the form @xmath137 however , ( [ generalsolutionsechtanhpdes ] ) can always be rearranged such that @xmath138 the polynomial solutions in @xmath139 from section  [ sechmethodpdes ] are special cases of this broader class .",
    "remarkably , ( [ legendretypesech ] ) where @xmath140 is not explicitly present also admits solutions of the form ( [ polynomialsolutionsechtanhpdes ] ) .",
    "see section  [ kdvmkdvexample ] for an example .",
    "computing solutions of type ( [ polynomialsolutionsechpdes ] ) with the tanh - sech method is inefficient and costly , as the following example and the examples in sections  [ completelyintegrable ] and  [ kdvmkdvexample ] show .",
    "* example : * we illustrate this algorithm with the system ( gao and tian , 2001 ) :    [ orgthreeeqs ] & & u_t - u_x - 2 v = 0 , + & & v_t + 2 u w = 0 , + & & w_t + 2 u v = 0 .",
    ".005pt * step st1:@xmath46transform the pde into a nonlinear ode * same as step s1 .",
    "* example : * use ( [ chainrulesechpde ] ) to transform ( [ orgthreeeqs ] ) into    [ threeeqslegendre ] & & ( c_1 - c_2 ) s u_1^ - 2 u_2 = 0 , + & & c_2 s u_2^ - 2 u_1 u_3 = 0 , + & & c_2 s u_3^ - 2 u_1 u_2 = 0 .",
    "with @xmath141 * step st2:@xmath46determine the degree of the polynomial solutions * seeking solutions of form ( [ polynomialsolutionsechtanhpdes ] ) , we must first determine the leading @xmath59 and @xmath142 exponents .",
    "substituting @xmath143 into the left hand side of ( [ generaltypesech ] ) , we get an expression of the form @xmath144 where @xmath145 and @xmath146 are polynomials in @xmath101    consider separately the possible balances of highest exponents in all @xmath66 and @xmath147 then solve the resulting linear system(s ) for the unknowns @xmath59 and @xmath148 continue with each solution in step st3 .",
    "in contrast to step s2 , we no longer assume @xmath149 even with some @xmath59 or @xmath142 zero , non - constant solutions @xmath150 often arise .",
    "in most examples , however , the sets of balance equations for @xmath59 and @xmath142 are too large or the corresponding linear systems are under - determined ( i.e. , several leading exponents remain arbitrary ) . to circumvent the problem , we set all @xmath151 and all @xmath152 restricting the solutions to ( at most ) quadratic in @xmath139 and @xmath7 * example : * for ( [ threeeqslegendre ] ) , we set all @xmath153 and continue with @xmath154 .05pt * step st3:@xmath46derive the algebraic system for the coefficients @xmath60 and @xmath155 * substituting ( [ polynomialsolutionsechtanhpdes ] ) into ( [ generaltypesech ] ) gives @xmath156 which must vanish identically .",
    "hence , equate to zero the coefficients of the power terms in @xmath139 so that @xmath157 and @xmath158 * example : * after substitution of ( [ threeeqspols ] ) into ( [ threeeqslegendre ] ) , the resulting nonlinear algebraic system for the coefficients @xmath60 and @xmath155 contains 25 equations ( not shown ) .",
    "* step st4:@xmath46solve the nonlinear parameterized algebraic system * in contrast to step s4 we no longer assume that @xmath159 and @xmath160 are nonzero ( at the cost of generating some constant solutions , which we discard later ) .",
    "* example : * for ( [ orgthreeeqs ] ) , there are 11 solutions .",
    "three are trivial , leading to constant @xmath161 eight are nontrivial solutions giving the results below .",
    "* step st5:@xmath46build and test the solitary wave solutions * proceed as in step s5 .",
    "* example : * the solitary wave solutions of ( [ orgthreeeqs ] ) are :    [ threeeqssolution1 ] u(x , t ) & = & c_2 , + v(x , t ) & = & c_2 ( c_1 - c_2 ) ^2 , + w(x , t ) & = & - c_2 ( c_1 - c_2 ) ^2 ,    which could have been obtained with the tanh - method of section  [ tanhmethodpdes ] ;    [ threeeqssolution2 ] u(x , t ) & = & i c_2 , + v(x , t ) & = & i c_2 ( c_1 - c_2 ) , + w(x , t ) & = & c_2 ( c_1 - c_2 ) ( 1 - 2 ^2 ) ,    reported in gao and tian ( 2001 ) ; and the two complex solutions    [ threeeqssolution3 ] u(x , t ) & = & i c_2 ( i ) , + v(x , t ) & = & c_2 ( c_1 - c_2 ) ( i ) , + w(x , t ) & = & - c_2 ( c_1 - c_2 ) ( i ) .    in all solutions",
    "@xmath1 with @xmath83 and @xmath25 arbitrary .",
    "the complex conjugates of ( [ threeeqssolution3 ] ) are also solutions .",
    "in this section we give the main steps ( labelled - ) of our algorithm to compute polynomial solutions of ( [ originalsystempdes ] ) in terms of jacobi s elliptic cosine function ( cn ) .",
    "modifications needed for solutions involving the @xmath18 function are given at the end of this section .",
    "details for steps , and are shown in section  [ algorithms ] .",
    "* example : * consider the kdv equation ( ablowitz and clarkson , 1991 ) , @xmath162 with real constant @xmath78 the kdv equation models , among other things , waves in shallow water and ion - acoustic waves in plasmas .",
    "* step cn1:@xmath46transform the pde into a nonlinear ode * similar to the strategy in t1 and s1 , using ( lawden , 1989 ) @xmath163 and @xmath164 one has @xmath165 where @xmath166 is the jacobi elliptic cosine with argument @xmath167 and modulus @xmath168 .    repeatedly applying the chain rule @xmath169 system ( [ originalsystempdes ] )",
    "is transformed into a nonlinear ode system .",
    "in addition to the @xmath74 the algorithm introduces @xmath16 as an extra parameter .",
    "* example : * using ( [ chainrulecnpde ] ) to transform ( [ orgkdv ] ) we have @xmath170 * step cn2:@xmath46determine the degree of the polynomial solutions * follow the strategy in step t2 .",
    "* example : * for ( [ orgkdv ] ) , substituting @xmath171 into ( [ kdvcnode ] ) and equating the highest exponents gives @xmath172 then , @xmath120 and @xmath173 0.005pt * step cn3:@xmath46derive the algebraic system for the coefficients @xmath60 * proceed as in step t3 .",
    "* example : * for ( [ orgkdv ] ) , after substituting ( [ kdvcnpols ] ) into ( [ kdvcnode ] ) , one finds    [ kdvcnsystem ] a_11c_1(a_12 - 2mc_1 ^ 2 ) & = & 0 , + a_12c_1(a_12 - 12mc_1 ^ 2 ) & = & 0 , + a_11(a_10c_1 - c_1 ^ 3 + 2mc_1 ^ 3 + c_2 ) & = & 0 , + a_11 ^ 2c_1 + a_12 ( 2a_10 c_1 - 16 m c_1 ^ 3 - 8 c_1 ^ 3 + 2 c_2 ) & = & 0 .    0.005pt * step cn4:@xmath46solve the nonlinear parameterized algebraic system * solve the system as in step t4 .",
    "* example : * for @xmath174 and @xmath175 nonzero , the solution of ( [ kdvcnsystem ] ) is @xmath176 / ( \\alpha \\,c_1 ) , \\ ; a_{11 }   =   0 , \\ ; a_{12 }   =   ( 12 \\,m \\ , c_1 ^ 2)/ \\alpha.\\ ] ] 0.005pt * step cn5:@xmath46build and test the solitary wave solutions * substitute the results of step cn4 into ( [ kdvcnpols ] ) .",
    "reverse step cn1 .",
    "test the solutions .",
    "* example : * the cnoidal wave solution of ( [ orgkdv ] ) is @xmath177}/{(\\alpha c_1 ) } + { ( 12 m\\ ,",
    "c_1 ^ 2)}/{(\\alpha ) } \\ , { \\cn}^2(c_1 x + c_2 t + \\delta ; m ) ,    \\label{kdvcnsoln}\\ ] ] where @xmath178 and modulus @xmath16 are arbitrary .",
    "if any of the parameters in ( [ originalsystempdes ] ) are zero , steps cn1-cn5 should be repeated .",
    "* computation of solutions involving sn * to find solutions in terms of jacobi s @xmath18 function , one uses the identities ,    [ dncnidentity2 ] & & ^2(;m ) = 1 - ^2(;m ) , ^2(;m ) = 1 - m ^2(;m ) , + & & ^(;m ) = ( ; m ) ( ; m ) .    then , @xmath179 where @xmath180 is the jacobi elliptic sine with argument @xmath167 and modulus @xmath181 the steps are identical to the @xmath19 case , except one uses the chain rule @xmath182 since ( [ chainrulecnpde ] ) and ( [ chainrulesnpde ] ) involve roots , as in sections  [ sechmethodpdes ] and  [ sechtanhmethodpdes ] there is no reason to restrict the solutions to polynomials in only @xmath19 or @xmath183 solutions involving both @xmath18 and @xmath19 ( or combinations with @xmath184 ) are beyond the scope of this paper .    finally ,",
    "from the @xmath18 and @xmath19 solutions , @xmath185 and tanh - solutions can be obtained by taking the appropriate limits for the modulus @xmath186 and @xmath187 indeed , @xmath188 no need to compute solutions in @xmath184 explicitly since @xmath189",
    "in this section we present in a uniform manner the details of steps two , four and five of the algorithms in sections  [ tanhmethodpdes]-[cnmethodpdes ] .      0.001pt",
    "* step m1:@xmath46substitute the leading - order ansatz * a tracking variable is attached to each term in the original system of pdes .",
    "let ` tr[i ] ` denote the tracking variable of the @xmath190th term in ( [ originalsystempdes ] ) .",
    "the first step of the main algorithms leads to a system of parameterized odes in @xmath191 these odes match the form @xmath192 where @xmath193 is either @xmath194 , or , and @xmath195 is defined in table [ tbl : r(f ) ] . 0.001pt",
    "@xmath196    0.0001pt since the highest degree term only depends on @xmath197 it suffices to substitute @xmath198 into ( [ pqf ] ) .",
    "we use the coupled kdv equations ( [ orgckdv ] ) as our leading example :    [ ckdv : repckdv ] ` tr[1 ] ` u_t - 6 ` tr[2 ] ` u u_x + 2 ` tr[3 ] ` v v_x - ` tr[4 ] ` u_xxx & = & 0 , + ` tr[5 ] ` v_t + 3 ` tr[6 ] ` u v_x + ` tr[7 ] ` v_xxx & = & 0 .",
    "step s1 resulted in ( [ ckdvlegendre ] ) with @xmath199 . substituting ( [ ansatz ] ) into ( [ ckdv : repckdv ] ) , we get    [ ckdv : ansatz ] & & ( ` tr[1 ] ` c_2 m_1 - ` tr[4 ] ` c_1 ^ 3 m_1 ^ 3 ) s^m_1 - 1 + ` tr[4 ] ` c_1 ^ 3 m_1 ( m_1 + 1 ) ( m_1 + 2 ) s^m_1 + 1 + & & - 6 ` tr[2 ] ` c_1 m_1 s^2m_1 - 1 + 2 ` tr[3 ] ` c_1 m_2 s^2 m_2 - 1 = 0 , + & & ( ` tr[5 ] ` c_2 m_2 + ` tr[7 ] ` c_1 ^ 3 m_2 ^ 3 ) s^m_2 - 1 - ` tr[7 ] ` c_1 ^ 3 m_2 ( m_2 + 1 ) ( m_2 + 2 ) s^m_2 + 1 + & & + 3 ` tr[6 ] ` c_1 m_2 s^m_1 + m_2 - 1 = 0 .    0.001pt * step m2:@xmath46collect exponents and prune sub - dominant branches * the balance of highest exponents must come from different terms in ( [ originalsystempdes ] ) . for each equation",
    "@xmath200 and for each tracking variable , collect the exponents of @xmath201 remove duplicates , and non - maximal exponents .",
    "for example , @xmath202 can be removed from @xmath203 because @xmath204 . 0.01pt    collecting the exponents of @xmath139 in ( [ ckdv : ansatz ] )",
    ", we get the unpruned list : @xmath205|\\!:\\!\\ ! &        \\ { m_1 \\!-\\ ! 1\\ } & \\!\\verb|tr[5]|\\!:\\!\\ ! & \\ { m_2 \\!-\\ ! 1 \\ } \\\\",
    "\\!\\!\\!\\verb|tr[2]|\\!:\\!\\ ! &        \\ { 2m_1 \\!-\\ ! 1\\ } & \\!\\verb|tr[6]|\\!:\\!\\ ! & \\ { m_1 \\!+\\ ! m_2 \\!-\\",
    "\\\\       \\!\\!\\!\\verb|tr[3]|\\!:\\!\\ ! &        \\ { 2m_2 \\!-\\ ! 1\\ } & \\!\\verb|tr[7]|\\!:\\!\\ ! & \\ { m_2 \\!+\\ !",
    "1 , m_2 \\!+\\ !",
    "1 ,        m_2 \\!+\\ !",
    "1 , m_2 \\!-\\ ! 1 \\ } \\\\       \\!\\!\\!\\verb|tr[4]|\\!:\\!\\ ! &        \\ { m_1 \\!+\\ !",
    "1 , m_1 \\!+\\ !",
    "1 , m_1 \\!+\\ !",
    "1 , m_1 \\!-\\ ! 1 \\ }     \\end{array}\\ ] ] .001pt we prune by removing duplicates and non - maximal expressions , and get @xmath206    0.001pt * step m3:@xmath46combine expressions and compute relations for @xmath59 * for each @xmath200 separately , equate all possible combinations of two elements .",
    "construct relations between the @xmath59 by solving for one @xmath67 0.01pt    combining the expressions in ( [ ckdv : mis ] ) , we get @xmath207 we construct relations between the @xmath59 by solving for @xmath208 ( in this case ) : @xmath209    0.001pt * step m4:@xmath46combine relations and solve for exponents @xmath59 * by combining the lists of expressions in an outer product like fashion , we generate all the possible linear equations for @xmath67 solving this linear system , we form a list of all the possible solutions for @xmath67 0.01pt    combining the equations in @xmath210 and @xmath211 , we obtain @xmath212 solving , we find @xmath213    0.001pt * step m5:@xmath46discard invalid exponents @xmath59 * the solutions are substituted into the unpruned list of exponents ( in step m2 ) . for every solution ( without free exponents )",
    "we test whether or not there is a highest - power balance between at least two different tracking variables .",
    "if not , the solution is rejected .",
    "non - positive , fractional , and complex exponents are discarded ( after showing them to the user ) .",
    "negative exponents @xmath214 and fractional exponents ( @xmath215 indicate that a change of dependent variables ( @xmath216 or @xmath217 should be attempted in ( [ originalsystempdes ] ) .",
    "presently , such nonlinear transformations are only carried out automatically for single equations .",
    "0.01pt    removing the case @xmath218 from ( [ ckdv : msoln1 ] ) , we substitute @xmath219 into ( [ ckdv : exponents ] ) .",
    "leading exponent @xmath220 in this case ) occurs for ` tr[2 ] ` , ` tr[3 ] ` and ` tr[4 ] ` in @xmath221 and for ` tr[6 ] ` and ` tr[7 ] ` in @xmath222 the solution is accepted .",
    "0.001pt * step m6:@xmath46fix undetermined @xmath59 and generate additional solutions * when some solutions involve one or more arbitrary @xmath59 we produce candidate solutions with a countdown procedure and later reject invalid candidates .",
    "based on the outcome of step m5 , scan for freedom in one or more of @xmath59 by gathering the highest - exponent expressions from the unpruned list in step m2 . if the dominant expressions are free of any of the @xmath59 , a countdown mechanism generates valid integer values for those @xmath67 these values of @xmath59 must not exceed those computed in step m5 .",
    "candidate solutions are tested ( and rejected , if necessary ) by the procedure in step m5 .",
    "0.01pt    the dominant expressions from ( [ ckdv : exponents ] ) with @xmath219 are @xmath223| : & \\{2 m_1 - 1\\ } & \\verb|tr[6]| : & \\{m_1 + m_2 - 1\\ } \\\\",
    "\\verb|tr[3]| : & \\{2 m_2 - 1\\ } & \\verb|tr[7]| : &   \\{m_2 + 1\\ } \\\\",
    "\\verb|tr[4]| : & \\{m_1 + 1 \\ }     \\end{array}\\ ] ] substituting @xmath124 , the highest exponent @xmath220 in this case ) matches for ` tr[2 ] ` and ` tr[4 ] ` in @xmath210 when @xmath224 the highest exponent @xmath225 matches for ` tr[6 ] ` and ` tr[7 ] ` in @xmath222    a countdown mechanism then generates the following list of candidates @xmath226 verifying these candidate solutions , we are left with @xmath227    notice that for the new solution @xmath228 only the exponents corresponding to ` tr[2 ] ` and ` tr[4 ] ` in @xmath210 are equal .",
    "currently , for the mixed tanh - sech method , the code sets @xmath229 and @xmath230      in this section , we detail our algorithm to analyze and solve nonlinear parameterized algebraic systems ( as generated in step 3 of the main algorithms ) .",
    "our solver is custom - designed for systems that are ( initially ) polynomial in the primary unknowns ( @xmath60 ) , the secondary unknowns ( @xmath231 ) , and parameters @xmath232    the goal is to compute the coefficients @xmath60 in terms of the wave numbers @xmath231 and the parameters @xmath233 etc . in turn",
    ", the @xmath231 must be solved in terms of these parameters .",
    "possible compatibility conditions for the parameters ( relations amongst them or specific values for them ) must be added to the solutions .",
    "algebraic systems are solved recursively , starting with the simplest equation , and continually back - substituting solutions .",
    "this process is repeated until the system is completely solved .    to guide the recursive process",
    ", we designed functions to ( i ) factor , split , and simplify the equations ; ( ii ) sort the equations according to their complexity ; ( iii ) solve the equations for sorted unknowns ;",
    "( iv ) substitute solutions into the remaining equations ; and ( v ) collect the solution branches and constraints .",
    "this strategy is similar to what one would do by hand .",
    "if there are numerous parameters in the system or if it is of high degree , there is no guarantee that our solver will return a suitable result , let alone a complete result . 0.001pt * step r1:@xmath46split and simplify each equation * for all but the mixed tanh - sech algorithm , we assume that the coefficients @xmath234 of the highest power terms are nonzero and that @xmath235 etc .",
    "are nonzero . for the mixed sech - tanh method , @xmath236 and @xmath237",
    "are allowed to be zero .",
    "we first factor equations and set admissible factors equal to zero ( after clearing possible exponents ) . for example , @xmath238 where @xmath239 is a polynomial in primary and secondary unknowns along with the parameters .",
    "equations where non - zero expressions are set to zero are disgarded .",
    "0.01pt    consider ( [ ckdvalgsys2 ] ) , which was derived in the search for sech - solutions of ( [ orgckdv ] ) for case @xmath240 taking @xmath241 to be nonzero , splitting equations , and removing non - zero factors leads to    [ ckdvr1 ] a_12 - 4 c_1 ^ 2 & = & 0 , + a_21 = 0 ( 3 a_10 c_1 + c_1 ^ 3 + c_2 ) & = & 0 , + a_12 a_21 + 2 a_11 a_22 - 2 a_21 c_1 ^ 2 & = & 0 , + 3 a_11 a_12 - a_21 a_22 - a_11 c_1 ^ 2 & = & 0 , + 3 a_12 ^ 2 - a_22 ^ 2 - 6 a_12 c_1 ^ 2 & = & 0 , + 6 a_10 a_11 c_1 -2 a_20 a_21 c_1 + a_11 c_1 ^ 3 - a_11 c_2 & = & 0 , + 3 a_11 a_21 c_1 + 6 a_10 a_22 c_1 + 8 a_22 c_1 ^ 3 + 2 a_22 c_2 & = & 0 , + 3 a_11 ^ 2 c_1 + 6 a_10 a_12 c_1 - a_21 ^ 2 c_1 - 2 a_20 a_22 c_1 + 4 a_12 c_1 ^ 3 - a_12 c_2 & = & 0 ,    where @xmath242 is the logical or .",
    "0.001pt * step r2:@xmath46sort equations according to complexity * a heuristic measure of complexity is assigned to each @xmath239 by computing a weighted sum of the degrees of nonlinearity in the primary and secondary unknowns , parameters , and the length of @xmath243 linear and quasi - linear equations ( with products like @xmath244 are of lower complexity than polynomial equations of higher degree or non - polynomial equations . solving the equation of the lowest complexity first , forestalls branching , avoids expression swell , and conserves memory .",
    "0.01pt    sorting ( [ ckdvr1 ] ) , we get    a_12 - 4 c_1 ^ 2 & = & 0 , + 3 a_11 a_12 - a_21 a_22 - a_11 c_1 ^ 2 & = & 0 , + a_12 a_21 + 2 a_11 a_22 - 2 a_21 c_1 ^ 2 & = & 0 , + a_21 = 0 ( 3 a_10 c_1 + c_1 ^ 3 + c_2 ) & = & 0 , + 3 a_12 ^ 2 - a_22 ^ 2 - 6 a_12 c_1",
    "^ 2 & = & 0 , + 6 a_10 a_11 c_1 -2 a_20 a_21 c_1 + a_11 c_1 ^ 3 - a_11 c_2 & = & 0 , + 3 a_11 a_21 c_1 + 6 a_10 a_22 c_1 + 8 a_22 c_1 ^ 3 + 2 a_22 c_2 & = & 0 , + 3 a_11 ^ 2 c_1 + 6 a_10 a_12 c_1 - a_21 ^ 2 c_1 - 2 a_20 a_22 c_1 + 4 a_12 c_1 ^ 3 - a_12 c_2 & = & 0 .",
    "0.001pt * step r3:@xmath46solve equations for ordered unknowns * the ordering of unknowns is of paramount importance .",
    "the unknowns from the first equation from step r2 are ordered so that the lowest exponent primary - unknowns precede the primary - unknowns that the equation is not polynomial in . if there are not any primary - unknowns , the lowest exponent secondary - unknowns precede the secondary - unknowns that the equation is not polynomial in .",
    "likewise , in the absence of primary- or secondary - unknowns , the lowest exponent parameters precede the non - polynomial parameters .",
    "the equation is solved using the built - in _ mathematica _ function ` reduce ` , which produces a list of solutions and constraints",
    ". constraints of the form @xmath245 ( where neither @xmath246 or @xmath247 is zero ) are pruned , and the remaining constraints and solutions are collected . 0.1pt    in this example , @xmath248 is solved for @xmath175 and the solution @xmath249 is added to a list of solutions .    0.001pt * step r4:@xmath46recursively solve the entire system * the solutions and constraints from step r3 are applied and added to the previously found solutions and constraints . in turn , all the solutions are then applied to the remaining equations .",
    "the updated system is simplified by clearing common denominators in each equation and continuing with the numerators .",
    "steps r1-r4 are then repeated on the simplified system .",
    "0.01pt    substituting @xmath249 and clearing denominators , we obtain    a_21 a_22 - 11 a_11 c_1 ^ 2 & = & 0 + a_11 a_22 + a_21 c_1 ^ 2 & = & 0 , + a_21 = 0 ( 3 a_10 c_1 + c_1 ^ 3 + c_2 ) & = & 0 , + a_22 ^ 2 - 24 c_1 ^ 4 & = & 0 , + 6 a_10 a_11 c_1 - 2 a_20 a_21 c_1 + a_11 c_1 ^ 3 - a_11 c_2 & = & 0 , + 3 a_11 a_21 c_1 + 6 a_10 a_22 c_1 + 8 a_22 c_1 ^ 3 + 2 a_22 c_2 & = & 0 , + 3 a_11 ^ 2 - a_21 ^ 2 - 2 a_20 a_22 + 24 a_10 c_1 ^ 2 + 16 c_1 ^ 4 - 4 c_1 c_2 & = & 0 .",
    "the recursive process terminates when the system is completely solved . the solutions ( including possible constraints )",
    "are returned .    repeating steps r1-r4 seven more times the _ global _ solution of ( [ ckdvalgsys2 ] ) is obtained :    [ repckdvalgsol2 ] a_10 & = & -(4 c_1 ^ 3 + c_2)/(3 c_1 ) , a_11 = 0 , a_12 = 4 c_1 ^ 2 , + a_20 & = & ( 4c_1 ^ 3 + ( 1 + 2)c_2)/(c_1 ) , a_21 = 0 , a_22 = 2 c_1 ^ 2 .    where @xmath250 and @xmath251 are arbitrary .",
    "this solution of ( [ ckdvalgsys1 ] ) , corresponds to the @xmath252 case given in ( [ ckdvalgsol1 ] ) .",
    "the solutions to the algebraic system found in section  [ analyzeandsolve ] are substituted into @xmath253 where @xmath193 and @xmath195 are defined in section  [ msolve ] .",
    "the constraints on the parameters ( @xmath254 etc . ) are also collected and applied to system ( [ originalsystempdes ] ) .",
    "since the algorithm used to solve the nonlinear algebraic system continually clears denominators , it is important to test the final solutions for @xmath255 while _",
    "mathematica s _ ` reduce ` function generates constraints that should prevent any undetermined or infinite coefficients @xmath60 after back - substitution , it is still prudent to check the solutions .    to present solutions in the simplest format ,",
    "we assume that all parameters @xmath256 etc . )",
    "are positive , real numbers .",
    "this allows us to repeatedly apply rules like @xmath257 @xmath258 @xmath259 and @xmath260    we allow for two flavors of testing : a numeric test for complicated solutions and a symbolic test which guarantees the solution . in either test , we substitute the solutions into ( [ originalsystempdes ] ) after casting the solutions into exponential form , i.e. , @xmath261 and @xmath262 for the numeric test of solutions :    * after substituting the solution , substitute random real numbers in @xmath263 $ ] for @xmath264 and @xmath25 in the left hand side of ( [ originalsystempdes ] ) , * expand and factor the remaining expressions , * substitute random real numbers in @xmath263 $ ] for arbitrary @xmath265 * expand and factor the remaining expressions , * if the absolute value of each of the expressions @xmath266 @xmath267 @xmath268 , then accept the solution as valid , else reject the solution ( after showing it to the user ) .    _ mathematica _ evaluates @xmath269 when @xmath246 is numeric , but does not evaluate @xmath270 when @xmath246 is symbolic .",
    "our simplification routines use @xmath271 instead of @xmath272 when @xmath246 is symbolic .",
    "this has two consequences : ( i ) valid solutions may be missed , and ( ii ) solutions have a @xmath273 probability of evaluating to matching signs during the numeric test .",
    "the numeric test being inconclusive , we perform a symbolic test . for the symbolic test of solutions :    * after substituting the solution , expand and factor the left hand side of ( [ originalsystempdes ] ) , * apply simplification rules like @xmath274 @xmath275 @xmath276 and @xmath277 * repeat the above simplifications until the expressions are static , * if the final expressions are identically equal to zero , then accept the solution , else reject the solution and report the unresolved expressions to the user .",
    "the algorithms from sections  [ tanhmethodpdes]-[cnmethodpdes ] were implemented in our _ mathematica _ package ` pdespecialsolutions.m ` , which was used to solve the equations in this section .      the kdv - zakharov - kuznetsov ( kdv - zk ) equation , @xmath278 models ion - acoustic waves in magnetized multi - component plasmas including negative ions ( see e.g.  das and verheest , 1989 ) .    with ` pdespecialsolutions ` ( tanh and sech options ) we found the solution    [ solskdvzk ] u(x , y , z , t ) & = & - ^2 , + & = & - + ^2 ,    where @xmath279 with @xmath280 and @xmath11 arbitrary .    for @xmath281 and replacing @xmath282 by @xmath283 one",
    "gets the solitary wave solution    [ solskdv ] u(x , t ) & = & - ^2(c_1 x + c_2 t + ) , + & = & - + ^2(c_1 x + c_2 t + ) ,    of the ubiquitous kdv equation ( [ orgkdv ] ) .    the function ` pdespecialsolutions ` does not take boundary or initial conditions as input .",
    "one can a posteriori impose conditions on solutions .",
    "for example , requiring @xmath284 @xmath0 @xmath285 in ( [ solskdv ] ) would fix @xmath286    for the modified kdv - zk equation ( das and verheest , 1989 ) , @xmath287 using the tanh and sech options , ` pdespecialsolutions ` returns @xmath288 with @xmath289 and @xmath290 with @xmath291 for @xmath292 ( [ solsmkdvzktanh ] ) and ( [ solsmkdvzksech ] ) reduce to the well - known solitary wave solutions @xmath293 ( @xmath294 and @xmath11 arbitrary real numbers ) of the modified kdv ( mkdv ) equation ( ablowitz and clarkson , 1991 ) , @xmath295 for a three dimensional modified kdv ( 3d - mkdv ) equation , @xmath296 one obtains the solitary wave solution @xmath297 where @xmath298 and @xmath25 are arbitrary .",
    "consider the generalized kuramoto - sivashinsky ( ks ) equation ( see e.g.  parkes and duffy , 1996 ) : @xmath299 ignoring complex solutions , ` pdespecialsolutions ` ( tanh option ) automatically determines the special values of the real parameter @xmath11 and the corresponding closed form solutions . for @xmath300 @xmath301 with @xmath302 for @xmath303 @xmath304",
    "where @xmath305 for @xmath306 @xmath307 where @xmath308    the remaining solutions produced by ` pdespecialsolutions ` are either complex ( not shown here ) or can be obtained from the solutions above via the inversion symmetry of ( [ ks ] ) : @xmath309    a separate run of the code after setting @xmath310 in ( [ ks ] ) yields @xmath311 with @xmath312 in all solutions above @xmath313 is arbitrary .      in section  [ sechmethodpdes ]",
    "we gave the sech - solutions for the hirota - satsuma system ( [ orgckdv ] ) .",
    "here we list the @xmath314 and @xmath18 solutions for ( [ orgckdv ] ) computed by ` pdespecialsolutions ` ( tanh , jacobicn and jacobisn options ) :    [ tanhsolsckdv ] u(x , t ) & = & - 2 c_1 ^ 2 ^2 ( ) , + v(x , t ) & = & ( ) , + u(x , t ) & = & - 4 c_1 ^ 2 ^2 ( ) , + v(x , t ) & = & 2 c_1 ^ 2 ^2 ( ) ,    [ snsolsckdv ] u(x , t ) & = & - 2 mc_1 ^ 2 ^2 ( ; m ) , + v(x , t ) & = & ( , m ) , + u(x , t ) & = & - 4 mc_1 ^ 2 ^2 ( ; m ) , + v(x , t ) & = & 2 c_1 ^ 2 ^2 ( ; m ) , +    [ cnsolsckdv ] u(x , t)&= & + 2 mc_1 ^ 2 ^2 ( ; m ) , + v(x , t)&= & (; m ) , + u(x , t)&= & + 4 mc_1 ^ 2 ^2 ( ; m ) , + v(x , t)&= & 2 c_1 ^ 2 ^2 ( ; m ) ,    with @xmath1 and @xmath315 and modulus @xmath16 arbitrary .",
    "these solutions correspond with those given in fan and hon ( 2002 ) .    with the sechtanh option we obtained two dozen ( real and complex ) solutions .",
    "the real solutions coincide with the ones given above .",
    "another coupled system of kdv - type equations was studied by guha - roy ( 1987 )    [ guharoykdv ] & & u_t + v v_x + u u_x + u_xxx = 0 , + & & v_t + ( u v)_x + v v_x = 0 ,    where @xmath11 through @xmath316 are real constants .",
    "the package ` pdespecialsolutions ` ( sech option ) computed :    [ guharoysol ] u(x , t ) & = & - + ^2(c_1 x + c_2 t + ) , + v(x , t ) & = & - ^2 ( ) ,    where @xmath317 @xmath318 with @xmath319 and @xmath11 through @xmath316 arbitrary . for @xmath320 ( [ guharoykdv ] ) reduces to kawamoto s system ; for @xmath321 to ito s system .",
    "neither of these systems has polynomial solutions in @xmath86 or @xmath322      for the fisher equation ( malfliet , 1992 ) , @xmath323 with ` pdespecialsolutions ` ( tanh option ) we found the ( real ) solution @xmath324 with @xmath325 in addition , there are 4 complex solutions .    obviously , `",
    "pdespecialsolutions ` handles odes also . for example",
    ", we can put the fitzhugh - nagumo ( fhn ) equation ( hereman , 1990 ) , @xmath326 where @xmath327 into a travelling frame , @xmath328 with @xmath329 ignoring the inversion symmetry @xmath330 of ( [ fhnode ] ) , we find with ` pdespecialsolutions ` ( tanh option ) @xmath331 \\right],\\ ] ] if @xmath332 @xmath333 \\right],\\ ] ] if @xmath334 and @xmath335 \\right],\\ ] ] if @xmath336 in these solutions ( see e.g.  hereman , 1990 ) @xmath337 and @xmath25 are arbitrary .",
    "gao and tian ( 2001 ) considered the following degenerate hamiltonian system ,    [ orghamiltonianeqs ] & & u_t - u_x - 2 v = 0 , + & & v_t - 2 u v = 0 , = 1 ,    which was shown to be completely integrable by admitting infinitely many conserved densities . our code does not find sech - solutions . with the sechtanh option , `",
    "pdespecialsolutions ` returns the solutions :    [ hamiltonianeqssolution1 ] u(x , t ) & = & - c_2 , + v(x , t ) & = & c_2 ( c_1 - c_2 ) ^2 ,    which could have been obtained with the tanh - method in section  [ tanhmethodpdes ] ; and    [ hamiltonianeqssolution2 ] u(x , t ) & = & i c_2 ( + i ) , + v(x , t ) & = & c_2 ( c_1 - c_2 ) ( + i ) ,    plus their two complex conjugates .",
    "there are no constraints on @xmath338 and @xmath339 and @xmath340 the above solutions were reported in gao and tian ( 2001 ) .      the combined kdv - mkdv equation ( see gao and tian , 2001 ) @xmath341 describes a variety of wave phenomena in plasma , solid state , and quantum physics .",
    "we chose this example to show that odes of type ( [ legendretypesech ] ) , which are free of @xmath342 can admit mixed tanh - sech solutions .    first , ` pdespecialsolutions ` with the tanh option , produces @xmath343 next , with the sech option , ` pdespecialsolutions ` computes @xmath344.\\ ] ] third , with the sechtanh option , ` pdespecialsolutions ` finds @xmath345 and @xmath346 where @xmath347 in all solutions @xmath348 and @xmath349 are arbitrary .",
    "the solutions were reported in gao and tian ( 2001 ) , although there were minor misprints .",
    "duffing s equation ( lawden , 1989 ) , @xmath350 models a nonlinear spring problem .",
    "its @xmath19 and @xmath18 solutions    [ duffingcnandsnsolution ] u(x ) & = & ( + ; m ) , = 1 , + u(x ) & = & ( + ; m ) , = 1 ,    are computed by ` pdespecialsolutions ` with the jacobicn and jacobisn options .",
    "there are four sign combinations in ( [ duffingcnandsnsolution ] ) .",
    "since @xmath351 the @xmath19 solution is real when @xmath352 and @xmath353 the @xmath18 solution is real for @xmath354 such conditions are not automatically generated . during simplifications the code assumes @xmath352 ( see section  [ analyzeandsolve ] for details ) .",
    "initial conditions fix the modulus in ( [ duffingcnandsnsolution ] ) . for example , @xmath355 and @xmath356 lead to @xmath357      to illustrate the limitations of ` pdespecialsolutions ` consider the family of fifth - order kdv equations ( gkta and hereman , 1997 ) , @xmath358 where @xmath79 and @xmath349 are nonzero parameters .",
    "an investigation of the scaling properties of ( [ kdv5par ] ) reveals that only the ratios @xmath359 and @xmath360 are important , but let us proceed with ( [ kdv5par ] ) .",
    "* special cases * 1.5pt several special cases of ( [ kdv5par ] ) are well known ( for references see gkta and hereman , 1997 ) . indeed , for @xmath361 eq .",
    "( [ kdv5par ] ) reduces to @xmath362 which belongs to the completely integrable hierarchy of higher - order kdv equations constructed by lax .",
    "equation ( [ lax ] ) has two tanh - solutions : @xmath363 and @xmath364,\\ ] ] where @xmath365 are arbitrary .    for @xmath366 one",
    "gets the equation , @xmath367 due to sawada and kotera ( sk ) and dodd and gibbon , which has tanh - solutions : @xmath368 and @xmath369,\\ ] ] where @xmath365 are arbitrary .",
    "the kk equation due to kaup and kupershmidt , @xmath370 corresponding to @xmath371 and again admits two tanh - solutions : @xmath372 and @xmath373 with @xmath374 arbitrary , but no additional arbitrary coefficients .",
    "the equation @xmath375 for @xmath376 was studied by ito .",
    "it has one @xmath3 solution : @xmath377 again with @xmath378 and @xmath25 arbitrary .",
    "` pdespecialsolutions ` ( tanh option ) produces all these solutions . *",
    "general case * 1.5pt eq .",
    "( [ kdv5par ] ) is hard to analyze by hand or with the computer .",
    "after a considerably amount of time , ` pdespecialsolutions ` ( tanh option ) produced the solutions given below ( but not in as nice a form ) .",
    "our write - up of the solutions is the result of additional interactive work with _",
    "mathematica_.    the coefficients @xmath379 and @xmath175 in @xmath380 with @xmath381 must satisfy the following nonlinear algebraic system with parameters @xmath382 and @xmath383    [ 5kdvparsys ] a_12 ^ 2 + 6 a_12 c_1 ^ 2 + 12 a_12 c_1 ^ 2 + 360 c_1 ^ 4 & = & 0 , + a_11 ( a_12 ^ 2 + 2 a_12 c_1 ^ 2 + 6 a_12 c_1 ^ 2 + 24 c_1 ^ 4 ) & = & 0 , + a_11 ( a_10 ^ 2 c_1 - 2 a_10 c_1 ^ 3 + 2 a_12 c_1 ^ 3 + 16 c_1 ^ 5 + c_2 ) & = & 0 , + a_11 ( a_11 ^ 2 + 6 a_10 a_12 + 6 a_10 c_1 ^ 2 - 12 a_12 c_1 ^ 2 - 18 a_12 c_1 ^ 2 - 120 c_1 ^ 4 ) & = & 0 , + 2 a_11 ^ 2 a_12 + 2 a_10 a_12 ^ 2 + a_11 ^ 2 c_1 ^ 2 + 3 a_11 ^ 2 c_1 ^ 2 + 12 a_10 a_12 c_1 ^ 2 & & + - 8 a_12 ^ 2 c_1 ^ 2 - 8 a_12 ^ 2 c_1 ^ 2 - 480 a_12 c_1 ^ 4 & = & 0 , + a_10 a_11 ^ 2 c_1 + a_10 ^ 2 a_12 c_1 - a_11 ^ 2 c_1 ^ 3 - a_11 ^ 2 c_1 ^ 3 - 8 a_10 a_12 c_1 ^ 3 + 2 a_12 ^ 2 c_1 ^ 3 & & + + 136 a_12 c_1 ^ 5 + a_12 c_2 & = & 0 .",
    "assuming nonzero @xmath384 and @xmath385 two cases must be distinguished : * case 1 : * @xmath386 in turn , this case splits into two sub - cases : * case 1a : * @xmath387 where @xmath388 must be one of the roots of @xmath389 * case 1b : * @xmath390 provided that @xmath391 * case 2 : * @xmath392 then @xmath393 provided @xmath337 is one of the roots of @xmath394 thus , case 2 also splits into two sub - cases : * case 2a : * if @xmath395 then    [ case2aquad ] & & = - ( 2 + 5 ) , a_10 = - c_1 ^ 2 , a_11 = c_1 ^ 2 , + & & a_12 = - c_1 ^ 2 , c_2 = - c_1 ^ 5 .    where @xmath337 is any root of @xmath396 * case 2b : * if @xmath397 then    [ case2cubic ] & & = ( 8 ^2 + 38 + 39 ^2 ) , a_10 = c_1 ^ 2 , + & & a_11 ^ 2 = c_1 ^ 4 , a_12 = - c_1 ^ 2 , + & & c_2 = - c_1 ^ 5 ,    where @xmath337 is any root of @xmath398",
    "the algorithms presented in this article can be extended in several ways .",
    "for instance , one could modify the chain rule in step t1 ( s1 , st1 , or cn1 ) to compute other _",
    "types _ of solutions or consider more complicated polynomials than those used in step t2 ( s2 , st2 , or cn2 ) . both options could be used together .    with respect to the first option , it suffices to know the underlying first - order differential equation of the desired fundamental function in the polynomial solution .",
    "table  [ tbl : functionsodes ] summarizes some of the more obvious choices .",
    "0.0001pt     @xmath399 & chain rule    ' '' ''     + @xmath400 & & @xmath401 & @xmath402    ' '' ''     + @xmath403 & & @xmath404 & @xmath405    ' '' ''     + @xmath406 & & @xmath407 & @xmath408    ' '' ''     + @xmath409 & & @xmath410 & @xmath411    ' '' ''     + @xmath412 & & @xmath413 & @xmath414    ' '' ''     + @xmath415 & & @xmath416 & @xmath417    ' '' ''     + @xmath418 & & @xmath419 & @xmath420    ' '' ''     +    0.0001pt several researchers , including fan ( 2002abc ) and gao and tian ( 2001 ) , seek solutions of the form @xmath421 where @xmath422 is constrained by a riccati equation , @xmath423 ignoring rational solutions , ( [ riccatitanhtan ] ) has the following solutions    w ( ) & = & a(a + c ) , = -1 , b = a^2 , + w ( ) & = & a(a + c ) , = -1 , b = a^2 , + w ( ) & = & a(a + c ) , = 1 , b = a^2 , + w ( ) & = & a(a + c ) , = -1 , b = -a^2 .",
    "so , ( [ seriesu ] ) is polynomial in @xmath424 @xmath425 @xmath426 or @xmath427 the integration constant @xmath428 gets absorbed in @xmath429 and the constant @xmath246 ( or @xmath430 is an extra parameter in the nonlinear algebraic system for the @xmath431 for single pdes , yao and li ( 2002ab ) consider solutions of the form @xmath432 where @xmath422 and @xmath433 satisfy the riccati equations @xmath434 since @xmath435 this approach is similar to the sech - tanh method in section  [ sechtanhmethodpdes ] .",
    "generalizing further , fan ( 2002b , 2003abc ) , fan and hon ( 2002 , 2003a ) , and hon and fan ( 2004b ) take @xmath436 which covers the functions @xmath437 and @xmath438 the parameters @xmath439 are added to the nonlinear algebraic system , which makes such systems hard to solve without human intervention .",
    "most often , such complicated nonlinear algebraic systems are solved interactively with the aid of _ mathematica _ or _",
    "maple_. to avoid unmanageable systems , @xmath440 is often fixed in ( [ seriesu ] ) .",
    "chen and zhang ( 2003ab ) , fan and dai ( 2003 ) , and sirendaoreji ( 2003 , 2004 ) use variants of ( [ generakriccati ] ) to compute polynomial and rational solutions in terms of @xmath441 jacobi s elliptic functions , etc .",
    "zheng _ et al . _",
    "( 2002 ) introduce a clever method to compute mixed tanh - sech solutions for the combined kdv - burgers equations .",
    "they seek formal solutions , @xmath442 subject to @xmath443 which , upon integration , gives @xmath444 and @xmath445 alternatively , one can use @xmath446 which leads to @xmath447 and @xmath448    liu and li ( 2002a ) seek solutions of the forms    [ cnsncombination ] u ( ) & = & _ j=0^m a_j ( ) ^j , u ( ) = _",
    "j=0^m a_j ( ) ^j + _ j=0^m b_j ( ) ( ) ^j-1 , + u ( ) & = & _ j=0^m a_j ( ) ^j + _",
    "j=0^m a_j ( ) ( ) ^j-1 + _",
    "j=0^m b_j ( ) ( ) ^j-1 + & & + _",
    "j=0^m b_j ( ) ( ) ( ) ^j-2 ,    which generalize the jacobi elliptic function method in section  [ sechtanhmethodpdes ] .    with respect to the second option ,",
    "gao and tian ( 2001 ) consider @xmath449 where @xmath450 is not necessarily linear in @xmath451 and/or @xmath40 of course , ( [ sechtanhsolutions ] ) arises from recasting the terms in ( [ generalsolutionsechtanhpdes ] ) in a slightly different way than ( [ polynomialsolutionsechtanhpdes ] ) . restricted to travelling waves , @xmath452 both forms are equivalent .",
    "our algorithms could be generalized in many ways . with considerable effort",
    ", solutions involving complex exponentials multiplied by @xmath3 or @xmath86 functions could be attempted .",
    "a solution to the nonlinear schrdinger equation is of this form .",
    "fan and hon ( 2003b ) , hon and fan ( 2004a ) and fan ( 2003bc ) give examples of complex as well as transcendental equations solved with the tanh - method .",
    "[ reviewsoftware ] there is a variety of methods to find solitary wave solutions and soliton solutions of special nonlinear pdes .",
    "see e.g.  hereman and takaoka ( 1990 ) , estvez and gordoa ( 1995 , 1998 ) , and helal ( 2002 ) .",
    "some of these methods are straightforward to implement in computer algebra systems ( cas ) .",
    "the most comprehensive methods of finding exact solutions for odes and pdes are based on similarity reductions via lie point symmetry methods .",
    "these methods are hard to fully automate ( for publications and software see e.g.  cantwell , 2002 ; hereman , 1996 ; hydon , 2000 ) .",
    "most cas have tools to solve a subset of linear and nonlinear pdes .",
    "for example , _",
    "mathematica s _ ` dsolve ` can find general solutions for linear and weakly nonlinear pdes .",
    "available within _ mupad _ , the code ` pdesolve ` uses the method of characteristics to solve quasi - linear first order pdes . _",
    "maple _ offers the packages odetools ( for solving odes using classification , integrating factor and symmetry methods ) and pdetools , which contains the function _",
    "pdesolve _ to find exact solutions of some classes of pdes .",
    "for information consult cheb - terrab ( 1995 , 2001ab ) .",
    "the methods presented in this paper are different from these efforts .",
    "our algorithms and software only compute specific solutions of nonlinear pdes which model travelling waves in terms of the @xmath453 and @xmath19 functions .",
    "our code can handle systems of odes and pdes with undetermined parameters .    to our knowledge , only four software packages are similar to ours .",
    "the first package is atfm by parkes and duffy ( 1996 ) , who automated to some degree the tanh - method using _ mathematica_. in contrast to atfm , our software performs the computations automatically from start to finish without human intervention . in our code , the number of independent variables @xmath454 is not limited to one space variable @xmath451 and time @xmath455 our code handles any number of dependent variables .",
    "the second package is rath by li and liu ( 2002 ) , which automates the tanh - method .",
    "in contrast to our code , rath only works for single pdes .",
    "extensions to cover systems of pdes and @xmath86 solutions are under development . surpassing our code ,",
    "rath can solve pdes with an unspecified degree of nonlinearity and deal with negative and fractional exponents .",
    "table  [ tbl : comparison ] compares the performance of ` pdespecialsolutions.m ` and rath .",
    "the solution times are comparable , yet occasionally there is a mismatch in the number of solutions computed .",
    "this is due in part to the representation of solutions .",
    "occasionally special solutions are generated although ",
    "after inspection by hand  they are included in more general solutions . 0.0001pt    .comparison between codes pdespecialsolutions.m and rath .",
    "test runs performed on a dell dimension 8200 pc , with 2.40 ghz pentium 4 processor , 512 mb of ram , with mathematica v.  4.1 and maple v.  7.0 .",
    "the first 8 equations appear in li and liu ( 2002 ) ; the last 10 equations are listed in this paper .",
    "[ cols=\">,^,^,^,^ , < \" , ]     liu and li ( 2002a ) present the _ maple _",
    "code ajfm to automate the jacobi elliptic function method for single pdes .",
    "this package seeks solutions of the form ( [ cnsncombination ] ) .",
    "the codes rath and ajfm use the ritt - wu characteristic sets method , implemented by wang ( 2001ab ) .",
    "the charsets package , available in maple ( wang , 2002 ) , is more versatile and powerful than our algorithm in section  [ analyzeandsolve ] .",
    "lastly , abbott _ et al . _",
    "( 2002 ) designed a _",
    "notebook with key functions for the computation of polynomial solutions in @xmath18 and @xmath27    there are several symbolic tools for reducing and solving parameterized nonlinear algebraic systems .",
    "some are part of codes to simplify overdetermined ode and pde systems .",
    "for example , the maple package ` rif ` by wittkopf and reid ( 2003 ) allows for the computation of solution branches of nonlinear algebraic systems .",
    "the most powerful algebraic solvers use some flavor of the grbner basis algorithm . for up - to - date information on developments in this area",
    "we refer to grabmeier _",
    "we presented several straightforward algorithms to compute special solutions of nonlinear pdes , without using explicit integration .",
    "we designed the symbolic package ` pdespecialsolutions.m ` to find solitary wave solutions of nonlinear pdes involving @xmath456 and @xmath18 functions .    while the software reproduces the known ( and also a few presumably new ) solutions for many equations , there is no guarantee that the code will compute the complete solution set of all polynomial solutions involving the @xmath3 and/or @xmath86 functions , especially when the pdes have parameters",
    "this is due to restrictions on the form of the solutions and the limitations of the algebraic solver .",
    "there is so much freedom in mixed tanh - sech solutions that the current code is limited to quadratic solutions .",
    "furthermore , the nonlinear constraints which arise in solving the nonlinear algebraic system may be quintic or of higher degree , and therefore unsolvable in analytic form .",
    "also , since our software package is fully automated , it may not return the solutions in the simplest form .",
    "the example in section  [ examplefifthkdv ] illustrates this situation . by not solving quadratic or cubic equations explicitly the solutions ( computed interactively with _ mathematica _ ) can be presented in a more compact and readable form .    in an attempt to avoid the explicit use of _ mathematica _",
    "s ` solve ` and ` reduce ` functions , we considered various alternatives .",
    "for example , we used ( i ) variants of grbner bases on the complete system , and ( ii ) combinatorics on the coefficients in the polynomial solutions ( setting @xmath457 or @xmath458 for the admissible @xmath190 and @xmath459 none of these alternatives paid off for systems with parameters",
    ".    often , the nonlinear solver returns constraints on the wave parameters @xmath48 and the external parameters . in principle , one should verify whether or not such constraints affect the results of the previous steps in the algorithm .",
    "in particular , one should verify the consistency with the results from step 2 of the algorithms .",
    "we have not yet implemented this type of sophistication .",
    "this material is based upon work supported by the national science foundation ( nsf ) under grants nos .",
    "dms-9732069 , dms-9912293 and ccr-9901929 .",
    "any opinions , findings , and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of nsf .",
    "wh thankfully acknowledges the hospitality and support of the department of applied mathematics of the university of stellenbosch , south africa , during his sabbatical visit in spring 2001 .",
    "part of the work was done at wolfram research , inc . , while wh was supported by a visiting scholar grant in fall 2000 .",
    "m.  hickman is thanked for his help with _",
    "e.  parkes and b.  duffy are thanked for sharing their code atfm .",
    "p.  abbott is thanked for sharing his _ mathematica _ notebooks and testing earlier versions of our code .",
    "b .  li and y .- p .",
    "liu are thanked for providing us with the codes rath and ajfm .",
    "the authors are grateful to b.  deconinck , b.  herbst , p.g.l .",
    "leach , w.  malfliet , j.  sanders , and f.  verheest for valuable comments .",
    "last but not least , students s.  nicodemus , p.  blanchard , j.  blevins , s.  formaneck , j.  heath , b.  kowalski , a.  menz , j.  milwid , and m.  porter - peden are thanked for their help with the project . 0.01pt    99    ablowitz , m.j . , clarkson , p.a .",
    "_ solitons , nonlinear evolution equations and inverse scattering_.cambridge ( u.k . ) : cambridge university press .",
    "abbott p.c . ,",
    "parkes , e.j . , duffy , b.r .",
    "the jacobi elliptic - function method for finding periodic - wave solutions to nonlinear evolution equations .",
    "notebook with _ mathematica _",
    "implementation of the jacobi elliptic function method .",
    "available at http://physics.uwa.edu.au /pub",
    "/ mathematica / solitons/.    baldwin , d. , gkta , . , hereman , w. , hong , l. , martino , r.s . , miller , j.c .",
    "pdespecialsolutions.m : a mathematica program for the symbolic computation of exact solutions expressible in hyperbolic and elliptic functions for nonlinear pdes .",
    "available at url : http://www.mines.edu /fs_home",
    "/ whereman/.    cantwell , b.j .",
    "_ introduction to symmetry analysis_. cambridge texts in applied mathematics .",
    "cambridge ( u.k . ) : cambridge university press .",
    "cheb - terrab , e.s .",
    "( 2001a ) .",
    "pdetools project .",
    "center for experimental and constructive mathematics , simon fraser university , vancouver , british columbia , canada .",
    "see : http://lie.uwaterloo.ca/pdetools.m .",
    "cheb - terrab , e.s .",
    "( 2001b ) . a computational approach for the analytical solving of systems of partial differential equations",
    ". preprint . submitted to : _ comp .",
    "cheb - terrab , e.s . , von blow , k.  ( 1995 ) . a computational approach for the analytical solving of systems of partial differential equations , _ comp .",
    "comm . _ * 90 * , 102 - 116 .",
    "chen , h.t .",
    ", zhang , h.q .",
    "( 2003a ) .",
    "improved jacobin elliptic function method and its applications , _ chaos , solitons and fractals _ * 15 * , 585 - 591 .",
    "chen , h.t .",
    ", zhang , h.q .  (",
    "2003b ) . an algebraic method for finding soliton and periodic solutions of nonlinear evolution equations .",
    "preprint . submitted to : _ comp .",
    "comm._.    das , g.c . ,",
    "sarma , j.  ( 1999 ) .",
    "response to  comment on ` a new mathematical approach for finding the solitary waves in dusty plasmas ' \" [ phys .",
    "plasmas 6 , 4393 ( 1999 ) , _ phys .",
    "plasmas _ * 6 * , 4394 - 4397 .",
    "das , k.p .",
    ", verheest , f.  ( 1989 ) .",
    "ion - acoustic solitons in magnetized multi - component plasmas including negative ions , _ j.  plasma phys . _ * 41 * , 139 - 155 .",
    "drazin , p.g . ,",
    "johnson , r.s .",
    "( 1989 ) . _",
    "solitons : an introduction_. cambridge texts in appl .  maths .",
    "cambridge ( u.k . ) : cambridge university press .",
    "estvez , p.g . ,",
    "gordoa , p.r .",
    "non - classical symmetries and the singular manifold method : theory and six examples , _ stud .",
    "_ * 95 * , 73 - 113 .",
    "estvez , p.g . ,",
    "gordoa , p.r .",
    "non - classical symmetries and the singular manifold method : a further two examples , _ j.  phys",
    ".  a : math .  gen .",
    "_ * 31 * , 7511 - 7519 .    fan , e.  ( 2002a )",
    ". travelling wave solutions for nonlinear evolution equations using symbolic computation , _ comp .",
    "appl . _ * 43 * , 671 - 680 .",
    "fan , e.  ( 2002b ) .",
    "multiple travelling wave solutions of nonlinear evolution equations using a unified algebraic method , _ j.  phys .",
    "a. : math .",
    "gen . _ * 35 * 6853 - 6872",
    ".    fan , e.  ( 2002c ) . a new algebraic method for finding series of travelling wave solutions to a coupled ito system , _ j.  phys .",
    "jpn . _ * 71 * , 2663 - 2668",
    ".    fan , e.  ( 2003a ) . a new algebraic method for finding the line soliton solutions and doubly periodic wave solution to a two - dimensional perturbed kdv equation , _ chaos , solitons and fractals _ * 15 * , 567 - 574 .",
    "fan , e.  ( 2003b ) .",
    "an algebraic method for finding a series of exact solutions to integrable and nonintegrable nonlinear evolution equations , _ j.  phys .  a : math .",
    "gen . _ * 36 * , 7009 - 7026",
    ".    fan , e.  ( 2003c ) .",
    "uniformly constructing a series of explicit exact solutions to nonlinear equations in mathematical physics , _ chaos , solitons and fractals _ * 16 * , 819 - 839",
    ".    fan , e. , dai , h.h .",
    "a direct approach with computerized symbolic computation for finding a series of traveling waves to nonlinear equations , _ comp .",
    "comm . _ * 153 * , 17 - 30",
    ".    fan , e. , hon , y.c .",
    "an algebraic method with computerized symbolic computation and new families of travelling wave solutions for the hirota - satsuma coupled kdv equation , _",
    "nuovo cimento b _ * 117 * , 659 - 669 .",
    "fan , e. , hon , y.c .",
    "( 2003a ) . a series of travelling wave solutions for two variant boussinesq equations in shallow water waves , _ chaos , solitons and fractals _ * 15 * , 559 - 566 .",
    "fan , e. , hon , y.c .",
    "( 2003b ) .",
    "applications of extended tanh method to ` special ' types of nonlinear equations , _ appl .  math .",
    "* 141 * , 351 - 358 .",
    "fan , e. , zhang , h.  ( 2002 ) .",
    "applications of the jacobi elliptic function method to special - type nonlinear equations , _ phys .",
    "lett .  a _ * 305 * , 383 - 392 .",
    "fu , z. , liu , s. , liu , s. and zhao , q.  ( 2001 ) .",
    "new jacobi elliptic function expansion and new periodic solutions of nonlinear wave equations , _ phys .",
    "lett .  a _ * 290 * , 72 - 76 .    gao , y.t . ,",
    "tian , b.  ( 2001 ) . generalized hyperbolic - function method with computerized symbolic computation to construct the solitonic solutions to nonlinear equations of mathematical physics , _ comp .",
    "comm . _ * 133 * , 158 - 164 .",
    "gkta , . , hereman , w.  ( 1997 ) .",
    "symbolic computation of conserved densities for systems of nonlinear evolution equations , _",
    "j. symb . comp .",
    "_ * 24 * , 591 - 621 .",
    "grabmeier , j. , kaltofen e. , weispfenning v. , eds .",
    "_ computer algebra handbook : foundations , applications , systems_. berlin : springer verlag .",
    "guha - roy , c.  ( 1987 ) .",
    "solitary wave solutions of a system of coupled nonlinear equations , _ j.  math .",
    "_ * 28 * , 2087 - 2088 .",
    "helal , m.a .",
    "soliton solution of some nonlinear partial differential equations and its applications in fluid mechanics , chaos , solitons and fractals * 13 * , 1917 - 1929 .",
    "hereman , w.  ( 1990 ) .",
    "application of a macsyma program for the painlev test to the fitzhugh - nagumo equation , in : partially integrable evolution equations in physics , proc .",
    "winter school theoretical physics , ( r.  conte , n.  boccara , eds . ) dordrecht : kluwer academic publishers , pp .",
    "585 - 586 .",
    "hereman , w.  ( 1991 ) .",
    "exact solitary wave solutions of coupled nonlinear evolution equations using macsyma , _ comp .",
    "comm . _ * 65 * , 143 - 150 .",
    "hereman , w.  ( 1996 ) .",
    "symbolic software for lie symmetry analysis .",
    "_ crc handbook of lie group analysis of differential equations , volume 3 : new trends in theoretical developments and computational methods_. chapter 13 ( n.h .",
    "ibragimov , ed . )",
    "boca raton , florida : crc press , pp .",
    "367 - 413 .",
    "hereman , w. , takaoka , m.  ( 1990 ) .",
    "solitary wave solutions of nonlinear evolution and wave equations using macsyma , _ j.  phys .  a : math .",
    "* 23 * , 4805 - 4822 .",
    "hon , y.c . , fan , e.  ( 2004a ) .",
    "a series of new exact solutions for a complex coupled kdv system _ chaos , solitons and fractals _ * 19 * , 515 - 525 .",
    "hon , y.c . , fan , e.  ( 2004b ) .",
    "solitary wave and doubly periodic wave solutions for the kersten - krasilshchik coupled kdv - mkdv system _ chaos , solitons and fractals _ * 19 * , 1141 - 1146 .",
    "hydon , p.e .",
    "( 2000 ) . _ symmetry methods for differential equations_. cambridge texts in applied mathematics .",
    "cambridge ( u.k . ) : cambridge university press .",
    "kichenassamy , s. , olver , p.  ( 1993 ) .",
    "existence and non - existence of solitary wave solutions to higher order model evolution equations , siam j.  math .",
    "23 * , 1141 - 1166 .",
    "lawden , d.f .",
    "( 1989 ) . _ elliptic functions and applications_. appl .",
    "math .  sciences * 80*. new york : springer verlag .",
    "li , z .- b . , liu , y .- p .",
    "rath : a maple package for finding travelling solitary wave solutions to nonlinear evolution equations , _ comp .",
    "* 148 * , 256 - 266 .",
    "liu , y .- p . , li , z .- b .",
    "( 2002a ) .",
    "an automated jacobi elliptic function method for finding periodic wave solutions to nonlinear evolution equations , _ chinese phys .",
    "* 19 * , 1228 - 1230 .",
    "liu , y .- p . , li , z .- b .",
    "( 2002b ) .",
    "the link between the hyperbolic tangent function method and jacobi elliptic function method .",
    "preprint . submitted to _ phys .",
    "a_.    malfliet , w.  ( 1992 ) .",
    "solitary wave solutions of nonlinear wave equations , _ am .",
    "j.  phys . _",
    "* 60 * , 650 - 654 .",
    "malfliet , w.  ( 2003 ) .",
    "the tanh method : a tool for solving certain classes of nonlinear evolution and wave equations , preprint , physics department , university of antwerp , belgium ( 2003 ) .",
    "malfliet , w. , hereman w.  ( 1996 ) .",
    "the tanh method : i.  exact solutions of nonlinear evolution and wave equations , _ phys .",
    "scripta _ * 54 * , 563 - 568 .",
    "parkes , e.j . , duffy , b.r .",
    "an automated tanh - function method for finding solitary wave solutions to non - linear evolution equations , _ comp .",
    "* 98 * , 288 - 300 .",
    "parkes , e.j . , duffy , b.r .  and",
    "abbott , p.c .",
    "the jacobi elliptic - function method for finding periodic - wave solutions to nonlinear evolution equations .",
    "lett .  a _ * 295 * , 280 - 286 .",
    "parkes , e.j , zhu , z. , duffy , b.r . ,",
    "huang , h.c .",
    "sech - polynomial travelling solitary - wave solutions of odd - order generalized kdv equations , _ phys .",
    "lett .  a _ * 248 * , 219 - 224 .",
    "sirendaoreji , s.j .",
    "( 2003 ) . auxiliary equation method for solving nonlinear partial differential equations , _ phys .",
    "lett .  a _ * 309 * , 387 - 396 .",
    "sirendaoreji , s.j .",
    "new exact travelling wave solutions for the kawahara and modified kawahara equations , _ chaos , solitons and fractals _ * 19 * , 147 - 150 .",
    "wang , d.  ( 2001a ) . _",
    "elimination methods_. new york : springer verlag .",
    "wang , d.  ( 2001b ) . a generalized algorithm for computing characteristic sets , in : computer mathematics , proc .",
    "5th asian symp .",
    "( ascm 2001 ) , ( k.  shirayanagi , k.  yokoyama , eds . ) , singapore : world scientific , pp .  165 - 174 .",
    "wang , d.  ( 2002 ) .",
    "charsets 2.0  a package for decomposing ( differential ) polynomial systems .",
    "available at : http://calfor.lip6.fr/@xmath460wang/.    wittkopf , a. , reid , g.  ( 2003 ) .",
    "introduction to the rif package version 1.1 .",
    "see : http://www.cecm.sfu.ca/@xmath460wittkopf/rif.html .",
    "yan , z.  ( 2003 ) . the extended jacobian elliptic function expansion method and its applications in the generalized hirota - satsuma coupled kdv system , _ chaos , solitons and fractals _ * 15 * , 575 - 583 .",
    "yang , z.j .",
    "traveling - wave solutions to nonlinear evolution and wave equations , _ j.  phys .  a : math .",
    "* 27 * , 2837 - 2856 .",
    "yao , r .- x .",
    ", li , z .- b .",
    "( 2002a ) .",
    "new exact solutions for three nonlinear evolution equations , _ phys .",
    "lett .  a _ * 297 * , 196 - 204 .    yao , r .- x . ,",
    "li , z .- b .",
    "( 2002b ) .",
    "new solitary wave solutions for nonlinear evolution equations , _ chinese phys .",
    "lett . _ * 11 * , 864 - 867 .",
    "zheng , x .- d . , xia , t .- c . , zhang , h .- q .  ( 2002 ) .",
    "new exact traveling wave solutions for compound kdv - burgers equations in mathematical physics , _ appl .",
    "e - notes _ * 2 * , 45 - 50 .",
    "we illustrate the use of the package ` pdespecialsolutions.m ` on a pc .",
    "users should have access to _ mathematica _ v.  3.0 or higher .",
    "in[3 ] = pdespecialsolutions [          { d[u[x , t],t]-alpha*(6*u[x , t]*d[u[x , t],x]+d[u[x , t],{x,3}])+           2*beta*v[x ,",
    "t]*d[v[x , t],x ] = = 0 ,            d[v[x , t],t]+3*u[x , t]*d[v[x , t],x]+d[v[x , t],{x,3 } ] = = 0 } ,            { u[x , t],v[x , t ] } , { x , t } , { alpha , beta } , form - > sech ,            verbose - > true , inputform - > false , numerictest - > true ,            symbolictest - > true , solvealgebraicsystem - > true            ( * , degreeofthepolynomial - > { m[1 ] - > 2 , m[2 ] - > 1 } * ) ] ;   ....          the format of ` pdespecialsolutions ` is similar to the _ mathematica _ function dsolve .",
    "the output is a list of sub - lists with solutions and constraints .",
    "the backus - naur form of the function is : @xmath463 \\\\   \\langle options \\rangle & \\to &   \\verb+form+\\rightarrow \\langle form \\rangle \\ ; | \\ ;   \\verb|verbose|\\rightarrow \\langle bool \\rangle \\ ; | \\\\ * & & \\verb|inputform|\\rightarrow \\langle bool \\rangle \\ ; | \\\\ * & & \\verb|degreeofthepolynomial| \\rightarrow   \\langle list\\ , of\\ , rules \\rangle \\ ; | \\\\ * & & \\verb|solvealgebraicsystem|\\rightarrow \\langle bool \\rangle \\ ; | \\\\ * & & \\verb|numerictest| \\rightarrow \\langle bool \\rangle \\ ;     \\langle form \\rangle & \\to & \\mathtt{tanh }   \\ ; | \\ ; \\mathtt{sech } \\ ; | \\;\\mathtt{sechtanh }   \\ ; | \\ ; \\mathtt{jacobicn } \\ ; | \\ ; \\mathtt{jacobisn } \\\\ \\langle bool \\rangle & \\to & \\mathtt{true } \\ ; | \\ ; \\mathtt{false } \\\\",
    "\\langle list\\ , of\\ , rules \\rangle & \\to & \\mathtt { \\ { m[1 ] \\rightarrow integer , m[2 ] \\rightarrow integer , ... \\ } } \\end{aligned}\\ ] ] .001pt the default value of ` form ` is ` tanh ` . the package ` pdespecialsolutions.m ` has been tested on both unix work stations and pcs with _ mathematica _",
    "versions 3.0 , 4.0 and 4.1 . a test set of over 50 pdes and half a dozen odes was used .",
    "[ lastpage ]"
  ],
  "abstract_text": [
    "<S> algorithms are presented for the tanh- and sech - methods , which lead to closed - form solutions of nonlinear ordinary and partial differential equations ( odes and pdes ) . </S>",
    "<S> new algorithms are given to find exact polynomial solutions of odes and pdes in terms of jacobi s elliptic functions .    </S>",
    "<S> for systems with parameters , the algorithms determine the conditions on the parameters so that the differential equations admit polynomial solutions in tanh , sech , combinations thereof , jacobi s sn or cn functions . </S>",
    "<S> examples illustrate key steps of the algorithms .    </S>",
    "<S> the new algorithms are implemented in _ </S>",
    "<S> mathematica_. the package pdespecialsolutions.m can be used to automatically compute new special solutions of nonlinear pdes . </S>",
    "<S> use of the package , implementation issues , scope , limitations , and future extensions of the software are addressed .    </S>",
    "<S> a survey is given of related algorithms and symbolic software to compute exact solutions of nonlinear differential equations .    </S>",
    "<S> [ firstpage ] </S>"
  ]
}