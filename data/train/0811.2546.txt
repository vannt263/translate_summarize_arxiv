{
  "article_text": [
    "a cnf formula over variables @xmath7 is a conjunction of clauses @xmath8 where each clause is a disjunction of one or more literals .",
    "a formula is said to be a @xmath9-cnf if every clause contains exactly @xmath9 literals . in the problem @xmath9-sat the question is , given a @xmath9-cnf , decide if it has a satisfying assignment ( find such an assignment for the search problem ) . in the max-@xmath9-sat problem the goal is to find an assignment that satisfies as many clauses as possible .",
    "the problem @xmath9-sat for @xmath10 is one of the first problems proved to be np - complete problems and serves as a model problem for many algorithm and complexity concepts since then . in particular",
    ", hstad @xcite proved that the max-@xmath9-sat problem is np - hard to approximate within ratio better than 7/8 .",
    "these worst case hardness results motivate the study of the typical case complexity of those problems , and a quest for probabilistic or heuristic algorithms with satisfactory performance , in the typical case . in this paper",
    "we analyze the performance of one of the simplest algorithms for ( max-)@xmath9-sat , the local search algorithm , on random planted instances .",
    "[ [ the - distribution . ] ] the distribution .",
    "+ + + + + + + + + + + + + + + + +    let us start with planted instances .",
    "one of the most natural and well studied probability distributions on the set of 3-cnfs is the uniform distribution @xmath11 on the set of 3-cnfs with a given clauses - to - variables ratio @xcite . it can be constructed and sampled as follows .",
    "fix the number @xmath12 of 3-clauses as a function of the number @xmath2 of variables .",
    "the elements of @xmath11 are 3-cnfs generated by selecting @xmath12 clauses over variables @xmath7 .",
    "clauses are chosen uniformly at random from the set of possible clauses , and so the probability of every 3-cnf from @xmath11 is the same .",
    "an important parameter of such cnfs is the _ clause - to - variable ratio _ , @xmath13 , or _ density _ of the formula .",
    "we will use the density of a 3-cnf rather than the number of clauses , and so we write @xmath14 instead of @xmath11",
    ". density can also be a function of @xmath2 .    however , the typical case complexity for this distribution is not very interesting except for a very narrow range of densities .",
    "the reason is that the random 3-sat under this distribution demonstrates a sharp satisfiability threshold in the density @xcite . a random 3-cnf with density below the threshold ( estimated to be around 4.2 ) is satisfiable whp ( with high probability , meaning that the probability tends to 1 as @xmath2 goes to infinity ) , and a 3-cnf with density above the threshold is unsatisfiable whp .",
    "therefore the trivial algorithm outputting yes or no by just counting the density of a 3-cnf gives a right answer to 3-sat whp . for more results on the threshold see @xcite",
    "it is also known that , as the density grows , the number of clauses satisfied by a random assignment differs less and less from the maximal number of satisfiable clauses .",
    "if density is _ infinite _ ( meaning it is an unbounded function of @xmath2 ) , then whp this difference becomes negligible , i.e.  @xmath15 .",
    "therefore , distribution @xmath14 is not very interesting for max-3-sat , at least when density is large , as one can get whp a very good approximation just by checking a random assignment",
    ".    a more interesting and useful distribution is obtained from @xmath14 by conditioning on satisfiability : such distribution is uniform and its elements are the satisfiable 3-cnfs . then the problem is to find or approximate a satisfying assignment knowing it exists .",
    "unfortunately , to date there are no techniques to tackle such problems ( see , e.g. , @xcite ) , particularly , to sample the satisfiable distribution .",
    "a good approximation for such a distribution is the planted distribution @xmath16 , which is obtained from @xmath17 by conditioning on satisfiability by a specific `` planted '' assignment . to construct an element of a planted distribution we select an assignment of a set of @xmath2 variables and then uniformly at random include @xmath18 clauses satisfied by the assignment selected .",
    "some attempts have been made to define a better approximation of the satisfiable distribution , see , e.g.  @xcite , however , the analysis of such distributions is difficult and it is not clear if they are closer to the distribution sought .",
    "another interesting feature of the planted distribution is that there is a hope that it is possible to design an algorithm that solves all planted instances whp .",
    "some candidate algorithms were suggested in @xcite .",
    "algorithm from @xcite and @xcite use different approaches to solve planted 3-sat of high density .",
    "experiments show that the algorithm from @xcite achieves the goal , but a rigorous analysis of this algorithm is not yet made . for a wider survey on sat algorithms the reader",
    "is referred to @xcite .",
    "[ [ the - algorithm . ] ] the algorithm .",
    "+ + + + + + + + + + + + + +    the local search algorithm ( ls ) is one of the oldest heuristics for sat that has been around since the eighties .",
    "numerous variations of this method have been proposed since then , see , e.g. , @xcite .",
    "we study one of the most basic versions of ls , which , given a cnf , starts with a random assignment to its variables , and then on each step chooses at random a variable such that flipping this variable increases the number of satisfied clauses , or stops if such a variable does not exist .",
    "thus ls finds a random local optimum accessible from the initial assignment .",
    "ls has been studied before .",
    "the worst - case performance of pure ls is not very good : the only known lower bound for local optima of a @xmath9-cnf is @xmath19 of clauses satisfied , where @xmath20 is the number of all clauses @xcite . in @xcite , it is shown that if density of 3-cnfs is linear , that is , @xmath21 , then ls solves whp a random planted instance .",
    "finally , in @xcite , we gave an estimation of the dependence of the number of clauses ls typically satisfies and the density of the formula .",
    "often visualization of the number of clauses satisfied by an assignment is useful : assignments can be thought of as points of a landscape , and the elevation of a point corresponds to the number of clauses unsatisfied , the higher the point is , the less clauses it satisfies .",
    "it is suspected that ` topographic ' properties of such a landscape are responsible for many complexity properties of satisfiability instances .",
    "for example , it is believed that the hardness of random cnfs whose density is close to the satisfiability threshold is due to the geometry of the satisfying assignments .",
    "they tend to concentrate around several centers , that make converging to a solution more difficult @xcite .",
    "as we shall see the performance of ls is closely related to geometric properties of the assignments , and so we hope that the study of ls may lead to a better understanding of those properties .    the behavior of other sat / maxsat algorithms have been studied before .",
    "for example , the random walk has been analyzed in @xcite and then in @xcite .",
    "a message passing type algorithm , warning propagation , is studied in @xcite .    [",
    "[ our - contribution . ] ] our contribution .",
    "+ + + + + + + + + + + + + + + + +    we classify the performance of ls for all densities higher than an arbitrary constant .",
    "in particular , we demonstrate that ls has a threshold in its performance .",
    "the main result is the following theorem .    [ the : main ] ( 1 ) let @xmath22 , and @xmath23 .",
    "then the local search whp finds a solution of an instance from @xmath16 .",
    "+ ( 2 ) let @xmath24 , @xmath25 a constant , and @xmath26 .",
    "then the local search whp does not find a solution of an instance from @xmath16 .    to prove part ( 1 ) of the theorem  [ the : main ] we show that under those conditions all the local optima of a 3-cnf whp are either satisfying assignments , that is , global optima , or obtained by flipping almost all the values of planted solution , and so are located on the opposite side of the set of assignments . in the former case ls finds a satisfying assignment , while whp it does not reach the local optima of the second type .",
    "we also show that that for any constant density @xmath4 there is @xmath5 such that the assignment produced by ls on an instance from @xmath16 or @xmath14 satisfies at least @xmath6 clauses less than the maximal number of satisfiable clauses .",
    "unfortunately , it is somewhat difficult to run computational experiments on cnfs of infinite density , as in order to have @xmath27 sufficiently large @xmath2 must be prohibitively big .",
    "however , experiments we were able to conduct agree with the results .",
    "another region where ls can find a solution of the random planted 3-cnf is the case of very low density .",
    "methods similar to lemma  [ lem : close - isolated ] and theorem  [ the : finite - density ] show that this low density transition happens around @xmath28 .",
    "however , we do not go into details here .",
    "usually the main difficulty of analysis of algorithms for random sat is to show that as an algorithm runs , some kind of randomness of the current assignment is kept .",
    "this property allows one to use ` card games ' , wormald s theorem , and differential equations as in @xcite , or relatively simple probabilistic constructions , such as martingales , as in @xcite . for ls randomness",
    "can not be assumed after just a few iterations of the algorithm , which makes its analysis more difficult .",
    "this is why the most difficult part of the proof is to identify to which extent assignments produced by ls as it runs remain random , while most of the probabilistic computations are fairly standard .",
    "the paper is organized as follows . after giving several necessary definitions in section  2 , we prove in section  3 , that above the threshold established in theorem  [ the : main ] planted 3-cnfs do not have local optima that can be found by ls , other than satisfying assignments . in section  4",
    "we show that below the threshold there are many such optima , and that ls necessarily gets stuck into one of them .",
    "[ [ sat . ] ] sat .",
    "+ + + +    a 3-cnf is a conjunction of _ 3-clauses_. as we consider only 3-cnfs , we will always call them just clauses . depending on the number of negated literals ,",
    "we distinguish 4 types of clauses : @xmath29 , @xmath30 , and @xmath31 .",
    "if @xmath32 is a 3-cnf over variables @xmath7 , an _ assignment _ of these variables is a boolean @xmath2-tuple @xmath33 , so the value of @xmath34 is @xmath35 .",
    "the _ density _ of a 3-cnf @xmath32 is the number @xmath13 where @xmath20 is the number of clauses , and @xmath2 is the number of variables in @xmath32 .    the _ uniform _ distribution of 3-cnfs of density @xmath4 ( density may be a function of @xmath2 ) , @xmath14 is the set of all 3-cnfs containing @xmath2 variables and @xmath18 clauses equipped with the uniform probability distribution on this set . to sample a 3-cnf accordingly",
    "to @xmath14 one chooses uniformly and independently @xmath18 clauses out of @xmath36 possible clauses .",
    "thus , we allow repetitions of clauses , but not repetitions of variables within a clause .",
    "_ random 3-sat _ is the problem of deciding the satisfiability of a 3-cnf randomly sampled accordingly to @xmath14 . for short",
    ", we will call such a random formula a 3-cnf from @xmath14 .",
    "the _ uniform planted _ distribution of 3-cnf of density @xmath4 is constructed as follows .",
    "first , choose at random a boolean @xmath2-tuple @xmath37 , a _ planted _ satisfying assignment .",
    "then let @xmath38 be the uniform probability distribution over the set of all 3-cnfs over variables @xmath7 with density @xmath4 and such that @xmath37 is a satisfying assignment .",
    "for our goals we can always assume that @xmath37 is the all - ones tuple , that is a 3-cnf belongs to @xmath38 if and only if it contains no clauses of the type @xmath39 .",
    "we also simplify the notation @xmath38 by @xmath16 . to sample a 3-cnf accordingly",
    "to @xmath16 one chooses uniformly and independently @xmath18 clauses out of @xmath40 possible clauses of types @xmath41 , and @xmath31 .",
    "_ random planted 3-sat _ is the problem of deciding the satisfiability of a 3-cnf from @xmath16 .",
    "the problems _ random max-3-sat _ and _ random planted max-3-sat _ are the optimization versions of random 3-sat and random planted 3-sat .",
    "the goal in these problems is to find an assignment that satisfies as many clauses as possible .",
    "although the two problems usually are treated as maximization problems , it will be convenient for us to consider them as problems of minimizing the number of unsatisfied clauses .",
    "since we always evaluate the absolute error of our algorithms , not the relative one , such transformation does not affect the results .",
    "[ [ local - search . ] ] local search .",
    "+ + + + + + + + + + + + +    a formal description of the local search algorithm ( ls ) is given in fig .",
    "[ fig : ls ] .",
    "input : 3-sat formula @xmath32 over variables @xmath7 .",
    "+ output : boolean @xmath2-tuple @xmath42 , which is a local minimum of @xmath32 .",
    "+ algorithm : + * choose * uniformly at random a boolean @xmath2-tuple @xmath37 + * let * @xmath43 be the set of all variables @xmath34 such that the number of clauses that can be made satisfied +   by flipping the value of @xmath34 is strictly greater than the number of those made unsatisfied + * while * @xmath43 is not empty +  * pick * uniformly at random a variable @xmath44 from @xmath43 + the value of @xmath44 + @xmath43    observe that ls stops when reaches a local minimum of the number of unsatisfied clauses .    given an assignment @xmath37 and a clause @xmath25 it will be convenient to say that @xmath25 _ votes _ for a variable @xmath34 to have value 1 if @xmath25 contains literal @xmath34 and its other two literals are unsatisfied . in other words if either ( a ) @xmath37 assigns @xmath34 to 0 , @xmath25 is not satisfied by @xmath37 , and it will be satisfied if the value of @xmath34 is changed , or ( b ) the only literal in @xmath25 satisfied by @xmath37 is @xmath34 .",
    "similarly , we say that @xmath25 votes for @xmath34 if @xmath25 contains the negation of @xmath34 and its other two literals are not satisfied . using this terminology",
    "we can define set @xmath43 as the set of all variables such that the number of votes received to change the current value is greater than the number of those to keep it .",
    "[ [ random - graphs . ] ] random graphs .",
    "+ + + + + + + + + + + + + +    probabilistic tools we use are fairly standard and can be found in the book @xcite .",
    "let @xmath32 be a 3-cnf with variables @xmath7 .",
    "the _ primal graph _",
    "@xmath45 of @xmath32 is the graph with vertex set @xmath46 and edge set @xmath47 .",
    "the _ hypergraph _",
    "@xmath48 _ associated with _",
    "@xmath32 is a hypergraph , whose vertices are the variables of @xmath32 and the edges are the 3-element sets of variables belonging to the same clause . note that if @xmath49 , then @xmath48 is a random 3-hypergraph with @xmath2 vertices and @xmath18 edges , but @xmath50 is not a random graph .",
    "we will need the following properties that a graph @xmath45 of not too high density has .",
    "[ lem : random ] let @xmath51 for a certain constant @xmath52 , and let @xmath49 .",
    "\\(1 ) for any @xmath53 , whp all the subgraphs of @xmath45 induced by at most @xmath54 vertices have the average degree less than  5 .",
    "\\(2 ) the probability that @xmath45 has a vertex of degree greater than @xmath55 is @xmath56 .",
    "\\(1 ) this part of the lemma is very similar to proposition  13 from @xcite , and is proved in a similar way .",
    "let @xmath57 be a fixed set of variables with @xmath58 .",
    "the number of 3-element sets of variables that include 2 variables from @xmath43 is bounded from above by @xmath59 for each of them the probability that this set is the set of variables of one of the random clauses chosen for @xmath32 ( we ignore the type of the clause ) equals @xmath60 thus , the probability that @xmath61 of them are included as clauses is at most @xmath62 let @xmath63 . using the union bound , the probability that there exists a required set @xmath43 with at most @xmath64 variables is at most @xmath65    \\(2 ) the probability that the degree of a fixed vertex is at least @xmath66 is bounded from above by @xmath67 where @xmath68 is",
    "the probability that some particular @xmath66 random clauses include @xmath69 , and @xmath70 is the number of @xmath66-element sets of clauses .",
    "then it is not hard to see that @xmath71 as @xmath2 goes to infinity .",
    "several times we need the following corollary from azuma s inequality for supermartingales ( see lemma  1 from @xcite ) .",
    "[ obs : azuma_c ] ( 1 ) let @xmath72 be a supermartingale such that @xmath73 and @xmath74 for some @xmath25 .",
    "then @xmath75 for any @xmath76 .",
    "\\(2 ) this inequality implies that if @xmath77 and @xmath78 then the process @xmath79 is a supermartingale and we have the following inequality @xmath80    the following lemma is a simple corollary of chernoff bound .",
    "[ lem : vector - chernoff ] let @xmath81 be integers , @xmath82 a positive real , and let @xmath83 be some real constants .",
    "there are constants @xmath84 and @xmath85 such that we have @xmath86 for any random variables @xmath87 and @xmath88 such that @xmath89 and @xmath90 for some binomial random variables @xmath91 .",
    "let @xmath92 .",
    "it is easy to see that event @xmath93 implies occurrence of at least one of the events from the set @xmath94 indeed , inequality @xmath95 can be derived from inequalities , opposite to the ones in @xmath96 and @xmath89 .",
    "application of chernoff bound gives us inequalities @xmath97    thus if we set @xmath98 , @xmath99 then using union bound we can conclude that inequality ( [ eq : vector - chernoff ] ) holds .",
    "in this section we prove the first statement of the theorem  [ the : main](1 ) .",
    "this will be done as follows .",
    "first , we show that if a 3-cnf has high density , that is , greater than @xmath100 for some @xmath3 then whp all the local minima that do not satisfy the cnf  we call such minima _ proper _  concentrate very far from the planted assignment .",
    "this is the statement of proposition  [ pro : minima1 ] below .",
    "then we use lemma  [ lem : no - zero - flood ] to prove that starting from a random assignment ls whp does not go to that remote region .",
    "therefore the algorithm does not get stuck to a local minimum that is not a solution .",
    "several times we will need the following observation that can be checked using the inequality@xmath101 .",
    "for any @xmath2 , @xmath5 , and @xmath102 with @xmath103 @xmath104    we need the following two lemmas .",
    "recall that the planted solution is the all - ones one .",
    "[ lem : no - zero - flood ] let @xmath105 for some constant @xmath106 , and let constants @xmath107 be such that @xmath108 .",
    "whp any assignment with @xmath109 zeros satisfies more clauses than any assignment with @xmath110 zeros .",
    "let @xmath111 be some vectors with @xmath109 and @xmath110 zeros , respectively .",
    "let @xmath25 be a random clause , then ( 1 ) with probability @xmath112 all its literals are positive , ( 2 ) with probability @xmath113 two literals are positive and similar ( 3 ) with probability @xmath113 one literal is positive .",
    "the probabilities that the clause is satisfied by @xmath37 in these cases are @xmath114 and @xmath115 , respectively .",
    "hence the total probability of a clause to be satisfied by @xmath37 equals @xmath116 .",
    "a similar result holds for @xmath42 .",
    "thus the expectation of the number of clauses satisfied by @xmath37 and @xmath42 in a random formula equals @xmath117 and @xmath118 respectively , thus applying lemma  [ lem : vector - chernoff ] we conclude that @xmath119 for some @xmath120 .",
    "there are @xmath121 assignments , hence , application of the union bound finishes proof of the lemma .    [",
    "lem : close - minima ] let @xmath122 for some @xmath106 ( not necessarily @xmath123 ) .",
    "there is @xmath53 such that for @xmath49 whp for any proper local minimum @xmath37 of @xmath32 the number of variables assigned to  0 by @xmath37 is either less than @xmath64 , or greater than @xmath124 .",
    "let @xmath125 be the set of all variables that @xmath37 assigns to 0 .",
    "let @xmath126 be event `` for every @xmath127 the number of clauses voting for @xmath34 to be 1 is less than or equal to the number of clauses voting for @xmath34 to be 0 '' . since @xmath37 is a local minimum",
    ", @xmath126 is the case for @xmath37 .",
    "it is easy to see that event @xmath126 implies event @xmath128 `` the total number of votes given by clauses for variables in @xmath129 to be 1 is less than or equal to the total number of votes given by clauses for variables in @xmath129 to be 0 '' . to bound the probability of @xmath126 we will bound the probability of @xmath130 .",
    "let @xmath25 be a random clause .",
    "it can contribute from 0 to 3 votes for variables in @xmath129 to be one and 0 or 1 vote for them to remain zero .",
    "let us compute , for example , the probability that it contributes exactly two votes for variables in @xmath129 to become one .",
    "it happens if @xmath25 is of type @xmath30 , both its positive variables are in @xmath129 and the negative variable is outside of @xmath129 .",
    "probability of this event is @xmath131 .",
    "so the expectation of the number of clauses voting for exactly 2 variables in @xmath129 to be 1 is @xmath132 .",
    "the expectations of the numbers of clauses voting for three and one variables to be 1 are @xmath133 and @xmath134 , respectively .",
    "a clause votes for a variable in @xmath129 to remain 0 if its type is @xmath135 , one of its negative literals is not in @xmath129 , and two other literals are in @xmath129 , or if its type is @xmath30 and all the variables in it belong to @xmath129 .",
    "thus the expectation of the number of clauses voting for variables in @xmath129 to remain 0 is @xmath136 .    hence the expectation of the number of votes for variables in @xmath129 to flip equals @xmath137 and expectation of the number of votes for variables in @xmath129 to remain 0 equals @xmath138",
    "if @xmath139 then @xmath140 therefore we can apply lemma  [ lem : vector - chernoff ] to the votes for and against 0s and get the following bound @xmath141 for some @xmath142 . then we can bound number of votes for a flip from below by @xmath143 for some constant @xmath144 and we can bound the number of sets @xmath129 of size @xmath145 as @xmath146    therefore if @xmath147 then union bound implies that whp there is no set @xmath129 such that @xmath130 happens .",
    "it is easy to see that for @xmath148 and @xmath149 that is close enough to 1 the above inequality holds , which finishes the proof of the lemma .",
    "now suppose that @xmath37 is a proper local minimum of @xmath49 . there is a clause @xmath150 that is not satisfied by @xmath37 . without loss of generality ,",
    "let the variables in @xmath25 be @xmath151 , and let the variable assigned 0 be @xmath152 .",
    "thus , clause @xmath25 votes for @xmath152 to be flipped to 1 . since @xmath37 is a local minimum there must a clause that is satisfied , that becomes unsatisfied should @xmath152 flipped .",
    "we call such a clause a _ support _ clause for the 0 value of @xmath152 . in any support clause",
    "the supported variable is negated , and therefore any support clause has the type @xmath135 or @xmath30 .",
    "a variable of a cnf is called _ @xmath9-isolated _ if it appears positively in at most @xmath9 clauses of the type @xmath135 .",
    "the _ distance _ between variables of a cnf @xmath32 is the length of the shortest path in @xmath45 connecting them .",
    "[ lem : scarcity ] if @xmath153 and @xmath154 then for any integers @xmath155 and for a random @xmath49 whp there are no two @xmath156-isolated variables within distance @xmath157 from each other .",
    "let @xmath69 be some variable .",
    "the probability that it is @xmath156-isolated can be computed as @xmath158 for any @xmath159 .    by lemma  [ lem : random](2 ) , the degree of every vertex of @xmath45 whp does not exceed @xmath66 . hence , there are at most @xmath160 vertices at distance @xmath157 from @xmath69 . applying",
    "the union bound we can estimate the probability that there is a @xmath156-isolated vertex at distance @xmath157 from @xmath69 as @xmath161 . finally , taking into account the probability that @xmath69 itself is @xmath156-isolated , and applying the union bound over all vertices of @xmath45 we obtain that the probability that two @xmath156-isolated vertices exists at distance @xmath157 from each other can be bounded from above by @xmath162 thus for @xmath153 whp there are no two such vertices .    [",
    "pro : minima1 ] let @xmath22 , and @xmath23 .",
    "then whp proper local minima of a 3-cnf from @xmath16 have at most @xmath163 ones .",
    "let @xmath49 be a random planted instance .",
    "suppose that @xmath37 is a proper local minimum that has more than @xmath163 ones .",
    "we use the following observation .",
    "let @xmath25 be a clause not satisfied by @xmath37 .",
    "then it contains at least one variable @xmath34 that is assigned to zero by @xmath37 .",
    "the assignment @xmath37 is a local minimum , so there must be a clause @xmath164 that is satisfied only by @xmath34 . hence , @xmath164 is a support clause , and contains a variable @xmath44 which is assigned to zero by @xmath37 .",
    "variables @xmath34 and @xmath44 are at distance  @xmath165 . setting @xmath166 and @xmath167 , by lemma  [ lem : scarcity ]",
    ", we conclude that one of them is not 11-isolated .",
    "set @xmath168 , @xmath169 and consider the set @xmath170 of all variables assigned to zero by @xmath37 that are not 11-isolated . by the observation above this set is non - empty . on the other hand , by lemma  [ lem : close - minima ] , @xmath171 is @xmath54 for some @xmath53 .",
    "consider @xmath172 .",
    "it appears positively in at least 10 clauses of the type @xmath135 .",
    "each of these clauses is either unsatisfied or contains a variable assigned to 0 .",
    "suppose there are @xmath9 unsatisfied clauses among them .",
    "since @xmath37 is a local minimum , to prevent @xmath69 from flipping , @xmath69 must be supported by at least @xmath9 support clauses , each of which contains a variable assigned to  0 .",
    "thus , at least 6 neighbors of @xmath69 in @xmath45 are assigned to  0 .",
    "any two neighbors of @xmath69 are at distance 2 . by lemma  [ lem : scarcity ]",
    "at least 5 of the neighbors assigned to  0 are not 11-isolated , and therefore belong to @xmath170 .",
    "thus the subgraph induced by @xmath170 in @xmath45 has the average degree greater than 5 , which is not possible by lemma  [ lem : random](1 ) .",
    "now we are in a position to prove statement ( 1 ) of theorem  [ the : main ] .    by lemma",
    "[ lem : no - zero - flood ] for a @xmath49 whp any assignment with @xmath173 variables equal to  1 , where @xmath174 , satisfies more clauses than any assignment with @xmath163 equal to  1 .",
    "then , whp a random initial assignment for ls assigns between @xmath175 and @xmath176 of all variables to  1 .",
    "therefore , whp ls never arrives to a proper local minimum with less than @xmath163 variables equal to  1 , and , by proposition  [ pro : minima1 ] , to any proper local minimum .",
    "we now prove statement ( 2 ) of theorem  [ the : main ] .",
    "the overall strategy is the following .",
    "first , we show , proposition  [ pro : minima2 ] , that in contrast to the previous case there are many proper local minima in the close proximity of the planted assignment",
    ". then we show , proposition  [ pro : failing ] , that those local minima are located so that they intercept almost every run of ls , and thus almost every run is unsuccessful .",
    "we start off with a technical lemma .",
    "a pair of clauses @xmath177 , @xmath178 is called a _ cap _",
    "if @xmath179 are 1-isolated , that is they do not appear in any clause of the type @xmath135 except for @xmath180 and @xmath181 , respectively , and @xmath182 are not 0-isolated ( see figure  [ fig : cap](a ) ) .",
    "we denote equality @xmath183 by @xmath184 .",
    "the proof is fairly standard , see , e.g.  the proof of theorem  4.4.4 in @xcite .",
    "we use the second moment method .",
    "the result follows from the fact that a cap has properties similar to the properties of _ strictly balanced graphs _",
    ", see @xcite .",
    "take some @xmath2 , and let @xmath87 be a random variable equal to the number of caps in a 3-cnf @xmath49 .",
    "straightforward calculation shows that the probability that a fixed 5-tuple of variables is a cap is @xmath186 .",
    "therefore @xmath187 .",
    "let @xmath57 be a fixed 5-tuple of variables , say , @xmath188 , and @xmath189 denote the event that @xmath57 forms a cap .",
    "for any other 5-tuple @xmath190 , the similar event is denoted by @xmath191 , and we write @xmath192 if these two events are not independent . by corollary  4.3.5 of @xcite it suffices to show that @xmath193    let @xmath194 .",
    "it is not hard to see that the only cases when @xmath191 and @xmath189 are not independent and the probability @xmath195 is significantly different from 0 is : @xmath196 and @xmath197 , or @xmath198 and @xmath199 , or @xmath200 and @xmath201 , or @xmath202 and @xmath203 .",
    "then , as before , it can be found that in each of these cases @xmath204 .",
    "let @xmath177 , @xmath178 be a cap and @xmath37 an assignment such that @xmath213 , and @xmath214 for all other @xmath215 .",
    "it is straightforward that @xmath37 is a proper local minimum . by lemma  [ lem : close - isolated ]",
    ", there is @xmath102 such that whp the number of such minima is at least @xmath64 .    before proving proposition  [ pro : failing ] ,",
    "we note that a construction similar to caps helps evaluate the approximation rate of the local search in the case of constant density on planted and also on arbitrary cnfs .",
    "a subformula @xmath216 is called a _ crown _ if the variables @xmath217 do not appear in any clauses other than @xmath218 ( see fig .",
    "[ fig : cap](b ) ) .",
    "the crown is satisfiable , but the all - zero assignment is a proper local minimum . for a cnf @xmath32 and an assignment @xmath37 to its variables , by @xmath219 and @xmath220",
    "we denote the maximal number of simultaneously satisfiable clauses and the number of clauses satisfied by @xmath37 , respectively .",
    "[ the : finite - density ] if density @xmath4 is such that @xmath221 for some @xmath222 and @xmath223 , then there is @xmath224 such that whp local search on a 3-cnf @xmath225 ( @xmath49 ) returns an assignment @xmath37 such that @xmath226 , where @xmath219 denotes the maximal number of clauses in @xmath32 that can be simultaneously satisfied and @xmath220 denotes the number of clauses satisfied by @xmath37 .",
    "as in the proof of lemma  [ lem : close - isolated ] , it can be shown that for @xmath4 that satisfies conditions of this theorem there is @xmath228 such that whp a random [ random planted ] formula has at least @xmath229 crowns .",
    "if @xmath4 is a constant , @xmath230 is also a constant . for a random assignment @xmath37 ,",
    "whp the variables of at least @xmath231 crowns are assigned zeroes .",
    "such an all - zero assignment of a crown can not be changed by the local search .        if @xmath232 then proposition  [ pro : failing ] follows from theorem  [ the : finite - density ] .",
    "so in what follows we assume that @xmath233 .",
    "the main tool of proving proposition  [ pro : failing ] is coupling of local search ( ls ) with the algorithm straight descent ( sd ) that on each step chooses at random a variable assigned to 0 and changes its value to 1 . obviously sd is not a practical algorithm , since to apply it we need to know the solution . for the purposes of our analysis we modify sd as follows . at each step",
    "sd chooses a variable at random , and if it is assigned 0 changes its value ( see fig .  [",
    "fig : sd](a ) ) .",
    "the algorithm ls is modified in a similar way ( see fig .  [",
    "fig : sd](b ) ) .",
    "[ lem : randomness ] if @xmath235 starts its work at a random vector with @xmath236 ones and after step @xmath234 , @xmath237 , it arrives to a vector with @xmath20 ones , then this vector is selected uniformly at random from all vectors with @xmath20 ones .",
    "let us denote the probability that at step @xmath234 sd arrives to vector @xmath37 , conditional to it starts from a vector with @xmath236 ones , by @xmath238 .",
    "we prove by induction on @xmath234 that @xmath239 for any @xmath240 with @xmath20 ones .",
    "we denote this number by @xmath241 .",
    "as the starting vector is random , it is obvious for @xmath242 .",
    "then for @xmath243 and any vector @xmath37 with @xmath20 ones we have @xmath244 where @xmath2 is the number of variables in the formula and @xmath245 goes over all vectors that can be obtained from @xmath37 by flipping a one into zero .",
    "it does not depend on a particular vector @xmath37 .        for a variable @xmath34 the probability that it is not considered for @xmath234 steps equals @xmath247 .",
    "so for @xmath248 this probability equals @xmath249 . applying the union bound over all variables we obtain the required statement .",
    "given 3-cnf @xmath32 and an assignment @xmath37 we say that a variable @xmath34 is _",
    "@xmath9-righteous _ if the number of clauses voting for it to be one is greater by at least @xmath9 than the number of clauses voting for it to be zero .",
    "let @xmath49 and @xmath37 be a boolean tuple .",
    "the _ ball _ of radius @xmath20 with the center at @xmath37 is the set of all tuples of the same length as @xmath37 at hamming distance at most @xmath20 from @xmath37 .",
    "let @xmath250 and @xmath251 be arbitrary functions and @xmath252 be an integer constant .",
    "we say that a set @xmath57 of @xmath2-tuples is _",
    "@xmath253-safe _ ,",
    "if for any @xmath254 the number of variables that are not @xmath252-righteous does not exceed @xmath251 .",
    "a run of sd is said to be _",
    "if at each step of this run the ball of radius @xmath250 with the center at the current assignment is @xmath253-safe .",
    "[ lem : neighbourhood ] let @xmath233 for some @xmath256 .",
    "for any constants @xmath257 and @xmath252 there is a constant @xmath258 such that , for any @xmath259 , whp a run of sd on @xmath49 is @xmath260-safe .",
    "consider a run of sd on @xmath49 with a random initial assignment .",
    "if sd starts its work at a tuple with @xmath236 ones , then at step @xmath234 it has @xmath261 ones .",
    "then by lemma  [ lem : randomness ] if at step @xmath234 the current assignment of sd has @xmath20 ones then it is drawn uniformly at random from all vectors with @xmath20 ones . event",
    "@xmath262 `` run of sd is not @xmath260-safe '' is a union of events `` at step @xmath234 of sd s run the ball of radius @xmath263 with the center at the current assignment is not @xmath264-safe '' .",
    "we will use the union bound to show that probability of _ unsafe _ is small .",
    "let @xmath37 be a boolean @xmath2-tuple having @xmath265 positions filled with 1s .",
    "since whp the number of 1s in the initial assignment is at least @xmath266 , for every step the number of 1s is at least @xmath266 .",
    "let @xmath129 be an arbitrary set of variables with @xmath267 .",
    "we consider events @xmath268 `` every variable @xmath127 is not @xmath9-righteous '' and @xmath128 `` the total number of votes given by clauses for variables in @xmath129 to be 1 does not exceed the total number of votes given by clauses for variables in @xmath129 to be 0 plus @xmath269 . ''    the same technique as in lemma  [ lem : close - minima ]",
    "can be used to show that the probability of @xmath130 and consequently the probability of @xmath126 is bounded above by @xmath270 for some constant @xmath271 , not dependent on @xmath149 . by inequality  ( [ equ :",
    "estimate ] ) , there are at most @xmath272 distinct assignments in the @xmath273-neighborhood of sd and @xmath274 distinct subsets of size @xmath275 .",
    "so for @xmath149 close to 1 the union bound implies that @xmath126 whp does not take place for any tuple , any subset of variables at any step which completes the proof of the lemma .",
    "we will need formulas that obtained from a random formula by adding some clauses in an ` adversarial ' manner .",
    "following @xcite we call distributions for such formulas _ semi - random_. however , the type of semi - random distributions we need is different from that in @xcite .",
    "let @xmath278 be some constant .",
    "a formula @xmath32 is sampled according to semi - random distribution @xmath279 if @xmath280 , where @xmath281 is sampled according to @xmath16 and @xmath282 contains at most @xmath283 clauses and is given by an adversary .",
    "let @xmath289 be obtained by application of lemma  [ lem : neighbourhood ] to @xmath281 .",
    "let @xmath290 .",
    "then for @xmath291 whp run of @xmath235 on @xmath281 is @xmath260-safe . since for @xmath2 large enough @xmath282 contains less than @xmath64 variables run of @xmath235 will be @xmath292-safe on @xmath293 .",
    "we define a set of auxiliary processes",
    "@xmath308 : @xmath309 the processes @xmath310 are designed so that every @xmath311 for @xmath312 satisfies inequality @xmath313 .",
    "indeed , suppose that @xmath314 . if @xmath315 then @xmath316 let @xmath317 .",
    "if @xmath318 for all @xmath319 then @xmath320 , @xmath321 , and the result follows from the assumption @xmath322 .",
    "if there is @xmath323 with @xmath324 then @xmath325      on the other hand let @xmath329 and @xmath326 be equal to the number of the most recent step for which @xmath330 .",
    "it is easy to see that @xmath331 . thus if at some step @xmath332 then there is @xmath333 such that @xmath334 . using the union bound we get the required inequality .",
    "[ lem : coupling1 ] let @xmath233 for some @xmath256 .",
    "let @xmath32 be a random 3-cnf sampled according to distribution @xmath335 such that run of @xmath235 on @xmath32 is whp @xmath336-safe for some constants @xmath337 with @xmath338 .",
    "let @xmath339 denote the pair of assignments produced by the pair of processes ( sd , ls ) on step @xmath20 .",
    "for any @xmath234 , whp the hamming distance between @xmath340 and @xmath341 does not exceed @xmath342 .",
    "let @xmath343 be the set of tuples at hamming distance at most @xmath342 from @xmath340 , and @xmath344 be event `` @xmath345 for some @xmath234 '' .",
    "ls starts with the same initial assignment as sd and we will show that it does not leave @xmath343 .    at some steps the distance between @xmath340 and @xmath341 remains the same , and at some it changes .",
    "let @xmath346 be the assignments produced by the algorithms after @xmath305 changes have taken place , and @xmath303 be the distance between them . if @xmath347 we have @xmath348 .",
    "indeed , the number of variables voted to be zero does not exceed @xmath349 and is at least twice less than number of variables that differ in @xmath340 and @xmath341 . since any change in the distance between the assignments happens",
    "if and only if a variable voted to be 0 or a variable at which @xmath340 and @xmath341 are different , we have the required inequality .",
    "now we can apply lemma  [ lem : strip_cross ] for @xmath350 setting @xmath351 and get that probability of ls leaving @xmath343 is less than @xmath352 .",
    "we say that a variable _ plays @xmath252-righteously in a run of ls _ if every time it is considered for flipping it is @xmath252-righteous . combining corollaries [ cor : run_is_safe ] and [ cor : they_are_close ]",
    "we obtain the following        therefore denoting the number of different assignments considered by ls by @xmath190 ( note that @xmath361 ) and observing that at each step the probability to consider a variable voted to be 0 is @xmath362 we obtain the following upper bound for the expectation of the number of non-@xmath252-righteous variables throughout the run : @xmath363 for arbitrary @xmath364 with @xmath365 .",
    "we apply markov inequality and obtain @xmath366 where @xmath367 denotes the number of variables that do not play @xmath252-righteously .",
    "now @xmath368 can be set to be @xmath369 .",
    "a clause @xmath370 is called a _ cap support _ if there are @xmath371 such that @xmath372 is a cap in @xmath32 . for a formula @xmath282",
    "we denote the set of variables that occur in it by @xmath373 .",
    "for a set of clauses @xmath374 we denote by @xmath375 a cnf formula constructed by conjunction of the clauses . for the sake of simplicity we will write @xmath376 instead of @xmath377 . in",
    "what follows it will be convenient to view a cnf as a sequence of clauses .",
    "note that representation of a cnf is quite natural when we sample a random cnf by generating random clauses . this way every clause occupies certain position in the formula .",
    "for a set of positions @xmath378 we denote the formula obtained from @xmath32 by removing all clauses except for occupying positions @xmath378 by @xmath379 .",
    "the set of variables occurring in the clauses in positions in @xmath378 will be denoted by @xmath380 .",
    "* let @xmath383 $ ] denote the set of the first @xmath9 positions of clauses in @xmath32 , @xmath384 be the set of all variables in @xmath32 ; * let @xmath385 be the set of positions from @xmath386 $ ] occupied by clauses that are cap supports in @xmath32 , and @xmath387 the set of variables that occur in clauses in positions @xmath385 ; * let @xmath388 be set of positions of @xmath32 occupied by clauses containing a variable from @xmath387 ; * let @xmath389 be the set of positions in @xmath32 occupied by clauses containing a variable from @xmath390 \\setminus s^{\\vf,\\nu}}\\right)$ ] ; * finally , let @xmath391 \\setminus ( s^{\\vf,\\nu } \\cup u^{\\vf,\\nu})$ ] ; * let also @xmath392 and @xmath393 .       and from @xmath390 \\setminus s^{\\vf,\\nu}}\\right)$ ] are shown as diamonds and circles , respectively . shaded rectangles with vertical and diagonal lines represent clauses from @xmath394 and @xmath395 , respectively . ]",
    "* @xmath401 ; * @xmath402 , that is variables from clauses from @xmath389 do not appear in the same clauses with variables from @xmath385 ; * @xmath403 , that is no variable occurs twice in the clauses from @xmath388 .",
    "\\(1 ) for a subset @xmath408 of all positions of clauses in @xmath409 let @xmath410 denote event `` @xmath408 is exactly the set of positions occupied by cap supports '' .",
    "obviously for any sets @xmath411 we have @xmath412 .",
    "thus positions of the cap supports are selected uniformly at random without repetition . by straightforward computation",
    "we have expectation of the number of cap supports among first @xmath413 clauses equal approximately @xmath414 and variance is bounded above by the expectation , so it follows from chebyshev inequality that random variable `` number of cap supports among first @xmath413 clauses '' is whp @xmath415 .",
    "\\(2 ) by lemma  [ lem : random](2 ) whp there is no variable that occurs in more than @xmath66 clauses .",
    "therefore @xmath416 and @xmath417 .",
    "these sets are randomly chosen from an @xmath2-element set , and therefore the probability they have a common element is at most @xmath418 . due to definition of @xmath419 and @xmath420",
    "we have @xmath421 .",
    "let us fix a formula @xmath32 selected accordingly @xmath16 and @xmath425 , and let @xmath420 correspond to @xmath419 as in lemma  [ lem : mu_and_nu ] .",
    "let @xmath426 and @xmath427 be subsets of @xmath428 $ ] such that @xmath429 , @xmath386 \\subseteq t_0 \\cup u_0 $ ] and let @xmath430 $ ] .",
    "we denote by @xmath431 a hypothesis stating that @xmath32 is such that @xmath432 , @xmath433 , @xmath434 and also @xmath402 , @xmath435 .",
    "we can bound probability of event @xmath436 as @xmath442 by lemma  [ lem : mu_and_nu ] probabilities of events @xmath443 and @xmath444 tend to 0 as @xmath2 approaches infinity . by lemma  [ lem : random ] ( 2 ) we have @xmath439 whp .",
    "thus we obtain the result .",
    "[ its_random ] if @xmath32 is selected according to @xmath16 conditioned to @xmath431 then formula @xmath445 \\setminus ( t_0 \\cup u_0)}\\ ] ] has the same distribution as if it was generated by picking clauses from all clauses over variables@xmath446)$ ] uniformly at random .",
    "let @xmath447 be the set of all clauses over variables in @xmath446)$ ] and @xmath448\\setminus(t_0\\cup u_0)$ ] .",
    "take a formula @xmath282 such that positions from @xmath449 of this formula are occupied by clauses from @xmath447 .",
    "it suffices to observe that the number of formulas @xmath450 such that @xmath451 , @xmath452 , @xmath453 , @xmath454 is the same for any @xmath282 .",
    "so since all possible formulas over variables from some set are equiprobable a random formula is generated by random sampling of clauses .",
    "we will bound probability of success of local search under a hypothesis of the form @xmath455 and apply lemma  [ lem : hypothesis ] to get the result .",
    "let @xmath456 be the exponent corresponding to @xmath4 by lemma  [ lem : innocence ] , and choose @xmath419 and @xmath420 such that @xmath457 .",
    "let @xmath458 and @xmath459 .",
    "we split formula @xmath32 into @xmath460 and @xmath461 \\setminus t_0}$ ] and first consider a run of ls applied to @xmath462 only .",
    "formula @xmath462 can in turn be considered as the conjunction of @xmath463 and @xmath464 \\setminus ( t_0 \\cup u_0)}$ ] . in fig .",
    "[ fig : sets ] formula @xmath465 consists of clauses shaded with vertical lines , formula @xmath466 of clauses shaded with diagonal lines and formula @xmath467 of clauses that are not shaded . by observation  [ its_random ] formula @xmath467 is sampled according to @xmath468 modulo names of variables where @xmath469 and @xmath470 are @xmath15 .",
    "so formula @xmath471 is sampled according to @xmath472 by lemma  [ lem : innocence ] the number of variables that do not play @xmath473-righteously during run of ls on @xmath462 is bounded from above by @xmath358 for a certain @xmath474 .",
    "we consider coupling @xmath475 of runs of ls on @xmath32 and @xmath462 , denoting assignments obtained by the runs of the algorithm at step @xmath234 by @xmath476 and @xmath477 respectively .",
    "let @xmath374 be the set of those variables which do not belong to @xmath296 ( squares and circles in fig .",
    "[ fig : sets ] ) .",
    "formula @xmath462 is a 3-cnf containing only variables from @xmath374 . for an assignment of values of all variables",
    "@xmath37 we will denote by @xmath478 its restriction onto variables from @xmath374 .",
    "we make process @xmath479 start with a random assignment @xmath480 to all variables , and @xmath481 with a random assignment @xmath482 to variables in @xmath374 , such that @xmath483 .",
    "now the algorithms work as follows . at every step a random variable @xmath34 is chosen .",
    "process @xmath479 makes its step , and process @xmath481 makes its step if @xmath484 .",
    "whp @xmath481 will run with at most @xmath358 variables that do not play @xmath473-righteously .",
    "let @xmath485 denote the set of such variables .",
    "variables in formula @xmath486 are selected uniformly at random so if @xmath487 then whp set @xmath129 does not intersect with @xmath485 .",
    "hence , every time @xmath479 considers some variable from @xmath129 it is @xmath473-righteous in @xmath462 and belongs to at most one clause of @xmath486 .",
    "therefore such a variable is at least @xmath165-righteous @xmath32 and is flipped to 1 , or stays 1 , whichever is to happen for @xmath481 .",
    "thus whp at every step of @xmath475 we have @xmath488 . in the rest of the proof",
    "we consider only this highly probable case .",
    "consider some cap support @xmath489 occupying a position @xmath490 $ ] and such that @xmath491 at time 0 , and a set @xmath492 of variables occurring in clauses that contain variables @xmath493 ( obviously @xmath494 ) .",
    "let @xmath495 be the clause that forms a cap with @xmath496 .",
    "we say that a variable is _ discovered _ at step @xmath234 if it is considered for the first time at step @xmath234 .",
    "let @xmath497 be an ordering of elements of @xmath492 according to the step of their discovery .",
    "in other words if variable @xmath498 is the first variable from @xmath492 that is discovered , @xmath499 was the last .",
    "in the case some variables are not considered at all , we place them in the end of the list in a random order .",
    "observe that all variables that play at least @xmath165-righteously are discovered at some step .",
    "all orderings of variables are equiprobable , hence , the probability of variables @xmath493 to occupy places @xmath500 and @xmath499 equals @xmath501 .",
    "we will call this ordering _",
    "unlucky_.    let us consider what happens if the order of discovery of @xmath492 is unlucky .",
    "all variables in @xmath502 play @xmath165-righteously , therefore once they are discovered by @xmath479 they equal to 1 .",
    "thus when @xmath503 are finally considered all clauses they occur in are satisfied , except for @xmath495 .",
    "so variables @xmath503 do not change their values and the clause @xmath495 remains unsatisfied by the end of the work of @xmath479 .    by lemma  [ lem : random](2 )",
    "whp no vertex has degree greater than @xmath55 , so the size of the set @xmath492 is bounded above by @xmath504 .",
    "thus the probability of event @xmath505``order of discovery of @xmath493 is unlucky '' is greater than @xmath506 .",
    "thus , the expectation of @xmath507 equals @xmath508 any variable whp occurs in clauses from @xmath388 at most once , hence there is no variable that occurs in the same clause with a variable from @xmath509 and a variable from @xmath510 for @xmath511 , @xmath512 .",
    "this implies that events of the form @xmath513 are independent .",
    "therefore random variable @xmath507 is bernoulli and , as its expectation tends to infinity , the probability that it equals to @xmath514 goes to 0 .",
    "since unlucky ordering of at least one cap support leads to failure of the ls this proves the result ."
  ],
  "abstract_text": [
    "<S> the local search algorithm ( or hill climbing , or iterative improvement ) is one of the simplest heuristics to solve the satisfiability and max - satisfiability problems . </S>",
    "<S> it is a part of many satisfiability and max - satisfiability solvers , where it is used to find a good starting point for a more sophisticated heuristics , and to improve a candidate solution . in this paper </S>",
    "<S> we give an analysis of local search on random planted 3-cnf formulas . </S>",
    "<S> we show that if there is @xmath0 such that the clause - to - variable ratio is less than @xmath1 ( @xmath2 is the number of variables in a cnf ) then local search whp does not find a satisfying assignment , and if there is @xmath3 such that the clause - to - variable ratio is greater than @xmath1 then the local search whp finds a satisfying assignment . as a byproduct </S>",
    "<S> we also show that for any constant @xmath4 there is @xmath5 such that local search applied to a random ( not necessarily planted ) 3-cnf with clause - to - variable ratio @xmath4 produces an assignment that satisfies at least @xmath6 clauses less than the maximal number of satisfiable clauses . </S>"
  ]
}