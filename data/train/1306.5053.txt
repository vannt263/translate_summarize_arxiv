{
  "article_text": [
    "symmetry occurs in many combinatorial problems . for example , when coloring a graph , we can permute the colors in any proper coloring .",
    "symmetry can also be introduced by modelling decisions ( e.g. using a set of finite domain variables to model a set of objects will introduce the symmetries that permute these variables ) . a common method to deal with symmetry",
    "is to add constraints which eliminate symmetric solutions ( e.g. @xcite ) .",
    "unfortunately , breaking symmetry by adding constraints to eliminate symmetric solutions is intractable in general @xcite . more specifically , deciding if an assignment is the smallest in its symmetry class for a matrix with row and column symmetries is np - hard , supposing rows are appended together and compared lexicographically .",
    "there is , however , nothing special about appending rows together or comparing solutions lexicographically .",
    "we could use _ any _ total ordering over assignments .",
    "for example , we could break symmetry with the gray code ordering .",
    "that is , we add constraints that eliminate symmetric solutions within each symmetry class that are not smallest in the gray code ordering .",
    "this is a total ordering over assignments used in error correcting codes .",
    "such an ordering may pick out different solutions in each symmetry class , reducing the conflict between symmetry breaking , problem constraints , objective function and the branching heuristic .",
    "the gray code ordering has some properties that may be useful for symmetry breaking .",
    "in particular , neighbouring assignments in the ordering only differ at one position , and flipping one bit reverses the ordering of the subsequent bits . as a second example , we can break row and column symmetry with the snake - lex ordering @xcite .",
    "this orders assignments by lexicographically comparing vectors constructed by appending the variables in the matrix in a `` snake like '' manner .",
    "the first row is appended to the reverse of the second row , and this is then appended to the third row , and then the reverse of the fourth row and so on . as a third example , we can break row and column symmetry by ordering the rows lexicographically and the columns with a multiset ordering @xcite .",
    "this is incomparable to the lex - leader method .",
    "we will argue theoretically that breaking symmetry with a different ordering over assignments can not improve the worst case complexity .",
    "however , we also show that other orderings can be useful in practice as they pick out different solutions in each symmetry class .",
    "our argument has two parts .",
    "we first argue that , under modest assumptions which are satisfied by the gray code and snake - lex orderings , we can not reduce the computational complexity from that of breaking symmetry with the lexicographical ordering which considers variables in a matrix row - wise .",
    "we then prove that for the particular case of row and column symmetries , breaking symmetry with the gray code or snake - lex ordering is intractable ( as it was with the lexicographical ordering ) .",
    "many dynamic methods for dealing with symmetry are equivalent to posting symmetry breaking constraints `` on the fly '' ( e.g. @xcite ) .",
    "hence , our results have implications for such dynamic methods too .",
    "a symmetry of a set of constraints @xmath0 is a bijection @xmath1 on complete assignments that maps solutions of @xmath0 onto other solutions of @xmath0 .",
    "many of our results apply to the more restrictive definition of symmetry which considers just those bijections which map individual variable - value pairs @xcite .",
    "however , this more general definition captures also conditional symmetries @xcite .",
    "in addition , a few of our results require this more general definition .",
    "in particular , theorem 3 only holds for this more general definition .",
    "the set of symmetries form a group under composition . given a symmetry group @xmath2 , a subset @xmath3 generates @xmath2 iff any @xmath4 is a composition of elements from @xmath3 . a symmetry group @xmath2 partitions the solutions into symmetry classes ( or orbits ) .",
    "we write @xmath5_{\\sigma}$ ] for the symmetry class of solutions symmetric to the solution @xmath6 . where @xmath2 is clear from the context , we write @xmath5 $ ] .",
    "a set of symmetry breaking constraints is _ sound _ iff it leaves at least one solution in each symmetry class , and _ complete _ iff it leaves at most one solution in each symmetry class .",
    "we will study what happens to symmetries when problems are reformulated onto equivalent problems .",
    "for example , we might consider the boolean form of a problem in which @xmath7 maps onto @xmath8 .",
    "two sets of constraints , @xmath0 and @xmath9 over possibly different variables are _ equivalent _ iff there is a bijection between their solutions .",
    "suppose @xmath10 and @xmath11 for @xmath12 $ ] are partitions of the sets @xmath13 and @xmath14 into @xmath15 subsets .",
    "then the two partitions are _",
    "isomorphic _ iff there are bijections @xmath16 and @xmath17\\mapsto [ 1,k]$ ] such that @xmath18 for @xmath12 $ ] where @xmath19 .",
    "two symmetry groups @xmath2 and @xmath3 of constraints @xmath0 and @xmath9 respectively are _ isomorphic _ iff @xmath0 and @xmath9 are equivalent , and their symmetry classes of solutions are isomorphic .",
    "the lex - leader method @xcite picks out the lexicographically smallest solution in each symmetry class . for every symmetry @xmath1 , it posts a lexicographical ordering constraint : @xmath20 where @xmath21 to @xmath22 is some ordering on the variables in the problem .",
    "many static symmetry breaking constraints can be derived from such lex - leader constraints .",
    "for example , doublelex constraints to break row and column symmetry can be derived from them @xcite . as a second example",
    ", precedence constraints to break the symmetry due to interchangeable values can also be derived from them @xcite .",
    "efficient algorithms exist to propagate such lexicographical constraints ( e.g. @xcite ) .",
    "we could , however , break symmetry by using another ordering on assignments like the gray code ordering .",
    "we define the gray code ordering on boolean variables . for each symmetry",
    "@xmath1 , we could post an ordering constraint : @xmath23 where the @xmath15-bit gray code ordering is defined recursively as follows : 0 is before 1 , and to construct the @xmath24-bit ordering , we append 0 to the front of the @xmath15-bit ordering , and concatenate it with the reversed @xmath15-bit ordering with 1 appended to the front .",
    "for instance , the 4-bit gray code orders assignments as follows : @xmath25 the gray code ordering is well founded .",
    "hence , every set of complete assignments will have a smallest member under this ordering .",
    "this is the unique complete assignment in each symmetry class selected by posting such gray code ordering constraints . thus breaking symmetry with gray",
    "code ordering constraints is sound and complete .",
    "breaking symmetry with gray code ordering constraints is sound and complete .    in section 6 , we propose a propagator for the gray code ordering constraint .",
    "we can not enforce the gray code ordering by ordering variables and values , and using a lexicographical ordering constraint .",
    "for example , we can not map the 2-bit gray code onto the lexicographical ordering by simply re - ordering variables and values . to put it another way ,",
    "no reversal and/or inversion of the bits in the 2-bit gray code will map it onto the lexicographical ordering .",
    "the 2-bit gray code orders 00 , 01 , 11 and then 10 .",
    "we can invert the first bit to give : 10 , 11 , 01 and then 00 . or we can invert the second bit to give : 01 , 00 , 10 , and then 11 . or we can invert both bits to give : 11 , 10 , 00 , and then 01 .",
    "we can also reverse the bits to give : 00 , 10 , 11 , and then 01 . and we can then invert one or both bits to give : 10 , 00 , 01 , and then 10 ; or 01 , 11 , 10 , and then 00 ; or 11 , 01 , 00 , and then 10 . note that none of these re - orderings and inversions is the 2-bit lexicographical ordering : 00 , 01 , 10 , and then 11 .",
    "we will show that , under some modest assumptions , we can not make breaking symmetry computationally easier by using a new ordering like the gray code ordering .",
    "our argument breaks into two parts .",
    "first , we observe how the symmetry of a problem changes when we reformulate onto an equivalent problem .",
    "second , we argue that we can map onto an equivalent problem on which symmetry breaking is easier .    if a set of constraints @xmath0 has a symmetry group @xmath2 , @xmath0 and @xmath9 are equivalent sets of constraints , @xmath26 is any bijection between solutions of @xmath0 and @xmath9 , and @xmath27 then :    1 .",
    "@xmath28 is a symmetry group of @xmath9 ; 2 .",
    "@xmath2 and @xmath28 are isomorphic symmetry groups ; 3 .   if @xmath3 generates @xmath2 then @xmath29 generates @xmath28 .",
    "we will use this proposition to argue that symmetry breaking with any ordering besides the lexicographical ordering is intractable .",
    "we consider only _ simple _ orderings . in a simple ordering , we can compute the position of any assignment in the ordering in polynomial time , and given any position in the ordering we can compute the assignment at this position in polynomial time .",
    "we now give our main result .    given any simple ordering @xmath30 , there exists a symmetry group such that deciding if an assignment is smallest in its symmetry class according to @xmath30 is np - hard .",
    "* proof :  * deciding if an assignment is smallest in its symmetry class according to @xmath31 is np - hard @xcite . since @xmath30 and @xmath31 are both simple orderings , there exist polynomial functions @xmath32 to map assignments onto positions in the @xmath31 ordering , and @xmath33 to map positions in the @xmath30 ordering to assignments .",
    "consider the mapping @xmath26 defined by @xmath34 . now",
    "@xmath26 is a permutation that is polynomial to compute which maps the total ordering of assignments of @xmath31 onto that for @xmath30 .",
    "similarly , @xmath35 is a permutation that is polynomial to compute which maps the total ordering of assignments of @xmath30 onto that for @xmath31 .",
    "let @xmath36 be the row and column symmetry group . by theorem 2 ,",
    "the problem of finding the lexicographical least element of each symmetry class for @xmath36 is equivalent to the problem of finding the least element of each symmetry class according to @xmath30 for @xmath37 . thus , for the symmetry group @xmath37 deciding if an assignment is smallest in its symmetry class according to @xmath30 is np - hard .",
    "it follows that there exists an infinite family of symmetry groups such that checking a constraint which is only satisfied by the smallest member of each symmetry class is np - hard .",
    "note that the gray code and snake - lex orderings are simple .",
    "hence , breaking symmetry with either ordering is np - hard for some symmetry groups .",
    "note that we are not claiming that deciding if an assignment is smallest in its symmetry class is np - complete .",
    "first , we would need to worry about the size of the input ( since we are considering the much larger class of symmetries that act on complete assignments rather than on literals ) .",
    "second , to decide that an assignment is the smallest , we are also answering a complement problem ( there is _ no _ smaller symmetric assignment ) .",
    "this will take us to dp - completeness or above .",
    "we next consider a common type of symmetry . in many models",
    ", we have a matrix of decision variables in which the rows and columns are interchangeable @xcite .",
    "we will show that breaking row and column symmetry specifically is intractable with the gray code and the snake - lex orderings , as it is with the lexicographical ordering that considers the variables in a row - wise order .",
    "[ l : l1 ] finding the smallest solution up to row and column symmetry for the snake - lex ordering is np - hard .",
    "* proof :  * we reduce from the problem of finding the lex - leader solution of a matrix @xmath38 .",
    "let @xmath38 be an @xmath39 matrix of boolean values .",
    "we assume @xmath38 does not contain a row of only ones since any such row can be placed at the bottom of the matrix .",
    "we embed @xmath38 in the matrix @xmath40 such that finding @xmath41 , denoted @xmath42 , the smallest row and column symmetry of @xmath40 in the snake - lex ordering is equivalent to finding the lex - leader of @xmath38 .",
    "we ensure that even rows in the snake - lex smallest symmetric solution of @xmath40 are taken by dummy identical rows .",
    "then in odd rows , where snake - lex moves from the left to the right along a row like lex does , we embed the lex - leader solution of @xmath38 .",
    "let @xmath43 be the maximum number of zeros in any row of @xmath38 .",
    "we construct @xmath40 with @xmath44 rows and @xmath45 columns so that it contains three sets of rows .",
    "the first set consists of a single row that contains @xmath46 zeros followed by @xmath47 ones .",
    "the second set contains @xmath48 identical rows with @xmath49 ones followed by @xmath50 zeros in each row .",
    "the third set of rows contains @xmath48 rows such that at the @xmath51th row the first @xmath52 positions are ones , the next @xmath53 positions are the @xmath51th row from @xmath38 and the last @xmath50 positions are ones again .",
    "schematic representation of @xmath40 is shown at figure  [ f : construction0](a ) .",
    "we determine positions of rows and columns that must be fixed in @xmath42 up to permutation of identical rows and columns .",
    "the first row of @xmath40 has to be the first row of @xmath42 as no other row contains @xmath46 zeros .",
    "note that this also fixes the position of columns from 1 to @xmath46 in @xmath40 to be the first columns in the @xmath42 .",
    "note also that these columns are identical and each of them contains the zero in the first row only .",
    "one of the rows in the second set has to be the second row of @xmath42 , as none of the rows that embed rows from @xmath38 contains @xmath50 zeros .",
    "as we move from the right to the left on even rows , this also makes sure that last @xmath50 columns from @xmath40 must be the last columns in @xmath42 .",
    "we summarise that at this point the first two rows are fixed and the first @xmath46 columns and the last @xmath50 columns in @xmath42 must be equal to a permutation of the first @xmath46 identical columns and the last @xmath50 identical columns in @xmath40 , respectively . by assumption , @xmath38 does not contain rows with all ones .",
    "moreover , only rows that embed rows from @xmath38 can have the value zero at columns from @xmath54 to @xmath55 in @xmath42 .",
    "hence , a row from the third set that embeds a row from @xmath38 has to be the third row in @xmath42 .",
    "we do not specify which row it is at this point .",
    "the fourth row has to be again a row from the second set as any of remaining rows from the second set has @xmath50 zeros in the last @xmath50 columns in @xmath42 while any row that embeds @xmath38 has at most @xmath43 zeros .",
    "we can repeat this argument for the remaining rows .",
    "a schematic representation of the positions of rows from the first and second sets are shown in figure  [ f : construction0](b ) .",
    "note that the first and all even rows in @xmath42 are fixed .",
    "the only part of @xmath42 not yet specified is the ordering of odd rows of @xmath53 columns from @xmath54 to @xmath55 .",
    "these are exactly all rows from @xmath38 .",
    "hence , finding @xmath42 is reduced to ordering of this set of rows and columns that embed @xmath38 .",
    "now , all columns from @xmath54 to @xmath55 are interchangeable , all odd rows except the first are interchangeable , and all elements of @xmath42 except elements of @xmath38 are fixed by construction .",
    "as the snake - lex ordering goes from the left to the right on odd rows like the lex ordering , finding @xmath42 is equivalent to finding the lex - leader of @xmath38    to show that finding the smallest row and column symmetry in the gray code ordering is np - hard , we need a technical lemma about cloning columns in a matrix .",
    "we use rowwise ordering in a matrix .",
    "suppose we clone each column in a @xmath56 boolean matrix @xmath38 to give the matrix @xmath57 .",
    "let @xmath58 be the smallest row and column symmetry of @xmath57 in the gray code ordering .",
    "[ l : l2 ] any original column of @xmath38 is followed by its clone in @xmath58 ignoring permutation of identical original columns .",
    "* proof :  * by contradiction .",
    "suppose there exists an element @xmath59 $ ] such that the original column @xmath51 and the next column @xmath60 are different at the @xmath61th row .",
    "we denote by @xmath15 the @xmath62 $ ] element of @xmath58 in its row - wise linearization .",
    "we ignore the rows from @xmath63 to @xmath48 at this point as they are not relevant to this discrepancy .",
    "each pair of columns coincide on the first @xmath61 rows for the first @xmath64 columns and on the first @xmath65 rows for the columns from @xmath51 to @xmath53 .",
    "we conclude that ( 1 ) @xmath51 is odd and @xmath60 is even ; ( 2 ) the number of ones between the first and the @xmath66th positions in the linearization of @xmath58 is even as each value is duplicated ; ( 3 ) the clone of the @xmath51th column can not be among the first @xmath64 columns as each such column is followed by its clone by assumption .",
    "hence , the clone of the @xmath51th column is among columns from @xmath67 to @xmath53 .",
    "suppose the clone of the @xmath51th column is the @xmath68th column .",
    "note that the @xmath68th column must coincide with the @xmath60th column at the first @xmath65 rows .",
    "we consider two cases . in the first case ,",
    "@xmath69 = 1 $ ] and @xmath59=0 $ ] .",
    "note that the total number of ones at the positions from @xmath70 to @xmath71 is odd as we have one in the position @xmath71 and the number of ones in the first @xmath72 positions is even .",
    "next we swap the @xmath73th and @xmath68th columns in @xmath58 .",
    "this will not change the first @xmath71 elements in the linearization as the @xmath68th column must coincide with the @xmath60th column at the first @xmath65 rows",
    ". moreover , this swap puts @xmath70 in position @xmath15 .",
    "as the number of ones up to the @xmath74th position is odd then @xmath70 goes before @xmath75 at position @xmath15 in the gray code ordering .",
    "hence , by swapping the @xmath73th and @xmath68th columns we obtain a matrix that is smaller than @xmath58 in the gray code ordering .",
    "this is a contradiction . in the second case ,",
    "@xmath69 = 0 $ ] and @xmath59=1 $ ] .",
    "note that the total number of ones at positions 1 to @xmath71 in the linearization is even as we have zero at the position @xmath71 and the number of ones in the first @xmath72 positions is even .",
    "therefore , @xmath75 precedes @xmath70 at position @xmath15 in the gray code ordering . by swapping the @xmath73th and @xmath68th columns we obtain a matrix that is smaller than @xmath58 in the gray code ordering as @xmath75 appears at the position @xmath15 instead of @xmath70",
    "this is a contradiction .",
    "[ l : l3 ] finding the smallest solution up to row and column symmetry for the gray code ordering is np - hard .",
    "* proof :  * we again reduce from the problem of finding the lex - leader solution of a matrix @xmath38 .",
    "we clone every column of @xmath38 and obtain a new matrix @xmath57 .",
    "let @xmath58 be the smallest row and column symmetry of @xmath57 in the gray code ordering .",
    "lemma  [ l : l2 ] shows that each original column is followed by its clone in @xmath58 .",
    "next we delete all clones by removing every second column .",
    "we call the resulting matrix @xmath76 .",
    "we prove that @xmath76 is the lex - leader of @xmath38 by contradiction .",
    "suppose there exists a matrix @xmath40 which is the lex - leader of @xmath38 that is different from @xmath77 .",
    "hence , @xmath40 is also the lex - leader of @xmath77 .",
    "we find the first element @xmath78 $ ] where @xmath79 \\neq m[j , i]$ ] in the row - wise linearization of @xmath40 and @xmath77 , so that @xmath79 = 1 $ ] and @xmath78 = 0 $ ] .",
    "we denote by @xmath15 the position of the @xmath80 $ ] element of @xmath40 in its row - wise linearization .",
    "we clone each column of @xmath40 once and put each cloned column right after its original column .",
    "we obtain a new matrix @xmath81 .",
    "we show that @xmath81 is smaller than @xmath58 in the gray code ordering to obtain a contradiction .    as @xmath79 = 1 $ ] and @xmath78 = 0 $ ] then @xmath82 = 1 $ ] and @xmath83 = 0 $ ] because the matrices @xmath58 and @xmath81 are obtained from @xmath77 and @xmath40 by cloning each column and putting each clone right after its original column . as @xmath77 and @xmath40",
    "coincide on the first @xmath71 positions then @xmath58 and @xmath81 coincide in the first @xmath84 positions . by transforming @xmath77 and @xmath40 to @xmath58 and @xmath81 , we duplicated each value in positions from @xmath70 to @xmath71 .",
    "hence , the total number of ones in positions from @xmath70 to @xmath84 in @xmath69 $ ] and @xmath85 $ ] is even .",
    "therefore , the value zero precedes the value one at position @xmath86 in the gray code ordering . by assumption , the value in the position @xmath86 in @xmath58 , which is @xmath82 $ ] , is 1 , and the position @xmath86 in @xmath81 , which is @xmath83 $ ] , is @xmath75 .",
    "hence , @xmath81 is smaller than @xmath58 in the gray code ordering .",
    "we conjecture that row and column symmetry will be intractable to break for other simple orderings .",
    "however , each such ordering may require a new proof .",
    "despite these negative theoretical results , there is still the possibility for other orderings on assignments to be useful when breaking symmetry in practice .",
    "it is interesting therefore to develop propagation algorithms for different orderings .",
    "propagation algorithms are used to prune the search space by enforcing properties like domain consistency .",
    "a constraint is _ domain consistent _",
    "( _ dc _ ) iff when a variable is assigned any value in its domain , there exist compatible values in the domains of the other variables .",
    "we give an efficient encoding for the new global constraint @xmath87 , [ y_1,\\ldots , y_n])$ ] that ensures @xmath88 is before or equal in position to @xmath89 in the gray code ordering where @xmath90 and @xmath91 are 0/1 variables .",
    "we encode the transition relation of an automaton with 0/1/-1 state variables , @xmath92 to @xmath93 that reads a sequence @xmath94 and ensures that the two sequences are ordered appropriately .",
    "we consider the following decomposition where @xmath95 : @xmath96 we can show that this decomposition not only preserves the semantics of the constraint but also does not hinder propagation .",
    "unit propagation on this decomposition enforces domain consistency on @xmath87,[y_1,\\ldots , y_n])$ ] in @xmath97 time .",
    "* proof :  * ( correctness ) @xmath98 as soon as the two vectors are ordered correctly .",
    "@xmath99 iff @xmath90 and @xmath100 are ordered in the gray code ordering with 0 before 1 .",
    "@xmath101 iff the @xmath51th bits , @xmath90 and @xmath100 are ordered in the gray code ordering with 1 before 0 .",
    "@xmath102 stays the same polarity as @xmath103 iff @xmath104 and flips polarity iff @xmath105 .",
    "( completeness ) this follows from the completeness of cnf encoding of the corresponding automaton  @xcite and the fact that unit propagation on this set of constraints enforces dc on a table constraint that encodes the transition relation .",
    "( complexity ) there are @xmath97 disjuncts in the decomposition .",
    "hence unit propagation takes @xmath97 time .",
    "in fact , it is possible to show that the _ total _ time to enforce dc down a branch of the search tree is @xmath97 .",
    "note that this decomposition can be used to break symmetry with the gray code ordering in a sat solver .      for row and column symmetry",
    ", we can break symmetry with the @xmath106 constraint that lexicographically orders rows and columns , or the @xmath107 constraint .",
    "this is based on the smallest row and column permutation of the matrix according to an ordering on assignments that linearizes the matrix in a snake - like manner @xcite .",
    "the ( columnwise ) @xmath107 constraint can be enforced by a conjunction of @xmath108 lexicographical ordering constraints on pairs of columns and @xmath109 lexicographical constraints on pairs of intertwined rows . to obtain the rowwise @xmath107 constraint ,",
    "we transpose the matrix and then order as in the columnwise @xmath107 .",
    "note that @xmath106 and @xmath107 _ only break a subset _ of the row and colum symmetries .",
    "however , they are very useful in practice . it was shown in  @xcite , that enforcing _",
    "dc _ on the @xmath106 constraint is np - hard .",
    "hence we typically decompose it into separate row and column constraints . here",
    ", we show that enforcing _",
    "dc _ on the @xmath107 constraint is also np - hard .",
    "it is therefore also reasonable to propagate @xmath107 by decomposition .",
    "[ t : snake_double ] enforcing dc on the @xmath107 constraint is np - hard .",
    "* proof :  *    let @xmath38 be a @xmath48 by @xmath53 matrix of boolean variables , @xmath110 . the main idea is to embed @xmath38 in to a specially constructed matrix @xmath40 in such a way that enforcing _",
    "dc _ on the @xmath106 constraint on @xmath38 ( which we already know is np - hard ) is equivalent to enforcing _",
    "dc _ on the @xmath107 constraint on @xmath40 .",
    "we transform the matrix of variables @xmath38 into a new matrix of variables @xmath40 with @xmath111 rows , @xmath112 and @xmath113 columns , @xmath114 .",
    "@xmath115 = \\left\\ { \\begin{array}{ll } x_{v-1,(k+1)/2 } & \\textrm{if $ v \\in [ 2,n+1]$ and $ k$ is odd } \\\\ 1 & \\textrm{if $ v \\in [ 2,n+1]$ and $ k$ is even } \\\\ 0 & \\textrm{if $ v=1 $ and $ k$ is odd or if $ v = n+2 $ and $ k$ is even } \\\\ 1 & \\textrm{if $ v=1 $ and $ k$ is even or if $ v = n+2 $ and $ k$ is odd } \\\\",
    "\\end{array } \\right.\\ ] ]    figure  [ f : snake_dlex ] shows the transformation for a matrix @xmath38 with @xmath116 and @xmath117 .    _ row constraints on @xmath40 .",
    "_ the first constraint @xmath118 in @xmath40 is @xmath119 which can be simplified to an entailed constraint @xmath120 .",
    "similarly , the constraint @xmath121 is entailed .",
    "l6 cm     consider the @xmath122 constraint , @xmath123 $ ] in @xmath40 : @xmath124 @xmath125 . as",
    "all even elements coincide we can simplify the constraint to @xmath126 , @xmath127 so that @xmath128 $ ] .",
    "hence , all row constraints are simplified to the row ordering constraints of the @xmath106 constraint .    _ column constraints on @xmath40 . _",
    "the constraints @xmath129 , @xmath130 , are entailed as @xmath131 . the constraints @xmath129 and @xmath132 , @xmath133 , are entailed",
    "as @xmath129 is @xmath134 and @xmath132 is @xmath135 .",
    "therefore , the only not entailed constraints are @xmath132 , @xmath130 : @xmath136 .",
    "these constraints can be simplified to @xmath137 , @xmath138 so that @xmath139 which gives the column ordering of the @xmath106 constraint . hence , enforcing _",
    "dc _ on the @xmath107 constraint on @xmath40 enforces _ dc _ on the @xmath106 constraint on @xmath38 .",
    "we tested two hypotheses that provide advice to the modeller when breaking symmetry .",
    "1 .   other orderings besides the lexicographical ordered can be effective when breaking symmetry in practice ; 2 .",
    "symmetry breaking should align with the branching heuristic , and with the objective function .",
    "all our experiments report the time to find an optimal solution _ and _ prove it optimal .",
    "we believe that optimisation is often a more realistic setting in which to illustrate the practical benefits of symmetry breaking , than satisfaction experiments which either find one or all solutions . breaking symmetry in optimisation problems",
    "is important as we must traverse the whole search space when proving optimality .",
    "all our experiments used the bprolog 7.7 constraint solver .",
    "this solver took second place in the asp 2011 solver competition .",
    "the three sets of experiments took around one cpu month on a macbook pro with an intel core i5 2 core 2.53 ghz processor , with 4 gb of memory .",
    "the three domains were chosen as representative of optimisation problems previously studied in symmetry breaking .",
    "we observed similar results in these as well as other domains .",
    "this is prob032 in csplib @xcite .",
    "this problem arises in conway s game of life , and was popularized by martin gardner . given a @xmath48 by @xmath48 submatrix of the infinite plane",
    ", we want to find and prove optimal the pattern of maximum density which does not change from generation to generation .",
    "for example , an optimal solution for @xmath140 is : @xmath141 this is a still life as every live square has between 2 and 3 live neighbours , and every dead square does not have 3 live neighbours .",
    "we use the simple 0/1 constraint model from @xcite .",
    "this problem has the 8 symmetries of the square as we can rotate or reflect any still life to obtain a new one .",
    "bosch and trick argued that _ ``  the symmetry embedded in this problem is very strong , leading both to algorithmic insights and algorithmic difficulties  '' .",
    "_ our first experiment used the default search strategy to find and prove optimal the still life of maximum density for a given @xmath48 .",
    "the default strategy instantiates variables row - wise across the matrix . our goal here is to compare the different symmetry breaking methods with an `` out of the box '' solver .",
    "we then compare the impact of the branching heuristic on symmetry breaking .",
    "we broke symmetry with either the lexicographical or gray code orderings , finding the smallest ( lex , gray ) or largest ( anti - lex , anti - gray ) solution in each symmetry class .",
    "in addition , we linearized the matrix either row - wise ( row ) , column - wise ( col ) , snake - wise along rows ( snake ) , snake - wise along columns ( col - snake ) , or in a clockwise spiral ( spiral ) .",
    "table 1 gives results for the 20 different symmetry breaking methods constructed by using 1 of the 4 possible solution orderings and the 5 different linearizations , as well with no symmetry breaking ( none ) .",
    ".backtracks required to find and prove optimal the maximum density still life of size @xmath48 by @xmath48 using the default branching heuristic .",
    "column winner is in _ emphasis_. [ cols=\"^,>,>,>,>,>\",options=\"header \" , ]     we make some observations about these results .",
    "first , the best symmetry breaking constraint with the default branching heuristic ( anti - gray col + row heuristic ) was either very good or very bad with the other branching heuristics .",
    "it offers the best overall performance in this experiment ( viz .",
    "anti - gray col + spiral - in heuristic ) , and is the best of all the symmetry breaking methods for 5 other heuristics .",
    "however , it also the worst of all the symmetry breaking methods with 4 other heuristics .",
    "second , aligning the branching heuristic with the symmetry breaking constraint at best offers middle of the road performance ( e.g. lex row + row heuristic ) but can also be counter - productive ( e.g. anti - gray col + col heuristic ) .",
    "third , the spiral - in heuristic offer some of the best performance .",
    "this heuristic provided the best overall result , and was always in the top 2 for every symmetry breaking method . recall that the spiral - in heuristic was one of the worst heuristics on the maximum density still life problem .",
    "we conjecture that this is because it delays constraint propagation on the still life problem constraints but not on the constraints in the peaceable armies of queens problem .",
    "fourth , a bad combination of branching heuristic and symmetry breaking constraints is worse than not breaking symmetry if we have a good branching heuristic ( e.g. none + constr heuristic beats anti - gray col + col - snake heuristic ) .",
    "these results support both our hypotheses .",
    "other orderings besides the simple lexicographical ordering can be effective for breaking symmetry , and symmetry breaking should align with both the branching heuristic and the objective function .",
    "unfortunately , as the last example demonstrated , the interaction between problem constraints , symmetry breaking and branching heuristic can be complex and difficult to predict .",
    "overall , the gray code ordering appears useful .",
    "whilst it is conceptually similar to the lexicographical ordering , it looks at more than one bit at a time . this is reflected in the automaton for the gray code ordering which has more states than that required for the lexicographical ordering .",
    "we have argued that in general breaking symmetry with a different ordering over assignments than the usual lexicographical ordering does not improve the computational complexity of breaking with symmetry .",
    "our argument had two parts .",
    "first , we argued that under modest assumptions we can not reduce the worst case complexity from that of breaking symmetry with a lexicographical ordering .",
    "these assumptions are satisfied by the gray code and snake - lex orderings .",
    "second , we proved that for the particular case of row and column symmetries , breaking symmetry with the gray code or snake - lex ordering is intractable ( as it was with the lexicographical ordering ) .",
    "we then explored algorithms to break symmetry with other orderings .",
    "in particular , we gave a linear time propagator for the gray code ordering constraint , and proved that enforcing domain consistency on the @xmath107 constraint , like on the @xmath106 constraint , is np - hard .",
    "finally , we demonstrated that other orderings have promise in practice .",
    "we ran experiments on three standard benchmark domains where breaking symmetry with the gray code ordering was often better than with the lex - leader or snake - lex methods .",
    "crawford , j. , luks , g. , ginsberg , m. , roy , a. : symmetry breaking predicates for search problems . in : proceedings of the 5th international conference on knowledge representation and reasoning , ( kr 96 ) .",
    "( 1996 ) 148159      aloul , f. , sakallah , k. , markov , i. : efficient symmetry breaking for boolean satisfiability . in : proceedings of the 18th international joint conference on ai , international joint conference on artificial intelligence ( 2003 )",
    "271276    law , y. , lee , j. : global constraints for integer and set value precedence . in : proceedings of 10th international conference on principles and practice of constraint programming ( cp2004 ) , springer ( 2004 ) 362376            law , y.c . , lee , j. , walsh , t. , yip , j. : breaking symmetry of interchangeable variables and values . in : 13th international conference on principles and practices of constraint programming ( cp-2007 ) , springer - verlag ( 2007 )      katsirelos , g. , narodytska , n. , walsh , t. : on the complexity and completeness of static constraints for breaking row and column symmetry . in cohen ,",
    "d. , ed . : proceedings of the 16th international conference on the principles and practice of constraint programming ( cp 2010 ) .",
    "volume 6308 of lecture notes in computer science . , springer ( 2010 ) 305320      grayland , a. , miguel , i. , roney - dougal , c. : snake lex : an alternative to double lex . in gent , i.p . ,",
    "ed . : proceedings of 15th international conference on principles and practice of constraint programming .",
    "volume 5732 of lecture notes in computer science . , springer ( 2009 ) 391399    frisch , a. , hnich , b. , kiziltan , z. , miguel , i. , walsh , t. : multiset ordering constraints . in : proceedings of the 18th international joint conference on artificial intelligence ( ijcai-2003 ) , international joint conference on artificial intelligence ( 2003 )    benhamou , b. , sais , l.",
    ": theoretical study of symmetries in propositional calculus and applications . in : proceedings of 11th international conference on automated deduction .",
    "volume 607 of lecture notes in computer science . , springer ( 1992 ) 281294      backofen , r. , will , s. : excluding symmetries in constraint - based search . in jaffar , j. , ed . :",
    "proceedings of the 5th international conference on principles and practice of constraint programming .",
    "number 1713 in lecture notes in computer science , springer - verlag ( 1999 ) 7387      fahle , t. , schamberger , s. , sellmann , m. : symmetry breaking . in walsh ,",
    "t. , ed . : proceedings of 7th international conference on principles and practice of constraint programming ( cp2001 ) , springer ( 2001 ) 93107    sellmann , m. , hentenryck , p.v . : structural symmetry breaking . in : proceedings of 19th internatinal joint conference on ai ( ijcai 2005 ) , international joint conference on artificial intelligence ( 2005 ) 298303    puget , j.f . : dynamic lex constraints . in benhamou , f. , ed . :",
    "12th international conference on the principles and practice of constraint programming ( cp 2006 ) .",
    "volume 4204 of lecture notes in computer science . , springer ( 2006 ) 453467    katsirelos , g. , walsh , t. : symmetries of symmetry breaking constraints . in : proc . of the 19th european conference on artificial intelligence ( ecai-2010",
    ") , european conference on artificial intelligence , ios press ( 2010 )    narodytska , n. , walsh , t. : an adaptive model restarts heuristic . in : proceedings of 10th international conference on integration of ai and or techniques in constraint programming for combinatorial optimization problems ( cpaior 2013 ) .",
    "volume 7874 of lecture notes in computer science . , springer ( 2013 ) 369377      gent , i. , kelsey , t. , linton , s. , mcdonald , i. , miguel , i. , smith , b. : conditional symmetry breaking . in van beek ,",
    ": proceedings of 11 international conference on principles and practice of constraint programming ( cp 2005 ) .",
    "volume 3709 of lecture notes in computer science . , springer ( 2005 ) 256270    flener , p. , frisch , a. , hnich , b. , kiziltan , z. , miguel , i. , pearson , j. , walsh , t. : symmetry in matrix models . in : proceedings of the cp-01 workshop on symmetry in constraints ( symcon01 ) .",
    "( 2001 ) held alongside cp 2001 .",
    "also apes-30 - 2001 technical report .",
    "frisch , a. , hnich , b. , kiziltan , z. , miguel , i. , walsh , t. : global constraints for lexicographic orderings . in : 8th international conference on principles and practices of constraint programming ( cp-2002 ) , springer ( 2002 )      katsirelos , g. , narodytska , n. , walsh , t. : combining symmetry breaking and global constraints .",
    "in oddi , a. , fages , f. , rossi , f. , eds . : recent advances in constraints , 13th annual ercim international workshop on constraint solving and constraint logic programming ( csclp 2008 ) .",
    "volume 5655 of lecture notes in computer science .",
    ", springer ( 2009 ) 8498      flener , p. , frisch , a. , hnich , b. , kiziltan , z. , miguel , i. , walsh , t. : matrix modelling : exploiting common patterns in constraint programming . in : proceedings of the international workshop on reformulating constraint satisfaction problems .",
    "( 2002 ) held alongside cp-2002 .",
    "flener , p. , frisch , a. , hnich , b. , kiziltan , z. , miguel , i. , pearson , j. , walsh , t. : breaking row and column symmetry in matrix models . in : 8th international conference on principles and practices of constraint programming ( cp-2002 ) , springer ( 2002 )      gent , i. , walsh , t.",
    ": : a benchmark library for constraints . technical report , technical report apes-09 - 1999 ( 1999 ) a shorter version appears in the proceedings of the 5th international conference on principles and practices of constraint programming ( cp-99 ) .",
    "smith , b. , petrie , k. , gent , i. : models and symmetry breaking for peacable armies of queens . in : proceedings of the first international conference on integration of ai and or techniques in constraint programming ( cp - ai - or ) , springer - verlag ( 2004 ) 271286 lncs 3011 ."
  ],
  "abstract_text": [
    "<S> we can break symmetry by eliminating solutions within each symmetry class . for instance , the lex - leader method eliminates all but the smallest solution in the lexicographical ordering . </S>",
    "<S> unfortunately , the lex - leader method is intractable in general . </S>",
    "<S> we prove that , under modest assumptions , we can not reduce the worst case complexity of breaking symmetry by using other orderings on solutions . </S>",
    "<S> we also prove that a common type of symmetry , where rows and columns in a matrix of decision variables are interchangeable , is intractable to break when we use two promising alternatives to the lexicographical ordering : the gray code ordering ( which uses a different ordering on solutions ) , and the snake - lex ordering ( which is a variant of the lexicographical ordering that re - orders the variables ) . </S>",
    "<S> nevertheless , we show experimentally that using other orderings like the gray code to break symmetry can be beneficial in practice as they may better align with the objective function and branching heuristic . </S>"
  ]
}