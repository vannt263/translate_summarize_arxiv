{
  "article_text": [
    "when applying the famous feynman s sum - over - paths approach to a quantum circuit , as it was shown in  @xcite , one can associate with an arbitrary quantum circuit a polynomial system over the finite field @xmath1 . for @xmath2 input qubits",
    "the system contains @xmath3 polynomials : each of the input qubits adds a certain polynomial to the system , and one more polynomial arises from the phase of a classical path through the circuit .",
    "thereby , elements of the unitary matrix determined by the quantum circuit under consideration can be computed by counting the number of common roots in @xmath0 for the polynomial system associated with the circuit . given a quantum circuit ,",
    "the polynomial set is uniquely constructed .    in this paper which is a substantially extended version of paper  @xcite we describe an algorithm for building an arbitrary quantum circuit made of hadamard and toffoli gates and for constructing the associated polynomial system .",
    "the algorithm implemented in the form of c #  @xcite program called qupol ( abbreviation of antum ynomials ) .",
    "the program provides a user - friendly graphical interface for building quantum circuits and generating the associated polynomial systems .    to build an arbitrary quantum circuit ,",
    "it is represented as a rectangular table with @xmath4 cells , where @xmath2 the number of the input qubits , @xmath5 the number of the circuit cascades plus one - for the input @xmath2-qubit vector .",
    "each cell contains an elementary gate taken from the elementary gate set .",
    "the last set of gates consists of wires ( identities ) , arithmetic operations ( multiplication and addition ) and the hadamard operation .",
    "a user of qupol can construct a quantum circuit by selecting required elementary gates from the menu bar of the program and by placing them in the appropriate cells . as a result",
    ", the constructed table provides a visual representation of the circuit . a recursive evaluation procedure built - in qupol operates on",
    "the table column - by - column and generates @xmath2 polynomials ( one for each row of the table ) as well as the phase polynomial in @xmath6 variables , where @xmath6 the number of hadamard gates in the circuit .    to count the number of solutions in @xmath0 for the output polynomial system",
    ", one can convert it into an appropriate grbner basis form which has the same number of solutions .",
    "being invented 40 years ago  @xcite , the grbner bases has become the most universal algorithmic method for analyzing and solving systems of polynomial equations  @xcite . in particular",
    ", construction of the lexicographical grbner basis substantially alleviates the problem of the root finding for polynomial systems . to construct grbner bases one can use , for example , efficient involutive algorithms developed in  @xcite .",
    "our qupol program together with a grbner basis software provides a tool to analyze quantum computation by applying methods of modern computational commutative algebra .",
    "we illustrate this tool by example from  @xcite .",
    "the structure of the paper is as follows . in section  [ sec : quantumcircuits ]",
    "we outline shortly the circuit model of quantum computation .",
    "section  [ sec : someoverpaths ] presents the famous feynman s sum - over - paths method applied to quantum circuits . in section  [ sec : algorithm ] we consider a circuit decomposition in terms of the elementary gates and show how to build an arbitrary circuit composed from the hadamard and toffoli gates .",
    "these two gates form a universal gate basis  @xcite .",
    "some features of the algorithm implementation are briefly described .",
    "section  [ sec : matrixelements ] demonstrates a simple example of handling the polynomials associated with a quantum circuit by constructing their grbner basis and computing the circuit matrix .",
    "we conclude in section  [ sec : conclusions ] .",
    "to compute a reversible boolean vector - function @xmath7 , one applies an appropriate unitary transformation @xmath8 to an input state @xmath9 composed of of @xmath6 qubits  @xcite : @xmath10 the output state @xmath11 is generally not required result of the computation until somebody observes it .",
    "after that the output state becomes classical and can be used anywhere .",
    "some elementary unitary transformations are called quantum gates .",
    "a quantum gate acts only on a few qubits , on the remaining qubits it acts as the identity .",
    "one can build a quantum circuit by appropriately aligning quantum gates .",
    "in so doing , the unitary transformation of the circuit is the composition of its elementary unitary transformations : @xmath12    a quantum gate basis is a set of universal quantum gates , i.e. any unitary transformation can be presented as a composition of the gates of the basis . as well as in the classical case , there can be different choice of the basis quantum gates  @xcite . for our work",
    "it is convenient to choose the particular universal gate basis consisting of hadamard and toffoli gates  @xcite .",
    "the hadamard gate is a one - qubit gate .",
    "it turns the computational basis states into the equally weighted superpositions @xmath13 which differ in the phase factor at @xmath14 .",
    "the toffoli gate is a tree - qubit gate .",
    "the input bits @xmath15 and @xmath16 control the operation on bit @xmath17 , and the toffoli gate acts on the computational basis states as  @xcite @xmath18    an action of a quantum circuit can be described by a square unitary matrix whose entry @xmath19 yields the probability amplitude for the transition from the initial quantum state @xmath20 to the final quantum state @xmath21 .",
    "the matrix element is represented in accordance to the gate decomposition  ( [ eq : ufdecomposition ] ) of the circuit unitary transformation and can be calculated as sum over all the intermediate states @xmath22 , i = 1,2 , ",
    "m - 1 : @xmath23",
    "to apply the famous quantum - mechanical feynman s sum - over - paths approach to calculation of the matrix elements for a quantum circuit  @xcite , we replace each quantum gate in the circuit under consideration by its classical counterpart .",
    "the trick here is to determine the corresponding classical gate for the quantum hadamard gate since its action at any input value 0 or 1 must generate 0 or 1 with the equal probability . to take this into account",
    ", the output of the classical hadamard gate can be characterized by the path variable @xmath24  @xcite .",
    "its value determines one of the two possible paths of computation .",
    "thereby , the classical hadamard gate as @xmath25 and the classical toffoli gate acts as @xmath26 where @xmath27 denotes addition modulo 2 .    fig .  [ fig : quantum2classical ] shows an example of quantum circuit ( taken from  @xcite ) and its classical counterpart .",
    "the path variables @xmath28 comprise the ( vector ) path @xmath29 .    [ cols=\"^ \" , ]",
    "a system generated by the program is a finite set @xmath30 of polynomials in the ring @xmath31[x_1 , ... , x_h ] \\",
    ", , \\quad    a_i , b_j   \\in { \\mathbb{z}_2}\\,,\\quad i , j = 1,\\ldots , n \\label{ring}\\ ] ] with @xmath32 polynomial variables and @xmath33 binary coefficients .",
    "let @xmath34 and @xmath35 denote , as in  ( [ n0]-[n1 ] ) , the number of roots in @xmath1 of the polynomial sets",
    "@xmath36 and @xmath37 , respectively , where @xmath38    then the circuit matrix is given as @xmath39 where @xmath32 is the number of hadamard gates in the circuit .    to compute @xmath34 and @xmath35",
    "one can convert @xmath36 and @xmath37 into an appropriate triangular form  @xcite providing elimination of the path variables @xmath40 .",
    "one of such triangular forms is the pure lexicographical grbner basis that can be computed , for instance , by means of the buchberger algorithm  @xcite , by the faugre algirthms  @xcite or by our involutive algorithm  @xcite .    for the circuit shown on fig .",
    "[ fig : quantum2classical ] we obtain the following polynomial set : @xmath41    the lexicographical grbner bases for polynomial systems @xmath36 and @xmath37 and for the ordering @xmath42 on the variables are given by    @xmath43    these lexicographical grbner bases immediately yield the following conditions on the parameters : @xmath44    it is immediately follows that if conditions  ( [ cond1 ] ) are satisfied then the polynomial system @xmath45 ( resp .",
    "@xmath36 ) has two common roots in @xmath1 and @xmath46 ( resp .",
    "@xmath37 ) has no common roots , and , vise - versa , if conditions  ( [ cond1 ] ) are satisfied then @xmath45 has no roots and @xmath46 has two roots . in all other cases",
    "there is one root of @xmath45 and one root of @xmath46 .    in that way",
    ", the @xmath47 matrix for the circuit of fig.[fig : quantum2classical ] is easily determined by formulae ( [ matrix ] ) with @xmath34 and @xmath35 defined from systems  ( [ gb_systems ] ) . table  [ table ] explicitly shows entries of this matrix when its rows and columns are indexed by the values of the input bits @xmath48 and output bits @xmath49 , respectively .",
    "@xmath50 & 0 & 0 & 0 & 0 & 1 & 1 & 1 & 1 + @xmath51 & 0 & 0 & 1 & 1 & 0 & 0 & 1 & 1 + @xmath52 & 0 & 1 & 0 & 1 & 0 & 1 & 0 & 1 + @xmath53  @xmath54  @xmath55  & & & & & & & & + 0  0  0  & 1/2 & 1/2 & 1/2 & 1/2 & 0 & 0 & 0 & 0 + 0  0  1  & 1/2 & -1/2 & 1/2 & -1/2 & 0 & 0 & 0 & 0 + 0  1  0  & 1/2 & 1/2 & -1/2 & -1/2 & 0 & 0 & 0 & 0 + 0  1  1  & 0 & -1/2 & -1/2 & 1/2 & 0 & 0 & -1/2 & 0 + 1  0  0  & 0 & 0 & 0 & 0 & 1/2 & 1/2 & 1/2 & 1/2 + 1  0  1  & 0 & 0 & 0 & 0 & 1/2 & -1/2 & 1/2 & -1/2 + 1  1  0  & 0 & 0 & 0 & 0 & 1/2 & 1/2 & -1/2 & -1/2 + 1  1  1  & 0 & 0 & 0 & 0 & 1/2 & -1/2 & -1/2 & 1/2 +",
    "we presented an algorithm for building an arbitrary quantum circuit composed of hadamard and toffoli gates and for constructing the corresponding polynomial equation systems over @xmath1 .",
    "the number of common roots @xmath1 of polynomials in the system uniquely determines the circuit matrix .",
    "the algorithm has been implemented in as a c#-program qupol .    to count the number of polynomial roots one can use the universal algorithmic grbner basis approach . in the framework of this approach the polynomial system under consideration is converted into a triangular form that is convenient for computing the number of roots .",
    "general theoretical complexity bound for computing grbner bases ( see , for instance ,  @xcite ) is double exponential in the number of polynomial variables @xmath28 ( the number of path variables , i.e. hadamard gates , in our case ) .",
    "however , the due to the fact that all the path variables @xmath28 , the input and output parameters @xmath56 as well as the numerical coefficients of the polynomials are elements in the finite field @xmath1 the grbner basis computation is sharply simplified .",
    "thus , based on the algorithm in  @xcite , the analysis of costs for computing grbner bases for polynomials over @xmath0 , arising in cryptography , revealed  @xcite only a single exponential complexity in the number of equations .",
    "therefore , the above presented algorithm together with an appropriate software for computing a grbner basis and for counting its number of common roots in @xmath1 provides a tool for simulating quantum logical circuits and for estimation of their computational power . for this purpose we are planning to create a special module in the open source software ginv  @xcite . at present , ginv contains implementation in c++ of our involutive algorithm  @xcite for computing grbner bases over the field of rational numbers and over the field @xmath57 where @xmath58 is a prime number . by this reason ,",
    "the current version of ginv can be used for computing grbner bases for polynomial systems  ( [ circuit systems ] ) only if one considers @xmath33 parameters @xmath59 in  ( [ ring ] ) as variables . in this case , to compute a triangular grbner basis form of the circuit polynomial , one should use an elimination term order for those parameters such that any term containing path variables @xmath60 is higher than that any term containing parameters only .",
    "such computational scheme , however , increases the number of polynomial ( path ) variables by @xmath33 what may lead to exponential slowing down , as was pointed to above .",
    "that is why we expect that an adaptation of the built - in algorithms and data structures to the polynomial ring  ( [ ring ] ) with parametric coefficients will substantially increase computational efficiency of ginv in its application to analysis and simulation of quantum circuits .",
    "recently another algorithmic approach was suggested  @xcite to work with polynomial systems over finite fields .",
    "it seems interesting to investigate computational efficiency of the approach in  @xcite in comparison with that based on grbner bases .",
    "the research presented in this paper was partially supported by the grant 04 - 01 - 00784 from the russian foundation for basic research .",
    "v.p.gerdt . _ involutive algorithms for computing grbner bases_. in : `` computational commutative and non - commutative algebraic geometry '' , ios press , amsterdam , 2005 , pp .",
    "arxiv : math.ac/0501111 ."
  ],
  "abstract_text": [
    "<S> an algorithm and its first implementation in c # are presented for assembling arbitrary quantum circuits on the base of hadamard and toffoli gates and for constructing multivariate polynomial systems over the finite field @xmath0 arising when applying the feynman s sum - over - paths approach to quantum circuits . </S>",
    "<S> the matrix elements determined by a circuit can be computed by counting the number of common roots in @xmath0 for the polynomial system associated with the circuit . to determine the number of solutions in @xmath0 for the output polynomial system </S>",
    "<S> , one can use the grbner bases method and the relevant algorithms for computing grbner bases . </S>"
  ]
}