{
  "article_text": [
    "the internet gradually becomes the unified network infrastructure for all our communication and business needs .",
    "large enterprises , in particular , rely increasingly on internet - based virtual private networks ( vpns ) that typically interconnect several , possibly remote , sites via a wide - area network ( wan ) .",
    "depending on the company , the vpns may have various uses , including carrying voice - over - ip ( voip ) to drive down the communication expenses , sharing geographically distributed company resources , providing a real - time service , etc .    however , it is well known that wide - area networks face today several problems , including congestion , failure of various network elements or protocol mis - configurations .",
    "these may result in periods of degraded quality - of - service , or even lack of connectivity , perceived by the end - user . to deal with these problems ,",
    "several measures can be taken at the end - points , at the edge , or inside the network .",
    "one approach is to use redundant communication paths to improve end - to - end performance .",
    "this idea is not new . the resilient overlay network ( ron ) architecture @xcite proposed that participating nodes maintain multiple paths to each other , in order to preserve their connectivity in the face of internet failures .",
    "the more practical alternative to resilient overlays , multi - homing @xcite , advocates that each edge network connect to the internet over multiple internet service providers ( isps ) , in order to increase the probability of finding an available path to any destination .",
    "both approaches essentially suggest to establish and intelligently use redundant communication paths .",
    "several vendors have already developed products along these lines @xcite .",
    "a significant body of research has also investigated the performance of such approaches and algorithms for monitoring , dynamic path switching and other aspects @xcite .",
    "we too are looking at how to use control at the edge and utilize redundant communication paths to improve end - to - end performance .",
    "what we bring to the table is a mechanism for proactively leveraging several paths at the same time .",
    "we propose to replicate and transmit packets over several redundant independent paths , which are carefully selected .",
    "the goal is to increase the probability that at least one copy will be received correctly and on time . in other words",
    ", we propose to combine a proactive replication over a set of redundant links , with the traditional reactive dynamic switching among ( sets of ) links .",
    "our approach is inspired by the redundant array of inexpensive disks ( raid ) @xcite .",
    "the basic idea of raid was to combine multiple small , inexpensive disk drives into an array of disk drives which yields better performance that of a single large expensive drive ( sled ) , and appears to the computer as a single logical storage unit or drive .",
    "furthermore , disk arrays were made fault - tolerant by redundantly storing information in various ways .",
    "our approach is analogous to `` disk mirroring '' , or raid-1 , which duplicates all content on a backup disk ; so our approach would be called rail-1 according to raid terminology .    similarly to raid , we propose to replicate packets over multiple , relatively inexpensive , independent paths , i.e. , create a _ redundant array of internet links ( rail ) _ , which appears to the application as a single `` superior '' link . to evaluate rail performance ,",
    "we have built a prototype called railedge .",
    "we show that using rail yields better performance ( both quality - of - service and reliability ) than using any of the underlying paths alone .",
    "in addition , we evaluate the performance of applications , such as voip and tcp , over rail and we seek to optimize relevant application - level metrics .",
    "in particular , we propose an additional mechanism , called _ delay padding _ , which complements rail when",
    "there is a significant disparity between the underlying paths .",
    "there are several issues that need to be investigated .",
    "how much is the performance benefit from rail and how does it depend on the characteristics of the underlying paths ?",
    "what is the tradeoff between performance benefit and the bandwidth cost of replicating every packet over multiple connections ?",
    "how does rail interact with higher layers , such as tcp and voip applications ?",
    "does rail introduce reordering ?",
    "how should one choose the links that constitute the rail , in a way that they complement each other and optimize application performance ?",
    "in this paper , we address these questions .    with regards to the bandwidth cost",
    ", we argue that it is worthwhile and that rail is a simple cost - efficient approach for achieving good quality - of - service over redundant paths .",
    "the first argument is from a cost point - of - view .",
    "as bandwidth gets cheaper and cheaper , combining multiple inexpensive links becomes competitive to buying a single , more expensive , private line .",
    "furthermore , we show that two paths are sufficient to get most of the benefit .",
    "in addition , the cost of a connection is rather fixed than usage - based .",
    "once one pays the initial cost to get an additional connection to a second isp ( which companies using multi - homing have already done ) , there is no reason not to fully utilize it .",
    "the second argument is from a performance point - of - view , which may be a strict requirement for critical applications .",
    "rail - ing traffic over @xmath0 paths provides more robustness to short term `` glitches '' than dynamic path switching between the same @xmath0 paths .",
    "this is because there are limits in how fast path switching mechanisms can ( i ) confidently detect glitches and ( ii ) react to them without causing instability to the network .",
    "for example , if a few voip packets are sporadically dropped , a path switching system should probably not react to it , while rail can still successfully deliver copies of the lost packets arriving from the redundant paths .",
    "our findings can be summarized as follows .",
    "* first , we demonstrate that proactively replicating packets over a _ redundant array of internet links ( rail ) _ significantly improves the end - to - end performance .",
    "we quantify the improvement in terms of network - level as well as application - level metrics . in this process",
    ", we use and derive analytical models for the performance of voip - over - rail and tcp - over - rail .",
    "we also use a working prototype of railedge . *",
    "second , we design and evaluate a _",
    "delay padding _",
    "mechanism to complement rail when there is a significant delay disparity among the underlying paths .",
    "this is useful both for voip ( where it plays a proxy - playout role ) and for tcp ( where it may remove re - ordering ) * third , we show that two paths provide most of the benefit , while additional paths bring decreasing benefits .",
    "the two preferred paths should be carefully selected based on their quality , similarity / disparity and correlation .",
    "the structure of the rest of the paper is as follows .",
    "section [ sec : related ] discuss related work .",
    "section [ sec : system ] describes the railedge design , some implementation details and the experimental setup .",
    "section [ sec : evaluation ] evaluates the performance improvement brought by rail in terms of general network - level metrics ( subsection [ sec : network - level ] ) , voip quality ( subsection [ sec : voip ] ) and tcp throughput ( subsection [ sec : tcp ] ) ; we also study the sensitivity to the characteristics of the underlying paths . in this evaluation , we used analysis , matlab simulation , actual packet traces collected over internet backbones , and testbed experiments .",
    "section [ sec : discussion ] discusses the bigger picture , including possible extensions and open questions .",
    "section [ sec : conclusion ] concludes the paper .",
    "the use of redundancy is a well - known technique for improving system reliability @xcite . in the networking context ,",
    "a common technique is to use redundant diverse paths in order to improve the end - to - end performance .",
    "multi - homing and routing overlays both exploit path diversity , primarily to improve availability in case of failures , and secondarily performance in case of congestion in one of the two paths . today , several vendors provide services that combine multi - homing ( i.e. the connection of an edge network to several different isps ) with additional control capabilities at the edge ( such as monitoring and dynamic isp switching , qos mechanisms , compression ) so as to optimize cost and performance @xcite .",
    "overlay networks provide additional control not only at the edge but also at intermediate nodes @xcite .",
    "several researchers are studying the performance of multi - homing and overlay routing , and have proposed algorithms for monitoring and path switching .",
    "the pioneer resilient overlay networks project is described in @xcite .",
    "measurements - based performance evaluation of multi - homing can be found in @xcite .",
    "the benefit from path switching and the effect on application performance was quantified in @xcite .",
    "@xcite and @xcite took a game - theoretic approach to selfish route control and to the relation between the overlay and the underlying network , respectively .",
    "the theoretical frameworks proposed in @xcite formulated the problem of joint multi - path route and rate control and provided a sufficient condition for the stability of such decentralized algorithms .",
    "@xcite also demonstrate that overlays can cause instability and @xcite used randomization to break synchronization .    in the media streaming community",
    ", the idea of path diversity is traditionally combined with multiple - description coding : complementary streams are simultaneously sent over independent paths , to achieve resilience to loss in a bandwidth - efficient manner .",
    "@xcite proposed to transmit multiple- description video over independent paths ; in follow - up work @xcite , the same authors used this idea to design a content - delivery network .",
    "@xcite applied the same idea to voice - over - ip and also designed an playout scheduling algorithm to handle multi - path transmission .",
    "the same authors did a simulation study on the effect of replication and path diversity on tcp transfers @xcite .",
    "our work fits in this scope as follows .",
    "it is related to multi - homing and overlay approaches in that it tries to improve end - to - end performance by connecting edge - networks via several different isps and by exploiting their path diversity .",
    "we compare to related work as follows .",
    "the novel aspect we are focusing on is proactive replication of every packet over the available paths in a single rail .",
    "this aspect is orthogonal to the online decision of switching traffic between rails ( i.e. sets of paths ) .",
    "however , in this paper we still explore how to choose and manage the physical paths that constitute a single rail . similarly to @xcite , we are looking at application - level metrics , particularly for voip and tcp .",
    "in contrast to the media - streaming work , we transmit redundant as opposed to complementary descriptions , operating on the assumption that bandwidth is not the issue .",
    "our delay padding algorithm resembles playout buffering @xcite in that it tries to smooth out the network delay jitter ; however , it is implemented at an edge device instead of the end - point , and acts only as a playout - proxy without dropping packets .",
    "as the acronym `` rail '' indicates , our approach is inspired by the _",
    "redundant array of inexpensive disks _ ( or _ raid _ ) , an idea for improving disk reliability and performance , proposed in the classic sigmod88 paper by g. gibson and r. katz @xcite .",
    "the basic idea of raid was to combine multiple small , inexpensive disk drives into an array of disk drives which yields performance exceeding that of a single large expensive drive ( sled ) , and appears to the computer as a single logical storage unit or drive .",
    "furthermore , disk arrays can be made fault - tolerant by redundantly storing information in various ways .",
    "five types of array architectures , raid-1 through raid-5 , were defined by the berkeley paper , each providing disk fault - tolerance and each offering different trade - offs in features and performance .",
    "the different levels of raid in the original taxonomy @xcite correspond to various functions of an intelligent network device connected to several isps .",
    "e.g. a network device that load - balances the outgoing traffic over the available paths increases the throughput ; it could be named rail-0 because it corresponds to _ striping _ , or _",
    "raid - level 0 _ in @xcite . in this paper",
    ", we focus on packet replication over several paths , which is analogous to _ disk mirroring _ , or _",
    "raid - level 1 _ in @xcite .",
    "similarly to raid advocating multiple small inexpensive disks instead of a single large expensive one , we believe that , as bandwidth gets cheaper and cheaper , redundant replication of packets over independent , inexpensive internet connections becomes the simplest , cost - efficient approach for achieving high quality - of - service and reliability .",
    "rail improves the packet delivery between two remote local area networks ( lans ) , by connecting them through multiple wide - area paths .",
    "the paths are chosen to be as independent as possible , e.g. belonging to different internet service providers .",
    "fig.[fig : topology ] shows an example of two disjoint paths : link 1 goes through isp - a and isp - c , link 2 goes through isp - b and isp - d .",
    "( the simplest configuration would be to have both lans connected to the same two isps . ) for simplicity , we describe the system using two paths only ; the same ideas apply to @xmath1 paths .",
    "a railedge device is required to connect each lan to the wide - area paths .",
    "each packet that transitions from the lan to the wan , via the railedge , is replicated at the railedge and sent out both wan links .",
    "copies of the same packet travel in parallel through the different wan links and eventually arrive at the receiving railedge .",
    "there are three possibilities : both copies arrive , one copy arrives or no copy arrives .",
    "the receiving railedge examines every packet coming in from the wan and suppresses any duplicates ; i.e. it forwards the first copy of each packet toward its destination but it discards any copies arriving later .    the result is clear : the probability of both copies being lost is reduced compared to using a single path , and the delay experienced is the minimum of the delay on each path .",
    "overall , the application perceives a virtual rail link that is better than the underlying physical links .    in summary ,",
    "the railedge performs three basic operations : ( i ) packet duplication ( ii ) forwarding over all redundant internet links and ( iii ) duplicate suppression .",
    "railedge - railedge communication happens over vpn tunnels , to ensure that every rail - ed packet is received by the intended railedge .",
    "we implement tunneling with a simple encapsulation / decapsulation scheme ; our header includes the i d of the sending railedge and a sequence number , which is used to suppress duplicates at the receiving railedge .",
    "all railedge operations are transparent to the end - user .",
    "the components of a railedge device are shown in fig.[fig : railedge ] and the steps taken upon reception of a packet are summarized in fig.[fig : rail - lan - wan ] .",
    "there is a component of the railedge that we are not going to examine in this paper : link monitoring and selection .",
    "this module is responsible for monitoring the performance of every physical path , computing appropriate quality metrics , and choosing the best subset of paths to constitute the rail , over which packets should be replicated .",
    "link monitoring and dynamic selection is a research problem in itself , with extensive and growing literature . in this paper",
    ", we do not study dynamic path switching .",
    "instead , we focus on ( i ) evaluating the replication of packets over _ all _ paths that constitute the rail under study and ( ii ) on giving recommendations on how to statically select these paths .",
    "this is still useful for a typical use of rail : initially , the user compares different isps and decides which is the best set to subscribe to ; after subscription , the user replicates packets over all isps .",
    "delay padding is a mechanism that needs to complement the basic rail mechanism when there is delay disparity in the paths .",
    "the idea is the following .",
    "the default behavior of the receiving railedge is to forward the first copy and discard all copies that arrive later .",
    "however , this may not always be the best choice when there is significant delay disparity between the two paths . in such cases",
    ", one can construct pathological scenarios where the default rail policy results in patterns of delay jitter that adversely affect the application .",
    "one example is voip : the playout buffering algorithm at the receiver tries to estimate the delay jitter and and adapt to it .",
    "this playout algorithm is unknown to us and out of our control ; even worse , it is most likely designed to react to delays caused by real single paths , not by virtual rail paths .",
    "for example , when path 1 is much faster than path 2 , then most of the time rail will forward copies arriving from path 1",
    ". the playout buffer may adapt and closely match it , by choosing a playout deadline slightly above the delay of the path 1 . when packets are lost on the fast path",
    ", the copies arriving from the slow path will arrive late to be played out - and will be useless . in this scenario ,",
    "a better use of the two paths would be to `` equalize '' the delay in the two paths by artificially delaying the packets arriving from the fast path , thus the name `` delay padding '' .",
    "essentially , delay padding acts as a proxy for playout , located at the railedge , and presents the receiver with the illusion of a roughly constant one - way delay .",
    "the main differences from a playout algorithm at the end - host is that delay padding does not drop packets that arrive late for playout .",
    "[ fig : paddingalg ] demonstrates the main idea of delay padding , for packets in the same voip flow .",
    "the goal is to minimize jitter , i.e. to make all packets experience the same , roughly constant , one - way delay @xmath2 , shown in straight line . for every packet @xmath3 ,",
    "two copies arrive : the first one is marked with a circle , the second is marked with the diamond .",
    "the actual time rail forwards the packet is marked with an `` x '' . without padding , rail would normally forward the first copy , which incurred one - way delay @xmath4 . with padding , we compare @xmath5 to the target one - way delay @xmath2 .    * in cases 1 and 2 : @xmath6 .",
    "we wait for additional `` padding '' time @xmath7 before forwarding the packet .",
    "* in case 3 : @xmath8 .",
    "we forward the packet immediately , without further delay .",
    "( instead , a playout algorithm at the receiver would just drop the late packets ) .",
    "the target one - way delay @xmath2 so as to maximize the overall voice quality ( mos ) : @xmath9 .",
    "@xmath2 should be chosen taking into account the statistics of two paths and the delay budget .",
    "adaptation of this value should be allowed only in much larger time scales .",
    "we discuss the choice of @xmath2 to optimize @xmath10 , as well as the performance improvement from delay padding , in the section on voip evaluation ( [ sec : voip - quality ] ) .",
    "delay padding may prove a useful mechanism for tcp as well .",
    "for example , it could be used to remove reordering , caused by rail for certain combinations of paths .",
    "this is discussed further in the section on reordering ( [ sec : reordering - general ] ) and in the section on the effect of reordering on tcp in particular ( [ sec : reordering ] ) .    a practical implementation of delay padding for voip would require ( i ) the ability to identify voice packets and keep per - flow state and ( ii ) calculations of timing in term of relative relative instead absolute one - way delay .",
    "an implementation of reordering - removal for tcp , would not necessarily require per flow state ; it could just use the sequence numbers on the aggregate flow between the two railedges .      in order to evaluate rail performance",
    ", we developed a railedge prototype that implements the functionality described in section [ sec : rail - mechanisms ] .",
    "our prototype runs on linux and consists of a control - plane and a data - plane agent , both running in user space .",
    "all routing and forwarding functionality is provided by the linux kernel .",
    "the control plane is responsible for configuring the kernel with static routes and network interfaces .",
    "the data plane is responsible for the packet processing , i.e. encapsulation / decapsulation , duplication , duplicate suppression and delay padding .",
    "in particular , the kernel forwards each received packet to the data - plane agent , which processes it appropriately and forwards it back to the kernel for regular ip forwarding , see fig.[fig : railedge ] .",
    "our user - space prototype is sufficient for a network connected to the internet through a t1 or t3 line : without considering duplicate packets , railedge running on a 1.9 ghz cpu with 512 mb of dram forwards up to 100,000 minimum - size packets per second ( about 51 mbps ) and up to 62,500 average - size ( 400 bytes ) packets per second ( about 200 mbps ) , while it introduces negligible jitter . for higher - end links",
    ", we would need a different prototype that implements the entire data path in kernel space .",
    "[ fig : testbed - rail ] shows our experimental setup .",
    "two linux boxes , host - a and host - b , communicate through prototype railedges a and b respectively .",
    "the two railedges are connected directly through two of their physical interfaces ( eth2-eth2 , eth3-eth3 ) , thus simulating the wide - area links 1 and 2 shown in fig.[fig : topology ] .",
    "we used netem @xcite on interfaces eth2 ,",
    "eth3 , to emulate the properties of wide - area networks in a controlled way .",
    "the current version of netem emulates variable delay , loss , duplication and re - ordering .",
    "netem is currently enabled in the linux kernel .",
    "we also emulated wan links of various bandwidths , using the rate limiting functionality in linux ( iproute2/tc ) .",
    "in section [ sec : network - level ] , we show that rail outperforms any of the underlying physical paths in terms of network - level metrics , i.e. it reduces loss , delay / jitter , it improves availability and it does not make reordering any worse than it already is in the underlying paths . in sections [ sec : voip ] and [ sec : tcp ] we look at the improvement in terms of application - level metrics for voip ( mos ) and tcp ( throughput ) ; we also look at how this improvement varies with the characteristics , combinations and number of underlying paths .",
    "rail statistically dominates any of the underlying paths , i.e. it presents the end - systems with a virtual path with better statistics in terms of network - level metrics ( loss , delay , jitter and availability ) .",
    "this is intuitively expected . at the very least",
    ", rail could use just one of the paths and ignore the other ; having more options should only improve things .",
    "a natural consequence is that any application performance metric calculated using these statistics ( e.g. loss rate , average delay , jitter percentiles ) should also be improved by rail ; we found this to be indeed the case in computing metrics for voip and tcp .",
    "in addition to the statistics , we also looked at pathological sample paths , e.g. that reordering or special patterns of jitter may arise ; we show that rail does not make things worse than they already are and that delay padding is able to handle these cases .",
    "clearly , rail decreases the average packet loss rate from @xmath11 , @xmath12 to @xmath13 , for independent paths .",
    "one can derive some useful rules of thumb , based on this simple fact .",
    "_ number of paths .",
    "_ given that the actual loss rates are really small @xmath14 in practice , every new independent reduces loss @xmath15 , by at least an order of magnitude .",
    "for similar paths ( @xmath16 ) and it is easy to see that the loss probability @xmath17 is a decreasing and convex function of the number of paths ( @xmath18 ) .",
    "therefore , most of the benefit comes from adding the @xmath19 path , and additional paths bring only decreasing returns .",
    "however , adding a second path with significant _ different _ ( smaller ) loss rate dominates the product and makes a big difference .",
    "_ correlation .",
    "_ in practice , the physical paths underlying rail may overlap .",
    "e.g. consider two paths that share a segment with loss rate @xmath20 , and also have independent segments with @xmath21 .",
    "loss experienced on any of the single paths w.p .",
    "@xmath22 . loss is experienced over rail w.p .",
    "@xmath23 . fig .",
    "[ fig : shared - gain ] plots @xmath24 vs. @xmath25 for various values of @xmath20 . clearly , @xmath24 increases in both @xmath25 and @xmath20 .",
    "the lossier the shared part , @xmath20 , compared to the independent part , @xmath25 , the less improvement we get by using rail ( the curves for @xmath24 and @xmath26 get closer and closer ) .",
    "therefore , one should not only look at their end - to - end behavior , but also at the quality of their shared part , and choose a combination of paths that yields the lowest overall @xmath24 .     and independent loss each @xmath21 .",
    "here we plot the end - to - end @xmath27 and @xmath26 vs. @xmath25 , for various values of @xmath20 . ]",
    "rail also decreases the _ burstiness in loss_. due to lack of space , we omit the analysis and refer the reader to section [ sec : voip - testbed ] , for testbed experiments that demonstrate this fact .      the simplest way to view",
    "a `` failure '' is as a long lasting period of loss , and we can talk about the percentage of time a path spends in failure .",
    "then , the arguments we made for loss in the previous section apply here as well .",
    "e.g. for rail to fail , both paths must fail ; the downtime reduces fast with the number and quality of paths .",
    "table [ table : ken - downtime ] gives a concrete idea on how much rail decreases the downtime .",
    ".[table : ken - downtime]rail reduces downtime _ and _ improves quality [ cols=\"^,^ \" , ]     notice , that this quality improvement is in addition to the availability improvement in table [ table : ken - downtime ] : not only rail reduces the time spent in `` bad / medium '' periods , but it also improves the experience of the user during that period , from `` bad '' to `` medium '' and from `` medium '' to `` good '' .      in this section ,",
    "we use our testbed to demonstrate the improvement that rail brings to voip quality for the entire range of path conditions .",
    "we used netem to control the loss and delay parameters of each path .",
    "we sent probes to emulate the transmission of voice traffic .",
    "testbed experiments on the effect of packet loss to voip with / without rail .",
    ", title=\"fig : \" ]   testbed experiments on the effect of packet loss to voip with / without rail .",
    ", title=\"fig : \" ]    first , we looked at _",
    "loss rate_. we applied uniform loss and the same loss rate @xmath25 from 1 to 20% , which is quite high but may happen during short periods of bursty loss .",
    "as expected , the voice stream experiences loss rate @xmath28 when transmitted over rail , and @xmath25 over on a single link . indeed , in fig.[fig : loss - testbed](a ) , the measured @xmath29 degrees red line ( for a single link ) agrees with @xmath25 ; the measured blue line ( for rail ) agrees with the theoretical @xmath28 dashed purple line .",
    "this loss reduction results in a speech quality improvement up to 1.5 units of mos . fig . [",
    "fig : loss - testbed](b ) shows that mos ( averaged over the entire duration ) is practically constant when we use rail , while the mos over a single link is decreasing rapidly with increasing loss rate .",
    "a side - benefit is that speech quality varies less with time , which is less annoying for the user .",
    "c||c|c|c|c|c + & + * corr . * & 10% & 20% & 30% & 40% & 50% + & 99/*11 * & 203/*58 * & 298/*101 * & 399/*160 * & 514/*249 * + 20 & 27/*1 * & 127/*14 * & 257/*62 * & 362/*158 * & 512/*242 * + 40 & 6/*0 * & 45/*1 * & 144/*33 * & 340/*129 * & 479/*251 * + 60 & 0/*0 * & 18/*0 * & 76/*8 * & 248/*82 * & 537/*258 * + 80 & 0/*0 * & 0/*0 * & 14/*0 * & 123/*12 * & 466/*288 * +    c||c|c|c|c|c + & + * corr . * & 10% & 20% & 30% & 40% & 50% + 0% & 88/*11 * & 161/*52 * & 204/*93 * & 243/*137 * & 237/*197 * + 20% & 22/*1 * & 93 /*13 * & 185/*52 * & 197/*122 * & 230/*178 * + 40% & 5/*0 * & 37/*1 * & 99/*28 * & 175/*90 * & 198/*159 * + 60% & 0/*0 * & 13/*0 * & 50/*7 * & 124/*57 * & 164/*145 * + 80% & 0/*0 * & 0/*0 * & 4/*0 * & 53/*7 * & 100/*97 * +    c||c|c|c|c|c + & + * corr .",
    "* & 10% & 20% & 30% & 40% & 50% + 0% & 2/*1 * & 5/*4 * & 7/*2 * & 7/*3 * & 11/*3 * + 20% & 3/*1 * & 4/*2 * & 5/*3 * & 8/*7 * & 17/*5 * + 40% & 2/*0 * & 3/*1 * & 8/*4 * & 6/*5 * & 10/*7 * + 60% & 0/*0 * & 2/*0 * & 4/*2 * & 10/*4 * & 19/*7 * + 80% & 0/*0 * & 0/*0 * & 10/*0 * & 8/*2 * & 24/*16 * +    second , we looked at the _ burstiness of loss _",
    ", which is an important aspect because it can lead to loss of entire phonemes , thus degrading speech intelligibility . to control burstiness , we controlled the `` correlation '' parameter in netem .",
    "we tried all combinations of @xmath30 and measured the following metrics for bursty loss : ( i ) number of packets lost in burst ( ii ) number of bursts ( iii ) average burst size ( iv ) maximum burst size . in tables [ table : inburst],[table : numburst ] , [ table : maxburst ] , we show the numbers measured over one link in regular font , and the numbers measured over rail in bold . clearly , all metrics are significantly reduced with rail compared to the single path case , which demonstrates that rail reduces loss burstiness .",
    "this good property is intuitively expected , as it is less likely that both paths will experience a burst at the same time .",
    "third , we experimented with _ delay jitter_. we considered two paths with the same mean delay ( 100ms ) , and we used netem to generate delay according to a paretonormal distribution .",
    "we generated delay on both paths according to the same statistics .",
    "we fixed the mean delay at 100ms for both paths , and experimented with the entire range of delay variability ( standard deviation from 10ms to 100ms and delay correlation from 0% to 100% ) .        in the beginning",
    ", we set delay correlation at 0 and increase the standard deviation of delay .",
    "we observed that rail reduces the jitter experienced by the voip stream .",
    "this results in less packets being late for playout and thus better speech quality .",
    "the exact improvement depends ( i ) on the delay variability of the underlying paths ( captured here by the standard deviation of delay ) and ( ii ) on the playout at the receiver ( captured here by the jitter allowed at the playout ) .",
    "fig.[fig : jitter - improvement ] shows the improvement in speech quality ( in mos ) compared to a single path , for a range of these two parameters ( @xmath31 20 - 80ms and jitter level acceptable at playout 20 - 100ms ) .",
    "one can make several observations .",
    "first , rail always help ( i.e. benefit@xmath32 ) ; this is because rail presents the end - system with a better virtual path .",
    "second , there is a maximum in every curve ( every curve corresponds to a certain path delay variability ) : when the playout is intolerant to jitter , then it drops most packets anyway ; when the playout can absorb most of the jitter itself , then the help of rail is not needed ; therefore , rail provides most of its benefit , in the middle - when it is needed to reduce the perceived jitter below the acceptable threshold for playout .",
    "finally , the entire curve moves to the right and lower for paths with higher delay variability .",
    "in addition , we experimented with delay correlation ( which will result in several consecutive packets arrive late and get dropped in the playout ) and we observed that rail decreased this correlation by multiplexing the two streams . finally , we experimented with rail - ed voip and several non - railed tcp flows interfering with it .",
    "the idea was to have loss and delay caused by cross - traffic rather than being artificially injected by netem .",
    "rail brought improvement in the same orders of magnitude as observed before .       and @xmath33 ) and similar delay variability ( e.g. @xmath34 for both ) .",
    "]        ) but different jitter ( @xmath35 ) .",
    "the more padding - the less jitter . ]    the delay padding algorithm , described in section [ sec : padding - mechanism ] , acts as a proxy playout at the receiving railedge : it artificially adds delay ( `` padding '' ) in order to create the illusion of constant one - way delay . in this section ,",
    "we use matlab simulation to demonstrate the effect of padding .",
    "fig.[fig : padding - diffavg ] considers the case when the two paths differ in their average delay ; this can be due to e.g. difference in propagation and/or transmission delay .",
    "notice the difference between ( b)-rail without padding and ( c)-rail with padding .",
    "fig.[fig : padding - delta - avg ] shows that the larger the disparity between the two paths , the more padding is needed to smooth out the stream .",
    "[ fig : padding - sameavg ] considers the case when two paths have the same average delay but differ significantly in the delay jitter , e.g. due to different utilization .",
    "[ fig : padding - sameavg](a ) plots the delay on the two paths on the same graph ; fig .",
    "[ fig : padding - sameavg](b ) shows what rail does without padding ; fig .",
    "[ fig : padding - sameavg](c ) and ( d ) show that the stream can be smoothed out by adding more padding .",
    "the appropriate amount of padding should be chosen so as to maximize the overall mos - as discussed in section [ sec : voip - quality ] .      in the section [ sec : network - level ]",
    ", we saw that rail statistically dominates the underlying paths in terms network - level statistics . therefore , performance metrics computed based on these statistics , such as the average throughput , should be improved . in section [ sec : analysis - tcp ] , we analyze the throughput of long - lived tcp flows , and we show that indeed this is the case",
    ". however , there may be pathological cases , e.g. when reordering falsely triggers fast - retransmit ; this is what we study in section [ sec : reordering ] , and show that -for most practical cases- rail helps tcp as well .",
    "* proof . * fig .",
    "[ fig : tcp - prioni ] shows the simple steady - state model considered in @xcite .",
    "the network drops a packet from when the congestion window increases to @xmath42 packets .",
    "the congestion window is cut in half ( @xmath43 ) , and then it increases by one packet per round - trip time until it reaches @xmath42 packets again ; at which point , the network drops a packet again and the steady - state model continues as before .",
    "let us look at a single congestion epoch .",
    "for that simple model , the number of packets sent during the congestion epoch is @xmath44 . for the packet to be lost ,",
    "both copies sent over the two paths must be lost .",
    "therefore , the loss rate is @xmath45 and @xmath46 .",
    "the only difference from @xcite is that the round - trip time as perceived by tcp - over - rail is no longer constant , but it depends on whether a packet is lost on any of the paths .",
    "provided that the packet is received on at least one path , which has prob .",
    "@xmath47 ) , we are still in the same congestion epoch and @xmath48 therefore , the conditional expectation for rtt is given by eq.([eq : tcp - e[rtt ] ] ) ; and the tcp throughput over rail is on average : @xmath49 } \\simeq ... \\frac{1.22}{e[rtt]\\sqrt{p_1p_2}}\\ ] ]    essentially , rail appears to the tcp flow as a virtual path with loss rate @xmath13 and round - trip time @xmath50 $ ] .",
    "notice that there are two factors to take into account in eq.([eq : tcp - rail - formula ] ) : a multiplication in loss ( @xmath51 ) and an averaging in delay e[rtt ] .",
    "the loss for rail is smaller than any of the two links : @xmath52 .",
    "the same is not true for the delay which is a weighted average : @xmath53<rtt_2 $ ] .",
    "_ implications .",
    "let us now use this simple formula to study the sensitivity of tcp - over - rail throughput to the characteristics of the underlying paths .",
    "* fact 1 . *",
    "_ tcp throughput is better over rail than over any of the two paths : @xmath54 and @xmath55 . _",
    "* proof . *",
    "first , consider that @xmath56 .",
    "then , the rail link is equivalent to a single link with @xmath13 , which is better than any of the two by an order of magnitude .",
    "what happens when @xmath57 ?",
    "it is easy to see that rail is better than the slower path ( 2 ) , because rail has both smaller loss and shorter rtt than the slow path ( 2 ) : @xmath58}>1 \\cdot 1=1\\ ] ] is rail better than the faster path ( 1 ) as well ?",
    "rail is better in terms of loss but worse in terms of delay ( @xmath50>rtt_1 $ ] ) .",
    "it turns out that the multiplicative decrease in loss dominates the averaging in delay .     and different @xmath57 , for the full range of @xmath25 s and @xmath59 s .",
    "the figure shows the ratio of tcp throughput over rail vs. tcp over the fast link .",
    "rail performs roughly 10 times better for the range of practical interest . ]",
    "we see that tcp does 4 - 10 times better over rail than over the fast link ( 1 ) , for all practical cases : loss rates up to 10% and difference in delay up to 100ms . indeed , the difference in @xmath59 can not be exceed some tens of milliseconds ( e.g. due to propagation or transmission ) , and @xmath25 should be really small , except for short time periods .        in section [ sec",
    ": reordering - general ] , we saw that rail does not introduce reordering if both paths are well behaving , but may convert loss on the fast path to late - and at the extreme even out - of - order packets under some conditions ( @xmath69 ) .",
    "it is well known that reordering may have a reverse effect on tcp , as it falsely triggers the fast retransmit . in this section ,",
    "we use testbed experiments to show that , even in cases that rail converts loss to reordering , this is actually beneficial for tcp .",
    "testbed experiments comparing the effect of loss vs. reordering on the throughput of a single tcp flow.,title=\"fig : \" ]    recall that rail does not cause reordering , it only translates loss to reordering .",
    "therefore , the fair question to ask is not how `` tcp does with reordering vs. without reordering '' but instead `` how tcp does with @xmath70 of packets arriving out - of - order vs. @xmath70 of packets being lost '' .",
    "_ * fact 3-revisited .",
    "* better late than never ( and the earlier the better)_. we used the simplified testbed shown in fig.[fig : testbed - single ] to inject a controlled amount of loss and reordering , using netem , on a single tcp flow .",
    "fig.[fig : loss - vs - reorder ] shows the results of the comparison .",
    "first , we introduced x% of loss , ranging from 0 to 20% ; the tcp throughput is shown in dashed line .",
    "then we introduced x% of reordering for a range of reordering gaps / delays , i.e. the packets arrive 10 - 90ms later than they should ; the resulting tcp throughput is shown in a separate bold line for each delay value .",
    "we see that tcp performs much better with reordering than with loss , therefore it is indeed better to receive packets `` late than never '' .",
    "not surprisingly , the less the delay in delivery , the better the performance .    furthermore , tcp has today several default options to deal with reordering : including sack , dsack and timestamps .",
    "we found that turning sack on further improved the performance of tcp under reordering in fig.[fig : loss - vs - reorder ] . in summary",
    ", we expect rail to help tcp for all practical cases , i.e. for small loss rates and delay differences between the paths in the order of 10 - 50ms . as an extreme measure",
    ", one can use the delay padding mechanism not only for voice , but also as a tcp ordering buffer to completely eliminate reordering .",
    "we envision a rail - network architecture , where railedges are control points that use path redundancy , route control and application - specific mechanisms , to improve wan performance .",
    "a first extension has to do with topology .",
    "so far , we considered two railedge devices connecting two remote sites via multiple redundant links .",
    "we envision that this can be generalized to a virtual multipoint network or _ railnet _ , where multiple edge networks are reliably interconnected to each other , as shown in fig.[fig : railnet ] .",
    "each participating edge network is located behind its own railedge , and each railedge pair communicates over at least two internet links .",
    "the railnet interface represents the local point of attachment to a railnet and should present itself as a regular interface to a multi - access subnet .",
    "second , we are interested in combining the proactive replication of rail with some kind of route control , in particular ( i ) selection of the right subset of physical paths within the same rail and also ( ii ) dynamically switching among them . in this paper , we focused on the first part ( i.e. at combinations of paths with various characteristics , at different number of paths , at paths that are similar or different from each other ) and tried to give recommendations on how to statically select among them .",
    "the second aspect is dynamic switching among sets of paths .",
    "we expect this to be a less constrained than single - path switching , because ( i ) redundant transmission is robust to short - lived problems and ( ii ) physical paths tend to have consistent behavior in the long time scales .",
    "therefore , rail should relieve much of the urgency in dynamic path switching decisions .",
    "one could further enhance the functionality of railedge .",
    "so far , we focused on replication of packets over multiple paths .",
    "several other functions can be naturally added on an edge network device , including monitoring and path switching , compression , quality - of - service mechanisms , protocol specific acceleration .",
    "for example , one could decide to rail part of the traffic ( e.g. voip or critical applications ) and use striping for the remaining traffic ; this could correspond to rail-0 in the raid taxonomy @xcite .",
    "there are some additional interesting questions , we are currently pursuing as a direct extension of this work .",
    "first , we continue to study tcp over rail , using more accurate tcp models , and considering also short - lived connections ; we are also working on a modification of our delay - padding algorithm , to remove reordering at the receiving railedge .",
    "second , we are investigating the effect of rail on the rest of the traffic .",
    "e.g. when there is significant disparity in bandwidth , we expect rail - ed tcp to cause congestion on the limited - bandwidth path .",
    "furthermore , what is the interaction between competing rails ? finally , it would be interesting to explore the benefit of adding additional railedges in the middle of the network .",
    "the railnet architecture can be incrementally deployed by gradually adding more railedges .",
    "if widely deployed , it has the potential to fundamentally change the dynamics and economics of wide - area networks .",
    "we proposed and evaluated the redundant array of internet links ( rail ) - a mechanism for improving packet delivery by proactively replicating packets over multiple internet links .",
    "we showed that rail significantly improves the performance in terms of network- as well as application - level metrics .",
    "we studied different combinations of underlying paths : we found that most of the benefit comes from two paths of carefully managed ; we also designed a delay padding algorithm to hide significant disparities among paths .",
    "rail can be gracefully combined with and greatly enhance other techniques currently used in overlay networks , such as dynamic path switching .",
    "ultimately , it has the potential to greatly affect the dynamics and economics of wide - area networks ."
  ],
  "abstract_text": [
    "<S> it is well - known that wide - area networks face today several performance and reliability problems . in this work , </S>",
    "<S> we propose to solve these problems by connecting two or more local - area networks together via a redundant array of internet links ( or _ rail _ ) and by proactively replicating each packet over these links . in that sense , rail is for networks what raid ( redundant array of inexpensive disks ) was for disks . in this paper , we describe the rail approach , present our prototype ( called the _ railedge _ ) , and evaluate its performance . </S>",
    "<S> first , we demonstrate that using multiple internet links significantly improves the end - to - end performance in terms of network - level as well as application - level metrics for voice - over - ip and tcp . </S>",
    "<S> second , we show that a delay padding mechanism is needed to complement rail when there is significant delay disparity between the paths . </S>",
    "<S> third , we show that two paths provide most of the benefit , if carefully managed . </S>",
    "<S> finally , we discuss a rail - network architecture , where railedges make use of path redundancy , route control and application - specific mechanisms , to improve wan performance . </S>"
  ]
}