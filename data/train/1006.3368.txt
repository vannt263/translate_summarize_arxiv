{
  "article_text": [
    "in a _ constraint satisfaction problem _ ( csp ) , the objective is to find an assignment to a set of variables that satisfies the maximum number of a given set of constraints on them .",
    "formally , a csp  @xmath2 is specified by a set of predicates over alphabets @xmath3=\\{1,\\ldots , q\\}$ ] .",
    "every instance of @xmath2 consists of a set of variables @xmath4 , and a set of constraints @xmath5 on them .",
    "each constraint consists of a predicate from @xmath2 applied to a subset of variables .",
    "the objective is to find an assignment @xmath6^v$ ] to the variables that satisfies the maximum number of constraints .",
    "a large number of fundamental optimization problems , such as and , are examples of csps .",
    "approximation algorithms for csps have been intensively studied .",
    "goemans and williamson  @xcite first exploited semidefinite programmings ( sdp ) to and achieving the approximation ratio @xmath7 . after this breakthrough , plethora of approximation algorithms using sdps have been developed  @xcite .",
    "for inapproximability side , tight hardness results have been successfully obtained for some important optimization problems such as  @xcite .",
    "however , the approximability of many interesting csps such as and remains open . towards tightening this gap",
    ", khot  @xcite introduced the unique games conjecture ( ugc ) . assuming the ugc , tight hardness have been shown for  @xcite ,  @xcite , and  @xcite .",
    "finally , raghavendra  @xcite succeeded to unify and generalize those approximation and inapproximability results for every csp .",
    "specifically , raghavendra showed that , assuming the ugc , for every csp , a certain sdp combined with a certain rounding scheme attains the best approximation ratio among all polynomial - time approximation algorithms .",
    "the ingenious technique in the proof is giving a generic conversion from integrality gaps of sdps to hardness results via the ugc .    in this paper ,",
    "we are concerned with constant - time approximation algorithms csps .",
    "that is , algorithms are supposed to run in time independent of sizes of instances .",
    "we use the _ bounded - degree model _",
    ", which was originally introduced for graphs  @xcite . in this model , the number of alphabets , the maximum arity ( the number of inputs to a predicate ) , the maximum degree ( the number of constraints where a variable appears ) , and the maximum weight of constraints are bounded by constants .",
    "let @xmath8 be a @xmath2-csp instance .",
    "since a constant - time algorithm can not read the whole @xmath8 , we assume the existence of an oracle @xmath9 with which we can get information of @xmath8 . by specifying a variable @xmath10 and an index @xmath11 , @xmath9 returns a constraint @xmath12 where @xmath12 is the @xmath11-th constraint where @xmath10 appears .",
    "the efficiency of an algorithm is measured by the number of accesses to @xmath9 , which is called _ query complexity_.    in this paper , we show an analogous result to raghavendra s result : for every csp , a certain linear programming ( lp ) combined with a certain rounding scheme attains the best approximation ratio among all constant - time approximation algorithms .",
    "furthermore , our results are _",
    "unconditional_. to give the statements precisely , we need to define several notions . for a @xmath2-csp instance @xmath8 with the variable set @xmath4 and the constraint set @xmath5",
    ", there is a natural generic lp relaxation which we call ( see section  [ sec : pre ] ) .",
    "let @xmath13 denote the objective value of an optimal solution to for @xmath8 , @xmath14 denote the value of an optimal solution of @xmath8 , and @xmath15 denote the value obtained by an assignment @xmath6^v$ ] .",
    "we define @xmath16 as the sum of weights of constraints in @xmath8 . then , we define @xmath17 and @xmath18 .",
    "integrality gap curve _ @xmath19 and the _ integrality gap _",
    "@xmath20 of a csp  @xmath2 is defined as @xmath21 the first result of this paper gives a tight approximation algorithm for every csp .",
    "[ thr : upper ] in the bounded - degree model , for every csp  @xmath2 and @xmath22 , there exists an algorithm that , given a @xmath2-csp instance @xmath8 with @xmath23 variables and @xmath24 $ ] , with probability at least @xmath1 , outputs a value @xmath25 such that @xmath26 . also , for some fixed assignment @xmath27 such that @xmath28 , given a variable @xmath10 in @xmath8 , it computes @xmath29 in constant time .",
    "the algorithm computes @xmath29 by rounding an lp solution to for @xmath8 .",
    "note that , for an instance @xmath8 with @xmath30 , @xmath31 is the best value we can hope for from the definition of @xmath19 .",
    "thus , in this sense , we will give a _",
    "optimal rounding scheme _ for .",
    "we mention that the additive error @xmath32 can not be removed . to see this ,",
    "suppose an instance @xmath8 consisting of @xmath23 variables and only one constraint .",
    "then , we have to see this constraint to approximate @xmath14 if we do not allow the additive error .",
    "however , it obviously takes @xmath33 queries .    for hardness side ,",
    "we show the following .",
    "[ thr : lower ] in the bounded - degree model , for every csp  @xmath34 $ ] and @xmath22 , there exists a @xmath35 such that any algorithm that , given an instance @xmath8 with @xmath23 variables and @xmath36 $ ] , with probability at least @xmath1 , outputs a value @xmath25 such that @xmath37 requires @xmath38 queries .",
    "note that , using the algorithm in theorem  [ thr : upper ] , given an instance @xmath8 , we can distinguish the case @xmath39 from the case @xmath40 ( technically , we need that @xmath19 is non - decreasing , but this is obvious from the definition ) . on the contrary ,",
    "theorem  [ thr : lower ] asserts that we can not distinguish the case @xmath39 from the case @xmath41 .",
    "thus , the algorithm given in theorem  [ thr : upper ] is not just the best among constant - time approximation algorithm using , but the best among all constant - time approximation algorithms .",
    "a value @xmath25 is called an _",
    "@xmath42-approximation _ to a value @xmath43 if it satisfies @xmath44 .",
    "an algorithm is called an _ @xmath42-approximation algorithm _ for a csp  @xmath2 if , given a @xmath2-csp instance @xmath8 , it computes an @xmath42-approximation to @xmath14 with probability at least @xmath1  @xcite .",
    "the following is an immediate corollary achieved by theorems  [ thr : upper ] and  [ thr : lower ] .    in the bounded - degree model , for every csp  @xmath2 and @xmath22",
    ", there exists a constant - time @xmath45-approximation algorithm for the csp @xmath2 . on the other hand , for every csp  @xmath2 and @xmath22 ,",
    "there exists a @xmath35 such that any @xmath46-approximation algorithm for the csp @xmath2 requires @xmath38 queries .",
    "theorem  [ thr : lower ] has much implication to property testing .",
    "a @xmath2-csp instance @xmath8 is called _ satisfiable _ if there is an assignment to variables that satisfies all the constraints . also , @xmath8 is called _",
    "@xmath0-far from satisfiability _ if we must remove at least @xmath47 constraints to make it satisfiable , where @xmath48 is the maximum degree , the maximum weight , and the number of variables , respectively .",
    "an algorithm is called a _ testing algorithm _ for ( the satisfiability of ) a csp  @xmath2 if , given a @xmath2-csp instance , it accepts with probability at least @xmath1 if the instance is satisfiable , and rejects with probability at least @xmath1 if the instance is @xmath0-far from satisfiability . unlike the hardness result given in  @xcite , theorem  [ thr : lower ] holds also for @xmath49 , i.e. , satisfiable instances . using this observation",
    ", we have the following theorem .",
    "[ thr : prop ] in the bounded - degree model , the following holds for a csp  @xmath2 .",
    "if @xmath50 , then any testing algorithm for the csp  @xmath2 requires @xmath38 queries .",
    "if @xmath51 and @xmath19 is continuous at @xmath49 , then there exists a constant - time testing algorithm for the csp  @xmath2 .",
    "we mention that theorem  [ thr : prop ] gives an `` if and only if '' condition of the testability of csps when their integrality gap curves are continuous at the point one while we are not aware of any csp for which the curve is not continuous at that point .",
    "we give two direct applications of theorem  [ thr : prop ] .",
    "an instance of is a cnf formula where each constraint consists of at most two literals .",
    "it is known that @xmath52 , and it follows that we need @xmath38 queries to test . on the contrary , is known to be testable with @xmath53 queries  @xcite .",
    "this fact implies that the lower bound in theorem  [ thr : lower ] is almost tight .",
    "an instance of is a cnf formula where each constraint has at most one positive literal , from  @xcite , it is easy to derive that @xmath54 and @xmath55 is continuous at @xmath49 . thus , is testable in constant time .",
    "[ [ related - work ] ] related work : + + + + + + + + + + + + +    subsequent to raghavendra s work  @xcite , under the ugc , certain sdps and lps are shown to be the best approximation algorithms for several classes of problems , such as graph labeling problems ( including , , and )  @xcite , kernel clustering problems  @xcite , ordering csps ( including )  @xcite , and strict monotone csps ( including )  @xcite .",
    "there have been many studies on constant - time approximation algorithms in the bounded - degree model . for algorithmic side ,",
    "mainly graph problems have been studied , e.g. ,  @xcite ,  @xcite ,  @xcite ,  @xcite , and  @xcite . for inapproximability results of graph problems ,  @xcite and",
    "@xcite have been considered . for csps",
    ", it is known that , for every @xmath22 , there exists @xmath35 such that any @xmath56-approximation algorithm for and @xmath57-approximation algorithm for require linear number of queries  @xcite .",
    "we can compute the optimal value of a csp instance within an additive error @xmath58 by sampling @xmath59 variables and by solving the induced problem , where @xmath23 is the number of variables and @xmath60 is the maximum arity  @xcite .",
    "thus , it is easy to approximate the solution of a dense instance in constant time .",
    "hence , we are concerned with the bounded - degree model in this paper .",
    "[ [ proof - overview ] ] proof overview : + + + + + + + + + + + + + + +    we describe a proof sketch of theorem  [ thr : upper ] .",
    "let @xmath61 be the oracle access to a @xmath2-csp instance @xmath8 .",
    "first , we construct an oracle access @xmath62 to a nearly optimal solution to @xmath63 for @xmath8 , namely , if we specify a variable in , @xmath62 outputs its value by accessing @xmath9 constant number of times . to this end , we use a distributed algorithm for packing / covering lp given in  @xcite . in",
    "the distributed setting , a linear programing is bound to a graph @xmath64 .",
    "each primal variable @xmath65 and each dual variable @xmath66 is associated with a vertex @xmath67 and @xmath68 , respectively .",
    "there are edges between primal and dual vertices wherever the respective variables occur in the corresponding inequality .",
    "thus , @xmath69 if and only if @xmath65 occurs in the @xmath70-th inequality of the primal .",
    "let @xmath71 denote the graph induced by vertices whose distance from @xmath10 is at most @xmath72 .",
    "then , a _ distributed algorithm in @xmath72 rounds _ works in such a way that each vertex outputs a value of the corresponding variable based on @xmath71 . in  @xcite , it is shown that if the matrix in the lp is `` sparse , '' then there is a distributed algorithm that computes a nearly optimal solution to the lp in @xmath72 rounds , where @xmath72 is an integer determined by the sparsity of the lp .",
    "suppose that the degree of the graph is bounded by @xmath73 .",
    "then , given a variable , we can compute the value of it by performing @xmath74 queries to @xmath9 by simulating the process of the distributed algorithm . with this method",
    ", we achieve @xmath62 . though is not a packing / covering lp , after applying several number of transformations ,",
    "we get a packing lp that has essentially the same behavior under approximation . technically , we need to show that is robust in the sense that even if we violate each constraint by small amount , the optimal value does not significantly increase .",
    "we finally mention that , a predicate can return values in @xmath75 $ ] in @xcite while it can only return @xmath76 or @xmath77 in this paper .",
    "this restriction comes from that we can not transform to a packing lp anymore if we allow negative values .",
    "next , we exhibit a solution to the original instance by rounding the lp solution given by @xmath62 . in  @xcite ,",
    "raghavendra and steurer considered a certain sdp relaxation , which we call , and showed an optimal rounding scheme for it .",
    "that is , it achieves an approximation ratio coincident with the integrality gap of .",
    "our proof is based on their work .",
    "first , from an instance @xmath8 and its lp solution , we create another instance @xmath78 by merging variables of @xmath8 that are close in the lp solution so that the number of variables in @xmath78 become constant .",
    "though we can not explicitly construct the whole @xmath78 since the number of constraints is not constant , we can enumerate variables in @xmath78 . then",
    ", we perform brute force search on @xmath78 .",
    "specifically , we estimate the value obtained by each assignment to variables in @xmath78 by accessing the oracle @xmath62 .",
    "let @xmath79 be the assignment for @xmath78 that takes the maximum among them .",
    "note that @xmath79 can be unfolded to an assignment @xmath80 for @xmath8 .",
    "then , with high probability , we have @xmath81 .",
    "since , from a variable @xmath10 in @xmath8 , we can get the corresponding variable in @xmath78 in constant time , we can compute @xmath82 in constant time . the crucial fact used here",
    "is that the lp optimum does not change significantly after merging variables .",
    "now , we describe a proof sketch of theorem  [ thr : lower ] .",
    "let @xmath8 be a @xmath2-csp instance such that @xmath83 while @xmath84 is arbitrarily close to @xmath31 .",
    "also , let @xmath85 be the optimal lp solution to @xmath63 for @xmath8 .",
    "first , we create a distribution of instances @xmath86 by blowing up variables of @xmath63 . with high probability , an instance @xmath87 generated by @xmath86 satisfies that @xmath88 where @xmath0 is an arbitrarily small constant .",
    "next , using the lp solution @xmath85 , we create another distribution of instances @xmath89 , which has the property that for all @xmath87 generated by @xmath89 , @xmath90 . from yao s minimax principle , by showing that any deterministic algorithm that distinguishes @xmath86 from @xmath89 with high probability requires @xmath38 queries , we have the desired result .    [ [ organization ] ] organization : + + + + + + + + + + + + +    in section  [ sec : pre ] , we give notations and basic technical tools used in this paper . in section  [ sec : lp ] , we present an oracle access @xmath62 to a ( nearly ) optimal solution to .",
    "section  [ sec : round ] is devoted to describe how to round the lp solution optimally and to prove theorem  [ thr : upper ] .",
    "we give proofs of theorems  [ thr : lower ] and  [ thr : prop ] in section  [ sec : lower ] and appendix  [ apx : prop ] , respectively .",
    "for an integer @xmath72 , @xmath91 $ ] denotes the set @xmath92 .",
    "the _ arity _ of a predicate @xmath93^k\\to \\{0,1\\}$ ] is the number of inputs to @xmath12 , i.e. , @xmath72 here .",
    "the _ degree _ of a variable is the number of constraints where the variable appears . for a constraint @xmath12 in a csp instance",
    ", @xmath94 denotes the set of variables in @xmath12 .",
    "let @xmath27 be a vector or a set indexed by elements of a set @xmath4 .",
    "for a subset @xmath95 , we define @xmath96 .",
    "a _ bounded - degree constraint satisfaction problem _ @xmath2 is specified by @xmath97,s , t , w,{\\mathbb{p}})$ ] , where @xmath3 $ ] is a finite domain , @xmath60 is the maximum arity of predicates , @xmath98 is the maximum degree of variables , @xmath99 is the maximum weight of predicates , and @xmath100^k\\to \\{0,1\\ } \\mid k \\leq s\\}$ ] is a set of predicates .",
    "an instance @xmath8 of a csp  @xmath97,s , t , w,{\\mathbb{p}})$ ] is given by @xmath101 , where    * @xmath102 is a set of variables taking values over @xmath3 $ ] , * @xmath5 is a set of constraints , consisting of predicates @xmath103 applied to sequences @xmath104 of variables @xmath4 of size at most @xmath60 .",
    "more precisely , when a predicate @xmath12 is applied to a sequence @xmath105^k$ ] , @xmath12 takes variables @xmath106 as the input .",
    "* @xmath107 is a set of weights @xmath108 assigned to each constraint @xmath109 , where @xmath110 .",
    "the objective is to find an assignment to variables @xmath6^v$ ] that maximizes the total weight of satisfied constraints , i.e. , @xmath111 .    in _ the bounded - degree model _ , an algorithm is given a csp  @xmath112,s , t , w,{\\mathbb{p}})$ ] and the set of variables @xmath4 beforehand .",
    "a @xmath2-csp instance @xmath113 is represented by an oracle @xmath9 such that @xmath9 , on two numbers @xmath114 $ ] , returns @xmath115 where @xmath12 is the @xmath11-th constraint where @xmath10 appears .",
    "if no such constraint exists , it returns a special character @xmath116 .",
    "the _ query complexity _ of an algorithm is the number of accesses to @xmath9 .    in this paper , when there is no ambiguity , symbols @xmath117 and @xmath99 are used to denote the parameters of a considered csp .",
    "also , symbols @xmath118 are used to denote the number of variables , the oracle access , and the total weight of an input instance @xmath8 , respectively .",
    "we consider an lp relaxation for a csp  @xmath2 as follows , which we call .",
    "@xmath119^{v(p)}}p(\\beta){\\boldsymbol{\\mu}}_{p,\\beta}\\\\        \\mbox{s.t . }",
    "& \\sum\\limits_{a\\in [ q]}{\\boldsymbol{x}}_{v , a}=1 & \\forall v \\in v\\\\          & \\sum\\limits_{\\beta \\in [ q]^{v(p ) } , \\beta_v = a}{\\boldsymbol{\\mu}}_{p,\\beta}={\\boldsymbol{x}}_{v , a } & \\forall p\\in { \\mathcal{p } } , v \\in v(p ) , a\\in [ q]\\\\      & { \\boldsymbol{x}}_{v , a}\\geq 0 & \\forall v \\in v , a\\in [ q]\\\\      & { \\boldsymbol{\\mu}}_{p,\\beta}\\geq 0 & \\forall p\\in { \\mathcal{p } } , \\beta\\in [ q]^{v(p)}.    \\end{array}\\end{aligned}\\ ] ] here , @xmath120}$ ] ( resp . ,",
    "@xmath121^{v(p)}}$ ] ) can be seen as a distribution over assignments to a variable @xmath122 ( resp . , a constraint @xmath109 ) , and we often identify them as distributions . for an lp solution @xmath123 , we define @xmath124 as the value of the objective function of obtained by @xmath123 .",
    "we call an lp solution @xmath123 _ @xmath0-infeasible _ if it satisfies constraints of the form @xmath125 and @xmath126 and violates other constraints by at most @xmath0 .",
    "we call a solution to an lp _ @xmath42-approximate _ if the objective value obtained by the solution is an @xmath42-approximation to the optimal value of the lp .      as a simple application of hoeffding s inequality",
    ", we obtain the following .",
    "[ lmm : stat ] suppose that we have an oracle access to a function @xmath127\\to [ 0,w]$ ] .",
    "that is , by specifying @xmath128 $ ] as a query , we can see the value of @xmath129 .",
    "then , by querying @xmath130 times , with probability at least @xmath131 , we can compute a @xmath132-approximation to @xmath133 .",
    "let @xmath8 be a @xmath2-csp instance .",
    "not surprisingly , we can not compute the optimal solution @xmath85 of for @xmath8 in constant time .",
    "even worse , it is also hard to obtain a feasible solution in constant time . instead , we will compute a feasible ( nearly ) optimal solution @xmath123 of an lp obtained by relaxing equality constraints . though this is an infeasible solution in the original lp , the following lemma states that @xmath124 is close to @xmath13 .",
    "the proof , which needs fourier analysis , is given in appendix  [ apx : robust ] .",
    "[ lmm : robust ] let @xmath8 be a @xmath2-csp instance .",
    "suppose that @xmath123 is an @xmath0-infeasible lp solution for @xmath8 of value @xmath134 .",
    "then , it holds that @xmath135",
    "in this section , we show the following theorem .    [ thr : lp ] in the bounded - degree model ,",
    "given a @xmath2-csp instance @xmath8 , for any @xmath22 , we can construct an oracle @xmath62 that gives an access to an @xmath0-feasible @xmath136-approximate solution to for @xmath8 .",
    "for each query , the number of queries performed to @xmath9 is at most @xmath137 .",
    "a packing lp is a problem of maximizing @xmath138 subject to @xmath139 and @xmath140 , where @xmath141 is a non - negative matrix and @xmath142 are non - negative vectors .",
    "there is a constant - round distributed algorithm to compute a nearly optimal solution to the packing lp ( see appendix  [ sec : packing - lp ] for a formal statement ) .",
    "when a variable @xmath143 or @xmath144 is specified as a query , we locally simulate the distributed algorithm and output the value for it .",
    "the only issue is that is not a packing lp . in this section ,",
    "we transform to a packing lp , and we will show that we can restore a good approximation to from an approximation to the resulting packing lp .",
    "first , we substitute @xmath143 by @xmath145 and relax each equality constraint by @xmath0 .",
    "then , we obtain the following lp . @xmath146^{v(p)}}p(\\beta){\\boldsymbol{\\mu}}_{p,\\beta } \\\\      \\mbox{s.t . } & |\\sum\\limits_{a\\in[q]}{\\boldsymbol{x}}_{v , a } - ( q-1 ) | \\leq \\epsilon & \\forall v \\in v\\\\          & | { \\boldsymbol{x}}_{v , a}+\\sum\\limits_{\\beta \\in [ q]^{v(p ) } , \\beta_v = a}{\\boldsymbol{\\mu}}_{p,\\beta } - 1 | \\leq \\epsilon & \\forall p\\in { \\mathcal{p } } , v\\in v(p ) , a\\in [ q]\\\\      & { \\boldsymbol{x}}_{v , a}\\geq 0 & \\forall v\\in v , a\\in[q ] \\\\      & { \\boldsymbol{\\mu}}_{p,\\beta}\\geq 0 & \\forall p\\in { \\mathcal{p } } ,",
    "\\beta\\in [ q]^{v(p)}.    \\end{array }    \\label{lp : blp - relaxed}\\end{aligned}\\ ] ]    let @xmath8 be a @xmath2-csp instance and @xmath123 be an @xmath0-infeasible solution to lp   of value @xmath134 .",
    "then , @xmath147 holds .",
    "clearly , @xmath148 is an @xmath149-infeasible solution to of value @xmath134 .",
    "from lemma  [ lmm : robust ] , the lemma holds .",
    "next , to make the directions of the inequalities the same , we introduce a complement variable for each variable , i.e. , we define @xmath150 and @xmath151 .",
    "however , such equality constraints can not be used in a packing lp .",
    "thus , we relax those equality constraints again . that is , we introduce constraints of the form @xmath152 and @xmath153 . instead , to discourage them to become much smaller than one , we add additional terms to the objective function .",
    "by letting @xmath154 where @xmath155 is a large constant , we get the following lp . @xmath146^{v(p)}}p(\\beta){\\boldsymbol{\\mu}}_{p,\\beta } + { \\boldsymbol{c}}^t({\\boldsymbol{x}}+\\overline{{\\boldsymbol{x}}})+ { \\boldsymbol{c}}^t({\\boldsymbol{\\mu}}+\\overline{{\\boldsymbol{\\mu}}}),\\\\      \\mbox{s.t .",
    "} & \\sum\\limits_{a\\in[q]}{\\boldsymbol{x}}_{v , a } \\leq q-1 + \\epsilon & \\forall v\\in v\\\\          & \\sum\\limits_{a\\in[q]}\\overline{{\\boldsymbol{x}}}_{v , a } \\leq 1+\\epsilon & \\forall v\\in v\\\\          & { \\boldsymbol{x}}_{v , a}+\\sum\\limits_{\\beta \\in [ q]^{v(p ) } , \\beta_v = a}{\\boldsymbol{\\mu}}_{p,\\beta } \\leq 1+\\epsilon & \\forall p\\in { \\mathcal{p } } , v\\in v(p ) , a\\in [ q]\\\\      & \\overline{{\\boldsymbol{x}}}_{v , a}+\\sum\\limits_{x \\in [ q]^{v(p ) } , \\beta_v = a}\\overline{{\\boldsymbol{\\mu}}}_{p,\\beta } \\leq q^{|v(p)|-1}+\\epsilon & \\forall p\\in { \\mathcal{p } } , v\\in v(p ) , a\\in [ q]\\\\      & { \\boldsymbol{x}}_{v , a}+\\overline{{\\boldsymbol{x}}}_{v , a } \\leq 1 , \\quad { \\boldsymbol{x}}_{v , a}\\geq 0 , \\quad \\overline{{\\boldsymbol{x}}}_{v , a}\\geq 0 & \\forall v \\in v , a\\in[q]\\\\      & { \\boldsymbol{\\mu}}_{p,\\beta}+\\overline{{\\boldsymbol{\\mu}}}_{p,\\beta } \\leq 1 , \\quad { \\boldsymbol{\\mu}}_{p,\\beta}\\geq 0 , \\quad \\overline{{\\boldsymbol{\\mu}}}_{p,\\beta}\\geq 0 & \\forall p\\in { \\mathcal{p } } , \\beta\\in [ q]^{v(p)}.\\\\    \\end{array }    \\label{lp : blp - relaxed - again}\\end{aligned}\\ ] ]    fortunately , the optimal solutions to lp   and lp   are essentially the same .",
    "[ lmm : fs97 ] let @xmath8 be a @xmath2-csp instance and @xmath156 be the optimal solution to lp   with value @xmath157 where @xmath158 is the number of variables in lp  . then",
    ", @xmath159 and @xmath160 hold . also , @xmath85 is the optimal solution to lp  ( [ lp : blp - relaxed ] ) with value @xmath134 .",
    "now , using the distributed algorithm given by  @xcite , we have the following lemma .",
    "the analysis of the query complexity is tedious and the proof is given in appendix  [ sec : packing - lp ] .",
    "[ lmm : packing - lp ] in the bounded - degree model , given a @xmath2-csp instance @xmath8 , for any @xmath22 , we can construct an oracle that serves an access to @xmath161 , which is a feasible @xmath162-approximate solution to lp  .",
    "for each query , the number of queries performed to @xmath9 is at most @xmath163 .",
    "let @xmath161 be a feasible @xmath164-approximate solution obtained by lemma  [ lmm : packing - lp ] , where @xmath165 is a constant determined later . for notational simplicity , we write the objective function as @xmath166 where @xmath167 .",
    "let @xmath168 be the optimal solution to lp  . from lemma  [ lmm : fs97 ] , @xmath169 .",
    "also , let @xmath170 be the number of variables in lp  . then , we have @xmath171 thus , @xmath172 in the former inequality , we used the fact that @xmath173 . in the latter inequality , we used the fact that @xmath174 .    from the former inequality ,",
    "we have @xmath175 let @xmath104 be the set of variables @xmath176 ( @xmath177 or @xmath144 ) such that @xmath178 where @xmath179 is a constant determined later . from markov s inequality , we have @xmath180 . let @xmath181}$ ] and @xmath182^{v(p)}}$ ] .",
    "the variables in @xmath183 and @xmath184 are problematic since constraints in lp   involving them are far from being satisfied .",
    "thus , in what follows , we modify these variables and obtain nearly feasible solution to lp  .",
    "first , we construct variables @xmath185}$ ] by setting @xmath186 if none of @xmath187}$ ] is in @xmath183 and @xmath188 if otherwise . then , we construct variables @xmath189^{v(p)}}$ ] as follows .",
    "if none of @xmath190}$ ] was modified in the previous step , we set @xmath191 . if otherwise , we set the values of @xmath192^{v(p)}}$ ] in such a way that the distribution @xmath193 becomes consistent with the product distribution determined by @xmath194 .",
    "note that each modification to @xmath195 in the previous step involves at most @xmath196 modifications to @xmath197 .",
    "we calculate the decrease of the objective function .",
    "the decrease caused by the modification to @xmath143 is at most @xmath198 , and the decrease caused by the modification to @xmath144 is at most @xmath199 .",
    "thus , the total decrease is at most @xmath200 .",
    "note that for each unmodified variable @xmath176 ( @xmath177 or @xmath144 ) , @xmath201 holds .",
    "thus , @xmath202 is an @xmath179-infeasible solution with value at least @xmath203 thus , @xmath204 is an @xmath179-infeasible @xmath205-approximate solution . by choosing @xmath206 and @xmath207",
    ", we have an @xmath0-infeasible @xmath136-approximate solution .",
    "we need to look at @xmath208 variables @xmath209}$ ] to decide the value of @xmath210 , and we need to look at at most @xmath211 variables @xmath212}$ ] to decide the value of @xmath213 . thus , the number of queries performed to @xmath9 is at most @xmath214 .",
    "in this section , using @xmath62 , we give an algorithm described in theorem  [ thr : upper ] .",
    "let @xmath101 be a @xmath2-csp instance . for a mapping @xmath215",
    ", we define a new @xmath2-csp instance @xmath216 on the variable set @xmath217 by identifying variables of @xmath8 that get mapped to the same variable in @xmath217 . for each constraint @xmath109 on the variable set @xmath218 with weight @xmath219",
    ", we have a constraint @xmath220 on the variable set @xmath221 with weight @xmath219 . for @xmath222 $ ] ,",
    "we define @xmath223 where @xmath72 is the positive integer such that @xmath224 .",
    "we define @xmath225 when @xmath226 . in what follows",
    ", we assume that @xmath227 is an integer . if not , we slightly decrease @xmath0 until @xmath227 become an integer",
    ". let @xmath123 be an lp solution for @xmath8 .",
    "we identify variables @xmath10 of @xmath8 that have the same values @xmath228}$ ] .",
    "formally , we consider another @xmath2-csp instance @xmath229 where @xmath230 is defined as @xmath231 .",
    "we have following two lemmas , the proofs of which are in appendix  [ apx : round - appendix ] .",
    "[ lmm : discretize ] let @xmath8 be a @xmath2-csp instance and @xmath123 be an @xmath0-infeasible lp solution for @xmath8 .",
    "then , @xmath232 is a @xmath233-infeasible lp solution for @xmath8 .",
    "[ lmm : compression ] let @xmath8 be a @xmath2-csp instance and @xmath123 be an @xmath0-infeasible @xmath234-approximate lp solution for @xmath8 , where @xmath22 is a small constant .",
    "then , the variable folding @xmath229 satisfies that    * @xmath235 , * the variable set of @xmath229 has a cardinality @xmath236 .",
    "let @xmath165 be a constant determined later and @xmath123 be an @xmath165-infeasible @xmath237-approximate solution for @xmath8 .",
    "consider a folded instance @xmath238 on the variable set @xmath239 .",
    "since there are at most @xmath240 variables in @xmath217 , there are at most @xmath241 assignments to @xmath217 .",
    "for each assignment @xmath242^{v'}$ ] , we estimate the value @xmath243 as follows .",
    "first , we note that @xmath244 can be unfolded to an assignment @xmath6^v$ ] to @xmath8 with the same value .",
    "then , for each variable @xmath122 , we associate a value @xmath245 .",
    "it is clear that @xmath246 and @xmath247 .",
    "also , we can calculate the value @xmath248 by querying @xmath62 at most @xmath249 times .",
    "thus , using the algorithm given in lemma  [ lmm : stat ] , we get a @xmath250-approximation to @xmath243 with probability at least @xmath251 by querying @xmath62 at most @xmath252 times .    by the union bound , with probability at least @xmath1",
    ", we obtain a @xmath250-approximation to @xmath243 for every assignment @xmath244 .",
    "let @xmath253^{v'}$ ] be the assignment that takes the maximum value among those assignments .",
    "then , @xmath254 is a @xmath250-approximation to @xmath255 .",
    "the number of queries performed to @xmath62 is at most @xmath256 .",
    "let @xmath257^v$ ] be the unfolded assignment of @xmath79 .",
    "we can safely assume that @xmath258 . if not",
    ", @xmath259 is indeed a @xmath132-approximation to @xmath14 .",
    "when @xmath258 , it holds that @xmath260 we are done by setting @xmath261 .",
    "the number of queries performed to @xmath9 is at most @xmath262 .",
    "once we have fixed @xmath80 , given a variable @xmath263 , we can compute @xmath264 by accessing @xmath62 @xmath208 times .",
    "the query complexity is at most @xmath137 .",
    "in this section , we prove theorem  [ thr : lower ] . as we described in the introduction , we utilize yao s minimax principle .",
    "that is , we construct two distributions of instances such that they have much different optimal values and also it is hard to distinguish them in constant time .",
    "we fix a @xmath2-csp instance @xmath101 with the optimal lp solution @xmath85 throughout this section . to convert the lp integrality gap @xmath265 of @xmath8 to hardness results",
    ", we construct two distributions @xmath266 and @xmath267 using @xmath8 and @xmath85 . here , @xmath158 and @xmath268 will determine the number of variables and the maximum degree of instances generated by @xmath266 and @xmath267 , respectively .",
    "we show that , by taking @xmath268 as a large constant ( independent of @xmath158 ) , almost all instances @xmath87 in @xmath266 satisfy that @xmath269 .",
    "also , we show that all instances @xmath87 in @xmath267 satisfy that @xmath270 . finally , we define @xmath271 as the distribution that chooses @xmath266 or @xmath267 randomly and outputs an instance generated by the chosen distribution .",
    "then , given an oracle access @xmath272 to an instance @xmath87 generated by @xmath271 , a deterministic algorithm is supposed to guess the original distribution ( @xmath266 or @xmath267 ) of @xmath87 with probability at least @xmath1 . by showing that such an algorithm requires @xmath273 queries , we conclude that any randomized algorithm that , given an instance @xmath87 , distinguishes the case @xmath274 from the case @xmath88 requires @xmath273 queries . by choosing as @xmath8 an instance with the worst integrality gap",
    ", we have the desired result .     and @xmath275 .",
    "here , the alphabet size @xmath276 , and we choose @xmath277 and @xmath278 . also , @xmath279 , @xmath280 , @xmath281 , and @xmath282 .",
    "it follows that @xmath283 , @xmath284 , @xmath285 , and @xmath286 .",
    "white ( resp .",
    ", black ) variables in @xmath275 indicate that they are assigned to @xmath76 ( resp . , @xmath77 ) .",
    "]    [ [ construction - of - mathcald_ntmathbfopt ] ] construction of @xmath266 : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    before stating the construction of @xmath266 , we introduce a distribution @xmath287 for a constraint @xmath109 applied to a sequence of variables @xmath218 ( see fig .  [",
    "fig : lower ] ) .",
    "an instance @xmath288 of @xmath287 is generated as follows .",
    "the variable set of @xmath288 is @xmath289 $ ] .",
    "we naturally regard that the set of variables @xmath290\\}$ ] corresponds to a variable @xmath291 .",
    "next , we create @xmath292 constraints among those variables . to this end , after splitting each variable of @xmath288 into @xmath268 copies , we take random perfect @xmath72-partite matching in such a way that each matching takes one variable from each @xmath293 . for each such matching @xmath294 where @xmath295 is of the form @xmath296 , we create a constraint @xmath297 of weight @xmath219 .",
    "finally , we merge the split variables .",
    "we define the distribution @xmath266 using @xmath287 .",
    "an instance @xmath87 of @xmath266 is generated as follows .",
    "for each @xmath109 , we create an instance @xmath288 according to the distribution @xmath287 . then , @xmath87 is a union of @xmath298 obtained by merging variable sets as follows .",
    "let @xmath299 be the set of constraints containing a variable @xmath122 .",
    "we let @xmath300)$ ] denote the set of variables in @xmath301 corresponding to @xmath10 .",
    "then , we take random perfect @xmath302-partite matching among @xmath303 , and we merge variables in each matching .",
    "we repeat the same process for every @xmath122 .",
    "we note that the variable set of @xmath87 is @xmath304 $ ] , and the number of constraints in @xmath87 is @xmath305 .",
    "now , we decide the indices of constraints , which are used as arguments of the oracle access @xmath272 .",
    "we use the following rule .",
    "suppose that @xmath12 is the @xmath11-th constraint where @xmath306 appears ( in the sense of @xmath8 ) , then for a variable @xmath307)$ ] , we randomly assign @xmath268 indices @xmath308 to designate @xmath268 constraints made by @xmath288 .",
    "finally , labels of vertices are randomly permuted .    [",
    "[ construction - of - mathcald_ntmathbflp ] ] construction of @xmath267 : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    before stating the construction of @xmath267 , again we introduce another distribution @xmath275 for a constraint @xmath109 applied to a sequence of variables @xmath218 .",
    "( see fig .",
    "[ fig : lower ] ) .",
    "an instance @xmath288 is generated as follows .",
    "the variable set of @xmath288 is @xmath309 $ ] .",
    "we naturally regard that the set of variables @xmath290\\}$ ] corresponds to a variable @xmath291 . for each @xmath310^{v(p)}$ ] , we take a @xmath311-fraction of variables from each @xmath293 , and let @xmath312 denote the set of such variables .",
    "variables in @xmath313 are said to be _ assigned to @xmath314$]_. a subtlety here is that @xmath315 may not be an integer .",
    "we ignore this issue for simplicity since we can make the error arbitrarily small by choosing @xmath158 large enough .",
    "next , we create @xmath316 constraints among @xmath317 . to this end , after splitting each variable into @xmath268 copies , we take random perfect @xmath72-partite matching in such a way that each matching takes one variable from each @xmath313 .",
    "for each matching @xmath294 where @xmath295 is of the form @xmath296 , we create a constraint @xmath297 of weight @xmath219 .",
    "finally , we merge the split variables again .",
    "we note that , for any variable @xmath318 , an @xmath319-fraction of variables of @xmath293 is assigned to @xmath320 .",
    "we define the distribution @xmath267 using @xmath275 .",
    "an instance @xmath87 of @xmath267 is generated as follows .",
    "for each @xmath109 , we create an instance @xmath288 according to the distribution @xmath275 .",
    "then , @xmath87 is a union of @xmath298 obtained by merging variable sets as follows .",
    "let @xmath299 be the set of constraints containing a variable @xmath122 .",
    "we let @xmath321 ,",
    "a\\in [ q])$ ] denote the set of variables in @xmath301 that correspond to @xmath10 and are assigned to @xmath320 .",
    "note that the sizes of @xmath321)$ ] are the same from the construction of @xmath322 .",
    "we take random perfect @xmath302-partite matching among @xmath323 and we merge vertices in each matching .",
    "we repeat the same process for every @xmath122 and @xmath324 $ ] .",
    "note that the variable set of @xmath87 is @xmath304 $ ] and the number of constraints in @xmath87 is @xmath305 . to decide the indices of constraints and labels of vertices",
    ", we use the same rule as @xmath266 .",
    "we have the following three lemmas , the proofs of which are in appendix  [ apx : lower - appendix ] .",
    "[ lmm : less - than - opt ] for every @xmath22 , there is a @xmath325 satisfying the following .",
    "let @xmath87 be a @xmath2-csp instance generated by @xmath266 . with probability @xmath326 , @xmath88 .",
    "[ lmm : more - than - lp ] let @xmath87 be a @xmath2-csp instance generated by @xmath267 .",
    "then , @xmath274 holds .",
    "[ lmm : distinguish ] in the bounded - degree model , any deterministic algorithm that , given an oracle access to @xmath272 generated by @xmath271 , correctly guesses the original distribution of @xmath87 with probability at least @xmath327 requires at least @xmath273 queries .",
    "let us fix @xmath328 $ ] and @xmath329 .",
    "then , there exists a @xmath2-csp instance @xmath8 such that @xmath30 and @xmath330 is arbitrarily close to @xmath60 .",
    "suppose that there exists a deterministic algorithm @xmath331 with query complexity @xmath332 that , given an instance @xmath87 of @xmath23 variables , with probability at least @xmath1 , distinguishes the case @xmath333 from the case @xmath334 .",
    "let @xmath268 be a constant given by lemma  [ lmm : less - than - opt ] by replacing @xmath0 with @xmath335 .",
    "suppose that @xmath87 is generated by @xmath266 .",
    "then , from lemma  [ lmm : less - than - opt ] , with probability at least @xmath326 , it holds that @xmath336 . in the last inequality ,",
    "we use the fact that @xmath337 when @xmath0 is small .",
    "suppose that @xmath87 is generated by @xmath267 .",
    "then , from lemma  [ lmm : more - than - lp ] , it holds that @xmath333 .",
    "thus , in total , the algorithm outputs the correct answer with probability at least @xmath338 .",
    "this contradicts lemma  [ lmm : distinguish ] .",
    "10    noga alon . on constant time approximation of parameters of bounded degree graphs , 2010 .",
    "manuscript .",
    "noga alon , wenceslas  fernandez de  la vega , ravi kannan , and marek karpinski .",
    "random sampling and approximation of max - csps .",
    ", 67(2):212243 , 2003 .",
    "gunnar andersson and lars engebretsen .",
    "property testers for dense constraint satisfaction programs on finite domains . , 21(1):1432 , 2002 .    per austrin",
    "balanced max 2-sat might not be the hardest . in _ proc .  of stoc 2007 _ , pages 189197 , 2007 .    per austrin and elchanan mossel",
    "approximation resistant predicates from pairwise independence . in _ proc .  of ccc 2008 _ ,",
    "pages 249258 , 2008 .",
    "andrej bogdanov , kenji obata , and luca trevisan . a lower bound for testing 3-colorability in bounded - degree graphs . in _ proc .  of focs 2002 _ , pages 93102 , 2002 .",
    "bernard chazelle , ronitt rubinfeld , and luca trevisan . approximating the minimum spanning tree weight in sublinear time . in _ proc .  of icalp 2001",
    "_ , pages 190200 , 2001 .",
    "dimitris  a. fotakis and paul  g. spirakis .",
    "linear programming and fast parallel approximability , 1997 .",
    "manuscript .",
    "michel  x. goemans and david  p. williamson .",
    "improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming .",
    ", 42(6):11151145 , 1995 .    oded goldreich and dana ron . a sublinear bipartiteness tester for bounded degree graphs . ,",
    "19(3):335373 , 1999 .    oded goldreich and dana ron .",
    "property testing in bounded degree graphs .",
    ", 32(2):302343 , 2008 .",
    "oded goldreich and luca trevisan .",
    "three theorems regarding testing graph properties . , 23(1):2357 , 2003 .",
    "venkatesan guruswami , rajsekar manokaran , and prasad raghavendra .",
    "beating the random ordering is hard : inapproximability of maximum acyclic subgraph . in _ proc .  of focs 2008",
    "_ , pages 573582 , 2008 .",
    "johan hstad . some optimal inapproximability results .",
    ", 48(4):798859 , 2001 .",
    "david karger , rajeev motwani , and madhu sudan .",
    "approximate graph coloring by semidefinite programming .",
    ", 45(2):246265 , 1998 .",
    "subhash khot .",
    "on the power of unique 2-prover 1-round games . in _ proc .  of stoc 2002 _ , pages 767775 , 2002 .",
    "subhash khot , guy kindler , elchanan mossel , and ryan odonnell .",
    "optimal inapproximability results for max - cut and other 2-variable csps ? in _ proc .",
    "of focs 2004 _ , pages 146154 , 2004 .",
    "subhash khot and assaf naor .",
    "sharp kernel clustering algorithms and their associated grothendieck inequalities . , abs/0906.4816 , 2009 .",
    "fabian kuhn , thomas moscibroda , and roger wattenhofer .",
    "the price of being near - sighted . in _ proc .  of soda 2006",
    "_ , pages 980989 , 2006 .",
    "amit kumar , rajsekar manokaran , madhur tulsiani , and nisheeth  k. vishnoi . on the optimality of a class of lp - based algorithms . ,",
    "abs/0912.1776 , 2009 .",
    "michael lewin , dror livnat , and uri zwick . improved rounding techniques for the max 2-sat and max di - cut problems . in _ proc .  of ipco 2002 _ , pages 6782 , 2002 .",
    "rajsekar manokaran , joseph  ( seffi ) naor , prasad raghavendra , and roy schwartz .",
    "gaps and ugc hardness for multiway cut , 0-extension , and metric labeling . in _ proc .  of stoc 2008 _ ,",
    "pages 1120 , 2008 .",
    "huy  n. nguyen and krzysztof onak . constant - time approximation algorithms via local improvements . in _ proc .  of focs 2008",
    "_ , pages 327336 , 2008 .",
    "michal parnas and dana ron . approximating the minimum vertex cover in sublinear time and a connection to distributed algorithms . , 381(1 - 3):183196 , 2007 .",
    "prasad raghavendra .",
    "optimal algorithms and inapproximability results for every csp ? in _ proc .  of stoc 08 _ ,",
    "pages 245254 , 2008 .",
    "prasad raghavendra and david steurer .",
    "how to round any csp . in _ proc .  of focs 2009 _ ,",
    "pages 586594 , 2009 .",
    "alex samorodnitsky and luca trevisan .",
    "gowers uniformity , influence of variables , and pcps . in _ proc .  of stoc 2006",
    "_ , pages 1120 .",
    "acm , 2006 .",
    "nick wormald .",
    "models of random regular graphs . in _ surveys in combinatorics _ , pages 239298",
    ". cambridge university press , 1999 .",
    "yuichi yoshida .",
    "lower bounds on query complexity for testing bounded - degree csps , 2010 . manuscript .",
    "yuichi yoshida , masaki yamamoto , and hiro ito . an improved constant - time approximation algorithm for maximum matchings . in _ proc .  of stoc 2009 _ ,",
    "pages 225234 , 2009 .",
    "uri zwick .",
    "finding almost - satisfying assignments . in _ proc .  of stoc 1998 _ , pages 551560 , 1998 .",
    "in this section , we give a proof of lemma  [ lmm : robust ] .",
    "our strategy is transforming @xmath123 to a feasible solution without decreasing the lp value much . in the first step ,",
    "we construct @xmath339 from @xmath195 that satisfies @xmath340}{\\boldsymbol{x}}'_{v , a}=1 $ ] for every @xmath122 .    [ lmm : surgery ] let @xmath123 be an @xmath0-infeasible lp solution for a @xmath2-csp instance @xmath8 where @xmath22 is a small constant .",
    "then , @xmath195 can be transformed to @xmath339 so that @xmath341}{\\boldsymbol{x}}'_{v , a}&=&1 \\quad \\forall v\\in v , \\label{eq : surgery-1}\\\\      |{\\boldsymbol{x}}'_{v , a}-{\\boldsymbol{x}}_{v , a}| & \\leq & 2\\epsilon \\quad \\forall v\\in v , a\\in [ q ] . \\label{eq : surgery-2 }    \\end{aligned}\\ ] ] in particular , @xmath342 is a @xmath343-infeasible lp solution that satisfies @xmath340}{\\boldsymbol{x}}'_{v , a}=1 $ ] for every @xmath122 .",
    "we define @xmath344}{\\boldsymbol{x}}_{v , a}$ ] .",
    "the condition ( [ eq : surgery-1 ] ) clearly holds . from the @xmath0-infeasibility of @xmath195 , @xmath345 } { \\boldsymbol{x}}_{v , a}-1|\\leq \\epsilon $ ] holds",
    "it follows that @xmath346 when @xmath0 is small .    in the second step ,",
    "we construct @xmath347 that satisfies @xmath348^{v(p)},\\beta_v = a}{\\boldsymbol{\\mu}}'_{p,\\beta}={\\boldsymbol{x}}'_{v , a}$ ] for all @xmath349 .",
    "[ lmm : smoothing ] let @xmath123 be an @xmath0-infeasible solution for a @xmath2-csp instance @xmath8 satisfying @xmath340}{\\boldsymbol{x}}_{v , a}=1 $ ] for every @xmath122 .",
    "then , @xmath197 can be transformed to @xmath347 so that @xmath350&=&(1-\\delta){\\boldsymbol{x}}_{v , a}+\\frac{\\delta}{q } \\quad \\forall p\\in { \\mathcal{p } } , v\\in v(p ) , a\\in [ q ] , \\\\",
    "||{\\boldsymbol{\\mu}}_p-{\\boldsymbol{\\mu}}'_p||_1&\\leq & 2\\delta \\quad \\forall p\\in { \\mathcal{p}}.    \\end{aligned}\\ ] ] where @xmath351 .",
    "let us fix a predicate @xmath109 and @xmath352 .",
    "we may assume @xmath353 where @xmath354 .",
    "we can think of @xmath355 as a function @xmath356^k\\to { \\mathbb{r}}$ ] such that @xmath357 is the probability of the assignment @xmath27 under the distribution @xmath355 .",
    "let @xmath358 be an orthonormal basis of the vector space @xmath359\\to { \\mathbb{r}}\\}$ ] such that @xmath360 . here",
    ", orthonormal means that @xmath361}[\\chi_i(a)\\chi_j(a)]=\\delta_{ij}$ ] for all @xmath362 $ ] where @xmath363 is kronecker s delta . by tensoring this basis ,",
    "we obtain the orthonormal basis @xmath364^k}$ ] of the vector space @xmath359^k\\to { \\mathbb{r}}\\}$ ] . that is , for @xmath365^k , \\beta\\in [ q]^k$ ] , we have @xmath366 . for a function @xmath356^k\\to { \\mathbb{r}}$ ] , we define @xmath367^k}f(x)\\chi_{\\sigma}(\\beta)$ ] .",
    "note that @xmath368^k}[\\hat{f}(\\sigma)\\chi_{\\sigma}(\\beta)]$ ] . therefore , if we let @xmath369 again be the function corresponding to @xmath355 , we have @xmath370      =      \\sum_{\\beta\\in [ q]^k , \\beta_i = a}{\\mathop{\\mathrm{e}}}_{\\sigma\\in [ q]^k}\\left[\\widehat{f}(\\sigma)\\chi_\\sigma(\\beta)\\right ]      =      { \\mathop{\\mathrm{e}}}_{\\sigma\\in [ q]}\\left[\\widehat{f_i}(\\sigma)\\chi_\\sigma(a)\\right ] .    \\end{aligned}\\ ] ] here , @xmath371 where @xmath372 and @xmath373 for all @xmath374\\setminus\\{i\\}$ ] . in the second inequality",
    ", we used that for every @xmath375 with @xmath376 for some @xmath374\\setminus\\{i\\}$ ] , the sum over the values of @xmath377 vanishes .",
    "we let @xmath378\\to { \\mathbb{r}}$ ] be the function @xmath379 .",
    "we define a function @xmath380^k\\to { \\mathbb{r}}$ ] as follows .",
    "@xmath381\\setminus \\{i\\ } , \\\\",
    "\\widehat{f}(\\sigma ) & \\mbox{otherwise}.            \\end{array }      \\right .",
    "\\end{aligned}\\ ] ] this is well - defined since for any @xmath382 $ ] , it holds that @xmath383}g_i(a)=\\sum_{a\\in [ q]}{\\boldsymbol{x}}_{i , a}=1 $ ] . therefore , the function @xmath384 satisfies @xmath348^k}f'(\\beta)=\\widehat{f}(1)=1 $ ] , then , we can define a distribution",
    "@xmath193 corresponding to @xmath384 , and we have @xmath385={\\mathop{\\mathrm{e}}}_{\\sigma\\in [ q]}\\left[\\widehat{f'_i}(\\sigma)\\chi_\\sigma(a)\\right]={\\boldsymbol{x}}_{v , a}.    \\end{aligned}\\ ] ] thus , it looks that the @xmath193 is the desired distribution .",
    "however , in general , the function @xmath384 might take negative values .",
    "we will show that these values can not be too negative and that the function can be made to a proper distribution by smoothing .",
    "let @xmath386 be an upper bound on the values of the functions @xmath358 . from the orthonormality of the functions",
    ", it follows that @xmath387 .",
    "let @xmath388 $ ] .",
    "since the lp solution @xmath123 is @xmath0-infeasible , we have @xmath389}g_i(a)\\chi_s(a)-\\sum_{a\\in [ q]}f_i(a)\\chi_s(a)\\right|      \\leq      kq\\epsilon .    \\end{aligned}\\ ] ] therefore , @xmath390 for all @xmath391^k$ ] .",
    "recall that @xmath392 for @xmath391^k$ ] if there are @xmath393 such that @xmath394 .",
    "thus , @xmath395^k}\\left[\\widehat{f}'(\\sigma)\\chi_\\sigma(\\beta ) - \\widehat{f}(\\sigma)\\chi_\\sigma(\\beta)\\right]\\right|      \\leq      \\delta / q^k ,      \\label{eq : f - f'-close }    \\end{aligned}\\ ] ] where @xmath396 . hence ,",
    "if we let @xmath397 , where @xmath398^k\\to{\\mathbb{r}}$ ] is the uniform distribution @xmath399 , then @xmath400 it follows that @xmath401 corresponds to another distribution @xmath193 over assignments @xmath3^k$ ] .",
    "furthermore , it holds @xmath385=(1-\\delta){\\boldsymbol{x}}_{i , a}+\\frac{\\delta}{q}.    \\end{aligned}\\ ] ] finally , let us estimate the statistical distance between the distributions @xmath355 and @xmath193 .",
    "@xmath402 the first inequality is from the triangle inequality and the second inequality is from  .",
    "let us consider an @xmath0-infeasible lp solution @xmath123 for a @xmath2-csp instance @xmath8 of value @xmath134 .",
    "first , we construct vector @xmath339 as in lemma  [ lmm : surgery ] . these variables together with the original local distributions @xmath197",
    "form an @xmath343-infeasible lp solution for @xmath8 .",
    "next , we construct local distributions @xmath347 as in lemma  [ lmm : smoothing ] .",
    "define new variables @xmath403 it follows that @xmath404 is a feasible lp solution for @xmath8 .",
    "the lp value of this solution is @xmath405      & = &      c{\\boldsymbol{w}}_{{\\mathcal{i}}}-\\sum_{p\\in { \\mathcal{p}}}{\\boldsymbol{w}}_p\\sum_{\\beta\\in [ q]^{v(p)}}p(\\beta)\\left({\\boldsymbol{\\mu}}_{p,\\beta}-{\\boldsymbol{\\mu}}'_{p,\\beta}\\right)\\\\      & \\geq &      c{\\boldsymbol{w}}_{{\\mathcal{i}}}-\\sum_{p\\in { \\mathcal{p}}}{\\boldsymbol{w}}_p||{\\boldsymbol{\\mu}}_p-{\\boldsymbol{\\mu}}'_p||_1\\\\      & \\geq &      c{\\boldsymbol{w}}_{{\\mathcal{i}}}-\\epsilon \\cdot { \\mathrm{poly}}(kq ) { \\boldsymbol{w}}_{{\\mathcal{i}}}.    \\end{aligned}\\ ] ] we used @xmath406 for the first inequality , and the second inequality follows from lemma  [ lmm : smoothing ] .",
    "in this section , we give a proof of lemma  [ lmm : packing - lp ] .",
    "we consider a more restricted form of a packing lp : @xmath407 where @xmath141 is a non - negative matrix such that @xmath408 or @xmath409 for any @xmath410 , i\\in [ n]$ ] , and @xmath411 is a non - negative vector .",
    "define @xmath412 then , there is a distributed algorithm that solves this packing lp .",
    "[ lmm : kmw06 ] for sufficiently small @xmath22 , there exists a deterministic distributed algorithm that computes a feasible @xmath162-approximate solution to lp   in @xmath413 rounds .    in order to apply lemma  [ lmm : kmw06 ] to lp  ,",
    "we transform it to the form lp  .",
    "note that , in the objective function , the coefficient of @xmath144 is @xmath414 and the coefficients of @xmath415 are @xmath416 .",
    "thus , by replacing @xmath144 with @xmath417 and replacing @xmath415 with @xmath418 , respectively , we obtain the following lp . @xmath419 } \\frac{{\\boldsymbol{x}}_{v , a}}{c } \\leq q-1 + \\epsilon & \\forall v\\in v\\\\          & \\sum\\limits_{a\\in[q]}\\frac{\\overline{{\\boldsymbol{x}}}_{v , a}}{c } \\leq 1+\\epsilon & \\forall v\\in v\\\\          & \\frac{{\\boldsymbol{x}}_{v , a}}{c}+\\sum\\limits_{\\beta \\in [ q]^{v(p ) } , \\beta_v = a}\\frac{{\\boldsymbol{\\mu}}_{p,\\beta}}{{\\boldsymbol{w}}_pp(\\beta)+c } \\leq 1+\\epsilon & \\forall p\\in { \\mathcal{p } } , v\\in v(p ) , a\\in [ q]\\\\      & \\frac{\\overline{{\\boldsymbol{x}}}_{v , a}}{c}+\\sum\\limits_{\\beta \\in [ q]^{v(p ) } , \\beta_v = a}\\frac{\\overline{{\\boldsymbol{\\mu}}}_{p,\\beta}}{c } \\leq q^{v(p)-1}+\\epsilon & \\forall p\\in { \\mathcal{p } } , v \\in v(p ) , a\\in [ q]\\\\      & \\frac{{\\boldsymbol{x}}_{v , a}}{c}+\\frac{\\overline{{\\boldsymbol{x}}}_{v , a}}{c } \\leq 1 , \\quad { \\boldsymbol{x}}_{v , a}\\geq 0 , \\quad \\overline{{\\boldsymbol{x}}}_{v , a}\\geq 0 & \\forall v \\in",
    "v\\\\      & \\frac{{\\boldsymbol{\\mu}}_{p,\\beta}}{{\\boldsymbol{w}}_pp(\\beta)+c}+\\frac{\\overline{{\\boldsymbol{\\mu}}}_{p,\\beta}}{c } \\leq 1 , \\quad { \\boldsymbol{\\mu}}_{p,\\beta}\\geq 0 , \\quad \\overline{{\\boldsymbol{\\mu}}}_{p,\\beta}\\geq 0 & \\forall p\\in { \\mathcal{p } } , \\beta\\in [ q]^{v(p)}.\\\\    \\end{array}\\end{aligned}\\ ] ]    we multiply each constraint in order to make every coefficient in the lhs at least @xmath77 . then , we have the following lp .",
    "@xmath419}{\\boldsymbol{x}}_{v , a } \\leq c(q-1 + \\epsilon ) & \\forall v \\in v\\\\          & \\sum\\limits_{a\\in[q]}\\overline{{\\boldsymbol{x}}}_{v , a } \\leq c(1+\\epsilon ) & \\forall v\\in v\\\\          & \\frac{w+c}{c}{\\boldsymbol{x}}_{v , a}+\\sum\\limits_{\\beta \\in [ q]^{v(p ) } , \\beta_v = a}\\frac{w+c}{{\\boldsymbol{w}}_pp(\\beta)+1}{\\boldsymbol{\\mu}}_{p,\\beta } \\leq ( 1+\\epsilon)(w+c ) & \\forall p\\in { \\mathcal{p } } , v\\in v(p ) , a\\in [ q]\\\\      & \\overline{{\\boldsymbol{x}}}_{v , a}+\\sum\\limits_{\\beta \\in [ q]^{v(p ) } , \\beta_v = a}\\overline{{\\boldsymbol{\\mu}}}_{p,\\beta } \\leq c(q^{v(p)-1}+\\epsilon ) & \\forall p\\in { \\mathcal{p } } , v\\in v(p ) , a\\in [ q]\\\\      & { \\boldsymbol{x}}_{v , a}+\\overline{{\\boldsymbol{x}}}_{v , a } \\leq c , \\quad { \\boldsymbol{x}}_{v , a}\\geq 0 , \\quad \\overline{{\\boldsymbol{x}}}_{v , a}\\geq 0 & \\forall v \\in v\\\\      & \\frac{w+c}{{\\boldsymbol{w}}_pp(\\beta)+1}{\\boldsymbol{\\mu}}_{p,\\beta}+\\frac{w+c}{c}\\overline{{\\boldsymbol{\\mu}}}_{p,\\beta } \\leq w+c , \\quad { \\boldsymbol{\\mu}}_{p,\\beta}\\geq 0 , \\quad \\overline{{\\boldsymbol{\\mu}}}_{p,\\beta}\\geq 0 & \\forall p\\in { \\mathcal{p } } , \\beta\\in [ q]^{v(p)}.\\\\    \\end{array }    \\label{lp : blp - super - relaxed}\\end{aligned}\\ ] ]    note that lp   is of the form lp  . after a calculation , we have @xmath420 we define the _ degree _ of a variable in an lp as the number of inequalities where the variable appears .",
    "let @xmath421 and @xmath422 be the maximum degree of primal variables and dual variables , respectively . here ,",
    "we treat lp   as a dual formulation .",
    "we have @xmath423    applying the algorithm given in lemma  [ lmm : kmw06 ] to lp  , we obtain a distributed algorithm that calculates @xmath162-approximate solution .",
    "the number of rounds is @xmath413 .",
    "note that , given a variable , we can simulate the computation of the distributed algorithm involved by the variable with @xmath424 queries , where @xmath425 is the number of rounds .",
    "thus , the query complexity becomes @xmath426",
    "since we move each @xmath143 by at most @xmath0 , each constraint @xmath340 } { \\boldsymbol{x}}^\\epsilon_{v , a}=1 $ ] can be at most @xmath233-infeasible .",
    "also , each constraint @xmath348^{v(p)},\\beta_v = a } { \\boldsymbol{\\mu}}_{p,\\beta}={\\boldsymbol{x}}^\\epsilon_{v , a}$ ] can be at most @xmath149-infeasible .",
    "since the size of the range of @xmath427 is @xmath428 , the second claim is obvious .",
    "suppose that @xmath123 has an lp value @xmath134 .",
    "from the fact that @xmath123 is a @xmath234-approximate solution , we have @xmath429 .",
    "also , by lemma  [ lmm : discretize ] , @xmath232 is a @xmath233-infeasible lp solution .",
    "since only @xmath197 affects the value of the objective function , the lp value of @xmath232 equals @xmath134 .",
    "a key observation is that @xmath232 is also an lp solution for the folded instance @xmath229 .",
    "thus , we see that @xmath229 has a @xmath233-infeasible solution of value at least @xmath134 . from lemma  [ lmm : robust ]",
    ", we have @xmath430 in the last inequality , we use the fact that @xmath431 .",
    "let @xmath288 be an instance generated by @xmath287 .",
    "let @xmath432 be a constraint on a variable sequence @xmath433 in @xmath288 .",
    "note that the arities of @xmath434 are the same since they both are copies of @xmath12 .",
    "for each @xmath435 $ ] , we choose @xmath436 arbitrarily and @xmath437 be the remaining one , i.e. , @xmath438 .",
    "then , we define a constraint @xmath439 on the variable sequence @xmath440 .",
    "we create another instance @xmath441 from @xmath288 by replacing @xmath442 by @xmath443 .",
    "we call this method _ switching_. the following concentration bound is obtained by a simple application of theorem  2.19 in  @xcite .    [ lmm : chernoff - reg ] if @xmath444 is a random variable defined on @xmath287 such that @xmath445 holds where @xmath288 and @xmath441 are instances of @xmath287 that only differ by a switching , then @xmath446 \\right| \\geq t\\right ] \\leq 2\\exp\\left(-\\frac{t^2}{tn c^2}\\right )    \\end{aligned}\\ ] ] for all @xmath447",
    ".    let @xmath448^{v\\times [ n]}$ ] be an assignment to @xmath87 .",
    "for @xmath122 and @xmath324 $ ] , we define @xmath449 \\mid \\alpha_{(v , i)}=a\\}/n$ ] . also , for @xmath109 and @xmath310^{v(p)}$ ] , we define @xmath450 . note that @xmath451 ( resp . , @xmath355 ) gives a probability distribution over assignments to the variable @xmath10 ( resp .",
    ", the variable set @xmath94 ) .",
    "let @xmath288 be the sub - instance of @xmath87 generated by @xmath287 for @xmath109 .",
    "the expectation ( over @xmath287 ) of the value gained by a constraint @xmath12 in @xmath288 is @xmath452 $ ] .",
    "thus , it holds that @xmath453       =      \\sum_{p\\in { \\mathcal{p}}}{\\mathop{\\mathrm{e}}}_{{\\mathcal{j}}_p \\sim { \\mathcal{d}}_{n , t}^{{\\mathbf{opt}}}(p)}[{\\mathbf{val}}({\\mathcal{j}}_p,\\alpha_{|v(p ) } ) ]      =      tn\\sum_{p\\in { \\mathcal{p}}}{\\boldsymbol{w}}_p   { \\mathop{\\mathrm{e}}}_{\\beta_p \\sim { \\boldsymbol{\\mu}}_p}[p(\\beta_p ) ] \\\\      & = &      tn\\sum_{p\\in { \\mathcal{p}}}{\\boldsymbol{w}}_p { \\mathop{\\mathrm{e}}}_{\\beta \\sim { \\boldsymbol{\\mu}}}[p(\\beta_{|v(p ) } ) ]      =      tn{\\mathop{\\mathrm{e}}}_{\\beta \\sim { \\boldsymbol{\\mu}}}[\\sum_{p\\in { \\mathcal{p}}}{\\boldsymbol{w}}_pp(\\beta_{|v(p ) } ) ]      =      tn{\\mathop{\\mathrm{e}}}_{\\beta \\sim { \\boldsymbol{\\mu}}}[{\\mathbf{val}}({\\mathcal{i}},\\beta ) ]    \\end{aligned}\\ ] ] thus , it follows that @xmath454   \\leq tn{\\mathbf{opt}}({\\mathcal{i } } ) .",
    "\\label{eq : less - than - opt-1 }    \\end{aligned}\\ ] ]    note that , for instances @xmath288 and @xmath441 generated by @xmath287 such that they differ by a switching , @xmath455 and @xmath456 can differ by at most @xmath457 .",
    "then , from lemma  [ lmm : chernoff - reg ] , @xmath458\\right|\\geq t \\right ]      \\leq      2\\exp\\left(-\\frac{t^2}{4tn w^2}\\right ) .",
    "\\end{aligned}\\ ] ] then , @xmath459|\\geq t|{\\mathcal{p}}| \\right ]      & \\leq &      \\pr \\left[\\exists p\\in { \\mathcal{p}},\\ ; |{\\mathbf{val}}({\\mathcal{j}}_p,\\alpha_{|v(p)})-{\\mathop{\\mathrm{e}}}[{\\mathbf{val}}({\\mathcal{j}}_p,\\alpha_{|v(p)})]|\\geq t \\right ] \\\\      & \\leq &      2|{\\mathcal{p}}|\\exp\\left(-\\frac{t^2}{4tn w^2}\\right ) .    \\end{aligned}\\ ] ] the last inequality is from the union bound .",
    "we choose @xmath460 so that @xmath461 .",
    "we have @xmath462|\\geq \\epsilon { \\boldsymbol{w}}_{{\\mathcal{j } } }   \\bigr ]      \\leq      2|{\\mathcal{p}}|\\exp\\left(-\\frac{\\epsilon^2 tn}{4w^2}\\right ) .",
    "\\label{eq : less - than - opt-2 }    \\end{aligned}\\ ] ]    we combine and with the union bound over all @xmath463 assignments .",
    "it holds that @xmath464       & = &      \\pr\\bigl[\\exists \\alpha , { \\overline{\\mathbf{val}}}({\\mathcal{j}},\\alpha ) \\geq { \\overline{\\mathbf{opt}}}({\\mathcal{i } } ) + \\epsilon \\bigr]\\\\      & \\leq &      2|{\\mathcal{p}}|\\exp\\left(-\\frac{\\epsilon^2 tn}{4w^2}\\right ) q^{|v|n}.",
    "\\end{aligned}\\ ] ] by choosing @xmath465 , we have the desired result .",
    "note that @xmath466 and @xmath467 can be seen as constants when @xmath158 is sufficiently large .",
    "let @xmath448^{v\\times [ n]}$ ] be the natural assignment to variables in @xmath87 .",
    "that is , @xmath468 when the variable @xmath469 is assigned to the value @xmath320 in the construction of @xmath267 .",
    "then , @xmath470      =      tn{\\mathbf{lp}}({\\mathcal{i } } ) .",
    "\\end{aligned}\\ ] ]      for notational simplicity , we omit subscripts @xmath158 and @xmath268 in this section .",
    "we define some notions . at each step of an algorithm ,",
    "a variable @xmath10 is called _ seen _ if @xmath10 is appeared in queries to the oracle or answers by the oracle so far .",
    "also , an index @xmath11 of a variable @xmath10 is called _ seen _ if the @xmath11-th constraint of @xmath10 is already returned by the oracle .    here",
    ", we only show a lower bound for a ( randomized ) algorithm whose behavior is slightly restricted .",
    "that is , when an algorithms asks for a constraint incident to an unseen variable , we assume that the algorithm chooses the variable uniformly at random from the set of unseen variables .",
    "we can get rid of this assumption using the technique presented in section  4 of  @xcite .",
    "details are deferred to the full version of the paper . in what follows",
    ", we regard that the oracle accepts two types of queries .",
    "the first one is same as the original ,",
    "i.e. , when we specify a variable @xmath10 and an index @xmath11 , the oracle returns the @xmath11-th constraint of @xmath10 .",
    "the second one simply returns a random variable from the set of unseen variables without receiving any argument .",
    "when an algorithm asks for a constraint incident to an unseen variable , it uses the second type of queries to get a variable first , and then it uses the first type of queries to get a constraint incident to the variable .",
    "now , we prove lemma  [ lmm : distinguish ] .",
    "recall that , from yao s minimax principle , it suffices to consider deterministic algorithms .",
    "we basically follow the approach presented in section  7 of  @xcite .",
    "let @xmath331 be a deterministic algorithm .",
    "we introduce a randomized process @xmath471 ( resp .",
    ",  @xmath472 , which interacts with @xmath331 so that @xmath471 ( resp . ,  @xmath473 ) answers queries of @xmath331 to the oracle while constructing a random instance from @xmath86 ( resp .",
    ",  @xmath474 .",
    "the final distribution of instances generated by @xmath471 ( resp . ,  @xmath473 ) coincides with @xmath86 ( resp . ,  @xmath89 ) no matter how @xmath331 makes queries .",
    "the interaction between @xmath331 and @xmath471 ( resp.,@xmath473 ) precisely simulates the interaction between @xmath331 and @xmath272 where @xmath87 is an instance generated by the distribution @xmath86 ( resp . ,",
    "@xmath89 ) .",
    "the process @xmath475 , which corresponds to the distribution @xmath476 , is simply a process that chooses @xmath471 or @xmath473 randomly and behave as the chosen process .    a _ transcript _",
    "is the part of an instance that @xmath331 has seen through the interaction with a randomized process . note that , the transcript contains the information about labels of vertices and indices of constraints",
    "let @xmath477 ( resp .",
    ",  @xmath478 be the distribution of transcripts after @xmath479-step interaction between @xmath331 and @xmath471 ( resp . ,  @xmath473 ) ( here , @xmath480 stands for _ knowledge _ ) .",
    "the statistical distance between @xmath477 and @xmath481 is defined as follows .",
    "@xmath482 - \\pr_{k ' \\sim { \\mathcal{k}}_{\\tau}^{{\\mathbf{lp}}}}[k ' = k ] \\right|\\end{aligned}\\ ] ] from the argument given in section  7 of  @xcite , by showing that @xmath483 when @xmath484 , we have the desired result .",
    "we can safely assume that @xmath331 never asks for the same constraint twice or more .",
    "also , we assume that , if @xmath485 returns a constraint containing a variable in the transcript , @xmath331 can correctly guess the process ( @xmath471 or @xmath473 ) with which @xmath331 is interacting .",
    "in other words , we are assuming that , when @xmath471 ( resp .",
    ",  @xmath473 ) returns a constraint containing a variable in the transcript , it also returns a certificate stating that the current process is @xmath471 ( resp . ,",
    "@xmath473 ) .",
    "this only improves the ability of @xmath331 and makes the lower bound smaller .",
    "now , we define the randomized process @xmath471 .",
    "we omit the definition of @xmath473 as it is very similar to the construction of @xmath471 .",
    "the process @xmath471 has two stages .",
    "the first stage proceeds as long as @xmath331 perform queries . in this stage",
    ", @xmath471 chooses an answer for each query . in the second stage",
    ", the process completes the transcript into an instance @xmath87 .",
    "we identify @xmath486 $ ] ( resp . , @xmath487 $ ] ) with the set of variables of @xmath8 ( resp . , an instance generated by @xmath471 ) .",
    "recall that , in an instance generated by @xmath86 , the variable set @xmath487 $ ] can be separated into @xmath23 sets , each of which corresponds to a variable @xmath488 $ ] .",
    "the process @xmath471 incrementally constructs this correspondence .",
    "a ( partial ) correspondences is represented by a map @xmath489 \\to [ n ] \\cup \\{\\bot\\}$ ] . for a variable @xmath490 $ ] ,",
    "let @xmath491 \\mid \\rho(v ) = i\\}$ ] and @xmath492 .",
    "also , for each vertex @xmath493 $ ] and an index @xmath494 $ ] , let @xmath495 and @xmath496 .",
    "in the first stage , given a query by an algorithm @xmath331 , @xmath471 chooses an answer for it as follows .    * when the query asks for a random unseen variable : we choose a random unseen variable @xmath493 $ ] , and set @xmath497 with probability @xmath498 } ( n - n_j)}$ ] .",
    "then , we return @xmath10 to @xmath331 . * when the query asks for the @xmath499-th constraint of @xmath10 : note that @xmath500 from the assumption that , when @xmath331 asks for a constraint incident to an unseen variable , it asks for a random unseen variable beforehand .",
    "let @xmath208 be such that @xmath501 , and @xmath12 be the @xmath208-th constraint of @xmath502 in @xmath8 , which is applied to a sequence of variables @xmath503 in @xmath8 for which @xmath504 for some @xmath505 $ ] .",
    "also , let @xmath506 be such that @xmath12 is the @xmath506-th constraint of the variable @xmath507 in @xmath8 .",
    "note that @xmath508 .",
    "+ then , we choose a set of variables @xmath509 \\setminus \\{\\ell\\}}$ ] as follows . for each variable @xmath510 with @xmath511",
    ", we choose @xmath510 as @xmath512 with probability @xmath513 .",
    "if otherwise , we choose a random unused variable @xmath510 as @xmath512 ans set @xmath511 .",
    "+ let @xmath514 be a constraint applied to a sequence @xmath218 of weight @xmath515 . finally , we determine indices for each variable @xmath516 . we choose a random index @xmath517 from unused indices in @xmath518 , and set @xmath514 be as the @xmath517-th constraint of @xmath512 .",
    "then , we return @xmath514 as the answer for the query .    in the second stage of @xmath471",
    ", the process uniformly selects an instance @xmath87 among all those who are consistent with the final transcript .",
    "[ lmm : equivalent ] for every algorithm @xmath331 , the randomized process @xmath471 ( resp .",
    ", @xmath473 ) when interacting with @xmath331 , uniformly generates an instance @xmath87 in @xmath86 ( resp . , @xmath89 ) .",
    "the lemma easily follows by induction on the query complexity of @xmath331 .",
    "the base case is clear since if no query is made , then the distribution on instances generated by @xmath471 ( or , @xmath473 ) is clearly uniform .",
    "the induction step follows directly from the definition of the process .",
    "in particular , the distribution on instances resulting from the process switching to the second stage after it answers the query is exactly the same as the distribution resulting from the process performing the second stage without answering the query .",
    "let @xmath331 be a deterministic algorithm .",
    "it is convenient to think that labels of variables are determined on the fly .",
    "that is , @xmath485 decides labels of variables from @xmath487 $ ] at the time when the variable appears for the first time in the interaction between an algorithm and @xmath5 .",
    "the distribution never change by this modification .",
    "also , we can think that the sequence of labels is determined beforehand , and for each time when a new variable appears , a new label for the variable is taken from the front of the sequence .",
    "let @xmath519 be the process obtained from @xmath485 by fixing the sequence to @xmath302 .",
    "it is clear that @xmath485 coincides with the process that takes @xmath302 uniformly at random and acts as @xmath519 .",
    "let @xmath520 ( resp .",
    ",  @xmath521 ) be the process obtained from @xmath471 ( resp .",
    ",  @xmath473 ) by fixing the sequence to @xmath302 .",
    "then , it suffices to bound the statistical distance between the distribution of transcripts when @xmath331 interacts with @xmath520 and the one when @xmath331 interacts with @xmath521 for any sequence @xmath302 .",
    "a deterministic algorithm @xmath331 with query complexity @xmath479 can be expressed as a decision tree of depth at most @xmath479 . here",
    ", each node in the decision tree corresponds to a query to the oracle , and each branch from the node corresponds to the answer by the oracle .",
    "recall that , from the rule of indices , if we fix an index , the process always returns the same predicate ( though the set of vertices to which the predicate is applied should differ ) .",
    "also , since we have fixed the sequence of labels @xmath302 , at each node in the decision tree , there is just one branch corresponding to the case that @xmath331 finds a constraint such that any variable in the constraint ( except the queried variable ) is not in the transcript .",
    "ignoring branches for which @xmath331 outputs an answer , the decision tree has the property that the number of children of each node is at most one . thus , @xmath331 is essentially a non - adaptive algorithm . without loss of generality ,",
    "we assume that @xmath331 outputs that the current instance is generated by @xmath86 after @xmath479 steps .",
    "suppose that the current process is @xmath520 and @xmath331 is asking for a constraint incident to some variable in the @xmath11-th query .",
    "note that @xmath331 has seen at most @xmath522 variables .",
    "then , from the construction of @xmath471 , the probability that @xmath520 returns a variable in the transcript is at most @xmath523 . using the same argument",
    ", we can show that , in the @xmath11-th query , the probability that @xmath521 returns a variable in the transcript is at most @xmath524 where @xmath525 is the minimum of @xmath526^{v(p)}}$ ] except @xmath76 .",
    "thus , from the union bound , after @xmath479 steps , the probability that @xmath519 returns a variable in the transcript is at most @xmath527 then , the probability that @xmath331 outputs the correct answer is at most @xmath528 . to make this probability at least @xmath327",
    ", we have to choose @xmath529 .",
    "note that @xmath525 is a positive constant independent of @xmath158 .",
    "we show the first part of the theorem .",
    "let @xmath2 be a csp such that @xmath530 for some @xmath531 .",
    "suppose that there exists a testing algorithm for the csp  @xmath2 with @xmath332 queries .",
    "note that a @xmath532-far instance @xmath8 satisfies that @xmath533 .",
    "thus , using the testing algorithm , given an instance @xmath8 , with probability at least @xmath1 , we can distinguish the case @xmath534 from the case @xmath535 .",
    "however , instantiating theorem  [ thr : lower ] with @xmath536 , the theorem asserts that any algorithm that , given an instance @xmath8 , with probability at least @xmath1 , distinguishes the case @xmath534 from the case @xmath537 requires @xmath38 queries .",
    "this is a contradiction .",
    "we show the second part of the theorem .",
    "let @xmath2 be a csp such that @xmath51 .",
    "since @xmath19 is continuous at @xmath49 , for any @xmath22 , there exists @xmath363 such that @xmath538 .",
    "consider the algorithm obtained by instantiating theorem  [ thr : upper ] replacing @xmath0 with @xmath539 .",
    "suppose that @xmath8 is a satisfiable instance .",
    "then , we obtain a value @xmath540 .",
    "suppose that @xmath8 is an instance @xmath0-far from satisfiability .",
    "then , we obtain a value @xmath541 .",
    "thus , we can test the satisfiability of the csp  @xmath2 in constant time .",
    "the author is grateful to hiro ito and suguru tamaki for valuable comments on an earlier draft of this paper ."
  ],
  "abstract_text": [
    "<S> raghavendra ( stoc 2008 ) gave an elegant and surprising result : if khot s unique games conjecture ( stoc 2002 ) is true , then for every constraint satisfaction problem ( csp ) , the best approximation ratio is attained by a certain simple semidefinite programming and a rounding scheme for it .    in this paper , we show that similar results hold for constant - time approximation algorithms in the bounded - degree model . specifically , we present the followings : ( i ) for every csp </S>",
    "<S> , we construct an oracle that serves an access , in constant time , to a nearly optimal solution to a basic lp relaxation of the csp . </S>",
    "<S> ( ii ) using the oracle , we give a constant - time rounding scheme that achieves an approximation ratio coincident with the integrality gap of the basic lp . </S>",
    "<S> ( iii ) finally , we give a generic conversion from integrality gaps of basic lps to hardness results . </S>",
    "<S> all of those results are _ unconditional_. therefore , for every bounded - degree csp , we give the best constant - time approximation algorithm among all .    </S>",
    "<S> a csp instance is called @xmath0-far from satisfiability if we must remove at least an @xmath0-fraction of constraints to make it satisfiable . </S>",
    "<S> a csp is called testable if there is a constant - time algorithm that distinguishes satisfiable instances from @xmath0-far instances with probability at least @xmath1 . using the results above </S>",
    "<S> , we also derive , under a technical assumption , an equivalent condition under which a csp is testable in the bounded - degree model .    * </S>",
    "<S> key words : * constant - time approximation , constraint satisfaction problems , linear programmings , rounding schemes , property testing . </S>"
  ]
}