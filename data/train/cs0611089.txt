{
  "article_text": [
    "graphical models of codes have been studied since the 1960s and this study has intensified in recent years due to the discovery of turbo codes by berrou _ et al . _",
    "@xcite , the rediscovery of gallager s low - density parity - check ( ldpc ) codes @xcite by spielman _",
    "_ @xcite and mackay _ et al . _",
    "@xcite , and the pioneering work of wiberg , loeliger and koetter @xcite .",
    "it is now well - known that together with a suitable message passing schedule , a graphical model implies a soft - in soft - out ( siso ) decoding algorithm which is optimal for cycle - free models and suboptimal , yet often substantially less complex , for cyclic models ( cf .",
    "it has been observed empirically in the literature that there exists a correlation between the cyclic topology of a graphical model and the performance of the decoding algorithms implied by that graphical model ( cf .",
    "@xcite ) . to summarize this empirical `` folk - knowledge '' , those graphical models which imply near - optimal decoding algorithms tend to have large girth , a small number of short cycles and a cycle structure that is not overly regular .    two broad classes of graphical modeling problems can be identified in the literature :    * _ constructive _ problems : given a set of design requirements , design a suitable code by constructing a good graphical model ( i.e. a model which implies a low - complexity , near - optimal decoding algorithm ) . * _ extractive _ problems : given a specific ( fixed ) code , extract a graphical model for that code which implies a decoding algorithm with desired complexity and performance characteristics .",
    "constructive graphical modeling problems have been widely addressed by the coding theory community .",
    "capacity approaching ldpc codes have been designed for both the additive white gaussian noise ( awgn ) channel ( cf .",
    "@xcite ) and the binary erasure channel ( cf .",
    "@xcite ) . other classes of modern codes have been successfully designed for a wide range of practically motivated block lengths and rates ( cf .",
    "@xcite ) .",
    "less is understood about extractive graphical modeling problems , however .",
    "the extractive problems that have received the most attention are those concerning tanner graph @xcite and trellis representations of block codes .",
    "tanner graphs imply low - complexity decoding algorithms ; however , the tanner graphs corresponding to many block codes of practical interest , e.g. high - rate reed - muller ( rm ) , reed - solomon ( rs ) , and bose - chaudhuri - hocquenghem ( bch ) codes , necessarily contain many short cycles @xcite and thus imply poorly performing decoding algorithms .",
    "there is a well - developed theory of conventional trellises @xcite and tail - biting trellises @xcite for linear block codes .",
    "conventional and tail - biting trellises imply optimal and , respectively , near - optimal decoding algorithms ; however , for many block codes of practical interest these decoding algorithms are prohibitively complex thus motivating the study of more general graphical models ( i.e. models with a richer cyclic topology than a single cycle ) .",
    "the goal of this work is to lay out some of the foundations of the theory of extractive graphical modeling problems . following a review of graphical models for codes in section [ background_sec ] , a complexity measure for graphical models",
    "is introduced in section [ complexity_sec ] .",
    "the proposed measure captures a cyclic graphical model analog of the familiar notions of state and branch complexity for trellises @xcite .",
    "the _ minimal tree complexity _ of a code , which is a natural generalization of the well - understood minimal trellis complexity of a code to arbitrary cycle - free models , is then defined using this measure .    the tradeoff between cyclic topology and complexity in graphical models",
    "is studied in section [ ticsb_sec ] .",
    "wiberg s cut - set bound ( csb ) is the existing tool that best characterizes this fundamental tradeoff @xcite .",
    "while the csb can be used to establish the square - root bound for tail - biting trellises @xcite and thus provides a precise characterization of the potential tradeoff between cyclic topology and complexity for single - cycle models , as was first noted by wiberg _",
    "@xcite , it is very challenging to use the csb to characterize this tradeoff for graphical models with cyclic topologies richer than a single cycle . in order to provide a more precise characterization of this tradeoff than that offered by the csb alone",
    ", this work introduces a new bound in section [ ticsb_sec ] - the _ tree - inducing cut - set bound _ - which may be viewed as a generalization of the square - root bound to graphical models with arbitrary cyclic topologies .",
    "specifically , it is shown that an @xmath0-root complexity reduction ( with respect to the minimal tree complexity as defined in section [ complexity_sec ] ) requires the introduction of _ at least _",
    "@xmath1 cycles .",
    "the proposed bound can thus be viewed as an extension of the square - root bound to graphical models with arbitrary cyclic topologies .",
    "the transformation of graphical models is studied in section [ model_tx_sec ] and [ extraction_sec ] . whereas minimal conventional and tail - biting trellis models can be characterized algebraically via trellis - oriented generator matrices @xcite",
    ", there is in general no known analog of such algebraic characterizations for arbitrary cycle - free graphical models @xcite , let alone cyclic models . in the absence of such an algebraic characterization , it is initially unclear as to how cyclic graphical models can be extracted . in section",
    "[ model_tx_sec ] , a set of basic transformation operations on graphical models for codes is introduced and it is shown that any graphical model for a given code can be transformed into any other graphical model for that same code via the application of a finite number of these basic transformations .",
    "the transformations studied in section [ model_tx_sec ] thus provide a mechanism for searching the space of all _ all _ graphical models for a given code . in section [ extraction_sec ] , the basic transformations introduced in section [ model_tx_sec ]",
    "are used to extract novel graphical models for linear block codes . starting with an initial tanner graph for a given code , heuristics for extracting other tanner graphs , generalized tanner graphs , and more complex cyclic graphical models",
    "are investigated .",
    "concluding remarks and directions for future work are given in section [ conc_sec ] .",
    "the binomial coefficient is denoted @xmath2 where @xmath3 are integers . the finite field with @xmath4 elements",
    "is denoted @xmath5 .",
    "given a finite index set @xmath6 , the vector space over @xmath5 defined on @xmath6 is the set of vectors @xmath7 suppose that @xmath8 is some subset of the index set @xmath6 .",
    "projection _ of a vector @xmath9 onto @xmath10 is denoted @xmath11      given a finite index set @xmath6 , a _ linear code _ over @xmath5 defined on @xmath6 is some vector subspace @xmath12 .",
    "the _ block length _ and _ dimension _ of @xmath13 are denoted @xmath14 and @xmath15 , respectively .",
    "if known , the minimum hamming distance of @xmath13 is denoted @xmath16 and @xmath13 may be described by the triplet @xmath17 $ ] .",
    "this work considers only linear codes and the terms code and linear code are used interchangeably .",
    "a code @xmath13 can be described by an @xmath18 , @xmath19 , _ generator matrix _ @xmath20 over @xmath5 , the rows of which span @xmath13 .",
    "an @xmath18 generator matrix is _ redundant _ if @xmath21 is strictly greater than @xmath22 .",
    "a code @xmath13 can also be described by an @xmath23 , @xmath24 , _ parity - check matrix _ @xmath25 over @xmath5 , the rows of which span the null space of @xmath13 ( i.e. the dual code @xmath26 ) .",
    "each row of @xmath25 defines a @xmath4__-ary single parity - check equation _ _ which every codeword in @xmath13 must satisfy .",
    "an @xmath23 parity - check matrix is _ redundant _ if @xmath27 is strictly greater than @xmath28    given a subset @xmath8 of the index set @xmath6 , the _ projection _ of @xmath13 onto @xmath10 is the set of all codeword projections : @xmath29 closely related to @xmath30 is the _ subcode _ @xmath31 : the projection onto @xmath10 of the subset of codewords satisfying @xmath32 for @xmath33 .",
    "both @xmath30 and @xmath34 are linear codes .",
    "suppose that @xmath35 and @xmath36 are two codes over @xmath5 defined on the same index set @xmath6 .",
    "the intersection @xmath37 of @xmath35 and @xmath36 is a linear code defined on @xmath6 comprising the vectors in @xmath38 that are contained in both @xmath35 and @xmath36 .",
    "finally , suppose that @xmath39 and @xmath40 are two codes defined on the disjoint index sets @xmath41 and @xmath42 , respectively .",
    "the cartesian product @xmath43 is the code defined on the index set @xmath44 such that @xmath45 and @xmath46 .",
    "let @xmath13 be a linear code over @xmath5 defined on the index set @xmath6 .",
    "let @xmath8 be some subset of @xmath6 and let @xmath47 be a vector of non - zero elements of @xmath5 .",
    "a _ generalized extension _ of @xmath13 is formed by adding a @xmath4-ary parity - check on the codeword coordinates indexed by @xmath10 to @xmath13 ( i.e. a @xmath4-ary partial parity symbol ) .",
    "the generalized extension code @xmath48 is defined on the index set @xmath49 such that if @xmath50 then @xmath51 where @xmath52 if @xmath53 and @xmath54 the length and dimension of @xmath48 are @xmath55 and @xmath56 , respectively , and the minimum distance of @xmath48 satisfies @xmath57 .",
    "note that if @xmath58 and @xmath59 for all @xmath60 , then @xmath48 is simply a classically defined extended code @xcite .",
    "more generally , a _ _ degree-__@xmath61 _ generalized extension _ of @xmath13 is formed by adding @xmath61 @xmath4-ary partial parity symbols to @xmath13 and is defined on the index set @xmath62 .",
    "the @xmath63 partial parity symbol @xmath64 in such an extension is defined as a partial parity on some subset of @xmath65 .      a _ graph _ @xmath66 consists of :    * a finite non - empty set of vertices @xmath67 . * a set of edges @xmath68 , which is some subset of the pairs @xmath69 . * a set of _ half - edges _",
    "@xmath70 , which is any subset of @xmath67 .",
    "it is non - standard to define graphs with half - edges ; however , as will be demonstrated in section [ graphical_models_subsec ] , half - edges are useful in the context of graphical models for codes .",
    "a walk of length @xmath71 in @xmath72 is a sequence of vertices @xmath73 in @xmath67 such that @xmath74 for all @xmath75 .",
    "a path is a walk on distinct vertices while a _ cycle _ of length @xmath71 is a walk such that @xmath76 through @xmath77 are distinct and @xmath78",
    ". cycles of length @xmath71 are often denoted @xmath71-cycles .",
    "a _ tree _ is a graph containing no cycles ( i.e. a _ cycle - free _ graph ) .",
    "two vertices @xmath79 are _ adjacent _ if a single edge @xmath80 connects @xmath81 to @xmath82 .",
    "a graph is _ connected _ if any two of its vertices are linked by a walk .",
    "cut _ in a connected graph @xmath72 is some subset of edges @xmath83 the removal of which yields a disconnected graph .",
    "cuts thus partition the vertex set @xmath67 .",
    "finally , a graph is bipartite if its vertex set can be partitioned @xmath84 , @xmath85 , such that any edge in @xmath68 joins a vertex in @xmath86 to one in @xmath87 .",
    "graphical models for codes have been described by a number of different authors using a wide variety of notation ( e.g. @xcite ) .",
    "the present work uses the notation described below which was established by forney in his _ codes on graphs _",
    "papers @xcite .",
    "a _ linear behavioral realization _ of a linear code @xmath12 comprises three sets :    * a set of _ visible _ ( or symbol ) variables @xmath88 corresponding to the codeword coordinates - ary visible variables corresponding to @xmath89 codeword coordinates . by appropriately introducing equality constraints and @xmath4-ary hidden variables ,",
    "it can be seen that these two definitions are essentially equivalent . ] with alphabets @xmath90 .",
    "* a set of _ hidden _ ( or state ) variables @xmath91 with alphabets @xmath92 . * a set of linear local constraint codes @xmath93 .",
    "each visible variable is @xmath4-ary while the hidden variable @xmath94 with alphabet @xmath95 is @xmath96-ary .",
    "the hidden variable alphabet index sets @xmath97 are disjoint and unrelated to @xmath6 .",
    "each local constraint code @xmath98 involves a certain subset of the visible , @xmath99 , and hidden , @xmath100 , variables and defines a subspace of the local configuration space : @xmath101 each local constraint code @xmath98 thus has a well - defined block length @xmath102 and dimension @xmath103 over @xmath5 .",
    "local constraints that involve only hidden variables are _ internal _ constraints while those involving visible variables are _ interface _ constraints .",
    "the full behavior of the realization is the set @xmath104 of all visible and hidden variable configurations which simultaneously satisfy all local constraint codes : @xmath105 the projection of the linear code @xmath104 onto @xmath6 is precisely @xmath13 .",
    "forney demonstrated in @xcite that it is sufficient to consider only those realizations in which all visible variables are involved in a single local constraint and all hidden variables are involved in two local constraints .",
    "normal _ realizations have a natural graphical representation in which local constraints are represented by vertices , visible variables by half - edges and hidden variables by edges .",
    "the half - edge corresponding to the visible variable @xmath106 is incident on the vertex corresponding to the single local constraint which involves @xmath106 .",
    "the edge corresponding to the hidden variable @xmath107 is incident on the vertices corresponding to the two local constraints which involve @xmath107 .",
    "the notation @xmath108 and term _ graphical model _ is used throughout this work to denote both a normal realization of a code @xmath13 and its associated graphical representation .",
    "it is assumed throughout that the graphical models considered are connected .",
    "equivalently , it is assumed throughout that the codes studied can not be decomposed into cartesian products of shorter codes @xcite .",
    "note that this restriction will apply only to the global code considered and not to the local constraints in a given graphical model .",
    "the term _ tanner graph _ has been used to describe different classes of graphical models by different authors .",
    "tanner graphs denote those graphical models corresponding to parity - check matrices in this work .",
    "specifically , let @xmath25 be an @xmath23 parity - check matrix for the code @xmath13 over @xmath5 defined on the index set @xmath6 .",
    "the tanner graph corresponding to @xmath25 contains @xmath109 local constraints of which @xmath110 are interface repetition constraints , one corresponding to each codeword coordinate , and @xmath27 are internal @xmath4-ary single parity - check constraints , one corresponding to each row of @xmath25 .",
    "an edge ( hidden variable ) connects a repetition constraint @xmath98 to a single parity - check constraint @xmath111 if and only if the codeword coordinate corresponding to @xmath98 is involved in the single parity - check equation defined by the row corresponding to @xmath111 .",
    "a tanner graph for @xmath13 is _ redundant _ if it corresponds to a redundant parity - check matrix .",
    "a _ degree_-@xmath61 _ generalized tanner graph _ for @xmath13 is simply a tanner graph corresponding to some degree-@xmath61 generalized extension of @xmath13 in which the visible variables corresponding to the partial parity symbols have been removed .",
    "generalized tanner graphs have been studied previously in the literature under the rubric of generalized parity - check matrices @xcite .",
    "this work introduces the term @xmath112__-ary graphical model _ _ to denote a normal realization of a linear code @xmath13 over @xmath5 that satisfies the following constraints :    * the alphabet index size of every hidden variable + @xmath94 , @xmath113 , satisfies @xmath114 . *",
    "every local constraint @xmath98 , @xmath115 , either satifies @xmath116 or can be decomposed as a cartesian product of + codes , each of which satisfies this condition .",
    "the complexity measure @xmath117 simultaneously captures a cyclic graphical model analog of the familiar notions of state and branch complexity for trellises @xcite . from the above definition ,",
    "it is clear that tanner graphs and generalized tanner graphs for codes over @xmath5 are @xmath4-ary graphical models .",
    "the efficacy of this complexity measure is discussed further in section [ ti_csb_discussion_subsec ] .",
    "the following three properties of @xmath112-ary graphical models will be used in the proof of theorem [ ti_csb_theorem ] in section [ ticsb_sec ] :    1 .   _",
    "internal local constraint involvement property : _ any hidden variable in a @xmath112-ary graphical model can be made to be incident on an _ internal _ local constraint @xmath98 which satisfies @xmath118 without fundamentally altering the complexity or cyclic topology of that graphical model .",
    "2 .   _ internal local constraint removal property : _ the removal of an internal local constraint from a @xmath112-ary graphical model results in a @xmath112-ary graphical model for a new code defined on same index set .",
    "_ internal local constraint redefinition property : _ any internal local constraint @xmath98 in a @xmath112-ary graphical model satisfying @xmath119 can be equivalently represented by @xmath120 @xmath4-ary single parity - check equations over the visible variable index set .",
    "these properties , which are defined in detail in the appendix , are particularly useful in concert .",
    "specifically , let @xmath121 be a @xmath112-ary graphical model for the linear code @xmath13 over @xmath5 defined on an index set @xmath6 .",
    "suppose that the internal constraint @xmath122 satisfying @xmath123 is removed from @xmath121 resulting in the new code @xmath124 .",
    "denote by @xmath125 the set of @xmath120 @xmath4-ary single parity - check equations that result when @xmath122 is redefined over @xmath6 .",
    "a vector in @xmath38 is a codeword in @xmath13 if and only if it is contained in @xmath124 and satisfies each of these @xmath120 single parity - check equations so that @xmath126      the minimal trellis complexity @xmath127 of a linear code @xmath13 over @xmath5 is defined as the base-@xmath4 logarithm of the maximum hidden variable alphabet size in its minimal trellis @xcite .",
    "considerable attention has been paid to this quantity ( cf .",
    "@xcite ) as it is closely related to the important , and difficult , study of determining the minimum possible complexity of optimal siso decoding of a given code .",
    "this work introduces the minimal tree complexity of a linear code as a generalization of minimal trellis complexity to arbitrary cycle - free graphical model topologies .",
    "the _ minimal tree complexity _ of a linear code @xmath13 over @xmath5 is the smallest integer @xmath128 such that there exists a cycle - free @xmath129-ary graphical model for @xmath13 .",
    "much as @xmath130 , the minimal tree complexity of a code @xmath13 is equal to that of its dual .",
    "let @xmath13 be a linear code over @xmath5 with dual @xmath26 .",
    "then @xmath131    the dualizing procedure described by forney @xcite can be applied to a @xmath129-ary graphical model for @xmath13 in order to obtain a graphical model for @xmath26 which is readily shown to be @xmath129-ary .",
    "since a trellis is a cycle - free graphical model , @xmath132 , and all known upper bounds on @xmath127 extend to @xmath133 .",
    "specifically , consider the section of a minimal trellis for @xmath13 illustrated in figure [ trellis_sec_fig ] .",
    "-ary graphical model representation of a trellis section.,width=120 ]    the hidden ( state ) variables have alphabet sizes @xmath134 and @xmath135 , respectively .",
    "the local constraint @xmath98 has length @xmath136 and dimension @xmath137 so that @xmath138 lower bounds on @xmath127 do not , however , necessarily extend to @xmath133 .",
    "for example , the minimal trellis complexity of a length @xmath139 , dimension @xmath140 , binary first - order reed muller code is known to be @xmath117 for @xmath141 @xcite , whereas the conditionally cycle - free generalized tanner graphs for these codes described in @xcite have a natural interpretation as @xmath142-ary cycle - free graphical models .",
    "the cut - set bound , however , precludes @xmath128 from being significantly smaller than @xmath143 @xcite .",
    "the following lemma concerning minimal tree complexity will be used in the proof of theorem [ ti_csb_theorem ] in section [ ticsb_sec ] .",
    "[ tree_comp_growth_lemma ] let @xmath13 and @xmath144 be linear codes over @xmath5 defined on the index sets @xmath6 and @xmath8 , respectively , such that @xmath144 is a @xmath4-ary single parity - check code .",
    "define by @xmath48 the intersection of @xmath13 and @xmath144 : @xmath145 the minimal tree complexity of @xmath48 is upper - bounded by @xmath146    by explicit construction of a @xmath147-ary graphical model for @xmath48 .",
    "let @xmath108 be some @xmath129-ary cycle - free graphical model for @xmath13 and let @xmath148 be a minimal connected subtree of @xmath108 containing the set of @xmath149 interface constraints which involve the visible variables in @xmath10 . denote by @xmath150 and @xmath151 the subset of hidden variables and local constraints , respectively , contained in @xmath148 .",
    "choose some local constraint vertex @xmath152 , @xmath153 , as a root for @xmath148 .",
    "observe that the choice of @xmath154 , while arbitrary , induces a directionality in @xmath148 : _ downstream _ toward the root vertex or _ upstream _ away from the root vertex .",
    "for every @xmath94 , @xmath155 , denote by @xmath156 the subset of visible variables in @xmath10 which are upstream from that hidden variable edge .    a @xmath147-ary graphical model for @xmath48",
    "is then constructed from @xmath108 by updating each hidden variable @xmath94 , @xmath155 , to also contain the @xmath4-ary partial parity of the upstream visible variables in @xmath156 .",
    "the local constraints @xmath111 , @xmath157 , are updated accordingly .",
    "finally , @xmath152 is updated to enforce the @xmath4-ary single parity constraint defined by @xmath144 .",
    "this updating procedure increases the alphabet size of each hidden variable @xmath94 , @xmath155 , by at most one and adds at most one single parity - check ( or repetition ) constraint to the definition of each @xmath111 , @xmath158 , and the resulting cycle - free graphical model is thus at most @xmath147-ary .",
    "the proof of lemma [ tree_comp_growth_lemma ] is detailed further by example in the appendix .",
    "wiberg s cut - set bound ( csb ) @xcite is stated below without proof in the language of section [ background_sec ] .",
    "[ csb_theorem ] let @xmath13 be a linear code over @xmath5 defined on the index set @xmath6 .",
    "let @xmath121 be a graphical model for @xmath13 containing a cut @xmath159 corresponding to the hidden variables @xmath94 , @xmath160 , which partitions the index set into @xmath161 and @xmath162 .",
    "let the base-@xmath4 logarithm of the midpoint hidden variable alphabet size of the minimal two - section trellis for @xmath13 on the two - section time axis @xmath163 be @xmath164 .",
    "the sum of the hidden variable alphabet sizes corresponding to the cut @xmath159 is lower - bounded by @xmath165    the csb provides insight into the tradeoff between cyclic topology and complexity in graphical models for codes and it is natural to explore its power to quantify this tradeoff .",
    "two questions which arise for a given linear code @xmath13 over @xmath5 in such an exploration are :    1 .   for a given complexity @xmath117 , how many cycles must be contained in a @xmath112-ary graphical model for @xmath13 ?",
    "2 .   for a given number of cycles @xmath166 ,",
    "what is the smallest @xmath117 such that a @xmath112-ary model containing @xmath166 cycles for @xmath13 can exist ?    for a fixed cyclic topology , the csb can be simultaneously applied to all cuts yielding a linear programming lower bound on the hidden variable alphabet sizes @xcite .",
    "for the special case of a single - cycle graphical model ( i.e. a tail - biting trellis ) , this technique yields a simple solution @xcite :    [ square_root_bound ] let @xmath13 be a linear code over @xmath5 of even length and let @xmath167 be the base-@xmath4 logarithm of the minimum possible hidden variable alphabet size of a conventional trellis for @xmath13 at its midpoint over all coordinate orderings .",
    "the base-@xmath4 logarithm of the minimum possible hidden variable alphabet size @xmath168 of a tail - biting trellis for @xmath13 is lower - bounded by @xmath169    the square - root bound can thus be used to answer the questions posed above for a specific class of single - cycle graphical models . for topologies richer than a single cycle , however , the aforementioned linear programming technique quickly becomes intractable .",
    "specifically , there are @xmath170 ways to partition a size @xmath110 visible variable index set into two non - empty , disjoint , subsets .",
    "the number of cuts to be considered by the linear programming technique for a given cyclic topology thus grows exponentially with block length and a different minimal two - stage trellis must be constructed in order to bound the size of each of those cuts .",
    "recall that a cut in a graph @xmath72 is some subset of the edges @xmath83 the removal of which yields a disconnected graph .",
    "a cut is thus defined without regard to the cyclic topology of the disconnected components which remain after its removal . in order to provide a characterization of the tradeoff between cyclic topology and complexity which is more precise than that provided by the csb alone",
    ", this work focuses on a specific type of cut which is defined below . two useful properties of such cuts are established by propositions [ ti_size_prop ] and [ num_cycle_lemma ] .",
    "let @xmath72 be a connected graph .",
    "a _ tree - inducing cut _ is some subset of edges @xmath171 the removal of which yields a tree with precisely two components .",
    "[ ti_size_prop ] let @xmath66 be a connected graph .",
    "the size @xmath172 of _ any _ tree - inducing cut @xmath173 in @xmath72 is precisely @xmath174    it is well - known that a connected graph is a tree if and only if ( cf .",
    "@xcite ) @xmath175 similarly , a graph composed of two cycle - free components satisfies @xmath176 the result then follows from the observation that the size of a tree - inducing cut is the number of edges which must be removed in order to satisfy ( [ two_comp_tree_eq ] ) .",
    "[ num_cycle_lemma ] let @xmath72 be a connected graph with tree - inducing cut size @xmath172 .",
    "the number of cycles @xmath177 in @xmath72 is lower - bounded by @xmath178    let the removal of a tree - inducing cut @xmath173 in the connected graph @xmath72 yield the cycle - free components @xmath179 and @xmath180 and let @xmath181 . since @xmath179 ( @xmath180 ) is a tree , there is a unique path in @xmath179 ( @xmath180 ) connecting @xmath182 and @xmath183 .",
    "there is thus a unique cycle in @xmath72 corresponding to the edge pair @xmath184 .",
    "there are @xmath185 such distinct edge pairs which yields the lower bound .",
    "note that this is a lower bound because for certain graphs , there can exist cycles which contain more than two edges from a tree - inducing cut .      with tree - inducing cuts defined ,",
    "the required properties of @xmath112-ary graphical models described and lemma [ tree_comp_growth_lemma ] established , the main result concerning the tradeoff between cyclic topology and graphical model complexity can now be stated and proved .",
    "[ ti_csb_theorem ] let @xmath13 be a linear code over @xmath5 defined on the index set @xmath6 and suppose that @xmath108 is a @xmath112-ary graphical model for @xmath13 with tree - inducing cut size @xmath172 .",
    "the minimal tree complexity of @xmath13 is upper - bounded by @xmath186    by induction on @xmath172 .",
    "let @xmath187 and suppose that @xmath188 is the sole edge in some tree - inducing cut @xmath173 in @xmath108",
    ". since the removal of @xmath189 partitions @xmath108 into disconnected cycle - free components , @xmath108 must be cycle - free and @xmath190 by construction .",
    "now suppose that @xmath191 and let @xmath188 be an edge in some tree - inducing cut @xmath173 in @xmath108 . by the first @xmath112-ary graphical model property of section [ model_prop_subsec ] , @xmath189 is incident on some internal local constraint @xmath98 satisfying @xmath119 .",
    "denote by @xmath192 the @xmath193-ary graphical model that results when @xmath98 is removed from @xmath108 , and by @xmath194 the corresponding code over @xmath6 .",
    "the tree - inducing cut size of @xmath192 is at most @xmath195 since the removal of @xmath98 from @xmath108 results in the removal a single vertex and at least two edges . by the induction hypothesis ,",
    "the minimal tree complexity of @xmath194 is upper - bounded by @xmath196    from the discussion of section [ model_prop_subsec ] , it is clear that @xmath98 can be redefined as @xmath197 single parity check equations , @xmath198 for @xmath199 $ ] , over @xmath5 on @xmath6 such that @xmath200 it follows from lemma [ tree_comp_growth_lemma ] that @xmath201 completing the proof .    an immediate corollary to theorem [ ti_csb_theorem ]",
    "results when proposition [ num_cycle_lemma ] is applied in conjunction with the main result :    [ ti_csb_cycle_cor ] let @xmath13 be a linear code over @xmath5 with minimal tree complexity @xmath128 .",
    "the number of cycles @xmath202 in any @xmath112-ary graphical model for @xmath13 is lower - bounded by @xmath203      provided @xmath128 is known or can be lower - bounded , the tree - inducing cut - set bound ( ti - csb ) ( and more specifically corollary [ ti_csb_cycle_cor ] ) can be used to answer the questions posed in section [ ticsb_motivation_subsec ] .",
    "the ti - csb is further discussed below .      on the surface , the ti - csb and the csb are similar in statement ; however , there are three important differences between the two .",
    "first , the csb does not explicitly address the complexity of the local constraints on either side of a given cut .",
    "forney provided a number of illustrative examples in @xcite that stress the importance of characterizing graphical model complexity in terms of both hidden variable size and local constraint complexity .",
    "second , the csb does not explicitly address the cyclic topology of the graphical model that results when the edges in a cut are removed .",
    "the removal of a tree - inducing cut results in two cycle - free disconnected components and the size of a tree - inducing cut can thus be used to make statements about the complexity of optimal siso decoding using variable conditioning in a cyclic graphical model ( cf .",
    "finally , and most fundamentally , the ti - csb addresses the aforementioned intractability of applying the csb to graphical models with rich cyclic topologies .",
    "theorem [ ti_csb_theorem ] can be used to make a statement similar to theorem [ square_root_bound ] which is valid for all graphical models containing a single cycle .",
    "[ ti_csb_root_cor ] let @xmath13 be a linear code over @xmath5 with minimal tree complexity @xmath128 and let @xmath204 be the smallest integer such that there exists a @xmath205-ary graphical model for @xmath13 which contains at most one cycle .",
    "then @xmath206    more generally , theorem [ ti_csb_theorem ] can be used to establish the following generalization of the square - root bound to graphical models with arbitrary cyclic topologies .",
    "[ ti_csb_r_root_cor ] let @xmath13 be a linear code over @xmath5 with minimal tree complexity @xmath128 and let @xmath207 be the smallest integer such that there exists a @xmath208-ary graphical model for @xmath13 which contains at most @xmath209 cycles .",
    "then @xmath210    a linear interpretation of the logarithmic complexity statement of corollary [ ti_csb_r_root_cor ] yields the desired generalization of the square - root bound : an @xmath0-root complexity reduction with respect to the minimal tree complexity requires the introduction of at least @xmath1 cycles .",
    "there are few known examples of classical linear block codes which meet the square - root bound with equality .",
    "shany and beery proved that many rm codes can not meet this bound under _ any _ bit ordering @xcite .",
    "there does , however , exist a tail - biting trellis for the extended binary golay code @xmath211 which meets the square - root bound with equality so that @xcite @xmath212 given that this tail - biting trellis is a @xmath213-ary single cycle graphical model for @xmath211 , the minimal tree complexity of the the extended binary golay code can be upper - bounded by corollary [ ti_csb_root_cor ] as @xmath214 note that the minimal bit - level conventional trellis for @xmath211 contains ( non - central ) state variables with alphabet size @xmath215 and is thus a @xmath216-ary graphical model @xcite .",
    "the proof of lemma [ tree_comp_growth_lemma ] provides a recipe for the construction of a @xmath217-ary cycle - free graphical model for @xmath211 from its tail - biting trellis .",
    "it remains open as to where the minimal tree complexity of @xmath211 is precisely @xmath218 , however .",
    "denote by @xmath202 the minimum number of cycles in any @xmath112-ary graphical model for a linear code @xmath13 over @xmath5 with minimal tree complexity @xmath128 . for large values of @xmath219 ,",
    "the lower bound on @xmath202 established by corollary [ ti_csb_cycle_cor ] becomes @xmath220 the ratio of the minimal complexity of a cycle - free model for @xmath13 to that of an @xmath112-ary graphical model is thus upper - bounded by @xmath221    in order to further explore the asymptotics of the tree - inducing cut - set bound , consider a code of particular practical interest : the binary image @xmath222 of the @xmath223 $ ] reed - solomon code @xmath224 . since @xmath224 is maximum distance separable , a reasonable estimate for the minimal tree complexity of this code is obtained from wolf s bound @xcite @xmath225 figure [ rs255_asymp_plot ] plots @xmath202 as a function of @xmath117 for @xmath222 assuming ( [ tc_256_assume ] ) .",
    "note that since the complexity of the decoding algorithms implied by @xmath139-ary graphical models grow roughly as @xmath139 , @xmath226 is roughly a @xmath227 decoding complexity measure .",
    "-ary graphical models of the binary image of the @xmath223 $ ] reed - solomon code.,width=288 ]      much as there are many valid complexity measures for conventional trellises , there are many reasonable metrics for the measurement of cyclic graphical model complexity . while there exists a unique minimal trellis for any linear block code which simultaneously minimizes all reasonable measures of complexity @xcite , even for the class cyclic graphical models with the most basic cyclic topology - tail - biting trellises - minimal models",
    "are not unique @xcite .",
    "the complexity measure introduced by this work was motivated by the desire to have a metric which simultaneously captures hidden variable complexity and local constraint complexity thus disallowing local constraints from  hiding \" complexity .",
    "there are many conceivable measures of local constraint complexity : one could upper - bound the state complexity of the local constraints or even their minimal tree complexity ( thus defining minimal tree complexity recursively ) .",
    "the local constraint complexity measure used in this work is essentially wolf s bound @xcite and is thus a potentially conservative _ upper bound _ on any reasonable measure of local constraint decoding complexity .",
    "let @xmath121 be a graphical model for the linear code @xmath13 over @xmath5 .",
    "this work introduces eight _ basic graphical model operations _ the application of which to @xmath121 results in a new graphical model for @xmath13 :    * the merging of two local constraints @xmath228 and @xmath229 into the new local constraint @xmath98 which satisfies @xmath230 * the splitting of a local constraint @xmath111 into two new local constraints @xmath231 and @xmath232 which satisfy @xmath233 * the insertion / removal of a degree-@xmath234 repetition constraint . * the insertion / removal of a trival length @xmath235 , dimension @xmath235 local constraint . *",
    "the insertion / removal of an isolated partial parity - check constraint .",
    "note that some of these operations have been introduced implicitly in this work and others already .",
    "for example , the proof of the local constraint involvement property of @xmath112-ary graphical models presented in section [ model_prop_subsec ] utilizes degree-@xmath234 repetition constraint insertion .",
    "local constraint merging has been considered by a number of authors under the rubric of clustering ( e.g. @xcite ) .",
    "this work introduces the term merging specifically so that it can be contrasted with its inverse operation : splitting .",
    "detailed definitions of each of the eight basic graphical model operations are given in the appendix . in this section",
    ", it is shown that these basic operations span the entire space of graphical models for @xmath13 .",
    "[ basic_move_thm ] let @xmath121 and @xmath236 be two graphical models for the linear code @xmath13 over @xmath5 .",
    "then @xmath121 can be transformed into @xmath236 via the application of a _ finite _ number of basic graphical model operations .",
    "define the following four sub - transformations which can be used to transform @xmath237 into a tanner graph @xmath238 :    1 .",
    "the transformation of @xmath237 into a @xmath4-ary model @xmath239 .",
    "2 .   the transformation of @xmath239 into a ( possibly ) redundant generalized tanner graph @xmath240 .",
    "3 .   the transformation of @xmath240 into a non - redundant generalized tanner graph @xmath241 .",
    "4 .   the transformation of @xmath241 into a tanner graph @xmath238 .    since each basic graphical model operation has an inverse , @xmath238 can be transformed into @xmath237 by inverting each of the four sub - transformations . in order to prove that @xmath237 can be transformed into @xmath236 via the application of a finite number of basic graphical model operations",
    ", it suffices to show that each of the four sub - transformations requires a finite number of operations and that the transformation of the tanner graph @xmath238 into a tanner graph @xmath242 corresponding to @xmath236 requires a finite number of operations . this proof summary is illustrated in figure [ model_tx_mech_fig ] .     into @xmath236 via five sub - transformations.,width=148 ]    that each of the five sub - transformations from @xmath237 to @xmath243 illustrated in figure [ model_tx_mech_fig ] requires only a finite number of basic graphical model operations is proved below .",
    "the graphical model @xmath237 is transformed into the @xmath4-ary model @xmath239 as follows .",
    "each local constraint @xmath98 in @xmath237 is split into the @xmath245 @xmath4-ary single parity - check constraints which define it . a degree-@xmath234 repetition constraint",
    "is then inserted into every hidden variable with alphabet index set size @xmath246 and these repetition constraints are then each split into @xmath117 @xmath247-ary repetition constraints as illustrated in figure [ model_tx_qary_fig ] .",
    "each local constraint @xmath111 in the resulting graphical model satisfies @xmath248 .",
    "similarly , each hidden variable @xmath107 in the resulting graphical model satisfies @xmath249 .",
    "-ary hidden variable @xmath107 into @xmath4-ary hidden variables.,width=312 ]      a ( possibly redundant ) generalized tanner graph is simply a bipartite @xmath4-ary graphical model with one vertex class corresponding to repetition constraints and one to single parity - check constraints in which visible variables are incident only on repetition constraints . by appropriately inserting degree-@xmath234 repetition constraints ,",
    "the @xmath4-ary model @xmath239 can be transformed into @xmath240 .",
    "let the generalized tanner graph @xmath240 correspond to an @xmath252 redundant parity - check matrix @xmath253 for a degree-@xmath61 generalized extension of @xmath13 with rank @xmath254 a finite number of row operations can be applied to @xmath253 resulting in a new parity - check matrix the last @xmath255 rows of which are all zero .",
    "similarly , a finite number of basic operations can be applied to @xmath240 resulting in a generalized tanner graph containing @xmath255 trivial constraints which can then be removed to yield @xmath241 .",
    "specifically , consider the row operation on @xmath253 which replaces a row @xmath256 by @xmath257 where @xmath258 .",
    "the graphical model transformation corresponding to this row operation first merges the @xmath4-ary single parity - check constraints @xmath98 and @xmath111 ( which correspond to rows @xmath256 and @xmath259 , respectively ) and then splits the resulting check into the constraints @xmath260 and @xmath111 ( which correspond to rows @xmath261 and @xmath259 , respectively ) .",
    "note that this procedure is valid since @xmath262      let the degree-@xmath61 generalized tanner graph @xmath264 correspond to an @xmath265 parity - check matrix @xmath266 .",
    "a degree-@xmath267 generalized tanner graph @xmath268 is obtained from @xmath241 as follows .",
    "denote by @xmath269 the parity - check matrix for the degree-@xmath61 generalized extension defined by @xmath266 which is systematic in the position corresponding to the @xmath61-th partial parity symbol .",
    "since a finite number of row operations can be applied to @xmath266 to yield @xmath269 , a finite number of local constraint merge and split operations can be be applied to @xmath241 to yield the corresponding generalized tanner graph @xmath270 . removing the now isolated partial - parity check constraint corresponding to the @xmath61-th partial parity symbol in @xmath270 yields the desired degree-@xmath267 generalized tanner graph @xmath268 . by repeatedly applying this procedure ,",
    "all partial parity symbols can be removed from @xmath241 resulting in @xmath238 .",
    "let the tanner graphs @xmath238 and @xmath242 correspond to the parity - check matrices @xmath25 and @xmath272 , respectively .",
    "since @xmath25 can be transformed into @xmath272 via a finite number of row operations , @xmath238 can be similarly transformed into @xmath242 via the application of a finite number of local constraint merge and split operations .",
    "the set of basic model operations introduced in the previous section enables the space of all graphical models for a given code @xmath13 to be searched , thus allowing for model extraction to be expressed as an optimization problem .",
    "the challenges of defining extraction as optimization are twofold .",
    "first , a cost measure on the space of graphical models must be found which is simultaneously meaningful in some real sense ( e.g. highly correlated with decoding performance ) and computationally tractable .",
    "second , given that discrete optimization problems are in general very hard , heuristics for extraction must be found . in this section , heuristics are investigated for the extraction of graphical models for binary linear block codes from an initial tanner graph .",
    "the cost measures considered are functions of the short cycle structure of graphical models .",
    "the use of such cost measures is motivated first by empirical evidence concerning the detrimental effect of short cycles on decoding performance ( cf .",
    "@xcite ) and second by the existence of an efficient algorithm for counting short cycles in bipartite graphs @xcite .",
    "simulation results for the models extracted via these heuristics for a number of extended bch codes are presented and discussed in section [ sim_results_subsec ] .",
    "the tanner graphs corresponding to many linear block codes of practical interest _ necessarily _ contain many short cycles @xcite .",
    "suppose that any tanner graph for a given code @xmath13 must have girth at least @xmath273 ; an interesting problem is the extraction of a tanner graph for @xmath13 containing the smallest number of @xmath273-cycles .",
    "the extraction of such tanner graphs is especially useful in the context of ad - hoc decoding algorithms which utilize tanner graphs such as jiang and narayanan s stochastic shifting based iterative decoding algorithm for cyclic codes @xcite and the random redundant iterative decoding algorithm presented in @xcite .",
    "algorithm [ tanner_graph_alg ] performs a greedy search for a tanner graph for @xmath13 with girth @xmath273 and the smallest number of @xmath273-cycles starting with an initial tanner graph @xmath274 which corresponds to some binary parity - check matrix @xmath25 .",
    "define an @xmath275-row operation as the replacement of row @xmath259 in @xmath25 by the binary sum of rows @xmath256 and @xmath259 . as detailed in the proof of theorem [ basic_move_thm ] , if @xmath98 and @xmath111 are the single parity - check constraints in @xmath274 corresponding to @xmath256 and @xmath259 , respectively , then an @xmath275-row operation in @xmath25 is equivalent to merging @xmath98 and @xmath111 to form a new constraint @xmath276 and then splitting @xmath277 into @xmath98 and @xmath278 ( where @xmath278 enforces the binary sum of rows @xmath256 and @xmath259 ) .",
    "algorithm [ tanner_graph_alg ] iteratively finds the rows @xmath256 and @xmath259 in @xmath25 with corresponding @xmath275-row operation that results in the largest short cycle reduction in @xmath274 at every step .",
    "this greedy search continues until there are no more row operations that improve the short cycle structure of @xmath274 .",
    "@xmath279 ; @xmath280 ; @xmath281 ; @xmath282 girth of @xmath283 @xmath284 number of @xmath285-cycles in @xmath286 @xmath287 number of @xmath288-cycles in @xmath286      a number of authors have studied the extraction of generalized tanner graphs ( gtgs ) of codes for which @xmath289 with a particular focus on models which are @xmath290-cycle - free and which correspond to generalized code extensions of minimal degree @xcite .",
    "minimal degree extensions are sought because no information is available to the decoder about the partial parity symbols in a generalized tanner graph and the introduction of too many such symbols has been observed empirically to adversely affect decoding performance @xcite .",
    "generalized tanner graph extraction algorithms proceed via the insertion of partial parity symbols , an operation which is most readily described as a parity - check matrix manipulation . following the notation introduced in section [ tg_gtg_subsec ] , suppose that a partial parity on the coordinates indexed by @xmath291 is to be introduced to a gtg for @xmath13 corresponding to a degree-@xmath61 generalized extension @xmath48 with parity - check matrix @xmath292 .",
    "a row @xmath293 is first appended to @xmath292 with a @xmath294 in the positions corresponding to coordinates indexed by @xmath10 and a @xmath235 in the other positions .",
    "a column is then appended to @xmath292 with a @xmath294 only in the position corresponding to @xmath293 .",
    "the resulting parity - check matrix @xmath295 describes a degree-@xmath296 generalized extension @xmath297 .",
    "every row @xmath298 in @xmath295 which contains a @xmath294 in all of the positions corresponding to coordinates indexed by @xmath10 is then replaced by the binary sum of @xmath256 and @xmath293 .",
    "suppose that there are @xmath299 such rows .",
    "it is readily verified that the tree - inducing cut size @xmath300 of the gtg that results from this insertion is related to that of the initial gtg , @xmath301 , by @xmath302    algorithm [ gtg_alg ] performs a greedy search for a @xmath290-cycle - free generalized tanner graph for @xmath13 with the smallest number of inserted partial parity symbols starting with an initial tanner graph @xmath274 which corresponds to some binary parity - check matrix @xmath25 .",
    "algorithm [ gtg_alg ] iteratively finds the symbol subsets that result in the largest tree - inducing cut size reduction and then introduces the partial parity symbol corresponding to one of those subsets . at each step ,",
    "algorithm [ gtg_alg ] uses algorithm [ gtg_subalg ] to generate a candidate list of partial parity symbols to insert and chooses from that list the symbol which reduces the most short cycles when inserted .",
    "this greedy procedure continues until the generalized tanner graph contains no @xmath290-cycles .",
    "algorithm [ gtg_alg ] is closely related to the gtg extraction heuristics proposed by sankaranarayanan and vasi in @xcite and kumar and milenkovic in @xcite ( henceforth referred to as the sv and km heuristics , respectively ) .",
    "it is readily shown that algorithm [ gtg_alg ] is guaranteed to terminate using the proof technique of @xcite .",
    "the sv heuristic considers only the insertion of partial parity symbols corresponding to coordinate index sets of size 2 ( i.e. @xmath303 ) .",
    "the km heuristic considers only the insertion of partial parity symbols corresponding to coordinate index sets satisfying @xmath304 .",
    "algorithm [ gtg_subalg ] , however , considers all coordinate index sets satisfying @xmath305 and @xmath306 and then uses ( [ gtg_xt_red_eq ] ) to evaluate which of these coordinate sets results in the largest tree - inducing cut size reduction .",
    "algorithm [ gtg_alg ] is thus able to extract gtgs corresponding to generalized extensions of smaller degree than the sv and km heuristics . in order to illustrate this observation , the degrees of the generalized code extensions that result when the sv , km and proposed ( hc )",
    "heuristics are applied to parity - check matrices for three codes are provided in table [ gtg_table ] .",
    "figure [ bch_31_21_fig ] compares the performance of the three extracted gtg decoding algorithms for the @xmath307 $ ] bch code in order to illustrate the efficacy of extracting gtgs corresponding to extensions of smallest possible degree .",
    ".generalized code extension degrees corresponding to the @xmath290-cycle - free gtgs obtained via the sv , km , and hc heuristics . [ cols=\"^,^,^,^\",options=\"header \" , ]",
    "this work studied the space of graphical models for a given code in order to lay out some of the foundations of the theory of extractive graphical modeling problems .",
    "the primary contributions of this work were the introduction of a new bound characterizing the tradeoff between cyclic topology and complexity in graphical models for linear codes and the introduction of a set of basic graphical model transformation operations which were shown to span the space of all graphical models for a given code .",
    "it was demonstrated that these operations can be used to extract novel cyclic graphical models - and thus novel suboptimal iterative soft - in soft - out ( siso ) decoding algorithms - for linear block codes .",
    "there are a number of interesting directions for future work motivated by the statement of the tree - inducing cut - set bound ( ti - csb ) .",
    "while the minimal trellis complexity @xmath143 of linear codes is well - understood , less is known about minimal tree complexity @xmath128 and characterizing those codes for which @xmath308 is an open problem .",
    "a particularly interesting open problem is the use of the cut - set bound to establish an upper bound on the difference between @xmath143 and @xmath128 ; such a bound would allow for a re - expression of the ti - csb in terms of the more familiar minimal trellis complexity .",
    "a study of those codes which meet or approach the ti - csb is also an interesting direction for future work which may provide insight into construction techniques for good codes with short block lengths ( e.g. @xmath309s to @xmath310s of bits ) defined on graphs with a few cycles ( e.g. @xmath311 , @xmath312 or @xmath309 ) .",
    "the development of statements similar to the ti - csb for alternative measures of graphical model complexity and for graphical models of more general systems ( e.g. group codes , nonlinear codes ) is also interesting .",
    "there are also a number of interesting directions for future work motivated by the study of graphical model transformation .",
    "while the extracted graphical models presented in section [ sim_results_subsec ] are notable , ad - hoc techniques utilizing massively redundant models and judicious message filtering outperform the models presented in this work @xcite .",
    "such massively redundant models contain many more short cycles than the models presented in section [ sim_results_subsec ] indicating that short cycle structure alone is not a sufficiently meaningful cost measure for graphical model extraction .",
    "it is known that redundancy can be used to remove pseudocodewords ( cf .",
    "@xcite ) thus motivating the study of cost measures which consider both short cycle structure and pseudocodeword spectrum . finally , it would be interesting to study extraction heuristics beyond simple greedy searches , as well as those which use all of the basic graphical model operations ( rather than just constraint merging ) .",
    "[ basic_move_appendix ] this appendix provides detailed definitions of both the @xmath112-ary graphical model properties described in section [ model_prop_subsec ] and the basic graphical model operations introduced in section [ model_tx_sec ] .",
    "the proof of lemma [ tree_comp_growth_lemma ] is also further illustrated by example . in order to elucidate these properties and definitions , a single - cycle graphical model for the extended hamming code",
    "is studied throughout .",
    "the hidden variables @xmath314 and @xmath315 are binary while @xmath316 , @xmath317 , @xmath318 , @xmath319 , @xmath320 , and @xmath321 are @xmath290-ary .",
    "all of the local constraint codes in this model are interface constraints . equations ( [ tbt_gen_start])-([tbt_gen_end ] ) define the local constraint codes via generator matrices ( where @xmath322 generates @xmath98 ) : @xmath323 , & g_2= \\left[\\begin{array}{ccc } 10&1&10\\\\ 01&1&01 \\end{array}\\right]\\:\\end{aligned}\\ ] ] @xmath324 , & g_4= \\left[\\begin{array}{ccc } 10&1&0\\\\ 01&1&1 \\end{array}\\right]\\;\\;\\;\\end{aligned}\\ ] ] @xmath325 , & g_6= \\left[\\begin{array}{ccc } 10&1&10\\\\ 01&1&01 \\end{array}\\right]\\:\\end{aligned}\\ ] ] @xmath326 , & g_8= \\left[\\begin{array}{ccc } 10&1&0\\\\ 01&1&1 \\end{array}\\right].\\;\\;\\end{aligned}\\ ] ] the graphical model for @xmath313 illustrated in figure [ rm13_tbt_fig ] is @xmath290-ary ( i.e. @xmath327 , @xmath328 ) : the maximum hidden variable alphabet index set size is @xmath234 and all local constraints satisfy @xmath329 .",
    "the behavior , @xmath330 , of this graphical model is generated by @xmath331.\\end{aligned}\\ ] ] the projection of @xmath330 onto the visible variable index set @xmath6 , @xmath332 , is thus generated by @xmath333 which coincides precisely with a generator matrix for @xmath313 .",
    "the three properties of @xmath112-ary graphical models introduced in section [ model_prop_subsec ] are discussed in detail in the following where it is assumed that a @xmath112-ary graphical model @xmath121 with behavior @xmath104 for a linear code @xmath13 over @xmath5 defined on an index set @xmath6 is given .",
    "suppose there exists some hidden variable @xmath107 ( involved in the local constraints @xmath231 and @xmath232 ) that does not satisfy the local constraint involvement property .",
    "a new hidden variable @xmath94 that is a copy of @xmath107 is introduced to @xmath121 by first redefining @xmath232 over @xmath94 and then inserting a local repetition constraint @xmath98 that enforces @xmath334 .",
    "the insertion of @xmath94 and @xmath98 does not fundamentally alter the complexity of @xmath121 since @xmath335 and since degree-@xmath234 repetition constraints are trivial from a decoding complexity viewpoint .",
    "furthermore , the insertion of @xmath94 and @xmath98 does not fundamentally alter the cyclic topology of @xmath121 since no new cycles can be introduced by this procedure .    as an example , consider the binary hidden variable @xmath314 in figure [ rm13_tbt_fig ] which is incident on the interface constraints @xmath35 and @xmath336 . by introducing the new binary hidden variable @xmath337 and binary repetition constraint @xmath338 ,",
    "as illustrated in figure [ rm13_internal_fig ] , @xmath314 can be made to be incident on the internal constraint @xmath338 .",
    "the insertion of @xmath337 and @xmath338 redefines @xmath336 over @xmath337 resulting in the generator matrices @xmath339 , & g_9= \\left[\\begin{array}{cc } 1&1 \\end{array}\\right].\\end{aligned}\\ ] ] clearly , the modified local constraints @xmath336 and @xmath338 satisfy the condition for inclusion in a @xmath290-ary graphical model .",
    "the removal of the internal constraint @xmath122 from @xmath121 in order to define the new code @xmath124 proceeds as follows .",
    "each hidden variable @xmath94 , @xmath340 , is first disconnected from @xmath122 and connected to a new degree-@xmath294 internal constraint @xmath341 which does not impose any constraint on the value of @xmath94 ( since it is degree-@xmath294 ) .",
    "the local constraint @xmath122 is then removed from the resulting graphical model yielding @xmath342 with behavior @xmath343 .",
    "the new code @xmath124 is the projection of @xmath343 onto @xmath6 .    as an example , consider the removal of the internal local constraint @xmath338 from the graphical model for @xmath313 described above ; the resulting graphical model update is illustrated in figure [ rm13_removal_fig ] .",
    "the new codes @xmath344 and @xmath345 are length 1 , dimension 1 codes which thus impose no constraints on @xmath346 and @xmath337 , respectively .",
    "it is readily verified that the code @xmath347 which results from the removal of @xmath338 from @xmath313 has dimension @xmath348 and is generated by @xmath349 note that @xmath347 corresponds to all paths in the tail - biting trellis representation of @xmath313 , not just those paths which begin and end in the same state .    the removal of an internal local constraint @xmath122 results in the introduction of @xmath350 new degree-@xmath294 local constraints .",
    "forney described such constraints as `` useless '' in @xcite and they can indeed be removed from @xmath342 since they impose no constraints on the variables they involve .",
    "specifically , for each hidden variable @xmath94 , @xmath340 , involved in the ( removed ) local constraint @xmath122 , denote by @xmath111 the other constraint involving @xmath94 in @xmath237 .",
    "the constraint @xmath111 can be redefined as its projection onto @xmath351 .",
    "it is readily verified that the resulting constraint @xmath352 satisfies the condition for inclusion in a @xmath112-ary graphical model .",
    "continuing with the above example , @xmath344 , @xmath345 , @xmath314 , and @xmath337 can be removed from the graphical model illustrated in figure [ rm13_removal_fig ] by redefining @xmath35 and @xmath336 with generator matrices @xmath353 , & g_8= \\left[\\begin{array}{cc } 10&1\\\\ 01&1 \\end{array}\\right].\\:\\end{aligned}\\ ] ]      let @xmath98 satisfy @xmath119 and consider a hidden variable @xmath107 involved in @xmath98 ( i.e. @xmath354 ) with alphabet index set @xmath355 .",
    "each of the @xmath356 coordinates of @xmath107 can be redefined as a @xmath4-ary sum of some subset of the visible variable set as follows .",
    "consider the behavior @xmath357 and corresponding code @xmath194 which result when @xmath98 is removed from @xmath121 ( before @xmath107 is discarded ) .",
    "the projection of @xmath357 onto @xmath358 , @xmath359 , has length @xmath360 and dimension @xmath361 over @xmath5 .",
    "there exists a generator matrix for @xmath359 that is systematic in some size @xmath362 subset of the index set @xmath6 @xcite . a parity - check matrix @xmath363 that is systematic in the @xmath356 positions corresponding to the coordinates of @xmath107",
    "can thus be found for this projection ; each coordinate of @xmath107 is defined as a @xmath4-ary sum of some subset of the visible variables by @xmath363 . following this procedure ,",
    "the internal local constraint @xmath98 is redefined over @xmath6 by substituting the definitions of @xmath107 implied by @xmath363 for each @xmath354 into each of the @xmath120 @xmath4-ary single parity - check equations which determine @xmath98 .",
    "returning to the example of the tail - biting trellis for @xmath313 , the internal local constraint @xmath338 is redefined over the visible variable set as follows .",
    "the projection of @xmath364 onto @xmath365 is generated by @xmath366 a valid parity - check matrix for this projection which is systematic in the position corresponding to @xmath314 is @xmath367 which defines the binary hidden variable @xmath314 as @xmath368 where addition is over @xmath369 .",
    "a similar development defines the binary hidden variable @xmath337 as @xmath370 the local constraint @xmath338 thus can be redefined to enforce the single parity - check equation @xmath371    finally , in order to illustrate the use of the @xmath112-ary graphical model properties in concert , denote by @xmath372 the single parity - check constraint enforcing ( [ c9_visible_def ] ) .",
    "it is readily verified that only the first four rows of @xmath373 ( as defined in ( [ g_hminus9_def ] ) ) satisfy @xmath372 .",
    "it is precisely these four rows which generate @xmath313 proving that @xmath374      in the following , the proof of lemma [ tree_comp_growth_lemma ] is illustrated by updating a cycle - free model for @xmath375 ( as generated by ( [ g_hminus9_def ] ) ) with the single parity - check constraint defined by ( [ c9_visible_def ] ) in order to obtain a cycle - free graphical model for @xmath313 . a cycle - free binary graphical model for @xmath347",
    "is illustrated in figure [ rm13_binary_fig ] are in no way related to those labels used previously , the labeling of hidden variables and local constraints begin at @xmath376 and @xmath377 , respectively . ] .",
    "all hidden variables in figure [ rm13_binary_fig ] are binary and the local constraints labeled @xmath382 , @xmath383 , @xmath384 , and @xmath385 are binary single parity - check constraints while the remaining local constraints are repetition codes . by construction , it has thus been shown that @xmath386    in light of ( [ c9_visible_def ] ) and ( [ ch_ch9_eqn ] ) , a @xmath290-ary graphical model for @xmath313 can be constructed by updating the graphical model illustrated in figure [ rm13_binary_fig ] to enforce a single parity - check constraint on @xmath378 , @xmath379 , @xmath380 , and @xmath381 .",
    "a natural choice for the root of the minimal spanning tree containing the interface constraints incident on these variables is @xmath387 .",
    "the updating of the local constraints and hidden variables contained in this spanning tree proceeds as follows .",
    "first note that since @xmath377 , @xmath388 , @xmath389 , and @xmath390 simply enforce equality , neither these constraints , nor the hidden variables incident on these constraints , need updating .",
    "the hidden variables @xmath391 , @xmath392 , @xmath393 , and @xmath394 are updated to be @xmath290-ary so that they send downstream to @xmath387 the values of @xmath378 , @xmath379 , @xmath381 , and @xmath380 , respectively .",
    "these hidden variable updates are accomplished by redefining the local constraints @xmath382 , @xmath383 , @xmath384 , and @xmath385 ; the respective generator matrices for the redefined codes are @xmath395 , & g_{17}= \\left[\\begin{array}{ccc } 1&0&11\\\\ 0&1&10 \\end{array}\\right]\\:\\end{aligned}\\ ] ] @xmath396 , & g_{23}= \\left[\\begin{array}{ccc } 1&0&10\\\\ 0&1&11 \\end{array}\\right]\\:\\end{aligned}\\ ] ] finally , @xmath387 is updated to enforce both the original repetition constraint on the respective first coordinates of @xmath391 , @xmath392 , @xmath393 , and @xmath394 and the additional single parity - check constraint on @xmath378 , @xmath379 , @xmath380 , and @xmath381 ( which correspond to the respective second coordinates of @xmath391 , @xmath392 , @xmath393 , and @xmath394 ) .",
    "the generator matrix for the redefined @xmath387 is @xmath397.\\end{aligned}\\ ] ]    the updated constraints all satisfy the condition for inclusion in a @xmath290-ary graphical model .",
    "specifically , @xmath387 can be decomposed into the cartesian product of a length @xmath290 binary repetition code and a length @xmath290 binary single parity - check code .",
    "the updated graphical model is @xmath290-ary and it has thus been shown by construction that @xmath398      the eight basic graphical model operations introduced in section [ model_tx_sec ] are discussed in detail in the following where it is assumed that a @xmath112-ary graphical model @xmath121 with behavior @xmath104 for a linear code @xmath13 over @xmath5 defined on an index set @xmath6 is given .      [ lc_merge_subsec ] suppose that two local constraints @xmath228 and @xmath229 are to be merged .",
    "without loss of generality , assume that there is no hidden variable incident on both @xmath228 and @xmath229 ( since if there is , a degree-@xmath234 repetition constraint can be inserted ) . the hidden variables incident on @xmath228",
    "may be partitioned into two sets @xmath399 where each @xmath107 , @xmath400 , is also incident on a constraint @xmath111 which is adjacent to @xmath229 .",
    "the hidden variables incident on @xmath229 may be similarly partitioned .",
    "the set of local constraints incident on hidden variables in both @xmath401 and @xmath402 are denoted _ common constraints _ and indexed by @xmath403 .",
    "figure [ merging_variable_defs_fig ] illustrates this notation .",
    "the merging of local constraints @xmath228 and @xmath229 proceeds as follows . for each common local constraint @xmath111 , @xmath405 , denote by @xmath406 ( @xmath407 ) the hidden variable incident on @xmath111 and @xmath228 ( @xmath229 ) .",
    "denote by @xmath408 the projection of @xmath111 onto the two variable index set @xmath409 and define a new @xmath410-ary hidden variable @xmath411 which encapsulates the possible simultaneous values of @xmath406 and @xmath407 ( as constrained by @xmath408 ) . after defining such hidden variables for each @xmath111 , @xmath405 , a set of new hidden variables results which is indexed by @xmath412 .",
    "the local constraints @xmath228 and @xmath229 are then merged by replacing @xmath228 and @xmath229 by a code defined over @xmath413 which is equivalent to @xmath414 and redefining each local constraint @xmath111 , @xmath415 , over the appropriate hidden variables in @xmath412 .    as an example , consider again the @xmath290-ary cycle - free graphical model for @xmath313 derived in the previous section , a portion of which is re - illustrated on the bottom left of figure [ constraint_merging_fig ] , and suppose that the local constraints @xmath382 and @xmath383 are to be merged . the local constraints @xmath382 , @xmath383 , and @xmath387 are defined by ( [ 4ary_redef_1 ] ) and ( [ 4ary_redef_2 ] ) .",
    "the hidden variables incident on @xmath382 are partitioned into the sets @xmath416 and @xmath417 .",
    "similarly , @xmath418 and @xmath419 . the sole common constraint is thus @xmath387 .",
    "the projection of @xmath387 onto @xmath391 and @xmath392 has dimension @xmath311 and the new @xmath218-ary hidden variable @xmath420 is defined by the generator matrix @xmath421.\\end{aligned}\\ ] ] the local constraints @xmath382 and @xmath383 when defined over @xmath420 rather than @xmath391 and @xmath392 , respectively , are generated by @xmath422 , & g_{17}^\\prime= \\left[\\begin{array}{ccc } 1&0&101\\\\ 1&0&111\\\\ 0&1&100 \\end{array}\\right].\\:\\end{aligned}\\ ] ] finally , @xmath387 is redefined over @xmath420 and generated by @xmath423\\end{aligned}\\ ] ] while @xmath382 and @xmath383 are replaced by @xmath424 which is equivalent to @xmath425 and is generated by @xmath426.\\end{aligned}\\ ] ] note that the graphical model which results from the merging of @xmath382 and @xmath383 is @xmath218-ary .",
    "specifically , @xmath427 is an @xmath218-ary hidden variable while @xmath428 and @xmath429 .",
    "local constraint splitting is simply the inverse operation of local constraint merging .",
    "consider a local constraint @xmath111 defined on the visible and hidden variables indexed by @xmath430 and @xmath431 , respectively .",
    "suppose that @xmath111 is to be split into two local constraints @xmath231 and @xmath232 defined on the index sets @xmath432 and @xmath433 , respectively , such that @xmath434 and @xmath435 partition @xmath430 while @xmath436 but @xmath437 and @xmath438 need not be disjoint .",
    "denote by @xmath439 the intersection of @xmath437 and @xmath438 .",
    "local constraint splitting proceeds as follows .",
    "for each @xmath94 , @xmath440 , make a copy @xmath441 of @xmath94 and redefine the local constraint incident on @xmath94 ( which is not @xmath111 ) over both @xmath94 and @xmath441 . denote by @xmath442 an index set for the copied hidden variables .",
    "the local constraint @xmath111 is then replaced by @xmath231 and @xmath232 such that @xmath231 is defined over @xmath432 and @xmath232 is defined over @xmath443 following this split procedure , some of the hidden variables in @xmath439 and @xmath442 may have larger alphabets than necessary . specifically , if the dimension of the projection of @xmath231 ( @xmath232 ) onto a variable @xmath94 , @xmath440 ( @xmath444 ) , is smaller than the alphabet index set size of @xmath94 , then @xmath94 can be redefined with an alphabet index set size equal to that dimension .",
    "the merged code in the example of the previous section @xmath424 can be split into two codes : @xmath382 defined on @xmath376 , @xmath445 , and @xmath427 , and @xmath383 defined on @xmath446 , @xmath447 , and @xmath448 .",
    "the projection of @xmath427 onto @xmath382 has dimension @xmath234 and @xmath427 can thus be replaced by the @xmath290-ary hidden variable @xmath391 .",
    "similarly , the projection of @xmath448 onto @xmath383 has dimension @xmath234 and @xmath448 can be replaced by the @xmath290-ary hidden variable @xmath392 .",
    "suppose that @xmath94 is a hidden variable involved in the local constraints @xmath228 and @xmath229 .",
    "a degree-@xmath234 repetition constraint is inserted by defining a new hidden variable @xmath107 as a copy of @xmath94 , redefining @xmath229 over @xmath107 and defining the repetition constraint @xmath111 which enforces @xmath449 .",
    "degree-@xmath234 repetition constraint insertion can be similarly defined for visible variables .",
    "conversely , suppose that @xmath111 is a degree-@xmath234 repetition constraint incident on the hidden variables @xmath94 and @xmath107 .",
    "since @xmath111 simply enforces @xmath449 , it can be removed and @xmath107 relabeled @xmath94 .",
    "degree-@xmath234 repetition constraint removal can be similarly defined for visible variables .",
    "the insertion and removal of degree-@xmath234 repetition constraints is illustrated in figures [ repetition_insertion_hidden_fig ] and [ repetition_insertion_visible_fig ] for hidden and visible variables , respectively .",
    "trivial constraints are those incident on no hidden or visible variables so that their respective block lengths and dimensions are zero .",
    "trivial constraints can obviously be inserted or removed from graphical models .",
    "suppose that @xmath450 are @xmath451 @xmath4-ary repetition constraints ( that is each repetition constraint enforces equality on @xmath4-ary variables ) and let @xmath452 be non - zero .",
    "the insertion of an isolated partial parity - check constraint is defined as follows .",
    "define @xmath453 new @xmath4-ary hidden variables @xmath454 and @xmath455 , and two new local constraints @xmath456 and @xmath457 such that @xmath456 enforces the @xmath4-ary single parity - check equation @xmath458 and @xmath457 is a degree-@xmath294 constraint incident only on @xmath455 with dimension @xmath294 .",
    "the new local constraint @xmath456 defines the partial parity variable @xmath455 and is denoted _ isolated _ since it is incident on a hidden variable which is involved in a degree-@xmath294 , dimension @xmath294 local constraint ( i.e. @xmath457 does not constrain the value of @xmath455 ) .",
    "since @xmath456 is isolated , the graphical model that results from its insertion is indeed a valid model for @xmath13 .",
    "similarly , any such isolated partial parity - check constraint can be removed from a graphical model resulting in a valid model for @xmath13 .    as an example , figure [ isolated_insert_remove_fig ] illustrates the insertion and removal of an isolated partial - parity check on the binary sum of @xmath459 and @xmath381 in a tanner graph for @xmath313 corresponding to ( [ ch_gen_mx ] ) ( note that @xmath313 is self - dual so that the generator matrix defined in ( [ ch_gen_mx ] ) is also a valid parity - check matrix for @xmath313 ) .        c.  berrou , a.  glavieux , and p.  thitmajshima , `` near shannon limit error - correcting coding and decoding : turbo - codes , '' in _ proc .  international conf .",
    "communications _ , geneva , switzerland , may 1993 , pp . 10641070 .",
    "y.  mao and a.  h. banihashemi , `` a heuristic search for good low - density parity - check codes at short block lengths , '' in _ proc .  international conf .",
    "communications _ , vol .  1 , helsinki , finland , june 2001 , pp . 4144 .        t.  tian , c.  r. jones , j.  d. villasenor , and r.  d. wesel , `` selective avoidance of cycles in irregular ldpc code construction , '' _ ieee trans .",
    "information theory _ ,",
    "52 , no .  8 , pp . 12421247 , august 2004 .      s.  y. chung , g.  d. forney , jr . , t.  j. richardson , and r.  urbanke , `` on the design of low - density parity - check codes within 0.0045 db of the shannon limit , '' _ ieee communications letters _ , vol .  5 , no .  2 ,",
    "pp . 5860 , february 2001 .",
    "t.  richardson , m.  shokrollahi , and r.  urbanke , `` design of capacity - approaching irregular low - density parity - check codes , '' _ ieee trans .",
    "information theory _ ,",
    "47 , no .  2 ,",
    "pp . 619673 , february 2001 .",
    "h.  d. pfister , i.  sason , and r.  urbanke , `` capacity - achieving ensembles for the binary erasure channel with bounded complexity , '' _ ieee trans .",
    "information theory _",
    "51 , no .  7 , pp .",
    "23522379 , july 2005 .",
    "k.  m. chugg , p.  thiennviboon , g.  d. dimou , p.  gray , and j.  melzer , `` a new class of turbo - like codes with universally good performance and high - speed decoding , '' in _ proc .",
    "ieee military comm .",
    "_ , atlantic city , nj , october 2005 .",
    "j.  s. yedidia , j.  chen , and m.  c. fossorier , `` generating code representations suitable for belief propagation decoding , '' in _ proc .",
    "allerton conf .",
    "commun . , control , comp .",
    "_ , monticello , il , october 2002 .",
    "t.  kasami , t.  takata , t.  fujiwara , and s.  lin , `` on the optimum bit orders with respect to the state complexity of trellis diagrams for binary linear codes , '' _ ieee trans .",
    "information theory _ ,",
    "39 , no .  1 ,",
    "pp . 242245 , january 1993 .",
    "t.  r. halford and k.  m. chugg , `` conditionally cycle - free generalized tanner graphs : theory and application to high - rate serially concatenated codes , '' communication sciences institute , usc , los angeles , ca , tech .",
    "csi-06 - 09 - 01 , september 2006 .",
    "s.  sankaranarayanan and b.  vasi , `` iterative decoding of linear block codes : a parity - check orthogonalization approach , '' _ ieee trans .",
    "information theory _ ,",
    "51 , no .  9 , pp .",
    "33473353 , september 2005 ."
  ],
  "abstract_text": [
    "<S> two broad classes of graphical modeling problems for codes can be identified in the literature : constructive and extractive problems . </S>",
    "<S> the former class of problems concern the _ construction _ of a graphical model in order to define a new code . </S>",
    "<S> the latter class of problems concern the _ extraction _ of a graphical model for a ( fixed ) given code . </S>",
    "<S> the design of a new low - density parity - check code for some given criteria ( e.g. target block length and code rate ) is an example of a constructive problem . </S>",
    "<S> the determination of a graphical model for a classical linear block code which implies a decoding algorithm with desired performance and complexity characteristics is an example of an extractive problem . </S>",
    "<S> this work focuses on extractive graphical model problems and aims to lay out some of the foundations of the theory of such problems for linear codes .    </S>",
    "<S> the primary focus of this work is a study of the space of all graphical models for a ( fixed ) given code . </S>",
    "<S> the tradeoff between cyclic topology and complexity in this space is characterized via the introduction of a new bound : the tree - inducing cut - set bound . </S>",
    "<S> the proposed bound provides a more precise characterization of this tradeoff than that which can be obtained using existing tools ( e.g. the cut - set bound ) and can be viewed as a generalization of the square - root bound for tail - biting trellises to graphical models with arbitrary cyclic topologies . searching the space of graphical models for a given code </S>",
    "<S> is then enabled by introducing a set of basic graphical model transformation operations which are shown to span this space . </S>",
    "<S> finally , heuristics for extracting novel graphical models for linear block codes using these transformations are investigated . </S>"
  ]
}