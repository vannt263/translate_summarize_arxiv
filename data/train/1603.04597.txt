{
  "article_text": [
    "the first work on the group technology in manufacturing was written by flanders ( @xcite ) . in russia",
    "the group technology was introduced by mitrofanov ( @xcite ) .",
    "the main problem in the group technology ( gt ) is to find an optimal partitioning of machines and parts into manufacturing cells , in order to maximize intra - cell processing and minimize inter - cell movement of parts .",
    "maximization of the so - called grouping efficacy is accepted in literature as a good objective combining these two goals ( kumar & chandrasekharan , @xcite ) .",
    "this problem is called the cell formation problem ( cfp ) ( goldengorin et al . , @xcite ) .",
    "cfp with grouping efficacy objective function is a fractional 0 - 1 programming problem .",
    "burbidge developed product flow analysis ( pfa ) approach to this problem and described the gt and the cfp in his book ( burbidge , @xcite ) .",
    "ballakur & steudel ( @xcite ) have shown that the cfp is an np - hard problem for different objective functions .",
    "that is why there have been developed a lot of heuristic approaches ( goncalves & resende , @xcite ; james et al .",
    ", @xcite ; bychkov et al . , @xcite , paydar & saidi - mehrabad , @xcite ) and almost no exact ones for the cfp with a variable number of cells and grouping efficacy objective function .",
    "kusiak et al .",
    "( @xcite ) consider one of the most simple variants of the cfp called the machine partitioning problem in which it is necessary to partition only machines into the specified number of cells minimizing the total hamming distance between machines inside the cells .",
    "the authors present an exact a * algorithm for this variant of the cfp .",
    "they also develop a branch and bound algorithm for the cfp with a variable number of cells , a limit on the number of machines inside each cell , and maximization of the size of so - called mutually separable cells as an objective function .",
    "spiliopoulos & sofianopoulou ( @xcite ) and arket et al .",
    "( @xcite ) also present branch and bound algorithms for the machine partitioning problem .",
    "one of the recent exact approaches for the cfp with the grouping efficacy objective function is suggested by elbenani & ferland ( @xcite ) .",
    "these authors suggest to reduce the fractional programming cfp problem to a number of ilp problems by means of dinkelbach approach and to solve each ilp problem with cplex solver .",
    "unfortunately they consider the cfp with a fixed number of cells which is much easier .",
    "they solve 27 of the 35 popular benchmark instances , but only for a fixed number of cells .",
    "the same simplified formulation of the cfp is considered by brusco ( @xcite ) .",
    "the author develops a branch and bound algorithm and solves 31 of the 35 instances , but again only for some fixed numbers of cells . for example",
    "problem 26 is solved only for 7 cells and it requires more than 15 days of computational time .    to the best of our knowledge the only existing exact approach to the cfp with a variable number of cells and grouping efficacy objective function is by bychkov et al .",
    "( @xcite ) who suggested a new approach to reduce the cfp problem to a small number of ilp problems and for the first time solved to optimality 14 of the 35 popular benchmark instances from literature using cplex software .",
    "zilinskas et al .",
    "( @xcite ) considered the cfp with a variable number of cells as a bi - objective optimization problem and developed an exact algorithm which finds pareto frontier .",
    "in this paper we suggest an efficient branch and bound algorithm for the cfp with a variable number of cells and grouping efficacy objective function .",
    "we are able to find optimal solutions for 21 of the 35 benchmark instances .",
    "note also that the cfp is a biclustering problem in which we simultaneously cluster machines and parts into cells .",
    "so the suggested approach can be also applied to biclustering problems arising in data mining ( busygin et al . , @xcite ) .",
    "the objective of the cfp is to find an optimal partitioning of machines and parts into groups ( production cells , or shops ) in order to minimize the inter - cell movement of parts from one cell to another and to maximize intra - cell processing operations .",
    "the input data for this problem is matrix @xmath0 which contains zeroes and ones .",
    "the size of this matrix is @xmath1 which means that it has @xmath2 machines and @xmath3 parts .",
    "the element @xmath4 of the input matrix is equal to one if part @xmath5 should be processed on machine @xmath6 .",
    "the objective is to minimize the number of zeroes inside cells and the number of ones outside cells .",
    "there have been suggested several objective functions which combine these two goals .",
    "the objective function which provides a good combination of these goals and is widely accepted in literature is the grouping efficacy suggested by kumar & chandrasekharan ( @xcite ) : @xmath7 where @xmath8 is the number of ones in the input matrix , @xmath9 is the number of ones inside cells , @xmath10 is the number of zeroes inside cells .",
    "the mathematical programming model for the cfp is the following ( see also bychkov et al .",
    "( @xcite ) ) .",
    "+ decision variables : @xmath11 @xmath12 objective function : @xmath13 constraints : @xmath14 @xmath15 @xmath16 @xmath17 @xmath18 @xmath19 here @xmath20 is the maximum possible number of cells .",
    "constrains and require that every machine and every part is assigned to exactly one cell",
    ". constrains and require that there are no cells having only machines without parts or only parts without machines .",
    "because of the biclustering structure of the cfp our branching goes by two parameters .",
    "the suggested algorithm has branching on machines and parts sequentially changing each other : machines - parts - machines- ... we use vectors @xmath21 and @xmath22 for this purpose . element",
    "@xmath23 contains the cell to which machine @xmath6 is assigned and element @xmath24 contains the cell to which part @xmath5 is assigned .",
    "for example m = [ 1231 ] and",
    "p = [ 11321 ] mean that cell 1 contains machines 1 , 4 and parts 1 , 2 , 5 , cell 2 contains machine 2 and part 4 , and cell 3 contains machine 3 and part 3 .",
    "branching on machines makes changes in vector @xmath25 .",
    "it starts from assigning the first machine to cell 1 .",
    "let @xmath26 be the number of cells in the current partial solution . when the algorithm branches on machines , it takes the first machine which is not assigned to any cell and tries to assign it to the existing cells with numbers from @xmath27 to @xmath26 or creates a new cell @xmath28 for this machine",
    ".    branching on parts makes changes in vector @xmath29 .",
    "it starts with all zeroes inside @xmath29 which means that no parts are assigned to any cell . when the algorithm branches on parts it takes the first part which is not assigned to any cell and tries to assign it to the existing cells from @xmath27 to @xmath26 or to a new cell @xmath30",
    "( star means that the number of the cell can be @xmath31 or greater ) if there are some unassigned machines which can be also added later to this new cell .",
    "we assume that the number of parts is greater than the number of machines .    the algorithm branches on parts and machines successively .",
    "it starts with @xmath32 $ ] and @xmath33 $ ] .",
    "next it changes vector @xmath29 , then - vector @xmath25 and so on . this way the algorithm builds the search tree .",
    "the leaves of the search tree contain complete solutions and other nodes contain partial solutions .",
    "the complete search tree depends only on the number of machines and parts .",
    "it contains all feasible solutions as its leaves .    to provide an efficient branching , before choosing a branch",
    "we calculate an upper bound for each branch and choose the branch with the greatest value of the upper bound .",
    "this branching strategy allows us to find good solutions earlier .      to obtain",
    "an upper bound for a given partial solution we relax the original cfp problem and suggest a polynomial algorithm to calculate an optimal solution or an upper bound for the relaxed problem .",
    "the relaxed problem is formulated as follows .",
    "we are given a partial solution in which some of the machines and parts are already assigned to some cells .",
    "for example in table [ partial ] machines 1 , 2 with parts 1 , 2 , 3 , 4 are assigned to cell 1 , and machine 3 with part 5 is assigned to cell 2 .",
    "the objective is to assign the remaining machines independently on each other to the existing cells or to a new cell , and assign the remaining parts to the existing cells taking into account only the rows already assigned in the given partial solution . in the relaxed problem",
    "we allow an independent assignment of machines and parts to cells . in this case",
    "the best assignment for machine 4 will be to put it to cell 1 with parts 1 , 2 , 3 , 4 , 7 . this will bring 4 ones and 1 zero inside cells . the best assignment for machine 5 will be to put it to a new cell 3 with parts 7 , 8 .",
    "this will bring 2 ones and 0 zeroes inside cells . the best assignment for parts 6 and 7 which takes into account only rows 1 , 2 , 3 will be to put it to cell 2 ( with machine 3 ) . the best assignment for part 8 which takes into account only rows 1 , 2 , 3 will be to put it to cell 1 ( with machines 1 , 2 ) .",
    "this optimal solution for the relaxed problem is shown in table [ relaxed ] .",
    "this solution is infeasible for the original cfp problem because independent assignment of machines and parts is allowed and as a result we obtain non - rectangular cells which can also intersect by columns . since it is an optimal solution to the relaxed problem it provides an upper bound to the original problem . in our example for the partial solution we have @xmath34 and the solution of the relaxed problem gives us an upper bound to the complete solution of the cfp equal to @xmath35 .",
    "c|cccccccc| & & & & & & & & + 1 & 1 & 1 & 1 & & 1 & 0 & 0 & 1 + 2 & 1 & 1 & 0 & & 0 & 0 & 0 & 1 + 3 & 0 & 0 & 1 & 0 & & 1 & 1 & 0 + 4 & 1 & 0 & 1 & 1 & 1 & 0 & 1 & 0 + 5 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 1 +     c|cccccccc| & & & & & & & & + 1 & 1 & 1 & 1 & & 1 & 0 & 0 & 1 + 2 & 1 & 1 & 0 & & 0 & 0 & 0 & 1 + 3 & 0 & 0 & 1 & 0 & & 1 & 1 & 0 + 4 & 1 & 0 & 1 & 1 & 1 & 0 & 1 & 0 + 5 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 1 +    in our example from table [ partial ] it is not obvious whether the chosen alternative @xmath36 ( putting 4 ones and 1 zero inside cells ) is better than alternative @xmath37 for machine 3 .",
    "to choose between two alternatives we use function ( see algorithm [ alg ] ) .",
    "it returns the index ( 1 or 2 ) of the best alternative among two ones , @xmath38 if it can not choose between these alternatives , or 0 if these two alternatives are equivalent .",
    "we do not provide the proof of its correctness in this short paper .",
    "@xmath39    1 2 0    @xmath40    1    2    -1    below we present a polynomial algorithm of calculating the suggested upper bound as an optimal solution of the relaxed cfp problem , if we can always choose the best alternative for every machine and part , or as an upper bound to this solution otherwise .",
    "we illustrate the algorithm on the instance shown in table [ ex ] .",
    "c|ccccccccc| & & & & & & & & & + 1 & 1 & 1 & 1 & 1 & & 0 & 0 & 0 & 0 + 2 & 1 & 1 & 1 & 1 & & 0 & 0 & 0 & 1 + 3 & 0 & 0 & 0 & 0 & 0 & & & 0 & 0 + 4 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 1 & 1 + 5 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 1 +     c|ccccccccc| & & & & & & & & & + 1 & 1 & 1 & 1 & 1 & & 0 & 0 & 0 & 0 + 2 & 1 & 1 & 1 & 1 & & 0 & 0 & 0 & 1 + 3 & 0 & 0 & 0 & 0 & 0 & & & 0 & 0 + 4 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 1 & 1 + 5 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 1 +    1 .",
    "calculate the number of ones @xmath9 and zeroes @xmath10 inside the cells of the given partial solution and the number of ones @xmath41 and zeroes @xmath42 which can not get inside cells in any solution ( see gray area ( the gray area with black zeroes on black - and - white printing ) in table [ ex ] ) .",
    "the total number of ones @xmath8 and zeroes @xmath43 are constant . from these values",
    "we get the numerator @xmath44 and the denominator @xmath45 for the efficacy @xmath46 of the current partial solution . for the example in table [ ex ] we have : @xmath47 .",
    "2 .   for every unassigned machine ( row )",
    "using algorithm [ alg ] we compare all possible alternatives of adding it to one of the existing cells or to a new cell . +",
    "for our example we have 3 alternatives for machine @xmath48 : 1 ) @xmath49 - add it to cell 1 with parts 1 , 2 , 3 , 4 , 5 , 8 , 9 putting 4 ones and 3 zeroes inside this cell ; 2 ) @xmath50 - add it to cell 2 with parts 6 , 7 , 8 , 9 putting 2 ones and 2 zeroes inside ; 3 ) @xmath51 - add it to a new cell 3 with parts 8 , 9 putting 2 ones and 0 zeroes inside .",
    "obviously alternative 3 is better than alternative 2 .",
    "so we need to compare only two alternatives @xmath52 and @xmath53 .",
    "we have : @xmath54 . and",
    "the values we need to apply algorithm [ alg ] are : @xmath55 so neither of the conditions in algorithm [ alg ] is satisfied and we can not determine which alternative is better ( algorithm [ alg ] returns @xmath38 ) .",
    "in this case we build an alternative @xmath56 , which is better than both incomparable alternatives , and use it to obtain an upper bound on the solution of the relaxed cfp problem . in our example it is alternative @xmath57 .",
    "+ now for machine @xmath58 we have : @xmath59",
    ". there are 3 alternatives @xmath60 , @xmath61 , and @xmath62 .",
    "it is clear that alternative @xmath60 is worse than @xmath61 . for @xmath63 and @xmath64",
    "we have : @xmath65 so @xmath66 and algorithm [ alg ] returns alternative @xmath64 .",
    "thus @xmath61 is the best alternative for machine 5 .",
    "3 .   for every unassigned part ( column ) in the same way using algorithm [ alg ] we compare all possible alternatives of adding it to one of the existing cells or leaving it unassigned .",
    "however in this case we take into account only ones and zeroes which lie in the rows already assigned in the given partial solution ( blue area ( the darkest area with white digits on black - and - white printing ) in table [ ex ] ) . + in our example part 8 has only zeroes in this area and so it is better not to add it to any cell .",
    "for part 9 ( @xmath67 ) we have 3 alternatives : 1 ) @xmath68 - add it to cell 1 putting 1 one and 1 zero inside ; 2 ) @xmath69 - add it to cell 2 putting 0 ones and 1 zero inside ; 3 ) @xmath70 - do not add it to any cell .",
    "it is clear that @xmath69 is a bad alternative and we need to compare only @xmath71 and @xmath72 .",
    "we have @xmath73 .",
    "the values needed to apply algorithm [ alg ] are : @xmath74 so @xmath66 and algorithm [ alg ] returns alternative @xmath72 as the best alternative for part 9 .",
    "we calculate the upper bound by putting inside all the ones and zeroes corresponding to the best alternatives chosen for all unassigned machines and parts . for our example the corresponding solution which gives an upper bound to the relaxed cfp problem ( and thus to the original cfp problem also ) is shown in table [ sol ] . for this example",
    "we have @xmath75 .",
    "l p5.1 cm p1.0 cm r1.1 cm r1.2 cm r1.4 cm r1.4 cm # & & size & best - known solution & & time , s & bychkov et al .",
    "( @xcite ) , time , s 1 & king & nakornchai ( @xcite ) & @xmath76 & 0.8235 & 0.8235 & 0.00 & 0.63 2 & waghodekar & sahu ( @xcite ) & @xmath76 & 0.6957 & 0.6957 & 0.00 & 2.29 3 & seifoddini ( @xcite ) & @xmath77 & 0.7959 & 0.7959 & 0.00 & 5.69 4 & kusiak ( @xcite ) & @xmath78 & 0.7692 & 0.7692 & 0.00 & 1.86 5 & kusiak & chow ( @xcite ) & @xmath79 & 0.6087 & 0.6087 & 0.00 & 9.14 6 & boctor ( @xcite ) & @xmath79 & 0.7083 & 0.7083 & 0.00 & 5.15 7 & seifoddini & wolfe ( @xcite ) & @xmath80 & 0.6944 & 0.6944 & 0.00 & 13.37 8 & chandrasekharan & rajagopalan ( @xcite ) & @xmath81 & 0.8525 & 0.8525 & 0.00 & 18.33 9 & chandrasekharan & rajagopalan ( @xcite ) & @xmath82 & 0.5872 & 0.5872 & 0.19 & 208.36 10 & mosier & taube ( @xcite ) & @xmath83 & 0.7500 & 0.7500 & 0.00 & 6.25 11 & chan & milner ( @xcite ) & @xmath83 & 0.9200 & 0.9200 & 0.00 & 2.93 12 & askin & subramanian ( @xcite ) & @xmath84 & 0.7206 & 0.7206 & 2.89 & 259.19 13 & stanfel ( @xcite ) & @xmath84 & 0.7183 & 0.7183 & 5.51 & 259.19 14 & mccormick et al .",
    "( @xcite ) & @xmath85 & 0.5326 & 0.5326 & 97117.43 & @xmath8620829.38 15 & srinivasan et al .",
    "( @xcite ) & @xmath87 & @xmath880.6899 & 0.6899 & 837.93 & @xmath8613719.99 16 & king ( @xcite ) & @xmath89 & 0.5753 & 0.5753 & 7045.64 & @xmath8624930.93 17 & carrie ( @xcite ) & @xmath90 & 0.5773 & 0.5773 & 5668.25 & @xmath8613250.01 18 & mosier & taube ( @xcite ) & @xmath91 & 0.4345 & @xmath920.4211 & 100000.00 & @xmath8643531.77 19 & kumar et al .",
    "( @xcite ) & @xmath93 & 0.5081 & @xmath920.4697 & 100000.00 & @xmath8633020.13 20 & carrie ( @xcite ) & @xmath94 & 0.7791 & 0.7791 & 88.62 & @xmath8611626.98 21 & boe & cheng ( @xcite ) & @xmath94 & 0.5798 & @xmath920.5615 & 100000.00 & @xmath8633322.08 22 & chandrasekharan & rajagopalan ( @xcite ) & @xmath95 & 1.0000 & 1.0000 & 0.00 & 0.00 23 & chandrasekharan & rajagopalan ( @xcite ) & @xmath95 & 0.8511 & 0.8511 & 33.70 & @xmath866916.24 24 & chandrasekharan & rajagopalan ( @xcite ) & @xmath95 & 0.7351 & 0.7351 & 86007.93 & @xmath8614408.88 25 & chandrasekharan & rajagopalan ( @xcite ) & @xmath95 & 0.5329 & @xmath920.5185 & 100000.00 & @xmath8634524.4726 & chandrasekharan & rajagopalan ( @xcite ) & @xmath95 & 0.4895 & @xmath920.4648 & 100000.00 & @xmath8641140.9427 & chandrasekharan & rajagopalan ( @xcite ) & @xmath95 & 0.4726 & @xmath920.4468 & 100000.00 & @xmath8644126.7628 & mccormick et al .",
    "( @xcite ) & @xmath96 & 0.5482 & @xmath920.5017 & 100000.00 & @xmath8622627.2829 & carrie ( @xcite ) & @xmath97 & 0.4706 & @xmath920.4569 & 100000.00 & @xmath8671671.0830 & kumar & vannelli ( @xcite ) & @xmath98 & 0.6331 & @xmath920.5942 & 100000.00 & @xmath8622594.2031 & stanfel ( @xcite ) & @xmath99 & 0.6012 & @xmath920.5789 & 100000.00 & @xmath8631080.8232 & stanfel ( @xcite ) & @xmath99 & 0.5083 & @xmath920.4860 & 100000.00 & @xmath8648977.0133 & king & nakornchai ( @xcite ) & @xmath100 & 0.4775 & @xmath920.4684 & 100000.00 & @xmath8699435.6434 & mccormick et al .",
    "( @xcite ) & @xmath101 & 0.6064 & @xmath920.5680 & 100000.00 & @xmath8647744.0435 & chandrasekharan & rajagopalan ( @xcite ) & @xmath102 & 0.8403 & @xmath920.8403 & 100000.00 & @xmath8624167.76     + @xmath92 the problem is not solved to optimality by our algorithm within the time limit of 100000 seconds .",
    "+ @xmath86 the problem is not solved to optimality by bychkov et al .",
    "( @xcite ) . in this approach",
    "the problem is divided into a number of ip subproblems and a time limit of 300 seconds is set for every subproblem .",
    "+ @xmath88 a greater value is reported in some papers on heuristics probably due to an incorrect input matrix .",
    "[ res ]    the suggested branch and bound algorithm has been able to solve 21 of 35 popular benchmark instances from the literature exactly and to find good solutions for the remaining 14 instances .",
    "the results are presented in table [ res ] .",
    "all computations were run on intel core i7 with 16 gb ram .",
    "note that the algorithm was run without any initial solution while in the results reported by bychkov et al .",
    "( @xcite ) the best - known solutions were used as initial .",
    "the results show that the developed algorithm is more efficient than the approach suggested by bychkov et al .",
    "( @xcite ) .",
    "this research is supported by laboratory of algorithms and technologies for network analysis , nru hse .",
    "bychkov , i. , batsyn , m. , sukhov , p. , pardalod , p.m.(2013 ) heuristic algorithm for the cell formation problem . in : goldengorin b. i. , kalyagin v. a. ,",
    "pardalos p. m.(eds . ) models , algorithms , and technologies for network analysis .",
    "springer proceedings in mathematics & statistics 59 , 4369 .",
    "kumar , k. r. , chandrasekharan , m. p. ( 1990 ) .",
    "grouping efficacy : a quantitative criterion for goodness of block diagonal forms of binary matrices in group technology .",
    "international journal of production research , 28(2 ) , 233243 .",
    "paydar , m. m. , saidi - mehrabad , m. ( 2013 ) . a hybrid genetic - variable neighborhood search algorithm for the cell formation problem based on grouping efficacy .",
    "computers & operations research , 40(4 ) , 980990 .",
    "seifoddini , h. ( 1989 ) .",
    "a note on the similarity coefficient method and the problem of improper machine assignment in group technology applications . international journal of production research , 27(7 ) , 11611165 ."
  ],
  "abstract_text": [
    "<S> we consider a fractional 0 - 1 programming problem arising in manufacturing . </S>",
    "<S> the problem consists in clustering of machines together with parts processed on these machines into manufacturing cells so that intra - cell processing of parts is maximized and inter - cell movement is minimized . this problem is called cell formation problem ( cfp ) and it is an np - hard optimization problem with boolean variables and constraints and with a fractional objective function . because of its high computational complexity </S>",
    "<S> there are a lot of heuristics developed for it . in this paper </S>",
    "<S> we suggest a branch and bound algorithm which provides exact solutions for the cfp with a variable number of cells and grouping efficacy objective function . </S>",
    "<S> this algorithm finds optimal solutions for 21 of the 35 popular benchmark instances from literature and for the remaining 14 instances it finds good solutions close to the best known .    </S>",
    "<S> cell formation ; biclustering ; branch and bound ; upper bound ; exact solution </S>"
  ]
}