{
  "article_text": [
    "steganography consists in hiding a secret message in public document acting as a covert , in a way that sent through a non - secure communication channel , only the sender and the receiver are able to understand it , and anyone else can not distinguish the existence of an hidden message .",
    "it is one of the information hiding techniques as showed on figure 1 ,        where linguistic steganography is defined by chapman _",
    "et al _ @xcite as , _ `` the art of using written natural language to conceal secret messages '' _ , and technical steganography is defined as a structure rather than a text , that can be represented by any physical means such as invisible inks , microdots @xcite .",
    "most of the work in steganography has been done on images , video clips , music , sounds and texts .",
    "but , text steganography is the most complex , due to the lack of redundant information in text files , whereas lot of redundancy is present in image or sound files , leading to a high exploitation of those files in steganography @xcite .",
    "+ there are several approaches encountered in the literature regarding the text steganography such as , line shift , word shift , syntactic methods , etc .",
    "subsequently we focused on the steganography based on pdf files .",
    "pdf , created by adobe systems @xcite for document exchange , is a fixed - layout format for representing documents in a manner independent of the application software , hardware , and operation system .",
    "pdf files are frequently used nowadays and this fact makes it possible to use them as cover documents in information hiding .",
    "studies using these files as cover media , are very few .",
    "+ our proposal is based on the work of _ i - shi et al . _",
    "@xcite , in which secret data are embedded at between - word or between - character locations in a pdf file , by using the non - breaking space with american standard code for information interchange ( ascii ) code _ a0_. _",
    "i - shi et al . _",
    "@xcite found in their study that , the non - breaking space ( _ a0 _ ) is a character when embedded in a string of text characters , becomes invisible in the windows of several versions of common pdf readers , and use that phenomenon for data hiding .",
    "they showed two types of invisibility , based on the ascii code _",
    "a0_. + the first one is created by specifying the width of _",
    "_ appearing in the pdf reader s window to be the same as that of the original white - space represented by the ascii code _ 20_. the width of an ascii code , is the width of the character represented by the code as displayed in a pdf reader s window .",
    "subsequently , _ a0 _ and _ 20 _ become white - spaces . their approach based on this first type of invisibility called _ alternative space coding _ , uses _",
    "_ 20 _ in a pdf text alternatively as a between - word space to encode a message bit b according to the following binary coding technique :    = = = if b = 1 ; then replace _ 20 _ between two words by _ a0 _ ; + if b = 0 ; make no change .",
    "this approach has the advantage of incurring no increase of the pdf file size because it just replaces the space exhibited by the code _ 20 _ by another exhibited by the code _",
    "however , if the between - word locations in a pdf page are few , then only a small number of bits may be embedded .",
    "+ the second one is created by setting the width of the ascii code _",
    "a0 _ to be _ zero _ in a pdf page .",
    "they found in their study an _",
    "a0 _ does nt appear in a pdf reader s window just like if it was nonexistent .",
    "their approach called _ null space coding _ , given a _ message character c _ , embeds it at a location _",
    "l _ as follows :    if the index of _ c _ as specified in _ table 1 _ is _ m _ , + then embed _ m _ consecutive _",
    "s _ at location",
    "_ l_. +    in this approach they presented , _ table 1 _ @xcite contains ascii codes selected for message representations in their study , each one indexed with an integer value .",
    "+ the advantage of this approach is that the number of between - character locations are higher than the between - word locations .",
    "this makes the efficiency of the _ null space coding _ much higher .",
    "but an obvious disadvantage is that the resulting pdf file size will be higher than the original one ( the one without _",
    "a0 s _ embedded in it ) . +",
    "our work is based on this last type of invisibility described by _",
    "i - shi et al . _ , such that our problematic is to reduce the weight difference between the cover pdf file and the stego pdf file resulting from the embedding process , while increasing the embedding capacity of the cover pdf file . in order to reduce considerably the risks of detecting a cover communication based on the file size .",
    "given a secret message @xmath1 to be conceal in a cover text message , the null space coding developed by _",
    "i - shi et al . _ , proceeds as follows :    * firstly , @xmath1 is compressed using the huffman coding , where at the end a file , containing a table where each line has a letter of @xmath1 followed by a value , is generated ; * secondly , for each character of @xmath1 a number of @xmath0 s is inserted in the cover text equivalent to the value generated by the huffman coding for that character , thus producing a stegotext .",
    "* thirdly , the file and the stegotext are transmitted through a non - secure communication channel .",
    "we note that two files ( the file containing huffman codes for the characters of the secret message and the pdf file resulting from the embedding method ) are transmitted .",
    "their method can not guarantee that the number of embedded @xmath0 s is less than the number of characters of @xmath1 or at least if @xmath1 grows higher , the number of inserted @xmath0 s wo nt explode .",
    "+ our aim is to propose different approaches , based on the chinese remainder theorem , which their goal is to attain the above conditions and transmit one and only one file ( more precisely only the stegotext ) , through a non - secure communication channel .",
    "let @xmath2 be a pairwise relatively prime family of positive integers , and let @xmath3 be arbitrary integers .",
    "then there exists a solution @xmath4 to the system of congruence    @xmath5    moreover , any @xmath6 is a solution to this system of congruence if and only if @xmath7 , where @xmath8    @xmath9 + given @xmath10 and @xmath11 , @xmath12 ) , we present the classic method of construction of @xmath13 from @xmath10 and @xmath11 as follows : + we first construct integers @xmath14 , @xmath15 , such that for @xmath16 , we have : @xmath17 then setting    @xmath18    allows to see that for @xmath19 we have    @xmath20    as all the terms in this sum are zero modulo @xmath21 , except for the term @xmath22 , which is congruent to @xmath23 . to construct @xmath14 , @xmath15 , satisfying ( 1 ) ,",
    "let us define @xmath24 , which is the product of all the moduli @xmath21 with @xmath25 .",
    "then , @xmath26 and @xmath14 are defined as follows : @xmath27 and @xmath28 .",
    "+ garner s algorithm is an efficient method for determining @xmath13 , @xmath29 , given @xmath30 = @xmath31 , the residues of @xmath13 modulo the pairwise co - prime moduli @xmath32 @xcite . +",
    "* garner s algorithm for crt * @xcite + * input : * a positive integer @xmath33 , with @xmath34 for all @xmath35 , and a modular representation @xmath36 of @xmath13 for the @xmath37 . +",
    "* output : * the integer @xmath13 in radix @xmath38 representation .",
    "* time complexity * : @xmath39 + this theorem is highly useful in a many contexts as , randomized primality test , modular arithmetic , secret sharing , etc .",
    "the pdf file @xmath40 , that would be used as cover , needs to be cleansed of all @xmath0 s contained in it .",
    "meaning , going from the beginning of the file to its end , if we cross a @xmath0 with size different from @xmath41 , we replace it by a space character ( ascii code 20 ) , and if we cross a @xmath0 of size @xmath41 , we remove it , as presented by the following function . + * input : * f : cover pdf file + * output : * f : cover pdf file with no sequence of more than one _ a0 _ where , @xmath42 is a function that retrieves the width of the non - breaking space character , if exists , set in a cover pdf file @xmath43 .",
    "+ * time complexity * : @xmath44 + the reason why we apply this procedure on a cover pdf file , is to ensure that the file has not been modified by a steganographic technique based on ascii code @xmath0 ; and also , as @xmath0 by default has the width of the space character , it can be replaced by it , all this to avoid ambiguity between @xmath0 inserted by our techniques and those found initially in the cover file .",
    "for the sender and the receiver to be able to communicate through a non - secure channel , they have to agree on a secret key that would be use to encrypt a secret message , that would be send one to another .",
    "regarding our approaches , the key @xmath45 , represents the number of bits ( block length ) in which a secret message @xmath46 would be split into before its encoding . and it s previously selected by the sender and the receiver and shared through a secure channel .",
    "subsequently @xmath47 denotes the length of the string @xmath1 .",
    "we denote @xmath1 the secret message , an integer @xmath48 a secret key and @xmath43 a cover pdf file . without loss of generality ,",
    "we assume that the length of @xmath1 is a multiple of @xmath48 .",
    "the first approach proceeds as follows : + * input : * s : secret message ; k : secret key ; f : cover pdf file . + * output : * f : cover pdf file with embedded _ a0",
    "_ s + * step 1 * : two co - primes @xmath49 , are computed from @xmath48 such that ,    @xmath50 ; @xmath51 .",
    "* step 2 * : @xmath1 is split in @xmath52 blocks of length @xmath48 stored the matrix @xmath53 such that :    @xmath54 = s[(i - 1)k + j],\\ 1 \\leq",
    "i \\leq n , 1 \\leq j \\leq k$ ] .",
    "* step 3 * : each line of @xmath53 corresponding to a binary sequence , is transformed in its decimal value @xmath55 $ ] such that ,    @xmath55 = \\sum_{j = 1}^k sp[i , k - j+1 ] \\times 2^{(j-1)},\\ 1 \\leq i \\leq n$ ] .",
    "* step 4 * : for each decimal value @xmath55 $ ] @xmath56 , two remainders @xmath57 $ ] and @xmath58 $ ] , are computed such that    @xmath57 = dec[i]\\ mod\\ p_1 $ ] and @xmath59 = dec[i]\\ mod\\ p_2,\\ 1 \\leq i \\leq n$ ]    * step 5 * : each @xmath60 , ( 1 \\leq j \\leq 2",
    "\\ and\\ 1 \\leq",
    "i \\leq n)$ ] , obtained from the previous step is transformed in its binary value stored in a matrix @xmath61 bit by bit , such that :    @xmath62 \\cdots   binr[((i-1)\\times 2 + j),\\lceil{\\frac{k}{2}}\\rceil ] = bindecomp(r[j , i ] , \\lceil{\\frac{k}{2}}\\rceil)$ ] , + @xmath63    where , @xmath64 , \\lceil{\\frac{k}{2}}\\rceil)$ ] is a function that returns the binary decomposition of a remainder @xmath60 $ ] on @xmath65 bits of length . +",
    "* step 6 * : add a column at @xmath61 , the number of columns would then move from @xmath65 to @xmath66 ; and for each line add a control bit at the end as shown by the following :    * step 7 * : each line of @xmath61 is embedded in a cover pdf file @xmath43 , as described by the following :    the control bit is there to help , during the recovery procedure , to know when to stop looking for embedded blocks in the cover file . + * time complexity * : @xmath67      to recover secret message from a stego pdf file encoded with the above procedure , the binary sequences encoded with @xmath0 s in the file must be recover at first , then remainders that produced those sequences , and with the @xmath48 , computer the values related to those remainders , as described by the following procedure : + * input : * f : stego - pdf file , k : secret key + * output : * s : secret message + * step 1*:two co - primes @xmath49 , are computed from @xmath48 such that ,    @xmath50 ; @xmath51 .",
    "* step 2 * : retrieve the different lines of @xmath61 as follows :    * step 3 * : remove from @xmath61 the @xmath68 column , corresponding to the control bit s column . + * step 4 * : compute each @xmath69 , ( 1 \\leq j \\leq 2 \\ and\\ 1 \\leq i \\leq n)$ ] from each line of @xmath61 such that :    @xmath69 = \\sum_{l = 1}^{\\lceil{\\frac{k}{2}}\\rceil } binr[i , \\lceil{\\frac{k}{2}}\\rceil - l+1 ] \\times 2^{(l-1)},\\ 1 \\leq i \\leq n$ ] .",
    "* step 5 * : compute each @xmath55 , 1 \\leq i \\leq n)$ ] using garner s algorithm such that :    @xmath55 = garneralgorithm(\\{p_1,p_2\\ } , \\{r[1 , i ] , r[2 , i]\\})$ ] + @xmath70 .    *",
    "step 6 * : transform each @xmath55 $ ] in its binary sequence @xmath71,\\ ( 1 \\leq j \\leq k)$ ] bits such that :    @xmath72)_2   =   \\underbrace{sp[i , 1 ] sp[i , 2]\\cdots sp[i , k]}_{k\\ bits}$ ]    * step 7 * : merge all the binary string into one , the secret @xmath1 , such that :    @xmath73 = sp[i , j],\\ 1 \\leq i \\leq n , 1 \\leq j \\leq k$ ] .    where @xmath74 take as input a list of co - primes @xmath75 , a list of remainders @xmath76 , r[2 , i]$ ] , and outputs a unique value @xmath55 $ ] .",
    "+ * time complexity * : @xmath67      in this approach , for each block of length @xmath48 , 2 remainders @xmath77 , @xmath78 are computed respectively from @xmath79 and @xmath80 . as @xmath81 , we can easily deduce that , the number max of inserted @xmath0 s from a remainder is :    @xmath82 .",
    "thus , the number max of @xmath0 s that can be inserted for a block of @xmath1 is @xmath48 .",
    "+ so , to embed a full secret message @xmath1 divided into @xmath52 blocks of length @xmath48 , the maximum number of @xmath0 s that would be needed is :    @xmath83 .",
    "we add @xmath84 here because , for the last computed remainder , a a0 character would be inserted at the end of the hiding procedure , serving as ending point for the recovery method . from , all these comes out the following theorem .    .",
    "+ given a secret message @xmath1 , a secret key @xmath48 such that number of blocks of length @xmath48 , is given by @xmath85 , and two primes @xmath49 such that @xmath50 , @xmath51 , the number @xmath86 of @xmath0 s insertions at between - character locations to perform in a pdf file , is :    @xmath87    @xmath9 + where @xmath86 depends on the number of bits having value 1 , contained in the secret message @xmath1 s computed remainders .",
    "in this particular approach , what would be considered as key is not @xmath48 the block length , but @xmath88 , a value that allows to compute primes between @xmath89 and @xmath90 , such that the base 2 logarithm of the product of all those primes gives us the block length @xmath48 , in which a secret message @xmath1 would be divided in .",
    "those primes allows us to compute remainders , which their values would be used to compute position where one @xmath0 would inserted .",
    "the whole procedure is defined as follows : + * input : * s : secret message , m : secret key , f : cover pdf file + * output : * f : stego - pdf file + * step 1 * : compute primes @xmath91 such that :    @xmath92    where , @xmath93 is the number of primes computed between @xmath89 and @xmath90 .",
    "* step 2 * : compute the block length @xmath48 such that :    @xmath94    where , @xmath95 .",
    "* step 3 * : @xmath1 is split in @xmath52 blocks of length @xmath48 stored the matrix @xmath53 such that :    @xmath54 = s[(i - 1)k + j],\\ 1 \\leq",
    "i \\leq n , 1 \\leq j \\leq k$ ] .",
    "* step 4 * : each line of @xmath53 corresponding to a binary sequence , is transformed in its decimal value @xmath55 $ ] such that ,    @xmath55 = \\sum_{j = 1}^k sp[i , k - j+1 ] \\times 2^{(j-1)},\\ 1 \\leq i \\leq n$ ] .",
    "* step 5 * : for each decimal value @xmath55 $ ] @xmath56 , remainders @xmath57 , r[2,i],\\cdots , r[t , i]$ ] , are computed such that    @xmath60 = dec[i]\\mod p_j,\\ 1 \\leq i \\leq n,\\ 1 \\leq j \\leq t$ ]    * step 6 * : for each remainder @xmath60,\\ 1 \\leq i \\leq n,\\ 1 \\leq j \\leq t$ ] , we compute positions @xmath96,\\cdots , pos[t , n]$ ] , as described by the following procedure :    * step 7 * : sort the vector @xmath97 in the ascending order ; + * step 8 * : for each @xmath98 , 1 \\leq i \\leq ( n\\times t ) - 1 $ ] , insert one @xmath0 at the @xmath98^{th}$ ] between - character location of @xmath43 . and , at the @xmath99^{th}$ ] between - character location of @xmath43 , insert two @xmath0 s , to mark then end of the process .",
    "+ * time complexity * : @xmath67      to recover secret message from a stego pdf file encoded with the above procedure , the positions of all the @xmath0 s in the file must be recover at first , then remainders that produced those positions , and with the @xmath48 , computer the values related to those remainders , as described by the following procedure : + * input : * f : stego - pdf file , m : secret key + * output : * s : secret message + * step 1 * : compute primes @xmath91 such that :    @xmath100    * step 2 * : compute the block length @xmath48 such that :    @xmath94    where , @xmath95 .    * step 3 * : compute the block length in the file @xmath43 such that :    @xmath101    * step 4 * : retrieve the positions where @xmath0 s have been inserted as described below :    * step 5 * : compute the remainders from the table @xmath97 as follows :    * step 6 * : compute each decimal value @xmath55 $ ] of a block of @xmath1 such that :    @xmath55 = garneralgorithm(\\{p_1,p_2,\\cdots p_t\\ } , \\{r[1 , i ] , r[2 , i],\\cdots , r[t , i]\\})$ ] + @xmath70 .",
    "* step 7 * : transform each @xmath55 $ ] in its binary sequence @xmath71,\\ ( 1 \\leq j \\leq k)$ ] bits such that :    @xmath72)_2   =   \\underbrace{sp[i , 1 ] sp[i , 2]\\cdots sp[i , k]}_{k\\ bits}$ ]    * step 8 * : merge all the binary string into one , the secret @xmath1 , such that :    @xmath73 = sp[i , j],\\ 1 \\leq i \\leq n , 1 \\leq j \\leq k$ ] .    where @xmath74 take as input a list of co - primes @xmath91 , a list of remainders @xmath76 , r[2 , i],\\cdots , r[t , i]$ ] , and outputs a unique value @xmath55 $ ] .",
    "+ * time complexity * : @xmath67      let :    * @xmath102 , + * @xmath103 the number of prime numbers less or equal to @xmath13 , + * @xmath91 are the prime numbers taken between @xmath104 and @xmath105 .",
    "+    in this approach , for each block of length @xmath48 , @xmath106 s are inserted in the cover file .",
    "so to embed a full secret message @xmath1 divided into @xmath52 blocks of length @xmath48 , @xmath107 @xmath0 s would be needed .",
    "this is the result we obtained , resume by the following theorem .",
    "regardless the number of blocks we need to embed , an additional @xmath0 , would be added to allow the recovery method to stop when all the hidden bits have been recovered .    .",
    "+ given a secret message @xmath1 , a secret key @xmath88 , a set of primes @xmath91 taken between @xmath104 and @xmath105 , @xmath48 the block length such that @xmath108 , and @xmath52 the number of blocks of length @xmath48 , such that @xmath109 .",
    "the number @xmath86 of @xmath0 s insertions at between - character locations , to perform in a pdf file is given by :    @xmath110    @xmath9 + on one hand , as @xmath93 is the number of primes taken between @xmath104 and @xmath105 ,    @xmath111    and from the work of hadamard and de la valle poussin @xcite , which resulted in the following theorem : + * the prime number theorem @xcite : * + @xmath9 + we can deduce that : @xmath112    on the other hand , from estimations of rosser and schoenfeld @xcite , we have : +    @xmath113    we can deduce that :    @xmath114 .    it is easy to show that @xmath115 we have :    @xmath116    from these estimations , we deduce that , for @xmath117 :    @xmath118 .",
    "thus , putting @xmath119 : @xmath120    from ( [ e : mm8 ] ) and ( [ e : mm9 ] ) , we can deduce the following corollary .    .",
    "+ @xmath121 , the number @xmath86 of @xmath0 s insertions at between - character locations , to perform in a pdf file is given by :    @xmath122        * input : * s : secret message ; k : secret key ; f : cover pdf file .",
    "+ * output : * f : cover pdf file with embedded _ a0 _ s + * step 1 * : two co - primes @xmath49 , are computed from @xmath48 such that ,    @xmath50 ; @xmath51 .    * step 2 * : @xmath1 is split in @xmath52 blocks of length @xmath48 stored the matrix @xmath53 such that :    @xmath54 = s[(i - 1)k + j],\\ 1 \\leq",
    "i \\leq n , 1 \\leq j \\leq k$ ] .",
    "* step 3 * : each line of @xmath53 corresponding to a binary sequence , is transformed in its decimal value @xmath55 $ ] such that ,    @xmath55 = \\sum_{j = 1}^k sp[i , k - j+1 ] \\times 2^{(j-1)},\\ 1 \\leq i \\leq n$ ] .",
    "* step 4 * : for each decimal value @xmath55 $ ] @xmath56 , two remainders @xmath57 $ ] and @xmath58 $ ] , are computed such that    @xmath57 = dec[i]\\mod p_1 $ ] and @xmath58 = dec[i]\\mod p_2,\\ 1 \\leq i \\leq n$ ]    * step 5 * : for each remainder @xmath60,\\ 1 \\leq i \\leq",
    "n,\\ 1 \\leq j \\leq 2 $ ] , we compute positions @xmath96,\\cdots , pos[2,n]$ ] , as described by the following procedure :    * step 6 * : sort the vector @xmath97 in the ascending order ; + * step 7 * : for each @xmath98 , 1 \\leq i \\leq n\\times 2 - 1 $ ] , insert one @xmath0 at the @xmath98^{th}$ ] between - character location of @xmath43 . and , at the @xmath123^{th}$ ] between - character location of @xmath43 , insert two @xmath0 s , to mark then end of the process . + * time complexity * : @xmath67      * input : * f : stego - pdf file , k : secret key + * output : * s : secret message + * step 1*:two co - primes @xmath49 , are computed from @xmath48 such that ,    @xmath50 ; @xmath51 .",
    "* step 2 * : compute the block length in the file @xmath43 such that :    @xmath124    * step 3 * : retrieve the positions where @xmath0 s have been inserted as described below :    * step 4 * : compute the remainders from the table @xmath97 as follows :    * step 5 * : compute each decimal value @xmath55 $ ] of a block of @xmath1 such that :    @xmath55 = garneralgorithm(\\{p_1,p_2\\ } , \\{r[1 , i ] , r[2 , i]\\})$ ] + @xmath70 .",
    "* step 6 * : transform each @xmath55 $ ] in its binary sequence @xmath71,\\ ( 1 \\leq j \\leq k)$ ] bits such that :    @xmath72)_2   =   \\underbrace{sp[i , 1 ] sp[i , 2]\\cdots sp[i , k]}_{k\\ bits}$ ]    * step 7 * : merge all the binary string into one , the secret @xmath1 , such that :    @xmath73 = sp[i , j],\\ 1 \\leq i \\leq n , 1 \\leq j \\leq k$ ] .",
    "* time complexity * : @xmath67      in this approach , for each block of length @xmath48 , 2 @xmath0 s are inserted in the cover file .",
    "so to embed a full secret message @xmath1 divided into @xmath52 blocks of length @xmath48 , @xmath125 @xmath0 s would be needed . regardless the number of blocks we need to embed , an additional @xmath0 , would be added to allow the recovery method to stop when all the hidden bits have been recovered .",
    "the obtained result is resumed by the following theorem .    .",
    "+ given a secret message @xmath1 , a secret key @xmath48 such that number of blocks of length @xmath48 , is given by @xmath85 , and two primes @xmath49 such that @xmath50 , @xmath51 , the number @xmath86 of @xmath0 s insertions at between - character locations , to perform in a pdf file is given by :    @xmath126    @xmath9       in this particular approach , there is no need of a secret key . here",
    ", we embed only 3 @xmath0 s , at 3 different positions in the cover file @xmath43 .",
    "their values , depend only on length of the secret message that a sender wants to send through a non - secure communication channel .",
    "* input : * s : secret message ; f : cover pdf file . + * output : * f : cover pdf file with embedded _ a0",
    "_ s + * step 1 * : compute @xmath52 , the length of the secret message @xmath1 .    *",
    "step 2 * : insert one @xmath0 at the @xmath127 between - character location in the file @xmath43 .",
    "* step 3 * : compute two co - primes @xmath49 such that ,    @xmath128 ; @xmath51 .",
    "* step 4 * : transform @xmath1 in its decimal value @xmath129 such that ,    @xmath130 \\times 2^{(n - i)}$ ] .",
    "* step 5 * : compute two remainders @xmath131 $ ] and @xmath132 $ ] such that ,    @xmath131 = dec\\ mod\\ p_1 $ ] and @xmath133 = dec\\ mod\\ p_2 $ ] .",
    "* step 6 * : for each remainder @xmath134\\ ( 1 \\leq i \\leq 2)$ ] , we compute positions @xmath135 $ ] and @xmath136 $ ] as follows :    @xmath135 = n + 2*r[1]$ ] , and @xmath136 = n + 2*r[2 ] + 1 $ ] .",
    "* step 7 * : embed one @xmath0 at @xmath135^{th}$ ] and @xmath136^{th}$ ] between - character locations in the file @xmath43 .",
    "+ * time complexity * : @xmath137      * input : * f : stego - pdf file , + * output : * s : secret message + * step 1 * : browse the stego - pdf file , until we cross the first @xmath0 , and store its position in @xmath52 .",
    "* step 2 * : compute two co - primes @xmath49 such that ,    @xmath128 ; @xmath51 .",
    "* step 3 * : browse the stego - pdf file , from the position @xmath52 , until we cross the second @xmath0 , store its position in @xmath135 $ ] and the last @xmath0 , and store its position in @xmath136 $ ] .    * step 4 * : permute if necessary the values of @xmath135 $ ] and @xmath136 $ ] as follows :    * step 5 * : computes remainders @xmath131 $ ] and @xmath132 $ ] from positions @xmath135 $ ] and @xmath136 $ ] as follows :    @xmath131 = pos[1]/2 $ ] , and @xmath132 = ( pos[2 ] - 1)/2 $ ] .    *",
    "step 6 * : compute the decimal value @xmath129 such that :    @xmath138 , r[2]\\})$ ]    * step 7 * : transform @xmath129 in its binary sequence @xmath1 on @xmath52 bits length such that :    @xmath139 s[2]\\cdots s[n]}_{n\\ bits}$ ]    * time complexity * : @xmath137      as with this method , we have the possibility to embed not more or less than 3 @xmath0 s , no matter how long the message is , we ve reached the following result .    .",
    "+ given a secret message of length @xmath52 and two primes @xmath49 such that @xmath128 and @xmath51 .",
    "the number @xmath86 of @xmath0 s insertions at between - character locations , to perform in a pdf file is given by :    @xmath140    @xmath9 + the proof of this theorem is trivial , regarding the definition of the hiding method .",
    "we conducted experiments on our approaches to make sure we reach our goal , which is to reduce the insertion of @xmath141 in a pdf file , to maintain a small difference between cover and stego pdf files , while increasing the amount of data that can be hidden in that pdf file serving as cover .",
    "+ to have a better view of our results , we ve chosen as inputs the following : secret message _ s = `` this is a covert communication method . ''",
    "_ ( as in @xcite ) , with @xmath142 and a random pdf file . for that input _",
    "i shi et al .",
    "_ inserted @xmath143 in a pdf file . as described by the following table .",
    "note : @xmath144 is _ character _ , @xmath145 is _ frequency _ , @xmath86 is the number of @xmath0 s for a character and @xmath146 is _ bits_. +    * 2c     lf & 1 & 12 & 12 +   & 5 & 1 & 5 + t & 1 & 13 & 13 + a & 2 & 7 & 14 + c & 3 & 4 & 12 + d & 1 & 14 & 14 + e & 2 & 8 & 16 + h & 2 & 9 & 18 + i & 4 & 2 & 8 +    &     m & 3 & 5 & 15 + n & 2 & 10 & 20 + o & 4 & 3 & 12 + r & 1 & 15 & 15 + s & 2 & 11 & 22 + t & 3 & 6 & 18 + u & 1 & 16 & 16 + v & 1 & 17 & 17 + * total * & 38 &   & * 247 * +    regarding our methods , at the beginning we preprocessed the cover file , converted the secret message into its binary sequence , where each character was replaced by its ascii code binary representation .",
    "+ as we have 38 characters each represented on 8 bits , we would have 304 bits to hide in the cover pdf file .",
    "let s assume @xmath47 , the total number of bits and @xmath147 the binary sequence of the secret message @xmath1 .",
    "+        .ascii codes of the secret message s characters [ cols=\"<,^,>\",options=\"header \" , ]      +     + where _ c _ is _ character _",
    ", _ h _ is _ hexadecimal _ ( the hexadecimal ascii code of the character ) and _ ascii code _ is the binary ascii code of the character      to compute the the number @xmath86 of inserted @xmath0 s we use theorem 2 , and thus we obtain to following results : @xmath144 is _ character _ , @xmath145 is _ frequency _ and @xmath146 is _ bits_. +    * 2c     lf & 1 & 00001010 & 2 +   & 5 & 00100000 & 5 + t & 1 & 01010100 & 3 + a & 2 & 01100001 & 6 + c & 3 & 01100011 & 12 + d & 1 & 01100100 & 3 + e & 2 & 01100101 & 8 + h & 2 & 01101000 & 6 + i & 4 & 01101001 & 16 +    &     m & 3 & 01101101 & 15 + n & 2 & 01101110 & 10 + o & 4 & 01101111 & 24 + r & 1 & 01110010 & 4 + s & 2 & 01110011 & 10 + t & 3 & 01110100 & 12 + u & 1 & 01110101 & 5 + v & 1 & 01110110 & 5 + * total * & 38 &   & * 136 * +    in the column @xmath146 , for each character we computed the number of bits having value 1 in its ascii code , multiplied by the its frequency in the secret message @xmath1 .",
    "thus , one can see that :    * we ve obtained a better result compare to results obtained with the method of _ i shi et al . _",
    ": @xmath148 s * we ensured the fact that the number of inserted @xmath0 s is lower than the number of bits of @xmath1 : @xmath149 .",
    "note that the value @xmath150 represents the maximum number of @xmath0 s that can be inserted in a cover pdf file , given the secret message taken as example in this study .      to compute the number @xmath86 of inserted @xmath0 s",
    ", we use the corollary 1 , by replacing @xmath47 by its value and @xmath48 by its equation ( [ e : mm9 ] ) .",
    "thus :    @xmath122    and as the number of @xmath0 s depends on @xmath88 , we vary the value of @xmath88 to see where its optimal value stands . here",
    "are some of the obtained results : +    * 3c     2 & 3 & 1 & 102 & 102 + 12 & 20 & 3 & 16 & 48 + 22 & 37 & 5 & 9 & 45 + 32 & 54 & 6 & 6 & 48 + 42 & 71 & 8 & 5 & 45 + 52 & 88 & 10 & 3 & 30 + 62 & 105 & 12 & 3 & 26 + 72 & 122 & 13 & 3 & 39 + 82 & 139 & 14 & 2 & 28 +    &     92 & 156 & 16 & 2 & 32 + 102 & 173 & 17 & 2 & 34 + 112 & 190 & 18 & 2 & 36 + 122 & 207 & 19 & 2 & 38 + 132 & 224 & 21 & 2 & 42 + 142 & 241 & 22 & 2 & 44 + 152 & 258 & 23 & 2 & 48 + 162 & 275 & 24 & 2 & 48 + 172 & 292 & 25 & 2 & 50 +    &     179 & 304 & 25 & 1 & 25 + 182 & 309 & 27 & 1 & 27 + 192 & 326 & 28 & 1 & 28 + 202 & 343 & 29 & 1 & 29 + 212 & 360 & 30 & 1 & 30 + 222 & 377 & 31 & 1 & 31 + 232 & 394 & 32 & 1 & 32 + 242 & 411 & 34 & 1 & 34 + 252 & 428 & 35 & 1 & 35 +    in this approach , the block length @xmath48 is not the secret key , but is computed from @xmath88 which is . and even the set of prime numbers used to compute remainders is generated from it .",
    "+ by varying the different values of @xmath88 , we came up we a certain number of curves .",
    "+    , of prime numbers with respect to @xmath48 ]    this curve shows the growth of @xmath93 with respect to @xmath48 ( or @xmath88 ) .",
    "we can see that , the more @xmath48 grows , the more the number of prime numbers that would used in the computation of @xmath0 s grows . and",
    "as each prime generates one @xmath0 , the number of @xmath0 s grows too .",
    "+    ]    then , we generated a curve , showing that , the more @xmath48 gets closed to @xmath47 , the more @xmath52 , the number of blocks , decreases until it reaches the value 1 ; where it remains constant no matter the value @xmath48 ( for @xmath152 ) .",
    "+ after having computed for each value of @xmath88 , the block length @xmath48 , the number of primes @xmath93 and the number of block @xmath52 of the secret message @xmath1 , we generated a curve showing the growth of @xmath86 the number of @xmath0 s that would be use to encode the secret message @xmath1 , with respect to @xmath48 ( or @xmath88 ) .",
    "+    s with respect to @xmath48 ]    one can see that , when @xmath48 gets superior to @xmath47 , @xmath86 the number of @xmath0 s depends now on the number of primes @xmath93 .",
    "meaning that , the more @xmath93 grows the more the @xmath86 grows . where @xmath93 s growth is a consequence of the growth of @xmath1 , as shown by the first curve .",
    "+ and for a value of @xmath48 taken between @xmath84 and @xmath47 , the value of fluctuate , making it difficult to choose the right value of the key @xmath88 , that lowers the number of inserted @xmath0 s .",
    "but compare to the result of _ i shi et al .",
    "_ for a value of @xmath153 $ ] , the max value ( this is when @xmath154 ) is less than the half of value ( @xmath155 s ) they ve obtained . + also , one can see that the optimal value of @xmath86 can be reached for @xmath156 $ ] .",
    "for that , @xmath149 , and there are certain cases ( @xmath157 $ ] and , @xmath158 $ ] ) where @xmath86 gets lower than the number of characters of the secret message @xmath1 , which is hard to generalize .      to compute the number @xmath86 of inserted @xmath0 s , we use the theorem 3 , where :    @xmath126    and as the number of @xmath0 s depends on @xmath48 , we vary the value of @xmath48 to see where its optimal value stands . here",
    "are some of the obtained results :     1 & 609 + 2 & 305 + 3 & 205 + 16 & 39 + @xmath47/4 & 9 + @xmath47/2 & 5 + 3*@xmath47/4 & 5 + @xmath47 & 3 + 5*@xmath47/4 & 3 + 3*@xmath47/2 & 3 +    s with respect to the key @xmath48 ]     + from the above operations , whose some of the results are represented by the figure below , we can see that :    * for @xmath159 , @xmath160 . which is not a good situation ; * for @xmath161 , @xmath162 and @xmath149",
    ". meaning , from here we inserted less @xmath0 s than with the method of _ i shi et al . _ ; * for @xmath163 , @xmath164 and @xmath149 . from this point , @xmath86 starts to get lower than the number of characters of @xmath1 .",
    "as for @xmath165 , we have @xmath166 , which is exactly the number of characters contained in @xmath1 . * for @xmath167 ,",
    "meaning that at this point , the weight difference between the cover and the stego file is almost invisible ; * for @xmath169 , @xmath170 .",
    "@xmath86 remains constant no matter the value of the @xmath48 .",
    "+    so , to ensure that a minimum number of @xmath0 s would be inserted in a cover pdf file , the sender and the receiver , should agree on a secret key with high value .",
    "+      first of all , compute the two remainders @xmath79 , @xmath80 that would help us to compute positions .    * @xmath171 ; * @xmath172 .    then , convert the @xmath147 in its decimal value @xmath129 and compute three positions where one @xmath0 would be inserted in the pdf .",
    "those positions are :    * first position : @xmath173 = |s| = 304 $ ] * second position : @xmath135 = 2*(dec\\ mod\\ p_1 ) + |s|$ ] * third position : @xmath136 = 2*(dec\\ mod\\ p_2 ) + |s|$ ]    whatever the values of the computed positions , only 3 @xmath141 will be inserted .",
    "one can conclude that :    * the weight difference between the cover file and the stego file is 3 bytes ; * the number @xmath86 of inserted @xmath0 s is far smaller than the number inserted using _",
    "i shi et al .",
    "_ method ; * we ensured the fact that the @xmath174 .",
    "we can resume our results , for the chosen secret message of 38 characters , as shown by the following table :     * @xmath175 case * & * @xmath176 case * & * @xmath177 case * + * n * & 247 & 138 & @xmath178 & @xmath179 3 & 3 + * files * & 2 & 1 & 1 & 1 & 1 +    with these experiments we ve shown the effectiveness and the correctness of our approaches .",
    "from the our results obtained , expressed in the previous section , we came up with some observations , regarding the choice of a secret key , to embed a secret message @xmath1 , in a cover pdf file .",
    "+ the number of signs that can be contained in a document page is closed to @xmath180 . where a sign can be , space , punctuation , apostrophes , etc .",
    "thus , the number of between - character locations in that page is close to @xmath180 ( @xmath181 ) .",
    "it implies that :    * in the first and fourth approaches : for each @xmath182 multiple of @xmath180 , that is to say that @xmath183 ( @xmath184 , @xmath185 ) , we would need @xmath186 page(s ) to hide the number of @xmath0 s generated by @xmath182 .",
    "* in the second and third approaches : @xmath101 , where @xmath187 is the number of between character locations used to hide @xmath0 s generated by @xmath93 prime numbers , and @xmath93 in the third approach equals 2 . for @xmath187 multiple @xmath180 , that is to say that @xmath188 ( @xmath184 ) , we would need @xmath186 pages to hide a block of the secret message @xmath1 .    thereby , the more @xmath187 or @xmath182 is high , the more we would need a cover pdf file with a high number of pages to embed our secret message . and here , the amount of embbedable information would depend on the approach selected for the purpose .",
    "our approaches can be optimized even more , by using a compression algorithm on the secret message as done in @xcite .",
    "+ the advantage of our method is that it would be difficult to detect the integration of secret information in the cover file , while the inconvenient is that the file s number of pages can grow exponentially as it depends on @xmath187 or @xmath182 .",
    "a novel approach of pdf steganogaphy is proposed based on the chinese remainder theorem . in this paper",
    "we presented four different techniques whose purpose is to increase the amount of information that can be hidden in a cover pdf file , while reducing considerably the number of @xmath0 s insertions at between - character locations in that file , thus reducing the weight difference between a cover file and a stego file in which a secret message is embedded .",
    "we did this , by ensuring that the number of embedded @xmath0 s would be less than the number of characters of @xmath1 or at least if @xmath1 grows higher , the number of inserted @xmath0 s wo nt explode .",
    "experimental results show the feasibility of the proposed methods and parameters to attain an optimal efficiency had been exposed .",
    "further researches may be directed to improve these methods , and also to applying the data hiding scheme to other applications like watermarking for copyright protection , authentication of pdf files , etc .",
    "this work was supported by _ ummisco _ , by _ lirima _ and by the _ university of yaounde 1_.      l. y. por , b. delina , ",
    "information hiding : a new approach of text steganography , _",
    "7th wseas international conference on applied computer and applied computational science _ , ( acacos 08 ) , hangzhou , china .",
    "sharon rose govada , bonu satish kumar , manjula devarakonda and meka james stephen , ",
    "text steganography with multi level shielding , _ international journal of computer science issues _ , vol",
    ". 9 , issue 4 , no 3 , july 2012 ."
  ],
  "abstract_text": [
    "<S> we propose different approaches of pdf files based steganography , essentially based on the chinese remainder theorem . here , after a cover pdf document has been released from unnecessary characters of ascii code @xmath0 , a secret message is hidden in it using one of the proposed approaches , making it invisible to common pdf readers , and the file is then transmitted through a non - secure communication channel . where each of our methods , tries to ensure the condition that the number of inserted @xmath0 is less than the number of characters of the secret message @xmath1 .    </S>",
    "<S> * keywords : * steganography , pdf files and readers , chinese remainder theorem . </S>"
  ]
}