{
  "article_text": [
    "model - based development ( mbd ) is a paradigm in which software and system development focus on high - level executable models , cf . @xcite . in the early development phases ,",
    "formal models allow a wide range of exploration and analysis using domain - specific notations in order to simplify the system design , development or verification / testing .",
    "application of formal models provides many benefits for the software and system development . in  40 years of formal methods \"",
    "@xcite , bjrner and havelund admit that the gap between academic research on formal methods and its integration in large industrial projects is yet to be bridged .",
    "there are a number of hindering factors for adoption of formal methods in industry  @xcite . as crucial obstacles",
    "can be named lack of understandability and readability  @xcite , and our aim is to find appropriate ways to avoid these obstacles .",
    "also , human factors play a crucial role and have to be taken into account  @xcite .",
    "application of formal models requires an interplay between formal and informal methods , which use different levels of formality in descriptions . a manual solution to this problem",
    "was suggested many years ago : guiho and hennebert reported a communication problem in the sacem project @xcite between the verifiers and other engineers , who were not familiar with the formal specification method .",
    "the problem was solved by providing the engineers with a natural language description derived _ manually _ from the formal specification . for a large - scale projects",
    ", it would be too time - consuming to derive a natural language specification ( nls ) manually . in this paper",
    ", we propose a framework for _ automated generation _ of nls from the basic modelling artefacts , such as data type definitions , state transition diagrams ( stds ) , and architecture specifications .",
    "* contributions : * the proposed solution would serve not only increasing the understandability of formal models , but also keeping the system documentation up - to - date .",
    "system documentation is an important part of the development process , but it is often considered by industry as a secondary appendage to the main part of the development  modelling and implementation .",
    "it is hard to keep the documentation up - to - date if the system model is frequently changing during the modelling phase of the development .",
    "thus , system requirements documents and the general systems description are not updated according to the system s or model s modifications .",
    "sometimes the updates are overlooked , sometimes they are omitted on purpose .",
    "for example , it is because of timing or costs constraints on the project . as a result",
    ", the system documentation is often outdated and does not describe the latest version of the system model .",
    "the question is whether we need to update the documentation _ manually _ , cf .",
    "@xcite .",
    "* outline : * the rest of the paper is organised as follows .",
    "section  [ sec : related ] describes the related work .",
    "section  [ sec : framework ] introduces the proposed framework and a a small case study to illustrate the ideas of the framework . in section  [ sec : conclusions ] we summarise the paper and propose directions for future research .",
    "the research field of automated translation from formal modelling languages to natural languages is almost uncovered , however , there are many approaches on automated generation of ( semi-)formal specifications from natural language ones .",
    "lee and bryant @xcite presented an approach automatically generate formal specifications in an object - oriented notation from nls .",
    "cabral and sampaio @xcite suggested to use a controlled natural language ( cnl ) , a subset of english to analyse system characteristics represented by a set of declarative sentences .",
    "cnl use restricted vocabulary , grammar rules in defined knowledge based for the aim of formal models generation .",
    "this also allows to generate structured models at different levels of abstraction , as well as provides formal refinement of user actions and system responses .",
    "schwitter et al .",
    "@xcite introduced ecole , an editor for a controlled language called peng ( process - able english ) , that defines a mapping between english and first - order logic in order to verify requirements consistency , as well as to help writing manuals and system specifications to improve documentation quality , which is our goal of generated specifications in natural language .",
    "as several attempts have been made to automate the requirement capture , there is another approach for the automatic construction of object - oriented design model in uml diagram from natural language requirement specification .",
    "mala and uma @xcite present a methodology that utilizes the automatic reference resolution and eliminates the user intervention .",
    "the input problem statement is split into sentences for tagging by sentence splitter in order to get parts of speech for every word .",
    "the nouns and verbs are then identified by tagged texts based on simple phrasal grammars .",
    "reference resolver is used to remove ambiguity by pronouns .",
    "the final text is then simplified by the normaliser for mapping the words into object - oriented system elements .",
    "the result produced by the system is compared with human output on the basic analysis of the text .",
    "the approach is promising to introduce a method to restructure the natural language text into modelling language in respect of system requirements specifications .",
    "although there is a shortage of the efficiency in the tagger and reference resolver that result in unnatural expressions and misunderstandings , it can be improved by building a knowledge base for the system elements generation .",
    "juristo et al .",
    "@xcite introduced an approach to formalise the requirement analysis process .",
    "the goal of this approach was to generate conceptual models in a precise manner , which provides support for resolving difficulties of misunderstanding the system requirements .",
    "the approach is based on examining the information extraction at the beginning of the development process ( i.e. , describing the problems in natural language sentences ) , and consists of two different activities : formalisation of the conceptual model and creation of the formal model .",
    "the limitation of this approach is in the difficulties to retrieve the rigorous and concise problem descriptions .",
    "gangopadhyay @xcite suggested to design a conceptual model from a functional model , expressed in natural language sentences .",
    "although its application is mainly for database applications , it can be extended to other design problems such as web engineering and data warehousing . in order to interpret natural language expressions , gangopadhyay applied the theory of conceptual dependencies developed by schank , cf .",
    "the main goal of this approach was to identify data elements from functional model expressed in nls , to locate missing information , as well as to integrate all individual data elements into an overall conceptual schema for data model establishment .",
    "a prototype system using oracle database management system has been implemented to contain a parser for information collection .",
    "however , the lexicon in use is developed incrementally and semi - automated , so domain specialists still need to manually categorise words and phrases , to ensure non - relevant words are included in the system during the development of the conceptual model and to prevent systematic bias .",
    "bryant @xcite suggested the theory of two - level grammar for natural language requirements specification , in conjunction with specification development environment to allow user interaction to refine model concepts .",
    "this approach allows the automation of the process of transition from requirements to design and implementation , as well as producing an understandable document on which software system will base on .",
    "ilieva and ormandjieva @xcite proposed an approach on transition of natural language software requirements specification into formal presentation .",
    "the authors decided their method into three main processing parts : ( 1 ) the linguistic component as the text sentences to be analysed ; ( 2 ) the semantic network as the formal nl presentation ; and ( 3 ) modelling as the final phase of formal presentation of the specification .",
    "however , the approach of ilieva and ormandjieva involves manual human analysis process , to break down problems into smaller parts that are easily understood .",
    "figure [ fig : suggested_framework ] illustrates the general ideas of the suggested framework . to build a prototype for generation of nls from the basic modelling artefacts",
    ", we have selected the autofocus3 modelling tool @xcite as the basis for our models , because this tool ( 1 ) embeds the basic modelling artefacts , ( 2 ) is open source , as well as ( 3 ) has a well defined formal syntax behind all its modelling elements .",
    "autofocus3 is developed on system models based on the focus  theory @xcite that allows to specify system on different levels of abstraction formally and precisely .",
    "source code of autofocus3 models are coded in xml , which makes it easy to parse and to analyse .",
    "autofocus3 has many advantages and is constantly evolving through last 10 years .",
    "the tool was applied as a part of tool chain within a number of development methodologies , e.g. , for safety - critical systems in general @xcite , and for automotive - systems  @xcite .",
    "the tool can also be successfully applied for service - oriented modelling  @xcite , which gives us another reason to select autofocus3 for the framework we develop .    to allow further formal analysis of the generated specification",
    ", we restrict english to its subset , attempto controlled english ( ace ) , cf .",
    "specifications written in ace give the impression of being informal , though they are in fact formal and machine executable .",
    "ace provides a set of principles and recommendations for the strategy : to reduce the amount of lexical resources and structural sentences for a specification text to be unambiguously represented , and to fulfil the communication gap between domain specialist and software developer . basically , the construct of ace specification is the declarative sentence that is expressive enough to allow both natural usage and computer - processed purpose @xcite .",
    "+ * implementation : * we are currently implementing an automated translator from the autofocus3 models to ace sentences in the python programming language .",
    "python was chosen as the development language due to its rapid prototyping features , as well as due to its increasing uptake by researchers as a scientific software development language because of good code readability and maintainability . with regard to the python performance ,",
    "it is sufficient for many common tasks and turns out to be very close to c language for parsing a file and a tree - like structure , cf . @xcite . for the execution environment",
    ", we will research on the installation of ace parsing engine , cf .",
    "@xcite , to execute natural language sentences in prolog , cf .",
    "@xcite .",
    "+ * xml code of autofocus3 models .",
    "* while parsing the xml code of an autofocus3 model , we have to identify three core sections :    * specifications of data types and functions / constants ( introduced by the xml - tag _ rootelements _ with the type _ data dictionary _ , cf .",
    "below for an example from the simpletrafficlight case study ) . *",
    "specifications of the system and components architecture ( introduced by the xml - tag _ rootelements _ with the type _ componentarchitecture _ ) ; * specifications of the state machines , used to describe the behaviour of system components ( introduced by the xml - tag _ containedelements _ with the type _ stateautomaton _ ) :    as each of these parts consists of xml representation of the autofocus3 elements , we can define a translation schema for each of these elements to generate english sentences out of the xml code",
    ". the sentences should be conform to the ace rules . to validate that this constraint is fulfilled",
    ", we have to analyse syntax and semantics of the generated sentences .",
    "+ * translation schema .",
    "* let us discuss the translation schema in more details , focusing for simplicity on the specifications of data types and functions / constants .",
    "the definition of each data type is provided within the xml - tag _ typedefinitions _ , where the keyword _ enumeration _ indicates that this is an enumeration type .",
    "the name of the data type is coded within the attribute _",
    "name_. the elements of the type are introduces with the tag _",
    "members_. for the case of an enumeration type , we would have the following xml structure , where @xmath0 is a natural number representing a number of elements in the data type , and @xmath1 are some natural numbers representing internal identifiers of autofocus3 elements : +    + to generate an ace sentence from this structure , we define two templates :    * for the case we have only one element , i.e. , @xmath2 , we would use the template + is a datatype .",
    "it consists - of one element that is .",
    "* for the case we have more than one element , i.e. , @xmath3 , we would use the template + is a datatype .",
    "it consists - of @xmath0 elements that are ,  , .",
    "+ the definition of each function / constant is provided within the tag _ function _ , where its name and value are coded within the attributes _ name _ and _",
    "value_. for the case of constant function , we would have the following xml structure , where @xmath4 are some natural numbers representing internal identifiers of autofocus3 elements : +   +    + to generate an ace sentence from this structure , we define the following template : + is a constant .",
    "it is equal to .",
    "+ similar translation patterns apply for architecture specifications and state transition diagram sections .",
    "+ * ace : syntax check .",
    "* ace supports declarative sentences , which includes simple sentences , there is / are - sentences , boolean formulas , composite sentences , interrogative sentences , imperative sentences .",
    "ace construction rules determine whether an english sentence is an ace sentence , cf .",
    "each ace sentence is an acceptable english sentence , but not every english sentence is justified as a valid ace sentence .",
    "thus , to be conformed to ace construction rules , an nls in english should be constructed from the following elements :    * function words : determiners , quantifiers , coordinators , negation words , pronouns , query words , modal auxiliaries ,  be \" , saxon genitive marker s ; * fixed phrases :  there is \" ,  it is true that \" ; * content words : nouns , verbs , adjectives , adverbs , prepositions .",
    "the function words and fixed phrases are predefined and can not be changed , whereas content words can be modified by users within the lexicon format , cf .",
    "the content words can not contain blank spaces .",
    "for instance ,  interested in \" should be reformulated to  interested - in \" .",
    "+ * ace : semantics check . *",
    "the mentioned above rules can not remove all ambiguities in english . to avoid ambiguity , ace provides a set of interpretation rules .",
    "thus , each ace sentence can have only one meaning , based on its syntax and on syntax of previous sentences .",
    "the correctness of the generated sentences can be validated by the ace query sentences , cf .",
    "they can be subdivided into three forms that are @xmath5-questions ( questions that require answer  yes \" or  no \" ) , @xmath6-questions ( questions starting with the words ",
    "what \" ,  when \" ,  where \" , etc . ) , and _ how much / many_-questions , cf .",
    "@xcite . for example",
    ", we could use the following questions to check the definition of an enumeration data type @xmath7 :    * what is @xmath7 ? * how many elements",
    "does @xmath7 have ? * is @xmath8 an element of @xmath7 ?",
    "+ * case study : simpletrafficlight system . *",
    "we present the core ideas of the framework on example of a small case study , simple traffic lights , introduced by lam and teufl in @xcite . in the simple traffic lights case study , we the following elements in the data definitions section :    * functions _ tgreen _ , _ tred _ , and _ tyellow _ that return a constant integer value to represent the time in seconds for the active pedestrian or traffic light . *",
    "enumeration data types : * * _ pedastriancolor _ : pedestrian lights ( _ stop _ , _ walk _ ) ; * * _ trafficcolor _ : traffic lights ( _ green _ , _ red _ , _ redyellow _ , _ yellow _ ) ; * * _ signal _ : one - element data type to represent the _ present _ signal ; * * _ indicatorsignal _ : pedestrian requests to pass the street ( _ off _ , _ on _ ) .    figure  [ fig : mapping_af3_xml_ace_datatypes ] illustrates the translation process from the autofocus3 data types and the corresponding xml descriptions , to ace sentences .",
    "after translation , we check the definition of each data type as shown on table  [ tab : acequestionstl ] and in figure  [ fig : acequestionstl ] .    in a similar manner",
    "the natural language description of the system and components architecture as well as of state machines , representing components behaviour , are generated and checked .",
    ".validation the generated sentences using ace - questions [ cols= \" < , < \" , ]",
    "this paper introduces our ongoing work on nls from formal models .",
    "the goal of our current work is to generate documentation in english from the basic modelling artefacts of the autofocus3 modelling language , that are data types , state machines , and architectural components .",
    "this would allow to have an easy - to - read and easy - to - understand specifications of systems - under - development , written in english . to allow further formal analysis of the generated specification , we restrict english to its subset , ace . the proposed framework , in its current version , can be applied to build a prototype for generation of ace specifications from the autofocus3 models .",
    "m.  broy , j.  fox , f.  hlzl , d.  koss , m.  kuhrmann , m.  meisinger , b.  penzenstadler , s.  rittmann , b.  schtz , m.  spichkova , et  al .",
    "service - oriented modeling of cocome with focus and autofocus . in _ the common component modeling example _ , pages 177206 .",
    "springer berlin heidelberg , 2008 .",
    "m.  feilkas , a.  fleischmann , f.  hlzl , c.  pfaller , k.  scheidemann , m.  spichkova , and d.  trachtenherz . a top - down methodology for the development of automotive software .",
    "technical report tum - i0902 , tu mnchen , 2009 .",
    "m.  feilkas , f.  hlzl , c.  pfaller , s.  rittmann , b.  schtz , w.  schwitzer , w.  sitou , m.  spichkova , and d.  trachtenherz . a refined top - down methodology for the development of automotive software systems - the keylessentry system case study .",
    "technical report tum - i1103 , tu mnchen , 2011 .",
    "m.  ilieva and o.  ormandjieva . automatic transition of natural language software requirements specification into formal presentation . in",
    "_ natural language processing and information systems _ , pages 392397 .",
    "springer , 2005 .",
    "b.  lee and b.  r. bryant .",
    "automated conversion from requirements documentation to an object - oriented formal specification language . in _ proceedings of the 2002 acm symposium on applied computing _ , pages 932936 .",
    "acm , 2002 .",
    "m.  spichkova .",
    "design of formal languages and interfaces : `` formal '' does not mean `` unreadable '' . in k.  blashki and p.  isaias , editors , _ emerging research and trends in interactivity and the human - computer interface_. igi global , 2013 .",
    "a.  zamansky , g.  rodriguez - navas , m.  adams , and m.  spichkova .",
    "formal methods in collaborative projects . in _",
    "11th international conference on evaluation of novel approaches to software engineering ( enase)_. ieee , 2016 ."
  ],
  "abstract_text": [
    "<S> application of formal models provides many benefits for the software and system development , however , the learning curve of formal languages could be a critical factor for an industrial project . </S>",
    "<S> thus , a natural language specification that reflects all the aspects of the formal model might help to understand the model and be especially useful for the stakeholders who do not know the corresponding formal language . </S>",
    "<S> moreover , an _ automated generation _ of the documentation from the model would replace manual updates of the documentation for the cases the model is modified . </S>",
    "<S> this paper presents an ongoing work on generating natural language specifications from formal models . </S>",
    "<S> our goal is to generate documentation in english from the basic modelling artefacts , such as data types , state machines , and architectural components . to allow further formal analysis of the generated specification </S>",
    "<S> , we restrict english to its subset , attempto controlled english . </S>"
  ]
}