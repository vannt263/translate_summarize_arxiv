{
  "article_text": [
    "with the increase in the capacity of backbone networks , the failure of a single link or node can result in the loss of a significant amount of information , which may lead to loss of revenues or even catastrophic failures .",
    "network connections are therefore provisioned with the property that they can survive such edge and node failures .",
    "several techniques have been introduced in the literature to achieve such goal , where either extra resources are added or some of the available network resources are reserved as backup circuits .",
    "recovery from failures is also required to be agile in order to minimize the network outage time .",
    "this recovery usually involves two steps : fault diagnosis and connections rerouting .",
    "hence , the optimal network survivability problem is a multi - objective problem in terms of resource efficiency , operation cost , and agility  @xcite .",
    "allowing network relay nodes to encode packets is a novel approach that has attracted much research work from both academia and industry with applications in enterprise networks , wireless communication and storage systems .",
    "this approach , which is known as network coding , offers benefits such as minimizing network delay , maximizing network capacity and enabling security and protection services , see  @xcite and references therein . network coding allows the sender nodes to combine / encode the incoming packets into one outgoing packet .",
    "furthermore , the receiver nodes are allowed to decode those packets once they receive enough number of combinations . however , finding practical network topologies where network coding can be deployed is a challenging problem . in order to apply network coding on a network with a large number of nodes",
    ", one must ensure that the encoding and decoding operations are done correctly over binary and finite fields .",
    "there have been several applications for the edge disjoint paths ( edp ) and node disjoint paths ( ndp ) problems in the literature including network flow , traffic routing , load balancing and optimal network design . in both cases ( edge and vertex disjointness paths ) , deciding whether the pairs can be disjointedly connected is np - complete  @xcite .",
    "a network protection scheme against a single link failure using network coding and reduced capacity is shown in  @xcite .",
    "the scheme is extended to protect against multiple link failures as well as against a single node failure .",
    "a protection scheme protects the communication links and network traffic between a group of senders and receivers in a large network with several relay nodes .",
    "this scheme is based on what we call _ network protection codes _ ( npcs ) , which are defined in section  [ sec : terminology ] .",
    "the encoding and decoding operations of such codes are defined in the case of binary and finite fields in  @xcite . in this paper , we establish limits on network protection codes and investigate several network graphs where npc can be deployed .",
    "in addition , we construct graphs with minimum number of edges to facilitate npc deployment .    this paper is organized as follows . in section  [ sec : terminology ] we present the network model and essential definitions . in section  [ sec : npc - minimumedges ] , we derive bounds on the minimum number of edges of graphs for npc , and construct graphs that meet these bounds in section  [ sec : graphconstruction ] . section  [ sec : k - connectedgraph ] presents limits on certain graphs that are applicable for npc deployment .",
    "in this section we present the network model , define briefly network protection codes , and then state the problem .",
    "further details can be found in  @xcite .",
    "the network model is described as follows :    let @xmath0 be a network represented by an abstract graph @xmath1 , where @xmath2 is the set of nodes and @xmath3 is set of undirected edges .",
    "let @xmath4 and @xmath5 be sets of independent sources and destinations , respectively .",
    "the set @xmath6 contains the relay , source , and destination nodes , respectively .",
    "the node can be a router , switch , or an end terminal depending on the network model @xmath0 and the transmission layer .",
    "let @xmath7 be a set of links @xmath8 carrying the data from the sources to the receivers .",
    "all connections have the same bandwidth , otherwise a connection with high bandwidth can be divided into multiple connections , each of which has a unit capacity .",
    "there are exactly @xmath9 connections . for simplicity ,",
    "we assume that the number of sources is less than or equal to the number of links . a sender with a high capacity",
    "can divide its capacity into multiple unit capacities , each of which has its own link .",
    "in other words , @xmath10 where @xmath11 and @xmath12 , for some integer @xmath13 .",
    "the failure on a link @xmath14 may occur due to network circumstances such as a link replacement and overhead .",
    "we assume that the receiver is able to detect a failure and is able to use a protection strategy to recover it .",
    "we will use in the rest of the paper the terms edges and links interchangeably     edge disjoint paths.,width=283,height=181 ]      let us assume a network model @xmath0 with @xmath15 path failures in the @xmath9 working paths , i.e. , paths carrying data from source(s ) to receiver(s )  @xcite .",
    "one can define a _ network protection code _ npc which protects @xmath9 edge disjoint paths as shown in the systematic matrix @xmath16 in eq .",
    "( [ eq : gmultiple ] ) . in general",
    ", the systematic matrix @xmath16 defines the source nodes that will send encoded messages and source nodes that will send only plain message without encoding . in order to protect @xmath9 working paths",
    ", @xmath17 connections must carry plain data , and @xmath18 connections must carry encoded data .",
    "the generator matrix of the npc for multiple link failures is given by :    @xmath19\\!,\\!\\!\\!\\!\\end{aligned}\\ ] ]    where @xmath20 , and @xmath21 , see  @xcite .",
    "the matrix @xmath16 can be rewritten as @xmath22,\\end{aligned}\\ ] ] where @xmath23 is the identity matrix and @xmath24 is the sub - matrix that defines the redundant data @xmath25 to be sent to a set of sources for the purpose of protection from multiple link failures , @xmath26 .",
    "the matrix @xmath16 is defined explicitly using maximum distance separable ( mds ) optimal codes such as reed - solomon ( rs ) codes  @xcite .",
    "based on the above matrix , every source @xmath27 sends its own message @xmath28 to the receiver @xmath29 via the link @xmath14 .",
    "in addition , @xmath18 edge disjoint paths out of the @xmath9 edge disjoint paths will carry encoded data .",
    "[ defn : mfailurescode ] an @xmath30_q$ ] _ network protection code _ ( npc ) is a k - t dimensional subspace of the space @xmath31 that is able to recover from @xmath18 edge disjoint path failures .",
    "the code protects @xmath9 working paths and is defined by the matrix @xmath16 described in eq .",
    "[ eq : gmultiple ] .",
    "we say that a network protection code ( npc ) is feasible / valid on a graph @xmath16 if the encoding and decoding operations can be achieved over the binary field @xmath32 or a finite field with @xmath33 elements @xmath34  @xcite . also , we ensure that the set of senders ( receivers ) are connected with each other .",
    "we define the feasibility conditions of npc , and we will look for graphs that satisfy these conditions    [ def : npcfeasible ] let @xmath4 and @xmath5 be sets of source(s ) and receiver(s ) in a graph @xmath16 , as shown in fig .  [",
    "fig : npaths ] .",
    "we say that the network protection code ( npc ) is feasible ( valid ) for @xmath9 edge disjoint connections ( paths ) from @xmath27 in @xmath4 to @xmath29 in @xmath5 , for @xmath35 , if    between any two sources @xmath27 and @xmath36 in @xmath4 , there is a walk ( path ) @xmath37 .",
    "this means that the nodes in @xmath4 share a tree ;    between any two receivers @xmath29 and @xmath38 in @xmath5 , there is a walk ( path ) @xmath39 .",
    "this means that the nodes in @xmath5 share a tree ;    there are k edge disjoint paths from @xmath4 to @xmath5 , and the pairs @xmath40 are different edge disjoint paths for all @xmath41 .",
    "therefore , we say the graph @xmath16 is valid for npc deployment .    by definition",
    "[ def : npcfeasible ] , there are @xmath9 edge disjoint paths in the graph from a set of @xmath9 senders to a set of @xmath9 receivers .",
    "this also includes the case in which a single source sends @xmath9 different messages through @xmath9 edge disjoint paths to @xmath9 receivers , and vice versa .",
    "the feasibility of npc guarantees that the encoding operations at the senders and decoding operations at the receivers can be achieved precisely .      the max edge - disjoint paths ( edp ) problem can be defined as follows .",
    "let @xmath42 be an undirected graph represented by a set of nodes ( network switches , routers , hosts , etc . ) , and a set of edges ( network links , hops , single connection , etc . ) .",
    "assume all edges have the same unit distance , and they are alike regarding the type of connection that they represent .",
    "a path from a source node @xmath43 to a destination node @xmath44 in @xmath45 is represented by a set of edges in @xmath3 . put differently , @xmath46",
    "* problem 1 . * given @xmath9 senders and @xmath9 receivers .",
    "we can define a commodity problem , aka , @xmath9 edge disjoint paths as follows . given a network with a set of nodes @xmath45 , and a set of links @xmath3 , provision the edge disjoint paths to guarantee the encoding and decoding operations of npc .",
    "provision the @xmath9 edge disjoint paths in @xmath16 .",
    "let @xmath47 be a set of commodities .",
    "the set of sources @xmath48 are connected with each other , and the set of receivers @xmath49 are also connected with each other as shown in definition  [ def : npcfeasible ] .",
    "the set @xmath7 is realizable in @xmath16 if there exists mutually edge - disjoint paths from @xmath27 to @xmath29 for all @xmath50 .",
    "finding the set @xmath7 in a given arbitrary graph @xmath16 is an np - complete problem as it is similar to edge - disjoint menger s problem and unsplittable flow  @xcite .",
    "* problem 2 . * given positive integers @xmath51 and @xmath9 , and an npc with @xmath9 working paths , find a @xmath9-connected n - vertex graph @xmath16 having the smallest possible number of edges .",
    "this graph by construction must have @xmath9 edge disjoint paths and represents a network which satisfies npc .",
    "this problem will be addressed in section  [ sec : graphconstruction ] .",
    "one might ask what the minimum number of edges on a graph is , in which network protection codes ( npc ) is feasible / valid as stated in definition  [ def : npcfeasible ] . we will answer this question in two cases : ( i ) the set of sources and receivers are predetermined ( preselected from the network nodes ) , ( ii ) the sources and receivers are chosen arbitrarily .",
    "we consider the case of a single source and multiple receivers in an arbitrary graph with @xmath51 nodes .",
    "let @xmath16 be a connected graph representing a network with @xmath51 total nodes , among them a single source node and @xmath9 receiver nodes .",
    "assume a npc from the source node to the multiple receivers is applied .",
    "then , the minimum number of edges required to construct the graph @xmath16 is given by @xmath52    the graph @xmath16 contains a single source , @xmath9 receiver nodes , and @xmath53 relay nodes ( nodes that are not sources or receivers ) . to apply npc , we must have @xmath9 edge disjoint paths from the source to the @xmath9 receivers .",
    "also , all receivers must be connected by a tree with a minimum of @xmath54 edges .",
    "the remaining @xmath53 relay nodes in g can be connected with at least @xmath53 edges .",
    "therefore , the minimum number of nodes required to construct the graph g is given by @xmath55      let @xmath16 be a connected graph with @xmath51 nodes , and predetermined @xmath9 sources and @xmath9 receivers .",
    "then , the minimum number of edges required for predetermined @xmath9 edge - disjoint paths for a feasible npc solution on g is given by @xmath56    we proceed the proof by constructing the graph @xmath16 with a total number of nodes @xmath51 and @xmath9 sources ( receivers ) .",
    "there are @xmath9 sources that require a @xmath54 edges represented by a tree .",
    "there are @xmath9 receivers that require a @xmath54 edges represented by a tree .",
    "assume every source node @xmath27 is connected with a receiver node @xmath29 has an @xmath57 nodes in between for all @xmath41 .",
    "therefore , there are @xmath58 edges in every edge - disjoint path , and hence the number of edges from the sources to receivers is given by @xmath59 .",
    "assume an arbitrary node @xmath43 exists in the graph @xmath16 , then this node can be connected to a source ( receiver ) node or to another relay node . in either case , one edge is required to connect this node @xmath43 to at least one node in @xmath16 .",
    "hence , the number of edges required for all other relay nodes is given by @xmath60 .",
    "therefore , the total number of edges is given by @xmath61    in the previous lemma , we assume that the @xmath9 sources and @xmath9 receivers can be predetermined to minimize the number of edges on @xmath16 . in lemma  [ lem : minedgesk ] , we assume that the sources and receivers can be chosen arbitrarily among the @xmath51 nodes of @xmath16 .",
    "[ lem : minedgesk ] let @xmath42 be a connected graph with @xmath51 nodes , and arbitrarily chosen @xmath9 sources and @xmath9 receivers .",
    "then , the minimum number of edges required for any @xmath9 edge - disjoint paths for a feasible npc solution on @xmath16 is given by @xmath62    in general , assume there are @xmath9 connection paths , and the source and destination nodes do not share direct connections .",
    "in this case , every source node @xmath27 in @xmath45 must be connected to some relay nodes which are not receivers ( destinations ) .",
    "therefore , every source node must have a node degree of @xmath63 .",
    "this agrement is also valid for any receiver node @xmath29 in @xmath45 .",
    "if we consider all @xmath64 nodes in the graph @xmath16 , hence the total minimum number of edges @xmath3 must be : @xmath65 the ceiling value comes from the fact that both @xmath51 and @xmath63 should not be odd .",
    "in this section , we look for certain graphs where npc is feasible according to definition  [ def : npcfeasible ] .",
    "we will consider two cases : single source single receiver and single source multiple receivers .",
    "we derive bounds on the cases of @xmath66 and @xmath67 connectivity in a @xmath9-connected graph @xmath16 , the definitions are states in the appendix section .",
    "whitney  ( * ? ? ?",
    "* theorem 5.3.6 ) showed that the @xmath9-connected graph must have @xmath9 edge disjoint paths between any two pair of nodes as shown in the following theorem .",
    "[ th : whitneytheorem ] a nontrivial graph @xmath16 is @xmath9-connected if and only if for each pair @xmath68 of vertices , there are at least @xmath9 internally edge disjoint @xmath69 paths in @xmath16 .    theorem  [ th : whitneytheorem ] establishes conditions for @xmath9 edge disjoint paths in a @xmath9-connected graph @xmath16 . in order to make npc feasible in a k - connected graph @xmath16 ,",
    "we require more two conditions according to definition  [ def : npcfeasible ] : all receivers are connected with each others , as well as all source(s ) are connected with each other .",
    "[ lem : kconnectednpcfeasible ] let @xmath16 be a non - trivial graph with a source node @xmath70 and a receiver node @xmath71 .",
    "then , the npc has a feasible solution with at least @xmath9 edge disjoint paths * if and only if * @xmath16 is a @xmath9-edge connected graph .",
    "first , we know that if @xmath16 is @xmath9-edge connected , then for each pair @xmath70 and @xmath71 of vertices , the degree of each node must be at least @xmath9 .",
    "if not , then removing any number of edges less than @xmath9 will disconnect the graph , and this contradicts the k - edge connectivity assumption .",
    "each node connected with @xmath70 will be a starting path to @xmath71 or to another node in the graph .",
    "consequently , every node must have a degree of at least @xmath9 , and must have a path to @xmath71 .",
    "therefore , there are at least @xmath9 internally edge disjoint @xmath72 paths in @xmath16 .",
    "hence , npc is feasible by considering at least @xmath9 edge disjoint paths .",
    "assume that npc has a feasible(valid ) solution for @xmath73 , then there must exist @xmath73 edge disjoint paths in @xmath16 .",
    "then , for each pair of vertices @xmath70 and @xmath71 , there are at least @xmath9 internally edge disjoint paths such that @xmath74 , for each @xmath70 and @xmath71 non - adjacent nodes .",
    "therefore , the graph @xmath16 is @xmath9-connected .",
    "let @xmath70 be a source in the network model @xmath0 that sends @xmath9 different data stream to @xmath9 receivers denoted by @xmath5 .",
    "we need to infer conditions for all @xmath5 receivers to be connected with each other , and there are @xmath9 edge disjoint paths from @xmath70 to @xmath5 . in this case , npc will be feasible in the abstract graph @xmath16 representing the network @xmath0 .",
    "[ lem:1smultipler ] let @xmath16 be a @xmath9-edge connected graph with a hamiltonian cycle , and @xmath75 be any @xmath76 distinct nodes in @xmath16 .",
    "then ,    there is a path @xmath14 from @xmath70 to @xmath29 , for @xmath50 , such that the collection @xmath77 are internally edge disjoint paths ,    the nodes in the set @xmath5 are connected with each other .    therefore , npc is feasible in the graph @xmath16 .",
    "the second condition ensures that there exists a tree in the graph @xmath16 which connects all nodes in @xmath5 without repeating edges from the @xmath9 edge disjoint paths from @xmath70 to @xmath5 .",
    "we look to establish conditions on regular graphs where it is possible to apply npc according to definition  [ def : npcfeasible ] .",
    "let @xmath16 be a regular graph with minimum degree @xmath9 .",
    "then @xmath16 has a @xmath9 edge disjoint paths if and only if the min - cut separating a source from a sink is of at least @xmath9 .    as shown in fig .",
    "[ fig : regulargnpc ] , the degree of each node is three and the min",
    ". cut separating the source node @xmath70 from the receivers @xmath5 is also three .",
    "however , we have the following negative result about npc feasibility in regular graphs",
    ".    there are regular graphs with node degree k , in which npc is not feasible .    a certain example to prove this lemma would be a graph of @xmath78 nodes , each of degree three , separated into two equally components connected with an edge , see fig .  [ fig : regulargnpc ] .     to receiver ndoes @xmath79 and @xmath80",
    "the receivers do not share a tree after removing the node @xmath70 . ]",
    "we will construct graphs with a minimum number of edges for given certain number of vertices @xmath51 and edge disjoint paths ( connections ) @xmath9 , in which npc can be deployed .",
    "let @xmath81 denote the minimum number of edges that a @xmath9-connected graph on @xmath51 vertices must have .",
    "it is shown by f. harary in 1962 that one can construct a @xmath9-connected graph @xmath82 on @xmath83 vertices that has exactly @xmath84 edges for @xmath85 .",
    "the construction begins with an @xmath51-cycle graph , whose vertices @xmath2 are consecutively numbered @xmath86 clockwise .",
    "the proof of the following lemma is shown in  ( * ? ? ?",
    "* proposition 5.2.5 . ) .",
    "let @xmath16 be a @xmath9-connected graph with @xmath51 nodes .",
    "then , the number of edges in @xmath16 is at least @xmath87 .",
    "that is , @xmath88 .",
    "* begin : * scatter the @xmath51 isolated nodes let @xmath89 .",
    "the construction of @xmath90 harary graph .",
    "+    from algorithm  [ alg : hararynpc ] , one can ensure that there are @xmath9 edge disjoint paths between any two nodes ( one is sender and one is receiver ) . in addition , there are @xmath9 edge disjoint paths from any node , which acts as a source , and @xmath9 different nodes , which act as receivers .",
    "all nodes are connected together with a loop .",
    "therefore , npc can be deployed to such graphs .",
    "due to the fact that harary s graph is @xmath9-connected  ( * ? ? ?",
    "* theorem 5.2.6 . ) , then using our previous result , we can deduce that npc is feasible for such graphs .",
    "harary s graphs are optimal for the npc construction in the sense that they are @xmath9-edge connected graphs with the fewest possible number of edges .",
    "in this paper , we proposed graph topologies for network protection using network coding .",
    "we derived bounds on the minimum number of edges and showed a method to construct optimal network graphs .",
    "_ network protection is much easier than human protection against failures .",
    "s.  a.  a. _    11    s.  a. aly and a.  e. kamal .",
    "network protection codes against link failures using network coding . in _ proc .",
    "ieee globelcomm 08 , new orleans , la _ , december 1 - 4 , 2008 .",
    "arxiv:0809.1258v1 [ cs.it ] .    s.  a. aly and a.  e. kamal .",
    "network protection codes : providing self - healing in autonomic networks using network coding . , submitted , 2009 .",
    "arxiv:0812.0972v1 [ cs.ni ] .",
    "m.  blesa and c.  blum .",
    "ant colony optimization from the maximum edge - disjoint paths problem .",
    ", pages 160169 , 2004 .    c.  fragouli and e.  soljanin . . ,",
    "2(2):135269 , 2007 .",
    "j.  gross and j.  yellen . .",
    "crs press , 1999 .",
    "w.  c. huffman and v.  pless . .",
    "cambridge university press , cambridge , 2003 .",
    "macwilliams and n.j.a .",
    "amsterdam : north - holland , 1977 .",
    "j.  vygen .",
    "-completeness of some edge - disjoint paths problems .",
    ", 61:8390 , 1995 .",
    "r.  w. yeung , s .- y .",
    "r. li , n.  cai , and z.  zhang . .",
    "now publishers inc . ,",
    "dordrecth , the netherlands , 2006 .    h.  zeng and a.  vukovic .",
    "the variant cycle - cover problem in fault detection and localization for mesh all - optical networks .",
    ", 14:111122 , 2007 .",
    "h.  zhang , k.  zhu , and b.  mukkerjee .",
    "backup reprovisioning to remedy the effect of multiple link failures in wdm mesh networks . , 24:5767 , august 2006 .",
    "we assume that all graphs stated in this paper are undirected ( bi - directional edges ) unless stated otherwise .",
    "we define the edge - connectivity and node - connectivity of a graph @xmath16 as follows .",
    "given an undirected connected graph @xmath16 , an edge - cut in a graph @xmath16 is a set of edges such that its removal disconnects the graph .",
    "a node - cut in @xmath16 is a set of nodes such that its removal disconnects the graph .",
    "the edge - connectivity of a connected graph @xmath16 , denoted @xmath66 is the size of a smallest edge - cut . also , the node - connectivity of a connected graph @xmath16 , denoted @xmath67 is the minimum number of vertices whose removal can either disconnect the graph @xmath16 or reduce it to a one - node graph .",
    "the connectivity measures @xmath67 and @xmath66 are used in a quantified model of network survivability , which is the capacity of a network to retain connections among its nodes after some edges or nodes are removed .",
    "a graph @xmath16 is k - node connected if @xmath16 is connected and @xmath91 .",
    "also , a graph @xmath16 is @xmath9-edge connected if @xmath16 is connected and every edge - cut has at least @xmath9 edges , @xmath92 .",
    "we define two internal connections ( paths ) between nodes @xmath43 and @xmath44 in a graph @xmath16 to be internally edge disjoint if they have no edge in common .",
    "this is also different from the node disjoint paths . throughout this paper ,",
    "a path @xmath69 from a starting node @xmath43 to an ending node @xmath44 is a walk in a graph @xmath16  @xcite , i.e. , it does not contain the same node or edge twice ."
  ],
  "abstract_text": [
    "<S> link and node failures are two common fundamental problems that affect operational networks . </S>",
    "<S> protection of communication networks against such failures is essential for maintaining network reliability and performance . </S>",
    "<S> network protection codes ( npc ) are proposed to protect operational networks against link and node failures . furthermore , encoding and decoding operations of such codes are well developed over binary and finite fields . finding network topologies , practical scenarios , and limits on graphs applicable for npc are of interest . in this paper , we establish limits on network protection design . </S>",
    "<S> we investigate several network graphs where npc can be deployed using network coding . </S>",
    "<S> furthermore , we construct graphs with minimum number of edges suitable for network protection codes deployment . </S>"
  ]
}