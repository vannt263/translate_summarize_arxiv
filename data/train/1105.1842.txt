{
  "article_text": [
    "* background : * property testing is concerned with the task of deciding whether an object given as an oracle has ( or is close to having ) some expected property .",
    "many properties including algebraic function properties , graph properties , computational geometry properties and regular languages have been proved to be efficiently testable .",
    "we refer to , for example , refs .",
    "@xcite for surveys on property testing . in this paper",
    ", we focus on property testing of group - theoretic properties .",
    "an example is testing whether a function @xmath11 , where @xmath12 and @xmath13 are groups , is a homomorphism .",
    "it is well known that such a test can be done efficiently  @xcite .",
    "another kind of group - theoretic problems deals with the case where the input consists of both a finite set @xmath1 and a binary operation @xmath14 over it given as an oracle .",
    "an algorithm testing associativity of the oracle in time @xmath15 has been constructed by rajagopalan and schulman  @xcite , improving the straightforward @xmath16-time algorithm .",
    "they also showed that @xmath17 queries are necessary for this task .",
    "ergn et al .",
    "@xcite have proposed an algorithm using @xmath18 queries testing if @xmath2 is _ close to _ associative , and an algorithm using @xmath19 queries testing if @xmath0 is close to being both associative and cancellative ( i.e. , close to the operation of a group ) .",
    "they also showed how these results can be used to check whether the input @xmath0 is close to an abelian group with @xmath19 queries .",
    "the notion of closeness discussed in ergn et al.s work refer to the hamming distance of multiplication tables , i.e. , the number of entries in the multiplication table of @xmath0 that have to be modified to obtain a binary operation satisfying the prescribed property .",
    "friedl et al .",
    "@xcite have shown that , when considering closeness with respect to the edit distance of multiplication tables instead of the hamming distance ( i.e. , by allowing deletion and insertion of rows and columns ) , there exists an algorithm with query and time complexities polynomial in @xmath20 that tests whether @xmath0 is close to an _",
    "abelian group_. an open question is to understand for which other classes of groups such a test can be done efficiently and , on the other hand , if nontrivial lower bounds can be proved for specific classes of groups .",
    "notice that the algorithm in ref .",
    "@xcite has been obtained by first constructing a simple _ quantum algorithm _ that tests in @xmath3 time if an input @xmath0 is close to an abelian group ( based on a quantum algorithm by cheung and mosca  @xcite computing efficiently the decomposition of a black - box abelian group on a quantum computer ) , and then replacing the quantum part by clever classical tests .",
    "one can find this surprising since , classically , computing the decomposition of a black - box abelian group is known to be hard @xcite .",
    "this indicates that , in some cases , new ideas in classical property testing can be derived from a study of quantum testers .",
    "one can naturally wonder if all efficient quantum algorithms testing closeness to a given class of groups can be converted into efficient classical testers in a similar way .",
    "this question is especially motivated by the fact that inui and le gall  @xcite have constructed a quantum algorithm with query complexity polynomial in @xmath20 that tests whether @xmath0 is close to a _",
    "solvable group _ ( note that the class of solvable groups includes all abelian groups ) , and that their techniques can also be used to test efficiently closeness to several _ subclasses of abelian groups _ on a quantum computer , as discussed later .    * our contributions : * in this paper we investigate these questions by focusing on subclasses of abelian groups .",
    "we show lower and upper bounds on the randomized ( i.e. , non - quantum ) query complexity of testing if the input is close to a cyclic group , and more generally on the randomized query complexity of testing if the input is close to an abelian group generated by @xmath7 elements ( i.e. , the class of groups of the form @xmath21 where @xmath22 and @xmath23 are positive integers ) , for any fixed @xmath8 and for both the edit distance and the hamming distance .",
    "we prove in particular that their complexities vary dramatically according to the value of @xmath7 and according to the assumption that the size of @xmath1 is known or not .",
    "table  [ table : chart ] gives an overview of our results .",
    ".lower and upper bounds on the randomized query complexity of testing if @xmath0 is close to specific classes of groups . here",
    "@xmath24 denotes the distance parameter , see section [ section : preliminaries ] for details . [",
    "cols=\"<,<,<,<\",options=\"header \" , ]     our results show that , with respect to the edit distance , testing closeness to subclasses of abelian groups generally requires exponentially more queries than testing closeness to the whole class of abelian groups .",
    "we believe that this puts in perspective friedl et al.s work  @xcite and indicates both the strength and the limitations of their results .",
    "the lower bounds we give in theorems  [ theorem : unknown - lowerbound - cyclic ] and  [ theorem : lowerbound - k ] also prove the first exponential separations between the quantum and randomized query complexities of testing closeness to a class of groups . indeed , the same arguments as in ref .",
    "@xcite easily show that , when the edit distance is considered , testing if the input is close to an abelian group generated by @xmath7 elements can be done using @xmath25 queries on a quantum computer , for any value of @xmath7 and even if @xmath26 is unknown . while this refutes the possibility that all efficient quantum algorithms testing closeness to a given class of groups can be converted into efficient classical testers ,",
    "this also exhibits a new set of computational problems for which quantum computation can be shown to be strictly more efficient than classical computation .",
    "* relation with other works : * while ivanyos  @xcite gave heuristic arguments indicating that testing closeness to a group may be hard in general , we are not aware of any ( nontrivial ) proven lower bounds on the query complexity of testing closeness to a group - theoretic property prior to the present work . notice that a few strong lower bounds are known for related computational problems , but in different settings .",
    "babai  @xcite and babai and szemerdi  @xcite showed that computing the order of an elementary abelian group in the black - box setting requires exponential time  this task is indeed one of the sometimes called `` abelian obstacles '' to efficient computation in black - box groups .",
    "cleve  @xcite also showed strong lower bounds on the query complexity of order finding ( in a model based on hidden permutations rather than on an explicit group - theoretic structure ) .",
    "these results are deeply connected to the subject of the present paper and inspired some of our investigations , but do not give bounds in the property testing setting .",
    "the proof techniques we introduce in the present paper are indeed especially tailored for this setting .",
    "* organization of the paper and short description of our techniques : * section  [ sec : unknown ] deals with the case where @xmath26 is unknown .",
    "our lower bound on the complexity of testing closeness to a cyclic group ( theorem  [ theorem : unknown - lowerbound - cyclic ] ) is proven in a way that can informally be described as follows .",
    "we introduce two distributions of inputs : one consisting of cyclic groups of the form @xmath27 , and another consisting of groups of the form  @xmath28 , where @xmath29 is an unknown prime number chosen in a large enough set of primes .",
    "we observe that each group in the latter distribution is far with respect to the edit distance ( and thus with respect to the hamming distance too ) from any cyclic group .",
    "we then prove that a deterministic algorithm with @xmath30 queries can not distinguish those distributions with high probability .",
    "section  [ sec : generator ] focuses on testing closeness to the class of groups generated by @xmath31 elements , and proves theorem  [ theorem : lowerbound - k ] in a similar way .",
    "for example , when @xmath31 is a fixed odd integer , we introduce two distributions consisting of groups isomorphic to @xmath32 and to @xmath33 , respectively .",
    "notice that @xmath34 and @xmath35 have the same size . while @xmath34 is generated by @xmath7 elements , we observe that @xmath35 is far from any group generated by @xmath7 elements .",
    "we then show that any deterministic algorithm with @xmath36 queries can not distinguish those distributions with high probability , even if @xmath29 ( and thus @xmath26 ) is known .",
    "section  [ section : orderknown - cyclic ] is devoted to constructing an efficient tester for testing closeness to cyclic groups when the size @xmath26 of the ground set is known .",
    "the idea behind the tester we propose is that , when the size @xmath26 of the ground set is given , we know that if @xmath0 is a cyclic group , then it is isomorphic to the group @xmath37 . we then take a random element @xmath38 of @xmath1 and define the map @xmath39 by @xmath40 for any @xmath41 ( here the powers are defined carefully to take into consideration the case where the operation @xmath2 is not associative ) .",
    "if @xmath0 is a cyclic group , then @xmath38 is a generating element with non negligible probability , in which case the map @xmath42 will be a group isomorphism .",
    "our algorithm will first test if the map @xmath42 is close to a homomorphism , and then perform additional tests to check that @xmath42 behaves correctly on any proper subgroup of @xmath37 .",
    "let @xmath1 be a finite set and @xmath43 be a binary operation on it .",
    "such a couple @xmath0 is called a magma .",
    "we first define the hamming distance between two magmas over the same ground set .",
    "let @xmath0 and @xmath44 be two magmas over the same ground set @xmath1 .",
    "the hamming distance between @xmath2 and @xmath45 , denoted @xmath46 , is @xmath47    we now define the edit distance between tables .",
    "a table of size @xmath7 is a function @xmath48 from @xmath49 where @xmath50 is an arbitrary subset of @xmath51 ( the set of natural numbers ) of size @xmath7 .",
    "we consider three operations to transform a table to another .",
    "an exchange operation replaces , for two elements @xmath52 , the value @xmath53 by an arbitrary element of @xmath51 .",
    "its cost is one .",
    "an insert operation on @xmath48 adds a new element @xmath54 : the new table is the extension of @xmath48 to the domain @xmath55 , giving a table of size @xmath56 where the @xmath57 new values of the function are set arbitrarily .",
    "its cost is @xmath57 .",
    "a delete operation on @xmath48 removes an element @xmath58 : the new table is the restriction of @xmath48 to the domain @xmath59 , giving a table of size @xmath60 .",
    "its cost is @xmath61 .",
    "the edit distance between two tables @xmath48 and @xmath62 is the minimum cost needed to transform @xmath48 to @xmath62 by the above exchange , insert and delete operations .    a multiplication table for a magma @xmath0 is a table @xmath63 of size @xmath64 for which the values are in one - to - one correspondence with elements in @xmath1 , i.e. ,  there exists a bijection @xmath65 such that @xmath66 for any @xmath52 .",
    "we now define the edit distance between two magmas , which will enable us to compare magmas with distinct grounds sets , and especially magmas with ground sets of different sizes .",
    "this is the same definition as the one used in ref .",
    "@xcite .",
    "the edit distance between two magmas @xmath0 and @xmath67 , denoted @xmath68 , is the minimum edit distance between @xmath48 and @xmath62 where @xmath48 ( resp .",
    "@xmath62 ) runs over all tables corresponding to a multiplication table for @xmath0 ( resp .",
    "@xmath67 ) .",
    "we now explain the concept of distance to a class of groups .",
    "let @xmath69 be a class of groups and @xmath0 be a magma .",
    "we say that @xmath0 is @xmath70-far from @xmath69 with respect to the hamming distance if @xmath71    we say that @xmath0 is @xmath70-far from @xmath69 with respect to the edit distance if @xmath72    notice that if a magma @xmath0 is @xmath70-far from a class of groups @xmath69 with respect to the edit distance , then @xmath0 is @xmath70-far from @xmath69 with respect to hamming distance .",
    "the converse is obviously false in general .",
    "since some of our results assume that the size of @xmath1 is not known , we can not suppose that the set @xmath1 is given explicitly .",
    "instead we suppose that an upper bound @xmath73 of the size of @xmath1 is given , and that each element in @xmath1 is represented uniquely by a binary string of length @xmath74 .",
    "one oracle is available that generates a string representing a random element of @xmath1 , and another oracle is available that computes a string representing the product of two elements of @xmath1 .",
    "we call this representation a binary structure for @xmath0 .",
    "this is essentially the same model as the one used in ref .",
    "@xcite and in the black - box group literature ( see , e.g. , ref .",
    "@xcite ) . the formal definition follows .",
    "a binary structure for a magma @xmath0 is a triple @xmath75 such that @xmath73 is an integer satisfying @xmath76 , and @xmath77 are two oracles satisfying the following conditions :    * there exists an injective map @xmath78 from @xmath1 to @xmath79 ; * the oracle @xmath80 chooses an element @xmath81 uniformly at random and outputs the ( unique ) string @xmath82 such that @xmath83 . * on two strings @xmath84 in the set @xmath85 , the oracle @xmath86 takes the ( unique ) element @xmath81 such that @xmath87 and outputs @xmath88 .",
    "( the action of @xmath86 on strings in @xmath89 is arbitrary . )",
    "we now give the formal definition of an @xmath24-tester .",
    "let @xmath69 be a class of groups and let @xmath24 be any value such that @xmath90 .",
    "an @xmath24-tester with respect to the edit distance ( resp . ,  to the hamming distance ) for @xmath69 is a randomized algorithm @xmath91 such that , on any binary structure for a magma @xmath0 ,    * @xmath91 outputs  pass \" with probability at least @xmath92 if @xmath0 satisfies property @xmath69 ; * @xmath91 outputs  fail \" with probability at least @xmath92 if @xmath0 is @xmath24-far from @xmath69 with respect to the edit distance ( resp . ,  to the hamming distance ) .",
    "suppose that we only know that an input instance @xmath0 satisfies @xmath93 , where @xmath73 is an integer known beforehand . in this section , we show that any randomized algorithm then requires @xmath94 queries to test whether @xmath0 is close to the class of cyclic groups .",
    "more precisely , we prove the following result .    [",
    "theorem : unknown - lowerbound - cyclic ] suppose that the size of the ground set is unknown and suppose that @xmath95 .",
    "then the query complexity of any @xmath24-tester for the class of cyclic groups , with respect to the hamming distance or the edit distance , is @xmath96 .",
    "theorem [ theorem : unknown - lowerbound - cyclic ] is proved using yao s minimax principle .",
    "specifically , we introduce two distributions of instances @xmath97 and @xmath98 such that every instance in @xmath97 is a cyclic group and every instance in @xmath98 is far from the class of cyclic groups . then we construct the input distribution @xmath99 as the distribution that takes an instance from @xmath100 with probability @xmath101 and from @xmath102 with probability @xmath101 . if we can show that any deterministic algorithm , given @xmath99 as an input distribution , requires @xmath94 queries to correctly decide whether an input instance is generated by @xmath100 or @xmath102 with high probability under the input distribution , we conclude that any randomized algorithm also requires @xmath94 queries to test whether an input is close to a cyclic group .",
    "we now explain in details the construction of the distribution @xmath99 .",
    "define @xmath103 and let @xmath104 be the set of primes in @xmath105 . from the prime number theorem , we have @xmath106 .",
    "we define @xmath100 as the distribution over binary structures @xmath75 for @xmath27 where the prime @xmath29 is chosen uniformly at random from @xmath104 and the injective map @xmath107 hidden behind the oracles is also chosen uniformly at random .",
    "we define @xmath102 as a distribution over binary structures for @xmath108 in the same manner .",
    "indeed , the order of any instance generated by those distributions is at most @xmath73 .",
    "every instance in @xmath100 is a cyclic group .",
    "from lemma  [ lemma : ivanyos ] below , we know that every instance in @xmath102 is @xmath109-far ( with respect to the edit distance , and thus with respect to the hamming distance too ) from the class of cyclic groups . its proof is included in appendix .",
    "[ lemma : ivanyos ] let @xmath110 and @xmath111 be two nonisomorphic groups .",
    "then @xmath112    in order to complete the proof of theorem [ theorem : unknown - lowerbound - cyclic ] , it only remains to show that distinguishing the two distributions @xmath100 and @xmath102 is hard .",
    "this is the purpose of the following proposition .",
    "[ proposition : hardness ] any deterministic algorithm that decides with probability larger than @xmath92 whether the input is from the distribution @xmath100 or from the distribution @xmath102 must use @xmath94 queries .",
    "let us first give a very brief overview of the proof of proposition [ proposition : hardness ] .",
    "we begin by showing how the distributions @xmath100 and @xmath102 described above can equivalently be created by first taking a random sequence @xmath113 of strings , and then using some constructions @xmath114 and @xmath115 , respectively , which are much easier to deal with . in particular , the map @xmath78 in the constructions @xmath114 and @xmath115 is created `` on the fly '' during the computation using the concept of a reduced decision tree .",
    "we then show ( in lemma [ proposition : hardness - simple ] ) a @xmath94-query lower bound for distinguishing @xmath114 and  @xmath115 .",
    "let @xmath91 be a deterministic algorithm with query complexity  @xmath116 .",
    "we suppose that @xmath117 , otherwise there is nothing to do .",
    "the algorithm  @xmath91 can be seen as a decision tree of depth @xmath116 .",
    "each internal node in the decision tree corresponds to a query to either @xmath80 or @xmath86 , and each edge from such a node corresponds to an answer for it .",
    "the queries to @xmath86 are labelled as @xmath118 , for elements @xmath119 and @xmath120 in @xmath121 .",
    "each answer of a query is a binary string in @xmath122 .",
    "each leaf of the decision tree represents a yes or no decision ( deciding whether the input is from @xmath100 or from @xmath102 , respectively ) .",
    "since we want to prove a lower bound on the query complexity of @xmath91 , we can make freely a modification that gives a higher success probability on all inputs ( and thus makes the algorithm @xmath91 more powerful ) .",
    "we then suppose that , when @xmath91 goes through an edge corresponding to a string already seen during the computation , then @xmath91 immediately stops and outputs the correct answer . with this modification",
    ", @xmath91 reaches a leaf if and only if it did not see the same string twice .",
    "we refer to figure  [ fig : dt](a ) for an illustration .",
    "we first consider the slightly simpler case where the algorithm @xmath91 only uses strings obtained from previous oracle calls as the argument of a query to @xmath86 . in other words , we suppose that , whenever an internal node @xmath123 labelled by @xmath118 is reached , then both @xmath119 and @xmath120 necessarily label some edge in the path from the root of the tree to @xmath123 ( notice that this is the case for the algorithm of figure  [ fig : dt](a ) ) .",
    "we will discuss at the end of the proof how to deal with the general case where @xmath91 can also query @xmath86 on strings created by itself ( e.g. , on the all zero string or on strings taken randomly in @xmath122 ) .",
    "@xmath124{decisiongraph1 } &                \\hspace{2 mm } &       \\includegraphics[scale=1]{decisiongraph2}\\\\            { \\footnotesize \\textrm{(a ) } } & & { \\footnotesize \\textrm{(b)}}\\vspace{-5 mm } \\end{array}$ ]    let us fix a sequence @xmath125 of distinct strings in @xmath122 .",
    "starting from the root @xmath126 of the decision tree ( located at level @xmath127 ) , for each internal node located at level @xmath128 , we only keep the outgoing branches labelled by strings @xmath129 , and we call the edge corresponding to @xmath130 an _ unseen edge _",
    "( remember that @xmath131 ) .",
    "this construction gives a subtree of the decision tree rooted at @xmath126 that we call the _ reduced decision tree associated with @xmath113_. note that this subtree has exactly one leaf .",
    "see figure  [ fig : dt](b ) for an illustration .",
    "let us fix @xmath132 and let @xmath13 be either @xmath27 or @xmath133 with the group operation denoted additively .",
    "we now describe a process , invisible to the algorithm @xmath91 , which constructs , using the sequence @xmath113 , a map @xmath134 defining a binary structure @xmath75 for @xmath13 . the map @xmath78 is constructed `` on the fly '' during the computation .",
    "the algorithm starts from the root and follows the computation through the reduced decision tree associated with @xmath113 . on a node corresponding to a call to @xmath80",
    ", the oracle @xmath80 chooses a random element @xmath135 of the group .",
    "if this element has not already appeared , then @xmath88 is fixed to the string of the unseen edge of this node .",
    "the oracle @xmath80 outputs this string to the algorithm @xmath91 , while @xmath135 is kept invisible to @xmath91 .",
    "if the element @xmath135 has already appeared , then the process immediately stops  this is coherent with our convention that @xmath91 stops whenever the same string is seen twice . on a node corresponding to a call to @xmath118 , the elements @xmath135 and @xmath136 such that @xmath137 and @xmath138 have necessarily been already obtained at a previous step from our assumption .",
    "if the element  @xmath139 has not already appeared , then @xmath140 is fixed to the string of the unseen edge of this node .",
    "otherwise the process stops . by repeating this , the part of the map @xmath78 related to the computation ( i.e. , the correspondence between elements and strings for all the elements appearing in the computation ) is completely defined by @xmath113 and by the elements chosen by the oracle @xmath80 .",
    "if necessary , the map @xmath78 can then be completed . on the example of figure  [ fig : dt](b ) , if the input is @xmath141 and @xmath80 chooses the element 3 , then the path followed is the path starting from the root labelled by @xmath142 which defines @xmath143 , @xmath144 , and @xmath145 .    for a fixed sequence @xmath113 ,",
    "let @xmath146 ( resp .",
    "@xmath115 ) be the `` on the fly '' construction for @xmath27 ( resp .",
    "@xmath133 ) obtained by first choosing @xmath29 uniformly at random from @xmath104 , and then defining @xmath78 while running the algorithm , as detailed above . the distribution @xmath100 ( resp .",
    "@xmath102 ) coincides with the distribution that takes a sequence @xmath125 of @xmath147 strings in @xmath122 uniformly at random without repetition and then create binary structures @xmath75 using @xmath146 ( resp .",
    "@xmath115 ) .",
    "thus , to prove proposition  [ proposition : hardness ] , it suffices to use the following lemma .",
    "[ proposition : hardness - simple ] let @xmath113 be any fixed sequence of @xmath147 distinct strings in @xmath122 . if @xmath91 decides correctly with probability larger than @xmath92 whether the input has been created using @xmath114 or using @xmath148 , then @xmath149 .",
    "let @xmath150 be the set of nodes in the reduced decision tree associated with @xmath113 , and let @xmath151 ( resp . ,",
    "@xmath152 ) be the set of indexes @xmath153 such that @xmath154 is a query to @xmath86 ( resp .",
    ",  to @xmath80 ) .",
    "notice that @xmath155 .",
    "for each index @xmath156 , we set @xmath157 as a random variable representing the element chosen by @xmath80 at node @xmath158 . here , @xmath159 when @xmath146 generates @xmath27 , and @xmath160 when @xmath115 generates @xmath133 .",
    "since only additions are allowed as operations on the set @xmath161 , the output to a query @xmath154 for @xmath162 can be expressed as @xmath163 where @xmath164 is a linear combination of the variables in @xmath161 . here",
    "all coefficients @xmath165 are non - negative and at least one coefficient must be positive .",
    "we define the function @xmath166 for every @xmath167 . without loss of generality , we assume that each @xmath168 is a nonzero polynomial ( i.e. , there exists at least one index @xmath169 such that @xmath170 ) .",
    "this is because , otherwise , the element ( and the string ) appearing at node @xmath154 is always the same as the element ( and the string ) appearing at node @xmath171 , and thus one of the two nodes @xmath154 and @xmath171 can be removed from the decision tree . for any positive integer @xmath172 , we say that @xmath168 is _ constantly zero modulo @xmath172 _ if @xmath172 divides @xmath173 for all indexes @xmath174 .",
    "we say that a prime @xmath132 is _ good _ if there exist @xmath167 such that the function @xmath168 is constantly zero modulo @xmath29 .",
    "we say that @xmath132 is _ bad _ if , for all @xmath167 , the function @xmath168 is not constantly zero modulo @xmath29 ( as shown later , when @xmath29 is bad , it is difficult to distinguish if the input is @xmath27 or @xmath133 ) .",
    "we denote by @xmath175 the set of good primes .",
    "we first suppose that @xmath176 .",
    "let @xmath177 denote the value @xmath178 .",
    "assume the existence of a subset @xmath179 of size @xmath180 such that there exist @xmath167 for which @xmath168 is constantly zero modulo @xmath29 for every @xmath181 .",
    "since all @xmath181 are primes , and @xmath168 is not the zero - polynomial , @xmath168 must have a nonzero coefficient divisible by @xmath182 . to create such a coefficient",
    ", we must have @xmath183 now assume that there exists no such subset @xmath184 .",
    "then , for each @xmath167 , at most @xmath177 primes @xmath29 have the property that @xmath168 is constantly zero modulo @xmath29 .",
    "this implies that @xmath185 . since @xmath186",
    ", it follows that @xmath187 .",
    "thus , for both cases , we have @xmath188 .    hereafter we suppose that @xmath189 .",
    "assume that the leaf of the reduced decision tree corresponds to a yes decision .",
    "recall that , if the computation does not reach the leaf , @xmath91 always outputs the correct answer . from these observations , we give the following upper bound on the overall success probability : @xmath190 where @xmath191 is the probability of @xmath29 being good , and @xmath192 ( resp . ,",
    "@xmath193 ) is the probability that @xmath91 does not reach the leaf conditioned on the event that the instance is from @xmath114 ( resp .",
    ", from @xmath148 ) and @xmath29 is a bad prime . since @xmath189 ,",
    "the above success probability has upper bound @xmath194 .",
    "when the leaf of the reduced decision tree corresponds to a no decision , a similar calculation gives that the overall success probability is at most @xmath195 .",
    "we now give an upper bound on @xmath192 and @xmath193 .",
    "let us fix @xmath196 .",
    "since @xmath29 is bad , each @xmath168 for @xmath167 is not constantly zero modulo @xmath29 .",
    "when @xmath146 generates @xmath27 , the probability that @xmath168 becomes @xmath197 after substituting values into @xmath161 is then exactly @xmath198 ( since the values of each @xmath157 uniformly distribute over @xmath27 and there is a unique solution in @xmath27 to the equation @xmath199 once all but one values are fixed ) . by",
    "the union bound , the probability @xmath192 thus satisfies @xmath200 .",
    "similarly , when @xmath115 generates @xmath133 , the probability that @xmath168 becomes @xmath197 after substituting values into @xmath161 is also exactly @xmath198 .",
    "thus , the probability @xmath193 also satisfies @xmath201 .    to achieve overall success probability at least @xmath92",
    ", we must have either @xmath202 or @xmath203 , and thus @xmath204 .",
    "finally , we briefly explain how to deal with the general case where @xmath91 can make binary strings by itself and use them as arguments to @xmath86 .",
    "the difference is that now a string @xmath119 not seen before can appear as an argument to @xmath86 .",
    "basically , what we need to change is the following two points : first , in the `` on the fly '' construction of @xmath78 from  @xmath113 , if such a query appears then an element @xmath135 is taken uniformly at random from the set of elements of the input group not already labelled , and the identification @xmath137 is done .",
    "second , in the proof of lemma [ proposition : hardness - simple ] , another random variable is introduced to represent the element associated with @xmath119 . with these modifications",
    "the same lower bound @xmath149 holds .",
    "this concludes the proof of proposition [ proposition : hardness ] .",
    "in this section we show that , even if the size of the ground set @xmath1 is known , it is hard to test whether @xmath0 is close to an abelian group generated by @xmath7 elements for any value @xmath205 .",
    "we prove the following theorem using a method similar to the proof of theorem  [ theorem : unknown - lowerbound - cyclic ] .",
    "see appendix for details .",
    "[ theorem : lowerbound - k ] let @xmath205 be an integer and suppose that @xmath95",
    ". then the query complexity of any @xmath24-tester for the class of abelian groups generated by @xmath7 elements is @xmath206 moreover , these bounds hold with respect to either the hamming distance or the edit distance , and even when @xmath26 is known .",
    "in this section we study the problem of testing , when @xmath26 is known , if the input @xmath0 is a cyclic group or is far from the class of cyclic groups .",
    "let us denote @xmath207 , and suppose that we also know its factorization @xmath208 where the @xmath209 s are distinct primes .",
    "let @xmath210 be the cyclic group of integers modulo @xmath172 and , for any @xmath211 , denote by @xmath212 its subgroup of order @xmath209 .",
    "the group operation in @xmath213 is denoted additively .    ' '' ''    a magma @xmath0 given as a binary structure @xmath75 the size @xmath207 and its factorization @xmath208 @xmath214 ; @xmath215 ; @xmath216 and @xmath217 @xmath218 ; take an element @xmath38 uniformly at random in @xmath1 ; repeat the following test @xmath219 times : take two elements @xmath220 uniformly at random in @xmath213 ; @xmath221 @xmath214 ; @xmath211 take two arbitrary distinct elements @xmath220 in @xmath222 ; take @xmath223 elements @xmath224 at random in @xmath213 ; there exists @xmath225 such that @xmath226 @xmath227 ; @xmath228 ; @xmath229 ;    ' '' ''    for any @xmath230 , we now define a map @xmath231 such that @xmath232 represents the @xmath233-th power of @xmath38 . since the case where @xmath2 is not associative has to be taken in consideration and since we want to evaluate efficiently @xmath42 , this map is defined using the following rules . @xmath234 the value of @xmath232 can then be computed with @xmath235 uses of the operation  @xmath2 . notice that if @xmath0 is a group , then @xmath236 for any @xmath237 .    for any @xmath238",
    ", our @xmath24-tester for cyclic groups is denoted @xmath239 and is described in figure  [ figure : cyclictest ] .",
    "the input @xmath0 is given as a binary structure @xmath75 with @xmath240 . in the description of figure  [ figure : cyclictest ] , operations in @xmath0 , such as taking a random element or computing the product of two elements , are implicitly performed by using the oracles @xmath80 and @xmath86 .",
    "the correctness of this algorithm and upper bounds on its complexity are shown in the following theorem .",
    "a proof is given in appendix .",
    "[ theorem : known - upperbound - cyclic ] for any value @xmath238 , algorithm @xmath239 is an @xmath24-tester for cyclic groups with respect to both the edit distance and the hamming distance .",
    "its query and time complexities are @xmath241",
    "the authors are grateful to gbor ivanyos for communicating to them lemma  [ lemma : ivanyos ] and an outline of its proof .",
    "part of this work was conducted while yy was visiting rutgers university .",
    "flg acknowledges support from the jsps , under the grant - in - aid for research activity start - up no .",
    "22800006 .    10 [ 1]`#1 `    babai , l. : local expansion of vertex - transitive graphs and random generation in finite groups . in : proc . of stoc 1991 .",
    "164174 ( 1991 )    babai , l. , szemerdi , e. : on the complexity of matrix group problems i. in : proc . of focs 1984 .",
    "pp . 229240 ( 1984 )",
    "bach , e. , shallit , j. : algorithmic number theory , vol . 1 : efficient algorithms .",
    "the mit press ( 1996 )    ben - or , m. , coppersmith , d. , luby , m. , rubinfeld , r. : non - abelian homomorphism testing , and distributions close to their self - convolutions . in : proc . of approx - random 2004 .",
    "lncs , vol . 3122 , pp .",
    "springer ( 2004 )    blum , m. , luby , m. , rubinfeld , r. : self - testing / correcting with applications to numerical problems .",
    "j. comput .",
    "47(3 ) , 549595 ( 1993 )    cheung , k. , mosca , m. : decomposing finite abelian groups . quantum information and computation 1(3 ) , 2632 ( 2001 )    cleve ,",
    "r. : the query complexity of order - finding .",
    "192(2 ) , 162171 ( 2004 )    czumaj , a. , sohler , c. : survey on sublinear - time algorithms .",
    "bulletin of the eatcs 89 , 2347 ( 2006 )    ergn , f. , kannan , s. , kumar , r. , rubinfeld , r. , viswanathan , m. : spot - checkers .",
    "j. comput .",
    "60(3 ) , 717751 ( 2000 )    friedl , k. , ivanyos , g. , santha , m. : efficient testing of groups . in : proc . of stoc 2005 . pp . 157166 ( 2005 )",
    "inui , y. , le gall , f. : quantum property testing of group solvability .",
    "algorithmica 59(1 ) , 3547 ( 2011 )    ivanyos , g. : classical and quantum algorithms for algebraic problems .",
    "thesis for the degree `` doctor of the hungarian academy of sciences '' ( 2007 )    ivanyos , g. : personal communication ( 2010 )    ivanyos , g. , le gall , f. , yoshida , y. : on the distance between non - isomorphic groups .",
    "preprint available at http://arxiv.org/abs/1107.0133 ( 2011 )    kiwi , m.a . , magniez , f. , santha , m. : exact and approximate testing / correcting of algebraic functions : a survey . in : proc . of stacs 2002 .",
    "lncs , vol .",
    "2292 , pp . 3083 ( 2002 )    rajagopalan , s. , schulman , l.j . : verification of identities .",
    "siam j. comput .",
    "29(4 ) , 11551163 ( 2000 )    ron , d. : property testing . in : handbook of randomized computing ,",
    "kluwer academic publishers ( 2001 )    shpilka , a. , wigderson , a. : derandomizing homomorphism testing in general groups .",
    "siam j. comput .",
    "36(4 ) , 12151230 ( 2006 )",
    "the idea of this proof has been communicated to us by ivanyos @xcite .",
    "work on other aspects of the distance between non - isomorphic groups has subsequently been the subject of a joint paper  @xcite .",
    "we will use the following lemma , which is a weak version of corollary 1 in ref .",
    "@xcite .",
    "[ lemma : ivanyos+ ] let @xmath110 and @xmath111 be two groups such that @xmath242 .",
    "if @xmath110 is not isomorphic to a subgroup of @xmath111 , then @xmath243   \\le \\frac{7}{9}|g|^2\\ ] ] for any injective map @xmath244 .",
    "suppose that @xmath247 , where @xmath248 .",
    "let @xmath249 and @xmath250 be multiplication tables of @xmath13 and @xmath12 , respectively , such that the edit distance between @xmath251 and @xmath252 is at most @xmath253 . here ,",
    "@xmath254 and @xmath255 are subsets of @xmath51 of size @xmath256 and @xmath257 , respectively .",
    "let @xmath258 and @xmath259 be the bijections associated with @xmath251 and @xmath252 , respectively .",
    "we now consider the transition from @xmath251 to @xmath252 through the process of computing the edit distance .",
    "observe that the number of removed elements through the transition is at most @xmath263 , otherwise it would cost more than @xmath264 operations .",
    "let @xmath265 be the set of elements that are not removed in the transition and define @xmath266 . from the argument above",
    ", we have @xmath267 .",
    "we define a map @xmath11 as follows . for @xmath268 , @xmath269 . for @xmath270 ,",
    "we choose @xmath271 so that @xmath271 becomes an injective map ( this is possible since @xmath245 ) .",
    "suppose that , for two elements @xmath272 , the element @xmath273 is in @xmath274 . also , suppose that the value @xmath275 was not modified in the transition , i.e. , @xmath276 .",
    "in this case , @xmath277 thus , we have @xmath278 .",
    "since the number of exchange operations done to the table @xmath251 is at most @xmath279 , by the union bound we obtain @xmath280 \\geq 1 - 3\\delta-\\delta/(1-\\delta)^2 \\geq 1 - 5\\delta.\\ ] ] thus , since @xmath281 , lemma  [ lemma : ivanyos+ ] implies that the group @xmath110 is isomorphic to a subgroup of @xmath111 . if @xmath110 is isomorphic to a proper subgroup of @xmath111 , then @xmath282 , which contradicts the fact that @xmath260 .",
    "thus , @xmath110 is indeed isomorphic to @xmath111 .      to show the lower bound",
    ", we use yao s minimax principle as in the proof of theorem  [ theorem : unknown - lowerbound - cyclic ] .",
    "we introduce two distributions @xmath100 and @xmath102 such that every instance in @xmath100 is generated by @xmath7 elements while every instance in @xmath102 is far from abelian groups generated by @xmath7 elements .",
    "moreover , all instances in @xmath100 and @xmath102 have the same order",
    ". then we construct the input distribution @xmath99 as the distribution that takes an instance from @xmath100 with probability @xmath101 and from @xmath102 with probability @xmath101 . by showing that any deterministic algorithm requires many queries to distinguish them , we obtain the desired result .",
    "we first consider the case where @xmath7 is even .",
    "let @xmath283 be a fixed integer and denote @xmath284 .",
    "for any fixed ( and known ) prime @xmath29 , we define @xmath100 as the distribution over binary structures for the group @xmath285 where the injective map @xmath78 hidden behind the group oracles is chosen uniformly at random .",
    "we define @xmath102 as the uniform distribution over binary structures for @xmath286 in the same manner .",
    "the order of every instance in @xmath100 and @xmath102 is @xmath287 .",
    "every instance in @xmath100 has @xmath288 generators while every instance in @xmath102 needs at least @xmath289 elements to be generated .",
    "moreover , from lemma  [ lemma : ivanyos ] , every instance in @xmath102 is @xmath109-far from groups of @xmath7 generators .",
    "the part of theorem  [ theorem : lowerbound - k ] for @xmath7 even then follows from the following proposition .",
    "[ proposition : k - even ] any deterministic algorithm that decides with probability larger than @xmath92 whether the input is from the distribution @xmath100 or from the distribution @xmath102 must use @xmath290 queries .",
    "let us consider the decision tree associated with a deterministic algorithm @xmath91 using @xmath116 queries .",
    "as in section [ sec : unknown ] , we rely on the fact that the distribution of instances generated by @xmath99 can be created through a more convenient `` on the fly '' construction of @xmath78 using a random sequence @xmath113 of strings . we suppose hereafter that @xmath113 is fixed and denote by @xmath114 ( resp . , @xmath148 ) the associated construction of positive ( resp . ,",
    "negative ) instances .",
    "we assume again that , when @xmath91 goes through an edge corresponding to a string already seen during the computation , then @xmath91 immediately stops and outputs the correct answer ( this modification only improves the ability of @xmath91 ) .",
    "we denote again by @xmath150 the set of nodes in the reduced decision tree associated with @xmath113 , and by @xmath151 ( resp . ,  @xmath152 ) the set of indexes  @xmath153 such that @xmath154 is a query to @xmath86 ( resp . ,  @xmath80 ) .",
    "notice that @xmath155 .",
    "for each  @xmath156 , we set @xmath157 as a random variable representing the element obtained by performing a query to @xmath80 .",
    "the answer to a query @xmath154 for @xmath162 can be expressed as @xmath163 where @xmath164 is a linear combination of the variables  @xmath161 .",
    "we define the function @xmath166 for every @xmath167 .",
    "remember that , for any positive integer @xmath172 , we say that @xmath168 is constantly zero modulo @xmath172 if @xmath172 divides @xmath173 for all indexes @xmath174 .",
    "note that we can suppose without loss of generality that for all indexes @xmath167 the function @xmath168 is not constantly zero modulo @xmath291 ( otherwise it would give no useful information since @xmath292 for any element @xmath135 in an instance created by @xmath293 or @xmath294 ) .",
    "suppose that the leaf of the reduced decision tree associated with @xmath113 corresponds to a yes decision .",
    "the success probability of the algorithm @xmath91 for this fixed sequence @xmath113 is at most @xmath295 where @xmath192 ( resp . , @xmath193 )",
    "is the probability that @xmath91 does not reach the leaf conditioned on the event that the instance is from @xmath114 ( resp .",
    ", from @xmath148 ) .",
    "when the leaf of the reduced decision tree corresponds to a no decision , a similar calculation gives that the success probability is at most @xmath296 .",
    "notice that @xmath297 and @xmath193 are the probabilities that the same string is seen twice during the computation .",
    "we will now show that , when the instance is created by either @xmath114 or @xmath148 , the inequality @xmath298\\le   \\frac{t(t-1)}{2\\cdot p^{r-1}}\\ ] ] holds .",
    "this implies that @xmath299 and then the algorithm @xmath91 can not distinguish @xmath293 from @xmath294 with probability at least 2/3 unless @xmath300 .",
    "let us fix some pair of indexes @xmath167 .",
    "if there exists some index @xmath174 such that @xmath301 , then for instances generated by @xmath114 and @xmath148 we have @xmath302=\\frac{1}{p^{3r-2}}.\\ ] ] now suppose that @xmath303 for all @xmath174 .",
    "since there are @xmath304 elements of order at most @xmath29 in @xmath285 , and @xmath305 elements of order at most @xmath29 in @xmath306 , for instances generated by @xmath293 and@xmath294 we have @xmath307\\le\\frac{p^{2r-1}}{p^{3r-2 } } = \\frac{1}{p^{r-1}}.\\ ] ] the union bound then implies that @xmath298\\le   \\frac{t(t-1)}{2\\cdot p^{r-1}}\\ ] ] in both cases .",
    "since the same argument holds for any sequence @xmath113 , we conclude that the algorithm @xmath91 can not distinguish @xmath100 from @xmath102 with overall success probability at least 2/3 unless @xmath300 .",
    "we now consider the case where @xmath7 is odd .",
    "let us fix @xmath283 and denote @xmath308 .",
    "we define similarly @xmath309 as the uniform distribution over binary structures for the group @xmath310 , and @xmath311 as the uniform distribution over binary structures for @xmath312 .",
    "the order of every instance in @xmath309 and @xmath311 is @xmath313 .",
    "every instance in @xmath309 has @xmath314 generators while every instance in @xmath311 needs at least @xmath315 elements to be generated . from lemma  [ lemma : ivanyos ]",
    ", every instance in @xmath311 is @xmath109-far from abelian groups generated by @xmath7 generators .",
    "the part of theorem  [ theorem : lowerbound - k ] for @xmath7 odd follows from the following proposition .",
    "[ proposition : k - odd ] any deterministic algorithm that decides with probability larger than @xmath92 whether the input is from the distribution @xmath309 or from the distribution @xmath311 must use @xmath290 queries .    the proof is exactly the same as the proof of proposition  [ proposition : k - even ] , except that equality  ( [ equation : even1 ] ) becomes @xmath316=\\frac{1}{p^{3r-1}}\\ ] ] and inequality  ( [ equation : even2 ] ) becomes @xmath316\\le\\frac{p^{2r}}{p^{3r-1 } } = \\frac{1}{p^{r-1}}.\\:\\:\\ ] ]        [ theorem : close ] let @xmath0 be a magma and let @xmath317 be a constant such that @xmath318 .",
    "let @xmath13 be a ( not necessary abelian ) group with order @xmath319 in which the multiplication of two elements @xmath220 is denoted by @xmath320 .",
    "let @xmath42 denote a map from @xmath13 to @xmath1 .",
    "suppose that the following two conditions are satisfied :          suppose that @xmath0 is a magma , @xmath317 is a constant such that @xmath327 , @xmath13 is a ( not necessary abelian ) group , and @xmath42 is a map from @xmath13 to @xmath1 .",
    "the order of @xmath13 does not matter for now .",
    "the multiplication of two elements @xmath328 is denoted by @xmath320 .",
    "following definitions introduced in the work by friedl et al .",
    "@xcite , we say that an element @xmath135 of @xmath13 is _ well - behaving _ if both the two inequalities @xmath329\\ge 4/5 $ ] and @xmath330\\ge 4/5 $ ] hold .",
    "friedl et al .",
    "showed the following results .",
    "suppose that all the conditions of theorem  [ theorem : close ] are satisfied .",
    "we explicitly construct a binary operation  @xmath325 such that @xmath44 is isomorphic to @xmath13 and such that the hamming distance between @xmath0 and @xmath338 is at most @xmath339 .",
    "let @xmath333 denote the subgroup of @xmath13 whose existence is ensured by lemma [ lemma : subgroupk ] . from the properties of @xmath333 stated in lemma [ lemma : subgroupk ] , and from condition ( b ) in the statement of theorem  [ theorem : close ] , we conclude that @xmath340 .      we now define a one - one map @xmath344 as follows .",
    "if @xmath345 is well - behaving , then @xmath346 ; if @xmath345 is not well - behaving then @xmath347 is an element in @xmath348 chosen arbitrarily in a way such as @xmath349 for distinct not well - behaving elements @xmath220 of @xmath13 .",
    "we define the multiplication @xmath45 over @xmath1 as follows . for any @xmath350 ,",
    "there exist ( unique ) @xmath351 and @xmath352 in @xmath13 such that @xmath353 and @xmath354 .",
    "we then set @xmath355 with this definition , the map @xmath356 becomes an isomorphism from @xmath13 to @xmath44 .",
    "we now show the following inequality : @xmath357\\le 46\\eta.\\ ] ] by definition of @xmath45 , we have @xmath358 . with probability",
    "at least @xmath359 the three elements @xmath135 , @xmath337 , and @xmath320 are well - behaving elements ( from lemma  [ lemma : subgroupk ] ) , in which case @xmath346 , @xmath360 , and @xmath361 .",
    "remember that we also know that with probability at least @xmath362 the equality @xmath363 holds .",
    "then the equality @xmath364 holds with probability at least @xmath365 .",
    "suppose that the input @xmath0 is a cyclic group of order @xmath172 .",
    "suppose that the element @xmath38 chosen at step  4 is a generator of @xmath0 .",
    "then @xmath368=1 $ ] and @xmath369=0 $ ] for any @xmath211 and any distinct @xmath370 .",
    "thus the value of the variable @xmath229 at the end of the loop of steps 3 - 13 for this specific value of @xmath38 will always be @xmath371 .",
    "since with probability @xmath372 an element chosen uniformly at random in a cyclic group of order @xmath172 is a generator ( see for example ref .",
    "@xcite ) , by taking an appropriate value @xmath373 the algorithm outputs @xmath371 with probability at least 2/3 .        notice that any nontrivial subgroup @xmath12 of @xmath213 contains at least one of the subgroups @xmath376 .",
    "then theorem  [ theorem : close ] implies that @xmath0 is @xmath377-close ( and thus @xmath24-close ) to the class of cyclic groups , which contradicts our hypothesis .",
    "we conclude that , when @xmath0 is @xmath24-far from the class of cyclic groups , for each value @xmath38 chosen by the algorithm at step  4 , at least one among assertion ( i ) or assertion ( ii ) should not hold .",
    "if assertion ( i ) does not hold for a specific value @xmath38 , then this is detected with probability at least @xmath378 in the tests performed at steps 5 - 7 .",
    "if assertion ( ii ) does not hold for a specific value @xmath38 , then there exists a value @xmath379 such that @xmath375\\ge \\frac{1}{2}$ ] for all distinct @xmath380 .",
    "this is detected with probability at least @xmath381 in the tests performed at steps 8 - 12 . by taking appropriate values",
    "@xmath382 and @xmath383 , the fact that assertion ( i ) or assertion ( ii ) not hold will be detected with overall probability at least @xmath92 for all the values of @xmath38 chosen by the algorithm .",
    "@xmath239 then outputs @xmath384 with probability at least  @xmath92 .",
    "the query complexity follows from the fact that @xmath385 can be evaluated using @xmath235 queries and from the observation that @xmath386 since an integer @xmath387 has at most @xmath388 distinct prime divisors ( see for example ref .",
    "the time complexity follows from the fact that , additionally , elements of @xmath1 are represented by strings of length @xmath389 ."
  ],
  "abstract_text": [
    "<S> this paper studies the problem of testing if an input @xmath0 , where @xmath1 is a finite set of unknown size and @xmath2 is a binary operation over @xmath1 given as an oracle , is close to a specified class of groups . </S>",
    "<S> friedl et al .  </S>",
    "<S> [ _ efficient testing of groups _ , </S>",
    "<S> stoc05 ] have constructed an efficient tester using @xmath3 queries for the class of abelian groups . </S>",
    "<S> we focus in this paper on subclasses of abelian groups , and show that these problems are much harder : @xmath4 queries are necessary to test if the input is close to a cyclic group , and @xmath5 queries for some constant @xmath6 are necessary to test more generally if the input is close to an abelian group generated by @xmath7 elements , for any fixed integer @xmath8 . </S>",
    "<S> we also show that knowledge of the size of the ground set @xmath1 helps only for @xmath9 , in which case we construct an efficient tester using @xmath3 queries ; for any other value @xmath10 the query complexity remains @xmath5 . </S>",
    "<S> all our upper and lower bounds hold for both the edit distance and the hamming distance . </S>",
    "<S> these are , to the best of our knowledge , the first nontrivial lower bounds for such group - theoretic problems in the property testing model and , in particular , they imply the first exponential separations between the classical and quantum query complexities of testing closeness to classes of groups .     </S>",
    "<S> department of computer science , the university of tokyo + legall@is.s.u-tokyo.ac.jp + [ 2.5 mm ] school of informatics , kyoto university + yyoshida@kuis.kyoto-u.ac.jp + [ 2.5 mm ] preferred infrastructure , inc .   </S>",
    "<S> + [ 8 mm ] </S>"
  ]
}