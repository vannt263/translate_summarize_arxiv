{
  "article_text": [
    "the human - created cyberspace is a very large - scale complex system of cybersystems .",
    "its security properties are difficult to understand and characterize .",
    "we attribute this difficulty to its _ complexity _ , a manifestation of which is the so - called _ emergent behavior _ in complexity science @xcite .",
    "although there is no universally accepted definition of emergent behavior @xcite , the basic idea is intuitive .",
    "the simplest example of emergent behavior may be the well known  @xmath0 \" effect . for our purpose , it is sufficient to use the following informal definition of emergent behavior in cybersecurity domain .",
    "[ def : emergent - behavior ] a security property of a cybersystem exhibits emergent behavior if the property is _ not _ possessed by the underlying lower - level components of the cybersystem .",
    "a direct consequence of emergent behavior is that at least some security properties can not be understood by solely considering the lower - level components ; instead , we must explicitly consider the _ interactions _ between the lower - level components .",
    "although emergent behavior of cybersystems has been discussed from a function or constructional perspective @xcite , emergent behavior in cybersecurity is not systematically examined until now .",
    "we demonstrate emergent behavior in cybersecurity through three examples .",
    "* example 1 : emergent behavior exhibited by cybersecurity dynamics .",
    "* we refer to @xcite for an exposition of the emerging field of cybersecurity dynamics . in order to explain how emergent behavior is exhibited by cybersecurity dynamics",
    ", we consider the perhaps simplest model @xcite . for our purpose",
    ", it suffices to consider two cybersystems that respectively induce attack - defense structures ( or graphs ) @xmath1 , where @xmath2 is the node ( vertex ) set and @xmath3 is the edge set for @xmath4 .",
    "let @xmath5 denote the largest eigenvalue of the adjacency matrix of a graph @xmath6 , @xmath7 denote the defense capability in detecting and cleaning compromised nodes ( e.g. , the probability that a compromised node gets cleaned at a time step ) , and @xmath8 denote the attack capability in compromising secure nodes ( e.g. , the probability that this event occurs over an edge at a time step ) . for simplicity ,",
    "suppose @xmath9 is a complete graph with @xmath10 nodes for @xmath4 .",
    "it is well known that @xmath11 and @xmath12 . for @xmath4 , if @xmath13 , the attacks will eventually be wiped out in the cybersystem that induces @xmath9 ; if @xmath14 , the attacks can not be wiped out @xcite .",
    "now we consider a new cybersystem that is obtained by interconnecting the aforementioned two cybersystems that induced @xmath15 and @xmath16 .",
    "consider the simplest case that any node can attack any other node in the interconnected cybersystem , which effectively induces attack - defense structure , a complete graph , @xmath17 with @xmath18 nodes and @xmath19 . in many ( if not all ) cases ,",
    "the defense capability @xmath20 and the attack capability @xmath21 associated to @xmath17 are respectively the same as the defense capability @xmath7 and the attack capability @xmath8 associated to @xmath15 and @xmath16 .",
    "since @xmath13 for @xmath4 do not imply @xmath22 , we conclude that the attacks can be wiped out in the two underlying component cybersystems , but can not be wiped out in the interconnected cybersystem as long as @xmath23 .",
    "this phenomenon can be naturally extended to more sophisticated settings ( e.g. , @xcite ) .",
    "this implies that cybersecurity dynamics can not be determined by looking at the component cybersystems alone .",
    "rather , we need to look into how the component cybersystems interact with each other .",
    "* example 2 : emergent behavior exhibited by security properties in the extended trace - property framework .",
    "* in the field of program verification , it was known that specifications that are sufficient for _ sequential _ programs are not sufficient for _ concurrent _ programs . for dealing with concurrent programs , lamport proposed the safety - liveness framework of trace properties @xcite .",
    "intuitively , a _ trace _ is a finite or infinite sequence of states corresponding to an execution of a program .",
    "trace property _ is a set of traces such that every trace , _ in isolation _ , satisfies the same predicate .",
    "a _ safety _",
    "property says that no  bad thing \" happens during the course of a program execution , while a _ liveness _ property says that  good thing \" will eventually happen during the course of a program execution .",
    "both safety and liveness are trace properties .",
    "a beautiful result is that every trace property is the intersection of a safety property and a liveness property @xcite .    given the above history , it is appealing to specify a cybersystem as a set of traces , and therefore as a subset of a security property that is also specified as _ a set of traces_. unfortunately , security properties are not trace properties as shown in @xcite and refreshed below .",
    "first , _ noninterference _ is a security property that captures the intuition that system security is preserved as long as high - clearance ( or high - privilege ) processes can not influence the behavior of low - clearance ( low - privilege ) processes .",
    "it is no trace property because it can not be verified without examining the other traces .",
    "second , _ information - flow _ captures some kind of correlation between the values of variables in multiple traces .",
    "it is no trace property because it can not be verified by examining each trace alone .",
    "average service response time _ is an availability property .",
    "it is no trace property because it depends on the response time in all traces .    in an effort to overcome the above limitation of the safety - liveness framework , clarkson and schenider extended the notion of _ trace properties _ to the notion of _ trace hyperproperties _",
    "basically , hyperproperties are _ sets of trace properties_. in parallel to the safety - liveness framework , a hyperproperty is also the intersection of a safety hyperproperty and a liveness hyperproperty . it is now known that information - flow , integrity and availability can be hypersafety or hyperliveness @xcite . exactly because hyperproperties capture that the verification procedure _ must _ examine across _ multiple _ traces , which may accommodate interactions between the component systems , we say that hyperproperties exhibit the emergent behavior .",
    "this means that we need to study the emergent behavior in cybersecurity , which may explain why it took so long to realize the importance of hyperproperties .",
    "* example 3 : emergent behavior exhibited by cryptographic security properties . *",
    "cryptographic secure multiparty computation allows multiple parties @xmath24 , each having a respective secret @xmath25 , to compute a function @xmath26 such that no information about the @xmath27 s is leaked except for what is implied by the output of the function .",
    "this manifests a confidentiality property .",
    "a beautiful feasibility result is that any polynomial - time computable function @xmath28 can be securely computed @xcite , as long as the protocol executes _ in isolation _ ( the stand - alone setting ) and trapdoor permutations exist .",
    "when such cryptographic protocols are used as building - blocks in larger applications / systems , they may execute concurrently ( rather than in isolation ) .",
    "this leads to a natural question : are the cryptographic protocols , which are provably secure when executed in isolation , still secure when they are concurrently called by larger applications / systems ? intuitively , concurrent executions offer the attacker the leverage ( for example ) to schedule the messages in a way that is to the attacker s advantage , which does not have a counterpart in the stand - alone setting .",
    "quite similar to what happened in the field of program verification , where specific properties ( e.g. , partial correctness and mutual exclusion ) were investigated before the introduction of the unifying safety - liveness framework @xcite , the same kind of development was made in the field of cryptographic protocols .",
    "that is , specific cryptographic security properties were investigated before the introduction of the unifying notion called _ universal composability _",
    "@xcite , or its equivalent ( but perhaps more intuitive ) version called _ concurrent general composition _",
    "( arbitrarily many instances run possibly together with arbitrary other protocols ) @xcite .",
    "it is now known that there are cryptographic multiparty computation protocols , which are provably secure when executed in isolation , but are _ not _ secure when they are concurrently called by larger applications / systems .",
    "for example , there exist classes of functions that can not be computed in the universally composably secure fashion @xcite . in other words ,",
    "these functions can be securely computed by running some cryptographic protocols in isolation , but can not be securely computed when the protocols execute concurrently . in order to make cryptographic multiparty computation protocols secure when they are used as building - blocks for constructing larger cybersystems , we need to make extra assumptions , such as that majority of the parties @xmath24 are not compromised @xcite .",
    "this manifests emergent behavior .",
    "( it is interesting to note that whether or not it is reasonable to assume that majority of the parties are not compromised may be addressed by the cybersecurity dynamics framework @xcite . )"
  ],
  "abstract_text": [
    "<S> we argue that _ emergent behavior _ is inherent to cybersecurity . </S>"
  ]
}