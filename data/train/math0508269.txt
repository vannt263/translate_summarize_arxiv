{
  "article_text": [
    "classically , a _ chord diagram _ is a collection of chords of a circle ; the intersection graph for these chords is called a _ circle",
    "graph_. circle graphs have been intensively studied in graph theory , with classifications given by even and itai @xcite and bouchet @xcite , among others . in recent years ,",
    "interest in chord diagrams has spread to topologists as part of the theory of finite type knot and link invariants @xcite , as well as the theory of virtual knots @xcite .",
    "a natural extension of knot theory is to look at spatial embeddings of more complex graphs , and it is natural to ask whether some analogue of chord diagrams could be equally useful in this context .",
    "the goal of this paper is to define a reasonable notion of chord diagram for general graphs , and to construct some tools to study them . in particular",
    ", we will look at a variety of intersection graphs for these chord diagrams .",
    "we will use these intersection graphs to determine when an embedding of a planar graph can be extended to an embedding of a chord diagram on that graph . as an application , we will define _ gauss codes _ for immersions of arbitrary graphs and give algorithms for determining whether a crossing sequence is realizable as a gauss code .",
    "acknowledgement : the authors would like to acknowledge the hospitality of waseda university , tokyo , and professor kouki taniyama during the international workshop on knots and links in a spatial graph in july , 2004 , where the idea for this project was conceived .",
    "the second author was supported by an lmu faculty research grant .",
    "a chord diagram for a circle may be characterized as simply a circle with a set of labeled points indicating the endpoints of the chords .",
    "this is the idea we use to define a chord diagram for a general graph .",
    "[ d : chord ] let g be a graph with edge set e and vertex set v. a * chord diagram on g of degree n * is a collection of 2n points in @xmath0 ( so each point is in the interior of an edge ) , each labeled from a set @xmath1 such that each label is used exactly twice .",
    "the two points labeled @xmath2 are called the * endpoints * of chord @xmath2 .",
    "often , we will want to look at _ oriented _ chord diagrams of directed graphs .",
    "this allows us to record whether the chord is on the same or opposite sides of the edges at each endpoint .",
    "[ d : orientchord ] let g be a * directed * graph with edge set e and vertex set v. an * oriented chord diagram on g of degree n * is a collection of 2n points in @xmath0 , each labeled from a set @xmath3 such that exactly two points are labeled from each set @xmath4 .",
    "these two points are called the * endpoints * of chord @xmath2 ; if they have the same label , the endpoints are said to have the same orientation .",
    "if one is labeled @xmath2 and the other @xmath5 , they are said to have opposite orientations .",
    "generally , we will represent a chord diagram visually by drawing an arc between the endpoints . in an oriented chord diagram",
    ", the arc will be on the _ same _ side of the edges at the endpoints when the endpoints have _ opposite _ orientation , and on opposite sides when the endpoints have the same orientation .",
    "this terminology is geometrically motivated - an oriented line segment in the plane naturally has left and right sides , and when the arc is on the same side of the edges at each endpoint , the bases for @xmath6 given by the ordered pair of the tangent vectors to the chord and the edge have opposite orientations at the two endpoints , as shown in figure  [ f : orient ] .",
    "[ h ] @xmath7    two examples of ( oriented ) chord diagrams are shown in figure  [ f : chordexamples ] .",
    "[ h ] @xmath8      much of the work done on chord diagrams for circles has been in terms of their intersection graphs , also known as _",
    "circle graphs_. these graphs have also been useful in the recent applications of chord diagrams to knot and link invariants @xcite .",
    "so it is natural to look at some kind of intersection graph for chord diagrams on more general graphs . for chord diagrams on the circle",
    ", two chords are said to intersect if their endpoints alternate around the circle . in a more general graph , there may not be a way to move  around \" the graph , or there may be many , so we need a different criterion .",
    "another point of view of circle graphs is as  proper circular - arc graphs \" - in other words , two chords intersect if the arcs on the circle between their endpoints overlap , but neither is a proper subset of the other @xcite . by replacing  arcs on the circle \" with  paths in the graph , \" we can generalize this notion to other graphs .    [",
    "d : igchord ] given a chord diagram c on a ( possibly directed ) graph g , the * intersection graph for c * is the graph @xmath9 whose vertices are the chords of c , and vertices @xmath2 and @xmath10 ( corresponding to chords @xmath2 and @xmath10 ) are adjacent if given any ( undirected ) path @xmath11 in g between the endpoints of @xmath2 and any ( undirected ) path @xmath12 in g between the endpoints of @xmath10 , @xmath11 and @xmath12 properly intersect ( meaning that they overlap - perhaps only in one vertex - but neither is a subset of the other ) .",
    "so for two chords to intersect , _ all _ paths between their endpoints must intersect ; for them to be disjoint , there need only be one pair of paths which are disjoint ( or in which one properly contains the other ) .",
    "this is clearly a fairly restrictive notion of intersection , but it seems to be the one which best matches our visual intuition .",
    "figure  [ f : igchord ] shows the intersection graphs for the chord diagrams in figure [ f : chordexamples ] .",
    "note that , for chord diagrams on circles , this definition agrees with the usual definition of the intersection graph .",
    "[ h ] @xmath13",
    "a common situation is to study chord diagrams when the chords are  real \" chords - in other words , they are chords of regions in some planar embedding of the graph . in this section , we will explore chord diagrams and their intersection graphs when we are given a planar graph together with a particular embedding in the plane .",
    "our main result is to give conditions when the embedding of the graph can be extended to an embedding of the entire chord diagram .",
    "[ d : respect ] let @xmath14 be a directed planar graph , @xmath15 be an oriented chord diagram on @xmath14 , and @xmath16 be a particular embedding of @xmath14 . consider a chord @xmath2 of @xmath15 , with endpoints on edges @xmath17 and @xmath18 in @xmath14 .",
    "we say @xmath2 * respects * @xmath19 if :    1 .",
    "both endpoints of @xmath2 lie on the boundary of a single region r of @xmath20 ( i.e. a single connected component of @xmath21 ) .",
    "if r is on the same side ( left or right ) of @xmath17 and @xmath18 , then the endpoints of @xmath2 have opposite orientations ; if r is on the opposite sides of @xmath17 and @xmath18 , then the endpoints of @xmath2 have the same orientation ( assuming @xmath17 and @xmath18 are not cut edges ) .",
    "3 .   if either @xmath17 or @xmath18 is a cut edge , then the endpoints of @xmath2 may have either orientation .",
    "if @xmath14 is not directed , then only the first condition is required .",
    "we say that @xmath15 * respects * @xmath19 if every chord of @xmath15 respects @xmath19",
    ".    we should observe that if @xmath17 and @xmath18 are both on the boundaries of two regions @xmath22 and @xmath23 , then the definition does not depend on which region is used ; if @xmath22 is on the same side of both edges , then so is @xmath23 , and vice - versa .",
    "we define the intersection graph of @xmath15 with respect to @xmath19 by restricting our attention to paths in @xmath14 which lie on the boundary of a single region of @xmath20 .",
    "[ d : igplanar ] given a chord diagram c on a ( possibly directed ) planar graph g , and an embedding @xmath16 , the * intersection graph for c with respect to f * is the graph @xmath24 whose vertices are the chords of c , and vertices @xmath2 and @xmath10 ( corresponding to chords @xmath2 and @xmath10 ) are adjacent if given any ( undirected ) path @xmath11 on the boundary of a single region of @xmath20 between the endpoints of @xmath2 and any ( undirected ) path @xmath12 on the boundary of a single region of @xmath20 between the endpoints of @xmath10 , @xmath11 and @xmath12 properly intersect .",
    "remarks :    1 .",
    "if @xmath2 does not have both endpoints on the boundary of a single region of @xmath20 , then there is no path between the endpoints which lies on the boundary of a single region . in this case",
    ", the condition for adjacency is vacuously true , so @xmath2 is adjacent to every other chord in the chord diagram .",
    "2 .   the intersection graphs shown in figure [ f : igchord ] are also the intersection graphs with respect to the embeddings shown .",
    "since the number of paths in a graph may be large , it is not clear whether @xmath9 can be constructed in polynomial time .",
    "however , @xmath24 certainly can , since an endpoint for a chord can lie on the boundary of at most two regions , there are at most 4 possible paths between the endpoints for each chord .",
    "so the number of pairs of paths which need to be compared is at most @xmath25 , where @xmath26 is the number of chords .",
    "if two chords intersect by definition [ d : igchord ] , then they certainly intersect by definition [ d : igplanar ] , but the converse is not true .",
    "so @xmath27 for every embedding @xmath19 .",
    "the last remark gives rise to the following open question :    given a planar graph g and a chord diagram c on g , is @xmath28 ?",
    "our main focus in this section is to study when a planar embedding of a graph @xmath14 can be extended to give a planar embedding of a chord diagram @xmath15 on @xmath14 . to be precise , by an  embedding of the chord diagram \"",
    "we mean an embedding of the graph @xmath29 constructed from @xmath14 by adding vertices at the endpoints of all the chords in @xmath15 , and edges between the endpoints of each chord in @xmath15 .",
    "we will also look at embeddings of _ oriented _ chord diagrams - in this case , we will insist that the embedded chords be on the same or opposite sides of the edges at each endpoint , as dictated by the orientations ( see section [ ss : defchord ] ) .",
    "our first result is well - known ( an equivalent form can be extracted from @xcite , for example ) , but is given here for completeness and as a warm - up for our later results .",
    "[ p : circle ] let g be a directed graph consisting of a single loop , and let @xmath16 be an embedding of g ( so @xmath20 is a circle ) .",
    "let c be an oriented chord diagram on g. then f extends to an embedding of c if and only the following conditions are met :    1 .",
    "@xmath9 is bipartite .",
    "the endpoints of every chord in c have opposite orientation .    if c is not oriented , then the first condition is sufficient .",
    "proof : we first note that , since every embedding of the circle in the plane is isotopic , the particular embedding @xmath19 is irrelevant . and , since @xmath20 has exactly two regions , both bounded by the circle , every path on the circle is also a path in the boundary of a region , so @xmath30 .",
    "we first show the sufficiency of the conditions of the proposition .",
    "since the endpoints of the chords have opposite orientations , the chord is on the same side of the circle at each endpoint , so each chord can be drawn entirely within one region of @xmath20 ( if @xmath15 is not oriented , we can simply choose to draw the chords on the same side of the circle at each endpoint ) . since @xmath9 is bipartite",
    ", we can divide the chords into two sets , denoted the  blue \" chords and the  red \" chords , so that no two blue chords intersect , and no two red chords intersect .",
    "we will draw the blue chords in one region of @xmath20 ( inside the circle ) and the red chords in the other region ( outside the circle ) .",
    "choose one of the blue chords , @xmath31 , and connect the endpoints by an arc inside the circle .",
    "this gives an embedding of @xmath32 , which divides the inside of the circle into two regions .",
    "since no other blue chord intersects @xmath31 , any other chord @xmath33 must have both endpoints on the boundary of one of these regions , and so there is an arc connecting these endpoints in @xmath34 . continuing in this way , we can embed all of the blue arcs inside the circle ; by the same argument , we can embed all the red arcs outside the circle .",
    "this gives us an extension of the embedding to @xmath15 .",
    "conversely , if we have an embedding of @xmath15 , then each chord must lie in a single region of @xmath20 , and so must be on the same side of the circle at each endpoint , so the endpoints must have opposite orientations .",
    "in addition , the chords inside the circle must all be disjoint , as are the chords outside the circle .",
    "so the vertices of the intersection graph can be divided into two independent sets , and so @xmath9 is bipartite .",
    "@xmath35 +   + remarks :    1 .",
    "since there are polynomial - time algorithms to determine whether a graph is bipartite , proposition [ p : circle ] shows that we can determine whether the embedding extends to the chord diagram in polynomial time .",
    "proposition [ p : circle ] easily extends to general cycles ( in which the edges may not all be oriented the same way ) by replacing the condition that the endpoints of each chord have opposite orientation with the condition that every chord must respect the embedding , as in definition [ d : respect ] .",
    "now we want to consider more complicated graphs .",
    "topologically , the simplest graphs after the circle are the @xmath36-graphs , which are the graphs consisting of two vertices and @xmath26 edges between these vertices .",
    "figure  [ f : theta ] shows several examples .",
    "[ h ] @xmath37    the spatial embeddings of these graphs have been studied extensively @xcite , so they are a natural set of graphs for us to consider .",
    "[ p : theta ] let g be a directed @xmath36-graph with vertices v and w , and with all edges directed from v to w. let @xmath16 be a planar embedding of g , and let c be an oriented chord diagram on g. label the edges of g by @xmath38 according to their ( counterclockwise ) cyclic order around v in f(g ) , and label the region of f(g ) enclosed by @xmath39 and @xmath40 by @xmath41 ( @xmath42 is the region enclosed by @xmath43 and @xmath17 ) .",
    "then f extends to an embedding of c if and only if the following conditions are met :    1 .",
    "the vertices of @xmath24 can be labeled by the regions @xmath41 so that : * if a vertex is labeled @xmath41 , then the corresponding chord in c has both endpoints on the boundary of region @xmath41 in f(g ) . * for each @xmath41 , the set of vertices labeled @xmath41 is independent .",
    "if both endpoints of a chord are on the same edge of g , then they have opposite orientations ; if the endpoints of a chord are on different edges of g , they have the same orientation ( i.e. @xmath15 respects @xmath19 , as in definition [ d : respect ] ) .",
    "if c is not oriented , then we can ignore the second condition .",
    "proof : we will first show that the conditions are sufficient .",
    "the idea is simply to draw the chord @xmath31 corresponding to a vertex @xmath44 labeled @xmath41 in the region @xmath41 .",
    "since both endpoints of @xmath31 lie on the boundary of @xmath41 , they can be connected by an arc in @xmath41 .",
    "if both endpoints of @xmath31 are on one edge ( @xmath39 or @xmath40 ) , then they have opposite orientations ( since @xmath15 respects @xmath19 ) , and the chord is on the same side of the edge at both endpoints ; therefore , the arc is an embedding of the oriented chord .",
    "on the other hand , if @xmath31 has one endpoint on @xmath39 and the other on @xmath40 , then its endpoints have the same orientation , and @xmath31 should be on opposite sides of the edges .",
    "but the region @xmath41 is on the left side of @xmath39 and the right side of @xmath40 , so again the arc in @xmath41 is an embedding of the oriented chord .",
    "so the embedding of @xmath14 can be individually extended to each chord in @xmath15 .    we still need to show it can be extended to all the chords at once .",
    "the obstruction to this extension is when chords cross each other - i.e. when their endpoints alternate around the boundary of a region .",
    "we will first consider what happens if there _ is _ such an obstruction .",
    "[ l : thetaalternate ] if two chords @xmath31 and @xmath33 both have their endpoints on the boundary of region @xmath41 , and their endpoints alternate along the ( undirected ) cycle around the boundary of @xmath41 , then the corresponding vertices @xmath44 and @xmath45 are adjacent in @xmath24 .",
    "proof of lemma : if @xmath31 has both endpoints on the same edge , say @xmath39 , then @xmath33 has exactly one endpoint on the segment @xmath39 between the endpoints of @xmath31 , and any path between the endpoints of @xmath33 must contain one of the endpoints of @xmath31 , but not both .",
    "so any path between the endpoints of @xmath33 will intersect , but not contain , any path between the endpoints of @xmath31 . on the other hand ,",
    "if neither @xmath31 nor @xmath33 have both endpoints on the same edge , then they each have one endpoint on @xmath39 and one on @xmath40 .",
    "then any path between the endpoints of the chords with lies on the boundary of a region of @xmath20 must run along the boundary of @xmath41 , since it is the only region whose boundary contains both endpoints .",
    "there are two such paths between the endpoints of @xmath31 , each of which contains one endpoint of @xmath33 .",
    "so we conclude that if the endpoints of @xmath31 and @xmath33 alternate around the boundary of @xmath41 , then @xmath44 and @xmath45 are adjacent .",
    "this proves our lemma .",
    "equivalently , if @xmath44 and @xmath45 are _ not _ adjacent , then the endpoints of @xmath31 and @xmath33 must _ not _ alternate around the boundary of @xmath41 .",
    "since the set of vertices labeled @xmath41 is independent , none of the corresponding chords have alternating endpoints around the boundary of @xmath41 .",
    "so these chords can be embedded in @xmath41 as disjoint arcs , as in proposition [ p : circle ] .",
    "this can be done for each label @xmath41 , resulting in an embedding of @xmath15 which extends @xmath19 .",
    "it remains to show that the conditions are necessary .",
    "assume that @xmath19 can be extended to @xmath15",
    ". then each chord is embedded as an arc in some region @xmath41 .",
    "if both endpoints of the chord are on the same edge , the chord is on the same side at both endpoints , and the endpoints must have opposite orientations . on the other hand ,",
    "if they are on distinct edges @xmath39 and @xmath40 , then the chord is on opposite sides of the edges at the two endpoints ( the left side of @xmath39 and the right side of @xmath40 , so the endpoints must have the same orientation .",
    "so the second condition is necessary .",
    "now label the vertex @xmath44 in @xmath24 corresponding to chord @xmath31 by the region in which @xmath31 is embedded in @xmath46 .",
    "obviously , both endpoints of @xmath31 must be on the boundary of this region . since we have embedded our chord diagram , chords which are in the same region @xmath41 do not cross , so their endpoints do not alternate around the boundary of @xmath41 .",
    "then there are clearly non - overlapping paths between the endpoints of the chords , so the corresponding vertices are not adjacent in @xmath24 .",
    "so vertices with the same label will not be adjacent .",
    "this shows that the first condition is necessary , and completes the proof .",
    "@xmath35 +   + remark : it is easy to check that these conditions can be checked in polynomial time .",
    "the coloring of most chords is forced by the location of their endpoints .",
    "those that are left have both endpoints on the same edge , and it is enough to show that the subgraph in @xmath24 induced by the remaining chords on each edge is bipartite .      the arguments of section [ ss : theta ] can easily be generalized to any planar graph without _ cut edges _ ( so that each edge in a planar embedding of the graph bounds a different region on either side ) .",
    "recall that @xmath47 is a _ cut edge _ of a connected graph @xmath14 if @xmath48 is not connected .",
    "[ p : nocut ] let g be a directed planar graph with no cut edges .",
    "let @xmath16 be a planar embedding of g , and let c be an oriented chord diagram on g. label the regions of f(g ) by @xmath41 ( @xmath49 number of regions ) .",
    "then f extends to an embedding of c if and only if the following conditions are met :    1 .",
    "c respects f , as in definition [ d : respect ] ( so every chord in c has both endpoints on the boundary of some region @xmath41 ) .",
    "the vertices of @xmath24 can be labeled by the regions @xmath41 so that : * if a vertex is labeled @xmath41 , then the corresponding chord in c has both endpoints on the boundary of region @xmath41 in f(g ) . * for each @xmath41 , the set of vertices labeled @xmath41 is independent .    before we begin the proof of proposition [ p : nocut ] , we need a technical lemma , which generalizes lemma [ l : thetaalternate ] in the last section .    [",
    "l : alternate ] consider g , f and c as in the statement of proposition [ p : nocut ] .",
    "if c and d are chords in c whose endpoints alternate around the boundary of region @xmath50 in f(g ) , then the corresponding vertices @xmath44 and @xmath45 are adjacent in @xmath24 .    proof : since @xmath14 does not have cut edges , the boundary of @xmath50 is a _ cycle _ in @xmath14 .",
    "assume that @xmath44 and @xmath45 are _ not _ adjacent .",
    "then there are paths @xmath51 between the endpoints of @xmath31 and @xmath52 between the endpoints of @xmath33 , each along the boundary of a region in @xmath20 , such that either @xmath53 or one path is contained in the other - without loss of generality , @xmath54 .",
    "so neither of the endpoints of chord @xmath33 lie on @xmath51 . since the endpoints of @xmath31 and @xmath33 alternate around the boundary of @xmath50 , @xmath51",
    "can not be contained in the boundary of @xmath50 , or it would contain one of the endpoints of @xmath33 .",
    "so @xmath51 is in the boundary of some other region @xmath55 , meaning that the endpoints of @xmath31 lie on the boundary between regions @xmath50 and @xmath55 .",
    "first consider the case when @xmath51 and @xmath52 are disjoint .",
    "then the union of @xmath51 with one of the paths between the endpoints of @xmath31 along the boundary of region @xmath50 gives a cycle @xmath56 ( or at least a circuit which contains a cycle @xmath56 ) which contains one endpoint of @xmath33 .",
    "so @xmath52 must intersect @xmath56 .",
    "if @xmath52 lies along region @xmath50 , then it will contain one of the endpoints of @xmath31 , and so wo nt be disjoint from @xmath51 .",
    "but since @xmath52 ca nt pass _ through _ region @xmath50 ( since this is a region of the planar embedding of @xmath14 ) , it must ( by the jordan curve theorem ) pass from one side of @xmath56 to the other , and so must intersect @xmath51 , as shown in figure  [ f : alternate ] .",
    "[ h ] @xmath57    this contradicts the assumption that @xmath51 and @xmath52 are disjoint .    therefore , @xmath54 , so the endpoints of @xmath31 are in @xmath52 .",
    "since the endpoints of @xmath31 are on the boundary between regions @xmath50 and @xmath55 , and we know that @xmath52 can not be on the boundary of region @xmath50 , it must lie on the boundary of region @xmath55 .",
    "so the endpoints of @xmath33 are also on the boundary between regions @xmath50 and @xmath55 . since @xmath54 ,",
    "the endpoints of @xmath31 and @xmath33 do _ not _ alternate around the boundary of region @xmath55 , which is a cycle .",
    "so there are paths @xmath58 and @xmath59 between the endpoints of chords @xmath31 and @xmath33 on the boundary of region @xmath55 , with @xmath60 . but this is impossible , by the argument in the last paragraph .    therefore , @xmath51 and @xmath52 must properly intersect , so @xmath44 and @xmath45 are adjacent .",
    "@xmath35 +   + proof of proposition [ p : nocut ] : our proof is very similar to the proof of proposition [ p : theta ] .",
    "we will first show that the conditions are sufficient .",
    "once again , the idea is simply to draw the chord @xmath31 corresponding to a vertex @xmath44 labeled @xmath50 in the region @xmath50 .",
    "since both endpoints of @xmath31 lie on the boundary of @xmath50 , they can be connected by an arc in @xmath50 .",
    "the first condition ensures that this arc will be an embedding of the oriented chord @xmath31 .",
    "so the embedding of @xmath14 can be individually extended to each chord in @xmath15 .",
    "we still need to show it can be extended to all the chords at once .",
    "let @xmath33 be another chord on region @xmath50 , with corresponding vertex @xmath45 .",
    "by lemma [ l : alternate ] , if @xmath44 and @xmath45 are _ not _ adjacent , then the endpoints of @xmath31 and @xmath33 must _ not _ alternate around the boundary of @xmath50 . since the set of vertices labeled @xmath50 is independent , none of the corresponding chords have alternating endpoints around the boundary of @xmath50 .",
    "so these chords can be embedded in @xmath50 as disjoint arcs , as in proposition [ p : circle ] .",
    "this can be done for each label @xmath50 , resulting in an embedding of @xmath15 which extends @xmath19 .",
    "it remains to show that the conditions are necessary .",
    "assume that @xmath19 can be extended to @xmath15 .",
    "then each chord is embedded as an arc in some region @xmath50 , with endpoints on edges @xmath17 and @xmath18 . if @xmath50 is on the same side of both edges , then",
    "so is the embedded chord , and the endpoints must have opposite orientations ; if it is on opposite sides , the endpoints must have the same orientation .",
    "so the first condition is necessary .",
    "now label the vertex @xmath44 in @xmath24 corresponding to chord @xmath31 by the region in which @xmath31 is embedded in @xmath46 .",
    "obviously , both endpoints of @xmath31 must be on the boundary of this region .",
    "chords which are in the same region @xmath50 do not cross , so their endpoints do not alternate around the boundary of @xmath50 ( since the boundary of @xmath50 is a cycle ) . then there are clearly non - overlapping paths between the endpoints of the chords , so the corresponding vertices are not adjacent in @xmath24 .",
    "so vertices with the same label will not be adjacent .",
    "this shows that the second condition is necessary , and completes the proof .",
    "[ c : nocut ] given a planar graph @xmath14 with no cut edges , a chord diagram @xmath15 on @xmath14 , and a planar embedding @xmath16 , there is a polynomial time algorithm to determine whether @xmath19 extends to an embedding of @xmath15 .",
    "proof : the conditions of proposition [ p : nocut ] can be checked in polynomial time . the coloring of most chords is forced by the location of their endpoints .",
    "those that are left have both endpoints on boundaries of the same two regions , and it is enough to show that the subgraph in @xmath24 induced by the remaining chords lying on each pair of regions is bipartite .",
    "@xmath35      now we want to consider planar graphs which _ do _ have cut edges . as an introduction , we will consider the simplest such graph , the complete graph on two vertices @xmath61 ( i.e. the line segment consisting of two endpoints and the edge between them ) .",
    "why do cut edges pose difficulties ?",
    "one difficulty is that the boundaries of the regions in a planar embedding of the graph are no longer cycles in the graph .",
    "for example , we might expect a line segment to be no more complicated than a circle . but consider the example in figure  [ f : lineexample ] .",
    "[ h ] @xmath62    the sequence of endpoints along the graph is @xmath63 . according to definition [ d : igplanar ] , all three of these chords intersect .",
    "so the intersection graph has a cycle of length 3 , and so is not bipartite .",
    "and yet we _ can _ extend the embedding of the line segment to an embedding of the chord diagram , so proposition [ p : circle ] does not extend to @xmath61 .",
    "the fact that chords can go  around the end \" of the graph increases the difficulty of the problem .",
    "however , we would still like to exploit our results from section [ ss : nocut ] .",
    "so our plan is to transform a graph _ with _ cut edges into a graph _ without _ cut edges , and hope solving the problem in this new graph will give us the solution for the original graph . to this end",
    ", we introduce an operation called  blowing up \" an edge in a planar embedding of a graph or chord diagram .",
    "[ d : blowup ] let g be a planar directed graph with an edge e ( which is not a loop ) , and let @xmath16 be a planar embedding of g. say that the endpoints of e are vertices v and w , with e oriented from v to w. then the * blowup of @xmath47 in @xmath14 with respect to @xmath19 * is the graph @xmath64 formed by removing edge @xmath47 and replacing it with two edges e and @xmath65 , both directed from @xmath66 to @xmath67 .",
    "figure  [ f : blowup ] illustrates this operation .",
    "[ h ] @xmath68    remark : figure [ f : blowup ] also shows that the embedding @xmath19 of @xmath14 is easily modified to give an embedding @xmath69 of @xmath64 . in particular , this means that @xmath64 is also a planar graph .    what is the effect of blowing up an edge @xmath47 on a chord diagram @xmath15 on @xmath14 ?",
    "if @xmath70 is a chord of @xmath15 , label its endpoints by @xmath71 and @xmath72 .",
    "if @xmath73 is on edge @xmath47 in @xmath14 , it will be doubled in @xmath64 , appearing on both @xmath47 and @xmath65 .",
    "in other words , the sequence of endpoints along @xmath47 and @xmath65 will both be the same as the original sequence along @xmath47 .",
    "the  chord \" @xmath70 now consists of all pairings of a point labeled @xmath71 and a point labeled @xmath72 ; there are @xmath74 such pairings , where @xmath75 is the number of endpoints of the original chord @xmath70 which were on edge @xmath47 .",
    "we give each pairing its own name , @xmath76 , yielding a new chord diagram @xmath77 on @xmath64 .",
    "if the chord diagram @xmath15 is oriented , then the orientations of @xmath71 and @xmath72 are also replicated in @xmath64 .",
    "if the chord @xmath70 in @xmath15 respected the embedding @xmath19 , and @xmath70 had an endpoint on @xmath47 , then only half of the set of chords labeled @xmath70 in @xmath64 will respect the embedding @xmath69 .",
    "so we obtain the _ reduced _ oriented chord diagram @xmath78 on @xmath64 by discarding those chords @xmath70 which do not respect @xmath69 . the intersection graph @xmath79 is defined as before .",
    "we will add to this graph edges between all the chords which came from the chord @xmath70 , to get a new intersection graph @xmath80 .",
    "figure  [ f : chordblowup ] illustrates this process for an example with @xmath81 .",
    "[ h ] @xmath82    [ p : line ] let @xmath83 be a directed line segment , and let @xmath16 be an embedding .",
    "let @xmath15 be an oriented chord diagram on @xmath14 .",
    "let @xmath64 be the result of blowing up the single edge @xmath47 of @xmath14 , @xmath69 be the resulting embedding of @xmath64 , and @xmath78 be the reduced oriented chord diagram on @xmath64 obtained from @xmath15 . then @xmath19 can be extended to an embedding of @xmath15 if and only if @xmath80 is bipartite .",
    "proof : in this case , every chord in @xmath15 has both endpoints on @xmath47 , so each chord of @xmath15 corresponds to 4 chords in @xmath77 , and hence 2 chords in @xmath78 .",
    "we first show the sufficiency . if @xmath80 is bipartite , then so is its subgraph @xmath79 . since every chord in @xmath15 respects @xmath19 ( since the only edge is a cut edge ) , @xmath15 respects @xmath19 ; so by definition @xmath78 respects @xmath69 and contains a chord corresponding to every chord in @xmath15 .",
    "so by proposition [ p : circle ] , @xmath69 extends to an embedding of @xmath78 .",
    "moreover , by using the partition of vertices from @xmath80 , we can extend @xmath69 so that exactly one of each pair of chords @xmath84 is inside the cycle @xmath64 and one is outside .",
    "the chords which are outside give an extension of @xmath19 to @xmath15 .",
    "conversely , if @xmath19 extends to @xmath15 , then we can draw the chords of @xmath15 as disjoint arcs in the single region of @xmath20 .",
    "these arcs can then be drawn as arcs outside the cycle @xmath64 in @xmath85 .",
    "but there is another extension of @xmath19 to @xmath15 obtained by taking the reflection of the first embedding across the axis defined by the image of @xmath14 .",
    "these arcs can be drawn _ inside _ the circle @xmath85 .",
    "together , these give an extension of @xmath69 to an embedding of @xmath78 , so @xmath79 is bipartite . since the arcs for the chords @xmath70 and",
    "@xmath86 in this extension are on opposite sides of the circle , adding edges between them in the intersection graph will not affect the partition into two independent sets , so @xmath80 is also bipartite . @xmath35    notice that , in figure [ f : chordblowup ] , the intersection graph @xmath80 is bipartite , and the chord diagram @xmath78 can be embedded as shown .",
    "we can extend the ideas of the last section to prove the analogue of proposition [ p : nocut ] for chord diagrams on graphs with cut edges .",
    "our plan is simply to blow up every cut edge , as in section [ ss : chordline ] , and consider the resulting graph , which no longer has cut edges .    consider a graph @xmath14 , and let @xmath87 be the set of cut edges .",
    "let @xmath88 be the result of blowing up every edge in @xmath87 .",
    "if @xmath15 is an oriented chord diagram on @xmath14 , then @xmath89 is the corresponding chord diagram on @xmath88 .",
    "if @xmath16 is an embedding of @xmath14 in the plane , then we have a corresponding embedding @xmath90 of @xmath88 .",
    "the regions of @xmath91 are essentially the same as the regions of @xmath20 , together with the new regions created by the blown up edges ( one new region for each cut edge in @xmath14 ) .",
    "if we label the regions of @xmath20 by @xmath92 , then we can give the corresponding regions of @xmath91 the same labels ; in addition , we will give _ all _ the regions created by blowing up cut edges on the boundary of @xmath41 the same label @xmath93 .",
    "the  region \" @xmath93 is the union of all these regions , and its boundary is the union of the images @xmath94 of the cut edges of @xmath41 in @xmath15 , in the same order that they are found in the boundary of @xmath41 in @xmath89 ( so the boundary of @xmath93 is a subset of the boundary of @xmath41 ) .",
    "this is illustrated in figure [ f : boundaries ] .",
    "[ h ] @xmath95    as usual , a chord of @xmath89 _ respects _ @xmath90 if it satisfies definition [ d : respect ] , treating @xmath93 as a single region .",
    "so we can consider the reduced chord diagram @xmath96 which results from removing all the chords in @xmath89 which do not respect @xmath90 .",
    "the intersection graph @xmath97 is defined as usual , with the exception that a  path \" on the boundary of a region @xmath93 is taken to be a sequence of consecutive edges in the boundary of @xmath93 ( as defined in the last paragraph ) , even though these edges may not be adjacent in @xmath88 . as in section [ ss : chordline ] , @xmath98 is defined by adding to @xmath97 edges between vertices corresponding to chords in @xmath96 which came from the same chord in @xmath15 .",
    "[ p : cut ] let g be a directed planar graph with a set of cut edges e , and let @xmath88 be the result of blowing up the edges in e , as described above .",
    "let @xmath16 be a planar embedding of g , and let c be an oriented chord diagram on g. label the regions of f(g ) by @xmath41 ( @xmath49 number of regions ) .",
    "we define @xmath90 and @xmath89 as described above .",
    "then f extends to an embedding of c if and only if the following conditions are met :    1 .",
    "c respects f. 2 .",
    "the vertices of @xmath98 can be labeled by the regions @xmath41 and @xmath93 so that : * if a vertex is labeled @xmath50 , then the corresponding chord in @xmath96 has both endpoints on the boundary of region @xmath50 in @xmath91 . * for each region",
    "@xmath50 ( @xmath41 or @xmath93 ) , the set of vertices labeled @xmath50 is independent . *",
    "if @xmath70 was a chord of @xmath15 with both endpoints on a cut edge in the boundary of @xmath41 , then exactly one of the chords @xmath84 in @xmath96 is labeled @xmath41 , and the other is labeled @xmath93 .",
    "proof : we first show the sufficiency . from proposition",
    "[ p : nocut ] , the conditions imply that @xmath90 extends to an embedding of @xmath96 . moreover , for every chord in @xmath15 , there is exactly one corresponding chord of @xmath96 whose image lies in the union of the regions @xmath41 ( as opposed to the regions @xmath93 ) .",
    "so we can then  collapse \" the regions @xmath93 ( reversing the blowup operations ) to obtain an embedding of @xmath15 which extends @xmath19",
    ".    for the necessity , assume that @xmath19 does extend to @xmath15 .",
    "then , for any chord @xmath70 of @xmath15 such that @xmath99 is an arc in the region @xmath41 , there is a corresponding arc in the region @xmath41 in the complement of @xmath91 .",
    "these arcs are all still disjoint .",
    "this provides an embedding of almost all chords of @xmath96 ; label the vertices in @xmath98 corresponding these chords by the region in which each is embedded .",
    "the vertices labeled @xmath41 will still be independent , as they were in @xmath24 .",
    "the only remaining chords are  doubles \" of chords which have already been embedded in some @xmath41 , and which correspond to chords in @xmath15 which had both endpoints on cut edges on the boundary of @xmath41 .",
    "so these chords have both endpoints on the boundary of @xmath93 , and the corresponding vertices can be labeled @xmath93 .",
    "it only remains to check that the vertices labeled @xmath93 will be independent .",
    "however , the order of the endpoints of the chords labeled @xmath93 around the  boundary \" of @xmath93 is exactly the reverse of the order of the endpoints of their  doubles \" around the boundary of @xmath41 .",
    "so the endpoints of two chords alternate around the boundary of @xmath93 only if the endpoints of their doubles alternate around the boundary of @xmath41 . since the vertices labeled @xmath41 are all independent , so are the vertices labeled @xmath93 . so the conditions of the proposition are satisfied , completing the proof .",
    "[ c : cut ] given a planar graph @xmath14 , a chord diagram @xmath15 on @xmath14 , and a planar embedding @xmath16 , there is a polynomial time algorithm to determine whether @xmath19 extends to an embedding of @xmath15 .",
    "proof : from corollary [ c : nocut ] , we can check whether @xmath90 extends to @xmath96 in polynomial time .",
    "the only condition that is left to check is the last one , that one of each pair @xmath84 can be labeled @xmath41 and the other @xmath93 . since , for a connected graph",
    ", there is at most one division into two independent sets ( vertices with paths which are odd or even length to a given vertex ) , this can be done very quickly after determining that the set of chords with endpoints on @xmath41 and @xmath93 is bipartite . @xmath35",
    "as an application , we will use chord diagrams and intersection graphs for graphs to study gauss codes for graphs .",
    "the gauss code was first developed by c. f. gauss to study closed curves in the plane which intersect themselves only in transverse double points ( called  crossings \" ) .",
    "label the crossings by some set of symbols ( such as integers or the letters of the alphabet ) , and give the curve an orientation .",
    "beginning at an arbitrary crossing , we obtain a gauss code for the curve by writing down the sequence of labels of the crossings passed as we traverse the curve , following its orientation .",
    "the gauss code provides a convenient combinatorial representation of the curve .",
    "however , not all sequences which  look like \" gauss codes actually represent closed curves in the plane . the problem is to determine ( in polynomial time ) which sequences of symbols can be obtained from a closed curve in this way - i.e. , which sequences are _ realizable _ as the gauss code for a closed curve in the plane .",
    "there are several different solutions to this problem @xcite , we will describe one in section  [ ss : circle ] which uses proposition [ p : circle ] .",
    "kauffman s recent development of the theory of virtual knots @xcite was motivated in part by a desire to realize the  unrealizable \" gauss codes .",
    "this paper was largely motivated by a desire to extend kauffman s work to spatial graphs , and study  virtual \" spatial graphs . as a preliminary ,",
    "we need to extend the notion of a gauss code to general graphs , and consider when an abstract code is realizable by an immersion of a graph in a plane . in future work , this will lead to the introduction of virtual spatial graphs @xcite .    our goal is to generalize to the situation where we have an immersion of an arbitrary graph in the plane , rather than a circle . in this case , as described in section  [ ss : graph ] , the  gauss code \" is a set of sequences associated with the edges of the graph .",
    "we will give a algorithm , based on proposition [ p : cut ] , for determining whether an abstract gauss code can be realized as the gauss code for an immersed graph and , if so , constructing the desired immersion .",
    "we will first describe a method for determining whether a classical gauss code is realizable by an immersed closed curve in the plane .",
    "this problem was first solved by dehn @xcite , and a clear presentation of his solution is given by read and rosenstiehl @xcite .",
    "our method builds on dehn s , and is equivalent to that given by de fraysseix and ossona de mendez @xcite , but is presented in the language of chord diagrams developed in section [ s : chord ] .",
    "an oriented closed curve in the plane gives rise to a crossing sequence , the _ gauss code _ for the curve , by labeling the @xmath26 self - crossings of the curve , and then writing down the sequence of @xmath100 labels encountered as we trace the curve following its orientation ( obviously , the code is only unique modulo cyclic permutations ) .",
    "an example is shown in figure  [ f : gaussloop ] .",
    "the problem , initially posed by gauss , is to determine whether an arbitrary sequence of length @xmath100 , containing two occurrences each of @xmath26 symbols , is realizable as the gauss code of a closed plane curve .",
    "we will call such a sequence a _ crossing sequence _ , and refer to the symbols as _ crossings_. we follow read and rosenstiehl by defining a _ splitting _ of a crossing sequence at each crossing , and then studying the resulting _ split sequence _ or _ split",
    "code_. the notion of splitting a crossing is motivated by the idea of smoothing a self - intersection of a curve in the plane into two non - intersecting arcs .",
    "we consider a small neighborhood of a self - crossing @xmath102 . inside this neighborhood , we replace the two intersecting arcs with two disjoint arcs with the same endpoints , as shown in figure  [ f : split ] .",
    "this replacement is done so as to preserve the number of components of the curve , which requires reversing the orientation of one of the arcs from @xmath102 to itself , so that the resulting curve is still oriented . aside from the change of orientation , the operation is entirely local , so if we label points @xmath104 and @xmath105 on the two new arcs , we can draw a chord @xmath106 between them which does not intersect the rest of the curve and is contained within the original neighborhood of the crossing , as shown in figure [ f : split ] .",
    "notice that , if the chord @xmath106 is oriented , its endpoints at @xmath104 and @xmath105 will have opposite orientations .      [",
    "d : splitting ] given a sequence @xmath107 , * splitting s at p * means to replace s by @xmath108 , where we say that @xmath104 and @xmath105 have opposite orientations , and @xmath109 is the result of writing the subsequence @xmath110 in reverse order and reversing the orientation of any previously split symbols in @xmath110 .    given a crossing sequence @xmath55 , the result of splitting @xmath55 at",
    "_ every _ crossing is called a _ split sequence _ or _ split code _ for @xmath55 , and is denoted @xmath111 .",
    "the split code is _ not _ unique - it depends upon the order in which the crossings are split .",
    "figure  [ f : splitcode ] illustrates this procedure with an example of smoothing all the crossings in a closed plane curve , and the corresponding operations on the gauss code in order to obtain the split code .",
    "the result of performing the splitting process on a closed plane curve is a _ simple _ closed curve ( i.e. an embedded circle ) labeled by the split code .",
    "we will call this the _",
    "split curve_. clearly , the split curve is an oriented chord diagram on the circle , in the sense of definition [ d : orientchord ] . to reconstruct the original curve from the split curve , we simply need to connect each pair of points @xmath104 and @xmath105 by the chord @xmath106 shown in figure [ f : split ] , and contract the chords to bring the points back together , reversing the splitting process . so reconstructing the original curve",
    "is done by extending the embedding of the underlying circle of the split curve to an embedding of the oriented chord diagram represented by the split curve .",
    "this leads directly to the following result .",
    "[ t : closedcurve ] @xcite a crossing sequence s is realizable as the gauss code of a closed curve in the plane if and only if the the oriented chord diagram on the circle represented by the split sequence s * can be embedded in the plane .",
    "proof : from the discussion above , if the crossing sequence @xmath55 is realizable , then there is an embedding of the chord diagram @xmath111 .",
    "conversely , an embedding of @xmath111 can be turned into a collection of intersecting closed loops by expanding each chord into a crossing , reversing the splitting operation in figure [ f : split ] .",
    "it only remains to check that this process will yield a single closed curve with gauss code @xmath55 ( this is the _ complete traceability _ of @xcite ) .",
    "say that @xmath111 was produced from @xmath55 via a series of sequences @xmath113 , where @xmath114 is the result of splitting crossing @xmath11 in @xmath93 .",
    "we will expand the chords between pairs of symbols in @xmath111 in the reverse order from how they were split - i.e. the last symbol to be split is the first chord added .",
    "so we begin with the chord @xmath115 between @xmath116 and @xmath117 in @xmath118 . expanding this chord into a crossing , and reversing",
    "the orientation on the arc of @xmath119 originally directed from @xmath116 to @xmath117 , exactly reverses the splitting process of definition [ d : splitting ] .",
    "a key observation is that , since @xmath116 and @xmath117 have opposite orientations , the result of expanding the chord is a closed curve with one component .",
    "since we have exactly reversed the final splitting operation , the result is an oriented closed curve @xmath120 whose gauss code is @xmath121",
    ". we can continue this process , always choosing to expand the chord corresponding to the last crossing which was split , so that its endpoints have opposite orientation and the resulting curve still has a single component . in this way",
    ", we can successively construct an oriented closed curve @xmath122 for each sequence @xmath93 .",
    "ultimately , we will have a curve @xmath15 whose gauss code is the original crossing sequence @xmath55 , as desired .",
    "@xmath35 +   + remarks : there are several remarks that should be made at this point .    1 .",
    "to check whether a particular split code is embeddable , we apply the criteria of proposition [ p : circle ] .",
    "so we check that the two occurrences of each symbol have opposite orientation and that the intersection graph is bipartite .",
    "the importance of theorem [ t : closedcurve ] is that this can be done in polynomial time . 2 .",
    "comparing with the _ d - switch _ operation of de fraysseix and ossona de mendez @xcite , the condition that the two occurrences of each symbol have opposite orientation is equivalent to saying that a symbol and its twin are not adjacent in the interlacement graph .",
    "so , the result of theorem [ t : closedcurve ] then also follows from the proof of theorem 6 in @xcite .",
    "kauffman @xcite provides another characterization , in which the condition that each pair of symbols have opposite orientations is replaced by the condition that the crossing sequence @xmath55 is _ evenly intersticed _",
    ", meaning that between two occurrences of any symbol is a word of even length .",
    "however , kauffman does not prove that this requirement is sufficient .",
    "it is not hard to show that , if @xmath55 is evenly intersticed , then the number of unsplit symbols between a pair of split symbols ( at any stage in the process of splitting @xmath55 ) is even exactly when the split symbols have opposite orientations . since , in @xmath111 , the number of unsplit symbols is 0 , and hence even , all pairs of split symbols have opposite orientations , so by proposition [ p : circle ] and theorem [ t : closedcurve ] the crossing sequence is realizable .",
    "this shows that kauffman s characterization is also valid .",
    "not every sequence of symbols @xmath111 which satisfies the conditions of theorem [ t : closedcurve ] is the split code of a crossing sequence . for example",
    ", if the reconstruction algorithm is applied to the sequence @xmath123 , the result will be a curve with two components ; however , this is not a contradiction because this sequence _ can not _ be obtained as the split code of a crossing sequence . to see this ,",
    "observe that if we  unsplit \" symbol @xmath124 we are left with @xmath125 - since the two occurrences of @xmath126 have the same orientation , this could not be the result of a splitting operation ; attempting to unsplit @xmath126 leads to a similar situation .",
    "we would like to extend the ideas of the last section to general directed graphs . in this section",
    ", our graphs will be _ vertex - oriented _ , meaning that we have a cyclic order on the edges incident to each vertex .    given a graph @xmath14 , a _ gauss code for g _ consists of a set of symbols @xmath126 and a set of sequences in these symbols , one for each edge of the graph .",
    "each sequence will begin with the vertex at the start of the edge , and the position of the edge in the cyclic ordering around that vertex , and end with the vertex at the end of the edge , with the position of the edge in the cyclic ordering around the end vertex . in between are symbols from @xmath126 .",
    "notice that the abstract graph @xmath14 can be reconstructed from the set of gauss codes .    while an abstract graph has many possible gauss codes , we can assign a unique code ( up to cyclic permutation of the vertex orderings ) to any immersion of the graph in the plane , just as we do for immersions of circles . in this case ,",
    "the sequence of symbols just records the order of the crossings along each edge .",
    "an example is shown in figure  [ f : example ] .",
    "our first observation is that every symbol in the set of sequences ( other than the vertices ) must appear exactly twice .",
    "this allows us to create a _ split code _ from the original gauss code . as in the previous sections ,",
    "the motivation for the split code is to split the crossings of an immersion of a graph in the plane .",
    "there are two ways to split a crossing ( one is shown in figure  [ f : split ] ) - we want to perform the split so that the graph remains connected . if both splits preserve the connectedness of the graph , we can choose one arbitrarily .",
    "as before , we also want to keep track of the relative local orientations of the smoothed arcs .",
    "these operations can be defined abstractly in terms of the gauss code .",
    "if @xmath102 is a symbol in the alphabet @xmath126 , then splitting the code at @xmath102 means one of the following operations :    1 .",
    "if there is a sequence @xmath128 , then the new sequence is @xmath129 .",
    "so the subsequence @xmath110 has been reversed .",
    "if there are two sequences @xmath130 and @xmath131 , then the new sequences are either @xmath132 and @xmath133 or @xmath134 and @xmath135 .",
    "these are illustrated in figure  [ f : split2 ] .",
    "notice that , in the second case , the underlying graph is changed in either choice , but at least one of these graphs is connected .",
    "we will always make a choice which keeps the underlying graph connected . also notice that the first choice preserves orientations along each edge segment , while the second choice reverses the orientations along segments coming from one of the two edges .",
    "the result of performing this splitting operation on every symbol in the set of sequences gives a split code for the original gauss code .",
    "the underlying abstract graph for the split code is called the _",
    "split graph_. the splitting process is not unique - the final set of sequences after all crossings have been split will depend on the order in which they were split , and how they were split .",
    "any of these possibilities is called a split code for the original gauss code .",
    "a split code can be viewed as an oriented chord diagram on its split graph .",
    "[ l : planar ] if a gauss code is derived from an immersion of a connected graph , then the underlying split graph for any split code is planar and connected ; moreover , the split code determines a unique ( up to isotopy ) spherical embedding of the split graph .",
    "proof : if we begin with an immersion of a graph and split every crossing , we are left with a graph embedded in the plane ; this implies that the graph underlying the split code is planar , and the split code is realized by some planar embedding .",
    "the embedding is connected since we choose our splittings to keep the graph connected .",
    "it remains to show that this embedding is unique ( up to isotopy on the sphere ) .",
    "we will describe an algorithm for constructing a planar embedding from the split code .",
    "we will show that ( up to isotopy on the sphere ) the algorithm produces at most one embedding , and that it fails to produce an embedding respecting the split code only if one does not exist .",
    "in fact , we will not use all the information of the split code , only the underlying graph and the order of the edges around each vertex .",
    "the idea of the algorithm is to trace out faces of the planar embedding .",
    "begin with an arbitrary vertex @xmath66 , and an edge @xmath47 incident to @xmath66 .",
    "embed @xmath66 and @xmath47 .",
    "say that @xmath67 is the other endpoint of @xmath47 .",
    "let @xmath19 be the next edge adjacent to @xmath67 after @xmath66 ( using the cyclic ordering of the edges adjacent to @xmath67 ) , and add @xmath19 to the embedded graph .",
    "continue this process , moving one edge around each vertex .",
    "the first time we return to a vertex we have visited before , we will have two choices of how to draw the edge - clockwise or counterclockwise around the previously embedded parts of the graph .",
    "but these choices are isotopic on the sphere .",
    "once this first choice is made , all future edges will connect two points on the boundary of a ( topological ) disk , so all possible ways to draw them will be isotopic . as a result , there are no more choices to be made , and the resulting embedding is unique .    when we come to an edge we have reached before , skip it and move to the next unused edge on that vertex . if there are no more unused edges on the vertex , then backtrack to the last vertex with an unused edge .",
    "continue in this way until all the edges have been drawn ( the procedure will terminate , since the graph is connected ) .",
    "if we are able to do this without edges crossing , we will have a planar embedding of the split graph , uniquely determined by the underlying graph and the vertex orientations .",
    "@xmath35    lemma [ l : planar ] allows us to embed the split graph in the plane . as in earlier sections , if the original gauss code is realizable then we can recover an immersion of a graph from this embedding code by connecting the two occurrences of each symbol in the split graph by disjoint chords which respect the orientations of the symbols , and then expanding the chords as in figure [ f : expand2 ] .            proof : if @xmath55 is realizable , then the split code @xmath111 can be embedded in the plane as an oriented chord diagram .",
    "so the underlying split graph can be embedded ( and is therefore planar ) , and this embedding extended to the chord diagram .",
    "conversely , if the chord diagram can be embedded , we can expand each chord into a crossing as in figure [ f : expand2 ] .",
    "it only remains to check that the result is an immersion of @xmath14 with gauss code @xmath55 .    as in theorem [ t",
    ": closedcurve ] , we expand the chords between symbols in the reverse order that the symbols were split .",
    "say that @xmath111 was produced from @xmath55 via a series of sequences @xmath113 , where @xmath114 is the result of splitting crossing @xmath11 in @xmath93 . since each splitting was chosen to keep the graph connected , expanding the splits in the reverse order",
    "will also keep the graph connected .",
    "our goal is for these expansions to exactly reverse the effects of the splitting process on the original gauss code .",
    "there is one possible ambiguity : the expansion process shown in figure [ f : expand2 ] assumes that crossings between different edges were always split so as to preserve the orientations of the edges ; but , in order to keep the graphs connected , it may have been necessary to reverse the orientations of one of the two edges , as shown in figure [ f : split2 ] .",
    "so the expansion may leave one of the edges with the ",
    "wrong \" orientation .",
    "however , since we have recorded all the sequences @xmath93 , this is easily fixed - simply compare the code for our current graph with the corresponding @xmath93 .",
    "they will differ in at most the orientation of one edge , so we can simply reverse the orientation of this edge in our graph , and continue the process .",
    "the final result will be an immersion of @xmath14 with gauss code @xmath55 .",
    "@xmath35      proof : producing the split code can be done in linear time , and there are linear - time algorithms for determining whether the split graph is planar @xcite . finally , by corollary [ c : cut ] , we can determine whether the embedding of @xmath138 extends to @xmath111 in polynomial time as well . @xmath35",
    "+ remark : in the theory of spatial graphs , a spatial embedding of a graph can be described by the _",
    "gauss code _ for a particular diagram of the knot ( a projection of the knot to the plane ) . in this context",
    ", the gauss code comes with additional information at each crossing , indicating which edge crosses over the other and the sign of the crossing .",
    "corollary [ c : gauss ] implies that there is a polynomial time algorithm to determine whether a gauss code is realizable in this context as well .",
    "once we have determined whether the code can be realized by an immersion of the graph in the plane , and constructed such an immersion , using theorem [ t : graph ] , we simply need to check whether the sign and over / under information at each crossing are compatible .",
    "10 d. bar - natan : on the vassiliev knot invariants , _ topology _ 34 , no .",
    "423 - 472 , 1995 d. bar - natan and s. garoufalidis : on the melvin - morton - rozansky conjecture , _ invent .",
    "_ 125 , pp .",
    "103 - 133 , 1996 j. birman and x. s. lin : knot polynomials and vassiliev s invariants , _ invent .",
    "_ 111 , pp . 225 - 270 , 1993 a. bouchet : circle graph obstructions , _ j. comb .",
    "theory , series b _ 60 , p.107 - 144 , 1994 j. boyer and w. myrvold : on the cutting edge : simplified @xmath139 planarity by edge addition , _ j. graph algorithms and applications _ , vol . 8 , no .",
    "241 - 273 , 2004 s. v. chmutov , s. v. duzhin , and s. k. lando : vassiliev knot invariants i , ii , iii , _ advances in soviet mathematics _ 21 , pp .",
    "117 - 145 , 1994 m. dehn : ber kombinatorische topologie , _ acta math .",
    "_ 67 , 1936 , pp .",
    "123 - 168 s. even and a. itai : queues , stacks and graphs , in _ theory of machines and computations _",
    "( z. kohavi and a. paz , eds ) , academic press , new york , 1971 , pp .",
    "71 - 86 t. fleming and b. mellor : virtual spatial graphs , preprint , 2005 , arxiv : math.gt/0510158 h. de fraysseix and p.",
    "ossona de mendez : on a characterization of gauss codes , _ discrete comput .",
    "_ , v. 22 , 1999 , pp .",
    "287 - 295 h. goda : bridge index for theta curves in the 3-sphere .",
    "_ topology appl .",
    "_ , v. 79 , 1997 , pp .",
    "177 - 196 .",
    "l. kauffman : virtual knot theory , _ europ .",
    "j. combinatorics _ , v. 20 , 1999 , pp .",
    "663 - 691 s. kinoshita : on @xmath140-curves in @xmath141 and their constituent knots , _ topology and computer science ( atami , 1986 ) _ , kinokuniya , tokyo , 1987 , pp .",
    "211 - 216 s. lando : on a hopf algebra in graph theory ,",
    "_ j. comb .",
    "theory , series b _ 80 , p.104 - 121 , 2000 t. a. mckee and f. r. mcmorris : _ topics in intersection graph theory _ , siam , philadelphia , 1999 b. mellor : the intersection graph conjecture for loop diagrams , _ j. knot theory ramif .",
    "_ 9 , no . 2 , 2000 b. mellor : a few weight systems arising from intersection graphs , _ michigan math",
    ". j. _ , vol .",
    "509 - 536 , 2003 r. nikkuni : delta edge - homotopy on theta curves , _ math .",
    "cambridge philos .",
    "_ , v. 138 , 2005 , pp .",
    "401 - 420 .",
    "r. c. read and p. rosenstiehl : on the gauss crossing problem , _ colloq .",
    "janos bolyai _ , v. 18 , _ combinatorics _ , keszthely , hungary , 1976 , pp",
    ". 843 - 876"
  ],
  "abstract_text": [
    "<S> chord diagrams on circles and their intersection graphs ( also known as _ circle graphs _ ) have been intensively studied , and have many applications to the study of knots and knot invariants , among others . however , chord diagrams on more general graphs have not been studied , and are potentially equally valuable in the study of spatial graphs . </S>",
    "<S> we will define chord diagrams for planar embeddings of planar graphs and their intersection graphs , and prove some basic results . then , as an application , we will introduce gauss codes for immersions of graphs in the plane and give algorithms to determine whether a particular crossing sequence is realizable as the gauss code of an immersed graph . </S>"
  ]
}