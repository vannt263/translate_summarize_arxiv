{
  "article_text": [
    "in this paper , we proposed a computationally efficient gpu implementation of a hamming code decoder for faster error recovery in data communication networks . we compared the performance of the proposed gpu approach with an equivalent sequential approach on a traditional cpu .",
    "the gpu - based implementation strongly outperformed the cpu - based sequential approach in terms of execution time , yielding a 99@xmath28 speedup .",
    "these results indicate that the proposed gpu approach is suitable for application in time - sensitive and high - speed wired and wireless communication systems .",
    "s. gronroos , k. nybom , and j. bjorkqvist , complexity analysis of software defined dvb - t2 physical layer ,   _ journal of analog integrated circuits and signal processing _ ,",
    "69 , no . 2 - 3 ,",
    "131 - 142 , dec . 2011 .",
    "a. refaey , s. roy , p. fortier , a new approach for fec decoding based on the bp algorithm in lte and wimax systems ,   in _ proc .",
    "12th ieee canadian workshop on information theory ( cwit ) _",
    ", pp.9 - 14 , 17 - 20 may 2011 .",
    "y. lin , h. lee , m. who , y. harel , s. mahlke , t. mudge , c. chakrabarti , k. flautner , soda : a high - performance dsp architecture for software - defined radio ,   _ ieee journal of microcomputer and microprocessor systems _ , vol.27 , no.1 , pp.114 - 123 , jan .- feb .",
    "2007 .",
    "m. palkovic , p. raghavan , m. li , a. dejonghe , l. van der perre , f. catthoor , future software - defined radio platforms and mapping flows ,   _ ieee magazine of signal processing _ ,",
    "vol.27 , no.2 , pp.22 - 33 , mar .",
    "2010 .",
    "t. beluch , f. perget , j. henaut , d. dragomirescu , r. plana , mostly digital wireless ultrawide band communication architecture for software defined radio ,   _ ieee microwave magazine _ , vol.13 , no.1 , pp.132 - 138 , jan .- feb . 2012 .",
    "c. s. lin , w. l. liu , w. t. yeh , l. w. chang , w. m. w. hwu , s. j. chen , p. a. hsiung , a tiling - scheme viterbi decoder in software defined radio for gpus ,   in _ proc .",
    "2011 7th international conference on wireless communications , networking and mobile computing ( wicom ) _ , pp.1 - 4 , 23 - 25 sept . 2011 .    v.",
    "b. alluri , j. r. heath , m. lhamon , a new multichannel , coherent amplitude modulated , time - division multiplexed , software - defined radio receiver architecture , and field - programmabale - gate - array technology implementation ,   _ ieee transactions on signal processing _ , vol .",
    "10 , pp.5369 - 5384 , 2010 .",
    "y. zhao , f.c.m .",
    "lau , implementation of decoders for ldpc block codes and ldpc convolutional codes based on gpus ,   _ ieee transactions on parallel and distributed systems _ ,",
    "vol.25 , no.3 , pp.663 - 672 , mar .",
    "2014 .",
    "r. li , j. zhou , y. dou , s. guo , dan zou , and s. wang , a multi - standard efficient column - layered ldpc decoder for software defined radio on gpus ,   in _ proc .",
    "ieee 14th workshop on signal processing advances in wireless communications ( spawc ) _ , pp.724 - 728 , 16 - 19 jun .",
    "r. li , y. dou , y. li , s. wang , a fully parallel truncated viterbi decoder for software defined radio on gpus ,   in _ proc . 2013 ieee wireless communications and networking conference ( wcnc ) _ , pp.4305 - 4310 , 7 - 10 apr . 2013 .",
    "c. ahn , j. kim , j. ju , j. choi , b. choi , and s. choi , implementation of an sdr platform using gpu and its application to a 2x2 mimo wimax system ,   _ journal of analog integrated circuits and signal processing _ , vol .",
    "107 - 117 , 2011 .",
    "j. xu , k. li , and g. min , reliable and energy - efficient multipath communications in underwater sensor networks ,   _ ieee transactions on parallel and distributed systems _ , vol.23 , no.7 , pp.1326 - 1335 , jul .",
    "2012 .",
    "amat , c. a. nour , and c. douillard , serially concatenated continuous phase modulation for satellite communications ,   _ ieee transactions on wireless communications _ , vol.8 , no.6 , pp.3260 - 3269 , jun .",
    "c.argyrides , r. r. ferreira , c.a .",
    "lisboa , and l. carro , decimal hamming : a software - implemented technique to cope with soft errors ,   in _ proc .",
    "2011 ieee international symposium on defect and fault tolerance in vlsi and nanotechnology systems _ , pp.11 - 17 , 3 - 5 oct .",
    "2011 .",
    "photo_shohidul.epsmd shohidul islam received a b.s .",
    "degree in computer science and engineering from rajshahi university of engineering and technology , rajshahi , bangladesh , in 2007 , and an m.s . in computer engineering from the university of ulsan , ulsan , south",
    "korea , in 2014 .",
    "his current research interests include high - speed error coding , gpu computing , software defined radio ( sdr ) , parallel computing , and the performance evaluation of many - core processors for application - specific soc design .",
    "photo_cheolhongkim.epscheol - hong kim received a bs , a ms , and a phd in computer engineering from seoul national university , seoul , korea , in 1998 2000 , and 2006 , respectively .",
    "he is an associate professor of electronics and computer engineering at chonnam national university , gwangju , korea .",
    "his research interests include multicore architecture and embedded systems .",
    "photo_jongmyonkim.epsjong - myon kim received a b.s .",
    "degree in electrical engineering from myongji university , yongin , south korea , in 1995 , an m.s . in electrical and computer engineering from the university of florida , gainesville , in 2000 , and a ph.d .",
    "in electrical and computer engineering from the georgia institute of technology , atlanta , in 2005 .",
    "he is an associate professor of electrical engineering at the university of ulsan , ulsan , south korea .",
    "his research interests include gpu computing , multimedia specific processor architecture , parallel processing , and embedded systems .",
    "he is a member of ieee and ieice ."
  ],
  "abstract_text": [
    "<S> this paper presents a computationally efficient implementation of a hamming code decoder on a graphics processing unit ( gpu ) to support real - time software - defined radio ( sdr ) , which is a software alternative for realizing wireless communication . </S>",
    "<S> the hamming code algorithm is challenging to parallelize effectively on a gpu because it works on sparsely located data items with several conditional statements , leading to non - coalesced , long latency , global memory access , and huge thread divergence . to address these issues </S>",
    "<S> , we propose an optimized implementation of the hamming code on the gpu to exploit the higher parallelism inherent in the algorithm . </S>",
    "<S> experimental results using a compute unified device architecture ( cuda)-enabled nvidia geforce gtx 560 , including 335 cores , revealed that the proposed approach achieved a 99x speedup versus the equivalent cpu - based implementation .    </S>",
    "<S> hamming code , gpu optimization , software - defined radio .    </S>",
    "<S> [ [ sec : introd ] ]    many existing wireless communication systems employed application specific integrated circuits ( asics ) based dedicated devices for particular communication protocol standards , including worldwide interoperability for microwave access ( wimax , ieee 802.16 ) , wi - fi ( ieee802.11 ) , digital high definition tv , wideband code division multiple access ( w - cdma ) , and global system for mobile communication ( gsm )  [ 1]-[7 ] . </S>",
    "<S> however , the fixed functionality of such asic devices limits their application to emerging communication standards because they were fixed for specific coding schemes , data rates , frequency ranges , and types of modulation  [ 8 ] . </S>",
    "<S> in addition , manufacturing costs are high and time - to - market of hardware devices is long  [ 9 ] . </S>",
    "<S> software - defined radio ( sdr ) is an emerging technology that offers software alternatives to existing hardware solutions for wireless communication  [ 10],[11 ] , sdr technology has recently attracted the interest of the communication research community  [ 12],[13 ] . </S>",
    "<S> sdr comprises software implementation of multi - standard and multi - protocol communication systems using one hardware platform  [ 14 ] . </S>",
    "<S> it allows system reconfiguration by using software commands , because users are required to switch from one standard to another standard very frequently  [ 15 ] . </S>",
    "<S> in addition , it enables the radio device to change transmitting and receiving characteristics by means of the software without altering the hardware platform  [ 15 ] . in sdr , </S>",
    "<S> some or all of the physical layer functions are coded in the software , which runs on general - purpose programmable processors ( gpps ) and digital signal processors ( dsps )  [ 16],[17 ] . </S>",
    "<S> gpps and dsps offer the necessary programmability and flexibility for various sdr applications . </S>",
    "<S> however , neither gpps nor dsps can meet the much higher levels of performance required by high computational workloads in sdr  [ 18 ] . among many available computational models , </S>",
    "<S> graphics processing units ( gpus ) perform well when performing latency - tolerant , highly parallel , and independent tasks . attracted by the features of modern gpus , </S>",
    "<S> many researchers have developed gpu - based sdr systems including turbo decoders , ldpc decoders , viterbi decoders , and mimo detectors to meet the high throughput required by the sdr algorithm  [ 19]-[25 ] . in this paper , we present an optimized implementation of a hamming decoder on a gpu ; the hamming decoder is widely used as a forward error correction ( fec ) mechanism in wireless communication . </S>",
    "<S> practical applications of the hamming decoder include ethernet ( ieee 802.3 ) , wimax ( ieee 802.16e ) , wi - fi ( ieee 802.11n ) , telecommunication , digital video broadcasting - satellite second generation ( dvb - s2 ) , wireless sensor networks ( wsns ) , underwater wireless sensor networks ( uwsns ) , and space communication  [ 26]-[31 ] . contributions of this study are as follows :    * this paper presents a massively parallel and optimized implementation of a hamming decoder on a gpu by exploring memory transfer , memory transaction , and kernel computation . * the performance of the hamming decoder on the gpu is thoroughly evaluated for various packet sizes , code lengths , and error tolerance . * </S>",
    "<S> the performance of the proposed gpu approach is compared with the equivalent sequential approach run on a conventional cpu .    </S>",
    "<S> the remainder of this paper is organized as follows . </S>",
    "<S> a review of the hamming decoder is provided in section  ii , optimization and gpu implementation of the hamming decoder are presented in section  iii , and experimental results and analysis are discussed in section  iv .    [ </S>",
    "<S> [ sec : implem ] ]    hamming decoding is performed at the destination end of the packet , and involves the exact reverse process of encoding performed at the transmitter end . </S>",
    "<S> figure 1 shows a hamming code decoder that consists of three components : splitter , decoder , and merger . </S>",
    "<S> the splitter receives the hamming encoded packet , * * h**=@xmath0**b * * ; * * b**=0 | * * b**=1@xmath1 , and splits the message into t segments , @xmath2 , @xmath3,@xmath4 , @xmath5 , where _ t _ is the error tolerance . </S>",
    "<S> the main decoder consists of three fundamental units : error detection ( ed ) , error correction ( ec ) , and redundancy remover ( rr ) . </S>",
    "<S> we use the terms @xmath6 and @xmath7 interchangeably throughout this paper .    </S>",
    "<S> = 8.2 cm    in the encoding process , some redundancy or checksum bits are incorporated along with the original message for the purpose of error detection , and these should be removed once they have served their purpose . </S>",
    "<S> subsequently , the decoder retrieves message segments @xmath8 , @xmath9 , ... , @xmath10 , and the merger unifies them to produce the decoded packet , * m * , which is similar to the original packet sent by the sender or transmitter .    </S>",
    "<S> [ [ sec : gpubased ] ]    this section presents a computationally efficient implementation of the hamming code algorithm on a gpu . encoded packets , namely @xmath11 , @xmath12,@xmath4,@xmath13 , are primarily received in the receiver buffer and the entire task can be divided into three steps , as shown in figure 2 : ( i ) pre - processing in the cpu , ( ii ) packet transfer between the cpu and gpu , and ( iii ) device kernel execution ( dke ) . </S>",
    "<S> all of these steps are performed in an optimized manner from a gpu computing viewpoint .    </S>",
    "<S> = 7.75 cm    figure 3 depicts an execution flow of the entire decoding process in the destination end of a network data packet , where regular blocks represent the steps executed on the cpu and the dotted blocks represent the tasks in the gpu . the cpu and gpu </S>",
    "<S> are also called the host and device , respectively . at the outset , the encoded packet , * h * , undergoes pre - processing in the cpu , which is explained in section 3.1 , before being transferred to the gpu . a parallel algorithm executed on the gpu </S>",
    "<S> is called a kernel , and the proposed approach configures two kernels , namely _ checksum _ and _ error _ , as indicated in figure 3 . </S>",
    "<S> the _ checksum _ </S>",
    "<S> kernel computes the redundancy information , and the _ error _ kernel performs error detection , correction , redundancy removal , and finally retrieves the original packet . </S>",
    "<S> this packet , now referred to as the decoded packet , is transferred from the gpu back to the cpu .      instead of transferring the encoded packet , * * h**= @xmath2+@xmath3+@xmath4+@xmath5 , to the gpu immediately , packet pre - processing </S>",
    "<S> is first performed , because the first step in a gpu is to calculate checksums on each of @xmath2,@xmath3,@xmath4,@xmath5 ; this process accesses sparsely located elements in global memory . considering any @xmath14 , the index sets @xmath15 , @xmath16,@xmath4,@xmath17 , shown in figure 4 , access indices of @xmath14 that are not completely adjacent . for instance , ( 7 , 4 ) hamming code has    @xmath15=@xmath01,3,5,7,9,11@xmath1 , @xmath16=@xmath02,3,6,7,10,11@xmath1 , @xmath18=@xmath04,5,6,7@xmath1 , and @xmath19=@xmath08,9,10,11@xmath1 . </S>",
    "<S> consequently , data items accessed by @xmath15 and @xmath16are clearly non - adjacent . </S>",
    "<S> even though elements of @xmath18 and @xmath19 apparently seem to be adjacent for a small code length , they include non - adjacent indices for larger values of     if the packet segment is transferred to the gpu without pre - processing , there are two major performance bottlenecks : ( a ) non - adjacent memory transactions from gpu global memory result in long latency for memory read , and ( b ) a number of conditional statements are required to access those locations , leading to thread divergence . </S>",
    "<S> these issues are addressed by pre - processing , which achieves coalesced global memory access . to this end , we re - organize the data items of the message segment , @xmath14 , by arranging those sparse items together and forming clusters such as @xmath20 , @xmath21 , @xmath22 , @xmath23 for each group . </S>",
    "<S> the clusters are placed side - by - side to shape the new @xmath14 as shown in figure 4 finally , the reformed encoded packet , * h * , is created by concatenation of @xmath14 @xmath24s such that _ _ </S>",
    "<S> i__=1,2,@xmath4,_t _ , and this reformed encoded packet is transferred to the gpu .      </S>",
    "<S> data transfer between host and device is a vital issue in gpu computing . </S>",
    "<S> we utilize an optimized data transfer approach to achieve high performance . </S>",
    "<S> a gpu facilitates two modes of data transfer : synchronous data transfer ( sdt ) and asynchronous data transfer ( adt ) . referring to figure 2 , three independent tasks , namely encoded packet transfer to the gpu [ ps ] , dke , and decoded packet receive from the gpu [ pr ] , </S>",
    "<S> are accomplished in the gpu . </S>",
    "<S> as shown in figure 5 , these tasks are performed concurrently in adt , where most of the transfer time is hidden by kernel execution . in contrast </S>",
    "<S> , sdt takes a long time and completes tasks in a sequential manner . as a result </S>",
    "<S> , adt outperforms sdt by due to its pipelined execution pattern ; therefore , we utilize adt .    </S>",
    "<S> figure 5 depicts the key differences between sdt and adt in terms of execution time line . </S>",
    "<S> @xmath25 , @xmath26 , and @xmath27 indicate the time required for the ps , dke , and pr , respectively . </S>",
    "<S> the sdt based approach takes 3@xmath28@xmath25 + 3@xmath28@xmath26 + 3@xmath28@xmath27 time units to process three packets , whereas adt requires @xmath25 + 3@xmath28@xmath26 + @xmath27 . </S>",
    "<S> consequently , adt saves 2(@xmath25 + @xmath27 ) time units . in general </S>",
    "<S> , the speedup of adt over sdt for the processing of n packets can be expressed by    @xmath29    @xmath30 \\ [ \\approx ( n, ... ,2 ) ; \\\\ when ( t_{ps}+t_{pr } \\leq t_{dke}, ... ,t_{ps}+t_{pr } = t_{dke } )    \\ ] $ $ \\ ] ]    therefore , the minimum expected gain is two times ; in our implementation , @xmath25 + @xmath27 @xmath31 @xmath26 , which accelerates the process toward n.      algorithms that are executed in parallel on a gpu are called kernels . </S>",
    "<S> algorithm 1 and figure 6 show a _ checksum _ </S>",
    "<S> kernel that accesses the pre - processed encoded packet in the gpu global memory . </S>",
    "<S> the main task of this kernel is to calculate a checksum vector , @xmath32 , on @xmath14 , which is the major computation of the hamming decoder .    </S>",
    "<S> [ tab : algorithm1 ]    [ cols=\"<\",options=\"header \" , ] </S>"
  ]
}