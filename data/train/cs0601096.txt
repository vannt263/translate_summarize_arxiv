{
  "article_text": [
    "the timed automata of alur and dill @xcite are a popular model for describing timed behaviours .",
    "while these automata have the plus point of being very expressive and having a decidable emptiness problem , they are neither determinisable nor closed under complementation .",
    "this is a drawback from a couple of points of view .",
    "firstly , one can not carry out model checking in the framework where a system is modelled as a timed transition system @xmath0 and a specification of timed behaviours as a timed automaton @xmath1 , and where one asks `` is @xmath2 ? '' .",
    "this would normally involve _ complementing _ @xmath1 and then checking if its intersection with @xmath0 is non - empty .",
    "one can get around this problem to some extent by using determinisable specifications , or specifying directly the negation of the required property .",
    "a second reason why lack of closure properties may concern us is that it precludes the existence of an unrestricted logical characterisation of the class of languages accepted by timed automata .",
    "the existence of a monadic second order logic ( mso ) characterisation of a class of languages is a strong endorsement of the `` regularity '' of the class .",
    "it also helps in identifying expressively complete temporal logics , which are natural to use as specification languages and have relatively efficient model checking algorithms .",
    "the event clock automata of @xcite was one of the first steps towards identifying a subclass of timed automata with the required closure properties .",
    "they were shown to be determinisable in @xcite , and later to admit a robust logical framework in terms of an mso characterisation and an expressively complete timed temporal logic @xcite .",
    "similar results were shown in @xcite , @xcite and @xcite .",
    "a common technique used in all these results was the idea of `` implicit '' clocks , whose values are determined solely by the timed word being read .",
    "for example the event recording clock @xmath3 records the time since the last @xmath4 action w.r.t . the current position in a timed word , and is thus implicitly reset with each @xmath4 action .",
    "the truth of a guard over these clocks at a point in a timed word is thus completely determined by the word itself , unlike in a timed automaton where the value of a clock depends on the path taken in the automaton .    in this paper",
    "we generalise the notion of an implicit clock to that of an _ input determined operator_. an input determined operator @xmath5 identifies for a given timed word and position in it , a set of intervals in which it is `` satisfied '' .",
    "the guard @xmath6 is then satisfied at a point in a timed word if the set of intervals identified by @xmath5 contains @xmath7 .",
    "for example , the event recording clock @xmath3 can be modelled as an input determined operator @xmath8 which identifies at a given point in a timed word , the ( infinite ) set of intervals containing the distance to the last @xmath4 action .",
    "the guard @xmath9 now translates to @xmath10 . as an example to show that this framework is more general than implicit clocks , consider the input determined operator @xmath11 inspired by the metric temporal logic ( mtl ) of @xcite",
    "this operator identifies the set of all intervals @xmath7 for which there is a future occurrence of an @xmath4 at a distance which lies in @xmath7 .",
    "the guard @xmath12 is now true iff there is a future occurrence of an @xmath4 action , at a distance which lies in @xmath7",
    ".    timed automata which use guards based on a set of input determined operators are what we call _ input determined automata_. we show that input determined automata form a robust class of timed languages , in that they are ( a ) determinisable , ( b ) effectively closed under boolean operations , ( c ) admit a logical characterisation via an unrestricted mso , and ( d ) identify a natural expressively complete timed temporal logic .",
    "we then go over to a more expressive framework using the idea of _ recursive _ event clocks from @xcite . in the recursive version of our input determined operator ,",
    "the operators now expect a third parameter ( apart from the timed word and a position in it ) which identifies a set of positions in the timed word",
    ". this argument could be ( recursively ) another input determined automaton , or as is better illustrated , a temporal logic formula @xmath13 .",
    "the formula @xmath13 naturally identifies a set of positions in a timed word where the formula is satisfied .",
    "thus a recursive operator @xmath5 along with the formula @xmath13 , written @xmath14 , behaves like an input determined operator above , and the guard @xmath15 is true iff the set of intervals identified by @xmath14 contains @xmath7 .",
    "these recursive input determined automata are also shown to admit similar robust logical properties above",
    ".    we should be careful to point out here that , firstly , these results hold in the _ pointwise _ semantics , where formulas are evaluated only at the `` action points '' in a timed word ( used e.g. in @xcite ) , and not at arbitrary points in between actions in a timed word as allowed in the _ continuous _ semantics of @xcite .",
    "secondly , we make no claims about the existence of _ decision procedures _ for these automata and logics .",
    "in fact it can be seen the operator @xmath11 above takes us out of the class of timed automata as we can define the language of timed sequences of @xmath4 s in which no two @xmath4 s are a distance 1 apart , with a single state input determined automaton which has the guard @xmath16 \\in { \\ensuremath{\\mbox{\\boldmath $ \\diamond$}}}_a)$ ] .",
    "similar versions can be seen to have undecidable emptiness problems and correspondingly undecidable logics @xcite .",
    "thus the contribution of this paper should be seen more in terms of a general framework for displaying logical characterisations of timed automata , and proving expressive completeness of temporal logics related to these automata . many of the results along these lines from @xcite and some in the pointwise semantics from @xcite follow from the results in this paper .    as a new application of this framework",
    ", we provide an expressive completeness result for mitl in the pointwise semantics , by showing that it is expressively equivalent to the first order fragment of an mso based on recursive operators .",
    "this answers an open question from @xcite , apart from identifying an interesting class of timed automata .",
    "the techniques used in this paper essentially build on those from @xcite and @xcite which use the notion of _ proper _ symbolic alphabets and factor through the results of bchi @xcite and kamp @xcite .",
    "the idea of using recursive operators comes from @xcite , who show a variety of expressiveness results , including an expressive completeness for mitl in the continuous semantics .",
    "their result for mitl is more interesting in that it uses event - clock modalities , while we use essentially the same modalities as mitl .",
    "however , our mso is more natural as unlike the mso in @xcite it has unrestricted second order quantification .",
    "we use @xmath17 to denote the set of natural numbers @xmath18 , and @xmath19 and @xmath20 to denote the set of non - negative reals and rationals respectively .",
    "the set of finite and infinite words over an alphabet @xmath21 will be denoted by @xmath22 and @xmath23 respectively .",
    "we use the notation @xmath24 to denote the set of functions from @xmath25 to @xmath26 .",
    "an _ ( infinite ) timed word _ over an alphabet @xmath27 is an element @xmath28 of @xmath29 satisfying the following conditions .",
    "let @xmath30 . then :    1 .",
    "( _ monotonicity _ ) for each @xmath31 , @xmath32 , 2 .",
    "( _ progressiveness _ ) for each @xmath33 there exists @xmath31 such that @xmath34 .",
    "let @xmath35 denote the set of infinite timed words over @xmath27 .",
    "where convenient , we will use the representation of @xmath28 as @xmath36 where @xmath37 and @xmath38 is a time sequence satisfying the conditions above .",
    "we will use rational bounded intervals to specify timing constraints .",
    "these intervals can be open or closed , and we allow @xmath39 as an open right end .",
    "these intervals denote a subset of reals in the usual manner  for example @xmath40 denotes the set @xmath41 .",
    "the set of all such intervals is denoted @xmath42 .",
    "our input determined automata will use guards of the form `` @xmath43 '' , where @xmath7 is an interval and @xmath5 is an operator which determines for a given timed word @xmath28 and a position @xmath44 in it , a set of intervals `` satisfying '' it at that point .",
    "we then say that @xmath28 at position @xmath44 satisfies the guard `` @xmath45 '' if @xmath7 belongs to the set of intervals identified by @xmath5 . by a `` position '' in the timed word we mean one of the `` action points '' or instants given by the time - stamp sequence , and use natural numbers @xmath44 ( instead of the time @xmath46 ) to denote these positions .",
    "more formally , an input determined operator @xmath5 ( w.r.t . the alphabet @xmath27 ) has a semantic function @xmath47 .",
    "the guard @xmath6 is satisfied at position @xmath44 in @xmath48 iff @xmath49 .",
    "the transitions of our input determined automata are labelled by symbolic actions of the form @xmath50 where @xmath4 is an action , and @xmath51 is a guard which is a boolean combination of atomic guards of the form @xmath6 .",
    "the set of guards over a finite set of input determined operators @xmath52 is denoted by @xmath53 and given by the syntax @xmath54 .",
    "the satisfaction of a guard @xmath51 in a timed word @xmath28 at position @xmath44 , written @xmath55 , is given in the expected way : we have @xmath56 always , @xmath57 as above , and the boolean operators @xmath58 , @xmath59 , and @xmath60 interpreted as usual . a",
    "_ symbolic alphabet _",
    "@xmath61 based on @xmath62 is a finite subset of @xmath63 .",
    "an infinite word @xmath64 in @xmath65 specifies in a natural way a subset of timed words @xmath66 defined as follows .",
    "let @xmath67 for each @xmath31 .",
    "let @xmath68 with @xmath69 for each @xmath31 .",
    "then @xmath70 iff for each @xmath71 , @xmath72 and @xmath73 .",
    "we extend the map @xmath74 to work on subsets of @xmath75 in the natural way .",
    "thus , for @xmath76 , we define @xmath77 .",
    "finally , we denote the vocabulary of intervals mentioned in @xmath61 by @xmath78 .",
    "recall that a bchi automaton over an alphabet @xmath21 is a structure @xmath79 where @xmath80 is a finite set of states , @xmath81 is an initial state , @xmath82 is the transition relation , and @xmath83 is a set of accepting states . let @xmath84 .",
    "a run of @xmath1 over @xmath85 is a map @xmath86 which satisfies : @xmath87 and @xmath88 for every @xmath31 .",
    "we say @xmath89 is an _ accepting _ run of @xmath1 on @xmath85 if @xmath90 for infinitely many @xmath31 .",
    "the set of words accepted by @xmath1 , denoted here as @xmath91 ( for the `` symbolic '' language accepted by @xmath1 ) , is defined to be the set of words in @xmath23 on which @xmath1 has an accepting run .",
    "we are now in a position to define an input determined automaton .",
    "an _ input determined automaton _",
    "( ida  for short ) over an alphabet @xmath27 and a set of operators @xmath52 , is simply a bchi automaton over a symbolic alphabet based on @xmath92 . viewed as a bchi automaton over a symbolic alphabet @xmath61",
    ", an input determined automaton @xmath1 accepts the language @xmath93 which we call the symbolic language accepted by @xmath1 .",
    "however , we will be more interested in the timed language accepted by @xmath1 : this is denoted @xmath94 and is defined to be @xmath95 . to give a concrete illustration of input determined automata , we show how",
    "the event clock automata of @xcite can be realized in the above framework .",
    "take @xmath52 to be the set of operators @xmath96 , where the operators @xmath8 and @xmath97 essentially record the time since the last @xmath4 action , and the time to the next @xmath4 action .",
    "the operator @xmath8 ( and similarly @xmath97 ) can be defined here by setting @xmath98 to be @xmath99    as another example which we will use later in the paper , consider the operator @xmath11 related to mtl @xcite .",
    "the guard @xmath100 is meant to be true in a word @xmath28 at time @xmath44 iff there is a future instant @xmath101 labelled @xmath4 and the distance to it lies in @xmath7  i.e. @xmath102 . the guard @xmath103 makes a similar assertion about the",
    "past _ of @xmath28 w.r.t . the current position .",
    "an input determined automaton based on these operators can be defined by taking @xmath104 , and where , for example , @xmath105 .",
    "we now want to show that the class of timed languages accepted by input determined automata ( for a given choice of @xmath27 and @xmath52 ) is closed under boolean operations .",
    "the notion of a _ proper _ symbolic alphabet will play an important role here and subsequently .",
    "a _ proper symbolic alphabet _ based on @xmath62 is of the form @xmath106 where @xmath107 is a finite subset of @xmath42 .",
    "an element of @xmath61 is thus of the form @xmath108 , where the set of intervals specified by @xmath109 is interpreted as the _ exact _ subset of intervals in @xmath78 which are satisfied by @xmath5 .",
    "this is formalised in the following definition of @xmath110 for a proper symbolic alphabet @xmath61 .",
    "let @xmath111 with @xmath112 .",
    "let @xmath68 with @xmath69 .",
    "then @xmath113 iff for each @xmath71 : @xmath72 and for each @xmath114 , @xmath115 .",
    "let @xmath61 be a proper symbolic alphabet based on @xmath62 .",
    "then a bchi automaton @xmath1 over @xmath61 , which we call a _ proper _ ida  over @xmath116 , determines a timed language over @xmath27 given by @xmath117 .",
    "the class of timed languages defined by ida s and proper ida s over @xmath62 coincide .",
    "an ida  over a symbolic alphabet @xmath61 can be converted to an equivalent one ( in terms of the timed language they define ) over a proper symbolic alphabet @xmath118 .",
    "firstly , each transition label @xmath50 in @xmath61 can be written in a disjunctive normal form @xmath119 , with each @xmath120 being a conjunction of literals @xmath6 or @xmath121 .",
    "thus each transition labelled @xmath50 can be replaced by a set of transitions labelled @xmath122 , one for each @xmath44 .",
    "now each transition labelled @xmath123 , with @xmath124 a conjunct guard , can be replaced by a set of transitions @xmath108 , one for each @xmath125 `` consistent '' with @xmath124 : i.e. @xmath125 should satisfy the condition that if @xmath6 is one of the conjuncts in @xmath124 then @xmath126 , and if @xmath127 is one of the conjuncts in @xmath124 then @xmath128 . in the other direction , to go from a proper ida  to an ida , a label @xmath108 of a proper symbolic alphabet can be replaced by the guard @xmath129    the following property of proper symbolic alphabets will play a crucial role .    [",
    "lemma : proper1 ] let @xmath61 be a proper symbolic alphabet based on @xmath27 .",
    "then for any @xmath68 there is a _",
    "unique _ symbolic word @xmath64 in @xmath75 such that @xmath130 .",
    "let @xmath131 .",
    "then the only possible symbolic word @xmath64 we can use must be given by @xmath112 , where @xmath115 .",
    "in the light of lemma  [ lemma : proper1 ] , going from a symbolic alphabet to a proper one can be viewed as a step towards determinising the automaton with respect to its timed language . from here",
    "one can simply use classical automata theoretic techniques to determinise the automaton w.r.t",
    ". its _ symbolic _ language .",
    "( of course , since we deal with infinite words we will need to go from a bchi to a muller or rabin acceptance condition @xcite ) .",
    "[ thm : closure1 ] the class of ida s over @xmath62 are effectively closed under the boolean operations of union , intersection , and complement .",
    "it is sufficient to address union and complementation .",
    "given automata @xmath1 and @xmath132 over symbolic alphabets @xmath61 and @xmath133 respectively , we can simply construct an automaton over @xmath134 which accepts the union of the two symbolic languages . for complementing the timed language of @xmath1",
    ", we can go over to an equivalent proper ida  @xmath135 over a proper symbolic alphabet @xmath136 , and now simply complement the symbolic language accepted by @xmath135 to get an automaton @xmath137 .",
    "it is easy to verify , using the uniqueness property of proper alphabets given in lemma  [ lemma : proper1 ] , that @xmath138 . in the constructions above we have made use of the closure properties of @xmath139-regular languages @xcite .",
    "we now show that input determined automata admit a natural characterisation via a timed mso in the spirit of @xcite .",
    "recall that for an alphabet @xmath21 , bchi s monadic second order logic ( denoted here by @xmath140 ) is given as follows : @xmath141 the logic is interpreted over a word @xmath84 , along with an interpretation @xmath142 which assigns individual variables @xmath143 a position in @xmath85 ( i.e. an @xmath31 ) , and to set variables @xmath25 a set of positions @xmath144 .",
    "the relation @xmath145 is interpreted as the usual ordering of natural numbers , and the predicate @xmath146 ( one for each @xmath147 ) as the set of positions in @xmath85 labelled @xmath4 .",
    "the formal semantics of the logic is given below .",
    "for an interpretation @xmath142 we use the notation @xmath148 $ ] to denote the interpretation which sends @xmath143 to @xmath44 and agrees with @xmath142 on all other variables .",
    "similarly , @xmath149 $ ] denotes the modification of @xmath142 which maps the set variable @xmath25 to a subset @xmath150 of @xmath17 .",
    "later we will also use the notation @xmath151 $ ] to denote the interpretation with sends @xmath143 to @xmath44 when the rest of the interpretation is irrelevant .",
    "@xmath152 \\models \\varphi.\\\\ \\alpha , \\mathbb{i } \\models \\exists x \\varphi & \\mathrm{\\ iff \\ } & \\mathrm { there \\ exists \\ } s \\subseteq { \\ensuremath{\\mathbb{n}}}\\mathrm { \\ such \\ that \\ } \\sigma,\\mathbb{i}[s / x ] \\models \\varphi . \\end{array}\\ ] ]    for a sentence @xmath153 ( i.e. a formula without free variables ) in @xmath140 we set @xmath154 bchi s result then states that a language @xmath155 is accepted by a bchi automaton over @xmath21 iff @xmath156 for a sentence @xmath153 in @xmath140 .",
    "we define a timed mso called @xmath157 , parameterised by the alphabet @xmath27 and set of input determined operators @xmath52 , whose syntax is given by : @xmath158 in the predicate `` @xmath159 '' , @xmath7 is an interval in @xmath42 , @xmath114 , and @xmath143 is a variable .",
    "the logic is interpreted in a similar manner to @xmath160 , except that models are now timed words over @xmath27 . in particular , for a timed word @xmath161 , we have : @xmath162    given a sentence @xmath153 in @xmath163 we define @xmath164 .",
    "[ thm : msoba1 ] a timed language @xmath165 is accepted by an input determined automaton over @xmath62 iff @xmath156 for some sentence @xmath153 in @xmath166 .    given an ida  @xmath1 over @xmath62 we can give a @xmath167 sentence @xmath153 which describes the existence of an accepting run of @xmath1 on a timed word .",
    "following @xcite , for @xmath168 with @xmath169 , we can take @xmath153 to be the sentence @xmath170 here @xmath171 denotes the formula obtained by replacing each @xmath43 in @xmath51 by @xmath159 . further",
    ", `` @xmath172 '' abbreviates @xmath173 where @xmath174 in turn stands for @xmath175 .",
    "similarly @xmath176 can be expressed via @xmath177 , where @xmath178 is the formula @xmath179 .    in the converse direction",
    "we take the route used in @xcite as it will be useful in the sequel .",
    "let @xmath153 be a formula in @xmath180 , and let @xmath61 be a _ proper _ symbolic alphabet with the same interval vocabulary as @xmath153 .",
    "we give a way of translating @xmath153 to a formula @xmath181 in @xmath182 in such a way that the timed languages are preserved .",
    "the translation @xmath183 is done with respect to @xmath61 and simply replaces each occurrence of @xmath184 the translation preserves the timed models of a formula @xmath153 in the following sense :    let @xmath68 , @xmath111 , and @xmath113 .",
    "let @xmath142 be an interpretation for variables",
    ". then @xmath185 iff @xmath186 .",
    "the lemma is easy to prove using induction on the structure of the formula @xmath153 and making use of the properties of proper symbolic alphabets . from the lemma it immediately follows now that for a sentence @xmath153 in @xmath157 , we have @xmath187 , and this is the sense in which the translation preserves timed languages",
    ".    we can now argue the converse direction of theorem  [ thm : msoba1 ] using this translation and factoring through bchi s theorem .",
    "let @xmath153 be a sentence in @xmath180 and let @xmath188 .",
    "then by bchi s theorem we have an automaton @xmath1 over @xmath61 which recognises exactly @xmath189 .",
    "thus @xmath1 is our required proper ida since @xmath190 .",
    "in this section we identify a natural , expressively complete , timed temporal logic based on input determined operators .",
    "the logic is denoted @xmath192 , parameterised by the alphabet @xmath27 and set of input determined operators @xmath52 .",
    "the formulas of @xmath192 are given by : @xmath193 here we require @xmath194 , @xmath195 , and @xmath114 . the models for @xmath196 formulas are timed words over @xmath27 .",
    "let @xmath68 , with @xmath161 , and let @xmath31 .",
    "then the satisfaction relation @xmath197 is given by @xmath198 we define @xmath199 .",
    "let us denote by @xmath200 the first - order fragment of @xmath180 ( i.e. the fragment we get by disallowing quantification over set variables ) .",
    "the logics @xmath201 and @xmath202 are _ expressively equivalent _ in the following sense :    [ thm : ltl1 ] a timed language @xmath165 is definable by a @xmath196 formula @xmath13 iff it is definable by a sentence @xmath153 in @xmath203 .    given a @xmath196 formula @xmath13 we can associate an @xmath200 formula @xmath153 which has a single free variable @xmath143 , and satisfies the property that @xmath204 iff @xmath205 \\models \\varphi$ ] .",
    "this can be done in a straightforward inductive manner as follows . for the atomic formulas @xmath4 and @xmath6 we can take @xmath153 to be @xmath206 and @xmath159 respectively . in the inductive step , assuming we have already translated @xmath13 and @xmath207 into @xmath153 and @xmath208 respectively , we can translate @xmath209 into @xmath210 { \\ensuremath{\\wedge}}\\forall z ( ( x \\leq z { \\ensuremath{\\wedge}}z",
    "\\leq y ) { \\ensuremath{\\ , \\rightarrow \\,}}\\varphi[z / x])).\\ ] ] here @xmath211 $ ] denotes the standard renaming of the free variable @xmath143 to @xmath212 in @xmath208 .",
    "the remaining modalities are handled in a similar way , and we can verify that if @xmath153 is the above translation of @xmath13 then @xmath204 iff @xmath205 \\models \\varphi$ ] .",
    "it also follows that @xmath213 satisfies @xmath13 iff @xmath28 satisfies the sentence @xmath214 given by @xmath215 .",
    "hence we have that @xmath216 .    in the converse direction a more transparent proof is obtained by factoring through kamp s result for classical ltl .",
    "recall that the syntax of @xmath217 is given by : @xmath218 where @xmath147 .",
    "the semantics is given in a similar manner to @xmath201 , except that models are words in @xmath23 .",
    "in particular the satisfaction relation @xmath219 for the atomic formula @xmath4 is given by : @xmath220 iff @xmath221 .",
    "let @xmath222 denote the first - order fragment of @xmath140 .",
    "then the result due to kamp @xcite states that :    [ thm : kamp1 ] @xmath217 is expressively equivalent to @xmath222 .",
    "consider now a proper symbolic alphabet @xmath61 based on @xmath62 . we can define a timed language preserving translation of an @xmath223 formula @xmath224 to a formula @xmath225 in @xmath196 . in the translation @xmath226",
    "we replace subformulas @xmath108 by @xmath227 it is easy to argue along the lines of lemma  [ lemma : proper1 ] that    [ lemma : stot - ltl ] let @xmath68 and @xmath111 with @xmath113",
    ". then @xmath228 iff @xmath229 .",
    "hence we have @xmath230 .",
    "we can now translate a sentence @xmath153 in @xmath200 to an equivalent @xmath196 formula @xmath13 as follows .",
    "let @xmath61 be the proper symbolic alphabet based on @xmath62 with the same interval vocabulary as @xmath153 .",
    "let @xmath231 be the @xmath232 formula @xmath181 .",
    "note that the translation @xmath226 preserves first - orderness and hence @xmath231 belongs to @xmath232 .",
    "now by theorem  [ thm : kamp1 ] , we have a formula @xmath224 in @xmath223 which is equivalent to @xmath231 .",
    "we now use the translation @xmath183 on the formula @xmath224 to get a @xmath196 formula @xmath13 .",
    "@xmath13 is our required @xmath196 formula .",
    "observe that firstly @xmath233 by the property of the translation @xmath226 .",
    "next , by kamp s theorem we have that @xmath234 and hence @xmath235 .",
    "but by the property of the translation @xmath183 applied to @xmath153 , we have @xmath236 , and hence we can conclude that @xmath237 .",
    "this completes the proof of theorem  [ thm : ltl1 ] .",
    "we point out here that the past temporal operators of @xmath238 ( `` previous '' ) and @xmath239 ( `` since '' ) can be dropped from our logic without affecting the expressiveness of the logic .",
    "this follows since it is shown in @xcite that theorem  [ thm : kamp1 ] holds for the future fragment of @xmath191 .",
    "the reason we retain the past operators is because they are needed when we consider a recursive version of the logic in section  [ section : rltl ] .",
    "we now consider `` recursive '' input determined operators . the main motivation is to increase the expressive power of our automata , as well as to characterise the expressiveness of recursive temporal logics which occur naturally in the real - time setting .",
    "to introduce recursion in our operators , we need to consider _ parameterised _ ( or _ recursive _ ) input determined operators .",
    "these operators , which we continue to denote by @xmath5 , have a semantic function @xmath240 , whose first argument is a subset of positions @xmath25 .",
    "thus @xmath5 with the parameter @xmath25 determines an input determined operator of the type introduced earlier , whose semantic function is given by the map @xmath241 .",
    "the set of positions @xmath25 will typically be specified by a temporal logic formula or a `` floating '' automaton , in the sense that given a timed word @xmath28 , the formula ( resp .",
    "automaton ) will identify a set of positions in @xmath28 where the formula is satisfied ( resp .",
    "automaton accepts ) .",
    "these ideas will soon be made more precise .",
    "we first recall the idea of a `` floating '' automaton introduced in @xcite . these are automata which accept pairs of the form @xmath242 with @xmath28 a timed word , and @xmath44 a position ( i.e. @xmath243 .",
    "we will represent a `` floating '' word @xmath244 as a timed word over @xmath245 .",
    "thus a timed word @xmath246 over @xmath245 represents the floating word @xmath242 , iff @xmath247 , with @xmath248 with a _",
    "@xmath249 in the @xmath44-th position , and @xmath161 .",
    "we use @xmath250 to denote the ( partial ) map which given a timed word @xmath246 over @xmath245 returns the floating word @xmath251 corresponding to @xmath246 , and extend it to apply to timed languages over @xmath245 in the natural way .",
    "let @xmath52 be a set of input determined operators w.r.t . @xmath27 . then",
    "a _ floating ida _ over @xmath62 is an idaover @xmath252 , where the set of operators @xmath253 w.r.t .",
    "@xmath245 is defined to be @xmath254 where @xmath255 is a timed word over @xmath245 , with @xmath256 and @xmath257 .",
    "thus the operator @xmath258 simply ignores the @xmath259 component of @xmath255 and behaves like @xmath5 on the @xmath27 component . a floating ida  @xmath132 accepts the floating timed language @xmath260 .",
    "we now give a more precise definition of recursive input determined automata , denoted rec - ida , and their floating counterparts frec - ida .",
    "let @xmath261 be a finite set of recursive input determined operators .",
    "then the class of rec - ida s over @xmath262 , and the timed languages they accept , are defined as follows .",
    "* every ida  @xmath1 over @xmath27 that uses only the guard @xmath263 is a rec - ida  over @xmath264 , and accepts the timed language @xmath94 . + similarly , every floating ida  @xmath132 over @xmath27 which uses only the guard @xmath263 is a frec - ida  over @xmath262 , and accepts the floating language @xmath265 .",
    "* let @xmath266 be a finite collection of frec - ida s over @xmath262 .",
    "let @xmath52 be the set of input determined operators @xmath267 , where the semantic function of each @xmath268 is given as follows .",
    "let @xmath269 denote the set of positions @xmath44 such that @xmath270",
    ". then @xmath271 . +",
    "then any ida  @xmath1 over @xmath62 is a rec - ida  over @xmath262 , and accepts the timed language @xmath94 ( defined in section  [ section : idta ] ) .",
    "+ similarly every floating ida  @xmath132 over @xmath62 is a frec - ida  over @xmath262 , and accepts the floating language @xmath265 .",
    "recursive automata fall into a natural `` level '' based on the level of nesting of operators they use",
    ". a rec - ida  is of _ level _ 0 if the only guard it uses is @xmath263 .",
    "similarly a frec - ida  is of level 0 , if the only guard it uses is @xmath263",
    ". a rec - ida  is of _ level _",
    "( i+1 ) if it uses an operator @xmath268 , with @xmath272 and @xmath132 a frec - ida  of level @xmath44 , and no operator @xmath273 with @xmath274 and @xmath137 of level greater than @xmath44 .",
    "a similar definition of level applies to frec - ida s .",
    "as an example consider the level 1 rec - ida  @xmath1 over the alphabet @xmath275 below .",
    "the floating automaton @xmath132 accepts a floating word @xmath242 iff the position @xmath44 is labelled @xmath276 and the previous and next positions are labelled @xmath4 .",
    "the recursive input determined operator @xmath277 is defined formally in sec .",
    "[ section : mitl ] .",
    "the rec - ida  @xmath1 thus recognises the set of timed words @xmath28 over @xmath275 which begin with an @xmath4 and have an occurrence of @xmath276  with @xmath4 s on its left and right  exactly 1 time unit later .",
    "[ thm : closure2 ] the class of rec - ida s over @xmath262 is closed under boolean operations . in fact , for each @xmath44 , the class of level @xmath44 rec - ida s is closed under boolean operations .",
    "let @xmath1 and @xmath135 be two rec - ida s of level @xmath44 .",
    "let @xmath52 be the union of operators used in @xmath1 and @xmath135 .",
    "then both @xmath1 and @xmath135 are ida s over @xmath62 , and hence by theorem  [ thm : closure1 ] there exists an ida   @xmath132 over @xmath62 which accepts @xmath278 .",
    "similarly there exists an ida  @xmath137 over @xmath62 , which accepts the language @xmath279 .",
    "notice that @xmath132 and @xmath137 use the same set of operators @xmath52 , and hence are also level @xmath44 automata .",
    "we note that ida s over @xmath62 are a special case of level 1 rec - ida s over @xmath262 , where the set of recursive operators @xmath261 is taken to be @xmath280 with @xmath281 .",
    "thus each guard @xmath6 in an ida  over @xmath62 can be replaced by the guard @xmath282 , for any `` dummy '' level 0 frec - ida  @xmath132 .",
    "we now introduce a recursive version of @xmath167 which will characterise the class of timed languages defined by rec - ida s .",
    "the logic is parameterised by an alphabet @xmath27 and set of recursive input determined operators @xmath261 , and denoted @xmath283 .",
    "the syntax of the logic is given by @xmath284 in the predicate @xmath285 , we have @xmath195 , @xmath286 , and @xmath208 a @xmath283 formula with a single free variable @xmath287 .",
    "the logic is interpreted over timed words in @xmath35 .",
    "its semantics is similar to @xmath167 except for the predicate `` @xmath288 '' which is defined inductively as follows . if @xmath208 is a formula which uses no @xmath5 predicates , then the satisfaction relation @xmath289 is defined as for @xmath167 .",
    "inductively , assuming the semantics of @xmath208 has already been defined , @xmath290 is interpreted as an input determined operator as follows .",
    "let @xmath291 denote the set of interpretations for @xmath287 that make @xmath208 true in the timed word @xmath28 ",
    "i.e. @xmath292 \\models \\psi\\}$ ]",
    ". then @xmath293 thus we have @xmath294    note that the variable @xmath287 , which is free in @xmath208 , is _ not _ free in the formula @xmath288 .",
    "a sentence @xmath153 in @xmath283 defines the language @xmath295 , and a @xmath283 formula @xmath208 with one free variable @xmath287 defines a floating language @xmath296 \\models \\psi \\}$ ] .",
    "we note that each @xmath283 formula @xmath153 can be viewed as a @xmath180 formula , for a suitably defined set of input determined operators @xmath52 .",
    "we say an operator @xmath290 has a _ top - level _ occurrence in @xmath153 if there is an occurrence of @xmath290 in @xmath153 which is _ not _ in the scope of any @xmath258 operator .",
    "we can now take @xmath52 to be the set of all top - level operators @xmath297 in @xmath153 .",
    "analogous to the notion of level for rec - ida s we can define the _ level _ of an @xmath298 formula @xmath153 .",
    "the level of @xmath153 is 0 , if @xmath153 uses no @xmath5 predicates .",
    "@xmath153 has level @xmath299 if it uses a predicate of the form @xmath288 with @xmath208 a level @xmath44 formula , and _ no _ predicate of the form @xmath300 with @xmath301 of level greater than @xmath44 .    as an example the level 1 sentence @xmath153 below defines the same timed language as the level 1 rec - ida  @xmath1 defined in section  [ section : idta ] .",
    "we can take @xmath153 to be @xmath302 \\in { \\ensuremath{\\mbox{\\boldmath $ \\diamond$}}}_{\\psi}(x ) ) ) ) , $ ] where @xmath208 is the level 0 formula @xmath303 .",
    "[ thm : msoba2 ] @xmath165 is accepted by a rec - ida  over @xmath304 iff @xmath305 is definable by a @xmath283 sentence .",
    "in fact , we will show that for each @xmath44 , the class of rec - ida s of level @xmath44 correspond to the sentences of @xmath283 of level @xmath44 . but first it will be useful to state a characterisation of floating languages along the lines of theorem  [ thm : msoba1 ] .",
    "[ thm : msobaf1 ] let @xmath305 be a a floating language over @xmath27 .",
    "then @xmath306 for some floating ida  over @xmath62 iff @xmath307 , for some @xmath180 formula @xmath208 with one free variable .",
    "let @xmath132 be a floating ida  over @xmath62 .",
    "keeping in mind that @xmath132 runs over the alphabet @xmath308 , we define a formula @xmath208 with one free variable @xmath287 as follows .",
    "@xmath208 is the formula @xmath153 given in the proof of theorem  [ thm : msoba1 ] , except for the clause ( * ) which we replace by    @xmath309    the formula @xmath208 satisfies @xmath310 iff @xmath311 \\models \\psi$ ] .    in the converse direction , let @xmath312 denote a @xmath180 formula with free variables @xmath313 .",
    "an interpretation @xmath142 for these variables is encoded ( along with @xmath28 ) as a timed word over @xmath314 .",
    "we extend the definition of a floating ida  to an ida  which works over such an alphabet , where , in particular , the @xmath5 operators apply only to the @xmath27 component of the timed word",
    ". then we can inductively associate with @xmath312 a floating ida  @xmath132 over @xmath245 such that @xmath315 . in the inductive step for @xmath316",
    "we make use of the fact that the class of languages accepted by floating ida s over @xmath62 are closed under the restricted renaming operation required in this case .",
    "the reader is referred to @xcite for a similar argument .",
    "returning now to the proof of theorem  [ thm : msoba2 ] , we use induction on the level of automata and formulas to argue that    1 .",
    "@xmath165 is accepted by a level @xmath44 rec - ida  over @xmath262 iff @xmath305 is definable by a level @xmath44 @xmath283 sentence @xmath153 . and 2 .",
    "[ item : float ] a floating language @xmath305 over @xmath27 is accepted by a level @xmath44 frec - ida  over @xmath262 iff @xmath305 is definable by a level @xmath44 @xmath283 formula @xmath208 with one free variable .    for the base case we consider level 0 automata and sentences . since level 0 automata only make use of the guard @xmath263 , they are simply bchi automata over @xmath27 .",
    "similarly , level 0 sentences do nt use any @xmath5 predicates and hence they are simply @xmath317 sentences . by bchi",
    "s theorem , we have that level 0 automata and sentences are expressively equivalent .",
    "for the base case for the second part of the claim , given a level 0 floating automaton @xmath132 we can apply the construction in the proof of theorem  [ thm : msobaf1 ] to get a @xmath163 formula @xmath208 with one free variable . since the construction preserves the guards used , @xmath208 has no @xmath5 operators , and hence is a level 0 @xmath283 formula .",
    "conversely , for a level 0 formula @xmath208 we can apply the construction of theorem  [ thm : msobaf1 ] to obtain a floating automaton @xmath132 such that @xmath318 .",
    "the construction preserves the @xmath5 operators used , and hence @xmath132 is a level 0 automaton .",
    "turning now to the induction step , let @xmath1 be a level @xmath299 automaton over @xmath262 .",
    "let @xmath52 be the set of top - level @xmath5 operators in @xmath1 .",
    "now since @xmath1 is an ida   over @xmath62 , by theorem  [ thm : msoba1 ] , we have a @xmath180 sentence @xmath153 such that @xmath319 .",
    "now for each @xmath268 in @xmath52 , @xmath132 is of level @xmath44 or lower , and by our induction hypothesis there is a corresponding @xmath283 formula @xmath208 with one free variable , of the same level as @xmath132 , with @xmath318 .",
    "hence for each @xmath268 we have a semantically equivalent operator @xmath290 .",
    "this is because @xmath318 , which implies @xmath320 , which in turn implies @xmath321 .",
    "we can now simply replace each occurrence of @xmath268 in @xmath153 to get an equivalent sentence @xmath322 which is in @xmath283 .",
    "further , by construction it follows that @xmath322 is also of level @xmath299 .",
    "conversely , let @xmath153 be a level @xmath299 sentence in @xmath283 .",
    "let @xmath52 be the set of top level @xmath5 operators in @xmath153 .",
    "then @xmath153 is a @xmath180 sentence , and hence by theorem  [ thm : msoba1 ] we have an equivalent input determined automaton @xmath1 over @xmath62 . once again",
    ", for each @xmath290 in @xmath52 , the formula @xmath208 is of level @xmath44 or lower , and hence by induction hypothesis we have a frec - ida  @xmath132 over @xmath262 , of the same level as @xmath208 , and accepting the same floating language .",
    "the operators @xmath290 and @xmath268 are now equivalent , and we can replace each @xmath290 in @xmath1 by the corresponding @xmath268 to get a language equivalent input determined automaton .",
    "this automaton is now the required level @xmath299 rec - ida  over @xmath262 which accepts the same language as @xmath323 .",
    "the induction step for part  [ item : float ] is proved similarly , making use of theorem  [ thm : msobaf1 ] and the induction hypothesis .",
    "this completes the proof of theorem  [ thm : msoba2 ] .",
    "we now define a recursive timed temporal logic along the lines of @xcite .",
    "the logic is similar to the logic @xmath201 defined in sec .",
    "[ section : tltl ] .",
    "it is parameterised by an alphabet @xmath27 and a set of recursive input determined operators @xmath261 , and denoted @xmath325 .",
    "the syntax of the logic is given by @xmath326 where @xmath194 , and @xmath272 .",
    "the logic is interpreted over timed words in a similar manner to @xmath201 .",
    "the predicate @xmath15 is interpreted as follows .",
    "if @xmath13 does not use a @xmath5 predicate , then the satisfaction relation @xmath204 is defined as for @xmath201 . inductively assuming the semantics of a @xmath325 formula @xmath13 has been defined , and setting @xmath327 , the operator @xmath14 is interpreted as an input determined operator with the semantic function @xmath328 the satisfaction relation @xmath329 is then defined as in @xmath201 . once again , since @xmath14 behaves like an input determined operator , each @xmath325 formula is also a @xmath330 formula , for an appropriately chosen set of input determined operators @xmath52 , containing operators of the form @xmath14 .",
    "a @xmath325 formula @xmath13 naturally defines both a timed language @xmath331 and a floating language @xmath332 .    as an example ,",
    "the formula @xmath333 \\in { \\ensuremath{\\mbox{\\boldmath $ \\diamond$}}}_{\\theta})$ ] where @xmath334 , restates the property expressed by the @xmath298 formula in sec .",
    "[ section : mso2 ] .",
    "let us denote by @xmath335 the first - order fragment of the logic @xmath283 .",
    "then we have the following expressive completeness result :    [ thm : ltl2 ] @xmath325 is expressively equivalent to @xmath335 .    as before we show that formulas in the logics are equivalent level - wise ( the level of a @xmath336 formula being defined analogous to @xmath298 ) .",
    "we show by induction on @xmath44 that    1 .",
    "[ item : ltl2:1 ] a timed language @xmath165 is definable by a level @xmath44 @xmath325 formula iff it is definable by a level @xmath44 @xmath335 sentence .",
    "[ item : ltl2:2 ] a floating timed language over @xmath27 is definable by a level @xmath44 @xmath325 formula iff it is definable by a level @xmath44 @xmath335 formula with one free variable .",
    "the base case for part  [ item : ltl2:1 ] follows from theorem  [ thm : kamp1 ] , since level 0 formulas are simply untimed @xmath337 and @xmath338 formulas . for the base case for part  [ item : ltl2:2 ] , a level 0 @xmath325 formula @xmath13 can be translated to a level 0 @xmath335 formula @xmath208 with one free variable @xmath287 using the translation given in the proof of theorem  [ thm : ltl1 ] .",
    "the formula @xmath208 satisfies @xmath311 \\models \\psi$ ] iff @xmath204 .",
    "the converse direction follows immediately from the following version of kamp s result :    [ thm : kamp2 ] for any @xmath222 formula @xmath208 with one free variable @xmath287 , there is a @xmath217 formula @xmath13 s.t . for each @xmath339 and @xmath31 , @xmath340 \\models \\psi$ ] iff @xmath219 .",
    "turning now to the induction step , let @xmath13 be a level @xmath299 @xmath325 formula .",
    "let @xmath52 be the set of top - level @xmath5 operators used in @xmath13 .",
    "then @xmath13 is a @xmath196 formula , and hence by theorem  [ thm : ltl1 ] we have an equivalent @xmath200 sentence @xmath153 ( i.e. with @xmath341 ) .",
    "now each operator in @xmath52 is of the form @xmath342 where @xmath207 is a level @xmath44 or less @xmath325 formula , and hence by the induction hypothesis we have an equivalent @xmath335 formula @xmath208 with one free variable , such that @xmath343 .",
    "it now follows that the input determined operators @xmath342 and @xmath290 are semantically equivalent , and hence we can replace each @xmath342 by @xmath290 in @xmath153 to get an equivalent @xmath335 sentence @xmath322 . by construction , the sentence @xmath322 is also of level @xmath299 .",
    "the converse direction is argued in a very similar manner , once again factoring through theorem  [ thm : ltl1 ] .    for part  [ item : ltl2:2 ]",
    ", a level @xmath299 @xmath325 formula @xmath13 is a @xmath196 formula , for the set of operators @xmath52 defined above . now using the translation given in the proof of theorem  [ thm : ltl1 ] we obtain a @xmath200 formula @xmath208 with a one free variable , satisfying @xmath344 .",
    "again , by the induction hypothesis , we can replace each @xmath342 in @xmath52 with an equivalent @xmath345 , to get an equivalent @xmath335 with the required properties .",
    "in the converse direction , let @xmath208 be a level @xmath299 @xmath335 formula with one free variable @xmath287 .",
    "let @xmath52 be set of top - level @xmath5 operators in @xmath208 .",
    "then @xmath208 is also a formula in @xmath200 .",
    "let @xmath61 be the proper symbolic alphabet induced by @xmath208 .",
    "then we can use the translation @xmath183 ( cf .",
    "sec  [ section : tmso ] ) on @xmath208 ( w.r.t .",
    "@xmath61 ) to get a formula @xmath346 in @xmath232 with one free variable @xmath287 which preserves timed models . by kamp s theorem above",
    ", we have an equivalent @xmath223 formula @xmath224 which preserves the floating language accepted .",
    "finally we can apply the translation @xmath226 on @xmath224 to get a @xmath196 formula @xmath13 which preserves timed models ( cf .",
    "[ section : tltl ] ) .",
    "the formula @xmath13 satisfies the property that @xmath347 .    now using the induction hypothesis each operator @xmath345 in @xmath13",
    "can be replaced by an equivalent @xmath342 operator , with @xmath207 a @xmath196 formula , to get an equivalent level @xmath299 @xmath325 formula @xmath348 .",
    "this ends the proof of theorem  [ thm : ltl2 ] .",
    "as an application of the results in this paper we show that the logic @xmath349 introduced in @xcite is expressively equivalent to @xmath350 for a suitably defined set of recursive input determined operators .",
    "we point out here that this result is shown for the pointwise semantics of @xmath349 given below .",
    "we begin with the logic @xmath351 which has the following syntax @xcite : @xmath352 here @xmath7 is an interval in @xmath42 . when @xmath7 is restricted to be _ non - singular _",
    "( i.e. not of the form @xmath353 $ ] ) then we get the logic @xmath354 .",
    "the logic is interpreted over timed words in @xmath35 similarly to @xmath201 .",
    "the modalities @xmath355 and @xmath356 are interpreted as follows , for a timed word @xmath161 .",
    "@xmath357    we first observe that @xmath351 is expressively equivalent to its sublogic @xmath358 in which the modalities @xmath359 and @xmath360 are replaced by the modalities @xmath361 , @xmath150 , @xmath362 and @xmath363 , where @xmath361 and @xmath150 are as usual and @xmath364 and @xmath365 .",
    "this is because the formula @xmath366 ( and dually @xmath367 ) can be translated as follows . here ` @xmath368 ' denotes either a ` @xmath369 $ ] ' or ` @xmath370 ' interval bracket .",
    "@xmath371}(\\theta { \\ensuremath{u}}(\\theta { \\ensuremath{\\wedge}}{\\ensuremath{o}}{\\eta } ) ) & \\mathrm{if \\ }",
    "i = ( a , b\\rangle , a>0 \\\\           { \\ensuremath{\\diamond}}_{i } \\eta { \\ensuremath{\\wedge}}(\\theta { \\ensuremath{u}}\\eta )                                         & \\mathrm{if \\ }",
    "i = [ 0,b\\rangle \\\\           { \\ensuremath{\\diamond}}_{i } \\eta { \\ensuremath{\\wedge}}(\\theta { \\ensuremath{u}}(\\theta                { \\ensuremath{\\wedge}}{\\ensuremath{o}}{\\eta } ) ) & \\mathrm{if \\ } i = ( 0,b\\rangle .",
    "\\end{array }                        \\right . \\end{array}\\ ] ]    next we consider the logic @xmath372 where the semantics of the recursive input determined operators @xmath277 and @xmath373 are given below ( as usual @xmath68 with @xmath161 ) .",
    "@xmath374 the logic @xmath358 is clearly expressively equivalent to @xmath375 since the predicates @xmath376 and @xmath377 are equivalent . using theorem  [ thm : ltl2 ] we can now conclude that      let @xmath379 denote the restriction of @xmath350 to non - singular intervals .",
    "then since the translation of @xmath380 to @xmath381 does not introduce any singular intervals , and the constructions in theorem  [ thm : ltl2 ] preserve the interval vocabulary of the formulas , we conclude that the logics @xmath354 and @xmath382 are expressively equivalent ."
  ],
  "abstract_text": [
    "<S> we consider a general notion of timed automata with _ input - determined _ guards and show that they admit a robust logical framework along the lines of @xcite , in terms of a monadic second order logic characterisation and an expressively complete timed temporal logic . </S>",
    "<S> we then generalise these automata using the notion of recursive operators introduced by henzinger , raskin , and schobbens @xcite , and show that they admit a similar logical framework . </S>",
    "<S> these results hold in the `` pointwise '' semantics . </S>",
    "<S> we finally use this framework to show that the real - time logic mitl of alur et al @xcite is expressively complete with respect to an mso corresponding to an appropriate input - determined operator .    </S>",
    "<S> keywords : timed automata , monadic second - order logic , real - time temporal logics </S>"
  ]
}