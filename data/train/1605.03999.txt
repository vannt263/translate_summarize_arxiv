{
  "article_text": [
    "network and security researchers rely on topological maps of the logical internet to address problems ranging from critical infrastructure protection to policy . production active measurement systems that continually gather and curate internet topology , e.g.  @xcite , are thus important to many longitudinal analyses and to shedding light on network events of interest .",
    "obtaining ip , router , and provider - level network topologies has been a continual research focus for more than two decades @xcite .",
    "while significant progress has been made , topology mapping at internet scale remains a challenge . both the accuracy of the inferred network topologies @xcite , and the speed at which they can be recovered @xcite , present obstacles to current mapping efforts . in this work ,",
    "we focus on the _ speed _ and _ scale _ of internet - wide active topology mapping .    given its scale , experience and popular belief",
    "dictates that obtaining even partial internet topologies via active network probing is a time - intensive process .",
    "for instance , caida s archipelago ( ark ) @xcite system uses dozens of vantage points and at least a day to traceroute to a single address in each routed /24 ipv4 prefix .",
    "a recent topology cycle gathered by ark from april , 2016 @xcite sent approximately 11 m traceroutes from 37 monitors over the course of 31 hours in order to discover @xmath21 m distinct router interfaces , and @xmath22 m links .",
    "we re - examine some of the assumed fundamental limits of active topology mapping to consider whether such probing could be performed in minutes rather than hours .",
    "taking inspiration from recent stateless and randomized high - speed network scanners such as zmap @xcite and masscan @xcite , we create yarrp(yelling at random routers progressively ) .    to facilitate high - probing rates , yarrpis stateless , reconstituting all necessary information from replies as they arrive asynchronously . to avoid overloading routers or links , yarrprandomly permutes its input @xmath3 space when probing .",
    "yarrpis thus well - suited for internet - scale studies .",
    "our contributions include :    1 .",
    "development of yarrp , a publicly available tool @xcite that permits rapid active network topology discovery .",
    "we run yarrpat @xmath1 to discover more than 400,000 router interfaces in under 30 minutes . 2 .",
    "a comparison of yarrpand caida s existing production topology collection platform , showing recall and speed differences .",
    "3 .   as an application of rapid topology discovery , we conduct successive topology snapshots separated by a small time delta and characterize the distribution and causes of observed path differences .",
    "traditional traceroute @xcite obtains the sequence of router interface ip addresses along the forward path to a destination by sending probe packets with varying time to live ( ttl ) values and examining the icmp responses . by maintaining the transmission timestamp of each probe , traceroute can report the round trip time ( rtt ) from the source to each responsive hop .",
    "modern traceroute implementations send batches of concurrent probes to lower tracing time , e.g.  linux defaults to 16 simultaneous probes . in order to match probes to",
    "the icmp ttl exceeded responses they generate , the probe must include unique identifiers that are returned as part of the icmp quotation @xcite . because the quote is only required to copy the first 28 bytes of the packet that induced the expiry message @xcite , traceroute typically relies on the first 8 bytes of the transport - layer header to match responses to probes .    while various improvements have been proposed and implemented , the core behavior of traceroute  and large scale active topology scanning ",
    "remains largely unchanged . to prevent false inferences due to load - balanced paths , augustin et al .",
    "created paris traceroute @xcite . to reduce unnecessary probing , donnet et al .",
    "developed doubletree @xcite , a modified traceroute that begins probing from a likely path midpoint outward until it reaches previously discovered hops .",
    "similarly , @xcite proposed several topology primitives empirically shown to reduce the volume of probing while maintaining or increasing topological discovery .",
    "luckie et al .",
    "developed scamper @xcite , a production - quality packet prober .",
    "scamper implements both doubletree and paris traceroute , has an open api , can maintain a configurable probing rate , and can be controlled remotely .",
    "caida s production ark infrastructure  @xcite uses scamper to perform continual internet - wide probing  @xcite .",
    "traceroute was originally designed as a tool for network administrators to diagnose a small number of paths , not as a means to gather snapshots of the entire internet topology @xcite .",
    "fundamentally , traceroute and its variants all have two properties that limit their scalability and speed .",
    "they :    * maintain state for each outstanding probe sent , including some identifier and origination time .",
    "* are sequential , probing all hops along the path to a destination .",
    "while some tools ( e.g.  scamper ) can traceroute to multiple targets , this parallelism is limited to a finite window of destinations .",
    "in contrast , yarrpis designed to be stateless and random  probing different portions of many different paths simultaneously .",
    "this allows yarrpto send probes at a high per - packet rate , while spreading the load among many destination networks to avoid concentrating load on particular paths , links or routers , thereby avoiding anomaly alarms or icmp rate limiting .",
    "the high - level idea of yarrpis : i ) randomization of the probing order of the domain of network range(s ) and ttls ; and ii ) stateless operation , whereby all necessary state is encoded into the probes such that it can be recovered from the icmp replies .",
    "yarrpis written in c++ , is portable to a variety of unix - like platforms , and is publicly available  @xcite .",
    "existing traceroute techniques probe all hops along a path to a destination in sequence . instead",
    ", we employ a keyed block cipher to provide a bijection over the input domain of target ips and ttls ( @xmath4 ) .",
    "this means that yarrpwill e.g.  send a probe to ip address @xmath5 with @xmath6 , then toward @xmath7 with @xmath8 , then @xmath9 with @xmath10 , and so on until the entire space of @xmath11 for each target @xmath12 is covered .    the symmetric rc5 block cipher with a 32-bit block size is fast and a natural fit for our application . with key @xmath13 , yarrpencrypts the sequence @xmath14 where bits of each ciphertext @xmath15 determine the target ip address and ttl to probe . in this way , yarrprandomizes the order of probed @xmath16 .",
    "yarrpcan permute arbitrarily large or small ipv4 address and ttl domains , or can permute the order of specific targets read from a file .",
    "depending on the size of the domain , we switch between either a prefix - cipher or cycle - walking cipher , as described in @xcite .",
    "to facilitate comparison with caida s ipv4 topology dataset  @xcite , yarrphas a mode that probes a random address in each ipv4 24-bit subnet  this mimics the targets selected in a full cycle of caida s probing . here ,",
    "yarrpencrypts each @xmath17 with key @xmath13 . for @xmath18 , yarrpprobes the ipv4 address @xmath19 * 2 ^ 8 + ( c_i[0]+c_i[1]+c_i[2 ] ) \\% 256 $ ] with ttl @xmath20 $ ] . in this fashion , we permute through the space of @xmath21 possible /24s , and construct the least - significant octet as a function of the subnet such that the same random address in each /24 is used as the destination for each ttl .",
    "an advantage of yarrp s randomization method is that the probing work can easily be distributed among multiple vantage points with negligible coordination or communication overhead .",
    "we discuss distributed yarrpas a future enhancement in   [ sec : conclusions ] .",
    "existing traceroute techniques require state to match icmp replies to probes .",
    "in contrast , yarrpdoes not require state .",
    "we overload various fields in the probe packets with specific values such that we can reconstruct the corresponding probe s destination , transmission time , and originating ttl from within the quote of the icmp ttl exceeded messages .",
    "figure  [ fig : fields ] depicts the tcp / ip header fields we utilize .",
    "we encode the ttl with which the packet was sent in the ipid and the elapsed time in the tcp sequence number .",
    "we use elapsed time rather than e.g.  unix time in order to maintain millisecond resolution with only a 32-bit field .",
    "yarrpcan also encode microsecond resolution , so long as the expected duration of a probing run is less than @xmath224300 seconds .",
    "the destination tcp port is fixed to port 80 to facilitate firewall traversal , while we populate the source tcp port with the checksum of the target ip address . in this fashion , we can detect instances where the destination ip address is modified enroute , a phenomenon malone and luckie observe in 2% of their results  @xcite .    in order to properly accommodate load - balanced paths , which are common in the internet ,",
    "we ensure that , for a given destination , certain fields remain fixed for all ttl probe values .",
    "for instance , although the tcp source port changes , it is a function of the destination ip address and therefore will contain the same value for all probes sent toward the destination .",
    "this design allows us to maintain the benefits of paris traceroute  @xcite .",
    "when icmp ttl exceeded messages arrive , we examine the included quotation to recover the destination probed , the originating ttl ( hop ) , responding interface at that hop , and compute the rtt by taking the difference of the packet arrival time and the probe origination time as encoded in the quoted tcp sequence number .",
    "these values can be computed from the minimum 28 bytes of required quotation @xcite .",
    "finally , yarrpcan source either tcp syn or ack probes .",
    "while syn probes can permit middlebox traversal , we use the ack - only mode to avoid alarms triggered by large volumes of syn traffic .",
    "the benefits of yarrp s design come with several concomitant challenges , namely : i ) reconstructing the unordered responses into paths , ii ) knowing when to stop probing , and iii ) avoiding unnecessary probing .",
    "in following with yarrp s stateless nature , icmp responses are decoded as they arrive and written sequentially to a structured output file .",
    "each entry in the output file corresponds to an icmp response .",
    "an entry includes the target ip address , originating ttl , responding router interface ip address , rtt , and meta - data such as timestamps , ipid , response ttl , packet sizes , and dscp markings .",
    "because of the inherently random probing , the entries for each hop along a path to a given destination will be unordered and intermixed with other responses in the yarrpoutput file .",
    "we must therefore reconstruct complete paths by parsing the entire output file and maintaining state for each destination . while this is a memory and time - intensive task ,",
    "the key point is that it can be performed _ off - line_. in this fashion , we decouple probing from path reconstruction to permit the probing to be as fast as possible . included in the yarrpdistribution",
    "@xcite is a ` yrp2warts ` python script that performs this off - line conversion into the standard warts @xcite binary trace format .",
    "a practical consequence of yarrp s randomization and lack of state is that its probing behavior does not depend on the received responses .",
    "thus , yarrpcannot stop probing once it reaches the destination or when the path contains a sequence of unresponsive hops ( the so - called `` gap limit '' ) . to better understand the optimal range of ttls to probe ( from the possible space 1 - 255 ) , we examine the results from a complete cycle of ark probing from january , 2016  @xcite .",
    "we seek to determine , across each of the ark vantage points , the number of unique router interfaces discovered at each ttl .",
    "figure  [ fig : ttlhisto ] shows the inter - quartile range of the number of distinct interfaces found as a function of ttl for each of the vantage points ; the red line in the boxplot displays the median number of interfaces per ttl among each vantage point . because of the internet s tree - like structure , the first few hops reveal only a small number of interfaces regardless of the destination probed .",
    "the bulk of the interfaces are found between ttls 10 to 16 , with an inflection point around a ttl of 14 .",
    "the amount of discoverable topology beyond a ttl of 32 is negligible ( note the log scale y - axis ) . as a result , yarrpdefaults to probing ttls 1 to 32 to minimize unnecessary probing while exploring the majority of the space .    for many destinations yarrpwill perform more probing than traditional traceroute methods .",
    "this is both an advantage and a disadvantage : we show in   [ sec : results : gaplimit ] that discoverable topology exists beyond multiple unresponsive hops ( where existing methods terminate early ) .      in environments sensitive to probing volume , several optimizations can substantially decrease unnecessary probing at the expense of maintaining some state .",
    "this subsection discusses optimizations to the base yarrpdesign to enable different tradeoffs .    first ,",
    "yarrpcan read a bgp routing table of network prefixes and build a longest - match patricia trie  @xcite . when iterating through the entire permuted ipv4 space , yarrpcan skip destinations that are not routed .",
    "based on current global bgp routing tables  @xcite , this optimization avoids probing approximately 1.5b ip addresses ( 35% of the 32-bit space ) that are unlikely to return useful results .",
    "note that the memory required to maintain the bgp table is constant during a probing run ( amounting to approximately 300 mb during runtime ) . in our experiments",
    ", these lookups in the patricia trie did not prevent yarrpfrom running at over @xmath23 .",
    "second , the tree - like structure of the network implies that the set of interfaces near to the vantage point is small relative to the universe of router interfaces  @xcite . in figure",
    "[ fig : ttlhisto ] for instance , all of the traces have a single first hop in common and orders of magnitude fewer interfaces at hops 1 - 3 as compared to hops 13 - 15 . to avoid rediscovering the same nearby router interfaces repeatedly , yarrpcan maintain state over the set of responding local `` neighborhood '' interface ip addresses at hops 1 through a run - time configurable @xmath24 . for each ttl in the neighborhood , yarrpmaintains two timestamps : the last time a probe was sent with that ttl , and the last time a new interface at that depth replied . if no new interfaces have been discovered within the past @xmath25 seconds of probing , yarrpskips future probes at that ttl .",
    "the ` yrp2warts ` script can then stitch together these missing hops .",
    "while the amount of state in neighborhood mode can grown unbounded , in practice it is small for small @xmath24 , while avoiding substantial over - probing .",
    "this section examines results from running yarrpon the internet . we compare the topological recall against an existing production system and",
    "then analyze the discovery yield ( i.e.  the amount of new topology discovered over time ) . finally , as an application of yarrp s probing speed , we gather two successive snapshots of internet topology separated in time by a small delta to reveal instances of short - lived network dynamics .",
    "we empirically verify yarrp s correctness by evaluating it against caida s use of scamper in the ark infrastructure  @xcite .",
    "caida makes their topology traces publicly available  @xcite .",
    "we find all 67,045 destinations probed from the san diego vantage point on may 1 , 2016 . from this same network attachment point , we instruct yarrpto probe the same destinations . in this fashion , because the vantage point networks and set of destinations are the same , we expect the paths to be largely congruent , allowing an unbiased comparison of topological recall between the two probing methods .    from the yarrpand ark probing , we construct graphs of interface nodes connected by edges when the interfaces appear in consecutive hops of a path .",
    "we ignore anonymous interfaces @xcite such that the graph may be disconnected .",
    "figure  [ fig : wartscmp ] displays the resulting graph degree distributions on a log - log scale .",
    "we observe that the distributions match closely , empirically supporting yarrp s ability to discover the responsive topology .",
    "however , yarrpdiscovers 16% fewer interfaces ( 80,134 versus 66,939 ) and 13% fewer edges ( 96,763 versus 84,113 ) than ark in this experiment .",
    "we attribute much of this difference to yarrp s use of tcp ack probes as compared to caida s use of icmp probes . in a survey by key et al .",
    ", icmp probes elicit almost 18% more responses as compared to tcp probes  @xcite .",
    "icmp and udp - based probing are future yarrpenhancements ( see   [ sec : conclusions ] ) .",
    "[ sec : results : gaplimit ] yarrp s stateless nature implies that it probes all ttls from 1 to 32 , whereas ark s use of scamper ceases probing after encountering five unresponsive hops in a row . in the same caida",
    "san diego probing run , 39,613 traces stopped due to this gap - limit .",
    "for each of these gap - limit traces , we compute the difference of the highest responding ttl hop from yarrpprobing and the highest responding ttl from the ark probing .",
    "figure  [ fig : gapdiff ] shows the cumulative distribution of this difference among the gapped traces ; a positive difference means that yarrpdiscovered topology beyond the point where ark stopped probing . for @xmath2674% of the traces ,",
    "there is no difference . in 8% of the traces",
    ", ark discovers one more hop than yarrp .",
    "however , yarrpdiscovers one additional hop in @xmath27% of the targets , and more than 5 additional hops in 4% of the cases .      a goal of yarrpis rapid topological discovery . in this subsection , we look specifically at the ability to discover unique router interface addresses rapidly .    on may 10 , 2016",
    ", we run yarrpfrom a northeast united states university vantage point at @xmath28 and instruct it to perform the ark - mode randomized probing of the globally routed ipv4 /24 prefixes .",
    "we limit yarrpto this rate , and limit the duration of our experiment , per prior agreement with the local network administrator .",
    "the physical machine is a multi - core intel l5640 processor running at 2.27ghz , with yarrprunning on an ubuntu virtual machine allocated a single core . at this rate ,",
    "the cpu utilization is @xmath2652% .",
    "we enable the `` neighborhood '' optimization , as described in   [ sec : design : optimize ] , as we are interested in finding as many distinct router interfaces as possible given the probing rate .",
    "figure  [ fig : discovery ] displays the cumulative number of distinct router interfaces discovered as a function of time . as a basis of comparison , we also plot the number of unique interfaces found over time for a single vantage point ( again , using data from the san diego node of caida s continual /24 probing  @xcite on may 1 , 2016 ) .",
    "caida s san diego monitor discovers 12,568 unique interfaces in 1,500 seconds ( @xmath29 per second ) .",
    "by contrast , yarrpdiscovers 421,162 unique ipv4 interfaces in the same period , or approximately 280 distinct router interfaces a second .",
    "the interfaces found by yarrpin less than 30 minutes equates to 42% of _ all _ unique interfaces discovered from all ark monitors over the course of probing for more than a day .      as an application of rapid topology discovery",
    ", we collect topology snapshots in rapid succession and analyze their properties and differences in this subsection .",
    "we gather 67,045 target destinations from caida s may 1 , 2016 topology probing from their san diego monitor . again using the east coast university vantage point",
    ", we run yarrpto probe ttls 1 - 32 for these same 67,045 targets .",
    "we run yarrpat @xmath30 and invoke yarrpthree times in succession with a minute pause in - between . in this way",
    ", each snapshot takes approximately 8 minutes to gather , and each is separated by a minute .",
    "we term the snapshots @xmath31 and @xmath32 in chronological order .",
    "the interface - level graph resulting from @xmath33 contains 39,968 interfaces and 46,721 edges , while @xmath34 has 40,038 interfaces and @xmath35 edges .",
    "@xmath32 contains @xmath36 interfaces and @xmath37 edges .    to better understand the differences between snapshots , we perform a per - target path comparison",
    "for each target in @xmath38 , we compare the discovered path in @xmath38 to the discovered path to that same target in @xmath39 .",
    "we use the levenshtein edit distance to measure the per - target path differences between snapshots .",
    "the edit distance is the minimum number of edits ( insertions , substitutions , or deletions of router interfaces ) .",
    "note that inter - snapshot differences are not attributable to per - flow load balancing as yarrpkeeps the packet header fields which are used for load balancing constant for the same destination between snapshots (  [ sec : design : stateless ] ) .    additionally , to better understand the types of path changes , we count the frequency of each edit operation and missing hop substitutions .",
    "these missing hop operations are instances where the path contains a responsive router for a particular ttl for one snapshot , but no response at that ttl when probing the same destination in a subsequent snapshot .",
    "such missing hops may be attributable to routers performing icmp rate limiting , or may be due to packet loss .",
    "a deeper analysis of the most frequent missing hops between @xmath33 and @xmath34 reveals that the large majority ( 92.2% ) come from the first four hops within the local network of the vantage point . specifically , 73% of the missing hops are due to the router at ttl 3 , 18% are due to the router at ttl 1 , and 1% are due to the router at ttl 4 .",
    "in contrast , the router at ttl 2 always responds , suggest that some of the local routers implement icmp rate limiting while one does not .",
    "figure  [ fig : ed ] displays the results of the edit distance comparison between @xmath33 and @xmath34 , ignoring differences attributable to the local network ( ttl @xmath40 , as described above ) . the paths to approximately 91% of the destinations are identical between @xmath33 and @xmath34 , while approximately 6% have a single hop difference . less than 1% of the destinations show a difference of @xmath41 hop edits",
    ".    separated by the edit operation , we see that @xmath2 4% of the 1 hop differences are due to missing hops , 1% are hop deletions , and fewer than 1% are substitutions .    to understand the potential of rapidly collected topology snapshots , we manually investigate and highlight a path exhibiting a significant change between snapshots .",
    "figure  [ fig : samplepath ] shows , for each of the three snapshots , the final four responsive hops toward the destination 188.32.230.138 ( in as 42610 ) . in the intermediate snapshot , @xmath34 ,",
    "we see two hop substitutions where the next hop after as 1273 ( 213.185.219.106 , cable and wireless ) changes to a different sequence of hops within as 12389 ( rostelecom ) . by the time of the third snapshot , @xmath32 , the path changes back to that seen in @xmath33 .    while the exact cause of this short - lived routing change is unknown , the key point is that it would not have been discovered by the existing topology mapping systems .",
    "we leave a comprehensive analysis of the extent and duration of these short - lived dynamics exposed by yarrpto future work .",
    "yarrpdemonstrates a new technique for internet - scale active topology probing that permits rapid collection of topology snapshots . as with our initial investigation of short - lived topology dynamics ,",
    "our hope is that yarrpfacilitates analyses not previously possible .",
    "yarrpis stable and the code is publicly available  @xcite .",
    "that said , there are several enhancements that would be valuable additions .",
    "first , yarrpcurrently only supports ipv4 probing .",
    "given the vastly larger ipv6 address space , and relative topological sparsity  @xcite , adding ipv6 support to yarrpcould enable more complete maps of the ipv6 topology to be gathered .",
    "second , yarrpis currently capable of sending only tcp probes .",
    "it is well - known that using different transport protocols yields different responses , due to widespread security and policy filtering  @xcite .",
    "we plan to add icmp and udp probing to yarrp , which requires utilizing different transport header fields to encode probe information .",
    "doing so is non - trivial as we must maintain both the paris - traceroute property of keeping certain fields constant to keep packets on a single load - balanced path , while also retaining yarrp s stateless behavior .",
    "third , yarrp s stateless and asynchronous nature implies that a malicious actor could attempt to send bogus responses , while middleboxes are known to mangle packet headers  @xcite . in the future",
    ", we wish to use a keyed cryptographic integrity function over multiple probe values . instead of",
    "a simple checksum on the target ip address , we will populate the source port with the value of this keyed integrity check .",
    "yarrpcan then ensure that it both sent the original probe , and that the probe was not modified in - flight such that the response is not useful .    finally , an attractive feature of yarrp s design is the ability to easily randomize and distribute the probing to multiple vantage points with negligible coordination and communication overhead .",
    "similar to the rapid scanning worm envisioned by staniford et al . , the permuted domain can be distributed  @xcite . for @xmath42 vantage points , and a given domain @xmath4 , each vantage point encrypts @xmath43 of the range @xmath14 .",
    "thus , the @xmath44th vantage point encrypts the range of values @xmath45 to @xmath46 to obtain its sequence of + @xmath16 values to probe from the overall permutation .",
    "the potential speed improvement is linearly proportional then to the number of vantage points . only the values @xmath47 and @xmath44 need be sent to each vantage point to distribute the permuted space and achieve complete randomized coverage .",
    "given our empirical ( and conservative ) @xmath23 yarrprate in this work , we estimate that it is possible to implement a distributed yarrpamong @xmath2128 vantage points to traceroute to every routed ipv4 address ( @xmath48 targets ) in approximately one hour .",
    "yarrpmay thus facilitate rapid collection of _ complete _ internet snapshots in the future ."
  ],
  "abstract_text": [
    "<S> obtaining a `` snapshot '' of the internet topology remains an elusive task . </S>",
    "<S> existing active topology discovery techniques and production systems require significant probing time  time during which the underlying network may change or experience short - lived dynamics . in this work , </S>",
    "<S> we consider how active probing can gather the internet topology in _ minutes _ rather than days . conventional approaches to active topology mapping face </S>",
    "<S> two primary speed and scale impediments : i ) per - trace state maintenance ; and ii ) a low - degree of parallelism . based on this observation </S>",
    "<S> , we develop yarrp(yelling at random routers progressively ) , a new traceroute technique designed for high - rate , internet - scale probing . </S>",
    "<S> yarrpis stateless , reconstituting all necessary information from icmp replies as they arrive asynchronously . to avoid overloading routers or links with probe traffic , yarrprandomly permutes an input @xmath0 space . </S>",
    "<S> we run yarrpat @xmath1 , a rate at which the paths to all /24 </S>",
    "<S> s on the ipv4 internet can be mapped in approximately one hour from a single vantage point . </S>",
    "<S> we compare yarrp s topological recall and discovery rate against existing systems , and present some of the first results of topological dynamics exposed via the high sampling rates yarrpenables . </S>"
  ]
}