{
  "article_text": [
    "a _ cylindrical algebraic decomposition _ ( cad ) is : a _ decomposition _ of @xmath0 , meaning a collection of cells which do not intersect and whose union is @xmath0 ; _ cylindrical _ , meaning the projections of any pair of cells with respect to a given variable ordering are either equal or disjoint ; and , _",
    "( semi)-algebraic _ , meaning each cell can be described using a finite sequence of polynomial relations .",
    "the original cad by collins @xcite was introduced as a tool for quantifier elimination over the reals .",
    "since then cad has also been applied to problems including epidemic modelling @xcite , parametric optimisation @xcite , theorem proving @xcite , motion planning @xcite and reasoning with multi - valued functions and their branch cuts @xcite .",
    "traditionally , a cad is built _ sign - invariant _ with respect to a set of polynomials such that each one has constant sign in each cell , meaning only one sample point per cell need be tested to determine behaviour .",
    "collins algorithm works in two phases . in the _ projection _",
    "phase an operator is repeatedly applied to polynomials each time producing a set in one fewer variables .",
    "then in the _ lifting _ phase cads of real space are built incrementally by dimension according to the real roots of these polynomials .",
    "a full description is in @xcite and @xcite summarises improvements from the first 20 years ( @xcite references more recent developments ) .    in 2009",
    "an approach to cad was introduced which broke with the projection and lifting framework @xcite . instead , a",
    "_ complex cylindrical decomposition _ ( ccd ) of @xmath1 is built using triangular decomposition by regular chains , and then real root isolation is applied to move to a cad of @xmath2 .",
    "we can view the ccd as an enhanced projection since gcds are calculated as well as resultants .",
    "it means the second phase is less expensive than lifting since case distinction can avoid identifying unnecessary roots .",
    "we use ` pl - cad ` for cads built by projection and lifting and ` rc - cad ` for cads built with the new approach .",
    "the initial work was improved in @xcite by introducing purpose - built algorithms to refine a ccd incrementally by constraint whilst maintaining cylindricity and recycling subresultant calculations .",
    "a modification of the incremental algorithm to work with relations instead of polynomials then allowed for simplification in the presence of _ equational constraints _ ( ecs ) : equations whose satisfaction is logically implied by the input .",
    "the output was no longer sign - invariant for polynomials but _ truth - invariant _ for a formula ( the conjunction of relations ) .",
    "similar ideas had been developed for `",
    "pl - cad ` @xcite but were difficult to generalise to multiple ecs .    in @xcite , a new variant of ` rc - cad ` was presented . here , instead of building a cad for a set of polynomials or relations we build one for a sequence of quantifier free formulae ( qffs ) such that each formula has constant truth value on each cell : a _ truth - table invariant _ cad or tticad .",
    "it followed the development of tticad theory for ` pl - cad ` ( see @xcite , @xcite ) and combined it with the benefits of ` rc - cad ` .",
    "the ccd is built using a tree structure incrementally refined by constraint .",
    "ecs are dealt with first , with branches refined for other constraints in a formula only if the ec is satisfied .",
    "further , when there are multiple ecs in a formula branches can be removed when the constraints are not all satisfied .",
    "see @xcite and @xcite for full details .",
    "building a tticad is often the best way to obtain a truth - invariant cad for a single formula ( if the formula has disjunctions then treating each conjunctive clause as a subformula allows simplification in the presence of any ecs ) but is also the object required for applications like simplification of complex functions via branch cut analysis ( see @xcite @xcite ) .",
    "the implementation of @xcite in the ` regularchains ` library @xcite ( denoted ` rc - tticad ` ) is our topic here .",
    "all cad algorithms require the user to specify an ordering on the variables . for ` pl - cad `",
    "this determines the order of projection and thus the sequence of euclidean spaces considered en - route to @xmath0 . for ` rc - cad ` if determines both the triangular decompositions performed and the refinement to @xmath0 .",
    "depending on the application there may be a free or constrained choice .",
    "for example , in quantifier elimination we must order the variables as they are quantified but may change the ordering within quantifier blocks .",
    "problems easy in one variable ordering can be infeasible in another , with @xcite giving problems where one ordering leads to a cell count constant in the number of variables and another to one doubly exponential ( irrespective of the algorithm used ) . hence any choice must be made intelligently .",
    "we write @xmath3 if @xmath4 is greater than @xmath5 in an ordering ( noting that ` pl - cad ` eliminates variables from greatest to lowest in the ordering ) .",
    "we start in section [ sec : existing ] by evaluating ( with respect to ` rc - tticad ` ) existing heuristics for choosing the variable ordering .",
    "then in section [ sec : new ] we suggest some extensions to improve their use before developing our own heuristic more closely aligned to ` rc - tticad ` .",
    "we give our conclusions in section [ sec : conclusions ] .",
    "in what follows we assume @xmath6 is a polynomial , @xmath7 a variable and @xmath8 the set of polynomials defining the input to ` rc - tticad ` .",
    "let @xmath9 be the degree of @xmath6 in @xmath7 , @xmath10 the total degree of @xmath6 and @xmath11 the leading coefficient of @xmath6 when considered as a univariate polynomial in @xmath7 .",
    "for a set let @xmath12 be the maximum value , @xmath13 the sum of values and ` # ` the number of values .",
    "we start by considering two heuristics already in use for choosing the variable ordering in algorithms from the ` regularchains ` library @xcite .",
    "triangular : : :    start with the first criteria , breaking ties with successive ones .",
    "let    @xmath14 } = \\texttt{max } ( \\ { \\texttt{deg}(f , v ) , \\ , | \\ , f \\in p \\ } ) $ ] .",
    "then set @xmath3 if @xmath15 } < x^{[1]}$ ] .    2 .",
    "let    @xmath16 } = \\texttt{max } ( \\ { \\texttt{tdeg}(\\texttt{lcoeff}(f , v ) ) , \\",
    ", | \\ , f \\in p \\mbox { ( containing $ v$)}\\ } ) $ ] . +    then set @xmath3 if @xmath17 } < x^{[2]}$ ] .    3 .",
    "let    @xmath18 } = \\texttt{sum } ( \\ { \\texttt{deg}(f , v ) , \\ , | \\ , f \\in p \\ } ) $ ] .",
    "then set @xmath3 if @xmath19 } < x^{[3]}$ ] .",
    "brown : : :    start with the first criteria , breaking ties with successive ones .",
    "set @xmath3 if @xmath15 } < x^{[1]}$ ] ( as    defined in the heuristic above ) .    2 .",
    "let    @xmath20 } = \\texttt{max } ( \\ { \\texttt{tdeg}(t ) , \\ , | \\ , \\mbox{$t$ is a monomial ( containing $ v$ ) from a}$ ] +    @xmath21 . then set    @xmath3 if @xmath22 } < x^{[4]}$ ] .    3 .",
    "let    @xmath23 } = \\texttt{\\ # } ( \\ { t , \\ , | \\",
    ", \\mbox{$t$ is a monomial ( containing $ v$ ) from a polynomial}$ ] +    @xmath24 . then set @xmath3 if    @xmath25 } < x^{[5]}$ ] .",
    "these both involve only simple measures on the input .",
    "the first was implemented as part of the work for @xcite ( although not formally defined there ) .",
    "it is used for various triangular decomposition algorithms in the regularchains library ( and is the default for ` suggestvariableorder ` ) .",
    "the second was developed for cad as described in the tutorial notes @xcite . in @xcite",
    "it was shown to do well in choosing a variable ordering for qepcad ( an implementation of ` pl - cad ` ) .",
    "the next two heuristics were developed for `",
    "pl - cad ` and work by running the projection phase for each possible variable ordering and picking an optimal ordering using a measure of the projection set .",
    "our implementations use the projection polynomials generated by mccallum s operator @xcite on @xmath8 .",
    "sotd : : :    select the variable ordering with the lowest _ sum of total degrees _    for each of the monomials in each of the polynomials in the projection    set .",
    "ndrr : : :    select the variable ordering with the lowest _ number of distinct real    roots _ of the univariate projection polynomials    sotd was suggested in @xcite where it was found to be a good heuristic for both cad and qe by cad using redlog ( another implementation of ` pl - cad ` ) .",
    "ndrr was suggested in @xcite as an alternative which would discriminate between differences in the real geometry .",
    "these heuristics are clearly more expensive but note that the lifting phase does the bulk of the work for ` pl - cad ` , with the projection phase often trivial ( and if not then the lifting phase is likely infeasible ) . to evaluate the heuristics we generated 600 random examples , each with two qffs themselves a conjunction of two constraints .",
    "there were 100 for each of six system types : * 00 * , * 10 * , * 20 * , * 11 * , * 12 * , * 22*. each digit in these labels determines to the number of ecs in a qff ( with the other constraints strict inequalities ) .",
    "the polynomials defining the constraints were sparse and in three variables , generated using maple s ` randpoly ` function . `",
    "rc - tticad ` was applied to build cads for the problems using each of the six possible variable orderings . a time out of 12 minutes",
    "a problem was used affecting only six examples ( one with system type * 20 * , two with * 10 * and three with * 00 * ) . for the others ,",
    "the cell count and computation time ( in seconds ) for each cad was recorded .",
    "table [ tab : all ] summarises this data , showing the average and median values for each system .",
    "first we see that ( as expected ) ` rc - tticad ` does better when a qff has an ec . although , we note the anomaly between systems of * 10 * and * 20*. it seems the savings from truncating branches where ecs are not simultaneously satisfied are wiped out by the costs of doing this .",
    "it is likely the savings would be restored in the qffs contained further non - ecs which require more processing per branch .",
    "this will be investigated further in the future .",
    "next we note that the median cell counts and timings are considerably less than the mean average for every system type , indicating the presence of outliers .",
    "we provided a third piece of data : the median of the values for each problem when averaged over the six possible orderings .",
    "this will still avoid outlier problems but not outlier orderings . in every case",
    "this value is much closer to the mean average , indicating that most outlying data comes from bad orderings rather than bad problems , and thus highlighting the practical importance of the ordering .",
    "r.  bradford , c.  chen , j.h .",
    "davenport , m.  england , m.  moreno maza , and d.  wilson .",
    "truth table invariant cylindrical algebraic decomposition by regular chains .",
    "preprint : http://opus.bath.ac.uk/38344/ , 2014 .",
    "r.  bradford , j.h .",
    "davenport , m.  england , and d.  wilson . optimising problem formulations for cylindrical algebraic decomposition . in : _",
    "intelligent computer mathematics _ ( lncs 7961 ) , pages 1934 .",
    "springer berlin heidelberg , 2013 .",
    "quantifier elimination by cylindrical algebraic decomposition  20 years of progress . in : _",
    "quantifier elimination and cylindrical algebraic decomposition _ , texts & monographs in symb",
    ", pages 823 .",
    "springer - verlag , 1998 .",
    "m.  england , r.  bradford , c.  chen , j.h .",
    "davenport , m.  moreno maza , and d.  wilson .",
    "problem formulation for truth - table invariant cylindrical algebraic decomposition by incremental triangular decomposition .",
    "cicm 14 ( lnai 8543 ) , pages 4660 , 2014 .",
    "preprint : http://opus.bath.ac.uk/39231/    m.  england , r.  bradford , j.h .",
    "davenport , and d.  wilson . understanding branch cuts of expressions . in : _",
    "intelligent computer mathematics _",
    "( lncs vol .",
    "7961 ) , pages 136151 .",
    "springer berlin heidelberg , 2013 .",
    "z.  huang , m.  england , d.  wilson , j.h .",
    "davenport , l.  paulson , and j.  bridge . applying machine learning to the problem of choosing a heuristic to select the variable ordering for cylindrical algebraic decomposition .",
    "cicm 14 ( lnai 8543 ) , pages 92107 , 2014 .",
    "preprint : http://opus.bath.ac.uk/39232/    s.  mccallum . an improved projection operation for cylindrical algebraic decomposition . in : _",
    "quantifier elimination and cylindrical algebraic decomposition _ , texts & monographs in symb .",
    ", pages 242268 .",
    "springer - verlag , 1998 ."
  ],
  "abstract_text": [
    "<S> cylindrical algebraic decomposition ( cad ) is a key tool for solving problems in real algebraic geometry and beyond . in recent years </S>",
    "<S> a new approach has been developed , where regular chains technology is used to first build a decomposition in complex space . </S>",
    "<S> we consider the latest variant of this which builds the complex decomposition incrementally by polynomial and produces cads on whose cells a sequence of formulae are truth - invariant . </S>",
    "<S> like all cad algorithms the user must provide a variable ordering which can have a profound impact on the tractability of a problem . </S>",
    "<S> we evaluate existing heuristics to help with the choice for this algorithm , suggest improvements and then derive a new heuristic more closely aligned with the mechanics of the new algorithm . </S>"
  ]
}