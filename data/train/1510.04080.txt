{
  "article_text": [
    "* context . * the _ diagonal _ of a multivariate power series with coefficients  @xmath3 is the univariate power series with coefficients  @xmath4 . particularly interesting is the class of diagonals of _ rational _ power series ( ie , taylor expansions of rational functions ) . in particular , diagonals of _ bivariate _ rational power series are always roots of nonzero bivariate polynomials ( ie , they are algebraic series )  @xcite . since it is also classical that algebraic series are d - finite ( ie , satisfy linear differential equations with polynomial coefficients ) ,",
    "their coefficients satisfy linear recurrences and this leads to an optimal algorithm for the computation of their first terms  @xcite . in this article , we determine the degrees of these polynomials , the cost of their computation and related applications",
    ".    * previous work . *",
    "the algebraicity of bivariate diagonals is classical .",
    "the same is true for the converse ; also the property persists for multivariate rational series in positive characteristic  @xcite .",
    "the first occurrence we are aware of in the literature is plya s article  @xcite , which deals with a particular class of bivariate rational functions ; the proof uses elementary complex analysis . along the lines of plya s",
    "approach , furstenberg  @xcite gave a ( sketchy ) proof of the general result , over the field of complex numbers ; the same argument has been enhanced later  @xcite,@xcite .",
    "three more different proofs exist : a purely algebraic one that works over arbitrary fields of characteristic zero  ( * ? ? ?",
    "6.1 ) ( see also  ( * ? ? ?",
    "6.3.3 ) ) , one based on non - commutative power series  ( * ? ?",
    "5 ) , and a combinatorial proof  @xcite . despite the richness of the topic and the fact that most proofs are constructive in essence , we were not able to find in the literature any _ explicit _ algorithm for computing a bivariate polynomial that cancels the diagonal of a general bivariate rational function .",
    "diagonals of rational functions appear naturally in enumerative combinatorics .",
    "in particular , the enumeration of unidimensional walks has been the subject of recent activity , see  @xcite and the references therein .",
    "the algebraicity of generating functions attached to such walks is classical as well , and related to that of bivariate diagonals . beyond this structural result",
    ", several quantitative and effective results are known .",
    "explicit formulas give the generating functions in terms of implicit algebraic functions attached to the set of allowed steps in the case of excursions  @xcite,@xcite , bridges and meanders  @xcite .",
    "moreover , if @xmath5 and @xmath6 denote the upper and lower amplitudes of the allowed steps , the bound @xmath7 on the degrees of equations for excursions has been obtained by bousquet - mlou , and showed to be tight for a specific family of step sets , as well as generically  @xcite . from the algorithmic viewpoint , banderier and flajolet gave an algorithm ( called the _ platypus algorithm _ ) for computing a polynomial of degree @xmath8 that annihilates the generating function for excursions  @xcite .",
    "* contributions .",
    "* we design ( section  [ sec : diagonals ] ) the first explicit algorithm for computing a polynomial equation for the diagonal of an arbitrary bivariate rational function .",
    "we analyze its complexity and the size of its output in theorem  [ thm : bound diagonals ] .",
    "the algorithm has two main steps .",
    "the first step is the computation of a polynomial equation for the residues of a bivariate rational function .",
    "we propose an efficient algorithm for this task , that is a polynomial - time version of bronstein s algorithm  @xcite ; corresponding size and complexity bounds are given in theorem  [ th : bronstein ] .",
    "the second step is the computation of a polynomial equation for the sums of a fixed number of roots of a given polynomial .",
    "we design an additive version of the platypus algorithm  @xcite and analyze it in theorem  [ thm : platypus - bound ] .",
    "we show in proposition  [ prop : generic ] that generically , the size of the minimal polynomial for the diagonal of a rational function is exponential in the degree of the input and that our algorithm computes it in quasi - optimal complexity ( theorem  [ thm : bound diagonals ] ) .    in the application",
    "to walks , we show how to expand to high precision the generating functions of bridges , excursions and meanders .",
    "our main message is that pre - computing a polynomial equation for them is too costly , since that equation might have exponential size in the maximal amplitude  @xmath9 of the allowed steps .",
    "our algorithms have quasi - linear complexity in the precision of the expansion , while keeping the pre - computation step in polynomial complexity in  @xmath9 ( theorem  [ thm : walks ] ) .",
    "* structure of the paper . * after a preliminary section on background and notation , we first discuss several special bivariate resultants of broader general interest in section  [ sec : resultants ] .",
    "next , we consider diagonals , the size of their minimal polynomials and an efficient way of computing annihilating polynomials in section  [ sec : diagonals ] .",
    "in this section , that might be skipped at first reading , we introduce notation and technical results that will be used throughout the article .      in this article , @xmath10 denotes a field of characteristic  0 .",
    "we denote by @xmath11_n$ ] the set of polynomials in @xmath11 $ ] of degree less than  @xmath12 .",
    "similarly , @xmath13 stands for the set of rational functions in @xmath14 with numerator and denominator in @xmath11_n$ ] , and @xmath15_n$ ] for the set of power series in @xmath15 $ ] truncated at precision  @xmath12 .",
    "if  @xmath16 is a polynomial in @xmath17 $ ] , then its degree with respect to @xmath18 ( resp .",
    "@xmath19 ) is denoted @xmath20 ( resp .",
    "@xmath21 ) , and the _ bidegree _ of @xmath16 is the pair  @xmath22 .",
    "the notation @xmath23 is used for univariate polynomials .",
    "inequalities between bidegrees are component - wise .",
    "the set of polynomials in @xmath17 $ ] of bidegree less than @xmath24 is denoted by @xmath17_{n , m}$ ] , and similarly for more variables .",
    "the _ valuation _ of a polynomial  @xmath25 $ ] or a power series  @xmath26 $ ] is its smallest exponent with nonzero coefficient .",
    "it is denoted @xmath27 , with the convention  @xmath28 .",
    "the _ reciprocal _ of a polynomial  @xmath29 $ ] is the polynomial @xmath30 .",
    "if @xmath31 , the notation @xmath32 stands for the generating series of the _ newton sums _ of @xmath16 : @xmath33 a _ squarefree decomposition _ of a nonzero polynomial @xmath34 $ ] , where @xmath35 or @xmath11 $ ] , is a factorization  @xmath36 , with @xmath37 $ ] squarefree , the @xmath38 s pairwise coprime and  @xmath39 . the corresponding _ squarefree part _ of  @xmath40 is the polynomial  @xmath41 . if @xmath40 is squarefree then @xmath42 .",
    "the coefficient of  @xmath43 in a power series @xmath44 $ ] is denoted @xmath45a$ ] . if @xmath46 , then @xmath47 denotes the polynomial @xmath48 .",
    "the exponential series @xmath49 is denoted @xmath50 .",
    "the _ hadamard product _ of two power series  @xmath51 and  @xmath52 is the power series  @xmath53 such that @xmath45a\\odot b=[x^n]a\\cdot[x^n]b$ ] for all @xmath12 .",
    "if @xmath54 is a bivariate power series in @xmath55 $ ] , the _ diagonal _ of @xmath0 , denoted @xmath1 is the univariate power series in  @xmath56 $ ] defined by @xmath57      in several places , we need bounds on degrees of coefficients of bivariate rational series . in most cases ,",
    "these power series belong to  @xmath58 $ ] and have a very constrained structure : there exists a polynomial  @xmath59 $ ] and an integer  @xmath60 such that the power series can be written @xmath61 with @xmath62 $ ] and @xmath63 , for all @xmath12 .",
    "we denote by @xmath64 the set of such power series .",
    "its main properties are summarized as follows .",
    "[ growth ] let @xmath65 $ ] , @xmath66 and @xmath67 $ ] .    the set @xmath64 is a subring of  @xmath58 $ ] ;    let @xmath68 with @xmath69 , then @xmath70 ;    the products obey @xmath71    for  _ ( 3 ) _ , if @xmath72 and @xmath73 belong respectively to  @xmath64 and @xmath74 , then the @xmath12th coefficient of their product is a sum of terms of the form @xmath75 .",
    "therefore , the degree of the numerator is bounded by @xmath76 , whence _ ( 3 ) _ is proved .",
    "property  _ ( 1 ) _ is proved similarly . in property  _ ( 2 ) _ , the condition on  @xmath77 makes  @xmath78 well - defined .",
    "the result follows from  _ ( 1)_.    as consequences , we deduce the following two results .",
    "[ coro : invpol ] let  @xmath79 $ ] with @xmath80 be such that  @xmath81 .",
    "let @xmath82 be a squarefree part of @xmath40 .",
    "then @xmath83    write @xmath84 with @xmath85 .",
    "then the result when @xmath40 is squarefree ( @xmath86 ) follows from part  _ ( 2 ) _ of lemma  [ growth ] , with  @xmath87 .",
    "the general case then follows from parts  _ ( 1,3)_.    [ prop : derivatives - rational - function ] let  @xmath16 and  @xmath40 be polynomials in  @xmath17 $ ] , with @xmath88 , @xmath89 and  @xmath90 . then for all @xmath91 , @xmath92 with @xmath93 .",
    "the taylor expansion of @xmath94 has for coefficients the derivatives of @xmath0 .",
    "we consider it either in  @xmath95 $ ] or in  @xmath96 $ ] .",
    "corollary  [ coro : invpol ] applies directly for the degree in  @xmath18 .",
    "the saving on the degree in  @xmath19 follows from observing that in the first part of the proof of the corollary , the decomposition  @xmath97 has the property that @xmath98 .",
    "this @xmath99 is then propagated along the proof thanks to part _ ( 3 ) _ of lemma  [ growth ] .",
    "we recall classical complexity notation and facts for later use .",
    "let @xmath10 be again a field of characteristic zero .",
    "unless otherwise specified , we estimate the cost of our algorithms by counting arithmetic operations in @xmath10 ( denoted `` ops . '' ) at unit cost .",
    "the soft - o notation @xmath100 indicates that polylogarithmic factors are omitted in the complexity estimates .",
    "we say that an algorithm has quasi - linear complexity if its complexity is @xmath101 , where @xmath9 is the maximal _ arithmetic size _ ( number of coefficients in  @xmath10 in a dense representation ) of the input and of the output . in that case , the algorithm is said to be _ quasi - optimal_.    * univariate operations .",
    "* throughout this article we will use the fact that most operations on polynomials , rational functions and power series in one variable can be performed in quasi - linear time .",
    "standard references for these questions are the books  @xcite and  @xcite .",
    "the needed results are summarized in fact  [ fact : complexity ] below .",
    "[ fact : complexity ] the following operations can be performed in @xmath102 ops . in @xmath10 :    addition , product and differentiation of elements in @xmath11_n$ ] , @xmath13 and @xmath15_n$ ] ; integration in @xmath11_n$ ] and @xmath15_n$ ] ;    extended gcd , squarefree decomposition and resultant in @xmath11_n$ ] ;    multipoint evaluation in @xmath11_n$ ] , @xmath13 at @xmath103 points in @xmath10 ; interpolation in @xmath11_n$ ] and @xmath13 from @xmath12 ( resp .",
    "@xmath104 ) values at pairwise distinct points in @xmath10 ;    inverse , logarithm , exponential in @xmath15_n$ ] ( when defined ) ;    conversions between @xmath29_n$ ] and @xmath105_n$ ] .    * multivariate operations . *",
    "basic operations on polynomials , rational functions and power series in several variables are hard questions from the algorithmic point of view .",
    "for instance , no general quasi - optimal algorithm is currently known for computing resultants of bivariate polynomials , even though in several important cases such algorithms are available  @xcite .",
    "multiplication is the most basic non - trivial operation in this setting .",
    "the following result can be proved using kronecker s substitution ; it is quasi - optimal for fixed number of variables @xmath106 .",
    "[ fact : multiprod ] polynomials in @xmath107_{d_1 , \\ldots , d_m}$ ] and power series in @xmath108_{d_1 , \\ldots , d_m}$ ] can be multiplied using @xmath109 ops .",
    "a related operation is multipoint evaluation and interpolation .",
    "the simplest case is when the evaluation points form an @xmath110-dimensional tensor product grid @xmath111 , where @xmath112 is a set of cardinal @xmath113 .",
    "[ fact : multieval]@xcite polynomials in @xmath107_{d_1 , \\ldots , d_m}$ ] can be evaluated and interpolated from values that they take on @xmath114 points that form an @xmath110-dimensional tensor product grid using @xmath115 ops .",
    "again , the complexity in fact  [ fact : multieval ] is quasi - optimal for fixed  @xmath106 .",
    "a general ( although non - optimal ) technique to deal with more involved operations on multivariable algebraic objects ( eg , in @xmath17 $ ] ) is to use ( multivariate ) evaluation and interpolation on polynomials and to perform operations on the evaluated algebraic objects using facts  [ fact : complexity][fact : multieval ] . to put this strategy in practice , the size of the output needs to be well controlled .",
    "we illustrate this philosophy on the example of resultant computation , based on the following easy variation of  ( * ? ? ?",
    "* thm .  6.22 ) .",
    "[ borne resultant ] let @xmath116 and @xmath117 be bivariate polynomials of respective bidegrees @xmath118 and @xmath119 .",
    "then , @xmath120    [ algo resultant ] let @xmath16 and @xmath40 be polynomials in @xmath121_{d_1 , \\ldots , d_m , d}$ ]",
    ". then @xmath122 belongs to @xmath107_{d_1 , \\ldots , d_m}$ ] , where @xmath123 .",
    "moreover , the coefficients of @xmath124 can be computed using @xmath125 ops . in @xmath10 .",
    "the degrees estimates follow from fact  [ borne resultant ] . to compute @xmath124",
    ", we use an evaluation - interpolation scheme : @xmath16 and @xmath40 are evaluated at @xmath126 points @xmath127 forming an @xmath110 dimensional tensor product grid ; @xmath128 univariate resultants in @xmath129_d$ ] are computed ; @xmath124 is recovered by interpolation .",
    "by fact  [ fact : multieval ] , the evaluation and interpolation steps are performed in @xmath130 ops .",
    "the second one has cost @xmath131 .",
    "using the inequality @xmath132 concludes the proof .    .",
    "we conclude this section by recalling a complexity result for the computation of a squarefree decomposition of a bivariate polynomial .",
    "[ fact : sqfree]@xcite a squarefree decomposition of a polynomial in @xmath17_{d_x , d_y}$ ] can be computed using @xmath133 ops .",
    "we are interested in a polynomial that vanishes at the residues of a given rational function .",
    "it is a classical result in symbolic integration that in the case of simple poles , there is a resultant formula for such a polynomial , first introduced by rothstein  @xcite and trager  @xcite .",
    "this was later generalized by bronstein  @xcite to accommodate multiple poles as well .",
    "however , as mentioned by bronstein , the complexity of his method grows exponentially with the multiplicity of the poles .",
    "instead , we develop in this section an algorithm with polynomial complexity .",
    "let @xmath134 be a nonzero element in @xmath135 , where @xmath136 are two coprime polynomials in @xmath129 $ ] .",
    "let @xmath137 be a squarefree decomposition of  @xmath40 .",
    "for @xmath138 , if @xmath139 is a root of  @xmath38 in an algebraic extension of  @xmath10 , then it is simple and the residue of  @xmath140 at  @xmath139 is the coefficient of  @xmath141 in the laurent expansion of @xmath142 at  @xmath143 .",
    "if  @xmath144 is the polynomial @xmath145 , this residue is the coefficient of  @xmath146 in the taylor expansion at  @xmath143 of the regular rational function @xmath147 , computed with rational operations only and then evaluated at  @xmath148 . if this coefficient is denoted  @xmath149 , with polynomials @xmath150 and @xmath151 , the residue at  @xmath139 is a root of @xmath152 . when @xmath153 , this is exactly the rothstein - trager resultant",
    "this computation leads to algorithm  [ algo : bronstein ] , which avoids the exponential blowup of the complexity that would follow from a symbolic pre - computation of the bronstein resultants .",
    "algorithm * * algebraicresidues**@xmath154    two polynomials @xmath16 and @xmath155$]a polynomial in @xmath156 $ ] canceling all the residues of @xmath157 compute @xmath158 a squarefree decomposition of  @xmath40 ;  @xmath159 @xmath160 ; @xmath161 ; expand @xmath162 ; write @xmath163 as @xmath164 with @xmath150 and @xmath151 coprime ; @xmath165 ; @xmath166",
    "[ ex : bronstein ] let @xmath167 be an integer , and let @xmath168 $ ] be the rational function @xmath169 .",
    "the poles have order  @xmath170 . in this example , the algorithm can be performed by hand for arbitrary  @xmath9 : a squarefree decomposition has  @xmath171 and  @xmath172 , the other @xmath38 s being  1 . then  @xmath173 and the next step is to expand @xmath174 expanding the binomial series gives the coefficient of  @xmath175 as  @xmath176 , with @xmath177 the residues",
    "are then cancelled by  @xmath178 , namely @xmath179    * bounds . * in our applications , as in the previous example , the polynomials @xmath16 and  @xmath40 have coefficients that are themselves polynomials in another variable  @xmath18 .",
    "let then  @xmath180 , @xmath181 , @xmath182 and @xmath183 be the bidegrees in @xmath184 of @xmath16 , @xmath40 , @xmath82 and @xmath38 , where  @xmath41 is a squarefree part of  @xmath40 . in algorithm",
    "[ algo : bronstein ] , @xmath185 has degree at most  @xmath186 in @xmath18 and total degree  @xmath187 in @xmath188 .",
    "similarly , @xmath189 has degree  @xmath190 in  @xmath18 and total degree  @xmath191 in @xmath188 . when @xmath192 , by proposition  [ prop : derivatives - rational - function ] , the coefficient  @xmath193 in the power series expansion of @xmath194 has denominator of bidegree bounded by  @xmath195 and numerator of bidegree bounded by  @xmath196 .",
    "thus by fact  [ borne resultant ] , @xmath197 is at most @xmath198 while its degree in  @xmath199 is bounded by the number of residues  @xmath200 .",
    "summing over all  @xmath201 leads to the bound @xmath202 if  @xmath203 , a direct computation gives the bound @xmath204 .",
    "[ th : bronstein ] let @xmath205 .",
    "let @xmath82 be a squarefree part of @xmath40 wrt y. let  @xmath206 be bounds on the bidegree of @xmath82 . then the polynomial computed by algorithm  [ algo : bronstein ] annihilates the residues of  @xmath157 , has degree in  @xmath199 bounded by  @xmath207 and degree in  @xmath18 bounded by @xmath208 it can be computed in @xmath209 operations in  @xmath10 .",
    "note that both bounds above ( when @xmath192 and @xmath203 ) are upper bounded by  @xmath210 , independently of the multiplicities .",
    "the complexity is also bounded independently of the multiplicities by @xmath211 .",
    "the bounds on the bidegree of @xmath212 are easily derived from the previous discussion .",
    "by fact  [ fact : sqfree ] , a squarefree decomposition of @xmath40 can be computed using @xmath133 ops .",
    "we now focus on the computations performed inside the @xmath201th iteration of the loop .",
    "computing @xmath213 requires an exact division of polynomials of bidegrees at most @xmath214 ; this division can be performed by evaluation - interpolation in @xmath215 ops .",
    "similarly , the trivariate polynomial @xmath185 can be computed by evaluation - interpolation wrt @xmath184 in time @xmath216 . by the discussion preceding theorem  [ th : bronstein ] , both @xmath217 and @xmath218 have bidegrees at most @xmath219 , where @xmath220 and @xmath221 .",
    "they can be computed by evaluation - interpolation in @xmath222 ops .",
    "finally , the resultant @xmath223 has bidegree at most @xmath224 , and since the degree in  @xmath19 of @xmath225 and  @xmath38 is at most  @xmath226 , it can be computed by evaluation - interpolation in @xmath227 ops by lemma  [ algo resultant ] .",
    "the total cost of the loop is thus @xmath228 , where @xmath229 using the ( crude ) bounds @xmath230 , @xmath231 , @xmath232 and @xmath233 shows that @xmath234 is bounded by @xmath235 which , by using the inequalities @xmath236 and @xmath237 , is seen to belong to @xmath238 .",
    "gathering together the various complexity bounds yields the stated bound and finishes the proof of the theorem .    * remark . *",
    "note that one could also use hermite reduction combined with the usual rothstein - trager resultant in order to compute a polynomial @xmath239 that annihilates the residues .",
    "indeed , hermite reduction computes an auxiliary rational function that admits the same residues as the input , while only having simple poles .",
    "a close inspection of this approach provides the same bound @xmath207 for the degree in @xmath19 of @xmath239 , but a less tight bound for its degree in @xmath18 , namely worse by a factor of @xmath207 .",
    "the complexity of this alternative approach appears to be @xmath240 ( using results from  @xcite ) , to be compared with the complexity bound from theorem  [ th : bronstein ] .",
    "given a polynomial  @xmath241 $ ] of degree  @xmath9 with coefficients in a field  @xmath10 of characteristic  0 , let @xmath242 be its roots in the algebraic closure of  @xmath10 . for any positive integer @xmath243 ,",
    "the polynomial of degree @xmath244 defined by @xmath245 has coefficients in  @xmath10 .",
    "this section discusses the computation of  @xmath246 summarized in algorithm  [ algo : sigma_c ] , which can be seen as an additive analogue of the _ platypus algorithm _ of banderier and flajolet  @xcite .",
    "algorithm * * purecomposedsum**@xmath247    a polynomial @xmath16 of degree @xmath9 in @xmath129 $ ] , a positive integer @xmath248the polynomial @xmath249 from eq .",
    "@xmath250 @xmath251 @xmath252 @xmath253 @xmath254f)\\odot\\sum{n!y^n}\\bmod y^{d+1}$ ] @xmath255    we recall two classical formulas ( see , eg , @xcite ) , the second one being valid for monic @xmath16 only : : @xmath256 truncating these formulas at order  @xmath170 makes  @xmath32 a representation of the polynomial  @xmath16 ( up to normalization ) , since both conversions above can be performed quasi - optimally by newton iteration  @xcite .",
    "the key for algorithm  [ algo : sigma_c ] is the following variant of  @xcite .",
    "let  @xmath241 $ ] be a polynomial of degree  @xmath9 , let @xmath32 denote the generating series of its newton sums and let @xmath257 be the series @xmath258 .",
    "let @xmath259 be the polynomial in @xmath260 $ ] defined by @xmath261\\exp\\left(\\sum_{n \\ge 1}{(-1)^{n-1}t_n\\frac{z^n}{n } } \\right).\\ ] ] then the following equality holds @xmath262    by construction , the series @xmath257 is @xmath263 when applied to the polynomial  @xmath249 , this becomes @xmath264\\prod_{i=1}^{d}{\\left(1+z \\exp(\\alpha_i y)\\right)}.      \\end{aligned}\\ ] ] this expression rewrites : @xmath265\\exp\\left(\\sum_{i=1}^{d}\\log(1+z \\exp({\\alpha_i y}))\\right)\\\\      = [ z^c]\\exp\\left(\\sum_{i=1}^{d}\\sum_{m\\ge 1}{(-1)^{m-1}\\exp({\\alpha_i m y})\\frac{z^m}{m}}\\right)\\\\      = [ z^c]\\exp\\left(\\sum_{m\\ge 1}{(-1)^{m-1}s(m y)\\frac{z^m}{m}}\\right ) ,      \\end{gathered}\\ ] ] and the last expression equals @xmath266 .",
    "the correctness of algorithm  [ algo : sigma_c ] follows from observing that the truncation orders @xmath267 in @xmath19 and @xmath268 in @xmath199 of the power series involved in the algorithm are sufficient to enable the reconstruction of  @xmath246 from its first newton sums by  .",
    "* bivariate case .",
    "* we now consider the case where  @xmath16 is a polynomial in  @xmath17 $ ] .",
    "then , the coefficients of @xmath246 wrt @xmath19 may have denominators .",
    "we follow the steps of algorithm  [ algo : sigma_c ] ( run on @xmath16 viewed as a polynomial in  @xmath19 with coefficients in  @xmath14 ) in order to compute bounds on the bidegree of the polynomial obtained by clearing out these denominators .",
    "we obtain the following result .",
    "[ thm : platypus - bound ] let @xmath269_{d_x+1,d_y+1}$ ] , let @xmath270 be a positive integer such that @xmath271 and let @xmath272 .",
    "let @xmath273 $ ] denote the leading coefficient of @xmath16 wrt @xmath19 and let @xmath249 be defined as in  eq .  .",
    "then @xmath274 is a polynomial in @xmath17 $ ] of bidegree at most @xmath275 that cancels all sums @xmath276 of @xmath270 roots @xmath277 of @xmath16 , with @xmath278 .",
    "moreover , this polynomial can be computed in @xmath279 ops .",
    "this result is close to optimal .",
    "experiments suggest that for generic @xmath16 of bidegree @xmath214 the minimal polynomial of @xmath276 has bidegree @xmath280 .",
    "in particular , our degree bound is precise in @xmath19 , and overshoots by a factor of @xmath281 only in @xmath18 .",
    "similarly , the complexity result is quasi - optimal up to a factor of @xmath282 only .",
    "the newton series @xmath283 has the form @xmath284 with @xmath285 .",
    "since both factors belong to @xmath286 , lemma  [ growth ] implies that @xmath287 . applying this same lemma repeatedly",
    ", we get that @xmath288 ( stability under the integration of algorithm  [ algo : sigma_c ] is immediate ) .",
    "since @xmath249 has degree @xmath128 wrt @xmath19 , we deduce that @xmath289 is a polynomial that satisfies the desired bound . by evaluation and interpolation at @xmath290 points , and newton iteration for quotients of power series in @xmath291_{1+d}$ ] ( fact  [ fact : complexity ] ) , the power series @xmath283 can be computed in @xmath292 ops . the power series @xmath257",
    "is then computed from @xmath283 in @xmath293 ops . to compute @xmath0 we use evaluation - interpolation wrt @xmath18 at @xmath290 points , and fast exponentials of power series ( fact  [ fact : complexity ] ) .",
    "the cost of this step is @xmath279 ops .",
    "then , @xmath294 is computed for @xmath293 additional ops .",
    "the last exponential is again computed by evaluation - interpolation and newton iteration using @xmath292 ops .",
    "the relation between diagonals of bivariate rational functions and algebraic series is classical  @xcite .",
    "we recall here the usual derivation when  @xmath295 while setting our notation .",
    "let @xmath296 be a rational function in  @xmath297 , whose denominator does not vanish at @xmath298",
    ". then the diagonal of @xmath0 is a convergent power series that can be represented for small enough  @xmath299 by a cauchy integral @xmath300 where the contour is for instance a circle of radius  @xmath301 inside an annulus where  @xmath302 remains in the domain of convergence of  @xmath0 .",
    "this is the basis of an algebraic approach to the computation of the diagonal as a sum of residues of the rational function @xmath303 with  @xmath16 and  @xmath40 two coprime polynomials . for  @xmath299 small enough",
    ", the circle can be shrunk around  0 and only the roots of  @xmath304 tending to  0 when  @xmath305 lie inside the contour  @xcite .",
    "these are called the _",
    "small branches_. thus the diagonal is given as @xmath306 where the sum is over the _ distinct _ roots of  @xmath40 tending to  0 .",
    "we call their number the number of small branches of  @xmath40 and denote it by  @xmath307",
    ".    since the  @xmath308 s are algebraic and finite in number and residues are obtained by series expansion , which entails only rational operations , it follows that the diagonal is algebraic too .",
    "combining the algorithms of the previous section gives algorithm  [ algo : diagonal ] that produces a polynomial equation for @xmath1 .",
    "the correctness of this algorithm over an arbitrary field of characteristic  0 follows from an adaptation of the arguments of gessel and stanley  ( * ? ? ?",
    "6.1 ) , ( * ? ?",
    "6.3.3 ) .",
    "let @xmath167 be an integer , and let @xmath309 be the rational function @xmath310 .",
    "the diagonal of @xmath311 is equal to @xmath312 by the previous argument , it is an algebraic series , which is the sum of the residues of the rational function  @xmath313 of example  [ ex : bronstein ] over its small branches ( with @xmath18 replaced by @xmath299 ) . in this case , the denominator is  @xmath314 .",
    "it has one solution tending to  0 with  @xmath299 ; the other one tends to  @xmath315 .",
    "thus the diagonal is cancelled by the quadratic polynomial  .",
    "algorithm * algebraicdiagonal*(@xmath316 )    two polynomials @xmath51 and @xmath317 $ ] , with  @xmath318a polynomial @xmath319 $ ] such that @xmath320 @xmath321 write @xmath322 as @xmath157 with coprime polynomials @xmath16 and @xmath40 ; @xmath323 @xmath324 number of small branches of @xmath40 @xmath325 @xmath326    for an integer  @xmath327 , we consider the rational function @xmath328 of bidegree  @xmath329 .",
    "the first step of the algorithm produces @xmath330 whose denominator is irreducible with @xmath9 small branches . running algorithm  [ algo : diagonal ] on this example",
    ", we obtain a polynomial  @xmath331 annihilating @xmath332 , which is experimentally irreducible and whose bidegrees for @xmath333 are @xmath334 . from these values , it is easy to conjecture that the bidegree is given by  @xmath335 of exponential growth in the bidegree of @xmath311 . in general , these bidegrees do not grow faster than in this example . in theorem  [ thm : bound diagonals ] , we prove bounds that are barely larger than the values above .",
    "the rest of this section is devoted to the derivation of bounds on the complexity of algorithm  [ algo : diagonal ] and on the size of the polynomial it computes , which are given in theorem  [ thm : bound diagonals ] .",
    "* degrees . *",
    "a bound on the bidegree of @xmath336 will be obtained from the bounds successively given by theorems  [ th : bronstein ] and  [ thm : platypus - bound ] .    in order to follow the impact of the change of variables in the first step , we define the _ diagonal degree _ of a polynomial @xmath337 as the integer",
    "@xmath338 we collect the properties of interest in the following .",
    "[ lemma : slope ] for any  @xmath16 and  @xmath40 in  @xmath17 $ ] ,    @xmath339 ;    @xmath340 ;    there exists a polynomial @xmath341 $ ] , such that + @xmath342 , with @xmath343 and @xmath344    @xmath345 .",
    "part  _ ( 1 ) _ is immediate .",
    "the quantity @xmath346 is nothing else than @xmath347 , which makes parts  _ ( 2 ) _ and  _ ( 3 ) _ clear too .",
    "from there , we get the identity @xmath348 for arbitrary  @xmath16 and  @xmath40 , whence @xmath349 and part  _ ( 4 ) _ is a consequence of parts  _ ( 1 ) _ and  _ ( 3)_.    thus , starting with a rational function @xmath350 , with @xmath214 a bound on the bidegrees of @xmath51 and @xmath52 , and @xmath206 a bound on the bidegree of a squarefree part @xmath351 of @xmath52 , the first step of the algorithm constructs @xmath352 , with polynomials  @xmath16 and  @xmath40 and @xmath353 these inequalities give bounds on the degrees in  @xmath18 of the numerator and denominator of  @xmath322 .",
    "the rest of the computation depends on the sign of  @xmath139 .",
    "if  @xmath354 , then the degrees in  @xmath19 of @xmath355 and @xmath40 are bounded by @xmath356 , while if  @xmath357 , those of @xmath16 and @xmath358 are bounded by @xmath359 .",
    "thus in both cases they are bounded by @xmath360 , where @xmath361 a squarefree part of the denominator has degree in @xmath19 bounded by @xmath362 .",
    "from there , theorem  [ th : bronstein ] yields @xmath363 , with @xmath364 * small branches .",
    "* it is classical that for a polynomial  @xmath365 $ ] , the number of its solutions tending to  0 can be read off its newton polygon .",
    "this polygon is the lower convex hull of the union of @xmath366 for @xmath367 such that  @xmath368 .",
    "the number of solutions tending to  0 is given by the minimal @xmath19-coordinate of its leftmost points .",
    "since the number of small branches counts only distinct solutions , it is thus given by @xmath369p^\\star).\\ ] ]    the change of variables  @xmath370 changes the coordinates of the point corresponding to  @xmath371 into  @xmath372 .",
    "this transformation maps the vertices of the original newton polygon to the vertices of the newton polygon of the laurent polynomial @xmath373 . multiplying by  @xmath374 yields a polynomial and shifts the newton polygon up by  @xmath346 , thus @xmath375    the number of small branches of the denominator of  @xmath322 constructed in the first step of the algorithm",
    "is then given by @xmath376    * complexity .",
    "* we now analyze the cost of algorithm  [ algo : diagonal ] .",
    "the first step does not require any arithmetic operation .",
    "next , the computation of  @xmath124 takes @xmath377 ops .",
    "( see the comment after theorem  [ th : bronstein ] ) .",
    "the number of small branches is obtained with no arithmetic operation from a squarefree decomposition computed in algorithm  [ algo : bronstein ] .",
    "finally , algorithm  [ algo : sigma_c ] uses  @xmath378 ops .",
    "we now have the values required by theorem  [ thm : platypus - bound ] , which concludes the proof of the following bounds .",
    "[ thm : bound diagonals ] let @xmath379 be a rational function in @xmath380 with @xmath318 .",
    "let @xmath214 ( resp .",
    "@xmath206 ) be a bound on the bidegrees of @xmath51 and  @xmath52 ( resp . a squarefree part of  @xmath52 ) .",
    "let  @xmath381 be defined as in eqs .",
    "( [ eq : epsilon],[eq : dxdy],[eq : nb_small ] ) . then there exists a polynomial @xmath319 $ ] such that @xmath382 and @xmath383 algorithm  [ algo : diagonal ] computes it in  @xmath384 ops .",
    "a general bound on @xmath385 depending only on a bound @xmath386 on the bidegree of the input can be deduced from the above as @xmath387      assume that the denominator of  @xmath388 is already partially factored as @xmath389 , where the @xmath308 are  @xmath390 distinct _ rational _ branches among the  @xmath270 small branches of  @xmath40 .",
    "then their corresponding ( rational ) residues @xmath391 contribute to the diagonal ; therefore it is only necessary to invoke algorithm  [ algo : diagonal ] on @xmath392 , which produces a polynomial @xmath393 .",
    "then the polynomial @xmath394 cancels the diagonal of @xmath0 .",
    "in particular , this optimization applies systematically for the factor  @xmath395 when @xmath357 ( or equivalently @xmath396 ) in the algorithm . in this case",
    ", it yields a polynomial  @xmath336 with smaller degree than the original algorithm : @xmath397 ( a sharper bound on the degree in  @xmath299 can be derived as well . )      the bounds from theorem  [ thm : bound diagonals ] on the bidegree of @xmath336 are slightly pessimistic wrt the variable @xmath299 , but generically tight wrt the variable  @xmath398 , as will be proved in proposition  [ prop : generic ] below .",
    "we first need a lemma .",
    "[ lemma : galois groups ] let @xmath10 be a field of characteristic @xmath399 , and @xmath400 $ ] be a polynomial of degree @xmath9 , with galois group @xmath401 over @xmath10 .",
    "assume that the roots @xmath402 of @xmath16 are algebraically independent over @xmath403 .",
    "then , for any @xmath248 , the degree @xmath244 polynomial @xmath246 is irreducible in @xmath129 $ ] .",
    "since @xmath404 is a root of @xmath249 , it suffices to prove that @xmath405 has degree @xmath244 over @xmath10 .",
    "the @xmath406 s being algebraically independent , any permutation @xmath407 of all the @xmath406 s that leaves  @xmath408 unchanged has to preserve @xmath409 as well .",
    "it follows that @xmath410 has degree  @xmath411 over  @xmath405 and degree  @xmath412 over  @xmath10 , so that  @xmath405 has degree  @xmath244 over  @xmath10    [ prop : generic ] let @xmath51 be a polynomial in @xmath413_{d_x , d_y}$ ] , and @xmath414,\\ ] ] where the @xmath415 are indeterminates .",
    "then the polynomial computed by algorithm  [ algo : diagonal ] with input @xmath316 is irreducible of degree @xmath416 over @xmath417 .",
    "first apply the change of variables to obtain @xmath418 , with @xmath419 .",
    "denote @xmath420 .",
    "then , the polynomial @xmath421 has the form @xmath422 where the @xmath423 s are algebraically independent over @xmath403 .",
    "therefore , @xmath421 has galois group @xmath424 over @xmath425 and its roots are algebraically independent over @xmath403  @xcite .",
    "this property lifts to @xmath117 @xcite , which thus has galois group @xmath401 and algebraically independent roots , denoted @xmath426 .",
    "now define the polynomial @xmath427 . since @xmath40 has simple roots , this is exactly the polynomial that is computed by algorithm  [ algo : bronstein ] .",
    "the family @xmath428 is algebraically independent , since any algebraic relation between them would induce one for the @xmath308 s by clearing out denominators . in particular ,",
    "the natural morphism @xmath429 is injective , whence an isomorphism .",
    "( here , @xmath430 denotes the galois group of @xmath241 $ ] over  @xmath10 . ) since an immediate investigation of the newton polygon of @xmath40 shows that it has @xmath431 small branches , we conclude using lemma  [ lemma : galois groups ] .",
    "proposition  [ prop : generic ] implies that for a generic rational function  @xmath316 with @xmath432_{d , d}$ ] and @xmath317_{d+1,d+1}$ ] , the degree of @xmath336 in @xmath398 is @xmath433 .",
    "this is indeed observed on random examples .",
    "we consider a rational function @xmath434 , where @xmath435 is a dense polynomial of bidegree @xmath386 chosen at random .",
    "for  @xmath333 , algorithm * algebraicdiagonal*(@xmath0 ) produces _ irreducible _ outputs with bidegrees @xmath436 , @xmath437 , @xmath438 , @xmath439 , that are matched by the formulas",
    "@xmath440 so that the bound on @xmath441 is tight in this case and the irreducibility of the output shows that theorem  [ thm : bound diagonals ] can not be improved further .",
    "the exponential degree of the minimal polynomial of a diagonal proved in proposition  [ prop : generic ] concerns more generally other sums of residues , since this is the step where the exponential growth of the algebraic equations appears .",
    "this includes in particular constant terms of rational functions in @xmath442 $ ] , that can also be written as contour integrals of rational functions around the origin .",
    "by contrast , sums of residues of a rational function always satisfy a differential equation of only polynomial size  @xcite .",
    "thus , when an algebraic function appears to be connected to a sum of residues of a rational function , the use of this differential structure is much more adapted to the computation of series expansions , instead of going through a potentially large polynomial .    as an example where this phenomenon occurs naturally , we consider here the enumeration of unidimensional lattice walks , following banderier and flajolet  @xcite and bousquet - mlou  @xcite .",
    "our goal in this section is to study , from the algorithmic perspective , the series expansions of various generating functions ( for bridges , excursions , meanders ) that have been identified as algebraic  @xcite .",
    "one of our contributions is to point out that although algebraic series can be expanded fast  @xcite , the pre - computation of a polynomial equation could have prohibitive cost .",
    "we overcome this difficulty by pre - computing differential ( instead of polynomial ) equations that have polynomial size only , and using them to compute series expansions to precision  @xmath2 for bridges , excursions and meanders in time quasi - linear in  @xmath2 .",
    "we start with some vocabulary on lattice walks .",
    "a _ simple step _ is a vector @xmath443 with @xmath444 .",
    "@xmath257 is a finite set of simple steps .",
    "a _ unidimensional walk _ in the plane @xmath445 built from @xmath257 is a finite sequence @xmath446 of points in @xmath445 , such that @xmath447 and @xmath448 with @xmath449 . in this case",
    "@xmath12 is called the _ length _ of the walk , and @xmath257 is the _ step set _ of the walk .",
    "the @xmath19-coordinate of the endpoint @xmath450 , namely @xmath451 , is called the final altitude of the walk .",
    "the characteristic polynomial of the step set @xmath257 is @xmath452    following banderier and flajolet , we consider three specific families of walks : bridges , excursions and meanders  @xcite .",
    "_ bridges _ are walks with final altitude  @xmath399 , _ meanders _ are walks confined to the upper half plane , and _ excursions _ are bridges that are also meanders .",
    "we define the full generating power series of walks @xmath453[[x]],\\ ] ] where @xmath454 is the number of walks with step set  @xmath257 , of length @xmath12 and final altitude @xmath390 .",
    "we denote by @xmath455 ( resp .",
    "@xmath456 , and @xmath457 ) the power series @xmath458 , where @xmath459 is the number of bridges ( resp .",
    "excursions , and meanders ) of length  @xmath12 with step set  @xmath257 .",
    "our main objective in what follows is to study the efficiency of computing the power series expansions of the series @xmath52 , @xmath461 and @xmath462 . in the next two sections , we first study two previously known methods",
    ", then we design a new one .",
    "we denote by @xmath470 ( resp .",
    "@xmath471 ) the largest @xmath472 such that @xmath473 ( resp .",
    "@xmath474 ) and denote by @xmath9 the sum @xmath475 .",
    "the integer @xmath9 measures the vertical amplitude of @xmath257 ; this makes @xmath9 a good scale for measuring the complexity of the algorithms that will follow .",
    "we assume that both @xmath470 and @xmath471 are positive , since otherwise the study of the excursions and meanders becomes trivial .    * the direct method . *",
    "the combinatorial definition of walks yields a recurrence relation for @xmath454 : @xmath476 with initial conditions @xmath477 if @xmath478 with @xmath479 , and @xmath480 .",
    "if @xmath481 denotes the number of walks of length @xmath12 and final altitude @xmath390 that never exit the upper half plane , then @xmath481 also satisfies recurrence  , but with the additional initial conditions @xmath482 for all @xmath483 .",
    "then the bridges ( resp . excursions , meanders ) are counted by the numbers @xmath484 ( resp .",
    "@xmath485 , @xmath486 ) .",
    "one can compute these numbers by unrolling the recurrence relation  .",
    "each use of the recurrence costs @xmath487 ops . , and in the worst case one has to compute @xmath488 terms of the sequence ( for example , if the step set is @xmath489 ) .",
    "this leads to the computation of each of the generating series in @xmath490 ops .    * using algebraic equations . *",
    "another method is suggested in @xcite .",
    "it relies on the algebraicity of @xmath52 , @xmath461 and @xmath462 ( fact  [ fact : walks]_(2 ) _ ) .",
    "the series @xmath461 and @xmath462 can be expressed as products in terms of the small branches of the characteristic polynomial @xmath491 ( see ( * ? ? ?",
    "1 ) ) . from there",
    ", a polynomial equation can be obtained using the platypus algorithm  @xcite , which computes a polynomial canceling the products of a fixed number of roots of a given polynomial . given a polynomial equation @xmath492 ,",
    "another one for  @xmath52 can be deduced from the relation  @xmath493 as @xmath494 .",
    "once a polynomial equation is known for one of these three series , it can be used to compute a linear recurrence with polynomial coefficients satisfied by its coefficients  @xcite .",
    "this method produces an algorithm that computes the first  @xmath2 terms of  @xmath52 , @xmath461 and  @xmath462 in @xmath495 ops . for this to be an improvement over the naive method for large  @xmath2",
    ", the dependence on  @xmath9 of the constant in the @xmath496 should not be too large and the precomputation not too costly .    indeed , the cost of the pre - computation of an algebraic equation is not negligible .",
    "generically , the minimal polynomial of @xmath461 has degree @xmath497 , which may be exponentially large with respect to @xmath9  @xcite .",
    "empirically , the polynomials for @xmath52 and @xmath462 are similarly large .",
    "the situation for differential equations and recurrences is different : @xmath52 satisfies a differential equation of only polynomial size ( see below ) , whereas ( empirically ) , those for @xmath461 and @xmath462 have a potentially exponential size .",
    "these sizes then transfer to the corresponding recurrences and thereby to the constant in the complexity of unrolling them .    with the step set @xmath498 and @xmath499",
    ", the counting series @xmath500 equals @xmath501 experiments indicate that the minimal polynomial of @xmath455 has bidegree @xmath502 , exhibiting an exponential growth in  @xmath9 . on the other hand , they show that @xmath455 satisfies a linear differential equation of order @xmath503 and coefficients of degree @xmath504 for even  @xmath9 , and @xmath505 for odd @xmath9 .    * new method .",
    "* we now give a method that runs in quasi - linear time ( with respect to @xmath2 ) and avoids the computation of an algebraic equation .",
    "our method relies on the fact that periods of rational functions such as the one in part  _ ( 3 ) _ of fact [ fact : walks ] satisfy differential equations of polynomial size in the degree of the input rational function  @xcite .",
    "we summarize our results in the following theorem , and then go over the proof in each case individually .",
    "[ thm : walks ] let @xmath257 be a finite set of simple steps and @xmath506 .",
    "the series @xmath507 ( resp . @xmath508 and @xmath509 ) can be expanded at order @xmath2 in @xmath510 ops .",
    "( resp . @xmath511 ops . ) , after a pre - computation in @xmath512  ops .",
    "* bridges .",
    "* to expand @xmath465 , we rely on fact  [ fact : walks]_(3)_. the formula can be written @xmath513 , the integration path being a circle inside a small annulus around the origin  ( * ? ? ?",
    "* proof of th .  1 ) .",
    "moreover , @xmath514 is of the form @xmath157 , where @xmath515 and @xmath516 .",
    "since @xmath16 and @xmath40 are relatively prime and @xmath40 is primitive with respect to @xmath19 , algorithm * hermitetelescoping *  ( * ? ? ?",
    "3 ) computes a telescoper for @xmath157 , which is also a differential equation satisfied by @xmath52 , in @xmath512 ops .",
    "the resulting differential equation has order at most  @xmath9 and degree @xmath517 .",
    "this differential equation can be turned into a recurrence of order @xmath517 in quasi - optimal time ( see the discussion after  ( * ? ? ?",
    "we may use it to expand @xmath518 in @xmath519 ops , once we have a way to compute the initial conditions .",
    "but this can be done using the naive algorithm described above in @xmath520 ops .",
    "thus , the total cost of the pre - computation is @xmath512 , as announced .      a set @xmath257 of simple steps and an integer @xmath2@xmath521 @xmath522 [ case @xmath523 or @xmath524 [ case @xmath462 ] @xmath526 ( * ? ?",
    "3 ) @xmath527 the recurrence of order @xmath301 associated to @xmath128 @xmath528w(x , y)\\bmod x^{r+1}$ ] [ case @xmath529 + @xmath530yw(x , y)/(1-y)\\bmod x^{r+1}$ ] [ case @xmath462 ] @xmath531w(x , y)\\bmod x^{n+1}$ ] ( from @xmath532 ) @xmath533yw(x , y)/(1-y)\\bmod x^{n+1}$ ] ( from @xmath532 ) @xmath534 @xmath535 @xmath536    * excursions . * if @xmath537 is known , it is then possible to recover @xmath538 thanks to fact  [ fact : walks]_(4)_. expanding @xmath466 comes down to the computation of the exponential of a series , which can be performed using @xmath539 ops .",
    "( fact  [ fact : complexity]_(4 ) _ ) .        denote by @xmath541 the small branches of the polynomial @xmath542 .",
    "then @xmath462 is given as  ( * ? ? ?",
    "1 ) : @xmath543 on the other hand , @xmath544 where the integral has been taken over a circle around the origin and the small branches . differentiating the equation @xmath545 = 0 with respect to @xmath18 leads to @xmath546 , whence @xmath547 therefore , @xmath548 , finishing the proof .",
    "thus we apply the same method as in the case of the excursions .",
    "we first compute a differential equation for @xmath549 using the method of  @xcite .",
    "the computation of the initial conditions for @xmath51 can also be performed naively from its definition as a constant term , by simply expanding @xmath550 .",
    "the formula of the proposition then recovers @xmath467 .",
    "the complexity analysis goes exactly as in the previous case , giving a global cost of @xmath512 ops ."
  ],
  "abstract_text": [
    "<S> the diagonal of a multivariate power series @xmath0 is the univariate power series @xmath1 generated by the diagonal terms of @xmath0 . </S>",
    "<S> diagonals form an important class of power series ; they occur frequently in number theory , theoretical physics and enumerative combinatorics . </S>",
    "<S> we study algorithmic questions related to diagonals in the case where @xmath0 is the taylor expansion of a bivariate rational function . </S>",
    "<S> it is classical that in this case @xmath1 is an algebraic function . </S>",
    "<S> we propose an algorithm that computes an annihilating polynomial for @xmath1 . </S>",
    "<S> generically , it is its minimal polynomial and is obtained in time quasi - linear in its size . </S>",
    "<S> we show that this minimal polynomial has an exponential size with respect to the degree of the input rational function . </S>",
    "<S> we then address the related problem of enumerating directed lattice walks . </S>",
    "<S> the insight given by our study leads to a new method for expanding the generating power series of bridges , excursions and meanders . </S>",
    "<S> we show that their first @xmath2 terms can be computed in quasi - linear complexity in @xmath2 , without first computing a very large polynomial equation .    </S>",
    "<S> = 10000 = 10000    * categories and subject descriptors : * + i.1.2 [ * computing methodologies * ] : symbolic and algebraic manipulations  _ algebraic algorithms _    * general terms : * algorithms , theory .    </S>",
    "<S> * keywords : * diagonals , walks , algorithms . </S>"
  ]
}