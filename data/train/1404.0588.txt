{
  "article_text": [
    "a labeling scheme is a method of distributing the information about the structure of a graph among its vertices by assigning short _ labels _ , such that a selected function on pairs of vertices can be computed using only their labels .",
    "the quality of a labeling scheme is mostly measured by its _ size _ : that is , the maximum number of bits used in a label .",
    "additional important attributes of labeling schemes are the running times of the label generation algorithm ( _ encoder _ ) , and the decoding algorithm ( _ decoder _ ) , which replies to a query given a pair of labels .    among all labeling schemes , that of _ adjacency _ is perhaps the most fundamental , as it directly comprises an implicit representation of the graph . for a graph @xmath4 and any two of its vertices @xmath5 , the decoder of an adjacency labeling scheme is required to deduce whether @xmath6 and @xmath7 are adjacent in @xmath4 directly from their labels .",
    "adjacency queries for bounded degree graphs appear naturally in networks of small dilation  @xcite , peer - to - peer ( p2p )  @xcite and wireless ad - hoc networks  @xcite .",
    "our main contribution is an optimal ( up to an additive constant ) @xmath1 size adjacency labeling scheme for bounded - degree outerplanar graphs . as a special case thereof",
    ", we obtain an optimal labeling scheme for bounded degree trees .",
    "we summarize this result in the following theorem .",
    "[ thm : main ] for every fixed @xmath8 , the class @xmath9 of bounded - degree outerplanar graphs admits an adjacency labeling scheme of size @xmath1 , with encoding complexity @xmath10 and decoding complexity @xmath11 .",
    "our labeling scheme utilizes a novel technique based on _ _ edge-__universal graphs is _ edge - universal _ for a class @xmath12 of graphs , if every graph in @xmath12 appears as a subgraph in @xmath4 ( not necessarily induced ) . ] for bounded degree outerplanar graphs . unlike other results in the field which rely on a tight connection to induced - universal graphs",
    "is _ induced - universal _ for a class @xmath12 of graphs , if every graph in @xmath12 appears as an induced subgraph in @xmath4 . ]",
    "@xcite , our technique embeds the input graph into a small edge - universal graph .",
    "moreover , to the best of our knowledge , our labeling scheme is the first to use the total label size to separate the different components of the label .",
    "in contrast , other labeling schemes , such as  @xcite , introduce an extra overhead to support such separation .",
    "kannan , naor and rudich  @xcite showed that if a graph class @xmath12 admits an adjacency labeling scheme with maximum label length @xmath13 , then there exists an induced - universal graph with @xmath14 vertices for @xmath12 , efficiently constructible from the labeling scheme .",
    "the opposite relation holds in a weaker sense .",
    "the existence of an induced - universal graph with @xmath14 vertices for a family @xmath12 of graphs implies the existence of labeling scheme with size @xmath13 .",
    "this transformation is however not efficient , namely the resulting scheme has exponential running time . in light of the existing linear size induced - universal graphs for bounded degree trees",
    "@xcite , our contribution is in devising an _ efficient _ labeling scheme of optimal size .    as a corollary of theorem  [ thm : main ] , we also obtain an efficient @xmath15 size labeling scheme for graphs with maximum degree @xmath2 . for the case of bounded degree planar graphs",
    "we construct a @xmath16 size labeling scheme with average label size of @xmath17 , improving the best known construction for @xmath18 . finally , we observe that a simple application of combinatorial number systems  @xcite gives an adjacency labeling scheme for all graphs with maximum degree @xmath19 , improving the known bounds for @xmath20 $ ] .",
    "we summarize all known results for adjacency labeling schemes in table  [ tab : priors ] , and our contributions in table  [ tab : current ] .",
    "our results for outerplanar graphs , planar graphs and general graphs are presented in section  [ sec : outerplanar ] , appendix  [ apx : planar ] and section  [ sec : combinadics ] , respectively .",
    "_ we defer all proofs to appendix  [ apx : proofs]_.    .best known adjacency labeling schemes for graphs with at most @xmath21 vertices . [ cols=\"<,^,<,^,<,^\",options=\"header \" , ]      alstrup and rauhe  @xcite proved that forests ( and trees ) in @xmath22 have an adjacency labeling scheme of @xmath23 .",
    "denotes the iterated logarithm of @xmath21 .",
    "] their technique uses a recursive decomposition of the tree which yields the same @xmath23 label size for bounded degree trees .",
    "fraigniaud and korman  @xcite showed that bounded depth trees have a labeling scheme of size @xmath24 .",
    "bonichon et  al .",
    "@xcite proved that caterpillars and binary trees enjoy a labeling scheme of size @xmath25 using a method called `` traversal and jumping '' . in a follow up paper ,",
    "bonichon et  al .",
    "@xcite claimed without proof that the aforementioned methods can be used to achieve the same bound for bounded degree trees .",
    "chung  @xcite showed the existence of an induced - universal graph with @xmath26 vertices for bounded degree trees .",
    "graphs with maximum degree @xmath2 have _ _ arboricity _ _ is the minimum number of edge - disjoint acyclic subgraphs whose union is @xmath4 . ]",
    "@xmath27  @xcite thus , by the theorem of nash - williams  @xcite , they can be decomposed into @xmath28 forests .",
    "alstrup and rauhe  @xcite combined this result with their labeling scheme for forests to obtain a labeling scheme of size @xmath29 for bounded degree graphs .",
    "they also proved a matching lower bound of @xmath30 .",
    "butler @xcite constructed an induced - universal graph for graphs with maximum degree @xmath2 with @xmath31 vertices .",
    "the author notes that any induced - universal graph must have at least @xmath32 vertices for some @xmath33 depending only on @xmath2 , which implies that the bounds are optimal when @xmath2 is even . for odd @xmath2 , esperet et  al .",
    "@xcite showed a smaller induced - universal graph with @xmath34 vertices .",
    "it follows that there exists a labeling scheme for @xmath35 of size @xmath36 bits for even @xmath2 , and @xmath37 bits for an odd @xmath2 ( but that is not necessary efficient ) .",
    "we summarize the best known bounds for adjacency labeling schemes in table  [ tab : priors ] .      for two integers @xmath38",
    "we denote @xmath39 = \\{1,\\cdots , k_1\\}$ ] and @xmath40 = \\{k_1 , \\cdots , k_2\\}$ ] .",
    "a binary string @xmath41 is a member of the set @xmath42 , and we denote its length by @xmath43 .",
    "we denote the concatenation of two binary strings @xmath44 by @xmath45 .    for a graph @xmath4",
    "we denote its set of vertices and edges by @xmath46 and @xmath47 , respectively .",
    "the family of all graphs is denoted @xmath48 . for any graph family @xmath12 ,",
    "let @xmath49 denote the subfamily containing the graphs of at most @xmath21 vertices .",
    "the collection of graphs with bounded degree @xmath2 in @xmath50 is denoted @xmath51 .",
    "the collection of planar graphs , outerplanar graphs , and trees , in @xmath22 is denoted @xmath52 and @xmath53 , resp .",
    "unless otherwise stated , we assume hereafter @xmath2 to be constant . to simplify the presentation",
    "we suppress all dependencies on @xmath2 in all our bounds and running time estimations .",
    "all these dependencies can be computed and shown to be at most a multiplicative factor of @xmath54 times the claimed bounds .",
    "we defer the exact details to the journal version of the paper .",
    "non constant bounds on the degree are denoted by @xmath19 .",
    "we note that all results work for disconnected graphs .",
    "we assume trees to be rooted , and denote @xmath55 as @xmath56 .",
    "for a set of vertices @xmath57 we define @xmath58 to be the graph obtained from @xmath4 by removing the vertices in @xmath59 and all incident edges .",
    "the set of edges in @xmath60 incident to a vertex @xmath61 is denoted @xmath62 .",
    "let @xmath63 , and let @xmath64 .",
    "@xmath65 is the boolean function over vertices in @xmath66 that returns * true * if and only if @xmath6 and @xmath7 are adjacent in @xmath4 .",
    "label assignment _ for @xmath66 is a mapping of each @xmath67 to a bit string @xmath68 , called the _ label _ of @xmath7",
    ". an _ adjacency labeling scheme _ for @xmath48 consists of an encoder and decoder .",
    "the _ encoder _ is an algorithm that receives @xmath66 as input and computes the label assignment @xmath69 .",
    "the _ decoder _ is an algorithm that receives any two labels @xmath70 and computes the query @xmath71 , such that @xmath72 .",
    "the _ size _ of the labeling scheme is the maximum label length .",
    "hereafter , we refer to adjacency labeling schemes simply as labeling schemes . for the encoding and decoding algorithms , we assume a @xmath73 word size ram model .",
    "in this section we describe a labeling scheme for outerplanar graphs with bounded degree @xmath2 .",
    "our method relies on an embedding technique of bhatt , chung , leighton and rosenberg  @xcite for bounded degree outerplanar graphs . in their paper , the authors were concerned with _ edge - universal graphs _ for various families of bounded degree graphs . in particular , they show that for every @xmath74 there exists a graph @xmath75 with @xmath26 vertices and @xmath26 edges that contains every bounded degree outerplanar graph @xmath76 as a subgraph ( not necessarily induced ) .",
    "our main tool is an embedding technique due to bhatt et  al .",
    "@xcite of outerplanar graphs into @xmath75 . on the one hand ,",
    "the embedding is simple to compute .",
    "this fact will lead to an efficient @xmath10 time encoder . on the other hand",
    ", the embedding satisfies a useful locality property .",
    "this property allows our labels to contain both unique vertex identifiers of the graph @xmath75 and edge identifiers , without exceeding the desired label size @xmath1 .    to obtain the latter label size via an embedding into @xmath75",
    "we need to overcome several difficulties .",
    "although @xmath75 has a linear number of edges , its maximum degree is @xmath73 , thus , unique edge identifiers require @xmath77 bits , in general .",
    "since also @xmath78 , it follows that a label can not contain an arbitrary combination of vertex identifiers in @xmath79 and edge identifiers at the same time , as it would lead to labels with size @xmath80 .",
    "this difficulty is overcome by exploiting the structure of @xmath75 further and constructing unique vertex identifiers in a particular way that allows reducing the encoding length .",
    "this solution creates an additional difficulty of separating the different parts of the label in the decoding phase .",
    "this difficulty is overcome by designing careful encoding lengths that minimize the ambiguity , and storing an additional constant amount of information to eliminate it altogether .",
    "we describe next the edge - universal graph @xmath81 constructed by bhatt et  al .",
    "@xcite for @xmath9 .",
    "we let @xmath82 and set @xmath83 .",
    "the construction uses two constants @xmath84 , that depend only on @xmath2 .    the graph @xmath75 is constructed from the complete binary tree @xmath85 on @xmath86 vertices as follows . to obtain the vertex set @xmath79 , split every vertex @xmath87 at level @xmath88 in @xmath85 into @xmath89 vertices @xmath90 .",
    "the latter set of vertices is called the _ cluster _ of @xmath7 . for @xmath91",
    "we denote by @xmath92 the _ level _ of @xmath93 , that is the level in the binary tree @xmath94 of the cluster to which @xmath93 belongs .",
    "the edge set @xmath95 is defined as follows .",
    "two vertices @xmath96 are adjacent if and only if the clusters they belong to in @xmath85 are at distance at most @xmath97 in @xmath85 .",
    "note that @xmath98 implies @xmath99 .",
    "this completes the construction of the graph .",
    "one can easily check that @xmath100 .",
    "@xmath101 also holds , but we do not this fact directly .",
    "the graph @xmath75 is illustrated in figure  [ fig : construction ] .",
    "our labeling scheme relies on the following result of bhatt et  al .",
    "@xcite .",
    "[ thm : embedding ] @xmath75 is edge - universal for the class of bounded degree outerplanar graphs @xmath9 .",
    ".,scaledwidth=75.0% ]      we briefly describe a simple @xmath103 labeling scheme .",
    "first , assign unique identifiers @xmath104 to the vertices in @xmath75 .",
    "since @xmath100 we can assume that @xmath105 for every @xmath106 .",
    "next , for every @xmath106 assign unique identifiers to the edges incident to @xmath7 , since every vertex in @xmath75 has @xmath107 neighbours , each edge can be encoded using @xmath108 bits .    to obtain labels for a given outerplanar graph @xmath60 , compute first an embedding @xmath109 of @xmath4 into @xmath75 .",
    "next , define the label of vertex @xmath61 to be the concatenation of @xmath110 with the identifiers of all edges in @xmath95 leading to images under the embedding @xmath111 of neighbouring vertices , namely all @xmath112 such that @xmath113 .",
    "since the maximum degree in @xmath4 is bounded by the constant @xmath2 , this results in a @xmath114 label size .",
    "it is not difficult to see that encoding and decoding can be performed efficiently ( we elaborate on it later on ) .      to reduce the size of the labels to @xmath1 we need to refine the latter technique significantly .",
    "as a first step we employ _ differential sizing _ , a technique first used in the context of labeling schemes in  @xcite . in differential sizing some parts of the label",
    "do not have a fixed number of allocated bits across all labels . concretely",
    ", we use differential sizing for both vertex and edge identifiers .",
    "the resulting labels will have the desired length , but will also contain an undesired ambiguity , that will prohibit correct decoding .",
    "we will then append a short prefix to the label that will resolve this ambiguity .",
    "let us first formally define our naming scheme for vertex and edge identifiers in @xmath75 .",
    "[ def : coherent ] a _ naming _ of @xmath75 is an injective function @xmath115 and a collection of injective functions @xmath116 for every @xmath106 .",
    "a naming is _ coherent _ if for every @xmath117    1 .",
    "@xmath118 implies that @xmath119 , or @xmath120 and the cluster of @xmath121 appears to the left of the cluster of @xmath122 in @xmath85 .",
    "@xmath123 implies that @xmath118 .",
    "we compute a coherent naming by assigning the identifiers @xmath124 through @xmath125 to @xmath79 level by level , traversing the clusters in any single level in @xmath85 from left to right , and then naming the edges incident to @xmath106 from @xmath124 to @xmath126 in a way that is consistent with the vertex naming .    for @xmath127 define @xmath128 and @xmath129 and let @xmath130 be the maximal number of bits required to encode a vertex name and an edge name for vertices with level at most @xmath88 .",
    "the simple labels described in the beginning of this section store @xmath1 and @xmath108 bits for _ every _ vertex name , and every edge name , respectively . in contrast , our label for a vertex in level @xmath88 stores @xmath131 bits for a vertex name , and @xmath132 for edge names . in the following lemma",
    "we prove that new labels have the desired size .",
    "[ lem : bound ] for every @xmath133 it holds that @xmath134 , @xmath135 and @xmath136 .",
    "we henceforth denote the part of the label containing the vertex name and all its edge identifiers as the _ suffix_.      since the vertex name does not occupy a fixed number of bits across all labels , it is a priori unclear which part of the label contains it . to resolve this ambiguity",
    "we analyze the following function , which represents the final length of our labels for vertices in level @xmath88 ( up to a fixed constant ) .",
    "let @xmath137 $ ] and @xmath138 be defined as    @xmath139 the following lemma states that all but a constant number ( depending on @xmath2 ) of values in @xmath140 have at most two pre - images under @xmath141 .",
    "this observation is useful , since it implies that the knowledge of the level @xmath142 of the vertex @xmath7 can resolve all remaining ambiguities in its label , as the vertex name occupies exactly @xmath143 bits .",
    "[ lem : properties ] let @xmath144 . for every @xmath145 $ ] the number of integers @xmath146 that satisfy @xmath147 ,",
    "is at most one .",
    "[ rem : lemma3 ] it is natural to ask if having equal label lengths for vertices in different levels can be avoided altogether ( thus making lemma  [ lem : properties ] unnecessary ) .",
    "this seems not to be the case for the following reason .",
    "the number of vertices in every level is at least @xmath148 , thus , with label size @xmath149 one can not uniquely represent all vertices in _ any _ level .",
    "furthermore , the label length is also restricted to @xmath1 , and the number of levels is @xmath150 .",
    "thus , a function assigning levels to label lengths would need to have domain @xmath151 $ ] and range @xmath152 $ ] for @xmath153 , implying that it can not be one - to - one .",
    "recall that the length of the suffix of vertex @xmath61 is exactly @xmath154 .",
    "we next show how the structural property proved here allows to construct a constant size _",
    "prefix _ , that will eliminate the ambiguity caused by differential sizing .      for a formal description of the prefix",
    "we need the following definition .",
    "we let @xmath144 , as in lemma  [ lem : properties ] .",
    "[ def : label_def ] a vertex @xmath61 is called _ shallow _ if its level @xmath142 is at most @xmath155 .",
    "we call a shallow vertex _ early _ if @xmath142 is the smallest pre - image of @xmath156 .",
    "a shallow vertex that is not early is called _",
    "late_.    a vertex @xmath61 that is not shallow is called _",
    "a deep vertex is of _ type _",
    "@xmath157 , if its level satisfies @xmath158 .",
    "it is easy to verify the following properties .",
    "lemma  [ lem : properties ] guarantees that if @xmath7 is shallow , then @xmath156 has at most two pre - images under @xmath141 .",
    "if @xmath7 is shallow and there is only one pre - image for @xmath156 , then @xmath7 is early . finally , observe that the type of deep vertices ranges in the interval @xmath159 $ ] .",
    "we are now ready to define the prefix of a label @xmath68 for a vertex @xmath61 .",
    "every prefix starts with a single bit @xmath160 that is set to @xmath161 if @xmath7 is shallow , and to @xmath124 if @xmath7 is deep .",
    "the second bit @xmath162 in every prefix indicates whether a shallow vertex is early , in which case it is set to @xmath161 , or late , in which case it is set to @xmath124 .",
    "the bit @xmath162 is always set to @xmath161 in labels of deep vertices . the next part @xmath163 of the prefix contains @xmath164 bits representing the type of the vertex @xmath7 , in case @xmath7 is deep .",
    "if @xmath7 is shallow this field is set to zero .",
    "this concludes the definition of the prefix .",
    "observe that the prefix contains @xmath165 bits .",
    "we stress that length @xmath166 of the prefix is identical across all labels .",
    "it is evident that the prefix of a label eliminates any remaining ambiguity .",
    "this follows from the fact that the level @xmath142 of a vertex @xmath167 can be computed from the length of the suffix and the additional information stored in the prefix .",
    "the level , in turn , allows to decompose the suffix into the vertex name and the incident edge names , which can then be used for decoding .",
    "we elaborate on the decoding algorithm later on .",
    "the final label is obtained by concatenating the suffix to the prefix , namely @xmath68 is defined as follows .",
    "@xmath168    figure  [ fig : labels ] illustrates the label structure as a function of the level of the vertex .",
    "note that @xmath169 , thus the level @xmath142 of @xmath7 determines @xmath170 .",
    "note that lemma  [ lem : bound ] and the fact that the prefix has constant size guarantees that @xmath171 , as desired .",
    "we also pad each label with sufficiently many @xmath161 s and a single @xmath124 , to arrive at a uniform length .",
    "the latter simple modification allows the decoder to work without knowing @xmath21 in advance ( see  @xcite for details ) .",
    "[ fig : labels ] .",
    "the size of the prefix is seen to be constant in every level , while the fields of lengths @xmath131 and @xmath132 , used to store vertex and edge identifiers , respectively , have variable sizes .",
    "the levels @xmath172 and @xmath173 comprise a collision with respect to the function @xmath141 , thus labels of vertices in these levels have the same length.,title=\"fig : \" ]    although it is not necessary for the correctness of our labeling scheme , we prove here uniqueness of the labels . in other words , we show that two different vertices in @xmath4 necessarily get different labels .",
    "[ lem : uniqueness ] for every two distinct @xmath174 it holds that @xmath175 .",
    "consider two labels @xmath176 and @xmath68 for vertices @xmath64 .",
    "the decoder first extracts the levels @xmath177 and @xmath142 of @xmath6 and @xmath7  respectively , using the following simple procedure , which we describe for @xmath7 . if @xmath178 , @xmath7 is shallow . to this end , the decoder computes all pre - images of the length of the suffix , @xmath179 , under @xmath141 .",
    "recall , that by lemma  [ lem : properties ] , the number of pre - images is at most two .",
    "let @xmath180 be the computed pre - images .",
    "next , the decoder inspects the bit @xmath162 . according to the definition of the labels ,",
    "@xmath181 if @xmath182 , and @xmath183 , otherwise .",
    "consider next the case @xmath184 , namely that @xmath7 is deep .",
    "in this case , the decoder inspects @xmath163 .",
    "the level of @xmath7 is @xmath185 , by definition of a type of a deep vertex .",
    "it is obvious by the definition of the labels that the decoder extracts @xmath142 correctly .",
    "assume next that the decoder extracted @xmath177 and @xmath142 .",
    "the decoder can now extract @xmath186 and @xmath187 , by inspecting the first @xmath188 and @xmath143 bits of the suffix of @xmath176 and @xmath68 , respectively .",
    "next , the decoder checks if @xmath189 , in which case it reports * false*. finally , if @xmath190 the decoder scans all @xmath2 blocks of @xmath191 bits each , succeeding @xmath186 in the suffix of @xmath176 , checking if one of them contains the edge - identifier @xmath192 . if this identifier is found the decoder reports",
    "* true*. otherwise , it reports * false*. the correctness of the decoding is clear from the label definition and lemma  [ lem : properties ] .",
    "[ lem : decoding ] the decoding of the labels can be performed in time @xmath11 .",
    "all the labels can clearly be computed from the graph @xmath4 , the embedding @xmath111 and the graph @xmath75 in time @xmath10 .",
    "it is also straightforward to compute @xmath75 in @xmath26 time .",
    "it remains to discuss how to compute an embedding @xmath111 , for which we provide a high - level overview . for a detailed description ,",
    "see bhatt et  al .",
    "@xcite .",
    "the algorithm uses a subroutine for computing bisectors of a graph .",
    "a _ bisector _ of a graph @xmath193 is a set @xmath194 of vertices with the property that the connected components of the graph @xmath58 can be partitioned into two parts , such that the sum of the vertices in each part is the same , and no edge connects two vertices in different parts .",
    "if @xmath59 is a bisector in @xmath4 we say that @xmath59 _ bisects _ @xmath195 .    given a @xmath196-coloring @xmath197 of @xmath198 ( for some @xmath199 ) , one can define a _",
    "@xmath196-bisector _ of @xmath4 as a set @xmath194 that bisects _ every _ color class , namely one that bisects @xmath200 for all @xmath201 $ ] . an important property of outerplanar graphs is that they admit @xmath107 size @xmath196-bisectors , for every fixed @xmath196 .",
    "the algorithm works by assigning vertices in the graph @xmath4 to clusters in @xmath85 .",
    "the root of @xmath85 is assigned up to @xmath202 vertices that form a bisector of @xmath4 with parts @xmath203 . in the next iteration ,",
    "vertices adjacent to vertices in the bisector are given a new color .",
    "next , two new @xmath204-bisectors are found , one in each part @xmath205 , and they are assigned to the corresponding decedents of the root of @xmath85 .",
    "let @xmath206 .",
    "in general , the vertices stored at a vertex of @xmath85 at level @xmath88 correspond to a @xmath207-bisector .",
    "the colors of this bisector correspond to the neighbors of vertex - sets stored at @xmath208 nearest ancestors of the current vertex in @xmath85 .",
    "the last color is reserved to the remaining vertices .",
    "also stored in this vertex are all neighbors of the vertex - set stored in the ancestor of the current vertex at distance exactly @xmath207 , that were not yet assigned to some other cluster .",
    "we refer the reader to  @xcite for an analysis of the sizes of clusters .",
    "let @xmath209 be the running time of the latter algorithm in a graph with @xmath21 vertices .",
    "@xmath209 clearly satisfies @xmath210 , where @xmath211 is the complexity of finding an @xmath212-bisector of @xmath107 size in an @xmath21-vertex graph . for outerplanar graphs",
    "the latter can be done in linear time  @xcite , thus the labels of our labeling scheme can be computed in @xmath10 time .",
    "several well - known techniques can be easily applied on top of our construction to reduce the additive constant in the label size .",
    "first , since graphs of maximum degree @xmath2 have arboricity @xmath213 , one can reduce the number of edge identifiers stored in each label to the latter number ( see kannan et  al .",
    "we later show a simpler procedure that works for bounded degree graphs .",
    "finally , for bounded - degree trees @xmath214 , it suffices to store a single edge identifier ( corresponding to the edge connecting a vertex to its parent in @xmath4 ) .",
    "we summarize this result in the following corollary of theorem  [ thm : main ] .",
    "[ cor : trees ] for every fixed @xmath8 , the class @xmath214 of bounded - degree trees admits a labeling scheme of size @xmath1 , with encoding complexity @xmath10 and decoding complexity @xmath11 .",
    "first we note that theorem  [ thm : main ] implies almost directly a @xmath216 labeling scheme for graphs of fixed bounded degree @xmath2 .",
    "the result follows from the technique of alstrup and rauhe  @xcite , lemma  [ lem : uniqueness ] and the fact that any subtree of a bounded degree graph has bounded degree .",
    "[ cor : graphs ] for every @xmath8 , the class @xmath35 of bounded - degree graphs admits labeling schemes of size @xmath216 , with encoding complexity @xmath10 and decoding complexity @xmath11 .    from here on , we discuss labeling schemes for graphs of non - constant bounded degree @xmath217 .",
    "adjacency relation between any two vertices may be reported in only one of the labels representing them . for bounded degree graphs , the method of kannan et  al .",
    "@xcite of decomposition into forests can be replaced with a simpler procedure , using eulerian circuits , as we prove in the following .",
    "[ thm : split ] let @xmath60 be a graph with degree bounded by @xmath196 .",
    "there exist an adjacency labeling scheme for @xmath4 of size @xmath218 .    the current best labeling schemes for graphs works in two modes , according to the range of @xmath196 .",
    "if @xmath219 , a @xmath220 labeling scheme can be achieved  @xcite , essentially by encoding an adjacency list . for larger @xmath196 ,",
    "labels defined through the adjacency matrix of the graph have size @xmath221  @xcite .",
    "our improved labels use the well - known _ combinatorial number system _ ( see e.g.  @xcite ) .",
    "[ lemma : combinadics ] let @xmath222 .",
    "there is a bijective mapping @xmath223 $ ] between the set of strictly increasing sequences @xmath224 of the form @xmath225 and @xmath226 $ ] given by @xmath227    we use lemma  [ lemma : combinadics ] to prove the following theorem .",
    "for this purpose we assume that the labeling scheme presented in lemma  [ thm : split ] returns a subset of vertices for every vertex @xmath167 according to the partition instead of a final label .",
    "[ thm : combina ] for @xmath228 , there exist an adjacency labeling scheme for @xmath229 with size : @xmath230 .    the labeling scheme suggested in theorem  [ thm : combina ] implies a label size of approximately @xmath231 bits , when @xmath196 is small and @xmath232 when @xmath233 .",
    "the following lemma identifies the range of @xmath196 for which our labeling scheme improves on the best known bounds .",
    "[ lemma : mathias ] for @xmath234 , and @xmath235 it holds that    @xmath236 ; and    @xmath237 .",
    "we conclude from lemma  [ lemma : mathias ] that our labeling scheme is preferable to @xcite for graphs of bounded degree @xmath196 for @xmath238 .",
    "[ bibliography ]    10 [ 1]`#1 `    alstrup , s. , bille , p. , rauhe , t. : labeling schemes for small distances in trees .",
    "siam j. disc .",
    "19(2 ) , 448462 ( 2005 )    alstrup , s. , gavoille , c. , kaplan , h. , rauhe , t. : nearest common ancestors : a survey and a new distributed algorithm . in : proc . of the fourteenth annual acm symposium on parallel algorithms and architectures . pp .",
    "spaa 02 ( 2002 )    alstrup , s. , rauhe , t. : small induced - universal graphs and compact implicit graph representations . in : proc .",
    "the 43rd annual ieee symposium on foundations of computer science .",
    "5362 . ieee ( 2002 )    bhatt , s. , chung , f.r.k . ,",
    "leighton , t. , rosenberg , a. : universal graphs for bounded - degree trees and planar graphs .",
    "siam j. disc .",
    "2(2 ) , 145155 ( 1989 )    bonichon , n. , gavoille , c. , labourel , a. : short labels by traversal and jumping . in : structural information and communication complexity ,",
    "143156 ( 2006 )    bonichon , n. , gavoille , c. , labourel , a. : short labels by traversal and jumping .",
    "notes in discrete math .",
    "28 , 153160 ( 2007 )    butler , s. : induced - universal graphs for graphs with bounded maximum degree .",
    "graphs combinator .",
    "25(4 ) , 461468 ( 2009 )    chung , f.r.k . :",
    "separator theorems and their applications . forschungsinst .",
    "fr diskrete mathematik ( 1989 )    chung , f.r.k . : universal graphs and induced - universal graphs",
    ". j. graph theor .",
    "14(4 ) , 443454 ( 1990 )    esperet , l. , labourel , a. , ochem , p. : on induced - universal graphs for the class of bounded - degree graphs . inform .",
    "108(5 ) , 255260 ( 2008 )    fraigniaud , p. , korman , a. : compact ancestry labeling schemes for xml trees . in : proc . of the 21st annual acm - siam symposium on discrete algorithms . pp .",
    "458466 . soda 10",
    "( 2010 )    fraigniaud , p. , korman , a. : compact ancestry labeling schemes for xml trees . in : in proc .",
    "21st acm - siam symp . on discrete algorithms .",
    "soda 10 ( 2010 )    gavoille , c. , labourel , a. : shorter implicit representation for planar graphs and bounded treewidth graphs . in : algorithms  esa 2007 , pp .",
    "582593 ( 2007 )    gavoille , c. , paul , c. : distance labeling scheme and split decomposition . discrete math .",
    "273 , 115  130 ( 2003 )    kannan , s. , naor , m. , rudich , s. : implicit representation of graphs . in : proc .",
    "of the 20th acm symposium on theory of computing .",
    "334343 . stoc 88 ( 1988 )    knuth , d. : combinatorial algorithms .",
    "the art of computer programming , vol .",
    "4a ( 2011 )    korman , a. , peleg , d. , rodeh , y. : constructing labeling schemes through universal matrices . in : algorithms and computation , pp .",
    "409418 ( 2006 )    laoutaris , n. , rajaraman , r. , sundaram , r. , teng , s.h . : a bounded - degree network formation game .",
    "arxiv preprint cs/0701071 ( 2007 )    moon , j.w .",
    ": on minimal n - universal graphs . in : proc . of the glasgow math .",
    "vol .  7 , pp .",
    "3233 ( 1965 )    nash - williams , c. : edge - disjoint spanning trees of finite graphs . j. london math .",
    "1(1 ) , 445450 ( 1961 )    thorup , m. , zwick , u. : compact routing schemes . in : proc . of the thirteenth annual acm symposium on parallel algorithms and architectures . pp .",
    "spaa 01 , new york ( 2001 )    wang , y. , li , x.y . :",
    "localized construction of bounded degree and planar spanner for wireless ad hoc networks .",
    "mobile networks and applications 11(2 ) , 161175 ( 2006 )",
    "we start with the following simple observation stating a couple of facts about the size of different parts of @xmath75 .",
    "we let @xmath239 denote the set of vertices in @xmath75 with level at most @xmath88 .",
    "this properties will provide bounds on @xmath131 and @xmath132 .",
    "[ prop : simplebounds ] the following properties hold for every level @xmath88 and every vertex @xmath7 in level @xmath88 .",
    "a.   @xmath240 .",
    "b.   @xmath241 .    _",
    "i. _ note that the number of vertices in level @xmath172 is @xmath242 , thus we obtain @xmath243 using @xmath244 and substituting in the expression above we obtain the desired result .    _ ii .",
    "_ we notice that , by definition of @xmath75 , the set of neighbors of @xmath7 are exactly all vertices whose cluster is at distance at most @xmath245 from the cluster of @xmath7 .",
    "it follows that every such cluster has at most @xmath246 vertices .",
    "finally , notice that the number of clusters that are at distance at most @xmath245 away from a given cluster is at most @xmath247 .",
    "putting things together we obtain a bound of @xmath248 , as desired .",
    "we can now use property  [ prop : simplebounds ] to prove the bounds @xmath250 and @xmath251 we turn to proving the bound on @xmath252 for an arbitrary @xmath133 .",
    "we drop the additive terms @xmath253 and @xmath254 as they do not depend on @xmath21 , and hence only contribute a constant additive term . substituting the bounds above for @xmath131 and @xmath132 and defining @xmath255 we obtain @xmath256 using the fact that @xmath257 whenever @xmath258 and @xmath259 whenever @xmath260 , we have @xmath261 .",
    "this concludes the proof of the lemma .",
    "consider first the behavior of the term @xmath262 in the definition of @xmath141 .",
    "let @xmath263 $ ] be the smallest integer such that @xmath264 is integer .",
    "it follows that @xmath265 for some integer @xmath266 .",
    "consider the smallest integer @xmath267 with @xmath268 such that @xmath269 is integer .",
    "this value clearly satisfies @xmath270 . the smallest integer @xmath271 with @xmath272 such that @xmath273 is integer is @xmath274 and so on .",
    "let @xmath275 be the obtained sequence of @xmath276 points that satisfies @xmath277 for @xmath278 $ ] .",
    "we call such points _",
    "jumps_. see figure  [ fig : twonumbersimage ] for an illustration of @xmath141 .",
    "observe next that for every @xmath279 $ ] the term @xmath280 is constant within the interval @xmath281 $ ] , while at the point @xmath282 it decreases by @xmath283 .",
    "we rewrite @xmath141 as @xmath284 the last term does not depend on @xmath88 , thus it suffices to prove the claim for @xmath285 .",
    "consider next some @xmath286 and assume that @xmath287 for every @xmath288 .",
    "define @xmath289 , and let @xmath290 be the smallest jump larger or equal to @xmath88 .",
    "define @xmath291 .",
    "observe that the number of jumps within the interval @xmath292 $ ] , whose length is @xmath293 is at most @xmath294 , while the next jump occurring after @xmath295 appears exactly in the middle of the latter interval , namely @xmath296 . to this end",
    "assume that @xmath297 has at least two other pre - images @xmath298 under @xmath299 .",
    "since @xmath299 is monotonic between jumps , there must be at least one jump between every consecutive pair of pre - images of @xmath299 .",
    "it follows that @xmath300 and @xmath301 for some @xmath302 .",
    "in particular , it follows that @xmath303 \\subset [ t_i , t'']$ ] , which implies @xmath304 .",
    "now , using the fact that within the interval @xmath292 \\supset [ t_i , t'']$ ] there are at most @xmath305 jumps , we can write @xmath306 } ( \\delta+1 ) \\\\              & \\geq &   \\hat f(t ) + ( \\gamma + \\frac{k-\\gamma}{2 } ) - ( \\delta+1 ) ( \\log ( k - \\gamma ) + 1 ) \\\\              & \\geq &   \\hat f(t ) + \\frac{k}{2 } -",
    "( \\delta+1 ) ( \\log k + 1 ) ,      \\end{aligned}\\ ] ] which , using @xmath307 , implies @xmath308 rearranging the terms we obtain @xmath309 , which clearly implies @xmath310 and @xmath145 $ ] .",
    "this concludes the proof .",
    ", width=377 ]      consider two vertices @xmath311 and assume @xmath312 .",
    "since the prefix of every label has the same length and the same parts for every vertex in @xmath46 , it must hold that @xmath313 , @xmath314 and @xmath315 .",
    "assume first that both @xmath6 and @xmath7 are shallow . in this case",
    "@xmath316 implies that @xmath317 .",
    "now , since @xmath314 , both @xmath7 and @xmath6 are either early , or late , implying by lemma  [ lem : properties ] that @xmath318 .",
    "it follows by definition of the labels , that the first @xmath131 bits of the suffices of @xmath176 and @xmath68 contain @xmath319 and @xmath110 , respectively , implying @xmath320 . from the correctness of the embedding @xmath111 and uniqueness of the identifiers",
    "@xmath104 it follows that @xmath321 .",
    "finally , assume that both @xmath6 and @xmath7 are deep .",
    "in this case @xmath322 implies again that @xmath323 .",
    "we now reach the conclusion @xmath321 as in the previous case .",
    "all operations performed by the decoder take @xmath212 time except for the computation of pre - images of an integer under @xmath141 , and steps that inspect properties in @xmath75 .",
    "the former can obviously be performed in @xmath11 time as follows .",
    "if the label corresponds to a deep label , then the decoder checks all @xmath324 possible preimages , so assume next that the vertex is shallow .",
    "notice that @xmath325 for every @xmath286 .",
    "thus , given @xmath326 , one can compute in @xmath11 time all @xmath327 for all integers @xmath328 with @xmath329 .",
    "all preimages of @xmath326 under @xmath141 will be found this way .",
    "we focus hereafter on the complexity of deciding if @xmath190 and the computation of the edge - identifier corresponding to two vertices in @xmath75 . to this end",
    "we need to elaborate on the way labeling is performed for the graph @xmath75 .",
    "recall that @xmath75 is built from the complete binary tree @xmath85 with @xmath330 levels by splitting each vertex at level @xmath88 into @xmath331 vertices , thus forming clusters , and then connecting two vertices if they belong to clusters at distance at most @xmath332 apart in @xmath85 .",
    "the labeling of vertices is performed by assigning a _ range _",
    "@xmath333 of size @xmath334 to every cluster at level @xmath88 in a single breadth - first search traversal , and then ordering the vertices in the cluster arbitrarily using unique values in the range @xmath335 . more precisely , the ranges are constructed starting from the root of @xmath85 , processing @xmath85 level by level as follows .",
    "the range of the root cluster is simply @xmath336 $ ] .",
    "the range of the left child of the root is assigned the range @xmath337 $ ] , while the right child is assigned the range @xmath338 $ ] and so on . at level @xmath88 ,",
    "the assignment of ranges starts from the left descendant of the parent at level @xmath339 with the lowest range ( the range with the smallest lower bound ) , followed by the right one , and so on .",
    "this process defines an ordering of the clusters , in each level .",
    "we denote by @xmath340 the position of the cluster @xmath341 in this order .    given a label @xmath342 of a vertex @xmath91 at level @xmath343 , its clusters range ( which identifies the cluster ) can be computed as follows . by definition of the labeling",
    ", we have that @xmath342 is contained in the range @xmath344 $ ] with @xmath345 where @xmath346 is the cluster to which @xmath93 belongs .",
    "we now notice that @xmath347 where both sums in the last formula have simple closed form expressions .",
    "it follows that @xmath348 can be easily computed from @xmath88 and @xmath342 in @xmath212 time .",
    "finally , the decoder can compute both the parent and the descendants of a cluster @xmath341 at level @xmath88 whose range is @xmath349 $ ] .",
    "the parent is computed using the fact that it is at level @xmath339 and its position in this level is @xmath350 .",
    "the descendants can be computed using the fact that their level is @xmath351 and their positions in this level are @xmath352 and @xmath353 .",
    "both computations can clearly be performed in @xmath212 time , once presented with the values @xmath334 .",
    "we conclude that it is possible to obtain in time @xmath212 the ranges of all neighbours of a given cluster @xmath341 in @xmath85 .",
    "we turn to the problem of deciding whether @xmath190 .",
    "the decoder starts by computing the clusters @xmath354 and @xmath355 of @xmath6 and @xmath7 , respectively in time @xmath356",
    ". then the decoder computes paths @xmath357 and @xmath358 of length at most @xmath245 from @xmath354 and @xmath355 , respectively in the tree @xmath85 .",
    "each path is obtained by successively moving at most @xmath245 steps from a cluster to its parent in @xmath85 .",
    "the computation of these paths takes @xmath212 time , using the aforementioned method for computing a parent of a cluster . by definition of @xmath75",
    ", we have that @xmath190 if and only if the clusters of @xmath359 and @xmath360 are at distance at most @xmath245 from one another in @xmath85 .",
    "this can be now easily tested by inspecting the paths @xmath361 , which must contain the least common ancestor ( lca ) of @xmath359 and @xmath360 , in case they are neighbours in @xmath75 ( see fig .",
    "[ fig : construction ] for an illustration ) .    with a similar argument",
    "one shows that each edge identifier can be decoded in @xmath212 time .",
    "the details are similar , and thus omitted . performing the decoding to all @xmath2 edge identifiers",
    "gives a total running time of @xmath212 .",
    "we conclude that the decoder can be implemented to have running time @xmath11 .",
    "we first create an eulerian multigraph @xmath362 from @xmath4 by adding at most @xmath363 new edges , comprising the a matching that connects pairs of vertices in @xmath4 with odd degree .",
    "the degrees of all vertices in @xmath364 are even , hence it is eulerian .",
    "we proceed by finding an eulerian circuit @xmath365 in @xmath364 and directing every edge according to the direction along @xmath365 .",
    "every vertex in @xmath364 with degree @xmath366 has now exactly @xmath367 incoming and outgoing edges .",
    "the label of a vertex will only correspond to the vertices which are adjacent through outgoing edges in @xmath365 .",
    "this number is at most @xmath367 .",
    "the identifiers of the edges in @xmath368 are not included in the resulting label .",
    "the labeling scheme obtained will assign unique labels to each of the vertices , and concatenate the selected labels to each vertex . since @xmath369 this yields a label of size @xmath218 .",
    "we assume the vertices of the graph @xmath60 to be numbered from @xmath161 to @xmath370 .",
    "we call a binary vector @xmath341 of length @xmath21 an _ adjacency vector _ of a vertex @xmath167 if it satisfies that @xmath371 if and only if @xmath372 is a neighbor of @xmath7 in @xmath4 .",
    "we denote by @xmath373 the binary vector with @xmath374 if and only if @xmath375 .",
    "we interpret the vectors @xmath341 and @xmath373 and sets @xmath194 as sequences of integers in the range @xmath376 $ ] , as in lemma  [ lemma : combinadics ] .",
    "let @xmath167 be a vertex with @xmath377 neighbors , and let @xmath341 be its adjacency vector .",
    "our labeling scheme assigns every @xmath167 to an appropriate @xmath68 as follows .",
    "we first use the encoder from the labeling scheme described in lemma  [ thm : split ] to obtain a temporary subset @xmath378 of neighbors of @xmath7 . if @xmath379 we set the last bit of @xmath68 to 0 , and append it to the number mapped to the sequence of integers corresponding to @xmath378 under the bijection in lemma  [ lemma : combinadics ] . according to lemma  [ thm : split ] ,",
    "we are assured that @xmath380 .",
    "if @xmath381 , we set the last bit of @xmath68 to @xmath124 , and append to it the number corresponding to @xmath373 under the bijection in lemma  [ lemma : combinadics ] .",
    "since @xmath382 , the number of @xmath124 s in @xmath373 is at most @xmath383 . finally , we attach to every label a binary representation of @xmath384 and a unique vertex identifier using exactly @xmath385 bits each .",
    "the encoder performs the operation in polynomial time .",
    "it is straightforward to verify the claimed label length .",
    "the decoder receives @xmath176 and @xmath68 and extracts the corresponding vectors @xmath354 and @xmath355 , the adjacency vectors of @xmath6 and @xmath7 , resp . , using lemma  [ lemma : combinadics ] , and possibly a bit inversion operation .",
    "the decoder returns * true * if and only if either @xmath386 or @xmath387 .",
    "we note that the decoding can be implemented in @xmath388 time .",
    "stirling s approximation yields the following asymptotic approximation .",
    "@xmath389 accordingly , @xmath390 .",
    "since @xmath391 , and since the function @xmath392 is increasing for @xmath393 our labeling scheme will incur strictly less than @xmath394 label size for the proposed labeling scheme over the range specified .",
    "let @xmath395 be defined by @xmath396 , and by its definition @xmath397 as @xmath398 .",
    "in addition : @xmath399 @xmath400 define @xmath401 by @xmath402 .",
    "we are now interested in the smallest @xmath196 for which @xmath403 for fixed @xmath21 .",
    "@xmath404 , so @xmath405 , so we can assume @xmath406 , which implies that @xmath407 .",
    "furthermore @xmath408 so @xmath409 @xmath410    note that as @xmath411 this means that    @xmath412    this means that there exists some constant @xmath413 such that if @xmath414 then @xmath415 .",
    "but    @xmath416    if @xmath417 then @xmath418 .",
    "we can conclude @xmath419 , and we may assume that @xmath420 .",
    "now we can conclude that @xmath421 .",
    "hence    @xmath422 and thus @xmath423 we can now conclude with @xmath424 @xmath425",
    "we present here our labeling scheme for the class of bounded degree planar graphs @xmath426 . again , we rely on an embedding of the given planar graph @xmath4 into a graph @xmath427 , obtained from the complete binary tree @xmath85 .",
    "the only difference between @xmath428 and @xmath75 is that in @xmath428 , every vertex @xmath7 in level @xmath88 of @xmath85 is divided into a cluster of @xmath429 vertices @xmath430 ( instead of @xmath334 in @xmath75 ) , for some constant @xmath431 . as for @xmath75 ,",
    "two vertices in @xmath432 are connected if and only if the distance between their clusters in @xmath85 is at most @xmath433 .",
    "bhatt et  al .",
    "@xcite showed the following .",
    "[ thm : zevel ] for every fixed @xmath8 , the class @xmath426 of bounded - degree planar graphs admits a labeling scheme of size @xmath435 , with encoding complexity @xmath10 and decoding complexity @xmath356 .",
    "the average label size of the latter scheme is @xmath436 .",
    "we use a simplified version of the method used in section  [ sec : outerplanar ] , thus many details are omitted .",
    "our labeling scheme for planar graphs works with an embedding @xmath437 of the given graph @xmath4 into @xmath428 .",
    "levels of vertices @xmath438 and @xmath439 are defined as before .",
    "analogously to our previous scheme , we assign unique identifiers @xmath440 to vertices @xmath441 level by level , starting from the highest level , and use them to define edge identifiers .",
    "let @xmath442 denote the set of vertices in @xmath428 with level at most @xmath88 .",
    "then we have the following lemma .        _",
    "i. _ note that the number of vertices in level @xmath172 is @xmath445 , thus for some constant @xmath366 , @xmath446 _ ii .",
    "_ since @xmath7 is connected to vertices in clusters at distance at most @xmath165 from its cluster , there are @xmath212 such clusters .",
    "furthermore , the highest level of such a cluster is at least @xmath447 , thus every such cluster contains @xmath448 vertices , which concludes the proof .",
    "lemma  [ lem : simplebounds_planar ] implies that a the encoding length of label containing a vertex identifier @xmath449 together with @xmath450 edge identifiers corresponding to @xmath451 is @xmath452 additionally storing the level @xmath142 using @xmath11 bits allows to perform decoding easily , without needing the complications arising in our scheme for outerplanar graphs .",
    "finally , combined with the label splitting technique of kannan et  al .",
    "@xcite the statement of the theorem follows .    to prove the bound on the average label length we perform the following simple computation .",
    "consider a constant @xmath453 and let @xmath454 . by choice of @xmath455 and using lemma  [ lem : simplebounds_planar ] it follows that @xmath456 and @xmath457 for some constants @xmath458 .",
    "now , the length of every label @xmath68 for @xmath459 can be trivially bounded by @xmath460 , while for vertices @xmath461 , whose level is at least @xmath455 , we use  ( [ eq : bound ] ) to upper - bound the label size by @xmath462 finally , combining the bounds one obtains the following bound on the sum of the label sizes .",
    "@xmath463 the term @xmath464 is clearly negligible , since @xmath2 is fixed .",
    "we conclude that the average label length is at most @xmath465 for some function @xmath466 . repeating the argument with @xmath467 leads to a bound of @xmath468 on the average label size , which is asymptotically the best possible average label size .    in light of the @xmath469 labeling scheme of gavoille and labourel  @xcite for general planar graphs ,",
    "our result improves the best known bounds for @xmath18 , and matches the bound in  @xcite for @xmath470 ."
  ],
  "abstract_text": [
    "<S> we investigate adjacency labeling schemes for graphs of bounded degree @xmath0 . in particular , we present an optimal ( up to an additive constant ) @xmath1 adjacency labeling scheme for bounded degree trees . the latter scheme is derived from a labeling scheme for bounded degree outerplanar graphs . </S>",
    "<S> our results complement a similar bound recently obtained for bounded depth trees [ fraigniaud and korman , soda 10 ] , and may provide new insights for closing the long standing gap for adjacency in trees [ alstrup and rauhe , focs 02 ] . </S>",
    "<S> we also provide improved labeling schemes for bounded degree planar graphs . </S>",
    "<S> finally , we use combinatorial number systems and present an improved adjacency labeling schemes for graphs of bounded degree @xmath2 with @xmath3 . </S>"
  ]
}