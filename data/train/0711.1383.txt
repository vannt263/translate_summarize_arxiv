{
  "article_text": [
    "graphical models of codes and the decoding algorithms associated with them are now a major focus area of research in coding theory . turbo codes , low - density parity - check ( ldpc ) codes , and expander codes are all examples of codes defined , in one way or another , on underlying graphs . a unified treatment of graphical models and the associated decoding algorithms began with the work of wiberg , loeliger and koetter @xcite,@xcite , and has since been abstracted and refined under the framework of the generalized distributive law @xcite , factor graphs @xcite , and normal realizations @xcite,@xcite .",
    "the particular case of graphical models in which the underlying graphs are cycle - free has a long and rich history of its own , starting with the study of trellis representations of codes ; see _ e.g. _ , @xcite and the references therein .",
    "briefly , a graphical model consists of a graph , an assignment of symbol variables to the vertices of the graph , an assignment of state variables to the edges of the graph , and a specification of local constraint codes at each vertex of the graph .",
    "the full behavior of the model is the set of all configurations of symbol and state variables that satisfy all the local constraints .",
    "such a model is called a realization of a code @xmath0 if the restriction of the full behavior to the set of symbol variables is precisely @xmath0 .",
    "the realization is said to be cycle - free if the underlying graph in the model has no cycles .",
    "a trellis representation of a code can be viewed as a cycle - free realization in which the underlying graph is a simple path .",
    "a linear code @xmath0 has a realization on a graph @xmath1 that is not connected if and only if @xmath0 can be expressed as the direct sum of the codes that are individually realized on the connected components of @xmath1 @xcite .",
    "thus , there is no loss of generality in just focusing , as we do , on the case of realizations on connected graphs . in this paper , we will be concerned with tree realizations  cycle - free realizations in which the underlying cycle - free graph is connected , _",
    "i.e. _ , is a tree .",
    "it is by now well known that the sum - product algorithm on any tree realization provides an exact implementation of maximum - likelihood ( ml ) decoding @xcite,@xcite,@xcite,@xcite . a good initial estimate of the computational complexity of such an implementation is given by the constraint complexity of the realization , which is the maximum dimension of any of the local constraint codes in the realization .",
    "now , distinct tree realizations of the same code have , in general , distinct constraint complexities .",
    "the treewidth of a code is defined to be the least constraint complexity of any of its tree realizations .",
    "thus , treewidth may be taken to be a measure of the ml decoding complexity of a code .",
    "since trellis realizations are instances of tree realizations , the treewidth of a code can be no larger than the minimum constraint complexity of any of its trellis realizations . in the abstract of his paper @xcite",
    ", forney claimed that `` the constraint complexity of a general cycle - free graph realization can be [ strictly ] less than that of any conventional trellis realization , but not by very much . '' while he substantiated the first part of his claim by means of an example , he left the `` not by very much '' part as a conjecture ( * ? ? ?",
    "* , conjecture  2 ) .",
    "but he also admitted that none of the arguments he gave in support of his conjecture `` is very persuasive , '' and that it is equally plausible that ( * ? ? ?",
    "* conjecture  3 ) there exists no upper bound on the gap between the treewidth of a code and the minimum constraint complexity of any of its trellis realizations .",
    "one of the main contributions of this paper is an example that affirms the validity of forney s conjecture  3 .",
    "we present , in section  [ complexity_section ] , a family of codes for which the difference between the minimum trellis constraint complexity and the treewidth grows logarithmically with codelength .",
    "we conjecture that this is in fact the maximal rate of growth of this difference .",
    "our construction of this example is based upon results from the graph theory and matroid theory literatures that connect the notions of treewidth and trellis complexity of a code to certain complexity measures defined for graphs .",
    "this paper makes two other contributions , both relating to minimal tree realizations .",
    "a mapping of the set of coordinates of a code @xmath0 to the vertices of a tree is called a tree decomposition .",
    "a tree decomposition may be viewed as an assignment of symbol variables to the vertices of the tree .",
    "it is known that given a code @xmath0 , among all tree realizations of @xmath0 that extend a given tree decomposition , there is one that minimizes the state space dimension at each vertex of the underlying tree @xcite .",
    "this minimal tree realization , an explicit construction of which was also given in @xcite , is unique up to isomorphism .",
    "we give two new constructions of minimal tree realizations .",
    "the first construction involves a generalization of the idea of state merging that can be used to construct minimal trellis realizations ( * ? ? ?",
    "* section  4 ) .",
    "we show that any tree realization of a code can be converted to a minimal realization by a sequence of state merging transformations .",
    "the state space and constraint code dimensions do not increase at any step of this process . from this , we obtain the fact that a minimal realization also minimizes the constraint code dimension at each vertex of the underlying tree .",
    "our second construction of minimal tree realizations uses extensions of the code decomposition techniques that were presented in @xcite .",
    "the main advantage of this construction is its recursive nature , which makes it suitable for mechanical implementation .",
    "also , it is relatively straightforward to estimate the computational complexity of this construction .",
    "we show that the complexity is polynomial in the length and dimension of the code , as well as in the size of the underlying tree , but is exponential in the state - complexity of the minimal realization , which is the maximum dimension of any state space in the realization .",
    "the paper is organized as follows . in section  [ background_section ]",
    ", we provide the necessary background on tree realizations of linear codes .",
    "the construction of minimal realizations by means of state merging is presented in section  [ state_merging_section ] .",
    "code decomposition techniques are developed in section  [ decomp_section ] , and used in section  [ new_construct_section ] to derive a recursive construction of minimal tree realizations .",
    "proofs of some of the results from sections  [ background_section][new_construct_section ] are deferred to appendices to preserve the flow of the exposition .",
    "treewidth and related complexity measures are defined in section  [ complexity_section ] , which also establishes connections between these code complexity measures and certain complexity measures defined for graphs .",
    "these connections are used to derive the example of a code family for which the gap between minimum trellis constraint complexity and treewidth is arbitrarily large .",
    "we also touch upon the subject of codes of bounded complexity , observing that many hard coding - theoretic problems become polynomial - time solvable when restricted to code families whose treewidth is bounded .",
    "section  [ conclusion ] contains a few concluding remarks .",
    "our treatment of the topic of tree realizations in this section is based on the exposition of forney @xcite,@xcite ; see also @xcite .",
    "we start by establishing some basic notation .",
    "we take @xmath2 to be an arbitrary finite field .",
    "given a finite index set @xmath3 , we have the vector space @xmath4 . for @xmath5 and @xmath6",
    ", the notation @xmath7 will denote the _ projection _ @xmath8 .",
    "also , for @xmath6 , we will find it convenient to reserve the use of @xmath9 to denote the set difference @xmath10 .",
    "a _ linear code _ over @xmath2 , defined on the index set @xmath3 , is a subspace @xmath11",
    ". we will only consider linear codes in this paper , so the terms `` code '' and `` linear code '' will be used interchangeably .",
    "the dimension , over @xmath2 , of @xmath0 will be denoted by @xmath12 .",
    "an @xmath13 $ ] code is a code of length @xmath14 and dimension @xmath15 .",
    "if , additionally , the code has minimum distance @xmath16 , then the code is an @xmath17 $ ] code .",
    "the dual code of @xmath0 is denoted by @xmath18 , and is defined on the same index set as @xmath0 .",
    "let @xmath19 be a subset of the index set @xmath3 .",
    "the _ projection _ of @xmath0 onto @xmath19 is the code @xmath20 , which is a subspace of @xmath21 .",
    "we will use @xmath22 to denote the _ cross - section _ of @xmath0 consisting of all projections @xmath23 of codewords @xmath24 that satisfy @xmath25 . to be precise , @xmath26 . note that @xmath27 .",
    "also , since @xmath22 is isomorphic to the kernel of the projection map @xmath28 defined by @xmath29 , we have that @xmath30 .",
    "furthermore , projections and cross - sections are dual notions , in the sense that @xmath31 , and similarly , @xmath32 .",
    "if @xmath33 and @xmath34 are codes over @xmath2 defined on mutually disjoint index sets @xmath35 and @xmath36 , respectively , then their _ direct sum _ is the code @xmath37 defined on the index set @xmath38 , such that @xmath39 and @xmath40 .",
    "this definition naturally extends to multiple codes ( or subspaces ) @xmath41 , where @xmath42 is a code identifier that takes values in some set @xmath43 .",
    "again , it must be assumed that the codes @xmath41 are defined on mutually disjoint index sets @xmath44 .",
    "the direct sum in this situation is denoted by @xmath45 .",
    "a tree is a connected graph without cycles . given a tree @xmath46",
    ", we will denote its vertex and edge sets by @xmath47 and @xmath48 , respectively , or simply by @xmath49 and @xmath50 if there is no ambiguity .",
    "vertices of degree one are called _ leaves _ , and all other vertices are called _ internal nodes_. given a @xmath51 ,",
    "the set of edges incident with @xmath52 will be denoted by @xmath53 .",
    "removal of an arbitrary edge @xmath54 from @xmath46 produces a disconnected graph @xmath55 , which is the disjoint union of two subtrees , which we will denote by @xmath56 and @xmath57 , of @xmath46 .",
    "note that @xmath58 and @xmath59 form a partition of @xmath47 .",
    "let @xmath0 be a code over @xmath2 , defined on the index set @xmath3 .",
    "to each @xmath60 , we associate a _ symbol variable _ @xmath61 , which is allowed to take values in @xmath2 .",
    "a _ tree decomposition _ of @xmath3 is a pair @xmath62 , where @xmath46 is a tree ( _ i.e. _ , a connected , cycle - free graph ) and @xmath63 is a mapping from @xmath3 to the vertex set of @xmath46 .",
    "pictorially , a tree decomposition @xmath62 is depicted as a tree with an additional feature : at each vertex @xmath52 such that @xmath64 is non - empty , we attach special `` half - edges '' , one for each index in @xmath64 ; see figure  [ tree_decomp ] .    at this point",
    ", we introduce some notation that we will consistently use in the rest of the paper . given a tree decomposition @xmath62 of an index set @xmath3 , and an edge @xmath65",
    ", we define @xmath66 and @xmath67",
    ". thus , @xmath68 and @xmath69 are the subsets of @xmath3 that get mapped by @xmath70 to vertices in @xmath56 and @xmath57 , respectively .",
    "clearly , @xmath68 and @xmath69 form a partition of @xmath3 .",
    "recall that @xmath53 , @xmath51 , denotes the set of edges incident with @xmath52 in @xmath46 .",
    "consider a tuple of the form @xmath71 , where    * @xmath62 is a tree decomposition of @xmath3 ; * for each @xmath65 , @xmath72 is a vector space over @xmath2 called a _ state space _ ; * for each @xmath51 , @xmath73 is a subspace of @xmath74 , called a _ local constraint code _ , or simply , a _",
    "local constraint_.    such a tuple will be called a _",
    "tree model_. the elements of any state space @xmath72 are called _",
    "states_. the index sets of the state spaces @xmath72 , @xmath65 , are taken to be mutually disjoint , and are also taken to be disjoint from the index set @xmath3 corresponding to the symbol variables . finally , to each @xmath65 , we associate a _ state variable _ @xmath75 that takes values in the corresponding state space @xmath72 .",
    "a _ global configuration _ of a tree model as above is an assignment of values to each of the symbol and state variables . in other words",
    ", it is a vector of the form @xmath76 .",
    "a global configuration is said to be _",
    "valid _ if it satisfies all the local constraints .",
    "thus , @xmath76 is a valid global configuration if for each @xmath51 , @xmath77 .",
    "the set of all valid global configurations of a tree model is called the _ full behavior _ of the model .    note",
    "that the full behavior is a subspace @xmath78 . as usual , @xmath79 denotes the projection of @xmath80 onto the index set @xmath3 .",
    "if @xmath81 , then the model @xmath71 is called a _ ( linear ) tree realization _ of @xmath0 . a tree realization @xmath71 of @xmath0 is said to _ extend _ ( or be an extension of ) the tree decomposition @xmath62 of the index set of @xmath0 .",
    "any tree decomposition of the index set of a code can always be extended to a tree realization of the code , as explained in the following example .",
    "let @xmath0 be a code defined on index set @xmath3 , and let @xmath62 be a tree decomposition of @xmath3 .",
    "pick an arbitrary @xmath51 , and define @xmath82 .",
    "now , consider the set , @xmath53 , of edges incident with @xmath52 .",
    "removal of any @xmath83 produces the two subtrees @xmath56 and @xmath57 .",
    "we specify @xmath56 to be the subtree that does _ not _ contain the vertex @xmath52 , and as usual , @xmath66 . for each @xmath83 ,",
    "the state space @xmath72 is taken to be a copy of @xmath84 .",
    "the remaining state spaces and local constraints are chosen so that , for each @xmath83 , the symbol variables indexed by @xmath68 simply get relayed ( unchanged ) to the state variable @xmath75 ; see figure  [ trivial_ext ] .",
    "it should be clear that the resulting tree model is a tree realization of the code @xmath0 .",
    "this will be called a _",
    "trivial extension _ of @xmath62 .",
    "we will present constructions of non - trivial extensions of tree decompositions a little later .",
    "[ trivial_example ]    a _ simple path _ is a tree with exactly two leaves ( the end - points of the path ) , in which all internal nodes have degree two ; see figure  [ path_fig ] .",
    "let @xmath0 be a code defined on index set @xmath3 , and let @xmath62 be a tree decomposition of @xmath3 , in which @xmath46 is a simple path , and @xmath70 is a surjective map @xmath85 .",
    "any tree realization of @xmath0 that extends @xmath62 is called a _ trellis realization _ of @xmath0 .",
    "when @xmath70 is a bijection , then any trellis realization extending @xmath62 is called a _ conventional _ trellis realization . when @xmath70 is not a bijection ( but still a surjection ) , a trellis realization that extends @xmath62",
    "is called a _",
    "sectionalized _ trellis realization . in trellis terminology ,",
    "the local constraint codes in a trellis realization are called _",
    "branch spaces_. the theory of trellis realizations is well established ; we refer the reader to @xcite for an excellent survey of this theory .",
    "[ trellis_example ]    let @xmath80 be the full behavior of a tree model @xmath71",
    ". we will find it useful to define certain projections of @xmath80 , other than @xmath86 for @xmath6 .",
    "let @xmath87 be a global configuration in @xmath80 . at any given @xmath51 ,",
    "the _ local configuration _ of @xmath88 at @xmath52 is defined as @xmath89 the set of all local configurations of @xmath80 at @xmath52 is then defined as @xmath90 . by definition , @xmath91 .",
    "similarly , for @xmath92 , and @xmath88 as above , we define the projections @xmath93 and @xmath94 .",
    "clearly , @xmath95 is a subspace of @xmath96 .",
    "if @xmath97 consists of a single edge @xmath54 , then we simply denote the corresponding projections by @xmath98 and @xmath99 .",
    "the following elementary property of the projections @xmath100 will be useful later ; a proof for it is given in appendix  [ sec2_lemmas_app ] .",
    "let @xmath80 be the full behavior of some tree realization of a code @xmath0 , defined on the index set @xmath3 , that extends the tree decomposition @xmath62 .",
    "suppose that @xmath101 and @xmath65 are such that @xmath102 .",
    "then , @xmath103 .",
    "[ b|e_lemma ]    a tree model ( or realization ) @xmath104 , with full behavior @xmath80 , is said to be _ essential _ if @xmath105 for all @xmath65 .",
    "this definition actually implies something more .    if the tree model @xmath106 , with full behavior @xmath80 , is essential , then @xmath107 for all @xmath51 .",
    "[ ess_lemma ]    a proof of the lemma can be found in appendix  [ sec2_lemmas_app ] .",
    "+ an arbitrary tree model can always be `` essentialized '' . to see this ,",
    "let @xmath108 be a tree model with full behavior @xmath80 .",
    "recall that @xmath109 is a subspace of @xmath72 , and @xmath110 is a subspace of @xmath73 .",
    "define the _ essentialization _ of @xmath111 to be the tree model @xmath112 .",
    "it is readily verified that @xmath113 has the same full behavior as @xmath111 .",
    "+      given a code @xmath0 and a tree decomposition @xmath62 of its index set @xmath3 , there exists an essential tree realization , @xmath114 , of @xmath0 with the following property @xcite,@xcite :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ if @xmath71 is a tree realization of @xmath0 that extends @xmath62 , then for all @xmath65 , @xmath115 . _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    this _ minimal _ tree realization , which we henceforth denote by @xmath116 , is unique up to isomorphism . more precisely , if @xmath117 is also a tree realization of @xmath0 with the above property ( except that @xmath118 is replaced by @xmath119 ) , then @xmath120 for each @xmath65 , and @xmath121 for each @xmath51",
    ". we will not distinguish between isomorphic tree realizations .",
    "we outline a construction , due to forney @xcite , of @xmath116 . for any edge @xmath65 , the sets @xmath68 and @xmath69 form a partition of the index set @xmath3 .",
    "e^ * = / ( _ j(e )",
    "_ |j(e ) ) , [ se*_def ] and let _",
    "e^ * :  / ( _ j(e ) _",
    "|j(e ) ) [ se*_def ] be the canonical projection map .",
    "in other words , for @xmath24 , @xmath122 is the coset @xmath123 .",
    "now , let @xmath80 be the vector space consisting of all global configurations @xmath124 corresponding to codewords @xmath24 , where @xmath125 .",
    "it is worth noting that @xmath81 , and furthermore , @xmath126 , since @xmath127 implies that @xmath128 .",
    "we can now define for each @xmath51 , the local constraint c_v^ * = |_v = \\{(|_^-1(v ) ,  ( _ e^ * ( ) , ee(v ) ) )  :  c}. [ cv*_def ] the minimal realization @xmath116 is the tuple @xmath114 .",
    "it may be verified that @xmath80 is the full behavior of @xmath129 , so that @xmath129 is indeed an essential tree realization of @xmath0 .    from the definition of @xmath118 in ( [ se*_def ] ) ,",
    "it is clear that for each @xmath65 , ( _ e^ * ) = ( ) - ( _ j(e ) ) - ( _ |j(e ) ) .",
    "[ dimse * ] it is useful to point out that @xmath130 may also be expressed as ( _ e^ * ) = ( |_j(e ) ) + ( |_|j(e ) ) - ( ) , [ dimse*_alt ] a consequence of the fact that for any @xmath6 , @xmath30 .",
    "thus , by the uniqueness of minimal tree realizations , if @xmath131 is a tree realization of @xmath0 with the property that for all @xmath65 , @xmath132 equals one of the expressions in ( [ dimse * ] ) or ( [ dimse*_alt ] ) , then @xmath133 is in fact @xmath129 .",
    "forney @xcite also derived an expression for the dimension of the local constraints @xmath134 .",
    "consider any @xmath51 .",
    "for each @xmath83 , we specify @xmath56 to be the component of @xmath55 that does _ not _ contain @xmath52 . as usual , @xmath66 .",
    "then ( * ? ? ?",
    "* theorem 1 ) , ( c_v^ * ) = ( ) - _ e e(v ) ( _ j(e ) ) .",
    "[ dimcv * ] forney gave the following bound for @xmath135 ( * ? ? ?",
    "* theorem  5 ) : for any @xmath83 , @xmath136 , where @xmath137 denotes the length of the code @xmath134 .",
    "the upper bound can be improved slightly .    in the minimal tree realization @xmath129",
    ", we have , for @xmath51 and @xmath83 , @xmath138 [ dimcv*_bnd ]    the upper bound may be proved as follows .",
    "since @xmath30 for any @xmath6 , we may write ( [ dimcv * ] ) as @xmath139 now , let @xmath83 be fixed .",
    "we have @xmath140 however , as can be seen from figure  [ vpersp_fig ] , @xmath141 is the disjoint union of @xmath64 and the sets @xmath142 , @xmath143",
    ".    therefore , @xmath144 and hence , @xmath145 the lemma now follows from ( [ dimse*_alt ] ) .",
    "as already mentioned , among all tree realizations of @xmath0 extending @xmath62 , the minimal realization @xmath129 minimizes state space dimension at each edge of the tree @xmath46 .",
    "it is natural to ask whether @xmath129 also minimizes local constraint code dimension at each vertex of @xmath46 .",
    "we will show in the next section that @xmath129 does in fact have the following property :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ if @xmath71 is a tree realization of @xmath0 that extends @xmath62 , then for all @xmath51 , @xmath146 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we will deduce this fact from an alternative construction of @xmath129 that we present next .",
    "the construction we describe in this section takes an arbitrary tree realization @xmath111 that extends the tree decomposition @xmath62  for example , the trivial extension given in example  [ trivial_example ]  and via a sequence of transformations , converts @xmath111 to @xmath129 .",
    "these transformations constitute a natural generalization of the state - merging process in the context of minimal trellis realizations ; see , for example , ( * ? ? ?",
    "* section  4 )",
    ". it would be useful to keep this special case in mind while going through the details of the description that follows .",
    "let @xmath147 be an essential instead ; see theorem  [ merge_theorem ] . ]",
    "tree realization of a code @xmath0 with index set @xmath3 , and let @xmath80 be the full behavior of @xmath111 . as @xmath111 is essential , we have that @xmath105 for all @xmath65 ( by definition ) , and @xmath148 for all @xmath51 ( by lemma  [ ess_lemma ] ) .",
    "pick an arbitrary edge @xmath149 , and for ease of notation , set @xmath150 and @xmath151 .",
    "let @xmath152 be the subspace of @xmath153 defined by @xmath154 we will define a new tree model @xmath155 , such that states in the same coset of @xmath152 in @xmath153 are represented by a single `` merged '' state in @xmath156 .",
    "let @xmath157 be the mapping defined by @xmath158 define @xmath159 .",
    "it is clear from the definitions that @xmath160 , and that @xmath161 .",
    "consider now the tree model @xmath155 , where @xmath162 for each @xmath65 , and @xmath163 for each @xmath51 .",
    "note that @xmath164 , and for @xmath165 , we have @xmath166 .",
    "all states in @xmath153 belonging to the same coset of @xmath152 , say , @xmath167 , are mapped to ( or merged into ) the single state @xmath168 in @xmath156",
    ". further note that if @xmath52 is not one of the two vertices incident with @xmath169 , then @xmath170 . at the two vertices that are incident with @xmath169 ,",
    "the local constraints are appropriately modified to take into account the state - merging at edge @xmath169 .",
    "in any case , we have ( |_e ) = ( ||_e ) ( |_e ) = ( _ e ) ,   e e , [ dimse_ineq ] and ( |c_v ) = ( ||_v ) ( |_v ) = ( c_v ) ,   v v. [ dimcv_ineq ] + we claim that @xmath171 is an essential tree realization of @xmath0 . to prove this claim , we must show that @xmath172 for all @xmath65 , and that @xmath173 , where @xmath174 denotes the full behavior of @xmath171 .",
    "note that we do _ not _ claim that @xmath175 ; indeed , this may not be true .",
    "it is easy to see that the inclusion @xmath176 holds . indeed , since @xmath177 , it is evident that any @xmath178 satisfies all the local constraints of @xmath171 , and hence is in @xmath174",
    ". therefore , @xmath179 , and in particular , @xmath180 .",
    "the reverse inclusion , @xmath181 , follows from part ( a ) of the lemma below .",
    "let @xmath182 be a global configuration in @xmath174 .",
    "then ,    * @xmath183 ; and * @xmath184 if and only if @xmath185 .    [ gbar_lemma1 ]    we defer the proof of the lemma to appendix  [ gbar_lemmas_app ] . lemma  [ gbar_lemma1](a ) shows that @xmath181 , thus proving that @xmath171 is a tree realization of @xmath0 .",
    "it remains to show that @xmath111 is essential , _",
    "i.e. _ , that @xmath172 for all @xmath65 .",
    "this is shown by the following simple argument .",
    "we have already seen that @xmath186 , and hence , @xmath187 for all @xmath65 . on the other hand , at any @xmath65 , @xmath188 is , by definition , a subspace of @xmath162 .",
    "hence , @xmath171 is essential , thus proving our original claim , which we record in the following proposition .",
    "the tree model @xmath171 is an essential tree realization of @xmath0 .",
    "[ gbar_prop ]    let us call the process described above of obtaining @xmath171 from @xmath111 as the _ state - merging process at edge @xmath169_. we use the notation @xmath189 to denote this transformation .",
    "our goal now is to show that , starting from an essential tree realization , if we apply the state - merging process at each edge of the underlying tree , then we always end up with a minimal realization .",
    "a proof of this assertion requires the following technical lemma , whose proof we also defer to appendix  [ gbar_lemmas_app ] .",
    "suppose that there exists @xmath190 such that the full behavior , @xmath80 , of @xmath111 satisfies the following property : for @xmath101 , we have @xmath191 if and only if @xmath192 .",
    "then , for any @xmath193 , we also have @xmath194 if and only if @xmath195 .",
    "[ gbar_lemma2 ]    we are now in a position to prove the main result of this section , which provides a construction of @xmath129 via state merging .",
    "let @xmath111 be a tree realization of @xmath0 that extends the tree decomposition @xmath62 .",
    "let @xmath196 be a listing of the edges of @xmath46 .",
    "set @xmath197 , and for @xmath198 , set @xmath199 .",
    "then , @xmath200 is the minimal tree realization @xmath129 .",
    "[ merge_theorem ]",
    "let @xmath80 denote the full behavior of @xmath111 ( and hence , also of @xmath113 ) , and for @xmath198 , let @xmath201 denote the full behavior of @xmath202 . by proposition  [ gbar_prop ] , each @xmath202 is an essential tree realization of @xmath0 .    by lemma  [ gbar_lemma1](b ) , for any @xmath203",
    ", we have @xmath204 if and only if @xmath205 .",
    "furthermore , by lemma  [ gbar_lemma2 ] , for any @xmath206 , @xmath207 satisfies the following property :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ for any @xmath208 , we have @xmath204 if and only if @xmath205 . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    in particular , @xmath209 satisfies the following property for @xmath198 :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ for any @xmath210 , we have @xmath204 if and only if @xmath205 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    let us call the above property ( p ) .",
    "property ( p ) has two important consequences .",
    "firstly , it implies that if @xmath210 is such that @xmath211 , then @xmath212 for all @xmath65 .",
    "this means that the projection @xmath213 defined by @xmath214 is in fact an isomorphism .    for the second consequence of ( p ) ,",
    "consider , for any @xmath65 , the homomorphism @xmath215 defined by @xmath216 .",
    "this map is well - defined since @xmath217 is an isomorphism .",
    "property ( p ) is equivalent to the assertion that , for any @xmath65 , the kernel of @xmath218 is precisely @xmath219 .",
    "therefore , @xmath220 .",
    "thus , for each @xmath65 , state space @xmath221 is isomorphic to @xmath118 defined in ( [ se*_def ] ) , and the map @xmath218 is the canonical projection map @xmath222 given by ( [ se*_def ] ) .",
    "it easily follows that for each @xmath51 , @xmath223 is isomorphic to @xmath134 defined in ( [ cv*_def ] ) .",
    "hence , @xmath224 is the minimal realization @xmath129 .",
    "observe that at each step of the procedure outlined in theorem  [ merge_theorem ] , the dimensions of the state spaces and the local constraints do not increase . to make this precise , given tree models @xmath225 and @xmath226 , let us say that @xmath227",
    "if @xmath228 for all @xmath65 , and @xmath229 for all @xmath51 . then , for @xmath111 and @xmath202 , @xmath230 , as in the statement of theorem  [ merge_theorem ] , we have by virtue of ( [ dimse_ineq ] ) and ( [ dimcv_ineq ] ) , @xmath231 thus , we have that if @xmath111 is any tree realization of @xmath0 that extends the tree decomposition @xmath62 , then @xmath232 .",
    "we record this strong property of minimal realizations as a corollary to theorem  [ merge_theorem ] .",
    "let @xmath62 be a tree decomposition of the index set of a code @xmath0 , and let @xmath233 be the corresponding minimal tree realization of @xmath0 .",
    "then , for any tree realization , @xmath71 , of @xmath0 that extends @xmath62 , we have @xmath115 for all @xmath65 , and @xmath146 for all @xmath51 . [ dimcv_cor ]",
    "the procedure outlined in theorem  [ merge_theorem ] does not translate to an efficient algorithm for the construction of @xmath129 .",
    "this is because the state - merging procedure that creates @xmath202 from @xmath234 requires knowledge of the full behavior of @xmath234 , which may not be easily determined .",
    "so , as a practical method for constructing @xmath129 , given @xmath0 and @xmath62 , we propose a novel construction that relies upon the code decomposition techniques of the next section .",
    "in previous work @xcite , it was demonstrated that techniques from the decomposition theory of matroids @xcite,@xcite could be put to good use in a coding - theoretic setting .",
    "the decomposition theory in that work was presented in the context of binary linear codes . as we will now show",
    ", the basic elements of that theory can be easily extended to cover the case of nonbinary codes as well .",
    "the object of this exercise is not just to create a more general code decomposition theory , but as we will see in the next section , this decomposition theory ties in very nicely with the theory of tree realizations .",
    "let @xmath33 and @xmath34 be linear codes over the finite field @xmath235 , defined on the index sets @xmath35 and @xmath36 , respectively .",
    "let @xmath236 denote the symmetric difference , @xmath237 , of the index sets .",
    "we will construct a code @xmath238 with @xmath236 as its index set . for @xmath239 and @xmath240 , let @xmath241 be defined by @xmath242 setting @xmath243 , we see that @xmath244 has @xmath38 as its index set .",
    "we take @xmath238 to be the cross - section @xmath245 .",
    "note that when @xmath246 , we have @xmath247 .    for @xmath248 ,",
    "let @xmath249 and @xmath250 denote the projection @xmath251 and the cross - section @xmath252 , respectively .",
    "the codes @xmath249 and @xmath250 , for @xmath248 , all have @xmath253 as their index set .",
    "the dimension of @xmath238 can be expressed in terms of the codes @xmath254 , @xmath249 and @xmath250 , @xmath255 , as stated in the following lemma .    for codes",
    "@xmath256 , we have @xmath257 where @xmath258 .",
    "[ dim_sum_prop ]    for a code @xmath0 , and a subset @xmath19 of its index set , the kernel of the projection map @xmath28 is isomorphic to @xmath22 , and hence , @xmath30 .",
    "thus , taking @xmath259 , and @xmath260 , we find that @xmath261 since @xmath262 .",
    "so , we must show that @xmath263 .",
    "let @xmath264 be a copy of @xmath34 defined on an index set that is disjoint from @xmath35 .",
    "for each @xmath265 , denote by @xmath266 its copy in @xmath264 .",
    "consider the homomorphism @xmath267 defined by @xmath268 .",
    "note that @xmath269 iff @xmath270 and @xmath271 .",
    "equivalently , @xmath269 iff @xmath272 , @xmath273 , and @xmath274 .",
    "it follows that the kernel of @xmath275 is isomorphic to @xmath276 which is simply @xmath277 .",
    "hence , @xmath278 , as desired .",
    "we will restrict our attention to a particular instance of the @xmath238 construction , in which we require that the codes @xmath249 and @xmath250 , @xmath248 , take on a specific form .",
    "we need to introduce some notation first . for each positive integer @xmath279 ,",
    "set @xmath280 , and fix an @xmath281 matrix , which we denote by @xmath282 , over @xmath283 , with the property that each pair of columns of @xmath282 is linearly independent over @xmath283 .",
    "note that @xmath282 is a parity - check matrix for an @xmath284 $ ] hamming code over @xmath283 ( cf .",
    "let @xmath285 denote the dual of this hamming code , _",
    "i.e. _ , @xmath285 is the @xmath286 $ ] code over @xmath283 _ generated _ by @xmath282 .",
    "the code @xmath285 is sometimes referred to as a _ simplex code_.    we take a moment to record an important property of the matrix @xmath282 that we will use later .",
    "the column vectors of @xmath282 form a maximal subset of @xmath287 with the property that each pair of vectors from the subset is linearly independent over @xmath283 .",
    "this is due to the fact that the number of distinct one - dimensional subspaces of @xmath287 is precisely @xmath288 .",
    "therefore , any ( column ) vector in @xmath287 is a scalar multiple of some column of @xmath282 .    given an @xmath289 , suppose that the codes @xmath33 and @xmath34 , defined on the index sets @xmath35 and @xmath36 , respectively , are such that @xmath290 , and for @xmath248 , we have @xmath291 and @xmath292 . in such a case , @xmath238 is called the _ @xmath279-sum _ of @xmath33 and @xmath34 , and is denoted by @xmath293 .",
    "it is convenient to extend this definition to the case of @xmath294 as well : when @xmath295 , the @xmath296-sum @xmath297 is defined to be the direct sum @xmath298 .",
    "consider the case of codes defined over the binary field @xmath299 .",
    "note that @xmath300 .",
    "suppose that @xmath301 , and that the coordinates of @xmath33 are @xmath34 are ordered so that the index common to @xmath35 and @xmath36 corresponds to the last coordinate of @xmath33 and the first coordinate of @xmath34 .",
    "the conditions necessary for the 1-sum @xmath302 to be defined can then be stated as    * @xmath303 is not a codeword of @xmath33 , and the last coordinate of @xmath33 is not identically zero ; * @xmath304 is not a codeword of @xmath34 , and the first coordinate of @xmath34 is not identically zero .",
    "the composite code @xmath238 resulting from @xmath305 that satisfy ( p1 ) , ( p2 ) above was studied in @xcite , where it was actually called a `` 2-sum '' .",
    "we would also like to point out that the specialization of our @xmath279-sum operation to the case @xmath306 was called `` @xmath307-sum '' in @xcite .- sum operations defined in @xcite imposed additional conditions on the lengths of the codes involved in the sum , which we have dropped here . ] to add to the confusion , there was in fact an operation called `` 3-sum '' defined in @xcite , but that , in a certain sense , dualizes the 2-sum operation we have given in this paper .    for @xmath289 , note that if @xmath249 and @xmath250 ( @xmath248 ) are in the form needed to define an @xmath279-sum , then @xmath308 , and @xmath309 .",
    "therefore , as a corollary to proposition  [ dim_sum_prop ] , we have the following result ( which also applies trivially to the @xmath294 case ) .    for @xmath310 ,",
    "if @xmath33 , @xmath34 are such that @xmath293 can be defined , then @xmath311 [ dim_rsum_cor ]    an elementary property of direct sums ( _ i.e. _ , 0-sums ) is that a code @xmath0 is expressible as a direct sum of smaller codes if and only if there exists a partition @xmath312 of the index set of @xmath0 such that @xmath313 .",
    "this property extends beautifully to @xmath279-sums in general .",
    "let @xmath0 be a linear code over @xmath283 , defined on the index set @xmath3 , and let @xmath279 be a positive integer .",
    "then , the following statements are equivalent .",
    "* @xmath314 for some codes @xmath33 , @xmath34 .",
    "* there exists a partition @xmath312 of @xmath3 , with @xmath315 , such that @xmath316    [ rsum_theorem ]    : see appendix  [ rsum_app ] .",
    "+ : we give here a complete proof of this direction of the theorem , as it gives an explicit construction of codes @xmath33 , @xmath34 such that @xmath314 , given a partition @xmath312 as in ( b ) .",
    "the proof generalizes ideas from similar constructions presented in @xcite .",
    "let @xmath312 be a partition of @xmath3 such that @xmath317 .",
    "set @xmath318 and @xmath319 , and let @xmath320 be a @xmath321 generator matrix for @xmath0 . without loss of generality , we may assume that the columns of @xmath320 are ordered so that the first @xmath322 columns are indexed by the elements of @xmath19 , and the rest by the elements of @xmath323 .",
    "in the following exposition , we will often permute the columns of @xmath320 to bring the matrix into some desired form .",
    "whenever this is the case , it will be tacitly assumed that column indices migrate with the columns .",
    "let @xmath324 and @xmath325 denote the restrictions of @xmath320 to the columns indexed by the elements of @xmath19 and @xmath323 , respectively ; thus , @xmath326 $ ] .",
    "let @xmath327 and @xmath328 ; by our assumption on @xmath312 , we have we have @xmath329 .",
    "bring @xmath320 into reduced row - echelon form ( rref ) over @xmath283 .",
    "permuting within the columns of @xmath324 and within those of @xmath330 if necessary , @xmath331 may be assumed to be of the form @xmath332 , \\label{rref_eq}\\ ] ] where @xmath333 , for @xmath334 , denotes the @xmath335 identity matrix , @xmath43 is a @xmath336 matrix , @xmath337 is a @xmath338 matrix , @xmath339 is a @xmath340 matrix , and the @xmath341 s denote all - zeros matrices of appropriate sizes .",
    "the fact that the submatrix @xmath342 $ ] must have rank equal to @xmath328 implies that @xmath337 must have rank @xmath343 .",
    "hence , @xmath337 has @xmath279 linearly independent rows , call them @xmath344 , which form a basis of the row - space of @xmath337 . permuting the first @xmath345 rows of @xmath346 if necessary",
    ", we may assume that @xmath344 constitute the first @xmath279 rows of @xmath337 .",
    "( permuting these rows of @xmath346 will also permute the rows of the @xmath347 matrix , but the effects of this can be negated by appropriately permuting the first @xmath345 columns of @xmath346 . )",
    "any row of @xmath337 is uniquely expressible as a linear combination ( over @xmath283 ) of @xmath348 . in particular , for @xmath349 , the @xmath350th row of @xmath337 can be uniquely expressed as @xmath351 for some @xmath352 .",
    "let us denote by @xmath353 , the rows of the @xmath281 generator matrix , @xmath282 , of the code @xmath285 .",
    "let @xmath354 be the @xmath355 matrix such that for @xmath349 , the @xmath350th row of @xmath354 equals @xmath356 , where the @xmath357 s are such that the @xmath350th row of @xmath337 is @xmath351 .",
    "thus , the row - space of @xmath354 is the span of @xmath358 , _",
    "i.e. _ , it is the code @xmath285 . to the columns of @xmath354 , we assign indices from some set @xmath359 disjoint from @xmath3 .",
    "now , define the @xmath360 matrix g_1 = , [ g1_def ] allowing the submatrix @xmath361 $ ] to retain its column indices from @xmath346 . also , define the @xmath362 matrix g_2 = , [ g2_def ] again allowing the submatrix @xmath342 $ ] to retain its column indices from @xmath346 .",
    "thus , the index set of the columns of @xmath363 is @xmath364 , while that of the columns of @xmath365 is @xmath366 .",
    "finally , for @xmath248 , let @xmath254 denote the code over @xmath283 generated by @xmath367 .",
    "the following facts about @xmath33 and @xmath34 may be verified :    * @xmath368 , @xmath248 .",
    "* @xmath293 can be defined , so that by corollary  [ dim_rsum_cor ] , @xmath369 . *",
    "all rows of @xmath346 are in @xmath293 .",
    "since @xmath346 generates the same code as @xmath320 ( recall that column indices get permuted along with columns ) , we see that @xmath293 contains all the codewords of @xmath0 .",
    "we leave the details of the routine verification of the above facts to the reader .",
    "it only remains to point out that facts ( ii ) and ( iii ) above show that @xmath370 , thus completing the proof of the implication ( b ) @xmath371 ( a ) .",
    "the procedure described in the above proof can be formalized into an algorithm that takes as input a @xmath321 generator matrix @xmath320 ( over @xmath283 ) for @xmath0 , and a partition @xmath312 of the index set of @xmath0 , and produces as output generator matrices of two codes @xmath33 and @xmath34 ( and their associated index sets ) such that @xmath314 , where @xmath372 .",
    "the run - time complexity of this procedure is determined by the following :    * an rref computation to find @xmath346 as in ( [ rref_eq ] ) ; this can be carried out in @xmath373 time , which is the run - time complexity of bringing a @xmath321 matrix to reduced row - echelon form via elementary row operations ; * the computations required to identify a basis ( @xmath348 ) of the row - space of the matrix @xmath337 , and correspondingly the coefficients @xmath357 ; this could be done by computing the rref of @xmath337 , which would also take @xmath373 time ; * the computations needed to determine the @xmath355 matrix @xmath354 ; each row of the matrix requires @xmath374 computations , and there are @xmath375 rows , so the computation of @xmath354 takes @xmath376 time .",
    "therefore , the entire procedure can be carried out in @xmath377 time .",
    "it is worth noting that the run - time complexity of the procedure is polynomial in @xmath14 , @xmath15 and @xmath378 , but exponential in @xmath279 .",
    "the above procedure for determining an @xmath279-rum decomposition of a given code forms the basis of a new construction of minimal tree realizations that we present in this section .",
    "the key observation behind this construction is that if a code @xmath0 has a partition @xmath312 of its index set such that @xmath379 , then @xmath0 has an essential tree realization of the form depicted in figure  [ rsum_fig ] .",
    "the tree in the figure consists of a single edge @xmath380 , the state space @xmath72 is the code @xmath285 , and the local constraint codes at the two vertices are the codes @xmath33 and @xmath34 such that @xmath370 . in fact",
    ", this is the minimal realization @xmath129 , for the tree @xmath46 consisting of the single edge @xmath380 , and the index map @xmath70 such that @xmath381 and @xmath382 .",
    "this is simply because @xmath383 , so by virtue of ( [ dimse*_alt ] ) , @xmath72 has the same dimension as the state space @xmath384 in the minimal realization @xmath129 .",
    "so , by the uniqueness of minimal tree realizations , the tree realization depicted in figure  [ rsum_fig ] is @xmath129 .    to summarize ,",
    "if @xmath0 is a code defined on the index set @xmath3 , and @xmath62 is a tree decomposition of @xmath3 such that @xmath46 consists of the single edge @xmath385 , then we may construct @xmath129 as follows .",
    "set @xmath386 and @xmath387 , and compute @xmath372 . assign an index set @xmath388 that is disjoint from @xmath3 to the code @xmath285 .",
    "use the procedure in the proof of theorem  [ rsum_theorem ] to determine codes @xmath33 and @xmath34 , defined on the respective index sets @xmath389 and @xmath390 , such that @xmath314 . for @xmath255 , assign @xmath254 to be the local constraint code at vertex @xmath391 , and assign @xmath285 to be the state space at edge @xmath54 .",
    "the resulting tree model @xmath392 is the minimal tree realization @xmath129 .    before describing how the construction may be extended to the case of trees with more than one edge",
    ", we deal with the trivial case of trees without any edges .",
    "if @xmath46 is a tree consisting of a single vertex @xmath52 , and no edges , then given any code @xmath0 defined on some index set @xmath3 , there is only one way of realizing @xmath0 on @xmath46 .",
    "this is the realization @xmath393 , where @xmath70 is the unique mapping @xmath394 , and @xmath73 is the code @xmath0 itself .",
    "of course , this is also the minimal realization @xmath129 .    at this point , we know how to construct @xmath129 , for any code @xmath0 , and any tree decomposition @xmath62 such that @xmath46 has at most one edge .",
    "from this , we can recursively construct @xmath129 for any @xmath0 and any @xmath62 , as we now describe .",
    "suppose that we know how to construct @xmath129 for any @xmath0 , and any @xmath62 such that @xmath46 has at most @xmath395 edges , for some integer @xmath396 .",
    "let @xmath0 be a code defined on the index set @xmath3 , and let @xmath62 be a tree decomposition such that @xmath397 . pick any @xmath398 , and as usual , let @xmath399 and @xmath400 be the two components of @xmath401 .",
    "we will assume that @xmath402 and @xmath403 .",
    "let @xmath404 and @xmath405 .",
    "compute r = ( |_j ( ) ) + ( | _ ( ) ) - ( ) , [ r_def ] which determines the code @xmath285 .",
    "assign @xmath285 an index set @xmath388 that is disjoint from @xmath3 . use the procedure in the proof of theorem  [ rsum_theorem ] to determine codes @xmath33 and @xmath34 , defined on the respective index sets @xmath406 and @xmath407 , such that @xmath408 .",
    "now , define the index maps @xmath409 and @xmath410 as follows ( see figure  [ rec_constr_fig ] ) : @xmath411 thus , @xmath412 and @xmath413 are tree decompositions of the index sets of @xmath33 and @xmath34 , respectively . as neither @xmath414 nor @xmath415 contains the edge @xmath169 , we have @xmath416 and @xmath417 .",
    "therefore , by our assumption , we know how to construct @xmath418 and @xmath419 .",
    "let @xmath420    finally , set @xmath421 , where _ e =    _ e^(1 ) , & e e(t _ ) + _ r , & e = + _ e^(2 ) , & e e ( _ ) ,    [ se_def ] and c_v =    c_v^(1 ) , & v v(t _ ) + c_v^(2 ) , & v v ( _ ) .",
    "[ cv_def ]    figure  [ gamma_star ] contains a depiction of @xmath422 .",
    "it is easy to see that @xmath422 is a tree realization of @xmath0 .",
    "indeed , @xmath418 is a realization of @xmath33 , and @xmath419 is a realization of @xmath34 , and hence ( as should be clear from figure  [ gamma_star ] ) , @xmath422 is a realization of @xmath370 .",
    "it is not immediately obvious that @xmath422 is actually @xmath129 , but this is in fact true , as stated in the following proposition , a proof of which is given in appendix  [ rec_constr_app ] .",
    "@xmath422 is the minimal tree realization @xmath129 .",
    "[ rec_constr_prop ]    in summary , we have the following recursive procedure for constructing @xmath129 , given a code @xmath0 and a tree decomposition @xmath62 .",
procedure * ` min_realzn`(@xmath423 ) + _ input _ : a @xmath321 generator matrix for a code @xmath0 , and a tree decomposition @xmath62 of the index set of @xmath0 .",
    "+ _ output _ : a specification of the state spaces and the local constraints in the minimal realization @xmath129 . +",
    "* step m1*. if @xmath46 consists of a single vertex , then return @xmath424 . +",
    "* step m2*. if @xmath46 contains at least one edge , then choose an @xmath425 .",
    "let @xmath426 be the vertex of @xmath399 incident with @xmath169 , and let @xmath427 be the vertex of @xmath400 incident with @xmath169 .",
    "+ ( m2.1 )  compute @xmath428 .",
    "+ ( m2.2 )  determine @xmath285 , and assign it an index set @xmath388 disjoint from @xmath429 .",
    "+ ( m2.3 )  determine codes @xmath33 and @xmath34 , with index sets @xmath406 and @xmath407 , respectively , such that @xmath408 .",
    "+ ( m2.4 )  determine the index maps @xmath430 and @xmath431 as in ( [ omega1_def ] ) and ( [ omega2_def ] ) .",
    "+ * step m3*. determine @xmath418 by calling ` min_realzn`(@xmath432 ) ; determine @xmath419 by calling ` min_realzn`(@xmath433 ) .",
    "we may assume that @xmath418 and @xmath419 are in the form given in ( [ minc1_form ] ) and ( [ minc2_form ] ) .",
    "+ * step m4*. return @xmath434 , where @xmath72 and @xmath73 are as defined in ( [ se_def ] ) and ( [ cv_def ] ) .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    a simplified version of the above procedure may be obtained by choosing , in step m2 , the edge @xmath169 to be an edge incident with a leaf of @xmath46 .",
    "then , one of the two components of @xmath435 , say , @xmath400 , consists of a single vertex , so that the call to ` min_realzn`(@xmath436 ) may be avoided , as it would simply return @xmath437 .",
    "we will use this modification of the procedure to give an estimate of its run - time complexity .",
    "let @xmath14 denote the length of @xmath0 , let @xmath319 , and let @xmath438 .",
    "also , define r _",
    "= _ e e  ( |_j(e ) ) + ( |_(e ) ) - ( ) .",
    "[ rmax_eq ] observe that , as a result of the modification suggested above , in the determination of @xmath129 , the procedure ` min_realzn ` gets called @xmath439 times , once for each edge @xmath65 .",
    "the run - time complexity of any particular run of ` min_realzn ` is determined by the computations in step m2 . in the @xmath350th run ,",
    "the procedure acts upon some code @xmath440 of length @xmath441 and dimension @xmath442 , and in step m2 , it computes an @xmath443 , a code @xmath444 with index set @xmath445 , and a code @xmath446 . via lemma",
    "[ appd_lemma ] , we have that @xmath447 .",
    "we bound @xmath442 and @xmath441 as follows .",
    "note that @xmath446 is the code @xmath448 that the @xmath449th run of the procedure takes as input .",
    "thus , we have @xmath450 , and @xmath451 . since @xmath452 , @xmath453 , and @xmath454",
    ", we have , for @xmath455 , @xmath456 and @xmath457 .",
    "now , by the estimate given in section  [ decomp_section ] of the run - time complexity of the @xmath279-sum decomposition procedure , we see that the @xmath350th run of step m2 of ` min_realzn ` takes @xmath458 time .",
    "hence the overall run - time complexity of ` min_realzn ` may be estimated to be @xmath459 .",
    "this expression can be simplified by observing that @xmath460 \\\\ & = & ( k^2 + r_{\\max}q^{r_{\\max } } ) \\ ,   \\left[n|e| + ( 1/2)|e|(|e|-1)q^{r_{\\max}}\\right].\\end{aligned}\\ ] ] it follows that ` min_realzn ` runs in @xmath461 time .",
    "note that this is polynomial in @xmath14 , @xmath15 , @xmath378 and @xmath439 , but exponential in @xmath462 .",
    "as observed in @xcite , any graphical realization of a code specifies an associated decoding algorithm , namely , the sum - product algorithm . the sum - product algorithm specified by a tree realization",
    ", @xmath463 , of a code @xmath0 provides an exact implementation of ml decoding for @xmath0 . a reasonable initial estimate of the computational complexity of the sum - product algorithm on @xmath111 is provided by the _ constraint complexity _ of @xmath111 , which is defined as @xmath464 .",
    "as implied by corollary  [ dimcv_cor ] , given a tree decomposition @xmath62 of the index set of @xmath0 , the minimal realization @xmath129 has the least constraint complexity among all tree realizations of @xmath0 that extend @xmath62 .",
    "let @xmath465 denote the constraint complexity of @xmath129 .",
    "note that , by ( [ dimcv * ] ) , ( ; t , ) = _ v v ( ( ) - _ e e(v ) ( _ j(e ) ) ) .",
    "[ k_ct_omega ] thus , @xmath465 is a measure of the complexity of implementing ml decoding for @xmath0 as a sum - product algorithm on @xmath129 .",
    "let us now define the _ treewidth _ of the code @xmath0 to be ( ) = _ ( t , ) ( ; t , ) , [ treewidth_def_0 ] where the minimum is taken over all tree decompositions @xmath62 of the index set of @xmath0 .",
    "the treewidth of a code is an indicator of how small the computational complexity of an ml decoding algorithm for @xmath0 can be .",
    "the notion of treewidth ( _ i.e. , _ minimal constraint complexity ) of a code was first introduced by forney @xcite . a related notion , called minimal tree complexity ,",
    "was defined and studied by halford and chugg @xcite .",
    "treewidth , as defined in ( [ treewidth_def_0 ] ) , is an upper bound on the minimal tree complexity measure of halford and chugg .",
    "a tree is called _ cubic _ if all its internal nodes have degree 3 .",
    "forney @xcite showed that the minimum in ( [ treewidth_def_0 ] ) is always achieved by a tree decomposition @xmath62 in which @xmath46 is a cubic tree , and @xmath70 is a bijection may be taken to be such that @xmath46 is a cubic tree and @xmath70 is a surjective map onto the leaves of @xmath46 .",
    "however , the symbol - splitting argument in section  v.f of his paper actually implies that @xmath70 in the minimizing tree decomposition may be taken to be one - to - one as well . ] between the index set of @xmath0 and the set of leaves of @xmath46 .",
    "let @xmath466 denote the set of all tree decompositions @xmath62 in which @xmath46 is cubic and @xmath70 maps the index set of @xmath0 bijectively onto the set of leaves of @xmath46 .",
    "we may then re - write ( [ treewidth_def_0 ] ) as ( ) = _ ( t , ) ( ) ( ; t , ) .",
    "[ treewidth_def ]    an alternate measure of code complexity may be obtained from the notion of _ state complexity _ of a tree realization @xmath111 , which is the largest dimension of a state space in @xmath111 .",
    "thus , by virtue of ( [ dimse * ] ) and ( [ dimse*_alt ] ) , the state complexity of a minimal realization @xmath129 is given by @xmath467 we then define , in analogy with ( [ treewidth_def ] ) , ( ) = _ ( t , ) ( ) ( ; t , ) .",
    "[ branchwidth_def ] note that the minimum in the above definition is taken over tree decompositions in @xmath466 only .",
    "it must be emphasized that @xmath468 , as defined in ( [ branchwidth_def ] ) , need _ not _ be the same as the least @xmath469 over all tree decompositions @xmath62 of the index set of @xmath0 .",
    "a notion analogous to @xmath468 is known as branchwidth in the matroid theory literature ; see _ e.g. _ , @xcite . in keeping with that nomenclature ,",
    "we will call @xmath468 the _ branchwidth _ of the code @xmath0 .",
    "branchwidth and treewidth are very closely related , as shown by the following result , which can be obtained in a straightforward manner from the bounds in lemma  [ dimcv*_bnd ] .    given a code @xmath0 , if @xmath470 , then @xmath471 hence , @xmath472 .",
    "[ bw_tw_bnds ]    the notions of state and constraint complexity have been studied extensively in the context of conventional trellis realizations of a code ; see _ e.g. _ , @xcite .",
    "recall from example  [ trellis_example ] that a conventional trellis realization of a code is a tree realization that extends a tree decomposition @xmath62 in which @xmath46 is a simple path and @xmath70 is a bijection between the index set of @xmath0 and the vertices of @xmath46 .",
    "this special case of a tree decomposition is referred to as a _ path decomposition_. specifically , a path decomposition of a code @xmath0 defined on the index set @xmath3 is a pair @xmath62 , where @xmath46 is a simple path on @xmath473 vertices , and @xmath85 is a bijection .",
    "let @xmath474 denote the set of all path decompositions of @xmath0 .",
    "we then define _",
    "( ) = _ ( t , ) ( ) ( ; t , ) [ k_trellis_def ] and _ ( ) = _ ( t , ) ( ) ( ; t , ) . [ s_trellis_def ] it is well - known , and indeed readily follows from lemma  [ dimcv*_bnd ] , that @xmath475 .",
    "it is clear from ( [ treewidth_def_0 ] ) and ( [ k_trellis_def ] ) that @xmath476 .",
    "forney @xcite asked the question of whether @xmath477 could be significantly smaller than @xmath478 .",
    "he conjectured that either @xmath479 for all codes @xmath0 , or @xmath480 is unbounded .",
    "we show here that it is in fact the latter that is true .",
    "to do so , we need to introduce some new concepts .",
    "in their fundamental work on graph minors @xcite , robertson and seymour introduced two notions of complexity of graphs , namely , treewidth and pathwidth .",
    "these notions have proved to be invaluable tools with many applications in graph theory and theoretical computer science .",
    "an overview of such applications can be found , for example , in @xcite .",
    "we will define the notions of treewidth and pathwidth of a graph in this subsection , and subsequently , relate them to the complexity measures @xmath477 and @xmath478 defined above for codes .",
    "let @xmath1 be a graph with vertex set @xmath481 and edge set @xmath482 .",
    "the graph may contain self - loops and parallel edges .",
    "a _ tree decomposition _ of @xmath1 is a pair @xmath483 , where @xmath46 is a tree , and @xmath484 is a mapping that satisfies the following :    * @xmath485 ; * for each pair of adjacent vertices @xmath486 , we have @xmath487 for some @xmath488 ; and * for each pair of vertices @xmath489 , if @xmath490 is any vertex on the unique path between @xmath491 and @xmath492 , then @xmath493 .",
    "it may be helpful to point out that ( t3 ) above is equivalent to the following :    * for each @xmath494 , the subgraph of @xmath46 induced by @xmath495 is a ( connected ) subtree of @xmath46 .    a reader familiar with the notion of `` junction trees '' ( see _ e.g. _ , @xcite ) will recognize a tree decomposition of @xmath1 to be a junction tree .",
    "the _ width _ of a tree decomposition @xmath483 as above is defined to be @xmath496 .",
    "the _ treewidth _ of @xmath1 , which we denote by @xmath497 , is the minimum among the widths of all its tree decompositions .",
    "note that if @xmath1 has at least one edge , then , because of ( t2 ) , any tree decomposition of @xmath1 must have width at least one .",
    "thus , for any graph @xmath1 with @xmath498 , we have @xmath499 .    for any tree @xmath46 with at least two vertices , we have @xmath500 .",
    "this can be seen as follows .",
    "fix a vertex @xmath501 .",
    "define a mapping @xmath502 as follows : @xmath503 , and for @xmath504 , @xmath505 , where @xmath506 is the first edge on the unique path from @xmath491 to @xmath279 .",
    "it is easily verified that @xmath483 is a tree decomposition of @xmath46 .",
    "since this tree decomposition has width one , it follows that @xmath500 .",
    "[ treewidth_example1 ]    if @xmath483 is a tree decomposition in which @xmath46 is a simple path , then @xmath483 is called a _",
    "path decomposition_. the minimum among the widths of all the path decompositions of @xmath1 is called the _ pathwidth _ of @xmath1 , which we denote by @xmath507 .",
    "it is evident that @xmath508 .",
    "analogous to the situation of example  [ treewidth_example1 ] , a simple path has pathwidth one .",
    "however , trees may have arbitrarily large pathwidth .",
    "the following example is due to robertson and seymour @xcite .",
    "let @xmath509 be the complete bipartite graph @xmath510 .",
    "for @xmath511 , we inductively define @xmath512 by taking a copy of @xmath513 , and to each leaf @xmath52 of this graph , adding two new vertices adjacent to @xmath52 .",
    "figure  [ y_trees ] shows the trees @xmath509 ,",
    "@xmath514 and @xmath515 .",
    "the pathwidth of @xmath512 , @xmath516 , is @xmath517 @xcite .",
    "[ treewidth_example2 ]    thus , for trees @xmath46 , the difference @xmath518 can be arbitrarily large .",
    "we will use this fact to construct codes @xmath0 for which @xmath480 is arbitrarily large .",
    "we remark that the problem of determining the treewidth or pathwidth of a graph is known to be np - hard @xcite,@xcite .",
    "as we will see a little later , this implies that the problem of determining the treewidth of a code , or its trellis counterpart , is also np - hard .",
    "let @xmath2 be an arbitrary finite field . to any given graph @xmath1 , we will associate a code @xmath519 $ ] over @xmath2 as follows .",
    "let @xmath520 be any directed graph obtained by arbitrarily assigning orientations to the edges of @xmath1 , and let @xmath521 be the vertex - edge incidence matrix of @xmath520 .",
    "this is the @xmath522 matrix whose rows and columns are indexed by the vertices and directed edges , respectively , of @xmath520 , and whose @xmath523th entry , @xmath524 , is determined as follows : @xmath525 the code @xmath519 $ ] is defined to be the linear code over @xmath2 generated by the matrix @xmath521 . when @xmath2 is the binary field , the code @xmath519 $ ] is the _ cut - set code _ of @xmath1 , _",
    "i.e. _ , the dual of the cycle code of @xmath1 @xcite .    the following fundamental result that relates the treewidths of the graph @xmath1 and the code @xmath519 $ ] is due to hlinn and whittle @xcite .",
    "if @xmath1 is a graph with at least one edge , then @xmath526)$ ] .",
    "[ treewidth_theorem ]    since determining the treewidth of a graph is np - hard , it immediately follows from the above theorem that the problem of determining the treewidth of a code ( over any fixed finite field ) is also np - hard .",
    "we remark that the problem of determining the branchwidth of a code is also np - hard .",
    "this follows from a result @xcite that relates the branchwidth of the code @xmath519 $ ] to the branchwidth of the graph @xmath1 , the latter being a notion we have not defined in this paper .",
    "unfortunately , it is not true that @xmath527)$ ] . as an example , consider the code @xmath528 $ ] over the binary field , for an arbitrary tree @xmath46 .",
    "it is not hard to see that @xmath528 = \\{0,1\\}^{|e(t)|}$ ] which , being the direct sum of multiple copies of @xmath529 , has @xmath530 ) = 1 $ ] .",
    "but as we have already noted , trees can have arbitrarily large pathwidth .",
    "we get around this problem by means of a suitable transformation of graphs . given a graph @xmath1 ,",
    "let @xmath531 be a graph defined on the same vertex set as @xmath1 , having the following properties ( see figure  [ gbar ] ) :    * @xmath531 is loopless ; * a pair of distinct vertices is adjacent in @xmath531 iff it is adjacent in @xmath1 ; and * in @xmath531 , there are exactly two edges between each pair of adjacent vertices .",
    "define @xmath532 to be the graph obtained by adding an extra vertex , @xmath491 , to @xmath531 , along with a pair of parallel edges from @xmath491 to each @xmath533 ( see figure  [ gbar ] ) .",
    "it is easy to see that @xmath532 is constructible directly from @xmath1 in @xmath534 time .",
    "the following result was used in @xcite to show that the problem of determining @xmath535 for an arbitrary code @xmath0 ( over any fixed finite field ) is np - hard .",
    "if @xmath532 is the graph constructed from a given graph @xmath1 as described above , then @xmath536 ) = \\k_\\path(\\cg ) + 1 $ ] .",
    "[ pathwidth_theorem ]    since @xmath535 is always within one of @xmath478 , the above theorem implies that _ ( ) + 1 _ ( ) _ ( ) + 2 .",
    "[ k_trellis_bnd ] while this falls short of establishing the np - hardness of computing @xmath478 for an arbitrary code @xmath0 , it is certainly enough to provide us with the desired example of codes @xmath0 for which @xmath480 is arbitrarily large .",
    "we just need to make one more observation : @xmath537 .",
    "the proof of this fact , which is along the lines of the proof of lemma  3.5 in @xcite , is left to the reader as a straightforward exercise .",
    "we can now prove the following corollary to theorems  [ treewidth_theorem ] and [ pathwidth_theorem ] .",
    "over any finite field @xmath2 , there exists a family of codes @xmath254 , @xmath538 , such that @xmath539 [ pathwidth_cor ]    let @xmath512 , @xmath540 , be the family of trees defined in example  [ treewidth_example2 ] .",
    "define @xmath541 $ ] , where @xmath542 refers to the graph obtained from @xmath512 by the transformation depicted in figure  [ gbar ] .",
    "note that @xmath543 , since @xmath544 , as shown in example  [ treewidth_example1 ] .",
    "thus , on the one hand , from theorem  [ treewidth_theorem ] , we have @xmath545 . and on the other hand , from ( [ k_trellis_bnd ] ) and example  [ treewidth_example2 ]",
    ", we have @xmath546 .    using standard facts known about the incidence matrix @xmath521 for a graph @xmath1 ( see , for example , ( * ? ? ?",
    "* chapter  5 ) ) , it may be verified that the codes @xmath254 , @xmath516 , constructed in the above proof are @xmath547 $ ] codes , where @xmath548 note that @xmath549 grows as @xmath550 .",
    "we conjecture that this is in fact the maximal rate of growth of the difference @xmath549 for any code family @xmath254 .    if @xmath254 , @xmath516 , is any sequence of codes over @xmath2 , then @xmath551 where @xmath441 denotes the length of the code @xmath254 .",
    "[ conj1 ]    the codes @xmath254 constructed in the proof of corollary  [ pathwidth_cor ] all have treewidth equal to two .",
    "issues related to families of codes whose treewidth is bounded by a constant are discussed next .",
    "many np - hard combinatorial problems on graphs are known to be solvable in polynomial ( often , linear ) time when restricted to graphs of bounded treewidth @xcite,@xcite . in this subsection",
    ", we will see that the same general principle applies to problems pertaining to codes as well .",
    "let @xmath235 be a fixed finite field .",
    "given an integer @xmath552 , denote by @xmath553 ( resp .",
    "@xmath554 ) the family of all codes over @xmath283 of treewidth ( resp .",
    "branchwidth ) at most @xmath555 .",
    "thus , a family @xmath556 of codes over @xmath283 is said to have bounded treewidth ( resp .",
    "branchwidth ) if @xmath557 ( resp .",
    "@xmath558 ) for some integer @xmath555 . note that by proposition  [ bw_tw_bnds ] , @xmath559 , and so , a code family @xmath556 has bounded treewidth if and only if it has bounded branchwidth .    a fundamental result of coding theory @xcite states that the problem of ml decoding is np - hard for an arbitrary family of codes",
    ". however , we will now show that this problem becomes solvable in linear time for any code family of bounded treewidth .",
    "so , consider a code family @xmath557 , where @xmath555 is a _ fixed _",
    "integer , and pick an arbitrary @xmath560 .",
    "let @xmath14 denote the length of @xmath0 . by definition",
    ", @xmath0 has a minimal realization @xmath129 with constraint complexity at most @xmath555 .",
    "moreover , by ( [ treewidth_def ] ) , @xmath62 can be chosen to be in @xmath466 , _",
    "i.e. _ , it may be chosen so that @xmath46 is a cubic tree , and @xmath70 maps the index set of @xmath0 bijectively onto the leaves of @xmath46 .",
    "in particular , the number of leaves of @xmath46 equals the cardinality , @xmath14 , of the index set of @xmath0 .",
    "now , recall that ml decoding of @xmath0 may be implemented as a sum - product algorithm on any tree realization of @xmath0 , and in particular , on @xmath129 .",
    "the computational complexity of the sum - product algorithm on @xmath129 is determined by the computations that take place at the internal nodes of @xmath46 . by an estimate of forney (",
    "* theorem  5.2 ) , the number of computations at the internal node @xmath561 is of the order of @xmath562 , where @xmath563 is the degree of @xmath52 in @xmath46 . since @xmath46 is cubic , @xmath564 , and since the constraint complexity of @xmath129 is at most @xmath555 , we have @xmath565 . hence ,",
    "the number of computations performed by the sum - product algorithm at any internal node of @xmath46 is bounded by @xmath566 , which is a constant .",
    "now , @xmath46 is a cubic tree on @xmath14 leaves , so it has at most @xmath567 internal nodes .",
    "it follows that the computational complexity of the sum - product algorithm on @xmath129 is @xmath568 , the constant in the @xmath569-notation being proportional to @xmath566 .",
    "thus , there is a linear - time implementation of ml decoding for any @xmath560 .",
    "a question that naturally arises in this context is that of how hard it is to explicitly determine the minimal tree realization required for linear - time implementation of ml decoding . note that this is not exactly a decoding complexity issue , since the determination of a suitable @xmath129 may be done `` off - line '' for each @xmath560 .",
    "an explicit determination of @xmath129 involves finding a tree decomposition @xmath470 such that @xmath570 , and the specification of the state spaces and the local constraint codes of @xmath129 . given a @xmath470 satisfying @xmath570 ,",
    "the state spaces and local constraint codes of @xmath129 may be determined by the ` min_realzn ` procedure of section  [ new_construct_section ] .",
    "an estimate of the computational complexity of this procedure was given in that section , in terms of the length and dimension of @xmath0 , the number of edges in @xmath46 , and the quantity @xmath462 defined in ( [ rmax_eq ] ) .",
    "comparing ( [ rmax_eq ] ) with ( [ s_ct_omega ] ) , we see that @xmath462 is simply @xmath469 , which by proposition  [ bw_tw_bnds ] , is bounded from above by @xmath555 .",
    "the number of edges of @xmath46 is @xmath571 , and @xmath47 consists of @xmath14 leaves and at most @xmath567 internal nodes , @xmath14 being the length of @xmath0 .",
    "therefore , by the estimate of the computational complexity of ` min_realzn ` given in section  [ new_construct_section ] , for an @xmath13 $ ] code @xmath560 , and a @xmath470 such that @xmath570 , the minimal realization @xmath129 may be constructed in @xmath572 time . note that @xmath555 appears in the exponent of the constant implicit in the @xmath569-notation .",
    "this leaves us with the problem of finding , for a given code @xmath573 , a tree decomposition @xmath470 such that @xmath570 .",
    "unfortunately , there appears to be no efficient algorithm known for solving this problem .",
    "however , reasonably good algorithms do exist for solving a closely related problem : given a code @xmath574 , find a tree decomposition @xmath470 such that @xmath575 .",
    "several polynomial - time algorithms for solving this problem are given in @xcite , the most efficient of these being an algorithm that runs in @xmath576 time - notation depends exponentially on @xmath555 .",
    "] , @xmath14 being the length of @xmath0 .",
    "now , by proposition  [ bw_tw_bnds ] , any @xmath573 is also in @xmath554 , and furthermore , @xmath577 .",
    "therefore , the algorithms of @xcite find , for a given code @xmath573 , a tree decomposition @xmath470 such that @xmath578 .",
    "this is sufficient for our purposes , as the computational complexity of the sum - product algorithm on the resulting @xmath129 would still be @xmath568 , except that the constant in the @xmath569-notation would now be proportional to @xmath579 .",
    "while code families of bounded treewidth have the desirable property of having linear decoding complexity , it is very likely that they do not have good error - correcting properties .",
    "we give an argument to support the plausibility of this statement .",
    "recall from coding theory that a code family @xmath556 is called _ asymptotically good _ if there exists a sequence of @xmath547 $ ] codes @xmath580 , with @xmath581 , such that @xmath582 and @xmath583 are both strictly positive .",
    "the code family @xmath254 , @xmath516 , from the proof of corollary  [ pathwidth_cor ] has bounded treewidth , but is not asymptotically good : @xmath584 , but @xmath585 , as @xmath586 .",
    "it is known that if a code family @xmath556 has bounded trellis complexity , _",
    "i.e. _ , if there exists an integer @xmath555 such that @xmath587 for all @xmath560 , then @xmath556 is not asymptotically good .",
    "this is a consequence of the following bound for an @xmath17 $ ] code @xmath0 @xcite : _ ( ) ( d-1 ) .",
    "[ s_trellis_bnd ] since @xmath588 , the above is also a lower bound on @xmath478 .    now , suppose that @xmath254 , @xmath516 , is a sequence of @xmath547 $ ] codes of bounded treewidth , so that there exists some @xmath552 such that for all @xmath350 , @xmath589 .",
    "hence , from ( [ s_trellis_bnd ] ) , we have @xmath590 . therefore",
    ", assuming the validity of conjecture  [ conj1 ] , we have @xmath591 since @xmath555 is a constant , this implies that @xmath592 from which we infer that at least one of @xmath582 and @xmath583 must be zero .",
    "observe that the final conclusion of the above argument can also be reached if we only assume that @xmath593 grows at most logarithmically with @xmath441 .",
    "we formalize this as a conjecture .",
    "let @xmath254 , @xmath516 , be any sequence of @xmath547 $ ] codes such that @xmath594 .",
    "then , @xmath582 and @xmath583 can not both be strictly positive .",
    "in particular , for any @xmath552 , the code family @xmath553 is not asymptotically good .",
    "[ conj2 ]    we wrap up our discussion on complexity measures for codes by elaborating on a comment we made at the beginning of this subsection , in which we implied that hard coding - theoretic problems often become polynomial - time solvable when restricted to codes of bounded complexity .",
    "we saw earlier several examples of algorithms that , given a code @xmath573 , solve some problem in time polynomial in the length of @xmath0 . in each of these cases ,",
    "the computational complexity of the algorithm displayed an exponential dependence on the parameter @xmath555 .",
    "but since @xmath555 was a fixed constant , this exponential dependence could be absorbed into the constant hidden in the `` big-@xmath569 '' estimate of the complexity .",
    "thus , fixing the parameter @xmath555 allowed a potentially intractable coding - theoretic problem to become tractable . problems that may be hard in general , but which become solvable in polynomial time when one of the parameters of the problem is fixed , are called _ fixed - parameter tractable_. we noted previously that the problems of computing the treewidth and branchwidth of a code are np - hard .",
    "it should come as no surprise that these problems are in fact fixed - parameter tractable .",
    "hlinn @xcite gives an @xmath576 algorithm that , for a fixed integer @xmath555 , determines whether or not a given length-@xmath14 code is in @xmath554 . from this",
    ", one can also prove the existence of an @xmath576 algorithm for deciding membership of a given length-@xmath14 code in @xmath553 @xcite .",
    "perhaps the most significant problem that remains open in the context of minimal tree realizations of codes is the resolution of conjecture  [ conj2 ] , which proposes that codes of bounded treewidth can not be asymptotically good . it may be possible to resolve this by deriving a lower bound on treewidth along the lines of the bound in ( [ s_trellis_bnd ] ) .",
    "another possibility is an inductive approach using code decompositions .",
    "however , an open problem of far greater significance is the development of a general theory of minimal realizations of codes on graphs with cycles . at present",
    ", such a theory only exists for the case of realizations of codes on graphs consisting of a single cycle , _",
    "i.e. _ , tail - biting trellis realizations @xcite .",
    "this simplest case of graphs with cycles is already more difficult to study than the cycle - free case  for example , there can be several non - equivalent definitions of minimality in the context of tail - biting trellis realizations .",
    "the challenge posed by graphs with more complex cycle structures can only be greater .",
    "_ proof of lemma  [ b|e_lemma]_. consider an arbitrary @xmath65 .",
    "an arbitrary global configuration @xmath88 may be written in the form @xmath595 . now , suppose that @xmath88 is such that @xmath102 , _",
    "i.e. _ , @xmath596 .",
    "observe that the global configurations @xmath597 also satisfy all local constraints ( since @xmath598 for each @xmath51 ) , and hence are in @xmath80 .",
    "therefore , @xmath599 , and so by definition of @xmath600 , we have @xmath601 . similarly , @xmath602 , so that @xmath603 . hence , @xmath604 .",
    "+ _ proof of lemma  [ ess_lemma]_. for any tree model ( essential or not ) , we have , by definition , @xmath91 for all @xmath51 .",
    "so we need only show the reverse inclusion in the case when @xmath605 is an essential tree model .",
    "pick an arbitrary @xmath51 .",
    "let @xmath606 be the edges of @xmath46 incident with @xmath49 .",
    "for @xmath607 , let @xmath608 denote the component of @xmath609 that does not include @xmath52 .",
    "set @xmath610 , and @xmath611 .",
    "we will write an arbitrary configuration @xmath101 as @xmath612    consider any @xmath613 , where @xmath614 , and @xmath615 for @xmath616 .",
    "as the tree model @xmath111 is essential , we have @xmath617 for all @xmath350 .",
    "in particular , @xmath618 , so that there exists @xmath619 such that @xmath620 .",
    "as @xmath621 is in @xmath80 , its `` sub - configuration '' @xmath622 satisfies the local constraints of @xmath111 at all vertices in @xmath623 .",
    "hence , @xmath624 satisfies the local constraints of @xmath111 at all vertices in @xmath625 .",
    "now , @xmath52 is the only vertex of @xmath46 that is not in @xmath625 .",
    "but , by construction , @xmath626 , and so , @xmath182 also satisfies the local constraint at @xmath52 .",
    "thus , @xmath182 satisfies all local constraints of @xmath111 , so that @xmath627 .",
    "hence , @xmath628 is in @xmath110 , which proves the lemma .",
    "_ proof of lemma  [ gbar_lemma1]_. for simplicity of notation , let @xmath97 denote the edge set of the subtree @xmath399 , and let @xmath629 denote that of the subtree @xmath630 . note that @xmath631 . throughout this proof",
    ", we will write an arbitrary global configuration @xmath88 , belonging to @xmath80 or @xmath174 , in the form @xmath632 .    consider any @xmath633 .",
    "let @xmath634 and @xmath279 be the two vertices incident with the edge @xmath169 in @xmath46 .",
    "we assume that @xmath635 and @xmath636 , as depicted in figure  [ lemma1_pf_fig ] .",
    "we write the local configuration @xmath637 as @xmath638 , and @xmath639 as @xmath640 .",
    "suppose first that @xmath641 ; note that the zero element of @xmath642 ( @xmath643 ) is @xmath152 . by definition of @xmath171 , @xmath644 .",
    "hence , there exists @xmath645 , for some @xmath646 .",
    "now , @xmath647 ( being a `` sub - configuration '' of @xmath648 ) satisfies the local constraints of @xmath171 at all vertices in @xmath649 .",
    "but these local constraints are of the form @xmath650 which , for @xmath651 , is identical to @xmath652 .",
    "therefore , the sub - configuration @xmath647 satisfies the local constraints of @xmath111 at all vertices in @xmath649 .",
    "it follows that @xmath653 satisfies the local constraints of @xmath111 at all vertices in @xmath654 , including @xmath634 . by a similar argument",
    ", there exists a @xmath655 such that @xmath656 satisfies the local constraints of @xmath111 at all vertices in @xmath657 .",
    "now , by definition of @xmath152 , there exist @xmath88 and @xmath658 in @xmath80 , such that @xmath659 , @xmath660 , and @xmath661 .",
    "note , in particular , that the sub - configuration @xmath662 of @xmath88 satisfies the local constraints of @xmath111 at all vertices in @xmath657 .",
    "therefore , the global configuration @xmath663 satisfies the local constraints of @xmath111 at all vertices in @xmath46 , and hence is in the full behavior , @xmath80 , of @xmath111 .",
    "a similar argument shows that @xmath664 is also in @xmath80 .",
    "as @xmath80 is a vector space , it must also contain @xmath665 and @xmath666 since @xmath111 is a tree realization of @xmath0 , we have @xmath81 . in particular , @xmath667 , and similarly , @xmath668 . hence , @xmath669 and @xmath670 .",
    "however , @xmath88 and @xmath658 were chosen so that @xmath671 and @xmath672",
    ". thus , we also have @xmath673 and @xmath674 .",
    "this finally yields @xmath675 , thus proving one direction of part ( b ) of the lemma",
    ".    we will next show that if @xmath676 , then @xmath677 but @xmath678 .",
    "this will prove both part ( a ) and the reverse direction of part ( b ) .",
    "so , suppose that @xmath679 .",
    "thus , @xmath680 is some coset of @xmath152 in @xmath681 , but is not @xmath152 itself .",
    "pick some @xmath682 . as @xmath683",
    ", there exists some @xmath101 such that @xmath684 .",
    "observe that @xmath685 , but since @xmath686 , @xmath687 .",
    "define @xmath688 , so that @xmath689 .",
    "furthermore , @xmath690 , and @xmath691 ( @xmath692 ) is in @xmath0 but not in @xmath693 .",
    "we have already noted ( prior to the statement of lemma  [ gbar_lemma1 ] ) that @xmath179 .",
    "therefore , @xmath694 , and since @xmath174 is a vector space , @xmath695 .",
    "however , @xmath696 , and as we showed above , this implies that @xmath697 . since @xmath691 is in @xmath0 but not in @xmath693 , we find that @xmath698 , but @xmath699 .",
    "the proof of the lemma is now complete .",
    "+ _ proof of lemma  [ gbar_lemma2]_. as @xmath171 is a tree realization of @xmath0 , lemma  [ b|e_lemma ] shows that for any @xmath193 , we have @xmath194 only if @xmath195 .",
    "thus , we need only prove the converse .",
    "suppose that @xmath193 is such that @xmath700 , but @xmath701 .",
    "now , @xmath702 , the last equality being a consequence of the fact that @xmath703 . therefore , there exists a @xmath101 such that @xmath704 .",
    "note that , by the hypothesis of the lemma , @xmath705 .",
    "set @xmath688 , so that @xmath706 .",
    "observe that @xmath707 , and since @xmath703 , we also have @xmath708 .",
    "thus , @xmath709 and @xmath710 .",
    "but now , we have @xmath695 , with @xmath711 , and @xmath712 .",
    "this contradiction of lemma  [ b|e_lemma ] proves that there exists no @xmath193 such that @xmath700 , but @xmath701 .",
    "_ proof of _ ( a ) _",
    "@xmath371 _ ( b ) _ in theorem  [ rsum_theorem]_. let @xmath314 for codes @xmath33 and @xmath34 defined on the index sets @xmath35 and @xmath36 , respectively . by definition , @xmath713 .",
    "set @xmath714 and @xmath715 , so that @xmath312 forms a partition of @xmath3 . in what follows",
    ", words defined on the index set @xmath35 will be written in the form @xmath716 ; words defined on the index set @xmath36 will be written in the form @xmath717 ; words defined on the index set @xmath3 will be written as @xmath718 ; and finally , words on the index set @xmath38 will be written as @xmath719 .",
    "we begin by proving that @xmath720 .",
    "this is accomplished by a two - step argument : we first show that @xmath721 , and then we show that @xmath722 .    if @xmath723 , then there exists some @xmath724 , @xmath265 such that @xmath725 . however , @xmath726 as @xmath19 lies outside @xmath253 .",
    "hence , @xmath727 .",
    "conversely , suppose that @xmath728 . then , there exists @xmath729 such that @xmath730 .",
    "since @xmath731 , there exists @xmath732 .",
    "now , @xmath733 , and hence @xmath734 .",
    "thus , @xmath723 , which completes the proof of the fact that @xmath721 .    now , to show that @xmath735 , let us consider the projection map @xmath736 defined by @xmath737 .",
    "this map is a homomorphism , with kernel isomorphic to @xmath738 , which is @xmath739 by definition .",
    "hence , @xmath217 is in fact an isomorphism , which proves that @xmath735 .",
    "we have thus shown that @xmath720 .",
    "a similar argument yields the fact that @xmath740 .",
    "hence , @xmath741 by corollary  [ dim_rsum_cor ] .",
    "it remains to show that @xmath315 .",
    "note that since @xmath379 , and @xmath742 , we must have @xmath743 .",
    "therefore , @xmath744 . by a similar argument",
    ", we also have @xmath745 .",
    "the proof of proposition  [ rec_constr_prop ] requires the following lemma , which presents a property of the codes @xmath33 and @xmath34 obtained via the @xmath279-sum decomposition procedure of section  [ decomp_section ] .",
    "let @xmath0 be a code defined on the index set @xmath3 , and let @xmath312 be a partition of @xmath3 , with @xmath379 .",
    "suppose that @xmath33 and @xmath34 are the codes , defined on the respective index sets @xmath35 and @xmath36 , that are obtained by the procedure described in the proof of theorem  [ rsum_theorem ] .",
    "then , for any @xmath746 , and any @xmath747 , we have @xmath748 [ appd_lemma ]    we use notation from the proof of the ( b )  @xmath371  ( a ) direction of theorem  [ rsum_theorem ] .",
    "thus , @xmath0 , @xmath33 and @xmath34 are generated by the matrices @xmath346 , @xmath363 and @xmath365 given by ( [ rref_eq ] ) , ( [ g1_def ] ) and ( [ g2_def ] ) , respectively , which we reproduce here for the sake of convenience . @xmath749 , \\\\",
    "g_1 & = & \\left[\\begin{array}{ccc } i_{k_1 } & a & x \\\\ \\end{array } \\right ] , \\\\ g_2 & = & \\left[\\begin{array}{ccc } x & \\o & b \\\\",
    "\\o & i_{k - k_1 } & c \\end{array}\\right].\\end{aligned}\\ ] ] for any matrix @xmath750 , given a subset @xmath751 of the column indices of @xmath750 , we will denote by @xmath752 the restriction of @xmath750 to the columns indexed by @xmath751 .",
    "thus , @xmath753,\\ \\ \\ \\   { g_1|}_j =   \\left [ \\begin{array}{cc } i_{k_1 } & a   \\end{array } \\right],\\ ] ] @xmath754.\\ ] ]    our proof of the lemma uses only elementary linear algebra . we prove ( [ appd_lemma_eq1 ] ) first .",
    "consider any @xmath746 .",
    "it is clear that @xmath755 $ ] , and therefore , we have @xmath756 .",
    "next , note that @xmath757 , from which we have @xmath758\\right).\\ ] ] now , observe that by performing column operations on @xmath759 , we can bring it into the form @xmath760.\\ ] ] hence , @xmath761\\right ) & = & \\rank\\left(\\left[\\ { \\bar{g}|}_{j - j_1 } \\ \\ \\",
    "w\\ \\right]\\right ) \\\\ & = & \\rank(i_{k - k_1 } ) +   \\rank\\left(\\left[\\ { g_1|}_{j - j_1 } \\ \\ \\",
    "b\\ \\right]\\right ) \\\\ & = & k - k_1 + \\rank\\left(\\left[\\ { g_1|}_{j - j_1 } \\ \\ \\ b\\ \\right]\\right).\\end{aligned}\\ ] ] at this point , we have @xmath762\\right),\\ ] ] which upon re - arrangement yields @xmath763\\right ) -   \\dim(\\cc_1).\\ ] ] thus , ( [ appd_lemma_eq1 ] ) would be proved if we could establish that @xmath764\\right)$ ] .",
    "now , @xmath765 , and hence , @xmath766\\right).\\ ] ] thus , we have to show that @xmath767\\right ) = \\rank\\left(\\left[\\ { g_1|}_{j - j_1 } \\ \\ \\ x\\ \\right]\\right ) .",
    "$ ] we will prove that the matrices @xmath337 and @xmath354 have identical column - spaces . clearly , the desired result then follows .",
    "recall that for @xmath768 , the @xmath350th row of @xmath337 can be uniquely expressed as a linear combination , @xmath351 , of its first @xmath279 rows @xmath348 .",
    "furthermore , the @xmath350th row of @xmath354 equals @xmath356 for the same @xmath357 s , where @xmath358 are the rows of the generator matrix , @xmath282 , of the code @xmath285 .",
    "in particular , the first @xmath279 rows of @xmath354 constitute the matrix @xmath282 .",
    "denote by @xmath769 the submatrix of @xmath337 comprised by its first @xmath279 rows .",
    "now , it was pointed out in section  [ decomp_section ] ( a little after the proof of proposition  [ dim_sum_prop ] ) that any column vector in @xmath287 is a scalar multiple of some column of @xmath282 .",
    "therefore , any column of @xmath769 is a scalar multiple of some column of @xmath282 .",
    "but because of the way @xmath354 was constructed , this implies that any column of @xmath337 is a scalar multiple of some column of @xmath354 .",
    "thus , the column - space of @xmath337 is a subspace of the column - space of @xmath354 .",
    "however , we also have @xmath770 , and so , the column - spaces of the two matrices are in fact identical .",
    "this proves that @xmath771\\right ) = \\rank\\left(\\left[\\ { g_1|}_{j - j_1 } \\ \\",
    "\\ x\\ \\right]\\right)$ ] , and ( [ appd_lemma_eq1 ] ) follows .",
    "+ to show ( [ appd_lemma_eq2 ] ) , consider any @xmath747 .",
    "arguments similar to the ones above establish that ( |_j_2 ) = ( _ 2|_j_2 )    ( |_i - j_2 ) = k_1 + ( |_- j_2 ) .",
    "[ appd_eq1 ] now , consider @xmath772 .",
    "noting that @xmath773 , we see that the matrix @xmath774 has the form @xmath775,\\ ] ] with @xmath776 , for some @xmath777 .",
    "since the columns of @xmath337 are contained in the column - space of @xmath354 , we can perform column operations on @xmath774 to bring it into the form @xmath778.\\ ] ] hence , @xmath779 ) \\notag \\\\ & = & ( k_1+k_2-k ) +   \\rank\\left({\\left[i_{k - k_1}\\ \\ \\ c\\right]\\bigm|}_{\\oj - j_2}\\right ) .",
    "\\label{appd_eq2}\\end{aligned}\\ ] ] some trivial manipulations of ( [ appd_eq1 ] ) and ( [ appd_eq2 ] ) yield ( [ appd_lemma_eq2 ] ) , which proves the lemma .",
    "_ proof of proposition  [ rec_constr_prop]_. recall that @xmath421 , where @xmath72 and @xmath780 are as defined in ( [ se_def ] ) and ( [ cv_def ] ) . to show that @xmath422 is the minimal realization @xmath129 , it is enough to show that for all @xmath781",
    ", @xmath782 equals the expression in ( [ dimse*_alt ] ) , _ i.e. _ , ( _ e ) = ( |_j(e ) ) + ( |_|j(e ) ) - ( ) .",
    "[ appd_eq3 ] note that this is true when @xmath783 , since @xmath784 , and from ( [ r_def ] ) , we have @xmath428 .",
    "we must therefore show that ( [ appd_eq3 ] ) holds for @xmath785 .",
    "we will prove this for @xmath786 ; the proof for @xmath787 is similar .",
    "so , consider any @xmath786 .",
    "one of the two components , @xmath56 and @xmath788 , of @xmath789 is contained in @xmath399 .",
    "without loss of generality , we may assume that it is @xmath56 that is a subtree of @xmath399 , as depicted in figure  [ subtree ] .",
    "hence , @xmath790 .",
    "now , by ( [ se_def ] ) , @xmath791 , the latter being the state space associated with @xmath54 in @xmath418 .",
    "therefore , by ( [ dimse*_alt ] ) , @xmath792 but , by lemma  [ appd_lemma ] , the above expression is equal to the expression on the right - hand side of ( [ appd_eq3 ] ) .",
    "hence , ( [ appd_eq3 ] ) holds for any @xmath786 , and the proposition follows .",
    "bodlaender , `` dynamic programming on graphs of bounded treewidth , '' _ proc .",
    "15th international colloquium on automata , languages and programming _ , vol .",
    "317 , lecture notes in computer science , springer - verlag , pp .",
    "105118 , 1988 ."
  ],
  "abstract_text": [
    "<S> a tree decomposition of the coordinates of a code is a mapping from the coordinate set to the set of vertices of a tree . </S>",
    "<S> a tree decomposition can be extended to a tree realization , _ i.e. _ , a cycle - free realization of the code on the underlying tree , by specifying a state space at each edge of the tree , and a local constraint code at each vertex of the tree . </S>",
    "<S> the constraint complexity of a tree realization is the maximum dimension of any of its local constraint codes . </S>",
    "<S> a measure of the complexity of maximum - likelihood decoding for a code is its treewidth , which is the least constraint complexity of any of its tree realizations .    </S>",
    "<S> it is known that among all tree realizations of a code that extends a given tree decomposition , there exists a unique minimal realization that minimizes the state space dimension at each vertex of the underlying tree . in this paper , we give two new constructions of these minimal realizations . as a by - product of the first construction , a generalization of the state - merging procedure for trellis realizations , we obtain the fact that the minimal tree realization also minimizes the local constraint code dimension at each vertex of the underlying tree . </S>",
    "<S> the second construction relies on certain code decomposition techniques that we develop . </S>",
    "<S> we further observe that the treewidth of a code is related to a measure of graph complexity , also called treewidth . </S>",
    "<S> we exploit this connection to resolve a conjecture of forney s regarding the gap between the minimum trellis constraint complexity and the treewidth of a code . </S>",
    "<S> we present a family of codes for which this gap can be arbitrarily large . </S>"
  ]
}