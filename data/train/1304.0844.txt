{
  "article_text": [
    "one important issue with voting is that agents may cast strategic votes instead of revealing their true preferences .",
    "gibbard @xcite and sattertwhaite @xcite proved that most voting rules are manipulable in this way .",
    "bartholdi , tovey and trick  @xcite suggested computational complexity may nevertheless act as a barrier to manipulation .",
    "interestingly , it is np - hard to compute a manipulation for many commonly used voting rules , including maximin , ranked pairs  @xcite , borda  @xcite , 2nd order copeland , stv  @xcite , nanson and baldwin  @xcite .",
    "a recent survey on computational complexity as a barrier against manipulation in elections can be found in  @xcite .",
    "we study here the computational complexity of manipulating schulze s voting rule , which is arguably the most widespread condorcet voting method in use today .",
    "schulze s rule was proposed by markus schulze in 1997 , and was quickly adopted by many organizations .",
    "it is , for example , used by the annodex association , blitzed , cassandra , debian , the european democratic education conference , the free software foundation , gnu privacy guard , the haskell logo competition , knight foundation , mtv , neo , open stack , the pirate party , rllmuk , sugar labs , topcoder , ubuntu and the wikimedia foundation .",
    "in addition to being condorcet consistent , schulze s rule satisfies many other desirable axiomatic properties , including pareto optimality , monotonicity , condorcet loser criterion , independence to clones , reversal symmetry and the majority criterion .",
    "schulze s rule is known by several other names including the beatpath method and path voting .",
    "the method can be seen as the inverse procedure to another condorcet consistent voting method , ranked pairs .",
    "the ranked pairs method starts with the largest defeats and uses as much information about these defeats as it can without creating ambiguity . by comparison ,",
    "schulze s rule repeatedly removes the weakest defeat until ambiguity is removed .",
    "schulze s rule has a number of interesting computational properties .",
    "whilst it is polynomial to compute the winner of schulze s rule , it requires finding paths in a directed graph labeled with the strength of defeats .",
    "such paths can be found using a variant of the cubic time floyd - warshall algorithm  @xcite .",
    "more recently , parkes and xia initiated the study of the computational complexity of manipulating this voting rule  @xcite .",
    "they proved that in the unique winner ucm problem it is polynomial for a single agent to compute a manipulating vote if one exists .",
    "they also investigated the vulnerability of schulze s rule to various types of control .",
    "however , they left the computational complexity of ucm with more than one manipulator as an open question .    in this paper , we continue this study and show that ucm remains polynomial for an arbitrary number of manipulators . for users of schulze",
    "s rule , this result has both positive and negative consequences . on the negative side",
    ", this means that the rule is computationally vulnerable to being manipulated . on the positive side",
    ", this means that when eliciting votes , we can compute in polynomial time when we have collected enough votes to declare the winner .",
    "our results also highlight the importance of distinguishing carefully between manipulation problems where we are looking for a single winner compared to co - winners .",
    "* voting systems . * consider an election with a set of @xmath0 candidates @xmath1 .",
    "vote _ is specified by a total strict order on @xmath2 : @xmath3 .",
    "an @xmath4-agent profile @xmath5 on @xmath2 consists of @xmath4 votes , @xmath6 .",
    "* schulze s voting rule . * given an @xmath4-agent profile @xmath5 on @xmath2 , schulze s rule determines a set of winners @xmath7 as follows .    1 .   for candidates @xmath8 , let @xmath9 denote the number of agents who prefer @xmath10 over @xmath11 , i.e. the number of indices @xmath12 with @xmath13 .",
    "2 .   the _ weighted majority graph _ ( wmg ) is a directed graph @xmath14 whose vertex set is @xmath2 , and with an arc of weight @xmath15 for every pair @xmath16 of distinct candidates .",
    "we denote wmg associated with a profile @xmath5 by @xmath17 .",
    "the _ strength _ of a directed path @xmath18 in @xmath14 is defined to be the minimum weight over all its arcs , i.e. @xmath19 .",
    "4 .   for candidates @xmath10 and @xmath11 , let @xmath20 denote the maximum strength of a path from @xmath10 to @xmath11 , i.e. @xmath21 a path from @xmath10 to @xmath11 is a _ critical path _ if its strength is @xmath20 . 5 .",
    "the winning set is defined as @xmath22    if @xmath23 for two candidates @xmath24 , then we say that @xmath10 dominates @xmath11 .",
    "thus , @xmath25 is the set of non - dominated vertices .",
    "the winning set is always non - empty  @xcite .",
    "note that all weights @xmath26 , @xmath27 are either odd or even , depending on the size of the profile @xmath5 .",
    "conversely , for any weighted digraph where all weights have the same parity , a corresponding profile can be constructed  @xcite . in the literature ,",
    "for example , @xcite and  @xcite refer to this as mcgarvey s trick  @xcite .",
    "we use this result here as we define the non - manipulators profile by their weighted majority graph instead of by their votes .     and",
    "the table of @xmath28 , @xmath29 from example  [ exm : intro ] . ]    [ exm : intro ] consider an election with 5 alternatives @xmath30 .",
    "the weighted majority graph @xmath14 is shown in figure  [ fig : example1 ] .",
    "we omit arcs with zero or negative weight for clarity .",
    "the table shows values @xmath20 , @xmath31 . as can be seen from the table , @xmath32 , for all @xmath33 .",
    "hence , the winning set contains a single alternative @xmath34 .",
    "* strategic behavior .",
    "* we distinguish between agents that vote truthfully and agents that vote strategically .",
    "we call the latter manipulators .",
    "we use the superscript @xmath35 to denote the non - manipulators profile and the superscript @xmath36 to denote the manipulators profile .",
    "the co - winner _ unweighted coalitional manipulation _ ( ucm ) problem is defined as follows . an instance is a tuple @xmath37 , where @xmath38 is the non - manipulators profile , @xmath39 is the candidate preferred by the manipulators and @xmath36 is the set of manipulators .",
    "we are asked whether there exists a profile @xmath40 for the manipulators such that @xmath41 .",
    "unique _ winner ucm problem is a variant of the co - winner ucm where we are looking for a manipulation such that @xmath42 .",
    "the _ weighted coalitional manipulation _ ( wcm ) is defined similarly , where the weights of the agents ( both non - manipulators and manipulators ) are integers and are also given as inputs .",
    "we consider the co - winner wcm problem for schulze s voting rule .",
    "we show that if there exists a successful manipulation @xmath43 then there exists a successful manipulation @xmath44 where all manipulators vote identically .",
    "we prove this result in two steps .",
    "first , we construct a kind of directed spanning tree of the wmg @xmath45 rooted at @xmath39 , which gives us a critical path from @xmath39 to all other alternatives .",
    "then , by traversing this tree , we build a new linear order of candidates that specifies a vote for all manipulators .    , @xmath29 from example  [ exm : intro1 ] .",
    "]    [ exm : intro1 ] consider the wmg @xmath46 from example  [ exm : intro ] .",
    "suppose that @xmath5 corresponds to the non - manipulators profile , so that @xmath47 .",
    "suppose we have 4 manipulators with weights @xmath48 and @xmath49 that vote in the following way : the first three manipulators vote @xmath50 and the last manipulator votes @xmath51 .",
    "hence , the total weight of the vote @xmath50 in @xmath43 is @xmath52 and the total weight of the vote @xmath51 in @xmath43 is @xmath49 .",
    "the updated wmg @xmath53 and the corresponding table that shows the values of pairwise maximum strengths are shown in figure  [ fig : example2_1 ] .",
    "note that the alternative @xmath39 is non - dominated as well as alternatives @xmath54 .",
    "hence , the winning set @xmath55 .",
    "we show that given any profile @xmath5 , a winning candidate @xmath56 and a subset @xmath57 of the set of votes , e.g. @xmath58 , we can modify the votes in @xmath57 to be all the same , and @xmath39 is still in the winning set of the resulting profile @xmath59 .",
    "to do this , we construct a vote @xmath60 such that @xmath39 is still a winner if we replace every vote in @xmath57 by @xmath61 .",
    "hence , in the context of the manipulation problem we can think of @xmath62 as @xmath63 and @xmath57 as @xmath40 .    an _ out - branching _",
    "@xmath64 of a directed graph @xmath65 rooted at a vertex @xmath66 is a connected spanning subdigraph of @xmath65 in which @xmath66 has in - degree @xmath67 and all other vertices have in - degree @xmath68 .",
    "[ lem : spanning_tree ] let @xmath69 be the digraph associated with the given profile @xmath5 .",
    "there exists an out - branching @xmath64 rooted at @xmath39 in @xmath65 such that for every candidate @xmath70 the unique path from @xmath39 to @xmath71 in @xmath64 is a critical @xmath39-@xmath71-path in @xmath65 .",
    "we construct an out - branching @xmath64 of @xmath65 by algorithm [ alg : spanning_tree ] . at the initial step the algorithm makes @xmath39 the root of @xmath64 . at each step",
    ", we add a new vertex @xmath10 , @xmath72 , to the tree @xmath64 iff the arc @xmath73 has maximum value @xmath74 among all arcs @xmath75 , @xmath76 .    .......................................................",
    "+ * input : * a weighted digraph @xmath77 and + a distinguished candidate @xmath39 . + initialize @xmath78 , @xmath79 and @xmath80 .",
    "+ * for * @xmath81 * do * + @xmath82 + choose @xmath83 and @xmath84 with @xmath85 + @xmath86 + @xmath87 + @xmath88 + return @xmath89    clearly , algorithm [ alg : spanning_tree ] returns an out - branching because the input digraph is complete .",
    "so we just have to show that it satisfies the required property .",
    "we do this by induction on the size of @xmath64 . for @xmath90",
    "the claim is obvious , so assume @xmath91 , and let @xmath92 be the vertex added in step @xmath12 , i.e. @xmath93 . let @xmath94 be the @xmath39-@xmath92-path in @xmath64 , and let @xmath95 be the index of the first arc on that path realizing its strength , i.e. @xmath96 . let @xmath97 be the step in which the arc @xmath98 is added to @xmath64 .",
    "now suppose that there is a @xmath39-@xmath92-path @xmath99 in @xmath65 with @xmath100 . because @xmath101 and @xmath102 , there exists some arc @xmath103 with @xmath104 and @xmath105 .",
    "then , @xmath106 , contradicting the assumption and thus concluding the proof .     that is produced by algorithm  [ alg : spanning_tree ] and the corresponding critical @xmath107-@xmath108-paths , @xmath109 ; ( b ) the @xmath110 ordering constructed by algorithm  [ alg : ordering ] . ]",
    "[ exm : intro_spanning ] figure  [ fig : example2_2](a ) shows the out - branching for @xmath53 and critical @xmath39-@xmath10-paths , @xmath111 , of the wmg from example  [ exm : intro1 ] .",
    "consider , for example , the path @xmath112 in the out - branching .",
    "this path has strength @xmath113 and it corresponds to the maximum strength @xmath39-@xmath114-path in @xmath53 .    [ lem : ordering ] let @xmath69 be the graph associated with the given profile @xmath5 and let @xmath64 be an out - branching rooted at @xmath39 as in lemma [ lem : spanning_tree ] .",
    "then there exists an ordering @xmath60 on the set of candidates with the following properties .    * property 1 : for each @xmath115 the unique @xmath39-@xmath115-path in @xmath64 respects the ordering @xmath61 , i.e. it is of the form @xmath116 . *",
    "property 2 : the strength of a critical path from @xmath115 , @xmath117 to @xmath39 is nonincreasing along the ordering @xmath61 : @xmath118    the intuition for property 1 is that the strength of each critical path from @xmath39 to @xmath115 , @xmath117 does not decrease if we change all votes in @xmath57 to @xmath61 .",
    "algorithm [ alg : ordering ] returns a total order on the set of candidates .",
    "the algorithm traverses the out - branching @xmath64 obtained by algorithm  [ alg : spanning_tree ] . at each step",
    ", we identify a vertex @xmath10 with the largest value of the strength @xmath119 .",
    "then we find the path @xmath120 from @xmath39 to @xmath10 in @xmath64 which is a critical path by lemma  [ lem : spanning_tree ] .",
    "a prefix of the path @xmath120 might be added to @xmath61 at this point .",
    "hence , we only focus on the suffix of @xmath120 that does not contain vertices added to @xmath61 .",
    "then we add the vertices in this suffix of @xmath120 to @xmath61 in the order in which they appear in @xmath120 .",
    "we terminate when @xmath61 is a total order over all alternatives .    .......................................................",
    "+ * input : * a weighted digraph @xmath77 , + a distinguished candidate @xmath39 and + the out - branching @xmath64 with root @xmath39 from algorithm [ alg : spanning_tree ] .",
    "+ initialize @xmath121 , @xmath122 + * while * @xmath123 * do * + @xmath124 + let @xmath125 be any vertex with @xmath126 .",
    "+ let @xmath120 be the unique @xmath39-@xmath127-path in @xmath64 . + add the vertices in @xmath128 to @xmath61 in the order in which + they appear on @xmath120 .",
    "+ update @xmath129 .",
    "+ return @xmath61    we show that it satisfies the two properties by induction on the length of @xmath61 .",
    "for the initial @xmath121 it is obviously true .",
    "so suppose we are in the while loop adding @xmath128 for a @xmath39-@xmath127-path @xmath130 .",
    "note that @xmath128 is a suffix of @xmath120 , i.e. @xmath131 for some @xmath95 . to see this ,",
    "let @xmath132 be the last vertex on @xmath120 that is already in @xmath61 .",
    "then by construction , all the vertices @xmath133 have been added to @xmath61 in the step in which @xmath132 was added or earlier .    by the induction hypothesis",
    "the @xmath39-@xmath132-path in @xmath64 respects @xmath61 , and because the suffix @xmath134 is added to @xmath61 and @xmath134 is a sub - path of @xmath120 , the condition of property 1 is satisfied for all these vertices .",
    "next we observe that @xmath135 for @xmath136 . to see this , let @xmath137 be an @xmath127-@xmath39-path of strength @xmath138 .",
    "we have @xmath139 for all @xmath140 , where the first inequality is true because @xmath141 is an arc on the @xmath39-@xmath127-path in @xmath64 which is a critical path , and the second inequality because @xmath39 is a winner .",
    "thus the concatenation of @xmath142 and @xmath137 provides a @xmath143-@xmath39-path of strength @xmath138 .",
    "now property 2 follows from the observation that @xmath144 for all @xmath145 which follows from the maximality condition in the step where @xmath127 is chosen .    ,",
    "@xmath29 from example  [ exm : intro_new_wmg ] using the @xmath110 ordering constructed by algorithm  [ alg : ordering ] . ]",
    "[ exm : intro_new_wmg ] we construct an ordering @xmath61 based on the out - branching obtained in example  [ exm : intro_spanning ] . the alternatives @xmath146 are such that @xmath147 .",
    "we break the tie between @xmath148 and @xmath114 arbitrarily and select @xmath114 .",
    "hence , we build a partial order @xmath149",
    ". the next alternatives that we consider are @xmath150 as @xmath151 .",
    "we select @xmath92 and add the suffix @xmath152 to the partial order @xmath149 , so that we get @xmath153 .",
    "hence , @xmath154 manipulators can vote with respect to @xmath61 .",
    "figure  [ fig : example2_2](b ) shows the execution of algorithm  [ alg : ordering ] .",
    "figure  [ fig : example2_3 ] shows the new wmg and the corresponding table of maximum strengths .",
    "it is easy to see that @xmath39 is still a winner after the manipulators change their votes .    for",
    "our given profile @xmath5 and distinguished candidate @xmath39 , we construct an ordering @xmath61 as described in the proof of lemma [ lem : ordering ] .",
    "[ thm : homogeneity ] let @xmath5 be any profile with candidate @xmath39 in the winning set , let @xmath155 be any subprofile , and set @xmath156 .",
    "let @xmath59 be the profile given by @xmath157 , where @xmath61 is the ordering constructed in lemma [ lem : ordering ] .",
    "then @xmath39 is still in the winning set @xmath158 .",
    "denote the wmgs associated with the two profiles by @xmath77 and @xmath159 .",
    "we recall that we use the out - branching @xmath64 with root @xmath39 obtained by algorithm [ alg : spanning_tree ] .",
    "the theorem is based on the following two claims .",
    "[ cl:1 ] for each path @xmath120 in @xmath64 starting from @xmath39 the strength of @xmath120 does not decrease in the graph @xmath160 , i.e. @xmath161 .    by construction of @xmath61 , we have @xmath162 for every arc @xmath163 , and this implies claim  [ cl:1 ] .",
    "[ cl:2 ] for every @xmath127-@xmath39-path @xmath120 , the strength of @xmath120 in @xmath160 does not exceed the strength of a critical @xmath127-@xmath39-path in @xmath65 , i.e. @xmath164 .    to prove claim  [ cl:2 ] , assume , for the sake of contradiction , that @xmath127 is a vertex such that there is an @xmath127-@xmath39-path @xmath165 with @xmath166 , and w.l.o.g .",
    "we assume that for all @xmath167-@xmath39-paths @xmath168 , @xmath169 , we have @xmath170 . because @xmath39 is a winner with respect to @xmath5 , @xmath120 must contain an arc @xmath16 of weight @xmath74 such that @xmath171 .",
    "let @xmath172 be the first arc with this property , i.e. @xmath173 .",
    "next we show the chain of inequalities @xmath174 which is a contradiction and thus proves the claim .",
    "the following arguments for the single inequalities above are illustrated in figure [ fig : claim_2 ] .",
    "( 1 ) : :    by assumption . ( 2 ) : :    as @xmath39 is a winner for @xmath5 , every    @xmath127-@xmath39-path must contain an arc    @xmath16 with @xmath175 . by    the choice of @xmath92 , we know that @xmath176 is the    first arc such that @xmath177 .",
    "hence , the    strength of the @xmath127-@xmath92-path is greater than    the strength of the @xmath127-@xmath39-path ,    @xmath178 . now from    @xmath179 it follows    that @xmath180 .",
    "( 3 ) : :    from the assumption @xmath166 it follows that    @xmath181 which implies that @xmath92 comes    before @xmath114 in the ordering @xmath61 , and then    the inequality ( 3 ) follows from lemma [ lem : ordering ] .",
    "( 4 ) : :    by assumption , @xmath182 for all    @xmath114-@xmath39-paths @xmath168 , hence    @xmath183 . ( 5 ) : :    let @xmath184 be the @xmath114-@xmath39-subpath    of @xmath120",
    ". then    @xmath185 .",
    "together , claims  [ cl:1 ] and [ cl:2 ] prove the theorem .",
    "[ col : wcm ] the co - winner wcm problem for schulze s rule is polynomial if the number of candidates is bounded .    as the number of candidates is bounded we can enumerate all possible distinct votes in polynomial time . from theorem  [ thm : homogeneity ]",
    "it follows that it is sufficient to consider manipulations where all manipulators vote identically .",
    "in this section we present our main result : co - winner ucm is polynomial for any number of manipulators .",
    "this closes an open question raised in  @xcite . by theorem  [ thm : homogeneity ] , @xmath37 is a yes - instance for co - winner ucm if and only if there is a vote @xmath186 such that @xmath187 where votes in @xmath40 corresponds to @xmath186 . it remains to decide if such a vote @xmath186 exists .    as in the weighted case ,",
    "we denote @xmath77 and @xmath159 the wmgs of the voting profiles @xmath188 and @xmath189 with arc weight functions @xmath190 and @xmath191 , respectively , and @xmath192 denotes the maximum strength of a path from @xmath10 to @xmath11 in @xmath160 .",
    "first , we give a high - level description of the two - stage algorithm . in the first stage ,",
    "we run a preprocessing procedure on @xmath65 that aims to identify a set of necessary constraints on the strengths @xmath192 , such as @xmath192 must be equal to @xmath193 . the procedure is based on a set of rules that enforce necessary conditions for @xmath39 to win , namely , @xmath194 must hold .",
    "if the preprocessing procedure detects a failure then there is no set of votes for @xmath36 such that @xmath39 becomes a winner .",
    "the pseudocode for the first stage of the algorithm is given in algorithm  [ alg : bounds ] .",
    "section  [ ss : first_stage ] proves the correctness of algorithm  [ alg : bounds ] .",
    "if no failure is detected by applying these rules during the preprocessing stage , we show that a manipulation exists and provide a constructive procedure that finds a manipulation .",
    "the pseudocode for the second stage of the algorithm is given in algorithm  [ alg : spanning_tree_ucm ] .",
    "here , the algorithm traverses vertices in @xmath65 in a specific order , which defines the manipulators votes .",
    "section  [ ss : second_stage ] proves the correctness of algorithm  [ alg : spanning_tree_ucm ] .    ............................................",
    "+ * input : * a weighted digraph @xmath195 , + the strengths @xmath196 and + a distinguished candidate @xmath39 .",
    "+ * for * @xmath197 * do * + @xmath198 + @xmath199 + @xmath200 + * while * no convergence * do * + / * rule 1 * / + * for * @xmath201 * do * + @xmath202 + / * rule 2 * / + * for * @xmath203 * do * + @xmath204 + @xmath205 + @xmath206 + * if * @xmath207 contains no @xmath39-@xmath10-path * then * + @xmath208 + / * rule 3 * / + * for * @xmath203 * do * + * for * @xmath209 * do * + * if * @xmath210 + @xmath211 + * for * @xmath203 * do * + * if * @xmath212 * then * + return * fail * + return @xmath213      algorithm  [ alg : bounds ] uses a function @xmath214 , which for any two candidates @xmath10 and @xmath11 , gives an upper bound for @xmath192 .",
    "initially , @xmath215 for each pair @xmath16 .",
    "we also use the following notation for an upper and lower bound of @xmath216 : @xmath217 and @xmath218 . in the first stage ,",
    "algorithm  [ alg : bounds ] decreases @xmath214 when it detects necessary conditions implying @xmath219 .",
    "the algorithm is based on the following three reduction rules .",
    "we show that these rules are sound in the sense that an application of a rule does not change the set of solutions of the problem .",
    ": :    if there is a candidate @xmath10 such that    @xmath220 , then set    @xmath221 .",
    "rule 1 is sound .    to see that rule 1 is sound ,",
    "suppose @xmath222 .",
    "but then , @xmath223 .    to state the next reduction rule , define for any candidate @xmath10 the directed graph @xmath207 obtained from @xmath65 by removing all vertices @xmath11 with @xmath224 and all arcs",
    "@xmath225 such that @xmath226 .",
    ": :    if there is a candidate @xmath10 such that @xmath207    has no directed path from @xmath39 to @xmath10 , then set    @xmath227 .",
    "rule 2 is sound .",
    "suppose the premises of the rule hold , and , for the sake of contradiction , suppose there exists a path in @xmath160 from @xmath10 to @xmath39 with strength @xmath228 , where @xmath228 equals @xmath229 before the application of the rule .",
    "since @xmath207 has no directed path from @xmath39 to @xmath10 , all directed paths in @xmath65 from @xmath39 to @xmath10 pass either through a vertex @xmath11 with @xmath230 or through an arc @xmath225 such that @xmath231 . since any such path has strength less than @xmath228 , we have that @xmath232 .",
    "but , since @xmath39 belongs to the winning set in @xmath160 , we have that @xmath233 , a contradiction .",
    "thus , @xmath234 .",
    "the soundness of rule 2 now follows from the fact that all @xmath235 have the same parity as @xmath236 , @xmath237 , and we maintain the invariant that all @xmath238 have this parity .",
    "rule 3 . : :    if there are candidates @xmath239 such that    @xmath240 and    @xmath241 , then set @xmath242 .",
    "rule 3 is sound .",
    "suppose @xmath243 and @xmath120 is a critical path from @xmath11 to @xmath39 in @xmath160 .",
    "but then , the path @xmath244 , obtained by concatenating @xmath10 and @xmath120 , has strength @xmath245 .",
    "since @xmath246 , the strength of this directed path from @xmath10 to @xmath39 is strictly greater than @xmath229 , contradicting our assumption that @xmath229 is a necessary upper bound for @xmath247 .",
    "we remark that rules 1 - 3 decrement @xmath248 when necessary conditions are found that require a smaller upper bound for @xmath249 .",
    "should at any time such a value @xmath229 become smaller than @xmath250 , then there are no votes for @xmath36 that make @xmath39 a winner . in this case , the preprocessing algorithm returns * fail*.    algorithm  [ alg : bounds ] is sound .    algorithm  [ alg : bounds ] implements rules  13 .",
    "as these rules are sound , the algorithm is sound .",
    "consider how algorithm  [ alg : bounds ] works on an example .",
    "from example  [ exm : ucm_choices ] ]    [ exm : ucm_choices ] consider an election with eleven alternatives @xmath251 with the wmg in figure  [ fig : example5 ] , where @xmath252 and @xmath39 is the preferred candidate .",
    "we note that there are two candidates @xmath253 and @xmath254 such that @xmath255 , @xmath256 . for candidate @xmath253",
    "there are two ways to increase @xmath257 .",
    "the first way is to increase the strength of the @xmath39-@xmath258-@xmath259-@xmath253-path by ranking @xmath260 .",
    "the second way is to increase the strength of the @xmath39-@xmath261-@xmath262-@xmath253-path by ranking @xmath263 . if we select the first way then an extension of @xmath260 to any total order leads to @xmath223 .",
    "if we select the second way then we can build a successful manipulation .",
    "we show that algorithms  [ alg : bounds]  [ alg : spanning_tree_ucm ] successfully construct a valid manipulation .",
    "we start with algorithm  [ alg : bounds ] .",
    "table  [ table : first_stage ] shows execution of algorithm  [ alg : bounds ] on this problem instance .     &",
    "@xmath264 & @xmath265 & @xmath266 & @xmath267 & @xmath258 & @xmath261 & @xmath259 & @xmath262 & @xmath253 & @xmath254 +   + @xmath268 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath269 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath271 + @xmath248 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath269 & @xmath269 & @xmath270 +   + @xmath268 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath269 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath271 + @xmath248 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & 9 & 9 & @xmath272 & @xmath272 & @xmath273 +   + @xmath268 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath269 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath271 + @xmath248 & @xmath273 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath271 +   + @xmath268 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath269 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath271 + @xmath248 & @xmath271 & @xmath270 & @xmath273 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath270 & @xmath271 +   + @xmath268 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath269 & @xmath269 & @xmath269 & @xmath270 & @xmath270 & @xmath271 + @xmath248 & @xmath271 & @xmath270 & @xmath271 & @xmath270 & @xmath273 & @xmath270 & @xmath273 & @xmath270 & @xmath270 & @xmath271 +    .",
    "deleted arcs and vertices are in gray .",
    "there is no path from @xmath107 to @xmath274 ; ( b ) wmg @xmath275 from example  [ exm : ucm_choices ] where @xmath110 is a valid manipulation . ]",
    "[ ss : second_stage ]    ....................................................... + * input : * a weighted digraph @xmath195 , + the strengths @xmath196 , + a distinguished candidate @xmath39 and + the function @xmath213 returned by algorithm [ alg : bounds ] .",
    "+ * for * @xmath197 * do * + @xmath198 + initialize @xmath276 , @xmath277 , @xmath278 and @xmath279 .",
    "+ * for * @xmath280 * do * + @xmath281 + choose @xmath282 and @xmath283 with @xmath284 + @xmath285 + @xmath286 + @xmath287 + @xmath288 + return @xmath61    algorithm  [ alg : spanning_tree_ucm ] constructs a linear order @xmath61 based on the following greedy procedure .",
    "initially , @xmath279 , @xmath39 is the top candidate , @xmath289 , the frontier @xmath276 and the set of unreached vertices @xmath277 . during the execution of the algorithm , @xmath61 is a linear order on @xmath290 and contains an element @xmath291 for any two consecutive vertices @xmath24 in this order .",
    "the vertex @xmath292 is the last vertex in this order @xmath293 .",
    "while @xmath61 is not a total order , the algorithm adds one of the unreached vertices @xmath11 to the end of a partial order @xmath61 satisfying the following conditions : @xmath294 , @xmath295 , @xmath296 and @xmath297 , where @xmath298 is the maximum value @xmath299 among all unreached vertices @xmath295 .",
    "algorithm  [ alg : spanning_tree_ucm ] constructs a total order @xmath61 with top element @xmath39 .",
    "moreover , for any vertex @xmath300 , there is a @xmath39-@xmath10-path @xmath301 such that @xmath302 and @xmath303 , @xmath304 .",
    "first , we need to prove that the algorithm can always add a vertex @xmath11 to the order @xmath61 satisfying the conditions above .",
    "let @xmath305 be any candidate from @xmath306 such that @xmath307 .",
    "since rule 2 does not apply , the subgraph @xmath308 has a directed path from @xmath39 to @xmath305 . let @xmath16 be the arc on this path with @xmath282 and @xmath295 ( we could possibly have that @xmath309 ) . also , by rule 2 we have that @xmath310 and that @xmath311 .",
    "thus , @xmath296 and @xmath297 , which means that @xmath16 satisfies the conditions of the alternative @xmath11 to be added to @xmath61 .",
    "we prove the second statement by induction . in the base case ,",
    "@xmath312 and we add @xmath11 such that @xmath313 . hence , @xmath314 , @xmath315 and @xmath316 .",
    "suppose , the statement holds for @xmath317 steps .",
    "let @xmath16 be the arc such that @xmath282 and @xmath295 , @xmath318 that we add at the @xmath12th step . by the induction hypothesis",
    ", we know that there is a @xmath39-@xmath10-path @xmath319 such that @xmath320 and @xmath321 , @xmath322 , @xmath323 . by the selection of @xmath11 , we get that @xmath324 . by algorithm  [ alg : spanning_tree_ucm ] , we know that @xmath325 . hence , @xmath326 , @xmath322 . as we add @xmath291 to @xmath61",
    "we get that there is a @xmath39-@xmath11-path @xmath327 such that @xmath324 and @xmath321 , @xmath328 .",
    "this order @xmath61 defines the vote @xmath329 of the manipulators .",
    "[ thm : ucm_manip ] consider the order @xmath61 returned by algorithm  [ alg : spanning_tree_ucm ] .",
    "then @xmath330 , where @xmath331 .",
    "due to the construction of @xmath61 , we know that @xmath332 , @xmath300 as for each vertex @xmath10 there is a @xmath39-@xmath10-path @xmath333 such that @xmath302 and @xmath303 , @xmath304 .",
    "let us make sure that @xmath334 for each candidate @xmath300 . on the contrary ,",
    "suppose there is a candidate @xmath10 such that @xmath335 and suppose among all such vertices , @xmath10 has the shortest critical path to @xmath39 .",
    "denote by @xmath336 a shortest critical path from @xmath10 to @xmath39 .",
    "consider two cases depending on whether @xmath337 or @xmath338 .",
    "suppose that @xmath338 .",
    "we have that @xmath339 since the path @xmath120 is critical",
    ". therefore , @xmath340 by the selection of @xmath10 and @xmath120 .",
    "since candidates are added by non - increasing values of @xmath248 to @xmath61 , @xmath341 was added before @xmath10 , so that @xmath342 .",
    "thus , @xmath343 . by reduction rule 3 ,",
    "we have that @xmath344 .",
    "thus , @xmath345 , contradicting that @xmath120 has strength @xmath346 in @xmath160 .",
    "suppose that @xmath347 . in this case ,",
    "@xmath348 and @xmath349 . as @xmath39 is the top element of @xmath61 we have that @xmath350 .",
    "as algorithm  [ alg : bounds ] did not detect a failure , we know that @xmath351 .",
    "moreover , @xmath352 , by definition of the critical path . therefore , @xmath353 .",
    "hence , @xmath334 , contradicting that @xmath120 has strength @xmath346 in @xmath160 .",
    "note that corollary  [ col : wcm ] does not follow from theorem  [ thm : ucm_manip ] , because algorithm  [ alg : bounds ] takes @xmath354 time , where @xmath355 .",
    "as @xmath356 can be @xmath357 , algorithm  [ alg : bounds ] takes exponential number of steps in wcm .",
    "consider how algorithm  [ alg : spanning_tree_ucm ] works on example  [ exm : ucm_choices ] .",
    "the algorithm traverses @xmath65 by vertices ordered by the value @xmath229 , @xmath358 .",
    "initially , we start at @xmath39 , and @xmath276 and @xmath277 .",
    "we compute @xmath281 , @xmath359 .",
    "we consider all vertices @xmath295 such that @xmath360 , which is the set @xmath361 .",
    "we select one of those vertices , @xmath265 , that satisfies the condition on the value @xmath362 , @xmath294 , @xmath295 : @xmath363 . in the next four steps",
    "we add all elements of @xmath364 and obtain a partial order @xmath365 .",
    "the next maximum value @xmath366 is @xmath271 .",
    "the set of vertices such that @xmath367 is @xmath368 .",
    "hence , we add these vertices to @xmath61 one by one and obtain a total order @xmath369 .",
    "figure  [ fig : example5ba](b ) shows the wmg @xmath370 .",
    "we omitted all arcs of weight 1 for clarity .",
    "in this section we consider the unweighted coalitional manipulation problem with a single manipulator that was considered in  @xcite .",
    "parkes and xia showed that the _ unique winner ucm _ for schulze s rule with a single manipulator can be solved in polynomial time .",
    "we emphasize that in this variant the aim is to make the preferred candidate @xmath39 the unique winner .",
    "the aim of this section is to show that the proof from  @xcite can not be extended to the co - winner ucm problem with one manipulator .",
    "this demonstrates that the co - winner ucm problem with one manipulator was not resolved in @xcite .",
    "we also extend our algorithm for co - winner ucm to the unique winner case .",
    "another reason to investigate the relation between properties of unique winner and co - winner manipulation problems is that they are closely related to the choice of tie - breaking rules .",
    "if the tie - breaking rule breaks ties against the manipulators then the manipulators have to ensure that the preferred candidate is the unique winner of an election .",
    "if the tie - breaking rule breaks ties in favor of the manipulators then it is sufficient for the manipulators to guarantee that the preferred candidate is one of the co - winners of the election to achieve the desired outcome .",
    "the proof that the unique winner ucm is polynomial is based on the resolvability property ( * ? ? ?",
    "* section 4.2.2 ) .",
    "the resolvability criterion states that any co - winner can be made a unique winner by adding a single vote .",
    ": :    if @xmath371 for all candidates    @xmath372 , then there is a vote    @xmath373 such that    @xmath374 for all    candidates @xmath372 .",
    "the proof of the property is constructive .",
    "clearly , @xmath39 can be the unique winner in @xmath375 only if @xmath39 is a co - winner in @xmath5 .",
    "the vote @xmath373 is constructed using two rules that we describe below .",
    "we denote @xmath188 and @xmath376 to simplify notations .",
    "( 1 ) : :    for every alternative    @xmath377 , we require    @xmath378 in the manipulator s vote @xmath373 where    @xmath11 is the predecessor of @xmath10 on some    strongest path from @xmath39 to @xmath10 .",
    "( 2 ) : :    for any @xmath379 with    @xmath380 we require    @xmath291 in the manipulator s vote @xmath373 .",
    "it was shown in  @xcite that the resulting set of preference relations does not contain cycles and thus can be extended to a linear order which makes @xmath39 the unique winner . however , it was also shown in  @xcite that the same approach can not resolve ties between candidates that do not belong to the winning set .",
    "it is a natural question if a candidate @xmath39 that is not in the winning set can be made a winner by adding a single vote .",
    "clearly a necessary condition is @xmath381 for all @xmath382 .",
    "so we can formulate the following problem .    single vote ucm .",
    ": :    given a profile @xmath5 and a candidate @xmath39 with    @xmath383 for all    @xmath382 , does there exist a    single vote @xmath373 such that    @xmath384 ?    here , we show that the straightforward adaption of the above rules does not solve this problem , even if there is a single vote manipulation that makes @xmath39 a winner .     and the table of @xmath385 , @xmath29 from example  [ exm : ucm_no_winner ] ; ( b)/(c ) the wmg @xmath386 and the table of @xmath385/@xmath387 , @xmath388 from example  [ exm : ucm_cycles ] . ]",
    "a major difference between the unique winner and the co - winner ucm problems is that the manipulation always exists in the former problem and it might not exist in the latter as the following example demonstrates .",
    "[ exm : ucm_no_winner ] consider an election with five alternatives @xmath30 .",
    "figure  [ fig : example3](a ) shows the wmg and the corresponding table of maximum strengths .",
    "the unique winner is @xmath92 .",
    "however , the difference @xmath389 , @xmath111 .",
    "hence , @xmath39 satisfies the trivial necessary condition for being made a winner by adding a single vote .    to see that there is no successful manipulation we notice that @xmath390 .",
    "hence the manipulation must increase the weight of at least one critical @xmath39-@xmath114-path . as there is only one critical @xmath39-@xmath114-path",
    "this forces @xmath391 in the manipulator s vote .",
    "but on the other hand @xmath392 requires that the weight of every critical @xmath92-@xmath39-path decreases which implies that @xmath393 or @xmath394 , which gives a contradiction .",
    "consider the preference relations that are output by the rules .",
    "following the first rule we add @xmath395 and @xmath396 .",
    "following the second rule , we add @xmath397 .",
    "this creates a cycle and thus can not be completed to a linear order .",
    "next , we show that the rules do not find the manipulator vote even if such a manipulation exists for the co - winner ucm problem using examples  [ exm : ucm_cycles][exm : ucm_cycles2 ] .",
    "[ exm : ucm_cycles ] consider an election with four alternatives @xmath398 .",
    "figure  [ fig : example3](b ) shows its wmg and the corresponding table of maximum strengths .",
    "the set of winners is @xmath399 and @xmath389 , @xmath400 .",
    "following the first rule we add @xmath401 .",
    "however , by the second rule , we add @xmath402 which creates a cycle .",
    "note that a successful manipulation @xmath373 exists @xmath403 ( figure  [ fig : example3](c ) ) .",
    "[ exm : ucm_cycles2 ] consider the election with 11 alternatives from example  [ exm : ucm_choices ] .",
    "following the first rule we add @xmath404 to the manipulator vote as @xmath405 is a strongest path from @xmath39 to @xmath253 .",
    "as we showed in example  [ exm : ucm_choices ] , there does not exist an extension of this partial order to a total order that makes @xmath39 a co - winner .",
    "however , a successful manipulation @xmath373 exists ( figure  [ fig : example5ba](b ) ) .",
    "therefore , our study highlights a difference between unique winner and co - winner ucm under schulze s rule with a single manipulator and demonstrates that co - winner ucm with a single manipulator was not resolved .",
    "moreover , we believe that schulze s rule is an interesting example , where the tie - breaking in favor of a manipulator , which corresponds to co - winner ucm , makes the problem non - trivial compared to tie - breaking against manipulators , which corresponds to unique winner ucm .",
    "two rules with similar properties have been considered in the literature .",
    "conitzer , sandholm and lang  @xcite showed that copeland s rule is polynomial with 3 candidates in unique winner wcm , while it is np - hard with 3 candidates in co - winner wcm  @xcite .",
    "the most recent result is due to hemaspaandra , hemaspaandra and rothe  @xcite who showed that the online manipulation wcm is polynomial for plurality in the co - winner model , while it is conp - hard in the unique winner model .    our algorithm from section  [ sec : ucm ]",
    "can still be used as a subroutine to solve the unique winner ucm problem .",
    "the unique winner ucm problem can be solved in polynomial time .",
    "run the algorithm from section  [ sec : ucm ] with @xmath406 manipulators and return the answer .",
    "to show the correctness of this procedure , we need to show that @xmath39 is a co - winner with @xmath406 manipulators iff @xmath39 is a unique winner with @xmath407 manipulators .",
    "@xmath408 : suppose @xmath39 can be made a co - winner with @xmath406 manipulators .",
    "use the resolvability property to add one more vote to make @xmath39 a unique winner .",
    "@xmath409 : suppose @xmath39 can be made a unique winner with @xmath407 manipulators .",
    "therefore , @xmath410 for every candidate @xmath411 in the profile @xmath412 .",
    "now , remove an arbitrary vote of a manipulator and obtain the profile @xmath59 .",
    "we have that @xmath413 and @xmath414 for every candidate @xmath411 .",
    "therefore , @xmath415 for every candidate @xmath411 , showing that @xmath39 is a co - winner with @xmath406 manipulators .",
    "we have investigated the computational complexity of the coalitional weighted and unweighted manipulation problems under schulze s rule .",
    "we proved that it is polynomial to manipulate schulze s rule with any number of manipulators in the weighted co - winner model and in the unweighted case in both unique and co - winner models .",
    "this resolves an open question regarding the computational complexity of unweighted coalition manipulation for schulze rule  @xcite .",
    "this vulnerability to manipulation may be of concern to the many supporters of schulze s rule .",
    "nicta is funded by the australian government as represented by the department of broadband , communications and the digital economy and the australian research council .",
    "this research is also funded by aoard grant 124056 .",
    "serge gaspers acknowledges support from the australian research council ( grant de120101761 ) .",
    "l.  xia , m.  zuckerman , a.d .",
    "procaccia , v.  conitzer , and j.s .",
    "complexity of unweighted coalitional manipulation under some common voting rules . in _ proc . of 21st int .",
    "joint conference on ai_. 2009 ."
  ],
  "abstract_text": [
    "<S> schulze s rule is used in the elections of a large number of organizations including wikimedia and debian . </S>",
    "<S> part of the reason for its popularity is the large number of axiomatic properties , like monotonicity and condorcet consistency , which it satisfies . </S>",
    "<S> we identify a potential shortcoming of schulze s rule : it is computationally vulnerable to manipulation . in particular , we prove that computing an unweighted coalitional manipulation ( ucm ) is polynomial for any number of manipulators . </S>",
    "<S> this result holds for both the unique winner and the co - winner versions of ucm . </S>",
    "<S> this resolves an open question in  @xcite . </S>",
    "<S> we also prove that computing a weighted coalitional manipulation ( wcm ) is polynomial for a bounded number of candidates . </S>",
    "<S> finally , we discuss the relation between the _ unique _ winner ucm problem and the _ co - winner _ ucm problem and argue that they have substantially different necessary and sufficient conditions for the existence of a successful manipulation . </S>"
  ]
}