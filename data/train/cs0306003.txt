{
  "article_text": [
    "the grid monitoring architecture ( gma)@xcite of the ggf , as shown in figure  [ figure - gma ] , consists of three components : _ consumers _ , _ producers _ and a directory service , which we prefer to call a _ registry _ ) .        in the gma producers",
    "register themselves with the registry and describe the type and structure of information they want to make available to the grid .",
    "consumers can query the registry to find out what type of information is available and locate producers that provide such information .",
    "once this information is known the consumer can contact the producer directly to obtain the relevant data . by specifying the consumer / producer protocol and the interfaces to the registry one can build inter - operable services .",
    "the registry communication is shown on figure  [ figure - gma ] by a dotted line and the main flow of data by a solid line .",
    "the current gma definition also describes the registration of consumers , so that a producer can find a consumer .",
    "the main reason to register the existence of consumers is so that the registry can notify them about changes in the set of producers that interests them .",
    "the gma architecture was of course devised for monitoring but we think it makes an excellent basis for a _ combined _ information and monitoring system .",
    "we have argued before@xcite that the only thing which characterises monitoring information is a time stamp , so we insist upon a time stamp on all measurements - saying that this is the time when the measurement was made , or equivalently the time when the statement represented by the tuple was true .",
    "the gma does not constrain any of the protocols nor the underlying data model , so we were free when producing our implementation to adopt a data model which would allow the formulation of powerful queries over the data .",
    "r - gma is a relational implementation of the gma which brings the power and flexibility of that model .",
    "r - gma creates the impression that you have one rdbms per vo .",
    "however it is important to appreciate that what our system provides is a way of using the relational model in a grid environment and that we have _ not _ produced a general distributed rdbms .",
    "all the producers of information are quite independent .",
    "it is relational in the sense that producers announce what they have to publish via an sql create table statement and publish with an sql insert and that consumers use an sql select to collect the information they need .",
    "r - gma is built using servlet technology and is being migrated rapidly to web services and specifically to fit into an ogsa@xcite framework .",
    "we have so far defined not just a single producer but five different types : a databaseproducer , a streamproducer , a resilientproducer , a latestproducer and a canonicalproducer .",
    "all appear to be producers as seen by a consumer - but they have different characteristics .",
    "the canonicalproducer , though in some respects the most general , is somewhat different as there is no user interface to publish data via an sql ` insert ` statement .",
    "instead it triggers user code to answer an sql query .",
    "the other producers are all ` insertable ` ; this means that they all have an interface accepting an sql ` insert ` statement .",
    "the other producers are instantiated and given the description of the information they have to offer by an sql ` create table ` statement and a ` where ` clause expressing a predicate that is true for the table .",
    "currently this is of the form ` where ( column_1=value_1 and column_2=value_2 and ... ) ` . to publish data ,",
    "a method is invoked which takes the form of a normal sql ` insert ` statement .",
    "three kinds of query are supported : history , latest and continuous .",
    "the history query might be seen as the more traditional one , where you want to make a query over some time period - including.``all time '' .",
    "the latest query is used to find the current value of something and a continuous query provides the client with all results matching the query as they are published .",
    "a continuous query is therefore acting as a filter on published data .",
    "the databaseproducer supports history queries .",
    "it writes each record to an rdbms .",
    "this is slow ( compared to a streamproducer ) but it can handle joins .",
    "the streamproducer supports continuous queries and writes information to a memory structure where it can be picked up by a consumer .",
    "the resilientstreamproducer is similar to the streamproducer but information is backed up to disk so that no information is lost in the event of a system crash .",
    "the latestproducer supports latest queries by holding only the latest records in an rdbms .",
    "latest records are defined in terms of something similar to a primary key .",
    "each record has a time stamp , one or more fields which define what is being measured ( e.g. a hostname ) and one or more fields which are the measurement ( e.g. the 1 minute cpu load average ) .",
    "the time stamp and the defining fields are close to being a primary key - but as there is no way of knowing who is publishing what across the grid , the concept of primary key ( as something globally unique ) makes no sense .",
    "the latestproducer will replace an earlier record having the same defining fields , as long as the time stamp on the new record is more recent , or the same as the old one .",
    "producers , especially those using an rdbms , may need cleaning from time to time .",
    "we provide a mechanism to specify those records of a table to delete by means of a user specified sql ` where ` clause which is executed at intervals which are also specified by the user . for example it might delete records more than a week old from some table or it may only hold the newest one hundred rows , or it might just keep one record from each day .    another valuable component is the archiver which is a combined consumer - producer . you just have to tell it what to collect and it does so on your behalf .",
    "an archiver works by taking over control of an existing producer and instantiating a consumer for each table it is asked to archive .",
    "this consumer then connects via the mediator to all suitable producers and data starts streaming from those producers , through the archiver and into the new producer .",
    "the inputs to an archiver are always streams from a streamproducer or a resilientstreamproducer .",
    "it will re - publish to any kind of `` insertable '' .",
    "this allows useful topologies of components to be constructed such as the one shown in figure  [ figure - topo ] .",
    "this shows a number of streamproducers ( labelled sp ) which is normally the entry point to r - gma .",
    "there is then a layer of archivers ( a ) publishing to another streamproducer .",
    "finally there is an archiver to a latestproducer ( lp ) and an archiver to a databaseproducer ( dp ) to answer both latest and history queries .",
    "we intend to allow some kinds of producer to answer more than one kind of query - but for now we are keeping it simple .",
    "r - gma has applications right across the grid .",
    "first it can be used as a replacement for mds . a small tool ( gin ) has been written to invoke the mds - like edg info - providers and publish the information via r - gma .",
    "the info - provider is a small script which can be invoked to produce information in ldif format .",
    "all our information providers conform to the glue ( http://www.cnaf.infn.it/  sergio / datatag / glue/ ) schema .",
    "another tool ( gout ) is available to republish r - gma data to an ldap server for the benefit of legacy applications .",
    "however we expect that most applications will wish to benefit from the power of relational queries .",
    "gout is an archiver with a consumer which periodically publishes to an ldap database .",
    "the gin - gout combination is not efficient - but it works .",
    "both gin and gout are driven by configuration files which define the mapping between the ldap schema and the relational schema .",
    "r - gma is also being used for network monitoring where the flexibility of the relational model offers a more natural description of the problem .",
    "it is also being used to locate replica catalogs , and to publish information to two tables , the service table and the servicestatus table .",
    "a service publishes its existence when it starts up with an entry in the service table .",
    "it does this using a streamproducer .",
    "an archiver to a latestproducer is instantiated to collect all service information in one place .",
    "there are also processes which check the functioning of a service and publish the status frequently to the servicestatus table .",
    "this is also published via a streamproducer and is collected by the same archiver that is used for archiving the service table .",
    "so the service table says what should exist and the servicestatus gives the current state grid wide .",
    "grm was written for monitoring parallel applications@xcite where it writes logging information to a local file .",
    "this has recently been modified to make use of r - gma for transport .",
    "in addition cms have adapted their boss system which previously wrote to a well known rdbms to simply publish the job status information via r - gma .",
    "this boss work is reported at this conference .",
    "there are a number of tools available to query r - gma producers .",
    "there is a command line tool , a java application : pulse , and the r - gma browser , which is accessible from a web browser without any r - gma installation .",
    "the browser offers a few custom queries , and makes it easy for you to write your own .",
    "the command line tool , which is written in python , is the most powerful .",
    "it is designed to do simple things very easily - but if you want to do more complex things you must code them yourself .",
    "it supports one instance of each kind of producer and one archiver at any one time .",
    "you can also find what tables exist , find details of a table and issue any kind of query .",
    "the registry stores information about all producers currently available . currently there is only one physical registry per vo .",
    "this bottleneck and single point of failure is being eliminated .",
    "code is being written to allow multiple copies of the registry to be maintained .",
    "each one acts as master of the information which was originally stored in that registry instance and has copies of the information from other registry instances .",
    "synchronisation is carried out frequently .",
    "currently vos are disjoint , we plan to allow information to be published to a set of vos .",
    "the mediator ( which is hidden behind the consumer interface ) is the component which makes r - gma easy to use .",
    "producers are associated with views on a virtual data base .",
    "currently views have the form :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ select * from @xmath0table@xmath1 where @xmath0predicate@xmath1 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    this view definition is stored in the registry .",
    "when queries are posed , the mediator uses the registry to find the right producers and then combines information from them .",
    "r - gma is currently based on servlet technology .",
    "each component has the bulk of its implementation in a servlet .",
    "multiple apis in java , c++ , c , python and perl are available to communicate with the servlets .",
    "the basic ones are the java and c++ apis which are completely written by hand .",
    "the c api calls the c++ and the python and perl are generated by swig .",
    "we make use of the tomcat servlet container . most of the code is written in java and is therefore highly portable .",
    "the only dependency on other edg software components is in the security area .",
    "figure  [ figure - rgma ] shows the communication between the apis and the servlets .",
    "when a producer is created its registration details are sent via the producer servlet to the registry ( figure  [ figure - rgma]a ) .",
    "the registry records details about the producer , which include the description and view of the data published , _ but not the data itself_. the description of the data is actually stored as a reference to a table in the schema . in practise",
    "the schema is co - located with the registry .",
    "then when the producer publishes data , the data are transferred to a local producer servlet ( figure  [ figure - rgma]b ) .    when a consumer is created its registration details",
    "are also sent to the registry although this time via a consumer servlet ( figure  [ figure - rgma]c ) .",
    "the registry records details about the type of data that the consumer is interested in .",
    "the registry then returns a list of producers back to the consumer servlet that match the consumers selection criteria .",
    "the consumer servlet then contacts the relevant producer servlets to initiate transfer of data from the producer servlets to the consumer servlet as shown in .",
    "the data are then available to the consumer on the consumer servlet , which should be close in terms of the network to the consumer ( figure  [ figure - rgma]f ) .    as details of the consumers and their selection criteria",
    "are stored in the registry , the consumer servlets are automatically notified when new producers are registered that meet their selection criteria .",
    "the system makes use of soft state registration to make it robust .",
    "producers and consumers both commit to communicate with their servlet within a certain time .",
    "a time stamp is stored in the registry , and if nothing is heard by that time , the producer or consumer is unregistered . the producer and consumer servlets keep track of the last time they heard from their client , and ensure that the registry time stamp is updated in good time .",
    "unfortunately we have few results to offer at this stage .",
    "it has taken some time to get from the state of having something which passes all its unit tests ( about 400 for the java api ) to a stable distributed system - which we think we now have .",
    "we have just started running performance tests to understand the behaviour of the code .",
    "we have so far tested with many producers , and one archiver feeding into a latestproducer which is then queried to make sure that the archiver is keeping up with the total flow of data .",
    "the producers are publishing data following the pattern expected of a `` typical '' site having an se ( storage element ) and 3 ces ( computing elements ) .",
    "we found that we were able to support around 40 to 50 sites publishing data every 30 seconds .",
    "a producer is able to publish individual tuples or a vector of tuples .",
    "changing this buffering had little effect on the maximum number of sites the system is able to support .",
    "we will use tools to analyse the code to understand precisely where the bottlenecks are occurring - in particular to find out why buffering did not have the beneficial effect we expected .",
    "in general we expect to be able to do better by modifying tomcat settings , the virtual machine settings and getting more physical memory . to achieve better performance we may need a layer of archivers combining streams into bigger streams so as to limit the fan - in to any one node . the other way to obtain significantly better",
    "performance is not to attempt to get all the information into one place .",
    "as the mediator becomes more powerful , it will be able to make use of multiple latestproducer archives , and carry out a distributed query over them .    the effort involved in making meaningful measurements on such a system as r - gma",
    "should not be underestimated !",
    "we have a useful architecture and an effective implementation with a number of components which work well together . we hope that r - gma will have a long , happy and useful life , both in its current form and when reincarnated within an ogsa framework . for more details of r - gma",
    ", please see : http://hepunx.rl.ac.uk/edg/wp3/"
  ],
  "abstract_text": [
    "<S> we describe r - gma ( relational grid monitoring architecture ) which is being developed within the european datagrid project as an grid information and monitoring system . </S>",
    "<S> is is based on the gma from ggf , which is a simple consumer - producer model . </S>",
    "<S> the special strength of this implementation comes from the power of the relational model . </S>",
    "<S> we offer a global view of the information as if each vo had one large relational database . </S>",
    "<S> we provide a number of different producer types with different characteristics ; for example some support streaming of information . </S>",
    "<S> we also provide combined consumer / producers , which are able to combine information and republish it . at the heart of the system </S>",
    "<S> is the mediator , which for any query is able to find and connect to the best producers to do the job . </S>",
    "<S> we are able to invoke mds info - provider scripts and publish the resulting information via r - gma in addition to having some of our own sensors . </S>",
    "<S> apis are available which allow the user to deploy monitoring and information services for any application that may be needed in the future . </S>",
    "<S> we have used it both for information about the grid ( primarily to find what services are available at any one time ) and for application monitoring . </S>",
    "<S> r - gma has been deployed in grid testbeds , we describe the results and experiences of this deployment . </S>"
  ]
}