{
  "article_text": [
    "in the vehicle routing problem ( vrp ) a set of customers with certain requests are to be visited by vehicles .",
    "the vehicles are to be chosen from a fleet of heterogeneous vehicles , with various fixed and variable costs of usage .",
    "the objective is to find a minimum cost schedule for customer visits to deliver required services in the specified time and manner .",
    "the scheduling of visits may need to satisfy some additional constraints , e.g. with some visits demanded on particular days , or by particular vehicles , etc .",
    "it would not be an exaggeration to say that thousands of research papers devoted to the vrps are published every year .",
    "as rightly mentioned by michael drexl @xcite , this `` is certainly due to the intellectual challenge vrps pose as well as to their relevance in logistics and transport '' .",
    "the vrp can be viewed as a combination of the two well known combinatorial optimization problems - the travelling salesman problem ( see e.g. @xcite ) and the bin packing / knapsack problem ( see e.g. @xcite ) .",
    "it is not surprising that the combination of these two problems creates new computational challenges for researchers and practitioners .",
    "for instance , the sizes of the tsp instances which are tractable by recently developed computational algorithms @xcite are much bigger than the sizes of easy tractable vrp instances .    in many practical applications the number of customers visited by a single vehicle are not very large .",
    "we mention here just a few contextual examples : teachers visiting special needs pupils , nurses attending patients at home , food delivery in rural areas ( long distances - hence few customers to visit ) , bulk deliveries of industrial goods ( large items - hence few customers ) .",
    "the task of allocation of customers to vehicles adds a lot of complexity to the vrp , especially due to the various additional constraints arising in practice .",
    "the vrps with multiple practice related constraints are referred to in recent publications as _ rich _ vrps ( see surveys @xcite ) , or _",
    "multi - attribute _",
    "vrps @xcite .",
    "in our study we decided to concentrate on the simplest possible version of the rich vrp - the vrp with many constraints / attributes but with only two vehicles , which we call the 2vrp .",
    "further on , keeping in mind the practical applications mentioned above , we studied small ( with not many customers ) but rich vrps ( hence the title of the paper ) .",
    "we hope that better understanding of the 2vrp would allow researchers to develop new algorithms for the vrps with many vehicles . a straightforward approach for the vrp with many vehicles could for instance be a heuristic which enumerates all possible pairs of vehicles and iteratively solves the 2vrps .",
    "the approach described in this paper is based on the well known held and karp dynamic programming approach @xcite .",
    "we are not the first who suggest using dynamic programming techniques for the vrps ( see e.g. @xcite ) .",
    "the way we use dynamic programming is different though to what has been suggested so far .",
    "we suggest a framework which permits to easily incorporate additional constraints and vary the objective function to optimise ( see @xcite for frameworks suggested for various types of the vrps ) . to address the _ curse of dimensionality _ in dynamic programming , an aggregation scheme is included in the framework .",
    "we tested our framework on the 2-period balanced travelling salesman problem @xcite .",
    "the results of computational experiments are impressive : for 60 benchmark instances suggested in @xcite , better solutions have been found for 57 instances .",
    "in this section we introduce a model for a vehicle routing problem ( vrp ) with only two vehicles ( 2vrp ) . we describe objects involved in the model and attributes associated with each object . in what follows we use an approach which finds optimal solutions for small size problems . to reduce the size of an initial problem we suggest making use of various aggregation techniques . as an example of a possible aggregation",
    ", one can think of considering all customers on a street as one customer with the demand defined as the sum of demands for the customers on that street .",
    "there are two _ not homogeneous _",
    "vehicles , vehicle 1 and vehicle 2 , in the 2vrp .",
    "they have different capacities @xmath0 and @xmath1 and different costs of travelling .",
    "the vehicles will be used for delivering demanded goods to customers .",
    "we assume that each customer is located in an estate with only two entry points .",
    "a network of one - way roads within the estate connects these two points .",
    "so the travel costs within the estate are asymmetric costs .",
    "to distinguish between two entry points to the estate , we refer to one of the points as the _ left node _ and denote it by @xmath2 .",
    "the other of the two points is referred to as the _ right node _ , and is denoted by @xmath3 .",
    "we assume that customer @xmath4 in our problem has a set of seven attributes @xmath5 with the following meaning :    * the left node @xmath2 ; * the right node @xmath3 ; * cost of travelling from the left node to the right node @xmath6 , if travelled by vehicle @xmath7 , @xmath8 ; * cost of travelling from the right node to the left node @xmath9 , if travelled by vehicle @xmath7 , @xmath8 ; * the demand @xmath10 .",
    "so , given a set of @xmath11 customers @xmath12 , with the demands @xmath10 , they have to be visited by one of the two vehicles which delivers the demanded goods from depots to the customers .",
    "the total demand of all customers is less than the total capacity of the two vehicles , so only one route per vehicle is needed .",
    "the vehicles may travel from different depots and return to different depots .",
    "assume that vehicle 1 travels from depot @xmath13 and returns to depot @xmath14 , and vehicle 2 travels from depot @xmath15 and returns to depot @xmath16 .",
    "the costs of travelling between the nodes are given by the two @xmath17 cost matrices @xmath18 and @xmath19 , where @xmath20 is the cost of travelling by vehicle @xmath7 from node @xmath4 to node @xmath21 .",
    "a visit of customer @xmath4 adds to the travel costs either cost @xmath6 , or cost @xmath9 depending on the way the customer is visited - from the left entry node , or from the right entry node .",
    "our approach will utilise the well known dynamic programming algorithm for the travelling salesman problem .",
    "so we would like to view routes for the two vehicles as one route . to simplify further considerations",
    ", we introduce an auxiliary customer @xmath22 with the set of attributes @xmath23 .",
    "the reason for introduction of the auxiliary customer @xmath22 and placing it into the two - vehicle route is to separate points visited by the two different vehicles .",
    "cost of travelling from @xmath14 to @xmath15 costs nothing , while travelling in opposite direction is forbidden ( by the infinitely large cost ) .",
    "the two - vehicle route starts from the node @xmath13 , visits all customers from the set @xmath24 , and ends in the node @xmath16 .",
    "vehicle 1 is the first to start visiting customers in the route .",
    "visiting customer @xmath22 means that the mode of travelling is changed from travelling by vehicle 1 to travelling by vehicle 2 .",
    "vehicle 2 will travel from customer @xmath22 , i.e.  from depots @xmath15 , to depot @xmath16 .",
    "the objective is to find a minimum cost route of delivering the requested demand to all customers .",
    "the total demand of customers visited by each vehicle should not exceed the corresponding vehicle s capacity .      in this section ,",
    "the well known held & karp @xcite dynamic programming algorithm for the tsp is adapted for the case of the 2vrp formulated above .",
    "let @xmath25 be a subset of customers not containing @xmath4 , so @xmath26 , @xmath27 .",
    "denote as @xmath28 $ ] the minimum cost of an optimal 2-vehicle route among all routes which start from a visit of customer @xmath4 from the corresponding left node , then visit all the customers in set @xmath25 , and stop in depot @xmath15 . similarly , define @xmath29 $ ] to be the cost of the optimal route that starts visiting customer @xmath4 from the corresponding right node , and visits then the customers in @xmath25 .",
    "the optimal cost of a 2-vehicle tour can be calculated as    @xmath30,c^1_{d^1_r , r(i)}+{\\mbox{$\\mathrm{vr}$}}[i , u\\setminus \\{i\\}]\\}.\\ ] ]    ( 1.55,1.11 ) rectangle ( 17.,10.3 ) ; ( 2.,6.) ( 4.,6 . ) ; ( 6.007042253521121,6.535211267605635) ( 8.00704225352112,6.535211267605635 ) ; ( 6.,5.492957746478873) ( 8.,5.492957746478873 ) ; ( 7.,6.001760563380284 ) ellipse ( 1.5307841759435992 cm and 1.5179812710839782 cm ) ; ( 12.163732394366187,6.32218309859155 ) ellipse ( 2.971769702905846 cm and 2.428082112076715 cm ) ; ( 10.943661971830982,6.026408450704226 ) ellipse ( 5.81427438136858 cm and 3.271811342548349 cm ) ; ( 9.4,2.7 ) node[anchor = north west ] set of customers @xmath25 ; ( 10.278169014084503,5.545774647887325 ) node[anchor = north west ] set of customers @xmath31 ; ( 6.,5.4 ) node[anchor = north west ] customer @xmath21 ; ( 11.95422535211267,7.616197183098592) ( 13.137323943661965,7.616197183098592 ) ; ( 11.239436619718305,8.330985915492958 ) node[anchor = north west ] @xmath14 ; ( 13.383802816901403,8.28169014084507 ) node[anchor = north west ] @xmath15 ; ( 11.63,7.4 ) node[anchor = north west ] customer @xmath32 ; ( 3.9,7.3 ) node[anchor = north west ] @xmath33 ; ( 3.9,5.6 ) node[anchor = north west ] @xmath34 ; ( 4.,6.) ( 6.007042253521121,6.535211267605635 ) ; ( 5.128553288839242,6.300947543690467 ) ",
    "( 5.046389296616109,6.106849996844511 ) ; ( 5.128553288839242,6.300947543690467 ) ",
    "( 4.960652956905013,6.428361270761123 ) ; ( 4.,6.) ( 6.,5.492957746478873 ) ; ( 5.125433196241976,5.714678907994991 ) ",
    "( 4.959114330399999,5.585207620928324 ) ; ( 5.125433196241976,5.714678907994991 ) ",
    "( 5.0408856696,5.907750125550549 ) ; ( 8.00704225352112,6.535211267605635) ( 10.031690140845065,6.531690140845072 ) ; ( 9.14876740994213,6.533225658637946 ) ",
    "( 9.019076852856427,6.367077716392306 ) ; ( 9.14876740994213,6.533225658637946 ) ",
    "( 9.01965554150976,6.699823692058401 ) ; ( 8.,5.492957746478873) ( 9.982394366197179,5.471830985915494 ) ; ( 9.120591243742526,5.481015388641475 ) ",
    "( 8.989424211955537,5.316030573940693 ) ; ( 9.120591243742526,5.481015388641475 ) ",
    "( 8.992970154241641,5.648758158453672 ) ; ( 7.1,8.3 ) node[anchor = north west ] @xmath35 $ ] ; ( 7.3,4.7 ) node[anchor = north west ] @xmath36 $ ] ; ( 6.063380281690138,7.369718309859155 ) node[anchor = north west ] @xmath37 ; ( 7.542253521126757,7.345070422535212 ) node[anchor = north west ] @xmath38 ; ( 5.94014084507042,6.334507042253522 ) node[anchor = north west ] @xmath38 ; ( 7.616197183098588,6.285211267605635 ) node[anchor = north west ] @xmath37 ; ( 2.,6 . )",
    "node[anchor = north west ] customer @xmath4 ; ( 1.57,6.7 ) node[anchor = north west ] @xmath2 ; ( 2.637323943661972,7.073943661971831 ) node[anchor = north west ] @xmath39 ;    ( 2.,6 . )",
    "circle ( 2.5pt ) ; ( 4.,6 . ) + + ( -2.5pt,0 pt )  + +",
    "( 2.5pt,2.5pt)++(2.5pt,-2.5pt)++(-2.5pt,-2.5pt)++(-2.5pt,2.5pt ) ; ( 6.007042253521121,6.535211267605635 ) circle ( 2.5pt ) ; ( 8.00704225352112,6.535211267605635 ) + + ( -2.5pt,0 pt )  + + ( 2.5pt,2.5pt)++(2.5pt,-2.5pt)++(-2.5pt,-2.5pt)++(-2.5pt,2.5pt ) ; ( 6.,5.492957746478873 ) + + ( -2.5pt,0 pt )  + + ( 2.5pt,2.5pt)++(2.5pt,-2.5pt)++(-2.5pt,-2.5pt)++(-2.5pt,2.5pt ) ; ( 8.,5.492957746478873 ) circle ( 2.5pt ) ; ( 11.95422535211267,7.616197183098592 ) circle ( 2.5pt ) ; ( 13.137323943661965,7.616197183098592 ) + + ( -2.5pt,0 pt )  + +",
    "( 2.5pt,2.5pt)++(2.5pt,-2.5pt)++(-2.5pt,-2.5pt)++(-2.5pt,2.5pt ) ;    we assume here that the total demand from customers is bigger than the capacity of each of the vehicles , so in the formula above @xmath22 can not be the first customer .",
    "values @xmath28 $ ] and @xmath29 $ ] for all customers @xmath4 and subsets @xmath25 , @xmath40 , are calculated as shown in the recursions below :    @xmath41 & = \\begin{cases } \\left .",
    "\\min_{j\\in j } \\begin{cases }                  l^1_l(i)+c^1_{r(i),l(j)}+{\\mbox{$\\mathrm{vl}$}}[j , j\\setminus\\{j\\ } ] \\\\",
    "l^1_l(i)+c^1_{r(i),r(j)}+{\\mbox{$\\mathrm{vr}$}}[j , j\\setminus\\{j\\ } ] \\end{cases } \\hspace{-2.0ex}\\right\\ } & \\mbox{if } 0\\in j , \\\\",
    "\\min_{j\\in j } \\begin{cases }                  l^2_l(i)+c^2_{r(i),l(j)}+{\\mbox{$\\mathrm{vl}$}}[j , j\\setminus\\{j\\}]\\\\                  l^2_l(i)+c^2_{r(i),r(j)}+{\\mbox{$\\mathrm{vr}$}}[j , j\\setminus\\{j\\ } ] \\end{cases } \\hspace{-2.0ex}\\right\\ } & \\mbox{if } 0\\notin j , w(\\{i\\}\\cup j)\\le w_2\\\\ \\infty & \\mbox{otherwise } \\end{cases } \\end{aligned}\\ ] ]    @xmath42 & = \\begin{cases } \\left .",
    "\\min_{j\\in j } \\begin{cases }                  l^1_r(i)+c^1_{l(i),l(j)}+{\\mbox{$\\mathrm{vl}$}}[j , j\\setminus\\{j\\ } ] \\\\",
    "l^1_r(i)+c^1_{l(i),r(j)}+{\\mbox{$\\mathrm{vr}$}}[j , j\\setminus\\{j\\ } ] \\end{cases } \\hspace{-2.0ex}\\right\\ } & \\mbox{if } 0\\in j , \\\\\\\\\\left .",
    "\\min_{j\\in j } \\begin{cases }                  l^2_r(i)+c^2_{l(i),l(j)}+{\\mbox{$\\mathrm{vl}$}}[j , j\\setminus\\{j\\}]\\\\                  l^2_r(i)+c^2_{l(i),r(j)}+{\\mbox{$\\mathrm{vr}$}}[j , j\\setminus\\{j\\ } ] \\end{cases } \\hspace{-2.0ex}\\right\\ } & \\mbox{if } 0\\notin j , w(\\{i\\}\\cup j)\\le w_2\\\\ \\infty & \\mbox{otherwise } \\end{cases } \\end{aligned}\\ ] ]    @xmath43 & = \\begin{cases } \\left .",
    "\\min_{j\\in j } \\begin{cases }                  c^2_{r(0),l(j)}+{\\mbox{$\\mathrm{vl}$}}[j , j\\setminus\\{j\\}\\\\                  c^2_{r(0),r(j)}+{\\mbox{$\\mathrm{vr}$}}[j , j\\setminus\\{j\\ } \\end{cases } \\hspace{-2.0ex}\\right\\ } & \\mbox{if } \\begin{cases}w(u\\setminus ( \\{i\\}\\cup j))\\le w_1,\\\\   \\mbox{and } w(\\{i\\}\\cup j)\\le w_2 \\end{cases}\\\\ \\infty & \\mbox{otherwise } \\end{cases } \\end{aligned}\\ ] ]    the boundary conditions are : @xmath44 & =                 l^2_r(i)+c^2_{l(i),l(0 ) } , \\\\ { \\mbox{$\\mathrm{vr}$}}[i,\\emptyset ] & =                 l^2_l(i)+c^2_{r(i),l(0)}. \\end{aligned}\\ ] ]    recursions ( [ eq : dp0])-([eq : dpb ] ) extend held & karp recursions to the case of 2vrp : since there are only two vehicles , the capacity constraints are easily verified without any extra dimensions or complicated calculations .",
    "notice that we use notation @xmath45 for the sum of demands of all items in set @xmath25 . for instances with relatively small sizes ,",
    "these days computers perform calculations ( [ eq : dp0])-([eq : dpb ] ) within seconds .",
    "however when the number of customers approaches @xmath46 , the computations on a standard laptop become more and more problematic . to make the dynamic programming approach practical , we suggest an aggregation strategy described in the next section .",
    "( 11.5,7.5 )    ( 10.5,6.5 )   customers.,title=\"fig : \" ]    as was mentioned above , the dynamic programming approach can be used for small size problems but may become impractical in real life applications . in this section",
    "we describe an approach for data aggregation and reducing the size of the initial problem .",
    "we start with a feasible 2vrp solution with @xmath11 customers .",
    "we  cut \" this solution into a small number of sub - paths .",
    "one can think of various possible ways of cutting a 2-vrp solution into sub - paths .",
    "each subpath is replaced then by a new customer .",
    "the way we describe the customers in the 2vrp in the previous section permits an easy replacement of any subpath by a new customer .",
    "a left node for the new customer is the first node in the subpath ( i.e. either left or right node of the first customer ) ; the right node of the new customer is the last node in the subpath ; the demand of the new customer is the sum of the demands of customers in the sub - path ; the left / right lengths are calculated as the corresponding lengths of the subpath .",
    "obviously , an exact solution obtained for a new small - size problem can be viewed only as an approximate solution for the initial 2-vrp .",
    "this approximate solution can be again  disassembled \" into a small number of sub - paths , and the process of solving small size problems is repeated again , until all possible ways of disassembling and aggregating a solution have been enumerated and no further improvement was achieved .",
    "we suggest the following straightforward approach , which we call the sliding sub - sets method .",
    "assume that we have an initial solution to the 2vrp : @xmath47 . here",
    "vehicle one s route is @xmath48 and vehicle two s route is @xmath49 .",
    "we disassemble this solution into a new set of customers for the new 2vrp according to the following procedure .",
    "first , define @xmath22 as a customer in the new 2vrp and delete it from @xmath50 .",
    "let @xmath51 now be a small constant , a parameter of the algorithm .",
    "choose two subsets of customers containing @xmath51 items each so that the customers in each subset are picked from consecutive positions in @xmath50 .",
    "subset @xmath52 will always contain at least one customer from vehicle @xmath53 s route , and @xmath54 contains at least one customer from vehicle @xmath55 s route .",
    "on the first disassembling step define the first subset as @xmath56 , and the second subset as @xmath57 .",
    "notice that subset @xmath54 is chosen to ensure that at least one customer from vehicle 2 s route is included in the subset .",
    "delete @xmath52 and @xmath54 from @xmath50 and add them to the set of customers in the new 2vrp .",
    "consider @xmath58 as a new customer , delete it from @xmath50 .",
    "sub - paths which are left in @xmath50 are considered as aggregated customers and added to the new 2vrp . on the first step",
    "these are : depot @xmath59 , sub - path @xmath60 , and the sub - path @xmath61 .",
    "so the new 2vrp contains @xmath62 customers ( depots are counted here as customers ) .",
    "figure [ fig : disassembling1 ] illustrates the concept of sliding subsets . to simplify drawings the customers",
    "are depicted as points , however we treat them rather as segments , as described in the previous section . on the other hand ,",
    "the nodes in the tour are not connected by straight lines , as one would expect .",
    "recall that in our model we view customers as  paths \" , therefore curves are chosen to illustrate the connections .    if no better solution is found , we redefine subset @xmath54 by deleting , say , @xmath63 first elements and adding @xmath63 new elements ( @xmath63 is a parameter , to which we refer as the _ step _ )",
    ". so subset @xmath54 slides along the tour .",
    "we repeat the process until we reach the end of the tour .",
    "then we change ( slide ) set @xmath52 ( with the step @xmath63 ) and redefine set @xmath54 to follow set @xmath52 similar to the first step settings described above .",
    "if the solution of the 2vrp was improved , the process of disassembling is applied to the new solution .",
    "the process is stopped when all possible positions for subsets @xmath52 and @xmath54 are considered and no improvements found .",
    "( 10.5,8.6 )   and @xmath54 are separated by one sub - path only ; ( b ) an example when @xmath52 and @xmath54 are separated by two sub - paths and a depot ; ( c ) depot and the first subpath are considered as one customer ; ( d ) modified first step : a subpath between @xmath52 and @xmath54 ( case ( a ) ) is partitioned into a sub - path and a single customer to keep the size of the new 2vrp fixed .",
    ", title=\"fig : \" ]    [ [ details - of - implementation . ] ] details of implementation",
    ". + + + + + + + + + + + + + + + + + + + + + + + + + +    in the follow up computational experiments we used a modification of the approach described above .",
    "the parameters of the algorithm are the size of the subsets @xmath51 and step @xmath63 . to keep the size of the small 2vrp fixed and defined by only these two parameters , we implement the disassembling procedure as described below .",
    "we refer to figure [ fig : disassembling2 ] in our explanations of various steps ( and possibilities ) for disassembling .",
    "figure [ fig : disassembling2](a ) illustrates the first step of the disassembling process as was described above ( with parameter @xmath64 ) .",
    "sets @xmath52 and @xmath54 are separated by one sub - path in this case .",
    "the size of the new small 2vrp is @xmath65 .    in the illustrations we set step @xmath66 .",
    "[ fig : disassembling2](b ) ) illustrates the outcome of disassembling the tour on the second step . notice that depot @xmath22 was already removed from the tour , therefore setting @xmath66 yields the position of @xmath54 as shown in the figure .",
    "there are two sub - paths between sets @xmath52 and @xmath54 , and the size of the new 2vrp problem is @xmath67 .    consider the step when @xmath52 and @xmath54 are chosen as shown in fig .",
    "[ fig : disassembling2](c ) .",
    "if the first sub - path did not contain the depot , the size of the problem would have been @xmath68 . on the implementation step ,",
    "it was convenient to keep the size of the problem fixed at @xmath67 . therefore it was decided to  glue \" the first sub - path with the depot and have it as the depot in the new problem as shown in the figure .",
    "if subsets @xmath52 and @xmath54 are separated by a single path ( for example , on the first step of disassembling ) , it was decided to consider the last node in the sub - path as a second sub - path : in this case the problem with @xmath65 customers becomes the problem with @xmath67 customers ( compare fig .  [",
    "fig : disassembling2](a ) and fig .",
    "[ fig : disassembling2](d ) ) .",
    "we will use notation @xmath69 for a heuristic from the family of heuristics described above , where the size of the subsets is @xmath51 : @xmath70 , and the step for moving the subsets is @xmath63 .",
    "below we illustrate the advantages of the suggested dynamic programming approach by listing some types of the vrps that can be tackled by the approach proposed .    *",
    "* arc routing . *",
    "our model made no difference between the classic capacitated vrp , where the customers are represented by one node in a road network , and the arc routing vrp , where the customers are the streets / arcs in the network ( see @xcite ) .",
    "* * heterogeneous fleet . *",
    "the dynamic programming recursions take into account individual characteristics of the vehicles , so both homogeneous and heterogeneous fleets ( see @xcite and recent survey @xcite ) can be managed .",
    "* * multi - depot and open vrps .",
    "* incorporation of the multi - depot feature into the model is straightforward .",
    "the reader is referred to recent papers @xcite for the specifics of the multi - depot vrp . for the open vrp ( see references in recent papers @xcite ) , it is enough to introduce a dummy depot with zero distances to this depot from all customers . *",
    "* tight capacity constraint .",
    "* for some instances of the vrp , the main difficulties lie in packing all goods into a bounded number of vehicles .",
    "since the dynamic programming approach enumerates all possible subsets , the  bin packing\" / loading part of the vrp is resolved at the same time as the routing part .",
    "see arguments in @xcite for the benefits of integrating loading and routing .",
    "it is easy to see that the framework can incorporate more complicated packing constraints , e.g. two - dimensional loading constraints @xcite , by solving the corresponding packing sub - problems on each step of calculations . *",
    "* fixed items in a vehicle . * in some vrps",
    "it is important to allocate customers to particular vehicle visits in advance .",
    "we refer to these customers as _ fixed items _ in a vehicle .",
    "this feature can easily be added to the dynamic programming recursions .",
    "fixed items can be useful , e.g. with multiple visits of customers ( see section [ sec : balanced ] in this paper ) .",
    "another example is the so - called site - dependent vrp @xcite - some customers can be served only by a specific type of vehicles ( so - called _ docking _ constraints @xcite ) . an interesting case study with fixed customers was described in @xcite .",
    "an austrian red cross considered introducing two tiers for a blood delivery service .",
    "urgent delivery ( with a higher price ) is delivery within one day , and standard delivery ( at a lower price ) is delivery on the second day .",
    "hospital customers for the current day are known , while the next day s customers are unknown and only the probabilities of requests can be evaluated .",
    "so , on each day a dispatcher knows undelivered requests from yesterday , requests which arrived today , and probable requests for tomorrow .",
    "the requests from yesterday are urgent and have to be delivered today - hence a fixed allocation of these customers to today s route ( it is assumed here that the delivery is done by one vehicle ) .",
    "a sample of ( probable ) requests for tomorrow should be fixed for tomorrow s delivery . today",
    "s requests are flexible and can be allocated to either vehicle , however they will be charged different prices . * * penalties for wrong day deliveries . * in the previous paragraph we mentioned charges / costs for deliveries in different vehicles / days .",
    "another example is given in @xcite , where penalties for wrong day deliveries were introduced .",
    "these can easily be incorporated into our model by changing left / right lengths of intervals ( assuming that costs of travelling and penalties are measured in the same monetary units ) . *",
    "* cumulative vrps . * in the _ cumulative _ vrp the objective is to minimise the sum of arrival times to all customers ; this problem is also known as the _ latency _ problem ( see references in recent papers @xcite ) .",
    "it is easy to see that the dynamic programming approach can be adapted for this type of objective function . *",
    "* weight or time dependent travel costs .",
    "* there are some practical situations when the travel costs depend on the load of the vehicle ( see @xcite and references there ) or on the time when the vehicle travels ( @xcite ) .",
    "it can easily be seen that the dynamic programming recursions above allow this type of calculation to be incorporated into the recursions .",
    "( 6.5,6 ) , @xmath71 , @xmath72 , and @xmath73 are visited in two periods.,title=\"fig : \" ]",
    "in this section we provide evidence of computational efficiency of the proposed framework . as a test problem",
    "we have chosen a 2-period balanced travelling salesman problem and a set of the benchmark test problems from bassetto & mason @xcite . in their algorithms ,",
    "bassetto & mason used powerful exact techniques and even used a visualisation and human interventions for improving solutions .",
    "we believe that we have chosen a strong competitor to test the potential of the suggested framework",
    ".      given @xmath74 customers to be visited in each of the two periods and @xmath75 customers to be visited once in either of the periods , and the distance matrix between the customers , the 2-period travelling salesman problem ( 2tsp ) asks for tours for the two periods with the minimal total distance travelled .",
    "butler , williams , and yarrow @xcite considered a practical application of the 2tsp in milk collection in ireland .",
    "they applied what they called a `` man - machine method '' , combining an integer programming technique with a human being intervention for identifying violated constraints .",
    "the 2tsp can be modelled as a special case of the 2vrp as follows . for each of the customers to be visited twice ,",
    "an identical copy of the customer is created .",
    "the identical customers are allocated then to the different vehicles .",
    "this allocation to the vehicles is fixed .",
    "the 2vrp now has @xmath76 customers : each vehicle has to serve @xmath7 fixed customers , @xmath11 customers to be served by only one of the two vehicles . in the _ balanced _ 2tsp ( 2vrp ) an additional constraint demands that the number of customers visited in each period ( each vehicle ) differs by no more than 1 .",
    "bassetto and mason @xcite considered a balanced 2tsp in the euclidean plane . in this variant of the problem",
    "the customers locations are points in the euclidean plane , and the costs of travelling between the customers are standard euclidean distances .",
    "figure  [ fig:2ptsp ] illustrates a solution to the euclidean balanced 2tsp with @xmath77 customers .",
    "four out of ten customers in the example are visited in @xmath55 periods ( the depot is considered as a customer here ) .",
    "a short summary of the approaches used in @xcite is as follows .",
    "first a tsp tour on the set of all customers , called a general tour ( gt ) , is constructed .",
    "the gt is used to obtain a partition of customers into two subsets visited in two periods .",
    "the initial partition is improved by applying decision rules motivated by geometry ( e.g. removal of crossing edges ) . for each period an optimal tsp tour",
    "is constructed by applying an exact tsp algorithm ( see @xcite , chapter 16 , and @xcite ) .",
    "three algorithms a1 , a2 , and a3 are suggested and tested on the benchmark instances .",
    "since the test instances are defined by the euclidean coordinates , a visualisation of solutions is an option .",
    "the authors used the visualisation and human intervention to improve some of the solutions .",
    "columns labelled as  pc \" in the tables in the appendix refer to the best solutions found by algorithms a1 and a3 from @xcite . columns ",
    "pc+manual \" refer to the best solutions obtained after manual improvements ( the exceptions are the results for instances @xmath78 , @xmath79 , and @xmath80 the best solution for which were found by algorithm a2 ) .",
    "the set of benchmark instances from @xcite contains 60 randomly generated instances with 48 customers .",
    "the set of these instances is divided into three subsets with a different number of customers to be visited in the two periods ( @xmath73 , @xmath81 , and @xmath82 customers ) .",
    "we used the same set of instances in our computational experiments .",
    "however , we used only distance matrices , without using in our algorithms any knowledge on the sets of coordinates in the instances",
    ".    we used the framework discussed in the previous sections in the following algorithmic setting :    111111111111= + @xmath83 times : + generate a random allocation of @xmath11 customers into two tsp tours ; + insert into each tour the missing fixed customers to be visited by the two vehicles ; + apply a tour improvement tsp heuristic of carlier & villon @xcite to improve the tours ; + * repeat + apply dynamic programming heuristic @xmath69 for improving the partition into the tours ; + apply a tour improvement tsp heuristic of carlier & villon @xcite to improve the tours ; + ( improvement found ) ; + * } * *    ( 10,6.5 )   on all 60 instances.,title=\"fig : \" ]    in our computational experiments we used three heuristics : @xmath84 , @xmath85 , and @xmath86 .",
    "so the dynamic programming recursions were used for sub - problems with no more than 18 customers .",
    "we found that the results are much better if a multi - start strategy is used , therefore we repeated our search starting with randomly generated initial solutions .",
    "the number of repetitions in our experiments was chosen as @xmath87 , however for some of the instances we tried @xmath88 repetitions to improve the solutions ( see comments in the appendix ) .",
    "surprisingly random partitions into tours in our experiments yield better solutions than partitions obtained from a  good \" ( general ) tsp solution for all customers .",
    "we did not use an exact algorithm for finding tsp solutions .",
    "we used carlier & villon s @xcite tsp heuristic which is an @xmath89 heuristic that finds an optimal tsp tour in an exponential neighbourhood of tours .",
    "( the use of this particular heuristic is rather a matter of author s preferences .",
    "notice that the neighbourhood searched by this heuristic contains at least @xmath90 of tours that can be obtained from a tour by applying the well - known @xmath91 heuristic , as proved in theorem 5 in @xcite .",
    "for the experiments we used a desktop computer with intel i7 - 3770 3.40 ghz cpu , 16 gb of ram , and gnu c++ compiler .",
    "the length of the solutions found are represented in the tables in the appendix . in this section",
    "we provide a summary of the results obtained .",
    "figure [ fig : hist ] shows the improvement ( measured in percent of achieved cost ) that our technique yields using heuristic @xmath86 for the dynamic programming search .",
    "our results here are compared to the best solution found by algorithms a1 and a3 in @xcite .",
    "it can be seen that all solutions have been improved , with the majority of improvements being @xmath92 or better . by varying",
    "the size of the neighbourhoods searched in the dynamic programming heuristic , one can influence the computation time ( and the accuracy ) .",
    "tables [ table : summary1]-[table : summary3 ] below summarise the outcomes of computational experiments for each of the settings used and for each type of instance .",
    "we compared our computational results with both the computer results ( labelled as  pc \" ) and the results improved by manual intervention ( labelled as  pc+manual \" ) from @xcite .",
    ".summary of results for instances with @xmath73 ( out of @xmath93 ) nodes visited in two periods . [ cols=\"<,^,^,^,^,^,^ \" , ]",
    "in this paper we have presented a framework for small but rich vrps .",
    "the framework can be used for a variety of vrp settings . the computational scheme which implements the framework permits an easy scaling , hence varying computational time and the accuracy of the solutions found .",
    "computational experiments for the balanced 2-period tsp have shown an impressive performance from the framework .",
    "our next step would be performing extensive computational experiments to test the potential of the framework for other vrp settings .",
    "vladimir deineko acknowledges support by the center for discrete mathematics and its applications , university of warwick .",
    "the author also thanks tatiana bassetto and francesco mason for providing the benchmark problems , douglas miranda and alex taylor for useful comments on an early version of the paper .",
    "& & & & + instance & pc & pc+manual & time ( sec ) & length&time ( sec ) & length & time ( sec ) & length + @xmath94 & 25217 & 24937 & 26 & 24517 & 185 & * 24493 * & 395 & 24517 + @xmath95 & 26996 & 26549 & 19 & 26413 & 141 & * 26347 * & 352 & * 26347 * + @xmath96 & 26476 & 26192 & 23 & 26222 & 168 & 26131 & 412 & * 26050 * + @xmath97 & 26802 & 26038 & 30 & 26091 & 169 & 26057 & 369 & * 26002 * + @xmath98 & 27728 & 27408 & 23 & 27053 & 150 & * 26914 * & 391 & * 26914 * + @xmath99 & 24348 & 24268 & 29 & 23894 & 186 & * 23837 * & 463 & * 23837 * + @xmath100 & 27335 & 26857 & 26 & 26435 & 181 & * 26417 * & 422 & * 26417 * + @xmath101 & 24679 & 24232 & 26 & 24006 & 162 & * 23985 * & 408 & 24143 + @xmath102 & 26890 & * 26466 * & 28 & * 26466 * & 180 & * 26466 * & 405 & * 26466 * + @xmath103 & 24978 & 24200 & 32 & 24407 & 212 & 23915 & 549 &",
    "* 23915 * + @xmath104 & 26266 & 26130 & 23 & 26130 & 147 & * 26130 * & 369 & * 26130 * + @xmath105 & 26360 & 26054 & 32 & 26067 & 196 & 26296 & 429 & * 26032 * + @xmath106 & 26418 & 26418 & 28 & 26540 & 174 & 26493 & 419 & * 26387 * + @xmath107 & 28733 & 27074 & 28 & 26666 & 166 & 26744 & 380 & * 26633 * + @xmath108 & 25043 & 24587 & 27 & 24587 & 172 & 24526 & 434 & * 24517 * + @xmath109 & 27103 & 26790 & 26 & 26321 & 179 & 26079 & 409 & * 26079 * + @xmath110 & 25662 & 25123 & 24 & * 25072 * & 153 & * 25072 * & 432 & 25101 + @xmath111 & 26459 & 25709 & 26 & 25816 & 161 & * 25588 * & 372 & * 25588 * + @xmath112 & 27209 & 26994 & 27 & 26553 & 186 & 26314 & 474 & * 26247 * + @xmath113 & 25416 & 24964 & 28 & 25081 & 170 & 24850 & 419 & * 24824 * +     & & & & + instance & pc & pc+manual & time ( sec ) & length&time ( sec ) & length & time ( sec ) & length + @xmath114 & 33804 & * 32556 * & 25 & 32566 & 154 & 32566 & 392 & * 32556 * + @xmath115 & 30929 & 30929 & 23 & * 30716 * & 150 & * 30716 * & 379 & * 30716 * + @xmath116 & 30596 & 30382 & 24 & 30280 & 157 & 29967 & 385 & * 29954 * + @xmath117 & 28563 & 28441 & 23 & 28274 & 139 & 28260 & 337 & * 28223 * + @xmath118 & 27323 & 27206 & 29 & * 27177 * & 184 & * 27177 * & 452 & * 27177 * + @xmath119 & 33065 & 32396 & 22 & 31971 & 152 & * 31890 * & 346 & * 31890 * + @xmath120 & 32854 & 31861 & 24 & 31615 & 153 & * 31606 * & 370 & 31637 + @xmath121 & 30850 & 30571 & 22 & * 30215 * & 120 & 30266 & 328 & 30266 + @xmath122 & 34709 & 34024 & 19 & 33951 & 124 & * 33911 * & 331 & * 33911 * + @xmath80 & 31451 & 30867 & 25 & 30844 & 154 & * 30660 * & 368 & * 30660 * + @xmath123 & 27158 & 26934 & 22 & 26799 & 146 & * 26644 * & 348 & * 26644 * + @xmath124 & 27774 & 27619 & 24 & 27325 & 168 & * 27248 * & 360 & * 27248 * + @xmath125 & 25308 & 24960 & 21 & 24345 & 142 & * 24313 * & 324 & * 24313 * + @xmath126 & 27875 & * 27285 * * & 19 & 27856 & 138 & 27399 & 377 & 27410 + @xmath127 & 27060 & 26888 & 20 & 27141 & 140 & 26872 & 373 & * 26806 * + @xmath128 & 27677 & 27624 & 26 & 27135 & 169 & 27188 & 429 & * 27131",
    "* + @xmath129 & 30268 & 30203 & 21 & 29928 & 156 & * 29841 * & 340 & * 29841 * + @xmath130 & 28033 & 27923 & 24 & 27478 & 163 & * 27425 * & 393 & 27447 + @xmath131 & 27958 & 27638 & 22 & 27621 & 154 & * 27143 * & 383 & * 27143 * + @xmath132 & 28483 & 28427 & 22 & 27865 & 157 & 27799 & 350 & * 27790 * +       & & & & + instance & pc & pc+manual & time ( sec ) & length&time ( sec ) & length & time ( sec ) & length + @xmath136 & 30253 & 30147 & 16 & 30100 & 117 & * 30064 * & 258 & * 30064 * + @xmath137 & 33008 & 32020 & 17 & * 31544 * & 124 & 31738 & 284 & * 31544 * + @xmath138 & 31500 & 31500 & 18 & 31200 & 140 & * 31166 * & 311 & 31194 + @xmath139 & 30313 & 30170 & 21 & 29812 & 156 & * 29757 * & 335 & * 29757 * + @xmath140 & 27986 & 27857 & 17 & * 27780 * & 128 & * 27780 * & 310 & * 27780 * + @xmath141 & 30073 & 30013 & 20 & * 30013 * & 148 & * 30013 * & 328 & * 30013 * + @xmath142 & 32106 & 32106 & 17 & * 31704 * & 133 & 31735 & 299 & 31728 + @xmath143 & 31004 & 30942 & 19 & 30478 & 149 & * 30471 * & 337 & * 30471 * + @xmath144 & 33663 & 33185 & 17 & * 33173 * & 130 & * 33173 * & 312 & 33197 + @xmath145 & 31266 & 31266 & 16 & 31266 & 117 & * 31213 * & 259 & * 31213 * + @xmath146 & 33722 & 33627 & 19 & 33358 & 146 & * 33344 * & 322 & 33358 + @xmath147 & 32353 & 32280 & 15 & 32251 & 113 & 32251 & 274 & * 32200 * + @xmath148 & 33287 & 33200 & 17 & 32943 & 118 & 32871 & 268 & * 32726 * + @xmath149 & 31973 & 31600 & 18 & * 31368 * & 149 & 31373 & 345 & * 31368 * + @xmath150 & 33837 & * 33507 * * & 16 & 33587 & 115 & 33587 & 292 & 33560 + @xmath151 & 29696 & 29476 & 16 & 29176 & 115 & 29156 & 266 & * 28835 * + @xmath152 & 31954 & 31640 & 18 & * 31427 * & 133 & * 31427 * & 299 & * 31427 * + @xmath153 & 30705 & 30246 & 18 & * 30165 * & 140 & 30178 & 345 & * 30165 * + @xmath154 & 31549 & 31549 & 19 & 31471 & 137 & * 31223 * & 296 & * 31223 * + @xmath155 & 32384 & 32317 & 15 & 32193 & 115 & * 32137 * & 244 & 32140 +"
  ],
  "abstract_text": [
    "<S> in this paper we consider a 2-vehicle routing problem which can be viewed as a building block for the varieties of the vehicle routing problems ( vrps ) . to approach this problem </S>",
    "<S> , we suggest a framework based on the held and karp dynamic programming algorithm for the classical travelling salesman problem . </S>",
    "<S> an algorithm based on this framework shows an exceptionally good performance on published test data . our approach can be easily extended to a variety of constraints / attributes in the vrp , hence the wording  small but rich \" in the title of our paper .    </S>",
    "<S> _ keywords . </S>",
    "<S> _ combinatorial optimization ; vehicle routing problem ; dynamic programming ; 2-period travelling salesman problem . </S>"
  ]
}