{
  "article_text": [
    "there is an increasing need for algorithms to analyze and classify graph data , motivated in particular by various applications in chemoinformatics and bioinformatics .",
    "an prominent example in chemoinformatics , which motivates this work , is the generic problem of predicting various properties of small molecules , such as toxicological effects , given their _ molecular graph _ , that is , the graph representing the covalent bonds between atoms @xcite .",
    "classification of graphs is often associated with the problem of graph mining , which consists in detecting interesting patterns occurring in the graphs , and using them as features to build predictive models @xcite . as",
    "an alternative to this approach , kernel methods associated with graph kernels have recently emerged as a promising approach for classification of graph data .",
    "kernel methods such as support vector machines ( svm ) operate implicitly in a possibly high - dimensional hilbert space of features , in the sense that no explicit computation of the image of the input data in the feature space is required . instead , only the inner product between the images of any two input data points , called the _ kernel _ ,",
    "is required @xcite . applying kernel methods to graph data",
    "therefore requires the definition of a kernel between graphs , thereafter simply referred to as _ graph kernel_. choosing a graph kernel implicitly amounts to defining a set of features to represent the graphs and an inner product in the space of features .",
    "graph kernels were pioneered by @xcite and @xcite , who showed how to map graphs to an infinite - dimensional feature space indexed by linear subgraphs , and compute an inner product in that space .",
    "the resulting graph kernels compare two graphs through their common walks , weighted by a function of their lengths @xcite or by their probability under a random walk model on the graphs @xcite .",
    "while this representation might appear restrictive , these kernels led to promising empirical results , often comparing to state - of - the - art approaches in the fields of chemoinformatics @xcite and bioinformatics @xcite .",
    "nevertheless , @xcite highlighted the limited expressiveness of graph kernels based on linear features , showing in particular that many different graphs can be mapped to the same point in the corresponding feature space .",
    "figure [ fig : tree - identical ] illustrates this issue on a simple example . on the other hand , they also showed that computing a perfect graph kernel , that is , a kernel mapping non - isomorphic graphs to distinct points in the feature space , is np - hard .",
    "this suggests that the expressiveness of graph kernels must be traded for their computational complexity . as a first step towards a refinement of the feature space used in walk - based graph kernels",
    ", @xcite introduced a kernel function comparing graphs on the basis of their common subtrees .",
    "this representation looks promising in particular in chemoinformatics , because physicochemical properties of atoms are known to be related to their topological environment that could be well captured by subtrees .",
    "however , the relationship between the new subtree - based kernel and previous walk - based kernels was not analyzed in details , and the relevance of the new kernel was not tested empirically .",
    "our motivation in this paper is to study in detail , both theoretically and empirically , the relevance of subtree features for graph kernels , and in particular to assess the benefits they bring compared to walk - based graph kernels . for that purpose we first revisit the formulation introduced by @xcite and propose two new kernels with an explicit description of their feature spaces and corresponding inner products .",
    "we introduce a parameter in the formulations that allows to gradually increase the complexity of the subtrees used as features to represent the graphs , the notion of complexity depending on the formulation . by decreasing the parameter",
    "we recover classical walk - based kernels , and by increasing it , we can empirically observe in detail the effect of increasing the number and the complexity of the tree features used to represent the graphs .",
    "both formulations can be efficiently computed by dynamic programming , in the spirit of the kernel proposed by @xcite . when the size of allowed subtrees is increased , however , we observe that the practical use of this kernel is limited by the explosion in the number of subtrees occurring in the graphs . in a second step ,",
    "we therefore introduce two extensions to the initial formulation of the kernels that allow , on the one hand , to extend and generalize their associated feature space , and on the other hand , to remove noisy features that correspond to unwanted subtrees .",
    "the different kernels are compared experimentally on two binary classification tasks consisting in discriminating toxic from non - toxic molecules with a svm .",
    "although our main motivations are in chemical applications , we adopt the general framework of graph kernels in this paper , because the kernels introduced may find different applications in domains where data have a natural graph structure , such as bioinformatics , natural language processing or image processing .",
    "we assume that the reader is familiar with kernel functions and svms , and refer him to @xcite and references therein for a background on the subject .",
    "the remaining of the paper is organized as follows .",
    "notations and definitions related to graphs and trees are introduced in section [ sec : prelim ] , followed in section [ sec : definition ] by the definition of a general class of kernels based on the detection of common subtrees .",
    "the next section ( section [ sec : gartner ] ) revisits the framework introduced in @xcite , from which two particular graph kernels are derived and further extended in section [ sec : extensions ] .",
    "the kernels are validated experimentally in section [ sec : experiments ] , and we give concluding remarks in section [ sec : discussion ] .     ; @xmath0 and @xmath1 , and consequently mapped to the same point of the feature space corresponding a kernel based on the count of walks @xcite .",
    "[ fig : tree - identical ] , width=264 ]",
    "in this section we introduce notations and general definitions related to graphs and trees .      a _ labeled graph _",
    "@xmath2 is defined by a finite set of _ vertices _",
    "@xmath3 , a set of _ edges _ @xmath4 , and a labeling function @xmath5 which assigns a _ label _ @xmath6 taken from an alphabet @xmath7 to any vertex or edge @xmath8 .",
    "we let @xmath9 be the number of vertices of @xmath10 , @xmath11 be its number of edges , and we assume below that a set of labels @xmath7 common to all graphs has been fixed . in _ directed _ graphs , edges are oriented and to each vertex @xmath12 corresponds a set of _ incoming neighbors _ @xmath13 and _ outgoing neighbors _ @xmath14 .",
    "we let @xmath15 be the _ in - degree _ of the vertex @xmath16 , and @xmath17 be its _ out - degree_. a _ walk _ of length @xmath18 in the graph @xmath2 is a succession of @xmath19 vertices @xmath20 , such that @xmath21 for @xmath22 .",
    "a _ path _ is a walk @xmath23 with the additional condition that @xmath24 .",
    "finally , a graph is said to be _ connected _ if there is a walk between any pair of vertices when the orientation of edges is dropped .    for applications in chemistry considered below , we associate a labeled directed graph @xmath2 to the planar structure of a molecule .",
    "to do so , we let the set of vertices @xmath3 correspond to the set of atoms of the molecule , the set of edges @xmath25 to its covalent bonds , and label these graph elements according to an alphabet @xmath7 consisting of the different types of atoms and bonds .",
    "note that since graphs are directed , a pair of edges of opposite direction is introduced for each covalent bond of the molecule .",
    "figure [ fig : labeled ] shows a chemical compound seen as a labeled directed graph .     ,",
    "width=264 ]      a _ tree _ @xmath26 is a directed connected acyclic graph in which all vertices have in - degree one , except one that has in - degree zero .",
    "the node with in - degree zero is known as the _ root _",
    "@xmath27 of the tree .",
    "nodes with out - degree zero are known as _ leaf _",
    "nodes , others are called _ internal _ nodes .",
    "trees are naturally oriented , edges being directed from the root to the leaves .",
    "the outgoing neighbors of an internal node are known as its _ children _ , and the unique incoming neighbor of a node ( apart from the root ) is known as its _",
    "parent_. if two nodes have the same parent , their are said to be _ siblings_. the _ size _",
    "@xmath28 of the tree @xmath26 is its number of nodes : @xmath29 .",
    "the _ depth _ of a node corresponds to the number of edges connecting it to the root plus one , and the depth of the tree is the maximum depth of its nodes .",
    "finally , we introduce a couple of definitions that will be useful in the following .",
    "[ def : balanced - tree ] a _ perfectly depth - balanced tree _ of order @xmath30 is a tree where the depth of each leaf node is @xmath30 .",
    "perfectly depth - balanced trees are also called _ balanced trees _ below .",
    "[ def : branching ]    we define the _ branching cardinality _ of the tree @xmath26 , noted @xmath31 , as its number of leaf nodes minus one .",
    "more formally , for the tree @xmath32 with @xmath33 , @xmath31 is given by ; @xmath34 where @xmath35 is a binary function equal to one if its argument is true , and zero otherwise .",
    "this terminology stems from the observation that this quantity also corresponds to the sum , over the non - leaf nodes of the tree , of their numbers of children minus one .",
    "it therefore measures how many extra branchings there are compared to a linear tree , which has branching cardinality 0 .",
    "these definitions are illustrated in figure [ fig : tree ] .",
    "+     of depth 5 with @xmath36 and @xmath37 .",
    "right : a balanced tree @xmath38 of order 3 with @xmath39 and @xmath40 .",
    "top nodes are root nodes , bottom nodes are leaf nodes .",
    "[ fig : tree ] , width=264 ]    the remaining of the paper introduces kernel functions between labeled directed graphs based on the detection in the graphs of patterns corresponding to labeled trees . to lighten notations",
    ", we simply refer below to labeled directed graphs and labeled trees as graphs and trees .",
    "this section introduces a general class of graph kernel based on the detection , in the graphs , of patterns corresponding to particular tree structures .",
    "we start by defining precisely this notion of tree - pattern .",
    "[ def : tree - pattern ] let a graph @xmath41 and a tree @xmath42 , with @xmath43 .",
    "a @xmath28-uple of vertices @xmath44 is a _ tree - pattern _ of @xmath10 with respect to @xmath26 , which we denote by @xmath45 , if and only if the following holds : @xmath46 , & l(v_{i } ) = l(n_i)\\ , , \\\\",
    "\\forall ( n_i , n_j ) \\in \\mathcal{e}_t , & ( v_{i},v_{j } ) \\in \\mathcal{e}_g \\wedge",
    "l\\big((v_{i},v_{j})\\big ) = l\\big ( ( n_i , n_j)\\big)\\ , , \\\\ \\forall ( n_{i } , n_{j } ) , ( n_{i},n_{k } ) \\in \\mathcal{e}_t , &   j \\neq k \\iff",
    "v_{j } \\neq v_{k } \\ , . \\end{cases}\\ ] ]    in other words a tree - pattern is a combination of graph vertices that can be arranged in a particular tree structure , according to the labels and the connectivity properties of the graph .",
    "note from this definition that vertices of the graph are allowed to appear several times in a tree - pattern , under the condition that siblings nodes of the corresponding tree are associated to distinct vertices of the graphs .",
    "we now introduce a functional to count occurrences of these patterns .",
    "[ def : tree - counting ] a _ tree - pattern counting function _ returning the number of times a tree - pattern occurs in a graph is defined for the tree @xmath26 and the graph @xmath41 , @xmath47 , as @xmath48^{|t| } :   ( v_{\\alpha_1},\\dots , v_{\\alpha_{|t| } } ) = \\text{pattern}(t )   \\big\\ }   \\big\\vert.\\ ] ] a restriction of @xmath49 to patterns rooted in a specified vertex @xmath50 is given by @xmath51^{|t| } : \\ ; ( v_{\\alpha_1},\\dots , v_{\\alpha_{|t| } } ) = \\text{pattern}(t ) \\wedge v_{\\alpha_1 } = v \\big\\ } \\big\\vert.\\ ] ]    with this new definition at hand we can define a general graph kernel based on the detection of common tree - patterns in the graphs .",
    "[ def : kernel ] _ the tree - pattern graph kernel _",
    "@xmath52 is given for the graphs @xmath53 and @xmath54 by @xmath55 where @xmath56 is a set of trees , @xmath57 is a tree weighting functional and @xmath49 is the tree - pattern counting function of definition [ def : tree - counting ] .",
    "the kernel of definition [ def : kernel ] is obviously positive definite since it can be written as a standard dot - product @xmath58 , where @xmath59 is the mapping that maps any graph @xmath10 to the feature space indexed by the trees of the set @xmath56 as @xmath60 .",
    "figure [ fig : patterns ] illustrates this mapping .",
    "( left ) and its feature space representation @xmath59 ( right ) . note that the red and green trees are balanced .",
    "note moreover that the green tree consists of a set of linearly connected atoms , which is known as _ molecular fragment _ in chemoinformatics .",
    "note finally that the same @xmath61 atom appears in the 3rd and 5th positions in the tree - pattern corresponding to the green tree.[fig : patterns ] , width=377 ]",
    "in a recent work , @xcite proposed a particular tree - pattern graph kernel fitting the general definition [ def : kernel ] . in this section ,",
    "we propose two different kernels with explicit feature spaces and inner products , discuss their practical computation , and highlight their differences with the kernel of @xcite .      according to definition [ def : kernel ] ,",
    "two key elements enter in the definition of a tree - pattern graph kernel .",
    "firstly , the set of trees @xmath56 indexing the feature space the graphs are mapped to must be chosen .",
    "the kernels we consider in this section are based on the same feature space : the space indexed by the set of balanced trees of order @xmath30 introduced in definition [ def : balanced - tree ] , labeled according to the graphs labeling alphabet @xmath7 .",
    "we will refer to this set as @xmath62 in the following .",
    "second , the tree weighting function @xmath63 must be defined . a natural way to define such",
    "a functional is to take into account the structure of the trees , and accordingly , we propose to relate the weight of a tree to its size or its branching cardinality .",
    "in particular we propose to consider the following kernels :    [ def : kernel - size ] for the pair of graphs @xmath53 and @xmath54 , the _ size - based balanced tree - pattern kernel of order @xmath30 _ is defined as @xmath64    [ def : kernel - branch ] for the pair of graphs @xmath53 and @xmath54 , the _ branching - based balanced tree - pattern kernel of order @xmath30 _ is defined as @xmath65    note that the depth of a tree is a lower bound on its size , attained for a tree consisting of a linear chain of vertices .",
    "for such a tree , at depth @xmath30 , we have @xmath66 , and we see that the corresponding tree - patterns are given a unit weight in the kernels of definitions [ def : kernel - size ] and [ def : kernel - branch ] .",
    "the complexity of a tree naturally increases with its size and branching cardinality , and the @xmath67 parameter entering the kernel definitions [ def : kernel - size ] and [ def : kernel - branch ] has the effect of favoring tree - patterns depending on their degree of complexity . a value of @xmath67 greater than one favors the influence of tree - patterns of increasing complexity over the trivial linear tree - patterns , while they are penalized by a value of @xmath67 smaller than one .",
    "we can note , however , that while the size of a tree increases with its branching cardinality , the converse is not true . for any tree @xmath26 of depth @xmath30",
    ", we therefore always have @xmath68 , and the tree weighting is more important in the size - based than in the branching - based kernel . in the case of balanced trees , this difference is particularly marked when the nodes with large out - degree are close to the root node .",
    "this is due to the fact that every leaf must be at depth @xmath30 , and while the size of the tree necessarily increases by at least @xmath69 along each path starting from the root , the branching cardinality does not vs @xmath70 . ] .",
    "the main difference in the feature space representations of the graphs is therefore induced by this particular type of tree - patterns , that can be interpreted as collections of regular subtree patterns merged in the root node .",
    "this suggests for instance that , for @xmath71 , the branching - based formulation of the kernel may to some extent tolerate large , yet regular patterns , that would be strongly penalized in the size - based formulation .",
    "figure [ fig : weights ] illustrates these tree weightings based on the size and branching cardinality .",
    "+     weighting.[fig : weights ] , width=491 ]    when @xmath67 tends to zero , the complexity of the patterns is so penalized that only tree - patterns consisting of linear chains of graph vertices have non - vanishing weights , and the kernels of definitions [ def : kernel - size ] and [ def : kernel - branch ] boil down to a kernel based on the detection of common walks @xcite .",
    "more formally , if we define the set of walks of length @xmath18 of the graph @xmath10 as @xmath72 and define for the graphs @xmath53 and @xmath54 the following walk - count kernel : @xmath73 where @xmath74 is one if all pairs of corresponding edges and vertices are identically labeled in the walks @xmath75 and @xmath76 , and zero otherwise , one easily gets that : @xmath77 increasing the value of @xmath67 relaxes the penalization on complex subtree features , and can therefore be interpreted as introducing tree - patterns of increasing complexity in the walk - based kernel of equation [ eq : kernel - walk ] .",
    "+ it should be noted finally that the parameters @xmath30 and @xmath67 are directly related to the nature of the features representing the graphs and to their relative importance .",
    "optimal values of the parameters are therefore likely to be dependent on the problem and data considered , and can hardly be chosen a priori .",
    "as an example , because of the variety of chemical compounds , the graphs considered in a chemical application can have a great structural diversity .",
    "this suggests that these parameters should be estimated from the data using , for example , cross - validation techniques .",
    "we now propose two factorization schemes to compute the kernels of definitions [ def : kernel - size ] and [ def : kernel - branch ] .",
    "these factorizations are inspired by the dynamic programming ( dp ) algorithm proposed by @xcite to compute a slightly different graph kernel , discussed in the next subsection .",
    "the factorization relies on the following definition :    [ def : matching ] the _ neighborhood matching set _",
    "@xmath78 of two graph vertices @xmath16 and @xmath50 is defined as @xmath79    each @xmath80 consists of one or several pair(s ) of neighbors of @xmath16 and @xmath50 that are identically labeled and connected to @xmath16 and @xmath50 by edges of the same label .",
    "it follows from definition [ def : balanced - tree ] that such an element @xmath81 corresponds to a pair of balanced tree - patterns of order 2 rooted in @xmath16 and @xmath50 , found in the graph(s ) @xmath16 and @xmath50 belong to . moreover , provided @xmath16 and @xmath50 have the same label , these patterns correspond to the same balanced tree .",
    "we can state the following propositions , whose proofs are post - poned in appendix [ app : proof1 ] :    [ prop : comput - size ] the order @xmath30 size - based tree - pattern kernel @xmath82 of definition [ def : kernel - size ] between two graphs @xmath53 and @xmath54 can be computed as : @xmath83 where @xmath84 is defined recursively by @xmath85    [ prop : comput - branch ] the order @xmath30 branching - based tree - pattern kernel @xmath86 of definition [ def : kernel - branch ] between two graphs @xmath53 and @xmath54 can be computed as : @xmath87 where @xmath84 is defined recursively by @xmath88    not surprisingly , propositions [ prop : comput - size ] and [ prop : comput - branch ] show that the kernels @xmath82 and @xmath86 of definitions [ def : kernel - size ] and [ def : kernel - branch ] have the same complexity .",
    "more precisely , for the pair of graphs @xmath53 and @xmath54 , it follows from ( [ eq : comput - size ] ) and ( [ eq : comput - branch ] ) that this complexity is equal to the product of the sizes of @xmath53 and @xmath54 , times the complexity of evaluating the functional @xmath89 . in both cases , for the pair of graph vertices @xmath16 and @xmath50 , evaluating @xmath90 amounts to summing , over all possible matching of neighbors @xmath91 , a quantity expressed as a product of @xmath92 functionals @xmath93 .",
    "the size of @xmath78 , @xmath94 , is maximal if all the neighbors of @xmath16 and @xmath50 , as well as the edges that connect them to @xmath16 and @xmath50 , are identically labeled . in that case",
    "we have @xmath95 where @xmath96 ranges over the cardinality @xmath92 of the set of matching neighbors .",
    "if we let @xmath97 be an upper bond on the out - degree of the vertices of the graphs considered , it follows that @xmath98 and we can derive the following worst case complexity @xmath99 in the case of chemical compounds , we have @xmath100 . the factor @xmath101 equals 4336 , and the complexity looks prohibitive .",
    "however this is only a worst - case complexity which is strongly reduced in practice because ( i ) the out - degree of the vertices is often smaller than 4 , the average out - degree of the vertices is nearly 2 ( 2.14 for the first dataset , and 2.06 for the second one ) . ] , and ( ii ) the size of @xmath78 is reduced by the fact that vertices and edges can have distinct labels .",
    "+      at this point , it is worth reminding the kernel formulation introduced by @xcite in order to highlight the differences with the kernels proposed in definitions [ def : kernel - size ] and [ def : kernel - branch ] . in the context of graphs with labeled vertices and edges , at order @xmath30 , the kernel introduced in @xcite , that we denote by @xmath102 , is formulated as follows :    @xmath103    where @xmath104 is defined by @xmath105 it is clear that this kernel and the kernels of definitions [ def : kernel - size ] and [ def : kernel - branch ] have the same feature space .",
    "the main difference lies in the fact that in this formulation , a parameter @xmath106 is introduced for each vertex @xmath50 of each graph .",
    "it can be checked that under this parametrization , each tree - pattern is weighted by the product of the parameters @xmath106 associated to its internal nodes . in the special case",
    "where these parameters are taken equal to a single parameter @xmath67 , each pattern is therefore weighted by @xmath67 raised to the power of its number of internal nodes . while this bears some similarity with the size - based weighting proposed in the kernel of definition [ def : kernel - size ] , we note for instance that the three leftmost trees of figure [ fig : weights ] are identically weighted , namely by a factor @xmath107 . moreover , the convergence to the walk - based kernel of equation [ eq : kernel - walk ] observed when @xmath67 tends to zero for the kernels of definition [ def : kernel - size ] and [ def : kernel - branch ] does not hold with this formulation .",
    "the kernels introduced in the previous section arise directly from the adaptation of the algorithm proposed in @xcite . in this section",
    "we introduce two extensions to this initial formulation .",
    "first , we extend the branching - based kernel of definition [ def : kernel - branch ] to a feature space indexed by a larger , and more general , set of trees .",
    "second , we propose to eliminate a set of noisy tree - patterns from the feature space .",
    "the dp algorithms of section [ sec : compute ] recursively extend the tree - patterns under construction until they reach a specified depth . because they are based on the notion of neighborhood matching sets introduced in definition [ def : matching ] ,",
    "these algorithms add at least one child to every leaf node of the patterns under extension at each step of the recursive process .",
    "when they reach the specified depth , the patterns are therefore balanced , and the choice of the feature space associated to the kernels of definitions [ def : kernel - size ] and [ def : kernel - branch ] was actually dictated by their computation .    rather than focusing on features of a particular size ,",
    "standard representations of molecules involve structural features of different sizes .",
    "a prominent example is that of molecular fingerprints @xcite that typically represent a molecule by its exhaustive list of fragments of length up to 8 , where a fragment is defined as a linear succession of connected atoms ( see figure [ fig : patterns ] ) . in this section",
    ", we note that a slight modification of the dp algorithm of proposition [ prop : comput - branch ] generalizes the kernel of definition [ def : kernel - branch ] to a feature space indexed by the set of general trees up to a given depth , instead of the set of balanced - trees of the corresponding order .",
    "more precisely , if we let @xmath108 be the set of trees of depth up to @xmath30 , and if we define the _ until - n extension _ of the branching - based kernel of definition [ def : kernel - branch ] as @xmath109 we can state the following proposition , whose proof is postponed in appendix [ app : proof - untiln ] .    [",
    "prop : untiln ] the _ until - n extension _",
    "@xmath110 of the branching - based kernel of order @xmath30 of definition [ def : kernel - branch ] is given for the graphs @xmath53 and @xmath54 by @xmath111 where @xmath84 is defined recursively by @xmath112    the computation given in proposition [ prop : untiln ] follows that of proposition [ prop : comput - branch ] , and this until - n extension comes at no extra cost .",
    "the feature space corresponding to this extended kernel has nevertheless a much larger dimensionality than that of the original branching - based kernel . actually , because the set of trees @xmath108 includes the set of balanced trees @xmath62 as a special case , the feature space associated to the branching - based kernel is a sub - space of the feature space associated to its until - n extension .",
    "figure [ fig : mappings ] illustrate the different mappings .    , and",
    "the set of balanced trees of order 3 ( left ) and general trees of depth up to 3 ( right ) for which a tree - pattern rooted in the dashed vertex is found in @xmath10 , together with their kernel weighting @xmath113.[fig : mappings ] , width=453 ]    the behavior of this kernel with respect to @xmath67 follows that of the original branching - based kernel .",
    "in particular , when @xmath67 tends to zero , the set of tree - patterns with non - vanishing weights reduces to linear chain of vertices and the kernel boils down to a kernel based on the detection of common walks of length up to @xmath69 .",
    "more formally , one can easily check that , in this case : @xmath114 where @xmath115 is the kernel based on the detection of common walks of length @xmath18 , defined in section [ sec : gartner - def ] , equation [ eq : kernel - walk ] .",
    "finally , we note that this extension is not directly applicable to the size - based kernel of definition [ def : kernel - size ] because of a slight difference in the computations of propositions [ prop : comput - size ] and [ prop : comput - branch ] . indeed ,",
    "note from proposition [ prop : comput - size ] that in order to get the @xmath116 weighting of the tree @xmath26 proposed in definition [ def : kernel - size ] , the size - based kernel is initially computed from patterns weighted by their sizes , and is subsequently normalized by a factor @xmath117 . as a result , while the above extension would still have the effect of extending the feature space to the space indexed by trees of @xmath108 , this @xmath117 normalization would affect every tree - pattern regardless of their size , and the pattern weighting proposed in definition [ def : kernel - size ] would be lost .      the dp algorithms of sections [ sec : compute ] and [ sec : untiln ] enumerate balanced tree - patterns of order @xmath30 through the recursive extension of balanced tree - patterns of order 2 defined by neighborhood matching sets of pairs of vertices . according to definition [ def : matching ] ,",
    "the whole sets of neighbors of a pair of vertices enter in the definition of their neighborhood matching sets . as a result",
    ", it can be the case in a tree - pattern that a vertex appears simultaneously as the parent and a child of a second vertex .",
    "this phenomenon is the tree counterpart of a phenomenon observed in the context of walk - based graph kernels , where a random walk under extension could return to a visited vertex just after leaving it .",
    "this behavior was called _ tottering _ in @xcite , and following this terminology , we refer to a tree - pattern in which a vertex appears simultaneously as the parent and a child of a second vertex as a _ tottering tree - pattern_. figure [ fig : totters ] illustrates the tottering phenomenon .",
    ", width=302 ]    in many cases these tree - patterns are likely to be uninformative features .",
    "in particular they are not proper subgraphs of the initial graphs .",
    "even worse , the ratio of the number of tottering tree - patterns over the number of non - tottering tree - patterns quickly increases with the depth @xmath30 of the trees , suggesting that informative patterns corresponding to deep trees might be hidden by the profusion of tottering tree - patterns . in order to tackle this issue",
    "we now adapt an idea of @xcite to filter out these spurious tottering tree - patterns in the kernels presented in sections [ sec : definition ] and [ sec : gartner ] .",
    "tottering can be prevented by adding constraints in the tree - pattern counting function , according to the following definition .",
    "[ def : nototter - counting ] from the tree - pattern counting function of definition [ def : tree - counting ] , a _ no - tottering tree - pattern counting function _ can be defined for the tree @xmath42 , with @xmath43 , and the graph @xmath41 , with @xmath47 , as @xmath118^{|t| } : \\quad & ( v_{\\alpha_1},\\dots , v_{\\alpha_{|t| } } ) = \\text{pattern}(t ) \\\\",
    "& \\wedge   ( n_{i } , n_{j } ) , ( n_{j } , n_{k } ) \\in \\mathcal{e}_t \\iff \\alpha_{i } \\neq \\alpha_{k } \\big\\ }    \\big\\vert . \\end{split}\\ ] ]    following definition [ def : kernel ] , a graph kernel based on no - tottering tree - patterns can be defined from this no - tottering tree - pattern counting function .",
    "[ def : kernel - nototter ] a graph kernel @xmath119 based on no - tottering tree - patterns is given for the graphs @xmath53 and @xmath54 by @xmath120 where @xmath56 is a set of trees , @xmath57 is a tree weighting functional and @xmath121 is the no - tottering tree - pattern counting function of definition [ def : nototter - counting ] .",
    "this latter definition therefore extends the tree - pattern kernel of definition [ def : kernel ] to the no - tottering case .",
    "however , due to the additional constraints on the set of acceptable patterns , the dp framework based on neighborhood matching set described in sections [ sec : compute ] and [ sec : untiln ] does not hold any longer . in @xcite ,",
    "the following graph transformation was introduced in order to filter tottering walks .",
    "[ def : transfo ] for a graph @xmath122 , we let its _ transformed graph _",
    "@xmath123 be defined by :    * @xmath124 , * @xmath125 ,    and labeled as follows :    * for a node @xmath126 the label is either @xmath127 if @xmath128 , or @xmath129 if @xmath130 , * for an edge @xmath131 between two vertices @xmath132 and @xmath133 , the label is simply given by @xmath134 .",
    "this graph transformation is illustrated in figure [ fig : newgraph ] for the graph corresponding to the chemical compound of figure [ fig : labeled ] .    .",
    "iii ) the transformed graph .",
    "iv ) the labels on the transformed graph . note that different widths stand for different edges labels , and gray nodes are the nodes belonging to @xmath3.[fig : newgraph],width=302 ]    based on this graph transformation , @xcite proved that there is a bijection between the set of no - tottering walks of a graph and the set of walks of its transformed graph that start on a vertex corresponding to a vertex of the original graph . in a similar way",
    ", we show below that there is a bijection between the set of no - tottering tree - patterns found in a graph and the set of tree - patterns found in its transformed graph rooted in a vertex corresponding to a vertex of the original graph .",
    "this is summarized in the following proposition , which proof is postponed in appendix [ app : proof - nototter ] .    [",
    "prop : nototter - kernel ] if we let @xmath135 ( resp .",
    "@xmath136 ) be the transformed graph of @xmath53 ( resp .",
    "@xmath137 , the no - tottering tree - pattern kernel of definition [ def : kernel - nototter ] is given by @xmath138 where , if @xmath139 is the transformed graph of @xmath10 given by definition [ def : transfo ] , @xmath140 is the set of vertices of @xmath139 corresponding to the vertices of @xmath10 , and @xmath141 .",
    "this proposition shows that we can compute no - tottering extensions of the kernels of definitions [ def : kernel - size ] and [ def : kernel - branch ] , and of the until - n kernel extension of equation [ eq : kernel - untiln ] , using the graph transformation of definition [ def : transfo ] and the original dp algorithms of sections [ sec : compute ] and [ sec : untiln ] .",
    "however , this operation comes at the expense of an increase in the cost of computing the kernel .",
    "more precisely , by definition of the graph transformation , we have @xmath142 .",
    "moreover , as noticed by @xcite , the maximum out - degree of the vertices of the transformed graph is equal to that of the original graph . as a result",
    ", the worst case complexity of evaluating the functional @xmath90 of propositions [ prop : comput - size ] , [ prop : comput - branch ] and [ prop : untiln ] is the same if @xmath16 and @xmath50 belong to @xmath143 and @xmath144 , or @xmath145 and @xmath146 .",
    "it follows that for the graphs @xmath53 and @xmath54 we have @xmath147 where @xmath52 is one of the kernels given in equations [ eq : kernel - size ] , [ eq : kernel - branch ] and [ eq : kernel - untiln ] , and @xmath148 is its no - tottering extension of definition [ def : kernel - nototter ] .",
    "we now turn to the experimental section .",
    "the problem we consider is a binary classification task consisting in discriminating toxic from non - toxic molecules .",
    "our main goal is to assess the relevance of tree - patterns graph kernels over their walk - based counterparts for this type of chemical applications .",
    "to do so , recall from section [ sec : gartner - def ] that in the proposed kernels , the influence of the tree - patterns is controlled by the parameter @xmath67 .",
    "when @xmath67 tends to zero , the kernels converge to kernels based on the count of common walks in the graphs @xcite . for increasing @xmath67 ,",
    "tree - patterns of increasing complexity are taken into account with increasing weight in the kernels .",
    "one can therefore study the relevance of tree - patterns by studying how the performance of the kernels evolves with @xmath149 , and checking whether it improves over their walk - based counterpart obtained for @xmath150 .",
    "the first step towards this goal is to evaluate the kernels of definitions [ def : kernel - size ] and [ def : kernel - branch ] , and therefore the original formulation presented in @xcite . in a second step , we want to validate the extensions to these kernels proposed in sections [ sec : untiln ] and [ sec : nototters ] . on the one hand we will compare the results obtained with the until - n extension of the branching - based kernel ( [ eq : kernel - untiln ] ) to its initial formulation ( [ eq : kernel - branch ] ) , and on the other hand we will compare the results obtained with the no - tottering extensions ( [ eq : kernel - nototter ] ) of the size - based , branching - based , and until - n branching - based kernels to their original formulations . because our interest here is to get insights about the behavior of the different kernels , we report experimental results for varying values of the parameters entering their definition , namely the order @xmath30 of the patterns , and the pattern weighting parameter @xmath67 . in real - world applications",
    "one should of course design a procedure to select the best parameters from the date .",
    "the classification experiments described below were carried out with a support vector machine based on the different kernels tested .",
    "each kernel was implemented in c++ within the open - source chemcpp toolbox , and we used the open - source python machine learning package pyml to perform svm classification .",
    "the svm prediction is obtained by taking the sign of a score function . however , by varying this zero decision threshold , it is possible to compute the evolution of the true positive rate versus the false positive rate in a curve known as the receiver operating characteristic ( roc ) curve .",
    "the area under this curve , known as auc for area under the roc curve , is often considered to be a safer indicator of the quality of a classifier than its accuracy @xcite , being 1 for an ideal classifier , and 0.5 for a random classifier .",
    "the results presented below are averaged auc values obtained for 10 repetitions of a 5-fold cross - validation process . within each cross - validation fold ,",
    "the @xmath151 soft - margin parameter of the svm was optimized over a grid ranging from @xmath152 to @xmath153 , using an internal cross - validation method implemented in pyml .",
    "we considered two public datasets of chemical compounds in our experiments .",
    "both gather results of mutagenicity assays , and while the first one @xcite is a standard benchmark for evaluating chemical compounds classification , the second one @xcite was introduced more recently .",
    "the first dataset contains 188 chemical compounds tested for mutagenicity on _ salmonella typhimurium_. the molecules of this dataset belong to the family of aromatic and hetero - aromatic nitro compounds , and they are split into two classes : 125 positive examples with high mutagenic activity ( positive levels of log mutagenicity ) , and 63 negative examples with no or low mutagenic activity .",
    "the second database considered consists of 684 compounds classified as mutagens or non - mutagens according to a test known as the _",
    "salmonella_/microsome assay .",
    "this dataset is well balanced with 341 mutagens compounds for 343 non - mutagens ones .",
    "note that although the biological property to be predicted is the same , the two datasets are fundamentally different .",
    "while @xcite focused on a particular family of molecules , this dataset involves a set of very diverse chemical compounds , qualified as _ noncongeneric _ in the original paper .",
    "to predict mutagenicity , the model therefore needs to solve different tasks : in the first case it has to detect subtle differences between homogeneous structures , while in the second case it must seek regular patterns within a set of structurally different molecules .",
    "* tree - patterns vs walk - patterns : *   + figure [ fig : totters - mutag1 ] shows the results obtained for the size - based ( left ) and branching - based ( right ) kernels of definitions [ def : kernel - size ] and [ def : kernel - branch ] .",
    "each curve represents the evolution , for @xmath154 , of the auc obtained from patterns of a given order @xmath30 taken between 2 and 10 .",
    "because the corresponding auc values start by increasing with @xmath67 , we can note from figure [ fig : totters - mutag1 ] ( left ) that the introduction of tree - patterns is beneficial to the size - based kernel for patterns of order greater than two . in the case of the branching - based kernel ,",
    "figure [ fig : totters - mutag1 ] ( right ) suggests that this is only true for patterns of order greater than 2 and smaller than 6 , but figure [ fig : totters - branch - small_mutag1 ] shows that , based on smaller values of @xmath67 , this is still the case for patterns up to order 7 .",
    "taken together , figures [ fig : totters - mutag1 ] and [ fig : totters - branch - small_mutag1 ] show that the optimal auc values obtained with the size- and branching - based kernels for patterns of order 2 to 7 are globally similar .",
    "interestingly however , the corresponding @xmath67 values are systematically smaller in the case of the branching - based kernel .",
    "this is due to the fact that , as noted in section [ sec : gartner - def ] , the size - based penalization is stronger than the branching - based penalization . as a result , optimal @xmath67 values observed using the size - based kernel are shifted towards zero using the branching - based kernel .",
    "we can also note from figures [ fig : totters - mutag1 ] and [ fig : totters - branch - small_mutag1 ] that optimal values of @xmath67 tend to decrease for increasing @xmath30 .",
    "this is probably due to the fact that the number of tree - patterns increases exponentially with @xmath30 , and , as a result , the kernels need to limit their individual influence .",
    "actually , we observe that higher order patterns , with @xmath155 , can only be considered for sufficiently small values of @xmath67 .",
    "for example , we note that the size - based kernel computation does not converge if we consider patterns of order 10 and @xmath67 greater than 0.15 . in the case of branching - based kernel , due to the weaker pattern penalization",
    ", this phenomenon is even emphasized , and in that case , @xmath156 is the largest value acceptable for @xmath67 .",
    "this difference in the way to penalize the patterns probably explains the fact that while a slight improvement over the walk - based kernel can be observed in the case of the size - based kernel when @xmath30 is greater than 7 ( figure [ fig : totters - mutag1 ] , left ) , the performance systematically decreases with the branching - based kernel ( figure [ fig : totters - branch - small_mutag1 ] ) .",
    "additionally , we note that because the size- and branching - based penalization of balanced trees of order 2 is the same , the results obtained for @xmath157 are identical with the two kernels .",
    "surprisingly however , no improvement over the walk - based baseline is observed , which suggests that in this case , the tree - patterns do not bring additional information to that contained in the walk features , that consist here of simple pairs of connected atoms .    in conclusion ,",
    "these experiments demonstrate the improvement of the tree - patterns graph kernels over their walk - based counterparts . the impact of the tree - patterns is particularly marked for patterns of order 3 and 4 , where the two kernels improve by more than 3% the auc of the corresponding walk - based kernel . for patterns of increasing order",
    ", this figure gradually decreases , and for patterns of order greater than 7 , it drops to 1 % in the case of the size - based kernel , while no more improvement is observed with the branching - based kernel . in both cases ,",
    "optimal results are obtained for patterns of order 4 , with auc values of 95.3% and 95.0% .",
    "finally , it is worth noting the combinatorial explosion in the number of patterns for large orders , which in practice limits the acceptable values of @xmath67 to small values . +     at different orders @xmath30 .",
    "left : size - based kernel ( [ eq : kernel - size ] ) ; right : branching - based kernel ( [ eq : kernel - branch]).,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 . left : size - based kernel ( [ eq : kernel - size ] ) ; right : branching - based kernel ( [ eq : kernel - branch]).,title=\"fig:\",scaledwidth=50.0% ]    ) .",
    "evolution of the auc at different orders @xmath30 for small values of @xmath67.,scaledwidth=50.0% ]    * until - n extension : *   + figure [ fig : totters - untiln - mutag1 ] presents the results of the until - n extension ( [ eq : kernel - untiln ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "the figure on the left - hand side , showing the evolution of the auc for @xmath158 and @xmath154 , corresponds to that on the right - hand side of figure [ fig : totters - mutag1 ] .",
    "the figure on the right - hand side plots these auc values versus corresponding values obtained using the original kernel ( [ eq : kernel - branch ] ) .",
    "we can first notice strong similarities between the curve in the left - hand side and its original kernel counterpart .",
    "this is confirmed in the right - hand curve where all the points lie near the diagonal line that represents the equivalence between the two kernels .",
    "the fact that the differences between the two kernel formulations are barely noticeable is quite surprising since their associated feature spaces are intuitively quite different . in section",
    "[ sec : untiln ] , we mentioned that the feature space associated to the branching - based kernel is actually a subspace of the feature space associated to its until - n extension . as a result ,",
    "figure [ fig : totters - untiln - mutag1 ] suggests that the extra features related to the until - n extension do not bear additional information into the kernel .",
    "this hypothesis seems to be confirmed by the fact that the differences between corresponding walk - based kernels , observed for @xmath159 , are not significant neither .",
    "this might be explained by the fact that the dimensions of the corresponding feature space are probably strongly correlated due to the relation of inclusion existing between trees and walks patterns of orders @xmath18 , and those of order @xmath19 .",
    "another possible explanation for the lack of improvement of the until - n extension lies of course in the difficulty of learning in high dimension , suggesting that discriminating patterns of a given order are lost within the flood of patterns of greater orders taken into account by this until - n extension .     at different orders @xmath30 , for the until - n extension ( [ eq : kernel - untiln ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "right : auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 , for the until - n extension ( [ eq : kernel - untiln ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "right : auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]    * no - tottering extension : *   + figures [ fig : nototters - size - mutag1 ] , [ fig : nototters - branch - mutag1 ] and [ fig : nototters - branchuntiln - mutag1 ] respectively show the results of the no - tottering extension ( [ eq : kernel - nototter ] ) of the size - based ( [ eq : kernel - size ] ) , branching - based ( [ eq : kernel - branch ] ) , and until - n branching - based kernels ( [ eq : kernel - untiln ] ) .",
    "the curves on the left - hand side show the evolution of auc for @xmath158 and @xmath154 , and the curves on the right - hand side plot these auc values versus corresponding values obtained using the original kernels .",
    "if we compare the results of the no - tottering extensions of the size - based and branching - based kernels ( figures [ fig : nototters - size - mutag1 ] and [ fig : nototters - branch - mutag1 ] ) , we can first note that the the introduction of tree - patterns is now systematically beneficial for @xmath160 in both cases .",
    "moreover , we note that the kernel computations remain feasible for @xmath161 and @xmath162 , which means that the no - tottering extension limits the combinatorial explosion we observed with the original formulation . while optimal results were obtained for @xmath163 using the original kernels , we observe that here , in both cases , the performance gradually increases from @xmath164 to an optimum value obtained for @xmath165 . at a given order , we note that the optimal auc values obtained with the two kernels are similar , and that the corresponding @xmath67 value is smaller in the case of the branching - based kernel , which is consistent with the observations made in the previous section .",
    "optimal auc values are close to 96.5% and improve over the values around 95% observed with the initial formulation .",
    "importantly , we note that these optimal values are obtained using parametrizations of the kernels that lead to a combinatorial explosion in their initial formulation .",
    "finally , from the fact that almost all points lie above the diagonal in the right - hand curves , we can draw the conclusion that the no - tottering extension has almost consistently a positive influence on the classification in both cases .",
    "it is worth noting however that , even though the introduction of no - tottering tree - patterns was shown to be beneficial , part of the overall improvement over their tottering counterparts is due to the no - tottering extension itself , since no - tottering walk - based kernels , observed for @xmath150 , already improve significantly over their tottering counterparts , especially for high order patterns .",
    "we now turn to figure [ fig : nototters - branchuntiln - mutag1 ] and the no - tottering extension ( [ eq : kernel - nototter ] ) of the until - n branching - based kernel ( [ eq : kernel - untiln ] ) .",
    "we can first notice that conclusions similar to those related to the no - tottering extension of the branching - based kernel can be drawn : an improvement over the corresponding walk - based kernel is systematically observed for tree - patterns of order greater than 2 , the kernel behaves more nicely ( no combinatorial explosion ) , and the no - tottering extension consistently improves over the initial until - n branching - based kernel ( right - hand curve ) .",
    "interestingly however , we note that optimal results obtained for @xmath166 tend to converge to an optimal value around 95.5% ( between 95.3 and 95.9% ) for a @xmath67 value around 0.05 .",
    "while this global optimum is not as good as the overall optimal result obtained with the no - tottering branch - based kernel ( figure [ fig : nototters - branch - mutag1 ] ) , it still remains competitive ( 95.5% vs 96.5% ) .",
    "this observation contrasts with the the results obtained with the until - n extension in the tottering case , where patterns of a given order seemed to be lost in the amount of patterns of greater orders taken into account by the kernel .",
    "this is due to the fact the the no - tottering extension limits the number of patterns to be detected , and suggests that patterns of different orders can now be considered simultaneously in the kernel .",
    "this fact therefore suggests that in the no - tottering case , the until - n extension can help solving the problem of pattern order selection by taking a maximal pattern order large enough ( here , @xmath167 ) .     at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the size - based kernel ( [ eq : kernel - size ] ) .",
    "right : no - tottering auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the size - based kernel ( [ eq : kernel - size ] ) .",
    "right : no - tottering auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]     at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "right : no - tottering auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "right : no - tottering auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]     at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the until - n branching - based kernel ( [ eq : kernel - untiln ] ) .",
    "right : no - tottering auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the until - n branching - based kernel ( [ eq : kernel - untiln ] ) .",
    "right : no - tottering auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]      in this section , we apply the same analysis to the second dataset . + * tree - patterns vs walk - patterns : *   + figure [ fig : totters - mutag2 ] shows the results obtained with the original size - based ( [ eq : kernel - size ] ) and branching - based ( [ eq : kernel - branch ] ) kernels .",
    "several observations are consistent with those we drew with the fist dataset .",
    "first , the introduction of tree - patterns has in both cases a positive influence on the classification , and is particularly marked for patterns of limited order ( up to a relative improvement of 12% for @xmath157 , and 4.5% for @xmath164 ) .",
    "moreover , optimal values of the @xmath67 parameter are smaller in the case of the branching - based kernel , they decrease for increasing @xmath30 , and quickly lead to a combinatorial explosion for high - order patterns .",
    "finally , we note that , in both cases , optimal auc values are around 84% , and are obtained for patterns of order 3 and 4 , which is similar to the optimal order observed for the first dataset .",
    "however , we can note the interesting difference that here , tree - patterns of order 2 improve dramatically the results over their walk counterparts , which suggests that different molecular features are to be detected in both datasets .",
    "+     at different orders @xmath30 . left : size - based kernel ( [ eq : kernel - size ] ) ; right : branching - based kernel ( [ eq : kernel - branch]).,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 . left : size - based kernel ( [ eq : kernel - size ] ) ; right : branching - based kernel ( [ eq : kernel - branch]).,title=\"fig:\",scaledwidth=50.0% ]    * until - n extension : *   + figure [ fig : totters - untiln - mutag2 ] shows the results obtained with the until - n extension ( [ eq : kernel - untiln ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) . here",
    "again , observations are consistent with the first dataset .",
    "in particular , we can note that the results obtained with and without the until - n extension are very similar , and this fact is even more pronounced here .",
    "this second evidence confirms that the until - n extension is of little use in the original formulation of the kernel , most probably because patterns of a given order are drowned within the amount of patterns of greater orders . +     at different orders @xmath30 for the until - n extension ( [ eq : kernel - untiln ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "right : auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 for the until - n extension ( [ eq : kernel - untiln ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "right : auc values vs original auc values.,title=\"fig:\",scaledwidth=50.0% ]    * no - tottering extension : *   + figure [ fig : nototters - size - mutag2 ] , [ fig : nototters - branch - mutag2 ] and [ fig : nototters - branchuntiln - mutag2 ] respectively present the results of the no - tottering extension ( [ eq : kernel - nototter ] ) of the size - based ( [ eq : kernel - size ] ) , branching - based ( [ eq : kernel - branch ] ) , and until - n branching - based ( [ eq : kernel - untiln ] ) kernels .",
    "several observations are consistent with the first dataset .",
    "we can likewise note that with the no - tottering extension , the introduction of tree - patterns is systematically beneficial in both kernels .",
    "moreover , at a given order , optimal results observed with the two kernels are similar , and the corresponding @xmath67 value is smaller with the branching - based kernel . finally , the no - tottering extension limits the combinatorial explosion of the kernels computation .",
    "there is however a striking difference because results are optimal here for patterns of order 3 , patterns of order 2 rank second , and the results gradually decrease for orders greater than 3 .",
    "this behavior is exactly opposite to the one we observed with the first dataset , where results gradually increased with the order of the patterns and were optimal for patterns of order 8 .",
    "this therefore tends to confirm that distinct features are to be detected within the two datasets , and can be explained by the fact that the compounds are structurally similar in the first dataset , and different ( or _ noncongeneric _ ) in the second one .",
    "indeed , while the kernel needs to detect subtle differences between the compounds of the first dataset , it must identify regular patterns within the second one , and it is not surprising that discriminating patterns are shorter in this case .",
    "this observation supports the intuition that the choice of the order of the patterns should to be related to ( or learned from ) the dataset itself , as suggested in section [ sec : gartner - def ] .",
    "finally , we note that the best auc value is around 84 % ( corresponding to a relative improvement of 7% over the corresponding walk - based kernel ) , and is therefore similar to that obtained with the original formulation of the kernel .",
    "nevertheless , we observe from the curves on the right - hand side that contrary to the first dataset , the no - tottering extension has a limited overall impact .",
    "this is due to the surprising fact that here , the no - tottering extension does not seem to be beneficial by itself , since we can note that it systematically degrades the performance of the corresponding walk - based kernels , obtained for @xmath159 . as a result , even though the introduction of tree - patterns is beneficial in both cases , better performances can be obtained here if we consider tottering tree - patterns .",
    "once again this behavior is opposite to that of the first dataset .",
    "this might be explained as well by the fact that , contrary to the first dataset , the molecules considered here are structurally different , and as a result , tottering can help finding common features between these noncongeneric compounds .    concerning the no - tottering extension ( [ eq : kernel - nototter ] ) of the until - n branching - based kernel ( [ eq : kernel - untiln ] ) ,",
    "results presented in figure [ fig : nototters - branchuntiln - mutag2 ] are not clear .",
    "indeed , in that case , the introduction of the tree - patterns only improves the results for patterns of limited order , and for patterns of order greater than 4 , results systematically decrease .",
    "we can however note the interesting point that optimal results obtained for patterns of order 5 to 10 converge to a global optimal value between 85 and 86 % . this therefore tends to confirm that in the no - tottering case , the until - n extension can help solving the problem of pattern order selection by considering a maximal pattern order large enough ( here , @xmath168 ) .",
    "nevertheless , the striking difference with the results obtained with the first dataset is that in this case , when @xmath167 , the introduction of tree - patterns could not further improve the results obtained by the until - n walk - based kernel , that constitute the overall best performance we could observe for this dataset .     at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the size - based kernel ( [ eq : kernel - size ] ) .",
    "right : no - tottering auc values vs original values.,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the size - based kernel ( [ eq : kernel - size ] ) .",
    "right : no - tottering auc values vs original values.,title=\"fig:\",scaledwidth=50.0% ]     at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "right : no - tottering auc values vs original values.,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the branching - based kernel ( [ eq : kernel - branch ] ) .",
    "right : no - tottering auc values vs original values.,title=\"fig:\",scaledwidth=50.0% ]     at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the until - n branching - based kernel ( [ eq : kernel - untiln ] ) .",
    "right : no - tottering auc values vs original values.,title=\"fig:\",scaledwidth=50.0% ]   at different orders @xmath30 for the no - tottering extension ( [ eq : kernel - nototter ] ) of the until - n branching - based kernel ( [ eq : kernel - untiln ] ) .",
    "right : no - tottering auc values vs original values.,title=\"fig:\",scaledwidth=50.0% ]",
    "this paper introduces a family of graph kernels based on the detection of common tree patterns in the graphs . in a first step",
    ", we revisited an initial formulation presented in @xcite , from which we derived two kernels with explicit feature spaces and inner products .",
    "a parameter @xmath67 enters their definition and makes it possible to control the complexity of the features characterizing the graphs . at the extreme ,",
    "admissible tree - patterns consist of linear chains of graph vertices , and the kernels resume to a classical graph kernel based on the detection of common walks @xcite .",
    "walk - based graph kernels are therefore generalized to a wider class of kernels defined by features of increasing levels of complexity . in a second step we introduced two modular extensions to this initial formulation . on the one hand ,",
    "the set of trees initially indexing the feature space is enriched by the set of their subtrees with an _ until - n _ extension , leading to a wider and more general feature space . on the other hand ,",
    "a _ no - tottering _ extension prevents spurious tree - patterns to be detected , based on the notion of `` tottering '' initially introduced in the context of walk - based graph kernels @xcite .    in the context of chemical applications , experiments on two toxicity datasets",
    "demonstrate that the tree - pattern graph kernels under their initial formulation improve over their walk - based counterpart .",
    "however , while a significant improvement could be observed for relatively small patterns , experiments revealed the difficulty to handle high order patterns .",
    "this is due to the fact that the number of tree - patterns detected in the graphs increases exponentially with their depth , which leads to a combinatorial explosion of the kernels computation for large patterns .",
    "for this reason , the until - n extension showed to be useless in this context : patterns of a given order are drowned within the flood of patterns of greater order , and the two kernel formulations turned out to be equivalent . with the elimination of artificial tree - patterns , the no - tottering extension limits this combinatorial explosion , and patterns of higher order",
    "can be considered in the kernel .",
    "this was in particular beneficial to the first dataset where optimal results were obtained with high - order no - tottering patterns .",
    "nevertheless , we notice that this extension is not always beneficial , and that in some cases , artificial common patterns due to the tottering phenomenon can help detecting molecular similarity .",
    "this is in particular the case for the second dataset , and can be explained by the fact that , in opposition to the first dataset , it consists of structurally different compounds .",
    "the combination of the two extensions led to mixed results .",
    "for the first dataset , we observe that the introduction of tree - patterns in this context could now improve over their walk - based counterparts for any maximum pattern order .",
    "this suggests that the limitation of the combinatorial explosion offered by the no - tottering extension makes it possible to combine patterns of different order in the kernel .",
    "however , albeit close , optimal results with the until - n extension could not come up with the optimal results that were obtained with no - tottering patterns of a given order .",
    "this suggests that very precise patterns were to be detected , and that their discriminative power is reduced by the addition of other , less predictive , patterns . for the second dataset ,",
    "the combination of the two extensions led to optimal results . in that case however , the introduction of tree - patterns was not always beneficial and these optimal results were obtained by until - n , no - tottering walk - kernels . finally , we can note that , when the maximum order of the patterns considered is large enough , results obtained with the until - n extension and no - tottering patterns tend to converge to a global optimum which is close , or equal to , to the overall best performance observed in both datasets .    among the possible extensions to our work , we note that it might be relevant in the context of chemical applications to incorporate chemical knowledge in the graph representation of the molecules .",
    "for instance , it is well known that physico - chemical properties of atoms are related to their position in the molecule , and as a first step in this direction , an enrichment of atom labels by their morgan indices led to promising results in the context of walk - based kernels @xcite .",
    "however , this particular approach is likely to have a lesser impact in this context , because the information encoded by the morgan indices is at some extend already incorporated in the tree - patterns .",
    "alternatively , we note that the kernel implementation could easily be extended in order to introduce a flexible matching between tree - patterns based on measures of similarity between pairs of vertices and edges , following for instance the construction of the marginalized kernel between labeled graphs @xcite",
    ". such an extension would induce an increase in the cost of computing the kernel , but is likely to make sense for chemical applications , where atoms of different types can exhibit similar properties .",
    "in propositions [ prop : comput - size ] and [ prop : comput - branch ] , we want to prove that for the graphs @xmath53 and @xmath54 @xmath169 where in proposition [ prop : comput - size ] , @xmath170 and @xmath171 , while in proposition [ prop : comput - branch ] , @xmath172 and @xmath173 .",
    "from definition [ def : tree - counting ] we have @xmath174 . as a result , @xmath175 and in order to prove ( [ eq : proof1 ] ) we just need to prove @xmath176      in order to prove proposition [ prop : comput - size ] , it follows from ( [ eq : proof2 ] ) that we just need to prove that @xmath177 or equivalently : @xmath178 where @xmath179 is defined recursively by @xmath180 and for @xmath181 : @xmath182    we prove ( [ eq : tobeproved ] ) by induction on @xmath30 . the case @xmath183 is rather trivial . indeed , a tree of depth one is just a single node , and @xmath184 is therefore equal to @xmath185 if @xmath186 , @xmath187 otherwise .",
    "it follows that @xmath188 which corresponds to @xmath189 .",
    "let us now assume that ( [ eq : tobeproved ] ) is true at order @xmath69 , and let us prove that it is then also true at order @xmath181 . combining the recursive definition of @xmath179 ( [ eq : kh ] ) with the induction hypothesis ( [ eq : tobeproved ] ) at level @xmath69 we first obtain : @xmath190 second , for any graph @xmath10 , let us denote by @xmath191 the set of balanced tree - patterns of order @xmath18 rooted in @xmath12 , and for any tree - pattern @xmath192 let @xmath193 denote the corresponding tree . with these notations we can rewrite , for any @xmath194 and @xmath195 : @xmath196 indeed both sides of this equation count the number of pairs of similar tree - patterns rooted in @xmath16 and @xmath50 . plugging ( [ eq : jp2 ] ) into ( [ eq : jp1 ] )",
    "we get : @xmath197 now we use the fact that any tree - pattern @xmath198 of order @xmath30 can be uniquely decomposed into a tree - pattern @xmath199 of order @xmath200 and a set of tree - patterns of order @xmath69 rooted at the leaves of @xmath199 .",
    "we note that matching two tree - patterns is equivalent to matching the tree - patterns in their decomposition , and that the sets of leaves of tree - patterns of order 2 rooted respectively in @xmath16 and @xmath50 matching each other are exactly given by @xmath201 . in other words , ( [ eq :",
    "jp3 ] ) performs a summation over pairs of matching tree - patterns of depth @xmath30 , rooted respectively in @xmath16 and @xmath50 : the corresponding pairs of patterns of order 2 are implicitly matched by the summation over @xmath201 and the condition @xmath202 , and the subsequent pairs of patterns @xmath203 of order @xmath69 are matched by the product of conditions @xmath204 .",
    "the tree - pattern @xmath205 in @xmath206 of such a matching pair of tree - patterns of order @xmath30 rooted in @xmath207 decomposes as a pattern of depth 2 rooted in @xmath16 with leaves in some @xmath91 , and a set of patterns @xmath208 of depth @xmath69 rooted in the leaves @xmath209 . by ( [ eq : jp3 ] ) , to each such matching pair is associated the weight @xmath210 , which is exactly equal to @xmath211 since we obviously have @xmath212 . as a result , ( [ eq : jp3 ]",
    ") can be rewritten as : @xmath213 which combined with ( [ eq : jp2 ] ) proves ( [ eq : tobeproved ] ) .",
    "the proof of proposition [ prop : comput - branch ] is a straightforward variant of the proof of proposition [ prop : comput - size ] . by ( [ eq : proof2 ] )",
    "we need to show that @xmath214 where @xmath179 is defined recursively by @xmath215 and for @xmath181 : @xmath216 we proceed again by induction over @xmath30 to prove ( [ eq : tobeproved10 ] ) .",
    "the case @xmath183 is easily done by checking , using an argument similar to that of the previous proof , that ( [ eq : tobeproved10 ] ) is one if @xmath217 and @xmath218 are identical , zero otherwise , which corresponds to the definition of @xmath189 . if we assume that ( [ eq : tobeproved10 ] ) is true at the level @xmath69 , we can plug it in ( [ eq : kh10 ] ) to obtain : @xmath219    we can then follow exactly the same line of proof as in the previous section and obtain the following equations @xmath220 and @xmath221 that correspond respectively to ( [ eq : jp2 ] ) and ( [ eq : jp3 ] ) .",
    "the only difference with the previous proof is in the exponent of @xmath67 to form the weight of a matching pair of tree - patterns . by analogy with the previous proof ,",
    "we consider the tree - pattern @xmath205 in @xmath206 of a pair of matching tree - patterns of depth @xmath30 rooted in @xmath207 , that decomposes as a pattern of depth 2 rooted in @xmath16 with leaves in some @xmath222 , and a set of patterns @xmath208 of depth @xmath69 rooted in the leaves @xmath209 . by ( [ eq : jp3-bis ] ) , to each such matching pair is associated the weight @xmath223 .",
    "we observe that the number of leaves of a tree @xmath26 , that we note @xmath224 , is equal to @xmath225 . the weight associated to the above pair of matching tree - patterns",
    "can therefore be written as @xmath226 . finally , because the number of leaves of the tree - pattern @xmath205 is equal to the sum of the leaves of the patterns @xmath227 , it follows that this expression is equal to @xmath228 . as a result",
    ", we can write ( [ eq : jp3-bis ] ) as @xmath229 which , combined with ( [ eq : jp2-bis ] ) , concludes the proof .",
    "the proof presented in this section is very similar to the proofs of propositions [ prop : comput - size ] and [ prop : comput - branch ] .",
    "based on the observations made in the beginning of appendix [ app : proof1 ] , it follows from ( [ eq : proof2 ] ) that in order to prove proposition [ prop : untiln ] , we just need to prove that @xmath230 where @xmath89 is defined recursively by @xmath215 and for @xmath181 @xmath231 we proceed again by induction over @xmath30 to prove ( [ eq : tobeproved11 ] ) .",
    "the case @xmath183 directly follows from the proof of proposition [ prop : comput - branch ] .",
    "if we assume that ( [ eq : tobeproved11 ] ) is true at the level @xmath69 , we can plug it in ( [ eq : kh11 ] ) to obtain : @xmath232 by analogy with the construction of the previous proof , for any graph @xmath10 , let us denote by @xmath191 the set of tree - patterns of depth 1 to @xmath18 rooted in @xmath12 , and for any tree - pattern @xmath192 let @xmath233 denote the corresponding tree .",
    "note that @xmath191 corresponds here to general tree - patterns of depth 1 to @xmath18 , in opposition to the balanced - tree patterns of order @xmath18 involved in the previous proofs . with these notations",
    "we obtain similarly , for any @xmath194 and @xmath195 : @xmath234 and , plugging ( [ eq : jp2-ter ] ) into ( [ eq : jp1-ter ] ) , we get : @xmath235 which can be further decomposed into : @xmath236 the second part of the right member of ( [ eq : jp4-ter ] ) matches pairs of tree - patterns of depth 2 to @xmath18 rooted in @xmath207 .",
    "it follows directly from the proof of proposition [ prop : comput - branch ] that such a pair @xmath203 of matching tree - patterns is weighted by @xmath237 .",
    "the first part of the right member of ( [ eq : jp4-ter ] ) matches the trivial pair of tree - patterns of depth 1 rooted in @xmath207 consisting of the single nodes @xmath207 .",
    "the corresponding tree has a zero branching cardinality , and we can therefore write @xmath238 taken together , these two arguments show that ( [ eq : jp4-ter ] ) can be written as @xmath239 which concludes the proof .",
    "the proof is derived from results presented in @xcite .",
    "the sets of walks and no - tottering walks of the graph @xmath240 are respectively defined by @xmath241 and @xmath242 , where @xmath243 is the set of walks of length @xmath18 defined is section [ sec : gartner - def ] , and @xmath244 is the set of no - tottering walks of length @xmath18 defined in @xcite .",
    "we start by stating the following lemma .",
    "[ lemma : nototters ] a tree - pattern @xmath198 of the graph @xmath10 associated to the tree @xmath26 is no tottering if , and only if , any walk of g defined as a succession of vertices of @xmath198 corresponding to nodes of @xmath26 forming a path from its root to one of its leaves is no - tottering .    according to definition [ def : nototter - counting ] ,",
    "let @xmath245 be a no - tottering tree pattern of the graph @xmath2 corresponding to the tree @xmath32 , where @xmath246 .",
    "let @xmath247 be a path from the root of @xmath26 to one of its leaves . by definition [ def : tree - pattern",
    "] , it is clear that @xmath248 .",
    "moreover , by the definition of paths we have @xmath249 for @xmath250 . by definition [ def : nototter - counting ] , this implies that @xmath251 for @xmath252 , meaning that @xmath253 .",
    "conversely , let @xmath254 be a tree - pattern of the graph @xmath2 corresponding to the tree @xmath32 .",
    "consider the set of walks of @xmath10 defined as successions of vertices of @xmath198 associated to nodes of @xmath26 forming paths from its root to its leaves .",
    "if these walks are not tottering , it is clear from definition [ def : nototter - counting ] that the tree - pattern itself is not tottering .      if , according to definition [ def : transfo ] , we let @xmath139 be the transformed graph of @xmath10 , @xcite showed that there is a bijection between @xmath255 and the set of walks of @xmath139 starting in a vertex corresponding to a vertex of @xmath10 , which can be formally defined as @xmath256 if we let @xmath140 be the subset of @xmath257 that corresponds to @xmath3 .",
    "it follows from lemma [ lemma : nototters ] that there is a bijection between the set of no - tottering tree - patterns of @xmath10 and the set of tree - patterns of @xmath139 rooted in a vertex of @xmath258 .",
    "finally , @xcite showed that a walk in @xmath255 and its image in @xmath259 are identically labeled , which enables to count no - tottering labeled walks in @xmath10 , by counting identically labeled walks in @xmath139 starting in a vertex of @xmath258 .",
    "it follows that counting no - tottering tree - patterns in @xmath10 is equivalent to counting tree - patterns in @xmath139 rooted in a vertex of @xmath258 . as a result ,",
    "we have @xmath260 , which concludes the proof .      k.m .",
    "borgwardt , c.s .",
    "ong , s.  schnauer , s.v.n .",
    "vishwanathan , a.j .",
    "smola , and h .-",
    "protein function prediction via graph kernels . , 210 ( suppl .",
    "1):0 i47i56 , jun 2005 .",
    "url http://dx.doi.org/10.1093/bioinformatics/bti1007 .",
    "t.  grtner , p.  flach , and s.  wrobel . on graph kernels : hardness results and efficient alternatives . in b.",
    "schlkopf and m.  warmuth , editors , _ proc . of the sixteenth annual conference on computational learning theory and the seventh annual workshop on kernel machines _ ,",
    "volume 2777 of _ lecture notes in computer science _ , pages 129143 , heidelberg , 2003 .",
    "url http://dx.doi.org/10.1007/b12006 .    c.  helma , t.  cramer , s.  kramer , and l.  de  raedt .",
    "data mining and machine learning techniques for the identification of mutagenicity inducing substructures and structure activity relationships of noncongeneric compounds .",
    ", 440 ( 4):0 140211 , 2004 .",
    "url http://dx.doi.org/10.1021/ci034254q .",
    "y.  karklin , r.  f. meraz , and s.r .",
    "classification of non - coding rna using graph representations of secondary structure .",
    ", pages 415 , 2005 .",
    "url http://helix-web.stanford.edu/psb05/karklin.pdf .",
    "r.  d. king , s.  h. muggleton , a.  srinivasan , and m.  j. sternberg .",
    "tructure - activity relationships derived by machine learning : the use of atoms and their bond connectivities to predict mutagenicity by inductive logic programming . , 930 ( 1):0 438442 , jan 1996 .",
    "p.  mah , n.  ueda , t.  akutsu , j .- l .",
    "perret , and j .-",
    "graph kernels for molecular structure - activity relationship analysis with support vector machines . , 450 ( 4):0 93951 , 2005 .",
    ".      j.  ramon and t.  grtner .",
    "xpressivity versus efficiency of graph kernels . in t.",
    "washio and l.  de  raedt , editors , _ proceedings of the first international workshop on mining graphs , trees and sequences _ , pages 6574 , 2003 ."
  ],
  "abstract_text": [
    "<S> motivated by chemical applications , we revisit and extend a family of positive definite kernels for graphs based on the detection of common subtrees , initially proposed by @xcite . </S>",
    "<S> we propose new kernels with a parameter to control the complexity of the subtrees used as features to represent the graphs . </S>",
    "<S> this parameter allows to smoothly interpolate between classical graph kernels based on the count of common walks , on the one hand , and kernels that emphasize the detection of large common subtrees , on the other hand . </S>",
    "<S> we also propose two modular extensions to this formulation . </S>",
    "<S> the first extension increases the number of subtrees that define the feature space , and the second one removes noisy features from the graph representations . we validate experimentally these new kernels on binary classification tasks consisting in discriminating toxic and non - toxic molecules with support vector machines . </S>"
  ]
}