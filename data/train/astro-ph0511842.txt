{
  "article_text": [
    "pairitel , name for the late telescope operator jim peters , is an automated 1.3 m telescope located at the ridge of mt .",
    "hopkins in arizona .",
    "the telescope and simultaneous @xmath0,@xmath1,@xmath2 camera were formerly used in the 2mass project which ended data taking operations in 2001 .",
    "our refurbishing work began in mid-2003 using a small donation from the harvard milton fund .",
    "basic telescope automation was achieved by the dedication on october 21st , 2004 .    from the outset",
    ", pairitel was designed for automated , queue based observing , with the ability to rapidly respond to targets of opportunity ( toos ) such as gamma - ray burst ( grb ) alerts from space - based satellites .",
    "the best response thus far was 90 seconds from gamma - ray burst trigger ( grb 051109a ) to the beginning of the first observation .",
    "although rapid response telescopes require a significant amount of automation , the remote location of this telescope required additional levels of autonomy .",
    "we required that the observatory software be able to diagnose inclement weather and control system problems and respond appropriately , as if an observer were present .",
    "pairitel determines the observing schedule using an intelligent queuing database which incorporates new observations into a dynamic scheduling system , while accounting for recently acquired observations .",
    "software components must also rely upon cross communication .",
    "for example , a monitor of the transmission , acquisition / reduction software , and telescope pointing need complex interactions to maximize observing efficiency .",
    "the key to coordinating our autonomous observatory is a program called the ` master daemon ' ( hereafter masterd ) .",
    "based on a robotics state machine , masterd monitors the states of all other software processes .",
    "then , using a template which defines actions for various state changes , it commands other software atoms to act .",
    "separating each observatory task into individual software sub - processes ( ` daemons ' ) allows them to be managed in a generalized way ( fig .  1 ) .",
    "as daemons are initiated and restartable on a system level , we can then assume them always to be running .",
    "if a critical error occurs in a daemon , the master daemon will notice the timeout of a ` heartbeat ' , and restart it .",
    "the state machine design also allows for self - regulating actions .",
    "one example is determining the current accuracy of the telescope pointing . by monitoring a transmission daemon ( which determines sky transparency ) and possibly the time of the night ,",
    "the master daemon can see when a pointing check / correction is needed .",
    "it then commands other daemons to do actions such as : halting an observation , performing a ",
    "soft `` pointing check at a known bright star position , or initiating a hardware - based pointing check by using a custom set of codes designed to interact with opto - interruptors and a tiltometer . in this case , once the pointing state is ' ' excellent \" , the master daemon will resume the observations .",
    "the observation software consists of three main parts : the observation database , the scheduling software , and the observing daemon .",
    "although this software is controlled by the master daemon on the highest level , the queuing , acquisition , and time accounting takes place independent of it .",
    "the observation database is mysql based and generally accessed remotely by astronomers using a php interface .",
    "the scheduling software accesses the database using the mysqldb python module .",
    "this database is organized as tables hierarchically by : project , then objects within projects , and observations of objects .",
    "users can set priorities of objects within their projects ; the projects themselves are assigned relative priorities and total awarded observing time .",
    "bookkeeping for total time observed per project is performed in a realtime feedback system .",
    "the observation queue scheduler selects which programs and objects are observed during a night ( fig .  1 ) .",
    "it calculates the observing plans on a daily basis , but can also be commanded to recalculate them realtime by an astronomer or by itself ( for instance when a too arrives ) .",
    "the resulting queues are optimized using variables such as airmass , priority , and time since previous observation .",
    "the scheduler also dynamically updates its database by parsing recently acquired fits files and adding the information to the corresponding programs .",
    "the observing daemon executes observation sequences sent by the scheduling software .",
    "it calculates all dithering sequences and using python interfaces , it controls both the telescope and camera controllers .",
    "the requested observation sequences ( and the output metadata from the camera ) are defined in xml files and are automatically queued by the observing daemon whenever the scheduler sends them . in the case that the observation is a too , the daemon aborts the current exposure , slews the telescope , and begins exposing .",
    "the pairitel reduction pipeline is written in python using the _ pyfits _ and pyraf modules .",
    "the image processing is fairly straight forward , using realtime created darks and archived twilight flats .",
    "in addition , bad pixels are fixed and the world coordinate wcs is calculated in the final mosaiced image .",
    "the ` status ' web page ( fig .",
    "3 ) displays an overview of all states monitored by the master daemon .",
    "the color coded boxes allow a quick assessment of the system .",
    "additionally , clicking on any state gives a detailed history log of that state .",
    "real - time quick - look reductions are also available with a click .",
    "automating the pairitel telescope has been surprisingly fast due to quick software implementation .",
    "we attribute much of this to our choice of python as our development language .",
    "python has allowed easy coding of software hooks into electronic devices using serial , network , and parallel port modules .",
    "the high level aspects of the language also helped us design algorithms which are template based and thus easily configured and updateable .",
    "the overall ease in producing working code has allowed us to experiment with different approaches in solving problems . for these reasons",
    ", we were able to rapidly develop and test the master deamon and observation software ."
  ],
  "abstract_text": [
    "<S> the peters automated infrared imaging telescope ( pairitel ) is the first meter - class telescope operating as a fully robotic ir imaging system . </S>",
    "<S> dedicated in october 2004 , pairitel began regular observations in mid - december 2004 as part of a 1.5 year commissioning period . </S>",
    "<S> the system was designed to respond without human intervention to new gamma - ray burst transients : this milestone was finally reached on november 9 , 2005 but the telescope had a number of semi - automated sub-10 minute responses throughout early commissioning . when not operating in target of opportunity mode , pairitel performs a number of queue scheduled transient monitoring campaigns . to achieve this level of automation </S>",
    "<S> , we have developed communicating tools to connect the various sub - systems : an intelligent queue scheduling database , run - time configurable observation sequence software , a data reduction pipeline , and a master state machine which monitors and controls all functions within and affecting the observatory . </S>"
  ]
}