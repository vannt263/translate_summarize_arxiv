{
  "article_text": [
    "this report documents the implementation of a number of planar 1d heat flow problems in the verification package exactpack@xcite .",
    "the first problem that we consider is the planar sandwich of ref .",
    "@xcite , and some generalizations thereof , under the class names 0.4 cm    1 .",
    "planarsandwich 2 .",
    "planarsandwichhot 3 .",
    "planarsandwichhalf 4 .",
    ".    we will describe each of these classes in this section , and will provide instructions on how to use them in a python script ( for plotting or data analysis , for example ) .",
    "we also provide a pedagogical treatment of 1d heat flow and a detailed derivation of the cases treated herein .",
    "we have implemented the general 1d heat flow problem as the class rod1d , and the planar sandwich classes inherit from this base class .",
    "these classes can be imported and accessed in a python script as follows ,     plus 1pt minus 1pt    .... from exactpack.solvers.heat import planarsandwich from exactpack.solvers.heat import planarsandwichhot from exactpack.solvers.heat import planarsandwichhalf from exactpack.solvers.heat import rod1d   .",
    "....     plus 1pt minus 1pt to instantiate and use these classes for plotting or analysis , one must create a corresponding _ solver _ object ; for example , an instance of the planar sandwich is created by    0.2 cm plus 1pt minus 1pt    .... solver = planarsandwich(t1=1 , t2=0 , l=2 )   .",
    "....     plus 1pt minus 1pt this creates an exactpack solver object called solver , with boundary conditions @xmath0 and @xmath1 , and length @xmath2 .",
    "all other variables take their default values .",
    "the solver object does not know anything about the spatial grid of the solution , and we must pass an array of @xmath3-values along the length of the rod , as well as a time variable @xmath4 at which to evaluate the solution ; for example , 0.2 cm plus 1pt minus 1pt    .... x = numpy.linspace(0 , 2 , 1000 ) t = 0.2    soln = solver(x , t ) soln.plot('temperature ' )   .   ....     plus 1pt minus 1pt this creates an exactpack _ solution _ object called soln .",
    "solution objects in exactpack come equipped with a plotting method , as illustrated in the last line above , in addition to various analysis methods not shown here .",
    "now that we have reviewed the mechanics of importing and using the various planar classes , let us turn to the physics of 1d heat flow .",
    "the planar sandwich is a special case of the simplest form of heat conduction problem , namely , 1d heat flow in a rod of length @xmath5 and constant heat conduction @xmath6 . the heat flow equation , along with the boundary conditions and an initial condition ,",
    "take the form@xcite , @xmath7    { \\rm bc } :      \\hskip1.16 cm    \\alpha_1 t(0,t ) + \\beta_1 \\partial_x t(0,t ) & = & \\gamma_1    \\hskip2.8 cm t > 0 \\label{eq_onedrodbnha }      \\\\[-3pt ]    \\alpha_2 t(l , t ) + \\beta_2 \\partial_x t(l , t ) & = & \\gamma_2 \\label{eq_onedrodbnhb }      \\\\[5pt ]    { \\rm ic } :      \\hskip4.05 cm    t(x,0 ) & = & t_0(x )       \\hskip2.2 cm     0 < x < l    \\ . \\label{eq_onedrodcnh}\\end{aligned}\\ ] ] we use an arbitrary but consistent set of temperature units throughout .",
    "equation  ( [ eq_onedrodanh ] ) is the diffusion equation ( de ) describing the temperature response to the heat flow , the second two equations ( [ eq_onedrodbnha ] ) and ( [ eq_onedrodbnhb ] ) specify the boundary conditions ( bc ) , each of which which are taken to be a linear combination of neumann and dirichlet boundary conditions .",
    "the final equation ( [ eq_onedrodcnh ] ) is the initial condition ( ic ) , specifying the temperature profile of the rod at @xmath8 .",
    "when the right - hand sides of the bcs vanish , @xmath9 , the problems is called _ homogeneous _ , otherwise the problem is called _",
    "nonhomogeneous_. the special property of homogeneous problems is that the sum of any two homogeneous solutions is another homogeneous solution .",
    "this is not true of nonhomogeneous problems , since the nonhomogeneous bc will not be satisfied by the sum of two nonhomogeneous solutions .",
    "finding a solution to the nonhomogeneous problem ( [ eq_onedrodanh])([eq_onedrodcnh ] ) involves two steps .",
    "the first is to find a general solution to the homogeneous problem , which wdenote by @xmath10 in the text ; and the second step is to find a specific solution to the nonhomogeneous problem . we accomplish the latter by finding a _ static _ nonhomogeneous solution , which is denoted by @xmath11 , as this is easier than finding a fully dynamic nonhomogeneous solution . in 1d , and laplaces equation @xmath12 in 2d .",
    "] there are times when finding a static nonhomogeneous solution is not possible , but in our context , these cases are rare , and will not be treated here .",
    "the sum of the general homogeneous and the specific nonhomogeneous solutions , @xmath13 will in fact be a solution to the full nonhomogeneous problem .",
    "the homogeneous solution @xmath10 will be represented as a fourier series , and its coefficients will be chosen so that the initial condition ( [ eq_onedrodcnh ] ) is satisfied by @xmath14 , _",
    "i.e. _ we choose the fourier coefficients of @xmath15 such that @xmath16 the boundary conditions ( [ eq_onedrodbnha ] ) and ( [ eq_onedrodbnhb ] ) are specified by the coefficients @xmath17 , @xmath18 , and @xmath19 for @xmath20 .",
    "combinations of these parameters produce temperatures and fluxes @xmath21 and @xmath22 , and it is often more convenient to specify the boundary conditions in terms of these quantities .",
    "for example , if @xmath23 in ( [ eq_onedrodbnha ] ) , then the bc becomes @xmath24 , which we can rewrite in the form @xmath25 with @xmath26 .",
    "this leads to four special cases for the boundary condition , the first being @xmath27    & &    t(l , t ) = t_2 ~:~    \\hskip0.15 cm",
    "\\alpha_2 \\ne 0 \\hskip0.5 cm \\beta_2 = 0   \\hskip0.5 cm \\gamma_2 \\ne 0     \\hskip1.0 cm   t_2 = \\frac{\\gamma_2}{\\alpha_2 }    \\label{bcttwo }      \\ .\\end{aligned}\\ ] ] by setting @xmath28 , with @xmath29 , we arrive at the heat flux boundary condition , @xmath30    & &    \\partial_x t(l , t ) = f_2 ~:~    \\hskip0.15 cm    \\alpha_2 = 0 \\hskip0.5 cm \\beta_2 \\ne 0    \\hskip0.5 cm \\gamma_2 \\ne 0       \\hskip1.0 cm   f_2 = \\frac{\\gamma_2}{\\beta_2 }      \\label{eq_bc2b_non }    \\ .\\end{aligned}\\ ] ] as we shall see , we must further constrain the heat flux so that @xmath31 .",
    "this is because in a static configuration , the heat flowing into the system must equal the heat flowing out of the system .",
    "finally , we can set a temperature boundary condition at one end of the rod , and a flux boundary condition at the other .",
    "this can be performed in two ways , @xmath32    \\partial_x t(l , t ) = f_2 & & :    \\hskip0.15 cm     \\alpha_2 = 0 \\hskip0.5 cm \\beta_2 \\ne 0    \\hskip0.5 cm \\gamma_2 \\ne 0    \\hskip1.0 cm t_2 = \\frac{\\gamma_2}{\\alpha_2 }      \\label{bc3nonhomob }    \\ , \\end{aligned}\\ ] ] or @xmath33    t(l , t ) = t_2 & & :    \\hskip0.15 cm     \\alpha_2 \\ne 0 \\hskip0.5 cm \\beta_2 = 0    \\hskip0.5 cm \\gamma_2 \\ne 0     \\hskip1.0 cm    t_2 = \\frac{\\gamma_2}{\\alpha_2 }      \\label{bc4nonhomob }      \\ .\\end{aligned}\\ ] ] note that bc3 and bc4 are physically equivalent , and represent a rod that has been flipped from left to right about its center . in the following sections , we shall compute the solution for each of boundary conditions bc1 @xmath34 bc4 , as well as the case of general bcs .",
    "while the heat flow problem is well defined and solvable for arbitrary ( continuous ) profiles @xmath35 , a particularly convenient choice of an initial condition is the linear function @xmath36 where @xmath37 is the initial temperature at the far left of the rod , @xmath38 , and @xmath39 is the initial temperature at the far right of the rod , @xmath40 .",
    "we have used the notation @xmath38 and @xmath40 because the initial condition only holds on the open interval @xmath41 , and , strictly speaking , @xmath35 is not defined at @xmath42 and @xmath5 , as this would ",
    "step on the boundary conditions at these end - points ( the system would be over constrained at @xmath43 ) .",
    "this leads to the interesting possibility that the initial condition can be incommensurate with the boundary conditions , in that @xmath37 need not agree with @xmath44 , nor @xmath39 with @xmath45 .    taking the boundary condition bc1 for definiteness ,",
    "let us examine the resulting solution @xmath14 when @xmath46 or @xmath47 .",
    "if we consider such a solution @xmath14 on the open @xmath48 , then @xmath14 converges to the initial profile @xmath35 as @xmath4 goes to zero , that is to say , @xmath49 as @xmath50 for all @xmath51 ; however , this point - wise convergence is _",
    "nonuniform_. see ref .",
    "@xcite for an introductory but solid treatment of real analysis and uniform convergence , and appendix b for a short summary of uniform convergence .",
    "alternatively , we may consider the solution @xmath14 on the closed interval @xmath52 $ ] by appending the boundary conditions at @xmath43 .",
    "then the limit of @xmath14 as @xmath50 is a the function taking the values @xmath53 at @xmath42 , @xmath54 at @xmath55 , and @xmath56 at @xmath51 .",
    "if @xmath46 or @xmath47 , the limit function @xmath57 is discontinuous at @xmath43 , even though every function @xmath14 in the sequence is continuous in @xmath3 .",
    "we have therefore found a sequence of _ continuous _ functions @xmath14 ( continuous in @xmath3 and indexed by @xmath4 ) whose limit is a _ discontinuous _ function , and this is exactly what one would expect of a nonuniformly converging sequence of functions .",
    "not surprisingly , if we set the boundary condition to agree with the initial condition , @xmath58 and @xmath59 , then the limit function is continuous ; however , the initial condition @xmath35 becomes a static nonhomogeneous solution to the heat equations .",
    "is heat conducting with @xmath60 .",
    "the outer materials ( the bread ) , located within @xmath61 and @xmath62 , are not heat conducting and have @xmath63 .",
    "the boundary temperature is uniform in @xmath3 along the lower and upper boundaries , with temperatures @xmath64 and @xmath65 .",
    "the temperature flux along the far left and right boundaries vanishes , @xmath66 .",
    "finally , the initial temperature is taken to be @xmath67 inside the entire region @xmath68 .",
    ", title=\"fig : \" ] -2.5 cm    the first test problem of ref .",
    "@xcite is a heat flow problem in 2d rectangular coordinates called the planar sandwich , illustrated in fig .  [ fig_planar_sandwich ] .",
    "the problem consists of three material layers aligned along the y - direction in a sandwich - like configuration .",
    "the outer two layers do not conduct heat ( @xmath63 ) , while the inner layer is heat conducting with @xmath69 , forming a sandwich of conducting and non - conducting materials . the temperature boundary condition on the lower @xmath70 boundary",
    "is taken to be @xmath71 , while the temperature on the upper boundary is @xmath72 .",
    "the temperature flux in the @xmath3-direction on the far left and right ends of the sandwich vanishes , @xmath73 .",
    "finally , the initial temperature inside the sandwich is taken to vanish , @xmath67 .",
    "symmetry arguments reduce the problem to 1d heat flow in the @xmath74-direction , and in this subsection we shall orient the 1d rod of the previous section along the @xmath74-direction rather than the @xmath3-direction ( in the remaining sections , however , we shall revert to the convention of heat flow along @xmath3 ) .",
    "this brief change in convention allows us to keep with the original notation defined in ref .",
    "the heat flow equation in the central region , @xmath75 , reduces to 1d flow along the @xmath74-direction , @xmath76 we now represent the temperature profile as a function of @xmath74 , so that @xmath77 , and the boundary conditions of the rod become @xmath25 and @xmath78 , as in bc1 .",
    "the initial condition becomes @xmath79 .",
    "the exact analytic solution was presented in ref .",
    "@xcite , and takes the form @xmath80",
    "k_n & = & \\frac{n \\pi}{l }     \\hskip0.5 cm { \\rm and}\\hskip0.5 cm    b_n     =    \\frac{2 t_2 ( -1)^n - 2 t_1}{n\\pi }    \\ ,    \\label{eq_planar_sandwich}\\end{aligned}\\ ] ] for @xmath75 ; and @xmath81 for @xmath82 .",
    "figure  [ fig_planar_sandwich_ep ] illustrates a plot of the planar sandwich solution for the initial conditions @xmath0 and @xmath1 , at several representative times and @xmath83 .",
    "the instance of the planar sandwich class used to plot the figure was created by the python call    0.2 cm ` solver = planarsandwich(t1=1 , t2=0 , l=2 , nsum=1000 ) `  . 0.2 cm    , and @xmath83 .",
    "the bcs are @xmath84 , t(l)=0 , and the ic is @xmath85 .",
    "the diffusion constant is @xmath86 , the length of the rod is @xmath2 , and we have summed over 1000 terms in the series ]    this class instance sets the boundary conditions to @xmath0 and @xmath1 , the length of the rod to @xmath2 , and it sums over the first 1000 terms of the series . by default",
    "it also sets the ic to @xmath85 .",
    "for each of the five representative values of @xmath4 , we must create five solution objects ,  _ i.e. _    0.2 cm plus 1pt minus 1pt plus 1pt minus 1pt    -0.25 cm where ` y ` is an array of grid values ranging from @xmath70 to @xmath87 .",
    "the solutions can then be plotted in the standard exactpack manner , ` soln0.plot ( ) ` , ` soln1.plot ( ) ` , _ etc . _",
    "the script that produces the plot in fig .",
    "[ fig_planar_sandwich_ep ] is given in appendix  [ sec : sample_ep_script ] .",
    "in the following sections , we shall analyze heat flow in a 1d rod in some detail , and we will see that by modifying the boundary conditions , as well as the initial condition , we can form a number of variants of the planar sandwich . in our first variant , we take @xmath88 and @xmath1 ( the homogeneous version of bc1 ) , but we choose a nontrivial initial condition for @xmath89",
    ". an arbitrary continuous function would suffice , but for simplicity we employ a linear initial condition for @xmath89 .",
    "since , in this section , the heat flow is along the @xmath74-direction , the linear initial condition ( [ iclinear ] ) must be translated into @xmath90 as shown in the next section , the solution takes the form @xmath91    k_n & = &     \\frac{n \\pi}{l }    \\hskip0.5 cm { \\rm with}\\hskip0.5 cm    b_n     =    \\frac{2t_{{\\rm\\scriptscriptstyle l}}- t_{{\\rm\\scriptscriptstyle r}}(-1)^n}{n\\pi }    \\ .",
    "\\label{eq_variant_two}\\end{aligned}\\ ] ] this is illustrated in fig .",
    "[ fig_planar_sandwich_homo_ep ] for the initial condition specified by @xmath92 and @xmath93 . for this case",
    ", the class planarsandwich is instantiated by    0.2 cm ` solver = planarsandwich(t1=0 , t2=0 , tl=3 , tr=4 , l=2 , nsum=1000 ) `  . 0.2 cm    , and @xmath83 , with @xmath86 , @xmath2 , @xmath92 , @xmath93 ( and @xmath94 ) .",
    "the boundary conditions @xmath88 and @xmath1 render the solution homogenous , while the initial condition @xmath89 , specified by @xmath37 and @xmath39 , specifies the linear function ( [ icliny ] ) as the initial condition . as @xmath50 ,",
    "the solution @xmath95 convergens nonuniformly on the open @xmath74-interval @xmath48 to @xmath89 . ]",
    "the similarity between the coefficients @xmath96 in ( [ eq_variant_two ] ) and ( [ eq_planar_sandwich ] ) is somewhat accidental , and arises from the choice of the linear initial condition ( [ icliny ] ) , which , coincidentally , is the same form as the nonhomogeneous solution @xmath11 used to construct the original variant of the planar sandwich ( [ eq_planar_sandwich ] ) .",
    "it is this that accounts for the similarity .",
    "this example also illustrates how to override the default parameters in an exactpack class , in this case , by setting @xmath88 and @xmath1 .",
    "the default initial condition is @xmath79 , and this is why we did not need to specify the values of @xmath37 and @xmath39 in fig .",
    "[ fig_planar_sandwich_ep ] , and why we had to override these values in fig .",
    "[ fig_planar_sandwich_homo_ep ] .    as another variant on the planar sandwich",
    ", we can choose vanishing heat flux on the upper and lower boundaries ( as in bc2 ) .",
    "this will be called the hot planar sandwich , in analogy with the hot cylindrical sandwich of ref .",
    "@xcite , and its solution takes the form",
    "@xmath97    k_n & = &     \\frac{n \\pi}{l }    \\\\[5pt ]    a_0 & = &     \\frac{t_{{\\rm\\scriptscriptstyle l}}+ t_{{\\rm\\scriptscriptstyle r}}}{2 }    \\hskip0.5 cm { \\rm and~for}~ n \\ne 0,\\hskip0.5 cm    a_n     =    2 \\big(t_{{\\rm\\scriptscriptstyle l}}- t_{{\\rm\\scriptscriptstyle r}}\\big)\\frac{1 - ( -1)^n}{n^2\\pi^2 }    \\ .\\end{aligned}\\ ] ] this new variant of the planar sandwich can be instantiated by    0.2 cm ` solver = planarsandwichhot(f=0 , tl=3 , tr=3 , l=2 , nsum=1000 ) `  .",
    "0.2 cm    the heat flux @xmath98 on the boundaries has been set to zero , and a constant initial condition @xmath99 has been specified ( by setting @xmath100 . the solution is illustrated in fig .",
    "[ fig_planar_sandwich_hot_ep ] .    , and @xmath83 , and is indeed constant .",
    "]    on physical grounds , heat can not escape from the material , and the temperature must remain constant .",
    "in contrast , when the heat flux is nonzero , heat is free to flow from the sandwich to the environment , and the temperature need not remain constant . for a flux @xmath101 , the change in the temperature profiles with time is illustrated in fig .",
    "[ fig_planar_sandwich_ho_2t_ep ] .    , and @xmath83 .",
    "the heat flux at the boundaries is @xmath101 , and we see that the temperature profile changes as heat flows out of the rod . ]",
    "another variant on the planar sandwich is to choose vanishing heat flux on the upper boundary , @xmath102 , and zero temperature on the lower boundary , @xmath103 .",
    "this is an example of boundary condition bc3 , and the solution is called the half planar sandwich . as we show in the next section , the solution takes the form @xmath104    k_n & = &     \\frac{(2 n + 1 ) \\pi}{l }    \\hskip0.5 cm { \\rm with}\\hskip0.5 cm    b_n     =    \\frac{4 t_{{\\rm\\scriptscriptstyle r}}}{(2 n + 1 ) \\pi }    -    \\frac{8\\big(t_{{\\rm\\scriptscriptstyle r}}- t_{{\\rm\\scriptscriptstyle l}}\\big ) } { ( 2n+1)^2 \\pi^2 }     \\ .\\end{aligned}\\ ] ] taking the initial condition @xmath99 ( @xmath100 gives fig .",
    "[ fig_planar_sandwich_half_ep ] , which is instantiated by 0.2 cm ` solver = planarsandwichhalf(t=0 , f=0 , tl=3 , tr=3 , l=2 , nsum=1000 ) `  . 0.2 cm    , and @xmath83 .",
    "note that the profiles clearly satisfy the temperature on the left vanishes , and the derivative of the temperature on the right vanishes . ]",
    "if we had chosen @xmath105 and @xmath106 , as in bc4 , then the figure would have been reflected about the central point @xmath107 , but otherwise physically identical .",
    "as previously discussed , the full nonhomogeneous problem is divided into two parts : ( i )  finding a general homogeneous solution @xmath10 , and ( ii ) finding a specific nonhomogeneous static solution @xmath11 . because of its simplicity , we first turn to solving the corresponding nonhomogeneous equations .",
    "we start with the _ static _ or equilibrium heat equation for @xmath11 with nonhomogeneous bcs , @xmath108    { \\rm bc } :      \\hskip1.16 cm    \\alpha_1 \\bar t(0 ) + \\beta_1 \\bar t^\\prime(0 ) & = & \\gamma_1 \\label{eq_onedrodblp }    \\\\[-3pt ]    \\alpha_2 \\bar t(l ) + \\beta_2 \\bar t^\\prime(l ) & = & \\gamma_2    \\ . \\label{eq_onedrodclp}\\end{aligned}\\ ] ] the solution to ( [ eq_onedrodalp ] ) is trivial , and may be written in the form , @xmath109 or alternatively , @xmath110 the coefficients @xmath111 and @xmath112 , or @xmath44 and @xmath45 , are determined by the nonhomogeneous boundary conditions ( [ eq_onedrodblp ] ) and ( [ eq_onedrodclp ] ) .",
    "note that , coincidentally , that the static nonhomogeneous solution @xmath11 takes the same form as the linearized initial condition of ( [ iclinear ] ) , namely , @xmath113 while this is a fortuitous coincidence of 1d heat flow , and does not hold for 2d heat flow , ( [ bartt0lin ] ) will be used in the following sections to simplify the algebra in calculating expansion coefficients for the homogenous and nonhomogeneous solutions .",
    "we turn now to finding the appropriate values of @xmath44 and @xmath45 for the case of general boundary conditions , and then for the four special cases ,    0.4 cm    1 .",
    "( [ bctone])([bcttwo ] ) 2 .",
    "( [ eq_bc2a_non])([eq_bc2b_non ] ) 3 .",
    "( [ bc3nonhomoa])([bc3nonhomob ] ) 4 .",
    "( [ bc4nonhomoa])-([bc4nonhomob ] )  .",
    "as exhibited in ( [ eq_bartab])([eq_bartlr ] ) , the nonhomogeneous solution @xmath11 can be expressed in the form @xmath114 where @xmath115 and @xmath116 .",
    "the bcs ( [ eq_onedrodblp ] ) and ( [ eq_onedrodclp ] ) , and the solution ( [ eq_bartab ] ) , reduce to a linear equation in terms of @xmath111 and @xmath112 , @xmath117 upon solving this equation we find @xmath118     b     & = &      \\frac{\\alpha_1 \\gamma_2 - \\alpha_2 \\gamma_1 }    { \\alpha_1 \\beta_2 - \\alpha_2 \\beta_1 + l \\alpha_1 \\alpha_2 }    \\ , \\end{aligned}\\ ] ] or in terms of temperature parameters , @xmath119 and @xmath120 , we can write @xmath121     t_2    & = &     \\frac{\\beta_2 \\gamma_1 -\\beta_1 \\gamma_2 + l \\alpha_1 \\gamma_2 }   { \\alpha_1 \\beta_2 - \\alpha_2 \\beta_1 + l \\alpha_1 \\alpha_2 }    \\label{t2genbc } \\ .\\end{aligned}\\ ] ] note that the determinant of the linear equations vanishes for bc2 , and we must handle this case separately .",
    "the first special boundary condition is ( [ bctone ] ) and ( [ bcttwo ] ) , @xmath122 with the solution taking the form ( [ eq_bartlr ] ) , @xmath123 the temperature coefficients @xmath44 and @xmath45 are given by the temperatures of the upper and lower boundaries in ( [ bc_tone ] ) and ( [ bc_ttwo ] ) .",
    "equivalently , the coefficients in ( [ eq_bartab ] ) are just @xmath124 and @xmath125 .",
    "let us now find the nonhomogeneous equilibrium solution for the boundary conditions ( [ eq_bc2a_non ] ) and ( [ eq_bc2b_non ] ) , @xmath126 where @xmath127 and @xmath128 are the heat fluxes at @xmath42 and @xmath55 , respectively , and are related to the boundary condition parameters in ( [ eq_onedrodblp ] ) and ( [ eq_onedrodclp ] ) by @xmath129 and @xmath130 . as before , the general solution is @xmath131 , and we see that @xmath132 is independent of @xmath3 . in other words , the heat flux at either end of the rod must be identical , @xmath133 .",
    "in fact , this result follows from energy conservation , since , in equilibrium , the heat flowing into the rod must be equal the heat flowing out of the rod .",
    "therefore , more correctly , we should have started with the boundary conditions @xmath134 with @xmath135 as we saw in the previous section on general initial conditions , this case is singled out for special treatment . the value of the constant term @xmath111 is not uniquely determined in this case ; however , we are free to set it to zero , giving @xmath136 there is nothing wrong with setting @xmath137 , since we only need to find _ one _ nonhomogeneous solution , and ( [ bartfsame ] ) fits the bill .",
    "we can write this solution in the form ( [ eq_bartlr ] ) , with @xmath138      the next set of boundary conditions are ( [ bc3nonhomoa ] ) and ( [ bc3nonhomob ] ) , @xmath139 and we can express the solution ( [ eq_bartlr ] ) in terms of the temperature @xmath44 , and the effective temperature @xmath140      the boundary conditions are ( [ bc4nonhomoa ] ) and ( [ bc4nonhomob ] ) , @xmath141 and the solution ( [ eq_bartlr ] ) can be written in terms of @xmath45 and the effective temperature @xmath142 we have now found the static homogeneous solution in the form @xmath143 where the temperatures in ( [ bartxfinal ] ) are given by 0.3 cm    1 .",
    "@xmath44 and @xmath45 2 .",
    "@xmath88 and @xmath144 3 .",
    "@xmath44 and @xmath145 4 .",
    "@xmath146 and @xmath45  ,    and by ( [ t1genbc ] ) and ( [ t2genbc ] ) for general bcs .",
    "now that we have found the appropriate nonhomogeneous solutions @xmath11 , we turn to the more complicated task of finding the general homogeneous solutions @xmath10 .",
    "these solutions involve a fourier sum over a discrete number of normal modes , the coefficients being determined by the initial conditions .",
    "these solutions depend upon the homogeneous equations of motion , for which @xmath147 and @xmath148 in the equations ( [ eq_onedrodanh])([eq_onedrodcnh ] ) , take the form @xmath149    { \\rm bc } :      \\hskip1.16 cm    \\alpha_1 \\tilde t(0,t ) + \\beta_1 \\partial_x \\tilde t(0,t ) & = & 0    \\hskip2.95 cm t > 0 \\label{eq_onedrodb }    \\\\[-3pt ]    \\alpha_2 \\tilde t(l , t ) + \\beta_2 \\partial_x \\tilde t(l , t ) & = & 0 \\nonumber \\\\[5pt ]    { \\rm ic } :      \\hskip4.05 cm    \\tilde t(x,0 ) & = & t_0(x )       \\hskip2.2 cm     0 < x < l    \\ . \\label{eq_onedrodc}\\end{aligned}\\ ] ] as we have discussed in section  [ sec : generalheatflow ] , in all of our examples we shall employ the linear initial condition @xmath150 the solution technique is by separation of variables , for which we assume the trial solution to be the product of independent functions of @xmath3 and @xmath4 , @xmath151 substituting this _ ansatz _ into the heat equation gives @xmath152 or @xmath153 where we have chosen the constant to have a negative value @xmath154 , and we have expressed derivatives of @xmath155 and @xmath156 by primes . as usual in the separation of variables technique , when two functions of different variables are equated , they must be equal to a constant , independent of the variables .",
    "the equation for @xmath155 has the solution , @xmath157 where we have introduced a @xmath158-subscript to indicate that the solution depends upon the value of @xmath158 .",
    "the equations for @xmath159 reduce to @xmath160    \\alpha_1 x(0 ) + \\beta_1 x^\\prime(0 ) & = & 0 \\label{eq_onedrodbx }    \\\\[-3pt ]    \\alpha_2 x(l ) + \\beta_2 x^\\prime(l ) & = & 0 \\nonumber    \\ , \\end{aligned}\\ ] ] where , now , the condition @xmath161 is the obvious statement that @xmath156 is simply the initial condition of the original problem .",
    "the general solution to ( [ eq_onedrodax ] ) is @xmath162 and when the bcs are applied , the modes @xmath163 will be orthogonal , @xmath164 since the solutions are square integrable , and since the de is liner and the bcs are homogeneous , we have scaled @xmath163 to give an arbitrary normalization constant @xmath165 , which can be chosen for convenience .",
    "it is instructive to prove the orthogonality relation ( [ xkxkprime ] ) directly from the differential equation . to see this , multiply ( [ eq_onedrodax ] ) by @xmath176 , and then write the result in the two alternate forms , @xmath177 & = & 0    \\\\[5pt ]    x_k \\big [ x_{k^\\prime}^{\\prime\\prime } + k^{\\prime\\ , 2 } x_{k^\\prime } \\big ]     & = & 0     \\ .\\end{aligned}\\ ] ] upon subtracting these equations , and then integrating over space",
    ", we find @xmath178    \\\\[5pt ]    \\nonumber    & = &    \\int_0^l \\ !",
    "dx \\ ,     \\big [ \\frac{d}{dx}\\,\\big(x_k x_{k^\\prime}^{\\prime}\\big )     -    x_k^\\prime   x_{k^\\prime}^\\prime    -     \\frac{d}{dx}\\big ( x_{k^\\prime } x_k^{\\prime }   \\big )    +    x_{k^\\prime}^\\prime x_k^{\\prime }    \\big ]    \\\\[5pt ]    & = &    \\int_0^l \\ !",
    "dx \\ ,     \\frac{d}{dx}\\,\\big(x_k x_{k^\\prime}^{\\prime }    -      x_{k^\\prime } x_k^{\\prime }   \\big )     \\\\[5pt ]     & = &    \\big(x_k x_{k^\\prime}^{\\prime }     -      x_{k^\\prime } x_k^{\\prime }   \\big )     \\big\\vert_0^l     =     0     \\ , \\end{aligned}\\ ] ] where each contribution from @xmath42 and @xmath55 vanishes separately because of their respective boundary conditions .",
    "we therefore arrive at @xmath179 provided @xmath180 , we can divide ( [ eq_kminuskxx ] ) by @xmath181 to obtain @xmath182 however , when @xmath183 , ( [ eq_kminuskxx ] ) gives no constraint on the corresponding normalization integral ; however , since the bcs are homogeneous , we are free to normalize @xmath163 over @xmath52 $ ] such that @xmath184 , for any convenient choice of @xmath165 .",
    "we now find the homogeneous solutions for four special boundary conditions , bc1bc4 .",
    "the first case holds the temperature fixed to zero at both ends of the rod , @xmath185 the general solution @xmath186 reduces to @xmath187 under ( [ bc1a ] ) , while ( [ eq_bc1b ] ) restricts the wave numbers to satisfy @xmath188 , _",
    "i.e. _ @xmath189 for @xmath190 . note that @xmath191 does not contribute , since this gives the trivial vanishing solution .",
    "it is convenient to express the modes by @xmath192 , separating the coefficient @xmath193 from the mode @xmath194 itself .",
    "the homogeneous solution then takes the form @xmath195",
    "x_n(x ) & = & \\sin k_n x     \\\\[5pt ]    k_n & = &     \\frac{n \\pi}{l }      \\hskip1.0 cm",
    "n = 1 , 2 , 3 , \\cdots      \\ .\\end{aligned}\\ ] ] the tilde over the temperature is meant to explicitly remind us that this is the general _ homogeneous _ solution .",
    "the orthogonality condition on the modes @xmath194 can be checked by a simple integration , @xmath196 for an initial condition @xmath197 , we can calculate the corresponding coefficients in the fourier sum , @xmath198 for the linear initial condition ( [ iclinear ] ) , a simple calculation gives @xmath199    & = &    \\frac{2 t_{{\\rm\\scriptscriptstyle l}}- 2 t_{{\\rm\\scriptscriptstyle r}}(-1)^n}{n\\pi }    \\label{eq_bnsecdondline }    \\ .\\end{aligned}\\ ] ] the first two terms in line ( [ eq_bnfirstline ] ) are the constant and linear contributions of @xmath35 , respectively , and a typical solution is illustrated in fig .",
    "[ fig_rod1d_bc1 ] .",
    "the exactpack object used to create fig .",
    "[ fig_rod1d_bc1 ] is the class ` rod1d ` , which takes the following boundary and initial condition arguments    0.2 cm ` rod1d(alpha1=1 , beta1=0 , alpha2=1 , beta2=0 , tl=3 , tr=4 ) `  .",
    "0.2 cm    this figure is identical to fig .",
    "[ fig_planar_sandwich_homo_ep ] , and is meant to illustrate the parent class rod1d from which planarsandwich inherits .    , the homogeneous planar sandwich ,",
    "except we use the base class rod1d(alpha1=1 , beta1=0 , alpha2=1 , beta2=0 , tl=3 , tr=4 ) . ]        , @xmath2 , @xmath92 , @xmath93 .",
    "rod1d(alpha1=0 , beta1=1 , alpha2=0 , beta2=1 , tl=3 , tr=4 ) . ]    next , taking @xmath209 , we find : @xmath220    & = &       \\frac{2}{l } \\int_0^l dx\\ , \\left [      t_{{\\rm\\scriptscriptstyle l}}+ \\frac{t_{{\\rm\\scriptscriptstyle r}}- t_{{\\rm\\scriptscriptstyle l}}}{l}\\ , x      \\right ] \\cos k_n x      \\\\[5pt ]        & = &       t_{{\\rm\\scriptscriptstyle l}}\\ , \\frac{2}{l } \\int_0^l dx\\ , \\cos k_n x      +       \\big ( t_{{\\rm\\scriptscriptstyle r}}- t_{{\\rm\\scriptscriptstyle l}}\\big ) \\frac{2}{l^2 } \\int_0^l dx",
    "\\ , x\\ , \\cos k_n x      \\ .\\end{aligned}\\ ] ] the first term integrates to zero since @xmath221 and the second term gives @xmath222_{x=0}^{x = l }    \\\\[5pt ]    & = &    \\frac{2}{l^2 } \\",
    ", \\frac{l^2}{n^2 \\pi^2}\\,\\big[\\cos k_n l - 1 \\big ]    =    2 \\ , \\frac{(-1)^n - 1}{n^2 \\pi^2 }    \\ , \\end{aligned}\\ ] ] which leads to ( [ eq_annotzero ] ) .",
    "the next specialized boundary condition is @xmath223 the general solution @xmath186 under ( [ eq_bc3a ] ) reduces to @xmath224 , while ( [ eq_bc3b ] ) restricts the wave numbers to @xmath225 , so that @xmath226 for @xmath204 .",
    "the general homogeneous solution is therefore @xmath227    x_n(x ) & = & \\sin k_n x      \\\\[5pt ]      k_n & = &     \\frac{(2 n",
    "+ 1 ) \\pi}{2 l }    \\hskip1.0 cm     n = 0 , 1 , 2 , \\cdots    \\ .\\end{aligned}\\ ] ] the initial condition @xmath213 gives the fourier modes @xmath228 and , as before , upon taking the linear function ( [ iclinear ] ) , we find @xmath229    \\\\[5pt ]      & = &      \\frac{4 t_{{\\rm\\scriptscriptstyle r}}}{(2 n + 1 ) \\pi }    -    \\frac{8\\big(t_{{\\rm\\scriptscriptstyle r}}- t_{{\\rm\\scriptscriptstyle l}}\\big ) } { ( 2n+1)^2 \\pi^2 }     \\ .\\end{aligned}\\ ] ] before plotting this example , let us examine the next boundary condition .",
    "the last special case is the boundary condition @xmath230 the general solution @xmath231 reduces to @xmath232 under ( [ eq_bc3a ] ) , while ( [ eq_bc4b ] ) restricts the wave numbers to @xmath233 , _",
    "i.e. _ @xmath226 for @xmath204 , which gives rise to the homogeneous solution @xmath234    x_n(x ) & = & \\cos k_n x      \\\\[5pt ]      k_n & = &     \\frac{(2 n",
    "+ 1 ) \\pi}{2 l }    \\hskip1.0 cm     n = 0 , 1 , 2 , \\cdots    \\ .\\end{aligned}\\ ] ] similar to ( [ eq_bnbcthree ] ) , the mode coefficient is @xmath235 and , upon taking the linear initial condition ( [ iclinear ] ) , we find @xmath236 the cases bc3 and bc4 are plotted in fig .  [ fig_rod1d_bc3_bc4 ] .",
    ", @xmath2 , @xmath237 .",
    "by symmetry principles , the two profiles are mirror images of one another .",
    "bc3 is instantiated by rod1d(alpha1=1 , beta1=0 , alpha2=0 , beta2=1 , tl=3 , tr=4 ) , and bc4 by rod1d(alpha1=0 , beta1=1 , alpha2=1 , beta2=0 , tl=4 , tr=3 ) .",
    "note that @xmath37 and @xmath39 are interchanged between bc3 and bc4 .",
    "]      we now turn to the general form of the boundary conditions , which , expressed in terms of @xmath159 , take the form @xmath238 the solution and its derivative are @xmath239 substituting this into ( [ eq_xbczero ] ) and ( [ eq_xbcl ] ) gives @xmath240     +     \\beta_2\\big [ -a k \\sin k l + b k \\cos k l \\big ] & = & 0    \\label{bcb }    \\ .\\end{aligned}\\ ] ] upon diving by @xmath241 , can write ( [ bcb ] ) as @xmath242 or @xmath243 from ( [ bca ] ) we have @xmath244 ( if @xmath245 , and substituting into ( [ bctankl ] ) gives @xmath246     & = &     \\frac{-\\alpha_1 \\beta_2 \\ , k + \\alpha_2 \\beta_1 k } { \\beta_1 \\beta_2 \\ , k^2      +   \\alpha_2 \\ , \\alpha_1   }          \\ .",
    "\\label{bctanklone}\\end{aligned}\\ ] ] setting @xmath247 and @xmath248 , we can write ( [ bctanklone ] ) in the form @xmath249 the solution is illustrated in fig .",
    "[ fig_tankl ] .",
    "for @xmath250 , @xmath251 , @xmath252 , and @xmath253 . for @xmath2",
    "this gives @xmath254 and @xmath255 . ]       for @xmath263 , @xmath252 , and @xmath253 .",
    "for @xmath2 we have @xmath255 . ]",
    "let us now consider the case of @xmath263 , so that ( [ bctanmu ] ) becomes @xmath281 we can find an approximate solution for large values of @xmath282 : since the rhs is very small for @xmath283 , we must solve @xmath284 , and therefore @xmath285 .",
    "the exact solution can be expressed as @xmath286 , where @xmath287 is small and unknown .",
    "then @xmath288 .",
    "similarly , @xmath289 ^ 2 ) = a / n\\pi - a h + { \\cal o}([h / n]^2)$ ] , thus @xmath290 and the first order solution becomes @xmath291 this can be used as an initial guess when using an iteration method to find the @xmath256 .",
    "the solution is @xmath292    \\ , \\end{aligned}\\ ] ] and @xmath293    & = &    \\frac{t_1}{k_n } \\,\\sin k_n l + \\frac{t_2 - t_1}{k_n^2 l}\\ ,    \\big [ -1 + \\cos k_n l + k_n l \\sin k_n l \\big ]    \\ .\\end{aligned}\\ ] ]",
    "suppose now that @xmath10 is a general solution to the homogeneous problem as described in the previous section .",
    "also suppose that @xmath11 is a specific solution to the nonhomogeneous problem as described in the previous section , then @xmath294 is the solution to the nonhomogeneous problem ( [ eq_onedrodanh])([eq_onedrodcnh ] ) . the general homogeneous solution , and the specific nonhomogeneous solution take the form @xmath295 where the coefficients are chosen to satisfy the initial condition , @xmath296 x_n(x )    \\ , \\end{aligned}\\ ] ] with @xmath11 given by ( [ eq_tildet ] ) , and @xmath35 given by @xmath297 since @xmath35 and @xmath11 are of the same functional form , we can write @xmath298 where we have expressed the parametric dependence upon temperature explicitly in @xmath299 . therefore , @xmath300",
    "this is why the the planar sandwich and the homogeneous planar sandwich have such similar coefficients , @xmath301      we turn now to the full set of nonhomogeneous problems for the special cases considered in the previous section .",
    "the complete solution for the nonhomogeneous bcs @xmath302 is @xmath303 recall that these bcs corresponds to @xmath304 with and @xmath305 and @xmath306 in eqs .",
    "( [ bctone ] ) and ( [ bcttwo ] ) . in terms of the bcs",
    ", we can write this as @xmath307 the nonhomogeneous coefficients are found by @xmath308 \\sin k_n x    \\ .\\end{aligned}\\ ] ] since we have taken the @xmath35 to be a linear equation , as is @xmath11 , we can use the previous results for a linear initial conditions by substituting @xmath309 and @xmath310 into ( [ eq_bnsecdondline ] ) , as explained in the previous section .",
    "in other words , @xmath311    t_a & = & t_{{\\rm\\scriptscriptstyle l}}- t_1    \\\\",
    "t_b & = & t_{{\\rm\\scriptscriptstyle r}}- t_2    \\ , \\end{aligned}\\ ] ] and the coefficients of the nonhomogeneous solution become @xmath312    & = &    \\frac{2 t_a - 2 t_b ( -1)^n}{n\\pi }    \\ .\\end{aligned}\\ ] ] a typical example of the solution is illustrated in fig  [ fig_rod1d_bc1 ] . in this figure",
    ", we take the initial conditions as zero temperature , with the @xmath42 bc to be @xmath0 , and the @xmath55 bc to be @xmath1 , and we see that a heat wave moves from the left end of the rod to the right , until the the entire rod is at temperature @xmath11 .",
    "this is just the heat conduction physics of the planar sandwich .    , @xmath2 , @xmath0 , @xmath1 ( @xmath313 , and @xmath314 ) , with @xmath315 , @xmath316 .",
    "solver instantiation : rod1d(alpha1=1 , beta1=0 , alpha2=1 , gamma1=1 , beta2=0 , gamma2=0 , tl=0 , tr=0 ) . ]    for fig .",
    "[ fig_rod1d_bc1_nonhomo ] , the class ` rod1d ` takes the boundary and initial condition arguments    0.2 cm ` rod1d(alpha1=1 , beta1=0 , gamma1=1 , alpha2=1,beta2=0 , gamma2=0 , tl=0 , tr=0 ) ` . 0.2 cm    note that @xmath317 and @xmath318 .      for the boundary conditions @xmath319    \\partial_x t(l , t ) & = & f    \\ , \\end{aligned}\\ ] ] the full nonhomogeneous solution is thus @xmath320 using the initial condition @xmath321 , we find @xmath322 we can use the previous results ( [ eq_azeroovertwo ] ) and ( [ eq_an ] ) provided we make the substitution @xmath323 and @xmath324 , @xmath325    \\frac{a_0}{2 }    & = &     \\frac{1}{2}\\big(t_a + t_b\\big )    \\label{eq_azeroovertwo }    \\\\[5pt ]    a_n     & = &     2\\ , \\big(t_a - t_b \\big ) \\ , \\frac{1 - ( -1)^n}{n^2 \\pi^2 }    \\label{eq_an }    \\ .\\end{aligned}\\ ] ]    , @xmath2 , @xmath101 ( with @xmath315 , @xmath316 ) .",
    "exactpack instantiation : rod1d(alpha1=0 , beta1=1 , gamma1=f , alpha2=0 , beta2=1 , gamma2=f , tl=0 , tr=0 ) . ]",
    "the instantiation of ` rod1d ` used for fig .",
    "[ fig_rod1d_bc2_nonhomo ] is    0.2 cm ` rod1d(alpha1=1 , beta1=0 , alpha2=1 , gamma1=1 , beta2=0 , gamma2=0 , tl=0 , tr=0 ) ` . 0.2 cm    since @xmath326 , and @xmath327 , we could simplify the interface to    0.2 cm ` planarsandwich(tl = t1 , tr = t2 , nsum=1000 ) ` . 0.2 cm      for the boundary conditions @xmath328    \\partial_x t(l , t ) & = & f_2    \\ , \\end{aligned}\\ ] ] the full nonhomogeneous solution is thus @xmath329    t_2 & = & t_1 + f_2 l    =    \\frac{\\gamma_1}{\\alpha_1 } + \\frac{\\gamma_2 l}{\\beta_2 }    \\\\[5pt ]      k_n & = &     \\frac{(2",
    "n + 1 ) \\pi}{2 l }    \\hskip1.0 cm     n = 0 , 1 , 2 , \\cdots    \\ .\\end{aligned}\\ ] ] the fourier coefficients @xmath330    \\sin k_n x    \\label{eq_bnnonhomo}\\end{aligned}\\ ] ] take the form @xmath331",
    "\\\\[5pt ]      & = &      \\frac{4 t_b}{(2 n + 1 ) \\pi }    -    \\frac{8\\big(t_b- t_a\\big ) } { ( 2n+1)^2 \\pi^2 }     \\ .\\end{aligned}\\ ] ]      for the boundary conditions @xmath332    t(l , t ) & = & t_2    \\ , \\end{aligned}\\ ] ] the full nonhomogeneous solution is @xmath333    t_1 & = & t_2 - f_1 l    =    \\frac{\\gamma_2}{\\alpha_2 } - \\frac{\\gamma_1 l}{\\beta_1 }    \\\\[5pt ]      k_n & = &     \\frac{(2 n + 1 ) \\pi}{2",
    "l }    \\hskip1.0 cm     n = 0 , 1 , 2 , \\cdots    \\ .\\end{aligned}\\ ] ] as before , we take the linear initial condition ( [ iclinear ] ) , and then ( [ eq_tcoeff ] ) gives the coefficients @xmath334    , @xmath2 , @xmath335 , @xmath336 .",
    "the two profiles should be mirror images of each other , by symmetry principle .",
    "this appears to be the case , for for @xmath337 .",
    "note that the profile are indeed asymmetric .",
    "bc3 : rod1d(alpha1=1 , beta1=0 , alpha2=0 , beta2=1 , tl=3 , tr=4 ) .",
    "bc4 : rod1d(alpha1=0 , beta1=1 , alpha2=1 , beta2=0 , tl=4 , tr=3 ) . ]      for general boundary conditions , the full nonhomogeneous solution is @xmath338    x_n(x )    & = &      a_n \\cos k_n x + b_n \\sin k_n",
    "x     \\ , \\end{aligned}\\ ] ] with coefficients @xmath339    t_1    & = &     \\frac{\\beta_2 \\gamma_1 -\\beta_1 \\gamma_2 + l \\alpha_2 \\gamma_1 }    { \\alpha_1 \\beta_2 - \\alpha_2 \\beta_1 + l \\alpha_1 \\alpha_2 }    \\\\[5pt ]     t_2    & = &      \\frac{\\beta_2 \\gamma_1 -\\beta_1 \\gamma_2 + l \\alpha_1 \\gamma_2 }    { \\alpha_1 \\beta_2 - \\alpha_2 \\beta_1 + l \\alpha_1 \\alpha_2 } \\ .\\end{aligned}\\ ] ] the fourier coefficients are @xmath340 x_n(x )    \\ .\\end{aligned}\\ ] ] the zeroth order contributions is @xmath341 , and we find @xmath342    \\ .\\end{aligned}\\ ] ] the first order contribution is @xmath343 we have @xmath344    \\ .\\end{aligned}\\ ] ] the normalization factor is @xmath345    \\nonumber    \\\\    \\ .",
    "\\label{solabfour}\\end{aligned}\\ ] ] setting @xmath247 and @xmath248 , we can write ( [ bctanklone ] ) in the form @xmath346 equation ( [ bctanmuagain ] ) will give solutions @xmath256 for @xmath257 ( with @xmath347 , and the wave numbers become @xmath258    i would like to thank jim ferguson and scott doebling for carefully reading through the text .",
    "the following script produces fig .  [ fig_planar_sandwich_ep ] .     plus",
    "1pt minus 1pt    .... import numpy as np import matplotlib.pylab as plt    from exactpack.solvers.heat import planarsandwich    l = 2.0 x = np.linspace(0.0 , l , 1000 ) t0 = 1.0 t1 = 0.2 t2 = 0.1 t3 = 0.01 t4 = 0.001    solver = planarsandwich(t1=1 , t2=0 , l = l , nsum=1000 ) soln0 = solver(x , t0 ) soln1 = solver(x , t1 ) soln2 = solver(x , t2 ) soln3 = solver(x , t3 ) soln4 = solver(x , t4 ) soln0.plot('temperature ' , label = r'$t=1.000 $ ' ) soln1.plot('temperature ' , label = r'$t=0.200 $ ' ) soln2.plot('temperature ' , label = r'$t=0.100 $ ' ) soln3.plot('temperature ' , label = r'$t=0.010 $ ' ) soln4.plot('temperature ' , label = r'$t=0.001 $ ' )    plt.title('planar sandwich ' ) plt.ylim(0,1 ) plt.xlim(0,l ) plt.legend(loc=0 ) plt.grid(true ) plt.show ( ) ....     plus 1pt minus 1pt",
    "many of the mathematical operations we take for granted in a typical analytic calculation of a physical process , such as the _ simple _ interchange of a limit and an integral , depend deeply upon issues surrounding the uniform convergence of sequences of functions . by way of introduction ,",
    "let us consider a solution @xmath14 to the heat flow equations ( [ eq_onedrodanh])([eq_onedrodcnh ] ) .",
    "let us further consider a sequence of times @xmath348 , from which we can construct a sequence of temperature profiles @xmath349 . in other words , @xmath350 is a sequence of functions of @xmath3 , indexed by the integers @xmath215 , or equivalently by the times @xmath351 .",
    "suppose now that the time sequence @xmath351 converges to the limit @xmath352 , so that @xmath353 . then , for our purposes , we may speak interchangeably of the limits @xmath354 and @xmath355 , and in this way , we can think of @xmath14 as a sequence of functions of @xmath3 indexed by @xmath4 . to make this more precise , and to refresh our memories ,",
    "it is constructive to review the formal definition of a limit .",
    "the sequence @xmath356 converges to the the limit @xmath352 as @xmath357 , denoted @xmath358 provided that for every @xmath359 there exists @xmath360 such that @xmath361 whenever @xmath362 .",
    "that is to say , @xmath351 can be made arbitrarily close to @xmath352 by choosing @xmath215 arbitrarily large .",
    "the notion of a limit can extended to a sequence of functions .",
    "the domain of the functions @xmath350 , which we refer to as @xmath363 , can be either the open interval @xmath48 , or the closed interval @xmath52 $ ] , if we are also interested in the boundary points @xmath43 . for definiteness",
    ", we take the case bc1 , for which @xmath364 and @xmath365 .",
    "there are two distinct ( but related ) sense in which the limit @xmath366 exists .",
    "the obvious way to interpret this limit is to choose a value of @xmath367 , and to take the limit of the normal sequence of numbers @xmath368 .",
    "if , in the limit @xmath357 , the sequence converges to a number @xmath369 for some function @xmath370 , we say that the sequence @xmath350 converges point - wise to @xmath370 at @xmath367 .",
    "this is made formal by the following definition .",
    "0.3 cm * definition * : the sequence of functions @xmath371 converges _ point - wise _ on @xmath363 to a function @xmath370 if for every @xmath372 and for every @xmath373 there is an integer @xmath374 such that @xmath375 for all @xmath362 .    0.2 cm the integer @xmath374 might depend upon the point @xmath3 .",
    "if , however , we can choose the same @xmath374 for all @xmath372 , then we say that the limit is _ uniformly _ convergent .",
    "this is made precise in following definition .    , @xmath376 , @xmath377 , @xmath378 , and @xmath379 .",
    "the diffusion constant is @xmath86 and length of the rod is @xmath2 , with a constant initial condition @xmath380 .",
    "the plot uses the instance planarsandwich(t1=0 , t2=0 , tl=3 , tr=3 , l=2 , nsum=1000 ) . since the boundary conditions are incommensurate with the initial condition , the solution @xmath95 convergens non - uniformly on the open @xmath3-interval @xmath48 to @xmath380 , which is plotted by the dashed line .",
    "]    0.3 cm * definition * : the sequence of functions @xmath371 converges _ uniformly _ on @xmath363 to a function @xmath370 if for every @xmath373 there is an integer @xmath374 such that @xmath375 for all @xmath381 and all @xmath372 .",
    "0.3 cm    as an example , let us consider the solution illustrated in fig .  [ fig_planar_sandwich_nonuniform_ep ] .",
    "this is a homogeneous solution , for which @xmath382 , with a constant initial condition @xmath380 ( for @xmath41 ) .",
    "the time sequence is @xmath383 , @xmath376 , @xmath377 , @xmath378 , @xmath384 .",
    "we see that @xmath385 for @xmath51 , but the limit is non - uniform ."
  ],
  "abstract_text": [
    "<S> plus 1pt minus 1pt0.3 cm    this report documents the implementation of several related 1d heat flow problems in the verification package exactpack@xcite . in particular , the planar sandwich class defined in ref .  </S>",
    "<S> @xcite , as well as the classes planarsandwichhot , planarsandwichhalf , and other generalizations of the planar sandwich problem , are defined and documented here . </S>",
    "<S> a rather general treatment of 1d heat flow is presented , whose main results have been implemented in the class rod1d . </S>",
    "<S> all planar sandwich classes are derived from the parent class rod1d .    0.2 cm     plus 1pt minus 1pt     plus 1pt minus 1pt     plus 1pt minus 1pt </S>"
  ]
}