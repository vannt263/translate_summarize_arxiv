{
  "article_text": [
    "since the work of fermi , pasta , and ulam in the 1950s @xcite , differential - difference equations ( ddes ) have been the focus of many nonlinear studies ( for references see e.g.  @xcite ) .",
    "there is renewed interest in ddes , which can be used to model such physical phenomena as particle vibrations in lattices , currents in electrical networks , pulses in biological chains , etc . unlike difference equations which are fully discretized ,",
    "ddes are semi - discretized with some ( or all ) of their spacial variables discretized while time is usually kept continuous .",
    "ddes also play an important role in numerical simulations of nonlinear partial differential equations ( pdes ) , queuing problems , and discretizations in solid state and quantum physics .",
    "there is a vast body of work on ddes , including investigations of integrability criteria , the computation of densities , generalized and master symmetries , and recursion operators @xcite .",
    "notable is the work by levi and colleagues @xcite , yamilov @xcite and co - workers @xcite , where the classification of ddes ( into canonical forms ) , integrability tests , and connections between integrable pdes and ddes are analyzed in detail . to a large extent ,",
    "the classification and integrability testing of discrete equations parallels continuous equations ( for reviews and references consult @xcite ) .",
    "a wealth of information about integrable ddes can be found in papers by suris @xcite and his book @xcite in progress .",
    "suris and others have shown that many lattices are closely related to the celebrated toda lattice @xcite , its relativistic counterpart due to ruijsenaars @xcite , the kvm lattice @xcite , and the two - component volterra system @xcite .",
    "recently , variants of the tanh - method have been successfully applied to many nonlinear polynomial systems of pdes in any number of independent variables @xcite .",
    "@xcite implemented the tanh- method ( and also sech , cn , and sn - methods ) in _ mathematica_. liu and li implemented the tanh - method @xcite in _",
    "maple_.    while there has been considerable work done on finding exact solutions to pdes , as far as we could verify , little work is being done to symbolically compute exact solutions of ddes . in this paper",
    "we present an adaptation of the tanh - method to solve nonlinear polynomial differential - difference equations , which to our knowledge is novel .",
    "our algorithm applies to semi - discrete lattices and allows one to find closed form solutions that are polynomial in tanh .",
    "although the tanh method is easy to apply , it leads to fairly cumbersome algebra without guarantee that a tanh solution can be found @xcite .",
    "we therefore present @xcite the fully automated software package , _",
    "ddespecialsolutions.m _ in _ mathematica _ , which implements the algorithm . without intervention from the user ,",
    "our software computes traveling wave solutions as polynomials in @xmath2 where @xmath3 the continuous variables @xmath4 and the discrete variables @xmath5 are combined with constants @xmath6 and @xmath7 and @xmath8 is the phase constant .    for systems of ddes involving constant parameters ( denoted by lower - case greek letters ) , the software automatically determines the conditions on the parameters so that the given equations might admit polynomial solutions involving tanh . obviously , since @xmath9 our code can find solutions in even powers of @xmath10 but our code can not find solutions involving odd powers of sech .",
    "the paper is organized as follows : section  [ sec : pdes ] gives a discussion of the tanh - method for pdes with a worked example of a two - dimensional nonlinear pde .",
    "since the tanh - method for semi - discrete lattices so closely parallels the tanh - method for evolutions equations , we believe that a discussion of the continuous case increases the transparency of the more complicated semi - discrete case . in section  [ sec : ddes ] we present our tanh - method for ddes with a worked example of a two - dimensional toda equation followed by almost a dozen additional examples . a description of our _ mathematica _ package , _ ddespecialsolutions.m _ , is given in section  [ sec : descript ] .",
    "we discuss our results and draw some conclusions in section  [ sec : conclusion ] .",
    "appendix a gives the full input and output of a test case .",
    "in this section we discuss the @xmath0-method as it applies to systems of @xmath11 polynomial differential equations , @xmath12 where the dependent variable @xmath13 has @xmath11 components @xmath14 the independent variable @xmath15 has @xmath16 components @xmath17 and @xmath18 denotes the collection of mixed derivative terms of order @xmath19 we assume that any arbitrary coefficients parameterizing the system are strictly positive and denoted by lower - case greek letters . to simplify the notation in the examples , we will write @xmath20 instead of @xmath21 and @xmath22 instead of @xmath23 etc .      [ pdetoodestep ] we seek solutions in the traveling frame of reference , @xmath24 where the components @xmath25 of the wave vector @xmath15 and the phase @xmath8 are constants .    in the tanh method ,",
    "we seek polynomial solutions expressible in hyperbolic tangent , @xmath26 based on the identity @xmath27 , @xmath28 therefore , the first and consequently all higher - order derivatives are polynomial in @xmath29 thus , repeatedly applying the chain rule , @xmath30 transforms ( [ originalsystem ] ) into a coupled system of nonlinear odes , @xmath31 where @xmath32 corresponds to @xmath33    since we seek polynomial solutions @xmath34 the leading exponents @xmath35 must be determined before the @xmath36 can be computed .    substituting @xmath32 into ( [ legendretype ] ) , the coefficients of every power of @xmath37 in every equation must vanish .",
    "in particular , the highest degree terms must vanish .",
    "since the highest degree terms only depend on @xmath38 in ( [ polynomialsolution ] ) , it suffices to substitute @xmath39 into ( [ legendretype ] ) . in the resulting polynomial system @xmath40 equating every two possible highest exponents in every component @xmath41",
    "gives a linear system for determining the @xmath42 the linear system is then solved for @xmath42    if one or more exponents @xmath35 remain undetermined , we assign a strictly positive integer value to the free @xmath43 so that every equation in ( [ legendretype ] ) has at least two different terms with equal highest exponents in @xmath29    to generate the system for the unknown coefficients @xmath36 and wave parameters @xmath25 , substitute ( [ polynomialsolution ] ) into ( [ legendretype ] ) and set the coefficients of @xmath44 to zero . the resulting nonlinear algebraic system for the unknown @xmath36 is parameterized by the wave parameters @xmath25 and the parameters in ( [ originalsystem ] ) , if any .",
    "the most difficult step of the method is analyzing and solving the nonlinear algebraic system . to solve the system we designed a customized , yet powerful , nonlinear solver .",
    "the nonlinear algebraic system is solved with the following assumptions :    * all parameters ( lower - case greek letters ) in ( [ originalsystem ] ) are strictly positive .",
    "( vanishing parameters may change the exponents @xmath35 in step 2 ) . *",
    "the coefficients of the highest power terms @xmath45 @xmath46 in ( [ polynomialsolution ] ) are all nonzero ( for consistency with step 2 ) ; and , * all @xmath25 are nonzero ( demanded by the nature of the solutions we seek ) .    the algebraic system is solved recursively , starting with the simplest equation , and continually back - substituting solutions",
    ". this process is repeated until the system is completely solved .    to guide the recursive process",
    ", we designed functions to ( i ) factor , split , and simplify the equations ; ( ii ) sort the equations according to their complexity ; ( iii ) solve the equations for sorted unknowns ; ( iv ) substitute solutions into the remaining equations ; and ( v ) collect the solution branches and constraints .",
    "this strategy is similar to what one would do by hand .",
    "if there are numerous parameters in the system or if it is of high degree , there is no guarantee that our solver will return a suitable result , let alone a complete result .    substituting the solutions from step 4 into ( [ polynomialsolution ] ) and reversing step 1",
    ", one obtains the explicit solutions in the original variables .",
    "it is prudent to test the solutions by substituting them into ( [ originalsystem ] ) .",
    "consider the @xmath47 dispersive long wave system @xcite , @xmath48 which is related to the eckhaus system .    applying chain rule ( [ chainruletanh ] ) repeatedly to ( [ eq : maccari ] ) , we get the coupled odes , @xmath49 where @xmath50    to compute the degree of the polynomial solution(s ) , substitute @xmath51 and @xmath52 into ( [ maccariode ] ) and pull off the exponents of @xmath37 ( see table [ tbl : maccariode ] ) .",
    "@xmath53    removing non - dominant exponents and equating possible highest exponents , we find @xmath54 ( from @xmath55 and @xmath56 or @xmath57 ( from @xmath58 or @xmath59 and @xmath56 from the first equation .",
    "then , from the second equation , we find @xmath60 ( from @xmath61 or @xmath62 and @xmath63 this gives us two branches , @xmath64 for the first branch , substituting ( [ maccarimsoln1 ] ) into ( [ maccariode ] ) and equating the coefficients of @xmath44 to zero gives @xmath65 similarly , for the second branch , substituting ( [ maccarimsoln2 ] ) into ( [ maccariode ] ) and setting the coefficients of @xmath44 to zero yields @xmath66 for the first branch , solving ( [ pdesystem1 ] ) under the assumption that @xmath67 and @xmath68 are nonzero , we find @xmath69 substituting ( [ maccarisoln ] ) into ( [ maccarimsoln1 ] ) and returning to @xmath70 and @xmath71 we get @xmath72 in the second branch , the equation @xmath73 in ( [ pdesystem2 ] ) is inconsistent with our assumption that @xmath74 and @xmath68 are nonzero . this branch does not yield a solution to ( [ eq : maccari ] ) .    substituting ( [ pdesoln ] ) into ( [ eq : maccari ] ) , we verify that our solution does indeed satisfy the original system .",
    "the tanh - method can be adapted to solve nonlinear polynomial ddes . apart from slight , yet important modifications , the steps mirror those in section  [ sec : pdes ] .",
    "given is a system of @xmath75 polynomial ddes , @xmath76 where the dependent variable @xmath13 has @xmath75 components @xmath14 the continuous variable @xmath15 has @xmath16 components @xmath77 the discrete variable @xmath78 has @xmath79 components @xmath80 the @xmath81 shift vectors @xmath82 and @xmath83 denotes the collection of mixed derivative terms of order @xmath84 we assume that any arbitrary coefficients that parameterize the system are strictly positive and denoted by lower - case greek letters .    to simplify notation in the examples , we use dependent variables @xmath20 instead of @xmath85 continuous independent variables @xmath22 instead of @xmath86 and lattice points @xmath87 instead of @xmath88 etc .",
    "for example , the two - component volterra equation @xcite , @xmath89 has @xmath90 @xmath91 @xmath92 and @xmath93 @xmath94 @xmath95      [ step : ddetoddeint ] we seek solutions in the traveling frame of reference , @xmath96 where the coefficients @xmath97 and the phase @xmath8 are all constants .",
    "the dot @xmath98 denotes the euclidean inner product .    using the properties of hyperbolic tangent , @xmath2 repeatedly applying the chain rule",
    ", @xmath99 transforms ( [ originalsystemddes ] ) into @xmath100 it is important to note that for any @xmath101 @xmath102 is a function of @xmath103 and not @xmath104 using the identity , @xmath105 we can write @xmath106 where @xmath107 and @xmath108 is the @xmath109-th component of shift vector @xmath110    seeking solutions of the form @xmath111 we must first compute the leading exponents @xmath42 as in the continuous case , we can do this by substituting only the leading term , @xmath112^{m_i},\\ ] ] with @xmath113 in ( [ phi ] ) .",
    "suppose we are interested in balancing terms with shift @xmath114 then terms with shifts other than @xmath114 say @xmath115 will not effect the balance since @xmath116 can be interpreted as being of degree zero in @xmath117 for instance , if @xmath118 then @xmath119 is of degree @xmath35 in @xmath103 and @xmath120^{m_i } $ ] is of degree zero in @xmath121    therefore , if we need to balance terms with shift @xmath114 we substitute @xmath122 into ( [ originalsystemddesint ] ) and proceed as in step 2 of section [ sec : pdes ] .",
    "we then continue with the union of the solutions found for @xmath123    substitute @xmath124^j,\\ ] ] into ( [ originalsystemddesint ] ) , with @xmath113 in ( [ phi ] ) . applying ( [ plusidentity ] )",
    "one can split @xmath125 into powers of @xmath126 while doing so , we repeatedly clear the denominators .",
    "the resulting nonlinear algebraic system for the unknowns @xmath36 is parameterized by @xmath127 @xmath128 @xmath129 @xmath130 @xmath131 @xmath132 @xmath129 @xmath133 and any parameters ( lower - case greek letters ) in ( [ originalsystemddes ] ) .",
    "[ step : solveddesystem ] this step is the same as in the continuous case ; we solve the system for @xmath36 in terms of the parameters @xmath134 and any parameters ( lower - case greek letters ) in ( [ originalsystemddes ] ) .        to illustrate the method",
    ", we derive an exact solution of the @xmath47-dimensional toda lattice @xcite , @xmath135 where @xmath136 is the displacement from equilibrium of the @xmath137-th unit mass under an exponential decaying interaction force between nearest neighbors .",
    "to write ( [ exptoda ] ) as a polynomial dde , set @xmath138 then , @xmath139 and ( [ exptoda ] ) becomes @xmath140 integrating ( [ varchangederivative ] ) and ignoring the integration constant , we find @xmath141 differentiating ( [ undtexp ] ) with respect to @xmath142 and using ( [ expuntplus1 ] ) and ( [ ynxequalunun1 ] ) , we compute @xmath143 , \\\\",
    "\\label{orgtoda }    & = \\left ( \\frac{\\partial u_n}{\\partial t}+1 \\right ) \\left ( u_{n-1 } - 2 u_n         + u_{n+1 } \\right).\\end{aligned}\\ ] ] so , ( [ exptoda ] ) can be replaced by the polynomial equation ( [ orgtoda ] ) .    by repeatedly applying the chain rule ( [ ddechainrule ] ) to ( [ orgtoda ] ) ,",
    "one gets @xmath144 + \\\\",
    "\\left[1+c_1(1-t_n^2)u_{n}'\\right ]     \\left[u_{n-1}-2u_{n}+u_{n+1}\\right]=0 . \\end{gathered}\\ ] ] where @xmath145 for this system , we have three shifts @xmath146 and @xmath147 substituting ( [ highestpoweransatz ] ) into ( [ todalegendre ] ) and pulling off the highest exponents , we find @xmath148 for shift @xmath149 and @xmath150 and @xmath151 for shift @xmath152 with only one term , neither shifts @xmath149 or @xmath153 contribute any solutions .",
    "equating the two highest terms from the shift @xmath154 , @xmath155 and @xmath156 we find @xmath157    substituting ( [ ddesolutionansatz ] ) into ( [ todalegendre ] ) , clearing the denominator and setting coefficients of power terms in @xmath158 to zero , gives @xmath159 assuming @xmath160 and @xmath161 nonzero , the solution of ( [ todaalgsys ] ) is @xmath162 then , the closed form solution of ( [ orgtoda ] ) is @xmath163\\ ] ] where @xmath164 and @xmath8 are arbitrary .",
    "the algorithm must be repeated if any of the parameters in ( [ originalsystemddes ] ) are set to zero .",
    "we applied the tanh algorithm to solve a variety of nonlinear lattice equations in @xmath165-dimensions .",
    "the results are summarized in table [ tbl : ddeexamples ] . for notational simplicity , we denote @xmath166 by @xmath167    the ablowitz - ladik equation @xcite is a discretization of the nonlinear schrdinger equation .",
    "the toda lattices @xcite describe vibrations in mass - spring lattices with an exponential interaction force .",
    "the volterra type equations @xcite are discretizations of the korteweg - de vries ( kdv ) and modified kdv equations . 0.1pt"
  ],
  "abstract_text": [
    "<S> a new algorithm is presented to find exact traveling wave solutions of differential - difference equations in terms of tanh functions . for systems with parameters , </S>",
    "<S> the algorithm determines the conditions on the parameters so that the equations might admit polynomial solutions in tanh .    </S>",
    "<S> examples illustrate the key steps of the algorithm . </S>",
    "<S> parallels are drawn through discussion and example to the tanh - method for partial differential equations .    </S>",
    "<S> the new algorithm is implemented in _ </S>",
    "<S> mathematica_. the package _ </S>",
    "<S> ddespecialsolutions.m _ can be used to automatically compute traveling wave solutions of nonlinear polynomial differential - difference equations . </S>",
    "<S> use of the package , implementation issues , scope , and limitations of the software are addressed .    </S>",
    "<S> * program summary *    _ title of program : _ </S>",
    "<S> ddespecialsolutions.m + _ catalogue identifier ( supplied by the publisher ) : _ + _ distribution format ( supplied by the program library ) : _ + _ computers : _ created using a pc , but can be run on unix and apple machines + _ operating systems under which the program has been tested : _ windows 2000 and xp + _ programming language used : _ </S>",
    "<S> mathematica + _ memory required to execute with typical data : _ 9 mb + _ number of processors used : _ 1 + _ has the code been vectorised or parallelized ? : _ no + _ number of bytes in distributed program , including test data , etc . : _ </S>",
    "<S> 104 761    _ nature of physical problem : _ the program computes exact solutions to differential - difference equations in terms of the @xmath0 function . </S>",
    "<S> such solutions describe particle vibrations in lattices , currents in electrical networks , pulses in biological chains , etc . </S>",
    "<S> + _ method of solution : _ after the differential - difference equation is placed in a traveling frame of reference , the coefficients of a candidate polynomial solution in @xmath0 are solved for . </S>",
    "<S> the resulting solution is tested by substitution into the original differential - difference equation . </S>",
    "<S> + _ restrictions on the complexity of the program : _ the system of differential - difference equations must be polynomial . </S>",
    "<S> solutions are polynomial in @xmath1 + _ typical running time : _ the average run time of 16 cases ( such as toda , volterra , and ablowitz - ladik lattices ) is 0.228 seconds with a standard deviation of 0.165 seconds on a 2.4ghz pentium 4 with 512 mb ram running mathematica 4.1 . the running time may vary considerably , depending on the complexity of the problem .    </S>",
    "<S> exact solutions , traveling wave solutions , differential - difference equations , semi - discrete lattices , tanh - method    02.70.wz ; 02.30.ik ; 02.30.jr ; 02.90.+p </S>"
  ]
}