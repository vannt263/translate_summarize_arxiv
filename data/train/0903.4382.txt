{
  "article_text": [
    "automatic termination analysis is a rapidly growing field ; it represents exciting progress in the theory and application of program analysis .",
    "two widely - cited foundational publications are podelski and rybalchenko  @xcite and lee , jones and ben - amram  @xcite .",
    "the former promoted the use of _ local ranking functions _ ( or relations ) for termination proofs ; the latter presented the size - change termination ( sct ) framework .",
    "sct is , in essence , a class of abstract programs ( in other words , transition systems ) , that happen to be conveniently represented as graphs ( known as size - change graphs ) .",
    "these abstract programs can be used to safely approximate the semantics of an actual program , while capturing invariants that are crucial to a termination proof .",
    "a _ global ranking function _ is a function of program states that decreases towards its lower bound in every program transition , thus providing a direct witness to termination .",
    "it is a folklore theorem that a program terminates if and only if such a function exists . but global ranking functions can be complex and difficult to find , even for simple kinds of programs ( for example , the programs that we will consider in this work ) .",
    "both  @xcite and  @xcite circumvent the construction of a global ranking function .",
    "in fact , they are closely related : as clearly explained in  @xcite , sct termination proofs fit the local framework of @xcite .",
    "the problem addressed in this work is that of deriving an explicit expression for a global ranking function for a given sct instance ( despite the fact that a termination proof can be obtained without it ) . why are global ranking functions interesting ?",
    "firstly , for theoretical understanding of size - change termination : identifying a class of ranking functions that captures all terminating instances provides a clue to the _ scope _ of the proof method ( what behaviours are captured by the method , what ordinals may be captured etc . ) . effectively constructing a ranking function",
    "is a challenge because it is not at all obvious how to do it , even when a function is known to exist ; and developing such an algorithm provides new insights into the subject .",
    "secondly , for applications : an explicit ranking expression may provide an easy - to - verify witness to termination , since verification only amounts to checking it against every transition .",
    "such a witness is not provided by the local methods . as pointed out by krauss  @xcite ,",
    "if a global ranking function ( of sufficiently simple form ) could be constructed automatically , it would allow a theorem prover to certify the termination claim while allowing the tool that searches for the termination proof to stay outside the trusted ( formally verified ) code base .",
    "one can also consider applications to proof - carrying code , where again the desire is for the proof to be given as a certificate that is easier to check than to find . finally , an interesting potential application to bound the excution time of programs , since a ranking function provides a progress measure .",
    "however , such application is not immediate , since the range of our functions is , in general , not the integers ( i.e. , not the order type @xmath0 , but @xmath1 for some @xmath2 ) .    a gcd program .",
    "one ranking function for the loop is the maximum among the variables .",
    "another is their sum.tfig-gcd while ( x , y > 0 )  if x > y then x : = x - y  else y : = y - x return max(x , y )    for all these reasons , we are interested in the form and complexity of global ranking functions that suffice for sct programs , and in algorithms for their automatic construction",
    ". early publications on sct identified several special cases : programs where the maximum , minimum , or sum of a set of variables decreases ( figure  [ fig - gcd ] ) , programs with a lexicographic descent ( the ubiquitous ackermann s function ) , and programs with multiset - descent  @xcite .",
    "lee  @xcite established for the first time that a ranking function can be automatically constructed for _ any terminating sct instance _ , always of the following form : @xmath3 where @xmath4 represents the maximum element among a set @xmath5 of _ vectors _ ( tuples ) of variables and constants , where vectors are lexicographically ordered .",
    "let us give an example .",
    "figure  [ fig - ex - cls ] shows a program , and the graphs in figure  [ fig - cls - graphs ] represent it in sct form .",
    "the three graphs correspond to the three alternatives in the loop body , with arcs representing data flow and heavy arcs representing descent ( for precise definitions of size - change graphs , see section  [ sec - formalintro ] ) .    a terminating program .",
    "function f is considered unknown .",
    "`` do either '' is nondeterministic.tfig-ex-cls while ( x , y , z > 0 )   do either   ( x , y , z ) : = ( y-1 , y-1 , f(x , y , z ) )  | ( x , y , z ) : = ( x-1 , x , f(x , y , z ) )  | ( x , y , z ) : = ( y-1 , y , z-1 )    size - change graphs for the program in figure  2 . tfig - cls - graphs    ( 600,200)(0,60 ) ( 188,85)(120,138 ) ( 197,189)x ( 197,147)y ( 197,105)z ( 221,153)(3,2)55 ( 221,152)(3,2)55 ( 221,153)(1,0)53 ( 221,152)(1,0)53 ( 287,189)x ( 287,147)y ( 287,105)z    ( 350,85)(120,138 ) ( 359,189)x ( 359,147)y ( 359,105)z ( 383,195)(1,0)53 ( 383,194)(1,0)53 ( 383,195)(3,-2)55 ( 449,189)x ( 449,147)y ( 449,105)z    ( 512,85)(120,138 ) ( 521,189)x ( 521,147)y ( 521,105)z ( 545,111)(1,0)53 ( 545,110)(1,0)53 ( 545,153)(3,2)55 ( 545,152)(3,2)55 ( 545,153)(1,0)53 ( 611,189)x ( 611,147)y ( 611,105)z    a ranking function for this program is @xmath6 ( in this instance the _ min _ operator is unnecessary ; this could be expected , as section  [ sec - fif ] will show ) . a straight - forward way to verify this is to check each graph in turn , considering each possibility among @xmath7 , @xmath8 and @xmath9 . for example , take the first graph . assume that initially @xmath7 .",
    "then the initial maximum is @xmath10 ; since the transition decreases y , there is no doubt that @xmath11 descends .",
    "[ [ contributions - of - this - work . ] ] contributions of this work .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + +    we provide new algorithms to construct ranking functions for a restricted , but interesting , class of sct instances : fan - in free ( or fan - out free ) graphs .",
    "we feel that the new constructions are far more transparent than the previous one , which involved a lengthy detour through the determinization of bchi automata .",
    "in contrast , the new ones are based on direct analysis of sct graphs .",
    "they employ a technique of including composite values , such as tuples or sets of variables , as single data items , and showing that this simplifies the sct analysis .",
    "the inclusion of tuples reflects the role of lexicographic descent ; sets of variables give rise to descent in _ multiset orders _ ( see section 2 ) .",
    "thus the constructions also provide one more example of the usefulness of multiset orders in termination - related reasoning . in terms of expression size",
    ", we reduce the upper bound from triply - exponential as in  @xcite to singly - exponential .",
    "an additional contribution of this work is the formulation of a lower - bound framework and the proof of exponential lower bounds , which imply that our upper complexity bounds are , in a certain sense , optimal .",
    "[ [ structure - of - this - paper . ] ] structure of this paper .",
    "+ + + + + + + + + + + + + + + + + + + + + + + +    the next section provides the formal introduction , giving necessary definitions . in section  3",
    "we review some results that we are using from previous work .",
    "then , in sections  4 and 5 we give the new construction for fan - out free , then fan - in free , graphs .",
    "section  6 is concerned with lower bounds . in section  7",
    ", we discuss the connection of our results to a more general theorem of blass and gurevich .",
    "section  8 concludes .",
    "in this section we list the necessary definitions involving sct , ranking functions , and their connection .",
    "enough definitions are given to make the paper formally self - contained and to fix the terminology ( which is , unfortunately , not uniform across sct - related work ) .",
    "let @xmath12 be a well - ordered set of data values .",
    "a control - flow graph ( cfg ) is a directed multigraph @xmath13 .",
    "the nodes are called flow - chart points or just flow - points . the set of arcs from @xmath14 to @xmath15",
    "is denoted @xmath16 .    for each @xmath14",
    ", we have a distinct set of _ variables _ @xmath17 .",
    "one of the nodes , @xmath18 , is _ initial _ or starting point .",
    "all nodes are reachable from @xmath18 .",
    "often , we further assume that @xmath18 is also reachable from all nodes , or equivalently that the graph is strongly connected ; it is well - known that termination analysis can be done one strongly - connected component at a time .    the variables @xmath17 are supposed to represent data pertinent to the program state when the program is at point @xmath19 .",
    "to avoid cumbersome notations , we make in this paper the following assumption :    all sets @xmath17 have the same size @xmath20 .",
    "we also reserve the identifier @xmath21 for @xmath22 .",
    "the set of ( abstract ) program states is @xmath23    thus , a state is defined by a program point and a _ store _ @xmath24 applicable to that point .",
    "a state will be cutomarily denoted by @xmath25 and we sometimes implicitly assume that its components are @xmath26 .    a remark about the notion of abstract state may be in order . while in simple settings ( such as  @xcite ) , @xmath17 may correspond precisely to constituent variables of the concrete program state , this is not true in general . in many applications of sct",
    ", static program analysis is used to determine properties of a state that are ( or may be ) relevant to termination , e.g. , the difference of two integer variables , the depth of a recursion or closure stack , etc .",
    "the original presentation of sct referred to programs that process data types , such as lists and trees , that can be ranked by their size , height etc ; in this case we may prefer to think of the abstract value as a member of @xmath17 rather than the list or tree itself .",
    "there are also examples where it is worthwhile to include two abstractions ( norms ) of the same concrete object .    for @xmath27 , a size - change graph ( scg ) with source @xmath19 and target",
    "@xmath28 is a bipartite directed graph with source nodes corresponding to @xmath17 and target nodes corresponding to @xmath29 .",
    "we write this fact as @xmath30 .",
    "each arc of @xmath31 ( called a _ size - change arc _ ) is labeled with an element of the set @xmath32 .",
    "size - change arcs represent constraints on _ state transitions _ @xmath33 .",
    "the arcs have the following meaning :    [ cols= \" > , < ,",
    "< , < \" , ]     we write @xmath34 if all constraints are satisfied ; we say that transition @xmath35 is _ described by @xmath31_.    we write @xmath36 if there is an arc from @xmath37 to @xmath38 in @xmath31 ( however labeled ) .",
    "an sct instance , also known as _ annotated control - flow graph _ ( acg ) , is a cfg where every arc @xmath39 is annotated with a size - change graph @xmath40 .",
    "an sct instance is customarily denoted by @xmath41 and often viewed as a set of scg s , the cfg being implicitly specified .      a multipath as a layered graph , with a highlighted complete thread.tfig-multipath    ( 600,200)(0,60 ) ( 197,189)x ( 197,147)y ( 197,105)z ( 221,153)(3,2)55 ( 221,152)(3,2)55 ( 221,153)(1,0)53    ( 296,189)x ( 296,147)y ( 296,105)z ( 320,195)(3,-2)55 ( 320,194)(3,-2)55 ( 320,195)(1,0)53    ( 395,189)x ( 395,147)y ( 395,105)z ( 419,153)(3,2)55 ( 419,152)(3,2)55 ( 419,110)(1,0)53 ( 419,153)(1,0)53    ( 494,189)x ( 494,147)y ( 494,105)z ( 518,195)(1,0)53 ( 518,194)(1,0)53 ( 518,195)(3,-2)55 ( 584,189)x ( 584,147)y ( 584,105)z    a @xmath42-_multipath _ is a sequence @xmath43 of elements of @xmath41 that label a ( finite or infinite ) directed path in the cfg .    the path in the cfg is often denoted by @xmath44 ( the abbreviation stands for call sequence  originating in a functional programming setting where transitions model calls ) . the multipath corresponding to @xmath44 is called @xmath45 .",
    "front _ of the multipath is the source point of @xmath46 , the _ rear _ of a finite multipath is the target of the last transition , and if both are one and the same flow - point , the multipath is referred to as _ a cycle _ ( in fact , its underlying cfg path is a cycle ) .",
    "we extend the notation @xmath47 to finite multipaths as follows : @xmath48    a multipath is ofen viewed as the ( finite or infinite ) _ layered directed graph _ obtained by identifying the target nodes of @xmath49 with the source nodes of @xmath50 ( figure  [ fig - multipath ] ) .",
    "let @xmath51 be a @xmath42-multipath .",
    "a _ thread _ in @xmath51 is a ( finite or infinite ) directed path in the layered directed graph representation of @xmath51 .",
    "we say that the thread is _ from @xmath37 to @xmath38 _ if the thread begins with variable @xmath37 and ends with @xmath38 .",
    "a thread is _ complete _ if it spans the length of @xmath51 .",
    "a thread is _ descending _ if it includes a strict arc ; it is _ infinitely descending _ if it includes infinitely many strict arcs .",
    "intuitively , threads carry information along the computation , and this intuitive meaning enters the language we are using , so for example we might say that variable @xmath37 is carried by a thread to variable @xmath38 ( which implies that the initial value of @xmath37 constrains the final value of @xmath38 ) , or that a certain set of variables is carried by threads to some other set .    more precisely , a thread represents a sequence of values generated during a computation , that form a weakly decreasing chain in @xmath12 ; and an infinitely descending thread indicates an infinitely - decreasing chain of values . under the assumption of well - foundedness of @xmath12 , such an infinite chain can not exist .",
    "this consideration leads to the following definition :    @xmath42 is said to _",
    "satisfy sct _ , or _",
    "be a positive sct instance _ , or _",
    ", if every infinite multipath contains an infinitely - descending thread .",
    "we next formalize the manner in which the sct condition ( which is purely combinatorial ) relates to a semantic notion of termination .",
    "[ def - transitionsystem ] the _ transition system _ associated with @xmath41 is the relation @xmath52 over @xmath53 defined by @xmath54    we say that @xmath52 is _ terminating _ if there is no infinite chain in @xmath52 .",
    "[ thm - sct ] @xmath52 is terminating if and only if @xmath41 satisfies sct .",
    "the `` if '' part of this theorem ( soundness of the sct criterion ) follows directly from well - foundedness . for the `` only if '' direction see  @xcite .",
    "thus , sct is a sound and complete termination criterion for the corresponding class of transition system .",
    "sct is decidable ( it would be a far less interesting abstraction otherwise ) ; note that this is possible because the corresponding transition systems are restricted and only approximate real programs . a well - known way to decide sct",
    "is the so - called _ closure algorithm _ , which consists of computing a transitive closure of @xmath41 and checking idempotent graphs : we now review the pertinent definitions and facts , following  @xcite .",
    "[ def - composition ] the _ composition _ of size - change graph @xmath55 with @xmath56 is a size - change graph with source f , target h and arc set @xmath57 , where    @xmath58    the composition is denoted by @xmath59 .",
    "[ def - idempotent ] graph @xmath31 is _ idempotent _ if @xmath60 .",
    "note that an idempotent graph must have the same flow - point for both source and target , i.e. , it describes a cycle in the control - flow graph .",
    "let @xmath61 denote the composition - closure of @xmath41 .",
    "sct is satisfied by @xmath41 if and only if every idempotent graph in @xmath61 has an arc @xmath62 for some @xmath37 .",
    "a variation in which every graph in the closure ( regardless of idempotence ) is tested is described in  @xcite .",
    "let @xmath63 be a transition system over state - space _",
    "st_. a ( global ) _ ranking function _ for @xmath63 is a function @xmath64 , where @xmath65 is a well - founded set , such that @xmath66 .",
    "let @xmath67 be any predicate , where @xmath68 are free variables representing states .",
    "we write @xmath69 if @xmath70    a ( global ) _",
    "ranking function _ for an sct instance @xmath42 is a function @xmath64 , where @xmath65 is a well - founded set , that constitutes a ranking function for @xmath52 .",
    "equivalently , it satisfies @xmath71 for every @xmath72 .",
    "for convenience , we often `` curry '' @xmath11 and write @xmath73 as @xmath74 .    [ [ complexity - measures . ] ] complexity measures .",
    "+ + + + + + + + + + + + + + + + + + + +    in this paper we are interested in explicit construction of ranking functions . thus the ranking functions will be given by expressions , combining the values of program variables with appropriate operators ( such as * min * , * max * etc . ) .",
    "the complexity measure we are mostly interested in is the size of the expression .    also of interest",
    "is the time to construct the expression ( if the proof is constructive ) .",
    "naturally , this time is lower - bounded by the expression s size .",
    "[ [ notations . ] ] notations .",
    "+ + + + + + + + + +    if a flow point @xmath19 has variables @xmath75 , then it is natural to write a ranking function using these variable names , e.g. , @xmath76 . but",
    "technically , a ranking function is a function over @xmath77 . to iron out the formality",
    ", we use notations as defined next .",
    "let @xmath78 .",
    "then @xmath79 is @xmath80 . for fixed @xmath81 ,",
    "this is a function of @xmath24 .",
    "similarly , @xmath82 is @xmath83 .",
    "previous work on sct has identified certain structural subclasses of sct as interesting . by structural ,",
    "we mean that the subclass is defined by imposing a constraint on the structure of the size - change graphs .",
    "the following three subclasses will play a role in this work :    1 .   in _ fan - in free _",
    "graphs , the in - degree of all nodes is at most 1 .",
    "fan - in free graphs are discussed in  @xcite . a benchmark evaluation described in  @xcite demonstrated that such graphs occur frequently when size - change graphs are extracted from prolog programs . in @xcite",
    ", it was shown that fan - in freedom makes an extended ( and harder ) form of sct , called @xmath84sct , decidable .",
    "fan - out free _ graphs , the out - degree of all nodes is at most 1 .",
    "the interest in this subclass is mostly due to its being defined symmetrically to fan - in free graphs , and yet sometimes easier to work with .",
    "for example , in this paper we will handle fan - out free graphs first .",
    "_ strict sct _",
    "graphs have exclusively strict arcs .",
    "this again is a class which is introduced because it is easier to work with . in particular , as shown in  @xcite , this class admits a simple ranking - function construction ; we will make use of that construction in this work .      in the example given in section  1 , as well as in many classical examples ,",
    "it is useful to define the rank of a state as a tuple that is shown to descend lexicographically . in previous work on termination",
    ", it has been discovered that in some cases , it is useful to form not a tuple , but a multiset of values , and exhibit descent in an appropriate _ multiset order_. in particular , such orders turn out useful in constructing ranking functions for sct ; this subsection presents the necessary definitions .",
    "let @xmath85 be finite multisets over @xmath12 .",
    "we write @xmath86 if @xmath87 ( the cardinality of @xmath88 is larger ) or if @xmath89 and the sets can be listed as @xmath90 and @xmath91 with @xmath92 for all @xmath93 and @xmath94 for at least one @xmath93 .",
    "we write @xmath95 for the non - strict variant .",
    "for example , let @xmath96 and @xmath97 .",
    "then we have @xmath98 . if we let @xmath99 , we have neither @xmath100 , nor @xmath101 : these sets are incomparable .",
    "smo is thus a partial order .",
    "let @xmath102 and suppose that @xmath103 ; it is easy to verify that @xmath98 means that a sorted listing of @xmath88 is lexicographically greater than a sorted listing of @xmath104 .",
    "this is true for both descending sort and ascending sort ; which suggests two ways of completing smo to a total order over @xmath2-element multisets . to complete the last example , since @xmath105 is lexicographically smaller than @xmath106 ,",
    "multiset @xmath107 is smaller according to descending sort .",
    "however , according to ascending sort , we find that @xmath107 is greater , as @xmath108 is lexicographically greater than @xmath109 .    comparing lists in descending sorted order yields the total order called _ multiset order _ by dershowitz and manna , who defined it in a more general fashion and showed its usefulness in termination proofs . comparing ascending lists results in the so - called _ dual multiset order _  @xcite . in this work , we will make use of both total orders .",
    "we emphasize , however , that we only use them for sets of equal cardinality ( which simplifies their definitions ) .",
    "if @xmath87 , we shall always consider @xmath88 to be bigger .",
    "a total order is needed , in particular , for the definition of min and max operators .",
    "[ def - minmax ] let @xmath85 be finite multisets over @xmath12 .",
    "we define @xmath110 and @xmath111 as follows : if @xmath112 , then @xmath110 is the smaller multiset and @xmath111 is the larger . if @xmath89 , @xmath110 is the smaller under dual multiset order , while @xmath111 is the bigger under multiset order .",
    "the definitions extend naturally to define minimum and maximum over a finite set of multisets . in all cases ,",
    "the operator can be implemented by choosing the lexicographic minimum , or maximum , among the tuples that represent the multisets ( with elements in ascending order for * min * , descending order for * max * ) . the choice of two different orderings to define * min * and * max * may seem strange , but it will be seen to work best later in the paper .",
    "this section summarizes some previous work on sct , including definitions and constructions that we shall use .",
    "the concept of thread preservers was introduced in  @xcite .",
    "we cite the definition and a useful theorem .",
    "let @xmath113 , the combined set of variables in the whole abstract program .",
    "let @xmath42 be an acg and @xmath114 its set of variables .",
    "a set @xmath115 is called a _ thread preserver _ for @xmath42 if for every @xmath72 where @xmath30 , it holds that whenever @xmath116 , there is @xmath117 for some @xmath118 .",
    "it is easy to see that the set of thread preservers of a given acg is closed under union .",
    "hence , there is always a unique maximal thread preserver ( mtp ) for @xmath42 , which we denote by @xmath119 .",
    "it is further shown in @xcite that given a standard representation of @xmath42 , @xmath119 can be found in linear time .",
    "this is significant because the mtp is useful  among else for constructing ranking functions .      throughout this subsection ,",
    "@xmath41 is presumed strongly connected .",
    "the following theorem is from  @xcite :    [ thm - subsets ] let @xmath42 be a terminating , strict sct instance .",
    "there exists an indexed set @xmath120 , where for every @xmath14 , @xmath121 is a set of subsets of @xmath17 , such that the function @xmath122 is a ranking function for @xmath42 .",
    "for example , consider the sct instance in figure  [ fig - ex - m05 ] .",
    "it has the ranking function @xmath123 the correctness of this function can be verified , as usual , by checking graph by graph and assuming in turn each ordering of the values of the variables .",
    "an sct instance with strict arcs onlyt fig - ex - m05    ( 340,200)(120,-15 ) ( 85,20)(120,125 ) ( 95,110)@xmath124 ( 95 , 70)@xmath125 ( 95 , 30)@xmath126 ( 115,73)(1,0)50 ( 115,72)(1,0)50    ( 115,33)(1,0)50 ( 115,32)(1,0)50    ( 115,73)(4,-3)50 ( 115,72)(4,-3)50    ( 115,33)(4,3)50 ( 115,32)(4,3)50 ( 175,110)@xmath124 ( 175 , 70)@xmath125 ( 175 , 30)@xmath126    ( 240,20)(120,125 ) ( 250,110)@xmath124 ( 250 , 70)@xmath125 ( 250 , 30)@xmath126 ( 270,115)(1,0)50 ( 270,114)(1,0)50    ( 270,115)(2,-3)50 ( 270,114)(2,-3)50    ( 270,33)(1,0)50 ( 270,32)(1,0)50    ( 270,33)(2,3)50 ( 270,32)(2,3)50 ( 335,110)@xmath124 ( 335 , 70)@xmath125 ( 335 , 30)@xmath126    ( 395,20)(120,125 ) ( 405,110)@xmath124 ( 405 , 70)@xmath125 ( 405 , 30)@xmath126 ( 425,115)(1,0)50 ( 425,114)(1,0)50    ( 425,115)(4,-3)50 ( 425,114)(4,-3)50    ( 425,73)(1,0)50 ( 425,72)(1,0)50    ( 425,73)(4,3)50 ( 425,72)(4,3)50 ( 490,110)@xmath124 ( 490 , 70)@xmath125 ( 490 , 30)@xmath126    ( 100,-5)@xmath127 ( 255,-5)@xmath128 ( 410,-5)@xmath129    the worst - case size of a function of the above form is exponential , related to the number of different subsets of @xmath17 , which is @xmath130 . for more details , see  @xcite . next , we give two special cases of particular interest , which are already implicit in  @xcite .",
    "the first case is that of _ fan - out free _ graphs :    [ thm - min ] if @xmath42 is a terminating , strict , fan - out free sct instance , then @xmath42 has a non - empty thread - preserver ; and for any such preserver @xmath131 , the function @xmath132 is a ranking function for @xmath42 .",
    "the theorem follows from the following two lemmas .",
    "the first we only cite , referring the reader to  @xcite for a proof .",
    "the second one we prove , because the proof is simple and clarifies the significance of thread preservers in connection with ranking .",
    "[ lem - foftp ] suppose that @xmath42 is strict and fan - out free .",
    "then @xmath42 is size - change terminating if and only if @xmath41 has a non - empty thread - preserver .",
    "suppose that @xmath42 has a non - empty thread preserver @xmath131 , and let @xmath133 for all @xmath72 , @xmath134 . if @xmath42 is strict , then @xmath71 .",
    "let @xmath135 . by the definition of a thread preserver , we have , for all @xmath116 , @xmath136 for some @xmath137 .",
    "if @xmath37 is such that @xmath138 is minimum ( i.e. , @xmath139 is @xmath138 ) , we have @xmath140 , whereas @xmath141 . combining the three relations , we get @xmath142 .    if @xmath42 is strict , then @xmath143 and the inequality becomes strict .",
    "the case of _ fan - in free graphs _",
    "is symmetric to that of fan - out free graphs . in order to exploit this symmetry ,",
    "we use the technique of _ transposing _ the size - change graphs .",
    "if @xmath30 is a size - change graph , @xmath144 denotes its transposition , which is a size - change graph with source @xmath28 , target @xmath19 , and arcs @xmath145 . for a set @xmath42 of size - change graphs , @xmath146 .",
    "[ obs - transp ] @xmath42 satisfies sct if and only if @xmath147 does .",
    "clearly , @xmath31 is fan - in free if and only if @xmath144 is fan - out free .",
    "now we can use this for a ranking - function construction .",
    "[ thm - max ] if @xmath42 is a terminating , strict , fan - in free sct instance , then @xmath147 has a non - empty thread - preserver ; and for any such preserver @xmath131 , the function @xmath148 is a ranking function for @xmath42 .",
    "the fact that @xmath147 has a non - empty thread - preserver follows from observation  [ obs - transp ] and lemma  [ lem - foftp ] .",
    "the correctness of the ranking function then follows from the next lemma .",
    "suppose that @xmath147 has a non - empty thread preserver @xmath131 . and let @xmath149 for all @xmath72 , @xmath134 .",
    "if @xmath42 is strict , then @xmath71 .",
    "let @xmath135 . by the definition of a thread preserver ( but noting that it is a @xmath144 thread preserver ! ) , we have , for all @xmath150 , @xmath136 for some @xmath151 .",
    "for @xmath38 such that @xmath152 is maximum , we have @xmath153 , whereas @xmath154 . combining the three relations",
    ", we get @xmath155 .    if @xmath42 is strict , then @xmath143 and the inequality becomes strict .",
    "we are given a fan - out free positive sct instance @xmath41 .",
    "we assume that @xmath41 is strongly connected and that @xmath156 for all @xmath14 , and let @xmath157 .",
    "we shall construct a ranking function for @xmath42 , and then discuss its size ( getting an upper bound which is later shown to be tight ) . a brief outline of the construction follows :    1 .",
    "transform @xmath42 into a strict , fan - out free sct instance .",
    "2 .   use theorem  [ thm - min ] .",
    "optionally , optimize the ranking function for size ( without this stage , the desired upper bound on size may fail to hold ) .",
    "next , the construction is described in detail , along with proofs and some illustrations .",
    "a complete demonstration of the process for a ( very small ) example can be found at the end of the section , along with some comments regarding the implementation of the algorithm ( which is initially described in a very abstract manner , just to make the theorems clear ) .",
    "[ def - vf ] for flow - point @xmath14 and positive integer @xmath104 , @xmath158 is the set of tuples @xmath159 of even length , where every odd position is a non - empty subset of @xmath160 , together constituting a partition of the latter ; and every even position is an integer between 0 and @xmath104 .",
    "the distinction between a vector and its components is indicated here by font .",
    "thus , @xmath161 is the @xmath93th entry of @xmath162 , while @xmath163 is the @xmath93th vector in some sequence of vectors . for notational convenience ,",
    "we may make use of a double - meaning expression @xmath164 , which means , if @xmath93 is odd , that the set @xmath161 contains more elements than @xmath165 ; and if @xmath93 is even , that the integer @xmath161 is greater .",
    "[ def - value ] the value of @xmath166 in a given program state @xmath26 , denoted @xmath167 , is obtained by substituting the values of variables according to @xmath24 , so every subset of variables becomes a multiset of data values .",
    "this results in a tuple with multisets and integers in odd and even positions , respectively .",
    "such tuples are compared lexicographically , where multisets are compared according to one of the multiset orders ( we use smo , as long as a total order is not required ) .",
    "we define the * min * and * max * operators on vectors by the lexicographic extension of the corresponding total multiset order , according to definition  [ def - minmax ] .    in the rest of this section , @xmath168 .",
    "since @xmath104 is fixed , @xmath158 may be written as @xmath169 .    for @xmath78 and a size - change graph @xmath30 ,",
    "define @xmath170 to be the set of @xmath38 such that @xmath36 with @xmath171 .",
    "observe that , as we are only dealing with fan - out free graphs in this construction , @xmath172 , with equality only if we have a _",
    "one - to - one _ correspondence , where for every element of @xmath81 ( respectively @xmath170 ) there is a single arc in @xmath31 connecting it to the other set .",
    "it is quite easy to see , that such correspondence implies a ( weak ) smo descent from @xmath81 to @xmath170 ( if at least one of the connecting arcs is strict , we have strict descent ) .",
    "let @xmath173 , and @xmath174 .",
    "for an odd position @xmath93 in @xmath162 , let @xmath175    we say that position @xmath93 is _ descending _ if @xmath176 or @xmath177 and there is a strict arc in @xmath31 from @xmath178 to @xmath179 .",
    "note that the only other possibility is @xmath177 and all arcs from @xmath161 to @xmath180 non - strict .",
    "so , a descending position s value either strictly descends in multiset order , or at least weakly descends . in the next definition , we use the numeric positions in order to make the vector decrease strictly when there is no descent in the set - valued positions .",
    "we also use them to avoid having empty sets in the set - valued positions .",
    "[ def - next ] given a size - change graph @xmath30 , and @xmath181 , @xmath182 is defined by cases , as follows .",
    "* case n1 : *  if @xmath93 is the first descending position and @xmath183 , @xmath184 where @xmath81 is the set of @xmath28 variables not occurring up to position @xmath93 ; if @xmath81 turns out to be empty , omit the final suffix @xmath185 .",
    "case n2:*if @xmath93 is the first descending position and @xmath186 , @xmath187 where @xmath81 is the set of @xmath28 variables not occurring up to position @xmath188 ; note that it can not be empty .",
    "the above expression assumes that @xmath189 and @xmath190 .",
    "if either of these conditions is not met , @xmath191 is _",
    "undefined_. 3 .",
    "* case n3:*no position is descending .",
    "the last position is @xmath161 ( an integer ) .",
    "@xmath192 assuming that @xmath193 ; if @xmath194 , @xmath191 is _",
    "undefined_.    note that a size - change arc of @xmath31 that leaves a variable @xmath178 never reaches a variable in a higher position of @xmath191 ; it may reach position @xmath93 or a lower one .",
    "here is a more substantial observation :    [ obs - next ] in a program transition @xmath195 , the value of @xmath196 in @xmath197 ( if defined ) is strictly smaller than the value of @xmath162 in @xmath26 .",
    "thus , we can use these vectors to construct an instance of strict sct . note that the descent is justified by the definition of next and by size - change graph @xmath198 .",
    "therefore , a ranking function built on the base of this descent can be statically verified to decrease , based on @xmath41 .",
    "[ def : r ] @xmath199 is an all - strict , fan - out free sct instance with cfg as in @xmath42 , where the variables for flow - point @xmath19 are the vectors @xmath169 , and the size - change graph @xmath200 for arc @xmath39 has arcs @xmath201 for all @xmath181 such that @xmath196 exists .",
    "clearly , @xmath199 is fan - out free .",
    "note that this implies that , given a multipath and a specific vector at its source , a unique thread can be followed from that vector until it either stops at the end of the multipath or reaches a vector with no outcoming arc .",
    "such a thread is a chain of vectors obtained by repeated application of @xmath202 . for an example , figure  [ fig - ex - rgraphs ] shows three size - change graphs of an instance @xmath42 and figure  [ fig - ex - rthread ] shows a single thread from an @xmath199-multipath . note that there is lexicographic descent at each step .    #",
    "1#2#3    a fan - out free sct instance .",
    "tfig - ex - rgraphs    ( 600,200)(0,60 ) ( 188,85)(120,138 ) ( 240,60)@xmath46 ( 197,189)x ( 197,147)y ( 197,105)z ( 221,195)(3,-2)55 ( 221,194)(3,-2)55 ( 221,153)(1,0)53 ( 221,152)(1,0)53 ( 287,189)x ( 287,147)y ( 287,105)z    ( 350,85)(120,138 ) ( 402,60)@xmath203 ( 359,189)x ( 359,147)y ( 359,105)z ( 383,195)(1,0)53 ( 383,153)(3,2)55 ( 383,111)(1,0)53 ( 449,189)x ( 449,147)y ( 449,105)z    ( 512,85)(120,138 ) ( 564,60)@xmath204 ( 521,189)x ( 521,147)y ( 521,105)z ( 545,111)(1,0)53 ( 545,110)(1,0)53 ( 545,195)(3,-2)55 ( 545,194)(3,-2)55 ( 545,153)(1,0)53 ( 611,189)x ( 611,147)y ( 611,105)z    a thread of vectors , corresponding to the call sequence 3212",
    ". the first position of each vector is at the bottom .",
    "the horizontal arrows show the corresponding size - change graph and the applicable case of definition  4.5 . tfig - ex - rthread    ( 1000,600)(0,0 ) ( 0 , 0)(100,100)x , y , z ( 0,100)(100,100)@xmath104    ( 100 , -20)(120,60 )    ( 220 , 0)(100,100)y , z ( 220,100)(100,100)@xmath104 ( 220,200)(100,100)x ( 220,300)(100,100)@xmath104    ( 320,-20)(120,60 )    ( 440 , 0)(100,100)x , z ( 440,100)(100,100)@xmath205 ( 440,200)(100,100)y ( 440,300)(100,100)@xmath104    ( 540,-20)(120,60 )    ( 660 , 0)(100,100)y ( 660,100)(100,100)@xmath104 ( 660,200)(100,100)x , z ( 660,300)(100,100)@xmath104    ( 760,-20)(120,60 )    ( 880 , 0)(100,100)x ( 880,100)(100,100)@xmath104 ( 880,200)(100,100)z ( 880,300)(100,100)@xmath104 ( 880,400)(100,100)y ( 880,500)(100,100)@xmath104    we now introduce some notation and concepts used later in analysing @xmath199 .",
    "let @xmath206 denote a @xmath42-multipath , and @xmath207 the corresponding @xmath199-multipath ( following the same cfg path ) .",
    "let @xmath208 denote a thread in @xmath207 , namely a sequence @xmath209 such that @xmath210 .",
    "the passage from @xmath211 to @xmath212 will be called _ a step _ and written compactly as @xmath213 .",
    "the @xmath93-band of @xmath208 is the sequence resulting from trimming all vectors in @xmath208 to their @xmath93-prefix , i.e. , the first @xmath93 positions .",
    "we say that @xmath208 is @xmath93-stable if for all steps @xmath214 in @xmath208 , no odd position @xmath215 is descending .",
    "we denote by @xmath216 the set of variables appearing in the @xmath93-prefix of @xmath162 .",
    "an illustration of case  2 in the proof of theorem  4.10 .",
    "tfig - case2    ( 1000,600)(-10,0 ) ( -100 , 100)(100,50)@xmath217 ( -100 , 200)(100,50)@xmath93 ( 0 , 0)(100,100 ) ( 0,100)(100,100 ) ( 0,200)(100,100 ) ( 0,300)(100,100 ) ( 0,400)(100,50)@xmath218    ( 120 , 20)(190,20 ) ( 180 , 20)(1,0)10 ( 120 , 80)(190,80 ) ( 180 , 80)(1,0)10 ( 120 , 150)(1,0)70 ( 150 , 150)@xmath219    ( 220 , 0)(100,100)@xmath220 ( 220,100)(100,100 ) ( 220,200)(100,100)@xmath221 ( 220,300)(100,100)@xmath104 ( 220,400)(100,50)@xmath222    ( 330,20)(650,20 ) ( 645,20)(1,0)10 ( 330,80)(650,80 ) ( 645,80)(1,0)10 ( 330,150)(650,150 ) ( 645,150)(1,0)10    ( 660 , 0)(100,100 ) ( 660,100)(100,100 ) ( 660,200)(100,100 ) ( 660,300)(100,100 ) ( 660,400)(100,50)@xmath223    ( 780 , 20)(850,20 ) ( 840 , 20)(1,0)10 ( 780 , 80)(850,80 ) ( 840 , 80)(1,0)10 ( 780 , 150)(1,0)70 ( 810 , 150)@xmath219    ( 880 , 0)(100,100)@xmath220 ( 880,100)(100,100 ) ( 880,200)(100,100)@xmath221 ( 880,300)(100,100)@xmath104 ( 880,400)(100,50)@xmath224    suppose that @xmath93 is even , and @xmath208 is an @xmath199-thread with a stable @xmath93-band . then none of the numeric ( even ) positions below @xmath93 changes along @xmath208 , while the last one ( position @xmath93 ) may decrease , but can not increase .",
    "straight - forward from definition of the @xmath202 relation and @xmath93-stability .    on the other hand , if the @xmath93-band is not stable in @xmath208 , then either position @xmath93 or a lower numeric position must be reset to @xmath104 once or more along @xmath208 .",
    "[ thm : r ] @xmath199 satisfies sct .",
    "let @xmath18 be the initial function of @xmath42 and let @xmath225 .",
    "we claim that in every @xmath199 multipath ( in particular , an infinite one ) starting at @xmath18 there is a complete thread starting at @xmath226 .",
    "since @xmath199 is strict , this means that every infinite multipath has an infinitely - descending thread , hence sct is satisfied .",
    "suppose to the contrary that there is a counter - example @xmath207 .",
    "in fact , let @xmath207 be a shortest counter - example",
    ". then @xmath207 ends in a graph @xmath227 and there is a thread @xmath208 leading from @xmath226 at the front of @xmath207 up to a node @xmath162 on the source side of @xmath227 such that @xmath196 is undefined .",
    "let us review the cases in which @xmath196 is undefined :    1 .",
    "the first descending position is @xmath93 and @xmath186 and @xmath229 .",
    "3 .   no position is descending and the vector ends with a 0 .",
    "we next undertake to derive a contradiction in each of these cases .",
    "[ [ case-1 . ] ] case 1 .",
    "+ + + + + + +    this case implies that there is no complete thread in @xmath230 ; indeed , when looking at the vectors of @xmath208 , we see that initially all the variables are in the lowest position , and all threads must stay there ( review the definition of @xmath231 ) ; by the definition of this case , none of them survives to the end of the multipath .    since @xmath42 is strongly connected , it is possible to complete @xmath230 by adding size - change graphs , if necessary , so that the multipath ends at @xmath18 .",
    "we thus obtain a cycle without any complete thread , which contradicts the sct property of @xmath42 ( repeat the cycle forever and obtain an infinite multipath without infinite descent ) .",
    "[ [ case-2 . ] ] case 2 .",
    "+ + + + + + +    @xmath232 , @xmath229 while for all odd @xmath233 , @xmath234 and there are only non - strict arcs between @xmath235 and @xmath236 .",
    "observe that @xmath237 can only reach 0 by being decreased repeatedly , from the last point where it had a value of @xmath104 down to zero ; this means that the @xmath93-band of @xmath208 is stable .    informally speaking",
    ", we can ignore the @xmath93-band and look at the vectors starting at the @xmath93th position , and there we will find a situation similar to case  1 .",
    "for this reasoning to be correct , it is necessary that the set of variables within the @xmath93-band be the same at the beginning and the end of the `` bad '' multipath .",
    "we will use a pigeon - hole argument to show that such a situation must occur .    consider the steps @xmath238 of @xmath208 where position @xmath217 is decremented . label each such step with its target flow - point ,",
    "say @xmath19 , and the subset @xmath239 .",
    "the value @xmath168 guarantees that some pair @xmath240 must occur twice . choose two positions @xmath241 that get the same label @xmath240 .",
    "then @xmath242 as well as @xmath243 are defined by ( n2 ) .",
    "therefore , @xmath244 has @xmath245 in position @xmath93 . in addition ,",
    "@xmath246 , that is , the set in position @xmath93 has no outgoing arcs in @xmath247 .",
    "now , consider the @xmath42-multipath @xmath248 , starting and ending at @xmath19 ( figure  [ fig - case2 ] ) .",
    "the set @xmath220 is carried by non - strict threads of @xmath107 unto itself , while no complete thread starts and ends within @xmath221 .",
    "conclusion : repeating this cycle infinitely many times , there will be no infinite descent , contradicting the termination of @xmath42 .",
    "[ [ case-3 . ] ] case 3 .",
    "+ + + + + + +    no position in @xmath162 is descending and the vector ends with a 0 .",
    "this case can be seen as a sub - case of case 2 , where @xmath220 includes all variables .",
    "[ thm - fof ] suppose that @xmath41 is a fan - out free , positive sct instance .",
    "let @xmath168 .",
    "there exists an indexed set @xmath120 , where @xmath249 for every @xmath14 , such that the function @xmath250 is a ranking function for @xmath42 .",
    "this ranking function can be effectively constructed given @xmath42 .    since @xmath199 is all - strict , fan - out free , and satisfies sct , theorem  [ thm - min ] applies . by constructing @xmath199 and computing its maximal thread preserver",
    ", we find the sets of vectors whose minima comprise the ranking function .",
    "practically , @xmath199 need not be constructed to its full doubly - exponential size ; see section  [ sec : fof - example ] .",
    "we note a fact that will prove useful in the sequel .",
    "suppose that we modify the smo into a partial order smo@xmath251 by defining sets of different cardinalities to be incomparable .",
    "we can still carry out our construction .",
    "the trick is simple : if we replace a set @xmath81 by the pair @xmath252 , the intended order is restored .",
    "an extra numeric position before a set - valued position @xmath161 is not actually needed , because it can be merged into the numeric position @xmath237 ( replacing @xmath253 with @xmath254 ; the upper bound @xmath104 changes into @xmath255 ) .",
    "the case of @xmath256 is different : here the prefix @xmath257 is not necessary at all , because in an infinite thread , the size @xmath257 must be eventually constant .      if the size of the ranking function ( more precisely , the expression for that function ) is of interest , the expression that results of the previous construction should be optimized by eliminating redundancies , as explained next .",
    "let @xmath258 . the relation @xmath259 holds if there is an index @xmath93 , such that for all @xmath233 , @xmath260 , while @xmath261 .",
    "[ obs : domination ] if @xmath259 then , regardless of the values of variables , the value of @xmath162 is lexicographically smaller than the value of @xmath262 .",
    "we say therefore that @xmath162 _ dominates _ @xmath262 .    clearly ,",
    "if there are dominated vectors in the ranking expression , they can be dropped . a set without dominated vectors",
    "is said to be _ in normal form_.    [ lem - n ! ] any set @xmath263 in normal form satisfies @xmath264 .",
    "observe that all first positions of vectors @xmath265 must contain sets of the same size @xmath266 .",
    "we prove the lemma by induction on @xmath267 . if @xmath268 then there is just one set and clearly @xmath269 . if @xmath270 there are at most @xmath271 different sets in the first position .",
    "given any choice @xmath220 for the first position , the number in the second position is unique ( by normality ) .",
    "if we choose from @xmath272 just the vectors beginning with @xmath220 and drop the first two positions , we obtain a normal set over @xmath267 variables . by the induction hypothesis ,",
    "its size is bounded by @xmath273 and the bound on @xmath274 readily follows .",
    "[ cor - fof ] every fan - out free , terminating sct instance has a ranking function of form @xmath275 with @xmath276 in normal form .",
    "in particular , @xmath277 .",
    "we can also simplify the form of the function  expressing it without the use of multisets .",
    "let @xmath278 be the set of @xmath158 vectors in which all odd positions are singletons . when working exclusively with such vectors , the multiset concept is redundant .",
    "one can define the value of a position holding @xmath279 as @xmath138 and consider the vectors to have values in @xmath280 .    for @xmath181 , a _ simplification _ of @xmath162",
    "is obtained as follows . for every odd position @xmath93 ,",
    "replace the set @xmath161 with a list of its elements ( if @xmath281 , there are different ways to do that , so there are many simplifications ) .",
    "insert @xmath282 between any pair of consecutive non - numerical positions , to obtain an element of @xmath278 . for @xmath263 ,",
    "let @xmath283 be the set of all simplifications of @xmath265 .",
    "suppose that @xmath284 and @xmath285 are normal . if @xmath286 , then also @xmath287 .",
    "let @xmath288 be the vector of minimal value ( under @xmath24 ) .",
    "consider @xmath162 ; the assumption @xmath286 implies that there is a vector @xmath289 such that @xmath290 .",
    "note that this is a lexicographic comparison .",
    "thus there is an index @xmath93 such that for all @xmath233 , @xmath291 , while @xmath292 .",
    "the equalities at positions @xmath233 mean that for all the sets in such positions , the elements of @xmath293 can be arranged to match elements of @xmath235 of equal value as they appear in @xmath294 .",
    "thus we build a simplification @xmath295 whose value is identical to that of @xmath294 up to position @xmath93 .",
    "if this position is numeric , then we can clearly complete the simplification and obtain @xmath296 .",
    "if position @xmath93 is a set , the multiset inequality @xmath292 means that , if the elements of both vectors are arranged in ascending order of value , the vector obtained from @xmath165 will be lexicographically smaller .",
    "observe that among all listings of the elements of a multiset , the ascending list _ is _ lexicographically smallest .",
    "therefore , the elements of @xmath161 must appear in @xmath294 in exactly that order ( as it is minimum in @xmath297 ) .",
    "now , arranging the elements of @xmath165 in corresponding order , we obtain a simplification @xmath298 that is smaller than @xmath299 .",
    "thus some element of @xmath300 has smaller value than @xmath299 , which shows that @xmath301 is definitely smaller than @xmath299 .",
    "[ thm - fofsimplified ] every fan - out free , positive sct instance @xmath42 has a ranking function of form @xmath250 with @xmath302 and @xmath277 .",
    "we start with a ranking function as claimed in theorem  [ thm - fof ] and replace every set @xmath121 by its simplification ; then we remove dominated vectors to obtain a normal set .      for completeness ,",
    "let us explain how ranking functions of the kind constructed in this paper should be adjusted when the control - flow graph is not strongly connected .",
    "suppose that the cfg of @xmath41 consists of several strongly connected components ( sccs ) .",
    "let @xmath303 be a reverse topological ordering of the components . if the size - change graphs in every component are fan - out ( or fan - in ) free , our constructions yields a function @xmath74 that decreases in every transition within a component ( note that we construct the function separately for each component , but it can be considered as one function ; no conflicts arise because every flow - point @xmath19 belongs to a unique component ) .",
    "next , define @xmath304 for any state @xmath305 , where @xmath306 , by prepending @xmath93 to @xmath74 ( this gives a vector with an extra numeric position at its beginning ) .",
    "it is easy to see that @xmath307 is a ranking function for @xmath41 .",
    "next , we carry out the construction for a very small example .",
    "small , but hopefully illustrative .",
    "in fact , the example will illustrate how the construction can be made simpler and much more efficient than a literal implementation of the proof of theorem  [ thm - fof ] . after explaining the example",
    ", we will also formulate the simplification in general terms .",
    "our example is an instance with @xmath308 , @xmath309 and @xmath310 , where @xmath311 we have @xmath312 .",
    "we will not construct @xmath199 in full , which would have meant ( if we followed definition  [ def : r ] literally ) creating an instance with @xmath313 variables .",
    "instead , we note that according to the proof of theorem  [ thm : r ] , it suffices to find the vectors reachable from @xmath314 by applications of @xmath202 ; this will be a smaller sub - instance of @xmath199 which satisfies the theorem .",
    "so , the actual procedure is as follows : we initialize a collection @xmath81 of vectors to @xmath315 .",
    "we repeatedly compute , for each vector @xmath316 , and @xmath317 , the result of @xmath318 , adding it to @xmath81 , until @xmath81 does not grow any further .",
    "we describe the result of this process as a graph , where the arcs out of @xmath162 describe the applications of @xmath318 in the construction :    @xmath319_{g_2 }   \\ar[r]^{g_1 } &       { \\langle \\{{{\\tt y}}\\ } , 4 , \\{{{\\tt x}}\\ } , 4\\rangle }   \\ar@(ul , ur)[]^{g_1 } \\ar@/_/[d]|{g_2 } \\\\       { \\langle \\{{{\\tt x}}\\ } , 4 , \\{{{\\tt y}}\\ } , 4\\rangle }   \\ar@(d , l)[]^{g_2 }   \\ar@/_/[ru]^{g_1 } &       { \\langle \\{{{\\tt x}}\\ } , 3 , \\{{{\\tt y}}\\ } , 4\\rangle }   \\ar@/_/[u]_{g_1,g_2 } \\\\ } \\ ] ] the set of all four vectors is a thread preserver , as each of them has an outgoing arc both under @xmath46 and under @xmath203 . we conclude that @xmath320 is a ranking function . removing dominated vectors",
    ", we reduce the expression to @xmath321    the fact that the set of vectors constructed , @xmath81 , constituted a thread preserver , is not an incident .",
    "we next demonstrate this in general .",
    "this means that the way of computing @xmath81 not only economizes on the size of @xmath199 , it also obviates the need for an mtp computation .",
    "let @xmath322 be the closure of the set @xmath323 , where @xmath225 , under the operators @xmath191 for all @xmath324 .",
    "this set is a thread preserver in @xmath199 .    by the definition of @xmath81 ,",
    "if @xmath173 is in @xmath81 , this is because there exists a sequence @xmath325 such that for all @xmath93 , @xmath326 for an appropriate @xmath49 .",
    "thus , in the @xmath199-multipath @xmath327 , vector @xmath162 lies on a thread @xmath208 emanating from @xmath226 .",
    "the crucial observation now is that , _ since @xmath199 is fan - out free , there is just one such thread_. this fact was not used in the proof of theorem  [ thm : r ] , but it means that we can deduce from the proof that this particular thread @xmath208 can be continued in any @xmath199-multipath extending @xmath51 , say @xmath328 .",
    "thus , for any applicable @xmath329 , @xmath330 is defined  and has to be in @xmath81 .",
    "we conclude that @xmath81 has the property of a thread preserver .",
    "this technique can be pushed a little further , as shows the next theorem .",
    "considering @xmath81 as the node set of a directed graph @xmath331 ( with arcs @xmath332 ) , let @xmath107 be a sink scc of this graph .",
    "then @xmath107 is a thread preserver .",
    "the thread - preservation follows directly from the definition of @xmath81 plus the fact that no arc leaves a sink scc .",
    "thus , a standard scc algorithm ( which runs in linear time  @xcite ) suffices for obtaining a thread preserver , which can be smaller than the mtp , since it is actually a _ minimal _ thread preserver ( as the interested reader may verify ) . in the last example , this tp consists of the two vectors that wound up in the final ranking function .",
    "it is not true in general , however , that the scc will be a normal set ( free of dominated vectors ) , as was the case with this example .",
    "a counter - example is given by @xmath310 , where @xmath333    [ [ an - additional - implementation - tip ] ] an additional implementation tip + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the value of @xmath104 used in theorem  [ thm - fof ] , @xmath334 , becomes unwieldy if @xmath20 is large .",
    "in fact , it is an overestimate .",
    "even theoretically , the range 0 to @xmath104 will never be fully used ( the interested reader is invited to prove it ) , and in most cases a much smaller range will be needed . the right way to implement the numeric positions is by inverting the interval @xmath335 $ ] , so that they are initially 0 and increasing , instead of starting at @xmath104 and decreasing . for preserving the natural order on numbers , invert again once the true range necessary for an instance has thus been discovered .",
    "[ [ other - optimizations ] ] other optimizations + + + + + + + + + + + + + + + + + + +    the reader may have noticed that the function : @xmath336 can be simplified to @xmath337 while remaining a ranking function .",
    "we have not generalized this observation or formulated a procedure to find such savings .",
    "the fan - in free class of sct instances is symmetric in nature to the fan - out free class .",
    "this symmetry has been used in  @xcite where it was also observed that transposing graphs , which clearly makes fan - in into fan - out ( and vice versa ) , also has to do with exchanging * min*-descent with * max*-descent ; this is illustrated in the simple results cited in section  [ sec - strict ] .    in this section , we show how to use transposition for applying the construction and results of section  [ sec - fof ] to fan - in free graphs .",
    "the arguments here are somewhat subtler than those of section  [ sec - strict ] , since they involve the semantic connection between @xmath42 and @xmath199 .",
    "to do this precisely , we have to review some of our concepts and results with an eye to more generality .",
    "we begin by noting that the sct condition ( section  [ sec : sct ] ) is completely independent of the semantic interpretation of size - change graphs , involving the order relation on @xmath12 , to which we now assign the notation @xmath338 .",
    "this order is relevant however for defining the transition system @xmath52 ( definition  [ def - transitionsystem ] ) , so for clarity we may notate it as @xmath339 $ ] .",
    "note that the assumption that the order is well - founded is only necessary for justifying the conclusion regarding termination of @xmath52 .",
    "in particular , the construction of @xmath199 is , obviously , completely syntactic , while the justification of its size - change arcs can be put in more general terms as follows .    for a given order @xmath338 , let @xmath340",
    "$ ] denote the simple multiset partial order ( as described in section  [ smodag ] ) parameterized by the order @xmath338 for set elements .",
    "for given orders @xmath338 and @xmath341 ( with carrier sets @xmath12 and @xmath335 $ ] , respectively ) , let @xmath342 denote the set of tuples @xmath343 of even length , where every odd position is a non - empty multiset over @xmath12 , together containing @xmath20 elements ; and every even position is an integer in @xmath335 $ ] . the lexicographic partial order on @xmath342 , obtained by ordering odd positions with",
    "@xmath340 $ ] and even positions with @xmath341 , is denoted by @xmath344 .    the following is a parametrized rereading of observation  [ obs - next ] :    [ clm - r ] for a size - change graph @xmath31 and a vector @xmath162 , @xmath345 \\;\\longrightarrow\\ ; \\sigma'({\\mbox{\\rm\\upshape next}}({\\mathbf{v } } , g ) ) \\;{{\\le_{{\\mathchoice{\\mbox{\\it val}}{\\mbox{\\it val}}{\\mbox{\\scriptsize\\it val}}{\\mbox{\\scriptsize\\it val } } } } \\ ; \\otimes^n \\le_b}}\\ ; \\sigma({\\mathbf{v } } ) \\,.\\ ] ]    this shows that the interpretation of @xmath199 as size - change graphs works in the general setting .",
    "we now move to transposition . in section  [ sec - strict ] , we observed that the sct property of @xmath42 is preserved under transposition .",
    "but what do the transposed graphs describe ?",
    "the natural answer is given by the equation @xmath346 = ( t_{\\mathcal g}[\\le_{{\\mathchoice{\\mbox{\\it val}}{\\mbox{\\it val}}{\\mbox{\\scriptsize\\it val}}{\\mbox{\\scriptsize\\it val}}}}])^{t}\\ ] ] ( a transposed relation is defined in the natural way ; @xmath347 is the reverse order relation , @xmath348 ) .    here is a useful lemma concerning transposition .",
    "[ lem : translex ] @xmath349 .",
    "we leave its proof to the reader ; note that using the partial version smo@xmath251 helps to avoid the asymmetric definition of smo for sets of different size .",
    "[ thm - fif ] let @xmath41 be fan - in free , positive sct instance , and let @xmath350 .",
    "there exists an indexed set @xmath120 , where @xmath351 for every @xmath14 , such that the function @xmath352 is a ranking function for @xmath42 .",
    "this ranking function can be effectively constructed given @xmath42 .",
    "observe that this is a version of theorem  [ thm - fof ] , with @xmath353 changed into @xmath354 ( this will be justified shortly ) and @xmath104 multiplied by @xmath20 to compensate for the use of smo@xmath251 instead of smo ( see section  [ smodag ] ) . now , we describe the construction of @xmath11 .",
    "given @xmath42 , construct @xmath147 ; note that will be fan - out free .",
    "thus @xmath199 can be constructed from it as in the last section , and it is fan - out free and strict . since the interpretation of @xmath147 uses the ordering @xmath355 , the semantics of @xmath199",
    "is given by a transition system @xmath356.\\ ] ] now , @xmath357 , is strict , fan - in free , and interpreted under the order @xmath358 .    since @xmath199 satisfies sct ( as proved in the last section ) , so does @xmath357 , and by theorem  [ thm - max ] it has a ranking function @xmath11 of the form stated in the current theorem .",
    "this function decreases under the ordering @xmath359 .    since by lemma  [ lem : translex ] , @xmath360",
    ", we find that @xmath11 descends under the usual ordering of @xmath158 , except that the numeric positions are ordered in reverse ( @xmath361 instead of @xmath341 ) .",
    "but this can be easily fixed by exchanging every value @xmath362 by @xmath363 , so that descent in @xmath364 is obtained .",
    "the simplifications considered in the previous section also apply here .",
    "[ thm - fifsimplified ] every fan - in free , positive sct instance has a ranking function of form @xmath352 with @xmath302 and @xmath277 .",
    "our upper bound on the size of the ranking functions is exponential ; more precisely , up to @xmath365 vectors under the * min * or * max * sign , for every flow - point .",
    "what is the true complexity ? in this section we provide ( mostly ) explicit lower bounds , that is , lower bounds on the  size \" of _ any _ ranking function for a specific family of sct instances . in order to prove such a result ,",
    "it is necessary to make assumptions on the form of the ranking function .",
    "we progress through three types of ranking functions that generate vectors of variables and constants , as our constructions do .",
    "the first type precludes the use of multisets , the second allows them with a restriction , and the third is the most general .",
    "all our examples are for a cfg with a single node @xmath19 .",
    "we consider a class of ranking functions that can be described by assigning an element @xmath166 to any total order @xmath366 on @xmath17 , such that if the values of variables in state @xmath25 satisfy @xmath208 , then @xmath367 is given by @xmath162 ( we can ignore the value of the function in the case that some variables tie ) . the value of @xmath104 is left unspecified .",
    "note that the constructions in this paper are of this kind , since if the order of variable values is known , the lexicographic or multiset minima and maxima can be deduced .",
    "we call such ranking functions vso ( for vectors selected by order ) .",
    "let @xmath368 be a state , and @xmath369 an @xmath20-element permutation .",
    "we say that a state @xmath25 has order @xmath370 whenever @xmath371 for all @xmath372 .",
    "if the values of variables in @xmath25 are distinct , @xmath370 is unique and we denote it by @xmath373 .",
    "let @xmath73 ( or @xmath74 ) be a function over states with co - domain @xmath158 .",
    "such a function is called a _ vso function _ if there is , for each @xmath19 , a function @xmath374 such that , for all @xmath368 where the values of all variables are distinct , we have @xmath375 ( recall that @xmath376 is the value of vector @xmath162 in state @xmath25 ) .",
    "we knowingly disregard the states where variable values are not distinct .",
    "the lower bounds in this section apply to the number of distinct vectors in the image set of @xmath377 , i.e. to the size of the set @xmath378 .",
    "thus they apply to the number of vectors under the @xmath379 or @xmath380 operators in functions expressed as in theorems  [ thm - fof ] and  [ thm - fif ] .",
    "all our constructions are fan - out free instances , and the lower bounds are very close to the upper bounds we had for this class .",
    "we believe that in a certain sense , a ranking function generated by a general sct - based construction ( i.e. , not using any other information , say about @xmath12 ) _ has _ to be a vso function ( or representable as one ) since all that is assumed of the data @xmath12 is that they are ordered , so decisions can only be based on order ; and variable values can be put into tuples or multisets , but not otherwise used in expressions .",
    "we have not formalized this intuition , however .",
    "the set @xmath17 is written in the following examples as @xmath381 ( so there are actually @xmath382 variables ) .",
    "states may be written in the form @xmath383 $ ] . in our examples , values are non - negative integers , and @xmath384 is always largest .",
    "we also assume that all variable values are different .",
    "therefore , the ordering of variable values in a state will be described by a permutation on @xmath385 $ ] , reflecting the ordering among @xmath386 .",
    "we denote by @xmath387 the identity on @xmath385 $ ] and by @xmath388 the permutation exchanging @xmath93 and @xmath389 .",
    "composition of permutations is defined by the rule @xmath390 . for a state @xmath25 ,",
    "@xmath391 denote the result of the action of @xmath370 on the state @xmath25 , defined by @xmath392 .",
    "we observed ( in section  [ sec - fof ] ) that it is possible to restrict all our constructions to vectors which do not employ multisets ( technically , all odd positions are singletons ) .",
    "a ranking function of this type is _",
    "simple_. we begin by proving a lower bound for simple ranking functions .    [ thm - lb1 ] let @xmath393 .",
    "there is a fan - out free positive sct instance @xmath42 with a single flow - point , @xmath382 variables and @xmath20 size - change graphs such that any simple vso ranking function @xmath394 for @xmath42 satisfies @xmath395 .",
    "observe that this lower bound matches almost exactly the upper bound of theorem  [ thm - fofsimplified ] .",
    "the proof of the theorem breaks into the following parts : ( 1 ) construction of the sct instance ; ( 2 ) proof that sct is satisfied ; ( 3 ) proof of the lower bound .",
    "= let @xmath396 , where for @xmath397 , @xmath398 ( see figure  [ fig - calg ] for an illustration . )",
    "a partial view of two graphs from construction .1 and one from const .  .2.tfig - calg    ( 300,240)(100,-55 ) ( 85,-20)(120,205 ) ( 95,150)@xmath399 ( 95,110)@xmath400 ( 95 , 70)@xmath401 ( 95 , 30)@xmath402 ( 95 , -10)@xmath403    ( 117,33)(1,0)50 ( 117 , -7)(1,0)50    ( 117,153)(1,0)50 ( 117,152)(1,0)50    ( 117,73)(4,3)50    ( 117,113)(4,-3)50    ( 175,150)@xmath399 ( 175,110)@xmath400 ( 175 , 70)@xmath401 ( 175 , 30)@xmath402 ( 175 , -10)@xmath403    ( 240,-20)(120,205 ) ( 250,150)@xmath399 ( 250,110)@xmath400 ( 250 , 70)@xmath401 ( 250 , 30)@xmath402 ( 250 , -10)@xmath403    ( 272,115)(1,0)50 ( 272,75)(1,0)50 ( 272,35)(1,0)50    ( 272,-7)(1,0)50 ( 272,-8)(1,0)50 ( 335,150)@xmath399 ( 335,110)@xmath400 ( 335 , 70)@xmath401 ( 335 , 30)@xmath402 ( 335 , -10)@xmath403    ( 120,-45)@xmath46 ( 275,-45)@xmath404    ( 200,240)(100,-55 ) ( 85,-20)(120,205 ) ( 95,150)@xmath399 ( 95,110)@xmath400 ( 95 , 70)@xmath405 ( 95 , 30)@xmath406 ( 95 , -10)@xmath403    ( 117,33)(1,0)50 ( 117,32)(1,0)50 ( 117,-7)(4,3)50 ( 117,-8)(4,3)50    ( 117,73)(1,0)50    ( 117,113)(1,0)50    ( 175,150)@xmath399 ( 175,110)@xmath400 ( 175 , 70)@xmath405 ( 175 , 30)@xmath406 ( 175 , -10)@xmath403 ( 120,-45)@xmath407    observe that any contiguous sequence of the graphs @xmath408 represents ( or `` effects '' ) some permutation @xmath370 on @xmath409 , in the sense that every @xmath410 is carried by a ( non - descending ) thread to @xmath411 . henceforth , we call this `` a permutation multipath '' @xmath412 . note that for every permutation @xmath369 , there is a multipath effecting it , less than @xmath413 long , according to well - known ways of composing any permutation of exchanges .",
    "@xmath42 satisfies sct .    in any infinite @xmath42-multipath that does not contain @xmath404 ( or where @xmath404 occurs a finite number of times )",
    ", there is infinite descent at @xmath384 . in a multipath that includes an infinity of @xmath404 s , the thread at 0",
    "is lost but each of @xmath386 begins a separate infinite thread . at each occurrence of @xmath404 , one of these threads",
    "descends , so there is at least one thread of infinite descent .    [ lem-0last ] let @xmath394 be a simple ranking function for @xmath42 and @xmath414 for some permutation @xmath370 .",
    "then @xmath384 is the last variable that appears in @xmath162 .",
    "consider a state @xmath25 with @xmath415 , so @xmath416 .",
    "let @xmath417 .",
    "let @xmath418 be identical to @xmath25 except that @xmath410 decreased and @xmath384 increased , while the relative order of variables remains @xmath370 , so @xmath419 is also given by @xmath162 .",
    "note that @xmath420 .",
    "thus , we must have @xmath421 , so @xmath410 must appear in @xmath162 before @xmath384 . since this conclusion holds for every @xmath417 , it follows that @xmath384 must be last .    for any @xmath162 , let @xmath422 denote the permutation that describes the placement of variables in @xmath162 ( excluding @xmath384 which we know to be last ) .",
    "that is , @xmath423 indicates that the @xmath93th variable occuring in @xmath162 is @xmath424 . for a permutation @xmath370",
    ", we use the following abbreviations : @xmath425 is @xmath426 ; @xmath427 is @xmath428 .",
    "[ lem - lb1 ] let @xmath394 be a simple ranking function for @xmath42 and @xmath429",
    ". then @xmath430 .",
    "moreover , vectors @xmath431 and @xmath425 have the same constants in the even positions below position @xmath432 .",
    "assume the contrary .",
    "consider the first position that violates the lemma .",
    "suppose first that it is an odd position @xmath433 , containing a variable .",
    "thus , letting @xmath434 and @xmath435 , we have @xmath436 .",
    "assume for the rest of the proof that @xmath437 ( otherwise , exchange @xmath208 and @xmath370 ) .",
    "let @xmath438 $ ] .",
    "note that @xmath415 .",
    "thus , @xmath439 . let @xmath440 $ ] .",
    "note that @xmath441 .",
    "thys , @xmath442",
    ". it should be easy to see that @xmath443 .    for all positions up to @xmath433 , the contents of @xmath367 and @xmath419 are the same . in position @xmath433 , @xmath419 has @xmath444 , while @xmath367 has @xmath445 .",
    "now , by our assumption , @xmath437 , so @xmath446 .",
    "we conclude that lexicographic descent fails , which contradicts @xmath394 being a ranking function .",
    "next , assume that the first position that violates the lemma is an even position @xmath447 , containing a constant .",
    "the refutation is very similar .",
    "the proof of theorem  [ thm - lb1 ] is now concluded since the last lemma implies that a distinct vector corresponds to every permutation .",
    "now we move to ranking functions with multisets of any size . in section",
    "[ sec - ms ] we described forms of multiset ordering ; our ranking functions are constructed so that the change in every multiset value across a transition alway agrees with what we called _ the simple multiset order _ or smo .",
    "this means that the relation between multisets of the same size must be expressed by a 11 correspondence of the elements .",
    "this subsection gives a lower bound under this restriction .",
    "[ thm - lb2 ] let @xmath393 .",
    "there is a fan - out free positive sct instance @xmath448 with a single flow - point , @xmath382 variables and @xmath449 size - change graphs , such that any smo - descending vso ranking function @xmath394 for @xmath448 satisfies @xmath395 .",
    "observe that this lower bound , too , closely matches the upper bound of theorem  [ thm - fof ] , though a larger class of functions is considered .",
    "the proof proceeds through the same stages as the last one .",
    "= let @xmath450 , where the @xmath451 graphs are identical to those of construction .1 , namely @xmath452 while for @xmath453 , @xmath454    thus , @xmath448 contains @xmath42 ( note that @xmath455 is the same as @xmath404 of @xmath42 ) .",
    "@xmath448 satisfies sct .    in any infinite @xmath448-multipath that does not contain @xmath456-graphs ( or contains a finite number of them )",
    ", there is infinite descent at @xmath384 . in a multipath that includes an infinity of @xmath456 s",
    ", the set @xmath457 descends infinitely in dual multiset order , ensuring termination ( the restriction to smo in theorem  [ thm - lb2 ] only applies to our ranking function , not to this proof ! ) .",
    "let @xmath394 be a smo - descending vso ranking function for @xmath448 and let @xmath458 for some permutation @xmath370 .",
    "then @xmath384 only appears in @xmath425 s last position .    essentially the same as for lemma  [ lem-0last ] .",
    "note that since @xmath384 increased from @xmath25 to @xmath418 , we can not obtain simple multiset descent in any set of variables that includes @xmath384 .",
    "therefore , @xmath410 must appear strictly before @xmath384 , not even in the same set .",
    "let @xmath394 , @xmath370 and @xmath425 as above .",
    "then every odd position of @xmath425 is a singleton .",
    "the proof is by contradiction , as in lemma  [ lem - lb1 ] .",
    "consider the first position that violates the lemma for some @xmath459 .",
    "suppose that it is position @xmath433 .",
    "let @xmath88 be this element of @xmath425 , that is , the @xmath93th set - valued element .",
    "let @xmath460 be the variable in @xmath88 such that @xmath461 is smallest .",
    "let @xmath462 $ ] .",
    "note that @xmath415 .",
    "thus , @xmath439 . let @xmath463 $ ] . note that @xmath464 , and that @xmath465 .",
    "let @xmath466.\\ ] ] note that @xmath467 , and @xmath468 is @xmath387 .",
    "let @xmath469 $ ] , so that @xmath470 .",
    "we have @xmath471 again .    for all positions up to @xmath433 , the variables and constants in @xmath472 have at least their value as in @xmath367 . in position @xmath433",
    ", we have a set that includes the variable @xmath460 , and , if @xmath473 , also other variables of greater indices . in @xmath474 ,",
    "those other variables have values larger than in @xmath25 .",
    "thus , if lexicographic descent ( under smo ) is to be maintained , we must conclude that @xmath475 .",
    "let @xmath394 be a restricted ranking function for @xmath448 and let @xmath476 .",
    "let @xmath458 , and likewise @xmath477 . then @xmath430 .",
    "in addition , vectors @xmath478 and @xmath479 have the same constants in the even positions before position @xmath432 .",
    "given the last lemma , the situation is identical to that in lemma  [ lem - lb1 ] and the same proof holds .    the proof of theorem  [ thm - lb2 ] is now concluded since the lemma implies that a distinct vector corresponds to every permutation .",
    "we now extend the allowable range of ranking functions further by allowing a stronger type of multiset ordering to be used .",
    "since our example consists of fan - out free graphs , it is easy to conclude that among the two orders described in section  [ sec - ms ] , it is _ dual multiset order _ ( dmo ) which is promising to be useful .",
    "so , we consider vso ranking functions in which multisets are compared by dmo .",
    "[ thm - lb3 ] there is a fan - out free positive sct instance @xmath480 with a single flow - point , @xmath481 variables and @xmath382 size - change graphs , such that any vso ranking function @xmath394 for @xmath480 ( with dmo descent ) must use at least @xmath130 different vectors .    a partial view of two graphs from construction .3.tfig - calk    ( 200,240)(100,-55 ) ( 85,-20)(120,205 ) ( 95,150)@xmath399 ( 95,110)@xmath400 ( 95 , 70)@xmath482 ( 95 , 30)@xmath483 ( 95 , -10)@xmath484    ( 85,130)(205,130 ) ( 85 , 50)(205 , 50 )    ( 115,153)(1,0)50 ( 115,152)(1,0)50 ( 115,33)(1,0)50 ( 115,-7)(1,0)50    ( 115,73)(4,3)50 ( 115,113)(1,0)50    ( 175,150)@xmath399 ( 175,110)@xmath400 ( 175 , 70)@xmath482 ( 175 , 30)@xmath403 ( 175 , -10)@xmath485 ( 120,-45)@xmath486    ( 200,240)(100,-55 ) ( 85,-20)(120,205 ) ( 95,150)@xmath399 ( 95,110)@xmath400 ( 95 , 70)@xmath482 ( 95 , 30)@xmath483 ( 95 , -10)@xmath484    ( 85,130)(205,130 ) ( 85 , 50)(205 , 50 )    ( 115,73)(1,0)50 ( 115,72)(1,0)50 ( 115,113)(4,-3)50 ( 115,112)(4,-3)50 ( 115,33)(1,0)50 ( 115,-7)(1,0)50    ( 175,150)@xmath399 ( 175,110)@xmath400 ( 175 , 70)@xmath482 ( 175 , 30)@xmath403 ( 175 , -10)@xmath485 ( 120,-45)@xmath487      = the variables in this example are named @xmath488 and @xmath489 .",
    "let @xmath490 , where the @xmath451 graphs are permutation graphs operating on pairs @xmath491 : @xmath492 graphs @xmath486 , @xmath487 operate specially on the first pair : @xmath493    @xmath480 satisfies sct .",
    "variable @xmath384 guarantees descent , except for multipaths that contain @xmath487 .",
    "it suffices to prove that for each such finite multipath @xmath494 , @xmath495 includes an infinitely - descending thread . note that @xmath51 has this property if and only if @xmath496 does .",
    "now , @xmath497 has at least two descending threads that end at @xmath498 , beginning at @xmath410 and @xmath499 for some @xmath93 .",
    "if @xmath500 , the thread from @xmath498 is multiplied infinitely in @xmath501 . if @xmath502 , observe that the effect of @xmath497 on the pairs is to permute them , so there is a @xmath2 ( the order of the permutation ) such that @xmath503 has a @xmath498 to @xmath498 thread as in the simple case , and we have the same conclusion regarding @xmath501 .    in proving the lower bound on the number of vectors we use tools similar to those of the previous proofs .",
    "now , however , we restrict the orderings of variables on which we focus in the proof , so that the pairs are kept in increasing order , i.e. , @xmath504 and , as usual , @xmath384 is larger than the rest .",
    "the relative order among the elements of each pair may change .",
    "the ordering of pairs is described by a function @xmath505 that indicates , for every pair , which variable has the smaller value .",
    "let @xmath506 be the set of such functions .",
    "thus the order of values in a given state is described by an element of @xmath506 , and we use @xmath506 as the domain of @xmath377 .",
    "the basic properties of a ranking function @xmath394 for this instance follow the pattern of previous examples , so we omit a detailed proof :    1 .",
    "@xmath384 appears last .",
    "the constants in the even positions below @xmath432 coincide for all vectors returned by @xmath377 .",
    "3 .   for every odd position ,",
    "the size of the set is the same in all vectors returned by @xmath377 .",
    "the property specific to this construction is as follows .",
    "let @xmath507 .",
    "let @xmath508 . then from every pair @xmath509 ,",
    "only the element selected by @xmath510 , that is , the variable of smaller value , is present in @xmath511 .",
    "the proof is by contradiction , as usual .",
    "consider the first position that violates the lemma .",
    "suppose that it is an odd position @xmath433 , containing a set @xmath88 .",
    "_ case 1 _ : @xmath512 , but @xmath513 .",
    "suppose first , for simplicity , that @xmath514 .",
    "consider a state @xmath25 described by @xmath510 , and a state @xmath418 where the value of @xmath515 is greater than its value in @xmath25 , the value of @xmath498 is smaller than in @xmath25 , other values do not change , and neither does the relative order among all variables .",
    "thus , the order at @xmath418 is also given by @xmath510 .",
    "note that @xmath516 .",
    "the multiset of values of @xmath88 increases from @xmath25 to @xmath418 , unless @xmath88 includes @xmath498 .",
    "so , we conclude that both @xmath515 and @xmath498 are in @xmath88 .",
    "now , consider @xmath486 ; we can easily have a transition that increases the multiset value of @xmath88 and consequently a lexicographic increase in the value of @xmath394 .",
    "the case where @xmath517 is proved by the same argument , using @xmath518 ( here @xmath519 is a multipath that exchanges the pair @xmath520 with @xmath521 ) .",
    "_ case 2 _ : @xmath88 includes @xmath522 , while @xmath523 .",
    "again , for simplicity , assume @xmath514 ( otherwise use @xmath519 as above ) .",
    "consider a state @xmath25 described by @xmath510 , and a state @xmath418 where the value of @xmath498 is greater than its value in @xmath25 , other values ( except for @xmath384 ) do not change , and neither does the order .",
    "this agrees with @xmath487 .",
    "now , @xmath524 ; the multiset of values of @xmath88 increases from @xmath25 to @xmath418 , a contradiction to correctness of @xmath394 .",
    "the proof of theorem  [ thm - lb3 ] is now concluded since the lemma implies that a distinct vector corresponds to each of the @xmath130 orderings in @xmath506 .",
    "remark 1 : @xmath130 is tight for the example ; a possible ranking function for @xmath480 is one that returns the minimum over a set of vectors , all of length 3 , constructed as follows . ] : the first position contains a set of @xmath20 variables  one from every pair .",
    "all @xmath130 such sets are present . for a vector that begins with set @xmath81 , the next position contains the number of @xmath38 s in @xmath81 .",
    "the third position is @xmath525 .",
    "proof : to prove lexicographic descent , the non - trivial case is a transition that does not decrease the minimum among the multiset values in the first position ( clearly , it never increases ) .",
    "suppose that in such a transition , the old minimum vector was @xmath526 and the new one is @xmath527 . if @xmath528 , we have descent .",
    "so , assume @xmath529 , and consider what transition was taken .    1 .",
    "if it is @xmath486 , @xmath221 can only differ from @xmath220 if the minimum among @xmath530 moved from @xmath498 to @xmath515 ( the new value of @xmath498 being at least as large ) .",
    "but then the number of @xmath38 s in @xmath221 is smaller .",
    "if @xmath221 and @xmath220 are the same , we have lexicographic descent because @xmath384 decreases .",
    "2 .   if it is @xmath487 , @xmath221 must differ in value from @xmath220 .",
    "in fact , there is dual multiset descent in @xmath530 .",
    "if it is @xmath49 , given that the multiset does not decrease , @xmath221 has to be the same set as @xmath220 .",
    "so @xmath531 , and @xmath384 decreases .",
    "remark 2 : the lower bound dropped from @xmath532 to @xmath533 .",
    "what is the true complexity ?",
    "it s an intriguing possibility that the use of multisets ( beyond smo ) might decrease the ranking - function complexity ( for a single flow - point ) to @xmath534 .      a `` free form '' ranking function is described by a program ; consider , for instance , a program that sorts the variables and outputs the sorted list",
    ". the size of a program expressing this function can be much smaller than the number of vectors in its image ( @xmath365 ) .",
    "giving an explicit lower bound on the size of general programs seems quite hard .",
    "instead , @xcite argues that polynomial ranking functions are very unlikely to exist , under standard complexity - theoretic assumptions .",
    "this is shown for all - strict sct , using a proof that the decision problem ( does an all - strict sct instance terminate ? ) is pspace - hard .",
    "we note that the decision problems for fan - in free ( or fan - out free ) sct are also pspace - hard  ( @xcite gives the proof for fan - in free graphs and the fan - out free case follows easily ) .",
    "thus , the same complexity - theoretic conclusion applies to these sub - problems as well .",
    "the fact that _ existence _ of a global ranking function follows from a termination proof of the local type is immediate from the fact that every terminating program has a global ranking function .",
    "however what can be deduced from the form or number of local ranking functions on the form or complexity of a global one is a difficult question .",
    "a recent paper by blass and gurevich  @xcite settles the question of the _ ordinal height _ of the global ranking function .    1 .",
    "consider any transitive relation @xmath272 ( in our setting , this will be the transitive closure of the transition relation of the subject program , or the sct transition system as described in definition  [ def - transitionsystem ] ) .",
    "the goal of the `` termination proof '' is to establish that @xmath272 is well - founded .",
    "the goal is achieved by describing a finite set @xmath535 of well - founded relations such that @xmath536 .",
    "3 .   blass and gurevich give a general upper bound on the ordinal height @xmath274 of @xmath272 in terms of the ordinals @xmath537 .    in our setting , the covering relations @xmath538 will include two types of relations :    1 .   for all pairs @xmath539 of distinct flow - points , there is a relation that includes all pairs of states @xmath540 .",
    "this relation is well - founded because there are actually no chains in it of length greater than one .",
    "removing these parts from @xmath272 leaves only the part that describes cycles , i.e. , pairs @xmath541 .",
    "2 .   the second group of relations @xmath538 covers all cycles .    obviously",
    ", the latter group is the interesting one for termination proofs as well as for the ordinal - height question , and to simplify the present discussion , we can restrict our attention to the case @xmath542 , so that only the second kind is left .    in order to get the best bound out of the blass - gurevich theorem",
    ", we want to cover @xmath272 in the most economical way .",
    "to this end we use the following theorem , a rewording of  ( * ? ? ?",
    "* corollary  1 ) .",
    "size - change graph @xmath543 over parameters @xmath386 satisfies sct if and only if @xmath544    simply put , this means that the set of @xmath20 relations @xmath545 covers the transition relation of @xmath31 .",
    "therefore , the blass - gurevich result applies with exactly @xmath20 relations @xmath538 , all isomorphic to @xmath12 . in this simple case ,",
    "blass and gurevich s bound becomes @xmath546 , where @xmath510 is the ordinal height of @xmath12 ( e.g. , @xmath0 when @xmath12 is the natural numbers , the most usual case ) .",
    "our explicit constructions match this bound , at least for typical domains .",
    "consider the construction where the range of the ranking function is described by vectors of length @xmath432 , alternating parameters and integers bounded by @xmath104 .",
    "the order type of this range is @xmath547 .",
    "whenever @xmath510 is a multiple of @xmath0 , this is exactly @xmath548 .",
    "while the ordinal bound matches , our results in this work are not a corollary of blass and gurevich s result . note that in the above argument we covered all sct instances with the same set of @xmath20 local functions",
    ". obviously , the identity of this set of functions can not reveal any specific structure of a given instance , as does an expression for a ranking function .",
    "while deducing ranking expressions from size - change graphs has already been shown possible before this work , the constructions in this paper are simpler and more transparent than previously known .",
    "they improve the upper bound on the size of the ranking expression and in fact achieve optimality , in a certain sense .",
    "the constructions employ reductions of sct instances to instances of a subclass of sct , and applies sct to data of composite types ( tuples and sets ) .",
    "we feel that this technique is interesting in itself .    to argue for optimality",
    ", we have introduced a class of expressions that ( in our opinion ) captures all possible ranking functions for general sct , and a complexity measure ( number of different vectors in the image ) under which we are able to prove lower bounds .      1 .   for fan - in/-out free graphs ,",
    "will the use of multisets and multiset ordering allow ranking functions of size @xmath130 to be constructed ? or is our lower bound loose ? 2 .",
    "what is the complexity of ranking functions for general sct , and how to generate them ? + we remark that our construction relied on fan - out freedom in the construction of the instance @xmath199 ( section  [ sec : basic - fof ] ) .",
    "furthermore , it is not hard to verify that the forms of ranking functions given by our constructions do not suffice for certain sct instances which are not fan - in or fan - out free .",
    "the strict sct instance shown on page is such an example . on the other hand ,",
    "practically , there is evidence that fan - in free graphs are common .",
    "for example , in analysing a benchmark of sct instances derived from prolog programs  @xcite , we discovered that fan - in occurred rarely once size - change graphs have been `` cleaned up '' by removing arcs unnecessary for the termination proof .",
    "3 .   how can the construction algorithm given in this paper be improved ?",
    "note that as presented , it may require doubly exponential time and space , despite the fact that the size of the final result is bounded by @xmath549 .",
    "practically , the choice of an algorithm for ranking - function construction and its usage are also challenging .",
    "it is well known that even algorithms that are worst - case exponential sometimes work sufficiently well in many practical cases .",
    "it is quite possible that human - written programs will not require ranking functions of high complexity . in this work ,",
    "these practical questions have not been studied , as our goal was to examine the theoretical problem first .",
    "recent work by ben - amram and codish  @xcite proposes to use a different class of ranking functions which does not cover all sct instances , but has polynomial expression size ; and it turns out to suffice for the benchmark that was tried .",
    "the compact representation of the ranking functions relies on the use of sets of variables inside tuples , an insight gained from the work described in this paper .    even if a ranking - function construction is provided , the practical goals mentioned  certified termination , proof carrying code and execution time analysis  all require additional research and implementation work for their realization .",
    "amir  m. ben - amram and michael codish .",
    "a sat - based approach to size change termination with global ranking functions . in c.r .",
    "ramakrishnan and jakob rehof , editors , _",
    "14th intl .",
    "conference on tools and algorithms for the construction and analysis of systems ( tacas ) _ , volume 5028 of _ lncs _ , pages 4655 .",
    "springer , 2008 .",
    "michael codish , vitaly lagoon , and peter  j. stuckey .",
    "testing for termination with monotonicity constraints . in maurizio gabbrielli and gopal",
    "gupta , editors , _ logic programming , 21st international conference , iclp 2005 _ , volume 3668 of _ lecture notes in computer science _ , pages 326340 .",
    "springer , 2005 .",
    "alexander krauss .",
    "certified size - change termination . in frank pfenning ,",
    "11th international conference on automated deduction ( cade ) _ , volume 4603 of _ lnai _ , pages 460475 .",
    "springer - verlag , july 2007 .",
    "chin  soon lee , neil  d. jones , and amir  m. ben - amram .",
    "the size - change principle for program termination . in _ proceedings of the twenty - eigth acm symposium on principles of programming languages , january 2001 _ , volume  28 , pages 8192 .",
    "acm press , january 2001 .",
    "yehoshua sagiv . a termination test for logic programs . in vijay saraswat and kazunori",
    "ueda , editors , _ logic programming , proceedings of the 1991 international symposium , san diego , california , usa _ , pages 518532 .",
    "mit press , 1991 ."
  ],
  "abstract_text": [
    "<S> size - change termination is an increasingly - popular technique for verifying program termination . </S>",
    "<S> these termination proofs are deduced from an abstract representation of the program in the form of _ size - change graphs_.    we present algorithms that , for certain classes of size - change graphs , deduce a _ global ranking function _ : an expression that ranks program states , and decreases on every transition . </S>",
    "<S> a ranking function serves as a witness for a termination proof , and is therefore interesting for program certification . </S>",
    "<S> the particular form of the ranking expressions that represent sct termination proofs sheds light on the scope of the proof method . </S>",
    "<S> the complexity of the expressions is also interesting , both practicaly and theoretically .    </S>",
    "<S> while deducing ranking functions from size - change graphs has already been shown possible , the constructions in this paper are simpler and more transparent than previously known . </S>",
    "<S> they improve the upper bound on the size of the ranking expression from triply exponential down to singly exponential ( for certain classes of instances ) . we claim that this result is , in some sense , optimal . to this end </S>",
    "<S> , we introduce a framework for lower bounds on the complexity of ranking expressions and prove exponential lower bounds . </S>"
  ]
}