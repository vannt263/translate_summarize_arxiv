{
  "article_text": [
    "for an explanation of the mathematical notation used in this paper , see some of my previous papers ; for instance , ref.@xcite section 2 .",
    "we say a unitary operator acting an array of qubits has been compiled if it has been expressed as a seo ( sequence of elementary operations , like cnots and single - qubit operations ) .",
    "seo s are often represented as quantum circuits .",
    "there exist software ,  general quantum compilers \" ( like qubiter@xcite ) , for compiling arbitrary unitary operators ( operators that have no a priori known structure ) . there also exists software,special purpose quantum compilers\"(like each of the 7 applications in quansuite@xcite ) , for compiling unitary operators that have a very definite , special structure which is known a priori .",
    "this paper introduces qusann v1.2 and multiplexor expander v1.2 , two java applications available for free .",
    "( source code included in the distribution . )",
    "qusann is a  code generator \" for quantum simulated annealing : after the user inputs some parameters , it outputs a quantum circuit for performing simulated annealing on a quantum computer .",
    "qusann is not really a quantum compiler ( neither general nor special ) because , although it generates a quantum circuit like the quantum compilers do , it does nt start with an explicitly stated unitary matrix as input .",
    "multiplexor expander is not a quantum compiler either for the same reason .",
    "multiplexor expander can be more aptly described as a  code translator \" : it takes a seo and replaces it by a different but equivalent seo .    in ref.@xcite ,",
    "somma et al . proposed an algorithm for quantum simulated annealing that requires , for any @xmath0 , order @xmath1 elementary operations to find , with probability greater than @xmath2 , the minimum of a function . here",
    "@xmath3 is the distance between the two largest eigenvalue magnitudes of the transition probability matrix for the metropolis markov chain .",
    "the algorithm of somma et al . outperforms the classical simulated annealing algorithm , which requires order @xmath4 elementary operations to do the same thing .",
    "subsequently , wocjan et al . in ref.@xcite improved on the algorithm of somma et al .",
    "( see also refs.@xcite , where wocjan et al .",
    "discuss related issues ) .    both the somma et al . and the wocjan et al .",
    "algorithms use szegedy quantum walk operators@xcite and phase estimation .",
    "but the wocjan et al .",
    "algorithm uses a grover fixed point search@xcite instead of the quantum zeno effect .    the quantum circuit generated by qusann implements the algorithm of wocjan et al . given in ref.@xcite .",
    "the circuit includes some quantum multiplexors .",
    "( see ref.@xcite for a review of quantum multiplexors . )",
    "the application multiplexor expander allows the user to replace each of those multiplexors by a sequence of more elementary gates such as multiply controlled nots and qubit rotations .",
    "multiplexor expander gives the user the option of expanding the multiplexors in two different ways : either as an exact seo ( see refs .",
    "@xcite ) , or an oracular approximation ( see ref .",
    "@xcite ) .",
    "a nice feature of the source code for qusann , multiplexor expander and all the applets in quansuite , is that they all share a common java class library ( named qlib ) .",
    "the qusann applet makes the following 3 assumptions :    1 .   for its _ annealing schedule _ ( see appendix [ app - class - sim - ann ] for definition ) @xmath5 , it assumes @xmath6 and @xmath7 for all @xmath8 .",
    "2 .   for its _ energy function _ ( see appendix [ app - class - sim - ann ] for definition ) , it assumes @xmath9 , where the state space ( i.e. , the set of @xmath10 values ) of the minimization problem is @xmath11 .",
    "3 .   for its _ neighborhood function _ ( see appendix [ app - class - sim - ann ] for definition ) , it assumes @xmath12 if @xmath13 and @xmath14 otherwise .",
    "these 3 assumptions were made in order to make the applet simple . they can be easily changed ( i.e , one can use a more complicated annealing schedule , energy function and neighborhood function ) by making trivial alterations to the source code of qusann .",
    "fig.[fig - qusann - main ] shows the * control panel * for qusann .",
    "this is the main and only window of the application .",
    "this window is open if and only if the application is running",
    ".        the control panel allows you to enter the following inputs :    file prefix : : :    prefix to the 3 output files that are written when you press the    * write files * button .",
    "for example , if you insert test in this text    field , the following 3 files will be written :    +    * test_qsann_log.txt    * test_qsann_eng.txt    * test_qsann_pic.txt    +    some examples of these output files are given in section    [ sec - sann - out - files ] below .",
    "number of state bits : : :    the parameter @xmath15 defined in appendix    [ app - class - sim - ann ] .",
    "the state space of the minimization problem is    @xmath16 .",
    "the transition probability    matrix @xmath17 of the metropolis markov chain is a    @xmath18 dimensional matrix , and the szegedy quantum walk    operator @xmath19 is a @xmath20 dimensional    matrix .",
    "number of probe bits ( for each pe step ) : : :    the parameter @xmath21 defined in appendix    [ app - wa - algo ] .",
    "see fig.[fig - v - beta ] .",
    "number of phase estimation ( pe ) steps : : :    the parameter @xmath22 defined in appendix    [ app - wa - algo ] .",
    "see fig.[fig - v - beta ] .",
    "grover depth : : :    the parameter @xmath23 defined in appendix    [ app - wa - algo ] .",
    "@xmath24 is the final level of recursion to    which one wishes to carry out the fixed point grover search .",
    "upper bound on number of neighbors : : :    the parameter @xmath25 defined in appendix    [ app - class - sim - ann ] .",
    "number of betas : : :    the parameter @xmath26 defined above to be the    number of betas in the annealing schedule .",
    "delta beta per unit time : : :    the parameter @xmath27 defined above to    be the difference between adjacent betas of the annealing schedule .",
    "the control panel displays the following outputs :    number of qubits : : :    the total number of qubits used by the circuit , equal to    @xmath28 in the notation of appendix [ app - wa - algo ] .",
    "number of elementary operations : : :    the number of elementary operations in the output quantum circuit .",
    "if    there are no loops , this is the number of lines in the english file    ( see sec .",
    "[ sec - eng - file ] ) , which equals the number of lines in the    picture file ( see sec . [ sec - pic - file ] ) . for a loop (",
    "which is not    nested inside a larger loop ) , the  loop k reps:@xmath29 \" and     next k \" lines are not counted , whereas the lines between  loop k    reps:@xmath29 \" and  next k \" are counted @xmath29 times .",
    "multiplexors expressed as a single line are counted as a single    elementary operation ( unless , of course , they are inside a loop , in    which case they are used repeatedly ) .",
    "message : : :    a message appears in this text field if you press * write files * with a    bad input .",
    "the message tries to explain the mistake in the input",
    ".      figs .",
    "[ fig - sann - log ] , [ fig - sann - eng ] and [ fig - sann - pic ] , were all generated in a single run of qusann ( by pressing the * write files * button just once ) .",
    "they are examples of what we call the * log file , english file , and picture file * , respectively , of qusann .",
    "next we explain the contents of each of these output files .        .",
    "bottom of file is not visible .",
    "right hand side of file is not visible . ]    .",
    "bottom of file is not visible . ]",
    "fig.[fig - sann - log ] is an example a log file .",
    "the log file records all the information found in the control panel .",
    "fig.[fig - sann - eng ] is an example of an english file .",
    "the english file completely specifies the output seo .",
    "it does so  in english \" , thus its name .",
    "each line represents one elementary operation , and time increases as we move downwards .    in general , an english file obeys the following rules :    * time grows as we move down the file . *",
    "each row corresponds to one elementary operation .",
    "each row starts with 4 letters that indicate the type of elementary operation . * for a one - bit operation acting on a ",
    "target bit \" @xmath30 , the target bit @xmath30 is given after the word at .",
    "* if the one - bit operation is controlled , then the controls are indicated after the word if .",
    "t and f stand for true and false , respectively .",
    "@xmath30 t stands for a control @xmath31 at bit @xmath30 .",
    "@xmath30f stands for a control @xmath32 at bit @xmath30 . *",
    " loop k reps:@xmath29 \" and  next k \" mark the beginning and end of @xmath29 iterations .",
    "k labels the loop .",
    "k also equals the line - count number ( first line is 0 ) of the line ",
    "loop k reps:@xmath29 \" in the english file .",
    "* swap @xmath30 @xmath33 stands for the swap(exchange ) operator @xmath34 that swaps bits @xmath30 and @xmath33 . * phas @xmath35 stands for a phase factor @xmath36 .",
    "* p0ph @xmath35 stands for the one - bit gate @xmath37 .",
    "p1ph @xmath35 stands for the one - bit gate @xmath38 .",
    "target bit follows the word at . *",
    "sigx , sigy , sigz , had2 stand for the pauli matrices @xmath39 and the one - bit hadamard matrix @xmath40 , respectively .",
    "target bit follows the word at .",
    "* rotx , roty , rotz , rotn stand for one - bit rotations with rotation axes in the directions : @xmath10 , @xmath41 , @xmath42 , and an arbitrary direction @xmath43 , respectively .",
    "rotation angles ( in degrees ) follow the words rotx , roty , rotz , rotn .",
    "target bit follows the word at .",
    "* mp_y stands for a multiplexor which performs a one - bit rotation of a target bit about the @xmath41 axis .",
    "target bit follows the word at .",
    "rotation angles ( in degrees ) follow the word by .",
    "multiplexor controls are specified by @xmath44 , where integer @xmath30 is the bit position and integer @xmath45 is the control s name .    here is a list of examples showing how to translate the mathematical notation used in ref.@xcite into the english file language :    [ cols=\"<,<\",options=\"header \" , ]",
    "qusann outputs a quantum circuit which includes multiplexor operations .",
    "multiplexor expander can read the output files of qusann and write new files in which each multiplexor is replaced by a sequence of more elementary operations such as multiply controlled nots and single qubit rotations .",
    "multiplexor expander gives the user the option of expanding the multiplexors in two different ways : either as an exact seo ( see ref .",
    "@xcite ) , or an oracular approximation ( see ref .",
    "@xcite ) .",
    "fig.[fig - qexp - main ] shows the * control panel * for multiplexor expander .",
    "this is the main and only window of the application .",
    "this window is open if and only if the application is running .",
    "the control panel allows you to enter the following inputs :    prefix for input files : : :    prefix to the 2 input files that are read when you press the * write    output files * button .",
    "for example , if you insert testin_qexp in this    text field , the following 2 files will be read :    +    * testin_qexp_eng.txt    * testin_qexp_pic.txt    +    some examples of these input files are given in section    [ sec - qexp - in - files ] below .",
    "these 2 files are usually english file and    picture file outputted by qusann .",
    "if they are nt , they must be    formatted in the same way as the 2 files outputted by qusann or else    multiplexor expander will fail . prefix for output files : : :    prefix to the 3 output files that are written when you press the    * write output files * button .",
    "for example , if you insert testout_qexp    in this text field , the following 3 files will be written :    +    * testout_qexp_log.txt    * testout_qexp_eng.txt    * testout_qexp_pic.txt    +    some examples of these output files are given in section    [ sec - qexp - out - files ] below .",
    "compilation mode : : :    the compilation mode , either as exact seo ( see ref .",
    "@xcite ) ,    or oracular approximation ( see ref .",
    "bit precision : : :    the number of significant fractional bits in the oracular    approximation ( see ref.@xcite ) .",
    "this parameter is ignored if the    compilation mode is exact seo .",
    "the control panel displays the following outputs :    number of elementary operations : : :    same as in qusann control panel .",
    "message : : :    same as in qusann control panel",
    ".      figs .",
    "[ fig - qexp - eng ] and [ fig - qexp - pic ] are examples of the 2 input files for multiplexor expander , what we call the * input english file * and * input picture file * , respectively , of multiplexor expander .",
    "these examples are not really output files of qusann , but they are formatted in the same way as english and picture files of qusann .              figs .",
    "[ fig - outexact - qexp - log ] , [ fig - outexact - qexp - eng ] and [ fig - outexact - qexp - pic ] were all generated in a single run of multiplexor expander ( by pressing the * write output files * button just once ) , with    * the input files of figs .",
    "[ fig - qexp - eng ] and [ fig - qexp - pic ] , and * the compilation mode set to * exact seo * .    figs .",
    "[ fig - outexact - qexp - log ] , [ fig - outexact - qexp - eng ] and [ fig - outexact - qexp - pic ] are examples of what we call the * output log file , output english file , and output picture file * , respectively , of multiplexor expander . the notation of these files is the same as that for the log , english and picture files for qusann ( see section [ sec - sann - out - files ] ) .    figs .",
    "[ fig - outorac - qexp - log ] , [ fig - outorac - qexp - eng ] and [ fig - outorac - qexp - pic ] are similar to figs .",
    "[ fig - outexact - qexp - log ] , [ fig - outexact - qexp - eng ] and [ fig - outexact - qexp - pic ] above , except that they were all generated in a single run of multiplexor expander , with    * the input files of figs .",
    "[ fig - qexp - eng ] and [ fig - qexp - pic ] , and * the compilation mode set to * oracular approximation*.        ]    ]        ]    ]",
    "the goal of simulated annealing , both classical and quantum , is to find the minimum of a ( bounded below ) function ( i.e. to solve a * minimization problem * ) .",
    "the function @xmath46 to be minimized will be called the * energy function * ( assumed non - negative without loss of generality ) . it s",
    "domain @xmath47 will be called the * state space*. we will assume that @xmath48 , were @xmath49 is the number of states and @xmath50 is the number of bits . besides the state space and energy function , it is also convenient to introduce a * neighborhood function * @xmath51 , defined by @xmath52 .    to solve this minimization problem ,",
    "classical simulated annealing uses a markov chain .",
    "a * markov chain * is a bayesian network @xmath53 , wherein all random variables @xmath54 have the same range of values : @xmath55 for all @xmath56 , and every node except the first one has the same transition probability matrix : @xmath57 for @xmath58 and @xmath59 .",
    "a * stationary state * @xmath60 of the markov chain with transition probability matrix @xmath17 is a probability distribution on @xmath47 which is also an eigenstate of @xmath17 with unit eigenvalue ,    _ xs _",
    "m(y|x)(x ) = ( y ) for all @xmath61 .",
    "we say that a probability distribution @xmath62 is a * detailed balance * of @xmath17 if m(y|x)(x ) = m(x|y)(y ) [ eq - detbal ] for all @xmath59 .",
    "clearly , if @xmath60 is a detailed balance of @xmath17 , it is also a stationary state of it .",
    "classical simulated annealing uses a special markov chain due to metropolis .",
    "the metropolis transition probability matrix @xmath63 for a given minimization problem and inverse temperature @xmath64 , is defined as follows :    m_(y|x)=\\ {    l ( xy ) \\ { 1 , e^- } + + ( x = y)(1 - _ z , zx m_(z|x ) )    . , [ eq - metro ] where @xmath65 is some real number greater or equal to @xmath66 .",
    "thus , @xmath65 is an upper bound on the number of neighbors .",
    "fig.[fig - metropolis ] tries to explain the logic behind eq.([eq - metro ] ) .",
    "a  system \" prefers going downhill to going uphill , but is willing to visit a neighbor living uphill occasionally .",
    "one can show that the following probability distribution ( called a * normalized boltzmann factor * ) is a detailed balance and therefore a stationary distribution of @xmath63 .    _",
    "[ eq - boltz - fac ] @xmath67 is called the * partition function*. it is defined so as to make @xmath60 a probability distribution :    z_= _ x e^-e(x ) .    in classical simulated annealing , we consider a product @xmath68 of transition probability matrices . the monotonically increasing ( or at least non - decreasing ) sequence of non - negative real numbers @xmath69 is called the * annealing schedule*.",
    "in this appendix , we will review the concept of q - embedding of a probability matrix , as used in ref.@xcite and later in ref.@xcite .    given a conditional probability @xmath70 where @xmath71 and @xmath72",
    ", we will call a * probability matrix * the matrix @xmath73 with entries @xmath70 with rows labeled by the @xmath41 and columns by the @xmath10 . any unitary matrix @xmath74 with matrix elements",
    "@xmath75 , where @xmath76 and @xmath77 , that satisfies    _ |a(y , |=0 , x)|^2= p(y|x ) , [ eq - q - emb - gen - summed ] for all @xmath78 , will be called a * q - embedding ( quantum - embedding ) of the probability matrix * @xmath73 .",
    "@xmath79 acts like a probability amplitude .",
    "the index @xmath80 that we set to a fixed value ( call it zero ) is called a source and the index @xmath81 that we sum over is called a sink .",
    "this nomenclature is similar to the one used by fredkin and toffoli when they showed how any boolean function @xmath82 can be embedded in a reversible function .",
    "see ref.@xcite for more details and references .",
    "note that eq.([eq - q - emb - gen - summed ] ) is satisfied if we set    a(y , |=0 , x)= _ x^ .",
    "a q - embedding of a probability matrix is of course not unique .",
    "next we will give one possible q - embedding for any square probability matrix acting on @xmath50 bits .",
    "the q - embedding that we will give is very convenient because it is expressed succinctly as a product of quantum multiplexors .",
    "( see ref.@xcite for a review of quantum multiplexors ) .",
    "we begin by pointing out some trivial algebraic results that will be used below .",
    "note that for any @xmath83 ,    e^-i = .",
    "@xmath84 are shorthand for @xmath85 and @xmath86 , respectively . thus ,",
    "if @xmath87 , we get from the first column of this matrix that :    e^-i = c^|b_s^b_= \\ {    l c_b=0 + s_b=1    . .",
    "[ eq - rot - mat - elem ] ( we are using the notation of ref.@xcite for @xmath88 where @xmath87 , namely @xmath89 and @xmath90 . ) a compact expression for the entries of both columns can be obtained as follows . for @xmath91 ,",
    "e^-i = e^-i^a = e^-i(-1)^a .",
    "[ eq - gen - rot - mat - elem ] the last matrix element in eq.([eq - gen - rot - mat - elem ] ) is given by eq.([eq - rot - mat - elem ] ) .",
    "let @xmath92 be the probability matrix for which we desire a q - embedding .",
    "first consider @xmath93 .",
    "we want the following constraint to be satisfied :    a(b_1 , b_0|a_1=0 , a_0)= _ b_0^a_0 , where @xmath94 .",
    "define a unitary matrix @xmath95 by    =    c @c=1em @r=1em @!r & & + & &    = e^-i_a_0(1)_|a_0p_a_0(0 ) , where the angles @xmath96 are defined by    c__|a_0 ^ 2|b_1 s__|a_0 ^ 2b_1 = q_b_1|a_0 .",
    "using @xmath97 for @xmath98 , and eq.[eq - rot - mat - elem ] , it follows that    c @c=1em @r=1em @!r & & + & &    & = & _ b_0^a_0 e^-i(1)_|a_0 + & = & _ b_0^a_0 c__|a_0^|b_1 s__|a_0^b_1 + & = & _ b_0^a_0 .",
    "hence @xmath95 is a q - embedding of @xmath99 .",
    "now consider @xmath100 .",
    "we want a(b_3 , b_2 , b_1 , b_0|a_3=0 , a_2=0 , a_1 , a_0)= _ b_1^a_1 _ b_0^a_0 , where all @xmath101 and @xmath102 are in @xmath103 . define a unitary matrix @xmath95 by    =    c @c=1em @r=1em @!r & & & + & & & + & & & + & & &    = e^-i_b_2,a_1,a_0(3)_b_2|a_1a_0p_b_2 a_1 a_0(2,1,0 ) e^-i_a_1,a_0(2)_|a_1a_0p_a_1 a_0(1,0 ) , where the angles @xmath104 and @xmath105 are defined by    c__b_2|a_1a_0 ^ 2|b_3 s__|a_1a_0 ^ 2b_3 = , and    c__|a_1a_0 ^ 2|b_2 s__|a_1a_0 ^ 2b_2 = q_. b_2|a_1a_0 .",
    "( we are using the notation of ref.@xcite where a dot at the position of an index means that the index has been summed over ; e.g. , @xmath106 ) .",
    "it follows that    c @c=1em @r=1em @!r & & & + & & & + & & & + & & &    & = & _ b_1^a_1 _ b_0^a_0 e^-i(3)_b_2|a_1a_0 e^-i(2)_|a_1a_0 + & = & _ b_1^a_1 _ b_0^a_0 + & = & _ b_1^a_1 _ b_0^a_0 . thus , as in the @xmath93 case , @xmath95 is a q - embedding of @xmath99 .",
    "it s clear how to generalize this construction so as to get a q - embedding of a probability matrix @xmath92 for any positive integer @xmath50 .",
    "in this appendix , we will review the definition and some useful properties of the szegedy quantum walk operator @xmath107 ( first defined by szegedy in ref.@xcite , first used for simulated annealing by somma et al . in ref.@xcite ,",
    "first implemented in terms of multiplexors here ) .      for any markov chain with transition probability @xmath17 , define matrix @xmath109 ( the entry - wise square root of @xmath17 ) by ( y|x)= , and the matrix @xmath108 ( a symmetric version of @xmath17 ) by    ( y|x)= ( x|y)(y|x ) , for all @xmath59.(note that",
    "unlike @xmath110 , @xmath111 is not a probability function in @xmath41 , its first argument . )",
    "define the quantum states    = _ x [ ( x)]^ for @xmath112 .",
    "( note that only the @xmath113 state is normalized in the sense of quantum mechanics . )",
    "m= , and    = .",
    "also , @xmath17 and @xmath108 have the same eigenvalues .",
    "taking the square root of both sides of the detailed balance statement eq.([eq - detbal ] ) , we get    ( y|x)= ( x|y ) . therefore ,    ( y|x)=(x|y ) ( x|y ) & = & m(x|y ) .",
    "hence ,    _ x m(y|x)(x)= _ x m(x|y)(y)=(y ) , and    _ x ( y|x ) = _ x m(x|y ) = .",
    "order the elements of the finite set @xmath47 in some preferred way .",
    "use this preferred order to represent @xmath17 and @xmath108 as matrices .",
    "define a diagonal matrix @xmath114 whose diagonal entries are the numbers @xmath62 for each @xmath71 , with the @xmath10 ordered in the preferred order :    d= diag[((x))_x ] . since    = d^-m",
    "d^ , it follows that    ( m - ) = ( - ) for any @xmath115 .",
    "let the eigenvalues is a hermitian matrix .",
    "] of @xmath108 ( and also of @xmath17 ) be @xmath116 with latexmath:[$m_0=1\\gneq |m_1|\\geq    corresponding eigenvectors of @xmath108 ( but not necessarily of @xmath17 ) .",
    "thus    = m_j , for @xmath118 .",
    "in particular , @xmath119 .    for each @xmath56 , define @xmath120 $ ] and @xmath121 so that @xmath122 . ( thus , @xmath123 and @xmath124 ) .",
    "note that @xmath125 so @xmath126 . the @xmath17 eigenvalue gap @xmath3 is defined as @xmath127 .",
    "@xmath128 when @xmath129 is small .",
    "next we will consider two  dual \" disjoint sets of distinct qubits with @xmath50 qubits in each set .",
    "let these two set be labeled @xmath131 and @xmath132 .",
    "any operator @xmath133 acting on the tensor product of a state @xmath134 and a state @xmath135 where @xmath136 , can be represented , depending on taste , either in quantum circuit notation or dirac notation , by    c @c=1em @r=2em @!r & & & _ + & & & _    = _ _ .",
    "let @xmath137 denote the operator that swaps all bits @xmath138 and @xmath139 for @xmath140 .",
    "let @xmath95 be any unitary matrix satisfying for any @xmath141 ,    c @c=1em @r=2em @!r & & & + & & &    =    c @c=1em @r=1em @!r & & & + & & &    = ( ) .",
    "[ eq - u0x ] let    ( y,y|0,x)=    c @c=1em @r=2em @!r & & & + & & &    = . for @xmath142 .",
    "then , by virtue of eq.([eq - u0x ] ) ,    ( y,y|0,x)= ( y , x)(y|x)= ( y , x ) . thus , @xmath95 is a q - embedding of the probability matrix @xmath17 .",
    "if we define @xmath130 by    = , then we can immediately write the following equations , which are dual to equations we wrote previously for @xmath95 :    c @c=1em @r=2em @!r & & & + & & &    =    c @c=1em @r=1em @!r & & & + & & &    = ,    ( y,y|x,0)=    c @c=1em @r=2em @!r & & & + & & &    = ,    ( y,y|x,0)= ( y,x)(y|x)= ( y,x ) .",
    "next define the unitary operator @xmath74 by    u = ^ .",
    "[ eq - u - uhat - ucheck ] clearly ,    u = u^. note that @xmath143 is hermitian and its square equals one :    ( u)^= u^= u , ( u)^2 = 1 .",
    "matrix @xmath74 has the following highly desirable property :    for any @xmath144 ,    r +    u    l +    = m_j _ j^k .",
    "r +    ^    l +    & = & _ y , x    r +    l +     + & = & _ y , x ^t(y|x)(y|x ) + & = & = m_j _ j^k .",
    "now define the projection operator @xmath145 by ( expressed below in 3 alternative but equivalent notations )    =    c @c=1em @r=.25em @!r & & + & &    = i_2^p_0^ = p_0 ( ) .",
    "define the projection operator @xmath146 dual to @xmath145 , by    = =    c @c=1em @r=.25em @!r & & + & &    .",
    "define a reflection operator @xmath147 ( expressed below in several equivalent notations ) and its dual reflection operator @xmath148 as follows :    ( -1)^ = 1 - 2 = i_2^(-1)^p_0^ = ( -1)^_j=1^(_j ) ,    ( -1)^ = ( -1)^ .",
    "finally ( gasp ! ) , we are ready to define the * szegedy quantum walk operator * @xmath107 corresponding to the transition probability matrix @xmath17 , by    w(m)=u ( -1)^ u^(-1)^ .      to find the eigenvalues of @xmath107 , we will use the following identities .",
    "[ cl - proj - ids ]    = ,    \\(u ) = m_j , [ eq - pi - u - swap ]    for all @xmath149 .    from the definition of @xmath145",
    ", we see that    l +    =    l +    . also ,    ( u )    l +    = _ k    r +    u    l",
    "+    = m_j    l +    .",
    "an immediate consequence of claim [ cl - proj - ids ] is that    u = u = m_j_j^k , [ eq - u - swap - mat - elem ] for @xmath150 .    note that since @xmath125 , eq.([eq - u - swap - mat - elem ] ) implies that    = u .",
    "[ eq - u - swap - equals-1 ]",
    "another consequence of claim [ cl - proj - ids ] is that @xmath151 is a stationary state of @xmath107 .",
    "indeed , one has    w&= & u ( -1)^ u^(-1)^ + & = & u ( 1 - 2 ) u^(-1 ) + & = & ( 1 - 2m_0u)(-1 ) + & = & ( 1 - 2)(-1 ) + & = & .",
    "busy^j = span\\ { , u } for @xmath152 .",
    "( by  span \" we mean all linear combinations of these vectors with _ complex _ coefficients . )    [ cl - v - busy - j ] @xmath153 for all @xmath152 . for @xmath154",
    ", let    = .",
    "@xmath155 is an orthonormal basis for @xmath156 and @xmath157 . for @xmath158 ,",
    "let    = ( e^-i_ju- e^i2_j ) .",
    "[ eq - psi - j - original - basis ] @xmath159 is an orthonormal basis for @xmath160 and @xmath161 .    using the identities of claim [ cl - proj - ids ]",
    ", one finds after some algebra that    [ eq - w - invariant - plane ] w= ( -1 ) + ( 2m_j)u , and    w(u)= ( -2m_j ) + ( -1 + 4m_j^2)u    for all @xmath56 .    according to eqs.([eq - w - invariant - plane ] ) , @xmath162 is invariant under the action of @xmath107 for each @xmath56 . by virtue of eq.([eq - u - swap - mat - elem ] ) , @xmath162 is 1-dim for @xmath154 and 2-dim if @xmath158 .",
    "we ve already proven that @xmath151 is a stationary state of @xmath107 .     and @xmath163 . ]",
    "now consider the case @xmath164 .",
    "both @xmath165 and @xmath147 are reflections in the planar subspace @xmath162 , and reflections are a special type of rotation about the axis normal to this plane , so their product is also a rotation about this axis . the vectors @xmath166 , and @xmath167 are independent but not orthogonal .",
    "however , we can express them in terms of orthogonal vectors ( see fig.[fig - e1-e2-def ] ) as follows :    = , and    e^-i_ju = ( _ j)+ ( _ j ) .    in the @xmath168 , @xmath163 basis , we find after substituting @xmath169 into eqs.([eq - w - invariant - plane ] ) that    w= .",
    "the eigenvalues of this matrix are @xmath170 , with corresponding eigenvectors :    = ( ) .",
    "[ eq - psi - j - e - basis ] these eigenvectors satisfy    = 0 , = 1 . by expressing @xmath168 and @xmath163 in eq.([eq - psi - j - e - basis ] ) in the original basis , we get eq.([eq - psi - j - original - basis ] ) .",
    "define the following vector spaces :    = span\\ { : x , ys _ } ,    _",
    "span\\ { : xs _ } ,    _ b = u_a , and    _ busy = _ a + _ b .",
    "@xmath171 can be expressed as a direct sum of @xmath172 and its orthogonal complement @xmath173 :    = _ busy_busy^. from claim [ cl - v - busy - j ] , it follows that @xmath172 is a direct sum of the subspaces @xmath162 :    _ busy = _ j=0^n_s-1 _ busy^j .",
    "[ eq - v - busy - direct - sum ] recall that matrices @xmath17 and @xmath108 are @xmath174 dimensional whereas @xmath107 is @xmath175 dimensional . since the size of @xmath47 is @xmath174 , @xmath176 . from eq.([eq - v - busy - direct - sum ] ) and claim [ cl - v - busy - j ] , @xmath177 .",
    "furthermore , @xmath178 is an orthonormal basis for @xmath172 .    at this point",
    "we ve explained the action of @xmath107 on @xmath172 , but we havent said anything about the action of @xmath107 on @xmath179 .",
    "next we show that @xmath107 acts simply as the identity on @xmath179 .",
    "( this is what one would expect since the vectors in @xmath179 are parallel to the axis of the @xmath107 rotation . )",
    "recall that if @xmath180 and @xmath181 are subspaces of a vector space @xmath171 , then @xmath182 .",
    "therefore ,    ^_busy = _ a^_b^. from the definitions of @xmath183 and @xmath184 , it s easy to see that    _",
    "a^=span\\ { : xs _ , ys_-\\{0 } } , and    _ b^=u(_a^ ) .",
    "w = for all @xmath185 .",
    "let @xmath186 .",
    "hence @xmath187 and @xmath188 for some @xmath189 .",
    "u ( -1)^ u^(-1)^ & = & u ( -1)^ u^(-1)^0 + & = & u ( 1 - 2 ) u^u + & = & u ( 1 - 2 ) + & = & .",
    "consider the case @xmath100 .",
    "using @xmath190 and @xmath191 , one gets    w = u(-1)^u^(-1)^=    c @c=1em @r=1em @!r & & & & & + & & & & & + & & & & & + & & & & &    .",
    "[ eq - w - nb2 ] now we need to find a seo for the @xmath74 in eq.([eq - w - nb2 ] ) .",
    "using eq.([eq - u - uhat - ucheck ] ) to express @xmath74 in terms of @xmath95 , and using the method given in appendix [ app - q - emb ] for implementing @xmath95 in terms of multiplexors , we get    u = ^=    c @c=1em @r=1em @!r & & & & & & & & & + & & & & & & & & & + & & & & & & & & & + & & & & & & & & &    .",
    "[ eq - u - mplexors ] in eq.([eq - u - mplexors ] ) , a box with a dagger in it represents the hermitian conjugate of the box without a dagger and acting earlier on the same qubit .",
    "it s clear how to generalize this construction of @xmath107 to any number @xmath50 of bits .",
    "figs.[fig - sze - eng ] and [ fig - sze - pic ] show english and picture files , written using the format of qusann and multiplexor expander , for a szegedy quantum walk operator @xmath107 , for a case with @xmath100 .     for an @xmath17 with @xmath100 .",
    "right hand side of file is not visible . ]    ]",
    "in this appendix , we will review the wocjan - abeyesinghe algorithm for quantum simulated annealing , for which qusann generates a quantum circuit .",
    "this appendix follows closely ref.@xcite .      for any inverse temperature @xmath64 , define @xmath192 by the quantum circuit of fig.[fig - v - beta ] .",
    "fig.[fig - v - beta ] also defines the parameters @xmath193 which we refer to as the * number of probe bits * , and @xmath194 which we refer to as the * number of phase estimation ( pe ) steps*."
  ],
  "abstract_text": [
    "<S> this paper introduces qusann v1.2 and multiplexor expander v1.2 , two java applications available for free . </S>",
    "<S> ( source code included in the distribution . ) </S>",
    "<S> qusann is a  code generator \" for quantum simulated annealing : after the user inputs some parameters , it outputs a quantum circuit for performing simulated annealing on a quantum computer . </S>",
    "<S> the quantum circuit implements the algorithm of wocjan et al . </S>",
    "<S> ( arxiv:0804.4259 ) , which improves on the original algorithm of somma et al . </S>",
    "<S> ( arxiv:0712.1008 ) . </S>",
    "<S> the quantum circuit generated by qusann includes some quantum multiplexors . </S>",
    "<S> the application multiplexor expander allows the user to replace each of those multiplexors by a sequence of more elementary gates such as multiply controlled nots and qubit rotations . </S>"
  ]
}