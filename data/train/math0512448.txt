{
  "article_text": [
    "when studying rational plane algebraic curves , there are two standard ways of representation , the implicit equations and the parametric equations .",
    "the intersection of two curves is more easily computed when we have the implicit equation of one curve and the parametric equations of the other , and hence it is very important to be able to change from one representation to another .",
    "we will concentrate on the implicitization problem , that is to say , on finding an implicit representation starting from a given rational parametrization of the curve .    in [ 12 ]",
    "we have presented an approach to the implicitization problem based on interpolation using the usual power basis for the corresponding space of bivariate polynomials . however",
    ", very recent work [ 2 ] , related to polynomials expressed in the bernstein basis has showed the importance of evaluating resultants from bernstein basis resultant matrices directly , avoiding a basis transformation . in this sense , in [ 2 ] it is indicated that _ for numerical computations involving polynomials in bernstein form it is essential to consider algorithms which express all intermediate results using this form only_.    although those papers study univariate polynomials , it must be observed that the construction of the resultant matrices can be extended to the case in which the entries of the resultant matrix are polynomials .",
    "it must also be taken into account that the bernstein basis has also important advantages in the context of tracing implicit algebraic curves [ 13 ] .",
    "so our aim is to use bivariate interpolation for obtaining in the bivariate tensor - product bernstein basis the implicit equation of a plane algebraic curve given by its parametric equations in bernstein form ( which is the usual situation in the case of bzier curves ) .",
    "although we present all the details with an example in exact rational arithmetic , it must be taken into account that the process can also be carried out in ( high ) finite precision arithmetic .",
    "in that situation some important results of _ numerical linear algebra _ we use will have a major importance .",
    "more precisely the _ total positivity _ of certain matrices will be an important issue , as it happens in several instances of computer aided geometric design ( see , for example , the recent work [ 18 ] and references therein ) .    the rest of the paper is organized as follows . in section @xmath0",
    "several basic results will be presented . in section",
    "@xmath1 we introduce the interpolation algorithm for computing the implicit equation as a factor of the determinant of the resultant matrix , while in section @xmath2 we consider some results related to total positivity which will be relevant for the solving of the linear system associated with the interpolation problem .",
    "finally , in section @xmath3 we briefly examine the computational complexity of the whole algorithm .",
    "let @xmath4 be a proper parametrization of a rational plane algebraic curve @xmath5 , where @xmath6 and @xmath7 and @xmath8 .",
    "a parametrization @xmath4 of a curve @xmath5 is said to be _ proper _ if every point on @xmath5 except a finite number of exceptional points is generated by exactly one value of the parameter @xmath9 .",
    "it is well known that every rational curve has a proper parametrization , so we can assume that the parametrization is proper .",
    "several recent results on the properness of curve parametrizations can be seen in [ 17 ] .    in connection with the implicitization problem , the following theorem",
    "[ 17 ] holds :    * theorem 1*. let @xmath10 be a proper rational parametri - zation of an irreducible curve @xmath5 , with @xmath11 .",
    "then the polynomial defining @xmath5 is @xmath12 ( the resultant with respect to t of the polynomials @xmath13 and @xmath14 ) .",
    "our aim is to compute the implicit equation @xmath15 of the curve @xmath5 by means of polynomial interpolation , which taking into account theorem @xmath16 is equivalent to compute @xmath17 .",
    "first of all , we remark that the concept of interpolation space will be essential .",
    "the following result , also in [ 17 ] , shows which is in our case the most suitable interpolation space :    * theorem 2*. let @xmath18 be a proper rational parametri - zation of the irreducible curve @xmath5 defined by @xmath19 , and let @xmath11",
    ". then @xmath20 and @xmath21 @xmath22 .",
    "theorem @xmath0 tells us that the polynomial @xmath19 defining the implicit equation of the curve @xmath5 belongs to the polynomial space @xmath23 , where @xmath24 and @xmath25 .",
    "the dimension of @xmath23 is @xmath26 , and a basis is given by @xmath27 .",
    "moreover @xmath28 and @xmath29 , and therefore there is no interpolation space @xmath30 with @xmath31 or @xmath32 such that @xmath19 belongs to @xmath30 .",
    "let us note that these theorems refer to the degree of polynomials in the power basis , so since now we will be using the bernstein basis some care will be needed . for the sake of clarity we will illustrate all our results with a small example .",
    "let    @xmath33 be the ( univariate ) bernstein basis of the space of polynomials of degree less than or equal to @xmath2 , where the bernstein polynomials are defined as follows , @xmath34    and let us consider the algebraic curve given by the parametric equation @xmath35 @xmath36    if we call @xmath37 and @xmath38 , their coefficients in the bernstein basis are given by @xmath39 and @xmath40    however , let us observe that @xmath41 ( a polynomial of degree @xmath2 in @xmath9 ) , while    @xmath42 a polynomial of degree @xmath1 in @xmath9 .",
    "therefore , the polynomial defining the implicit equation will be a polynomial belonging to the space @xmath23 with @xmath43 and @xmath44 .",
    "we will use for that space the _ tensor - product bivariate bernstein basis _ given by @xmath45    finally we will recall , following [ 2 ] , the algorithm for constructing bernstein - bzout matrix of @xmath46 and @xmath47 .",
    "although in [ 2 ] the coefficients of the polynomials are always numbers , in our application we will construct the symbolic ( i.e. with the entries being polynomials in @xmath48 ) bernstein - bzout matrix of @xmath46 and @xmath47 which we denote by @xmath49 .",
    "for the reader s convenience , we present the algorithm written in _",
    "maple _ language :    ....    for i from 1 to n do     bs[i,1]:=(n / i)*(p[i]*q[0]-p[0]*q[i ] ) ; od ;    for j from 1 to n-1 do     bs[n , j+1]:= ( n/(n - j))*(p[n]*q[j]-p[j]*q[n ] ) od ;    for j from 1 to n-1 do     for i from 1 to n-1 do       bs[i , j+1]:=(n^2/(i*(n - j)))*(p[i]*q[j]-p[j]*q[i ] )       + ( ( j*(n - i))/(i*(n - j)))*bs[i+1,j ] ; od ; od ; ....    let us observe that if @xmath50 , the resultant is the determinant of the bernstein - bzout matrix , while -as a consequence of the corresponding result for the bzout resultant [ 16]- if @xmath51 , that determinant is equal to the resultant multiplied by the factor @xmath52 , where @xmath53 is the leading coefficient of @xmath46 in the power basis .",
    "so in our example , the determinant of @xmath49 will be the implicit equation we are looking for multiplied by the factor @xmath54 , since the degree of @xmath55 is @xmath2 and the degree of @xmath56 is @xmath1 and the coefficient of @xmath57 in @xmath55 is @xmath54 . in the following section",
    "we will show how to compute the coefficients in the bivariate tensor - product bernstein basis of the implicit equation ( which will be a scalar multiple of the resultant computed by using the approach of [ 12 ] , where the equation is obtained in the usual power basis ) .",
    "since the expansion of the symbolic determinant is very time and space consuming , our aim is to compute the polynomial defining the implicit equation by means of lagrange bivariate interpolation , but using the bernstein basis instead of the power basis . a good introduction to the theory of interpolation can be seen in [ 5 ] .",
    "if we consider the _ interpolation nodes _ @xmath58 @xmath59 and the _ interpolation space _ @xmath60 , the interpolation problem is stated as follows :    given @xmath26 values @xmath61 ( the _ interpolation data _ ) , find a polynomial @xmath62 ( where @xmath63 is the index set @xmath64 such that @xmath65 if we consider for the interpolation space @xmath60 the basis @xmath66 @xmath67 @xmath68 @xmath69 with that precise ordering , and the interpolation nodes @xmath70 @xmath71 @xmath72 then the @xmath26 interpolation conditions @xmath73 can be written as a linear system    @xmath74 where the coefficient matrix @xmath75 is given by a kronecker product @xmath76 with @xmath77 @xmath78 @xmath79 and @xmath80 the kronecker product @xmath81 is defined by blocks as @xmath82 , with @xmath83 .    for reasons which will be explained in section @xmath2 we will select as interpolation nodes @xmath84 .",
    "in the general case we must avoid the value of @xmath85 for which the leading coefficient of @xmath46 in the power basis evaluates to @xmath86 , and the value @xmath87 for which the leading coefficient of @xmath47 in the power basis evaluates to @xmath86 .",
    "in our example we have @xmath43 and @xmath44 , and consequently @xmath88 will be the matrix @xmath89 and @xmath90 will be the matrix @xmath91    as it is well known , since @xmath88 and @xmath90 are nonsingular matrices the kronecker product @xmath92 will also be nonsingular .    as for the generation of the interpolation data , let us remark that they can be obtained without constructing the symbolic bernstein - bzout matrix @xmath49 .",
    "that is to say , we can obtain each interpolation datum by means of the evaluation of @xmath46 and @xmath47 followed by the computation of the determinant of the corresponding _ numerical _ bernstein - bzout matrix @xmath93 making use of the bini - gemignani algorithm which constructs ( in @xmath94 arithmetic operations ) the bernstein - bzout matrix for the evaluated polynomials .",
    "in addition , we must divide the value of the determinant by @xmath95 .",
    "an algorithm for solving linear systems with a kronecker product coefficient matrix is derived in a self - contained way ( in a more general setting ) in [ 14 ] . for the case of the power basis considered in [ 12 ] , taking into account that every linear system to be solved was a vandermonde linear system , it was convenient to use the bjrck - pereyra algorithm [ 3 , 9 ] to solve those linear systems . for",
    "the bernstein basis being used here , an appropriate algorithm which takes advantage of the special properties of the coefficient matrices @xmath88 and @xmath90 will be presented in section @xmath2 .    in the general case",
    ", we must solve @xmath96 linear systems with the same matrix @xmath90 and @xmath97 linear systems with the same matrix @xmath88 .",
    "from [ 4 ] we know that the bernstein basis of the space of polynomials of degree less than or equal to @xmath98 is a _ strictly totally positive basis _ on the open interval @xmath99 , which implies that all the _ collocation matrices _    @xmath100 with @xmath101 in @xmath99 are _ strictly totally positive _ , i.e. all their minors are strictly positive .",
    "in particular , due to our choice of the interpolation nodes the matrices @xmath88 and @xmath90 are strictly totally positive matrices .    making use of the results of [ 7 , 8 ] , we know that performing the _ complete neville elimination _ on a strictly totally positive matrix @xmath75 a _ bidiagonal factorization _ of its inverse @xmath102 can be obtained , that is to say , we have    @xmath103 where @xmath104 is a diagonal matrix and @xmath105 and @xmath106 are bidiagonal matrices .",
    "so , after having obtained that factorization ( with a computational cost of @xmath107 arithmetic operations ) , all the systems @xmath108 with coefficient matrix @xmath75 can be solved ( with a cost of @xmath94 arithmetic operations ) by performing the product    @xmath109    an early application of these ideas to solve structured linear systems can be seen in [ 15 ] , and a recent extension has been presented in [ 6 ] .",
    "a detailed error analysis of neville elimination , which shows the advantages of this type of elimination for the class of totally positive matrices , has been carried out in [ 1 ] , and related work for the case of vandermonde linear systems can be seen in chapter @xmath110 of [ 10 ] .    in our situation",
    "we must notice that the bidiagonal factorization can be done in exact arithmetic , and the results of the factorization can then be rounded if the subsequent computations must be carried out in finite precision arithmetic .",
    "after having obtained the bidiagonal factorization of the inverse of @xmath90 , the solution of the linear system @xmath111 can be obtained in @xmath94 arithmetic operations by computing the product    @xmath112 and analogously for the linear systems with coefficient matrix @xmath88 [ 6 ] .    in our example , the coefficients of the desired implicit equation in the tensor - product bivariate bernstein basis ( using the lexicographical ordering we are considering ) are :    @xmath113 @xmath114 @xmath115",
    "in this section we will briefly examine the computational complexity of our algorithm in terms of arithmetic operations . in view of the algorithm",
    ", we must solve @xmath96 systems of order @xmath97 with the same matrix @xmath90 and @xmath97 systems of order @xmath96 with the same matrix @xmath88 .",
    "the factorization of the inverse of a matrix of order @xmath98 by means of complete neville elimination takes @xmath107 operations , but that factorization is used for solving all the systems with the same matrix , so each of the remaining systems can be solved with @xmath94 operations .    for the sake of clarity in the comparison",
    ", we will consider here the case @xmath50 .",
    "then , the interpolation part of the algorithm has computational complexity @xmath107 .",
    "let us observe that in this situation , if we solve the linear system @xmath116 of order @xmath117 by means of gaussian elimination , without taking into account the special structure of the matrix , we have computational complexity @xmath118 .",
    "moreover , using the approach we are describing , there is no need of constructing the matrix @xmath75 , which implies an additional saving in computational cost .",
    "let us remark that , since the construction of the numerical bernstein - bzout matrix requires @xmath94 arithmetic operations and the complexity of the computation of each determinant is @xmath107 , the generation of the interpolation data has a computational complexity of @xmath119 . therefore with our approach , which exploits the kronecker product structure ,",
    "the whole process has complexity @xmath119 , while using gaussian elimination it would be @xmath118 .",
    "it is worth noting that the main cost of the process corresponds to the generation of the interpolation data , and not to the computation of the coefficients of the interpolating polynomial .",
    "so , the main effort to reduce the computational cost must be focused on that stage . in this sense",
    ", an interesting issue would be to take advantage of the _ displacement structure _ of the bernstein - bzout matrices [ 2 , 11 ] to develop an algorithm with complexity @xmath94 for computing each determinant .    _",
    "remark_. finally , let us observe that all the linear systems with matrix @xmath90 can be solved simultaneously , and the same can be said of the systems with matrix @xmath88 .",
    "therefore the algorithm exhibits a high degree of _ intrinsic parallelism_. this parallelism is also present in the computation of the interpolation data since we can compute simultaneously the determinants involved in this process .",
    "sederberg , t. w. , zheng , j. : chapter 15 : algebraic methods for computer aided geometric design . in : farin , g. , hoscheck ,",
    "j. and kim , m. s. ( eds . ) , handbook of computer aided geometric design .",
    "elsevier ( 2002 )"
  ],
  "abstract_text": [
    "<S> the approach to curve implicitization through sylvester and bzout resultant matrices and bivariate interpolation in the usual power basis is extended to the case of bernstein - bezoutian matrices constructed when the polynomials are given in the bernstein basis . </S>",
    "<S> the coefficients of the implicit equation are also computed in the bivariate tensor - product bernstein basis , and their computation involves the bidiagonal factorization of the inverses of certain totally positive matrices .    curve ; implicitization ; interpolation ; bernstein basis ; total positivity </S>"
  ]
}