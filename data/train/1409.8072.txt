{
  "article_text": [
    "in this paper we consider the very simple problem of computing the two roots of a quadratic polynomial @xmath6 where the coefficients @xmath7 are either in @xmath8 or in @xmath9 and where @xmath10 in order the equation to have indeed two roots .",
    "this is a very classical problem for which the solution is well known , namely @xmath11 but the straightforward implementation of the above formula is quite often numerically unstable for special choices of the coefficients @xmath7 .",
    "one would like , on the other hand , to have a computational scheme that produces the computed roots @xmath12 and @xmath13 which correspond to an element - wise backward stable error , i.e. the relative backward errors are of the order of the unit roundoff @xmath14 for each individual coefficient @xmath3 , @xmath4 and @xmath5 .",
    "in fact , we can assume that @xmath3 is not perturbed in this process .",
    "we will call this * element - wise backward stability ( * ebs * * ) :    @xmath15 + @xmath16    we will see that this can not be proven in the general case , but instead , we can obtain the slightly weaker result of * element - wise mixed stability ( * ems * * ) , which implies that the computed roots @xmath12 and @xmath13 satisfy    @xmath17 + @xmath18 + @xmath19    which means that the computed roots are close to roots of a nearby polynomial , all in a relative element - wise sense .",
    "this last property is also shown to be stronger than the so - called * norm - wise backward stability ( nbs * ) which only imposes that the vector of perturbed coefficients is close to the original vector in a relative norm sense  :    @xmath15 + @xmath20 -\\left [ \\begin{array}{ccc }   a &   \\hat b & \\hat c \\end{array}\\right ] \\right\\| \\leq    \\delta \\left\\| \\left [ \\begin{array}{ccc }   a & \\hat b & \\hat c \\end{array}\\right]\\right\\| , \\quad \\delta = { \\mathcal o}(u).$ ]    this problem was studied already by several authors , but we could not find any conclusive answer to the ebs of any of the proposed algorithms .    in this paper , we will first consider the case of real coefficients since it is more commonly occurring and the results are slightly stronger .",
    "we then show how it extends to the case of complex coefficients .",
    "we end with a section on numerical experiments where we also show that there does * not * exist a method that is * ebs * for all quadratic polynomials .",
    "before handling the general case where all three coefficients are nonzero , we point out that when @xmath4 and/or @xmath5 are zero the proof of * ebs * is rather simple .",
    "* case @xmath21*. + if @xmath21 , then the roots can be computed as follows @xmath22 which is element - wise backward stable since under the ieee floating point standard , we have that the _ computed _ roots satisfy @xmath23 where @xmath14 is the unit round - off of the ieee floating point standard ( see @xcite ) . the backward error then indeed satisfies the relative element - wise bounds @xmath24 * case @xmath25*. + if @xmath25 then the roots can be computed as follows @xmath26 which is also element - wise backward stable since under the ieee floating point standard , we have that the _ computed _ roots satisfy the element - wise bounds @xmath27 notice that if sign@xmath28=sign@xmath29 , the roots are purely imaginary .",
    "the backward error for this computation satisfies the relative element - wise bounds @xmath30      we can thus assume now that all coefficients are nonzero .",
    "we start by reducing the problem to a simpler  standardized \" form in order to simplify the computational steps .    * scaling the polynomial @xmath31 * + we scale the polynomial coefficients so that it is monic : @xmath32 , which can be performed in a backward and forward stable way since we assumed @xmath10 . according to the ieee floating point standard",
    "we have that the computed values @xmath33 and @xmath34 satisfy the relative element - wise bounds @xmath35 this implies we can as well consider the monic polynomial @xmath36    * scaling the variable @xmath37 * + we transform the variable @xmath37 to @xmath38 where @xmath39 and @xmath40 , and consider the polynomial @xmath41 which is now monic in @xmath42 @xmath43 and where @xmath44 and @xmath45 . the formulas to compute @xmath46 , @xmath47 and @xmath48 are @xmath49",
    "since the sign function is exact under relative perturbations , @xmath48 is computed exactly .",
    "it then follows that @xmath46 and @xmath47 can be performed in a backward and forward stable way  : the computed values @xmath50 and @xmath51 satisfy the relative element - wise bounds @xmath52 and @xmath48 is computed exactly .",
    "this implies we can as well consider the polynomial @xmath53 .",
    "we recapitulate this in a formal lemma .",
    "the transformations @xmath54=g_a[b , c ] \\quad \\mathrm{and } \\quad [ b , c]=g_a^{-1}[\\alpha,\\beta]\\ ] ] between the polynomial @xmath55 and the monic polynomial @xmath56 defined by the forward and backward relations @xmath57 and @xmath58 where @xmath3 and @xmath59 are not perturbed , are both element - wise well - conditioned maps .",
    "* proof*. if we define the perturbations for the forward map as @xmath60=g_a[b(1+\\delta_b),c(1+\\delta_c)],\\ ] ] then the above discussion says that the relative perturbations @xmath61 on the result are @xmath62 if the relative perturbations on the data @xmath63 are @xmath62 . the same reasoning can be applied to the perturbation of the backward map @xmath64=g_a^{-1}[\\alpha(1+\\delta_\\alpha),\\beta(1+\\delta_\\beta)],\\ ] ] which says now that @xmath65 provided @xmath66 , since only multiplications are involved in the backward relations .",
    "this lemma implies that relative small perturbations in the coefficients of @xmath67 can be mapped to relative small perturbations in the coefficients of @xmath31 , both element - wise and norm - wise .",
    "the roots of the polynomial @xmath68 are given by @xmath69 the way that these roots are computed depend now on the values of @xmath47 and @xmath48 .",
    "@xmath70 ( real roots ) @xmath71 2 .",
    "@xmath72 and @xmath73 ( real roots ) @xmath74 3 .",
    "@xmath72 and @xmath75 ( complex conjugate roots ) @xmath76    let us now check that the roots are computed in a forward stable manner .",
    "the error analysis for the operations performed in the ieee floating point standard give the following bounds .",
    "1 .   @xmath70 ( real roots ) @xmath77 2 .",
    "@xmath72 and @xmath73 ( real roots ) @xmath78 3 .",
    "@xmath72 and @xmath75 ( complex conjugate roots ) @xmath79    notice that these bounds imply forward stability for all these computations . combining this with lemma 1",
    ", we have thus shown the following theorem .",
    "the computed roots @xmath80 of the polynomial @xmath67 satisfy the relative forward bounds @xmath81 and the transformed roots @xmath82 satisfy the mixed bounds    @xmath17 + @xmath83 + @xmath84    we can therefore also evaluate the backward bound by recomputing the sum and product of the computed roots . we first point out that the sum and product will be real because even when the two computed roots @xmath85 and @xmath86 are complex they will be exactly complex conjugate .",
    "since the product of the exact roots is @xmath45 , and the computed roots are forward stable , we obviously have that the product of the computed roots satisfies @xmath87 which is element - wise backward stable in a relative sense .    for the sum of the computed roots , it is more problematic . since @xmath88 and both these roots are computed in a forward stable way , we will have that @xmath89 but @xmath85 can be much larger than @xmath47 and the backward error",
    "will then be much larger than @xmath90 .",
    "let us analyze the three cases . for case 3",
    "the sum of the computed roots is _ exactly _",
    "@xmath91 since this is a representable number . in case 2 , @xmath92 and then implies backward stability for the element @xmath47 .",
    "but when @xmath93 we can _ not _ obtain a sufficiently small backward error for since the recomputed sum has an error that is of the order of @xmath94 .",
    "it is in this special case that element - wise backward stability gets lost .",
    "the case where @xmath4 and/or @xmath5 are zero are again easy to handle but the relative error bounds are slightly larger . since exact error bounds are more difficult to describe , we preferred to just indicate their order of magnitude .",
    "let us first treat the case of 0 values .",
    "if @xmath21 , then the roots can be computed as follows @xmath22 which is element - wise backward stable since under the ieee floating point standard , we have that the _ computed _ roots satisfy ( see @xcite ) @xmath95 the backward error then indeed satisfies the relative element - wise bounds @xmath96    if @xmath25 then the roots can be computed as follows @xmath97 which is also element - wise backward stable since under the ieee floating point standard , we have that the _ computed _ roots satisfy ( see @xcite ) @xmath98 the backward error then satisfies the relative element - wise bounds @xmath99    when there are no zero values , we again first apply a scaling of the problem .    * scaling the polynomial @xmath31 * + as in the real case , we scale the coefficients as follows  : @xmath32 , which can be performed in a backward and forward stable way since @xmath10 . according to the ieee floating point standard we have indeed that @xmath100 this implies that we can as well look at the monic polynomial + @xmath101 .    * scaling the variable @xmath37 * + this becomes more complicated for the case of complex coefficients .",
    "we now have that @xmath38 where @xmath39 and @xmath102 .",
    "this implies that we can consider again the polynomial @xmath103 where @xmath44 and @xmath104 .",
    "the formulas to compute @xmath46 , @xmath47 and @xmath48 are @xmath105 where @xmath106 and @xmath107 . for computational reasons",
    ", we will also compute the square root @xmath108 of @xmath48 , i.e. @xmath109 .",
    "we have again a similar lemma describing the transformation between the coefficients of the polynomials    the transformations @xmath110=h_a[b , c ] \\quad \\mathrm{and } \\quad [ b , c]=h_a^{-1}[\\alpha,\\beta , f]\\ ] ] between the polynomial @xmath55 and the monic polynomial @xmath111 defined by the forward and backward relations @xmath112 and @xmath113 where @xmath3 is not perturbed , are both element - wise well - conditioned maps .",
    "* proof*. the proof is very similar , except for the fact that the quantities are complex , except for @xmath47 which is real , and @xmath108 that can be parameterized by a real angle .",
    "this lemma implies again that relative small perturbations in the coefficients of @xmath67 can be mapped to relative small perturbations in the coefficients of @xmath31 , both element - wise and norm - wise .    * calculating the roots * + the roots of the polynomial",
    "are now given by @xmath114 but we need only consider the case where @xmath115 is not real since otherwise we can apply the analysis of the previous section . the algorithm for computing the two roots is to first compute @xmath116 as the root of largest module , and then to compute @xmath117 using @xmath118 . if we compute the square root of the complex number @xmath119 as @xmath120 then the roots are given by @xmath121 the rounding errors can be written as follows    @xmath122 + @xmath123 + @xmath124    where all @xmath125 are of the order of the unit round - off @xmath14 .",
    "these formulas yield that @xmath116 and @xmath117 can be computed in a forward stable way",
    ".    the backward error analysis of these operations will be a problem when @xmath47 is much smaller than @xmath126 .",
    "this leads to the same conclusions as in the case of real coefficients : when the sum of the roots is much smaller than the roots themselves , the relative backward error on the sum can be large , despite the fact that the forward errors on the computation as a function of @xmath47 and @xmath108 are small .",
    "in this section we compare the different types of stability in terms of the constraints that they impose on the computed roots .",
    "first of all , it is obvious that ebs implies ems since ems follows from ebs by just choosing @xmath127    we now prove that ebs implies nbs , which is slightly more involved .",
    "let the computed roots @xmath12 and @xmath13 of @xmath128 satisfy    @xmath17 + @xmath18 + @xmath19    then they also satisfy the norm - wise bound    @xmath129 + @xmath20 -\\left [ \\begin{array}{ccc }   a &   \\hat { \\hat b } & \\hat { \\hat c } \\end{array}\\right ] \\right\\|",
    "\\leq   3 \\delta \\left\\| \\left [ \\begin{array}{ccc }   a & \\hat b & \\hat c \\end{array}\\right]\\right\\| , \\quad \\delta = { \\mathcal o}(u).$ ]    * proof * + it follows from the ems constraints that @xmath130 which yields the bounds @xmath131\\right\\|_2 \\leq   \\delta \\left\\|\\left [ \\begin{array}{ccc } \\ ; 0 ,   & |{\\hat b}| , & |{\\hat c}| \\end{array}\\right]\\right\\|_2 +   \\delta |a|\\left\\|\\left [ \\begin{array}{ccc } \\ ; 0 , \\ ; & |\\tilde x_1|+|\\tilde x_2| , & \\ ; |\\tilde x_1\\tilde x_2| \\ ; \\end{array } \\right]\\right\\|_2.\\ ] ] because of lemma 4 in the appendix we also have @xmath132\\right\\|_2   \\leq \\sqrt{3}\\delta \\left\\|\\left [ \\begin{array}{ccc } \\ ; a ,   & |{\\hat b}| , & |{\\hat c}| \\end{array}\\right]\\right\\|_2\\ ] ] and we finally obtain the norm - wise bound @xmath133\\right\\|_2 \\leq   3 \\delta \\left\\|\\left [ \\begin{array}{ccc } \\ ; a ,   & { \\hat b } , & { \\hat c } \\end{array}\\right]\\right\\|_2.\\ ] ]    we then need to show that in general , ebs can not always be satisfied , i.e. there does not exist any algorithm that achieves this . a counterexample is given by the polynomial @xmath134 where @xmath135 and @xmath136 while @xmath137 .",
    "one easily checks that @xmath47 is a representable number and that the roots of the polynomial are given by the expansion @xmath138 their exactly rounded values are given by the representable numbers @xmath139 which gives a sum equal to the representable number @xmath140 but that yields a relative error of the order of @xmath141 !",
    "moreover , all other representable numbers in the neighborhood of @xmath116 and @xmath117 are on a grid of size @xmath14 and all possible combinations of their sums will still have a comparable relative error .",
    "it is thus impossible to find representable numbers that would satisfy the ebs property .",
    "we tested this routine for the relative backward errors on three sets of 1000 random quadratic polynomials .",
    "we first took random real polynomials , then random complex polynomials , and finally random real polynomials with a very small sum ( of the order of @xmath142 .",
    "the test results are given below .",
    "the first plot clearly shows ebs , since the relative errors of the recomputed sums and products of the roots is of the order of the unit round - off @xmath14 .",
    "the second plot shows the same results for polynomials with complex coefficients .",
    "the third plot shows that for real polynomials @xmath67 with a very small ( but non - zero ) coefficient @xmath47 , ebs can not be ensured by our algorithm .",
    "this is consistent with our analysis that shows that there does not exist any algorithm to ensure ebs for such polynomials .",
    "for any real numbers @xmath3 , @xmath4 and @xmath5 we have the inequality @xmath143 which also implies for @xmath144 that @xmath145\\right\\|_2 ^ 2 \\leq 3 \\left\\|\\left [ \\begin{array}{ccc } \\ ; 1 , \\ ; & ( a+b ) , & \\ ; ab \\ ; \\end{array } \\right]\\right\\|_2 ^ 2 .\\ ] ]    * proof * + the first inequality follows from @xmath146 and @xmath147",
    ".... function [ x1,x2,beta , e , scale ] = quadroot(a , b , c ) % function [ x1,x2,beta , e ] = quadroot(a , b , c )   computes the two roots   % x1 and x2 of a quadratic polynomial ax^2+bx+c=0 in a stable manner beta=[];e=[];scale= [ ] ; % special cases of zero elements if a==0 , return , else b1=b / a;c1=c / a ; end if b==0 , x1=sqrt(-c1);x2=-x1 ; return , end if c==0 , x1=-b1 ; x2=0 ; return , end % generic case   if isreal([b1,c1 ] ) ,      % with real coefficients      c1abs = abs(c1 ) ;      scale = sqrt(c1abs)*sign(b1 ) ;      beta = b1/(2*scale ) ;      e = sign(c1 ) ;      % computing the roots      if e==-1 , y1=beta+sqrt(beta^2 + 1);y2=-1/y1 ;      else ,           if beta > = 1 , y1=beta+sqrt((beta+1)*(beta-1 ) ) ; y2=1/y1 ;          else , im = sqrt((beta+1)*(1-beta));y1=beta+j*im;y2=beta - j*im ;          end      end   else ,      % with complex coefficients      scale = sign(b1)*(sqrt(abs(c1 ) ) ) ;      beta = abs(b1)/(2*sqrt(abs(c1)));f = sqrt(sign(c1))/sign(b1 ) ;      gamma = sqrt((beta - f)*(beta+f ) ) ;      y1=beta+sign(real(gamma))*gamma ;      y2=f^2/y1 ; end x1=-y1*scale;x2=-y2*scale ; ...."
  ],
  "abstract_text": [
    "<S> we show in this paper that the roots @xmath0 and @xmath1 of a scalar quadratic polynomial @xmath2 with real or complex coefficients @xmath3 , @xmath4 @xmath5 can be computed in a element - wise mixed stable manner , measured in a relative sense . </S>",
    "<S> we also show that this is a stronger property than norm - wise backward stability , but weaker than element - wise backward stability . </S>",
    "<S> we finally show that there does not exist any method that can compute the roots in an element - wise backward stable sense , which is also illustrated by some numerical experiments .    </S>",
    "<S> quadratic polynomial , roots , numerical stability </S>"
  ]
}