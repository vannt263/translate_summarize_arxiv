{
  "article_text": [
    "in a distributed storage system a file is dispersed across @xmath0 nodes in a network such that given any @xmath3 of these nodes one can reconstruct the original file .",
    "we also want to have such a redundancy in our network that if we lose a node then any @xmath4 of the remaining nodes can repair the lost node .",
    "we assume that each node stores the amount @xmath5 of information , _",
    "e.g. _ , @xmath5 symbols over a finite field , and in the repair process each repairing node transmits the amount @xmath6 to the new replacing node ( called a _ newcomer _ ) and hence the total repair bandwidth is @xmath7 .",
    "we also assume that @xmath8 .",
    "the repair process can be either functional or exact . by functional repair",
    "we mean that the nodes may change over time , _",
    "i.e. _ , if a node @xmath9 is lost and in the repair process we get a new node @xmath10 instead , then we may have @xmath11 .",
    "if only functional repair is assumed then the capacity of the system , denoted by @xmath12 , is known .",
    "namely , it was proved in the pioneering work by dimakis _",
    "_ @xcite that @xmath13    if the size of the stored file is fixed to be @xmath14 then the above expression for the capacity defines a tradeoff between the node size @xmath5 and the total repair bandwidth @xmath15 .",
    "the two extreme points are called the minimum storage regeneration ( msr ) point and the minimum bandwidth regeneration ( mbr ) point .",
    "the msr point is achieved by first minimizing @xmath5 and then minimizing @xmath15 to obtain @xmath16 by first minimizing @xmath15 and then minimizing @xmath5 leads to the mbr point @xmath17    in this paper we are interested in codes that have exact repair .",
    "the concepts of exact regeneration and exact repair were introduced independently in @xcite , @xcite , and @xcite .",
    "exact repair means that the network of nodes does not vary over time , _",
    "i.e. _ , if a node @xmath9 is lost and in the repair process we get a new node @xmath10 , then @xmath18 .",
    "we denote by @xmath19 the capacity of codes with exact repair with @xmath0 nodes each of size @xmath5 , with total repair bandwidth @xmath15 , and for which each set of @xmath1 nodes can recover the stored file and each set of @xmath2 nodes can repair a lost node .",
    "we have by definition that @xmath20 it was proved in @xcite , @xcite , and @xcite that the codes with exact repair achieve the msr point and in @xcite that the codes with exact repair achieve the mbr point .",
    "the impossibility of constructing codes with exact repair at essentially all interior points on the storage - bandwidth tradeoff curve was shown in @xcite .      in section",
    "[ construction ] we give a construction for codes between msr and mbr points with exact repair . in section [ inequalities ]",
    "we derive some inequalities from our construction .",
    "section [ example ] provides an example showing that , in the special case of @xmath21 , our construction is close to optimal when comparing to the known capacity when only functional repair is required . in section [ analysis ] we show that when the distances of the parameters @xmath0 , @xmath1 , and @xmath2 are fixed but the actual values approach to infinity , the fraction of performance of our codes with exact repair and the known capacity of functional - repair codes approaches to one .",
    "assume we have a storage system @xmath22 with exact repair for parameters @xmath23 with a node size @xmath5 and the total repair bandwidth @xmath24 .",
    "in this section we propose a construction that gives a new storage system for parameters @xmath25 let @xmath22 consist of nodes @xmath26 , and let the stored file @xmath27 be of maximal size @xmath28 .",
    "let then @xmath29 denote a new system consisting of the original storage system @xmath22 and one extra node @xmath30 storing nothing .",
    "it is clear that @xmath29 is a storage system for parameters @xmath31 and can store the original file @xmath27 .",
    "let @xmath32 be the permutations of the set @xmath33 for @xmath34 .",
    "assume that @xmath35 is a storage system for @xmath36 corresponding to the permutation @xmath32 such that @xmath35 is exactly the same as @xmath29 except that the order of the nodes is changed corresponding to the permutation @xmath32 , _",
    "i.e. _ , the @xmath37th node in @xmath29 is the @xmath38th node in @xmath35 .",
    "using these @xmath39 new systems as building blocks we construct a new system @xmath40 such that its @xmath41th node for @xmath42 stores the @xmath41th node from each system @xmath43 for @xmath44 .",
    "it is clear that this new system @xmath40 works for parameters @xmath45 , has exact repair property , stores a file of size @xmath46 and has a node size @xmath47 and total repair bandwidth @xmath48 moreover , because of the symmetry of the construction we have @xmath49 .",
    "this construction implies the inequality @xmath50 that is , @xmath51    [ helppoesim ] if we relax on the typical requirement of a dss to be homogeneous , meaning that each node is transmitting the same amount @xmath6 of information in the repair process , and instead only require that the total repair bandwidth @xmath15 is constant ( _ i.e. , _",
    "@xmath6 may take different values depending on the node ) , then we can build our construction a little easier .",
    "let @xmath52 and @xmath22 be a distributed storage system with exact repair .",
    "let @xmath35 be a storage system with @xmath53 nodes for @xmath54 where the @xmath41th node stores nothing , the @xmath37th node for @xmath55 stores as the @xmath37th node in the original system @xmath22 , and the @xmath37th node for @xmath56 stores as the @xmath57th node in the original system @xmath22 .",
    "that is , in the @xmath41th subsystem @xmath35 the @xmath41th node stores nothing while the other nodes are as those in the original system @xmath22 .    using these four new systems as building blocks",
    "we construct a new system @xmath40 such that its @xmath41th node for @xmath54 stores the @xmath41th node from each system @xmath43 for @xmath58 .",
    "hence each node in @xmath40 stores @xmath59 and the total repair bandwidth is @xmath60 .",
    "for example , if the original system @xmath22 consists of nodes @xmath61 storing @xmath62 , @xmath63 storing @xmath64 , and @xmath65 storing @xmath66 then @xmath67 consists of nodes @xmath68 storing nothing , @xmath69 storing @xmath70 , @xmath71 storing @xmath72 , and @xmath73 storing @xmath74 .",
    "similarly @xmath75 consists of nodes @xmath76 storing @xmath77 , @xmath78 storing nothing , @xmath79 storing @xmath80 , and @xmath81 storing @xmath82 and so on .",
    "then in the resulting system the first node @xmath83 consists of nodes @xmath68 ( storing nothing ) , @xmath76 ( storing @xmath77 ) , @xmath84 ( storing @xmath85 ) , and @xmath86 ( storing @xmath87 ) .",
    "the stored file is @xmath88 .    .",
    "it consists of nodes @xmath83 , @xmath89 , @xmath90 , and @xmath91.,width=340 ]",
    "next we will derive some inequalities for the capacity in the case of exact repair . using equation [ firstbound ]",
    "inductively we get    [ bound ] for an integer @xmath92 $ ] we have @xmath93    it is proved in @xcite , @xcite , and @xcite that the msr point can be achieved if exact repair is assumed . as a consequence of this and theorem [ firstbound ] we get the following bound .    [ boundmsr ] for integers",
    "@xmath94 we have @xmath95    write @xmath96 , @xmath97 , and @xmath98 .",
    "it is proved in @xcite , @xcite , and @xcite that @xmath99 _ i.e. _ , @xmath100    hence by theorem [ bound ] we have @xmath101    now a change of variables by setting @xmath102 gives us the result .",
    "in this section we study the special case @xmath21 and compare it to the known capacity with the assumption of functional repair , @xmath103    now our bound gives @xmath104 so we can write @xmath105 for integers @xmath106 .    notice that now in the extreme points our lower bound achieves the known capacity , _",
    "i.e. _ , @xmath107 for the mbr point and @xmath108 for the msr point .",
    "as an example we study the fraction @xmath109 for integers @xmath110 $ ] .",
    "writing it out we see that @xmath111 where @xmath112    for large values of @xmath0 this is approximately @xmath113 for all @xmath106 .     of our construction ( dotted curve ) between the capacity of functionally repairing codes",
    "( uppermost curve ) and the trivial lower bound given by interpolation of the known msr and mbr points when @xmath114 , @xmath115 , and @xmath116$].,width=340 ]",
    "next we will study the special case where @xmath0 , @xmath1 and @xmath2 are close to each other .",
    "we will do this by setting @xmath117 , @xmath118 and @xmath119 and letting @xmath120 , and then examine how the capacity curve asymptotically behaves .",
    "the example in the previous section showed us that in that special case our bound is quite close to the capacity of functionally regenerating codes .",
    "however , in the previous section we fixed @xmath37 to be an integer and then assumed that @xmath0 is large .",
    "in this section we tie up the values @xmath37 and @xmath121 together to arrive at a situation where the total repair bandwidth stays on a fixed point between its minimal possible value given by the mbr point and its maximal possible value given by the msr point .    for each @xmath121",
    "the bound from theorem [ boundmsr ] gives @xmath122 for @xmath123 , hence in this section we write @xmath124 for integers",
    "@xmath106 and extend this definition for @xmath125 $ ] such that @xmath126 is the piecewise linear curve defined by @xmath127 .",
    "let @xmath128 $ ] be a fixed number and @xmath129 .",
    "we will study how the fraction @xmath130 behaves as we let @xmath120 .",
    "informally this tells how close our lower bound curve and the known capacity curve are to each other when @xmath121 is large , _",
    "i.e. _ , values @xmath131 are close to each other .",
    "in the msr point we have @xmath132 and in the mbr point @xmath133 hence @xmath134    [ asymptotic ] let @xmath128 $ ] be a fixed number and @xmath129 .",
    "then @xmath135    let @xmath129 .",
    "we study the behavior of the fraction for large @xmath121 , so we have @xmath136 .",
    "thus , to simplify the notation , we may assume that @xmath37 acts as an integer .",
    "we also use the notation @xmath137    we have @xmath138 and @xmath139 whence",
    "@xmath140 where @xmath141 @xmath142 @xmath143 and @xmath144    now it is easy to check that @xmath145 @xmath146 and @xmath147 as @xmath148    note that @xmath149 when @xmath121 is large and hence @xmath150 as @xmath148    finally , @xmath151 as @xmath120 , proving the claim .    as a straightforward corollary to theorem [ asymptotic ] we have    [ asymptotic ]",
    "let @xmath152 $ ] be a fixed number and let @xmath153 and @xmath154",
    ". then @xmath155",
    "we have shown in this paper that when @xmath0 , @xmath1 , and @xmath2 are close to each other , the capacity of a distributed storage system when exact repair is assumed is essentially the same as when only functional repair is required .",
    "this was proved by using a specific code construction exploiting some already known codes achieving the msr point on the tradeoff curve and by studying the asymptotic behavior of the capacity curve .",
    "however , when @xmath0 , @xmath1 , and @xmath2 are not close to each other then the bound our construction gives is not good .",
    "so as a future work it is still left to find the precise expression of the capacity of a distributed storage system when exact repair is assumed , and especially to study the behavior of the capacity when @xmath0 , @xmath1 , and @xmath2 are not close to each other .",
    "this research was partly supported by the academy of finland ( grant # 131745 ) and by the emil aaltonen foundation , finland , through grants to camilla hollanti .",
    "salim el rouayheb at the princeton university is gratefully acknowledged for useful discussions .",
    "camilla hollanti at the aalto university is gratefully acknowledged for useful comments on the first draft of this paper .",
    "a. g. dimakis , p. b. godfrey , y. wu , m. j. wainwright , and k. ramchandran , `` network coding for distributed storage systems , '' ieee transactions on information theory , vol .",
    "9 , pp . 4539 - 4551 , september 2010 .",
    "y. wu and a. g. dimakis , `` reducing repair traffic for erasure coding - based storage via interference alignment , '' in _ proc .",
    "ieee international symposium on information theory ( isit ) _ , seoul , july 2009 , pp .",
    "2276 - 2280 .",
    "d. cullina , a. g. dimakis , and t. ho , `` searching for minimum storage regenerating codes , '' in _ proc .",
    "47th annual allerton conference on communication , control , and computing _ , urbana - champaign , september 2009 .",
    "k. v. rashmi , nihar b. shah , and p. vijay kumar , `` optimal exact - regenerating codes for distributed storage at the msr and mbr points via a product - matrix construction , '' _ ieee transactions on information theory _ , vol .",
    "57 , no . 8 , pp . 5227 - 5239 , august 2011 .",
    "nihar b. shah , k. v. rashmi , p. vijay kumar , and k. ramchandran , `` distributed storage codes with repair - by - transfer and nonachievability of interior points on the storage - bandwidth tradeoff , '' _ ieee transactions on information theory _ , vol .",
    "1837 - 1852 , march 2012 .    v.",
    "r. cadambe , s. a. jafar , and h. maleki , `` distributed data storage with minimum storage regenerating codes - exact and functional repair are asymptotically equally efficient . ''",
    "available : arxiv:1004.4299v1 [ cs.it ]"
  ],
  "abstract_text": [
    "<S> in this paper we study distributed storage systems with exact repair . </S>",
    "<S> we give a construction for regenerating codes between the minimum storage regenerating ( msr ) and the minimum bandwidth regenerating ( mbr ) points and show that in the case that the parameters @xmath0 , @xmath1 , and @xmath2 are close to each other our constructions are close to optimal when comparing to the known capacity when only functional repair is required . </S>",
    "<S> we do this by showing that when the distances of the parameters @xmath0 , @xmath1 , and @xmath2 are fixed but the actual values approach to infinity , the fraction of the performance of our codes with exact repair and the known capacity of codes with functional repair approaches to one .    </S>",
    "<S> [ section ] [ section ] [ thm]proposition [ thm]lemma [ thm]corollary [ section ] [ section ] </S>"
  ]
}