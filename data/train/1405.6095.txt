{
  "article_text": [
    "zipper logic is a graph rewrite system .",
    "it consists in a class of graphs , called zipper graphs and a collection of moves ( graph rewrites ) acting on zipper graphs , introduced in section [ szippers ] .",
    "discover more at the http://chorasimilarity.wordpress.com/tag/zipper-logic/[zipper logic tag ] from the author s open notebook .",
    "zipper logic is a variant of the chemlambda @xcite @xcite artificial chemistry , as explained in section [ schemlambda ] . in section [ sturing ]",
    "we prove that zipper logic is turing universal , by showing that it can be used to implement the ski combinatory logic .",
    "because zipper logic , as chemlambda , has only local graph rewrites , we treat with special attention the processes of birth and death of zipper combinator graphs , which replace the global fan - out rewrite move which is needed in ( this graphical version of ) combinatory logic .    in section [ sknots ]",
    "we turn to the exploration of relations between zipper logic and knot diagrammatics .",
    "let s start by defining the zipper graphs . such a graph is made by the basic ingredients described in fig .  [ define_nodes_1 ] and fig .",
    "[ 4_chem ] .",
    "a zipper graph is an oriented graph which has as nodes :    1 .",
    "@xmath0 half - zippers , depicted in the first row of the fig .  [ define_nodes_1 ] ; for any natural number @xmath1 , a @xmath0 half - zipper is a node with @xmath2 arrows , which are ordered , for convenience by numbering them with @xmath3 , @xmath4 , @xmath5 , ... , @xmath6 , such that the arrow numbered by @xmath3 points to the node and the arrows numbered by @xmath4 , @xmath5 , ... , @xmath6 point away from the node ; 2 .   @xmath7 half - zippers , depicted in the second row of the fig .",
    "[ define_nodes_1 ] ; for any natural number @xmath1 , a @xmath7 half - zipper is a node with @xmath2 arrows , which are ordered by numbering them with @xmath3 , @xmath4 , @xmath8 , ... , @xmath9 , such that the arrows numbered by @xmath3 , @xmath8 , ... , @xmath9 point to the node and the arrow numbered by @xmath4 points away from the node ; 3 .",
    "@xmath10 zippers , depicted in the third row of the fig .  [ define_nodes_1 ] ; for any natural number @xmath1 , a @xmath10 zipper is a node with @xmath11 arrows , which are separated into two disjoint sets of @xmath12 arrows ; the first set is formed by the arrows numbered by @xmath3 , @xmath8 , ... , @xmath9 , which point to the node and the second set",
    "is formed by the arrows numbered by @xmath4 , @xmath5 , ... , @xmath6 , which point away from the node ; 4 .",
    "fanout and fanin nodes , described in fig .",
    "[ 4_chem ] ( a ) , ( b ) , are trivalent nodes with a cyclic order of the arrows , 5 .",
    "termination is a univalent node , with an arrow which points to the node , described in fig .",
    "[ 4_chem ] ( c ) .",
    "the arrows connect the nodes .",
    "we may have moreover arrows which point to one of the nodes but which have the origin not connected to any node , or we may have arrows with the origin connected to a node , but with the end free . finally we may have arrows with both ends free , or loops , as described in fig .  [ 4_chem ] ( c ) .    a zipper graph is made by a finite number of nodes , arrows and loops ; it does not have to be connected .",
    "[ defzippergraph ]    the graph rewrites of zipper logic are described in the following figures .",
    "the moves of zipper logic are all reversible .",
    "they act on a bounded number of nodes ( but due to the fact that they act on half - zippers or zippers with an unbounded number of arrows , they may act on any number of arrows ) .",
    "the figures which describe the moves contain only the region , or pattern , which is subjected to the respective move .",
    "they come in several families :    1 .   the click moves , fig .  [ click ] transform pairs of half - zippers into a zipper and possibly a half - zipper ; in the fig .  [ click ] is described a click move which involves a @xmath0 half - zipper and a @xmath13 half - zipper with @xmath14 ; the other cases , namely @xmath15 and @xmath16 are not shown , but they are straightforward to imagine ; 2 .",
    "the zip move , fig .",
    "[ zip ] , is the one which gives the name to the zipper logic , + because it may be imagine as the act of unzipping a zipper , when seen from left to right , or to zip it , when seen from right to left ; 3 .   the tower moves , fig .  [ zipper_not_2 ] , serve to stack half - zippers , 4 .",
    "co - comm , co - assoc and fan - in moves , fig .",
    "[ convention_3 ] , are the same as the ones from chemlambda @xcite @xcite , see also section [ schemlambda ] ; 5 .",
    "the dist moves are described in fig .",
    "[ zip_dist ] . 6 .",
    "the last two rows of fig .",
    "[ convention_4 ] are the local pruning moves for the fanout and fanin nodes from chemlambda , the first two rows of the mentioned figure describe the local pruning moves of half - zippers ;    [ defzippermoves ]",
    "chemlambda is a graph rewrite system , dressed as an artificial chemistry .",
    "it consists into a set of graphs called molecules and a collection of local moves , or graph rewrites .",
    "it has been introduced in @xcite as an alternative to graphic lambda calculus , or glc , @xcite . in chemlambda",
    "there are only local moves , i.e. there is an a priori bound on the number of edges and nodes which are involved in any of the moves .",
    "there is a distributed , decentralized computing model associated to chemlambda ( or glc ) , called distributed glc @xcite . a good introduction to chemlambda , which also emphasizes it s biological like self - multiplication features ,",
    "is @xcite .",
    "\\(a ) in chemlambda , let s define half - zippers as in the fig .",
    "[ zipper_not_1 ] and let s use the click move from the fig .",
    "[ click ] as the definition of a zipper .",
    "then every move from the zipper logic can be realized as a finite sequence of chemlambda moves .",
    "in particular the dist moves for half - zippers show that they are distributors , in a generalized sense , explained in @xcite section `` propagators , distributors , multipliers and guns '' .",
    "\\(b ) in zipper logic , let s define the lambda abstraction node as a @xmath17 half - zipper , the application node as a @xmath18 half - zipper .",
    "then the moves click followed by zip is the beta move from chemlambda , the tower and click moves serve to translate from zipper graphs to chemlambda molecules and the rest of the moves , used only with 1 half zippers , are exactly the moves of chemlambda .",
    "[ ptranslate ]    we leave the proof to the reader , instead of giving detailed explanations , because it is simply a matter of comparison of graph rewrites from the two formalisms",
    ". please use @xcite section `` the chemlambda formalism '' , figures 1 - 5 , as reference for the chemlambda moves .",
    "from proposition [ ptranslate ] we get that zipper logic and chemlambda are equivalent . in particular , it follows that zipper logic is turing universal , as chemlambda , because it contains combinatory logic .    however , the zipper logic may be more intuitive than chemlambda . let s see how the ski system of combinators appear and function in zipper logic .",
    "the set of zipper combinators is the smallest set of zipper graphs with the properties :    1 .   it contains the s , k , i zipper graphs defined in fig  [ zipper_not_6 ] , 2 .   for any natural number @xmath19 and for any @xmath12 zipper combinators ,",
    "the zipper graph obtained by connecting the out arrows of the zipper combinators to the in arrows of the @xmath7 half - zipper is a zipper combinator .",
    "any zipper graph which is obtained by applying a zipper logic move to a zipper combinator is a zipper combinator .",
    "[ dzippercombi ]    for any two zipper combinators @xmath20 , @xmath21 , the zipper combinator @xmath22 is obtained by connecting @xmath20 and @xmath21 to a @xmath18 half - zipper .",
    "more generally , from any @xmath12 zipper combinators @xmath23 , ... , @xmath24 , we obtain the zipper combinator @xmath25 described in fig .  [ appli ] .",
    "[ [ birth - and - death - of - zipper - combinators . ] ] birth and death of zipper combinators .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we shall need the following lemmata , which describe how zipper combinators multiply or die .",
    "any zipper combinator is a multiplier , i.e. for any zipper combinator @xmath20 , the graph obtained by connecting the out arrow of @xmath20 to the entry arrow of a fanout node transforms by a finite sequence of zipper logic moves into two copies of @xmath20 .",
    "[ lmulti ]    [ [ proof . ] ] proof .",
    "+ + + + + +    suppose that the zipper combinator @xmath20 is formed by @xmath12 zipper combinators @xmath23 , ... , @xmath24 connected to a @xmath7 half - zipper .",
    "use then the dist move for @xmath26 half - zippers from fig .",
    "[ zip_dist ] , and remark that if @xmath23 , ... , @xmath24 are multipliers then @xmath20 is a multiplier . from the definition [ dzippercombi ] it follows that in order to prove our lemma , it is sufficient to prov that @xmath27 , @xmath28 and @xmath29 zipper combinators are multipliers . but this has been shown several times in previous articles .",
    "this is related to @xcite section `` propagators , distributors , multipliers and guns '' . in the step 2 of the proof of theorem 4.2 @xcite",
    "there is such a detailed proof , only the formalisms differ slightly , i.e. in the mentioned reference it is used chemlambda , while here we use zipper logic , moreover there was used the bckw system of combinators , while here it is used the ski system of combinators .",
    "that is why we leave the completion of the rest of the proof to the interested reader .",
    "@xmath30    for any zipper combinator @xmath20 , the graph obtained by connecting the out arrow of @xmath20 with a termination node can be reduced , by a finite number of moves , to a graph formed by a finite number of loops ( or the empty graph ) .",
    "see fig .",
    "[ zipd_5 ] . [ ldie ]",
    "[ [ proof.-1 ] ] proof .",
    "+ + + + + +    consider the zipper combinator obtained from @xmath12 zipper combinators @xmath23 , ... , @xmath24 connected to a @xmath7 half - zipper , then connect the out arrow of this zipper combinator to a termination node . by the loc pruning move from fig .",
    "[ convention_4 ] , second row , we can reduce this graph to the collection of @xmath23 , ... ,",
    "@xmath24 , each connected to a termination node .",
    "for progressing further we shall use the following `` trick '' , described in fig .",
    "[ zipd_6 ] , which will be used to pass over a ( + ) half - zipper connected to a termination node .    in the second part of the proof we use the `` trick '' for the zipper combinators @xmath31 and @xmath27 connected to a termination node . in the case of the @xmath29 combinator",
    ". we can transform it into one loop , as described in fig .",
    "[ zipd_7 ] .",
    "the first blue arrow represents the `` trick '' .",
    "the same trick is used for transforming the @xmath28 zipper combinator , connected to a termination node , into two loops , fig .",
    "[ zipd_8 ] .",
    "the zipper combinator @xmath27 , connected to a termination node , is transformed into three loops , starting by the same trick , fig .",
    "[ zipd_9 ] .",
    "@xmath30    consider the set of all zipper combinators , with the relation `` @xmath32 '' meaning that there is a finite sequence of zipper logic moves which transforms @xmath20 into @xmath21 and a finite number of loops , and with the operation @xmath22 as defined in the fig .",
    "[ appli ] .",
    "then we have the relations :    1 .",
    "@xmath33 for any zipper combinator @xmath20 , 2 .",
    "@xmath34 for any zipper combinators @xmath35 , 3 .   @xmath36 for any zipper combinators @xmath37 , 4 .   @xmath38 .",
    "[ tzipc ]    [ [ proof.-2 ] ] proof .",
    "+ + + + + +    we start by proving ( a ) , ( b ) and ( d ) .",
    "then we prove ( c ) as a consequence of the fact that zipper combinators are multipliers .",
    "the proof of ( a ) is given in fig .",
    "[ zipper_not_7 ] .",
    "the proof of ( b ) is given in fig .",
    "[ zipper_not_10 ] . on the second row of the figure ,",
    "the move from right to left is the one from lemma [ ldie ] , which transforms the zipper combinator @xmath21 connected to a termination node into a finite collection of loops .",
    "the proof of ( d ) is given in fig .",
    "[ zipper_not_11 ] .    for the proof of ( c ) see fig .",
    "[ zipper_not_12 ] .",
    "the `` fan - out '' move from the second row of the figure is the one which multiplies the zipper combinator @xmath39 , according to the lemma [ lmulti ] .",
    "the fact that there are relations between knots and tangles diagrams and graph rewrites systems which are close to zipper logic has been already noticed . in the article which introduces glc ( or `` graphic lambda calculus '' ) @xcite , in the section 6 , see also theorem 6.1 , is proved that glc has a sector which is equivalent with the formalism of locally planar oriented crossings diagrams with the oriented reidemeister moves . in this sector",
    "we represent an oriented crossing as a pair of two nodes , lambda abstraction and application . in @xcite ,",
    "section 5 , are discussed various connections between a topological version of glc and knot diagrammatic notations for lambda calculus or for topological quantum computations . in the last section of @xcite ,",
    "there is proposed another encoding of an oriented crossing , as a pair fanout and application nodes , which leads to a graph rewrite formalism over oriented knots or tangle diagrams , with a lambda abstraction trivalent node added , along with a termination univalent node .    the zipper logic formalism can be transformed into a graph rewriting formalism over knots or tangles diagrams , with the trivalent fanin and fanout nodes added , along with the univalent termination node .",
    "indeed , let s define half - zippers like in the fig .",
    "[ zipper_loop_1 ] .",
    "the dotted lines represent arcs which are only virtually there .",
    "their advantage is that we can see the click move , in the realm of knot diagrams , as a move which transforms virtual arcs into real , connected arcs , see fig .",
    "[ zipper_loop_2_n ] .        the connections between knot diagrammatics and lambda calculus started by the article kauffman @xcite , where in section 5 knot diagrams are used as notations for combinatory logic terms .",
    "see also @xcite where knot automata are introduced .",
    "the most recent discussion concerning diagrammatic methods for representing quantum processes and quantum computing is to be found in @xcite . another interesting , related research thread is the one of tangle machines by carmi and moskovich @xcite @xcite . in all these articles",
    "knot diagrams are used as a notational device for computations .",
    "the topology appears as related to the invariance of these computations , in the sense that knot diagrams which are related by a sequence of reidemeister moves describe the same computation . in few words , in this case we may say that `` topology does not compute , but is an invariant '' .    in contradistinction , in the knot diagrams sector of glc , or in the topological version of glc",
    "the topology does compute .",
    "this means that ( some of the ) reduction moves appear as graph rewrites on knot diagrams which change their topology .",
    "for example the graphic beta move is a crossing smoothing move in the knot diagrams sector of glc",
    ".    it would be interesting to explore in more detail this distinction  topology does not compute vs topology does compute  for the benefit of all these diagrammatic formalism . the distinction may turn out to be more subtle .",
    "for example , kauffman bracket polynomial algorithm @xcite uses a combination of skein relations and smoothing moves , thus , as remarked in @xcite , section 5 , `` this is similar to allowing free beta reduction in the lambda calculus graphs .",
    "[ ... ] an analogous situation could occur in glc where one would need the average over all the results of the many branching calculations . ''",
    "there exist probably overarching formalisms , which blend the two roles of topology in knot diagrammatics related to logic , waiting to be discovered .",
    "m. buliga and l. h. kauffman .",
    "chemlambda , universality and self - multiplication .",
    "http://arxiv.org/abs/1403.8046[arxiv:1403.8046 ] , to appear in proceedings of artificial life conference summer 2014 .",
    "2014 .",
    "l. h. kauffman , knot automata .",
    "proceedings of the twenty - fourth international symposium on multiple - valued logic , 1994 , boston , massachusetts , p. 328 - 333 , http://homepages.math.uic.edu/~kauffman/knotautomata.pdf[(pdf ) ]"
  ],
  "abstract_text": [
    "<S> zipper logic is a graph rewrite system , consisting in only local rewrites on a class of zipper graphs . </S>",
    "<S> connections with the chemlambda artificial chemistry and with knot diagrammatics based computation are explored in the article .    </S>",
    "<S> 16.5 cm    -2.5 cm    20.8 cm    [ section ]    [ theorem]proposition    [ theorem]lemma    [ theorem]corollary    [ theorem]definition    [ theorem]remark    [ section ] </S>"
  ]
}