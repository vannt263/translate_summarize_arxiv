{
  "article_text": [
    "let @xmath5 be a directed graph with @xmath0 vertices and abstract arc - lengths @xmath6 .",
    "the length of a walk in @xmath5 is the sum of the arc - lengths along the walk .",
    "we assume that @xmath5 has no cycle of negative length .",
    "the between two vertices @xmath7 and @xmath8 of @xmath5 , denoted by @xmath9 , is the minimum length over all paths in @xmath5 from @xmath7 to @xmath8 . while it is common to use the term distance ,",
    "this is not necessarily a metric .",
    "this scenario is an extension of the more common case where the graph @xmath5 is undirected and the lengths are positive . in that case",
    "@xmath10 is indeed a metric .    in this paper",
    "we are interested in computing basic information about the distances between vertices in the graph @xmath5 .",
    "the of @xmath5 is @xmath11 the of @xmath5 is @xmath12 and , for any @xmath13 , the of @xmath5 is @xmath14    for undirected graphs , the value @xmath15 is essentially equivalent to the average distance in the graph and the so - called _ wiener index_. the wiener index is a basic topological index used in mathematical chemistry with thousands of publications .    computing the diameter , the sum of the pairwise distances , or the distance counter of a graph is a fundamental problem in graph algorithms .",
    "the obvious way to compute them is via solving the all - pairs shortest path problem ( apsp ) explicitly and then extract the relevant information .",
    "a key question is whether one can avoid the explicit computation of all the pairwise distances .",
    "roditty and vassilevska williams  @xcite show that , for arbitrary graphs with @xmath0 vertices and @xmath16 edges , one can not compute the diameter in @xmath17 time , for some constant @xmath18 , unless the strong exponential time hypothesis ( seth ) fails .",
    "in fact , their proof shows that for undirected , unweighted graphs we can not distinguish in @xmath17 time between sparse graphs that have diameter @xmath19 or @xmath20 , assuming the seth .",
    "this implies the same conditional lower bound for computing the sum of the pairwise distances or the distance counter in sparse graphs .",
    "indeed , an unweighted graph @xmath5 of @xmath0 vertices has diameter @xmath19 if and only if @xmath21 similarly such a graph @xmath5 has @xmath22 if and only if @xmath5 has diameter @xmath19 .",
    "thus , if we could compute the sum of pairwise distances or the distance counter for sparse graphs in @xmath17 time , we could also distinguish in the same time whether the graph has diameter @xmath19 or larger , and the seth fails .",
    "given such conditional lower bounds , it is natural to shift the interest towards identifying families of sparse graphs where one can compute the diameter or the sum of pairwise distances in truly subquadratic time .",
    "here we provide subquadratic algorithms for directed , planar graphs with no negative cycles .",
    "more precisely , we show that the diameter and the sum of the pairwise distances can be computed in @xmath1 expected time , while the distance counter can be computed in @xmath2 expected time",
    ". there are efficient algorithms for computing all the distances in a planar graph  @xcite or a specified subset of the distances ; see for example  @xcite .",
    "however , none of these tools seem fruitful for computing our statistics in subquadratic time .",
    "note that our algorithms are the first algorithms using time @xmath3 for some constant @xmath4 , even when restricted to undirected , unweighted planar graphs .",
    "[ [ related - work . ] ] related work .",
    "+ + + + + + + + + + + + +    for graphs of bounded treewidth one can compute the diameter and the sum of pairwise distances in near - linear time  @xcite . the distance counter for graphs of bounded treewidth",
    "can be handled using the same techniques .",
    "recently , husfeldt  @xcite has looked at the problem of computing the diameter for undirected , unweighted graphs parameterized by the treewidth and the diameter .    for planar graphs ,",
    "wulff - nilsen  @xcite gives an algorithm to compute the diameter and the sum of pairwise distances in unweighted , undirected planar graphs in @xmath23 time , which is slightly subquadratic .",
    "wulff - nilsen  @xcite extends the result to weighted directed planar graphs with a time bound of @xmath24 .",
    "note that the running time of these algorithms is not of the type @xmath3 for any constant @xmath25 .",
    "researchers have also looked into near - optimal approximations . in particular , weimann and yuster",
    "@xcite provide a @xmath26-approximation to the diameter of undirected planar graphs in @xmath27 time . as it was mentioned in  @xcite , a near - linear time randomized @xmath26-approximation to the sum of pairwise distances in undirected planar graphs",
    "can be obtained using random sampling and an oracle for @xmath26-approximate distances  @xcite .",
    "see  @xcite for the average distance in arbitrary discrete metric spaces .",
    "[ [ our - approach . ] ] our approach .",
    "+ + + + + + + + + + + + +    let us describe the high - level idea of our approach .",
    "the main new ingredient is the use of additively - weighted voronoi diagrams in pieces of the graph : we make a quite expensive preprocessing step in each piece that permits the efficient computation of such voronoi diagrams in each piece for several different weights .    to be more precise , let @xmath5 be a planar graph with @xmath0 vertices .",
    "we first compute an @xmath28-division : this is a decomposition of @xmath5 into @xmath29 pieces , each of them with @xmath30 vertices and @xmath31 boundary vertices .",
    "this means that all the interaction between a piece @xmath32 and the complement goes through the @xmath31 boundary vertices of @xmath32 .",
    "consider a piece @xmath32 and a vertex @xmath7 outside @xmath32 .",
    "we would like to break @xmath32 into regions according to the boundary vertex of @xmath32 that is used in the shortest path from @xmath7 .",
    "this can be modeled as an additively - weighted voronoi diagram in the piece : each boundary vertex is a weighted site whose weight equals the distance from @xmath7 .",
    "thus , we have to compute several such voronoi diagrams for each piece .    assuming that a piece is embedded , one can treat such a voronoi diagram as an abstract voronoi diagram an encode it using the dual graph . in particular",
    ", a bisector corresponds to a cycle in the dual graph .",
    "we can precompute all possible voronoi diagrams for @xmath33 sites , and that information suffices to compute the voronoi diagram using a randomized incremental construction .",
    "once we have the voronoi diagram , encoded as a subgraph of the dual graph , we have to extract the information from each voronoi region .",
    "although this is the general idea , several technical details appear .",
    "for example , the technology of abstract voronoi diagrams can be used only when the sites are cofacial .",
    "we remark that our algorithms actually compute information for the distances from each vertex @xmath7 of @xmath5 separately .",
    "thus , for each vertex @xmath7 we compute the furthest vertex from @xmath7 , the sum of the distances from @xmath7 to all vertices , and the number of vertices at distance at most @xmath34 from @xmath7 , for a given @xmath13 . our main result",
    ", theorem  [ thm : main ] , is stated to make this clear .",
    "[ [ assumptions . ] ] assumptions .",
    "+ + + + + + + + + + + +    we will assume that the distance between each pair of vertices is distinct and there is a unique shortest path between each pair of vertices .",
    "this can be enforced with high probability using infinitesimal perturbations or deterministically using lexicographic comparison ; see for example the discussion in  @xcite .",
    "since we are aiming to a randomized algorithm and our running times are barely subquadratic , the actual method that is used is not very relevant .    [",
    "[ roadmap . ] ] roadmap .",
    "+ + + + + + + +    we assume that the reader is familiar with planar graphs . in the next section",
    "we explain the notation and some basic background . in section  [ sec : dualcycle ] we explain how to extract information about the vertices contained in a dual cycle . in section  [ sec : avd ] we explain the concept of abstract voronoi diagrams . in section  [ sec : gvd ] we deal with different definitions of voronoi diagrams in plane graphs and show that they are equivalent . in section  [ sec : algorithms ]",
    "we discuss the algorithmic aspects of computing voronoi diagrams .",
    "in particular , we make an expensive preprocessing to be able to produce voronoi diagrams faster . in section  [ sec : datastructure ] we give the data structure that will be used for each piece of an @xmath28-division . in section  [ sec : together ] we give the final algorithms for planar graphs .",
    "we conclude with a discussion .",
    "for running times , we use the notation @xmath35 when we skip polylogarithmic factors in any of the parameters that appears in the statement . for example , if @xmath0 appears in the discussion , @xmath36 means @xmath37 for some constant @xmath38 .    for each natural number @xmath0",
    ", we use the notation @xmath39=\\{1,\\dots , n\\}$ ] . for each set @xmath40",
    ", we use @xmath41 for its closure and @xmath42 for its interior .    [ [ graphs . ] ] graphs .",
    "+ + + + + + +    graphs considered in this paper are directed .",
    "we use @xmath43 and @xmath44 for the vertex and the arc set of a graph @xmath5 , respectively .",
    "we use the notation @xmath45 or @xmath46 to denote arcs .",
    "the tail of an arc @xmath45 is @xmath7 , and @xmath8 is the head .",
    "we use @xmath47 for the reversal of the arc @xmath46 . in some cases",
    "we may have parallel arcs .",
    "it should be clear from the context which arc we are referring to .",
    "when the orientation of the arc @xmath45 is not relevant , we may use @xmath48 and refer to it as an ( undirected ) edge .    a closed walk in @xmath5",
    "is a sequence @xmath49 of arcs with the property that the tail of @xmath50 is the head of @xmath51 for all @xmath52 $ ] ( indices modulo @xmath53 ) .",
    "sometimes a closed walk is given as a sequence of vertices .",
    "this uniquely defines the closed walk if there are no parallel edges .",
    "a cycle is a closed walk that does not repeat any vertex . in particular",
    ", a cycle can not repeat any arcs .",
    "we make it clear that the walk @xmath54 is a cycle .",
    "[ [ planarity . ] ] planarity .",
    "+ + + + + + + + + +    a is a planar graph together with a fixed embedding .",
    "the arcs @xmath46 and @xmath47 are assumed to be embedded as a single curve with opposite orientations . in the arguments",
    "we will use the geometry of the embedding and the plane quite often .",
    "for example , we will talk about the faces enclosed by a cycle of the graph .",
    "however , all the computations can be done assuming a combinatorial embedding , described as the circular order of the edges incident to each vertex .",
    "let @xmath55 be the dual graph of a plane graph @xmath5 .",
    "we may consider @xmath55 with oriented arcs or with edges , depending on the context .",
    "we keep in @xmath55 any parallel edges that may occur . when @xmath5 is 2-connected , the graph @xmath55 has no loops . for each vertex @xmath56 and edge @xmath46 of @xmath5",
    ", we use @xmath57 and @xmath58 to denote their dual counterparts , respectively . for any set of edges @xmath59",
    ", we use the notation @xmath60 .",
    "we assume natural embeddings of @xmath5 and @xmath55 where each dual edge @xmath58 of @xmath55 crosses @xmath5 exactly once and does so at @xmath46 .",
    "there are no other types of intersections between @xmath5 and @xmath55 .",
    "see figure  [ fig : dual ] for an example . if we would prefer to work with an actual embedding and coordinates , instead of a combinatorial embedding",
    ", we could do so . to achieve this , for each edge @xmath46 of @xmath5",
    ", we subdivide @xmath46 and @xmath58 with a common vertex @xmath61 .",
    "then we obtain a planar graph @xmath62 that contains a subdivision of @xmath5 and a subdivision of @xmath55 .",
    "we can now embed @xmath62 with straight - line segments in an @xmath63 regular grid  @xcite . in this way we obtain an embedding of @xmath5 and an embedding of @xmath55 with the property that each edge and each dual edge is represented by a two - segment polygonal curve , and @xmath46 and @xmath58 cross as desired . with this embedding",
    "we can carry out actual operations using coordinates .",
    "( in black with dots for the vertices ) and its dual @xmath55 ( in red with squares for the vertices )",
    ". the dual vertex @xmath64 corresponding to the outer face of @xmath5 is not drawn .",
    "dual edges with an endpoint at @xmath64 are represented using arrows . ]",
    "vertices of @xmath5 are usually denoted by @xmath65 .",
    "faces of @xmath5 are usually denoted by symbols like @xmath66 and @xmath67 .",
    "the dual vertices are usually denoted using early letters of the latin alphabet , like @xmath68 and @xmath69 .",
    "we use @xmath64 for the dual vertex representing the outer face . we will denote cycles and paths in the dual graph with greek letters , such as @xmath70 and @xmath71 .",
    "sets of cycles and paths in the dual graph are with capital greek letters , like @xmath72or @xmath73 .    quite often we identify a graph object and its geometric representation in the embedding .",
    "in particular , ( closed ) walks in the graph define ( closed ) curves in the plane .",
    "we say that a closed walk @xmath70 in @xmath55 is if there is an infinitesimal perturbation @xmath74 of the curve @xmath70 that makes it simple .",
    "if @xmath70 is simple , we can take @xmath75 .",
    "for each simple closed curve @xmath70 in the plane , let @xmath76 be the bounded domain of @xmath77 , and let @xmath78 be the unbounded one .",
    "for each closed , non - crossing closed walk @xmath70 in the dual graph @xmath55 , let @xmath79 and @xmath80 .",
    "note that since @xmath70 is a walk in @xmath55 , the vertices of @xmath43 are far away from @xmath70 and it does not matter which infinitesimal perturbation @xmath74 of @xmath70 we use . see figure  [ fig : vint ] for an example     in the graph of figure  [ fig : dual ] is drawn in thick green .",
    "the vertices of @xmath81 are marked with crosses . ]    [ [ distances - in - graphs . ] ] distances in graphs .",
    "+ + + + + + + + + + + + + + + + + + + +    in this paper we allow that the arcs have negative lengths @xmath82 .",
    "however , the graphs can not have negative cycles , that is , cycles of negative length . in our approach",
    "we need that subpaths of shortest paths are also shortest paths .    for a graph @xmath5",
    ", a a vertex @xmath83 is a tree @xmath84 that is a subgraph of @xmath5 and satisfies @xmath85 for all @xmath86 .",
    "a a vertex @xmath83 is a tree @xmath84 that is a subgraph of @xmath5 and satisfies @xmath87 for all @xmath86 .",
    "for all graphs considered in this paper we assume that , whenever we have an arc @xmath46 , we also have its reversed arc @xmath47",
    ". we can ensure this by adding arcs with large enough length such that , if any shortest path uses them , this is detected .",
    "similarly , adding edges , we can assume that the graphs that we are considering are connected .",
    "for a given graph @xmath5 with edge lengths @xmath88 , we use @xmath89 for the reversed graph , that is , the graph @xmath5 with edge lengths @xmath90 .",
    "a shortest - path tree from @xmath28 in @xmath89 is the reversal of a shortest - path tree to @xmath28 in @xmath5 .",
    "thus , as far as computation is concerned , there is no difference between computing shortest - path trees from or to a vertex .",
    "[ [ vertex - based - information . ] ] vertex - based information .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + +    consider a graph @xmath5 .",
    "for each vertex @xmath91 , each subset @xmath92 , and each real value @xmath34 , we define @xmath93 our main results will compute these values for all vertices @xmath91 when @xmath5 is planar and @xmath94 .",
    "clearly we have @xmath95",
    "for the rest of this section , let @xmath5 be a plane graph with @xmath0 vertices .",
    "in this section we are not concerned with distances . instead , we are concerned with vertex - weights .",
    "assume that each vertex @xmath7 of @xmath5 has a weight @xmath96 .",
    "for each subset @xmath97 of vertices and each value @xmath13 we define @xmath98    let @xmath70 be a non - crossing closed walk in the dual graph @xmath55 .",
    "we are interested in a way to compute @xmath99 @xmath100 , and @xmath101 _ locally _ , after some preprocessing of @xmath5 and @xmath55 . here , locally means that we would like to just look at the edges of @xmath70 . in the following , we assume that any non - crossing closed walk @xmath70 in @xmath55 is traversed clockwise .    in the next section we concentrate on the computation of @xmath102 and",
    "then explain how to use it to for computing @xmath103 . in section  [ sec : max",
    "] we discuss the computation of @xmath103      we start adapting the approach by park and phillips  @xcite and patel  @xcite , which considered the computation of @xmath102 when @xmath104 for all @xmath91 .",
    "we summarize the ideas in the next lemma to make it self - contained .",
    "while most of the paper is simpler for undirected graphs , in the next lemma we do need the directed edges of the dual graph .",
    "we are not aware of a similar statement that would work using the undirected dual graph .",
    "[ le : sumweights ] let @xmath5 be a plane graph , directed or not , and let @xmath105 be a fixed vertex in @xmath5 . in linear time we can compute a weight function @xmath106 with the following property",
    ". for every non - crossing closed walk @xmath70 in the dual graph @xmath55 that is oriented clockwise and contains @xmath105 in its interior , we have @xmath107    take any spanning tree @xmath84 of @xmath5 rooted at @xmath105 , and orient the arcs away from @xmath105 .",
    "for example , a bfs tree of @xmath5 from @xmath105 . for each node @xmath86 , let @xmath108 be the subtree of @xmath84 rooted at @xmath8 . see figure  [ fig : sumweights ] , left . for each vertex @xmath109",
    "we proceed as follows .",
    "let @xmath7 be the parent of @xmath8 and let @xmath110 be the dual arc that crosses @xmath45 from left to right .",
    "then we assign @xmath111 and @xmath112 . for any dual edge @xmath113 of @xmath114 we set @xmath115 .",
    "this finishes the description of the function @xmath116 .",
    "it is easy to see that we can compute @xmath116 in linear time .    from the definition of @xmath116 we have @xmath117    .",
    "left : orientation of the edges of @xmath84 .",
    "the dart @xmath110 crosses @xmath45 from left to right and thus @xmath118 .",
    "right : the crossings of @xmath70 and @xmath119 alternate between left - to - right and right - to - left , as we walk along @xmath119 . ]",
    "let @xmath74 be an infinitesimal perturbation of @xmath70 that is simple .",
    "we then have @xmath120 and @xmath121 .",
    "consider any vertex @xmath122 of @xmath43 and let @xmath119 be the path in @xmath84 from @xmath105 to @xmath122 . since @xmath105 is in @xmath123 and @xmath74",
    "is a simple curve , the crossings between @xmath119 and @xmath74 , as we walk along along @xmath119 , alternate between left - to - right and right - to - left crossings .",
    "see figure  [ fig : sumweights ] , right . since @xmath74 defines a simple curve ,",
    "the number of crossings is even if @xmath122 is in @xmath123 and odd otherwise .",
    "it follows that @xmath124 contributes to the sum on the right side of equation either once , if @xmath122 is in @xmath125 , or zero times , if @xmath122 is in @xmath123 .",
    "the result follows .",
    "lemma  [ le : sumweights ] can also be used to compute @xmath99 because @xmath126 .",
    "we would like a data structure to quickly handle non - crossing closed walks in the dual graph that will be described compactly .",
    "more precisely , at preprocessing time we are given a family @xmath127 of walks in @xmath55 , and the non - crossing closed walk will be given as a concatenation of some subwalks from @xmath73 . using the function @xmath128 and partial sums over the edges @xmath46 of each prefix of a walk in @xmath73",
    "we get the following result .",
    "[ thm : sumweights ] let @xmath5 be a plane graph with @xmath0 vertices and vertex - weights @xmath129 .",
    "let @xmath105 be a vertex of @xmath5 .",
    "let @xmath127 be a family of walks in @xmath55 with a total of @xmath130 edges , counted with multiplicity .",
    "after @xmath131 preprocessing time , we can answer the following type of queries : given a non - crossing closed walk @xmath70 in @xmath55 , described as a concatenation of @xmath53 subpaths from @xmath73 , and with the property that @xmath70 is oriented clockwise and contains @xmath105 in its interior , return @xmath132 in @xmath133 time .",
    "we compute for @xmath5 the function @xmath116 of lemma  [ le : sumweights ] . for each walk",
    "@xmath134 of @xmath73 we proceed as follows .",
    "let @xmath135 be the arcs of @xmath134 , as they appear along the walk @xmath134 , and define the partial sums @xmath136=\\sum_{t=1}^j \\chi(e(i , t))$ ] for @xmath137 .",
    "it is also convenient to define @xmath138=0 $ ] .",
    "the values @xmath139 , \\dots , s[i , m_i]$ ] can be computed in @xmath140 time using that @xmath136= s[i , j-1]+ \\chi(e(i , j))$ ] for @xmath137 . repeating the procedure for each @xmath141",
    ", we have spent a total of @xmath131 time .",
    "this finishes the preprocessing .",
    "consider a non - crossing closed walk @xmath70 in @xmath55 given as the concatenation of @xmath53 walks @xmath142 , each of them a subpath of some path in @xmath73 .",
    "each @xmath143 in the description of @xmath70 is of the form @xmath144 for some index @xmath145 ( so @xmath143 is a subpath of @xmath146 ) and some indices @xmath147 with @xmath148 .",
    "then we have @xmath149 - s[i(t),j_1(t)-1].\\ ] ] because of the properties of @xmath116 in lemma  [ le : sumweights ] we have @xmath150 - s[i(t),j_1(t)-1 ] .",
    "\\end{aligned}\\ ] ] it follows that we can compute @xmath151 in @xmath133 time , and therefore we can also obtain @xmath99 in the same time bound .",
    "we now look into the case of computing @xmath103 . using a binary search on @xmath152",
    "we achieve the following result .",
    "note that in the following result the dependency in @xmath0 increases .",
    "[ cor : countweight ] consider the setting of theorem  [ thm : sumweights ] .",
    "after @xmath153 preprocessing time , we can answer the following type of queries : given a value @xmath13 and a non - crossing closed walk @xmath70 in @xmath55 , described as a concatenation of @xmath53 subpaths from @xmath73 , and with the property that @xmath70 is oriented clockwise and contains @xmath105 in its interior , return @xmath154 in @xmath155 time .",
    "we sort the @xmath0 weights @xmath152 and store them in an array .",
    "let @xmath156 be the resulting weights , so that @xmath157 . for @xmath158 , we define the weight function @xmath159 by @xmath160 then , we apply theorem  [ thm : sumweights ] for each of the weight functions @xmath161 .",
    "this finishes the preprocessing .    to compute @xmath101 for a given @xmath13",
    ", we make a a binary search in @xmath162 to find @xmath163 and then use the data structure for the weight function @xmath159 to get @xmath164 thus , a query boils down to a ( standard ) binary search followed by a single query to the data structure of theorem  [ thm : sumweights ] .",
    "therefore the query time is @xmath155 .",
    "the proof of lemma  [ le : sumweights ] heavily uses that the sum has an inverse operation .",
    "we are not aware of any such result for computing the maximum weight , @xmath100 or @xmath165 .",
    "we could do something similar as we did in the proof of corollary  [ cor : countweight ] , namely , a binary search in @xmath152 to find the largest weight inside @xmath81 .",
    "however , the extra preprocessing time in corollary  [ cor : countweight ] , as compared to the preprocessing time of theorem  [ thm : sumweights ] , leads to a worst running time in our target application .",
    "we will develop now a different approach that works for a special type of closed walks that we have in our application .",
    "let @xmath105 be a vertex of @xmath5 and let @xmath166 be a spanning tree of @xmath5 rooted at @xmath105 .",
    "we say that a cycle @xmath70 in the dual graph @xmath55 is if the root @xmath105 is in @xmath76 and , for each vertex @xmath8 in @xmath81 , the whole path in @xmath166 from @xmath105 to @xmath8 is contained in @xmath76 .",
    "( note that the concept is not meaningful for closed walks that repeat some vertex ; hence our restriction to cycles for the time being . )",
    "we define the following family of dual cycles : @xmath167    [ le : maxweight ] there is a weight function @xmath168 with the following properties :    * for every cycle @xmath169 of @xmath170 that is oriented clockwise @xmath171 * a representation of the function @xmath172 can be computed in linear time . * for any two dual edges @xmath113 and @xmath173 of @xmath55 , the value @xmath174 can be obtained in constant time .    in this proof , for each vertex @xmath56 , we use @xmath175 $ ] to denote the path in @xmath166 from @xmath105 to @xmath56 .    for a dual arc @xmath58 ,",
    "let @xmath176 be intersection point of @xmath46 and @xmath58 , let @xmath177 be the vertex of @xmath46 to the right of @xmath58 , and let @xmath178 be the curve obtained by the concatenation of @xmath179 $ ] and the portion of @xmath46 from @xmath177 to @xmath176 . see figure  [ fig : maxweight1 ] , left .",
    "in the proof of lemma  [ le : maxweight ] . left : notation for a dual edge @xmath58 .",
    "the path @xmath178 is thicker .",
    "middle : the region @xmath180 .",
    "we mark the portion of @xmath166 that is included in @xmath180 .",
    "right : the regions @xmath181 . ]",
    "we can now provide a definition of the function @xmath172 .",
    "consider any two dual edges @xmath182 and @xmath183 in @xmath55 .",
    "if they have no common vertex or if they are equal , then we set @xmath184 .",
    "this is not very relevant because such terms never show up in the desired properties .",
    "it remains to consider the case when they have a common vertex .",
    "for this case we then define @xmath185 as the region of the plane bounded by @xmath186 , the portion of @xmath187 from @xmath188 to @xmath189 , and the reverse of @xmath190 .",
    "we regard the region @xmath185 as a closed set , with its boundary and the curves that define it .",
    "see figure  [ fig : maxweight1 ] , center . finally , we set @xmath191",
    ". we will discuss the efficient computation and representation of @xmath192 later .",
    "we claim that @xmath172 satisfies the property in the first item .",
    "consider any dual cycle @xmath169 and let @xmath193 be the closure of @xmath76 .",
    "for each @xmath194 , let @xmath195 be the curve described by @xmath70 from @xmath188 to @xmath196 and let us use the shorthand @xmath197 , where indices are modulo @xmath53 .",
    "see figure  [ fig : maxweight1 ] , right .",
    "note that @xmath195 is one of the curves used to define the region @xmath181 . if @xmath70 is in @xmath170 , then",
    "the three curves that bound @xmath181 are contained in @xmath193 and therefore @xmath181 is contained in @xmath193 ( @xmath198 ) .",
    "moreover , since @xmath199 is a decomposition of @xmath70 and the regions @xmath181 and @xmath200 ( @xmath198 ) share the path @xmath201 on its boundary , the union @xmath202 is precisely @xmath193 .",
    "( it seems that the union is interior - disjoint , but we do not need that . )",
    "since the boundary of @xmath193 does not contain any vertex of @xmath5 , we get @xmath203 we have shown that the property in the first item holds .",
    "it remains to discuss the computational part .",
    "first we discuss an alternative definition of @xmath172 that is more convenient for the computation . for each edge @xmath204 of @xmath5 ,",
    "let @xmath205 be the region of the plane defined by the paths in @xmath166 from @xmath105 to both endpoints of @xmath204 and the edge @xmath204 itself .",
    "we include in @xmath205 the two paths used to define it and the edge @xmath204 .",
    "if the paths in @xmath166 from @xmath105 to @xmath206 and @xmath56 share a part , then the region @xmath205 also contains that common part .",
    "if @xmath204 is in @xmath166 , then the region @xmath205 is actually a path contained in @xmath166 .",
    "see figure  [ fig : maxweight2 ] for an example .",
    "finally , for each edge @xmath204 of @xmath5 we define @xmath207 as @xmath208 for each vertex @xmath56 of @xmath5 , we define @xmath209 as the maximum weight on the path @xmath175 $ ] .",
    "this last case can be interpreted as a degenerate case of the previous one . indeed , if @xmath210 is the parent of @xmath56 in @xmath166 , then @xmath211 .    .",
    "left : a graph @xmath5 and a spanning tree @xmath166 .",
    "center and right : the regions @xmath205 for two different edges @xmath204 . ]",
    "let @xmath66 be a face of @xmath5 and let @xmath50 and @xmath212 be two edges on the boundary of @xmath66 .",
    "we are going to give an alternative definition of @xmath192 .",
    "if @xmath212 is _ not _ the follower of @xmath50 along the counterclockwise traversal of @xmath66 , let @xmath213 be the edges between @xmath50 and @xmath212 in a counterclockwise traversal of @xmath66 .",
    "we do not include @xmath50 and @xmath212 in @xmath213 , but the set @xmath213 is nonempty by assumption .",
    "see figure  [ fig : maxweight4 ] for an illustration . in this case",
    "we have @xmath214 to see that these equality indeed holds , note that the difference between the region @xmath185 and @xmath215 is just a portion of the interior of the face @xmath66 , which can not contain vertices of @xmath5 . see figure  [ fig : maxweight4 ] , center and right , for an illustration .",
    "if @xmath50 and @xmath212 are consecutive along the counterclockwise traversal of @xmath66 , then they have a common vertex @xmath56 and we have @xmath216 . the argument in this case",
    "is the same : the difference between @xmath185 and the path @xmath217 $ ] is a portion of the interior of @xmath66 .    .",
    "center and right : example indicating the relation between @xmath185 and @xmath218 .",
    "( compare to figure  [ fig : maxweight1 ] . )",
    "note that on the right we have five regions @xmath219 , but two of them degenerate to paths on @xmath166 . ]       and its relevance to compute @xmath207 . here",
    "we show the relevance for two different edges @xmath235 in the example of figure  [ fig : maxweight3 ] . ]    to represent @xmath172 compactly , we will use a data structure for range minimum queries : preprocess an array of numbers @xmath236 $ ] such that , at query time , we can report @xmath237\\mid i\\le k\\le j\\}$ ] for any given query pair of indices @xmath238 .",
    "there are data structures that use linear - time preprocessing and @xmath33 time per query ; see  @xcite for a description .",
    "this data structure does exploit the full power of random - access memory ( ram ) .",
    "it is trivial to extend this data structure for circular arrays : each query in a circular array corresponds to two queries in a linear array .    for each face @xmath66 of @xmath5",
    ", we build a circular array @xmath239 $ ] indexed by the edges , as they appear along the face @xmath66 . at the entry",
    "@xmath240 $ ] we store the value @xmath241 . for each face",
    "we spend time proportional to the number of edges on the boundary of the face .",
    "thus , for the whole graph @xmath5 this preprocessing takes linear time . for two edges @xmath242 and @xmath243 on the boundary of a face @xmath66 and with no common vertex ,",
    "the value @xmath244 , as described in , is precisely a range maximum query in the circular array @xmath239 $ ] , and thus can be answered in constant time .",
    "the case when @xmath242 and @xmath243 have a common vertex is easier because for each edge @xmath242 there are only two such possible edges @xmath243 , one per face with @xmath242 is on the boundary .    for our application we will have to deal with pieces that have holes and thus a part of @xmath166",
    "may be missing .",
    "because of this , we also need to extend things to a type of non - crossing walks .",
    "like before , let @xmath5 be a plane graph and let @xmath166 be a rooted spanning subtree .",
    "let @xmath32 be a subgraph of @xmath5 , with the embedding inherited from @xmath5 .",
    "assume that the root @xmath105 of @xmath166 is in @xmath32 .",
    "a non - crossing closed walk @xmath70 in @xmath245 is if the root @xmath105 is in @xmath76 and , for each vertex @xmath8 in @xmath246 , all the vertices of @xmath32 in the path @xmath247 $ ] are contained in @xmath76 .",
    "we can define the following family of dual non - crossing walks : @xmath248    [ thm : maxweight ] let @xmath5 be a plane graph with @xmath0 vertices and vertex - weights @xmath129 , and let @xmath166 be a rooted spanning tree in @xmath5 .",
    "let @xmath32 be a subgraph of @xmath5 vertices that contains the root of @xmath166 .",
    "let @xmath69 be the number of edges on all the faces of @xmath32 that contain edges of @xmath249 .",
    "let @xmath127 be a family of walks in @xmath245 with a total of @xmath130 edges , counted with multiplicity .",
    "after @xmath250 preprocessing time , we can answer the following type of queries : given a closed walk @xmath70 in @xmath251 , described as a concatenation of @xmath53 subpaths from @xmath73 and oriented clockwise return @xmath252 in @xmath133 time .",
    "although the dependency on @xmath69 in the time bound can perhaps be reduced , it is enough for our purposes because currently the bottleneck is somewhere else .",
    "we may assume that @xmath253 . to see this",
    ", first we note that we can remove edges of @xmath5 that are not in @xmath254 because they do not play any role",
    ". then we can replace each maximal subtree of @xmath255 by edges that connect vertices of @xmath32 without changing the set @xmath251 .",
    "for this we just need the ancestor - descendant relation between vertices incident to the face .",
    "see figure  [ fig : maxweight5 ] to see the transformation .",
    "thus , from now on we restrict ourselves to the case where @xmath253 .     to assume that @xmath253 .",
    "the vertices of @xmath256 inside a face @xmath66 of @xmath245 can be removed and we use direct edges representing the paths in @xmath166 . ]",
    "let @xmath257 be the set of faces of @xmath32 that contain some edges of @xmath258 and consider the set @xmath259 it is clear that @xmath193 has @xmath260 pairs .",
    "for each @xmath261 , let @xmath66 be the face of @xmath257 that have @xmath242 and @xmath243 on the boundary and compute a dual path @xmath262 in @xmath55 from @xmath263 to @xmath264 whose other edges are contained in the face @xmath66 .",
    "this means that @xmath262 , besides @xmath265 and @xmath266 , only uses edges of @xmath267 .",
    "( if @xmath242 and @xmath243 are cofacial in @xmath5 , then @xmath268 . ) see figure  [ fig : maxweight6 ] for an example .",
    "in particular , since @xmath258 is a forest on @xmath69 vertices , it has at most @xmath69 edges , and the path @xmath262 has @xmath269 edges .",
    "thus , the paths @xmath262 , over all elements @xmath261 , have together @xmath270 edges .    .",
    "left : a face of @xmath32 with edges of @xmath271 dashed .",
    "center : a two - edge walk in @xmath245 .",
    "right : the corresponding path @xmath262 in @xmath55 .. ]    the paths @xmath272 are used to naturally transform walks in @xmath245 into walks in @xmath55 . indeed ,",
    "if we have a walk @xmath273 in @xmath245 and we replace each occurrence of @xmath274 , where @xmath261 by @xmath262 , then we obtain a walk in @xmath55 .",
    "we compute for @xmath5 the function @xmath172 of lemma  [ le : maxweight ] . for each element @xmath261 ,",
    "we compute and store @xmath275 using the properties of @xmath172 stated in lemma  [ le : maxweight ] and using that the paths @xmath276 have @xmath270 edges , we can do this step in @xmath277 time .    for each walk @xmath134 of @xmath73",
    "we proceed as follows .",
    "let @xmath278 be the edges of @xmath134 , as they appear along @xmath134 .",
    "we make an array @xmath279 $ ] such that @xmath280 ~=~ \\begin{cases }                  \\varphi(e^*_j , e^*_{j+1 } ) & \\text{if $ ( e_j , e_{j+1})\\in a$},\\\\                  \\chi_{\\mu}(e^*_j , e^*_{j+1 } ) & \\text{if $ ( e_j , e_{j+1})\\notin a$}.                  \\end{cases}\\ ] ] finally , we store the array @xmath281 $ ] for range maximum queries  @xcite ; see the discussion at the end of the proof of lemma  [ le : maxweight ] .",
    "we spend @xmath140 preprocessing time for @xmath134 and can find @xmath282 $ ] in constant time for any given indices @xmath283 .",
    "this step , together for all paths @xmath141 , takes @xmath284 time .",
    "this finishes the preprocessing .",
    "assume that we are given a non - crossing closed walk @xmath70 in @xmath251 , given as the concatenation of @xmath53 paths @xmath142 , each of them a subpath of some path in @xmath73 .",
    "let @xmath285 be the closed walk obtained from @xmath70 as follows : for each @xmath261 and each appearance of @xmath274 in @xmath70 , we replace @xmath274 by @xmath286 .",
    "note that @xmath285 is closed walk in @xmath55 .",
    "in fact , @xmath285 it is a cycle in @xmath55 because geometrically each single replacement occurs within a single face of @xmath257 and all the replacements within a face do not introduce crossings because @xmath70 was non - crossing .",
    "moreover , because each replacement is a rerouting within a face @xmath257 and @xmath287 , we have @xmath288 . from lemma  [ le : maxweight ]",
    "we thus get that @xmath289 like in the proof of [ thm : sumweights ] , we can break the computation of @xmath290 for pairs of consecutive edges of @xmath285 into @xmath53 parts that occur within some path @xmath141 ( after replacements ) and @xmath53 parts that use the last edge of @xmath143 and the first of @xmath291 ( @xmath292 , indices modulo @xmath53 ) .",
    "the part within a path @xmath141 can be retrieved in constant time from the range maximum query for @xmath281 $ ] .",
    "the part combining consecutive subpaths can be computed in constant time , but we have two cases to consider .",
    "let @xmath113 be the last dual edge of @xmath143 and let @xmath173 be the first dual edge of @xmath291 .",
    "if @xmath293 , then we have to use @xmath294 .",
    "otherwise we can directly use @xmath174 , which can be computed in constant time ( third item of lemma  [ le : maxweight ] ) .",
    "finally , we have to take the maximum from those @xmath295 values .    when @xmath296 , then @xmath297 , we have @xmath298 , and theorem  [ thm : maxweight ] simplifies to the following .",
    "[ coro : maxofweights ] let @xmath5 be a plane graph with @xmath0 vertices and vertex - weights @xmath129 , and let @xmath166 be a rooted spanning tree in @xmath5 .",
    "let @xmath127 be a family of paths in @xmath55 with a total of @xmath130 edges , counted with multiplicity .",
    "after @xmath131 preprocessing time , we can answer the following type of queries : given a cycle @xmath70 in @xmath170 , described as a concatenation of @xmath53 subpaths from @xmath73 and oriented clockwise return @xmath100 in @xmath133 time .",
    "abstract voronoi diagrams were introduced by klein  @xcite as a way to handle together several of the different types of voronoi diagrams that were appearing .",
    "the concept is restricted to the plane @xmath299 .",
    "they are defined using the concept of _ bisectors _ and _ dominant regions_. we will use the definition by klein , langetepe and nilforoushan  @xcite , as it seems the most recent and general . for the construction , we use the randomized incremental construction of klein , mehlhorn and meiser  @xcite , also discussed in  @xcite for their framework . in our notation , we will introduce an @xmath193 in front to indicate we are talking about objects in the _ abstract _ voronoi diagram .",
    "let @xmath300 be a finite set , which we refer to as _ abstract sites_. for each ordered @xmath301 of distinct sites , we have a simple planar curve @xmath302 and an open domain @xmath303 whose boundary is @xmath302 .",
    "we refer to the pair @xmath304 as an .",
    "define for each @xmath305 the @xmath306 .",
    "then the of @xmath300 , denoted by @xmath307 , is defined as @xmath308 .",
    "the intuition is that the set @xmath303 is the set of points that are closer to @xmath309 than to @xmath310 and that @xmath302 plays the role of bisector .",
    "then , @xmath311 stands for the points that are dominated by @xmath309 , when compared against all @xmath312 .",
    "note that @xmath311 is an open set because it is the intersection of open sets .",
    "the abstract voronoi diagram , @xmath307 would then be the set of points where no site dominates , meaning that at least two sites are  equidistant \" from the point .",
    "however , the theory does not rely on any such interpretations .",
    "this makes it very powerful but less intuitive : some arguments become more cumbersome .",
    "while these concepts can be considered in all generality , the theory is developed assuming that certain properties , called axioms , are satisfied .",
    "a system of abstract bisectors @xmath313 is if it satisfies the following properties :    1 .   for all distinct @xmath314 , @xmath315 .",
    "2 .   for all distinct @xmath314 ,",
    "the plane @xmath299 is the disjoint union of @xmath316 , @xmath317 and @xmath318 .",
    "there exists a special point in the plane , which we call @xmath319 , such that , for all distinct @xmath314 , the curve @xmath317 passes through @xmath319 .",
    "can be completed to a closed jordan curve passing through the north pole . for us",
    "it will be more convenient to project from a different point and complete all curves within the plane to make them pass through @xmath319 . ]",
    "4 .   for each subset @xmath320 of @xmath300 with 3 elements and each @xmath321 , the abstract voronoi region",
    "@xmath322 is path connected .",
    "5 .   for each subset @xmath320 of @xmath300 with 3 elements we have @xmath323 .",
    "for the rest of the discussion on abstract voronoi diagrams , we assume that these axioms are satisfied .",
    "note that axioms ( a4)-(a5 ) are not the ones given in the definition of  @xcite but , as they show in their theorem  15 , they are equivalent . in this regard , our definition is closer to the one given in  @xcite .",
    "since we are going to work with very natural , no - pathological voronoi diagrams , any of the sets of axioms used in any of the other papers we have encountered also works in our case .",
    "assuming these axioms , one can show that the abstract voronoi diagram @xmath307 is a plane graph  ( * ? ? ?",
    "* theorem  10 ) .",
    "this brings a natural concept of and as those being vertices ( of degree @xmath324 ) and edges in the plane graph @xmath307 .",
    "klein , mehlhorn and meiser provide a randomized incremental construction of abstract voronoi diagrams .",
    "one has to be careful about what it means to compute an abstract voronoi diagram , since it is not even clear how the input is specified . for their construction , they assume as primitive operation that one can compute the abstract voronoi diagram of any five abstract sites .",
    "the output is combinatorially described with a plane graph @xmath62 and telling the description of each vertex and edge of @xmath62 .",
    "the description of a vertex or an edge is a pointer to a vertex or an edge , respectively , in the abstract voronoi diagram for at most four abstract sites .",
    "thus , we tell that an edge @xmath46 of @xmath62 corresponds to some precise abstract edge @xmath325 of @xmath326 , where @xmath327 . whether @xmath326 can be computed explicitly or",
    "not , it depends on how the input bisectors can be manipulated .",
    "klein , mehlhorn and meiser consider a special case , which is the one we will be using , where the basic operation requires the abstract voronoi diagram of only four sites .",
    "( this particular case is not discussed in  @xcite , but they discuss the general case . )",
    "[ thm : avd ] assume that we have an admissible system of abstract bisectors for a set @xmath300 of @xmath130 sites .",
    "the abstract voronoi diagram of @xmath300 can be computed in @xmath328 expected time using an expected number of @xmath328 elementary operations .",
    "if the abstract voronoi diagram of any three sites contains at most one abstract voronoi vertex , besides the special point @xmath319 , then an elementary operation is the computation of an abstract voronoi diagram for four sites .",
    "we will need additively weighted voronoi diagrams in _ plane _ graphs .",
    "we first define voronoi diagrams for arbitrary graphs .",
    "then we discuss a representation using the dual graphs that works only for plane graphs and discuss some folklore properties .",
    "see for example the papers of marx and pilipczuk  @xcite or colin de verdire  @xcite for similar intuitions .",
    "the dual representation is the key to be able to use the machinery of abstract voronoi diagrams as a black box .",
    "let @xmath5 be an arbitrary graph , not necessarily planar , with no negative cycles .",
    "a @xmath329 is a pair @xmath330 , where @xmath331 is its , and @xmath332 is its , possibly negative . with a slight abuse of notation",
    ", we will use @xmath329 instead of @xmath333 as the vertex .",
    "for example , for a site @xmath329 we will write @xmath334 instead of @xmath331 and @xmath335 instead @xmath336",
    ".    let @xmath300 be a set of sites in @xmath5 . for each @xmath337 ,",
    "its , denoted @xmath338 , is defined by @xmath339 see figure  [ fig : voronoi ] for an example .",
    "note that we are using the distance from the sites to the vertices to define the graphic voronoi cells . for directed graphs , using the reverse distance from the vertex to the sites would define different graphic regions ( in general ) .",
    "however , this is equivalent to use the reversed graph @xmath89 of @xmath5 .    even assuming that all distances in @xmath5 are distinct",
    ", we may have @xmath340 for some vertex @xmath7 .",
    "also , some voronoi cells may be empty . in our case",
    ", we will only deal with cases where these two things can not happen .",
    "we say that the set @xmath300 of sites is when , for each @xmath91 and for each distinct @xmath341 , we have @xmath342 .",
    "the set @xmath300 is when each voronoi cell is nonempty .",
    "it is easy to see that , if @xmath300 is a generic , independent set of sites , then @xmath343 and each vertex @xmath7 of @xmath43 belongs to precisely one graphic voronoi cell @xmath338 over all @xmath337 .",
    "the of @xmath300 ( in g ) is the collection of graphic voronoi regions : @xmath344 the following property is standard .",
    "[ le : star ] let @xmath300 be a generic , independent set of sites . then for each @xmath337 it holds the following :    * for each @xmath7 in @xmath338 , the shortest path from @xmath329 to @xmath7 is contained in @xmath338 . *",
    "@xmath338 induces a connected subgraph of @xmath5 .",
    "let @xmath7 be a vertex of @xmath338 and let @xmath345 be the shortest path in @xmath5 from @xmath329 to @xmath7 . assume , for the sake of reaching a contradiction , that some vertex @xmath8 on @xmath345 is contained in some other voronoi cell @xmath346 , where @xmath347 . because of uniqueness of shortest paths , this means that @xmath348 .",
    "however , this implies that @xmath349 where in the last equality we have used that @xmath8 lies in the shortest path @xmath345 .",
    "the obtained inequality @xmath350 contradicts the property that @xmath351 .",
    "this proves the first item .    to show the second item , note that the subgraph of @xmath5 induced @xmath338 contains ( shortest ) paths from @xmath329 to all vertices of @xmath338 because of the previous item .",
    "for each two sites @xmath329 and @xmath352 , we define the of @xmath329 over @xmath352 as @xmath353    [ le : intersection ] for each @xmath337 we have @xmath354 .",
    "we note that @xmath355      now we will make use of graph duality to provide an alternative description of additively weighted voronoi diagrams in plane graphs . the aim is to define voronoi diagrams geometrically using bisectors , where a bisector is just going to be a cycle in the dual graph .",
    "consider two sites @xmath329 and @xmath352 in @xmath5 and define @xmath356 thus , we are taking the edges that have each endpoint in different graphic voronoi regions of @xmath357 .",
    "we denote by @xmath358 their dual edges .",
    "[ le : bisector ] let @xmath359 be a generic and independent set of sites .",
    "then the edges of @xmath358 define a cycle @xmath70 in @xmath55 .",
    "moreover , if @xmath360 , then @xmath361 and @xmath362 .",
    "let @xmath363 be an arbitrary set of dual edges .",
    "it is well known that @xmath363 is the edge set of a cycle if and only if @xmath364 has precisely two connected components .",
    "moreover , two faces @xmath365 and @xmath57 of @xmath55 are in the same side of the cycle defined by @xmath363 if and only if @xmath206 and @xmath56 are in the same connected component of @xmath364 .",
    "see for example the proof in  ( * ? ? ?",
    "* proposition 4.6.1 ) or  ( * ? ? ? * theorem 10.16 ) .",
    "when @xmath359 is generic and independent , we have @xmath366 , @xmath366 , and @xmath43 is the disjoint union of @xmath367 and @xmath368 , .",
    "this means that @xmath369 is the edge cut between @xmath367 and its complement , @xmath368 .",
    "moreover , by lemma  [ le : star ] , the subgraphs of @xmath5 induced by @xmath367 and by @xmath368 are connected .",
    "therefore @xmath370 has precisely two connected components , and thus @xmath358 is the edge set of a cycle @xmath70 in @xmath55 .",
    "assume that @xmath360 . since @xmath367 is the vertex set of the connected component of @xmath370 that contains @xmath329 , the faces of @xmath371 are in @xmath76 and the faces @xmath372 are in @xmath78 .",
    "since a vertex @xmath206 of @xmath5 is the unique vertex of @xmath5 contained in the dual face @xmath365 of @xmath55 , the result follows .",
    "when @xmath329 and @xmath352 are independent and generic , we define the of @xmath329 and @xmath352 , denoted as @xmath373 , as the curve in the plane defined by the cycle of @xmath358 , as guaranteed in the previous lemma .",
    "see figure  [ fig : bisectors ] for an example .",
    "we also define @xmath374 as the connected part of @xmath375 that contains @xmath329 .",
    "we then have @xmath376 note that the pair @xmath377 is the type of pair used to define abstract voronoi diagrams . from now on ,",
    "whenever we talk about the abstract voronoi diagram of @xmath5 , we refer to the abstract voronoi diagram defined by the system of bisectors @xmath378 .",
    "we have defined voronoi regions of plane graphs in two different ways : using distances in the primal graph @xmath5 , called _ graphic _ voronoi regions , and using bisectors defined as curves in the plane , called _ abstract _ voronoi regions .",
    "we next make sure that the definitions match , when restricted to vertices of @xmath5 .",
    "let @xmath5 be a plane graph and let @xmath300 be a generic , independent set of sites .",
    "then , for each @xmath337 , we have @xmath379 .",
    "recall the definition @xmath380 because of equation   we have @xmath381 and we obtain that @xmath382 where in the last equality we used lemma  [ le : intersection ] . since the only vertex of @xmath43 contained in the dual face @xmath383 is precisely @xmath56 , and it lies in the interior of @xmath57 , we get that @xmath384 .",
    "we can not use the machinery of abstract voronoi diagrams for arbitrary sites because of axiom ( a3 ) . in our case bisectors may not pass through a common  infinity point \" @xmath319 .",
    "indeed , for arbitrary planar graphs we could have two bisectors that never intersect .",
    "however , we can use it when all the sites are in the outer face of @xmath5 .",
    "we next show this .    [",
    "le : admissible ] let @xmath5 be a plane graph and let @xmath300 be a generic , independent set of sites located in the outer face of @xmath5 .",
    "let @xmath64 be the vertex of @xmath55 dual to the outer face of @xmath5 .",
    "then the system of abstract bisectors @xmath378 is admissible , where @xmath64 plays the role of @xmath319 in axiom ( a3 ) .",
    "it is clear that the system of abstract bisectors @xmath378 satisfies axioms ( a1 ) and ( a2 ) of the definition .",
    "we next show the validity of axiom ( a3 ) .",
    "consider any two sites @xmath329 and @xmath352 of @xmath300 .",
    "since @xmath338 and @xmath346 are nonempty , also @xmath367 and @xmath368 are nonempty . since @xmath329 and @xmath352 are located in the outer face of @xmath5 the bisector @xmath373 passes through @xmath64 .",
    "indeed , the dual faces @xmath385 and @xmath386 have to be in different sides of the dual cycle @xmath373 and , since @xmath329 and @xmath352 are on the outer face of @xmath5 , that can happen only if @xmath373 passes through @xmath64 .",
    "thus , if we take the geometric position of @xmath64 as @xmath319 , all the bisecting curves pass through @xmath319 and axiom ( a3 ) holds .    for axiom ( a4 ) ,",
    "consider any three sites @xmath387 of @xmath300 and let @xmath388 . following the definition of @xmath389 we have @xmath390 because of equation , we have @xmath391 where in the last equality we have used lemma  [ le : intersection ] .",
    "since the vertices of @xmath392 form a connected subgraph of @xmath5 ( lemma  [ le : star ] ) , the domains @xmath383 , when @xmath56 iterates over @xmath392 , are glued through the primal edges , and @xmath393 is path connected .",
    "this proves axiom ( a4 ) .",
    "axiom ( a5 ) is shown similarly . following the notation and the observations from the previous paragraph",
    ", we use that @xmath394 and that @xmath395 , to conclude that @xmath396    the abstract voronoi diagram @xmath307 is a plane graph , and by construction it is contained in the dual graph @xmath55 .",
    "an abstract voronoi vertex corresponds to a vertex in the dual graph @xmath55 .",
    "an abstract voronoi edge corresponds to a path in the dual graph @xmath55 .",
    "more precisely , any abstract voronoi edge corresponds to a portion of a bisector @xmath373 whose endpoints are vertices of @xmath55 .",
    "we further have the following observation regarding the structure of abstract voronoi diagrams .    [ le:1vertex ]",
    "the abstract voronoi diagram of any @xmath20 sites in the outer face of @xmath5 has at most one vertex , besides @xmath64 .",
    "assume that @xmath300 is the set of 3 sites .",
    "since each site @xmath337 is in the outer face , the abstract voronoi diagram @xmath397 contains the dual face @xmath385 , which is incident to @xmath64 .",
    "it follows that all faces have a common vertex in @xmath64 .",
    "since a plane graph with @xmath20 faces can have at most @xmath19 vertices , the result follows .",
    "let @xmath5 be a plane graph and let @xmath32 be a connected subgraph of @xmath5 , with the embedding inherited from @xmath5 .",
    "consider the graphic voronoi diagram in @xmath32 _ using the distances in @xmath5_. thus , for a set of weighted sites @xmath300 in @xmath32 and a site @xmath337 we are interested in the graphic voronoi diagrams @xmath398 we would like to represent these voronoi diagrams using the dual graph of @xmath245 . in particular , we have to define bisectors using the graph @xmath245 .     into a non - crossing",
    "closed walk in @xmath245 .",
    "the portion @xmath399 of a cycle in @xmath55 ( left ) becomes @xmath400 with the deletion of @xmath243 ( center ) and keeps being @xmath400 with the deletion of @xmath401 ( right ) . ]",
    "[ le : withholes1 ] given two sites @xmath329 and @xmath352 , there is a non - crossing closed walk @xmath70 in @xmath245 such that @xmath402 and @xmath403 are precisely @xmath246 and @xmath404 .",
    "moreover , @xmath70 is obtained from @xmath373 by deleting the edges of @xmath405 from the sequence of edges defining @xmath373 .",
    "let @xmath406 be the sequence of edges of @xmath55 that define @xmath373 .",
    "if in this sequence we delete all appearances of @xmath58 for @xmath407 , then we obtain a subsequence @xmath408 that defines a closed walk @xmath70 in @xmath245 .",
    "see figure  [ fig : holes1 ] for a small example and figure  [ fig : holes2 ] for a larger example .",
    "the resulting closed walk is non - crossing , as can be seen by induction on the number of deleted edges . indeed ,",
    "if a plane graph @xmath409 is obtained from a plane graph @xmath62 by deleting an edge @xmath46 , then @xmath410 is obtained from @xmath411 by contracting @xmath58 .",
    "any non - crossing walk in @xmath411 remains non - crossing when contracting the edge @xmath412 .",
    "note that the description using dual edges is simpler than using dual vertices because the relevant faces may also change with deletions of edges that do no appear in the cycle .",
    "we need that @xmath32 is connected because otherwise @xmath32 has faces that are not simply - connected and some closed walks of @xmath55 may become empty ( no edge of @xmath32 is crossed ) and in simply connected faces we have options to decide how to route the curve within a face ; it is not enough to know the edges where we enter an exit the face .     into a non - crossing",
    "closed walk in @xmath245.,title=\"fig : \" ]   into a non - crossing closed walk in @xmath245.,title=\"fig : \" ]    we use @xmath413 for the non - crossing closed @xmath70 in @xmath245 defined by lemma  [ le : withholes1 ] . to use abstract voronoi diagrams we have the following technical problem : in general ,",
    "the curve @xmath413 is not simple .",
    "we can work around this symbolically , as follows .",
    "combinatorially , we keep encoding the bisector as a closed walk in the dual graph @xmath245",
    ". however , the geometric curve associated to a description goes out of the dual graph to become simple .",
    "for each two consecutive edges @xmath414 and @xmath415 of each such closed walk , we always make a small shortcut in a small neighborhood of @xmath416 that avoids @xmath416 .",
    "for example , we can reroute the arcs along small concentric circles , where we use a larger radius when the distance along the face is smaller .",
    "see figure  [ fig : transformation ] for an example .",
    "there are different ways to do this rerouting . in any case",
    ", the algorithm of theorem  [ thm : avd ] to build the abstract voronoi diagram never uses coordinates .",
    "in such a way we obtain true geometric simple curves associated to each such bisector .",
    "the transformation is not made for the outer face .",
    "indeed , to use the technology of abstract voronoi diagrams , we need that all the bisectors pass through a common point @xmath319 , which is @xmath64 .",
    "thus , we do not want to make any rerouting at the outer face .",
    "this is not a problem if each bisector @xmath413 passes exactly once through the vertex @xmath64 .",
    "if @xmath5 and @xmath32 have the same outer face , then @xmath413 only passes once through @xmath64 .",
    "thus , we will restrict attention to the case when @xmath5 and @xmath32 have the same outer face .     into a simple curve . ]",
    "the rest of the presentation used for the case @xmath296 goes essentially unchanged .",
    "however , note that lemma  [ le : star ] does not hold in this case . an easier way to visualize things is to consider the creation of abstract voronoi diagrams in the graph @xmath55 and then consider the deletion of @xmath417 in @xmath5 ( and in @xmath55 ) .",
    "to summarize , we obtain the following .",
    "[ le : admissible_holes ] let @xmath5 be a plane graph , let @xmath32 be a connected subgraph of @xmath5 such that @xmath5 and @xmath32 have the same outer face .",
    "let @xmath300 be a generic , independent set of sites located in the outer face of @xmath32 .",
    "let @xmath64 be the vertex of @xmath55 dual to the outer face of @xmath5 .",
    "then the system of abstract bisectors @xmath418 is admissible , where @xmath64 plays the role of @xmath319 in axiom ( a3 ) .",
    "the abstract voronoi diagram of any @xmath20 sites in the outer face of @xmath32 has at most one vertex , besides @xmath64 .    for each @xmath337 , we have @xmath419    [ [ remark . ] ] remark .",
    "+ + + + + + +    instead of using rerouting in the dual graph , another alternative is to use a variant of the line graph of the dual graph . the variant is designed to ensure that all the bisectors pass through @xmath64 , so that we can use abstract voronoi diagrams .",
    "let us spell out the construction of the graph , which we denote by @xmath420 .",
    "the vertex set of @xmath420 is @xmath421 .",
    "thus , each dual edge and the vertex @xmath64 corresponding to the outer face of @xmath5 are the vertices . for each face @xmath66 of @xmath5 that is not the outer face , we put an edge in @xmath420 between each pair of edges that appear in @xmath66 . for each edge",
    "@xmath46 on the outer face of @xmath5 , we put an edge in @xmath420 between @xmath58 and @xmath64 .",
    "this finishes the description of @xmath420 .",
    "the graph @xmath420 has a natural drawing inherited from the embedding of @xmath5 , that is not necessarily an embedding .",
    "( @xmath420 has large cliques when @xmath5 has large faces . )",
    "however , we can use a drawing of @xmath420 to represent the curves .",
    "see figure  [ fig : linfty ] for an example of ( a drawing of ) @xmath420 .    .",
    "right : a drawing of @xmath420 in green ( and @xmath5 in gray ) . ]",
    "for the rest of this section , we assume that @xmath5 is a connected plane graph , @xmath32 is a connected subgraph of @xmath5 , and the outer face of @xmath32 and @xmath5 coincide .",
    "we use @xmath28 for the number of vertices in @xmath32 .",
    "let @xmath422 be a set of @xmath69 vertices in the outer face of @xmath32 .",
    "we are interested in placing the sites at the vertices of @xmath422 . in this section",
    "we assume that the distances @xmath10 from each vertex of @xmath422 to each vertex of @xmath32 are known and available .",
    "we remark that the arcs of @xmath5 may have negative weights , but @xmath5 should not have negative cycles ..    we next provide tools to manipulate portions of the bisectors and construct voronoi diagrams in planar graphs .",
    "[ le : algbisector ] for any two generic , independent sites @xmath423 placed at @xmath422 we can compute @xmath413 in @xmath30 time .    for each vertex @xmath424 , we compare @xmath425 and @xmath426 to decide whether @xmath7 belongs to @xmath427 or @xmath428 .",
    "note that @xmath429 because we assume generic sites .",
    "the sets @xmath427 and @xmath428 are nonempty because we assume independent sites .",
    "now we can mark the edges of @xmath32 with one endpoint in each of those sets and construct the closed walk @xmath413 using the dual graph .",
    "[ le:2sites ] consider any two vertices @xmath430 as placements of sites .",
    "consider the family of bisectors @xmath431 as a function of the weights @xmath432 and @xmath433 .",
    "there are at most @xmath30 different bisectors .",
    "we can compute and store all the bisectors in @xmath434 time such that , given two values @xmath432 and @xmath433 , the corresponding representation of @xmath431 is accessed in @xmath435 time .    from the definition it is clear that @xmath436 thus , it is enough to consider the bisectors @xmath437 parameterized by @xmath438 .",
    "each bisector @xmath439 is a cycle in the dual graph @xmath55 and the cycles are nested : as @xmath440 increases , the graphic dominance region @xmath367 monotonically grows and @xmath374 also monotonically increases .",
    "the same happens with @xmath437 : as @xmath440 increases , the bisectors @xmath437 are nested and the region on one side monotonically grows . since any two different non - crossing closed walks @xmath437 are nested and must differ by at least one vertex of @xmath32 that is enclosed , there are at most @xmath30 different bisectors .    for each vertex @xmath424 ,",
    "define the value @xmath441 .",
    "the vertex @xmath7 is in @xmath367 when @xmath442 , in @xmath368 when @xmath443 , and we have a degenerate ( non - generic ) case when @xmath444 .",
    "thus , we can compute the values @xmath445 , sort them and store them sorted in a table .",
    "for each @xmath440 between two consecutive values of @xmath445 we compute the bisector using lemma  [ le : algbisector ] and store it with its predecessor of @xmath446 . given a query with shifts @xmath447 , we use binary search in @xmath435 time for the value @xmath448 and locate the relevant bisector .    as mentioned before",
    ", an abstract voronoi vertex is just a vertex of @xmath245 and an abstract voronoi edge is encoded in the dual graph @xmath245 by a tuple @xmath449 , meaning that the edge is the portion of @xmath413 starting with the dual edge @xmath414 and finishing with the the dual edge @xmath450 in some prescribed order , like for example the clockwise order of @xmath413 .",
    "[ le:3sites ] consider any three vertices @xmath451 as placements of sites .",
    "consider the family of abstract voronoi diagrams for the sites @xmath452 , @xmath453 , and @xmath454 as a function of the weights @xmath455 , @xmath432 and @xmath433 .",
    "we can compute and store all those voronoi diagrams in @xmath434 time such that , given the values @xmath455 , @xmath432 and @xmath433 , the corresponding representation of the abstract voronoi diagram of those @xmath20 sites is accessed in @xmath435 time .",
    "we use lemma  [ le:2sites ] to compute and store all the possible bisectors of each pair of vertices .",
    "this takes @xmath434 time because we have @xmath33 pairs of placements .",
    "only the difference between weights of the sites is relevant .",
    "thus , we can just assume that the weight @xmath455 is always @xmath456 .",
    "the relevant abstract voronoi diagrams can thus be parameterized by the plane @xmath299 .",
    "the first coordinate is the weight @xmath432 and the second coordinate is the weight @xmath433 .    for each vertex @xmath424 , we compute @xmath457 note that , once we fix the weights @xmath458 and @xmath459 , the vertex @xmath424 belongs to @xmath460 if and only if @xmath461 and @xmath462 .",
    "a similar statement holds for the other sites , @xmath310 and @xmath352 .    in the plane",
    "@xmath463 we consider the set of lines @xmath464 that contains precisely the following lines @xmath465 since @xmath464 has @xmath30 lines , it breaks the plane @xmath299 into @xmath434 cells , usually called the arrangement induced by @xmath464 and denoted by @xmath466 .",
    "such an arrangement can be computed in @xmath434 time  ( * ? ? ?",
    "* section 8.3 ) .",
    "for each cell @xmath467 , the voronoi diagram defined by the sites @xmath468 is the same for all @xmath469",
    ".     defined by 4 vertices .",
    "the cell of @xmath466 containing the origin is marked in gray . from the labels in th figure",
    "we can deduce that , in the voronoi diagram of @xmath470 , @xmath471 and @xmath472 , the vertex @xmath7 belongs to @xmath473 and the vertex @xmath8 belongs to @xmath460 . ]",
    "we can further preprocess @xmath466 for standard point location  @xcite .",
    "thus , after @xmath434 preprocessing , given a query point @xmath463 , we can identify in @xmath435 time the cell of @xmath466 that contains it .",
    "in each cell @xmath38 of @xmath466 we store a description of the voronoi diagram defined for weights on that cell . we can compute the relevant voronoi diagram for each cell in @xmath33 amortized time using a traversal of @xmath466 .",
    "a simple way is as follows .",
    "consider any line @xmath474 of @xmath464 .",
    "let us say that @xmath475 ; the other cases are similar .",
    "let @xmath476 be an upward shift of @xmath474 by an infinitesimal @xmath477 .",
    "the value @xmath432 remains constantly equal to @xmath478 as we walk along @xmath476 , while the value @xmath433 changes .",
    "consider the bisector @xmath479 and let @xmath480 be the edges of @xmath32 that it crosses , as we walk from @xmath64 to @xmath64 .",
    "thus , the bisector is actually the non - crossing closed walk @xmath406 in the dual graph @xmath245 .",
    "for each such edge @xmath50 , can compute a value @xmath481 such that @xmath50 is part of the abstract voronoi edge of @xmath482 that separates the cell of @xmath310 and @xmath329 if and only @xmath483 . indeed ,",
    "if @xmath484 is the endpoint of @xmath50 closer to @xmath310 and @xmath485 the other endpoint , then @xmath50 is ( part of ) an abstract voronoi edge of @xmath482 if and only if @xmath486 using that @xmath459 and @xmath487 , this is equivalent to the condition @xmath488 because of planarity , the values @xmath489 are either monotonically increasing or decreasing .",
    "indeed , the cell for @xmath352 can only grow when @xmath433 increases .",
    "therefore , the values @xmath489 are obtained already sorted . as we walk along @xmath476",
    ", we can identify the last edge @xmath50 such that @xmath490 and identify the precise portion of @xmath491 that is in the voronoi diagram of @xmath468 .    repeating this procedure for each line @xmath492 , with two infinitesimal shifts per line , one on each side",
    ", we can figure out in @xmath33 amortized time per cell the portion of @xmath493 in the abstract voronoi diagram for each cell of @xmath466 bounded by one of those lines .",
    "if a cell is not bounded by a line @xmath494 for some @xmath7 , we figure out this information from a neighbour cell .",
    "a similar approach for the lines @xmath495 and @xmath496 determines the portions of @xmath497 and @xmath413 , respectively .",
    "thus , we obtain the abstract voronoi diagrams for all cells @xmath467 in @xmath33 amortized time per cell .",
    "recall that @xmath69 is the cardinality of @xmath422 .",
    "[ le:4sites ] there is a data structure with the following properties .",
    "the preprocessing time is @xmath498 . for any generic ,",
    "independent set @xmath300 of @xmath499 sites placed on @xmath422 , the abstract voronoi diagram @xmath307 can be computed in @xmath435 time .",
    "the output is given combinatorially as a collection of abstract voronoi vertices and edges encoded in the dual graph @xmath245 .",
    "first , we make a table @xmath500 $ ] such that , for @xmath501 , @xmath502 $ ] is the rank of @xmath206 when walking along the boundary of the outer face of @xmath32 and , for @xmath503 , we have @xmath502 $ ] undefined .",
    "thus , given 3 vertices of @xmath422 we can deduce their circular ordering along the boundary of the outer face of @xmath32 in @xmath33 time .",
    "we use lemma  [ le:2sites ] to compute and store all the possible bisectors .",
    "since there are @xmath504 different possible locations for the sites , for each pair of locations there are @xmath30 different bisectors , and for each bisector we spend @xmath30 space and preprocessing time , we have spent a total of @xmath505 time .    for each bisector @xmath506 , we preprocess it to quickly figure out the circular order of its ( dual ) edges : given two edges @xmath414 and @xmath450 on @xmath506 , is the clockwise order along @xmath506 given by @xmath507 or by @xmath508 ?",
    "for each bisector @xmath506 we can make a table @xmath509 $ ] indexed by the edges such that @xmath510 $ ] is the position of @xmath414 along @xmath506 , when we walk @xmath506 clockwise starting from @xmath64 .",
    "we set @xmath510 $ ] to undefined when @xmath414 does not appear in @xmath506 .",
    "thus , given 2 edges of @xmath506 , we can decide their relative order along @xmath506 in @xmath33 time .",
    "the time and space for this , over all bisectors , is also @xmath505 .",
    "we make a table indexed by triples of vertices of @xmath422 and , for each triple , we use lemma  [ le:3sites ] and store in the table a pointer to the resulting data structure .",
    "we have @xmath511 choices for the vertices hosting the sites , and thus we spend @xmath498 in the preprocessing step . given any three sites placed at @xmath422",
    ", we can get the abstract voronoi diagram of those three sites in @xmath435 time .",
    "this finishes the preprocessing .",
    "assume that we are given a set @xmath300 of 4 sites placed at @xmath422 and we want to compute its abstract voronoi diagram .",
    "we recover the abstract voronoi diagrams for each subset @xmath512 in @xmath435 time , using the stored data .",
    "if there are two sites @xmath341 such that their bisector @xmath413 is in full in the voronoi diagram of each subset @xmath320 with @xmath513 and @xmath514 , then in the abstract voronoi diagram of @xmath300 there is a region bounded only by @xmath413 .",
    "we can then compose that bisector and the abstract voronoi diagram of the other three sites to obtain the final voronoi diagram .",
    "see the left of figure  [ fig:4cases ] .",
    "( it may be that we have more than one such  isolated \" abstract voronoi region . )    in the opposite case , in the abstract voronoi diagram there is no abstract voronoi region that is bounded by a unique bisector .",
    "the abstract voronoi diagram restricted to the interior faces of @xmath5 is connected .",
    "the shape of such a voronoi diagram can be only one of two , depending on which opposite sites share a common edge .",
    "see the center and right side of figure  [ fig:4cases ] .",
    "let @xmath515 be the sites in clockwise order along the boundary of @xmath5 .",
    "we can infer this order in @xmath33 time through the table @xmath500 $ ] .",
    "assume , by renaming the sites if needed , that @xmath516 has @xmath329 in its interior . from @xmath517",
    "we obtain the edge @xmath414 of @xmath516 incident to the vertex of @xmath517 , and from @xmath518 we obtain the edge @xmath450 of @xmath516 incident to the vertex of @xmath518 . if @xmath519 , then @xmath520 has a common vertex of degree @xmath499 that is incident to four abstract voronoi edges . if @xmath521 or the the cyclic order of @xmath522 along @xmath523 is clockwise , then the tuple @xmath524 defines an abstract edge in the abstract voronoi diagram of @xmath300 .",
    "otherwise , there is tuple @xmath525 for some edges @xmath526 and @xmath527 that can be obtained by exchanging the roles of @xmath528 with @xmath529 . from this information and the abstract voronoi diagrams of each three sites",
    ", we can construct the abstract voronoi diagram of @xmath530 .",
    "sites , when it is connected . ]",
    "[ thm : abstract ] let @xmath5 be a plane graph and let @xmath32 be a connected subgraph of @xmath5 with @xmath28 vertices such that @xmath5 and @xmath32 have the same outer face .",
    "let @xmath422 be a set of @xmath69 vertices on the outer face of @xmath32 .",
    "assume that @xmath5 has no negative cycles and the distances @xmath10 from each vertex of @xmath422 to each vertex of @xmath32 are available .",
    "there is a data structure with the following properties .",
    "the preprocessing time is @xmath498 . for any generic and independent set @xmath300 of sites placed at @xmath422 ,",
    "the abstract voronoi diagram @xmath531 can be computed in @xmath532 expected time .",
    "the output is given combinatorially as a collection of abstract voronoi vertices and edges encoded in the dual graph @xmath245 .",
    "we apply the preprocessing of lemma  [ le:4sites ] .",
    "we spend @xmath533 time and , given any four sites placed on @xmath422 , we can compute its abstract voronoi diagram in @xmath435 time .",
    "assume that we are given a set @xmath300 of @xmath69 sites placed at vertices of @xmath422 . because of lemma  [ le : admissible_holes ] ( see also lemma  [ le:1vertex ] ) , any three sites have a vertex in common , besides the one at @xmath319 ( or @xmath64 ) . according to theorem  [ thm : avd ]",
    ", we can compute the abstract voronoi diagram using @xmath534 expected time and expected number of elementary operations , where an elementary operation is the computation of an abstract voronoi diagram of 4 sites .",
    "since each elementary operation takes @xmath435 time because of the data structure of lemma  [ le:4sites ] , the result follows .",
    "in this section we are going to use abstract voronoi diagrams and the data structures of section  [ sec : dualcycle ] to compute information about the distances from a fixed vertex in a planar graph when the length of the edges incident to the fixed vertex are specified at query time .",
    "let @xmath5 be a plane graph with @xmath0 vertices and let @xmath32 be a connected subgraph of @xmath5 with @xmath28 vertices such that @xmath5 and @xmath32 have the same outer face .",
    "let @xmath422 be a set of @xmath69 vertices on the outer face of @xmath32 .",
    "let @xmath97 be a subset of @xmath535 .",
    "the graph @xmath5 may have arcs with negative edges , but it does not have any negative cycle .    for each subset @xmath536 ,",
    "let @xmath537 be the graph obtained from @xmath5 by adding a new vertex @xmath105 and arcs @xmath538 .",
    "see figure  [ fig : g+ ] .",
    "we want to preprocess @xmath5 and @xmath32 for different types of queries , as follows . at preprocessing time ,",
    "the lengths of the edges in @xmath539 are undefined , unknown . at query time",
    "we are given a subset @xmath540 and the lengths @xmath541 for the arcs @xmath542 of @xmath543 .",
    "using the notation introduced in section  [ sec : preliminaries ] , we are interested in the following information about the distances from the new vertex @xmath105 : @xmath544 note that we are only using the distances to the subset @xmath545 .",
    "the set of vertices @xmath546 and the lengths @xmath541 , where @xmath547 , will be given so that they satisfy the following condition : @xmath548 this condition implies that , for all @xmath547 , there is a unique shortest from @xmath105 to @xmath547 and this shortest path is just the arc @xmath542 .",
    "this condition is important in our scenario to ensure that , when using the vertices of @xmath546 as sites with weights @xmath541 , the sites are generic and independent .    .",
    "the graph @xmath5 is represented by the gray region , vertices of @xmath546 are marked with filled in dots , and vertices of @xmath549 are represented with void dots . ]",
    "[ thm : perpiece_sum ] assume that @xmath5 is a weighted plane graph with @xmath0 vertices and no negative cycles . let @xmath32 be a subgraph of @xmath5 with @xmath28 vertices such that @xmath5 and @xmath32 have the same outer face .",
    "let @xmath422 be a set of @xmath69 vertices on the outer face of @xmath32 and let @xmath97 be a subset of @xmath535 .",
    "after @xmath550 preprocessing time , we can handle the following queries in @xmath532 expected time : given a subset of vertices @xmath536 and weights for the darts @xmath541 , @xmath547 , that satisfy the condition  , return @xmath551 .",
    "we compute and store the distances @xmath552 for all @xmath553 and @xmath554 .",
    "this can be done in @xmath555 time , as follows .",
    "first we compute a single - source shortest - path tree in @xmath556 time@xcite . with this",
    "we have a potential function in @xmath5 and for the next distances we can assume non - negative weights",
    ". then we use that all the vertices of @xmath422 are incident to the outer face of @xmath5 . using  @xcite",
    "we obtain in @xmath557 time the distances @xmath552 , for all @xmath553 and @xmath554 .",
    "we preprocess the pair of graphs @xmath5 and @xmath32 as described in theorem  [ thm : abstract ] .",
    "this takes @xmath533 time because we already have all the required distances .    for each vertex @xmath553",
    "we proceed as follows .",
    "we compute all the bisectors of the type @xmath558 for all @xmath559 .",
    "let @xmath560 be the resulting family of curves .",
    "then , we preprocess @xmath32 with respect to @xmath560 as explained in theorems  [ thm : sumweights ] .",
    "more precisely , we use theorem  [ thm : sumweights ] for the following two vertex - weight functions : @xmath561 we denote by @xmath562 and @xmath563 the corresponding sums of weights . for example , @xmath564 for all @xmath565 .",
    "this finishes the description of the preprocessing .",
    "let us analize the running time for the last step of the preprocessing .",
    "for each two vertices @xmath566 , we spend @xmath434 time to compute the bisectors @xmath558 because of lemma  [ le:2sites ] .",
    "it follows that @xmath560 is a family of walks in @xmath245 with @xmath567 dual edges , counted with multiplicity .",
    "the preprocessing of theorem  [ thm : sumweights ] is @xmath568 per vertex @xmath553 , where @xmath569 denotes the number of edges in @xmath560 .",
    "thus , over all @xmath553 , we spend @xmath570 time .",
    "consider now a query specified by a subset @xmath536 and the edge weights @xmath571 , @xmath547 , that satisfy the condition  .",
    "for each @xmath547 , define the site @xmath572 .",
    "because of condition  , the set of sites @xmath573 is independent and generic . using the data structure of theorem  [ thm : abstract ]",
    ", we compute the weighted voronoi diagram for the sites @xmath574 .",
    "thus , we obtain the abstract voronoi diagram in @xmath575 expected time . for each @xmath547 , let @xmath576 be the closed walk in the dual graph @xmath245 that defines the boundary of @xmath577 .    for each vertex @xmath554",
    "there is precisely one vertex @xmath578 such that @xmath577 contains @xmath56 .",
    "moreover , because of the definition of ( graphic ) voronoi diagrams , we have @xmath579    note that @xmath580 for each site @xmath547 , we walk along @xmath576 , the boundary of the abstract voronoi region @xmath581 , and use the data structures of theorem  [ thm : sumweights ] for @xmath582 and @xmath583 to collect the data @xmath584 here we are using that @xmath585 , and thus @xmath8 is in the interior of @xmath576 . for each @xmath576",
    "we spend @xmath586 times the complexity of its description . over all @xmath546 ,",
    "this takes @xmath587 time . from this information",
    "we can compute @xmath551 using  , and the result follows .",
    "[ thm : perpiece_max ] consider the setting of theorem  [ thm : perpiece_sum ] .",
    "after @xmath588 preprocessing time , we can handle the following queries in @xmath532 expected time : given a subset of vertices @xmath536 , weights for the darts @xmath541 , @xmath547 , that satisfy the condition  , return @xmath589 .",
    "we use the same approach as in the proof of theorem  [ thm : perpiece_sum ] .",
    "we keep using the notation of that proof .",
    "the main difference is that we do not use the data structure of theorem  [ thm : sumweights ] , but the data structure of theorem  [ thm : maxweight ] .",
    "we explain the details of this part .    for each vertex @xmath553",
    "we proceed as follows .",
    "let @xmath590 be a shortest - path tree in @xmath5 from @xmath7 .",
    "we do not compute @xmath590 , but use it to argue correctness .",
    "then , we use the data structure of theorem  [ thm : maxweight ] for @xmath5 , @xmath32 , the tree @xmath590 , and the vertex - weights @xmath591 .",
    "let @xmath592 be the corresponding maximum function that returns the data structure .",
    "thus , @xmath593 .",
    "this finishes the description of the preprocessing .",
    "let us analize the running time for this step of the preprocessing .",
    "like before , each @xmath560 is computed in @xmath567 time and has @xmath567 dual edges , counted with multiplicity .",
    "the preprocessing of theorem  [ thm : maxweight ] is @xmath594 time for each @xmath553 .",
    "therefore , the total preprocessing used in this step is @xmath595 .",
    "next , we note that each @xmath576 is in @xmath596 because of lemma  [ le : star ] .",
    "therefore , we can obtain @xmath597 in @xmath586 times the complexity of the description of @xmath576 . over all @xmath547 ,",
    "this takes @xmath587 time .    with this data ,",
    "the desired value is then obtained in @xmath598 time using that @xmath599    [ thm : perpiece_count ] consider the setting of theorem  [ thm : perpiece_sum ] .",
    "after @xmath600 preprocessing time , we can handle the following queries in @xmath532 expected time : given a subset of vertices @xmath536 , weights for the darts @xmath541 , @xmath547 , that satisfy the condition  , and a real value @xmath34 , return @xmath601 .",
    "we use the same approach as in the proof of theorem  [ thm : perpiece_sum ] and keep using its notation .",
    "the main difference is that we do not use the data structure of theorem  [ thm : sumweights ] , but the data structure of corollary  [ cor : countweight ] for the vertex - weights @xmath591 .",
    "let @xmath602 be the corresponding function .",
    "this means that , for each @xmath553 , we spend an extra factor @xmath28 in the preprocessing .",
    "thus , for each @xmath7 we spend @xmath603 time , instead of @xmath570 . over all @xmath553 ,",
    "this means that the preprocessing has an extra factor of @xmath604 .",
    "the rest of the approach is the same .",
    "we just have to use that @xmath605 and all values @xmath606 are recovered from the data structure of corollary  [ cor : countweight ] in @xmath587 time .",
    "the data structures of theorems  [ thm : perpiece_sum ] , [ thm : perpiece_max ] and  [ thm : perpiece_count ] are going to be used for each piece of an @xmath28-division .",
    "then , for each vertex of @xmath5 we are going to query it .",
    "we first explain the precise concept of piece and division that we use , and then explain its use .",
    "[ [ divisions . ] ] divisions .",
    "+ + + + + + + + + +    the concept of @xmath28-division for planar graphs was introduced by frederickson  @xcite , and then refined and used by several authors ; see for example  @xcite for a sample . for us it is most convenient to use the construction of klein , mozes and sommer  @xcite .",
    "we first state the definitions carefully , almost verbatim from  @xcite .",
    "let @xmath5 be a plane graph .",
    "a @xmath32 of @xmath5 is an edge - induced subgraph of @xmath5 . in each piece",
    "we assume the embedding inherited from @xmath5 .",
    "a of a piece @xmath32 is a vertex of @xmath32 that is incident to some edge in @xmath417 .",
    "a of a piece @xmath32 is a face of @xmath32 that is not a face of @xmath5 .",
    "note that all boundary vertices of a piece @xmath32 are incident to a hole of @xmath32 .",
    "an of @xmath5 is a collection @xmath607 of pieces of @xmath5 such that    * there are @xmath29 pieces , that is , @xmath608 ; * each edge of @xmath5 is in at least one piece ; * each piece has @xmath30 vertices ; * each piece has @xmath31 boundary vertices ; * each piece has @xmath33 holes .",
    "[ thm : division ] there is a linear - time algorithm that , for any biconnected triangulated planar embedded graph @xmath5 , outputs an @xmath28-division of @xmath5 with few holes .",
    "in fact , we will only use that all pieces together have @xmath29 holes .",
    "thus , other decompositions proposed by other authors could also be used . note that we can assume that each piece is connected because we could replace each piece by its connected components , and we would get a new @xmath28-division with a few holes .    [ [ work - per - piece . ] ] work per piece .",
    "+ + + + + + + + + + + + + + +    we now describe how to compute the relevant information within a fixed piece and the information between a fixed piece and all vertices outside the piece .",
    "the next result is enough for our usage ; stronger can be obtained using , for example  @xcite    [ le : withinpiece ] let @xmath32 be a piece of @xmath5 with @xmath28 vertices and @xmath31 boundary vertices .",
    "let @xmath97 be a subset of vertices in @xmath32 .",
    "in @xmath609 time we can compute for all vertices @xmath554 the values @xmath610 , @xmath611 , and @xmath612 ( for a given @xmath13 ) .",
    "let @xmath613 be the set of boundary vertices of @xmath32 in @xmath5 .",
    "we compute shortest - path trees from each vertex @xmath614 in @xmath5 in near - linear time  @xcite .",
    "this takes @xmath615 time .",
    "we build a graph @xmath616 by adding to @xmath32 arcs between each pair of vertices of @xmath613 .",
    "the length of each new arc @xmath617 is set to @xmath9 .",
    "standard arguments show that a distance between any two vertices of @xmath32 is the same in @xmath5 and in @xmath616 .",
    "the graph @xmath616 has @xmath618 edges and @xmath30 vertices .",
    "we can compute all pairwise distances in @xmath619 time using standard approaches .",
    "( since @xmath616 may have negative weights , we may have to use a potential function . )    from all the distances in @xmath616 , that are also distances in @xmath5 , we can compute the desired values directly .",
    "[ le : outside_piece ] let @xmath32 be a piece of @xmath5 with @xmath28 vertices , @xmath31 boundary vertices , and @xmath620 holes .",
    "let @xmath97 be a subset of vertices in @xmath32 .",
    "* in @xmath621 expected time we can compute the values @xmath611 for all vertices @xmath622 . * in @xmath621 expected time we can compute the values @xmath610 for all vertices @xmath622 . * in @xmath623 expected time we can compute the values @xmath612 for a given @xmath34 and all vertices @xmath622 .",
    "let @xmath624 be the facial walks of the holes of @xmath32 . for @xmath625 $ ] ,",
    "let @xmath626 be the vertices of @xmath5 contained in the hole defined by @xmath627 . since each vertex of @xmath628 is contained in exactly one hole of @xmath32 , the sets @xmath629 form a partition of @xmath628 .",
    "for each @xmath625 $ ] , we define the graph @xmath630 as the subgraph of @xmath5 obtained by filling the holes of @xmath32 , but the one that defines @xmath626 . for",
    "each @xmath625 $ ] , let @xmath631 be the set of boundary vertices that appear in @xmath627 .",
    "see figure  [ fig : perpiece ] for an example .",
    "the sets @xmath629 , @xmath632 , and the graphs @xmath633 can be constructed in @xmath634 time .     and the vertices @xmath631 in the proof of lemma  [ le : outside_piece ] .",
    "on the left we have a graph @xmath5 ( in gray ) and a piece @xmath32 ( in light green ) of @xmath5 with three holes . on the right we have , for @xmath635 $ ] , the graph @xmath630 ( in light green ) , the set @xmath631 ( red squares ) and the set @xmath626 ( blue crosses ) . ]",
    "we compute the distances in @xmath5 and in @xmath630 from and to all boundary vertices @xmath631 .",
    "this can be done computing @xmath636 different shortest - path trees , each of them in @xmath5 , @xmath630 , or the reversed graphs @xmath89 , @xmath637 . since",
    "each single - source shortest path can be computed in @xmath638 time  @xcite , we spend in total @xmath639 time .",
    "consider any fixed index @xmath625 $ ] . for each @xmath640",
    ", let @xmath641 be the vertices @xmath8 of @xmath631 such that in the shortest path in @xmath5 from @xmath56 to @xmath8 the last arc is not contained in @xmath630 .",
    "for each @xmath642 , there exists some other boundary vertex @xmath643 such that @xmath644 .",
    "therefore , for each @xmath645 , we have @xmath646 because the selection we made for @xmath641 and the uniqueness of shortest paths in @xmath5 , we have that @xmath647 using the shortest - path trees to @xmath648 , we can identify the relevant pairs @xmath649 in @xmath650 time . since @xmath651 , over all indices",
    "@xmath625 $ ] we spend @xmath652 time .    for each @xmath625 $ ] ,",
    "fix an embedding of @xmath630 such that @xmath627 defines the outer face and thus @xmath631 lies in the outer face of @xmath630 and @xmath32 .",
    "now there are slight differences depending on the data we want to compute .",
    "the difference lies in which data structure we use .",
    "let us first consider the problem of computing @xmath611 .",
    "we apply theorem  [ thm : perpiece_sum ] for the graph @xmath630 and the piece @xmath32 with respect to the set @xmath631 .",
    "since @xmath630 has @xmath16 vertices , @xmath32 has @xmath30 vertices , and @xmath631 has @xmath31 vertices , the preprocessing takes @xmath653 time .",
    "now , for each vertex @xmath640 , we consider the graph @xmath654 with edge weights @xmath655 for all @xmath656 .",
    "note that , with these weights , the property in   corresponds to condition  .",
    "moreover , for each @xmath645 we have @xmath657 .",
    "therefore , we can use the data structure of theorem  [ thm : perpiece_sum ] to get in @xmath658 time @xmath659    iterating over all @xmath625 $ ] and noting that @xmath629 is a partition of @xmath628 , we obtain the desired values : @xmath611 for all @xmath622 .",
    "the running time for the preprocessing of this last step is @xmath660 and the running time for the queries is @xmath661 the result in the first item follows .    for computing @xmath610 , we use the same approach , but employ theorem  [ thm : perpiece_max ] instead of theorem  [ thm : perpiece_sum ] . the preprocessing time for @xmath625 $ ]",
    "has an extra factor @xmath662 .",
    "therefore , the preprocessing time in the last step becomes @xmath663 the rest is essentially the same , and we obtain the claim in the second item .    for computing @xmath612",
    ", we use the same approach , but employ theorem  [ thm : perpiece_count ] instead of theorem  [ thm : perpiece_sum ] . the preprocessing time for @xmath625 $ ]",
    "has an extra factor @xmath664 .",
    "therefore , the preprocessing time in the last step becomes @xmath665 the rest is essentially the same , and we obtain the claim in the third item .",
    "[ [ working - over - all - pieces . ] ] working over all pieces .",
    "+ + + + + + + + + + + + + + + + + + + + + + + +    we can now obtain our main result .",
    "[ thm : main ] let @xmath5 be a planar graph with @xmath0 vertices , real abstract length on its arcs , and no negative cycle",
    ". in @xmath1 expected time we can compute @xmath666 and @xmath667 for all vertices @xmath7 of @xmath5 . for a given @xmath13 , in @xmath2 expected time we can compute @xmath668 for all vertices @xmath7 of @xmath5 .",
    "adding edges of sufficiently large lengths , we may assume that @xmath5 is triangulated .",
    "we also embed @xmath5 .",
    "these operations can be done in linear time . with a slight abuse of notation ,",
    "we keep using @xmath5 for the resulting embedded , triangulated graph .",
    "we compute an @xmath28-division @xmath669 of @xmath5 with few holes , for a parameter @xmath28 to be specified below . according to theorem  [ thm : division ]",
    ", this takes @xmath16 time .    to avoid double counting",
    "we assign each vertex to a unique piece , as follows . for each vertex @xmath7 of @xmath5",
    "we select a unique index @xmath670 such that the piece @xmath671 contains @xmath7 . for each piece @xmath672",
    ", we define the set @xmath673 .",
    "the sets @xmath674 are a partition of @xmath43 and can be easily computed in linear time .",
    "next , we iterate over the pieces and , for each piece @xmath675 , we use lemma  [ le : outside_piece ] to compute the values @xmath676 we also use lemma  [ le : withinpiece ] to compute @xmath677 since the piece @xmath678 has @xmath33 holes , we spend @xmath679 time per piece . iterating over the @xmath29 pieces , we get @xmath680\\ ] ] in time @xmath681 because @xmath682 is a partition of @xmath43 we can easily compute the desired values because @xmath683 }   \\operatorname{sum}(v , u_i , g),\\\\          \\operatorname{diam}(v , v(g),g ) ~&=~ \\max \\ { \\operatorname{diam}(v , u_i , g)\\mid i\\in [ k]\\}.      \\end{aligned}\\ ] ] ( for the diameter of course we do not need that the sets @xmath682 are disjoint . ) taking @xmath684 the running time becomes @xmath685 in expectation .    for @xmath686",
    "we use the third item of lemma  [ le : outside_piece ] to compute for each piece @xmath678 @xmath687 then , for each piece we spend @xmath688 . over all pieces ,",
    "the running time thus becomes @xmath689 choosing @xmath690 we obtain a running time of @xmath691 .",
    "again using that @xmath682 is a partition of @xmath43 , we can compute @xmath692 }   \\operatorname{count_\\le}(v , u_i , g,\\delta ) .      \\end{aligned}\\ ] ]    let @xmath5 be a planar graph with @xmath0 vertices , real abstract length on its arcs , and no negative cycle",
    ". in @xmath1 expected time we can compute the diameter of @xmath5 and the sum of the pairwise distances in @xmath5 . for a given @xmath13 , in @xmath2 expected time we can compute the number of pairs of vertices in @xmath5 at distance at most @xmath34 .",
    "we have decided to explain the construction through the use of abstract voronoi diagrams , instead of providing an algorithm tailored to our case .",
    "it is not clear to author which option would be better . in any case , for people familiar with randomized incremental constructions , it should be clear that the details can be worked out , once the compact representation of the bisectors using the dual graph is available .",
    "using a direct algorithm perhaps we could get rid of the assumption that the sites have to be in the outer face and perhaps we could actually build a deterministic algorithm .",
    "there are deterministic algorithms to compute abstract voronoi diagrams  @xcite .",
    "however , they require additional elementary operations and properties . also , when the abstract voronoi diagram has a forest - like shape , it can be computed in linear time  @xcite . at this point",
    ", it is unclear to the author whether these results are applicable in our case .",
    "we think that the algorithm can be extended to graphs on surfaces of small genus , but for this one should take care to extend the construction of abstract voronoi diagrams to graphs on surfaces or to planar graphs when the sites are in @xmath693 faces , where @xmath67 is the genus of the surface .",
    "let us discuss the approach the reduction to the planar case .",
    "the first step is to find an @xmath28-division where each part is planar . for this we can use the separator theorem of eppstein  @xcite .",
    "it computes a set of curves on the surface that pass through @xmath694 vertices of @xmath5 , they do not pass through the interior of any edge , and cutting along them gives a collection of planar patches , possibly with multiple holes . taking a maximal subset of the curves that are homologically independent , we will get @xmath693 curves that pass through @xmath694 vertices and cut the surface into planar patches .",
    "now we can compute an @xmath28-division in each of the patches .",
    "we can also compute the distances from all the boundary vertices because shortest paths in the presence of negative weights can be computed in subquadratic time  @xcite .",
    "now we run into problems .",
    "consider a vertex @xmath7 and a piece @xmath32 .",
    "the shortest paths from @xmath7 to different vertices of @xmath32 can pass through different boundary cycles . in the planar case",
    ", we always have a boundary cycle that intersects all the paths from @xmath7 to all vertices of @xmath32 .",
    "there is no such cycle in the case of surfaces , for example , when one of the planar patches is a cylinder .",
    "computing voronoi diagrams for sites placed in @xmath693 cycles would handle this problem .",
    "while we think that this should be doable , it requires non - trivial work .",
    "in particular , some of the holes may have non - trivial topology .    at this point",
    ", we think that the main problem is whether the exponent @xmath695 can be substantially reduced . on the opposite direction",
    ", the author would be surprised if the problems considered in this paper can be solved in near - linear time .",
    "thus , the author conjectures that there should be some conditional lower bounds of the type @xmath696 for some constant @xmath697 .",
    "this work was initiated at the dagstuhl seminar algorithms for optimization problems in planar graphs , 2016 .",
    "i am very grateful to kyle fox , shay mozes , oren weimann , and christian wulff - nilsen for several discussions on the problems treated here .      a.  abboud , v.  vassilevska  williams , and j.  wang .",
    "approximation and fixed parameter subquadratic algorithms for radius and diameter in sparse graphs . , pp .  377391 , 2016 , http://dl.acm.org/citation.cfm?id=2884435.2884463 .",
    "m.  a. bender , m.  farach - colton , g.  pemmasani , s.  skiena , and p.  sumazin .",
    "lowest common ancestors in trees and directed acyclic graphs . 57(2):7594 , 2005 , http://dx.doi.org/10.1016/j.jalgor.2005.08.001 .",
    "j.  fischer and v.  heun . a new succinct representation of rmq - information and improvements in the enhanced suffix array .",
    ", pp .  459470 .",
    "springer , lecture notes in computer science 4614 , 2007 , http://dx.doi.org/10.1007/978-3-540-74450-4_41 .",
    "t.  husfeldt . computing graph distances parameterized by treewidth and diameter . , pp .",
    "schloss dagstuhl - leibniz - zentrum fuer informatik , lipics  63 , 2017 , http://dx.doi.org/10.4230/lipics.ipec.2016.16 .",
    "k.  kawarabayashi , p.  n. klein , and c.  sommer .",
    "linear - space approximate distance oracles for planar , bounded - genus and minor - free graphs . , pp .",
    "springer , lecture notes in computer science 6755 , 2011 , http://dx.doi.org/10.1007/978-3-642-22006-7_12 .",
    "p.  n. klein , s.  mozes , and c.  sommer .",
    "structured recursive separator decompositions for planar graphs in linear time . , pp .",
    "505514 , 2013 , http://doi.acm.org/10.1145/2488608.2488672 .",
    "see http://arxiv.org/abs/1208.2223 for the full version .",
    "p.  n. klein , s.  mozes , and o.  weimann .",
    "shortest paths in directed planar graphs with negative lengths : a linear - space @xmath698-time algorithm . 6(2):30:130:18 , 2010 , http://doi.acm.org/10.1145/1721837.1721846 .",
    "d.  marx and m.  pilipczuk .",
    "optimal parameterized algorithms for planar facility location problems using voronoi diagrams . , pp .",
    "springer , lecture notes in computer science 9294 , 2015 , http://dx.doi.org/10.1007/978-3-662-48350-3_72 .",
    "full version available at http://arxiv.org/abs/1504.05476 .",
    "s.  mozes and c.  wulff - nilsen .",
    "shortest paths in planar graphs with real lengths in @xmath699 time . , pp .",
    "springer , lecture notes in computer science 6347 , 2010 , http://dx.doi.org/10.1007/978-3-642-15781-3_18 .                    c.  wulff - nilsen .",
    "wiener index , diameter , and stretch factor of a weighted planar graph in subquadratic time .",
    "tech . rep .",
    "08 - 16 , department of computer science , university of copenhagen , 2008 , http://www.diku.dk/old/publikationer/tekniske.rapporter/rapporter/08-16.pdf .",
    "preliminary version in eurcg 2009 .    c.  wulff - nilsen .",
    "wiener index , diameter , and stretch factor of a weighted planar graph in subquadratic time , 2010 .",
    "paper m in the phd thesis of c. wulff - nilsen , available at http://www.diku.dk/forskning/phd-studiet/phd/thesischristian.pdf ."
  ],
  "abstract_text": [
    "<S> we show how to compute for @xmath0-vertex planar graphs in @xmath1 expected time the diameter and the sum of the pairwise distances . </S>",
    "<S> the algorithms work for directed graphs with real weights and no negative cycles . in @xmath2 </S>",
    "<S> expected time we can also compute the number of pairs of vertices at distance smaller than a given threshold . </S>",
    "<S> these are the first algorithms for these problems using time @xmath3 for some constant @xmath4 , even when restricted to undirected , unweighted planar graphs .    </S>",
    "<S> * keywords : * planar graph , diameter , wiener index , distances in graphs , distance counting , voronoi diagram . </S>"
  ]
}