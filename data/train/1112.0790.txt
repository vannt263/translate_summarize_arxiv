{
  "article_text": [
    "graph matching is one of the most well studied problems in combinatorial optimization .",
    "the original motivations of the problem were minimizing transportation costs  @xcite and optimally assigning personnel to job positions  @xcite . over the years matching algorithms have found applications in scheduling , approximation algorithms , network switching , and as key subroutines in other optimization algorithms , for example , undirected shortest paths  @xcite , planar max cut  @xcite , chinese postman tours  @xcite , and metric traveling salesman  @xcite . in most practical applications it is _ not _ critical that the algorithm produce an exactly optimum solution . in this article",
    "we explore the extent to which this freedom  not demanding exact solutions  allows us to design simpler and more efficient algorithms .    in order to discuss prior work with precision",
    "we must introduce some notation and terminology .",
    "the input is a weighted graph @xmath13 where @xmath14 and @xmath15 are the number of vertices and edges and @xmath16 is the edge weight function .",
    "if @xmath16 assigns integer ( rather than real ) weights , let @xmath12 be the largest magnitude of a weight .",
    "an unweighted graph is one for which @xmath17 for all @xmath18 .",
    "a _ matching _ is a set of vertex - disjoint edges and a _ perfect _ matching is one in which all vertices are matched .",
    "the weight of a matching is the sum of its edge weights .",
    "we use mwm ( and mwpm ) to denote the problem of finding a maximum weight ( perfect ) matching , as well as the matching itself .",
    "we use mcm and mcpm for the cardinality ( unweighted ) versions of these problems . the mwpm problem on bipartite graphs",
    "is often called the _ assignment _ problem .        ' '' ''    ' '' ''    |     + & & + & folklore / trivial & @xmath19 bipartite + 1965 & edmonds & poly@xmath20 + 1965 & witzgall & zahn & + 1969 & balinski & + 1974 & kameda & munro & + 1976 & gabow & [ 0mm][0mm]@xmath19 or @xmath21 or @xmath22 + 1976 & lawler & + 1976 & karzanov & + 1971 & hopcroft & karp & + 1973 & dinic & karzanov & [ 0mm][0mm]@xmath3 [ 0mm][0mm]bipartite + 1980 & micali & vazirani & + 1991 & gabow & tarjan & [ 0mm][0mm]@xmath3 + 1981 & ibarra & moran & @xmath23 cardinality only , randomized , bipartite + & & @xmath23 cardinality only , randomized + [ 0mm][0mm]1989 & [ 0mm][0mm]rabin & vazirani & @xmath24 randomized + 1991 & alt , blum , mehlhorn & paul & @xmath25 bipartite + 1991 & feder & motwani & + 1997 & goldberg & kennedy & [ 0mm][0mm]@xmath26 [ 0mm][0mm]bipartite , @xmath27 + 1996 & cheriyan & mehlhorn & @xmath28 bipartite , @xmath29 machine word size + 2004 & goldberg & karzanov & @xmath26 + 2004 & mucha & sankowski & + 2006 & harvey & [ 0mm][0mm]@xmath23 [ 0mm][0mm]randomized +    the mwpm and mwm problems",
    "are reducible to each other .",
    "given an instance @xmath30 of mwm , let @xmath31 consist of two copies of @xmath30 with zero - weight edges connecting copies of the same vertex .",
    "clearly a mwpm in @xmath31 corresponds to a pair of mwms in @xmath30 . in the reverse direction ,",
    "if @xmath30 is an instance of mwpm with weight function @xmath16 , find the mwm of @xmath30 using the weight function @xmath32 .",
    "maximum weight matchings with respect to @xmath33 necessarily have maximum cardinality .",
    "call a matching _ @xmath34-approximate _ , where @xmath35 $ ] , if its weight is at least a factor @xmath34 of the optimum matching .",
    "let @xmath34-mwm ( and @xmath34-mcm ) be the problem of finding @xmath34-approximate maximum weight ( cardinality ) matching , as well as the matching itself .",
    "tables  [ tbl : cardhistory ] , [ tbl : bipartitehistory ] , and [ tbl : generalhistory ] give an at - a - glance history of exact matching algorithms .",
    "algorithms are dated according to their initial publication , and are included either because they establish a new time bound , or employ a noteworthy technique , or are of historical interest .",
    "table  [ tbl : approxhistory ] gives a history of approximate mcm and mwm algorithms .",
    "the mwm problem is expressible as the following integer linear program , where @xmath36 represents the incidence vector of the matching .",
    "@xmath37{0mm}{0 mm}\\rule{0mm}{6 mm}}\\mbox{$x(e)$ is an integer } & \\forall e\\in e\\label{int } \\intertext{it is well known that in { \\em bipartite } graphs the integrality requirement~(\\ref{int } ) is redundant , that is , the basic feasible solutions of the lp~(\\ref{lp } ) are nonetheless integral .",
    "see~\\cite{birkhoff46,dantzig51}. the dual of~(\\ref{lp } ) is } \\mbox{minimize } { \\hspace*{.5 cm } } & \\sum_{u\\in v } y(u)\\nonumber\\\\ \\mbox{subject to } { \\hspace*{.5 cm } } & y(e ) \\ge w(e ) & \\forall e\\in e      \\label{dual - bip}\\\\                      & y(u ) \\ge 0 & \\forall u\\in v\\nonumber\\\\ \\mbox{where , by definition , } { \\hspace*{.5 cm } } & y(u , v ) { \\stackrel{\\rm def}{=}}y(u ) + y(v)\\nonumber\\end{aligned}\\ ] ]        ' '' ''    ' '' ''    l|     + & & + 1946 & easterfield & @xmath38 + 1953 & von neumann & + 1955 & kuhn & + 1955 & gleyzal & @xmath39 + 1957 & munkres & + 1964 & balinski & gomory & + 1969 & dinic & kronrod & @xmath22 + 1970 & edmonds & karp & @xmath40 time for one sssp computation on + 1971 & tomizawa & [ 0mm][0mm]@xmath41 a non - negatively weighted graph + 1975 & johnson & @xmath42 @xmath43 + & & @xmath44 integer weights + [ 0mm][0mm]1983 & [ 0mm][0mm]gabow & @xmath45 mwm only , integer weights + 1984 & fredman & tarjan & @xmath46 + 1988 & gabow & tarjan & + 1992 & orlin & ahuja & @xmath47 integer weights + 1997 & goldberg & kennedy & + 1996 & cheriyan & mehlhorn & @xmath48 integer weights + & & @xmath49 mwm only , integer weights + [ 0mm][0mm]1999 & [ 0mm][0mm]kao , lam , sung & ting & @xmath50 mwm only , integer weights + 2004 & mucha & sankowski & @xmath51 mwm only , randomized , integer weights + 2006 & sankowski & @xmath51 randomized , integer weights + & @xmath52 mwm only , integer weights + & @xmath47 integer weights +    ( in the mwpm problem @xmath53 holds with equality in the primal and @xmath54 is unconstrained in the dual . )",
    "@xcite publication of the _ hungarian method _ stimulated research on this problem from an _ algorithmic _ perspective , but it was not without precedent .",
    "kuhn noted that the algorithm was latent in the work of hungarian mathematicians knig and egervry .",
    "however , the history goes back even further .",
    "a recently rediscovered article of jacobi from 1865 describes a variant of the hungarian algorithm ; see  @xcite .",
    "although kuhn s algorithm self - evidently runs in polynomial time , this mark of efficiency was noted later : munkres  @xcite showed that @xmath55 time is sufficient .",
    "kuhn s hungarian algorithm is sometimes described as a _ dual _ ( rather than primal ) algorithm , due to the fact that it maintains feasibility of the dual  ( [ dual - bip ] ) and progressively improves the primal objective  ( [ lp ] ) by finding augmenting paths .",
    "gleyzal  @xcite ( see also  @xcite ) gave a _",
    "algorithm for the assignment problem in which the primal is feasible ( the current matching is perfect ) and the dual objective is progressively improved via weight - augmenting cycles .",
    "matrix , which can be solved in polynomial time  @xcite . ]",
    "the search for faster assignment algorithms began in earnest in the 1960s .",
    "dinic and kronrod  @xcite gave an @xmath56-time algorithm and edmonds and karp  @xcite and tomizawa  @xcite observed that assignment is reducible to @xmath2 single - source shortest path computations on a non - negatively weighted directed graph .",
    "shortest path computations on arbitrarily weighted graphs .",
    "see ford and fulkerson  @xcite , hoffman and markowitz  @xcite , and desler and hakimi  @xcite for different reductions . ]",
    "using fibonacci heaps , @xmath2 executions of dijkstra s",
    "@xcite shortest path algorithm take @xmath57 time . on integer weighted graphs this algorithm",
    "can be implemented slightly faster , in @xmath58 time  @xcite or @xmath59 time ( randomized )  @xcite , independent of the maximum edge weight .",
    "gabow and tarjan  @xcite , improving an earlier algorithm of gabow  @xcite , gave a _ scaling _",
    "algorithm for the assignment problem running in @xmath10 time , which is just a @xmath60 factor slower than the fastest mcm algorithm  @xcite . for reasonably sparse graphs gabow and tarjan",
    "s  @xcite assignment algorithm remains unimproved .",
    "however , faster algorithms have been developed when @xmath12 is small or the graph is dense  @xcite . of particular interest is sankowski s algorithm  @xcite , which solves mwpm in @xmath61 time , where @xmath62 is the exponent of square matrix multiplication .",
    "whereas the basic solutions to  ( [ lp],[dual - bip ] ) are integral on bipartite graphs , the same is not true for general graphs .",
    "for example , if the graph is a unit - weighted cycle with length @xmath63 the mwm has weight @xmath64 but ( [ lp ] ) achieves its maximum of @xmath65 by setting @xmath66 for all @xmath18 .",
    "let @xmath67 be the set of all odd - size subsets of @xmath68 .",
    "clearly every feasible solution to the integer linear program ( [ lp],[int ] ) also satisfies the following odd - set constraints . @xmath69        ' '' ''    ' '' ''     + & & + 1965 & edmonds & @xmath70 + 1974 & gabow & + 1976 & lawler & [ 0mm][0mm]@xmath22 + 1976 & karzanov & @xmath71 + 1978 & cunningham & marsh & @xmath70 + 1982 & galil , micali & gabow & @xmath72 + & & @xmath44 integer weights + [ 0mm][0mm]1985 & [ 0mm][0mm]gabow & @xmath45 mwm only , integer weights + 1989 & gabow , galil & spencer & @xmath73 @xmath43 + 1990 & gabow & @xmath46 + 1991 & gabow & tarjan & @xmath74 integer weights + 2006 & sankowski & @xmath51 , integer weights + & & @xmath49 mwm only , integer weights + [ 0mm][0mm]2012 & [ 0mm][0mm]huang & kavitha & @xmath51 mwm only , randomized , integer weights +    edmonds  @xcite proved that if we replace the integrality constraints  ( [ int ] ) with ( [ odd ] ) , the basic solutions to the resulting lp are integral .",
    ", for all @xmath75 , and we have the freedom to use an alternative variety of odd - set constraints , namely , @xmath76 .",
    "] edmonds algorithm mimics the structure of the hungarian algorithm but the search for augmenting paths is complicated by the presence of odd - length alternating cycles and the fact that matched edges must be searched in both directions .",
    "edmonds solution is to contract _ blossoms _ as they are encountered .",
    "a blossom is defined inductively as an odd - length cycle alternating between matched and unmatched edges , whose components are either single vertices or blossoms in their own right .",
    "blossoms are discussed in detail in section  [ sect : lp ] .",
    "the fastest implementation of edmonds algorithm , due to gabow  @xcite , runs in @xmath77 time , which matches the running time of the best bipartite mwpm algorithm  @xcite .",
    "gabow and tarjan  @xcite extended their scaling algorithm for mwpm to general graphs , achieving a running time of @xmath78 , which is the fastest known algorithm for integer - weighted graphs and nearly matches the @xmath79 time bound of the best mcm algorithms  @xcite . , where the @xmath80 factor comes from an @xmath81 implementation of the _ split - findmin _ data structure  @xcite .",
    "this can be reduced to @xmath82  @xcite .",
    "however , thorup  @xcite noted that split - findmin can be implemented in @xmath83 time on integer - weighted graphs . ] as in the bipartite case , faster algorithms for mwm and mwpm are known when the graph is dense or @xmath12 is small .",
    "sankowski  @xcite noted that the _ weight _ of the mwpm could be computed in @xmath61 time ; however , it remains an open problem to adapt the cardinality matching algorithms of  @xcite to weighted graphs .",
    "huang and kavitha  @xcite , generalizing @xcite , proved that mwm is reducible to @xmath12 mcm computations , which , by virtue of  @xcite , implies a new bound of @xmath84 .        ' '' ''    ' '' ''     + & & & + 1971 & hopcroft & karp & & + 1973 & dinic & karzanov & [ 0mm][0mm]@xmath5-mcm & [ 0mm][0mm]@xmath85 [ 0mm][0mm]bipartite + 1980 & micali & vazirani & & + 1991 & gabow & tarjan & [ 0mm][0mm]@xmath5-mcm & [ 0mm][0mm]@xmath85 +   + & folklore / trivial & @xmath86-mwm & @xmath87 + 1988 & gabow & tarjan & @xmath5-mwm & @xmath88 bipartite + 1991 & gabow & tarjan & @xmath5-mwm & @xmath89 + 1999 & preis & & + 2003 & drake & hougardy & [ 0mm][0mm]@xmath86-mwm & [ 0mm][0mm]@xmath1 + 2003 & drake & hougardy & @xmath90-mwm & @xmath85 + 2004 & pettie & sanders & @xmath90-mwm & @xmath91 + 2010 & duan & pettie & & + 2010 & hanke & hougardy & [ 0mm][0mm]@xmath92-mwm & [ 0mm][0mm]@xmath93 + 2010 & hanke & hougardy & @xmath94-mwm & @xmath95    ' '' ''    ' '' ''     + & & @xmath96 + & [ 0mm][0mm]@xmath5-mwm & @xmath97 integer weights +      the approximate mwm problem is remarkable in that it has been studied for decades , has practical applications , and yet , as late as 1999 , essentially nothing better than the greedy algorithm was known .",
    "high - order bits of the edge weights , their exact scaling algorithms become @xmath0-time @xmath5-mwm algorithms for bipartite and general graphs .",
    "] moreover , the @xmath5-mcm problem had been solved satisfactorily in the early 1970s . although not stated as such",
    ", the @xmath79-time exact mcm algorithms @xcite are actually @xmath5-mcm algorithms running in @xmath98 time .",
    "these algorithms are based on three observations ( i ) a maximal set of shortest augmenting paths can be found in linear time , ( ii ) augmenting along such a set increases the length of the shortest augmenting path , and ( iii ) that after @xmath64 rounds of such augmentations the resulting matching is a @xmath99-mcm .",
    "preis  @xcite gave a linear time @xmath86-mwm algorithm , which improves on the greedy algorithm s @xmath100 running time but not its approximation guarantee .",
    "drake and hougardy  @xcite presented the first linear time algorithm with an approximation guarantee greater than @xmath101 .",
    "specifically , they gave a @xmath102-mwm algorithm running in @xmath98 time , for any @xmath4 .",
    "the dependence on @xmath7 was later improved by pettie and sanders  @xcite .",
    "these algorithms are based on a weighted version of hopcroft and karp s  @xcite argument , namely that any matching whose weight - augmenting paths _ and cycles _ have at least @xmath64 unmatched edges is necessarily a @xmath103-mwm .",
    "algorithms are presented in  @xcite with different time / approximation tradeoffs : a @xmath92-mwm algorithm running in time @xmath104 and a @xmath94-mwm algorithm running in @xmath105 time .",
    "we present the first @xmath5-mwm algorithm that significantly improves on the @xmath0 running times of  @xcite .",
    "our algorithm runs in @xmath6 time on general graphs and @xmath106 time on integer - weighted general graphs .",
    "this is optimal for any fixed @xmath7 and near - optimal as a function of @xmath7 , given the state - of - the - art in mcm algorithms .- mwm algorithm running in @xmath107 time yields an _ exact _ mcm algorithm running in @xmath108 time , for any @xmath7 .",
    "thus , any @xmath5-mwm algorithm running in @xmath109 time would improve the @xmath79 mcm algorithms  @xcite .",
    "] moreover , our algorithm is as _ simple _ as one could reasonably hope for .",
    "its search for augmenting paths uses depth first search  @xcite rather than the double depth first search of @xcite .",
    "it uses no priority queues , split - findmin structures  @xcite , or the blossom `` shells '' that arise from gabow and tarjan s  @xcite scaling technique .",
    "our second result is a new algorithm for exact mwm on bipartite graphs running in @xmath8 time , which improves on @xcite for @xmath110 . according to the mwpm@xmath111mwm reduction",
    ", this also yields a new @xmath10 mwpm algorithm , matching the performance of  @xcite .",
    "however , our algorithm can be used to solve mwpm directly , in @xmath112 scales rather than @xmath60 , which might be practically significant . in terms of technique ,",
    "our algorithm is a synthesis of the dual ( hungarian - type ) approach of gabow and tarjan  @xcite and the primal approach of balinski and gomory  @xcite , among others .",
    "the @xmath113 factor in our running time arises not from the standard blocking flow - type argument  @xcite but dilworth s lemma  @xcite , which ensures that every partial order on @xmath2 elements contains a chain or anti - chain with size @xmath113 .",
    "dilworth s lemma has also been used in goldberg s",
    "@xcite single - source shortest path algorithm .",
    "our focus is on algorithms that accept _ arbitrary _ input graphs and that give provably good _ worst - case _ approximations .",
    "these twin objectives are self - evidently attractive , yet nearly all work ( prior to  preis  @xcite ) on approximate weighted matching focused on specialized cases or weaker approximation guarantees",
    ". early work on the problem usually considered complete bipartite graphs , and confirmed the efficiency of heuristics either experimentally or analytically with respect to inputs over some natural distribution  @xcite .",
    "see avis  @xcite for a more detailed discussion of heuristics .",
    "most work in the area considers graphs defined by metrics , often euclidean metrics .",
    "reingold and tarjan  @xcite proved that the greedy algorithm for metric mwpm has an approximation ratio of @xmath114 .",
    "goemans and williamson  @xcite gave a 2-approximation for metric mwpm that can be implemented in @xmath115 time  @xcite , or @xmath116 time  @xcite in metrics defined by @xmath1-edge graphs .",
    "the euclidean mwpm comes in two flavors : the monochromatic version is given @xmath117 points and the bichromatic version is given @xmath117 points , @xmath2 of which are colored blue , the rest red , where the matching can not include monochromatic edges .",
    "varadarajan and agarwal  @xcite gave @xmath118-mwpm algorithms for the mono- and bichromatic variants running in time @xmath119 and @xmath120 , respectively .",
    "other time - approximation tradeoffs for the bichromatic variant are possible  @xcite , including an @xmath121 time algorithm for @xmath122-approximating the _ weight _ of the mwpm  @xcite . some work considers the even more specialized case of euclidean matching in the unit square , which allows for algorithms that guarantee absolute upper bounds on the weight of the matching ; see  @xcite and the references therein .",
    "there are several applications of mwm ( on general or bipartite graphs ) in which one would gladly sacrifice matching quality for speed . in input - queued switches packets",
    "are routed across a _ switch fabric _ from input to output ports . in each cycle",
    "one partial permutation can be realized .",
    "existing algorithms for choosing these matchings , such as islip  @xcite and pim  @xcite , guarantee @xmath123-mcms and it has been shown  @xcite that ( approximate ) mwms have good throughput guarantees , where edge weights are based on queue - length .",
    "see also  @xcite .",
    "approximate mwm algorithms are a component in several multilevel graph clustering libraries .",
    "( party , for example , builds a hierarchical clustering by iteratively finding and contracting approximate mwms ; see  @xcite . )",
    "approximate mwm algorithms are used as a heuristic preprocessing step in several sparse linear system solvers @xcite .",
    "the goal is to permute the rows / columns to maximize the weight on or near the main diagonal .",
    "section  [ sect : def ] introduces some notation , states well known properties of augmenting paths and blossoms , and reviews edmonds optimality conditions for weighted matching . in section  [",
    "sect : approxmwm ] we present our @xmath5-mwm algorithm and in section  [ sect : exact ] we present exact algorithms for bipartite mwm and mwpm .",
    "we use @xmath124 and @xmath125 to refer to the edge and vertex sets of @xmath126 or the graph induced by @xmath126 , that is , @xmath127 is the set of endpoints of @xmath128 and @xmath129 is the edge set of the graph induced by @xmath130 .",
    "a _ matching _",
    "@xmath131 is a set of vertex - disjoint edges .",
    "vertices not incident to an @xmath131 edge are _",
    "free_. an alternating path ( or cycle ) is one whose edges alternate between @xmath131 and @xmath132 .",
    "an alternating path @xmath133 is _ augmenting _ if @xmath133 begins and ends at free vertices , that is , @xmath134 is a matching with cardinality @xmath135 .",
    "when we seek @xmath5 approximate solutions , we can afford to scale and round edge weights to small integers . to see this ,",
    "observe that the weight of the mwm is at least @xmath136 .",
    "it suffices to find a @xmath137-mwm @xmath131 with respect to the weight function @xmath138 where @xmath139 .",
    "note that @xmath140 for any @xmath141 .",
    "it follows from the definitions that : @xmath142 since it is better to use an exact mwm algorithm when @xmath143 @xcite , we assume , henceforth , that @xmath144 , where @xmath145 is the maximum integer edge weight . for notational convenience",
    "we also assume that @xmath12 is a power of 2 .",
    "@xmath146{0mm}{3 mm}\\rule{0mm}{0 mm}}\\\\ \\mbox{where , by definition , } { \\hspace*{.5 cm } } &   yz(u , v ) { \\stackrel{\\rm def}{=}}y(u ) + y(v ) + \\sum_{\\substack{b\\in { \\mathcal{v}_{\\operatorname{odd}}},\\\\(u , v)\\in e(b ) } } { \\makebox[0mm][l]{$z(b)$}}\\end{aligned}\\ ] ]    despite the exponential number of primal constraints and dual @xmath147-variables , edmonds demonstrated that an optimum matching could be found in polynomial time without maintaining information ( @xmath147-values ) on more than @xmath148 elements of @xmath67 at any given time . at intermediate stages of edmonds algorithm",
    "there is a matching @xmath131 and a laminar ( nested ) subset @xmath149 , where each element of @xmath150 is identified with a _",
    "blossom_. blossoms are formed inductively as follows . if @xmath151 then the set @xmath152 is a trivial blossom .",
    "an odd length sequence @xmath153 forms a nontrivial blossom @xmath154 if the @xmath155 are blossoms and there is a sequence of edges @xmath156 where @xmath157 ( modulo @xmath158 ) and @xmath159 if and only if @xmath160 is odd , that is , @xmath161 is incident to unmatched edges @xmath162 .",
    "see figure  [ fig : blossom ] .",
    "the _ base _ of blossom @xmath163 is the base of @xmath161 ; the base of a trivial blossom is its only vertex .",
    "the set of _ blossom edges _",
    "@xmath164 are @xmath165 and those used in the formation of @xmath166 .",
    "the set @xmath167 may , of course , include many non - blossom edges . a short proof by induction shows that @xmath168 is odd and that the base of @xmath163 is the only unmatched vertex in the subgraph induced by @xmath163 .",
    "matching algorithms represent a nested set @xmath150 of _ active _ blossoms by rooted trees , where leaves represent vertices and internal nodes represent nontrivial blossoms .",
    "a _ root blossom _ is one not contained in any other blossom .",
    "the children of an internal node representing @xmath163 are ordered according to the odd cycle that formed @xmath163 , where one child is distinguished as containing the base of @xmath163 . as we will see , it is often possible to treat blossoms as if they were single vertices . let the _ contracted graph _",
    "@xmath169 be obtained by contracting all root blossoms and removing spurious edges .",
    "to _ dissolve _ a root blossom @xmath163 means to delete its node in the blossom forest and , in the contracted graph , to replace @xmath163 with individual vertices @xmath166 .",
    "lemma  [ lem : blossom ] summarizes some useful properties of the contracted graph .      1 .",
    "if @xmath131 is a matching in @xmath30 then @xmath170 is a matching in @xmath169 .",
    "every augmenting path @xmath171 relative to @xmath170 in @xmath169 extends to an augmenting path @xmath133 relative to @xmath131 in @xmath30 .",
    "( that is , @xmath133 is obtained from @xmath171 by substituting for each non - trivial blossom vertex @xmath163 in @xmath171 a path through @xmath164 .",
    "see figure  [ fig : blossom](a , b ) . )",
    "if @xmath133 is an augmenting path and @xmath172 is also an augmenting path relative to @xmath170 , then @xmath150 remains a valid set of blossoms ( possibly with different bases ) for the augmented matching @xmath173 .",
    "see figure  [ fig : blossom](a , b ) .",
    "the base @xmath174 of a blossom @xmath175 uniquely determines a maximum cardinality matching of @xmath164 , having size @xmath176 .",
    "see figure  [ fig : blossom](a , b ) .        1 .",
    "_ nonnegativity : _",
    "@xmath177 for all @xmath178 and @xmath179 for all @xmath180 .",
    "_ active blossoms : _",
    "@xmath150 contains all @xmath163 with @xmath181 and all root blossoms @xmath163 have @xmath181 .",
    "( non - root blossoms may have zero @xmath147-values.)[item : z - strict ] 3 .",
    "_ domination : _",
    "@xmath182 for all @xmath18.[item : yz - lb - strict ] 4 .   _",
    "tightness : _",
    "@xmath183 when @xmath184 or @xmath185 for some @xmath175.[item : yz - ub - strict ]    if the @xmath186-values of free vertices become zero , it follows from domination and tightness that @xmath131 is a maximum weight matching , as the following short proof attests . here",
    "@xmath187 is any maximum weight matching .",
    "each execution of _",
    "search_@xmath189 clearly takes linear time , except for the computation of the distance function @xmath190 .",
    "we use dijkstra s algorithm  @xcite , implementing the priority queue as an array of buckets  @xcite .",
    "since @xmath191 is an integer and we are only interested in distances at most @xmath192 ( see the pseudocode of _ search _ ) , a @xmath193-length array suffices .",
    "lemma  [ chain ] implies that @xmath194 , which gives a total running time of @xmath195 .",
    "[ chain ] augmenting along @xmath133 then @xmath196 does not decrease the weight of the matching , that is , @xmath197 .",
    "furthermore , @xmath198 , where @xmath199 is the sum of dual adjustments performed by _",
    "search_@xmath189 .",
    "call @xmath200 and @xmath201 the matchings after augmenting along @xmath133 and then @xmath196 and let @xmath202 be the weight function @xmath203 .",
    "( notice that @xmath202 differs from @xmath204 on the matched edges . ) for a quantity @xmath205 denote its value before _",
    "search_@xmath206 and _ search_@xmath207 by @xmath208 and after both searches by @xmath209 .",
    "after the two searches , we must have : @xmath210[l]{$y_{new}(u ) + y_{new}(v ) + w_i(m_1 \\cap q ) + \\tilde{w}_{new}(m_1\\cap q)$ } } & \\mbox{defn .",
    "of $ \\tilde{w}_{new}$ } \\nonumber\\end{aligned}\\ ] ]    line ( [ ln : chain ] ) follows since , aside from @xmath174 and @xmath211 , @xmath212 and @xmath213 differ only on vertices with zero @xmath186-values .",
    "( these are the other endpoints of @xmath214 and @xmath215 when @xmath216 . ) therefore ,              we apply lemma  [ chainanti ] with @xmath224 , where @xmath225 .",
    "it follows that in linear time we can either obtain an anti - chain @xmath226 of size at least @xmath227 and reduce @xmath222 by @xmath228 , or obtain a chain @xmath226 such that @xmath229 and reduce @xmath222 by @xmath230 . in either case we can reduce @xmath222 by @xmath228 .",
    "the number of rounds is at most @xmath231 , where @xmath232 and @xmath233 for @xmath234 . a proof by induction shows that @xmath235 , which is at most @xmath236 since @xmath237 and @xmath238 for @xmath184 .",
    "like a single scale of phase ii ,",
    "phase iii alternately executes augmentation and dual adjustment steps .",
    "certain complications arise since the goal of phase iii is to eliminate all non - tight @xmath131-edges whereas the goal of phase ii was to eliminate edges in @xmath240 $ ] . in order to understand the ramifications of this slight shift , we should review the interplay between augmentation and dual adjustment in phase ii .",
    "note that phase ii augmentation steps improved the weight of @xmath131 , but this was an incidental benefit .",
    "real _ purpose of augmentation was to eliminate any augmentations in @xmath245 $ ] ( thereby making @xmath246 $ ] acyclic ) , which then let us reduce @xmath222 by @xmath247 with a chain / antichain dual adjustment .",
    "the efficiency of the augmentation step stemmed from the fact that matched and unmatched edges had different eligibility criteria .",
    "thus , augmenting along a maximal set of augmentations in @xmath245 $ ] destroyed all augmentations in @xmath245 $ ] , that is , tight @xmath131-edges could and should be ignored .    in phase iii",
    "we can not afford to exclude tight @xmath131-edges from the eligibility graph .",
    "this raises two concerns .",
    "first , augmenting along a maximal set of augmenting paths / cycles in @xmath248 $ ] does _ not _ destroy all augmentations in @xmath248 $ ] .",
    "( tight @xmath131-edges remain eligible after augmentation and may therefore be contained in another augmentation . )",
    "second , @xmath248 $ ] may contain cycles of tight edges , that is , augmentations that do not improve the weight of @xmath131 , so eliminating all _ weight_-augmenting paths / cycles does not guarantee that @xmath249 $ ] is acyclic .",
    "these concerns motivate us to redefine _",
    "augmentation_. in phase iii an eligible augmentation is either an alternating cycle or alternating path whose endpoints have zero @xmath186-values , that , in addition , is contained in @xmath248 $ ] but not @xmath250 $ ] .",
    "that is , it can not consist solely of tight edges .      in a phase iii augmentation step",
    "we repeatedly augment along eligible augmentations in @xmath248 $ ] until no such eligible augmentation exists . lemma  [ lasttrim ] lets us upper bound the aggregate time for all phase iii augmentation steps .",
    "to find an augmentation we begin by computing the strongly connected components of @xmath249 $ ] in linear time .",
    "if the endpoints of an @xmath252 $ ] are in the same strongly connected component then that edge is contained in an augmenting cycle .",
    "if there are no augmenting cycles , use the linear time algorithm described in lemma [ uvadjust ] to determine whether @xmath211 is dual adjustable for all @xmath253 .",
    "if _ both _ endpoints of some @xmath254 $ ] are _ not _ dual adjustable , then there must be an augmenting path containing @xmath141 .",
    "let @xmath133 be an augmenting path or cycle .",
    "we must have @xmath255 , since the sums differ only on vertices with zero @xmath186-values .",
    "thus @xmath256 , where the first inequality follows from the fact that @xmath257 contains a non - tight edge and the last equality from the tightness of unmatched edges . since all weights are integers , the weight of the matching is increased by at least one .",
    "recall that @xmath258 . by lemma [ firstlemma ]",
    ", we have @xmath259 at the end of phase ii , where @xmath187 is the mwm . as in phase",
    "ii , phase iii dual adjustments will not reduce the weight of @xmath131 .",
    "( see lemma  [ chain ] . )",
    "since each augmentation increases the weight of @xmath131 there can be at most @xmath113 augmentations in phase iii .",
    "since the goal of phase iii is to eliminate edges in @xmath262 $ ] ( as opposed to @xmath240 $ ] ) we must redefine the _ badness _ of an edge accordingly . let @xmath263 $ ] be the bad edges and let @xmath264 measure badness , where @xmath265 if @xmath266 and zero if @xmath267 .",
    "we define @xmath268 to be a chain or antichain exactly as in phase ii .",
    "the difference is that @xmath249 $ ] is not necessarily acyclic so _ finding _ a chain or antichain requires one extra step .",
    "[ chainanti - phaseiii ] for any @xmath269 , there exists a @xmath268 such that @xmath226 is a chain with @xmath270 or @xmath226 is an antichain with @xmath271 .",
    "moreover , @xmath226 can be found in linear time .",
    "let @xmath272 be the graph obtained from @xmath249 $ ] by contracting all strongly connected components in @xmath273 $ ] .",
    "since @xmath248 $ ] contains no eligible augmenting cycles after a phase iii augmentation step , all @xmath163-edges straddle different strongly connected components and therefore remain in @xmath272 . by definition @xmath272",
    "is acyclic .",
    "the argument from lemma  [ chainanti ] shows that @xmath272 contains a chain @xmath226 with @xmath274 or an antichain with @xmath275 , and that such a @xmath226 can be found in linear time .",
    "is @xmath276 rather than @xmath277 since the range of @xmath278 is @xmath279 rather than @xmath280 . ]",
    "we can apply the chain and antichain elimination procedures from phase ii without compromising correctness since lemmas  [ uvadjust ] , [ dual_adjust_anti ] , [ chain ] , and [ rounds ] remain valid if we substitute @xmath248 $ ] for @xmath245 $ ] .",
    "let @xmath281 , where @xmath282 is the current total badness . lemmas  [ uvadjust ] and [ chainanti - phaseiii ] imply that we can reduce @xmath222 by @xmath283 in the chain case or @xmath284 in the antichain case .",
    "the number of augmentation and dual adjustment steps in phase iii is then @xmath231 where @xmath285 and @xmath232 . by induction",
    "@xmath286 , which is at most @xmath287 since @xmath288 .",
    "thus , the total time spent on dual adjustment in phase iii is still @xmath79 .",
    "recall from section  [ intro ] that the maximum weight perfect matching problem ( mwpm ) is reducible to mwm .",
    "one simply adds @xmath289 to the weight of every edge ; a mwm in the new graph is necessarily a mwpm in the original .",
    "thus , our mwm algorithm solves the mwpm problem in @xmath10 time , where the number of scales is @xmath290 .",
    "however , we can circumvent this roundabout reduction and solve mwpm directly , in @xmath112 scales , that is , a factor 2 improvement for small @xmath291 .",
    "we substitute property  [ invariant - mwpm ] for property  [ invariant ] .      1 .",
    "_ granularity : _",
    "@xmath54 is a multiple of @xmath295 for all @xmath75 .",
    "domination : _",
    "@xmath296 for all @xmath297 .",
    "3 .   _ near tightness : _ for any @xmath184 , @xmath298 throughout scale @xmath160 and @xmath299 at the end of scale @xmath160 .    in phase",
    "i we find any perfect matching @xmath131 in @xmath79 time  @xcite and initialize @xmath186-values to satisfy property  [ invariant - mwpm ] .",
    "@xmath300 since @xmath301 for @xmath184 , property  [ invariant - mwpm ] lets us end scale 0 .      1 .   to begin scale @xmath160 we simply increment @xmath54 by @xmath295 for each left vertex @xmath174 .",
    "there is no need for an initial augmentation / dual adjustment ( as in section  [ sect : phaseii ] ) since there are no free vertices .",
    "as there are no free vertices , an _ augmentation _ is always an augmenting cycle . in the phase",
    "ii and phase iii augmentation steps we use only _ cycle - search _ , not _",
    "path - search_. 3 .",
    "we do not prohibit negative @xmath186-values .",
    "thus , in the antichain case of dual adjustment , both endpoints of a @xmath226-edge are dual - adjustable and we can reduce @xmath222 by @xmath304 rather than just @xmath305 .",
    "4 .   in the chain case of dual adjustment , setting @xmath306 temporarily frees @xmath133 s endpoints , say @xmath174 and @xmath211 . we execute _",
    "search_@xmath206 but force @xmath307 , that is _ search _ returns a @xmath174-to-@xmath211 path @xmath214 .",
    "setting @xmath308 restores the perfection of @xmath131 .",
    "there is no need for _ search_@xmath206 to calculate @xmath309-values .",
    "these were introduced to maintain property  [ invariant]([granularity ] ) , namely that @xmath186-values are non - negative .",
    "we change the parameter that determines whether we apply a chain or antichain dual adjustment .",
    "choose @xmath310 , where @xmath225 .",
    "either we can obtain an anti - chain @xmath226 of size at least @xmath311 and decrease @xmath222 by @xmath311 , or we can obtain a chain @xmath226 such that @xmath312 and decrease @xmath313 by @xmath230 . thus , the number of rounds is at most @xmath314 . in a phase",
    "ii scale @xmath315 , so @xmath316 augmentation / dual adjustment steps are needed . in phase iii @xmath317",
    "so @xmath287 steps are needed .",
    "note that since @xmath318 , at the end of phase ii we have @xmath319 , by lemma  [ firstlemma ] .",
    "thus , the matching can be augmented at most @xmath113 times in phase iii and the total time spent in augmentation steps is @xmath79 .",
    "the main difference between our mwm and mwpm algorithms is in phase i. in the mwm algorithm we can afford to use a smaller value for @xmath320 since phase i ends when free vertices have zero @xmath186-values , whereas phase i of the mwpm algorithm ends only when we have a perfect matching ."
  ],
  "abstract_text": [
    "<S> the _ maximum cardinality _ and _ maximum weight matching _ problems can be solved in time @xmath0 , a bound that has resisted improvement despite decades of research . </S>",
    "<S> ( here @xmath1 and @xmath2 are the number of edges and vertices . ) in this article we demonstrate that this `` @xmath3 barrier '' is extremely fragile , in the following sense . for any @xmath4 </S>",
    "<S> , we give an algorithm that computes a @xmath5-approximate maximum weight matching in @xmath6 time , that is , optimal _ linear time _ for any fixed @xmath7 . </S>",
    "<S> our algorithm is dramatically simpler than the best exact maximum weight matching algorithms on general graphs and should be appealing in all applications that can tolerate a negligible relative error .    </S>",
    "<S> our second contribution is a new _ exact _ maximum weight matching algorithm for integer - weighted bipartite graphs that runs in time @xmath8 . </S>",
    "<S> this improves on the @xmath9-time and @xmath10-time algorithms known since the mid 1980s , for @xmath11 . here </S>",
    "<S> @xmath12 is the maximum integer edge weight . </S>"
  ]
}