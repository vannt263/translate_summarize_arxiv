{
  "article_text": [
    "simulation and bisimulation relations are useful tools in the verification of finite and infinite state systems .",
    "state space minimisation modulo these relations is a valuable technique to fight the state explosion problem in model checking , since bisimulation preserves properties formulated in logics like ctl and ctl@xmath0  @xcite while simulation preserves the universal ( or safe ) fragment of these logics  @xcite .    in some situations , however , it is necessary to model quantitative aspects of a system .",
    "it is the case , for instance , in wireless networks , where we often need to assume that there is a chance of connection failure with a given rate .",
    "this requires modelling network systems with randomised behaviours ( e.g. , by pooling a connection after uncertain amount of time to minimise conflict ) .",
    "another important fact of real - world systems is that environment changes , such as unexpected power - off , are often unpredictable .",
    "therefore , we need to encode appropriate system behaviours to handle such situations , and in order to do so , it is sometimes crucial to employ probabilistic strategies to achieve the best possible outcomes  @xcite .",
    "one simple example is the rock - scissor - paper game where there is no deterministic strategy to win since the other player s move is unknown , but there is a probabilistic strategy , sometimes called _ mixed strategy _ , to win at least a third of all cases in a row , regardless of what the other player does .",
    "a probabilistic game structure ( pgs ) is a model that has probabilistic transitions , and allows the consideration of probabilistic choices of players .",
    "the simulation relation in pgss , called probabilistic alternating simulation ( pa - simulation ) , has been shown to preserve a fragment of probabilistic alternating - time temporal logic ( patl ) under _ mixed strategies _ , which is used in characterising what a group of players can enforce in such systems  @xcite . in this paper",
    "we propose a polynomial - time algorithm for computing the largest pa - simulation , which is , to the best of our knowledge , the first algorithm for computing a simulation relation in probabilistic concurrent games .",
    "a pgs combines the modelling of probabilistic transitions from probabilistic automata ( pa ) , and the user interactions from concurrent game structures ( gs ) . in pa ,",
    "the probabilistic notions of simulation preserve pctl safety formulas  @xcite . the _ alternating simulation",
    "_  @xcite in gs has been been proved to preserve a fragment of atl@xmath0 , under the semantics of _ deterministic strategies_. these simulation relations are computable in polynomial time for finite systems  @xcite .",
    "[ [ related - work . ] ] related work .",
    "+ + + + + + + + + + + + +    efficient algorithms have been proposed for computing the largest simulation ( e.g. , see  @xcite ) in finite systems , with a variety of time and space complexities .",
    "in particular , gentilini et al",
    ".  @xcite develop an efficient algorithm with an improved time complexity based on the work of henzinger  et  al .",
    "@xcite without losing the optimal space complexity .",
    "van glabbeek and ploeger  @xcite later find a flaw in  @xcite and propose a non - trivial fix .",
    "the best algorithm for simulation in terms of time complexity is  @xcite . to compute probabilistic simulation , baier et al .",
    "@xcite reduce the problem of establishing a weight function for the lifted relation to a maximal flow problem  @xcite .",
    "cattani and segala  @xcite reduce the problem of deciding strong probabilistic bisimulation to lp  @xcite problems .",
    "zhang and hermanns  @xcite develop algorithms with improved time complexity for probabilistic simulations , following  @xcite .",
    "a space efficient probabilistic simulation algorithm is proposed by zhang  @xcite using the techniques proposed in  @xcite .",
    "studies on stochastic games have actually been carried out since as early as the @xmath1s  @xcite , and a rich literature has developed in recent years ( e.g.  see  @xcite ) .",
    "one existing approach called game metrics  @xcite defines approximation - based simulation relations , with a kernel simulation characterising the logic quantitative @xmath2-calculus ( @xmath3 )  @xcite , an extension of modal @xmath2-calculus  @xcite where each state is assigned a quantitative value in @xmath4 $ ] for every formula .",
    "however , so far the best solutions in the literature on approximating the simulation as defined in the metrics for concurrent games potentially take exponential time  @xcite .",
    "although pa - simulation is strictly stronger than the kernel simulation relation of the game metrics in  @xcite , the algorithm presented in the paper has a more tractable complexity result , and we believe that it will benefit the abstraction or refinement based techniques for verifying game - based  properties .",
    "[ [ structure - of - the - paper . ] ] structure of the paper .",
    "+ + + + + + + + + + + + + + + + + + + + + + +    sect .",
    "[ sec : pgs ] defines basic notions that are used in the technical part . in sect .",
    "[ sec : gcpp ] we propose a solution of calculating largest pa - simulation in finite pgss , based on gcpp .",
    "the algorithms on pa - simulation is presented in sect .",
    "[ sec : pa - sim - alg ] .",
    "we conclude the paper in sect .",
    "[ sec : conclusion ] .",
    "probabilistic game structures are defined in terms of discrete probabilistic distributions . a _ discrete probabilistic distribution _ @xmath5 over a finite set @xmath6 is a function of type @xmath7 $ ] , where @xmath8 .",
    "we write @xmath9 for the set of all such distributions on a fixed @xmath6 . for a set @xmath10 ,",
    "define @xmath11 .",
    "given a finite index set @xmath12 , a list of distributions @xmath13 and a list of probabilities @xmath14 where , for all @xmath15 , @xmath16 $ ] and @xmath17 , @xmath18 is obviously also a distribution . for @xmath19 , @xmath20",
    "is called a _ point ( or dirac ) distribution _ satisfying @xmath21 and @xmath22 for all @xmath23 .",
    "given @xmath24 , we define @xmath25 as the set @xmath26 , which is the _ support _  of  @xmath5 .    in this paper we assume a set of two players @xmath27 ( though our results can be extended to handle a finite set of players as in the standard game structure and atl semantics  @xcite ) , and @xmath28 a finite set of propositions .",
    "[ def : pgs ] a probabilistic game structure @xmath29 is a tuple @xmath30 , where    * @xmath6 is a finite set of states , with @xmath31 the initial state ; * @xmath32 is the labelling function which assigns to each state @xmath19 a set of propositions that are true in @xmath33 ; * @xmath34 is a finite set of joint actions , where @xmath35 and @xmath36 are , respectively , the sets of actions for players @xmath37 and @xmath38 ; * @xmath39 is a transition function .    if in state @xmath33 player @xmath37 performs action @xmath40 and player @xmath38 performs action @xmath41 then @xmath42 is the distribution for the next states . during each step",
    "the players choose their next moves simultaneously .",
    "we define a _",
    "mixed action _ of player @xmath37 ( @xmath38 ) as a distribution over @xmath35 ( @xmath36 ) , and write @xmath43 ( @xmath44 ) for the set of mixed actions of player @xmath37 ( @xmath38 ) . is equivalent to @xmath45 , though we choose a different symbol because the origin of a mixed action is a simplified _ mixed strategy _ of player @xmath37 which has type @xmath46 .",
    "a mixed action only considers player @xmath37 s current step . ] in particular , @xmath47 is a _",
    "mixed action which always chooses @xmath48 .",
    "we lift the transition function @xmath49 to handle mixed actions . given @xmath50 and @xmath51 , for all @xmath52 , we have @xmath53        [ example : pgs ] assume @xmath54 .",
    "a simple pgs with the initial state @xmath31 in fig .  [ fig : simplegs ] can be defined as @xmath55 , where    * @xmath56 ; * @xmath57 and @xmath58 ; * @xmath59 ; * @xmath60 with @xmath61 and @xmath62 with @xmath63 , @xmath64 ; * @xmath65 for @xmath66 and @xmath67 ( @xmath68 and @xmath69 are _ absorbing _ states ) .",
    "simulation relations in probabilistic systems require a definition of _ lifting _",
    "@xcite , which extends the relations to the domain of distributions .",
    "is simulated by state @xmath70 if for every @xmath71 there exists @xmath72 such that @xmath73 is simulated by @xmath74 .",
    "] let @xmath6 , @xmath75 be two sets and @xmath76 be a relation , then @xmath77 is a _ lifted relation _",
    "defined by @xmath78 if there exists a weight function @xmath79 $ ] such that    * @xmath80 for all @xmath19 , * @xmath81 for all @xmath82 , * @xmath83 for all @xmath19 and @xmath82 with @xmath84 .",
    "the intuition behind the lifting is that each state in the support of one distribution may correspond to a number of states in the support of the other distribution , and vice versa .",
    "the example in fig .",
    "[ fig : lifting ] is taken from  @xcite to show how to lift one relation .",
    "we have two set of states @xmath85 and @xmath86 , and @xmath87 .",
    "we have @xmath78 , where @xmath61 and @xmath88 . to check this",
    ", we define a weight function @xmath89 by : @xmath90 , @xmath91 @xmath92 , and @xmath93 .",
    "the dotted lines indicate the allocation of weights required to relate @xmath5 to @xmath94 via @xmath95 . by lifting in this way",
    ", we are able to extend the notion of alternating simulation  @xcite to a probabilistic setting .        [ def : sim ] given a pgs @xmath30 , a",
    "_ probabilistic alternating @xmath37-simulation _ ( pa-`i`-simulation ) is a relation @xmath96 such that if  @xmath97 ,  then    * @xmath98 , * for all @xmath50 , there exists @xmath99 , such that for all @xmath100 , there exists @xmath51 , such that @xmath101 .",
    "if @xmath33 pa-`i`-simulates @xmath70 and @xmath70 pa-`i`-simulates @xmath33 , we say @xmath33 and @xmath70 are _",
    "pa-`i`-simulation equivalent_.    pa-`i`-simulation has been shown to preserve a fragment of patl which covers the ability of player ` i `  to enforce certain temporal requirements  @xcite .",
    "for example , if in state @xmath33 player ` i `  can enforce reaching some states satisfying @xmath102 within @xmath103 transition steps and with probability at least @xmath104 , written @xmath105 , then for every state @xmath70 that simulates @xmath33 with respect to ` i ` , i.e. , @xmath97 by some pa-`i`-simulation ` @xmath106 ' , we also have @xmath107 .      the general coarsest partition problem ( gcpp )",
    "provides a characterisation of ( non - probabilistic ) simulation in finite state transition systems  @xcite .",
    "informally , in this approach , states that are ( non - probabilistic ) simulation equivalent are grouped into the same block , and all such blocks form a partition over the ( finite ) state space . based on the partition ,",
    "blocks are further related by a partial order @xmath108 , so that if @xmath109 , then every state in block @xmath110 is simulated by every state in block @xmath111 .",
    "the gcpp is to find , for a given pgs , the smallest such set of blocks . in the literature",
    "such a methodology yields space efficient algorithms for computing the largest ( non - probabilistic ) simulation relation in a finite system  @xcite .",
    "similar methods have been adopted and developed to compute the largest simulation relations in the model of probabilistic automata  @xcite .",
    "we briefly review the basic notions that are required to present the gcpp problem .",
    "a _ partition _ over a set @xmath6 , is a collection @xmath112 satisfying ( 1 ) @xmath113 and ( 2 ) @xmath114 for all distinct _ blocks _ @xmath115 .",
    "given @xmath19 , write @xmath116_\\sigma$ ] for the block in partition @xmath117 that contains @xmath33 .",
    "a partition @xmath118 is _ finer _ than @xmath119 , written @xmath120 , if for all @xmath121 there exists @xmath122 such that @xmath123 .",
    "given a set @xmath6 , a _ partition pair _ over @xmath6 is @xmath124 where @xmath117 is a partition over @xmath6 and @xmath125 is a partial order . write @xmath126 for the set of partition pairs on @xmath6 . if @xmath127 and @xmath108 is a relation on @xmath117 , then @xmath128 is the relation on @xmath129 _ induced _ by @xmath108 .",
    "let @xmath130 and @xmath131 be partition orders , write @xmath132 if @xmath120 , and @xmath133 .",
    "define a relation @xmath134 as determined by a partition pair @xmath124 by @xmath135 iff @xmath116_\\sigma{\\preceq}[t]_\\sigma$ ] .",
    "let @xmath136 be a ( transition ) relation and @xmath137 a labelling function , then a relation @xmath138 is a simulation on @xmath6 if for all @xmath139 with @xmath140 , we have ( 1 ) @xmath98 and ( 2 ) @xmath141 implies @xmath142 and @xmath143 .",
    "let @xmath124 be a partition pair on @xmath6 , then it is _ stable _ with respect to @xmath144 if for all @xmath115 with @xmath109 and @xmath145 such that @xmath141 with @xmath146 , then there exists @xmath147 such that for all @xmath148 , there exists @xmath149 such that @xmath142 .",
    "the following result is essential to the gcpp approach , as we derive the largest simulation relation by computing the coarsest partition pair over a finite state space .",
    "defined on partition  pairs . ]",
    "[ prop : gcpp ]  @xcite let @xmath124 be a partition pair , then it is stable with respect to @xmath144 iff the induced relation @xmath150 is a simulation ( with respect to @xmath144 ) .    given a transition relation on a state space there exists a unique largest simulation relation .",
    "thus , solutions to gcpp provide the coarsest stable partition pairs , and they have been proved to characterise the largest simulation relations in non - probabilistic systems  @xcite .",
    "in this section we extend the gcpp framework to characterise pa - simulations in pgss . given a pgs @xmath55 , a _ partition pair _ over @xmath29 is @xmath124 where @xmath117 is a partition over @xmath6 . write @xmath151 for the set of all partition pairs over  @xmath6 .",
    "we show how to compute the coarsest partition pair and prove that it characterises the largest pa - simulation for a given player .",
    "since in probabilistic systems transitions go from states to distributions over states , we first present a probabilistic version of _ stability _ , as per  @xcite .",
    "let @xmath152 be a probabilistic ( transition ) relation .",
    "for a distribution @xmath24 and @xmath117 a partition , write @xmath153 as a distribution on @xmath117 defined by @xmath154 for all @xmath155 .",
    "let @xmath124 be a partition pair , it is _ stable _ with respect to the relation @xmath144 , if for all @xmath115 with @xmath109 and @xmath145 such that @xmath156 , then for all @xmath148 there exists @xmath157 such that @xmath158 .",
    "another obstacle in characterising pa - simulation is that the concerned player can only partially determine a transition .",
    "that is , after player ` i `  performs an action on a state , the exact future distribution on next states depends on an action from player ` ii ` .",
    "therefore , we need to ( again ) lift the stability condition for pa-`i`-simulation from distributions to sets of distributions .",
    "let @xmath159 be a partial order on a set @xmath6 , define @xmath160 , by @xmath161 if for all @xmath148 there exists @xmath145 such that @xmath162 . in the literature",
    "this definition is known as a ` smyth order '  @xcite . in a pgs , we ` curry ' the transition function by defining @xmath163 , which is the set of distributions that are possible if player ` i `  takes a mixed action @xmath50 on @xmath19 .",
    "( lifted stability ) [ def : lift - stability ] let @xmath124 be a partition pair on @xmath6 in a pgs , it is stable with respect to player @xmath37 s choice , if for all @xmath164 , @xmath115 with @xmath109 and @xmath145 , there exists @xmath165 such that @xmath166 for  all  @xmath148 .",
    "intuitively , the smyth order captures the way of _ behavioral _ simulation .",
    "that is , if @xmath167 is at least as restrictive as @xmath168 , then whatever player ` i`is able to enforce by performing @xmath169 in @xmath33 , he can also enforce it by performing @xmath170 in @xmath70 , as player ` ii `   has _ fewer _ choices in @xmath167 than in @xmath168 . at this point , for the sake of readability ,",
    "if it is clear from the context , we write @xmath171 for @xmath172 as the distribution @xmath171 mapped onto partition  @xmath117 .    for simulation relations",
    ", it is also required that the related states agree on their labelling .",
    "define @xmath173 as the _ labelling partition _",
    "satisfying for all @xmath139 , @xmath98 iff @xmath116_{\\sigma_0}=[t]_{\\sigma_0}$ ] .",
    "write @xmath174 for the set of partition pairs @xmath124 satisfying @xmath175 , where @xmath176 is the identity  relation .    [",
    "lem : stable - pa - sim ] for all @xmath177 , if @xmath124 is a stable partition pair with respect to player ` i ` s choice then @xmath150 is a pa-`i`-simulation .",
    "straightforward by definition  [ def : lift - stability ] .",
    "obviously every pa-`i`-simulation is contained in the relation induced by @xmath178 , and moreover , the above lemma asserts that every stable partition pair smaller than @xmath178 is a pa-`i`-simulation . in the following , we try to compute the coarsest partition pair by refining @xmath178 until it stabilises .",
    "the resulting stable partition pair can be proved to characterise the largest pa-`i`-simulation on the state space @xmath6  as  required .",
    "we say @xmath70 simulates @xmath33 with respect to player-`i ` s choice on a partition pair @xmath124 if for all @xmath164 , there exists @xmath165 such that @xmath179 . for better readability ,",
    "sometimes we also say @xmath70 simulates @xmath33 on @xmath124 if it is clear from the context , and write @xmath180 .",
    "note it is straightforward to show that @xmath181 is a transitive relation , by definition of @xmath182 .",
    "let @xmath132 , we say @xmath130 is stable on @xmath131 , if for all @xmath183 with @xmath184 , @xmath145 and @xmath148 , @xmath70 simulates @xmath33 on @xmath131 .",
    "[ def : rho ] define an operator @xmath185 , such that @xmath186 is the largest partition pair @xmath187 that is stable on @xmath124 .    the operator @xmath188 has the following properties .",
    "[ lem : rho - well - defined ] @xmath188 is well defined on @xmath151 .",
    "we show that given a partition pair @xmath124 on @xmath6 , @xmath186 is a unique partition pair .",
    "let @xmath155 .",
    "define @xmath189 by @xmath190 if @xmath180 .",
    "then @xmath191 is a preorder on @xmath110 , from which we define a partition pair @xmath192 where @xmath193 and @xmath194 if there exist @xmath195 and @xmath196 such that @xmath190 .",
    "define @xmath197 with @xmath198 and @xmath199 . for the definition of @xmath200 , the first part of the union @xmath201 is the relation on @xmath202 as induced from the nonreflexive part of @xmath108 , and in the second part each @xmath203 gives a new relation generated inside block @xmath110 which is stable on @xmath124 .",
    "note that each @xmath203 is acyclic , and thus a partial order on @xmath204 .",
    "this implies that @xmath200 is a partial order on @xmath202 .",
    "we show that @xmath205 is indeed the largest such partition pair .",
    "suppose there exists @xmath206 such that @xmath207 and it is stable on @xmath124 , we show that @xmath208 .",
    "* let @xmath209 and @xmath145 , then there exists @xmath210 such that @xmath211 .",
    "first we have @xmath212_\\sigma$ ] by @xmath213 . for all @xmath214 , we have @xmath180 and @xmath215 , by @xmath110 stable on @xmath124 . by definition",
    "we have @xmath216_\\sigma}t$ ] and @xmath217_\\sigma}s$ ] , and thus @xmath218",
    ". therefore , @xmath219 .",
    "this proves @xmath220 .",
    "* let @xmath221 and @xmath222 .",
    "since @xmath220 , there exist @xmath223 such that @xmath219 and @xmath224 .",
    "we need to show that @xmath225 . taking @xmath226 and @xmath227 ,",
    "we show that @xmath228 .",
    "let @xmath229 and @xmath230 , we have @xmath231 . also within @xmath232_\\sigma$ ] we have @xmath233_\\sigma}t_1 $ ] , and within @xmath234_\\sigma$ ] we have @xmath235_\\sigma}s_2 $ ] .",
    "as both @xmath236_\\sigma}$ ] and @xmath237_\\sigma}$ ] are contained in @xmath181 , we apply transitivity to get @xmath228 . therefore , @xmath225 .",
    "this shows that @xmath238 , and thus @xmath239 .",
    "the following lemma is used in the proof of lemma  [ lem : rho - monotone ] .",
    "[ lem : partition : order ] if @xmath132 and there are distributions @xmath240 satisfying @xmath241 , then @xmath242 .",
    "( sketch ) by reusing the same weight function for @xmath243 on the partition @xmath118 for @xmath244 on the coarser partition @xmath119 .",
    "[ lem : rho - monotone ] @xmath188 is monotonic on @xmath245 .",
    "let @xmath132 , @xmath246 and @xmath247 .",
    "we show that @xmath248 .",
    "we first prove that @xmath249 is stable on @xmath131 .",
    "let @xmath250 such that @xmath251 , then for all @xmath145 , @xmath148 and @xmath164 , there exists @xmath165 such that @xmath252 .",
    "then by lemma  [ lem : partition : order ] , we also have @xmath253 . by definition of @xmath188",
    ", we have that the partition pair @xmath254 is the unique largest partition pair that is stable on @xmath131 . as @xmath249 is stable on @xmath131",
    ", it must be the case that @xmath248 .",
    "lemma  [ lem : stable - pa - sim ] ensures that for all @xmath177 , @xmath150 is a pa-`i`-simulation if @xmath255 , i.e. , @xmath124 is a fixpoint of @xmath188 .",
    "however , we still need to find the largest pa-`i`-simulation .",
    "the following result indicates that if @xmath6 is finite , the coarsest stable partition pair achieved by repetitively applying @xmath188 on @xmath178 indeed yields the largest pa-`i`-simulation .- chain of a complete partial order by treating @xmath178 as @xmath256 .",
    "however , here we also need that fixpoint to represent the largest pa-`i`-simulation . ]",
    "define @xmath257 and @xmath258 for partition pairs  @xmath259 .",
    "[ thm : gcpp - max ] let @xmath260 , then @xmath150 is the largest pa-`i`-simulation on @xmath29 .",
    "( sketch ) let @xmath261 be the largest pa-`i`-simulation on @xmath29 . define a set @xmath262 .",
    "since @xmath261 is the largest pa-`i`-simulation , it can be shown that @xmath261 is reflexive , symmetric and transitive within each block @xmath263 .",
    "moreover , we define a relation @xmath264 by @xmath265 if there exists @xmath145 and @xmath148 such that @xmath266 , and it can be shown that @xmath264 is a partial order on @xmath267",
    ". then @xmath268 forms a partition pair on @xmath29 , and furthermore , it is stable , and we also have @xmath269 .",
    "we apply @xmath188 on both sides . by lemma  [ lem : rho - monotone ] ( monotonicity ) , and @xmath268 being stable , we have @xmath270 for all @xmath271 .",
    "as @xmath151 is finite , there exists @xmath272 , such that @xmath273 .",
    "therefore , @xmath274 is a stable partition pair , and @xmath275 is a pa-`i`-simulation by lemma  [ lem : stable - pa - sim ] .",
    "straightforwardly we have @xmath276 .",
    "since @xmath261 is the largest pa-`i`-simulation by assumption , we have @xmath277 , and the result directly follows .",
    "efficient algorithms for simulation in the non - probabilistic setting sometimes apply predecessor based methods  @xcite for splitting blocks and refining partitions .",
    "this method can no longer be applied for simulations in the probabilistic setting , as the transition functions now map a state to a state distribution rather than a single state , and simulation relation needs to be _ lifted _ to handle distributions .",
    "the algorithms in  @xcite follow the approaches in  @xcite by reducing the problem of deciding a weight function on lifted relations to checking the value of a maximal flow problem .",
    "this method , however , does _ not _ apply to combined transitions , where a more general solution is required .",
    "algorithms for deciding probabilistic bisimulations  @xcite reduce the problem on checking weight functions with combined choices to solutions in linear programming ( lp ) , which are known to be decidable in polynomial time  @xcite .",
    "simulation relations are characterised by partition pairs in the solutions to the gcpp .",
    "we propose the following characterisation of lifting in order to handle the partial order relation on partitions .",
    "let @xmath6 be a finite set and @xmath108 a partial order on @xmath6 .",
    "define @xmath278 , which is called the _ up - closure _ of @xmath33 .",
    "the following lemma reduces the problems of finding a weight function for two distributions on a partition pair to comparing weights of each up - closed block , and the latter problem can be easily encoded in lp when checking pa-`i`-simulation on a given partition pair between two states ( as shown in lemma  [ lem : sim - lp ] ) .",
    "[ lem : lifting - upclosure ] let @xmath6 be a set with a partial order @xmath279 and @xmath280 , then @xmath281 iff we have @xmath282 for all @xmath283 .    * for ` only if ' , suppose @xmath281 , then there exists a weight function @xmath89 to establish the lifting . for each @xmath19",
    ", we have @xmath284 .",
    "the last equality is due to @xmath285 implies @xmath286 , we can ` purge ' those states @xmath70 that are not in @xmath287 since they give zero weight . then @xmath288 . * for ` if ' , suppose @xmath289 for  all  @xmath283 , we establish a weight function for @xmath290 .",
    "we recursively show that @xmath89 is definable on each @xmath19 by traversing the states by the ( topological ) order of @xmath108 .",
    "( one may treat @xmath89 as of type @xmath291 $ ] . ) if @xmath292 , i.e. , @xmath33 is a top state , then @xmath293 , and @xmath89 is definable on @xmath33 , e.g. by letting @xmath294 otherwise , we have @xmath295 where @xmath296 denotes @xmath297 , @xmath298 and there does not exist @xmath299 such that @xmath300 .",
    "since @xmath301 for all @xmath70 satisfying @xmath296 , we write @xmath302 for @xmath303 , and we have @xmath304 . as the ` remaining weight ' is at least as large as @xmath305 , one can easily show that @xmath89 is definable on  @xmath33 .    when deciding whether @xmath33 is able to simulate @xmath70 with respect to ` i ` s choice on a certain partition pair , we need to examine potentially infinitely many mixed actions in @xmath43 .",
    "this problem can be moderated by the following observations .",
    "first we show that for @xmath33 to be simulated by @xmath70 , it is only required to check all deterministic choices of player ` i `  on @xmath33 .",
    "[ lem : simplify1 ] let @xmath124 be a partition pair , then @xmath70 simulates @xmath33 on @xmath124 if for all @xmath306 , there exists @xmath164 such that @xmath307 .    the next lemma states that for checking a smyth order @xmath179 , it suffices to focus on player ` ii ` s deterministic choices in @xmath167 , since all probabilistic choices can be represented as interpolations from deterministic  choices .",
    "[ lem : simplify2 ] @xmath308 if for all @xmath309 , there exists @xmath310 such that @xmath311 .    combining the above two lemmas , we have the following .    [",
    "lem : simplify3 ] let @xmath124 be a partition pair , then @xmath70 simulates @xmath33 with respect to player-`i ` s choice on @xmath124 if for all @xmath312 , there exists @xmath50 such that for all @xmath313 , there exists @xmath51 such that @xmath314 .    the following lemma states how to check if the action @xmath48 can be followed by a mixed action from @xmath43 .",
    "[ lem : sim - lp ] given a partition pair @xmath124 , two states @xmath139 and @xmath306 , there exists @xmath164 such that @xmath315 iff the following lp has a solution : let @xmath316 and @xmath317 @xmath318 @xmath319 @xmath320",
    "@xmath321    @xmath322 @xmath323    here @xmath324 are used to ` guess ' a mixed action from player ` i ` , as constrained in eq .",
    "[ eq : sum - alpha ] and eq .",
    "[ eq : alpha ] .",
    "to establish the smyth order @xmath182 , by  lemma  [ lem : simplify3 ] , for every player ` ii `  action @xmath325 with @xmath326 , we ` guess ' a mixed action from @xmath36 represented by @xmath327 , as constrained in eq .",
    "[ eq : sum - beta ] and eq .",
    "[ eq : beta ] .",
    "then for each block @xmath328 in @xmath117 , the established distributions need to satisfy the lifted relation @xmath329 , which is characterised by the inequalities on the up - closure of @xmath328 with respect to the order @xmath108 , by lemma  [ lem : lifting - upclosure ] .",
    "we define a predicate @xmath330 such that @xmath331 decides whether there exists a mixed action of player ` i `  from @xmath70 which simulates action @xmath306 from @xmath33 on the partition pair @xmath124 .",
    "@xmath330 establishes an lp problem from its parameters ( see lemma  [ lem : sim - lp ] ) .",
    "we further define a predicate @xmath332 which decides whether a state simulates another with respect to player  ` i ` s choice on @xmath124 for all actions in @xmath35 , i.e. , @xmath333 returns _ true _",
    "if @xmath331 returns _ true _ for  all  @xmath334 .",
    "input : a partition pair @xmath124 , a block @xmath335 output : a partition pair @xmath336 on @xmath328 ( @xmath124 , @xmath328 ) @xmath337 ; @xmath338 ; @xmath339 ; @xmath340 * while *  @xmath341 * do * @xmath342 ; @xmath343 * for  each *  _ distinct _ @xmath344",
    "* do * _ pick any _ @xmath345 _ and _ @xmath346 ( @xmath347 ) * then * @xmath348 @xmath349 @xmath350 @xmath351 ( @xmath352 ) * then * @xmath353 ( @xmath354 ) * then * @xmath355 @xmath336    algorithm  [ alg : split ] defines a function split which refines a block @xmath335 into a partition pair corresponding the maximal simulation that is stable on @xmath124 .",
    "it starts with the finest partition and the identity relation ( as the final relation is reflexive ) . for each pair of blocks in the partition",
    ", we check if they can simulate each other by picking up a state from each block .",
    "if they are simulation equivalent on @xmath124 then we merge the two blocks as well as all incoming and outgoing relation in the current partial order .",
    "if only one simulates the other we add an appropriate pair into the current ordering .",
    "this continues until  the  partition  pair  stablises .",
    "input : a probabilistic game structure @xmath55 output : a partition pair @xmath124 on @xmath6 ( @xmath29 ) @xmath356 ; @xmath357 @xmath339 ; @xmath340 * while *  @xmath358 * do * @xmath359 ; @xmath360 * for  each *  @xmath335 * do * @xmath361 @xmath362 @xmath363 @xmath364 @xmath365",
    "@xmath366 @xmath124    algorithm  [ alg : gcpp ] is based on the functionality of in algorithm  [ alg : split ] . starting from the partition @xmath178 , which is identified as @xmath367 ,",
    "the algorithm computes a sequence of partition pairs @xmath368 until it stabilises , which is detected by checking the condition @xmath369 .",
    "each time we have @xmath370 , and moreover , @xmath371 is the maximal partition pair that is stable on @xmath372 .",
    "the correctness of the algorithm is justified by theorem  [ thm : gcpp - max ] , which states that it converges to the coarsest partition pair that is contained in @xmath178 and returns a representation of the largest pa-`i`-simulation .",
    "[ [ space - complexity . ] ] space complexity .",
    "+ + + + + + + + + + + + + + + + +    for a pgs @xmath373 , it requires @xmath374 to store the state space and @xmath375 for the transition relation , since for each @xmath19 and @xmath376 it requires an array of size @xmath374 to store a distribution . recording a partition pair takes @xmath377 as the first part is needed to record for each state which equivalence class in the partition it belongs , and the second part is needed for the partial order relation @xmath108 which takes at most @xmath378 .",
    "the computation from @xmath372 to @xmath371 can be done in - place which only requires additional constant space to track if it has been modified during each iteration .",
    "another extra space - consuming part is for solving lp constrains , which we assume has space usage @xmath379 where @xmath380 is the number of linear constraints at most , and @xmath381 some polynomial .",
    "the space complexity roughly sums up to @xmath382 .",
    "( the first part @xmath383 for the pgs itself can be considered optimal , while the second part depends on the efficiency of the lp algorithm being used . )",
    "[ [ time - complexity . ] ] time complexity .",
    "+ + + + + + + + + + + + + + + +    the number of variables in the lp problem in lemma  [ lem : sim - lp ] is @xmath384 , and the number of constraints is bounded by @xmath385 . the predicate @xmath332 costs @xmath386 times lp solving .",
    "each split invokes at most @xmath387 testing of @xmath332 where @xmath328 is a block in @xmath117 .",
    "each iteration of gcpp splits all current blocks , and the total number of comparisons within each iteration of gcpp is be bounded by @xmath388 .",
    "( however it seems heuristics on the existing partition can achieve a speed close to linear in practice by caching previous  checks  @xcite . )",
    "the number of iterations is bounded by @xmath389 .",
    "this gives us time complexity which is in the worst case to solve @xmath390 many such lp problems , each of which has @xmath391 constraints .",
    "[ [ remark . ] ] remark .",
    "+ + + + + + +    by removing the interaction between players ( i.e. , the alternating part ) , our algorithm downgrades to a partition - based algorithm computing the largest _ strong _ probabilistic simulation relation in probabilistic automata , where _ combined transitions _ are needed .",
    "the algorithm of  @xcite for computing strong probabilistic simulation has time complexity of solving @xmath392 lp problems , where @xmath393 is the size of the transition relation comparable to @xmath375 .",
    "they have @xmath378 constraints for each lp instance .",
    "the improvement achieved in our algorithm is due to the use of partitions in each iteration instead of working on the whole relation , which is made possible by applying lemma  [ lem : lifting - upclosure ] .",
    "the space - efficient algorithm  @xcite for probabilistic simulation ( _ without _ combined transitions ) has the same space complexity but better time complexity than ours , which is due to the reduction to the maximal  flow  problem .",
    "we have presented a partition - based algorithm to compute the largest probabilistic alternating simulation relation in finite probabilistic game structures . to the best of our knowledge ,",
    "our work presents the first polynomial - time algorithm for computing a relation in probabilistic systems considering ( concurrently ) mixed choices from players . as aforementioned , pa - simulation",
    "is known as stronger than the simulation relation characterising quantitative @xmath2-calculus  @xcite , though it is still a conservative approximation which has a reasonable complexity to be useful in verification of game - based properties .",
    "special thank goes to timothy bourke who carefully read through the draft , with his effort greatly improving the presentation of the paper .",
    "the authors also thank wan fokkink , rob van glabbeek and lijun zhang for their helpful comments on the technical part ."
  ],
  "abstract_text": [
    "<S> in probabilistic game structures , probabilistic alternating simulation ( pa - simulation ) relations preserve formulas defined in probabilistic alternating - time temporal logic with respect to the behaviour of a subset of players . </S>",
    "<S> we propose a partition based algorithm for computing the largest pa - simulation . </S>",
    "<S> it is to our knowledge the first such algorithm that works in polynomial time . </S>",
    "<S> our solution extends the generalised coarsest partition problem ( gcpp ) to a game - based setting with mixed strategies . </S>",
    "<S> the algorithm has higher complexities than those in the literature for non - probabilistic simulation and probabilistic simulation without mixed actions , but slightly improves the existing result for computing probabilistic simulation with respect to mixed actions . </S>"
  ]
}