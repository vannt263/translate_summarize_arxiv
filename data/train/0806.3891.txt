{
  "article_text": [
    "small overlap conditions are natural combinatorial conditions on monoid and semigroup presentations , which serve to limit the complexity of derivation sequences between equivalent words .",
    "they are the natural semigroup - theoretic analogues of the _ small cancellation conditions _ extensively employed in combinatorial and geometric group theory @xcite .",
    "it has long been known that monoids with presentations satisfying the condition @xmath1 have decidable word problem @xcite ; recent research of the author @xcite has shown that the slightly stronger condition @xmath0 implies that the word problem is solvable in linear time on a 2-tape turing machine .    in this paper , we take an automatic - theoretic approach to the study of small overlap semigroups and monoids .",
    "our main result is that the word problem for any @xmath0 monoid or semigroup presentation is a deterministic rational relation ( and moreover , effectively computable as such ) .",
    "it follows from results of automata theory @xcite that the set of all words which are lexicographically minimal in their equivalence classes forms a regular language of normal forms , and that a normal form for any element can be computed in linear time .",
    "we are also able to deduce that every monoid or semigroup admitting a presentation satisfying the condition @xmath0 is rational ( in the sense of sakarovitch @xcite ) and hence also asynchronous automatic , and word hyperbolic ( in the sense of duncan and gilman @xcite ) .",
    "another consequence is that @xmath0 monoids satisfy an analogue of kleene s theorem ( see for example @xcite ) : their rational subsets coincide with their recognisable subsets .",
    "it follows also that membership is uniformly decidable for rational subsets , and hence also for finitely generated submonoids , of such monoids .",
    "in addition to this introduction , this article comprises four sections .",
    "section  [ sec_background ] briefly reviews the definitions of monoid and semigroup presentations , and of small overlap conditions .",
    "section  [ sec_prefmod ] contains some purely automata - theoretic results which will be used to establish our main results , and may be of some independent interest . in section  [ sec_smalloverlap ]",
    "we combine the results of the previous section with those of @xcite to prove our main theorem .",
    "finally , in section  [ sec_consequences ] we deduce some consequences .",
    "in this section we briefly recall the key definitions of semigroup and monoid presentations and of small overlap conditions , which will be used in the rest of this paper .",
    "let @xmath2 be a finite alphabet ( set of symbols ) .",
    "a _ word _ over @xmath2 is a finite sequence of zero or more elements from @xmath2 .",
    "the set of all words over @xmath2 is denoted @xmath3 ; under the operation of _ concatenation _ it forms a monoid , called the _ free monoid _ on @xmath2 .",
    "the length of a word @xmath4 is denoted @xmath5 .",
    "the unique _ empty word _ of length @xmath6 is denoted @xmath7 ; it forms the identity element of the monoid @xmath3 .",
    "the set @xmath8 of non - empty words forms a subsemigroup of @xmath3 , called the _ free semigroup on @xmath2 _ and denoted @xmath9 .",
    "for @xmath10 we write @xmath11 , @xmath12 and @xmath13 to denote the set of words in @xmath3 of length respectively exactly @xmath14 , less than or equal to @xmath14 , and strictly less than @xmath14 . if @xmath4 is a word , we write @xmath15 to denote the _ reverse _ of @xmath16 , that is , the word composed of the letters of @xmath16 written in reverse order .    a finite _ monoid presentation _",
    "@xmath17 consists of a finite alphabet @xmath2 ( the letters of which are called _ generators _ ) , together with a finite set @xmath18 of pairs of words ( called _ relations _ ) .",
    "we say that @xmath19 are _ one - step equivalent _ if @xmath20 and @xmath21 for some possibly empty words @xmath22 and relation @xmath23 or @xmath24 .",
    "we say that @xmath25 and @xmath26 are _ equivalent _ , and write @xmath27 or just @xmath28 , if there is a finite sequence of words beginning with @xmath25 and ending with @xmath26 , each term of which but the last is one - step equivalent to its successor .",
    "equivalence is clearly an equivalence relation ; in fact it is the least equivalence relation containing @xmath29 and compatible with the multiplication in @xmath3 .",
    "we write @xmath30 for the equivalence class of a word @xmath31 .",
    "the equivalence classes form a monoid with multiplication well - defined by @xmath32 ; this is called the _ monoid presented _ by the presentation .",
    "the _ word problem _ for a ( fixed ) monoid presentation @xmath17 is the algorithmic problem of , given as input two words @xmath19 , deciding whether @xmath27 .",
    "definitions corresponding to all of those above can also be made for semigroups ( without necessarily an identity element ) , by taking @xmath9 in place of @xmath3 ( in all places except the definition of one - step equivalence , where @xmath33 and @xmath34 must still be allowed to be empty ) .",
    "now suppose we have a fixed monoid or semigroup presentation @xmath17 .",
    "we begin by recalling some basic definitions from the theory of small overlap conditions @xcite .",
    "a _ relation word _ is a word which appears as one side of a relation in @xmath29 .",
    "piece _ is a word which appears more than once as a factor in the relations , either as a factor of two different relation words , or as a factor of the same relation word in two different ( but possibly overlapping ) places .",
    "let @xmath35 be a positive integer .",
    "the presentation is said to _",
    "satisfy @xmath36 _ if no relation word can be written as a product of _ strictly fewer than @xmath37 _ pieces .",
    "thus @xmath38 says that no relation word is empty ( which in the semigroup case is a trivial requirement ) ; @xmath39 says that no relation word is a factor of another .",
    "retaining our fixed presentation , we now recall some more specialist terminology from @xcite . for each relation word @xmath29 ,",
    "let @xmath40 and @xmath41 denote respectively the longest prefix of @xmath29 which is a piece , and the longest suffix of @xmath29 which is a piece .",
    "if the presentation satisfies @xmath1 then @xmath29 can not be written as a product of two pieces , so this prefix and suffix can not meet ; thus , @xmath29 admits a factorisation @xmath42 for some non - empty word @xmath43 . if moreover the presentation satisfies the stronger condition",
    "@xmath0 then @xmath29 can not be written as a product of three pieces , so @xmath43 is not a piece .",
    "the converse also holds : a @xmath1 presentation such that no @xmath43 is a piece is a @xmath0 presentation .",
    "we call @xmath40 , @xmath43 and @xmath41 the _ maximal piece prefix _ , the _ middle word _ and the _ maximal piece suffix _ respectively of @xmath29 .    if @xmath29 is a relation word we write @xmath44 for the ( necessarily unique , as a result of the small overlap condition ) word such that @xmath45 or @xmath46 is a relation in the presentation .",
    "we write @xmath47 , @xmath48 and @xmath49 for @xmath50 , @xmath51 and @xmath52 respectively .",
    "( this is an abuse of notation since , for example , the word @xmath40 may be a maximal piece prefix of two distinct relation words , but we shall be careful to ensure that the meaning is clear from the context . )    a _ relation prefix _ of a word is a prefix which admits a ( necessarily unique , as a consequence of the small overlap condition ) factorisation of the form @xmath53 where @xmath54 and @xmath55 are the maximal piece prefix and middle word respectively of some relation word @xmath56 . an _",
    "overlap prefix ( of length @xmath57 ) _ of a word @xmath25 is a relation prefix which admits an ( again necessarily unique ) factorisation of the form @xmath58 where    * @xmath59 ; * @xmath58 has no factor of the form @xmath60 , where @xmath61 and @xmath62 are the maximal piece prefix and middle word respectively of some relation word , beginning before the end of the prefix @xmath34 ; * for each @xmath63 , @xmath64 is a relation word with @xmath65 and @xmath66 the maximal piece prefix and suffix respectively ; and * for each @xmath67 , @xmath68 is a proper , non - empty prefix of @xmath69 .",
    "let @xmath31 be a word and let @xmath70 be a piece .",
    "we say that @xmath25 is _ @xmath70-active _ if @xmath71 has a relation prefix @xmath72 with @xmath73 , and _",
    "@xmath70-inactive _ otherwise .",
    "we now recall some basic definitions from automata theory .",
    "if @xmath2 is an alphabet , we denote by @xmath74 the alphabet @xmath75 where @xmath76 is a new symbol not in @xmath2 .",
    "the symbol @xmath76 will be used as an _ end - marker _ for certain types of automata . if @xmath77 is a relation , we denote by @xmath78 the set @xmath79    a _ rational transducer _ from an alphabet @xmath80 to an alphabet @xmath81 is a finite directed graph with edges labelled by elements of @xmath82 , together with a distinguished initial vertex and a set of distinguished terminal vertices .",
    "the labelling of edges extends to a labelling of paths via the multiplication in the direct product monoid @xmath82 .",
    "a pair @xmath83 is _ accepted _ by the transducer if it labels some path from the initial vertex to a terminal vertex .",
    "relation accepted _ by the transducer is the set of all pairs accepted .",
    "a relation accepted by some transducer is called a _ rational relation _ or _ rational transduction_. transductions , which were introduced in @xcite , are of fundamental importance in the theory of formal languages and automata ; a detailed study can be found in @xcite .",
    "a _ deterministic 2-tape finite automaton _ consists of two alphabets @xmath80 and @xmath81 , a finite state set @xmath84 partitioned into two disjoint subsets @xmath85 and @xmath86 with a distinguished initial state and set of distinguished terminal states , and for each @xmath87 a partial function @xmath88 let @xmath89 be the smallest binary relation on @xmath90 such that    * @xmath91 for all @xmath92 , @xmath93 , @xmath94 , @xmath95 , @xmath96 such that @xmath97 is defined and equal to @xmath98 ; and * @xmath99 for all @xmath100 , @xmath93 , @xmath94 , @xmath101 , @xmath96 such that @xmath102 is defined and equal to @xmath98 ;    and let @xmath103 be the reflexive , transitive closure of @xmath89 .",
    "we say that a pair @xmath104 is _ accepted _ by the automaton if there exists an initial state @xmath105 and a terminal state @xmath106 such that that @xmath107 . once again , the _ relation accepted _ by the automaton is the set of all pairs accepted .",
    "a relation is called a _ deterministic rational relation _ if it is accepted by a deterministic 2-tape automaton , and a _ reverse deterministic rational relation _ if the relation @xmath108 is accepted by a deterministic 2-tape automaton . in general , a deterministic rational relation need not be reverse deterministic rational ( * ? ? ?",
    "* theorem  1 ) .",
    "every [ reverse ] deterministic rational relation is accepted by a transducer @xcite and so is indeed a rational relation .",
    "the following elementary proposition gives a partial converse to this statement ; the general idea is well known but the precise formulation we need does not seem to have appeared in the literature , so for completeness we give an outline proof .",
    "[ prop_dettransducer_condition ] let @xmath77 be a relation and suppose @xmath78 is accepted by a transducer with the property that for every state @xmath98 , one of the following ( mutually exclusive ) conditions holds :    * @xmath98 has an edge leaving it , and every edge leaving @xmath98 has the form @xmath109 for some @xmath110 , and there is at most one such edge for each @xmath110 ; * @xmath98 has an edge leaving it , and every edge leaving @xmath98 has the form @xmath111 for some @xmath112 , and there is at most one such edge for each @xmath112 ; * there are no edges leaving @xmath98 ; * there is exactly one edge leaving @xmath98 , and that edge has label @xmath113 ;    then @xmath29 is accepted by a deterministic 2-tape automaton .",
    "let @xmath114 be the transducer accepting @xmath78 with the given property , and let @xmath84 be the state set of @xmath114 .",
    "notice that for each state @xmath98 , there is at most one state , which we call @xmath115 , with the property that there is a path from @xmath98 to @xmath115 labelled @xmath113 and @xmath115 satisfies condition ( i ) or ( ii ) in the statement of the proposition .",
    "since ( i ) and ( ii ) are mutually exclusive , we may choose a partition @xmath116 of @xmath84 into disjoint subsets such that for every @xmath96 with @xmath115 defined we have that @xmath115 satisfies condition ( i ) if and only if @xmath117 , and similarly @xmath115 satisfies condition ( ii ) if and only if @xmath118 .",
    "( states @xmath98 for which @xmath115 is not defined may be assigned arbitrarily to either @xmath85 or @xmath86 ) .",
    "we now define a new deterministic 2-tape automaton @xmath119 as follows .",
    "the two tape alphabets of @xmath119 are @xmath80 and @xmath81 .",
    "the state set of @xmath119 is the state set @xmath84 of @xmath114 partitioned into the subsets @xmath85 and @xmath86 constructed above .",
    "the initial state of @xmath119 is the initial state of @xmath114 .",
    "the terminal states of @xmath119 consist of all states @xmath120 such that @xmath114 has a path from @xmath70 to a terminal state with label @xmath113 . for each @xmath110 , @xmath95 and @xmath96",
    "we set @xmath121 if and only if @xmath122 is defined and @xmath114 has an edge from @xmath122 to @xmath98 with label @xmath109 .",
    "similarly , for each @xmath112 , @xmath101 and @xmath96 we set @xmath123 if and only if @xmath122 is defined and @xmath114 has an edge from @xmath122 to @xmath98 with label @xmath111 .",
    "it follows directly from the criteria on the automata that each @xmath124 is a well - defined partial function from @xmath125 to @xmath84 .",
    "it is now a routine matter to verify that the deterministic 2-tape automaton @xmath119 accepts a pair @xmath126 if and only if @xmath114 accepts @xmath127 .",
    "in this section , we study a type of automaton called a _ 2-tape prefix - rewriting automaton_. we show that any relation accepted by a [ deterministic ] 2-tape prefix - rewriting automaton with a certain property called _ bounded expansion _ is a [ deterministic ] rational relation . in section  [ sec_smalloverlap ]",
    "we shall apply this result to show that the word problem for a @xmath0 monoid presentation is a deterministic rational relation .",
    "let @xmath128 and @xmath80 and @xmath81 be finite alphabets .",
    "@xmath14-prefix - rewriting automaton from @xmath80 to @xmath81 _ is a finite directed graph with edges labelled by elements of @xmath129 together with a distinguished initial vertex and a set of distinguished terminal vertices .",
    "given such an automaton with vertex set @xmath84 , we define a binary relation @xmath130 on @xmath90 by @xmath131 if and only if there exist words @xmath132 , @xmath133 , @xmath134 , @xmath135 , @xmath136 and @xmath137 in the appropriate alphabets such that @xmath138 and @xmath139 labels an edge from @xmath106 to @xmath140 . if this holds we say that _ the edge @xmath141 is applicable in the configuration @xmath142_. we call the automaton _ deterministic _ if in each configuration @xmath143 there is at most one edge applicable",
    ".    let @xmath144 denote the reflexive , transitive closure of the relation @xmath130 .",
    "we say that a pair @xmath83 is _ accepted _ by the automaton if there exists a terminal state @xmath106 such that @xmath145 where @xmath105 is the initial state . as usual , the _ relation accepted _ by the automaton is the set of all pairs in @xmath82 which are accepted by the automaton .    intuitively , a 2-tape prefix - rewriting automaton is very similar to a 2-pushdown automaton ; the only essential difference is that we allow both stacks to be initialised with non - empty words , and view the automaton as accepting pairs of words and defining a relation instead of a language .",
    "as one might expect , such automata are extremely powerful , being easily seen to accept in particular any relation of the form @xmath146 where @xmath147 is a recursively enumerable language .",
    "however , we shall be interested in a more restricted class of such automata .",
    "we say that a prefix - rewriting automaton has _ bounded expansion _ if there exists a constant @xmath148 such that whenever @xmath149 we have @xmath150 and @xmath151 .",
    "we call such a value of @xmath34 an _ expansion bound _ for the automaton .    note that the bounded expansion condition places a requirement on the contents of each store independently .",
    "this contrasts with the _ shrinking _ and _ length - reducing _",
    "conditions on 2-pushdown automata , used to describe growing context - sensitive and church - rosser languages @xcite , where a restriction is applied to the total size of the 2 stores considered together .",
    "it transpires that our condition is a very strong one , in that a relation accepted by a prefix - rewriting automaton with bounded expansion is necessarily rational .",
    "[ thm_bpm_imp_rational ] any relation accepted by a [ deterministic ] 2-tape prefix - rewriting automaton with bounded expansion is a [ deterministic ] rational transduction .",
    "moreover , given a [ deterministic ] 2-tape prefix - rewriting automaton and an expansion bound for it , one can effectively construct a [ deterministic ] transducer recognising the same relation .",
    "let @xmath114 be a @xmath152-tape @xmath14-prefix - rewriting automaton with bounded expansion accepting a relation @xmath77 , and let @xmath148 be an expansion bound for @xmath114 .",
    "we construct from @xmath114 a finite transducer @xmath119 which simulates @xmath114 and so accepts @xmath78 .",
    "intuitively , the new transducer will read @xmath25 and @xmath26 , buffering at least the first @xmath14 characters of each in the finite state control .",
    "prefix - modification can thus be simulated by modifying only the contents of the finite state control .",
    "since a prefix - rewriting automaton can replace a prefix with a longer one , it may be necessary to store more than @xmath14 characters of each word in the finite state control , but the expansion bound serves to ensure that a buffer of some fixed size ( namely @xmath153 ) will always suffice .",
    "formally , for @xmath87 we let @xmath154 and let @xmath155 be the set of all words @xmath156 such that either @xmath157 or the final letter of @xmath158 is @xmath76 .",
    "( intuitively , @xmath159 will be the set of all possible states for the buffer on tape @xmath160 , while @xmath155 will be the set of `` adequately populated '' buffer states in which it is not immediately necessary to read any more of the input word . )",
    "we construct a transducer @xmath119 as follows .",
    "the state set of @xmath119 is @xmath161 where @xmath84 is the state set of @xmath114 .",
    "the initial state is @xmath162 where @xmath105 is the initial state of @xmath114 .",
    "the terminal states are those of the form @xmath163 with @xmath98 a terminal state of @xmath114 .",
    "the edges are as follows :    * for every @xmath164 , @xmath165 with @xmath166 , every @xmath110 such that @xmath167 and every state @xmath98 , there is an edge from @xmath168 to @xmath169 with label @xmath109 ; * for every @xmath164 , @xmath165 with @xmath170 but @xmath171 , every @xmath112 such that @xmath172 and every state @xmath98 , there is an edge from @xmath168 to @xmath173 with label @xmath111 ; * for each edge in @xmath114 from @xmath70 to @xmath98 with label @xmath174 and each @xmath175 such that @xmath176 and @xmath177 , there is an edge from @xmath178 to @xmath179 with label @xmath113 provided @xmath180 and @xmath181 .",
    "edges of types ( 1 ) and ( 2 ) serve simply to read the input words into the buffers until each contains sufficient data ( at least @xmath14 letters or the entire of the input if this is less ) , while edges of type ( 3 ) simulate the transitions of the prefix - rewriting automaton @xmath114 by operating only on the buffers .",
    "notice that once the transducer reaches a state in @xmath182 ( that is , one where the first buffer content contains the symbol @xmath76 ) , it will always remain in such a state , and will never again read from the first input word .",
    "similarly , once it reaches a state in @xmath183 it will always remain in such a state and will never again read from the second input word .",
    "noting also that all the terminal states lie in both of these sets , it follows that all pairs accepted by the transducer lie in @xmath184 .",
    "we say that a configuration @xmath185 has expansion bound @xmath186 if whenever @xmath187 we have @xmath188 and @xmath189 .",
    "note that the expansion bound condition on the automaton means that @xmath190 is an expansion bound for every configuration",
    ". we shall need the following lemma .",
    "[ lemma_prefmodimptransducer ] suppose @xmath191 in the prefix - rewriting automaton @xmath114 .",
    "suppose further than @xmath192 has expansion bound @xmath193 and that @xmath194 , @xmath195 where @xmath196 and @xmath197 .",
    "then there exist factorisations @xmath198 and @xmath199 and an expansion bound @xmath200 for @xmath201 such that @xmath202 , @xmath203 and the transducer @xmath119 has a path from @xmath204 to @xmath205 with label @xmath206 where @xmath207 and @xmath208 .",
    "we use induction on the number of steps in the transition sequence from from @xmath192 to @xmath201 . certainly if @xmath209 it suffices to take @xmath210 , @xmath211 , @xmath212 , @xmath213 , @xmath214 , @xmath215 and @xmath216 .",
    "next we consider one - step case , that is , the case in which @xmath217 . let @xmath218 be the shortest prefix of @xmath219 such that @xmath220 ; similarly , let @xmath221 be the shortest prefix of @xmath222 such that @xmath223 .",
    "it follows easily from the definition that our transducer @xmath119 has a path from @xmath204 to @xmath224 with label @xmath206 .",
    "now since @xmath225 , by definition there exist words @xmath132 , @xmath133 , @xmath134 , @xmath135 , @xmath136 and @xmath137 such that @xmath226 , @xmath227 , @xmath228 , @xmath229 and @xmath139 labels an edge from @xmath106 to @xmath140 .",
    "since @xmath230 we have that @xmath132 and @xmath134 are prefixes of @xmath231 and @xmath232 respectively , say @xmath233 and @xmath234 .",
    "but now by the definition of our transducer , there is an edge from @xmath235 to @xmath236 with label @xmath113 .",
    "thus , setting @xmath237 and @xmath238 and defining @xmath239 and @xmath240 accordingly , we obtain a path from @xmath204 to @xmath205 with label @xmath241 .",
    "now we have @xmath242 so cancelling on the left we obtain @xmath243 .",
    "but now @xmath244 so cancelling again yields @xmath207 as claimed .",
    "an entirely similar argument shows that @xmath208 .",
    "next , notice that we have @xmath245 and similarly @xmath246 .",
    "set @xmath247 and @xmath248 .",
    "clearly since any state derivable from @xmath201 is also derivable from @xmath192 , it is readily verified that @xmath200 is an expansion bound for @xmath201 .",
    "but now we have @xmath249 and similarly @xmath250 as required to complete the proof of the lemma in the one - step case .    the inductive argument for the general case",
    "is now straightforward .",
    "now if @xmath126 is accepted by the prefix - rewriting automaton then by definition we have @xmath251 where @xmath105 is the initial state and @xmath252 is some terminal state . since the automaton has expansion bound @xmath34 , the state @xmath253 has expansion bound @xmath190 .",
    "so taking @xmath254 , @xmath255 , @xmath256 , @xmath257 @xmath258 , @xmath259 , @xmath260 and @xmath261 and applying lemma  [ lemma_prefmodimptransducer ] , our transducer has a path from @xmath162 to @xmath262 with label @xmath241 where @xmath263 , @xmath264 and @xmath265 .",
    "now either @xmath266 and @xmath267 , or @xmath268 and @xmath269 . in the latter case",
    "we have @xmath270 . in the former case we have @xmath271 and",
    "there is clearly an edge from @xmath262 to @xmath272 labelled @xmath273 , so in either case there is a path from @xmath162 to @xmath274 with label @xmath275 . a similar argument deals with the case that @xmath276 , showing that in all cases there is a path from the start state @xmath162 to the terminal state @xmath277 with label @xmath278 .",
    "thus , the transducer @xmath119 accepts @xmath278 as required .",
    "conversely , suppose @xmath127 is accepted by our transducer",
    ". then there must be a path @xmath279 from @xmath162 to @xmath277 for some initial state @xmath105 and terminal state @xmath252 .",
    "now clearly @xmath279 admits a unique decomposition of the form @xmath280 where each @xmath281 is a single edge of type ( 3 ) and each @xmath282 is a ( possibly empty ) path consisting entirely of edges of types ( 1 ) and ( 2 ) .",
    "clearly each @xmath281 has label @xmath113 .",
    "suppose each @xmath282 has label @xmath283 ; then clearly @xmath284 and @xmath285 .",
    "suppose that for @xmath286 , after traversing the initial segment of the path @xmath279 up to and including @xmath282 , the automaton is in configuration @xmath287 .",
    "notice that , since the paths @xmath288 do not change the state component , @xmath105 is consistent with its use above , and in particular is an initial state in the prefix - rewriting automaton @xmath114 .",
    "similarly , @xmath289 is a terminal state of @xmath114 . now for @xmath286 define @xmath290 clearly we have that @xmath291 and @xmath292 , from which it follows that @xmath293 and @xmath294",
    ". we also have @xmath295 so that @xmath296 .",
    "now it is straightforward to see that for @xmath63 we have @xmath297 so that @xmath298 which by definition means that @xmath126 is accepted by the 2-tape prefix - rewriting automaton @xmath114 .",
    "this completes the proof that the transducer @xmath119 accepts the relation @xmath78 .",
    "it is easy to show that for any relation @xmath299 , @xmath299 is a rational relation if and only if @xmath300 is a rational relation , so this suffices to prove that @xmath29 is a rational relation .",
    "finally , suppose that the original prefix - rewriting automaton @xmath114 is deterministic .",
    "we claim that the transducer @xmath119 which we have constructed to accept @xmath78 satisfies the conditions of proposition  [ prop_dettransducer_condition ] , from which it will follow that @xmath29 is a deterministic rational relation , as required .    to this end , consider a state @xmath168 in @xmath119 .",
    "if @xmath166 then it follows immediately from the definition that all out - edges have labels of the form @xmath109 with @xmath92 and that there is exactly one such for each @xmath301 , so that condition ( i ) holds . similarly , if @xmath170 but @xmath171 then all out - edges have labels of the form @xmath111 and there is exactly one such for each @xmath302 so condition ( ii ) holds",
    ".    finally , suppose @xmath170 and @xmath303 .",
    "from the definition of @xmath119 , any edge leaving @xmath304 must have label @xmath113 .",
    "if there were more than one such edge , then each would correspond to a different possible transition in @xmath114 from the state @xmath304 ; but by the determinism assumption on @xmath114 there can only be one such transition , so this would give a contradiction .",
    "thus we deduce that there is at most one such edge , so that either condition ( iii ) or condition ( iv ) holds .",
    "this completes the proof .",
    "we emphasise that theorem  [ thm_bpm_imp_rational ] does _ not _ give a means to effectively construct a transducer for a relation @xmath29 starting only from a 2-tape prefix - rewriting automaton with bounded expansion which accept @xmath29 .",
    "the construction in the proof makes explicit use of the expansion bound for the prefix - rewriting automaton , and it is not clear that one can effectively compute an expansion bound from the automaton , even given the knowledge that such a bound exists .",
    "the aim of this section is to show that the word problem for any @xmath0 monoid must be a deterministic rational relation . throughout this section",
    ", we fix a monoid presentation @xmath17 satisfying the condition @xmath0 .",
    "in @xcite we presented an efficient recursive algorithm which can be used to solve the word problem for such a presentation .",
    "for ease of reference the algorithm is reproduced in figure  1 .",
    "@xmath305 or @xmath306 [ li_start_a ] @xmath305 and @xmath306 and @xmath307 [ li_allepsilon ] [ li_someepsilon ] [ li_end_a ] @xmath25 does not have the form @xmath308 with @xmath309 a clean overlap prefix @xmath25 and @xmath26 begin with different letters [ li_start_b ] [ li_uvdifferentstart ] @xmath310 and @xmath25 and @xmath70 begin with different letters [ li_updifferentstart ] @xmath311 with first letter deleted @xmath312 with first letter deleted @xmath310 @xmath313 with first letter deleted @xmath314 [ li_rec_nomop ] [ li_end_b ]    @xmath315 be such that @xmath316 [ li_start_c ]    @xmath70 is a prefix of neither @xmath54 nor @xmath317 [ li_pnotprefix ]    @xmath26 does not begin either with @xmath309 or with @xmath318 [ li_vstartswrong ]    @xmath319 and @xmath320 @xmath321 is @xmath322-active @xmath323 [ li_rec_case1a ] @xmath324 [ li_rec_case1b ]    @xmath316 and @xmath325 @xmath70 is a prefix of @xmath54 @xmath326 [ li_rec_case2a ] @xmath327 [ li_rec_case2b ]    @xmath319 and @xmath328 @xmath321 is @xmath322-active @xmath323 [ li_rec_case3a ] @xmath324 [ li_rec_case3b ]    @xmath316 and @xmath328 @xmath329 [ li_rec_case4 ]    @xmath319 and @xmath330 @xmath331 [ li_rec_case5 ]    @xmath316 and @xmath330 @xmath332 be the maximal common suffix of @xmath322 and @xmath333 @xmath334 be such that @xmath335 @xmath336 be such that @xmath337 @xmath136 does not begin with @xmath334 or @xmath137 does not begin with @xmath336 ; [ li_case6no ] @xmath321 be such that @xmath338 @xmath339 be such that @xmath340 ; @xmath341 [ li_rec_case6 ] [ li_end_c ]    it takes as input a piece of the presentation @xmath342 and two words @xmath19 and outputs * yes * if @xmath28 and @xmath70 is a possible prefix of @xmath25 ( and hence also of @xmath26 ) .",
    "otherwise it outputs * no*. in particular , if @xmath307 then the algorithm outputs * yes * if @xmath28 and * no * if @xmath343 , thus solving the word problem for the presentation . see ( * ? ? ?",
    "* lemma  5 ) and ( * ? ? ?",
    "* lemma  6 ) for proofs of correctness and termination respectively .",
    "the proof strategy for our main result is to show that this algorithm can be implemented on a deterministic 2-tape prefix - rewriting automaton with bounded expansion .",
    "the results of section  [ sec_prefmod ] then allow us to conclude that the word problem is a deterministic rational relation .",
    "[ thm_main ] let @xmath17 be a finite monoid presentation satisfying the small overlap condition @xmath0 .",
    "then the relation @xmath344 is deterministic rational and reverse deterministic rational .",
    "moreover , one can , starting from the presentation , effectively compute 2-tape deterministic automata recognising this relation and its reverse .",
    "let @xmath14 be twice the maximum length of a relation word in the presentation .",
    "we construct a deterministic 2-tape @xmath14-prefix - rewriting automaton recognising the desired relation , and an expansion bound for this automaton . by theorem",
    "[ thm_bpm_imp_rational ] , this suffices to show that the given relation is deterministic rational and that a 2-tape deterministic automaton for it can be effectively constructed . since the @xmath0 condition on the presentation is entirely left - right symmetric , the claim regarding the reverse relation also follows .",
    "let @xmath345 be the set of all pieces of the presentation @xmath17 , and let @xmath346 be a new symbol not in @xmath345 . recall that @xmath7 is by definition a piece of every presentation ,",
    "so certainly @xmath347 .",
    "let @xmath348 .",
    "we define a 2-tape prefix - rewriting automaton with    * state set @xmath349 ; * initial state @xmath7 , * unique terminal state @xmath346 ;    and edges defined as follows .    *",
    "an edge from @xmath7 to @xmath346 labelled @xmath350 . * for every @xmath351 with @xmath352 and such that @xmath25 has no clean overlap prefix of the form @xmath309 , and every @xmath353 such that @xmath354 and @xmath25 and @xmath26 begin with the same letter , a transition from @xmath70 to @xmath355 labelled @xmath356 where @xmath136 , @xmath137 and @xmath355 are obtained from @xmath25 , @xmath26 and @xmath70 respectively by deleting the first letter .",
    "in addition for every @xmath357 and @xmath358 such that @xmath25 has a clean overlap prefix ( say @xmath309 ) and @xmath70 is a prefix of either @xmath54 or @xmath317 or both , the automaton may have an edge from @xmath70 to another state in @xmath345 as follows :    * if @xmath319 , @xmath359 and @xmath321 is @xmath322-active , the automaton has an edge from @xmath70 to @xmath7 labelled @xmath360 . *",
    "if @xmath319 , @xmath359 and @xmath321 is * not * @xmath322-active , the automaton has an edge from @xmath70 to @xmath7 labelled @xmath361 . *",
    "if @xmath316 , @xmath325 , @xmath25 and @xmath26 do not both have @xmath56 as a prefix , and @xmath70 is a prefix of @xmath54 , the automaton has an edge from @xmath70 to @xmath7 labelled @xmath356 .",
    "* if @xmath316 , @xmath325 , @xmath25 and @xmath26 do not both have @xmath56 as a prefix , and @xmath70 is * not * a prefix of @xmath54 , the automaton has an edge from @xmath70 to @xmath322 with label @xmath356 . *",
    "if @xmath319 , @xmath362 and @xmath321 is @xmath322-active , the automaton has an edge from @xmath70 to @xmath7 labelled @xmath360 . *",
    "if @xmath319 , @xmath362 and @xmath321 is * not * @xmath322-active , the automaton has an edge from @xmath70 to @xmath7 labelled @xmath361 .",
    "* if @xmath316 , @xmath328 and @xmath25 does not have @xmath56 as a prefix , the automaton has an edge from @xmath70 to @xmath7 labelled @xmath363 . *",
    "if @xmath319 , @xmath364 and @xmath26 does not have @xmath365 as a prefix , the automaton has an edge from @xmath70 to @xmath7 labelled @xmath366 . *",
    "if @xmath316 , @xmath330 , @xmath25 does not begin with @xmath56 , @xmath26 does not begin with @xmath365 , @xmath332 is the maximum common suffix of @xmath322 and @xmath333 , @xmath335 , @xmath337 , @xmath367 , @xmath368 , the automaton has an edge from @xmath70 to @xmath332 labelled @xmath369 .",
    "first , notice that this automaton is deterministic .",
    "indeed , all edges leaving a given vertex @xmath357 have labels of the form @xmath370 with @xmath371 .",
    "notice that no member of the set @xmath372 is a prefix of another ; it follows that no word has two distinct words in @xmath372 as prefixes , which means that the choice of prefixes @xmath25 and @xmath26 to act on is uniquely determined by the configuation in which the action is to be applied .",
    "now it can be verified by examination that the various conditions on @xmath25 , @xmath26 and @xmath70 which result in the inclusion of an edge from @xmath70 with label of the form @xmath370 are mutually exclusive , so that there is at most one such edge , and hence at most one transition applicable in any given configuration .",
    "it is now an entirely routine matter to prove by induction that for every piece @xmath342 and words @xmath19 we have @xmath373 if and only if the algorithm outputs * yes * , that is , if and only if @xmath28 and @xmath70 is a possible prefix of @xmath25 .",
    "transitions of types b , c1 , c2 , c3 , c4 , c5 , c6 , c7 , c8 and c9 correspond to the recursive calls at lines 15 , 24 , 25 , 28 , 29 , 32 , 33 , 35 , 37 , 46 respectively , while transition of type a corresponds to termination with the answer * yes * at line 3 of the algorithm . the conditions under which the algorithm terminates with the answer * no * ( at lines 4 , 7 , 9 , 19 , 21 and 43 ) all correspond to non - terminal configurations of the automaton in which no transitions are applicable .",
    "it follows from ( * ? ? ?",
    "* lemma  7 ) that the tests for clean overlap prefixes and @xmath322-activity on the buffer contents are equivalent to performing the corresponding tests on the whole of the remaining input , as demanded by the algorithm .",
    "in particular , we have @xmath374 if and only if @xmath28 , as required to show that our prefix - rewriting automaton solves the word problem .",
    "it remains only to find an expansion bound for the automaton .",
    "let @xmath34 be the length of the longest relation word in the presentation @xmath17 .",
    "suppose @xmath375 and suppose that @xmath376 and @xmath377 where @xmath378 is either a proper suffix of a relation word or the empty word .",
    "we claim that there are factorisations @xmath379 and @xmath380 where @xmath334 is a proper suffix of relation word or the empty word , @xmath381 and @xmath382 .",
    "we consider first the one - step case , that is , where @xmath383 .",
    "if the transition from @xmath384 to @xmath192 is of type a or b then the claim is clear , so suppose the transition is of type c1-c9 . then from the definitions of these transitions , we must have @xmath385 for some maximum piece prefix @xmath54 and middle word @xmath55 of a relation word @xmath56 .",
    "now @xmath309 can not be a piece , so it can not be a prefix of @xmath378 , which is a proper suffix of a relation word .",
    "thus , we must have @xmath386 and hence @xmath387 . looking again at the definitions of the transitions , we see that @xmath388 and @xmath389 either    * are ( not necessarily proper ) suffixes of @xmath136 and @xmath137 respectively ; or * have the form @xmath390 and @xmath391 where @xmath321 and @xmath339 are ( not necessarily proper ) suffixes of @xmath136 and @xmath137 respectively ; or * have the form @xmath392 and @xmath393 where @xmath321 and @xmath339 are ( not necessarily proper ) suffixes of @xmath136 and @xmath137 respectively .    in case",
    "( i ) it suffices to set @xmath394 and @xmath395 . in case ( ii ) [ respectively , case ( iii ) ] it suffices to set @xmath396 [ respectively , @xmath397 and @xmath398 , noting that @xmath322 [ respectively , @xmath333 ] must be a proper suffix of a relation word since is a maximal piece suffix of @xmath56 [ @xmath365 ] and no relation word can be a piece .",
    "it now follows easily by induction that the claim also holds when @xmath401 in particular , taking @xmath402 and @xmath403 and then writing @xmath379 as above we have @xmath404 and similarly @xmath405 , as required to show that the automaton has expansion bound @xmath34 .    as an immediate corollary",
    "we obtain a corresponding statement for semigroups .",
    "[ cor_mainsemi ] let @xmath17 be a finite semigroup presentation satisfying the small overlap condition @xmath0 .",
    "then the relation @xmath406 is deterministic rational and reverse deterministic rational .",
    "moreover , one can , starting from the presentation , effectively compute 2-tape deterministic automata recognising this relation and its reverse .",
    "since the presentation has no empty relation words , the semigroup with presentation @xmath17 arises as the subsemigroup of non - identity elements in the monoid with presentation @xmath17 .",
    "it follows that @xmath407 now it is easy to verify that a relation @xmath29 between free monoids is a deterministic rational relation only if @xmath408 is a deterministic rational relation between free semigroups , so the result follows from theorem  [ thm_main ] .",
    "in this section we consider a number of interesting consequences and corollaries of theorem  [ thm_main ] . we begin with some terminology from language theory .",
    "let @xmath2 be a finite alphabet , and choose some arbitrary total order @xmath409 on the letters of @xmath2 . recall that the corresponding _ lexicographic order _ is an extension of this order to a total order @xmath410 on the free monoid @xmath3 , defined inductively by @xmath411 for all @xmath16 , and for all @xmath412 and @xmath19 we have @xmath413 if either @xmath414 and @xmath415 , or @xmath416 and @xmath417 .",
    "lexicographic order is a total order but not ( unless @xmath418 ) a well - order , since it contains infinite descending chains such as @xmath419 hence , if @xmath29 is an equivalence relation on @xmath3 ( even a rational one ) there is no guarantee that every equivalence class of @xmath29 will contain a lexicographically minimal element . in the case",
    "that @xmath29 is _ locally finite _",
    "( that is , each equivalence class is finite ) , however , every class must clearly contain a unique lexicographically minimal element , and the set of elements which are minimal in their class forms a _ cross - section _ of the relation , that is , a language of unique representatives for the equivalence classes of the relation ; we shall call these representatives _ lexicographic normal forms_. remmers showed that if @xmath17 is a @xmath1 monoid [ semigroup ] presentation then the corresponding equivalence relation on @xmath3 [ respectively , @xmath9 ] is locally finite @xcite ; it follows that every element of a @xmath1 monoid has a lexicographic normal form .",
    "johnson @xcite showed that if @xmath29 is a deterministic rational locally finite equivalence relation then the function which maps each word to the corresponding lexicographic normal form can be computed by a deterministic transducer .",
    "thus , we obtain the following corollary to theorem  [ thm_main ] .",
    "let @xmath17 be a monoid presentation satisfying @xmath0 and suppose @xmath2 is equipped with a total order .",
    "then the relation @xmath421 is a deterministic rational function .",
    "the image of a rational function is always a regular language ( * ? ? ?",
    "* corollary  ii.4.2 ) ) and deterministic rational functions can be computed in linear time johnson ( * ? ? ?",
    "* theorem  5.1 ) so we have :    [ cor_lexmin ] let @xmath17 be a monoid presentation satisfying @xmath0 and suppose @xmath2 is equipped with a total order .",
    "then the lexicographic normal forms comprise a regular language of unique representatives for elements of the monoid .",
    "moreover , there is an algorithm which , given a word @xmath16 in @xmath3 , computes in linear time the corresponding lexicographic normal form .    a monoid @xmath114 is called _ rational _",
    "@xcite if there exists a finite generating set @xmath2 for @xmath114 and a regular cross - section @xmath422 for @xmath114 such that the normal forms in @xmath147 are computed by a transducer .",
    "every monoid admitting a @xmath0 presentation is _",
    "rational_.    recall that the _ rational subsets _ of a monoid @xmath114 are those which can be obtained from finite subsets by the operations of union , product and submonoid generation ( the `` kleene star '' operation ) .",
    "if @xmath114 is generated by a finite subset @xmath2 then the rational subsets of @xmath114 are exactly the images in @xmath114 of regular languages over @xmath2 , which means they have natural finite representations as finite automata over @xmath2 .",
    "recognisable subsets _ of @xmath114 are the homomorphic pre - images in @xmath114 of subsets of finite monoids . in the case",
    "that @xmath114 is a free monoid , the rational subsets are just the regular languages .",
    "kleene s theorem asserts that the rational subsets of a free monoid ( that is , the regular languages ) coincide with the recognisable subsets @xcite .",
    "more generally , a monoid in which the rational and recognisable subsets coincide is called a _ kleene monoid _ , or sometimes is said to _ satisfy kleene s theorem_. rational monoids were originally introduced in an attempt to obtain a concrete characterisation of kleene monoids @xcite , and indeed every rational monoid is a kleene monoid ( although it transpires that the converse does not hold ) .",
    "thus , we obtain :    let @xmath114 be a monoid or semigroup admitting a @xmath0 presentation , and @xmath423 a subset of @xmath114 . then @xmath423 is rational if and only if @xmath423 is recognisable .",
    "recall that a collection of subsets of some given base set is called a _",
    "boolean algebra _ if it contains the empty set and is closed under union , intersection and complement . as another corollary of the rationality of @xmath114",
    "we obtain the following fact about rational subsets of @xmath114 .",
    "[ cor_booleanalgebra ] let @xmath114 be a monoid admitting a @xmath0 presentation @xmath17 .",
    "then the rational subsets of @xmath114 form a boolean algebra . moreover , if rational subsets of @xmath114 are represented by automata over @xmath2 , then the operations of union , intersection and complement are effectively computable .",
    "let @xmath424 be the canonical morphism mapping @xmath3 onto @xmath114 , and let @xmath425 suppose @xmath426 are rational subsets , with say @xmath427 and @xmath428 where @xmath429 are regular languages . then using the facts that @xmath430 contains a unique representative for every element and that @xmath431 , it is readily verified that @xmath432 , @xmath433 and @xmath434 .",
    "the result now follows from the fact that regular languages in a free monoid form a boolean algebra with effectively computable operations .",
    "recall that the _ rational subset membership problem _ for a finitely generated monoid @xmath114 is the problem of deciding , given a rational subset of @xmath114 ( represented by a finite automaton over some fixed generating set for @xmath114 ) and an element of @xmath114 ( represented as a word over the same generating set ) , whether the given element belongs to the given subset .",
    "the decidability of this problem is independent of the chosen generating set ( * ? ? ?",
    "* corollary  3.4 ) .",
    "any monoid admitting a @xmath0 presentation has decidable rational subset membership problem ( and hence decidable submonoid membership problem ) .",
    "suppose @xmath114 has @xmath0 presentation @xmath17 , and let @xmath424 be once again the canonical morphism .",
    "suppose we are given a finite automaton recognising a language @xmath435 ( representing the rational subset @xmath436 ) and a @xmath4 ( representing the element @xmath437 ) .",
    "certainly we can compute from the latter a finite automaton recognising the singleton language @xmath438 .",
    "hence , by corollary  [ cor_booleanalgebra ] we can compute a finite automaton recognising a language @xmath439 such that @xmath440 . but @xmath441 if and only if @xmath442 is non - empty , so this reduces the problem to deciding emptiness of the regular language @xmath443 ; the latter is well known to be decidable .",
    "a monoid @xmath114 is called _ asynchronous automatic _ ( see , for example , @xcite )",
    "if there exists a finite generating set @xmath2 and a regular language @xmath422 such that @xmath147 contains a representative for every element of @xmath114 , and the relation @xmath444 is a rational transduction for each @xmath301 and for @xmath445 .",
    "it has been shown ( * ? ? ? * theorem  6.2 ) that rational monoids are asynchronous automatic , so we also obtain the following .",
    "every monoid admitting a @xmath0 presentation is asynchronous automatic .",
    "we have already remarked that small overlap conditions are the natural semigroup - theoretic analogue of the small cancellation conditions extensively used in combinatorial group theory ( see , for example , @xcite ) .",
    "it is well known that a group admitting a finite presentation satisfying sufficiently strong small cancellation conditions is _ word hyperbolic _ in the sense of gromov @xcite .",
    "the usual geometric definition of a word hyperbolic group has no obvious counterpart for more general monoids or semigroups ; however , gilman @xcite has given a language - theoretic characterisation of word hyperbolic groups .",
    "specifically , he showed that a group is word hyperbolic if and only if it admits a finite generating set @xmath2 and a regular language @xmath422 containing a representative for every element of @xmath114 such that the _ multiplication table _ @xmath446 is a context - free language , where @xmath447 is a new symbol not in @xmath2 .",
    "motivated by this result , duncan and gilman @xcite have suggested calling a monoid _ word hyperbolic _ if it satisfies this language - theoretic condition . since every rational monoid is word hyperbolic ( * ? ? ?",
    "* theorem  6.3 ) we can deduce that every @xmath0 monoid is word hyperbolic in this sense .",
    "every monoid admitting a @xmath0 presentation is word hyperbolic in the sense of duncan and gilman ( and furthermore admits a hyperbolic structure with unique representatives ) .",
    "this research was supported by an rcuk academic fellowship .",
    "the author would like to thank a.  v.  borovik and v.  n.  remeslennikov for a number of helpful conversations .",
    "m.  hoffmann , d.  kuske , f.  otto , and r.  m. thomas .",
    "some relatives of automatic and hyperbolic groups . in g.",
    "m.  s. gomes , j .- e .",
    "pin , and p.  v. silva , editors , _ semigroups , algorithms , automata and languages _ , pages 379406 , 2003 .",
    "j.  h. johnson .",
    "do rational equivalence relations have regular cross sections ? in _ automata , languages and programming ( nafplion , 1985 ) _ , volume 194 of _ lecture notes in comput .",
    "_ , pages 300309 .",
    "springer , berlin , 1985 ."
  ],
  "abstract_text": [
    "<S> we show that any finite monoid or semigroup presentation satisfying the small overlap condition @xmath0 has word problem which is a deterministic rational relation . </S>",
    "<S> it follows that the set of lexicographically minimal words forms a regular language of normal forms , and that these normal forms can be computed in linear time . </S>",
    "<S> we also deduce that @xmath0 monoids and semigroups are rational ( in the sense of sakarovitch ) , asynchronous automatic , and word hyperbolic ( in the sense of duncan and gilman ) . from this </S>",
    "<S> it follows that @xmath0 monoids satisfy analogues of kleene s theorem , and admit decision algorithms for the rational subset and finitely generated submonoid membership problems . </S>",
    "<S> we also prove some automata - theoretic results which may be of independent interest .    </S>",
    "<S> mark kambites    school of mathematics ,  university of manchester , + manchester m13 9pl ,  england . </S>"
  ]
}