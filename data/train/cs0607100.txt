{
  "article_text": [
    "for packing 2d items into bins or a strip , it is a natural idea to exploit techniques for packing lower dimensional ( i.e. , 1d ) items .",
    "the _ two - stage packing _ is particularly well - known : as shown in fig .",
    "[ fig : ss ] ( a ) , a bin ( or a strip ) is divided into _ shelves _ and each shelf contains a single layer of items . after packing items into shelves ,",
    "the problem of packing shelves into bins ( or a strip ) obviously becomes the 1d bin ( or strip ) packing problem .",
    "the idea originally comes from cutting a large board into smaller items efficiently @xcite ; one can cut the board only in two stages , i.e. , cutting horizontally first and then vertically .",
    "it should be noted that many existing 2d packing algorithms @xcite are based on this two - stage packing . in 2002 , caprara @xcite established the relation between 2d bin packing ( 2bp ) and 2d shelf bin packing ( 2sbp ) .",
    "namely the maximum ratio between the optimal cost for 2sbp and that for 2bp is equal to @xmath2 which is the well - known approximation factor of the harmonic algorithm for 1d bin packing @xcite .",
    "( a similar relation between 2d strip packing ( 2sp ) and 2d shelf strip packing ( 2ssp ) was also established by csirik and woeginger @xcite . ) as an important byproduct , caprara also showed an approximation algorithm for 2bp whose asymptotic worst - case ratio is arbitrarily close to @xmath3 , which first broke the barrier of two for the upper bound on the approximability of this problem .    * our contribution",
    "* this paper extends the two - stage packing into the 3d strip packing ( 3sp ) and obtains an approximation algorithm whose asymptotic worst - case ratio is arbitrarily close to @xmath3 .",
    "our model is standard ( see section  [ sec : definition ] for details ) and the previous best bound is @xmath1 by jansen and solis - oba @xcite .",
    "we also show that there is an aptas for the special case in which all items have square bases .",
    "our algorithms use a _ segment _ as shown in fig .",
    "[ fig : ss ] ( b ) instead of a shelf in the 2d case . for packing items ( whose three sides are all at most 1.0 ) into a segment ,",
    "we first divide a segment into slips and pack the items into slips by the next - fit ( nf)algorithm .",
    "the key idea is to make the height @xmath4 of each segment sufficiently large ( within a constant ) , which effectively kills the inefficiency of the algorithm for the vertical direction in the sense that the unused space at the top of the segment is relatively small .",
    "after packing items into segments of the fixed height ( = c ) and fixed length ( = 1.0 ) , we can obviously use a one - dimensional bin packing algorithm to pack segments .",
    "* previous results : * on 3d strip packing , li and cheng @xcite presented the first approximation algorithm with asymptotic worst case ratio 3.25 .",
    "two years later , they gave an online algorithm for the problem with asymptotic worst - case ( competitive ) ratio arbitrarily close to @xmath5 @xcite .",
    "then miyazawa and wakabayashi @xcite improved the asymptotic worst - case ratio to 2.67 and 2.64 .",
    "very recently , jansen and solis - oba @xcite improved the asymptotic worst - case ratio to @xmath1 .    on 2d strip packing , coffman et al .",
    "@xcite presented algorithms based on nfdh ( next fit decreasing height ) and ffdh ( first fit decreasing height ) , and showed that the respective asymptotic worst - case ratios are 2 and 1.7 .",
    "golan @xcite and baker et al .",
    "@xcite improved the bound to @xmath6 and @xmath7 , respectively .",
    "using linear programming and randomization techniques , an asymptotic fully polynomial time approximation schemes ( afptas ) was given by kenyon and rmila @xcite .",
    "on 2d bin packing , in 1982 , chung , garey and johnson @xcite presented an approximation algorithm with asymptotic worst - case ratio at most 2.125 .",
    "caprara @xcite improved the upper bound to @xmath8 . on the other hand , bansal et al .",
    "@xcite showed that the 2d bin packing problem does not admit an aptas .",
    "chlebk and chlebkov  @xcite further gave an explicit lower bound @xmath9 . since the 2d bin packing problem is a special case of the 3d strip packing problem , the lower bound holds for 3d strip packing too",
    "our model is exactly the same as @xcite . given an input list @xmath10 of @xmath11 three - dimensional boxes , in which each box has length , width and height at most 1 respectively , 3sp is to pack all boxes into a 3d strip ( rectangular parallelepiped ) of width 1 , length 1 and minimum height , so that the boxes do not overlap . in this paper",
    "we consider the orthogonal version of the problem without rotations , i.e. , the boxes must be packed so that their faces are parallel to the faces of the strip and the boxes are oriented and can not be rotated .",
    "the problem is obviously np - hard . for approximation algorithms ,",
    "we use the standard measure to evaluate them , i.e. , the worst - case ratio . in this paper , we consider the asymptotic worst - case ratio . given an input list _",
    "l _ and an approximation algorithm @xmath12 , we denote by @xmath13 and @xmath14 , respectively , the height used by an optimal algorithm and the height by algorithm @xmath12 for list @xmath10 .",
    "the _ asymptotic worst - case ratio _",
    "@xmath15 of algorithm @xmath12 is defined by @xmath16",
    "* fractional bin packing * ( fbp ) . the continuous version of bin packing plays an important role in designing an asymptotic ptas @xcite .",
    "we first give its definition and some properties .",
    "given an instance @xmath17 of one dimensional bin packing , suppose that there are @xmath18 _ distinct _ sizes of the items in @xmath17 , where @xmath18 is a constant .",
    "let @xmath19 be the distinct item sizes and @xmath20 be the number of items of size @xmath21 for @xmath22 . a _ feasible pattern _",
    "is a vector @xmath23 such that @xmath24 , i.e. , all items in a feasible pattern would fit in one bin .",
    "let @xmath25 denote the collection of all feasible patterns for @xmath17 and @xmath26 denote the @xmath27-th pattern in @xmath25 , where @xmath28 is the number of items of size @xmath21 in the @xmath27-th pattern .",
    "we further denote @xmath29 to be the number of bins being needed for packing the @xmath27-th feasible pattern in @xmath25 . if we allow @xmath29 to be a fractional number , then the problem becomes the fractional bin packing problem ( fbp ) and corresponds to the following _ linear program _",
    "( lp ) :    @xmath30    the _ lp dual _ of ( [ eqn : primary ] ) is given as follows : @xmath31    optimal values for ( [ eqn : primary ] ) and ( [ eqn : dual ] ) coincide and the following important lemma is due to @xcite ,    there exists an optimal solution @xmath32 of ( [ eqn : dual ] ) such that @xmath33 ( recalling @xmath34 ) .",
    "[ lemma : order ]    the following lemma @xcite , says that the optimal values for bp and fbp are almost equal .",
    "[ lemma : fractional ] for any bin packing instance @xmath17 and for any @xmath35 , we have @xmath36 , where @xmath37 is the optimal value for fbp .",
    "* harmonic algorithm . *",
    "the harmonic algorithm was introduced by lee and lee  @xcite . given a ( one - dimensional ) bin packing instance @xmath17 and an integer @xmath38 , we say an item @xmath27 belongs to type @xmath39 if its size @xmath40 $ ] for @xmath41 and to type @xmath42 if @xmath43 $ ] , where @xmath42 is a constant",
    ". then the harmonic algorithm packs items of different types into different bins . during packing , if the current item of type @xmath39 does not fit in the corresponding bin , then the algorithm closes the bin and opens a new one .",
    "given an item of size @xmath44 , we define a weighting function @xmath45 as follows : @xmath46 let @xmath47 , @xmath48 for @xmath49 .",
    "for a positive integer @xmath42 , let @xmath50 be the integer such that @xmath51 .",
    "note that @xmath53    the weighting function @xmath45 satisfies the following property ( see @xcite ) :    for each sequence @xmath54 with @xmath55 $ ] and @xmath56 , @xmath57 [ lemma : harmonic ]    * nfdh packing .",
    "* _ nfdh _ was first proposed by meir and moser @xcite for packing a set of _ squares _ into a rectangular bin , but _",
    "nfdh _ packing can also be applied to pack rectangles .",
    "it simply works as follows .",
    "first sort all rectangles in non - increasing order of their heights .",
    "then pack them into the bin level by level and in each level we use the next fit ( nf ) algorithm .",
    "if a level can not accommodate the current rectangle , then we close it ( will never be used again ) and open a new one .",
    "( see figure  [ fig : nfds ] ( c ) ) .",
    "note that nfdh packing can be extended for multidimensional packing  @xcite .",
    "we call our algorithm 3d segment strip packing ( 3ssp ) .      given an item @xmath58 , where @xmath59 , @xmath60 and @xmath61 are its length , width and height respectively , we may use @xmath62 , @xmath63 and @xmath64 to denote the three parameters as well .",
    "algorithm 3ssp has the following 3 main steps .    1 .",
    "divide all items into @xmath42 groups @xmath65 such that those in @xmath66 have their lengths in range @xmath67 $ ] , where @xmath42 is a constant .",
    "sort all @xmath66-items by their width such that @xmath68 and @xmath69 , where @xmath70 is the number of items in group @xmath66 for @xmath71 .",
    "then pack all items in @xmath66 , for @xmath72 , into segments by algorithm gnf ( given later ) .",
    "for @xmath73 , pack all items in @xmath74 into segments by algorithm gnfdh ( given later ) .",
    "3 .   when all items in group @xmath66 have been packed into segments , for @xmath71 , then regard all segments as one dimensional items ( only their width is considered ) and call an asymptotic ptas for one - dimensional bin packing ( e.g. @xcite ) to pack these segments .    in the following",
    "we give the procedures to pack 3d items into segments , which are the cores of algorithm 3ssp .",
    "we deal with @xmath66 items ( @xmath75 ) and @xmath74 items separately .",
    "* gnf : * consider @xmath66 items ( @xmath75 ) . given @xmath76 such that @xmath77 .    1 .",
    "open a new segment of size @xmath78 , where @xmath79 .",
    "2 .   divide this segment into @xmath27 pieces of slips of sizes @xmath80 , as shown in figure  [ fig : nfds ] ( a ) , then without considering their widths and lengths , pack items into these slips by next fit .",
    "( see figure  [ fig : nfds ] ( b ) ) .",
    "3 .   if there are remaining items , re - index them and go to step 1 .    ; the projection of gnfdh packing without considering widths ]    * gnfdh : * given @xmath81 such that @xmath82 .    1 .   open a new segment with size @xmath78 , where @xmath83 .",
    "2 .   find a maximal index @xmath84 such that @xmath85 can be placed into the segment by nfdh without considering their widths .",
    "pack the @xmath84 items by nfdh .",
    "( see figure  [ fig : nfds ] ( c ) ) 3 .",
    "re - index the remaining items in @xmath74 ( if any ) , go to step 1 .",
    "in the algorithm analysis , _ dual feasible functions _ by fekete and scheper @xcite play a crucial role .",
    "( similar notions are used as weighting functions @xcite ) suppose that a function @xmath86 \\to [ 0,1]$ ] satisfies @xmath87 for any sequence @xmath88 such that @xmath89 and @xmath90 $ ] . then @xmath91 is called a _ dual feasible _ function",
    ". here are two specific examples : let @xmath92 be a feasible solution of ( [ eqn : dual ] ) ( dual lp for fbp in section [ sec : binpacking ] ) satisfying the requirement of lemma [ lemma : order ] and let @xmath93 , @xmath94 and @xmath95 .",
    "define a new function @xmath96 by @xmath97    the other example is @xmath98 defined in section  [ sec : binpacking ] .",
    "[ lemma : feasible ] @xcite both @xmath99 and @xmath100 are dual feasible functions .",
    "using these two functions , we define the _ modified volume _ @xmath101 of an item @xmath58 as @xmath102 the total modified volume of the input list @xmath10 of items is @xmath103 .",
    "we need one more lemma regarding dual feasible functions and 2d packing : let @xmath104 be 2d items which can be packed into a square bin of size ( 1,1 ) , and @xmath105 and @xmath106 be dual feasible functions",
    ". then we have the following lemma ( see @xcite for the proof ) , which is important for bounding the total modified volume .",
    "[ lemma : twobbound ] @xmath107 .",
    "now , we are ready to prove the upper bound for the approximability of our algorithm 3ssp .",
    "let @xmath108 be the 1-dimensional item list obtained after step 2 of 3ssp , i.e. , the list of the widths of the segments . recall that @xmath4 is the height of the segment and @xmath42 is the parameter of the harmonic algorithm .",
    "let @xmath109 be the optimal cost of 1-dimensional bin packing for the list @xmath108 and @xmath13 be the optimal cost for 3d strip packing for the list @xmath10 .",
    "our goal is thus to prove the following theorem .",
    "[ theorem : tk ] for any @xmath35 , @xmath110 .",
    "since we employ some aptas for packing @xmath108 , algorithm 3ssp achieves the cost arbitrarily close to @xmath111 in the asymptotic case .",
    "it shows that the asymptotic worst - case ratio of 3ssp is at most @xmath112 for any given @xmath113 , which tends to @xmath3 as @xmath114 and the constants @xmath4 and @xmath42 take sufficiently large integers .",
    "the basic idea of the proof is to establish the relation of the left and right - hand sides of the inequalities in the theorem to the total modified volume .",
    "recall that 3ssp uses different segments for each @xmath66 .",
    "a segment is called type @xmath27 if it contains @xmath66 items . for @xmath115 ,",
    "let @xmath116 be the number of segments of type @xmath117 and @xmath118 the width of the @xmath27-th segment of type @xmath117 , where @xmath119 . by algorithm 3ssp , we have    @xmath120    noting that @xmath121 is the function defined in subsection [ subsec : dual ] for instance @xmath108 , by lemma [ lemma : order ] , we have @xmath122 let @xmath123 denote the total modified width of the segments of type @xmath117 .",
    "now , we give a lower bound for @xmath124 . for convenience ,",
    "we define @xmath125 for all @xmath117 s .",
    "[ lemma : allslip ] the total modified volume @xmath126 .",
    "let @xmath127 be the @xmath27-th segment of type @xmath117 and @xmath128 be the set of all boxes in @xmath127 .",
    "we first prove that @xmath129    case 1 .",
    "if @xmath131 , @xmath132 since @xmath133 and @xmath134 . otherwise ,",
    "i.e. , @xmath135 , by gnf packing , we have the height packed in every slip of @xmath127 is at least @xmath136 and every box in @xmath127 has length in @xmath137 $ ] and width at least @xmath138 ( i.e. , the width of the next segment ) .",
    "remember @xmath139 where @xmath44 in @xmath137 $ ] . by ( [ eqn : weights ] )",
    ", the total weight of the boxes in every slip is at least @xmath140 since there are @xmath117 slips in segment @xmath127 , @xmath141    case 2 .",
    "@xmath142 . if @xmath143 , @xmath132 still holds",
    "otherwise , i.e. , @xmath144 .",
    "consider gnfdh packing for items of type @xmath42 .",
    "assume there are @xmath59 levels in @xmath145 , and their heights are @xmath146 , respectively .",
    "set @xmath147 . by nfdh packing , if @xmath148 , we have @xmath149 and every box in @xmath145 has width at least @xmath150 , length at most @xmath151 . hence the total sum of lengths in every level is at least @xmath152 .",
    "remember @xmath153 where @xmath44 in @xmath154 $ ] . and every box in the @xmath84-th level of @xmath145 has height at least @xmath155 .",
    "so the total weight in the @xmath84-th level is at least @xmath156 since @xmath157 , the total weight of @xmath158 is @xmath159 so the inequality ( [ eqn : subslip ] ) holds .",
    "since there are @xmath42 types of segments and in every type @xmath117 there are @xmath116 segments , so @xmath160 by ( [ eqn : subslip ] ) , @xmath161 the last inequality follows directly from @xmath162 .",
    "next we give an upper bound for total modified volume @xmath124 .",
    "[ lemma : integrate ] given any input list @xmath10 over @xmath163^{3}$ ] , the total modified volume @xmath164 .",
    "consider an optimal packing for an input list @xmath10 .",
    "for each item of @xmath10 we draw two horizontal planes at its bottom and top , shown as figure  [ fig : layers ] .",
    "these planes cut the optimal packing into layers such that all items ( may be part of the original items ) in a layer have the same height .",
    "then we can see that each layer is associated with a _",
    "feasible packing _ on a square bin of @xmath165 by ignoring the heights .",
    "assume that after cutting , totally , there are @xmath59 layers and their heights are @xmath166 , respectively . by lemmas [ lemma :",
    "harmonic ] and [ lemma : feasible ] , we have @xmath167 and @xmath168 for any list @xmath169 with @xmath170 .",
    "since in the @xmath27-th layer , every item has height @xmath171 , by lemma [ lemma : twobbound ] , the total weight of all items in the @xmath27-th layer is at most @xmath172 since @xmath173 then @xmath174    now it is straightforward to prove theorem [ theorem : tk ] .",
    "( proof of theorem [ theorem : tk ] ) by lemma [ lemma : fractional ] , we have @xmath175 by the duality of fbp and the dual fbp , as used in @xcite , we have @xmath176 where @xmath123 denotes the overall modified width of the segments of type @xmath117 . by lemmas [ lemma : allslip ] and [ lemma : integrate ] , @xmath177    * remark .",
    "* our algorithm can also be applied to the parametric case in which the boxes have bounded length ( or width ) .",
    "then by theorem [ theorem : tk ] the asymptotic worst - case ratio in the parametric case that all boxes have width or length bounded from above by @xmath178 is stated in the following table , which is better than the previous parametric ratio @xmath179 in @xcite .",
    "[ cols=\"^,^,^,^,^\",options=\"header \" , ]",
    "in this section , by combining the techniques for 2d strip packing @xcite and 2d bin packing @xcite , we give an aptas for the case that the boxes have square bases ( bottoms ) .",
    "the standard ideas in our scheme are below :    * create a gap between large items and small items such that the items fall into the gap do not affect the packing significantly .",
    "* pack large items in the way similar to 2d strip packing @xcite and pack the other items by nfdh @xcite .",
    "we use a multidimensional version of nfdh in @xcite , called mnfdh , to pack items with small base sizes into a 3d bin or a strip .",
    "the lemma below can be obtained directly from @xcite ( see also @xcite ) .",
    "[ lemma : mnfdh ] let @xmath17 be a set of 3d boxes with base sides at most @xmath180 and height at most 1 . consider the mnfdh packing applied to @xmath17 . if mnfdh can not place more boxes from @xmath17 into a bin of size @xmath181 , then either all boxes of @xmath17 has been packed into the bin or the total packed volume in the bin is at least @xmath182    given any feasible 3d strip packing of height @xmath61 , we can scan a plane parallel to the square base of the strip from the bottom to the top to obtain a vector @xmath183 such that @xmath184 , where @xmath117 is the number of patterns to pack all squares induced from the input list into a unit square bin and @xmath29 is the height of pattern @xmath27 .",
    "* definition of @xmath185 .",
    "* if an input set @xmath17 has a constant number of different sizes , say @xmath186 , and all the base sides are at least @xmath180 , where @xmath180 is a constant , then we define this problem as _ restricted 3d strip packing with square bases _ , denoted by @xmath185 .",
    "[ lemma : patterns]@xcite the number of all feasible patterns of packing the square items , induced from an instance of @xmath185 , into a unit square bin is a constant .    [ lemma : restrict ] @xmath185 can be solved within @xmath187 in polynomial time of @xmath11 , where @xmath188 is the optimal cost for @xmath185 and @xmath11 is the input size .",
    "the proof is put to the appendix .",
    "[ lemma : largepacking ] assume the input set @xmath17 contains boxes with base sides at least @xmath180 .",
    "then for any @xmath189 , we can get a solution within @xmath190 in polynomial time for packing @xmath17 into the strip .",
    "the proof is put to the appendix .",
    "[ [ asymptotic - ptas ] ] * asymptotic ptas * + + + + + + + + + + + + + + + + +    using the similar techniques as in @xcite , we present an aptas .",
    "given an input set @xmath17 and any @xmath191 , our packing is as follows .    1 .",
    "let @xmath192 be the base side length of item @xmath84 .",
    "define @xmath193 for @xmath194 , where @xmath195 .",
    "2 .   set @xmath196 for some index @xmath197 satisfying @xmath198 ( such a set @xmath199 must exist ) , where @xmath200 is the total volume of items in @xmath201 .",
    "define the set of large items as @xmath202 and the set of small items as @xmath203 .",
    "3 .   set @xmath204 and round all items in @xmath10 up into @xmath186 distinct sizes , @xmath205 .",
    "then call the algorithm in lemma [ lemma : largepacking ] to get an almost optimal solution .",
    "4 .   partition the unused space in the current strip into cuboid regions and use mnfdh to pack as many squares in @xmath169 as possible into the free space .",
    "let @xmath206 denote the subset of the remaining small items that could not be packed ( @xmath207 could possibly be empty ) .",
    "use mnfdh to pack @xmath208 at the top of the current packing in the strip .    given an input set @xmath17 of 3d boxes with square bases , @xmath209 , where @xmath210 is the height used by our algorithm and @xmath211 .",
    "( sketch . )",
    "our argument is similar as @xcite .",
    "after step 4 , there are two cases .",
    "@xmath207 is not empty",
    ". then by the proof in section 3.4 of @xcite , @xmath212 the last step follows by assuming without loss of generality that @xmath213 .",
    "@xmath207 is empty .",
    "set @xmath214 , where @xmath215 in step 2 . by lemma [ lemma : largepacking ] ,    @xmath216    next",
    ", we consider the cost of packing @xmath217 by mnfdh . since the base size of each item in @xmath217 is at most @xmath218 , by lemma [ lemma : mnfdh ] , @xmath219 combining ( [ eqn : large ] ) and ( [ eqn : middle ] ) , @xmath220 .",
    "finally we want to note that each step in our algorithm takes polynomial time of @xmath11 since @xmath218 is a constant .",
    "in this paper , we present new asymptotic upper bounds for the 3d strip packing problems .",
    "our results give a possible way to apply the approaches for 1- and 2-dimensional bin packing to 3-dimensional strip packing .",
    "it might be interesting to see if the idea can be used to tackle higher dimensional strip packing in the general case .",
    "regrading the special case that items have square bases , with the technique in the previous work on 2d bin packing and 2d strip packing an aptas is easily achieved .",
    "such an approach can also be extended to multidimensional strip packing .",
    "our idea is similar with the one in @xcite .",
    "first we consider the following lp , where @xmath117 is the number of all feasible patterns of packing the squares induced from an instance of @xmath185 into a unit square bin , @xmath222 is the number of type @xmath84 items in pattern @xmath27 and @xmath223 is the sum of heights of type @xmath84 items for @xmath224 , @xmath29 is the height of pattern @xmath27 .",
    "@xmath225 by lemma [ lemma : patterns ] , @xmath117 is a constant related to @xmath186 and @xmath180 .",
    "so , the above lp can be solved in polynomial time of @xmath11 , where @xmath11 is the input instance size of @xmath185 .",
    "let @xmath226 be an optimal solution of the above lp . by some linear programming property , there are at most @xmath186 non - zero @xmath227 s .",
    "up to renaming , we assume the non - zero coordinates are @xmath228 .",
    "we construct a packing of @xmath185 in the following way .",
    "we fill in the strip bottom - up , taking each pattern in turn .",
    "let @xmath229 be the current pattern .",
    "pattern @xmath84 will be used between level @xmath230 and level @xmath231 ( initially @xmath232 ) . for each @xmath27",
    "such that @xmath233 , we draw @xmath222 cuboids of base size @xmath234 going from level @xmath235 to level @xmath236 , where @xmath234 is the base side length of type @xmath27 item . after this",
    "is done for all @xmath84 s , we take all the cuboids of width @xmath234 one by one in some arbitrary order , and fill them in with the boxes of base size @xmath234 in a greedy manner ( some small amount of space may be wasted on top of each column ) .",
    ": :    sort the @xmath11 boxes in non - increasing order of base sizes    and stack up them one by one to get a stack of height @xmath239 .    and define @xmath240 threshold boxes , where a box is a    threshold if its interior or bottom base intersects some plane    @xmath241 , for @xmath242 .",
    "grouping and rounding .",
    ": :    the threshold boxes divide the remaining boxes into @xmath186    groups .",
    "the base sizes of the boxes in the first group are rounded up    to 1 , and the base sizes of the boxes in each subsequent group are    rounded to the base size of the threshold box below their group .",
    "this    defines an instance @xmath243 of    @xmath185 .",
    ": :    apply the approach of lemma [ lemma : restrict ] to @xmath243    and output the packing .    to analyze the algorithm",
    ", we use the argument of kenyon and rmila @xcite .",
    "consider two instances @xmath244 and @xmath245 derived from the stack built in stacking step .",
    "the two instances are obtained by first cutting the threshold boxes using the planes @xmath241 , then considering the @xmath186 subsequent groups of boxes in turn ( where each group now has cumulative height exactly @xmath246 ) ; to define @xmath245 , we round the base sizes in each group up to the largest base size of the group ( up to 1 for the first group ) ; to define @xmath244 , we round the base sizes in each group down to the largest base size of the next group ( down to 0 for the last group ) .",
    "let @xmath247 be the solution of the above linear programming for instance @xmath17 .",
    "it is easy to see that @xmath248 moreover , @xmath249 since @xmath250 and @xmath251 , the height used by our packing is at most @xmath252"
  ],
  "abstract_text": [
    "<S> in this paper , we study the 3d strip packing problem in which we are given a list of 3-dimensional boxes and required to pack all of them into a 3-dimensional strip with length 1 and width 1 and unlimited height to minimize the height used . </S>",
    "<S> our results are below : i ) we give an approximation algorithm with asymptotic worst - case ratio @xmath0 , which improves the previous best bound of @xmath1 by jansen and solis - oba of soda 2006 ; ii ) we also present an asymptotic ptas for the case in which all items have _ square _ bases . </S>"
  ]
}