{
  "article_text": [
    "_ title of the program : _ graphgen .",
    "+ _ catalogue identifier : _ + _ program obtainable from : _ + http://www.physik.uni-leipzig.de/~bogacz/graphgen/ + _ computer for which the program is designed and others on which it has been tested : _ pc , alpha workstation .",
    "+ _ operating systems or monitors under which the program has been tested : _ linux , unix , ms windows xp .",
    "+ _ programing language used : _ c. + _ memory required to execute with typical data : _ 300k words for a graph with 1000 nodes and up to 50000 links .",
    "+ _ no . of bits in a word : _ 32 .",
    "+ _ no . of processor",
    "used : _ 1 .",
    "+ _ has the code been vectorized or parallelized : _ no .",
    "of bytes in distributed program , including test data etc . : _",
    "+ _ distribution format : _ compressed tar file .",
    "+ _ keywords : _ random graphs , complex networks , markov process , monte carlo method .",
    "+ _ nature of the problem : _ the program generates random graphs .",
    "the probabilities of graph occurrence are proportional to their statistical weight , dependent on node degrees defined by arbitrary distributions .",
    "+ _ method of solution : _ the starting graph is taken arbitrary and then a sequence of graphs is generated .",
    "each graph is obtained from the previous one by means of a simple modification .",
    "the probability of accepting or rejecting the new graph results from a detailed balance condition realized as metropolis algorithm . when the length of the generated markov chain increases , the probabilities of graph occurrence approach the stationary distribution given by the user - defined weights ascribed to the graphs .",
    "+ _ restrictions on the complexity of the problem : _ none .",
    "+ _ typical running time : _ less than two minutes to generate @xmath4 graphs of size @xmath5 nodes and @xmath6 links on a typical pc .",
    "+ _ unusual features of the program : _ none .",
    "complex networks can be easily found in the real world .",
    "if the world objects are represented by nodes , and the interactions between them by edges then phone calls , computer connections , disease spread diagrams and human contacts are only a few examples of such networks .",
    "the recent improvements of computer technology has made the data acquisition easier and in consequence has led to a development of large databases of topology of observed networks .",
    "it turned out that completely independent networks often share common features , such as small world effect , fat tail in node degree distribution or large clustering .",
    "these effects caused that random graph theory , being mainly studied by pure mathematics so far , has attracted the attention of physicists and other natural sciences ( for reviews see @xcite ) .",
    "there are two natural approaches to simulate networks as random graphs : diachronic @xcite and synchronic @xcite . in the first the network evolution in time",
    "is being investigated .",
    "one simulates the process of growth and checks how different mechanisms influence the emerging final graphs . in the latter approach a statistical ensemble of graphs",
    "is constructed and methods of statistical mechanics are applied .",
    "each graph has a weight determining the probability of its occurrence during random sampling .",
    "the emergence of real networks usually is a complex process and computer simulations require the application of both approaches together .",
    "for example , the internet is still a growing network , but its older parts also evolve .",
    "the program package we describe in this paper uses the synchronic approach , which is a natural extension of erds and rnyi ideas @xcite .",
    "a statistical ensemble of graphs is built by assigning a weight to each labeled graph in the given set of graphs .",
    "the weights can be chosen arbitrary . as an illustration , in the program we chose them to depend on degrees of individual nodes . if more complicated weights are needed , slight modifications of the program source code are required .",
    "the program package can be used to generate graphs which mimic scale - free networks , i.e. , networks with power - law degree distribution @xcite or , in general , any desired degree distribution .",
    "one crucial point must be explained here . for finite graph size",
    "all the methods devoted to generating fat - tailed degree distributions introduce a cut - off effect , since it is a property of networks itself @xcite .",
    "the same is true for the program presented in this paper and there is no way to omit this effect without changing other properties such as lack of self- and multiple - connections .",
    "the rest of this paper is organized as follows . in section [ definitions ]",
    "we present definitions of graphs , statistical ensembles of graphs and partition functions of the models presented in the paper .",
    "section [ methods ] contains the description of the method used to generate graphs . in the final section ,",
    "we outline the program compilation and usage .",
    "let us start with basic definitions .",
    "a graph is a set of @xmath7 nodes ( vertices ) connected by @xmath8 edges ( links ) ( see the example in fig .",
    "[ example_graph ] ) .",
    "the edges can be directed or undirected , but in this paper we constrain ourselves only to graphs with undirected edges .",
    "the graphs without multiple connected or self - connected nodes will be called simple graphs ( or graphs )",
    ". graphs containing multiple - connected or self - connected nodes will be denoted pseudographs or degenerated graphs .",
    "a graph does not need to be connected .",
    "both simple graphs and pseudographs can be represented by an adjacency matrix . for graphs with @xmath7 nodes",
    "this is a @xmath9 matrix with elements @xmath10 equal to the number of edges connecting node @xmath11 and node @xmath12 ( for @xmath13 ) .",
    "diagonal elements @xmath14 count twice the number of self - connecting edges attached to node @xmath11 , because we count each endpoint of link once .",
    "for example , the adjacency matrix of the graph shown in fig .",
    "[ example_graph ] has the following form : @xmath15 the adjacency matrix is symmetric for any type of graph with undirected edges .",
    "additionally , for simple graphs all diagonal elements are zero , and all other elements are zero or one .",
    "the sum of elements in the @xmath11-th row ( or in the @xmath11-th column ) gives the degree ( the order ) of the vertex @xmath11 , i.e. , the number of edges connected to that vertex .",
    "a statistical ensemble of graphs is defined by ascribing a statistical weight to every graph in a given set . among many possible choices",
    "we have defined and implemented in the program three sets of graphs",
    "@xcite :    1 .",
    "the _ canonical _ ensemble consists of all labeled graphs with fixed number of nodes @xmath7 and edges @xmath8 .",
    "it is a generalization of well known erds and rnyi graphs , where one connects @xmath7 nodes by @xmath8 edges chosen at random from all possibilities . 2 .",
    "the _ grand - canonical _ ensemble is the ensemble of all labeled graphs with fixed number of nodes @xmath7 .",
    "the number of edges @xmath8 is varying .",
    "this is a generalization of the so - called binomial model , also introduced by erds and rnyi @xcite .",
    "the _ micro - canonical _ ensemble consists of all labeled graphs with fixed degree of nodes given by a set of numbers @xmath16 .",
    "each of those ensembles can exist in two versions , consisting of only simple graphs or also pseudographs .",
    "by fully labeled ( called for simplicity labeled ) graph we mean a graph with labeled nodes and edges .",
    "each edge has two labels , attached to two endpoints ( see fig .",
    "[ example_graph ] ) .",
    "graphs which are identical in the sense of shape are not necessarily identically labeled graphs .",
    "consider for example the graph shown in fig .",
    "[ labels ] .",
    "this unlabeled graph has 6 different realizations as labeled graph , shown on the right hand side of fig .",
    "[ labels ] .",
    "the weight of each graph in the ensemble is defined in two steps .",
    "first we introduce a uniform configurational weight @xmath17 for each labeled graph .",
    "this weight is to compensate the number of permutations of indices .",
    "however , we will see below that for graphs possessing special symmetries the number of distinct labeled graphs is smaller than @xmath18 and therefore some additional factor remains .",
    "the partition function for the canonical ensemble of graphs with uniform measure is defined as : @xmath19 where @xmath20 is the set of all fully labeled graphs with given number of nodes @xmath7 and edges @xmath8 and @xmath21 denotes the set of all unlabeled graphs of size @xmath7 and @xmath8 .",
    "the weight function @xmath22 is defined in such a way that @xmath23 is the total number of fully labeled graphs corresponding to the unlabeled graph @xmath0 .",
    "if one considers only simple graphs the edge labeling can be abandoned . in this case the edge position is uniquely determined by two nodes at its endpoints .",
    "the @xmath24 factor cancels all possible edge relabelings , so exactly the same model can be defined when one replaces the uniform measure @xmath17 by @xmath25 and does not introduce edge labels .",
    "the @xmath26 function defined above is just the partition function of the erds - rnyi model @xcite .    on the basis of the canonical partition function @xmath26",
    ", we define the partition function for the grand - canonical ensemble @xcite : @xmath27 where @xmath28 can be interpreted as chemical potential for edges .",
    "defining @xmath29 as @xmath30 one realizes that @xmath31 is the partition function for the binomial model .",
    "the partition function for the micro - canonical ensemble with given node degree sequence @xmath32 can be defined as : @xmath33 where @xmath34 if @xmath35 and zero otherwise .",
    "the @xmath36 gives the degree of the @xmath11-th vertex of graph @xmath0 .",
    "consider as an example the canonical ensemble of graphs with @xmath37 nodes and @xmath38 edges .",
    "there are 6 possible unlabeled graphs , shown in table [ tab1 ] .",
    "for each graph the number of corresponding labeled graphs , the uniform weight and the normalized occurrence probabilities @xmath39 are also shown .",
    "the uniform weight ( @xmath40 ) leads to networks with poissonian degree distribution . in the real world",
    "one rather observes networks with fat tails .",
    "therefore we introduce an additional functional weight @xmath41 , which is defined as @xmath42 where the @xmath43 function depends on the degree @xmath3 of @xmath11-th graph s vertex .",
    "the @xmath2 can be chosen to obtain desired properties of the statistical ensemble .",
    "for example , one can show ( see , e.g. , @xcite ) that for the canonical ensemble of graphs the choice @xmath44 leads to the average degree distribution @xmath45 in the limit @xmath46 .",
    "therefore , taking @xmath47 we obtain scale - free networks .",
    "the partition functions for canonical , grand - canonical and micro - canonical ensembles with additional weight @xmath41 are : @xmath48 @xmath49 @xmath50 because of the chosen form , the functional weight @xmath41 has the same value for each graph taken from the micro - canonical ensemble .",
    "thus it factorizes and has no influence on properties of the micro - canonical ensemble .",
    "however , in the general case when one defines a more complicated function @xmath41 , for example dependent on the number of certain motives present in the graph , it will modify the relative weights of graphs also in the micro - canonical ensemble .",
    "to introduce such a function , modifications of the program code are required .",
    "the purpose of the presented program is to generate graphs with probabilities proportional to their statistical weights .",
    "unfortunately there is no efficient algorithm which would be able to pick up an element from a large set with given probability . the naive algorithm which would pick up a random element and then accept or reject",
    "it with probability proportional to its weight would be very inefficient because of low acceptance rates .",
    "therefore we use instead a markov chain monte carlo technique , known from simulations of physical systems @xcite .",
    "we construct a guided random walk in the configuration space of graphs . in each step , the program recursively generates a new graph @xmath51 by modification of the current one @xmath52 . in this way",
    "we obtain a markov chain of configurations @xmath53 .",
    "the chain is determined by the transition probabilities matrix @xmath54 encoding how the modification of the graph @xmath0 will lead to graph @xmath55 , and the initial configuration .",
    "if the process is ergodic ( which roughly means that all configurations are accessible ) and if the probabilities fulfill the detailed balance condition : @xmath56 where @xmath57 is the weight of graph @xmath0 , then the frequencies of graph occurrence approach the distribution @xmath58 as the number of steps goes to infinity . in the program presented here , @xmath54 is chosen as : @xmath59 which is known as metropolis algorithm @xcite .",
    "depending on the considered graph ensemble we propose as elementary move one of the three transformations described below .",
    "the first graph transformation called `` t - move '' is used to modify graphs belonging to the canonical ensemble .",
    "first , one node @xmath12 and one edge @xmath60 are chosen at random .",
    "then we rewire the edge to @xmath61 which means that the edge is detached from its endpoint @xmath62 and attached to @xmath12 ( see fig . [ moves ] ) . the total number of edges @xmath8",
    "is thus conserved but the degrees of the vertices @xmath62 and @xmath12 are changed : @xmath63 . the probability for accepting the transformation",
    "is given by formula ( [ metropolis ] ) as @xmath64 where we explicitly used the form of the functional weight given by ( [ graph_weight ] ) .",
    "the second graph transformation which we consider is used to modify graphs belonging to the grand - canonical ensemble . for this ensemble",
    "we introduce two reciprocal transformations  addition and deletion of a link .",
    "both of them preserve the number of nodes in the graph but change the number of edges ( see fig .",
    "[ moves ] ) .",
    "the decision which of those two is used in each elementary step is taken at random with probability @xmath65 .",
    "as it was shown in @xcite , the probabilities of accepting addition and removal of a link are respectively : @xmath66 and @xmath67    the last transformation called `` x - move '' is used to modify graphs from the micro - canonical ensemble @xcite .",
    "first , two links @xmath68 , @xmath69 are chosen randomly from all existing edges .",
    "assume that @xmath68 connects vertices @xmath70 , @xmath71 and @xmath69 connects @xmath72 , @xmath73 . next we exchange their endpoints so that @xmath74 point onto @xmath75 , respectively .",
    "the degrees of all four nodes remain unchanged ( see fig .",
    "[ moves ] ) .",
    "the probability of accepting the move is equal to one , because the weights of all labeled graphs in the micro - canonical ensemble are identical .",
    "if we want to generate only simple graphs , additional constraints must be introduced : we reject all moves leading to self- or multiple - connections .",
    "this does not change the probabilities of graph occurrences but only restricts the configuration space to what we need .",
    "because of the chosen graph generation method , each simulation should start from a `` thermalization '' sequence .",
    "graphs generated during this sequence are not saved and no measurements are made .",
    "this is necessary for the graph occurrence probabilities to approach the proper distribution resulting from the weight function since we usually start from a graph which does not need to be `` typical '' in the given ensemble .",
    "the length of the `` thermalization '' sequence depends on the chosen ensemble , graph size and weight function . to estimate",
    "this length one may look at one particular property of a graph like degree distribution and check how many steps are needed to obtain the expected shape , using @xmath76 function calculated for theoretical and measured degree distribution .",
    "starting from one particular configuration , e.g. , a poissonian random graph , one has to wait until @xmath77 .",
    "one can use the _ degdist _ program , included in the package , to generate node degree distributions for different lengths of thermalization sequence . comparing those with theoretical distributions and calculating @xmath76",
    "one may find an appropriate length of `` thermalization '' sequence .",
    "the graphs generated by the program are correlated .",
    "the autocorrelation time depends on program parameters but also on the measured observable . as an example we report the autocorrelation time for the average clustering coefficient and for the total number of triangles in the graphs generated from the canonical ensemble",
    "the autocorrelation time for graphs with unit weight , with @xmath78 nodes and @xmath79 links , when a sweep contains @xmath80 graph modification trials ( see the sweep definition in the next section ) is @xmath81 for the clustering coefficient and @xmath82 for the number of triangles .",
    "the correlation length grows approximately linearly with the number of graph links . to reduce this autocorelation time simply increase the sweep parameter value",
    "we provide two programs for the generation of the described graph ensembles .",
    "both of them are written in the `` c '' language .",
    "the first , _ graphgen _ is designed for generating graphs and saving them to a file .",
    "the user can make desired operations on the generated and saved sample .",
    "the second program called _ degdist _ demonstrates how to write a simple program calculating some quantities like the average degree distribution without saving the intermediate results to a file .",
    "both programs use the same procedures , collected in a few separate files .",
    "the complete set of source files is presented below :    1 .",
    "init.c  set of functions used to build ( initialize ) a new graph .",
    "the initial graph is constructed by adding some links between randomly chosen nodes .",
    "2 .   links.c ",
    "functions used to perform operations on graphs .",
    "these are for example inserting or removing a link from a graph , choosing links or edges at random etc .",
    "3 .   sweep.c  functions performing three types of graph modification ( t - move , addition / removal of links , x - move ) used to modify the graphs from all ensembles .",
    "4 .   save_load.c ",
    "functions used for loading the initial graph from a file and saving generated graphs .",
    "graphgen.c  main function of program _",
    "graphgen _ , responsible for reading parameters from the command line and management of the graph generation process",
    "degdist.c  the program _",
    "degdist _ that generates the histogram of degree distribution for a given ensemble of graphs .",
    "first we describe the program _ graphgen_.",
    "the source code has been divided into eight files : three header files ( def.h , functions.h , variables.h ) and five source code files ( the above 1 - 5 ) .",
    "the def.h file should be edited before compilation .",
    "constants defined therein determine the ensemble type used for the simulation , the weight function , the save and load file format and limits for the maximal number of nodes and edges .",
    "the complete list of options will be described in detail in subsection [ compilation ] .",
    "the execution and description of output data file is given in subsections [ exec ] and [ save_load_format ] .",
    "the program _",
    "degdist _ is described in subsections [ deg_comp ] and [ deg_exec ] .",
    "the first one is devoted to compilation while the last one gives some informations about execution and output format .      to increase program efficiency , the decision which type of ensemble is going to be simulated is made before program compilation . therefore before program compilation one should check and modify the definitions in the def.h file if necessary .",
    "the structure of the file corresponds to the definitions of macro constants in the `` c '' language .",
    "each line has the following form :    .... # define name value ....    where name and value can be any pair from the list :    * ensemble  [ 1 , 2 , or 3 ] : this value determines what type of ensemble the program uses to generate graphs .",
    "use @xmath83 for micro - canonical , @xmath84 for canonical , and @xmath85 for grand - canonical ensemble .",
    "* graph_type  [ 1 , 2 , or 3 ] : this determines if self- and multiple - connections are allowed .",
    "use @xmath83 to generate simple graphs only , @xmath84 to generate multi - graphs with multiple - connections but without self - connections , and @xmath85 to generate pseudographs with self- and multiple - connections . *",
    "save_format  [ 1 , 2 , or 3 ] : this constant sets the default format for saving and loading a graph .",
    "use @xmath83 for full adjacency matrix format , @xmath84 for short adjacency matrix format , and @xmath85 for node order format ( for a detailed description , see subsection [ save_load_format ] ) . * weight_function  @xmath2 : the function @xmath2 determines the contribution from one of the nodes to the total graph weight ( [ graph_weight ] ) . here @xmath86 is an integer number equal to the node degree .",
    "the function @xmath2 can be defined in any format consistent with the `` c '' language ( for example @xmath87 ) .",
    "it is used only if canonical or grand - canonical ensembles are chosen and the parameter ratio_weight_function is not defined . * ratio_weight_function @xmath88 : in the calculation of transition probabilities ( [ prob_can ] ) , ( [ prob_grand1 ] ) , ( [ prob_grand2 ] ) only the ratio @xmath88 is used . therefore it is better to define this ratio instead of the function @xmath2 .",
    "this reduces round - off errors and increases efficiency of the program ( for example use @xmath89 , when @xmath90 , which avoids calculating the factorial ) .",
    "if the ratio_weight_function is defined then the weight_function is ignored .",
    "the ratio can be defined in any format consistent with the `` c '' language . * nv [ integer number ] : this sets the upper limit for the number of graph vertices and restricts the size of the graph to be generated or loaded .",
    "the larger the limit is , the more memory is required to run the program . *",
    "nl [ integer number ] : as nv but for graph edges .",
    "* sweep [ integer number ] : to obtain a new graph from the previous one , the program modifies the graph by a sequence of elementary transformations described in section [ methods ] .",
    "the parameter sweep denotes the number of attempts of such elementary transformations .",
    "* therm [ integer number ] : this value determines the number of sweeps to be made at the beginning of a simulation without saving the generated graphs .",
    "such starting sequence is necessary to `` thermalize '' the system .",
    "* graphs [ integer number ] : determines how many graphs should be generated ( saved or printed ) . after the starting sequence",
    ", the generated graphs are saved after every sweep . *",
    "initial_n_nodes [ integer number ] : determines the default number of nodes in the initial graph .",
    "* initial_n_links [ integer number ] : determines the default number of links in the initial graph . *",
    "no_drand48 : add this definition if the pseudo - random number function drand48 ( ) is not defined on a computer where the program is going to be compiled . in that case the corresponding built - in function generating pseudo - random numbers will be used .",
    "an example of the def.h file which can be used to generate 100 simple graphs from the canonical ensemble with weight function @xmath91 is :    .... # define ensemble         2 # define graph_type       3 # define save_format      3 # define weight_function      1.0/(q+1.0 ) # define nv           3000 # define nl           3000 # define sweep            5000 # define therm            100 # define graphs           100 # define initial_n_nodes      100 # define initial_n_links      100 ....    the choice of ensemble , graphs type , limits for maximal number of nodes and edges as well as the weight function can not be changed without program re - compilation . the other parameters like",
    "input / output format , simulation length etc . can be treated as defaults , since they can be overridden from the command line while starting the program . to make program compilation as easy as possible a makefile is attached . therefore if one has _",
    "make _ installed , the compilation can be started by issuing the _ make _ command .",
    "the resulting executable is called graphgen.exe . every time",
    "the file def.h is modified , a re - compilation is required before changes take effect .      to execute the program , type in the command line : + _ graphgen.exe _ [ options ] + where [ options ] can be one or more from the following list :    * _ -h _ :  help , i.e. , print the list off all possible command line options . *",
    "_ -n _ [ integer number ] :  number of nodes in the initial graph .",
    "this number is read from the input file if given . * _ -l _ [ integer number ] :  number of links in the initial graph .",
    "this number is read from the input file if given . *",
    "_ -i _ [ inputfile ] :  the name of the file with the initial graph .",
    "if there is more than one graph saved in the file , only the first is used .",
    "if no input file is specified a random graph is generated as the initial graph . *",
    "_ -if _ [ 1 , 2 , or 3 ] :  input file format .",
    "use @xmath83 for full adjacency matrix format , @xmath84 for short adjacency matrix format , and @xmath85 for node degrees format ( the details are given below ) .",
    "* _ -o _ outputfile :  name of the file to which generated graphs are saved .",
    "if no file is specified , the program uses standard output . *",
    "_ -of _ [ 1 , 2 , or 3 ] :  output file format ( the numbers have the same meaning as for the load format ) . *",
    "_ -r _ [ any long integer number ] :  number used to initialize the pseudo - random number generator . * _ -g _ graphs :  number of graphs to be generated . *",
    "_ -s _ sweep :  length of elementary sweep ( i.e. , number of elementary transformation attempts , see description in subsection [ compilation ] ) .",
    "* _ -t _ therm :  number of initial `` thermalization '' sweeps ( see description in subsection [ compilation ] ) .    for example to generate 100 graphs and save their adjacency matrices to file graphs.dat type : + _",
    "graphgen.exe -g 100 -of 1 -o graphs.dat_ +      the result of a single program run is the list of generated graphs printed or saved to a file ( in turn without empty lines in between ) .",
    "the graphs can be saved in one of three possible formats . in each format",
    "the first two lines contain information about the actual number of nodes @xmath92 and the number of links @xmath93 in the graph .",
    "after these two lines the proper information about the graph structure is saved .",
    "using the first format , the graph structure is written as an adjacency matrix .",
    "each line contains one row of the matrix .",
    "matrix elements are separated by spaces .",
    "for example the output file for the graph in fig .",
    "[ example_graph ] has the form :    .... # nv= 5 # nl= 4 0 0 0 0 1 0 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 0 1 2 0 ....    in the second format , only non - zero adjacency matrix elements are saved .",
    "each line in the output file contains information about position ( row and column ) and value of one non - zero matrix element .",
    "because of the symmetry , it is enough to save information about the upper triangle of the matrix ( column @xmath94 row ) .",
    "thus the graph in fig .",
    "[ example_graph ] would be saved as :    .... # nv= 5 # nl= 4 0 4 1 2 2 2 2 4 1 3 4 2 ....    if one uses the third format , only nodes degrees are saved .",
    "usually this does not preserve the whole information required to reconstruct the graph but it may be useful , e.g. , to construct histograms giving the degree distribution @xmath45 . each line of the output file contains the order of one graph vertex . for the graph in fig .",
    "[ example_graph ] it is :    .... # nv= 5 # nl= 4 0 1 3 4 2 ....    the same formats are used by the program to load the initial graph from a file .",
    "we now come to _",
    "degdist_. this is an independent program , which makes use of some functions defined in source files init.c , links.c and sweep.c described in previous sections .",
    "these files are included during the compilation by means of the ` # include ` directive .",
    "thus the program can be compiled as a single file , without any special arrangements .",
    "one can also use attached makefile and issue the command _ make degdist _",
    ", which will generate the degdist.exe executable file .",
    "constants used in the program have the same meaning as it was already described . as a default",
    "all constants are defined in degdist.c , but for convenience there is an option to use the definition from def.h file , exactly as it was in the _ graphgen _ program .",
    "the only one additional constant :    * hist `` name ''    defines the name of the output file into which the histogram of the measured degree distribution is saved .",
    "an example of constants definition is given below :    .... # define ensemble 2 # define graph_type 3 # define ratio_weight_function ( q<1)?1e+20:(q*(q+1.)/(q+3 . ) )   # define sweep 500 # define therm 10000 # define graphs 100000 # define initial_n_nodes 100 # define initial_n_links 100 # define nv 30000 # define nl 30000 # define hist \" test.dat \" # define no_drand48 ....",
    "this allows to generate @xmath4 pseudographs from the canonical ensemble with @xmath95 and barabsi - albert degree distribution @xcite : @xmath96 which leads to @xmath97 and @xmath88 as given by ratio_weight_function .",
    "each graph is generated from the previous one after 500 attempted rewirings .",
    "the measured histogram of degree distribution averaged over the generated sample of the canonical ensemble is saved into test.dat file .",
    "one can check that this agrees well with the theoretical distribution @xmath45 up to finite - size corrections ( cut - off ) .",
    "after compilation the program _",
    "degdist _ can be executed simply from the command line without any arguments . for parameters given above",
    ", the running time is less than one minute on a modern pc .",
    "the result of a single run is one data file .",
    "each line consists of three columns separated by tabulators : @xmath98 . here",
    "@xmath45 is estimated from measurements of the averaged degree distribution while @xmath99 gives a rough estimation of the statistical error for this quantity and a given degree @xmath86 .",
    "a typical set of data is presented below :    .... 1    0.65392      0.00026 2    0.167699     0.00013 3    0.0686797    8.3e-005 4    0.0352373    5.9e-005 5    0.0205495    4.5e-005 6    0.0131624    3.6e-005 7    0.0089971    3e-005 8    0.006363     2.5e-005 ... ....    where @xmath100 stands for the rest of the file .",
    "the @xmath45 given in the second column are normalized such that @xmath101 .",
    "the program can also be compiled with constant * graphs * set to * 1 * which means that only one graph is generated and @xmath45 is the degree distribution for this particular graph .",
    "this work was partially supported by marie curie host fellowship hpmd - ct-2001 - 00108 , polish state committee for scientific research ( kbn ) grant 2p03b-08225 ( 2003 - 2006 ) and by eu ist center of excellence `` copira '' .",
    "the program _ graphgen _ has been tested for a number of systems . as an example",
    "the results of simulations of a canonical ensemble of pseudographs with @xmath37 nodes , @xmath102 links and the weight function @xmath103 are shown in table [ tab2 ] .",
    "the number of @xmath104 graphs have been generated ( with ` therm=100 ` and ` sweep=50 ` ) .",
    "the comparison of graph frequencies calculated theoretically with those generated by the program shows perfect agreement .",
    "the program package contains the example input file in_graph.dat and the example of output file o_graph.dat . in the input file a graph with @xmath105",
    "is saved in the adjacency matrix format .",
    "the output file consists of a list of 20 graphs , saved in the short adjacency matrix format , generated by the following command :    _ graphgen.exe -g 20 -i in_graph.dat -if 1 -f o_graphs.dat -of 2 _    the program _",
    "degdist _ has also been tested carefully .",
    "the file test.dat contains the degree distribution generated for the set - up given in section [ deg_comp ] as an example .",
    "this was done by compiling and executing _",
    "degdist.exe _ from command line without any arguments .",
    "99 r. albert and a .-",
    "barabsi , rev .",
    "phys . * 74 * , 47 ( 2002 ) .",
    "s. n. dorogovtsev and j. f. f. mendes , adv .",
    "51 * , 1079 ( 2002 ) .",
    "m. e. j. newman , siam review * 45 * , 167 ( 2003 ) .",
    "z. burda , j. d. correia and a. krzywicki , phys .",
    "e * 64 * , 046118 ( 2001 )",
    ". j. berg and m. lssig , phys .",
    "* 89 * , 228701 ( 2002 ) .",
    "s. n. dorogovtsev , j. f. f. mendes and a. n. samukhin , nucl .",
    "b * 666 * , 396 ( 2003 ) .",
    "z. burda , j. jurkiewicz and a. krzywicki , physica a * 344 * , 56 ( 2004 ) .",
    "i. farkas , i. derenyi , g. palla and t. vicsek , springer lect .",
    "notes phys .",
    "* 650 * , 163 ( 2004 ) .",
    "j. park and m. e. j. newman , phys .",
    "e * 70 * , 066117 ( 2004 ) .",
    "goh , b. kahng and d. kim , nucl .",
    "b * 696 * , 351 ( 2004 ) .",
    "l. bogacz , z. burda and b. waclaw , cond - mat/0502124 .",
    "p. erds and a. rnyi , publ .",
    "debrecen * 6 * , 290 ( 1959 ) ; publ .",
    "inst . hung .",
    "sci . * 5 * , 17 ( 1960 ) .",
    "b. bollobs , _ random graphs _ , academic press , new york , 1985 .",
    "r. albert and a .-",
    "barabsi , science * 286 * , 509 ( 1999 ) .    z. burda and a. krzywicki , phys .",
    "e * 67 * , 046118 ( 2003 ) .",
    "m. bogu , r. pastor - satorras and a. vespignani , eur .",
    "j. b * 38 * , 205 ( 2004 ) s. n. dorogovtsev , j. f. f. mendes , a. m. povolotsky and a. n. samukhin , cond - mat/0505193 .",
    "d. p. landau and k. binder , _ monte carlo simulations in statistical physics _ , cambridge university press , cambridge , 2000",
    ". b. a. berg , _ markov chain monte carlo simulations and their statistical analysis _ , world scientific , singapore , 2004 .",
    "n. d. metropolis , a. rosenbluth , m. rosenbluth , a. teller , e. teller , j. chem . phys . * 21 * , 1087 ( 1953 ) .",
    "s. maslov , k. sneppen and a. zaliznyak , cond - mat/0205379 .",
    "nodes and @xmath106 links . positions of vertices in the picture are meaningless .",
    "the only information which matters is connectivity.[example_graph],height=151 ]    , height=188 ]    , height=245 ]",
    ".[probabilties]number of possible labelings of graphs with @xmath37 , @xmath38 , from the canonical ensemble , their weights @xmath22 and normalized probabilities @xmath107 for graphs occurrence : @xmath108 .",
    "[ tab1 ] [ cols=\"^,^,^,^,^,^,^\",options=\"header \" , ]        graph & a & b & c & d & e & f & g + theor . &",
    "@xmath109 & @xmath110 & @xmath111 & @xmath112 & @xmath110 & @xmath113 & @xmath114 + & @xmath115 & @xmath116 & @xmath117 & @xmath118 & @xmath116 & @xmath119 & @xmath120 + simul . & 0.0142(1 ) & 0.0676(1 ) & 0.0414(1 ) & 0.0739(1 ) & 0.0675(1 ) & 0.1709(1 ) & 0.0106(1 ) + graph & h & i & j & k & l & m & n + theor . & @xmath121 & @xmath122 & @xmath123 & @xmath124 & @xmath125 & @xmath126 & @xmath127 + & @xmath128 & @xmath129 & @xmath130 & @xmath131 & @xmath132 & @xmath133 & @xmath134 + simul . & 0.0184(1 ) & 0.0338(1 ) & 0.0621(1 ) & 0.2389(1 ) & 0.0018(1 ) & 0.0427(1 ) & 0.1562(1 ) +"
  ],
  "abstract_text": [
    "<S> we present a program package which generates homogeneous random graphs with probabilities prescribed by the user . </S>",
    "<S> the statistical weight of a labeled graph @xmath0 is given in the form @xmath1 , where @xmath2 is an arbitrary user function and @xmath3 are the degrees of the graph nodes . </S>",
    "<S> the program can be used to generate two types of graphs ( simple graphs and pseudo - graphs ) from three types of ensembles ( micro - canonical , canonical and grand - canonical ) . + </S>",
    "<S> pacs : 89.65.-s , 89.75.fb , 89.75.hc + keywords : random graphs , complex networks , markov process , monte carlo method +    ,    ,    , </S>"
  ]
}