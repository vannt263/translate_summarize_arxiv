{
  "article_text": [
    "as a first deliverable within their scope and work programme , the mobile phone work group of the trusted computing group ( tcg mpwg ) has published a specification  @xcite , which offers new potentials for implementing trust in mobile computing platforms by introducing a new , hardware - based trust anchor for mobile phones and devices .",
    "this trust anchor , called a mobile trusted module ( mtm ) , has properties and features comparable to a trusted platform module ( tpm , see @xcite ) .",
    "concurrently the mpwg issued a much more universal security architecture for mobile phones and devices on a higher abstraction level .",
    "the pertinent specification is called _ tcg mobile reference architecture ( ra ) _  @xcite and abstracts a trusted mobile platform as a set of tamper resistant trusted engines operating on behalf of different stakeholders .",
    "this architecture offers a high degree on flexibility and modularity in design and implementation of the trusted components to all participants in hard- and software development .",
    "an important aspect of the _ tcg mobile reference architecture _ is the potential to virtualise significant parts of a trusted mobile platform as trusted software applications and services .",
    "the trusted execution chain for this rests on the mtm .",
    "the implementation of this chip depends on the security requirements of its specific use - case . for high levels of protection and isolation ,",
    "an mtm could be implemented as a slightly modified trusted platform module ( tpm ) .",
    "this enables cost - effective implementation of new security - critical applications and various innovative business models , in both the mobile and generic computing domain  @xcite .",
    "the present paper discusses the main structural features of the ra , highlighting the capabilities of the mtm as the main functional building block . after this technology review ,",
    "we propose two basic methods for usage of the ra , namely the set - up of a trusted subsystem on a device by a remote owner , and its migration from one device to another .",
    "this paper is organised as follows . in section [ section :",
    "tcg_mpwg_architecture ] , we explore the significant parts of the _ mpwg reference architecture_. it is divided into four parts .",
    "subsection [ section : tcg_mpwg_architectural_overview ] gives an overview of the security architecture , and subsection [ section : mobile_trusted_module ] details the concepts of the proposed architectural approach for an mtm and the requirements to virtualise its functionality , whereby a high security and isolation level is maintained .",
    "furthermore , we propose a model for remote stakeholder take - ownership in [ section : ro_takeownership ] and migration of trusted subsystems in [ section : migration_remote_stakeholder_subsystems ] . in section",
    "[ section : design_trusted_engines ] , we show how such an architecture can be implemented on trustworthy operating platforms .",
    "the tcg mpwg has developed an architecture on a high level of abstraction for a trusted mobile platform , which offers numerous variations for design and implementation . in this section ,",
    "we reflect essential parts of this architecture and an overview of significant platform components in terms of our objective .",
    "a trusted mobile platform is characterised as a set of multiple tamper - resistant engines , each acting on behalf of a different stakeholder .",
    "broadly , such an platform has several major components : trusted engines @xmath0 , trusted services @xmath1 customised by trusted resources @xmath2 .",
    "a general trusted mobile platform is illustrated in figure [ fig : tcg_mpwg_trusted_mopile_platform_architecture ] .",
    "we define a trusted subsystem @xmath3 as a logical unit of a trusted engine together with its interrelated hardware compartment .",
    "a @xmath4 of a stakeholder @xmath5 can formally described by a tuple @xmath6 in each trusted subsystem @xmath4 either a remote or local entity acts as a stakeholder , who is able to configure its own subsystem and define his security policy @xmath7 and system configuration @xmath8 within an isolated and protected environment .",
    "the _ mpwg reference architecture _ specifies the following principal entities : the local stakeholders _ device owner @xmath9 _ and _ user @xmath10 _ ; and the remote stakeholders _ device manufacturer @xmath11 _ , and more general _ remote owners @xmath12 _ ( e.g.  a communication carrier , or service provider ) .",
    "the functionality of a @xmath4 is either based on dedicated resources of an embedded engine @xmath13 , or may be provided by trusted services @xmath14 of external engines .",
    "each subsystem is able to enforce its security policy @xmath7 and subsystem configuration @xmath8 . as a consequence",
    ", the functionality of a trusted subsystem @xmath15 is constrained by the available resources @xmath16 with their derived trusted services @xmath17 , by the offered functionality of external trusted services @xmath14 , by the security policy @xmath7 , and finally the system configuration @xmath8 of an engine s stakeholder .",
    "all internal functions executed inside @xmath18 are isolated from other subsystems by the underlying security layer and is only accessible if a proper service interface is defined and exported .",
    "a @xmath18 relies on the reputation of the stakeholder @xmath5 as basis for that trust .",
    "therefore , each stakeholder issues a security policy @xmath7 and a set of credentials belonging to embedded trusted components of its subsystem @xmath18 .",
    "this policy contains reference measurements ( rim ) , quality assertions and security - critical requirements .      the most important concept within the _ mpwg reference architecture",
    "_ is that of trusted engines .        the purpose of a trusted engine is to provide confidence in all its embedded services ,",
    "which are internally or externally provided by the engine .",
    "it is a protected entity on behalf of a specific stakeholder that has special abilities to manipulate and store data , and to provide evidence of its trustworthiness and the current state of the engine .",
    "figure [ fig : tcg_mpwg_generic_engine ] shows a generic trusted engine . in general , each engine has at least following abilities :    * implement arbitrary software functionalities as trusted and/or normal services , * provide the evidence for its trustworthiness , * report the evidence of its current state , * obtain and use endorsement keys ( ek ) and/or attestation identity keys ( aik ) , * access a set of trusted resources , and * import and/or export services , shielded capabilities and protected functionality .    in order to establish a definite categorisation",
    ", the mpwg differentiates engines according to their functional dispensability .",
    "therefore , an engine is either dedicated to a mandatory ( of @xmath9 or @xmath11 ) or a discretionary domain ( of @xmath9 ) . engines inside a mandatory domain are permanently located on a trusted platform and hold security - critical and essential functionality .",
    "all essential services of a trusted mobile platform should be located inside the mandatory domain , which does _ not permit a local stakeholder to remove a remote owner from the engine_. mandatory engines have access to a _ mobile remote owner trusted module ( mrtm ) _ to guarantee that a valid and trustworthy engine state is always present .",
    "non - essential engines and services are replaceable by the device owner @xmath9 and should be located inside the discretionary domain .",
    "engines inside the discretionary domain are controlled by the device owner @xmath9 .",
    "discretionary engines are required to be supported by a _",
    "mobile local owner trusted module ( mltm)_.      as illustrated in figure [ fig : tcg_mpwg_generic_engine ] , an internal trusted service has access to several trusted resources .",
    "the tcg calls these resources _ root - of - trusts ( rot ) _ representing the trusted components acting on base of the trusted execution chain and providing functionality for measurement , storing , reporting , verification and enforcement that affect the trustworthiness of the platform .",
    "the following rots are defined for the mobile domain :    * root of trust for storage ( rts ) , * root of trust for reporting ( rtr ) , * root of trust for measurement ( rtm ) , * root of trust for verification ( rtv ) , and * root of trust for enforcement ( rte )    each rot vouches its trustworthiness either directly by supplied secrets ( ek , aik ) and associated credentials , which are only accessible by authenticated subjects of the stakeholder , or indirectly by measurements of other trusted resources .",
    "these resources are only mutable by authorised entities of a stakeholder .    in this paper",
    ", we group several logically self - contained rots to simplify the presentation of interfaces and the communication layer . in a typical arrangement ,",
    "the rts and rtr represent one unit , while the rtm and rtv build another unit within an @xmath19 .",
    "however , note that the rtv and the rtm depend on protected storage mechanisms , which are provided by the rts .",
    "thus , it is also plausible to implement all rots together as a common unit within an engine .",
    "* rts / rtr * are the trusted resources that are responsible for secure storage and reliable reporting of information about the state of trusted mobile platform .",
    "an rts provide pcrs and protected storage for an engine and stores the measurements made by the rtm , cryptographic keys , and security sensitive data .",
    "an rtr signs the measurements with cryptographic signature keys of @xmath20 .",
    "* rtm / rtv * in general , an rtm is a reliable instance to measure software components and provide evidence of the current state of a trusted engine and its embedded services . in the mobile domain , to avoid communication costs , this functionality is extended by a local verifier , which checks the measurements against a given _ reference integrity metrics _ ( rim ) .",
    "this process can be done instantly as the measurements are performed employing a combination of rtm and rtv .",
    "figure [ fig : tcg_mpwg_measurement_and_verification ] depicts such a _",
    "measure@xmath21verify@xmath21extend _ process .",
    "an * rte * is required if an engine uses allocated resources and services . in this case , such rot acts as a trusted boot loader and ensures the availability of all allocated trusted resources and services within that trusted subsystem .",
    "a trusted engine integrates all functionality by customising available platform resources as software services .",
    "such a service offers computation , storage , or communication channels to other internal or external services and applications based on dedicated or allocated resources .",
    "the mpwg categorises them into : trusted , normal , and measured services .",
    "a trusted service customises trusted resources .",
    "thus , a trusted service is implicitly supplied with an @xmath22 or @xmath23 in order to attest its trustworthiness .",
    "trusted services are intended to provide reliable measurements of their current state and to provide evidence of the state of other normal services or resources .",
    "normal services are customising normal resources and implement functionality , but are not able to provide evidence of their trustworthiness by own capabilities .",
    "however , normal services can access internal trusted services to use their provided functionality .",
    "therefore , an internal normal services is able to vouch its trustworthiness by associated integrity metrics that have been measured by a trusted service .      the generic term _",
    "mobile trusted module ( mtm ) _ refers to a dedicated hardware - based trust - anchor .",
    "it is typically composed of an rts and rtr and has characteristics comparable to a tpm .",
    "according to their design objective the mpwg distinguishes between mrtm and mltm .",
    "both must support a subset of tpm commands as specified in  @xcite . additionally , an mrtm has to support a set of commands to enable local verification and specific mobile device functionality .",
    "the _ tcg mpwg reference architecture _ does not exclude to utilise a tpm v1.2 ( or even a tpm v1.1 ) as an mtm , if an appropriate interface consisting of a set of commands conforming to the mpwg specification and associated data structures are provided .",
    "although it is possible to implement this architecture upon a standard tpm , we here focus on a more sophisticated solution based on a trustworthy computing platform such as emscb / turaya  @xcite . in this context , we expect three different solutions for isolation , key management and protection of @xmath19 .",
    "a * standard tpm - based model * uses a non - modified standard tpm to build the trusted computing base .",
    "the secret keys are stored into a single key - hierarchy on behalf of @xmath9 as specified in @xcite . in this case ,",
    "an adversary or malicious local owner may be able to access the secret keys of a remote stakeholder and take control of a remote owner compartment .",
    "a @xmath9 can also disable the whole mtm or corrupt mandatory engines of remote stakeholders .",
    "a * software - based mtm - emulation model * uses a software - based allocated @xmath24-emulation with an isolated key - hierarchy .",
    "all sensitive and security - critical , such as @xmath22 or @xmath25 , are only protected by software mechanisms outside of the tamper - resistant environment of a dedicated mtm @xcite .    *",
    "generic mtm - based model supporting multiple stakeholders and virtual mtms . * in order to circumvent resulting drawbacks and mitigate attacks , we favour a solution with a higher level of security .",
    "for this reason , we adopt the proposed secure co - processor variant of  @xcite and describe a generic mtm with support for multiple stakeholder environments .        in a cost - efficient scenario ,",
    "the trusted mobile platform is implementable based on a single generic mtm and several virtualised mtms for each trusted engine .",
    "hence , at least one dedicated mtm has to be available and additionally a unique vmtm has to be instantiated in each trusted subsystem @xmath26 . in such case ,",
    "a physically bounded mtm in the platform acts as a master trust anchor and offers mrtm and mltm functionality with respect to its specific use case .",
    "a trusted software layer offers a _ vmtm proxy service _ to all embedded trusted engines @xmath27 .",
    "the main task of this service is to route mtm commands from a @xmath27 to its dedicated instance @xmath28 .",
    "the advantage is that all security - critical mtm commands are tunnelled to @xmath28 and are executed within the protected environment of the dedicated mtm .",
    "figure [ fig : tcg_mpwg_vmtm_virtualization ] illustrates the architecture of a generic mtm with isolated vmtm compartments .",
    "this architecture requires a slightly modified tpm .",
    "mainly , we add a trusted component , the _ vmtm instance manager _ , which is responsible to separate vmtm instances from each other .",
    "this includes administration , isolated execution , memory management and access control for each stakeholder compartment .",
    "thus , a vmtm instance is able to hold an autonomous and hardware - protected key hierarchy to store its secrets and protect the execution of security - critical data ( e.g.  signature and encryption algorithms ) .",
    "the take - ownership operation establishes the trust relationship between a stakeholder and trusted mobile platform .",
    "currently , the _ mpwg reference architecture _ does not define how a remote owner is to perform this initial setup and take - ownership of its @xmath29 .",
    "hence we propose a method in this section .",
    "the main idea behind our procedure is to install and instantiate a blank trusted subsystem @xmath30 containing a pristine engine @xmath31 with a set of generic trusted services @xmath32 .",
    "this subsystem is then certified by a remote owner , if the platform is able to provide evidence of its pristine configuration and policy conformance with respect to @xmath12 .",
    "figure  [ fig : tcg_mpwg_vmtm_takeownership_sequence ] illustrates this process , which we now descirbe .        * platform and protocol precondition . * in a preliminary stage , the trusted mobile platform has carried out the boot process and has loaded the trusted computing base and the engine @xmath33 with its trusted services .",
    "the trusted platform has checked that the installed hardware and running software are in a trustworthy state and configuration .",
    "it is able to report and attest this state , if challenged by an authorised entity .",
    "* remote stakeholder take - ownership protocol .",
    "* in the first phase , the trusted engine @xmath33 carries out a take - ownership preparation for the remote stakeholder .",
    "a blank engine @xmath31 is installed and booted by the @xmath34 , and a clean @xmath35 instance is activated inside the dedicated @xmath24 .",
    "an initial setup prepares the pristine engine @xmath31 .",
    "a endorsement key - pair @xmath36 is generated within @xmath35 with a corresponding certificate @xmath37 and @xmath38 . ] .",
    "next , @xmath31 performs an attestation of its current state .",
    "the attestation can be done by the local verifier @xmath39 inside the @xmath40 using @xmath41 certificates of the remote stakeholder @xmath12 .",
    "if no suitable @xmath41 and corresponding @xmath41-certificate are available for an pristine engine , alternatively a remote attestation with an associated privacy ca is also possible .",
    "@xmath31 creates a symmetric key @xmath42 and encrypts the public portion of the endorsement key @xmath36 , the corresponding certificate @xmath37 , attestation and purpose information .",
    "next , @xmath31 encrypts @xmath42 with a public key @xmath43 and sends both messages to the remote owner . after reception by the remote stakeholder",
    ", the messages are decrypted using the private portion of key @xmath43 .",
    "we assume that this key is either available through a protected communication channel or pre - installed by the device manufacturer .    in a next step ,",
    "@xmath12 verifies the attestation data and checks the intended purpose of @xmath31 .",
    "if the engine and device attestation data is valid and the intended purpose is acceptable , the @xmath12 generates an individual security policy @xmath44 .",
    "the @xmath12 signs the @xmath37 and creates @xmath41 certificates for local verification of a complete @xmath19 .",
    "furthermore , @xmath12 creates a setup configuration @xmath45 , which enforces the engine to individualise its services and complete its configuration with respect to the intended purpose and given security policy . in this step , @xmath12 encrypts the messages with the public portion of the @xmath46 and transfers this package to the engine @xmath47 .",
    "finally , the trusted engine @xmath31 decrypts the received package and installs it inside the @xmath48 and thus completes its instantiation .      if a stakeholder wants to move a source @xmath49 to another mtm - enabled platform , for instance to port user credentials from device to device , all security - critical information including the storage root key ( srk ) has to be migrated to the target @xmath50 . in our scenario",
    ", we assume the same remote owner ( e.g.  mobile network operator ) on both subsystems @xmath51 and @xmath52 .",
    "to be able to securely migrate the srk , we suggest a modification of the current mpwg specification to allow _ inter - stakeholder - migration _ of a complete isolated key hierarchy . thus , an isolated key hierarchy is ( 1 ) migratable between environments of identical stakeholders , ( 2 ) if and only if an entitling security policy on both platforms exists .",
    "the advantage of migration between identical stakeholder subsystems is that the migration process does nt require a trusted third party .",
    "we only involve the owner in combination with local verification mechanisms of the @xmath53 to migrate the trusted subsystem ( including the srk ) to another platform .",
    "this enables for instance direct , device - to - device porting of credentials , e.g.  using short - range communication .",
    "we here propose a complete , multilateral and secure migration protocol , which is illustrated in figure  [ fig : tcg_mpwg_vmtm_migration_protocol ]",
    ".    * platform and protocol precondition . * similar to section [ section : ro_takeownership ] , the trusted mobile platform has carried out the same initial steps as mentioned above .",
    "furthermore , the remote owner has performed an remote take - ownership procedure as described in [ section : ro_takeownership ] .",
    "* trusted subsystem migration protocol . * at the beginning of the migration protocol , the device owner @xmath54 of the source platform @xmath55 initialises the migration procedure and requests an appropriate migration service of @xmath51 .",
    "next , the trusted platform @xmath55 is instructed by @xmath53 to establish a secure channel to the target platform @xmath56 . after the connection is available",
    ", @xmath51 activates the corresponding migration service of @xmath52 to perform the import procedure .",
    "thereupon , the target subsystem @xmath50 performs a local verification of @xmath51 .",
    "if revoked , it replies with an error message and halts the protocol .",
    "otherwise @xmath57 requests an confirmation from the local owner @xmath58 .",
    "next , the target subsystem @xmath52 generates a nonce @xmath59 . in order to provide evidence of its trustworthiness",
    ", @xmath52 sends all necessary information to the source subsystem @xmath51 .",
    "this includes the current state @xmath60 , a certificate of @xmath52 , security policy @xmath61 and the nonce @xmath59 .",
    "having received the target subsystem s message , @xmath51 verifies the state of @xmath52 .",
    "if the target system is in a trustworthy state and holds an acceptable security policy and system configuration , the current state of @xmath51 is locked to nonce @xmath59 .    the @xmath51 generates a symmetric migration key @xmath62 , serialises its instance and encrypts it with the migration key , which is bound to an acceptable configuration of @xmath52 .",
    "next , the key - blob and the encrypted instance are sent to the destination @xmath52 . in particular , this includes the whole isolated key - hierarchy @xmath63 with @xmath64 , the security policy @xmath65 , and the required subsystem configuration @xmath66 .    finally , the target subsystem @xmath52 decrypts the received blob and uses @xmath67 as its own @xmath25 .",
    "the subsystem verifies the obtained security policy @xmath65 and the subsystem configuration @xmath66 . with this information",
    ", @xmath52 rebuilds the internal structure of the source .",
    "the source system should then be notified of the success of migration and ultimately delete the migrated key hierarchy ( or even do it before sending the migration package as indicated for simplicity in figure  [ fig : tcg_mpwg_vmtm_migration_protocol ] ) .",
    "otherwise one obtains replicated trusted subsystems , by themselves indistinguishable to the remote owner . but",
    "this may depend on the policies to be enforced in the particular use case .",
    "a prototypical implementation of the trusted engines and the specified trusted services was realised as an extension to the existing emscb / turaya computing platform .",
    "turaya is an implementation of the emscb security architecture .",
    "it provides fundamental security mechanisms and a protected and isolated execution environment , which meet the requirements of the _ mpwg reference architecture _  @xcite .",
    "figure  [ fig : mtm_vsim_emscb_platform ] illustrates our model , in which a hypervisor / microkernel executes a legacy operating system in coexistence with a running instance of the emscb - based security architecture .",
    "the latter controls a virtual machine with several trusted engines and services compliant to the mpwg requirements  @xcite . in the following paragraphs",
    ", we outline the significant platform layers concerning our approach .",
    "the * hardware layer * of our model includes a generic mtm as described in section  [ section : mobile_trusted_module ] , in addition to conventional hardware components .",
    "this mtm acts as a dedicated master trust anchor for the complete trusted mobile platform .",
    "the * virtualisation layer * provides generic hardware abstraction , between the physical hardware of a trusted mobile platform and the _ trusted software layer _ below .",
    "the emscb project supports microkernels of the l4-family  @xcite such as hypervisors  @xcite . in general , all solutions provide mechanisms for resource management , inter - process - communication ( ipc ) , virtual machines , memory management and scheduling . in our specific case ,",
    "the virtualisation layer includes also a fully functional device driver for a dedicated generic mtm .",
    "furthermore , it is responsible for instantiation of both the trusted software layer and the legacy operating system .",
    "the * trusted software layer * provides security functionality and is responsible for isolation of embedded applications and software compartments .",
    "it also implements the _ vmtm proxy service _ as described in section  [ section : mobile_trusted_module ] .",
    "currently , emscb / turaya provide an excellent foundation by its security services ( trust manager , compartment manager , storage manager ) , which are required by the rtr and rtv , protected storage and trusted engines management agent of @xmath68 .",
    "therefore , it is reasonable to build the significant parts of the device manufacturer engine @xmath68 within this layer .    trusted engines @xmath27 within the * application layer",
    "* are implemented as parallel and isolated l4linux compartments  @xcite on behalf of different stakeholders .",
    "each compartment has access to its vmtm instance through an embedded client - side device driver .",
    "this driver constrains the functionality with respect to its specific use case ( mrtlm or mltm ) .",
    "furthermore , @xmath27 has an @xmath69 , which is responsible for building all required allocated trusted resources and services depending of its specific system configuration @xmath70 and security policy @xmath71 .",
    "we have introduced the trusted engines and mtms in terms of our objective . in this context , we have exposed significant parts of the mpwg reference architecture and how it can be implemented on a ( very slightly modified ) tpm trust - anchor .",
    "we have shown how to deploy trusted virtualised compartments on devices and exhibited basic operations required in the mobile domain , such as migration .    using a vmtm in lieu of a subscriber identity module ( sim )",
    "as a trusted and protected software allows expansion to a much wider field of authentication and identification management systems even on standard pc platforms  @xcite .",
    "supporting online transactions by authentication via credentials held in a vmtm may be one attractive use case . however , there are some privacy and security challenges associated with this implementation on a desktop computer , which require further research",
    ". finally , replacing sims / usims by multi - purpose vsims may be attractive even for genuine mobile devices .            trusted computing group , _ tcg mobile reference architecture_. specification version 1.0 , revision 1 . 12 june 2007 .",
    "nicolai kuntze and andreas  u. schmidt .",
    "transitive trust in mobile scenarios . in gnter",
    "mller , editor , _ proceedings of the international conference on emerging trends in information and communication security ( etrics 2006 ) _ , volume 3995 of _ lecture notes in computer science ( lncs ) _ , pages 7385 .",
    "springer - verlag , 2006 .",
    "kuntze , n. , schmidt , a.u .",
    ": trusted computing in mobile action . in venter , h.s .",
    ", eloff , j.h.p . , labuschagne , l. , eloff , m.m .",
    ", eds . : proceedings of the information security south africa ( issa ) conference ( 2006 )    nicolai kuntze and andreas  u. schmidt . trusted ticket systems and applications . in _ to appear in : new approaches for security , privacy , and trust in complex systems .",
    "proceedings of the ifip sec2007 .",
    "sandton , south africa 14 - 16 may 2007_. springer - verlag , 2007 ."
  ],
  "abstract_text": [
    "<S> in its recently published _ tcg mobile reference architecture _ , the tcg mobile phone work group specifies a new concept to enable trust into future mobile devices . for this purpose </S>",
    "<S> , the tcg devises a trusted mobile platform as a set of trusted engines on behalf of different stakeholders supported by a physical trust - anchor . in this paper , we present our perception on this emerging specification . </S>",
    "<S> we propose an approach for the practical design and implementation of this concept and how to deploy it to a trustworthy operating platform . </S>",
    "<S> in particular we propose a method for the take - ownership of a device by the user and the migration ( i.e. , portability ) of user credentials between devices . </S>"
  ]
}