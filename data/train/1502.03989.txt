{
  "article_text": [
    "secluded path and secluded steiner tree problems were introduced in chechik et al . in @xcite . in the secluded path problem , for given vertices @xmath15 and @xmath16 of a graph @xmath1 , the task is to find an @xmath17-path with the minimum _ exposure _ , i.e. a path @xmath18 such that the number of vertices from @xmath18 plus the number of vertices of @xmath1 adjacent to vertices of @xmath18 is minimized .",
    "the name secluded comes from the setting where one wants to transfer a confident information over a path in a network which can be intercepted either while passing through a vertex of the path or from some adjacent vertex .",
    "thus the problem is to select a secluded path minimizing the risk of interception of the information . when instead of connecting two vertices one needs to connect a set of terminals , we arrive naturally to the secluded steiner tree .",
    "more precisely , secluded steiner tree is the following problem .",
    "if @xmath19 for each @xmath20 and @xmath21 , then we have an instance of secluded steiner tree without costs ; respectively , we omit @xmath7 and @xmath4 whenever we consider such instances .",
    "clearly , it can be assumed that @xmath22 is a tree , and thus the problem can be seen as a variant of the classical steiner tree problem . for the special case @xmath23 , we call the problem secluded path .    * previous work . *",
    "the study of the secluded connectivity was initiated by chechik et al .",
    "@xcite who showed that the decision version of secluded path without costs is @xmath24-complete .",
    "moreover , for the optimization version of the problem , it is hard to approximate within a factor of @xmath25 , @xmath26 is the number of vertices in the input graph , for any @xmath27 ( under an appropriate complexity assumption ) @xcite .",
    "chechik et al .",
    "@xcite also provided several approximation and parameterized algorithms for secluded path and secluded steiner tree .",
    "interestingly , when there are no costs , secluded path is solvable in time @xmath28 , where @xmath29 is the maximum vertex degree and and thus is @xmath0 being parameterized by @xmath29 .",
    "chechik et al .",
    "@xcite also showed that when the treewidth of the input graph does not exceed @xmath16 , then the secluded steiner tree problem is solvable in time @xmath30 , where @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 .",
    "johnson et al .",
    "@xcite obtained several approximation results for secluded path and showed that the problem with costs is @xmath24-hard for subcubic graphs improving the previous result of chechik et al .",
    "@xcite for graphs of maximum degree 4 .",
    "the problems related to secluded path and connectivity under different names were considered by several authors .",
    "motivated by secure communications in wireless ad hoc networks , gao et al.@xcite introduced the very similar notion of the thinnest path .",
    "the motivation of gilbers @xcite , who introduced the problem under the name of the minimum witness path , came from the study of art gallery problems .    * our results . * in this paper we initiate the systematic study of both problems from the parameterized complexity perspective and obtain the following results . in section",
    "[ sec : fpt - k ] , we show that secluded path and secluded steiner tree are fpt when parameterized by the size of the solution @xmath3 by giving algorithms of running time @xmath31 and @xmath8 , where @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 , correspondingly .",
    "we consider the  above guarantee \" parameterizations of both problems in section  [ sec : fpt - above ] . recall that if @xmath32 are vertices of a graph @xmath1 , then a connected subgraph @xmath22 of @xmath1 of minimum size such that @xmath33 is called a _ steiner tree _ for the terminals @xmath32 .",
    "if @xmath23 , then a steiner tree is a shortest @xmath34-path . clearly , if @xmath11 is the size ( the number of vertices ) of a steiner tree , then for any connected subgraph @xmath22 of @xmath1 with @xmath35 , @xmath36|\\geq \\ell$ ]",
    "recall that the steiner tree problem is well known to be @xmath24-complete as it is included in the famous karp s list of 21 @xmath24-complete problems  @xcite , but in 1971 dreyfus and wagner  @xcite proved that the problem can be solved in time @xmath37 , i.e. , it is @xmath0  when parameterized by the number of terminals .",
    "the currently best @xmath0-algorithms for steiner tree running in time @xmath38 are given by bjrklund et al .",
    "@xcite and nederlof  @xcite ( the first algorithm demands exponential in @xmath10 space and the latter uses polynomial space ) . in section  [ sec : fpt - above ] we show that secluded path and secluded steiner tree are @xmath0 when the problems are parameterized by @xmath9 , where @xmath12 . from the other side , we show that the problem is co-@xmath13$]-hard when parameterized by @xmath14 only .    in section  [ sec : struct ]",
    ", we provide a thorough study of the kernelization of the problem from the structural paramaterization perspective .",
    "we consider parameterizations by the treewidth , size of the solution , maximum degree and the size of a vertex cover of the input graph .",
    "we show that it is unlikely that secluded path ( even without costs ) parameterized by the solution size , the treewidth and the maximum degree of the input graph , admits a polynomial kernel .",
    "in particular , this complements the @xmath0 algorithmic findings of chechik et al .",
    "@xcite for graphs of bounded treewdith and of bounded maximum vertex degree .",
    "the same holds for the  above guarantee \" parameterization instead the solution size as well . on the other hand",
    ", we show that secluded steiner tree has a polynomial kernel when parameterized by @xmath3 and the vertex cover number of the input graph .",
    "interestingly , when we parameterize only by the vertex cover number , again , we show that most likely the problem does not admit a polynomial kernel .",
    "finally , we refine the algorithm on graphs of bounded treewidth of chechik et al .  @xcite by showing that secluded steiner treewithout costs can be solved by a randomized algorithm in time that single - exponentially depends on treewidth by applying the count & color technique of cygan et al . @xcite and further observe that for the general variant of the problem with costs , the same count & color technique can be used as well and also a single - exponential deterministic algorithm can be obtained by making use the representative set technique developed by fomin et al .  @xcite .",
    "we consider only finite undirected graphs without loops or multiple edges .",
    "the vertex set of a graph @xmath1 is denoted by @xmath39 and the edge set is denoted by @xmath40 . throughout the paper we typically use @xmath26 and @xmath41 to denote the number of vertices and edges respectively .    for a set of vertices",
    "@xmath42 , @xmath43 $ ] denotes the subgraph of @xmath1 induced by @xmath44 . for a vertex @xmath45 ,",
    "we denote by @xmath46 its _ ( open ) neighborhood _ , that is , the set of vertices which are adjacent to @xmath45 , and for a set @xmath42 , @xmath47 .",
    "the _ closed neighborhood _",
    "respectively , @xmath49=n_g(u)\\cup u$ ] . for a set @xmath42 , @xmath50 denotes the subgraph of @xmath1 induced by @xmath51 . if @xmath52 , we write @xmath53 instead of @xmath54 .",
    "the _ degree _ of a vertex @xmath45 is denoted by @xmath55 .",
    "we say that a vertex @xmath45 is _ pendant _ if @xmath56",
    ". we can omit subscripts if it does not create confusion .",
    "a vertex @xmath45 of a connected graph @xmath1 with at least 2 vertices is a _ cut vertex _ if @xmath53 is disconnected .",
    "a connected graph @xmath1 is _ biconnected _ if it has at least 2 vertices and has no cut vertices .",
    "block _ of a connected graph @xmath1 is an inclusion - maximal biconnected subgraph of @xmath1 .",
    "a block is _ trivial _ if it has exactly 2 vertices .",
    "we say that vertex set @xmath57 is connected if @xmath58 $ ] is connected .",
    "a _ tree decomposition _ of a graph @xmath1 is a pair @xmath59 where @xmath22 is a tree and @xmath60 is a collection of subsets ( called _ bags _ ) of @xmath39 such that    * @xmath61 , * for each edge @xmath62 , @xmath63 for some @xmath64 , and * for each @xmath65 the set @xmath66 induces a connected subtree of @xmath22 .",
    "the _ width _ of a tree decomposition @xmath67 is @xmath68 .",
    "the _ treewidth _ of a graph @xmath1 ( denoted as @xmath69 ) is the minimum width over all tree decompositions of @xmath1 .",
    "a set @xmath42 is a _ vertex cover _ of @xmath1 if for any edge @xmath70 of @xmath1 , @xmath71 or @xmath72 .",
    "the _ vertex cover number _",
    "@xmath73 is the size of a minimum vertex cover .",
    "parameterized complexity is a two dimensional framework for studying the computational complexity of a problem .",
    "one dimension is the input size @xmath26 and another one is a parameter @xmath3 .",
    "it is said that a problem is _ fixed parameter tractable _ ( or @xmath0 ) , if it can be solved in time @xmath74 for some function @xmath75 .",
    "kernelization _ for a parameterized problem is a polynomial algorithm that maps each instance @xmath76 with the input @xmath77 and the parameter @xmath3 to an instance @xmath78 such that i ) @xmath76 is a yes - instance if and only if @xmath78 is a yes - instance of the problem , and ii ) the size of @xmath79 is bounded by @xmath80 for a computable function @xmath75 .",
    "the output @xmath78 is called a _ kernel_. the function @xmath75 is said to be a _ size _ of a kernel . respectively , a kernel is _ polynomial _ if @xmath75 is polynomial . while a parameterized problem is @xmath0",
    "if and only if it has a kernel , it is widely believed that not all @xmath0 problems have polynomial kernels .",
    "in particular , bodlaender et al .",
    "@xcite introduced techniques that allow to show that a parameterized problem has no polynomial kernel unless @xmath81 .",
    "we refer to the book of downey and fellows  @xcite , for detailed introductions to parameterized complexity .",
    "we use randomized algorithms for our problems . recall that a _ monte carlo algorithm _ is a randomized algorithm whose running time is deterministic , but whose output may be incorrect with a certain ( typically small ) probability .",
    "a monte - carlo algorithm is _ true - biased _",
    "( _ false - biased _ respectively ) if it always returns a correct answer when it returns a yes - answer ( a no - answer respectively ) .",
    "in this section we consider secluded path and secluded steiner tree problems parameterized by the size of the solution , i.e. , by @xmath3 .",
    "we also show how these parameterized algorithms can be used to design faster exact exponential algorithms .",
    "we start with secluded path .",
    "[ lemma : normenum ] secluded path is solvable in time @xmath82 , where @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 .    let us observe first that if there is an optimal secluded path , then there is an optimal secluded induced path  shortcutting a path can not increase the size of its neighbourhood .",
    "we give an algorithm that enumerates all induced paths @xmath18 from @xmath83 to @xmath45 such that @xmath84|\\leq k$ ] in time @xmath85 for a graph @xmath1 with @xmath26 vertices .",
    "then picking up a secluded path of minimum cost will complete the proof .",
    "the algorithm is based on the standard branching ideas . if @xmath86|>k$ ] the algorithm reports that no such path exist and stops . if @xmath86|\\leq k$ ] and @xmath87 the algorithm outputs the path consisting of the single vertex  @xmath83 .",
    "otherwise a path from @xmath83 to @xmath45 must go through one of the neighbors of  @xmath83 .",
    "since we are looking for an induced path it must never return to a vertex from @xmath88 $ ] .",
    "this allows us to branch as follows . for each @xmath89",
    ", we check recursively whether the graph @xmath90 ) \\cup \\{w\\}$ ] contains an induced path @xmath91 from @xmath92 to @xmath45 such that @xmath93|\\leq k-|n_g(u)|$ ] .",
    "this way we get the following recurrence on the number of nodes @xmath94 in the corresponding recursion tree .",
    "if @xmath87 , then there is only one path from @xmath83 to @xmath45 , and @xmath95 . if @xmath96 , then @xmath97 , where @xmath98",
    "this is a well known recurrence implying that @xmath99 ( see , e.g. , the analysis of the algorithm enumerating all maximal independent sets in chapter  1 of @xcite ) .",
    "note that we spend only a linear time @xmath100 in each vertex of the recursion tree . since the length of each path",
    "@xmath18 can be computed in time @xmath101 , we can find a path of minimum cost it time @xmath102 .",
    "therefore , the total running time is @xmath82 .    for secluded steiner tree",
    "we prove the following theorem .",
    "[ thm : sec_tree ] secluded steiner tree can be solved in time @xmath8 , where @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 .",
    "the following proposition from @xcite will be useful for us .",
    "[ le : connectedcomp ] let @xmath1 be a graph . for every @xmath103 , and @xmath104 , the number of connected vertex subsets @xmath105 such that    * @xmath106 , * @xmath107 , and * @xmath108 ,    is at most @xmath109 .",
    "moreover , all such subsets can be enumerated in time @xmath110 .    by proposition",
    "[ le : connectedcomp ] , the number of connected sets @xmath22 of size @xmath111 containing @xmath112 and such that @xmath113|=b+f$ ] , does not exceed @xmath109 . since @xmath114 and there are at most @xmath115 choices for the values of @xmath111 and @xmath75 , we have that the number of such sets does not exceed @xmath116 . by proposition",
    "[ le : connectedcomp ] , all such sets @xmath117 $ ] can be enumerated in time @xmath118 . while enumerating sets @xmath117 $ ] , we disregard sets not containing all terminal vertices . finally , we select the set of minimum cost .",
    "parameterized algorithms for secluded path and secluded steiner tree combined with a brute - force procedure imply the following exact exponential algorithms for the problems .",
    "[ thm : exact_secluded ] on an @xmath26-vertex graph , secluded path is solvable in time @xmath119 and secluded steiner tree is solvable in time @xmath120 , where @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 .    by theorem  [ lemma : normenum ] ,",
    "secluded path is solvable in time @xmath121 . on the other hand",
    ", we also can solve the problem by the brute - force procedure checking for every set @xmath57 of size @xmath122 , whether @xmath123 and @xmath124 .",
    "notice that @xmath125 contains the closed neighborhood of a secluded path if and only if @xmath126 $ ] is connected and contains both terminal vertices , and these conditions can be checked in polynomial time .",
    "the brute - force procedure takes time @xmath127 .",
    "let us note that for @xmath128 , @xmath129 .",
    "thus for all integers @xmath130 between @xmath131 and @xmath26 , we enumerate sets of size @xmath122 , while for all integers @xmath130 between @xmath132 and @xmath131 we use theorem  [ lemma : normenum ] to find if there is a solution of size at most @xmath130 .",
    "the running time of the algorithm is dominated by @xmath133 .",
    "similarly , we use parameterized time @xmath134 algorithm from theorem  [ thm : sec_tree ] for secluded steiner tree and balance it with the brute - force procedure checking for every set @xmath57 of size @xmath122 , whether @xmath123 is the closed neighbourhood of a secluded steiner tree @xmath22 . for each such set @xmath57 , we check in polynomial time whether @xmath126 $ ] is connected and contains all terminal vertices . the brute - force runs in time @xmath127 .    for @xmath135 , we have that @xmath136 .",
    "thus for all integers @xmath130 between @xmath137 and @xmath26 , we enumerate sets of size @xmath122 , while for all integers @xmath130 between @xmath132 and @xmath137 we use theorem  [ thm : sec_tree ] to find if there is a solution of size at most @xmath130 .",
    "the running time of this algorithm is @xmath138 .",
    "in this section we show that secluded path and secluded steiner tree are @xmath0 when the problems are parameterized by @xmath9 where @xmath12 and @xmath11 is the size of a steiner tree for @xmath139 .",
    "[ lemma : pathaboveguarantee ] secluded path is solvable in time @xmath140 , where @xmath11 is the length of a shortest @xmath141-path for @xmath142 and @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 .",
    "the proof of this theorem is very similar to the proof of theorem  [ lemma : normenum ] . for an integer @xmath143 , we enumerate in the graph @xmath1 all induced paths @xmath18 from @xmath83 to @xmath45 of length at most @xmath144 such that @xmath145 .",
    "the only difference with theorem  [ lemma : normenum ] is that this time we bound the running time of the algorithm as a function of @xmath146 .    if @xmath147 the algorithm reports that no such path exist and stops .",
    "if @xmath86|\\leq   k - h$ ] and @xmath87 the algorithm outputs the path consisting of the single vertex  @xmath83 . otherwise , we branch by checking recursively for each @xmath89 , whether the graph @xmath90 ) \\cup \\{w\\}$ ] contains an induced path @xmath91 from @xmath92 to @xmath45 of length at most @xmath144 such that @xmath148 . this way we get the following recurrence on the number of nodes @xmath149 in the corresponding recursion tree .",
    "if @xmath87 , then there is only one path from @xmath83 to @xmath45 , and @xmath150 . if @xmath96 , then @xmath151 where @xmath98 .",
    "it is easy to show , that @xmath152 .",
    "we need some structural properties of solutions of secluded steiner tree .",
    "we start with an auxiliary lemma bounding the number of vertices of degree at least three in @xmath153 as well as the number of their neighbors .",
    "[ lem : big - degree ] let @xmath1 be a connected graph and @xmath154 , @xmath155 .",
    "let @xmath153 be an inclusion minimal induced subgraph of @xmath1 such that @xmath156 and @xmath157 .",
    "then    * @xmath158 , and * @xmath159 .",
    "let @xmath160 be the set of blocks of @xmath153 .",
    "consider bipartite graph @xmath22 with the bipartition @xmath161 of the vertex such that @xmath162 and @xmath163 are adjacent if and only if @xmath45 is a vertex of @xmath111 .",
    "notice that @xmath22 is a tree .",
    "recall that the _ vertex dissolution _ operation for a vertex @xmath45 of degree 2 deletes @xmath45 together with incident edges and replaces them by the edge joining the neighbors of @xmath45 .",
    "denote by @xmath164 the tree obtained from @xmath22 by consequent dissolving all vertices of @xmath22 of degree 2 that are not in @xmath139 .",
    "denote by @xmath165 the set of leaves of @xmath22 . by the minimality of @xmath153 , @xmath166 .",
    "let @xmath167 , and let @xmath168 be the number of degree 2 vertices and @xmath169 be the number of vertices of degree at least 3 in @xmath22 . clearly , @xmath170 . then @xmath171 .",
    "we have that @xmath172 and @xmath173 .",
    "observe that if @xmath174 for @xmath175 , then @xmath45 is a cut vertex of @xmath153 and either @xmath45 is included in at least 3 blocks of @xmath153 , or @xmath45 is in a block of size at least 3 . in the second case",
    ", @xmath45 is adjacent to a vertex @xmath163 of @xmath22 with degree at least 3 .",
    "it implies that @xmath176 and we have ( i ) . to show ( ii ) , observe that @xmath177 .",
    "the following lemma provides a bound on the number of vertices of a tree that have neighbors outside the tree .",
    "[ lem : adj ] let @xmath1 be a connected graph and @xmath154 , @xmath155 .",
    "let @xmath11 be the size of a steiner tree for @xmath139 and @xmath14 be a positive integer .",
    "suppose that @xmath22 is an inclusion minimal subgraph of @xmath1 such that @xmath22 is a tree spanning @xmath139 and @xmath36|\\leq \\ell+r$ ] . then for @xmath178 , @xmath179 .",
    "denote by @xmath165 the set of leaves of @xmath22 and by @xmath180 the set of vertices of degree at least 3 in @xmath22 .",
    "clearly , @xmath166 .",
    "we select a leaf @xmath181 of @xmath22 as the _ root _ of @xmath22 .",
    "the selection of a root defines a parent - child relation on @xmath22 . for each @xmath182 ,",
    "denote by @xmath183 the vertex in @xmath184 at minimum distance to @xmath181 in @xmath22 .",
    "let @xmath185 .",
    "for a vertex @xmath182 and @xmath186 , let @xmath187 be the parent of @xmath45 in @xmath22 .",
    "let @xmath188 and @xmath189 .",
    "let @xmath190 $ ] .",
    "set @xmath191 is connected .",
    "since all leaves of @xmath22 including @xmath181 are in @xmath139 , we have that @xmath192 .",
    "to prove the claim , we show that for each vertex @xmath193 , there is a @xmath194-path in @xmath195 .",
    "every vertex @xmath182 has a neighbor @xmath183 in @xmath195 .",
    "hence , it is sufficient to prove the existence of @xmath194-paths for @xmath196 .",
    "the proof is by induction on the distance between @xmath181 and @xmath45 in @xmath22 .",
    "if @xmath197 , then we have a trivial @xmath198-path .",
    "assume that @xmath199 .",
    "let @xmath92 be the parent of @xmath45 in @xmath22 .",
    "if @xmath200 , then by the inductive hypothesis , there is a @xmath201-path in @xmath195 and it implies the existence of a @xmath198-path .",
    "suppose that @xmath202 , i.e. , @xmath203 .",
    "since @xmath204 , there is @xmath182 such that @xmath205 .",
    "the distance in @xmath22 between @xmath181 and @xmath183 is less than the distance between @xmath181 and @xmath45 .",
    "therefore , by the inductive hypothesis , there is a @xmath206-path in @xmath195 . it remains to observe that because @xmath207 , @xmath195 has a @xmath198-path as well .",
    "this concludes the proof to the claim .",
    "denote by @xmath4 the set of the children of the vertices of @xmath208 in @xmath22 .",
    "observe that @xmath209 .",
    "recall that @xmath210 . because @xmath195 is connected and @xmath211 , @xmath212 .",
    "hence , @xmath213 . let @xmath214 , @xmath215 and @xmath216 .",
    "we have that @xmath170 .",
    "then @xmath217 and @xmath218 , because @xmath166 .",
    "let @xmath164 be the tree obtained from @xmath22 by consequent dissolving all the vertices of degree 2 that are not in @xmath139 . then @xmath219 . since @xmath220 , @xmath221 .",
    "we obtain that @xmath222 .",
    "now we are ready to prove the main result of the section .",
    "[ thm : above - tree ] secluded steiner tree can be solved in time @xmath223 by a true - biased monte - carlo algorithm and in time @xmath224 by a deterministic algorithm for graphs with @xmath26 vertices and @xmath41 edges , where @xmath12 and @xmath11 is the size of a steiner tree for @xmath139 and @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 .",
    "we construct an @xmath0-algorithm for secluded steiner tree parameterized by @xmath225 .",
    "the algorithm is based on the random separation techniques introduced by cai , chan , and chan  @xcite ( see also  @xcite ) .",
    "we first describe a randomized algorithm and then explain how it can be derandomized .",
    "let @xmath226 be an instance of secluded steiner tree , @xmath11 be the size of a steiner tree for @xmath227 and @xmath12 .",
    "without loss of generality we assume that @xmath228 and @xmath229 as for @xmath230 or @xmath231 , the problem is trivial .",
    "we also can assume that @xmath1 is connected .",
    "[ [ description - of - the - algorithm ] ] description of the algorithm + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in each iteration of the algorithm we color the vertices of @xmath1 independently and uniformly at random by two colors . in other words , we partition @xmath39 into two sets @xmath232 and @xmath233 .",
    "we say that the vertices of @xmath232 are _ red _ , and the vertices of @xmath233 are _ blue_. our algorithm can recolor some blue vertices red , i.e. , the sets @xmath232 and @xmath233 can be modified .",
    "our aim is to find a connected subgraph @xmath22 of @xmath1 with @xmath35 such that @xmath36|\\leq k$ ] , @xmath234)\\leq c$ ] and @xmath235",
    ".    * step 1 . *",
    "if @xmath236 $ ] has a component @xmath237 such that @xmath238 , then find a spanning tree @xmath22 of @xmath237 . if @xmath36|\\leq k$ ] and @xmath234)\\leq c$ ] , then return @xmath22 and stop ; otherwise , return that @xmath239 is no - instance and stop",
    ".    * step 2 . * if there is @xmath240 such that @xmath241 or @xmath242 , then return that @xmath239 is no - instance and stop",
    ".    * step 3 . *",
    "find a component @xmath237 of @xmath236 $ ] with @xmath243 .",
    "if there is a pendant vertex @xmath244 of @xmath237 that is adjacent in @xmath1 to the unique vertex @xmath245 , then find a component of @xmath246 $ ] that contains @xmath45 , recolor its vertices red and then return to step  1 .",
    "otherwise , return that @xmath247 is no - instance and stop .",
    "we repeat at most @xmath248 iterations .",
    "if on some iteration we obtain a yes - answer , then we return it and the corresponding solution .",
    "otherwise , if on every iteration we get a no - answer , we return a no - answer .    [ [ correctness - of - the - algorithm ] ] correctness of the algorithm + + + + + + + + + + + + + + + + + + + + + + + + + + + +    it is straightforward to see that if this algorithm returns a tree @xmath22 in @xmath1 with @xmath36|\\leq k$ ] and @xmath234)\\leq c$ ] , then we have a solution for the considered instance of secluded steiner tree .",
    "we show that if @xmath239 is a yes - instance , then there is a positive constant @xmath249 that does not depend on @xmath26 and @xmath14 such that the algorithm finds a tree @xmath22 in @xmath1 with @xmath36|\\leq k$ ] and @xmath234)\\leq c$ ] with probability at least @xmath249 after @xmath250 executions of this algorithm for random colorings .",
    "suppose that @xmath239 is a yes - instance .",
    "then there is a tree @xmath22 in @xmath1 such that @xmath35 , @xmath36|\\leq k$ ] and @xmath234)\\leq c$ ] . without loss of generality",
    "we assume that @xmath22 is inclusion minimal .",
    "let @xmath251 $ ] , @xmath157 , @xmath252 , @xmath178 and @xmath253 .",
    "for each @xmath254 , we arbitrarily select two distinct neighbors @xmath255 and @xmath256 in @xmath22 . because the leaves of @xmath22 are in @xmath139 , we have that @xmath45 is not a leaf and",
    "thus has at least two neighbors .",
    "let @xmath257 .",
    "let @xmath258 .",
    "by lemma  [ lem : big - degree ] , @xmath259 and @xmath260 . by lemma  [ lem : adj ] , @xmath261 and , therefore , @xmath262 .",
    "because @xmath263 and @xmath36|\\leq \\ell+r$ ] , we have that @xmath264 . hence @xmath265",
    "let @xmath266 .",
    "then with probability at least @xmath267 , the vertices of @xmath268 are colored blue and the vertices of @xmath269 are colored red , i.e. , @xmath270 and @xmath271 . the probability that for a random coloring , the vertices of @xmath272 are colored incorrectly , i.e. , @xmath273 or @xmath274 , is at most @xmath275 .",
    "hence , if we consider @xmath276 random colorings , then the probability that the vertices of @xmath272 are colored incorrectly for all the colorings is at most @xmath277 , and with probability at least @xmath278 for at least one coloring we will have @xmath270 and @xmath271 . since @xmath279 , we have that @xmath280 . thus if @xmath239 is a yes - instance , after @xmath276 random colorings of @xmath1 , we have that at least one of the colorings is successful with a constant success probability @xmath281 .",
    "assume that for a random red - blue coloring of @xmath1 , @xmath270 and @xmath271 .",
    "we show that in this case the algorithm finds a tree @xmath164 with @xmath282 . clearly ,",
    "@xmath283|\\leq |n_g[v(t)]|\\leq k$ ] and @xmath284)\\leq { \\omega}(n_g[v(t)])\\leq c$ ] in this case .",
    "we claim that for every connected component @xmath237 of @xmath236 $ ] , either @xmath285 or @xmath286 . to obtain a contradiction ,",
    "assume that there are @xmath287 such that @xmath288 and @xmath289 .",
    "indeed , @xmath237 is connected , and thus contains an @xmath141 path @xmath18 .",
    "since @xmath18 goes from @xmath290 to @xmath291 , path @xmath18 should contain a vertex @xmath292 .",
    "but @xmath92 is colored blue , which is a contradiction to the assumption that @xmath18 is in the red component @xmath237 . by the same arguments , for any component @xmath237 of @xmath246 $ ] , either @xmath285 or @xmath286 .",
    "we consider steps  13 of the algorithm and show their correctness .",
    "suppose that @xmath236 $ ] has a component @xmath237 such that @xmath238 . because @xmath293 and @xmath35 , @xmath285 .",
    "then for every spanning tree @xmath164 of @xmath237 , @xmath294 and @xmath295\\subseteq n_g[v(t)]$ ] . therefore , @xmath283|\\leq |n_g[v(t)]|\\leq k$ ] and @xmath284)\\leq { \\omega}(n_g[v(t)])\\leq c$ ] . hence , if a component of @xmath236 $ ] contains @xmath139 , then we find a solution .",
    "this concludes the proof of the correctness of the first step .",
    "let us assume that the algorithm does not stop at step  1 .",
    "for the right coloring , because @xmath296 and @xmath297 , for every @xmath240 , we have that @xmath298 .",
    "moreover , because @xmath228 , at least one neighbor of @xmath299 in @xmath1 is in @xmath232 .",
    "thus the only reason why the algorithm stops at step  2 is due to the wrong coloring . consider the case when the algorithm does not stop after step  2",
    "suppose that @xmath237 is a component of @xmath236 $ ] with @xmath243 . because the algorithm did not stop in step  2 , such a component @xmath237 exists and has at least 2 vertices .",
    "recall that @xmath285 . because we proceed in step  1 ,",
    "we conclude that @xmath300 .",
    "then there is a vertex @xmath301 which has a neighbor @xmath45 in @xmath22 such that @xmath245 . if @xmath302 , then",
    "@xmath303 , but this contradicts the assumption @xmath304 .",
    "hence , @xmath244 .",
    "suppose that @xmath305 .",
    "in this case @xmath306 and @xmath303 ; a contradiction .",
    "therefore , @xmath83 is a pendant vertex of @xmath237 .",
    "let @xmath244 be an arbitrary pendant vertex of @xmath237 .",
    "if @xmath83 has no neighbors in @xmath233 , then @xmath83 is a leaf of @xmath22 that does not belong to @xmath139 but this contradicts the inclusion minimality of @xmath22 .",
    "assume that @xmath83 is adjacent to at least two distinct vertices of @xmath233 . because @xmath22 is an inclusion minimal tree spanning @xmath139 , vertex @xmath83 has at least two neighbors in @xmath22 and @xmath83 has a neighbor @xmath245 in @xmath22 .",
    "let @xmath307 . if @xmath308 , then @xmath306 and , therefore , @xmath309 and @xmath310 ; a contradiction with @xmath304 .",
    "hence , @xmath311 .",
    "moreover , @xmath45 is the unique neighbor of @xmath83 in @xmath22 that belongs to @xmath233 . then @xmath312 and @xmath313 ; a contradiction with @xmath314 .",
    "we obtain that @xmath83 is adjacent in @xmath1 to the unique vertex @xmath245 .",
    "let @xmath315 be the component of @xmath246 $ ] that contains @xmath45 . since @xmath22 is an inclusion minimal tree that spans @xmath139",
    ", @xmath83 has at least two neighbors in @xmath22 .",
    "it implies that @xmath316 , therefore @xmath317 .",
    "we recolor the vertices of @xmath315 red in step  3 . for the new coloring",
    "the vertices of @xmath268 are blue and the vertices of @xmath318 are red .",
    "therefore , we keep the crucial property of the considered coloring but we increase the size of the component of @xmath236 $ ] containing @xmath112 .    to conclude the correctness proof , it remains to observe that in step  3 we increase the number of vertices in the component of @xmath236 $ ] that contains @xmath112 .",
    "hence , after at most @xmath26 iterations , we obtain a component in @xmath236 $ ] that includes @xmath139 and return a solution in step  1 .",
    "it is straightforward to verify that each of steps  13 can be done in time @xmath319 .",
    "because the number of iterations is at most @xmath26 , we obtain that the total running time is @xmath320 .",
    "this algorithm can be derandomized by standard techniques ( see   @xcite ) .",
    "the random colorings can be replaced by the colorings induced by _",
    "universal sets_. let @xmath26 and @xmath321 be positive integers , @xmath322 .",
    "@xmath323-universal set _ is a collection of binary vectors of length @xmath26 such that for each index subset of size @xmath321 , each of the @xmath324 possible combinations of values appears in some vector of the set .",
    "it is known that an @xmath323-universal set can be constructed in @xmath0-time with the parameter @xmath321 .",
    "the best construction is due to naor , schulman and srinivasan  @xcite .",
    "they obtained an @xmath323-universal set of size @xmath325 , and proved that the elements of the sets can be listed in time that is linear in the size of the set . in our case",
    "@xmath26 is the number of vertices of @xmath1 and @xmath326 .",
    "we complement theorem  [ thm : above - tree ] by showing that it is unlikely that secluded steiner tree is @xmath0  if parameterized by @xmath14 only . to show it , we use the standard reduction from the set cover problem ( see , e.g. , @xcite ) .",
    "notice that we prove that secluded steiner tree is co-@xmath13$]-hard , i.e. , we show that it is @xmath13$]-hard to decide whether we have a no - answer .",
    "[ thm : co - w - hard ] secluded steiner tree without costs is co-@xmath13$]-hard when parameterized by @xmath14 , where @xmath12 and @xmath11 is the size of a steiner tree for @xmath139 .",
    "recall that the set cover problem for a set @xmath44 , subsets @xmath327 and a positive integer @xmath3 , asks whether there are @xmath328 sets @xmath329 for @xmath330 that _ cover _ @xmath44 , i.e. , @xmath331 .",
    "as it was observed in  @xcite , set cover is @xmath13$]-hard when parameterized by @xmath332 . to prove the theorem",
    ", we reduce this parameterized variant of set cover .",
    "let @xmath333 be an instance of set cover .",
    "let @xmath334 .",
    "we construct the bipartite graph @xmath1 as follows .",
    "* construct @xmath41 vertices @xmath335 and @xmath26 vertices @xmath336 . * for @xmath337 and @xmath338 ,",
    "construct an edge @xmath339 if @xmath340 . *",
    "construct a vertex @xmath341 and join it with @xmath335 by edges .",
    "let @xmath342 and @xmath343 .",
    "suppose that @xmath333 is a yes - instance of set cover and assume that @xmath329 cover @xmath44 .",
    "then @xmath344 $ ] is a connected subgraph of @xmath1 and @xmath156 .",
    "clearly , @xmath345 .",
    "let @xmath22 be a steiner tree for the set of terminals @xmath139 .",
    "we have that @xmath346 .",
    "notice that for any connected subgraph @xmath164 of @xmath1 such that @xmath294 , @xmath295=v(g)$ ] .",
    "we have that for any connected subgraph @xmath164 of @xmath1 with @xmath154 , @xmath283|=n+m+1>(n+k+1)+(m - k-1)\\geq\\ell+r$ ] .",
    "therefore , @xmath347 is a no - instance of secluded steiner tree without costs .",
    "assume now that @xmath347 is a no - instance of secluded steiner tree without costs .",
    "let @xmath22 be a steiner tree for the set of terminals @xmath139 .",
    "because for any connected subgraph @xmath164 of @xmath1 such that @xmath294 , @xmath295=v(g)$ ] , and because @xmath347 is a no - instance , @xmath348 .",
    "let @xmath349 .",
    "since @xmath350 , we obtain that @xmath328 .",
    "it remains to note that @xmath329 cover @xmath44 and , therefore , @xmath333 is a yes - instance of set cover .",
    "in this section we consider different algorithmic and complexity results concerning different structural parameterizations of secluded connectivity problems .",
    "we consider parameterizations by the treewidth , size of the solution , maximum degree and the size of a vertex cover of the input graph .",
    "( see appendix for definitions of these parameters . )",
    "we show that it is unlikely that secluded path without costs parameterized by @xmath3 , the treewidth and the maximum degree of the input graph has a polynomial kernel .",
    "we obtain the same result for the cases when the problem is parameterized by @xmath351 , the treewidth and the maximum degree of the input graph , where @xmath11 is the length of the shortest path between terminals .",
    "[ thm : no - kern - tw ] secluded path without costs on graphs of treewidth at most @xmath16 and maximum degree at most @xmath29 admits no polynomial kernel unless @xmath81 when parameterized by @xmath352 or @xmath353 , where @xmath11 is the length of the shortest path between terminals .",
    "* there is an algorithm that given two strings @xmath357 decides whether @xmath77 and @xmath341 belong to the same equivalence class in time polynomial in @xmath358 , * for any finite set @xmath359 , the equivalence relation @xmath355 partitions the elements of @xmath139 into a number of classes that is polynomially bounded in the size of the largest element of @xmath139 .",
    "let @xmath360 be a language , let @xmath355 be a polynomial equivalence relation on @xmath356 , and let @xmath361 be a parameterized problem .",
    "an _ or - cross - composition of @xmath165 into @xmath362 _",
    "( with respect to @xmath355 ) is an algorithm that , given @xmath16 instances @xmath363 of @xmath165 belonging to the same equivalence class of @xmath355 , takes time polynomial in @xmath364 and outputs an instance @xmath365 such that :    * the parameter value @xmath3 is polynomially bounded in @xmath366 , * the instance @xmath367 is a yes - instance for @xmath362 if and only if at least one instance @xmath368 is a yes - instance for @xmath165 for @xmath369 .",
    "we construct an or - composition of secluded path without costs to the parameterized version of secluded path .",
    "recall that secluded path without costs was shown to be @xmath24-complete by chechik et al ,  @xcite .",
    "we assume that two instances @xmath370 and @xmath371 of secluded path without costs are equivalent if @xmath372 and @xmath373 . let @xmath374 for @xmath375 be equivalent instances of secluded path , @xmath376 . without loss of generality",
    "we assume that @xmath377 for a positive integer @xmath321 ; otherwise , we add minimum number of copies of @xmath378 to achieve this property .",
    "we construct the graph @xmath1 as follows .",
    "* construct disjoint copies of @xmath379 . *",
    "construct a rooted binary tree @xmath380 of height @xmath321 , denote the root by @xmath112 and identify @xmath381 leaves of the tree with the vertices of @xmath382 of @xmath379 . *",
    "construct a rooted binary tree @xmath383 of height @xmath321 , denote the root by @xmath384 and identify @xmath381 leaves of the tree with the vertices of @xmath385 of @xmath379 .",
    "let @xmath18 be an @xmath34-path @xmath18 in @xmath1 with @xmath84|\\leq k'$ ] .",
    "consider the first vertex @xmath83 of @xmath18 starting from @xmath112 that is a leaf of @xmath380 .",
    "clearly , @xmath396 for some @xmath375 . without loss of generality we can assume that @xmath397 .",
    "notice that @xmath18 contains @xmath398 by the construction of @xmath1 and the @xmath34-subpath @xmath394 of @xmath18 is an @xmath34-path in @xmath392 .",
    "it remains to observe that @xmath399|\\geq 4q+|n_{g_i}[v(p_i)]|$ ] and , therefore , @xmath395|\\leq k$ ] .",
    "suppose that @xmath392 has an @xmath393-path @xmath394 with @xmath395|\\leq k$ ] for some @xmath375 .",
    "let @xmath400 be the unique @xmath401-path in @xmath380 and let @xmath402 be the unique @xmath403-path in @xmath383 .",
    "we have that for the @xmath34-path @xmath18 in @xmath1 obtained by the concatenation of @xmath400 , @xmath394 in the copy of @xmath392 and @xmath402 , @xmath84|\\leq k+4q = k'$ ] .",
    "the proof for the case when the problem is parameterized by @xmath353 uses the same or - composition .",
    "the difference is that now we assume that two instances @xmath370 and @xmath371 are equivalent if @xmath372 , @xmath373 and @xmath404 and @xmath405 are at the same distance in @xmath1 and @xmath406 respectively .",
    "let @xmath11 be the distance between @xmath407 and @xmath398 in @xmath392 for @xmath375 .",
    "then the length of a shortest @xmath34-path in @xmath1 is @xmath408 .",
    "hence @xmath409 .",
    "observe that theorem  [ thm : no - kern - tw ] immediately implies that secluded path without costs has no polynomial kernel unless @xmath81 when parameterized by @xmath3 or @xmath351 .",
    "the next natural question is if parameterization by a stronger parameter can lead to a polynomial kernel .",
    "let us note that the treewidth of a graph is always at most the minimum size of its vertex cover .",
    "the following theorem provides lower bounds for parameterization by the minimum size of a vertex cover .",
    "we show that the @xmath410-satisfiability problem or - cross composes into secluded path without costs .",
    "recall that @xmath410-satisfiability asks for given boolean variables @xmath411 and clauses @xmath412 with 3 literals each , whether the formula @xmath413 can be satisfied .",
    "it is well - known that @xmath410-satisfiability is @xmath24-complete  @xcite .",
    "we assume that two instances of @xmath410-satisfiability are equivalent if they have the same number of variables and the same number of clauses .",
    "consider @xmath16 equivalent instances of @xmath410-satisfiability with the same boolean variables @xmath411 and the sets of clauses @xmath414 for @xmath369 .",
    "without loss of generality we assume that @xmath415 for a positive integer @xmath321 ; otherwise , we add minimum number of copies of @xmath416 to get this property .",
    "notice that @xmath417 and @xmath418 .",
    "let @xmath419 be pairwise distinct subsets of @xmath420 of size @xmath321 .",
    "notice that each @xmath421 is included exactly in @xmath422 sets .",
    "let @xmath423 .",
    "we construct the graph @xmath1 as follows ( see fig .  [",
    "fig : g ] ) .    *",
    "construct @xmath424 vertices @xmath425 .",
    "let @xmath426 .",
    "* for each @xmath427 , construct vertices @xmath428 and edges @xmath429 and @xmath430 .",
    "* for each @xmath431 , construct a set of vertices + @xmath432 . *",
    "construct a vertex @xmath384 and edges @xmath433 and @xmath434 .",
    "* for each @xmath435 and @xmath436 , * * construct 3 vertices @xmath437 ; * * construct edges @xmath438 and + @xmath439 for all @xmath440 ; * * consider the clause @xmath441 and for @xmath442 , construct an edge @xmath443 if @xmath444 for some @xmath445 and construct an edge @xmath446 if @xmath447 . *",
    "construct @xmath3 vertices @xmath448 and edges @xmath449 for @xmath445 and @xmath450 .",
    "suppose that @xmath411 have an assignment that satisfies all the clauses of @xmath453 .",
    "first , we construct the @xmath454-path @xmath400 by the concatenation of the following paths : for each @xmath445 , we take the path @xmath455 if @xmath456 in the assignment and we take @xmath457 if @xmath458 .",
    "let @xmath440 .",
    "we construct the @xmath459-path @xmath402 by concatenating @xmath460 for @xmath435 where @xmath461 is chosen as follows .",
    "each clause @xmath462 for the assignment , i.e. , @xmath463 for some @xmath442 ; we set @xmath464 . finally , we set @xmath465 .",
    "it is straightforward to verify that @xmath84|=k$ ] .",
    "suppose now that there is an @xmath34-path in @xmath1 with @xmath84|\\leq k$ ] .",
    "we assume that @xmath18 is an induced path .",
    "observe that @xmath466 for @xmath445 , because @xmath467 .",
    "therefore , @xmath18 has an @xmath454-subpath @xmath400 such that @xmath468 and for each @xmath445 , either @xmath469 or @xmath470 .",
    "we set the variable @xmath456 if @xmath471 and @xmath458 otherwise .",
    "we show that this truth assignment satisfies all the clauses of some @xmath472 .",
    "observe that @xmath473|=4n+2q+1 $ ] .",
    "clearly , @xmath474 .",
    "notice also that @xmath18 has at least one vertex in each @xmath475 for @xmath431 , and for each @xmath435 , at least one vertex among the vertices @xmath476 for @xmath436 and @xmath442 is in @xmath18 . for each @xmath435 , any two verices @xmath477 and",
    "@xmath478 have at least @xmath479 neighbors among the vertices @xmath480 for @xmath481 and @xmath442 . moreover ,",
    "if @xmath482 , they have at least @xmath483 such neighbors , because there are two subsets @xmath484 of size @xmath321 such that @xmath485 and @xmath486 . for each @xmath487 , any two vertices @xmath476 and",
    "@xmath488 for @xmath489 and @xmath490 have at least @xmath321 neighbors in @xmath475 .",
    "moreover , if @xmath491 , they have at least @xmath492 such neighbors , because @xmath493 .",
    "taking into account that @xmath494 , we obtain that @xmath495|\\geq |n_g[v(p')]|+3dm+q(m-1)+2q+1=k.\\ ] ] it implies that @xmath18 has exactly one vertex in each @xmath475 for @xmath431 , and for each @xmath435 , exactly one vertex among the vertices @xmath476 for @xmath436 and @xmath442 is in @xmath18 . moreover , there is @xmath496 and @xmath436 such that @xmath497 and @xmath498 for @xmath431 and @xmath461 .",
    "we claim that all the clauses of @xmath472 are satisfied .",
    "otherwise , if there is a clause @xmath499 that is not satisfied , then the neighbors of @xmath437 among the vertices @xmath500 for @xmath445 are not in @xmath501 $ ] .",
    "it immediately implies that @xmath84|>k$ ] ; a contradiction .          *",
    "* if @xmath1 is disconnected , then return a no - answer and stop if there are distinct components of @xmath1 that contain terminals , and construct the instance @xmath504 if there is a component @xmath505 of @xmath1 with @xmath154 .",
    "it is straightforward to see that our first step is safe to apply , i.e. , it either returns a correct answer or creates an equivalent instance of our problem .",
    "from now we assume that @xmath1 is connected .",
    "it is well - known ( see e.g.  @xcite ) that @xmath57 is a vertex cover and @xmath507 gives a factor-2 approximation of the vertex cover number . in particular , if @xmath506 , then @xmath1 has no vertex cover of size at most @xmath92 .",
    "clearly , if @xmath22 is a connected subgraph of @xmath1 with @xmath35 such that @xmath36|\\leq k$ ] , then @xmath513 . we also have that @xmath514 . to see it , assume that @xmath515 . since @xmath503",
    ", @xmath22 has no isolated vertices and , therefore , @xmath83 has a neighbor @xmath45 in @xmath22 , but then @xmath516 ; a contradiction .",
    "it proves that step  3 is safe .",
    "denote by @xmath505 the graph obtained on step  4 .",
    "if @xmath22 is a connected subgraph of @xmath1 such that @xmath35 and @xmath36|\\leq k$ ] , then @xmath22 is a subgraph of @xmath505 and @xmath522=n_g[v(t)]$ ] , because @xmath513 and @xmath514 .",
    "suppose that @xmath22 is a connected subgraph of @xmath505 with @xmath294 such that @xmath523|\\leq k$ ] .",
    "then @xmath22 does not contain any added vertex , because they are adjacent only to the vertices of degree at least @xmath524 , and @xmath525 .",
    "hence , @xmath22 is a subgraph of @xmath1 and @xmath522=n_g[v(t)]$ ] .",
    "recall that chechik et al .",
    "@xcite showed that if the treewidth of the input graph does not exceed @xmath16 , then the secluded steiner tree problem is solvable in time @xmath30 , where @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 .",
    "we observe that the running time could be improved by applying modern techniques for dynamic programming over tree decompositions proposed by cygan et al .",
    "@xcite , bodlaender et al .",
    "@xcite and fomin et al .",
    "essentially , the algorithms for secluded steiner tree are constructed along the same lines as the algorithms for steiner tree described in  @xcite .",
    "hence , for simplicity , we only sketch the randomized algorithm based on the cut&count technique introduced by cygan et al .",
    "@xcite for secluded steiner tree without costs in this conference version of our paper .",
    "let @xmath59 be a tree decomposition of a graph @xmath1 , @xmath532 .",
    "we distinguish one vertex @xmath14 of @xmath22 which is said to be a _ root _ of @xmath22 .",
    "this introduces natural parent - child and ancestor - descendant relations in the tree @xmath22 .",
    "we say that a rooted tree decomposition @xmath59 is an _ extended nice _ tree decomposition if the following conditions are satisfied :    * @xmath533 and @xmath534 for every leaf @xmath11 of @xmath22 .",
    "in other words , all the leaves as well as the root contain empty bags .",
    "* for every edge @xmath535 , there is the unique bag @xmath536 assigned to @xmath70 such that @xmath537 ; we say that this bag _ is labeled _ by @xmath70 . *",
    "every non - leaf node of @xmath22 is of one of the following three types : * * * introduce vertex node : * a node @xmath143 with exactly one child @xmath538 such that @xmath539 for some vertex @xmath540 ; we say that @xmath45 _ is introduced _ at @xmath143 .",
    "* * * introduce edge node : * a node @xmath143 labeled with an edge @xmath535 such that @xmath541 , and with exactly one child @xmath538 such that @xmath542 .",
    "we say that edge @xmath70 _ is introduced _ at @xmath143 . *",
    "* * forget node : * a node @xmath143 with exactly one child @xmath538 such that @xmath543 for some vertex @xmath544 ; we say that @xmath92 _ is forgotten _ at @xmath143 . * * * join node : * a node @xmath143 with exactly two children @xmath545 and @xmath546 such that @xmath547 . *",
    "all the edges incident to a vertex @xmath20 are introduced immediately after @xmath45 is introduced .    using the same arguments as in  @xcite , it is straightforward to show that for a given tree decomposition @xmath548 of a graph @xmath1 of width @xmath16 , an extended nice tree decomposition of @xmath1 of width at most @xmath16 such that the total size of the obtained tree is @xmath549 can be constructed in linear time .    for a function @xmath550 and a set @xmath551 , let @xmath552 .",
    "we say that @xmath92 _ isolates _ a set family @xmath553 if there is a unique @xmath554 satisfying @xmath555 .",
    "the cut&count approach uses the following statement proved by mulmuley et al .",
    "@xcite .",
    "we will search for a subset of vertices @xmath561 such that @xmath562 $ is connected , and $ |n_g[x]| \\le k$. } \\label{eq : f1}\\ ] ] it is not difficult to see that such a set @xmath57 exists if and only if there exists a pair @xmath563 of disjoint sets such that @xmath562 $ is connected , $ n_g[x ] \\subseteq x \\cup y$ , and $ |x|+|y| \\le k$ } \\label{eq : f2}\\ ] ] ( for this , take @xmath564 \\setminus x$ ] ) .",
    "we use the standard dynamic programming on tree decompositions together with the cut and count technique .",
    "assume that each vertex @xmath565 is assigned an integer weight  @xmath566 .",
    "to use dynamic programming we relax the restriction that @xmath58 $ ] is connected .",
    "namely , we view @xmath57 as a union of two disjoint sets @xmath567 and @xmath568 between them .",
    "let @xmath569 be the set of all disjoint triples @xmath570 such that @xmath571 \\cap x_1 = \\emptyset$ , $ n_g[x_0 \\cup x_1 ] \\subseteq x_0 \\cup x_1 \\cup y$ , } \\\\ \\text{$w(x_0 \\cup x_1 ) = w$ , and $ |x_0 \\cup x_1 \\cup y| = s$. } \\label{eq : f3}\\end{gathered}\\ ] ] note that any pair @xmath563 satisfying such that @xmath58 $ ] consists of @xmath572 connected components , contributes exactly @xmath573 triples to @xmath574 ( just because each of the @xmath572 connected components can go to either @xmath567 or @xmath568 )",
    ". hence if we compute @xmath575 modulo @xmath576 all pairs @xmath563 with disconnected @xmath57 will cancel out .",
    "let now @xmath577 be the minimum possible integer such that there exists @xmath578 with @xmath579|=s'$ ] satisfying  .",
    "consider a set family @xmath580 consisting of all such sets @xmath57 ( i.e. , @xmath57 satisfies   and @xmath581=s'$ ] ) .",
    "lemma  [ isolation_lemma ] guarantees that if each vertex @xmath582 is assigned a random weight from @xmath583 then @xmath584 contains a unique set @xmath57 such that @xmath585 where @xmath586 with probability at least  @xmath587 .",
    "this in turn implies that @xmath588 with probability at least @xmath587 .",
    "this allows us to conclude that with probability at least @xmath587 we will find @xmath577 by computing @xmath589 for all @xmath92 and  @xmath15 .",
    "we turn to show how to compute this .",
    "recall that we are given a tree decomposition @xmath22 of @xmath1 of width @xmath16 . without loss of generality",
    "assume that the given tree decomposition is an extended nice decomposition . for a vertex @xmath590 ,",
    "let @xmath591 be its bag , @xmath592 and @xmath593 be all the vertices end edges of @xmath1 respectively that are introduced in the subtree of @xmath22 rooted at @xmath143 , and @xmath594 be a graph on the vertex set @xmath595 containing all the edges introduced in that subtree .",
    "* * red * , represented by @xmath598 .",
    "the meaning is that all red vertices have to be contained in  @xmath567 . * * blue * , represented by @xmath599 .",
    "the meaning is that all blue vertices have to be conatained in  @xmath568 . *",
    "* green * , represented by @xmath600 .",
    "the meaning is that all green vertices have to be contained in  @xmath268 . * * white * , represented by @xmath601 .",
    "the meaning is that all white vertices do not appear in @xmath602 .",
    "* all the vertices from @xmath604 are colored properly : @xmath605 * there are no edges between vertices from @xmath606 and @xmath607 in @xmath608 : @xmath609 * any neighbor of a vertex from @xmath610 lies in @xmath611 : @xmath612      we are now ready to define a state of our dynamic programming algorithm : @xmath615 $ ] is the number modulo @xmath576 of nice triples of size @xmath15 and weight @xmath92 with respect to @xmath143 and  @xmath75 . clearly , the number of states is @xmath616 ( since @xmath15 is at most @xmath26 and @xmath92 is at most @xmath617 ) . below we show how to compute all the states by going through the given tree decomposition from the leaves to the root .    * leaf node*. if @xmath143 if a leaf node then @xmath618",
    ". then the only possible coloring is just the empty coloring and the only nice triple with respect to @xmath143 and this empty coloring is @xmath619 .",
    "hence for all @xmath620 , @xmath621=[w = 0 \\land s = 0 ] \\ , .\\ ] ]    * introduce vertex node*. let @xmath143 be an introduce node and @xmath622 be its child such that @xmath623 for some @xmath624 .",
    "note that @xmath45 is an isolated vertex in  @xmath594 . if @xmath45 is not a terminal vertex ( i.e. , @xmath625 ) it can be colored using any of our four colors . while if @xmath45 is a terminal vertex it should be colored either red or blue .",
    "we arrive at the following formula where each case is applied only if none of the previous cases is applicable : @xmath626 =   \\begin{cases } c[h ' , f , s - 1 , w - w(v ) ] &   \\text{if $ \\alpha = 1_0 \\lor \\alpha = 1_1 $ } \\\\ 0 & \\text{if $ v \\in s$ } \\\\ c[h ' , f , s - 1 , w ] & \\text{if $ \\alpha = 0_1 $ } \\\\ c[h ' ,",
    "f , s , w ] & \\text{if $ \\alpha = 0_0 $ } \\end{cases}\\ ] ]    * introduce edge node*. let @xmath143 be an introduce edge @xmath70 with a child @xmath627 such that @xmath628 for some @xmath629 and @xmath75 be a coloring of @xmath596 . clearly any triple that is nice with respect to @xmath143 and @xmath75 is also nice with respect to @xmath622 and  @xmath75 . hence all we need to do is to check whether all constraints are satisfied for the new edge @xmath70 .",
    "i.e. , this edge should not join a blue vertex with a red one or a blue / red vertex with a white one .",
    "formally , @xmath630",
    "=   \\begin{cases } c[h ' , f , s , w ] & \\text{if $ \\{f(u),f(v)\\ } \\in \\{\\{1_0,1_1\\ } , \\{1_0,0_0\\ } , \\{1_1,0_0\\ } \\}$},\\\\ 0 & \\text{otherwise .",
    "} \\end{cases}\\ ] ]    * forget node*. let @xmath143 be a forget node with a child @xmath622 such that @xmath631 for some @xmath632 .",
    "then clearly @xmath633 =   \\left(\\sum\\limits_{\\alpha \\in \\{1_0 , 1_1 , 0_0 , 0_1\\}}c[h ' , f_{v \\to \\alpha } , s , w]\\right ) \\bmod{4 } \\ , .\\ ] ]    * join node*. let @xmath16 be a join node with children @xmath545 and @xmath546 such that @xmath634 .",
    "let @xmath75 be a coloring of @xmath596 ( and hence also a coloring of @xmath635 and @xmath636 ) .",
    "note that there is a natural one - to - one correspondence between nice triples for @xmath637 and @xmath75 and pairs on nice triples for @xmath638 and @xmath639 .",
    "namely , a nice triple @xmath640 for @xmath641 defines a nice triple @xmath642 for @xmath638 and a nice triple @xmath643 for @xmath639 as follows ( @xmath644 ) : @xmath645 and vice versa , two nice triples @xmath642 and @xmath643 define a nice triple @xmath640 as follows : @xmath646 it is straightforward to check that the properties  are satisfied for both these maps .",
    "this allows us to use the following formula for computing the current state .",
    "let @xmath647 and @xmath648 . then @xmath633 = \\left ( \\sum_{\\substack{s_1 + s_2 = s + s(f )",
    "\\\\ w_1 + w_2 = w + w(f)}}c[h_1 , f , s_1 , w_1]{\\cdot}c[h_2 , f , s_2 , w_2 ] \\right ) \\bmod{4}\\ ] ]    this finishes the description of the dynamic programming algorithm for filling in the table  @xmath649 $ ] . from this table",
    "one can easily extract the value of @xmath650 : it is just @xmath651 $ ] where @xmath14 is the root node of the given tree decomposition .",
    "the algorithm based on the cut&count technique can be generalized for secluded steiner tree with costs in the same way as the algorithm for steiner tree in  @xcite . this way we can obtain the algorithm that runs in time @xmath652 where @xmath272 is the maximal cost of vertices .",
    "one can obtain a deterministic algorithm and improve the dependence on @xmath272 using the representative set technique for dynamic programming over tree decompositions introduced by fomin et al .",
    "again by the same approach as for steiner tree , it is possible to solve secluded steiner tree deterministically in time @xmath653 ( here @xmath654 is the matrix multiplication constant ) .          , _ deterministic single exponential time algorithms for connectivity problems parameterized by treewidth _ , in icalp 2013 , part i , vol .",
    "7965 of lecture notes in computer science , springer , 2013 , pp .  196207 .",
    "height 2pt depth -1.6pt width 23pt , _ secluded connectivity problems _ , in proceedings of the 21st annual european symposium algorithms ( esa ) , vol .",
    "8125 of lecture notes in computer science , springer , 2013 , pp .",
    "301312 .                , _ the thinnest path problem for secure communications : a directed hypergraph approach _ , in proceedings of the 50th annual allerton conference on communication , control , and computing , 2012 , ieee , 2012 , pp ."
  ],
  "abstract_text": [
    "<S> the secluded path problem introduced by chechik et al . in [ esa 2013 ] models a situation where a sensitive information has to be transmitted between a pair of nodes along a path in a network . </S>",
    "<S> the measure of the quality of a selected path is its _ exposure _ , which is the total weight of vertices in its closed neighborhood . in order to minimize the risk of intercepting the information , we are interested in selecting a _ secluded _ path , i.e. a path with a small exposure . similarly , the secluded steiner tree problem is to find a tree in a graph connecting a given set of terminals such that the exposure of the tree is minimized . in this work , </S>",
    "<S> we obtain the following results about parameterized complexity of secluded connectivity problems .    </S>",
    "<S> we start from an observation that being parameterized by the size of the exposure , the problem is fixed - parameter tractable ( @xmath0 ) . </S>",
    "<S> more precisely , we give an algorithm deciding if a graph @xmath1 with a given cost function @xmath2 contains a secluded path of exposure at most @xmath3 with the cost at most @xmath4 in time @xmath5 , where @xmath6 is the maximum value of @xmath7 on an input graph @xmath1 . similarly , secluded steiner tree is solvable in time @xmath8 .    </S>",
    "<S> the main result of this paper is about  above guarantee \" parameterizations for secluded problems . </S>",
    "<S> we show that secluded steiner tree is @xmath0 being parameterized by @xmath9 , where @xmath10 is the number of the terminals , @xmath11 the size of an optimum steiner tree , and @xmath12 . </S>",
    "<S> we complement this result by showing that the problem is co-@xmath13$]-hard when parameterized by @xmath14 only .    </S>",
    "<S> we also investigate secluded steiner tree from kernelization perspective and provide several lower and upper bounds when parameters are the treewidth , the size of a vertex cover , maximum vertex degree and the solution size . </S>",
    "<S> finally , we refine the algorithmic result of chechik et al . by improving the exponential dependence from the treewidth of the input graph . </S>"
  ]
}