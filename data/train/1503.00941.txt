{
  "article_text": [
    "we study a fair division problem in the context of allocating indivisible goods .",
    "fair division has attracted the attention of various scientific disciplines , including among others , mathematics , economics , and political science . ever since the first attempt for a formal treatment by steinhaus , banach , and knaster  @xcite , many interesting and challenging questions have emerged . over the past decades ,",
    "a vast literature has developed , e.g. , see  @xcite , and several notions of fairness have been suggested .",
    "the area gradually gained popularity in computer science as well , as most of the questions are inherently algorithmic , see among others  @xcite for earlier works , and the upcoming survey  @xcite on more recent results .",
    "the objective in fair division problems is to allocate a set of resources to a set of @xmath0 agents in a way that leaves every agent satisfied . in the continuous case ,",
    "the available resources are typically represented by the interval [ 0 , 1 ] , whereas in the discrete case , we have a set of distinct , indivisible goods .",
    "the preferences of each agent are represented by a valuation function , which is usually an additive function on the set of goods ( a probability distribution in the continuous case ) .",
    "given such a setup , many solution concepts have been proposed as to what constitutes a fair solution . some of the standard ones include _ proportionality , envy - freeness , equitability _ and several variants of them .",
    "all the above solutions can be attained in the case of divisible goods . in the presence of indivisible goods however , we can not have any such guarantees ; in fact in most cases we can not even guarantee reasonable approximations .",
    "instead , we focus on a concept recently introduced by budish  @xcite , that can be seen as a relaxation of proportionality .",
    "the rationale is as follows : suppose that an agent , say agent @xmath8 , is asked to partition the goods into @xmath0 bundles and then the rest of the agents make a choice before @xmath8 .",
    "in the worst case , agent @xmath8 will be left with her least valuable bundle .",
    "hence , a risk - averse agent would choose a partition that maximizes the minimum value of a bundle in the partition .",
    "this value is called the maximin share of agent @xmath8 .",
    "the objective then is to find an allocation where every person receives at least her maximin share . even for this notion ,",
    "existence is not guaranteed under indivisible goods ( see  @xcite ) .",
    "but , it is possible to have constant factor approximations , as has been recently shown in  @xcite .",
    "* contribution : * our main result , in section  [ sec:2/3 ] , is a @xmath9-approximation algorithm , for any constant @xmath10 , that runs in polynomial time for any number of agents .",
    "that is , the algorithm produces an allocation where every agent receives a bundle worth at least @xmath11 of her maximin share .",
    "our result improves upon the @xmath1-approximation of procaccia and wang  @xcite , which runs in polynomial time only for a constant number of agents . to achieve this",
    ", we redesign certain parts of the algorithm in  @xcite , arguing about the existence of appropriate , carefully constructed matchings in a bipartite graph representation of the problem . before that ,",
    "in section  [ sec:1/2 ] , we provide a simpler , faster 1/2-approximation algorithm . despite the worse factor , this algorithm still has its own merit due to its simplicity .",
    "moreover , motivated by the apparent difficulty in finding impossibility results on the approximability of the problem , we undertake a probabilistic analysis in section  [ sec : random ] .",
    "our analysis shows that in randomly generated instances , maximin share allocations exist with high probability .",
    "this may be seen as a justification of the experimental evidence reported in  @xcite , which show that maximin share allocations exist in most cases even for a small number of agents ..    finally , in the appendix , we study two special cases , motivated by previous works .",
    "the first one is the case of @xmath12 agents .",
    "this is an interesting turning point on the approximability of the problem ; for @xmath13 , there always exist maximin share allocations , but adding a third agent makes the problem significantly more complex , and the best known ratio was @xmath5 by  @xcite .",
    "we provide an algorithm with an approximation guarantee of @xmath4 , by examining more deeply the set of allowed matchings that we can use to satisfy the agents .",
    "the second case is the setting where all item values belong to @xmath6 .",
    "this is an extension of the @xmath7 setting studied in  @xcite and we show that there always exists a maximin share allocation , for any number of agents .",
    "* related work : * for an overview of the classic fairness notions and related results , we refer the reader to the books of  @xcite and  @xcite .",
    "the notion we study here was introduced by budish in  @xcite for ordinal utilities ( where agents have rankings over alternatives ) , building on concepts by moulin  @xcite .",
    "the work of  @xcite defined the notion for cardinal utilities , in the form that we study it here , and also provided many important insights as well as experimental evidence .",
    "further , in  @xcite , a @xmath1 approximation is provided along with constructions showing instances where no maximin share allocation exists even for @xmath12 .",
    "the negative results of @xcite , and more recently of @xcite , as well as the extensive experimentation by bouveret and lematre  @xcite , reveal that it has been challenging to produce lower bounds , i.e. , instances where no @xmath14-approximation of a maximin share allocation exists , even for @xmath14 very close to @xmath15 . finally , in @xcite , a probabilistic analysis , similar in spirit but more general than ours , is provided , covering a wide range of distributions on the valuation functions . in our analysis",
    "all values are uniformly drawn from @xmath16 $ ] ; in  @xcite , kurokawa , procaccia , and wang show a similar result for a large family of distributions over @xmath16 $ ] .",
    "however , their analysis , general as it may be , needs very large values of @xmath0 to guarantee relatively high probability , hence it does not fully justify the experimental results discussed above .",
    "a seemingly related problem is that of max - min fairness ( or santa claus ) , see e.g. ,  @xcite . in this problem",
    "we want to find an allocation where the value of the least happy person is maximized . with identical agents ,",
    "the two problems coincide , but beyond this special case they exhibit very different behavior .",
    "let @xmath17 be a set of @xmath0 agents and @xmath18 be a set of indivisible goods .",
    "for any @xmath19 , we will also be using @xmath20 $ ] to denote the set @xmath21 .",
    "we assume each agent has an additive valuation function @xmath22 , so that for every @xmath23 , @xmath24 . for @xmath25",
    ", we will use @xmath26 for @xmath27 .",
    "given any subset @xmath23 , an allocation of @xmath28 to the @xmath0 agents is a partition @xmath29 , where @xmath30 and @xmath31 .",
    "let @xmath32 be the set of all partitions of a set @xmath28 into @xmath0 bundles .",
    "the notions below were originally defined in  @xcite and more recently in  @xcite in the same setting that we study here .    given a set of @xmath0 agents , and any set @xmath23 , the @xmath0-maximin share of an agent @xmath8 with respect to @xmath28 , is : @xmath33    when @xmath34 , we refer to @xmath35 as the maximin share of agent @xmath8 . the solution concept we study asks for a partition that gives each agent her maximin share .    given a set of agents @xmath36 , and a set of goods @xmath37 , a partition @xmath38 is called a maximin share allocation if @xmath39 , for every agent @xmath40 .    as shown in  @xcite , maximin share allocations do not always exist .",
    "hence , our focus is on approximation algorithms , i.e. , on algorithms that produce a partition where each agent @xmath8 receives a bundle worth ( according to @xmath41 ) at least @xmath42 , for some @xmath43 .",
    "we find it instructive to provide first a simpler and faster algorithm that achieves a worse approximation of @xmath44 .",
    "in the course of obtaining this algorithm , we also identify some important properties and insights that we will use in the next sections .",
    "we start with an upper bound on our solution for each agent .",
    "the maximin share guarantee is a relaxation of proportionality , so we trivially have :    [ cl : upper_bound_1 ] for every @xmath40 and every @xmath23 , @xmath45 .",
    "this follows by the definition of a maximin share .",
    "if there exists a partition where the minimum value for agent @xmath8 would exceed the above bound , then the total sum for @xmath8 would be more than @xmath46 .",
    "we now show how to get an additive approximation .",
    "algorithm 1 below achieves an additive approximation of @xmath47 , where @xmath48 .",
    "this simple algorithm , which we will refer to as the _ greedy round - robin algorithm _ , has also been discussed in  @xcite , where it was shown that when all item values are in @xmath7 , it produces an exact maximin share allocation .",
    "some variations of this algorithm have also been used in other allocation problems , see e.g. ,  @xcite , or the protocol in @xcite .",
    "we discuss further the properties of greedy round - robin in section  [ sec : random ] .",
    "the set @xmath49 in the statement of the algorithm is the set of valuation functions @xmath50 , which can be encoded as a valuation matrix since the functions are additive .",
    "set @xmath51 for each @xmath40 .",
    "fix an ordering of the agents arbitrarily .",
    "* return * @xmath52    [ thm : additive ] if @xmath52 is the output of algorithm [ fig : alg-1 ] , then for every @xmath40 , @xmath53    let @xmath52 be the output of algorithm 1 .",
    "we first prove the following claim about the envy of each agent towards the rest of the agents :    2em2em    [ cl : envy ] for every @xmath54 , @xmath55 .",
    "fix an agent @xmath8 , and let @xmath56 .",
    "we will upper bound the difference @xmath57 . if @xmath58 comes after @xmath8 in the order chosen by the algorithm , then the statement of the claim trivially holds , since @xmath8 always picks an item at least as desirable as the one @xmath58 picks .",
    "suppose that @xmath58 precedes @xmath8 in the ordering .",
    "the algorithm proceeds in @xmath59 rounds . at each round @xmath60 ,",
    "let @xmath61 and @xmath62 be the items allocated to @xmath58 and @xmath8 respectively .",
    "then @xmath63 note that there may be no item @xmath64 in the last round if the algorithm runs out of goods but this does not affect the analysis ( simply set @xmath65 ) .",
    "since agent @xmath8 picks her most desirable item when it is her turn to choose , this means that for 2 consecutive rounds @xmath60 and @xmath66 it holds that @xmath67 .",
    "this directly implies that @xmath68    if we now sum up the statement of claim [ cl : envy ] for each @xmath58 , we get : @xmath69 , which implies @xmath70 where the last inequality holds by claim [ cl : upper_bound_1 ] .",
    "the next important ingredient is the following monotonicity property , which says that we can allocate a single good to an agent without decreasing the maximin share of other agents .",
    "[ lem : monotonicity ] for any agent @xmath8 and any good @xmath58 , it holds that @xmath71 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{j\\ } ) \\geq { \\boldsymbol{\\mu}}_i(n , m)\\,.\\ ] ]    let us look at agent @xmath8 , and consider a partition of @xmath37 that attains her maximin share .",
    "let @xmath72 be this partition .",
    "without loss of generality , suppose @xmath73 .",
    "consider the remaining partition @xmath74 enhanced in an arbitrary way by the leftovers of @xmath75 .",
    "this is a @xmath76-partition of @xmath77 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{j\\}$ ] where the value of agent @xmath8 for any bundle is at least @xmath35 .",
    "thus , we have @xmath78 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{j\\ } ) \\geq { \\boldsymbol{\\mu}}_i(n , m)$ ] .",
    "we are now ready for the @xmath44-approximation , obtained by algorithm  [ fig : alg-1/2 ] , which uses greedy round - robin , but only after we allocate the most valuable goods",
    ".    set @xmath79 run greedy round - robin on the remaining instance .",
    "[ thm:1/2 ] let @xmath36 be a set of @xmath0 agents with additive valuations , and let @xmath37 be a set of goods .",
    "algorithm  [ fig : alg-1/2 ] produces an allocation @xmath52 such that @xmath80    we will distinguish 2 cases .",
    "consider an agent @xmath8 who was allocated a single item during the first phase of the algorithm ( lines [ line:1st - while ] - [ line : last - while ] ) .",
    "suppose that at the time when @xmath8 was allocated her item , there were @xmath81 active agents , @xmath82 , and that @xmath28 was the set of currently unallocated items . by the design of the algorithm",
    ", this means that the value of what @xmath8 received is at least @xmath83 where the inequality is by claim  [ cl : upper_bound_1 ] .",
    "but now if we apply the monotonicity property ( lemma  [ lem : monotonicity ] ) repeatedly , we get that @xmath84 , hence we are done .",
    "consider now an agent @xmath8 , who gets allocated a bundle of goods according to greedy round - robin , in the second phase of the algorithm .",
    "let @xmath85 be the number of active agents at that point , and @xmath28 be the set of goods that are unallocated before greedy round - robin is executed .",
    "we know that @xmath47 at that point is less than half the current value of @xmath86 for agent @xmath8 .",
    "hence by the additive guarantee of greedy round - robin , we have that the bundle received by agent @xmath8 has value at least @xmath87 again , after applying the monotonicity property , we get that @xmath88 , which completes the proof .",
    "the main result of this section is theorem [ thm:2/3 ] , establishing a polynomial time algorithm for achieving a @xmath1-approximation to the maximin share of each agent .",
    "[ thm:2/3 ] let @xmath36 be a set of @xmath0 agents with additive valuation functions , and let @xmath37 be a set of goods .",
    "for any constant @xmath90 , there exists a polynomial time algorithm , producing an allocation @xmath52 , such that @xmath91    our result is based on the algorithm by procaccia and wang in  @xcite , which also guarantees to each agent a @xmath1-approximation ; however , it runs in polynomial time only for a constant number of agents . here",
    ", we identify the source of exponentiality and take a different approach regarding certain parts of their algorithm . for the sake of completeness",
    ", we first present the necessary related results of  @xcite , before we discuss the steps that are needed to obtain our result .",
    "first of all , note that for a single agent @xmath8 , the problem of deciding whether @xmath92 for a given @xmath60 is np - complete .",
    "however , a ptas follows by  @xcite . in the original paper , which is in the context of job scheduling , woeginger gave a ptas for maximizing the minimum completion time on identical machines .",
    "but this scheduling problem is identical to computing a maximin partition with respect to a given agent @xmath8 .",
    "indeed , from agent @xmath8 s perspective , it is enough to think of the machines as identical agents ( the only input that we need for computing @xmath35 is the valuation function of @xmath8 ) .",
    "hence :    [ thm : woeginger ] suppose we have a set @xmath37 of goods to be divided among @xmath0 agents .",
    "then , for each agent @xmath8 , there exists a ptas for approximating @xmath35 .",
    "a central quantity in the algorithm of  @xcite is the @xmath0-_density balance parameter _ , denoted by @xmath93 and defined below . before stating the definition , we give the high level idea for clarity .",
    "assume that in the course of an algorithm , we have used a subset of the items to `` satisfy '' some of the agents , and that those items do not have too much value for the rest of the agents .",
    "then we should expect to be able to `` satisfy '' the remaining agents using the remaining unallocated items .",
    "essentially , the parameter @xmath93 is the best guarantee one can hope to achieve for the remaining agents , based only on the fact that the complement of the set left to be shared is relatively small . formally :    for any number @xmath0 of agents , let @xmath94 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}s ) \\le \\ell\\lambda { \\boldsymbol{\\mu}}_i(n , m ) \\rightarrow { \\boldsymbol{\\mu}}_i(k , s ) \\ge \\lambda { \\boldsymbol{\\mu}}_i(n , m )      \\end{array } \\right\\}\\,.\\ ] ]    after a quite technical analysis , procaccia and wang calculate the exact value of @xmath93 in the following lemma .    for any @xmath95 , @xmath96 where @xmath97 denotes the largest odd integer less than or equal to @xmath0 .",
    "we are now ready to state the algorithm , referred to as @xmath98 ( algorithm  [ fig : alg - pw ] below ) .",
    "we elaborate on the crucial differences between algorithm  [ fig : alg - pw ] and the result of  @xcite after the algorithm description ( namely after lemma  [ lem : x+ ] ) . at first",
    ", the algorithm computes each agent s @xmath99-approximate maximin value using woeginger s ptas , where @xmath100 .",
    "let @xmath101 be the vector of these values .",
    "hence , @xmath102 .",
    "then , @xmath98 makes a call to the recursive algorithm @xmath103 to compute a @xmath104-approximate partition .",
    "@xmath103 takes the arguments @xmath105 , @xmath106 , @xmath28 ( the set of items that have not been allocated yet ) , @xmath107 ( the set of agents that have not received a share of items yet ) , and the valuation functions @xmath108 .",
    "the guarantee provided by @xmath103 is that as long as the already allocated goods are not worth too much for the currently active agents of @xmath107 , we can satisfy them with the remaining goods . more formally , under the assumption that @xmath109 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}s )",
    "\\le ( n-|k|)\\rho_n { \\boldsymbol{\\mu}}_i(n , m)\\,,\\ ] ] which we will show that it holds before each call , @xmath110 computes a @xmath111-partition of @xmath28 , so that each agent receives items of value at least @xmath112 .",
    "the initial call of the recursion is , of course , @xmath113 . before moving on to the next recursive call",
    ", @xmath103 appropriately allocates some of the items to some of the agents , so that they receive value at least @xmath112 each .",
    "this is achieved by identifying an appropriate matching between some currently unsatisfied agents and certain bundles of items , as desribed in the algorithm .",
    "in particular , the most important step in the algorithm is to first compute the set @xmath114 ( line [ line : x+ ] ) , which is the set of agents that will not be matched in the current call .",
    "the remaining active agents , i.e. , @xmath115 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ] , are then guaranteed to get matched in the current round , whereas @xmath114 will be satisfied in the next recursive calls . in order to ensure this for @xmath114 , @xmath103 guarantees that inequality holds for @xmath114 and for the rest of the items .",
    "note that trivially holds for the initial call .",
    "@xmath100 @xmath116    for simplicity , in the description of @xmath103 , we assume that @xmath117 , @xmath118 .",
    "also , for the bipartite graph defined below in the algorithm , by @xmath119 we denote the set of neighbors of the vertices in @xmath114 .    to proceed with the analysis , and",
    "since the choice of @xmath114 plays an important role , we should first clarify what properties of @xmath114 are needed for the algorithm to work .",
    "the following lemma is the most crucial part in the design of our algorithm .",
    "[ lem : x+ ] assume that for @xmath120 , inequality holds , and let @xmath121 be the bipartite graph defined in line [ line : g ] of @xmath103 .",
    "then there exists a subset @xmath114 of @xmath122 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{1\\}$ ] , such that :    : :    @xmath114 can be found efficiently .",
    ": :    there exists a perfect matching between    @xmath122 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ]    and a subset of    @xmath123 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\gamma(x^+)$ ] . : :    if we allocate subsets to agents according to such a matching ( as    described in line [ line : allocate ] ) and @xmath124 ,    then inequality holds for @xmath125 , where    @xmath126 is the unallocated set of items .",
    "before we prove lemma [ lem : x+ ] , we elaborate on the main differences between our setup and the approach of procaccia and wang  @xcite :    _ * choice of @xmath114 . * _ in @xcite , @xmath114 is defined as @xmath127 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{1\\}}\\{|z|\\,|\\ , |z|\\ge |\\gamma(z)|\\}$ ] . clearly , when @xmath0 is constant , so is @xmath111 , and thus the computation of @xmath114 is trivial .",
    "however , it is not clear how to efficiently find such a set in general , when @xmath0 is not constant .",
    "we propose an alternative definition of @xmath114 , which is efficiently computable and has the desired properties . in short ,",
    "our @xmath114 is any appropriately selected counterexample to hall s theorem for the graph @xmath128 constructed in line [ line : g ] .",
    "* choice of @xmath129 .",
    "* _ the algorithm works for any @xmath130 , but in @xcite the choice of @xmath129 depends on @xmath0 , and is chosen so that @xmath131 .",
    "this is possible since for any @xmath132 .",
    "however , in this case , the running time of woeginger s ptas ( line [ line : ptas ] ) is not polynomial in @xmath0 . here",
    ", we consider any fixed @xmath129 , independent of @xmath0 , hence the approximation ratio of @xmath133 .",
    "we present below the definition of @xmath114 and prove lemma  [ lem : x+ ] .",
    "proof of lemma [ lem : x+ ] we will show that either @xmath134 ( in the case where @xmath128 has a perfect matching ) , or some set @xmath114 with @xmath135 of @xmath128 . if @xmath136 , then we are done , since for @xmath134 , properties _",
    "( i ) _ and _ ( ii ) _ of lemma [ lem : x+ ] hold , while we need not check _ ( iii)_. if @xmath137 , then there must be a subset of @xmath138 violating the condition of hall s theorem .",
    "let @xmath139 be the partition of @xmath138 in unmatched and matched vertices respectively , according to @xmath140 .",
    "similarly , we define @xmath141 .",
    "now , we construct a directed graph @xmath142 , where we direct all edges of @xmath128 from @xmath138 to @xmath143 , and on top of that , we add one copy of each edge of the matching with direction from @xmath143 to @xmath138 .",
    "in particular , @xmath144 , if @xmath145 then @xmath146 , and moreover if @xmath147 then @xmath148 . we claim that the following set satisfies the desired properties @xmath149 note that @xmath114 is easy to compute ; after finding the maximum matching in @xmath128 , and constructing @xmath150 , we can run a depth - first search in each connected component of @xmath150 , starting from the vertices of @xmath151 .",
    "see also figure  [ fig : x+ ] , after the proof of theorem  [ thm:2/3 ] for an illustration . given the definition of @xmath114 , we now show property _",
    "( ii)_. back to the original graph @xmath128 , we first claim that @xmath152 . to prove this , note that if @xmath153 , then @xmath154 . if not , then it is not difficult to see that there is an augmenting path from a vertex in @xmath151 to @xmath58 , which contradicts the maximality of @xmath140 .",
    "indeed , since @xmath153 , let @xmath8 be a neighbor of @xmath58 in @xmath114 .",
    "if @xmath155 , then the edge @xmath156 would enlarge the matching . otherwise , @xmath157 and since also @xmath158 , there is a path in @xmath150 from some vertex of @xmath151 to @xmath8 . but",
    "this path by construction of the directed graph @xmath150 must consist of an alternation of unmatched and matched edges , hence together with @xmath156 we have an augmenting path .",
    "therefore , @xmath159 , i.e. , for any @xmath160 , there is an edge @xmath156 in the matching @xmath140 .",
    "but then @xmath8 has to belong to @xmath114 by the construction of @xmath161 ( and since @xmath160 ) . to sum up",
    ": for any @xmath162 , there is exactly one distinct @xmath163 , i.e. , @xmath164 .",
    "in fact , we have equality here , because it is also true that for any @xmath165 , there is a distinct vertex @xmath154 which is trivially reachable from @xmath114 . hence , @xmath166 . since @xmath167",
    ", we have @xmath168 .",
    "so , @xmath152 .",
    "also , note that @xmath169 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{1\\}$ ] , because for any @xmath170 that contains vertex 1 we have @xmath171 , since @xmath172 , for all @xmath173 .",
    "we now claim that if we remove @xmath114 and @xmath119 from @xmath128 , then the restriction of @xmath140 on the remaining graph , still matches all vertices of @xmath122 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ] , establishing property _",
    "( ii)_. indeed , note first that for any @xmath174 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ] , @xmath157 , since @xmath114 contains @xmath151 .",
    "also , for any edge @xmath147 with @xmath175 and @xmath153 , we have @xmath158 by the construction of @xmath114 .",
    "so , for any @xmath174 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ] , its pair in @xmath140 belongs to @xmath123 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\gamma(x^+)$ ] .",
    "equivalently , @xmath140 induces a perfect matching between @xmath122 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ] and a subset of @xmath123 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\gamma(x^+)$ ] ( this is the matching @xmath176 in line [ line : allocate ] of the algorithm ) .",
    "what is left to prove is that property _",
    "( iii ) _ also holds for @xmath114 .",
    "this can be done by the same arguments as in  @xcite , thus we have the following lemma .",
    "[ lem : balance ] assume that inequality holds for @xmath177 , and let @xmath128 be the graph defined in line [ line : g ] . for any @xmath170 , if there exists a perfect matching between @xmath122 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}z$ ] and a subset of @xmath123 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\gamma(z)$ ] , say @xmath178 , and there are no edges between @xmath179 and @xmath178 in @xmath128 , then property _ ( iii ) _ holds as well .",
    "clearly , there can be no edges between @xmath114 and @xmath123 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\gamma(x^+)$ ] .",
    "hence , lemma [ lem : balance ] can be applied to @xmath114 , completing the proof .",
    "given lemma [ lem : x+ ] , we can now prove the main result of this section , the correctness of @xmath98 .",
    "proof of theorem [ thm:2/3 ] it is clear that the running time of the algorithm is polynomial . its correctness is based on the correctness of @xmath103 .",
    "the latter can be proven with strong induction on @xmath111 , the number of still active agents that @xmath103 receives as input . for @xmath180 , assuming that inequality holds , we have for agent @xmath15 of @xmath107 :    rcl v_1(s ) & = & v_1(m ) - v_1(ms ) n _ 1(n , m ) - v_1(ms ) + & & n _ 1(n , m ) - ( n-1)_n _ 1(n , m ) _",
    "1(n , m ) ( - ) _",
    "1(n , m ) .    for the inductive step , lemma [ lem : x+ ] and the choice of @xmath114 are crucial .",
    "consider an execution of @xmath103 during which some agents will receive a subset of items and the rest will form the set @xmath114 to be handled recursively . for all the agents in @xmath114 if any we are guaranteed @xmath89-approximate shares by property _",
    "( iii ) _ of lemma [ lem : x+ ] and by the inductive hypothesis . on the other hand , for each agent @xmath8 that receives a subset @xmath181 of items in line [ line : allocate ]",
    ", we have @xmath182 where the first inequality holds because @xmath183 .",
    "finally , in figure  [ fig : x+ ] , we give a simple snapshot to illustrate a recursive call of @xmath103 .",
    "in particular , in subfigure  [ subfig : g ] , we see a bipartite graph @xmath128 that could be the current configuration for @xmath103 , along with a maximum matching . in subfigure  [ subfig : g ] , we see the construction of @xmath161 , as described in lemma  [ lem : x+ ] , and the set @xmath114 . the bold ( black ) edges in @xmath150",
    "signify that both directions are present .",
    "the set @xmath114 consists then of @xmath151 and all other vertices of @xmath138 reachable from @xmath151 .",
    "finally , subfigure  [ subfig : g ] also shows the set of agents that are satisfied in the current call along with the corresponding perfect matching , as claimed in lemma  [ lem : x+ ] .",
    "improving the approximation ratio of @xmath1 further seems to require drastically new ideas and it is an interesting open problem .",
    "related to this , in appendix [ app - sec : special ] , we consider two special cases on which we can have better results .",
    "the first is the case of @xmath12 agents , where we obtain a @xmath4-approximation , improving on the @xmath5-approximation of  @xcite .",
    "the second is the case where all values for the goods belong to @xmath6 .",
    "this is an extension of the @xmath7 setting discussed in  @xcite and we show how to get an exact allocation without any approximation loss .",
    "as argued in the previous works  @xcite , it has been quite challenging to prove impossibility results .",
    "setting efficient computation aside , what is the best @xmath184 for which a @xmath184-approximate allocation does exist ?",
    "all we know so far is that @xmath185 by the elaborate constructions in  @xcite .",
    "however , extensive experimentation in  @xcite ( and also  @xcite ) , showed that in all generated instances , there always existed a maximin share allocation .",
    "motivated by these experimental observations and by the lack of impossibility results , we present a probabilistic analysis , showing that indeed we expect that in most cases there exist allocations where every agent receives her maximin share .",
    "in particular , we analyze the greedy round - robin algorithm from section [ sec:1/2 ] when each @xmath26 is drawn from the uniform distribution over @xmath186 $ ] .",
    "recently , in @xcite , similar results are shown for a large set of distibutions over @xmath16 $ ] , including @xmath187 $ ] .",
    "although , asymptotically , their results yield a theorem that is more general than ours , we consider our analysis to be of independent interest , since we have much better bounds on the probabilities for the special case of @xmath187 $ ] , even for relatively small values of @xmath0 .",
    "we start with the following :    [ thm : random - prop ] let @xmath188 $ ] be a set of agents and @xmath189 $ ] be a set of goods , and assume that the @xmath26s are i.i.d .",
    "random variables that follow @xmath187 $ ] .",
    "then , for @xmath190 and large enough @xmath0 , the greedy round - robin algorithm allocates to each agent @xmath8 a set of goods of total value at least @xmath191 with probability @xmath192 .",
    "the @xmath193 term is @xmath194 when @xmath195 and @xmath196 when @xmath197 .",
    "the proof is in appendix [ app - sec : random ] and is based on tools like hoeffdings and chebyshevs inequalities , and on a very careful estimation of the probabilities when @xmath198 .",
    "note that for @xmath199 , the theorem provides an even stronger guarantee than the maximin share ( by claim [ cl : upper_bound_1 ] ) .",
    "we now state a similar result for any @xmath200 .",
    "we use a modification of greedy round - robin .",
    "while @xmath201 , the algorithm picks any agent uniformly at random and gives her only her `` best '' item ( phase 1 ) .",
    "when the number of available items becomes two times the number of active agents , the algorithm proceeds as usual ( phase 2 ) .",
    "[ thm : random - mms ] let @xmath188 $ ] , @xmath189 $ ] , and the @xmath26s be as in theorem [ thm : random - prop ] .",
    "then , for any @xmath200 and large enough @xmath0 , the modified greedy round - robin algorithm allocates to each agent @xmath8 a set of items of total value at least @xmath35 with probability @xmath192 .",
    "the @xmath193 term is @xmath194 when @xmath195 and @xmath196 when @xmath202 .    if @xmath190 then this is a corollary of theorem [ thm : random - prop ] .",
    "when @xmath201 , then for any agent @xmath8 we have @xmath203 .",
    "so the first agent that receives only her most valuable item has total value at least @xmath35 .",
    "if @xmath204 are the sets of remaining agents and items respectively , after several agents were assigned one item in phase 1 of the algorithm , then by lemma [ lem : monotonicity ] , for any agent @xmath205 , we have @xmath206 . if @xmath207 it is also true that @xmath208 , so correctness of phase 1 follows by induction . if @xmath209 , then by theorem [ thm : random - prop ] phase 2 guarantees that with high probability each agent @xmath205 will receive a set of items with total value at least @xmath210 .",
    "* remark 1 .",
    "* the implicit constants in the probability bounds of theorems [ thm : random - prop ] and [ thm : random - mms ] depend heavily on @xmath0 and @xmath200 ( as well as on the point one uses to separate @xmath211 and @xmath212 in the proof of theorem [ thm : random - prop ] , see appendix [ app - sec : random ] ) .",
    "our analysis gives good bounds for the case @xmath213 without requiring very large values for @xmath0 ( especially when @xmath214 in the proof of theorem [ thm : random - prop ] is not small ) .",
    "for example , if @xmath215 an appropriate adjustment of our bounds gives a @xmath193 term less than @xmath216 for @xmath217 .",
    "when we switch from the detailed analysis of the @xmath213 case to the sloppier general treatment for @xmath218 , there is definitely some loss , e.g. , for @xmath219 we get that the @xmath193 term is less than @xmath220 for @xmath221 .",
    "this is corrected relatively quickly as @xmath200 grows , e.g. , for @xmath222 the @xmath193 term can be made less than @xmath223 for @xmath224 .",
    "theorems [ thm : random - prop ] and [ thm : random - mms ] may leave the impression that @xmath0 has to be large .",
    "actually , there is no reason why we can not consider @xmath0 fixed and let @xmath200 grow .",
    "following very closely the proof of theorem [ thm : random - prop ] for @xmath225 , we get the next corollary .",
    "[ thm : random - prop - m ] let @xmath188 $ ] , @xmath189 $ ] , and the @xmath26s be as in theorem [ thm : random - prop ] .",
    "then , for fixed @xmath0 and large enough @xmath200 , the greedy round - robin algorithm allocates to each agent @xmath8 a set of goods of total value at least @xmath191 with probability @xmath226 .",
    "the most interesting open question is undoubtedly whether one can improve on the @xmath1-approximation .",
    "going beyond @xmath1 seems to require a drastically different approach .",
    "one idea that may deserve further exploration is to pick in each step of algorithm [ fig : alg - pw_rec ] , the best out of all possible matchings ( and not just an arbitrary matching as is done in line  [ fig : alg - pw_rec ] of the algorithm ) .",
    "this is essentially what we exploit for the special case of @xmath12 agents .",
    "however , for a larger number of players , this seems to result in a heavy case analysis without any visible benefits . in terms of non - combinatorial techniques , we are not currently aware of any promising lp - based approach to the problem .    even establishing better ratios for special cases could still provide new insights into the problem .",
    "it would be interesting , for example , to see if we can have an improved ratio for the special case studied in @xcite for the santa claus problem .",
    "obtaining negative results seems to be an even more challenging task , given our probabilistic analysis and the results of related works .",
    "the negative results in  @xcite require very elaborate constructions , which still do not yield an inapproximability factor far away from @xmath15 .",
    "apart from improving the approximation quality , exploring practical aspects of our algorithms is another direction , see e.g. ,  @xcite .",
    "finally , we have not addressed here the issues of truthfulness and mechanism design , a stimulating topic for future work .",
    "given the impossibility results in  @xcite for a related problem , we expect similar negative results here as well , in the context of mechanism design without money .",
    "when payments are allowed however , more interesting questions may arise .",
    "research co - financed by the european union ( european social fund - esf ) and greek national funds through the operational program `` education and lifelong learning '' of the national strategic reference framework ( nsrf ) - research funding program : `` thales - investing in knowledge society through the european social fund '' .",
    "10 [ 1]`#1 `    asadpour , a. , saberi , a. : an approximation algorithm for max - min fair allocation of indivisible goods . in : acm symposium on theory of computing ( stoc ) .",
    "pp . 114121 ( 2007 )",
    "bansal , n. , sviridenko , m. : the santa claus problem . in : acm symposium on theory of computing ( stoc ) .",
    "3140 ( 2006 )    bezakova , i. , dani , v. : allocating indivisible goods .",
    "acm sigecom exchanges 5 , 1118 ( 2005 )    bouveret , s. , lang , j. : a general elicitation - free protocol for allocating indivisible goods . in : proceedings of the 22nd international joint conference on artificial intelligence , ijcai 2011 .",
    "( 2011 )    bouveret , s. , lematre , m. : characterizing conflicts in fair division of indivisible goods using a scale of criteria . in : international conference on autonomous agents and multi - agent systems , aamas 14 .",
    "13211328 ( 2014 )    brams , s.j . , king , d. : efficient fair division - help the worst off or avoid envy .",
    "rationality and society 17(4 ) , 387421 ( 2005 )    brams , s.j .",
    ", taylor , a.d . :",
    "fair division : from cake cutting to dispute resolution .",
    "cambrige university press ( 1996 )    budish , e. : the combinatorial assignment problem : approximate competitive equilibrium from equal incomes .",
    "journal of political economy 119(6 ) , 10611103 ( 2011 )    edmonds , j. , pruhs , k. : balanced allocations of cake . in : symposium on foundations of computer science ( focs ) .",
    "623634 ( 2006 )    kurokawa , d. , procaccia , a.d . ,",
    "wang , j. : when can the maximin share guarantee be guaranteed ?",
    "manuscript ( 2015 )    markakis , e. , psomas , c. : on worst - case allocations in the presence of indivisible goods . in : 7th workshop on internet and network economics ( wine 2011 ) .",
    "pp . 278289 ( 2011 )",
    "moulin , h. : uniform externalities : two axioms for fair allocation . journal of public economics 43(3 ) , 305326 ( 1990 )    procaccia , a.d . : cake cutting algorithms . in : brandt , f. , conitzer , v. , endriss , u. , lang , j. , procaccia , a. ( eds . ) handbook of computational social choice , chap",
    "cambridge university press ( 2015 )    procaccia , a.d . ,",
    "wang , j. : fair enough : guaranteeing approximate maximin shares . in : acm conference on economics and computation , ec 14 .",
    "675692 ( 2014 )    robertson , j.m . ,",
    "webb , w.a . :",
    "cake cutting algorithms : be fair if you can .",
    "ak peters ( 1998 )    spliddit : provably fair solutions .",
    "http://www.spliddit.org/ ( 2015 )    steinhaus , h. : the problem of fair division .",
    "econometrica 16 , 101104 ( 1948 )    woeginger , g. : a polynomial time approximation scheme for maximizing the minimum machine completion time .",
    "operations research letters 20 , 149154 ( 1997 )    woeginger , g. , sgall , j. : on the complexity of cake cutting .",
    "discrete optimization 4(2 ) , 213220 ( 2007 )",
    "in this section , we consider two special cases on which we can have better results .",
    "the first is the case of @xmath12 agents , where we obtain a @xmath4-approximation , improving on the @xmath5-approximation of  @xcite .",
    "the second is the case where all values for the goods belong to @xmath6 .",
    "this is an extension of the @xmath7 setting discussed in  @xcite and we show how to get an exact allocation without any approximation loss .",
    "here we focus on the intriguing case of @xmath2 agents . when @xmath13 , it is pointed out in  @xcite that maximin share allocations exist via an analog of the cut and choose protocol . using the ptas of  @xcite",
    ", we can then have a ( @xmath227)-approximation in polynomial time .",
    "in contrast , as soon as we move to @xmath12 , things become more interesting .",
    "it is proved in  @xcite that with @xmath2 agents there exist instances where no maximin share allocation exists .",
    "the best known approximation guarantee is @xmath228 , by observing that the quantity @xmath93 , defined in section  [ sec:2/3 ] , satisfies @xmath229 .",
    "we provide a different algorithm , improving the approximation to @xmath230 . to do this , we combine ideas from both algorithms presented so far in sections  [ sec:1/2 ] and  [ sec:2/3 ] .",
    "the main result of this subsection is as follows :    [ thm:7/8 ] let @xmath231 be a set of three agents with additive valuations , and let @xmath37 be a set of goods",
    ". for any constant @xmath90 , algorithm [ fig : alg - n=3 ] produces in polynomial time an allocation @xmath232 , such that @xmath233    the algorithm is shown below .",
    "before we prove theorem [ thm:7/8 ] , we provide here a brief outline of how the algorithm works .",
    "* algorithm outline : * first , approximate values for the @xmath234s are calculated as before .",
    "then , if there are items with large value to some agent , in analogy to algorithm  [ fig : alg-1/2 ] , we first allocate one of those , reducing this way the problem to the simple case of @xmath13 . if there are no items of large value , then the first agent partitions the items as in algorithm [ fig : alg - pw ] . in the case where this partition does not satisfy all three agents , then the second agent repartitions two of the bundles of the first agent",
    ". actually , she tries two different such repartitions , and we show that at least one of them works out . the definition of a bipartite preference graph and a corresponding matching ( as in algorithm [ fig : alg - pw ] )",
    "is never mentioned explicitly here .",
    "however , the main idea ( and the difference with algorithm [ fig : alg - pw ] ) is that if there are several ways to pick a perfect matching between @xmath122 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ] and a subset of @xmath123 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\gamma(x^+)$ ] , then we try them all and choose the best one . of course",
    ", since @xmath12 , if there is no perfect matching in the preference graph , then @xmath122 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ] is going to be just a single vertex , and we only have to examine two possible perfect matchings between @xmath122 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}x^+$ ] and a subset of @xmath123 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\gamma(x^+)$ ] .",
    "@xmath235 compute a @xmath236-approximation @xmath237 of @xmath238 for @xmath239 .",
    "proof of theorem [ thm:7/8 ] first , note that for constant @xmath129 the algorithm runs in time polynomial in @xmath240 .",
    "next , we prove the correctness of the algorithm .",
    "if the output is computed in lines [ line:1st_if_1st]-[line : cut - n - choose ] , then , for agent @xmath8 , as defined in line  [ line:1st_if_1st ] , the value she receives is at least @xmath241 .",
    "the remaining two agents @xmath242 essentially apply an approximate version of a cut and choose protocol . by the monotonicity lemma ( lemma [ lem : monotonicity ] ) , we know that @xmath243 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{j\\ } ) \\ge { \\boldsymbol{\\mu}}_{i_1}(3 , m)$ ] , and thus no matter which set is left for agent @xmath244 , she is guaranteed a total value of at least @xmath245 .",
    "similarly , we have @xmath246 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{j\\ } ) \\ge { \\boldsymbol{\\mu}}_{i_2}(3 , m)$ ] , and therefore @xmath247 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{j\\})\\ge 2{\\boldsymbol{\\mu}}_{i_2}(3 , m)$ ] .",
    "since @xmath248 chooses before @xmath249 , she is guaranteed total value that is at least @xmath250 .",
    "if the output is computed in steps [ line:1st_else_1st]-[line:2nd_if_last ] , then , clearly all agents receive a ( @xmath251)-approximation , since for agent @xmath15 , it does not matter which of the @xmath252s she gets .",
    "the most interesting and challenging case is when the output is computed in steps [ line : main_1st]-[line : main_last ] ( starting with the partition from step [ line:1st_else_1st ] ) .",
    "then , as before , agent @xmath15 receives value that is more than @xmath253 , no matter which of the three sets she gets . for agents 2 and 3 , however , the analysis is not straightforward .",
    "we need the following lemma .",
    "[ lem:7/8 ] let @xmath254 be as above , such that for all @xmath25 we have @xmath255 . consider any partition of @xmath37 into 3 sets @xmath256 and assume that there are no @xmath257 such that @xmath258 , @xmath259 and @xmath260 .",
    "then steps [ line : main_1st]-[line : main_last ] of algorithm [ fig : alg - n=3 ] produce an allocation @xmath261 for agents 2 and 3 , such that for @xmath262 : @xmath263 moreover , if agent 1 is given set @xmath264 , then @xmath265 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}k } a_{\\ell}$ ] .",
    "clearly , lemma [ lem:7/8 ] completes the proof .    before stating the proof of lemma [ lem:7/8 ] , we should mention how it is possible to go beyond the previously known @xmath228-approximation . as previously noted",
    ", @xmath93 is the best guarantee we can get , based only on the fact that the complement of the set left to be shared is not too large . here , at some point",
    ", we have to argue about how a maximin partition would redistribute the items in the aforementioned complement .",
    "that is , the @xmath266 ratio is guaranteed not just by the excess value , but by using the way that an optimal partition would divide specific subsets of items .",
    "proof of lemma [ lem:7/8 ] first , recall that @xmath267 . like in the description of the algorithm",
    ", we may assume that agent 1 gets set @xmath268 , without loss of generality .",
    "before we move to the analysis , we should lay down some facts .",
    "let @xmath269 be agent 2 s @xmath99-approximate maximin partition of @xmath270 computed in step [ line : discards ] ; similarly @xmath271 is agent 2 s @xmath99-approximate maximin partition of @xmath272 .",
    "we may assume that @xmath273 . also , without loss of generality , in line [ line : discards ] of the algorithm we assumed that @xmath274 .",
    "our goal is to show that @xmath275 . for simplicity , we write @xmath276 instead of @xmath277 .",
    "note , however , that    rcl v_2(b_2 ) & < & ( -)_2 + ( 1-)_2(2 , a_1a_2 ) & < & ( -)_2 + ( 1-)_2(2 , a_1a_2 ) & < & ( -)_2 + _ 2(2 , a_1a_2 ) & < & _ 2 .",
    "moreover , this means @xmath278 as well , which leads to @xmath279 .",
    "so , it suffices to show that either @xmath280 or @xmath281 is at least @xmath282 .",
    "this statement is independent of the @xmath283s , and in what follows , we consider exact maximin partitions with respect to agent 2 .",
    "before we proceed , we should make clear that for the case we are analyzing , there are indeed exactly two sets in @xmath284 , each with value less than @xmath282 with respect to agent 2 , as claimed in line [ line : main_1st ] of the algorithm .",
    "first of all , in any partition of @xmath37 , there is at least one set with value at least @xmath276 with respect to agent @xmath3 , due to the fact that @xmath285 and by the definition of a maximin partition .",
    "if , there were at least 2 sets in @xmath284 with value at least @xmath286 , then we would be at the case handled in steps [ line:1st_else_1st]-[line:2nd_if_last ] .",
    "hence , there will be exactly two sets , each with value less than @xmath287 for agent 2 , and as stated in the algorithm we assume these are the sets @xmath288 .",
    "consider a @xmath2-maximin share allocation @xmath289 of @xmath37 with respect to agent 2 .",
    "let @xmath290 for @xmath291 .",
    "without loss of generality , we may assume that @xmath292 .    if @xmath293 , then the partition @xmath294 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}a_3 , ( a_2'\\cup a_3'){\\mathbin{\\mathchoice{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}a_3)$ ] is a partition of @xmath270 such that @xmath295 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}a_3)= v_2(a_1')-v_2(f_1)\\ge { \\boldsymbol{\\mu}}_2 - \\frac{1}{8}{\\boldsymbol{\\mu}}_2 = \\frac{7}{8}{\\boldsymbol{\\mu}}_2\\ ] ] and @xmath296 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}a_3 ) \\ge v_2(a_2 ' ) + v_2(a_3 ' ) -",
    "v_2(a_3)= 2{\\boldsymbol{\\mu}}_2 - \\frac{7}{8}{\\boldsymbol{\\mu}}_2 = \\frac{9}{8}{\\boldsymbol{\\mu}}_2\\,.\\ ] ] so , in this case we conclude that @xmath297 .    on the other hand , if @xmath298 we are going to show that @xmath299 . towards this",
    "we consider a @xmath3-maximin share allocation @xmath300 of @xmath301 with respect to agent 2 and let us assume that @xmath302 .",
    "[ cl : sums7/8 ] for @xmath303 as above , we have    * @xmath304 , and * @xmath305 .",
    "note that @xmath306 if @xmath307 then @xmath308 .",
    "moreover , @xmath309 and @xmath307 implies that @xmath310 .",
    "let @xmath311 denote the difference @xmath312 ; clearly @xmath313 .",
    "it is not hard to see that @xmath314 . indeed , suppose there existed some @xmath315 such that @xmath316",
    ". then , by moving @xmath58 from @xmath317 to @xmath318 we increase the minimum value of the partition , which contradicts the choice of @xmath319 .",
    "now , for any item @xmath320 , the partition @xmath321 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{g\\})$ ] is strictly better than @xmath300 , since @xmath322 and @xmath323 ( 3pt,0 ) -- ( 0,6pt);}}}}{{{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3pt,0 ) -- ( 0,6pt);}}}}}{{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2pt,0 ) -- ( 0,4pt);}}}}{{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,3pt);}}}}}}\\{g\\ } ) = v_2(a_1)-v_{2 g } > \\frac{17}{8}{\\boldsymbol{\\mu}}_2 - \\frac{7}{8}{\\boldsymbol{\\mu}}_2 = \\frac{10}{8}{\\boldsymbol{\\mu}}_2 $ ] .",
    "again , this contradicts the choice of @xmath319 .",
    "hence , it must be that @xmath304 .",
    "the proof of _ ( ii ) _ is simpler .",
    "notice that @xmath324    now , if @xmath325 then _ ( i ) _ of claim [ cl : sums7/8 ] implies that @xmath326 .",
    "similarly , if @xmath327 then _ ( ii ) _ of claim [ cl : sums7/8 ] implies that @xmath328 .",
    "in both cases , we have @xmath299 .",
    "so , it is left to examine the case where both @xmath329 and @xmath330 are less than @xmath282 .",
    "[ cl : sums7/8_second ] let @xmath303 be as above and @xmath331",
    ". then @xmath332 .",
    "recall that @xmath333 .",
    "suppose @xmath334 .",
    "then @xmath335 .",
    "since @xmath336 we have @xmath337 .",
    "but then we get the contradiction @xmath338 hence , @xmath339 . similarly ,",
    "suppose @xmath340 .",
    "then @xmath341 . since @xmath342 we have @xmath343",
    ". then we get the contradiction @xmath344 hence , @xmath345 .",
    "claim [ cl : sums7/8_second ] implies @xmath299 , and this concludes the proof .      in @xcite ,",
    "the authors consider a binary setting , where all valuation functions take values in @xmath7 , i.e. , for each @xmath40 , and @xmath25 , @xmath346 .",
    "this can correspond to expressing approval or disapproval for each item .",
    "it is then shown that it is always possible to find a maximin share allocation in polynomial time .",
    "in fact , they show that the greedy round - robin algorithm , presented in section [ sec:1/2 ] , computes such an allocation in this case .    here",
    ", we extend this result to the setting where each @xmath26 is in @xmath6 , allowing the agents to express two types of approval for the items . enlarging the set of possible values from @xmath7 to @xmath6 , by this one extra possible value ,",
    "makes the problem significantly more complex .",
    "greedy round - robin can not work in this case and a different algorithm is developed .",
    "[ thm:012 ] let @xmath188 $ ] be a set of agents and @xmath189 $ ] be a set of items .",
    "if for any @xmath40 , agent @xmath8 has a valuation function @xmath41 such that @xmath347 for any @xmath25 , then we can find , in time @xmath348 , an allocation @xmath349 of @xmath37 so that @xmath350 for every @xmath8 .    to design our algorithm , we make use of an important observation by  @xcite that allows us to reduce appropriately the space of valuation functions that we are interested in .",
    "we say that the agents have _ fully correlated _ valuation functions if they agree on a common ranking of the items in decreasing order of values .",
    "that is , @xmath351 , if @xmath352 , we have @xmath353 . in @xcite ,",
    "the authors show that to find a maximin share allocation for any set of valuation functions , it suffices to do so in an instance where the valuation functions are fully correlated .",
    "this family of instances seems to be the difficulty in computing such allocations .",
    "actually , their result preserves approximation ratios as well ( with the same proof ) ; hence we state this stronger version . for a valuation function @xmath41",
    "let @xmath354 be a permutation on the items such that @xmath355 for @xmath356 .",
    "we denote the function @xmath357 by @xmath358 .",
    "note that @xmath359 are now fully correlated .",
    "[ thm : fully - corr ] let @xmath188 $ ] be a set of players with additive valuation functions , @xmath189 $ ] be a set of goods and @xmath360 $ ] .",
    "given an allocation @xmath349 of @xmath37 so that @xmath361 for every @xmath8 , one can produce in linear time an allocation @xmath362 of @xmath37 so that @xmath363 for every @xmath8 .",
    "* algorithm outline : * we first construct @xmath359 and work with them instead .",
    "the greedy round - robin algorithm may not directly work , but we partition the items in a similar fashion , although without giving them to the agents .",
    "then , we show that it is possible to choose some subsets of items and redistribute them in a way that guarantees that everyone can get a bundle of items with enough value . at a higher level",
    ", we could say that the algorithm simulates a variant of the greedy round - robin , where for an appropriately selected set of rounds the agents choose in the reverse order .",
    "finally , a maximin share allocation can be obtained for the original @xmath41s , as described in @xcite .    in what follows ,",
    "we prove theorem [ thm:012 ] through a series of lemmas . at the end",
    ", we explicitly state the algorithm ( algorithm [ fig : alg-012 ] ) .",
    "proof of theorem [ thm:012 ] according to theorem [ thm : fully - corr ] it suffices to focus on instances where the valuation functions take values in @xmath6 and are fully correlated .",
    "given such an instance we distribute the @xmath200 objects into @xmath0 buckets in decreasing order , i.e. , bucket @xmath8 will get items @xmath364 .",
    "notice that this is compatible with how the greedy round - robin algorithm could distribute the items , however we do not assign any buckets to any players yet .",
    "we may assume that @xmath365 for some @xmath366 ; if not , we just add a few extra items with 0 value to everyone .",
    "it is convenient to picture the collection of buckets as the matrix @xmath367 since our algorithm will systematically redistribute groups of items corresponding to rows of @xmath140 .",
    "before we state the algorithm , we establish some properties regarding these buckets and the way each player views the values of these bundles .",
    "first , we introduce some terminology .",
    "we say that player @xmath8 is    * satisfied with respect to the current buckets , if all the buckets have value at least @xmath35 according to @xmath41 . *",
    "left - satisfied with respect to the current buckets , if she is not satisfied , but at least the @xmath368 leftmost buckets have value at least @xmath35 according to @xmath41 .",
    "* right - satisfied if the same as above hold , but for the rightmost @xmath368 buckets .",
    "now suppose that we see agent @xmath8 s view of the values in the buckets",
    ". a typical view would be something like the following form ( recall the goods are ranked from highest to lowest value ) : @xmath369 a row that has only @xmath3s for @xmath8 will be called a @xmath370-row for @xmath8 . a row that has",
    "both @xmath3s and @xmath15s will be called a @xmath371-row for @xmath8 , and so forth .",
    "an agent can also have a @xmath372-row .",
    "it is not necessary , of course , that an agent will have all possible types of rows in her view .",
    "note , however , that there can be at most one @xmath373-row and at most one @xmath371-row in her view .",
    "we first prove the following lemma for agents that are not initially satisfied .",
    "2em2em    [ lem : left - satisfied ] any player not satisfied with respect to the initial buckets must have both a @xmath373-row and a @xmath371-row in her view of @xmath140 .",
    "moreover , initially all players are either satisfied or left - satisfied .",
    "let us focus on the multi - set of values of a player that is not satisfied , say @xmath8 .",
    "it is straightforward to see that if @xmath8 has no @xmath15s , or the number of @xmath3s is a multiple of @xmath0 ( including 0 ) , then player @xmath8 gets value @xmath35 by any of the buckets .",
    "so , @xmath8 must have a row with both @xmath3s and @xmath15s . if this is a @xmath372-row , then",
    "again it is easy to see that the initial allocation is a maximin share allocation for @xmath8 .",
    "so , @xmath8 has a @xmath371-row .",
    "the only case where she does not have a @xmath373-row is if the total number of @xmath15s and @xmath3s is a multiple of @xmath0.but then the maximum and the minimum value of the initial buckets differ by 1 , hence we have a maximin share allocation and @xmath8 is satisfied .",
    "now , we are going to show that a player @xmath8 that is not initially satisfied is left - satisfied . in what follows",
    "we only refer to @xmath8 s view .",
    "buckets @xmath374 and @xmath375 , indexed by the corresponding columns of @xmath140 , have maximum and minimum total value respectively . since @xmath8 is not satisfied ,",
    "we have @xmath376 , but the way we distributed the items guarantees that the difference between any two buckets is at most the largest value of an item ; so @xmath377 .",
    "moreover , since @xmath378 and @xmath379 , we must have @xmath380 .",
    "this implies that @xmath381 and @xmath382 .",
    "more generally , we have buckets of value @xmath383 ( leftmost columns ) , we have buckets of value @xmath384 ( rightmost columns ) , and maybe some other buckets of value @xmath35 ( columns in the middle ) . we know that the total value of all the items is at least @xmath385 , so , by summing up the values of the buckets ,",
    "we conclude that there must be at most @xmath368 buckets of value @xmath384 . therefore @xmath8 is left - satisfied .",
    "so far , we may have some players that could take any bucket , and some players that would take any of the @xmath368 ( at least ) first buckets . clearly ,",
    "if the left - satisfied players are at most @xmath368 then we can easily find a maximin share allocation .",
    "however , there is no guarantee that there are not too many left - satisfied players initially , so we try to fix this by reversing some of the rows of @xmath140 . to make this precise ,",
    "we say that _ we reverse the @xmath8th row of @xmath140 _ when we take items @xmath386 and we put item @xmath387 in bucket 1 , item @xmath388 in bucket 2 , etc .",
    "the algorithm picks a subset of rows of @xmath140 and reverses them .",
    "the rows are chosen appropriately so that the resulting buckets ( i.e. , the columns of @xmath140 ) can be easily paired with the players to get a maximin share allocation . in what follows",
    ", we give a series of lemmas motivating the idea behind the algorithm and proving its correctness .",
    "the detailed description of the algorithm in the end of the section summarizes all the steps .",
    "first , it is crucial to understand the effect that the reversal of a set of rows has to a player .",
    "2em2em    [ lem : reverse - satisfied ] any player satisfied with respect to the initial buckets remains satisfied independently of the rows of @xmath140 that we may reverse . on the other hand , any player not satisfied with respect to the initial buckets , say player @xmath8 , is affected if we reverse her @xmath373-row or her @xmath371-row .",
    "if we reverse only one of those , then @xmath8 becomes satisfied with respect to the new buckets ; if we reverse both , then @xmath8 becomes right - satisfied .",
    "the reversal of any other rows is irrelevant to player @xmath8 .",
    "fix a player @xmath8 . first notice that , due to symmetry , reversing any row that for @xmath8 is a @xmath370-row , a @xmath389-row , or a @xmath390-row does not improve or worsen the initial allocation from @xmath8 s point of view .",
    "also , clearly , reversing both the @xmath373-row and the @xmath371-row of a left - satisfied player makes her right - satisfied .",
    "similarly , if @xmath8 is satisfied and has a @xmath372-row , or has a @xmath371-row but no @xmath373-row , or has a @xmath373-row but no @xmath371-row , then reversing those keeps @xmath8 satisfied .",
    "the interesting case is when @xmath8 has both a @xmath373-row and a @xmath371-row .",
    "if @xmath8 is satisfied , then even removing her @xmath373-row leaves all the buckets with at least as much value as the last bucket ; so reversing it keeps @xmath8 satisfied . due to symmetry , this holds for @xmath8 s @xmath371-row as well . if @xmath8 is not satisfied , then the difference of the values of the first and the last bucket will be 2 . like in the proof of lemma [",
    "lem : left - satisfied ] , the number of columns that have @xmath15 in @xmath8 s @xmath373-row and @xmath3 in @xmath8 s @xmath371-row ( i.e. , total value @xmath383 ) are at least as many as the columns that have @xmath391 in @xmath8 s @xmath373-row and @xmath15 in @xmath8 s @xmath371-row ( i.e. , total value @xmath384 ) .",
    "so , by reversing her @xmath373-row , the values of all the `` worst '' ( rightmost ) buckets increase by 1 , the values of some of the `` best '' ( leftmost ) buckets decrease by 1 , and the values of the buckets in the middle either remain the same or increase by 1 .",
    "the difference between the best and the worst buckets now is 1 ( at most ) , so this is a maximin share allocation for @xmath8 and she becomes satisfied . due to symmetry , the same holds for reversing @xmath8 s @xmath371-row as well .",
    "now , what lemma [ lem : reverse - satisfied ] guarantees is that when we reverse some of the rows of the initial @xmath140 , we are left with players that are either satisfied , left - satisfied or right - satisfied .",
    "if the rows are chosen so that there are at most @xmath368 left - satisfied and at most @xmath368 right - satisfied players , then there is an obvious maximin share allocation : to any left - satisfied player we arbitrarily give one of the first @xmath368 buckets , to any right - satisfied player we arbitrarily give one of the last @xmath368 buckets , and to each of the rest of the players we arbitrarily give one of the rest of the buckets . in lemma [ lem : easy - coloring ] below , we prove that it is easy to find which rows to reverse to achieve that .",
    "we use a graph theoretic formulation of the problem for clarity . with respect to the initial buckets ,",
    "we define a graph @xmath392 with @xmath393 $ ] , i.e. , @xmath128 has a vertex for each row of @xmath140 .",
    "also , for each left - satisfied player @xmath8 , @xmath128 has an edge connecting @xmath8 s @xmath373-row and @xmath371-row .",
    "we delete , if necessary , any multiple edges to get a simple graph with @xmath0 edges at most .",
    "we want to color the vertices of @xmath128 with two colors , `` red '' ( for reversed rows ) and `` blue '' ( for non reversed ) , so that the number of edges having both endpoints red is at most @xmath368 and at the same time the number of edges having both endpoints blue is at most @xmath368 .",
    "note that if we reverse the rows that correspond to red vertices , then the players with red endpoints become right - satisfied , the players with blue endpoints remain left - satisfied and the players with both colors become satisfied .",
    "moreover , the initially satisfied players are not affected , and we can find a maximin share allocation as previously discussed .",
    "2em2em    [ lem : easy - coloring ] given graph @xmath128 defined above , in time @xmath394 , we can color the vertices with two colors , red and blue , so that the number of edges with two red endpoints is less than @xmath368 and the number of edges with two blue endpoints is at most @xmath368 .",
    "we start with all the vertices colored blue , and we arbitrarily recolor vertices red , one at a time , until the number of edges with two blue endpoints becomes at most @xmath395 for the first time .",
    "assume this happens after recoloring vertex @xmath396 . before turning @xmath396 from blue to red ,",
    "the number of edges with at most one blue endpoint was strictly less than @xmath395 .",
    "also , the recoloring of @xmath396 did not force any of the edges with two blue endpoints to become edges with two red endpoints .",
    "so , the number of edges with two red endpoints after the recoloring of @xmath396 is at most equal to the number of edges with at most one blue endpoint before the recoloring of @xmath396 , i.e. , less than @xmath395 . to complete the proof , notice that @xmath397 . for the running time , notice that each vertex changes color at most once , and when this happens we only need to examine the adjacent vertices in order to update the counters on each type of edges ( only red , only blue , or both ) .",
    "lemma [ lem : easy - coloring ] completes the proof of correctness for algorithm [ fig : alg-012 ] that is summarized below . for the running time notice that @xmath398 can be computed in @xmath348 , since we get @xmath358 by sorting @xmath399 .",
    "also step [ line : left - sat ] can be computed in @xmath400 ; for each player @xmath8 we scan the first column of @xmath140 to find her ( possible ) @xmath373-row and @xmath371-row , and then in @xmath401 we check whether she is left - satisfied by checking that the positions that have @xmath15 in @xmath8 s @xmath373-row and @xmath3 in @xmath8 s @xmath371-row are at least as many as the positions that have @xmath391 in @xmath8 s @xmath373-row and @xmath15 in @xmath8 s @xmath371-row .",
    "let @xmath402 .",
    "add @xmath403 dummy items with value 0 for everyone .",
    "construct a @xmath404 matrix @xmath140 so that @xmath405 is the @xmath406th item .",
    "find the set of left - satisfied players and their corresponding @xmath373-rows and @xmath371-rows .",
    "[ line : left - sat ] construct a graph @xmath407 , e)$ ] with @xmath408 .",
    "color the vertices of @xmath128 with two colors , red and blue , so that the number of edges having both endpoints red , and the number of edges having both endpoints blue , each is @xmath409 .",
    "reverse the rows of @xmath140 that correspond to red vertices , and keep track of who is satisfied , left - satisfied , or right - satisfied . arbitrarily give some of the first @xmath368 buckets ( columns of @xmath140 ) to the left - satisfied players and some of the last @xmath368 buckets to the right - satisfied players . arbitrarily give the rest of the buckets to the satisfied players .",
    "[ line : allocate_012 ]",
    "proof of theorem [ thm : random - prop ] in what follows we assume that agent @xmath15 chooses first , agent @xmath3 choses second , and so forth .",
    "we consider several cases for the different ranges of @xmath200 .",
    "we first assume that @xmath410 .    it is illustrative to consider the case of @xmath411 and examine the @xmath0th agent that chooses last .",
    "like all the agents in this case , she receives exactly two items ; let@xmath412 be the total value of those items . from her perspective",
    ", she sees @xmath413 values chosen uniformly from @xmath186 $ ] , picks the maximum of those , then u.a.r .",
    "@xmath414 of the rest are removed , and she takes the last one as well . if we isolate this random experiment , it is as if we take @xmath415 , where @xmath416 , @xmath417 , \\forall i$ ] and all the @xmath418s are independent .",
    "we estimate now the probability @xmath419 for @xmath420 .",
    "we will set @xmath421 to a particular value in this interval later on .",
    "rcl ( y_n a ) & = & _ i=1^n+1 _ 0^a ( _ 1jn+1x_j t y = i x_i a - t ) dt + & = & ( n+1 ) _ 0^a ( _ 1jn+1x_j t y=1 x_1 a - t ) dt + & = & _ 0^a ( _ 1jn+1x_j t x_1 a - t ) dt + & = & _ 0^a ( x_1 t x_1 a - t x_2 t ",
    "x_n+1 t)dt + & = & _ 0^a/2 ( x_1 t x_2 t  x_n+1 t)dt + + & & + _",
    "a/2 ^ 1 ( x_1 a - t x_2 t",
    " x_n+1 t)dt + + & & + _ 1^a ( x_1 a - t x_2 t ",
    "x_n+1 t)dt + & = & _ 0^a/2 t^n+1 dt + _",
    "a/2 ^ 1 ( a - t)t^n dt + _ 1^a ( a - t)dt .        in the more general case",
    "where @xmath422 , @xmath423 , we have a similar calculation for the agents that receive only @xmath3 items in the greedy round - robin algorithm , as well as for the first @xmath3 items of the first @xmath214 agents .",
    "let @xmath211 be the total value agent @xmath8 receives , and @xmath424 be the value of her first @xmath3 items . also , recall that @xmath425 .",
    "we now relate the probability that we are interested in estimating , with the probabilities @xmath426 that we already calculated",
    ". we will then proceed by setting @xmath14 appropriately .        to upper bound the first sum",
    ", we do not take into account the third item that the first @xmath214 agents receive . note that the bounds for @xmath426 calculated above , here hold for @xmath427 .",
    "for @xmath428 the same bounds hold for @xmath429 .",
    "i=1^n(y_i < a ) & & _",
    "i=1^(n ) ( w_i < a ) + _ i=(n)+1^n ( y_i < a ) + & = & _ i=1^n ( _ 0^a/2 t^2n+(n)-i+1 dt + _",
    "a/2 ^ 1 ( a - t)^n+(n)-i+1t^n dt + _ 1^a ( a - t)^n+(n)-i+1 dt ) + & = & _ j=1^n ( _ 0^a/2 t^n+(n)+j dt + _",
    "a/2 ^ 1 ( a - t)^(n)+jt^n dt + _ 1^a ( a - t)^(n)+j dt ) + & = & _ j=1^n + _",
    "j=1^n_a/2 ^ 1 ( a - t)^(n)+jt^n dt + _ j=1^n_0^a-1 u^(n)+j du .              finally , for the third sum , we rewrite it as @xmath435 we are going to bound each term separately . consider the case where @xmath436 . for @xmath437",
    ", it can be shown that @xmath438 .",
    "so , @xmath439 on the other hand , when @xmath440 , we have @xmath441 . for @xmath442 and @xmath443 it can be shown that @xmath444 .",
    "of course , for @xmath445 it is true that @xmath446 , and particularly for @xmath447 the sum @xmath448 is bounded by @xmath449 . in general , it is to be expected to have relatively large hidden constants when @xmath200 is then very close to @xmath450 .",
    "this changes quickly though ; when @xmath451 the whole sum is less than @xmath452 . in any case , if @xmath453        so far , we have @xmath456 ( or @xmath457 if @xmath411 ) . in order to complete the proof for this case we use hoeffding s inequality to bound the probability that the average of the values for any agent is too large .",
    "the remaining cases are for @xmath459 .",
    "we give the proof for @xmath460 .",
    "the cases for @xmath461 and @xmath462 differ in small details but they essentially follow the same analysis .",
    "we briefly discuss these cases at the end of the proof .",
    "assume that @xmath463 .",
    "each agent gets at least @xmath60 items but for the analysis below we only consider @xmath464 of them .",
    "we focus on the agent that choses last , i.e. , agent @xmath0 , who has the smallest expected value .",
    "like before , @xmath412 is the total value agent @xmath0 receives , and @xmath465 is the value of her first @xmath464 items . using the fact that the maximum of @xmath466 independent variables that follow @xmath187 $ ] has expected value @xmath467 and variance less than @xmath468 we get          where @xmath469 is the @xmath470-th harmonic number .",
    "now we can bound the probability that any agent receives value less than @xmath452 of her total value .",
    "@xmath471 next , using chebyshev s inequality we have              the exact same proof works when @xmath461 , if we consider two items in @xmath465 and use @xmath472 ( like we would normally do for @xmath473 ) .",
    "notice , however , that instead of @xmath474 in hoeffding s inequality , we have @xmath475 and of course we should adjust @xmath476 $ ] and @xmath477 accordingly .",
    "when @xmath462 on the other hand , we need to consider three items in @xmath465 instead of two , since two items are not enough anymore to guarantee separation of @xmath211 and @xmath212 with high probability .",
    "that said , the proof is the same , but we should adjust @xmath476 $ ] and @xmath477 , and instead of @xmath478 we may choose @xmath479 ."
  ],
  "abstract_text": [
    "<S> we study the problem of computing maximin share guarantees , a recently introduced fairness notion . given a set of @xmath0 agents and a set of goods , the maximin share of a single agent is the best that she can guarantee to herself , </S>",
    "<S> if she would be allowed to partition the goods in any way she prefers , into @xmath0 bundles , and then receive her least desirable bundle . </S>",
    "<S> the objective then in our problem is to find a partition , so that each agent is guaranteed her maximin share . in settings with indivisible goods , </S>",
    "<S> such allocations are not guaranteed to exist , hence , we resort to approximation algorithms . </S>",
    "<S> our main result is a @xmath1-approximation , that runs in polynomial time for any number of agents . </S>",
    "<S> this improves upon the algorithm of procaccia and wang  @xcite , which also produces a @xmath1-approximation but runs in polynomial time only for a constant number of agents . to achieve this </S>",
    "<S> , we redesign certain parts of the algorithm in  @xcite , exploiting the construction of certain , appropriately selected matchings in a bipartite graph representation of the problem . </S>",
    "<S> furthermore , motivated by the apparent difficulty , both theoretically and experimentally , in finding lower bounds on the existence of approximate solutions , we undertake a probabilistic analysis . </S>",
    "<S> we prove that in randomly generated instances there exists a maximin share allocation with high probability . </S>",
    "<S> this can be seen as a justification of the experimental evidence reported in  @xcite , that maximin share allocations exist almost always .    </S>",
    "<S> finally , we provide further positive results for two special cases that arise from previous works . </S>",
    "<S> the first one is the intriguing case of @xmath2 agents , for which it is already known that exact maximin share allocations do not always exist ( contrary to the case of @xmath3 agents ) . </S>",
    "<S> we provide a @xmath4-approximation algorithm , improving the previously known result of @xmath5  @xcite . </S>",
    "<S> the second case is when all item values belong to @xmath6 , extending the @xmath7 setting studied in  @xcite . </S>",
    "<S> we obtain an exact algorithm for any number of agents in this case . </S>"
  ]
}