{
  "article_text": [
    "researchers often represent interactions between components in social and biological systems with networks of nodes and links , and use community - detection algorithms to better understand their large - scale structure . depending on the system under study and the particular research question , the scale of interest varies . for an initial investigation , a birds - eye - view of the entire system may be most appropriate , while a more detailed study most likely will require a finer scale . methods for extracting hierarchically nested modules at different scales do exist @xcite , but there may still be a need for identifying large - scale structures at specific scales @xcite .    when the links represent network flows , modeling the dynamics at different markov times is a natural way to capture the large - scale structures at different scales @xcite . in this approach ,",
    "the original network is rebuilt such that one flow step along a link of the rebuilt network corresponds to the desired number of flow steps on the original network . however",
    ", this approach is inefficient for large networks , because the rebuilt network can be dense to the degree that storage and further analysis is infeasible . to overcome this problem",
    ", we introduce an efficient method that operates directly on the original network .",
    "the method takes advantage of the mechanics of the information - theoretic community - detection method known as the map equation @xcite with no extra overhead cost .    integrating the markov time scaling with the map equation",
    "also allows for efficient community detection of network flows in bipartite networks .",
    "most approaches for bipartite networks build on configuration models , in particular modularity @xcite , or stochastic block models @xcite .",
    "an alternative is to project the bipartite network into a unipartite network and perform the analysis on the unipartite network .",
    "for most assortative networks , such a projection does not destroy any valuable information @xcite .",
    "however , the projection can give an overload of links and be infeasible for large networks .",
    "therefore , the analysis of network flows derived from bipartite networks , such as unipartite collaboration networks obtained from projections of author - paper bipartite networks @xcite , can greatly benefit from evading the projection into overly dense networks . with the map equation for varying markov times",
    ", we can achieve this because a bipartate to unipartite projection corresponds to doubling the markov times .",
    "we begin by explaining the generalization of the map equation to different markov times and then introduce the bipartite generalization .",
    "the map equation measures how well a partition of nodes in possibly nested and overlapping modules can compress a description of flows on a network . because compression is dual to finding regularities in the data @xcite , the modules that gives the best compression also are best at capturing the regularities in the network flows .",
    "the network flows can be explicit flow data , such as the number of passengers traveling between cities , or be modeled by a random walker guided by the constraints set by a directed , weighted network , such as information flows on a citation network .    in the standard formulation of the map equation ,",
    "a random walker is modeled as a _ discrete - time markov process _ and its position in the network is encoded at every transition . in this way , the transition rate of a random walker as well as the encoding rate is 1 .",
    "specifically , the discrete - time transition matrix associated with the network , @xmath0 , labeled with subscript d for _ discrete _ , induces flows between nodes visited with probability @xmath1 by the discrete - time markov process @xmath2 schaub _ et al .",
    "_ generalized the map equation to different markov times by using the corresponding _ continuous - time markov process _ ,",
    "@xmath3 with @xmath4 for the identity matrix @xcite .",
    "the continuous - time markov process has exponentially distributed holding times at each node that correspond to poisson - distributed transitions at average rate 1 @xcite . with uniform time steps @xmath5 ,",
    "the continuous - time markov process is therefore equivalent to the discrete - time process @xmath6 with the continuous - time transition matrix @xmath7 labeled with subscript c for _",
    "continuous_. by using this transition matrix , schaub _ et al .",
    "_ showed the effects of shorter and longer markov times @xmath5 between encodings @xcite .",
    "shorter markov times than 1 mean that the average transition rate of a random walker is lower than the encoding rate of its position , such that the same node will be encoded multiple times in a row . as a result",
    ", the map equation will favor more and smaller modules .",
    "oppositely , longer markov times mean that the average transition rate is higher than the encoding rate , such that not every node on the trajectory will be encoded , and the map equation will favor fewer and larger modules . when a two - level solution is preferred over hierarchically nested modules of different sizes , changing the markov time can in this way highlight salient flow modules at specific scales @xcite .",
    "in detail , for a given partition of nodes into modules , the original map equation for a discrete process at markov time 1 measures the per - step minimum modular description length of flows on the network . for unique decoding of the flow trajectory from one step to another ,",
    "the modular coding scheme is designed to only require memory of the previously visited module and not the previously visited node .",
    "the map equation therefore has one or , for hierarchically nested modules , more _ index codebooks _ for encoding steps between modules and _ modular codebooks _ for encoding steps within modules . minimizing the map equation over all possible network partitions",
    "therefore gives the assignments of nodes into modules that best capture modular flows on the network .",
    "that is , the map equation can identify modules in which flows stay for a relatively long time .    as input , the map equation takes the ergodic node visit - rates @xmath8 , module exit - rates @xmath9 , and module enter - rates @xmath10 of the flow trajectory for nodes @xmath11 and modules",
    "it estimates the average code length of each codebook from the shannon entropy , which sets the theoretical lower limit according to shannon s source code theorem @xcite . with @xmath13 for the total rate of use of module codebook @xmath14 , the per - step average code length of events @xmath15 in module @xmath14 is @xmath16 similarly , with @xmath17 for the total rate of use of the index codebook in a two - level description , the per - step average code length of module enter - events @xmath18 is @xmath19 with modular map @xmath20 and the rate of use of each codebook taken into account , the map equation takes the form @xmath21    for an efficient generalization of the map equation to markov times other than 1 , we first linearize in @xmath5 and @xmath0 the continuous - time transition matrix @xmath22 in [ eq : continuoustransition ] . for @xmath23 , @xmath24 is a valid approximation , but we are also interested in markov times greater than 1 .",
    "thus , we consider the linearized transition matrix @xmath25 which captures markov times below 1 with self - links and markov times above 1 with transition rates proportional to the average rate of the underlying poisson process .",
    "moreover , at markov time 1 it recovers the discrete - time transition matrix in [ eq : discretemarkov ] .",
    "this linearization also has an appealingly simple effect on the map equation . for markov time @xmath5",
    ", all node visit rates @xmath8 remain the same , since the relative visit rates at steady state do not depend on how often the visits are sampled . however , the module exit - rates @xmath9 and module enter - rates @xmath10 change linearly with the markov time , since the number of random walkers that moves along any link between nodes during time @xmath5 is directly proportional to @xmath5 as shown in [ eq : linearizedtransition ] .",
    "therefore , @xmath26 the rescaled module exit- and enter - rates affect both the module code length in [ eq : modulecodelength ] and the rate of use of all codebooks . with @xmath27 for the markov time , the map equation for markov time @xmath5 takes the form @xmath28    the simple flow rescaling enables efficient community detection at different markov times with the search algorithm infomap @xcite . while infomap is designed to minimize the original map equation over possible network partitions , it can be applied to the reconstructed network that corresponds to the transition matrix for a given markov time .",
    "this works for the continuous - time transition matrix @xmath22 in [ eq : continuoustransition ] @xcite , as well as for its linearized form in [ eq : linearizedtransition ] .",
    "while reconstructing the linearized transition matrix is much faster and does not densify the network , further improvement is possible .",
    "in fact , the reconstruction can be completely evaded .",
    "since the self - links only indirectly affect the map equation for markov time @xmath5 in [ eq : mapeqmarkovt ] by reducing the transition rates between nodes and modules , exactly the same effect can be achieved by directly rescaling infomap s internal representation of flows along links by a factor @xmath5 .",
    "this is the approach we take .",
    "infomap takes as input the original network and the markov time @xmath5 , calculates the ergodic node visit and transition rates , and then rescales the transition rates by a factor @xmath5 without any network reconstruction at all .",
    "figure [ fig : coderate ] shows an example with a sierpinski network . for the shortest markov times , putting every node in its own module gives the shortest code length . for longer markov times , solutions with larger and larger modules",
    "give the shortest code length .",
    "the markov time sets the scale of the flow modules .",
    "( a ) a schematic sierpinski network with hierarchically nested modules .",
    "( b ) the code length for different partitions indicated in the network as a function of the markov time .",
    "the partition with the shortest code length for a given markov time is highlighted . ]",
    "the simple flow rescaling gives a slightly different encoding of the dynamics than the continuous - time markov process @xcite .",
    "the flow rescaling only operates on transitions between nodes directly connected in the original network and does only indirectly consider transitions between nodes connected by multi - step trajectories .",
    "contrarily , the continuous - time markov process directly considers a spectrum of these trajectories .",
    "their lengths are given by the transition matrix power in the expanded continuous - time transition matrix in [ eq : continuoustransition ] , @xmath29 such that they are poisson distributed with mean length @xmath5 . from a coding perspective",
    ", the continuous - time transition matrix allows a random walker on a multi - step journey on the original network to move out of a module and back again between two encodings without triggering any module exit- and enter - codewords . in the flow rescaling approach , however , such moves will indeed be encoded . as a result",
    ", the continuous - time markov process allows flows to stay longer within a given module and therefore typically gives smaller modules and shorter description length .",
    "figure [ fig : zoomlenscomp ] illustrates the effects of the different dynamics on a weighted , undirected co - authorship network with 552 physicists @xcite . while the flow rescaling gives longer code lengths especially for longer markov times ( [ fig : zoomlenscomp](a ) ) , and somewhat larger modules for the same markov time ( [ fig : zoomlenscomp](b ) ) , the overall patterns are the same .    comparing flow rescaling with a continuous - time markov process .",
    "panels a - c show the effect on a weighted , undirected co - authorship network with 552 physicists @xcite .",
    "standard deviations are smaller than the line width . ]",
    "the network and problem at hand may set a natural markov time , but often the most appropriate markov time is unknown . based on the rationale that good modular solutions should give good compressions , schaub _ et al .",
    "_ suggested to compare the code length of the modular description by the map equation at a given markov time with the entropy rate of the corresponding markov process , @xmath30 which sets the lower limit on the description length @xcite .",
    "we use the same compression gap approach , but for better performance instead obtain the entropy rates at different markov times by sampling random walks on the original network .",
    "that is , we repeatedly sample start nodes proportional to their ergodic visit - rates , and , for each start node , repeatedly perform random walks of lengths sampled from a poisson distribution with expected length @xmath5 . by averaging over the entropy of the final node for each start node",
    ", we can estimate the entropy rate of the continuous - time markov process without constructing the corresponding continuous - time transition matrix @xmath22 .",
    "note that we can not use the linearized transition matrix in [ eq : linearizedtransition ] , because the corresponding entropy rate is only a good estimate for @xmath23 and does not converge to the entropy rate of the independent and identically distributed process for long markov times , @xmath31 , which is also the one - module solution of the map equation for any markov time .",
    "figure [ fig : zoomlenscomp](a ) shows that the sampled estimate performs well and practically overlaps with the markov entropy obtained from the continuous - time transition matrix .",
    ".  _ looked at the relative compression gap @xcite , but to avoid inflating small differences for short markov times , in [ fig : zoomlenscomp](c ) we show the absolute compression gap , @xmath32 .",
    "for this co - authorship network , the compression gaps indicate a local minimum just shorter than markov time 2 for the rescaled flow and a local quasi - minimum just longer than markov time 2 for the continuous - time markov process .",
    "interestingly , these markov times correspond to about the same number of modules , since the flow rescaling generates slightly larger modules for the same markov time .",
    "overall , the flow rescaling is in practice computationally much more efficient than the continuous - time markov process , since the network must not be rebuilt for each markov time .",
    "the continuous - time markov process generates dense networks for long markov times , which results in infeasible solutions for large networks .",
    "contrarily , the flow rescaling has similar fast performance for all markov times .",
    "however , for networks so sparse that random fluctuations can cause quenched modules @xcite , it can pay off to incorporate longer trajectories .",
    "then extending the linearized transition matrix in [ eq : linearizedtransition ] with quadratic terms from the continuous - time transition matrix @xmath22 in [ eq : continuoustransition ] can provide an efficient compromise between the slower continuous - time markov process , which makes the network denser , and the faster flow rescaling , which maintains the network density .      a complete projection of a bipartite network with _ primary nodes _ and _ feature nodes _ into a unipartite network with only primary node gives an overload of links already for moderately dense networks @xcite .",
    "here we explore three ways to overcome this problem for the map equation framework : projecting by rescaling the markov time , treating the network as unipartite , and projecting by sampling important links .",
    "flow rescaling makes a projection effortless , because projecting a bipartite network into a unipartite network essentially corresponds to a rescaling of the markov time . with markov time 2",
    ", a random walker will take two steps between two encodings such that the exit and enter rates according to [ eq : markovexit , eq : markoventer ] become @xmath33 if such random walkers with a cycle of two are released on the primary nodes , only the primary node visits will be encoded . in this way",
    ", the map equation takes exactly the same form as in [ eq : mapeqmarkovt ] with @xmath34 , @xmath35 with the only difference that the visit rates of primary nodes double and the visit rates of feature nodes become 0 .",
    "therefore , with subscript @xmath36 for primary nodes and @xmath37 for features nodes , @xmath38 even if visits to feature nodes do not contribute to the code length , the flow rates between modules depend on their module assignments .",
    "therefore , both primary nodes and feature nodes are clustered . since the flow rescaling treats movements in and out of modules differently than with a projected and fully rebuilt network as described above , the projection with rescaled markov time best approximates the full projection for small flows between modules ( see [ fig : bipsweep ] ) .",
    "projecting bipartite networks corresponds to doubling the markov time and increases the scale of flow modules .",
    "( a ) a schematic bipartite network with link weight @xmath39 between primary nodes ( circles ) and feature nodes ( squares ) in the same community and link weight @xmath40 between nodes in different communities .",
    "( b ) the code length for different bipartite dynamics and coding schemes as a function of the relative out weight . ]    a similar approach to doubling the markov time is to instead use random walkers that leap over every other node .",
    "that is , the dynamics take place on the full network with primary nodes and feature nodes as above , but only steps from feature nodes to primary nodes are accounted for . by rescaling the total visit rates to 1 , the node visit rates take the same form as in [ eq : bipmarkovp , eq : bipmarkovf ] , but the transition rates in [ eq : markovexit , eq : markoventer ] now depend on the relative amount of flow that moves between modules from feature nodes to primary nodes . for undirected networks ,",
    "the flow is equal in both directions such that the bipartite leap dynamics correspond to markov time @xmath41 in [ eq : markovexit , eq : markoventer ] .",
    "that is , the bipartite leap dynamics effectively correspond to the standard unipartite dynamics in which the node type is ignored as shown in [ fig : bipsweep ] . while only encoding primary nodes",
    "offsets the code length compared to the unipartite dynamics , the compression gain between different modular solutions remains exactly the same for the schematic network in [ fig : bipsweep ] .",
    "in general , the difference is so small that an approach based on the bipartite leap dynamics is superfluous , and we will instead use the unipartite dynamics when comparing different approaches .    the research question at hand will determine which approach should be favored . in the example in [ fig : bipsweep ] , the two approaches that correspond to dynamics with markov time 2 , full projection and projection with rescaled markov time , favor the two - module solution until about 10% relative out - weight .",
    "therefore , they can work well for sparse networks or interest in large - scale structures .",
    "instead , the two approaches that correspond to markov time 1 , the unipartite and bipartite leap dynamics , favor the two - module solution until about 20% relative out - weight . therefore , they can work well for dense networks or interest in small - scale structures .    with two methods that can work well at different scales",
    ", we now turn to a fast projection approach based on sampling of important links that resembles the method we used for estimating markov entropies above .",
    "it is an adaptive method that can work well at a wider range of scales .",
    "sampling of important links works well in practice , because most links in a weighted projection will carry redundant information for community detection .",
    "therefore , only the important and non - redundant links must be sampled .",
    "much like the minhash approach @xcite , we seek to identify similar nodes of one type . in our case , nodes that are frequently visited in sequence by a random walker that performs two - step dynamics on a bipartite network . in detail",
    ", we associate each feature node with the top @xmath42 primary nodes selected by link weight , or randomly for ties as in unweighted networks . for each primary node , we take the top @xmath42 primary nodes associated with each of its connected feature node and include them in a candidate set . for each node in the candidate",
    "set , we compute the two - step random walk probability to go to other nodes also in the candidate set and create links to the top @xmath43 nodes . for all experiments in this paper , we used @xmath44 and @xmath45 . for these choices , we found that the sampling approach can be both fast and accurate for dense as well as sparse networks .",
    "to compare the three methods , we tested their performance on bipartite benchmark networks . to construct the bipartite benchmark networks , we built on the standard approach with a generative model for unipartite networks @xcite .",
    "we assigned both _",
    "primary nodes _ and _ feature nodes _ to communities and then added @xmath46 unweighted and undirected links between each primary node and @xmath47 randomly chosen feature nodes in the same community and @xmath48 randomly chosen feature nodes in other communities . specifically , we used 32 communities , each with 32 primary nodes with average degree 16 , and varied the number of links between communities and the number of feature nodes for more or less sparse networks .",
    "fast projection performs well on both sparse and dense bipartite benchmark networks . the performance of fast projection , the bipartite dynamics , and the unipartite dynamics measured by the normalized mutual information , nmi , as a function of the number of feature nodes and the number of links between communities , @xmath49 in ( a ) , 13 in ( b ) , 14 in ( c ) , and 15 in ( d ) .",
    "filled area represents standard deviation . ]",
    "@@lrrrr@1emrrrr@1emrrrr@1emrrr@ & & & & & & & + primary nodes & & & & & & & + feature nodes & & & & & & & + links & & & & & & & + & unipart . & bipart .",
    "& f. proj .",
    "& & unipart . & bipart .",
    "& f. proj .",
    "& & unipart . & bipart .",
    "& f. proj .",
    "& & unipart . & bipart .",
    "& f. proj . +",
    "* two - level * + modules & 3,100 & 2,200 & 2,500 & & 740 & 36 & 660 & & 9,500 & 7,900 & 7,100 & & 250 & 1 & 35 + _ nmi _ + unipartite & 1.00 & & & & 1.00 & & & & 1.00 & & & & 1.00 & & + bipartite & 0.91 & 1.00 & & & 0.04 & 1.00 & & & 0.59 & 1.00 & & & 0.00 & 1.00 & + fast projection & 0.94 & 0.92 & 1.00 & & 0.08 & 0.00 & 1.00 & & 0.77 & 0.57 & 1.00 & & 0.00 & 0.00 & 1.00 + * multilevel * + levels & 6 & 5 & 6 & & 2 & 2 & 4 & & 5 & 3 & 4 & & 2 & 1 & 2 + modules & 7,300 & 3,100 & 4,200 & & 740 & 36 & 900 & & 12,000 & 8,000 & 8,000 & & 250 & 1 & 35 + _ hnmi _ + unipartite & 1.00 & & & & 1.00 & & & & 1.00 & & & & 1.00 & & + bipartite & 0.66 & 1.00 & & & 0.04 & 1.00 & & & 0.25 & 1.00 & & & 0.00 & 1.00 & + fast projection & 0.66 & 0.58 & 1.00 & & 0.02 & 0.00 & 1.00 & & 0.59 & 0.23 & 1.00 & & 0.00 & 0.00 & 1.00 +    the bipartite benchmark test reveals the effect of different effective markov times ( [ fig : bipbench ] ) .",
    "standard unipartite dynamics or the bipartite leap dynamics , which correspond to markov time 1 , work well down to relatively high number of links between communities as long as the number of feature nodes is limited . with increasing number of feature nodes ,",
    "the network becomes sparser , and the dynamics generate quenched modules .",
    "the bipartite dynamics , which approximates a projection of the network and corresponds to markov time 2 , can not resolve communities as accurately as the unipartite approach for dense networks with high number of links between communities ( [ fig : bipbench ] ) . on the other hand , the bipartite dynamics can better handle sparse networks with many feature nodes .",
    "finally , fast projection effectively adapts the markov time and handles both dense and sparse networks on par or better than the approaches with fixed markov times .",
    "unless the research question calls for a specific markov time , fast projection stands out as a good choice .",
    "finally we applied the three different methods on four real - world bipartite networks ( see [ table : realnets ] ) . for each network",
    "we report the number of primary and feature nodes and the number of links .",
    "we applied both two - level and multilevel community detection with the search algorithm infomap @xcite . in the first approach , we forced infomap to find two - level solutions , while in the second approach we let infomap find the multilevel solution with the optimal number of nested levels for best compression of the dynamics .",
    "we report the standard nmi for the two - level approach @xcite and the generalized nmi for the multilevel approach @xcite . for the multilevel approach",
    ", we also report the number of levels for the best solution as well as the total number of modules across all levels .",
    "the real bipartite networks include an author - paper network , * arxiv collaboration * @xcite , a document - word network , * 20 newsgroups * @xcite , a user - group network , * youtube * @xcite , and a user - movie network , * movielens * @xcite .",
    "all networks are popular for performing benchmark experiments .",
    "the comparison between the methods applied on real networks confirms the results from the synthetic benchmark tests : unipartite dynamics reveal more and smaller modules than bipartite dynamics because of the inherently shorter markov time of unipartite dynamics ( [ table : realnets ] ) .",
    "again , fast projection effectively adapts its markov time and the network determines whether fast projection most resembles unipartite or bipartite dynamics . for the 20 newsgroups and movielens networks , the nmi scores are low because the solutions of the unipartite and bipartite dynamics basically have one dominating module and many tiny modules .",
    "the two - level results carry over to the multilevel solutions , and unipartite dynamics typically give deeper solutions than bipartite dynamics .",
    "overall , fast projection adapts the effective markov time and can handle both sparser and denser networks .",
    "we introduced an efficient method to perform community detection of network flows at different markov times .",
    "the method takes advantage of the information - theoretic machinery of the map equation and handles projections of bipartite networks as well . in synthetic and real - world networks",
    ", we showed how modifying the markov times influences the size of the identified communities .",
    "depending on the network and question at hand , a shorter markov time with smaller communities in deeper multilevel structures or longer markov time with larger communities in shallower multilevel structures may be more appropriate .",
    "for bipartite networks , we also introduced a fast projection approach that effectively adapts the markov time for robust communities .",
    "while current methods require expensive and often infeasible network reconstructions , the introduced methods offer efficient alternatives applicable to large networks .",
    "26ifxundefined [ 1 ] ifx#1 ifnum [ 1 ] # 1firstoftwo secondoftwo ifx [ 1 ] # 1firstoftwo secondoftwo `` `` # 1''''@noop [ 0]secondoftwosanitize@url [ 0 ]",
    " + 12$12  & 12#1212_12%12@startlink[1]@endlink[0]@bib@innerbibempty @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * , ( ) @noop * * ,   ( ) @noop * * ,   ( ) in  @noop _ _  ( ,  )  pp .   @noop * * ,   ( ) @noop * * ,   ( ) @noop `` , '' ( ) ,   @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * ,   ( ) @noop * * , ( ) @noop * * ,   ( ) @noop `` , ''   ( ) ,   @noop `` , ''   ( ) ,   in  @noop _ _ ( ,  )  pp ."
  ],
  "abstract_text": [
    "<S> community detection of network flows conventionally assumes one - step dynamics on the links . for sparse networks and interest in large - scale structures , longer timescales </S>",
    "<S> may be more appropriate . </S>",
    "<S> oppositely , for large networks and interest in small - scale structures , shorter timescales may be better </S>",
    "<S> . however , current methods for analyzing networks at different timescales require expensive and often infeasible network reconstructions . to overcome this problem , </S>",
    "<S> we introduce a method that takes advantage of the inner - workings of the map equation and evades the reconstruction step . </S>",
    "<S> this makes it possible to efficiently analyze large networks at different markov times with no extra overhead cost . </S>",
    "<S> the method also evades the costly unipartite projection for identifying flow modules in bipartite networks . </S>"
  ]
}