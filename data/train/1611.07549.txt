{
  "article_text": [
    "small and medium - sized enterprises ( smes ) play a decisive role in global software industry . in many countries , like the us , brazil or china ,",
    "these companies represent up to 85% of all software organisations @xcite and carry out the majority of software development @xcite .",
    "nevertheless , smes are confronted with special circumstances like limited resources , lack of expertise or financial insecurity .",
    "[ [ problem ] ] problem + + + + + + +    while there are many articles focusing on process improvement in smes  @xcite , we found no study that looks at specific quality assurance ( qa ) techniques and their application in this context .",
    "contrary to this observation , the properties of automated static analysis techniques seem to be suitable for smes .",
    "the benefits of such techniques lie in their low - cost application and their potential to detect critical quality defects @xcite .",
    "such defects are risky for the further development and increase costs .",
    "these arguments are promising for small software enterprises and their need for efficient quality assurance .",
    "[ [ research - objective ] ] research objective + + + + + + + + + + + + + + + + + +    our goal is to answer the question whether smes can benefit from automated static analysis techniques .",
    "is it possible to introduce a set of such techniques in their existing projects with low effort ?",
    "what kind of defects can be found using these techniques ? finally , is the perceived usefulness for the enterprises high enough to justify the needed effort ?",
    "we think that these aspects are useful for future decisions in smes on using static analysis techniques in their projects .",
    "[ [ contribution ] ] contribution + + + + + + + + + + + +    in this article , we describe our experience in analysing five projects of five smes using three different static analysis techniques : code clone detection , bug pattern detection and architecture conformance analysis .",
    "we evaluate the effort that is needed to introduce these techniques , the pitfalls we came across and how the participating enterprises evaluated the presented techniques as well as the defects we discovered in their projects .",
    "we describe our experiences with transferring static analysis technology to small and medium - sized enterprises .",
    "this section illustrates the research context , i.e. , the participating enterprises , our guiding research questions , the regarded static analysis techniques , the procedure we used to get answers to the research questions and finally the study objects we employed to gather the experiences .",
    "fundamental for our research was the collaboration with five smes , all resident in the munich area and selected through personal contacts and a series of information events and workshops .",
    "details regarding the selection process can be found in sec .  [",
    "sec : proc ] . following the definition of the european commission  @xcite , one of the participating enterprises is micro- , two are small and two are medium - sized considering their staff head count and annual turnover . the presented research is based on the experience with these enterprises gathered in a project from march 2010 to april 2011 .",
    "smes exhibit special characteristics , such as generalist employees instead of specialists for quality assurance .",
    "hence , smooth introduction and application are necessary so that the enterprises can adopt and make use of static analysis .",
    "we further break this down into two sub - questions :      static analysis is tightly coupled to tools that perform and report the analysis .",
    "hence , the ease to introduce and apply static analysis also depends on how many and which technical problems the software engineers need to solve .",
    "if the effort necessary to bring the analyses up and running is too large , it can be a killer criterion for an sme , which can not afford to reserve extra capacities for that .",
    "therefore , we analyse the effort spent in the introduction and application .      beyond",
    "how easy or problematic it is to introduce and apply static analysis in smes , we are interested in whether we can produce useful results for them .",
    "even a small effort should not be spent if there is no return on investment .",
    "we again break this question down into two sub - questions :      we establish a measure of usefulness by analysing the types and numbers of defects found by using the static analysis tools at the sme . if critical defects can be found , the application of the techniques is considered useful .",
    "we neither focus on specification defects and whether they can be found at all , nor do we perform cause and effects analyses for defects except for some criticality assessments .",
    "we add the subjective perception of our project partners .",
    "how do they interpret the results of the static analysis tools ?",
    "do they believe they can work with those tools and are they going to apply them continuously in their future projects ? this way , we augment the information we gained from defect analysis .",
    "static analysis is known as the checking of software against certain properties without executing it .",
    "it includes manual techniques , such as reviews and inspections , as well as automated techniques . as manual analyses are time - consuming and prone to missing problems in the huge amount of code to analyse , automation has high potential .",
    "for example , to detect simple and reoccurring problems in source code , such as using `` = = '' instead of `` equals '' to compare strings in java , should not be the task of human reviewers .",
    "they should concentrate on the more subtle and domain - related problems . from the interviews with our partners and the experiences at our research groups , we chose three important techniques , which we introduce in detail in the following .",
    "technically , we employ the open - source tool conqat for code clone detection and architecture conformance analysis as well as for results processing of bug pattern detection .",
    "modern programming languages , particularly object - oriented ones , offer various abstraction mechanisms to facilitate reuse of code fragments , but copy - paste is still a widely employed reuse strategy .",
    "this often leads to numerous duplicated code fragments  so called clones  in software systems . as stated in the surveys of koschke @xcite and roy and cordy @xcite",
    ", cloning is problematic for software quality for several reasons :    * cloning unnecessarily increases program size and thus efforts for size - related activities like inspections and testing . *",
    "changes , including bug fixes , to one clone instance often need to be made to the other instances as well , again increasing efforts . *",
    "inconsistently performed changes to duplicated source code fragments can introduce bugs .",
    "code clone detection is an automated static analysis technique that focuses on finding duplicated code fragments .",
    "one of the most important metrics offered by this technique is _ unit coverage _ , which is the probability that an arbitrarily chosen source statement ( i.e.  a unit ) is part of a clone .",
    "another metric called _ blow - up _ denotes the ratio of the unit count of the current software w.r.t .",
    "the unit count of a hypothetical software without clones @xcite .",
    "moreover , two terms are important for clone detection : a _ clone class _ defines a set of similar code fragments and a _ clone instance _ is a representative of a clone class @xcite .",
    "we differentiate between conventional clone detection and gapped clone detection . during conventional clone detection ,",
    "clones are considered to be syntactically similar copies ; only variable , type , or function identifiers could be changed @xcite .",
    "in contrast , gapped clone detection reveals clones with further modifications ; statements could be changed , added , or removed @xcite . while clones are an indicator of bad design , the difference between the two approaches is that only the results of gapped clone detection can reveal defects that lead to failures , which arise through unconscious , inconsistent changes in instances of a clone class .",
    "clone detection is supported by a number of free and commercial tools .",
    "the most popular of them are ccfinder , conqat , clonedr , and axivion bauhaus suite .",
    "the former two are free , while the latter two are commercial .      by this term",
    "we refer to a technique for automated detection of a variety of defects .",
    "bug patterns have been thoroughly investigated , e.g.  in @xcite , and compared with other frequently used software quality assurance techniques such as code reviews or testing @xcite .",
    "bug patterns represent a scalable approach to efficiently reveal defects or possible causes thereof .",
    "following wagner et al .",
    "@xcite they can be cost - efficient after detecting only three field defects .",
    "their detectors , aka _ rules _ , aim at structural patterns recognisable from source code , executables and meta - data such as source code comments and debug symbols to gain as much knowledge as possible from a static perspective .",
    "this knowledge encompasses obvious bugs , rather complex heuristics for latent defects , e.g.  code clones ( focused in sec .",
    "[ sec : methods_clones ] ) , and less critical issues of coding style .    because of the large bandwidth of defects , bug patterns are categorised along a variety of tool - specific , non - standard criteria .",
    "a reason for that is that generally applicable defect classifications are rare , vague or difficult to use in practice @xcite .",
    "the tools used for this report classify their rules according to the consequences of findings such as security vulnerability , performance loss or functional incorrectness . by the term _ finding _ we denote that a rule was applied at a specific location .",
    "often , findings are themselves categorised by their severity and their confidence levels .",
    "many of the rules are realised by means of individual lexers and parsers , by using compiler infrastructures , or by more reusable means such as pattern or rule languages and machine - learning .",
    "rules for latent defects and coding style often stem from abstract source code metrics as , e.g. , realised in ferzund , ahsan , and wotawa @xcite . among the wide variety of tools @xcite available for bug pattern detection ,",
    "free and more popular ones are , e.g. , splint for c , cppcheck for c++ , findbugs for java as well as fxcop for c#.      the phenomenon of architectural erosion is a widely documented problem  @xcite .",
    "architectural knowledge erodes or even gets lost during the lifetime of a system .",
    "accordingly , the documented and implemented architectures are drifting apart from each other .",
    "this effect leads to a downward spiralling maintainability of the system . in some cases the effort needed to re -",
    "implement the whole system becomes lower than to maintain it .",
    "to counteract this situation different approaches are used to compare the system s implementation with its intended architecture .",
    "passos et al .",
    "@xcite identify three static concepts existing for architecture conformance analysis : _ reflexion models ( rm ) _ , _ source code query languages ( scql ) _ and _ dependency structure matrices ( dsm)_.    _ reflexion models _ koschke and simon @xcite compare two models of a system to each other and check their conformance .",
    "the first model usually represents the intended architecture , the second one the implementation of the system  @xcite .",
    "the intended architecture consists of components and allowed relationships between components , expressed as rules .",
    "each component itself can contain sub - components .",
    "the system s code is mapped to these components and then analysed for conformance to the given rules .",
    "this technique is used by the commercial tools sonarj and structure101 as well as the open - source tools conqat and dependometer .",
    "there are tools using _ scql _ like semmle.ql  @xcite or _ dsm _ like lattix  @xcite , for the sake of brevity not further explained here .",
    "both of these concepts rely strongly on the realisation of the system and can not provide an architecture specification that is independent of the system s implementation  @xcite .",
    "for our investigation , we collaborate with five smes .",
    "these companies cover various business and technology domains , e.g.  corporate and communal controlling , form letter processing as well as diagnosis and maintenance of embedded systems .",
    "four of them are involved in commercial software development , one in software quality assurance and consulting .",
    "the latter could not provide an own software project .",
    "following the suggestion of the partner without a software project , we instead chose the humanitarian open - source system openmrs , a development of the equally named multi - institution , non - profit collaborative . hence , our study objects are the five software systems briefly described in tab .  [",
    "fig : studyobjects ] .",
    "these software systems encompass between 100 and 600 kloc .",
    "the developments of sos 1 to 4 are conducted or audited by the study subjects and started at most seven years ago .",
    "the project teams contain less than ten persons . except for openmrs",
    ", they are located in the munich area .",
    "the development of sos 1 and 2 has already been finished before our project started .",
    "* `` projects have been developed cleanly or without [ need of ] architecture . '' * `` manual inspection was carried through . ''",
    "* `` the prerequisites  would have needed to be established for our projects .",
    "manual inspection ( code reviews ) already takes place irregularly . ''",
    "* `` it was not known to us . ''          * `` manual [ code ] analysis is significantly more cost - intensive , ",
    "clone detection is only feasible with tool support . ''",
    "* `` we learned about concepts , experiences and tools  it is easier to become acquainted with [ a project if its architecture conforms to its documented specification ] . '' * `` clones are necessary within short periods of development . ''",
    "_ strengths : _ `` seamless process for requirements qa  regarded design guidelines for all languages used  flexible adaptation of guidelines to customer needs  performed qa provisions ( from unit testing to selective pair programming ) seem to work  so far we only experienced high customer satisfaction  mature in testing techniques and management . ''",
    "_ weaknesses : _ `` no consequent qa provisions  no systematic qa  automation and tool usage either project specific or even left out  still learning to apply the tools . ''",
    "+ * q7 ) * _ where do you expect the highest potential of your organisation to improve its software quality ? _    * `` consequent qa provisions , '' * `` integrated tools and more automation ",
    "qa dashboard for project managers , '' * `` better knowledge transfer between teams and projects , '' * `` improved quality control ",
    "backflow of qa results into development process . ''",
    "_ positive : _",
    "`` important '' , `` high '' , `` trend analyses are important '' , `` very important , because of early and efficient defect detection  help identify structural deficits  ease [ code ] maintenance  quality improvement starting with first build  for internal projects better control and indication of deficits . ''"
  ],
  "abstract_text": [
    "<S> today s small and medium - sized enterprises ( smes ) in the software industry are faced with major challenges . while having to work efficiently using limited resources they have to perform quality assurance on their code to avoid the risk of further effort for bug fixes or compensations . </S>",
    "<S> automated static analysis can reduce this risk because it promises little effort for running an analysis . </S>",
    "<S> we report on our experience in analysing five projects from and with smes by three different static analysis techniques : code clone detection , bug pattern detection and architecture conformance analysis . </S>",
    "<S> we found that the effort that was needed to introduce those techniques was small ( mostly below one person - hour ) , that we can detect diverse defects in production code and that the participating companies perceived the usefulness of the presented techniques as well as our analysis results high enough to include the techniques in their quality assurance . </S>"
  ]
}