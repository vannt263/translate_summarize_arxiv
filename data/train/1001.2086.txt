{
  "article_text": [
    "the idea of an automatic structure goes back to bchi and elgot who used finite automata to decide , e.g. , presburger arithmetic  @xcite .",
    "automaton decidable theories  @xcite and automatic groups  @xcite are similar concepts .",
    "a systematic study was initiated by khoussainov and nerode  @xcite who also coined the name `` _ automatic structure _ '' .",
    "in essence , a structure is automatic if the elements of the universe can be represented as strings from a regular language and every relation of the structure can be recognized by a finite state automaton with several heads that proceed synchronously .",
    "automatic structures received increasing interest over the last years  @xcite .",
    "one of the main motivations for investigating automatic structures is that their first - order theories can be decided uniformly ( i.e. , the input is an automatic presentation and a first - order sentence ) .",
    "automatic structures form a subclass of recursive ( or computable ) structures .",
    "a structure is recursive , if its domain as well as all relations are recursive sets of finite words ( or naturals ) .",
    "a well - studied problem for recursive structures is the isomorphism problem , where it is asked whether two given recursive structures over the same signature ( encoded by turing - machines for the domain and all relations ) are isomorphic .",
    "it is well known that the isomorphism problem for recursive structures is complete for the first level of the analytical hierarchy @xmath0 .",
    "in fact , @xmath0-completeness holds for many subclasses of recursive structures , e.g. , for linear orders , trees , undirected graphs , boolean algebras , abelian @xmath4-groups , see @xcite .",
    "@xmath5-completeness of the isomorphism problem for a class of recursive structures implies non - existence of a good classification ( in the sense of @xcite ) for that class @xcite .    in @xcite",
    ", it was shown that also for automatic structures the isomorphism problem is @xmath0-complete . by a direct interpretation , it follows that for the following classes the isomorphism problem is still @xmath0-complete @xcite : automatic successor trees , automatic undirected graphs , automatic commutative monoids , automatic partial orders , automatic lattices of height 4 , and automatic 1-ary functions . on the other hand ,",
    "the isomorphism problem is decidable for automatic ordinals @xcite and automatic boolean algebras @xcite .",
    "an intermediate class is the class of all locally - finite automatic graphs , for which the isomorphism problem is complete for @xmath6 ( third level of the arithmetical hierarchy ) @xcite .    for many interesting classes of automatic structures ,",
    "the exact status of the isomorphism problem is open . in the recent survey",
    "@xcite it was asked for instance , whether the isomorphism problem is decidable for automatic equivalence relations and automatic linear orders . for the latter class , this question was already asked in @xcite . in this paper , we answer these questions .",
    "our main results are :    * the isomorphism problem for automatic equivalence relations is @xmath1-complete . *",
    "the isomorphism problem for automatic successor trees of finite height @xmath7 ( where the height of a tree is the maximal number of edges along a maximal path ) is @xmath8-complete . *",
    "the isomorphism problem for automatic linear orders is hard for every level of the arithmetical hierarchy .",
    "most hardness proofs for automatic structures , in particular the @xmath0-hardness proof for the isomorphism problem of automatic structures from @xcite , use transition graphs of turing - machines ( these graphs are easily seen to be automatic ) .",
    "this technique seems to fail for inherent reasons , when trying to prove our new results .",
    "the reason is most obvious for equivalence relations and linear orders .",
    "these structures are transitive but the transitive closure of the transition graph of a turing - machine can not be automatic in general ( it s first - order theory is undecidable in general ) . hence , we have to use a new strategy .",
    "our proofs are based on the undecidability of hilbert s @xmath9 problem .",
    "recall that matiyasevich proved that every recursively enumerable set of natural numbers is diophantine @xcite .",
    "this fact was used by honkala to show that it is undecidable whether the range of a rational power series is @xmath10 @xcite .",
    "using a similar encoding , we show that the isomorphism problem for automatic equivalence relations is @xmath1-complete .",
    "next , we extend our technique in order to show that the isomorphism problem for automatic successor trees of height @xmath7 is @xmath8-complete . in some sense , our result for equivalence relations makes up the induction base @xmath11 . finally , using a similar but technically more involved reduction",
    ", we can show that the isomorphism problem for automatic linear orders is hard for every level of the arithmetical hierarchy .",
    "in fact , since our proof is uniform on the levels in the arithmetical hierarchy , it follows that the isomorphism problem for automatic linear orders is at least as hard as true arithmetic ( the first - order theory of @xmath12 ) . at the moment",
    "it remains open whether the isomorphism problem for automatic linear orders is @xmath0-complete .",
    "let @xmath13 . let @xmath14 $ ]",
    "be a polynomial with non - negative integer coefficients .",
    "we define @xmath15 if @xmath4 is not the zero - polynomial , then @xmath16 .",
    "details on the arithmetical hierarchy can be found for instance in @xcite .",
    "with @xmath17 we denote the @xmath18 ( existential ) level of the arithmetical hierarchy ; it is the class of all subsets @xmath19 such that there exists a recursive predicate @xmath20 with @xmath21 where @xmath22 ( @xmath23 ) for @xmath24 odd ( even ) .",
    "the set of complements of @xmath17-sets is denoted by @xmath25 . by fixing some effective encoding of strings by natural numbers , we can talk about @xmath17-sets and @xmath25-sets of strings over an arbitrary alphabet .",
    "a typical example of a set , which does not belong to the arithmetical hierarchy is _ true arithmetic _ , i.e. , the first - order theory of @xmath12 , which we denote by @xmath26 .",
    "we assume basic terminologies and notations in automata theory ( see , for example , @xcite ) . for a fixed alphabet @xmath27 , a _",
    "non - deterministic finite automaton _ is a tuple @xmath28 where @xmath29 is the set of states , @xmath30 is the transition relation , @xmath31 is a set of initial states , and @xmath32 is the set of accepting states . a _ run _ of @xmath33 on a word @xmath34 ( @xmath35 ) is a word over @xmath36 of the form @xmath37 , where @xmath38 .",
    "if moreover @xmath39 , then @xmath40 is an _ accepting run _ of @xmath33 on @xmath41 .",
    "we will only apply these definitions in case @xmath42 , i.e. , we will only speak of ( accepting ) runs on non - empty words .    given two automata @xmath43 and @xmath44 over the same alphabet @xmath27",
    ", we use @xmath45 to denote the automaton obtained by taking the disjoint union of @xmath46 and @xmath47 .",
    "note that for any word @xmath48 , the number of accepting runs of @xmath45 on @xmath41 is equal to the sum of the numbers of accepting runs of @xmath46 and @xmath47 on @xmath41 .",
    "we use @xmath49 to denote the cartesian product of @xmath46 and @xmath47 .",
    "it is the automaton @xmath50 , where @xmath51 then , clearly , the number of accepting runs of @xmath52 on a word @xmath53 is the product of the numbers of accepting runs of @xmath46 and @xmath47 on @xmath41 .",
    "in particular , if @xmath46 is deterministic , then the number of accepting runs of @xmath49 on @xmath54 is the same as the number of accepting runs of @xmath47 on @xmath41 . in the following ,",
    "if @xmath33 is a non - deterministic automaton and @xmath55 is a regular language , we write @xmath56 ( resp .",
    "@xmath57 ) for the automaton @xmath58 ( resp .",
    "@xmath59 ) , where @xmath60 is some deterministic automaton for the language @xmath55 .",
    "we use _ synchronous @xmath24-tape automata _ to recognize @xmath24-ary relations .",
    "such automata have @xmath24 input tapes , each of which contains one of the input words .",
    "the @xmath24 tapes are read in parallel until all input words are processed .",
    "formally , let @xmath61 where @xmath62",
    ". for words @xmath63 , their _ convolution _ is a word @xmath64 with length @xmath65 , and the @xmath66 symbol of @xmath67 is @xmath68 where @xmath69 is the @xmath66 symbol of @xmath70 if @xmath71 , and @xmath72 otherwise .",
    "an @xmath24-ary relation @xmath73 is _ fa recognizable _ if the set of all convolutions of tuples @xmath74 is a regular language .",
    "a _ relational structure _ @xmath75 consists of a _",
    "domain _ @xmath55 and atomic relations on the set  @xmath55 .",
    "we will only consider structures with countable domain .",
    "if @xmath76 and @xmath77 are two structures over the same signature and with disjoint domains , then we write @xmath78 for the union of the two structures . hence ,",
    "when writing @xmath79 , we implicitly express that the domains of @xmath76 and @xmath77 are disjoint . more generally ,",
    "if @xmath80 is a class of pairwise disjoint structures over the same signature , then we denote with @xmath81 the union of these structures .",
    "a structure @xmath75 is called _ automatic _ over @xmath27 if its domain is a regular subset of @xmath82 and each of its atomic relations is fa recognizable ; any tuple  @xmath83 of automata that accept the domain and the relations of @xmath75 is called an _ automatic presentation of @xmath75 _ ; in this case , we write @xmath84 for @xmath75 . if an automatic structure @xmath75 is isomorphic to a structure @xmath85 , then @xmath75 is called an _ automatic copy _ of @xmath85 and @xmath85 is _ automatically presentable_. in this paper we sometimes abuse the terminology referring to @xmath85 as simply automatic and calling an automatic presentation of @xmath75 also automatic presentation of  @xmath85 .",
    "we also simplify our statements by saying `` given / compute an automatic structure @xmath75 '' for `` given / compute an automatic presentation @xmath83 of a structure @xmath84 '' .",
    "the structures @xmath86 and @xmath87 are both automatic structures . on the other hand , @xmath88 and @xmath89 have no automatic copies ( see @xcite and @xcite ) .",
    "consider @xmath90 , the first - order logic extended by the quantifiers @xmath91 ( there exist infinitely many ) and @xmath92 ( there exist finitely many and the exact number is congruent @xmath24 modulo @xmath93 , where @xmath94 ) .",
    "the following theorem from @xcite lays out the main motivation for investigating automatic structures .",
    "[ thm : extfoaut ] from an automatic presentation @xmath83 and a formula @xmath95 in the signature of @xmath84 , one can compute an automaton whose language consists of those tuples @xmath96 from @xmath84 that make @xmath97 true .",
    "in particular , the @xmath90 theory of any automatic structure @xmath75 is ( uniformly ) decidable .",
    "let @xmath98 be a class of automatic structures closed under isomorphism .",
    "the _ isomorphism problem _ for  @xmath98 is the set of pairs @xmath99 of automatic presentations with @xmath100 .",
    "the isomorphism problem for the class of all automatic structures is complete for @xmath0  the first level of the analytical hierarchy @xcite ( this holds already for automatic successor trees ) .",
    "however , if one restricts to special subclasses of automatic structures , this complexity bound can be reduced .",
    "for example , for the class of automatic ordinals and also the class of automatic boolean algebras , the isomorphism problem is decidable .",
    "another interesting result is that the isomorphism problem for locally finite automatic graphs is @xmath6-complete  @xcite .",
    "all these classes of automatic structures have the nice property that one can decide whether a given automatic presentation describes a structure from this class .",
    "theorem  [ thm : extfoaut ] implies that this property also holds for the classes of equivalence relations , trees of height at most @xmath101 , and linear orders , i.e. , the classes considered in this paper .",
    "an equivalence structure is of the form @xmath102 where @xmath103 is an equivalence relation on @xmath55 . in this section",
    ", we prove that the isomorphism problem for automatic equivalence structures is @xmath1-complete .",
    "this result can be also deduced from our result for automatic trees ( section  [ sec : tree ] ) .",
    "but the case of equivalence structures is a good starting point for introducing our techniques .",
    "let @xmath104 be an automatic equivalence structure .",
    "define the function @xmath105 such that for all @xmath106 , @xmath107 equals the number of equivalence classes ( possibly infinite ) in @xmath104 of size @xmath24 .",
    "note that for given @xmath106 , the value @xmath107 can be computed effectively : one can define in @xmath108 the set of all @xmath109-least elements denotes the length - lexicographical order on words . ] that belong to an equivalence class of size @xmath24",
    ".    given two automatic equivalence structures @xmath110 and @xmath111 , deciding if @xmath112 amounts to checking if @xmath113 .",
    "therefore , the isomorphism problem for automatic equivalence structures is in @xmath1 .    for the @xmath1 lower bound",
    ", we use a reduction from hilbert s @xmath9 problem : given a polynomial @xmath114 $ ] , decide whether the equation @xmath115 has a solution in @xmath116 ( for technical reasons , it is useful to exclude @xmath117 in solutions ) .",
    "this problem is well - known to be undecidable , see e.g. @xcite .",
    "in fact , matiyasevich constructed from a given ( index of a ) recursively enumerable set @xmath118 a polynomial @xmath114 $ ] such that for all @xmath119 : @xmath120 if and only if @xmath121 .",
    "hence , the following set is @xmath1-complete : @xmath122 ^ 2 \\mid \\forall\\overline c\\in{\\mathbb n}_+^k : p_1(\\overline c)\\neq p_2(\\overline c)\\ } .\\ ] ] for a symbol @xmath123 , let @xmath124 denote the alphabet @xmath125 and let @xmath69 denote the @xmath126 component of @xmath127 . for @xmath128 , write @xmath129 for the word @xmath130 for a language @xmath131 , we write @xmath132 for the language @xmath133    [ lm : equiv - runs ] there exists an algorithm that , given a non - zero polynomial @xmath134 $ ] in @xmath101 variables , constructs a non - deterministic automaton @xmath135 $ ] on the alphabet @xmath124 with @xmath136)=\\otimes_k(a^+)$ ] such that for all @xmath137 : @xmath135 $ ] has exactly @xmath138 accepting runs on input @xmath139 .",
    "the automaton @xmath140 $ ] is build by induction on the construction of the polynomial @xmath4 , the base case is provided by the polynomials @xmath141 and @xmath142 .",
    "let @xmath143 $ ] be a deterministic automaton accepting @xmath144 .",
    "next , suppose @xmath145 for some @xmath146 .",
    "let @xmath147 , @xmath148 and @xmath149 .",
    "define @xmath36 as @xmath150 when the automaton @xmath140=(s , i,\\delta , f)$ ] runs on an input word @xmath139 , it has exactly @xmath151 many times the chance to move from state @xmath152 to the final state @xmath153 . therefore there are exactly @xmath154 many accepting runs on @xmath139 .",
    "let @xmath155 and @xmath156 be polynomials in @xmath157 $ ] .",
    "assume as inductive hypothesis that there are two automata @xmath158 $ ] and @xmath159 $ ] such that for @xmath160 the number of accepting runs of @xmath161 $ ] on @xmath139 equals @xmath162 .    for @xmath163 ,",
    "set @xmath135 = { \\mathcal a}[p_1(\\overline{x } ) ] \\uplus    { \\mathcal a}[p_2(\\overline{x})]$ ] .",
    "then , the number of accepting runs of @xmath135 $ ] on @xmath139 is @xmath164 .    for @xmath165 ,",
    "let @xmath135 = { \\mathcal a}[p_1(\\overline{x } ) ] \\times    { \\mathcal a}[p_2(\\overline{x})]$ ] .",
    "then , the number of accepting runs of @xmath135 $ ] on @xmath139 is @xmath166 .",
    "let @xmath167 be a non - deterministic finite automaton with alphabet @xmath27 .",
    "we define an automaton @xmath168 with alphabet @xmath36 and @xmath169 let @xmath170 be the projection morphism with @xmath171 .",
    "the following lemma is immediate from the definition .    for @xmath172",
    "we have : @xmath173 if and only if @xmath41 forms an accepting run of @xmath33 on @xmath174 ( which in particular implies @xmath175 ) .",
    "this lemma implies that for all words @xmath176 , @xmath177 equals the number of accepting runs of @xmath33 on @xmath178 .",
    "note that this does not hold for @xmath179 .",
    "consider a non - zero polynomial @xmath180 $ ] .",
    "let the automaton @xmath181 $ ] satisfy the properties guaranteed by lemma  [ lm : equiv - runs ] and let @xmath182 be as defined above . define an automatic equivalence structure @xmath183 whose domain is @xmath184 .",
    "moreover , two words @xmath185 are equivalent if and only if @xmath186 . by definition and lemma  [ lm : equiv - runs ]",
    ", a natural number @xmath187 belongs to @xmath188 if and only if there exists a word @xmath189 with precisely @xmath190 accepting runs , if and only if @xmath183 contains an equivalence class of size @xmath190 .",
    "it is well known that the function @xmath191 with @xmath192 is injective ( @xmath193 defines a pairing function , see e.g. @xcite ) . in the following ,",
    "let @xmath194 denote the countably infinite equivalence structure with @xmath195    [ p - equiv ] the set of automatic presentations @xmath83 with @xmath196 is hard for @xmath1 .    for non - zero polynomials",
    "@xmath197 $ ] , define the following three ( non - zero ) polynomials from @xmath198 $ ] ( with @xmath199 ) : @xmath200 let @xmath201 , @xmath202 , and @xmath203 be the automatic equivalence structures corresponding to these polynomials according to the above definition .",
    "finally , let @xmath104 be the disjoint union of @xmath204 many copies of these three equivalence structures .    if @xmath205 for some @xmath206 , then there is @xmath207 such that @xmath208 .",
    "therefore in @xmath104 there is an equivalence class of size @xmath209 and no such equivalence class exists in @xmath194 .",
    "hence @xmath210 .",
    "conversely , suppose that @xmath211 for all @xmath212 . for all @xmath213 , @xmath104 contains an equivalence class of size @xmath214 if and only if @xmath214 belongs to @xmath215 , if and only if @xmath216 , if and only if @xmath194 contains an equivalence class of size @xmath214",
    ". therefore , for any @xmath217 , @xmath104 contains an equivalence class of size @xmath218 if and only if @xmath194 contains an equivalence class of size @xmath218 .",
    "hence @xmath219 .    in summary",
    ", we have reduced the @xmath1-hard problem @xmath122 ^ 2         \\mid k\\ge2,\\forall\\overline c\\in{\\mathbb n}_+^k : p_1(\\overline c)\\neq p_2(\\overline c)\\}\\ ] ] to the set of automatic presentations of @xmath194 .",
    "hence the proposition is proved .",
    "[ thm : equiv ] the isomorphism problem for automatic equivalence structures is @xmath1-complete .    at the beginning of this section , we already argued that the isomorphism problem is in  @xmath1 ; hardness follows immediately from proposition  [ p - equiv ] , since @xmath194 is necessarily automatic .",
    "a _ tree _ is a structure @xmath220 , where @xmath221 is a partial order with a least element , called the _ root _ , and such that for every @xmath222 , the order @xmath221 restricted to the set @xmath223 of ancestors of @xmath224 is a finite linear order .",
    "the _ level _ of a node @xmath225 is @xmath226 .",
    "the _ height _ of @xmath227 is the supremum of the levels of all nodes in @xmath228 ; it may be infinite , but this paper deals with trees of finite height only .",
    "one may also view a tree as a directed graph @xmath229 , where there is an edge @xmath230 if and only if @xmath41 is the largest element in @xmath231 .",
    "the edge relation @xmath103 is fo - definable in @xmath232 . in this paper",
    ", we assume the partial order definition for trees , but will quite often refer to them as graphs for convenience .",
    "we use @xmath233 to denote the class of automatic trees with height at most @xmath24 .",
    "let @xmath24 be fixed .",
    "then the tree order @xmath221 is fo - definable in @xmath227 and this holds even uniformly for all trees from @xmath233 .",
    "moreover , it is decidable whether a given automatic graph belongs to @xmath233 ( since the class of trees of height @xmath24 can be axiomatized in first - order logic ) .    as a corollary to proposition  [ p - equiv ]",
    ", we get immediately that the isomorphism problem for automatic trees of height at most @xmath234 is undecidable :    [ crl : tree2 ] there exists an automatic tree @xmath235 of height @xmath234 such that the set of automatic presentations  @xmath83 with @xmath236 is @xmath1-hard . hence , the isomorphism problem for the class @xmath237 of automatic trees of height at most @xmath234 is @xmath1-hard .",
    "let @xmath238 be an automatic equivalence structure .",
    "now build the tree @xmath239 as follows :    * the set of nodes is @xmath240_\\equiv\\}$ ] where @xmath40 and @xmath123 are two new letters * @xmath40 is the root , its children are the words starting with @xmath123 , and the children of @xmath241 are the words from @xmath242_\\equiv$ ] .",
    "then it is clear that @xmath239 is a tree of height at most @xmath234 and that an automatic presentation for @xmath239 can be computed from one for  @xmath104 .",
    "furthermore , @xmath219 if and only if @xmath243",
    ". hence , indeed , the statement follows from proposition  [ p - equiv ] .",
    "the hardness statement of theorem  [ thm : tree ] below is a generalization of this corollary to all the classes @xmath233 for @xmath244 . but first , we prove an upper bound for the isomorphism problem for @xmath233 :    [ prop : tree_membership ] the isomorphism problem for the class @xmath233 of automatic trees of height at most @xmath24 is    * decidable for @xmath245 and * in @xmath3 for all @xmath2 .    we first show that @xmath246 is decidable for automatic trees @xmath247 of height at most  @xmath141 : it suffices to compute the cardinality of @xmath248 ( @xmath249 ) which is possible since the universes of @xmath250 and @xmath251 are regular languages .",
    "now let @xmath244 and consider @xmath252 .",
    "let @xmath253 , w.l.o.g .",
    "@xmath254 , and @xmath255 , @xmath256 . for any node @xmath41 in @xmath228 ,",
    "let @xmath257 denote the subtree ( of either @xmath250 or @xmath251 ) rooted at @xmath41 and let @xmath258 be the set of children of @xmath41 . for @xmath259 , we will define inductively a @xmath260-predicate @xmath261 for @xmath262 .",
    "this predicate expresses that @xmath263 provided @xmath264 and @xmath265 belong to level at least @xmath101 .",
    "the result will follow since @xmath246 if and only if @xmath266 holds , where @xmath267 is the root of @xmath268 .    for @xmath269 , the trees @xmath270 and @xmath271 have height at most @xmath234 and we can define @xmath272 as follows : @xmath273 in other words : for every @xmath274 , @xmath264 and @xmath265 have the same number of children with exactly @xmath275 children . since @xmath108 is uniformly decidable for automatic structures ,",
    "this is indeed a @xmath1-sentence ( note that @xmath276 for @xmath269 ) . for @xmath277 , we define @xmath261 inductively as follows : @xmath278 by quantifying over all @xmath279 , we quantify over all isomorphism types of trees that occur as a subtree rooted at a child of @xmath264 or @xmath265 .",
    "for each of these isomorphism types @xmath280 , we express that @xmath264 and @xmath265 have the same number of children  @xmath224 with @xmath281 of type @xmath280 .",
    "since by induction , @xmath282 and @xmath283 are @xmath284-statements , @xmath261 is a @xmath260-statement .",
    "the rest of this section is devoted to proving that the isomorphism problem for the class @xmath233 of automatic trees of height at most @xmath244 is also @xmath3-hard ( and therefore complete ) .",
    "so let @xmath285 be a @xmath3-predicate . in the following lemma and its proof , all quantifiers with unspecified range run over @xmath286 .",
    "[ lem : normalform ] for @xmath287 , there are @xmath288-predicates @xmath289 such that    1 .",
    "@xmath290 is logically equivalent to @xmath291 for @xmath292 and 2 .",
    "@xmath293 implies @xmath294 ,    where @xmath295 .",
    "the predicates @xmath296 are constructed by induction , starting with @xmath297 down to @xmath298 where the construction of @xmath296 does not assume that ( i ) or ( ii ) hold true for @xmath299 .",
    "so let @xmath300 such that @xmath290 is a @xmath301-predicate .",
    "then there exists a @xmath288-predicate @xmath302 such that @xmath290 is logically equivalent to @xmath303 but this is logically equivalent to @xmath304 let @xmath305 be @xmath306 then for any @xmath307 , @xmath308 since @xmath309 is a bounded quantifier , the formula @xmath305 belongs to @xmath310 ( see for example @xcite ) .",
    "thus there is a @xmath288-predicate @xmath311 such that @xmath312 therefore ( [ eqt : tree_k ] ) ( and therefore @xmath313 ) is logically equivalent to @xmath314 .",
    "moreover , @xmath315 this shows ( ii ) .",
    "let us fix the predicates @xmath296 for the rest of section  [ sec : tree ] .",
    "by induction on @xmath316 , we will construct the following trees :    * test trees @xmath317 for @xmath318 ( which depend on @xmath296 ) and * trees @xmath319 for @xmath320 ( we assume the standard order on @xmath321 ) .",
    "the idea is that @xmath322 if and only if @xmath323 .",
    "we will not prove this equivalence , but the following simpler consequences for any @xmath324 :    ( p1 ) : :    @xmath325 holds if and only if    @xmath326 .",
    "( p2 ) : :    @xmath325 does not hold if and only if    @xmath327 for some    @xmath328 .",
    "the first property is certainly sufficient for proving @xmath3-hardness ( with @xmath329 ) , the second property and therefore the trees @xmath330 for @xmath331 are used in the inductive step .",
    "we also need the following property for the construction .",
    "( p3 ) : :    no leaf of any of the trees @xmath332 or    @xmath333 is a child of the root .    in the following section",
    ", we will describe the trees @xmath332 and @xmath334 of height at most @xmath335 and prove  ( p1 ) and ( p2 ) .",
    "condition ( p3 ) will be obvious from the construction .",
    "the subsequent section is then devoted to prove the effective automaticity of these trees .",
    "we start with a few definitions : a forest is a disjoint union of trees .",
    "let @xmath336 and @xmath337 be two forests .",
    "the forest @xmath338 is the disjoint union of countably many copies of @xmath336 .",
    "formally , if @xmath339 , then @xmath340 with @xmath341 if and only if @xmath342 and @xmath343 .",
    "we write @xmath344 for @xmath345 .",
    "then @xmath346 if they are formed , up to isomorphism , by the same set of trees ( i.e. , any tree is isomorphic to some connected component of @xmath336 if and only if it is isomorphic to some connected component of @xmath337 ) .",
    "if @xmath347 is a forest and @xmath40 does not belong to the domain of @xmath347 , then we denote with @xmath348 the tree that results from adding @xmath40 to @xmath347 as new least element .      for notational simplicity ,",
    "we write @xmath101 for @xmath351 .",
    "hence , @xmath352 is a @xmath101-ary predicate . by matiyasevich",
    "s theorem , we find two non - zero polynomials @xmath353 , @xmath354 $ ] , @xmath355 , such that for any @xmath356 : @xmath357 for two numbers",
    "@xmath358 , let @xmath359 $ ] denote the tree of height @xmath141 with exactly @xmath360 leaves , where @xmath361 is the injective polynomial function from ( [ function - c ] ) .",
    "then define the following forests : @xmath362\\mid m , n\\in{\\mathbb n}_+,m\\neq n\\}\\\\    h^2_{\\overline c } & =   h^2 \\uplus\\biguplus \\{t[p_1(\\overline c,\\overline x)+x_{\\ell+1 } ,      p_2(\\overline c,\\overline x)+x_{\\ell+1}]\\mid \\overline x\\in{\\mathbb n}_+^{\\ell - k},x_{\\ell+1}\\in{\\mathbb n}_+\\}\\\\    j^2_\\kappa & = h^2 \\uplus\\biguplus\\{t[x , x]\\mid x\\in{\\mathbb n}_+ , x > \\kappa\\ }   \\quad    \\text { for } \\kappa\\in{\\mathbb n}_+    \\cup \\{\\omega\\}\\end{aligned}\\ ] ] note that @xmath363 .",
    "moreover , the forests @xmath364 ( @xmath365 ) are pairwise non - isomorphic , since @xmath361 is injective .    the trees @xmath349 and @xmath350 , resp .",
    ", are obtained from @xmath366 and @xmath364 , resp .",
    ", by taking countably many copies and adding a root : @xmath367 see figure  [ fig : tree1 ] .",
    "( 20,35)(0,5 ) ( -28,-2)the tree @xmath349 ( root)(-20,40)@xmath40 ( a)(-35,23 ) ( a)(-5,23 ) ( root , a ) ( -41,30 ) ( -41,33 ) ( root , a  ) ( -13,33 ) ( -11,30 )    ( -35,23)(-45,8)(-25,8 ) ( -45,5 ) ( -42.1,2 ) ( -5,23)(-15,8)(5,8 ) ( -10,5 )    ( 32,-2)the tree @xmath368 ( root)(40,40)@xmath40 ( a)(25,23 ) ( a)(55,23 ) ( root , a ) ( 23,33 ) ( root , a  ) ( 47,33 ) ( 49,30 ) ( 25,23)(15,8)(35,8 ) ( 20,5 ) ( 55,23)(45,8)(65,8 ) ( 50,5 )    the following lemma ( stating ( p1 ) for the @xmath1-predicate  @xmath352 , i.e. , for @xmath298 ) can be proved in a similar way as theorem  [ thm : equiv ] .",
    "[ lem : tree_2_good ] for any @xmath212 , we have : @xmath369    by ( [ def - tree - from - forest-2 ] ) , it suffices to show the first equivalence .",
    "so first assume @xmath370 holds .",
    "we have to prove that the forests @xmath366 and @xmath363 contain the same trees ( up to isomorphism ) .",
    "clearly , every tree from @xmath371 is contained in @xmath366 .",
    "for the other direction , let @xmath372 and @xmath373 .",
    "then the tree @xmath374 $ ] occurs in @xmath366 .",
    "since @xmath370 holds , we have @xmath375 and therefore @xmath376 .",
    "hence this tree also occurs in @xmath371 .",
    "conversely suppose @xmath377 and let @xmath372 .",
    "then the tree @xmath378 $ ] occurs in @xmath366 and therefore in @xmath371 .",
    "hence @xmath379 .",
    "since @xmath380 was chosen arbitrarily , this implies  @xmath370 .",
    "now consider the forest @xmath366 once more .",
    "if it contains a tree of the form @xmath381 $ ] for some @xmath93 ( necessarily @xmath382 ) , then it contains all trees @xmath383 $ ] for @xmath384 .",
    "hence , @xmath385 for some @xmath386 , which implies @xmath387 for some @xmath386 .",
    "thus , with lemma  [ lem : tree_2_good ] we get : @xmath388 hence we proved the following lemma , which states ( p2 ) for the @xmath1-predicate  @xmath352 , i.e. , for @xmath298 .",
    "[ lem : tree_2_bad ] for any @xmath212 , we have : @xmath389    this finishes the construction of the trees @xmath390 and @xmath350 for @xmath391 , and the verification of properties  ( p1 ) and ( p2 ) .",
    "clearly , also ( p3 ) holds for @xmath390 and @xmath350 ( all maximal paths have length 2 ) .      for notational simplicity ,",
    "we write again @xmath101 for @xmath394 such that @xmath299 is a @xmath101-ary predicate and @xmath296 a @xmath395-ary one .",
    "we now apply the induction hypothesis . for",
    "any @xmath396 , @xmath397 , @xmath398 let @xmath399 and @xmath334 be trees of height at most  @xmath335 such that :    * @xmath400 holds if and only if @xmath401 .",
    "* @xmath400 does not hold if and only if @xmath402 for some @xmath328 .    in a first step , we build the trees @xmath403 and @xmath404 ( @xmath405 ) from @xmath406 and @xmath334 , resp . , by adding @xmath224 leaves as children of the root .",
    "this ensures @xmath407 since , by property  ( p3 ) , no leaf of any of the trees @xmath406 or @xmath334 is a child of the root .",
    "next , we collect these trees into forests as follows : @xmath408 the trees @xmath409 and @xmath393 , resp .",
    ", are then obtained from the forests @xmath410 and @xmath411 , resp .",
    ", by taking countably many copies and adding a root : @xmath412 see figure  [ fig : tree2 ] .",
    "( 20,35)(0,5 ) ( -33,-2)the tree @xmath392 ( root)(-25,40)@xmath40 ( a)(-40,23 ) ( a)(-10,23 ) ( root , a ) ( -48,30 ) ( root , a  ) ( -16,30 ) ( -40,23)(-50,8)(-30,8 )    ( c)(-57,16 ) ( c)(-50,16 ) ( a , c ) ( a , c ) ( -55,16)@xmath413 ( -57,16)@xmath414 ( -43,5 )    ( -10,23)(-20,8)(0,8 )    ( d)(0,16 ) ( d)(7,16 ) ( a,d ) ( a,d ) ( 2,16)@xmath413 ( 0,16)@xmath414 ( -12,5 )    ( 37,-2)the tree @xmath415 ( root)(45,40)@xmath40 ( a)(30,23 ) ( a)(60,23 ) ( root , a ) ( 21,30 ) ( root , a  ) ( 54,30 )    ( 30,23)(20,8)(40,8 ) ( c)(13,16 ) ( c)(20,16 ) ( a , c ) ( a , c ) ( 15,16)@xmath413 ( 13,16)@xmath414 ( 28,5 ) ( 60,23)(50,8)(70,8 ) ( d)(70,16 ) ( d)(77,16 ) ( a,d ) ( a,d ) ( 72,16)@xmath413 ( 70,16)@xmath414 ( 58,5 )    note that the height of any of these trees is one more than the height of the forests defining them and therefore at most @xmath416 . since none of the connected components of the forests @xmath410 and",
    "@xmath411 is a singleton , none of the trees in ( [ def - tree - from - forest - i+1 ] ) has a leaf that is a child of the root and therefore ( p3 ) holds .",
    "[ lem : tree_main1 ] for all @xmath396 we have @xmath417    again , we only have to prove the first equivalence .",
    "first assume @xmath418 and let @xmath419 be arbitrary .",
    "we have to exhibit some @xmath420 such that @xmath421 holds .",
    "note that @xmath422 belongs to @xmath423 and therefore to @xmath410 .",
    "since @xmath424 for any @xmath425 , this implies the existence of @xmath426 with @xmath427 . by ( [ eqt : tree_u ] ) , this is equivalent with @xmath428 and @xmath429 .",
    "now the induction hypothesis implies that @xmath430 holds .",
    "since @xmath419 was chosen arbitrarily , we can deduce @xmath431 .",
    "conversely suppose @xmath431 .",
    "let @xmath227 belong to @xmath410 . by the induction hypothesis ,",
    "it is one of the trees @xmath404 for some @xmath432 , @xmath391 . in any case",
    ", it also belongs to @xmath423 .",
    "hence it remains to show that any tree of the form @xmath422 belongs to @xmath410 .",
    "so let @xmath432 .",
    "then , by @xmath433 , there exists @xmath434 with @xmath421 . by the induction hypothesis",
    ", we have @xmath435 and therefore @xmath436 ( which belongs to @xmath410 by the very definition ) .",
    "[ lem : tree_main1a ] for all @xmath396 there exists @xmath437 such that @xmath438 .",
    "it suffices to prove that @xmath439 for some @xmath437 .",
    "choose @xmath275 as the smallest value in @xmath440 such that @xmath441 holds . by property ( ii ) from lemma  [ lem : normalform ] for @xmath296 , we get @xmath442 by the induction hypothesis , we get @xmath443 it follows that @xmath444 contains , apart from the trees in @xmath445 , exactly the trees from @xmath446 .",
    "hence , @xmath439 .",
    "lemma  [ lem : tree_main1 ] and [ lem : tree_main1a ] immediately imply :    [ lem : tree_main2 ] for all @xmath396 we have @xmath447    in summary , we obtained the following :    [ p - for - hardness ] let @xmath244 and let @xmath448 be a @xmath3-predicate .",
    "then , for any @xmath449 , we have @xmath450    to infer the @xmath3-hardness of the isomorphism problem for @xmath233 from this proposition , it remains to be shown that the trees @xmath451 and @xmath452 are effectively automatic  this is the topic of the next section .      for constructing automatic presentations for the trees from the previous section ,",
    "it is actually easier to work with _ dags _ ( _ directed acyclic graphs _ ) . the _ height _ of a dag @xmath55 is the length ( number of edges ) of a longest directed path in @xmath55 .",
    "we only consider dags of finite height .",
    "a _ root _ of a dag is a node without incoming edges .",
    "a dag @xmath453 can be unfolded into a forest @xmath454 in the usual way : nodes of @xmath454 are directed paths in @xmath55 that can not be extended to the left ( i.e. , the initial node of the path is a root ) and there is an edge between a path @xmath4 and a path @xmath455 if and only if @xmath455 extends @xmath4 by one more node . for a node @xmath456 of @xmath55 , we define the tree @xmath457 as follows : first we restrict @xmath55 to those nodes that are reachable from @xmath458 and then we unfold the resulting dag .",
    "we need the following lemma .",
    "[ from dags to trees ] from given @xmath459 and an automatic dag @xmath453 of height at most @xmath101 , one can construct effectively an automatic presentation  @xmath83 with @xmath460 .",
    "the universe for our automatic copy of @xmath454 is the set @xmath461 of all convolutions @xmath462 , where @xmath463 is a root and @xmath464 for all @xmath465 . since @xmath55 has height at most @xmath101 , we have @xmath466 .",
    "since the edge relation of @xmath55 is automatic and since the set of all roots in @xmath55 is first - order definable and hence regular , @xmath461 is indeed a regular set .",
    "moreover , the edge relation of @xmath454 becomes clearly fa recognizable on @xmath461 .    for @xmath316 ,",
    "let us consider the following forest : @xmath467 technically , this section proves by induction over @xmath335 the following statement :    [ p : forest - automatic ] for @xmath316 , there exists an automatic copy @xmath468 of @xmath469 and an isomorphism @xmath470 that maps    1 .",
    "the root of the tree @xmath471 to @xmath139 ( for all @xmath472 ) , 2 .",
    "the root of the tree @xmath473 to @xmath474 , and 3 .",
    "the root of the tree @xmath330 to @xmath475 ( for all @xmath476 ) .",
    "this will give the desired result since @xmath477 is then isomorphic to the connected component of @xmath478 that contains the word @xmath479 ( and similarly for @xmath480 ) .",
    "note that this connected component is automatic by theorem  [ thm : extfoaut ] , since the forest @xmath478 has bounded height .",
    "moreover , an automatic presentation for the connected component containing @xmath479 can be computed from @xmath481 .    by lemma  [ from dags to trees ] , it suffices to construct an automatic dag @xmath482 such that there is an isomorphism @xmath483 that is the identity on the set of roots of @xmath484 .",
    "recall the definitions of @xmath486 , @xmath129 , and @xmath132 from section  [ sec : equiv ] .",
    "[ l1 ] from @xmath487 , @xmath488 $ ] , and a symbol @xmath123 , one can compute an automatic forest of height @xmath141 over an alphabet @xmath489 such that    * the roots are the words from @xmath490 , * the leaves are words from @xmath491 , and * the tree rooted at @xmath492 is isomorphic to @xmath493 $ ] .",
    "set @xmath494 and recall the definition of the automata @xmath495 $ ] and @xmath496}$ ] from section  [ sec : equiv ] .",
    "recall also that we let @xmath497 be the projection with @xmath498 for a transition @xmath499 of @xmath495 $ ] .",
    "then let @xmath500 & = & \\otimes_\\ell(a^+ ) \\cup ( \\pi^{-1}(\\otimes_\\ell(a^+ ) ) \\cap l({\\mathrm{run}}_{{\\mathcal a}[p]}))\\text { and } \\\\",
    "e[q_1,q_2 ] & = & \\ { ( u , v ) \\mid",
    "u\\in \\otimes_\\ell(a^+ ) , v\\in \\pi^{-1}(u ) \\cap l({\\mathrm{run}}_{{\\mathcal a}[p ] } ) \\ } \\ .",
    "\\end{aligned}\\ ] ] then @xmath501 $ ] is regular and @xmath502 $ ] is fa recognizable , i.e. , the pair @xmath503;e[q_1,q_2])$ ] is an automatic graph .",
    "it is actually a forest of height @xmath141 , the words from @xmath490 form the roots , and the tree rooted at @xmath492 has precisely @xmath504 leaves , i.e. , it is isomorphic to @xmath493 $ ] .",
    "from now on , we use the notations from section  [ sss : base ] . using lemma  [ l1 ]",
    ", we can compute automatic forests @xmath505 and @xmath506 over alphabets @xmath507 and @xmath508 , respectively , such that    a.   the roots of @xmath505 are the words from @xmath509 , b.   the roots of @xmath506 are the words from @xmath510 , c.   the leaves of @xmath511 are words from @xmath512 ( @xmath249 ) , d.   the tree rooted at @xmath513 is isomorphic to @xmath514 $ ] for @xmath515 , @xmath516 , e.   the tree rooted at @xmath517 is isomorphic to @xmath518 $ ] for @xmath519 .",
    "we can assume that the alphabets @xmath520 , @xmath521 , @xmath522 , and @xmath523 are mutually disjoint .",
    "let @xmath524 be the disjoint union of @xmath505 and @xmath506 ; it is effectively automatic .",
    "the universe of the automatic dag @xmath485 is the regular language @xmath525 where @xmath526 is a new symbol .",
    "we have the following edges :    * for @xmath527 , @xmath528 is connected to @xmath529 if and only if @xmath530 and @xmath531 .",
    "this produces @xmath204 many copies of @xmath532 .",
    "* @xmath139 is connected to any word from @xmath533 . by point ( d ) and",
    "( e ) above , this means that the tree @xmath534 has @xmath204 many subtrees isomorphic to @xmath535 $ ] for @xmath536 , @xmath537 and @xmath518 $ ] for @xmath538 , @xmath539 .",
    "hence , @xmath540 .",
    "* @xmath474 is connected to all words from @xmath541 . by ( e ) above , this means that the tree @xmath542 has @xmath204 many subtrees isomorphic to @xmath518 $ ] for @xmath538 , @xmath539 .",
    "hence , @xmath543 . * @xmath475 ( @xmath328 ) is connected to all words from @xmath544 . by ( e ) above , this means that the tree @xmath545 has @xmath204 many subtrees isomorphic to @xmath518 $ ] for all @xmath538 with @xmath539 or @xmath546 .",
    "hence , @xmath547 .",
    "thus , @xmath548 and the roots are as required in proposition  [ p : forest - automatic ] , see figure  [ fig : auto_tree1 ] .",
    "moreover , it is clear that @xmath549 is automatic .",
    "( 20,40)(0,0 ) ( -5,23)(-15,8)(5,8 ) ( -35,23)(-45,8)(-25,8 ) ( -34,-2)@xmath550 ( root)(-20,40)@xmath551 ( a)(-35,23)@xmath552 ( a)(-5,23)@xmath553 ( root , a ) ( -41,30 ) ( -41,33 ) ( root , a  ) ( -13,33 ) ( -11,30 ) ( -45,5 ) ( -42.1,2 ) ( -10,5 )    ( 25,23)(15,8)(35,8 ) ( 12,-2)@xmath554 ( root)(25,40)@xmath474 ( a)(25,23 ) ( root , a ) ( 12,33 ) ( 15,30 ) ( 20,5 )    ( 60,23)(50,8)(70,8 ) ( 46,-2)@xmath555 ( root)(60,40)@xmath475 ( a)(60,23)@xmath556 ( root , a  ) ( 47,33 ) ( 46,30 ) ( 44,27 ) ( 55,5 )      suppose @xmath558 is such that @xmath559 is as described in proposition  [ p : forest - automatic ] .",
    "we use the notations from section  [ sec - induction - trees ] .",
    "we first build another automatic dag @xmath560 , whose unfolding will comprise ( copies of ) all the trees @xmath404 ( @xmath437 , @xmath561 ) and @xmath562 ( @xmath563 , @xmath397 ) . recall that the set of roots of @xmath484 is @xmath564 .",
    "the universe of @xmath560 consists of the regular language @xmath565 where @xmath566 , and @xmath567 are new symbols .",
    "we have the following edges in @xmath560 :    * all edges from @xmath103 except those with an initial node in @xmath568 are present in @xmath560 .",
    "* @xmath569 is connected to all words of the form @xmath570 for @xmath571 , and @xmath572 .",
    "this ensures that the subtree rooted at @xmath573 gets @xmath224 new leaves , which are children of the root .",
    "hence @xmath574 .",
    "* @xmath575 for @xmath405 and @xmath576 is connected to ( i ) all nodes to which @xmath475 is connected in @xmath484 and to ( ii ) all nodes from @xmath570 for @xmath572 .",
    "this ensures that @xmath577 in case @xmath328 and @xmath578 .    in summary ,",
    "@xmath560 is a dag , whose unfolding consists of ( a copy of ) @xmath422 rooted at @xmath579 , @xmath580 ( @xmath328 ) rooted at @xmath575 , and @xmath562 rooted at @xmath581 .    from the automatic dag @xmath560",
    ", we now build in a final step the automatic dag @xmath557 .",
    "this is very similar to the constructions of @xmath485 and @xmath560 above .",
    "let @xmath582 be the universe of @xmath560 .",
    "the universe of @xmath557 is the regular language @xmath583 the edges are as follows :    * for @xmath584 , @xmath528 is connected to @xmath585 if and only if @xmath530 and @xmath586 is an edge of @xmath560 .",
    "this generates @xmath204 many copies of @xmath560 .",
    "* @xmath139 is connected to every word from @xmath587 .",
    "hence , the tree @xmath588 has @xmath204 many subtrees isomorphic to @xmath562 for @xmath397 and @xmath580 for @xmath589 .",
    "thus , @xmath590 .",
    "* @xmath474 is connected to all words from @xmath591 .",
    "hence , the tree @xmath592 has @xmath204 many subtrees isomorphic to @xmath404 for all @xmath405 and @xmath398 .",
    "thus , @xmath593 . *",
    "@xmath475 ( @xmath328 ) is connected to all words from @xmath594 .",
    "this means that the tree @xmath595 has @xmath204 many subtrees isomorphic to @xmath580 for all @xmath596 and @xmath422 for all @xmath597 .",
    "hence , @xmath598 .",
    "see figure  [ fig : auto_tree2 ] , [ fig : auto_tree3 ] , and [ fig : auto_tree4 ] for the overall construction .",
    "this finishes the proof of proposition  [ p : forest - automatic ] .",
    "hence we obtain :    ( 0,40)(-20,0 ) ( -40,23)(-50,8)(-30,8 ) ( -10,23)(-20,8)(0,8 ) ( -40,-2)@xmath599 ( root)(-25,40)@xmath551 ( a)(-40,23)@xmath600 ( a)(-10,23)@xmath601 ( root , a)@xmath602 ( root , a)@xmath603    ( c)(-57,16 ) ( c)(-50,16 ) ( a , c ) ( -65,18)@xmath604 ( a , c ) ( -55,16)@xmath413 ( -57,16)@xmath605 ( -78,11.5)@xmath606 ( -50,5 ) ( d)(0,16 ) ( d)(7,16 ) ( a,d ) ( a,d ) ( 4,18)@xmath604 ( 2,16)@xmath413 ( 0,16)@xmath605 ( -2,12)@xmath607    ( -20,5 )    ( 0,40)(-20,0 ) ( -10,23)(-20,8)(0,8 ) ( -40,23)(-50,8)(-30,8 ) ( -40,-2)@xmath608 ( root)(-25,40)@xmath474 ( a)(-40,23)@xmath609 ( a)(-10,23)@xmath610 ( root , a)@xmath611 ( root , a)@xmath603    ( c)(-57,16 ) ( c)(-50,16 ) ( a , c ) ( -65,18)@xmath604 ( a , c ) ( -55,16)@xmath413 ( -57,16)@xmath605 ( -78,11.5)@xmath612 ( -50,5 ) ( d)(0,16 ) ( d)(7,16 ) ( a,d ) ( a,d ) ( 4,18)@xmath604 ( 2,16)@xmath413 ( 0,16)@xmath605 ( -2,12)@xmath613    ( -20,5 )    ( 0,40)(-20,0 ) ( -40,23)(-50,8)(-30,8 ) ( -10,23)(-20,8)(0,8 ) ( -40,-2)@xmath614 ( root)(-25,40)@xmath475 ( a)(-40,23)@xmath615 ( a)(-10,23)@xmath616 ( root , a)@xmath617 ( root , a)@xmath618    ( c)(-57,16 ) ( c)(-50,16 ) ( a , c ) ( -65,18)@xmath604 ( a , c ) ( -55,16)@xmath413 ( -57,16)@xmath605 ( -79.5,11.5)@xmath619 ( -50,5 ) ( d)(0,16 ) ( d)(7,16 ) ( a,d ) ( a,d ) ( 4,18)@xmath604 ( 2,16)@xmath413 ( 0,16)@xmath605 ( -2,12)@xmath620 ( -20,5 )    [ thm : tree ]    1 .   for any @xmath244 , the isomorphism problem for automatic trees of height at most @xmath24 is @xmath3-complete .",
    "the isomorphism problem for the class of automatic trees of finite height is recursively equivalent to @xmath621 .",
    "we first prove the first statement .",
    "containment in @xmath3 was shown in proposition  [ prop : tree_membership ] .",
    "for the hardness , let @xmath622 be any @xmath3-predicate and let @xmath449 .",
    "then , above , we constructed the automatic forest @xmath478 of height @xmath24 .",
    "the trees @xmath477 and @xmath452 are first - order definable in @xmath478 since they are ( isomorphic to ) the trees rooted at @xmath479 and @xmath474 , resp . hence these two trees are automatic . by proposition  [ p - for - hardness ] , they are isomorphic if and only if @xmath623 holds .",
    "we now come to the second statement . since the proof of prop .",
    "[ prop : tree_membership ] is uniform in the level  @xmath24 , we can compute from two automatic trees @xmath624 of finite height an arithmetical formula , which is true if and only if @xmath625 .",
    "for the other direction , one observes that the height of an automatic tree of finite height can be computed .",
    "then the result follows from the first statement because of the uniformity of its proof .",
    "in fact , we proved a slightly stronger statement : for every @xmath2 , there exists a fixed @xmath3-complete set @xmath626 .",
    "if we apply our construction , we obtain a _ fixed automatic forest _",
    "@xmath627 of height @xmath24 with the following properties : it is @xmath3-complete to determine , whether for given @xmath628 , the tree rooted at @xmath479 in @xmath627 is isomorphic to the tree rooted at @xmath474 in @xmath627 .",
    "in this section , we briefly discuss the isomorphism problem for recursive ( i.e. , computable ) trees of finite height .    for every @xmath629 ,",
    "the isomorphism problem for recursive trees of height at most @xmath24 is @xmath630-complete .    for the upper bound ,",
    "let us first assume that @xmath245 .",
    "two recursive trees @xmath250 and @xmath251 of height @xmath141 are isomorphic if and only if : for every @xmath631 , there exist at least @xmath101 nodes in @xmath250 if and only if there exist at least @xmath101 nodes in @xmath251",
    ". this is a @xmath632-statement . for the inductive step",
    ", we can reuse the arguments from the proof of proposition  [ prop : tree_membership ] .    for the lower bound",
    ", we first note that the isomorphism problem for recursive trees of height @xmath141 is @xmath632-complete .",
    "it is known that the problem whether a given recursively enumerable set is infinite is @xmath632-complete @xcite . for a given deterministic turing - machine @xmath633 , we construct a recursive tree @xmath634 of height @xmath141 as follows : the set of leaves of @xmath634 is the set of all accepting computations of @xmath633 .",
    "we add a root to the tree and connect the root to all leaves . if @xmath635 is infinite , then @xmath634 is isomorphic to the height-@xmath141 tree with infinitely many leaves .",
    "if @xmath635 is finite , then there exists @xmath576 such that @xmath634 is isomorphic to the height-@xmath141 tree with @xmath93 leaves .",
    "we can use this construction as the base case for our construction in section  [ sec - induction - trees ] .",
    "this yields the lower bound for all @xmath629 .",
    "we use @xmath636 to denote the linear order ( type of ) @xmath637 of the natural numbers and @xmath638 to denote the finite linear order ( type ) of size @xmath24 .",
    "let @xmath639 be a linear order and let @xmath640 be a class of linear orders , where @xmath641 for @xmath642 .",
    "the _ sum _",
    "@xmath643 is the linear order @xmath644 where for all @xmath645 , @xmath646 , and @xmath647 , @xmath648 we use @xmath649 to denote @xmath650 .",
    "we denote with @xmath651 the sum @xmath652 where @xmath653 for every @xmath654 .",
    "interval _ of a linear order @xmath655 is a subset @xmath656 such that @xmath657 and @xmath658 imply @xmath659 .    a well - known example of an automatic linear order is the _ lexicographic order _ @xmath660 on a regular language @xmath55 .",
    "to define @xmath660 , we first need a fixed linear order @xmath661 on the alphabet @xmath27 of @xmath55 . for @xmath662",
    ", we say that @xmath178 is _ lexicographically less _ than @xmath663 , denoted by @xmath664 , if either @xmath178 is a proper prefix of @xmath663 or there exist @xmath665 and @xmath666 such that @xmath667 , @xmath668 and @xmath669 .",
    "we write @xmath670 if either @xmath671 or @xmath664 . for convenience , in this paper , we use @xmath660 to denote the lexicographic order regardless of the corresponding alphabets and orders on the alphabets . the precise definition of @xmath660 in different occurrences will be clear from the context .",
    "this section is devoted to proving that the isomorphism problem on the class of automatic linear orders is at least as hard as @xmath672 . to this end",
    ", it suffices to prove ( uniformly in @xmath24 ) @xmath17-hardness for every even @xmath24 .",
    "the general plan for this is similar to the proof for trees of finite height : we use hilbert s @xmath9 problem to handle @xmath1-predicates in several variables and an inductive construction of more complicated linear orders to handle quantifiers , i.e. , to proceed from a @xmath673- to a @xmath674-predicate ( and from a @xmath674- to a @xmath675-predicate ) .",
    "so let @xmath676 be even and let @xmath285 be a @xmath17-predicate .",
    "for every odd ( even ) number @xmath677 , let @xmath678 be the @xmath679-predicate ( @xmath680-predicate ) such that @xmath681 is logically equivalent to @xmath682 where @xmath683 if @xmath335 is odd and @xmath684 if @xmath335 is even .",
    "we fix these predicates for the rest of section  [ sec - lin - order ] .    by induction on @xmath685",
    ", we will construct from @xmath686 the following linear orders :    * a test linear order @xmath687 , * a linear order @xmath688 , and * a set of linear orders @xmath689 such that @xmath690 and @xmath689 is the singleton @xmath691 if @xmath692 .",
    "these linear orders will have the following properties :    ( p1 ) : :    @xmath325 holds if and only if    @xmath693 .",
    "( p2 ) : :    @xmath325 does not hold if and only if    @xmath694 for some    @xmath695 . ( p3 ) : :    the linear order @xmath696 is not    isomorphic to any interval of @xmath697    where @xmath695 .    in the rest of the section",
    ", we will inductively construct @xmath687 , @xmath688 , and @xmath689 and prove ( p1 ) , ( p2 ) , and ( p3 ) .",
    "the subsequent section is devoted to proving the effective automaticity of these linear orders .",
    "our construction of linear orders is quite similar to the construction for trees from section  [ construction of trees ] .",
    "one of the main differences is that in the inductive step for trees , we went from a @xmath679-predicate directly to a @xmath698-predicate .",
    "thereby the height of the trees only increased by one .",
    "this was crucial in order to get @xmath3-completeness for the isomorphism problem for automatic trees of height @xmath2 . for automatic linear orders , we split the construction into two inductive steps : in the first step , we go from a @xmath679-predicate ( @xmath335 odd ) to a @xmath699-predicate , whereas in the second step",
    ", we go from a @xmath699-predicate to a @xmath698-predicate .    a key technique used in the construction is the shuffle sum of a class of linear orders .",
    "let @xmath700 be a countable set .",
    "a _ dense @xmath700-coloring _ of @xmath701 is a mapping @xmath702 such that for all @xmath703 with @xmath704 and all @xmath705 there exists @xmath706 with @xmath707 .",
    "let @xmath708 be a set of linear orders with @xmath700 countable and let @xmath702 be a dense @xmath700-coloring of @xmath701 .",
    "the shuffle sum of @xmath709 , denoted @xmath710 , is the linear order @xmath711 .    in the above definition ,",
    "the isomorphism type of @xmath712 does not depend on the choice of the dense @xmath700-coloring @xmath481 , see e.g. @xcite .",
    "hence @xmath710 is indeed uniquely defined .    in this section",
    ", we will consider classes @xmath713 and @xmath714 of linear orders that we consider as classes of isomorphism types .",
    "therefore , we use the following abbreviations :    * `` @xmath715 '' denotes that @xmath713 contains a linear order isomorphic to @xmath131 , * `` @xmath716 '' denotes @xmath717 , and * `` @xmath718 '' abbreviates @xmath719 .",
    "recall from section  [ sec : equiv ] that the polynomial function @xmath723 is injective . for @xmath724 ,",
    "let @xmath725 $ ] be the finite linear order of length @xmath726 .",
    "by applying matiyasevich s theorem , we obtain two polynomials @xmath727 $ ] in @xmath728 variables , @xmath729 , such that for all @xmath730 , the @xmath1-predicate @xmath731 holds if and only if @xmath732 fix @xmath733 and @xmath734 .",
    "we define the following four classes of finite linear orders : @xmath735\\mid \\overline{x}\\in     { \\mathbb n}^{\\ell - n}_+ , x_{\\ell+1}\\in { \\mathbb n}_+\\ } \\label{class - l_1}\\\\      { \\mathcal l}^1_2(m ) & = \\{l[x+m , x+m]\\mid x\\in { \\mathbb n}_+\\ } \\label{class - l_2 } \\\\      { \\mathcal l}^1_3 & = \\{l[x+y , x]\\mid x , y\\in { \\mathbb n}_+\\ } \\label{class - l_3}\\\\      { \\mathcal l}^1_4 & = \\{l[x , x+y]\\mid x , y\\in { \\mathbb n}_+\\ } \\label{class - l_4}\\end{aligned}\\ ] ] the linear orders @xmath720 , @xmath721 , and @xmath722 are obtained by taking the shuffle sums of unions of the above classes of linear orders : @xmath736 the next lemma is needed to prove ( p1 ) and ( p2 ) for the @xmath1-predicate @xmath737 .",
    "[ lem : shuf_finite ] suppose @xmath713 and @xmath714 are two countable sets of finite linear orders",
    ". then @xmath738 and no interval of @xmath739 is isomorphic to @xmath636 .    if @xmath718 , then it is clear that @xmath740 .",
    "conversely , suppose there exists an isomorphism @xmath741 from @xmath739 to @xmath742 .",
    "we prove below that @xmath718 . by symmetry",
    "we only need to prove @xmath743 .",
    "note that for @xmath744 , @xmath745 is obtained by replacing each @xmath746 with some linear order @xmath747 ( whose type is ) contained in @xmath748 . for every @xmath746 ,",
    "if @xmath749 contains elements from @xmath750 and @xmath751 for some @xmath752 , then @xmath749 is infinite which is impossible",
    ". therefore @xmath741 maps @xmath753 into @xmath750 for some @xmath754 . using the same argument with @xmath741 replaced by @xmath755",
    ", we can also prove that @xmath755 maps @xmath750 into @xmath753 . hence @xmath756 .",
    "this means that for all @xmath757 , there is @xmath758 such that @xmath759 .",
    "therefore @xmath760 .    if @xmath761 in @xmath739 , then there are @xmath752 in @xmath701 and @xmath762 in @xmath116 such that @xmath763 and @xmath764 .",
    "but then the interval @xmath765 $ ] is infinite .",
    "hence no interval in @xmath739 is isomorphic to @xmath636 .",
    "the next lemma states ( p1 ) and ( p2 ) for @xmath766 :    for any @xmath733 , we have :    1 .   @xmath767 .",
    "2 .   @xmath768    for ( 1 ) , we have @xmath769 \\in { \\mathcal l}^1_3\\cup { \\mathcal l}^1_4 \\\\   & \\longleftrightarrow & \\    { \\mathcal l}^1_1(\\overline{c})\\cup { \\mathcal l}^1_3 \\cup { \\mathcal l}^1_4 =   { \\mathcal l}^1_3\\cup { \\mathcal l}^1_4\\\\ & \\stackrel{\\text{lemma~\\ref{lem : shuf_finite}}}{\\longleftrightarrow } & \\ l^1_{\\overline{c } } \\cong k^1 .\\end{aligned}\\ ] ] for ( 2 ) , we get @xmath770 \\in   { \\mathcal l}^1_1(\\overline{c } ) \\\\   & \\longleftrightarrow & \\",
    "\\exists m \\in { \\mathbb n}_+ : ( \\forall k > m :   l[k , k ] \\in   { \\mathcal l}^1_1(\\overline{c } ) \\wedge \\forall 1 \\leq k \\leq m : l[k , k ] \\not\\in   { \\mathcal l}^1_1(\\overline{c } ) ) \\\\   & \\longleftrightarrow & \\   \\exists m\\in{\\mathbb n}_+ : { \\mathcal l}^1_1(\\overline{c } ) \\cup { \\mathcal l}^1_3 \\cup { \\mathcal l}^1_4 = { \\mathcal l}^1_2(m ) \\cup { \\mathcal l}^1_3\\cup { \\mathcal l}^1_4 \\\\   & \\stackrel{\\text{lemma~\\ref{lem : shuf_finite}}}{\\longleftrightarrow } & \\    \\exists",
    "m\\in { \\mathbb n}_+ :   l^1_{\\overline{c } } \\cong m^1_m\\ .\\end{aligned}\\ ] ]    since @xmath771 , @xmath721 , and @xmath722 are shuffle sums , they satisfy ( p3 ) by lemma  [ lem : shuf_finite ] .",
    "this finishes the construction for the base case .",
    "suppose @xmath772 is an odd number . for notational simplicity ,",
    "we write @xmath101 for @xmath773 .",
    "thus , @xmath299 is a @xmath101-ary predicate and @xmath296 is a @xmath774-ary one . for all @xmath775",
    ", @xmath776 is logically equivalent to @xmath777 . applying the inductive hypothesis , for any @xmath778 and @xmath432",
    ", we obtain linear orders @xmath779 , @xmath688 , and the set @xmath689 such that    * @xmath780 holds if and only if @xmath781 , * @xmath780 does not hold if and only if @xmath782 for some @xmath695 , and * @xmath696 is not isomorphic to any interval of @xmath779 , @xmath688 , or @xmath633 where @xmath695 .",
    "fix @xmath775 .",
    "we define the following classes of linear orders : @xmath783 the linear orders @xmath784 , @xmath785 , and @xmath786 are defined as shuffle sums of unions of the above classes of linear orders : @xmath787 recall that the set @xmath689 is a singleton for @xmath788 , consisting of @xmath789 . the next lemma can be proved similarly as lemma  [ lem : shuf_finite ] .",
    "[ lem : shuf_inf ] suppose @xmath713 and @xmath714 are two countable classes of linear orders such that each @xmath790 is isomorphic to a linear order of the form @xmath791 , where @xmath792 is not isomorphic to any interval of @xmath793 .",
    "then @xmath794 if @xmath739 contains an interval isomorphic to @xmath795 , then there is a linear order @xmath793 with @xmath796 .    if @xmath718 , then it is clear that @xmath797 .",
    "conversely , suppose @xmath741 is an isomorphism from @xmath739 to @xmath742 .",
    "we prove that @xmath718 .",
    "by symmetry we only need to prove that @xmath798 .",
    "say @xmath799 for @xmath800 .",
    "intuitively , for @xmath800 , @xmath801 can be viewed as obtained by replacing each @xmath746 with a linear order @xmath802 , where @xmath481 is a dense @xmath803-coloring .",
    "fix @xmath804 .",
    "suppose @xmath805 contains elements in @xmath806 and @xmath807 for @xmath808 with @xmath752 .",
    "then in @xmath805 there are infinitely many disjoint intervals that are isomorphic to @xmath792 , while in @xmath809 there is exactly one such interval , a contradiction",
    ". therefore @xmath741 maps @xmath809 into @xmath806 for some @xmath754 .",
    "if @xmath810 , then @xmath811 contains an element @xmath812 . the argument from the previous paragraph with @xmath741 replaced by @xmath755 again leads to a contradiction .",
    "therefore @xmath813 .",
    "this means that for all @xmath757 , there is @xmath758 such that @xmath814 and the lemma is proved .",
    "let @xmath815 be some interval in @xmath739 .",
    "first suppose there are @xmath816 in @xmath701 such that @xmath700 intersects @xmath817 and @xmath818 .",
    "but then @xmath819 for all @xmath820 , implying that @xmath821 embeds into @xmath815 which is impossible .",
    "hence there is some @xmath822 with @xmath823 . then there is a linear order @xmath793 such that @xmath824 .",
    "since @xmath825 ( let alone @xmath795 ) is no interval in @xmath793 , the interval @xmath700 has to intersect the initial segment @xmath825 of @xmath809 .",
    "but then @xmath636 has to be an initial segment of @xmath793 , i.e. , @xmath826 for some linear order @xmath827 .",
    "now notice that @xmath828 is not isomorphic to any interval of @xmath784 , @xmath785 , or @xmath786 ( each of the orders @xmath779 , @xmath688 , and @xmath829 is a shuffle sum and therefore does not start with @xmath636 ) .",
    "hence ( p3 ) holds for @xmath416 .",
    "furthermore , the following holds : @xmath830 we have shown ( p1 ) and ( p2 ) for @xmath416 in case @xmath335 is odd .",
    "let @xmath831 be even and consider the @xmath832-predicate @xmath299 .",
    "again , we write @xmath101 for @xmath773 . for all @xmath778 , @xmath776 is logically equivalent to @xmath833 .",
    "since @xmath335 is even , we must have @xmath834 .",
    "therefore the set @xmath689 is a singleton , consisting of the linear order @xmath789 .",
    "fix @xmath778 .",
    "define the classes of linear orders @xmath835 , @xmath836 , and @xmath837 using the same definition as in ( [ eqt : lo_l_i+1 ] ) .",
    "the linear orders @xmath784 , @xmath785 , and @xmath786 are defined as follows : @xmath838 again , @xmath828 is not isomorphic to any interval of @xmath784 , @xmath785 , or @xmath786 .",
    "hence ( p3 ) holds for @xmath416 .",
    "furthermore , the following holds : @xmath839 we have shown ( p1 ) and ( p2 ) for @xmath416 in case @xmath335 is even .",
    "this finishes the construction and proof for ( p1 ) , ( p2 ) , and ( p3 ) in the inductive step .      to construct automatic presentations of the linear orders from the previous section , we first fix some notations . for @xmath840 and a symbol @xmath123 ,",
    "we re - define @xmath551 as the word @xmath841 recall that lemma  [ lm : equiv - runs ] described a way to represent a polynomial @xmath842 $ ] in @xmath101 variables using the number of accepting runs of an automaton @xmath135 $ ] .",
    "the next lemma re - states lemma  [ lm : equiv - runs ] with respect to the new definition of @xmath551 .",
    "[ lem : lo_runs ] from a polynomial @xmath842 $ ] in @xmath101 variables , one can effectively construct a non - deterministic automaton @xmath135 $ ] on alphabet @xmath843 such that @xmath844 ) = ( a^+\\sharp)^k$ ] and for all @xmath845 @xmath135 $ ] has exactly @xmath846 accepting runs on input @xmath551 .",
    "we use the same proof as for lemma  [ lm : equiv - runs ] .",
    "the only difference is when the polynomial @xmath847 is of the form @xmath142 for some @xmath146 . in this case , the automaton @xmath848 $ ] is @xmath849 where @xmath850 , @xmath851 , @xmath852 and the transition relation @xmath36 is @xmath853 it is easy to see that @xmath854 ) = ( a^+\\sharp)^k$ ] and @xmath848 $ ] has exactly @xmath151 accepting runs on input @xmath551 where @xmath775 .    from now on ,",
    "when referring to @xmath135 $ ] , we always assume it is defined in the sense of lemma  [ lem : lo_runs ] ( as opposed to lemma  [ lm : equiv - runs ] ) .",
    "let @xmath33 be a non - deterministic finite automaton over the alphabet @xmath27 and let @xmath36 be the transition relation of @xmath33 . recall the definition of the automaton @xmath855 and the projection morphism @xmath856 from section  [ sec : equiv ] .",
    "then , @xmath855 is an automaton over the alphabet @xmath36 .",
    "assume that a lexicographic order @xmath660 has been defined on each of @xmath82 and @xmath857 .",
    "define the automatic linear order @xmath858 on @xmath859 such that for all @xmath860 : @xmath861 let @xmath862 be the alphabet @xmath863 .",
    "fix the order @xmath661 on @xmath862 such that @xmath864 for any automaton @xmath33 over @xmath862 , fix an arbitrary order on the transition relation @xmath36 of @xmath33 .",
    "let @xmath660 be the lexicographic orders on @xmath865 and @xmath857 defined with respect to these orders , respectively .",
    "from now on , we will always let @xmath858 be the linear order as defined in ( [ eqt : lo_sqsubseteq ] ) with respect to @xmath660 .",
    "for a regular language @xmath866 let @xmath867 . for @xmath868 , we use @xmath869 $ ] to denote the language @xmath870 . technically ,",
    "in this section we prove by induction on @xmath335 the following statement :    [ prop : lo_automaticity ] we can compute automata @xmath871 over @xmath862 such that :    1 .",
    "@xmath872 for some regular language @xmath873 2 .   if @xmath692 , then @xmath874 for some regular language @xmath875 3 .",
    "@xmath876 )       \\cap l({\\mathrm{run}}_{{\\mathcal a}^i } ) ; \\sqsubseteq)$ ] for @xmath877 4 .",
    "@xmath878)\\cap l({\\mathrm{run}}_{{\\mathcal a}^1});\\sqsubseteq)$ ] for @xmath734 5 .",
    "@xmath879 ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^i});\\sqsubseteq)$ ] for @xmath692 6 .",
    "@xmath880)\\cap l({\\mathrm{run}}_{{\\mathcal a}^i});\\sqsubseteq)$ ]    moreover , in ( 1 ) and",
    "( 2 ) we have @xmath881 .",
    "this section shows that we can construct an automatic presentation of the shuffle sum of a class of automatic linear orders that are presented in some specific way . for a regular language @xmath55 over an alphabet , which does neither contain @xmath117 nor @xmath141 ,",
    "let @xmath882 .",
    "[ lem : lo_aut_shuf ] let @xmath33 be an automaton such that @xmath883 for regular languages @xmath884 and @xmath885 ( for some @xmath685 ) .",
    "we can effectively compute an automaton @xmath886 such that @xmath887 and for all @xmath888 : @xmath889    suppose @xmath890 .",
    "let @xmath891 .",
    "we first define the automaton @xmath892 the transition function @xmath893 of @xmath894 is defined as follows : @xmath895 intuitively , @xmath894 consists of two copies of @xmath33 whose state spaces are @xmath896 and @xmath897 .",
    "the automaton @xmath894 runs by starting simulating @xmath33 on the first copy .",
    "when the first @xmath526 is read , it stops the simulation . for this , the automaton stores the state @xmath898 by moving to the `` looping state '' @xmath899",
    ". the automaton will stay in @xmath900 unless 1 is read , in which case , it may `` guess '' that it reads the last @xmath141 before the second @xmath526 in the input .",
    "if so , it goes out of @xmath900 and continues the simulation in the second copy of @xmath33 and accepts the input word if the run stops at a final state . if the guess was not correct and there is another @xmath141 before the second @xmath526 in the input , then the run will necessarily reject .",
    "it is easy to see that for all @xmath901 , @xmath902 and @xmath903 , the number of accepting runs of @xmath894 on @xmath904 is the same as the number of accepting runs of @xmath33 on @xmath905 , i.e. , @xmath906 let @xmath907 note that @xmath908 . also , for any @xmath909 , @xmath910 , @xmath911 , and @xmath903 , the number of accepting runs of @xmath912 on @xmath913 equals the number of accepting runs of @xmath894 on @xmath904 , which is , by ( [ eqt : lo_same run ] ) , equal to the number of accepting runs of @xmath33 on @xmath914 .",
    "hence , we have @xmath915 we prove the following claim .",
    "_ claim 1 .",
    "_ for all @xmath909 , @xmath916 and @xmath911 , @xmath917 for @xmath918 , let @xmath919 .",
    "note that this is a finite linear order .",
    "consider the linear order @xmath920 . by definition of @xmath858 ,",
    "@xmath921 by ( [ eqt : lo_same run2 ] ) , @xmath922 . by definition of @xmath858",
    "again , @xmath923 this proves claim  1 .",
    "let @xmath924 be the function such that @xmath925 _ claim 2 .",
    "_ @xmath926 and the function @xmath481 is a dense @xmath55-coloring of @xmath927 .    first , for every @xmath928 with @xmath929 and @xmath930 , we have @xmath931 hence , @xmath932 does not have a smallest or largest element .",
    "it remains to show that the linear order @xmath932 is densely @xmath55-colored by @xmath481 ( this implies that @xmath932 is dense and hence , by cantor s theorem , isomorphic to @xmath933 ) .",
    "consider two words @xmath934 such that @xmath935 .",
    "there are two cases .",
    "@xmath936 , @xmath937 for @xmath938 and @xmath939 such that @xmath940 . in this case , for all @xmath930 , we have @xmath941    case 2 .",
    "@xmath942 for some @xmath943 . since @xmath944 , we have @xmath945 .",
    "say @xmath946 for some @xmath947 , @xmath948 and @xmath949 .",
    "we must have @xmath950 .",
    "since every symbol from this set is larger than @xmath117 ( see ( [ def - alph - order ] ) ) we must have @xmath951 .",
    "then for all @xmath930 , we have @xmath952 hence @xmath927 is indeed densely colored by @xmath481 .",
    "this proves claim  2 .    since @xmath526 is the minimum in the order @xmath661 on @xmath862 , for any @xmath888 , @xmath953 and @xmath954 , we have @xmath955 therefore , @xmath956      recall the notations from section  [ construction - lo - ind - base ] . in the following ,",
    "if @xmath55 is a regular language and @xmath33 is a finite non - deterministic automaton then we denote by @xmath958 a finite automaton that results from the disjoint union of a deterministic automaton @xmath60 for @xmath55 and the automaton @xmath33 by adding all transitions @xmath959 where : ( i ) @xmath898 is a state of @xmath60 , ( ii ) there is a transition @xmath960 in @xmath60 , where @xmath961 is a final state of @xmath60 , and ( iii ) @xmath4 is an initial state of @xmath33 .",
    "clearly , @xmath962 .",
    "we will only apply this definition in case the product @xmath963 is unambiguous .",
    "this means that if @xmath964 then there exists a unique factorization @xmath965 with @xmath966 and @xmath967 .",
    "the following lemma is easy to prove :    [ lemma - unambiguous ] let @xmath33 be a finite non - deterministic automaton and let @xmath55 be a regular language such that the product @xmath963 is unambiguous .",
    "let @xmath966 and @xmath968 .",
    "then , the number of accepting runs of @xmath958 on @xmath969 equals the number of accepting runs of @xmath33 on @xmath265 .",
    "[ lem : lo_poly ] from two given polynomials @xmath970 $ ] in @xmath101 variables , one can effectively construct an automaton @xmath971 $ ] over the alphabet @xmath972 such that    * @xmath973 ) = ( a^+\\sharp)^k \\$$ ] and * for all @xmath974 , @xmath975 } ) ; \\sqsubseteq ) \\cong l[q_1(\\overline{c } ) , q_2(\\overline{c})]$ ] .",
    "we construct @xmath971 $ ] by taking a copy of @xmath976 $ ] ( see lemma  [ lem : lo_runs ] ) , adding a new state @xmath977 and transitions @xmath978 for each accepting state @xmath979 in @xmath976 $ ] and making @xmath977 the only accepting state of @xmath971 $ ] .",
    "note that for any @xmath974 , the number of accepting runs of @xmath971 $ ] on @xmath980 is the same as the number of accepting runs of @xmath976 $ ] on @xmath551 , which is equal to @xmath981 .",
    "hence , @xmath975 } ) ; \\sqsubseteq)$ ] forms a copy of @xmath982 $ ] and the lemma is proved .    by lemma  [ lem : lo_poly ]",
    ", we can construct automata @xmath983 $ ] , where @xmath984 , over the alphabet @xmath985 , @xmath986 $ ] over the alphabet @xmath987 , @xmath988 $ ] over the alphabet @xmath989 and @xmath990 $ ] over the alphabet @xmath991 such that : @xmath992 \\label{eq - a1 } \\\\",
    "\\forall e_1,e_2\\in { \\mathbb n}_+ :    ( \\pi^{-1}(b_1^{e_1}\\sharp b_1^{e_2}\\sharp\\$ ) \\cap l({\\mathrm{run}}_{{\\mathcal a}_2 } ) ;    \\sqsubseteq ) & \\cong & l[e_1+e_2,e_1+e_2 ] \\label{eq - a2 } \\\\ \\forall e_1,e_2\\in { \\mathbb n}_+ :    ( \\pi^{-1}(b_2^{e_1}\\sharp b_2^{e_2}\\sharp\\$ ) \\cap l({\\mathrm{run}}_{{\\mathcal a}_3 } ) ;   \\sqsubseteq ) & \\cong & l[e_1+e_2,e_1 ]   \\label{eq - a3 } \\\\ \\forall e_1,e_2\\in { \\mathbb n}_+ : ( \\pi^{-1}(b_3^{e_1}\\sharp b_3^{e_2}\\sharp\\$ ) \\cap l({\\mathrm{run}}_{{\\mathcal a}_4 } ) ; \\sqsubseteq )   & \\cong & l[e_1,e_1+e_2 ]    \\label{eq - a4}\\end{aligned}\\ ] ] define the following automata : @xmath993 note that @xmath994 hence , applying lemma  [ lem : lo_aut_shuf ] ( with @xmath995 ) , we can effectively construct automata @xmath996 ( @xmath997 ) as follows : @xmath998 for all @xmath733 we get : @xmath999 ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^1_1 } ) ; \\sqsubseteq )   \\stackrel{\\text{lemma~\\ref{lem : lo_aut_shuf}}}{\\cong } \\\\[2 mm ] & \\qquad { \\mathrm{shuf}}(\\{(\\pi^{-1}(a^{\\overline{c } } v \\$ ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^0_1 } ) ; \\sqsubseteq ) \\mid v\\in ( a^+\\sharp)^{\\ell - n+1 } \\cup      ( b_2^+\\sharp)^2   \\cup ( b_3^+\\sharp)^2 \\ } ) = \\\\[2 mm ] & \\qquad { \\mathrm{shuf}}(\\{(\\pi^{-1}(a^{\\overline{c}\\,\\overline{e } } \\$ ) \\cap                    l({\\mathrm{run}}_{{\\mathcal a}^0_1 } ) ; \\sqsubseteq ) \\mid \\overline{e } \\in                    { \\mathbb n}_+^{\\ell - n+1 } \\ } \\ ; \\cup \\\\ & \\qquad \\phantom{{\\mathrm{shuf } } ( } \\{(\\pi^{-1}(a^{\\overline{c } } b_2^{e_1}\\sharp b_2^{e_2}\\sharp \\$ ) \\cap                    l({\\mathrm{run}}_{{\\mathcal a}^0_1 } ) ; \\sqsubseteq ) \\mid e_1,e_2 \\in { \\mathbb n}_+ \\ } \\ ; \\cup \\\\ & \\qquad \\phantom{{\\mathrm{shuf } } ( } \\{(\\pi^{-1}(a^{\\overline{c } } b_3^{e_1}\\sharp b_3^{e_2}\\sharp",
    "\\$ ) \\cap                    l({\\mathrm{run}}_{{\\mathcal a}^0_1 } ) ; \\sqsubseteq ) \\mid e_1,e_2",
    "\\in { \\mathbb n}_+ \\})\\stackrel{\\text{lemma~\\ref{lemma - unambiguous}}}{\\cong }   \\\\[2 mm ] & \\qquad { \\mathrm{shuf}}(\\{(\\pi^{-1}(a^{\\overline{c}\\,\\overline{e } } \\$ ) \\cap                    l({\\mathrm{run}}_{{\\mathcal a}_1 } ) ; \\sqsubseteq ) \\mid \\overline{e } \\in                    { \\mathbb n}_+^{\\ell - n+1 } \\ } \\ ; \\cup \\\\ & \\qquad \\phantom{{\\mathrm{shuf } } ( } \\{(\\pi^{-1}(b_2^{e_1}\\sharp b_2^{e_2}\\sharp \\$ ) \\cap                    l({\\mathrm{run}}_{{\\mathcal a}_3 } ) ; \\sqsubseteq ) \\mid e_1,e_2 \\in { \\mathbb n}_+ \\ } \\ ; \\cup \\\\ & \\qquad \\phantom{{\\mathrm{shuf } } ( } \\{(\\pi^{-1}(b_3^{e_1}\\sharp b_3^{e_2}\\sharp \\$ ) \\cap                    l({\\mathrm{run}}_{{\\mathcal a}_4 } ) ; \\sqsubseteq ) \\mid e_1,e_2 \\in { \\mathbb n}_+ \\ } )                    \\stackrel{\\text{(\\ref{eq - a1})--(\\ref{eq - a4})}}{= } \\\\[2 mm ] & \\qquad { \\mathrm{shuf}}(\\ { l[p_1(\\overline{c } , \\overline{e})+e_{\\ell+1 } ,      p_2(\\overline{c},\\overline{e})+e_{\\ell+1 } ] \\mid \\overline{e } \\in                    { \\mathbb n}_+^{\\ell - n } , e_{\\ell+1 } \\in { \\mathbb n}_+ \\ } \\ ; \\cup \\\\ & \\qquad \\phantom{{\\mathrm{shuf } } ( } \\ { l[e_1+e_2,e_1 ]   \\mid e_1,e_2 \\in { \\mathbb n}_+ \\ } \\ ; \\cup \\ ; \\ { l[e_1 , e_1+e_2 ]   \\mid e_1,e_2 \\in { \\mathbb n}_+ \\ } ) \\stackrel{\\text{(\\ref{class - l_1})--(\\ref{class - l_4})}}{= } \\\\[2 mm ] & \\qquad { \\mathrm{shuf } } ( { \\mathcal l}^1_1(\\overline{c})\\cup { \\mathcal l}^1_3 \\cup { \\mathcal l}^1_4 ) \\cong l^1_{\\overline{c}}\\end{aligned}\\ ] ] similar calculations yield : @xmath1000 ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^1_2 } ) ; \\sqsubseteq )   & \\cong & { \\mathrm{shuf}}({\\mathcal l}^1_2(m ) \\cup { \\mathcal l}^1_3 \\cup { \\mathcal l}^1_4 ) \\cong m^1_m \\\\   ( \\pi^{-1}(l({\\mathcal a}^1_3)[b_2\\sharp])\\cap l({\\mathrm{run}}_{{\\mathcal a}^1_3 } ) ; \\sqsubseteq ) & \\cong & { \\mathrm{shuf}}({\\mathcal l}^1_3 \\cup { \\mathcal l}^1_4 ) \\cong k^1\\end{aligned}\\ ] ] let @xmath1001 .",
    "it is easy to see that @xmath1002 for some regular language @xmath873 with @xmath1003 .",
    "hence @xmath1004 satisfies the statement in proposition  [ prop : lo_automaticity ] .",
    "let @xmath772 be an odd number .",
    "recall the notations from section  [ first - induction - step ] .",
    "we write @xmath101 for @xmath773 . by applying the inductive assumption",
    ", we obtain an automaton @xmath871 such that @xmath1005 for some regular language @xmath1006 where @xmath1007 if @xmath766 , and @xmath1008 otherwise .",
    "furthermore , @xmath1003 and the following hold for @xmath871 : @xmath1009 for any @xmath1010 , let @xmath1011 .",
    "it is easy to see that @xmath1012 define the automata @xmath1013 , @xmath1014 , and @xmath1015 as @xmath1016 by ( [ def - alph - order ] ) , ( [ eq - l^i])([order on s_j ] ) , and the fact that @xmath1017 , we have @xmath1018 now construct the automata @xmath1019 , and @xmath1020 as follows : @xmath1021 we have @xmath1022 hence , we can apply lemma  [ lem : lo_aut_shuf ] to @xmath1023 , @xmath1024 , and @xmath1020 ( with @xmath1025 ) to define the following automata : @xmath1026 for all @xmath775 we get : @xmath1027 ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^{i+1}_1 } ) ; \\sqsubseteq )   \\stackrel{\\text{lemma~\\ref{lem : lo_aut_shuf}}}{\\cong } \\\\[2 mm ] & \\qquad { \\mathrm{shuf}}(\\{(\\pi^{-1}(a^{\\overline{c } } v \\$ ( s_i \\cup r ) ) \\cap l({\\mathrm{run}}_{{\\mathcal c}^i_1 } ) ; \\sqsubseteq ) \\mid v\\in a^+\\sharp \\cup \\beta \\sharp \\ } ) = \\\\[2 mm ] & \\qquad { \\mathrm{shuf}}(\\{(\\pi^{-1}(a^{\\overline{c}\\,e } \\$ ( s_i \\cup r ) ) \\cap                    l({\\mathrm{run}}_{{\\mathcal c}^i_1 } ) ; \\sqsubseteq ) \\mid e \\in { \\mathbb n}_+ \\ } \\ ; \\cup \\\\ & \\qquad \\phantom{{\\mathrm{shuf } } ( } \\{(\\pi^{-1}(a^{\\overline{c } } u \\sharp \\$ ( s_i \\cup r ) ) \\cap                    l({\\mathrm{run}}_{{\\mathcal c}^i_1 } ) ; \\sqsubseteq ) \\mid u \\in \\beta \\ } ) \\stackrel{\\text{lemma~\\ref{lemma - unambiguous}}}{\\cong }   \\\\[2 mm ] & \\qquad { \\mathrm{shuf}}(\\{(\\pi^{-1}(a^{\\overline{c}\\,e } \\$ ( s_i \\cup r ) ) \\cap                    l({\\mathrm{run}}_{{\\mathcal b}^i_1 } ) ; \\sqsubseteq ) \\mid e \\in { \\mathbb n}_+ \\ } \\ ; \\cup \\\\ & \\qquad \\phantom{{\\mathrm{shuf } } ( } \\{(\\pi^{-1}(u \\sharp \\$ ( s_i \\cup r ) ) \\cap                    l({\\mathrm{run}}_{{\\mathcal b}^i_2 } ) ; \\sqsubseteq ) \\mid u \\in \\beta \\ } )                             \\stackrel{\\text{(\\ref{eq - b^i_1 } ) , ( \\ref{eq - b^i_2})}}{= }                             \\\\[2 mm ] & \\qquad { \\mathrm{shuf}}(\\{\\omega\\cdot \\mathbf{i}+{\\mathcal l}^i_{\\overline{c } e } \\mid e\\in { \\mathbb n}_+\\ } \\cup      \\{\\omega\\cdot \\mathbf{i}+m \\mid m\\in { \\mathcal m}^i\\ } )      \\stackrel{\\text{(\\ref{eqt : lo_l_i+1 } ) , ( \\ref{order - for - i+1})}}{\\cong }   l^{i+1}_{\\overline{c } } \\end{aligned}\\ ] ] similarly , we can show : @xmath1028 ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^{i+1}_2 } ) ; \\sqsubseteq )    & \\cong & { \\mathrm{shuf}}(\\{\\omega\\cdot \\mathbf{i}+m\\mid m\\in { \\mathcal m}^i\\ } ) \\cong   m^{i+1 } , \\\\",
    "( \\pi^{-1}(l({\\mathcal a}^{i+1}_3)[b_2\\sharp])\\cap l({\\mathrm{run}}_{{\\mathcal a}^{i+1}_3 } ) ; \\sqsubseteq )    & \\cong & { \\mathrm{shuf}}(\\{\\omega\\cdot \\mathbf{i}+m\\mid m\\in { \\mathcal m}^i\\ } \\cup \\{\\omega\\cdot   \\mathbf{i}+k^i\\ } ) \\cong   k^{i+1}.\\end{aligned}\\ ] ] let @xmath1029 .",
    "it is easy to see that @xmath1030 for some regular language @xmath1031 with @xmath1032 .",
    "hence @xmath1033 satisfies the statement in proposition  [ prop : lo_automaticity ] .",
    "using the same technique , we can construct automatic presentations for @xmath784 ( @xmath1034 ) , @xmath786 , and @xmath785 in case @xmath335 is even .",
    "we first define the automata @xmath1013 , @xmath1014 , and @xmath1015 as in ( [ b^i_1])([b^i_3 ] ) , with @xmath1035 this time .",
    "then we construct @xmath1036 we define the following automata by applying lemma  [ lem : lo_aut_shuf ] : @xmath1037 by lemma  [ lem : lo_aut_shuf ] , it is easy to check the following : @xmath1038 ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^{i+1}_1 } ) ; \\sqsubseteq ) & \\cong &   { \\mathrm{shuf}}(\\{\\omega\\cdot \\mathbf{i}+{\\mathcal l}^{i}_{\\overline{c}x } \\mid x\\in { \\mathbb n}_+\\ } \\cup \\{\\omega\\cdot \\mathbf{i } + k^{i}\\})\\\\ & \\cong & l^{i+1}_{\\overline{c } } , \\\\",
    "( \\pi^{-1}(l({\\mathcal a}^{i+1}_2)[b_1\\sharp ] ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^{i+1}_2 } ) ; \\sqsubseteq ) & \\cong & { \\mathrm{shuf}}(\\{\\omega\\cdot \\mathbf{i}+m^{i}\\ } \\cup \\{\\omega\\cdot \\mathbf{i}+k^{i}\\ } ) \\\\ & \\cong & m^{i+1 } , \\\\",
    "( \\pi^{-1}(l({\\mathcal a}^{i+1}_3)[b_2\\sharp ] ) \\cap l({\\mathrm{run}}_{{\\mathcal a}^{i+1}_3 } ) ; \\sqsubseteq ) & \\cong & { \\mathrm{shuf}}(\\{\\omega\\cdot \\mathbf{i}+k^{i}\\ } ) \\\\ & \\cong & k^{i+1 } .\\end{aligned}\\ ] ] let @xmath1039 .",
    "it is easy to see that @xmath1040 for some regular language @xmath1031 with @xmath1041 .",
    "hence @xmath1033 satisfies the statement in proposition  [ prop : lo_automaticity ] .",
    "this finishes the construction in the inductive step and hence the proof of proposition  [ prop : lo_automaticity ] .",
    "hence we obtain :    [ thm : lo ] the isomorphism problem for the class of automatic linear orders is at least as hard as @xmath672 .    in @xcite , it is shown that every linear order has finite fc - rank .",
    "we do not define the fc - rank of a linear order in general , see e.g.   @xcite . a linear order @xmath1042 has fc - rank 1 , if after identifying all @xmath1043 such that the interval @xmath1044 $ ] is finite , one obtains a dense ordering or the singleton linear order .",
    "the result of @xcite mentioned above suggests that the isomorphism problem might be simpler for linear orders of low fc - rank .",
    "we now prove that this is not the case :    the isomorphism problem for automatic linear orders of fc - rank 1 is at least as hard as @xmath672 .",
    "we provide a reduction from the isomorphism problem for automatic linear orders ( of arbitrary rank ) : if @xmath1045 is an automatic linear order , then so is @xmath1046+[1,2 ) ) \\cdot ( l,\\le)$ ] ( this linear order is obtained from @xmath131 by replacing each point with a copy of the rational numbers in @xmath1047\\cup[1,2)$ ] )",
    ". then @xmath1048 has fc - rank 1 : only the copies of @xmath117 and @xmath141 will be identified , and the resulting order is isomorphic to @xmath1049 .",
    "moreover , @xmath1045 is isomorphic to the set of all @xmath1050 satisfying @xmath1051 .",
    "hence @xmath1052 if and only if @xmath1053+[1,2 ) ) \\cdot ( l,\\le ) \\cong ( ( -1,0]+[1,2 ) ) \\cdot ( l',\\le')$ ] , which completes the reduction .",
    "this paper looks at the isomorphism problem of some typical classes of automatic structures .",
    "such classes include equivalence structures , successor trees of height at most @xmath1054 , and linear orders .",
    "in particular , we demonstrate , respectively , @xmath1-completeness and @xmath3-completeness for the isomorphism problem of the first two classes .",
    "the uniformity in our proof shows that the isomorphism problem of automatic trees of finite height is recursively equivalent to @xmath672 .",
    "similarly , we prove that the isomorphism problem of automatic linear orders is at least as hard as @xmath672 . the same technique is also used to proved that the isomorphism problem of recursive trees of height at most @xmath24 is @xmath630-complete .",
    "we conclude with an application of theorems  [ thm : tree ] and [ thm : lo ] .",
    "the following corollary shows that although automatic structures look simple ( especially for automatic trees ) , there may be no `` simple '' isomorphism between two automatic copies of the same structure .",
    "an isomorphism @xmath741 between two automatic structures with domains @xmath1055 and @xmath1056 , respectively , is a @xmath1057-isomorphism , if the set @xmath1058 belongs to @xmath1057 .",
    "let @xmath1060 and @xmath1061 be two automatic trees .",
    "let @xmath1062 be an effective enumeration of all binary @xmath1057-predicates .",
    "this means that from given @xmath1063 we can effectively compute a description ( e.g. a @xmath1064-formula over @xmath1065 ) of the predicate @xmath1066 .",
    "we define the statement @xmath1067 as follows : @xmath1068{ll } \\forall x_1,x_2\\in d_1 \\ ; \\exists y_1,y_2\\in d_2 : \\     &   p_e(x_1,y_1 )       \\ ; \\wedge \\ ; p_e(x_2,y_2 ) \\ ; \\wedge \\\\    &    ( x_1 = x_2 \\leftrightarrow y_1 = y_2 ) \\ ; \\wedge \\ ;     ( ( x_1,x_2)\\in e_1 \\leftrightarrow ( y_1,y_2)\\in e_2 )   \\end{array}\\\\ & \\land\\forall y\\in d_2 \\ ; \\exists x\\in d_1 : \\       p_e(x , y)\\end{aligned}\\ ] ]",
    "since @xmath1069 is a @xmath1057-predicate , this is a @xmath1070-statement , which expresses the existence of a @xmath1071-isomorphism from @xmath250 to @xmath251 .    by theorem  [ thm : tree ]",
    ", there is a natural number @xmath24 such that the isomorphism problem on the class @xmath233 of automatic trees of height at most @xmath24 is @xmath1072-hard .",
    "if for all @xmath252 with @xmath246 there exists a @xmath1057-isomorphism from @xmath250 to @xmath251 , then the isomorphism problem on @xmath233 reduces to checking existence of a @xmath1057-isomorphism , which is in @xmath1070 by the above consideration .",
    "hence , there must be @xmath252 with @xmath246 but there is no @xmath1057-isomorphism between them .",
    "the corollary for linear orders can be proved in the same way , where in the definition of @xmath1067 we replace @xmath1073 with @xmath1074 , where @xmath1075 and @xmath1076 are the linear orders of @xmath250 and @xmath251 , respectively .",
    "b.  khoussainov and a.  nerode .",
    "automatic presentations of structures . in _ lcc : international workshop on logic and computational complexity _ , number 960 in lecture notes in computer science , pages 367392 , 1995 ."
  ],
  "abstract_text": [
    "<S> automatic structures are finitely presented structures where the universe and all relations can be recognized by finite automata . </S>",
    "<S> it is known that the isomorphism problem for automatic structures is complete for @xmath0 ; the first existential level of the analytical hierarchy . </S>",
    "<S> several new results on isomorphism problems for automatic structures are shown in this paper : ( i ) the isomorphism problem for automatic equivalence relations is complete for @xmath1 ( first universal level of the arithmetical hierarchy ) . </S>",
    "<S> ( ii ) the isomorphism problem for automatic trees of height @xmath2 is @xmath3-complete . </S>",
    "<S> ( iii ) the isomorphism problem for automatic linear orders is not arithmetical . </S>",
    "<S> this solves some open questions of khoussainov , rubin , and stephan . </S>"
  ]
}