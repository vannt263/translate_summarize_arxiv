{
  "article_text": [
    "recent years have seen the prevalent usage of _ symbolic execution _",
    "@xcite for program analysis .",
    "typical symbolic execution system builds _ path conditions _ corresponding to execution paths .",
    "a path condition is a constraint that represents logical relation between the input and output of an execution path .",
    "its components are constraints modeling the input and output relations of each program statement along the execution path .",
    "a path condition can be used to determine the set of inputs that causes a program to reach an error state .",
    "for example , given an array index @xmath0 and array size bound @xmath1 the path condition represents the conditions on the input variables that makes array bounds violation @xmath2 holding after executing a path .",
    "a constraint solver can be used to compute an actual program inputs that causes the violation .",
    "there are two well - known notions of the set of inputs represented by a path and violation conditions : _ weakest precondition _ and _ weakest liberal precondition_. these notions are elements of the general notion of _ predicate transformation",
    "_ introduced in @xcite . whereas weakest and weakest liberal preconditions computes input conditions in a `` backward '' manner , in the literature ,",
    "the notion of predicate transformation also includes a `` forward '' transformation called _ strongest postcondition_.    in this article , we explain how weakest and weakest liberal preconditions are different .",
    "we also explain how that under a very common condition of deterministic and terminating programs they are equivalent . in section",
    "[ sec : nonequivalence ] we provide some preliminary definitions together with our first result that in general , weakest and weakest liberal preconditions are not equivalent .",
    "we also present their relationships when the program is deterministic , and when the program induces a satisfiable transition relation . in section [ sec : equivalence ]",
    "we show that given a deterministic and terminating while program , weakest and weakest liberal preconditions are the same , and in section [ sec : discussion ] we show how to define weakest liberal precondition in terms of weakest precondition , and in section [ sec : conclusion ] we make some concluding remarks .",
    "here we clarify some terminologies . in this article , we adopt the more common definition of weakest liberal precondition as in @xcite .",
    "however , in some literature  @xcite , weakest liberal precondition is instead termed weakest precondition .",
    "our definition of weakest liberal precondition is equivalent to the weakest precondition of @xcite . on the other hand , weakest precondition that we mean in this article is that of @xcite or @xcite which is also sometimes also termed _",
    "pre - image _ in the literature ( cf .",
    "the backward ctl decision procedure in @xcite ) . compared to weakest liberal precondition",
    ", the notion of weakest precondition as in @xcite and @xcite adds the requirement that the precondition should guarantee the termination of the execution .",
    "we now start with some formal definitions .",
    "we denote by @xmath3 a sequence @xmath4 of ( program ) variables with some unspecified @xmath5 we abuse the notion of program to also mean any of its fragments such as , e.g. , a statement is also a program .",
    "now , any program @xmath6 induces a _ transition relation _",
    "@xmath7 on free variables @xmath3 and @xmath8 , where @xmath3 represents the program variables before the transition and @xmath8 represents the program variables after the transition .",
    "for example , an assignment statement @xmath9 induces the transition relation @xmath10 in general , for any condition @xmath11 we write @xmath12 to clarify that @xmath3 and no other are the free variables in @xmath13 given a program @xmath6 and a postcondition @xmath12 , the weakest liberal precondition of @xmath12 wrt . @xmath14 written @xmath15 is the formula @xmath16 where @xmath17 is @xmath12 with all its free variables renamed to their primed versions . on the other hand , the weakest precondition of @xmath12 wrt .",
    "@xmath14 written @xmath18 is the formula @xmath19 we remove the subscript @xmath6 from the transition relation symbol whenever it is clear from the context .    weakest liberal precondition and weakest precondition",
    "are not equivalent in general , as stated in the following theorem .",
    "[ theorem : neither ] in general , weakest liberal precondition is neither stronger nor weaker than weakest precondition .",
    "if weakest precondition was stronger than weakest liberal precondition , then the following would be unsatisfiable : @xmath20 this is equivalent to : @xmath21 there exists some @xmath22 such that this formula is satisfiable , that is , in case @xmath22 comes from nondeterministic statement .",
    "for example , when @xmath23 is just a satisfiable constraint @xmath12 , which says nothing about @xmath8 .",
    "more concrete example is when @xmath23 comes from the statements ` c = read ( ) ; ` or ` c = rand(seed ) ; ` assuming the ` read ( ) ` and ` rand(seed ) ` can return any value .    on the other hand ,",
    "if weakest liberal precondition was stronger than weakest precondition , then the following would be unsatisfiable : @xmath24 this is equivalent to : @xmath25 however , also in this case there is some @xmath22 such that the formula is satisfiable , that is , when @xmath22 is @xmath26 a concrete example of such @xmath22 is an ` exit(0 ) ; ` statement in c , or any other statement that aborts the program .",
    "[ theorem : wpstronger ] when the transition relation is deterministic , weakest precondition is stronger than weakest liberal precondition .    we can infer this from the proof of theorem [ theorem : neither ] above .",
    "more formally , we show this by proving that the following is unsatisfiable when @xmath23 is @xmath27 for some deterministic function @xmath28 : @xmath20 this is equivalent to : @xmath29 substituting @xmath23 with @xmath30 we have : @xmath31 , which is unsatisfiable if f is deterministic .    [",
    "theorem : wlpstronger ] when the transition relation is satisfiable , weakest liberal precondition is stronger than weakest precondition .",
    "we can infer this from the proof of theorem [ theorem : neither ] above .",
    "more formally , we proceed by showing a contradiction that @xmath32 is unsatisfiable in case @xmath23 is satisfiable .",
    "it is easy to see that ( [ eqn : contradict2 ] ) is equivalent to : @xmath33 which is absurd as @xmath34 is @xmath35 and @xmath36    in the special case of sequential programs , since the weakest liberal precondition is actually equivalent to weakest precondition .",
    "following is the proof why , for sequential programs , weakest liberal precondition is equivalent to weakest precondition .",
    "a deterministic sequential while program may contain assignments , if conditionals , and while loops , and their sequential compositions in the usual manner .",
    "in addition , for any assignment @xmath37 , @xmath28 is a deterministic function .",
    "let us now examine the transition relation induced by each of the statement of a deterministic sequential while program :    1 .   for an assignment @xmath37 , the transition relation @xmath23 is @xmath30 .",
    "2 .   for an if conditional @xmath38 when the transition relation for @xmath6 is @xmath39 and the transition relation for @xmath40 is @xmath41 , the transition relation @xmath23 induced by the if conditional is @xmath42 3 .   for a while loop @xmath43 when the transition relation for @xmath6 is @xmath39 , then the transition relation for the while loop is the infinite formula @xmath44 or , @xmath45 it is important to note here that for any nonterminating program @xmath6 , @xmath46 for all @xmath0 is unsatisfiable , hence @xmath39 is @xmath26    note that a deterministic while program induces a transition relation that is always satisfiable , since if and while conditionals construct two guarded program paths which guards are opposite of each other . hence , given a program execution state ,",
    "both guards can not be unsatisfiable . since a deterministic while program is both deterministic and has transition relation that is always satisfiable , theorems [ theorem : wpstronger ] and [ theorem : wlpstronger ] seem to have already suggested that a deterministic while program would have equivalent weakest liberal precondition and weakest precondition , however , here we will proceed more formally and carefully .",
    "[ lemma : equivalent ] the weakest liberal precondition of an assignment is equivalent to its weakest precondition .",
    "given an assignment @xmath37 and a postcondition @xmath12 , the weakest liberal precondition is @xmath47 and the weakest precondition is @xmath48 each one is equivalent to @xmath49 given @xmath28 deterministic function .",
    "[ lemma : sequence ] when for each program @xmath6 and @xmath50 the weakest liberal precondition is equivalent to the weakest precondition given any postcondition , then given a postcondition @xmath51 the sequence @xmath52 has equivalent weakest liberal precondition and weakest precondition .    given",
    "the postcondition @xmath51 the weakest liberal precondition of of @xmath53 wrt .",
    "@xmath40 is @xmath54 , which is necessarily equivalent to the weakest precondition of @xmath53 wrt .",
    "now , given @xmath54 as postcondition , the weakest liberal precondition and weakest precondition of @xmath54 wrt .",
    "@xmath6 are necessarily equivalent from our assumption that for any postcondition @xmath55 and program @xmath14 @xmath56    [ theorem : deterministic ] given a deterministic and terminating sequential while program @xmath6 and a postcondition , the weakest liberal precondition of the program wrt .",
    "the postcondition is equivalent to the weakest precondition of the program wrt .",
    "the postcondition .",
    "we prove inductively .",
    "when @xmath6 is just a sequence of assignments , from lemma [ lemma : equivalent ] and lemma [ lemma : sequence ] we obtain the desired result .",
    "now let us assume @xmath6 to be an if conditional , say of the form @xmath57 as our induction hypothesis , we also assume that both @xmath6 and @xmath40 have equivalent weakest liberal precondition and weakest precondition given any postcondition .",
    "now suppose that the postcondition of the statement is @xmath13 recall that the transition relation of an if conditional is @xmath58 the weakest liberal precondition of the if condition , given @xmath55 as postcondition is therefore @xmath59 which is equivalent to @xmath60 note that in the above , @xmath16 and @xmath61 are the weakest liberal preconditions of @xmath12 wrt .",
    "respectively @xmath6 and @xmath40 .",
    "we name them @xmath62 and @xmath63 , respectively , obtaining ( [ eqn : one ] ) below : @xmath64 now the weakest precondition of @xmath55 wrt . the @xmath65 condition , is : @xmath66 which is equivalent to @xmath67 since the weakest precondition and weakest liberal preconditions of @xmath6 and @xmath40 are equivalent , we get : @xmath68 this is equivalent to ( [ eqn : one ] ) .    while loop of the syntax @xmath69 has the same semantics as the following infinite program consisting of if conditionals . @xmath70",
    "the infinite programs exactly induces the same transition relation as the while loop presented above . due to termination assumption ,",
    "the same while loop can be written using a finite number of if conditionals ( from the first if conditional up to the last ( innermost ) if conditional where @xmath12 is @xmath35 ) .",
    "more importantly , the while loop induces a transition relation that is satisfiable ( not @xmath35 ) , that is , there is a possible execution from the point before the loop to the point right after the loop . since one",
    "if conditional preserves the equivalence of weakest liberal precondition and weakest precondition , as above , so does terminating while loops ( which are representable as finite number of ifs ) .",
    "it is easy to see that the following relationship holds between weakest liberal precondition and weakest precondition , where the weakest liberal precondition @xmath71 is actually equivalent to the negation of the weakest precondition of the negated postcondition .",
    "@xmath72 this fact has been mentioned by bourdoncle in his abstract debugging approach @xcite , where he introduced two kinds of assertions to be guaranteed by a correctly running programs : _ always _ assertions and _ eventually _ assertions .",
    "the proofs of both require program state - space exploration using backward fixpoint computations .",
    "the state - space exploration of the always assertions employ weakest liberal precondition while the state - space exploration of the eventually assertions employ weakest precondition .",
    "the intuitive relations between both assertions is that , if suppose that we had an always assertion of some program correctness condition , and if the assertion holds , then in no circumstance that a program state where that assertion is violated can be eventually reached .",
    "that is , it is _ not _ the case that a _ negation _ of the correctness condition eventually holds .",
    "weakest precondition guarantees the total correctness of a hoare s triples @xmath73 , where @xmath74 is a precondition , @xmath55 a postcondition , and @xmath75 a statement . the notion of weakest liberal precondition , on the other hand ,",
    "guarantees only partial correctness of the triples , where the postcondition is guaranteed to hold only when the statement was executed successfully .    as a note , we can define weakest liberal precondition using weakest precondition .",
    "this does not mean , however , that we can not implement weakest liberal precondition propagation indirectly using weakest precondition computation . note that in a sequence @xmath52 the weakest liberal precondition of a condition @xmath12 wrt .",
    "the program @xmath40 is @xmath76 , which is equivalent to @xmath77 , where @xmath78 is the state transition relation defined by the program @xmath79 now , the weakest liberal precondition of the sequence is @xmath80 which is equivalent to @xmath81 notice that @xmath82 is @xmath83",
    "the semantics of the guarded commands language introduced in @xcite embeds the notion of termination . in @xcite ,",
    "weakest precondition has to satisfy an additional condition @xmath84 ( satisfiability of at least one guard in case of guarded ifs , and a measure for the termination of a guarded loop ) , which ensures the termination of the statement .",
    "however , @xmath84 does not exclude nondeterminism , and therefore from theorems [ theorem : neither ] , [ theorem : wpstronger ] , and [ theorem : wlpstronger ] , we infer that the notion of weakest precondition and @xmath84 in @xcite is stronger than the notion of weakest precondition used in this article .",
    "we note that in this article , we have considered _ value _ nondeterminism of functions , while @xcite consider _ control _ nondeterminism where multiple guards can be true at the same time and the semantics does not specify which branch is taken .",
    "however , control nondeterminism can always be modeled using value nondeterminism by having some guards which depend on random value ."
  ],
  "abstract_text": [
    "<S> in this article we investigate the relationships between the classical notions of weakest precondition and weakest liberal precondition , and provide several results , namely that in general , weakest liberal precondition is neither stronger nor weaker than weakest precondition , however , given a deterministic and terminating sequential while program and a postcondition , they are equivalent . hence , in such situation , it does not matter which definition is used .    </S>",
    "<S> programming languages , program verification , program analysis , symbolic execution </S>"
  ]
}