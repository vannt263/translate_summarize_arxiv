{
  "article_text": [
    "the evolution of a generic quantum spin system is described by an appropriate schrdinger equation , where the hamiltonian operator @xmath0 encloses all the information about its dynamics , including external fields and spin - spin interactions .",
    "the `` academic '' strategy involves the solution of an eigen - problem for @xmath0 and the state vectors @xmath1 @xcite .",
    "this can be a major computational task , since the dimensionality of the underlying hilbert space scales exponentially with the number @xmath2 of interacting spins in the system . in practice",
    ", such scenario constrains the problem to the treatment of few - spins systems , or dealing with special cases where symmetries provide further simplifications @xcite .",
    "nowadays , there are many alternative strategies that can be employed instead of the full matrix diagonalization .",
    "a reliable approximate method needs to be unitary , i.e. it must conserve the total probability during the quantum evolution .",
    "in particular , standard numerical integrators like the runge - kutta algorithm fail to fulfill such condition .",
    "by contrast , the trotter - suzuki ( ts ) algorithm @xcite does preserve unitarity , since it approximates the exact evolution operator by a set of adequately built partial evolution operators . provided that the time steps are short enough , the exact evolution is well approximated by the successive partial evolutions .",
    "additionally , it is worthy to mention that the ts method does not rely on any hilbert space truncation .",
    "this is particularly important when addressing long - time asymptotics of interacting many - body systems , a problem of major relevance in fundamental physics @xcite .    within the last years ,",
    "graphics processing units ( gpu ) have been successfully employed to accelerate numerical algorithms that solve the schrdinger equation @xcite .",
    "most of these implementations deal with one - body or wave - packet quantum dynamics .",
    "however , the potential of the gpu has not been exploited within a wide range of many - body problems , such as interacting spin systems . here ,",
    "spin - spin interactions provide a substantial complexity , which turns out to be a crucial challenge not only for the computational implementation but also for out - of - equilibrium physics .",
    "in this article we report on an implementation of a 4th order ts decomposition in gpu .",
    "we consider intrinsically interacting spin hamiltonians without any hilbert space truncation or any further assumption about symmetries or ad hoc dynamical conditions .",
    "our implementation is based on the xyz decomposition @xcite , in which the hamiltonian is partitioned in the x , y and z components of the bilinear spin interactions .",
    "since the z component can be written in a simple diagonal form , it only modifies the phases of the states .",
    "moreover , since the x and y components are non - diagonal , local rotations are performed in order to map them into z - like terms .",
    "the z - like terms and the local rotations are implemented by means of a massive parallelization scheme .",
    "the speedup obtained goes beyond 30 times compared with an openmp implementation on a 6-core cpu . despite this decrease in execution time ,",
    "the system size is still bounded by the maximum amount of memory available , which is about 6 gb for current - generation gpus .",
    "thus , our implementation is capable of reaching a system of 27 spins , which is still a significant number when compared to other methods .",
    "the paper is organized as follows . in sec .",
    "[ sec : trotter algorithm ] we summarize the basis of the ts algorithm . in sec .",
    "[ sec : implementation ] we describe the main procedures performed by our gpu implementation . in sec .",
    "[ sec : results ] we discuss the performance and accuracy .",
    "we include also in [ sec : entangled - state ] a brief discussion on two scenarios where this computational strategy can be employed : magnetic resonance spin ensemble calculations , where the present work is currently being exploited , and its potential use in the evolution of matrix product states . sec .",
    "[ sec : conclusions ] concludes the present work .",
    "in this section we summarize the ts method for spin systems as presented in ref .",
    "we consider a time - independent spin @xmath3 hamiltonian :    @xmath4    where @xmath5 is the spin operator at site @xmath6 and @xmath7 .",
    "the parameters @xmath8 define the local fields or chemical shifts , with the constraint @xmath9 , while @xmath10 are the couplings between two spins .",
    "we assume that the @xmath11-spin system is initially described by a state vector @xmath12 , which is expanded in the computational ising basis :    @xmath13    here , @xmath14 are complex coefficients and @xmath15 are tensor products of eigenvectors of each @xmath16 , typically referred as the @xmath17-_decoupled _ or _ ising _ basis . in [ sec : entangled - state ] we discuss two particularly relevant cases in which _ pure _ states , as in eq .",
    "[ eq : inicial ] , are employed to evaluate the dynamics of complex many - body systems .",
    "in fact , we stress that the present computational strategy can be substantially exploited when combined with sophisticated physically - based representations @xcite .    the state of the system at an arbitrary time @xmath18 is formally given by @xmath19 . for simplicity , we set from now on @xmath20 .",
    "the main idea of the ts method relies on finding an appropriate partition of @xmath0 which may yield a set of simple partial evolutions that approximate the exact one @xmath21 . if we consider eq .",
    "[ eq : hamiltoniano general ] as a particular sum of terms @xmath22 , then :    @xmath23    the first order approximation to @xmath21 is @xmath24 while the second and fourth order approximations can be expressed in terms of the first : @xmath25 @xmath26 where @xmath27 .",
    "these are indeed satisfactory approximations to @xmath21 provided that @xmath18 must be small enough compared to the maximum local time - scale determined by @xmath0 .",
    "such role is played by the local second moment of the interactions .",
    "this means that the partial evolution time step @xmath28 must satisfy :    @xmath29 ^{-1 } \\simeq \\left [   \\underset{j , k}{max } \\left [ { \\displaystyle\\sum\\limits_{\\alpha = x , y , z } } \\left(\\frac{h_{j}^{\\alpha}}{2}\\right)^2 + % { \\displaystyle\\sum\\limits_{\\alpha = x , y , z } }   \\left ( \\frac{j_{j , k}^{\\alpha}}{4 } \\right)^2 \\right]^{\\frac{1}{2 } } \\right]^{-1 } \\label{eq : segundomomento}\\ ] ]    now we address specifically how to build an operator @xmath30 given by eq .",
    "[ eq : u1 ] from the total hamiltonian of eq .",
    "[ eq : hamiltoniano general ] .",
    "the natural choice for the partition sum are the single - spin and the two - spin terms , which shall be mapped into a diagonal representation by suitable rotations .",
    "in particular , we consider the operators that rotate @xmath31 and @xmath32 axis into the @xmath33 axis :    @xmath34    and satisfy :    @xmath35    @xmath36    these operators rotate @xmath37 and @xmath38 into @xmath17 with the purpose of performing any phase correction in the computational ising basis .",
    "the partial evolution @xmath39 $ ] yields a trivial phase for @xmath40 , while @xmath41 need to be properly rotated using @xmath42 and @xmath43 respectively .",
    "the @xmath44-index labels each spin , and the corresponding global rotations are defined by @xmath45 and @xmath46 .",
    "let us first consider the single - spin operations ,    @xmath47   \\right )   \\backsimeq \\prod_{\\alpha = x , y , z}\\exp\\left [ -\\mathrm{i}t{\\displaystyle\\sum\\limits_{j = 1}^{n}}h_{j}^{\\alpha}s_{j}^{\\alpha}\\right ] .",
    "% = \\prod_{\\alpha = x , y , z } \\prod_{j = 1}^{n } \\exp\\left [ % -\\mathrm{i}th_{j}^{\\alpha}s_{j}^{\\alpha}\\right ] .",
    "\\label{eq : spin rotation}%\\ ] ]    here , we stress that the approximate equality relies on the validity of eq .",
    "[ eq : segundomomento ] .",
    "as mentioned above , non trivial exponentials are rotated :    @xmath48    &   = y \\exp\\left (   -\\mathrm{i } t \\displaystyle\\sum\\limits_{j=1}^{n } h_{j}^{x}s_{j}^{z }   \\right )   y^{\\dagger } , % \\nonumber\\\\ \\exp\\left[-\\mathrm{i}t \\displaystyle\\sum\\limits_{j=1}^{n } h_{j}^{y } s_{j}^{y}\\right ]       &   = x \\exp\\left (   -\\mathrm{i } t \\displaystyle\\sum\\limits_{j=1}^{n } h_{j}^{y}s_{j}^{z }   \\right )   x^{\\dagger}.% \\label{eq : single spin rotation}\\end{aligned}\\ ] ]    notice that this kind of single - spin operations can be computed exactly without rotations and without the approximation of eq .",
    "[ eq : spin rotation ] .",
    "nevertheless , our purpose is to write all the partial evolution operators in an explicit diagonal form .",
    "this strategy will be specifically exploited in the computational implementation , as shown in section [ sec : implementation ] .    in analogy with eq .",
    "[ eq : spin rotation ] , the two - spin operators yield :    @xmath49   \\right )   \\simeq   \\prod_{\\alpha = x , y , z } \\exp\\left (   -\\mathrm{i}t\\left [ { \\displaystyle\\sum\\limits_{j , k=1}^{n } } j_{j , k}^{\\alpha}s_{j}^{\\alpha}s_{k}^{\\alpha}\\right ]   \\right)\\end{aligned}\\ ] ]    once again , the z - terms yield diagonal operators :    @xmath50    the remaining two - spin terms are rotated by @xmath32 and @xmath31 accordingly ,    @xmath51   \\right ) = % y \\exp\\left (   -\\mathrm{i}t\\left[{\\displaystyle\\sum\\limits_{j , k=1}^{n } } j_{j , k}^{x}s_{j}^{z}s_{k}^{z}\\right ] \\right ) y^{\\dagger},% \\nonumber\\\\ \\exp\\left (   -\\mathrm{i}t\\left[{\\displaystyle\\sum\\limits_{j , k=1}^{n } } j_{j , k}^{\\alpha}s_{j}^{y}s_{k}^{y}\\right ]   \\right ) = % x \\exp\\left (   -\\mathrm{i}t\\left[{\\displaystyle\\sum\\limits_{j , k=1}^{n } } j_{j , k}^{x}s_{j}^{z}s_{k}^{z}\\right ] \\right ) x^{\\dagger}.% \\label{eq : two - spin - operators}\\end{aligned}\\ ] ]    notice that , from eqs .",
    "[ eq : single spin rotation ] and [ eq : two - spin - operators ] , the rotations for single and double spin terms can be performed simultaneously . in such sense",
    ", we stress that the ts implementation described here has been intentionally prepared in order to enable parallelization .",
    "any state written in the form of eq .",
    "[ eq : inicial ] can be evolved by the successive application of partial evolution operators , as those defined in sec .",
    "[ sec : trotter algorithm ] . at any time",
    ", the state vector is represented by a double precision complex array that occupies @xmath52 bytes of memory .",
    "its @xmath53th element stores the probability amplitude @xmath54 for the corresponding state of the ising basis .",
    "since these @xmath55 states are tensor products of up and down configurations for each spin , they can be written according to the @xmath2-bit binary representation of @xmath53 .",
    "naturally , the size of the system is constrained by the maximum amount of memory available in the gpu ( in our case , 6 gb for a nvidia tesla c2075 ) .",
    "the implementation of the evolution is divided into two main modules : phase - corrections and axis - rotations .",
    "@xmath56      this module performs the phase corrections depending on the z - projection ( up or down ) and position of each spin in each state of the ising basis . in this stage",
    "there are no cross terms between different basis states ( all operations are diagonal ) , and therefore the parallelization is trivial .",
    "however , due to the two - spin terms , the time of evaluation of each phase correction increases quadratically with the number of spins .    since the hamiltonian is time - independent ,",
    "the phase corrections can be computed in advance ( i.e. before performing the actual sequence of partial evolutions ) and stored in memory for the following evolutions , amortizing its high cost .",
    "in fact , eq . [ eq : zz - phases ] ensures that the phases only depend on the time step and the hamiltonian parameters .",
    "the disadvantage of such pre - computed phase corrections lies on the amount of memory required to store three @xmath55-element vectors , increasing memory usage by 150% and limiting simulations to 27 spins on 6 gb gpus instead of 28 .",
    "this technique , however , reduces phase correction time for large systems by 97% .",
    "additionally , since every phase correction is followed by a backward rotation that also operates on the whole state , the phase correction kernel is merged with the backward rotation kernel .",
    "therefore , the phase correction is performed when the rotation kernel reads elements from memory and just before applying the rotation .",
    "this saves two global memory operations on each element and a kernel call .",
    "combined , these improvements reduce the overall simulation time by up to 52% .",
    "the rotation module acts on pairs of basis states by means of the operators @xmath31 and @xmath32 defined in eq .",
    "[ eq : rotations ] .",
    "if a particular basis state has the @xmath6-th spin down , then it is paired to the basis state that has the @xmath6-th spin up and the same configuration for the rest of spins .",
    "let @xmath57 be the binary representation of a particular basis state in which the @xmath6-th spin is down , i.e. its @xmath6-th bit is @xmath58 : @xmath59 .",
    "then , @xmath57 is paired to @xmath60 .",
    "this pairing procedure must range the whole hilbert space .",
    "thus , for every value of @xmath6 the pairing must be repeated over the @xmath61 states that have the sought configuration in the @xmath6-th spin .    in order to show how",
    "the parallelization can be performed at this stage , let us exemplify one case of the pairing procedure .",
    "if we address the rotation of the second spin in a four - spin system , then the pairs of states under consideration are the following : @xmath62{c}% \\downarrow\\downarrow \\boldsymbol{\\downarrow } \\downarrow\\\\ \\downarrow\\downarrow \\boldsymbol{\\uparrow } \\downarrow \\end{array } , % \\begin{array } [ c]{c}% \\downarrow\\downarrow \\boldsymbol{\\downarrow } \\uparrow\\\\ \\downarrow\\downarrow \\boldsymbol{\\uparrow } \\uparrow \\end{array } , % \\begin{array } [ c]{c}% \\downarrow\\uparrow \\boldsymbol{\\downarrow } \\downarrow\\\\ \\downarrow\\uparrow \\boldsymbol{\\uparrow } \\downarrow \\end{array } , % \\begin{array } [ c]{c}% \\downarrow\\uparrow \\boldsymbol{\\downarrow } \\uparrow\\\\ \\downarrow\\uparrow \\boldsymbol{\\uparrow } \\uparrow \\end{array } , % \\begin{array } [ c]{c}% \\uparrow\\downarrow \\boldsymbol{\\downarrow } \\downarrow\\\\ \\uparrow\\downarrow \\boldsymbol{\\uparrow } \\downarrow \\end{array } , % \\begin{array } [ c]{c}% \\uparrow\\downarrow \\boldsymbol{\\downarrow } \\uparrow\\\\ \\uparrow\\downarrow \\boldsymbol{\\uparrow } \\uparrow \\end{array } , % \\begin{array } [ c]{c}% \\uparrow\\uparrow \\boldsymbol{\\downarrow } \\downarrow\\\\ \\uparrow\\uparrow \\boldsymbol{\\uparrow } \\downarrow \\end{array } \\text { and } % \\begin{array } [ c]{c}% \\uparrow\\uparrow \\boldsymbol{\\downarrow } \\uparrow\\\\ \\uparrow\\uparrow \\boldsymbol{\\uparrow } \\uparrow \\end{array } \\text{.}%\\ ] ]    notice that the number of pairings is @xmath63 . from this example",
    "it is clear that there are no repetitions in any of the basis states when executing one specific rotation ( i.e. a particular @xmath6 ) .",
    "thus , each rotation operation within the same @xmath6-spin results independent and can be parallelized .      as stated above",
    ", the rotation of the @xmath6-th spin involves @xmath61 independent operations .",
    "accordingly , a gpu kernel that rotates the @xmath6-th spin on a single pair is launched on @xmath61 threads , one per pair .",
    "since the rotation has an extremely low arithmetic intensity of 0.125 operations per byte transferred ( i.e. 8 operations per pair of states read and written back to memory ) compared to our gpu s 27.46 double precision flops / bandwidth ratio , the kernel is severely limited by memory bandwidth to feed each thread with data . to avoid this bottleneck",
    ", the optimized implementation reads each of these states from global memory and performs as many rotations as possible before writing them back .",
    "let us consider a subset of @xmath64 specific spins ( @xmath65 ) denoted by @xmath66 and fix its state configuration , i.e. with a particular choice of @xmath67 or @xmath68 for each of the @xmath64 spins .",
    "then , the set of all states that satisfy the specified configuration for the spins in @xmath66 is closed under the pairing operation that flips any spin which is not in @xmath66 .",
    "for example , in the case @xmath69 one can consider the @xmath66 set composed by spins 1 and 3 ( i.e. @xmath70 ) . now ,",
    "if we fix the configuration @xmath71 , the set of states that satisfy such configuration is @xmath72 , and this set is closed under the pairing operation for spins 2 and 4 ( those which are not in @xmath66 ) .",
    "the previous observation allows us to launch @xmath73 thread blocks on the gpu , and define their specific spin configurations ( the state of the @xmath64 spins in @xmath66 ) using the binary encoding of each thread block s unique index .",
    "this leaves each thread block with its own set of @xmath74 states to rotate and , by the observation above , every state s peers for spins @xmath75 are also within the set .",
    "each thread block can then copy its set of states to the fast shared memory available in each multiprocessor within a gpu , and perform the rotations for all the spins in @xmath75 without any further global memory access .",
    "once these rotations are done , the results are copied back to global memory and the kernel finishes .",
    "while the previous procedure improves rotation time , the approach has a problem : when rotating `` higher '' spins , the lower bits of the state handled by a thread block are defined by its thread block index , which results in adjacent states being interleaved across different thread blocks . for example , when rotating spins 1 and 2 in a single kernel call on a 4-spin problem , the set of states rotated by each thread block is :    [ cols=\"^,<,<,<,<\",options=\"header \" , ]     it is easy to notice that consecutive states ( e.g. @xmath76 and @xmath77 ) are assigned to different thread blocks . since gpu memory controllers fetch long bursts ( currently 128 bytes long ) of contiguous data to l1 cache , which is local to each multiprocessor ( which execute few thread blocks at a time ) , this interleaving wastes memory bandwidth significantly .    in order to mitigate the mentioned problem",
    ", we never include the @xmath78 lowest spins @xmath79 $ ] in @xmath66 , so that each thread block always operates on runs of at least @xmath80 consecutive elements in memory .",
    "only the first rotation kernel that is called in a full evolution rotates spins @xmath79 $ ] , while the rest of the kernels perform @xmath78 fewer rotations than in the previous approach because these lower spins still consume shared memory .",
    "the improved bandwidth efficiency allowed by coalesced memory accesses results in a @xmath81 speedup over the previous kernel on high - spin rotations for @xmath82 , which matches the memory controller s 128-byte line length .",
    "figure [ fig : rotations ] shows how a 6-spin rotation is performed using one kernel call with @xmath83 and two kernel calls with @xmath82 .",
    "we also tried storing these @xmath80 elements in registers instead of shared memory , to preserve the maximum amount of rotations per kernel call .",
    "this generated significant register pressure due to the size of complex double precision numbers , producing low multiprocessor occupancy , and resulted in the kernel performing worse than the kernel that uses shared memory to store every element .",
    "are assigned and rotated within each block . left panel : rotation of spins @xmath84 without memory coalescing .",
    "right panel : the striped @xmath85 spins @xmath86 are used for memory coalescing ; two kernel calls are performed , rotating spins @xmath87 and then @xmath88.,title=\"fig:\",scaledwidth=90.0% ] +    we measured the rotation times for different values of @xmath78 and different thread block sizes , and found out that there are no optimal values that work for every rotation and every system size .",
    "thus , we wrote a small tool that does a brute force search for the fastest series of rotations that perform a full evolution for every system size that fits in memory .",
    "these optimal configurations are stored in a file and are used by our rotation code in following executions .",
    "we replicated the gpu scheme on a cpu using openmp intrinsics with few changes to the algorithm : we still precompute phase corrections , divide the system into blocks and perform as many rotations as possible , but each thread loops over whole blocks at a time .",
    "the rotation code is instantiated for many different block sizes and values of @xmath78 using c++ template metaprogramming , providing the compiler with as much compile - time data as possible to perform automatic vectorization . instead of using shared memory to store intermediate values ,",
    "since the blocking strategy has strong temporal and spatial locality we assume that the caches on the cpu will hold the values without hitting the memory bus .",
    "as in the gpu code , optimal rotation sizes and their tunable parameters are precomputed using a separate brute force search tool .",
    "+    as a result of this implementation we plot in fig . [",
    "fig : cpu vs gpu ] the execution times for the original fortran cpu code without optimizations , the backported cpu code running on one and six threads , and the three different gpu versions .",
    "the tests were run on an intel core i7 - 980 six - core processor with triple channel ddr3 - 1066 memory and a tesla c2075 gpu .",
    "the cpu code was compiled with gcc 4.7.2 , using ` -ofast -march = native -mtune = native -fno - exceptions -fno - rtti -flto -fopenmp ` compiler flags , while the gpu code was compiled with cuda 5.0 using ` -o -use_fast_math -gencode arch = compute_20,code = sm_20 ` compiler flags .    in fig .",
    "[ fig : cpu vs gpu ] , it can also be observed that for small systems , the original cpu code is faster than parallel implementations because computing the quadratic phase correction is faster than performing a table lookup for small values of @xmath2 , and it does not suffer from parallelization overhead like its cpu siblings .",
    "meanwhile , the gpu versions do not have enough work to feed all the gpu s execution resources .    on the other hand ,",
    "when @xmath2 is considerably large , the execution time of the gpu implementation increases exponentially in @xmath2 .",
    "the inflection point around @xmath89 indicates that the gpu reaches its full capacity , and afterwards each gpu version scales as @xmath90 , with a factor @xmath91 higher than @xmath92 .",
    "in fact , this parameter can be obtained by a linear fitting of each curve in fig .",
    "[ fig : cpu vs gpu ] for @xmath93 .",
    "the original cpu implementation yields @xmath94 , while the cpu backported ( 6 thread ) yields @xmath95 . the naive gpu - basic and the gpu - optimized result @xmath95 and @xmath96 respectively .",
    "these small differences between the implementations are reflected in the behavior of the relative speedup , which is shown in fig .",
    "[ fig : speedup]-*a * and * b * for selected implementations .    since the memory bandwidth is the main limiting factor of the algorithm s performance , we measured the bandwidth achieved by the multiple rotation kernel to verify the quality of our implementation .",
    "our fastest cuda kernel implementation uses 80% of the 120gbps reported by nvidia s bandwidth test tool included in the cuda sdk , while the backported cpu implementation uses between 50% and 70% of the 10 gbps reported by the stream benchmark @xcite on our system .",
    "these results reflect our decision to focus our optimizations on gpu code and ensure that our cpu implementation avoids hitting the memory bus during a series of rotations .",
    "we estimate that better tuned cpu implementations can extract a similar percentage of the platform s memory bandwidth .",
    "however , with current high - end dual - socket quad - channel ddr3 platforms reaching 100 gbps @xcite and current high - end gpus doubling this quantity @xcite we expect gpus to maintain their dominance .",
    "the high bandwidth utilization on the gpu also implies that further improvements will require a different algorithm to perform rotations .",
    "+      the last issue to be addressed concerns the accuracy of our ts implementation .",
    "several comparisons were performed between the present method and exact diagonalization schemes @xcite , i.e. the solution of the schrdinger equation as an eigenproblem .",
    "the evolution of local and non - local physical magnitudes was compared for one - dimensional spin systems described by hamiltonians in the form of eq .",
    "[ eq : hamiltoniano general ] . for @xmath97 ,",
    "a sequence of @xmath98 ts steps yields a relative difference bounded by @xmath99 .",
    "a second accuracy test was provided by the spurious total magnetization observed in polarization - conserving hamiltonians .",
    "in fact , this a strictly physical condition : if the initial state has zero total magnetization , then the evolved one should remain so .",
    "in general , we observe a linear increase of the total magnetization of the spin system , which is consistent with the general expectancies of a linear increase of the ts error as function of the number of steps .",
    "in particular , for @xmath100 and @xmath101 ts steps , we observe a relative deviation less than @xmath102 , a precision which is good enough for practical purposes .",
    "an alternative strategy for error quantification is provided by the _",
    "loschmidt echo _",
    "( le ) @xcite .",
    "it evaluates the reversibility of a system s dynamics in the presence of uncontrolled degrees of freedom @xcite . for a particular initial state @xmath103 ,",
    "the standard le definition @xcite is :    @xmath104   exp\\left [ -\\mathrm{i}h_{0}t\\right ]    \\left\\vert \\psi_{0}^{{}}\\right\\rangle \\vert^{2},\\ ] ]    where @xmath105 is a reversed hamiltonian , and @xmath106 encloses uncontrolled non - reversed degrees of freedom . in the present case ,",
    "we set @xmath107 , which for an ideal perfectly accurate computation would yield @xmath108 , @xmath109 . in principle",
    ", this statement is completely irrespective of the ts approximation and its intrinsic accuracy ( i.e. the validity of eq .",
    "[ eq : segundomomento ] ) . as a matter of fact",
    ", exactly the same sequences of ts partial evolutions are applied in the forward and backwards dynamics , except for the change in the sign of @xmath28 .",
    "therefore , the deviations of @xmath110 away from the unity could be intrinsically originated in the execution of floating point operations by the specific hardware .",
    "we consider initial states given by random superpositions of ising states ( e.g. eq . [ eq : entanglado ] ) , for a @xmath111 spin set .",
    "two cases of different dynamical complexity are evaluated .",
    "the first case is a ring configuration described by a nearest neighbors heisenberg hamiltonian .",
    "as above , this interaction conserves total magnetization , and then the dynamics does not explore the whole hilbert space . for this case , @xmath112 ts steps yield @xmath113 , while @xmath101 ts steps yield @xmath114 . again , the error appears to increase linearly with the number of ts steps .",
    "however , we stress here that these deviations can not be associated to the ts decomposition .",
    "the second case is built from the first , adding double quantum terms @xmath115 up to third next nearest neighbors .",
    "in this situation , total magnetization is not conserved , and therefore dynamics effectively mixes all spin projection subspaces exploring the whole hilbert space .",
    "it turns out that @xmath101 ts steps yield @xmath116 , which is slightly larger than the first case .",
    "this may indicate that errors in computational operations can depend on the complexity of the many - body dynamics .",
    "once again , these examples evidence a satisfactory accuracy of our ts - gpu implementation .",
    "a systematic study of the le as an error quantifier is well beyond the scope of this article .",
    "this would require ranging over @xmath11 and the number of ts steps , different hamiltonian complexities and initial states , among many other factors .",
    "however , the le turns to be a promising witness to address computational errors in gpu and cpu implementations .",
    "we presented here a gpu implementation that boosted the trotter - suzuki method for quantum spin dynamics .",
    "we developed a parallelization scheme to exploit the massive parallel architecture of the gpu cards .",
    "the results showed a significant increase of performance when compared to a similar cpu implementation . in our tested platform",
    ", the speedup was measured to be of up to 30 times .",
    "the benefits provided by this massive parallel hardware , boosted the capability of evaluating the dynamics of considerably large quantum spin systems .",
    "in particular , we were able to evolve a maximum of @xmath117 spins ( limited only by the gpu memory ) in reasonable execution times .",
    "the comparison between our trotter - suzuki implementation with exact numerical approaches yielded estimated relative errors which turned to be fairly acceptable within the standard expectancies of this kind of computational strategy .",
    "the implementation of this algorithm and the efficiency achieved open promising opportunities for studying fundamental questions within the field of out - of - equilibrium quantum many - body systems .",
    "the authors acknowledge lea f. santos for providing the data for accuracy comparison , and nicols wolovick for fruitful discussions . this work was performed with the financial support from conicet , anpcyt , secyt - unc , mincyt - cor , and the nvidia professor partnership program .",
    "we will briefly mention here two cases where an interacting many - spin system @xmath118 can be described or approximately described by , a pure state : the random superposition ( entangled ) states for high temperature systems , and the so - called matrix product states . these are suited candidates for our gpu - boosted ts implementation .    in the first case ,",
    "@xmath118 is characterized by the infinite temperature limit , as it is often the situation in magnetic resonance spin dynamics . strictly speaking ,",
    "@xmath118 can not be described by a pure ( single vector ) state as in eq .",
    "[ eq : inicial ] , but by a highly mixed state , typically denoted by a density matrix .",
    "this represents a whole probabilistic ensemble , and contains all the statistical information about @xmath118 @xcite .",
    "the manipulation of the density matrix may rapidly be cumbersome due to memory requirements , as soon as its dimension scales as @xmath119 .",
    "but , provided the observables to be evaluated are local ( they involve just a few spins within @xmath118 ) , one can use just a few pure entangled states to compute ensemble - averaged quantities @xcite .",
    "this procedure enables a physical parallelization which relies on the quantum superposition principle .",
    "a simple case may be an initial state given by a single spin up - polarized ( localized excitation ) , and the rest of them in the high - temperature thermal equilibrium , represented by a mixture of all states with amplitudes satisfying the appropriate statistical weights and random phases :      where , analogously to eq .",
    "[ eq : inicial ] , @xmath121 are the states of the computational ising basis .",
    "this case has been employed to evaluate specific time - dependent correlation functions for spin systems @xcite , avoiding the storage , manipulation and diagonalization of overwhelmingly large matrices .",
    "most importantly , it is nowadays employed to address the problem of thermalization in closed quantum systems , being assisted with our gpu implementation .",
    "the second case , refers to matrix product states @xcite , which constitute a set of states that successfully approximates the exact state of @xmath118 in many physical situations .",
    "they are intimately related to renormalization group methods@xcite , and have proved very useful to deal with dynamical observables in one - dimensional quantum spin systems@xcite .",
    "where @xmath123 is a @xmath124-dimensional matrix , and @xmath125 represents an ising state .",
    "the time - evolution of this kind of states is performed by a suitable ts algorithm@xcite , and therefore they are promising candidates for ts - gpu implementations like the one we present in this article .",
    "e.  lieb , t.  schultz , d.  mattis , http://www.sciencedirect.com/science/article/pii/0003491661901154[two soluble models of an antiferromagnetic chain ] , annals of physics 16  ( 3 ) ( 1961 ) 407  466 .",
    "10.1016/0003 - 4916(61)90115 - 4 [ ] .",
    "h.  de  raedt , b.  de  raedt , http://link.aps.org/doi/10.1103/physreva.28.3575[applications of the generalized trotter formula ] , phys .",
    "a 28 ( 1983 ) 35753580 . http://dx.doi.org/10.1103/physreva.28.3575 [ ] . http://link.aps.org/doi/10.1103/physreva.28.3575      m.  rigol , v.  dunjko , m.  olshanii , thermalization and its mechanism for generic isolated quantum systems , nature 452 ( 2008 ) 854858 . http://arxiv.org/abs/0708.1324 [ ] , http://dx.doi.org/10.1038/nature06838 [ ] .",
    "a.  polkovnikov , k.  sengupta , a.  silva , m.  vengalattore , http://link.aps.org/doi/10.1103/revmodphys.83.863[_colloquium_ : nonequilibrium dynamics of closed interacting quantum systems ] , rev .",
    "phys . 83 ( 2011 ) 863883 .",
    "http://dx.doi.org/10.1103/revmodphys.83.863 [ ] .",
    "http://link.aps.org/doi/10.1103/revmodphys.83.863    c.  s. bederin , a.  d. dente , http://www.40jaiio.org.ar/sites/default/files/t2011/hpc/902.pdf[boosting quantum evolutions using trotter - suzuki algorithms on gpus ] , proceedings of hpclatam 2011 : high - performance computing symposium 40 ( 2011 ) 6375 .",
    "http://www.40jaiio.org.ar/sites/default/files/t2011/hpc/902.pdf    p.  wittek , f.  m. cucchietti , http://www.sciencedirect.com/science/article/pii/s0010465512004043[a second - order distributed trotter ",
    "suzuki solver with a hybrid cpu  gpu kernel ] , computer physics communications 184  ( 4 ) ( 2013 )",
    "1165  1171 . http://dx.doi.org/10.1016/j.cpc.2012.12.008 [ ] .",
    "h.  bauke , c.  h. keitel , http://www.sciencedirect.com/science/article/pii/s0010465511002414[accelerating the fourier split operator method via graphics processing units ] , computer physics communications 182  ( 12 ) ( 2011 ) 2454  2463 .",
    "http://dx.doi.org/10.1016/j.cpc.2011.07.003 [ ] .",
    "h.  de  raedt , a.  hams , k.  michielsen , k.  de  raedt , http://arxiv.org/abs/quant-ph/9911041[quantum computer emulator ] , computer physics communications 132  ( 1 - 2 ) ( 1999 ) 28 .",
    "http://arxiv.org/abs/quant-ph/9911041    g.  a. lvarez , e.  p. danieli , p.  r. levstein , h.  m. pastawski , quantum parallelism as a tool for ensemble spin dynamics calculations , phys .",
    "lett . 101  ( 12 ) ( 2008 ) 120503 .",
    "http://dx.doi.org/10.1103/physrevlett.101.120503 [ ] .",
    "j.  d. mccalpin , http://www.cs.virginia.edu/stream/[stream : sustainable memory bandwidth in high performance computers ] , tech .",
    "university of virginia , charlottesville , virginia , a continually updated technical report .",
    "http://www.cs.virginia.edu/stream/ ( 1991 - 2007 ) .",
    "http://www.cs.virginia.edu/stream/    , http://www.intel.com / content / www / us / en / benchmarks / server / xeon - e5 - 2600-v2/xeon - e5-v2-hpc - memory - bandwidth.html[intel xeon processor e5 - 2600 v2 product family memory bandwidth benchmarks ] , [ online ; accessed 28-october-2013 ] ( 2013 ) .",
    "http://www.intel.com/content/www/us/en/benchmarks/server/xeon-e5-2600-v2/xeon-e5-v2-hpc-memory-bandwidth.html    , http://www.elekslabs.com/2012/11/nvidia-tesla-k20-benchmark-facts.html[nvidia tesla k20 benchmark : facts , figures and some conclusions ] , [ online ; accessed 28-october-2013 ] ( 2012 ) .",
    "l.  f. santos , f.  borgonovi , f.  m. izrailev , chaos and statistical relaxation in quantum systems of interacting particles , physical review letters 108  ( 9 ) ( 2012 ) 094102 . http://arxiv.org/abs/1110.4663 [ ] , http://dx.doi.org/10.1103/physrevlett.108.094102 [ ] .",
    "p.  r. zangara , a.  d. dente , p.  r. levstein , h.  m. pastawski , http://link.aps.org/doi/10.1103/physreva.86.012322[loschmidt echo as a robust decoherence quantifier for many - body systems ] , phys .",
    "a 86 ( 2012 ) 012322 .",
    "http://link.aps.org/doi/10.1103/physreva.86.012322        g.  a. lvarez , e.  p. danieli , p.  r. levstein , h.  m. pastawski , http://link.aps.org/doi/10.1103/physreva.82.012310[decoherence as attenuation of mesoscopic echoes in a spin - chain channel ] , phys .",
    "a 82 ( 2010 ) 012310 .",
    "[ ] . http://link.aps.org/doi/10.1103/physreva.82.012310      m.  fannes , b.  nachtergaele , r.  werner , http://dx.doi.org/10.1007/bf02099178[finitely correlated states on quantum spin chains ] , communications in mathematical physics 144  ( 3 ) ( 1992 ) 443490 .",
    "http://dx.doi.org/10.1007/bf02099178    m.  c. bauls , m.  b. hastings , f.  verstraete , j.  i. cirac , http://link.aps.org/doi/10.1103/physrevlett.102.240603[matrix product states for dynamical simulation of infinite chains ] , phys .",
    "102 ( 2009 ) 240603 . http://dx.doi.org/10.1103/physrevlett.102.240603 [ ] . http://link.aps.org/doi/10.1103/physrevlett.102.240603    s.  r. white , http://link.aps.org/doi/10.1103/physrevlett.69.2863[density matrix formulation for quantum renormalization groups ] , phys .",
    "69 ( 1992 ) 28632866 .",
    "http://dx.doi.org/10.1103/physrevlett.69.2863 [ ] .",
    "http://link.aps.org/doi/10.1103/physrevlett.69.2863    a.  mller - hermes , j.  i. cirac , m.  c. bauls , http://stacks.iop.org/1367-2630/14/i=7/a=075003[tensor network techniques for the computation of dynamical observables in one - dimensional quantum spin systems ] , new journal of physics 14  ( 7 ) ( 2012 ) 075003 ."
  ],
  "abstract_text": [
    "<S> the resolution of dynamics in out of equilibrium quantum spin systems lies at the heart of fundamental questions among quantum information processing , statistical mechanics and nano - technologies . </S>",
    "<S> efficient computational simulations of interacting many - spin systems are extremely valuable tools for tackling such questions . here </S>",
    "<S> , we use the trotter - suzuki ( ts ) algorithm , a well - known strategy that provides the evolution of quantum systems , to address the spin dynamics . </S>",
    "<S> we present a gpu implementation of a particular ts version , which has been previously implemented on single cores in cpus . </S>",
    "<S> we develop a massive parallel version of this algorithm and compare the efficiency between cpu and gpu implementations . </S>",
    "<S> this method reduces the execution time considerably and is capable of dealing with systems of up to 27 spins ( only limited by gpu memory ) .    </S>",
    "<S> gpu computing , many - body quantum dynamics , trotter suzuki </S>"
  ]
}