{
  "article_text": [
    "the problem of computing roots of univariate polynomials has a long mathematical history @xcite . recently , some new investigations focused on subdivision methods , where root localization is based on simple tests such as _ descartes rule of signs _ and its variant in the bernstein basis @xcite .",
    "complexity analysis was developed for univariate integer polynomial taking into account the bitsize of the coefficients , and providing a good understanding of their behavior from a theoretical and practical point of view .",
    "approximation and bounding techniques have been developed @xcite to improve the local speed of convergence to the roots .",
    "even more recently a new attention has been given to continued fraction algorithms ( cf ) , see e.g. @xcite and references therein .",
    "they differ from previous subdivision - based algorithms in that instead of bisecting a given initial interval and thus producing a binary expansion of the real roots , they compute continued fraction expansions of these roots .",
    "the algorithm relies heavily on computations of lower bounds of the positive real roots , and different ways of computing such bounds lead to different variants of the algorithm .",
    "the best known worst - case complexity of cf is @xmath0 @xcite , while its average complexity is @xmath1 , thus being the only complexity result that matches , even in the average the complexity bounds of numerical algorithms @xcite .",
    "moreover , the algorithm seems to be the most efficient in practice @xcite .",
    "subdivision methods for the approximation of isolated roots of multivariate systems are also investigated but their analysis is much less advanced . in @xcite ,",
    "the authors used tensor product representation in bernstein basis and domain reduction techniques based on the convex hull property to speed up the convergence and reduce the number of subdivisions . in @xcite , the emphasis is put on the subdivision process , and stopping criterion based on the normal cone to the surface patch . in @xcite , this approach has been improved by introducing pre - conditioning and univariate - solver steps . the complexity of the method is also analyzed in terms of intrinsic differential invariants .",
    "this work is in the spirit of @xcite .",
    "the novelty of our approach is the presentation of a tensor - monomial basis algorithm that generalizes the univariate continued fraction algorithm and does not assume generic position .",
    "we apply a subdivision approach also exploiting certain properties of the bernstein polynomial representation , even though no basis conversion takes place .",
    "our contributions are as follows .",
    "we propose a new adaptive algorithm for polynomial system real solving that acts in monomial basis , and exploits the continued fraction expansion of ( the coordinates of ) the real roots .",
    "this yields the best rational approximation of the real roots .",
    "all computations are performed with integers , thus this is a division - free algorithm .",
    "we propose a first step towards the generalization of vincent s theorem to the multivariate case ( th .",
    "[ vincentxyz ] ) we perform a ( bit ) complexity analysis of the algorithm , when oracles for lower bounds and counting the real roots are available ( prop .  [ prop : mcf - complexity ] ) and we propose non - trivial improvements for reducing the total complexity even more ( sec .",
    "[ sec : complexity - improvements ] ) . in all cases",
    "the bounds that we derive for the multivariate case , match the best known ones for the univariate case , if we restrict ourselves to @xmath2 .      for a polynomial @xmath3",
    "@xmath4 $ ] , @xmath5 denotes its total degree , while @xmath6 denotes its degree w.r.t .",
    "let @xmath8 $ ] with @xmath9 , @xmath10 .",
    "if not specified , we denote @xmath11 .",
    "we are interested in isolating the real roots of a system of polynomials @xmath12 $ ] , in a box @xmath13\\times\\cdots \\times [ u_n , v_n ] \\subset \\rr^n$ ] , @xmath14 .",
    "we denote by @xmath15 the solution set in @xmath16 of the equation @xmath17 , where @xmath18 is @xmath19 or @xmath20 .    in what follows @xmath21 , resp .",
    "@xmath22 , means bit , resp .",
    "arithmetic , complexity and the @xmath23 , resp .",
    "@xmath24 , notation means that we are ignoring logarithmic factors . for @xmath25",
    ", @xmath26 is the maximum bit size of the numerator and the denominator . for a polynomial @xmath3",
    "@xmath27 $ ] , we denote by @xmath28 the maximum of the bitsize of its coefficients ( including a bit for the sign ) . in the following , we will consider classes of polynomials such that @xmath29 .    also , to simplify the notation we introduce multi - indices , for the variable vector @xmath30 , @xmath31 , the sum @xmath32 , and @xmath33 .",
    "the tensor bernstein basis polynomials of multidegree degree @xmath34 of a box @xmath35 are denoted @xmath36 @xmath37 where @xmath38:=[u_1,v_1]\\times\\cdots\\times[u_n , v_n]$ ] .      in this section",
    ", we describe the family of algorithms that we consider .",
    "the main ingredients are    * a suitable representation of the equations in a given ( usually rectangular ) domain , for instance a representation in the bernstein basis or in the monomial basis ; * an algorithm to split the representation into smaller sub - domains ; * a reduction procedure to shrink the domain .",
    "different choices for each of these ingredients lead to algorithms with different practical behaviors .",
    "the general process is summarized in alg .",
    "[ algo : subdivision ] .",
    "[ algo : subdivision ]    initialize a stack @xmath39 and add @xmath40 on top of it    while @xmath39 is not empty do    1 .",
    "pop a system @xmath40 and : 2 .",
    "perform a precondition process and/or a reduction process to refine the domain .",
    "3 .   apply an exclusion test to identify if the domain contains no roots .",
    "4 .   apply an inclusion test to identify if the domain contains a single root . in this case output @xmath40 .",
    "if both tests fail split the representation into a number of sub - domains and push them to @xmath39 .",
    "the instance of this general scheme that we obtain generalizes the continued fraction method for univariate polynomials ; the realization of the main steps ( b - e ) can be summarized as follows :    1 .",
    "perform a precondition process and compute a lower bound on the roots of the system , in order to reduce the domain .",
    "2 .   apply interval analysis or sign inspection to identify if some @xmath41 has constant sign in the domain , i.e. if the domain contains no roots .",
    "3 .   apply miranda test to identify if the domain contains a single root . in this case output @xmath40 .",
    "4 .   if both tests fail , split the representation at @xmath42 and continue .    in the following sections",
    ", we are going to describe more precisely the specific steps and analyze their complexity . in sec .",
    "[ homography ] , we describe the representation of domains via homographies and the connection with the bernstein basis representation . subdivision , based on shifts of univariate polynomials , reduction and preconditionning are analyzed in sec .",
    "[ subdivision - reduction ] .",
    "exclusion and inclusion tests as well as a generalization of vincent s theorem to multivariate polynomials , are presented in sec .",
    "[ criteria ] . in sec .",
    "[ sec : complexity ] , we recall the main properties of continued fraction expansion of real numbers and use them to analyze the complexity of a subdivision algorithm following this generic scheme . we conclude with examples produced by our c++ implementation in sect .",
    "[ sec : impl ] .",
    "0    the algorithm in dimension two : + input : @xmath43 and @xmath44 defined over a box @xmath35 .",
    "+ output : approximations of the real roots of @xmath45 .    1 .",
    "initialize a stack @xmath39 and add @xmath46 on top of it .",
    "2 .   while @xmath39 is not empty repeat 3 - 4 : 3 .",
    "check for common solutions : 1 .",
    "pop a pair @xmath46 and compute lower bounds @xmath47 on the common solutions in @xmath48 .",
    "2 .   translate the polynomials by @xmath49 .",
    "3 .   repeat ( a)-(b ) until for some pair @xmath50 it is @xmath51 .",
    "4 .   if no roots and for some @xmath52 we have @xmath53 or @xmath54 else subdivide . 4 .",
    "subdivision step : + subdivide @xmath55 into @xmath560,1[^2 $ ] , @xmath560,1[\\times \\rr_{>1}$ ] , @xmath570,1[$ ] and @xmath58 : + in step @xmath59 of subdivision : for every sub - domain apply the transformation @xmath60 to @xmath61 and @xmath62 to obtain @xmath63",
    "a widely used representation of a polynomial @xmath61 over a rectangular domain is the tensor - bernstein representation .",
    "de casteljau s algorithm provides an efficient way to split this representation to smaller domains .",
    "a disadvantage is that converting integer polynomials to bernstein form results in rational or , if one uses machine numbers , approximate bernstein coefficients .",
    "we follow an alternative approach that does not require basis conversion since it applies to monomial basis : we introduce a tensor - monomial representation , i.e. a representation in the monomial basis over @xmath64 and provide an algorithm to subdivide this representation analogously to the bernstein case .    0 an important fact of bernstein basis is the quadratic convergence property(cf .",
    "* theorem  2.1 ) ) :    [ quad_convergence ] consider the piecewise linear function @xmath65 defined by the bernstein coefficients of @xmath61 in @xmath35 ; then for all @xmath66 : @xmath67 where @xmath68 .    in a tensor - monomial representation a polynomial is represented as a tensor ( higher dimensional matrix ) of coefficients in the natural monomial basis , that is , @xmath69 for every equation @xmath61 of the system . splitting this representation",
    "is done using homographies .",
    "the main operation in this computation is the taylor shift .",
    "a homography ( or mobius transformation ) is a bijective projective transformation @xmath70 , defined over @xmath71 as @xmath72 with @xmath73 , @xmath74 , @xmath10 .    using simple calculations",
    ", we can see that the inverse @xmath75 is also a homography , hence the set of homographies is a group under composition .",
    "also , notice that if @xmath76 then , taking proper limits when needed , we can write @xmath77\\ ] ] hence @xmath78 , @xmath79 is a polynomial defined over @xmath80 that corresponds to the ( possibly unbounded ) box @xmath81 \\times \\cdots\\times   \\left [ \\frac{\\beta_n}{\\delta_n } ,   \\frac{\\alpha_n}{\\gamma_n}\\right ]   , \\ ] ] of the initial system , in the sense that the zeros of the initial system in @xmath82 are in one - to - one correspondence with the positive zeros of @xmath83 .",
    "we focus on the computation of @xmath83 .",
    "we use the basic homographies @xmath84 ( translation by @xmath85 ) or simply @xmath86 if @xmath87 , @xmath88 ( contraction by @xmath85 ) and @xmath89 ( reciprocal polynomial ) .",
    "these notations are naturally extended to variable vectors ; for instance @xmath90 , @xmath91 .",
    "complexity results for these computations appear in the following sections .",
    "we can see that they suffice to compute any homography :    0 now we set @xmath92 so that @xmath93 . notice that the inverse transformation @xmath94 which is applied here to the domain maps the interval @xmath560,1[$ ] to @xmath560,+\\infty[$ ] , whereas @xmath95 takes @xmath560,+\\infty[$ ] to @xmath561,+\\infty[$ ] .",
    "the group of homographies with coefficients in @xmath96 is generated by @xmath97 , @xmath10 , @xmath98 .",
    "it can be verified that a @xmath99 with arbitrary coefficients @xmath100 is constructed as @xmath101 where the product denotes composition .",
    "we abbreviate @xmath102 and @xmath103 , @xmath104 , e.g. @xmath105 and @xmath106 .",
    "representation via homography is in an interesting correspondence to the bernstein representation :    [ lem : bernsteincoefs ] let @xmath107 the bernstein expansion of @xmath61 in the box @xmath82 yielded by a homography @xmath108 .",
    "if @xmath109 then @xmath110    let @xmath111=\\left [ \\frac{\\beta_k}{\\delta_k } , \\frac{\\alpha_k}{\\gamma_k } \\right ] $ ] .",
    "for a tensor - bernstein polynomial @xmath112 we compute @xmath113 as needed .",
    "[ cor : bernsteincoefs ] the bernstein expansion of @xmath61 in @xmath82 is @xmath114 that is , the coefficients of @xmath83 coincide with the bernstein coefficients up to contraction and binomial factors .",
    "thus tensor - bernstein coefficients and tensor - monomial coefficients in a sub - domain of @xmath115 differ only by multiplication by positive constant .",
    "in particular they are of the same sign .",
    "hence this corollary allows us to take advantage of sign properties ( eg .",
    "the variation diminishing property ) of the bernstein basis without computing it .",
    "the resulting representation of the system consists of the transformed polynomials @xmath116 , represented as tensors of coefficients as well as @xmath117 integers , @xmath118 for @xmath10 from which we can recover the endpoints of the domain , using  ( [ hbox ] ) .",
    "we describe the subdivision step using the homography representation .",
    "this is done at a point @xmath119 .",
    "it consists in computing up to @xmath120 new sub - domains ( depending on the number of nonzero @xmath121 s ) , each one having @xmath122 as a vertex .    given @xmath123 that represent the initial system at some domain",
    ", we consider the partition of @xmath124 defined by the hyperplanes @xmath125 , @xmath10 .",
    "these intersect at @xmath122 hence we call this _ partition at @xmath122_. subdividing at @xmath122 is equivalent to subdividing the initial domain into boxes that share the common vertex @xmath126 and have faces either parallel or perpendicular to those of the initial domain .    we need to compute a homography representation for every domain in this partition .",
    "the computation is done coordinate wise ; observe that for any domain in this partition we have , for all @xmath52 , either @xmath127 $ ] or @xmath128 $ ] .",
    "it suffices to apply a transformation that takes these domains to @xmath129 . in the former case",
    ", we apply @xmath130 to the current polynomials and in the latter case we shift them by @xmath121 , i.e. we apply @xmath131 . the integers @xmath118 that keep track of the current domain",
    "can be easily updated to correspond to the new subdomain .",
    "we can make this process explicit in general dimension : every computed subdomain corresponds to a binary number of length @xmath132 , where the @xmath133th bit is @xmath134 if @xmath135 is applied or @xmath136 if @xmath131 is applied .    in our continued fraction algorithm",
    "the subdivision is performed at @xmath137 .    * illustration .",
    "* let us illustrate this process in dimension two .",
    "the system @xmath138 is defined over @xmath55 .",
    "we subdivide this domain into @xmath139 ^ 2 $ ] , @xmath139\\times \\rr_{>1}$ ] , @xmath140 $ ] and @xmath58 .",
    "equivalently , we compute four new pairs of polynomials , as illustrated in fig .  [",
    "fig : subdiv ] ( we abbreviate @xmath141 ) .    .",
    "]    * complexity of subdivision step . * the transformation of a polynomial into two sub - domains , i.e. splitting w.r.t .",
    "one direction , consists of performing @xmath142 univariate shifts , one for every coefficient @xmath143 $ ] of @xmath144[x_1,{{ .. }},\\widehat{x_k } , { { .. } } , x_n ] $ ] .",
    "if the subdivision is performed in every direction , each transformation consists of @xmath142 univariate shifts for every variable , i.e. @xmath145 shifts .",
    "there are @xmath120 sub - domains to compute , hence a total of @xmath146 shifts have to be performed in a single subdivision step .",
    "we must also take into account that every time a univariate shift is performed , the coefficient bitsize increases .",
    "the operations @xmath147 are essentially of the same complexity , except that the second requires one to exchange the coefficient of @xmath148 with @xmath149 before translation , i.e. an additional @xmath150 cost .",
    "hence we only need to consider the case of shifts for the complexity .",
    "the continued fraction algorithm subdivides a domain using unit shifts and inversion .",
    "successive operations of this kind increase the bitsize equivalently to a big shift by the sum of these units .",
    "thus it suffices to consider the general computation of @xmath151 to estimate the complexity of the subdivision step .",
    "[ shiftcomplexity ] the computation of @xmath151 with @xmath152 and @xmath153 can be performed in @xmath154 .",
    "we use known facts for the computation of @xmath155 for univariate polynomials . if @xmath156 and @xmath61 is univariate , this operation is performed in @xmath157 ; the resulting coefficients are of bitsize @xmath158 @xcite .",
    "hence @xmath159 is computed in @xmath160 .",
    "suppose we have computed @xmath161 for some @xmath52 .",
    "the coefficients are of bitsize @xmath162 . the computation of shift w.r.t . @xmath133th variable @xmath163 results in a polynomial of bitsize @xmath164 and consists of @xmath165 operations .",
    "that is , we perform @xmath142 univariate polynomial shifts , one for every coefficient of @xmath61 in @xmath166[x_1,{{ ..",
    "}},\\widehat{x_k } , { { .. } } , x_n ] $ ] .",
    "this gives a total cost for computing @xmath151 of @xmath167 the latter sum implies that it is faster to apply the shifts with increasing order , starting with the smallest number @xmath121 . since @xmath168 for all @xmath52 , and we must shift a system of @xmath169 polynomials we obtain the stated result .",
    "let us present an alternative way to compute a sub - domain using contraction , preferable when the bitsize of @xmath122 is big .",
    "the idea behind this is the fact that @xmath170 and @xmath171 compute the same sub - domain , in two different ways .",
    "[ contractcomplexity ] if @xmath172 , @xmath152 , then the coefficients of @xmath173 , @xmath174 , can be computed in @xmath175 .",
    "the operation , i.e. computing the new coefficients @xmath176 can be done with @xmath177 multiplications : since @xmath178 , if these powers are computed successively then every coefficient is computed using two multiplications .",
    "moreover , it suffices to keep in memory the @xmath132 powers @xmath179 , @xmath10 in order to compute any @xmath180 .",
    "geometrically this can be understood as a stencil of @xmath132 points that sweeps the coefficient tensor and updates every element using one neighbor at each time .",
    "the bitsize of the multiplied numbers is @xmath181 hence the result follows .    now if we consider a contraction followed by a shift by @xmath134 w.r.t .",
    "@xmath182 for @xmath169 polynomials we obtain @xmath183 operations for the computation of the domain .",
    "the disadvantage is that the resulting coefficients are of bitsize @xmath181 instead of @xmath184 with the use of shifts .",
    "also note that this operation would compute a expansion of the real root which differs from continued fraction expansion .",
    "in this section we define univariate polynomials whose graph in @xmath185 bounds the graph of @xmath61 . for every direction @xmath52 , we provide two polynomials bounding the values of @xmath61 in @xmath186 from below and above respectively .",
    "define @xmath187    [ u_bounds ] for any @xmath188 , @xmath189 and any @xmath190 , we have @xmath191    for @xmath192 , we can directly write @xmath193 the product of power sums is greater than 1 ; divide both sides by it .",
    "analogously for @xmath194 .",
    "[ cbounds ] given @xmath195 , if @xmath196 with @xmath1970,\\mu_k]$ ] , where @xmath198 then @xmath199 .",
    "consequently , all positive roots of @xmath61 lie in @xmath200 .",
    "also , for @xmath196 with @xmath201 $ ] , @xmath202 it is @xmath199 , i.e. all pos .",
    "roots are in @xmath203 . combining both bounds",
    "we deduce that @xmath204\\times\\cdots\\times [ \\mu_n,\\mathcal m_n ] $ ] is a bounding box for @xmath205 .",
    "the denominator in  ( [ univbounds ] ) is always positive in @xmath115 .",
    "let @xmath206 with @xmath207 $ ] .",
    "if @xmath208 then also @xmath209 and it follows @xmath210 .",
    "similarly @xmath211 .",
    "the same arguments hold for @xmath212 $ ] , @xmath213 , @xmath214 , and @xmath215 , since lower bounds on the zeros of @xmath215 yield upper bounds on the zeros of @xmath61",
    ".    thus lower and upper bounds on the @xmath133th coordinates of the roots of @xmath216 are given by @xmath217 respectively , i.e. the intersection of these bounding boxes .",
    "we would like to remain in the ring of integers all along the process , thus integer lower or upper bounds will be used.these can be the floor or ceil of the above roots of univariate polynomials , or even known bounds for them , e.g. cauchy s bound .",
    "if the minimum and maximum are taken with the ordering of coefficients defined as @xmath218 then different @xmath219 polynomials are obtained . by cor .",
    "[ cor : bernsteincoefs ] their control polygon is the lower and upper hull respectively of the projections of the tensor - bernstein coefficients to the @xmath133th direction and are known to converge quadratically to simple roots when preconditioning ( described in the following paragraph ) is utilized  ( * ? ? ?",
    "+ 0 we can further improve the upper bound , by setting @xmath220 thus @xmath221    clearly , for @xmath222 , @xmath223 and @xmath224 .",
    "* complexity analysis . *",
    "the analysis of the subdivision step in sect .",
    "[ subsec : reduction ] applies as well to the reduction step , since reducing the domain means computing a new subdomain and ignoring the remaining part .",
    "if a lower bound @xmath225 is known , with @xmath226 , then the reduction step is performed in @xmath227 .",
    "this is an instance of lem .",
    "[ shiftcomplexity ] .    the projections of lem .",
    "[ u_bounds ] are computed using @xmath150 comparisons .",
    "the computation of @xmath225 costs @xmath228 in average , for solving these projections using univariate cf algorithm .",
    "another option would to compute well known lower bounds on their roots , for instance cauchy s bound in @xmath229 .",
    "* illustration . * consider a bi - quadratic @xmath230 $ ] , namely , @xmath231 with coefficients @xmath232 .",
    "suppose that @xmath233 for @xmath234 .",
    "we compute @xmath235 thus @xmath236 .",
    "[ fig : env ] shows how these univariate quadratics bound the graph of @xmath61 in @xmath237 .      to improve the reduction step",
    ", we use preconditioning .",
    "the aim of a preconditioner is to tune the system so that it can be tackled more efficiently ; in our case we aim at improving the bounds of  cor .",
    "[ cbounds ] .",
    "a preconditioning matrix @xmath238 is an invertible @xmath239 matrix that transforms a system @xmath240 into the equivalent one @xmath241 .",
    "this transformation does not alter the roots of the system , since the computed equations generate the same ideal .",
    "the bounds obtained on the resulting system can be used directly to reduce the domain of the equations before preconditioning .",
    "preconditioning can be performed to a subset of the equations .",
    "since we use a reduction process using cor .",
    "[ cbounds ] we want to have among our equations @xmath132 of them whose zero locus @xmath242 is orthogonal to the @xmath133th direction , for all @xmath52 . assuming a square system , we precondition @xmath116 to obtain a locally orthogonal to the axis system",
    "; an ideal preconditioner would be the jacobian of the system evaluated at a common root ; instead , we evaluate @xmath243 at the image of the center @xmath122 of the initial domain @xmath82 , @xmath244 .",
    "thus we must compute the inverse of the jacobian matrix @xmath245_{1\\leq i , j,\\leq n}$ ] evaluated at @xmath246 .",
    "0 the computation of @xmath247 can be done efficiently ; we only need to compute the jacobian of the initial system , since @xmath248 one can see that @xmath249 so @xmath250    * precondition step complexity . *",
    "computing @xmath251 is done with cost @xmath252 and evaluating at @xmath253 has cost @xmath254 .",
    "we also need @xmath255 for inversion and @xmath256 for multiplying polynomials times scalar as well as summing polynomials .",
    "this gives a precondition cost of order @xmath256 .",
    "a subdivision scheme is able to work when two tests are available : one that identifies empty domains ( exclusion test ) and one that identifies domains with exactly one zero ( inclusion test ) .",
    "if these two tests are negative , a domain can not be neither included nor excluded so we need to apply further reduction / subdivision steps to it .",
    "the certification is the following : if the result of the test is affirmative , then this is undoubtedly true",
    ".    * exclusion test . *",
    "the bounding functions defined in the previous section provide a fast filter to exclude empty domains .",
    "define @xmath257 and @xmath258 .",
    "if for some @xmath259 and for some @xmath260 it is @xmath261 or @xmath262 then the system has no solutions .",
    "also , if @xmath263 @xmath264 @xmath265 then there can be no solution to the system .    for the former statement",
    "observe that @xmath41 has no real positive roots , thus the system has no roots .",
    "the latter statement means that the reduced domains of each @xmath266 do not intersect , thus there are no solutions",
    ".    we can use interval arithmetic to identify additional empty domains ; if the sign of some initial @xmath41 is constant in @xmath267 then this domain is discarded .",
    "we can also simply inspect the coefficients of each @xmath268 ; if there are no sign changes then there corresponding box contains no solution .",
    "the accuracy of these criteria greatly affects the performance of the algorithm .",
    "in particular , the sooner an empty domain is rejected the less subdivisions will take place and the process will terminate faster .",
    "we justify that the exclusion criteria will eventually succeed on an empty domain by proving a generalization of vincent s theorem to the tensor multivariate case .",
    "[ vincentxyz ] let @xmath269 be a polynomial with real coefficients , such that it has no ( complex ) solution with @xmath270 for @xmath190 .",
    "then all its coefficients @xmath271 are of the same sign .",
    "we prove the result by induction on @xmath132 , the number of variables . for @xmath272 ,",
    "this is the classical vincent s theorem  @xcite .",
    "consider now a polynomial @xmath273 in two variables with no ( complex ) solution such that @xmath274 for @xmath275 .",
    "we prove the result for @xmath276 , by induction on the degree @xmath277 .",
    "the property is obvious for polynomials of degree @xmath278 .",
    "let us assume it for polynomials of degree less than @xmath279 .    by hypothesis ,",
    "for any @xmath280 with @xmath281 , the univariate polynomial @xmath282 has no root with @xmath283 . according to lucas theorem  @xcite ,",
    "the complex roots of @xmath284 are in the convex hull of the complex roots of @xmath282 .",
    "thus , there is no root of @xmath285 with @xmath286 and @xmath283 . by induction hypothesis ,",
    "the coefficients of @xmath287 are of the same sign .",
    "we decompose @xmath238 as @xmath288 where @xmath289 with @xmath290 of the same sign , say positive . by vincent theorem in one variable , as @xmath291 has no root with @xmath286 , the coefficients @xmath292 of @xmath293 are also of the same sign .",
    "if this sign is different from the sign of @xmath290 for @xmath294 ( ie . negative here ) , then @xmath295 has one sign variation in its coefficients list . by descartes",
    "rule , it has one real positive root , which contradicts the hypothesis on @xmath61 .",
    "thus , all the coefficients have the same sign .",
    "assume that the property has been proved for polynomials in @xmath296 variables and let us consider a polynomial  @xmath297 in @xmath132 variables with  no ( complex ) solution such that @xmath298 for @xmath190 .",
    "for any @xmath299 with @xmath270 , for @xmath300 ,  the polynomial @xmath301 and @xmath302 has no root with @xmath303 . by lucas theorem and induction hypothesis on the degree",
    ", @xmath304 has coefficients of the same sign .",
    "we also have @xmath305 with coefficients of the same sign , by induction hypothesis on the number of variables .",
    "if the two signs are different , then @xmath306 has one sign variation in its coefficients and thus one real positive root , say @xmath307 , which can not be the case , since @xmath308 would yield a real root of @xmath61 .",
    "we deduce that all the coefficients of @xmath61 are of the same sign .",
    "this completes the induction proof of the theorem .",
    "this implies that empty regions will be eventually excluded by sign inspection .",
    "[ corxyz ] let @xmath309 be the representation of @xmath61 through @xmath310 in a box @xmath311 $ ] . if there is no toot @xmath312 of @xmath61 such that @xmath313 then all the coefficients @xmath314 are of the same sign",
    "that is , if @xmath315 , where @xmath316 is the center of @xmath82 , then @xmath82 is excluded by sign conditions .    the interval @xmath111 $ ] is transformed by @xmath317 into @xmath318 $ ] and the disk @xmath319 is transformed into the half complex plane @xmath320 .",
    "we deduce that @xmath83 has no root with @xmath321 , @xmath190 . by thm .",
    "[ vincentxyz ] , the coefficients of @xmath83 are of the same sign .",
    "we deduce that if a domain is far enough from the zero locus of some @xmath41 then it will be excluded , hence redundant empty domains concentrate only in a neighborhood of @xmath322 .",
    "the tubular neighborhood of size @xmath323 of @xmath41 is the set @xmath324    we bound the number of boxes that are not excluded at each level of the subdivision tree .",
    "assume that for @xmath325 , @xmath326 is bounded .",
    "then the number of boxes of size @xmath327 kept by the algorithm is less than @xmath328 , where @xmath329 is such that @xmath330 st .",
    "@xmath331 , @xmath332    consider a subdivision of a domain @xmath237 into boxes of size @xmath327 .",
    "we will bound the number @xmath333 of boxes in this subdivision that are not rejected by the algorithm . by cor .",
    "[ corxyz ] if a box is not rejected , then we have for all @xmath334 @xmath335 , where @xmath316 is the center of the box . thus all the points of this box are at distance @xmath336 to @xmath337 that is in @xmath338 .    to bound @xmath333 , it suffices to estimate the @xmath339dimensional volume @xmath340 , since we have : @xmath341    when @xmath323 tends to @xmath136 , this volume becomes equivalent to a constant times @xmath342 . for a square system with single roots in @xmath343",
    ", it becomes equivalent to the sum for all real roots @xmath344 in @xmath343 of the volumes of parallelotopes in @xmath132 dimensions of height @xmath345 and unitary edges proportional to the gradients of the polynomials evaluated at the common root ; it is thus bounded by @xmath346 .",
    "we deduce that there exists a constant @xmath347 such that @xmath348 . for overdetermined systems ,",
    "the volume is bounded by a similar expression .",
    "since @xmath349 has a limit when @xmath323 tends to @xmath136 , we deduce the existence of the finite constant @xmath85 and the bound of the lemma on the number of kept boxes of size @xmath323",
    ".    * inclusion test .",
    "* we present a test that discovers common solutions , in a box , or equivalently in @xmath350 , through homography . to simplify the statements we assume that the system is square , i.e. @xmath351 .    the _ lower face _ polynomial of @xmath61 w.r.t .",
    "direction @xmath52 is @xmath352 .",
    "the _ upper face _ polynomial of @xmath61 w.r.t .",
    "@xmath52 is @xmath353 .    if for some permutation @xmath354 , @xmath355 and @xmath356 are constant and opposite for all @xmath10 , then the equations @xmath357 have at least one root in @xmath82",
    ".    the implementation of the miranda test can be done efficiently if we compute a @xmath358 matrix with @xmath359th entry @xmath134 iff @xmath360 and @xmath361 are opposite . then , miranda test is satisfied iff there is no zero row and no zero column . to see this",
    "observe that the matrix is the sum of a permutation matrix and a @xmath358 matrix iff this permutation satisfies miranda s test .",
    "combined with the following simple fact , we have a test that identifies boxes with a single root .",
    "if @xmath362 has constant sign in a box @xmath35 , then there is at most one root of @xmath363 in @xmath35 .",
    "suppose @xmath364 are two distinct roots ; by the mean value theorem there is a point @xmath365 on the line segment @xmath366 , and thus in @xmath35 , s.t .",
    "@xmath367 hence @xmath368 .    0 in order to identify boxes that contain solutions we use the topological degree and the jacobian .",
    "another criterion that can be used is the newton test .",
    "if the newton iteration is a contraction over a box @xmath82 then there exists a unique root of the system inside @xmath82 .",
    "fixed point theorem for existence , mean value theorem for unicity .",
    "consider the system @xmath369 which has a solution @xmath370 iff @xmath371 is a simple root of @xmath372 , so then @xmath373 .",
    "the jacobian of this system @xmath374    * complexity of the inclusion criteria . *",
    "miranda test can be decided with @xmath375 evaluations on interval ( cf .",
    "@xcite ) as well as one evaluation of @xmath376 , overall @xmath256 operations .",
    "the cost of the inclusion test is dominated by the cost of evaluating @xmath169 polynomials of size @xmath150 on an interval , i.e. @xmath377 operations suffice .",
    "if the real roots of the square system in the initial domain @xmath343 are simple , then alg .  [ algo : subdivision ] stops with boxes isolating the real roots in @xmath343 .",
    "if the real roots of @xmath378 in @xmath343 are simple , in a small neighborhood of them the jacobian of @xmath61 has a constant sign . by the inclusion test",
    ", any box included in this neighborhood will be output if and only if it contains a single root and has no real roots of the jacobian .",
    "otherwise , it will be further subdivided or rejected .",
    "suppose that the subdivision algorithm does not terminate .",
    "then the size of the boxes kept at each step tends to zero . by cor .",
    "[ corxyz ] , these boxes are in the intersection of the tubular neighborhoods @xmath379 for @xmath380 the maximal size of the kept boxes . if @xmath323 is small enough , these boxes are in a neighborhood of a root in which the jacobian has a constant size , hence the inclusion test will succeed . by the exclusion criteria ,",
    "a box domain is not subdivided indefinitely , but is eventually rejected when the coefficients become positive .",
    "thus the algorithm either outputs isolating boxes that contains a real root of the system or rejects empty boxes .",
    "this shows , by contradiction , the termination of the subdivision algorithm .",
    "in this section we compute a bound on the complexity of the algorithm that exploits the continued fraction expansion of the real roots of the system .",
    "hereafter , we call this algorithm mcf ( multivariate continued fractions ) . since the analysis of the reduction steps of sec .",
    "[ subdivision - reduction ] and the exclusion - inclusion test of sec .",
    "[ criteria ] would require much more developments , we simplify the situation and analyze a variant of this algorithm .",
    "we assume that two oracles are available .",
    "one that computes , exactly , the partial quotients of the positive real roots of the system , and one that counts exactly the number of real roots of the system inside a hypercube in the open positive orthant , namely @xmath115 . in",
    "what follows , we will assume the cost of the first oracle is bounded by @xmath381 , while the cost of the second is bounded by @xmath382 , and we derive the total complexity of the algorithm with respect to these parameters . in any case",
    "the number of reduction or subdivision steps that we derive is a lower bound on the number of steps that every variant of the algorithm will perform .",
    "the next section presents some preliminaries on continued fractions , and then we detail the complexity analysis .",
    "our presentation follows closely @xcite . for additional details",
    "we refer the reader to , e.g. , @xcite . in general a _ simple ( regular ) continued fraction _ is a ( possibly infinite ) expression of the form @xmath383,\\ ] ] where the numbers @xmath384 are called _ partial quotients _ , @xmath385 and @xmath386 for @xmath387 .",
    "notice that @xmath388 may have any sign , however , in our real root isolation algorithm @xmath389 , without loss of generality . by considering the recurrent relations @xmath390 it can be shown by induction that @xmath391",
    "$ ] , for @xmath392 . if @xmath393 $ ] then @xmath394 and since this is a series of decreasing alternating terms it converges to some real number @xmath395 .",
    "a finite section @xmath396 $ ] is called the @xmath339th _ convergent _ ( or _ approximant _ ) of @xmath395 and the tails @xmath397 $ ] are known as its _",
    "complete quotients_. that is @xmath398 @xmath399 $ ] for @xmath392 .",
    "there is an one to one correspondence between the real numbers and the continued fractions , where evidently the finite continued fractions correspond to rational numbers .",
    "it is known that @xmath400 and that @xmath401 , where @xmath402 is the @xmath339th fibonacci number and @xmath403 is the golden ratio .",
    "continued fractions are the best rational approximation(for a given denominator size ) .",
    "this is as follows : @xmath404 let @xmath393 $ ] be the continued fraction expansion of a real number .",
    "the gauss - kuzmin distribution @xcite states that for almost all real numbers @xmath395 ( meaning that the set of exceptions has lebesgue measure zero ) the probability for a positive integer @xmath405 to appear as an element @xmath384 in the continued fraction expansion of @xmath395 is @xmath406 \\backsimeq    \\lg{\\frac{(\\delta+1)^2}{\\delta(\\delta+2 ) } } , \\quad \\text{for any fixed } i > 0 .",
    "\\label{eq : gauss - kuzmin}\\ ] ] the gauss - kuzmin law induces that we can not bound the mean value of the partial quotients or in other words that the expected value ( arithmetic mean ) of the partial quotients is diverging , i.e. @xmath407 = \\sum_{\\delta=1}^{\\infty } { \\delta\\ , prob [ c_i = \\delta ] } = \\infty ,    \\text { for } i > 0.\\ ] ]    surprisingly enough the geometric ( and the harmonic ) mean is not only asymptotically bounded , but is bounded by a constant , for almost all @xmath408 . for the geometric mean",
    "this is the famous khintchine s constant @xcite , i.e. @xmath409 { \\prod_{i=1}^{n}{c_i } } } = \\mathcal{k } = 2.685452001 ... \\ ] ] it is not known if @xmath410 is a transcendental number .",
    "the expected value of the bit size of the partial quotients is a constant for almost all real numbers , when @xmath411 or @xmath132 sufficiently big @xcite .",
    "notice that in ( [ eq : gauss - kuzmin ] ) , @xmath387 , thus @xmath408 is uniformly distributed in @xmath412 .",
    "let @xmath413 , then @xmath414 = { \\ensuremath{\\mathcal{o}}\\xspace } ( \\lg{\\mathcal{k } } ) = { \\ensuremath{\\mathcal{o}}\\xspace}(1 ) .",
    "\\label{eq : exp_b}\\ ] ]      let @xmath415 be an upper bound on the bitsize of the partial quotient that appear during the execution of the algorithm .",
    "[ lem : mcf - steps ] the number of reduction and subdivision steps that the algorithm performs is @xmath416 .",
    "let @xmath417 be a real root of the system .",
    "it suffices to consider the number of steps needed to isolate the @xmath418 coordinate of @xmath344 .",
    "recall , that we assume , working in the positive orthant , we can compute exactly the next partial quotient in each coordinate ; in other words a vector @xmath419 , where each @xmath420 , @xmath421 , is the partial quotient of a coordinate of a positive real is the partial quotient of the positive imaginary part of a coordinate of a solution of the system .",
    "] solution of the system .",
    "let @xmath422 be the number of steps needed to isolate the @xmath418 coordinate of the real root @xmath344 .",
    "the analysis is similar to the univariate case .",
    "the successive approximations of @xmath423 by the lower bound @xmath420 , yield the @xmath422-th approximant , @xmath424 of @xmath425 , which using ( [ eq : cf - approx ] ) satisfies @xmath426    in order to isolate @xmath425 , it suffices to have @xmath427 where @xmath428 is the local separation bound of @xmath425 , that is the smallest distance between @xmath425 and all the other @xmath418-coordinates of the positive real solutions of the system .    combining the last two equations",
    ", we deduce that to achieve the desired approximation , we should have @xmath429 , or @xmath430 .",
    "that is to isolate the @xmath418 coordinate it suffices to perform @xmath431 steps . to compute the total number of steps , we need to sum over all positive real roots and multiply by @xmath132 , which is the number of coordinates , that is @xmath432 where @xmath433 is the number of positive real roots . to bound the logarithm of the product , we use @xmath434 @xcite , i.e. aggregate separation bounds for multivariate , zero - dimensional polynomial systems .",
    "it holds @xmath435 taking into account that @xmath436 we conclude that the number of steps is @xmath437 .",
    "[ prop : mcf - complexity ] the total complexity of the algorithm is @xmath438 .    at each @xmath439-th step of algorithm , if there are more than one roots of the corresponding system in the positive orthant ( the cost of estimating this is @xmath382 , we compute the corresponding partial quotients @xmath440 , where @xmath441 ( the cost of estimating this is @xmath381 then , for each polynomial of the system , @xmath61 , we perform the shift operation @xmath442 , and then we split to @xmath120 subdomains .",
    "let us estimate the cost of the last two operations .",
    "a shift operation on a polynomial of degree @xmath443 , by a number of bitsize @xmath415 , increases the bitsize of the polynomial by an additive factor @xmath444 . at the @xmath439 step of the algorithm , the polynomials of the corresponding system are of bitsize @xmath445 , and we need to perform a shift operation to all the variables , with number of bitsize @xmath446 .",
    "the cost of this operation is @xmath447 , and since we have @xmath132 polynomials the costs becomes @xmath448 , the resulting polynomial has bitsize @xmath449 .",
    "to compute the cost of splitting the domain , we proceed as follows .",
    "the cost is bounded by the cost of performing @xmath450 operations @xmath451 , which in turn is @xmath452 .",
    "so the total cost becomes @xmath453 .",
    "it remains to bound @xmath454 . if @xmath415 is a bound on the bitsize of all the partial quotients that appear during and execution of the algorithm , then @xmath455 .",
    "moreover , @xmath456 ( lem .",
    "[ lem : mcf - steps ] ) , and so the cost of each step is @xmath457 .    finally , multiplying by the number of steps ( lem .",
    "[ lem : mcf - steps ] ) we get a bound of @xmath458 .    to derive the total complexity we have to take into account that at each step we compute some partial quotients and and we count the number of real root of the system in the positive orthant .",
    "hence the total complexity of the algorithm is @xmath438 .    in the univariate case ( @xmath2 ) , if we assume that ( [ eq : exp_b ] ) holds for real algebraic numbers , then the cost of @xmath381 and @xmath382 is dominated by that of the other steps , that is the splitting operations , and the ( average ) complexity becomes @xmath459 and matches the one derived in @xcite ( without scaling ) .",
    "we can reduce the number of steps that the algorithm performs , and thus improve the total complexity bound of the algorithm , using the same trick as in @xcite .",
    "the main idea is that the continued fraction expansion of a real root of a polynomial does not depend on the initial computed interval that contains all the roots .",
    "thus , we spread away the roots by scaling the variables of the polynomials of the system by a carefully chosen value .",
    "if we apply the map @xmath460 , to the initial polynomials of the system , then the real roots are multiply by @xmath461 , and thus their distance increase .",
    "the key observation is that the continued fraction expansion of the real roots does not depend on their integer part .",
    "let @xmath344 be the roots of the system , and @xmath395 , be the roots after the scaling .",
    "it holds @xmath462 . from @xcite",
    "it holds that @xmath463 and thus @xmath464 if we choose @xmath465 and assume that @xmath466 which is the worst case , then @xmath467 .",
    "thus , following the proof of lem .",
    "[ lem : mcf - steps ] , the number of steps that the algorithm is @xmath468 .",
    "the bitsize of the scaled polynomials becomes @xmath469 .",
    "the total complexity of algorithm is now @xmath470 where @xmath415 the maximum bitsize of the partial quotient appear during the execution of the algorithm .",
    "if we assume that ( [ eq : exp_b ] ) holds for real algebraic numbers , then @xmath471 . notice that in this case , when @xmath2 , the bound becomes @xmath1 , which agrees with the one proved in @xcite .    the discussion above combined with prop .",
    "[ prop : mcf - complexity ] lead us to :    [ th : improved - mcf - complexity ] the total complexity of the algorithm is @xmath472 .",
    "we have implemented the algorithm in the c++ library ` realroot ` of , which is an open source effort that provides fundamental algebraic operations such as algebraic number manipulation tools , different types of univariate and multivariate polynomial root solvers , resultant and gcd computations , etc .",
    "the polynomials are internally represented as a vector of coefficients along with some additional data , such as a variable dictionary and the degree of the polynomial in every variable .",
    "this allows us to map the tensor of coefficients to the one - dimensional memory .",
    "the univariate solver that is used is the continued fraction solver ; this is essentially the same algorithm with a different inclusion criterion , the descartes rule .",
    "the same data structures is used to store the univariate polynomials , and the same shift / contraction routines .",
    "the univariate solver outputs the roots in increasing order , as a result of a breadth - first traverse of the subdivision tree .",
    "in fact , we only compute an isolation box for the smallest positive root of univariate polynomials and stop the solver as soon as the first root is found .",
    "our code is templated and is efficiently used with gmp arithmetic , since long integers appear as the box size decreases .",
    "first , we consider the system @xmath473 ( @xmath474 ) , where @xmath475 , and @xmath476 .",
    "we are looking for the real solutions in the domain @xmath477\\times[-2,2]$ ] , which is mapped to @xmath478 , by an initial transformation .",
    "the isolating boxes of the real roots can be seen in fig .",
    "[ fig : sys-1 ] .    in systems",
    "@xmath479 , we multiply @xmath480 and @xmath481 by quadratic components , hence we obtain @xmath482 and @xmath483 the isolating boxes of this system could be seen in fig .",
    "[ fig : sys-2 ] .",
    "notice , that size of the isolation boxes that are returned in this case is considerably smaller .",
    "consider the system @xmath484 , which consists of @xmath485 and @xmath481 , which is a polynomial of bidegree @xmath486 .",
    "the output of the algorithm , that is the isolating boxes of the real roots can be seen in fig .",
    "[ fig : sys-4 ] . one important observation is the fact the isolating boxes _ are not _ squares , which verifies the adaptive nature of the proposed algorithm .",
    "we provide execution details on these experiments in table  [ tab : exec ] .",
    "several optimizations can be applied to our code , but the results already indicate that our approach competes well with the bernstein case .       *",
    "acknowledgements * + the first and second author were supported by marie - curie initial training network saga , [ fp7/2007 - 2013 ] , grant [ pitn - ga-2008 - 214584 ] .",
    "the third author was supported by contract [ anr-06-blan-0074 ] `` decotes '' .",
    "i.  z. emiris , b.  mourrain , and e.  p. tsigaridas . .",
    "in p.  hertling , c.  hoffmann , w.  luther , and n.  revol , ed . ,",
    "_ reliable implementa- tions of real number algorithms : theory and practi- ce _ , _ lncs _ vol . 5045 , pp .",
    "springer verlag , 2008 ."
  ],
  "abstract_text": [
    "<S> we present a new algorithm for isolating the real roots of a system of multivariate polynomials , given in the monomial basis . </S>",
    "<S> it is inspired by existing subdivision methods in the bernstein basis ; it can be seen as generalization of the univariate continued fraction algorithm or alternatively as a fully analog of bernstein subdivision in the monomial basis . </S>",
    "<S> the representation of the subdivided domains is done through homographies , which allows us to use only integer arithmetic and to treat efficiently unbounded regions . </S>",
    "<S> we use univariate bounding functions , projection and preconditionning techniques to reduce the domain of search . </S>",
    "<S> the resulting boxes have optimized rational coordinates , corresponding to the first terms of the continued fraction expansion of the real roots . </S>",
    "<S> an extension of vincent s theorem to multivariate polynomials is proved and used for the termination of the algorithm . </S>",
    "<S> new complexity bounds are provided for a simplified version of the algorithm . </S>",
    "<S> examples computed with a preliminary c++ implementation illustrate the approach .    [ algebraic algorithms ] </S>"
  ]
}