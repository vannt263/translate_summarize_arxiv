{
  "article_text": [
    "delaunay triangulation is one of the cornerstones of computational geometry . in two dimensions ,",
    "the task is , given a collection of input points , to find triangles whose corners are the input points , so that none of the input points lies inside the circumcircle of a triangle .",
    "this constraint about circumcircles makes it possible to ensure that flat triangles are avoided as much as possible .",
    "this is important for many numeric simulation applications , as flatter triangles imply more errors in the simulation process .    to our knowledge",
    ", this article presents the first formalized proof of correctness of an algorithm to build a plane delaunay triangulation .",
    "the algorithm takes as input an arbitrary triangulation and repeatedly flips illegal edges until the delaunay criterion is achieved .",
    "this is one of the most naive algorithms , but proving its formal correctness is already a challenge .",
    "we shall review more related work around geometry , combinatorial maps , and formalization in section  [ rw ] .",
    "we use a general data - structure to represent plane subdivisions and perform proofs , known as hypermaps @xcite .",
    "hypermaps are collections of _ darts _ equipped with two permutations .",
    "darts are elementary objects , more elementary than points : usually , two darts constitute an edge and several darts constitutes a point .",
    "the two permutations are used to describe how darts are connected together to constitute an edge or a point .",
    "we then need to give locations to points .",
    "this is done by _ embedding _ the darts in the plane , by simply attaching coordinates , making sure that all darts that constitute the same point should have the same coordinates .",
    "we then restrict our work to _ triangulations _ by defining a way to compute faces and by considering hypermaps with three - point faces .",
    "we shall review our approach to hypermaps in section  [ hy ] .",
    "the edge flipping operation can be defined at a topological level : it mainly consists in detaching an edge from two points and attaching it back to two other points . as an intermediate step ,",
    "we observe a hypermap that is not a triangulation , but after re - attaching the edge we get back a new triangulation .",
    "we review the topological aspect of edge flipping in section  [ fl ] .",
    "the next step is to describe where edge flipping occurs . at this point",
    "the coordinates of points play a role .",
    "we formalize how oriented triangles and circumcircles are computed and define _",
    "illegal edges_. we show that illegal edges can be flipped and that the operation also preserves the geometric constraints of well - embedded triangulations .",
    "we study this aspect in section  [ dp ] .",
    "a crucial aspect of our formalization is to show that the algorithm terminates .",
    "we tackle this issue by formalizing the argument that the number of possible triangulations based on a given collection of darts and a given collection of points is finite .",
    "we then exhibit a real number associated to each triangulation that decreases when an illegal edge is flipped . because the set of possible triangulations is finite , this is enough to ensure termination .",
    "this point is studied in a generic manner in section  [ tf ] .",
    "in section  [ ds ] , we show the kind of correctness statement that we have proved about our delaunay algorithm .",
    "the full formalization is developed in coq @xcite .",
    "it covers many different aspects : hypermaps , geometry , termination problems . because of the size of this paper",
    ", we do not enter into details , but the full formalization is available at @xcite .",
    "like @xcite , we work with a general model of plane subdivisions , based on hypermaps @xcite and combinatorial oriented maps @xcite . the triangulations of our development are a kind of combinatorial oriented maps .    triangulations are widely used in computational geometry to model , reconstruct or visualize surfaces .",
    "for instance , the cgal library offers a lot of advanced functionalities about triangulations @xcite . among them",
    ", the delaunay triangulations @xcite are very appreciated in applications because their triangles are regular enough to avoid some numerical artefacts .",
    "pedagogical presentation are given in @xcite .",
    "we work in the calculus of inductive constructions with coq @xcite .",
    "related work on the description of geometric algorithms includes @xcite also using coq and @xcite using isabelle . concerning graphs , @xcite gives a model of triangulations restricted to the study of the five color theorem .",
    "hypermaps are also used intensively in @xcite for the proof of the four - colour theorem .",
    "a detailed comparison is given in @xcite .",
    "hypermaps also play a significant role in the formalization of packings by _ tame graphs _ in the proof of kepler s conjecture @xcite .    other work with close variants of the hypermaps used in this paper",
    "are concerned with the formal study of geometric modelling @xcite , surface classification @xcite , image segmentation @xcite , and a discrete form of the jordan curve theorem  @xcite .",
    "( _ hypermap _ ) [ hd ] + ( i ) a _ hypermap _ is an algebraic structure @xmath0 , where @xmath1 is a finite set , the elements of which are called _ darts _ , and @xmath2 , @xmath3 are permutations on @xmath1 .",
    "+    intuitively , darts can be understood as half - edges , the permutation @xmath2 usually connects the two darts of each edge , and @xmath3 connects all the darts that meet on the same vertex of a graph . in general , the @xmath2 permutation could link together an arbitrary number of elements , but in practice , it is usually involutive .",
    "[ fig : dhmap1 ] gives an example of a hypermap with only three darts ( darts 7 , 10 , and 11 ) that are not 0-linked to another one .",
    "such exotic darts may always occur at intermediate stages during manipulation of maps .",
    "for all other darts of fig .",
    "[ fig : dhmap1 ] , the 0-successor of the 0-successor of each dart is the dart itself .    in fig .",
    "[ fig : dhmap1 ] , @xmath2 and @xmath3 are permutations on @xmath4 , then @xmath5 is a hypermap .",
    "it is drawn on the plane by associating to each dart a curved arc ( here a simple line segment ) oriented from a bullet to a small stroke : @xmath6-linked ( resp .",
    "@xmath7-linked ) darts share the same small stroke ( resp .",
    "bullet ) . by convention , in the drawings of hypermaps on surfaces ,",
    "@xmath8 permutations turn _ counterclockwise _ around strokes and bullets .",
    "we use coq s datatype declaration mechanism to define a two element type dim of dimensions and an infinite type dart of darts , with a special dart singled out for later purposes .",
    "this special dart is called nil . to describe embeddings",
    "we also add a type point which is a pair of coordinates ( real numbers ) .",
    "hypermaps are then described by collecting darts and links in a free map linear data structure of type fmap :    .... inductive fmap : set : =   v | i ( m : fmap)(d : dart)(p : point ) | l ( m : fmap)(k : dim)(d1 d2:dart ) . ....",
    "this defines two operations , i to add new dart d in an existing map m , associating this dart with the location p , and l to add a link from dart d1 to dart d2 in the map m , at dimension k.    this free data structure is too permissive : we may add the same dart several times , we may link a dart that is not in the map , etc .",
    "we will see later that hypermaps are free maps where some preconditions have been verified before adding each dart and link , based on some helper functions .    a first function called exd computes whether a given dart is present in a map .",
    "another pair of functions , named succ and pred , compute whether there is a link at a given dimension with a given dart as source or target . for each dimension , the convention is to include in the free map only links that make up an open path .",
    "thus , to represent a map where @xmath9 , @xmath10 and @xmath11 , the free map will only contain a link from @xmath12 to @xmath13 and a link from @xmath13 to @xmath14 , or a link from @xmath13 to @xmath14 and a link from @xmath14 to @xmath12 , or a link from @xmath12 to @xmath13 and a link from @xmath14 to @xmath12 .",
    "the @xmath8 functions are then computed from the incomplete paths using a recursive algorithm that simply traverses the free map structure . the formal notation in coq syntax for",
    "the @xmath8 functions of a given map @xmath15 will be ca m k.    hypermaps are then defined as free maps such that some preconditions were verified before applying any of the i or l operations .",
    "the precondition prec_i for adding a dart in a hypermap is that the dart should not already be present and should be different from the special dart nil .",
    "the precondition prec_l for adding a link is that the source and the target should be darts in the map , the source should not already have a successor , the target should not already have a predecessor , and the new link should not be closing an open path . as an example of our notations , here is how our prec_l function is defined :    .... definition prec_l ( m : fmap)(k : dim)(x y : dart ) : =    exd m x /\\",
    "~succ m k x /\\",
    "~pred m k y      /\\",
    "ca m k x < > y. ....    verifying that a free map is indeed a hypermap can be described using a simple recursive function inv_hmap that traverses the map and verifies the preconditions at each step :    .... fixpoint inv_hmap(m : fmap):prop:=    match m with      v = > true      | i m0 x _ _",
    "= > inv_hmap m0 /\\",
    "prec_i m0 x      | l m0 k0 x y = > inv_hmap m0 /\\",
    "prec_l m0 k0 x y    end . ....    when m is a hypermap",
    ", we prove that the @xmath8 , or ca m k , are permutations of the darts .",
    "then , by construction , for every dart @xmath16 the set @xmath17 is finite and is called the _ orbit _ of @xmath16 at dimension @xmath18 . from the most abstract point of view , there is no difference between links at dimension 0 and links at dimension 1 .",
    "however , to describe the subdivisions we are accustomed to manipulate , it will be better to ensure that orbits at dimension zero are edges , and thus contain only two darts , while orbits at dimension one are vertices , and thus contain only darts that are associated to the same geometrical point ( see section [ flipedge ] ) .",
    "we also say that two darts @xmath19 and @xmath20 are in the same component if there exists a path from @xmath19 to @xmath20 using the @xmath8 permutations at each step .    when @xmath2 and @xmath3 are permutations , the composition of their inverses @xmath21 the orbits of which are the _",
    "faces_.    notions of components , paths , and orbits are independent from the permutation being observed . to handle all these in a regular fashion",
    ", we developed a generic module .",
    "planar hypermaps can be characterised by counting their edges , vertices , faces , and components @xcite .",
    "these remain topological properties , independent from actual positions .",
    "( _ euler characteristic , genus , planarity , euler formula _ ) + let @xmath16 , @xmath22 , @xmath23 , @xmath24 , @xmath25 , be the numbers of darts , edges , vertices , faces , and components of a hypermap .",
    "+ ( i ) the _ euler characteristic _ of @xmath26 is @xmath27 .",
    "+ ( ii ) the _ genus _ of @xmath26 is @xmath28 . + ( iii ) when @xmath29 , @xmath26 is said to be _",
    "planar_. it satisfies the _ euler formula _ : @xmath30 .",
    "truly geometric aspects are described by observing the plane coordinates associated to each dart in the i operation .",
    "of course , embeddings are consistent with the geometric intuition only if all darts in a vertex share the same coordinates and the two darts that constitute an edge never have the same coordinates .",
    "an extra condition is that faces should not be too twisted : we express this condition only for triangles , by stating that they have to satisfy the _",
    "counter - clockwise _ orientation predicate as already used by knuth in @xcite .    in a nutshell ,",
    "knuth s orientation predicate relies on the existence of a 3-argument predicate on points ( named ccw in our development , fig .",
    "[ fig : ccw](a ) ) that satisfies five axioms .",
    "the first one expresses that if @xmath31 satisfy ccw , then so do @xmath32 ( in that order ) .",
    "we shall also use a more complex axiom , which we shall name knuth s fifth axiom , with the following statement ( fig .",
    "[ fig : ccw](b ) ) :    .... lemma axiom5 :   forall p q r s t : point ,    ccw q p r - > ccw q p s - > ccw q p t - >       ccw q r s - > ccw q s t - > ccw q r t. ....    using all these concepts , we can state precisely what we mean by a triangulation : a planar hypermap , where all edges have two darts , and all faces have three vertices . from the geometric point of view",
    ", this hypermap should also be well - embedded : all edges contain darts with different geometric locations , all triangles but one are oriented counter - clockwise .",
    "the one face that is not a counter - clockwise triangle correspond to the external boundary . in this first experiment",
    ", we have assumed this external boundary to also be a triangle , but one that is oriented clockwise ( fig .",
    "[ fig : triangul ] ) .",
    "this simplification can also be found in well - known studies of the delaunay problem @xcite .",
    "a hypermap that satisfies all these conditions is said to be a _",
    "well - embedded triangulation_.",
    "in the previous sections , we have described the basic constructors of hypermaps i and l and the many ways in which we can observe maps and local parts of these maps .",
    "now , we will study ways to transform maps .      when flipping edges , we need to detach darts from vertices ( 1-orbits ) .",
    "a more general point of view is to consider that a vertex is actually split into two parts while respecting the connection order . to understand the required transformations , we need to remember that links are left open in the map structure . before the split",
    ", one dart has no 1-successor , after the split two of the darts taken from the split vertex have no 1-successor .",
    "the split operation is specified by stating the two darts that have this property , let s assume these two darts are called @xmath19 and @xmath20 ( fig .",
    "[ fig : split2 ] ) .    the split operation can be described for any dimension @xmath18 and is decomposed in two steps . in the first step ,",
    "one checks whether @xmath19 has a @xmath18-successor .",
    "if it has one , then the darts @xmath33 and @xmath34 in the @xmath18-orbit such that @xmath33 has no @xmath18-successor and @xmath34 has no @xmath18-predecessor are computed , the @xmath18-link starting in @xmath19 is removed , and a link from @xmath33 to @xmath34 is added . in this step , the orbit is actually not changed , and we can call this operation _ shifting_. in the second step , the one link starting in @xmath20 is removed .",
    "the precondition for this operation is that @xmath19 and @xmath20 should be different and in the same @xmath18-orbit . in our formal development",
    "this is described by a function named split and we proved a few important properties of this operation , for instance that it preserves planarity and commutativity with respect to @xmath19 and @xmath20 .    to merge two orbits ,",
    "we need to choose a dart @xmath19 in one of the orbit and a dart @xmath20 in the other , with the intention that the @xmath18-successor of @xmath19 will be @xmath20 in the new map ( fig .",
    "[ fig : mergedef2 ] ) . of course",
    ", a first step is to make sure that the two orbits are shifted in such a way that @xmath19 has no successor and @xmath20 has no predecessor before adding a link from @xmath19 to @xmath20 .",
    "this operation has a pre - condition imposing that @xmath19 and @xmath20 are not in the same orbit . when considering merging at dimension 1 ( merging vertices ) , the effect on edges and vertices is quite obvious , but less clear for faces @xcite .",
    "flipping an edge actually consists in first removing an edge thus `` merging '' two adjacent triangles , and then adding back a new edge between two different vertices from the merged face . actually , the two vertices between which a new edge is added are neighbors to the two vertices from which the first edge was removed .",
    "the number of darts in the map is preserved , so that the edge that is removed in the first step can be viewed as moved from a pair of vertices to another one .",
    "the first step of removing an edge is described using two split operations , while the second step of adding back a new edge is described using two merge operations .",
    "embeddings must then be updated to respect the requirement that all darts in a vertex share the same location .",
    "the topological steps are illustrated in fig .",
    "[ fig : flip ] .",
    "the precondition for this operation is that the two darts in the edge should be in different faces and connected to vertices of 3 darts or more .    in intermediate steps",
    ", the subdivision is no longer a triangulation : the merged face has a different number of vertices , the detached edge is a component of its own , etc .",
    "however , we describe a pair of preconditions , named prec_flip and prec_flip_emb that ensure that the flipping operation as a whole preserves the important topological properties , for instance planarity , having only two - dart edges and three - vertex faces and the embedding properties , for instance that all darts in a 1-orbit ( a vertex ) share the same coordinates and that all triangles but for the external face are oriented counter - clockwise .",
    "the precondition for topological properties ( prec_flip ) is that the flipped edge consists of darts belonging to distinct faces and to vertices with at least three darts .",
    "the pre - condition for embedding properties ( prec_flip_emb ) is that the four points in the intermediate merged face should constitute a convex quadrangle . in our formal development",
    ", we actually prove that prec_flip is sufficient to preserve the important topological properties , that the prec_flip_emb is sufficient to preserve the well - embedding properties , and that prec_flip_emp implies prec_flip @xcite .",
    "we shall see that our algorithm for delaunay triangulation only requires flipping edges that satisfy these predicates .",
    "a triangulation satisfies the delaunay criterion when none of the vertices occurs inside the circumcircle of a face . in other words , there are no illegal edges . in our development",
    "we defined a four - argument predicate in_circle to express that a point is inside the circumcircle of three other points .",
    "( _ illegal edge _ ) [ il ] + an edge is _ illegal _ in a well - embedded plane triangulation when : + ( i ) its two adjacent triangles are counterclockwise oriented ( which excludes the external face ) ; + ( ii ) the vertex of one of the two triangles which is not an extremity of the edge is inside the circumcircle of the other triangle .",
    "this notion is illustrated in fig .",
    "[ fig : legal ] , where @xmath35 is inside the circumcircle of triangle @xmath36 , at the right of @xmath37 .",
    "note that this property is symmetrical with respect to the two triangles . when an illegal edge is detected , we know that the preconditions for the flip operation are satisfied .",
    "when the operation is performed , the new edge produced by this flip operation is legal .",
    "this contains two parts : the two new triangles are oriented , and the circumcircles of each new triangle does not contain the fourth point .",
    "more precisely , the important property , called exchange in our formal development , asserts that when two adjacent triangles @xmath38 and @xmath39 are oriented counterclockwise and @xmath35 is in the circumcircle of @xmath38 , then the triangles @xmath40 and @xmath41 are also oriented counterclockwise ( fig.[fig : legal ] ) .    proving this part required some effort .",
    "we actually showed that , when @xmath42 , @xmath43 , @xmath44 , and @xmath35 are in the conditions of the lemma , then there exists a fifth point @xmath34 so that @xmath42 , @xmath34 @xmath43 , @xmath44 , and @xmath35 are in the conditions of knuth s fifth axiom for the orientation predicate .",
    "this point is simply the one obtained by rotating the center of the circumcircle by a quarter - turn around @xmath42 .",
    "we can then use knuth s fifth axiom to conclude that @xmath45 is oriented counterclockwise . a symmetric proof ( with a rotation around @xmath43 ) yields that @xmath46 is oriented counterclockwise .",
    "this symmetric proof is implemented by copying and pasting the formal development , _",
    "mutatis mutandi_. uses of knuth s first axiom then yield the result .    the 3-argument predicate ccw is computed from point coordinates through a simple determinant : @xmath47 the boolean condition is represented by the sign of the determinant and the condition of degeneracy , that three points are never aligned , ensures that this determinant is non - zero .",
    "the 4-argument predicate , in_circle is also computed through the sign of a simple determinant : @xmath48 knuth s five axioms are easily proved using algebraic tools ( in coq , mostly the ring tactic ) from these analytic definitions @xcite . proving the existence of the point @xmath34 a few paragraphs above actually relies on a stronger tool , a tactic called psatz ( the name comes from _ positivstellensatz _ ) and able to handle simple cases of non - linear formulas , available only in recent versions of coq @xcite .",
    "traditional approaches to ensure the termination of algorithms rely on structural recursion for the simplest algorithms and well - founded orders for the others . in this work",
    ", we took the novel approach of relying on three features :    * we rely on the fact that the number of triangulations embedded on a given finite set of points and using a finite set of darts is finite , * we exhibit an order on triangulations that is not well - founded , but we show that flipping an illegal edge implies a strict decrease in that order , * we then rely on the fact that any transitive , irreflexive , and antisymmetric relation @xmath49 is well - founded when restricted on a finite set .      for the formal development , we describe a minimal description of finiteness for subsets of a type .",
    "first , we represent each subset of a type t by a predicate on t , i.e. , a function of type t - > prop .",
    "then we express finiteness by stating that all elements satisfying the predicate are found in a list .",
    "this is specified by the following datatype declaration :    ....    record fset ( t : type ) : = mkfs {      prd :> t - > prop ;      fs_enum : list t ;      _ : forall x , prd x - > in x fs_enum    } . ....",
    "this declaration states that a finite set on type t is described by the characteristic predicate prd of type t - > prop and a list fs_enum which enumerates the elements that satisfy prd .",
    "actually our definition is quite lenient , because it makes it possible to have in the list more elements than those satisfying the predicate .",
    "the list is very useful because it gives a simple way to iterate over all the elements in the finite set ( and with our lenient definition , risking to see several times the same elements and elements outside the set ) .",
    "this method , of associating two points of view ( predicate or covering list ) over a simple notion ( finite set ) is directly inspired from the approach to describe finite sets in the ssreflect package @xcite .",
    "we then show that finiteness is preserved by cartesian product , disjoint sum , inclusion , inverse image through an injection , construction of lists of fixed length , construction of lists of bounded length , and construction of lists without duplication .    to show that the triangulations we consider are in a finite set , we start by computing from any map the list of darts and the set of points that appear in this map .",
    "we show that this list of darts and this set of points is preserved during flips .",
    "it is easy for the list of darts because the order of the i constructors in the fmap structure is not modified by the basic shift , split , or merge operations . for points ,",
    "it is harder , because a flip operation changes the number of darts that use a given coordinate and we need to show that the set is preserved modulo a possible change in the order and number of times each point is inserted .",
    "we do this by defining a sorting function with removal of duplicates ( an insertion sort algorithm with an extra test to detect duplications ) and applying this sorting function on the list of points used in the triangulation .",
    "we then show that the list of points obtained after a flip operation , once sorted and cleaned from duplicates , is preserved through flipping .",
    "we then show that all maps built on the same list of darts and the same set of points are in a finite set , obtained using cartesian products , sums , etc .      as a complement to the finiteness property",
    ", we must exhibit a strict order that decreases every time an illegal edge is flipped .",
    "it is well known that delaunay triangulation is closely related to computing the three - dimensional convex hull of points projected from the horizontal plane to the revolution paraboloid with equation @xmath50 .    given four points @xmath42 , @xmath43 , @xmath44 , and @xmath35 in a three - dimensional space ,",
    "the determinant obtained from their coordinates by adding a column of ones actually computes a value which is proportional to the volume of the tetrahedron defined by these four points .",
    "@xmath51    thus , the determinant computed in section  [ dp ] to decide whether a point occurs inside the circumcircle of a triangle actually computes the volume of the tetrahedron defined by the four projections of the points from the plane to the paraboloid . when considering two adjacent triangles and the triangles obtained after flipping the common edge , we can compute the volume between these two triangles and the corresponding triangles using the projected points in the paraboloid .",
    "the two configurations yield two different volumes .",
    "the difference of volume is exactly the volume of the tetrahedron based on the points in the paraboloid , and it is positive when the projected triangles switch from a concave position to a convex one .    to compute each individual volume , we decompose the prism - like shape into three tetrahedra , each being computed using a determinant . showing the relation between the volumes of the two prism - like shapes before and after the flip operation and the determinant used for the in_circle predicate is an easy task using coq s ring tool .    to compute the accumulated volume , we simply enumerate the edges of the map and add the triangle obtained as the @xmath52-orbit for each edge . of course , each triangle is thus represented three times , but this does not matter for our decreasing argument . we simply need to show that the volume computed only changes for the six darts whose @xmath52-orbit changes during the flip operation .      to describe a terminating function , we rely on a type tri_map , which combines a free map and the proof that it is a well - embedded triangulation .",
    "this type is defined as a conventional coq sigma - type :    .... definition tri_map : = { m | inv_triangulation m /\\",
    "iswellembed m}. ....    the natural projection returning the free map is written p_tri .",
    "we then define a function step_tri , from type tri_map to itself , which performs a flip when the map contains an illegal edge .",
    "this function relies on the proofs that flip preserves the property of being a well - embedded triangulation .",
    "we also define a final_dec function that detects when there are no illegal edges .",
    "last we define a function nat_measure which first constructs the final set of all triangulations using the same darts and points , with its enumerating list and then counts the triangulations in this list whose volume is smaller than the current one .",
    "this natural number decreases at every flip on a triangulation that contains an illegal edge , i.e. , every derivation that does not satisfy the final predicate .",
    "the recursive algorithm is not structural recursive , so we need to use one of the tools provided in the coq system to support general forms of recursion . here",
    ", we use the function command , which accepts a definition as long as one can prove that some measure ( a natural number ) decreases at each recursive call .",
    "we first prove the lemma non_final_step_decrease and then provide it to the function command .",
    ".... lemma non_final_step_decrease :    forall m , ~final ( p_tri m ) - >     ( nat_measure ( step_tri m ) < nat_measure m)%nat .",
    "...    function delaunay ' ( t : tri_map ) { measure nat_measure } : =   if final_dec ( p_tri t ) then     ( p_tri t )   else     delaunay ' ( step_tri t ) .",
    "....    computing the finite set of all triangulations is expensive ( an exponential cost in the number of darts and points ) , but this computation is not actually done in the algorithm , it is used as a logical argument for termination .",
    "this computation is actually removed from the derived code produced by coq s extraction facility .",
    "it only makes sense to run the algorithm on well - embedded triangulations .",
    "thus , our delaunay function takes as argument a map and the proofs that this map is a triangulation and that it is well - embedded .",
    "it then calls the delaunay function with the adequate element of type tri_map .    ....",
    "definition delaunay ( m : fmap)(it inv_triangulation m )      ( we : iswellembed m ) : fmap : =    delaunay ' ( exist _ m ( conj it we ) ) . ....    in our formal proof ,",
    "we show that the end result of the delaunay function returns a well - embedded triangulation that contains no illegal edges .",
    "for instance , we have the following statement :    .... theorem no_dart_illegal_delaunay :     forall ( m : fmap)(it : inv_triangulation m)(we : iswellembed m ) ,          no_dart_illegal ( delaunay m it we ) .   ....    in english words , we quantify over all free maps that satisfy two predicates .",
    "the first predicate inv_triangulation captures all the conditions for the map to be a correct triangulation in the topological sense : it is a correct hypermap , 0-orbits have two elements only , faces have three elements .",
    "the second predicate iswellembedded expresses that the coordinates are consistent : all darts in the same point share the same coordinates , all triangles are oriented .",
    "the hypotheses that the map satisfies these predicates are given names it and we respectively .",
    "the function delaunay that computes the delaunay triangulation takes these hypotheses as arguments .",
    "we then use a predicate no_dart_illegal to express that the delaunay condition is always satisfied : it is never the case that the extra vertex of an adjacent triangle is inside the circumcircle of a given triangle .",
    "the one missing element of this algorithm is a starter : given an arbitrary set of points inside a triangle , we need to produce the initial triangulation .",
    "developing a naive algorithm , with only the requirement that the triangulation should be well - formed , should be an easy task .",
    "actually , if the three points describing the external face are given first , an possible algorithm is a simple structural recursive function on the list of points .",
    "all numeric computations are described using `` abstract perfect '' real numbers . in practice",
    ", specialists in algorithmic geometry know that numeric computation with floating point numbers can incur failures of the algorithm by failing to detect illegal edges , or by giving inconsistent results for several related computations @xcite .",
    "for instance , rounding errors could make that both an edge and its flipped counterpart could appear to be illegal , thus leading to looping computation that is not predicted by our ideal formal model . however , we know that all predicates are based on determinant computations , hence polynomial computation , and it is thus sufficient to ensure that intermediate computations are done with a precision sufficiently higher than the precision of the initial data to guarantee the absence of errors introduced by rounding . thus , the `` theoretical '' correctness of the algorithm can be preserved in a `` practical '' sense if one relies on a suitable approach to increase the precision of numeric computations , as in @xcite .",
    "our whole development from the hypermap specifications and proofs up to the delaunay properties reaches about @xmath53 coq lines , with more than @xmath54 definitions and @xmath55 lemmas and theorems .",
    "thanks to the _ extraction _ facility provided in the coq sytem , an ocaml version of the algorithm can be obtained ( where every computation on real numbers is replaced by computation on unbound integers for instance , since division is never used in the algorithm ) @xcite .",
    "we described the most naive algorithm for the delaunay problem .",
    "we believe that most of the framework concerning the topology will be re - usable when studying other algorithms for this problem @xcite . also , our proof reason on abstract models given as coq programs , not actual programs designed for efficiency .",
    "previous experiments in the formalization of efficient algorithms @xcite show that the proofs at an abstract level are a useful first step for the study of efficient programs given in an imperative language .",
    "our framework is a sound basis for subsequent software developments with triangulations and flip in computational geometry and geometric modeling , for instance in the way of @xcite where hypermaps are represented by linked lists .",
    "the functional , side - effect - free approach in this formal description has been very useful for the proofs .",
    "however , for efficiency purpose it is crucial to relate this functional description with imperative implementations .",
    "+   + * acknowledgments . *",
    "we wish to thank l. pottier , t .-",
    "pham , and s. pion for their suggestions in establishing some of the geometric proofs .",
    "bertot , y. , castran , p. : interactive theorem proving and program development - coqart : the calculus of inductive constructions .",
    "text in theoretical computer science , an eatcs series ( 2004 ) , springer - verlag .",
    "gonthier g. , mahboubi a. , rideau l. , tassi e. , thry l .. a modular formalisation of finite group theory .",
    "theorem proving in higher order logics ( tphols 2007 ) , lncs * 4732 * , pages 86101 .",
    "springer - verlag , 2007 ."
  ],
  "abstract_text": [
    "<S> this article presents the formal proof of correctness for a plane delaunay triangulation algorithm . </S>",
    "<S> it consists in repeating a sequence of edge flippings from an initial triangulation until the delaunay property is achieved . to describe triangulations , we rely on a combinatorial hypermap specification framework we have been developing for years . </S>",
    "<S> we embed hypermaps in the plane by attaching coordinates to elements in a consistent way . </S>",
    "<S> we then describe what are legal and illegal delaunay edges and a flipping operation which we show preserves hypermap , triangulation , and embedding invariants . to prove the termination of the algorithm </S>",
    "<S> , we use a generic approach expressing that any non - cyclic relation is well - founded when working on a finite set . </S>"
  ]
}