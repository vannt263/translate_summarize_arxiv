{
  "article_text": [
    "despite of existence of many interactive algebra  numerical systems ( matlab or mathcad ) and systems of computer algebra ( macsyma , reduce@xcite , mathematica@xcite , maple , _",
    "etc_. ) , some kind of algebraic problems related with numerous difficult and formal manipulation could not be simply rewritten for computer .",
    "the systems of computer algebra very useful if the class of problems under consideration is already has standard implementation .",
    "it is symbolic integration and differentiation , rational and integer number arithmetic with arbitrary precision@xcite , _ etc . _ .    for implementation of new classes of problems the most of systems of computer algebra ( ca ) have his own programming languages .",
    "sometime it can be very universal and powerful languages like lisp .",
    "for example , many new packages was implemented in reduce / rlisp by users .    on the other hand",
    "the programming of the new methods in a system of ca can be even more difficult , than using universal modern languages like pascal@xcite , c@xcite , _ etc . _ with new powerful techniques like _ data types _ or _ object oriented programming _ ( oop ) .    in the paper are considered possible extensions of the oop to make possible of simple implementations to systems of ca .",
    "the paper is continue a theme presented earlier at @xcite .",
    "the development of big and difficult pieces of software is often related with proliferation of errors and lost of clarity . the problem of effectiveness of programming was one of central point for creation structural languages like pascal@xcite and new generation of object oriented languages like java@xcite .",
    "the lisp , traditional for ca , is very universal , but the structure of programs is too complicated .",
    "the oop has possibility of understanding representation of structures in ca @xcite .",
    "for example it is possible to define _ module _ : module = ; @xmath0 ( a , b : module ) : module ; @xmath1 ( a , b : module ) : module ; @xmath1 ( a : module ) : module ; zero : module ; ; \\ { module } then definition of _ ring _ can exploit _ inheritance _ in oop : ring = ( module ) @xmath2 ( a , b : ring ) : ring ; @xmath3 ( a , b : ring ) : ring ; inversion(a : ring ) : ring ; unit : ring ; ; \\ { ring } it is conception of an abstract basic type . they are algebra , module , group , field , ring",
    "_ etc._. the abstract types do not contain a data .",
    "other objects contain data .",
    "it is integer , real or complex numbers , quaternions , @xmath4 matrices , _ etc . _ : quaternion = ( algebra ) data : [ 0 .. 3 ] number ; norm : number ; @xmath0 ( a , b : quaternion ) : quaternion ; @xmath2 ( a , b : quaternion ) : quaternion ; @xmath5 ; \\ { quaternion }    there is a difficulty because in ca it is necessary to work with analytical expressions associated with each of the object .",
    "we can have possibility to write either @xmath6 , or @xmath7 . in the work @xcite already was discussed some kind of extensions to the model of an object .",
    "it is some synthesis of functional and object oriented programming .",
    "9 n.  wirth , _",
    "algorithms + data structures = programs _",
    "( prentice  hall , englewood cliffs , new jersey , 1976 ) .",
    "b.  stroustrup , _ the c++ programming language _ ( addison  wesley , reading , massachusetts , 1986 ) .",
    "p.  naughton , _ the java handbook _ ( mcgraw  hill , osborne , 1996 ) .",
    "a.  vlasov , _ object oriented and functional programming for symbolic manipulation _ ( proc .",
    "5th internat .",
    "workshop on new computing techniques in physics research ( aihenp96 ) , switzerland , 26 september , 1996 )    s.  wolfram , _ mathematica : a system for doing mathematics by computer _ ( addison  wesley , redwood city , california , 1988 )    a.  akritas , _ elements of computer algebra with applications _",
    "( john wiley & sons , new york , 1989 )    j.  davenport , y.  siret , e.  tournier , _ calcul formel : systms et algorithmes de manipulations algbriques _ ( masson , paris , 1987 )    _ comments to attached copy of slide presentation _",
    "* a scientific problem * could be resolved with using variety of different ways .",
    "here is represented using : _ standard systems of computer algebra _ , _ universal programming languages _ and traditional work with _ pen and piece of paper_.    @xmath8    an application of universal programming languages like c++ , pascal , etc .",
    "is still widely used not only for numerical calculation but for any scientific data manipulation , including computer algebra .",
    "here is represented an approach with using _",
    "object oriented programming _ for computer algebra .",
    "@xmath8    an object oriented program for computer algebra consists of _ specific structures and algorithms of computer algebra _ together with _",
    "standard structures of the object oriented language_.    @xmath8    it is convenient to merge both types of structures in some _ extension of object oriented language for computer algebra_.    @xmath8    practical realization of such idea could be either _ standalone translator _ for the language or _",
    "translator ca @xmath9 oop _ , i.e. convertor of _ a program for computer algebra _ to _ a program on one of widespread object oriented languages ( c++ , java , delphi , etc.)_. the _ code generator",
    "_ produces program on the oo language , standard algorithms of computer algebra also can be included in _",
    "libraries _ in a standard format accessible for the language .",
    "next , the produced c++ program can be translated to executable module ; if it is java program it can be converted to bytecode for using in www applets ; etc .. it is the possibility to make computer algebra more effective , universal , fast , `` light '' and to include it as parts in other software projects .",
    "here is represented good agreement of principles of object oriented programming with structures of standard algebraic models in mathematics , _",
    "i.e. _ inheritance of methods and properties between such _",
    "abstract _ objects as _ semigroup , group , module , ring , division ring , field , algebra _ and such descendant _ `` actual '' _ objects as _ real and complex numbers or polynomials_.",
    "here is emphasized one of specific property of mathematical language that requires some extension of model of an object in object oriented programming . as a simple example",
    "is considered meaning of same variable @xmath10 in different contexts :      first meaning is traditional for standard programming language there ` x ' means * value * of variable @xmath10 and nothing else .",
    "but another meanings also are essential and used in mathematics and computer algebra .",
    "the second meaning is ` x ' as some * variable * @xmath10 of given type with value unknown or not essential .",
    "the last , most difficult case is ` x ' as value of some * function * with ( maybe partially ) unknown arguments or expression like @xmath12 .",
    "all three meaning are also used in _ pure functional programming _ languages there the functions with partially defined arguments are used and could be described formally as some tree represented on the slide .      but",
    "principles of type checking of an object oriented language should be extended for such a case to make the new structure ( an object with pointers to argument and to method of evaluation of the function ) compatible with initial type of variable @xmath10 .",
    "it require an _ extension of object programming : compatibility of 3 subtypes _ mentioned above ."
  ],
  "abstract_text": [
    "<S> the universal object oriented languages made programming more simple and efficient . in the article </S>",
    "<S> is considered possibilities of using similar methods in computer algebra . </S>",
    "<S> a clear and powerful universal language is useful if particular problem was not implemented in standard software packages like reduce , mathematica , _ etc_. and if the using of internal programming languages of the packages looks not very efficient .    </S>",
    "<S> functional languages like lisp had some advantages and traditions for algebraic and symbolic manipulations . </S>",
    "<S> functional and object oriented programming are not incompatible ones . </S>",
    "<S> an extension of the model of an object for manipulation with pure functions and algebraic expressions is considered .    </S>",
    "<S> _ extended abstract _ </S>"
  ]
}