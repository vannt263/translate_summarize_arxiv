{
  "article_text": [
    "the problem of reducing a partial differential equation ( pde ) model to a system of finite dimensional ordinary differential equations ( ode ) , has significant applications in engineering and physics , where solving such pde models is too time consuming . reducing the pde model to a simpler representation , without loosing the main characteristics of the original model , such as stability and prediction precision , is appealing for any real - time model - based computations .",
    "however , this problem remains challenging , since model reduction can introduce stability loss and prediction degradation . to remedy these problems ,",
    "many methods have been developed aiming at what is known as stable model reduction .    in this paper",
    ", we focus on additive terms called _ closure models _ and their application in reduced order model ( rom ) stabilization .",
    "we develop a learning - based method , applying extremum - seeking ( es ) methods to automatically tune the coefficients of the closure models and obtain an optimal stabilization of the rom .",
    "our work extends some of the existing results in the field .",
    "for instance , a reduced order modelling method is proposed in @xcite for stable model reduction of navier - stokes flow models .",
    "the authors propose stabilization by adding a nonlinear viscosity stabilizing term to the reduced order model .",
    "the coefficients of this term are identified using a variational data - assimilation approach , based on solving a deterministic optimization . in @xcite ,",
    "a lyapunov - based stable model reduction is proposed for incompressible flows .",
    "the approach is based on an iterative search of the projection modes satisfying a local lyapunov stability condition .",
    "an example of stable model reduction for the burger s equation using closure models is explored in  @xcite .",
    "these closure models modify some stability - enhancing coefficients of the reduced order ode model using either constant additive terms , such as the constant eddy viscosity model , or time and space varying terms , such as smagorinsky models .",
    "the added terms amplitudes are tuned in such a way to stabilize the reduced order model . however , such tuning is not always straightforward .",
    "our work addresses this issue and achieves optimal tuning using learning - based approaches .",
    "this paper is organized as follows : section [ prem ] establishes our notation and some necessary definitions .",
    "section [ es - rom - stab ] introduces the problem of pde model reduction and the closure model - based stabilization , and presents the main result of this paper .",
    "an example using the coupled burgers equation is treated in section [ burgers - example ] .",
    "finally , section [ concl ] provides some discussion on our approach and concludes .",
    "throughout the paper we will use @xmath0 to denote the euclidean vector norm ; i.e. , for @xmath1 we have @xmath2 .",
    "the kronecker delta function is defined as : @xmath3 and @xmath4 .",
    "we will use @xmath5 for the short notation of time derivative of @xmath6 , and @xmath7 for the transpose of a vector @xmath8 .",
    "a function is said analytic in a given set , if it admits a convergent taylor series approximation in some neighborhood of every point of the set .",
    "we consider the hilbert space @xmath9)$ ] , which is the space of lebesgue square integrable functions , i.e. , @xmath10 , iff @xmath11 .",
    "we define on @xmath12 the inner product @xmath13 and the associated norm @xmath14 , as @xmath15 , and @xmath16 , for @xmath17 .",
    "a function @xmath18 is in @xmath19;\\mathcal{z})$ ] if for each @xmath20 , @xmath21 , and @xmath22 . finally , in the remaining of this paper by stability we mean stability of dynamical systems in the sense of lagrange , e.g. , @xcite .",
    "we consider a stable dynamical system modelled by a nonlinear partial differential equation of the form @xmath23 where @xmath12 is an infinite - dimension hilbert space .",
    "solutions to this pde can be obtained through numerical discretization , using , e.g. , finite elements , finite volumes , finite differences etc .",
    "unfortunately , these computations are often very expensive and not suitable for online applications such as analysis , prediction and control .",
    "however , solutions of the original pde often exhibit low rank representations in an ` optimal ' basis  @xcite .",
    "these representation can be exploited to reduce the pde to an ode of significantly lower order .    in particular",
    ", dimensionality reduction follows three steps : the first step is to discretize the pde using a finite number of basis functions , such as piecewise linear or higher order polynomials or splines . in this paper",
    "we use the well - established finite element method ( fem ) , and refer the reader to the large literature , e.g. , @xcite for details .",
    "we denote the approximation of the pde solution by @xmath24 , where @xmath25 denotes the scalar time variable , and @xmath8 denotes the multidimensional space variable , i.e. , @xmath8 is scalar for a one dimensional space , a vector of two elements in a two dimensional space , etc .",
    "we consider the one - dimensional case , where @xmath8 is a scalar in a finite interval , chosen as @xmath26 $ ] without loss of generality . by a standard abuse of notation",
    ", @xmath27 also denotes the discretization of the spatial domain at equidistant space points , @xmath28 , for @xmath29 , and some spatial distance @xmath30 . in this notation",
    ", @xmath8 is an @xmath31-dimensional vector .",
    "the second step is to determine a set of ` optimal , ' for some criterion , spatial basis vectors @xmath32 for the discretized problem , that are used to ` best ' approximate the discretized pde solution as @xmath33 where @xmath34 is the projection of @xmath35 onto @xmath36 . here",
    ", @xmath37 is a @xmath38 matrix containing the basis vectors @xmath39 as column vectors .",
    "note that the dimension @xmath31 , coming form the high fidelity discretization of the pde described above , is generally very large , in contrast the dimension @xmath40 of the optimal basis set .",
    "the third step employs a galerkin projection , a classical nonlinear model reduction technique , to obtain a rom of the form @xmath41 the function @xmath42 is obtained from the weak form of the original pde , through the galerkin projection .",
    "the main challenge in this approach lies in the selection of the ` optimal ' basis matrix @xmath37 , and the criterion of optimality used .",
    "there are many model reduction methods to find those basis functions for nonlinear systems .",
    "for example some of the most used methods are proper orthogonal decomposition ( pod ) @xcite , dynamic mode decomposition ( dmd ) @xcite , and reduced basis ( rb ) @xcite .    in the remainder",
    ", we present the idea of closure models in the framework of pod . however , the derivation it is not limited to a particular type of rom .",
    "indeed , closure model ideas can be applied to other roms , such as dmd .",
    "we briefly review the necessary steps for computing pod reduced order models , described in detail in  @xcite .",
    "models based on pod select basis functions that capture an maximal amount of energy of the original system . in particular , the pod basis functions are computed from a collection of snapshots from the dynamical system over a finite time interval .",
    "these snapshots are usually obtained from a discretized approximation of the pde model .",
    "this approximation could be obtained using a numerical method , such as fem , or using direct measurements of the system modeled by the pde , if feasible . in this paper ,",
    "the pod basis is computed from snapshots of approximate numerical solutions of the partial differential equation .    to this end",
    ", we compute a set of @xmath43 snapshots of approximate solutions as @xmath44 where @xmath31 is the selected number of fem basis functions , and @xmath45 are time instances at which snapshots are recorded ( do not have to be uniform ) .",
    "next , we define the _ correlation matrix _ @xmath46 with elements @xmath47 the normalized eigenvalues and eigenvectors of @xmath46 are denoted by @xmath48 and @xmath49 , respectively .",
    "note that the @xmath48 are also referred to as the _ pod eigenvalues_.    the @xmath50 _ pod basis function _ is given by @xmath51 where @xmath52 , the number of retained pod basis functions , depends on the application .",
    "an important property of the pod basis functions is their orthonormality : @xmath53 where @xmath54 denotes the kronecker delta function .    in this new basis ,",
    "the solution of the pde ( [ general_pde_chap3 ] ) can then be approximated by @xmath55 where @xmath56 are the pod projection coefficients ( which play the role of the @xmath57 in the rom ( [ rom1_chap3 ] ) ) . to find the coefficients @xmath58 , the model ( [ general_pde_chap3 ] )",
    "is projected on the @xmath59-order pod space using a galerkin projection .",
    "in particular , both sides of equation ( [ general_pde_chap3 ] ) are multiplied by the pod basis functions , where @xmath60 is substituted by @xmath61 , and then both sides are integrated over the space interval @xmath62 $ ] . using the orthonormality of the pod basis ( [ pod_ortho_chap3 ] ) leads to an ode of the form @xmath63 note , that the galerkin projection preserves the structure of the nonlinearities of the original pde .",
    "we start with presenting the problem of stable model reduction in its general form , i.e. , without specifying a particular type of pde . to this end",
    ", we highlight the dependence of the general pde ( [ general_pde_chap3 ] ) , on a single physical parameter @xmath64 by @xmath65 the parameter @xmath64 is assumed to be critical for the stability and accuracy of the model ; changing the parameter can either make the model unstable , or inaccurate for prediction . as an example , since we are interested in fluid dynamical problems , we use @xmath64 to denote a viscosity coefficient .",
    "the corresponding reduced order pod model is takes the form ( [ pod_proj_chap3 ] ) and ( [ rom2_chap3 ] ) : @xmath66 as we explained earlier , the issue with this ` simple ' galerkin pod rom ( denoted pod rom - g ) is that the norm of @xmath61 might become unbounded over a finite time support , despite the fact that the solution of ( [ general_pde2_chap3 ] ) is bounded .",
    "one of the main ideas behind the closure models approach is that the viscosity coefficient @xmath64 in ( [ rom3_chap3 ] ) can be substituted by a virtual viscosity coefficient @xmath67 , whose form is chosen to stabilize the solutions of the pod rom ( [ rom3_chap3 ] ) .",
    "furthermore , a penalty term @xmath68 is added to the original ( pod ) rom - g , as follows @xmath69 the term @xmath68 is chosen depending on the structure of @xmath70 to stabilize the solutions of ( [ rom41_chap3 ] ) .",
    "for instance , one can use the cazemier penalty model described in @xcite .",
    "the following closure models were introduced in @xcite for the case of burgers equations .",
    "we present them in a general framework , since similar closure terms could be used on other pde models .",
    "these examples illustrate the principles behind closure modelling , and motivate our proposed method . throughout",
    ", @xmath40 denotes the total number of modes retained in the rom .",
    "we recall below some closure models proposed in the literature , which we will use later to present the main result of this paper .      here",
    "we describe closure models which are based on constant stabilizing eddy viscosity coefficients .",
    "-*_rom - h model : _ * the first eddy viscosity model , known as the heisenberg rom ( rom - h ) is simply given by the constant viscosity coefficient @xmath71 where @xmath64 is the nominal value of the viscosity coefficient in ( [ general_pde2_chap3 ] ) , and @xmath72 is the additional constant term added to compensate for the damping effect of the truncated modes .",
    "-*_rom - r model : _ * this model is a variation of the first one , introduced in  @xcite . in this model , @xmath67 is dependent on the mode index , and the viscosity coefficients for each mode are given by @xmath73 with @xmath72 being the viscosity amplitude , and @xmath74 the mode index .",
    "-*_rom - rq model : _ * this model proposed in @xcite , is a quadratic version of the rom - r , which we refer to as rom - rq . it is given by the coefficients @xmath75 where the variables are defined similarly to ( [ podromr_chap3 ] ) .",
    "-*_rom - rq model : _ * this model proposed in @xcite , is a root - square version of the rom - r ; we use rom - rs to refer to it .",
    "it is given by @xmath76 where the coefficients are defined as in ( [ podromr_chap3 ] ) .",
    "-*_rom - t model : _ * known as spectral vanishing viscosity model , is similar to the rom - r in the sense that the amount of induced damping changes as function of the mode index .",
    "this concept has been introduced by tadmor in @xcite , and so these closure models are referred to as rom - t .",
    "these models are given by @xmath77 where @xmath74 denotes the mode index , and @xmath78 is the index of modes above which a nonzero damping is introduced .",
    "-*_rom - sk model : _ * introduced by sirisup and karniadakis in @xcite , falls into the class of vanishing viscosity models .",
    "we use rom - sk to refer to it ; it is given by @xmath79    -*_rom - clm model : _ * this model has been introduced in @xcite , and is given by @xmath80 where @xmath74 is the mode index , and @xmath81 are positive gains ( see @xcite for some insight about their tuning ) .",
    "several ( time and/or space ) varying viscosity terms have been proposed in the literature .",
    "for instance , @xcite describes the smagorinsky nonlinear viscosity model .",
    "however , the model requires online computation of some nonlinear closure terms at each time step , which in general makes it computationally consuming .",
    "we report here the nonlinear viscosity model presented in @xcite , which is nonlinear and a function of the rom state variables .",
    "this requires explicit rewriting of the rom model ( [ rom3_chap3 ] ) , to separate the linear viscous term as follows @xmath82 where @xmath83 represents a constant viscosity damping matrix , and the term @xmath84 represents the remainder of the rom model , i.e. , the part without damping .",
    "+ based on equation ( [ rom4_chap3 ] ) , we can write the nonlinear eddy viscosity model denoted by @xmath85 , as @xmath86 where @xmath87 is the amplitude of the closure model , the @xmath88 are the diagonal elements of the matrix @xmath89 , and @xmath90 are defined as follows @xmath91 @xmath92 where the @xmath93 are the selected pod eigenvalues ( as defined in section [ basic_pod_chap3 ] ) . compared to the previous closure models , the nonlinear term @xmath94 does not just act as a viscosity , but is rather added directly to the right - hand side of the reduced order model ( [ rom4_chap3 ] ) , as an additive stabilizing nonlinear term . the stabilizing effect has been analyzed in @xcite based on the decrease over time of an energy function along the trajectories of the rom solutions , i.e. , a lyapunov - type analysis .",
    "all these closure models share several characteristics , including a common challenge , among others  @xcite : the selection and tuning of their free parameters , such as the closure models amplitude @xmath72 . in the next section ,",
    "we show how es can be used to auto - tune the closure models free coefficients and optimize their stabilizing effect .",
    "as mentioned in  @xcite , the tuning of the closure model amplitude is important to achieve an optimal stabilization of the rom . to achieve optimal stabilization",
    ", we use model - free es optimization algorithms to tune the coefficients of the closure models presented in section [ closure_models_chap3 ] .",
    "the advantage of using es is the auto - tuning capability that such algorithms allow .",
    "moreover , in contrast to manual off - line tuning approaches , the use of es allows us to constantly tune the closure model , even in an online operation of the system .",
    "indeed , es can be used off - line to tune the closure model , but it can also be connected online to the real system to continuously fine - tune the closure model coefficients , such as the amplitudes of the closure models .",
    "thus , the closure model can be valid for a longer time interval compared to the classical closure models with constant coefficients , which are usually tuned off - line over a fixed finite time interval .",
    "we start by defining a suitable learning cost function .",
    "the goal of the learning ( or tuning ) is to enforce lagrange stability of the rom model ( [ rom3_chap3 ] ) , and to ensure that the solutions of the rom ( [ rom3_chap3 ] ) are close to the ones of the original pde ( [ general_pde2_chap3 ] ) .",
    "the later learning goal is important for the accuracy of the solution .",
    "model reduction works toward obtaining a simplified ode model which reproduces the solutions of the original pde ( the real system ) with much less computational burden , i.e. , using the lowest possible number of modes",
    ". however , for model reduction to be useful , the solution should be accurate .",
    "we define the learning cost as a positive definite function of the norm of the error between the approximate solutions of ( [ general_pde2_chap3 ] ) and the rom ( [ rom3_chap3 ] ) , as follows @xmath95 where @xmath96 denotes the learned parameter , and @xmath97 is a positive definite function of @xmath98 .",
    "note that the error @xmath98 could be computed off - line using solutions of the rom ( [ rom3_chap3 ] ) , and approximate solutions of the pde ( [ general_pde2_chap3 ] ) . the error could be also computed online where the @xmath99 is obtained from solving the model ( [ rom3_chap3 ] ) , but the @xmath100 is obtained from real measurements of the system at selected space points @xmath8 .",
    "a more practical way of implementing the es - based tuning of @xmath101 , is to start with an off - line tuning of the closure model .",
    "then , the obtained rom , i.e. , the computed optimal value of @xmath101 , is used in an online operation of the system , e.g. , control and estimation .",
    "one can then fine - tune the rom online by continuously learning the best value of @xmath101 at any give time during the operation of the system .",
    "to derive formal convergence results , we use some classical assumptions of the solutions of the original pde , and on the learning cost function .",
    "[ pdestab_assumption1_chap3 ] the solutions of the original pde model ( [ general_pde2_chap3 ] ) , are assumed to be in @xmath102 , @xmath103 .",
    "[ robustmesass1_pdestab_chap3 ] the cost function @xmath104 in ( [ q_pde2_chap3 ] ) has a local minimum at @xmath105 .",
    "[ robustmesass2_pdestab_chap3 ] the cost function @xmath104 in ( [ q_pde2_chap3 ] ) is analytic and its variation with respect to @xmath64 is bounded in the neighborhood of @xmath106 , i.e. , @xmath107 , where @xmath108 denotes a compact neighborhood of @xmath106 .    under these assumptions ,",
    "the following lemma follows .",
    "[ pdestab_lemma1_chap3 ] consider the pde ( [ general_pde2_chap3 ] ) , under assumption [ pdestab_assumption1_chap3 ] , together with its rom model ( [ rom3_chap3 ] ) , where the viscosity coefficient @xmath64 is substituted by @xmath67 .",
    "let @xmath67 take the form of any of the closure models in ( [ podromh_chap3 ] ) to ( [ podromclm_chap3 ] ) , where the closure model amplitude @xmath72 is tuned based on the following es algorithm @xmath109 where @xmath110 , @xmath111 , @xmath112 large enough , and @xmath104 is given by ( [ q_pde2_chap3 ] ) . under assumptions [ robustmesass1_pdestab_chap3 ] , and [ robustmesass2_pdestab_chap3 ] , the norm of the distance w.r.t .",
    "the optimal value of @xmath72 , @xmath113 admits the following bound @xmath114 where @xmath115 , and the learning cost function approaches its optimal value within the following upper - bound@xmath116 where @xmath117 .",
    "based on assumptions [ robustmesass1_pdestab_chap3 ] , and [ robustmesass2_pdestab_chap3 ] , the extremum seeking nonlinear dynamics ( [ pdestab_mes_1_chap3 ] ) , can be approximated by linear averaged dynamics ( using averaging approximation over time , ( * ? ? ?",
    "* , definition 1 ) ) .",
    "furthermore , there exist @xmath118 , such that for all @xmath111 , the solution of the averaged model @xmath119 is locally close to the solution of the original es dynamics , and satisfies ( @xcite ) @xmath120 with @xmath121 . moreover , since @xmath104 is analytic it can be approximated locally in @xmath108 with a quadratic polynomial , e.g. , taylor series up to second order , which leads to ( @xcite ) @xmath122 based on the above , we can write @xmath123 which implies @xmath124 the cost function upper - bound is easily obtained from the previous bound , using the fact that @xmath104 is locally lipschitz , with the lipschitz constant @xmath125 .",
    "@xmath126    when the influence of the linear terms of the pde are dominant , e.g. , in short - time scales , closure models based on constant linear eddy viscosity coefficients can be a good solution to stabilize roms and preserve the intrinsic energy properties of the original pde .",
    "however , in many cases with nonlinear energy cascade , these closure models are unrealistic ; linear terms can not recover the nonlinear energy terms lost during the rom computation .",
    "for this reason , many researchers have tried to come up with nonlinear stabilizing terms for instable roms .",
    "an example of such a nonlinear closure model is the one given by equation ( [ smagorinsky_chap3 ] ) , and proposed in @xcite based on finite - time thermodynamics ( ftt ) arguments and in @xcite based on scaling arguments .",
    "based on the above , we introduce here a combination of both linear and nonlinear closure models .",
    "the combination of both models can lead to a more efficient closure model .",
    "in particular , this combination can efficiently handle linear energy terms , that are typically dominant for small time scales and handle nonlinear energy terms , which are typically more dominant for large time - scales and in some specific pdes / boundary conditions .",
    "furthermore , we propose to auto - tune this closure model using es algorithms , which provides an automatic way to select the appropriate term to amplify",
    ". it can be either the linear part or the nonlinear part of the closure model , depending on the present behavior of the system , e.g. , depending on the test conditions .",
    "we summarize this result in the following lemma .",
    "[ pdestab_lemma2_chap3 ] consider the pde ( [ general_pde2_chap3 ] ) , under assumption [ pdestab_assumption1_chap3 ] , together with its stabilized rom model @xmath127 where the linear viscosity coefficient @xmath128 is substituted by @xmath67 chosen from any of the constant closure models ( [ podromh_chap3 ] ) to ( [ podromclm_chap3 ] ) .",
    "the closure model amplitudes @xmath129 are tuned based on the following es algorithm @xmath130 where @xmath131 , @xmath132 , @xmath112 large enough , and @xmath104 is given by ( [ q_pde2_chap3 ] ) , with @xmath133 . under assumptions",
    "[ robustmesass1_pdestab_chap3 ] , and [ robustmesass2_pdestab_chap3 ] , the norm of the vector of distance w.r.t .",
    "the optimal values of @xmath129 ; @xmath134 admits the following bound @xmath135 where @xmath136 , and the learning cost function approaches its optimal value within the following upper - bound @xmath137 where @xmath138 .    we will skip the proof for this lemma , since it follows the same steps as the proof of lemma [ pdestab_lemma1_chap3 ]",
    "as an example application of our approach , we consider the coupled burgers equation , ( e.g. , see @xcite ) , of the form @xmath139 where @xmath140 represents the temperature , @xmath141 represents the velocity field , @xmath142 is the coefficient of the thermal expansion , @xmath143 the heat diffusion coefficient , @xmath64 the viscosity ( inverse of the reynolds number @xmath144 ) , @xmath145 $ ] is the one dimensional space variable , @xmath146 , and @xmath147 is the external forcing term such that @xmath148)$ ] .",
    "the boundary conditions are imposed as @xmath149 where @xmath150 are positive constants , and @xmath151 and @xmath152 denote left and right boundary , respectively .",
    "the initial conditions are imposed as @xmath153),\\\\ t(0,x)=t_{0}(x)\\in l^{2}([0,1 ] ) , \\end{array}\\ ] ] and are specified below . following a galerkin projection onto the subspace spanned by the pod basis functions , the coupled burgers equation is reduced to a pod rom with the following structure ( e.g. , see @xcite ) @xmath154 where matrix @xmath155 is due to the projection of the forcing term @xmath6 , matrix @xmath156 is due to the projection of the boundary conditions , matrix @xmath89 is due to the projection of the viscosity damping term @xmath157 , matrix @xmath158 is due to the projection of the thermal coupling and the heat diffusion terms @xmath159 , and the matrix @xmath160 is due to the projection of the gradient - based terms @xmath161 , and @xmath162 .",
    "the notations @xmath163 ( @xmath164 ) , @xmath165 ( @xmath166 ) , stand for the space basis functions and the time projection coordinates , for the velocity and the temperature , respectively .",
    "the terms @xmath167 represent the mean values ( over time ) of @xmath168 and @xmath169 , respectively .",
    "we first test the stabilization performance of lemma [ pdestab_lemma1_chap3 ] .",
    "we test the auto - tuning results of the es learning algorithm when tuning the amplitudes of linear closure models .",
    "more specifically , we test the performance of the heisenberg closure model given by ( [ podromh_chap3 ] ) , when applied in the context of lemma [ pdestab_lemma1_chap3 ] .",
    "we consider the coupled burgers equation ( [ burgers2_chap3 ] ) , with the parameters @xmath170 , the trivial boundary conditions @xmath171 , a simulation time - length @xmath172 and zero forcing , @xmath173 .",
    "we use @xmath174 pod modes for both variables ( temperature and velocity ) . for the choice of the initial conditions",
    ", we follow @xcite , where the simplified burgers equation has been used in the context of pod rom stabilization .",
    "indeed , in @xcite the authors propose two types of initial conditions for the velocity variable , which led to instability of the nominal pod rom , i.e. , the basic galerkin pod rom ( pod rom - g ) without any closure model .",
    "accordingly , we choose the following initial conditions : @xmath175\\\\ 0,\\;\\text{if}\\;x\\in\\;]0.5,\\;1 ] , \\end{array } \\right.\\ ] ] @xmath176\\\\ 0,\\;\\text { if}\\;x\\in\\;]0.5,\\;1 ] , \\end{array } \\right.\\ ] ] we apply lemma [ pdestab_lemma1_chap3 ] , with the heisenberg linear closure model given by ( [ podromh_chap3 ] ) . the closure model amplitude @xmath72",
    "is tuned using a discretized version of the es algorithm ( [ pdestab_mes_1_chap3 ] ) , given by @xmath177 where @xmath110 , and @xmath178 denotes the learning iterations index .",
    "we use the parameters values : @xmath179,\\;\\omega_{1}=15\\;[\\frac{rad}{sec}]$ ] .",
    "the learning cost function is chosen as @xmath180 with @xmath181 for this example .",
    "moreover , @xmath182 define the errors between the true model solution and the pod rom solution for temperature and velocity , respectively .",
    "+ we first show for comparison purposes the true solutions , the high fidelity ( ` truth ' ) solutions obtained via the fem .",
    "equation ( [ burgers2_chap3 ] ) is discretized in space with piecewise linear basis functions with 100 elements , and subsequently solved with ` ode45 ` in ` matlab ` .",
    "the true solutions are reported in figure [ burgersstab_truesol_test1_chap3 ] .",
    "we then report in figure [ burgersstab_lfromsol_test1_chap3 ] , the solutions of the pod rom - g ( without learning ) .",
    "we can see clearly in these figures that the pod rom - g solutions are not as smooth as the true solutions , particularly the velocity profile is very irregular , and the goal of the closure model tuning is to smoothen both profiles , as much as the closure model allows . for a clearer evaluation",
    ", we also report the errors between the true solutions and the pod rom - g solutions , in figure [ burgersstab_nome_test1_chap3 ] .",
    "next , we apply the es - based closure model auto - tuning algorithm of lemma [ pdestab_lemma1_chap3 ] , and report the associated cost function in figure [ burgersstab_q_test1lin_chap3 ] .",
    "we can clearly see a decrease of the learning cost function over the iterations , which means an improvement of the rom prediction performance .",
    "the corresponding profile of the linear closure model amplitude over learning iterations is displayed in figure [ burgersstab_hatnue_test1lin_chap3 ] , which shows that it reaches an optimal value around @xmath183 .",
    "as learning iterations proceed beyond the first @xmath184 displayed here , the values remain stable around the same points . thus , for clarity of presentation , only a zoom around the first @xmath184 iterations is displayed . finally , the corresponding rom solutions are shown in figure [ burgersstab_lromsol_test1lin_chap3 ] . for clearer evaluation of the optimal closure model stabilizing effect on the rom , we also display in figure [ burgersstab_le_test1lin_chap3 ] the errors between the exact pde solutions and the stabilized rom solutions .",
    "we report here the case related to lemma [ pdestab_lemma2_chap3 ] , where we test the auto - tuning results of es on the combination of a linear constant viscosity closure model and a nonlinear closure model .",
    "we apply lemma [ pdestab_lemma2_chap3 ] , with the heisenberg linear closure model given by ( [ podromh_chap3 ] ) .",
    "the two closure model amplitudes @xmath72 and @xmath185 are tuned using the discrete version of the es algorithm ( [ pdestab_mes_2_chap3 ] ) , given by @xmath186 where @xmath131 , and @xmath187 is the number of the learning iterations .",
    "we use the parameters values : @xmath188,\\;\\omega_{1}=10\\ ; [ \\frac{rad}{sec}],\\;a_{2}=6\\times 10^{-6}\\;[-],\\;\\omega_{2}=15\\;[\\frac{rad}{sec}]$ ] , and a similar cost function as in test 1 .",
    "we show the profile of the learning cost function over the learning iterations in figure [ burgersstab_q_test1_chap3 ] .",
    "we can see a quick decrease of the cost function within the first @xmath189 iterations .",
    "this means that the es manages to improve the overall solutions of the pod rom very fast .",
    "the associated profiles for the two closure models amplitudes learned values @xmath190 and @xmath191 are reported in figures [ burgersstab_hatnue_test1_chap3 ] , and [ burgersstab_hatnunl_test1_chap3 ] .",
    "we can see that even though the cost function value drops quickly , the es algorithm continues to fine - tune the values of the parameters @xmath190 , @xmath191 over the iterations , and they reach eventually reach an optimal values of @xmath192 , and @xmath193 .",
    "we also show the effect of the learning on the pod rom solutions in figure [ burgersstab_lromsol_test1_chap3 ] , and figure [ burgersstab_le_test1_chap3 ] , which by comparison with figures [ burgersstab_lfromsol_test1_chap3 ] , and [ burgersstab_nome_test1_chap3 ] , show a clear improvement of the pod rom solutions with the es tuning of the closure models amplitudes .",
    "we also notice an improvement of the rom solutions compared to the linear closure model stabilization test results of figure [ burgersstab_le_test1lin_chap3 ] .",
    "specifically , we see that the temperature error in the case of the closure model of lemma [ pdestab_lemma2_chap3 ] , is smaller than the one obtained with the linear closure model of lemma [ pdestab_lemma1_chap3 ] .",
    "we do not currently have a formal proof .",
    "however , we believe that the improvement is due to the fact that in the closure model of lemma [ pdestab_lemma2_chap3 ] , we are using both the stabilizing effect of the linear viscosity closure model term and the stabilizing effect of the nonlinear closure model term .",
    "in this work , we explore the problem of stabilization of reduced order models for partial differential equations , focusing on the closure model - based rom stabilization approach . it is well known that tuning the closure models gains is an important part in obtaining good stabilizing performances .",
    "thus , we propose a learning es - based auto - tuning method to optimally tune the gains of linear and nonlinear closure models , and achieve an optimal stabilization of the rom .",
    "we validate our using the coupled burgers equation as an example , demonstrating significant gains in error performance .",
    "the results are encouraging .",
    "we defer to future publications verifying our approach on more challenging higher dimensional cases .",
    "our results also raise the prospect of developing new nonlinear closure models , together with their auto - tuning algorithms using extremum seeking , as well as other machine learning techniques ."
  ],
  "abstract_text": [
    "<S> we present results on stabilization for reduced order models ( rom ) of partial differential equations using learning . </S>",
    "<S> stabilization is achieved via closure models for roms , where we use a model - free extremum seeking ( es ) dither - based algorithm to learn the best closure models parameters , for optimal rom stabilization . </S>",
    "<S> we first propose to auto - tune linear closure models using es , and then extend the results to a closure model combining linear and nonlinear terms , for better stabilization performance . </S>",
    "<S> the coupled burgers equation is employed as a test - bed for the proposed tuning method . </S>"
  ]
}