{
  "article_text": [
    "spreadsheet systems are the software system of choice for many non - professional programmers , often called end - user programmers  @xcite , like for example , teachers , accountants , secretaries , engineers , managers , etc .",
    "in the last century such end users would develop their spreadsheets individually in their own desktops , and sharing and reuse was not the usual procedure .",
    "the recent advent of powerful mobile devices , and , as a consequence , the availability of powerful cloud - based spreadsheet systems ( like , for example , google drive ) , has dramatically changed this situation .",
    "nowadays , spreadsheets are complex software systems , developed and maintained by many ( end ) users .    very much like in the development of other software systems , different developers ( end users in this case )",
    "are concerned with different aspects of the functionality of the system . however , while modern programming languages offer modularity mechanisms providing powerful abstractions to develop software collaboratively , spreadsheet systems offer no such support to their users . as a result",
    ", a spreadsheet tends to evolve into a single software artifact where all business logic from all different users is defined ! in such a collaborative setting if a new user needs to express a new business rule on the spreadsheet data , he / she has to do it by intrusively adding formulas to the existing spreadsheet .",
    "the programming language community developed advanced modularity mechanisms to avoid this problem in regular programming languages . in that sense , aspect - oriented programming ( aop ) is a popular and advanced technique that enables the modular implementation of the so - called crosscutting concerns .",
    "the crosscutting structure tends to appear tangled and scatted across several artifacts of a software system . while implementing such crosscutting concerns",
    ", the crosscutting structure can appear in common software development concerns , such as distribution and persistence  @xcite , error handling  @xcite , certain design patterns  @xcite , tracing  @xcite , or design by contract  @xcite .    in this paper",
    "we introduce the concept of aop to spreadsheets .",
    "we start by introducing a running example in section  [ sec : motivation ] .",
    "our first contribution is presented in section  [ sec : architecture ] where we adapt the aop concept to spreadsheets .",
    "for instance , a key feature of a common aspect - oriented language is the possibility to add advice before , after or around a join point . since spreadsheetsare two - dimensional , aop features like advising need to be adapted in order to be applied to spreadsheets .",
    "the second contribution we do in this work is the design of a new language to implement aop for spreadsheets .",
    "this language is presented in section  [ sec : language ] .",
    "an overview of the architecture of the system is presented in section  [ sec : weaver ] .",
    "finally , section  [ sec : related ] discusses related work , and section  [ sec : conclusion ] presents our conclusions .",
    "in this section we present an example of a popular setting to use spreadsheets : manage the students marks in a course .",
    "such a spreadsheet is shown in fig .",
    "[ fig : example ] .        in this simple spreadsheet , the final mark of a student is the average of three evaluation items : two exams and one essay .",
    "thus , this mark is obtained by the formula ` = average(b2:d2 ) ` ( for the student in line  2 ) .",
    "let us consider now a real scenario where three different users share , access , and update this spreadsheet : a _ teaching assistant _ , that mainly structures the spreadsheet and compiles the different marks , the _ teaching coordinator _ who has to validate the spreadsheet , decide on borderline cases , and send the final marks to the academic services , and finally , the _ erasmus coordinator _ who has to adapt the marks of erasmus students to the ects system .    because spreadsheets offer no modularity mechanisms , a typical spreadsheet development environment allows a spreadsheet to quickly evolve into a more complex one .",
    "that is , each of the users adds / updates data and formulas in order to express the ( crosscutting ) logic they need . in the following ,",
    "we show the spreadsheet after the teaching and erasmus coordinator update it .",
    "the data edited by one user can be seen as intrusive code for the others .",
    "for example , the teaching coordinator and its assistant are not concerned with the ects system , although this concern is now part of their spreadsheet .",
    "let us analyze the teaching coordinator role in more detail . because he decides on borderline cases",
    ", he decided to approve only one of such cases ( student in line  3 ) .",
    "instead of changing that particular final mark formula , and as often occurs in reality , he just replaces this formula by the constant ` 5.0 ` .",
    "although the result of such an operation is a correct spreadsheet , this action has several problems .",
    "first , there is no documentation on how borderline cases have been decided ( the threshold is not known ) .",
    "second , the original spreadsheet data is lost , and it may be difficult to recover it ( for example , if other borderline students ask for explanations ) .",
    "this is the natural setting to apply aop . in this style of programming users",
    "do not intrusively modify the original program ( a spreadsheet in our case ) , but instead , a new software fragment is defined in order to specify the program transformations needed to express such new concern .",
    "these software fragments are called _",
    "aspects_. then , a specific aop mechanism , called _ weaver _ , given the original program and the aspect(s ) , weaves them into a coherent executable software program .",
    "we present in listing  [ lst : borderline ] our first spreadsheet aspect , the one that specifies the coordinator concerns on borderline cases .",
    ".... aspect borderlinecase finalmark : select sheet{*}.column{*}.cell { * } around finalmark {      # { cell.result > = 4.8 & & cell.result < 5 ? 5 : cell.value }    } when {      cell.column[0].value = \" final mark \"    } end ....    an aspect - oriented language has three main parts .",
    "first it is necessary to select the _ join points _ of interest by means of pointcut declarations . in the example",
    ", the pointcut ` finalmark ` selects any cell within any worksheet .",
    "this is done by the _ select _ command in our language .",
    "then , the _ around _ advice declaration defines the actions ( transformations in our case ) to be applied .",
    "hence , it specifies when the _ result _ of evaluating a formula is greater than of equal to ` 4.8 ` , and if it is , the cell is replaced by the constant ` 5.0 ` . to access the result of the computation of a cell , that is , the result of the formula in the cell",
    ", we use ` cell.result ` .",
    "this accesses a cell , and after that , its computed _ result_. the _ when _ statement specifies when the action is applied ( in this case to all columns labeled ` final mark ` ) .",
    "this aspect clearly and non - intrusively defines the crosscutting rule used to decide on borderline cases : all students with marks greater than or equal to ` 4.8 ` are approved in the course .",
    "similarly , the erasmus coordinator can define an aspect where the rules to define the ects marks are expressed .",
    "this aspect is presented in listing  [ lst : ectsmark ] .",
    ".... aspect addectsmark finalmarks : select sheet{*}.column{*}.cell { * }    right finalmarks {      = if(#{cell.name}<=10 & & # { cell.name}>=9.5        , \" a \"              , if(#{cell.name}<9.5 & & # { cell.name}>=8.5          , \" b \"                  , if(#{cell.name}<8.5 & & # { cell.name}>=6.5            , \" c \"                      , if(#{cell.name}<6.5 & & # { cell.name}>=5.5              , \" d \"                          , if(#{cell.name}<5.5 & & # { cell.name}>=5                , \" e \"                , \" f \" ) ) ) ) )      } when {      column[0].value = = \" final mark \"        & & cell.row < > 0    }    right finalmarks {      ects mark    } when {      column[0].value = \" final mark \"        & & cell.row = 0    } end ....    in this aspect , we use ` cell.name ` to access the cell address ( for instance `` e4 '' ) .",
    "thus , when the ` if ` formula is placed in the corresponding cells , the correct references will be calculated and inserted in the formula replacing the use of ` cell.name ` .",
    "an aspect weaver can then weave this aspects into the original spreadsheet individually , or by composing them . actually , fig .  [",
    "fig : example - round - ects ] shows the result of weaving the aspect _ addectsmark _ after the aspect _",
    "borderlinecase_. thus , aspects can be combined .",
    "it should also be noticed that such a spreadsheet based weaver has to dynamically weave aspects since for some aspects ( _ borderlinecase _ ) only after computing formulas , aspects can be weaved .",
    "indeed , it is necessary to execute the spreadsheet to get the results of formulas , for instance , when the ` cell.result ` operator is used .",
    "we have just presented two aspects of our aop spreadsheet language and briefly explained how aspects are weaved into a spreadsheet system .",
    "next sections present in detail the design and implementation of this language and weaver .",
    "in this section , we discuss how aop concepts can be applied to spreadsheets .",
    "specific examples are described in section  [ sec : language ] .      in order to apply aop to a language",
    ", it is necessary to identify the _ join point",
    "_ model that the new aspect language supports .",
    "a join point is a well - defined point in the program that is specified by a _",
    "pointcut _ ,",
    "that is , an expression to match specific elements within the language . in our case , these elements are set to be the main elements of the spreadsheet , where users will want to perform operations on , for instance , use an alternate worksheet for testing or add more cells for debugging . for spreadsheets ,",
    "we define the following join points of interest :    * worksheets ; * ranges ; and , * cells .    with these join points",
    "the spreadsheet is accessible from aspects , hence users can separate concerns at different levels :        when a join point is instantiated , it is possible to perform an action using advice .",
    "advice are additional behavior that one wants for the underlying program , that can be new worksheets , ranges of cells , or single cells .",
    "this allows to separate the business logic of the spreadsheet into several concerns when developing the spreadsheet and then join everything in order to achieve the wanted application .",
    "a spreadsheet file is composed of a set of worksheets , each of which containing the cells with the data and formulas .",
    "worksheets are the top - level artifacts in a spreadsheet .    as a join point , a worksheet ( see fig .  [ fig : sheets ] ) can be modified by the standard aop advice in the following manner :    * * before *  insert a worksheet before the current join point ; * * after *  insert a worksheet after the current join point ; * * around *  insert a worksheet before and/or after the current joint point and/or define an alternative worksheet for the current join point .        as an example , consider fig .",
    "[ fig : sheets ] with ` sheet2 ` as the join point .",
    "a _ before _",
    "advice for this join point results in a new worksheet between the worksheets ` sheet1 ` and ` sheet2 ` . on the other hand ,",
    "if we consider an _ after _ advice , the resulting worksheet is between worksheets ` sheet2 ` and ` sheet3 ` .    to specify a worksheet , two options are available : either defining the cells for the new worksheet , or referencing a worksheet to be duplicated .",
    "cells are the finest grained join points possible in the spreadsheets world .",
    "unlike common programming languages , they are inserted in a two - dimensional plan .",
    "thus , the usual _ before _ and _ after _ advice declarations are not completely adequate since ambiguities may arise about which of the two dimensions ( vertical or horizontal ) should be used . to overcome this issue ,",
    "each kind of advice declaration is separated in two for each dimension in the plane , resulting in the following :    [ cols= \" < , < , < \" , ]     the advice that can be defined for cell join points is :    * * left *  add a cell , or range of cells , to the left of the current join point ; * * above *  add a cell , or range of cells , above the current join point ; * * right *  add a cell , or range of cells , to the right of the current join point ; * * below *  add a cell , or range of cells , below the current join point ; * * around *  define an alternative cell for the current join point .",
    "a cell is specified just by stating its contents .",
    "a range of cells is specified by defining the cells that it contains .",
    "a range is a set of cells contained in a worksheet .",
    "as it regularly happens in spreadsheets , our setting only handles rectangular ranges , that is , the range must be a rectangle and all the cells in that rectangle must part of the range .",
    "advice declaration for ranges is similar to the ones for cells , but special care must be taken to match range sizes when adding new cells , or ranges before or after it .",
    "thus , we have the following possible advice declarations :    * * left *  add a range of cells , to the left of the current join point ; * * above *  add a range of cells , above the current join point ; * * right *  add a range of cells , to the right of the current join point ; * * below *  add a range of cells , below the current join point ; * * around *  define an alternative range for the current join point .",
    "in this section we present our language for aspects for spreadsheets . this language is based on existing ones for common purposes programming languages , and implements the vision we described in section  [ sec : architecture ] .",
    "the proposed language allows to specify aspects defining its pointcuts and advice . for each component of the aspects to be written by the user",
    "we present next the corresponding grammar .",
    "this grammar is the artifact used to validate , though a compiler , the correctness of the aspects written by the users .",
    "we start by introducing the grammar for pointcuts .",
    "pointcuts are defined by an expression pattern , which is specified by the following grammar :    < join_point > : : = < jp_name > ` : ' ` select ' <",
    "pexpr >    where _",
    "@xmath0pexpr@xmath1 _ is a pattern expression .",
    "the expression is used to define the kind of join point to be selected : _ sheet _ , _ range _ , or _",
    "cell_.    the allowed expressions in join points are instances of the following productions :    < pexpr > : : = < psheet > ` . '",
    "< prange > ( ` . '",
    "< prange > ) ? ` . '",
    "< pcell >    < psheet > : : = ` sheet ' `  < psheetexpr >  '",
    "< psheetexpr > : : = ` name ' < bcomp > < string > ` number ' < bcomp > < integer > ` * '    < prange > : : = ` range ' `  < prangeexpr >  ' ` column ' `  < prangeexpr >  ' ` row ' `  < prangeexpr >  '",
    "< prangeexpr > : : = ` name ' < bcomp > < string > ` * '    <",
    "pcell > : : = ` cell ' `  < pcellexpr >  '",
    "< pcellexpr > : : = ` name ' < bcomp > < string > ` match ' <",
    "bcomp > < string > ` * '    < bcomp > : : = ` = = ' |",
    "` < ' | ` < = ' | ` > ' | ` > = ' | ` < > '    the pattern expression _",
    "@xmath0pexpr@xmath1 _ allows to select worksheets _",
    "@xmath0sheet@xmath1 _ , ranges _",
    "@xmath0range@xmath1 _ , or cells _ @xmath0cell@xmath1_.    when specifying a worksheet as a join point , it is possible to select a worksheet relative to a given name , to a worksheet index , or to select all worksheets .    for ranges , there are three kinds that can be selected : a column range ( ` column ` ) with a width of one cell , a row range ( ` row ` ) with a height of one cell , or a range with any rectangular shape ( ` range ` ) .    for cells ,",
    "it is possible to specify its address ( ` name ` ) , or a pattern - match expression ( ` match ` ) .",
    "when no specific worksheet , range or cell is necessary , the wildcard symbol can be used .    with this",
    ", we can select , for instance , the second worksheet    ` worksheet_jp : select worksheet{number=2 } `    or a rectangular range of 3 columns by 2 rows starting at cell ` a2 ` in any worksheet :    ` range_jp : select worksheet{*}.range{name=\"a2:c3 \" } `    or the cells in the first row of any worksheet :    ` cell_jp : select worksheet{*}.range{row=1}.cell { * } `    depending on the kind of join point selected , different artifacts are made available to work with within the advice . for worksheets , we can use the variable ` worksheet ` , and then one of the attributes : ` name ` or ` number ` . for ranges , depending on its kind , the available variable can be : ` range ` , ` column ` , or ` row ` ; they have the attribute ` name ` .",
    "moreover , since ranges are sets of cells , indexation can be used , for instance , to select the first row of a column , one can write ` column[0 ] ` . for cells",
    ", we have the variable ` cell ` which has the attribute ` name ` ( its cell reference ) .",
    "advice are the actions to apply to the join points .",
    "they are defined by the following grammar :    < advice > : : = @xmath2 < advice_position > < jp_name > `",
    " < code >  '",
    "< advice_condition >    < advice_position > : : = ` left ' |  ` above ' |  ` right ' |  ` below ' |  ` around '    < advice_condition > : : = @xmath3    where _",
    "@xmath0code@xmath1 _ is a cell or a list of cells and respective contents :    < code > : : = < string > | < celllist >    < celllist > : : = < cellref > ` = ' < string > @xmath4    the contents of the cell _ @xmath0string@xmath1 _ can be defined using interpolation of values made available in the context of the advice ( for instance , join point contents ) using interpolation .",
    "for example , to add a row which evaluates the total of a column ( for instance , the join point is a column range ) where the join point is named _ mycolumn _ :    ` below mycolumn { = sum(#{range.name } ) } `    in the above example , interpolation is used to introduce a value that is available in the join point , but is not accessible from common spreadsheet formulas .",
    "if the column range is ` c1:c20 ` , then the formula would be ` = sum(c1:c20 ) ` .    note",
    "that the order by which the advice are applied is important .",
    "they are applied according to their precedence which is defined by the order they are defined . in the case of ` before ` the ones defined first are the ones with more precedence .",
    "thus , the ones defined earlier are applied first .",
    "for the ` after ` it is the other way around , that is , although the ones declared first are the ones with more priority , they are executed last .",
    "this is the common behavior of aspects for other programming languages .",
    "advice can be applied conditionally , that is , when a specified criterion is met .",
    "this is specified with a boolean expression as defined by the following grammar :    < bexpr > : : = ` ! '",
    "< bexpr > ( ` & & ' | ` || ' ) < bexpr > < bcomp > < expr >    < expression > : : = < bexpr > |  < var > |  < string > |  < number > |  < cellref >      an aspect is composed of the definition of the pointcuts and the advice to apply to them , as defined by the following grammar :    < aspect > : : = ` aspect ' < string > + <",
    "join_point>+ < advice>+ + ` end '",
    "in this section we present our architectural model for aspect spreadsheets .",
    "the aspects are defined using the language presented in section  [ sec : language ] , and together with the spreadsheet , they are interpreted by the _",
    "weaver_. in this context , the spreadsheetis only complete when considered together with the aspects .",
    "some aspects can be handled statically , that is , without executing the spreadsheet .",
    "for instance , the example shown is listing  [ lst : ectsmark ] does not need to execute the spreadsheetto know what to do .    however , some aspects require the execution of the program , in our case , of the spreadsheet(formulas ) .",
    "this is the case illustrate in listing  [ lst : borderline ] where it is necessary to _ compute _ the student grade to decide if the final grade is changed or not . in that case",
    "we used the operator ` cell.result ` , which requires to evaluate the formula of the underlying cell to obtain its result .",
    "thus , the weaver must be integrated with a spreadsheetexecution engine .",
    "indeed we intend to build the weaver inside excel itself , so it can reuse its recalculation mechanism .    in these cases ,",
    "the spreadsheetis kept untouched , but since now the spreadsheet is only complete when considered with the aspects defined , the values it shows may change .",
    "if the user wants to see the original spreadsheetthen , it is only necessary to deactivate the aspects .",
    "[ fig : arc ] illustrates the integration of our weaver with a spreadsheet system to create an aspect - oriented spreadsheetsystem .",
    "aspect - oriented programming has been applied to several programming languages , for instance , java  @xcite , c++  @xcite , or matlab  @xcite , targeting specific characteristics of each language in order to improve them .",
    "some of these applications contributed to shape the use of aspects , and introduced new concepts to this paradigm .",
    "java was one of the first languages to be exposed to aspects through a language dubbed aspectj  @xcite .",
    "this language is similar to java so it feels familiar to java users .",
    "it provides a dynamic join point model , where some advice are applied at compile time , but others are applied only during run time when the complete information about the execution is available . the nature of spreadsheets , where both data and computation are at the same level , imposes a dynamic join point model in order to have access to run - time values .",
    "aop was also used to support development of embedded systems .",
    "the lara language  @xcite was purposely designed with this goal , but has a wider range of applications .",
    "since it can target several languages , we inspired ourselves on it as the basis for the specification of aspects for spreadsheets .",
    "in the context of spreasheets , there are several works presenting techniques to transform spreadsheets by using spreadsheet specific transformation languages @xcite , and querying languages @xcite .",
    "moreover , such transformations can be refactorings to remove spreadsheet smells  @xcite and thus improve their usage and reduce possible error entry points .",
    "bumblebee  @xcite is a microsoft excel add - in mainly for performing refactorings to remove smells , but can also perform other kinds of transformations .",
    "it finds cells where it can apply a previously defined set of transformations , lets the user select the transformation to apply , and then applies the transformation to a selected range , to the entire worksheet , or to the entire file .",
    "a limitation is that bumblebee only supports intra - formula transformations .",
    "our language uses the bumblebee s transformation language to support cell value transformations .",
    "refbook  @xcite is another tool to perform refactorings to remove spreadsheet smells .",
    "it implements a set of seven refactorings in a microsoft excel add - in allowing users to perform refactorings when working with their spreadsheets .",
    "our approach can also be used to perform these refactorings .",
    "more generic transformations for spreadsheets , introduced by end - users needs , can be performed using program synthesis .",
    "this technique added the ability to transform strings of text  @xcite , or tables of data  @xcite from user - supplied examples , providing a familiar way to solve common tasks when dealing with spreadsheets .",
    "another kind of transformation , targeting spreadsheet testing , is mutation  @xcite .",
    "the goal is to perform mutations in the spreadsheet , that is , small modifications , in order to analyze a test set for the spreadsheet being tested . using our aspect system , mutation is also possible , by using the bumblebee transformation language to specify cell mutations .",
    "in @xcite we presented techniques to infer the business logic of spreadsheet data .",
    "such techniques restructure the spreadsheet data into different ( relational ) tables .",
    "such tables can be viewed as aspects of the business logic / spreadsheet data .",
    "thus , this approach may be used to infer aspects in spreadsheets and to evolve a legacy spreadsheet into an aspect - oriented one .",
    "this paper proposes the use of aspect - oriented programming for spreadsheets .",
    "we have designed an aspect language that considers spreadsheet peculiarities , and a dynamic weaver that is embedded in the evaluation mechanism of a spreadsheet system .",
    "although aop provides a powerful modular approach that is particularly suitable to be used in software that is shared and being collaboratively developed , our work opens some important questions that we intend to answer in future work by conducting empirical studies , namely :    * are end users able to understand the abstractions provided by aop and to use it in practice ? + this is not only related to our proposed language as it is a more general question .",
    "nevertheless , we need to answer it so we can understand how to better make our aop language available for user .",
    "this is specially important when dealing with end users .",
    "* does aop improves end - users productivity ?",
    "+ we have shown that some of the model - driven approaches we introduced in the past can do that .",
    "we will conduct similar studies to evaluate this new proposal .",
    "* is the textual definition of the aop language adequate or should we use a more spreadsheet - like one ?",
    "+ when dealing with more advanced users , it is not always the case they prefer visual languages  @xcite .",
    "however , for end users this is probably the case .",
    "we will extend our work with a visual language to allow end users to define aspects in a more friendly way .",
    "this work is financed by the fct ",
    "fundao para a cincia e a tecnologia ( portuguese foundation for science and technology ) within project uid / eea/50014/2013 .",
    "this work has also been partially funded by flad / nsf through a project grant ( ref .",
    "233/2014 ) .",
    "the last author is supported by capes through a _",
    "programa professor visitante do exterior ( pve ) _ grant ( ref .",
    "15075133 ) .",
    "s.  soares , e.  laureano , and p.  borba , `` implementing distribution and persistence aspects with aspectj , '' in _ proceedings of the 17th acm sigplan conference on object - oriented programming , systems , languages , and applications _",
    "oopsla 02.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2002 , pp . 174190 .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/582419.582437    m.  lippert and c.  v. lopes , `` a study on exception detection and handling using aspect - oriented programming , '' in _ proceedings of the 22nd international conference on software engineering _ ,",
    "icse 00.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2000 , pp",
    ". 418427 .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/337180.337229    f.  castor , n.  cacho , e.  figueiredo , a.  garcia , c.  m.  f. rubira , j.  s. de  amorim , and h.  o. da  silva , `` on the modularization and reuse of exception handling with aspects , '' _ softw .",
    "_ , vol .",
    "39 , no .",
    "13771417 , dec . 2009 .",
    "[ online ] .",
    "available : http://dx.doi.org/10.1002/spe.v39:17    j.  hannemann and g.  kiczales , `` design pattern implementation in java and aspectj , '' in _ proceedings of the 17th acm sigplan conference on object - oriented programming , systems , languages , and applications _ , ser .",
    "oopsla 02.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2002 , pp .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/582419.582436    g.  kiczales , e.  hilsdale , j.  hugunin , m.  kersten , j.  palm , and w.  griswold , `` getting started with aspectj , '' _ commun .",
    "44 , no .",
    "10 , pp . 5965 , oct .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/383845.383858    h.  reblo , g.  t. leavens , m.  bagherzadeh , h.  rajan , r.  lima , d.  m. zimmerman , m.  cornlio , and t.  thm , `` aspectjml : modular specification and runtime checking for crosscutting contracts , '' in _ proceedings of the 13th international conference on modularity _ , ser .",
    "modularity 14.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2014 , pp . 157168 .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/2577080.2577084    h.  reblo , r.  lima , and g.  t. leavens , `` modular contracts with procedures , annotations , pointcuts and advice , '' in _",
    "sblp 11 : proceedings of the 2011 brazilian symposium on programming languages _ ,",
    "g.  kiczales , e.  hilsdale , j.  hugunin , m.  kersten , j.  palm , and w.  g. griswold , `` an overview of aspectj , '' in _",
    "ecoop 2001object - oriented programming_.1em plus 0.5em minus 0.4emspringer , 2001 , pp .",
    "327354 .",
    "o.  spinczyk , a.  gal , and w.  schrder - preikschat , `` aspectc++ : an aspect - oriented extension to the c++ programming language , '' in _ proceedings of the fortieth international conference on tools pacific : objects for internet , mobile and embedded applications _ , ser .",
    "crpit 02.1em plus 0.5em minus 0.4emdarlinghurst , australia , australia : australian computer society , inc . , 2002 , pp .",
    "[ online ] .",
    "available : http://dl.acm.org/citation.cfm?id=564092.564100    j.  m. cardoso , p.  diniz , m.  p. monteiro , j.  m. fernandes , and j.  saraiva , `` a domain - specific aspect language for transforming matlab programs , '' in _ domain - specific aspect language workshop ( dsal2010 ) , part of aosd _ , 2010 , pp .",
    "1519 .    t.  aslam , j.  doherty , a.  dubrau , and l.  hendren , `` aspectmatlab : an aspect - oriented scientific programming language , '' in _ proceedings of the 9th international conference on aspect - oriented software development _",
    "aosd 10.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2010 , pp . 181192 . [ online ] .",
    "available : http://doi.acm.org/10.1145/1739230.1739252    j.  m. cardoso , t.  carvalho , j.  g. coutinho , w.  luk , r.  nobre , p.  diniz , and z.  petrov , `` lara : an aspect - oriented programming language for embedded systems , '' in _ proceedings of the 11th annual international conference on aspect - oriented software development_.1em plus 0.5em minus 0.4emacm , 2012 , pp .",
    "179 190 .",
    "f.  hermans and d.  dig , `` bumblebee : a refactoring environment for spreadsheet formulas , '' in _ proceedings of the 22nd acm sigsoft international symposium on foundations of software engineering _ , ser .",
    "fse 2014.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2014 , pp . 747750 .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/2635868.2661673      o.  belo , j.  cunha , j.  p. fernandes , j.  mendes , r.  pereira , and j.  saraiva , `` querysheet : a bidirectional query environment for model - driven spreadsheets , '' in _ proceedings of the 2013 ieee symposium on visual languages and human - centric computing ( vl / hcc)_.1em plus 0.5em minus 0.4emieee , 2013 , pp . 199200 .",
    "j.  cunha , j.  p. fernandes , j.  mendes , r.  pereira , and j.  saraiva , `` querying model - driven spreadsheets , '' in _ proceedings of the 2013 ieee symposium on visual languages and human - centric computing ( vl / hcc)_.1em plus 0.5em minus 0.4emieee , 2013 , pp .",
    "8386 .",
    "j.  cunha , j.  p. fernandes , h.  ribeiro , and j.  saraiva , `` towards a catalog of spreadsheet smells , '' in _ proceedings of the 12th international conference on computational science and its applications - volume part iv _ , ser .",
    "iccsa12.1em plus 0.5em minus 0.4emberlin , heidelberg : springer - verlag , 2012 , pp . 202216 .",
    "[ online ] .",
    "available : http://dx.doi.org/10.1007/978-3-642-31128-4_15    j.  cunha , j.  p. fernandes , p.  martins , j.  mendes , and j.  saraiva , `` smellsheet detective : a tool for detecting bad smells in spreadsheets . '' in _",
    "vl / hcc _ , m.  erwig , g.  stapleton , and g.  costagliola , eds.1em plus 0.5em minus 0.4emieee , 2012 , pp . 243244 . [ online ] .",
    "available : http://dblp.uni-trier.de/db/conf/vl/vlhcc2012.html#cunhafmms12    j.  cunha , j.  fernandes , p.  martins , r.  pereira , and j.  saraiva , `` refactoring meets model - driven spreadsheet evolution , '' in _",
    "9th international conference on the quality of information and communications technology ( quatic ) _ , sept 2014 , pp .",
    "196201 .",
    "s.  gulwani , `` automating string processing in spreadsheets using input - output examples , '' in _ proceedings of the 38th annual acm sigplan - sigact symposium on principles of programming languages _ ,",
    "popl 11.1em plus 0.5em minus 0.4emnew york , ny ,",
    "usa : acm , 2011 , pp . 317330 .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/1926385.1926423    w.  r. harris and s.  gulwani , `` spreadsheet table transformations from examples , '' in _ proceedings of the 32nd acm sigplan conference on programming language design and implementation _ , ser .",
    "pldi 11.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2011 , pp",
    ". 317328 .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/1993498.1993536      j.  cunha , m.  erwig , and j.  saraiva , `` automatically inferring classsheet models from spreadsheets , '' in _ proceedings of the 2010 ieee symposium on visual languages and human - centric computing ( vl / hcc)_.1em plus 0.5em minus 0.4emieee cs , 2010 , pp ."
  ],
  "abstract_text": [
    "<S> a spreadsheet usually starts as a simple and single - user software artifact , but , as frequent as in other software systems , quickly evolves into a complex system developed by many actors . </S>",
    "<S> often , different users work on different aspects of the same spreadsheet : while a secretary may be only involved in adding plain data to the spreadsheet , an accountant may define new business rules , while an engineer may need to adapt the spreadsheet content so it can be used by other software systems . </S>",
    "<S> unfortunately , spreadsheet systems do not offer modular mechanisms , and as a consequence , some of the previous tasks may be defined by adding intrusive `` code '' to the spreadsheet .    in this paper </S>",
    "<S> we go through the design and implementation of an aspect - oriented language for spreadsheets so that users can work on different aspects of a spreadsheet in a modular way . </S>",
    "<S> for example , aspects can be defined in order to introduce new business rules to an existing spreadsheet , or to manipulate the spreadsheet data to be ported to another system . </S>",
    "<S> aspects are defined as aspect - oriented program specifications that are dynamically woven into the underlying spreadsheet by an aspect weaver . in this aspect - oriented style of spreadsheet development , </S>",
    "<S> different users develop , or reuse , aspects without adding intrusive code to the original spreadsheet . </S>",
    "<S> such code is added / executed by the spreadsheet weaving mechanism proposed in this paper . </S>"
  ]
}