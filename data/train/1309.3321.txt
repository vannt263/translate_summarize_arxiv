{
  "article_text": [
    "graphs are used to model infrastructure networks , the world wide web , computer traffic , molecular interactions , ecological systems , epidemics , citations , and social interactions , among others . despite the differences in the motivating applications ,",
    "some topological structures have emerged to be important across all these domains . in particular , the _ triangle _ is a manifestation of homophily ( people become friends with those similar to themselves ) and transitivity ( friends of friends become friends ) .",
    "the triangle structure of a graph is commonly used in the social sciences for positing various theses on behavior  @xcite .",
    "triangles have also been used in graph mining applications such as spam detection and finding common topics on the www  @xcite .",
    "a new generative model , blocked two - level erds - rnyi ( bter ) @xcite , can capture triangle behavior in real - world graphs , but necessarily requires the degree - wise clustering coefficients as input .",
    "relationships among degrees of triangle vertices can also be used as a descriptor of the underlying graph  @xcite .    in this paper",
    ", we study the idea of _ wedge sampling _ , i.e. , choosing random wedges ( from a uniform distribution over all wedges ) to compute various triadic measures on large - scale graphs .",
    "we provide precise probabilistic error bounds where the accuracy depends on the number of random samples .",
    "the term _ wedge _ refers to a path of length 2 ; in ,  is a wedge _ centered _ at node 1 .",
    "a _ triangle _ is a cycle of length 3 ; in ,  is a triangle .",
    "we say a wedge is _ closed _ if its vertices form a triangle .",
    "observe that each triangle consists of three closed wedges .",
    "\\(1 ) at ( 0,0 ) [ nd ] 1 ; ( 2 ) at ( 3,2 ) [ nd ] 2 ; ( 3 ) at ( 3,-2 ) [ nd ] 3 ; ( 4 ) at ( 6,1 ) [ nd ] 4 ; ( 5 ) at ( 8,-2 ) [ nd ] 5 ; ( 6 ) at ( 9,0.2 ) [ nd ] 6 ; ( 7 ) at ( 9,2.5 ) [ nd ] 7 ; ( 1 ) to ( 2 ) ; ( 1 ) to ( 3 ) ; ( 2 ) to ( 4 ) ; ( 3 ) to ( 4 ) ; ( 3 ) to ( 5 ) ; ( 4 ) to ( 5 ) ; ( 4 ) to ( 6 ) ; ( 4 ) to ( 7 ) ; ( 6 ) to ( 7 ) ;      let @xmath0 , @xmath1 , @xmath2 , and @xmath3 denote the number of nodes , edges , wedges , and triangles , respectively , in a graph @xmath4 .",
    "a standard algorithmic task is to count ( or approximate ) @xmath3 .",
    "there are many other `` triadic '' measures associated with graphs as well .",
    "the following are classic quantities of interest , and are defined on _",
    "undirected graphs_. ( formal definitions are given in . )    transitivity or global clustering coefficient  @xcite : this is @xmath5 , and is the fraction of wedges that are closed ( i.e. , participate in a triangle ) . intuitively , it measures how often friends of friends are also friends , and it is the most common triadic measure .",
    "local clustering coefficient  @xcite : the clustering coefficient of vertex @xmath6 ( denoted by @xmath7 ) is the fraction of wedges centered at @xmath6 that are closed . the average of @xmath7 over all vertices @xmath6 is the _ local clustering coefficient _ , denoted by @xmath8 .",
    "degree - wise clustering coefficients : we let @xmath9 denote the average clustering coefficient of degree-@xmath10 vertices .",
    "in addition to degree distribution , many graphs are characterized by plotting the degree - wise clustering coefficients , i.e. , @xmath9 , versus @xmath10 .    in , the transitivity is @xmath11 .",
    "the clustering coefficients of the vertices are 0 , 0 , 1/3 , 1/5 , 1 , 1 , and 1 in order , and the local clustering coefficient is 0.5048 . in general , the most direct method to compute these metrics is an exact computation that finds all triangles . for degree - wise clustering coefficients ,",
    "no other method was previously known .    triangles and transitivity in directed graphs have also been the subject of recent work ( see e.g.  @xcite and references therein ) . in a directed graph , edges are ordered pairs of vertices of the form @xmath12 , indicating a link from node @xmath13 to node @xmath14 .",
    "when edges @xmath12 _ and _ @xmath15 exist , we say there is a _ reciprocal edge _ between @xmath13 and @xmath14 .",
    "if just one edge exists , then we say it is a _ one - way edge_. considering all possible combinations of reciprocal and one - way edges leads to 6 different wedges and 7 different triangles .      in this paper",
    ", we discuss the simple yet powerful technique of _ wedge sampling _ for counting triangles .",
    "wedge sampling is really an algorithmic template , since various algorithms can be obtained from the same basic idea .",
    "it can be used to estimate all the different triadic measures detailed above .",
    "the method also provides precise probabilistic error bounds where the accuracy depends on the number of random samples .",
    "the mathematical analysis of this method is a direct consequence of standard chernoff - hoeffding bounds .",
    "if we want an estimate for @xmath16 with error @xmath17 with probability 99.9% ( say ) , we need only 380 wedge samples .",
    "this estimate is _ independent of the size of the graph _",
    ", though the preprocessing required by our method is linear in the number of edges ( to obtain the degree distribution ) .",
    "we discovered older independent work by schank and wagner that proposes the same wedge sampling idea for estimating the global and local clustering coefficients @xcite .",
    "our work extends that in several directions , including several other uses for wedge sampling ( such as directed triangle counting , random triangle sampling , degree - wise clustering coefficients ) and much more extensive numerical results .",
    "this manuscript is an extended version of @xcite ; here we give more detailed experimental results and also show how wedge sampling applies to computing directed triangle counts .",
    "a detailed list of contributions follows .",
    "* computing the transitivity ( global clustering coefficient ) and local clustering coefficient : * we show how to use wedge sampling to approximate the global and local clustering coefficients : @xmath16 and @xmath8 .",
    "we compare these methods to the state of the art , showing significant improvement for large - scale graphs .    *",
    "computing degree - wise clustering coefficients : * the idea of wedge sampling can be extended for more detailed measurements of graphs .",
    "we show how to calculate the degree - wise clustering coefficients , @xmath18 for @xmath19 .",
    "the only other competing method that can compute @xmath18 is an exhaustive enumeration .",
    "we compare with the basic fast enumeration algorithm given by  @xcite ( which has been studied and reinvented by  @xcite ) .",
    "* computing triangles per degree : * wedge sampling can also be employed to sample random triangles , including the application of estimating the number of triangles containing one ( or more ) vertices of degree @xmath10 , denoted @xmath20 for @xmath19 .",
    "* counting directed triangles : * few methods have been considered for counting triangles in directed graphs .",
    "it is especially complicated because there are 7 types of triangles to consider .",
    "once again , the versatility of wedge sampling is used to develop a method for counting all types of directed triangles",
    ".      there has been significant work on enumeration of all triangles  @xcite .",
    "recent work by cohen  @xcite and suri and vassilvitskii  @xcite give mapreduce implementations of these algorithms .",
    "arifuzzaman et al .",
    "@xcite give a massively parallel algorithm for computing clustering coefficients .",
    "enumeration algorithms however , can be very expensive , since graphs even of moderate size ( millions of vertices ) can have an extremely large number of triangles ( see , e.g. , ) .",
    "eigenvalue / trace based methods have been used by tsourakakis  @xcite and avron  @xcite to compute estimates of the total and per - degree number of triangles .",
    "however , computing eigenvalues ( even just a few of them ) is a compute - intensive task and quickly becomes intractable on large graphs . in our experiment , even computing the largest eigenvalue was multiple orders of magnitude slower than full enumeration .",
    "most relevant to our work are sampling mechanisms .",
    "tsourakakis et al .",
    "@xcite started the use of sparsification methods , the most important of which is doulion  @xcite .",
    "this method sparsifies the graph by keeping each edge with probability @xmath21 ; counts the triangles in the sparsified graph ; and multiplies this count by @xmath22 to predict the number of triangles in the original graph . various theoretical analyses of this algorithm ( and its variants )",
    "have been proposed  @xcite .",
    "one of the main benefits of doulion is that it reduces large graphs to smaller ones that can be loaded into memory .",
    "however , the doulion estimate can suffer from high variance  @xcite .",
    "alternative sampling mechanisms have been proposed for streaming and semi - streaming algorithms @xcite . yet",
    ", all these fast sampling methods only estimate the number of triangles and give no information about other triadic measures .    in subsequent work by the authors of this paper , a hadoop implementation of these techniques is given in  @xcite , and a streaming version of the wedge sampling method is presented in  @xcite .",
    "we present the general method of wedge sampling for estimating clustering coefficients . in later sections ,",
    "we instantiate this for different algorithms .",
    "before we begin , we summarize the notation presented in in .",
    "lx|lx & number of vertices & @xmath23 & number of vertices of degree @xmath10 + @xmath1 & number of edges & @xmath24 & degree of vertex @xmath6 + @xmath25 & set of degree-@xmath10 vertices & @xmath2 & total number of wedges + @xmath26 & number of wedges centered at vertex @xmath6 & @xmath3 & total number of triangles + @xmath27 & number of triangles incident to vertex @xmath6 & @xmath28 & number of triangles incident to degree-@xmath10 vertices    @lx@ @xmath29 & transitivity + @xmath30 & clustering coefficient of vertex @xmath6 + @xmath31 & local clustering coefficient + @xmath32 & degree - wise clustering coefficient +    we say a wedge is _ closed _ if it is part of a triangle ; otherwise , the wedge is _",
    "open_. thus , in , -- is an open wedge , while -- is a closed wedge .",
    "the middle vertex of a wedge is called its _ center _ ,",
    "i.e. , wedges -- and -- are centered at .",
    "wedge sampling is best understood in terms of the following thought experiment .",
    "fix some distribution over wedges and let @xmath33 be a random wedge .",
    "let @xmath34 be the indicator random variable that is @xmath35 if @xmath33 is closed and @xmath36 otherwise .",
    "denote @xmath37 $ ] .",
    "suppose we wish to estimate @xmath38 .",
    "we simply generate @xmath39 independent random wedges @xmath40 , with associated random variables @xmath41 .",
    "define @xmath42 as our estimate .",
    "the chernoff - hoeffding bounds give guarantees on @xmath43 , as follows .",
    "[ thm : hoeffding ] let @xmath44 be independent random variables with @xmath45 for all @xmath46 . define @xmath47 .",
    "let @xmath48 $ ] .",
    "then for @xmath49 , we have @xmath50    hence , if we set @xmath51 , then @xmath52 < \\delta$ ] .",
    "in other words , for @xmath39 samples , with confidence at least @xmath53 , the error in our estimate is at most @xmath54 .    shows the number of samples needed as the error rate varies .",
    "we show three curves for different confidence levels . increasing the confidence has minimal impact on the number of samples .",
    "the number of samples is fairly low for error rates of 0.1 or 0.01 , but it increases with the inverse square of @xmath54 .",
    "we use the wedge sampling scheme to estimate the transitivity , @xmath16 . consider the uniform distribution on wedges .",
    "we can interpret @xmath55 $ ] as the probability that a uniform random wedge is closed or , alternately , the fraction of closed wedges .    to generate a uniform random wedge , note that the number of wedges centered at vertex @xmath6 is @xmath56 and @xmath57 .",
    "we set @xmath58 to get a distribution over the vertices .",
    "note that the probability of picking @xmath6 is proportional to the number of wedges centered at @xmath6 .",
    "a uniform random wedge centered at @xmath6 can be generated by choosing two random neighbors of @xmath6 ( without replacement ) .",
    "[ clm : random ] suppose we choose vertex @xmath6 with probability @xmath59 and take a uniform random pair of neighbors of @xmath6 .",
    "this generates a uniform random wedge .",
    "consider some wedge @xmath33 centered at vertex @xmath6 .",
    "the probability that @xmath6 is selected is @xmath60 .",
    "the random pair has probability of @xmath61 .",
    "hence , the net probability of @xmath33 is @xmath62 .",
    "@xmath63    shows the randomized algorithm @xmath16-wedge sampler for estimating @xmath16 in a graph @xmath4 .",
    "observe that the first step assumes that the degree of each vertex is already computed .",
    "sampling with replacements means that we sample from the original distribution repeatedly and repeats are allowed .",
    "sampling without replacement means that we can not pick the same item twice .",
    "select @xmath39 random vertices ( with replacement ) according to the probability distribution defined by @xmath64 where @xmath58 . for",
    "each selected vertex @xmath6 , choose two neighbors of @xmath6 ( uniformly at random without replacement ) to generate a random wedge .",
    "the set of all wedges comprises the sample set .",
    "output the fraction of closed wedges in the sample set as estimate of @xmath16 .    combining the bound of with",
    ", we get the following theorem .",
    "note that the number of samples required is _ independent of the graph size _ , but computing @xmath59 does depend on the number of edges , @xmath1 .",
    "[ thm : kappa ] set @xmath51 .",
    "the algorithm @xmath16-wedge sampler outputs an estimate @xmath43 for the transitivity @xmath16 such that @xmath65 with probability greater than @xmath66 .    to get an estimate on @xmath3 , the number of triangles , we output @xmath67 , which is guaranteed to be within @xmath68 of @xmath3 with probability greater than @xmath53 .     & & & & & & & time ( secs ) + amazon0312 & 401k & 2350k & 69 m & 3686k & 0.160 & 0.421 & 0.261 + amazon0505 & 410k & 2439k & 73 m & 3951k & 0.162 & 0.427 & 0.269 + amazon0601 & 403k & 2443k & 72 m & 3987k & 0.166 & 0.430 & 0.268 + as - skitter & 1696k & 11095k & 16022 m & 28770k & 0.005 & 0.296 & 90.897 +",
    "cit - patents & 3775k & 16519k & 336 m & 7515k & 0.067 & 0.092 & 3.764 + roadnet - ca & 1965k & 2767k & 6 m & 121k & 0.060 & 0.055 & 0.095 + web - berkstan & 685k & 6649k & 27983 m & 64691k & 0.007 & 0.634 & 54.777 + web - google & 876k & 4322k & 727",
    "m & 13392k & 0.055 & 0.624 & 0.894 + web - stanford & 282k & 1993k & 3944 m & 11329k & 0.009 & 0.629 & 6.987 + wiki - talk & 2394k & 4660k & 12594 m & 9204k & 0.002 & 0.201 & 20.572 + youtube & 1158k & 2990k & 1474",
    "m & 3057k & 0.006 & 0.128 & 2.740 + flickr & 1861k & 15555k & 14670 m & 548659k & 0.112 & 0.375 & 567.160 + livejournal & 5284k & 48710k & 7519",
    "m & 310877k & 0.124 & 0.345 & 102.142 +    we implemented our algorithms in c and ran our experiments on a computer equipped with a 2.3ghz intel core i7 processor with 4  cores and 256 kb l2 cache ( per core ) , 8 mb l3 cache , and an 8 gb memory .",
    "we performed our experiments on 13 graphs from snap  @xcite and per private communication with the authors of  @xcite . in all cases ,",
    "directionality is ignored , and repeated and self - edges are omitted .",
    "the properties of these matrices are presented in .",
    "the last column reports the times for the enumeration algorithm .",
    "this is based on the principles of @xcite : each edge is assigned to the vertex with a smaller degree ( using the vertex numbering as a tie - breaker ) , and then vertices only check wedges formed by edges assigned to them for closure .    as seen in",
    ", wedge sampling is orders of magnitude faster than the enumeration algorithm .",
    "the timing results show tremendous savings ; for instance , wedge sampling only takes 0.026 seconds on ` as - skitter ` while full enumeration takes 90 seconds .",
    "shows the accuracy of the wedge sampling algorithm . at 99.9% confidence ( @xmath69 ) , the upper bound on the error we expect for 2k , 8k , and 32k samples is .043 , .022 , and .011 , respectively .",
    "most of the errors are much less than the bounds would suggest .",
    "for instance , the maximum error for 2k samples is .007 , much less than that 0.43 given by the upper bound .",
    "we show the rate of convergence in for the graph amazon0505 as the number of samples increases .",
    "the dashed line shows the error bars at 99.9% confidence .",
    "note that the convergence is fast and the error bars are conservative in this instance .",
    "we now demonstrate how a small change to the underlying distribution on wedges allows us to compute the clustering coefficient , @xmath8 .",
    "shows the procedure @xmath8-wedge sampler .",
    "the only difference between @xmath8-wedge sampler and @xmath16-wedge sampler is in picking random vertex centers .",
    "vertices are picked uniformly instead of from the distribution @xmath64 .",
    "pick @xmath39 uniform random vertices ( with replacement ) . for",
    "each selected vertex @xmath6 , choose two neighbors of @xmath6 ( uniformly at random without replacement ) to generate a random wedge .",
    "the set of all wedges comprises the sample set .",
    "output the fraction of closed wedges in the sample set as an estimate for @xmath8 .",
    "[ thm : lcc ] set @xmath51 .",
    "the algorithm @xmath8-wedge sampler outputs an estimate @xmath43 for the clustering coefficient @xmath8 such that @xmath70 with probability greater than @xmath66 .",
    "let us consider a single sampled wedge @xmath33 , and let @xmath71 be the indicator random variable for the wedge being closed .",
    "let @xmath72 be the uniform distribution on edges .",
    "for any vertex @xmath6 , let @xmath73 be the uniform distribution on pairs of neighbors of @xmath6 .",
    "observe that @xmath74 } = \\pr_{v \\sim { { \\cal v}}}[\\pr_{(u , u ' ) \\sim { { \\cal n}}_v}[\\textrm{wedge $ \\{(u , v),(u',v)\\}$ is closed}]]\\ ] ] we will show that this is exactly @xmath8 .",
    "@xmath75 \\\\ & = & { \\hbox{\\bf e}}_{v \\sim { { \\cal v } } } [ \\textrm{frac . of closed wedges centered at $ v$ } ] \\\\ & = & { \\hbox{\\bf e}}_{v \\sim { { \\cal v } } } [ \\pr_{(u , u ' ) \\sim { { \\cal n}}_v}[\\textrm{$\\{(u , v),(u',v)\\}$ is closed } ] ] \\\\ & = & \\pr_{v \\sim { { \\cal v}}}[\\pr_{(u , u ' ) \\sim { { \\cal n}}_v}[\\textrm{$\\{(u , v),(u',v)\\}$ is closed } ] ] = { \\hbox{\\bf e}}[x]\\end{aligned}\\ ] ] for a single sample , the probability that the wedge is closed is exactly @xmath8 .",
    "the bound of completes the proof .",
    "@xmath63    presents the results of our experiments for computing the clustering coefficients .",
    "experimental setup and the notation are the same as before .",
    "the results again show that wedge sampling provides accurate estimations with tremendous improvements in runtime .",
    "for instance , for 8k samples , the average speedup is 10k .",
    "+   +    the real power of wedge sampling is demonstrated by estimating the degree - wise clustering coefficients @xmath18 .",
    "shows procedure @xmath9-wedge sampler .",
    "pick @xmath39 uniform random vertices of degree @xmath10 ( with replacement ) . for each",
    "selected vertex @xmath6 , choose a uniform random pair of neighbors of @xmath6 to generate a wedge.choose two neighbors of @xmath6 ( uniformly at random without replacement ) to generate a random wedge .",
    "the set of all wedges comprises the sample set .",
    "output the fraction of closed wedges in the sample set as an estimate for @xmath9 .",
    "[ thm : dcc ] set @xmath51 .",
    "the algorithm @xmath9-wedge sampler outputs an estimate @xmath43 for the clustering coefficient @xmath9 such that @xmath76 with probability greater than @xmath66 .",
    "the proof is analogous to that of .",
    "since @xmath9 is the average clustering coefficient of a degree-@xmath10 vertex , we can apply the same arguments as in .",
    "@xmath63    algorithms in the previous section present how to compute the clustering coefficient of vertices of a given degree . in practice",
    ", it may be sufficient to compute clustering coefficients over bins of degrees .",
    "wedge sampling algorithms can be performed for bins of degrees by a small adjustment of the sampling . within each bin , we weight each vertex according to the number of wedges it produces .",
    "this guarantees that each wedge in the bin is equally likely to be selected .",
    "for instance , if we bin degree-3 and degree-4 vertices together , we will weight a degree-4 vertex twice as much as a degree 3-vertex , since a degree vertex generates @xmath77 wedges whereas a degree-4 vertex has @xmath78 .",
    "see @xcite for details of binned computations",
    ".    shows results of on three graphs for clustering coefficients . in these experiments , we chose to group vertices in logarithmic bins of degrees , i.e. , @xmath79 .",
    "in other words , @xmath80 form the @xmath13-th bin .",
    "the same algorithm can be used for an arbitrary binning of the vertices .",
    "we show the estimates with increasing number of samples . at 8k samples ,",
    "the error is expected to be less than 0.02 , which is apparent in the plots .",
    "observe that even 500 samples yields a reasonable estimate in terms of the differences by degree .",
    "shows the time to calculate the binned @xmath81 values compared to enumeration ; there is a tremendous savings in runtime as a result of using wedge sampling . in this figure",
    ", runtimes are normalized with respect to the runtimes of full enumeration .",
    "as the figure shows , wedge sampling takes only a tiny fraction of the time of full enumeration , especially for large graphs .",
    "( 0.200,0 ) rectangle ( 0.350,1.105 ) ; ( 0.360,0 ) node[below ] rectangle ( 0.510,0.785 ) ; ( 0.720,0 ) rectangle ( 0.870,1.147 ) ; ( 0.880,0 ) node[below ] rectangle ( 1.030,0.819 ) ; ( 1.240,0 ) rectangle ( 1.390,1.130 ) ; ( 1.400,0 ) node[below ] rectangle ( 1.550,0.824 ) ; ( 1.760,0 ) rectangle ( 1.910,2.992 ) ; ( 1.920,0 ) node[below ] rectangle ( 2.070,2.667 ) ; ( 2.280,0 ) rectangle ( 2.430,1.673 ) ; ( 2.440,0 ) node[below ] rectangle ( 2.590,1.557 ) ; ( 2.800,0 ) rectangle ( 2.950,3.016 ) ; ( 2.960,0 ) node[below ] rectangle ( 3.110,2.526 ) ; ( 3.320,0 ) rectangle ( 3.470,1.535 ) ; ( 3.480,0 ) node[below ] rectangle ( 3.630,1.220 ) ; ( 3.840,0 ) rectangle ( 3.990,2.328 ) ; ( 4.000,0 ) node[below ] rectangle ( 4.150,1.861 ) ; ( 4.360,0 ) rectangle ( 4.510,2.434 ) ; ( 4.520,0 ) node[below ] rectangle ( 4.670,1.995 ) ; ( 4.880,0 ) rectangle ( 5.030,1.911 ) ; ( 5.040,0 ) node[below ] rectangle ( 5.190,1.571 ) ; ( 5.400,0 ) rectangle ( 5.550,3.978 ) ; ( 5.560,0 ) node[below ] rectangle ( 5.710,3.588 ) ; ( 5.920,0 ) rectangle ( 6.070,2.928 ) ; ( 6.080,0 ) node[below ] rectangle ( 6.230,2.769 ) ; ( 6.440,0 ) rectangle ( 6.590,2.182 ) ; ( 6.600,0 ) node[below ] rectangle ( 6.750,1.848 ) ; ( 7.360,0 ) rectangle ( 7.510,0.000 ) ; ( 7.520,0 ) node[below ] rectangle ( 7.670,0.000 ) ; ( 7.88,0 ) ",
    "( 0,0) ( 0,0.00 ) node[left ] at ( -0.8 , 2.00 )  ( 0 , 4.80 ) ; ( 0 , 1.000 ) node [ left]@xmath82  ( 7.700,1.000 ) ; ( 0 , 2.000 ) node [ left]@xmath83  ( 7.700,2.000 ) ; ( 0 , 3.000 ) node [ left]@xmath84  ( 7.700,3.000 ) ; ( 0 , 4.000 ) node [ left]@xmath85  ( 7.700,4.000 ) ; ( 1.98,4.50 ) node[right ] at(2.43,4.65 ) 2k rectangle ( 2.28,4.80 ) ; ( 3.70,4.50 ) node[right]at(4.15,4.65 ) 8k rectangle ( 4.00,4.80 ) ;",
    "by modifying the template given in , we can also get estimates for @xmath28 ( the number of triangles incident to degree-@xmath10 vertices ) . instead of counting the fraction of closed wedges ,",
    "we take a weighted sum .",
    "describes the procedure @xmath28-wedge sampler .",
    "we let @xmath86 denote the total number of wedges centered at degree-@xmath10 vertices .",
    "pick @xmath39 uniform random vertices of degree @xmath10 ( with replacement ) . for each",
    "selected vertex @xmath6 , choose two neighbors of @xmath6 ( uniformly at random without replacement ) to generate a random wedge .",
    "the set of all wedges comprises the sample set . for each wedge",
    "@xmath87 in the sample set , let @xmath88 be the associated random variable such that @xmath89 set @xmath90 .",
    "output @xmath91 as the estimate for @xmath28 .",
    "[ thm : dcc2 ] set @xmath51 .",
    "the algorithm @xmath28-wedge sampler outputs an estimate @xmath92 for the @xmath28 with the following guarantee : @xmath93 with probability greater than @xmath53 .    for a single sampled wedge @xmath87 , we define @xmath88",
    ". we will argue below that the expected value of @xmath94 $ ] is exactly @xmath95 .",
    "once we have that , an application of the hoeffding bound of shows that @xmath96 with probability greater than @xmath53 . multiplying this inequality by @xmath97 , we get @xmath93 , completing the proof .    to show @xmath94 = t_d / w_d$ ] , partition the set of all wedges centered on degree @xmath10 vertices into four sets @xmath98 , and @xmath99 .",
    "the set @xmath100 ( @xmath101 ) contains all closed wedges containing exactly @xmath13 degree-@xmath10 vertices .",
    "the remaining open wedges go into @xmath102 . for a sampled wedge @xmath33 , if @xmath103 , then @xmath104 . if @xmath105 , then @xmath106 .",
    "the wedge @xmath33 is a uniform random wedge from those centered on degree-@xmath10 vertices .",
    "hence , @xmath94 = w^{-1}_d(|s_1| + |s_2|/2 + |s_3|/3)$ ] .",
    "now partition the set of triangles involving degree @xmath10 vertices into three sets @xmath107 , where @xmath108 is the set of triangles with @xmath13 degree @xmath10 vertices .",
    "observe that @xmath109 .",
    "if a triangle has @xmath13 vertices of degree @xmath10 , then there are exactly @xmath13 wedges centered in degree @xmath10 vertices ( in that triangle ) .",
    "so , @xmath110 @xmath111 @xmath112",
    ". therefore , @xmath94 = t_d / w_d$ ] . @xmath63",
    "the results of are shown in .",
    "once again , the data is grouped in logarithmic bins of degrees , i.e. , @xmath79 .",
    "in other words , @xmath80 form the @xmath13-th bin .",
    "the number of samples is @xmath113 .",
    "here we also show the error bars corresponding to 99% confidence ( @xmath114 ) .",
    "counting triangles in directed graphs is more difficult , because there are six types of wedges and seven types of directed triangles ( up to isomorphism ) ; see . as mentioned earlier ,",
    "a reciprocal edge is a pair of one - way edges @xmath115 that are treated as a _",
    "single _ reciprocal edge . for each vertex @xmath6",
    ", we have three associated degrees : the indegree , outdegree , and reciprocal degree , denoted by @xmath116 , @xmath117 , and @xmath118 , respectively",
    ".    we can generalize wedge sampling to count the different triangles types in  .",
    "this is done by randomly sampling the different wedges , and looking for various directed closures .",
    "we need some notation to formalize various directed triangle concepts , which is adapted from  @xcite .     +    naturally , the first step is to construct methods for sampling the different wedge types ( see ) . for wedge",
    "type @xmath119 , let @xmath120 denote the number of wedges of this type . for vertex @xmath6 , let @xmath121 be the number of @xmath119-wedges centered at @xmath6 .",
    "it is straightforward to compute @xmath121 given the degrees of @xmath6 ; see the formulas in .    given the number of @xmath119-wedges per vertex ,",
    "we can use our standard template to sample a uniform random @xmath119-wedge .",
    "this is given in the first two steps of .",
    "the procedure to select a uniform random @xmath119-wedge centered at @xmath6 depends on the wedge type .",
    "for example , to sample a type-(i ) wedge , we pick a uniform random pair of out - neighbors of @xmath6 ( without replacement ) . to sample a type-(ii ) wedge",
    ", we pick a uniform random out - neighbor , and a uniform random in - neighbor .",
    "all other wedge types are sampled analogously .    to get the triangle counts , we need a directed transitivity that measures the fraction of",
    "closed directed wedges .",
    "of course , a directed wedge can close into many different types of triangles .",
    "for example , an type-(i)wedge can close into a type-(a ) or type-(c)triangle . to measure this meaningfully , a set of directed closure measures",
    "are defined in  @xcite .",
    "we restate these definitions and show how to count triangles using these measures .",
    "let @xmath122 denote the number of type-@xmath119 wedges in a type-@xmath123 triangle .",
    "for example , a type-(a)triangle contains exactly one type-(i)wedge , but a type-(b)triangle contains three type-(ii)wedges . the list of these values is given in .",
    "we say that a @xmath119-wedge is _ @xmath123-closed _ if the wedge participates in a @xmath123-triangle .",
    "the number of such wedges is exactly @xmath124 ( where @xmath125 is the number of @xmath123-triangles ) . _",
    "the @xmath126-closure , @xmath127 , is the fraction of @xmath119-wedges that are @xmath123-closed .",
    "_ @xmath128 there are 15 non - trivial @xmath126-closures , corresponding to the non - zero entries in . by the wedge sampling framework , we can estimate any @xmath127 value .",
    "this value can be used to estimate @xmath129 .    select @xmath39 random vertices ( with replacement ) according to the probability distribution defined by @xmath64 where @xmath130 . for each selected vertex @xmath6 , pick a uniform random @xmath119-wedge centered at @xmath6 .",
    "note that if both edges are of the same type ( i.e. , two out - edges ) , then sampling is done without replacement .",
    "otherwise , since the two edge - types are distinct and the sampling is independent .",
    "determine @xmath131 , the number of @xmath123-closed wedges among the sampled wedges .",
    "compute estimate @xmath132 for @xmath127 .",
    "output estimate @xmath133 for @xmath125 .",
    "[ thm : main - dir ] fix a triangle type @xmath123 and wedge type @xmath119 such that @xmath134 .",
    "set @xmath51 .",
    "the algorithm @xmath135-sampler outputs an estimate @xmath136 for @xmath129 such that @xmath137 with probability greater than @xmath66 .    using the hoeffding bound",
    ", we can argue ( as before ) that @xmath138 with probability at least @xmath66 .",
    "we multiply this inequality by @xmath139 and observe that @xmath140 .",
    "the experimental setup is the same as in the previous sections .",
    "we performed our experiments on 8 directed graphs , described in .",
    "the results of applying are shown in .",
    "we use 32k wedges samples for each of four specific wedge types ( detailed below ) . as can be seen ,",
    "we get accurate results for all triangle types , except possibly type-(b ) triangles . these are so few that they do not even appear in the plot .",
    "+    we take a closer look at the results , using _ relative error _ plots . for brevity ,",
    "we provide these only for ` amazon0505 ` and ` web - stanford ` graphs , and give an average over all the graphs .",
    "a clear pattern appears , where the relative error for type-(b ) triangles is worse than the others .",
    "this is where a weakness of wedge sampling becomes apparent : when a triangle type is extremely infrequent , wedge sampling is limited in the quality of the estimate .",
    "more details are shown in , where we show the relative error for these triangles , as well the fraction of these triangles ( with respect to the total count ) . across the board , we see that type-(b ) triangles are extremely rare ; hence , wedge sampling is unable to get sharp estimates",
    ". it would be very interesting to design a fast method that accuractely counts such rare triangles .",
    ".a closer look at type-(b ) triangles [ cols=\">,^,>,^\",options=\"header \" , ]     there are some subtleties about the implementation that are worth mentioning .",
    "we have a choice of which wedge types to use to count @xmath123-triangles .",
    "we can get some reuse if we use the same wedge type to count multiple triangles .",
    "for instance ,",
    "type-(a )   triangles can be counted using sampling over type ( i ) , ( ii ) , or ( iii)wedges . by ,",
    "sampling over @xmath119-wedges yields error is @xmath141 .",
    "less frequent wedge types give better approximations _ for the same triangle type .",
    "symmetrically , the same wedge type can be used to count multiple triangle types .",
    "for instance , ( ii)-wedges can be used to count type ( a ) , ( b ) , and ( d)triangles .",
    "we use the following wedges for our triangle counts :    type-(ii ) wedges are used to count triangles of type ( a ) and ( b ) ,    type-(v ) wedges are used to count triangles of type ( c ) and ( f ) ,    type-(iv ) wedges are used to count triangles of type ( d ) and ( e ) , and    type-(vi ) wedges are used to count triangles of type ( g )",
    ".    the combinations that we use are boldface in .",
    "the choice of wedge can impact the accuracy of the directed triangle counts .",
    "for example , type-(a)-triangles can be counted using wedges of type ( i ) , ( ii ) , or ( iii ) . in",
    ", we show the relative error in the estimate for type-(a ) triangles using 32k samples via the different wedge types . because of the high frequency of type-(iii )",
    "wedges , the error in triangle counts using these wedges is quite large .",
    "other than one case , ( ii)-wedges are the best choice .",
    "( 0.150,0 ) rectangle ( 0.400,0.285 ) ; ( 0.410,0 ) node[below ] rectangle ( 0.660,0.741 ) ; ( 0.670,0 ) rectangle ( 0.920,0.141 ) ; ( 1.080,0 ) rectangle ( 1.330,0.156 ) ; ( 1.340,0 ) node[below ] rectangle ( 1.590,0.054 ) ; ( 1.600,0 ) rectangle ( 1.850,3.000 ) ; ( 2.010,0 ) rectangle ( 2.260,0.224 ) ; ( 2.270,0 ) node[below ] rectangle ( 2.520,0.026 ) ; ( 2.530,0 ) rectangle ( 2.780,3.000 ) ; ( 2.940,0 ) rectangle ( 3.190,3.000 ) ; ( 3.200,0 ) node[below ] rectangle ( 3.450,0.187 ) ; ( 3.460,0 ) rectangle ( 3.710,0.222 ) ; ( 3.870,0 ) rectangle ( 4.120,0.163 ) ; ( 4.130,0 ) node[below ] rectangle ( 4.380,0.086 ) ; ( 4.390,0 ) rectangle ( 4.640,1.104 ) ; ( 4.800,0 ) rectangle ( 5.050,0.469 ) ; ( 5.060,0 ) node[below ] rectangle ( 5.310,0.034 ) ; ( 5.320,0 ) rectangle ( 5.570,0.291 ) ; ( 5.730,0 ) rectangle ( 5.980,3.000 ) ; ( 5.990,0 ) node[below ] rectangle ( 6.240,0.129 ) ; ( 6.250,0 ) rectangle ( 6.500,3.000 ) ; ( 6.660,0 ) rectangle ( 6.910,0.248 ) ; ( 6.920,0 ) node[below ] rectangle ( 7.170,0.372 ) ; ( 7.180,0 ) rectangle ( 7.430,0.083 ) ; ( 7.89,0 ) ",
    "( 0,0) ( 0,0.06 ) node[left ] at ( -0.8 , 1.50 )  ( 0 , 3.30 ) ; ( 0 , 1.000 ) node [ left]@xmath142  ( 7.910,1.000 ) ; ( 0 , 2.000 ) node [ left]@xmath143  ( 7.910,2.000 ) ; ( 0 , 3.000 ) node [ left]@xmath144  ( 7.910,3.000 ) ; ( 1.40,3.30 ) node[right ] at(2.15,3.55 ) ( i ) rectangle ( 1.90,3.80 ) ; ( 3.86,3.30 ) node[right]at(4.61,3.55 ) ( ii ) rectangle ( 4.36,3.80 ) ; ( 6.32,3.30 ) node[right]at(7.07,3.55 ) ( iii ) rectangle ( 6.82,3.80 ) ;",
    "we proposed a series of wedge - based algorithms for computing various triadic measures on graphs .",
    "our algorithms come with theoretical guarantees in the form of specific error and confidence bounds .",
    "the number of samples required to achieve a specified error and confidence bound is independent of the graph size .",
    "for instance , 38,000 samples suffice for an additive error in the transitivity of less than 0.01 with 99.9% confidence _ for any graph_. the limiting factors have to do with determining the sampling proportions ; for instance , we need to know the degree of each vertex and the overall degree distribution to compute the transitivity .",
    "the flexibility of wedge sampling along with the hard error bounds essentially redefines what is feasible in terms of graph analysis .",
    "the very expensive computation of clustering coefficient is now much faster and we can consider much larger graphs than before . in an extension of this work , we described a mapreduce implementation of this method that scales to billions of edges , leading to some of the first published results at these sizes  @xcite .    with triadic analysis no longer being a computational burden",
    ", we can extend our horizons into new territories and look at attributed triangles ( e.g. , we might compare the clustering coefficient for `` teenage '' versus `` adult '' nodes in a social network ) , evolution of triadic connections , higher - order structures such as 4-cycles and 4-cliques , and so on .",
    ", _ patric : a parallel algorithm for counting triangles and computing clustering coefficients in massive networks _",
    ", ndssl technical report 12 - 042 , network dynamics and simulation science laboratory , virginia polytechnic institute and state university , july 2012 .          , http://ngc.sandia.gov/assets/documents/berry-soda11_sand2010-4474c.pdf [ _ listing triangles in expected linear time on power law graphs with exponent at least @xmath145 _ ] , tech .",
    "report sand2010 - 4474c , sandia national laboratories , 2011 .                , http://dx.doi.org/10.1145/2396761.2398503[_degree relations of triangles in real - world networks and graph models _ ] , in proceedings of the 21st acm international conference on information and knowledge management , cikm 12 , new york , ny , usa , 2012 , acm , pp .  17121716 .            ,",
    "http://dx.doi.org/10.1007/11533719_72[_new streaming algorithms for counting triangles in graphs _",
    "] , in cocoon05 : computing and combinatorics , l.  wang , ed . ,",
    "3595 of lecture notes in computer science , springer berlin heidelberg , 2005 , pp .  710716 .",
    "height 2pt depth -1.6pt width 23pt , http://dx.doi.org/10.1007/11427186_54[_finding , counting and listing all triangles in large graphs , an experimental study _ ] , in experimental and efficient algorithms , springer berlin / heidelberg , 2005 , pp .",
    "606609 .        , http://knowledgecenter.siam.org/338sdm/338sdm/1[_triadic measures on graphs : the power of wedge sampling _ ] , in sdm13 : proceedings of the 2013 siam international conference on data mining , may 2013 , pp",
    ".  1018 .                  , http://dx.doi.org/10.1007/978-3-642-24082-9_83[_improved sampling for triangle counting with mapreduce _ ] , in convergence and hybrid information technology , g.  lee , d.  howard , and d.  slezak , eds . ,",
    "6935 of lecture notes in computer science , springer berlin / heidelberg , 2011 , pp ."
  ],
  "abstract_text": [
    "<S> graphs are used to model interactions in a variety of contexts , and there is a growing need to quickly assess the structure of such graphs . </S>",
    "<S> some of the most useful graph metrics are based on _ triangles _ , such as those measuring social cohesion . </S>",
    "<S> algorithms to compute them can be extremely expensive , even for moderately - sized graphs with only millions of edges . </S>",
    "<S> previous work has considered node and edge sampling ; in contrast , we consider _ wedge sampling _ , which provides faster and more accurate approximations than competing techniques . </S>",
    "<S> additionally , wedge sampling enables estimation local clustering coefficients , degree - wise clustering coefficients , uniform triangle sampling , and directed triangle counts . </S>",
    "<S> our methods come with provable and practical probabilistic error estimates for all computations . </S>",
    "<S> we provide extensive results that show our methods are both more accurate and faster than state - of - the - art alternatives . </S>"
  ]
}