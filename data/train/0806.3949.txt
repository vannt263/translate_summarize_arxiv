{
  "article_text": [
    "trying to make inferences based on incomplete , uncertain knowledge is a common everyday problem .",
    "computer scientists have found that this problem can be handled admirably well using bayesian networks ( a.k.a .",
    "causal probabilistic networks)@xcite .",
    "bayesian nets allow one to pose and solve the inference problem in a graphical fashion that possesses a high degree of intuitiveness , naturalness , consistency , reusability , modularity , generality and simplicity .",
    "this paper was motivated by a series of papers written by me , in which i define some nets that describe quantum phenomena .",
    "i call them  quantum bayesian nets\"(qb nets ) .",
    "they are a counterpart to the conventional  classical bayesian nets \" ( cb nets ) that describe classical phenomena .",
    "in particular , this paper gives an example of a general technique , first proposed in ref.@xcite , of embedding cb nets within qb nets .",
    "the reader can understand this paper easily without having to read ref.@xcite first .",
    "he might consult ref.@xcite if he wants to understand better the motivation behind the constructs used in this paper and how they can be generalized .",
    "the quick medical reference ( qmr ) is a compendium of statistical knowledge connecting diseases to symptoms .",
    "the original version of qmr was compiled by miller et al@xcite .",
    "shwe et al@xcite designed a cb net based on the information of ref.@xcite .",
    "the qmr cb net of shwe et al is of the form shown in fig.[fig : cbnet - general ] .",
    "it contains two layers : a top layer of @xmath0600 parent nodes corresponding to distinct diseases , and a bottom layer of @xmath04,000 children nodes corresponding to distinct findings",
    ". the inference problem ( or , in more medical language , giving a diagnosis ) for the qmr is to , given some findings , find the probability of each disease , or at least the more likely diseases .    making an inference with a cb net",
    "usually requires summing over the states of a subset @xmath1 of the set of nodes of the graph .",
    "if each node in @xmath1 contains just 2 states , a sum over all the states of @xmath1 is a sum over @xmath2 terms .",
    "these sums of exponential size are the bane of the bayesian network formalism .",
    "it has been shown that making exact@xcite ( or even approximate@xcite ) inferences with a general cb net is np - hard . in 1988 ,",
    "lauritzen and spiegelhalter(ls ) devised a technique@xcite for making inferences with cb nets for which the subset @xmath1 is relatively small ( for them , @xmath3 the maximal clique of the moralized graph ) .",
    "this led to a resurgence in the use of cb nets , as it allowed the use of nets that hitherto had been prohibitively expensive computationally . according to ref.@xcite , for the qmr cb net , @xmath4 ,",
    "so the ls technique does not help in this case .",
    "researchers have found(ref.@xcite gives a nice review of their work ) many exact and approximate algorithms for making inferences from the qmr cb net .",
    "still , all currently known algorithms require performing an exponential number of operations .",
    "rejection sampling and likelihood weighted sampling ( a.k.a . likelihood weighting ) are two simple algorithms for making approximate inferences from an arbitrary cb net ( and from the qmr cb net in particular ) .",
    "heretofore , the samples for these two algorithms have been obtained with a conventional  classical computer \" . in this paper",
    ", we will show that two analogous algorithms exist for the qmr cb net , where the samples are obtained with a quantum computer .",
    "we will show that obtaining each sample , for these two algorithms , for the qmr cb net , on a quantum computer , requires only a polynomial number of steps .",
    "we expect that these two algorithms , implemented on a quantum computer , can also be used to make inferences ( and predictions ) with other cb nets .",
    "in this section , we will define some notation that is used throughout this paper . for additional information about our notation",
    ", we recommend that the reader consult ref.@xcite .",
    "ref.@xcite is a review article , written by the author of this paper , which uses the same notation as this paper .",
    "let @xmath5 . as usual",
    ", let @xmath6 represent the set of integers ( negative and non - negative ) , real numbers , and complex numbers , respectively . for integers",
    "@xmath7 , @xmath8 such that @xmath9 , let @xmath10 .",
    "for any set @xmath1 , let @xmath11 be the number of elements in @xmath1 .",
    "the power set of @xmath1 , i.e. , the set of all subsets of @xmath1 ( including the empty and full sets ) , will be denoted by @xmath12 .",
    "note that @xmath13 .",
    "we will use @xmath14 to represent the  truth function \" ; @xmath14 equals 1 if statement @xmath1 is true and 0 if @xmath1 is false . for example , the kronecker delta function is defined by @xmath15 .",
    "random variables will be represented by underlined letters . for any random variable @xmath16",
    ", @xmath17 will denote the set of values that @xmath16 can assume .",
    "samples of @xmath16 will be denoted by @xmath18 for @xmath19 .",
    "consider an n - tuple @xmath20 , and a set @xmath21 .",
    "by @xmath22 we will mean @xmath23 ; that is , the @xmath24-tuple that one creates from @xmath25 , by keeping only the components listed in @xmath26 .",
    "if @xmath27 , then we will use the statement @xmath28 to indicate that all components of @xmath25 are 0 .",
    "likewise , @xmath29 will mean all its components are 1 .    for any matrix @xmath30 , @xmath31 will stand for its complex conjugate , @xmath32 for its transpose , and @xmath33 for its hermitian conjugate .",
    "when we write a matrix , and leave some of its entries blank , those blank entries should be interpreted as zeros .    for any set @xmath34 and any function @xmath35 , we will use @xmath36 to mean @xmath37 .",
    "this notation is convenient when @xmath38 is a long expression that we do not wish to write twice .",
    "next we explain our notation for quantum circuit diagrams .",
    "we label single qubits ( or qubit positions ) by a greek letter or by an integer .",
    "when we use integers , the topmost qubit wire is 0 , the next one down is 1 , then 2 , etc .",
    "_ note that in our quantum circuit diagrams , time flows from the right to the left of the diagram .",
    "_ careful : many workers in quantum computing draw their diagrams so that time flows in the opposite direction .",
    "we eschew their convention because it forces one to reverse the order of the operators every time one wishes to convert between a circuit diagram and its algebraic equivalent in dirac notation .",
    "in this section , we describe the qmr cb net .    before describing the qmr cb net ,",
    "let us describe the noisy - or cb net ( invented by pearl in ref.@xcite ) .",
    "consider a cb net of the form of fig.[fig : cbnet - nd-1f](a ) , consisting of @xmath39 parent nodes (  diseases \" ) , @xmath40 with @xmath41 , all pointing into a single child node (  finding \" ) , @xmath42 .",
    "the cb net of fig.[fig : cbnet - nd-1f](a ) represents a probability distribution @xmath43 that satisfies :    p(f , ) = p(f| ) _",
    "j=1^n p(d_j ) .",
    "[ eq : noisy - or-1 ] we say the probability distribution of eq.([eq : noisy - or-1 ] ) and fig.[fig : cbnet - nd-1f](a ) is a * noisy - or * if it also satisfies :    [ eq : noisy - or-2 ] p(f , ) = \\ { _ p(f| ) _ j p(d_j|d_j ) } _ jp(d_j ) , with    p(f| ) = ( f , d_1d_2 ",
    "d_n ) .    for example , when @xmath44 ,    p(f| ) & = & \\ {    r d_1,d_2 +    llllll & & 00 & 01&10&11 + f&0&1&0&0&0 + & 1&0&1&1&1 +    .",
    "+ & = & ( f , d_1d_2 ) .",
    "[ eq : or - of-2 ] eqs.([eq : noisy - or-2 ] ) are represented by fig.[fig : cbnet - nd-1f](b ) .",
    "sometimes , one also restricts the distributions @xmath45 to have the special form :    p(d_j|d_j)&=&\\ {    r d_j +    llll & & 0 & 1 + d_j&0&1 & 1-q_1j + & 1&0 & q_1j +    .",
    "+ & = & ( 1-q_1j)^d_j_d_j^0 + ( q_1jd_j)_d_j^1 , [ eq : pdd ] where @xmath46 $ ] . a general distribution @xmath45 would contain 2 degrees of freedom whereas eq.([eq : pdd ] ) contains only one , namely @xmath47 . note that    p(f=0| ) = _ j(1-q_1j)^d_j = e^-_j_1jd_j , where @xmath48 . the inference problem for the noisy - or cb net consists in calculating @xmath49 and @xmath50 ; that is , the probability of diseases having the value @xmath51 , given that @xmath52 is 0 or 1 .",
    "this is given by bayes rule :    p(| f=0 ) & = & + & = & [ eq : d - sum - for - noisy - or - net ] .",
    "note that the sum in the denominator of eq.([eq : d - sum - for - noisy - or - net ] ) is over @xmath53 terms .    now that we understand the noisy - or cb net , it s easy to understand the qmr cb net .",
    "the qmr cb net consists of multiple noisy - or cb nets , one for each finding .",
    "suppose the qmr cb net has @xmath54 diseases ( parent nodes ) , @xmath40 for @xmath55 , and @xmath56 findings ( children nodes ) , @xmath57 for @xmath58 .",
    "then , for each @xmath58 , one has[multiblock footnote omitted ]    p(f_i=0|()_pa(_i))= _ jpa(_i ) \\ { ( 1-q_ij)^d_j } = e^-_jpa(_i)_ijd_j , [ eq - fi - given - pa ] where @xmath59 $ ] and @xmath60 is the set of parents of node @xmath61 .",
    "let @xmath62 , @xmath63 and @xmath64 constitute a disjoint partition of @xmath65 .",
    "(  unk \" stands for unknown . )",
    "the inference problem for the qmr cb net consists in calculating @xmath66 $ ] . by bayes rule ,    @xmath67 & = & \\frac{p[(\\vecf)_{i_0}=0 , ( \\vecf)_{i_1}=1|\\vecd]p(\\vecd ) } { p[(\\vecf)_{i_0}=0 , ( \\vecf)_{i_1}=1]}\\\\ & = & \\frac { \\pi_1\\pi_0p(\\vecd ) } { p_{i_1,i_0 } } \\label{eq : d - sum - for - qmr - net } \\;,\\end{aligned}\\ ] ]    where    _ 0 = _",
    "ii_0_jpa(_i ) \\ { ( 1-q_ij)^d_j } , [ eq : def - pi-0 ]    _ 1 = _ ii_1 \\ { 1 - _ jpa(_i ) \\ { ( 1-q_ij)^d_j } } , [ eq : def - pi-1 ] and    p_i_1,i_0&= & p[()_i_0=0 , ( ) _ i_1=1 ] + & = & _ p[()_i_0=0 , ( ) _ i_1=1 , ] .",
    "[ eq : p - d - sum ]    note that the numerator of eq.([eq : d - sum - for - qmr - net ] ) can be calculated in a polynomial number of steps , but its denominator ( i.e. , @xmath68 ) is expressed in eq.([eq : p - d - sum ] ) as a sum over @xmath69 terms .",
    "calculating @xmath68 naively , by summing numerically those @xmath69 terms , is unfeasible when @xmath54 is large .",
    "at the end of this paper are 4 appendices .",
    "reading them is not a prerequisite to understanding the rest of this paper , but they might be of interest to some readers .    in appendix [ app : d - sum ] , we show that    p_i_1,i_0= _ si_1 ( -1)^|s| t_s , i_0 , [ eq - t - to - p - mobius ] where @xmath70 is some function that can be calculated in a polynomial number of steps .",
    "thus , @xmath68 can be calculated by summing numerically over @xmath71 terms , regardless of @xmath72 size .",
    "this is better than @xmath69 terms , but still unfeasible for @xmath73 large .",
    "eq.([eq - t - to - p - mobius ] ) can be inverted . for more on this see appendix [ app - mobius ] .",
    "rejection sampling and likelihood weighted sampling are two algorithms for making approximate inferences from an arbitrary cb net ( and from the qmr cb net in particular ) .",
    "heretofore , the samples for these two algorithms have been obtained with a conventional  classical computer \" . in case",
    "the reader is not familiar with these two algorithms , in the manner they have been implemented heretofore on a classical computer , see appendices [ app - reject - sam ] and [ app - like - sam ] for an introduction to them . in the next section",
    ", we will show that two analogous algorithms exist for the qmr cb net , where the samples are obtained with a quantum computer .",
    "in this section , we will describe a method for making inferences from the qmr using a quantum computer .    a slight change of notation : the parameter @xmath59 $ ] of the previous section will be replaced in this section by a sine squared .",
    "let    q_ij = ^2_ij = s^2_ij , 1-q_ij = ^2_ij = c^2_ij , for some real number @xmath74 .",
    "we will also abbreviate @xmath75 by @xmath76 and @xmath77 by @xmath78 .",
    "we begin by considering the simple case of a cb net consisting of two diseases pointing to one finding , as displayed in fig.[fig : qbnet-2d-1f](a ) .",
    "we will next show that fig.[fig : qbnet-2d-1f](b ) is a quantum circuit that can generate some of the same probability distributions as the cb net fig.[fig : qbnet-2d-1f](a ) .",
    "the state vectors @xmath79 , and the unitary transformations @xmath80 that appear in the quantum circuit of fig.[fig : qbnet-2d-1f](b ) are defined as follows .    for @xmath81 ,",
    "define @xmath82 by    = u_j , where    u_j = , = .    for @xmath81 ,",
    "let    a_j(d_j , _",
    "j|_j , d_j ) & = & \\ {    r _ j , d_j +    llllll & & 00 & 01&10&11 + & 00&1 & 0&0&0 + d_j,_j&01&0 & c_j&0&-s_j + & 10&0 & 0&1&0 + & 11&0 & s_j&0&c_j +    .",
    "[ eq:2-bit - q - embed ] + & = & ^0__j + ^1__j .",
    "for those familiar with ref.@xcite , note that the probability amplitude @xmath83 is a q - embedding of the probability distribution @xmath45 defined in eq.([eq : pdd ] ) .",
    "note also that source and sink nodes are denoted by letters with tildes over them .",
    "the matrix given by eq.([eq:2-bit - q - embed ] ) is a 2 qubit unitary transformation .",
    "such transformations can be decomposed ( compiled ) into an expression containing at most 3 cnots , using a method due to vidal and dawson@xcite ( for software that performs this decomposition , see ref.@xcite ) .",
    "let    a_or(f , _ 1 , _ 2| ,",
    "d_1 , d_2 ) & = & \\ {    r , d_1,d_2 +    llllllllll & & 000 & 001&010&011&100 & 101&110&111 + & 000&1&&&&0 & & & + f,_1,_2&001&&0&&&&i & & + & 010&&&0&&&&i & + & 011&&&&0&&&&i + & 100&0&&&&1 & & & + & 101&&i&&&&0 & & + & 110&&&i&&&&0 & + & 111&&&&i&&&&0 +    .",
    "[ eq : quan - or - matrix ] + & = & [ i^f_f^d_1d_2 _ d_1,d_2^_1,_2 ] _ ^0 + [  ] _ ^1 . for those familiar with ref.@xcite ,",
    "note that the probability amplitude @xmath84 is a q - embedding of the probability distribution @xmath85 defined in eq.([eq : or - of-2 ] ) .",
    "the matrix given by eq.([eq : quan - or - matrix ] ) can be compiled as follows :    & = & e^i_(b , b)bool^2-(0,0)p_b , b + & = & e^ii_4 e^-ip_00 + & = & i(2)[-i(2)]^n(0)n(1 ) .",
    "the probability @xmath86 for the quantum circuit fig.[fig : qbnet-2d-1f](b ) is given by :     + & = & | _ d_1,d_2,d_1,d_2 a_or(f,_1,_2|=0,d_1,d_2 ) _",
    "j=1,2 \\{a_j(d_j,_j|_j=0,d_j ) } |^2 + & = & | _ d_1,d_2,d_1,d_2 i^f _",
    "f^d_1d_2 _ d_1,d_2^_1,_2 _",
    "j=1,2 \\{[(c_j^d_j ) _ _ j^d_j _ d_j^0 + ( s_jd_j ) _ _ j^d_j _ d_j^1 ] } |^2 .",
    "in particular , when @xmath87 ,    p(f=0 , _ 1,_2 , _ 1,_2)= _ j=1,2 c_j^2_j p(_j ) _ _ j^0 . if @xmath88 and @xmath89 are not observed , we may sum over them to get    p(f=0 , _ 1,_2)= _ j=1,2 c_j^2_j p(_j ) .",
    "if we replace @xmath90 by @xmath91 , @xmath92 for the quantum circuit fig.[fig : qbnet-2d-1f](b ) is identical to @xmath93 for the cb net fig.[fig : qbnet-2d-1f](a ) .",
    "this is no coincidence .",
    "the quantum circuit was designed from the cb net to make this true . in a sense defined in ref.@xcite ,",
    "the cb net is embedded in the quantum circuit .",
    "one can easily generalize this example with @xmath94 and @xmath95 to arbitrary @xmath54 and @xmath56 .",
    "fig.[fig : qbnet-2d-3f ] gives an example with @xmath94 and @xmath96 .",
    "in the example with @xmath94 , @xmath95 , we set :    = i(2)[-i(2)]^n(0)n(1 ) . for arbitrary @xmath97",
    ", this equation can be generalized to :    = i(_i)[-i(_i)]^ _ k_in ( ) , for @xmath58 , where @xmath98 is the qubit label of qubit @xmath61 , and @xmath99 is the set of qubit labels for the parents of qubit @xmath61 .    for arbitrary @xmath97 , we can generalize this construction to obtain a quantum circuit that yields probabilities @xmath100 .",
    "if the external outputs @xmath101 are not observed , then we measure @xmath102 . if we replace @xmath103 by @xmath51 , the probability @xmath102 for the quantum circuit is identical to the probability @xmath104 for the cb net that was embedded in that quantum circuit . as discussed previously , the inference problem for the cb net",
    "is to find @xmath66 $ ] .",
    "this probability equals @xmath105 $ ] divided by @xmath106 $ ] .",
    "the numerator @xmath105 $ ] can be calculated exactly numerically on a conventional classical computer .",
    "not so the denominator @xmath106 $ ] , at least not for large @xmath73 . here",
    "is where the quantum computer shows its mettle .",
    "one can run the quantum circuit many times , in either of two modes , to get a so called empirical distribution that approximates @xmath107 $ ] .",
    "the empirical distribution converges to the exact one .",
    "the two modes that we are referring to are rejection sampling and likelihood weighted sampling .",
    "we describe each of these separately in the next two sections .",
    "assume that we are given the number of samples @xmath108 that we intend to collect , and the sets @xmath109 which are a disjoint partition of @xmath65 .",
    "then the rejection sampling algorithm goes as follows ( expressed in pseudo - code , pidgin c language ) :    a convergence proof of this algorithm goes as follows . for any function @xmath110 , as @xmath111",
    ", the sample average @xmath112 tends to :    = _ k g ( , ) _",
    ",p(,)g(, ) . therefore ,    & = & + & & + & & p[|()_i_0=0,()_i_1=1 ] .      for likelihood weighted sampling ,",
    "the quantum circuit must be modified as follows : we assume that all gates in the quantum circuit are elementary ; that is , either single - qubit transformations or controlled elementary gates ( like cnots or multiply - controlled nots or multiply - controlled phases ) .    1 .   for any qubit @xmath61 with @xmath113 , initialize the qubit to state @xmath114 .",
    "( for any qubit @xmath61 with @xmath115 , initialize the qubit to state @xmath116 , same as before . ) 2 .   for any qubit @xmath61 with @xmath117 ,",
    "remove those elementary gates that can change the state of @xmath61 .",
    "in particular , remove any single - qubit gates acting on @xmath61 , and any controlled elementary gates that use @xmath61 as a target . do not remove controlled elementary gates that use @xmath61 as a control only .",
    "assume that we are given the number of samples @xmath108 that we intend to collect , and the sets @xmath109 which are a disjoint partition of @xmath65 .",
    "then the likelihood weighted sampling algorithm goes as follows ( expressed in pseudo - code , pidgin c language ) :    a convergence proof of this algorithm goes as follows .",
    "define the likelihood functions @xmath118 and @xmath119 by (  evi \" stands for evidence and  unk \" for unknown ) :    l_evi ( ) = _ ii_0p[f_i=0|()_pa(_i ) ] _",
    "ii_1p[f_i=1|()_pa(_i ) ] , and    l_unk ( , ) = _ ii_unkp[f_i|()_pa(_i ) ] . clearly ,    p ( , ) = l_evi()l_unk(,)p ( ) . for any function @xmath110 , as @xmath111 , the sample average @xmath112 tends to :    = _ k g ( , ) _ , _ ( )_i_0 ^ 0_()_i_1 ^ 1 l_unk(,)p( ) g(, ) .",
    "therefore ,    & = & + & & + & & p[|()_i_0=0,()_i_1=1 ] .",
    "in this appendix , we will sum @xmath105 $ ] + over @xmath51 .",
    "this is like performing a multidimensional integral .",
    "recall that @xmath68 was defined as :    p_i_1,i_0= _ p[()_i_0=0 , ( ) _ i_1=1 , ] . for",
    "all @xmath120 and @xmath121 , let    ( _ i)_j = _ ij= \\ {    l _",
    "ij jpa(_i ) + 0    . . for all @xmath121 ,",
    "we can always find @xmath122 so that @xmath123 can be expressed as :    p(d_j ) = e^-_j - _ j d_j . now",
    "@xmath124 ( defined by eq.([eq : def - pi-0 ] ) ) , @xmath125 ( defined by eq.([eq : def - pi-1 ] ) ) , and @xmath126 can be expressed as :    _ 0 = _",
    "ii_0 e^- _ i ,    _ 1 = _",
    "ii_1\\ { 1-e^- _ i } , and    p()= e^-- , where = _",
    "j=1^n_d _ j .",
    "thus    p_i_1,i_0&= & _ _ 0_1 p ( ) + & = & e^- _",
    "e^-- _ ii_0_i _",
    "ii_1 \\ { 1 - e^-_i } .",
    "[ eq : p - before - prod - to - sum ] consider any set @xmath34 and any function @xmath127 .",
    "when @xmath128 ,    ( 1- e^-f(a ) ) ( 1- e^-f(b))= 1 - e^-f(a ) - e^-f(b ) + e^-f(a)-f(b ) .",
    "this generalizes to    _",
    "x\\ { 1 - e^-f(x ) } = _ s2^ ( -1)^|s|e^-_xsf(x ) .",
    "[ eq : prod - to - sum ] using identity eq.([eq : prod - to - sum ] ) , eq.([eq : p - before - prod - to - sum ] ) yields    p_i_1,i_0= e^-",
    "_ si_1 ( -1)^|s| _ e^--_ii_0s_i . [ eq : p - before - t - phi ] for any @xmath129 and @xmath130 , define    _",
    "j(a ) = _ j + _ ia(_i)_j .",
    "also define a function @xmath131 by    t()= _",
    "d=0 ^ 1 e^-d = ( 1 + e^- ) . using these definitions , eq.([eq :",
    "p - before - t - phi ] ) yields    p_i_1,i_0&= & e^- _ si_1 ( -1)^|s|2^n_d _ jz_1,n_d t[_j(i_0s ) ] + & = & _ si_1 ( -1)^|s| t_s , i_0 .",
    "@xmath132 is a function @xmath133 defined by the last equation .",
    "in this appendix , we discuss the application of the mobius inversion theorem@xcite to eq.([eq - t - to - p - mobius ] ) .",
    "fig.[fig : p - s1-s0 ] shows the matrix @xmath134 $ ] for all @xmath135 and @xmath136 , assuming large @xmath73 but arbitrarily @xmath72 .",
    "we label the rows and columns of @xmath137 in order of increasing set size .",
    "the top - left corner entry is @xmath138 and the bottom - right corner entry is @xmath68 .",
    "note that @xmath139 for all @xmath140 , @xmath141 .",
    "the shaded top part ( corresponding to small or moderate @xmath142 ) of this matrix can be calculated numerically with a classical computer . but not the unshaded bottom part ( corresponding to large @xmath142 ) .",
    "an empirical approximation of the bottom part can be obtained with a quantum computer .",
    "consider any set @xmath143 and any functions @xmath144 .",
    "the mobius inversion theorem@xcite states that    g(j ) = _ jj(-1)^|j - j| f(j ) f(j ) = _ jj",
    "g(j ) . using the fact that when @xmath145 , @xmath146 , and replacing @xmath147 by @xmath148 in the previous equation , we get    g(j ) = _ jj(-1)^|j|",
    "f(j ) f(j ) = _ jj ( -1)^|j| g(j ) .",
    "[ eq : mobius2 ] we showed in appendix [ app : d - sum ] that    p_i_1,i_0 = _ s_1i_1 ( -1)^|s_1|t_s_1,i_0 .",
    "[ eq : t - alt - sum ] thus , by virtue of eq.([eq : mobius2 ] ) ,    t_i_1,i_0 = _ s_1i_1 ( -1)^|s_1|p_s_1,i_0 .",
    "[ eq : p - alt - sum ] more generally , if @xmath149 , @xmath141 , and    m_s_1 , s_1 = ( -1)^s_1 , then    p_s_1,s_0 = _ s_1s_1 m_s_1 , s_1t_s_1,s_0 , and    t_s_1,s_0 = _ s_1s_1 m_s_1 , s_1p_s_1,s_0 .",
    "eq.([eq : p - alt - sum ] ) implies    p_i_1,i_0 = ( -1)^|i_1| \\ { t_i_1,i_0 -_s_1i_1 ( -1)^|s_1|p_s_1,i_0 } . to approximate @xmath68",
    ", one can estimate the right hand side of the last equation .",
    "@xmath150 , and @xmath151 for small and moderate @xmath142 , can be calculated exactly numerically on a classical computer .",
    "@xmath151 for large @xmath142 can be obtained empirically on a quantum computer .",
    "in this appendix , we review the rejection sampling algorithm for arbitrary cb nets on a classical computer .    consider a cb net whose nodes are labeled in topological order by @xmath152 .",
    "assume that @xmath153 ( evidence set ) and @xmath154 ( hypotheses set ) are disjoint subsets of @xmath155 , with @xmath156 not necessarily empty .",
    "assume that we are given the number of samples @xmath108 that we intend to collect , and the prior evidence @xmath157 .",
    "then the rejection sampling algorithm goes as follows ( expressed in pseudo - code , pidgin c language ) :    a convergence proof of this algorithm goes as follows . for any function @xmath158 , as @xmath111",
    ", the sample average @xmath159 tends to :    _ k g ( ) _ xp(x)g(x ) .",
    "therefore ,    & = & + & & + & & .",
    "in this appendix , we review the likelihood weighted sampling algorithm for arbitrary cb nets on a classical computer@xcite .    consider a cb net whose nodes are labeled in topological order by @xmath152 .",
    "assume that @xmath153 ( evidence set ) and @xmath154 ( hypotheses set ) are disjoint subsets of @xmath155 , with @xmath156 not necessarily empty .",
    "let @xmath160 for any @xmath161 .",
    "assume that we are given the number of samples @xmath108 that we intend to collect , and the prior evidence @xmath157 .",
    "then the likelihood weighted sampling algorithm goes as follows ( expressed in pseudo - code , pidgin c language ) :"
  ],
  "abstract_text": [
    "<S> the quick medical reference ( qmr ) is a compendium of statistical knowledge connecting diseases to findings ( symptoms ) . </S>",
    "<S> the information in qmr can be represented as a bayesian network . </S>",
    "<S> the inference problem ( or , in more medical language , giving a diagnosis ) for the qmr is to , given some findings , find the probability of each disease . </S>",
    "<S> rejection sampling and likelihood weighted sampling ( a.k.a . likelihood weighting ) are two simple algorithms for making approximate inferences from an arbitrary bayesian net ( and from the qmr bayesian net in particular ) . </S>",
    "<S> heretofore , the samples for these two algorithms have been obtained with a conventional  classical computer \" . in this paper </S>",
    "<S> , we will show that two analogous algorithms exist for the qmr bayesian net , where the samples are obtained with a quantum computer . </S>",
    "<S> we expect that these two algorithms , implemented on a quantum computer , can also be used to make inferences ( and predictions ) with other bayesian nets . </S>"
  ]
}