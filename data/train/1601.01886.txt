{
  "article_text": [
    "a _ repetition _ of length @xmath7 ( @xmath8 ) in a sequence of symbols is a subsequence of consecutive terms of the form @xmath9 .",
    "a sequence is _ nonrepetitive _ ( or _ square - free _ ) if it does not contain a repetition of any length . in 1906",
    "thue proved that there exist arbitrarily long nonrepetitive sequences over an alphabet of size @xmath10 ( see @xcite ) .",
    "the method discovered by thue is constructive and uses substitutions over a given set of symbols .",
    "a different approach to creating long nonrepetitive sequences was recently introduced by grytczuk , kozik , and micek  @xcite : generate a sequence by iteratively appending a random symbol at the end , and each time a repetition appears erase the repeated block .",
    "( for instance , if the sequence generated so far is @xmath11 and we add @xmath12 , then we erase the last two symbols , bringing us back to @xmath13 . ) by a simple counting argument one can prove that with positive probability the length of the constructed sequence eventually exceeds any finite bound , provided the alphabet has size at least @xmath0 .",
    "this is one more than in thue s result but the proof is more flexible and can be adapted to other settings .",
    "for instance , it led to a very short proof that for every @xmath14 and every sequence of sets @xmath15 , each of size at least @xmath0 , there exists a nonrepetitive sequence @xmath16 where @xmath17 for all @xmath18 ( see @xcite ) , a theorem first proved by grytczuk , przybyo , and zhu  @xcite via an intricate application of the lefthanded local lemma . whether the analogous statement for lists of size @xmath10 is true remains an exciting open problem .    in this paper",
    "we make use of the above - mentioned approach to color trees nonrepetitively . given an ( undirected , simple ) graph @xmath19 , we denote by @xmath20 and @xmath21 its vertex set and edge set , respectively .",
    "a coloring @xmath22 of the vertices of @xmath19 is _ nonrepetitive _ if there is no repetition in the color sequence of any path in @xmath19 ; that is , @xmath23 is nonrepetitive if for every path @xmath24 with an even number of vertices the sequence of colors on the first half of @xmath24 is distinct from the sequence of colors on the second half of @xmath24 .",
    "( we remark that all paths in this paper are simple , that is , contain no repeated vertex . ) the minimum number of colors used in a nonrepetitive coloring of @xmath19 is called the _ thue chromatic number _ of @xmath19 and is denoted by @xmath25 .",
    "now , given a graph @xmath19 , suppose that each vertex @xmath26 has a preassigned list of available colors @xmath27 .",
    "a coloring of @xmath19 with these lists is a coloring @xmath23 of @xmath19 such that @xmath28 for each vertex @xmath26 .",
    "the _ thue choice number _ of @xmath19 , denoted by @xmath29 , is the minimum @xmath2 such that , for every list assignment @xmath30 with @xmath31 for each @xmath26 , there is a nonrepetitive coloring of @xmath19 with these lists .",
    "similarly as for many graph coloring parameters , the thue chromatic ( choice ) number can be bounded from above by a function of the maximum degree : alon , grytczuk , hauszczak , and riordan  @xcite proved that for every graph @xmath19 with maximum degree @xmath32 we have @xmath33 for some absolute constant @xmath12",
    ". a number of subsequent works  @xcite focused on reducing the value of the constant @xmath12 , the current best bound being @xmath34 ( see  @xcite ) .",
    "et al . _",
    "@xcite also showed that there are graphs with maximum degree @xmath32 with @xmath35 .",
    "( whether this can be improved by a @xmath36 factor remains an open problem . )    it is not difficult to show that every tree has thue chromatic number at most @xmath0 ( see @xcite ) , which is best possible .",
    "this result was generalized to graphs of bounded treewidth by kndgen and pelsmajer  @xcite .",
    "they proved that @xmath37 for every graph @xmath19 of treewidth @xmath4 .",
    "it is not known whether this upper bound can be improved to a polynomial in @xmath4 . however ,",
    "if one considers graphs of pathwidth @xmath4 instead , a polynomial bound is known : it was shown by dujmovi _",
    "_  @xcite that @xmath38 for every graph @xmath19 of pathwidth @xmath4 .",
    "( we note that quadratic might not be the right order of magnitude here . )",
    "probably the most intriguing open problem regarding the thue chromatic number is whether it is bounded for all planar graphs , a question originally asked by grytczuk  @xcite .",
    "a @xmath39 upper bound is known  @xcite , and from below ochem constructed a planar graph requiring @xmath40 colors ( see  @xcite ) .",
    "the main focus of this paper is the list version of the parameter , the thue choice number .",
    "as mentioned at the beginning of the introduction , we have @xmath41 for every path @xmath24 , and it is open whether this bound can be improved to @xmath10 .",
    "fiorenzi , ochem , ossona de mendez , and zhu  @xcite gave the first example of a class of graphs where the thue chromatic and thue choice numbers behave very differently : while trees have thue chromatic number at most @xmath0 , they showed that the thue choice number of trees is unbounded .",
    "clearly , trees with large thue choice number must have large maximum degree , and in fact one can deduce from the proof in  @xcite that there are trees with maximum degree @xmath32 and thue choice number @xmath42 .",
    "kozik and micek  @xcite subsequently showed that a better - than - quadratic upper bound in terms of the maximum degree exists for trees : for every @xmath43 there exists @xmath44 such that @xmath45 for every tree @xmath46 of maximum degree @xmath32 .",
    "( bridging the significant gap between the upper and lower bounds remains an open problem . )    note that graphs of bounded treewidth have unbounded thue choice number since this is already the case for trees . on the other hand , dujmovi _ et al . _",
    "@xcite observed that @xmath29 is bounded when @xmath19 is a graph of pathwidth @xmath47 .",
    "this prompted the authors of  @xcite to ask whether @xmath29 is bounded more generally when @xmath19 has bounded pathwidth ( which is the case for the thue chromatic number ) .",
    "also , since connected graphs @xmath19 of pathwidth @xmath47 are caterpillars , and thus trees in particular , they also asked the same question but with @xmath19 moreover required to be a tree . a second motivation for the latter question was that the trees with arbitrarily large thue choice number constructed by fiorenzi _",
    "et al . _",
    "@xcite also have unbounded pathwidth .    in this paper",
    "we answer both questions .",
    "first , we give a simple construction showing that the thue choice number is unbounded for graphs of bounded pathwidth ; in fact , this is true even for graphs of pathwidth @xmath6 ( which is best possible as noted above ) :    [ thm : pw2 ] for every @xmath48 , there is a graph @xmath19 of pathwidth @xmath6 with @xmath49 .",
    "next , we address the case of trees and prove that their thue choice number is bounded from above by a function of their pathwidth :    [ thm : tree ] there is a function @xmath50 such that @xmath51 for every tree @xmath46 of pathwidth @xmath4 .",
    "the proof of theorem  [ thm : tree ] combines an induction on the pathwidth with the algorithmic method of grytczuk _ et al . _",
    "@xcite to produce arbitrarily long nonrepetitive sequences described at the beginning of the introduction .",
    "this method , which finds its roots in the celebrated algorithmic proof of the local lemma by moser and tardos  @xcite , was extended to produce nonrepetitive colorings of graphs ( in  @xcite ) and trees ( in  @xcite ) .",
    "part of our proof consists in adapting the ideas from  @xcite to the situation under consideration .",
    "we note that the bounding function @xmath52 in theorem  [ thm : tree ] stemming from our proof is quite large , it is doubly exponential in @xmath4 .",
    "the paper is organized as follows : in section  [ sec : definitions ] we introduce definitions and terminology",
    ". then we prove theorem  [ thm : pw2 ] in section  [ sec : pw2 ] , and theorem  [ thm : tree ] in section  [ sec : trees ] .",
    "for an integer @xmath14 , we let @xmath53 : = { \\left\\{1,\\ldots , n\\right\\}}$ ] .",
    "also , given two integers @xmath54 with @xmath55 we let @xmath56:={\\left\\{a , a+1,\\dots , b\\right\\}}$ ] , which we call an _ _ interval .",
    "graphs in this paper are finite , simple , and undirected . the vertex set and edge set of a graph @xmath19",
    "are denoted @xmath20 and @xmath21 , respectively .",
    "note that , since only simple graphs are considered , resulting loops and parallel edges are removed when contracting edges in a graph .",
    "a graph @xmath57 is a _ _ minor of a graph @xmath19 if @xmath57 can be obtained from a subgraph of @xmath19 by contracting edges .",
    "a _ _ tree decomposition of a graph @xmath19 is a pair @xmath58 where @xmath46 is a tree and @xmath59 is a collection @xmath60 of non - empty subtrees of @xmath46 such that @xmath61 for every edge @xmath62 .",
    "the _ _ width of the tree decomposition @xmath58 is the maximum , over every @xmath63 , of the number of subtrees in @xmath59 containing @xmath64 , minus @xmath47 .",
    "the _ _ treewidth of @xmath19 is the minimum width of a tree decomposition of @xmath19 . _",
    "_ path decompositions and _ _ pathwidth are defined analogously with the tree @xmath46 required instead to be a path .",
    "treewidth and pathwidth are minor - closed parameters , in the sense that every minor of a graph @xmath19 has treewidth ( pathwidth ) at most that of @xmath19 .",
    "we refer the reader to diestel s textbook  @xcite for an introduction to the theory of treewidth and graph minors .",
    "the _ _ length of a path is the number of its edges .",
    "the _ _ height of a rooted tree @xmath46 is the maximum length of a path from the root to a leaf of @xmath46 .",
    "( thus @xmath46 has height @xmath65 if it consists of a unique vertex . )",
    "the _ _ height of a vertex @xmath66 of @xmath46 is the length of the path from the root to @xmath66 in @xmath46 .",
    "let @xmath67 be the graph constructed from the path on @xmath68 vertices where every second vertex is blown up to @xmath69 vertices forming an independent set .",
    "formally , @xmath70\\right\\ } } \\cup { \\left\\{v_{2i}^j\\mid i\\in[n],\\ j\\in\\left[\\binom{\\ell n}{\\ell}\\right]\\right\\}},\\ ] ] and two vertices are adjacent in @xmath67 if and only if their lower indices differ by exactly @xmath47 . also , let @xmath71 for each odd index @xmath72 $ ] and @xmath73\\right\\}}$ ] for each even index @xmath72 $ ] .",
    "it is not difficult to check that @xmath67 has pathwidth at most @xmath6 ( with equality for @xmath74 and @xmath48 ) .",
    "thus theorem  [ thm : pw2 ] follows from the following theorem .",
    "let @xmath2 and @xmath75 be integers such that @xmath48 and @xmath76",
    ". then @xmath77 .",
    "consider the following list assignment for the vertices of @xmath67 .",
    "for each odd index @xmath78 $ ] , vertex @xmath79 is assigned the list @xmath80 thus these @xmath75 lists have size @xmath2 , are pairwise disjoint , and their union is @xmath81 $ ] . next , enumerate the @xmath2-subsets of @xmath81 $ ] in an arbitrary way .",
    "then , for each even index @xmath82 $ ] and index @xmath83 $ ] , vertex @xmath84 is assigned the list which is the @xmath85-th set in that enumeration .",
    "we claim that , because @xmath75 was chosen to be strictly larger than @xmath86 , there can not be a nonrepetitive coloring of @xmath67 with these lists .",
    "arguing by contradiction , let us suppose that @xmath23 is such a coloring .    with a slight abuse of notation , for @xmath72",
    "$ ] we use the shorthand @xmath87 for the set @xmath88 . consider an interval @xmath89 $ ] of the form @xmath90",
    "$ ] with @xmath91 .",
    "suppose that the following two conditions are satisfied : @xmath92 , i \\text { odd } \\\\[1ex ] \\phi(v_{i+2k+1 } ) \\in \\phi(v_{i } ) &   \\text{for each } i \\in [ a , a+2k ] , i \\text { even . }",
    "\\end{array}\\ ] ] then it is easy to check that there exists a path @xmath93 in @xmath67 with @xmath94 for @xmath85 odd and @xmath95 for @xmath85 even , for all @xmath96 , such that the color sequence @xmath97 is a repetition ( of size @xmath98 ) .",
    "since this can not happen , it follows that there exists an index @xmath99 $ ] for which one of the above two conditions is not satisfied . for every such index @xmath18",
    ", we say that the pair @xmath100 is a _ _ witness ( for interval @xmath101 ) , where @xmath102 with @xmath103 odd and @xmath104 even .",
    "next , consider an even index @xmath105 $ ] .",
    "observe that @xmath106 - \\phi(v_{q})\\right| { \\leqslant}\\ell -1 $ ] , since @xmath107 contains at least one color from each @xmath2-subset of @xmath81 $ ] .",
    "combining this with the fact that vertices @xmath108 with odd index @xmath109 $ ] have pairwise disjoint lists , we deduce that there are at most @xmath110 odd indices @xmath109 $ ] such that the pair @xmath100 is a witness . summing up over every even index @xmath105 $ ] ,",
    "it follows that there are at most @xmath111 distinct witnesses in total .",
    "now consider a witness @xmath100 and let @xmath112 .",
    "the pair @xmath100 is a witness for at most @xmath98 intervals @xmath89 $ ] of the form @xmath90 $ ] .",
    "since there are exactly @xmath113 intervals @xmath101 of the latter form and each interval of that form must have a witness , it follows that the number of witnesses @xmath100 with @xmath112 is at least @xmath114 . summing up over every possible value of @xmath4 ( that is , @xmath115 ) , we obtain that the total number of witnesses is at least @xmath116 it follows that @xmath117 which contradicts the assumption that @xmath118 .",
    "a _ _ path - partition of a tree @xmath46 is a pair @xmath119 where @xmath120 is a rooted tree and @xmath121 is a collection @xmath122 of vertex - disjoint paths of @xmath46 which collectively partition the vertex set of @xmath46 and such that @xmath123 if and only if there is an edge between a vertex from @xmath124 and a vertex from @xmath125 in @xmath46 . observe that a consequence of this definition is that @xmath120 is a minor of @xmath46 .",
    "the _ _ root - path of @xmath119 is the path @xmath126 where @xmath64 is the root of @xmath120 .",
    "now , consider a path @xmath126 with @xmath64 distinct from the root .",
    "the path @xmath126 has a _ _ center , defined as the endpoint in @xmath124 of the edge in @xmath46 linking @xmath124 to @xmath125 where @xmath127 is the parent of @xmath64 in @xmath120 .",
    "the _ _ height of the path - partition @xmath119 is the height of @xmath120 .",
    "when considering a path - partition @xmath119 of a tree @xmath46 , it will be useful to embed @xmath46 itself in the plane in a way that is ` faithful ' to the path - partition .",
    "this leads to the following definition : an embedding of @xmath46 in the plane is _ _ faithful to the path - partition @xmath119 if each path in @xmath121 is drawn horizontally , and contracting each such path into one of its vertices we obtain some plane embedding of @xmath120 , with its root drawn at the bottom and its edges going up .",
    "see figure  [ fig : representation ] for an illustration .    left : a tree @xmath46 faithfully embedded according to some path - partition @xmath119 ( the paths in @xmath121 are drawn in bold ) .",
    "right : the rooted tree @xmath120 . , scaledwidth=93.0% ]    as the paths in @xmath121 are drawn horizontally , they have a natural orientation from left to right .",
    "every edge @xmath128 of @xmath46 is either _ _ horizontal or _",
    "_ vertical , depending on whether @xmath128 belongs to some path in @xmath121 or not .",
    "our motivation for considering path - partitions is the following lemma .",
    "[ lemma : representation ] every tree of pathwidth @xmath4 has a path - partition of height at most @xmath129 .    we prove the following stronger statement : for every tree @xmath46 of pathwidth @xmath4 and every vertex @xmath130 , there is a path - partition of @xmath46 of height at most @xmath129 with @xmath131 in the root - path .",
    "the proof is by induction on @xmath4 . for @xmath132 ,",
    "the tree @xmath46 consists of the single vertex @xmath131 .",
    "clearly , it has a path - partition of height @xmath65 with @xmath131 in the root - path .",
    "now suppose @xmath133 for the inductive case .",
    "let @xmath134 be a path decomposition of @xmath46 of width @xmath4 , where @xmath135 denotes the path associated to vertex @xmath136 .",
    "enumerate the vertices of the path @xmath24 indexing the path decomposition as @xmath137 , in order .",
    "we may assume without loss of generality that there are ( non - necessarily distinct ) vertices @xmath138 such that @xmath139 and @xmath140 ( otherwise @xmath24 could be shortened ) .",
    "let @xmath141 denote the unique path in @xmath46 between @xmath142 and @xmath143 in @xmath46 .",
    "let @xmath144 be the vertex of @xmath145 that is closest to @xmath127 in @xmath46 .",
    "let @xmath146 denote the unique path in @xmath46 between @xmath147 and @xmath148 in @xmath46 .",
    "notice that @xmath149 for each @xmath150 and that each @xmath151 induces a subpath of @xmath24 .",
    "similarly , @xmath152 for each @xmath153 and each @xmath154 induces a subpath of @xmath24 .",
    "thus we deduce that @xmath155 .",
    "consider the forest @xmath156 and let @xmath157 denote its components .",
    "observe that each tree @xmath158 ( @xmath159 ) has pathwidth at most @xmath160 .",
    "indeed , @xmath161 is a path decomposition of @xmath158 , and for each @xmath162 we have @xmath163 .    for each @xmath159 ,",
    "let @xmath164 denote the unique vertex of @xmath158 having a neighbor in @xmath165 in @xmath46 .",
    "by induction , each tree @xmath158 ( @xmath159 ) has a path - partition @xmath166 of height at most @xmath167 such that @xmath164 in the root - path .",
    "let @xmath168 denote the root of @xmath169 .",
    "we construct a path - partition @xmath170 of @xmath46 as follows : @xmath120 consists of the disjoint union of @xmath171 plus two extra vertices @xmath172 and @xmath173 with @xmath172 the root of @xmath120 and @xmath173 a child of @xmath172 .",
    "the paths associated to @xmath172 and @xmath173 are @xmath145 and @xmath174 , respectively . for each @xmath175",
    ", we make @xmath172 or @xmath173 adjacent to @xmath168 , depending whether @xmath164 has a neighbor in @xmath145 or @xmath174 in @xmath46 .",
    "it is easy to verify that @xmath170 is a path - partition of @xmath46 of height at most @xmath176 .",
    "the fact that trees of bounded pathwidth have path - partitions of bounded height is a natural observation .",
    "it is thus likely that this observation was made before though we are not aware of any relevant reference .",
    "we also note that we made no effort to optimize the bound in lemma  [ lemma : representation ] and we do not know whether the factor @xmath6 is unavoidable .",
    "let @xmath46 be a tree and fix a path - partition @xmath119 of @xmath46 .",
    "suppose further that @xmath46 is embedded in the plane faithfully to @xmath119 .",
    "we use the following terminology when discussing paths in @xmath46 .",
    "first , every path @xmath177 has a corresponding _ _ level , which is defined as the height of the corresponding vertex in @xmath120 . by extension ,",
    "every vertex of @xmath46 has a level , the level of the path in @xmath121 it belongs to .",
    "define the _",
    "_ base of an arbitrary path @xmath24 in @xmath46 as the subpath induced by the vertices of @xmath24 of minimum level .",
    "since the base of @xmath24 is a subpath of a path in @xmath121 , its vertices are ordered from left to right by the plane embedding of @xmath46 .",
    "the path @xmath24 is said to be _ _ ascending if at least one of its two endpoints belongs to its base .",
    "( we note that in particular all paths in @xmath121 are ascending , even though they are drawn horizontally in the embedding of @xmath46 . )",
    "each ascending path @xmath24 in @xmath46 has a _ _ source , defined as the endpoint of @xmath24 that is in the base of @xmath24 ; in case both endpoints are in the base , the left - most one is selected as the source .",
    "we typically think of ascending paths @xmath24 as being directed from their source to their other endpoint so that the notion of @xmath18th vertex of @xmath24 is well defined , the first vertex being the source . an ascending path @xmath24 with at least two vertices either _ _ goes right or _",
    "_ goes left or _",
    "_ goes up , depending on whether the second vertex of @xmath24 is on the base and to the right of the source , or on the base and to the left of the source , or is one level higher .",
    "next we generalize the notion of repetition as follows .",
    "a _ _ near repetition is a sequence of the form @xmath178 , where @xmath8 is its _ _ length , and @xmath179 is said to be its _ _ gap .",
    "( thus for @xmath180 this is the usual notion of repetition . )",
    "now , let us return to our tree @xmath46 from the previous paragraph , and let @xmath23 denote an arbitrary coloring of its vertices .",
    "a slightly technical but key definition for our purposes is the following : an ascending path @xmath24 of @xmath46 is said to be _ _",
    "@xmath23-bad if , enumerating its vertices as @xmath181 starting from its source , the sequence @xmath182 forms a near repetition @xmath178 of length @xmath7 and gap @xmath183 where at most @xmath7 vertices from @xmath184 lie in the base of @xmath24 .",
    "( that is , either @xmath185 , or @xmath186 but at most @xmath7 vertices from the ` gap ' section are in the base of @xmath24 . )",
    "an ascending path that is not @xmath23-bad is said to be _ _ @xmath23-good .",
    "we sometimes drop @xmath23 when using these two adjectives if the coloring @xmath23 they refer to is clear from the context    equipped with these definitions we may now state the following technical lemma , which turns out to be the heart of the proof .",
    "[ lemma : good ] there is a function @xmath187 such that , for every @xmath1 , every @xmath188 , and every tree @xmath46 faithfully embedded according to a path - partition @xmath119 of @xmath46 of height @xmath189 with lists @xmath190 @xmath191 of colors of size @xmath192 , one can find sublists @xmath193 @xmath191 of size @xmath2 such that , for every coloring @xmath23 of @xmath46 with these sublists , every ascending path of @xmath46 is @xmath23-good .    in order to motivate lemma  [ lemma : good ] , we show that with only a little extra effort ( greedy coloring from the sublists ) it implies theorem  [ thm : tree ] .",
    "let @xmath46 be a tree of pathwidth @xmath4 and let @xmath190 @xmath191 be a list assignment for the vertices of @xmath46 where each list has size @xmath194 , where @xmath3 is the function from lemma  [ lemma : good ] .",
    "by lemma  [ lemma : representation ] there is a path - partition @xmath170 of @xmath46 of height at most @xmath129 . by lemma  [ lemma : good ]",
    "there are sublists @xmath195 with @xmath196 and @xmath197 for each vertex @xmath136 , such that in any coloring @xmath23 of @xmath46 with these sublists , all ascending paths in @xmath46 are @xmath23-good .",
    "we define a nonrepetitive coloring @xmath23 of @xmath46 with the lists @xmath198 ( @xmath136 ) in a greedy manner .",
    "we color the vertices of @xmath46 one by one in non - decreasing order of their levels .",
    "let @xmath136 be a vertex under consideration .",
    "let @xmath199 denote the shortest path in @xmath46 from @xmath200 to the root - path ( thus it enters the root - path in vertex @xmath201 ) . recall that every edge of the form @xmath202 with @xmath203 is either horizontal or vertical in @xmath46",
    "let @xmath204 each vertex in @xmath205 is said to be a _",
    "_ guard for vertex @xmath66 .",
    "note that @xmath206 is exactly the level of vertex @xmath66 in @xmath46 , and thus in particular @xmath207 .",
    "we color @xmath66 as follows : let @xmath208 be an arbitrarily chosen color from the non - empty set @xmath209 .",
    "( here , @xmath210 denotes the set of colors used for vertices in @xmath205 ; note that these vertices are already colored since they lie on lower levels . )",
    "we claim that @xmath23 is a nonrepetitive coloring of @xmath46 .",
    "arguing by contradiction , suppose that there is a repetitively colored path @xmath211 .",
    "consider the edge @xmath212 .",
    "first we show that @xmath128 belongs to the base of @xmath24 .",
    "suppose not , and consider the shortest subpath of @xmath24 that includes the edge @xmath128 and has one endpoint in the base of @xmath24 .",
    "reversing @xmath24 if necessary , we may assume without loss of generality that this subpath is of the form @xmath213 , with @xmath214 being the only vertex on the base .",
    "observe that @xmath215 is a vertical edge .",
    "this implies that @xmath214 is a guard for all the vertices in @xmath216 .",
    "in particular , the color @xmath217 can not have been used for vertex @xmath218 since @xmath219 , contradicting the fact that @xmath220 .",
    "therefore , the edge @xmath128 must lie in the base of @xmath24 .",
    "let @xmath2 and @xmath7 be the number of vertices in @xmath221 and @xmath222 , respectively , that are in the base of @xmath24 . reversing @xmath24 if necessary , we may assume without loss of generality that @xmath223 .",
    "consider the path @xmath224 .",
    "observe that @xmath225 is an ascending path as one of its endpoints , namely @xmath226 , is in the base of @xmath225 .",
    "now , @xmath227 is a near repetition of length @xmath7 with gap @xmath228 , and exactly @xmath2 vertices from the gap section are in the base of @xmath225 . since @xmath229",
    ", we deduce that @xmath225 is @xmath23-bad , contradicting the fact that every ascending path is @xmath23-good .",
    "an _ _ arborescence is a rooted directed tree where the edges are directed away from the root .",
    "it will be convenient to consider arborescences that are embedded in the plane without edge crossings in such a way that the root is drawn at the bottom and all arcs go up ( thus the source of an arc is drawn below its sink ) , which we simply call _ _ plane arborescences .",
    "the _ _ height of a vertex in an arborescence is defined as its distance to the root , thus in particular the root has height @xmath65 .",
    "the _ _ rightmost path of a plane arborescence is the path obtained by starting from the root and always taking the rightmost arc going up , until reaching a leaf .",
    "we classify directed paths in a plane arborescence @xmath230 as being good or bad w.r.t .  a given coloring @xmath23 of @xmath230 , similarly as for ascending paths : say that a directed path @xmath24 is _ _",
    "@xmath23-bad if , enumerating its vertices as @xmath231 in order , the sequence @xmath182 can be written as a near repetition @xmath178 of length @xmath7 and gap @xmath183 where at most @xmath7 vertices from @xmath184 lie on the rightmost path of @xmath230 .",
    "( that is , either @xmath185 , or @xmath186 but at most @xmath7 vertices from the ` gap ' section are on the rightmost path . )",
    "if the directed path @xmath24 is not @xmath23-bad then it is _",
    "_ @xmath23-good .",
    "[ lemma : more - technical ] let @xmath1 , let @xmath230 be a plane arborescence , and let @xmath190 @xmath232 be lists of colors of size @xmath233",
    ". then one can find sublists @xmath193 @xmath232 of size @xmath2 such that , for every coloring @xmath23 of @xmath230 with these sublists , every directed path starting on the rightmost path is @xmath23-good .",
    "the interest of lemma  [ lemma : more - technical ] is that lemma  [ lemma : good ] can be proved by iterated applications of lemma  [ lemma : more - technical ] , as we now show .",
    "the function @xmath192 that will be used is defined inductively on @xmath189 as follows : @xmath234 , and @xmath235 for @xmath236 .",
    "let @xmath46 be a tree with a path - partition @xmath170 of height @xmath189 and let @xmath190 @xmath191 be lists of colors of size @xmath192 .",
    "suppose further that @xmath46 is faithfully embedded according to @xmath170 .",
    "we prove the lemma by induction on @xmath189 . for the base case of the induction , @xmath237",
    ", we observe that @xmath46 is then a path and all ascending paths in @xmath46 are simply subpaths of @xmath46 .",
    "as @xmath238 , by lemma  [ lemma : more - technical ] there are sublists @xmath196 for each vertex @xmath136 with @xmath239 such that , for every coloring @xmath23 of @xmath46 with these sublists , all ascending paths of @xmath46 are @xmath23-good , as required .",
    "( as expected , when applying lemma  [ lemma : more - technical ] we first turn the path @xmath46 into an arborescence by directing it from left to right . )    for the inductive case @xmath236 , let @xmath64 be the root of @xmath120 and let @xmath124 be the root - path of @xmath46 .",
    "let also @xmath157 be the components of the forest @xmath240 .",
    "( note that there is at least one component . ) for each @xmath241 , the path - partition @xmath170 induces in a natural way a path - partition @xmath242 of @xmath243 of height at most @xmath244 , with @xmath245 rooted at the only vertex that is a neighbor of @xmath64 in @xmath120 .",
    "since @xmath246 , applying induction on @xmath243 we obtain for each vertex @xmath247 a sublist @xmath248 of size @xmath249 such that , for every coloring @xmath23 of @xmath250 with these sublists , every ascending path of @xmath250 is @xmath23-good .",
    "next , for each vertex @xmath251 let @xmath252 be an arbitrary subset of @xmath190 of size @xmath249 .",
    "thus , every vertex @xmath66 of @xmath46 now has a corresponding sublist @xmath253 of size @xmath249 .",
    "moreover , given any coloring @xmath23 of the tree @xmath46 with these sublists , the only ascending paths that could possibly be @xmath23-bad are those having their sources in @xmath124 .",
    "we shall refer to these ascending paths as the _ _ risky paths of @xmath46 .",
    "enumerate the vertices of the root - path @xmath124 as @xmath254 , from left to right .",
    "define two plane arborescences @xmath230 and @xmath255 from @xmath46 by rooting @xmath46 at @xmath256 and @xmath257 , respectively , and ensuring that @xmath124 is a prefix of the rightmost path in both instances .",
    "note that the rightmost path of @xmath230 could extend beyond @xmath124 ( in case @xmath257 is not a leaf of @xmath46 ) , and the same is true for the rightmost path of @xmath255 ( if @xmath256 is not a leaf ) .",
    "what is important for our purposes is to observe that each risky path of @xmath46 starts on the rightmost path in both @xmath230 and @xmath255 .",
    "observe also that each risky path of @xmath46 that goes right ( left ) is a directed path in @xmath230 ( respectively @xmath255 ) , and risky paths that go up are directed in both @xmath230 and @xmath255 .",
    "first , apply lemma  [ lemma : more - technical ] on @xmath230 with list assignment @xmath252 ( @xmath258 ) , giving for each vertex @xmath136 a sublist @xmath259 of size @xmath233 .",
    "next , apply lemma  [ lemma : more - technical ] on @xmath255 with list assignment @xmath260 ( @xmath258 ) , giving for each vertex @xmath136 a sublist @xmath261 of size @xmath2 . since every risky path of @xmath46",
    "is mapped to a directed path starting on the rightmost path in @xmath230 or @xmath255 , by the properties of the sublists @xmath262 and @xmath198 ( @xmath136 ) guaranteed by lemma  [ lemma : more - technical ] we know that , for every coloring @xmath23 of @xmath46 with the lists @xmath198 ( @xmath136 ) , all risky paths of @xmath46 are @xmath23-good .",
    "therefore , the lists @xmath198 ( @xmath136 ) have the desired properties .",
    "it remains to prove lemma  [ lemma : more - technical ] .",
    "as alluded to in the introduction , we will do so by adapting the algorithmic method used in  @xcite .",
    "let @xmath263 denote the size of the lists .",
    "for @xmath258 , let @xmath264 denote the set of vertices @xmath265 that can be reached via a directed path from @xmath66 in @xmath230 .",
    "( note that @xmath266 . ) in the proof , we will often abbreviate ` subset of size @xmath4 ' and ` sublist of size @xmath4 ' into _ _ ` @xmath4-subset ' and _ _ ` @xmath4-sublist ' , respectively .",
    "we define a simple randomized algorithm , algorithm  [ algo:1 ] , that tries to find an @xmath2-sublist @xmath198 of @xmath190 for each vertex @xmath258 such that , for every coloring @xmath23 of @xmath230 with these sublists , every directed path starting on the rightmost path of @xmath230 is @xmath23-good .",
    "the following informal description of the algorithm is complemented by the more formal description given in algorithm  [ algo:1 ] .",
    "the algorithm explores the arborescence @xmath230 via a depth - first , left - to - right search starting from the root .",
    "the algorithm maintains at all time @xmath2-sublists @xmath196 for all vertices @xmath66 encountered _ before _ the current vertex @xmath131 in the depth - first search of @xmath230 .",
    "these sublists have the following property : for every coloring @xmath23 of these vertices with these sublists ( @xmath23 being thus a partial coloring of @xmath230 ) , every directed path starting on the rightmost path of @xmath230 that is fully colored is @xmath23-good .",
    "we say that such a partial sublist assignment is _ _ valid .",
    "next , the algorithm treats the current vertex @xmath131 and tries to maintain the above property . to do so",
    ", the algorithm first chooses an @xmath2-sublist @xmath267 uniformly at random . if this new sublist @xmath268 triggers the existence of a @xmath23-bad path in @xmath230 for some ( partial ) coloring @xmath23 with the current sublists  that is , the current sublist assignment is no longer valid  it erases some of these sublists as follows : say @xmath269 with @xmath270 is a @xmath23-bad path with color sequence @xmath271 of the form @xmath272 .",
    "the algorithm then erases the choice for the list @xmath198 for all vertices @xmath66 contributing to the second occurrence of the repeated sequence and their descendants , that is , for all @xmath273 . at the next iteration",
    ", @xmath274 becomes the new current vertex , that is , the next vertex to be treated .",
    "notice that this makes the algorithm backtrack a number of steps w.r.t .  the depth - first left - to - right search of @xmath230 .",
    "if on the other hand , the new sublist @xmath268 does not trigger any such bad configuration , then the current sublist assignment remains valid . in this case , before proceeding to the next random choice the algorithm first tries to extend the current sublist assignment deterministically as much as possible .",
    "( while it might not be clear at first glance why this deterministic extension step is needed , we remark that it is actually a key feature of the algorithm without which we could not do the analysis below . ) this is done as follows : the algorithm considers the children @xmath275 of @xmath131 one by one in left - to - right order , until a _ _ problematic child is identified : when considering @xmath276 , the algorithm checks whether there exist @xmath2-subsets @xmath196 for all @xmath277 such that , taken together , they extend the current sublist assignment in such a way that it remains valid .",
    "if these subsets exist , the current sublist assignment is extended in this way to the whole subtree rooted at @xmath276 , and the algorithm considers the next child of @xmath131 .",
    "( if there are more than one valid choice for these sublists , the algorithm chooses one according to a deterministic rule . )",
    "if no such extension of the current sublist assignment can be found for vertices in @xmath278 , then @xmath276 is identified as being a problematic child of @xmath131 , and @xmath276 becomes the next vertex to be treated .",
    "observe that this effectively makes the algorithm proceed with the depth - first left - to - right search of @xmath230 for some number of steps .",
    "let us make some observations concerning the algorithm : right at the beginning , after selecting a sublist for the root of @xmath230 , two situations can occur : ( 1 ) no child of the root is problematic . thus a valid sublist assignment for all vertices of @xmath230 has been found , and the lemma is proved .",
    "( 2 ) some child of the root is problematic . in this case , it is important to observe that later on each vertex @xmath131 for which a random sublist @xmath268 is chosen was problematic when its parent was considered .",
    "it follows in turn that some child of @xmath131 will be problematic , since otherwise we could extend the sublist assignment to the whole subtree rooted at @xmath131 .    to summarize",
    ", we may assume that we are in case ( 2 ) at the beginning , since otherwise we are done .",
    "this implies that the vertex @xmath131 that is currently being treated by the algorithm always has a problematic child .",
    "moreover , the algorithm _ will never stop _",
    ", simply because while it can erase the choices of sublists for some vertices of @xmath230 it can not do so for the root , as is easily checked .",
    "our proof will then proceed in the following way : we run the algorithm until it made @xmath279 random choices of sublists and then stop it , where @xmath279 will be some large number which is a function of @xmath280 and @xmath2 .",
    "we then carefully set up a concise description ( called _ _ log ) of its execution that is precise enough to allow us to recover from it all random choices that were made by the algorithm .",
    "finally , we count the number of distinct logs that can occur after @xmath279 random choices , and show that , for sufficiently large @xmath279 , this number is strictly less than @xmath281 . from this",
    "we deduce that not all sequences of @xmath279 random choices of sublists can occur in case ( 2 ) .",
    "in other words , there is a choice for the sublist of the root of @xmath230 leaving us in case ( 1 ) , which then finishes the proof .",
    "this concludes our informal description of the algorithm , see algorithm  [ algo:1 ] for the pseudo code .",
    "a few remarks about the latter are in order : first , we assume that the @xmath2-subsets of @xmath190 have been enumerated for each @xmath282 , so that the @xmath85-th @xmath2-subset of @xmath190 is well defined for @xmath283 $ ] .",
    "this ordering also induces an ordering on every subcollection of the collection of @xmath2-subsets of @xmath190 .",
    "we also use this enumeration in the proof .",
    "second , for simplicity we model the random choices made by the algorithm by a sequence @xmath284 of numbers given in input , each between @xmath47 and @xmath285 , where @xmath286 will be the number used for the @xmath18-th random choice .",
    "we call this sequence the _ _ random input .",
    "third , in line  [ algo : choice - bad - path ] , the @xmath23-bad path is chosen according to some fixed rule . similarly , in line  [ algo : choice - extension ] ,",
    "the sublists @xmath198 are chosen according to some fixed rule .",
    "( in each case , the actual rule is irrelevant , as long as it is deterministic . )    * input : * lists @xmath190 for all @xmath258 and random input @xmath284 + @xmath287 + @xmath288 + @xmath289 for each @xmath282 + * report failure *    in the following , by the @xmath18-th iteration of the algorithm , we mean the @xmath18-th iteration of the ` while ` loop .",
    "we call operations in lines  [ algo : def - of - g - and - k]-[algo : new - current ] a _ _ retraction of the near repetition @xmath178 . with a slight abuse of terminology",
    ", we will also say that the corresponding @xmath23-bad path has been _ _ retracted .    from now on",
    "we argue by contradiction and suppose that the desired sublists for the vertices of @xmath230 do not exist .",
    "in other words , we assume that every choice for the sublist of the root at the beginning of the algorithm leaves us in case ( 2 ) described above . in particular , for all @xmath279 and all random inputs",
    "@xmath284 , algorithm  [ algo:1 ] runs for @xmath279 steps and then reports failure .",
    "we are going to create a concise description of what algorithm  [ algo:1 ] does during the @xmath279 steps of its execution .",
    "this description is completely determined by the lists and the random input .",
    "we see the lists @xmath190 ( @xmath258 ) as being fixed and thus treat the description as a function of the random input @xmath284 .",
    "the description , which we call an _ _ @xmath279-log , consists of a @xmath0-tuple @xmath290 defined as follows :    @xmath291 and @xmath292 ( @xmath293 $ ] ) is the height of the vertex @xmath131 in algorithm  [ algo:1 ] at the _ end _ of iteration @xmath18 ,",
    "when reaching line  [ algo : i - inc ] after @xmath131 was updated in the if ",
    "else block .",
    "( thus , for @xmath294 , @xmath292 is simply the height of vertex @xmath131 at the _ beginning _ of iteration @xmath295 . ) +    @xmath296 \\cup { \\left\\{{\\textrm{\\tt undefined}}\\right\\}}$ ] is a function encoding the final partial sublist assignment to vertices of @xmath230 at the end of iteration @xmath279 .",
    "more precisely , for each @xmath258 we have @xmath297 if sublist @xmath198 is defined at that moment and @xmath198 is the @xmath85-th @xmath2-subset of @xmath190 , and @xmath298 if @xmath198 is not defined .",
    "+    @xmath299 and @xmath300 ( @xmath301 $ ] ) are defined as follows : if no bad path was retracted during the @xmath18-th iteration then @xmath302 .",
    "otherwise , @xmath300 is the number of vertices in the prefix @xmath303 of the retracted bad path @xmath304 that are on the rightmost path of @xmath230 .",
    "observe that @xmath305 in the latter case since at most @xmath7 vertices from the gap section of a bad path lie on the rightmost path of @xmath230 .",
    "+    @xmath306 , where @xmath307 ( @xmath308 $ ] ) is defined as follows . if no bad path was retracted during the @xmath18-th iteration then @xmath309 .",
    "otherwise , letting @xmath304 be the retracted bad path , we set @xmath310 with @xmath311 ( @xmath312 $ ] ) defined as follows : let @xmath313 denote the collection of @xmath2-subsets of @xmath314 that have a _ non - empty intersection with @xmath315_. then @xmath311 is the index of the set @xmath316 in the collection @xmath313 .",
    "now , our aim is to bound from above the number of distinct @xmath279-logs @xmath290 by a relatively small function of @xmath317 , and @xmath2 . recall that the lists @xmath190 @xmath232 are fixed , thus @xmath2 and @xmath280 are fixed , and only @xmath279 and the random input @xmath318 vary .",
    "there are exactly @xmath319 distinct random inputs of length @xmath279 , and our goal in the following analysis is to deduce that there are @xmath320 distinct @xmath279-logs .",
    "( the asymptotic notation is to be interpreted with respect to the variable @xmath279 of course . )",
    "this is then a contradiction for @xmath279 large enough , as mentioned earlier .",
    "we start by estimating the number of @xmath279-tuples @xmath321 .",
    "each sequence @xmath322 can be injectively mapped to its sequence of differences @xmath323 .",
    "( note that @xmath324 . )",
    "all numbers in this new sequence belong to the set @xmath325 , as is easily seen .",
    "next we transform that sequence into yet another sequence by replacing each number @xmath4 by @xmath47 followed by @xmath326 consecutive occurrences of @xmath327 .",
    "for instance , the sequence of differences @xmath328 gets mapped to @xmath329 .",
    "it is easy to see that the second transformation is also injective .",
    "the resulting sequence @xmath330 is a sequence over the alphabet @xmath331 .",
    "the number of @xmath47 s in @xmath330 corresponds to the number of times the algorithm assigns a value to some variable @xmath332 in line  [ algo : def - sj ] , and is thus equal to the number of iterations , that is , @xmath279 .",
    "the number of @xmath327 s in @xmath330 is the sum of all values of @xmath7 over all bad paths @xmath269 considered in lines  [ algo : def - of - g - and - k]-[algo : erase - sj ] during the execution .",
    "one can see this as the number of times the algorithm ` erases ' a value of @xmath333 for some @xmath258 that was set earlier using the random input ( note that an execution of line  [ algo : erase - sj ] erases @xmath7 such values ) .",
    "thus , this number is at most the total number of executions of line  [ algo : def - sj ] , that is , the number of @xmath47 s in @xmath330 , which is @xmath279 .",
    "hence , @xmath330 has size between @xmath279 and @xmath334 , and there are at most @xmath335 such sequences @xmath330 .",
    "next we bound the number of different functions @xmath336 .",
    "note that this number depends only on @xmath337 , @xmath2 , and @xmath280 , so it can be treated as a constant w.r.t .",
    "we denote this number by @xmath12 ( its exact value being irrelevant for the analysis ) .",
    "now we turn our attention to the number of possible tuples @xmath338 in an @xmath279-log @xmath290 . recall that if @xmath339 then @xmath305 , where @xmath7 is the size of the repeated part in the near repetition retracted during the @xmath18-th iteration .",
    "hence , the sum of the @xmath300 s is at most twice the total number of @xmath327 s in @xmath330 .",
    "this implies that @xmath340 .",
    "the number of such sequences is easily seen to be at most @xmath341 , as one can encode each such sequence as a binary word @xmath342 of length @xmath343 ( the @xmath18-th section @xmath344 encodes the number @xmath300 for @xmath345 , and the padding @xmath346 at the end of the word ensures that the length is @xmath343 ) .",
    "it remains to estimate the number of possible tuples @xmath306 which can occur for fixed @xmath347 , @xmath336 , and @xmath348 .",
    "consider an index @xmath301 $ ] .",
    "if @xmath349 , then each number in the sequence @xmath307 is the index of some @xmath2-subset of some list @xmath190 ( @xmath258 ) among those that intersect some other list @xmath350 of size @xmath2 .",
    "clearly , the number of @xmath2-subsets of @xmath190 intersecting @xmath350 is at most @xmath351 .",
    "since @xmath337 is much bigger than @xmath2 ( recall that @xmath352 ) , each term in the previous sum is upper bounded by the first term @xmath353 , and we obtain that the sum is at most @xmath354 .",
    "( of course , this is a rather crude upper bound but it is good enough for our purposes . )",
    "hence all numbers in the sequence @xmath307 are between @xmath47 and @xmath355 .",
    "note also that the length of the sequence @xmath307 is exactly the length of the near repetition retracted during the @xmath18-th iteration .",
    "hence , given @xmath347 we know exactly which @xmath307 are defined and what are their lengths .",
    "the sum of these lengths is the total number of @xmath327 s in @xmath330 , which is at most @xmath279 .",
    "therefore , for a fixed @xmath347 there can be at most @xmath356 distinct sequences @xmath357 .",
    "putting all the previous observations together , we deduce that the number of distinct tuples @xmath290 is at most @xmath358 as desired .",
    "( the @xmath359 follows from the fact that @xmath352 . )",
    "this shows that , if @xmath279 is sufficiently large , then the number of possible @xmath279-logs is strictly smaller than @xmath319 , the number of random inputs of length @xmath279 . to obtain the desired contradiction",
    ", it remains to show that runs of the algorithm on different sources produce distinct @xmath279-logs , that is , that any @xmath279-log @xmath290 uniquely determines the random input used by the algorithm to produce it .",
    "this is exactly what we show next .",
    "consider an @xmath279-log @xmath290 and let @xmath318 be _ any _ random input that can lead to its production .",
    "we prove that @xmath318 are uniquely determined by induction on @xmath279 .",
    "this is clearly true if @xmath360 , since the function @xmath336 tells us explicitly which sublist was chosen for the root of @xmath230 .",
    "so assume @xmath361 for the inductive case .",
    "let @xmath362 , @xmath299 , and @xmath306 .",
    "first suppose that @xmath363 .",
    "then no near repetition was retracted during the @xmath279-th iteration .",
    "the vertex @xmath131 that was the current vertex at the beginning of the @xmath279-th iteration is determined by the function @xmath336 : it is the _",
    "vertex @xmath364 in the depth - first left - to - right search order from the root such that @xmath365 that has a child @xmath366 with @xmath367 .",
    "( note that the first such child @xmath366 is the problematic child @xmath276 of @xmath131 identified when exiting the inner while - loop . ) now , observe that @xmath368 is simply the index of @xmath369 among @xmath2-subsets of @xmath370 , and is thus completely determined by our @xmath279-log @xmath290 .",
    "having determined @xmath371 , we can use the inductive hypothesis to deduce that @xmath372 are also fully determined by the log as follows .",
    "let @xmath373 be the @xmath374-log resulting from the execution of the algorithm for @xmath375 iterations on random input @xmath372 .",
    "by induction , the latter sequence is uniquely determined by the @xmath374-log @xmath373 .",
    "hence , it is enough to show that @xmath373 is in turn uniquely determined by our initial @xmath279-log @xmath290 .",
    "clearly , @xmath376 as for @xmath377 , it is simply obtained from @xmath336 by letting the value of each vertex @xmath378 be @xmath379 .",
    "that is , @xmath380 { \\mathcal{s}}(v ) & \\textrm { otherwise } \\end{array } \\right.\\ ] ] for each @xmath282 ( recall that @xmath381 ) .    in the case when @xmath382 with @xmath383 , a near repetition was retracted during the @xmath279-th iteration with a repeated part of size @xmath7 .",
    "here we first show that @xmath372 are uniquely determined , and then we prove that the same holds for @xmath371 .",
    "let @xmath373 denote the @xmath374-log resulting from the execution of the algorithm for @xmath375 iterations on random input @xmath372 .",
    "we thus have : @xmath384 let us show that @xmath377 is completely determined by @xmath290 .",
    "let @xmath131 denote the current vertex at the beginning of the @xmath279-th iteration .",
    "( remark : the vertex @xmath131 can be deduced from the log @xmath290 , as follows from the discussion below . ) during the @xmath279-th iteration the sublist @xmath332 of @xmath131 was assigned the @xmath371-th @xmath2-subset of @xmath385 .",
    "this triggered the existence of a bad path @xmath386 with @xmath270 , which was subsequently retracted , i.e.  @xmath333 was then set to @xmath379 for all @xmath273 .",
    "now , we determine the first @xmath387 vertices @xmath388 of the bad path from the log .",
    "first , we show that @xmath274 is easily determined : since @xmath377 differs from @xmath336 only on the vertices from @xmath389 , vertex @xmath274 is the first vertex @xmath66 of @xmath230 in depth - first left - to - right order from the root with @xmath390 .",
    "( we remark that @xmath274 would have been the next ` current vertex ' considered by the algorithm if it were run for an extra iteration . )",
    "next , we determine the vertices @xmath391 from the log .",
    "let @xmath392 be the first vertex on the rightmost path of @xmath230 that is encountered when walking down towards the root of @xmath230 from @xmath274 ( note that we could have @xmath393 ) . by definition of the sequence @xmath348 , among the @xmath394 vertices @xmath395 the first @xmath396 vertices are on the rightmost path of @xmath230 , and none of the remaining @xmath397 vertices are .",
    "since @xmath398 , we may identify vertex @xmath256 by starting at vertex @xmath392 and walking down towards the root of @xmath230 either @xmath399 steps ( if @xmath393 ) or @xmath400 steps ( if @xmath401 ) .",
    "now , since we know vertices @xmath402 , @xmath274 and the integer @xmath7 , looking at the path from @xmath402 to @xmath274 gives us all intermediate vertices @xmath403",
    "( if any ) , as well as the size @xmath183 of the gap section . hence , @xmath404 are determined by the log @xmath290 , as claimed .",
    "building on this , we now complete the proof .",
    "let @xmath405 .",
    "we first consider a simple case , namely @xmath406 .",
    "then @xmath407 , and at the beginning of the @xmath279-th iteration , the @xmath371-th @xmath2-sublist @xmath408 of @xmath385 was assigned to variable @xmath332 , which triggered the existence of the bad path . by the definition of the sequence @xmath409 ,",
    "the sublist @xmath408 is the @xmath410-th @xmath2-sublist of @xmath411 having a non - empty intersection with @xmath412 .",
    "we can thus deduce @xmath408 from the log @xmath290 , and obtain in turn @xmath371 from @xmath408 .",
    "notice that in this case the sublist assignments to vertices of @xmath230 at the end of the @xmath374-th and at the end of the @xmath279-th iterations are exactly the same , that is , @xmath413 .",
    "( indeed , this is what makes the case @xmath406 simpler . ) hence , @xmath373 is completely determined by @xmath290 . by induction ,",
    "the sequence @xmath372 is uniquely determined by @xmath373 , and therefore it is also uniquely determined by @xmath290 . since we have seen that @xmath371 is uniquely determined as well ,",
    "this concludes the @xmath406 case .",
    "now , suppose that @xmath414 .",
    "we can obtain @xmath415 from @xmath290 , since @xmath415 is the @xmath410-th @xmath2-sublist of @xmath411 having a non - empty intersection with @xmath412 .",
    "knowing @xmath415 , we can identify vertex @xmath416 as follows .",
    "consider the last time the variable @xmath417 was modified during the execution of the algorithm before the @xmath279-th iteration , say this is during the @xmath418-th iteration .",
    "thus , during that iteration , @xmath417 was assigned the set @xmath415 , and this did not trigger the existence of a bad path . then , the children @xmath419 of @xmath274 were inspected one by one in order , until a problematic child @xmath420 was found .",
    "this problematic child @xmath420 is vertex @xmath416 .",
    "this process is completely deterministic , thus we can simulate it .",
    "( indeed , we know the whole sublist assignment for vertices of @xmath230 at the beginning of the @xmath418-th iteration , and we know the sublist that was sampled for @xmath274 during that iteration , namely , @xmath415 ) . thus , for each vertex @xmath421 , we can figure out how the sublist @xmath198 was set during that iteration , and this is exactly the value of @xmath422 , since those sublists have not been modified afterwards prior to iteration @xmath279 .",
    "notice also that @xmath423 for all @xmath424 , so it only remains to determine @xmath422 for @xmath425 .",
    "we can iterate this argument and discover step by step vertices @xmath426 and the missing entries of @xmath377 .",
    "we spell out the general argument now , for the sake of completeness ( the reader who is already convinced that it can be done is invited to skip this paragraph ) . for each index @xmath427",
    ", we proceed as follows .",
    "the set @xmath428 is the @xmath429-th @xmath2-sublist of @xmath430 having a non - empty intersection with @xmath431 , and is thus determined by @xmath290 .",
    "knowing @xmath428 , we now identify vertex @xmath432 .",
    "say @xmath433 was modified for the last time during the @xmath434-th iteration of the algorithm before the @xmath279-th iteration . during that iteration",
    ", variable @xmath433 was assigned the set @xmath428 , and this did not result in the existence of any bad path .",
    "next , the children @xmath419 of @xmath435 were inspected until a problematic child @xmath420 was found , which is vertex @xmath432 . we know the whole sublist assignment for vertices of @xmath230 at the beginning of the @xmath434-th iteration ; indeed , this is exactly the one at the _ end _ of the @xmath436-th iteration ( as is easily checked ) , which we already know .",
    "we also know the sublist that was sampled for vertex @xmath435 during the @xmath434-th iteration .",
    "hence , we can simulate the execution of lines  [ algo : choice - extension - begin][algo : choice - extension - end ] of the algorithm for the @xmath434-th iteration .",
    "this implies that , for each vertex @xmath421 , we can determine how the sublist @xmath198 was set during that iteration , and that sublist is precisely the set @xmath422 . also , we have that @xmath423 for all @xmath424 .",
    "this way we completely determined @xmath422 for all vertices @xmath437 for each @xmath438 $ ] . for all other vertices @xmath66 of @xmath230 , we have @xmath439 .",
    "thus , @xmath377 is completely determined by @xmath290 , and hence so is the @xmath374-th log @xmath373 , as claimed .",
    "equipped with the knowledge of @xmath377 , we may now finish the proof in a manner similar to the @xmath406 case .",
    "let @xmath408 denote the @xmath371-th @xmath2-sublist @xmath408 of @xmath440 .",
    "the sublist @xmath408 is the @xmath441-th @xmath2-sublist of @xmath440 having a non - empty intersection with @xmath442 , which is thus determined by the log @xmath290 .",
    "hence , we can obtain @xmath368 from @xmath290 .",
    "moreover , as we have seen , @xmath373 is completely determined by the log @xmath290 . by induction ,",
    "the sequence @xmath372 is uniquely determined by @xmath373 , and therefore it is uniquely determined by @xmath290 .",
    "this concludes the proof .",
    "we remark that no effort has been made to optimize the bound of @xmath443 in lemma  [ lemma : more - technical ] .",
    "we thank the two anonymous referees for their insightful comments , which greatly helped us improve the exposition ."
  ],
  "abstract_text": [
    "<S> a vertex coloring of a graph is _ nonrepetitive _ if there is no path in the graph whose first half receives the same sequence of colors as the second half . while every tree can be nonrepetitively colored with a bounded number of colors ( @xmath0 colors is enough ) , fiorenzi , ochem , ossona de mendez , and zhu recently showed that this does not extend to the list version of the problem , that is , for every @xmath1 </S>",
    "<S> there is a tree that is not nonrepetitively @xmath2-choosable . in this paper </S>",
    "<S> we prove the following positive result , which complements the result of fiorenzi _ et al . </S>",
    "<S> _ : there exists a function @xmath3 such that every tree of pathwidth @xmath4 is nonrepetitively @xmath5-choosable . </S>",
    "<S> we also show that such a property is specific to trees by constructing a family of pathwidth-@xmath6 graphs that are not nonrepetitively @xmath2-choosable for any fixed @xmath2 . </S>"
  ]
}