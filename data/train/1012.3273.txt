{
  "article_text": [
    "the class of problems known as assembly line balancing problems ( albps ) concerns the optimization of processes related to the manufacturing of products via assembly lines .",
    "their importance in the industrial world is shown by the fact that much research efforts have been dedicated to many different types of albps during the past 50 - 60 years  @xcite .",
    "the specific problem considered in this paper is the so - called simple assembly line balancing problem ( salbp )  @xcite , a well - studied scientific test case .",
    "an assembly line is composed of a set of work stations arranged in a line , and by a transport system which moves the product to be manufactured along the line .",
    "the product is manufactured by executing a given set of tasks .",
    "each of these tasks has a pre - defined processing time . in order to obtain a solution to a given salbp instance ,",
    "all tasks must be assigned to work stations subject to precedence constraints between the tasks . in the context of the salbp",
    ", all work stations are considered to be of equal size .",
    "moreover , the assembly line is assumed to move in constant speed .",
    "this implies a maximum of @xmath0 time units  the so - called _",
    "cycle time_for processing the tasks assigned to each work station .",
    "the salbp has been tackled with several objective functions among which the following ones are the most studied ones in the literature :    * given a fixed cycle time @xmath0 , the optimization goal consists in minimizing the number of necessary work stations .",
    "this version of the problem is refered to as salbp-1 . *",
    "given a fixed number @xmath1 of work stations , the goal is to minimize the cycle time @xmath0 .",
    "the literature knows this second problem version as salbp-2 .",
    "the feasibility problem salbp - f arises when both a cycle time @xmath0 and a number of work stations @xmath1 is given and the goal is to find a feasible solution respecting @xmath0 and @xmath1 .",
    "in this work we will deal with the salbp-2 version of the problem .    for what concerns the comparison between salbp-1 and salbp-2 ,",
    "much of the scientific work has been dedicated to the salbp-1 .",
    "however , also for the salbp-2 exists a considerable body of research papers .",
    "an excellent survey was provided by  @xcite .",
    "approaches for the salbp-2 can basically be classified as either _ iterative solution approaches _ or _ direct solution approaches_. iterative approaches tackle the problem by iteratively solving a series of salbp - f problems that are obtained by fixing the cycle time .",
    "this process is started with a cycle time that is set to some calculated upper bound .",
    "this cycle time is then decremented during the iterative process , which stops as soon as no solution for the corresponding salbp - f problem can be found .",
    "in contrast to these indirect approaches , direct approaches intend to solve a given salbp-2 instance directly .",
    "heuristic as well as complete approaches have been devised for the salbp-2 . among the existing complete methods we find iterative approaches such as the ones proposed in  @xcite but also direct approaches such as the ones described in  @xcite .",
    "moreover , the performance of different integer programming formulation of the salbp-2 has been evaluated in  @xcite .",
    "the currently best - performing exact method is salome-2  @xcite .",
    "surprisingly this exact method even outperforms the existing heuristic and metaheuristic approaches for the salbp-2 .",
    "the most successful metaheuristic approach to date is a tabu search method proposed in  @xcite .",
    "another tabu search proposal can be found in  @xcite .",
    "other metaheuristic approaches include evolutionary algorithms  @xcite and simulated annealing  @xcite .",
    "finally , a two - phase heuristic based on linear programming can be found in  @xcite , whereas a heuristic based on petri nets was proposed in  @xcite .",
    "[ [ contribution - of - this - work . ] ] contribution of this work .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    subsequently we propose to tackle the salbp-2 by means of an iterative approach based on beam search , which is an incomplete variant of branch & bound .",
    "the resulting iterative beam search algorithm is inspired by one of the current state - of - the - art methods for the salbp-1 , namely beam - aco  @xcite .",
    "beam - aco is a hybrid approach that is obtained by combining the metaheuristic ant colony optimization with beam search . in this work",
    "we propose to use the beam search component of beam - aco in an iterative way for obtaining good salbp-2 solutions .",
    "our computational results show indeed that the proposed algorithm is currently a state - of - the - art method for the salbp-2 .",
    "it is able to obtain optimal , respectively best - known , solutions in 283 out of 302 test cases .",
    "moreover , in further 9 cases the algorithm is able to produce new best - known solutions .",
    "[ [ organization - of - the - paper . ] ] organization of the paper .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    in section  [ sec : salbp-2 ] we present a technical description of the tackled problem .",
    "furthermore , in section  [ sec : algo ] the proposed algorithm is described .",
    "finally , in section  [ sec : results ] we present a detailed experimental evaluation and in section  [ sec : conclusions ] we conclude our work and offer an outlook to future work .",
    "the salbp-2 can technically be described as follows .",
    "an instance @xmath2 consists of three components .",
    "@xmath3 is a set of @xmath4 tasks .",
    "each task @xmath5 has a pre - defined processing time @xmath6 .",
    "moreover , given is a precedence graph @xmath7 , which is a directed , acyclic graph with @xmath8 as node set .",
    "finally , @xmath1 is the pre - defined number of work stations which are ordered from 1 to @xmath1 .",
    "an arc @xmath9 indicates that @xmath5 must be processed before @xmath10 .",
    "given a task @xmath10 , @xmath11 denotes the set of tasks that must be processed before @xmath12 .",
    "a feasible solution is obtained by assigning each task to exactly one work station such that the precedence constraints between the tasks are satisfied .",
    "the objective function consists in minimizing the so - called cycle time .",
    "the salbp-2 can be expressed in the following way as an integer programming ( ip ) problem . @xmath13",
    "subject to : @xmath14    this ip model makes use of the following variables and constants : @xmath15 is a binary variable which is set to 1 if and only if task @xmath5 is assigned to work station @xmath16 .",
    "the objective function ( 1 ) minimizes the cycle time @xmath17 . , while fixed cycle times are denoted by @xmath0 . ] the constraints ( 2 ) ensure that each task @xmath5 is assigned to a single work station @xmath16 .",
    "constraints ( 3 ) reflect the precedence relationships between the tasks .",
    "more specifically , if task @xmath10 is assigned to a work station @xmath16 , all tasks @xmath18 must be assigned to work stations @xmath19 with @xmath20 .",
    "the constraints ( 4 ) ensure that the sum of the processing times of the tasks assigned to a work station @xmath16 do not exceed the cycle time @xmath21 . note that this model is not necessarily the most efficient ip model for solving the salbp-2 .",
    "an evaluation of several different models can be found in  @xcite .",
    "the following solution representation is used for the description of the algorithm as given in section  [ sec : algo ] . a solution",
    "@xmath22 is an ordered list @xmath23 of @xmath1 sets of tasks , where @xmath24 denotes the set of tasks that are assigned to the @xmath25-th work station . abusing notation we henceforth call @xmath24 a work station .",
    "note that for a solution @xmath22 to be valid the following conditions must be fulfilled :    1 .",
    "@xmath26 and @xmath27 , that is , each task is assigned to exactly one work station .",
    "2 .   for each task",
    "@xmath28 it is must hold that @xmath29 .",
    "this ensures that the precedence constraints between the tasks are not violated .",
    "the reverse problem instance @xmath30 with respect to an original instance @xmath2 is obtained by inverting the direction of all arcs of @xmath31 .",
    "it is well - known from the literature  @xcite that tackling the reverse problem instance may lead an exact algorithm faster to an optimal solution , respectively , may provide a better heuristic solution when tackled with the same heuristic as the original problem instance . moreover , a solution @xmath32 to the reverse problem instance @xmath30 can easily be converted into a solution @xmath22 to the original problem instance @xmath2 as follows : @xmath33",
    "as mentioned in the introduction , the basic component of our algorithm for the salbp-2 consists of beam search ( bs ) , which is an incomplete derivative of branch & bound  @xcite .",
    "initially bs has especially been used in the context of scheduling problems ( see , for example ,  @xcite ) . to date only very few applications to other types of problems",
    "exist ( see , for example ,  @xcite ) . in the following",
    "we briefly describe how one of the standard versions of bs works .",
    "the crucial aspect of bs is the parallel extension of partial solutions in several ways . at all times",
    ", the algorithm keeps a set @xmath34 of at most @xmath35 partial solutions , where @xmath34 is the so - called _ beam _ , and @xmath35 is known as the _ beam width_. at each step , at most @xmath36 feasible extensions of each partial solution in @xmath34 are selected on the basis of greedy information . in general , this selection is done deterministically . at the end of each step",
    ", the algorithm creates a new beam @xmath34 by choosing up to @xmath35 partial solutions from the set of selected feasible extensions . for that purpose ,",
    "bs algorithms determine  in the case of minimization  a lower bound value for each extension . only the maximally @xmath35",
    "best extensions  with respect to these lower bound values  are included in @xmath34 .",
    "finally , if any complete solution was generated , the algorithm returns the best of those .",
    "note that the underlying constructive heuristic that defines feasible extensions of partial solutions and the lower bound function for evaluating partial solutions are crucial for the working of bs .    in the following",
    "we first present a description of the implementation of the bs component , before we describe the algorithmic scheme in which this bs component is used .      the bs component described in this section",
    " see algorithm  [ algo : bs ] for the pseudo - code  is the main component of the proposed algorithm for the salbp-2 .",
    "the algorithm requires a problem instance @xmath2 , a fixed cycle time @xmath0 , a beam width @xmath35 , and a maximal number of extensions @xmath36 as input .",
    "given a fixed cycle time @xmath0 and @xmath1 ( the number of work stations ) bs tries to find at least one feasible solution .",
    "as mentioned before , the crucial aspect of bs is the extension of partial solutions in several possible ways . at each step",
    "the algorithm extends each partial solution from @xmath34 in a maximum number of ways .",
    "more specifically , given a partial solution with @xmath37 work stations already filled , an extension is generated by assigning a set of so - far unassigned tasks to the next work station @xmath38 such that the given cycle time @xmath0 is not surpassed and the precedence constraints between the tasks are respected ( see lines 1112 of algorithm  [ algo : bs ] ) .",
    "the algorithm produces extensions in a ( partially ) probabilistic way rather than in the usual deterministic manner .",
    "each generated extension ( partial solution ) is either stored in set @xmath39 in case it is a complete solution , or in set @xmath40 otherwise ( see lines 1319 of algorithm  [ algo : bs ] ) .",
    "however , a partial solution is only stored in set @xmath40 if it uses at most @xmath41 work stations , and if its @xmath42-th work station is different to the @xmath42-th work station of all partial solutions that are already in @xmath34 .",
    "finally , bs creates a new beam @xmath34 by selecting up to @xmath43 solutions from set @xmath40 of further extensible partial solutions ( see line 22 of algorithm  [ algo : bs ] ) .",
    "this is done in function selectsolutions(@xmath40,@xmath43 ) on the basis of a lower bound function lb@xmath44 . in the following we describe in detail the extension of partial solutions and the working of function selectsolutions(@xmath40,@xmath43 ) .",
    "an instance @xmath2 , a fixed cycle time @xmath0 , a beam width @xmath35 , and @xmath36 @xmath45 initialization of an empty solution @xmath22",
    "@xmath46 @xmath47 @xmath48 @xmath49 @xmath50 @xmath51 extendpartialsolution(@xmath52 ) @xmath53",
    "@xmath54 @xmath55selectsolutions(@xmath40,@xmath43 ) if @xmath56 the output is @xmath57 , otherwise @xmath58    [ [ extending - partial - solutions . ] ] extending partial solutions . + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the generation of an extension of a partial solution @xmath59 with @xmath60 work stations already filled works as follows .",
    "unassigned tasks are iteratively assigned to work station @xmath61 until the sum of their processing times is such that no other task can be added to @xmath61 without exceeding the given cycle time @xmath0 .",
    "this procedure is pseudo - coded in algorithm  [ algo : fill - station ] . at each step",
    ", @xmath62 denotes the set of so - far unassigned tasks that may be added to @xmath61 without violating any constraints .",
    "the definition of this set of _ available tasks _ is given in line 3 , respectively 8 , of algorithm  [ algo : fill - station ] .",
    "a partial solution @xmath59 , the index @xmath42 of the work station to be filled , and the cycle time @xmath0",
    "@xmath63 @xmath64 @xmath65 @xmath66choosetask(@xmath67 ) @xmath68",
    "@xmath64 @xmath69 filled work station @xmath61    it remains to describe the implementation of function choosetask(@xmath67 ) of algorithm  [ algo : fill - station ] .",
    "for that purpose let us first define the following subset of @xmath62 : @xmath70 this definition is such that @xmath71 contains all tasks that _ saturate _ , in terms of processing time , the @xmath42-th work station @xmath38 .",
    "the choice of a task from @xmath62 is made on the basis of greedy information , that is , on the basis of values @xmath72 that are assigned to all tasks @xmath73 by a greedy function .",
    "the first action for choosing a task from @xmath62 consists in flipping a coin for deciding if the choice is made deterministically , or probabilistically . in case of a deterministic choice",
    ", there are two possibilities .",
    "first , if @xmath74 , the best task from @xmath71 is chosen , that is , the task with maximal greedy value among all tasks in @xmath71 .",
    "otherwise , we choose the task with maximal greedy value from @xmath62 . in case of a probabilistic decision , a task from @xmath62 is chosen on the basis of the following probability distribution : @xmath75 for completing the description of function choosetask(@xmath67 ) , we must describe the definition of the greedy values @xmath76 , @xmath77 . in a first step a term @xmath78",
    "is defined as follows : @xmath79 hereby , @xmath80 denotes the set of all tasks that can be reached from @xmath25 in precedence graph @xmath31 via a directed path .",
    "this definition combines two greedy heuristics that are often used in the context of assembly line balancing problems .",
    "the first one concerns the task processing times and the second one concerns the size of @xmath80 .",
    "the influence of both heuristics can be adjusted via the setting of weights @xmath81 and @xmath82 . in order to be more flexible we decided to allow for both weights a value from @xmath83 $ ] .",
    "this means that we consider for each heuristic potentially also its negation .",
    "given the @xmath78-values , the greedy values @xmath76 are then derived as follows : @xmath84 where @xmath85 , respectively @xmath86 , denote the minimum , respectively maximum , values of all @xmath78 .",
    "interestingly , for obtaining well - working greedy values , parameters @xmath81 and @xmath82 have to be chosen in a problem - instance - dependent way .",
    "tuning experiments are present in section  [ sec : tuning ] .",
    "[ [ the - lower - bound - function . ] ] the lower bound function .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + +    the new beam @xmath34 is  at each step  chosen from @xmath40 .",
    "this choice is implemented by function selectsolutions(@xmath40,@xmath43 ) of algorithm  [ algo : fill - station ] .",
    "first , the solutions in @xmath40 are ranked with respect to increasing lower bound values lb(@xmath87 ) .",
    "then , the min@xmath88 highest ranked partial solutions from @xmath40 are selected .",
    "let us denote by @xmath89 the set of tasks that have not yet been assigned to work stations in partial solution @xmath59 .",
    "then : @xmath90 note that this lower bound is inspired by splitting - based bounds for the one - dimensional bin - backing problem .",
    "an instance @xmath2 @xmath91 determinestartingcycletime ( ) @xmath92 , @xmath93",
    "@xmath94 @xmath95 beamsearch(@xmath96 ) @xmath95 beamsearch(@xmath97 ) @xmath98 * then * @xmath99 * end if * @xmath100 @xmath101 @xmath94 within 5% of time limit * then * @xmath102 , @xmath103 * else * @xmath104 , @xmath105 * end if * @xmath95 beamsearch(@xmath96 ) @xmath95 beamsearch(@xmath97 ) @xmath98 * then * @xmath100 * else * @xmath106 * end if * @xmath99 cycle time @xmath0    the bs component outlined in the previous section is used by an iterative algorithmic scheme that is presented in algorithm  [ algo : scheme ] .",
    "henceforth this algorithmic scheme is labelled iterated beam search ( ibs ) .",
    "the first step consists in determining a starting cycle time @xmath0 , which is computed in funcion determinestartingcycletime ( ) of algorithm  [ algo : scheme ] as @xmath107 the algorithm works in two phases . in the first phase",
    "( see lines 3 - 11 of algorithm  [ algo : scheme ] ) the algorithm tries to quickly find a first cycle time @xmath0 for which a valid solution can be found . for this purpose bs",
    "is applied with the setting @xmath108 and @xmath109 .",
    "note that this setting was chosen after tuning by hand .",
    "moreover , note that the first phase only takes a fraction of a second of computation time .",
    "this holds for all instances considered in section  [ sec : results ] .",
    "the second phase of the algorithm iteratively tries to find a valid solution for the next smaller cycle time . in this phase ,",
    "the algorithm disposes over a certain time limit for each considered cycle time .",
    "remember that the working of bs is partially probabilistic .",
    "therefore , bs can repeatedly be applied to the same instance with potentially different outcomes .",
    "the first five percent of the above - mentioned time limit are spent by bs applications that use the setting @xmath102 and @xmath103 .",
    "this is done with the intention of not wasting too much computation time , if not necessary .",
    "however , if bs is not able to solve the given cycle time with this setting , the remaining 95% of the available time are spent by bs applications using the setting @xmath104 and @xmath105 . with this setting bs",
    "is considerably slower .",
    "however , the probability of finding feasible solutions is much higher than with the setting described before .",
    "the second phase of the algorithm ends when the time limit has passed without having found a feasible solution for the considered cycle time .",
    "ibs was implemented in ansi c++ , and gcc 3.4.0 was used for compiling the software .",
    "experimental results were obtained on a pc with an amd64x2 4400 processor and 4 gb of memory . in the following",
    "we first describe the set of benchmark instances that we used for the experimental evaluation .",
    "subsequently we present the tuning process that we conducted and the results of the proposed algorithm .",
    "we used the usual set of 302 benchmark instances from the literature .",
    "they can be obtained  together with information about optimal and best - known solutions  from a website especially dedicated to all kind of assembly line balancing problems maintained by armin scholl , http://www.assembly-line-balancing.de .",
    "each instance consists of a precedence graph @xmath31 and a given number @xmath1 of work stations .",
    "the benchmark set is composed of two subsets of instances , henceforth called dataset1 and dataset2 .",
    "dataset1 consists of 128 instances based on 9 different precedence graphs with a number of tasks between 29 to 111 .",
    "dataset2 is composed of 174 instances based on 8 different precedence graphs with a number of tasks varying from 53 to 297 .      during preliminar experiments we realized that parameters @xmath35 and @xmath36 have a rather low impact on the final results of ibs .",
    "in other words it is easy to find a reasonable setting for these parameters quite quickly .",
    "their setting dynamically changes during a run of the algorithm as specified in section  [ sec : algo - scheme ] . on the contrary , parameters @xmath81 and @xmath82 ( see eq .",
    "[ eq : gamma ] ) have a high impact on the algorithms performance .",
    "remember that @xmath81 is the weight of the greedy function concerning the task processing times , while @xmath82 is the weight of the greedy function concerning the number of tasks that have to be processed after the task under consideration .",
    "as mentioned before , for both parameters we allowed values from @xmath83 $ ] . instead of trying to find a good parameter setting for each instance",
    ", we decided for a tuning process based on precedence graphs , that is , we wanted to choose a single setting of @xmath81 and @xmath82 for all instances concerning the same precedence graph .",
    "for that purpose we applied a specific version of ibs for all combinations of @xmath110 to all 302 instances .",
    "this makes a total of 441 different settings for each instance . the specific version of ibs that we applied for the tuning process differs from ibs as outlined in algorithm  [ algo : scheme ] in that lines 14 - 24 were replaced by a single , deterministic , application of beam search with @xmath111 and @xmath112",
    "this was done for the purpose of saving computation time . based on the obtained results we chose the settings presented in table  [ tab : tuning ] for the different precedence graphs .",
    "it is interesting to note that , apart from a few exceptions , the greedy heuristic based on task processing times does not seem necessary for obtaining good results .",
    ".[tab : tuning ] values of parameters @xmath81 and @xmath82 for the final experiments . [ cols=\"<,<,<,<,<,<\",options=\"header \" , ]",
    "in this work we have proposed an iterative beam search algorithm for the simple assembly line balancing problem with a fixed number of work stations , salbp-2 .",
    "the experimental evalution of the algorithm has shown that it is currently a state - of - the - art method for this problem .",
    "appart from producing optimal , respectively best - known , solutions in 283 out of 302 test cases , our algorithm generated new best - known solutions in further 9 test cases . encouraged by the results for the salbp-1 version of the problem ( as published in  @xcite ) and the results obtained in this paper for the salbp-2 we intent to apply similar algorithms based on beam search to other assembly line balancing problems .",
    "this work was supported by grant tin2007 - 66523 ( formalism ) of the spanish government .",
    "moreover , christian blum acknowledges support from the _ ramn y cajal _ program of the spanish ministry of science and innovation .",
    "many thanks go to armin scholl for verifying the new best - known solutions found by the algorithm proposed in this work .",
    "finally , we would also like to express our thanks to cristbal miralles who was involved as a co - author of a similar work for the more general assembly line worker assignment and balancing problem",
    ".    10    h.  akeba , m.  hifib , and r.  mhallah . a beam search algorithm for the circular packing problem .",
    ", 36(5):15131528 , 2009 .    e.  j. anderson and m.  c. ferris .",
    "genetic algorithms for combinatorial optimization : the assembly line balancing problem .",
    ", 6:161173 , 1994 .    c.  blum . for simple assembly line balancing",
    ", 20(4):618627 , 2008 .",
    "c.  blum , m.  j. blesa , and m.  lpez ibez .",
    "beam search for the longest common subsequence problem .",
    ", 36(12):31783186 , 2009 .    c.  blum and c.  miralles . on solving the assembly line worker assignment and balancing problem via beam search",
    ", 38(1):328339 , 2011 .",
    "the application of a tabu search metaheuristic to the assembly line balancing problem .",
    ", 77:209227 , 1998 .",
    "m.  ghirardi and c.  n. potts .",
    "makespan minimization for scheduling unrelated parallel machines : a recovering beam search approach .",
    ", 165(2):457467 , 2005 .",
    "s.  gosh and r.  j. gagnon . a comprehensive literature review and analysis of the design , balancing and scheduling of assembly systems .",
    ", 27:637670 , 1989 .",
    "s.  t. hackman , m.  j. magazine , and t.  s. wee .",
    "fast , effective algorithms for simple assembly line balancing problems . , 37:916924 , 1989 .",
    "a.  henrici . a comparison between simulated annealing and tabu search with an example from the production planning . in h.",
    "dyckhoff  et  al . , editor , _ operations research proceedings _ , pages 498503 .",
    "springer verlag , berlin , germany , 1994 .",
    "o.  kilincci .",
    "a petri net - based heuristic for simply assembly line balancing problem of type 2 . , 46:329338 , 2010 .",
    "r.  klein and a.  scholl . maximizing the production rate in simple assembly line balancing  a branch and bound procedure .",
    ", 91:367385 , 1996 .",
    "lee and d.  l. woodruff .",
    "beam search for peak alignment of nmr signals .",
    ", 513(2):413416 , 2004 .",
    "a.  c. nearchou .",
    "balancing large assembly lines by a new heuristic based on differential evolution .",
    "34:10161029 , 2007 .    p.  s. ow and t.  e. morton .",
    "filtered beam search in scheduling .",
    ", 26:297307 , 1988 .    r.  pastor , l.  ferrer , and a.  garca . evaluating optimization models to solve salbp . in o.",
    "gervasi and m.  l. gavrilova , editors , _ proceedings of iccsa 2007  international conference on computational science and its applications _ ,",
    "volume 4705 of _ lecture notes in computer science _ , pages 791803 .",
    "springer verlag , berlin , germany , 2007 .",
    "i.  sabuncuoglu and m.  bayiz .",
    "job shop scheduling with beam search .",
    ", 118:390412 , 1999 .",
    "m.  e. salveson .",
    "the assembly line balancing problem .",
    ", 6:1825 , 1955 .",
    "a.  scholl . . in h.",
    "dyckhoff  et  al . , editor , _ operations research proceedings _ , pages 175181 .",
    "springer verlag , berlin , germany , 1994 .",
    "a.  scholl . .",
    "physica verlag , heidelberg , germany , 2nd edition edition , 1999 .",
    "a.  scholl and c.  becker .",
    "state - of - the - art exact and heuristic solution procedures for simple assembly line balancing . , 168(3):666693 , 2006 .",
    "a.  scholl and s.  voss .",
    "simple assembly line balancing ",
    "heuristic approaches .",
    ", 2:217244 , 1996 .",
    "h.  f. ugurdag , r.  rachamadugu , and c.  a. papachristou . designing paced assembly lines with fixed number of stations .",
    ", 102:488501 , 1997 .",
    "j.  m.  s. valente and r.  a.  f.  s. alves . filtered and recovering beam search algorithms for the early / tardy scheduling problem with no idle time .",
    ", 48(2):363375 , 2005 .",
    "t.  watanabe , y.  hashimoto , l.  nishikawa , and h.  tokumaru .",
    "line balancing using a genetic evolution model .",
    ", 3:6976 , 1995 ."
  ],
  "abstract_text": [
    "<S> the simple assembly line balancing problem ( salbp ) concerns the assignment of tasks with pre - defined processing times to work stations that are arranged in a line . </S>",
    "<S> hereby , precedence constraints between the tasks must be respected . </S>",
    "<S> the optimization goal of the salbp-2 version of the problem concerns the minimization of the so - called cycle time , that is , the time in which the tasks of each work station must be completed .    in this work </S>",
    "<S> we propose to tackle this problem with an iterative search method based on beam search . </S>",
    "<S> the proposed algorithm is able to obtain optimal , respectively best - known , solutions in 283 out of 302 test cases . </S>",
    "<S> moreover , for 9 further test cases the algorithm is able to produce new best - known solutions . </S>",
    "<S> these numbers indicate that the proposed iterative beam search algorithm is currently a state - of - the - art method for the salbp-2 . </S>"
  ]
}